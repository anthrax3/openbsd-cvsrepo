head	1.134;
access;
symbols
	OPENBSD_6_2:1.134.0.2
	OPENBSD_6_2_BASE:1.134
	OPENBSD_6_1:1.132.0.4
	OPENBSD_6_1_BASE:1.132
	OPENBSD_6_0:1.125.0.4
	OPENBSD_6_0_BASE:1.125
	OPENBSD_5_9:1.125.0.2
	OPENBSD_5_9_BASE:1.125
	OPENBSD_5_8:1.124.0.4
	OPENBSD_5_8_BASE:1.124
	OPENBSD_5_7:1.123.0.2
	OPENBSD_5_7_BASE:1.123
	OPENBSD_5_6:1.122.0.4
	OPENBSD_5_6_BASE:1.122
	OPENBSD_5_5:1.120.0.6
	OPENBSD_5_5_BASE:1.120
	OPENBSD_5_4:1.120.0.2
	OPENBSD_5_4_BASE:1.120
	OPENBSD_5_3:1.118.0.4
	OPENBSD_5_3_BASE:1.118
	OPENBSD_5_2:1.117.0.2
	OPENBSD_5_2_BASE:1.117
	OPENBSD_5_1_BASE:1.117
	OPENBSD_5_1:1.117.0.4
	OPENBSD_5_0:1.116.0.4
	OPENBSD_5_0_BASE:1.116
	OPENBSD_4_9:1.115.0.6
	OPENBSD_4_9_BASE:1.115
	OPENBSD_4_8:1.115.0.2
	OPENBSD_4_8_BASE:1.115
	OPENBSD_4_7:1.114.0.12
	OPENBSD_4_7_BASE:1.114
	OPENBSD_4_6:1.114.0.18
	OPENBSD_4_6_BASE:1.114
	OPENBSD_4_5:1.114.0.16
	OPENBSD_4_5_BASE:1.114
	OPENBSD_4_4:1.114.0.14
	OPENBSD_4_4_BASE:1.114
	OPENBSD_4_3:1.114.0.10
	OPENBSD_4_3_BASE:1.114
	OPENBSD_4_2:1.114.0.8
	OPENBSD_4_2_BASE:1.114
	OPENBSD_4_1:1.114.0.6
	OPENBSD_4_1_BASE:1.114
	OPENBSD_4_0:1.114.0.2
	OPENBSD_4_0_BASE:1.114
	OPENBSD_3_9:1.114.0.4
	OPENBSD_3_9_BASE:1.114
	OPENBSD_3_8:1.112.0.6
	OPENBSD_3_8_BASE:1.112
	OPENBSD_3_7:1.112.0.4
	OPENBSD_3_7_BASE:1.112
	OPENBSD_3_6:1.104.0.2
	OPENBSD_3_6_BASE:1.104
	OPENBSD_3_5:1.100.0.4
	OPENBSD_3_5_BASE:1.100
	OPENBSD_3_4:1.92.0.2
	OPENBSD_3_4_BASE:1.92
	OPENBSD_3_3:1.89.0.2
	OPENBSD_3_3_BASE:1.89
	OPENBSD_3_2:1.88.0.4
	OPENBSD_3_2_BASE:1.88
	OPENBSD_3_1:1.83.0.2
	OPENBSD_3_1_BASE:1.83
	OPENBSD_3_0:1.81.0.2
	OPENBSD_3_0_BASE:1.81
	OPENBSD_2_9:1.65.0.2
	OPENBSD_2_9_BASE:1.65
	OPENBSD_2_8:1.58.0.2
	OPENBSD_2_8_BASE:1.58
	OPENBSD_2_7:1.56.0.2
	OPENBSD_2_7_BASE:1.56
	OPENBSD_2_6:1.50.0.2
	OPENBSD_2_6_BASE:1.50
	OPENBSD_2_5:1.49.0.2
	OPENBSD_2_5_BASE:1.49
	OPENBSD_2_4:1.41.0.2
	OPENBSD_2_4_BASE:1.41
	OPENBSD_2_3:1.26.0.2
	OPENBSD_2_3_BASE:1.26
	OPENBSD_2_2:1.22.0.2
	OPENBSD_2_2_BASE:1.22
	OPENBSD_2_1:1.17.0.2
	OPENBSD_2_1_BASE:1.17
	OPENBSD_2_0:1.12.0.2
	OPENBSD_2_0_BASE:1.12
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.134
date	2017.07.05.10.22.32;	author espie;	state Exp;
branches;
next	1.133;
commitid	5mrdGqhok9NtOxYu;

1.133
date	2017.04.14.21.37.15;	author espie;	state Exp;
branches;
next	1.132;
commitid	HsfgEsa5I4HmHFYH;

1.132
date	2017.01.29.17.06.56;	author rpe;	state Exp;
branches;
next	1.131;
commitid	wUiRSqvT5mSAQkZ6;

1.131
date	2016.11.19.14.20.58;	author tb;	state Exp;
branches;
next	1.130;
commitid	cJjw851oyvO56iNN;

1.130
date	2016.10.18.02.47.07;	author tb;	state Exp;
branches;
next	1.129;
commitid	wW3JJhWcCqi8aqlx;

1.129
date	2016.10.06.18.56.17;	author natano;	state Exp;
branches;
next	1.128;
commitid	ItpgpvOL7BC3XEZJ;

1.128
date	2016.10.06.16.22.43;	author tb;	state Exp;
branches;
next	1.127;
commitid	D1xfONCQEy1CNSpI;

1.127
date	2016.10.05.18.00.41;	author natano;	state Exp;
branches;
next	1.126;
commitid	6NqQgOcrjHcdPwol;

1.126
date	2016.10.04.16.54.31;	author deraadt;	state Exp;
branches;
next	1.125;
commitid	7alnoUOYVuBq9PaO;

1.125
date	2015.08.23.14.22.56;	author deraadt;	state Exp;
branches;
next	1.124;
commitid	tpz2rCL73b9o3qDY;

1.124
date	2015.06.02.06.10.14;	author deraadt;	state Exp;
branches;
next	1.123;
commitid	oFjUVVRwTypFPD9c;

1.123
date	2014.08.26.20.19.25;	author rpe;	state Exp;
branches;
next	1.122;
commitid	2uCZGoLImpFRV5IL;

1.122
date	2014.07.09.19.23.28;	author espie;	state Exp;
branches;
next	1.121;
commitid	7cDYL9MDx0DC1oMf;

1.121
date	2014.04.22.10.21.56;	author reyk;	state Exp;
branches;
next	1.120;

1.120
date	2013.07.23.22.37.02;	author todd;	state Exp;
branches;
next	1.119;

1.119
date	2013.06.17.19.16.02;	author robert;	state Exp;
branches;
next	1.118;

1.118
date	2012.08.29.22.10.32;	author espie;	state Exp;
branches;
next	1.117;

1.117
date	2011.09.17.16.59.53;	author pirofti;	state Exp;
branches;
next	1.116;

1.116
date	2011.04.24.22.04.43;	author guenther;	state Exp;
branches;
next	1.115;

1.115
date	2010.03.23.21.31.02;	author espie;	state Exp;
branches;
next	1.114;

1.114
date	2005.12.02.01.17.20;	author deraadt;	state Exp;
branches;
next	1.113;

1.113
date	2005.09.16.12.28.34;	author jmc;	state Exp;
branches;
next	1.112;

1.112
date	2005.01.09.20.36.20;	author espie;	state Exp;
branches;
next	1.111;

1.111
date	2005.01.09.19.35.26;	author espie;	state Exp;
branches;
next	1.110;

1.110
date	2005.01.09.00.14.32;	author espie;	state Exp;
branches;
next	1.109;

1.109
date	2004.12.25.16.17.33;	author grange;	state Exp;
branches;
next	1.108;

1.108
date	2004.11.30.15.46.01;	author mickey;	state Exp;
branches;
next	1.107;

1.107
date	2004.10.26.05.01.02;	author mickey;	state Exp;
branches;
next	1.106;

1.106
date	2004.10.21.20.47.29;	author grange;	state Exp;
branches;
next	1.105;

1.105
date	2004.10.16.15.28.14;	author grange;	state Exp;
branches;
next	1.104;

1.104
date	2004.08.06.22.30.54;	author pefo;	state Exp;
branches;
next	1.103;

1.103
date	2004.05.03.15.18.18;	author drahn;	state Exp;
branches;
next	1.102;

1.102
date	2004.04.21.15.58.21;	author miod;	state Exp;
branches;
next	1.101;

1.101
date	2004.03.31.19.13.04;	author mickey;	state Exp;
branches;
next	1.100;

1.100
date	2004.02.27.17.36.11;	author deraadt;	state Exp;
branches;
next	1.99;

1.99
date	2004.02.01.06.16.50;	author brad;	state Exp;
branches;
next	1.98;

1.98
date	2004.01.28.02.24.28;	author mickey;	state Exp;
branches;
next	1.97;

1.97
date	2004.01.14.23.26.24;	author brad;	state Exp;
branches;
next	1.96;

1.96
date	2004.01.05.01.33.40;	author mickey;	state Exp;
branches;
next	1.95;

1.95
date	2003.12.14.10.02.57;	author matthieu;	state Exp;
branches;
next	1.94;

1.94
date	2003.10.05.00.18.02;	author mickey;	state Exp;
branches;
next	1.93;

1.93
date	2003.10.05.00.12.52;	author mickey;	state Exp;
branches;
next	1.92;

1.92
date	2003.05.17.20.58.52;	author millert;	state Exp;
branches;
next	1.91;

1.91
date	2003.05.14.08.01.02;	author mho;	state Exp;
branches;
next	1.90;

1.90
date	2003.04.17.03.48.56;	author drahn;	state Exp;
branches;
next	1.89;

1.89
date	2003.01.05.22.52.19;	author mickey;	state Exp;
branches;
next	1.88;

1.88
date	2002.09.17.16.19.49;	author miod;	state Exp;
branches;
next	1.87;

1.87
date	2002.08.16.02.04.58;	author wcobb;	state Exp;
branches;
next	1.86;

1.86
date	2002.08.11.22.48.05;	author art;	state Exp;
branches;
next	1.85;

1.85
date	2002.06.09.05.52.06;	author todd;	state Exp;
branches;
next	1.84;

1.84
date	2002.05.15.15.55.01;	author mickey;	state Exp;
branches;
next	1.83;

1.83
date	2002.02.22.23.31.11;	author art;	state Exp;
branches;
next	1.82;

1.82
date	2002.01.03.02.19.20;	author art;	state Exp;
branches;
next	1.81;

1.81
date	2001.09.25.10.26.39;	author espie;	state Exp;
branches;
next	1.80;

1.80
date	2001.09.25.09.43.22;	author espie;	state Exp;
branches;
next	1.79;

1.79
date	2001.09.17.01.18.34;	author art;	state Exp;
branches;
next	1.78;

1.78
date	2001.09.14.06.03.11;	author fgsch;	state Exp;
branches;
next	1.77;

1.77
date	2001.09.07.19.35.37;	author mickey;	state Exp;
branches;
next	1.76;

1.76
date	2001.09.07.19.29.49;	author mickey;	state Exp;
branches;
next	1.75;

1.75
date	2001.09.03.16.26.02;	author art;	state Exp;
branches;
next	1.74;

1.74
date	2001.09.01.16.03.18;	author drahn;	state Exp;
branches;
next	1.73;

1.73
date	2001.08.31.14.13.50;	author art;	state Exp;
branches;
next	1.72;

1.72
date	2001.08.31.13.49.17;	author art;	state Exp;
branches;
next	1.71;

1.71
date	2001.08.31.12.47.57;	author brad;	state Exp;
branches;
next	1.70;

1.70
date	2001.08.31.10.54.59;	author art;	state Exp;
branches;
next	1.69;

1.69
date	2001.06.26.18.00.16;	author brad;	state Exp;
branches;
next	1.68;

1.68
date	2001.06.26.15.33.28;	author hin;	state Exp;
branches;
next	1.67;

1.67
date	2001.06.24.23.31.07;	author niklas;	state Exp;
branches;
next	1.66;

1.66
date	2001.05.14.12.34.26;	author espie;	state Exp;
branches;
next	1.65;

1.65
date	2001.03.28.22.52.22;	author todd;	state Exp;
branches;
next	1.64;

1.64
date	2001.01.27.01.59.43;	author niklas;	state Exp;
branches;
next	1.63;

1.63
date	2001.01.27.00.58.23;	author niklas;	state Exp;
branches;
next	1.62;

1.62
date	2001.01.17.20.14.04;	author mickey;	state Exp;
branches;
next	1.61;

1.61
date	2001.01.15.23.12.00;	author art;	state Exp;
branches;
next	1.60;

1.60
date	2000.12.30.06.45.52;	author angelos;	state Exp;
branches;
next	1.59;

1.59
date	2000.12.12.18.37.12;	author art;	state Exp;
branches;
next	1.58;

1.58
date	2000.09.03.18.41.11;	author espie;	state Exp;
branches;
next	1.57;

1.57
date	2000.08.01.15.56.38;	author millert;	state Exp;
branches;
next	1.56;

1.56
date	2000.04.21.00.10.40;	author millert;	state Exp;
branches;
next	1.55;

1.55
date	2000.04.09.07.48.14;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2000.03.10.22.05.49;	author niklas;	state Exp;
branches;
next	1.53;

1.53
date	2000.03.01.03.56.41;	author todd;	state Exp;
branches;
next	1.52;

1.52
date	99.12.22.21.25.24;	author mickey;	state Exp;
branches;
next	1.51;

1.51
date	99.11.26.00.32.11;	author millert;	state Exp;
branches;
next	1.50;

1.50
date	99.09.27.04.04.52;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	99.03.02.21.47.32;	author niklas;	state Exp;
branches;
next	1.48;

1.48
date	99.02.02.08.53.32;	author imp;	state Exp;
branches;
next	1.47;

1.47
date	99.02.02.02.36.35;	author imp;	state Exp;
branches;
next	1.46;

1.46
date	99.01.24.16.40.42;	author niklas;	state Exp;
branches;
next	1.45;

1.45
date	99.01.24.16.08.37;	author art;	state Exp;
branches;
next	1.44;

1.44
date	99.01.08.00.26.59;	author millert;	state Exp;
branches;
next	1.43;

1.43
date	99.01.07.04.57.13;	author millert;	state Exp;
branches;
next	1.42;

1.42
date	98.10.30.18.39.52;	author millert;	state Exp;
branches;
next	1.41;

1.41
date	98.09.30.13.27.28;	author art;	state Exp;
branches;
next	1.40;

1.40
date	98.09.07.00.47.11;	author niklas;	state Exp;
branches;
next	1.39;

1.39
date	98.08.28.22.46.02;	author mickey;	state Exp;
branches;
next	1.38;

1.38
date	98.05.18.18.29.07;	author mickey;	state Exp;
branches;
next	1.37;

1.37
date	98.05.18.17.40.00;	author mickey;	state Exp;
branches;
next	1.36;

1.36
date	98.05.18.17.37.04;	author mickey;	state Exp;
branches;
next	1.35;

1.35
date	98.05.18.14.24.42;	author mickey;	state Exp;
branches;
next	1.34;

1.34
date	98.05.17.07.37.08;	author niklas;	state Exp;
branches;
next	1.33;

1.33
date	98.05.17.06.32.07;	author mickey;	state Exp;
branches;
next	1.32;

1.32
date	98.05.16.20.56.52;	author niklas;	state Exp;
branches;
next	1.31;

1.31
date	98.05.14.21.43.02;	author niklas;	state Exp;
branches;
next	1.30;

1.30
date	98.05.11.20.34.54;	author niklas;	state Exp;
branches;
next	1.29;

1.29
date	98.05.11.07.43.12;	author niklas;	state Exp;
branches;
next	1.28;

1.28
date	98.05.04.21.28.18;	author mickey;	state Exp;
branches;
next	1.27;

1.27
date	98.04.25.06.42.44;	author niklas;	state Exp;
branches;
next	1.26;

1.26
date	98.03.18.15.51.04;	author mickey;	state Exp;
branches;
next	1.25;

1.25
date	98.03.17.18.10.53;	author mickey;	state Exp;
branches;
next	1.24;

1.24
date	98.02.15.20.56.40;	author niklas;	state Exp;
branches;
next	1.23;

1.23
date	97.12.09.19.45.29;	author niklas;	state Exp;
branches;
next	1.22;

1.22
date	97.09.21.11.46.58;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	97.08.06.09.40.10;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	97.07.29.04.07.35;	author kstailey;	state Exp;
branches;
next	1.19;

1.19
date	97.07.29.03.37.03;	author kstailey;	state Exp;
branches;
next	1.18;

1.18
date	97.07.29.03.18.39;	author kstailey;	state Exp;
branches;
next	1.17;

1.17
date	97.04.19.21.26.09;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	97.04.18.06.47.08;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.02.28.23.22.07;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	97.02.27.20.57.52;	author briggs;	state Exp;
branches;
next	1.13;

1.13
date	96.12.13.15.45.58;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.06.02.10.44.55;	author tholo;	state Exp;
branches;
next	1.11;

1.11
date	96.06.02.07.22.46;	author tholo;	state Exp;
branches;
next	1.10;

1.10
date	96.05.18.05.37.48;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.05.14.19.10.34;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.05.06.21.44.03;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.05.06.20.31.44;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.04.23.09.47.22;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.03.02.21.04.11;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.01.28.19.42.34;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	95.12.17.05.53.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.16.21.10.33;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.134
log
@bye bye depends
okay tb@@ deraadt@@
@
text
@#	$OpenBSD: Makefile,v 1.133 2017/04/14 21:37:15 espie Exp $

#
# For more information on building in tricky environments, please see
# the list of possible environment variables described in
# /usr/share/mk/bsd.README.
#
# Building recommendations:
#
# 1) If at all possible, put this source tree in /usr/src.  If /usr/src
# must be a symbolic link, set BSDSRCDIR in the environment to point to
# the real location.
#
# 2) It is also recommended that you compile with objects outside the
# source tree. To do this, ensure /usr/obj exists or points to some
# area of disk of sufficient size.  Then do "cd /usr/src; make obj".
# This will make a symbolic link called "obj" in each directory, as
# well as populate the /usr/obj properly with directories for the
# objects.
#
# 3) It is strongly recommended that you build and install a new kernel
# before rebuilding your system. Some of the new programs may use new
# functionality or depend on API changes that your old kernel doesn't have.
#
# 4) If you are reasonably sure that things will compile OK, use the
# "make build" target supplied here. Good luck.
#
# 5) If you want to setup a cross-build environment, there is a "cross-gcc"
# target available which upon completion of: 
#	"make -f Makefile.cross TARGET=<target> cross-gcc"
# (where <target> is one of the names in the /sys/arch directory) will produce
# a set of compilation tools along with the includes in the /usr/cross/<target>
# directory. The "cross-distrib" target will build cross-tools as well as
# binaries for a given <target>.
#

.include <bsd.own.mk>	# for NOMAN, if it's there.

SUBDIR+= lib include bin libexec sbin usr.bin usr.sbin share games
SUBDIR+= gnu

SUBDIR+= sys

.if   make(clean) || make(cleandir) || make(obj)
SUBDIR+= etc distrib regress
.endif

regression-tests:
	@@echo Running regression tests...
	@@cd ${.CURDIR}/regress && ${MAKE} depend && exec ${MAKE} regress

includes:
	cd ${.CURDIR}/include && \
		su ${BUILDUSER} -c 'exec ${MAKE} prereq' && \
		exec ${MAKE} includes

beforeinstall:
	cd ${.CURDIR}/etc && exec ${MAKE} DESTDIR=${DESTDIR} distrib-dirs
	cd ${.CURDIR}/etc && exec ${MAKE} DESTDIR=${DESTDIR} install-mtree
	cd ${.CURDIR}/include && exec ${MAKE} includes

afterinstall:
.ifndef NOMAN
	cd ${.CURDIR}/share/man && exec ${MAKE} makedb
	cd ${.CURDIR}/distrib/sets && exec ${MAKE} makedb
.endif

.ifdef DESTDIR
build:
	@@echo cannot build with DESTDIR set
	@@false
.else
build:
	umask ${WOBJUMASK}; exec ${MAKE} do-build

do-build:
.ifdef GLOBAL_AUTOCONF_CACHE
	${INSTALL} -c -o ${BUILDUSER} -g ${WOBJGROUP} -m 664 /dev/null \
	    ${GLOBAL_AUTOCONF_CACHE}
.endif
	@@if [[ `id -u` -ne 0 ]]; then \
		echo $@@ must be called by root >&2; \
		false; \
	fi
	cd ${.CURDIR}/share/mk && exec ${MAKE} install
	exec ${MAKE} cleandir
	exec ${MAKE} includes
	cd ${.CURDIR}/lib && \
	    su ${BUILDUSER} -c 'exec ${MAKE}' && \
	    NOMAN=1 exec ${MAKE} install
	cd ${.CURDIR}/gnu/lib && \
	    su ${BUILDUSER} -c 'exec ${MAKE}' && \
	    NOMAN=1 exec ${MAKE} install
	su ${BUILDUSER} -c 'exec ${MAKE}' && \
	    exec ${MAKE} install
	/bin/sh ${.CURDIR}/distrib/sets/makeetcset ${.CURDIR} ${MAKE}
.endif

CROSS_TARGETS=cross-env cross-dirs cross-obj cross-includes cross-binutils \
	cross-gcc cross-tools cross-lib cross-bin cross-etc-root-var \
	cross-depend cross-clean cross-cleandir

.if !defined(TARGET)
${CROSS_TARGETS}:
	@@echo "TARGET must be set for $@@"; exit 1
.else
. include "Makefile.cross"
.endif # defined(TARGET)

.PHONY: ${CROSS_TARGETS} \
	build regression-tests includes beforeinstall afterinstall \
	all depend do-build

.include <bsd.subdir.mk>
@


1.133
log
@mark newish phony targets as phony.
okay tb@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.132 2017/01/29 17:06:56 rpe Exp $
d89 1
a89 1
	    su ${BUILDUSER} -c '${MAKE} depend && exec ${MAKE}' && \
d92 1
a92 1
	    su ${BUILDUSER} -c '${MAKE} depend && exec ${MAKE}' && \
d94 1
a94 1
	su ${BUILDUSER} -c '${MAKE} depend && exec ${MAKE}' && \
@


1.132
log
@Ensure the build user can write to the GLOBAL_AUTOCONF_CACHE file by
creating or truncating it with the proper ownership and permissions.

OK tb@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.131 2016/11/19 14:20:58 tb Exp $
d112 1
a112 1
	all depend
@


1.131
log
@Enable builds with a dedicated user that cannot elevate privileges or write
to /usr/src or /usr/xenocara.

Change /usr/{,x}obj to owner build:wobj with mode 770 and install the
systemwide makefiles before starting a build.  The root of the noperm fs
containing DESTDIR should also be owned by build:wobj.

Developers will need to add their users to group wobj to be able to write
to /usr/{,x}obj/.

"push forward" deraadt; testing, input & ok rpe
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.130 2016/10/18 02:47:07 tb Exp $
d78 2
a79 1
	cp /dev/null ${GLOBAL_AUTOCONF_CACHE}
@


1.130
log
@Swap 'make cleandir' and 'make includes' for real.
Should have been part of commitid uHRFWpwUBjIz0UuR.

Original message:

Move libcrypto, librpcsvc and gnu/usr.bin/cc/include from RDIRS to PRDIRS,
and add prereq targets, so some header files are generated by BUILDUSER
during 'make prereq' instead of by root during 'make includes'.

Switch the order of 'make cleandir' and 'make includes' during 'make build'
so we don't generate many files twice.

Except for some machine@@ symlinks from ${MACHINE}/stand, /usr/obj is now
clean from files generated by root during 'make build'. Those will be
cleaned up in a second step.

help, testing & ok deraadt, input from natano, further testing rpe
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.129 2016/10/06 18:56:17 natano Exp $
d74 3
@


1.129
log
@Print the root check error message to stderr. While there add the name
of the target to the message to be more descriptive.

ok deraadt tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.128 2016/10/06 16:22:43 tb Exp $
d82 1
a83 1
	exec ${MAKE} cleandir
@


1.128
log
@Simplify the 'make includes' step in 'make build': move the privdrop
bit up into 'make includes', so the latter benefits from that idiom
as well. Sprinkle a few 'exec' while there.

ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.127 2016/10/05 18:00:41 natano Exp $
d78 1
a78 1
		echo 'must be called by root' 2>&1; \
@


1.127
log
@De-escalate to an unprivileged users during 'make build' and 'make release'.

- If you start make build as root, everything will be run as root.
  Nothing new here. New is, that you can set BUILDUSER=somebody and the
  unprived parts will be run as somebody.
- If you start make build with sudo, the unprived parts will be run as
  the real user (meaning YOU). You can still set BUILDUSER=somebody and
  the uprived parts will run as somebody.
- If you start make build as a normal user it will error out. "I'm sorry
  Dave."

Note that DESTDIR must be on partition with the noperm flag set for make
release to work correctly as an unprivileged user.

idea and ok deraadt
input and ok tb ratchov millert
rpe, halex and probably others where part of the conversation to make
this happen, thanks!
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.126 2016/10/04 16:54:31 deraadt Exp $
d53 3
a55 1
	cd ${.CURDIR}/include && ${MAKE} prereq && exec ${MAKE} includes
d82 2
a83 4
	cd ${.CURDIR}/include && \
	    su ${BUILDUSER} -c 'exec ${MAKE} prereq' && \
	    exec ${MAKE} includes
	${MAKE} cleandir
@


1.126
log
@stop supporting SUDO builds.  Something better is coming, so let's
align everyone who is using SUDO builds towards the new strategy.
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.125 2015/08/23 14:22:56 deraadt Exp $
d75 4
d80 3
a82 1
	cd ${.CURDIR}/include && ${MAKE} prereq && exec ${MAKE} includes
d84 2
a85 1
	cd ${.CURDIR}/lib && ${MAKE} depend && ${MAKE} && \
d87 2
a88 1
	cd ${.CURDIR}/gnu/lib && ${MAKE} depend && ${MAKE} && \
d90 2
a91 1
	${MAKE} depend && ${MAKE} && exec ${MAKE} install
@


1.125
log
@must make obj in etc as well; the etc.*/Makefile stubs depend upon it.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.124 2015/06/02 06:10:14 deraadt Exp $
d53 1
a53 1
	cd ${.CURDIR}/include && ${MAKE} prereq && exec ${SUDO} ${MAKE} includes
d75 3
a77 3
	cd ${.CURDIR}/share/mk && exec ${SUDO} ${MAKE} install
	cd ${.CURDIR}/include && ${MAKE} prereq && exec ${SUDO} ${MAKE} includes
	${SUDO} ${MAKE} cleandir
d79 1
a79 1
	    NOMAN=1 exec ${SUDO} ${MAKE} install
d81 3
a83 3
	    NOMAN=1 exec ${SUDO} ${MAKE} install
	${MAKE} depend && ${MAKE} && exec ${SUDO} ${MAKE} install
	${SUDO} /bin/sh ${.CURDIR}/distrib/sets/makeetcset ${.CURDIR} ${MAKE}
@


1.124
log
@missing " spotted by Kyle Milz
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.123 2014/08/26 20:19:25 rpe Exp $
d45 1
a45 1
SUBDIR+= distrib regress
@


1.123
log
@Create etc set during 'make build' and embed it in base set to make
it available during a regular install or upgrade so that it doesn't
need to be independently fetched.

Idea, directions and OK deraadt@@
Feedback and Ok halex@@ and aja@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.122 2014/07/09 19:23:28 espie Exp $
d30 1
a30 1
#	make -f Makefile.cross TARGET=<target> cross-gcc"
@


1.122
log
@do locatedb as part of the build process
"works for me" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.121 2014/04/22 10:21:56 reyk Exp $
d83 1
@


1.121
log
@Remove KERBEROS5 from the Makefiles (except ssh for now, where it is
already manually disabled).

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.120 2013/07/23 22:37:02 todd Exp $
d63 1
@


1.120
log
@enter keberosV/doc to resurrect heimdal.info for real this time
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.119 2013/06/17 19:16:02 robert Exp $
a42 8

.if (${KERBEROS5:L} == "yes")
SUBDIR+=kerberosV/tools
SUBDIR+=kerberosV/libexec
SUBDIR+=kerberosV/usr.bin
SUBDIR+=kerberosV/usr.sbin
SUBDIR+=kerberosV/doc
.endif
@


1.119
log
@switch to new kerberosV directory layout
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.118 2012/08/29 22:10:32 espie Exp $
d49 1
@


1.118
log
@remove ancient cruft.
okay deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.117 2011/09/17 16:59:53 pirofti Exp $
d45 4
a48 1
SUBDIR+= kerberosV
@


1.117
log
@Document proper cross-tools command to run, specially when working on a
new port.

Okay miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.116 2011/04/24 22:04:43 guenther Exp $
a51 1
.if exists(regress)
a54 1
.endif
@


1.116
log
@Head off attempts to do 'make build' with DESTDIR set, as it doesn't work

ok sthen@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.115 2010/03/23 21:31:02 espie Exp $
d28 3
a30 2
# 5) If you want to setup a cross-build environment, there is a "cross-tools"
# target available which upon completion of "make TARGET=<target> cross-tools"
@


1.115
log
@install mtree always
okay deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.114 2005/12/02 01:17:20 deraadt Exp $
d70 5
d87 1
@


1.114
log
@do not enter lkm
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.113 2005/09/16 12:28:34 jmc Exp $
d62 1
@


1.113
log
@use shell-neutral language (in a comment);

from ray lai;
ok krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.112 2005/01/09 20:36:20 espie Exp $
d41 1
a41 1
SUBDIR+= sys lkm
@


1.112
log
@move cross-stuff into its own file.
okay mickey@@, niklas@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.109 2004/12/25 16:17:33 grange Exp $
d11 2
a12 1
# must be a symbolic link, setenv BSDSRCDIR to point to the real location.
@


1.111
log
@Synch with bsd.own.mk: USE_GCC3 is always set now, so we must set it to no
explicitly.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.110 2005/01/09 00:14:32 espie Exp $
d81 4
d86 2
a87 2
cross-tools cross-distrib:
	echo "TARGET must be set"; exit 1
d89 2
a90 182
cross-tools:	cross-includes cross-binutils cross-gcc cross-lib
cross-distrib:	cross-tools cross-bin cross-etc-root-var

CROSSCPPFLAGS?=	-nostdinc -I${CROSSDIR}/usr/include
CROSSLDFLAGS?=	-nostdlib -L${CROSSDIR}/usr/lib -static
CROSSCFLAGS?=	${CROSSCPPFLAGS}
CROSSCXXFLAGS?=	${CROSSCPPFLAGS}
LDSTATIC?=	-static

CROSSDIR=	${DESTDIR}/usr/cross/${TARGET}
CROSSENV=	AR=${CROSSDIR}/usr/bin/ar AS=${CROSSDIR}/usr/bin/as \
		CC=${CROSSDIR}/usr/bin/cc CPP=${CROSSDIR}/usr/bin/cpp \
		CXX=${CROSSDIR}/usr/bin/c++ \
		LD=${CROSSDIR}/usr/bin/ld NM=${CROSSDIR}/usr/bin/nm \
		LORDER=/usr/bin/lorder RANLIB=${CROSSDIR}/usr/bin/ranlib \
		SIZE=${CROSSDIR}/usr/bin/size STRIP=${CROSSDIR}/usr/bin/strip \
		HOSTCC=\"${CC}\" HOSTCXX=\"${CXX}\" NOMAN= DESTDIR=${CROSSDIR} \
		HOSTCFLAGS=\"${CFLAGS}\" HOSTCXXFLAGS=\"${CXXFLAGS}\" \
		HOSTLDFLAGS=\"${LDFLAGS} \" \
		CFLAGS=\"${CROSSCFLAGS}\" CPPFLAGS=\"${CROSSCPPFLAGS}\" \
		CXXFLAGS=\"${CROSSCXXFLAGS}\" \
		LDFLAGS=\"${CROSSLDFLAGS}\"
CROSSPATH=	${PATH}:${CROSSDIR}/usr/bin
CROSSLANGS?=	c c++

CROSSDIRS=	${CROSSDIR}/.dirs_done
CROSSOBJ=	${CROSSDIR}/usr/obj/.obj_done
CROSSINCLUDES=	${CROSSDIR}/usr/include/.includes_done
CROSSBINUTILS=	${CROSSDIR}/usr/bin/.binutils_done
CROSSGCC=	${CROSSDIR}/usr/bin/.gcc_done
NO_CROSS=	isakmpd tn3270 less sudo openssl libkeynote libssl \
		photurisd keynote sectok ssh

cross-dirs:	${CROSSDIRS}
cross-obj:	${CROSSOBJ}
cross-includes:	${CROSSINCLUDES}
cross-binutils:	${CROSSBINUTILS}
cross-gcc:	${CROSSGCC}

cross-env:	.PHONY
	@@echo ${CROSSENV} MACHINE=${TARGET} \
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`

${CROSSDIRS}:
	@@-mkdir -p ${CROSSDIR}
	@@case ${TARGET} in \
		alpha|amd64|hppa|hppa64|i386|m68k|m88k|powerpc|sparc|sparc64|vax) \
			echo ${TARGET} ;;\
		amiga|hp300|mac68k|mvme68k) \
			echo m68k ;;\
		luna88k|mvme88k) \
			echo m88k ;;\
		macppc|mvmeppc) \
			echo powerpc ;;\
		sgi) \
			echo mips64 ;;\
		*) \
			(echo Unknown arch ${TARGET} >&2) ; exit 1;; \
	esac > ${CROSSDIR}/TARGET_ARCH
	@@echo TARGET_ARCH is `cat ${CROSSDIR}/TARGET_ARCH`
	@@eval `grep '^osr=' sys/conf/newvers.sh`; \
	   sed "s/\$$/-unknown-openbsd$$osr/" ${CROSSDIR}/TARGET_ARCH > \
	   ${CROSSDIR}/TARGET_CANON
	@@-mkdir -p ${CROSSDIR}
	@@-mkdir -p ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`
	@@ln -sf ${CROSSDIR}/usr/include \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/include
	@@ln -sf ${CROSSDIR}/usr/lib \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/lib
	@@-mkdir -p ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin
	@@(cd ${.CURDIR}/etc && DESTDIR=${CROSSDIR} ${MAKE} distrib-dirs)
	@@touch ${CROSSDIRS}

${CROSSOBJ}:	${CROSSDIRS}
	@@-mkdir -p ${CROSSDIR}/usr/obj
	@@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    MACHINE=${TARGET} \
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj)
	@@touch ${CROSSOBJ}

${CROSSINCLUDES}:	${CROSSOBJ}
	@@-mkdir -p ${CROSSDIR}/usr/include
	@@(cd ${.CURDIR}/include && \
	    MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} prereq && \
	    MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} DESTDIR=${CROSSDIR} includes)
	@@touch ${CROSSINCLUDES}

.if ${MACHINE_ARCH} == "m68k" || ${MACHINE_ARCH} == "m88k" || \
    ${MACHINE_ARCH} == "vax"
BINUTILS=	ar as ld nm ranlib objcopy objdump strings strip
NEW_BINUTILS?=	No
.else
BINUTILS=	ar as gasp ld nm objcopy objdump ranlib readelf size \
		strings strip
NEW_BINUTILS?=	Yes
.endif

${CROSSBINUTILS}:	${CROSSINCLUDES}
.if ${NEW_BINUTILS:L} == "yes"
	(cd ${.CURDIR}/gnu/usr.bin/binutils; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    ${MAKE} -f Makefile.bsd-wrapper depend && \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    ${MAKE} -f Makefile.bsd-wrapper all && \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} -f Makefile.bsd-wrapper install)
.else
	(cd ${.CURDIR}/gnu/usr.bin/gas; \
	    TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} depend all; \
	    TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/as \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/as
	(cd ${.CURDIR}/gnu/usr.bin/ld; \
	    TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOPIC= NOMAN= depend all; \
	    TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOPIC= NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/ld \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/ld
	(cd ${.CURDIR}/usr.bin/ar; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN= depend all; \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/ar \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/ar
	(cd ${.CURDIR}/usr.bin/ranlib; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN= depend all; \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/ranlib \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/ranlib
	(cd ${.CURDIR}/usr.bin/strip; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    NOMAN= depend all; \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/strip \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/strip
.endif
	@@for cmd in ${BINUTILS}; do \
	 if [ ! -e ${CROSSDIR}/usr/bin/$$cmd -a \
	 -e ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd ]; then \
	    ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd \
	        ${CROSSDIR}/usr/bin/$$cmd ;\
	 elif [ -e ${CROSSDIR}/usr/bin/$$cmd -a \
	 ! -e ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd ]; then \
	    ln -sf ${CROSSDIR}/usr/bin/$$cmd \
	        ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd; \
	 fi ;\
	 if [ -e ${CROSSDIR}/usr/bin/$$cmd -a \
	 ! -e ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/$$cmd ]; then \
	    ln -sf ${CROSSDIR}/usr/bin/$$cmd \
	        ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/$$cmd; \
	 fi ;\
	done
	@@touch ${CROSSBINUTILS}

# bsd.own.mk can't do it for us
.if ${TARGET} == "amd64" || ${TARGET} == "cats" || \
    ${TARGET} == "hppa" || ${TARGET} == "hppa64" || \
    ${TARGET} == "i386" || \
    ${TARGET} == "sparc64" || ${TARGET} == "sgi"
USE_GCC3=yes
.else
USE_GCC3=no
.endif
d92 3
a94 95
${CROSSGCC}:		${CROSSBINUTILS}
.if ${USE_GCC3:L} == "yes"
	(cd ${.CURDIR}/gnu/usr.bin/gcc; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` CROSSDIR=${CROSSDIR} \
	    ${MAKE} -f Makefile.bsd-wrapper depend && \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` CROSSDIR=${CROSSDIR} \
	    ${MAKE} -f Makefile.bsd-wrapper all && \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} -f Makefile.bsd-wrapper install)
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-g++ \
	    ${CROSSDIR}/usr/bin/c++
	ln -sf ${CROSSDIR}/usr/libexec/cpp \
	    ${CROSSDIR}/usr/bin/cpp
.else
	(cd ${CROSSDIR}/usr/obj/gnu/egcs/gcc; \
	    /bin/sh ${.CURDIR}/gnu/egcs/gcc/configure \
	    --with-gnu-as --with-gnu-ld --prefix ${CROSSDIR}/usr \
	    --target `cat ${CROSSDIR}/TARGET_CANON` \
	    --enable-languages="c,c++" --enable-cpp --disable-nls \
	    --with-gxx-include-dir=${CROSSDIR}/usr/include/g++ && \
	    PATH=${CROSSPATH} ${MAKE} BISON=yacc LANGUAGES="${CROSSLANGS}" \
	    CFLAGS="${CFLAGS} -I${.CURDIR}/gnu/lib/libiberty/include" \
	    LIBIBERTY_INCLUDES=${.CURDIR}/gnu/lib/libiberty/include \
	    DEMANGLER_PROG= DEMANGLE_H= LDFLAGS="${LDSTATIC}" build_infodir=. \
	    GCC_FOR_TARGET="./xgcc -B./ -I${CROSSDIR}/usr/include" && \
	    ${MAKE} BISON=yacc LANGUAGES="${CROSSLANGS}" LDFLAGS="${LDSTATIC}" \
	    GCC_FOR_TARGET="./xgcc -B./ -I${CROSSDIR}/usr/include" \
	    CFLAGS="${CFLAGS} -I${.CURDIR}/gnu/lib/libiberty/include" \
	    LIBIBERTY_INCLUDES=${.CURDIR}/gnu/lib/libiberty/include \
	    build_infodir=. INSTALL_MAN= INSTALL_HEADERS_DIR= install)
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-gcc \
	    ${CROSSDIR}/usr/bin/cc
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-g++ \
	    ${CROSSDIR}/usr/bin/c++
	${INSTALL} -c -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
	    ${CROSSDIR}/usr/obj/gnu/egcs/gcc/cpp \
	    ${CROSSDIR}/usr/libexec/cpp
	sed -e 's#/usr/libexec/cpp#${CROSSDIR}/usr/libexec/cpp#' \
	    -e 's#/usr/include#${CROSSDIR}/usr/include#' \
	    ${.CURDIR}/usr.bin/cpp/cpp.sh > ${CROSSDIR}/usr/bin/cpp
	chmod ${BINMODE} ${CROSSDIR}/usr/bin/cpp
	chown ${BINOWN}:${BINGRP} ${CROSSDIR}/usr/bin/cpp
.endif
	@@touch ${CROSSGCC}

# XXX MAKEOBJDIR maybe should be obj.${TARGET} here, revisit later
cross-lib:	${CROSSGCC}
	MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`; \
	export MACHINE MACHINE_ARCH; \
	(cd ${.CURDIR}/lib; \
	    for lib in csu libc; do \
	    (cd $$lib; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} depend all install); \
	    done; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        SKIPDIR=\"${NO_CROSS} libocurses/PSD.doc\" \
	        ${MAKE} depend all install)

cross-bin:	${CROSSOBJ}
	MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`; \
	export MACHINE MACHINE_ARCH; \
	for i in libexec bin sbin usr.bin usr.sbin; do \
	(cd ${.CURDIR}/$$i; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        SKIPDIR=\"${BINUTILS} ${NO_CROSS}\" \
	        ${MAKE} depend all install); \
	done

cross-etc-root-var:	${CROSSOBJ}
	(cd ${.CURDIR}/etc && \
	    DESTDIR=${CROSSDIR} ${MAKE} distribution-etc-root-var)

cross-depend:	.PHONY
	@@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} depend)

cross-clean:	.PHONY
	@@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} clean)

cross-cleandir:	.PHONY
	@@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} cleandir)
a95 2
.endif # defined(TARGET)
 
@


1.110
log
@i386 is gcc3 for cross too.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.109 2004/12/25 16:17:33 grange Exp $
d264 2
@


1.109
log
@We don't need cross-{nm,size} anymore, our host tools are good enough.

mickey ok a long time ago.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.108 2004/11/30 15:46:01 mickey Exp $
d261 1
@


1.108
log
@need to pass MAKEOBJDIR to prereq and includes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.107 2004/10/26 05:01:02 mickey Exp $
a239 9
	(cd ${.CURDIR}/usr.bin/nm; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= depend all; \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/nm \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/nm
	ln -sf ${CROSSDIR}/usr/bin/size \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/size
@


1.107
log
@match cross-binutils-new selection w/ bsd.own.mk and add hppa64 where needed
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.106 2004/10/21 20:47:29 grange Exp $
d172 1
d175 1
@


1.106
log
@Move the cross glue from the root makefile to the toolchain's,
allowing bulding cross-tools with new binutils and gcc3.

ok drahn@@ brad@@ espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.105 2004/10/16 15:28:14 grange Exp $
d131 1
a131 1
		alpha|hppa|i386|m68k|m88k|powerpc|sparc|sparc64|vax|amd64) \
d177 5
a181 3
.if ${TARGET} == "alpha" || ${TARGET} == "amd64" || ${TARGET} == "hppa" || \
    ${TARGET} == "i386" || ${TARGET} == "macppc" || ${TARGET} == "mvmeppc" || \
    ${TARGET} == "sparc" || ${TARGET} == "sparc64" || ${TARGET} == "sgi"
a184 3
.else
BINUTILS=	ar as ld nm ranlib objcopy objdump strings strip
NEW_BINUTILS?=	No
@


1.105
log
@cross-nm doesn't need TARGET_MACHINE_ARCH anymore.

ok mickey@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.104 2004/08/06 22:30:54 pefo Exp $
d190 9
a198 7
	export BSDSRCDIR=${.CURDIR}; \
	    (cd ${CROSSDIR}/usr/obj/gnu/usr.bin/binutils; \
	    /bin/sh ${BSDSRCDIR}/gnu/usr.bin/binutils/configure \
	    --prefix ${CROSSDIR}/usr \
	    --disable-nls --disable-gdbtk --disable-commonbfdlib \
	    --target `cat ${CROSSDIR}/TARGET_CANON` && \
	    ${MAKE} CFLAGS="${CFLAGS}" && ${MAKE} install )
d258 5
d266 7
d274 15
d317 1
@


1.104
log
@fix/add sgi
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.103 2004/05/03 15:18:18 drahn Exp $
d239 1
a239 2
	    ${MAKE} TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    NOMAN= depend all; \
@


1.103
log
@Remove OpenBSD/pegaos, this has been announced before but delayed until
the tree was stable. No point in code supporting a company which screws
its employees being in the OpenBSD tree.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.102 2004/04/21 15:58:21 miod Exp $
d140 1
a140 1
			echo mips ;;\
@


1.102
log
@Add luna88k related directories and information to the build infrastructure.

ok deraadt@@, millert@@, krw@@ - mdoc ok jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.101 2004/03/31 19:13:04 mickey Exp $
d137 1
a137 1
		macppc|mvmeppc|pegasos) \
d179 1
a179 2
    ${TARGET} == "pegasos" || ${TARGET} == "sparc" || ${TARGET} == "sparc64" || \
    ${TARGET} == "sgi"
@


1.101
log
@repair cross-tools
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.100 2004/02/27 17:36:11 deraadt Exp $
d135 1
a135 1
		mvme88k) \
@


1.100
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.99 2004/02/01 06:16:50 brad Exp $
a200 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
a202 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
a208 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
a211 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
a230 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
a233 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d237 1
a240 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d247 1
a247 2
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/nm
.endif
d264 1
a264 1
	    --prefix ${CROSSDIR}/usr \
d266 1
d269 3
a271 1
	    LDFLAGS="${LDSTATIC}" build_infodir=. \
d275 2
@


1.99
log
@- remove sun3
- use "new" ld/gas/etc. for pegasos with cross-compile
- reorder arch/machine names in alpha order

ok drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.98 2004/01/28 02:24:28 mickey Exp $
d131 1
a131 1
		alpha|hppa|i386|m68k|m88k|powerpc|sparc|sparc64|vax) \
a140 2
		amd64) \
			echo x86_64 ;;\
@


1.98
log
@amd64 hook ups
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.97 2004/01/14 23:26:24 brad Exp $
d131 1
a131 1
		alpha|i386|m68k|hppa|powerpc|sparc|sparc64|m88k|vax) \
d133 1
a133 1
		amiga|sun3|mac68k|hp300|mvme68k) \
d137 1
a137 1
		mvmeppc|macppc|pegasos) \
d179 4
a182 3
.if ${TARGET} == "alpha" || ${TARGET} == "hppa" || ${TARGET} == "i386" || \
    ${TARGET} == "macppc" || ${TARGET} == "mvmeppc" || ${TARGET} == "sgi" || \
    ${TARGET} == "sparc" || ${TARGET} == "sparc64" || ${TARGET} == "amd64"
@


1.97
log
@add pegasos as a powerpc system for cross-compile target

ok drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.96 2004/01/05 01:33:40 mickey Exp $
d131 1
a131 1
		sparc|i386|m68k|alpha|hppa|powerpc|sparc64|m88k|vax) \
d141 2
d181 1
a181 1
    ${TARGET} == "sparc" || ${TARGET} == "sparc64"
@


1.96
log
@abcomodate cross for the new nm+size
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.95 2003/12/14 10:02:57 matthieu Exp $
d137 1
a137 1
		mvmeppc|macppc) \
@


1.95
log
@Don't go into kerberosV/lib explicitely for now. Nothing to do there.
Ok deraadt@@, miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.94 2003/10/05 00:18:02 mickey Exp $
d184 1
a184 1
BINUTILS=	ar as ld nm ranlib objcopy objdump size strings strip
a241 9
	(cd ${.CURDIR}/usr.bin/size; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    NOMAN= depend all; \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/size \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/size
d250 2
@


1.94
log
@need to escape the quotes in cross-{lib,bin}
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.93 2003/10/05 00:12:52 mickey Exp $
a78 4
.if (${KERBEROS5:L} == "yes")
	cd ${.CURDIR}/kerberosV/lib && ${MAKE} depend && ${MAKE} && \
	    NOMAN=1 exec ${SUDO} ${MAKE} install
.endif
a312 7
.if (${KERBEROS5:L} == "yes")
	MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`; \
	export MACHINE MACHINE_ARCH; \
	cd kerberosV/lib; \
	eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} depend all install
.endif
@


1.93
log
@need to eval the CROSSENV
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.92 2003/05/17 20:58:52 millert Exp $
d315 1
a315 1
	        SKIPDIR="${NO_CROSS} libocurses/PSD.doc" \
d331 1
a331 1
	        SKIPDIR="${BINUTILS} ${NO_CROSS}" \
@


1.92
log
@Don't build libperl separately in the libs pass, just build it when
we build perl itself.  We need perl to run Configure *after* the
other libraries are installed, since Configure looks at what symbols
exist in libc and the other libs.  If anfd when other things in the tree
link against libperl we may need to revisit this issue.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.91 2003/05/14 08:01:02 mho Exp $
d311 1
a311 1
	        ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
d314 1
a314 1
	    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
d321 1
a321 1
	${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
d330 1
a330 1
	    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
@


1.91
log
@Remove krb4 support.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.90 2003/04/17 03:48:56 drahn Exp $
a82 4
	cd ${.CURDIR}/gnu/usr.bin/perl && \
	    ${MAKE} -f Makefile.bsd-wrapper depend && \
	    ${MAKE} -f Makefile.bsd-wrapper perl.lib && \
	    exec ${SUDO} ${MAKE} -f Makefile.bsd-wrapper install.lib
@


1.90
log
@Add i386 to list of archs which use binutils.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.89 2003/01/05 22:52:19 mickey Exp $
a41 4
.if (${KERBEROS:L} == "yes")
SUBDIR+= kerberosIV
.endif

a78 4
.if (${KERBEROS:L} == "yes")
	cd ${.CURDIR}/kerberosIV/lib && ${MAKE} depend && ${MAKE} && \
	    NOMAN=1 exec ${SUDO} ${MAKE} install
.endif
a320 7
.if (${KERBEROS:L} == "yes")
	MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`; \
	export MACHINE MACHINE_ARCH; \
	cd kerberosIV/lib; \
	${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} depend all install
.endif
@


1.89
log
@enquote flags and opts in cross-env; reported by david krause
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.88 2002/09/17 16:19:49 miod Exp $
d193 3
a195 3
.if ${TARGET} == "alpha" || ${TARGET} == "hppa" || ${TARGET} == "macppc" || \
    ${TARGET} == "mvmeppc" || ${TARGET} == "sgi" || ${TARGET} == "sparc" || \
    ${TARGET} == "sparc64"
@


1.88
log
@Prevent the a.out cross-ld from building rtld too early in the build.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.87 2002/08/16 02:04:58 wcobb Exp $
d117 6
a122 6
		HOSTCC="${CC}" HOSTCXX="${CXX}" NOMAN= DESTDIR=${CROSSDIR} \
		HOSTCFLAGS="${CFLAGS}" HOSTCXXFLAGS="${CXXFLAGS}" \
		HOSTLDFLAGS="${LDFLAGS}" \
		CFLAGS="${CROSSCFLAGS}" CPPFLAGS="${CROSSCPPFLAGS}" \
		CXXFLAGS="${CROSSCXXFLAGS}" \
		LDFLAGS="${CROSSLDFLAGS}"
@


1.87
log
@- add cross-distrib target to cross-compile the world (except gnu)
- add cross-obj, cross-depend, cross-clean and cross-cleandir targets
- add dependencies between the cross-tools targets
- simplify cross-binutils
- build a cross c++ compiler
- use distribution-etc-root-var in etc for preparing ${CROSSDIR}

ok art@@, miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.86 2002/08/11 22:48:05 art Exp $
d227 2
a228 1
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN= depend all; \
d232 1
a232 1
	    ${MAKE} NOMAN= install)
@


1.86
log
@Let cross-sparc use new bintuils.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.85 2002/06/09 05:52:06 todd Exp $
d31 2
a32 1
# directory.
d98 1
a98 1
cross-tools:
d101 8
a108 2
cross-tools:	cross-helpers cross-dirs cross-includes cross-binutils \
	cross-gcc cross-lib
d117 6
a122 1
		HOSTCC=cc
d124 1
d126 17
a142 2
cross-env:
	@@echo ${CROSSENV} DESTDIR=${CROSSDIR} MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`
d144 1
a144 1
cross-helpers:
d155 2
a163 2

cross-dirs:	${CROSSDIR}/stamp.dirs
a164 7
	@@-mkdir -p ${CROSSDIR}/usr/obj
	@@-mkdir -p ${CROSSDIR}/usr/bin
	@@-mkdir -p ${CROSSDIR}/usr/include/kerberosIV
	@@-mkdir -p ${CROSSDIR}/usr/include/kerberosV
	@@-mkdir -p ${CROSSDIR}/usr/lib/apache/include/xml
	@@-mkdir -p ${CROSSDIR}/usr/libexec
	@@-mkdir -p ${CROSSDIR}/var/db
a169 2
	@@-mkdir -p ${CROSSDIR}/usr/obj
	@@-mkdir -p ${CROSSDIR}/usr/bin
d171 2
d174 9
a182 2
${CROSSDIR}/stamp.dirs:
	@@touch ${CROSSDIR}/stamp.dirs
d184 3
a186 2
cross-includes:	cross-dirs
	cd include; \
d190 2
a191 1
	    ${MAKE} DESTDIR=${CROSSDIR} includes
d193 6
a198 3
.if ${TARGET} == "macppc" || ${TARGET} == "alpha" || ${TARGET} == "hppa" || \
    ${TARGET} == "sparc64"|| ${TARGET} == "mvmeppc" || ${TARGET} == "sparc"
cross-binutils: cross-binutils-new cross-binutils-links
d200 2
a201 1
cross-binutils: cross-binutils-old cross-binutils-links
d204 3
a206 6
cross-binutils-new:	cross-dirs
	export BSDSRCDIR=`pwd`; \
	    (cd ${.CURDIR}/gnu/usr.bin/binutils; \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} -f Makefile.bsd-wrapper obj); \
d213 1
a213 16

cross-binutils-old: cross-gas cross-ar cross-ld cross-strip cross-size \
	cross-ranlib cross-nm

cross-binutils-links: cross-dirs
	for cmd in ar as ld nm ranlib objcopy objdump size strings strip; do \
	    if [ ! -e ${CROSSDIR}/usr/bin/$$cmd -a -e ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd ]; then \
		ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd \
		${CROSSDIR}/usr/bin/$$cmd ;\
	    elif [ -e ${CROSSDIR}/usr/bin/$$cmd -a ! -e ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd ]; then \
		ln -sf ${CROSSDIR}/usr/bin/$$cmd \
		${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd; \
	    fi ;\
	done

cross-gas:	cross-dirs
a214 3
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
d216 1
d219 1
a223 2

cross-ld:	cross-dirs
a224 3
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
d226 1
d229 1
a233 2

cross-ar:	cross-dirs
a234 3
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
a239 2

cross-ranlib:	cross-dirs
a240 3
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
a245 2

cross-strip:	cross-dirs
a246 3
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
d249 1
d253 1
a256 2

cross-size:	cross-dirs
a257 3
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
d260 1
a265 2

cross-nm:	cross-dirs
a266 3
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
d269 1
d275 13
d289 1
a289 5
cross-gcc:	cross-dirs
	cd ${.CURDIR}/gnu/egcs/gcc; \
	    BSDOBJDIR=${CROSSDIR}/usr/obj BSDSRCDIR=${.CURDIR} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} -f Makefile.bsd-wrapper obj
d295 2
a296 2
	    PATH=${CROSSPATH} ${MAKE} BISON=yacc LANGUAGES="c c++" \
	    LDFLAGS=${LDSTATIC} build_infodir=. \
d298 1
a298 1
	    ${MAKE} BISON=yacc LANGUAGES="c c++" LDFLAGS=${LDSTATIC} \
d313 1
d316 1
a316 1
cross-lib:	cross-dirs
a319 3
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
d321 3
a323 7
		(cd $$lib; \
		    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} NOMAN= depend; \
		    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} NOMAN=; \
		    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    DESTDIR=${CROSSDIR} ${MAKE} NOMAN= install); \
d326 2
a327 5
	    ${MAKE} NOMAN= depend; \
	    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=; \
	    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    DESTDIR=${CROSSDIR} SKIPDIR=libocurses/PSD.doc \
	    ${MAKE} NOMAN= install)
a331 2
	BSDOBJDIR=${CROSSDIR}/usr/obj BSDSRCDIR=${.CURDIR} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} obj; \
d333 1
a333 4
	    ${MAKE} NOMAN= depend; \
	${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=; \
	${CROSSENV} DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install
a338 2
	BSDOBJDIR=${CROSSDIR}/usr/obj BSDSRCDIR=${.CURDIR} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} obj; \
d340 1
a340 5
	    ${MAKE} NOMAN= depend; \
	${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=; \
	${CROSSENV} DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install
.endif
d343 37
@


1.85
log
@knf
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.84 2002/05/15 15:55:01 mickey Exp $
d164 1
a164 1
    ${TARGET} == "sparc64"|| ${TARGET} == "mvmeppc"
@


1.84
log
@install cross-links for objdumpc,objcopy,strings
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.83 2002/02/22 23:31:11 art Exp $
d7 1
a7 1
# 
d9 1
a9 1
# 
d28 1
a28 1
# target available which upon completion of "make TARGET=<target> cross-tools" 
d170 1
a170 1
cross-binutils-new:	cross-dirs 
@


1.83
log
@Change the regression-tests target to do depend before running regress.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.82 2002/01/03 02:19:20 art Exp $
d187 1
a187 1
	for cmd in ar as ld nm ranlib size strip; do \
@


1.82
log
@Only go into regress on "obj", "clean" and "cleandir".
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.81 2001/09/25 10:26:39 espie Exp $
d56 1
a56 1
	@@cd ${.CURDIR}/regress && exec ${MAKE} regress
@


1.81
log
@a bit too soon.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.80 2001/09/25 09:43:22 espie Exp $
d50 1
a50 1
SUBDIR+= distrib
a53 4
.ifmake !(install)
SUBDIR+= regress
.endif

@


1.80
log
@link gnu files in.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.79 2001/09/17 01:18:34 art Exp $
a79 1
	cd ${.CURDIR}/gnu/share && exec ${SUDO} ${MAKE} install
@


1.79
log
@This change (and a little change for alpha gcc config) allowed me to build
cross tools and kernels with those cross tools on all archs except mvme88k
and hppa.

1. Pass MACHINE_ARCH, not MACHINE to TARGET_MACHINE_ARCH when building old
   binutils.
2. Instead of using the "intelligent" cpp voodoo to find out MACHINE_ARCH
   from MACHINE (which has never worked correctly for sparc, 68k and
   recently it broke for powerpc), we have a table of machine->machine_arch
   translations. It's easier to modify one table once per arch instead of
   juggling for a few hours every time some include files change.
3. Remove some sparc64 cruft.
4. Set MACHINE and MACHINE_ARCH in cross-env, otherwise the kernel will
   try to build libkern for the host.

Please note that this doesn't allow you to do complete builds. I haven't
even tested cross-lib. Only kernel builds have been tested.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.78 2001/09/14 06:03:11 fgsch Exp $
d80 1
@


1.78
log
@Cross-tools changes:

o Enable c++.
o Add missing lib/apache/xml/include directory.
o Use lorder from /usr/bin.

art@@, mickey@@ ok.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.77 2001/09/07 19:35:37 mickey Exp $
a116 5
.if (${TARGET} == "sparc64")
CROSSENV+= CPPFLAGS=-D__arch64__
CPPFLAGS=-D__arch64__
.endif

d118 1
a118 1
	@@echo ${CROSSENV} DESTDIR=${CROSSDIR}
d122 14
a135 5
	echo _MACHINE_ARCH | \
	    cat ${.CURDIR}/sys/arch/${TARGET}/include/param.h - | \
	    ${CPP} ${CPPFLAGS} -E -I${.CURDIR}/sys/arch | \
	    sed -n '$$p' >${CROSSDIR}/TARGET_ARCH
	eval `grep '^osr=' sys/conf/newvers.sh`; \
d168 1
a168 1
    ${TARGET} == "sparc64"|| ${TARGET} == "mvmeppc" 
d206 3
a208 3
	    TARGET_MACHINE_ARCH=${TARGET} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} depend all; \
	    TARGET_MACHINE_ARCH=${TARGET} \
d219 3
a221 3
	    TARGET_MACHINE_ARCH=${TARGET} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= depend all; \
	    TARGET_MACHINE_ARCH=${TARGET} \
d255 2
a256 1
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN= depend all; \
d258 2
a259 1
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN= install)
d269 2
a270 1
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN= depend all; \
d282 2
a283 1
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN= depend all; \
@


1.77
log
@put quotes on CFLAGS in binutils-new
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.76 2001/09/07 19:29:49 mickey Exp $
d110 1
d112 1
a112 2
		LORDER=${CROSSDIR}/usr/bin/lorder \
		RANLIB=${CROSSDIR}/usr/bin/ranlib \
a138 1
	@@-mkdir -p ${CROSSDIR}/usr/include
d141 1
a141 1
	@@-mkdir -p ${CROSSDIR}/usr/lib
d146 1
a146 1
		${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/include
d181 1
a181 4
	    ${MAKE} CFLAGS="${CFLAGS}" && ${MAKE} install ) && \
	${INSTALL} -c -o ${BINOWN} -g ${BINGRP} -m 755 \
	    ${.CURDIR}/usr.bin/lorder/lorder.sh \
	    ${CROSSDIR}/usr/bin/lorder
d289 3
a291 2
	    --target `cat ${CROSSDIR}/TARGET_CANON` && \
	    PATH=${CROSSPATH} ${MAKE} BISON=yacc LANGUAGES=c \
d294 1
a294 1
	    ${MAKE} BISON=yacc LANGUAGES=c LDFLAGS=${LDSTATIC} \
d299 2
@


1.76
log
@don't forget to make depend for croos-binutils-old sub-targets, dunno how it got broken but let's blame art since he commits into cross-tools all by himself all the time and breaks it
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.75 2001/09/03 16:26:02 art Exp $
d182 1
a182 1
	    ${MAKE} CFLAGS=${CFLAGS} && ${MAKE} install ) && \
@


1.75
log
@new target: cross-env that prints all environment variables that
need to be set for cross building:
cd /usr/src/sbin/init
make `cd /usr/src ; make TARGET=sparc64 cross-env`

Also, xcpp was wrong, cccp is wrong, cpp is probably better.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.74 2001/09/01 16:03:18 drahn Exp $
d207 1
a207 1
	    ${MAKE}; \
d220 1
a220 1
	    ${MAKE} NOMAN=; \
d232 1
a232 1
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=; \
d243 1
a243 1
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=; \
d255 1
a255 1
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN=; \
d267 1
a267 1
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN=; \
d279 1
a279 1
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN=; \
@


1.74
log
@powerpc -> macppc rename changes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.73 2001/08/31 14:13:50 art Exp $
d122 3
d303 1
a303 1
	    ${CROSSDIR}/usr/obj/gnu/egcs/gcc/cccp \
@


1.73
log
@Use more brute force when making links for binutils.
We simply make sure that there always is a TARGET_CANON-X and an X
regardless of which one is the regular file and which one is the symlink.

(this is for cross-tools)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.72 2001/08/31 13:49:17 art Exp $
d161 2
a162 2
.if ${TARGET} == "powerpc" || ${TARGET} == "alpha" || ${TARGET} == "hppa" || \
    ${TARGET} == "sparc64"
@


1.72
log
@cccp, not xcpp
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.71 2001/08/31 12:47:57 brad Exp $
d163 1
a163 1
cross-binutils: cross-binutils-new
d165 1
a165 1
cross-binutils: cross-binutils-old
d168 1
a168 1
cross-binutils-new:	cross-dirs
d186 2
d189 8
a196 2
	    ln -sf $$cmd \
	    ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd; done
@


1.71
log
@more leftover arc/pmax stuff
--
Ok'd by art@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.70 2001/08/31 10:54:59 art Exp $
d292 1
a292 1
	    ${CROSSDIR}/usr/obj/gnu/egcs/gcc/xcpp \
@


1.70
log
@Magic to make sparc64 cross-tools not bomb in the first 5 minutes
of building cross-tools.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.69 2001/06/26 18:00:16 brad Exp $
d161 1
a161 2
.if ${TARGET} == "powerpc" || ${TARGET} == "alpha" || ${TARGET} == "arc" || \
    ${TARGET} == "pmax" || ${TARGET} == "wgrisc" || ${TARGET} == "hppa" || \
@


1.69
log
@bye bye MIPS related bits and pieces.
--
Ok'd by deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.68 2001/06/26 15:33:28 hin Exp $
d117 5
d126 1
a126 1
	    ${CPP} -E -I${.CURDIR}/sys/arch | \
d162 2
a163 1
    ${TARGET} == "pmax" || ${TARGET} == "wgrisc" || ${TARGET} == "hppa"
@


1.68
log
@Build kerberosV when enabled.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.67 2001/06/24 23:31:07 niklas Exp $
a97 3
.if (${MACHINE_ARCH} == "mips")
	ldconfig -R
.endif
d118 1
a118 1
	mkdir -p ${CROSSDIR}
a122 6
# GROSS KLUDGE  MACHINE_ARCH is mips, but we use mipsel for gnu tools.
.if ${TARGET} == "arc" || ${TARGET} == "pmax"
	eval `grep '^osr=' sys/conf/newvers.sh`; \
	   sed "s/\$$/el-unknown-openbsd$$osr/" ${CROSSDIR}/TARGET_ARCH > \
	   ${CROSSDIR}/TARGET_CANON
.else
a125 1
.endif
@


1.67
log
@yet another old M: missing SUDO i includes target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.66 2001/05/14 12:34:26 espie Exp $
d45 4
d90 4
d143 1
d332 12
@


1.66
log
@Speed-up:
- remove extra subshells;
- use exec on terminal commands, avoiding dangling shells that don't
control anything.

More correct:
- use && some more;
- remove `-' in front of includes, so that failures WILL fail...

Okay millert@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.65 2001/03/28 22:52:22 todd Exp $
d60 1
a60 1
	cd ${.CURDIR}/include && ${MAKE} prereq && exec ${MAKE} includes
@


1.65
log
@unbreak broken cross-binutils-new target (missing ')' )
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.64 2001/01/27 01:59:43 niklas Exp $
d56 1
a56 1
	@@(cd ${.CURDIR}/regress && ${MAKE} regress)
d60 1
a60 1
	(cd ${.CURDIR}/include; ${MAKE} prereq; ${MAKE} includes)
d63 2
a64 6
.ifndef DESTDIR
	(cd ${.CURDIR}/etc && ${MAKE} DESTDIR= distrib-dirs)
.else
	(cd ${.CURDIR}/etc && ${MAKE} distrib-dirs)
.endif
	(cd ${.CURDIR}/include; ${MAKE} includes)
d68 1
a68 1
	(cd ${.CURDIR}/share/man && ${MAKE} makedb)
d75 2
a76 2
	(cd ${.CURDIR}/share/mk && ${SUDO} ${MAKE} install)
	(cd ${.CURDIR}/include; ${MAKE} prereq; ${SUDO} ${MAKE} includes)
d78 4
a81 4
	(cd ${.CURDIR}/lib && ${MAKE} depend && ${MAKE} && \
	    NOMAN=1 ${SUDO} ${MAKE} install)
	(cd ${.CURDIR}/gnu/lib && ${MAKE} depend && ${MAKE} && \
	    NOMAN=1 ${SUDO} ${MAKE} install)
d83 2
a84 2
	(cd ${.CURDIR}/kerberosIV/lib && ${MAKE} depend && ${MAKE} && \
	    NOMAN=1 ${SUDO} ${MAKE} install)
d86 1
a86 1
	(cd ${.CURDIR}/gnu/usr.bin/perl && \
d89 1
a89 1
	    ${SUDO} ${MAKE} -f Makefile.bsd-wrapper install.lib)
d93 1
a93 1
	${MAKE} depend && ${MAKE} && ${SUDO} ${MAKE} install
@


1.64
log
@Fix cross-tools symlinks for old toolchain too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.63 2001/01/27 00:58:23 niklas Exp $
d179 1
a179 1
	    ${MAKE} CFLAGS=${CFLAGS} && ${MAKE} install && \
@


1.63
log
@Improve the cross-tools targets so that it now can at least finish
pmax libs.  I have yet to test that they actually work though.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.62 2001/01/17 20:14:04 mickey Exp $
a179 4
	    for cmd in addr2line ar as gasp gdb ld nm objcopy objdump ranlib \
	    readelf size strings strip; do \
	    ln -sf `cat ${CROSSDIR}/TARGET_CANON`-$$cmd \
	    ${CROSSDIR}/usr/bin/$$cmd; done)
d186 3
@


1.62
log
@at least cross-gcc was broken, can't test cross-binutils, but i bet they are broken too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.61 2001/01/15 23:12:00 art Exp $
d114 1
d138 1
d140 1
d155 4
a158 1
	export MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` ;\
d179 5
a183 1
	    ${MAKE} CFLAGS=${CFLAGS} && ${MAKE} install)
d284 2
a285 2
	    ${MAKE} BISON=yacc LANGUAGES=c LDFLAGS=${LDSTATIC} \
	    build_infodir=. \
d292 4
a295 3
	CPP=`${CROSSDIR}/usr/bin/cc -print-libgcc-file-name | \
	    sed 's/libgcc\.a/cpp/'`; \
	    sed -e 's#/usr/libexec/cpp#'$$CPP'#' \
d299 1
a299 1
	chown ${BINOWN}.${BINGRP} ${CROSSDIR}/usr/bin/cpp
d325 10
a334 13
	(cd kerberosIV; \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj; \
	    for lib in acl krb kadm kafs kdb; do \
		(cd $$lib; \
		    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} NOMAN= depend; \
		    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} NOMAN=; \
		    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} NOMAN= install); \
	    done)
@


1.61
log
@Random fixes for cross builds. (especiaslly new binutils)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.60 2000/12/30 06:45:52 angelos Exp $
d276 1
a276 1
	    GCC_FOR_TARGET="./xgcc -B./" && \
d278 1
a278 1
	    GCC_FOR_TARGET="./xgcc -B./" \
@


1.60
log
@Truncate the autoconf cache, rather than outright deleting it (PR 1488)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.59 2000/12/12 18:37:12 art Exp $
d173 1
a173 1
	    ${MAKE} CFLAGS=${CFLAGS} && ${MAKE} DESTDIR=${CROSSDIR} install)
a175 18
	    ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-lorder
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-as \
	    ${CROSSDIR}/usr/bin/as
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-ar \
	    ${CROSSDIR}/usr/bin/ar
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-ld \
	    ${CROSSDIR}/usr/bin/ld
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-strip \
	    ${CROSSDIR}/usr/bin/strip
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-size \
	    ${CROSSDIR}/usr/bin/size
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-ranlib \
	    ${CROSSDIR}/usr/bin/ranlib
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-nm \
	    ${CROSSDIR}/usr/bin/nm
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-strings \
	    ${CROSSDIR}/usr/bin/strings
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-lorder \
a176 6
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-objcopy \
	    ${CROSSDIR}/usr/bin/objcopy
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-objdump \
	    ${CROSSDIR}/usr/bin/objdump
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-gdb \
	    ${CROSSDIR}/usr/bin/gdb
d276 1
a276 1
	    GCC_FOR_TARGET="./xgcc -B./ -I${CROSSDIR}/usr/include" && \
d278 1
a278 1
	    GCC_FOR_TARGET="./xgcc -B./ -I${CROSSDIR}/usr/include" \
@


1.59
log
@Fix cross-binutils-new.
Pass the same --disable-foo flags as we do in gnu/usr.bin/binutils
This allows me to build alpha -> alpha binutils (Don't ask).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.58 2000/09/03 18:41:11 espie Exp $
d77 1
a77 1
	rm -f ${GLOBAL_AUTOCONF_CACHE}
@


1.58
log
@Boring...  Add :L modifier to all tweakable variables tests.

Closes PR 1246
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.57 2000/08/01 15:56:38 millert Exp $
d171 1
@


1.57
log
@Only install man pages once.  Previously, they would be installed
during the lib install stage too.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.56 2000/04/21 00:10:40 millert Exp $
d41 1
a41 1
.if (${KERBEROS} == "yes")
d86 1
a86 1
.if (${KERBEROS} == "yes")
d336 1
a336 1
.if (${KERBEROS} == "yes")
@


1.56
log
@Don't need to explicitly make perl's config.sh, the beforedepend target
will do that.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.55 2000/04/09 07:48:14 deraadt Exp $
d83 1
a83 1
	    ${SUDO} ${MAKE} install)
d85 1
a85 1
	    ${SUDO} ${MAKE} install)
d88 1
a88 1
	    ${SUDO} ${MAKE} install)
@


1.55
log
@using just ldconfig is a bad idea, use -R
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.54 2000/03/10 22:05:49 niklas Exp $
a90 1
	    ${MAKE} -f Makefile.bsd-wrapper config.sh && \
@


1.54
log
@A more normal way of building kerberos, faster, and it works with SUDO
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.53 2000/03/01 03:56:41 todd Exp $
d96 1
a96 1
	ldconfig
@


1.53
log
@rm dup
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.52 1999/12/22 21:25:24 mickey Exp $
d86 4
a96 6
.endif
.if (${KERBEROS} == "yes")
	(cd ${.CURDIR}/kerberosIV && ${MAKE} SUDO=${SUDO} build)
.if (${MACHINE_ARCH} == "mips")
	ldconfig
.endif
@


1.52
log
@repair a few breakages in cross-tools caused by switch to egcs and new lorder
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.51 1999/11/26 00:32:11 millert Exp $
a115 1
		LORDER=${CROSSDIR}/usr/bin/lorder \
@


1.51
log
@Build libperl with the other libs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.50 1999/09/27 04:04:52 deraadt Exp $
d116 1
d178 1
a178 1
	    ${.CURDIR}/usr.bin/lorder/lorder.sh.gnm \
d293 1
a293 1
	cd ${.CURDIR}/gnu/usr.bin/gcc; \
d297 2
a298 2
	(cd ${CROSSDIR}/usr/obj/gnu/usr.bin/gcc; \
	    /bin/sh ${.CURDIR}/gnu/usr.bin/gcc/configure \
@


1.50
log
@I mean, I hate that prereq *garbage*. but then you guys had to break
make includes, too, by not fixing it.  Gee, thanks.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.49 1999/03/02 21:47:32 niklas Exp $
d86 5
@


1.49
log
@Provide a method to do prerequisites needed before
installation of includes can happen.  Do these before and not run via ${SUDO}.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.48 1999/02/02 08:53:32 imp Exp $
d60 1
a60 1
	(cd ${.CURDIR}/include; ${MAKE} includes)	
@


1.48
log
@

Don't do two ldconfigs on mips if we're not building kerberos.
Many cross-tools cleanups:
o remove mkdirs from the front of each of the rules, but instead have them
  depend on new target cross-dirs, which makes all the directories
o Add new target, cross-dirs, to create the directories and symlinks.  Before
  the symlinks in /usr/cross/$TARGET/blah-unknown-openbsd2.4 were
  never right.
o KLUDGE for arc/pmax.  MACHINE_ARCH is mips for these machines, but they
  differ from other machines in that they use mipsel-unknown-openbsd
  for their gnu config string (failure to have the el causes big endian tools
  to be built).

These fixes allow me to build a usable toolchain and libraries for
OpenBSD/arc on FreeBSD/i386 (with a few fixes to FreeBSD as well).  I
can also build a bootable kernel on the FreeBSD box.

I'd like to add a cross-build target shortly that will build
cross-tools, then will build and install stuff in DESTDIR with the
cross tools living in ${DESTDIR}/usr/cross/${TARGET}.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.46 1999/01/24 16:40:42 niklas Exp $
d80 1
a80 1
	(cd ${.CURDIR}/include; ${SUDO} ${MAKE} includes)
@


1.47
log
@

Make cross targets more robust:
o Don't build kerberos if KERBEROS==no
o Use the lorder in the target tree, rather than relying on the
  system's lorder to do the right thing in a cross build environment.
@
text
@a90 1
.endif
d94 1
d101 2
a102 1
cross-tools:	cross-helpers cross-includes cross-binutils cross-gcc cross-lib
d114 1
a114 1
	-mkdir -p ${CROSSDIR}/usr/include
d119 6
d128 1
d130 20
a149 2
cross-includes:
	-mkdir -p ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/include
a151 2
	ln -sf ${CROSSDIR}/usr/include \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/include
d160 1
a160 3
cross-binutils-new:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
d202 1
a202 4
cross-gas:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
	-mkdir -p ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin
d215 1
a215 3
cross-ld:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
d228 1
a228 3
cross-ar:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
d239 1
a239 3
cross-ranlib:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
d250 1
a250 3
cross-strip:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
d262 1
a262 3
cross-size:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
d274 1
a274 3
cross-nm:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
d286 1
a286 3
cross-gcc:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/bin
d312 1
a312 4
cross-lib:
	-mkdir -p ${CROSSDIR}/usr/obj
	-mkdir -p ${CROSSDIR}/usr/lib
	-mkdir -p ${CROSSDIR}/var/db
a348 3
	ln -sf ${CROSSDIR}/usr/lib \
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/lib

@


1.46
log
@make depend stuff in cross-*.
Also build the kerberos libs for the cross environment
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.45 1999/01/24 16:08:37 art Exp $
d107 1
d124 2
a125 2
	${MAKE} MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    DESTDIR=${CROSSDIR} includes
d332 1
d346 1
@


1.45
log
@pass SUDO to make build in kerberosIV. From: jakob@@crt.se
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.44 1999/01/08 00:26:59 millert Exp $
d305 1
d319 2
d325 2
d331 13
@


1.44
log
@kill local change that should not have gotten committed in last change
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.43 1999/01/07 04:57:13 millert Exp $
d90 1
a90 1
	(cd ${.CURDIR}/kerberosIV && ${MAKE} build)
@


1.43
log
@make cleandir needs to run run as well; marc@@snafu.org
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.42 1998/10/30 18:39:52 millert Exp $
a60 5
.ifndef DESTDIR
	rdist -cR /usr/include localhost:/usr/include.real
.else
	rdist -cR ${DESTDIR}usr/include localhost:${DESTDIR}usr/include.real
.endif
@


1.42
log
@set DESTDIR to be empty, not '/' when doing 'make distrib-dirs' so we don't get /etc/foo, not //etc/foo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.41 1998/09/30 13:27:28 art Exp $
d61 5
d86 1
a86 1
	${MAKE} cleandir
@


1.41
log
@add a note about building kernel before "make build"
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.40 1998/09/07 00:47:11 niklas Exp $
d64 1
a64 1
	(cd ${.CURDIR}/etc && ${MAKE} DESTDIR=/ distrib-dirs)
@


1.40
log
@Optionally use make SUDO=sudo build to build as non-root
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.39 1998/08/28 22:46:02 mickey Exp $
d20 5
a24 1
# 3) If you are reasonably sure that things will compile OK, use the
d27 1
a27 1
# 4) If you want to setup a cross-build environment, there is a "cross-tools"
@


1.39
log
@fix cross-lib install
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.38 1998/05/18 18:29:07 mickey Exp $
d75 2
a76 2
	(cd ${.CURDIR}/share/mk && ${MAKE} install)
	(cd ${.CURDIR}/include; ${MAKE} includes)
d78 4
a81 2
	(cd ${.CURDIR}/lib && ${MAKE} depend && ${MAKE} && ${MAKE} install)
	(cd ${.CURDIR}/gnu/lib && ${MAKE} depend && ${MAKE} && ${MAKE} install)
d91 1
a91 1
	${MAKE} depend && ${MAKE} && ${MAKE} install
@


1.38
log
@insert a note about the cross-tools target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.37 1998/05/18 17:40:00 mickey Exp $
d141 1
a141 1
	    ${MAKE} && ${MAKE} install)
d313 2
a314 2
		    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} NOMAN= install); \
d317 3
a319 2
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \
	    SKIPDIR=libocurses/PSD.doc ${MAKE} NOMAN= install)
@


1.37
log
@more links for binutils-new; hmm shouldn't this be single commit w/ the prev one?
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.35 1998/05/18 14:24:42 mickey Exp $
d22 7
@


1.36
log
@use .CURDIR-relative paths navigating within source tree.
that is, instead of 'cd lib' use 'cd ${.CURDIR}/lib'.
PS: what about strings and gdb for cross-binutils-old?
    those guys are present in the '-new target.
@
text
@d152 2
d156 6
@


1.35
log
@setup links for new binutils in an old binutils cosistant way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.34 1998/05/17 07:37:08 niklas Exp $
d162 1
a162 1
	(cd gnu/usr.bin/gas; \
d177 1
a177 1
	(cd gnu/usr.bin/ld; \
d192 1
a192 1
	(cd usr.bin/ar; \
d205 1
a205 1
	(cd usr.bin/ranlib; \
d218 1
a218 1
	(cd usr.bin/strip; \
d232 1
a232 1
	(cd usr.bin/size; \
d246 1
a246 1
	(cd usr.bin/nm; \
d260 1
a260 1
	cd gnu/usr.bin/gcc; \
d279 2
a280 2
	    -e 's#/usr/include#${CROSSDIR}/usr/include#' usr.bin/cpp/cpp.sh \
	    >${CROSSDIR}/usr/bin/cpp
d290 1
a290 1
	(cd lib; \
@


1.34
log
@Revert to 1.32, in the future CROSSENV will be used with different
MAKEOBJDIR values
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.32 1998/05/16 20:56:52 niklas Exp $
d138 16
@


1.33
log
@include MAKEOBJDIR definition into CROSSENV
@
text
@d96 1
a96 1
		HOSTCC=cc MAKEOBJDIR=obj.${MACHINE}.${TARGET}
d280 2
a281 1
		    ${CROSSENV} ${MAKE} NOMAN=; \
d285 1
a285 1
	    ${CROSSENV} ${MAKE} NOMAN=; \
@


1.32
log
@cross-tools cleanup + build the libs too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 1998/05/14 21:43:02 niklas Exp $
d96 1
a96 1
		HOSTCC=cc
d280 1
a280 2
		    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} NOMAN=; \
d284 1
a284 1
	    ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=; \
@


1.31
log
@cross-gcc improvement, install cc link, and a nice cpp
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 1998/05/11 20:34:54 niklas Exp $
d88 1
a88 1
cross-tools:	cross-helpers cross-includes cross-binutils cross-gcc
d91 6
d109 1
d112 2
d124 1
d149 1
a149 2
	    ${MAKE} obj)
	(cd gnu/usr.bin/gas; \
d151 1
a151 2
	    ${MAKE})
	(cd gnu/usr.bin/gas; \
a157 1
# Not yet functional
d164 1
a164 2
	    ${MAKE} obj)
	(cd gnu/usr.bin/ld; \
d166 1
a166 2
	    ${MAKE} NOMAN=)
	(cd gnu/usr.bin/ld; \
d179 2
a180 3
	    ${MAKE} obj)
	(cd usr.bin/ar; MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=)
	(cd usr.bin/ar; \
d192 2
a193 3
	    ${MAKE} obj)
	(cd usr.bin/ranlib; MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=)
	(cd usr.bin/ranlib; \
d205 1
a205 2
	    ${MAKE} obj)
	(cd usr.bin/strip; \
d207 1
a207 2
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN=)
	(cd usr.bin/strip; \
d219 3
a221 4
	    ${MAKE} obj)
	(cd usr.bin/size; MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN=)
	(cd usr.bin/size; \
d233 3
a235 4
	    ${MAKE} obj)
	(cd usr.bin/nm; MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET} NOMAN=)
	(cd usr.bin/nm; \
d243 2
a244 1
	(cd gnu/usr.bin/gcc; \
d247 1
a247 1
	    ${MAKE} -f Makefile.bsd-wrapper obj)
d253 1
d256 2
a257 1
	    GCC_FOR_TARGET="./xgcc -B./ -I${CROSSDIR}/usr/include" install)
d267 23
@


1.30
log
@Build nm ok for cross-envs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 1998/05/11 07:43:12 niklas Exp $
d256 10
@


1.29
log
@Add a bunch of cross-a.out targets
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 1998/05/04 21:28:18 mickey Exp $
d234 2
a235 1
	(cd usr.bin/nm; MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN=)
@


1.28
log
@use binutils for hppa
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 1998/04/25 06:42:44 niklas Exp $
d129 2
a130 1
cross-binutils-old: cross-gas cross-ar cross-ld
a167 1
# Not yet tested for compatibility with any target
d181 59
@


1.27
log
@Improved cross-compilation targets, still need work
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 1998/03/18 15:51:04 mickey Exp $
d107 1
a107 1
    ${TARGET} == "pmax" || ${TARGET} == "wgrisc"
@


1.26
log
@cross-gcc: make things work, finally
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 1998/03/17 18:10:53 mickey Exp $
d106 8
a113 1
cross-binutils:
d129 2
d134 1
d143 34
d179 2
@


1.25
log
@cross-tools: use /bin/sh to run configure, add -I for mips-*
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 1998/02/15 20:56:40 niklas Exp $
d146 1
a146 1
	    ${MAKE} BISON=yacc LANGUAGES=c \
d148 2
a149 1
	    ${MAKE} LANGUAGES=c install)
@


1.24
log
@A new rule cross-gas for building an a.out cross assembler, i.e. *not* from
the new binutils, but from the old gnu/usr.bin/gas sources.  Not yet called
from cross-tools for any architectures.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 1997/12/09 19:45:29 niklas Exp $
d96 2
a97 1
	    ${CPP} -E |sed -n '$$p' >${CROSSDIR}/TARGET_ARCH
d114 1
a114 1
	    ${BSDSRCDIR}/gnu/usr.bin/binutils/configure \
d143 1
a143 1
	    ${.CURDIR}/gnu/usr.bin/gcc/configure \
@


1.23
log
@on mips systems, ldconfig after kerberos too as new libs get installed
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 1997/09/21 11:46:58 deraadt Exp $
d120 14
@


1.22
log
@$OpenBSD$
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 1997/08/06 09:40:10 deraadt Exp $
d78 3
@


1.21
log
@attempt to clean/cleandir/obj in distrib
@
text
@d1 1
a1 2
#	$OpenBSD: Makefile,v 1.20 1997/07/29 04:07:35 kstailey Exp $
#	$NetBSD: Makefile,v 1.25 1995/10/09 02:11:28 thorpej Exp $
@


1.20
log
@add braces to variable
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 1997/07/29 03:37:03 kstailey Exp $
d33 4
@


1.19
log
@Changed the rules.
The variable is now GLOBAL_AUTOCONF_CACHE.  You must set it to the name
of the cache file to use.  Ether "setenv GLOBAL_AUTOCONF_CACHE /var/tmp/foo"
or add it to /etc/mk.conf
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 1997/07/29 03:18:39 kstailey Exp $
d63 1
a63 1
	rm -f $GLOBAL_AUTOCONF_CACHE
@


1.18
log
@remove global cache at start of "make build" if GLOBAL_CACHE option is in effect
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 1997/04/19 21:26:09 millert Exp $
d62 2
a63 2
.ifdef GLOBAL_CACHE
	rm -f $HOME/.Makefile.bsd-wrapper.cache
@


1.17
log
@Changed ``defined(KERBEROS)'' to ``(${KERBEROS} == "yes")''
Same change doen for SKEY, YP, and KERBEROS5.  This allows
people to override those setting in /etc/mk.conf.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 1997/04/18 06:47:08 deraadt Exp $
d62 3
@


1.16
log
@doc recommended build process somewhat
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 1997/02/28 23:22:07 niklas Exp $
d31 1
a31 1
.if defined(KERBEROS)
d70 1
a70 1
.if defined(KERBEROS)
@


1.15
log
@First stab at a target for making cross-development tools:
try "make TARGET=machine cross-tools" and you should get a little
hierarchy in /usr/cross/<machine>.  This is probably not in its final
shape yet ;-)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 1997/02/27 20:57:52 briggs Exp $
d4 20
a24 2

# NOTE THAT etc *DOES NOT* BELONG IN THE LIST BELOW
@


1.14
log
@We don't need this in /usr/src/Makefile.  Call me a prude, if you like.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 1996/12/13 15:45:58 deraadt Exp $
d56 52
@


1.13
log
@ldconfig hack for the mips
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 1996/06/02 10:44:55 tholo Exp $
d50 1
a50 1
	ldconfig		# Fuck.
@


1.12
log
@Don't install kerberosIV headers twice when doing "make build"
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 1996/06/02 07:22:46 tholo Exp $
d49 3
@


1.11
log
@kerberosIV now understand "includes" target too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 1996/05/18 05:37:48 deraadt Exp $
a45 3
.if defined(KERBEROS)
	(cd ${.CURDIR}/kerberosIV/include && ${MAKE} includes)
.endif
@


1.10
log
@allow "make includes" to work from here too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 1996/05/14 19:10:34 deraadt Exp $
d47 1
a47 1
	(cd ${.CURDIR}/kerberosIV/include && ${MAKE} install)
@


1.9
log
@when making distributions, make sure the include directory gets filled
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 1996/05/06 20:31:44 deraadt Exp $
d26 3
@


1.8
log
@hard-code the include installation path (mostly for speed)
@
text
@d33 1
@


1.7
log
@use beforeinstall; includes walks the tree
@
text
@d1 1
a1 1
#	$OpenBSD$
d41 1
a41 1
	${MAKE} includes
@


1.6
log
@sync w/ NetBSD 960418.
@
text
@d27 6
a32 6
#beforeinstall:
#.ifndef DESTDIR
#	(cd ${.CURDIR}/etc && ${MAKE} DESTDIR=/ distrib-dirs)
#.else
#	(cd ${.CURDIR}/etc && ${MAKE} distrib-dirs)
#.endif
d41 1
a41 1
	(cd ${.CURDIR}/include && ${MAKE} install)
@


1.5
log
@Build lkm directory by default
@
text
@d1 1
d4 2
a12 2
.include <bsd.own.mk>	# for NOMAN, if it's there.

d28 1
d30 3
d40 1
d42 3
@


1.4
log
@Do not build KerberosIV if Kerberos has been disabled in <bsd.own.mk>
@
text
@d8 1
a8 1
SUBDIR+= sys
@


1.3
log
@domestic goes away, kerberosIV always exists
@
text
@d10 3
d14 1
a25 2
.include <bsd.own.mk>	# for NOMAN, if it's there.

d39 1
d41 1
@


1.2
log
@Add support for building kerberosIV
@
text
@a9 5
.if exists(domestic) && !defined(EXPORTABLE_SYSTEM)
SUBDIR+= domestic
.endif

.if exists(kerberosIV)
a10 1
.endif
a36 4
.if exists(domestic)
	(cd ${.CURDIR}/domestic/libcrypt && ${MAKE} depend && ${MAKE} && ${MAKE} install)
.endif
.if exists(kerberosIV)
a37 1
.endif
@


1.1
log
@Initial revision
@
text
@d14 4
d47 1
a47 1
	(cd ${.CURDIR}/kerberosIV && ${MAKE} depend && ${MAKE} && ${MAKE} install)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

