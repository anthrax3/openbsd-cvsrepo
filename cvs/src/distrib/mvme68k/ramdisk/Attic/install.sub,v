head	1.10;
access;
symbols
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@# @;


1.10
date	2002.04.17.01.59.57;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2002.01.24.23.01.18;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.19.00.04.02;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.07.15.00.09;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.25.01.43.43;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.24.04.50.26;	author smurph;	state Exp;
branches;
next	1.4;

1.4
date	98.11.03.04.35.16;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	97.02.18.16.01.52;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.02.17.11.02.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.02.15.04.27.17;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.10
log
@use the very small RAMDISK config; bring this up to modern times.  needs a few tests
@
text
@#!/bin/sh
#	$OpenBSD: install.sub,v 1.9 2002/01/24 23:01:18 millert Exp $
#	$NetBSD: install.sub,v 1.5.2.8 1996/09/02 23:25:02 pk Exp $
#
# Copyright (c) 1997,1998 Todd Miller, Theo de Raadt
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by Todd Miller and
#	Theo de Raadt
# 4. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Copyright (c) 1996 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jason R. Thorpe.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by the NetBSD
#        Foundation, Inc. and its contributors.
# 4. Neither the name of The NetBSD Foundation nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#	OpenBSD installation/upgrade script - common subroutines.

ROOTDISK=				# filled in below
VERSION=26
VERSION_MAJOR=$(( $VERSION / 10 ))
VERSION_MINOR=$(( $VERSION % 10 ))
export VERSION VERSION_MAJOR VERSION_MINOR

# extra "site" set can be provided by person doing install
ALLSETS="base etc misc comp man game xbase xshare xfont xserv site"	# install
UPGRSETS="base misc comp man game xbase xshare xfont xserv site"	# upgrade
SNAPSETS="bin dev etc games man misc sbin \
	  usr.bin usr.binutils usr.games usr.include \
	  usr.lib usr.libexec usr.misc usr.sbin usr.share var"
THESETS=					# one of the above

# Path searched for sets by install_sets on the local filesystems
local_sets_dir=

# decide upon an editor
if [ "X$EDITOR" = X ]; then
	if [ -x /usr/bin/vi ]; then
		EDITOR=vi
	else
		EDITOR=ed
	fi
	export EDITOR
fi

# Please don't use the 1 of n form below, good idea, wrong implementation!
# get a reponse with default[s]
getresp() {
	local _shell_aware=0

	# -s option means exit after a shell (caller is shell-aware)
	if [ "$1" = "-s" ]; then
		_shell_aware=1
		shift
	fi

	set -o noglob
	valid="false"
	while [ "X$valid" = "Xfalse" ]; do
		read resp
		case "$resp" in
			"")	resp=$1
				;;
			!)	echo "Type 'exit' to return to install."
				sh
				test $_shell_aware -eq 0 && continue
				;;
			!*)
				eval ${resp#?}
				test $_shell_aware -eq 0 && continue
				;;
		esac
		if [ $# -gt 1 ]; then
			for i in $@@; do
				if [ "X$resp" = "X$i" ]; then
					valid="true"
				fi
			done
		else
			valid="true"
		fi
		if [ "X$valid" = "Xfalse" ]; then
			echo "Try again: Enter one of [$@@]"
		fi
	done	
	set +o noglob
}

isin() {
# test the first argument against the remaining ones, return succes on a match
	local	_a=$1

	shift
	while [ $# != 0 ]; do
		if [ "$_a" = "$1" ]; then return 0; fi
		shift
	done
	return 1
}

addel() {
# add first argument to list formed by the remaining arguments
# adds to the tail if the element does not already exist
	local	_a=$1 _seen=

	shift
	while [ $# != 0 ]; do
		echo "$1"
		if [ "$_a" = "$1" ]; then
			_seen="yes"
		fi
		shift
	done
	if [ "X$_seen" = "X" ]; then
		echo "$_a"
	fi
}

rmel() {
# remove first argument from list formed by the remaining arguments
	local	_a=$1

	shift
	while [ $# != 0 ]; do
		if [ "$_a" != "$1" ]; then
			echo "$1"
		fi
		shift
	done
}

cutword () {
# read lines on stdin, return Nth element of each line, like cut(1)
	local _a _n _oifs="$IFS"

	# optional field separator
	case "$1" in
		-t?*) IFS=${1#-t}; shift;;
	esac

	_n=$1
	while read _a; do
		set -- $_a
		test "$1" = "" && break
		eval echo \$$_n
	done
	IFS="$_oifs"
}

cutlast () {
# read a line of data, return last element. Equiv. of awk '{print $NF}'.
	local _a _oifs="$IFS"

	# optional field separator
	case "$1" in
		-t?*) IFS=${1#-t}; shift;;
	esac

	read _a; set -- $_a
	IFS="$_oifs"
	if [ "$1" = "" ]; then return; fi
	while [ "$#" -gt 10 ]; do shift 10; done
	eval echo \$$#
}

firstchar () {
# return first character of argument
	local _a=$1

	while [ ${#_a} != 1 ]; do
		_a=${_a%?}
	done
	echo $_a
}

basename () {
	local _oifs

	if [ "$1" = "" ]; then return; fi
	_oifs="$IFS"
	IFS="/"
	set -- $1
	IFS="$_oifs"
	while [ "$#" -gt 10 ]; do shift 10; done
	eval echo \$$#
}

isnumeric() {
	local _a=$1

	while [ ${#_a} != 0 ]; do
		case $_a in
			[0-9]*) ;;
			*)	echo 0; return;;
		esac
		_a=${_a#?}
	done
	echo 1; return
}

get_ifdevs() {
	# return available network devices
	/sbin/ifconfig -a | egrep -v '^([[:space:]]|(lo|enc|ppp|sl|tun|bridge)[[:digit:]])' | cutword -t: 1
}

dir_has_sets() {
	# return true when the directory $1 contains a set for $2...$n
	local _dir=$1 _file

	shift
	for _file in $*
	do
		if [ -f $_dir/${_file}${VERSION}.tar.gz ]; then
			return 0
		fi
		# Try for stupid msdos convention
		if [ -f $_dir/${_file}${VERSION}.tgz ]; then
			return 0
		fi
		# Special check for kernel
		if [ $_file = "kernel" -a -f $_dir/bsd ]; then
			return 0
		fi
	done
	return 1
}

list_has_sets() {
	# return true when the list $1 contains a set, given dir $2 for $3...$n
	local _list=$1 _file

	shift
	for _file in $*
	do
		if isin ${_file}${VERSION}.tar.gz $_list; then
			return 0
		fi
		# Try for stupid msdos convention
		if isin ${_file}${VERSION}.tgz $_list; then
			return 0
		fi
		# Special check for kernel
		if test $_file = "kernel" && isin bsd $_list; then
			return 0
		fi
	done
	return 1
}

ftp_list_files() {
	# log in via ftp to host $1 as user $2 with password $3
	# and return a list of all files in the directory $4 on stdout
	local _host=$1 _user=$2 _pass=$3 _dir=$4

	shift; shift; shift; shift

	ftp ${_ftp_active} -V -n $_host  << __ptf
user $_user $_pass
cd $_dir
ls
quit
__ptf
}

get_localdir() {
	# $1 is relative mountpoint
	local _mp=$1 _dir=

	while : ; do
	    echo -n "Enter the pathname where the sets are stored [$_dir] "
	    getresp "$_dir"
	    _dir=$resp

	    # Allow break-out with empty response
	    if [ -z "$_dir" ]; then
		echo -n "Are you sure you don't want to set the pathname? [n] "
		getresp "n"
		case "$resp" in
			y*|Y*)
				break
				;;
			*)
				continue
				;;
		esac
	    fi

	    if dir_has_sets "$_mp/$_dir" $THESETS
	    then
		local_sets_dir="$_mp/$_dir"
		break
	    else
		cat << __EOT
The directory \"$local_sets_dir\" does not exist, or does not hold any of the
upgrade sets.
__EOT
		echo -n "Re-enter pathname? [y] "
		getresp "y"
		case "$resp" in
			y*|Y*)
				;;
			*)
				local_sets_dir=
				break
				;;
		esac
	    fi
	done
}

getanotherdisk() {
	cat << __EOT

Now you can select another disk to initialize.  (Do not re-select a disk
you have already entered information for).  Available disks are:

__EOT
	_DKDEVS=`md_get_diskdevs`
	echo	"$_DKDEVS"
	echo
	echo -n	"Which one? [done] "
	getresp ""
	if [ "X${resp}" = "X" ]; then
		DISK=done
	elif [ "X${resp}" = "Xdone" ]; then
		DISK=done
	elif isin $resp $_DKDEVS ; then
		DISK="$resp"
	else
		echo
		echo "The disk $resp does not exist."
		DISK=
	fi
}

getrootdisk() {
	cat << __EOT

The installation program needs to know which disk to consider the root disk.
Note the unit number may be different than the unit number you used in the
boot program (especially on a PC with multiple disk controllers).
Available disks are:

__EOT
	local _defdsk;

	_DKDEVS=`md_get_diskdevs`
	_defdsk=`echo $_DKDEVS | cutlast`
	if [ "${_defdsk}" != "${_DKDEVS}" ]; then
		_defdsk=
	fi
	echo	"$_DKDEVS"
	echo
	echo -n "Which disk is the root disk? [${_defdsk}] "
	getresp "${_defdsk}"
	if isin $resp $_DKDEVS ; then
		ROOTDISK="$resp"
	else
		echo
		echo "The disk $resp does not exist."
		ROOTDISK=
	fi
}

addhostent() {
	# $1 - IP address
	# $2 - symbolic name

	# Create an entry in the hosts table.  If no host table
	# exists, create one.  If the symbolic name already exists,
	# replace its entry.
	if [ ! -f /tmp/hosts ]; then
		echo "127.0.0.1 localhost" > /tmp/hosts
	fi

	sed "/ $2.$FQDN $2\$/d" < /tmp/hosts > /tmp/hosts.new
	mv /tmp/hosts.new /tmp/hosts

	echo "$1 $2.$FQDN $2" >> /tmp/hosts
}

addifconfig() {
	# $1 - interface name
	# $2 - interface symbolic name
	# $3 - interface IP address
	# $4 - interface netmask
	# $5 - (optional) interface media directives

	# Create a hostname.* file for the interface.
	if [ "$3" = "dhcp" ]; then
		echo "dhcp NONE NONE NONE $5" > /tmp/hostname.$1
		addhostent 127.0.0.1 $2
	else
		echo "inet $3 $4 NONE $5" > /tmp/hostname.$1
		addhostent $3 $2
	fi
}

configurenetwork() {
	local _ifsdone= _ifs _ouranswer= _reprompt=1

	_IFS=`get_ifdevs`
	resp=		# force at least one iteration
	while [ "X${resp}" != X"done" ]; do
		if [ $_reprompt = 1 ]; then
			cat << __EOT

You may configure the following network interfaces (the interfaces
marked with [X] have been successfully configured):

__EOT

			for _ifs in $_IFS; do
				if [ "X${_ouranswer}" = "X" ]; then
					_ouranswer=$_ifs
				fi
				if isin $_ifs $_ifsdone ; then
					echo -n "	[X] "
				else
					echo -n "	[ ] "
				fi
				echo $_ifs
			done
			echo
		fi
		echo -n	"Configure which interface? (or, enter 'done') [$_ouranswer] "
		getresp "$_ouranswer"
		case "$resp" in
		"done")
			;;
		"")
			_reprompt=0
			;;
		*)
			_ifs=$resp
			_ouranswer="done"
			if isin $_ifs $_IFS ; then
				if configure_ifs $_ifs ; then
					_ifsdone="$_ifs $_ifsdone"
				else
				_ouranswer=
				fi
			else
				echo "Invalid response: \"$resp\" is not in list"
			fi
			_reprompt=1
			;;
		esac

	done
}

configure_ifs() {

	local _up _if_name=$1 _if_ip _if_mask
	local _if_symname _if_extra _hostname
	local _dhcp_prompt

	set -- `ifconfig $_if_name | sed -n '
		1s/.*<UP,.*$/UP/p
		1s/.*<.*>*$/DOWN/p
		/media:/s/^.*$//
		/status:/s/^.*$//
		/inet/s/--> [0-9.][0-9.]*//
		/inet/s/netmask//
		/inet/s/broadcast//
		/inet/s/inet// p'`

	_up=$1
	_if_ip=$2
	_if_mask=$3

	if [ $_up = "UP" ]; then
		ifconfig $_if_name delete down
	fi

	if [ ! -x /sbin/dhclient ]; then
		echo "DHCP install not supported"
		echo
	else
		_dhcp_prompt=" (or 'dhcp')"
	fi

	# Get IP address
	resp=		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "IP address${_dhcp_prompt} ? [$_if_ip] "
		getresp "$_if_ip"
		if [ ! -x /sbin/dhclient -a "X$resp" == "Xdhcp" ]; then
			resp=
		fi
		_if_ip=$resp
	done

	# Get symbolic name
	_hostname=`hostname`
	resp=		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Symbolic (host) name? [$_hostname] "
		getresp "$_hostname"
		_if_symname=$resp
	done

	# Get netmask
	if [ "$_if_ip" != "dhcp" ]; then
		resp=
		if [ "X${_if_mask}" = X"" ]; then
			_if_mask=255.255.255.0
		fi
		while [ "X${resp}" = X"" ]; do
			echo -n "Netmask ? [$_if_mask] "
			getresp "$_if_mask"
			_if_mask=$resp
		done
	fi

	if [ -n "`ifconfig -m ${_if_name} | sed -n '/media/p'`" ]; then
		echo "Your use of the network interface may require non-default"
		echo "media directives.  The default media is:"
		ifconfig -m ${_if_name} | sed -n '
			/supported/D
			/media:/p'
		echo "This is a list of supported media:"
		ifconfig -m ${_if_name} | sed -n '
			/media:/D
			s/^	//
			/media/p'
		echo "If the default is not satisfactory, and you wish to use another"
		echo "media, copy that line from above (e.g. \"media 100baseTX\")"
		echo -n "Media directives? [$_if_extra] "
		getresp "$_if_extra"
		if [ "X${resp}" != X"" ]; then
			_if_extra=$resp
		fi
	fi

	# Configure the interface.  If it
	# succeeds, add it to the permanent
	# network configuration info.
	if [ "$_if_ip" = "dhcp" ]; then
		ifconfig ${_if_name} down ${_if_extra}
cat > /etc/dhclient.conf << __EOT
initial-interval 1;
send host-name "$_hostname";
request subnet-mask, broadcast-address, routers,
       domain-name, domain-name-servers, host-name;
__EOT
		dhclient -1 ${_if_name}

		set -- `ifconfig $_if_name | sed -n '
			1s/.*<UP,.*$/UP/p
			1s/.*<.*>*$/DOWN/p
			/media:/s/^.*$//
			/status:/s/^.*$//
			/inet/s/--> [0-9.][0-9.]*//
			/inet/s/netmask//
			/inet/s/broadcast//
			/inet/s/inet// p'`

		if [ $1 = "UP" -a $2 = "0.0.0.0" ]; then
			echo "hostname-associated DHCP attempt for $_if_name failed..."
			ifconfig $_if_name delete down

			cat > /etc/dhclient.conf << __EOT
initial-interval 1;
request subnet-mask, broadcast-address, routers,
       domain-name, domain-name-servers, host-name;
__EOT
			dhclient -1 ${_if_name}
			set -- `ifconfig $_if_name | sed -n '
				1s/.*<UP,.*$/UP/p
				1s/.*<.*>*$/DOWN/p
				/media:/s/^.*$//
				/status:/s/^.*$//
				/inet/s/--> [0-9.][0-9.]*//
				/inet/s/netmask//
				/inet/s/broadcast//
				/inet/s/inet// p'`

			if [ $1 = "UP" -a $2 = "0.0.0.0" ]; then
				echo "free-roaming DHCP attempt for $_if_name failed."
				ifconfig $_if_name delete down
				return 1
			else
				echo "DHCP attempt for $_if_name successful."
				addifconfig ${_if_name} ${_if_symname} ${_if_ip}
				return 0
			fi
		else
			echo "DHCP configuration of $_if_name successful."
			addifconfig ${_if_name} ${_if_symname} ${_if_ip}
			return 0
		fi
	else
		ifconfig ${_if_name} down
		if ifconfig ${_if_name} inet \
		    ${_if_ip} \
		    netmask ${_if_mask} ${_if_extra} up ; then
			addifconfig ${_if_name} ${_if_symname} ${_if_ip} ${_if_mask} "${_if_extra}"
			return 0
		fi
	fi
	return 1
}

# Much of this is gratuitously stolen from /etc/netstart.
enable_network() {

	# Set up the hostname.
	if [ ! -f /mnt/etc/myname ]; then
		echo "ERROR: no /etc/myname!"
		return 1
	fi
	hostname=`cat /mnt/etc/myname`
	hostname $hostname

	# configure all the interfaces which we know about.
(
	tmp="$IFS"
	IFS="$IFS."
	set -- `echo /mnt/etc/hostname*`
	IFS=$tmp
	unset tmp

	while [ $# -ge 2 ] ; do
		shift		# get rid of "hostname"
		(
			read af name mask bcaddr extras
			read dt dtaddr

			if [ ! -n "$name" ]; then
				echo "/etc/hostname.$1: invalid network configuration file"
				exit
			fi

			cmd="ifconfig $1 $af $name "
			if [ "${dt}" = "dest" ]; then cmd="$cmd $dtaddr"; fi
			if [ -n "$mask" ]; then cmd="$cmd netmask $mask"; fi
			if [ -n "$bcaddr" -a "X$bcaddr" != "XNONE" ]; then
				cmd="$cmd broadcast $bcaddr";
			fi
			cmd="$cmd $extras"

			$cmd
		) < /mnt/etc/hostname.$1
		shift
	done
)

	# set the address for the loopback interface
	ifconfig lo0 inet localhost

	# use loopback, not the wire
	route add $hostname localhost

	# /etc/mygate, if it exists, contains the name of my gateway host
	# that name must be in /etc/hosts.
	if [ -f /mnt/etc/mygate ]; then
		route delete default > /dev/null 2>&1
		route add default `cat /mnt/etc/mygate`
	fi

	# enable the resolver, if appropriate.
	if [ -f /mnt/etc/resolv.conf ]; then
		_resolver_enabled="TRUE"
		cp /mnt/etc/resolv.conf /tmp/resolv.conf.shadow
	fi

	# Display results...
	echo	"Network interface configuration:"
	ifconfig -am

	echo

	if [ "X${_resolver_enabled}" = X"TRUE" ]; then
		route show
		echo
		echo	"Resolver enabled."
	else
		route -n show
		echo
		echo	"Resolver not enabled."
	fi

	return 0
}

# Print the selector and get a response
# The list of sets is passed in as $1, sets $resp
get_selection() {
	local _next= _f _sets=$1

	for _f in $_sets ; do
		if isin $_f $_setsdone ; then
			echo -n "	[X] "
			_next=
		else
			echo -n "	[ ] "
			if [ -z "$_next" ]; then
			    _next=$_f
			fi
		fi
		echo $_f
	done

	# Get the name of the file.
	echo -n "File name? [$_next] "
	getresp "$_next"
}

# Do globbing on the selection and parse +/-, sets _get_files and _setsdone
# (which must exist in the local namespace) as side effects.
glob_selection() {
	local _selection="$1" _parent_dir="$2" _sets="$3"
	local _action _matched _tfile _f

	if [ "X${_selection}" = X"" ]; then
		return
	fi

	# Change +/- into add/remove
	_action=add
	case "$_selection" in
		+*)	_selection="${_selection#?}"
			;;
		-*)	_selection="${_selection#?}"
			_action=remove
			;;
	esac

	# Major hack to allow the user to select globbing patterns
	set -o noglob
	if [ X"$_selection" = X"all" ]; then
		_selection=*
	fi
	_tfile=/tmp/install_case.$$	# safe in single user mode
	cat >$_tfile << OOF
	case \$_f in
		$_selection)	# Add/remove file to extraction list
			if [ "\$_action" = "add" ]; then
				_get_files=\`addel \${_f} \${_get_files}\`
				_setsdone=\`addel \${_f} \${_setsdone}\`
			elif [ "\$_action" = "remove" ]; then
				_get_files=\`rmel \${_f} \${_get_files}\`
				_setsdone=\`rmel \${_f} \${_setsdone}\`
			else
				echo "Unknown action: \$_action"
			fi
			_matched=\$(( \$_matched + 1 ))
			;;
	esac
OOF
	set +o noglob

	# Eww.
	_matched=0
	for _f in $_sets; do
		. $_tfile
	done
	rm -f $_tfile

	if [ $_matched -eq 0 ]; then
		echo "File $_parent_dir/$_selection does not exist.  Check to make"
		echo "sure you entered the information properly or enter 'list' for a file list."
	fi
}

install_url() {
# Get several parameters from the user, and xfer
# files from the server.
# Note:	_ftp_server_ip, _ftp_server_dir, _ftp_server_login,
#	_ftp_server_password, and _ftp_active must be global.

local _sets _kernel _f _file_list _get_files _failed_files _osetsdone
local _url_type _url_base _reuse _minpat

# Parse arguments, shell style
while test $# != 0; do
	case "$1" in
		-ftp) _url_type=ftp ;;
		-html) _url_type=html ;;
		-reuse) _reuse=1 ;;
		-minpat) shift; _minpat="$1" ;;
	esac
	shift
done
if [ X"${_minpat}" = X ]; then
	_minpat='base*.tar.gz|base*.tgz|man*.tar.gz|man*.tgz|etc*.tar.gz|etc*.tgz|bsd'
fi

echo
echo "This is an automated ${_url_type}-based installation process.  You will be asked"
echo "questions and then the files will be retrieved iteratively via ftp(1)."
echo

# Reuse old values w/o prompting for anything?
if [ X"$_reuse" = X"1" ]; then
	_reuse=
	if eval test X"\$_installed_via_${_url_type}" = X"1"; then
		echo -n "Use values from previous ${_url_type} install? [y] "
		getresp y
		case "$resp" in
			y*|Y*)
				_reuse=1;;
		esac
	fi
fi
if [ X"$_reuse" = X ]; then
	# Proxy the connections?
	if [ "X${_proxy_host}" = X"" ]; then
		_proxy_host=none
	fi
	echo -n "HTTP/FTP proxy URL? (e.g. \"http://proxy:8080\", or \"none\") [${_proxy_host}] "
	getresp "${_proxy_host}"
	if [ "X${resp}" = X"none" ]; then
		unset _proxy_host ftp_proxy http_proxy
	else
		_proxy_host=$resp
		export ftp_proxy=${_proxy_host}
		export http_proxy=${_proxy_host}
	fi
	if [ "${_url_type}" = "ftp" -a "X$ftp_proxy" = "X" ]; then
		# Use active mode ftp? (irrelevant if using a proxy)
		case "${_ftp_active}" in
			-A)	resp=y ;;
			*)	resp=n ;;
		esac
		echo "By default, ftp will attempt a passive connection and fall back to a normal"
		echo "(active) connection if that doesn't work.  However, there are some very"
		echo "old ftp servers that claim to support passive mode, but really do not."
		echo "In this case, you should explicitly request an active session."
		echo -n "Do you want to use active ftp? [${resp}] "
		getresp "${resp}"
		case "$resp" in
			y*|Y*)	_ftp_active=-A ;;
			*)	unset _ftp_active ;;
		esac
	fi

	# Provide a list of possible servers
	test -z "$_ftp_getlist" && _ftp_getlist=y
	echo -n "Do you want a list of potential ${_url_type} servers? [${_ftp_getlist}] "
	getresp $_ftp_getlist
	case "$resp" in
	n*|N*)	_ftp_getlist=n
		;;
	*)
		_ftp_getlist=y
		ftphost=129.128.5.191
		if [ "X${_resolver_enabled}" = X"TRUE" ]; then
			ftphost=ftp.openbsd.org
		fi
		ftp ${_ftp_active} -V -a -o /tmp/ftplist ftp://${ftphost}/pub/OpenBSD/${VERSION_MAJOR}.${VERSION_MINOR}/ftplist > /dev/null
		cat /tmp/ftplist | grep "^${_url_type}:" | cat -n | less -XE
		;;
	esac

	# Get server IP address
	resp=		# force one iteration
	while [ "X${resp}" = X"" ]; do
		if [ -f /tmp/ftplist ]; then
			eval echo -n "Server IP address, hostname, or list#? [\$_${_url_type}_server_ip]\ "
		else
			eval echo -n "Server IP address, or hostname? [\$_${_url_type}_server_ip]\ "
		fi
		eval getresp "\$_${_url_type}_server_ip"
		if [ "X$resp" = "X?" -a -f /tmp/ftplist ]; then
			cat /tmp/ftplist | grep "^${_url_type}:" | cat -n | less -XE
			resp=
		elif [ -n "$resp" -a `isnumeric $resp` -eq 1 -a ${resp:-0} -ge 1 \
		    -a -f /tmp/ftplist ]; then
			maxlines=`grep "^${_url_type}:" /tmp/ftplist | cat -n |
			    sed -n -e '$p' | cutword 1`
			if [ $maxlines -lt $resp ]; then
				echo "There is no ${resp}th line in the list."
				resp=
				continue
			fi
			tline=`grep "^${_url_type}:" /tmp/ftplist | sed -n -e "${resp}p"`
			url=`echo $tline | sed -e "s/^${_url_type}:\/\///" |
			    cutword -t' ' 1 | cutword -t' ' 1`
			host=`echo $url | cutword -t/ 1`
			path=`echo $url | sed -e "s/^${host}\///"`
			path="${path}/${VERSION_MAJOR}.${VERSION_MINOR}/${ARCH}"
			eval _${_url_type}_server_ip=$host
			eval _${_url_type}_server_dir=$path
			resp=		# do it again, just to double check
			echo "Using	$tline"
		else
			eval _${_url_type}_server_ip="$resp"
		fi
	done

	# Get server directory
	if [ "${_url_type}" = "ftp" -a "X${_ftp_server_dir}" = X"" ]; then
		# Default ftp dir
		_ftp_server_dir="pub/OpenBSD/${VERSION_MAJOR}.${VERSION_MINOR}/${ARCH}"
	fi
	resp=		# force one iteration
	while [ "X${resp}" = X"" ]; do
		eval echo -n "Server directory? [\$_${_url_type}_server_dir]\ "
		eval getresp "\$_${_url_type}_server_dir"
		eval _${_url_type}_server_dir=$resp
	done

	if [ "${_url_type}" = "ftp" ]; then
		# Need default values even if we proxy ftp...
		if [ "X${_ftp_server_login}" = X"" ]; then
			_ftp_server_login=anonymous
		fi
		if [ "X${_ftp_server_password}" = X"" ]; then
			_ftp_server_password=root@@`hostname`.${FQDN}
		fi

		# Get login name
		resp=		# force one iteration
		while [ "X${resp}" = X"" ]; do
			echo -n "Login? [${_ftp_server_login}] "
			getresp "${_ftp_server_login}"
			_ftp_server_login=$resp
		done

		# Get password unless anonymous
		if [ ${_ftp_server_login} != "anonymous" ]; then
			resp=		# force one iteration
			while [ "X${resp}" = X"" ]; do
				echo -n "Password (will not echo): "
				stty -echo
				getresp "${_ftp_server_password}"
				stty echo
				echo
				_ftp_server_password=$resp
			done
		else
			# only used by ftp_list_files()
			_ftp_server_password=root@@`hostname`.${FQDN}
		fi
	fi
fi

# Build up the base url since it is so nasty...
if [ "${_url_type}" = "ftp" -a "${_ftp_server_login}" != "anonymous" ]; then
	eval _url_base=${_url_type}://${_ftp_server_login}:${_ftp_server_password}@@\$_${_url_type}_server_ip/\$_${_url_type}_server_dir
else
	eval _url_base=${_url_type}://\$_${_url_type}_server_ip/\$_${_url_type}_server_dir
fi

# Get list of files from the server.
# XXX - check for nil $_file_list and deal
if [ "${_url_type}" = "ftp" -a "X${ftp_proxy}" = X"" ]; then
	_file_list=`ftp_list_files "$_ftp_server_ip" "$_ftp_server_login" "$_ftp_server_password" "$_ftp_server_dir"`
else
	# Assumes index file is "index.txt" for http (or proxy)
	# We can't use index.html since the format is server-dependent
	_file_list=`ftp -o - -V ${_url_base}/index.txt | sed 's///'`
fi

_sets=
if list_has_sets "$_file_list" $THESETS; then
	for _f in $THESETS ; do
		if [ "X${_f}" = "Xkernel" ]; then
			if isin bsd $_file_list; then
				_kernel=bsd
			fi
		elif isin ${_f}${VERSION}.tar.gz $_file_list; then
			_sets="$_sets ${_f}${VERSION}.tar.gz"
		elif isin ${_f}${VERSION}.tgz $_file_list; then
			_sets="$_sets ${_f}${VERSION}.tgz"
		fi
	done
else
	eval echo "There are no OpenBSD install sets available in \"\$_${_url_type}_server_dir\"."
	echo -n "Search for *.tar.gz and *.tgz files? [y] "
	getresp "y"
	case "$resp" in
		n*|N*)	return ;;
		*)	;;
	esac
	# *.tar.gz and *.tgz are possible sets
	_sets=
	_kernel=
	for _f in ${_file_list} ; do
		case "$_f" in
		    *.tar.gz|*.tgz)	_sets="$_sets ${_f}"
		esac
	done
	if [ "X${_sets}" = X"" ]; then
		echo "There are no *.tar.gz or *.tgz files in that dir."
		echo -n "See a directory listing? [y] "
		getresp "y"
		case "$resp" in
			n*|N*)	return ;;
			*)	;;
		esac
		echo
		echo "${_file_list}"
		echo
		return
	else
		echo "Adding *.tar.gz and *.tgz files to selector."
	fi
fi

# Yes, all those blackslashes really are necessary...
eval echo "\\\\n"\
"You will now be asked for files to extract. In addition to the files listed,\\\\n"\
"you may select any file located at\\\\n"\
"	\$_${_url_type}_server_ip:\$_${_url_type}_server_dir\\\\n"\
"You can also enter \'all\' to install all the standard sets, or \'list\' to list\\\\n"\
"the files available.  When you are done selecting files, enter \'done\'. Some of\\\\n"\
"these sets are required for your ${MODE} and some are optional -- you will want\\\\n"\
"at least the base and bsd sets.  Consult the installation notes if you are not\\\\n"\
"sure which sets are required!"
_osetsdone="$_setsdone"
# Set the minimal default
for _f in $_sets $_kernel; do
	eval "case $_f in \
		${_minpat}) \
			if ! isin \${_f} \${_setsdone}; then \
				_get_files=\`addel \${_f} \${_get_files}\` ; \
				_setsdone=\`addel \${_f} \${_setsdone}\` ; \
			fi ;; \
	esac"
done

# Allow the user to select/de-select additional sets
while : ; do
	echo
	echo "The following sets are available for extraction."
	echo "Enter filename, \`list', \`all', or \`done'."
	echo "You may de-select a set by prepending a '-' to its name."
	echo
	get_selection "$_sets $_kernel"

	if [ "X${resp}" = X"done" ]; then
		break
	elif [ "X${resp}" = X"list" ]; then
		echo
		eval echo "\$_${_url_type}_server_dir:"
		echo "${_file_list}"
		continue
	fi

	eval glob_selection \"$resp\" \$_${_url_type}_server_dir \"$_sets $_kernel\"
done

# User may have said "done" without selecting any files
if [ "X${_get_files}" = X"" ]; then
	return
fi

# Stash the fact that we configured and downloaded via this url method
eval _installed_via_${_url_type}=1

echo
echo "Fetching files via ${_url_type} may take a long time, especially over a slow network"
echo -n "connection.  Ready to download files? [y] "
getresp "y"
case "$resp" in
	y*|Y*)
		;;
	*)
		_setsdone="$_osetsdone"
		return
		;;
esac

# Download the files one at a time and keep track of which ones failed
while test -n "${_get_files}" ; do
	_failed_files=
	echo
	for _f in $_get_files ; do
		echo "Getting ${_f} ..."
		if [ "X${_f}" = "Xssl${VERSION}.tar.gz" -o \
		    "X${_f}" = "XsslUSA${VERSION}.tar.gz" ]; then
			( cd /mnt ; ftp ${_ftp_active} -o - -V -m ${_url_base}/${_f} | /mnt/usr/sbin/chroot /mnt /usr/sbin/pkg_add -I -)
		elif [ "X${_f}" = "X${_kernel}" ]; then
			( cd /mnt ; ftp ${_ftp_active} -V -m ${_url_base}/${_f} )
		else
			( cd /mnt ; ftp ${_ftp_active} -o - -V -m ${_url_base}/${_f} | tar zxpf - )
		fi
		if [ $? -ne 0 ]; then
			# Mark xfer as having failed,.
			_setsdone=`rmel $_f $_setsdone`
			_failed_files="${_failed_files} ${_f}"
		elif [ "X${_f}" = "Xssl${VERSION}.tar.gz" -o \
		    "X${_f}" = "XsslUSA${VERSION}.tar.gz" ]; then
			ssl=1
		fi
	done

	# Give them the option of refetching failed files.
	_get_files=
	while test -n "${_failed_files}" ; do
		echo
		echo "The following files failed to transfer and extract correctly:"
		echo "Choose which one(s) to refetch or 'done' to exit selector."
		echo "You may de-select a file by prepending a '-' to its name."
		echo
		get_selection "$_failed_files"

		if [ "X${resp}" = X"done" ]; then
			break
		elif [ "X${resp}" = X"list" ]; then
			echo
			eval echo "\$_${_url_type}_server_dir:"
			echo "${_file_list}"
			echo
			continue
		fi

		eval glob_selection \"$resp\" \$_${_url_type}_server_dir \"$_failed_files\"
	done
done
}

install_from_mounted_fs() {
# $1 - directory containing installation sets
local _sets= _kernel _f _get_files _failed_files _osetsdone

if [ ! -d $1 ]; then
	echo "No such directory: $1"
	return
fi

if dir_has_sets $1 $THESETS; then
	for _f in $THESETS ; do
		if [ "X${_f}" = "Xkernel" ]; then
			if [ -f $1/bsd ]; then
				_kernel=bsd
			fi
		elif [ -f $1/${_f}${VERSION}.tar.gz ]; then
			_sets="$_sets ${_f}${VERSION}.tar.gz"
		elif [ -f $1/${_f}${VERSION}.tgz ]; then
			_sets="$_sets ${_f}${VERSION}.tgz"
		fi
	done
else
	echo "There are no OpenBSD install sets available in \"$1\"."
	echo -n "Search for *.tar.gz and *.tgz files? [y] "
	getresp "y"
	case "$resp" in
		n*|N*)	return ;;
		*)	;;
	esac
	# *.tar.gz and *.tgz are possible sets
	_sets=
	_kernel=
	_sets=`cd $1 ; echo *.tar.gz *.tgz`
	if [ "X${_sets}" = X'*.tar.gz *.tgz' ]; then
		echo "There are no *.tar.gz or *.tgz files in that dir."
		echo -n "See a directory listing? [y] "
		getresp "y"
		case "$resp" in
			n*|N*)	return ;;
			*)	;;
		esac
		echo
		( cd $1 && ls )
		echo
		return
	else
		echo "Adding *.tar.gz and *.tgz files to selector."
	fi
fi

echo "\n"\
"You will now be asked for files to extract.  In addition to the\n"\
"files listed in the selector you may enter any file located in\n"\
"$1.  You can also enter 'all' to install all the standard\n"\
"sets, or 'list' to list the files avilable in $1.\n"\
"When you are done selecting files, enter 'done'.\n"\
"Some of these sets are required for your ${MODE} and some are optional --\n"\
"You will want at least the base and bsd sets.\n"\
"Consult the installation notes if you are not sure which sets are required!"
_osetsdone="$_setsdone"
# Set a minimal default
for _f in $_sets $_kernel; do
	case "$_f" in
		base*.tar.gz|base*.tgz|man*.tar.gz|man*.tgz|etc*.tar.gz|etc*.tgz|bsd)
			if ! isin ${_f} ${_setsdone}; then
				_get_files=`addel ${_f} ${_get_files}`
				_setsdone=`addel ${_f} ${_setsdone}`
			fi
			;;
	esac
done

# Allow the user to select/de-select additional sets
while : ; do
	echo
	echo "The following sets are available for extraction."
	echo "Enter filename, \`list', \`all', or \`done'."
	echo "You may de-select a set by prepending a '-' to its name."
	echo
	get_selection "$_sets $_kernel"

	if [ "X${resp}" = X"done" ]; then
		break
	elif [ "X${resp}" = X"list" ]; then
		echo
		echo "${1}:"
		( cd $1 && ls )
		continue
	fi

	glob_selection "$resp" "$1" "$_sets $_kernel"
done

# User may have said "done" without selecting any files
if [ "X${_get_files}" = X"" ]; then
	return
fi

echo
echo -n "Ready to extract selected file sets? [y] "
getresp "y"
case "$resp" in
	y*|Y*)
		;;
	*)
		_setsdone="$_osetsdone"
		return
		;;
esac

# Extract the files one at a time and keep track of which ones failed
while test -n "${_get_files}" ; do
	_failed_files=
	echo
	for _f in $_get_files ; do
		echo "$1/${_f}:"
		if [ "X${_f}" = "Xssl${VERSION}.tar.gz" -o \
		    "X${_f}" = "XsslUSA${VERSION}.tar.gz" ]; then
			( cd /mnt ; ftp -o - -V -m file:$1/${_f} | /mnt/usr/sbin/chroot /mnt /usr/sbin/pkg_add -I -)
		elif [ "X${_f}" = "X${_kernel}" ]; then
			cp $1/$_f /mnt/$_f
		else
			cat $1/$_f | (cd /mnt; tar -zxvpf -)
		fi
		if [ $? -ne 0 ]; then
			# Mark xfer as having failed,.
			_setsdone=`rmel $_f $_setsdone`
			_failed_files="${_failed_files} ${_f}"
		elif [ "X${_f}" = "Xssl${VERSION}.tar.gz" -o \
		    "X${_f}" = "XsslUSA${VERSION}.tar.gz" ]; then
			ssl=1
		fi
	done

	# Give them the option of retrying failed files.
	_get_files=
	while test -n "${_failed_files}" ; do
		echo
		echo "The following files failed to extract correctly:"
		echo "Choose which one(s) to retry or 'done' to exit selector."
		echo "You may de-select a file by prepending a '-' to its name."
		echo
		get_selection "$_failed_files"

		if [ "X${resp}" = X"done" ]; then
			break
		elif [ "X${resp}" = X"list" ]; then
			echo
			echo "${1}:"
			( cd $1 && ls )
			echo
			continue
		fi

		glob_selection "$resp" "$1" "$_failed_files"
	done
done
}

install_cdrom() {
local _drive _partition_range _partition _fstype _directory

# Get the cdrom device info
cat << __EOT

The following CD-ROM devices are installed on your system; please select
the CD-ROM device containing the partition with the installation sets:

__EOT
_CDDEVS=`md_get_cddevs`
echo    "$_CDDEVS"
echo
echo -n	"Which is the CD-ROM with the installation media? [abort] "
getresp "abort"
case "$resp" in
	abort)
		echo "Aborting."
		return
		;;

	*)
		if isin $resp $_CDDEVS ; then
			_drive=$resp
		else
			echo
			echo "The CD-ROM $resp does not exist."
			echo "Aborting."
			return
		fi
		;;
esac

# Get partition
_partition_range=`md_get_partition_range`
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "CD-ROM partition to mount (normally \"c\")? [c] "
	getresp "c"
	case "$resp" in
		$_partition_range)
			_partition=$resp
			;;

		*)
			echo "Invalid response: $resp"
			resp=		# force loop to repeat
			;;
	esac
done

# Ask for filesystem type
cat << __EOT

There are two CD-ROM filesystem types currently supported by this program:
cd9660		ISO-9660
ffs		Berkeley Fast Filesystem

__EOT
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "Which filesystem type (Official OpenBSD CD-ROM is cd9660)? [cd9660] "
	getresp "cd9660"
	case "$resp" in
		cd9660|ffs)
			_fstype=$resp
			;;

		*)
			echo "Invalid response: $resp"
			resp=		# force loop to repeat
			;;
	esac
done

# Mount the CD-ROM
if ! mount -t ${_fstype} -o ro \
    /dev/${_drive}${_partition} /mnt2 ; then
	echo "Cannot mount CD-ROM drive.  Aborting."
	return
fi

# Get the directory where the file lives
if [ "X${_directory}" = X"" ]; then
	_directory="/${VERSION_MAJOR}.${VERSION_MINOR}/${ARCH}"
fi
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo "Enter the directory relative to the mount point that"
	echo -n "contains the file. [${_directory}] "
	getresp "${_directory}"
done
_directory=$resp

install_from_mounted_fs /mnt2/${_directory}
umount -f /mnt2 > /dev/null 2>&1
}

mount_a_disk() {
# Mount a disk on /mnt2. The set of disk devices to choose from
# is $_DKDEVS.
# returns 0 on failure.

local _drive _def_partition _partition_range _partition _fstype
local _fsopts _directory _md_fstype _md_fsopts

getresp "abort"
case "$resp" in
	abort)
		echo "Aborting."
		return 0
		;;

	*)
		if isin $resp $_DKDEVS ; then
			_drive=$resp
		else
			echo
			echo "The disk $resp does not exist."
			echo "Aborting."
			return 0
		fi
		;;
esac

# Get partition
cat << __EOT

The following partitions have been found on $_drive:

__EOT
disklabel $_drive 2>/dev/null | grep '^  .:'
echo
_likely_partition_range=`disklabel $_drive 2>/dev/null | \
    sed -n -e '/swap/s/.*//' -e '/unused/s/.*//' \
	-e '/^  .:/{s/^  \(.\).*/\1/;H;}' \
	-e '${g;s/\n//g;s/^/[/;s/$/]/p;}'`
_partition_range=`disklabel $_drive 2>/dev/null | \
    sed -n -e '/^  .:/{s/^  \(.\).*/\1/;H;}' \
	-e '${g;s/\n//g;s/^/[/;s/$/]/p;}'`
_def_partition=`echo $_likely_partition_range | \
    sed -n 's/^\[\(.\).*\]/\1/p'`
if [ -z "$_def_partition" ]; then
	_def_partition=`echo $_partition_range | \
	    sed -n 's/^\[\(.\).*\]/\1/p'`
	if [ -z "$_def_partition" ]; then
		echo "There are no usable partitions on that disk"
		return 0
	fi
fi
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "Partition? [$_def_partition] "
	getresp "$_def_partition"
	case "$resp" in
		$_partition_range)
			_partition=$resp
			;;

		*)
			echo "Invalid response: $resp"
			resp=		# force loop to repeat
			;;
	esac
done

# Ask for filesystem type
cat << __EOT

The following filesystem types are supported:
default		(deduced from the disklabel)
ffs
__EOT
_md_fstype=`md_native_fstype`
_md_fsopts=`md_native_fsopts`
if [ ! -z "$_md_fstype" ]; then
	echo "	$_md_fstype"
else
	_md_fstype="_undefined_"
fi
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "Which filesystem type? [default] "
	getresp "default"
	case "$resp" in
		default)
			_fstype=
			_fsopts="ro"
			;;
		ffs)
			_fstype="-t $resp"
			_fsopts="async,ro"
			;;
		$_md_fstype)
			_fstype="-t $resp"
			_fsopts=$_md_fsopts
			;;
		*)
			echo "Invalid response: $resp"
			resp=		# force loop to repeat
			;;
	esac
done

# Mount the disk
if ! mount $_fstype -o $_fsopts /dev/${_drive}${_partition} /mnt2; then
	echo "Cannot mount disk.  Aborting."
	return 0
fi
return 1
}

install_disk() {
local _directory

cat << __EOT

The following disk devices are installed on your system; please select
the disk device containing the partition with the installation sets:

__EOT
_DKDEVS=`md_get_diskdevs`
echo    "$_DKDEVS"
echo
echo -n	"Which is the disk with the installation sets? [abort] "

if mount_a_disk ; then
	return
fi

# Get the directory where the file lives
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo "Enter the directory relative to the mount point that"
	echo -n "contains the file. [${_directory}] "
	getresp "${_directory}"
done
_directory=$resp

install_from_mounted_fs /mnt2/${_directory}
umount -f /mnt2 > /dev/null 2>&1
}

install_nfs() {
# Get the IP address of the server
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "Server IP address or hostname? [${_nfs_server_ip}] "
	getresp "${_nfs_server_ip}"
done
_nfs_server_ip=$resp

# Get server path to mount
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "Filesystem on server to mount? [${_nfs_server_path}] "
	getresp "${_nfs_server_path}"
done
_nfs_server_path=$resp

# Determine use of TCP
echo -n "Use TCP transport (only works with capable NFS server)? [n] "
getresp "n"
case "$resp" in
	y*|Y*)
		_nfs_tcp="-T"
		;;

	*)
		_nfs_tcp=
		;;
esac

# Mount the server
mkdir /mnt2 > /dev/null 2>&1
if ! mount_nfs $_nfs_tcp ${_nfs_server_ip}:${_nfs_server_path} \
    /mnt2 ; then
	echo "Cannot mount NFS server.  Aborting."
	return
fi

# Get the directory where the file lives
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo "Enter the directory relative to the mount point that"
	echo -n "contains the file. [${_nfs_directory}] "
	getresp "${_nfs_directory}"
done
_nfs_directory=$resp

install_from_mounted_fs /mnt2/${_nfs_directory}
umount -f /mnt2 > /dev/null 2>&1
}

install_tape() {
local _xcmd

# Get the name of the tape from the user.
cat << __EOT

The installation program needs to know which tape device to use.  Make
sure you use a "no rewind on close" device.

__EOT
_tape=`basename $TAPE`
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "Name of tape device? [${_tape}]"
	getresp "${_tape}"
done
_tape=`basename $resp`
TAPE="/dev/${_tape}"
if [ ! -c $TAPE ]; then
	echo "$TAPE does not exist or is not a character special file."
	echo "Aborting."
	return
fi
export TAPE

# Rewind the tape device
echo -n "Rewinding tape..."
if ! mt rewind ; then
	echo "$TAPE may not be attached to the system or may not be"
	echo "a tape device.  Aborting."
	return
fi
echo "done."

# Get the file number
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "File number? "
	getresp ""
	case "$resp" in
		[1-9]*)
			_nskip=$(( $resp - 1 ))
			;;

		*)
			echo "Invalid file number ${resp}."
			resp=		# force loop to repeat
			;;
	esac
done

# Skip to correct file.
echo -n "Skipping to source file..."
if [ "X${_nskip}" != X"0" ]; then
	if ! mt fsf $_nskip ; then
		echo "Could not skip $_nskip files.  Aborting."
		return
	fi
fi
echo "done."

cat << __EOT

There are 2 different ways the file can be stored on tape:

1) an image of a gzipped tar file
2) a standard tar image

__EOT
resp=		# force one iteration
while [ "X${resp}" = X"" ]; do
	echo -n "Which way is it? [1] "
	getresp "1"
	case "$resp" in
	1)
		_xcmd="tar -zxvpf -"
		;;

	2)
		_xcmd="tar -xvpf -"
		;;

	*)
		echo "Invalid response: $resp."
		resp=		# force loop to repeat
		;;
	esac
	( cd /mnt; dd if=$TAPE | $_xcmd )
done
echo "Extraction complete."
}

get_timezone() {
local _a _zonepath

#
# If the zoneinfo is not on the installation medium or on the
# installed filesystem, set TZ to GMT and return immediatly.
#
if [ ! -e /usr/share/zoneinfo -a ! -e /mnt/usr/share/zoneinfo ]; then
	TZ=GMT
	return
fi
if [ ! -d /usr/share/zoneinfo ]; then
	_zonepath=/mnt
else
	_zonepath=
fi
	
cat << __EOT

Select a time zone for your location. Timezones are represented on the system
by a directory structure rooted in "/usr/share/timezone". Most timezones can
be selected by entering a token like "CET" or "GMT-6".  Other zones are
grouped by continent or country, with detailed zone information separated by
a slash ("/"), e.g. "US/Pacific" or "Canada/Mountain".

To get a listing of what's available in /usr/share/zoneinfo, enter "?"
at the prompts below.

__EOT
if [ X$TZ = X ]; then
	TZ=`ls -l /mnt/etc/localtime 2>/dev/null | cutlast`
	TZ=${TZ#/usr/share/zoneinfo/}
fi
while : ; do
	echo -n	"What timezone are you in? [\`?' for list] [$TZ] "
	getresp "$TZ"
	case "$resp" in
	"")
		echo "Timezone defaults to GMT"
		TZ="GMT"
		break;
		;;
	"?")
		ls -F ${_zonepath}/usr/share/zoneinfo
		;;
	*)
		_a=$resp
		while [ -d ${_zonepath}/usr/share/zoneinfo/$_a ]; do
			echo -n "There are several timezones available"
			echo " within zone '$_a'"
			echo -n "Select a sub-timezone [\`?' for list]: "
			getresp ""
			case "$resp" in
			"?") ls -F ${_zonepath}/usr/share/zoneinfo/$_a ;;
			*)	_a=${_a}/${resp}
				if [ -f ${_zonepath}/usr/share/zoneinfo/$_a ]; then
					break;
				fi
				;;
			esac
		done
		if [ -f ${_zonepath}/usr/share/zoneinfo/$_a ]; then
			TZ="$_a"
			echo "You have selected timezone \"$_a\"".
			return
		fi
		echo "'/usr/share/zoneinfo/$_a' is not a valid timezone on this system."
		;;
	esac
done
}

sane_install() {
	if [ ! -s /mnt/bsd ]; then
		cat << __EOT

Warning, no kernel (/mnt/bsd) installed!  You did not unpack a file set
containing a kernel--this is needed to boot.  Please note that the install
kernel is *not* suitable for general use.
__EOT
	elif [ ! -f /mnt/bin/cat ]; then
		cat << __EOT

You still do not have a /bin/cat in your filesystem (i.e. a sample random file
which you probably want).  This seems to indicate that you are still missing
important distribution files.
__EOT
	elif [ ! -d /mnt/etc -o ! -d /mnt/usr/share/zoneinfo -o ! -d /mnt/dev ]; then
		cat << __EOT

Something needed to complete the installation seems to be missing, did you
forget to extract a required set?
__EOT
	else
		return 0;
	fi

	cat << __EOT

You will now be given the chance to install the missing set(s).  You can
enter '!' at the prompt to escape to a shell and fix things by hand if you wish.

__EOT

	return 1
}

install_sets() {
local _yup="FALSE" _have_nfs

# Can we do an NFS install?
test -f /sbin/mount_nfs && _have_nfs=true

# Ask the user which media to load the distribution from.
cat << __EOT
It is now time to extract the installation sets onto the hard disk.  Make sure
the sets are either on a local device (i.e. tape, CD-ROM) or on a network
server.  You will have the chance to repeat this step or to extract sets from
several places, so you don't have to try to load all the sets in one try and
can recover from some errors.

__EOT

if [ "X$local_sets_dir" != "X" ]; then
	install_from_mounted_fs ${local_sets_dir}
	if [ X"$_setsdone" != X ]; then
		_yup="TRUE"
	fi
fi

# Go on prodding for alternate locations
resp=		# force at least one iteration
while [ X"${resp}" = X ]; do
	# If _yup is not FALSE, it means that we extracted sets above.
	# If that's the case, bypass the menu the first time.
	if [ X"$_yup" = X"FALSE" ]; then
		echo -n	"Install from (f)tp, (h)ttp, (t)ape, (C)D-ROM"
		test -n "$_have_nfs" && echo -n ", (N)FS"
		echo -n " or local (d)isk? "
		getresp ""
		case "$resp" in
		d*|D*)
			install_disk
			resp=d
			;;
		f*|F*)
			test -n "$_didnet" || donetconfig
			install_url -ftp
			resp=f
			;;
		h*|H*)
			test -n "$_didnet" || donetconfig
			install_url -http
			resp=h
			;;
		t*|T*)
			install_tape
			resp=t
			;;
		c*|C*)
			install_cdrom
			resp=c
			;;
		n*|N*)
			test -n "$_didnet" || donetconfig
			if [ -n "$_have_nfs" ]; then
				install_nfs
				resp=n
			else
				echo "Invalid response: $resp"
				resp=
			fi
			;;
		*)
			echo "Invalid response: $resp"
			resp=
			;;
		esac
	else
		_yup="FALSE"	# So we'll ask next time
	fi

	# Perform sanity checks...
	if sane_install; then
		# Give the user the opportunity to extract more sets. They
		# don't necessarily have to come from the same media.
		echo
		echo -n	"Extract more sets? [n] "
		getresp "n"
		case "$resp" in
		y*|Y*)
			# Force loop to repeat
			resp=
			;;

		*)
			;;
		esac
	else
		# Not sane, don't exit loop.
		resp=
	fi
done
}

munge_fstab() {
local _fstab _fstab_shadow _dev _mp _fstype _rest

# Now that the 'real' fstab is configured, we munge it into a 'shadow'
# fstab which we'll use for mounting and unmounting all of the target
# filesystems relative to /mnt.  Mount all filesystems.
_fstab=$1
_fstab_shadow=$2
( while read _dev _mp _fstype _rest; do
	# Skip comment lines
	case "$_dev" in
		\#*)	continue;;
		*)	;;
	esac
	# and some filesystem types (like there are swap,kernfs,...)
	case "$_fstype" in
		ffs|ufs|nfs)	;;
		*)	continue;;
	esac
	if [ "$_mp" = "/" ]; then
		echo $_dev /mnt $_fstype $_rest
	else
		echo $_dev /mnt$_mp $_fstype $_rest
	fi
    done ) < $_fstab > $_fstab_shadow
}

mount_fs() {
# Must mount filesystems manually, one at a time, so we can make
# sure the mount points exist.
# $1 is a file in fstab format
local _fstab=$1
local _async=$2

( while read line; do
	set -- $line
	_dev=$1
	_mp=$2
	_fstype=$3
	_opt=$4

	# If not the root filesystem, make sure the mount
	# point is present.
	if [ "X{$_mp}" != X"/mnt" ]; then
		mkdir -p $_mp
	fi

	# Mount the filesystem.  If the mount fails, exit
	# with an error condition to tell the outer
	# later to bail.
	if ! mount -v -t $_fstype $_async -o $_opt $_dev $_mp ; then
		# error message displayed by mount
		exit 1
	fi
done ) < $_fstab

if [ "X${?}" != X"0" ]; then
	cat << __EOT

FATAL ERROR:  Cannot mount filesystems.  Double-check your configuration
and restart the installation process.
__EOT
	exit
fi
}

unmount_fs() {
# Unmount all filesystems and check their integrity.
# Usage: [-check] <fstab file>
local _check _fstab _pid

if [ "$1" = "-check" ]; then
	_check=1
	_fstab=$2
else
	_check=0
	_fstab=$1
fi

if [ ! \( -f $_fstab -a -s $_fstab \) ]; then
	echo "fstab empty" > /dev/tty
	return
fi

(
	_devs=
	_mps=
	# maintain reverse order
	while read line; do
		set -- $line
		_devs="$1 ${_devs}"
		_mps="$2 ${_mps}"
	done
	echo -n "Unmounting filesystems... "
	for _mp in ${_mps}; do
		echo -n "${_mp} "
		umount ${_mp}
	done
	echo "... Done."

	if [ $_check = 1 ]; then
		echo "Checking filesystem integrity..."
		for _dev in ${_devs}; do
			echo  "${_dev}"
			fsck -f ${_dev}
		done
	fi
	echo "Done."
) < $_fstab
}

remount_fs() {
( while read line; do
	set -- $line
	_dev=$1
	_mp=$2
	_fstype=$3
	_opt=$4

	if ! mount -u -o $_opt $_dev $_mp ; then
		# error message displayed by mount
		exit 1
	fi
done ) < $1
}

check_fs() {
# Check filesystem integrity.
# $1 is a file in fstab format
local _fstab=$1

(
	_devs=
	_mps=
	while read line; do
		set -- $line
		_devs="$1 ${_devs}"
		_mps="$2 ${_mps}"
	done

	echo "Checking filesystem integrity..."
	for _dev in ${_devs}; do
		echo  "${_dev}"
		fsck -f ${_dev}
	done
	echo "Done."
) < $_fstab
}

donetconfig() {
	_didnet=1
	resp=		# force at least one iteration
	_nam=
	if [ -f /tmp/myname ]; then
		_nam=`cat /tmp/myname`
	fi
	while [ "X${resp}" = X"" ]; do
		echo -n "Enter system hostname (short form, e.g. \"foo\"): [$_nam] "
		getresp "$_nam"
	done
	hostname $resp
	echo $resp > /tmp/myname

	resp=		# force at least one iteration
	if [ -f /tmp/resolv.conf ]; then
		FQDN=`grep '^domain ' /tmp/resolv.conf | \
		    sed -e 's/^domain //'`
	elif  [ -f /tmp/resolv.conf.shadow ]; then
		FQDN=`grep '^domain ' /tmp/resolv.conf.shadow | \
		    sed -e 's/^domain //'`
        fi
	while [ "X${resp}" = X"" ]; do
		echo -n "Enter DNS domain name (e.g. \"bar.com\"): [$FQDN] "
		getresp "$FQDN"
	done
	FQDN=$resp

	echo
	echo "If you have any devices being configured by a DHCP server"
	echo "it is recommended that you do not enter a default route or"
	echo "any name servers."
	echo

	configurenetwork

	resp=`route -n show |
	    grep '^default' |
	    sed -e 's/^default          //' -e 's/ .*//'`
	if [ "X${resp}" = "X" ]; then
		resp=none
		if [ -f /tmp/mygate ]; then
			resp=`cat /etc/mygate`
			if [ "X${resp}" = "X" ]; then
				resp="none";
			fi
		fi
	fi
	echo -n "Enter IP address of default route: [$resp] "
	getresp "$resp"
	if [ "X${resp}" != X"none" ]; then
		route delete default > /dev/null 2>&1
		if route add default $resp > /dev/null ; then
			echo $resp > /tmp/mygate
		fi
	fi

	resp="none"
	if [ -f /etc/resolv.conf ]; then
		resp=
		for n in `grep '^nameserver ' /etc/resolv.conf | \
		    sed -e 's/^nameserver //'`; do
			if [ "X${resp}" = "X" ]; then
				resp="$n"
			else
				resp="$resp $n"
			fi
		done
	elif [ -f /tmp/resolv.conf ]; then
		resp=
		for n in `grep '^nameserver ' /tmp/resolv.conf | \
		    sed -e 's/^nameserver //'`; do
			if [ "X${resp}" = "X" ]; then
				resp="$n"
			else
				resp="$resp $n"
			fi
		done
	fi
	echo -n	"Enter IP address of primary nameserver: [$resp] "
	getresp "$resp"
	if [ "X${resp}" != X"none" ]; then
		echo "search $FQDN" > /tmp/resolv.conf
		for n in `echo ${resp}`; do
			echo "nameserver $n" >> /tmp/resolv.conf
		done
		echo "lookup file bind" >> /tmp/resolv.conf

		echo -n "Would you like to use the nameserver now? [y] "
		getresp "y"
		case "$resp" in
			y*|Y*)
				cp /tmp/resolv.conf \
				    /tmp/resolv.conf.shadow
				;;

			*)
				;;
		esac
	fi

	if [ ! -f /tmp/resolv.conf.shadow ]; then 
		echo
		echo "The host table is as follows:"
		echo
		cat /tmp/hosts
	cat << __hosts_table_1

You may want to edit the host table in the event that you are doing an
NFS installation or an FTP installation without a name server and want
to refer to the server by name rather than by its numeric ip address.
__hosts_table_1
		echo -n "Would you like to edit the host table with ${EDITOR}? [n] "
		getresp "n"
		case "$resp" in
			y*|Y*)
				${EDITOR} /tmp/hosts
				;;

			*)
				;;
		esac
	fi

	cat << \__network_config_2

You will now be given the opportunity to escape to the command shell to do
any additional network configuration you may need.  This may include adding
additional routes, if needed.  In addition, you might take this opportunity
to redo the default route in the event that it failed above.
__network_config_2
	echo -n "Escape to shell? [n] "
	getresp "n"
	case "$resp" in
		y*|Y*)
			echo "Type 'exit' to return to install."
			sh
			;;

		*)
			;;
	esac
}
@


1.9
log
@Fix `necesary' typos; Alexander Yurchenko

Alas many of these were introduced by yours truly as necessary
just doesn't look right to me for some reason ;-)
@
text
@d2 1
a2 1
#	$OpenBSD: install.sub,v 1.8 2001/09/19 00:04:02 krw Exp $
@


1.8
log
@Fix typo: succesfully -> successfully
@
text
@d2 1
a2 1
#	$OpenBSD: install.sub,v 1.7 2001/08/07 15:00:09 markus Exp $
d1056 1
a1056 1
# Yes, all those blackslashes really are necesary...
@


1.7
log
@suggest CET, not MET, ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sub,v 1.6 2000/02/25 01:43:43 krw Exp $
d461 1
a461 1
marked with [X] have been succesfully configured):
@


1.6
log
@'ie.' -> 'e.g.' or 'i.e.' as appropriate
@
text
@d2 1
a2 1
#	$OpenBSD: install.sub,v 1.5 2000/01/24 04:50:26 smurph Exp $
d1735 1
a1735 1
be selected by entering a token like "MET" or "GMT-6".  Other zones are
@


1.5
log
@Clean up mvme68k install utils and remdisk.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sub,v 1.147 1999/11/11 02:36:02 millert Exp $
d581 1
a581 1
		echo "media, copy that line from above (ie. \"media 100baseTX\")"
d865 1
a865 1
	echo -n "HTTP/FTP proxy URL? (ie. \"http://proxy:8080\", or \"none\") [${_proxy_host}] "
d1797 1
a1797 1
You still do not have a /bin/cat in your filesystem (ie. a sample random file
d2076 1
a2076 1
		echo -n "Enter system hostname (short form, ie. \"foo\"): [$_nam] "
d2091 1
a2091 1
		echo -n "Enter DNS domain name (ie. \"bar.com\"): [$FQDN] "
@


1.4
log
@it's -> its where appropriate
@
text
@d2 1
a2 1
#	$OpenBSD: install.sub,v 1.3 1997/02/18 16:01:52 rahnds Exp $
d5 29
d71 12
a82 6
ROOTDISK=""				# filled in below
VERSION=				# filled in automatically (see list)
export VERSION

ALLSETS="base comp etc games man misc text"	# default install sets
UPGRSETS="base comp games man misc text"	# default upgrade sets
d85 2
a86 2
local_sets_dir=""			# Path searched for sets by install_sets
					# on the local filesystems
d89 1
a89 1
if [ X$EDITOR = X ]; then
d95 1
d98 2
d101 6
a106 3
	read resp
	if [ "X$resp" = "X" ]; then
		resp=$1
d108 31
d143 3
a145 1
	_a=$1; shift
d153 18
d173 1
a173 1
	local	_a
d175 1
a175 1
	_a=$1; shift
d178 1
a178 1
			echo "$1";
d185 2
a186 4
# read a line of data, return Nth element.
	local _a
	local _n
	local _oifs
a188 1
	_oifs="$IFS"
d194 5
a198 1
	read _a; set -- $_a
a199 2
	if [ "$1" = "" ]; then return; fi
	eval echo \$$_n
d204 1
a204 2
	local _a
	local _oifs
a206 1
	_oifs="$IFS"
d220 2
a221 2
	local _a
	_a=$1
d230 1
d240 18
d260 23
a282 2
	local _dir
	local _file
d284 1
a284 1
	_dir=$1; shift
d287 1
a287 1
		if [ -f $_dir/${_file}.tar.gz ]; then
d291 5
a295 1
		if [ -f $_dir/${_file}.tgz ]; then
d302 13
a314 8
twiddle() {
# spin the propeller so we don't get bored
	while : ; do  
		sleep 1; echo -n "\010/";
		sleep 1; echo -n "\010-";
		sleep 1; echo -n "\010\\\\";
		sleep 1; echo -n "\010|";
	done >> /dev/tty & echo $!
d319 1
a319 2
	local _mp
	local _dir
a320 2
	_mp=$1
	_dir=
d345 1
a345 1
		cat << __get_reldir_1
d348 1
a348 1
__get_reldir_1
d355 1
a355 1
				local_sets_dir=""
d363 2
a364 7
getrootdisk() {
	cat << \__getrootdisk_1

The installation program needs to know which disk to consider
the root disk.  Note the unit number may be different than
the unit number you used in the standalone installation
program.
d366 2
a367 1
Available disks are:
d369 1
a369 1
__getrootdisk_1
d372 2
a373 2
	echo	""
	echo -n	"Which disk is the root disk? "
d375 6
a380 2
	if isin $resp $_DKDEVS ; then
		ROOTDISK="$resp"
d382 1
a382 1
		echo ""
d384 1
a384 1
		ROOTDISK=""
d388 2
a389 2
labelmoredisks() {
	cat << \__labelmoredisks_1
d391 4
a394 1
You may label the following disks:
d396 2
a397 8
__labelmoredisks_1
	echo "$_DKDEVS"
	echo	""
	echo -n	"Label which disk? [done] "
	getresp "done"
	case "$resp" in
		done)
			;;
d399 16
a414 9
		*)
			if isin $resp $_DKDEVS ; then
				md_labeldisk $resp
			else
				echo ""
				echo "The disk $resp does not exist."
			fi
			;;
	esac
d422 1
a422 1
	# exists, create one.  If the IP address already exists,
d428 1
a428 1
	sed "/^$1 /d" < /tmp/hosts > /tmp/hosts.new
d431 1
a431 1
	echo "$1 $2 $2.$FQDN" >> /tmp/hosts
d439 1
a439 1
	# $5 - (optional) interface link-layer directives
d442 7
a448 3
	echo "inet $2 $4 NONE $5" > /tmp/hostname.$1

	addhostent $3 $2
d452 1
a452 2
	local _ifsdone
	local _ifs
d454 2
a455 3
	_IFS=`md_get_ifdevs`
	_ifsdone=""
	resp=""		# force at least one iteration
d457 2
a458 1
	cat << \__configurenetwork_1
d463 1
a463 1
__configurenetwork_1
d465 15
a479 11
		for _ifs in $_IFS; do
			if isin $_ifs $_ifsdone ; then
				echo -n "[X] "
			else
				echo -n "    "
			fi
			echo $_ifs
		done
		echo	""
		echo -n	"Configure which interface? [done] "
		getresp "done"
d483 3
d488 1
d492 2
d498 1
d501 1
d507 3
a509 8
	local _up
	local _interface_name
	local _interface_ip
	local _interface_mask
	local _interface_symname
	local _interface_extra

	_interface_name=$1
d511 1
a511 1
	set -- `ifconfig $_interface_name | sed -n '
d514 6
a519 5
		2s/inet//
		2s/--> [0-9.][0-9.]*//
		2s/netmask//
		2s/broadcast//
		2p'`
d522 13
a534 2
	_interface_ip=$2
	_interface_mask=$3
d537 1
a537 1
	resp=""		# force one iteration
d539 6
a544 3
		echo -n "IP address? [$_interface_ip] "
		getresp "$_interface_ip"
		_interface_ip=$resp
d548 2
a549 1
	resp=""		# force one iteration
d551 3
a553 3
		echo -n "Symbolic (host) name? "
		getresp ""
		_interface_symname=$resp
d557 11
a567 6
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Netmask? [$_interface_mask] "
		getresp "$_interface_mask"
		_interface_mask=$resp
	done
d569 18
a586 8
	echo "Your network interface might require additional link-layer"
	echo "directives (like \`link0'). If this is the case you can enter"
	echo "these at the next prompt."
	echo ""
	echo -n "Additional link-layer arguments? [$_interface_extra] "
	getresp "$_interface_extra"
	if [ "X${resp}" != X"" ]; then
		_interface_extra=$resp
d592 52
a643 10
	if [ $_up != "UP" ]; then
		ifconfig ${_interface_name} down
		if ifconfig ${_interface_name} inet \
		    ${_interface_ip} \
		    netmask ${_interface_mask} ${_interface_extra} up ; then
			addifconfig \
			    ${_interface_name} \
			    ${_interface_symname} \
			    ${_interface_ip} \
			    ${_interface_mask} ${_interface_extra}
d647 7
a653 7
		echo "Interface ${_interface_name} is already active."
		echo "Just saving configuration on new root filesystem."
		addifconfig \
		    ${_interface_name} \
		    ${_interface_symname} \
		    ${_interface_ip} \
		    ${_interface_mask} ${_interface_extra}
d684 1
a684 1
		    echo "/etc/hostname.$1: invalid network configuration file"
d723 1
a723 1
	ifconfig -a
d725 1
a725 1
	echo	""
d728 2
a729 2
		netstat -r
		echo	""
d732 2
a733 2
		netstat -rn
		echo	""
d740 17
a756 9
install_ftp() {
	# Get several parameters from the user, and create
	# a shell script that directs the appropriate
	# commands into ftp.
	cat << \__install_ftp_1

This is an automated ftp-based installation process.  You will be asked
several questions.  The correct set of commands will be placed in a script
that will be fed to ftp(1).
d758 4
a761 8
__install_ftp_1
	# Get server IP address
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Server IP? [${_ftp_server_ip}] "
		getresp "${_ftp_server_ip}"
		_ftp_server_ip=$resp
	done
d763 5
a767 7
	# Get server directory
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Server directory? [${_ftp_server_dir}] "
		getresp "${_ftp_server_dir}"
		_ftp_server_dir=$resp
	done
d769 3
a771 7
	# Get login name
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Login? [${_ftp_server_login}] "
		getresp "${_ftp_server_login}"
		_ftp_server_login=$resp 
	done
d773 9
a781 23
	# Get password
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Password? [${_ftp_server_password}] "
		getresp "${_ftp_server_password}"
		_ftp_server_password=$resp
	done

	# Get list of files for mget.
	cat << \__install_ftp_2

You will now be asked for files to extract.  Enter one file at a time.
When you are done entering files, enter 'done'.

__install_ftp_2
	echo "#!/bin/sh" > /tmp/ftp-script.sh
	echo "cd /mnt" >> /tmp/ftp-script.sh
	echo "ftp -i -n $_ftp_server_ip << \__end_commands" >> \
	    /tmp/ftp-script.sh
	echo "user $_ftp_server_login $_ftp_server_password" >> \
	    /tmp/ftp-script.sh
	echo "bin" >> /tmp/ftp-script.sh
	echo "cd $_ftp_server_dir" >> /tmp/ftp-script.sh
d783 23
a805 7
	resp=""		# force one interation
	while [ "X${resp}" != X"done" ]; do
		echo -n "File? [done] "
		getresp "done"
		if [ "X${resp}" = X"done" ]; then
			break
		fi
d807 4
a810 3
		_ftp_file=`echo ${resp} | cutword 1'`
		echo "get ${_ftp_file} |\"pax -r -z -v\"" >> \
		    /tmp/ftp-script.sh
d812 13
d826 2
a827 2
	echo "quit" >> /tmp/ftp-script.sh
	echo "__end_commands" >> /tmp/ftp-script.sh
d829 13
a841 4
	sh /tmp/ftp-script.sh
	rm -f /tmp/ftp-script.sh
	echo "Extraction complete."
}
d843 26
a868 16
install_from_mounted_fs() {
	# $1 - directory containing installation sets
	local _filename
	local _sets
	local _next
	local _f

	_sets=""
	if dir_has_sets $1 $THESETS; then
		for _f in $THESETS ; do
			if [ -f $1/${_f}.tar.gz ]; then
				_sets="$_sets ${_f}.tar.gz"
			elif [ -f $1/${_f}.tgz ]; then
				_sets="$_sets ${_f}.tgz"
			fi
		done
d870 20
a889 2
		echo "There are no OpenBSD install sets available in \"$1\""
		return
d892 17
a908 17
	while : ; do
		echo "The following sets are available for extraction:"
		echo "(marked sets have already been extracted)"
		echo ""

		_next=""
		for _f in $_sets ; do
			if isin $_f $_setsdone; then
				echo -n "[X] "
				_next=""
			else
				echo -n "    "
				if [ -z "$_next" ]; then _next=$_f; fi
			fi
			echo $_f
		done
		echo ""
d910 7
a916 6
		# Get the name of the file.
		if [ "X$_next" = "X" ]; then resp=n; else resp=y; fi
		echo -n "Continue extraction [$resp]?"
		getresp "$resp"
		if [ "$resp" = "n" ]; then
			break
d918 25
a942 11

		echo -n "File name [$_next]? "
		getresp "$_next"
		_f=$resp
		_filename="/$1/$_f"

		# Ensure file exists
		if [ ! -f $_filename ]; then
			echo "File $_filename does not exist.  Check to make"
			echo "sure you entered the information properly."
			continue
d944 1
d946 11
a956 4
		# Extract file
		cat $_filename | (cd /mnt; pax -r -pe -z )
		echo "Extraction complete."
		_setsdone="$_f $_setsdone"
d958 8
a965 2
	done
}
d967 7
a973 6
install_cdrom() {
	local _drive
	local _partition_range
	local _partition
	local _fstype
	local _directory
d975 17
a991 2
	# Get the cdrom device info
	cat << \__install_cdrom_1
d993 6
a998 2
The following CD-ROM devices are installed on your system; please select
the CD-ROM device containing the partition with the installation sets:
d1000 9
a1008 11
__install_cdrom_1
	_CDDEVS=`md_get_cddevs`
	echo    "$_CDDEVS"
	echo	""
	echo -n	"Which is the CD-ROM with the installation media? [abort] "
	getresp "abort"
	case "$resp" in
		abort)
			echo "Aborting."
			return
			;;
d1010 6
a1015 8
		*)
			if isin $resp $_CDDEVS ; then
				_drive=$resp
			else
				echo ""
				echo "The CD-ROM $resp does not exist."
				echo "Aborting."
				return
d1017 13
a1029 1
			;;
d1031 12
a1042 7

	# Get partition
	_partition_range=`md_get_partition_range`
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Partition? [c] "
		getresp "c"
d1044 2
a1045 8
			$_partition_range)
				_partition=$resp
				;;

			*)
				echo "Invalid response: $resp"
				resp=""		# force loop to repeat
				;;
d1047 8
a1054 1
	done
d1056 30
a1085 2
	# Ask for filesystem type
	cat << \__install_cdrom_2
d1087 8
a1094 3
There are two CD-ROM filesystem types currently supported by this program:
	1) ISO-9660 (cd9660)
	2) Berkeley Fast Filesystem (ffs)
d1096 7
a1102 9
__install_cdrom_2
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Which filesystem type? [cd9660] "
		getresp "cd9660"
		case "$resp" in
			cd9660|ffs)
				_fstype=$resp
				;;
d1104 2
a1105 6
			*)
				echo "Invalid response: $resp"
				resp=""		# force loop to repeat
				;;
		esac
	done
d1107 9
a1115 4
	# Mount the CD-ROM
	if ! mount -t ${_filesystem} -o ro \
	    /dev/${_drive}${_partition} /mnt2 ; then
		echo "Cannot mount CD-ROM drive.  Aborting."
d1117 2
a1118 1
	fi
d1120 22
a1141 6
	# Get the directory where the file lives
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo "Enter the directory relative to the mount point that"
		echo -n "contains the file. [${_directory}] "
		getresp "${_directory}"
a1142 1
	_directory=$resp
d1144 23
a1166 2
	install_from_mounted_fs /mnt2/${_directory}
	umount -f /mnt2 > /dev/null 2>&1
d1169 8
a1176 13
mount_a_disk() {
	# Mount a disk on /mnt2. The set of disk devices to choose from
	# is $_DKDEVS.
	# returns 0 on failure.

	local _drive
	local _partition_range
	local _partition
	local _fstype
	local _fsopts
	local _directory
	local _md_fstype
	local _md_fsopts
d1178 16
a1193 1
	getresp "abort"
d1195 160
a1354 1
		abort)
d1356 38
a1393 1
			return 0
d1397 2
a1398 8
			if isin $resp $_DKDEVS ; then
				_drive=$resp
			else
				echo ""
				echo "The disk $resp does not exist."
				echo "Aborting."
				return 0
			fi
d1401 8
d1410 30
a1439 10
	# Get partition
	_partition_range=`md_get_partition_range`
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Partition? [d] "
		getresp "d"
		case "$resp" in
			$_partition_range)
				_partition=$resp
				;;
d1441 11
a1451 6
			*)
				echo "Invalid response: $resp"
				resp=""		# force loop to repeat
				;;
		esac
	done
d1453 2
a1454 2
	# Ask for filesystem type
	cat << \__mount_a_disk_2
d1456 1
a1456 29
The following filesystem types are supported:
	1) ffs
__mount_a_disk_2
	_md_fstype=`md_native_fstype`
	_md_fsopts=`md_native_fsopts`
	if [ ! -z "$_md_fstype" ]; then
		echo "	2) $_md_fstype"
	else
		_md_fstype="_undefined_"
	fi
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Which filesystem type? [ffs] "
		getresp "ffs"
		case "$resp" in
			ffs)
				_fstype=$resp
				_fsopts="ro"
				;;
			$_md_fstype)
				_fstype=$resp
				_fsopts=$_md_fsopts
				;;
			*)
				echo "Invalid response: $resp"
				resp=""		# force loop to repeat
				;;
		esac
	done
d1458 17
a1474 4
	# Mount the disk
	if ! mount -t ${_fstype} -o $_fsopts \
	    /dev/${_drive}${_partition} /mnt2 ; then
		echo "Cannot mount disk.  Aborting."
d1477 61
a1537 1
	return 1
d1541 1
a1541 1
	local _directory
d1543 1
a1543 1
	cat << \__install_disk_1
d1548 5
a1552 5
__install_disk_1
	_DKDEVS=`md_get_diskdevs`
	echo    "$_DKDEVS"
	echo	""
	echo -n	"Which is the disk with the installation sets? [abort] "
d1554 3
a1556 3
	if mount_a_disk ; then
		return
	fi
d1558 8
a1565 8
	# Get the directory where the file lives
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo "Enter the directory relative to the mount point that"
		echo -n "contains the file. [${_directory}] "
		getresp "${_directory}"
	done
	_directory=$resp
d1567 2
a1568 2
	install_from_mounted_fs /mnt2/${_directory}
	umount -f /mnt2 > /dev/null 2>&1
d1572 74
a1645 7
	# Get the IP address of the server
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Server IP address? [${_nfs_server_ip}] "
		getresp "${_nfs_server_ip}"
	done
	_nfs_server_ip=$resp
d1647 8
a1654 7
	# Get server path to mount
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Filesystem on server to mount? [${_nfs_server_path}] "
		getresp "${_nfs_server_path}"
	done
	_nfs_server_path=$resp
d1656 5
a1660 3
	# Determine use of TCP
	echo -n "Use TCP transport (only works with capable NFS server)? [n] "
	getresp "n"
d1662 2
a1663 2
		y*|Y*)
			_nfs_tcp="-T"
d1667 2
a1668 1
			_nfs_tcp=""
d1671 1
d1673 5
a1677 5
	# Mount the server
	mkdir /mnt2 > /dev/null 2>&1
	if ! mount_nfs $_nfs_tcp ${_nfs_server_ip}:${_nfs_server_path} \
	    /mnt2 ; then
		echo "Cannot mount NFS server.  Aborting."
d1680 2
d1683 1
a1683 8
	# Get the directory where the file lives
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo "Enter the directory relative to the mount point that"
		echo -n "contains the file. [${_nfs_directory}] "
		getresp "${_nfs_directory}"
	done
	_nfs_directory=$resp
d1685 1
a1685 3
	install_from_mounted_fs /mnt2/${_nfs_directory}
	umount -f /mnt2 > /dev/null 2>&1
}
d1687 2
a1688 2
install_tape() {
	local _xcmd
d1690 23
a1712 2
	# Get the name of the tape from the user.
	cat << \__install_tape_1
d1714 2
a1715 2
The installation program needs to know which tape device to use.  Make
sure you use a "no rewind on close" device.
d1717 15
a1731 15
__install_tape_1
	_tape=`basename $TAPE`
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Name of tape device? [${_tape}]"
		getresp "${_tape}"
	done
	_tape=`basename $resp`
	TAPE="/dev/${_tape}"
	if [ ! -c $TAPE ]; then
		echo "$TAPE does not exist or is not a character special file."
		echo "Aborting."
		return
	fi
	export TAPE
d1733 5
a1737 8
	# Rewind the tape device
	echo -n "Rewinding tape..."
	if ! mt rewind ; then
		echo "$TAPE may not be attached to the system or may not be"
		echo "a tape device.  Aborting."
		return
	fi
	echo "done."
d1739 2
a1740 9
	# Get the file number
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "File number? "
		getresp ""
		case "$resp" in
			[1-9]*)
				_nskip=`expr $resp - 1`
				;;
d1742 30
a1771 3
			*)
				echo "Invalid file number ${resp}."
				resp=""		# fore loop to repeat
d1773 5
a1777 8
		esac
	done

	# Skip to correct file.
	echo -n "Skipping to source file..."
	if [ "X${_nskip}" != X"0" ]; then
		if ! mt fsf $_nskip ; then
			echo "Could not skip $_nskip files.  Aborting."
d1780 29
a1809 1
	echo "done."
d1811 1
a1811 1
	cat << \__install_tape_2
d1813 2
a1814 1
There are 2 different ways the file can be stored on tape:
d1816 1
a1816 2
	1) an image of a gzipped tar file
	2) a standard tar image
d1818 2
a1819 9
__install_tape_2
	resp=""		# force one iteration
	while [ "X${resp}" = X"" ]; do
		echo -n "Which way is it? [1] "
		getresp "1"
		case "$resp" in
		1)
			_xcmd="pax -r -pe -z"
			;;
d1821 2
a1822 3
		2)
			_xcmd="pax -r -pe"
			;;
d1824 2
a1825 13
		*)
			echo "Invalid response: $resp."
			resp=""		# force loop to repeat
			;;
		esac
		( cd /mnt; dd if=$TAPE | $_xcmd )
	done
	echo "Extraction complete."
}

get_timezone() {
	local _a
	local _zonepath
d1827 14
a1840 7
	#
	# If the zoneinfo is not on the installation medium or on the
	# installed filesystem, set TZ to GMT and return immediatly.
	#
	if [ ! -e /usr/share/zoneinfo -a ! -e /mnt/usr/share/zoneinfo ]; then
		TZ=GMT
		return
d1842 1
a1842 7
	if [ ! -d /usr/share/zoneinfo ]; then
		_zonepath=/mnt
	else
		_zonepath=""
	fi
		
cat << \__get_timezone_1
d1844 10
a1853 17
Select a time zone for your location. Timezones are represented on the
system by a directory structure rooted in "/usr/share/timezone". Most
timezones can be selected by entering a token like "MET" or "GMT-6".
Other zones are grouped by continent, with detailed zone information
separated by a slash ("/"), e.g. "US/Pacific".

To get a listing of what's available in /usr/share/zoneinfo, enter "?"
at the prompts below.

__get_timezone_1
	if [ X$TZ = X ]; then
		TZ=`ls -l /mnt/etc/localtime 2>/dev/null | cutlast`
		TZ=${TZ#/usr/share/zoneinfo/}
	fi
	while :; do
		echo -n	"What timezone are you in [\`?' for list] [$TZ]? "
		getresp "$TZ"
d1855 17
a1871 4
		"")
			echo "Timezone defaults to GMT"
			TZ="GMT"
			break;
d1873 13
a1885 2
		"?")
			ls ${_zonepath}/usr/share/zoneinfo
d1888 2
a1889 21
			_a=$resp
			while [ -d ${_zonepath}/usr/share/zoneinfo/$_a ]; do
				echo -n "There are several timezones available"
				echo " within zone '$_a'"
				echo -n "Select a sub-timezone [\`?' for list]: "
				getresp ""
				case "$resp" in
				"?") ls ${_zonepath}/usr/share/zoneinfo/$_a ;;
				*)	_a=${_a}/${resp}
					if [ -f ${_zonepath}/usr/share/zoneinfo/$_a ]; then
						break;
					fi
					;;
				esac
			done
			if [ -f ${_zonepath}/usr/share/zoneinfo/$_a ]; then
				TZ="$_a"
				echo "You have selected timezone \"$_a\"".
				break 2
			fi
			echo "'/usr/share/zoneinfo/$_a' is not a valid timezone on this system."
d1892 2
a1893 22
	done
}

install_sets()
{
	local _yup
	_yup="FALSE"

	# Ask the user which media to load the distribution from.
	cat << \__install_sets_1

It is now time to extract the installation sets onto the hard disk.
Make sure the sets are either on a local device (i.e. tape, CD-ROM) or on a
network server.

__install_sets_1

	if [ "X$local_sets_dir" != "X" ]; then
		install_from_mounted_fs ${local_sets_dir}
		if [ X"$_setsdone" != X ]; then
			_yup="TRUE"
		fi
d1896 2
a1897 34
	# Go on prodding for alternate locations
	resp=""		# force at least one iteration
	while [ X"${resp}" = X ]; do
		# If _yup is not FALSE, it means that we extracted sets above.
		# If that's the case, bypass the menu the first time.
		if [ X"$_yup" = X"FALSE" ]; then
			echo -n	"Install from (f)tp, (t)ape, (C)D-ROM, (N)FS"
			echo -n " or local (d)isk? "
			getresp ""
			case "$resp" in
			d*|D*)
				install_disk
				;;
			f*|F*)
				install_ftp
				;;
			t*|T*)
				install_tape
				;;
			c*|C*)
				install_cdrom
				;;
			n*|N*)
				install_nfs
				;;
			*)
				echo "Invalid response: $resp"
				resp=""
				;;
			esac
		else
			_yup="FALSE"	# So we'll ask next time
		fi

d1900 1
a1900 1
		echo	""
d1906 1
a1906 1
			resp=""
d1912 5
a1916 1
	done
d1919 25
a1943 31
munge_fstab()
{
	local _fstab
	local _fstab_shadow
	local _dev
	local _mp
	local _fstype
	local _rest

	# Now that the 'real' fstab is configured, we munge it into a 'shadow'
	# fstab which we'll use for mounting and unmounting all of the target
	# filesystems relative to /mnt.  Mount all filesystems.
	_fstab=$1
	_fstab_shadow=$2
	( while read _dev _mp _fstype _rest; do
		# Skip comment lines
		case "$_dev" in
			\#*)	continue;;
			*)	;;
		esac
		# and some filesystem types (like there are swap,kernfs,...)
		case "$_fstype" in
			ffs|ufs|nfs)	;;
			*)	continue;;
		esac
		if [ "$_mp" = "/" ]; then
			echo $_dev /mnt $_fstype $_rest
		else
			echo $_dev /mnt$_mp $_fstype $_rest
		fi
	    done ) < $_fstab > $_fstab_shadow
d1946 38
a1983 6
mount_fs()
{
	# Must mount filesystems manually, one at a time, so we can make
	# sure the mount points exist.
	# $1 is a file in fstab format
	local _fstab
d1985 10
d1996 6
d2003 5
a2007 1
	( while read line; do
d2009 20
a2028 19
		_dev=$1
		_mp=$2
		_fstype=$3
		_opt=$4

		# If not the root filesystem, make sure the mount
		# point is present.
		if [ "X{$_mp}" != X"/mnt" ]; then
			mkdir -p $_mp
		fi

		# Mount the filesystem.  If the mount fails, exit
		# with an error condition to tell the outer
		# later to bail.
		if ! mount -v -t $_fstype -o $_opt $_dev $_mp ; then
			# error message displated by mount
			exit 1
		fi
	done ) < $_fstab
d2030 7
a2036 2
	if [ "X${?}" != X"0" ]; then
		cat << \__mount_filesystems_1
d2038 3
a2040 4
FATAL ERROR:  Cannot mount filesystems.  Double-check your configuration
and restart the installation process.
__mount_filesystems_1
		exit
d2042 1
d2045 29
a2073 14
unmount_fs()
{
	# Unmount all filesystems and check their integrity.
	# Usage: [-fast] <fstab file>
	local _fast
	local _fstab
	local _pid

	if [ "$1" = "-fast" ]; then
		_fast=1
		_fstab=$2
	else
		_fast=0
		_fstab=$1
d2075 20
d2096 27
a2122 3
	if [ ! \( -f $_fstab -a -s $_fstab \) ]; then
		echo "fstab empty" > /dev/tty
		return
d2125 20
a2144 16
	if [ $_fast = 0 ]; then
		echo -n	"Syncing disks..."
		_pid=`twiddle`
		sync; sleep 4; sync; sleep 2; sync; sleep 2
		kill $_pid
		echo	"done."
	fi

	(
		_devs=""
		_mps=""
		# maintain reverse order
		while read line; do
			set -- $line
			_devs="$1 ${_devs}"
			_mps="$2 ${_mps}"
d2146 7
a2152 4
		echo -n "Umounting filesystems... "
		for _mp in ${_mps}; do
			echo -n "${_mp} "
			umount ${_mp}
d2154 14
a2167 1
		echo "Done."
d2169 17
a2185 11
		if [ $_fast = 0 ]; then
			exit
		fi
		echo "Checking filesystem integrity..."
		for _dev in ${_devs}; do
			echo  "${_dev}"
			fsck -f ${_dev}
		done
		echo "Done."
	) < $_fstab
}
d2187 4
a2190 5
check_fs()
{
	# Check filesystem integrity.
	# $1 is a file in fstab format
	local _fstab
d2192 1
a2192 1
	_fstab=$1
d2194 12
a2205 8
	(
		_devs=""
		_mps=""
		while read line; do
			set -- $line
			_devs="$1 ${_devs}"
			_mps="$2 ${_mps}"
		done
d2207 3
a2209 7
		echo "Checking filesystem integrity..."
		for _dev in ${_devs}; do
			echo  "${_dev}"
			fsck -f ${_dev}
		done
		echo "Done."
	) < $_fstab
@


1.3
log
@Add cvs tag, change tar to pax in a couple of places, tar is not on the
ramdisk image.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sub,v 1.3 1997/02/18 15:46:38 rahnds Exp $
d284 1
a284 1
	# replace it's entry.
@


1.2
log
@mvme68k, OpenBSD
@
text
@d2 1
d40 1
a40 1
#	NetBSD installation/upgrade script - common subroutines.
d658 1
a658 1
		cat $_filename | (cd /mnt; tar --unlink -zxvpf -)
d1014 1
a1014 1
			_xcmd="tar --unlink -zxvpf -"
d1018 1
a1018 1
			_xcmd="tar --unlink -xvpf -"
@


1.1
log
@Add new style of miniroot building. primarily based on the distrib/miniroot
code.
@
text
@d614 1
a614 1
		echo "There are no NetBSD install sets available in \"$1\""
@
