head	1.3;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2017.08.22.23.20.00;	author jsg;	state Exp;
branches;
next	1.2;
commitid	y0W66COXcCtaEczl;

1.2
date	2017.02.18.02.01.53;	author jsg;	state Exp;
branches;
next	1.1;
commitid	S2e6egyPi3vh53o8;

1.1
date	2017.01.23.02.24.00;	author patrick;	state Exp;
branches;
next	;
commitid	GzIHGrDhaxkkIgV1;


desc
@@


1.3
log
@Include Pine64 support in the install media now we can do so without boot0.
Tested by abieber@@
@
text
@#	$OpenBSD: Makefile,v 1.2 2017/02/18 02:01:53 jsg Exp $

REV=	${OSrev}

TOP=		${.CURDIR}/..

BSD_RD=		bsd.rd
IMAGE=		mr.fs
CBIN?=		instbin
CRUNCHCONF?=	${CBIN}.conf
CRUNCHCONFS?=	${.CURDIR}/../common/crunch.conf
LISTS=		${.CURDIR}/list
UTILS?=		${.CURDIR}/../../miniroot

MTREE=		${UTILS}/mtree.conf

DISKTYPE=	rdroot
MAKEFSARGS_RD=	-o disklabel=${DISKTYPE},minfree=0,density=4096

DIRS=\
	pine64 \
	rpi

.ifndef DESTDIR
all ${IMAGE}:
	@@echo setenv DESTDIR before making a ramdisk!
	@@false
.else

ALLBSD=		bsd
ALLBSDRD=	${BSD_RD}
all:	${ALLBSDRD}

bsd:
	cd ${TOP}/../../sys/arch/arm64/compile/RAMDISK && \
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && exec ${MAKE}'
	cp -p ${TOP}/../../sys/arch/arm64/compile/RAMDISK/obj/bsd bsd

${BSD_RD}: ${IMAGE} bsd rdsetroot
	cp bsd ${BSD_RD}
	${.OBJDIR}/rdsetroot ${BSD_RD} ${IMAGE}

${IMAGE}: ${CBIN}
	rm -rf $@@.d
	install -d -o root -g wheel $@@.d
.for DIR in ${DIRS}
	mkdir -p $@@.d/usr/mdec/${DIR}
.endfor
	mtree -def ${MTREE} -p $@@.d -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} REV=${REV} \
	    TARGDIR=$@@.d UTILS=${UTILS} RELEASEDIR=${RELEASEDIR} \
	    sh ${UTILS}/runlist.sh ${LISTS}
	rm $@@.d/${CBIN}
	makefs ${MAKEFSARGS_RD} $@@ $@@.d

.endif

rdsetroot:	${TOP}/../common/elfrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o rdsetroot \
	    ${TOP}/../common/elfrdsetroot.c ${TOP}/../common/elf32.c \
	    ${TOP}/../common/elf64.c

${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CRUNCHCONF}
	crunchgen -E -D ${.CURDIR}/../../.. -L ${DESTDIR}/usr/lib ${.ALLSRC}

${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk SRCLIBDIR=${.CURDIR}/../../../lib all

${CRUNCHCONF}: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CBIN}.conf

clean cleandir:
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}.cache \
	    lib*.a lib*.olist ${CBIN}.map \
	    *.o *.lo *.c ${ALLBSD} ${ALLBSDRD} rdsetroot
	rm -f instbin.conf
	rm -rf cd-dir ${IMAGE}.d

.ifdef RELEASEDIR
install:
	cp ${ALLBSDRD} ${RELEASEDIR}
.endif	# RELEASEDIR

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.2
log
@Add miniroot and ramdisk hooks for the Raspberry Pi 3.

Unlike the TI boot ROM the Broadcom one doesn't understand FAT12, only
FAT16 or FAT32.

The u-boot-aarch64 and raspberrypi-firmware packages are now required to
run make release on arm64.

ok patrick@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2017/01/23 02:24:00 patrick Exp $
d21 1
@


1.1
log
@Add support for creating RAMDISK kernels for arm64.  Based on
the armv7 code, but with the u-boot, device tree and mkuboot
bits stripped out.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2016/11/30 15:46:45 natano Exp $
d20 3
d45 3
@

