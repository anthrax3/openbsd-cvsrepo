head	1.33;
access;
symbols
	OPENBSD_6_1:1.31.0.4
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.28.0.8
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.4
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.6
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.27.0.6
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.27.0.2
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.24.0.10
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.8
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.6
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.4
	OPENBSD_5_0:1.24.0.2
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.18.0.6
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.4
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.15.0.2
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@# @;


1.33
date	2017.08.12.19.41.16;	author jasper;	state Exp;
branches;
next	1.32;
commitid	QPxp61z8DJilsNyP;

1.32
date	2017.06.03.22.25.19;	author deraadt;	state Exp;
branches;
next	1.31;
commitid	aQXKg2Eekxp6EbG1;

1.31
date	2016.12.30.22.32.25;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	l4qFJ05ajAQouLxi;

1.30
date	2016.12.08.10.44.01;	author natano;	state Exp;
branches;
next	1.29;
commitid	Z9owfdr8uO4E2S4q;

1.29
date	2016.10.14.18.44.19;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	SCMr9f2ZDRZiobIN;

1.28
date	2014.10.26.10.42.59;	author miod;	state Exp;
branches;
next	1.27;
commitid	WNYeOwdvf83NVNan;

1.27
date	2013.10.23.03.43.27;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2013.10.18.14.04.04;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2013.10.14.00.00.08;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.10.04.03.23;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2011.04.18.16.52.09;	author thib;	state Exp;
branches;
next	1.22;

1.22
date	2011.04.15.03.11.22;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2011.03.14.19.07.46;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.10.18.04.07.50;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2010.08.26.01.35.44;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2009.04.17.15.59.47;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.17.03.58.54;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.12.16.12.53;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.22.23.54.27;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.02.03.20.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.04.23.43.11;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.01.11.10.16.40;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.17.00.28.21;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.13.17.34.40;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.09.14.55.11;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.16.16.56.22;	author tsi;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.25.22.03.10;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.11.15.40.58;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.11.22.16.50;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.25.13.44.48;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.06.20.39.26;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.13.21.42.45;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.21.05.01;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.33
log
@always strip the ctf section from ramdisk kernels

discussed with deraadt@@ mpi@@
ok deraadt@@ kettenis@@ mpi@@
@
text
@#	$OpenBSD: Makefile,v 1.32 2017/06/03 22:25:19 deraadt Exp $

CBIN=		instbin
ARCHDIR=	${.CURDIR}/..
SRCDIR=		${.CURDIR}/../../..

.include <bsd.own.mk>

.if exists(${ARCHDIR}/Makefile.inc)
.include "${ARCHDIR}/Makefile.inc"
.endif

IMAGE?=		ramdisk${REV}.fs
CRUNCHGENOPTS?=-E
KERNEL?=	RAMDISK
UTILS?=		${.CURDIR}/../../miniroot

LISTS=		${ARCHDIR}/list ${.CURDIR}/list.local
MTREE=		${UTILS}/mtree.conf

LIF?=		lif${REV}.fs
CDROM?=		cd${REV}.iso
MKBOOT?=	/usr/mdec/mkboot
BOOT?=		${DESTDIR}/usr/mdec/boot
CDBOOT?=	${DESTDIR}/usr/mdec/cdboot

STRIP?=		strip
STRIPOPTS?=	-R .SUNW_ctf
GZIPCMD?=	gzip
GZIPFLAGS?=	-9n

DISKTYPE=	rdroot
MAKEFSARGS_RD=	-o disklabel=${DISKTYPE},minfree=0,density=4096

all:	bsd.rd ${LIF} ${CDROM}

${LIF}:	bsd ${BOOT}
	${MKBOOT} -v ${BOOT} bsd ${LIF}

${CDROM}: bsd ${CDBOOT}
	-rm -rf ${.OBJDIR}/cd-dir
	mkdir ${.OBJDIR}/cd-dir
	cp bsd.rd ${.OBJDIR}/cd-dir/bsd.rd
	mkhybrid -A "OpenBSD ${OSREV} hppa bootonly CD" \
	    -P "Copyright (c) `date +%Y` Theo de Raadt, The OpenBSD project" \
	    -p "Theo de Raadt <deraadt@@openbsd.org>" \
	    -V "OpenBSD/hppa ${OSREV} boot-only CD" \
	    -o ${.OBJDIR}/${CDROM} ${.OBJDIR}/cd-dir
	dd if=${CDBOOT} of=${.OBJDIR}/${CDROM} bs=32k count=1 conv=notrunc
	dd if=/dev/zero bs=64k count=1 >> ${.OBJDIR}/${CDROM}

obsd:
	cd ${SRCDIR}/sys/arch/${MACHINE}/compile/${KERNEL} && \
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && exec ${MAKE}'
	cp -p ${SRCDIR}/sys/arch/${MACHINE}/compile/${KERNEL}/obj/bsd obsd

bsd.rd:	obsd ${IMAGE} rdsetroot
	cp obsd bsd.rd
	${.OBJDIR}/rdsetroot bsd.rd ${IMAGE}
	${STRIP} ${STRIPOPTS} bsd.rd

bsd:	bsd.rd
	(cat bsd.rd ; dd if=/dev/zero count=1) | ${GZIPCMD} ${GZIPFLAGS} > bsd

rdsetroot: ${.CURDIR}/../../common/elfrdsetroot.c \
	   ${.CURDIR}/../../common/elf32.c ${.CURDIR}/../../common/elf64.c
	${HOSTCC} ${HOSTCCFLAGS} -o rdsetroot \
	    ${.CURDIR}/../../common/elfrdsetroot.c \
	    ${.CURDIR}/../../common/elf32.c ${.CURDIR}/../../common/elf64.c

${IMAGE}: ${CBIN}
	rm -rf $@@.d
	install -d -o root -g wheel $@@.d
	mtree -def ${MTREE} -p $@@.d -u
	CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} REV=${REV} ARCHDIR=${ARCHDIR} \
	    TARGDIR=$@@.d UTILS=${UTILS} RELEASEDIR=${RELEASEDIR} \
	    sh ${UTILS}/runlist.sh ${LISTS}
	rm $@@.d/${CBIN}
	makefs ${MAKEFSARGS_RD} $@@ $@@.d
	vnconfig -v -c vnd0 $@@
	df -i /dev/vnd0a
	vnconfig -u vnd0

${CBIN}.conf: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CBIN}.conf

${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CBIN}.conf
	crunchgen ${CRUNCHGENOPTS} -D ${SRCDIR} -L ${DESTDIR}/usr/lib \
	    ${CBIN}.conf

${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk SRCLIBDIR=${.CURDIR}/../../../lib all

clean cleandir:
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}.cache \
	    lib*.a lib*.olist ${CBIN}.map \
	    ${CBIN}.conf *.o *.lo *.c obsd bsd bsd.* ${LIF} ${CDROM}
	/bin/rm -rf ${IMAGE}.d

.ifdef RELEASEDIR
beforeinstall:
	cp bsd.rd ${LIF} ${CDROM} ${RELEASEDIR}
	chmod a+r ${RELEASEDIR}/bsd.rd
.endif

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.32
log
@kernels in compile dirs are readonly, and the bsd.rd we created has
tracked that permission.  Make the copy in $RELEASEDIR a+r
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2016/12/30 22:32:25 deraadt Exp $
d28 1
d60 1
a60 1
	@@${STRIP} bsd.rd
@


1.31
log
@Install cert.pem + ftp(1) binary that supports SSL, so the install script
can perform https fetches.  While non-critical for sets (which are verified
using signify), it is an uplift for communication towards the ftp.openbsd.org
cgi which provides mirror proposals, entropy seeds, and current time.
[The install script changes are not included in this commit]
ok beck jsing rpe
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 2016/12/08 10:44:01 natano Exp $
d102 1
@


1.30
log
@Use makefs to build bsd.rd; build & boot tested by krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2016/10/14 18:44:19 deraadt Exp $
d79 3
@


1.29
log
@Use new kernel compile method for ramdisks, de-escalating to $BUILDUSER
as required.
much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2014/10/26 10:42:59 miod Exp $
a12 7
MOUNT_POINT?=	/mnt
VND?=		vnd0
VND_DEV=	/dev/${VND}a
VND_RDEV=	/dev/r${VND}a
DISKTYPE=	rdroot
PID!=		echo $$$$
REALIMAGE!=	echo /var/tmp/image.${PID}
a13 2
IMAGESIZE?=	4608 # 2.25MB in 512 byte blocks
NEWFS_WILL_FAIL?=false
d31 2
a32 3
# old format, minfree, opt, b/i  trks, sects, cpg
NEWFSOPTS=	-t ffs -m 0 -o space -f 1024 -b 8192
NEWFSOPTS_RD?=	${NEWFSOPTS} -i 4096 -s ${IMAGESIZE}
d71 8
a78 17
	dd if=/dev/zero of=${REALIMAGE} count=${IMAGESIZE}
	vnconfig -v -c ${VND} ${REALIMAGE}
	disklabel -w ${VND} ${DISKTYPE}
	newfs ${NEWFSOPTS_RD} ${VND_RDEV} || ${NEWFS_WILL_FAIL}
	mount ${VND_DEV} ${MOUNT_POINT}
	mtree -def ${MTREE} -p ${MOUNT_POINT}/ -u
	REV=${REV} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} \
	    ARCHDIR=${ARCHDIR} TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    RELEASEDIR=${RELEASEDIR} sh ${UTILS}/runlist.sh ${LISTS}
	rm ${MOUNT_POINT}/${CBIN}
	@@echo ""
	@@df -i ${MOUNT_POINT}
	@@echo ""
	umount ${MOUNT_POINT}
	vnconfig -u ${VND_DEV}
	cp ${REALIMAGE} ${IMAGE}
	rm ${REALIMAGE}
d94 1
a99 5

unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}
	-/bin/rm -f ${REALIMAGE}
@


1.28
log
@Append 512 bytes of zero to the kernel image intended to be put into lif.fs,
so that valid bytes exist at the end of the kernel image.

Since the lif image stores files size in 256-byte unit, we can not report EOF
while reading the kernel image until the remainder of the 256-byte sector has
been read. But these zero bytes would cause the gzip readahead machinery in
libsa to believe the kernel is followed by an uncompressed file, and switch to
transparent mode, preventing backwards seeks into the kernel image from working.

This fixes the ``read section header string table failed(0)'' errors when
attempting to boot lif.fs since loadfile_elf.c 1.9.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2013/10/23 03:43:27 deraadt Exp $
a61 1
	cd ${SRCDIR}/sys/arch/${MACHINE}/conf && config ${KERNEL}
d63 2
a64 2
	    ${MAKE} clean && exec ${MAKE}
	cp ${SRCDIR}/sys/arch/${MACHINE}/compile/${KERNEL}/bsd obsd
@


1.27
log
@fix typo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2013/10/18 14:04:04 deraadt Exp $
d73 1
a73 1
	${GZIPCMD} ${GZIPFLAGS} < bsd.rd > bsd
@


1.26
log
@cleanup elfrdsetroot references; ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2013/10/14 00:00:08 guenther Exp $
d78 1
a79 1
	    ${.CURDIR}/../../common/elfrdsetroot.c
@


1.25
log
@Turn on the distrib lib bits in crunchgen by setting SRCLIBDIR.
Add the new files to the clean target's rm list.

"why not get it tested?" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2011/07/10 04:03:23 deraadt Exp $
a22 2
RDSETROOT?=	elfrdsetroot
RDSETROOT_EXT_SRC=${.CURDIR}/../../common/elf32.c ${.CURDIR}/../../common/elf64.c
d67 1
a67 1
bsd.rd:	obsd ${IMAGE} ${RDSETROOT}
d69 1
a69 1
	${.OBJDIR}/${RDSETROOT} bsd.rd ${IMAGE}
d75 5
a79 3
${RDSETROOT}: ${.CURDIR}/../../common/${RDSETROOT}.c ${RDSETROOT_EXT_SRC}
	${HOSTCC} ${HOSTCCFLAGS} -o ${RDSETROOT} ${RDSETROOT_EXT_SRC} \
	    ${.CURDIR}/../../common/${RDSETROOT}.c
@


1.24
log
@match latest change by distrib/ramdisk, for extra elfrdsetroot files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2011/04/18 16:52:09 thib Exp $
d108 1
a108 1
	${MAKE} -f ${CBIN}.mk all
d112 1
@


1.23
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2011/04/15 03:11:22 deraadt Exp $
d24 1
d77 3
a79 2
${RDSETROOT}: ${.CURDIR}/../../common/${RDSETROOT}.c
	${HOSTCC} ${HOSTCCFLAGS} -o ${RDSETROOT} $<
@


1.22
log
@No need to make depend kernels; ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2011/03/14 19:07:46 deraadt Exp $
d14 1
a14 1
VND?=		svnd0
@


1.21
log
@unify a chunk
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2010/10/18 04:07:50 deraadt Exp $
d65 1
a65 1
	    ${MAKE} clean && ${MAKE} depend && ${MAKE}
@


1.20
log
@Place a smaller spwd.db onto the install media.  Be consistant with the naming
of the "additional" list files (for architectures which split the list)
Then... cleanup some TZ which it is clear should not have been placed onto
certain media which don't have the space for them.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2010/08/26 01:35:44 krw Exp $
d110 1
a110 1
	${CBIN}.conf *.o *.lo *.c obsd bsd bsd.* ${LIF} ${CDROM}
@


1.19
log
@Since Aug 2008, the kernel can successfully read the 1 block (512
byte) disklabels even in the midst of a larger sector. E.g. in bytes
512 - 1023 of the first 2048 byte sector on a CD.

On hppa we plopped down such a disklabel on cdXX.iso and installXX.iso.
Once accessible it took precedence over the spoofed label of the CD. Chaos
ensued. Since there is currently no reason for this label on hppa
cd's, eradicate it and its disktab entry. cdXX.iso/installXX.iso can now
be mounted on hppa again.

Also remove a commented out label plopping on Alpha, which references a
non-existant disktab entry.

Problem noted and exact diff creating problem discovered by marco@@.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2009/04/17 15:59:47 deraadt Exp $
d28 1
a28 1
LISTS=		${ARCHDIR}/list ${.CURDIR}/list
@


1.18
log
@further minor unification
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2009/04/17 03:58:54 deraadt Exp $
a59 3
	vnconfig -v -c ${VND} ${.OBJDIR}/${CDROM}
	disklabel -w ${VND} fakecdrom "OpenBSD/hppa    "
	vnconfig -u ${VND}
@


1.17
log
@For SHA256 hashes to be ready to go onto the install media, we must
build the sets before we build the media.  While there we can get rid
of DESTDIR/snapshot too, and simply install straight into RELEASEDIR.
(This also ends up saving an astounding amount of traffic/latency in a nfs
environment)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2009/04/12 16:12:53 deraadt Exp $
d19 1
a19 1
REALIMAGE!=	echo /tmp/image.${PID}
@


1.16
log
@run make depend for kernel, too; ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2008/12/22 23:54:27 deraadt Exp $
d89 3
a91 2
	REV=${REV} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} ARCHDIR=${ARCHDIR} \
	    TARGDIR=${MOUNT_POINT} UTILS=${UTILS} sh ${UTILS}/runlist.sh ${LISTS}
d115 1
d117 2
a118 3
	cp bsd.rd ${DESTDIR}/snapshot
	cp ${LIF} ${DESTDIR}/snapshot
	cp ${CDROM} ${DESTDIR}/snapshot
@


1.15
log
@do not use the DESTDIR mkboot binary
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2008/12/02 03:20:57 deraadt Exp $
d68 1
a68 1
	    ${MAKE} depend && ${MAKE} clean && ${MAKE}
@


1.14
log
@commit with rdsetroot now accepting the filesystem as a 2nd arg
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2008/03/04 23:43:11 deraadt Exp $
d33 1
a33 1
MKBOOT?=	${DESTDIR}/usr/mdec/mkboot
@


1.13
log
@bsd.rd's physical memory usage collided with the bootblocks...  The
bootblocks have been moved, but we want 4.2 to be upgradeable.  So
reduce the footprint of the bsd.rd by shrinking the ramdisk filesystem
because it is way too large.  tested by sthen and kettenis
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2008/01/11 10:16:40 espie Exp $
d73 1
a73 1
	${.OBJDIR}/${RDSETROOT} bsd.rd < ${IMAGE}
@


1.12
log
@cleanup: make -> ${MAKE} consistenly.
zap extra subshells.

okay miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2007/06/17 00:28:21 deraadt Exp $
d21 1
a21 1
IMAGESIZE?=	5120 # 2.5MB in 512 byte blocks
@


1.11
log
@Stop using disklabel -r.  The disklabel code does not know all the semantics
for pushing disklabels onto the disk (and besides that, it is buggy and
unreadable crap); thanks for help from krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2007/04/13 17:34:40 millert Exp $
d68 1
a68 1
	    make depend && make clean && make
d108 1
a108 1
	make -f ${CBIN}.mk all
@


1.10
log
@Update install media generation to the new semantics of the -c flag.
Also replace "newfs -O" with "newfs -O 0" now that -O takes an option.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2007/04/09 14:55:11 millert Exp $
d85 1
a85 1
	disklabel -w ${RAWLABEL} ${VND} ${DISKTYPE}
@


1.9
log
@Add -n to gzip flags.  Save a few bytes since we no longer save
the uncompressed filename in the gzip header.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2007/02/16 16:56:22 tsi Exp $
d43 1
a43 1
NEWFSOPTS_RD?=	${NEWFSOPTS} -i 4096 -c 64 -s ${IMAGESIZE}
@


1.8
log
@s/GZIP/GZIPCMD/g in `make release` structure to avoid conflict with gzip's
use of a GZIP environment variable for extra command flags.

ok deraadt@@, millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2005/03/25 22:03:10 mickey Exp $
d39 1
a39 1
GZIPFLAGS?=	-9
@


1.7
log
@a quick fix -- pad image w/ extra 64k until boot can cope w/ short reads
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2005/03/11 15:40:58 deraadt Exp $
d38 1
a38 1
GZIP?=		gzip
d77 1
a77 1
	${GZIP} ${GZIPFLAGS} < bsd.rd > bsd
@


1.6
log
@never worry about the copyright date on the CD layout again, problem
noticed by drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2004/03/11 22:16:50 deraadt Exp $
d63 1
@


1.5
log
@change copyrights on iso images, spotted by miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2003/07/25 13:44:48 mickey Exp $
d55 1
a55 1
	    -P "Copyright (c) 2004 Theo de Raadt, The OpenBSD project" \
@


1.4
log
@for no apparent reason we ran out of inodes
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2003/05/06 20:39:26 mickey Exp $
d55 1
a55 1
	    -P "Copyright (c) 2003 Theo de Raadt, The OpenBSD project" \
@


1.3
log
@this builds a bootable cdrom w/ a ramdisk kernel. has some problems though
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2003/02/13 21:42:45 mickey Exp $
d43 1
a43 1
NEWFSOPTS_RD?=	${NEWFSOPTS} -i 16384 -c 64 -s ${IMAGESIZE}
@


1.2
log
@no mdec/boot on the ramdisk. name it chewable for the etc/makefiles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2003/01/30 21:05:01 mickey Exp $
a26 1
STRIP?=		strip
d32 1
d35 1
d37 1
d45 1
a45 1
all:	bsd.rd ${LIF}
d47 1
a47 1
${LIF}:	bsd ${BOOT} ${BOOTXX}
d50 14
d73 1
a73 1
	${STRIP} bsd.rd
d111 1
a111 1
	${CBIN}.conf *.o *.lo *.c obsd bsd bsd.* ${LIF}
d116 1
@


1.1
log
@this allows to build a ramdiskNN.lif
@
text
@d1 1
a1 1
#	$OpenBSD$
d32 1
a32 1
FLOPPY?=	ramdisk${REV}.lif
d43 1
a43 1
all:	bsd.rd ${FLOPPY}
d45 2
a46 2
${FLOPPY}:	bsd ${BOOT} ${BOOTXX}
	${MKBOOT} -v ${BOOT} bsd ${FLOPPY}
d95 1
a95 1
	${CBIN}.conf *.o *.lo *.c obsd bsd bsd.*
d99 1
a99 1
	cp ${FLOPPY} ${DESTDIR}/snapshot
@

