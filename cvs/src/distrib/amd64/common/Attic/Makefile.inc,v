head	1.30;
access;
symbols
	OPENBSD_6_0:1.28.0.4
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.26.0.8
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.25.0.2
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.21.0.4
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.14.0.8
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@# @;


1.30
date	2016.10.19.16.49.58;	author deraadt;	state dead;
branches;
next	1.29;
commitid	ogq7NAu1pKQq1JRd;

1.29
date	2016.10.14.18.44.19;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	SCMr9f2ZDRZiobIN;

1.28
date	2015.09.07.01.41.35;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	jcZERL4IVySX2Kqa;

1.27
date	2015.09.06.19.35.19;	author kettenis;	state Exp;
branches;
next	1.26;
commitid	vHRBuEPOSUdtO9Kz;

1.26
date	2014.03.29.17.31.40;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2014.03.02.15.57.34;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2014.01.19.04.11.44;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2013.10.15.22.46.48;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2013.10.14.00.00.07;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2013.01.29.19.42.52;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2012.10.15.06.31.14;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2012.10.12.14.07.46;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.09.00.42.48;	author drahn;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.08.21.39.32;	author drahn;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.18.16.52.09;	author thib;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.15.03.11.22;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2009.04.17.03.58.54;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.02.03.20.57;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.02.01.01.07;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.11.10.16.40;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.09.12.48.07;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.27.13.39.00;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.17.00.28.21;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.19.15.52.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.25.21.40.35;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.13.17.34.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.09.14.55.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.27.16.53.24;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.22.00.24.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.07.21.16.47;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Unshare Makefile.inc so we can determine how to squeeze makefs
into the picture.
ok natano
@
text
@#	$OpenBSD: Makefile.inc,v 1.29 2016/10/14 18:44:19 deraadt Exp $

TOP=		${.CURDIR}/..

.include "${TOP}/Makefile.inc"
IMAGE=		mr.fs
CBIN?=		instbin
CRUNCHCONF?=	${CBIN}.conf
LISTS?=		${.CURDIR}/../common/list
UTILS?=		${.CURDIR}/../../miniroot

MOUNT_POINT=	/mnt
MTREE=		${UTILS}/mtree.conf

XNAME?=		floppy
FS?=		${XNAME}${REV}.fs
VND?=		vnd0
VND_DEV=	/dev/${VND}a
VND_RDEV=	/dev/r${VND}a
VND_CRDEV=	/dev/r${VND}c
VND_IDEV=	/dev/${VND}i
VND_IRDEV=	/dev/r${VND}i
PID!=		echo $$$$
REALIMAGE!=	echo /var/tmp/image.${PID}
BOOT?=		${DESTDIR}/usr/mdec/boot
EFIBOOT?=	${DESTDIR}/usr/mdec/BOOTX64.EFI ${DESTDIR}/usr/mdec/BOOTIA32.EFI
FLOPPYSIZE?=	2880
FLOPPYTYPE?=	floppy3

all:	${FS}

${FS}:	bsd.gz
	dd if=/dev/zero of=${REALIMAGE} bs=512 count=${FLOPPYSIZE}
	vnconfig -v -c ${VND} ${REALIMAGE}
.ifdef LBA
	fdisk -yi -l ${FLOPPYSIZE} -b 960 -f ${DESTDIR}/usr/mdec/mbr ${VND}
.endif
.ifdef TEMPLATE
	disklabel -wAT ${TEMPLATE} ${VND}
	newfs -t msdos ${VND_IRDEV}
	mount ${VND_IDEV} ${MOUNT_POINT}
	mkdir -p ${MOUNT_POINT}/efi/boot
	cp ${EFIBOOT} ${MOUNT_POINT}/efi/boot
	umount ${MOUNT_POINT}
.else
	disklabel -w ${VND} ${FLOPPYTYPE}
.endif
	newfs -m 0 -o space -i 524288 -c ${FLOPPYSIZE} ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}
	cp ${BOOT} ${.OBJDIR}/boot
	strip ${.OBJDIR}/boot
	strip -R .comment ${.OBJDIR}/boot
	installboot -v -r ${MOUNT_POINT} ${VND_CRDEV} \
	    ${DESTDIR}/usr/mdec/biosboot ${.OBJDIR}/boot
	dd if=bsd.gz of=${MOUNT_POINT}/bsd bs=512
	@@echo ""
	@@df -i ${MOUNT_POINT}
	@@echo ""
	umount ${MOUNT_POINT}
	vnconfig -u ${VND}
	cp ${REALIMAGE} ${FS}
	rm ${REALIMAGE}

DISKTYPE?=       rdroot
NBLKS?=          4480
# minfree, opt, b/i  trks, sects, cpg
NEWFSARGS= -m 0 -o space -i 4096

bsd.gz: bsd.rd
	cp bsd.rd bsd.strip
	strip bsd.strip
	strip -R .comment bsd.strip
	gzip -c9n bsd.strip > bsd.gz

bsd.rd:	${IMAGE} bsd rdsetroot
	cp bsd bsd.rd
	${.OBJDIR}/rdsetroot bsd.rd ${IMAGE}


bsd:
	cd ${.CURDIR}/../../../sys/arch/amd64/compile/${RAMDISK} && \
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && env COPTS=-Os ${MAKE}'
	cp -p ${.CURDIR}/../../../sys/arch/amd64/compile/${RAMDISK}/obj/bsd bsd

${IMAGE}: ${CBIN} rd_setup do_files rd_teardown

rd_setup: ${CBIN}
	dd if=/dev/zero of=${REALIMAGE} bs=512 count=${NBLKS}
	vnconfig -v -c ${VND} ${REALIMAGE}
	disklabel -w ${VND} ${DISKTYPE}
	newfs ${NEWFSARGS} ${VND_RDEV}
	fsck ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}

rd_teardown:
	@@df -i ${MOUNT_POINT}
	-umount ${MOUNT_POINT}
	-vnconfig -u ${VND}
	cp ${REALIMAGE} ${IMAGE}
	rm ${REALIMAGE}

rdsetroot:	${TOP}/../common/elfrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o rdsetroot \
	    ${TOP}/../common/elfrdsetroot.c ${TOP}/../common/elf32.c \
	    ${TOP}/../common/elf64.c

unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}

.PRECIOUS:	${IMAGE}

.ifdef RELEASEDIR
install:
.ifndef NOBSDRD
	cp bsd.rd ${RELEASEDIR}/bsd.rd
.endif
.ifndef NOFS
	cp ${FS} ${RELEASEDIR}/${FS}
.endif
.endif	# RELEASEDIR

${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CRUNCHCONF}
	crunchgen -E -D ${BSDSRCDIR} -L ${DESTDIR}/usr/lib \
	-c ${CBIN}.c -e ${CBIN} -m ${CBIN}.mk ${CRUNCHCONF}

${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk SRCLIBDIR=${.CURDIR}/../../../lib all
	strip -R .comment ${CBIN}

${CRUNCHCONF}: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CRUNCHCONF}

do_files:
	mtree -def ${MTREE} -p ${MOUNT_POINT}/ -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} \
	    REV=${REV} TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    RELEASEDIR=${RELEASEDIR} sh ${UTILS}/runlist.sh ${LISTS}
	rm ${MOUNT_POINT}/${CBIN}

clean cleandir:
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}*.cache \
	    *.o *.lo *.c bsd bsd.rd bsd.gz bsd.strip floppy*.fs \
	    lib*.a lib*.olist ${CBIN}.map \
	    rdsetroot boot ${CRUNCHCONF} ${FS}

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.29
log
@Use new kernel compile method for ramdisks, de-escalating to $BUILDUSER
as required.
much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.28 2015/09/07 01:41:35 deraadt Exp $
@


1.28
log
@also install BOOTIA32.EFI
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27 2015/09/06 19:35:19 kettenis Exp $
a80 1
	cd ${.CURDIR}/../../../sys/arch/amd64/conf && config ${RAMDISK}
d82 2
a83 2
	    ${MAKE} clean && COPTS=-Os exec ${MAKE}
	cp ${.CURDIR}/../../../sys/arch/amd64/compile/${RAMDISK}/bsd bsd
@


1.27
log
@Use the new fdisk -b functionality to put an EFI system partition on the
minirootXX.fs image and put the new UEFI bootloader on there.

Stop relying on /etc/disktab for the partition layout.  Instead use a suitable
template and let disklabel(8) allocate all remaining free space to the 'a'
partition.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.26 2014/03/29 17:31:40 deraadt Exp $
d26 1
a26 1
EFIBOOT?=	${DESTDIR}/usr/mdec/BOOTX64.EFI
@


1.26
log
@Place kernel after running installboot, because this makes overflow
easier to calculate.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.25 2014/03/02 15:57:34 deraadt Exp $
d21 2
d26 1
d36 1
a36 1
	fdisk -yi -l ${FLOPPYSIZE} -f ${DESTDIR}/usr/mdec/mbr ${VND}
d38 8
d47 1
@


1.25
log
@Build a (USB or other disk) miniroot, which can be dd'd and booted since
it is in LBA form.
Work by chris@@, integration methodology proposed by me.  Needs improvements
after release..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.24 2014/01/19 04:11:44 jsing Exp $
a40 1
	dd if=bsd.gz of=${MOUNT_POINT}/bsd bs=512
d43 1
@


1.24
log
@Use the new installboot when building amd64 media.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.23 2013/10/15 22:46:48 deraadt Exp $
d32 3
@


1.23
log
@We do not produce "core" files, so they do not need to be deleted.  they
have been *.core files for a very long time.  That's a lot of unlink()
calls saved.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.22 2013/10/14 00:00:07 guenther Exp $
a37 1
	dd if=${.OBJDIR}/boot of=${MOUNT_POINT}/boot bs=512
d39 2
a40 2
	/usr/mdec/installboot -v ${MOUNT_POINT}/boot \
	    ${DESTDIR}/usr/mdec/biosboot ${VND_CRDEV}
@


1.22
log
@Turn on the distrib lib bits in crunchgen by setting SRCLIBDIR.
Add the new files to the clean target's rm list.

"why not get it tested?" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.21 2013/01/29 19:42:52 miod Exp $
d129 1
a129 1
	/bin/rm -f core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}*.cache \
@


1.21
log
@Remove short-circuit build stuff that went in by accident in 1.17; drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.20 2012/10/15 06:31:14 deraadt Exp $
d115 1
a115 1
	${MAKE} -f ${CBIN}.mk all
d131 1
@


1.20
log
@make clean target should rm boot too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.19 2012/10/12 14:07:46 jsing Exp $
d69 1
a69 2
	    COPTS=-Os exec ${MAKE}
#	    ${MAKE} clean && COPTS=-Os exec ${MAKE}
@


1.19
log
@Use fdboot for amd64 floppy disk media.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.17 2011/07/08 21:39:32 drahn Exp $
d131 2
a132 2
	    *.o *.lo *.c bsd bsd.rd bsd.gz bsd.strip floppy*.fs rdsetroot \
	    ${CRUNCHCONF}
@


1.18
log
@Unbreak most archs for the last commit. cut and paste changed rdsetroot
to elfrdsetroot. Does not yet fix sparc
@
text
@d23 1
a23 1
BOOT=		${DESTDIR}/usr/mdec/boot
@


1.17
log
@Allow the elf rdsetroot operation to function on 32 bit and 64 bit binaries.
Enables developers to build arm ramdisk kernels on amd64 archs
OK deraadt@@ 'looked fine' miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.16 2011/04/18 16:52:09 thib Exp $
d91 1
a91 1
	${HOSTCC} ${HOSTCFLAGS} -o elfrdsetroot \
@


1.16
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 2011/04/15 03:11:22 deraadt Exp $
d69 2
a70 1
	    ${MAKE} clean && COPTS=-Os exec ${MAKE}
d91 3
a93 1
	${HOSTCC} -o rdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.15
log
@No need to make depend kernels; ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 2009/04/17 03:58:54 deraadt Exp $
d17 1
a17 1
VND?=		svnd0
@


1.14
log
@For SHA256 hashes to be ready to go onto the install media, we must
build the sets before we build the media.  While there we can get rid
of DESTDIR/snapshot too, and simply install straight into RELEASEDIR.
(This also ends up saving an astounding amount of traffic/latency in a nfs
environment)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.13 2008/12/02 03:20:57 deraadt Exp $
d69 1
a69 1
	    ${MAKE} clean && ${MAKE} depend && COPTS=-Os ${MAKE}
@


1.13
log
@commit with rdsetroot now accepting the filesystem as a 2nd arg
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 2008/12/02 01:01:07 deraadt Exp $
d98 1
d101 1
a101 1
	cp bsd.rd ${DESTDIR}/snapshot/bsd.rd
d104 1
a104 1
	cp ${FS} ${DESTDIR}/snapshot/${FS}
d106 1
d123 1
a123 1
	    sh ${UTILS}/runlist.sh ${LISTS}
@


1.12
log
@no longer need to compile rdsetroot with DEBUG
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2008/01/11 10:16:40 espie Exp $
d63 1
a63 1
	${.OBJDIR}/rdsetroot bsd.rd < ${IMAGE}
@


1.11
log
@cleanup: make -> ${MAKE} consistenly.
zap extra subshells.

okay miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2007/08/09 12:48:07 deraadt Exp $
d90 1
a90 1
	${HOSTCC} -DDEBUG -o rdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.10
log
@do not install the cdromXX.fs file, it is useless
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2007/07/27 13:39:00 deraadt Exp $
d69 1
a69 1
	    make clean && make depend && COPTS=-Os make
d111 1
a111 1
	make -f ${CBIN}.mk all
@


1.9
log
@grow ramdisk filesystem size
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2007/06/17 00:28:21 deraadt Exp $
d102 1
d104 1
@


1.8
log
@Stop using disklabel -r.  The disklabel code does not know all the semantics
for pushing disklabels onto the disk (and besides that, it is buggy and
unreadable crap); thanks for help from krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2007/05/19 15:52:31 millert Exp $
d51 1
a51 1
NBLKS?=          4096
@


1.7
log
@Make FLOPPYSIZE be in terms of 512 byte blocks like all the other ports.
This was something I missed in the initial "newfs -c" conversion.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2007/04/25 21:40:35 deraadt Exp $
d32 1
a32 1
	disklabel -w -r ${VND} ${FLOPPYTYPE}
d77 1
a77 1
	disklabel -w -r ${VND} ${DISKTYPE}
@


1.6
log
@grow ramdisk mr.fs size, it is needed
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2007/04/13 17:34:40 millert Exp $
d24 1
a24 1
FLOPPYSIZE?=	144
d30 1
a30 1
	dd if=/dev/zero of=${REALIMAGE} bs=10k count=${FLOPPYSIZE}
@


1.5
log
@Update install media generation to the new semantics of the -c flag.
Also replace "newfs -O" with "newfs -O 0" now that -O takes an option.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2007/04/09 14:55:11 millert Exp $
d51 1
a51 1
NBLKS?=          3584
@


1.4
log
@Add -n to gzip flags.  Save a few bytes since we no longer save
the uncompressed filename in the gzip header.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2004/02/27 16:53:24 deraadt Exp $
d33 1
a33 1
	newfs -m 0 -o space -i 524288 -c 80 ${VND_RDEV}
d53 1
a53 1
NEWFSARGS= -m 0 -o space -c 16 -i 4096
@


1.3
log
@crank ramdisk to 3584
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2004/02/22 00:24:43 deraadt Exp $
d59 1
a59 1
	gzip -c9 bsd.strip > bsd.gz
@


1.2
log
@boot floppy support.  unfortunately for now because of how the sets and
lists and disktab work, we are constrained, and a few things must go
missing until we seperate that out.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 2004/02/07 21:16:47 deraadt Exp $
d51 1
a51 1
NBLKS?=          3510
@


1.1
log
@first cut; most written by mickey, couple tunings by me
@
text
@d1 1
a1 1
#	$OpenBSD$
d51 1
a51 1
NBLKS?=          4096
@

