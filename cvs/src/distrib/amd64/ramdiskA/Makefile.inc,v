head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2017.08.13.15.41.30;	author jasper;	state Exp;
branches;
next	1.5;
commitid	Zfv9pmF8993F5X8d;

1.5
date	2017.07.25.13.32.14;	author robert;	state Exp;
branches;
next	1.4;
commitid	4ug2LPpW6jX7EOsH;

1.4
date	2017.06.03.22.25.19;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	aQXKg2Eekxp6EbG1;

1.3
date	2016.11.24.16.32.33;	author natano;	state Exp;
branches;
next	1.2;
commitid	Evzd0xdj5XEwcOYX;

1.2
date	2016.10.19.17.21.14;	author natano;	state Exp;
branches;
next	1.1;
commitid	UukN6LexfOkZ1f3c;

1.1
date	2016.10.19.16.49.58;	author deraadt;	state Exp;
branches;
next	;
commitid	ogq7NAu1pKQq1JRd;


desc
@@


1.6
log
@strip .SUNW_ctf in the remaining strip invocations

broke amd64/ramdisk_cd as it no longer fit; spotted by jsg@@
ok deraadt@@ mpi@@
@
text
@#	$OpenBSD: Makefile.inc,v 1.5 2017/07/25 13:32:14 robert Exp $

TOP=		${.CURDIR}/..

.include "${TOP}/Makefile.inc"
LISTS?=		${.CURDIR}/../common/list
UTILS?=		${.CURDIR}/../../miniroot

MOUNT_POINT=	/mnt
MTREE=		${UTILS}/mtree.conf

FS?=		floppy${REV}.fs
VND?=		vnd0
VND_DEV=	/dev/${VND}a
VND_RDEV=	/dev/r${VND}a
VND_CRDEV=	/dev/r${VND}c
VND_IDEV=	/dev/${VND}i
VND_IRDEV=	/dev/r${VND}i
PID!=		echo $$$$
REALIMAGE!=	echo /var/tmp/image.${PID}
BOOT?=		${DESTDIR}/usr/mdec/boot
EFIBOOT?=	${DESTDIR}/usr/mdec/BOOTX64.EFI ${DESTDIR}/usr/mdec/BOOTIA32.EFI
FLOPPYSIZE?=	2880
FLOPPYTYPE?=	floppy3

all:	${FS}

${FS}:	bsd.gz
	dd if=/dev/zero of=${REALIMAGE} bs=512 count=${FLOPPYSIZE}
	vnconfig -v -c ${VND} ${REALIMAGE}
.ifdef TEMPLATE
	disklabel -wAT ${TEMPLATE} ${VND}
	newfs -t msdos ${VND_IRDEV}
	mount ${VND_IDEV} ${MOUNT_POINT}
	mkdir -p ${MOUNT_POINT}/efi/boot
	cp ${EFIBOOT} ${MOUNT_POINT}/efi/boot
	umount ${MOUNT_POINT}
.else
	disklabel -w ${VND} ${FLOPPYTYPE}
.endif
	newfs -m 0 -o space -i 524288 -c ${FLOPPYSIZE} ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}
	cp ${BOOT} ${.OBJDIR}/boot
	strip ${.OBJDIR}/boot
	strip -R .comment -R .SUNW_ctf ${.OBJDIR}/boot
	installboot -v -r ${MOUNT_POINT} ${VND_CRDEV} \
	    ${DESTDIR}/usr/mdec/biosboot ${.OBJDIR}/boot
	dd if=bsd.gz of=${MOUNT_POINT}/bsd bs=512
	@@echo ""
	@@df -i ${MOUNT_POINT}
	@@echo ""
	umount ${MOUNT_POINT}
	vnconfig -u ${VND}
	cp ${REALIMAGE} ${FS}
	rm ${REALIMAGE}

unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}


DISKTYPE=	rdroot
MAKEFSARGS_RD=	-o disklabel=${DISKTYPE},minfree=0,density=4096

bsd.gz: bsd.rd
	cp bsd.rd bsd.strip
	strip bsd.strip
	strip -R .comment -R .SUNW_ctf bsd.strip
	gzip -c9n bsd.strip > bsd.gz

bsd.rd:	mr.fs bsd rdsetroot
	cp bsd bsd.rd
	${.OBJDIR}/rdsetroot bsd.rd mr.fs


bsd:
	cd ${.CURDIR}/../../../sys/arch/amd64/compile/${RAMDISK} && \
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && env COPTS=-Oz ${MAKE}'
	cp -p ${.CURDIR}/../../../sys/arch/amd64/compile/${RAMDISK}/obj/bsd bsd

mr.fs: instbin
	rm -rf $@@.d
	install -d -o root -g wheel $@@.d
	mtree -def ${MTREE} -p $@@.d -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} REV=${REV} \
	    TARGDIR=$@@.d UTILS=${UTILS} RELEASEDIR=${RELEASEDIR} \
	    sh ${UTILS}/runlist.sh ${LISTS}
	rm $@@.d/instbin
	makefs ${MAKEFSARGS_RD} $@@ $@@.d

rdsetroot:	${TOP}/../common/elfrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o rdsetroot \
	    ${TOP}/../common/elfrdsetroot.c ${TOP}/../common/elf32.c \
	    ${TOP}/../common/elf64.c

.ifdef RELEASEDIR
install:
.ifndef NOBSDRD
	cp bsd.rd ${RELEASEDIR}/bsd.rd
	chmod a+r ${RELEASEDIR}/bsd.rd
.endif
.ifndef NOFS
	cp ${FS} ${RELEASEDIR}/${FS}
.endif
.endif	# RELEASEDIR

instbin.mk instbin.cache instbin.c: instbin.conf
	crunchgen -E -D ${BSDSRCDIR} -L ${DESTDIR}/usr/lib \
	-c instbin.c -e instbin -m instbin.mk instbin.conf

instbin: instbin.mk instbin.cache instbin.c
	${MAKE} -f instbin.mk SRCLIBDIR=${.CURDIR}/../../../lib all
	strip -R .comment -R .SUNW_ctf instbin

instbin.conf: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=instbin ${LISTS} > instbin.conf

clean cleandir:
	/bin/rm -f *.core mr.fs instbin instbin.mk instbin*.cache \
	    *.o *.lo *.c bsd bsd.rd bsd.gz bsd.strip floppy*.fs \
	    lib*.a lib*.olist instbin.map \
	    rdsetroot boot instbin.conf ${FS}
	/bin/rm -rf mr.fs.d

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.5
log
@change -Os to -Oz all around the tree

clang optimizes better for size with -Oz so use that as a default to avoid
overflowing the ramdisk floppies. gcc now accepts -Oz as an alias for -Os.

ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2017/06/03 22:25:19 deraadt Exp $
d45 1
a45 1
	strip -R .comment ${.OBJDIR}/boot
d68 1
a68 1
	strip -R .comment bsd.strip
d113 1
a113 1
	strip -R .comment instbin
@


1.4
log
@kernels in compile dirs are readonly, and the bsd.rd we created has
tracked that permission.  Make the copy in $RELEASEDIR a+r
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2016/11/24 16:32:33 natano Exp $
d78 1
a78 1
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && env COPTS=-Os ${MAKE}'
@


1.3
log
@Use makefs to build bsd.rd. amd64 and i386 are first; other platforms
will follow with some safety distance when I figured out all MD quirks.
makefs allows to build the ramdisk image as an unprivileged user. The
next step in the quest to reduce root during builds.

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2016/10/19 17:21:14 natano Exp $
d100 1
@


1.2
log
@Inline IMAGE, CBIN, CRUNCHCONF and XNAME.
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 2016/10/19 16:49:58 deraadt Exp $
d57 7
a63 4
DISKTYPE?=       rdroot
NBLKS?=          4480
# minfree, opt, b/i  trks, sects, cpg
NEWFSARGS= -m 0 -o space -i 4096
d81 9
a89 16
mr.fs: instbin rd_setup do_files rd_teardown

rd_setup: instbin
	dd if=/dev/zero of=${REALIMAGE} bs=512 count=${NBLKS}
	vnconfig -v -c ${VND} ${REALIMAGE}
	disklabel -w ${VND} ${DISKTYPE}
	newfs ${NEWFSARGS} ${VND_RDEV}
	fsck ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}

rd_teardown:
	@@df -i ${MOUNT_POINT}
	-umount ${MOUNT_POINT}
	-vnconfig -u ${VND}
	cp ${REALIMAGE} mr.fs
	rm ${REALIMAGE}
a95 6
unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}

.PRECIOUS:	mr.fs

a116 7
do_files:
	mtree -def ${MTREE} -p ${MOUNT_POINT}/ -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} \
	    REV=${REV} TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    RELEASEDIR=${RELEASEDIR} sh ${UTILS}/runlist.sh ${LISTS}
	rm ${MOUNT_POINT}/instbin

d122 1
@


1.1
log
@Unshare Makefile.inc so we can determine how to squeeze makefs
into the picture.
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.29 2016/10/14 18:44:19 deraadt Exp $
a5 3
IMAGE=		mr.fs
CBIN?=		instbin
CRUNCHCONF?=	${CBIN}.conf
d12 1
a12 2
XNAME?=		floppy
FS?=		${XNAME}${REV}.fs
d68 1
a68 1
bsd.rd:	${IMAGE} bsd rdsetroot
d70 1
a70 1
	${.OBJDIR}/rdsetroot bsd.rd ${IMAGE}
d78 1
a78 1
${IMAGE}: ${CBIN} rd_setup do_files rd_teardown
d80 1
a80 1
rd_setup: ${CBIN}
d92 1
a92 1
	cp ${REALIMAGE} ${IMAGE}
d104 1
a104 1
.PRECIOUS:	${IMAGE}
d116 1
a116 1
${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CRUNCHCONF}
d118 1
a118 1
	-c ${CBIN}.c -e ${CBIN} -m ${CBIN}.mk ${CRUNCHCONF}
d120 3
a122 3
${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk SRCLIBDIR=${.CURDIR}/../../../lib all
	strip -R .comment ${CBIN}
d124 2
a125 2
${CRUNCHCONF}: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CRUNCHCONF}
d132 1
a132 1
	rm ${MOUNT_POINT}/${CBIN}
d135 1
a135 1
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}*.cache \
d137 2
a138 2
	    lib*.a lib*.olist ${CBIN}.map \
	    rdsetroot boot ${CRUNCHCONF} ${FS}
@

