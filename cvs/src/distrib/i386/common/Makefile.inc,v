head	1.41;
access;
symbols
	OPENBSD_6_1:1.41.0.4
	OPENBSD_6_1_BASE:1.41
	OPENBSD_6_0:1.37.0.10
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.37.0.6
	OPENBSD_5_9_BASE:1.37
	OPENBSD_5_8:1.37.0.8
	OPENBSD_5_8_BASE:1.37
	OPENBSD_5_7:1.37.0.2
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.37.0.4
	OPENBSD_5_6_BASE:1.37
	OPENBSD_5_5:1.36.0.2
	OPENBSD_5_5_BASE:1.36
	OPENBSD_5_4:1.32.0.6
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.32.0.4
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.32.0.2
	OPENBSD_5_2_BASE:1.32
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.4
	OPENBSD_5_0:1.31.0.2
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.27.0.2
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.26.0.2
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.23.0.2
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.21.0.4
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.2
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.15.0.10
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.8
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8;
locks; strict;
comment	@# @;


1.41
date	2016.12.30.22.32.25;	author deraadt;	state Exp;
branches;
next	1.40;
commitid	l4qFJ05ajAQouLxi;

1.40
date	2016.11.24.16.32.33;	author natano;	state Exp;
branches;
next	1.39;
commitid	Evzd0xdj5XEwcOYX;

1.39
date	2016.10.14.18.44.19;	author deraadt;	state Exp;
branches;
next	1.38;
commitid	SCMr9f2ZDRZiobIN;

1.38
date	2016.09.18.15.23.42;	author jsing;	state Exp;
branches;
next	1.37;
commitid	6uC061FeHpqJLWda;

1.37
date	2014.03.29.17.32.41;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2014.03.02.15.57.32;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2014.01.20.05.15.51;	author jsing;	state Exp;
branches;
next	1.34;

1.34
date	2013.10.15.22.46.50;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2013.10.14.00.00.09;	author guenther;	state Exp;
branches;
next	1.32;

1.32
date	2012.03.15.18.29.08;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2011.07.09.00.42.49;	author drahn;	state Exp;
branches;
next	1.30;

1.30
date	2011.07.08.21.39.32;	author drahn;	state Exp;
branches;
next	1.29;

1.29
date	2011.04.18.16.52.09;	author thib;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.15.03.11.22;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2010.10.19.20.23.53;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.05.24.19.10.26;	author jsg;	state Exp;
branches;
next	1.25;

1.25
date	2009.04.17.15.59.48;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2009.04.17.03.58.54;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.02.03.20.57;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2008.12.02.01.01.07;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2008.01.11.10.16.40;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.09.12.48.07;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.17.00.28.21;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.17.15.05.32;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.13.17.34.40;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.09.14.55.11;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2004.11.25.22.02.08;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.05.23.40.13;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.28.21.46.38;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.26.23.21.49;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.08.19.39.25;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.26.16.23.44;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.17.03.49.24;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.23.18.31.03;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.03.03.36.53;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.19.08.55.12;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.30.03.23.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.30.01.05.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.28.18.28.33;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.25.22.10.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.22.02.40.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Install cert.pem + ftp(1) binary that supports SSL, so the install script
can perform https fetches.  While non-critical for sets (which are verified
using signify), it is an uplift for communication towards the ftp.openbsd.org
cgi which provides mirror proposals, entropy seeds, and current time.
[The install script changes are not included in this commit]
ok beck jsing rpe
@
text
@#	$OpenBSD: Makefile.inc,v 1.40 2016/11/24 16:32:33 natano Exp $

TOP=		${.CURDIR}/..

.include "${TOP}/Makefile.inc"
IMAGE=		mr.fs
CBIN?=		instbin
CRUNCHCONF?=	${CBIN}.conf
LISTS?=		${.CURDIR}/../common/list
UTILS?=		${.CURDIR}/../../miniroot

MOUNT_POINT=	/mnt
MTREE=		${UTILS}/mtree.conf

XNAME?=		floppy
FS?=		${XNAME}${REV}.fs
VND?=		vnd0
VND_DEV=	/dev/${VND}a
VND_RDEV=	/dev/r${VND}a
VND_CRDEV=	/dev/r${VND}c
PID!=		echo $$$$
REALIMAGE!=	echo /var/tmp/image.${PID}
BOOT?=		${DESTDIR}/usr/mdec/boot
FLOPPYSIZE?=	2880
FLOPPYTYPE?=	floppy3

all:	${FS}

${FS}:	bsd.gz
	dd if=/dev/zero of=${REALIMAGE} bs=512 count=${FLOPPYSIZE}
	vnconfig -v -c ${VND} ${REALIMAGE}
.ifdef LBA
	fdisk -yi -l ${FLOPPYSIZE} -f ${DESTDIR}/usr/mdec/mbr ${VND}
.endif
	disklabel -w ${VND} ${FLOPPYTYPE}
	newfs -m 0 -o space -i 524288 -c ${FLOPPYSIZE} ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}
	cp ${BOOT} ${.OBJDIR}/boot
	strip ${.OBJDIR}/boot
	strip -R .comment ${.OBJDIR}/boot
	installboot -v -r ${MOUNT_POINT} ${VND_CRDEV} \
	    ${DESTDIR}/usr/mdec/biosboot ${.OBJDIR}/boot
	dd if=bsd.gz of=${MOUNT_POINT}/bsd bs=512
	@@echo ""
	@@df -i ${MOUNT_POINT}
	@@echo ""
	umount ${MOUNT_POINT}
	vnconfig -u ${VND}
	cp ${REALIMAGE} ${FS}
	rm ${REALIMAGE}

unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}


DISKTYPE?=	rdroot
MAKEFSARGS_RD=	-o disklabel=${DISKTYPE},minfree=0,density=4096

COPTS= -Os -mtune=i486

bsd.gz: bsd.rd
	cp bsd.rd bsd.strip
	strip bsd.strip
	strip -R .comment bsd.strip
	gzip -c9n bsd.strip > bsd.gz

bsd.rd:	${IMAGE} bsd rdsetroot
	cp bsd bsd.rd
	${.OBJDIR}/rdsetroot bsd.rd ${IMAGE}


bsd:
	cd ${.CURDIR}/../../../sys/arch/i386/compile/${RAMDISK} && \
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && env COPTS="${COPTS}" ${MAKE}'
	cp -p ${.CURDIR}/../../../sys/arch/i386/compile/${RAMDISK}/obj/bsd bsd

${IMAGE}: ${CBIN}
	rm -rf $@@.d
	install -d -o root -g wheel $@@.d
	mtree -def ${MTREE} -p $@@.d -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} REV=${REV} \
	    TARGDIR=$@@.d UTILS=${UTILS} RELEASEDIR=${RELEASEDIR} \
	    sh ${UTILS}/runlist.sh ${LISTS}
	rm $@@.d/${CBIN}
	makefs ${MAKEFSARGS_RD} $@@ $@@.d
	vnconfig -v -c ${VND} mr.fs
	df -i /dev/${VND}a
	vnconfig -u ${VND}

rdsetroot:	${TOP}/../common/elfrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o rdsetroot \
	    ${TOP}/../common/elfrdsetroot.c ${TOP}/../common/elf32.c \
	    ${TOP}/../common/elf64.c

.ifdef RELEASEDIR
install:
.ifndef NOBSDRD
	cp bsd.rd ${RELEASEDIR}/bsd.rd
.endif
.ifndef NOFS
	cp ${FS} ${RELEASEDIR}/${FS}
.endif
.endif	# RELEASEDIR

${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CRUNCHCONF}
	crunchgen -E -D ${BSDSRCDIR} -L ${DESTDIR}/usr/lib \
	-c ${CBIN}.c -e ${CBIN} -m ${CBIN}.mk ${CRUNCHCONF}

${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk SRCLIBDIR=${.CURDIR}/../../../lib all
	strip -R .comment ${CBIN}

${CRUNCHCONF}: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CRUNCHCONF}

clean cleandir:
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}*.cache \
	    *.o *.lo *.c bsd bsd.rd bsd.gz bsd.strip floppy*.fs \
	    lib*.a lib*.olist ${CBIN}.map \
	    rdsetroot boot ${CRUNCHCONF} ${FS}
	/bin/rm -rf ${IMAGE}.d

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.40
log
@Use makefs to build bsd.rd. amd64 and i386 are first; other platforms
will follow with some safety distance when I figured out all MD quirks.
makefs allows to build the ramdisk image as an unprivileged user. The
next step in the quest to reduce root during builds.

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.39 2016/10/14 18:44:19 deraadt Exp $
d57 1
a57 1
DISKTYPE=	rdroot
d87 3
@


1.39
log
@Use new kernel compile method for ramdisks, de-escalating to $BUILDUSER
as required.
much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.38 2016/09/18 15:23:42 jsing Exp $
d52 7
a58 4
DISKTYPE?=       rdroot
NBLKS?=          3872
# minfree, opt, b/i, blks/cyl
NEWFSARGS= -m 0 -o space -i 4096
d78 9
a86 16
${IMAGE}: ${CBIN} rd_setup do_files rd_teardown

rd_setup: ${CBIN}
	dd if=/dev/zero of=${REALIMAGE} bs=512 count=${NBLKS}
	vnconfig -v -c ${VND} ${REALIMAGE}
	disklabel -w ${VND} ${DISKTYPE}
	newfs ${NEWFSARGS} ${VND_RDEV}
	fsck ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}

rd_teardown:
	@@df -i ${MOUNT_POINT}
	-umount ${MOUNT_POINT}
	-vnconfig -u ${VND}
	cp ${REALIMAGE} ${IMAGE}
	rm ${REALIMAGE}
a92 6
unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}

.PRECIOUS:	${IMAGE}

a113 7
do_files:
	mtree -def ${MTREE} -p ${MOUNT_POINT}/ -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} \
	    REV=${REV} TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    RELEASEDIR=${RELEASEDIR} sh ${UTILS}/runlist.sh ${LISTS}
	rm ${MOUNT_POINT}/${CBIN}

d119 1
@


1.38
log
@Switch the i386 floppy ramdisk to fdboot(8), now that it works correctly.
This will avoid overflow caused by upcoming changes to boot(8).

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.37 2014/03/29 17:32:41 deraadt Exp $
a70 1
	cd ${.CURDIR}/../../../sys/arch/i386/conf && config ${RAMDISK}
d72 2
a73 2
	    ${MAKE} clean && COPTS="${COPTS}" exec ${MAKE}
	cp ${.CURDIR}/../../../sys/arch/i386/compile/${RAMDISK}/bsd bsd
@


1.37
log
@Place kernel after running installboot, because this makes overflow
easier to calculate.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.36 2014/03/02 15:57:32 deraadt Exp $
d23 1
a23 1
BOOT=		${DESTDIR}/usr/mdec/boot
@


1.36
log
@Build a (USB or other disk) miniroot, which can be dd'd and booted since
it is in LBA form.
Work by chris@@, integration methodology proposed by me.  Needs improvements
after release..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.35 2014/01/20 05:15:51 jsing Exp $
a40 1
	dd if=bsd.gz of=${MOUNT_POINT}/bsd bs=512
d43 1
@


1.35
log
@Use the new installboot when building i386 media.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.34 2013/10/15 22:46:50 deraadt Exp $
d32 3
@


1.34
log
@We do not produce "core" files, so they do not need to be deleted.  they
have been *.core files for a very long time.  That's a lot of unlink()
calls saved.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.33 2013/10/14 00:00:09 guenther Exp $
a37 1
	dd if=${.OBJDIR}/boot of=${MOUNT_POINT}/boot bs=512
d39 2
a40 2
	/usr/mdec/installboot -v ${MOUNT_POINT}/boot \
	    ${DESTDIR}/usr/mdec/biosboot ${VND_CRDEV}
@


1.33
log
@Turn on the distrib lib bits in crunchgen by setting SRCLIBDIR.
Add the new files to the clean target's rm list.

"why not get it tested?" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.32 2012/03/15 18:29:08 deraadt Exp $
d131 1
a131 1
	/bin/rm -f core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}*.cache \
@


1.32
log
@we are always using gcc4 now
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.31 2011/07/09 00:42:49 drahn Exp $
d117 1
a117 1
	${MAKE} -f ${CBIN}.mk all
d133 1
@


1.31
log
@Unbreak most archs for the last commit. cut and paste changed rdsetroot
to elfrdsetroot. Does not yet fix sparc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.30 2011/07/08 21:39:32 drahn Exp $
d55 1
a55 4
COPTS= -Os
.if ${COMPILER_VERSION:L} == "gcc4"
COPTS+= -mtune=i486
.endif
@


1.30
log
@Allow the elf rdsetroot operation to function on 32 bit and 64 bit binaries.
Enables developers to build arm ramdisk kernels on amd64 archs
OK deraadt@@ 'looked fine' miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.29 2011/04/18 16:52:09 thib Exp $
d95 1
a95 1
	${HOSTCC} ${HOSTCFLAGS} -o elfrdsetroot \
@


1.29
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.28 2011/04/15 03:11:22 deraadt Exp $
d95 3
a97 1
	${HOSTCC} -o rdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.28
log
@No need to make depend kernels; ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.27 2010/10/19 20:23:53 deraadt Exp $
d17 1
a17 1
VND?=		svnd0
@


1.27
log
@grow i386 inside media a teeny bit
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.26 2010/05/24 19:10:26 jsg Exp $
d74 1
a74 1
	    ${MAKE} clean && ${MAKE} depend && COPTS="${COPTS}" ${MAKE}
@


1.26
log
@Use -mtune=i486 when running with gcc4, the larger weights given
to various instructions gives code which gzips better.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.25 2009/04/17 15:59:48 deraadt Exp $
d51 1
a51 1
NBLKS?=          3800
@


1.25
log
@further minor unification
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.24 2009/04/17 03:58:54 deraadt Exp $
d55 5
d74 1
a74 1
	    ${MAKE} clean && ${MAKE} depend && COPTS=-Os ${MAKE}
@


1.24
log
@For SHA256 hashes to be ready to go onto the install media, we must
build the sets before we build the media.  While there we can get rid
of DESTDIR/snapshot too, and simply install straight into RELEASEDIR.
(This also ends up saving an astounding amount of traffic/latency in a nfs
environment)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.23 2008/12/02 03:20:57 deraadt Exp $
d106 1
a106 1
.endif	# RELEASEDIR check
@


1.23
log
@commit with rdsetroot now accepting the filesystem as a 2nd arg
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.22 2008/12/02 01:01:07 deraadt Exp $
d98 1
d101 1
a101 1
	cp bsd.rd ${DESTDIR}/snapshot/bsd.rd
d104 1
a104 1
	cp ${FS} ${DESTDIR}/snapshot/${FS}
d106 1
d123 1
a123 1
	    sh ${UTILS}/runlist.sh ${LISTS}
@


1.22
log
@no longer need to compile rdsetroot with DEBUG
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.21 2008/01/11 10:16:40 espie Exp $
d63 1
a63 1
	${.OBJDIR}/rdsetroot bsd.rd < ${IMAGE}
@


1.21
log
@cleanup: make -> ${MAKE} consistenly.
zap extra subshells.

okay miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.20 2007/08/09 12:48:07 deraadt Exp $
d90 1
a90 1
	${HOSTCC} -DDEBUG -o rdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.20
log
@do not install the cdromXX.fs file, it is useless
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.19 2007/06/17 00:28:21 deraadt Exp $
d69 1
a69 1
	    make clean && make depend && COPTS=-Os make
d111 1
a111 1
	make -f ${CBIN}.mk all
@


1.19
log
@Stop using disklabel -r.  The disklabel code does not know all the semantics
for pushing disklabels onto the disk (and besides that, it is buggy and
unreadable crap); thanks for help from krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.18 2007/04/17 15:05:32 millert Exp $
d102 1
d104 1
@


1.18
log
@Restore inode parameter for floppy fs to the previous value (524288)
which appears to work around a bug in newfs's summary information
generation when used in conjunction with the other fs parameters.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.17 2007/04/13 17:34:40 millert Exp $
d32 1
a32 1
	disklabel -w -r ${VND} ${FLOPPYTYPE}
d77 1
a77 1
	disklabel -w -r ${VND} ${DISKTYPE}
@


1.17
log
@Update install media generation to the new semantics of the -c flag.
Also replace "newfs -O" with "newfs -O 0" now that -O takes an option.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.16 2007/04/09 14:55:11 millert Exp $
d33 1
a33 1
	newfs -m 0 -o space -i 81920 -c ${FLOPPYSIZE} ${VND_RDEV}
@


1.16
log
@Add -n to gzip flags.  Save a few bytes since we no longer save
the uncompressed filename in the gzip header.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 2004/11/25 22:02:08 deraadt Exp $
d24 1
a24 1
FLOPPYSIZE?=	144
d30 1
a30 1
	dd if=/dev/zero of=${REALIMAGE} bs=10k count=${FLOPPYSIZE}
d33 1
a33 1
	newfs -m 0 -o space -i 524288 -c 80 ${VND_RDEV}
d52 2
a53 2
# minfree, opt, b/i  trks, sects, cpg
NEWFSARGS= -m 0 -o space -c 16 -i 4096
@


1.15
log
@crank ramdisk filesystem slightly to cope with firmwares inside the filesystem
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 2004/05/05 23:40:13 deraadt Exp $
d59 1
a59 1
	gzip -c9 bsd.strip > bsd.gz
@


1.14
log
@better cleandir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.13 2004/01/28 21:46:38 tom Exp $
d51 1
a51 1
NBLKS?=          3510
@


1.13
log
@Now that installboot is geometry-independent, FLOPPYSECS is not
required when making release.

requested by and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2003/08/08 19:39:25 deraadt Exp $
d124 2
a125 2
	    *.o *.lo *.c bsd bsd.rd bsd.gz bsd.strip floppy*.fs rdsetroot \
	    ${CRUNCHCONF}
@


1.12
log
@Major overhaul of biosboot and installboot, using EDD (LBA) reads if
the BIOS supports it.  File location data now geometry-independent
(biosboot groks part of the inode), so installboot loses -h and -s.

Many thanks to all those brave enough to try the snapshots.  Thanks
for the test reports, everyone.

ok deraadt@@
@
text
@a24 1
FLOPPYSECS?=	18
@


1.11
log
@strip .comments too; from drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2003/04/26 16:23:44 deraadt Exp $
d41 1
a41 1
	/usr/mdec/installboot -v -s ${FLOPPYSECS} -h 2 ${MOUNT_POINT}/boot \
@


1.10
log
@slight cleaning
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2003/04/17 03:49:24 drahn Exp $
d38 1
d59 1
d111 1
@


1.9
log
@distrib(ramdisk) bits for i386/ELF.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2002/09/23 18:31:03 markus Exp $
a8 1
CRUNCHCONFS?=	${.CURDIR}/../common/crunch.conf
d111 1
a111 1
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CBIN}.conf
@


1.8
log
@remove generated crunch conf; ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2002/07/03 03:36:53 deraadt Exp $
d89 2
a90 2
rdsetroot:	${TOP}/../common/rdsetroot.c
	${HOSTCC} -DDEBUG -o rdsetroot ${TOP}/../common/rdsetroot.c
d105 1
a105 1
	crunchgen -D ${BSDSRCDIR} -L ${DESTDIR}/usr/lib \
@


1.7
log
@avoid dd.  do not ask me why
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2002/05/19 08:55:12 deraadt Exp $
d123 2
a124 1
	    *.o *.lo *.c bsd bsd.rd bsd.gz bsd.strip floppy*.fs rdsetroot
@


1.6
log
@do this by hand
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2002/04/30 03:23:57 deraadt Exp $
d37 4
a40 3
	cp ${BOOT} ${MOUNT_POINT}/
	strip ${MOUNT_POINT}/boot
	cp bsd.gz ${MOUNT_POINT}/bsd
@


1.5
log
@make use of makeconf.awk
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2002/04/30 01:05:22 deraadt Exp $
d24 1
a24 1
LISTFLOPPY?=	${.CURDIR}/../common/list_floppy
d37 3
a39 3
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} \
	    TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    sh ${UTILS}/runlist.sh ${LISTFLOPPY}
@


1.4
log
@do not delete the filesystem on "make unconfig"
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2002/04/28 18:28:33 deraadt Exp $
d10 1
a10 1
LISTS?=		${.CURDIR}/../common/list ${.CURDIR}
d110 2
a111 2
${CRUNCHCONF}: ${CRUNCHCONFS}
	cat ${CRUNCHCONFS} > ${CRUNCHCONF}
d118 1
@


1.3
log
@use single shared mtree.conf
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2002/04/25 22:10:27 deraadt Exp $
a93 1
	-/bin/rm -f ${IMAGE}
@


1.2
log
@runlist.sh & list2sh.awk unification
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 2002/04/22 02:40:02 deraadt Exp $
d14 1
a14 1
MTREE=		${.CURDIR}/../common/mtree.conf
@


1.1
log
@move things back a directory
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 2002/03/30 20:35:31 millert Exp $
d11 1
d38 2
a39 1
	    TARGDIR=${MOUNT_POINT} sh ${TOP}/runlist.sh ${LISTFLOPPY}
d117 2
a118 1
	    REV=${REV} TARGDIR=${MOUNT_POINT} sh ${TOP}/runlist.sh ${LISTS}
@

