head	1.50;
access;
symbols
	OPENBSD_2_5:1.48.0.2
	OPENBSD_2_5_BASE:1.48
	OPENBSD_2_4:1.41.0.2
	OPENBSD_2_4_BASE:1.41
	OPENBSD_2_3:1.35.0.2
	OPENBSD_2_3_BASE:1.35
	OPENBSD_2_2:1.25.0.2
	OPENBSD_2_2_BASE:1.25
	OPENBSD_2_1:1.11.0.2
	OPENBSD_2_1_BASE:1.11;
locks; strict;
comment	@# @;


1.50
date	99.08.06.20.49.10;	author deraadt;	state dead;
branches;
next	1.49;

1.49
date	99.07.30.17.16.05;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	99.04.07.22.58.12;	author millert;	state Exp;
branches;
next	1.47;

1.47
date	99.04.02.05.17.38;	author millert;	state Exp;
branches;
next	1.46;

1.46
date	99.04.02.00.56.20;	author millert;	state Exp;
branches;
next	1.45;

1.45
date	99.04.01.21.57.09;	author millert;	state Exp;
branches;
next	1.44;

1.44
date	99.04.01.21.28.11;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	99.02.03.23.17.42;	author millert;	state Exp;
branches;
next	1.42;

1.42
date	98.11.03.04.10.15;	author aaron;	state Exp;
branches;
next	1.41;

1.41
date	98.10.07.18.42.08;	author millert;	state Exp;
branches;
next	1.40;

1.40
date	98.10.03.08.00.46;	author matthieu;	state Exp;
branches;
next	1.39;

1.39
date	98.09.24.06.43.26;	author millert;	state Exp;
branches;
next	1.38;

1.38
date	98.09.11.22.55.45;	author millert;	state Exp;
branches;
next	1.37;

1.37
date	98.09.02.04.47.03;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	98.06.08.08.48.58;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	98.04.15.16.10.34;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	98.04.11.09.47.09;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	98.04.01.20.22.48;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	98.04.01.20.21.51;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	98.03.30.20.48.15;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	98.03.27.23.28.14;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	98.03.13.20.50.52;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	98.03.12.08.49.23;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	98.02.28.02.37.47;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	97.10.29.21.43.22;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	97.10.25.04.35.53;	author deraadt;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	97.10.19.09.08.06;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	97.10.17.12.37.31;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	97.10.17.12.30.09;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	97.10.17.12.04.31;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	97.10.17.08.57.43;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	97.10.17.04.39.17;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	97.10.11.08.12.21;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	97.10.02.16.01.39;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	97.09.30.17.52.42;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.09.26.19.51.12;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.09.21.14.16.00;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.09.06.03.53.58;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	97.08.30.17.43.40;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	97.05.14.21.39.13;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	97.05.07.06.05.58;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.05.04.04.51.28;	author tholo;	state Exp;
branches;
next	1.8;

1.8
date	97.05.03.23.12.04;	author tholo;	state Exp;
branches;
next	1.7;

1.7
date	97.05.03.07.50.15;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	97.04.30.06.32.05;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	97.04.22.10.34.41;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.22.01.05.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.04.22.00.35.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.04.17.20.21.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.04.13.17.17.54;	author mickey;	state Exp;
branches;
next	;

1.25.2.1
date	97.10.29.21.47.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.50
log
@new install media.  floppyXX.fs is the regular one.  floppyBXX.fs contains no
none of the scsi drivers on the first floppy, but others (to be detailed
elsewhere).  bsd.rd is still the one from floppyXX.fs.  finally, cdromXX.fs
is a 2.88MB install, which contains a superset of all these.. to be placed on
the CD.
@
text
@#	$OpenBSD: install.md,v 1.49 1999/07/30 17:16:05 deraadt Exp $
#
#
# Copyright rc) 1996 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jason R. Thorpe.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by the NetBSD
#        Foundation, Inc. and its contributors.
# 4. Neither the name of The NetBSD Foundation nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# machine dependent section of installation/upgrade script.
#

# Machine-dependent install sets
MDSETS=kernel

md_set_term() {
	test -n "$TERM" && return
	echo -n "Specify terminal type [pcvt25]: "
	getresp pcvt25
	TERM=$resp
	export TERM
}

md_makerootwritable() {
	:
}

md_machine_arch() {
	cat /kern/machine
}

md_get_diskdevs() {
	# return available disk devices
	cat /kern/msgbuf | egrep "^[sw]d[0-9]+ " | cutword 1 | sort -u
}

md_get_cddevs() {
	# return available CDROM devices
	cat /kern/msgbuf | egrep "^cd[0-9]+ " | cutword 1 | sort -u
}

md_get_partition_range() {
    # return range of valid partition letters
    echo [a-p]
}

md_installboot() {
	echo Installing boot block...
	cp /usr/mdec/boot /mnt/boot
	/usr/mdec/installboot -v /mnt/boot /usr/mdec/biosboot ${1}

	echo
	echo -n "Do you expect to run the X Window System on this machine? [y or n] "
	getresp n
	case "$resp" in
		y*|Y*)
			echo "Enabling machdep.allowaperture. Read xf86(4) for more information."
			echo '1,$s/^#machdep\.allowaperture=1/machdep\.allowaperture=1	/
w
q' | ed /mnt/etc/sysctl.conf 2> /dev/null

			;;
		*)
			;;
	esac
	echo
}

md_native_fstype() {
    echo msdos
}

md_native_fsopts() {
    echo ro
}

md_checkfordisklabel() {
	# $1 is the disk to check
	local rval

	disklabel -r $1 > /dev/null 2> /tmp/checkfordisklabel
	if grep "no disk label" /tmp/checkfordisklabel; then
		rval=1
	elif grep "disk label corrupted" /tmp/checkfordisklabel; then
		rval=2
	else
		rval=0
	fi

	rm -f /tmp/checkfordisklabel
	return $rval
}

md_prep_fdisk()
{
	local _disk=$1 _whole=$2

	if [ -n "$_whole" ]; then
		echo
		echo Updating MBR based on BIOS geometry.
		fdisk -e ${_disk} << __EOC
reinit
update
write
quit
__EOC

	else

		echo
		cat << __EOT
A single OpenBSD partition with id 'A6' ('OpenBSD') should exist in the MBR.
All of your OpenBSD partitions will be contained _within_ this partition,
including your swap space.  In the normal case it should be the only partition
marked as active.  (Unless you are using a multiple-OS booter, but you can
adjust that later.)  Furthermore, the MBR partitions must NOT overlap each
other.  [If this is a new install, you are most likely going to want to type
the following fdisk commands: reinit, update, write, quit. Use the 'manual'
command to read a full description.]  The current partition information is:

__EOT
		fdisk ${_disk}
		echo
		fdisk -e ${_disk}
	fi

	echo Here is the partition information you chose:
	echo
	fdisk ${_disk}
	echo
}

md_prep_disklabel()
{
	local _disk=$1

	echo -n 'Do you want to use the *entire* disk for OpenBSD? [no] '
	getresp "no"
	case $resp in
		y*|Y*)	md_prep_fdisk ${_disk} Y ;;
		*)	md_prep_fdisk ${_disk} ;;
	esac

	cat << __EOT

Inside the BIOS 'A6' ('OpenBSD') partition you just created, there resides an
OpenBSD partition table which defines how this BIOS partition is to be split
up. This table declares the offsets and sizes of your / partition, your swap
space, and any other partitions you might create.  (NOTE: The OpenBSD disk
label offsets are absolute, ie. relative to the start of the disk... NOT
relative to the start of the BIOS 'A6' partition).

__EOT

	md_checkfordisklabel $_disk
	case $? in
	0)
		;;
	1)
		echo WARNING: Disk $_disk has no label. You will be creating a new one.
		echo
		;;
	2)
		echo WARNING: Label on disk $_disk is corrupted. You will be repairing.
		echo
		;;
	esac

	# display example
	cat << __EOT
If this disk is shared with other operating systems, those operating systems
should have a BIOS partition entry that spans the space they occupy completely.
For safety, also make sure all OpenBSD file systems are within the offset and
size specified in the 'A6' BIOS partition table.  (By default, the disklabel
editor will try to enforce this).  If you are unsure of how to use multiple
partitions properly (ie. separating /,  /usr, /tmp, /var, /usr/local, and other
things) just split the space into a root and swap partition for now.

__EOT
	disklabel -f /tmp/fstab.${_disk} -E ${_disk}
}

md_copy_kernel() {
	check_kernel
}

md_welcome_banner() {
{
	if [ "$MODE" = install ]; then
		cat << __EOT
Welcome to the OpenBSD/i386 ${VERSION_MAJOR}.${VERSION_MINOR} installation program.

This program is designed to help you put OpenBSD on your disk in a simple and
rational way.
__EOT

	else
		cat << __EOT
Welcome to the OpenBSD/i386 ${VERSION_MAJOR}.${VERSION_MINOR} upgrade program.

This program is designed to help you upgrade your OpenBSD system in a simple
and rational way.  As a reminder, installing the 'etc' binary set is NOT
recommended.  Once the rest of your system has been upgraded, you should
manually merge any changes to files in the 'etc' set into those files which
already exist on your system.

__EOT
	fi

cat << __EOT

As with anything which modifies your disk's contents, this program can cause
SIGNIFICANT data loss, and you are advised to make sure your data is backed
up before beginning the installation process.

Default answers are displayed in brackets after the questions.  You can hit
Control-C at any time to quit, but if you do so at a prompt, you may have
to hit return.  Also, quitting in the middle of installation may leave your
system in an inconsistent state.  If you hit Control-C and restart the
install, the install program will remember many of your old answers.

__EOT
} | more
}

md_not_going_to_install() {
	cat << __EOT

OK, then.  Enter 'halt' at the prompt to halt the machine.  Once the machine
has halted, power-cycle the system to load new boot code.

__EOT
}

md_congrats() {
	local what;
	if [ "$MODE" = install ]; then
		what=installed
	else
		what=upgraded
	fi
	cat << __EOT

CONGRATULATIONS!  You have successfully $what OpenBSD!  To boot the
installed system, enter halt at the command prompt. Once the system has
halted, reset the machine and boot from the disk.

__EOT
}

hostname() {
	case $# in
		0)      cat /kern/hostname ;;
		1)      echo "$1" > /kern/hostname ;;
		*)      echo usage: hostname [name-of-host]
	esac
}
@


1.49
log
@acd went away
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.48 1999/04/07 22:58:12 millert Exp $
@


1.48
log
@Don't use -F option to disklabel
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.47 1999/04/02 05:17:38 millert Exp $
d69 1
a69 1
	cat /kern/msgbuf | egrep "^a?cd[0-9]+ " | cutword 1 | sort -u
@


1.47
log
@Fix "no closing quote" problem.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.46 1999/04/02 00:56:20 millert Exp $
d165 1
a165 1
	local _disk=$1 _flags
d170 2
a171 1
		yes|YES|y|Y)	_flags=-F ;;
a172 1
	md_prep_fdisk ${_disk} ${_flags}
d210 1
a210 1
	disklabel ${_flags} -f /tmp/fstab.${_disk} -E ${_disk}
@


1.46
log
@shave a few bytes
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.45 1999/04/01 21:57:09 millert Exp $
d232 1
a232 1
and rational way.  As a reminder, installing the `etc' binary set is NOT
d234 1
a234 1
manually merge any changes to files in the `etc' set into those files which
d259 1
a259 1
OK, then.  Enter `halt' at the prompt to halt the machine.  Once the machine
@


1.45
log
@shave a few bytes
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.44 1999/04/01 21:28:11 deraadt Exp $
d44 1
a44 1
MDSETS="kernel"
d219 1
a219 2
	if [ "$MODE" = "install" ]; then
		echo Welcome to the OpenBSD/i386 ${VERSION_MAJOR}.${VERSION_MINOR} installation program.
d221 1
a227 2
		echo
		echo Welcome to the OpenBSD/i386 ${VERSION_MAJOR}.${VERSION_MINOR} upgrade program.
d229 1
d236 1
d267 2
a268 2
	if [ "$MODE" = "install" ]; then
		what="installed";
d270 1
a270 1
		what="upgraded";
@


1.44
log
@prompt for entire disk use, disklabel -f use; millert
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.43 1999/02/03 23:17:42 millert Exp $
d47 1
a47 3
	if [ ! -z "$TERM" ]; then
		return
	fi
d49 2
a50 2
	getresp "pcvt25"
	TERM="$resp"
d55 1
d74 1
a74 1
    echo "[a-p]"
d78 1
a78 1
	echo "Installing boot block..."
d84 1
a84 1
	getresp "n"
d100 1
a100 1
    echo "msdos"
d104 1
a104 1
    echo "ro"
d126 1
a126 5
	local _disk
	local _whole

	_disk=$1
	_whole=$2
d130 2
a131 2
		echo 'Updating MBR based on BIOS geometry.'
		fdisk -e ${_disk} << \__md_prep_fdisk_0
d136 1
a136 1
__md_prep_fdisk_0
d141 1
a141 1
		cat << \__md_prep_fdisk_1
d151 1
a151 1
__md_prep_fdisk_1
d157 1
a157 1
	echo "Here is the partition information you chose:"
d165 1
a165 4
	local _disk
	local _flags

	_disk=$1
d174 1
a174 1
	cat << \__md_prep_disklabel_1
d183 1
a183 1
__md_prep_disklabel_1
d190 1
a190 1
		echo "WARNING: Disk $_disk has no label. You will be creating a new one."
d194 1
a194 1
		echo "WARNING: Label on disk $_disk is corrupted. You will be repairing."
d200 1
a200 1
	cat << \__md_prep_disklabel_2
d209 1
a209 1
__md_prep_disklabel_2
d220 2
a221 2
		echo "Welcome to the OpenBSD/i386 ${VERSION_MAJOR}.${VERSION_MINOR} installation program."
		cat << \__welcome_banner_1
d225 1
a225 1
__welcome_banner_1
d228 3
a230 3
		echo ""
		echo "Welcome to the OpenBSD/i386 ${VERSION_MAJOR}.${VERSION_MINOR} upgrade program."
		cat << \__welcome_banner_2
d237 1
a237 1
__welcome_banner_2
d240 1
a240 1
cat << \__welcome_banner_3
d252 1
a252 1
__welcome_banner_3
d257 1
a257 1
	cat << \__not_going_to_install_1
d262 1
a262 1
__not_going_to_install_1
d272 1
a272 1
	cat << __congratulations_1
d278 1
a278 1
__congratulations_1
d285 1
a285 1
		*)      echo "usage: hostname [name-of-host]"
@


1.43
log
@X Window System, not X windows; bob@@prophecy.lu
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.42 1998/11/03 04:10:15 aaron Exp $
d128 1
a128 1
	local _done
d131 1
d133 14
a146 3
	_done=0
	echo
	cat << \__md_prep_fdisk_1
d157 4
a160 3
	fdisk ${_disk}
	echo
	fdisk -e ${_disk}
d171 1
d174 7
a180 1
	md_prep_fdisk ${_disk}
d208 1
a208 1
	cat << \__md_prep_disklabel_1
d217 2
a218 2
__md_prep_disklabel_1
	disklabel -E ${_disk}
@


1.42
log
@seperating -> separating
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.41 1998/10/07 18:42:08 millert Exp $
d84 1
a84 1
	echo -n "Do you expect to run X windows on this machine? [y or n] "
d202 1
a202 3
	#echo -n "Copying kernel..."
	#cp -p /bsd /mnt/bsd
	#echo "done."
@


1.41
log
@kill hostname, pwd, test, sync
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.40 1998/10/03 08:00:46 matthieu Exp $
d194 1
a194 1
partitions properly (ie. seperating /,  /usr, /tmp, /var, /usr/local, and other
@


1.40
log
@set machdep.allowparture in sysctl.conf if the user plans to run any X server
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.39 1998/09/24 06:43:26 millert Exp $
a80 1
	sync; sync; sync
d269 8
@


1.39
log
@use cutword, not cut(1), and remove cut(1) from the floppy
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.38 1998/09/11 22:55:45 millert Exp $
d85 1
a85 1
	echo -n "Do you expect to run accelerated X servers on this machine? [y or n] "
@


1.38
log
@kill md_get_ifdevs, miniroot/install.sub uses mi version now
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.37 1998/09/02 04:47:03 deraadt Exp $
d65 1
a65 1
	cat /kern/msgbuf | egrep "^[sw]d[0-9]+ " | cut -d" " -f1 | sort -u
d70 1
a70 1
	cat /kern/msgbuf | egrep "^a?cd[0-9]+ " | cut -d" " -f1 | sort -u
@


1.37
log
@new ethernet card: xl
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.36 1998/06/08 08:48:58 deraadt Exp $
a70 5
}

md_get_ifdevs() {
	# return available network devices
	cat /kern/msgbuf | egrep "^(e[dglp][0-9] |[dil]e[0-9] |xl[0-9] |f[ep]a[0-9] |fxp[0-9])" | cut -d" " -f1 | sort -u
@


1.36
log
@for xfree86 prompt, make clear "y" and "n" are the answers
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.35 1998/04/15 16:10:34 deraadt Exp $
d75 1
a75 1
	cat /kern/msgbuf | egrep "^(e[dglp][0-9] |[dil]e[0-9] |f[ep]a[0-9] |fxp[0-9])" | cut -d" " -f1 | sort -u
@


1.35
log
@nice blank line
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.34 1998/04/11 09:47:09 deraadt Exp $
d90 1
a90 1
	echo -n "Do you expect to run any accelerated X servers on this machine? [n] "
@


1.34
log
@give user a chance to enable xf86(4)
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.33 1998/04/01 20:22:48 millert Exp $
d103 1
a103 1

@


1.33
log
@undo last change.  Don't want xlink by default.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.32 1998/04/01 20:21:51 millert Exp $
d88 16
@


1.32
log
@move xlink to i386 md sets
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.31 1998/03/30 20:48:15 deraadt Exp $
d44 1
a44 1
MDSETS="kernel xlink"
@


1.31
log
@blank line
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.30 1998/03/27 23:28:14 deraadt Exp $
d44 1
a44 1
MDSETS="kernel"
@


1.30
log
@simplify a message
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.29 1998/03/13 20:50:52 deraadt Exp $
a204 1

@


1.29
log
@drop right into install program
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.28 1998/03/12 08:49:23 deraadt Exp $
d203 3
a205 4
This program is designed to help you put OpenBSD on your disk, in a simple
and rational way.  You'll be asked several questions, and it would probably
be useful to have your disk's hardware manual, the installation notes, and a
calculator handy.
@


1.28
log
@banner and text body cleanups
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.27 1998/02/28 02:37:47 millert Exp $
d50 2
a51 2
	echo -n "Specify terminal type ["$TERM"]: "
	getresp "$TERM"
@


1.27
log
@Deal with sd/wd > 9 (wide, multiple controllers, etc)
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.26 1997/10/29 21:43:22 deraadt Exp $
d50 2
a51 2
	echo -n "Specify terminal type [pcvt25]: "
	getresp "pcvt25"
d125 7
a131 7
A single OpenBSD partition with id 'A6' should exist in the MBR.  All of your
OpenBSD partitions will be contained _within_ this partition, including your
swap space.  In the normal case it should be the only partition marked as
active.  (Unless you are using a multiple-OS booter, but you can adjust that
later.)  Furthermore, the MBR partitions must NOT overlap each other.
[If this is a new install, you are most likely going to want to type the
following fdisk commands: reinit, update, write, quit. Use the 'manual'
d152 10
a161 7
	echo "Inside the BIOS 'A6' partition you just created, there resides an OpenBSD"
	echo "partition table which defines how this BIOS partition is to be split up."
	echo "This table declares the offsets and sizes of your / partition, your swap"
	echo "space, and any other partitions you might create.  (NOTE: The OpenBSD"
	echo "disk label offsets are absolute, ie. relative to the start of the disk..."
	echo "NOT relative to the start of the BIOS 'A6' partition)."
	echo
d181 5
a185 5
For safety, also make sure all OpenBSD file systems within the offset and size
specified in the 'A6' BIOS partition table.  (By default, the disklabel editor
will try to enforce this).  If you are unsure of how to use multiple partitions
properly (ie. seperating /,  /usr, /tmp, /var, /usr/local, and other things)
just split the space into a root and swap partition for now.
a199 1
		echo ""
@


1.26
log
@clarify
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.25 1997/10/25 04:35:53 deraadt Exp $
d65 1
a65 1
	cat /kern/msgbuf | egrep "^[sw]d[0-9] " | cut -d" " -f1 | sort -u
d70 1
a70 1
	cat /kern/msgbuf | egrep "^a?cd[0-9] " | cut -d" " -f1 | sort -u
@


1.25
log
@spelling
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.24 1997/10/19 09:08:06 deraadt Exp $
d131 2
a132 2
following fdisk commands: reinit, update, write, quit.]
The current partition information is:
@


1.25.2.1
log
@merge in 1.25: clarify
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.26 1997/10/29 21:43:22 deraadt Exp $
d131 2
a132 2
following fdisk commands: reinit, update, write, quit. Use the 'manual'
command to read a full description.]  The current partition information is:
@


1.24
log
@better docs
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.23 1997/10/17 12:37:31 deraadt Exp $
d178 1
a178 1
For safetyp, also make sure all OpenBSD file systems within the offset and size
@


1.23
log
@indent
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.22 1997/10/17 12:30:09 deraadt Exp $
d130 2
@


1.22
log
@scrunch up a bit
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.21 1997/10/17 12:04:31 deraadt Exp $
d252 3
a254 3
CONGRATULATIONS!  You have successfully $what OpenBSD!  To boot the installed
system, enter halt at the command prompt. Once the system has halted, reset
the machine and boot from the disk.
@


1.21
log
@clarify messages significantly
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.20 1997/10/17 08:57:43 deraadt Exp $
a140 3
	echo "Please take note of the offset and size of the BIOS OpenBSD partition"
	echo "of the disk, as you will may that for the OpenBSD disk label later."
	echo
d174 7
a180 9
If this disk is shared with other operating systems, ensure those operating
systems have a BIOS partition table entry that spans the space they occupy
completely.  For safetyp, also make sure all OpenBSD file systems within the
offset and size specified in the 'A6' BIOS partition table.  (By default, the
disklabel editor will try to enforce this).

If you are unsure of how to use multiple partitions properly (ie. seperating
/,  /usr, /tmp, /var, /usr/local, and other things) just split the disk into
an root and swap partition for now.
@


1.20
log
@no need to run fdisk multiple times anymore
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.19 1997/10/17 04:39:17 deraadt Exp $
d125 6
a130 6
A single OpenBSD partition with id "A6" should exist in the MBR.  All the
of your OpenBSD partitions will be contained _within_ this partition,
including your swap space.  In the normal case it should be the only
partition marked as active.  (Unless you are using a multiple-OS booter, but
you can adjust that later.)  Furthermore, the MBR partitions must NOT overlap
each others.
a132 1
	echo "Current partition information is:"
d134 1
a134 1

d142 1
a142 3
	echo "of the disk, as you will may need that for the OpenBSD disk label."
	echo -n "Press [Enter] to continue "
	getresp ""
d153 8
a163 1
		echo -n "Do you wish to edit the OpenBSD disklabel on $_disk? [y]"
d166 2
a167 3
		md_prep_fdisk ${_disk}
		echo "WARNING: Disk $_disk has no label"
		echo -n "Do you want to create one with the disklabel editor? [y]"
d170 2
a171 2
		echo "WARNING: Label on disk $_disk is corrupted"
		echo -n "Do you want to try and repair the damage using the disklabel editor? [y]"
a174 6
	getresp "y"
	case "$resp" in
	y*|Y*) ;;
	*)	return ;;
	esac

d177 9
a185 21

Here is an example of what the partition information will look like once
you have entered the disklabel editor. Disk partition sizes and offsets
are in sector (most likely 512 bytes) units. Make sure these size/offset
pairs are on cylinder boundaries (the number of sector per cylinder is
given in the `sectors/cylinder' entry, which is not shown here).

Also, if this disk is shared with other operating systems and have a BIOS
partition table, make sure all file systems reserved for OpenBSD are within
the offset and size specified in the BIOS partition table.

Do not change any parameters except the partition layout and the label name.

[Example]
16 partitions:
#        size   offset    fstype   [fsize bsize   cpg]
  a:    50176        0    4.2BSD     1024  8192    16   # (Cyl.    0 - 111)
  b:    64512    50176      swap                        # (Cyl.  112 - 255)
  c:   640192        0   unknown                        # (Cyl.    0 - 1428)
  d:   525504   114688    4.2BSD     1024  8192    16   # (Cyl.  256 - 1428)
[End of example]
a187 2
	echo -n "Press [Enter] to continue "
	getresp ""
d201 1
a201 1
		echo "Welcome to the OpenBSD/i386 ${VERSION} installation program."
d204 4
a207 4
This program is designed to help you put OpenBSD on your disk,
in a simple and rational way.  You'll be asked several questions,
and it would probably be useful to have your disk's hardware
manual, the installation notes, and a calculator handy.
d212 1
a212 1
		echo "Welcome to the OpenBSD/i386 ${VERSION} upgrade program."
d215 4
a218 6
This program is designed to help you upgrade your OpenBSD system in a
simple and rational way.

As a reminder, installing the `etc' binary set is NOT recommended.
Once the rest of your system has been upgraded, you should manually
merge any changes to files in the `etc' set into those files which
d225 9
a233 9
As with anything which modifies your disk's contents, this
program can cause SIGNIFICANT data loss, and you are advised
to make sure your data is backed up before beginning the
installation process.

Default answers are displayed in brackets after the questions.
You can hit Control-C at any time to quit, but if you do so at a
prompt, you may have to hit return.  Also, quitting in the middle of
installation may leave your system in an inconsistent state.
d242 2
a243 2
OK, then.  Enter `halt' at the prompt to halt the machine.  Once the
machine has halted, power-cycle the system to load new boot code.
d257 3
a259 3
CONGRATULATIONS!  You have successfully $what OpenBSD!
To boot the installed system, enter halt at the command prompt. Once the
system has halted, reset the machine and boot from the disk.
@


1.19
log
@few clarifications
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.18 1997/10/11 08:12:21 deraadt Exp $
d123 8
a130 9
	while [ $_done = 0 ]; do
		echo
		cat << \__md_prep_fdisk_1
A single OpenBSD partition with id "A6" should exist in the MBR.
It should be the only partition marked as active.  (Unless you are using
a multiple-OS booter.)  Furthermore, the MBR partitions must NOT overlap
each others.  fdisk will be started in edit mode, and you will be able
to add this information as needed.  If you make a mistake, exit fdisk
without storing the new information, and you will be allowed to start over.
d133 2
a134 2
		echo "Current partition information is:"
		fdisk ${_disk}
d136 1
a136 16
		fdisk -e ${_disk}

		echo
		echo "The new partition information is:"
		fdisk ${_disk}

		echo
		echo "Is this information correct (if not, you will be permitted to "
		echo -n "edit it again)? [n] "
		getresp "n"

		case "$resp" in
		n*|N*) ;;
		*) _done=1 ;;
		esac
	done
d138 3
d142 2
a143 2
	echo "Please take note of the offset and size of the OpenBSD BIOS partition"
	echo "of the disk, as you will need that for the OpenBSD disk label."
@


1.18
log
@support fxp? devices
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.17 1997/10/02 16:01:39 deraadt Exp $
d126 6
a132 6
A single OpenBSD partition with id "A6" should exist in the MBR.
It should be the only partition marked as active.  Furthermore, the
partitions must NOT overlap each others.  fdisk will be started in
edit mode, and you will be able to add this information as needed.
If you make a mistake, exit fdisk without storing the new information,
and you will be allowed to start over.
d154 3
a156 2
	echo "Please take note of the offset and size of the OpenBSD partition"
	echo "of the disk, as you will need that for the BSD disk label."
d159 1
d172 1
a172 1
		echo -n "Do you wish to edit the disklabel on $_disk? [y]"
@


1.17
log
@always run fdisk, and skip extra disklabel whacks
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.16 1997/09/30 17:52:42 deraadt Exp $
d75 1
a75 1
	cat /kern/msgbuf | egrep "^(e[dglp][0-9] |[dil]e[0-9] |f[ep]a[0-9] )" | cut -d" " -f1 | sort -u
@


1.16
log
@use new fdisk & disklabel
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.15 1997/09/26 19:51:12 deraadt Exp $
a120 17
	echo "This disk has not previously been used with OpenBSD.  Do you wish"
	echo "to share this disk with other operating systems (such as Windows"
	echo -n "95, MS-DOS, Linux etc.)? [y]"
	getresp "y"
	case "$resp" in
	n*|N*)	return ;;
	*) ;;
	esac

	echo "WARNING: Wrong information in the BIOS partition table might"
	echo "render the disk unusable."

	echo
	echo "Current partition information is:"
	fdisk ${_disk}
	echo -n "Press [Enter] to continue "
	getresp ""
d127 6
a132 6
An OpenBSD partition should have type 166 (A6), and should be the only
partition marked as active.  Furthermore, the partitions must NOT
overlap each others.  fdisk will be started in update mode, and you
will be able to add this information as needed.  If you make a mistake,
exit fdisk without storing the new information, and you will be allowed
to start over.
d134 2
a135 2
		echo -n "Press [Enter] to continue "
		getresp ""
d165 2
a215 4
	disklabel -W ${_disk}
	disklabel ${_disk} >/tmp/label.$$
	disklabel -r -R ${_disk} /tmp/label.$$
	rm -f /tmp/label.$$
@


1.15
log
@installboot on sdXc not /dev/rsdXc
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.14 1997/09/21 14:16:00 deraadt Exp $
d154 1
a154 1
		fdisk -u ${_disk}
d235 1
a235 1
	disklabel -e ${_disk}
@


1.14
log
@first cut at using installboot in md_installboot()
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.13 1997/09/06 03:53:58 millert Exp $
d87 1
a87 1
	/usr/mdec/installboot -v /mnt/boot /usr/mdec/biosboot /dev/r${1}c
@


1.13
log
@Use real pcvt termcap entry, not dec vt220.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.12 1997/08/30 17:43:40 millert Exp $
d85 3
a87 1
	disklabel -B $1
@


1.12
log
@default term type is vt220
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.11 1997/05/14 21:39:13 millert Exp $
d50 2
a51 2
	echo -n "Specify terminal type [vt220]: "
	getresp "vt220"
@


1.11
log
@Add md_machine_arch()
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.10 1997/05/07 06:05:58 deraadt Exp $
d50 2
a51 2
	echo -n "Specify terminal type [pc3]: "
	getresp "pc3"
@


1.10
log
@= not eq
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.9 1997/05/04 04:51:28 tholo Exp $
d57 4
@


1.9
log
@Machine-dependent file systems wants -o style flags (but without the -o
itself); make it so for MSDOS mounts
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.8 1997/05/03 23:12:04 tholo Exp $
d134 1
a134 1
	while [ $_done eq 0 ]; do
@


1.8
log
@Install a kernel set
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.7 1997/05/03 07:50:15 tholo Exp $
d89 1
a89 1
    echo "-r"
@


1.7
log
@Almost complete install script that uses the machine-independant code from
the miniroot; not quite ready for prime-time yet but getting closer
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.3.2.5 1996/08/26 15:45:28 gwr Exp $
d44 1
a44 1
MDSETS=""
d233 3
a235 3
	echo -n "Copying kernel..."
	cp -p /bsd /mnt/bsd
	echo "done."
@


1.6
log
@Fix typo
@
text
@d1 1
a1 2
#!/bin/sh
#	$OpenBSD: install.md,v 1.5 1997/04/22 10:34:41 deraadt Exp $
d3 2
a4 1
# Copyright (c) 1994 Christopher G. Demetriou
d7 3
d20 19
a38 3
#	This product includes software developed by Christopher G. Demetriou.
# 4. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission
d40 9
a48 29
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#	OpenBSD installation script.
#	In a perfect world, this would be a nice C program, with a reasonable
#	user interface.

DT=/etc/disktab				# /etc/disktab
FSTABDIR=/mnt/etc			# /mnt/etc
#DONTDOIT=echo

VERSION=2.1
FSTAB=${FSTABDIR}/fstab

# XXX turn into a loop which understands ! for a subshell.  Also,
# XXX is it possible to detect ^Z in a prompt and re-prompt when sh
# XXX is unsuspended?
getresp() {
	read resp
	if [ "X$resp" = "X" ]; then
		resp=$1
d50 32
d84 17
a100 86
echo "Welcome to the OpenBSD ${VERSION} installation program."
echo ""
echo "This program is will put OpenBSD on your hard disk.  It is not painless"
echo "but it could be worse.  You'll be asked several questions, and it would"
echo "probably be useful to have your disk's hardware manual, the installation"
echo "notes, and a calculator handy."
echo ""
echo "In particular, you will need to know some reasonably detailed information"
echo "about your disk's geometry, because this program does not know everything."
echo ""
echo "As with anything which modifies your hard drive's contents, this program"
echo "can cause SIGNIFICANT data loss, and you are advised to make sure your"
echo "hard drive is backed up before beginning the installation process."
echo ""
echo "Default answers are displyed in brackets after the questions.  You can"
echo "hit Control-C at any time to quit.  Also, quitting towards the latter"
echo "part of the installation may leave your system in an inconsistent state."
echo ""
echo -n "Proceed with installation? [n] "
getresp "n"
case "$resp" in
y*|Y*)
	echo "Cool!  Let's get to it..."
	;;
*)
	echo "OK, simply reset the machine at any time."
	exit
	;;
esac

echo ""
echo "To do the installation, you'll need to provide some information about"
echo "your disk."

echo "OpenBSD can be installed on ST506, ESDI, IDE, or SCSI disks."
echo -n	"What kind of disk will you be installing on? [SCSI] "
getresp "SCSI"
case "$resp" in
esdi|ESDI|st506|ST506)
	drivetype=wd
	echo -n "Does it support _automatic_ sector remapping? [y] "
	getresp "y"
	case "$resp" in
	n*|N*)
		sect_fwd="sf:"
		;;
	*)
		sect_fwd=""
		;;
	esac
;;
ide|IDE)
	drivetype=wd
	sect_fwd=""
	type=ST506
	;;
scsi|SCSI)
	drivetype=sd
	sect_fwd=""
	type=SCSI
	;;
esac

# find out what units are possible for that disk, and query the user.
driveunits=`ls /dev/${drivetype}?a | sed -e 's,/dev/\(...\)a,\1,g'`
if [ "X${driveunits}" = "X" ]; then
	echo "FATAL ERROR:"
	echo "No devices for disks of type '${drivetype}'."
	echo "This is probably a bug in the install disks."
	echo "Exiting install program."
	exit
fi
prefdrive=${drivetype}0

echo "The following ${drivetype}-type disks are supported by this"
echo "installation procedure:"
echo "${driveunits}"
echo "Note that they may not exist in _your_ machine; the list of"
echo "disks in your machine was printed when the system was booting."
while [ "X${drivename}" = "X" ]; do
	echo -n	"Which disk would like to install on? [${prefdrive}] "
	getresp ${prefdrive}
	otherdrives=`echo "${driveunits}" | sed -e s,${resp},,`
	if [ "X${driveunits}" = "X${otherdrives}" ]; then
		echo "\"${resp}\" is an invalid drive name.  Valid choices"
		echo "are: "${driveunits}
d102 1
a102 1
		drivename=${resp}
a103 1
done
d105 14
a118 64
echo "Using disk ${drivename}."
echo -n	"What kind of disk is it? (one word please) [my${drivetype}] "
getresp "my${drivetype}"
labelname=$resp

echo ""
echo "You will now need to provide some information about your disk's geometry."
echo "This should either be in the User's Manual for your disk, or you should"
echo "have written down what OpenBSD printed when booting.  Note that the"
echo "geometry that's printed at boot time is preferred.)  You may choose to"
echo "view the initial boot messages for your system again right now if you like."
echo -n "View the boot messages again? [n] "
getresp "n"
case "$resp" in
y*|Y*)
	less -rsS /kern/msgbuf
	;;
*)
	echo ""
	;;
esac

echo "You will now enter the disk geometry information:"

bytes_per_sect=`cat /kern/msgbuf |\
    sed -n -e /^${drivename}:/p -e /^${drivename}:/q |\
    sed 's/\([^ ]*[ ]*\)\{8\}\([^ ]*\).*$/\2/'`
echo -n	"Number of bytes per disk sector? [$bytes_per_sect] "
getresp $bytes_per_sect
bytes_per_sect="$resp"

cyls_per_disk=`cat /kern/msgbuf |\
    sed -n -e /^${drivename}:/p -e /^${drivename}:/q |\
    sed 's/\([^ ]*[ ]*\)\{2\}\([^ ]*\).*$/\2/'`
echo -n "Number of disk cylinders? [$cyls_per_disk]"
getresp $cyls_per_disk
cyls_per_disk="$resp"

tracks_per_cyl=`cat /kern/msgbuf |\
    sed -n -e /^${drivename}:/p -e /^${drivename}:/q |\
    sed 's/\([^ ]*[ ]*\)\{4\}\([^ ]*\).*$/\2/'`
echo -n	"Number of disk tracks (heads) per disk cylinder? [$tracks_per_cyl]"
getresp $tracks_per_cyl
tracks_per_cyl="$resp"

sects_per_track=`cat /kern/msgbuf |\
    sed -n -e /^${drivename}:/p -e /^${drivename}:/q |\
    sed 's/\([^ ]*[ ]*\)\{6\}\([^ ]*\).*$/\2/'`
echo -n	"Number of disk sectors per disk track? [$sects_per_track]"
getresp $sects_per_track
sects_per_track="$resp"

cylindersize=`expr $sects_per_track \* $tracks_per_cyl`
cylbytes=`expr $cylindersize \* $bytes_per_sect`
disksize=`expr $cylindersize \* $cyls_per_disk`

echo ""
echo "Your disk has a total of $disksize $bytes_per_sect byte sectors,"
echo "arranged as $cyls_per_disk cylinders which contain $cylindersize "
echo "sectors ($cylbytes bytes) each."
echo "You can specify partition sizes in cylinders ('c') or sectors ('s')."
while [ "X${sizemult}" = "X" ]; do
	echo -n	"What units would you like to use? [cylinders] "
	getresp cylinders
d120 2
a121 13
	c*|C*)
		sizemult=$cylindersize
		sizeunit="cylinders"
		maxdisk=$cyls_per_disk
		;;
	s*|S*)
		sizemult=1
		sizeunit="sectors"
		maxdisk=$disksize;
		;;
	*)
		echo "Enter cylinders ('c') or sectors ('s')."
		;;
a122 1
done
d124 38
a161 121
if [ $sizeunit = "sectors" ]; then
	echo "For best disk performance or workable CHS-translating IDE systems,"
	echo "partitions should begin and end on cylinder boundaries.  Wherever"
	echo "possible, use multiples of the cylinder size ($cylindersize sectors)."
fi

echo -n ""
echo -n "Size of OpenBSD portion of disk (in $sizeunit) ? [$maxdisk] "
getresp "$maxdisk"
partition=$resp
partition_sects=`expr $resp \* $sizemult`
part_offset=0
if [ $partition_sects -lt $disksize ]; then
	echo -n "Offset of OpenBSD portion of disk (in $sizeunit)? [0]"
	getresp '0'
	part_offset=$resp
fi
badspacesec=0
if [ "$sect_fwd" = "sf:" ]; then
	badspacecyl=`expr $sects_per_track + 126`
	badspacecyl=`expr $badspacecyl + $cylindersize - 1`
	badspacecyl=`expr $badspacecyl / $cylindersize`
	badspacesec=`expr $badspacecyl \* $cylindersize`
	echo ""
	echo -n "Using $badspacesec sectors ($badspacecyl cylinders) for the "
	echo "bad144 bad block table"
fi

sects_left=`expr $partition_sects - $badspacesec`
units_left=`expr $sects_left / $sizemult`
echo ""
echo "There are $units_left $sizeunit left to allocate."
echo ""
root=0
while [ $root -eq 0 ]; do
	echo -n "Root partition size (in $sizeunit)? "
	getresp
	case $resp in
	[1-9]*)
		total=$resp
		if [ $total -gt $units_left ]; then
			echo -n	"Root size is greater than remaining "
			echo "free space on disk."
		else
			root=$resp
		fi
		;;
	esac
done
root_offset=$part_offset
part_used=`expr $root + $badspacesec / $sizemult`
units_left=`expr $partition - $part_used`
echo ""

swap=0
while [ $swap -eq 0 ]; do 
	echo "$units_left $sizeunit remaining in OpenBSD portion of disk."
	echo -n	"Swap partition size (in $sizeunit)? "
	getresp
	case $resp in
	[1-9]*)
		if [ $swap -gt $units_left ]; then
			echo -n	"Swap size is greater than remaining "
			echo "free space on disk."
		else
			swap=$resp
		fi
		;;
	esac
done
swap_offset=`expr $root_offset + $root`
part_used=`expr $part_used + $swap`
echo ""

fragsize=1024
blocksize=8192
cat /etc/disktab.preinstall > $DT
echo "" >> $DT
echo "$labelname|OpenBSD installation generated:\\" >> $DT
echo "	:dt=${type}:ty=winchester:\\" >> $DT
echo -n	"	:nc#${cyls_per_disk}:ns#${sects_per_track}" >> $DT
echo ":nt#${tracks_per_cyl}:\\" >> $DT
echo "	:se#${bytes_per_sect}:${sect_fwd}\\" >> $DT
_size=`expr $root \* $sizemult`
_offset=`expr $root_offset \* $sizemult`
echo -n	"	:pa#${_size}:oa#${_offset}" >> $DT
echo ":ta=4.2BSD:ba#${blocksize}:fa#${fragsize}:\\" >> $DT
_size=`expr $swap \* $sizemult`
_offset=`expr $swap_offset \* $sizemult`
echo "	:pb#${_size}:ob#${_offset}:tb=swap:\\" >> $DT
echo "	:pc#${disksize}:oc#0:\\" >> $DT

echo "You now must enter information about any other partitions to be created in"
echo "the OpenBSD portion of the disk.  This process will be complete when you've"
echo "filled up all remaining space in the OpenBSD portion of the disk."

while [ $part_used -lt $partition ]; do
	part_size=0
	units_left=`expr $partition - $part_used`
	while [ $part_size -eq 0 ]; do
		echo ""
		echo -n	"$units_left $sizeunit remaining in OpenBSD portion of "
		echo "the disk"
		echo -n "Next partition size (in $sizeunit) [$units_left] ? "
		getresp "$units_left"
		case $resp in
		[1-9]*)
			total=`expr $part_used + $resp`
			if [ $total -gt $partition ]; then
				echo "That would make the parition too large to fit!"
			else
				part_size=$resp
				part_used=$total
				part_name=""
				while [ "$part_name" = "" ]; do
					echo -n "Mount point? "
					getresp
					part_name=$resp
				done
			fi
			;;
d164 16
a179 99
	if [ "$ename" = "" ]; then
		ename=$part_name
		offset=`expr $part_offset + $root + $swap`
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pe#${_size}:oe#${_offset}" >> $DT
		echo ":te=4.2BSD:be#${blocksize}:fe#${fragsize}:\\" >> $DT
		offset=`expr $offset + $part_size`
	elif [ "$fname" = "" ]; then
		fname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pf#${_size}:of#${_offset}" >> $DT
		echo ":tf=4.2BSD:bf#${blocksize}:ff#${fragsize}:\\" >> $DT
		offset=`expr $offset + $part_size`
	elif [ "$gname" = "" ]; then
		gname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pg#${_size}:og#${_offset}" >> $DT
		echo ":tg=4.2BSD:bg#${blocksize}:fg#${fragsize}:\\" >> $DT
		offset=`expr $offset + $part_size`
	elif [ "$hname" = "" ]; then
		hname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:ph#${_size}:oh#${_offset}" >> $DT
		echo ":th=4.2BSD:bh#${blocksize}:fh#${fragsize}:\\" >> $DT
		part_used=$partition
	elif [ "$iname" = "" ]; then
		iname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pi#${_size}:oi#${_offset}" >> $DT
		echo ":ti=4.2BSD:bi#${blocksize}:fi#${fragsize}:\\" >> $DT
		part_used=$partition
	elif [ "$jname" = "" ]; then
		jname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pj#${_size}:oj#${_offset}" >> $DT
		echo ":tj=4.2BSD:bj#${blocksize}:fj#${fragsize}:\\" >> $DT
		part_used=$partition
	elif [ "$kname" = "" ]; then
		kname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pk#${_size}:ok#${_offset}" >> $DT
		echo ":tk=4.2BSD:bk#${blocksize}:fk#${fragsize}:\\" >> $DT
		part_used=$partition
	elif [ "$lname" = "" ]; then
		lname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pl#${_size}:ol#${_offset}" >> $DT
		echo ":tl=4.2BSD:bl#${blocksize}:fl#${fragsize}:\\" >> $DT
		part_used=$partition
	elif [ "$mname" = "" ]; then
		mname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pm#${_size}:om#${_offset}" >> $DT
		echo ":tm=4.2BSD:bm#${blocksize}:fm#${fragsize}:\\" >> $DT
		part_used=$partition
	elif [ "$nname" = "" ]; then
		nname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pn#${_size}:on#${_offset}" >> $DT
		echo ":tn=4.2BSD:bn#${blocksize}:fn#${fragsize}:\\" >> $DT
		part_used=$partition
	elif [ "$oname" = "" ]; then
		oname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:po#${_size}:oo#${_offset}" >> $DT
		echo ":to=4.2BSD:bo#${blocksize}:fo#${fragsize}:\\" >> $DT
		part_used=$partition
	elif [ "$pname" = "" ]; then
		pname=$part_name
		_size=`expr $part_size \* $sizemult`
		_offset=`expr $offset \* $sizemult`
		echo -n "	:pp#${_size}:op#${_offset}" >> $DT
		echo ":tp=4.2BSD:bp#${blocksize}:fp#${fragsize}:\\" >> $DT
		part_used=$partition
	fi
done
echo "" >> $DT
sync

echo ""
echo "THIS IS YOUR LAST CHANCE!!!"
echo -n	"Are you SURE you want OpenBSD installed on your hard drive? (yes/no) "
answer=""
while [ "$answer" = "" ]; do
	getresp
	case $resp in
	yes|YES)
		answer=yes
d181 4
a184 3
	no|NO)
		echo "OK, then.  Simply reset your machine at any time."
		exit
d186 3
a188 2
	*)
		echo -n "I want a yes or no answer...  well? "
a190 1
done
d192 29
a220 2
umount -f /mnt > /dev/null 2>&1
umount -f /mnt2 > /dev/null 2>&1
d222 2
a223 144
echo ""
echo "Labeling disk $drivename..."
# XXX add fdisk support
$DONTDOIT disklabel -w -B $drivename $labelname

if [ "$sect_fwd" = "sf:" ]; then
	echo "Initializing bad144 badblock table..."
	$DONTDOIT bad144 $drivename 0
fi

echo "Initializing root filesystem, and mounting..."
$DONTDOIT newfs /dev/r${drivename}a $name
$DONTDOIT mount -v /dev/${drivename}a /mnt
if [ "$ename" != "" ]; then
	echo "Initializing $ename filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}e $name
	$DONTDOIT mkdir -p /mnt/$ename
	$DONTDOIT mount -v /dev/${drivename}e /mnt/$ename
fi
if [ "$fname" != "" ]; then
	echo "Initializing $fname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}f $name
	$DONTDOIT mkdir -p /mnt/$fname
	$DONTDOIT mount -v /dev/${drivename}f /mnt/$fname
fi
if [ "$gname" != "" ]; then
	echo "Initializing $gname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}g $name
	$DONTDOIT mkdir -p /mnt/$gname
	$DONTDOIT mount -v /dev/${drivename}g /mnt/$gname
fi
if [ "$hname" != "" ]; then
	echo "Initializing $hname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}h $name
	$DONTDOIT mkdir -p /mnt/$hname
	$DONTDOIT mount -v /dev/${drivename}h /mnt/$hname
fi
if [ "$iname" != "" ]; then
	echo "Initializing $iname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}i $name
	$DONTDOIT mkdir -p /mnt/$iname
	$DONTDOIT mount -v /dev/${drivename}i /mnt/$iname
fi
if [ "$jname" != "" ]; then
	echo "Initializing $jname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}j $name
	$DONTDOIT mkdir -p /mnt/$jname
	$DONTDOIT mount -v /dev/${drivename}j /mnt/$jname
fi
if [ "$kname" != "" ]; then
	echo "Initializing $kname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}k $name
	$DONTDOIT mkdir -p /mnt/$kname
	$DONTDOIT mount -v /dev/${drivename}k /mnt/$kname
fi
if [ "$lname" != "" ]; then
	echo "Initializing $lname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}l $name
	$DONTDOIT mkdir -p /mnt/$lname
	$DONTDOIT mount -v /dev/${drivename}l /mnt/$lname
fi
if [ "$mname" != "" ]; then
	echo "Initializing $mname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}m $name
	$DONTDOIT mkdir -p /mnt/$mname
	$DONTDOIT mount -v /dev/${drivename}m /mnt/$mname
fi
if [ "$nname" != "" ]; then
	echo "Initializing $nname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}n $name
	$DONTDOIT mkdir -p /mnt/$nname
	$DONTDOIT mount -v /dev/${drivename}n /mnt/$nname
fi
if [ "$oname" != "" ]; then
	echo "Initializing $oname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}o $name
	$DONTDOIT mkdir -p /mnt/$oname
	$DONTDOIT mount -v /dev/${drivename}o /mnt/$oname
fi
if [ "$pname" != "" ]; then
	echo "Initializing $pname filesystem, and mounting..."
	$DONTDOIT newfs /dev/r${drivename}p $name
	$DONTDOIT mkdir -p /mnt/$pname
	$DONTDOIT mount -v /dev/${drivename}p /mnt/$pname
fi

echo "Populating filesystems with bootstrapping binaries and config files"
$DONTDOIT tar -cXf - . | (cd /mnt ; tar -xpf - )

echo -n	"Creating an fstab..."
echo /dev/${drivename}a / ffs rw 1 1 | sed -e s,//,/, > $FSTAB
if [ "$ename" != "" ]; then
	echo /dev/${drivename}e /$ename ffs rw 1 2 | sed -e s,//,/, >> $FSTAB
fi
if [ "$fname" != "" ]; then
	echo /dev/${drivename}f /$fname ffs rw 1 3 | sed -e s,//,/, >> $FSTAB
fi
if [ "$gname" != "" ]; then
	echo /dev/${drivename}g /$gname ffs rw 1 4 | sed -e s,//,/, >> $FSTAB
fi
if [ "$hname" != "" ]; then
	echo /dev/${drivename}h /$hname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi
if [ "$iname" != "" ]; then
	echo /dev/${drivename}i /$iname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi
if [ "$jname" != "" ]; then
	echo /dev/${drivename}j /$jname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi
if [ "$kname" != "" ]; then
	echo /dev/${drivename}k /$kname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi
if [ "$lname" != "" ]; then
	echo /dev/${drivename}l /$lname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi
if [ "$mname" != "" ]; then
	echo /dev/${drivename}m /$mname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi
if [ "$nname" != "" ]; then
	echo /dev/${drivename}n /$nname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi
if [ "$oname" != "" ]; then
	echo /dev/${drivename}o /$oname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi
if [ "$pname" != "" ]; then
	echo /dev/${drivename}p /$pname ffs rw 1 5 | sed -e s,//,/, >> $FSTAB
fi

sync

echo "OK!  The preliminary work of setting up your disk is now complete."
echo "Currently the hard drive's root filesystem is mounted on /mnt"

echo 	""
echo "How would you like to install the distribution and kernels?"
echo -n	"ftp, http, msdos, ext2fs, tape, nfs, cd9660, local? [ftp] "
getresp "ftp"
method=${resp}
case "${method}" in
ftp|http|nfs)
	echo -n "What is your ethernet interface name? [ep0] "
	getresp "ep0"
	intf=${resp}
	echo -n "Does your ethernet interface need special flags like -link0? [] "
d225 81
a305 75
	intflags=${resp}
	echo -n "What is your IP address? [199.185.137.99] "
	getresp "199.185.137.99"
	myip=${resp}
	echo -n "What is your IP netmask? [255.255.255.0] "
	getresp "255.255.255.0"
	mymask=${resp}
	$DONTDOIT ifconfig ${intf} inet ${myip} netmask ${mymask} ${intflags} up
	echo -n "What is your default IP router? [199.185.137.128] "
	getresp "199.185.137.128"
	myrouter=${resp}
	$DONTDOIT route add default ${myrouter}
	ftp -V -a ftp://cvs.openbsd.org/pub/OpenBSD/ftplist | cat
	echo -n "What is the remote machine to fetch from? [ftp3.usa.openbsd.org] "
	getresp "ftp3.usa.openbsd.org"
	tohost=${resp}
	#ping -c 1 ${resp}
	echo -n "What is the path to fetch from? [pub/OpenBSD/snapshots/i386] "
	getresp "pub/OpenBSD/snapshots/i386"
	# XXX add proxy support?
	topath="${resp}"
	;;

msdos|ext2fs|cd9660)
	echo -n "which disk? [$drivename] "
	getresp "$drivename"
	$DONTDOIT disklabel "${resp}"
	drive=${resp}
	echo -n "which partition? [c] "
	getresp c
	part=${drive}${resp}
	$DONTDOIT mount -t $method /dev/$part /mnt2
	echo "We pray this has not bailed, ok?"
	echo -n "enter path on the device? [/] "
	getresp "/"
	fetch="cat /mnt2/${resp}"
	;;
local)
	echo -n "enter path on the device? [/] "
	getresp "/"
	fetch="cat /${resp}"
	;;
esac

case "$method" in
nfs)
	echo "XXX"
	echo "XXX should do the NFS mount here"
	echo "XXX"
	fetch="echo"
	;;
ftp)
	fetch="ftp -a ftp://${tohost}/${topath}"
	;;
http)
	fetch="ftp -a http://${tohost}/${topath}"
	;;

esac

cd /mnt
for i in bsd; do
	$DONTDOIT eval ${fetch}/${i} > $i
done
for i in bin.tar.gz dev.tar.gz etc.tar.gz sbin.tar.gz usr.bin.tar.gz \
    usr.games.tar.gz usr.include.tar.gz usr.lib.tar.gz usr.libexec.tar.gz \
    usr.misc.tar.gz usr.sbin.tar.gz usr.share.tar.gz var.tar.gz; do
	$DONTDOIT eval ${fetch}/${i} | tar xvfzp -
done
cd /

Configure
echo ""
echo "Your hard drive is still mounted.  Be sure to halt or reboot the"
echo "machine instead of simply turning it off."
@


1.5
log
@2.1
@
text
@d2 1
a2 1
#	$OpenBSD: install.md,v 1.4 1997/04/22 01:05:18 deraadt Exp $
d68 1
a68 1
echo "hit Control-C at any time to quit.  Also, quitting towards the latter
@


1.4
log
@fewer blank lines
@
text
@d2 1
a2 1
#	$OpenBSD: install.md,v 1.3 1997/04/22 00:35:09 deraadt Exp $
d40 1
a40 1
VERSION=2.0
d53 18
a70 21
echo	"Welcome to the OpenBSD ${VERSION} installation program."
echo	""
echo	"This program is will put OpenBSD on your hard disk.  It is not"
echo	"painless, but it could be worse.  You'll be asked several questions,"
echo	"and it would probably be useful to have your disk's hardware"
echo	"manual, the installation notes, and a calculator handy."
echo	""
echo	"In particular, you will need to know some reasonably detailed"
echo	"information about your disk's geometry, because there is currently"
echo	"no way this this program can figure that information out."
echo	""
echo	"As with anything which modifies your hard drive's contents, this"
echo	"program can cause SIGNIFICANT data loss, and you are advised"
echo	"to make sure your hard drive is backed up before beginning the"
echo	"installation process."
echo	""
echo	"Default answers are displyed in brackets after the questions."
echo	"You can hit Control-C at any time to quit, but if you do so at a"
echo	"prompt, you may have to hit return.  Also, quitting in the middle of"
echo	"installation may leave your system in an inconsistent state."
echo	""
d75 1
a75 1
	echo	"Cool!  Let's get to it..."
d78 1
a78 1
	echo	"OK, reset the machine at any time."
d83 3
a85 3
echo	""
echo	"To do the installation, you'll need to provide some information about"
echo	"your disk."
d87 1
a87 1
echo	"OpenBSD can be installed on ST506, ESDI, IDE, or SCSI disks."
d119 4
a122 4
	echo	"FATAL ERROR:"
	echo	"No devices for disks of type '${drivetype}'."
	echo	"This is probably a bug in the install disks."
	echo	"Exiting install program."
d127 5
a131 5
echo	"The following ${drivetype}-type disks are supported by this"
echo	"installation procedure:"
echo	"${driveunits}"
echo	"Note that they may not exist in _your_ machine; the list of"
echo	"disks in your machine was printed when the system was booting."
d137 2
a138 2
		echo	"\"${resp}\" is an invalid drive name.  Valid choices"
		echo	"are: "${driveunits}
d144 1
a144 2
echo	""
echo	"Using disk ${drivename}."
d149 6
a154 8
echo	""
echo	"You will now need to provide some information about your disk's"
echo	"geometry.  This should either be in the User's Manual for your disk,"
echo	"or you should have written down what OpenBSD printed when booting."
echo	"(Note that he geometry that's printed at boot time is preferred.)"
echo	""
echo    "You may choose to view the initial boot messages for your system"
echo    "again right now if you like."
d162 1
a162 1
	echo	""
d166 1
a166 2
echo	"You will now enter the disk geometry information"
echo	""
d200 5
a204 5
echo	""
echo	"Your disk has a total of $disksize $bytes_per_sect byte sectors,"
echo	"arranged as $cyls_per_disk cylinders which contain $cylindersize "
echo	"sectors ($cylbytes bytes) each."
echo	"You can specify partition sizes in cylinders ('c') or sectors ('s')."
d220 1
a220 1
		echo	"Enter cylinders ('c') or sectors ('s')."
d248 1
a248 1
	echo	""
d250 1
a250 1
	echo	"bad144 bad block table"
d255 3
a257 3
echo	""
echo	"There are $units_left $sizeunit left to allocate."
echo	""
d267 1
a267 1
			echo	"free space on disk."
d277 1
a277 1
echo	""
d281 1
a281 1
	echo	"$units_left $sizeunit remaining in OpenBSD portion of disk."
d288 1
a288 1
			echo	"free space on disk."
d297 1
a297 1
echo	""
d302 3
a304 3
echo	"" >> $DT
echo	"$labelname|OpenBSD installation generated:\\" >> $DT
echo	"	:dt=${type}:ty=winchester:\\" >> $DT
d306 2
a307 2
echo	":nt#${tracks_per_cyl}:\\" >> $DT
echo	"	:se#${bytes_per_sect}:${sect_fwd}\\" >> $DT
d311 1
a311 1
echo	":ta=4.2BSD:ba#${blocksize}:fa#${fragsize}:\\" >> $DT
d314 2
a315 2
echo	"	:pb#${_size}:ob#${_offset}:tb=swap:\\" >> $DT
echo	"	:pc#${disksize}:oc#0:\\" >> $DT
d317 3
a319 4
echo	"You will now have to enter information about any other partitions"
echo	"to be created in the OpenBSD portion of the disk.  This process will"
echo	"be complete when you've filled up all remaining space in the OpenBSD"
echo	"portion of the disk."
d325 1
a325 1
		echo	""
d327 1
a327 1
		echo	"the disk"
d438 2
a439 2
echo	""
echo	"THIS IS YOUR LAST CHANCE!!!"
a445 1
		echo	""
d449 1
a449 1
		echo	"OK, then.  Turn the machine off."
d461 1
a461 1
echo	""
d471 1
a471 1
echo	"Initializing root filesystem, and mounting..."
d475 1
a475 1
	echo	"Initializing $ename filesystem, and mounting..."
d481 1
a481 1
	echo	"Initializing $fname filesystem, and mounting..."
d487 1
a487 1
	echo	"Initializing $gname filesystem, and mounting..."
d493 1
a493 1
	echo	"Initializing $hname filesystem, and mounting..."
d499 1
a499 1
	echo	"Initializing $iname filesystem, and mounting..."
d505 1
a505 1
	echo	"Initializing $jname filesystem, and mounting..."
d511 1
a511 1
	echo	"Initializing $kname filesystem, and mounting..."
d517 1
a517 1
	echo	"Initializing $lname filesystem, and mounting..."
d523 1
a523 1
	echo	"Initializing $mname filesystem, and mounting..."
d529 1
a529 1
	echo	"Initializing $nname filesystem, and mounting..."
d535 1
a535 1
	echo	"Initializing $oname filesystem, and mounting..."
d541 1
a541 1
	echo	"Initializing $pname filesystem, and mounting..."
d547 1
a547 1
echo	"Populating filesystems with bootstrapping binaries and config files"
d591 2
a592 2
echo	"OK!  The preliminary work of setting up your disk is now complete."
echo	"Currently the hard drive's root filesystem is mounted on /mnt"
d595 1
a595 1
echo	"How would you like to install the distribution and kernels?"
d676 5
@


1.3
log
@first cut, ftp works
@
text
@d2 1
a2 1
#	$OpenBSD: install.md,v 1.2 1997/04/17 20:21:42 deraadt Exp $
a447 1
echo	""
a454 1
		echo	"Here we go..."
d458 1
a458 5
		echo	""
		echo -n	"OK, then.  enter 'halt' to halt the machine.  "
		echo    "Once the machine has halted,"
		echo -n	"remove the floppy, and press any key to "
		echo	"reboot."
d476 1
a476 1
	echo -n "Initializing bad144 badblock table..."
a477 1
	echo " done."
a483 1
	echo	""
a489 1
	echo	""
a495 1
	echo	""
a501 1
	echo	""
a507 1
	echo	""
a513 1
	echo	""
a519 1
	echo	""
a525 1
	echo	""
a531 1
	echo	""
a537 1
	echo	""
a543 1
	echo	""
a549 1
	echo	""
d556 1
a556 2
echo	""
echo    "Populating filesystems with bootstrapping binaries and config files"
a557 1
$DONTDOIT cp /tmp/.hdprofile /mnt/.profile
a558 1
echo	""
a598 1
echo	" done."
a600 1
echo 	""
d603 1
@


1.2
log
@fix msgbuf parsing
@
text
@d2 1
a2 1
#	$OpenBSD: install.md,v 1.1 1997/04/13 17:17:54 mickey Exp $
d43 3
d81 1
a81 3
	echo	"OK, then.  Enter 'halt' at the prompt to halt the"
	echo	"machine.  Once the machine has halted, remove the"
	echo	"floppy and press any key to reboot."
d175 3
a177 3
bytes_per_sect=`cat /kern/msgbuf \
	         | sed -n -e /^${drivename}:/p -e /^${drivename}:/q \
	         | sed 's/\([^ ]*[ ]*\)\{8\}\([^ ]*\).*$/\2/'`
d182 3
a184 3
cyls_per_disk=`cat /kern/msgbuf \
	       | sed -n -e /^${drivename}:/p -e /^${drivename}:/q \
	       | sed 's/\([^ ]*[ ]*\)\{2\}\([^ ]*\).*$/\2/'`
d189 3
a191 3
tracks_per_cyl=`cat /kern/msgbuf \
	        | sed -n -e /^${drivename}:/p -e /^${drivename}:/q \
	        | sed 's/\([^ ]*[ ]*\)\{4\}\([^ ]*\).*$/\2/'`
d196 3
a198 3
sects_per_track=`cat /kern/msgbuf \
	         | sed -n -e /^${drivename}:/p -e /^${drivename}:/q \
	         | sed 's/\([^ ]*[ ]*\)\{6\}\([^ ]*\).*$/\2/'`
a210 1
echo	""
d245 2
a246 2
	echo -n "Offset of OpenBSD portion of disk (in $sizeunit)? "
	getresp
a307 2
$DONTDOIT fsck -t ffs /dev/rfd0a
$DONTDOIT mount -u /dev/fd0a /
a355 1
	# XXX we skip partition d to avoid user confusion
d473 3
d477 2
a478 1
echo -n	"Labeling disk $drivename..."
a479 1
echo	" done."
a624 6
echo	"The remaining tasks are:"
echo	""
echo	"To copy a OpenBSD kernel to the hard drive's root filesystem."
echo	"Once accomplished, you can boot off the hard drive."
echo	""
echo	"To load and install the OpenBSD distribution sets."
d626 82
a707 7
echo	""
echo	"Consult the installation notes which will describe how to"
echo	"install the distribution sets and kernel.  Post-installation"
echo	"configuration is also discussed therein."
echo	""
echo	"GOOD LUCK!"
echo	""
@


1.1
log
@import of hp300's ramdisk stuff for i386.
merged w/ existing stuff...
awk nuked away from ramdisk, only MAKEDEV needs it.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.17 1997/01/28 07:07:36 deraadt Exp $
d183 1
a183 1
	       | sed 's/\([^ ]*[ ]*\)\{3\}\([^ ]*\).*$/\2/'`
d190 1
a190 1
	        | sed 's/\([^ ]*[ ]*\)\{5\}\([^ ]*\).*$/\2/'`
d197 1
a197 1
	         | sed 's/\([^ ]*[ ]*\)\{7\}\([^ ]*\).*$/\2/'`
@

