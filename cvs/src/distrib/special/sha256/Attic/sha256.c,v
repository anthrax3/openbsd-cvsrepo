head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.0.18
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.16
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.14
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.12
	OPENBSD_5_0:1.1.0.10
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.8
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2014.01.08.21.53.35;	author deraadt;	state dead;
branches;
next	1.1;

1.1
date	2009.04.17.03.48.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Switch to using the base sha256 command, rather than some customized
abomination.
install.sub chunk tested by rpe
@
text
@/*	$OpenBSD: sha256.c,v 1.1 2009/04/17 03:48:35 deraadt Exp $	*/

/*
 * Copyright (c) 2009 Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/types.h>
#include <err.h>
#include <errno.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sha2.h>

int
main(int argc, char *argv[])
{
	u_int8_t results[SHA256_DIGEST_LENGTH];
	size_t nread, nwrite, i;
	char buf[BUFSIZ];
	SHA2_CTX ctx;
	FILE *fp;

	if (argv[1] == NULL) {
		fprintf(stderr, "usage: sha256 outfile\n");
		exit(1);
	}

	fp = fopen(argv[1], "w");

	SHA256Init(&ctx);
	while ((nread = read(STDIN_FILENO, buf, sizeof buf)) > 0) {
		SHA256Update(&ctx, (u_int8_t *)buf, nread);
		for (i = 0; i < nread ; ) {
			nwrite = write(STDOUT_FILENO, buf + i, nread - i);
			if (nwrite == -1)
				exit(1);
			i += nwrite;
		}
	}
	SHA256End(&ctx, results);
	fprintf(fp, "%s\n", results);
	fclose(fp);
	exit(0);
}
@


1.1
log
@A very small sha256 program for the base media.  Use it by piping data
through it... input | sha256 outfile | output, then check the contents
of outfile after.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

