head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.2
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.4
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@# @;


1.18
date	2016.05.07.19.05.24;	author guenther;	state Exp;
branches;
next	1.17;
commitid	d9R7VGw9CHTkwXE1;

1.17
date	2015.10.17.21.48.42;	author guenther;	state Exp;
branches;
next	1.16;
commitid	YQncOOHv0oFoFQS9;

1.16
date	2015.09.11.06.13.36;	author guenther;	state Exp;
branches;
next	1.15;
commitid	iEu6uFTXXFyrrNjf;

1.15
date	2015.08.31.04.08.31;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	X1hCQhk84tNJSYVH;

1.14
date	2014.01.11.03.35.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.01.08.04.35.34;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2013.11.04.02.14.56;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2013.11.01.23.05.03;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.28.16.43.08;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2012.01.18.14.01.38;	author stsp;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.13.16.11.26;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.28.16.16.55;	author stsp;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.27.16.59.03;	author stsp;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.18.07.43.22;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.28.07.36.49;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.28.07.34.36;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.17.03.47.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.33.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@#	$OpenBSD: Makefile,v 1.17 2015/10/17 21:48:42 guenther Exp $

.include <bsd.own.mk>
LIB=    stubs
SRCS=	db.c setlocale.c sha1.c sha2.c getgrent.c getpwent.c \
	ethers.c \
	mbrtowc_sb.c sscanf.c vfprintf.c vfscanf.c
SRCS+=	asr.c			\
	asr_utils.c		\
	getaddrinfo.c		\
	getaddrinfo_async.c	\
	gethostnamadr.c		\
	gethostnamadr_async.c	\
	getnameinfo.c		\
	getnameinfo_async.c	\
	getnetnamadr.c		\
	getnetnamadr_async.c	\
	getrrsetbyname.c	\
	getrrsetbyname_async.c	\
	res_debug.c		\
	res_init.c		\
	res_mkquery.c		\
	res_query.c		\
	res_search_async.c	\
	res_send.c		\
	res_send_async.c	\
	sethostent.c

NOPIC=	Yes
NOPROFILE=Yes

CFLAGS+=-DSHA2_SMALL -UYP -DNO_LOG_BAD_DNS_RESPONSES \
	-DFLOATING_POINT -DASRNODEBUG -D__LIBC__ \
	-I${LIBCSRCDIR}/include -I${LIBCSRCDIR}/hidden \
	-I${LIBCSRCDIR}/asr -I${LIBCSRCDIR}/locale -I${LIBCSRCDIR}/gdtoa \
	-I${LIBCSRCDIR}/arch/${MACHINE_CPU}/gdtoa -I${LIBCSRCDIR}/stdio \
	-include namespace.h
CFLAGS+=

LIBCSRCDIR=${.CURDIR}/../../../lib/libc

.PATH: ${.CURDIR}/../../../lib/libc/hash
.PATH: ${.CURDIR}/../../../lib/libc/gen
.PATH: ${.CURDIR}/../../../lib/libc/asr
.PATH: ${.CURDIR}/../../../lib/libc/net
.PATH: ${.CURDIR}/../../../lib/libc/stdio

.include <bsd.lib.mk>
@


1.17
log
@Move the last of the __DBINTERFACE_PRIVATE bits from <db.h> to libc's wrapper
and eliminate the now superfluous -D option

ok kettenis@@ millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2015/09/11 06:13:36 guenther Exp $
d33 1
a33 1
	-DFLOATING_POINT -DASRNODEBUG \
@


1.16
log
@Blargh: unbreak after libc/Makefile.inc change
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2015/08/31 04:08:31 deraadt Exp $
d32 1
a32 1
CFLAGS+=-D__DBINTERFACE_PRIVATE -DSHA2_SMALL -UYP -DNO_LOG_BAD_DNS_RESPONSES \
@


1.15
log
@add -I${LIBCSRCDIR}/hidden to handle _glibc_ churn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2014/01/11 03:35:57 deraadt Exp $
d36 2
a37 1
	-I${LIBCSRCDIR}/arch/${MACHINE_CPU}/gdtoa -I${LIBCSRCDIR}/stdio  
@


1.14
log
@use NOMAN=1 for all directories
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2014/01/08 04:35:34 deraadt Exp $
d32 6
a37 5
CFLAGS+=-D__DBINTERFACE_PRIVATE -DSHA2_SMALL -UYP -I${LIBCSRCDIR}/include \
	-DNO_LOG_BAD_DNS_RESPONSES -I${LIBCSRCDIR}/locale \
	-I${LIBCSRCDIR}/gdtoa -I${LIBCSRCDIR}/arch/${MACHINE_CPU}/gdtoa \
	-I${LIBCSRCDIR}/stdio -DFLOATING_POINT
CFLAGS+=-I${LIBCSRCDIR}/asr -DASRNODEBUG
@


1.13
log
@rename SHA256_ONLY to SHA2_SMALL; changing things so that sha512 support
is also pulled in
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2013/11/04 02:14:56 deraadt Exp $
a30 1
NOMAN=	1
@


1.12
log
@oops, meant MACHINE_CPU not MACHINE_ARCH  (matters for mips64*)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2013/11/01 23:05:03 deraadt Exp $
d33 1
a33 1
CFLAGS+=-D__DBINTERFACE_PRIVATE -DSHA256_ONLY -UYP -I${LIBCSRCDIR}/include \
@


1.11
log
@Provide -I's to reach the gdtoa directory for .h files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2013/03/28 16:43:08 eric Exp $
d35 1
a35 1
	-I${LIBCSRCDIR}/gdtoa -I${LIBCSRCDIR}/arch/${MACHINE_ARCH}/gdtoa \
@


1.10
log
@switch to the new resolver implementation.
requested by many.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2012/01/18 14:01:38 stsp Exp $
d35 1
@


1.9
log
@Add support for C99 %ls, %lc, and %l[ format directives to scanf(3).
Based on code from FreeBSD.
Tested by myself (full release/install cycle on i386 and sparc64) and ajacoutot.
Man page help from jmc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2010/10/13 16:11:26 deraadt Exp $
d6 1
a6 1
	ethers.c getaddrinfo.c gethostnamadr.c getnetnamadr.c \
d8 21
d36 1
d42 1
@


1.8
log
@Put sha1.c here too, to gain savings from the -Os
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2010/07/28 16:16:55 stsp Exp $
d7 1
a7 1
	mbrtowc_sb.c vfprintf.c
@


1.7
log
@Fix fallout from the utf-8 commit (segfaults in disklabel on install media).
Sorry about that.
ok sthen deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2010/07/27 16:59:03 stsp Exp $
d5 1
a5 1
SRCS=	db.c setlocale.c sha2.c getgrent.c getpwent.c \
@


1.6
log
@Replace the single-byte placeholders for the multi-byte/wide-character
conversion interfaces of libc (mbrtowc(3) and friends) with new
implementations that internally call an API based on NetBSD's citrus.
This allows us to support locales with multi-byte character encodings.

Provide two implementations of the citrus-based API: one based on the old
single-byte placeholders for use with our existing single-byte character
locales (C, ISO8859-*, KOI8, CP1251, etc.), and one that provides support
for UTF-8 encoded characters (code based on FreeBSD's implementation).

Install the en_US.UTF-8 ctype locale support file, and allow the UTF-8
ctype locale to be enabled via setlocale(3) (export LC_CTYPE='en_US.UTF-8').

A lot of programs, especially from ports, will now start using UTF-8 if the
UTF-8 locale is enabled. Use at your own risk, and please report any breakage.
Note that ncurses-based programs cannot display UTF-8 right now, this is being
worked on.

To prevent install media growth, add vfprintf(3) and mbrtowc(3) to libstubs.
The mbrtowc stub was copied unchanged from its old single-byte placeholder.
vfprintf.c doesn't need to be copied, just put in .PATH (hint by fgsch@@).

Testing by myself, naddy, sthen, nicm, espie, armani, Dmitrij D. Czarkoff.

ok matthieu espie millert sthen nicm deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2009/11/18 07:43:22 guenther Exp $
d13 2
a14 1
	-DNO_LOG_BAD_DNS_RESPONSES -I${LIBCSRCDIR}/locale -I${LIBCSRCDIR}/stdio
@


1.5
log
@More shrinkage, a bit for ramdisks but mostly for static binaries:
- wrap with #ifndef NO_LOG_BAD_DNS_RESPONSES libc code that uses
  p_class() and p_type() for diagnostics, then add that define to
  libstub to avoid pulling in res_debug_syms.o
- split rcmd() and ruserok() into separate files, as nothing uses both
- split readdir_r() to its own file
- split syslog_r() from syslog(), as the latter needs localtime(); many
  binaries no longer need to pull in all the time code after this; switch
  from usleep() to nanosleep() while we're at it

(The profit of analysis of -Wl,-M,--cref output)

Chops 888kB from /bin and /sbin on i386

ok deraadt@@, miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2009/10/28 07:36:49 deraadt Exp $
d6 2
a7 1
	ethers.c getaddrinfo.c gethostnamadr.c getnetnamadr.c
d13 1
a13 1
	-DNO_LOG_BAD_DNS_RESPONSES
d20 1
@


1.4
log
@Use a Makefile.inc to share all the -Os and such options we use
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2009/10/28 07:34:36 guenther Exp $
d11 2
a12 1
CFLAGS+=-D__DBINTERFACE_PRIVATE -DSHA256_ONLY -UYP -I${LIBCSRCDIR}/include
@


1.3
log
@Strip the YP code from the binaries on the ramdisk by building with -UYP
the six files from libc that are directly pulled in.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2009/04/17 03:47:16 deraadt Exp $
d9 1
a9 1
NOMAN=1
d11 1
a11 1
CFLAGS+=-Os -D__DBINTERFACE_PRIVATE -DSHA256_ONLY -UYP -I${LIBCSRCDIR}/include
@


1.2
log
@Pull sha2.c from libc into libstubs, but compile it with -DSHA256_ONLY
so that it is a lot smaller.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2005/08/03 22:33:58 espie Exp $
d5 2
a6 1
SRCS=	setlocale.c db.c sha2.c
d11 1
a11 1
CFLAGS+=-Os -D__DBINTERFACE_PRIVATE -DSHA256_ONLY
d16 2
@


1.1
log
@libstubs stuff, not yet active.
@
text
@d1 1
a1 1
#	$OpenBSD$
d5 1
a5 1
SRCS=	setlocale.c db.c
d10 1
a10 1
CFLAGS+=-Os -D__DBINTERFACE_PRIVATE
d13 2
@

