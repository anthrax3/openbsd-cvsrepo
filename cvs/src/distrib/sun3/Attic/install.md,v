head	1.16;
access;
symbols
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@# @;


1.16
date	2002.12.31.16.35.35;	author miod;	state dead;
branches;
next	1.15;

1.15
date	2002.11.07.01.28.52;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.24.23.45.05;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.27.02.18.34;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.22.01.48.38;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.20.16.53.57;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.18.17.56.03;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.14.01.49.25;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.09.21.54.46;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.08.23.01.47;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.07.02.03.57;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.31.17.30.31;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.14.03.34.15;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.23.01.51.52;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.23.19.44.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.20.21.29.03;	author miod;	state Exp;
branches;
next	;


desc
@@


1.16
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@#	$OpenBSD: install.md,v 1.15 2002/11/07 01:28:52 krw Exp $
#
#
# Copyright (c) 1996 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jason R. Thorpe.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by the NetBSD
#        Foundation, Inc. and its contributors.
# 4. Neither the name of The NetBSD Foundation nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#
# machine dependent section of installation/upgrade script.
#

MDTERM=sun
MDDISKDEVS='/^sd[0-9] /s/ .*//p;/^x[dy][0-9] /s/ .*//p'
ARCH=ARCH

md_set_term() {
}

md_installboot() {
	local _rawdev _prefix

	if [ -z "$1" ]; then
		echo No disk device specified, you must run installboot manually.
		return
	fi
	_rawdev=/dev/r${1}c

	# use extracted mdec if it exists (may be newer)
	if [ -e /mnt/usr/mdec/ufsboot ]; then
		_prefix=/mnt/usr/mdec
	elif [ -e /usr/mdec/ufsboot ]; then
		_prefix=/usr/mdec
	else
		echo No boot block prototypes found, you must run installboot manually.
		return
	fi

	echo Installing boot block...
	cp ${_prefix}/ufsboot /mnt/boot
	sync; sync; sync
	installboot -v /mnt/boot ${_prefix}/bootxx ${_rawdev}
}

md_checkfordisklabel() {
	# $1 is the disk to check
	local rval

	disklabel $1 > /dev/null 2> /tmp/checkfordisklabel
	if grep "no disk label" /tmp/checkfordisklabel; then
		rval=1
	elif grep "disk label corrupted" /tmp/checkfordisklabel; then
		rval=2
	else
		rval=0
	fi

	rm -f /tmp/checkfordisklabel
	return $rval
}

md_prep_disklabel()
{
	local _disk=$1

	md_checkfordisklabel $_disk
	case $? in
	0)	;;
	1)	echo WARNING: Disk $_disk has no label. You will be creating a new one.
		echo
		;;
	2)	echo WARNING: Label on disk $_disk is corrupted. You will be repairing.
		echo
		;;
	esac

	disklabel -W ${_disk}
	disklabel -f /tmp/fstab.${_disk} -E ${_disk}
}

md_congrats() {
}
@


1.15
log
@Treat 'bsd' like just another filename in THESETS, no more 'kernel'
logic.  As result, MDSETS gone from everything but mac68k.

MDSETS now treated as a list of complete file names to add to THESETS,
allowing more MD flexibility, i.e. may or may not be .tgz files.

All traces of tar.gz removed. Not used for sets since 2.7 or so. As a
result of code simplification from not having to consider tar.gz, the
functions get_sets(), make_lastset(), and set_not_done() are
eliminated, along with the global SETS.

Build THESETS and DEFAULTSETS to contain full file names.

Always install sets in the order they appear in THESETS, keeping
siteXX last but without needing special logic. More predictable for
user if a lot of set additions and removals done before being
satisfied, as the sets are now installed in the same order they appear
in the selection list.

Remove ability to look for non-set .tgz/.tar.gz files. The job of the
install scripts is to install the standard sets in a simple and
rational way. Not to install general tar balls. The user can do that
post-install or simply '!' out to do it during install. On their head
be it.

If no sets are found in a specified source, list the filenames in
THESETS to show what is being looked for.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.14 2002/09/24 23:45:05 deraadt Exp $
@


1.14
log
@fix english; krw ok
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.13 2002/08/27 02:18:34 krw Exp $
a41 2
# Machine-dependent install sets
MDSETS=kernel
@


1.13
log
@Move general partitioning advice from machine dependant per disk
routine to install.sh so it is displayed only once.

Strongly advise /, /tmp, /var, /usr and /home have their own
disk partitions as requested by deraadt@@.

Rather than rely on users not re-selecting an already initialized
disk, just allow them to choose from un-initialized disks.

Move get_root invocation into install.sub as both install.sh and
upgrade.sh did it first thing.

Remove the 'workaround' to a 'vnode aliasing bug' that came in
with the initial import of upgrade.sh from NetBSD. ok millert@@.

Rework verbiage in a few places. Clean up logic around looping
through disk units by handling root disk better.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.12 2002/05/22 01:48:38 krw Exp $
d100 1
a100 1
	1)	echo WARNING: Label on disk $_disk has no label. You will be creating a new one.
@


1.12
log
@Fix quoting botch in earlier commit. Make sure MDDISKDEVS and
MDCDDEVS actually work with non-empty values as well as the
supplied default this time.

Problem first detected by jsyn@@.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.11 2002/05/20 16:53:57 krw Exp $
a107 7
	# display example
	cat << __EOT
If you are unsure of how to use multiple partitions properly
(ie. separating /, /usr, /tmp, /var, /usr/local, and other things)
just split the space into a root and swap partition for now.

__EOT
@


1.11
log
@Eliminate md_questions(). It was used only to control the setting of
machdep.allowaperture. Remove the setting of machdep.allowaperture
from md_installboot().

Add MDXAPERTURE variable to relevant architectures.

Add a new function set_machdep_allowaperture(). It is called *after*
install_sets() (which changes when the X Window question is asked), and
if MDXAPERTURE is present modifies sysctl.conf.

Shrinks overall size for i386, macppc, sparc64 (which used md_questions
for machdep.allowaperture) but increases size a bit for other
architectures since set_machep_allowaperture is in install.sub.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.10 2002/05/18 17:56:03 krw Exp $
d45 1
a45 1
MDDISKDEVS="'/^sd[0-9] /s/ .*//p;/^x[dy][0-9] /s/ .*//p'"
@


1.10
log
@Eliminate md_get_diskdevs() and md_get_cddevs() by

1) Saving one boot's worth of dmesg in /tmp/dmesg.boot
2) Using sed to scan for devices and pull out names in
   new get_diskdevs() and get_cddevs() in install.sub
3) Saving any md disk/cd sed patterns in MDDISKDEVS and
   MDCDDEVS variables.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.9 2002/05/14 01:49:25 krw Exp $
a48 4
}

md_questions() {
	:
@


1.9
log
@Eliminate md_native_fstype() and md_native_fsopts(). Both functions
simply echo'd a single word if present at all.

Replace with variables MDFSTYPE and MDFSOPTS if required. Rework logic
in install.sub's mount_a_disk() to always include 'ro' as an option to
the mount command. This allows even those arch's with MDFSTYPE to
usually get by without MDFSOPTS.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.8 2002/05/09 21:54:46 krw Exp $
d45 1
a48 24
}

md_get_msgbuf() {
	# Only want to see one boot's worth of info
	dmesg > /tmp/msgbuf
	sed -n -f /dev/stdin /tmp/msgbuf <<- OOF
		/^OpenBSD /h
		/^OpenBSD /!H
		\${
			g
			p
		}
	OOF
}

md_get_diskdevs() {
	# return available disk devices
	md_get_msgbuf | sed -n 	-e '/^sd[0-9] /{s/ .*//;p;}' \
	    -e '/^x[dy][0-9] /{s/ .*//;p;}'
}

md_get_cddevs() {
	# return available CDROM devices
	md_get_msgbuf | sed -n 	-e '/^cd[0-9] /{s/ .*//;p;}'
@


1.8
log
@Elminate md_welcome_banner() and md_not_going_to_install() as the
output of both was essentially identical on all architectures. Replace
with welcome_banner() and not_going_to_install() in install.sub.

Abstract common verbiage from md_congrats() into congrats() which
calls md_congrats() for any architecture specific additional verbiage.

Reword things so ${MODE} can be plausibly used in more places.

Remove extraneous #!/bin/sh in hp300 install.md.

ok deraadt@@ espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.7 2002/05/08 23:01:47 krw Exp $
a100 8
}

md_native_fstype() {
	:
}

md_native_fsopts() {
	:
@


1.7
log
@Abstract out common md_set_term() code into set_term() in install.sub,
calling md_set_term() from set_term() to do machine dependent stuff.
Currently only i386 does anything - keyboard mappings.

Add MDTERM variable to allow install.md to set proper default terminal
type. Default to vt220.

Eliminate md_get_partition_range() as useless since every architecture
returned '[a-p]'.

Make default term for all mvme* architectures vt100 as requested by miod@@.

ok deraadt@@ millert@@ miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.6 2002/05/07 02:03:57 krw Exp $
a153 48
md_welcome_banner() {
{
	if [ "$MODE" = install ]; then
		cat << __EOT
Welcome to the OpenBSD/sun3 ${VERSION_MAJOR}.${VERSION_MINOR} installation program.

This program is designed to help you put OpenBSD on your disk in a simple and
rational way.
__EOT

	else
		cat << __EOT
Welcome to the OpenBSD/sun3 ${VERSION_MAJOR}.${VERSION_MINOR} upgrade program.

This program is designed to help you upgrade your OpenBSD system in a
simple and rational way.

As a reminder, installing the 'etc' binary set is NOT recommended.
Once the rest of your system has been upgraded, you should manually
merge any changes to files in the 'etc' set into those files which
already exist on your system.
__EOT
	fi

cat << __EOT

As with anything which modifies your disk's contents, this program can
cause SIGNIFICANT data loss, and you are advised to make sure your
data is backed up before beginning the installation process.

Default answers are displayed in brackets after the questions.  You
can hit Control-C at any time to quit, but if you do so at a prompt,
you may have to hit return.  Also, quitting in the middle of
installation may leave your system in an inconsistent state.

__EOT
} | more
}

md_not_going_to_install() {
	cat << __EOT

OK, then.  Enter 'halt' at the prompt to halt the machine.  Once the
machine has halted, power-cycle the system to load new boot code.

__EOT
}

a154 13
	local what;
	if [ "$MODE" = install ]; then
		what=installed
	else
		what=upgraded
	fi
	cat << __EOT

CONGRATULATIONS!  You have successfully $what OpenBSD!
To boot the installed system, enter halt at the command prompt. Once the
system has halted, reset the machine and boot from the disk.

__EOT
@


1.6
log
@All architectures now use miniroot, so eliminate last few getresp()
calls in favour of ask().

Fix the erroneous advice I gave to Hugh in vax getresp() -> ask().

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.5 2002/03/31 17:30:31 deraadt Exp $
d44 1
a47 4
	test -n "$TERM" && return
	ask "Specify terminal type:" sun
	TERM=$resp
	export TERM
a71 5
}

md_get_partition_range() {
	# return range of valid partition letters
	echo [a-p]
@


1.5
log
@bit of shrinkage, krw ok
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.4 2002/02/14 03:34:15 deraadt Exp $
d48 1
a48 2
	echo -n "Specify terminal type [sun]: "
	getresp sun
@


1.4
log
@version mishandling
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.3 2001/12/23 01:51:52 krw Exp $
a37 1

d43 1
a43 1
MDSETS="kernel"
d58 6
a63 6
                /^OpenBSD /h
                /^OpenBSD /!H
                \${
                        g
                        p
                }
d70 1
a70 1
				-e '/^x[dy][0-9] /{s/ .*//;p;}' 
d79 2
a80 2
    # return range of valid partition letters
    echo [a-p]
d105 1
a105 1
		
d143 2
a144 4
	0)
		;;
	1)
		echo WARNING: Label on disk $_disk has no label. You will be creating a new one.
d147 1
a147 2
	2)
		echo WARNING: Label on disk $_disk is corrupted. You will be repairing.
@


1.3
log
@Remove extra blank line displayed before the paragraph 'As with
anything ...' during install and/or upgrade on some archs.

On sparc, sparc64, sun3 and vax fix a typo ('echo Welcome' ->
'Welcome') in here-document displayed in md_welcome_banner().
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.2 2001/06/23 19:44:59 deraadt Exp $
d179 1
a179 1
Welcome to the OpenBSD/sun3 ${VERSION} upgrade program.
@


1.2
log
@argh.  stop using kernfs, using dmesg using sysctl.  encode ARCH into
install.md at build time.  remove some crud.  and the icing on the cake:
skip testing all this until next week
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.1 2000/06/20 21:29:03 miod Exp $
a174 1

d179 1
a179 1
echo Welcome to the OpenBSD/sun3 ${VERSION} upgrade program.
a187 1

@


1.1
log
@Completely new ramdisk stuff, inspired by the existing sparc ramdisk.
@
text
@d1 1
a1 1
#	$OpenBSD$
a43 2
MSGBUF=/kern/msgbuf
HOSTNAME=/kern/hostname
d45 1
a45 13

# an alias for hostname(1)
hostname() {
	if [ -x /bin/hostname ]; then
		/bin/hostname $1
	else
		if [ -z "$1" ]; then
			cat $HOSTNAME
		else
			echo $1 > $HOSTNAME
		fi
	fi
}
a54 21
md_makerootwritable() {
	# Was: do_mfs_mount "/tmp" "2048"
	# /tmp is the mount point
	# 2048 is the size in DEV_BIZE blocks

	if [ ! -w /tmp ]; then
		umount /tmp > /dev/null 2>&1
		if ! mount_mfs -s 2048 swap /tmp ; then
			cat << __EOT

FATAL ERROR: Can't mount the memory filesystem.

__EOT
			exit
		fi

		# Bleh.  Give mount_mfs a chance to DTRT.
		sleep 2
	fi
}

d56 3
a58 2
        # Only want to see one boot's worth of info
        sed -n -f /dev/stdin $MSGBUF <<- OOF
a65 4
}

md_machine_arch() {
	cat /kern/machine
@

