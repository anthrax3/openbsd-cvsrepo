head	1.26;
access;
symbols
	OPENBSD_6_0:1.26.0.4
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.24.0.6
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.18.0.6
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.4
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.2
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@# @;


1.26
date	2015.12.27.16.31.07;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	U0bA7BIph3cgPpCH;

1.25
date	2015.09.27.19.11.37;	author miod;	state Exp;
branches;
next	1.24;
commitid	hBkenwgDZ5CyhWsg;

1.24
date	2014.09.21.13.44.45;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	oU9URDYHjCPgvf88;

1.23
date	2014.08.26.21.36.44;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	d7fVtFqlTBeFuAsD;

1.22
date	2014.03.02.05.46.26;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2014.01.24.00.34.22;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2014.01.12.21.58.00;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2014.01.06.21.03.13;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2012.05.25.17.32.38;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.18.16.52.10;	author thib;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.18.05.40.47;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.05.22.30.59;	author todd;	state Exp;
branches;
next	1.14;

1.14
date	2009.07.26.19.12.07;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2009.05.31.18.39.33;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2009.05.30.04.01.29;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.05.23.18.20.37;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.14.18.58.17;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.17.03.58.54;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.04.01.09.20;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.25.17.13.25;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.20.18.21.13;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.29.15.40.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.18.16.08.26;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.13.21.45.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.13.21.27.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.10.12.04.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@welcome GENERIC.IP27 MP (dual cpu on O350 now)
ok visa
@
text
@#	$OpenBSD: Makefile,v 1.25 2015/09/27 19:11:37 miod Exp $

TOP=	${.CURDIR}/..

.include "${TOP}/Makefile.inc"

CDROM=		install${REV}.iso
RELXDIR?=	/home/relx-${MACHINE}
RELDIR?=	/home/rel-${MACHINE}

ALLIP=		22 26 27 28 30 32

BASE=		${RELDIR}/base${OSrev}.tgz ${RELDIR}/comp${OSrev}.tgz \
		${RELDIR}/game${OSrev}.tgz ${RELDIR}/man${OSrev}.tgz \
		${RELDIR}/INSTALL.${MACHINE}
.for IP in ${ALLIP}
BASE+=		${RELDIR}/bsd.IP${IP} ${RELDIR}/bsd.rd.IP${IP}
.endfor
BASE+=		${RELDIR}/bsd.mp.IP27 ${RELDIR}/bsd.mp.IP30
XBASE=		${RELXDIR}/xbase${OSrev}.tgz ${RELXDIR}/xfont${OSrev}.tgz \
		${RELXDIR}/xshare${OSrev}.tgz ${RELXDIR}/xserv${OSrev}.tgz

all: ${CDROM}

# Note regarding volume header size:
# boot32 currently (2013/12/29) needs 81 512 byte sectors, boot64 needs 190,
# bootecoff needs 73, the XFS partition needs 32768, and we need to keep some
# room for growth.

# The following values need to be consistent with the `cdroot' layout in
# /etc/disktab
SGIVOLSZ=8320	# oa, pp (size of volume header in 2048 byte sectors)
FFSSZ=153472	# pa     (size of the ffs partition in 2048 byte sectors)
CDROMSZ=316	# nt     (size of the iso image in megabytes)

# Creating an IP27 bootable CD-ROM image with a usable FFS filesystem on it
# is extremely tricky. We are facing the following challenges:
# - the IP27 XFS filesystem will only get recognized correctly if the volume
#   header uses 512 byte sectors.
# - the OpenBSD disklabel will reuse the sector size from the volume header,
#   yet we need to build a label with 2048 byte sectors.
# This can be overcome by building a 512 byte sector volume header, then
# filling the 2048 byte sector filesystem.

${CDROM}:
	-rm -rf ${.OBJDIR}/cd-dir
	mkdir -p ${.OBJDIR}/cd-dir/

	dd if=/dev/zero of=${.OBJDIR}/${CDROM} bs=2048b count=${CDROMSZ}

	# Create the 512 byte sector volume header

	vnconfig -v -c vnd0 ${.OBJDIR}/${CDROM}

	/usr/mdec/sgivol -qi -h `expr ${SGIVOLSZ} \* 4` vnd0
	uudecode -o ${.OBJDIR}/xfs512.bin.gz \
	    ${.CURDIR}/../cdfs/xfs512.bin.gz.uue
	gzip -d ${.OBJDIR}/xfs512.bin.gz
	cat ${DESTDIR}/usr/mdec/boot64 >> ${.OBJDIR}/xfs512.bin
	dd if=${.OBJDIR}/xfs512.bin of=${.OBJDIR}/xfs obs=16m conv=osync
	/usr/mdec/sgivol -qw xfsboot ${.OBJDIR}/xfs vnd0
	/usr/mdec/sgivol -qw bootecof ${DESTDIR}/usr/mdec/bootecoff vnd0
	/usr/mdec/sgivol -ql bootecof sash vnd0
	/usr/mdec/sgivol -qw boot32 ${DESTDIR}/usr/mdec/boot32 vnd0
	/usr/mdec/sgivol -ql boot32 sashARCS vnd0
	/usr/mdec/sgivol -qw boot64 ${DESTDIR}/usr/mdec/boot64 vnd0
	/usr/mdec/sgivol -ql boot64 sash64 vnd0

	vnconfig -u vnd0

	# Create the 2048 byte sector media with the FFS partition

	vnconfig -v -c -t cdroot vnd0 ${.OBJDIR}/${CDROM}

	disklabel -w vnd0 cdroot "OpenBSD/sgi     "
	newfs /dev/rvnd0a
	mount /dev/vnd0a ${.OBJDIR}/cd-dir
	mkdir -p ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}

	cp ${DESTDIR}/usr/mdec/bootecoff ${.OBJDIR}/cd-dir/bootecoff
	cp ${DESTDIR}/usr/mdec/boot32 ${.OBJDIR}/cd-dir/boot32
	cp ${DESTDIR}/usr/mdec/boot64 ${.OBJDIR}/cd-dir/boot64

	ln ${.OBJDIR}/cd-dir/bootecoff ${.OBJDIR}/cd-dir/boot-IP22
	ln ${.OBJDIR}/cd-dir/boot64 ${.OBJDIR}/cd-dir/boot-IP26
	ln ${.OBJDIR}/cd-dir/boot64 ${.OBJDIR}/cd-dir/boot-IP27
	ln ${.OBJDIR}/cd-dir/boot64 ${.OBJDIR}/cd-dir/boot-IP28
	ln ${.OBJDIR}/cd-dir/boot64 ${.OBJDIR}/cd-dir/boot-IP30
	ln ${.OBJDIR}/cd-dir/boot32 ${.OBJDIR}/cd-dir/boot-IP32

	cp -p ${BASE} ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}
	cp -p ${XBASE} ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}

	cat ${RELDIR}/SHA256 ${RELXDIR}/SHA256 > \
	    ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}/SHA256
	# XXX no SHA256.sig

.for IP in ${ALLIP}
	ln -f ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}/bsd.rd.IP${IP} \
	    ${.OBJDIR}/cd-dir/bsd.rd.IP${IP}
.endfor

	umount ${.OBJDIR}/cd-dir

	# Summary
	disklabel vnd0
	/usr/mdec/sgivol vnd0

	vnconfig -u vnd0

install:
	cp ${CDROM} ${RELDIR}/

unconfig:
	-umount /mnt
	-umount ${.OBJDIR}/cd-dir
	-vnconfig -u vnd0

clean cleandir:
	/bin/rm -f ${CDROM} xfs512.bin xfs
	rm -rf cd-dir

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.25
log
@Add IP26 kernels and boot blocks to the installation media.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2014/09/21 13:44:45 deraadt Exp $
d19 1
a19 1
BASE+=		${RELDIR}/bsd.mp.IP30
@


1.24
log
@xetc set does not go onto little iso
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2014/08/26 21:36:44 deraadt Exp $
d11 1
a11 1
ALLIP=		22 27 28 30 32
d83 1
d85 1
@


1.23
log
@no more exposed etc set
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2014/03/02 05:46:26 deraadt Exp $
d20 2
a21 3
XBASE=		${RELXDIR}/xbase${OSrev}.tgz ${RELXDIR}/xetc${OSrev}.tgz \
		${RELXDIR}/xfont${OSrev}.tgz ${RELXDIR}/xshare${OSrev}.tgz \
		${RELXDIR}/xserv${OSrev}.tgz
@


1.22
log
@Unfortunately... the "full-size downloadable" ISOs will ship without
internal-signing, because the procedures ran into some snags we can't
fix in time for release...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2014/01/24 00:34:22 deraadt Exp $
d14 1
a14 2
		${RELDIR}/etc${OSrev}.tgz ${RELDIR}/game${OSrev}.tgz \
		${RELDIR}/man${OSrev}.tgz \
@


1.21
log
@Refactor the install*.iso creation in regards to signing.
ok todd
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2014/01/12 21:58:00 deraadt Exp $
d93 4
a96 2
	cp -p ${RELDIR}/.i-SHA256 ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}/SHA256
	cp -p ${RELDIR}/.i-SHA256.sig ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}/SHA256.sig
@


1.20
log
@Place a SHA256 (not SHA256.sig, sorry not yet) onto the install*.iso
media to give some upcoming changes a chance of working.

Long discussions with todd and rpe
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2014/01/06 21:03:13 miod Exp $
d92 3
a100 5
	cp -p ${XBASE} ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}

	cat ${RELDIR}/SHA256 ${RELXDIR}/SHA256 > \
		${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}/SHA256

a110 5
	# update the SHA256 file
	grep -v ${CDROM} ${RELDIR}/SHA256 > ${RELDIR}/SHA256.new
	sum -a sha256 ${CDROM} >> ${RELDIR}/SHA256.new
	sort ${RELDIR}/SHA256.new > ${RELDIR}/SHA256
	rm ${RELDIR}/SHA256.new
@


1.19
log
@Rework the setup of the bootable installation cd-rom (installXX.iso) to
contain both a 2048-byte sector ffs filesystem, and a 512-byte volume header,
so that the IP27 boot magic^Wuglyness recently added to the boot-only cd-rom
(cdXX.iso) can be applied as well.

The full-blown installation iso can now boot on IP27/28/30/32/35.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2012/05/25 17:32:38 miod Exp $
d99 3
@


1.18
log
@Hook sgi IP28 kernels into the build. While there, update the iso images to
provide IP22 and IP28 kernels, as well as the ECOFF bootblock.

No objection from deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2011/04/18 16:52:10 thib Exp $
d27 20
a46 5
# Note regarding sgivol -h value:
# boot32 currently (2012/05/25) needs 22 2048 byte sectors, boot64 needs 50,
# bootecoff needs 20, and we need to keep some room for growth.
# IF THIS VALUE IS EVER CHANGED, make sure it is consistent with the `cdroot'
# layout in /etc/disktab!
d51 24
a74 1
	dd if=/dev/zero of=${.OBJDIR}/${CDROM} bs=2048b count=300
a76 8
	/usr/mdec/sgivol -i -h 128 vnd0
	/usr/mdec/sgivol -w bootecoff ${DESTDIR}/usr/mdec/bootecoff vnd0
	/usr/mdec/sgivol -l bootecoff sash vnd0
	/usr/mdec/sgivol -w boot32 ${DESTDIR}/usr/mdec/boot32 vnd0
	/usr/mdec/sgivol -l boot32 sashARCS vnd0
	/usr/mdec/sgivol -w boot64 ${DESTDIR}/usr/mdec/boot64 vnd0
	/usr/mdec/sgivol -l boot64 sash64 vnd0

d101 5
d122 1
a122 1
	/bin/rm -f ${CDROM}
@


1.17
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2010/10/18 05:40:47 deraadt Exp $
d11 2
a15 3
		${RELDIR}/bsd.IP27 ${RELDIR}/bsd.rd.IP27 \
		${RELDIR}/bsd.IP30 ${RELDIR}/bsd.rd.IP30 \
		${RELDIR}/bsd.IP32 ${RELDIR}/bsd.rd.IP32 \
d17 4
d28 3
a30 3
# boot32 currently needs 20 2048 byte sectors, boot64 currently needs 44,
# and there is some room for growth.
# IF THIS VALUE IS EVER CHANGED, make sure it is consistent with the cdroot
d36 1
a36 1
	dd if=/dev/zero of=${.OBJDIR}/${CDROM} bs=2048b count=280
d39 3
a41 1
	/usr/mdec/sgivol -i -h 80 vnd0
d52 1
d55 1
d57 1
d63 4
a66 6
	ln -f ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}/bsd.rd.IP27 \
	    ${.OBJDIR}/cd-dir/bsd.rd.IP27
	ln -f ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}/bsd.rd.IP30 \
	    ${.OBJDIR}/cd-dir/bsd.rd.IP30
	ln -f ${.OBJDIR}/cd-dir/${OSREV}/${MACHINE}/bsd.rd.IP32 \
	    ${.OBJDIR}/cd-dir/bsd.rd.IP32
@


1.16
log
@no more misc set
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2010/02/05 22:30:59 todd Exp $
d34 1
a34 1
	vnconfig -v -c -t cdroot svnd0 ${.OBJDIR}/${CDROM}
d36 9
a44 9
	/usr/mdec/sgivol -i -h 80 svnd0
	/usr/mdec/sgivol -w boot32 ${DESTDIR}/usr/mdec/boot32 svnd0
	/usr/mdec/sgivol -l boot32 sashARCS svnd0
	/usr/mdec/sgivol -w boot64 ${DESTDIR}/usr/mdec/boot64 svnd0
	/usr/mdec/sgivol -l boot64 sash64 svnd0

	disklabel -w svnd0 cdroot "OpenBSD/sgi     "
	newfs /dev/rsvnd0a
	mount /dev/svnd0a ${.OBJDIR}/cd-dir
d65 1
a65 1
	vnconfig -u svnd0
d78 1
a78 1
	-vnconfig -u svnd0
@


1.15
log
@tweak cdboot slightly upwards so all files can fit
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2009/07/26 19:12:07 deraadt Exp $
d13 1
a13 1
		${RELDIR}/man${OSrev}.tgz ${RELDIR}/misc${OSrev}.tgz \
@


1.14
log
@Noticed we had run out of cd space.  What a giant CD!  Instead of putting
gzip'd copies of the bsd.rd's on the media, just link to the ones in the
release dir, saving more than 18% of the media size
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2009/05/31 18:39:33 miod Exp $
d33 1
a33 1
	dd if=/dev/zero of=${.OBJDIR}/${CDROM} bs=2048b count=240
@


1.13
log
@224MB is no longer enough for the full sgi iso, crank to 240MB.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2009/05/30 04:01:29 miod Exp $
a21 1
BSDRD=	bsd.rd
a46 6
	gzip -9f < ${.OBJDIR}/../ramdisk/${BSDRD}.IP27> \
	    ${.OBJDIR}/cd-dir/bsd.rd.IP27
	gzip -9f < ${.OBJDIR}/../ramdisk/${BSDRD}.IP30> \
	    ${.OBJDIR}/cd-dir/bsd.rd.IP30
	gzip -9f < ${.OBJDIR}/../ramdisk/${BSDRD}.IP32> \
	    ${.OBJDIR}/cd-dir/bsd.rd.IP32
d54 8
@


1.12
log
@Build IP27 and IP30 kernels on sgi; put then on the cdrom images too
(although for now our cd images fail to boot on IP27 and IP30).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2009/05/23 18:20:37 miod Exp $
d34 1
a34 1
	dd if=/dev/zero of=${.OBJDIR}/${CDROM} bs=2048b count=224
@


1.11
log
@Update `cdroot' disktab entry to match the volume header size we use now,
and mention this in the Makefile so that this hopefully doesn't get broken
next time the size is modified. Repairs install45.iso.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2009/05/14 18:58:17 miod Exp $
d14 3
a16 1
		${RELDIR}/bsd ${RELDIR}/bsd.rd \
a33 4
	cp ${DESTDIR}/usr/mdec/boot32 ${.OBJDIR}/boot32
	cp ${DESTDIR}/usr/mdec/boot64 ${.OBJDIR}/boot64
	gzip -9f < ${.OBJDIR}/../ramdisk/${BSDRD} > ${.OBJDIR}/bsd

d38 1
a38 1
	/usr/mdec/sgivol -w boot32 ${.OBJDIR}/boot32 svnd0
d40 1
a40 1
	/usr/mdec/sgivol -w boot64 ${.OBJDIR}/boot64 svnd0
d48 11
a58 7
	cp ${.OBJDIR}/bsd ${.OBJDIR}/cd-dir/bsd
	ln ${.OBJDIR}/cd-dir/bsd ${.OBJDIR}/cd-dir/bsd.rd
	cp ${.OBJDIR}/boot32 ${.OBJDIR}/cd-dir/boot32
	ln ${.OBJDIR}/boot32 ${.OBJDIR}/cd-dir/boot-IP32
	cp ${.OBJDIR}/boot64 ${.OBJDIR}/cd-dir/boot64
	ln ${.OBJDIR}/boot64 ${.OBJDIR}/cd-dir/boot-IP27
	ln ${.OBJDIR}/boot64 ${.OBJDIR}/cd-dir/boot-IP30
d80 1
a80 1
	/bin/rm -f ${CDROM} bsd boot32 boot64 boot-IP27 boot-IP30 boot-IP32
@


1.10
log
@Update to match the new bootblocks filenames.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2009/04/17 03:58:54 deraadt Exp $
d23 5
a38 2
	# boot32 needs 20 2048 byte sectors, boot64 needs 44,
	# and add some room for growth
@


1.9
log
@For SHA256 hashes to be ready to go onto the install media, we must
build the sets before we build the media.  While there we can get rid
of DESTDIR/snapshot too, and simply install straight into RELEASEDIR.
(This also ends up saving an astounding amount of traffic/latency in a nfs
environment)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2008/09/04 01:09:20 jsing Exp $
d27 2
a28 2
	objcopy -Sg -R .comment ${DESTDIR}/usr/mdec/boot ${.OBJDIR}/boot
	strip ${.OBJDIR}/boot
d34 7
a40 4
	# 22 * 2048 byte sectors = 44KB
	/usr/mdec/sgivol -i -h 22 svnd0
	/usr/mdec/sgivol -w boot ${.OBJDIR}/boot svnd0
	/usr/mdec/sgivol -l boot sashARCS svnd0
d49 5
a53 1
	cp ${.OBJDIR}/boot ${.OBJDIR}/cd-dir/boot
d75 1
a75 1
	/bin/rm -f ${CDROM} bsd boot
@


1.8
log
@Change ISO generation to use the new -t option for vnconfig.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2008/08/25 17:13:25 jsing Exp $
d56 5
@


1.7
log
@Now that the rest of the infrastructure is in place, actually create a
working installXX.iso for OpenBSD/sgi!

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2007/10/13 21:45:01 deraadt Exp $
d32 1
a32 1
	vnconfig -v -c -s 2048 svnd0 ${.OBJDIR}/${CDROM}
@


1.6
log
@re-enable iso building
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2008/02/18 16:08:26 jsing Exp $
d8 1
a8 1
RELXDIR=	/home/relx-${MACHINE}
a20 1
FFS=	ffs.img
d30 9
a38 2
	dd if=/dev/zero of=${.OBJDIR}/${FFS} bs=2048b count=224
	vnconfig -v -c svnd0 ${.OBJDIR}/${FFS}
a51 8
	@@df /dev/svnd0a
	vnconfig -u svnd0
	dd if=/dev/zero of=${.OBJDIR}/${CDROM} bs=1m count=10
	vnconfig -v -c svnd0 ${.OBJDIR}/${CDROM}
	# would love to use -h 64, but boot is slightly too big
	/usr/mdec/sgivol -i -h 88 svnd0 > ${.OBJDIR}/volhdr
	/usr/mdec/sgivol -w boot ${.OBJDIR}/boot svnd0
	/usr/mdec/sgivol -l boot sashARCS svnd0
a52 2
	dd if=${.OBJDIR}/${FFS} of=${.OBJDIR}/${CDROM} bs=512 \
	    seek=`cat ${.OBJDIR}/volhdr | grep 'Volume Header' | awk '{print $$3}'`
d63 1
a63 1
	/bin/rm -f ${CDROM} ${FFS} volhdr bsd boot
@


1.5
log
@disable these targets since this will not be fixed until post-release
@
text
@d22 1
a22 1
all: # ${CDROM}
d59 1
a59 1
	# cp ${CDROM} ${RELDIR}/
@


1.4
log
@sgivol(8) no longer requires the '-f' option.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2007/10/13 21:45:01 deraadt Exp $
d22 1
a22 1
all: ${CDROM}
d59 1
a59 1
	cp ${CDROM} ${RELDIR}/
@


1.3
log
@the iso can be smaller
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2007/10/13 21:27:20 deraadt Exp $
d51 3
a53 3
	/usr/mdec/sgivol -f -i -h 88 svnd0 > ${.OBJDIR}/volhdr
	/usr/mdec/sgivol -f -w boot ${.OBJDIR}/boot svnd0
	/usr/mdec/sgivol -f -l boot sashARCS svnd0
@


1.2
log
@install to right place
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2007/10/10 12:04:48 deraadt Exp $
d31 1
a31 1
	dd if=/dev/zero of=${.OBJDIR}/${FFS} bs=10m count=32
@


1.1
log
@a start at full sgi install cd
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/08/01 19:58:13 kettenis Exp $
d59 1
a59 1
	cp ${CDROM} ${DESTDIR}/snapshot
@

