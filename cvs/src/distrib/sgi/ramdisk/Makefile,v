head	1.23;
access;
symbols
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.10
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.2
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.18.0.6
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.4
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.2
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.1.0.12
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.10
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.8
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.23
date	2016.12.06.19.46.11;	author natano;	state Exp;
branches;
next	1.22;
commitid	VBak9CZgJO7REOtW;

1.22
date	2016.10.14.18.44.20;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	SCMr9f2ZDRZiobIN;

1.21
date	2015.09.20.12.55.11;	author miod;	state Exp;
branches;
next	1.20;
commitid	zlXl1mQ2gPmUr0g0;

1.20
date	2013.10.18.14.04.04;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2013.10.14.00.00.12;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2012.05.25.17.32.38;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2012.03.29.20.27.53;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.09.00.42.49;	author drahn;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.08.21.39.32;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2011.04.18.16.52.10;	author thib;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.15.03.11.22;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.31.19.44.35;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.05.30.04.01.29;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.14.21.16.38;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.17.03.58.54;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.12.03.18.52;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.02.03.20.58;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.02.01.01.07;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.24.17.23.26;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.11.10.16.40;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.17.00.28.21;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.13.17.34.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.22.33.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Use makefs to build bsd.rd; build & boot tested by visa
@
text
@#	$OpenBSD: Makefile,v 1.22 2016/10/14 18:44:20 deraadt Exp $

REV=		${OSrev}

TOP=		${.CURDIR}/..

BSD_RD=		bsd.rd
IMAGE=		mr.fs
CBIN?=		instbin
CRUNCHCONF?=	${CBIN}.conf
CRUNCHCONFS?=	${.CURDIR}/../common/crunch.conf
LISTS=		${.CURDIR}/list
UTILS?=		${.CURDIR}/../../miniroot

MTREE=		${UTILS}/mtree.conf

DISKTYPE=	rdroot
MAKEFSARGS_RD=	-o disklabel=${DISKTYPE},minfree=0,density=4096

.ifndef DESTDIR
all ${IMAGE}:
	@@echo setenv DESTDIR before makeing a ramdisk!
	@@false
.else

ALLIP=		22 26 27 28 30 32
ALLBSD=
ALLBSDRD=
.for IP in ${ALLIP}
ALLBSD+=	bsd.IP${IP}
ALLBSDRD+=	${BSD_RD}.IP${IP}
all:	${ALLBSDRD}
.endfor

.for IP in ${ALLIP}
bsd.IP${IP}:
.ifndef NOBUILD
	cd ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP${IP} && \
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && exec ${MAKE}'
.endif
	cp -p ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP${IP}/obj/bsd bsd.IP${IP}

${BSD_RD}.IP${IP}: ${IMAGE} bsd.IP${IP} rdsetroot
	cp bsd.IP${IP} ${BSD_RD}.IP${IP}
	${.OBJDIR}/rdsetroot ${BSD_RD}.IP${IP} ${IMAGE}
.endfor

${IMAGE}: ${CBIN}
	rm -rf $@@.d
	install -d -o root -g wheel $@@.d
	mtree -def ${MTREE} -p $@@.d -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} REV=${REV} \
	    TARGDIR=$@@.d UTILS=${UTILS} RELEASEDIR=${RELEASEDIR} \
	    sh ${UTILS}/runlist.sh ${LISTS}
	rm $@@.d/${CBIN}
	makefs ${MAKEFSARGS_RD} $@@ $@@.d

.endif

rdsetroot:	${TOP}/../common/elfrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o rdsetroot \
	    ${TOP}/../common/elfrdsetroot.c ${TOP}/../common/elf32.c \
	    ${TOP}/../common/elf64.c

${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CRUNCHCONF}
	crunchgen -M -E -D ${.CURDIR}/../../.. -L ${DESTDIR}/usr/lib ${.ALLSRC}

${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk SRCLIBDIR=${.CURDIR}/../../../lib all

${CRUNCHCONF}: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CBIN}.conf

clean cleandir:
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}.cache \
	    lib*.a lib*.olist ${CBIN}.map \
	    ${ALLBSD} ${ALLBSDRD} *.o *.lo *.c rdsetroot
	/bin/rm -rf ${IMAGE}.d

.ifdef RELEASEDIR
install:
	cp ${ALLBSDRD} ${RELEASEDIR}
.endif

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.22
log
@Use new kernel compile method for ramdisks, de-escalating to $BUILDUSER
as required.
much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2015/09/20 12:55:11 miod Exp $
a14 1
MOUNT_POINT=	/mnt
d17 2
a18 11
VND?=		vnd0
VND_DEV=	/dev/${VND}a
VND_RDEV=	/dev/r${VND}a
VND_CRDEV=	/dev/r${VND}c
PID!=		echo $$$$


DISKTYPE=       rdroot
NBLKS=          10240
# minfree, opt, b/i  trks, sects, cpg
NEWFSARGS= -m 0 -o space -i 4096
d43 1
a43 1
${BSD_RD}.IP${IP}: ${CBIN} ${IMAGE} bsd.IP${IP} rdsetroot
d48 9
a56 1
${IMAGE}: rd_setup do_files rd_teardown
a59 13
rd_setup: 
	dd if=/dev/zero of=${IMAGE} bs=512 count=${NBLKS}
	vnconfig -v -c ${VND} ${IMAGE}
	disklabel -w ${VND} ${DISKTYPE}
	newfs ${NEWFSARGS} ${VND_RDEV}
	fsck ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}

rd_teardown:
	@@df -i ${MOUNT_POINT}
	-umount ${MOUNT_POINT}
	-vnconfig -u ${VND}

a64 6
unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}

.PRECIOUS:	${IMAGE}

a73 7
do_files:
	mtree -def ${MTREE} -p ${MOUNT_POINT}/ -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} \
	    REV=${REV} TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    RELEASEDIR=${RELEASEDIR} sh ${UTILS}/runlist.sh ${LISTS}
	rm ${MOUNT_POINT}/${CBIN}

d78 1
@


1.21
log
@Enable IP26 builds.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2013/10/18 14:04:04 deraadt Exp $
a47 1
	cd ${.TOP}/../../sys/arch/sgi/conf && config RAMDISK-IP${IP}
d49 1
a49 1
	    ${MAKE} clean && exec ${MAKE}
d51 1
a51 1
	cp ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP${IP}/bsd bsd.IP${IP}
@


1.20
log
@cleanup elfrdsetroot references; ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2013/10/14 00:00:12 guenther Exp $
d36 1
a36 1
ALLIP=		22 27 28 30 32
@


1.19
log
@Turn on the distrib lib bits in crunchgen by setting SRCLIBDIR.
Add the new files to the clean target's rm list.

"why not get it tested?" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2012/05/25 17:32:38 miod Exp $
d76 1
a76 1
rdsetroot:	${TOP}/../common/rdsetroot.c
@


1.18
log
@Hook sgi IP28 kernels into the build. While there, update the iso images to
provide IP22 and IP28 kernels, as well as the ECOFF bootblock.

No objection from deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2012/03/29 20:27:53 miod Exp $
d91 1
a91 1
	${MAKE} -f ${CBIN}.mk all
d105 1
@


1.17
log
@Hook IP22 kernels to the build, and document how to boot the installation
media on them. Try to be helpful and explain how things may fail on the
older PROM and what to do about this.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2011/07/09 00:42:49 drahn Exp $
d36 8
a43 1
all:	${BSD_RD}.IP22 ${BSD_RD}.IP27 ${BSD_RD}.IP30 ${BSD_RD}.IP32
d45 2
a46 21
${BSD_RD}.IP22: ${CBIN} ${IMAGE} bsd.IP22 rdsetroot
	cp bsd.IP22 ${BSD_RD}.IP22
	${.OBJDIR}/rdsetroot ${BSD_RD}.IP22 ${IMAGE}

${BSD_RD}.IP27: ${CBIN} ${IMAGE} bsd.IP27 rdsetroot
	cp bsd.IP27 ${BSD_RD}.IP27
	${.OBJDIR}/rdsetroot ${BSD_RD}.IP27 ${IMAGE}

${BSD_RD}.IP30: ${CBIN} ${IMAGE} bsd.IP30 rdsetroot
	cp bsd.IP30 ${BSD_RD}.IP30
	${.OBJDIR}/rdsetroot ${BSD_RD}.IP30 ${IMAGE}

${BSD_RD}.IP32: ${CBIN} ${IMAGE} bsd.IP32 rdsetroot
	cp bsd.IP32 ${BSD_RD}.IP32
	${.OBJDIR}/rdsetroot ${BSD_RD}.IP32 ${IMAGE}

${IMAGE}: rd_setup do_files rd_teardown

.endif

bsd.IP22:
d48 2
a49 2
	cd ${.TOP}/../../sys/arch/sgi/conf && config RAMDISK-IP22
	cd ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP22 && \
d52 1
a52 1
	cp ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP22/bsd bsd.IP22
d54 4
a57 7
bsd.IP27:
.ifndef NOBUILD
	cd ${.TOP}/../../sys/arch/sgi/conf && config RAMDISK-IP27
	cd ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP27 && \
	    ${MAKE} clean && exec ${MAKE}
.endif
	cp ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP27/bsd bsd.IP27
d59 1
a59 7
bsd.IP30:
.ifndef NOBUILD
	cd ${.TOP}/../../sys/arch/sgi/conf && config RAMDISK-IP30
	cd ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP30 && \
	    ${MAKE} clean && ${MAKE}
.endif
	cp ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP30/bsd bsd.IP30
a60 5
bsd.IP32:
.ifndef NOBUILD
	cd ${.TOP}/../../sys/arch/sgi/conf && config RAMDISK-IP32
	cd ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP32 && \
	    ${MAKE} clean && ${MAKE}
a61 1
	cp ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP32/bsd bsd.IP32
d105 1
a105 5
	    bsd.IP22 ${BSD_RD}.IP22 \
	    bsd.IP27 ${BSD_RD}.IP27 \
	    bsd.IP30 ${BSD_RD}.IP30 \
	    bsd.IP32 ${BSD_RD}.IP32 \
	    *.o *.lo *.c rdsetroot
d109 1
a109 2
	cp ${BSD_RD}.IP22 ${BSD_RD}.IP27 ${BSD_RD}.IP30 ${BSD_RD}.IP32 \
	    ${RELEASEDIR}
@


1.16
log
@Unbreak most archs for the last commit. cut and paste changed rdsetroot
to elfrdsetroot. Does not yet fix sparc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2011/07/08 21:39:32 drahn Exp $
d36 5
a40 1
all:	${BSD_RD}.IP27 ${BSD_RD}.IP30 ${BSD_RD}.IP32
d58 8
d132 1
d140 2
a141 1
	cp ${BSD_RD}.IP27 ${BSD_RD}.IP30 ${BSD_RD}.IP32 ${RELEASEDIR}
@


1.15
log
@Allow the elf rdsetroot operation to function on 32 bit and 64 bit binaries.
Enables developers to build arm ramdisk kernels on amd64 archs
OK deraadt@@ 'looked fine' miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2011/04/18 16:52:10 thib Exp $
d92 1
a92 1
	${HOSTCC} ${HOSTCFLAGS} -o elfrdsetroot \
@


1.14
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2011/04/15 03:11:22 deraadt Exp $
d92 3
a94 1
	${HOSTCC} -o rdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.13
log
@No need to make depend kernels; ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2010/03/31 19:44:35 miod Exp $
d18 1
a18 1
VND?=		svnd0
@


1.12
log
@Add bnx firmware on installation media; this causes a media oflow, so
enlarge bsd.rd filesystem; this in turn causes a cd oflow, so enlarge
cd filesystem.
ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2009/05/30 04:01:29 miod Exp $
d58 1
a58 1
	    ${MAKE} clean && ${MAKE} depend && ${MAKE}
d66 1
a66 1
	    ${MAKE} clean && ${MAKE} depend && ${MAKE}
d74 1
a74 1
	    ${MAKE} clean && ${MAKE} depend && ${MAKE}
@


1.11
log
@Build IP27 and IP30 kernels on sgi; put then on the cdrom images too
(although for now our cd images fail to boot on IP27 and IP30).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2009/05/14 21:16:38 miod Exp $
d26 1
a26 1
NBLKS=          8192
@


1.10
log
@Rename sgi GENERIC and RAMDISK with -IP32 suffixes, and have the build
machinery minimally cope with this.

Discussed with and reluctantely accepted by deraadt@@; we both dislike
losing the ``naturally comes out of your fingers'' kernel names and the
``one size fits all'' logic; but for now I don't see any easy way to
get a single kernel binary able to run on multiple IP## flavours.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2009/04/17 03:58:54 deraadt Exp $
d36 1
a36 1
all:	${BSD_RD}
d38 11
a48 3
${BSD_RD}: ${CBIN} ${IMAGE} bsd rdsetroot
	cp bsd bsd.rd
	${.OBJDIR}/rdsetroot ${BSD_RD} ${IMAGE}
d54 18
a71 1
bsd:
d75 2
a76 1
	cp ${.TOP}/../../sys/arch/sgi/compile/RAMDISK-IP32/bsd bsd
d118 4
a121 1
	*.o *.lo *.c bsd ${BSD_RD} rdsetroot
d125 1
a125 1
	cp ${BSD_RD} ${RELEASEDIR}
@


1.9
log
@For SHA256 hashes to be ready to go onto the install media, we must
build the sets before we build the media.  While there we can get rid
of DESTDIR/snapshot too, and simply install straight into RELEASEDIR.
(This also ends up saving an astounding amount of traffic/latency in a nfs
environment)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2009/04/12 03:18:52 jsing Exp $
d47 2
a48 2
	cd ${.TOP}/../../sys/arch/sgi/conf && config RAMDISK
	cd ${.TOP}/../../sys/arch/sgi/compile/RAMDISK && \
d50 1
a50 1
	cp ${.TOP}/../../sys/arch/sgi/compile/RAMDISK/bsd bsd
@


1.8
log
@Run make depend before trying to build a RAMDISK kernel.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2008/12/02 01:01:07 deraadt Exp $
a73 3
install:
	cp ${BSD_RD} ${DESTDIR}/snapshot/

d87 1
a87 1
	    sh ${TOP}/../miniroot/runlist.sh ${LISTS}
d94 4
a97 2
beforeinstall:
	cp ${BSD.RD} ${DESTDIR}/snapshot
@


1.7
log
@commit with rdsetroot now accepting the filesystem as a 2nd arg
@
text
@d49 1
a49 1
	    ${MAKE} clean && ${MAKE}
@


1.6
log
@no longer need to compile rdsetroot with DEBUG
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2008/11/24 17:23:26 drahn Exp $
d40 1
a40 1
	${.OBJDIR}/rdsetroot ${BSD_RD} < ${IMAGE}
@


1.5
log
@Change mips detection in crunchgen from ifdef to command line flag
ok deraadt@@, fkr@@, rainer@@. manpage cleanup thanks to jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2008/01/11 10:16:40 espie Exp $
d66 1
a66 1
	${HOSTCC} -DDEBUG -o rdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.4
log
@cleanup: make -> ${MAKE} consistenly.
zap extra subshells.

okay miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2007/06/17 00:28:21 deraadt Exp $
d78 1
a78 1
	crunchgen -E -D ${.CURDIR}/../../.. -L ${DESTDIR}/usr/lib ${.ALLSRC}
@


1.3
log
@Stop using disklabel -r.  The disklabel code does not know all the semantics
for pushing disklabels onto the disk (and besides that, it is buggy and
unreadable crap); thanks for help from krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2007/04/13 17:34:40 millert Exp $
d49 1
a49 1
	    make clean && make
d81 1
a81 1
	make -f ${CBIN}.mk all
@


1.2
log
@Update install media generation to the new semantics of the -c flag.
Also replace "newfs -O" with "newfs -O 0" now that -O takes an option.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/08/06 22:33:27 deraadt Exp $
d55 1
a55 1
	disklabel -w -r ${VND} ${DISKTYPE}
@


1.1
log
@put ramdisk in right place
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2004/08/06 22:30:02 pefo Exp $
d28 1
a28 1
NEWFSARGS= -m 0 -o space -c 16 -i 4096
@

