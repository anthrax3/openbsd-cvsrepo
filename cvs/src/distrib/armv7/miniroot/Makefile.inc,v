head	1.19;
access;
symbols
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5;
locks; strict;
comment	@# @;


1.19
date	2017.01.19.06.55.58;	author jsg;	state Exp;
branches;
next	1.18;
commitid	cgY8YNkks4bPtjuz;

1.18
date	2016.06.05.15.12.56;	author jsg;	state Exp;
branches;
next	1.17;
commitid	3YZ8NfL3NQNAiDwB;

1.17
date	2016.05.29.23.42.58;	author jsg;	state Exp;
branches;
next	1.16;
commitid	Zb1QweWdcsbulAEf;

1.16
date	2016.05.28.10.10.36;	author jsg;	state Exp;
branches;
next	1.15;
commitid	lyq1bTt35yCdYASe;

1.15
date	2016.05.28.10.00.55;	author jsg;	state Exp;
branches;
next	1.14;
commitid	nR3PRBON13to4ZQ0;

1.14
date	2016.05.26.00.34.50;	author jsg;	state Exp;
branches;
next	1.13;
commitid	6JHnQEkhWNJ677xk;

1.13
date	2016.05.22.02.41.45;	author jsg;	state Exp;
branches;
next	1.12;
commitid	06QUiqGKiGxwMYin;

1.12
date	2016.05.21.07.19.24;	author jsg;	state Exp;
branches;
next	1.11;
commitid	OWPFNuoqUE520FJ7;

1.11
date	2016.03.27.00.40.38;	author jsg;	state Exp;
branches;
next	1.10;
commitid	FftsDUCclcinoBuT;

1.10
date	2016.03.27.00.29.09;	author jsg;	state Exp;
branches;
next	1.9;
commitid	bDrtjBz6d5qRdLfG;

1.9
date	2015.08.01.00.15.37;	author jsg;	state Exp;
branches;
next	1.8;
commitid	doqliPCfgnVqq7IG;

1.8
date	2015.06.02.01.48.25;	author jsg;	state Exp;
branches;
next	1.7;
commitid	oitX3N4o6JZ5SMvi;

1.7
date	2015.05.20.01.44.20;	author jsg;	state Exp;
branches;
next	1.6;
commitid	AyYz7FgJK6jKwvRv;

1.6
date	2015.01.26.01.55.55;	author jsg;	state Exp;
branches;
next	1.5;
commitid	h5sclZXjqIofAFSS;

1.5
date	2014.02.26.16.01.32;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.01.20.35.52;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.28.14.10.41;	author patrick;	state Exp;
branches;
next	1.2;

1.2
date	2013.09.07.23.04.43;	author patrick;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.04.20.00.22;	author patrick;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Mainline u-boot on SABRE Lite/BD-SL-i.MX6 does not have the generic
distro hooks that automatically load an efi file if found.

Instead it looks for a '6x_bootscript' u-boot script as the original
boundary devices u-boot did.

Create a script in the nitrogen miniroot and on install that will
load a dtb and bootarm.efi then call bootefi.  Based on notes
from matthieu@@
@
text
@
REV=	${OSrev}

IMAGE=	miniroot-${BOARD}-${REV}.fs
MKUBOOT?=	mkuboot

MOUNT_POINT=	/mnt

VND?=		vnd0
VND_DEV=	/dev/${VND}a
VND_CDEV=	/dev/${VND}c
VND_IDEV=	/dev/${VND}i
VND_RDEV=	/dev/r${VND}a
VND_CRDEV=	/dev/r${VND}c
VND_RIDEV=	/dev/r${VND}i
PID!=		echo $$$$

DISKTYPE=	miniroot
NBLKS=		36864
MSDOSSTART=	2048
MSDOSSIZE=	4096
FFSSTART!=	expr ${MSDOSSTART} + ${MSDOSSIZE}

FS?=		msdos
PART_ID?=C

NEWFS_ARGS_msdos=-L boot
MOUNT_ARGS_msdos=-o-l

PDTB=		/usr/local/share/dtb/arm
PUBOOT=		/usr/local/share/u-boot

cleandir: clean
clean:
	rm -f ${IMAGE}

.ifndef DESTDIR
all ${IMAGE}:
	@@echo setenv DESTDIR before making a ramdisk!
	@@false
.else
all:	${IMAGE}

${IMAGE}: rd_setup do_files rd_teardown

.endif

do_files:
	cp ${.OBJDIR}/../../ramdisk/bsd.rd ${MOUNT_POINT}/bsd.rd
	ln ${MOUNT_POINT}/bsd.rd ${MOUNT_POINT}/bsd
	-umount ${MOUNT_POINT}
	mount ${MOUNT_ARGS_msdos} ${VND_IDEV} ${MOUNT_POINT}
.for DTB in ${DTBS}
	cp ${PDTB}/${DTB} ${MOUNT_POINT}/
.endfor
.if ${PLATFORM} == "OMAP"
	cp ${PUBOOT}/${UBOOT}/{MLO,u-boot.img} ${MOUNT_POINT}/
.endif
.if ${BOARD} == "nitrogen"
	${MKUBOOT} -t script -a arm -o linux \
	    ${.CURDIR}/../boot.cmd ${MOUNT_POINT}/6x_bootscript
.endif
.if ${BOARD} == "cubox" || ${BOARD} == "wandboard"
	dd if=${PUBOOT}/${UBOOT}/SPL of=${VND_CDEV} bs=1024 seek=1
	dd if=${PUBOOT}/${UBOOT}/u-boot.img of=${VND_CDEV} bs=1024 seek=69
.endif
.if ${PLATFORM} == "SUNXI"
	dd if=${PUBOOT}/${UBOOT}/u-boot-sunxi-with-spl.bin \
	    of=${VND_CDEV} bs=1024 seek=8
.endif
	mkdir -p ${MOUNT_POINT}/efi/boot
	cp /usr/mdec/BOOTARM.EFI ${MOUNT_POINT}/efi/boot/bootarm.efi

rd_setup:
	dd if=/dev/zero of=${IMAGE} bs=512 count=${NBLKS}
	vnconfig -v -c -t ${DISKTYPE} ${VND} ${IMAGE}
	echo 'u\ne 0\n${PART_ID}\nn\n${MSDOSSTART}\n${MSDOSSIZE}\ne 3\nA6\nn\n${FFSSTART}\n*\nf 0\nw\nq\n' \
	    | fdisk -e ${VND} >/dev/null
	echo 'a a\n\n\n\nw\nq\n' | disklabel -E ${VND} >/dev/null
	newfs -t msdos ${NEWFS_ARGS_msdos} ${VND_RIDEV}
	newfs -m 0 -o space -i 4096 ${VND_RDEV}
	fsck ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}

rd_teardown:
	@@df -i ${MOUNT_POINT}
	-umount ${MOUNT_POINT}
	-vnconfig -u ${VND}

unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}

.PRECIOUS:	${IMAGE}

.ifdef RELEASEDIR
install:
	cp ${IMAGE} ${RELEASEDIR}
.endif

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
.include <bsd.own.mk>
@


1.18
log
@Previously armv7 ramdisk creation would tar up the mdec directory on the
build machine and extract it when installing.  Change to using the
u-boot and dtb packages when creating ramdisks and miniroots and don't
place these files in mdec on install.

Installing these packages is now required to run make release on armv7.
@
text
@d59 4
@


1.17
log
@Add back the fdisk command to flag the fat fs as active.
The omap boot rom that loads the first u-boot stage requires this.
@
text
@d30 3
d53 3
d57 1
a57 6
	cp /usr/mdec/${BOARD}/MLO ${MOUNT_POINT}/MLO
	cp /usr/mdec/${BOARD}/u-boot.* ${MOUNT_POINT}/
	cp /usr/mdec/${BOARD}/*.dtb ${MOUNT_POINT}/
.endif
.if ${BOARD} == "nitrogen"
	cp /usr/mdec/${BOARD}/*.dtb ${MOUNT_POINT}/
d60 2
a61 3
	cp /usr/mdec/${BOARD}/*.dtb ${MOUNT_POINT}/
	dd if=/usr/mdec/${BOARD}/SPL of=${VND_CDEV} bs=1024 seek=1
	dd if=/usr/mdec/${BOARD}/u-boot.img of=${VND_CDEV} bs=1024 seek=69
d64 1
a64 2
	cp /usr/mdec/${BOARD}/*.dtb ${MOUNT_POINT}/
	dd if=/usr/mdec/${BOARD}/u-boot-sunxi-with-spl.bin \
@


1.16
log
@Assume sabrelite/nitrogen has a bootefi enabled u-boot in flash and just
install dtbs and efiboot on the fat fs.
@
text
@d74 1
a74 1
	echo 'u\ne 0\n${PART_ID}\nn\n${MSDOSSTART}\n${MSDOSSIZE}\ne 3\nA6\nn\n${FFSSTART}\n*\nw\nq\n' \
@


1.15
log
@use efiboot in armv7 miniroot images
@
text
@d56 1
a56 2
	${MKUBOOT} -t script -a arm -o linux \
	    ${.CURDIR}/../boot.cmd ${MOUNT_POINT}/6x_bootscript
@


1.14
log
@Use a fat16 partition starting at sector 2048/1MB everywhere to simplify
things.  OMAP can still load the first u-boot stage (MLO) from the fs
and imx u-boot can load files off fat.  The offset allows space for the
u-boot images placed at raw offsets on imx and sunxi.

discussed with kettenis
@
text
@d18 1
d20 3
d27 1
a27 1
NEWFS_ARGS_msdos=-F 16 -L boot
d46 4
a49 2
	${MKUBOOT} -t script -a arm -o linux \
	    ${.CURDIR}/../boot.cmd ${MOUNT_POINT}/boot.scr
d56 2
a57 1
	mv ${MOUNT_POINT}/boot.scr ${MOUNT_POINT}/6x_bootscript
d69 2
a70 1
	cp ${.OBJDIR}/../../ramdisk/bsd.rd.${PLATFORM}.umg ${MOUNT_POINT}/bsd.umg
d74 8
a81 6
	vnconfig -c ${VND} ${IMAGE}
	fdisk -c 2 -h 255 -s 63 -yi ${VND} >/dev/null
	echo "u\ne 3\n0\ne 0\n${PART_ID}\ny\n0\n32\n33\n1\n254\n63\n63\nf 0\nw\nq" \
	    | fdisk -c 2 -h 255 -s 63 -e ${VND} >/dev/null
	newfs_${FS} ${NEWFS_ARGS_${FS}} ${VND_RIDEV} >/dev/null
	mount ${MOUNT_ARGS_${FS}} ${VND_IDEV} ${MOUNT_POINT}
@


1.13
log
@use a simple u-boot script for all the miniroots that loads with fdt
ok patrick@@ kettenis@@
@
text
@a23 1
NEWFS_ARGS_ext2fs=-v boot
a24 1
MOUNT_ARGS_ext2fs=
a67 4
.if ${PLATFORM} == "SUNXI"
	echo "u\ne 0\n${PART_ID}\ny\n0\n99\n1\n1\n254\n63\nf 0\nw\nq\n" \
	    | fdisk -c 2 -h 255 -s 63 -e ${VND} >/dev/null
.elif ${BOARD} == "cubox" || ${BOARD} == "wandboard"
a69 4
.else
	echo "u\ne 0\n${PART_ID}\ny\n0\n1\n1\n1\n254\n63\nf 0\nw\nq\n" \
	    | fdisk -c 2 -h 255 -s 63 -e ${VND} >/dev/null
.endif
@


1.12
log
@Copy dtb files to miniroots and install disk.  Increase the ramdisk size
and force long filenames on the first mount of fat 16 filesystems so
this works.

U-boot scripts have not yet been changed to load these files.

ok kettenis@@
@
text
@d44 2
a47 1
	echo "bootcmd=mmc rescan ; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; fatload mmc \$${mmcdev} \$${loadaddr} bsd.umg ; bootm \$${loadaddr} ;\nuenvcmd=boot" > ${MOUNT_POINT}/uenv.txt
d52 1
a52 3
	echo "; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; for dtype in sata mmc ; do for disk in 0 1 ; do \$${dtype} dev \$${disk} ; for fs in fat ext2 ; do if \$${fs}load \$${dtype} \$${disk}:1 \$${loadaddr} bsd.umg ; then  bootm \$${loadaddr} ; fi ; done; done; done; echo; echo failed to load bsd.umg" > 6x_bootscript.cmd
	${MKUBOOT} -t script -a arm -o linux 6x_bootscript.cmd 6x_bootscript.scr
	cp 6x_bootscript.scr ${MOUNT_POINT}/6x_bootscript
d54 1
a54 4
.if ${BOARD} == "cubox"
	echo "; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; for dtype in mmc usb ; do for disk in 0 1 ; do \$${dtype} dev \$${disk} ; for fs in fat ext2 ; do if \$${fs}load \$${dtype} \$${disk}:1 \$${loadaddr} bsd.umg ; then bootm \$${loadaddr} ; fi ; done; done; done; echo; echo failed to load bsd.umg" > boot.cmd
	${MKUBOOT} -t script -a arm -o linux boot.cmd boot.scr
	cp boot.scr ${MOUNT_POINT}/boot.scr
d56 2
a57 10
	dd if=/usr/mdec/cubox/SPL of=${VND_CDEV} bs=1024 seek=1
	dd if=/usr/mdec/cubox/u-boot.img of=${VND_CDEV} bs=1024 seek=69
.endif
.if ${BOARD} == "wandboard"
	echo "; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; for dtype in mmc ; do for disk in 0 1 ; do \$${dtype} dev \$${disk} ; for fs in fat ext2 ; do if \$${fs}load \$${dtype} \$${disk}:1 \$${loadaddr} bsd.umg ; then bootm \$${loadaddr} ; fi ; done; done; done; echo; echo failed to load bsd.umg" > boot.cmd
	${MKUBOOT} -t script -a arm -o linux boot.cmd boot.scr
	cp boot.scr ${MOUNT_POINT}/boot.scr
	cp /usr/mdec/${BOARD}/*.dtb ${MOUNT_POINT}/
	dd if=/usr/mdec/wandboard/SPL of=${VND_CDEV} bs=1024 seek=1
	dd if=/usr/mdec/wandboard/u-boot.img of=${VND_CDEV} bs=1024 seek=69
a59 3
	echo 'bootargs=sd0a:/bsd' > ${MOUNT_POINT}/uEnv.txt
	echo 'mmcboot=mmc rescan ; fatload mmc 0 ${LOADADDR} bsd.umg && bootm ${LOADADDR};' >> ${MOUNT_POINT}/uEnv.txt
	echo 'uenvcmd=run mmcboot;' >> ${MOUNT_POINT}/uEnv.txt
@


1.11
log
@Switch from the solidrun i.mx6 u-boot to mainline u-boot on cubox i.
The offset of u-boot.img in the disk image changes to be the same as
wandboard.
@
text
@d25 2
d48 1
a48 2
	mkdir ${MOUNT_POINT}/u-boots
	cp -r /usr/mdec/{am335x,beagle,panda} ${MOUNT_POINT}/u-boots
d59 1
d67 1
d72 1
a72 1
	echo 'bootargs=sd0a:/bsd' > ${MOUNT_POINT}/uEnv.tx
d75 1
d96 1
a96 1
	mount ${VND_IDEV} ${MOUNT_POINT}
@


1.10
log
@use MLO not mlo to match the names generated by u-boot builds
@
text
@d59 1
a59 1
	dd if=/usr/mdec/cubox/u-boot.img of=${VND_CDEV} bs=1024 seek=42
@


1.9
log
@Make use of u-boot 2015.07's unified wandboard config to provide a
miniroot to cover all current wandboard variations.

Unlike the other imx u-boot configs the wandboard config doesn't search
for ext2 only a fat fs.

Grow the ramdisk size to fit the extra u-boot files.

From Roman Kravchuk.
@
text
@d43 1
a43 1
	cp /usr/mdec/${BOARD}/mlo ${MOUNT_POINT}/mlo
@


1.8
log
@Rename the imx miniroot to nitrogen as it creates "6x_bootscript".
Add a miniroot for the CuBox-i which needs u-boot at a particular
offset in the sd image to boot.  Based on changes made by Patrick
Wildt in bitrig.
@
text
@d61 7
d84 1
a84 1
.elif ${BOARD} == "cubox"
@


1.7
log
@Now all the socs use the same va entry point and don't have any
conflicting symbols we can combine the configs.

Multiple umg files are still required however.  The bsd.umg target in
the kernel is replaced by targets for bsd.IMX.umg, bsd.OMAP.umg and
bsd.SUNXI.umg.
@
text
@d49 1
a49 1
.if ${PLATFORM} == "IMX"
d53 7
a59 1

d65 2
d75 5
a79 1
	echo "u\ne 0\n${PART_ID}\ny\n0\n99\n1\n1\n254\n63\nf 0\nw\nq\n" | fdisk -c 2 -h 255 -s 63 -e ${VND} >/dev/null
d81 2
a82 1
	echo "u\ne 0\n${PART_ID}\ny\n0\n1\n1\n1\n254\n63\nf 0\nw\nq\n" | fdisk -c 2 -h 255 -s 63 -e ${VND} >/dev/null
a89 4
.if ${PLATFORM} == "SUNXI"
	dd if=/usr/mdec/${BOARD}/u-boot-sunxi-with-spl.bin \
	    of=${VND_CDEV} bs=1024 seek=8
.endif
a90 1

@


1.6
log
@Rename miniroot-sunxi to miniroot-cubie as the u-boot included
in the image is for Cubieboard1.  Discussed with bmercer@@
While here switch from using the separate spl and u-boot images
to the combined spl and u-boot 'u-boot-sunxi-with-spl.bin'.
@
text
@a2 1
BSD_RD=		bsd.rd.OMAP
@


1.5
log
@Fix script to allow it to work on both SD and eMMC. -moj ok deraadt@@ nick@@
@
text
@d79 2
a80 2
	dd if=/usr/mdec/sunxi/sunxi-spl.bin of=${VND_CDEV} bs=1024 seek=8
	dd if=/usr/mdec/sunxi/u-boot.bin of=${VND_CDEV} bs=1024 seek=32
@


1.4
log
@hookup sunxi bits for miniroot and ramdisk, tested on pcduino.
note that on boards without ahci you will need to install to usb and still
boot of sd, at least until there's support for the sd slot.

ok patrick@@
@
text
@d45 1
a45 1
	echo "bootcmd=mmc rescan ; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; fatload mmc 0 \$${loadaddr} bsd.umg ; bootm \$${loadaddr} ;\nuenvcmd=boot" > ${MOUNT_POINT}/uenv.txt
@


1.3
log
@Revamp ARMv7 ramdisk and miniroot creation process.

Instead of running mkuboot during install, we call it on during
the release build, so that we can also ship bootable images
of the generic and the ramdisk kernel.

We can now build miniroots for imx, too.  The installer also
can recognize the SoC and makes decision based on it.

Use ext2fs for i.MX6 based devices.

Tar the bootloader files to save some space.

ok syl@@
@
text
@d56 5
d67 3
d71 1
d78 4
@


1.2
log
@Update ARMv7's release build process to build kernels and ramdisks
per SoC.  It's heavily based on the SGI port.

ok florian@@
@
text
@d6 1
d21 9
d43 1
a43 1
	echo 'bootcmd=mmc rescan ; setenv loadaddr 0x82800000 ; setenv bootargs sd0i:/bsd.umg ; fatload mmc 0 $${loadaddr} bsd.umg ; bootm $${loadaddr} ;\nuenvcmd=boot' > ${MOUNT_POINT}/uenv.txt
d45 1
d49 8
a56 2
	mkuboot -a arm -o linux -e 0x80300000 -l 0x80300000 \
		${.OBJDIR}/../../ramdisk/bsd.rd.OMAP ${MOUNT_POINT}/bsd.umg
d62 2
a63 2
	echo 'u\ne 0\nC\ny\n0\n1\n1\n1\n254\n63\nf 0\nw\nq\n' | fdisk -c 2 -h 255 -s 63 -e ${VND} >/dev/null
	newfs_msdos -F 16 -L boot ${VND_RIDEV} >/dev/null
@


1.1
log
@Beagle has been replaced by armv7.
@
text
@d3 1
a3 1
BSD_RD=		bsd.rd
d39 1
a39 1
		${.OBJDIR}/../../ramdisk/bsd.rd ${MOUNT_POINT}/bsd.umg
@

