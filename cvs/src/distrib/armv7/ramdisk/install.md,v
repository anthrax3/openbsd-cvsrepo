head	1.48;
access;
symbols
	OPENBSD_6_2:1.48.0.4
	OPENBSD_6_2_BASE:1.48
	OPENBSD_6_1:1.45.0.4
	OPENBSD_6_1_BASE:1.45
	OPENBSD_6_0:1.40.0.2
	OPENBSD_6_0_BASE:1.40
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5;
locks; strict;
comment	@# @;


1.48
date	2017.09.01.04.40.40;	author jsg;	state Exp;
branches;
next	1.47;
commitid	JSdY5ndU7KiCVAp0;

1.47
date	2017.08.22.23.27.52;	author jsg;	state Exp;
branches;
next	1.46;
commitid	bRBm0r8zC6JSYtUL;

1.46
date	2017.07.28.18.15.44;	author rpe;	state Exp;
branches;
next	1.45;
commitid	K369F2mXWuSRrNyX;

1.45
date	2017.01.24.05.29.22;	author jsg;	state Exp;
branches;
next	1.44;
commitid	IPWbxkNqTxjjTKEA;

1.44
date	2017.01.22.23.43.54;	author rpe;	state Exp;
branches;
next	1.43;
commitid	T8Ujv1g6HeWswBdS;

1.43
date	2017.01.19.06.55.58;	author jsg;	state Exp;
branches;
next	1.42;
commitid	cgY8YNkks4bPtjuz;

1.42
date	2016.09.04.10.06.11;	author jsg;	state Exp;
branches;
next	1.41;
commitid	2LijIlpjxvJWW5iZ;

1.41
date	2016.09.04.09.52.03;	author rpe;	state Exp;
branches;
next	1.40;
commitid	MluxzkKaq4wrtv84;

1.40
date	2016.06.05.15.35.38;	author jsg;	state Exp;
branches;
next	1.39;
commitid	ZVjoTpaYT5IE35zR;

1.39
date	2016.06.05.15.23.22;	author jsg;	state Exp;
branches;
next	1.38;
commitid	iCc8ytMNsqpIwk39;

1.38
date	2016.06.05.15.12.56;	author jsg;	state Exp;
branches;
next	1.37;
commitid	3YZ8NfL3NQNAiDwB;

1.37
date	2016.06.03.23.50.21;	author jsg;	state Exp;
branches;
next	1.36;
commitid	qVx63ZDNSAbwcO6z;

1.36
date	2016.05.30.18.57.04;	author rpe;	state Exp;
branches;
next	1.35;
commitid	dj0rmfnPqOrLSnfI;

1.35
date	2016.05.29.15.10.05;	author jsg;	state Exp;
branches;
next	1.34;
commitid	V2YIZCh7k6mPHQG9;

1.34
date	2016.05.29.07.38.01;	author jsg;	state Exp;
branches;
next	1.33;
commitid	Mj7jvvVOUly1nRny;

1.33
date	2016.05.28.10.10.36;	author jsg;	state Exp;
branches;
next	1.32;
commitid	lyq1bTt35yCdYASe;

1.32
date	2016.05.26.00.34.50;	author jsg;	state Exp;
branches;
next	1.31;
commitid	6JHnQEkhWNJ677xk;

1.31
date	2016.05.25.00.20.09;	author jsg;	state Exp;
branches;
next	1.30;
commitid	2mlQT6MzDpQXeClT;

1.30
date	2016.05.22.08.01.04;	author jsg;	state Exp;
branches;
next	1.29;
commitid	jW5fhMoLiRMEK2ok;

1.29
date	2016.05.22.06.43.03;	author jsg;	state Exp;
branches;
next	1.28;
commitid	Ao3AkXq9ETUAQTGX;

1.28
date	2016.05.21.07.19.24;	author jsg;	state Exp;
branches;
next	1.27;
commitid	OWPFNuoqUE520FJ7;

1.27
date	2016.04.20.14.40.59;	author abieber;	state Exp;
branches;
next	1.26;
commitid	ps03y2mPe70Zhpaq;

1.26
date	2016.03.27.00.40.38;	author jsg;	state Exp;
branches;
next	1.25;
commitid	FftsDUCclcinoBuT;

1.25
date	2016.03.27.00.29.09;	author jsg;	state Exp;
branches;
next	1.24;
commitid	bDrtjBz6d5qRdLfG;

1.24
date	2016.02.08.17.28.08;	author krw;	state Exp;
branches;
next	1.23;
commitid	4nj4L34RoKX0PFN0;

1.23
date	2015.12.29.11.16.14;	author rpe;	state Exp;
branches;
next	1.22;
commitid	dPgVJD33gNmmCKz4;

1.22
date	2015.12.23.13.31.22;	author rpe;	state Exp;
branches;
next	1.21;
commitid	RKAsz10r4gbquKHQ;

1.21
date	2015.12.18.16.20.58;	author rpe;	state Exp;
branches;
next	1.20;
commitid	VkQ4KC1oXExBZv81;

1.20
date	2015.12.02.21.57.50;	author krw;	state Exp;
branches;
next	1.19;
commitid	guw3IV4FQ0E0K3VT;

1.19
date	2015.08.01.00.25.14;	author jsg;	state Exp;
branches;
next	1.18;
commitid	5EzGlrr4CsNOvxUf;

1.18
date	2015.08.01.00.15.37;	author jsg;	state Exp;
branches;
next	1.17;
commitid	doqliPCfgnVqq7IG;

1.17
date	2015.07.07.03.31.58;	author jsg;	state Exp;
branches;
next	1.16;
commitid	ANeFb0jvVvIHNmlw;

1.16
date	2015.06.29.04.52.34;	author jsg;	state Exp;
branches;
next	1.15;
commitid	07H0kGMQZhgLy4Z6;

1.15
date	2015.06.08.18.31.17;	author jsg;	state Exp;
branches;
next	1.14;
commitid	vo3A4VxhwIcmP8JC;

1.14
date	2015.06.08.17.35.43;	author jsg;	state Exp;
branches;
next	1.13;
commitid	0bGab1avKCQN7v7C;

1.13
date	2015.06.03.01.30.29;	author jsg;	state Exp;
branches;
next	1.12;
commitid	M1e8t1ig0pa7UQ1r;

1.12
date	2015.06.02.19.54.06;	author rpe;	state Exp;
branches;
next	1.11;
commitid	zUqrjWrWSBxkCmbI;

1.11
date	2015.06.02.19.39.19;	author rpe;	state Exp;
branches;
next	1.10;
commitid	JUhqCleEkW5lHyMG;

1.10
date	2015.06.02.01.48.25;	author jsg;	state Exp;
branches;
next	1.9;
commitid	oitX3N4o6JZ5SMvi;

1.9
date	2015.05.31.19.40.10;	author rpe;	state Exp;
branches;
next	1.8;
commitid	p6r5f9n0C0WoWNND;

1.8
date	2015.05.20.01.44.20;	author jsg;	state Exp;
branches;
next	1.7;
commitid	AyYz7FgJK6jKwvRv;

1.7
date	2015.05.04.19.55.26;	author rpe;	state Exp;
branches;
next	1.6;
commitid	NyWrBKI5Tnb4FUEi;

1.6
date	2015.01.26.01.55.55;	author jsg;	state Exp;
branches;
next	1.5;
commitid	h5sclZXjqIofAFSS;

1.5
date	2014.02.26.16.01.32;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.16.18.37.26;	author rpe;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.01.20.35.52;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.28.14.10.41;	author patrick;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.04.20.00.23;	author patrick;	state Exp;
branches;
next	;


desc
@@


1.48
log
@Remove the miniroot for the OMAP3 BeagleBoards.  Ethernet is on USB and
USB isn't supported.  The installer turns out to have been broken on
BeagleBoard for over a year and no one noticed.  The existing support
for OMAP3 in the kernel remains though it isn't clear if anyone has
tried it after the fdt changes went in.

ok patrick@@ tom@@ kettenis@@ matthieu@@
@
text
@#	$OpenBSD: install.md,v 1.47 2017/08/22 23:27:52 jsg Exp $
#
# Copyright (c) 1996 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jason R. Thorpe.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#
# machine dependent section of installation/upgrade script.
#

NEWFSARGS_msdos="-F 16 -L boot"
MOUNT_ARGS_msdos="-o-l"

md_installboot() {
	local _disk=/dev/$1 _mdec _plat

	case $(sysctl -n hw.product) in
	*AM335x*)			_plat=am335x;;
	*OMAP4*)			_plat=panda;;
	*'Cubietech Cubieboard2'*)	_plat=cubie;;
	*Cubox-i*|*HummingBoard*)	_plat=cubox;;
	*Wandboard*)			_plat=wandboard;;
	*Nitrogen6*|*'SABRE Lite'*)	_plat=nitrogen;;
	*)				;; # XXX: Handle unknown platform?
	esac

	# Mount MSDOS partition, extract U-Boot and copy UEFI boot program
	mount ${MOUNT_ARGS_msdos} ${_disk}i /mnt/mnt
	mkdir -p /mnt/mnt/efi/boot
	cp /mnt/usr/mdec/BOOTARM.EFI /mnt/mnt/efi/boot/bootarm.efi

	_mdec=/usr/mdec/$_plat

	case $_plat in
	am335x|panda)
		cp $_mdec/{MLO,u-boot.img,*.dtb} /mnt/mnt/
		;;
	cubox|wandboard)
		cp $_mdec/*.dtb /mnt/mnt/
		dd if=$_mdec/SPL of=${_disk}c bs=1024 seek=1 \
		    >/dev/null 2>&1
		dd if=$_mdec/u-boot.img of=${_disk}c bs=1024 seek=69 \
		    >/dev/null 2>&1
		;;
	nitrogen)
		cp $_mdec/*.dtb /mnt/mnt/
		cat > /tmp/i/boot.cmd<<-__EOT
			setenv fdtfile imx6q-sabrelite.dtb ;
			load ${dtype} ${disk}:1 ${fdtaddr} ${fdtfile} ;
			load ${dtype} ${disk}:1 ${loadaddr} efi/boot/bootarm.efi ;
			bootefi ${loadaddr} ${fdtaddr} ;
		__EOT
		mkuboot -t script -a arm -o linux /tmp/i/boot.cmd \
		    /mnt/mnt/6x_bootscript
		;;
	cubie)
		cp $_mdec/*.dtb /mnt/mnt/
		dd if=$_mdec/u-boot-sunxi-with-spl.bin of=${_disk}c \
		    bs=1024 seek=8 >/dev/null 2>&1
		;;
	esac
}

md_prep_fdisk() {
	local _disk=$1 _d

	local bootparttype="C"
	local bootsectorstart="2048"
	local bootsectorsize="32768"
	local bootsectorend=$(($bootsectorstart + $bootsectorsize))
	local bootfstype="msdos"
	local newfs_args=${NEWFSARGS_msdos}

	while :; do
		_d=whole
		if disk_has $_disk mbr; then
			fdisk $_disk
		else
			echo "MBR has invalid signature; not showing it."
		fi
		ask "Use (W)hole disk$ or (E)dit the MBR?" "$_d"
		case $resp in
		[wW]*)
			echo -n "Creating a ${bootfstype} partition and an OpenBSD partition for rest of $_disk..."
			fdisk -e ${_disk} <<__EOT >/dev/null
reinit
e 0
${bootparttype}
n
${bootsectorstart}
${bootsectorsize}
f 0
e 3
A6
n
${bootsectorend}

write
quit
__EOT
			echo "done."
			disklabel $_disk 2>/dev/null | grep -q "^  i:" || disklabel -w -d $_disk
			newfs -t ${bootfstype} ${newfs_args} ${_disk}i
			return ;;
		[eE]*)
			# Manually configure the MBR.
			cat <<__EOT

You will now create one MBR partition to contain your OpenBSD data
and one MBR partition on which the OpenBSD boot program is located.
Neither partition will overlap any other partition.

The OpenBSD MBR partition will have an id of 'A6' and the boot MBR
partition will have an id of '${bootparttype}' (${bootfstype}).
The boot partition will be at least 16MB and be the first 'MSDOS'
partition on the disk.

$(fdisk ${_disk})
__EOT
			fdisk -e ${_disk}
			disk_has $_disk mbr openbsd && return
			echo No OpenBSD partition in MBR, try again. ;;
		esac
	done
}

md_prep_disklabel() {
	local _disk=$1 _f=/tmp/i/fstab.$1

	md_prep_fdisk $_disk

	disklabel_autolayout $_disk $_f || return
	[[ -s $_f ]] && return

	# Edit disklabel manually.
	# Abandon all hope, ye who enter here.
	disklabel -F $_f -E $_disk
}

md_congrats() {
}

md_consoleinfo() {
}
@


1.47
log
@scan_dmesg sorts words within a hardware model string.  Switch to using
the hw.product sysctl to avoid the problem.

ok deraadt@@ rpe@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.46 2017/07/28 18:15:44 rpe Exp $
a41 1
	*'OMAP3 BeagleBoard'*)		_plat=beagle;;
d58 1
a58 1
	am335x|beagle|panda)
@


1.46
log
@DEFAULTSETS, SANESETS and THESETS are set in the install.md scripts
according to the same logic for all architectures but sgi.

Consolidate setting them in one place in install.sub and incorporate
the sgi specific MDSETS and MDSANESETS.

Introduce MDSANESETS complementing MDSETS which makes the construction
of DEFAULTSETS, THESETS and SANESETS clearer in install.sub.

While here, adjust the comment about how MDSETS used now.

OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.45 2017/01/24 05:29:22 jsg Exp $
d40 1
a40 2
	# Identify ARMv7 platform based on dmesg.
	case $(scan_dmesg 's/^mainbus0 at root: \(.*\)$/\1/p') in
@


1.45
log
@There are two u-boot targets which should work with the sabre lite
boards.  mx6qsabrelite (which sets fdt_addr) and nitrogen6q
(which sets fdtaddr).  The difference seems to be the mx6qsabrelite
target uses a small loader in SPI connected flash which will load
the rest of u-boot from an SD card.  The nitrogen6q target normally
loads all of u-boot from an image in flash and then searches for a
6x_bootscript file with u-boot commands on MMC and SATA.

While neither of them supports "Generic Distro Configuration" which
would automatically search for an EFI image, if they did fdt_addr
is intended to be used for a DTB in ROM, while fdt_addr_r is intended
to be used for a DTB in RAM.

Change the 6x_bootscript u-boot commands to load the DTB to
fdtaddr instead of fdt_addr as matthieu@@ reported fdt_addr was not
present in the u-boot environment on his system.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.44 2017/01/22 23:43:54 rpe Exp $
a32 3

SANESETS="bsd"
DEFAULTSETS="bsd bsd.rd"
@


1.44
log
@Whitespaces ...
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.43 2017/01/19 06:55:58 jsg Exp $
d77 1
a77 1
			load ${dtype} ${disk}:1 ${fdt_addr} ${fdtfile} ;
d79 1
a79 1
			bootefi ${loadaddr} ${fdt_addr} ;
@


1.43
log
@Mainline u-boot on SABRE Lite/BD-SL-i.MX6 does not have the generic
distro hooks that automatically load an efi file if found.

Instead it looks for a '6x_bootscript' u-boot script as the original
boundary devices u-boot did.

Create a script in the nitrogen miniroot and on install that will
load a dtb and bootarm.efi then call bootefi.  Based on notes
from matthieu@@
@
text
@d1 1
a1 2
#	$OpenBSD: install.md,v 1.42 2016/09/04 10:06:11 jsg Exp $
#
@


1.42
log
@Switch the cubie miniroot from the Allwinner A10 based Cubieboard1
to the Allwinner A20 based Cubieboard2 now that problems with cortex A7
are fixed.  There seems to be more people with the Cubieboard2
than the Cubieboard1.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.41 2016/09/04 09:52:03 rpe Exp $
d76 8
@


1.41
log
@Move files created by root during install/upgrade in a subdir of
/tmp with proper permissions so that unprivileged programs can not
tamper with them.

positive feedback from deraadt
OK halex
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.40 2016/06/05 15:35:38 jsg Exp $
d49 1
a49 1
	*Cubieboard*)			_plat=cubie;;
@


1.40
log
@dd the cubieboard u-boot at the raw offset like the miniroot does
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.39 2016/06/05 15:23:22 jsg Exp $
d149 1
a149 1
	local _disk=$1 _f=/tmp/fstab.$1
@


1.39
log
@silence dd stderr output when writing u-boot files to disk

reminded by and ok krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.38 2016/06/05 15:12:56 jsg Exp $
d78 3
a80 1
		cp $_mdec/{u-boot-sunxi-with-spl.bin,*.dtb} /mnt/mnt/
@


1.38
log
@Previously armv7 ramdisk creation would tar up the mdec directory on the
build machine and extract it when installing.  Change to using the
u-boot and dtb packages when creating ramdisks and miniroots and don't
place these files in mdec on install.

Installing these packages is now required to run make release on armv7.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.37 2016/06/03 23:50:21 jsg Exp $
d69 4
a72 2
		dd if=$_mdec/SPL of=${_disk}c bs=1024 seek=1 >/dev/null
		dd if=$_mdec/u-boot.img of=${_disk}c bs=1024 seek=69 >/dev/null
@


1.37
log
@remove text that discusses putting kernels on msdos fs
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.36 2016/05/30 18:57:04 rpe Exp $
a57 1
	tar -C /mnt/ -xf /usr/mdec/u-boots.tgz 
d61 1
a61 1
	_mdec=/mnt/usr/mdec/$_plat
@


1.36
log
@Tweak previous

OK jsg
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.35 2016/05/29 15:10:05 jsg Exp $
d128 2
a129 2
and one MBR partition on which kernels are located which are loaded
by U-Boot. Neither partition will overlap any other partition.
d132 3
a134 2
partition will have an id of '${bootparttype}' (${bootfstype}). The boot partition will be
at least 16MB and be the first 'MSDOS' partition on the disk.
@


1.35
log
@Decide which u-boot/dtb to use based on the fdt model printed when
attaching mainbus not the string we print based on the board id when
attaching the soc platform abstraction.

Overhaul md_installboot() to make it much more readable based on
suggestions from rpe@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.34 2016/05/29 07:38:01 jsg Exp $
d42 1
a42 1
	local _disk=$1
d47 1
a47 1
	*"OMAP3 BeagleBoard"*)		_plat=beagle;;
d52 1
a52 1
	*Nitrogen6*|*"SABRE Lite"*)	_plat=nitrogen;;
d57 1
a57 1
	mount ${MOUNT_ARGS_msdos} /dev/${_disk}i /mnt/mnt
@


1.34
log
@Stop building u-boot kernel and ramdisk images.  The kernel make targets
are left for now but umg files are no longer built when building
releases.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.33 2016/05/28 10:10:36 jsg Exp $
a42 1
	local mount_args=${MOUNT_ARGS_msdos}
d44 11
a54 7
	BEAGLE=$(scan_dmesg '/^omap0 at mainbus0: TI OMAP3 \(BeagleBoard\).*/s//\1/p')
	BEAGLEBONE=$(scan_dmesg '/^omap0 at mainbus0: TI AM335x \(BeagleBone\).*/s//\1/p')
	PANDA=$(scan_dmesg '/^omap0 at mainbus0: TI OMAP4 \(PandaBoard\)/s//\1/p')
	CUBOX=$(scan_dmesg '/^imx0 at mainbus0: \(SolidRun.*\)/s//CUBOX/p')
	NITROGEN=$(scan_dmesg '/^imx0 at mainbus0: \(Freescale i.MX6 SABRE Lite.*\)/s//NITROGEN/p')
	WANDBOARD=$(scan_dmesg '/^imx0 at mainbus0: \(Wandboard i.MX6.*\)/s//WANDBOARD/p')
	CUBIE=$(scan_dmesg '/^mainbus0 at root: Cubietech \(Cubieboard\)/s//CUBIEBOARD/p')
d56 2
a57 3
	mount ${mount_args} /dev/${_disk}i /mnt/mnt

	# extracted on all machines, so make snap works.
a58 1

d62 18
a79 27
	if [[ -n $BEAGLE ]]; then
		cp /mnt/usr/mdec/beagle/{MLO,u-boot.img} /mnt/mnt/
		cp /mnt/usr/mdec/beagle/*.dtb /mnt/mnt/
	elif [[ -n $BEAGLEBONE ]]; then
		cp /mnt/usr/mdec/am335x/{MLO,u-boot.img} /mnt/mnt/
		cp /mnt/usr/mdec/am335x/*.dtb /mnt/mnt/
	elif [[ -n $PANDA ]]; then
		cp /mnt/usr/mdec/panda/{MLO,u-boot.img} /mnt/mnt/
		cp /mnt/usr/mdec/panda/*.dtb /mnt/mnt/
	elif [[ -n $CUBOX ]]; then
		cp /mnt/usr/mdec/cubox/*.dtb /mnt/mnt/
		dd if=/mnt/usr/mdec/cubox/SPL \
		    of=/dev/${_disk}c bs=1024 seek=1 >/dev/null
		dd if=/mnt/usr/mdec/cubox/u-boot.img \
		    of=/dev/${_disk}c bs=1024 seek=69 >/dev/null
	elif [[ -n $NITROGEN ]]; then
		cp /mnt/usr/mdec/nitrogen/*.dtb /mnt/mnt/
	elif [[ -n $WANDBOARD ]]; then
		cp /mnt/usr/mdec/wandboard/*.dtb /mnt/mnt/
		dd if=/mnt/usr/mdec/wandboard/SPL \
		    of=/dev/${_disk}c bs=1024 seek=1 >/dev/null
		dd if=/mnt/usr/mdec/wandboard/u-boot.img \
		    of=/dev/${_disk}c bs=1024 seek=69 >/dev/null
	elif [[ -n $CUBIE ]]; then
		cp /mnt/usr/mdec/cubie/u-boot-sunxi-with-spl.bin /mnt/mnt/
		cp /mnt/usr/mdec/cubie/*.dtb /mnt/mnt/
	fi
@


1.33
log
@Assume sabrelite/nitrogen has a bootefi enabled u-boot in flash and just
install dtbs and efiboot on the fat fs.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.32 2016/05/26 00:34:50 jsg Exp $
a34 24
# This code runs when the script is initally sourced to set up 
# MDSETS, SANESETS and DEFAULTSETS 

if dmesg | grep -q '^omap0 at mainbus0:'; then
        MDPLAT=OMAP
fi

if dmesg | grep -q '^imx0 at mainbus0:'; then
        MDPLAT=IMX
fi

if dmesg | grep -q '^sunxi0 at mainbus0:'; then
	MDPLAT=SUNXI
fi

if dmesg | grep -q '^vexpress0 at mainbus0:'; then
	if dmesg | grep -q '^cpu0 at mainbus0: ARM Cortex A9 '; then
		MDPLAT=VEXPRESSA9
	else
		MDPLAT=VEXPRESSA15
	fi
fi

MDSETS="bsd.${MDPLAT}.umg bsd.rd.${MDPLAT}.umg"
d36 1
a36 1
DEFAULTSETS="bsd bsd.rd ${MDSETS}"
d51 1
d61 24
a84 29
	if [[ ${MDPLAT} == "OMAP" ]]; then

		if [[ -n $BEAGLE ]]; then
			cp /mnt/usr/mdec/beagle/{MLO,u-boot.img} /mnt/mnt/
			cp /mnt/usr/mdec/beagle/*.dtb /mnt/mnt/
		elif [[ -n $BEAGLEBONE ]]; then
			cp /mnt/usr/mdec/am335x/{MLO,u-boot.img} /mnt/mnt/
			cp /mnt/usr/mdec/am335x/*.dtb /mnt/mnt/
		elif [[ -n $PANDA ]]; then
			cp /mnt/usr/mdec/panda/{MLO,u-boot.img} /mnt/mnt/
			cp /mnt/usr/mdec/panda/*.dtb /mnt/mnt/
		fi
	elif [[ ${MDPLAT} == "IMX" ]]; then
		if [[ -n $CUBOX ]]; then
			cp /mnt/usr/mdec/cubox/*.dtb /mnt/mnt/
			dd if=/mnt/usr/mdec/cubox/SPL \
			    of=/dev/${_disk}c bs=1024 seek=1 >/dev/null
			dd if=/mnt/usr/mdec/cubox/u-boot.img \
			    of=/dev/${_disk}c bs=1024 seek=69 >/dev/null
		elif [[ -n $NITROGEN ]]; then
			cp /mnt/usr/mdec/nitrogen/*.dtb /mnt/mnt/
		elif [[ -n $WANDBOARD ]]; then
			cp /mnt/usr/mdec/wandboard/*.dtb /mnt/mnt/
			dd if=/mnt/usr/mdec/wandboard/SPL \
			    of=/dev/${_disk}c bs=1024 seek=1 >/dev/null
			dd if=/mnt/usr/mdec/wandboard/u-boot.img \
			    of=/dev/${_disk}c bs=1024 seek=69 >/dev/null
		fi
	elif [[ ${MDPLAT} == "SUNXI" ]]; then
@


1.32
log
@Use a fat16 partition starting at sector 2048/1MB everywhere to simplify
things.  OMAP can still load the first u-boot stage (MLO) from the fs
and imx u-boot can load files off fat.  The offset allows space for the
u-boot images placed at raw offsets on imx and sunxi.

discussed with kettenis
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.31 2016/05/25 00:20:09 jsg Exp $
d104 1
a104 15
			if [[ -f /mnt/bsd.${MDPLAT}.umg ]]; then
				mv /mnt/bsd.${MDPLAT}.umg /mnt/mnt/bsd.umg
			fi
			if [[ -f /mnt/bsd.rd.${MDPLAT}.umg ]]; then
				mv /mnt/bsd.rd.${MDPLAT}.umg /mnt/mnt/bsdrd.umg
			fi

			cat > /tmp/boot.cmd<<__EOT
setenv bootargs sd0a:/bsd ;
mmc rescan ;
load mmc 0:1 \${loadaddr} bsd.umg ;
bootm \${loadaddr}
__EOT
			mkuboot -t script -a arm -o linux /tmp/boot.cmd \
			    /mnt/mnt/6x_bootscript
@


1.31
log
@Use efiboot when setting up the installed disk.  If efiboot is placed
in the correct path on disk u-boot will load it and search for dtb
files without a script.

Leave sabre lite/nitrogen with the old method as boundary devices haven't
released u-boot 2015.05 yet.

ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.30 2016/05/22 08:01:04 jsg Exp $
a62 1
NEWFSARGS_ext2fs="-v boot"
a63 1
MOUNT_ARGS_ext2fs=
a75 4
	if [[ ${MDPLAT} == "IMX" && ! -n $WANDBOARD ]]; then
		mount_args=${MOUNT_ARGS_ext2fs}
	fi

d136 1
a136 1
	local bootsectorstart="64"
d138 1
a138 1
	local bootsectorend
a140 14

	CUBOX=$(scan_dmesg '/^imx0 at mainbus0: \(SolidRun.*\)/s//CUBOX/p')
	WANDBOARD=$(scan_dmesg '/^imx0 at mainbus0: \(Wandboard i.MX6.*\)/s//WANDBOARD/p')

	# imx needs an ext2fs filesystem
	if [[ ${MDPLAT} == "IMX" && ! -n $WANDBOARD ]]; then
		bootparttype="83"
		bootfstype="ext2fs"
		newfs_args=${NEWFSARGS_ext2fs}
	fi
	if [[ -n $CUBOX || -n $WANDBOARD ]]; then
		bootsectorstart="2048"
	fi
	bootsectorend=$(($bootsectorstart + $bootsectorsize))
@


1.30
log
@force long filenames on the initial fat16 mount here as well
dtb filenames are longer than 8.3
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.29 2016/05/22 06:43:03 jsg Exp $
a83 7
        if [[ -f /mnt/bsd.${MDPLAT}.umg ]]; then
                mv /mnt/bsd.${MDPLAT}.umg /mnt/mnt/bsd.umg
        fi
        if [[ -f /mnt/bsd.rd.${MDPLAT}.umg ]]; then
                mv /mnt/bsd.rd.${MDPLAT}.umg /mnt/mnt/bsdrd.umg
        fi

d87 2
a88 10
	cat > /tmp/boot.cmd<<__EOT
setenv bootargs sd0a:/bsd ;
mmc rescan ;
usb start ;
run findfdt ;
load mmc \${mmcdev}:1 \${loadaddr} bsd.umg ;
load mmc \${mmcdev}:1 \${fdt_addr_r} \${fdtfile} ;
bootm \${loadaddr} - \${fdt_addr_r} ;
__EOT
	mkuboot -t script -a arm -o linux /tmp/boot.cmd /mnt/mnt/boot.scr
d110 15
a124 1
			mv /mnt/mnt/boot.scr /mnt/mnt/6x_bootscript
@


1.29
log
@use a common simple u-boot script that loads with fdt
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.28 2016/05/21 07:19:24 jsg Exp $
d64 2
d69 1
a69 1
	mount /dev/${_disk}i /mnt/mnt
d77 6
@


1.28
log
@Copy dtb files to miniroots and install disk.  Increase the ramdisk size
and force long filenames on the first mount of fat 16 filesystems so
this works.

U-boot scripts have not yet been changed to load these files.

ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.27 2016/04/20 14:40:59 abieber Exp $
a39 1
	LOADADDR=0x82800000
a43 1
	LOADADDR=0x18800000
a47 1
	LOADADDR=0x40200000
a52 1
		LOADADDR=0x60300000
a54 1
		LOADADDR=0x80300000
d86 11
a108 4
		cat > /mnt/mnt/uenv.txt<<__EOT
bootcmd=mmc rescan ; setenv loadaddr ${LOADADDR}; setenv bootargs sd0i:/bsd.umg ; fatload mmc \${mmcdev} \${loadaddr} bsd.umg ; bootm \${loadaddr} ;
uenvcmd=boot
__EOT
a110 5
			cat > /tmp/boot.cmd<<__EOT
; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; for dtype in usb mmc ; do for disk in 0 1 ; do \${dtype} dev \${disk} ; for fs in fat ext2 ; do if \${fs}load \${dtype} \${disk}:1 \${loadaddr} bsd.umg ; then bootm \${loadaddr} ; fi ; done; done; done; echo; echo failed to load bsd.umg
__EOT
			mkuboot -t script -a arm -o linux /tmp/boot.cmd \
			    /mnt/mnt/boot.scr
d117 1
a117 4
			cat > /tmp/6x_bootscript.scr<<__EOT
	; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; for dtype in sata mmc ; do for disk in 0 1 ; do \${dtype} dev \${disk} ; for fs in fat ext2 ; do if \${fs}load \${dtype} \${disk}:1 \${loadaddr} bsd.umg ; then bootm \${loadaddr} ; fi ; done; done; done; echo; echo failed to load bsd.umg 
__EOT
			mkuboot -t script -a arm -o linux /tmp/6x_bootscript.scr /mnt/mnt/6x_bootscript
a118 5
			cat > /tmp/boot.cmd<<__EOT
; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; for dtype in mmc ; do for disk in 0 1 ; do \${dtype} dev \${disk} ; for fs in fat ext2 ; do if \${fs}load \${dtype} \${disk}:1 \${loadaddr} bsd.umg ; then bootm \${loadaddr} ; fi ; done; done; done; echo; echo failed to load bsd.umg
__EOT
			mkuboot -t script -a arm -o linux /tmp/boot.cmd \
			    /mnt/mnt/boot.scr
a125 5
		cat > /mnt/mnt/uenv.txt<<__EOT
bootargs=sd0i:/bsd
mmcboot=mmc rescan ; fatload mmc 0 ${LOADADDR} bsd.umg && bootm ${LOADADDR};
uenvcmd=run mmcboot;
__EOT
@


1.27
log
@Alter SUNXI grep to match the rest of the SOC greps

OK bmercer@@, patrick@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.26 2016/03/27 00:40:38 jsg Exp $
d95 1
d98 1
d101 1
d114 1
d130 1
d143 1
@


1.26
log
@Switch from the solidrun i.mx6 u-boot to mainline u-boot on cubox i.
The offset of u-boot.img in the disk image changes to be the same as
wandboard.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.25 2016/03/27 00:29:09 jsg Exp $
d48 1
a48 1
if dmesg | grep '^sunxi0 at mainbus0:'; then
@


1.25
log
@use MLO not mlo to match the names generated by u-boot builds
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.24 2016/02/08 17:28:08 krw Exp $
d114 1
a114 1
			    of=/dev/${_disk}c bs=1024 seek=42 >/dev/null
@


1.24
log
@If manual disklabel editing is requested during install, don't emit
verbiage explaining what disklabels are.

If you don't know, you should be using (A)uto!

ok rpe@@ halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.23 2015/12/29 11:16:14 rpe Exp $
d94 1
a94 1
			cp /mnt/usr/mdec/beagle/{mlo,u-boot.img} /mnt/mnt/
d96 1
a96 1
			cp /mnt/usr/mdec/am335x/{mlo,u-boot.img} /mnt/mnt/
d98 1
a98 1
			cp /mnt/usr/mdec/panda/{mlo,u-boot.img} /mnt/mnt/
@


1.23
log
@Change patterns in case-blocks from a*|A* to [aA]*

OK halex@@ krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.22 2015/12/23 13:31:22 rpe Exp $
d225 2
a226 12
	cat <<__EOT

You will now create an OpenBSD disklabel inside the OpenBSD MBR
partition. The disklabel defines how OpenBSD splits up the MBR partition
into OpenBSD partitions in which filesystems and swap space are created.
You must provide each filesystem's mountpoint in this program.

The offsets used in the disklabel are ABSOLUTE, i.e. relative to the
start of the disk, NOT the start of the OpenBSD MBR partition.

__EOT

@


1.22
log
@Simplify things by using grep -q.

OK krw@@, halex@@, jsg@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.21 2015/12/18 16:20:58 rpe Exp $
d174 1
a174 1
		w*|W*)
d196 1
a196 1
		e*|E*)
@


1.21
log
@Introduce a new function disk_has() to inspect a disk if it has a
partition-table of a certain type and optionally if it has a partition
of a certain type.

Use disk_has() in the install.md script to replace all the various
"fdisk <disk> | grep <pattern>" commands greatly simplifying things.

positive feedback from sthen@@
"time to get it really tested" deraadt@@
OK krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.20 2015/12/02 21:57:50 krw Exp $
d38 1
a38 2
dmesg | grep "^omap0 at mainbus0:" >/dev/null
if [[ $? == 0 ]]; then
d42 2
a43 2
dmesg | grep "^imx0 at mainbus0:" >/dev/null
if [[ $? == 0 ]]; then
d47 2
a48 2
dmesg | grep "^sunxi0 at mainbus0:" >/dev/null
if [[ $? == 0 ]]; then
d52 3
a54 4
dmesg | grep "^vexpress0 at mainbus0:" >/dev/null
if [[ $? == 0 ]]; then
	dmesg | grep "^cpu0 at mainbus0: ARM Cortex A9 " >/dev/null
	if [[ $? == 0 ]]; then
@


1.20
log
@The '_q'/'(O)penBSD' logic is not used in armv7 at the moment so remove it
until it is needed.

Spotted & ok rpe@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.19 2015/08/01 00:25:14 jsg Exp $
d169 1
a169 1
		if fdisk $_disk | grep -q 'Signature: 0xAA55'; then
d213 1
a213 1
			fdisk $_disk | grep -q ' A6 ' && return
@


1.19
log
@redirect dd standard output to /dev/null
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.18 2015/08/01 00:15:37 jsg Exp $
d144 1
a144 1
	local _disk=$1 _q _d
d174 1
a174 1
		ask "Use (W)hole disk$_q or (E)dit the MBR?" "$_d"
a214 1
		o*|O*)	return ;;
@


1.18
log
@Make use of u-boot 2015.07's unified wandboard config to provide a
miniroot to cover all current wandboard variations.

Unlike the other imx u-boot configs the wandboard config doesn't search
for ext2 only a fat fs.

Grow the ramdisk size to fit the extra u-boot files.

From Roman Kravchuk.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.17 2015/07/07 03:31:58 jsg Exp $
d111 6
a116 3
			mkuboot -t script -a arm -o linux /tmp/boot.cmd /mnt/mnt/boot.scr
			dd if=/mnt/usr/mdec/cubox/SPL of=/dev/${_disk}c bs=1024 seek=1
			dd if=/mnt/usr/mdec/cubox/u-boot.img of=/dev/${_disk}c bs=1024 seek=42
d126 6
a131 3
			mkuboot -t script -a arm -o linux /tmp/boot.cmd /mnt/mnt/boot.scr
			dd if=/mnt/usr/mdec/wandboard/SPL of=/dev/${_disk}c bs=1024 seek=1
			dd if=/mnt/usr/mdec/wandboard/u-boot.img of=/dev/${_disk}c bs=1024 seek=69
@


1.17
log
@At some point the u-boot mlo for panda/beagle stopped looking for
u-boot.bin and required u-boot.img on the fat fs so switch to using that
as we do for beaglebone.

Reported by abieber@@ via bmercer@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.16 2015/06/29 04:52:34 jsg Exp $
d81 1
d119 7
d148 1
d151 1
a151 1
	if [[ ${MDPLAT} == "IMX" ]]; then
d156 1
a156 1
	if [[ -n $CUBOX ]]; then
@


1.16
log
@enable vexpress
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.15 2015/06/08 18:31:17 jsg Exp $
d95 1
a95 1
			cp /mnt/usr/mdec/beagle/{mlo,u-boot.bin} /mnt/mnt/
d99 1
a99 1
			cp /mnt/usr/mdec/panda/{mlo,u-boot.bin} /mnt/mnt/
@


1.15
log
@expr isn't on the ramdisk use ksh for addition
problem spotted by jasper@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.14 2015/06/08 17:35:43 jsg Exp $
d52 11
@


1.14
log
@Move the scan_dmesg calls back into the functions.  It can't be called
when the file is sourced as /var/run/dmesg.boot won't exist then.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.13 2015/06/03 01:30:29 jsg Exp $
d139 1
a139 1
	bootsectorend=`expr $bootsectorstart + $bootsectorsize`
@


1.13
log
@missing __EOT spotted by rpe@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.12 2015/06/02 19:54:06 rpe Exp $
a52 5
BEAGLE=$(scan_dmesg '/^omap0 at mainbus0: TI OMAP3 \(BeagleBoard\).*/s//\1/p')
BEAGLEBONE=$(scan_dmesg '/^omap0 at mainbus0: TI AM335x \(BeagleBone\).*/s//\1/p')
PANDA=$(scan_dmesg '/^omap0 at mainbus0: TI OMAP4 \(PandaBoard\)/s//\1/p')
CUBOX=$(scan_dmesg '/^imx0 at mainbus0: \(SolidRun.*\)/s//CUBOX/p')
NITROGEN=$(scan_dmesg '/^imx0 at mainbus0: \(Freescale i.MX6 SABRE Lite.*\)/s//NITROGEN/p')
d65 6
d127 2
@


1.12
log
@Remove the $FSTABFLAG variable and use -F directly. The installer
uses disklabel UIDs unconditionally for a while already.

OK krw@@
"looks good" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.11 2015/06/02 19:39:19 rpe Exp $
d97 1
d104 1
a104 1
	__EOT
@


1.11
log
@Replace
  [[ -n $(foo | grep 'bar') ]]
with
  foo | grep -q 'bar'

OK halex@@ krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.10 2015/06/02 01:48:25 jsg Exp $
d210 1
a210 1
	disklabel $FSTABFLAG $_f -E $_disk
@


1.10
log
@Rename the imx miniroot to nitrogen as it creates "6x_bootscript".
Add a miniroot for the CuBox-i which needs u-boot at a particular
offset in the sd image to boot.  Based on changes made by Patrick
Wildt in bitrig.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.9 2015/05/31 19:40:10 rpe Exp $
d139 1
a139 1
		if [[ -n $(fdisk $_disk | grep 'Signature: 0xAA55') ]]; then
d183 1
a183 1
			[[ -n $(fdisk $_disk | grep ' A6 ') ]] && return
@


1.9
log
@Replace identical code in the MD scripts of the installer with a new
MI function disklabel_autolayout() which now handles all aspects of
the disklabel auto-layout and autopartitioning case for the root disk.
Remove get_disklabel_template() and merge it with the new function.

"move forward" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.8 2015/05/20 01:44:20 jsg Exp $
d53 9
a61 4

MDSETS="bsd.${MDPLAT} bsd.rd.${MDPLAT} bsd.${MDPLAT}.umg bsd.rd.${MDPLAT}.umg"
SANESETS="bsd.${MDPLAT}"
DEFAULTSETS=${MDSETS}
a69 4
	BEAGLE=$(scan_dmesg '/^omap0 at mainbus0: TI OMAP3 \(BeagleBoard\).*/s//\1/p')
	BEAGLEBONE=$(scan_dmesg '/^omap0 at mainbus0: TI AM335x \(BeagleBone\).*/s//\1/p')
	PANDA=$(scan_dmesg '/^omap0 at mainbus0: TI OMAP4 \(PandaBoard\)/s//\1/p')

d94 12
a105 4
		cat > /tmp/6x_bootscript.scr<<__EOT
; setenv loadaddr ${LOADADDR} ; setenv bootargs sd0i:/bsd.umg ; for dtype in sata mmc ; do for disk in 0 1 ; do \${dtype} dev \${disk} ; for fs in fat ext2 ; do if \${fs}load \${dtype} \${disk}:1 \${loadaddr} bsd.umg ; then bootm \${loadaddr} ; fi ; done; done; done; echo; echo failed to load bsd.umg 
__EOT
		mkuboot -t script -a arm -o linux /tmp/6x_bootscript.scr /mnt/mnt/6x_bootscript
d120 3
d132 4
d153 2
a154 2
64
32768
d159 1
a159 1
32832
@


1.8
log
@Now all the socs use the same va entry point and don't have any
conflicting symbols we can combine the configs.

Multiple umg files are still required however.  The bsd.umg target in
the kernel is replaced by targets for bsd.IMX.umg, bsd.OMAP.umg and
bsd.SUNXI.umg.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.7 2015/05/04 19:55:26 rpe Exp $
d175 1
a175 1
	local _disk=$1 _f _op
d179 2
a180 21
	_f=/tmp/fstab.$_disk
	if [[ $_disk == $ROOTDISK ]]; then
		if $AUTO && get_disklabel_template; then
			disklabel -T /disklabel.auto $FSTABFLAG $_f -w -A $_disk && return
			echo "Autopartitioning failed"
			exit 1
		fi
		while :; do
			echo "The auto-allocated layout for $_disk is:"
			disklabel -h -A $_disk | egrep "^#  |^  [a-p]:"
			ask "Use (A)uto layout, (E)dit auto layout, or create (C)ustom layout?" a
			case $resp in
			a*|A*)	_op=-w ;;
			e*|E*)	_op=-E ;;
			c*|C*)	break ;;
			*)	continue ;;
			esac
			disklabel $FSTABFLAG $_f $_op -A $_disk
			return
		done
	fi
@


1.7
log
@Add the new template file based autopartitioning feature of disklabel(8)
to the OpenBSD installer. It is available during unattended installation.
The template file is fetched from an url, provided as answer to a new
question in the response file:

    URL to autopartitioning template for disklabel = url

Original diff from and OK henning@@
'no objection' krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.6 2015/01/26 01:55:55 jsg Exp $
d65 3
a67 5
	BEAGLE=$(scan_dmesg '/^omap0 at mainbus0: \(BeagleBoard\).*/s//\1/p')
	BEAGLEBONE=$(scan_dmesg '/^omap0 at mainbus0: \(BeagleBone\).*/s//\1/p')
	PANDA=$(scan_dmesg '/^omap0 at mainbus0: \(PandaBoard\)/s//\1/p')
	IMX=$(scan_dmesg '/^imx0 at mainbus0: \(i.MX6.*\)/s//IMX/p')
	SUNXI=$(scan_dmesg '/^sunxi0 at mainbus0: \(A.*\)/s//SUNXI/p')
a68 3
        if [[ -f /mnt/bsd.${MDPLAT} ]]; then
                mv /mnt/bsd.${MDPLAT} /mnt/bsd
        fi
a71 6
        if [[ -f /mnt/bsd.mp.${MDPLAT} ]]; then
                mv /mnt/bsd.mp.${MDPLAT} /mnt/bsd.mp
        fi
        if [[ -f /mnt/bsd.rd.${MDPLAT} ]]; then
                mv /mnt/bsd.rd.${MDPLAT} /mnt/bsd.rd
        fi
d115 1
a115 2
	IMX=$(scan_dmesg '/^imx0 at mainbus0: \(i.MX6.*\)/s//IMX/p')
	if [[ -n $IMX ]]; then
@


1.6
log
@Rename miniroot-sunxi to miniroot-cubie as the u-boot included
in the image is for Cubieboard1.  Discussed with bmercer@@
While here switch from using the separate spl and u-boot images
to the combined spl and u-boot 'u-boot-sunxi-with-spl.bin'.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.5 2014/02/26 16:01:32 maja Exp $
d193 5
@


1.5
log
@Fix script to allow it to work on both SD and eMMC. -moj ok deraadt@@ nick@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.4 2013/11/16 18:37:26 rpe Exp $
d114 1
a114 1
		cp /mnt/usr/mdec/sunxi/{sunxi-spl,u-boot}.bin /mnt/mnt/
@


1.4
log
@Remove AUTOROOT variable which is a leftover of r1.183 of install.sub

diff from Philipp e1c1bac6253dc54a1e89ddc046585792 at osteo dot net

ok krw@@ halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.3 2013/11/01 20:35:52 jasper Exp $
d100 1
a100 1
bootcmd=mmc rescan ; setenv loadaddr ${LOADADDR}; setenv bootargs sd0i:/bsd.umg ; fatload mmc 0 \${loadaddr} bsd.umg ; bootm \${loadaddr} ;
@


1.3
log
@hookup sunxi bits for miniroot and ramdisk, tested on pcduino.
note that on boards without ahci you will need to install to usb and still
boot of sd, at least until there's support for the sd slot.

ok patrick@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.2 2013/10/28 14:10:41 patrick Exp $
d198 1
a198 1
			a*|A*)	_op=-w ; AUTOROOT=y ;;
@


1.2
log
@Revamp ARMv7 ramdisk and miniroot creation process.

Instead of running mkuboot during install, we call it on during
the release build, so that we can also ship bootable images
of the generic and the ramdisk kernel.

We can now build miniroots for imx, too.  The installer also
can recognize the SoC and makes decision based on it.

Use ext2fs for i.MX6 based devices.

Tar the bootloader files to save some space.

ok syl@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.1 2013/09/04 20:00:23 patrick Exp $
d48 5
d69 1
d103 1
a103 1
	else 
d108 7
@


1.1
log
@Beagle has been replaced by armv7.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.8 2013/07/30 02:49:54 bmercer Exp $
d35 21
d59 1
a59 3
	/mnt/usr/sbin/chroot /mnt /usr/sbin/mkuboot -a arm -o linux \
		-e 0x80300000 -l 0x80300000 /bsd /mnt/bsd.umg
	cp -r /tmp/u-boots/* /mnt/usr/mdec/
d63 32
a94 9
	if [[ -n $BEAGLE ]]; then
		cp /mnt/usr/mdec/beagle/{mlo,u-boot.bin} /mnt/mnt/
	elif [[ -n $BEAGLEBONE ]]; then
		cp /mnt/usr/mdec/am335x/{mlo,u-boot.img} /mnt/mnt/
	elif [[ -n $PANDA ]]; then
		cp /mnt/usr/mdec/panda/{mlo,u-boot.bin} /mnt/mnt/
	fi
	cat > /mnt/mnt/uenv.txt<<__EOT
bootcmd=mmc rescan ; setenv loadaddr 0x82800000 ; setenv bootargs sd0i:/bsd.umg ; fatload mmc 0 \${loadaddr} bsd.umg ; bootm \${loadaddr} ;
d97 6
d108 12
a119 3
	mount /dev/sd0i /mnt2
	cp -r /mnt2/u-boots/ /tmp/
	umount /mnt2
d130 1
a130 1
			echo -n "Creating a FAT partition and an OpenBSD partition for rest of $_disk..."
d134 1
a134 1
C
d149 1
a149 1
			newfs -t msdos ${_disk}i
d160 1
a160 1
partition will have an id of 'C' (MSDOS). The boot partition will be
@

