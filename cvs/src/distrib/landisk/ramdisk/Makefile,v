head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.6
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.18.0.12
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.8
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.10
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.2
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.12.0.8
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.6
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.8.0.6
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6;
locks; strict;
comment	@# @;


1.20
date	2017.01.08.14.42.12;	author natano;	state Exp;
branches;
next	1.19;
commitid	cGRXMR0B9mXXMsWb;

1.19
date	2016.10.14.18.44.19;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	SCMr9f2ZDRZiobIN;

1.18
date	2013.10.15.22.46.50;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2013.10.14.00.00.09;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.09.00.42.49;	author drahn;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.08.21.39.32;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2011.04.18.16.52.09;	author thib;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.15.03.11.22;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.17.03.58.54;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.28.16.34.24;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.02.03.20.57;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.02.01.01.07;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.17.00.28.21;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.13.17.34.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.13.08.42.06;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.13.05.08.42;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.09.22.34.07;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.07.18.07.23;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.03.21.28.15;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.25.04.04.16;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Use makefs to build bsd.rd. ok deraadt
@
text
@#	$OpenBSD: Makefile,v 1.19 2016/10/14 18:44:19 deraadt Exp $

REV=	${OSrev}

TOP=		${.CURDIR}/..

BSD_RD=		bsd.rd
IMAGE=		mr.fs
CBIN?=		instbin
CRUNCHCONF?=	${CBIN}.conf
CRUNCHCONFS?=	${.CURDIR}/../common/crunch.conf
LISTS=		${.CURDIR}/list
UTILS?=		${.CURDIR}/../../miniroot

MTREE=		${UTILS}/mtree.conf

DISKTYPE=	rdroot2.5M
MAKEFSARGS_RD=	-o disklabel=${DISKTYPE},minfree=0,density=4096

.ifndef DESTDIR
all ${IMAGE}:
	@@echo setenv DESTDIR before making a ramdisk!
	@@false
.else

# mix config is not needed.
all:	${BSD_RD}

${BSD_RD}: ${IMAGE} bsd rdsetroot
	cp bsd ${BSD_RD}
	${.OBJDIR}/rdsetroot ${BSD_RD} ${IMAGE}

${IMAGE}: ${CBIN}
	rm -rf $@@.d
	install -d -o root -g wheel $@@.d
	mtree -def ${MTREE} -p $@@.d -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} REV=${REV} \
	    TARGDIR=$@@.d UTILS=${UTILS} RELEASEDIR=${RELEASEDIR} \
	    sh ${UTILS}/runlist.sh ${LISTS}
	rm $@@.d/${CBIN}
	makefs ${MAKEFSARGS_RD} $@@ $@@.d

.endif

bsd:
	cd ${TOP}/../../sys/arch/landisk/compile/RAMDISK && \
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && exec ${MAKE}'
	cp -p ${TOP}/../../sys/arch/landisk/compile/RAMDISK/obj/bsd bsd

rdsetroot:	${TOP}/../common/elfrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o rdsetroot \
	    ${TOP}/../common/elfrdsetroot.c ${TOP}/../common/elf32.c \
	    ${TOP}/../common/elf64.c

.ifdef RELEASEDIR
install:
	cp ${BSD_RD} ${RELEASEDIR}
.endif

${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CRUNCHCONF}
	crunchgen -E -D ${.CURDIR}/../../.. -L ${DESTDIR}/usr/lib ${.ALLSRC}

${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk SRCLIBDIR=${.CURDIR}/../../../lib all

${CRUNCHCONF}: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CBIN}.conf

clean cleandir:
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}.cache \
	    lib*.a lib*.olist ${CBIN}.map \
	    *.o *.lo *.c bsd ${BSD_RD} rdsetroot
	rm -f instbin.conf
	rm -rf cd-dir ${IMAGE}.d

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.19
log
@Use new kernel compile method for ramdisks, de-escalating to $BUILDUSER
as required.
much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2013/10/15 22:46:50 deraadt Exp $
a14 1
MOUNT_POINT=	/mnt
d17 2
a18 11
VND?=		vnd0
VND_DEV=	/dev/${VND}a
VND_RDEV=	/dev/r${VND}a
VND_CRDEV=	/dev/r${VND}c


DISKTYPE=       rdroot2.5M
#NBLKS=		8192
NBLKS=		5120
# minfree, opt, b/i  trks, sects, cpg
NEWFSARGS= -m 0 -o space -i 4096
d29 1
a29 1
${BSD_RD}: ${CBIN} ${IMAGE} bsd rdsetroot
d33 9
a41 1
${IMAGE}: rd_setup do_files rd_teardown
a49 13
rd_setup:
	dd if=/dev/zero of=${IMAGE} bs=512 count=${NBLKS}
	vnconfig -v -c -t ${DISKTYPE} ${VND} ${IMAGE}
	disklabel -w ${VND} ${DISKTYPE}
	newfs ${NEWFSARGS} ${VND_RDEV}
	fsck ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}

rd_teardown:
	@@df -i ${MOUNT_POINT}
	-umount ${MOUNT_POINT}
	-vnconfig -u ${VND}

a54 6
unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}

.PRECIOUS:	${IMAGE}

a68 7
do_files:
	cat ${MTREE} | mtree -de -p ${MOUNT_POINT}/ -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} \
	    REV=${REV} TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    RELEASEDIR=${RELEASEDIR} sh ${UTILS}/runlist.sh ${LISTS}
	rm ${MOUNT_POINT}/${CBIN}

d74 1
a74 1
	rm -rf cd-dir
@


1.18
log
@We do not produce "core" files, so they do not need to be deleted.  they
have been *.core files for a very long time.  That's a lot of unlink()
calls saved.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2013/10/14 00:00:09 guenther Exp $
a47 1
	cd ${TOP}/../../sys/arch/landisk/conf && config RAMDISK
d49 2
a50 2
	    ${MAKE} clean && exec ${MAKE}
	cp ${TOP}/../../sys/arch/landisk/compile/RAMDISK/bsd bsd
@


1.17
log
@Turn on the distrib lib bits in crunchgen by setting SRCLIBDIR.
Add the new files to the clean target's rm list.

"why not get it tested?" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2011/07/09 00:42:49 drahn Exp $
d99 1
a99 1
	/bin/rm -f core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}.cache \
@


1.16
log
@Unbreak most archs for the last commit. cut and paste changed rdsetroot
to elfrdsetroot. Does not yet fix sparc
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2011/07/08 21:39:32 drahn Exp $
d86 1
a86 1
	${MAKE} -f ${CBIN}.mk all
d100 1
@


1.15
log
@Allow the elf rdsetroot operation to function on 32 bit and 64 bit binaries.
Enables developers to build arm ramdisk kernels on amd64 archs
OK deraadt@@ 'looked fine' miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2011/04/18 16:52:09 thib Exp $
d67 1
a67 1
	${HOSTCC} ${HOSTCFLAGS} -o elfrdsetroot \
@


1.14
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2011/04/15 03:11:22 deraadt Exp $
d67 3
a69 1
	${HOSTCC} -o rdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.13
log
@No need to make depend kernels; ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2009/04/17 03:58:54 deraadt Exp $
d18 1
a18 1
VND?=		svnd0
@


1.12
log
@For SHA256 hashes to be ready to go onto the install media, we must
build the sets before we build the media.  While there we can get rid
of DESTDIR/snapshot too, and simply install straight into RELEASEDIR.
(This also ends up saving an astounding amount of traffic/latency in a nfs
environment)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2009/03/28 16:34:24 krw Exp $
d50 1
a50 1
	    ${MAKE} clean && ${MAKE} depend && ${MAKE}
@


1.11
log
@Use vnconfig's -t capability to avoid specifying geometry info to
fdisk while building media.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2008/12/02 03:20:57 deraadt Exp $
d75 1
d77 2
a78 1
	cp ${BSD_RD} ${DESTDIR}/snapshot/
d93 1
a93 1
	    sh ${TOP}/../miniroot/runlist.sh ${LISTS}
a100 3

beforeinstall:
	cp ${BSD.RD} ${DESTDIR}/snapshot
@


1.10
log
@commit with rdsetroot now accepting the filesystem as a 2nd arg
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2008/12/02 01:01:07 deraadt Exp $
d55 1
a55 1
	vnconfig -v -c ${VND} ${IMAGE}
@


1.9
log
@no longer need to compile rdsetroot with DEBUG
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2007/06/17 00:28:21 deraadt Exp $
d41 1
a41 1
	${.OBJDIR}/rdsetroot ${BSD_RD} < ${IMAGE}
@


1.8
log
@Stop using disklabel -r.  The disklabel code does not know all the semantics
for pushing disklabels onto the disk (and besides that, it is buggy and
unreadable crap); thanks for help from krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2007/04/13 17:34:40 millert Exp $
d67 1
a67 1
	${HOSTCC} -DDEBUG -o rdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.7
log
@Update install media generation to the new semantics of the -c flag.
Also replace "newfs -O" with "newfs -O 0" now that -O takes an option.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2006/11/13 08:42:06 deraadt Exp $
d56 1
a56 1
	disklabel -w -r ${VND} ${DISKTYPE}
@


1.6
log
@bit overzealous of dale to skip rdsetroot!
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2006/11/13 05:08:42 deraadt Exp $
d28 1
a28 1
NEWFSARGS= -m 0 -o space -c 16 -i 4096
@


1.5
log
@remove a wee bit of dale's early cross-build goo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2006/11/09 22:34:07 drahn Exp $
d41 1
@


1.4
log
@PID isn't used.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2006/11/07 18:07:23 drahn Exp $
d78 1
a78 2
	crunchgen -E -O ${MAKEOBJDIR} -D ${.CURDIR}/../../.. \
	    -L ${DESTDIR}/usr/lib ${.ALLSRC}
@


1.3
log
@remove nasty ugly horrid hack that was for armish but was copied...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2006/11/07 18:06:27 drahn Exp $
a21 1
PID!=		echo $$$$
@


1.2
log
@build the right kernel...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2006/10/25 04:04:16 drahn Exp $
a41 7
	awk 'BEGIN { printf("%c", 192); }' < /dev/null | dd of=${BSD_RD} bs=1 count=1 seek=95 conv=notrunc 2>/dev/null;
	awk 'BEGIN { printf("%c", 192); }' < /dev/null | dd of=${BSD_RD} bs=1 count=1 seek=127 conv=notrunc 2>/dev/null;
	awk 'BEGIN { printf("%c", 192); }' < /dev/null | dd of=${BSD_RD} bs=1 count=1 seek=159 conv=notrunc 2>/dev/null;
	${.OBJDIR}/rdsetroot ${BSD_RD} < ${IMAGE}
	dd if=/dev/zero of=${BSD_RD} bs=1 count=1 seek=95 conv=notrunc 2>/dev/null;
	dd if=/dev/zero of=${BSD_RD} bs=1 count=1 seek=127 conv=notrunc 2>/dev/null;
	dd if=/dev/zero of=${BSD_RD} bs=1 count=1 seek=159 conv=notrunc 2>/dev/null;
@


1.1
log
@Bits to build ramdisk (bsd.rd) for landisk
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2006/06/28 20:17:04 drahn Exp $
d55 2
a56 2
	cd ${TOP}/../../sys/arch/armish/conf && config RAMDISK
	cd ${TOP}/../../sys/arch/armish/compile/RAMDISK && \
d58 1
a58 1
	cp ${TOP}/../../sys/arch/armish/compile/RAMDISK/bsd bsd
@

