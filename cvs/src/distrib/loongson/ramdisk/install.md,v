head	1.27;
access;
symbols
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.2
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4;
locks; strict;
comment	@# @;


1.27
date	2017.01.22.23.43.54;	author rpe;	state Exp;
branches;
next	1.26;
commitid	T8Ujv1g6HeWswBdS;

1.26
date	2016.09.04.09.52.03;	author rpe;	state Exp;
branches;
next	1.25;
commitid	MluxzkKaq4wrtv84;

1.25
date	2016.02.08.17.28.09;	author krw;	state Exp;
branches;
next	1.24;
commitid	4nj4L34RoKX0PFN0;

1.24
date	2015.12.29.11.16.14;	author rpe;	state Exp;
branches;
next	1.23;
commitid	dPgVJD33gNmmCKz4;

1.23
date	2015.12.18.16.20.58;	author rpe;	state Exp;
branches;
next	1.22;
commitid	VkQ4KC1oXExBZv81;

1.22
date	2015.12.02.21.17.17;	author krw;	state Exp;
branches;
next	1.21;
commitid	qjXM8wxHbdPw7A4U;

1.21
date	2015.11.09.20.54.12;	author rpe;	state Exp;
branches;
next	1.20;
commitid	euu2kEavGhIGtt10;

1.20
date	2015.11.05.21.04.19;	author miod;	state Exp;
branches;
next	1.19;
commitid	qfS6xa3xibWsE03C;

1.19
date	2015.06.02.19.54.06;	author rpe;	state Exp;
branches;
next	1.18;
commitid	zUqrjWrWSBxkCmbI;

1.18
date	2015.05.31.19.40.10;	author rpe;	state Exp;
branches;
next	1.17;
commitid	p6r5f9n0C0WoWNND;

1.17
date	2015.05.04.19.55.26;	author rpe;	state Exp;
branches;
next	1.16;
commitid	NyWrBKI5Tnb4FUEi;

1.16
date	2015.04.19.00.37.36;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	NN0XCPiXlSgmWAyk;

1.15
date	2015.02.12.08.44.47;	author rpe;	state Exp;
branches;
next	1.14;
commitid	c51h9McCpeEJJKGM;

1.14
date	2014.08.15.09.45.54;	author rpe;	state Exp;
branches;
next	1.13;
commitid	1ay5nPocSGoegdY3;

1.13
date	2013.11.16.18.37.27;	author rpe;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.15.16.15.34;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.13.14.50.34;	author halex;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.13.12.00.48;	author halex;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.13.09.23.11;	author halex;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.13.08.52.24;	author halex;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.10.14.25.00;	author halex;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.17.20.57.10;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.03.21.41.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.19.07.37.17;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.18.22.15.12;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.18.20.20.52;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.31.21.36.01;	author otto;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Whitespaces ...
@
text
@#	$OpenBSD: install.md,v 1.26 2016/09/04 09:52:03 rpe Exp $
#
# Copyright (c) 1996 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jason R. Thorpe.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#
# machine dependent section of installation/upgrade script.
#

md_installboot() {
	local _disk=$1

	# Use cat below to avoid holes created by cp(1)
	if mount -t ext2fs /dev/${_disk}i /mnt2 &&
	   mkdir -p /mnt2/boot &&
	   cat /mnt/usr/mdec/boot > /mnt2/boot/boot &&
	   { [[ $(sysctl -n hw.product) != Gdium ]] ||
	     cp /mnt/bsd /mnt2/boot/bsd; }; then
		umount /mnt2
		return
	fi

	echo "Failed to install bootblocks."
	echo "You will not be able to boot OpenBSD from $_disk."
	exit
}

md_prep_fdisk() {
	local _disk=$1 _q _d _s _o

	while :; do
		_d=whole
		if disk_has $_disk mbr; then
			fdisk $_disk
			if disk_has $_disk mbr openbsd; then
				_q=", use the (O)penBSD area"
				_d=OpenBSD
			fi
		else
			echo "MBR has invalid signature; not showing it."
		fi
		ask "Use (W)hole disk$_q or (E)dit the MBR?" "$_d"
		case $resp in
		[wW]*)
			case $(sysctl -n hw.product) in
			Gdium)
				_s=32
				_o="-O 1 -b 4096"
				;;
			EBT700)
				_s=1
				_o="-O 1"
				;;
			*)
				_s=1
				_o=""
				;;
			esac
			echo -n "Creating a ${_s}MB ext2 partition and an OpenBSD partition for rest of $_disk..."
			fdisk -e $_disk <<__EOT >/dev/null
re
e 0
83

1
$((_s * 2048))
e 3
0
e 3
A6

$((_s * 2048 + 1))
*
update
write
quit
__EOT
			echo "done."
			disklabel $_disk 2>/dev/null | grep -q "^  i:" || disklabel -w -d $_disk
			newfs -qt ext2fs $_o ${_disk}i
			break ;;
		[eE]*)
			# Manually configure the MBR.
			cat <<__EOT

You will now create one MBR partition to contain your OpenBSD data
and one MBR partition to contain the program that PMON uses
to boot OpenBSD. Neither partition will overlap any other partition.

The OpenBSD MBR partition will have an id of 'A6' and the boot MBR
partition will have an id of '83' (Linux files). The boot partition will be
at least 1MB and be the first 'Linux files' partition on the disk.
The installer assumes there is already an ext2 or ext3 filesystem on the
first 'Linux files' partition.

$(fdisk ${_disk})
__EOT
			fdisk -e $_disk
			disk_has $_disk mbr linux ||
				{ echo "\nNo Linux files (id 83) partition!\n"; continue; }
			disk_has $_disk mbr openbsd ||
				{ echo "\nNo OpenBSD (id A6) partition!\n"; continue; }
			disklabel $_disk 2>/dev/null | grep -q "^  i:" || disklabel -w -d $_disk
			break ;;
		[oO]*)
			[[ $_d == OpenBSD ]] || continue
			break ;;
		esac
	done

}

md_prep_disklabel() {
	local _disk=$1 _f=/tmp/i/fstab.$1

	md_prep_fdisk $_disk

	disklabel_autolayout $_disk $_f || return
	[[ -s $_f ]] && return

	# Edit disklabel manually.
	# Abandon all hope, ye who enter here.
	disklabel -F $_f -E $_disk
}

md_congrats() {
	cat <<__EOT

Once the machine has rebooted use PMON to boot into OpenBSD, as
described in the INSTALL.$ARCH document.
To load the OpenBSD bootloader, use 'boot /dev/fs/ext2@@wd0/boot/boot',
where wd0 is the PMON name of the boot disk.

__EOT
}

md_consoleinfo() {
}
@


1.26
log
@Move files created by root during install/upgrade in a subdir of
/tmp with proper permissions so that unprivileged programs can not
tamper with them.

positive feedback from deraadt
OK halex
@
text
@d1 1
a1 2
#	$OpenBSD: install.md,v 1.25 2016/02/08 17:28:09 krw Exp $
#
@


1.25
log
@If manual disklabel editing is requested during install, don't emit
verbiage explaining what disklabels are.

If you don't know, you should be using (A)uto!

ok rpe@@ halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.24 2015/12/29 11:16:14 rpe Exp $
d139 1
a139 1
	local _disk=$1 _f=/tmp/fstab.$1
@


1.24
log
@Change patterns in case-blocks from a*|A* to [aA]*

OK halex@@ krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.23 2015/12/18 16:20:58 rpe Exp $
d146 2
a147 12
	cat <<__EOT

You will now create an OpenBSD disklabel inside the OpenBSD MBR
partition. The disklabel defines how OpenBSD splits up the MBR partition
into OpenBSD partitions in which filesystems and swap space are created.
You must provide each filesystem's mountpoint in this program.

The offsets used in the disklabel are ABSOLUTE, i.e. relative to the
start of the disk, NOT the start of the OpenBSD MBR partition.

__EOT

@


1.23
log
@Introduce a new function disk_has() to inspect a disk if it has a
partition-table of a certain type and optionally if it has a partition
of a certain type.

Use disk_has() in the install.md script to replace all the various
"fdisk <disk> | grep <pattern>" commands greatly simplifying things.

positive feedback from sthen@@
"time to get it really tested" deraadt@@
OK krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.22 2015/12/02 21:17:17 krw Exp $
d69 1
a69 1
		w*|W*)
d107 1
a107 1
		e*|E*)
d130 1
a130 1
		o*|O*)
@


1.22
log
@If (O)penBSD is not offered as a partitioning option, do not accept
'O*|o*' as a valid response. Ignore it as we do other invalid input.

armv7 is special case to be handled separately.

Noticed by kettenis@@.

ok deraadt@@ rpe@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.21 2015/11/09 20:54:12 rpe Exp $
d58 1
a58 1
		if fdisk $_disk | grep -q 'Signature: 0xAA55'; then
d60 1
a60 1
			if fdisk $_disk | grep -q '^..: A6 '; then
d124 1
a124 1
			fdisk $_disk | grep -q '^..: 83 ' || \
d126 1
a126 1
			fdisk $_disk | grep -q "^..: A6 " || \
@


1.21
log
@Fix commas in "Use (W)hole disk MBR..." question.

OK jmc@@ krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.20 2015/11/05 21:04:19 miod Exp $
d130 3
a132 1
		o*|O*)	break ;;
@


1.20
log
@newfs the ext2fs partition containing the boot blocks with -O 1 when running
on the eBenton EBT700, for the PMON flavour found on these systems won't
recognize the filesystem correctly otherwise; researched and reported by
Ban Keong Yee.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.19 2015/06/02 19:54:06 rpe Exp $
d61 1
a61 1
				_q=", use the (O)penBSD area,"
@


1.19
log
@Remove the $FSTABFLAG variable and use -F directly. The installer
uses disklabel UIDs unconditionally for a while already.

OK krw@@
"looks good" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.18 2015/05/31 19:40:10 rpe Exp $
d70 2
a71 1
			if [ $(sysctl -n hw.product) = Gdium ]; then
d74 6
a79 1
			else
d82 2
a83 1
			fi
@


1.18
log
@Replace identical code in the MD scripts of the installer with a new
MI function disklabel_autolayout() which now handles all aspects of
the disklabel auto-layout and autopartitioning case for the root disk.
Remove get_disklabel_template() and merge it with the new function.

"move forward" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.17 2015/05/04 19:55:26 rpe Exp $
d149 1
a149 1
	disklabel $FSTABFLAG $_f -E $_disk
@


1.17
log
@Add the new template file based autopartitioning feature of disklabel(8)
to the OpenBSD installer. It is available during unattended installation.
The template file is fetched from an url, provided as answer to a new
question in the response file:

    URL to autopartitioning template for disklabel = url

Original diff from and OK henning@@
'no objection' krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.16 2015/04/19 00:37:36 deraadt Exp $
d130 1
a130 1
	local _disk=$1 _f _op
d134 2
a135 21
	_f=/tmp/fstab.$_disk
	if [[ $_disk == $ROOTDISK ]]; then
		if $AUTO && get_disklabel_template; then
			disklabel -T /disklabel.auto $FSTABFLAG $_f -w -A $_disk && return
			echo "Autopartitioning failed"
			exit 1
		fi
		while :; do
			echo "The auto-allocated layout for $_disk is:"
			disklabel -h -A $_disk | egrep "^#  |^  [a-p]:"
			ask "Use (A)uto layout, (E)dit auto layout, or create (C)ustom layout?" a
			case $resp in
			a*|A*)	_op=-w ;;
			e*|E*)	_op=-E ;;
			c*|C*)	break ;;
			*)	continue ;;
			esac
			disklabel $FSTABFLAG $_f $_op -A $_disk
			return
		done
	fi
@


1.16
log
@Force the boot partition to ext2fs, rathern than leaving it as it was.
Found by inspection while curious... not though actual experience...
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.15 2015/02/12 08:44:47 rpe Exp $
d136 5
@


1.15
log
@Use ksh arithmethic instead of expr.

Noted by todd@@
OK krw@@ halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.14 2014/08/15 09:45:54 rpe Exp $
d81 1
a81 1

@


1.14
log
@Align install.md files with installer style.

- { foo ; bar ; } -> { foo; bar; }
- if foo ; then -> if foo; then

OK halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.13 2013/11/16 18:37:27 rpe Exp $
d84 1
a84 1
$(expr $_s \* 2048)
d90 1
a90 1
$(expr $_s \* 2048 + 1)
@


1.13
log
@Remove AUTOROOT variable which is a leftover of r1.183 of install.sub

diff from Philipp e1c1bac6253dc54a1e89ddc046585792 at osteo dot net

ok krw@@ halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.12 2012/10/15 16:15:34 deraadt Exp $
d118 1
a118 1
				{ echo "\nNo Linux files (id 83) partition!\n" ; continue ; }
d120 1
a120 1
				{ echo "\nNo OpenBSD (id A6) partition!\n" ; continue ; }
@


1.12
log
@Put less boot stuff into ramdisk /usr/mdec; tested by phessler
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.11 2012/07/13 14:50:34 halex Exp $
d141 1
a141 1
			a*|A*)	_op=-w ; AUTOROOT=y ;;
@


1.11
log
@copy boot loaders using cat and shell redirection rather than cp,
since the latter may insert holes in the target files, which could
be bad for the boot process

ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.10 2012/07/13 12:00:48 halex Exp $
d41 1
a41 1
	   cat /usr/mdec/boot > /mnt2/boot/boot &&
@


1.10
log
@{ ...; } is more proper than ( ... ) since the latter spawns a subshell
while the former does not

pointed out by and ok naddy@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.9 2012/07/13 09:23:11 halex Exp $
d38 1
d41 1
a41 1
	   cp /usr/mdec/boot /mnt2/boot &&
@


1.9
log
@back out stuff that snuck into the last commit
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.7 2012/07/10 14:25:00 halex Exp $
d41 2
a42 2
	   ( [[ $(sysctl -n hw.product) != Gdium ]] ||
	     cp /mnt/bsd /mnt2/boot/bsd ); then
@


1.8
log
@fix logic flaw in md_installboot()

ok deraadt@@ otto@@
@
text
@d40 1
a40 2
	   # Use cat to avoid holes created by cp(1)
	   cat /usr/mdec/boot > /mnt2/boot &&
@


1.7
log
@since disklabel -W is no more, zap it from all the install.md's

ok krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.6 2011/04/17 20:57:10 krw Exp $
d38 8
a45 7
	if mount -t ext2fs /dev/${_disk}i /mnt2 ; then
		if mkdir -p /mnt2/boot && cp /usr/mdec/boot /mnt2/boot &&
		    [[ $(sysctl -n hw.product) != Gdium ]] ||
		      cp /mnt/bsd /mnt2/boot/bsd; then
			umount /mnt2
			return
		fi
@


1.6
log
@First crack at enabling the installation of a DUID version of
/etc/fstab, after asking user. Current default is existing behaviour.

Feedback & suggestions deraadt@@, halex@@, jsing@@, todd@@.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.5 2010/04/03 21:41:26 miod Exp $
a132 1
	disklabel -W $_disk >/dev/null 2>&1
@


1.5
log
@Use hw.product sysctl to tell whether we are installing on a Gdium Liberty
system, or something else.
Derive the fdisk instructions in `use the whole disk for OpenBSD' from this
knowledge, and set up a 32MB ext2fs partition on Gdium, and the 1MB elsewhere
(as was already been done).
On Gdium, format this partition in fancy mode (-O 1) and 4KB blocks, so that
PMON has a chance to load files larger than 4MB (such as bsd.rd)
without failing in a pathetic way, and also copy the kernel image to the ext2fs
partition after the installation has completed.

Note that, apart from creating a larger ext2fs partition on Gdium, there should
be no need for this.

Unfortunately, since regular PMON does not have ext2fs code, Lemote wrote its
own code to access ext2 filesystems. Saying that this code is full of
shortcomings and bugs would be an understatement. What is worse is that this
code has been written by people with no knowledge (or even insight) of how
error conditions ought to be handled, and their ext2fs code will happily
abort a read upon error with no error; if one does not compare the final
read size to the file size obtained by stat(), there is no way to figure out
that the read has been aborted. Of course since regular (upstream) PMON code
is written correctly, it does not expect this, so it is easy to end up with
PMON not loading a kernel image completely, yet proceeding happily to transfer
control to this broken image.

I guess the morale behind this is that system software is too difficult to get
done correctly, to be done by hardware people.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.4 2010/02/19 07:37:17 otto Exp $
d146 1
a146 1
			disklabel -f $_f $_op -A $_disk
d163 1
a163 1
	disklabel -f $_f -E $_disk
@


1.4
log
@less verbose in congrats text
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.3 2010/02/18 22:15:12 otto Exp $
d39 3
a41 1
		if mkdir -p /mnt2/boot && cp /usr/mdec/boot /mnt2/boot; then
d53 1
a53 1
	local _disk=$1 _q _d
d69 8
a76 1
			echo -n "Creating a 1MB ext2 partition and an OpenBSD partition for rest of $_disk..."
d78 13
a90 1
reinit
d97 1
a97 1
			newfs -qt ext2fs ${_disk}i
@


1.3
log
@-q for newfs
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.2 2010/02/18 20:20:52 otto Exp $
d149 3
a151 2
described in the INSTALL.$ARCH document. The command to boot the OpenBSD
bootloader will be something like 'boot /dev/fs/ext2@@wd0/boot/boot'
@


1.2
log
@loongson install procedure, using a newly created small ext2 partition (or an
existing one) to install the bootloader on.
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.45 2009/06/24 11:26:40 krw Exp $
d76 1
a76 1
			newfs -t ext2fs ${_disk}i
@


1.1
log
@initial ramdisk stuff, produces a working bsd.rd
@
text
@d1 1
a1 1
#	$OpenBSD: install.md,v 1.11 2009/06/11 04:28:51 deraadt Exp $
d36 12
d55 1
a55 1
		if [[ -n $(fdisk $_disk | grep 'Signature: 0xAA55') ]]; then
d57 1
a57 1
			if [[ -n $(fdisk $_disk | grep '^..: A6 ') ]]; then
d67 11
a77 10
			echo "Disabled, you probably do not want that."
#			echo -n "Setting OpenBSD MBR partition to whole $_disk..."
#			fdisk -e ${_disk} <<__EOT >/dev/null
#reinit
#update
#write
#quit
#__EOT
#			echo "done."
			return ;;
d82 9
a90 4
You will now create a single MBR partition to contain your OpenBSD data. This
partition must have an id of 'A6'; must *NOT* overlap other partitions; and
must be marked as the only active partition.  Inside the fdisk command, the
'manual' command describes all the fdisk commands in detail.
d94 8
a101 4
			fdisk -e ${_disk}
			[[ -n $(fdisk $_disk | grep ' A6 ') ]] && return
			echo No OpenBSD partition in MBR, try again. ;;
		o*|O*)	return ;;
d104 1
d146 7
@

