head	1.277;
access;
symbols
	OPENBSD_5_9:1.275.0.2
	OPENBSD_5_9_BASE:1.275
	OPENBSD_5_8:1.269.0.2
	OPENBSD_5_8_BASE:1.269
	OPENBSD_5_7:1.259.0.4
	OPENBSD_5_7_BASE:1.259
	OPENBSD_5_6:1.253.0.4
	OPENBSD_5_6_BASE:1.253
	OPENBSD_5_5:1.245.0.4
	OPENBSD_5_5_BASE:1.245
	OPENBSD_5_4:1.233.0.2
	OPENBSD_5_4_BASE:1.233
	OPENBSD_5_3:1.231.0.2
	OPENBSD_5_3_BASE:1.231
	OPENBSD_5_2:1.225.0.4
	OPENBSD_5_2_BASE:1.225
	OPENBSD_5_1_BASE:1.225
	OPENBSD_5_1:1.225.0.2
	OPENBSD_5_0:1.223.0.2
	OPENBSD_5_0_BASE:1.223
	OPENBSD_4_9:1.217.0.2
	OPENBSD_4_9_BASE:1.217
	OPENBSD_4_8:1.208.0.2
	OPENBSD_4_8_BASE:1.208
	OPENBSD_4_7:1.205.0.4
	OPENBSD_4_7_BASE:1.205
	OPENBSD_4_6:1.205.0.2
	OPENBSD_4_6_BASE:1.205
	OPENBSD_4_5:1.162.0.2
	OPENBSD_4_5_BASE:1.162
	OPENBSD_4_4:1.159.0.2
	OPENBSD_4_4_BASE:1.159
	OPENBSD_4_3:1.156.0.2
	OPENBSD_4_3_BASE:1.156
	OPENBSD_4_2:1.154.0.6
	OPENBSD_4_2_BASE:1.154
	OPENBSD_4_1:1.154.0.4
	OPENBSD_4_1_BASE:1.154
	OPENBSD_4_0:1.154.0.2
	OPENBSD_4_0_BASE:1.154
	OPENBSD_3_9:1.152.0.4
	OPENBSD_3_9_BASE:1.152
	OPENBSD_3_8:1.152.0.2
	OPENBSD_3_8_BASE:1.152
	OPENBSD_3_7:1.149.0.2
	OPENBSD_3_7_BASE:1.149
	OPENBSD_3_6:1.147.0.2
	OPENBSD_3_6_BASE:1.147
	OPENBSD_3_5:1.142.0.2
	OPENBSD_3_5_BASE:1.142
	OPENBSD_3_4:1.136.0.2
	OPENBSD_3_4_BASE:1.136
	OPENBSD_3_3:1.129.0.2
	OPENBSD_3_3_BASE:1.129
	OPENBSD_3_2:1.119.0.2
	OPENBSD_3_2_BASE:1.119
	OPENBSD_3_1:1.95.0.2
	OPENBSD_3_1_BASE:1.95
	OPENBSD_3_0:1.79.0.2
	OPENBSD_3_0_BASE:1.79
	OPENBSD_2_9:1.77.0.2
	OPENBSD_2_9_BASE:1.77
	OPENBSD_2_8:1.74.0.2
	OPENBSD_2_8_BASE:1.74
	OPENBSD_2_7:1.72.0.2
	OPENBSD_2_7_BASE:1.72
	OPENBSD_2_6:1.69.0.2
	OPENBSD_2_6_BASE:1.69
	OPENBSD_2_5:1.53.0.2
	OPENBSD_2_5_BASE:1.53
	OPENBSD_2_4:1.41.0.2
	OPENBSD_2_4_BASE:1.41
	OPENBSD_2_3:1.23.0.2
	OPENBSD_2_3_BASE:1.23
	OPENBSD_2_2:1.16.0.2
	OPENBSD_2_2_BASE:1.16
	OPENBSD_2_1:1.12.0.2
	OPENBSD_2_1_BASE:1.12
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@# @;


1.277
date	2016.04.02.12.36.49;	author rpe;	state dead;
branches;
next	1.276;
commitid	b6IVJTvHTKJuKLJa;

1.276
date	2016.04.02.12.23.46;	author rpe;	state Exp;
branches;
next	1.275;
commitid	RiZ3BjQb9aPCOLdl;

1.275
date	2016.02.11.14.24.28;	author rpe;	state Exp;
branches;
next	1.274;
commitid	6AMGHtQk2a3gbLBM;

1.274
date	2016.01.31.11.07.06;	author rpe;	state Exp;
branches;
next	1.273;
commitid	SNDLitQrtkPL8zIh;

1.273
date	2015.12.27.18.42.11;	author rpe;	state Exp;
branches;
next	1.272;
commitid	pclZ6pbnIK9CJZ2z;

1.272
date	2015.12.23.18.06.32;	author rpe;	state Exp;
branches;
next	1.271;
commitid	SOqXkdccBkBPhkdZ;

1.271
date	2015.12.23.17.54.52;	author rpe;	state Exp;
branches;
next	1.270;
commitid	EZVLQui2cKK0PsQg;

1.270
date	2015.09.09.23.07.10;	author halex;	state Exp;
branches;
next	1.269;
commitid	PMnT1G5OfPyllg1U;

1.269
date	2015.07.19.21.05.41;	author rpe;	state Exp;
branches;
next	1.268;
commitid	8LhqFRnNsFm6JsUF;

1.268
date	2015.06.02.19.54.06;	author rpe;	state Exp;
branches;
next	1.267;
commitid	zUqrjWrWSBxkCmbI;

1.267
date	2015.05.15.07.41.30;	author rpe;	state Exp;
branches;
next	1.266;
commitid	d54NkJap2U60xp2L;

1.266
date	2015.04.27.23.17.11;	author djm;	state Exp;
branches;
next	1.265;
commitid	Ud6JIGs2CHffDv3h;

1.265
date	2015.04.13.21.27.07;	author deraadt;	state Exp;
branches;
next	1.264;
commitid	XlnjSM8QPyxXBJUX;

1.264
date	2015.04.07.09.59.38;	author rpe;	state Exp;
branches;
next	1.263;
commitid	Dc2oH4EajYFZ0RUv;

1.263
date	2015.04.06.21.36.56;	author rpe;	state Exp;
branches;
next	1.262;
commitid	ooXaEpB8IOe5BXDh;

1.262
date	2015.04.04.14.21.01;	author rpe;	state Exp;
branches;
next	1.261;
commitid	PLsgWFhLbeuIMtBT;

1.261
date	2015.03.28.00.03.05;	author rpe;	state Exp;
branches;
next	1.260;
commitid	hxX5UqHok9DNQnHK;

1.260
date	2015.03.11.21.00.35;	author krw;	state Exp;
branches;
next	1.259;
commitid	1VeYYTWfKdJjaTAv;

1.259
date	2015.01.02.22.38.50;	author rpe;	state Exp;
branches;
next	1.258;
commitid	oYDcoroleJ3iFg1y;

1.258
date	2014.09.05.07.22.29;	author ajacoutot;	state Exp;
branches;
next	1.257;
commitid	ccN4Si6d1wRdxTWe;

1.257
date	2014.08.27.14.04.15;	author florian;	state Exp;
branches;
next	1.256;
commitid	JNq3mHDvq54quWei;

1.256
date	2014.08.10.16.32.28;	author rpe;	state Exp;
branches;
next	1.255;
commitid	lCRNSFKztsAF7nlY;

1.255
date	2014.08.10.14.59.22;	author rpe;	state Exp;
branches;
next	1.254;
commitid	8cc3GNm52cNZPT6R;

1.254
date	2014.08.09.21.51.29;	author halex;	state Exp;
branches;
next	1.253;
commitid	LINk3EUUsDVK3Tv6;

1.253
date	2014.07.22.10.03.56;	author ajacoutot;	state Exp;
branches;
next	1.252;
commitid	CInGyHuQo667x6rb;

1.252
date	2014.07.22.06.45.31;	author ajacoutot;	state Exp;
branches;
next	1.251;
commitid	hpLArYX4YZqaknr3;

1.251
date	2014.07.21.20.43.00;	author naddy;	state Exp;
branches;
next	1.250;
commitid	zzpNzlsgSkkzWWYe;

1.250
date	2014.07.21.20.34.14;	author naddy;	state Exp;
branches;
next	1.249;
commitid	5f4ZPx1JQYAaaEny;

1.249
date	2014.07.16.08.27.14;	author ajacoutot;	state Exp;
branches;
next	1.248;
commitid	gLpvhCCdHAsHflLk;

1.248
date	2014.07.15.08.49.50;	author deraadt;	state Exp;
branches;
next	1.247;
commitid	tgQOjoDBlfYCUp5J;

1.247
date	2014.04.19.16.50.52;	author rpe;	state Exp;
branches;
next	1.246;

1.246
date	2014.03.20.20.01.28;	author krw;	state Exp;
branches;
next	1.245;

1.245
date	2014.02.21.17.11.02;	author deraadt;	state Exp;
branches;
next	1.244;

1.244
date	2014.02.21.16.30.14;	author deraadt;	state Exp;
branches;
next	1.243;

1.243
date	2014.02.21.16.29.08;	author deraadt;	state Exp;
branches;
next	1.242;

1.242
date	2014.02.04.00.47.27;	author rpe;	state Exp;
branches;
next	1.241;

1.241
date	2014.02.02.09.32.00;	author rpe;	state Exp;
branches;
next	1.240;

1.240
date	2014.01.05.01.56.52;	author deraadt;	state Exp;
branches;
next	1.239;

1.239
date	2013.12.18.08.04.16;	author halex;	state Exp;
branches;
next	1.238;

1.238
date	2013.12.06.00.42.45;	author rpe;	state Exp;
branches;
next	1.237;

1.237
date	2013.12.01.01.54.23;	author halex;	state Exp;
branches;
next	1.236;

1.236
date	2013.11.19.22.20.06;	author halex;	state Exp;
branches;
next	1.235;

1.235
date	2013.11.16.18.37.27;	author rpe;	state Exp;
branches;
next	1.234;

1.234
date	2013.10.31.19.15.20;	author halex;	state Exp;
branches;
next	1.233;

1.233
date	2013.05.31.06.27.08;	author rpe;	state Exp;
branches;
next	1.232;

1.232
date	2013.04.15.18.53.50;	author deraadt;	state Exp;
branches;
next	1.231;

1.231
date	2012.09.28.16.23.25;	author rpe;	state Exp;
branches;
next	1.230;

1.230
date	2012.09.28.16.19.05;	author rpe;	state Exp;
branches;
next	1.229;

1.229
date	2012.09.28.16.13.50;	author rpe;	state Exp;
branches;
next	1.228;

1.228
date	2012.09.28.16.07.10;	author rpe;	state Exp;
branches;
next	1.227;

1.227
date	2012.09.28.15.48.05;	author rpe;	state Exp;
branches;
next	1.226;

1.226
date	2012.09.03.07.34.37;	author deraadt;	state Exp;
branches;
next	1.225;

1.225
date	2012.01.31.20.01.12;	author halex;	state Exp;
branches;
next	1.224;

1.224
date	2011.08.17.03.42.14;	author todd;	state Exp;
branches;
next	1.223;

1.223
date	2011.07.24.15.33.41;	author fgsch;	state Exp;
branches;
next	1.222;

1.222
date	2011.07.23.08.31.25;	author fgsch;	state Exp;
branches;
next	1.221;

1.221
date	2011.07.04.20.59.05;	author halex;	state Exp;
branches;
next	1.220;

1.220
date	2011.04.17.21.02.44;	author krw;	state Exp;
branches;
next	1.219;

1.219
date	2011.04.17.20.57.10;	author krw;	state Exp;
branches;
next	1.218;

1.218
date	2011.04.04.14.37.25;	author ajacoutot;	state Exp;
branches;
next	1.217;

1.217
date	2011.02.07.18.01.08;	author miod;	state Exp;
branches;
next	1.216;

1.216
date	2011.01.10.06.49.08;	author deraadt;	state Exp;
branches;
next	1.215;

1.215
date	2011.01.03.00.36.50;	author deraadt;	state Exp;
branches;
next	1.214;

1.214
date	2010.12.22.22.22.40;	author todd;	state Exp;
branches;
next	1.213;

1.213
date	2010.12.22.21.23.26;	author todd;	state Exp;
branches;
next	1.212;

1.212
date	2010.12.22.18.23.54;	author deraadt;	state Exp;
branches;
next	1.211;

1.211
date	2010.12.22.18.13.15;	author deraadt;	state Exp;
branches;
next	1.210;

1.210
date	2010.10.30.22.48.03;	author deraadt;	state Exp;
branches;
next	1.209;

1.209
date	2010.10.29.07.43.09;	author deraadt;	state Exp;
branches;
next	1.208;

1.208
date	2010.08.04.07.07.41;	author halex;	state Exp;
branches;
next	1.207;

1.207
date	2010.04.06.21.01.20;	author deraadt;	state Exp;
branches;
next	1.206;

1.206
date	2010.04.04.22.29.08;	author halex;	state Exp;
branches;
next	1.205;

1.205
date	2009.07.10.02.59.32;	author deraadt;	state Exp;
branches;
next	1.204;

1.204
date	2009.07.02.23.48.34;	author krw;	state Exp;
branches;
next	1.203;

1.203
date	2009.06.27.08.33.27;	author ajacoutot;	state Exp;
branches;
next	1.202;

1.202
date	2009.06.11.02.44.50;	author krw;	state Exp;
branches;
next	1.201;

1.201
date	2009.06.09.10.11.21;	author halex;	state Exp;
branches;
next	1.200;

1.200
date	2009.06.03.00.30.31;	author krw;	state Exp;
branches;
next	1.199;

1.199
date	2009.06.02.23.53.34;	author krw;	state Exp;
branches;
next	1.198;

1.198
date	2009.06.01.02.57.40;	author krw;	state Exp;
branches;
next	1.197;

1.197
date	2009.05.31.18.38.42;	author deraadt;	state Exp;
branches;
next	1.196;

1.196
date	2009.05.31.00.03.29;	author deraadt;	state Exp;
branches;
next	1.195;

1.195
date	2009.05.31.00.02.50;	author deraadt;	state Exp;
branches;
next	1.194;

1.194
date	2009.05.30.20.40.59;	author deraadt;	state Exp;
branches;
next	1.193;

1.193
date	2009.05.30.19.34.39;	author deraadt;	state Exp;
branches;
next	1.192;

1.192
date	2009.05.30.19.32.20;	author deraadt;	state Exp;
branches;
next	1.191;

1.191
date	2009.05.30.18.11.03;	author deraadt;	state Exp;
branches;
next	1.190;

1.190
date	2009.05.28.02.34.56;	author krw;	state Exp;
branches;
next	1.189;

1.189
date	2009.05.17.15.00.51;	author krw;	state Exp;
branches;
next	1.188;

1.188
date	2009.05.17.12.45.00;	author krw;	state Exp;
branches;
next	1.187;

1.187
date	2009.05.11.02.07.47;	author krw;	state Exp;
branches;
next	1.186;

1.186
date	2009.05.07.03.43.02;	author todd;	state Exp;
branches;
next	1.185;

1.185
date	2009.05.06.08.35.24;	author deraadt;	state Exp;
branches;
next	1.184;

1.184
date	2009.05.06.01.29.48;	author deraadt;	state Exp;
branches;
next	1.183;

1.183
date	2009.05.06.01.00.14;	author krw;	state Exp;
branches;
next	1.182;

1.182
date	2009.05.05.00.38.02;	author deraadt;	state Exp;
branches;
next	1.181;

1.181
date	2009.05.03.20.20.38;	author krw;	state Exp;
branches;
next	1.180;

1.180
date	2009.05.03.15.03.05;	author krw;	state Exp;
branches;
next	1.179;

1.179
date	2009.05.03.14.02.07;	author krw;	state Exp;
branches;
next	1.178;

1.178
date	2009.05.03.05.13.38;	author krw;	state Exp;
branches;
next	1.177;

1.177
date	2009.04.30.01.03.19;	author deraadt;	state Exp;
branches;
next	1.176;

1.176
date	2009.04.30.01.01.56;	author deraadt;	state Exp;
branches;
next	1.175;

1.175
date	2009.04.29.22.45.20;	author deraadt;	state Exp;
branches;
next	1.174;

1.174
date	2009.04.29.17.22.49;	author deraadt;	state Exp;
branches;
next	1.173;

1.173
date	2009.04.28.21.41.03;	author deraadt;	state Exp;
branches;
next	1.172;

1.172
date	2009.04.25.03.47.35;	author deraadt;	state Exp;
branches;
next	1.171;

1.171
date	2009.04.24.01.04.33;	author krw;	state Exp;
branches;
next	1.170;

1.170
date	2009.04.23.23.16.34;	author deraadt;	state Exp;
branches;
next	1.169;

1.169
date	2009.04.23.18.26.14;	author deraadt;	state Exp;
branches;
next	1.168;

1.168
date	2009.04.19.17.56.01;	author deraadt;	state Exp;
branches;
next	1.167;

1.167
date	2009.04.13.02.22.12;	author krw;	state Exp;
branches;
next	1.166;

1.166
date	2009.04.10.21.01.32;	author krw;	state Exp;
branches;
next	1.165;

1.165
date	2009.04.10.18.26.50;	author krw;	state Exp;
branches;
next	1.164;

1.164
date	2009.03.14.15.55.39;	author krw;	state Exp;
branches;
next	1.163;

1.163
date	2009.03.14.14.23.05;	author krw;	state Exp;
branches;
next	1.162;

1.162
date	2009.02.21.18.07.14;	author krw;	state Exp;
branches;
next	1.161;

1.161
date	2009.02.19.02.11.32;	author krw;	state Exp;
branches;
next	1.160;

1.160
date	2009.02.15.15.56.45;	author krw;	state Exp;
branches;
next	1.159;

1.159
date	2008.06.26.05.42.03;	author ray;	state Exp;
branches;
next	1.158;

1.158
date	2008.06.13.04.41.44;	author krw;	state Exp;
branches;
next	1.157;

1.157
date	2008.06.01.02.45.59;	author krw;	state Exp;
branches;
next	1.156;

1.156
date	2008.03.02.21.18.58;	author krw;	state Exp;
branches;
next	1.155;

1.155
date	2008.02.11.23.40.03;	author krw;	state Exp;
branches;
next	1.154;

1.154
date	2006.08.29.01.02.49;	author krw;	state Exp;
branches;
next	1.153;

1.153
date	2006.06.23.21.43.19;	author krw;	state Exp;
branches;
next	1.152;

1.152
date	2005.04.21.21.41.33;	author krw;	state Exp;
branches;
next	1.151;

1.151
date	2005.04.02.14.27.08;	author krw;	state Exp;
branches;
next	1.150;

1.150
date	2005.03.26.01.40.21;	author krw;	state Exp;
branches;
next	1.149;

1.149
date	2004.11.06.18.05.48;	author deraadt;	state Exp;
branches;
next	1.148;

1.148
date	2004.10.02.18.45.08;	author krw;	state Exp;
branches;
next	1.147;

1.147
date	2004.07.30.00.16.30;	author krw;	state Exp;
branches;
next	1.146;

1.146
date	2004.07.18.01.12.32;	author deraadt;	state Exp;
branches;
next	1.145;

1.145
date	2004.07.04.22.30.25;	author krw;	state Exp;
branches;
next	1.144;

1.144
date	2004.06.26.20.10.17;	author krw;	state Exp;
branches;
next	1.143;

1.143
date	2004.05.28.22.59.34;	author krw;	state Exp;
branches;
next	1.142;

1.142
date	2004.03.23.02.39.38;	author krw;	state Exp;
branches;
next	1.141;

1.141
date	2004.03.18.00.25.12;	author krw;	state Exp;
branches;
next	1.140;

1.140
date	2003.12.04.18.43.38;	author deraadt;	state Exp;
branches;
next	1.139;

1.139
date	2003.11.03.05.16.21;	author david;	state Exp;
branches;
next	1.138;

1.138
date	2003.09.26.00.11.25;	author krw;	state Exp;
branches;
next	1.137;

1.137
date	2003.09.22.01.31.39;	author krw;	state Exp;
branches;
next	1.136;

1.136
date	2003.08.17.18.18.50;	author krw;	state Exp;
branches;
next	1.135;

1.135
date	2003.08.07.19.12.59;	author deraadt;	state Exp;
branches;
next	1.134;

1.134
date	2003.07.03.15.19.01;	author krw;	state Exp;
branches;
next	1.133;

1.133
date	2003.07.02.16.42.19;	author krw;	state Exp;
branches;
next	1.132;

1.132
date	2003.06.30.17.49.14;	author krw;	state Exp;
branches;
next	1.131;

1.131
date	2003.06.27.22.40.40;	author krw;	state Exp;
branches;
next	1.130;

1.130
date	2003.06.02.15.46.09;	author deraadt;	state Exp;
branches;
next	1.129;

1.129
date	2002.12.14.15.33.34;	author krw;	state Exp;
branches;
next	1.128;

1.128
date	2002.12.08.20.24.56;	author krw;	state Exp;
branches;
next	1.127;

1.127
date	2002.12.08.19.30.40;	author krw;	state Exp;
branches;
next	1.126;

1.126
date	2002.12.04.03.39.07;	author krw;	state Exp;
branches;
next	1.125;

1.125
date	2002.12.03.00.58.35;	author krw;	state Exp;
branches;
next	1.124;

1.124
date	2002.11.28.04.50.45;	author krw;	state Exp;
branches;
next	1.123;

1.123
date	2002.11.28.03.06.30;	author deraadt;	state Exp;
branches;
next	1.122;

1.122
date	2002.11.28.01.54.58;	author krw;	state Exp;
branches;
next	1.121;

1.121
date	2002.11.24.19.09.46;	author deraadt;	state Exp;
branches;
next	1.120;

1.120
date	2002.11.01.00.39.19;	author krw;	state Exp;
branches;
next	1.119;

1.119
date	2002.10.03.00.56.44;	author krw;	state Exp;
branches;
next	1.118;

1.118
date	2002.09.28.23.35.12;	author krw;	state Exp;
branches;
next	1.117;

1.117
date	2002.09.25.12.19.12;	author krw;	state Exp;
branches;
next	1.116;

1.116
date	2002.09.24.01.26.15;	author krw;	state Exp;
branches;
next	1.115;

1.115
date	2002.09.22.22.42.25;	author krw;	state Exp;
branches;
next	1.114;

1.114
date	2002.09.17.12.28.54;	author krw;	state Exp;
branches;
next	1.113;

1.113
date	2002.08.27.02.18.34;	author krw;	state Exp;
branches;
next	1.112;

1.112
date	2002.08.25.02.13.09;	author krw;	state Exp;
branches;
next	1.111;

1.111
date	2002.08.18.21.05.47;	author krw;	state Exp;
branches;
next	1.110;

1.110
date	2002.07.31.13.46.15;	author krw;	state Exp;
branches;
next	1.109;

1.109
date	2002.07.28.01.14.58;	author krw;	state Exp;
branches;
next	1.108;

1.108
date	2002.07.21.04.57.01;	author hugh;	state Exp;
branches;
next	1.107;

1.107
date	2002.07.13.16.32.13;	author krw;	state Exp;
branches;
next	1.106;

1.106
date	2002.07.13.13.18.05;	author krw;	state Exp;
branches;
next	1.105;

1.105
date	2002.07.01.14.58.42;	author krw;	state Exp;
branches;
next	1.104;

1.104
date	2002.06.29.20.01.34;	author krw;	state Exp;
branches;
next	1.103;

1.103
date	2002.06.25.00.31.59;	author krw;	state Exp;
branches;
next	1.102;

1.102
date	2002.05.20.16.53.57;	author krw;	state Exp;
branches;
next	1.101;

1.101
date	2002.05.15.11.54.34;	author mpech;	state Exp;
branches;
next	1.100;

1.100
date	2002.04.30.04.14.18;	author krw;	state Exp;
branches;
next	1.99;

1.99
date	2002.04.28.20.41.15;	author krw;	state Exp;
branches;
next	1.98;

1.98
date	2002.04.28.14.44.01;	author krw;	state Exp;
branches;
next	1.97;

1.97
date	2002.04.26.02.14.23;	author krw;	state Exp;
branches;
next	1.96;

1.96
date	2002.04.20.13.42.52;	author krw;	state Exp;
branches;
next	1.95;

1.95
date	2002.04.12.03.24.02;	author millert;	state Exp;
branches;
next	1.94;

1.94
date	2002.04.12.02.24.40;	author deraadt;	state Exp;
branches;
next	1.93;

1.93
date	2002.04.09.01.01.19;	author krw;	state Exp;
branches;
next	1.92;

1.92
date	2002.04.05.02.51.59;	author krw;	state Exp;
branches;
next	1.91;

1.91
date	2002.04.02.01.25.34;	author krw;	state Exp;
branches;
next	1.90;

1.90
date	2002.03.31.15.30.42;	author krw;	state Exp;
branches;
next	1.89;

1.89
date	2002.03.31.03.05.04;	author krw;	state Exp;
branches;
next	1.88;

1.88
date	2002.03.30.01.29.18;	author deraadt;	state Exp;
branches;
next	1.87;

1.87
date	2002.03.30.00.50.57;	author krw;	state Exp;
branches;
next	1.86;

1.86
date	2002.03.19.12.16.13;	author krw;	state Exp;
branches;
next	1.85;

1.85
date	2002.03.17.03.04.47;	author krw;	state Exp;
branches;
next	1.84;

1.84
date	2002.03.04.13.59.52;	author krw;	state Exp;
branches;
next	1.83;

1.83
date	2002.03.03.00.43.37;	author krw;	state Exp;
branches;
next	1.82;

1.82
date	2001.12.23.16.54.04;	author krw;	state Exp;
branches;
next	1.81;

1.81
date	2001.11.25.19.40.51;	author krw;	state Exp;
branches;
next	1.80;

1.80
date	2001.11.18.22.48.58;	author krw;	state Exp;
branches;
next	1.79;

1.79
date	2001.10.14.02.35.57;	author millert;	state Exp;
branches;
next	1.78;

1.78
date	2001.06.23.19.44.45;	author deraadt;	state Exp;
branches;
next	1.77;

1.77
date	2001.04.20.01.55.51;	author krw;	state Exp;
branches;
next	1.76;

1.76
date	2001.04.16.19.43.27;	author krw;	state Exp;
branches;
next	1.75;

1.75
date	2001.03.26.14.46.55;	author todd;	state Exp;
branches;
next	1.74;

1.74
date	2000.06.16.03.19.42;	author deraadt;	state Exp;
branches;
next	1.73;

1.73
date	2000.06.01.21.01.28;	author millert;	state Exp;
branches;
next	1.72;

1.72
date	2000.05.07.17.08.26;	author millert;	state Exp;
branches;
next	1.71;

1.71
date	2000.04.30.19.10.01;	author millert;	state Exp;
branches;
next	1.70;

1.70
date	2000.03.19.01.14.03;	author espie;	state Exp;
branches;
next	1.69;

1.69
date	99.10.16.19.01.21;	author deraadt;	state Exp;
branches;
next	1.68;

1.68
date	99.10.15.16.55.00;	author millert;	state Exp;
branches;
next	1.67;

1.67
date	99.10.15.15.16.01;	author deraadt;	state Exp;
branches;
next	1.66;

1.66
date	99.10.14.17.29.04;	author deraadt;	state Exp;
branches;
next	1.65;

1.65
date	99.10.14.17.19.42;	author deraadt;	state Exp;
branches;
next	1.64;

1.64
date	99.10.14.17.17.46;	author millert;	state Exp;
branches;
next	1.63;

1.63
date	99.10.08.03.54.13;	author millert;	state Exp;
branches;
next	1.62;

1.62
date	99.09.25.22.48.45;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	99.09.23.21.33.43;	author aaron;	state Exp;
branches;
next	1.60;

1.60
date	99.09.23.19.02.20;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	99.09.23.19.00.34;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	99.09.03.18.55.29;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	99.09.03.18.54.03;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	99.08.15.09.53.36;	author millert;	state Exp;
branches;
next	1.55;

1.55
date	99.07.30.00.31.27;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	99.07.19.00.57.46;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	99.04.10.04.38.30;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	99.04.10.04.09.22;	author millert;	state Exp;
branches;
next	1.51;

1.51
date	99.04.08.06.16.15;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	99.04.07.22.59.27;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	99.04.07.08.47.34;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	99.04.07.06.09.22;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	99.04.07.05.58.04;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	99.04.01.21.24.22;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	99.04.01.04.14.08;	author millert;	state Exp;
branches;
next	1.44;

1.44
date	99.02.28.06.50.33;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	98.11.09.03.54.52;	author millert;	state Exp;
branches;
next	1.42;

1.42
date	98.10.28.17.51.14;	author millert;	state Exp;
branches;
next	1.41;

1.41
date	98.10.13.21.23.30;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	98.10.11.02.50.47;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	98.10.07.02.40.45;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	98.09.28.13.37.54;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	98.09.28.13.28.35;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	98.09.28.13.19.48;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	98.09.28.12.34.51;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	98.09.28.12.34.06;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	98.09.26.21.41.23;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	98.09.25.02.23.52;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	98.09.24.21.52.10;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	98.09.23.06.51.20;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	98.09.17.00.49.15;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	98.09.15.21.48.27;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	98.09.11.22.45.53;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	98.07.13.23.23.19;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	98.06.08.02.01.15;	author jason;	state Exp;
branches;
next	1.24;

1.24
date	98.06.02.02.22.18;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	98.04.11.09.47.27;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	98.03.28.21.40.45;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	98.03.28.21.06.51;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	98.03.12.08.13.48;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	98.01.10.02.22.56;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	97.11.10.20.56.32;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	97.10.30.05.23.44;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	97.10.17.12.21.02;	author deraadt;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	97.10.17.12.05.56;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.10.17.04.20.59;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.09.23.22.39.25;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	97.05.17.21.16.46;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	97.05.14.21.22.06;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	97.05.14.21.07.59;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.05.13.18.22.18;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.05.08.15.48.19;	author tholo;	state Exp;
branches;
next	1.7;

1.7
date	97.05.03.23.06.01;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	97.05.02.20.56.17;	author grr;	state Exp;
branches;
next	1.5;

1.5
date	97.04.30.23.56.05;	author grr;	state Exp;
branches;
next	1.4;

1.4
date	97.04.30.18.52.43;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.05.21.26.39;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.28.21.48.18;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.07.13.22.50;	author deraadt;	state Exp;
branches;
next	;

1.16.2.1
date	97.10.30.05.43.47;	author millert;	state Exp;
branches;
next	;


desc
@@


1.277
log
@forgot to cvs rm locally in previous commit
@
text
@@


1.276
log
@- merge install.sh into install.sub as do_install()
- merge upgrade.sh into install.sub as do_upgrade()
- delete install.sh and upgrade.sh
- make install.sub executable
- turn install and upgrade into symbolic links to install.sub
- add autoinstall symbolic link to install.sub
- change dot.profile to use these symlinks
- introduce a -m option to set MODE in install.sub
- alternativly set MODE and AUTO depending on PROGNAME
- execute the do_{install,upgrade) functions depending on $MODE

OK halex@@, krw@@
'go for it' deraadt@@
@
text
@@


1.275
log
@Ensure, that the '&' is placed correctly if not all variables are set.
While there do it with less code.

with feedback from and OK halex@@
@
text
@a0 316
#!/bin/ksh
#	$OpenBSD: install.sh,v 1.274 2016/01/31 11:07:06 rpe Exp $
#	$NetBSD: install.sh,v 1.5.2.8 1996/08/27 18:15:05 gwr Exp $
#
# Copyright (c) 1997-2015 Todd Miller, Theo de Raadt, Ken Westerback
# Copyright (c) 2015, Robert Peichaer <rpe@@openbsd.org>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Copyright (c) 1996 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jason R. Thorpe.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#	OpenBSD installation script.

# install.sub needs to know the MODE.
MODE=install

# Include common subroutines and initialization code.
. install.sub

# Ask for/set the system hostname and add the hostname specific siteXX set.
ask_until "System hostname? (short form, e.g. 'foo')" "$(hostname -s)"
[[ ${resp%%.*} != $(hostname -s) ]] && hostname "$resp"
THESETS="$THESETS site$VERSION-$(hostname -s).tgz"

echo

# Configure the network.
donetconfig

# If there's network connectivity, fetch list of mirror servers and installer
# choices from previous runs.
((NIFS)) && startcgiinfo

echo

while :; do
	askpassword "Password for root account?"
	_rootpass="$_password"
	[[ -n "$_password" ]] && break
	echo "The root password must be set."
done

# Ask for the root user public ssh key during autoinstall.
rootkey=
if $AUTO; then
	ask "Public ssh key for root account?" none
	[[ $resp != none ]] && rootkey=$resp
fi

# Ask user about daemon startup on boot, X Window usage and console setup.
questions

# Gather information for setting up the initial user account.
user_setup
ask_root_sshd

# Set TZ variable based on zonefile and user selection.
set_timezone /var/tzlist

echo

# Get information about ROOTDISK, etc.
get_rootinfo

DISKS_DONE=
FSENT=

# Remove traces of previous install attempt.
rm -f /tmp/fstab*

# Configure the disk(s).
while :; do
	# Always do ROOTDISK first, and repeat until it is configured.
	if ! isin $ROOTDISK $DISKS_DONE; then
		resp=$ROOTDISK
		rm -f /tmp/fstab
	else
		# Force the user to think and type in a disk name by
		# making 'done' the default choice.
		ask_which "disk" "do you wish to initialize" \
			'$(get_dkdevs_uninitialized)' done
		[[ $resp == done ]] && break
	fi
	_disk=$resp
	configure_disk $_disk || continue
	DISKS_DONE=$(addel $_disk $DISKS_DONE)
done

# Write fstab entries to fstab in mount point alphabetic order
# to enforce a rational mount order.
for _mp in $(bsort $FSENT); do
	_pp=${_mp##*!}
	_mp=${_mp%!*}
	echo -n "$_pp $_mp ffs rw"

	# Only '/' is neither nodev nor nosuid. i.e. it can obviously
	# *always* contain devices or setuid programs.
	[[ $_mp == / ]] && { echo " 1 1"; continue; }

	# Every other mounted filesystem is nodev. If the user chooses
	# to mount /dev as a separate filesystem, then on the user's
	# head be it.
	echo -n ",nodev"

	# The only directories that the install puts suid binaries into
	# (as of 3.2) are:
	#
	# /sbin
	# /usr/bin
	# /usr/sbin
	# /usr/libexec
	# /usr/libexec/auth
	# /usr/X11R6/bin
	#
	# and ports and users can do who knows what to /usr/local and
	# sub directories thereof.
	#
	# So try to ensure that only filesystems that are mounted at
	# or above these directories can contain suid programs. In the
	# case of /usr/libexec, give blanket permission for
	# subdirectories.
	case $_mp in
	/sbin|/usr)			;;
	/usr/bin|/usr/sbin)		;;
	/usr/libexec|/usr/libexec/*)	;;
	/usr/local|/usr/local/*)	;;
	/usr/X11R6|/usr/X11R6/bin)	;;
	*)	echo -n ",nosuid"	;;
	esac
	echo " 1 2"
done >>/tmp/fstab

# Create a skeletal /etc/fstab which is usable for the installation process.
munge_fstab

# Use async options for faster mounts of the filesystems.
mount_fs "-o async"

# Feed the random pool some entropy before we read from it.
feed_random

# Ask the user for locations, and install whatever sets the user selected.
install_sets

# If we did not succeed at setting TZ yet, we try again
# using the timezone names extracted from the base set.
if [[ -z $TZ ]]; then
	(cd /mnt/usr/share/zoneinfo
		ls -1dF $(tar cvf /dev/null [A-Za-y]*) >/mnt/tmp/tzlist )
	echo
	set_timezone /mnt/tmp/tzlist
	rm -f /mnt/tmp/tzlist
fi

# If we got a timestamp from the cgi server, and that time diffs by more
# than 120 seconds, ask if the user wants to adjust the time.
if _time=$(http_time) && _now=$(date +%s) &&
	(( _now - _time > 120 || _time - _now > 120 )); then
	_tz=/mnt/usr/share/zoneinfo/$TZ
	if ask_yn "Time appears wrong.  Set to '$(TZ=$_tz date -r "$(http_time)")'?" yes; then
		# We do not need to specify TZ below since both date
		# invocations use the same one.
		date $(date -r "$(http_time)" "+%Y%m%d%H%M.%S") >/dev/null
		# N.B. This will screw up SECONDS.
	fi
fi

# If we managed to talk to the cgi server before, tell it what
# location we used... so it can perform magic next time.
if [[ -s $HTTP_LIST ]]; then
	_i=${INSTALL:+install=$INSTALL&}
	_i=$_i${TZ:+TZ=$TZ&}
	_i=$_i${METHOD:+method=$METHOD}
	_i=${_i%&}
	[[ -n $_i ]] && ftp -Vao - \
		"http://129.128.5.191/cgi-bin/ftpinstall.cgi?$_i" >/dev/null 2>&1 &
fi

# Ensure an enabled console has the correct speed in /etc/ttys.
sed "/^console.*on.*secure.*$/s/std\.[0-9]*/std.$(stty speed </dev/console)/" \
	/mnt/etc/ttys >/tmp/ttys
mv /tmp/ttys /mnt/etc/ttys

echo -n "Saving configuration files..."

# Save any leases obtained during install.
(cd /var/db; for _f in dhclient.leases.*; do
	[[ -f $_f ]] && mv $_f /mnt/var/db/.
done)

# Move configuration files from /tmp to /mnt/etc.
hostname >/tmp/myname

# Append entries to installed hosts file, changing '1.2.3.4 hostname'
# to '1.2.3.4 hostname.$FQDN hostname'. Leave untouched lines containing
# domain information or aliases. These are lines the user added/changed
# manually.

# Add common entries.
echo "127.0.0.1\tlocalhost" >/mnt/etc/hosts
echo "::1\t\tlocalhost" >>/mnt/etc/hosts

# Note we may have no hosts file if no interfaces were configured.
if [[ -f /tmp/hosts ]]; then
	_dn=$(get_fqdn)
	while read _addr _hn _aliases; do
		if [[ -n $_aliases || $_hn != ${_hn%%.*} || -z $_dn ]]; then
			echo "$_addr\t$_hn $_aliases"
		else
			echo "$_addr\t$_hn.$_dn $_hn"
		fi
	done </tmp/hosts >>/mnt/etc/hosts
	rm /tmp/hosts
fi

# Append dhclient.conf to installed dhclient.conf.
_f=dhclient.conf
[[ -f /tmp/$_f ]] && { cat /tmp/$_f >>/mnt/etc/$_f; rm /tmp/$_f; }

# Possible files to copy from /tmp: fstab hostname.* kbdtype mygate
#     myname ttys boot.conf resolv.conf sysctl.conf resolv.conf.tail
# Save only non-empty (-s) regular (-f) files.
(cd /tmp; for _f in fstab hostname* kbdtype my* ttys *.conf *.tail; do
	[[ -f $_f && -s $_f ]] && mv $_f /mnt/etc/.
done)

echo "done."

# Apply configuration settings based on information from questions().
apply

# Create user account based on information from user_setup().
if [[ -n $user ]]; then
	_encr=$(encr_pwd "$userpass")
	_home=/home/$user
	uline="${user}:${_encr}:1000:1000:staff:0:0:${username}:$_home:/bin/ksh"
	echo "$uline" >>/mnt/etc/master.passwd
	echo "${user}:*:1000:" >>/mnt/etc/group
	echo ${user} >/mnt/root/.forward

	_home=/mnt$_home
	mkdir -p $_home
	(cd /mnt/etc/skel; cp -pR . $_home)
	(umask 077 && sed "s,^To: root\$,To: ${username} <${user}>," \
		/mnt/var/mail/root >/mnt/var/mail/$user )
	chown -R 1000:1000 $_home /mnt/var/mail/$user
	sed -i -e "s@@^wheel:.:0:root\$@@wheel:\*:0:root,${user}@@" \
		/mnt/etc/group 2>/dev/null

	# During autoinstall, add public ssh key to authorized_keys.
	[[ -n "$userkey" ]] &&
		print -r -- "$userkey" >>$_home/.ssh/authorized_keys
fi

# Store root password and rebuild password database.
if [[ -n "$_rootpass" ]]; then
	_encr=$(encr_pwd "$_rootpass")
	sed -i -e "s@@^root::@@root:${_encr}:@@" /mnt/etc/master.passwd 2>/dev/null
fi
pwd_mkdb -p -d /mnt/etc /etc/master.passwd

# During autoinstall, add root user's public ssh key to authorized_keys.
[[ -n "$rootkey" ]] && (
	umask 077
	mkdir /mnt/root/.ssh
	print -r -- "$rootkey" >>/mnt/root/.ssh/authorized_keys
)

# Perform final steps common to both an install and an upgrade.
finish_up
@


1.274
log
@spacing

OK krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.273 2015/12/27 18:42:11 rpe Exp $
d217 4
a220 5
	_i=
	[[ -n $INSTALL ]] && _i="install=$INSTALL"
	[[ -n $TZ ]] && _i="$_i&TZ=$TZ"
	[[ -n $METHOD ]] && _i="$_i&method=$METHOD"

@


1.273
log
@Refactor and move disk initialization code from install.sh to a separate
function configure_disk() in install.sub.

based on work from and OK halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.272 2015/12/23 18:06:32 rpe Exp $
d284 3
a286 3
	echo "$uline" >> /mnt/etc/master.passwd
	echo "${user}:*:1000:" >> /mnt/etc/group
	echo ${user} > /mnt/root/.forward
d291 2
a292 3
	(umask 077 &&
		sed "s,^To: root\$,To: ${username} <${user}>," \
		/mnt/var/mail/root > /mnt/var/mail/$user )
d299 1
a299 1
		print -r -- "$userkey" >> $_home/.ssh/authorized_keys
d313 1
a313 1
	print -r -- "$rootkey" >> /mnt/root/.ssh/authorized_keys
@


1.272
log
@Move the code, that lists uninitialized disk into a separate function.
This makes the disk initialization question code easier to understand.

OK krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.271 2015/12/23 17:54:52 rpe Exp $
a110 1
DISK=
d112 1
a112 2
_DKDEVS=$(get_dkdevs)
_fsent=
a118 3
	DISKS_DONE=$(addel "$DISK" $DISKS_DONE)
	_DKDEVS=$(rmel "$DISK" $_DKDEVS)

d120 1
a120 1
	if isin $ROOTDISK $_DKDEVS; then
d130 3
a132 52

	DISK=$resp
	makedev $DISK || continue

	# Deal with disklabels, including editing the root disklabel
	# and labeling additional disks. This is machine-dependent since
	# some platforms may not be able to provide this functionality.
	# /tmp/fstab.$DISK is created here with 'disklabel -F'.
	rm -f /tmp/*.$DISK
	md_prep_disklabel $DISK || { DISK=; continue; }

	# Make sure there is a '/' mount point.
	grep -qs " / ffs " /tmp/fstab.$ROOTDISK ||
		{ DISK=; echo "'/' must be configured!"; continue; }

	if [[ -f /tmp/fstab.$DISK ]]; then
		# Avoid duplicate mount points on different disks.
		while read _pp _mp _rest; do
			if [[ $_mp == none ]]; then
				# Multiple swap partitions are ok.
				echo "$_pp $_mp $_rest" >>/tmp/fstab
				continue
			fi
			# Non-swap mountpoints must be in only one file.
			[[ /tmp/fstab.$DISK == $(grep -l " $_mp " /tmp/fstab.*) ]] ||
				{ _rest=$DISK; DISK=; break; }
		done </tmp/fstab.$DISK

		if [[ -z $DISK ]]; then
			# Duplicate mountpoint.
			# Allow disklabel(8) to read back mountpoint info
			# if it is immediately run against the same disk.
			cat /tmp/fstab.$_rest >/etc/fstab
			rm /tmp/fstab.$_rest
			set -- $(grep -h " $_mp " /tmp/fstab.*[0-9])
			echo "$_pp and $1 can't both be mounted at $_mp."
			continue
		fi

		# Add ffs filesystems to list after newfs'ing them. Ignore
		# other filesystems.
		while read _pp _mp _fstype _rest; do
			[[ $_fstype == ffs ]] || continue
			_OPT=
			[[ $_mp == / ]] && _OPT=$MDROOTFSOPT
			newfs -q $_OPT ${_pp##/dev/}
			# N.B.: '!' is lexically < '/'. That is
			#	required for correct sorting of
			#	mount points.
			_fsent="$_fsent $_mp!$_pp"
		done </tmp/fstab.$DISK
	fi
d137 1
a137 1
for _mp in $(bsort $_fsent); do
@


1.271
log
@- quote user supplied hostname
- in this context ((NIFS)) does the same as ((NIFS != 0))
- use if-block for root ssh key question
- spacing

OK krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.270 2015/09/09 23:07:10 halex Exp $
d132 1
a132 3
			'$(l=$(get_dkdevs); for a in $DISKS_DONE; do
				l=$(rmel $a $l); done; bsort $l)' \
			done
@


1.270
log
@zap trailing whitespace
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.269 2015/07/19 21:05:41 rpe Exp $
d68 1
a68 1
[[ ${resp%%.*} != $(hostname -s) ]] && hostname $resp
d78 1
a78 1
((NIFS != 0)) && startcgiinfo
d81 1
d91 2
a92 1
$AUTO && ask "Public ssh key for root account?" none &&
d94 1
d105 1
d164 1
d301 1
d305 1
@


1.269
log
@Replace two instances where ed is used for inplace editing of files
with the new sed -i.

"Nice" deraadt@@
OK krw@@ jasper@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.268 2015/06/02 19:54:06 rpe Exp $
d66 1
a66 1
# Ask for/set the system hostname and add the hostname specific siteXX set. 
@


1.268
log
@Remove the $FSTABFLAG variable and use -F directly. The installer
uses disklabel UIDs unconditionally for a while already.

OK krw@@
"looks good" deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.267 2015/05/15 07:41:30 rpe Exp $
d344 2
a345 3
	echo "1,s@@wheel:.:0:root\$@@wheel:\*:0:root,${user}@@
w
q" | ed /mnt/etc/group 2>/dev/null
d355 1
a355 3
	echo "1,s@@^root::@@root:${_encr}:@@
w
q" | ed /mnt/etc/master.passwd 2>/dev/null
@


1.267
log
@Remove the 'Use DUIDs rather than device names in fstab?' question
and use DUIDs unconditionally. DUIDs in the installed /etc/fstab
has been the default for quite some time now.

OK deraadt@@, krw@@, guenther@@, beck@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.266 2015/04/27 23:17:11 djm Exp $
d140 1
a140 2
	# /tmp/fstab.$DISK is created here with 'disklabel -f' or
	# 'disklabel -F' depending on the value of $FSTABFLAG.
@


1.266
log
@Rework sshd enable root login questions in light of sshd PermitRootLogin
default change. The new default is not to ask to enable root logins
when a non-root user has been addedi. There is some additional sublety
for auto-installs that provide root ssh keys.

patch by myself and rpe@@ with feedback from sthen@@;
ok rpe@@ deraadt@@ sthen@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.265 2015/04/13 21:27:07 deraadt Exp $
a113 2

ask_yn "Use DUIDs rather than device names in fstab?" yes && FSTABFLAG=-F
@


1.265
log
@pwd_mkdb now fits onto the install media.  no more chroot games.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.264 2015/04/07 09:59:38 rpe Exp $
d98 1
@


1.264
log
@Tweak previous.

OK halex@@ krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.263 2015/04/06 21:36:56 rpe Exp $
d362 1
a362 1
/mnt/usr/sbin/pwd_mkdb -p -d /mnt/etc /etc/master.passwd
@


1.263
log
@Moar comments !! Explain what's going on during install / upgrade.

OK krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.262 2015/04/04 14:21:01 rpe Exp $
d60 1
a60 1
# Install.sub needs to know the MODE.
d232 1
a232 1
# Create a skeletal but useful /etc/fstab.
@


1.262
log
@I contributed substantially to the installer, so add copyright.

prodded by deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.261 2015/03/28 00:03:05 rpe Exp $
d60 1
a60 1
# install.sub needs to know the MODE.
d66 1
d72 2
d76 2
d88 1
d93 1
d95 2
d99 1
d103 1
a103 1
# Configure disks.
d116 1
d232 1
d234 2
d238 1
d241 1
d327 1
d330 1
d350 1
a350 1
	# Add public ssh key to authorized_keys.
d355 1
d364 1
a364 1
# Add public ssh key to authorized_keys.
@


1.261
log
@- Start comments with capital letters.
- End comments with a full stop.

OK krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.260 2015/03/11 21:00:35 krw Exp $
d6 2
@


1.260
log
@Shuffle some code around to make it easier to read. Add get_rootinfo()
and shuffle some install specific code into install.sh. No intentional
functional change.

Update copyrights to 2015 while here.

Tested & ok rpe@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.259 2015/01/02 22:38:50 rpe Exp $
d58 1
a58 1
# install.sub needs to know the MODE
d61 1
a61 1
# include common subroutines and initialization code
d91 1
a91 1
# Configure disks
d227 1
a227 1
# using the timezone names extracted from the base set
d237 1
a237 1
# than 120 seconds, ask if the user wants to adjust the time
d243 1
a243 1
		# invocations use the same one
d245 1
a245 1
		# N.B. This will screw up SECONDS
d250 1
a250 1
# location we used... so it can perform magic next time
d330 1
a330 1
	# Add public ssh key to authorized_keys
d343 1
a343 1
# Add public ssh key to authorized_keys
@


1.259
log
@Fix saving dhclient lease files during installation.

OK krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.258 2014/09/05 07:22:29 ajacoutot Exp $
d5 1
a5 1
# Copyright (c) 1997-2009 Todd Miller, Theo de Raadt, Ken Westerback
d63 30
@


1.258
log
@Remove /etc/{hosts,myname} from etc.tgz.
Make the installer create the /etc/hosts template. While here, re-add a
missing 'echo' from install.sh.

ok miod@@ krw@@ halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.257 2014/08/27 14:04:15 florian Exp $
d239 3
a241 1
(cd /var/db; [[ -f dhclient.leases ]] && mv dhclient.leases /mnt/var/db/. )
@


1.257
log
@Nuke net.inet6.icmp6.rediraccept and allow redirects on interfaces
with autoconf enabled.
If one is doing SLAAC one does already trust link local icmp6 so the
policy for icmp6 redirects should be the same.
pointed out by & OK bluhm@@; OK henning@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.256 2014/08/10 16:32:28 rpe Exp $
d247 5
a251 1
# manually. Note we may have no hosts file if no interfaces were configured.
d274 2
@


1.256
log
@Convert if foo; then bar; fi blocks to foo && bar but leave out enable_network()
because it shares code&style with /etc/netstart. No functional change.

with feedback and OK krw@@ halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.255 2014/08/10 14:59:22 rpe Exp $
a310 3

grep -qs '^rtsol' /mnt/etc/hostname.* &&
	echo 'net.inet6.icmp6.rediraccept=1 # 1=Accept IPv6 ICMP redirects (for hosts)' >>/mnt/etc/sysctl.conf
@


1.255
log
@{ foo ; bar ; } -> { foo; bar; }

OK krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.254 2014/08/09 21:51:29 halex Exp $
d312 1
a312 1
if grep -qs '^rtsol' /mnt/etc/hostname.*; then
a313 1
fi
@


1.254
log
@After a cleanup by deraadt I noticed the four-space-indent had started
infesting the scripts. As we generally use a single tab for line
continuation indent in the scripts, let's reclaim 30 precious bytes!

ok rpe@@ krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.253 2014/07/22 10:03:56 ajacoutot Exp $
d101 1
a101 1
	md_prep_disklabel $DISK || { DISK= ; continue ; }
d105 1
a105 1
		{ DISK= ; echo "'/' must be configured!" ; continue ; }
d117 1
a117 1
				{ _rest=$DISK ; DISK= ; break ; }
d154 1
a154 1
	[[ $_mp == / ]] && { echo " 1 1" ; continue ; }
d262 1
a262 1
[[ -f /tmp/$_f ]] && { cat /tmp/$_f >>/mnt/etc/$_f ; rm /tmp/$_f ; }
@


1.253
log
@tab->space; consistent with the other sysctl values.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.252 2014/07/22 06:45:31 ajacoutot Exp $
d200 1
a200 1
	    ls -1dF $(tar cvf /dev/null [A-Za-y]*) >/mnt/tmp/tzlist )
@


1.252
log
@Drop the "... during install" comments; they were missing in several
places and it makes things simpler: no need to check for file existence.

discussed with and ok deraadt@@ rpe@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.251 2014/07/21 20:43:00 naddy Exp $
d313 1
a313 1
	echo 'net.inet6.icmp6.rediraccept=1	# 1=Accept IPv6 ICMP redirects (for hosts)' >>/mnt/etc/sysctl.conf
@


1.251
log
@Bring back net.inet6.icmp6.rediraccept for rtsol.  Pointed out by
bluhm@@ three days ago, oops.
@
text
@d2 1
a2 1
#	$OpenBSD$
d313 1
a313 3
	[[ ! -f /mnt/etc/sysctl.conf ]] && \
		echo "# created during install" >/mnt/etc/sysctl.conf
	echo 'net.inet6.icmp6.rediraccept=1  # 1=Accept IPv6 ICMP redirects (for hosts)' >>/mnt/etc/sysctl.conf
@


1.250
log
@Since net.inet6.ip6.accept_rtadv is gone, the installer shouldn't
set it.  Provisionally drop net.inet6.icmp6.rediraccept, too.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.249 2014/07/16 08:27:14 ajacoutot Exp $
d311 6
@


1.249
log
@Add a comment at the top of sysctl.conf when it is created by the
installer.

ok deraadt@@ rpe@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.248 2014/07/15 08:49:50 deraadt Exp $
a310 7

if grep -qs '^rtsol' /mnt/etc/hostname.*; then
	[[ ! -f /mnt/etc/sysctl.conf ]] && \
		echo "# created during install" >/mnt/etc/sysctl.conf
	echo 'net.inet6.ip6.accept_rtadv=1   # 1=Permit IPv6 autoconf (forwarding must be 0)' >>/mnt/etc/sysctl.conf
	echo 'net.inet6.icmp6.rediraccept=1  # 1=Accept IPv6 ICMP redirects (for hosts)' >>/mnt/etc/sysctl.conf
fi
@


1.248
log
@Create /etc/sysctl.conf based upon the 3 variables we might want to set
at install time.
ok aja
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.247 2014/04/19 16:50:52 rpe Exp $
d313 2
d316 1
a316 1
	echo 'net.inet6.icmp6.rediraccept=1  # 1=Accept IPv6 ICMP redirects (for hosts)' >> /mnt/etc/sysctl.conf
@


1.247
log
@Simplify things by using the return code of ask_yn() directly instead
of looking in resp. No need to specify 'no' as default answer. It's
the default for ask_yn() anyway.

OK krw@@ halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.246 2014/03/20 20:01:28 krw Exp $
d313 2
a314 4
	sed -e "/^#\(net\.inet6\.ip6\.accept_rtadv\)/s//\1/" \
	    -e "/^#\(net\.inet6\.icmp6\.rediraccept\)/s//\1/" \
		/mnt/etc/sysctl.conf >/tmp/sysctl.conf
	cp /tmp/sysctl.conf /mnt/etc/sysctl.conf
@


1.246
log
@FTP is so 20th century. Remove 'ftp' as a method to obtain installation
sets. 'http' is the present.

A bunch of related or triggered cleanup/consistenizing.

Prodded by deraadt@@, much feedback and testing by rpe@@.

ok rpe@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.245 2014/02/21 17:11:02 deraadt Exp $
d72 1
a72 2
ask_yn "Use DUIDs rather than device names in fstab?" yes
[[ $resp == y ]] && FSTABFLAG=-F
d211 1
a211 2
	ask_yn "Time appears wrong.  Set to '$(TZ=$_tz date -r "$(http_time)")'?" yes
	if [[ $resp == y ]]; then
@


1.245
log
@remove stupid comment from decades ago.  Proof is in the pudding, turns
out ksh is the perfect language to write this in.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.244 2014/02/21 16:30:14 deraadt Exp $
d207 1
a207 1
# If we got a timestamp from the ftplist server, and that time diffs by more
d209 1
a209 1
if _time=$(ftp_time) && _now=$(date +%s) &&
d212 1
a212 1
	ask_yn "Time appears wrong.  Set to '$(TZ=$_tz date -r "$(ftp_time)")'?" yes
d216 1
a216 1
		date $(date -r "$(ftp_time)" "+%Y%m%d%H%M.%S") >/dev/null
d221 1
a221 1
# If we managed to talk to the ftplist server before, tell it what
d223 1
a223 1
if [[ -s $SERVERLISTALL ]]; then
d225 1
a225 1
	[[ -n $installedfrom ]] && _i="install=$installedfrom"
d227 1
a227 1
	[[ -n $method ]] && _i="$_i&method=$method"
@


1.244
log
@oops, seperate pieces coming...
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.242 2014/02/04 00:47:27 rpe Exp $
a56 2
#	In a perfect world, this would be a nice C program, with a reasonable
#	user interface.
@


1.243
log
@services
@
text
@d3 1
d57 2
d281 3
a283 3
	echo "$uline" >>/mnt/etc/master.passwd
	echo "${user}:*:1000:" >>/mnt/etc/group
	echo ${user} >/mnt/root/.forward
d290 1
a290 1
		/mnt/var/mail/root >/mnt/var/mail/$user )
d298 1
a298 1
		print -r -- "$userkey" >>$_home/.ssh/authorized_keys
d313 1
a313 1
	print -r -- "$rootkey" >>/mnt/root/.ssh/authorized_keys
@


1.242
log
@simplify removal of fstab leftovers in /tmp

OK halex@@
@
text
@d2 1
a2 2
#	$OpenBSD: install.sh,v 1.241 2014/02/02 09:32:00 rpe Exp $
#	$NetBSD: install.sh,v 1.5.2.8 1996/08/27 18:15:05 gwr Exp $
a55 2
#	In a perfect world, this would be a nice C program, with a reasonable
#	user interface.
d278 3
a280 3
	echo "$uline" >> /mnt/etc/master.passwd
	echo "${user}:*:1000:" >> /mnt/etc/group
	echo ${user} > /mnt/root/.forward
d287 1
a287 1
		/mnt/var/mail/root > /mnt/var/mail/$user )
d295 1
a295 1
		print -r -- "$userkey" >> $_home/.ssh/authorized_keys
d310 1
a310 1
	print -r -- "$rootkey" >> /mnt/root/.ssh/authorized_keys
@


1.241
log
@remove -e sed option where only one command is used

ok halex@@ krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.240 2014/01/05 01:56:52 deraadt Exp $
d72 1
a72 1
rm -f /tmp/fstab.shadow /tmp/fstab /tmp/fstab.*
@


1.240
log
@Like upgrade, use feed_random right after mounting filesystems.  This
is less than ideal.  We hope the kernel has good entropy already, because
this is a reinstall??  Or maybe the ftp server startup has run to completion?
Or if this is an autoinstall, that config has enough unique in it?  This
needs more work, but the existing late-entropy feed sequence is worse.
discussed at length with rpe, who tested it
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.239 2013/12/18 08:04:16 halex Exp $
d236 1
a236 1
sed -e "/^console.*on.*secure.*$/s/std\.[0-9]*/std.$(stty speed </dev/console)/" \
@


1.239
log
@change password prompts (for the good of install.conf)
add autoinstall question for root ssh pubkey
make pubkey prompts appear in autoinstall log

ideas from and ok deraaddt@@, ok rpe@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.238 2013/12/06 00:42:45 rpe Exp $
d195 2
a273 10

# Feed the random pool some junk before we read from it
(dmesg; cat $SERVERLISTALL /*.conf; sysctl; route -n show; df;
    ifconfig -A; hostname) >/mnt/dev/arandom 2>&1

echo -n "done.\nGenerating initial host.random file..."
dd if=/mnt/dev/arandom of=/mnt/var/db/host.random \
	bs=65536 count=1 >/dev/null 2>&1
chmod 600 /mnt/var/db/host.random >/dev/null 2>&1
echo "done."
@


1.238
log
@Workaround closed stdin in non-interactive mode.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.237 2013/12/01 01:54:23 halex Exp $
d316 7
@


1.237
log
@Allows the autoinstaller to pass a public ssh key for inclusion in the
user's .ssh/authorized_keys. Deliberately not in interactive mode since
I am not sure it's worth adding another question that only quite few
people would enjoy.

ok rpe@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.236 2013/11/19 22:20:06 halex Exp $
d234 1
a234 1
sed -e "/^console.*on.*secure.*$/s/std\.[0-9]*/std.$(stty speed)/" \
@


1.236
log
@Add autoinstall configuration to the list of files and output stirring
the random pool at install.  Apart from the configuration in itself, this
permits adding various random data in comments or whatever.

ok krw@@ rpe@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.235 2013/11/16 18:37:27 rpe Exp $
d287 2
a288 1
	uline="${user}:${_encr}:1000:1000:staff:0:0:${username}:/home/${user}:/bin/ksh"
d293 3
a295 2
	mkdir -p /mnt/home/$user
	(cd /mnt/etc/skel; cp -pR . /mnt/home/$user)
d299 1
a299 1
	chown -R 1000:1000 /mnt/home/$user /mnt/var/mail/$user
d303 4
@


1.235
log
@Remove AUTOROOT variable which is a leftover of r1.183 of install.sub

diff from Philipp e1c1bac6253dc54a1e89ddc046585792 at osteo dot net

ok krw@@ halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.234 2013/10/31 19:15:20 halex Exp $
d274 1
a274 1
(dmesg; cat $SERVERLISTALL; sysctl; route -n show; df;
@


1.234
log
@If if looks like a duck, swims like a duck, and quacks like a duck, then
it's probably is a pre-encrypted password hash.

This means that the autoinstall configuration (and interactive password
too) does not have to specify a cleartext password.

reworked diff originating from krw@@
no objections, specifically so from krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.233 2013/05/31 06:27:08 rpe Exp $
a103 1
	AUTOROOT=n
@


1.233
log
@remove unneeded '\' for line continuations

ok halex@@ krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.232 2013/04/15 18:53:50 deraadt Exp $
d287 1
a287 2
	_encr="*"
	[[ -n "$userpass" ]] && _encr=$(/mnt/usr/bin/encrypt -b 8 -- "$userpass")
d305 1
a305 1
	_encr=$(/mnt/usr/bin/encrypt -b 8 -- "$_rootpass")
@


1.232
log
@Use the dd and ed that are on the media, instead of the one post-install.
Amazing this mistake lurked for so long...
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.231 2012/09/28 16:23:25 rpe Exp $
d108 1
a108 1
	grep -qs " / ffs " /tmp/fstab.$ROOTDISK || \
d120 1
a120 1
			[[ /tmp/fstab.$DISK == $(grep -l " $_mp " /tmp/fstab.*) ]] || \
d210 1
a210 1
if _time=$(ftp_time) && _now=$(date +%s) && \
@


1.231
log
@consistently use [[ ]] for tests

ok halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.230 2012/09/28 16:19:05 rpe Exp $
d279 1
a279 1
/mnt/bin/dd if=/mnt/dev/arandom of=/mnt/var/db/host.random \
d302 1
a302 1
q" | /mnt/bin/ed /mnt/etc/group 2>/dev/null
d309 1
a309 1
q" | /mnt/bin/ed /mnt/etc/master.passwd 2>/dev/null
@


1.230
log
@remove unnecessary quotes within [[ ]]

ok halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.229 2012/09/28 16:13:50 rpe Exp $
d242 1
a242 1
(cd /var/db; [ -f dhclient.leases ] && mv dhclient.leases /mnt/var/db/. )
@


1.229
log
@replace the last remaining backticks with $() for consistency

ok halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.228 2012/09/28 16:07:10 rpe Exp $
d114 1
a114 1
			if [[ $_mp == "none" ]]; then
@


1.228
log
@remove a comment that does not make sense any more

ok halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.227 2012/09/28 15:48:05 rpe Exp $
d202 1
a202 1
	    ls -1dF `tar cvf /dev/null [A-Za-y]*` >/mnt/tmp/tzlist )
d288 1
a288 1
	[[ -n "$userpass" ]] && _encr=`/mnt/usr/bin/encrypt -b 8 -- "$userpass"`
d306 1
a306 1
	_encr=`/mnt/usr/bin/encrypt -b 8 -- "$_rootpass"`
@


1.227
log
@replace _fsent array with a simple concatenated list

ok halex@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.226 2012/09/03 07:34:37 deraadt Exp $
a84 2
		# Make sure empty files exist so we don't have to
		# keep checking for their existence before grep'ing.
@


1.226
log
@compress arguments to the ftp command; ok halex
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.225 2012/01/31 20:01:12 halex Exp $
d69 1
a137 1
		_i=${#_fsent[*]}
d146 1
a146 2
			_fsent[$_i]="$_mp!$_pp"
			: $(( _i += 1 ))
d153 1
a153 1
for _mp in $(bsort ${_fsent[*]}); do
@


1.225
log
@redirect stdout to /dev/null instead of closing it

ok krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.224 2011/08/17 03:42:14 todd Exp $
d233 1
a233 1
	[[ -n $_i ]] && ftp $FTPOPTS -a -o - \
@


1.224
log
@make sure to set two rtsol sysctls, not just the last one
ok krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.223 2011/07/24 15:33:41 fgsch Exp $
d220 1
a220 1
		date $(date -r "$(ftp_time)" "+%Y%m%d%H%M.%S") >&-
@


1.223
log
@use the right sysctl, doh!
pointed out by Moritz Grimm (mgrimm-at-mrsserver-dot-net)
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.222 2011/07/23 08:31:25 fgsch Exp $
d318 1
a318 2
		/mnt/etc/sysctl.conf >/tmp/sysctl.conf
	sed -e "/^#\(net\.inet6\.icmp6\.rediraccept\)/s//\1/" \
@


1.222
log
@uncomment net.inet6.ip6.rediraccept from /etc/sysctl.conf as well if the
user picks up rtsol.
reported in bugs@@ by Rene Maroufi (info at maroufi dot net).
bluhm@@ ok
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.221 2011/07/04 20:59:05 halex Exp $
d319 1
a319 1
	sed -e "/^#\(net\.inet6\.ip6\.rediraccept\)/s//\1/" \
@


1.221
log
@there is no need to do the rtsol check (whether to enable
net.inet6.ip6.accept_rtadv in sysctl.conf or not) on updates
as then we dont do any network config, so move it from
install.sub to install.sh

idea not rejected by IPv6-enabled bluhm@@
ok krw@@ deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.220 2011/04/17 21:02:44 krw Exp $
d318 2
@


1.220
log
@Make DUID fstab the default so we can see how people like it. Requested
by deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.219 2011/04/17 20:57:10 krw Exp $
d315 6
@


1.219
log
@First crack at enabling the installation of a DUID version of
/etc/fstab, after asking user. Current default is existing behaviour.

Feedback & suggestions deraadt@@, halex@@, jsing@@, todd@@.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.218 2011/04/04 14:37:25 ajacoutot Exp $
d73 1
a73 1
ask_yn "Use DUIDs rather than device names in fstab?"
@


1.218
log
@If we choose to create a user during installation, put it into
/root/.forward.

"makes sense" kettenis, ok pirofti@@ deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.217 2011/02/07 18:01:08 miod Exp $
d73 3
d102 2
a103 1
	# /tmp/fstab.$DISK is created here with 'disklabel -f'.
d115 6
d125 3
a127 1
			# Allow disklabel(8) to read mountpoint info.
a149 5

	# New swap partitions?
	disklabel $DISK 2>&1 | sed -ne \
		"/^ *\([a-p]\): .* swap /s,,/dev/$DISK\1 none swap sw 0 0,p" | \
		grep -v "^/dev/$SWAPDEV " >>/tmp/fstab
@


1.217
log
@Use absolute path to the temporary hosts file; causes /etc/hosts to be correctly
populated upon installation again.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.216 2011/01/10 06:49:08 deraadt Exp $
d288 1
@


1.216
log
@like in /etc/rc, talk to /dev/arandom as a single read or write.
in particular a single write will result in a single re-key event,
rather than 64 writes causing 64 re-keys -- wasting the kernel's time.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.215 2011/01/03 00:36:50 deraadt Exp $
d247 1
a247 1
if [[ -f hosts ]]; then
@


1.215
log
@reduce the amount of cd'ing in the install script, since it sucks
to change the environment that functions assume they run in.  use
sub-shells or absolute paths when possible.
ok krw
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.214 2010/12/22 22:22:40 todd Exp $
d276 1
a276 1
	bs=1024 count=64 >/dev/null 2>&1
@


1.214
log
@remove redundant junk
pointed out by Mikalaj Kucharski, mikolaj at kuharski dot name
ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.213 2010/12/22 21:23:26 todd Exp $
a65 1
cd /tmp
d80 1
a80 1
		rm -f fstab
d99 2
a100 2
	# fstab.$DISK is created here with 'disklabel -f'.
	rm -f *.$DISK
d105 1
a105 1
	grep -qs " / ffs " fstab.$ROOTDISK || \
d108 1
a108 1
	if [[ -f fstab.$DISK ]]; then
d111 1
a111 1
			[[ fstab.$DISK == $(grep -l " $_mp " fstab.*) ]] || \
d113 1
a113 1
		done <fstab.$DISK
d116 3
a118 3
			cat fstab.$_rest >/etc/fstab
			rm fstab.$_rest
			set -- $(grep -h " $_mp " fstab.*[0-9])
d136 1
a136 1
		done <fstab.$DISK
d142 1
a142 1
		grep -v "^/dev/$SWAPDEV " >>fstab
d187 1
a187 2
done >>fstab
cd /
d197 2
a198 2
	( cd /mnt/usr/share/zoneinfo
	ls -1dF `tar cvf /dev/null [A-Za-y]*` >/mnt/tmp/tzlist )
d238 1
a238 2
( cd /var/db
[ -f dhclient.leases ] && mv dhclient.leases /mnt/var/db/. )
d241 1
a241 2
( cd /tmp
hostname >myname
d255 2
a256 2
	done <hosts >>/mnt/etc/hosts
	rm hosts
d261 1
a261 1
[[ -f $_f ]] && { cat $_f >>/mnt/etc/$_f ; rm $_f ; }
d263 2
a264 2
# Possible files: fstab hostname.* kbdtype mygate myname ttys
#		  boot.conf resolv.conf sysctl.conf resolv.conf.tail
d266 1
a266 1
for _f in fstab hostname* kbdtype my* ttys *.conf *.tail; do
d268 1
a268 1
done )
d291 1
a291 1
	( umask 077 &&
@


1.213
log
@add more commands of output of random "junk" to arandom
please commit deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.212 2010/12/22 18:23:54 deraadt Exp $
a276 1
cat $SERVERLISTALL >/mnt/dev/arandom 2>/dev/null
@


1.212
log
@wow, we must reach into the chroot for /dev/arandom, meaning some of
this code has been busted for quite a while.
pointed out by miod
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.211 2010/12/22 18:13:15 deraadt Exp $
d275 2
a276 1
dmesg >/mnt/dev/arandom
@


1.211
log
@Consistantly use /dev/arandom for feeding entropy to the kernel.
ok kjell otto miod
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.210 2010/10/30 22:48:03 deraadt Exp $
d275 2
a276 2
dmesg >/dev/arandom
cat $SERVERLISTALL >/dev/arandom 2>/dev/null
d279 1
a279 1
/mnt/bin/dd if=/dev/arandom of=/mnt/var/db/host.random \
@


1.210
log
@for the user, create a matching group and put the user in there by default; ok halex guenther
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.209 2010/10/29 07:43:09 deraadt Exp $
d275 2
a276 2
dmesg >/dev/urandom
cat $SERVERLISTALL >/dev/urandom 2>/dev/null
d279 1
a279 1
/mnt/bin/dd if=/mnt/dev/urandom of=/mnt/var/db/host.random \
@


1.209
log
@for late TZ handling, place the temporarily tzlist file into /mnt/tmp
(which has already been mounted).
discussed with halex
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.208 2010/08/04 07:07:41 halex Exp $
d289 3
a291 2
	userline="${user}:${_encr}:1000:10:staff:0:0:${username}:/home/${user}:/bin/ksh"
	echo "$userline" >> /mnt/etc/master.passwd
d298 1
a298 1
	chown -R 1000.10 /mnt/home/$user /mnt/var/mail/$user
@


1.208
log
@Set an appropriate To: header in /var/mail/$user which is copied from
/var/mail/root

idea and first version from deraadt@@, ok deraadt@@ krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.207 2010/04/06 21:01:20 deraadt Exp $
d200 1
a200 1
	ls -1dF `tar cvf /dev/null [A-Za-y]*` >/tmp/tzlist )
d202 2
a203 1
	set_timezone /tmp/tzlist
@


1.207
log
@Try a more detailed message about the time
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.206 2010/04/04 22:29:08 halex Exp $
d293 3
a295 1
	cp -p /mnt/var/mail/root /mnt/var/mail/$user
@


1.206
log
@If the system time is off by more than 120 seconds from the TIME=nnn
supplied from ftplist.cgi, ask if the user wants to set it accordingly.

Idea from deraadt@@, feedback from sthen@@, guenther@@
ok deraadt@@, krw@@ (slightly different version)
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.205 2009/07/10 02:59:32 deraadt Exp $
d210 1
a210 1
	ask_yn "Set time to '$(TZ=$_tz date -r "$(ftp_time)")'?" yes
@


1.205
log
@We should be using the $SERVERLISTALL (not the url-only $SERVERLIST) to
decide to talk-back.  Sigh.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.204 2009/07/02 23:48:34 krw Exp $
d203 14
@


1.204
log
@Do *not* newfs non-ffs partitions while installing. Even if someone
has entered 'n i' in disklabel and caused a mountpoint to be saved
for the non-ffs partition. Discovered by and fix tested by mgrimm@@.

ok deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.203 2009/06/27 08:33:27 ajacoutot Exp $
d207 1
a207 1
if [[ -s $SERVERLIST ]]; then
d261 1
a261 1
cat $SERVERLIST >/dev/urandom 2>/dev/null
@


1.203
log
@Add initial user to the 'staff' class.

ok deraadt@@, ok krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.202 2009/06/11 02:44:50 krw Exp $
d124 2
a125 1
		# newfs 'ffs' filesystems and add them to the list.
d127 2
a128 1
		while read _pp _mp _rest; do
@


1.202
log
@No need to show the filename the duplicate mount point was detected
in. Noticed in an error message from todd@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.201 2009/06/09 10:11:21 halex Exp $
d272 1
a272 1
	userline="${user}:${_encr}:1000:10::0:0:${username}:/home/${user}:/bin/ksh"
@


1.201
log
@Update the user input routines to (re-evaluate and) redraw the
question if dmesg changes are detected. The password reading
routines are not subject to these changes at this point.

ok deraadt@@, krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.200 2009/06/03 00:30:31 krw Exp $
d119 1
a119 1
			set -- $(grep " $_mp " fstab.*[0-9])
@


1.200
log
@Only need to umount once on restarting. Force umounts in case of
restarting. No need to ask for verbose umount output since we send
it all to /dev/null. Make sure we start in '/', lest we were restarted
while exploring the installed/upgraded filesystems.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.199 2009/06/02 23:53:34 krw Exp $
d68 1
d75 1
d87 4
a90 1
		ask_which "disk" "do you wish to initialize" "$_DKDEVS" done
@


1.199
log
@Nuke sissy verbiage about losing data. No more special casing for
restarted installs/upgrades. They should just work the same as first
attempts except for presenting some remembered info as default
answers.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.198 2009/06/01 02:57:40 krw Exp $
a70 1
umount -a
@


1.198
log
@Test the return value of md_prep_disklabel() to detect failed
attempts to write a disklabel. When failure is detected don't
configure the disk, return it to the list of disks available to be
configured.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.197 2009/05/31 18:38:42 deraadt Exp $
a65 1
# If /etc/fstab already exists, skip disk initialization.
d67 2
a68 22
if [[ ! -f /etc/fstab ]]; then
	DISK=
	_DKDEVS=$(get_dkdevs)

	while :; do
		_DKDEVS=$(rmel "$DISK" $_DKDEVS)

		# Always do ROOTDISK first, and repeat until it is configured.
		if isin $ROOTDISK $_DKDEVS; then
			resp=$ROOTDISK
			rm -f fstab
			# Make sure empty files exist so we don't have to
			# keep checking for their existence before grep'ing.
		else
			# Force the user to think and type in a disk name by
			# making 'done' the default choice.
			ask_which "disk" "do you wish to initialize" "$_DKDEVS" done
			[[ $resp == done ]] && break
		fi

		DISK=$resp
		makedev $DISK || continue
d70 48
a117 39
		# Deal with disklabels, including editing the root disklabel
		# and labeling additional disks. This is machine-dependent since
		# some platforms may not be able to provide this functionality.
		# fstab.$DISK is created here with 'disklabel -f'.
		rm -f *.$DISK
		AUTOROOT=n
		md_prep_disklabel $DISK || { DISK= ; continue ; }

		# Make sure there is a '/' mount point.
		grep -qs " / ffs " fstab.$ROOTDISK || \
			{ DISK= ; echo "'/' must be configured!" ; continue ; }

		if [[ -f fstab.$DISK ]]; then
			# Avoid duplicate mount points on different disks.
			while read _pp _mp _rest; do
				[[ fstab.$DISK == $(grep -l " $_mp " fstab.*) ]] || \
					{ _rest=$DISK ; DISK= ; break ; }
			done <fstab.$DISK
			if [[ -z $DISK ]]; then
				# Allow disklabel(8) to read mountpoint info.
				cat fstab.$_rest >/etc/fstab
				rm fstab.$_rest
				set -- $(grep " $_mp " fstab.*[0-9])
				echo "$_pp and $1 can't both be mounted at $_mp."
				continue
			fi

			# newfs 'ffs' filesystems and add them to the list.
			_i=${#_fsent[*]}
			while read _pp _mp _rest; do
				_OPT=
				[[ $_mp == / ]] && _OPT=$MDROOTFSOPT
				newfs -q $_OPT ${_pp##/dev/}
				# N.B.: '!' is lexically < '/'. That is
				#	required for correct sorting of
				#	mount points.
				_fsent[$_i]="$_mp!$_pp"
				: $(( _i += 1 ))
			done <fstab.$DISK
d120 63
a182 52
		# New swap partitions?
		disklabel $DISK 2>&1 | sed -ne \
			"/^ *\([a-p]\): .* swap /s,,/dev/$DISK\1 none swap sw 0 0,p" | \
			grep -v "^/dev/$SWAPDEV " >>fstab
	done

	# Write fstab entries to fstab in mount point alphabetic order
	# to enforce a rational mount order.
	for _mp in $(bsort ${_fsent[*]}); do
		_pp=${_mp##*!}
		_mp=${_mp%!*}
		echo -n "$_pp $_mp ffs rw"

		# Only '/' is neither nodev nor nosuid. i.e. it can obviously
		# *always* contain devices or setuid programs.
		[[ $_mp == / ]] && { echo " 1 1" ; continue ; }

		# Every other mounted filesystem is nodev. If the user chooses
		# to mount /dev as a separate filesystem, then on the user's
		# head be it.
		echo -n ",nodev"

		# The only directories that the install puts suid binaries into
		# (as of 3.2) are:
		#
		# /sbin
		# /usr/bin
		# /usr/sbin
		# /usr/libexec
		# /usr/libexec/auth
		# /usr/X11R6/bin
		#
		# and ports and users can do who knows what to /usr/local and
		# sub directories thereof.
		#
		# So try to ensure that only filesystems that are mounted at
		# or above these directories can contain suid programs. In the
		# case of /usr/libexec, give blanket permission for
		# subdirectories.
		case $_mp in
		/sbin|/usr)			;;
		/usr/bin|/usr/sbin)		;;
		/usr/libexec|/usr/libexec/*)	;;
		/usr/local|/usr/local/*)	;;
		/usr/X11R6|/usr/X11R6/bin)	;;
		*)	echo -n ",nosuid"	;;
		esac
		echo " 1 2"
	done >>fstab

	munge_fstab
fi
d185 1
@


1.197
log
@push the dmesg and $SERVERLIST into the random pool to enhance the
entropy, before we pull out the host.random for the next boot
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.196 2009/05/31 00:03:29 deraadt Exp $
d97 1
a97 1
		md_prep_disklabel $DISK
@


1.196
log
@Ask the cgi to remember the install method too, and as a result, this
makes two more questions only need a return.
ok krw
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.195 2009/05/31 00:02:50 deraadt Exp $
d253 4
d258 3
a260 3
( cd /mnt/var/db
/mnt/bin/dd if=/mnt/dev/urandom of=host.random bs=1024 count=64 >/dev/null 2>&1
chmod 600 host.random >/dev/null 2>&1 )
@


1.195
log
@Change the order of the installer questions again, because it is better.
hostname, network, root password, misc, timezone, and then the disks
and sets.
ok krw
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.194 2009/05/30 20:40:59 deraadt Exp $
d205 1
@


1.194
log
@Defer talking to the ftpinstall cgi until a fair bit later, so that we can
also tell it the timezone.  As a result, this will also work for non-url
based installs.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.191 2009/05/30 18:11:03 deraadt Exp $
a187 2
set_timezone /var/tzlist

d195 1
@


1.193
log
@silly comment is wrong
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.192 2009/05/30 19:32:20 deraadt Exp $
d192 5
a196 2
[[ ! -n $TZ ]] &&
	(cd /mnt/usr/share/zoneinfo&&ls -1dF `tar cvf /dev/null [A-Za-y]*`)>/tmp/tzlist && \
d198 12
@


1.192
log
@these scripts should use tabs because 4 spaces wastes 3 chars of media space
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.191 2009/05/30 18:11:03 deraadt Exp $
a198 1
# Move ttys back in case questions() needs to massage it more.
@


1.191
log
@install.sh already knows that MODE == install
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.190 2009/05/28 02:34:56 krw Exp $
d134 2
a135 2
		    "/^ *\([a-p]\): .* swap /s,,/dev/$DISK\1 none swap sw 0 0,p" | \
		    grep -v "^/dev/$SWAPDEV " >>fstab
@


1.190
log
@Get the list of disks or cds whenever required rather than once at
startup. This means you can plugin USB disks or cds after the install
has started and you will see the new device the next time the list
is shown. The wonders of using sysctl.

'excellent' miod@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.189 2009/05/17 15:00:51 krw Exp $
d188 1
a188 1
[[ $MODE == install ]] && set_timezone /var/tzlist
d192 1
a192 1
[[ $MODE == install && ! -n $TZ ]] &&
@


1.189
log
@Use sed to directly create swap entries in fstab rather than dancing
through an intermediate file.

Protect only fstab.$DISK manipulating commands with the check for
the existance of fstab.$DISK. This restores the ability to have
disks with only swap partitions.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.188 2009/05/17 12:45:00 krw Exp $
d70 1
a70 1
	_DKDEVS=$DKDEVS
@


1.188
log
@Move comment to correct spot.

Suppress 'No such file' error message when grep'ing for '/' mount
point in fstab.$ROOTDISK. We are interested in success or failure,
not excuses!

Check for existance of fstab.$DISK. User may exit disklabel with
'x', especially for non-root disks, and not create the file.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.187 2009/05/11 02:07:47 krw Exp $
a98 3
		# Make sure fstab.$DISK was created.
		[[ -f fstab.$DISK ]] || { DISK= ; continue ; }

d103 27
a129 12
		# Avoid duplicate mount points on different disks.
		while read _pp _mp _rest; do
			[[ fstab.$DISK == $(grep -l " $_mp " fstab.*) ]] || \
				{ _rest=$DISK ; DISK= ; break ; }
		done <fstab.$DISK
		if [[ -z $DISK ]]; then
			# Allow disklabel(8) to read mountpoint info.
			cat fstab.$_rest >/etc/fstab
			rm fstab.$_rest
			set -- $(grep " $_mp " fstab.*[0-9])
			echo "$_pp and $1 can't both be mounted at $_mp."
			continue
a131 12
		# newfs 'ffs' filesystems and add them to the list.
		_i=${#_fsent[*]}
		while read _pp _mp _rest; do
			_OPT=
			[[ $_mp == / ]] && _OPT=$MDROOTFSOPT
			newfs -q $_OPT ${_pp##/dev/}
			# N.B.: '!' is lexically < '/'. That is required for
			#	correct sorting of mount points.
			_fsent[$_i]="$_mp!$_pp"
			: $(( _i += 1 ))
		done <fstab.$DISK

d133 3
a135 6
		disklabel $DISK 2>&1 | grep " swap " >swap.$DISK
		while read _dev _rest; do
			_pp=$DISK${_dev%:}
			[[ $_pp != $SWAPDEV ]] && \
				echo "/dev/$_pp none swap sw 0 0" >>fstab
		done <swap.$DISK
@


1.187
log
@Clean up and shrink code. Don't newfs paritions without a mount
point specified. Check for duplicate mount points and don't accept
a disk which has such a duplicate configured. Don't remount
all partitions after installing sets.

'be brave' deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.186 2009/05/07 03:43:02 todd Exp $
d99 3
d103 1
a103 1
		grep -q " / ffs " fstab.$ROOTDISK || \
d112 1
a116 1
			# Allow disklabel(8) to read mountpoint info.
@


1.186
log
@o use 'ls -C' to speed and simplify both sets viewing and timezone selection
o use a tzlist instead of a tzdir
o as a bonus, sets lists are now sorted top-down instead of left-right
o use stty to calculate 4char padding surrounding sets lists
collaboration with Alexander Hall halex@@
ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.185 2009/05/06 08:35:24 deraadt Exp $
a59 3
# The name of the file holding the list of configured filesystems.
FILESYSTEMS=/tmp/filesystems

d67 1
d78 1
a78 1
			rm -f /tmp/fstab
a80 1
			cat /dev/null >$FILESYSTEMS
d94 2
a95 2
		# /tmp/fstab.$DISK is created here with 'disklabel -f'.
		rm -f /tmp/*.$DISK
d99 15
a113 32
		# Get the lists of BSD and swap partitions.
		unset _partitions _mount_points
		_i=0
		disklabel $DISK 2>&1 | sed -ne '/^ *[a-p]: /p' >/tmp/disklabel.$DISK
		while read _dev _size _offset _type _rest; do
			_pp=$DISK${_dev%:}

			if [[ $_pp == $ROOTDEV ]]; then
				echo "$ROOTDEV /" >$FILESYSTEMS
				continue
			elif [[ $_pp == $SWAPDEV ]]; then
				continue
			elif [[ $_type == swap ]]; then
				echo "/dev/$_pp none swap sw 0 0" >>/tmp/fstab
				continue
			elif [[ $_type != *BSD ]]; then
				continue
			fi

			_partitions[$_i]=$_pp

			# Set _mount_points[$_i].
			while read _pp _mp _rest; do
				[[ $_pp == /dev/${_partitions[$_i]} ]] && \
				       { _mount_points[$_i]=$_mp ; break ; }
			done </tmp/fstab.$DISK
			: $(( _i += 1 ))
		done </tmp/disklabel.$DISK

		if [[ $DISK == $ROOTDISK && -z $(grep "^$ROOTDEV /$" $FILESYSTEMS) ]]; then
			echo "ERROR: No root partition ($ROOTDEV)."
			DISK=
d117 11
a127 2
		# If there are no BSD partitions go on to next disk.
		(( ${#_partitions[*]} > 0 )) || continue
d129 7
a135 12
		# Ignore mount points that have already been specified.
		_i=0
		while (( _i < ${#_mount_points[*]} )); do
			_mp=${_mount_points[$_i]}
			grep -q " $_mp$" $FILESYSTEMS && continue

			# Append mount information to $FILESYSTEMS
			_pp=${_partitions[$_i]}
			echo "$_pp $_mp" >>$FILESYSTEMS

			: $(( _i += 1))
		done
d138 1
a138 16
	# Read $FILESYSTEMS, creating a new filesystem on each listed
	# partition and saving the partition and mount point information
	# for subsequent sorting by mount point.
	_i=0
	unset _partitions _mount_points
	while read _pp _mp; do
		_OPT=
		[[ $_mp == / ]] && _OPT=$MDROOTFSOPT
		newfs -q $_OPT /dev/r$_pp
		# N.B.: '!' is lexically < '/'. That is required for correct
		#	sorting of mount points.
		_mount_points[$_i]="$_mp!$_pp"
		: $(( _i += 1 ))
	done <$FILESYSTEMS

	# Write fstab entries to /tmp/fstab in mount point alphabetic order
d140 1
a140 1
	for _mp in $(bsort ${_mount_points[*]}); do
d143 1
a143 1
		echo -n "/dev/$_pp $_mp ffs rw"
d180 1
a180 1
	done >>/tmp/fstab
d184 1
a194 7

# Remount all filesystems in /etc/fstab with the options from /etc/fstab, i.e.
# without any options such as async which may have been used in the first
# mount.
while read _dev _mp _fstype _opt _rest; do
	mount -u -o $_opt $_dev $_mp ||	exit
done </etc/fstab
@


1.185
log
@whoa, we were assuming that $_password was still the user password.  we
got lucky.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.184 2009/05/06 01:29:48 deraadt Exp $
d218 1
a218 1
[[ $MODE == install ]] && set_timezone /var/tzdir/
d222 3
a224 1
[[ $MODE == install ]] && set_timezone /mnt/usr/share/zoneinfo/
@


1.184
log
@Split the collection of many questions from the appplication of their
change.  Then ask them at the start.  The timezone stuff remains a bit
weird since we have to depend on when we get the TZ names, or when we
get network... so there are 3 possible places that question can be
asked.  But now basically once it starts ftp'ing the sets, you only
have the final done prompt.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.183 2009/05/06 01:00:14 krw Exp $
d284 1
a284 1
	[[ -n "$_password" ]] && _encr=`/mnt/usr/bin/encrypt -b 8 -- "$_password"`
@


1.183
log
@De-uglify disk configuration in the non-auto layout cases. Trust
disklabel(8) to prevent duplicate mount points, and the user to
enter all their mountpoint info in disklabel(8). Proceed directly
to disk formatting after the last disk is configured. Do not pass
go.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.182 2009/05/05 00:38:02 deraadt Exp $
d218 1
a218 18
# Set hostname.
#
# Use existing hostname (short form) as the default value because we could
# be restarting an install.
#
# Don't ask for, but don't discard, domain information provided by the user.
#
# Only apply the new value if the new short form name differs from the existing
# one. This preserves any existing domain information in the hostname.
ask_until "\nSystem hostname? (short form, e.g. 'foo')" "$(hostname -s)"
[[ ${resp%%.*} != $(hostname -s) ]] && hostname $resp
THESETS="$THESETS site$VERSION-$(hostname -s).tgz"

# Remove existing network configuration files in /tmp to ensure they don't leak
# onto the installed system in the case of a restarted install. Any information
# contained within them should be accessible via ifconfig, hostname, route,
# etc, or from resolv.conf.shadow.
( cd /tmp; rm -f host* my* resolv.conf resolv.conf.tail dhclient.* )
d220 1
a220 1
donetconfig
d222 1
a222 1
install_sets
a236 13
while :; do
	askpassword root
	_rootpass="$_password"
	[[ -n "$_password" ]] && break
	echo "The root password must be set."
done

questions

user_setup

set_timezone

d279 17
@


1.182
log
@spaces to tabs
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.181 2009/05/03 20:20:38 krw Exp $
d87 1
a87 1
			ask_which "disk" "do you wish to initialize" "$_DKDEVS" done "No more disks to initialize"
d103 1
a103 1
		unset _partitions _psizes _mount_points
a121 1
			_psizes[$_i]=$_size
d124 4
a127 13
			if [[ -f /tmp/fstab.$DISK ]]; then
				while read _pp _mp _rest; do
					[[ $_pp == "/dev/${_partitions[$_i]}" ]] || continue
					# Ignore mount points that have already been specified.
					[[ -n $(grep " $_mp\$" $FILESYSTEMS) ]] && break
					isin $_mp ${_mount_points[*]} && break
					# Ignore '/' for any partition but ROOTDEV. Check just
					# in case ROOTDEV isn't first partition processed.
					[[ $_mp == '/' ]] && break
					# Otherwise, record user specified mount point.
					_mount_points[$_i]=$_mp
				done </tmp/fstab.$DISK
			fi
d140 1
a140 1
		# Now prompt the user for the mount points.
d142 1
a142 2
		while :; do
			_pp=${_partitions[$_i]}
d144 1
a144 1
			_size=$(stdsize ${_psizes[$_i]})
d146 3
a148 40
			if [[ $AUTOROOT == y ]]; then
				# No need to disturb the user.
				resp=""
			else
				# Get the mount point from the user.
				ask "Mount point for $_pp ($_size)? (or 'none' or 'done')" "$_mp"
			fi

			case $resp in
			"")	;;
			none)	_mp=
				;;
			done)	break
				;;
			/*)	set -- $(grep " $resp\$" $FILESYSTEMS)
				_pp=$1
				if [[ -z $_pp ]]; then
					# Mount point wasn't specified on a
					# previous disk. Has it been specified
					# on this one?
					_j=0
					for _pp in ${_partitions[*]} ""; do
						if [[ $_i -ne $_j ]]; then
							[[ $resp == ${_mount_points[$_j]} ]] && break
						fi
						: $(( _j += 1 ))
					done
				fi
				if [[ -n $_pp ]]; then
					echo "Invalid response: $_pp is already being mounted at $resp."
					continue
				fi
				_mp=$resp
				;;
			*)	echo "Invalid response: mount point must be an absolute path!"
				continue
				;;
			esac

			_mount_points[$_i]=$_mp
a150 12
			if [[ $_i -ge ${#_partitions[*]} ]]; then
				[[ $AUTOROOT == y ]] && break
				_i=0
			fi
		done

		# Append mount information to $FILESYSTEMS
		_i=0
		for _pp in ${_partitions[*]}; do
			_mp=${_mount_points[$_i]}
			[ "$_mp" ] && echo "$_pp $_mp" >>$FILESYSTEMS
			: $(( _i += 1 ))
a153 13
	if [[ $AUTOROOT == n ]]; then
		cat <<__EOT

OpenBSD filesystems:
$(<$FILESYSTEMS)

The next step *DESTROYS* all existing data on these partitions!
__EOT

		ask_yn "Are you really sure that you're ready to proceed?"
		[[ $resp == n ]] && { echo "Ok, try again later." ; exit ; }
	fi

d169 1
a169 1
	# Write fstab entries to /tmp/fstab in mount point alphabetic  order
@


1.181
log
@Oops. Untested over-optimization slipped in, breaking installs.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.180 2009/05/03 15:03:05 krw Exp $
d237 1
a237 1
		#       sorting of mount points.
d328 4
a331 4
    askpassword root
    _rootpass="$_password"
    [[ -n "$_password" ]] && break
    echo "The root password must be set."
d384 2
a385 2
    _encr=`/mnt/usr/bin/encrypt -b 8 -- "$_rootpass"`
    echo "1,s@@^root::@@root:${_encr}:@@
@


1.180
log
@A few long standing sh'isms -> ksh'isms.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.179 2009/05/03 14:02:07 krw Exp $
d75 1
a75 1
		_DKDEVS=$(rmel $DISK $_DKDEVS)
@


1.179
log
@Simplify and shrink fstab creation code by putting mount point and
partition info into one string separated by the lexically low value
'!' char and sorting those strings. This eliminates an inner loop
over partition info. No user visible change.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.178 2009/05/03 05:13:38 krw Exp $
d70 1
a70 1
if [ ! -f /etc/fstab ]; then
d75 1
a75 1
		_DKDEVS=`rmel "$DISK" $_DKDEVS`
d77 1
a77 2
		# Always do ROOTDISK first, and repeat until
		# it is configured acceptably.
d107 1
a107 1
			_pp=${DISK}${_dev%:}
d148 1
a148 1
		[[ ${#_partitions[*]} -gt 0 ]] || continue
@


1.178
log
@Simplify things by putting extra swap partitions in the fstab as
they are discovered rather than keeping a list and appending it to
the end of the fstab. No impact unless you configure extra swap
partitions.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.177 2009/04/30 01:03:19 deraadt Exp $
d237 3
a239 3

		_partitions[$_i]=$_pp
		_mount_points[$_i]=$_mp
d243 42
a284 54
	# Write fstab entries to /tmp/fstab in mount point alphabetic
	# order to enforce a rational mount order.
	for _mp in `bsort ${_mount_points[*]}`; do
		_i=0
		for _pp in ${_partitions[*]}; do
			if [ "$_mp" = "${_mount_points[$_i]}" ]; then
				echo -n "/dev/$_pp $_mp ffs rw"
				# Only '/' is neither nodev nor nosuid. i.e.
				# it can obviously *always* contain devices or
				# setuid programs.
				#
				# Every other mounted filesystem is nodev. If
				# the user chooses to mount /dev as a separate
				# filesystem, then on the user's head be it.
				#
				# The only directories that install puts suid
				# binaries into (as of 3.2) are:
				#
				# /sbin
				# /usr/bin
				# /usr/sbin
				# /usr/libexec
				# /usr/libexec/auth
				# /usr/X11R6/bin
				#
				# and ports and users can do who knows what
				# to /usr/local and sub directories thereof.
				#
				# So try to ensure that only filesystems that
				# are mounted at or above these directories
				# can contain suid programs. In the case of
				# /usr/libexec, give blanket permission for
				# subdirectories.
				if [[ $_mp == / ]]; then
					# / can hold devices and suid programs.
					echo " 1 1"
				else
					# No devices anywhere but /.
					echo -n ",nodev"
					case $_mp in
					# A few directories are allowed suid.
					/sbin|/usr)			;;
					/usr/bin|/usr/sbin)		;;
					/usr/libexec|/usr/libexec/*)	;;
					/usr/local|/usr/local/*)	;;
					/usr/X11R6|/usr/X11R6/bin)	;;
					# But all others are not.
					*)	echo -n ",nosuid"	;;
					esac
					echo " 1 2"
				fi
			fi
			: $(( _i += 1 ))
		done
@


1.177
log
@Do not allow the root password to be empty; ok krw after he told me
"But I dislike putting 'Sorry, ' in the messages. We're not sorry. :-)."
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.176 2009/04/30 01:01:56 deraadt Exp $
a62 3
# The name of the file holding the list of non-default configured swap devices.
SWAPLIST=/tmp/swaplist

a84 1
			cat /dev/null >$SWAPLIST
d113 4
a116 2
			elif [[ $_pp == $SWAPDEV || $_type == swap ]]; then
				echo "$_pp" >>$SWAPLIST
a297 6

	# Append all non-default swap devices to fstab.
	while read _dev; do
		[[ $_dev == $SWAPDEV ]] || \
			echo "/dev/$_dev none swap sw 0 0" >>/tmp/fstab
	done <$SWAPLIST
@


1.176
log
@quotes around ? matches; Alexander Hall
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.177 2009/04/30 00:59:03 deraadt Exp $
d348 6
a353 2
askpassword root
_rootpass="$_password"
@


1.175
log
@only encrypt passwords if they are set
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.174 2009/04/29 17:22:49 deraadt Exp $
@


1.174
log
@Ask for the root password before sshd, because I have caught myself
twice now falling through the question because I am getting too used to
hitting the return key...
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.173 2009/04/28 21:41:03 deraadt Exp $
d400 3
a402 2
_encr=`/mnt/usr/bin/encrypt -b 8 -- "$_rootpass"`
echo "1,s@@^root::@@root:${_encr}:@@
d405 1
@


1.173
log
@We have no choice but to ask for the timezone information later, so
all the other questions have been congregating down towards the end.
Might as well ask for the root password down there, too.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.172 2009/04/25 03:47:35 deraadt Exp $
a347 2
questions

d350 2
@


1.172
log
@We are able to handle the timezone question a few steps earlier, along
with the other questions.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.171 2009/04/24 01:04:33 krw Exp $
a332 3
askpassword root
_rootpass="$_password"

a347 1
# Handle questions...
d349 3
@


1.171
log
@Move bsd.mp juggling into relevant MD files. Make bsd.mp a default
selection on multi-processor machines. Make bsd.mp a sanity check
item on multi-processor machines.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.170 2009/04/23 23:16:34 deraadt Exp $
d356 2
a405 2

set_timezone
@


1.170
log
@configure the network unconditionally.  You have an opportunity to bail
out of this by saying "done" when you get to the first interface.  Then
it will handle the domain / DNS question, but since no interface is setup
it cleverly already skips the default route question.  Another useless
question bites the dust.
ok krw
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.169 2009/04/23 18:26:14 deraadt Exp $
a336 8

if [ -f /mnt/bsd.mp -a -f /mnt/bsd ]; then
	if [ $(sysctl -n hw.ncpufound) -gt 1 ]; then
		echo "Multiprocessor machine; using bsd.mp automatically."
		mv /mnt/bsd /mnt/bsd.sp
		mv /mnt/bsd.mp /mnt/bsd
	fi
fi
@


1.169
log
@Near the end of the installation, prompt for the setup of an initial
user, who will also be placed in wheel.  The setup of that user is
expected to be mostly compatible with what useradd(8) would have done.
krw will probably improve the ksh code in here after this :)
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.168 2009/04/19 17:56:01 deraadt Exp $
d331 1
a331 2
ask_yn "Configure the network?" yes
[[ $resp == y ]] && donetconfig
@


1.168
log
@If hw.ncpufound > 1, have the install script automatically prefer to use
bsd.mp instead of bsd (using -- mv bsd bsd.sp; mv bsd.mp bsd). anyone
who brings up boot.conf is an i386 bigot.
tested on almost all platforms that can do this, ok various people
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.167 2009/04/13 02:22:12 krw Exp $
d334 2
a335 14
_oifs=$IFS
IFS=
while :; do
	askpass "Password for root account? (will not echo)"
	_password=$resp

	askpass "Password for root account? (again)"
	# N.B.: Need quotes around $resp and $_password to preserve leading
	#       or trailing spaces.
	[[ "$resp" == "$_password" ]] && break

	echo "Passwords do not match, try again."
done
IFS=$_oifs
d363 2
a401 6
_encr=`/mnt/usr/bin/encrypt -b 8 -- "$_password"`
echo "1,s@@^root::@@root:${_encr}:@@
w
q" | /mnt/bin/ed /mnt/etc/master.passwd 2>/dev/null
/mnt/usr/sbin/pwd_mkdb -p -d /mnt/etc /etc/master.passwd

d407 6
@


1.167
log
@Don't try to read or remove a non-existant /tmp/hosts file. This can
happen if no interfaces are configured during an install. Noticed by
jsing@@.

Diff from jsing@@, only slightly tweaked.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.166 2009/04/10 21:01:32 krw Exp $
d350 8
@


1.166
log
@If the md_prep_disklabel routine sets AUTOROOT=y, then don't ask the
user for input. Just plow ahead.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.165 2009/04/10 18:26:50 krw Exp $
d380 12
a391 12
# manually.
_dn=$(get_fqdn)
while read _addr _hn _aliases; do
	if [[ -n $_aliases || $_hn != ${_hn%%.*} || -z $_dn ]]; then
		echo "$_addr\t$_hn $_aliases"
	else
		echo "$_addr\t$_hn.$_dn $_hn"
	fi
done <hosts >>/mnt/etc/hosts
# rm hosts because we don't want to move it to /mnt/etc/., and rm -f because
# we may not have configured any interfaces and thus have no file to remove.
rm -f hosts
@


1.165
log
@'rm hosts' -> 'rm -f hosts', since we may have not configured any
interfaces and thus not have a hosts file to remove. Should eliminate
annoying error messages noticed by jsing@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.164 2009/03/14 15:55:39 krw Exp $
d104 1
d160 8
a167 2
			# Get the mount point from the user
			ask "Mount point for $_pp ($_size)? (or 'none' or 'done')" "$_mp"
d202 4
a205 1
			[ $_i -ge ${#_partitions[*]} ] && _i=0
d217 2
a218 1
	cat <<__EOT
d226 3
a228 2
	ask_yn "Are you really sure that you're ready to proceed?"
	[[ $resp == n ]] && { echo "Ok, try again later." ; exit ; }
@


1.164
log
@Installed dhclient.conf is now all comments. Installed hosts is
now correct as is, since we don't add info to localhost lines. So
ditch comment-preserving dance through /tmp and just append our
new info to installed files. Shrinks scripts without changing
behaviour.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.163 2009/03/14 14:23:05 krw Exp $
d377 3
a379 1
rm hosts
@


1.163
log
@There should only be one ::1 and one 127.0.0.1 entry in the hosts
file.  And 'localhost' don't need no stinkin' domain names.

Insert line(s) with the address(es) of last interface defined instead
of duplicate ::1 and 127.0.0.1 entries, Thus dhcp configured
interfaces may eventually drift away from the value in hosts file.

Much discussed just before tree lock. Time to see what happens.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.162 2009/02/21 18:07:14 krw Exp $
d365 4
a368 10
# Prepend localhost entries and add FQDN to /tmp/hosts entries, changing lines
# of the form '1.2.3.4 hostname' to '1.2.3.4 hostname.$FQDN hostname'. Leave
# untouched any lines containing 'localhost', domain information or aliases. The
# first should not have domain info and the latter the user added manually.

cat >hosts.new <<__EOT
::1		localhost
127.0.0.1	localhost
__EOT

d376 6
a381 2
done <hosts >>hosts.new
mv hosts.new hosts
d383 2
a384 8
# Prepend interesting comments from installed hosts and dhclient.conf files
# to /tmp/hosts and /tmp/dhclient.conf.
save_comments hosts
save_comments dhclient.conf

# Possible files: fstab hostname.* hosts kbdtype mygate myname ttys
#		  boot.conf dhclient.conf resolv.conf sysctl.conf 
#		  resolv.conf.tail
d386 1
a386 1
for _f in fstab host* kbdtype my* ttys *.conf *.tail; do
@


1.162
log
@Pretty up installed hosts file by using tabs between address and
names. Update copyright year since we are making noticable changes.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.161 2009/02/19 02:11:32 krw Exp $
a318 8
# Always create new hosts file.
cat >/tmp/hosts <<__EOT
::1		localhost
127.0.0.1	localhost
::1		$(hostname -s)
127.0.0.1	$(hostname -s)
__EOT

d365 10
a374 3
# Add FQDN to /tmp/hosts entries, changing lines of the form '1.2.3.4 hostname'
# to '1.2.3.4 hostname.$FQDN hostname'. Leave untouched any lines containing
# domain information or aliases. The user added those manually.
d382 1
a382 1
done <hosts >hosts.new
@


1.161
log
@Third time lucky. Proper use of quotes when comparing the first and
second copies of the entered password will preserve leading and
trailing spaces.

Prodded by dale@@. Proper clue pointed out by todd@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.160 2009/02/15 15:56:45 krw Exp $
d5 1
a5 1
# Copyright (c) 1997-2004 Todd Miller, Theo de Raadt, Ken Westerback
d321 4
a324 4
::1 localhost
127.0.0.1 localhost
::1 $(hostname -s)
127.0.0.1 $(hostname -s)
d379 1
a379 1
		echo "$_addr $_hn $_aliases"
d381 1
a381 1
		echo "$_addr $_hn.$_dn $_hn"
@


1.160
log
@Build install media with disktab.shadow already in /tmp, rather
than have the install script copy it there. Shrinks install script,
removes an extra copy of disktab.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.159 2008/06/26 05:42:03 ray Exp $
d337 3
a339 1
	[[ $resp == $_password ]] && break
@


1.159
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.158 2008/06/13 04:41:44 krw Exp $
a73 4
	# Install the shadowed disktab file; lets us write to it for temporary
	# purposes without mounting the miniroot read-write.
	[ -f /etc/disktab.shadow ] && cp /etc/disktab.shadow /tmp/disktab.shadow

@


1.158
log
@ksh's arithmetic is 32 bit signed so we can no longer rely on
block counts being small enough to do arithmetic on. Manually
process partition block counts into 'human readable' byte sizes
when asking for confirmation of disk configuration.

Install script now properly displays the size of Yottabyte
partitions.

requested by & ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.157 2008/06/01 02:45:59 krw Exp $
a41 7
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by the NetBSD
#        Foundation, Inc. and its contributors.
# 4. Neither the name of The NetBSD Foundation nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
@


1.157
log
@Don't copy empty files into installed system's /etc. Tweak comment and
mention boot.conf and ttys. No functional change.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.156 2008/03/02 21:18:58 krw Exp $
a122 1
			_ps=$_size
d135 1
a135 1
			_psizes[$_i]=$_ps
a166 1
			_ps=$(( ${_psizes[$_i]} / 2 ))
d168 1
d171 1
a171 1
			ask "Mount point for ${_pp} (size=${_ps}k)? (or 'none' or 'done')" "$_mp"
@


1.156
log
@Keep resolv.conf.shadow around when restarting an install. This
means manually entered DNS server addresses are not lost when
an install is restarted. Restores behaviour unintentionally lost
with r1.127.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.155 2008/02/11 23:40:03 krw Exp $
d401 6
a406 5
# Possible files: fstab, kbdtype, myname, mygate, sysctl.conf
#                 dhclient.conf resolv.conf resolv.conf.tail
#		  hostname.* hosts
for _f in fstab kbdtype my* *.conf *.tail host* ttys; do
	[[ -f $_f ]] && mv $_f /mnt/etc/.
@


1.155
log
@For architectures with an enabled 'console' ttys entry, adjust the
speed of said entry to reflect the speed of the console being used to
install.

For archs with MDSERIAL defined, offer the current device and speed as
the defaults for switching to serial consoles.

Fixes new Sun gear that uses a 115200 console speed and makes for
better defaults without breaking current install processes.

ok dlg@@ henning@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.154 2006/08/29 01:02:49 krw Exp $
d328 2
a329 2
# etc.
( cd /tmp; rm -f host* my* resolv.* dhclient.* )
@


1.154
log
@Handle site${VERSION}-$(hostname -s).tgz files better so that they
don't get in the way of noticing that all default sets are installed.

Restores the desired behaviour where [done] becomes the default answer
to the "Location of sets?" question once all default sets are
successfully installed.

spotted by & ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.153 2006/06/23 21:43:19 krw Exp $
d363 6
@


1.153
log
@Add a set siteXY-<hostname>.tgz and make it selected by default. This
allows host specific files to be trivially installed and makes
creating/maintaining large numbers of host specific configurations
much simpler.

Suggested by work being done by Alex Holst, brought to my attention by
mk@@ during c2k6.

Name format suggested by henning@@, tweaked by deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.152 2005/04/21 21:41:33 krw Exp $
a323 1
DEFAULTSETS="$DEFAULTSETS site$VERSION-$(hostname -s).tgz"
@


1.152
log
@Create disk device before attempting to disklabel it. Don't keep a
disk which couldn't be created in the selection list.

noticed by deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.151 2005/04/02 14:27:08 krw Exp $
d323 2
@


1.151
log
@Scrounge a few characters of whitespace.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.150 2005/03/26 01:40:21 krw Exp $
d108 1
@


1.150
log
@Start some delayed cleanup and shrinkage. Today: ': ;' -> ':;' in
while statements.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.149 2004/11/06 18:05:48 deraadt Exp $
d218 1
a218 1
	cat << __EOT
d330 1
a330 1
cat > /tmp/hosts << __EOT
d360 1
a360 1
done < /etc/fstab
d373 1
a373 1
hostname > myname
d385 1
a385 1
done < hosts > hosts.new
d403 1
a403 1
q" | /mnt/bin/ed /mnt/etc/master.passwd 2> /dev/null
@


1.149
log
@select dd or ed from newly installed filesystem instead, ok krw
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.148 2004/10/02 18:45:08 krw Exp $
d88 1
a88 1
	while : ; do
d165 1
a165 1
		while : ; do
@


1.148
log
@Minor code cleanup and shrinkage. No functional change.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.147 2004/07/30 00:16:30 krw Exp $
d403 1
a403 1
q" | ed /mnt/etc/master.passwd 2> /dev/null
d408 1
a408 1
dd if=/mnt/dev/urandom of=host.random bs=1024 count=64 >/dev/null 2>&1
@


1.147
log
@Use '#!/bin/ksh' for install scripts, as we use so many ksh'isms. Some of
which will be disabled for /bin/sh invocations soon.

Requested by millert@@.

ok pval@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.146 2004/07/18 01:12:32 deraadt Exp $
d342 1
a342 2
resp=
while [[ -z $resp ]]; do
d347 3
a349 4
	if [ "$_password" != "$resp" ]; then
		echo "Passwords do not match, try again."
		resp=
	fi
@


1.146
log
@spaces
@
text
@d1 2
a2 2
#!/bin/sh
#	$OpenBSD: install.sh,v 1.145 2004/07/04 22:30:25 krw Exp $
@


1.145
log
@Remove requirement that the 'b' partition on the root disk be
configured during install.

If it is configured it will still be unconditionally used as swap, so
don't let the user set a mount point for it.

Minor white space, commment and verbiage adjustments.

Suggested by many including Mickey, Henning, Todd, and Theo.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.144 2004/06/26 20:10:17 krw Exp $
d235 1
a235 1
		_OPT=	
@


1.144
log
@Allow change of default console to first serial device during install. Used in
i386 only at this time.

ok beck@@ deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.143 2004/05/28 22:59:34 krw Exp $
d127 1
a127 1
			elif [[ $_type == swap ]]; then
d137 1
a137 1
			# If the user assigned a mount point, use it if possible.
d149 1
a149 1
				done < /tmp/fstab.$DISK
d152 1
a152 1
		done < /tmp/disklabel.$DISK
d154 4
a157 20
		if [[ $DISK == $ROOTDISK ]]; then
			# Ensure that ROOTDEV was configured.
			if [[ -n $(grep "^$ROOTDEV /$" $FILESYSTEMS) ]]; then
				echo "The root filesystem will be mounted on $ROOTDEV."
			else
				echo "ERROR: Unable to mount the root filesystem on $ROOTDEV."
				DISK=
			fi
			# Ensure that $SWAPDEV was configured as swap space.
			if [[ -n $(grep "^$SWAPDEV" $SWAPLIST) ]]; then
				echo "$SWAPDEV will be used for swap space."
				# But we really don't want it in the installed
				# /etc/fstab.
				grep -v "^$SWAPDEV" $SWAPLIST > $SWAPLIST.tmp
				mv $SWAPLIST.tmp $SWAPLIST
			else
				echo "ERROR: Unable to use $SWAPDEV for swap space."
				DISK=
			fi
			[[ -n $DISK ]] || echo "You must reconfigure $ROOTDISK."
d160 2
a161 2
		# If there are no BSD partitions, or $DISK has been reset, go on to next disk.
		[[ ${#_partitions[*]} -gt 0 && -n $DISK ]] || continue
d163 1
a163 1
		# Now prompt the user for the mount points. Loop until "done" entered.
d220 1
a220 2
You have configured the following partitions and mount points:

d223 1
a223 1
The next step creates a filesystem on each partition, ERASING existing data.
d227 1
a227 1
	[[ $resp == n ]] && { echo "ok, try again later..." ; exit ; }
d298 1
a298 1
	done >> /tmp/fstab
d302 3
a304 2
		echo "/dev/$_dev none swap sw 0 0" >>/tmp/fstab
	done < $SWAPLIST
@


1.143
log
@Add MDROOTFSOPT handling code to allow non-default newfs options to
be specified for root filesystems. Add MDROOTFSOPT value for luna88k
so installed system can boot.

Tested by Kenji Ayoma.

ok miod@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.142 2004/03/23 02:39:38 krw Exp $
d414 1
a414 1
for _f in fstab kbdtype my* *.conf *.tail host*; do
@


1.142
log
@Update copyrights to 2004.

ok deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.141 2004/03/18 00:25:12 krw Exp $
d252 3
a254 1
		newfs -q /dev/r$_pp
@


1.141
log
@Don't ask for timezone info during an upgrade.

Suggestion by Tom Cosgrove.

ok miod@@ millert@@ deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.140 2003/12/04 18:43:38 deraadt Exp $
d5 1
a5 1
# Copyright (c) 1997-2002 Todd Miller, Theo de Raadt, Ken Westerback
@


1.140
log
@ask if sshd should be on by default (default to yes, still); tested by nick
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.139 2003/11/03 05:16:21 david Exp $
d427 2
@


1.139
log
@spelling fix in comments
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.138 2003/09/26 00:11:25 krw Exp $
d378 2
a379 2
# Create /tmp/sysctl.conf from installed sysctl.conf if appropriate.
set_machdep_apertureallowed
@


1.138
log
@Fix typo: 'Which disk do you wish to initialize??' -> '... initialize?'.

Only appeared when non-boot disks were initialized.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.137 2003/09/22 01:31:39 krw Exp $
d97 1
a97 1
			# keep checking for their existance before grep'ing.
@


1.137
log
@Introduce a function ask_yn() to use when asking 'yes or no'
questions.

ask_yn() always returns a 'y' or 'n' in $resp, vastly simplifying the
logic used to check the user response.

ask_yn() insists on the user responding with a 'y', 'n', 'yes', or
'no'. Case is ignored.

Previously almost any input was accepted as either a yes or a no
depending on the question. ask_yn() reduces the chance of user error,
e.g.  by answering the next question (default route) instead of the
posed one (Use DNS server now?).

All 'yes or no' questions now use ask_yn(). All questions show the
full default answer, i.e. 'yes' or 'no' rather than 'y' or 'n'.

Some minor logic cleanups of the usual sort, but no changes to logic
flow or questions bar minor verbiage adjustment.

Inspired by a Bob Beck install nit.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.136 2003/08/17 18:18:50 krw Exp $
d103 1
a103 1
			ask_which "disk" "do you wish to initialize?" "$_DKDEVS" done "No more disks to initialize"
@


1.136
log
@Message clarification & cleanup.

Replace the generic 'Done - no available Xs found.' message with two
more relevant ones. Suggested several times, most memorably by Todd@@.

a) For selection of disks or cds to install from, and for selection of
the root disk, make it 'No Xs found.'.

b) For processing the list of disks or interfaces to initialize, make
it 'No more Xs to initialize.'.

Delete get_root() as it is only called in one place, and insert code
at that location.

Reclaim a few characters by putting ask_which() punctuation where
message is output rather than repeating it where message passed.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.135 2003/08/07 19:12:59 deraadt Exp $
d243 2
a244 7
	ask "Are you really sure that you're ready to proceed?" n
	case $resp in
	y*|Y*)	;;
	*)	echo "ok, try again later..."
		exit
		;;
	esac
d351 2
a352 5
ask "Configure the network?" y
case $resp in
y*|Y*)	donetconfig ;;
*)	;;
esac
d357 1
a357 1
while [ -z "$resp" ]; do
@


1.135
log
@spaces
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.134 2003/07/03 15:19:01 krw Exp $
d103 1
a103 1
			ask_which "disk" "do you wish to initialize?" "$_DKDEVS" done
@


1.134
log
@Use numeric comparison operators when testing numeric values.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.133 2003/07/02 16:42:19 krw Exp $
d168 1
a168 1
				mv $SWAPLIST.tmp $SWAPLIST	
@


1.133
log
@Eliminate cutword(), replacing it with specific code: 'set --' in two
cases and a simple sed expression in the third.

Add pfsync to the list of interfaces that should not be offered to the
user for configuration.

Display the server line selected from the ftp/http server list in a
more compact form with only a single space between fields.

The usual [] -> [[]], etc. in areas being revised.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.132 2003/06/30 17:49:14 krw Exp $
d177 1
a177 1
		[[ ${#_partitions[*]} > 0 && -n $DISK ]] || continue
@


1.132
log
@Cleanup ask_which() logic.

Use first device in supplied list as default unless overridden.
Eliminates repeated 'echo XXX | cutword 1' constructs.

Use 'set -- $_devs' to parse _devs and find out if there are any
devices in the list. Then use '_devs="$*" to eliminate all extraneous
whitespace from _devs, rather than just a single trailing blank.

Usual [...] -> [[...]], `` -> $(), extra '{}' and '"' eliminations in
areas being fixed up.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.131 2003/06/27 22:40:40 krw Exp $
d194 6
a199 4
			/*)	_pp=`grep " $resp\$" $FILESYSTEMS | cutword 1`
				if [ -z "$_pp" ]; then
					# Mount point wasn't specified on a previous disk. Has it
					# been specified on this one?
d202 2
a203 2
						if [ $_i -ne $_j ]; then
							[ "$resp" = "${_mount_points[$_j]}" ] && break
d208 1
a208 1
				if [ "$_pp" ]; then
@


1.131
log
@Improve swap partition handling during install/upgrade.

a) Add all defined swap partitions except the default partition on the
root disk to the installed /etc/fstab.

b) Mount all possible swap partitions just before creating all
devices, giving small memory machines a better chance to successfully
install/upgrade.

Should obviate the need for FAQ 4.3.6.

ok deraadt@@ millert@@ (slightly earlier version)
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.130 2003/06/02 15:46:09 deraadt Exp $
d101 4
a104 2
			ask_which "disk" "do you wish to initialize?" "$_DKDEVS"
			[ "$resp" = "done" ] && break
@


1.130
log
@licence cleanup; agreement from krw and millert
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.129 2002/12/14 15:33:34 krw Exp $
d67 1
a67 2
# A list of devices holding filesystems and the associated mount points
# is kept in the file named FILESYSTEMS.
d70 3
d96 4
a99 1
			rm -f $FILESYSTEMS
d111 1
a111 1
		rm -f /tmp/fstab.$DISK
d114 1
a114 5
		# Get the list of BSD partitions and store sizes
		# XXX - It would be nice to just pipe the output of sed to a
		#       'while read _pp _ps' loop, but our 'sh' runs the last
		#       element of a pipeline in a subshell and the required side
		#       effects to _partitions, etc. would be lost.
d117 4
a120 5
		for _p in $(disklabel ${DISK} 2>&1 | sed -ne '/^ *\([a-p]\): *\([0-9][0-9]*\).*BSD.*/s//\1\2/p'); do
			# All characters after the initial [a-p] are the partition size
			_ps=${_p#?}
			# Removing the partition size leaves us with the partition name
			_pp=${DISK}${_p%${_ps}}
d123 6
a128 1
				echo "$ROOTDEV /" > $FILESYSTEMS
d140 1
a140 1
					[[ -f $FILESYSTEMS && -n $(grep " $_mp\$" $FILESYSTEMS) ]] && break
d150 1
a150 1
		done
d154 1
a154 1
			if [[ -f $FILESYSTEMS && -n $(grep "^$ROOTDEV /$" $FILESYSTEMS) ]]; then
d160 7
a166 3
			# Ensure that ${ROOTDISK}b was configured as swap space.
			if [[ -n $(disklabel $ROOTDISK 2>&1 | sed -ne '/^ *\(b\):.*swap/s//\1/p') ]]; then
				echo "${ROOTDISK}b will be used for swap space."
d168 1
a168 1
				echo "ERROR: Unable to use ${ROOTDISK}b for swap space."
d225 1
a225 1
			[ "$_mp" ] && echo "$_pp $_mp" >> $FILESYSTEMS
d258 1
a258 1
	done < $FILESYSTEMS
d315 5
@


1.129
log
@Expunge some trailing whitespace.

From David Krause.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.128 2002/12/08 20:24:56 krw Exp $
a15 6
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by Todd Miller and
#	Theo de Raadt
# 4. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
@


1.128
log
@Fix botch in last commit: prepend comments to hosts after adding FQDN to
hosts entries, so comments are not processed.

Last few touchups & shrinkage for this round.

Current score:

install.sh+install.sub+upgrade.sh = 36,934 (vs 40,062 for 3.2).
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.127 2002/12/08 19:30:40 krw Exp $
d390 2
a391 2
_dn=$(get_fqdn) 
while read _addr _hn _aliases; do 
@


1.127
log
@Fix & cleanup logic, especially around interrupted installs.

Use value of 'hostname' to store all HOSTNAME and FQDN information.  Elminate
those global variables. For install accept user input as is, but if the short
form hostname is unchanged, save any domain info by not re-setting hostname.
For upgrade just set hostname from /tmp/myname.

Unconditionally create default hosts file in install.sh, rather than doing it
in separate places depending on whether or not the user configures the network.
Always ask if the user wants to edit the hosts file when the network is
configured, but without listing it out.

Don't put 'search' command in resolv.conf as we now set hostnames to include
fully qualified domain names, which will be used to yield local domain name.

Loop asking for the default route until the user enters one that 'route'
accepts or the user explicitly asks for no default route by entering 'none'.

Add FQDN info to hosts file just before saving configuration files to the
installed system. Preserve user added lines - those with aliases or with domain
information in the hostname.

Clean up donetconfig() logic. Delete network config files in install.sh so that
if the user restarts an interrupted install previous network configuration does
not leak into installed system.

Elminiate get_resolv_fqdn(), searching resolv.conf for domain info only when
dhcp was used. get_fqdn() is reduced to looking for domain info in current
hostname, and supplying 'my.domain' if none found.

Add save_comments() and use to preserve useful comments in the installed
/etc/hosts and /etc/dhclient.conf files. Previous logic for dhclient.conf could
cause repeated appending of configuration info rather than just preserving the
comments.

Cleanup logic copying files from /tmp to /mnt/etc, eliminating unneeded
cfgfiles variable. Use wildcards and subshells to shrink code size.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.126 2002/12/04 03:39:07 krw Exp $
a382 5
# Prepend interesting comments from installed hosts and dhclient.conf files
# to /tmp/hosts and /tmp/dhclient.conf.
save_comments hosts
save_comments dhclient.conf

d399 5
@


1.126
log
@Code cleanup & shrinkage.

Redo configure_ifs() to take full advantage of recent code
refactoring, and cleanup code while there.

Move address or dhcp question to after media option handling so that
each question gives immediate feedback. i.e. if the media options
given don't work then say so and exit, and if dhcp is requested
immediately issue the dhcp request. Also allows some code shrinkage.

Eliminate addifconfig() and remount(). The former is folded into
configure_ifs() and the latter's three lines simply replace the call
in install.sh.

Move remount code to before any configuration files are moved to the
installed system.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.125 2002/12/03 00:58:35 krw Exp $
d318 9
a326 2
# Use existing hostname, if any, as the default. Discard any
# domain information supplied.
d328 15
a342 3
HOSTNAME=${resp%%.*}
FQDN=my.domain
hostname $HOSTNAME.$FQDN
a343 2
# Get network configuration information, and store it for placement in the
# root filesystem later.
d346 2
a347 9
y*|Y*)	donetconfig
	;;
*)	cat > /tmp/hosts << __EOT
::1 localhost.$FQDN localhost
127.0.0.1 localhost.$FQDN localhost
::1 $HOSTNAME.$FQDN $HOSTNAME
127.0.0.1 $HOSTNAME.$FQDN $HOSTNAME
__EOT
	;;
d367 3
a369 3
# Remount all filesystems in /etc/fstab with the options from
# /etc/fstab, i.e. without any options such as async which
# may have been used in the first mount.
d374 1
a374 2
# Set machdep.apertureallowed if required. install_sets must be
# done first so that /etc/sysctl.conf is available.
a376 3
# Move configuration files to /mnt/etc.
cfgfiles="fstab hostname.* dhclient.conf resolv.conf resolv.conf.tail kbdtype sysctl.conf"

a377 1
cd /tmp
d379 25
a403 7
if [ -f dhclient.conf ]; then
	# Save any leases obtained during install.
	mv /var/db/dhclient.leases /mnt/var/db/.
else
	# Install mygate for non-dhcp installations.
	mv mygate /mnt/etc/.
fi
d405 6
a410 13
hostname > /mnt/etc/myname

# Try to retain useful leading comments in /etc/hosts file.
grep "^#" /mnt/etc/hosts > hosts.comment
cat hosts.comment hosts > /mnt/etc/hosts

for file in $cfgfiles; do
	if [ -f $file ]; then
		cp $file /mnt/etc/.
		rm -f $file
	fi
done
echo "...done."
d418 5
a422 4
echo -n "Generating initial host.random file ..."
dd if=/mnt/dev/urandom of=/mnt/var/db/host.random bs=1024 count=64 >/dev/null 2>&1
chmod 600 /mnt/var/db/host.random >/dev/null 2>&1
echo "...done."
@


1.125
log
@More code consolidation.

Create dhcp_request() and use in configure_ifs() rather than repeat code. When
dhcp is successful, move /etc/dhclient.conf, /etc/resolv.conf.tail to /tmp, and
use normal configuration file installation to put them on the installed system.

Also apply any user specified media options immediately. If they don't compute
then return immediately.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.124 2002/11/28 04:50:45 krw Exp $
d357 7
d368 1
a368 1
# Copy configuration files to /mnt/etc.
a394 2

remount_fs
@


1.124
log
@Use any existing hostname as the default, as the install could have
been restarted.

Discard any domain information the user supplies.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.123 2002/11/28 03:06:30 deraadt Exp $
d362 1
a362 1
cfgfiles="fstab hostname.* mygate resolv.conf kbdtype sysctl.conf"
d365 8
a372 8
if [ -f /etc/dhclient.conf ]; then
	cat /etc/dhclient.conf >> /mnt/etc/dhclient.conf
	echo "lookup file bind" > /mnt/etc/resolv.conf.tail
	cp /var/db/dhclient.leases /mnt/var/db/.
	# Don't install mygate for dhcp installations.
	# Note that mygate should not be the first or last file
	# in cfgfiles or this won't work.
	cfgfiles=`echo $cfgfiles | sed -e 's/ mygate / /'`
a376 2
cd /tmp

d383 1
a383 1
		cp $file /mnt/etc/$file
@


1.123
log
@spaces
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.122 2002/11/28 01:54:58 krw Exp $
d318 4
a321 2
ask_until "\nEnter system hostname (short form, e.g. 'foo'):"
HOSTNAME=$resp
@


1.122
log
@Make questions out of requests for user input that were demands.  Use
a standard format of

   <question>? (<extra verbiage>) [<default value>]

Makes things more consistant, and sometimes more terse.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.121 2002/11/24 19:09:46 deraadt Exp $
d144 2
a145 2
					# in case ROOTDEV isn't first partition processed. 
					[[ $_mp == '/' ]] && break					
d151 1
a151 1
 		done
d173 1
a173 1
		
d195 1
a195 1
						if [ $_i -ne $_j ]; then	
d197 1
a197 1
						fi	
d358 1
a358 1
	
@


1.121
log
@use 8 rounds for passwd, like login.conf specifies; rob_ses@@web.de
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.120 2002/11/01 00:39:19 krw Exp $
d182 1
a182 1
			ask "Mount point for ${_pp} (size=${_ps}k), none or done?" "$_mp"
d342 1
a342 1
	askpass "Password for root account (will not echo):"
d345 1
a345 1
	askpass "Password (again):"
@


1.120
log
@Cleanup. install_sets() no longer takes a parameter.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.119 2002/10/03 00:56:44 krw Exp $
d391 1
a391 1
_encr=`/mnt/usr/bin/encrypt -b 7 -- "$_password"`
@


1.119
log
@Divorce system hostname handling from network configuration.

Every system has a name, and thus generated keys with that
name, even if there is no currently configured network.

So, ask for a system hostname before configuring the network.

Eliminate /tmp/myname and just keep hostname set to the lastest name
and FQDN.

Construct /etc/myname from hostname as configuration data is being
saved. Construct /etc/hosts (preserving the informative leading comment
from the /etc/hosts file in etcXX.tgx) at the same time.

Construct an appropriate /etc/hosts file even if the network is not
configured.

During upgrade, if the user enables the network using the existing
configuration, don't ask about the domain name - just use the
configured one.

Take care to handle existing /etc/myname files which do not necessarily
have a FQDN.

Originally problem with hostname handling pointed out by beck@@.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.118 2002/09/28 23:35:12 krw Exp $
d353 1
a353 1
install_sets $THESETS
@


1.118
log
@Cleanup/fix/improve question asking.

1) If the user escapes to a shell with '!' or executes a command with
'!foo' at a prompt then repeat the prompt when the shell or command
returns.

2) If ask_which() is passed an empty list of devices , then set resp to
'done' and return. Replaces a couple of checks before calling
ask_which(). Also emit a message about the lack of devices.

3) In ask_which(), delete any trailing blank which rmel() may have
appended to the device list. Replaces a check before calling
ask_which().

4) Remove an unneeded blank line before the 'invalid choice' message
from ask_which().

5) Make the first disk device the default answer when asking for which
disk contains install sets.

A few code/verbiage nits:

1) make _a a local in cutlast().

2) use normal ': ${_defdev:=done}' idiom instead of an or condition in
ask_which.

3) Eliminate an unnecessary blank line/paragraph by putting 3(!)
sentences into a single paragraph when describing process of selecting
install sets.

4) Eliminate another unnecessary blank line between the list of
possible install sources and the question about which one to use.

5) Eliminate another unnecessary blank line before the 'Extract
more sets?' question

6) Eliminate a double blank line after the sanity check error
messages.

ok deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.117 2002/09/25 12:19:12 krw Exp $
a76 3
# The Fully Qualified Domain Name
FQDN=

d318 5
d325 1
a325 1
ask "\nConfigure the network?" y
d329 7
d360 1
a360 1
cfgfiles="fstab hostname.* hosts myname mygate resolv.conf kbdtype sysctl.conf"
d373 2
d376 5
@


1.117
log
@Try to minimize places where suid programs and devices can live
by implementing the rules:

Only '/' is neither nodev nor nosuid. i.e.  it can obviously *always*
contain devices or setuid programs.

Every other mounted filesystem is nodev. If the user chooses to mount
/dev as a separate filesystem, then on the user's head be it.

The only directories that install puts suid binaries into (as of 3.2)
are:

/sbin
/usr/bin
/usr/sbin
/usr/libexec
/usr/libexec/auth
/usr/X11R6/bin

and ports and users can do who knows what to /usr/local and sub
directories thereof.

So try to ensure that only filesystems that are mounted at or above
these directories can contain suid programs. In the case of
/usr/libexec, give blanket permission for subdirectories.

Note that if *all* the above are split into separate filesystems the
install process will attempt a couple of cross-device links when
installing base32.tgz, and fail.

ok deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.116 2002/09/24 01:26:15 krw Exp $
a96 2
		_DKDEVS=${_DKDEVS% }
		[ "$_DKDEVS" ] || break
@


1.116
log
@Rejig addel()/rmel() to keep items on a single line, with blanks
separating items.

This allows a compaction of the displayed lines for device selection.

Customize the device selection routine so the actual device type is
shown (disk or CD-ROM). Rename ask_fordev to ask_which so the
invocations (with device type) read better.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.115 2002/09/22 22:42:25 krw Exp $
d269 44
a312 6
				case $_mp in
				"/")	echo " 1 1" ;;
				"/tmp"|"/var"|"/var/tmp"|"/usr/obj"|"/home") echo ",nosuid,nodev 1 2" ;;
				"/usr") echo ",nodev 1 2" ;;
				*)	echo " 1 2" ;;
				esac
@


1.115
log
@Do not allow install to proceed until root filesystem can be mounted on
$ROOTDEV and ${ROOTDISK}b can be used for swap.  Also shortens output
generated during (successful) install.

Fix problem with upgrade on systems with many disk devices by
automatically creating devices encountered during the fsck'ing of fstab
filesystems. Problem noted by Dethlef Madsen and Nick Nauwelaerts.

Adjust some verbiage in i386 install.md to make it more consistant.

Reformat welcome message to make sure all lines are <80 characters wide.

Minor cleanups.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.114 2002/09/17 12:28:54 krw Exp $
d97 1
d107 1
a107 1
			ask_fordev "Which disk do you wish to initialize?" "$_DKDEVS"
@


1.114
log
@Ruthlessly expunge unnecessary verbiage and whitespace to make sure
the install example will easily fit on the CD insert at some
reasonable font size. Reword many messages and questions for same
reason.

In addition:

1) Add '...done.' to match 'Installing boot block...'

2) During install, after asking which is the root disk, start
initializing it immediately rather than asking again which disk to
work on.

3) Move munged fstab filesystem mounting to *before* network
initialization so that if you bail out during network initialization
and restart you do not have to go through disk initialization again.
Also puts fsck and mount messages close to each other rather than
spitting out the latter just before root password questions.

4) Make 'usr/obj' nosuid,nodev by default, /home nodev by default.

5) For network interfaces only show the complete list of media options
if the user indicates they want to change the default.

6) Move the question about the ftp server supporting passive ftp to
*after* selecting the ftp server where it is more 'rational' and can
easily be made more concise.

7) Don't bother umount'ing filesystems or stopping the dhclient after
a successful install/upgrade. The next step is a reboot after all.

Some minor code tweaks and comment cleanup while in the area.

Tested in recent snapshots. Suggested by & ok deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.113 2002/08/27 02:18:34 krw Exp $
a91 5
	# Prevent the user from choosing anything but the default as the
	# root device. Any attempt to mount '/' anywhere else will
	# trigger a duplicate mount error.
	echo "${ROOTDEV} /" > $FILESYSTEMS

d99 2
d103 2
a118 20
		# Assume $ROOTDEV is the root filesystem, but loop to get the rest.
		# XXX ASSUMES THAT THE USER DOESN'T PROVIDE BOGUS INPUT.
		cat << __EOT

You will now enter the mount point (full path with the leading '/' character)
for each OpenBSD partition in the disklabel for ${DISK}.

__EOT

		if [ "$DISK" = "$ROOTDISK" ]; then
			cat << __EOT
The following partitions will be used for the root filesystem and swap:
	${ROOTDEV}	/
	${ROOTDISK}b	swap

__EOT
		fi

		# XXX - allow the user to name mount points on disks other than ROOTDISK
		#	also allow a way to enter non-BSD partitions (but don't newfs!)
a119 1

d132 4
a135 1
			[ "$_pp" = "$ROOTDEV" ] && continue
d139 1
d141 1
a141 1
			if [ -f /tmp/fstab.$DISK ]; then
d144 2
a145 2
					[[ $_mp == "/" ]] && break
					[[ -n $(grep " $_mp\$" $FILESYSTEMS) ]] && break
d147 4
a150 3
					# If not '/', and not already used on another disk, and
					# not already used on this disk, then the user specified
					# mount point is ok. 
d155 19
a173 1
		done
d175 2
a176 2
		# If there are no partitions, go on to next disk.
		[ $_i -gt 0 ] || continue
d186 1
a186 1
			ask "Mount point for ${_pp} (size=${_ps}k), RET, none or done?" "$_mp"
a262 1
	rm -f /tmp/fstab
@


1.113
log
@Move general partitioning advice from machine dependant per disk
routine to install.sh so it is displayed only once.

Strongly advise /, /tmp, /var, /usr and /home have their own
disk partitions as requested by deraadt@@.

Rather than rely on users not re-selecting an already initialized
disk, just allow them to choose from un-initialized disks.

Move get_root invocation into install.sub as both install.sh and
upgrade.sh did it first thing.

Remove the 'workaround' to a 'vnode aliasing bug' that came in
with the initial import of upgrade.sh from NetBSD. ok millert@@.

Rework verbiage in a few places. Clean up logic around looping
through disk units by handling root disk better.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.112 2002/08/25 02:13:09 krw Exp $
d86 1
a86 1
# If /etc/fstab already exists we skip disk initialization
a91 13
	cat << __EOT


You must now initialize the disks you want to use for OpenBSD. During this
initialization process it is strongly recommended that you create disk
parititions for the following filesystems:

	/, /tmp, /var, /usr, /home

Some of the security features of OpenBSD rely on these filesystems being
mounted on separate partitions.
__EOT

d104 6
a109 2
		ask_fordev "Which disk do you wish to initialize?" "$_DKDEVS"
		[ "$resp" = "done" ] && break
d124 2
a125 4
You will now have the opportunity to enter filesystem information for ${DISK}.
You will be prompted for the mount point (full path, including the prepending
'/' character) for each BSD partition on ${DISK}. Enter "none" to skip a
partition or "done" when you are finished.
a231 1

d236 1
a236 3
The next step will destroy all existing data on these partitions by
creating a new filesystem on each of them.

d260 3
a262 4
	# Sort entries from $FILESYSTEMS by mount point to try and
	# enforce a rational mount order in the /etc/fstab that will
	# be created.
	rm -f $FILESYSTEMS
d267 7
a273 1
				echo "$_pp $_mp" >> $FILESYSTEMS
d277 1
a277 1
	done
d279 1
d282 2
d286 1
a286 9
cat << __EOT

You will now be given the opportunity to configure the network. This will be
useful if you need to transfer the installation sets via FTP, HTTP, or NFS.
Even if you choose not to transfer installation sets that way, this information
will be preserved and copied into the new root filesystem.

__EOT
ask "Configure the network?" y
a291 19
if [ ! -f /etc/fstab ]; then
	# Now that the network has been configured, it is safe to configure the
	# fstab.
	(
		while read _dev _mp; do
			case $_mp in
			"/")	echo /dev/$_dev $_mp ffs rw 1 1;;
			"/tmp"|"/var/tmp") echo /dev/$_dev $_mp ffs rw,nosuid,nodev 1 2;;
			*)	echo /dev/$_dev $_mp ffs rw 1 2;;
			esac
		done
	) < $FILESYSTEMS > /tmp/fstab

	munge_fstab
fi

mount_fs "-o async"

echo '\nPlease enter the initial password that the root account will have.'
d296 1
a296 1
	askpass "Password (will not echo):"
d316 1
a316 1
echo
a317 1
	echo -n "Saving dhclient configuration..."
a324 1
	echo "done."
a327 1
echo -n "Copying... "
a329 1
		echo -n "$file "
@


1.112
log
@More fixes to mount point handling.

1) Correctly sort >10 total partitions.

2) Don't allow user to specify duplicate mount points via
disklabel.

3) Fix mount point checking so that empty mount points
do not confuse logic.

4) Fix mount point checking so that duplicate mount points
from previous disk initialization are correctly detected.

5) Show configured partitions/mount points in partition order
(i.e. sorted by disk and then partition) rather than mount
point order. This seems easier to read to me and reflects the
order of user action. Sort the entries after user approval.

6) Clarify, clean up some verbiage and logic.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.111 2002/08/18 21:05:47 krw Exp $
d86 2
a87 5
# If /etc/fstab already exists we skip disk initialization, but we still
# need to know the root disk.
if [ -f /etc/fstab ]; then
	get_rootdisk
else
d92 21
d114 2
a115 7
		if [ -z "$ROOTDISK" ]; then
			# Get ROOTDISK and default ROOTDEV
			get_rootdisk
			DISK=$ROOTDISK
			echo "${ROOTDEV} /" > $FILESYSTEMS
		else
			cat << __EOT
d117 4
a120 7
Now you can select another disk to initialize. (Do not re-select a disk
you have already entered information for).
__EOT
			ask_fordev "Which disk do you wish to initialize?" "$DKDEVS"
			[ "$resp" = "done" ] && break
			DISK=$resp
		fi
@


1.111
log
@Fix various mount point problems:

1) Fix 'already mounted' checking so a mount point name can be the same
as the leading substring of a previously specified mount point.
Now you can specify /usr after /usr/obj, and since the mount points
are sorted before writing to fstab, it should work.

This also fixes the error message generated when a requested mount
point matches the leading substring of multiple mount points. e.g.
trying to mount '/' again.

2) Fix fstab sorting so that it works across all initialized disks, not
just on a disk by disk basis.

3) For additional paranoia during multiple disk installs, unset _partitions,
_psizes, and _mount_points before processing a disk. Eliminate individual
blanking of _mount_points entries.

4) Shorten/simplify logic by storing ${DISK} in _partitions entries rather
than always adding it back in when referencing _partitions.

5) Rework verbiage a bit, eliminating the duplicate display of configured
devices before making new filesystems.

Some code clean up, eliminating '{}'s, better loops, ifs, etc.

Appox. 67 bytes net bloat.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.110 2002/07/31 13:46:15 krw Exp $
d116 2
a117 1
		md_prep_disklabel ${DISK}
d127 1
a131 1

d159 1
a159 1
			# If the user assigned a mount point, use it.
d161 10
a170 1
				_mount_points[$_i]=`sed -n "s:^/dev/${_pp}[ 	]*\([^ 	]*\).*:\1:p" < /tmp/fstab.$DISK`
a173 1
		rm -f /tmp/fstab.$DISK
a178 1
		echo
d189 1
a189 1
			none)	_mount_points[$_i]=
d193 4
a196 3
			/*)	if [ "$resp" != "$_mp" ]; then	
					# Try to ensure we don't mount something already mounted
					_pp=`grep " $resp\$" $FILESYSTEMS | cutword 1`
d198 4
a201 3
					for _mp in ${_mount_points[*]}; do
						[ "$_mp" = "$resp" ] && \
							_pp=${_partitions[$_j]}
a203 5
					if [ "$_pp" ]; then
						echo "Invalid response: $_pp is already being mounted at $resp."
						continue
					fi
					_mount_points[$_i]=$resp
d205 5
d216 3
a218 1
			: $(( _i += 1 ))
d225 2
a226 15
			_mnt=${_mount_points[$_i]}
			[ "$_mnt" ] && echo "$_pp $_mnt" >> $FILESYSTEMS
			: $(( _i += 1 ))
		done
	done

	# Sort $FILESYSTEMS to try and force a rational mount order.
	_pps=`cat $FILESYSTEMS | cutword 1`
	_mps=`cat $FILESYSTEMS | cutword 2`
	rm -f $FILESYSTEMS
	for _mp in `bsort $_mps`; do
		_i=1
		for _pp in $_pps; do
			[ "$_mp" = "$(echo $_mps | cutword $_i)" ] && \
				echo "$_pp $_mp" >> $FILESYSTEMS
d234 1
a234 1
You have configured the following devices and mount points:
d238 1
a238 1
The next step will destroy all existing data on these devices by
d251 6
a256 2
	# Create a new filesystem on each device.
	for _pp in $_pps; do
d258 18
d277 1
@


1.110
log
@/tmp/fstab.$DISK is created in install.md, so put back references
to it. Fixes mount point prompts during install.

'Improve' an error message.

Noted by todd@@ and jsyn@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.109 2002/07/28 01:14:58 krw Exp $
d146 1
d152 1
a152 1
			_pp=${_p%${_ps}}
d154 1
a154 1
			[ "${DISK}${_pp}" = "$ROOTDEV" ] && continue
d160 1
a160 1
				_mount_points[$_i]=`sed -n "s:^/dev/${DISK}${_pp}[ 	]*\([^ 	]*\).*:\1:p" < /tmp/fstab.$DISK`
d178 1
a178 1
			ask "Mount point for ${DISK}${_pp} (size=${_ps}k), RET, none or done?" "$_mp"
d187 1
a187 1
					_pp=`cat $FILESYSTEMS | grep " $resp" | cutword 1`
d191 1
a191 1
							_pp=${DISK}${_partitions[$_j]}
d210 19
a228 11
		# Now write it out, sorted by mount point
		for _mp in `bsort ${_mount_points[*]}`; do
			_i=0
			while [ $_i -lt ${#_partitions[*]} ] ; do
				if [ $_mp = "${_mount_points[$_i]}" ]; then
					echo "${DISK}${_partitions[$_i]} ${_mount_points[$_i]}" >> ${FILESYSTEMS}
					_mount_points[$_i]=
					break
				fi
				: $(( _i += 1 ))
			done
d234 1
d237 4
a240 1
$(<${FILESYSTEMS})
a241 2
============================================================
The next step will overwrite any existing data on:
a242 7
	(
		echo -n "	"
		while read _device_name _junk; do
			echo -n "$_device_name "
		done
		echo
	) < ${FILESYSTEMS}
d244 1
a244 1
	ask "\nAre you really sure that you're ready to proceed?" n
d252 4
a255 7
	# Loop though the file, place filesystems on each device.
	echo	"Creating filesystems..."
	(
		while read _device_name _junk; do
			newfs -q /dev/r${_device_name}
		done
	) < ${FILESYSTEMS}
d285 1
a285 1
	) < ${FILESYSTEMS} > /tmp/fstab
@


1.109
log
@New feature request by (most recently) drahn@@:

Do not allow the same mountpoint to be specified for >1 disk
partition.

If a mountpoint that has already been specified is entered again an
error message of the form:

Invalid response: sd0a is already being mounted at /var

is emitted. Partitions on both the disk being initialized and
previously initialized disks are checked.

Rework a bit of the logic to simplify and shorten in compensation. e.g.
eliminate references to /tmp/fstab.<disk> as it is never created.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.108 2002/07/21 04:57:01 hugh Exp $
d115 1
d158 3
d163 1
d200 1
a200 1
			*)	echo "mount point must be an absolute path!"
@


1.108
log
@Put a doing...done wrapper around creation of the host.random file
as this takes so long inside simh that people were assuming the
system had hung. Grows install.sh 66 bytes, but krw said ok anyway!
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.107 2002/07/13 16:32:13 krw Exp $
a139 1
		_npartitions=0
d144 2
a145 1
		#       effects to _partitions, _npartitions, etc. would be lost.
d154 2
a155 2
			_partitions[$_npartitions]=$_pp
			_psizes[$_npartitions]=$_ps
d157 1
a157 4
			if [ -f /tmp/fstab.$DISK ]; then
				_mount_points[$_npartitions]=`sed -n "s:^/dev/${DISK}${_pp}[ 	]*\([^ 	]*\).*:\1:p" < /tmp/fstab.${DISK}`
			fi
			: $(( _npartitions += 1 ))
d160 4
a163 1
		# Now prompt the user for the mount points. Loop until "done"
d166 4
a169 5
		resp=
		while [ $_npartitions -gt 0 -a "$resp" != "done" ]; do
			_pp=${_partitions[${_i}]}
			_ps=$(( ${_psizes[${_i}]} / 2 ))
			_mp=${_mount_points[${_i}]}
d172 30
a201 18
			while : ; do
				ask "Mount point for ${DISK}${_pp} (size=${_ps}k), RET, none or done?" "$_mp"
				case $resp in
				/*)	_mount_points[${_i}]=$resp
					break
					;;
				done|"")break
					;;
				none)	_mount_points[${_i}]=
					break
					;;
				*)	echo "mount point must be an absolute path!"
					break
					;;
				esac
			done
			_i=$(( $_i + 1 ))
			[ $_i -ge $_npartitions ] && _i=0
d207 4
a210 4
			while [ $_i -lt $_npartitions ] ; do
				if [ $_mp = "${_mount_points[${_i}]}" ]; then
					echo "${DISK}${_partitions[${_i}]} ${_mount_points[${_i}]}" >> ${FILESYSTEMS}
					_mount_points[${_i}]=
d213 1
a213 1
				_i=$(( ${_i} + 1 ))
a215 1
		rm -f /tmp/fstab.${DISK}
@


1.107
log
@Cleanup/Shrinkage.

1) Eliminate more if's in favour of 'cond || stmt' or
   'cond && stmt' constructs.

2) Global _didnet -> DIDNET, make local _nam a local.

3) Display 'DHCP not supported' error every time user
   specifies 'dhcp' but the client is not present.

4) if if_extra is empty, that's ok, so just assign
   $resp to it whether $resp is empty or not.

5) Check for DIDNET inside donetconfig() instead of
   before each call to donetconfig.

6) Eliminate superfluous 'Aborting' comments, and let
   the user draw their own conclusion from getting the
   'Extract more sets' message.

7) Minor code tweaks like not continually assigning
   $resp to a value in a loop, when all we want is
   the final value, and only displaying 'Skipping'
   message in tape installs if we are actually
   skipping files, etc.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.106 2002/07/13 13:18:05 krw Exp $
d333 1
d336 1
@


1.106
log
@More cleanup/simplification/shrinkage.

1) Factor out inquiring for a device. ask_fordev()
   now does this for root disk determination, other
   disk initialization, install sets disk or cd
   inquiry. Also ensures cd devices are created on
   the fly like disk devices already were, and
   shortens some verbiage.

2) Just ask for root disk if install is skipping
   disk initialization, rather than doing the
   'df /mnt ...' scan, since 1) we just end up asking
   anyway and 2) everything *should* have been
   umount'ed when previous install was finished or
   interrupted.

3) getrootdisk -> get_rootdisk to conform to
   get_<global> naming convention.

4) Add and use new global ROOTDEV rather than
   constantly adding 'a' to ROOTDISK. ROOTDEV
   default is set in get_rootdisk().

5) Put loop inside get_rootdisk rather than
   always putting one around it. If no rootdisk
   found/specified just exit install/update.

6) Eliminate getanotherdisk since ask_fordev()
   does most of the work.

7) Eliminate parameter to check_fs, just use
   ROOTDEV instead.

8) Some typographical and minor code tweaks.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.105 2002/07/01 14:58:42 krw Exp $
d93 1
a93 3
	if [ -f /etc/disktab.shadow ]; then
		cp /etc/disktab.shadow /tmp/disktab.shadow
	fi
@


1.105
log
@Prevent passwords of the form '-X' from being (mis)interpreted as an
option to encrypt, by terminating option list with '--'. This
generated an error during install and left root with a blank password.

Mentioned a couple of months ago by Adrian Close, and
dhartmei@@ prodded me again today.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.104 2002/06/29 20:01:34 krw Exp $
d86 5
a90 1
if [ ! -f /etc/fstab ]; then
d99 2
a100 3
			while [ -z "$ROOTDISK" ]; do
				getrootdisk
			done
d102 1
d104 8
a111 7
			DISK=
			while [ -z "$DISK" ]; do
				getanotherdisk
			done
			if [ "$DISK" = "done" ]; then
				break
			fi
d119 1
a119 2
		# Assume partition 'a' of $ROOTDISK is for the root filesystem.
		# Loop and get the rest.
d133 1
a133 1
	${ROOTDISK}a    /
a136 1
			echo	"${ROOTDISK}a /" > ${FILESYSTEMS}
d154 1
a154 1
			[ "$DISK" = "$ROOTDISK" -a "$_pp" = "a" ] && continue
d191 2
a192 4
			_i=$(( ${_i} + 1 ))
			if [ $_i -ge $_npartitions ]; then
				_i=0
			fi
a241 6
else
	# Get the root device
	ROOTDISK=`df /mnt | sed -e '/^\//!d' -e 's/\/dev\/\([^ ]*\)[a-p] .*/\1/'`
	while [ -z "$ROOTDISK" ]; do
		getrootdisk
	done
@


1.104
log
@Some cleanup/simplification:

1) Put knowledge of /tmp/fstab in munge_fstab rather
   than redirect input on calls. Check in munge_fstab
   whether /etc/fstab was successfully created, and exit
   install/upgrade with appropriate error if not. This
   error condition is therefore checked on install and upgrade.

2) Don't bother specifying value in exit statements - no one
   is checking whether it is 1, 2, or 0.

3) Put status messages inside check_fs rather than around
   invocation, and exit from check_fs if a fsck fails, rather
   than checking return value and exiting.

4) With above changes, simplify munge_fs/check_fs/mount_fs logic in
   upgrade.sh.

5) Various cosmetic cleanups.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.103 2002/06/25 00:31:59 krw Exp $
d334 1
a334 1
_encr=`/mnt/usr/bin/encrypt -b 7 "$_password"`
@


1.103
log
@Complete yet more of the c2k2 initiated changes. In this round:

1) Centralize selection of install/upgrade media rather than ask
   separately for mounted filesystem. Eliminate separate calls
   to get_localdir in install.sh and upgrade.sh. In install.sh
   this call occurred only if a diskless system was detected, which
   millert@@ agreed was a historical relic, i.e. what exactly would
   a diskless workstation be installing to?

2) Check for the presence of any mounted filesystems at the expected
   mount point (/mnt or /mnt2) and emit an error message if none found.

3) Add a '?' option to the pathname question so you can see what
   filesystems are mounted at/below the expected mount point.

4) Rework logic in get_localdir to make flow more logical. e.g. only
   do sane_install() check after the user says to install no more sets;
   if sane_install() fails ask a slightly different question and make
   the default 'y' to install more sets.

5) Rework install_sets() to simplify logic. Don't try to tailor
   list of install media to system, just warn that some may not be
   available and emit useful error messages if the user tries a
   non-available source.

Some verbiage still needs work (amoung other things).

fgsch@@ noticed problems with installing from mounted filesystems, forcing me
to finish these changes.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.102 2002/05/20 16:53:57 krw Exp $
d278 1
a278 1
	munge_fstab < /tmp/fstab
@


1.102
log
@Eliminate md_questions(). It was used only to control the setting of
machdep.allowaperture. Remove the setting of machdep.allowaperture
from md_installboot().

Add MDXAPERTURE variable to relevant architectures.

Add a new function set_machdep_allowaperture(). It is called *after*
install_sets() (which changes when the X Window question is asked), and
if MDXAPERTURE is present modifies sysctl.conf.

Shrinks overall size for i386, macppc, sparc64 (which used md_questions
for machdep.allowaperture) but increases size a bit for other
architectures since set_machep_allowaperture is in install.sub.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.101 2002/05/15 11:54:34 mpech Exp $
a281 12

mount | while read line; do
	set -- $line
	if [ "$3" = "/" -a "$5" = "nfs" ]; then
		echo "You appear to be running diskless."
		ask "Are the install sets on one of your currently mounted filesystems?" n
		case $resp in
		y*|Y*)	get_localdir
			;;
		esac
	fi
done
@


1.101
log
@Insert entry for /var/tmp to /etc/fstab like /tmp one,i.e. nosuid and nodev
Idea from form@@.

millert@@, krw@@ ok
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.100 2002/04/30 04:14:18 krw Exp $
a310 2
md_questions

d313 6
a318 2
# Copy in configuration information and make devices in target root.
cfgfiles="fstab hostname.* hosts myname mygate resolv.conf kbdtype"
@


1.100
log
@Tighten up installed options on /tmp by adding nosuid,nodev.

Suggested by Ian McWilliam. ok deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.99 2002/04/28 20:41:15 krw Exp $
d272 1
a272 1
			"/tmp")	echo /dev/$_dev $_mp ffs rw,nosuid,nodev 1 2;;
@


1.99
log
@Remove superfluous '{}' in variable references that are all alone in a
string. i.e. "${a}" -> "$a". Save the {} form for strings where
variables are mixed with text.

Remove superfluous X's. e.g. "X$resp" = "Xdone" -> "$resp" = "done".

Change last few '[ "$v" = "" ]' or equivalents to '[ -z "$v" ]'.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.98 2002/04/28 14:44:01 krw Exp $
d270 5
a274 5
			if [ "$_mp" = "/" ]; then
				echo /dev/$_dev $_mp ffs rw 1 1
			else
				echo /dev/$_dev $_mp ffs rw 1 2
			fi
@


1.98
log
@Change getresp() into ask().

ask() takes 2 parameters. The first one is the question to
ask the user, and the 2nd is the default answer.

Shrinks and makes the code clearer.

From espie@@ with some tweaking, ok deraadt@@.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.97 2002/04/26 02:14:23 krw Exp $
d94 2
a95 2
		if [ "X${ROOTDISK}" = "X" ]; then
			while [ "X${ROOTDISK}" = "X" ]; do
d101 1
a101 1
			while [ "X${DISK}" = "X" ]; do
d104 1
a104 1
			if [ "${DISK}" = "done" ]; then
d125 1
a125 1
		if [ "${DISK}" = "${ROOTDISK}" ]; then
d221 1
a221 1
			echo -n "${_device_name} "
d244 1
a244 1
	while [ "X${ROOTDISK}" = "X" ]; do
d344 1
a344 1
_encr=`/mnt/usr/bin/encrypt -b 7 "${_password}"`
@


1.97
log
@Improve use of sed in various places, eliminating unnecessary
calls to grep and file redirections.

Eliminate function firstchar(). Rework of partition gathering
code removes the only use.

Remove the usual extraneous 'X's and {}'s in the code being
worked on.

From espie@@ with slight modifications. ok espie@@ millert@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.95 2002/04/12 03:24:02 millert Exp $
d173 1
a173 2
				echo -n "Mount point for ${DISK}${_pp} (size=${_ps}k) [$_mp, RET, none, or done]? "
				getresp "$_mp"
d226 1
a226 2
	echo -n	"\nAre you really sure that you're ready to proceed? [n] "
	getresp n
d259 1
a259 2
echo -n	"Configure the network? [y] "
getresp y
d287 1
a287 2
		echo -n	"Are the install sets on one of your currently mounted filesystems? [n] "
		getresp n
@


1.96
log
@Split out a new function askpass() and as a result
greatly simplify both getresp() and the code around
obtaining passwords. Shrinks, simplifies and
makes the code clearer.

From espie@@.

ok deraadt@@ and espie@@.
@
text
@d140 15
a154 8
		for _p in `disklabel ${DISK} 2>&1 | grep '^ *[a-p]:.*BSD' | sed 's/^ *\([a-p]\): *\([0-9][0-9]*\) .*/\1\2/'`; do
			_pp=`firstchar ${_p}`
			if [ "${DISK}" = "${ROOTDISK}" -a "$_pp" = "a" ]; then
				continue
			fi
			_ps=`echo ${_p} | sed 's/^.//'`
			_partitions[${_npartitions}]=${_pp}
			_psizes[${_npartitions}]=${_ps}
d156 2
a157 2
			if [ -f /tmp/fstab.${DISK} ]; then
				_mount_points[${_npartitions}]=`sed -n "s:^/dev/$DISK$_pp[ 	]*\([^ 	]*\).*:\1:p" < /tmp/fstab.${DISK}`
d159 1
a159 1
			_npartitions=$(( ${_npartitions} + 1 ))
d165 2
a166 2
		resp=X
		while [ $_npartitions -gt 0 -a X${resp} != X"done" ]; do
@


1.95
log
@Sort mount points when generating fstab file.  This prevents problems
when people specify, e.g. /usr/local before /usr.  deraadt@@ OK
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.94 2002/04/12 02:24:40 deraadt Exp $
d297 1
a297 5
	echo -n "Password (will not echo): "
	stty -echo
	getresp -n
	stty echo
	echo
d300 2
a301 6
	echo -n "Password (again): "
	stty -echo
	getresp -n
	stty echo
	echo
	if [ "${_password}" != "${resp}" ]; then
@


1.94
log
@kbd setting code for the installer.  smat@@acm.org, miod, and krw.  Minimal
last minute tweaks to it by me, but you can trust me, right?
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.93 2002/04/09 01:01:19 krw Exp $
d188 11
a198 8
		# Now write it out
		_i=0
		while [ $_i -lt $_npartitions ] ; do
			if [ -n "${_mount_points[${_i}]}" ]; then
				echo "${DISK}${_partitions[${_i}]} ${_mount_points[${_i}]}" >> ${FILESYSTEMS}
				_mount_points[${_i}]=
			fi
			_i=$(( ${_i} + 1 ))
@


1.93
log
@More reorganizations, fixes and shrinkage.

a) Make [ -z "$var" ] standard idiom, replacing
   many variants on [ X"$var" = X"" ].

b) Factor out three large chunks of repeated code
   for finding sets, getting user to select sets
   and then installing the sets. This creates
   get_sets_list(), get_get_files_list() and
   install_get_files_list().

c) Eliminate unneeded dir_has_sets() function.

d) Indent last large functions that were not
   properly indented.

e) Replace most if not all 'test' invocations
   with [], replacing a few if statements along
   the way.

f) Use ${MODE} a lot more to make messages appear
   more relevant to process.

g) Fix erroneous display of $local_sets_dir so
   the error for a non-existant dir actually displays
   the user input, not an empty string.

h) Eliminate the 'list' option in selecting sets. It
   was not possible to actually select anything except
   what was already displayed, so bring verbiage and
   options into line with code.

i) Replace a number of '\"' and "\'" with just plain
   's or "s as appropriate.

j) Replace ".  " with ". ".

k) Use some more "OpenBSD {$VERSION_MAJOR}.${VERSION_MINOR}"
   to make more messages correct and current.

l) Various typos fixed.

Net shrinkage approximately 2K.

ok millert@@ deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.92 2002/04/05 02:51:59 krw Exp $
d318 1
a318 1
cfgfiles="fstab hostname.* hosts myname mygate resolv.conf"
@


1.92
log
@Abstract out common startup and finishing code from install.sh
and upgrade.sh, putting it into install.sub.

Replace groups of echo's with here documents.

Eliminate bare echo's with embedded \n's.

Abstract repeated verbiage into display_* functions, also eliminating
a backslash orgy when showing the ftp/http server location. This
also makes the verbiage consistant across ftp, cd, etc. installs.

Try hard to make file selection screen fit on one screen.

Fix default in 'File name?' prompt so it contains the first
non-selected set.

Some minor wording adjustment, typos, etc.

Net shrinkage of about 1.5K.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.91 2002/04/02 01:25:34 krw Exp $
d110 1
a110 1
		# and labeling additional disks.  This is machine-dependent since
d121 1
a121 1
'/' character) for each BSD partition on ${DISK}.  Enter "none" to skip a
d155 1
a155 1
		# Now prompt the user for the mount points.  Loop until "done"
d190 1
a190 1
		while test $_i -lt $_npartitions; do
d245 1
a245 1
You will now be given the opportunity to configure the network.  This will be
d293 1
a293 1
while [ "X${resp}" = X"" ]; do
d326 4
a329 2
	# Don't install mygate for dhcp installations
	cfgfiles=`echo $cfgfiles | sed -e 's/ mygate//'`
@


1.91
log
@Do not copy /etc/mygate to install'ed systems if dhcp is specified
for one or more network interfaces.

Rework timezone logic to shrink it and make it more clear. Don't
bother checking for /usr/share/zoneinfo as it is never there, just
look for /mnt/usr/share/zoneinfo.

Eliminate spurious early call to get_timezone() that
(accidentally?)  made GMT the default timezone during
installs. Instead rely on the /etc/localtime that is installed
from etcXX.gz. Currently this means the default timezone is the
historically resonant US/Pacific.

Ideas if not code details ok deraadt@@ and millert@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.90 2002/03/31 15:30:42 krw Exp $
d80 1
d83 1
a83 17
# include machine-dependent functions
# The following functions must be provided:
#	md_get_diskdevs()	- return available disk devices
#	md_get_cddevs()		- return available CD-ROM devices
#	md_get_partition_range() - return range of valid partition letters
#	md_installboot()	- install boot-blocks on disk
#	md_prep_disklabel()	- label the root disk
#	md_welcome_banner()	- display friendly message
#	md_not_going_to_install() - display friendly message
#	md_congrats()		- display friendly message
#	md_native_fstype()	- native filesystem type for disk installs
#	md_native_fsopts()	- native filesystem options for disk installs

# include machine dependent subroutines
. install.md

# include common subroutines
a85 33
# Cleanup when the script exits.
trap 'cleanup_on_exit' EXIT
trap 'exit 2' HUP INT QUIT TERM

if [ ! -f /etc/fstab ]; then
	# Good {morning,afternoon,evening,night}.
	echo ==================================================
	md_welcome_banner
else
	echo "You seem to be trying to restart an interrupted installation!"
	echo
	echo "You can try to skip the disk preparation steps and continue,"
	echo "otherwise you should reboot the miniroot and start over..."
	echo -n "Skip disk initialization? [n] "
	getresp n
	case $resp in
	y*|Y*)	echo
		echo "Cool!  Let's get to it..."
		echo
		;;
	*)	md_not_going_to_install
		exit
		;;
	esac
fi

echo "You can run a shell command at any prompt via '!foo'"
echo "or escape to a shell by simply typing '!'."
echo

# Deal with terminal issues
md_set_term

d126 1
a126 4
			echo
			echo	"The following partitions will be used for the root filesystem and swap:"
			echo	"	${ROOTDISK}a	/"
			echo	"	${ROOTDISK}b	swap"
d128 5
d200 9
a208 7
	echo
	echo	"You have configured the following devices and mount points:"
	echo
	cat ${FILESYSTEMS}
	echo
	echo "============================================================"
	echo "The next step will overwrite any existing data on:"
a215 1
	echo
d217 1
a217 1
	echo -n	"Are you really sure that you're ready to proceed? [n] "
d289 1
a289 2
echo
echo 'Please enter the initial password that the root account will have.'
a341 15
# Get timezone info
get_timezone

# Make devices
if [ ! -x /mnt/dev/MAKEDEV ]; then
	echo "No /dev/MAKEDEV installed, something is wrong here..."
	exit
fi

echo -n "Making all device nodes (by running /dev/MAKEDEV all) ..."
cd /mnt/dev
sh MAKEDEV all
echo "... done."
cd /

a342 1
md_installboot ${ROOTDISK}
a351 11
populateusrlocal
test -x /mnt/install.site && /mnt/usr/sbin/chroot /mnt /install.site

# Unmount filesystems, etc. and disable trap that would do same on exit.
# Do this manually rather than through the trap so md_congrats is
# the last message printed.
trap - HUP INT QUIT TERM EXIT
cleanup_on_exit

# Pat on the back.
md_congrats
d353 2
a354 2
# ALL DONE!
exit 0
@


1.90
log
@naddy@@ pointed out that in the two situations

case WORD

and

var=WORD

Bourne and related/descendant shells such as our sh do *not* do
field splitting or globbing on WORD. Thus we can eliminate a large
number of unnecessary '"'s in case statements and variable
assignments.

This is a lightly adapted version of naddy's diff, to take account
of changes in the scripts since he generated it.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.89 2002/03/31 03:05:04 krw Exp $
a133 3
# Get timezone info
get_timezone

d364 2
d367 10
d378 2
a379 2
echo -n "Copying "
for file in fstab hostname.* hosts myname mygate resolv.conf; do
d388 2
a389 20
if [ -f /etc/dhclient.conf ]; then
	echo -n "Saving dhclient configuration..."
	cat /etc/dhclient.conf >> /mnt/etc/dhclient.conf
	echo "lookup file bind" > /mnt/etc/resolv.conf.tail
	cp /var/db/dhclient.leases /mnt/var/db/.
	echo "done."
fi

# If no zoneinfo on the installfs, give them a second chance
if [ ! -e /usr/share/zoneinfo ]; then
	get_timezone
fi
if [ ! -e /mnt/usr/share/zoneinfo ]; then
	echo "Cannot install timezone link."
else
	echo "Installing timezone link."
	rm -f /mnt/etc/localtime
	ln -s /usr/share/zoneinfo/$TZ /mnt/etc/localtime
fi

d391 1
@


1.89
log
@This omnibus diff does a number of cleanups:

1) Move the 'executed' code at the top of install.sub
   to the end, so that it can successfully use .md
   functions.

2) Get _DKDEVS once only, and get _CDDEVS at the same
   time (see (1))

3) Clean up calls to getresp so that
      a) no '"'s used on constants
      b) '"'s always used for variables
      c) never use {} for variables
      d) ensure parameter passed matches default shown
         in any preceeding []

4) Try to put '"'s around directory names

5) Replace a couple of instances of using []s around
   a prompt comment instead of ()s

6) Reduce some code by putting $_DKDEVS inside
   here documents, rather than echo'ing it

7) eliminate an unused variable _directory

8) eliminate a couple of while RESP="" loops which
   never loop because a non-null default is provided
   to getresp

9) move some code into mount_a_disk to make logic
   clearer

10) eliminate a couple of extra blanks in prompts

11) eliminate ALLSETS and UPGRSETS by just removing
    'etc' from THESETS in upgrade.sh

12) Indent a couple of smaller functions

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.88 2002/03/30 01:29:18 deraadt Exp $
d75 1
a75 1
FILESYSTEMS="/tmp/filesystems"
d80 1
a80 1
MODE="install"
d116 1
a116 1
	case "$resp" in
d217 12
a228 8
				case "X${resp}" in
				X/*)	_mount_points[${_i}]=$resp
					break ;;
				Xdone|X)
					break ;;
				Xnone)	_mount_points[${_i}]=
					break;;
				*)	echo "mount point must be an absolute path!";;
d267 1
a267 1
	case "$resp" in
d301 1
a301 1
case "$resp" in
d330 1
a330 1
		case "$resp" in
d339 1
a339 1
_oifs="$IFS"
d348 1
a348 1
	_password="$resp"
d360 1
a360 1
IFS="$_oifs"
@


1.88
log
@shrink 599 more bytes:  cleanups to "case" and such; ok krw
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.87 2002/03/30 00:50:57 krw Exp $
a104 3
# which sets?
THESETS="$ALLSETS $MDSETS"

d115 1
a115 1
	getresp "n"
d262 1
a262 1
	getresp "n"
d296 1
a296 1
getresp "y"
d325 1
a325 1
		getresp "n"
d341 1
a341 1
	getresp -n ""
d348 1
a348 1
	getresp -n ""
@


1.87
log
@Squeeze a few bytes out of the installation scripts by using
standard __EOT as here document delimiter.

Remove unnecessary escaping of __EOT.

Could be/Should be extended to .md scripts and other non-miniroot
architectures.

Concept approved a *long* time ago by deraadt@@ and millert@@ but
never got out of my tree.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.86 2002/03/19 12:16:13 krw Exp $
d120 7
a126 9
		y*|Y*)
			echo
			echo "Cool!  Let's get to it..."
			echo
			;;
		*)
			md_not_going_to_install
			exit
			;;
d221 7
a227 7
					X/*)	_mount_points[${_i}]=$resp
						break ;;
					Xdone|X)
						break ;;
					Xnone)	_mount_points[${_i}]=
						break;;
					*)	echo "mount point must be an absolute path!";;
d267 4
a270 6
		y*|Y*)
			;;
		*)
			echo "ok, try again later..."
			exit
			;;
d301 2
a302 5
	y*|Y*)
		donetconfig
		;;
	*)
		;;
d330 2
a331 5
			y*|Y*)
				get_localdir
				;;
			*)
				;;
@


1.86
log
@Save more dhclient configuration info during installation.

In particular

a) save dhclient.leases so the lease obtained during installation
is retained.

b) create /etc/resolv.conf.tail with 'lookup file bind' so that
the resolv.conf files created by dhclient have the same settings
as the default resolv.conf we install. i.e. use the /etc/hosts
file before trying bind.

ok millert@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.85 2002/03/17 03:04:47 krw Exp $
d173 1
a173 1
		cat << __get_filesystems_1
d179 1
a179 1
__get_filesystems_1
d294 1
a294 1
cat << \__network_config_1
d301 1
a301 1
__network_config_1
@


1.85
log
@Examine correct fields in mount(8) output to determine if root
is nfs mounted, i.e. install is running on a diskless machine.

ok millert@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.84 2002/03/04 13:59:52 krw Exp $
d389 1
a389 1
	echo -n "Modifying dhclient.conf..."
d391 3
@


1.84
log
@Update Copyright(c)'s to 2002
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.83 2002/03/03 00:43:37 krw Exp $
d332 1
a332 1
	if [ "$2" = "/" -a "$3" = "nfs" ]; then
@


1.83
log
@Cleanup/Improve trap handling.

a) Add /var/run to the filesystem created when the installation media
   boots. This allows the creation and use of the dhclient.pid file.
   Synchronize all mtree.conf files in architectures using miniroot.

b) Rework the traps used in upgrade.sh and install.sh so that HUP,
   INT, QUIT, TERM and EXIT all invoke a cleanup function that kills an
   active dhclient, unmounts all filesystems and fsck's -p all devices
   in /etc/fstab, or just /mnt if /etc/fstab is not present.

c) Make sure the actions of the cleanup function are visible, thus
   eliminating the long delay with no feedback at the end of the
   upgrade/install script, after the congratulatory message.

d) Reduce manual parsing of fstab files by using umount -a to
   unmount all mounted filesystems.

e) Since the new cleanup function tries to unmount all filesystems,
   use the presence of /etc/fstab, rather than a difference between
   `df /` and `df /mnt`, to determine if an install is being restarted
   in a state where disk initialization can be skipped.

f) Change munge_fs, check_fs, mount_fs, remount_fs so that they
   all 'know' about /etc/fstab rather than passing the same
   parameter in all the time.

g) Use input redirection on munge_fs to read correct file, rather
   than passing a file name as a parameter.

h) Indent code for various smaller functions.

i) Eliminate some subshell usage to simplify code further.

j) Display pretty messages during fsck -p to clearly indicate success
   or failure of fsck, rather than just dumping fsck output.

k) Always run mount_fs in install.sh, even if disk initialization is
   being skipped, because the trap should have unmounted all filesystems
   when the last run terminated.

ok weingart@@ millert@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.82 2001/12/23 16:54:04 krw Exp $
d5 1
a5 1
# Copyright (c) 1997-2001 Todd Miller, Theo de Raadt, Ken Westerback
@


1.82
log
@Some minor typographical adjustments:

a) Indent encode_for_url() in install.sub with tabs not spaces
b) delete a couple of extra blank lines
c) delete a few unnecessary ';'s at the end of lines
d) delete a few unnecessary '"'s around values assigned to resp (e.g.
   'resp="X"' to 'resp=X'
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.81 2001/11/25 19:40:51 krw Exp $
a79 2
trap "umount /tmp > /dev/null 2>&1" 0

d101 4
d108 1
a108 1
if [ "`df /`" = "`df /mnt`" ]; then
d142 1
a142 1
if [ "`df /`" = "`df /mnt`" ]; then
d312 1
a312 1
if [ "`df /`" = "`df /mnt`" ]; then
d325 1
a325 2
	munge_fstab /tmp/fstab /tmp/fstab.shadow
	mount_fs /tmp/fstab.shadow "-o async"
d328 2
d417 1
a417 1
remount_fs /tmp/fstab.shadow
d431 5
a435 1
unmount_fs /tmp/fstab.shadow
@


1.81
log
@Add capability to accept & correctly process a root password with
trailing spaces during install.

Do not make the previously entered first password value the default
value if passwords do not match the first time.

Update Copyright (ok deraadt@@).
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.80 2001/11/18 22:48:58 krw Exp $
a129 1

d210 1
a210 1
		resp="X"
@


1.80
log
@Purge more (last?) comments from install scripts by removing all
comments that, being on the end of code lines, cannot be stripped
automatically.

Just delete unhelpful ones, and move the rest onto separate lines
where they can be stripped.

Also remove a duplicated initialization of ROOTDISK.

In total, reduces script size on floppy by 1117 bytes, making room
for coming improvements.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.79 2001/10/14 02:35:57 millert Exp $
d5 1
a5 1
# Copyright (c) 1997,1998 Todd Miller, Theo de Raadt
d346 2
d352 1
a352 1
	getresp -n "${_password}"
d367 1
d418 1
a418 1
_encr=`echo "${_password}" | /mnt/usr/bin/encrypt -b 7`
@


1.79
log
@Use double quotes around the password variable--should close PR 2114
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.78 2001/06/23 19:44:45 deraadt Exp $
d73 6
a78 2
FILESYSTEMS="/tmp/filesystems"		# used throughout
FQDN=					# domain name
a343 1
resp=		# force one iteration
d346 1
@


1.78
log
@argh.  stop using kernfs, using dmesg using sysctl.  encode ARCH into
install.md at build time.  remove some crud.  and the icing on the cake:
skip testing all this until next week
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.77 2001/04/20 01:55:51 krw Exp $
d349 1
a349 1
	_password=$resp
d411 1
a411 1
_encr=`echo ${_password} | /mnt/usr/bin/encrypt -b 7`
@


1.77
log
@Cleanup, new features, shrinkage.

Remove chunk of commented out, unused code.

Add _didnet=1 to enable_network() so that ftp upgrade
does not ask for network information it already has.

Tell a user that selects the http installation method
that the files will be downloaded via http.

Suppress all 'softdep' options in fstab_shadow so
there are no warnings when the filesystems are
mounted.

Suppress all non-ffs (including nfs, ufs) filesystems
from fstab_shadow. Ufs was never used to install
OpenBSD.

Suppress all 'noauto' filesystems from fstab_shadow.

Reword some comments and messages, esp. the one
just before the offer to edit fstab. Punch up the
fact that the fstab will not be saved, mention
that non-ffs and noauto filesystems will be
ignored.

Move

   /usr/X11R6/lib/X11/{rstart,twm,xkb,xsm,xinit}

directories to

   /usr/X11R6/lib/X11/XF3{rstart,twm,xkb,xsm,xinit}

and replace with links. Links can be overwritten
during upgrade. Directories can't. This enables the
upgrade from XFree86 3.x to XFree86 4.x.

ok deraadt@@ millert@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.76 2001/04/16 19:43:27 krw Exp $
a91 2
#	md_makerootwritable()	- make root writable (at least /tmp)
#	md_machine_arch()	- get machine architecture
a135 10

# Make sure we can write files (at least in /tmp)
# This might make an MFS mount on /tmp, or it may
# just re-mount the root with read-write enabled.
if [ "`df /`" = "`df /tmp`" ]; then
	md_makerootwritable
fi

# Get the machine architecture (must be done after md_makerootwritable)
ARCH=`md_machine_arch`
@


1.76
log
@Fix a couple of nits: delete some unnecessary commas and
only print a 'Done.' for fsck'ing if fsck'ing is actually
attempted.

ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.75 2001/03/26 14:46:55 todd Exp $
a330 25

# XXX We no longer do the following. It is not necessary. It can be done
# XXX after the install is complete.
#
#	echo	"The fstab is configured as follows:"
#	echo
#	cat /tmp/fstab
#	cat << \__fstab_config_1
#
#You may wish to edit the fstab.  You may also wish to take this opportunity to
#place NFS mounts in the fstab  (this would be especially useful if you plan to
#keep '/usr' on an NFS server.
#__fstab_config_1
#	echo -n	"Edit the fstab with ${EDITOR}? [n] "
#	getresp "n"
#	case "$resp" in
#		y*|Y*)
#			${EDITOR} /tmp/fstab
#			;;
#
#		*)
#			;;
#	esac
#
#	echo
@


1.75
log
@spelling
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.74 2000/06/16 03:19:42 deraadt Exp $
d409 1
a409 1
		echo -n "$file, "
d414 1
a414 1
echo " ...done."
@


1.74
log
@ssl package no longer needed (will be tested)
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.73 2000/06/01 21:01:28 millert Exp $
d73 1
a73 1
FILESYSTEMS="/tmp/filesystems"		# used thoughout
d332 1
a332 1
# XXX We no longer do the following. It is not neccessary. It can be done
@


1.73
log
@Add missing -n flag to getresp; noted by maurice@@ivo.ig.net
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.72 2000/05/07 17:08:26 millert Exp $
a401 76

# XXX
# XXX should loop until successful install or user abort
# XXX
if [ X"$ssl" != X1 ]; then
	resp=
	while [ X"${resp}" = X ]; do
		echo
		echo "Two OpenBSD libraries (libssl and libcrypto, based on OpenSSL) implement many"
		echo "cryptographic functions which are used by OpenBSD programs like ssh, httpd, and"
		echo "isakmpd.  Due to patent licensing reasons, those libraries may not be included"
		echo "on the CD -- instead the base distribution contains libraries which have had"
		echo "the troublesome code removed -- the programs listed above will not be fully"
		echo "functional as a result.  Libraries which _include_ the troublesome routines"
		echo "are available and can be FTP installed, as long as you meet the follow (legal)"
		echo "criteria:"
		echo "  (1) Outside the USA, no restrictions apply. Use ssl${VERSION}.tar.gz."
		echo "  (2) Inside the USA, non-commercial entities may install sslUSA${VERSION}.tar.gz."
		echo "  (3) Commercial entities in the USA are left in the cold, due to how the"
		echo "      licences work.  (This is how the USA crypto export policy feels to the"
		echo "      rest of the world.)"
		echo ""
		echo "If you do not install the ssl package now, it is easily installed at"
		echo "a later time (see the afterboot(8) and ssl(8) manual pages)."
		echo -n "Install (U)SA, (I)nternational, or (N)one? [none] "

		getresp none
		case "$resp" in
		u*|U*)
			THESETS=sslUSA
			;;
		i*|I*)
			THESETS=ssl
			;;
		n*|N*)
			echo "Not installing SSL+RSA shared libraries."
			THESETS=
			;;
		*)
			echo "Invalid response: $resp"
			resp=
			;;
		esac
	done
	if [ X"$THESETS" != X ]; then
		resp=
		while [ X"${resp}" = X ]; do
			echo -n "Install SSL+RSA libraries via (f)tp, (h)ttp, or (c)ancel? [ftp] "
			getresp ftp
			case "$resp" in
			f*|F*)
				# configure network if necessary
				test -n "$_didnet" || donetconfig

				install_url -ftp -reuse -minpat ${THESETS}'[0-9]*'
				resp=f
				;;
			h*|H*)
				# configure network if necessary
				test -n "$_didnet" || donetconfig

				install_url -http -reuse -minpat ${THESETS}'[0-9]*'
				resp=h
				;;
			c*|C*)
				echo "Not installing SSL+RSA shared libraries."
				;;
			*)
				echo "Invalid response: $resp"
				resp=
				;;
			esac
		done
	fi
	echo
fi
@


1.72
log
@Add -n flag to getresp, indicating shell escapes are not to be allowed
Don't show gre interfaces when prompting user for an ether device
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.71 2000/04/30 19:10:01 millert Exp $
d390 1
a390 1
	getresp ""
@


1.71
log
@If the site tarball included a file /install.site (upgrade.site if we
are upgrading not installing) then execute it chroot'd to /mnt.
This allows people to customize the install procedure in a simple
yet flexible manner.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.70 2000/03/19 01:14:03 espie Exp $
d383 1
a383 1
	getresp "${_password}"
@


1.70
log
@populateusrlocal: create the right hierarchy under /usr/local
right before unmounting the new system.
Beats having mtree files around every package...
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.69 1999/10/16 19:01:21 deraadt Exp $
d533 1
@


1.69
log
@in any situation where network config is needed, if the network is not configured, configure it then
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.68 1999/10/15 16:55:00 millert Exp $
d532 1
@


1.68
log
@o Support separate USA and International versions of libssl
o add support for passing in wildcards to designate what should
  get pre-selected in the file selector and use it for libssl.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.67 1999/10/15 15:16:01 deraadt Exp $
d313 1
a313 137
		resp=		# force at least one iteration
		_nam=
		if [ -f /tmp/myname ]; then
			_nam=`cat /tmp/myname`
		fi
		while [ "X${resp}" = X"" ]; do
			echo -n "Enter system hostname (short form, ie. \"foo\"): [$_nam] "
			getresp "$_nam"
		done
		hostname $resp
		echo $resp > /tmp/myname

		resp=		# force at least one iteration
		if [ -f /tmp/resolv.conf ]; then
			FQDN=`grep '^domain ' /tmp/resolv.conf | \
			    sed -e 's/^domain //'`
		fi
		while [ "X${resp}" = X"" ]; do
			echo -n "Enter DNS domain name (ie. \"bar.com\"): [$FQDN] "
			getresp "$FQDN"
		done
		FQDN=$resp

		echo
		echo "If you have any devices being configured by a DHCP server"
		echo "it is recommended that you do not enter a default route or"
		echo "any name servers."
		echo

		configurenetwork

		resp=`route -n show |
		    grep '^default' |
		    sed -e 's/^default          //' -e 's/ .*//'`
		if [ "X${resp}" = "X" ]; then
			resp=none
			if [ -f /tmp/mygate ]; then
				resp=`cat /etc/mygate`
				if [ "X${resp}" = "X" ]; then
					resp="none";
				fi
			fi
		fi
		echo -n "Enter IP address of default route: [$resp] "
		getresp "$resp"
		if [ "X${resp}" != X"none" ]; then
			route delete default > /dev/null 2>&1
			if route add default $resp > /dev/null ; then
				echo $resp > /tmp/mygate
			fi
		fi

		resp="none"
		if [ -f /etc/resolv.conf ]; then
			resp=
			for n in `grep '^nameserver ' /etc/resolv.conf | \
			    sed -e 's/^nameserver //'`; do
				if [ "X${resp}" = "X" ]; then
					resp="$n"
				else
					resp="$resp $n"
				fi
			done
		elif [ -f /tmp/resolv.conf ]; then
			resp=
			for n in `grep '^nameserver ' /tmp/resolv.conf | \
			    sed -e 's/^nameserver //'`; do
				if [ "X${resp}" = "X" ]; then
					resp="$n"
				else
					resp="$resp $n"
				fi
			done
		fi
		echo -n	"Enter IP address of primary nameserver: [$resp] "
		getresp "$resp"
		if [ "X${resp}" != X"none" ]; then
			echo "search $FQDN" > /tmp/resolv.conf
			for n in `echo ${resp}`; do
				echo "nameserver $n" >> /tmp/resolv.conf
			done
			echo "lookup file bind" >> /tmp/resolv.conf

			echo -n "Would you like to use the nameserver now? [y] "
			getresp "y"
			case "$resp" in
				y*|Y*)
					cp /tmp/resolv.conf \
					    /tmp/resolv.conf.shadow
					;;

				*)
					;;
			esac
		fi

		if [ ! -f /tmp/resolv.conf.shadow ]; then 
			echo
			echo "The host table is as follows:"
			echo
			cat /tmp/hosts
		cat << __hosts_table_1

You may want to edit the host table in the event that you are doing an
NFS installation or an FTP installation without a name server and want
to refer to the server by name rather than by its numeric ip address.
__hosts_table_1
			echo -n "Would you like to edit the host table with ${EDITOR}? [n] "
			getresp "n"
			case "$resp" in
				y*|Y*)
					${EDITOR} /tmp/hosts
					;;
	
				*)
					;;
			esac
		fi

		cat << \__network_config_2

You will now be given the opportunity to escape to the command shell to do
any additional network configuration you may need.  This may include adding
additional routes, if needed.  In addition, you might take this opportunity
to redo the default route in the event that it failed above.
__network_config_2
		echo -n "Escape to shell? [n] "
		getresp "n"
		case "$resp" in
			y*|Y*)
				echo "Type 'exit' to return to install."
				sh
				;;

			*)
				;;
		esac
d454 1
a454 1
				test -n "$_ifs" && configurenetwork
d461 1
a461 1
				test -n "$_ifs" && configurenetwork
@


1.67
log
@typo
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.66 1999/10/14 17:29:04 deraadt Exp $
d562 1
d564 1
a564 2
		echo -n "Install SSL+RSA libraries now via (f)tp, (h)ttp, or (n)ot? [$resp] "
		getresp "$resp"
d566 2
a567 7
		f*|F*)
			# configure network if necessary
			test -n "$_ifs" && configurenetwork

			THESETS=ssl
			install_url -ftp -reuse
			resp=f
d569 1
a569 4
		h*|H*)
			# configure network if necessary
			test -n "$_ifs" && configurenetwork

a570 2
			install_url -http -reuse
			resp=h
d574 1
d582 30
@


1.66
log
@libssl*.t*z -> ssl*.t*z
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.65 1999/10/14 17:19:42 deraadt Exp $
d560 1
a560 1
		echo "If you do not install the ssl package now, it is easily installed at
@


1.65
log
@flesh out ssl messages
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.64 1999/10/14 17:17:46 millert Exp $
d542 1
a542 1
if [ X"$libssl" != X1 ]; then
d554 2
a555 2
		echo "  (1) Outside the USA, no restrictions apply. Use libssl${VERSION}.tar.gz."
		echo "  (2) Inside the USA, non-commercial entities may install libsslUSA${VERSION}.tar.gz."
d560 1
a560 1
		echo "If you do not install the libssl package now, it is easily installed at
d570 1
a570 1
			THESETS=libssl
d578 1
a578 1
			THESETS=libssl
@


1.64
log
@o When doing an ftp/http install where all the info has already been entered
  give the user the option of just using the old info instead of re-prompting.
o Do network setup before grabbing libssl via ftp/http if it has not
  already been setup.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.63 1999/10/08 03:54:13 millert Exp $
d546 17
a562 5
		echo "The SSL libraries included with the CD do not contain RSA code"
		echo "for licensing reasons.  Instead, enhanced SSL shared libraries"
		echo "with RSA code are available on ftp and http sites.  If you do"
		echo "not install the SSL+RSA libraries right now, they are easily"
		echo "installed later."
@


1.63
log
@When making timezone link just say what it is doing, don't say
"doing...done" since it takes no noticable time...
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.62 1999/09/25 22:48:45 deraadt Exp $
a539 3
# XXX should test if network is configured
# XXX should provide a way to configure the network this late.
# XXX should re-use more data from previous (ftp) install?
a541 2
# XXX
# XXX
d555 3
d559 1
a559 1
			install_url ftp
d563 3
d567 1
a567 1
			install_url http
@


1.62
log
@no default
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.61 1999/09/23 21:33:43 aaron Exp $
d604 1
a604 1
	echo "Cannot install timezone link..."
d606 1
a606 1
	echo -n "Installing timezone link..."
a608 1
	echo "done."
@


1.61
log
@Formatting, typo, and grammar fixes.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.60 1999/09/23 19:02:20 deraadt Exp $
d557 1
a557 1
		getresp "n"
@


1.60
log
@first cut at ssl chroot package install
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.58 1999/09/03 18:55:29 deraadt Exp $
d552 1
a552 1
		echo "for licencing reasons.  Instead, enhanced SSL shared libraries"
@


1.59
log
@various printing nits
@
text
@d539 42
@


1.58
log
@md_questions() interface allows asking questions before sets
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.56 1999/08/15 09:53:36 millert Exp $
a107 1
	echo -n "Proceed with installation? [n] "
d114 12
a126 15
getresp "n"
case "$resp" in
	y*|Y*)
		echo
		echo "Cool!  Let's get to it..."
		echo
		echo "You can run a shell command at any prompt via '!foo'"
		echo "or escape to a shell by simply typing '!'."
		echo
		;;
	*)
		md_not_going_to_install
		exit
		;;
esac
d128 4
a131 2
# XXX Work around vnode aliasing bug (thanks for the tip, Chris...)
ls -l /dev > /dev/null 2>&1
d540 1
d542 1
d545 1
a545 1
		echo -n "Copying $file..."
a547 1
		echo "done."
d550 1
@


1.57
log
@remove a question
@
text
@d537 2
@


1.56
log
@o When clearing a variable, do ``foo='', not ``foo=""'' to save 2 bytes.
  There are other places where double quotes are used unnecessarily as well
o Kill md_copy_kernel() and check_kernel() since the kernel is now a 'set'
o Add support for shell escapes from any prompt
o Consolidate post-install_sets sanity checks and put them in sane_install().
o install_sets() now calls sane_install() to do the sanity checks and won't
  let you continue until things are sane (as far as it can determine).
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.55 1999/07/30 00:31:27 deraadt Exp $
a262 12
	echo
	echo	"Filesystems will now be created on these devices."
	echo 	"If you made any mistakes, you may edit this now."
	echo -n	"Edit using ${EDITOR}? [n] "
	getresp "n"
	case "$resp" in
		y*|Y*)
			${EDITOR} ${FILESYSTEMS}
			;;
		*)
			;;
	esac
@


1.55
log
@leave async mode before installboot is run...
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.54 1999/07/19 00:57:46 deraadt Exp $
d74 1
a74 1
FQDN=""					# domain name
a81 1
#	md_copy_kernel()	- copy a kernel to the installed disk
d120 5
a124 1
		echo	"Cool!  Let's get to it..."
d165 1
a165 1
			DISK=""
d252 1
a252 1
				_mount_points[${_i}]=""
d327 2
a328 2
		resp=""		# force at least one iteration
		_nam=""
d339 1
a339 1
		resp=""		# force at least one iteration
d381 1
a381 1
			resp=""
d391 1
a391 1
			resp=""
d527 1
a527 1
resp=""		# force one iteration
d545 1
a545 1
		resp=""
a550 2
md_copy_kernel

a551 12

if [ ! -d /mnt/etc -o ! -d /mnt/usr/share/zoneinfo -o ! -d /mnt/dev ]; then
	echo "Something needed to complete the installation seems"
	echo "to be missing, did you forget to extract a required set?"
	echo
	echo "Please review the installation notes and try again..."
	echo
	echo "You *may* be able to correct the problem and type 'install'"
	echo "without having to extract all of the distribution sets again."
	exit
fi

@


1.54
log
@create /var/db/host.random at install time
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.53 1999/04/10 04:38:30 deraadt Exp $
d505 1
a505 1
	mount_fs /tmp/fstab.shadow
a591 2
md_installboot ${ROOTDISK}

d602 3
@


1.53
log
@spelling
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.52 1999/04/10 04:09:22 millert Exp $
d610 3
@


1.52
log
@Add -q flag to newfs and use it in the install
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.51 1999/04/08 06:16:15 deraadt Exp $
d526 1
a526 1
echo 'Please enter the initial password that the root acount will have.'
@


1.51
log
@clean ramdisk /tmp a bit more before running MAKEDEV
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.50 1999/04/07 22:59:27 deraadt Exp $
d299 1
a299 1
			newfs /dev/r${_device_name}
@


1.50
log
@skip that swapon stuff, now that pax is about to become less leaky
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.49 1999/04/07 08:47:34 deraadt Exp $
d253 1
a255 19
# pax memory leak fixed, this is no longer as neccessary
#	if [ -f /sbin/swapon ]; then
#		echo
#		echo "Do you wish to enable swap for this install (WARNING: Useful for low memory"
#		echo "machines, but only do this if the b partition on the root disk was configured"
#		echo -n "correctly before this kernel boot, or disaster will result)? [n] "
#		getresp "n"
#		case "$resp" in
#			y*|Y*)
#				swapon /dev/${ROOTDISK}b
#				;;
#			reboot)
#				reboot
#				;;
#			*)
#				;;
#		esac
#	fi

d568 1
@


1.49
log
@save bytes; move swapon question
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.48 1999/04/07 06:09:22 deraadt Exp $
d255 18
a272 17
	if [ -f /sbin/swapon ]; then
		echo
		echo "Do you wish to enable swap for this install (WARNING: Useful for low memory"
		echo "machines, but only do this if the b partition on the root disk was configured"
		echo -n "correctly before this kernel boot, or disaster will result)? [n] "
		getresp "n"
		case "$resp" in
			y*|Y*)
				swapon /dev/${ROOTDISK}b
				;;
			reboot)
				reboot
				;;
			*)
				;;
		esac
	fi
@


1.48
log
@For low-memory machines, help people by putting in enough swapon support, so
that people can do a boot, disklabel, reboot, boot, disklabel, swapon, ....
and finish their install.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.47 1999/04/07 05:58:04 deraadt Exp $
d112 1
a112 1
	echo ""
d120 1
a120 1
		echo	""
d216 1
a216 1
		echo	""
d255 19
a273 1
	echo	""
d275 1
a275 1
	echo	""
d277 1
a277 1
	echo	""
d297 1
a297 1
		echo ""
d299 1
a299 1
	echo	""
a326 14
if [ -f /sbin/swapon ]; then
	echo "Do you wish to enable swap for this install (WARNING: Useful for low memory"
	echo "machines, but only do this if the b partition on the root disk was configured"
	echo -n "correctly before this kernel boot, or disaster will result)? [n]"
	getresp "n"
	case "$resp" in
		y*|Y*)
			swapon /dev/${ROOTDISK}b
			;;
		*)
			;;
	esac
fi

d364 1
a364 1
		echo ""
d368 1
a368 1
		echo ""
d438 1
a438 1
			echo ""
d440 1
a440 1
			echo ""
d500 1
a500 1
#	echo	""
d519 1
a519 1
#	echo ""
d549 1
a549 1
	echo ""
d556 1
a556 1
	echo ""
d572 1
a572 1
	echo ""
d574 1
a574 1
	echo ""
@


1.47
log
@cannot swapon in 2.5 installer.  the swap partitions must exist at kernel
boot time, the later user-entered disklabel does not take effect correctly.
next release...
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.46 1999/04/01 21:24:22 deraadt Exp $
d309 13
a321 4
#unfortunately, cannot do this in 2.5
#if [ -f /sbin/swapon ]; then
#	swapon /dev/${ROOTDISK}b
#fi
@


1.46
log
@remove twiddle; tmp/fstab.*
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.45 1999/04/01 04:14:08 millert Exp $
d309 4
a312 3
if [ -f /sbin/swapon ]; then
	swapon /dev/${ROOTDISK}b
fi
@


1.45
log
@Use /tmp/fstab.DISK if it exists to preload mountpoints
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.44 1999/02/28 06:50:33 deraadt Exp $
d210 1
a210 1
				_mount_points[${_npartitions}]=`sed -n "s:^/dev/$DISK$_pp[ 	]*\([^ 	]*\).*:\1:p" < /etc/fstab.${DISK}`
a601 1
#pid=`twiddle`
a603 1
#kill $pid
@


1.44
log
@if swapon exists, use it to add root swap partition
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.43 1998/11/09 03:54:52 millert Exp $
d208 4
@


1.43
log
@Remove labelmoredisks(), nothing uses it anymore and most install.md's
don't provide a real md_labeldisk() anyway.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.42 1998/10/28 17:51:14 millert Exp $
d303 4
@


1.42
log
@Move md_copy_kernel after install_sets and add check_kernel (which
should probably be used instead of md_copy_kernel once I am sure
nothing actually uses md_copy_kernel to copy the kernel any more).
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.41 1998/10/13 21:23:30 deraadt Exp $
a86 1
#	md_labeldisk()		- put label on a disk
@


1.41
log
@whack resolv.conf properly; bug seen by jason
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.40 1998/10/11 02:50:47 deraadt Exp $
d542 2
a544 2

install_sets $THESETS
@


1.40
log
@prettier prompts
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.39 1998/10/07 02:40:45 deraadt Exp $
d397 1
a397 1
			echo "search $FQDN" >> /tmp/resolv.conf
@


1.39
log
@append script-formed dhclient.conf to installed one if necessary
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.38 1998/09/28 13:37:54 deraadt Exp $
d326 1
a326 1
			echo -n "Enter system hostname (short form): [$_nam] "
d338 1
a338 1
			echo -n "Enter DNS domain name: [$FQDN] "
@


1.38
log
@if no default route, set it to "none"
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.37 1998/09/28 13:28:35 deraadt Exp $
d567 5
@


1.37
log
@toast the obviously untested nfs changes
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.33 1998/09/26 21:41:23 deraadt Exp $
d355 1
@


1.36
log
@typo
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.35 1998/09/28 12:34:51 deraadt Exp $
a161 1
			iter=ROOT
a163 1
			iter=""
a171 1
		if [ "${DISK}" != "nfs" ]; then
d188 1
a188 1
		if [ "${DISK}" = "${ROOTDISK}" -a "${ROOTDISK}" != "nfs" ]; then
a249 41
		else # above was for non nfs, this is nfs
			while :; do
				echo -n "nfs server: [$_nfs_server] "
				getresp "$_nfs_server"
				if [ "X$resp" = "X" ]; then
					continue
				fi
				_nfs_server="$resp"
				break
			done
			while :; do
				echo -n "subdir on nfs server: [$_nfs_dir] "
				getresp "$_nfs_dir"
				if [ "X$resp" = "X" ]; then
					continue
				fi
				_nfs_dir="$resp"
				break
			done
			# Get the mount point from the user
			while : ; do
				if [ "${iter}" = "ROOT" ]; then
					_mp="/"
					break
				fi
				echo -n "Mount point for ${_nfs_server}:${_nfs_dir} [$_mp, RET, none, or done]? "
				getresp "$_mp"
				case "X${resp}" in
					X/*)	_mp=$resp
						break ;;
					Xdone|X)
						break ;;
					Xnone)	_mp=
						break;;
					*)	echo "mount point must be an absolute path!";;
				esac
			done
			if [ -n "${_mp}" ]; then
				echo "${_nfs_server}:${_nfs_dir} ${_mp}" >> ${FILESYSTEMS}
			fi
		fi
a269 12
	tmpfslist=""
	while read _device_name _junk; do
		# nfs is special
		if [ "`echo $_device_name|sed '/^[^ ]*:/!d'`" ]; then
			continue
		fi
		tmpfslist="${tmpfslist} ${_device_name}"
	done < ${FILESYSTEMS}

	# if it is all spaces aka all nfs
	if [ "X${tmpfslist## *}" != "X" ]; then
	
d271 8
a278 1
	echo "	${tmpfslist}"
d293 5
a297 6

	for _device_name in ${tmpfslist}; do
		newfs /dev/r${_device_name}
	done

	fi # if [ "${tmpfslist...
a465 6
			# nfs is special
			if [ "`echo $_dev|sed '/^[^ ]*:/!d'`" ]; then
				echo $_dev $_mp nfs rw 0 0
				continue
			fi
			
d580 2
a581 3
if [ "${ROOTDISK}" != "nfs" ]; then
	md_installboot ${ROOTDISK}
fi
@


1.35
log
@fix resolver setup
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.34 1998/09/28 12:34:06 deraadt Exp $
d191 1
a191 1
		if [ "${DISK}" = "${ROOTDISK}" -a "${ROOTDISK}" != "nfs"]; then
@


1.34
log
@nfs root patches; todd@@
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.33 1998/09/26 21:41:23 deraadt Exp $
d421 1
a421 1
		ns="none"
d423 1
a423 1
			ns=""
d426 2
a427 2
				if [ "X${ns}" = "X" ]; then
					ns="$n"
d429 1
a429 1
					ns="$ns $n"
d433 1
a433 1
			ns=""
d436 2
a437 2
				if [ "X${ns}" = "X" ]; then
					ns="$n"
d439 1
a439 1
					ns="$ns $n"
d443 3
a445 3
		echo -n	"Enter IP address of primary nameserver: [$ns] "
		getresp "$ns"
		if [ "X${ns}" != X"none" ]; then
d447 1
a447 1
			for n in `echo ${ns}`; do
@


1.33
log
@proper spacing of dns queries
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.32 1998/09/25 02:23:52 deraadt Exp $
d162 1
d165 1
d174 1
d191 1
a191 1
		if [ "${DISK}" = "${ROOTDISK}" ]; then
d253 41
d314 12
d327 1
a327 8
	(
		echo -n "	"
		while read _device_name _junk; do
			echo -n "${_device_name} "
		done
		echo ""
	) < ${FILESYSTEMS}
	echo	""
d342 6
a347 5
	(
		while read _device_name _junk; do
			newfs /dev/r${_device_name}
		done
	) < ${FILESYSTEMS}
d516 6
d636 3
a638 2

md_installboot ${ROOTDISK}
@


1.32
log
@multiple IP addresses permitted for DNS servers
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.31 1998/09/24 21:52:10 deraadt Exp $
d376 5
a380 1
				ns="$ns $n"
d386 5
a390 1
				ns="$ns $n"
@


1.31
log
@parse /etc/resolv.conf if it exists...
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.30 1998/09/23 06:51:20 deraadt Exp $
d371 1
a371 1
		resp="none"
d373 5
a377 2
			resp=`grep '^nameserver ' /etc/resolv.conf | \
			    sed -e 's/^nameserver //' | sed -e '1q'`
d379 5
a383 2
			resp=`grep '^nameserver ' /tmp/resolv.conf | \
			    sed -e 's/^nameserver //' | sed -e '1q'`
d385 3
a387 5
		echo -n	"Enter IP address of primary nameserver: [$resp] "
		getresp "$resp"
		if [ "X${resp}" != X"none" ]; then
			echo "domain $FQDN" > /tmp/resolv.conf
			echo "nameserver $resp" >> /tmp/resolv.conf
d389 3
@


1.30
log
@if default route already set (dhcp?) use it. otherwise use /etc/mygate..
otherwise we have no default route... in any case, prompt.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.29 1998/09/17 00:49:15 deraadt Exp $
d372 4
a375 1
		if [ -f /tmp/resolv.conf ]; then
d377 1
a377 1
			    sed -e 's/^nameserver //'`
@


1.29
log
@pretty up MAKEDEV run
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.28 1998/09/15 21:48:27 deraadt Exp $
d351 10
a360 3
		resp="none"
		if [ -f /tmp/mygate ]; then
			resp=`cat /tmp/mygate`
@


1.28
log
@add dhclient support; jbi130@@mail.usask.ca and I
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.26 1998/07/13 23:23:19 deraadt Exp $
d563 1
a563 1
echo -n "Making all device nodes (by running /dev/MAKEDEV all)"
d568 1
a568 1
echo "done."
@


1.27
log
@mi get_ifdevs()
@
text
@d343 6
@


1.26
log
@make users aware of what "making devices" entails
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.25 1998/06/08 02:01:15 jason Exp $
a84 1
#	md_get_ifdevs()		- return available network interfaces
@


1.25
log
@Move `md_copy_kernel' to earlier in the file to prevent warning
about missing kernel.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.24 1998/06/02 02:22:18 millert Exp $
d558 1
a558 1
echo -n "Making all devices..."
@


1.24
log
@Don't use given password as default when prompting for passwd a second
time; matter@@superlink.net
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.23 1998/04/11 09:47:27 deraadt Exp $
d511 2
a549 2

md_copy_kernel
@


1.23
log
@make user enter root password during install phase
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.22 1998/03/28 21:40:45 deraadt Exp $
d502 1
a502 1
	getresp "${_password}"
@


1.22
log
@oops
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.21 1998/03/28 21:06:51 deraadt Exp $
d489 22
d565 6
@


1.21
log
@copyrights
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.20 1998/03/12 08:13:48 deraadt Exp $
d19 1
a19 1
	Theo de Raadt
@


1.20
log
@various prompt and message changes
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.19 1998/01/10 02:22:56 deraadt Exp $
d4 29
@


1.19
log
@support installing to multiple disks; cyxob@@isl.vtu.lt
after install is done, if /bsd or /bin/cat do not exist, complain that the
kernel or baseXX.tar distributions did not get installed; deraadt
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.17 1997/10/30 05:23:44 millert Exp $
d80 1
d161 2
a162 1
			echo	"The following will be used for the root filesystem and swap:"
d195 1
a195 1
				echo -n "Mount point for ${DISK}${_pp} (size=${_ps}k) [$_mp]? "
d200 4
a203 1
					Xdone|Xnone|X)	break ;;
d361 6
a366 5
			echo ""
			echo "You may want to edit the host table in the event that"
			echo "you are doing an NFS installation or an FTP installation"
			echo "without a name server and want to refer to the server by"
			echo "name rather than by its numeric ip address."
@


1.18
log
@init resolv.conf in "lookup file bind" mode
@
text
@d127 30
a156 18
	while [ "X${ROOTDISK}" = "X" ]; do
		getrootdisk
	done

	# Deal with disklabels, including editing the root disklabel
	# and labeling additional disks.  This is machine-dependent since
	# some platforms may not be able to provide this functionality.
	md_prep_disklabel ${ROOTDISK}

	# Assume partition 'a' of $ROOTDISK is for the root filesystem.
	# Loop and get the rest.
	# XXX ASSUMES THAT THE USER DOESN'T PROVIDE BOGUS INPUT.
	cat << __get_filesystems_1

You will now have the opportunity to enter filesystem information.  You will be
prompted for the mount point (full path, including the prepending '/' character)
for each BSD partition on ${ROOTDISK}.  Enter "none" to skip a partition or
"done" when you are finished.
d159 47
a205 42
	echo	"The following will be used for the root filesystem and swap:"
	echo	"	${ROOTDISK}a	/"
	echo	"	${ROOTDISK}b	swap"

	echo	"${ROOTDISK}a /" > ${FILESYSTEMS}

	# XXX - allow the user to name mount points on disks other than ROOTDISK
	#	also allow a way to enter non-BSD partitions (but don't newfs!)
	# Get the list of BSD partitions and store sizes
	_npartitions=0
	for _p in `disklabel ${ROOTDISK} 2>&1 | grep '^ *[a-p]:.*BSD' | sed 's/^ *\([a-p]\): *\([0-9][0-9]*\) .*/\1\2/'`; do
		case $_p in
			a*)	# We already have an 'a'
				;;
			*)	_pp=`firstchar ${_p}`
				_ps=`echo ${_p} | sed 's/^.//'`
				_partitions[${_npartitions}]=${_pp}
				_psizes[${_npartitions}]=${_ps}
				_npartitions=$(( ${_npartitions} + 1 ))
				;;
		esac
	done

	# Now prompt the user for the mount points.  Loop until "done"
	echo	""
	_i=0
	resp="X"
	while [ $_npartitions -gt 0 -a X${resp} != X"done" ]; do
		_pp=${_partitions[${_i}]}
		_ps=$(( ${_psizes[${_i}]} / 2 ))
		_mp=${_mount_points[${_i}]}

		# Get the mount point from the user
		while : ; do
			echo -n "Mount point for ${ROOTDISK}${_pp} (size=${_ps}k) [$_mp]? "
			getresp "$_mp"
			case "X${resp}" in
				X/*)	_mount_points[${_i}]=$resp
					break ;;
				Xdone|Xnone|X)	break ;;
				*)	echo "mount point must be an absolute path!";;
			esac
a206 5
		_i=$(( ${_i} + 1 ))
		if [ $_i -ge $_npartitions ]; then
			_i=0
		fi
	done
d208 9
a216 7
	# Now write it out
	_i=0
	while test $_i -lt $_npartitions; do
		if [ -n "${_mount_points[${_i}]}" ]; then
			echo "${ROOTDISK}${_partitions[${_i}]} ${_mount_points[${_i}]}" >> ${FILESYSTEMS}
		fi
		_i=$(( ${_i} + 1 ))
@


1.17
log
@nice mount point chooser
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.16 1997/10/17 12:21:02 deraadt Exp $
d322 1
@


1.16
log
@oops
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.15 1997/10/17 12:05:56 deraadt Exp $
d139 1
a139 1
	cat << \__get_filesystems_1
d142 3
a144 2
prompted for device name and mount point (full path, including the prepending
'/' character).  (NOTE: these do not have to be in any particular order).
d147 1
a147 1
	echo	"The following will be used for the root filesystem:"
d149 1
d153 14
a166 31
	resp="X"	# force at least one iteration
	while [ "X$resp" != X"done" ]; do
		echo	""
		echo -n	"Device name? [done] "
		getresp "done"
		case "$resp" in
		done)
			;;

		*)
			_device_name=`basename $resp`

			# force at least one iteration
			_first_char="X"
			while [ "X${_first_char}" != X"/" ]; do
				echo -n "Mount point? "
				getresp ""
				_mount_point=$resp
				_first_char=`firstchar ${_mount_point}`
				if [ "X${_first_char}" != X"/" ]; then
					echo "mount point must be an absolute path!"
				fi
			done
			if [ "X${_mount_point}" = X"/" ]; then
				echo "root mount point already taken care of!"
			else
				echo "${_device_name} ${_mount_point}" \
					>> ${FILESYSTEMS}
			fi
			resp="X"	# force loop to repeat
			;;
d168 35
@


1.16.2.1
log
@Merge in 1.16 to 1.17 from the trunk;
nice mount point chooser
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.17 1997/10/30 05:23:44 millert Exp $
d139 1
a139 1
	cat << __get_filesystems_1
d142 2
a143 3
prompted for the mount point (full path, including the prepending '/' character)
for each BSD partition on ${ROOTDISK}.  Enter "none" to skip a partition or
"done" when you are finished.
d146 1
a146 1
	echo	"The following will be used for the root filesystem and swap:"
a147 1
	echo	"	${ROOTDISK}b	swap"
d151 31
a181 14
	# XXX - allow the user to name mount points on disks other than ROOTDISK
	#	also allow a way to enter non-BSD partitions (but don't newfs!)
	# Get the list of BSD partitions and store sizes
	_npartitions=0
	for _p in `disklabel ${ROOTDISK} 2>&1 | grep '^ *[a-p]:.*BSD' | sed 's/^ *\([a-p]\): *\([0-9][0-9]*\) .*/\1\2/'`; do
		case $_p in
			a*)	# We already have an 'a'
				;;
			*)	_pp=`firstchar ${_p}`
				_ps=`echo ${_p} | sed 's/^.//'`
				_partitions[${_npartitions}]=${_pp}
				_psizes[${_npartitions}]=${_ps}
				_npartitions=$(( ${_npartitions} + 1 ))
				;;
a182 35
	done

	# Now prompt the user for the mount points.  Loop until "done"
	echo	""
	_i=0
	resp="X"
	while [ $_npartitions -gt 0 -a X${resp} != X"done" ]; do
		_pp=${_partitions[${_i}]}
		_ps=$(( ${_psizes[${_i}]} / 2 ))
		_mp=${_mount_points[${_i}]}

		# Get the mount point from the user
		while : ; do
			echo -n "Mount point for ${ROOTDISK}${_pp} (size=${_ps}k) [$_mp]? "
			getresp "$_mp"
			case "X${resp}" in
				X/*)	_mount_points[${_i}]=$resp
					break ;;
				Xdone|Xnone|X)	break ;;
				*)	echo "mount point must be an absolute path!";;
			esac
		done
		_i=$(( ${_i} + 1 ))
		if [ $_i -ge $_npartitions ]; then
			_i=0
		fi
	done

	# Now write it out
	_i=0
	while test $_i -lt $_npartitions; do
		if [ -n "${_mount_points[${_i}]}" ]; then
			echo "${ROOTDISK}${_partitions[${_i}]} ${_mount_points[${_i}]}" >> ${FILESYSTEMS}
		fi
		_i=$(( ${_i} + 1 ))
@


1.15
log
@clarify significantly. in many situations, put more effort into remembering
previous answers to the questions, so that it is easier to abort and restart
the install script.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.14 1997/10/17 04:20:59 deraadt Exp $
d361 13
a376 13
#if [ "`df /`" = "`df /mnt`" ]; then
#	# Now that the network has been configured, it is safe to configure the
#	# fstab.
#	(
#		while read _dev _mp; do
#			if [ "$_mp" = "/" ]; then
#				echo /dev/$_dev $_mp ffs rw 1 1
#			else
#				echo /dev/$_dev $_mp ffs rw 1 2
#			fi
#		done
#	) < ${FILESYSTEMS} > /tmp/fstab
#
d398 4
a401 3
#	munge_fstab /tmp/fstab /tmp/fstab.shadow
#	mount_fs /tmp/fstab.shadow
#fi
@


1.14
log
@clarify hostname prompt
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.13 1997/09/23 22:39:25 niklas Exp $
d141 3
a143 9
You will now have the opportunity to enter filesystem information.
You will be prompted for device name and mount point (full path,
including the prepending '/' character).

Note that these do not have to be in any particular order.  You will
be given the opportunity to edit the resulting 'fstab' file before
any of the filesystems are mounted.  At that time you will be able
to resolve any filesystem order dependencies.

d201 3
a203 2
	echo 	""
	echo	 "The next step will overwrite any existing data on:"
a228 1
			echo ""
d243 4
a246 7
You will now be given the opportunity to configure the network.  This will
be useful if you need to transfer the installation sets via FTP or NFS.
Even if you choose not to transfer installation sets that way, this
information will be preserved and copied into the new root filesystem.

Note, enter all symbolic host names WITHOUT the domain name appended.
I.e. use 'hostname' NOT 'hostname.domain.name'.
d254 3
a256 2
		if [ -f /etc/myname ]; then
			resp=`cat /etc/myname`
d259 2
a260 2
			echo -n "Enter system hostname (short form): [$resp] "
			getresp "$resp"
d266 4
d278 6
a283 2
		echo -n "Enter IP address of default route: [none] "
		getresp "none"
d291 7
a297 2
		echo -n	"Enter IP address of primary nameserver: [none] "
		getresp "none"
d316 21
a336 19
		echo ""
		echo "The host table is as follows:"
		echo ""
		cat /tmp/hosts
		echo ""
		echo "You may want to edit the host table in the event that"
		echo "you are doing an NFS installation or an FTP installation"
		echo "without a name server and want to refer to the server by"
		echo "name rather than by its numeric ip address."
		echo -n "Would you like to edit the host table with ${EDITOR}? [n] "
		getresp "n"
		case "$resp" in
			y*|Y*)
				${EDITOR} /tmp/hosts
				;;

			*)
				;;
		esac
d340 4
a343 12
You will now be given the opportunity to escape to the command shell to
do any additional network configuration you may need.  This may include
adding additional routes, if needed.  In addition, you might take this
opportunity to redo the default route in the event that it failed above.
If you do change the default route, and wish for that change to carry over
to the installed system, execute the following command at the shell
prompt:

	echo <ip_address_of_gateway> > /tmp/mygate

where <ip_address_of_gateway> is the IP address of the default router.

d361 40
a400 40
if [ "`df /`" = "`df /mnt`" ]; then
	# Now that the network has been configured, it is safe to configure the
	# fstab.
	(
		while read _dev _mp; do
			if [ "$_mp" = "/" ]; then
				echo /dev/$_dev $_mp ffs rw 1 1
			else
				echo /dev/$_dev $_mp ffs rw 1 2
			fi
		done
	) < ${FILESYSTEMS} > /tmp/fstab

	echo	"The fstab is configured as follows:"
	echo	""
	cat /tmp/fstab
	cat << \__fstab_config_1

You may wish to edit the fstab.  For example, you may need to resolve
dependencies in the order which the filesystems are mounted.  You may
also wish to take this opportunity to place NFS mounts in the fstab.
This would be especially useful if you plan to keep '/usr' on an NFS
server.

__fstab_config_1
	echo -n	"Edit the fstab with ${EDITOR}? [n] "
	getresp "n"
	case "$resp" in
		y*|Y*)
			${EDITOR} /tmp/fstab
			;;

		*)
			;;
	esac

	echo ""
	munge_fstab /tmp/fstab /tmp/fstab.shadow
	mount_fs /tmp/fstab.shadow
fi
@


1.13
log
@Typo, fixes passno botch in / entry
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.12 1997/05/17 21:16:46 millert Exp $
d267 1
a267 1
			echo -n "Enter system hostname: [$resp] "
@


1.12
log
@Set ROOTDISK based on /mnt when restarting install.  Noticed by Per.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.11 1997/05/14 21:22:06 millert Exp $
d367 1
a367 1
			if [ "$mp" = "/" ]; then
@


1.11
log
@md_machine_arch must be done after md_makerootwritable (for /kern)
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.10 1997/05/14 21:07:59 millert Exp $
d237 6
@


1.10
log
@Now calls md_machine_arch() which needs to be added to everyone's
install.md.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.9 1997/05/13 18:22:18 millert Exp $
a103 3
# Get the machine architecture
ARCH=`md_machine_arch`

d116 3
@


1.9
log
@Explicately mention what editor is being used.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.8 1997/05/08 15:48:19 tholo Exp $
d67 1
d103 3
@


1.8
log
@Don't try to copy disktab.shadow if it does not exist
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.7 1997/05/03 23:06:01 tholo Exp $
d193 2
a194 1
	echo -n	"If you made any mistakes, you may edit this now.  Edit? [n] "
d310 1
a310 1
		echo -n "Would you like to edit the host table? [n] "
d377 1
a377 1
	echo -n	"Edit the fstab? [n] "
@


1.7
log
@Disable twiddle() as it causes problems on some architectures
Actually install machine dependant sets if there are any specified
Special-case a set named "kernel" so that it will copy "bsd" to the root
disk
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.6 1997/05/02 20:56:17 grr Exp $
d119 3
a121 1
	cp /etc/disktab.shadow /tmp/disktab.shadow
@


1.6
log
@allow install to be restarted in many cases without blowing away everything already extracted and move the ftp extract further in the direction of user friendly
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.5 1997/04/30 23:56:05 grr Exp $
d75 1
a75 1
THESETS="$ALLSETS"
d406 1
a406 1
install_sets $ALLSETS $MDSETS
d454 1
a454 1
pid=`twiddle`
d457 1
a457 1
kill $pid
@


1.5
log
@clean up sparc mini-root stuff and eliminate some mysteries and surprises therein
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.4 1997/04/30 18:52:43 niklas Exp $
d77 11
a87 3
# Good {morning,afternoon,evening,night}.
md_welcome_banner
echo -n "Proceed with installation? [n] "
d91 1
d112 8
a119 1
md_makerootwritable
d121 3
a123 7
# Install the shadowed disktab file; lets us write to it for temporary
# purposes without mounting the miniroot read-write.
cp /etc/disktab.shadow /tmp/disktab.shadow

while [ "X${ROOTDISK}" = "X" ]; do
	getrootdisk
done
d125 9
a133 9
# Deal with disklabels, including editing the root disklabel
# and labeling additional disks.  This is machine-dependent since
# some platforms may not be able to provide this functionality.
md_prep_disklabel ${ROOTDISK}

# Assume partition 'a' of $ROOTDISK is for the root filesystem.  Loop and
# get the rest.
# XXX ASSUMES THAT THE USER DOESN'T PROVIDE BOGUS INPUT.
cat << \__get_filesystems_1
d146 2
a147 2
echo	"The following will be used for the root filesystem:"
echo	"	${ROOTDISK}a	/"
d149 1
a149 1
echo	"${ROOTDISK}a /" > ${FILESYSTEMS}
d151 8
a158 8
resp="X"	# force at least one iteration
while [ "X$resp" != X"done" ]; do
	echo	""
	echo -n	"Device name? [done] "
	getresp "done"
	case "$resp" in
	done)
		;;
d160 2
a161 2
	*)
		_device_name=`basename $resp`
d163 16
a178 9
		# force at least one iteration
		_first_char="X"
		while [ "X${_first_char}" != X"/" ]; do
			echo -n "Mount point? "
			getresp ""
			_mount_point=$resp
			_first_char=`firstchar ${_mount_point}`
			if [ "X${_first_char}" != X"/" ]; then
				echo "mount point must be an absolute path!"
d180 26
d207 13
a219 7
		if [ "X${_mount_point}" = X"/" ]; then
			echo "root mount point is already taken care of!"
		else
			echo "${_device_name} ${_mount_point}" >> ${FILESYSTEMS}
		fi
		resp="X"	# force loop to repeat
		;;
a220 1
done
d222 9
a230 43
echo	""
echo	"You have configured the following devices and mount points:"
echo	""
cat ${FILESYSTEMS}
echo	""
echo	"Filesystems will now be created on these devices.  If you made any"
echo -n	"mistakes, you may edit this now.  Edit? [n] "
getresp "n"
case "$resp" in
	y*|Y*)
		${EDITOR} ${FILESYSTEMS}
		;;
	*)
		;;
esac
echo 	""
echo	 "The next step *WILL* overwrite any existing data on:"
(
	while read _device_name _junk; do
		echo ${_device_name}
	done
) < ${FILESYSTEMS}
echo	""

echo -n	"Are you *SURE* that you're ready to proceed? [n] "
getresp "n"
case "$resp" in
	y*|Y*)
		;;
	*)
		echo "ok, try again later..."
		exit
		;;
esac

# Loop though the file, place filesystems on each device.
echo	"Creating filesystems..."
(
	while read _device_name _junk; do
		newfs /dev/r${_device_name}
		echo ""
	done
) < ${FILESYSTEMS}
d235 1
d262 1
a262 1
			echo -n "Enter DNS domain name: [$FQDN]"
d349 12
a360 11
# Now that the network has been configured, it is safe to configure the
# fstab.
(
	while read _dev _mp; do
		if [ "$mp" = "/" ]; then
			echo /dev/$_dev $_mp ffs rw 1 1
		else
			echo /dev/$_dev $_mp ffs rw 1 2
		fi
	done
) < ${FILESYSTEMS} > /tmp/fstab
d362 4
a365 4
echo	"The fstab is configured as follows:"
echo	""
cat /tmp/fstab
cat << \__fstab_config_1
d374 6
a379 6
echo -n	"Edit the fstab? [n] "
getresp "n"
case "$resp" in
	y*|Y*)
		${EDITOR} /tmp/fstab
		;;
d381 3
a383 3
	*)
		;;
esac
d385 4
a388 3
echo ""
munge_fstab /tmp/fstab /tmp/fstab.shadow
mount_fs /tmp/fstab.shadow
a408 9
(
	cd /tmp
	for file in fstab hostname.* hosts myname mygate resolv.conf; do
		if [ -f $file ]; then
			echo -n "Copying $file..."
			cp $file /mnt/etc/$file
			echo "done."
		fi
	done
d410 16
a425 10
	# If no zoneinfo on the installfs, give them a second chance
	if [ ! -e /usr/share/zoneinfo ]; then
		get_timezone
	fi
	if [ ! -e /mnt/usr/share/zoneinfo ]; then
		echo "Cannot install timezone link..."
	else
		echo -n "Installing timezone link..."
		rm -f /mnt/etc/localtime
		ln -s /usr/share/zoneinfo/$TZ /mnt/etc/localtime
d428 1
a428 11
	if [ ! -x /mnt/dev/MAKEDEV ]; then
		echo "No /dev/MAKEDEV installed, something is wrong here..."
	else
		echo -n "Making devices..."
		pid=`twiddle`
		cd /mnt/dev
		sh MAKEDEV all
		kill $pid
		echo "done."
	fi
	md_copy_kernel
d430 30
a459 2
	md_installboot ${ROOTDISK}
)
@


1.4
log
@We run OpenBSD. we also want vim acting as vi.
@
text
@d2 1
a2 1
#	$OpenBSD: install.sh,v 1.5.2.8 1996/08/27 18:15:05 gwr Exp $
d137 1
a137 1
echo	"${ROOTDISK}a	/" > ${FILESYSTEMS}
d157 3
a159 5
			if [ "X${_mount_point}" = X"/" ]; then
				# Invalid response; no multiple roots
				_first_char="X"
			else
				_first_char=`firstchar ${_mount_point}`
d162 5
a166 1
		echo "${_device_name}	${_mount_point}" >> ${FILESYSTEMS}
d187 19
a235 1
		echo -n "Enter system hostname: [$resp] "
d237 1
a242 1
		echo -n "Enter DNS domain name: "
d245 2
a246 1
			getresp ""
d287 3
a289 1
		echo "you need to mount an NFS server."
@


1.3
log
@sync to netbsd
@
text
@d2 1
d40 1
a40 1
#	NetBSD installation script.
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d2 1
a2 2
#	$OpenBSD$
#	$NetBSD: install.sh,v 1.2 1996/02/28 00:47:42 thorpej Exp $
d39 1
a39 1
#	OpenBSD installation script.
d52 1
d56 1
a57 1
#	md_checkfordisklabel()	- check for valid disklabel
d59 1
d63 5
d73 2
d99 4
a102 2
# We don't like it, but it sure makes a few things a lot easier.
do_mfs_mount "/tmp" "2048"
d112 4
a115 62
# Make sure there's a disklabel there.  If there isn't, puke after
# disklabel prints the error message.
md_checkfordisklabel ${ROOTDISK}
case "$resp" in
	1)
		cat << \__disklabel_not_present_1

FATAL ERROR: There is no disklabel present on the root disk!  You must
label the disk with SYS_INST before continuing.

__disklabel_not_present_1
		exit
		;;

	2)
		cat << \__disklabel_corrupted_1

FATAL ERROR: The disklabel on the root disk is corrupted!  You must
re-label the disk with SYS_INST before continuing.

__disklabel_corrupted_1
		exit
		;;

	*)
		;;
esac

# Give the user the opportinuty to edit the root disklabel.
cat << \__disklabel_notice_1

You have already placed a disklabel onto the target root disk.
However, due to the limitations of the standalone program used
you may want to edit that label to change partition type information.
You will be given the opporunity to do that now.  Note that you may
not change the size or location of any presently open partition.

__disklabel_notice_1
echo -n	"Do you wish to edit the root disklabel? [y] "
getresp "y"
case "$resp" in
	y*|Y*)
		md_prep_disklabel
		disklabel -W ${ROOTDISK}
		disklabel -e ${ROOTDISK}
		;;

	*)
		;;
esac

cat << \__disklabel_notice_2

You will now be given the opportunity to place disklabels on any additional
disks on your system.
__disklabel_notice_2

_DKDEVS=`rmel ${ROOTDISK} ${_DKDEVS}`
resp="X"	# force at least one iteration
while [ "X$resp" != X"done" ]; do
	labelmoredisks
done
d160 1
a160 2
				_first_char=`echo ${_mount_point} | \
				    cut -c 1`
d163 1
a163 2
		echo "${_device_name}	${_mount_point}" >> \
		    ${FILESYSTEMS}
d179 1
a179 1
		vi ${FILESYSTEMS}
d188 1
a188 2
	while read line; do
		_device_name=`echo $line | awk '{print $1}'`
a209 1
		echo -n "Enter system hostname: "
d211 4
d216 1
a216 1
			getresp ""
d270 1
a270 1
				vi /tmp/hosts
d310 9
a318 6
awk '{
	if ($2 == "/")
		printf("/dev/%s %s ffs rw 1 1\n", $1, $2)
	else
		printf("/dev/%s %s ffs rw 1 2\n", $1, $2)
}' < ${FILESYSTEMS} > /tmp/fstab
d336 1
a336 1
		vi /tmp/fstab
d347 17
a363 1
install_sets $ALLSETS
d376 23
a398 15
	echo -n "Installing timezone link..."
	rm -f /mnt/etc/localtime
	ln -s /usr/share/zoneinfo/$TZ /mnt/etc/localtime
	echo "done."

	echo -n "Making devices..."
	pid=`twiddle`
	cd /mnt/dev
	sh MAKEDEV all
	kill $pid
	echo "done."

	echo -n "Copying kernel..."
	cp -p /bsd /mnt/bsd
	echo "done."
@


1.1
log
@update from netbsd
@
text
@d2 2
a3 1
#	$NetBSD: install.sh,v 1.1 1996/01/06 22:45:13 pk Exp $
d5 1
a5 1
# Copyright (c) 1995 Jason R. Thorpe.
d8 3
d21 5
a25 4
#	This product includes software developed for the NetBSD Project
#	by Jason R. Thorpe.
# 4. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission
d27 11
a37 10
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d40 1
a40 1
#	NetBSD installation script.
d418 1
a418 1
	cp -p /netbsd /mnt/netbsd
@

