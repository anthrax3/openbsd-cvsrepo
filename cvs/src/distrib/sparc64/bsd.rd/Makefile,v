head	1.31;
access;
symbols
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.28.0.8
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.4
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.6
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.27.0.6
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.27.0.2
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.23.0.8
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.6
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.4
	OPENBSD_5_0:1.23.0.2
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.20.0.8
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.6
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.11.0.18
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.16
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.14
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.12
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.10
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.8
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.6
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@# @;


1.31
date	2017.06.03.22.25.19;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	aQXKg2Eekxp6EbG1;

1.30
date	2017.01.27.17.59.09;	author natano;	state Exp;
branches;
next	1.29;
commitid	lZEWyMpUcwYh27Y5;

1.29
date	2016.10.14.18.44.20;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	SCMr9f2ZDRZiobIN;

1.28
date	2014.11.22.15.02.27;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	rH4FDTIbh81WkVKX;

1.27
date	2013.10.18.14.04.05;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2013.10.15.22.46.53;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2013.10.14.00.00.12;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2013.08.01.16.39.05;	author stsp;	state Exp;
branches;
next	1.23;

1.23
date	2011.07.08.21.39.32;	author drahn;	state Exp;
branches;
next	1.22;

1.22
date	2011.04.18.16.52.10;	author thib;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.15.03.11.22;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.17.03.58.55;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.12.16.12.53;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.02.03.20.58;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.02.01.01.07;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.11.10.16.40;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.17.00.28.21;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.13.17.34.40;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.09.14.55.11;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2007.02.16.16.56.22;	author tsi;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.09.05.53.55;	author todd;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.20.16.23.54;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.07.18.44.05;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.30.09.18.20;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.28.18.28.34;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.26.00.25.51;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.25.22.10.28;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.21.17.56.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.21.07.30.58;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.12.19.04.56;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.10.04.21.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.31
log
@kernels in compile dirs are readonly, and the bsd.rd we created has
tracked that permission.  Make the copy in $RELEASEDIR a+r
@
text
@#	$OpenBSD: Makefile,v 1.30 2017/01/27 17:59:09 natano Exp $

TOP=		${.CURDIR}/..

.include "${TOP}/Makefile.inc"
IMAGE=		ramdisk${REV}.fs
CBIN?=		instbin
LISTS?=		${.CURDIR}/list
UTILS?=		${TOP}/../miniroot

STRIP?=		strip
GZIPCMD?=	gzip
GZIPFLAGS?=	-9fn
MTREE=		${UTILS}/mtree.conf

RAMDISK=	RAMDISK

all: bsd.rd

DISKTYPE=	rdroot
MAKEFSARGS_RD=	-o disklabel=${DISKTYPE},minfree=0,density=4096

bsd.rd:	bsd.rd_unz
	objcopy -Sg -R .comment bsd.rd_unz bsd.strip
	${STRIP} bsd.strip
	${GZIPCMD} -c ${GZIPFLAGS} bsd.strip > bsd.rd

bsd.rd_unz: bsd ${IMAGE} rdsetroot
	cp bsd bsd.rd_unz
	${.OBJDIR}/rdsetroot bsd.rd_unz ${IMAGE}

bsd:
	cd ${.CURDIR}/../../../sys/arch/sparc64/compile/${RAMDISK} && \
	    su ${BUILDUSER} -c '${MAKE} config && ${MAKE} clean && env COPTS=-Os ${MAKE}'
	cp -p ${.CURDIR}/../../../sys/arch/sparc64/compile/${RAMDISK}/obj/bsd bsd

${IMAGE}: ${CBIN}
	rm -rf $@@.d
	install -d -o root -g wheel $@@.d
	mtree -def ${MTREE} -p $@@.d -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} REV=${REV} \
	    TARGDIR=$@@.d UTILS=${UTILS} RELEASEDIR=${RELEASEDIR} \
	    sh ${UTILS}/runlist.sh ${LISTS}
	rm $@@.d/${CBIN}
	makefs ${MAKEFSARGS_RD} $@@ $@@.d

rdsetroot:	${TOP}/../common/elfrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o rdsetroot \
	    ${TOP}/../common/elfrdsetroot.c ${TOP}/../common/elf32.c \
	    ${TOP}/../common/elf64.c

.ifdef RELEASEDIR
install:
.ifndef NOBSDRD
	cp bsd.rd ${RELEASEDIR}
	chmod a+r ${RELEASEDIR}/bsd.rd
.endif
.endif

${CBIN}.conf: ${LISTS}
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CBIN}.conf

${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CBIN}.conf
	crunchgen -E -D ${BSDSRCDIR} -L ${DESTDIR}/usr/lib \
	-c ${CBIN}.c -e ${CBIN} -m ${CBIN}.mk ${CBIN}.conf

${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk SRCLIBDIR=${.CURDIR}/../../../lib all

clean cleandir:
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}*.cache \
	    lib*.a lib*.olist ${CBIN}.map \
	    *.o *.lo *.c bsd bsd.rd{,_unz} bsd.gz bsd.strip floppy*.fs rdsetroot
	/bin/rm -rf ${IMAGE}.d

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.30
log
@Switch alpha, luna88k and sparc64 ramdisks to makefs.
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2016/10/14 18:44:20 deraadt Exp $
d56 1
@


1.29
log
@Use new kernel compile method for ramdisks, de-escalating to $BUILDUSER
as required.
much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2014/11/22 15:02:27 deraadt Exp $
a10 9
MOUNT_POINT=	/mnt

VND?=		vnd0
VND_DEV=	/dev/${VND}a
VND_RDEV=	/dev/r${VND}a
VND_CRDEV=	/dev/r${VND}c
PID!=		echo $$$$
REALIMAGE!=	echo /var/tmp/image.${PID}

a16 6
BOOT?=		/usr/mdec/boot
BOOTXX?=	/usr/mdec/bootxx

CLEANFILES+=	bsd.rd_unz rdsetroot

#.include "${TOP}/common/Makefile.inc"
d18 1
a18 1
all: ${CBIN} bsd.rd
d20 2
a21 7
DISKTYPE=       rdroot
NBLKS=          5744

# old format, minfree, opt, b/i  trks, sects, cpg
NEWFSARGS=	-t ffs -m 0 -o space
NEWFSARGS_RD=	-i 4096 -c ${NBLKS}
NEWFSARGS_FD=	-i 524288 -c 2880
d37 9
a45 2
${IMAGE}:	do_prep do_mount do_files do_umount
	mv -f ${REALIMAGE} ${IMAGE}
a51 42
do_prep:
	dd if=/dev/zero of=${REALIMAGE} count=${NBLKS}
	vnconfig -v -c ${VND} ${REALIMAGE}
	disklabel -w ${VND} ${DISKTYPE}
	
do_mount:
	newfs ${NEWFSARGS} ${NEWFSARGS_RD} ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}

do_umount:
	@@echo ""
	@@df -i ${MOUNT_POINT}
	@@echo ""
	umount ${MOUNT_POINT}
	vnconfig -u ${VND}

unconfig:
	-umount ${MOUNT_POINT}
	-vnconfig -u ${VND}

rd_setup: ${CBIN}
	dd if=/dev/zero of=${REALIMAGE} bs=512 count=${NBLKS}
	vnconfig -v -c ${VND} ${REALIMAGE}
	disklabel -w ${VND} ${DISKTYPE}
	newfs ${NEWFSARGS} ${VND_RDEV}
	fsck ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}

rd_teardown:
	@@df -i ${MOUNT_POINT}
	-umount ${MOUNT_POINT}
	-vnconfig -u ${VND}
	cp ${REALIMAGE} ${IMAGE}
	rm ${REALIMAGE}

unconfig:
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}
	-/bin/rm -f ${IMAGE}

.PRECIOUS:	${IMAGE}

a68 7
do_files:
	mtree -def ${MTREE} -p ${MOUNT_POINT}/ -u
	TOPDIR=${TOP} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} \
	    REV=${REV} TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    RELEASEDIR=${RELEASEDIR} sh ${UTILS}/runlist.sh ${LISTS}
	rm ${MOUNT_POINT}/${CBIN}

d72 2
a73 1
	    *.o *.lo *.c bsd bsd.rd bsd.gz bsd.strip floppy*.fs rdsetroot
@


1.28
log
@Switch to using MI installboot, after a conversation with stsp.  He will
need this soon.
install tested by jsg
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2013/10/18 14:04:05 deraadt Exp $
a52 1
	cd ${.CURDIR}/../../../sys/arch/sparc64/conf && config ${RAMDISK}
d54 2
a55 2
	    ${MAKE} clean && COPTS=-Os exec ${MAKE}
	cp ${.CURDIR}/../../../sys/arch/sparc64/compile/${RAMDISK}/bsd bsd
@


1.27
log
@cleanup elfrdsetroot references; ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2013/10/15 22:46:53 deraadt Exp $
a22 1
INSTALLBOOT?=	/usr/mdec/installboot -v
@


1.26
log
@We do not produce "core" files, so they do not need to be deleted.  they
have been *.core files for a very long time.  That's a lot of unlink()
calls saved.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2013/10/14 00:00:12 guenther Exp $
d30 1
a30 3
RDSETROOT=	elfrdsetroot

CLEANFILES+=	bsd.rd_unz elfrdsetroot
d49 1
a49 1
bsd.rd_unz: bsd ${IMAGE} ${RDSETROOT}
d51 1
a51 1
	${.OBJDIR}/${RDSETROOT} bsd.rd_unz ${IMAGE}
d62 2
a63 2
elfrdsetroot: ${TOP}/../common/elfrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o elfrdsetroot \
a100 3

rdsetroot:	${TOP}/../../common/rdsetroot.c
	${HOSTCC} -o rdsetroot ${TOP}/../../common/rdsetroot.c
@


1.25
log
@Turn on the distrib lib bits in crunchgen by setting SRCLIBDIR.
Add the new files to the clean target's rm list.

"why not get it tested?" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2013/08/01 16:39:05 stsp Exp $
d139 1
a139 1
	/bin/rm -f core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}*.cache \
@


1.24
log
@Create more inodes on the sparc64 installation ramdisk. The new ratio matches
what most other architectures are using. Prevents problems during installation
or upgrade when a few files need to be added to the ramdisk, such as additional
disk device nodes in /dev. Tested with full make build, release, install cycle.
ok deraadt halex
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2011/07/08 21:39:32 drahn Exp $
d129 1
a129 1
	${MAKE} -f ${CBIN}.mk all
d140 1
@


1.23
log
@Allow the elf rdsetroot operation to function on 32 bit and 64 bit binaries.
Enables developers to build arm ramdisk kernels on amd64 archs
OK deraadt@@ 'looked fine' miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2011/04/18 16:52:10 thib Exp $
d43 1
a43 1
NEWFSARGS_RD=	-i 8192 -c ${NBLKS}
@


1.22
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2011/04/15 03:11:22 deraadt Exp $
d65 3
a67 1
	${HOSTCC} ${HOSTCFLAGS} -o elfrdsetroot ${TOP}/../common/elfrdsetroot.c
@


1.21
log
@No need to make depend kernels; ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2009/04/17 03:58:55 deraadt Exp $
d13 1
a13 1
VND?=		svnd0
@


1.20
log
@For SHA256 hashes to be ready to go onto the install media, we must
build the sets before we build the media.  While there we can get rid
of DESTDIR/snapshot too, and simply install straight into RELEASEDIR.
(This also ends up saving an astounding amount of traffic/latency in a nfs
environment)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2009/04/12 16:12:53 deraadt Exp $
d58 1
a58 1
	    ${MAKE} clean && ${MAKE} depend && COPTS=-Os ${MAKE}
@


1.19
log
@run make depend for kernel, too; ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2008/12/02 03:20:58 deraadt Exp $
d112 1
d115 2
a116 1
	cp bsd.rd ${DESTDIR}/snapshot/bsd.rd
d133 1
a133 1
	    sh ${UTILS}/runlist.sh ${LISTS}
@


1.18
log
@commit with rdsetroot now accepting the filesystem as a 2nd arg
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2008/12/02 01:01:07 deraadt Exp $
d58 1
a58 1
	    ${MAKE} depend && ${MAKE} clean && COPTS=-Os ${MAKE}
@


1.17
log
@no longer need to compile rdsetroot with DEBUG
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2008/01/11 10:16:40 espie Exp $
d53 1
a53 1
	${.OBJDIR}/${RDSETROOT} bsd.rd_unz < ${IMAGE}
@


1.16
log
@cleanup: make -> ${MAKE} consistenly.
zap extra subshells.

okay miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2007/06/17 00:28:21 deraadt Exp $
d103 1
a103 1
	${HOSTCC} -DDEBUG -o rdsetroot ${TOP}/../../common/rdsetroot.c
@


1.15
log
@Stop using disklabel -r.  The disklabel code does not know all the semantics
for pushing disklabels onto the disk (and besides that, it is buggy and
unreadable crap); thanks for help from krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2007/04/13 17:34:40 millert Exp $
d58 1
a58 1
	    make depend && make clean && COPTS=-Os make
d125 1
a125 1
	make -f ${CBIN}.mk all
@


1.14
log
@Update install media generation to the new semantics of the -c flag.
Also replace "newfs -O" with "newfs -O 0" now that -O takes an option.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2007/04/09 14:55:11 millert Exp $
d70 1
a70 1
	disklabel -w -r ${VND} ${DISKTYPE}
d90 1
a90 1
	disklabel -w -r ${VND} ${DISKTYPE}
@


1.13
log
@Add -n to gzip flags.  Save a few bytes since we no longer save
the uncompressed filename in the gzip header.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2007/02/16 16:56:22 tsi Exp $
d43 2
a44 2
NEWFSARGS_RD=	-i 8192 -c 80
NEWFSARGS_FD=	-i 524288 -c 80
d73 1
a73 1
	newfs ${NEWFSARGS} ${NEWFSARGS_RD} -s ${NBLKS} ${VND_RDEV}
@


1.12
log
@s/GZIP/GZIPCMD/g in `make release` structure to avoid conflict with gzip's
use of a GZIP environment variable for extra command flags.

ok deraadt@@, millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2002/06/09 05:53:55 todd Exp $
d22 1
a22 1
GZIPFLAGS?=	-9f
@


1.11
log
@knf
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2002/05/20 16:23:54 fgsch Exp $
d21 1
a21 1
GZIP?=		gzip
d49 1
a49 1
	${GZIP} -c ${GZIPFLAGS} bsd.strip > bsd.rd
@


1.10
log
@byebye ecoffrdsetroot left over; miod@@ ok.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2002/05/07 18:44:05 deraadt Exp $
d75 1
a75 1
 
@


1.9
log
@fix conf file generation
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2002/04/30 09:18:20 deraadt Exp $
a62 3

ecoffrdsetroot:	${TOP}/ecoffrdsetroot.c
	${HOSTCC} ${HOSTCFLAGS} -o ecoffrdsetroot ${TOP}/ecoffrdsetroot.c
@


1.8
log
@use makeconf.awk throughout, delete instbin in Makefile
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2002/04/28 18:28:34 deraadt Exp $
a8 1
CRUNCHCONF?=    ${.CURDIR}/${CBIN}.conf
d120 4
a123 1
${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CRUNCHCONF}
d125 1
a125 1
	-c ${CBIN}.c -e ${CBIN} -m ${CBIN}.mk ${CRUNCHCONF}
@


1.7
log
@use single shared mtree.conf
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2002/04/26 00:25:51 deraadt Exp $
d133 1
@


1.6
log
@get runlist from the right place
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2002/04/25 22:10:28 deraadt Exp $
d25 1
a25 1
MTREE=		${.CURDIR}/../common/mtree.conf
@


1.5
log
@runlist.sh & list2sh.awk unification
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2002/04/21 17:56:59 deraadt Exp $
d10 1
d131 2
a132 1
	    REV=${REV} TARGDIR=${MOUNT_POINT} sh ${TOP}/common/runlist.sh ${LISTS}
@


1.4
log
@where is the config file now...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2002/04/21 07:30:58 deraadt Exp $
a36 1
	@@echo "all done"
@


1.3
log
@bit by bit i will fix this madness
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2001/10/12 19:04:56 jason Exp $
d9 1
@


1.2
log
@repair (actually populate the ramdisk with devices and such)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2001/10/10 04:21:02 deraadt Exp $
d8 1
a8 3
CRUNCHCONF?=    ${TOP}/common/${CBIN}.conf
CRUNCHCONF?=    ${.CURDIR}/../common/${CBIN}.conf
LISTS?=		${.CURDIR}/../common/list ${.CURDIR}/list
@


1.1
log
@does this work?  I do not know yet
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2001/09/18 17:35:00 jason Exp $
d33 2
a90 2

${IMAGE}: ${CBIN} rd_setup do_files rd_teardown
@

