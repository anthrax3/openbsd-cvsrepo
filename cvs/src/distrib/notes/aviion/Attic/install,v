head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.1.0.26
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.24
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.22
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.18
	OPENBSD_5_0:1.1.0.20
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.16
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.14
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.10
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.12
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.6
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.01.07.50.06;	author deraadt;	state dead;
branches;
next	1.5;
commitid	Rh8AZFtVMVCiwPts;

1.5
date	2014.03.19.01.59.48;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2013.12.04.23.20.19;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.01.23.32.09;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.15.13.28.07;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.15.20.18.23;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@dnl	$OpenBSD: install,v 1.5 2014/03/19 01:59:48 tedu Exp $
OpenBSDInstallPrelude

There are several ways to install OpenBSD onto a disk. The easiest way
in terms of preliminary setup is to use the OpenBSD ramdisk kernel that can
be booted over the network, or from an existing DG/UX setup.


Booting from Network:

OpenBSD/MACHINE can boot off any network interface supported by the machine
PROM (SCM), even if the device itself is not supported by OpenBSD.

Your MACHINE expects to be able to download the installation kernel via TFTP,
after having acquired its IP address through reverse ARP when instructed to
boot from a network interface.  It will look on the TFTP server for a filename
composed of the machine's IP address in hexadecimal.  For example, a machine
which has been assigned IP address 130.115.144.11, will make a TFTP request
for `8273900B'.

Normally, this file is a symbolic link to the OpenBSD installation kernel in
ECOFF format, bsd.rd.xcf, which should be located in a place where the TFTP
daemon can find it (remember, many TFTP daemons run in a chroot'ed
environment).

The kernel can then be booted with:

    SCM> b inen()

(replace `inen' with the device name for your Ethernet interface, such as
 `dgen').

On some systems with older PROM, due to a PROM limitation, attempting to
load the kernel in memory past 3MB will fail, with the PROM seemingly stuck.
If all attempts to load the kernel image fail at the same byte count, but
pressing ^C brings the SCM> prompt back, it will be necessary to load the
kernel in two steps, by first loading the boot loader (which fits within
3MB), and have it download the kernel.

In that case, the symbolic link in the TFTP server should point to `boot'
instead of `bsd.rd.xcf'. The bootloader will then attempt to load the
kernel from an NFS server, after issueing a RARP query (to get an IP
address) and a BOOTPARAMS query (to know which NFS server to connect to).

For further details about diskless boot can be found in the diskless(8)
manual page, which is available online at
    http://www.openbsd.org/cgi-bin/man.cgi?query=diskless


Booting from DG/UX:

The OpenBSD installation kernel can be booted from the DG/UX boot loader, if
installed on a DG/UX partition.  This is as easy as copying bsd.rd.xcf to
a DG/UX partition, and boot it explicitely, as in:

    SCM> b sd()bsd.rd.xcf

if it the installation kernel has been copied to the root partition, or

    SCM> b sd()partition_name:/bsd.rd.xcf

if it has been copied to a different partition (such as `usr').


Installing using the DG/UX or network boot procedure:

OpenBSDInstallPart2

        Boot your machine from the installation media as described above.

        It will take a while to load the kernel especially from a slow
        network connection, most likely more than a minute.  If some action
        doesn't eventually happen, or the spinning cursor has stopped and
        nothing further has happened, either your boot media is bad, your
        diskless setup isn't correct, or you may have a hardware or
        configuration problem.

OpenBSDInstallPart3(,"sd0")

OpenBSDInstallPart4

OpenBSDInstallPart5

OpenBSDInstallPart6({:-CD-ROM, NFS, -:})

OpenBSDURLInstall

OpenBSDCDROMInstall

OpenBSDNFSInstall
							
OpenBSDDISKInstall(,{:-only -:})

OpenBSDCommonInstall

OpenBSDInstallWrapup

OpenBSDCongratulations



OpenBSDUnattendedInstallation
@


1.5
log
@you are still welcome to install from tape, but as befits an elite master
of unix arcana, we will not condescend to tell you how. why spoil the fun?
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.4 2013/12/04 23:20:19 jmc Exp $
@


1.4
log
@committing uwe's autoinstall notes, as requested by deraadt;
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.3 2013/11/01 23:32:09 miod Exp $
a64 3
dnl document tape boot once the bootloader is st(4) capable
dnl
dnl Installing using the tape or netboot procedure:
d84 1
a84 1
OpenBSDInstallPart6({:-CD-ROM, tape, NFS, -:})
a92 3

dnl OpenBSDTAPEInstall(2) once we have bootable tapes
OpenBSDTAPEInstall
@


1.3
log
@Document the stupid behaviour of older PROM which fail to load binaries
past 3MB but fail to abort with an error message, and instead spin until
^Ced. This should only affect netbooting bsd.rd; explain lightly how to
use the boot loader and load the kernel from NFS.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.2 2013/10/15 13:28:07 miod Exp $
d105 4
@


1.2
log
@First shot at installation media for aviion, and updated documentation.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.1 2007/03/15 20:18:23 miod Exp $
d26 23
d63 1
@


1.1
log
@OpenBSD/aviion notes draft.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.20 2007/03/01 19:24:45 miod Exp $
d4 4
a7 3
There is currently no support for disk controllers in OpenBSD/MACHINE.
Because of this, the only way to use OpenBSD/MACHINE is to run as a
diskless system, with the whole system installed on an NFS filesystem.
a12 81
The OpenSBD network boot loader, netboot, expects a Sun-compatible diskless
setup (bootparams and NFS root). Thus it will be necessary to set up a
complete diskless client configuration on a server. If the boot server is
an OpenBSD system, the diskless(8) manual page will provide detailed
information on the process.

If the server runs another operating system, the setup instructions will
likely be available as part of the documentation that came with it (on
SunOS systems, add_client(8) and the Sun System/Networks administrators
guide constitute a good start; on Solaris systems, share(1M) is a good
starting point as well).

The set up is similar to SunOS diskless setup, but not identical, because
the Sun setup assumes that the bootblocks load a kernel image, which then
uses NFS to access the exported root partition, while the OpenBSD bootblocks
use internal NFS routines to load the kernel image directly from the
exported root partition.

Please understand that no one gets this right the first try, since
there is a lot of setup and all the host daemons must be running and
configured correctly.  If you have problems, extract the diskless(8)
manpage, find someone who's been through it before and use the host
syslog and tcpdump(8) to get visibility of what's happening (or not).

Your MACHINE expects to be able to download a second stage bootstrap
program via TFTP after having acquired its IP address through RevARP when
instructed to boot "over the net". It will look for a filename composed of
the machine's IP address in hexadecimal. For example, a machine which has
been assigned IP address 130.115.144.11, will make a TFTP request for
`8273900B'.

Normally, this file is a symbolic link to the OpenBSD network boot loader,
which should be located in a place where the TFTP daemon can find it
(remember, many TFTP daemons run in a chroot'ed environment).

After the boot program has been loaded into memory and given control by
the PROM, it starts locating the machine's remote root directory through
the BOOTPARAM protocol. First a BOOTPARAM WHOAMI request is broadcast
on the local net. The answer to this request (if it comes in) contains
the client's name. This name is used in the next step, a BOOTPARAM GETFILE
request -- sent to the server that responded to the WHOAMI request --
requesting the name and address of the machine that will serve the client's
root directory, as well as the path of the client's root on that server.

Finally, this information (if it comes in) is used to issue a REMOTE MOUNT
request to the client's root filesystem server, asking for an NFS file
handle corresponding to the root filesystem. If successful, the boot
program starts reading from the remote root filesystem in search of the
kernel which is then read into memory.

Unpack `base{:--:}OSrev.tgz' and `etc{:--:}OSrev.tgz' on the server in the root directory
for your target machine. If you elect to use a separately NFS-mounted
filesystem for `/usr' with your diskless setup, make sure the "./usr" base
files in base{:--:}OSrev.tgz end up in the correct location. One way to do this is
to temporarily use a loopback mount on the server, re-routing <root>/usr to
your server's exported OpenBSD "/usr" directory. Also put the kernel and
the install/upgrade scripts into the root directory.

A few configuration files need to be edited:

	<root>/etc/hosts
		Add the IP addresses of both server and client.

	<root>/etc/myname
		This files contains the client's hostname; use the same
		name as in <root>/etc/hosts.

	<root>/etc/mygate
		This files contains the client's default gateway. It should
		be either an IP address or a name found in the `hosts' file.

	<root>/etc/fstab
		Enter the entries for the remotely mounted filesystems.
		For example:
			server:/export/root/client       /     nfs  rw 0 0
			server:/export/exec/MACHINE.OpenBSD /usr  nfs  rw 0 0

OpenBSDInstNFS

You can now boot the machine from the network by specifying the Ethernet
interface as the boot device, as in
d14 58
a71 1
    SCM> b inen()
d73 2
a74 1
to boot from the onboard interface, or
d76 1
a76 1
    SCM> b hken()
d78 1
a78 1
to boot from the Hawk Ethernet card.
d80 1
@

