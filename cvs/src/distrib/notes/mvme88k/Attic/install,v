head	1.32;
access;
symbols
	OPENBSD_5_5:1.31.0.2
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.30.0.2
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.29.0.2
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.28.0.12
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.8
	OPENBSD_5_0:1.28.0.10
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.6
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.28.0.4
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.28.0.2
	OPENBSD_4_7_BASE:1.28
	OPENBSD_4_6:1.27.0.4
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.25.0.2
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.24.0.2
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.20.0.4
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.6
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.4
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@# @;


1.32
date	2014.03.18.22.36.28;	author miod;	state dead;
branches;
next	1.31;

1.31
date	2013.12.04.23.20.19;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2013.05.12.12.15.59;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2013.02.09.19.48.37;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2010.03.16.17.23.09;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2009.05.13.18.38.29;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2009.05.12.21.06.50;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2009.02.15.13.32.47;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2008.08.05.22.58.01;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2008.04.02.21.53.15;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2008.03.10.21.38.28;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2007.12.15.21.28.07;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2007.03.01.19.24.45;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.21.22.32.06;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2004.09.20.17.53.28;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.17.09.25.10;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.16.08.25.00;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.09.13.32.50;	author todd;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.28.13.02.38;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.13.00.44.52;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.03.22.40.19;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.30.10.45.45;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.06.23.34.01;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.10.21.04.06;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.04.00.18.08;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.09.05.53.54;	author todd;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.17.23.32.12;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.19.00.33.11;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.28.15.00.46;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.24.05.05.42;	author smurph;	state Exp;
branches;
next	1.2;

1.2
date	99.10.10.22.56.09;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	98.12.17.02.16.33;	author smurph;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@dnl	$OpenBSD: install,v 1.31 2013/12/04 23:20:19 jmc Exp $
OpenBSDInstallPrelude

There are several ways to install OpenBSD onto a disk. The easiest way
in terms of preliminary setup is to use the OpenBSD ramdisk kernel that can
be booted from tape.

Alternatively, if the MACHINE is hooked up to a network, it is possible
to set up another machine as a server for diskless setup, which is a
convenient way to install on a machine whose disk does not currently
hold a usable operating system.
This is difficult to get set up correctly the first time, but easy to
use afterwards.  (See ``Installing using a diskless setup'' below).


Boot device restrictions:

The BUG firmware will not necessarily be able to boot from any device in
the system.

Depending on the BUG firmware version, the following limitations may apply:
- bootable SCSI tapes must have device ID 4 or 5.
- bootable SCSI disks must have device ID 0, 1, 2 or 3.
- only the first two MVME328 cards in a system (CLUN 6 and 7) can be
  used as the boot controller.


Booting from the Installation Media:

Prior to attempting an installation, everything of value on the target
system should be backed up.  While installing OpenBSD does not necessarily
wipe out all the partitions on the hard disk, errors during the install
process can have unforeseen consequences and will probably leave the system
unbootable if the installation process is not completed. Availability
of the installation media for the prior installation, such as a Motorola
SystemV/MACHINE tape is always a good insurance, should it be necessary
to "go back" for some reason.

After taking care of all that, the system should be brought down gracefully
using the shutdown(8) and/or halt(8) commands, which will eventually go
back to the ``BUG>'' prompt (it may be necessary to send a break if the
system is completely halted).


Booting from SCSI tape:

Bootable tapes can be booted with the following command at the prompt:

    187-Bug> BO xx yy

Where `xx' is the SCSI controller number (00 for the built-in SCSI
controller on MVME187 and MVME197), and `yy' is the encoding for the SCSI
device ID, which varies between controllers.

Recent BUG can list the available disk and tape controllers, using the
"IOT;H" command:

    187-Bug>IOT;H
    I/O Controllers Available:
    CLUN  CNTRL-TYPE  CNTRL-Address  N-Devices
       0  VME187      $FFF47000      *
       6  VME328      $FFFF9000      *

In this example, the built-in controller, as well as an external MVME328
controller, are available.

The encoding for the drive ID is as follows:
- MVME187 and MVME197 built-in controller and MVME327A SCSI controller:
    'yy' is ten times the device ID.
- MVME328 SCSI controller:
    'yy' is eight times the device ID, written in hexadecimal
- MVME350 tape controller:
    'yy' is always zero, as this controller only supports one tape drive.

For example, booting from a tape drive using SCSI ID #5 will be done with:
    187-Bug> BO 00 50
using the MVME187 built-in controller, but with:
    187-Bug> BO 06 28
using an MVME328 board.

Note that OpenBSD/MACHINE can boot off any controller supported by the BUG,
even if it is not supported by OpenBSD.


Booting from Network:

OpenBSD/MACHINE can boot off any network card supported by the BUG, even
if the card itself is not supported by OpenBSD. Two network boot loaders
are provided: one for Sun-compatible diskless setup (bootparams and NFS
root), and a simpler version limited to TFTP support.

The Sun-compatible network bootloader currently only supports the MVME187
and MVME197 on-board interface, as well as MVME376 boards. It will not be
able to boot from any other Ethernet controller (such as MVME374). On
systems lacking network support in the BUG, the Sun-compatible network
bootloader may be loaded as S-Records.

The tftp bootloader can only be used with a network boot capable BUG, and
will boot from any BUG-supported Ethernet controller.

If you plan to use the Sun-compatible bootloader, "netboot", it will be
necessary to set up a complete diskless client configuration on a server. If
the boot server is an OpenBSD system, the diskless(8) manual page will
provide detailed information on the process.

If the server runs another operating system, the setup instructions will
likely be available as part of the documentation that came with it (on
SunOS systems, add_client(8) and the Sun System/Networks administrators
guide constitute a good start; on Solaris systems, share(1M) is a good
starting point as well).

Using the TFTP-compatible bootloader, "tftpboot", only requires a TFTP
server to be installed on the network, with both the tftpboot file and
the kernel image (usually bsd.rd) available from it.

The list of BUG-supported Ethernet controllers is available with the
"NIOT;A" command. For example:

    187-Bug> NIOT;A
    Network Controllers/Nodes Supported
    CLUN  DLUN  Name      Address
       0     0  VME187    $FFF46000
       2     0  VME376    $FFFF1200
       3     0  VME376    $FFFF1400
       4     0  VME376    $FFFF1600
       5     0  VME376    $FFFF5400
       6     0  VME376    $FFFF5600
       7     0  VME376    $FFFFA400
      10     0  VME374    $FF000000
      11     0  VME374    $FF100000
      12     0  VME374    $FF200000
      13     0  VME374    $FF300000
      14     0  VME374    $FF400000
      15     0  VME374    $FF500000

The "NIOT;H" lists only the available controllers in the machine. For
example, on an MVME187 system with no external network card:

    187-Bug> NIOT;H
    Network Controllers/Nodes Available
    CLUN  DLUN  Name      Address
       0     0  VME187    $FFF46000

If the BUG does not support the NIOT command (MVME187 BUG prior to version
1.3 doesn't), then it has no support for netbooting, and you'll have to
use the S-Records bootloader, described later in this document.

If you know the IP address for the MACHINE and the TFTP server,
you can directly provide the boot loader's filename and the kernel name
on the commandline:

     187-Bug> NBO 00 00 192.168.0.68 192.168.0.1 netboot.mvme88k bsd.rd
or
     187-Bug> NBO 00 00 192.168.0.68 192.168.0.1 tftpboot.mvme88k bsd.rd

where, in this example, 192.168.0.68 is the address of the MACHINE computer,
and 192.168.0.1 the address of the diskless server.

Specifying both IP addresses as 0.0.0.0 will cause them to be obtained
with reverse ARP (for the MACHINE address) and bootp or dhcp (for the
server address):

     187-Bug> NBO 00 00 0.0.0.0 0.0.0.0 netboot.mvme88k bsd.rd
or
     187-Bug> NBO 00 00 0.0.0.0 0.0.0.0 tftpboot.mvme88k bsd.rd

If you intend to netboot very often, these parameters can be made permanent
by filling the "NIOT" parameters and save them to NVRAM.

Be sure to provide the correct values for Controller LUN and Device LUN (as
listed in the "NIOT;H" output); also the "Boot File Load Address" and
"Boot File Execution Address" need to match (there is no reason to change
the default value of 001F0000). The "Boot File Name" must match the name
of the netboot file on the server (copying it as "netboot.mvme88k" or
"tftpboot.mvme88k" is usually a wise choice). Finally, "Argument File Name"
needs to be set to the kernel name: "bsd.rd" in order to boot the
installation kernel, or "bsd" for the regular kernel.

Here are acceptable values for a 187 card using the built-in controller:

    187-Bug> NIOT
    Controller LUN =00? 
    Device LUN     =00? 
    Node Control Memory Address =01FF0000? 
    Client IP Address      =0.0.0.0? 
    Server IP Address      =0.0.0.0? 
    Subnet IP Address Mask =255.255.255.0? 
    Broadcast IP Address   =255.255.255.255? 
    Gateway IP Address     =0.0.0.0? 
    Boot File Name ("NULL" for None)     =? netboot.mvme88k
    Argument File Name ("NULL" for None) =? bsd.rd
    Boot File Load Address         =001F0000?
    Boot File Execution Address    =001F0000?
    Boot File Execution Delay      =00000000? 
    Boot File Length               =00000000? 
    Boot File Byte Offset          =00000000? 
    BOOTP/RARP Request Retry       =00? 
    TFTP/ARP Request Retry         =00? 
    Trace Character Buffer Address =00000000? 
    BOOTP/RARP Request Control: Always/When-Needed (A/W)=W? 
    BOOTP/RARP Reply Update Control: Yes/No (Y/N)       =Y? 

If you change the NIOT configuration, you will be asked whether you want to
make these changes permanent. Do not answer Y unless you plan to netboot
this board very often; be sure to have the ENV settings use a correct
address for the NIOT parameters block in this case. A valid setting is:

    Network Auto Boot Configuration Parameters Pointer (NVRAM) =
        00000000? FFFC0080

for example.

Once the NIOT parameters are set, it should be possible to boot the machine
from the server with a shortened NBO command:

    187-Bug> NBO 00 00

Booting from S-Records:

If you plan to use the S-Records bootloader, "sboot", it will be
necessary to set up a complete diskless client configuration on a server.
Refer to the short description above for details.

Using a terminal emulator able to read files from the local machine and
send their contents over the serial link, such as cu(1) and tip(1) - both
being available on OpenBSD - the MACHINE workstation should be put in
S-Records receive mode, with the LO command followed by the serial port
where S-Records are to be received (usually 0 for the console port) at the
BUG prompt:

    188-Bug> LO 0

Then, then contents of the ``sboot'' file should be sent from the terminal
emulator (using tip(1) or cu(1), this is done by entering ``~$'', and then,
at the ``Local command?'' prompt, ``cat sboot''). This operation will take
a significant time: at the default 9600 bps speed, sending the S-Records
take almost three minutes.

If a prompt does not come back after a few minutes, it is likely that the
S-Records download is hosed. In this case, the MACHINE board should be reset
before a further attempt to download the S-Records is made.

Once the transfer is finished, entering `GO' at the BUG prompt will start
the S-Records boot loader. It will list the available network interfaces
and will prompt for a filename to boot:

    188-Bug>GO
    Effective address: 00680000

    >> OpenBSD/mvme88k sboot [1.1]
    Network Controllers/Nodes Supported
    Driver CLUN  DLUN  Name      Address    Ethernet Address
    le0       2     0  VME376    $ffff1200  00:00:77:83:ac:56
    le1       3     0  VME376    $ffff1400  00:00:77:83:83:ce
    boot:

By default, the first interface listed will be used. To boot off a different
interface, simply prefix the filename with the interface driver name (first
column in the interface display), followed by a colon. For example, to boot
`bsd.rd' from the second interface, one should enter:

    boot: le1:bsd.rd

This will cause the usual Sun-compatible netboot processing to use the `le1'
interface:

    boot: client IP address: 10.0.1.138
    boot: client name: bourbouillou
    root addr=10.0.1.1 path=/netboot/bourbouillou/root
    3262752+389824 [52+70512+58011]=0x39b394
    Start @@ 0x10000
    Controller Address 0xffff1400
    ...



Installing using the tape or netboot procedure:

OpenBSDInstallPart2

	Boot your machine from the installation media as described above.

	It will take a while to load the kernel especially from a slow
	network connection, most likely more than a minute.  If some action
	doesn't eventually happen, or the spinning cursor has stopped and
	nothing further has happened, either your boot media is bad, your
	diskless setup isn't correct, or you may have a hardware or
	configuration problem.

OpenBSDInstallPart3(,"sd0")

OpenBSDInstallPart4

OpenBSDInstallPart5

OpenBSDInstallPart6({:-CD-ROM, tape, NFS, -:})

OpenBSDURLInstall

OpenBSDCDROMInstall
		
OpenBSDNFSInstall

OpenBSDDISKInstall(,{:-only -:})

OpenBSDTAPEInstall(3)

OpenBSDCommonInstall

OpenBSDInstallWrapup

OpenBSDCongratulations



Net Boot or Diskless Setup Information:

The set up is similar to SunOS diskless setup, but not identical, because
the Sun setup assumes that the bootblocks load a kernel image, which then
uses NFS to access the exported root partition, while the OpenBSD bootblocks
use internal NFS routines to load the kernel image directly from the
exported root partition.

Please understand that no one gets this right the first try, since
there is a lot of setup and all the host daemons must be running and
configured correctly.  If you have problems, extract the diskless(8)
manpage, find someone who's been through it before and use the host
syslog and tcpdump(8) to get visibility of what's happening (or not).

Your MACHINE expects to be able to download a second stage bootstrap
program via TFTP after having acquired its IP address through RevARP when
instructed to boot "over the net". It will look for the filename specified
on the NBO commandline, or via the NIOT parameters.

Normally, this file is a symbolic link to an appropriate second-stage
boot program, which should be located in a place where the TFTP daemon
can find it (remember, many TFTP daemons run in a chroot'ed environment).
You can find the boot program in `/usr/mdec/netboot' in the OpenBSD/MACHINE
distribution.

After the boot program has been loaded into memory and given control by
the BUG, it starts locating the machine's remote root directory through
the BOOTPARAM protocol. First a BOOTPARAM WHOAMI request is broadcast
on the local net. The answer to this request (if it comes in) contains
the client's name. This name is used in the next step, a BOOTPARAM GETFILE
request -- sent to the server that responded to the WHOAMI request --
requesting the name and address of the machine that will serve the client's
root directory, as well as the path of the client's root on that server.

Finally, this information (if it comes in) is used to issue a REMOTE MOUNT
request to the client's root filesystem server, asking for an NFS file
handle corresponding to the root filesystem. If successful, the boot
program starts reading from the remote root filesystem in search of the
kernel which is then read into memory.

Unpack `base{:--:}OSrev.tgz' and `etc{:--:}OSrev.tgz' on the server in the root directory
for your target machine. If you elect to use a separately NFS-mounted
filesystem for `/usr' with your diskless setup, make sure the "./usr" base
files in base{:--:}OSrev.tgz end up in the correct location. One way to do this is
to temporarily use a loopback mount on the server, re-routing <root>/usr to
your server's exported OpenBSD "/usr" directory. Also put the kernel and
the install/upgrade scripts into the root directory.

A few configuration files need to be edited:

	<root>/etc/hosts
		Add the IP addresses of both server and client.

	<root>/etc/myname
		This files contains the client's hostname; use the same
		name as in <root>/etc/hosts.

	<root>/etc/fstab
		Enter the entries for the remotely mounted filesystems.
		For example:
			server:/export/root/client       /     nfs  rw 0 0
			server:/export/exec/MACHINE.OpenBSD /usr  nfs  rw 0 0

OpenBSDInstNFS



OpenBSDUnattendedInstallation
@


1.31
log
@committing uwe's autoinstall notes, as requested by deraadt;
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.30 2013/05/12 12:15:59 miod Exp $
@


1.30
log
@Install and document the S-Records boot loader.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.29 2013/02/09 19:48:37 miod Exp $
d380 4
@


1.29
log
@Stop using the name `miniroot' when `bsd.rd' is implied. A few platforms
have a real miniroot to be dd'ed to the disk, and that's fine; but when
we are talking about booting bsd.rd (either from an existing setup, or the
network, or the cd-rom images), then refer to it as `installation kernel'.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.28 2010/03/16 17:23:09 miod Exp $
d93 6
a98 2
and MVME197 on-board interface, and will not be able to boot from any other
Ethernet controller. The tftp bootloader does not have this limitation and
d145 2
a146 1
1.3 doesn't), then it has no support for netbooting.
d217 58
@


1.28
log
@Jumbo commit for 4.7 installation instructions:
- do not mention tape as an installation media on systems where it is very
  unlikely that a tape drive can be connected to (i.e. anything with only
  USB as expansion capabilities)
- do not mention that fetching the installation sets from a partition is
  ``for upgrades only''. You may do this for installation, but of course
  you can not use a partition which will be newfs'ed for that purpose.
- mention ext2fs partitions as possible installation sets source only on
  platforms where the installation media actually can mount an ext2fs
  filesystem.
- stress the fact that the sparc miniroot image is a GENERIC kernel with
  a little on-disk filesystem, and not a RAMDISK kernel with a little
  in-memory filesystem, and thus must not be overwritten during installation
  (i.e. be careful if you repartition the disk the miniroot has been put on).
- more conv=sync -> conv=osync for tape setup instructions.
- model-specific layout changes on armish, loongson and socppc instructions.
- fix various typos and grammar mistaeks.

"sure" deraadt@@ (without eyeballing)
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.27 2009/05/13 18:38:29 miod Exp $
d172 1
a172 1
installation miniroot, or "bsd" for the regular kernel.
@


1.27
log
@Better disk partitioning details, especially for MBR + disklabel or
HFS + disklabel setups.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.26 2009/05/12 21:06:50 miod Exp $
d233 1
a233 1
OpenBSDInstallPart6({:-CD-ROM, NFS, -:})
@


1.26
log
@Try to catch up with installer changes in the installation notes.
Also, the per-platform features are moved to a common place, which makes
the MD layout easier to work on. m4.common is still a tangled mess of subtly
placed dnl, though...
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.25 2009/02/15 13:32:47 miod Exp $
d235 1
a235 3
OpenBSDFTPInstall

OpenBSDHTTPInstall
@


1.25
log
@Mention MVME327A
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.24 2008/08/05 22:58:01 miod Exp $
d227 1
a227 9
OpenBSDBootMsgs(,"sd0")

	You will next be asked for your terminal type.  If you are
	installing from a non-serial console, the default of "vt220"
	is correct.  If you are installing from a serial console
	you should choose the terminal type from amongst those listed.
	(If your terminal type is xterm, just use vt220.)

OpenBSDInstallPart3
d231 1
a231 1
OpenBSDInstallPart5(sd0)
d233 1
a233 1
OpenBSDInstallNet({:-CD-ROM, NFS, -:})
a238 2
OpenBSDTAPEInstall(3)

d245 3
a247 3
OpenBSDCommonFS(NFS)
		
OpenBSDCommonURL
a249 2

OpenBSDInstallWrapupPart2
@


1.24
log
@Better description of the installation steps:
- document questions in proper order: hostname before network configuration,
  DNS only if network is configured, sshd and ntpd, aperture only on
  machines which need it, serial console only on machines which need it.
  This is done by splitting the end of OpenBSDCommonURL in various
  macros, OpenBSDInstallWrapup, OpenBSDInstallAperture, OpenBSDInstallConsole
  and OpenBSDInstallWrapupPart2.
- use the above macros when appropriate, OpenBSDInstallWrapup* being
  mandatory on all arches.
- remove serial console configuration blurb on sparc and sparc64, it is
  handled by OpenBSDInstallConsole now.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.23 2008/04/02 21:53:15 miod Exp $
d21 1
a21 1
The following limitations apply:
d68 1
a68 1
- MVME187 and MVME197 built-in controller and MVME327 SCSI controller:
d81 2
a82 2
Note that OpenBSD/MACHINE can boot off any tape drive supported by the BUG,
even if its controller is not supported by OpenBSD.
@


1.23
log
@Rewrite the startup code for the mvme88k bootblocks, once again. Some of
them (especially the netboot ones) will now self-relocate, which makes
BUG configuration much simpler.

WARNING: for disk-based systems, you need to update bootxx and bootsd at the
same time. New bootsd will not run when loaded from an older bootxx.
This doesn't matter much since you need both with installboot.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.22 2008/03/10 21:38:28 miod Exp $
d258 4
@


1.22
log
@Suggest vt220 as a TERM value for serial-console-in-an-xterm setup everywhere
instead of a mix of vt100 and vt220.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.21 2007/12/15 21:28:07 miod Exp $
d84 1
d143 30
a172 8
Before netbooting, enter "NIOT" and fill the parameters. Be sure to provide
the correct values for Controller LUN and Device LUN (as listed in the
"NIOT;H" output); also the "Boot File Load Address" and "Boot File
Execution Address" need to be set to 00AF0000. The "Boot File Name" must
match the name of the netboot file on the server (copying it as
"netboot.mvme88k" or "tftpboot.mvme88k" is usually a wise choice). Finally,
"Argument File Name" needs to be set to "bsd.rd" in order to boot the
installation miniroot, rather than the regular kernel.
d187 2
a188 2
    Boot File Load Address         =001F0000? 00AF0000
    Boot File Execution Address    =001F0000? 00AF0000
d209 1
a209 1
from the server with the NBO command:
a211 13

or if you know the IP address for the MACHINE and the TFTP server,
you can directly provide the boot loader's filename and the kernel name
on the commandline:

     187-Bug> NBO 00 00 192.168.0.68 192.168.0.1 tftpboot.mvme88k bsd.rd

where, in this example, 192.168.0.68 is the address of the MACHINE computer,
and 192.168.0.1 the address of the diskless server.

If the BUG version does not understand the NIOT and NBO commands (most
MVME187 don't), there is currently no way to netboot.

@


1.21
log
@Mention MVME197
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.20 2007/03/01 19:24:45 miod Exp $
d219 5
a223 3
	You will next be asked for your terminal type.  You should choose
	the terminal type from amongst those listed.
	(If your terminal type is xterm, just use vt100).
@


1.20
log
@Your spring jumbo m4-fu. This time:
- mention comp contains an objective-C compiler too.
- rewrite InstallPrelude so that it will only output the ``know your drive
  geometry'' blurb if asked to, and for a specified disk type. Use it for
  non-IDE and non-SCSI disks only, otherwise the kernel is good enough to
  do the job without the users' help.
- similarily, adapt BootMsgs to make the second part of the geometry blurb
  optional, and to accept up to three disk types. Use this to report better
  disk names (i.e. no point saying an scsi disk would show up as sd0 on
  platforms which can't have scsi disks, or won't be able to boot from them).
- in InstallPart4, drop the part about block and fragment sizes in
  disklabel. The defaults are good, and you won't get to change them unless
  you switched to expert mode.
- the default answer to ``wanna get the ftp mirror list, unzel?'' is ``no'',
  so pressing enter to get it is not enough anymore (-:
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.19 2005/03/21 22:32:06 miod Exp $
d52 2
a53 2
controller on MVME187), and `yy' is the encoding for the SCSI device ID,
which varies between controllers.
d68 1
a68 1
- MVME187 built-in controller and MVME327 SCSI controller:
d92 3
a94 3
on-board interface, and will not be able to boot from any other Ethernet
controller. The tftp bootloader does not have this limitation and will boot
from any BUG-supported Ethernet controller.
@


1.19
log
@Sync tape install details with the install script, mostly a numbering
change for files on the tape.

Prompted by and discussed with claudio@@.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.18 2004/09/20 17:53:28 miod Exp $
d217 1
a217 1
OpenBSDBootMsgs
@


1.18
log
@Too much cut'n'paste in NIOT description cause confusion as the text
refers to ;H but shows ;A in examples; spotted by nick@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.17 2004/03/17 09:25:10 jmc Exp $
d235 1
a235 1
OpenBSDTAPEInstall(4)
@


1.17
log
@grammar, consistency fixes, and typos;
ok miod@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.16 2004/03/16 08:25:00 jmc Exp $
d134 1
a134 1
    187-Bug> NIOT;A
d144 1
a144 1
"NIOT;A" output); also the "Boot File Load Address" and "Boot File
@


1.16
log
@typos and consistency fixes;
ok miod@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.15 2004/02/09 13:32:50 todd Exp $
d41 1
a41 1
bakc to the ``BUG>'' prompt (it may be necessary to send a break if the
d89 1
a89 1
root), and a simpler version limited to tftp support.
d92 1
a92 1
on-board interface, and will not be able to boot from any other ethernet
d94 1
a94 1
from any BUG-supported ethernet controller.
d107 1
a107 1
Using the tftp-compatible bootloader, "tftpboot", only requires a tftp
d111 1
a111 1
The list of BUG-supported ethernet controllers is available with the
d190 1
a190 1
or if you know the IP address for the MACHINE and the tftp server,
@


1.15
log
@be accurate now that SunOS compat output does not exist in MAKEDEV; ok miod@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.14 2004/01/28 13:02:38 miod Exp $
d8 2
a9 2
Alternatively, if the MACHINE is hooked up in a network, it is possible
to setup another machine as a server for diskless setup, which is a
d97 1
a97 1
necessary to setup a complete diskless client configuration on a server. If
d280 1
a280 1
the client's name. This name is used in next step, a BOOTPARAM GETFILE
@


1.14
log
@Document the tftp bootloader, mention that the full-blown Sun-compatible
diskless bootloader only supports the 1x7 on-board ie(4), and remove the
blurb about warming up the scsi controller when netbooting.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.13 2004/01/13 00:44:52 miod Exp $
d314 1
a314 10
Now you must populate the `/dev' directory for your client. If the server
runs SunOS 4.x, you can simply change your working directory to `<root>/dev'
and run the MAKEDEV script: `sh MAKEDEV all' (this might require the edition
of MAKEDEV to change the PATH for it to work properly).

On SunOS 5.x systems, MAKEDEV can also be used, but there'll be error
messages about unknown user and groups. These errors are inconsequential
for the purpose of installing OpenBSD. However, you may want to correct them
if you plan to the diskless setup regularly. In that case, you may re-run
MAKEDEV on your OpenBSD machine once it has booted.
@


1.13
log
@Document a few BUG boot restrictions.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.12 2004/01/03 22:40:19 miod Exp $
d84 1
d86 9
a94 1
Installing using a diskless setup:
d96 2
a97 1
First, a diskless client configuration should be setup on a server. If
d107 6
a112 3
OpenBSD/MACHINE can boot off any network card supported by the BUG, even
if the card itself is not supported by OpenBSD. The list of BUG-supported
network controllers is available with the "NIOT;A" command. For example:
d142 1
a142 1
Before netbooting, enter "NIOT" and fill the parametrs. Be sure to provide
d147 3
a149 3
"netboot.mvme88k" is usually a wise choice). Finally, "Argument File Name"
needs to be set to "bsd.rd" in order to boot the installation miniroot,
rather than the regular kernel.
d186 2
a187 11
from the server with the NBO command. However, in some cases, netbooting
will prevent the OpenBSD kernel from probing the built-in SCSI controller
(if any) properly, so it is recommended to do a disk probe first:

    187-Bug> IOI;C
    187-Bug> IOI

This can take up to a couple of minutes, depending how many SCSI controllers
are found in the machine. Once the BUG prompt is back, you can safely
netboot:
	
d190 1
a190 1
or if you know the IP address for the MACHINE and the diskless server,
d194 1
a194 1
     187-Bug> NBO 00 00 192.168.0.68 192.168.0.1 netboot.mvme88k bsd.rd
@


1.12
log
@``device'' is not written ``devic''.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.11 2003/12/30 10:45:45 miod Exp $
d14 12
@


1.11
log
@Mention MVME188 again.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.10 2003/09/06 23:34:01 miod Exp $
d59 1
a59 1
    'yy' is eight times the devic ID, written in hexadecimal
@


1.10
log
@MD installation notes updates for 3.4, 3/3

Describe with much more details how to successfully boot from various
devices, including non-built-in ethernet or SCSI controllers; also hint
that most of the MVME147 and the MVME187 can not netboot at all.

This should be much, much more understandable (but we need to run this
through a drunk pvalchev@@ to be sure).
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.9 2003/08/10 21:04:06 miod Exp $
a34 2
dnl XXX 188 does not have built-in devices - will need slight changes once
dnl 188 support is back.
d40 2
a41 2
controller), and `yy' is the encoding for the SCSI device ID, which varies
between controllers.
d56 1
a56 1
- built-in controller and MVME327 SCSI controller:
d65 1
a65 1
using the built-in controller, but with:
d107 1
a107 2
example, if no external network card is present, only the built-in
controller will be reported:
d114 2
a115 2
If the BUG does not support the NIOT command (most MVME187 don't), then
it has no support for netbooting.
@


1.9
log
@A long-needed notes update for mvme88k...
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.8 2003/01/04 00:18:08 miod Exp $
d4 10
a13 10
There are several ways to install OpenBSD onto a disk. The easiest way in
terms of preliminary setup is to use the OpenBSD ramdisk kernel that can be
booted from tape.

Alternatively, if your MACHINE is hooked up in a network, it is possible to
setup another machine as a server for diskless setup, which is a convenient
way to install on a machine whose disk does not currently hold a usable
operating system.
This is difficult to get set up correctly the first time, but easy to use
afterwards (see the section `Installing using a diskless setup' below).
d22 4
a25 4
unbootable if the installation process is not completed. Availability of the
installation media for the prior installation, such as a Motorola
SystemV/MACHINE tape is always a good insurance, should it be necessary to
"go back" for some reason.
d28 3
a30 3
using the shutdown(8) and/or halt(8) commands, which will eventually go bakc
to the ``BUG>'' prompt (it may be necessary to send a break if the system is
completely halted).
d35 1
a35 1
dnl XXX 188 does not have built-in devices - will need quite a whack once
d39 1
a39 1
	187-Bug> bo xx yy
d42 2
a43 1
controller), and `yy' is ten times the tape drive ID.
d45 28
a72 3
For example, booting from a tape drive using SCSI id 4 on the built-in
controller:
	187-Bug> bo 00 40
d77 3
a79 3
First, a diskless client configuration should be setup on a server. If the
boot server is an OpenBSD system, the diskless(8) manual page will provide
detailed information on the process.
d82 98
a179 8
likely be available as part of the documentation that came with it (on SunOS
systems, add_client(8) and the Sun System/Networks administrators guide
constitute a good start; on Solaris systems, share(1M) is a good starting
point as well).

Second, the MACHINE workstation should then be setup using the NIOT command
at the BUG prompt. The ``Load Address'' value should be 0xAF0000, and the
``Execution Address'' value should be 0xAF0000 as well.
d181 7
a187 4
Then, it should be possible to boot the machine from the server by entering
the NBO command at the BUG prompt:
	
	187-Bug> nbo 00 00 bsd.rd
d246 14
a259 16
Please understand that no one gets this right the first try, since there is
a lot of setup and all the host daemons must be running and configured
correctly.  If you have problems, extract the diskless(8) manpage, find
someone who's been through it before and use the host syslog and tcpdump(8)
to get visibility of what's happening (or not).

Your MACHINE expects to be able to download a second stage bootstrap program
via TFTP after having acquired its IP address through RevARP when instructed
to boot "over the net". It will look for a filename composed of the
machine's IP address, followed by the machine's architecture, separated by a
period. For example, a MACHINE board which has been assigned IP address
130.115.144.11, will make an TFTP request for `8273900B.MACHINE'. Normally,
this file is a symbolic link to an appropriate second-stage boot program,
which should be located in a place where the TFTP daemon can find it
(remember, many TFTP daemons run in a chroot'ed environment).

d263 8
a270 8
After the boot program has been loaded into memory and given control by the
BUG, it starts locating the machine's remote root directory through the
BOOTPARAM protocol. First a BOOTPARAM WHOAMI request is broadcast on the
local net. The answer to this request (if it comes in) contains the client's
name. This name is used in next step, a BOOTPARAM GETFILE request -- sent to
the server that responded to the WHOAMI request -- requesting the name and
address of the machine that will serve the client's root directory, as well
as the path of the client's root on that server.
d274 3
a276 3
handle corresponding to the root filesystem. If successful, the boot program
starts reading from the remote root filesystem in search of the kernel which
is then read into memory.
@


1.8
log
@Various typos and inaccuracies; David Krause
@
text
@d1 143
a143 47
dnl	$OpenBSD$
Installing OpenBSD is a relatively complex process, but if you have
this document in hand it shouldn't be too much trouble.

There are several ways to install OpenBSD onto a disk. The easiest way
in terms of preliminary setup is to use the OpenBSD ramdisk kernel that can
be booted from tape. Alternatively, if your mvme88k is hooked up in a
network you can find a server and arrange for a diskless setup which is a
convenient way to install on a machine whose disk does not currently hold
a usable operating system (see the section `Installing using a diskless
setup' below).


Installing using the OpenBSD ramdisk kernel.

The ramdisk kernel is a kernel that containes an OpenBSD filesystem holding
all utilities necessary to install OpenBSD on a local disk. It is distributed
as a binary file with the name bsd.rd.

After the initial probe messages you'll asked to start the install
or upgrade procedure. Proceed to the section `Running the installation
scripts' below.


Installing using a diskless setup.

First, you must setup a diskless client configuration on a server. If
you are using a OpenBSD system as the boot-server, have a look at the
diskless(8) manual page for guidelines on how to proceed with this.
If the server runs another operating system, you'll have to consult
documentation that came with it (on SunOS systems, add_client(8) is a
good start).

Second, you must configure the netboot parameters in the mvme88k Bug
using the NIOT command.  The Load Address should be 0xAF0000.  The
Execution Address should be 0xAF0008.

Your mvme88k expects to be able to download a second stage bootstrap
program via TFTP after having acquired its IP address through RevARP when
instructed to boot "over the net". It will look for a filename composed of
the machine's IP address followed by the machine's architecture, separated
by a period. For example, a sun4c machine which has been assigned IP
address 130.115.144.11, will make an TFTP request for a file that has
been named in the nvram.  Normally, this file is a second-stage
boot program, which should be located in a place where the TFTP daemon
can find it (remember, many TFTP daemons run in a chroot'ed environment).
You can find the boot program in `/usr/mdec/netboot' in the OpenBSD/mvme88k
d146 8
a153 8
After the boot program has been loaded into memory and given control by
the PROM, it starts locating the machine's remote root directory through
the BOOTPARAM protocol. First a BOOTPARAM WHOAMI request is broadcast
on the local net. The answer to this request (if it comes in) contains
the client's name. This name is used in next step, a BOOTPARAM GETFILE
request -- sent to the server that responded to the WHOAMI request --
requesting the name and address of the machine that will serve the client's
root directory, as well as the path of the client's root on that server.
d157 3
a159 4
handle corresponding to the root filesystem. If successful, the boot
program starts reading from the remote root filesystem in search of the
kernel which is then read into memory.

d161 2
a162 7
As noted above in the section `Preparing your System for OpenBSD Installation',
you have several options when choosing a location to store the installation
filesets. However, the easiest way is to put the *.tgz files you want
to install into the root directory for your client on the server.

Next, unpack `base{:--:}OSrev.tgz' and `etc{:--:}OSrev.tgz' on the server in the root
directory for your machine. If you elect to use a separately NFS-mounted
d166 2
a167 2
your server's exported OpenBSD "/usr" directory. Also put the kernel and the
install/upgrade scripts into the root directory.
d182 1
a182 1
			server:/export/exec/sun4.OpenBSD /usr  nfs  rw 0 0
a193 129

Boot your workstation from the server by entering the appropriate `boot'
command at the monitor prompt. Depending on the PROM version in your machine,
this command takes one of the following forms:

	187-bug> nbo 00 00 bsd -s

This will boot the OpenBSD kernel in single-user mode.

If you use a diskless setup with a separately NFS-mounted /usr filesystem,
mount /usr by hand now:

OpenBSD# mount /usr

At this point, it's worth checking the disk label and partition sizes on
the disk you want to install OpenBSD onto. OpenBSD understands SunOS-style
disklabels, so if your disk was previously used by SunOS there will be
a usable label on it. Use `disklabel -e <disk>' (where <disk> is the
device name assigned by the OpenBSD kernel, e.g. `sd0') to view and
modify the partition sizes. See the section `Preparing your System for
OpenBSD Installation' above for suggestions about disk partition sizes.
Make sure all your partitions start and end on cylinder boundaries.

NOTE: if you are installing on a SCSI disk that does *not* have a SunOS
or OpenBSD label on it, you may still be able to use disklabel(8) but you'll
have to create all partitions from scratch. If your disk is listed in
`/etc/disktab', you may use the entry (which in most cases only defines
a `c' partition to describe the whole disk) to put an initial label on
the disk.  DO NOT USE `disklabel -r ...' TO INITIALIZE YOUR DISK LABEL;
THIS WILL LEAD TO UNPREDICTABLE RESULTS. This deficiency will be fixed
in a next release.

Here follows an example of what you'll see while in the disklabel editor.
Do not touch any of the parameters except for the `label: ' entry and
the actual partition size information at the bottom (the lines starting
with `a:', `b:', ...).

The size and offset fields are given in sector units. Be sure to make
these numbers multiples of the of the number of sectors per cylinder:
the kernel might be picky about these things, but aside from this you'll
have the least chance of wasting disk space.
Partitions on which you intend to have a mountable filesystem, should
be given fstype `4.2BSD'. Remember, the `c' partition should describe
the whole disk.
The `(Cyl. x - y)' info that appears after the hash (`#') character is
treated as a comment and need not be filled in when altering partitions.

Special note: the line containing `8 partitions:' is best left alone,
even if you {:-define-:} less then eight partitions. If this line displays
a different number and the program complains about it (after you leave
the editor), then try setting it to `8 partitions:'.


<BEGIN SAMPLE DISKLABEL SCREEN>
OpenBSD# disklabel sd2
 # /dev/rsd2c:
type: SCSI
disk: SCSI disk
label: Hold Your Breath
flags:
bytes/sector: 512
sectors/track: 64
tracks/cylinder: 7
sectors/cylinder: 448
cylinders: 1429
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
drivedata: 0

8 partitions:
#        size   offset    fstype   [fsize bsize   cpg]
  a:    50176        0    4.2BSD        0     0     0   # (Cyl.    0 - 111)
  b:    64512    50176      swap                        # (Cyl.  112 - 255)
  c:   640192        0   unknown                        # (Cyl.    0 - 1428)
  d:   525504   114688    4.2BSD        0     0     0   # (Cyl.  256 - 1428)
<END SAMPLE DISKLABEL SCREEN>


If you are upgrading a OpenBSD installation, start the upgrade script:

OpenBSD# sh upgrade.sh

else, start the installation script:

OpenBSD# sh install.sh


These scripts will do most of the work of transferring the system from the
tar files onto your disk. You will frequently be asked for confirmation
before the script proceeds with each phase of the installation process.
Occasionally, you'll have to provide a piece of information such as the
name of the disk you want to install on or IP addresses and domain names
you want to assign. If your system has more than one disk, you may want
to look at the output of the dmesg(8) command to see how your disks
have been identified by the kernel.

The installation script goes through the following phases:

	- determination of the disk to install OpenBSD on
	- checking of the partition information on the disk
	- creating and mounting the OpenBSD filesystems
	- setup of IP configuration
	- extraction of the distribution tar files
	- installation of boot programs


Now try a reboot.  (If needed, swap your scsi id's first).  Initially
I'd suggest you "bo bsd -bs", then try multiuser after that.
if you boot single-user the OpenBSD incantation to make the root
filesystem writable is

    OpenBSD# mount -u /dev/sd0a /

Congratulations, you have successfully installed OpenBSD OSREV.  When you
reboot into OpenBSD, you should log in as "root" at the login prompt.
You should create yourself an account and protect it and the "root" account
with good passwords.

Some of the files in the OpenBSD OSREV distribution might need to be
tailored for your site.  In particular, the /etc/mail/sendmail.cf file
will almost definitely need to be adjusted, and other files in /etc will
probably need to be modified.  If you are unfamiliar with UN*X-like
system administration, it's recommended that you buy a book that
discusses it.

@


1.7
log
@knf
@
text
@d1 1
d94 1
a94 1
Now you must populate the the `/dev' directory for your client. If you server
@


1.6
log
@Our m4 generated MAKEDEV will eventually be less SunOS-friendly than they
used to are, if at all; so warn people setting up diskless systems under
SunOS or other operating systems that they might need to edit MAKEDEV for
it to run properly on the host system.
@
text
@d6 4
a9 4
be booted from tape. Alternatively, if your mvme88k is hooked up in a 
network you can find a server and arrange for a diskless setup which is a 
convenient way to install on a machine whose disk does not currently hold 
a usable operating system (see the section `Installing using a diskless 
d15 2
a16 2
The ramdisk kernel is a kernel that containes an OpenBSD filesystem holding 
all utilities necessary to install OpenBSD on a local disk. It is distributed 
d33 2
a34 2
Second, you must configure the netboot parameters in the mvme88k Bug 
using the NIOT command.  The Load Address should be 0xAF0000.  The 
d42 1
a42 1
address 130.115.144.11, will make an TFTP request for a file that has 
d47 1
a47 1
distribution. 
d70 1
a70 1
Next, unpack `base{:--:}OSrev.tgz' and `etc{:--:}OSrev.tgz' on the server in the root 
d159 1
a159 1
type: SCSI 
d165 1
a165 1
tracks/cylinder: 7  
d222 2
a223 2
You should create yourself an account and protect it and the "root" account 
with good passwords. 
@


1.5
log
@sendmail.cf lives in /etc/mail now
@
text
@d95 2
a96 1
and run the MAKEDEV script: `sh MAKEDEV all'.
@


1.4
log
@tweaks/OSrev/cleaning/'.tar.gz -> .tgz' .. etc ..
@
text
@d225 2
a226 2
tailored for your site.  In particular, the /etc/sendmail.cf file will
almost definitely need to be adjusted, and other files in /etc will
@


1.3
log
@improve mvme68k INSTALL note.  Also mvme88k.
@
text
@d67 1
a67 1
filesets. However, the easiest way is to put the *.tar.gz files you want
d70 1
a70 1
Next, unpack `base.tar.gz' and `etc.tar.gz' on the server in the root 
d73 1
a73 1
files in base.tar.gz end up in the correct location. One way to do this is
@


1.2
log
@updates; wvdputte
@
text
@d33 4
@


1.1
log
@commit to add upport for mvme88k.
@
text
@d217 2
a218 3
There is no initial password, but if you're using the machine in a
networked environment, you should create yourself an account and
protect it and the "root" account with good passwords.
@

