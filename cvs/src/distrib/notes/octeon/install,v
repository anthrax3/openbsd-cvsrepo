head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.6
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9;
locks; strict;
comment	@# @;


1.14
date	2017.03.02.15.31.15;	author stsp;	state Exp;
branches;
next	1.13;
commitid	EonamwZ2dzm4TwNA;

1.13
date	2015.08.30.19.53.58;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	Qch12nPDlp1dhu7P;

1.12
date	2015.08.02.09.54.29;	author jasper;	state Exp;
branches;
next	1.11;
commitid	od4WGXvOfbQLBcLj;

1.11
date	2014.07.13.18.08.16;	author jasper;	state Exp;
branches;
next	1.10;
commitid	UrFJo0jpmEDmdPFT;

1.10
date	2013.12.04.23.20.19;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.13.18.24.21;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.30.13.47.45;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2013.04.08.13.17.03;	author bcallah;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.08.09.46.53;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.05.23.02.27;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2013.04.05.04.57.46;	author bcallah;	state Exp;
branches;
next	1.3;

1.3
date	2013.04.04.19.15.36;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2013.04.01.14.04.06;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.01.13.02.48;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Document some installation quirks for the EdgeRouter Lite in INSTALL.octeon:
How to deal with USB sticks which are not detected during power up.
How to enable both CPU cores (this also applies to other octeon SMP systems).
ok pirofti@@ visa@@
@
text
@dnl	$OpenBSD: install,v 1.13 2015/08/30 19:53:58 matthieu Exp $
OpenBSDInstallPrelude

OpenBSDInstallPart2

OpenBSDInstallPart3(,"octcf0 for internal CompactFlash storage.")
dnl sd0 for USB storage, or wd0 for internal hard disk storage attached to the SATA port

OpenBSDInstallPart4

OpenBSDInstallMBRPart1

dnl OpenBSDInstallMBRPart2
	The fdisk(8) utility will be invoked to let you edit your MBR
	partitioning.  The current MBR partitions defined will be
	displayed and you will be allowed to modify them, and add new
	partitions.

	The setup will need two partitions, one 'OpenBSD' for the
	OpenBSD/MACHINE installation, and one 'MSDOS' for the
	U-Boot scripts/bootloader.

	If you use the whole disk option, the install script
	will create a small 'MSDOS' partition and use the rest of
	the disk for the OpenBSD installation.

	After your OpenBSD MBR partition has been setup, the real
	partition setup can follow.

OpenBSDInstallPart5({:-
	U-Boot partitions defined on the disk will usually show up as
	partition 'i', 'j' and so on.-:})

dnl OpenBSDInstallPart6({:-CD-ROM, -:})
OpenBSDInstallPart6

OpenBSDURLInstall

dnl OpenBSDCDROMInstall

OpenBSDNFSInstall

OpenBSDDISKInstall({:-"octcfN" or -:},,{:-, Linux (ext2) or MS-DOS-:})

OpenBSDCommonInstall

OpenBSDInstallWrapup

OpenBSD/MACHINE currently lacks a real bootloader. It is possible however to
boot into OpenBSD upon powering on the machine.

From the U-Boot commandline, make a copy of the current ${bootcmd} so you can
restore it later if needed:

	# setenv old_bootcmd "${bootcmd}"

${bootcmd} is run by U-Boot when ${autoload} is enabled. Now create a new
${bootcmd} which will load an ELF file called 'bsd' from the first active FAT
partition on the first CF card or USB device. The FAT partition has been created
by the installer.

	# setenv bootcmd 'fatload ide 0:1 ${loadaddr} bsd;bootoctlinux rootdev=/dev/octcf0'
	# setenv bootdelay 5
	# saveenv
	Saving Environment to Flash...
	Un-Protected 1 sectors
	Erasing Flash...
	. done
	Erased 1 sectors
	Writing to Flash... .done
	Protected 1 sectors
	#

If you have installed onto USB use the following bootcmd instead:

  fatload usb 0 ${loadaddr} bsd; bootoctlinux rootdev=sd0

On dual-core systems, the coremask parameter enables the secondary CPU:

  fatload usb 0 ${loadaddr} bsd; bootoctlinux rootdev=sd0 coremask=0x3

On the EdgeRouter Lite, bootcmd may also reset the USB controller for
more reliable USB device detection:

  usb reset; fatload usb 0 $loadaddr bsd; bootoctlinux rootdev=sd0 coremask=0x3

OpenBSDCongratulations

OpenBSDUnattendedInstallation
@


1.13
log
@Tell user to Put quotes around ${bootcmd} when saving it. Avoids
stopping at the first ';' (command separator). ok miod@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.12 2015/08/02 09:54:29 jasper Exp $
d74 1
a74 1
If you've installed onto USB replace the 'fatload' part with:
d76 10
a85 1
	fatload usb 0 $loadaddr bsd
@


1.12
log
@long overdue overhaul to include instructions for miniroot and usb
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.11 2014/07/13 18:08:16 jasper Exp $
d55 1
a55 1
	# setenv old_bootcmd ${bootcmd}
@


1.11
log
@sync with kernel, root= -> rootdev=
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.10 2013/12/04 23:20:19 jmc Exp $
a3 70
Booting the installation media:

There are two ways to load an OpenBSD/MACHINE kernel (or ramdisk),
over TFTP or from the internal CompactFlash storage.

For TFTP you will first need to setup a TFTP server as described in
diskless(8). Assuming tftpd(8) chroots into /tftpboot, copy bsd.rd into that
directory.

Power on your OpenBSD/MACHINE device and from the U-Boot prompt set up
networking. In this example it is assumed you have a DHCP server in your
network:

	# dhcp

If you don't have a DHCP server, you need to set the ipaddr U-Boot environment
variable:

	# setenv ipaddr <static ip address>

Now set the IP address of your TFTP server:

	# setenv serverip <server ip>

The ramdisk kernel needs to be loaded into memory. If you use "0" as the
address, the default address location will be used by U-Boot:

	# tftpboot 0 bsd.rd
	Using octeth0 device
	TFTP from server 192.168.178.30; our IP address is 192.168.178.89
	Filename 'bsd.rd'.
	Load address: 0x9f00000
	Loading: #########################
	done
	Bytes transferred = 7191474 (6dbbb2 hex), 8617 Kbytes/sec

Now the kernel can be booted from the default memory location, with no
arguments provided:

	# bootoctlinux

OpenBSD/MACHINE currently lacks a real bootloader. It is possible however to
boot into bsd upon powering on the machine.

From the U-Boot commandline, make a copy of the current ${bootcmd} so you can
restore it later if needed:

	# setenv old_bootcmd ${bootcmd}

${bootcmd} is run by U-Boot when ${autoload} is enabled. Now create a new
${bootcmd} which will load an ELF file called 'bsd' from the first active FAT
partition on the first CF card (created by the installer) and save the
environment to persistent storage:

	# setenv bootcmd 'fatload ide 0:1 ${loadaddr} bsd;bootoctlinux rootdev=/dev/octcf0'
	# setenv bootdelay 5
	# saveenv
	Saving Environment to Flash...
	Un-Protected 1 sectors
	Erasing Flash...
	. done
	Erased 1 sectors
	Writing to Flash... .done
	Protected 1 sectors
	#

Depending on your hardware you may need to replace 'ide' with 'usb'.

No miniroot is provided at this time.

d49 24
a72 1
dnl CAM-0100 systems final steps:
d74 1
a74 1
OpenBSDCongratulations
d76 1
d78 1
@


1.10
log
@committing uwe's autoinstall notes, as requested by deraadt;
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.9 2013/06/13 18:24:21 jasper Exp $
d58 1
a58 1
	# setenv bootcmd 'fatload ide 0:1 ${loadaddr} bsd;bootoctlinux root=/dev/octcf0'
@


1.9
log
@whitespace
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.8 2013/05/30 13:47:45 jasper Exp $
d122 4
@


1.8
log
@uncomment a block as the installer has been taking care of that for a while now.

ok bcallah@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.7 2013/04/08 13:17:03 bcallah Exp $
d58 1
a58 1
	# setenv bootcmd 'fatload ide 0:1 ${loadaddr} bsd;bootoctlinux root=/dev/octcf0' 
d92 1
a92 1
	
@


1.7
log
@Grammar/wording tweaks.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.6 2013/04/08 09:46:53 jasper Exp $
d89 10
a98 10
dnl	The setup will need two partitions, one 'OpenBSD' for the
dnl	OpenBSD/MACHINE installation, and one 'U-Boot files' for the
dnl	U-Boot scripts/bootloader.
dnl	
dnl	If you use the whole disk option, the install script
dnl	will create a small 'U-Boot files' partition and use the rest of
dnl	the disk for the OpenBSD installation.
dnl
dnl	After your OpenBSD MBR partition has been setup, the real
dnl	partition setup can follow.
@


1.6
log
@sync with recent developments
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.5 2013/04/05 23:02:27 jasper Exp $
d6 1
a6 1
There are two ways in order to load an OpenBSD/MACHINE kernel (or ramdisk),
d48 1
a48 1
From the U-Boot commandline make a copy of the current ${bootcmd}, so you can
d72 1
a72 1
No miniroot is provided at this moment.
@


1.5
log
@spacing and clarify that one has to manually create the fat partition for
now as the installer doesn't take care of that yet...soon though.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.4 2013/04/05 04:57:46 bcallah Exp $
d6 4
a9 2
At the moment the only way to boot an OpenBSD/MACHINE (including the ramdisk)
kernel is over TFTP. First you need to setup a TFTP server as described in
d38 1
a38 1
	Bytes transferred = 3486088 (353188 hex), 407 Kbytes/sec
d48 2
a49 1
From the U-Boot command line make a copy of the current ${bootcmd} into memory:
d55 2
a56 1
partition on the first CF card, and save the environment to persistent storage:
d58 1
a58 1
	# setenv bootcmd 'fatload ide 0:1 ${loadaddr} bsd;bootoctlinux ${loadaddr}' 
d72 1
a72 5
You will be asked to enter the root device as the kernel is currently unable
to figure this out. Support for this in progress, as is support for the above
in the installer.

No miniroot is provided at this moment either.
@


1.4
log
@Grammar tweaks.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.3 2013/04/04 19:15:36 jasper Exp $
d48 1
a48 1
# setenv old_bootcmd ${bootcmd}
d54 11
a64 11
# setenv bootcmd 'fatload ide 0:1 ${loadaddr} bsd;bootoctlinux ${loadaddr}' 
# setenv bootdelay 5
# saveenv
Saving Environment to Flash...
Un-Protected 1 sectors
Erasing Flash...
. done
Erased 1 sectors
Writing to Flash... .done
Protected 1 sectors
#
d69 2
a70 1
to figure this out. Support for this in progress.
@


1.3
log
@jot down some steps for loading a kernel of internal storage; not quite complete yet.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.2 2013/04/01 14:04:06 jasper Exp $
d7 1
a7 1
kernel is over TFTP. First you need to setup an TFTP server as described in
@


1.2
log
@zap an XXX, nothing here yet.

spotted by bcallah@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.1 2013/04/01 13:02:48 jasper Exp $
d43 27
a69 3
Due to the lack of a bootloader for OpenBSD/MACHINE, this same approach
needs to be taken to boot a regular kernel after installation. Replacing
bsd.rd with bsd.
@


1.1
log
@first draft of octeon notes
@
text
@d1 1
a1 1
dnl	$OpenBSD$
d94 1
a94 3
CAM-0100 systems final steps:

	XXX
@

