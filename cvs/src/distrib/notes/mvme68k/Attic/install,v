head	1.41;
access;
symbols
	OPENBSD_5_5:1.40.0.2
	OPENBSD_5_5_BASE:1.40
	OPENBSD_5_4:1.39.0.4
	OPENBSD_5_4_BASE:1.39
	OPENBSD_5_3:1.39.0.2
	OPENBSD_5_3_BASE:1.39
	OPENBSD_5_2:1.37.0.12
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.8
	OPENBSD_5_0:1.37.0.10
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.37.0.6
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.37.0.4
	OPENBSD_4_8_BASE:1.37
	OPENBSD_4_7:1.37.0.2
	OPENBSD_4_7_BASE:1.37
	OPENBSD_4_6:1.36.0.4
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.32.0.2
	OPENBSD_4_5_BASE:1.32
	OPENBSD_4_4:1.31.0.2
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.30.0.2
	OPENBSD_4_3_BASE:1.30
	OPENBSD_4_2:1.29.0.4
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.29.0.2
	OPENBSD_4_1_BASE:1.29
	OPENBSD_4_0:1.28.0.6
	OPENBSD_4_0_BASE:1.28
	OPENBSD_3_9:1.28.0.4
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.28.0.2
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.27.0.2
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.26.0.4
	OPENBSD_3_6_BASE:1.26
	OPENBSD_3_5:1.26.0.2
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	OPENBSD_3_3:1.18.0.2
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@# @;


1.41
date	2014.03.18.22.36.28;	author miod;	state dead;
branches;
next	1.40;

1.40
date	2013.12.04.23.20.19;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2013.02.09.20.33.11;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2012.09.02.08.49.22;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2010.03.16.17.23.09;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2009.06.28.13.37.41;	author sthen;	state Exp;
branches;
next	1.35;

1.35
date	2009.05.13.18.38.29;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2009.05.12.21.06.50;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2009.03.01.22.08.10;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2009.02.17.22.37.43;	author miod;	state Exp;
branches;
next	1.31;

1.31
date	2008.08.05.22.58.01;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2008.03.10.21.38.28;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2007.03.01.19.24.45;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2005.03.21.22.32.06;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2004.09.20.17.53.27;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.17.09.25.10;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.16.08.25.00;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2004.02.09.13.32.47;	author todd;	state Exp;
branches;
next	1.23;

1.23
date	2004.01.03.22.40.18;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.06.23.34.00;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.22.00.37.57;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.21.01.06.00;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.21.00.32.59;	author pvalchev;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.04.00.18.08;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2002.12.30.11.13.01;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.17.23.32.09;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2002.04.09.01.22.23;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.30.22.52.58;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.14.18.28.01;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2001.10.06.19.29.00;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2001.10.02.19.51.18;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.25.20.27.57;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.19.00.33.07;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.28.15.00.45;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.24.05.05.42;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	99.10.10.22.56.08;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.01.23.08.22.14;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	98.12.19.18.32.15;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.05.18.00.34.04;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	97.10.24.07.11.10;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	96.10.12.01.19.33;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@dnl	$OpenBSD: install,v 1.40 2013/12/04 23:20:19 jmc Exp $
OpenBSDInstallPrelude

There are several ways to install OpenBSD onto a disk. The easiest way
in terms of preliminary setup is to use the OpenBSD ramdisk kernel that can
be booted from tape.

Alternatively, if the MACHINE is hooked up to a network, it is possible
to set up another machine as a server for diskless setup, which is a
convenient way to install on a machine whose disk does not currently
hold a usable operating system.
This is difficult to get set up correctly the first time, but easy to
use afterwards.  (See ``Installing using a diskless setup'' below).


Booting from the Installation Media:

Prior to attempting an installation, everything of value on the target
system should be backed up.  While installing OpenBSD does not necessarily
wipe out all the partitions on the hard disk, errors during the install
process can have unforeseen consequences and will probably leave the system
unbootable if the installation process is not completed. Availability
of the installation media for the prior installation, such as a Motorola
SystemV/MACHINE tape is always a good insurance, should it be necessary
to "go back" for some reason.

After taking care of all that, the system should be brought down gracefully
using the shutdown(8) and/or halt(8) commands, which will eventually go
back to the ``BUG>'' prompt (it may be necessary to send a break if the
system is completely halted).


Booting from SCSI tape:

Bootable tapes can be booted with the following command at the prompt:

    167-Bug> BO xx yy

Where `xx' is the SCSI controller number (00 for the built-in SCSI
controller), and `yy' is the encoding for the SCSI device ID, which varies
between controllers.

Most BUG versions can list the available disk and tape controllers, using the
"IOT;H" command:

    167-Bug>IOT;H
    I/O Controllers Available:
    CLUN  CNTRL-TYPE  CNTRL-Address  N-Devices
       0  VME167      $FFF47000      *
       6  VME328      $FFFF9000      *

In this example, the built-in controller, as well as an external MVME328
controller, are available.

The encoding for the drive ID is as follows:
- built-in controller and MVME327 SCSI controller:
    'yy' is ten times the device ID.
- MVME328 SCSI controller:
    'yy' is eight times the device ID, written in hexadecimal
- MVME350 tape controller:
    'yy' is always zero, as this controller only supports one tape drive.

MVME147 boards are slightly different, as they only support booting from
the built-in SCSI controller (if present), using the following convention:
- 'xx' is the device ID.
- 'yy' is zero.

MVME141 boards are quite similar to the MVME147, but can boot from various
controllers (since they don't have any on-board); the IOT;H command will
list all the available boot options.
Usually, the boot device numbers will be:
- `xx' is the `Lun' value printed by IOT;H, and is usually the device ID.
- `yy' is the subdevice number, if any.

Thus to boot a MVME141 from a MVME327 controller:
- `xx' is the SCSI device ID.
- `yy' is zero.

For example, booting from a tape drive using SCSI ID #4:
    147-Bug> BO 04 00
for MVME141 and MVME147, and
    167-Bug> BO 00 40
for any other MACHINE board using the built-in controller. However, a tape
drive connected to an MVME328 board using SCSI ID #5, will be booted as:
    167-Bug> BO 06 28

Note that OpenBSD/MACHINE can boot off any tape drive supported by the BUG,
even if its controller is not supported by OpenBSD.


Installing using a diskless setup:

First, a diskless client configuration should be set up on a server. If
the boot server is an OpenBSD system, the diskless(8) manual page will
provide detailed information on the process.

If the server runs another operating system, the setup instructions will
likely be available as part of the documentation that came with it (on
SunOS systems, add_client(8) and the Sun System/Networks administrators
guide constitute a good start; on Solaris systems, share(1M) is a good
starting point as well).

OpenBSD/MACHINE can boot off any network card supported by the BUG, even
if the card itself is not supported by OpenBSD. The list of BUG-supported
network controllers is available with the "NIOT;A" command. For example:

    167-Bug> NIOT;A
    Network Controllers/Nodes Supported
    CLUN  DLUN  Name      Address
       0     0  VME167    $FFF46000
       2     0  VME376    $FFFF1200
       3     0  VME376    $FFFF1400
       4     0  VME376    $FFFF1600
       5     0  VME376    $FFFF5400
       6     0  VME376    $FFFF5600
       7     0  VME376    $FFFFA400
      10     0  VME374    $FF000000
      11     0  VME374    $FF100000
      12     0  VME374    $FF200000
      13     0  VME374    $FF300000
      14     0  VME374    $FF400000
      15     0  VME374    $FF500000

The "NIOT;H" lists only the available controllers in the machine. For
example, if no external network card is present, only the built-in
controller will be reported:

    167-Bug> NIOT;H
    Network Controllers/Nodes Available
    CLUN  DLUN  Name      Address
       0     0  VME167    $FFF46000

If the BUG does not support the NIOT command (most MVME141, MVME147
and MVME165 don't), then it has no support for netbooting, and you'll
have to use S-Records, described later in this document.

Before netbooting, enter "NIOT" and fill the parameters. Be sure to provide
the correct values for Controller LUN and Device LUN (as listed in the
"NIOT;H" output); also the "Boot File Load Address" and "Boot File
Execution Address" need to be set to 006F0000. The "Boot File Name" must
match the name of the netboot file on the server (copying it as
"netboot.mvme68k" is usually a wise choice). Finally, "Argument File Name"
needs to be set to "bsd.rd" in order to boot the installation kernel,
rather than the regular kernel.

Here are acceptable values for a 167 card using the built-in controller:

    167-Bug> NIOT
    Controller LUN =00? 
    Device LUN     =00? 
    Node Control Memory Address =01FF0000? 
    Client IP Address      =0.0.0.0? 
    Server IP Address      =0.0.0.0? 
    Subnet IP Address Mask =255.255.255.0? 
    Broadcast IP Address   =255.255.255.255? 
    Gateway IP Address     =0.0.0.0? 
    Boot File Name ("NULL" for None)     =? netboot.mvme68k
    Argument File Name ("NULL" for None) =? bsd.rd
    Boot File Load Address         =001F0000? 006F0000
    Boot File Execution Address    =001F0000? 006F0000
    Boot File Execution Delay      =00000000? 
    Boot File Length               =00000000? 
    Boot File Byte Offset          =00000000? 
    BOOTP/RARP Request Retry       =00? 
    TFTP/ARP Request Retry         =00? 
    Trace Character Buffer Address =00000000? 
    BOOTP/RARP Request Control: Always/When-Needed (A/W)=W? 
    BOOTP/RARP Reply Update Control: Yes/No (Y/N)       =Y? 

If you change the NIOT configuration, you will be asked whether you want to
make these changes permanent. Do not answer Y unless you plan to netboot
this board very often; be sure to have the ENV settings use a correct
address for the NIOT parameters block in this case. A valid setting is:

    Network Auto Boot Configuration Parameters Pointer (NVRAM) =
        00000000? FFFC0080

for example.

Once the NIOT parameters are set, it should be possible to boot the machine
from the server with the NBO command. However, in some cases, netbooting
will prevent the OpenBSD kernel from probing the built-in SCSI controller
(if any) properly, so it is recommended to do a disk probe first:

    167-Bug> IOI;C
    167-Bug> IOI

This can take up to a couple of minutes, depending on how many SCSI
controllers are found in the machine. Once the BUG prompt is back, you can
safely netboot:
	
    167-Bug> NBO 00 00

or if you know the IP address for the MACHINE and the diskless server,
you can directly provide the boot loader's filename and the kernel name
on the commandline:

     167-Bug> NBO 00 00 192.168.0.68 192.168.0.1 netboot.mvme68k bsd.rd

where, in this example, 192.168.0.68 is the address of the MACHINE computer,
and 192.168.0.1 the address of the diskless server.

If the BUG version does not understand the NIOT and NBO commands (most
MVME141, MVME147 and MVME165 don't), the alternative is to boot from
S-Records.


Booting from S-Records:

First, a diskless client configuration should be set up on a server. Refer
to the short description above for details.

Second, using a terminal emulator able to read files from the local machine
and send their contents over the serial link, such as cu(1) and tip(1) - both
being available on OpenBSD - the MACHINE workstation should be put in
S-Records receive mode, with the LO command at the BUG prompt:

    147-Bug> LO

If this command prints an error message and returns to the BUG prompt
immediately, like this:

    147-Bug> LO
    Logical unit $1C unassigned
    147-Bug>

it might be necessary to ``switch directories'', using the SD command once
or twice (the prompt will change between 147-Bug and 147-Diag), before
retrying.

Then, the contents of the ``sboot'' file should be sent from the terminal
emulator (using tip(1) or cu(1), this is done by entering ``~$'', and then,
at the ``Local command?'' prompt, ``cat sboot''). Depending on the speed of
the serial link, this will take some time, but no more than a couple of
minutes.

If a prompt does not come back after a few minutes, it is likely that the
S-Records download is hosed. In this case, the MACHINE board should be reset
before a further attempt to download the S-Records is made.

Once the transfer is finished, entering GO at the BUG prompt will start the
S-Records boot loader. This is a very crude bootloader which will attempt
to fetch a secondary boot program via TFTP requests, like the NBO command.

This will cause the kernel provided by the diskless setup to be booted.
After the initial probe messages you'll be asked to start the install
or upgrade procedure.



Installing using the tape or netboot procedure:

OpenBSDInstallPart2

	Boot your machine from the installation media as described above.

	It will take a while to load the kernel especially from a slow
	network connection, most likely more than a minute.  If some action
	doesn't eventually happen, or the spinning cursor has stopped and
	nothing further has happened, either your boot media is bad, your
	diskless setup isn't correct, or you may have a hardware or
	configuration problem.

OpenBSDInstallPart3(,"sd0")

OpenBSDInstallPart4

OpenBSDInstallPart5

OpenBSDInstallPart6({:-CD-ROM, tape, NFS, -:})

OpenBSDURLInstall

OpenBSDCDROMInstall
		
OpenBSDNFSInstall

OpenBSDDISKInstall(,{:-only -:})

OpenBSDTAPEInstall(3)

OpenBSDCommonInstall

OpenBSDInstallWrapup

OpenBSDCongratulations



Net Boot or Diskless Setup Information:

The set up is similar to SunOS diskless setup, but not identical, because
the Sun setup assumes that the bootblocks load a kernel image, which then
uses NFS to access the exported root partition, while the OpenBSD bootblocks
use internal NFS routines to load the kernel image directly from the
exported root partition.

Please understand that no one gets this right the first try, since
there is a lot of setup and all the host daemons must be running and
configured correctly.  If you have problems, extract the diskless(8)
manpage, find someone who's been through it before and use the host
syslog and tcpdump(8) to get visibility of what's happening (or not).

Your MACHINE expects to be able to download a second stage bootstrap
program via TFTP after having acquired its IP address through RevARP when
instructed to boot "over the net". If you are booting from S-Records, it
will look for a filename composed of the machine's IP address, followed by
the machine's architecture, separated by a period (for example, a MACHINE
board which has been assigned IP address 130.115.144.11 will make a TFTP
request for `8273900B.MACHINE'); if you are booting from the NBO command,
you can specify the filename which will be looked for.

Normally, this file is a symbolic link to an appropriate second-stage
boot program, which should be located in a place where the TFTP daemon
can find it (remember, many TFTP daemons run in a chroot'ed environment).
You can find the boot program in `/usr/mdec/netboot' in the OpenBSD/MACHINE
distribution.

After the boot program has been loaded into memory and given control by
the BUG, it starts locating the machine's remote root directory through
the BOOTPARAM protocol. First a BOOTPARAM WHOAMI request is broadcast
on the local net. The answer to this request (if it comes in) contains
the client's name. This name is used in the next step, a BOOTPARAM GETFILE
request -- sent to the server that responded to the WHOAMI request --
requesting the name and address of the machine that will serve the client's
root directory, as well as the path of the client's root on that server.

Finally, this information (if it comes in) is used to issue a REMOTE MOUNT
request to the client's root filesystem server, asking for an NFS file
handle corresponding to the root filesystem. If successful, the boot
program starts reading from the remote root filesystem in search of the
kernel which is then read into memory.

Unpack `base{:--:}OSrev.tgz' and `etc{:--:}OSrev.tgz' on the server in the root directory
for your target machine. If you elect to use a separately NFS-mounted
filesystem for `/usr' with your diskless setup, make sure the "./usr" base
files in base{:--:}OSrev.tgz end up in the correct location. One way to do this is
to temporarily use a loopback mount on the server, re-routing <root>/usr to
your server's exported OpenBSD "/usr" directory. Also put the kernel and
the install/upgrade scripts into the root directory.

A few configuration files need to be edited:

	<root>/etc/hosts
		Add the IP addresses of both server and client.

	<root>/etc/myname
		This files contains the client's hostname; use the same
		name as in <root>/etc/hosts.

	<root>/etc/fstab
		Enter the entries for the remotely mounted filesystems.
		For example:
			server:/export/root/client       /     nfs  rw 0 0
			server:/export/exec/MACHINE.OpenBSD /usr  nfs  rw 0 0

OpenBSDInstNFS



OpenBSDUnattendedInstallation
@


1.40
log
@committing uwe's autoinstall notes, as requested by deraadt;
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.39 2013/02/09 20:33:11 miod Exp $
@


1.39
log
@Update minimal disk and memory sizes to match the bsd.rd requirements
(especially on vax, where bsd.rd really needs 16MB to install nowadays
although the system can live in less).

While there, fix a few typos.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.38 2012/09/02 08:49:22 miod Exp $
d358 4
@


1.38
log
@A bit more details about s-records operation.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.37 2010/03/16 17:23:09 miod Exp $
d143 1
a143 1
needs to be set to "bsd.rd" in order to boot the installation miniroot,
@


1.37
log
@Jumbo commit for 4.7 installation instructions:
- do not mention tape as an installation media on systems where it is very
  unlikely that a tape drive can be connected to (i.e. anything with only
  USB as expansion capabilities)
- do not mention that fetching the installation sets from a partition is
  ``for upgrades only''. You may do this for installation, but of course
  you can not use a partition which will be newfs'ed for that purpose.
- mention ext2fs partitions as possible installation sets source only on
  platforms where the installation media actually can mount an ext2fs
  filesystem.
- stress the fact that the sparc miniroot image is a GENERIC kernel with
  a little on-disk filesystem, and not a RAMDISK kernel with a little
  in-memory filesystem, and thus must not be overwritten during installation
  (i.e. be careful if you repartition the disk the miniroot has been put on).
- more conv=sync -> conv=osync for tape setup instructions.
- model-specific layout changes on armish, loongson and socppc instructions.
- fix various typos and grammar mistaeks.

"sure" deraadt@@ (without eyeballing)
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.36 2009/06/28 13:37:41 sthen Exp $
d69 2
a70 1
controller; the IOT;H command will list all the available boot options.
d218 1
a218 1
    147-Diag> LO
d221 9
a229 2
immediately, it might be necessary to switch directories, using the SD
command (the prompt will change from 147-Bug to 147-Diag), before retrying.
d232 4
a235 2
emulator. Depending on the speed of the serial link, this will take some
time, but no more than a couple of minutes.
@


1.36
log
@Change mid-sentence "From" to "from".
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.35 2009/05/13 18:38:29 miod Exp $
d260 1
a260 1
OpenBSDInstallPart6({:-CD-ROM, NFS, -:})
@


1.35
log
@Better disk partitioning details, especially for MBR + disklabel or
HFS + disklabel setups.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.34 2009/05/12 21:06:50 miod Exp $
d223 1
a223 1
Then, the contents of the ``sboot'' file should be sent From the terminal
@


1.34
log
@Try to catch up with installer changes in the installation notes.
Also, the per-platform features are moved to a common place, which makes
the MD layout easier to work on. m4.common is still a tangled mess of subtly
placed dnl, though...
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.33 2009/03/01 22:08:10 miod Exp $
d262 1
a262 3
OpenBSDFTPInstall

OpenBSDHTTPInstall
@


1.33
log
@Support for MVME141 boards. Tested with both VME and VSB memory boards
(and MVME327 SCSI and MVME376 Ethernet, to provide a complete system).
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.32 2009/02/17 22:37:43 miod Exp $
d254 1
a254 9
OpenBSDBootMsgs(,"sd0")

	You will next be asked for your terminal type.  If you are
	installing from a non-serial console, the default of "vt220"
	is correct.  If you are installing from a serial console
	you should choose the terminal type from amongst those listed.
	(If your terminal type is xterm, just use vt220.)

OpenBSDInstallPart3
d258 1
a258 1
OpenBSDInstallPart5(sd0)
d260 1
a260 1
OpenBSDInstallNet({:-CD-ROM, NFS, -:})
a265 2
OpenBSDTAPEInstall(3)

d272 3
a274 3
OpenBSDCommonFS(NFS)
		
OpenBSDCommonURL
a276 2

OpenBSDInstallWrapupPart2
@


1.32
log
@Sync with recent changes.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.31 2008/08/05 22:58:01 miod Exp $
d43 1
a43 1
Recent BUG can list the available disk and tape controllers, using the
d68 10
d80 1
a80 1
for a MVME147, and
d132 3
a134 3
If the BUG does not support the NIOT command (most MVME147 don't), then
it has no support for netbooting, and you'll have to use S-Records,
described later in this document.
d203 2
a204 1
MVME147 don't), the alternative is to boot from S-Records.
@


1.31
log
@Better description of the installation steps:
- document questions in proper order: hostname before network configuration,
  DNS only if network is configured, sshd and ntpd, aperture only on
  machines which need it, serial console only on machines which need it.
  This is done by splitting the end of OpenBSDCommonURL in various
  macros, OpenBSDInstallWrapup, OpenBSDInstallAperture, OpenBSDInstallConsole
  and OpenBSDInstallWrapupPart2.
- use the above macros when appropriate, OpenBSDInstallWrapup* being
  mandatory on all arches.
- remove serial console configuration blurb on sparc and sparc64, it is
  handled by OpenBSDInstallConsole now.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.30 2008/03/10 21:38:28 miod Exp $
d206 1
a206 1
    147-Bug> LO
d210 1
a210 1
command, before retrying.
@


1.30
log
@Suggest vt220 as a TERM value for serial-console-in-an-xterm setup everywhere
instead of a mix of vt100 and vt220.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.29 2007/03/01 19:24:45 miod Exp $
d274 4
@


1.29
log
@Your spring jumbo m4-fu. This time:
- mention comp contains an objective-C compiler too.
- rewrite InstallPrelude so that it will only output the ``know your drive
  geometry'' blurb if asked to, and for a specified disk type. Use it for
  non-IDE and non-SCSI disks only, otherwise the kernel is good enough to
  do the job without the users' help.
- similarily, adapt BootMsgs to make the second part of the geometry blurb
  optional, and to accept up to three disk types. Use this to report better
  disk names (i.e. no point saying an scsi disk would show up as sd0 on
  platforms which can't have scsi disks, or won't be able to boot from them).
- in InstallPart4, drop the part about block and fragment sizes in
  disklabel. The defaults are good, and you won't get to change them unless
  you switched to expert mode.
- the default answer to ``wanna get the ftp mirror list, unzel?'' is ``no'',
  so pressing enter to get it is not enough anymore (-:
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.28 2005/03/21 22:32:06 miod Exp $
d245 5
a249 3
	You will next be asked for your terminal type.  You should choose
	the terminal type from amongst those listed.
	(If your terminal type is xterm, just use vt100).
@


1.28
log
@Sync tape install details with the install script, mostly a numbering
change for files on the tape.

Prompted by and discussed with claudio@@.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.27 2004/09/20 17:53:27 miod Exp $
d243 1
a243 1
OpenBSDBootMsgs
@


1.27
log
@Too much cut'n'paste in NIOT description cause confusion as the text
refers to ;H but shows ;A in examples; spotted by nick@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.26 2004/03/17 09:25:10 jmc Exp $
d261 1
a261 1
OpenBSDTAPEInstall(4)
@


1.26
log
@grammar, consistency fixes, and typos;
ok miod@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.25 2004/03/16 08:25:00 jmc Exp $
d117 1
a117 1
    167-Bug> NIOT;A
d128 1
a128 1
"NIOT;A" output); also the "Boot File Load Address" and "Boot File
@


1.25
log
@typos and consistency fixes;
ok miod@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.24 2004/02/09 13:32:47 todd Exp $
d29 1
a29 1
bakc to the ``BUG>'' prompt (it may be necessary to send a break if the
d204 1
a204 1
S-Records receive mode, with the LO command at the BUG prompr:
d296 1
a296 1
board which has been assigned IP address 130.115.144.11, will make an TFTP
@


1.24
log
@be accurate now that SunOS compat output does not exist in MAKEDEV; ok miod@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.23 2004/01/03 22:40:18 miod Exp $
d8 2
a9 2
Alternatively, if the MACHINE is hooked up in a network, it is possible
to setup another machine as a server for diskless setup, which is a
d82 1
a82 1
First, a diskless client configuration should be setup on a server. If
d126 1
a126 1
Before netbooting, enter "NIOT" and fill the parametrs. Be sure to provide
d177 3
a179 3
This can take up to a couple of minutes, depending how many SCSI controllers
are found in the machine. Once the BUG prompt is back, you can safely
netboot:
d198 1
a198 1
First, a diskless client configuration should be setup on a server. Refer
d208 1
a208 1
If this command prints an error messages and returns to the BUG prompt
d225 1
a225 1
After the initial probe messages you'll asked to start the install
d310 1
a310 1
the client's name. This name is used in next step, a BOOTPARAM GETFILE
@


1.23
log
@``device'' is not written ``devic''.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.22 2003/09/06 23:34:00 miod Exp $
d344 1
a344 10
Now you must populate the `/dev' directory for your client. If the server
runs SunOS 4.x, you can simply change your working directory to `<root>/dev'
and run the MAKEDEV script: `sh MAKEDEV all' (this might require the edition
of MAKEDEV to change the PATH for it to work properly).

On SunOS 5.x systems, MAKEDEV can also be used, but there'll be error
messages about unknown user and groups. These errors are inconsequential
for the purpose of installing OpenBSD. However, you may want to correct them
if you plan to the diskless setup regularly. In that case, you may re-run
MAKEDEV on your OpenBSD machine once it has booted.
@


1.22
log
@MD installation notes updates for 3.4, 3/3

Describe with much more details how to successfully boot from various
devices, including non-built-in ethernet or SCSI controllers; also hint
that most of the MVME147 and the MVME187 can not netboot at all.

This should be much, much more understandable (but we need to run this
through a drunk pvalchev@@ to be sure).
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.21 2003/06/22 00:37:57 miod Exp $
d59 1
a59 1
    'yy' is eight times the devic ID, written in hexadecimal
@


1.21
log
@Sync NIOT load address with the bootloader address change of last year,
my bad. Spotted by pvalchev@@.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.20 2003/06/21 01:06:00 miod Exp $
d37 1
a37 1
	167-bug> bo xx yy
d40 2
a41 2
controller), and `yy' is ten times the tape drive ID, except for the
MVME147, where `xx' should be the tape drive ID, and `yy' should be 00.
d43 27
a69 2
For example, booting from a tape drive using SCSI id 4:
	147-bug> bo 04 00
d71 7
a77 2
	167-bug> bo 00 40
for any other MACHINE board.
d92 94
a185 3
Second, the MACHINE workstation should then be setup using the NIOT command
at the BUG prompt. The ``Load Address'' value should be 0x6F0000, and the
``Execution Address'' value should be 0x6F0000 as well.
d187 4
a190 4
Then, it should be possible to boot the machine from the server by entering
the NBO command at the BUG prompt:
	
	167-bug> nbo 00 00 bsd.rd
d206 1
a206 1
	147-bug> LO
d293 7
a299 4
instructed to boot "over the net". It will look for a filename composed of
the machine's IP address, followed by the machine's architecture, separated
by a period. For example, a MACHINE board which has been assigned IP
address 130.115.144.11, will make an TFTP request for `8273900B.MACHINE'.
a302 1

@


1.20
log
@A few clarifications, and more third-person text.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.19 2003/06/21 00:32:59 pvalchev Exp $
d63 2
a64 2
at the BUG prompt. The ``Load Address'' value should be 0x3F0000, and the
``Execution Address'' value should be 0x3F0000 as well.
@


1.19
log
@minor grammar
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.18 2003/01/04 00:18:08 miod Exp $
d8 4
a11 3
Alternatively, if your MACHINE is hooked up in a network you can find a server
to arrange for a diskless setup, which is a convenient way to install on a
machine whose disk does not currently hold a usable operating system.
d13 1
a13 1
use afterwards.  (see ``Installing using a diskless setup'' below).
d18 13
a30 12
Prior to attempting an installation, you should make sure that everything
of value on the target system has been backed up.  While installing OpenBSD
does not necessarily wipe out all the partitions on the hard disk, errors
during the install process can have unforeseen consequences and you will
probably render the system unbootable if you start, but do not complete
the installation.  Having the installation media for the prior installation,
like a Motorola SystemV/MACHINE tape is good insurance if you want to be
able to "go back" for some reason.

After taking care of all that, bring your system down gracefully using
the shutdown(8) and/or halt(8) commands.  This will get you to the BUG
prompt.
d35 1
a35 2
After creating the boot tape, boot it by typing the appropriate command
at the PROM:
d52 16
a67 12
First, you must setup a diskless client configuration on a server. If
you are using a OpenBSD system as the boot-server, have a look at the
diskless(8) manual page for guidelines on how to proceed with this.
If the server runs another operating system, you'll have to consult
documentation that came with it (on SunOS systems, add_client(8) and
the Sun System/Networks administrators guide constitute a good start;
on Solaris systems, share(1M) is a good starting point as well).

You should then setup your workstation using the NIOT command at the BUG
prompt. The Load Address should be 0x3F0000, and the Execution Address
should be 0x3F0000 as well. You may now boot your workstation from the
server by entering the NBO command at the BUG prompt:
d71 2
a72 2
If your BUG version does not understand the NIOT and NBO commands (most
MVME147 don't), you will have to boot via S-Records.
d77 13
a89 15
First, you must setup a diskless client configuration on a server. If
you are using a OpenBSD system as the boot-server, have a look at the
diskless(8) manual page for guidelines on how to proceed with this.
If the server runs another operating system, you'll have to consult
documentation that came with it (on SunOS systems, add_client(8) and
the Sun System/Networks administrators guide constitute a good start;
on Solaris systems, share(1M) is a good starting point as well).

Second, make sure you use a terminal emulator able to read files from the
local machine and send their contents over the serial link. OpenBSD ships
with both cu(1) and tip(1), but others can be used.

After reseting your MACHINE board, enter "LO" at the BUG prompt. If you get
an error message, switch directories (enter "SD") and retry. The MACHINE
should be awaiting a S-Record program now.
d91 2
a92 2
From your terminal emulator, send the contents of the ``sboot'' file over
the line. Depending on the speed of the serial link, this will take some
d95 3
a97 2
If you don't get a prompt back after a few minutes, send a break, reset
your MACHINE board, and retry.
d99 2
a100 2
When the transfer is finished, enter "GO" at the BUG prompt.  The S-Records
boot loader will start.  This is a very crude bootloader which will attempt
d115 6
a120 6
	It will take a while to load the kernel especially from a floppy
	or slow network connection, most likely more than a minute.  If
	some action doesn't eventually happen, or the spinning cursor has
	stopped and nothing further has happened, either your boot media
	is bad, your diskless setup isn't correct, or you may have
	a hardware or configuration problem.
a122 7

	While booting, you will probably see several warnings.  You
	may be warned that the kernel can't figure out what device
	it booted from.  Do not be alarmed, this is completely normal.
	This warning occurs because while OpenBSD/MACHINE can boot from
	the floppy drive, the kernel itself lacks a floppy driver for some
	MACHINE models.
@


1.18
log
@Various typos and inaccuracies; David Krause
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.17 2002/12/30 11:13:01 miod Exp $
d176 1
a176 1
the machine's IP address followed by the machine's architecture, separated
@


1.17
log
@Do not mention NFS as a possible tarballs source when the installation media
does not support NFS mounts.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.16 2002/04/17 23:32:09 miod Exp $
d224 1
a224 1
Now you must populate the the `/dev' directory for your client. If you server
@


1.16
log
@Our m4 generated MAKEDEV will eventually be less SunOS-friendly than they
used to are, if at all; so warn people setting up diskless systems under
SunOS or other operating systems that they might need to edit MAKEDEV for
it to run properly on the host system.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.15 2002/04/09 01:22:23 miod Exp $
d151 1
a151 1
OpenBSDCommonFS
@


1.15
log
@Since the installation procedure will list all the supported media flags
via ifconfig -m, there is no need to suggest canonical media flags on
some arches, especially since the end user might have a different
interface with different flags; instead, be more cosy and mention that
looking at the manual page for the interface might be helpful for
desperate cases.

Thus, merge the OpenBSDInstallNet and OpenBSDInstallNet2 macros, and
remove thde in-between text for the arches that had such a paragraph.
@
text
@d1 1
a1 1
dnl	$OpenBSD: install,v 1.14 2002/03/30 22:52:58 miod Exp $
d226 2
a227 1
and run the MAKEDEV script: `sh MAKEDEV all'.
@


1.14
log
@Factorize more common texts from the ramdisk operation.
No text changes except for harmonization, and the blurb about network
interface flags has bene slightly changed for some arches.
@
text
@d1 1
a1 1
dnl	$OpenBSD$
d137 1
a137 3
OpenBSDInstallNet

OpenBSDInstallNet2({:-CD-ROM, NFS, -:})
@


1.13
log
@Solaris friendly update!
- Provide typical Solaris command lines for creating floppies, dumping
miniroots to disks, and filling tapes.
- Make the tape generation script more versatile.
- When SunOS add_client(8) is mentioned, mention Solaris share(1M) as well.
- Add ``Installing from Solaris'' instructions for sparc and sparc64 ports
- While there, slight fixes to the ``Installing from SunOS'' sections on
  sparc and sun3.
@
text
@d1 1
d131 9
a139 68
	After entering the terminal type you will be greeted by a
	welcome message and asked if you really want to continue.
	Assuming you answered yes, the install program will then tell
	you which disks of that type it can install on, and ask you
	which it should use.  The name of the disk is typically "sd0".
	Reply with the name of your disk.

	Next you will have to edit or create a disklabel for the disk
	OpenBSD is being installed on.  The installation script will
	invoke the text editor allowing you to do this.  Note that
	partition 'c' inside this disk label should ALWAYS reflect the
	entire disk, including any non-OpenBSD portions.  The root file
	system should be in partition 'a', and swap is usually in partition
	'b'.  It is recommended that you create separate partitions for
	root and /usr, you may also want to specify /var and /home
	partitions.

	The swap partition (usually 'b') should have a type of "swap", all
	other native OpenBSD partitions should have a type of "4.2BSD".
	Block and fragment sizes are usually 8192 and 1024 bytes, but can
	also be 16384 and 2048 bytes.

	The install program will now label your disk and ask which file
	systems should be created on which partitions.  It will auto-
	matically select the 'a' partition to be the root file system.
	Next it will ask for which disk and partition you want a file
	system created on.  This will be the same as the disk name (e.g.
	"sd0") with the letter identifying the partition (e.g. "d")
	appended (e.g. "sd0d").  Then it will ask where this partition is
	to be mounted, e.g. /usr.  This process will be repeated until
	you type "done".

	At this point you will be asked to confirm that the file system
	information you have entered is correct, and given an opportunity
	to change the file system table.  Next it will create the new file
	systems as specified, OVERWRITING ANY EXISTING DATA.  This is the
	point of no return.

	After all your file systems have been created, the install program
	will give you an opportunity to configure the network.  The network
	configuration you enter (if any) can then be used to do the install
	from another system using NFS, HTTP or FTP, and will also be the
	configuration used by the system after the installation is complete.

	If you select to configure the network, the install program will
	ask you for a name of your system and the DNS domain name to use.
	Note that the host name should be without the domain part, and that
	the domain name should NOT {:-include-:} the host name part.

	Next the system will give you a list of network interfaces you can
	configure.  For each network interface you select to configure, it
	will ask for the IP address to use, the symbolic host name to use,
	the netmask to use and any media flags to set.

	After all network interfaces have been configured the install pro-
	gram will ask for a default route and IP address of the primary
	name server to use.  You will also be presented with an opportunity
	to edit the host table.

	At this point you will be allowed to edit the file system table
	that will be used for the remainder of the installation and that
	will be used by the finished system, following which the new file
	systems will be mounted to complete the installation.

	After these preparatory steps have been completed, you will be
	able to extract the distribution sets onto your system.  There
	are several install methods supported; FTP, HTTP, tape, CD-ROM, NFS
	or a local disk partition.
@


1.12
log
@Fix a few common typos and stuff related to tape installation.
@
text
@d55 2
a56 1
the Sun System/Networks administrators guide constitute a good start).
d76 2
a77 1
the Sun System/Networks administrators guide constitute a good start).
@


1.11
log
@Your average close-to-release distrib/notes/FOO update.
This time:
- update hardware list, reorganize it more logically
- gets most of the bsd.rd description and instructions on par with other
  arches
- document hov to create a boot tape, and how to boot via s-records
- tries to be more verbose about board setup

This is still way too concise. If you write english better than me (trivial)
and know mvme68k a bit, you're welcome to help fill the blanks.

At least this is better than the existing instructions, and deraadt@@ agrees.
@
text
@d192 1
a192 1
	After these preparatory steps has been completed, you will be
d195 1
a195 5
	or a local disk partition.  To install from a tape, the distrib-
	ution sets must have been written to tape prior to running the
	installation program, either as tar images or as gzipped tar
	images.  Note that installation sets on multiple floppies is not
	currently supported.
d201 1
a201 1
OpenBSDTAPEInstall
@


1.10
log
@General cleanup and updates here too, ok deraadt@@
@
text
@d5 1
a5 5
be booted from tape. Alternatively, if your mvme68k is hooked up in a 
network you can find a server and arrange for a diskless setup which is a 
convenient way to install on a machine whose disk does not currently hold 
a usable operating system (see the section `Installing using a diskless 
setup' below).
d7 5
a12 7
Installing using the OpenBSD ramdisk kernel.

The ramdisk kernel is a kernel that containes an OpenBSD filesystem holding 
all utilities necessary to install OpenBSD on a local disk. It is distributed 
as a binary file with the name bsd.rd.  The ramdisk kernel can be loaded via 
a network boot-server.  This is the fastest installation method.  It also may 
loaded via tape. 
d14 52
a65 3
After the initial probe messages you'll asked to start the install
or upgrade procedure. Proceed to the section `Running the installation
scripts' below.
d68 1
a68 1
Installing using a diskless setup.
d74 2
a75 2
documentation that came with it (on SunOS systems, add_client(8) is a
good start).
d77 133
a209 3
Second, you must configure the netboot parameters in the mvme68k Bug 
using the NIOT command.  The Load Address should be 0x3F0000.  The 
Execution Address should be 0x3F0000.
d211 25
a235 1
Your mvme68k expects to be able to download a second stage bootstrap
d239 3
a241 3
by a period. For example, a sun4c machine which has been assigned IP
address 130.115.144.11, will make an TFTP request for a file that has 
been named in the nvram.  Normally, this file is a second-stage
d244 3
a246 2
You can find the boot program in `/usr/mdec/netboot' in the OpenBSD/mvme68k
distribution. 
d249 1
a249 1
the PROM, it starts locating the machine's remote root directory through
d263 2
a264 8

As noted above in the section `Preparing your System for OpenBSD Installation',
you have several options when choosing a location to store the installation
filesets. However, the easiest way is to put the *.tgz files you want
to install into the root directory for your client on the server.

Next, unpack `base{:--:}OSrev.tgz' and `etc.{:--:}OSrev.tgz' on the server in the root 
directory for your machine. If you elect to use a separately NFS-mounted
d268 2
a269 2
your server's exported OpenBSD "/usr" directory. Also put the kernel and the
install/upgrade scripts into the root directory.
d284 1
a284 1
			server:/export/exec/sun4.OpenBSD /usr  nfs  rw 0 0
d286 1
a286 1
Now you must populate the `/dev' directory for your client. If you server
a294 152

Boot your workstation from the server by entering the appropriate `boot'
command at the monitor prompt. Depending on the PROM version in your machine,
this command takes one of the following forms:

	167-bug> nbo 00 00 bsd -s

This will boot the OpenBSD kernel in single-user mode.
	
	167-bug> nbo 00 00 bsd.rd

This will boot the OpenBSD ramdisk kernel.

If you use a diskless setup with a separately NFS-mounted /usr filesystem,
mount /usr by hand now:

OpenBSD# mount /usr

At this point, it's worth checking the disk label and partition sizes on
the disk you want to install OpenBSD onto. OpenBSD understands SunOS-style
disklabels, so if your disk was previously used by SunOS there will be
a usable label on it. Use `disklabel -e <disk>' (where <disk> is the
device name assigned by the OpenBSD kernel, e.g. `sd0') to view and
modify the partition sizes. See the section `Preparing your System for
OpenBSD Installation' above for suggestions about disk partition sizes.
Make sure all your partitions start and end on cylinder boundaries.

NOTE: if you are installing on a SCSI disk that does *not* have a SunOS
or OpenBSD label on it, you may still be able to use disklabel(8) but you'll
have to create all partitions from scratch. If your disk is listed in
`/etc/disktab', you may use the entry (which in most cases only defines
a `c' partition to describe the whole disk) to put an initial label on
the disk.  DO NOT USE `disklabel -r ...' TO INITIALIZE YOUR DISK LABEL;
THIS WILL LEAD TO UNPREDICTABLE RESULTS. This deficiency will be fixed
in a next release.

Here follows an example of what you'll see while in the disklabel editor.
Do not touch any of the parameters except for the `label: ' entry and
the actual partition size information at the bottom (the lines starting
with `a:', `b:', ...).

The size and offset fields are given in sector units. Be sure to make
these numbers multiples of the of the number of sectors per cylinder:
the kernel might be picky about these things, but aside from this you'll
have the least chance of wasting disk space.
Partitions on which you intend to have a mountable filesystem, should
be given fstype `4.2BSD'. Remember, the `c' partition should describe
the whole disk.
The `(Cyl. x - y)' info that appears after the hash (`#') character is
treated as a comment and need not be filled in when altering partitions.

Special note: the line containing `8 partitions:' is best left alone,
even if you {:-define-:} less then eight partitions. If this line displays
a different number and the program complains about it (after you leave
the editor), then try setting it to `8 partitions:'.


<BEGIN SAMPLE DISKLABEL SCREEN>
OpenBSD# disklabel sd2
# /dev/rsd2c:
type: SCSI
disk: SCSI disk
label: Hold Your Breath
flags:
bytes/sector: 512
sectors/track: 124
tracks/cylinder: 8
sectors/cylinder: 992
cylinders: 4177
total sectors: 4165271
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # microseconds
track-to-track seek: 0  # microseconds
drivedata: 0

8 partitions:
#        size   offset    fstype   [fsize bsize   cpg]
  a:    80000        0    4.2BSD     1024  8192    16   # (Cyl.    0 - 80*)
  b:   256000    80000      swap                        # (Cyl.   80*- 338*)
  c:  4165271        0    unused        0     0         # (Cyl.    0 - 4198*)
  d:  3229271   936000    4.2BSD     1024  8192    16   # (Cyl.  943*- 4198*)
  f:   100000   336000    4.2BSD     1024  8192    16   # (Cyl.  338*- 439*)
  g:   100000   436000    4.2BSD     1024  8192    16   # (Cyl.  439*- 540*)
  h:   400000   536000    4.2BSD     1024  8192    16   # (Cyl.  540*- 943*)
<END SAMPLE DISKLABEL SCREEN>


If you are upgrading a OpenBSD installation, start the upgrade script:

OpenBSD# sh upgrade.sh

else, start the installation script:

OpenBSD# sh install.sh


These scripts will do most of the work of transferring the system from the
tar files onto your disk. You will frequently be asked for confirmation
before the script proceeds with each phase of the installation process.
Occasionally, you'll have to provide a piece of information such as the
name of the disk you want to install on or IP addresses and domain names
you want to assign. If your system has more than one disk, you may want
to look at the output of the dmesg(8) command to see how your disks
have been identified by the kernel.

The installation script goes through the following phases:

	- determination of the disk to install OpenBSD on
	- checking of the partition information on the disk
	- creating and mounting the OpenBSD filesystems
	- setup of IP configuration
	- extraction of the distribution tar files
	- installation of boot programs

OpenBSDFTPInstall

OpenBSDHTTPInstall

OpenBSDTAPEInstall

OpenBSDNFSInstall

OpenBSDDISKInstall(,{:-only-:})

OpenBSDCommonFS

OpenBSDCommonURL

After completing an installation:

Now try a reboot.  (If needed, swap your scsi id's first).  Initially
I'd suggest you "bo bsd -bs", then try multiuser after that.
if you boot single-user the OpenBSD incantation to make the root
filesystem writable is

    OpenBSD# mount -u /dev/sd0a /

Congratulations, you have successfully installed OpenBSD OSREV.  When you
reboot into OpenBSD, you should log in as "root" at the login prompt.
You should create yourself an account and protect it and the "root" account 
with good passwords. 

Some of the files in the OpenBSD OSREV distribution might need to be
tailored for your site.  In particular, the /etc/mail/sendmail.cf file
will almost definitely need to be adjusted, and other files in /etc will
probably need to be modified.  If you are unfamiliar with UN*X-like
system administration, it's recommended that you buy a book that
discusses it.

@


1.9
log
@sendmail.cf lives in /etc/mail now
@
text
@d1 1
a1 2
Installing OpenBSD is a relatively complex process, but if you have
this document in hand it shouldn't be too much trouble.
d94 1
a94 1
Now you must populate the the `/dev' directory for your client. If you server
d162 2
a163 2
 # /dev/rsd2c:
type: SCSI 
d168 5
a172 4
sectors/track: 64
tracks/cylinder: 7  
sectors/cylinder: 448
cylinders: 1429
d177 2
a178 2
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
d183 7
a189 4
  a:    50176        0    4.2BSD        0     0     0   # (Cyl.    0 - 111)
  b:    64512    50176      swap                        # (Cyl.  112 - 255)
  c:   640192        0   unknown                        # (Cyl.    0 - 1428)
  d:   525504   114688    4.2BSD        0     0     0   # (Cyl.  256 - 1428)
d220 15
@


1.8
log
@tweaks/OSrev/cleaning/'.tar.gz -> .tgz' .. etc ..
@
text
@d231 2
a232 2
tailored for your site.  In particular, the /etc/sendmail.cf file will
almost definitely need to be adjusted, and other files in /etc will
@


1.7
log
@improve mvme68k INSTALL note.  Also mvme88k.
@
text
@d69 1
a69 1
filesets. However, the easiest way is to put the *.tar.gz files you want
d72 1
a72 1
Next, unpack `base.tar.gz' and `etc.tar.gz' on the server in the root 
d75 1
a75 1
files in base.tar.gz end up in the correct location. One way to do this is
@


1.6
log
@updates; wvdputte
@
text
@d5 15
a19 17
in terms of preliminary setup is to use the OpenBSD miniroot that can
be booted off your local disk's swap partition. Alternatively, if your
Sparcstation is hooked up in a network you can find a server and arrange
for a diskless setup which is a convenient way to install on a machine
whose disk does not currently hold a usable operating system (see the
section `Installing using a diskless setup' below).


Installing using the OpenBSD miniroot.

The miniroot is a self-contained OpenBSD filesystem holding all utilities
necessary to install OpenBSD on a local disk. It is distributed as a plain
file designed to be transferred to a raw disk partition from which it can
be booted using the appropriate PROM command. Usually, the miniroot will
be loaded into the swap partition of a disk. If needed, you can use any
other unused partition, but remember that the partition will then not
available during the installation process.
a20 1
This will cause the kernel contained in the miniroot to be booted.
d35 5
a39 1
Your Sparcstation expects to be able to download a second stage bootstrap
d44 2
a45 2
address 130.115.144.11, will make an TFTP request for `8273900B.SUN4C'.
Normally, this file is a symbolic link to an appropriate second-stage
d48 2
a49 22
You can find the boot program in `/usr/mdec/boot' in the OpenBSD/sparc
distribution. Unfortunately, it is necessary to install this file
differently for sun4 and sun4c clients: the sun4 version needs to have its
`a.out' header stripped off (otherwise the machine will crash), while the
sun4c version must retain it (otherwise the PROM will complain).

Here's an example to illustrate this whole mess:

    server# cd /<client-root-dir>/usr/mdec
    if client is a sun4:
	server# set SKIP=1
	server# set KARCH=SUN4
    else
	server# set SKIP=0
	server# set KARCH=SUN4C
    server# dd if=boot of=/tftpboot/boot.sparc.OpenBSD.$KARCH skip=$SKIP bs=32
    server# cd /tftpboot
    server# ln -s boot.sparc.OpenBSD.$KARCH 8273900B.$KARCH

Note: some versions of Openboot ROMs (sun4c/sun4m) seem to require that the
boot program size is nicely rounded. Therefore it may be necessary to
strip(8) off the symbol table.
d109 1
a109 3
	> b le()bsd -s		# for sun4 monitors
	ok boot le()bsd -s		# for version 1 OpenBOOT ROMs
	ok boot net bsd -s		# for version 2 OpenBOOT ROMs
d112 2
d115 1
a115 9
[[
NOTE: the latter two examples assume you operate the OpenBOOT ROM in
"new command mode". If your machine comes up and gives you a `>' prompt
instead of `ok', type:

    >n					# enter native OpenBOOT mode
    ok setenv sunmon-compat? false	# make it permanent
    ok
]]
d219 1
a219 1
I'd suggest you "boot sd()bsd -bs", then try multiuser after that.
a224 14
The Sun monitor normally tries to load a file called "vmunix". On
OpenBOOT ROM systems you can change it to load OpenBSD instead using
the following commands:

On version 1 OpenBOOT ROMs:
    >n
    ok setenv boot-from sd(0,0,0)bsd
    ok

On version 2 OpenBOOT ROMs:
    ok setenv boot-file bsd
    ok setenv boot-device /sbus/esp/sd@@0,0


d228 1
a228 1
with good passwords.
a236 83


Installing from SunOS.

You need a SunOS machine to install OpenBSD.  You also need at
least the following pieces:

    the *.tar.gz files you want to install (as a minimum, base.tar.gz)
    gzip (GNU gzip) SunOS binary
    gtar (GNU tar) SunOS binary
    the "install.sh" script
    a "/boot" file from a SunOS machine that matches your machine type
	(e.g. sun or sun4c)
    a kernel, most likely "/bsd"

All these pieces, except "/boot", are supplied in the OpenBSD/sparc
distribution.

You need to format and partition the disk using SunOS (since
OpenBSD/sparc uses SunOS disk labels.)  Give yourself adequate
partition sizes.  Here is an example layout:

    partition    size   offset	  will be..
    sd2a        28140        0	  /
    sd2b        16170    28140	  swap
    sd2c       204540        0	  `whole disk'
    sd2g       160230    44310	  /usr

BTW, These are not recommended sizes.  They simply match the first
(tiny) disk that OpenBSD/sparc ran on.

Use SunOS to newfs the partitions which will have filesystems on them.
(OpenBSD's filesystem format is identical to SunOS).

    sunos# newfs /dev/rsd2a
    [... lots of output]
    sunos# newfs /dev/rsd2g
    [... lots of output]

NOTE: If you are able to, there is a performance benefit from
newfs'ing using OpenBSD.  If you newfs using the OpenBSD newfs command,
be sure to use the -O flag for your / partition, so that newfs will
use the 4.3BSD filesystem format, rather than the new 4.4BSD filesystem
format.  If you forget, you will not be able to boot -- the SunOS boot
blocks do not understand the extended 4.4BSD filesystem format.

Mount those partitions in a tree formation, under /mnt; ie:

    sunos# df
    Filesystem            kbytes    used   avail capacity  Mounted on
    [...]
    /dev/sd2a              11501       0   11501     0%    /mnt
    /dev/sd2g             179529       0  179529     0%    /mnt/usr

Place a standard SunOS "/boot" program in /mnt (your new root
partition), and use the SunOS command "installboot" to make it work.
The installboot man page says to do something like this:

    sunos# cp /boot /mnt/boot
    sunos# /usr/mdec/installboot -vlt /mnt/boot /usr/mdec/bootsd /dev/rsd2a

You can now extract the provided "*.tar.gz files onto your disk.  The
provided script, "install_from_sunos.sh" will help you:

    sunos# ls -FC
    base.tar.gz      etc.tar.gz       man.tar.gz       secr.tar.gz
    comp.tar.gz      games.tar.gz     misc.tar.gz      
    install.sh       bsd.id3_scsi
    sunos# ./install_from_sunos.sh
    [...]

This script NEEDS gzip and gtar (GNU gzip and GNU tar) on your
execution path!  The tar files are in a "new format" that includes
directory information, and SunOS tar will not read them.  Statically
linked versions of these programs for SunOS are supplied in the
distribution.

After the files have been extracted, repair /mnt/etc/fstab to match
your actual disk layout.  (Minus the "/mnt" component of each path, of
course :-)

Now proceed to reboot the machine as described above in "Installing
using a diskless setup".
@


1.5
log
@OSREV/OSrev
@
text
@d268 2
a269 3
There is no initial password, but if you're using the machine in a
networked environment, you should create yourself an account and
protect it and the "root" account with good passwords.
@


1.4
log
@merge text into base
@
text
@d266 1
a266 1
Congratulations, you have successfully installed OpenBSD 2.0.  When you
d272 1
a272 1
Some of the files in the OpenBSD 2.0 distribution might need to be
@


1.3
log
@s/cpp/m4/g
@
text
@d345 1
a345 1
    comp.tar.gz      games.tar.gz     misc.tar.gz      text.tar.gz
@


1.2
log
@typos.
@
text
@d183 1
a183 1
even if you define less then eight partitions. If this line displays
@


1.1
log
@ho hum
@
text
@d5 1
a5 1
nin terms of preliminary setup is to use the OpenBSD miniroot that can
d82 1
a82 1
rogram starts reading from the remote root filesystem in search of the
d167 1
a167 1
Here follows an example of what you'll see while in the dislabel editor.
@
