head	1.18;
access;
symbols
	OPENBSD_6_0:1.17.0.12
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.8
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.4
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.2
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.16
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.14
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.8
	OPENBSD_5_0:1.16.0.10
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@# @;


1.18
date	2016.08.10.14.27.15;	author deraadt;	state dead;
branches;
next	1.17;
commitid	nJ2GKPOeS3xtih2N;

1.17
date	2014.02.28.00.47.14;	author afresh1;	state Exp;
branches;
next	1.16;

1.16
date	2010.03.16.17.23.09;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2010.03.04.10.56.03;	author jasper;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.05.23.05.14;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.10.21.34.14;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.08.01.13.18;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2008.02.24.18.37.14;	author ian;	state Exp;
branches;
next	1.10;

1.10
date	2008.02.22.22.41.31;	author ian;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.18.14.50.34;	author ian;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.11.18.58.16;	author ian;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.11.16.34.45;	author ian;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.25.21.27.15;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.08.05.21.29;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.03.00.28.49;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.28.18.55.21;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.16.20.23.33;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.06.04.06.08;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.18
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@dnl	$OpenBSD: prep,v 1.17 2014/02/28 00:47:14 afresh1 Exp $
To be able to boot the OpenBSD/MACHINE installation program, you will need
to learn a bit about RedBoot, the low-level process that controls the
microprocessor after hardware initialization.
The enabled features between IOData HDL-G and Thecus N2100 vary, so
different methods will be needed on both machines.

All these machines use RedBoot as their firmware and boot loader interface,
with varying limitations.  Thecus systems cannot load a file from disk, but
can load an image from flash or network.  IOData systems however are more
restricted, and can only load an image from ext2fs partitions on disk, while
the commands to load from flash are not available, and network booting does
not appear to work.

Thecus N2100 setup:

	Talking to the Thecus

	The Thecus N2100 needs a serial cable. On the back of the disk drive
	circuit board, there is either a 10-pin header (with one pin removed),
	or 9 holes for you to solder in your own header.  The ribbon cable
	that connects from there to your serial cable or the serial port on
	your computer is of the same type as used on older i386 PCs, but
	be aware that there are two different types of 10-pin IDC to DB-9M
	ribbon cable in use, which look identical (the differences are hidden
	inside the DB-9 connector). The cable you need is wired using the
	"AT-Everex" or "Asus" pinout, as described here:

	    http://www.pccables.com/07120.htm

	and *not* the more straightforward to solder "crossed" type:

	    http://www.pccables.com/07121.htm.

	If you wish to check a cable, or make your own, the pinouts are:

	    DB9           IDC10
	    ===           =====
	    1 2 3 4 5     1 3 5 7 9
	     6 7 8 9      2 4 6 8 10

	Wire pin 1 to 1, 2 to 2 etc, with 10 not connected.

	On the Thecus N2100, it is also necessary to move jumper J3 to J4 to
	properly route the serial port interrupt to allow serial to work under
	OpenBSD. This jumper is located under the disk drives, so you may wish
	to ensure its correct setting while you are installing the disk(s).
	For instructions on assembling/disassembling your N2100, see the N2100
	Manual at
	    http://www.thecus.com/download/manual/N2100%20UM%20EN.pdf


	Booting Thecus N2100

	When you have connected your computer, a command such as
       	"cu -l cuaU0 -s 115200" (assuming cuaU0 is your serial port device)
	should connect you to the Thecus console. Now apply power to the
	Thecus and start it.

	After some device probe information, you should see this prompt:

	    == Executing boot script in 3.000 seconds - enter ^C to abort

	To enter interactive RedBoot, it is necessary to press ^C within the
	given number of seconds of the prompt. It will typically accept the
	^C if typed during the diagnostics that precede this prompt.

	The recommended way to boot OpenBSD on Thecus is to configure
	networking and load bsd.rd from a TFTP server or HTTP server.

	Update the IP address, netmask and server address with the commands
	listed below to allow booting from the network. TFTP and HTTP are
	supported. (BOOTP configuration _may_ not work)

	Using ip_address only allows you to set the local IP address and
	the IP address of the server where bsd.rd is located.  This command
	takes effect immediately but will not persist across a reboot.

	    RedBoot> ip_address -l 10.0.0.21 -h 10.0.0.7
	    IP: 10.0.0.21/255.255.255.0, Gateway: 0.0.0.0
	    Default server: 10.0.0.7, DNS server IP: 0.0.0.0

	Once you have done this, and have set up your TFTP server on
	the gateway machine (10.0.0.7 in the above example), you can
	boot manually.

	    RedBoot> load /bsd.rd
	    Using default protocol (TFTP)
	    Entry point: 0x00200000, address range: 0x00200000-0x0066a49c
	    RedBoot> go

	Once OpenBSD is installed on the hard disk, you will only need to
	load the OpenBSD/MACHINE boot loader (/boot) the same way, and just
	hit "return" to boot OpenBSD.


	Automatic Booting

	However, for easier booting, you may wish to store the OpenBSD boot
	loader in the flash memory, so that the Thecus will boot automatically
	into OpenBSD when it is powered up.
	Doing so disables the devices' built-in Linux kernel, however, and
	makes it difficult or impossible to apply future RedBoot firmware
	upgrades. There are two general approaches:
	1) Just change the boot configuration (using 'fconfig') to automate
	   the above booting (your TFTP or HTTP boot server will still be
	   needed).
	2) Remove a file from the flash and replace it with OpenBSD's /boot;
	   this configuration can then be booted standalone.

	Thecus RedBoot provides the 'fconfig' (not ifconfig) command to
	change the boot configuration of the device. Also 'fis' is provided
	to perform flash operations.

	Due to a change made by Thecus to the firmware, fconfig does not
	work with Thecus firmware version "1.93 (Feb 2007)" or later, and
	*it is thus not possible to make the Thecus auto-boot into OpenBSD*
	(worse, it will let you enter the "script" commands below, but
	ignore them on boot). To correct this, you must "upgrade" your
	Thecus down to firmware version "1.93 Nov 29 2005" using the file 
	n2100-downgrade-reboot.rom *before* you remove any files from flash.
	You can get this file from Thecus; they have given permission for
	it to be mirrored at
	    http://www.darwinsys.com/openbsd/thecus.html
	However, if you have removed files from flash before running this
	downgrade, it is not believed to be possible to get your machine
	to auto-boot.

	Once the downgrade is done, if your TFTP machine will always be
	around, you can autoboot just by changing the boot script with
	fconfig, as follows: (in this example, 192.168.1.254 is both the
	default IP gateway and also the TFTP server):

	    RedBoot> fconfig
	    Run script at boot: true
	    Boot script: 
	    .. load /boot.armish
	    .. go
	    Enter script, terminate with empty line
	    >> load /boot.armish
	    >> go
	    >> 
	    Boot script timeout (1000ms resolution): 3
	    Use BOOTP for network configuration: false
	    Gateway IP address: 192.168.1.254
	    Local IP address: 192.168.1.253
	    Local IP address mask: 255.255.255.0
	    Default server IP address: 192.168.1.254
	    Console baud rate: 115200
	    DNS server IP address: 
	    GDB connection port: 9000
	    HW Status: 0
	    Force console for special debug messages: false
	    MAC address: 0x00:0x14:0xFD:0x30:0x25:0x14
	    MAC address 2: 0x00:0x14:0xFD:0x30:0x25:0x15
	    Network debug at boot time: false
	    Reset default: Normal
	    Serial number: N2100 V2.1.06
	    ... Unlock from 0xf0fc0000-0xf0fc1000: .
	    ... Erase from 0xf0fc0000-0xf0fc1000: .
	    ... Program from 0x07fd2000-0x07fd3000 at 0xf0fc0000: .
	    ... Lock from 0xf0fc0000-0xf0fc1000: .
	    RedBoot> 

	This configuration can easily be set back to the default, as the
	Linux system does not get erased from the flash memory. To set it
	back, just change the boot script with fconfig back to what it was,
	for example:

	    thecus_setip
	    fis load ramdisk
	    fis load kernel
	    exec -c "console=ttyS0,115200 root=/dev/ram0 initrd=0xa0800000,42M mem=128M@@0xa0000000"

	You could also remove the boot script altogether by not re-entering
	it, so you would be dropped to the RedBoot shell by default.

	Recheck the new values and issue the 'reset' command.

	For the standalone booting option, you will have to load /boot into
	the flash memory. To overwrite the Thecus ROM behaviour, it is
	necessary to delete a 'rom file' and load the OpenBSD bootloader image
	there.  With networking configured (as above), remove a region and
	load the 'boot' program.

	Initially the machine will contain much like the following:

	    RedBoot> fis list
	    Name              FLASH addr  Mem addr    Length      Entry point
	    RedBoot           0xF0000000  0xF0000000  0x00040000  0x00000000
	    RedBoot config    0xF0FC0000  0xF0FC0000  0x00001000  0x00000000
	    FIS directory     0xF0FE0000  0xF0FE0000  0x00020000  0x00000000
	    ramdisk           0xF0040000  0x00800000  0x00D00000  0x00800000
	    kernel            0xF0D40000  0x00200000  0x00160000  0x00200000
	    user              0xF0EA0000  0xF0EA0000  0x00120000  0x00200000

	There is no free space in the rom for the 'boot' program, so something
	must be removed. 
	WARNING: this will make the machine unbootable into the original
	Thecus server mode and it is quite difficult to restore to the
	original software.
	EXTREME WARNING: Do not touch the RedBoot, RedBoot config, or FIS 
	directory regions, as doing so will probably brick the device.

	Remove (with confirmation) a region to make space, eg 'user' (the
	non-root files needed to run Linux from Flash Memory).

	    RedBoot> fis delete user
	    Delete image 'user' - continue (y/n)? y
	    ... Erase from 0xf0ea0000-0xf0fc0000: .........
	    ... Unlock from 0xf0fe0000-0xf1000000: .
	    ... Erase from 0xf0fe0000-0xf1000000: .
	    ... Program from 0x07fdf000-0x07fff000 at 0xf0fe0000: .
	    ... Lock from 0xf0fe0000-0xf1000000: .

	Load the OpenBSD/MACHINE bootloader 'boot' via TFTP or HTTP:

	    RedBoot> load -m http /boot
	    Entry point: 0x00100000, address range: 0x00100000-0x001067e0

	Save that loaded file to flash:

	    RedBoot> fis create boot
	    ... Erase from 0xf0ea0000-0xf0ec0000: .
	    ... Program from 0x00100000-0x001067e0 at 0xf0ea0000: .
	    ... Unlock from 0xf0fe0000-0xf1000000: .
	    ... Erase from 0xf0fe0000-0xf1000000: .
	    ... Program from 0x07fdf000-0x07fff000 at 0xf0fe0000: .
	    ... Lock from 0xf0fe0000-0xf1000000: .

	Confirm its addition:

	    RedBoot> fis list
	    Name              FLASH addr  Mem addr    Length      Entry point
	    RedBoot           0xF0000000  0xF0000000  0x00040000  0x00000000
	    RedBoot config    0xF0FC0000  0xF0FC0000  0x00001000  0x00000000
	    FIS directory     0xF0FE0000  0xF0FE0000  0x00020000  0x00000000
	    ramdisk           0xF0040000  0x00800000  0x00D00000  0x00800000
	    kernel            0xF0D40000  0x00200000  0x00160000  0x00200000
	    boot              0xF0EA0000  0x00100000  0x00020000  0x00100000

	Now that the bootloader is in place, update fconfig to autoboot
	OpenBSD:

	    RedBoot> fconfig
	    Run script at boot: true
	    Boot script:
	    .. fis load ramdisk
	    .. fis load kernel
	    .. exec ...
	    Enter script, terminate with empty line
	    >> fis load boot
	    >> go
	    >>
	    Boot script timeout (1000ms resolution): 1
	    ...
	    Update RedBoot non-volatile configuration - continue (y/n)? y
	    ... Unlock from 0xf0fc0000-0xf0fc1000: .
	    ... Erase from 0xf0fc0000-0xf0fc1000: .
	    ... Program from 0x0ffd2000-0x0ffd3000 at 0xf0fc0000: .
	    ... Lock from 0xf0fc0000-0xf0fc1000: .

	The important part is that 'Run script' is true and that the commands
	are 'fis load boot' followed with 'go' ('boot' being the file created
	by 'fis create boot' earlier). Confirm the update and type 'reset'
	to auto boot.

	The bootloader is command driven with timeout like many other OpenBSD
	architectures.


IOData HDL-G setup:

	The hda1 partition is the boot partition for Linux; it contains
	zImage and initrd. Since RedBoot on this machine can only boot from
	the ext2fs partition, it is very important that this partition be
	preserved and not be reformatted. If this partition is destroyed, it
	will be necessary to remove the disk drive and recreate the partition
	on another machine. (RedBoot should be able to boot from the network,
	however that has been unsuccessful on IODATA HDL-G so far)

	To install OpenBSD, boot linux, and copy 'boot' and 'bsd.rd' into the
	partition mounted on /dev/hda1. After that has been done, it is
	possible to reboot into OpenBSD and install the device. Installation
	can then proceed as on other machines, however care must be take to
	not remove wd0i/hda1 partition (fdisk partition 0). DO NOT chose the
	'full disk installation' option.

	Unfortunately, since IODATA did not provide the 'fconfig' command, it
	is not possible to change the boot commands run when RedBoot starts,
	thus it not possible to autoboot OpenBSD; the OpenBSD/MACHINE
	bootloader is currently unable to work when loaded as `zImage'.
	Futhermore, to disable autobooting into Linux, at least one of the
	zImage and initrd files need to be renamed or removed.  This can be
	done from the shell in bsd.rd.

	To load the ramdisk kernel to install use the commands

	    RedBoot> load -m disk hda1:/bsd.rd
	    RedBoot> go

	to boot normally, load the bootloader which will give options to boot
	other kernels.

	    RedBoot> load -m disk hda1:/boot
	    RedBoot> go

	Since this bootloader is able to boot any kernel from the OpenBSD
	root partition, it is not necessary to keep bsd.rd on the hda
	partition after OpenBSD is installed.
@


1.17
log
@Recommend cu instead of tip in the INSTALL prep notes

As well as using a USB serial device in the example.

"cu in general works better on various systems" -- deraadt
"cu is more predictable across platforms" -- dlg

Ok from maja, tedu, bmercer, jj. "I like it" from deraadt

First commit is in documentation, that must be sign of something.
Thanks to everyone for making me feel welcome.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.16 2010/03/16 17:23:09 miod Exp $
@


1.16
log
@Jumbo commit for 4.7 installation instructions:
- do not mention tape as an installation media on systems where it is very
  unlikely that a tape drive can be connected to (i.e. anything with only
  USB as expansion capabilities)
- do not mention that fetching the installation sets from a partition is
  ``for upgrades only''. You may do this for installation, but of course
  you can not use a partition which will be newfs'ed for that purpose.
- mention ext2fs partitions as possible installation sets source only on
  platforms where the installation media actually can mount an ext2fs
  filesystem.
- stress the fact that the sparc miniroot image is a GENERIC kernel with
  a little on-disk filesystem, and not a RAMDISK kernel with a little
  in-memory filesystem, and thus must not be overwritten during installation
  (i.e. be careful if you repartition the disk the miniroot has been put on).
- more conv=sync -> conv=osync for tape setup instructions.
- model-specific layout changes on armish, loongson and socppc instructions.
- fix various typos and grammar mistaeks.

"sure" deraadt@@ (without eyeballing)
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.15 2010/03/04 10:56:03 jasper Exp $
d56 1
a56 1
       	"tip -115200 tty00" (assuming tty00 is your serial port device)
@


1.15
log
@- sync header to 4.7
@
text
@d1 4
a4 6
dnl	$OpenBSD: prep,v 1.14 2008/08/05 23:05:14 miod Exp $
To be able to boot the OpenBSD/MACHINE installation program, you will
need to learn a bit about RedBoot, the low-level process that controls
the microprocessor after hardware initialization.
dnl
dnl XXX bootable partitions
d8 303
a310 312
All these machines use RedBoot as their firmware and boot loader
interface, with varying limitations.  Thecus systems cannot load a
file from disk, but can load an image from flash or network.  IOData
systems are more restricted, and can only load an image from ext2fs
partitions on disk, while the commands to load from flash are not
available and network booting does not appear to work.

Talking to the Thecus

The Thecus N2100 needs a serial cable. On the back of the disk drive
circuit board, there is either a 10-pin header (with one pin removed),
or 9 holes for you to solder in your own header.  The ribbon cable
that connects from there to your serial cable or the serial port on
your computer is of the same type as used on older i386 PCs, but
be aware that there are two different types of 10-pin IDC to DB-9M
ribbon cable in use, which look identical (the differences are hidden
inside the DB-9 connector). The cable you need is wired using the
"AT-Everex" or "Asus" pinout, as described here:

    http://www.pccables.com/07120.htm

and *not* the more straightforward to solder "crossed" type:

    http://www.pccables.com/07121.htm.

If you wish to check a cable, or make your own, the pinouts are:

    DB9           IDC10
    ===           =====
    1 2 3 4 5     1 3 5 7 9
     6 7 8 9      2 4 6 8 10

Wire pin 1 to 1, 2 to 2 etc, with 10 not connected.

On the Thecus N2100, it is necessary to move jumper J3 to J4 to properly
route the serial port interrupt to allow serial to work under OpenBSD.
This jumper is under the disk drives, so you may wish to ensure its
correct setting while you are installing the disk(s).  For instructions
on assembling/disassembling your N2100, see the N2100 Manual at

    http://www.thecus.com/download/manual/N2100%20UM%20EN.pdf


Booting Thecus N2100

When you have connected your computer, a command like "tip -115200 tty00"
(assuming you're using the first serial port on your machine) should 
connect you to the Thecus console. Now apply power to the Thecus
and start it.

After some device probe information, you should see this prompt:

    == Executing boot script in 3.000 seconds - enter ^C to abort

To enter interactive RedBoot, it is necessary to press ^C within the given
number of seconds of the prompt. It will typically accept the ^C if typed 
during the diagnostics that precede this prompt.

The recommended way to boot OpenBSD on Thecus is to configure networking and
load bsd.rd from a tftp server or http server. First networking must be
configured using the fconfig or ip_address commands.

Update the IP address, netmask and server address with the commands
listed below to allow booting from the network. TFTP and HTTP are
supported. (BOOTP configuration _may_ not work)

Using ip_address only allows you to set the local IP address and
the IP address of the server where bsd.rd is located.  This command
takes effect immediately but will not persist across a reboot.

    RedBoot> ip_address -l 10.0.0.21 -h 10.0.0.7
    IP: 10.0.0.21/255.255.255.0, Gateway: 0.0.0.0
    Default server: 10.0.0.7, DNS server IP: 0.0.0.0

Once you have done this, and have set up your TFTP server on
the gateway machine (10.0.0.7 in the above example), you can
boot manually.

    RedBoot> load /bsd.rd
    Using default protocol (TFTP)
    Entry point: 0x00200000, address range: 0x00200000-0x0066a49c
    RedBoot> go

OpenBSD/armish booting ...
initarm: Configuring system ...
physmemory: 32768 pages at 0xa0000000 -> 0xa7ffffff
[ no symbol table formats found ]                  
Copyright (c) 1982, 1986, 1989, 1991, 1993
        The Regents of the University of California.  All rights reserved.
Copyright (c) 1995-2010 OpenBSD. All rights reserved.  http://www.OpenBSD.org
                                                                             
OpenBSD 4.7-beta (RAMDISK) #84: Tue Mar  2 18:21:39 MST 2010
    deraadt@@armish.openbsd.org:/usr/src/sys/arch/armish/compile/RAMDISK
real mem  = 134217728 (128MB)                                          
avail mem = 121610240 (115MB)
...
Install(I), Upgrade(U) or Shell(S)?

If you then install to your hard disk, in future you can
load /boot the same way and just hit "return" to boot OpenBSD.


Automatic Booting

However, for easier booting, you may wish to modify the flash
memory so that the Thecus will boot automatically into OpenBSD
when it is powered up. Doing so disables the devices' built-in
Linux kernel, however, and makes it difficult or impossible to
apply future RedBoot firmware upgrades. There are two general 
approaches:
1) Just change the boot configuration (using 'fconfig') to automate the 
   above booting (your TFTP or HTTP boot server will still be needed);
2) Remove a file from the flash and replace it with OpenBSD's /boot;
   this configuration can be booted standalone.

Thecus RedBoot provides the 'fconfig' (not ifconfig) command to
change the boot configuration of the device. Also 'fis' is provided
to perform flash operations.

Due to a change made by Thecus to the firmware, fconfig does not
work with Thecus firmware version "1.93 (Feb 2007)" or later, and
*it is thus not possible to make the Thecus auto-boot into OpenBSD*
(worse, it will let you enter the "script" commands below, but
ignore them on boot). To correct this, you must "upgrade" your
thecus down to version "1.93 Nov 29 2005" using the file 
n2100-downgrade-reboot.rom *before* you remove any files from flash.
You can get this file from Thecus; they have given permission for
it to be mirrored at http://www.darwinsys.com/openbsd/. However,
if you have removed files from flash before running this downgrade,
it is not believed to be possible to get your machine to auto-boot.

Once the downgrade is done, if your TFTP machine will always be around,
you can autoboot just by changing the boot script with fconfig,
as follows: (in this example, 192.168.1.254 is both the default
IP gateway and also the TFTP server):

    RedBoot> fconfig
    Run script at boot: true
    Boot script: 
    .. load /boot.armish
    .. go
    Enter script, terminate with empty line
    >> load /boot.armish
    >> go
    >> 
    Boot script timeout (1000ms resolution): 3
    Use BOOTP for network configuration: false
    Gateway IP address: 192.168.1.254
    Local IP address: 192.168.1.253
    Local IP address mask: 255.255.255.0
    Default server IP address: 192.168.1.254
    Console baud rate: 115200
    DNS server IP address: 
    GDB connection port: 9000
    HW Status: 0
    Force console for special debug messages: false
    MAC address: 0x00:0x14:0xFD:0x30:0x25:0x14
    MAC address 2: 0x00:0x14:0xFD:0x30:0x25:0x15
    Network debug at boot time: false
    Reset default: Normal
    Serial number: N2100 V2.1.06
    ... Unlock from 0xf0fc0000-0xf0fc1000: .
    ... Erase from 0xf0fc0000-0xf0fc1000: .
    ... Program from 0x07fd2000-0x07fd3000 at 0xf0fc0000: .
    ... Lock from 0xf0fc0000-0xf0fc1000: .
    RedBoot> 

This configuration can easily be set back to the default, as the
Linux system does not get erased from the flash memory. To set it
back, just change the boot script with fconfig back to what it was,
for example:

    thecus_setip
    fis load ramdisk
    fis load kernel
    exec -c "console=ttyS0,115200 root=/dev/ram0 initrd=0xa0800000,42M mem=128M@@0xa0000000"

You could also remove the boot script altogether by not re-entering
it, so you would be dropped to the RedBoot shell by default.

Recheck the new values and use the 'reset' command.


For the standalone booting option, you will have to load /boot into
the flash memory...

To overwrite the Thecus ROM and boot from the load device, it is necessary
to delete a 'rom file' and load the openbsd bootloader image there.  With
networking configured (as above) remove a region and load the 'boot' program.

Initially the machine will contain much like the following:

    RedBoot> fis list
    Name              FLASH addr  Mem addr    Length      Entry point
    RedBoot           0xF0000000  0xF0000000  0x00040000  0x00000000
    RedBoot config    0xF0FC0000  0xF0FC0000  0x00001000  0x00000000
    FIS directory     0xF0FE0000  0xF0FE0000  0x00020000  0x00000000
    ramdisk           0xF0040000  0x00800000  0x00D00000  0x00800000
    kernel            0xF0D40000  0x00200000  0x00160000  0x00200000
    user              0xF0EA0000  0xF0EA0000  0x00120000  0x00200000

There is no free space in the rom for the 'boot' program, so something must
be removed. 
WARNING: this will make the machine unbootable into the original
Thecus server mode and it is quite difficult to restore to the
original software.
EXTREME WARNING: Do not touch the RedBoot, RedBoot config, or FIS 
directory regions, as doing so will probably brick the device.

Remove (with confirmation) a region to make space, eg 'user' (the
non-root files needed to run Linux from Flash Memory).

    RedBoot> fis delete user
    Delete image 'user' - continue (y/n)? y
    ... Erase from 0xf0ea0000-0xf0fc0000: .........
    ... Unlock from 0xf0fe0000-0xf1000000: .
    ... Erase from 0xf0fe0000-0xf1000000: .
    ... Program from 0x07fdf000-0x07fff000 at 0xf0fe0000: .
    ... Lock from 0xf0fe0000-0xf1000000: .

Load the Armish OpenBSD bootloader 'boot' via tftp or http:

    RedBoot> load -m http /boot
    Entry point: 0x00100000, address range: 0x00100000-0x001067e0

Save that loaded file to flash:

    RedBoot> fis create boot
    ... Erase from 0xf0ea0000-0xf0ec0000: .
    ... Program from 0x00100000-0x001067e0 at 0xf0ea0000: .
    ... Unlock from 0xf0fe0000-0xf1000000: .
    ... Erase from 0xf0fe0000-0xf1000000: .
    ... Program from 0x07fdf000-0x07fff000 at 0xf0fe0000: .
    ... Lock from 0xf0fe0000-0xf1000000: .

Confirm its addition:

    RedBoot> fis list
    Name              FLASH addr  Mem addr    Length      Entry point
    RedBoot           0xF0000000  0xF0000000  0x00040000  0x00000000
    RedBoot config    0xF0FC0000  0xF0FC0000  0x00001000  0x00000000
    FIS directory     0xF0FE0000  0xF0FE0000  0x00020000  0x00000000
    ramdisk           0xF0040000  0x00800000  0x00D00000  0x00800000
    kernel            0xF0D40000  0x00200000  0x00160000  0x00200000
    boot              0xF0EA0000  0x00100000  0x00020000  0x00100000

Now that the bootloader is in place, update fconfig to autoboot OpenBSD:

    RedBoot> fconfig
    Run script at boot: true
    Boot script:
    .. fis load ramdisk
    .. fis load kernel
    .. exec ...
    Enter script, terminate with empty line
    >> fis load boot
    >> go
    >>
    Boot script timeout (1000ms resolution): 1
    ...
    Update RedBoot non-volatile configuration - continue (y/n)? y
    ... Unlock from 0xf0fc0000-0xf0fc1000: .
    ... Erase from 0xf0fc0000-0xf0fc1000: .
    ... Program from 0x0ffd2000-0x0ffd3000 at 0xf0fc0000: .
    ... Lock from 0xf0fc0000-0xf0fc1000: .

The important part is that 'Run script' is true and that the commands are
'fis load boot' and 'go' ('boot' is the file created by 'fis create boot'
earlier). Confirm the update and type 'reset' to auto boot.

The bootloader is command driven with timeout like many other OpenBSD
architectures.


How to boot/install IOData HDL-G:

The hda1 partition is the boot partition for Linux; it contains
zImage and initrd. Since RedBoot only can boot from the ext2fs partition
it is very important that this partition be present and not be reformatted.
If this partition is destroyed, it will be necessary to remove the HD and
recreate the partition on another machine. Note: RedBoot should be able
to boot from the network, however that has been unsuccessful on IODATA HDL-G
so far.

To install OpenBSD, boot linux, and copy 'boot' and 'bsd.rd' into the
partition mounted on /dev/hda1, after that has been done, it is possible
to reboot into OpenBSD and install the device. Installation can proceed
as on other machines, however care must be take to not remove wd0i/hda1
partition (fdisk partition 0). DO NOT chose the 'full disk installation'
option.

Unfortunately, since IODATA did not provide the 'fconfig' command it
is not possible to change the boot commands run when RedBoot starts,
thus it not possible to autoboot OpenBSD; the OpenBSD/MACHINE bootloader
is currently unable to work when loaded as `zImage'.  Futhermore, to
disable autobooting into Linux, at least one of the zImage and initrd files
need to be renamed or removed.  This can be done from the shell in bsd.rd.

To load the ramdisk kernel to install use the commands

    RedBoot> load -m disk hda1:/bsd.rd
    RedBoot> go

to boot normally, load the bootloader which will give options to boot other
kernels.

    RedBoot> load -m disk hda1:/boot
    RedBoot> go

Since this bootloader is able to boot any kernel from the OpenBSD root
partition, it is not necessary to keep bsd.rd on the hda1 partition after
OpenBSD is installed.
@


1.14
log
@Various tweaks and clarifications, and drop obsolete information regarding
last century's hard disks on this century's platforms.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.13 2008/03/10 21:34:14 miod Exp $
d95 2
a96 2
physmemory: 65536 pages at 0xa0000000 -> 0xafffffff
[ no symbol table formats found ]
d99 3
a101 3
Copyright (c) 1995-2008 OpenBSD. All rights reserved.  http://www.OpenBSD.org

OpenBSD 4.3 (RAMDISK) #175: Tue Mar  4 21:54:34 MST 2008
d103 2
a104 2
real mem  = 268435456 (256MB)
avail mem = 250630144 (239MB)
@


1.13
log
@Layout tweaks.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.12 2008/03/08 01:13:18 sthen Exp $
d10 6
a15 5
Thecus cannot load a file from disk, but can load an image
from flash or network.
IOData can load an image from disk (ext2fs), however the commands
to load from flash are not available and network booting does not appear
to work.
d296 1
a296 1
to reboot into OpenBSD and install the device. Installation can proceede
d302 5
a306 5
is not possible to change the boot commands run when redboot launches,
So it not possible to autoboot. Eventually 'boot' may be built such
that it can be loaded as 'zImage', but not now. To disable autobooting
into linux, zImage and initrd can be renamed or removed. The presence of 
bsd.rd will allow manipulation of that parition.
d319 3
@


1.12
log
@show people how to load bsd.rd over the network rather than just the
bootloader, and clarify autoboot instructions. ok deraadt
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.11 2008/02/24 18:37:14 ian Exp $
d27 3
a29 1
http://www.pccables.com/07120.htm
d31 3
a33 1
http://www.pccables.com/07121.htm.
d35 5
a39 4
DB9           IDC10
===           =====
1 2 3 4 5     1 3 5 7 9
 6 7 8 9      2 4 6 8 10
d48 3
a50 1
http://www.thecus.com/download/manual/N2100%20UM%20EN.pdf
d61 1
a61 1
== Executing boot script in 3.000 seconds - enter ^C to abort
d79 3
a81 7
eg:
---
RedBoot> ip_address -l 10.0.0.21 -h 10.0.0.7
IP: 10.0.0.21/255.255.255.0, Gateway: 0.0.0.0
Default server: 10.0.0.7, DNS server IP: 0.0.0.0

---
d87 4
a90 4
RedBoot> load /bsd.rd
Using default protocol (TFTP)
Entry point: 0x00200000, address range: 0x00200000-0x0066a49c
RedBoot> go
d110 1
d145 30
a174 30
RedBoot> fconfig
Run script at boot: true
Boot script: 
.. load /boot.armish
.. go
Enter script, terminate with empty line
>> load /boot.armish
>> go
>> 
Boot script timeout (1000ms resolution): 3
Use BOOTP for network configuration: false
Gateway IP address: 192.168.1.254
Local IP address: 192.168.1.253
Local IP address mask: 255.255.255.0
Default server IP address: 192.168.1.254
Console baud rate: 115200
DNS server IP address: 
GDB connection port: 9000
HW Status: 0
Force console for special debug messages: false
MAC address: 0x00:0x14:0xFD:0x30:0x25:0x14
MAC address 2: 0x00:0x14:0xFD:0x30:0x25:0x15
Network debug at boot time: false
Reset default: Normal
Serial number: N2100 V2.1.06
... Unlock from 0xf0fc0000-0xf0fc1000: .
... Erase from 0xf0fc0000-0xf0fc1000: .
... Program from 0x07fd2000-0x07fd3000 at 0xf0fc0000: .
... Lock from 0xf0fc0000-0xf0fc1000: .
RedBoot> 
d181 4
a184 4
	thecus_setip
	fis load ramdisk
	fis load kernel
	exec -c "console=ttyS0,115200 root=/dev/ram0 initrd=0xa0800000,42M mem=128M@@0xa0000000"
a190 1
---
d199 10
a208 11
Initially the machine will contain much like the following
---
RedBoot> fis list
Name              FLASH addr  Mem addr    Length      Entry point
RedBoot           0xF0000000  0xF0000000  0x00040000  0x00000000
RedBoot config    0xF0FC0000  0xF0FC0000  0x00001000  0x00000000
FIS directory     0xF0FE0000  0xF0FE0000  0x00020000  0x00000000
ramdisk           0xF0040000  0x00800000  0x00D00000  0x00800000
kernel            0xF0D40000  0x00200000  0x00160000  0x00200000
user              0xF0EA0000  0xF0EA0000  0x00120000  0x00200000
---
d220 8
a227 9
---
RedBoot> fis delete user
Delete image 'user' - continue (y/n)? y
... Erase from 0xf0ea0000-0xf0fc0000: .........
... Unlock from 0xf0fe0000-0xf1000000: .
... Erase from 0xf0fe0000-0xf1000000: .
... Program from 0x07fdf000-0x07fff000 at 0xf0fe0000: .
... Lock from 0xf0fe0000-0xf1000000: .
---
d231 2
a232 4
---
RedBoot> load -m http /boot
Entry point: 0x00100000, address range: 0x00100000-0x001067e0
---
d236 7
a242 9
---
RedBoot> fis create boot
... Erase from 0xf0ea0000-0xf0ec0000: .
... Program from 0x00100000-0x001067e0 at 0xf0ea0000: .
... Unlock from 0xf0fe0000-0xf1000000: .
... Erase from 0xf0fe0000-0xf1000000: .
... Program from 0x07fdf000-0x07fff000 at 0xf0fe0000: .
... Lock from 0xf0fe0000-0xf1000000: .
---
d246 8
a253 10
---
RedBoot> fis list
Name              FLASH addr  Mem addr    Length      Entry point
RedBoot           0xF0000000  0xF0000000  0x00040000  0x00000000
RedBoot config    0xF0FC0000  0xF0FC0000  0x00001000  0x00000000
FIS directory     0xF0FE0000  0xF0FE0000  0x00020000  0x00000000
ramdisk           0xF0040000  0x00800000  0x00D00000  0x00800000
kernel            0xF0D40000  0x00200000  0x00160000  0x00200000
boot              0xF0EA0000  0x00100000  0x00020000  0x00100000
---
d256 18
a273 19
---
RedBoot> fconfig
Run script at boot: true
Boot script:
.. fis load ramdisk
.. fis load kernel
.. exec ...
Enter script, terminate with empty line
>> fis load boot
>> go
>>
Boot script timeout (1000ms resolution): 1
...
Update RedBoot non-volatile configuration - continue (y/n)? y
... Unlock from 0xf0fc0000-0xf0fc1000: .
... Erase from 0xf0fc0000-0xf0fc1000: .
... Program from 0x0ffd2000-0x0ffd3000 at 0xf0fc0000: .
... Lock from 0xf0fc0000-0xf0fc1000: .
---
a281 1
------
d309 2
a310 4
---
RedBoot> load -m disk hda1:/bsd.rd
RedBoot> go
---
d315 3
a317 4
---
RedBoot> load -m disk hda1:/boot
RedBoot> go
---
@


1.11
log
@typo, from sthen@@, missed in previous commit
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.10 2008/02/22 22:41:31 ian Exp $
d84 1
a84 1
RedBoot> load /boot.armish
d86 1
a86 1
Entry point: 0x00100000, address range: 0x00100000-0x00106804
a87 3
>> OpenBSD/armish BOOT 1.0
boot> boot /bsd.rd
booting wd0a:/bsd.rd: 196+1878672+2663444+0+225844 [75+110592+98669]=0x4c49f0
d91 2
a92 2
physmemory: 32768 pages at 0xa0000000 -> 0xa7ffffff
[ using 209832 bytes of bsd ELF symbol table ]
d95 1
a95 1
Copyright (c) 1995-2007 OpenBSD. All rights reserved.  http://www.OpenBSD.org
d97 1
a97 1
OpenBSD 4.1-current (RAMDISK) #108: Thu Jun  7 22:09:18 MDT 2007
d99 2
a100 2
real mem  = 134217728 (128MB)
avail mem = 121081856 (115MB)
d282 2
a283 2
"fis load boot' and 'go' (note that 'boot' is the same as the 'fis create boot'
confirm the update and 'reset' to auto boot. XXX What does that mean??
@


1.10
log
@More shuffling, and, show two alternate ways to get
your Thecus N2100 up and running with semi-automatic
booting (since it won't power up w/o a button press,
no fully automatic booting). OK sthen@@ miod@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.9 2007/06/18 14:50:34 ian Exp $
d131 1
a131 1
ignore them on boot). To correct this, you must "updgrade" your
@


1.9
log
@Firmware version warning; several re-wordings.
Improved by deraadt@@.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.8 2007/06/11 18:58:16 ian Exp $
d3 2
a4 2
need to acquire some limited knowledge of RedBoot, the low-level
process that controls the microprocessor after hardware initialization.
d7 1
a7 1
The enabled features between IOData HDL-G and Thecus N2100 vary so
d10 10
a19 2
The Thecus N2100 needs a serial cable. There is either a 10-pin
header (with one pin removed) on the back of the disk circuit board,
d25 1
a25 1
inside the DB-9 connector). The cable you need is wired using the 
d28 1
a28 1
and not the more straightforward to solder "crossed" type:
d40 2
a41 2
This jumper is under the disk drives, so you may wish to ensure its 
correct setting while you are installing the disk(s).  For instructions 
d45 1
a45 7
Thecus cannot load a file from disk, but can load an image
from flash or network.
IOData can load an image from disk (ext2fs), however the commands
to load from flash are not available and network booting does not appear
to work.

Booting Thecus N2100 
d49 2
a50 11
connect you to the Thecus console.

Thecus RedBoot provides the 'fconfig' (not ifconfig) command to
change the boot configuration of the device. Also 'fis' is provided
to perform flash operations.

Due to a change made by Thecus to the firmware, fconfig does not
work with Thecus firmware version 1.93 (Feb 2007) and later, and
*it is thus not possible to make the Thecus auto-boot into OpenBSD*
(worse, it will let you enter the "script" commands below, but
ignore them on boot).
d56 2
a57 2
To enter interactive RedBoot, it is necessary to press ^C within a
second or so of the prompt, it will typically accept the ^C if typed 
d60 1
a60 1
The recommended way to install Thecus is to configure networking and
d70 1
a70 1
also ensures that the new values will be used immediately.
d80 63
a142 3
If you want to make permanent changes or you have to use 
a more complicated network setup where you have to use a
gateway or a nameserver, you have to use fconfig.
a143 2
eg:
---
d147 2
a148 3
.. fis load ramdisk
.. fis load kernel
.. exec
d150 4
a153 2
>>
Boot script timeout (1000ms resolution): 1
d155 2
a156 2
Gateway IP address: 10.0.0.1
Local IP address: 10.0.0.21
d158 1
a158 1
Default server IP address: 10.0.0.7
d160 1
a160 1
DNS server IP address: 10.0.0.1
d164 2
a165 2
MAC address: [DO_NOT_MODIFY_MAC]
MAC address 2: [DO_NOT_MODIFY_MAC]
d168 1
a168 2
Serial number: N2100 V1.0.3
Update RedBoot non-volatile configuration - continue (y/n)? y
d171 1
a171 1
... Program from 0x0ffd2000-0x0ffd3000 at 0xf0fc0000: .
d173 11
a183 1
---
d185 2
a186 5
Now that you have modified the configuration in the FLASH
memory, you have to reset the box so the new configuration
is going to be used upon boot.
We have also removed the boot script by not re-entering
it so you will be dropped to the RedBoot shell by default.
d192 2
a193 5
Now that you have your network configured it is possible to boot
either from http
RedBoot> load -m http /bsd.rd
or tftp (to a configured tftp server, and Default server configured)
RedBoot> load bsd.rd
d195 1
a195 30
after the ramdisk image is loaded, the 'go' command will start the kernel
eg:
---
RedBoot> load bsd.rd
Using default protocol (TFTP)
Entry point: 0x00200000, address range: 0x00200000-0x00652180
RedBoot> go

OpenBSD/armish booting ...
initarm: Configuring system ...
physmemory: 32768 pages at 0xa0000000 -> 0xa7ffffff
kernelsize text 1c7910 total 488728 end c0688728esym c0688728
physical_freestart a0689000 end a8000000
[ no symbol table formats found ]
Copyright (c) 1982, 1986, 1989, 1991, 1993
        The Regents of the University of California.  All rights reserved.
Copyright (c) 1995-2006 OpenBSD. All rights reserved.  http://www.OpenBSD.org

OpenBSD 4.0 (RAMDISK) #34: Thu Aug 31 00:30:56 GMT 2006
    deraadt@@armish.openbsd.org:/usr/src/sys/arch/armish/compile/RAMDISK
...
---

It is then possible to use bsd.rd to format and install the HD on the Thecus.

In addition to installation, it is useful to configure the Thecus to autoboot.
This can be done either by overwriting part of the thecus distribution rom
or by loading the bootloader from the network.

To overwrite the thecus rom and boot from the load device, it is necessary
d212 6
a217 4
be removed. WARNING, this will likely make the machine unbootable into
the original thecus server mode and it may not be recoverable.
EXTREME WARNING, do not touch the RedBoot, RedBoot config, or FIS directory
regions, doing so may brick the device.
d219 2
a220 1
Remove (with confirmation) a region to make space, eg user
d231 1
a231 1
Load the armish openbsd bootloader 'boot' via tftp or http
d238 1
a238 1
save that loaded file to flash
d250 1
a250 1
confirm its addition
d263 2
a264 2
Now that the bootloader is in place, update fconfig to autoboot OpenBSD
----
d270 1
a270 1
.. exec
d282 1
a282 1
----
d286 4
a289 2
confirm the update and 'reset' to auto boot. The bootloader is
command driven with timeout like many other OpenBSD architectures.
d291 1
d295 1
a295 1
The hda1 partition is the boot partition for linux, it contains
@


1.8
log
@Ascii Art from jsg and a typo from jmc.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.7 2007/06/11 16:34:45 ian Exp $
a43 5
Thecus RedBoot provides the 'fconfig' command to change the boot
configuration of the device also 'fis' is provided to perform
flash operations.
To enter interactive RedBoot, it is necessary to press ^C within one
second of the prompt, it will typically accept it if typed early.
d45 23
a67 1
The recommended way to install Thecus is configure networking and
d76 2
a77 3
the IP address of the server where bsd.rd is located.
This command also ensures that the new values  are going to be
used instantly.
@


1.7
log
@Describe serial cable and conflicting pinouts; link to manual; reword bits.
ok drahn@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.6 2007/05/25 21:27:15 krw Exp $
d14 1
a14 1
your computer is of the same type as used on older i386 PC's, but
d22 7
@


1.6
log
@"interupt" -> "interrupt" in various comments. Mostly from Diego Casati.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.5 2007/03/08 05:21:29 david Exp $
d8 14
a21 1
the same methods will not work on both machines.
d25 4
@


1.5
log
@spelling fixes; ok deraadt@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.4 2006/12/03 00:28:49 drahn Exp $
d11 1
a11 1
route the serial port interupt to allow serial to work under OpenBSD.
@


1.4
log
@Mention that the jumper must be moved to J4 on Thecus N2100.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.3 2006/11/28 18:55:21 robert Exp $
d226 1
a226 1
If this parition is destroyed, it will be necessary to remove the HD and
@


1.3
log
@fix the installation guide of the Thecus boxes by
providing two working methods;
ok deraadt@@
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.2 2006/09/16 20:23:33 drahn Exp $
d9 3
@


1.2
log
@Installation information for armish (thecus/iodata) kinda crude but
should have most of the info.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.1 2006/06/06 04:06:08 drahn Exp $
d17 1
a17 1
Thecus Redboot provides the 'fconfig' command to change the boot
d20 1
a20 1
To enter interactive Redboot, it is necessary to press ^C within one
d25 1
a25 1
configured using fconfig,
d27 20
a46 3
Update the IP address mask and server address with fconfig to allow
booting from the network. TFTP and HTTP are supported.
(BOOTP configuration _may_ not work)
d57 1
a57 1
>> 
d74 15
a88 1
Update RedBoot non-volatile configuration - continue (y/n)? n
d91 1
a91 1
Once the IP address/mask/gateway is configured it is possible to boot
d93 1
a93 1
RedBoot> load -m http -h 10.0.0.1 /bsd.rd
d162 1
a162 1
RedBoot> load -m http -h 10.0.0.1 /boot
d205 5
d221 1
a221 1
zImage and initrd. Since Redboot only can boot from the ext2fs partition
d224 1
a224 1
recreate the partition on another machine. Note: Redboot should be able
@


1.1
log
@Initial version of port specific documentation, mostly a skeleton for now.
@
text
@d1 1
a1 1
dnl	$OpenBSD: prep,v 1.2 2005/01/15 17:52:09 miod Exp $
d3 1
a3 1
need to acquire some limited knowledge of Linux, the low-level
d7 213
@

