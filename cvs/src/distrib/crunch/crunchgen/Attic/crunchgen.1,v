head	1.22;
access;
symbols
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.18.0.6
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.4
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.8.0.12
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.10
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.8
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.6
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.22
date	2008.08.22.15.18.55;	author deraadt;	state dead;
branches;
next	1.21;

1.21
date	2007.05.31.19.19.15;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2006.10.15.15.31.06;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2006.10.14.20.23.29;	author drahn;	state Exp;
branches;
next	1.18;

1.18
date	2005.08.04.05.08.15;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.03.22.39.54;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.02.11.25.05;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.24.09.11.39;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.19.18.58.58;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.30.08.55.27;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.21.11.39.59;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.08.09.17.56;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.08.08.53.23;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.31.07.52.56;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.13.20.55.01;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.01.22.10.03;	author todd;	state Exp;
branches;
next	1.6;

1.6
date	99.07.09.13.35.58;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.05.23.14.10.49;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	97.08.30.17.20.52;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.08.01.12.55.18;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.19.31.51;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.31;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Merge crunchgen & crunchhide (using name checking), and move to usr.sbin
next step is to not install it as two programs, but be even more clever
@
text
@.\"	$OpenBSD: crunchgen.1,v 1.21 2007/05/31 19:19:15 jmc Exp $
.\"
.\"
.\" Copyright (c) 1994 University of Maryland
.\" All Rights Reserved.
.\"
.\" Permission to use, copy, modify, distribute, and sell this software and its
.\" documentation for any purpose is hereby granted without fee, provided that
.\" the above copyright notice appear in all copies and that both that
.\" copyright notice and this permission notice appear in supporting
.\" documentation, and that the name of U.M. not be used in advertising or
.\" publicity pertaining to distribution of the software without specific,
.\" written prior permission.  U.M. makes no representations about the
.\" suitability of this software for any purpose.  It is provided "as is"
.\" without express or implied warranty.
.\"
.\" U.M. DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL U.M.
.\" BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
.\" IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" Author: James da Silva, Systems Design and Analysis Group
.\"			   Computer Science Department
.\"			   University of Maryland at College Park
.\"
.Dd $Mdocdate: May 31 2007 $
.Dt CRUNCHGEN 1
.Os
.Sh NAME
.Nm crunchgen
.Nd generates build environment for a crunched binary
.Sh SYNOPSIS
.Nm crunchgen
.Bk -words
.Op Fl Efq
.Op Fl c Ar c-file-name
.Op Fl D Ar src-root
.Op Fl e Ar exec-file-name
.Op Fl L Ar lib-dir
.Op Fl m Ar makefile-name
.Op Fl O Ar objdir-name
.Ar conf-file
.Ek
.Sh DESCRIPTION
A crunched binary is a program made up of many other programs linked
together into a single executable.
The crunched binary main() function determines which component program
to run by the contents of argv[0].
The main reason to crunch programs together is for fitting as many programs
as possible onto an installation or system recovery floppy.
.Pp
.Nm
reads in the specifications in
.Ar conf-file
for a crunched binary, and generates a Makefile and accompanying
top-level C source file that when built create the crunched executable
file from the component programs.
For each component program,
.Nm
can optionally attempt to determine the object (.o) files that make up
the program from its source directory Makefile.
This information is cached in a file named
.Pa <conf-name>.cache
between runs.
.Nm
uses the companion program
.Xr crunchide 1
to eliminate link-time conflicts between the component programs by
hiding all unnecessary symbols.
.Pp
After
.Nm
is run, the crunched binary can be built by running
.Dq make -f <conf-name>.mk .
The component programs' object files must already be built.
An
.Dq objs
target, included in the output makefile,
will run make in each component program's source dir to build the object
files for the user.
This is not done automatically since in release engineering circumstances
it is generally not desirable to be modifying objects in other directories.
.Pp
The options are as follows:
.Bl -tag -width indent
.It Fl c Ar c-file-name
Set output C file name to
.Ar c-file-name .
The default name is
.Dq Ao conf-name Ac Ns \&.c .
.It Fl D Ar src-root
Assume that relative source directory specifications begin with
.Ar src-root .
.It Fl E
Don't prepend stub names with an underscore.
Used for architectures that don't have underscore prepended to symbol names.
Example mips ELF.
.It Fl e Ar exec-file-name
Set crunched binary executable file name to
.Ar exec-file-name .
The default name is
.Dq Aq conf-name .
.It Fl f
Flush cache.
Forces the recalculation of cached parameters.
.It Fl L Ar lib-dir
Try to obtain libraries from
.Ar lib-dir .
.It Fl m Ar makefile-name
Set output Makefile name to
.Ar makefile-name .
The default name is
.Dq Ao conf-name Ac Ns \&.mk .
.It Fl O Ar objdir-name
Specify an object directory to use.
It defaults to
.Dq obj ,
though for cross building purposes it can be used to specify
obj.${HOST}.${MACHINE}.
Normally used with the make variable ${MAKEOBJDIR}.
.It Fl q
Quiet operation.
Status messages are suppressed.
.El
.Sh CRUNCHGEN CONFIGURATION FILE COMMANDS
.Nm
reads specifications from the
.Ar conf-file
that describe the components of the crunched binary.
In its simplest use, the component program names are merely listed
along with the top-level source directories in which their sources
can be found.
.Nm
then calculates (via the source makefiles) and caches the
list of object files and their locations.
For more specialized situations, the user can specify by hand
all the parameters that
.Nm
needs.
.Pp
The
.Ar conf-file
commands are as follows:
.Bl -tag -width indent
.It srcdirs Ar dirname ...
A list of source trees in which the source directories of the
component programs can be found.
These dirs are searched using the BSD
.Dq <source-dir>/<progname>/
convention.
Multiple srcdirs lines can be specified.
The directories are searched in the order they are given.
.It libdirs Ar dirname
A list of source trees in which the source directories for supplementary
libraries can be found.
.It progs Ar progname ...
A list of programs that make up the crunched binary.
Multiple progs lines can be specified.
.It libs Ar libspec ...
A list of library specifications to be included in the crunched binary link.
Multiple libs lines can be specified.
.It ln Ar progname linkname
Causes the crunched binary to invoke
.Ar progname
whenever
.Ar linkname
appears in argv[0].
This allows programs that change their behavior when
run under different names to operate correctly.
.El
.Pp
To handle specialized situations, such as when the source is not
available or not built via a conventional Makefile, the following
.Ic special
commands can be used to set
.Nm
parameters for a component program.
.Bl -tag -width indent
.It special Ar progname No srcdir Ar pathname
Set the source directory for
.Ar progname .
This is normally calculated by searching the specified srcdirs
for a directory named
.Ar progname .
.It special Ar progname No objdir Ar pathname
Set the obj directory for
.Ar progname .
This is normally calculated by looking for a directory named
.Dq obj
under the
.Ar srcdir ,
and if that is not found, the
.Ar srcdir
itself becomes the objdir.
.It special Ar progname No objs Ar object-file-name ...
Set the list of object files for program
.Ar progname .
This is normally calculated by constructing a temporary makefile that includes
.Dq srcdir/Makefile
and outputs the value of $(OBJS).
.It special Ar progname No objpaths Ar full-pathname-to-object-file ...
Sets the pathnames of the object files for program
.Ar progname .
This is normally calculated by prepending the objdir
pathname to each file in the objs list.
.El
.Pp
Only the objpaths parameter is actually needed by
.Nm crunchgen ,
but it is calculated from objdir and objs,
which are in turn calculated from srcdir,
so it is sometimes convenient to specify the earlier parameters and let
.Nm
calculate forward from there if it can.
.Pp
The makefile produced by
.Nm
contains an optional
.Ar objs
target that will build the object files for each component program by
running make inside that program's source directory.
For this to work the srcdir and objs parameters must also be valid.
If they are not valid for a particular program, that program is skipped in the
.Ar objs
target.
.Sh EXAMPLES
Here is an example
.Nm
input conf file, named
.Pa kcopy.conf :
.Bd -literal -offset indent
srcdirs /usr/src/bin /usr/src/sbin

progs test cp echo sh fsck halt init mount umount myinstall
ln test [       # test can be invoked via [
ln sh -sh       # init invokes the shell with "-sh" in argv[0]

special myprog objpaths /homes/leroy/src/myinstall.o # no sources

libs -lutil -lcrypt
.Ed
.Pp
This conf file specifies a small crunched binary consisting of some
basic system utilities plus a home-grown install program
.Dq myinstall ,
for which no source directory is specified, but its object file is
specified directly with the
.Ic special
line.
.Pp
The crunched binary
.Dq kcopy
can be built as follows:
.Bd -literal -offset indent
% crunchgen -m Makefile kcopy.conf    # gen Makefile and kcopy.c
% make objs		# build the component programs' .o files
% make			# build the crunched binary kcopy
% kcopy sh		# test that this invokes a sh shell
$			# it works!
.Ed
.Pp
At this point the binary
.Dq kcopy
can be copied onto an install floppy
and hard-linked to the names of the component programs.
.Sh SEE ALSO
.Xr crunchide 1
.Sh AUTHORS
.Nm
was written by James da Silva
.Aq jds@@cs.umd.edu .
.Pp
Copyright (c) 1994 University of Maryland.  All Rights Reserved.
.Sh CAVEATS
While
.Nm
takes care to eliminate link conflicts between the component programs
of a crunched binary, conflicts are still possible between the
libraries that are linked in.
Some shuffling in the order of libraries may be required,
and in some rare cases two libraries may
have an unresolvable conflict and thus cannot be crunched together.
.Pp
Some versions of the BSD build environment do not by default build the
intermediate object file for single-source file programs.
The
.Dq make objs
target must then be used to get those object files built,
or some other arrangements made.
@


1.21
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.20 2006/10/15 15:31:06 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate$
@


1.20
log
@tweaks; ok drahn
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.19 2006/10/14 20:23:29 drahn Exp $
d28 1
a28 1
.Dd June 14, 1994
@


1.19
log
@Add a new option to crunchgen '-O objdir-name' which allow for a object
directory other than the previously  hardcoded 'obj' to be specified.
Allows for cross building of ramdisks (down the road).
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.18 2005/08/04 05:08:15 jmc Exp $
d117 6
a122 3
Specify an object directory to use, defaults to 'obj' however for cross
building purposes can be used to specify obj.${HOST}.${MACHINE} normally
used with the make variable ${MAKEOBJDIR}.
@


1.18
log
@remove trailing space;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.17 2005/08/03 22:39:54 espie Exp $
d43 1
d116 4
@


1.17
log
@document cache file name,
more use of $@@, use exec where appropriate.
okay deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.16 2005/08/02 11:25:05 espie Exp $
d64 1
a64 1
.Pa <conf-name>.cache 
@


1.16
log
@New keyword: libdirs, to be able to specify alternate places to
look for libraries. Uses the same mechanism as srcdirs.

While in there, make extensive use of $@@ to simplify the Makefile,
introduce LINK macro to clarify things, replace
(cd dir; make -f Makefile target) with cd dir && ${MAKE} -f Makefile target
which is slightly more correct and uses the right make.
Add .PHONY targets.

comments by millert@@, okay deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.15 2004/08/24 09:11:39 jmc Exp $
d63 3
a65 1
This information is cached between runs.
@


1.15
log
@- `conf-file' arg is not optional (from netbsd)
- sort SYNOPSIS and options list
- kill .Pp before a display
- sync usage()
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.14 2003/10/19 18:58:58 jmc Exp $
d145 3
@


1.14
log
@typo from Jared Yanovich;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.13 2003/05/30 08:55:27 jmc Exp $
d36 2
a37 2
.Op Fl fqE
.Op Fl m Ar makefile-name
d39 1
a40 1
.Op Fl D Ar src-root
d42 3
a44 1
.Op Ar conf-file
d90 7
d105 3
a115 10
.It Fl E
Don't prepend stub names with an underscore.
Used for architectures that don't have underscore prepended to symbol names.
Example mips ELF.
.It Fl D Ar src-root
Assume that relative source directory specifications begin with
.Ar src-root .
.It Fl L Ar lib-dir
Try to obtain libraries from
.Ar lib-dir .
a242 1
.Pp
@


1.13
log
@section reorder;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.12 2003/05/21 11:39:59 jmc Exp $
d270 1
a270 1
have an unresolveable conflict and thus cannot be crunched together.
@


1.12
log
@- finish mdoc'ing crunch pages
- better use of macros

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.11 2003/05/08 09:17:56 jmc Exp $
d256 6
a277 6
.Sh AUTHORS
.Nm
was written by James da Silva
.Aq jds@@cs.umd.edu .
.Pp
Copyright (c) 1994 University of Maryland.  All Rights Reserved.
@


1.11
log
@AUTHOR -> AUTHORS in .Sh, as per mdoc template.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.10 2003/05/08 08:53:23 jmc Exp $
d32 1
a32 1
.Nm \&crunchgen
d35 1
a35 1
.Nm \&crunchgen
a43 1

d45 5
a49 6
together into a single executable.  The crunched binary main()
function determines which component program to run by the contents of
argv[0].  The main reason to crunch programs together is for fitting
as many programs as possible onto an installation or system recovery
floppy.

d51 1
a51 1
.Nm Crunchgen
d56 3
a58 2
file from the component programs.  For each component program,
.Nm crunchgen
d60 3
a62 3
the program from its source directory Makefile.  This information is
cached between runs.
.Nm Crunchgen
d64 1
a64 1
.Nm crunchide
a66 1

d69 11
a79 9
.Nm crunchgen
is run, the crunched binary can be built by running ``make -f
<conf-name>.mk''.  The component programs' object files must already
be built.  A ``objs'' target, included in the output makefile, will
run make in each component program's source dir to build the object
files for the user.  This is not done automatically since in release
engineering circumstances it is generally not desirable to be
modifying objects in other directories.

d86 2
a87 1
The default name is ``<conf-name>.c''.
d91 2
a92 1
The default name is ``<conf-name>''.
d94 2
a95 1
Flush cache.  Forces the recalculation of cached parameters.
d99 2
a100 1
The default name is ``<conf-name>.mk''.
d102 2
a103 1
Quiet operation.  Status messages are suppressed.
d105 3
a107 2
Don't prepend stub names with an underscore. Used for architectures that
don't have underscore prepended to symbol names. Example mips ELF.
d116 1
a116 2

.Nm Crunchgen
d119 5
a123 4
that describe the components of the crunched binary.  In its simplest
use, the component program names are merely listed along with the
top-level source directories in which their sources can be found.
.Nm Crunchgen
d125 4
a128 3
list of object files and their locations.  For more specialized
situations, the user can specify by hand all the parameters that
.Nm crunchgen
d135 1
a135 1
.It Nm srcdirs Ar dirname ...
d137 10
a146 10
component programs can be found.  These dirs are searched using the
BSD ``<source-dir>/<progname>/'' convention.  Multiple
.Nm srcdirs
lines can be specified.  The directories are searched in the order
they are given.
.It Nm progs Ar progname ...
A list of programs that make up the crunched binary.  Multiple
.Nm progs
lines can be specified.
.It Nm libs Ar libspec ...
d148 2
a149 4
Multiple
.Nm libs
lines can be specified.
.It Nm ln Ar progname linkname
d154 2
a155 1
appears in argv[0].  This allows programs that change their behavior when
d158 1
a158 1

d161 1
a161 1
.Nm special
d163 1
a163 1
.Nm crunchgen
d166 1
a166 1
.It Nm special Ar progname Nm srcdir Ar pathname
d169 1
a169 2
This is normally calculated by searching the specified
.Nm srcdirs
d172 1
a172 1
.It Nm special Ar progname Nm objdir Ar pathname
d176 1
a176 1
.Dq Pa obj
d181 2
a182 3
itself becomes the
.Ar objdir .
.It Nm special Ar progname Nm objs Ar object-file-name ...
d186 1
a186 1
.Dq Nm srcdir / Pa Makefile
d188 1
a188 1
.It Nm special Ar progname Nm objpaths Ar full-pathname-to-object-file ...
d191 2
a192 5
This is normally calculated by prepending the
.Nm objdir
pathname to each file in the
.Nm objs
list.
a193 1

d195 1
a195 3
Only the
.Nm objpaths
parameter is actually needed by
d197 4
a200 8
but it is calculated from
.Nm objdir
and
.Nm objs ,
which are in turn calculated from
.Nm srcdir ,
so is sometimes convenient to specify the earlier parameters and let
.Nm crunchgen
a201 1

d204 1
a204 1
.Nm crunchgen
d208 3
a210 6
running make inside that program's source directory.  For this to work the
.Nm srcdir
and
.Nm objs
parameters must also be valid.  If they are not valid for a particular program, that
program is skipped in the
d215 1
a215 1
.Nm crunchgen
d217 7
a223 8
.Dq Pa kcopy.conf :
.Pp
.nf
	srcdirs /usr/src/bin /usr/src/sbin

	progs test cp echo sh fsck halt init mount umount myinstall
	ln test [       # test can be invoked via [
	ln sh -sh       # init invokes the shell with "-sh" in argv[0]
d225 1
a225 1
	special myprog objpaths /homes/leroy/src/myinstall.o # no sources
d227 2
a228 2
	libs -lutil -lcrypt
.fi
d231 2
a232 1
basic system utilities plus a home-grown install program ``myinstall'',
d235 1
a235 1
.Nm special
d238 15
a252 11
The crunched binary ``kcopy'' can be built as follows:
.Pp
.nf
	% crunchgen -m Makefile kcopy.conf    # gen Makefile and kcopy.c
	% make objs		# build the component programs' .o files
	% make			# build the crunched binary kcopy
	% kcopy sh		# test that this invokes a sh shell
	$			# it works!
.fi
.Pp
At this point the binary ``kcopy'' can be copied onto an install floppy
d258 1
a258 1
.Nm crunch
d261 3
a263 2
libraries that are linked in.  Some shuffling in the order of
libraries may be required, and in some rare cases two libraries may
d267 5
a271 3
intermediate object file for single-source file programs.  The ``make
objs'' target must then be used to get those object files built, or
some other arrangements made.
d273 4
a276 3
.Nm Crunch
was written by James da Silva <jds@@cs.umd.edu>.
.sp 0
@


1.10
log
@EXAMPLE -> EXAMPLES in .Sh section, as per mdoc template.
crunch stuff still needs a bit of work.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.9 2003/03/31 07:52:56 jmc Exp $
d275 1
a275 1
.Sh AUTHOR
@


1.9
log
@error(1): users's -> user's
crunchgen(1): progam -> program
	      homegrown -> home-grown

from NetBSD (Igor Sobrado) via tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.8 2000/06/13 20:55:01 angelos Exp $
d223 1
a223 1
.Sh EXAMPLE
@


1.8
log
@Fix typo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crunchgen.1,v 1.7 2000/03/01 22:10:03 todd Exp $
d242 1
a242 1
basic system utilities plus a homegrown install program ``myinstall'',
d252 1
a252 1
	% make objs		# build the component progams' .o files
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d104 1
a104 1
.Ar srt-root .
@


1.6
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 2
@


1.5
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d56 1
a56 1
file from the component programs.  For each component program, 
d110 1
a110 1
reads specifications from the 
d118 1
a118 1
situations, the user can specify by hand all the parameters that 
d129 1
a129 1
BSD ``<source-dir>/<progname>/'' convention.  Multiple 
d148 1
a148 1
run under different names to operate correctly. 
d154 1
a154 1
commands can be used to set 
d172 1
a172 1
and if that is not found, the 
d180 1
a180 1
.Dq Nm srcdir / Pa Makefile 
d193 1
a193 1
Only the 
d203 1
a203 1
so is sometimes convenient to specify the earlier parameters and let 
d218 1
a218 1
program is skipped in the 
@


1.4
log
@minor errors; josh@@quick.net
@
text
@d28 1
a28 1
.Os BSD 4
@


1.3
log
@Explain the "-E" switch.
CVS ----------------------------------------------------------------------
@
text
@d75 1
a75 1
engineering circumstances it is generally not desireable to be
@


1.2
log
@tabify
@
text
@d34 1
a34 1
.Op Fl fq
d97 3
@


1.1
log
@Initial revision
@
text
@d247 3
a249 3
	% make objs             # build the component progams' .o files
	% make                  # build the crunched binary kcopy
	% kcopy sh              # test that this invokes a sh shell
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
