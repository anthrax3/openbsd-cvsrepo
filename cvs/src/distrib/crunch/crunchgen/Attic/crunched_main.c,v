head	1.6;
access;
symbols
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2008.08.22.15.18.55;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.01.27.19.41.30;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.09.05.53.53;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.28.00.03.23;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.01.22.10.03;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.31;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge crunchgen & crunchhide (using name checking), and move to usr.sbin
next step is to not install it as two programs, but be even more clever
@
text
@/* $OpenBSD: crunched_main.c,v 1.5 2003/01/27 19:41:30 deraadt Exp $	 */

/*
 * Copyright (c) 1994 University of Maryland
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of U.M. not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  U.M. makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * U.M. DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL U.M.
 * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Author: James da Silva, Systems Design and Analysis Group
 *			   Computer Science Department
 *			   University of Maryland at College Park
 */
/*
 * crunched_main.c - main program for crunched binaries, it branches to a
 * 	particular subprogram based on the value of argv[0].  Also included
 *	is a little program invoked when the crunched binary is called via
 *	its EXECNAME.  This one prints out the list of compiled-in binaries,
 *	or calls one of them based on argv[1].   This allows the testing of
 *	the crunched binary without creating all the links.
 */
#include <stdio.h>
#include <string.h>

struct stub {
	char	*name;
	int	(*f)();
};

extern struct stub entry_points[];

int 
main(int argc, char *argv[], char **envp)
{
	char		*slash, *basename;
	struct stub	*ep;

	if (argv[0] == NULL || *argv[0] == '\0')
		crunched_usage();

	slash = strrchr(argv[0], '/');
	basename = slash ? slash + 1 : argv[0];

	for (ep = entry_points; ep->name != NULL; ep++)
		if (!strcmp(basename, ep->name))
			break;

	if (ep->name)
		return ep->f(argc, argv, envp);
	else {
		fprintf(stderr, "%s: %s not compiled in\n", EXECNAME, basename);
		crunched_usage();
	}
}

int 
crunched_main(int argc, char **argv, char **envp)
{
	struct stub	*ep;
	int		columns, len;

	if (argc <= 1)
		crunched_usage();

	return main(--argc, ++argv, envp);
}

int 
crunched_usage()
{
	int		columns, len;
	struct stub	*ep;

	fprintf(stderr,
	    "Usage: %s <prog> <args> ..., where <prog> is one of:\n",
	    EXECNAME);
	columns = 0;
	for (ep = entry_points; ep->name != NULL; ep++) {
		len = strlen(ep->name) + 1;
		if (columns + len < 80)
			columns += len;
		else {
			fprintf(stderr, "\n");
			columns = len;
		}
		fprintf(stderr, " %s", ep->name);
	}
	fprintf(stderr, "\n");
	exit(1);
}
@


1.5
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: crunched_main.c,v 1.4 2002/06/09 05:53:53 todd Exp $	 */
@


1.4
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: crunched_main.c,v 1.3 2001/12/28 00:03:23 angelos Exp $	*/
d40 2
a41 2
    char *name;
    int (*f)();
d46 2
a47 1
int main(int argc, char **argv, char **envp)
d49 2
a50 2
    char *slash, *basename;
    struct stub *ep;
d52 2
a53 2
    if(argv[0] == NULL || *argv[0] == '\0')
	crunched_usage();
d55 2
a56 2
    slash = strrchr(argv[0], '/');
    basename = slash? slash+1 : argv[0];
d58 10
a67 9
    for(ep=entry_points; ep->name != NULL; ep++)
	if(!strcmp(basename, ep->name)) break;

    if(ep->name)
	return ep->f(argc, argv, envp);
    else {
	fprintf(stderr, "%s: %s not compiled in\n", EXECNAME, basename);
	crunched_usage();
    }
d70 2
a71 2

int crunched_main(int argc, char **argv, char **envp)
d73 2
a74 2
    struct stub *ep;
    int columns, len;
d76 2
a77 2
    if(argc <= 1)
	crunched_usage();
d79 1
a79 1
    return main(--argc, ++argv, envp);
d82 2
a83 2

int crunched_usage()
d85 2
a86 2
    int columns, len;
    struct stub *ep;
d88 2
a89 1
    fprintf(stderr, "Usage: %s <prog> <args> ..., where <prog> is one of:\n",
d91 10
a100 8
    columns = 0;
    for(ep=entry_points; ep->name != NULL; ep++) {
	len = strlen(ep->name) + 1;
	if(columns+len < 80)
	    columns += len;
	else {
	    fprintf(stderr, "\n");
	    columns = len;
d102 2
a103 4
	fprintf(stderr, " %s", ep->name);
    }
    fprintf(stderr, "\n");
    exit(1);
a104 3

/* end of crunched_main.c */

@


1.3
log
@Correctly handle envp pointer in main() -- henric@@aimnet.com
@
text
@d1 1
a1 1
/*	$OpenBSD: crunched_main.c,v 1.2 2000/03/01 22:10:03 todd Exp $	*/
d29 1
a29 1
 * crunched_main.c - main program for crunched binaries, it branches to a 
d74 1
a74 1
    if(argc <= 1) 
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
int main(int argc, char **argv)
d61 1
a61 1
	return ep->f(argc, argv);
d69 1
a69 1
int crunched_main(int argc, char **argv)
d77 1
a77 1
    return main(--argc, ++argv);
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
