head	1.22;
access;
symbols
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.22
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.18
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.20
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.14
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.16
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.12
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.10
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.8
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.6
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.4
	OPENBSD_5_0:1.22.0.2
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.21.0.8
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.6
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.20.0.2
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.12.0.6
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.22
date	2011.07.08.21.39.32;	author drahn;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.17.07.23.26;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2008.12.09.18.57.41;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2008.12.02.03.20.38;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.02.01.54.55;	author weerd;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.02.01.03.52;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.02.00.51.40;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.02.00.42.41;	author weerd;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.02.00.40.20;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.09.02.19.21.28;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.02.23.10.05;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.11.20.56.59;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.14.22.47.06;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.14.15.32.44;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.14.08.27.22;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.14.08.24.59;	author grange;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.16.21.23.39;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.04.14.28.22;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.27.20.58.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.14.22.54.34;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.18.15.27.36;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.18.15.24.18;	author jason;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Allow the elf rdsetroot operation to function on 32 bit and 64 bit binaries.
Enables developers to build arm ramdisk kernels on amd64 archs
OK deraadt@@ 'looked fine' miod@@
@
text
@/*	$OpenBSD: elfrdsetroot.c,v 1.21 2009/04/17 07:23:26 deraadt Exp $	*/
/*	$NetBSD: rdsetroot.c,v 1.2 1995/10/13 16:38:39 gwr Exp $	*/

/*
 * Copyright (c) 1994 Gordon W. Ross
 * Copyright (c) 1997 Per Fogelstrom. (ELF modifications)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copy a ramdisk image into the space reserved for it.
 * Kernel variables: rd_root_size, rd_root_image
 */

#include <sys/types.h>
#include <sys/file.h>
#include <sys/mman.h>
#include <sys/stat.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <nlist.h>

#include <sys/exec_elf.h>
#include "elfrdsetroot.h"

struct elfhdr head;

/* Offsets relative to start of data segment. */
long	rd_root_image_off, rd_root_size_off;

/* value in the location at rd_root_size_off */
off_t	rd_root_size_val;

/* pointers to pieces of mapped file */
char	*dataseg;

/* parameters to mmap digged out from program header */
off_t	mmap_off;
size_t	mmap_size;

__dead void usage(void);

int	debug;

struct elf_fn *elf_fn;

int
main(int argc, char *argv[])
{
	int ch, fd, n, xflag = 0, fsd;
	int found = 0, phsize;
	char *fs = NULL;
	char *file;
	u_int32_t *ip;

	while ((ch = getopt(argc, argv, "dx")) != -1) {
		switch (ch) {
		case 'd':
			debug = 1;
			break;
		case 'x':
			xflag = 1;
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (argc == 1)
		file = argv[0];
	else if (argc == 2) {
		file = argv[0];
		fs = argv[1];
	} else
		usage();

	fd = open(file, xflag ? O_RDONLY : O_RDWR, 0644);
	if (fd < 0) {
		perror(file);
		exit(1);
	}

	if (fs) {
		if (xflag)
			fsd = open(fs, O_RDWR | O_CREAT | O_TRUNC, 0644);
		else
			fsd = open(fs, O_RDONLY, 0644);
	} else {
		if (xflag)
			fsd = dup(STDOUT_FILENO);
		else
			fsd = dup(STDIN_FILENO);
	}
	if (fsd < 0) {
		perror(fs);
		exit(1);
	}

	n = read(fd, &head, sizeof(head));
	if (n < sizeof(head)) {
		fprintf(stderr, "%s: reading header\n", file);
		exit(1);
	}

	if (!IS_ELF(head)) {
		fprintf(stderr, "%s: bad magic number\n", file);
		exit(1);
	}

	if (head.e_ident[EI_CLASS] == ELFCLASS32) {
		elf_fn = &ELF32_fn;
	} else if (head.e_ident[EI_CLASS] == ELFCLASS64) {
		elf_fn = &ELF64_fn;
	} else {
		fprintf(stderr, "%s: invalid elf, not 32 or 64 bit", file);
		exit(1);
	}

	elf_fn->locate_image(fd, &head, file, &rd_root_size_off,
	    &rd_root_image_off, &mmap_off, &mmap_size);

	/*
	 * Map in the whole data segment.
	 * The file offset needs to be page aligned.
	 */
	dataseg = mmap(NULL, mmap_size,
	    xflag ? PROT_READ : PROT_READ | PROT_WRITE,
	    MAP_SHARED, fd, mmap_off);
	if (dataseg == MAP_FAILED) {
		fprintf(stderr, "%s: can not map data seg\n", file);
		perror(file);
		exit(1);
	}

	/*
	 * Find value in the location: rd_root_size
	 */
	ip = (u_int32_t *) (dataseg + rd_root_size_off);
	rd_root_size_val = *ip;
	if (debug)
		fprintf(stderr, "rd_root_size  val: 0x%llx (%lld blocks)\n",
		    (unsigned long long)rd_root_size_val,
		    (unsigned long long)rd_root_size_val >> 9);

	/*
	 * Copy the symbol table and string table.
	 */
	if (debug)
		fprintf(stderr, "copying root image...\n");

	if (xflag) {
		n = write(fsd, dataseg + rd_root_image_off,
		    (size_t)rd_root_size_val);
		if (n != rd_root_size_val) {
			perror("write");
			exit(1);
		}
	} else {
		struct stat sstat;

		if (fstat(fsd, &sstat) == -1) {
			perror("fstat");
			exit(1);
		}
		if (S_ISREG(sstat.st_mode) &&
		    sstat.st_size > rd_root_size_val) {
			fprintf(stderr, "ramdisk too small 0x%llx 0x%llx\n",
			    (unsigned long long)sstat.st_size,
			    (unsigned long long)rd_root_size_val);
			exit(1);
		}
		n = read(fsd, dataseg + rd_root_image_off,
		    (size_t)rd_root_size_val);
		if (n < 0) {
			perror("read");
			exit(1);
		}

		msync(dataseg, mmap_size, 0);
	}

	if (debug)
		fprintf(stderr, "...copied %d bytes\n", n);
	exit(0);
}

__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-dx] bsd [fs]\n", __progname);
	exit(1);
}
@


1.21
log
@further steps towards unification
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.20 2008/12/09 18:57:41 deraadt Exp $	*/
a46 5
#ifdef __LP64__
#define ELFSIZE 64
#else
#define ELFSIZE 32
#endif
d48 1
a48 2
Elf_Ehdr head;
Elf_Phdr *ph;
d50 1
a50 4
char	*file;

/* Virtual addresses of the symbols we frob. */
long	rd_root_image_va, rd_root_size_va;
a64 1
int	find_rd_root_image(char *, Elf_Phdr *, int);
d69 2
d77 1
d136 6
a141 5
	phsize = head.e_phnum * sizeof(Elf_Phdr);
	ph = (Elf_Phdr *)malloc(phsize);
	lseek(fd, head.e_phoff, SEEK_SET);
	if (read(fd, (char *)ph, phsize) != phsize) {
		fprintf(stderr, "%s: can't read phdr area\n", file);
d145 2
a146 9
	for (n = 0; n < head.e_phnum && !found; n++) {
		if (ph[n].p_type == PT_LOAD)
			found = find_rd_root_image(file, &ph[n], n);
	}
	if (!found) {
		fprintf(stderr, "%s: can't locate space for rd_root_image!\n",
		    file);
		exit(1);
	}
a210 53
}


/*
 * Find locations of the symbols to patch.
 */
struct nlist wantsyms[] = {
	{ "_rd_root_size", 0 },
	{ "_rd_root_image", 0 },
	{ NULL, 0 }
};

int
find_rd_root_image(char *file, Elf_Phdr *ph, int segment)
{
	unsigned long kernel_start, kernel_size;

	if (nlist(file, wantsyms)) {
		fprintf(stderr, "%s: no rd_root_image symbols?\n", file);
		exit(1);
	}
	kernel_start = ph->p_paddr;
	kernel_size = ph->p_filesz;

	rd_root_size_off = wantsyms[0].n_value - kernel_start;
	rd_root_size_off -= (ph->p_vaddr - ph->p_paddr);
	rd_root_image_off = wantsyms[1].n_value - kernel_start;
	rd_root_image_off -= (ph->p_vaddr - ph->p_paddr);

	if (debug) {
		fprintf(stderr, "segment %d rd_root_size_off = 0x%x\n", segment,
		    rd_root_size_off);
		if ((ph->p_vaddr - ph->p_paddr) != 0)
			fprintf(stderr, "root_off v %x p %x, diff %x altered %x\n",
			    ph->p_vaddr, ph->p_paddr,
			    (ph->p_vaddr - ph->p_paddr),
			    rd_root_size_off - (ph->p_vaddr - ph->p_paddr));
		fprintf(stderr, "rd_root_image_off = 0x%x\n", rd_root_image_off);
	}

	/*
	 * Sanity check locations of db_* symbols
	 */
	if (rd_root_image_off < 0 || rd_root_image_off >= kernel_size)
		return (0);
	if (rd_root_size_off < 0 || rd_root_size_off >= kernel_size) {
		fprintf(stderr, "%s: rd_root_size not in data segment?\n",
		    file);
		return (0);
	}
	mmap_off = ph->p_offset;
	mmap_size = kernel_size;
	return (1);
@


1.20
log
@unify these two versions further (one day we should merge them into
one, and then merge them in crunchgen as a special option)
tested on a lot of machines
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.19 2008/12/02 03:20:38 deraadt Exp $	*/
d6 1
a8 2
 * ELF modifications Copyright (c) 1997 Per Fogelstrom.
 *
d268 1
a268 1
		return(0);
d272 1
a272 1
		return(0);
d276 1
a276 1
	return(1);
@


1.19
log
@permit passing in the filesystem (a file) as an argument
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.18 2008/12/02 01:54:55 weerd Exp $	*/
a52 1

d54 2
d57 1
a57 1
char *file;
d72 1
a72 1
off_t	mmap_offs;
d75 1
a75 1
int	find_rd_root_image(char *, Elf_Ehdr *, Elf_Phdr *, int);
d83 2
a84 1
	int ch, fd, n, xflag = 0, found = 0, phsize, fsd;
a86 2
	Elf_Ehdr eh;
	Elf_Phdr *ph;
d88 1
a88 1
	while ((ch = getopt(argc, argv, "xd")) != -1) {
d133 2
a134 2
	n = read(fd, &eh, sizeof(eh));
	if (n < sizeof(eh)) {
d139 2
a140 2
	if (!IS_ELF(eh)) {
		fprintf(stderr, "%s: not elf\n", file);
d144 1
a144 1
	phsize = eh.e_phnum * sizeof(Elf_Phdr);
d146 1
a146 1
	lseek(fd, eh.e_phoff, SEEK_SET);
d152 1
a152 1
	for (n = 0; n < eh.e_phnum && !found; n++) {
d154 1
a154 1
			found = find_rd_root_image(file, &eh, &ph[n], n);
d168 1
a168 1
	    MAP_SHARED, fd, mmap_offs);
d178 1
a178 1
	ip = (u_int32_t*) (dataseg + rd_root_size_off);
d181 3
a183 3
		fprintf(stderr, "rd_root_size  val: 0x%08X (%d blocks)\n",
		    (u_int32_t)rd_root_size_val,
		    (u_int32_t)(rd_root_size_val >> 9));
d190 1
d193 1
a193 1
		    rd_root_size_val);
d207 3
a209 2
			fprintf(stderr, "ramdisk too small 0x%x 0x%x\n",
			    (long)sstat.st_size, rd_root_size_val);
d213 1
a213 1
		    rd_root_size_val);
d238 1
a238 1
find_rd_root_image(char *file, Elf_Ehdr *eh, Elf_Phdr *ph, int segment)
d249 4
a252 4
	rd_root_size_off	= wantsyms[0].n_value - kernel_start;
	rd_root_size_off	-= (ph->p_vaddr - ph->p_paddr);
	rd_root_image_off	= wantsyms[1].n_value - kernel_start;
	rd_root_image_off	-= (ph->p_vaddr - ph->p_paddr);
d275 1
a275 1
	mmap_offs = ph->p_offset;
@


1.18
log
@Allow the kernelfile to be read-only when doing extraction.

'Sure' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.17 2008/12/02 01:03:52 deraadt Exp $	*/
d82 2
a83 1
	int ch, fd, n, xflag = 0, found = 0, phsize;
d103 6
a108 1
	if (argc != 1)
a109 1
	file = argv[0];
d117 16
d191 1
a191 1
		n = write(STDOUT_FILENO, dataseg + rd_root_image_off,
d200 1
a200 1
		if (fstat(STDIN_FILENO, &sstat) == -1) {
d210 1
a210 1
		n = read(STDIN_FILENO, dataseg + rd_root_image_off,
d283 1
a283 1
	fprintf(stderr, "usage: %s [-dx] file_name\n", __progname);
@


1.17
log
@convert -DDEBUG to a -d option
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.15 2008/12/02 00:42:41 weerd Exp $	*/
d106 1
a106 1
	fd = open(file, O_RDWR, 0644);
d145 2
a146 1
	dataseg = mmap(NULL, mmap_size, PROT_READ | PROT_WRITE,
@


1.16
log
@no need to close() before exit()
@
text
@d77 2
d87 1
a87 1
	while ((ch = getopt(argc, argv, "x")) != -1) {
d89 3
d158 4
a161 5
#ifdef	DEBUG
	fprintf(stderr, "rd_root_size  val: 0x%08X (%d blocks)\n",
	    (u_int32_t)rd_root_size_val,
	    (u_int32_t)(rd_root_size_val >> 9));
#endif
d166 2
a167 3
#ifdef	DEBUG
	fprintf(stderr, "copying root image...\n");
#endif
d198 2
a199 3
#ifdef	DEBUG
	fprintf(stderr, "...copied %d bytes\n", n);
#endif
d230 10
a239 10
#ifdef DEBUG
	fprintf(stderr, "segment %d rd_root_size_off = 0x%x\n", segment,
	    rd_root_size_off);
	if ((ph->p_vaddr - ph->p_paddr) != 0)
		fprintf(stderr, "root_off v %x p %x, diff %x altered %x\n",
		    ph->p_vaddr, ph->p_paddr,
		    (ph->p_vaddr - ph->p_paddr),
		    rd_root_size_off - (ph->p_vaddr - ph->p_paddr));
	fprintf(stderr, "rd_root_image_off = 0x%x\n", rd_root_image_off);
#endif
d261 1
a261 1
	fprintf(stderr, "usage: %s [-x] file_name\n", __progname);
@


1.15
log
@Do not write warnings, errors or debug messages to stdout; it breaks
filesystem extraction (-x) with debug binaries. Found with Nick Bender
at OpenCON.

'Go for it' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.14 2008/12/02 00:40:20 deraadt Exp $	*/
a197 1
	close(fd);
@


1.14
log
@eliminate gratuitous differences
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.13 2008/09/02 19:21:28 drahn Exp $	*/
d109 1
a109 1
		printf("%s: reading header\n", file);
d114 1
a114 1
		printf("%s: not elf\n", file);
d122 1
a122 1
		printf("%s: can't read phdr area\n", file);
d131 2
a132 1
		printf("%s: can't locate space for rd_root_image!\n", file);
d143 1
a143 1
		printf("%s: can not map data seg\n", file);
d154 1
a154 1
	printf("rd_root_size  val: 0x%08X (%d blocks)\n",
d163 1
a163 1
	printf("copying root image...\n");
d196 1
a196 1
	printf("...copied %d bytes\n", n);
d218 1
a218 1
		printf("%s: no rd_root_image symbols?\n", file);
d230 2
a231 1
	printf("segment %d rd_root_size_off = 0x%x\n", segment, rd_root_size_off);
d233 1
a233 1
		printf("root_off v %x p %x, diff %x altered %x\n",
d237 1
a237 1
	printf("rd_root_image_off = 0x%x\n", rd_root_image_off);
d246 2
a247 1
		printf("%s: rd_root_size not in data segment?\n", file);
@


1.13
log
@If the image size is known to be too big, print out the sizes.
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.12 2007/08/02 23:10:05 ray Exp $	*/
d68 1
a68 1
char *dataseg;
d78 1
a78 1
main(int argc, char **argv)
@


1.12
log
@In case the image size is too large, warn and exit instead of
truncating.

Initial diff from Rainer Giedat <rainer at staatssicherheit dot
com>.

OK millert and deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.11 2006/10/11 20:56:59 deraadt Exp $	*/
d180 2
a181 1
			fprintf(stderr, "ramdisk too small\n");
@


1.11
log
@use SEEK_SET; chl@@tuxfamily.org
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.10 2005/01/14 22:47:06 deraadt Exp $	*/
d41 1
d172 11
@


1.10
log
@code cleanup; ok grange
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.9 2005/01/14 15:32:44 drahn Exp $	*/
d119 1
a119 1
	lseek(fd, eh.e_phoff, 0);
@


1.9
log
@Allows for VA!=PA addresses in the kernel. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.8 2005/01/14 08:27:22 deraadt Exp $	*/
a54 2
extern off_t lseek();

d58 1
a58 1
long rd_root_image_va, rd_root_size_va;
d61 1
a61 1
long rd_root_image_off, rd_root_size_off;
d64 1
a64 1
off_t rd_root_size_val;
d70 2
a71 2
off_t mmap_offs;
size_t mmap_size;
d73 1
a73 1
int find_rd_root_image(char *, Elf_Ehdr *, Elf_Phdr *);
d77 1
a77 2
main(argc,argv)
	char **argv;
d79 1
a79 2
	int ch, fd, n, xflag;
	int found;
a82 1
	int phsize;
a83 1
	xflag = 0;
d119 1
a119 1
	lseek(fd,  eh.e_phoff, 0);
d124 4
a127 5
	found = 0;
	for(n = 0; n < eh.e_phnum && !found; n++) {
		if(ph[n].p_type == PT_LOAD) {
			found = find_rd_root_image(file, &eh, &ph[n]);
		}
d138 2
a139 5
	dataseg = mmap(NULL,	/* any address is ok */
				   mmap_size, /* length */
				   PROT_READ | PROT_WRITE,
				   MAP_SHARED,
				   fd, mmap_offs);
d153 2
a154 2
		(u_int32_t)rd_root_size_val,
		(u_int32_t)(rd_root_size_val >> 9));
d195 1
a195 1
	{ NULL, 0 },
d199 1
a199 4
find_rd_root_image(file, eh, ph)
	char *file;
	Elf_Ehdr *eh;
	Elf_Phdr *ph;
d201 1
a201 2
	unsigned long kernel_start;
	unsigned long kernel_size;
d216 1
a216 1
	printf("rd_root_size_off = 0x%x\n", rd_root_size_off);
d219 3
a221 4
			ph->p_vaddr, ph->p_paddr,
			(ph->p_vaddr - ph->p_paddr),
			rd_root_size_off - (ph->p_vaddr - ph->p_paddr));
		
d228 1
a228 1
	if (rd_root_image_off < 0 || rd_root_image_off >= kernel_size) {
a229 1
	}
d235 1
a235 1
	mmap_size =  kernel_size;
@


1.8
log
@missing newline
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.7 2005/01/14 08:24:59 grange Exp $	*/
d224 4
a227 2
	rd_root_size_off = wantsyms[0].n_value - kernel_start;
	rd_root_image_off     = wantsyms[1].n_value - kernel_start;
d231 6
@


1.7
log
@Use __LP64__ instead of listing all 64bit arches.

ok deraadt@@ pvalchev@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.6 2004/09/16 21:23:39 pefo Exp $	*/
d137 1
a137 1
		printf("%s: can't locate space for rd_root_image!", file);
@


1.6
log
@mips64 is ELFSIZE 64. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.5 2004/02/04 14:28:22 mickey Exp $	*/
d47 1
a47 2
#if defined(__alpha__) || defined(__sparc64__) || defined(__mips64) || \
    defined(__x86_64__)					/* XXXXXX */
@


1.5
log
@hand craft elf size for amd64
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.4 2003/10/27 20:58:46 millert Exp $	*/
d47 1
a47 1
#if defined(__alpha__) || defined(__sparc64__) || \
@


1.4
log
@Add -x flag to extract the ramdisk filesystem from bsd.rd; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.3 2002/09/14 22:54:34 drahn Exp $	*/
d47 2
a48 1
#if defined(__alpha__) || defined(__sparc64__)	/* XXXXXX */
@


1.3
log
@Properly print out rd_root_size when running elfrdsetroot. ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.2 2001/09/18 15:27:36 jason Exp $	*/
d76 1
d82 1
a82 1
	int fd, n;
d89 9
a97 3
	if (argc < 2) {
		printf("%s: missing file name\n", argv[0]);
		exit(1);
d99 6
a104 1
	file = argv[1];
d106 1
a106 1
	fd = open(file, O_RDWR);
d173 16
a188 5
	n = read(0, dataseg + rd_root_image_off,
			 rd_root_size_val);
	if (n < 0) {
		perror("read");
		exit(1);
a190 2
	msync(dataseg, mmap_size, 0);

d245 9
@


1.2
log
@sparc64 is 64 bit too
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.1 2001/09/18 15:24:18 jason Exp $	*/
d83 1
a83 1
	int *ip;
d147 1
a147 1
	ip = (int*) (dataseg + rd_root_size_off);
d151 2
a152 1
		rd_root_size_val, (rd_root_size_val >> 9));
@


1.1
log
@copy the alpha/elfrdsetroot to common (for more general use: macppc, sparc64, etc)
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.1 2001/01/22 15:10:31 art Exp $	*/
d47 1
a47 1
#ifdef __alpha__	/* XXXXXXX */
@

