head	1.21;
access;
symbols
	OPENBSD_5_4:1.20.0.18
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.16
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.14
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.12
	OPENBSD_5_0:1.20.0.10
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.8
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.6
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.10
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.4.0.14
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.12
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.10
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.21
date	2013.10.18.14.04.24;	author deraadt;	state dead;
branches;
next	1.20;

1.20
date	2009.04.17.07.23.27;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2008.12.09.18.57.42;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.02.03.20.38;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.02.01.54.55;	author weerd;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.02.01.03.52;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.02.00.51.40;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.02.00.48.19;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.02.00.42.41;	author weerd;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.02.00.40.20;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.02.00.37.54;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.02.23.10.05;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.14.22.47.06;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.27.20.58.46;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.11.15.21.35;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.11.15.15.00;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.11.14.06.15;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.11.26.02.32.23;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.05.16.20.59.45;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.05.16.19.17.51;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.04.20.23.38.17;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.21
log
@bye bye rdsetroot; ok miod
@
text
@/*	$OpenBSD: rdsetroot.c,v 1.20 2009/04/17 07:23:27 deraadt Exp $	*/
/*	$NetBSD: rdsetroot.c,v 1.2 1995/10/13 16:38:39 gwr Exp $	*/

/*
 * Copyright (c) 1994 Gordon W. Ross
 * Copyright (c) 1997 Per Fogelstrom. (ELF modifications)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copy a ramdisk image into the space reserved for it.
 * Kernel variables: rd_root_size, rd_root_image
 */

#include <sys/types.h>
#include <sys/file.h>
#include <sys/mman.h>
#include <sys/stat.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <nlist.h>

#include <a.out.h>
struct	exec head;

char	*file;

/* Virtual addresses of the symbols we frob. */
long	rd_root_image_va, rd_root_size_va;

/* Offsets relative to start of data segment. */
long	rd_root_image_off, rd_root_size_off;

/* value in the location at rd_root_size_off */
off_t	rd_root_size_val;

/* pointers to pieces of mapped file */
char	*dataseg;

/* and lengths */
int	data_len;
off_t	mmap_off;
int	data_pgoff;

int	find_rd_root_image(char *);
__dead void usage(void);

int	debug;

int
main(int argc, char *argv[])
{
	int ch, fd, n, xflag = 0, fsd;
	char *fs = NULL;
	u_int32_t *ip;

	while ((ch = getopt(argc, argv, "dx")) != -1) {
		switch (ch) {
		case 'd':
			debug = 1;
			break;
		case 'x':
			xflag = 1;
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (argc == 1)
		file = argv[0];
	else if (argc == 2) {
		file = argv[0];
		fs = argv[1];
	} else
		usage();

	fd = open(file, xflag ? O_RDONLY : O_RDWR, 0644);
	if (fd < 0) {
		perror(file);
		exit(1);
	}

	if (fs) {
		if (xflag)
			fsd = open(fs, O_RDWR | O_CREAT | O_TRUNC, 0644);
		else
			fsd = open(fs, O_RDONLY, 0644);
	} else {
		if (xflag)
			fsd = dup(STDOUT_FILENO);
		else
			fsd = dup(STDIN_FILENO);
	}
	if (fsd < 0) {
		perror(fs);
		exit(1);
	}

	n = read(fd, &head, sizeof(head));
	if (n < sizeof(head)) {
		fprintf(stderr, "%s: reading header\n", file);
		exit(1);
	}

	if (N_BADMAG(head)) {
		fprintf(stderr, "%s: bad magic number\n", file);
		exit(1);
	}

	if (debug) {
		fprintf(stderr, " text:  %9d\n", head.a_text);
		fprintf(stderr, " data:  %9d\n", head.a_data);
		fprintf(stderr, "  bss:  %9d\n", head.a_bss);
		fprintf(stderr, " syms:  %9d\n", head.a_syms);
		fprintf(stderr, "entry: 0x%08X\n", head.a_entry);
		fprintf(stderr, "trsiz:  %9d\n", head.a_trsize);
		fprintf(stderr, "drsiz:  %9d\n", head.a_drsize);
	}

	if (head.a_syms <= 0) {
		fprintf(stderr, "%s: no symbols\n", file);
		exit(1);
	}
	if (head.a_trsize || head.a_drsize) {
		fprintf(stderr, "%s: has relocations\n", file);
		exit(1);
	}

	find_rd_root_image(file);

	/*
	 * Map in the whole data segment.
	 * The file offset needs to be page aligned.
	 */
	mmap_off = N_DATOFF(head);

#ifdef BROKEN_NMAGIC
	/*
	 * XXX it seems that our ld has a bug when generating NMAGIC files.
	 * the data segment ends up one page too far into the file.
	 */
	if (N_GETMAGIC(head) == NMAGIC)
		mmap_off += __LDPGSZ;
#endif

	data_len = head.a_data;
	/* align... */
	data_pgoff = N_PAGSIZ(head) - 1;
	data_pgoff &= mmap_off;
	mmap_off -= data_pgoff;
	data_len += data_pgoff;
	/* map in in... */
	dataseg = mmap(NULL, data_len,
	    xflag ? PROT_READ : PROT_READ | PROT_WRITE,
	    MAP_SHARED, fd, mmap_off);
	if (dataseg == MAP_FAILED) {
		fprintf(stderr, "%s: can not map data seg\n", file);
		perror(file);
		exit(1);
	}
	dataseg += data_pgoff;

	/*
	 * Find value in the location: rd_root_size
	 */
	ip = (u_int32_t *) (dataseg + rd_root_size_off);
	rd_root_size_val = *ip;
	if (debug)
		fprintf(stderr, "rd_root_size  val: 0x%llx (%lld blocks)\n",
		    (unsigned long long)rd_root_size_val,
		    (unsigned long long)rd_root_size_val >> 9);

	/*
	 * Copy the symbol table and string table.
	 */
	if (debug)
		fprintf(stderr, "copying root image...\n");

	if (xflag) {
		n = write(fsd, dataseg + rd_root_image_off,
		    (size_t)rd_root_size_val);
		if (n != rd_root_size_val) {
			perror("write");
			exit(1);
		}
	} else {
		struct stat sstat;

		if (fstat(fsd, &sstat) == -1) {
			perror("fstat");
			exit(1);
		}
		if (S_ISREG(sstat.st_mode) &&
		    sstat.st_size > rd_root_size_val) {
			fprintf(stderr, "ramdisk too small 0x%llx 0x%llx\n",
			    (unsigned long long)sstat.st_size,
			    (unsigned long long)rd_root_size_val);
			exit(1);
		}
		n = read(fsd, dataseg + rd_root_image_off,
		    (size_t)rd_root_size_val);
		if (n < 0) {
			perror("read");
			exit(1);
		}

		msync(dataseg - data_pgoff, data_len, 0);
	}

	if (debug)
		fprintf(stderr, "...copied %d bytes\n", n);
	exit(0);
}


/*
 * Find locations of the symbols to patch.
 */
struct nlist wantsyms[] = {
	{ "_rd_root_size", 0 },
	{ "_rd_root_image", 0 },
	{ NULL, 0 }
};

int
find_rd_root_image(char *file)
{
	int data_va, std_entry;

	if (nlist(file, wantsyms)) {
		fprintf(stderr, "%s: no rd_root_image symbols?\n", file);
		exit(1);
	}
	std_entry = N_TXTADDR(head) + (head.a_entry & (N_PAGSIZ(head)-1));
	data_va = N_DATADDR(head);
	if (head.a_entry != std_entry) {
		fprintf(stderr,
		    "%s: warning: non-standard entry point: 0x%08x\n", file,
		    head.a_entry);
		fprintf(stderr, "\texpecting entry=0x%x\n", std_entry);
		data_va += (head.a_entry - std_entry);
	}

	rd_root_size_off = wantsyms[0].n_value - data_va;
	rd_root_image_off = wantsyms[1].n_value - data_va;

	if (debug) {
		fprintf(stderr, "data segment  va: 0x%x\n", data_va);
		fprintf(stderr, "rd_root_size   va: 0x%x\n", wantsyms[0].n_value);
		fprintf(stderr, "rd_root_image  va: 0x%x\n", wantsyms[1].n_value);
		fprintf(stderr, "rd_root_size  off: 0x%x\n", rd_root_size_off);
		fprintf(stderr, "rd_root_image off: 0x%x\n", rd_root_image_off);
	}

	/*
	 * Sanity check locations of db_* symbols
	 */
	if (rd_root_image_off < 0 || rd_root_image_off >= head.a_data) {
		fprintf(stderr, "%s: rd_root_image not in data segment?\n", file);
		exit(1);
	}
	if (rd_root_size_off < 0 || rd_root_size_off >= head.a_data) {
		fprintf(stderr, "%s: rd_root_size not in data segment?\n", file);
		exit(1);
	}
	return (1);
}

__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-dx] bsd [fs]\n", __progname);
	exit(1);
}
@


1.20
log
@further steps towards unification
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.19 2008/12/09 18:57:42 deraadt Exp $	*/
@


1.19
log
@unify these two versions further (one day we should merge them into
one, and then merge them in crunchgen as a special option)
tested on a lot of machines
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.18 2008/12/02 03:20:38 deraadt Exp $	*/
d6 1
@


1.18
log
@permit passing in the filesystem (a file) as an argument
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.13 2008/12/02 00:42:41 weerd Exp $	*/
d44 2
d47 1
a48 1
struct	exec head;
d58 1
a58 1
int	rd_root_size_val;
d65 1
a65 1
int	data_off;
d68 1
a68 1
void	find_rd_root_image(char *);
d78 1
a78 1
	int *ip;
d161 1
a161 1
	data_off = N_DATOFF(head);
d169 1
a169 1
		data_off += __LDPGSZ;
d175 2
a176 2
	data_pgoff &= data_off;
	data_off -= data_pgoff;
d181 1
a181 1
	    MAP_SHARED, fd, data_off);
d192 1
a192 1
	ip = (int*) (dataseg + rd_root_size_off);
d195 3
a197 2
		fprintf(stderr, "rd_root_size  val: 0x%08X (%d blocks)\n",
		    rd_root_size_val, (rd_root_size_val >> 9));
d207 1
a207 1
		    rd_root_size_val);
d221 3
a223 1
			fprintf(stderr, "ramdisk too small\n");
d227 1
a227 1
		    rd_root_size_val);
d237 1
a237 1
		fprintf(stderr, "copied %d bytes\n", n);
d251 1
a251 1
void
d266 1
a266 1
		fprintf(stderr, "\texpecting entry=0x%X\n", std_entry);
d274 5
a278 5
		fprintf(stderr, "data segment  va: 0x%08X\n", data_va);
		fprintf(stderr, "rd_root_size   va: 0x%08X\n", wantsyms[0].n_value);
		fprintf(stderr, "rd_root_image  va: 0x%08X\n", wantsyms[1].n_value);
		fprintf(stderr, "rd_root_size  off: 0x%08X\n", rd_root_size_off);
		fprintf(stderr, "rd_root_image off: 0x%08X\n", rd_root_image_off);
d292 1
@


1.17
log
@Allow the kernelfile to be read-only when doing extraction.

'Sure' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.16 2008/12/02 01:03:52 deraadt Exp $	*/
d74 2
a75 1
	int ch, fd, n, xflag = 0;
d93 6
a98 1
	if (argc != 1)
a99 1
	file = argv[0];
d107 16
d203 1
a203 1
		n = write(STDOUT_FILENO, dataseg + rd_root_image_off,
d212 1
a212 1
		if (fstat(STDIN_FILENO, &sstat) == -1) {
d221 1
a221 1
		n = read(STDIN_FILENO, dataseg + rd_root_image_off,
d294 1
a294 1
	fprintf(stderr, "usage: %s [-dx] file_name\n", __progname);
@


1.16
log
@convert -DDEBUG to a -d option
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.13 2008/12/02 00:42:41 weerd Exp $	*/
d96 1
a96 1
	fd = open(file, O_RDWR, 0644);
d156 2
a157 1
	dataseg = mmap(NULL, data_len, PROT_READ | PROT_WRITE,
@


1.15
log
@no need to close() before exit()
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.14 2008/12/02 00:48:19 deraadt Exp $	*/
d69 2
d77 1
a77 1
	while ((ch = getopt(argc, argv, "x")) != -1) {
d79 3
d113 9
a121 9
#ifdef	DEBUG
	fprintf(stderr, " text:  %9d\n", head.a_text);
	fprintf(stderr, " data:  %9d\n", head.a_data);
	fprintf(stderr, "  bss:  %9d\n", head.a_bss);
	fprintf(stderr, " syms:  %9d\n", head.a_syms);
	fprintf(stderr, "entry: 0x%08X\n", head.a_entry);
	fprintf(stderr, "trsiz:  %9d\n", head.a_trsize);
	fprintf(stderr, "drsiz:  %9d\n", head.a_drsize);
#endif
d170 3
a172 4
#ifdef	DEBUG
	fprintf(stderr, "rd_root_size  val: 0x%08X (%d blocks)\n",
	    rd_root_size_val, (rd_root_size_val >> 9));
#endif
d177 3
a179 3
#ifdef	DEBUG
	fprintf(stderr, "copying root image...\n");
#endif
d209 2
a210 3
#ifdef	DEBUG
	fprintf(stderr, "copied %d bytes\n", n);
#endif
d245 8
a252 7
#ifdef	DEBUG
	fprintf(stderr, "data segment  va: 0x%08X\n", data_va);
	fprintf(stderr, "rd_root_size   va: 0x%08X\n", wantsyms[0].n_value);
	fprintf(stderr, "rd_root_image  va: 0x%08X\n", wantsyms[1].n_value);
	fprintf(stderr, "rd_root_size  off: 0x%08X\n", rd_root_size_off);
	fprintf(stderr, "rd_root_image off: 0x%08X\n", rd_root_image_off);
#endif
d272 1
a272 1
	fprintf(stderr, "usage: %s [-x] file_name\n", __progname);
@


1.14
log
@let it compile, let it compile, let it compile...
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.13 2008/12/02 00:42:41 weerd Exp $	*/
a207 1
	close(fd);
@


1.13
log
@Do not write warnings, errors or debug messages to stdout; it breaks
filesystem extraction (-x) with debug binaries. Found with Nick Bender
at OpenCON.

'Go for it' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.12 2008/12/02 00:40:20 deraadt Exp $	*/
d235 1
a235 1
		    "%s: warning: non-standard entry point: 0x%08x\n", file
d255 1
a255 1
		fprintf("%s: rd_root_image not in data segment?\n", file);
d259 1
a259 1
		fprintf("%s: rd_root_size not in data segment?\n", file);
@


1.12
log
@eliminate gratuitous differences
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.11 2008/12/02 00:37:54 deraadt Exp $	*/
d99 1
a99 1
		printf("%s: reading header\n", file);
d104 1
a104 1
		printf("%s: bad magic number\n", file);
d109 7
a115 7
	printf(" text:  %9d\n", head.a_text);
	printf(" data:  %9d\n", head.a_data);
	printf("  bss:  %9d\n", head.a_bss);
	printf(" syms:  %9d\n", head.a_syms);
	printf("entry: 0x%08X\n", head.a_entry);
	printf("trsiz:  %9d\n", head.a_trsize);
	printf("drsiz:  %9d\n", head.a_drsize);
d119 1
a119 1
		printf("%s: no symbols\n", file);
d123 1
a123 1
		printf("%s: has relocations\n", file);
d154 1
a154 1
		printf("%s: can not map data seg\n", file);
d166 1
a166 1
	printf("rd_root_size  val: 0x%08X (%d blocks)\n",
d174 1
a174 1
	printf("copying root image...\n");
d206 1
a206 1
	printf("...copied %d bytes\n", n);
d228 1
a228 1
		printf("%s: no rd_root_image symbols?\n", file);
d234 4
a237 3
		printf("%s: warning: non-standard entry point: 0x%08x\n",
		    file, head.a_entry);
		printf("\texpecting entry=0x%X\n", std_entry);
d244 5
a248 5
	printf(".data segment  va: 0x%08X\n", data_va);
	printf("rd_root_size   va: 0x%08X\n", wantsyms[0].n_value);
	printf("rd_root_image  va: 0x%08X\n", wantsyms[1].n_value);
	printf("rd_root_size  off: 0x%08X\n", rd_root_size_off);
	printf("rd_root_image off: 0x%08X\n", rd_root_image_off);
d255 1
a255 1
		printf("%s: rd_root_image not in data segment?\n", file);
d259 1
a259 1
		printf("%s: rd_root_size not in data segment?\n", file);
@


1.11
log
@no , at end of array
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.10 2007/08/02 23:10:05 ray Exp $	*/
d72 1
a72 1
	int ch, fd, n, xflag;
a74 1
	xflag = 0;
@


1.10
log
@In case the image size is too large, warn and exit instead of
truncating.

Initial diff from Rainer Giedat <rainer at staatssicherheit dot
com>.

OK millert and deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.9 2005/01/14 22:47:06 deraadt Exp $	*/
d220 1
a220 1
	{ NULL, 0 },
@


1.9
log
@code cleanup; ok grange
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.8 2003/10/27 20:58:46 millert Exp $	*/
d39 1
d42 1
d185 11
@


1.8
log
@Add -x flag to extract the ramdisk filesystem from bsd.rd; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.7 2001/05/11 15:21:35 deraadt Exp $	*/
d44 2
a45 4
extern off_t lseek();

struct exec head;
char *file;
d48 1
a48 1
long rd_root_image_va, rd_root_size_va;
d51 1
a51 1
long rd_root_image_off, rd_root_size_off;
d54 1
a54 1
int rd_root_size_val;
d57 1
a57 1
char *dataseg;
d60 3
a62 3
int data_len;
int data_off;
int data_pgoff;
d68 1
a68 2
main(argc,argv)
	char **argv;
d121 1
a121 3
	if (head.a_trsize ||
		head.a_drsize)
	{
d150 2
a151 5
	dataseg = mmap(NULL,	/* any address is ok */
				   data_len, /* length */
				   PROT_READ | PROT_WRITE,
				   MAP_SHARED,
				   fd, data_off);
d166 1
a166 1
		rd_root_size_val, (rd_root_size_val >> 9));
d211 1
a211 2
find_rd_root_image(file)
	char *file;
d213 1
a213 2
	int data_va;
	int std_entry;
d219 1
a219 2
	std_entry = N_TXTADDR(head) +
	    (head.a_entry & (N_PAGSIZ(head)-1));
d223 1
a223 1
			   file, head.a_entry);
d229 1
a229 1
	rd_root_image_off     = wantsyms[1].n_value - data_va;
@


1.7
log
@proto
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.6 2001/05/11 15:15:00 deraadt Exp $	*/
d67 1
d73 1
a73 1
	int fd, n;
a74 1
	char *cp;
d76 16
a91 5
	if (argc < 2) {
		printf("%s: missing file name\n", argv[0]);
		exit(1);
	}
	file = argv[1];
d93 1
a93 1
	fd = open(file, O_RDWR);
d127 1
a127 1
		printf("%s: has relocations\n");
d183 16
a198 5
	n = read(0, dataseg + rd_root_image_off,
			 rd_root_size_val);
	if (n < 0) {
		perror("read");
		exit(1);
a200 2
	msync(dataseg - data_pgoff, data_len, 0);

d260 9
@


1.6
log
@more cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.5 2001/05/11 14:06:15 art Exp $	*/
d65 2
@


1.5
log
@-1 -> MAP_FAILED
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.4 1997/11/26 02:32:23 deraadt Exp $	*/
d41 1
d66 1
d196 1
@


1.4
log
@msync() has 3 args
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.3 1997/05/16 20:59:45 niklas Exp $	*/
d145 1
a145 1
	if ((long)dataseg == -1) {
@


1.3
log
@put an ugly ifdef around the kludge I needed for NMAGIC
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.2 1997/05/16 19:17:51 niklas Exp $	*/
d175 1
a175 5
	msync(dataseg - data_pgoff, data_len
#ifdef	sun
		  ,0
#endif
		  );
@


1.2
log
@Add kludge to move around what seems to be a bug in ld(1) when
creating NMAGIC files.  However in this case it is bad to correct ld as that
will break compatibility with other tools that assume the "incorrect" output
@
text
@d1 1
a1 1
/*	$OpenBSD: rdsetroot.c,v 1.1 1997/02/16 18:19:59 downsj Exp $	*/
d91 1
a91 1
		printf("%s: bad magic number\n");
d124 1
d131 1
@


1.1
log
@Move hp300 rdsetroot.c to top level common directory, the one copy should
be used by all ports.
@
text
@d123 8
@
