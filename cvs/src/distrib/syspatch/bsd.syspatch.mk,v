head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2017.01.17.20.58.56;	author robert;	state Exp;
branches;
next	1.6;
commitid	P2znz2rDEoxJkn2f;

1.6
date	2016.11.09.15.45.28;	author ajacoutot;	state Exp;
branches;
next	1.5;
commitid	SPSBrfV7c5egctjN;

1.5
date	2016.11.09.15.43.22;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	5VGMKiqNoBPXXJHe;

1.4
date	2016.11.03.14.46.48;	author robert;	state Exp;
branches;
next	1.3;
commitid	mcvwG1hfjbUJpZdO;

1.3
date	2016.09.05.11.55.06;	author robert;	state Exp;
branches;
next	1.2;
commitid	xpkJaY3Ac00EbSoX;

1.2
date	2016.09.04.16.40.34;	author robert;	state Exp;
branches;
next	1.1;
commitid	mWxNiGjCGFwSSiG1;

1.1
date	2016.09.03.21.43.25;	author robert;	state Exp;
branches;
next	;
commitid	XdQ4HnIwnHIO19S8;


desc
@@


1.7
log
@rework some of the variables for better directory name handling and
add support for linking against libraries inside the fake root so
that syspatches can include static binaries linked with the fixed libraries
@
text
@#	$OpenBSD: bsd.syspatch.mk,v 1.3 2016/09/05 11:55:06 robert Exp $
#
# Copyright (c) 2016 Robert Nagy <robert@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

.include <bsd.own.mk>

ERRATA?=

# binaries used by this makefile
FETCH=		/usr/bin/ftp -Vm

# make sure to only use the original OpenBSD mirror
MIRROR=		https://ftp.openbsd.org/pub/OpenBSD/patches/${OSREV}/common

# build type defaults to src
BUILD?=		src

SYSPATCH_BASE=	syspatch${OSrev}-${ERRATA}
SYSPATCH_SHRT=	${OSrev}-${ERRATA}

# the final name of the syspatch tarball
SYSPATCH=	${SYSPATCH_BASE}.tgz

# arguments used by different tools
MTREE_FILES=	/etc/mtree/4.4BSD.dist
MTREE_ARGS=	-qdep ${FAKE} -U
SIGNIFY_KEY=	/etc/signify/openbsd-${OSrev}-base.pub
PATCH_STRIP?=	-p0
PATCH_ARGS=	-d ${SRCDIR} -z .orig --forward --quiet -E ${PATCH_STRIP}

# miscellaneous variables
SYSPATCH_DIR=	${FAKE}/var/syspatch/${SYSPATCH_SHRT}
FAKE=		${FAKEROOT}/syspatch/${SYSPATCH_SHRT}
SRCDIR=		${BSDSRCDIR}
SUBDIR?=

_PATCH_COOKIE=	${ERRATA}/.patch_done
_BUILD_COOKIE=	${ERRATA}/.build_done
_FAKE_COOKIE=	${ERRATA}/.fake_done

.if ${BUILD:L:Msrc}
SRCDIR=		${BSDSRCDIR}
.elif ${BUILD:L:Mxenocara}
SRCDIR=		${X11SRC}
MTREE_FILES+=	/etc/mtree/BSD.x11.dist
.endif

.MAIN: all
all: ${_BUILD_COOKIE}

.if !target(clean)
clean:
	rm -rf .depend ${ERRATA} ${SYSPATCH}
.endif

cleandir: clean

${_FAKE_COOKIE}:
.ifndef FAKEROOT
	@@{ echo "***>   setenv FAKEROOT before doing that!"; \
	exit 1; };
.else
	@@if [[ `id -u` -ne 0 ]]; then \
		{ echo "***>   $@@ must be called by root"; \
		exit 1; }; \
	fi
	@@destmp=`df -P ${FAKEROOT} | awk 'END { print $$6 }'`; \
	if ! mount | grep -q " $${destmp} .*noperm"; then \
		echo ${FAKEROOT} must be on a noperm filesystem >&2; \
		false; \
	fi; \
	if [[ `stat -f '%Su %Lp' $${destmp}` != '${BUILDUSER} 700' ]]; then \
		echo $${destmp} must have owner BUILDUSER and mode 700 >&2; \
		false; \
	fi
	${INSTALL} -d -m 755 ${SYSPATCH_DIR}
	${INSTALL} ${INSTALL_COPY} -o ${SHAREOWN} -g ${SHAREGRP} -m ${SHAREMODE} \
		${ERRATA}/${ERRATA}.patch.sig ${SYSPATCH_DIR}

.for _m in ${MTREE_FILES}
	@@su ${BUILDUSER} -c '/usr/sbin/mtree ${MTREE_ARGS} -f ${_m}' >/dev/null
.endfor
	@@su ${BUILDUSER} -c 'touch $@@'
.endif

${ERRATA}/${ERRATA}.patch:
	@@su ${BUILDUSER} -c '${INSTALL} -d -m 755 ${ERRATA}' && \
	echo '>> Fetch ${MIRROR}/${.TARGET:T}.sig'; \
	if su ${BUILDUSER} -c '${FETCH} -o ${ERRATA}/${.TARGET:T}.sig \
		${MIRROR}/${.TARGET:T}.sig'; then \
		su ${BUILDUSER} -c '/usr/bin/signify -Vep ${SIGNIFY_KEY} -x \
			${ERRATA}/${.TARGET:T}.sig -m ${.TARGET}' && exit 0; \
	fi; exit 1

${_PATCH_COOKIE}: ${ERRATA}/${ERRATA}.patch
	@@su ${BUILDUSER} -c '/usr/bin/patch ${PATCH_ARGS} < ${ERRATA}/${ERRATA}.patch' || \
		{ echo "***>   ${ERRATA}.patch did not apply cleanly"; \
		exit 1; };
	@@su ${BUILDUSER} -c 'touch $@@'

.ifdef DESTDIR
${_BUILD_COOKIE}: ${_PATCH_COOKIE} ${_FAKE_COOKIE}
	@@{ echo "***>   cannot set DESTDIR here!"; \
	exit 1; };
.elif !defined(FAKEROOT)
${_BUILD_COOKIE}: ${_PATCH_COOKIE} ${_FAKE_COOKIE}
	@@{ echo "***>   setenv FAKEROOT before doing that!"; \
	exit 1; };
.else
${_BUILD_COOKIE}: ${_PATCH_COOKIE} ${_FAKE_COOKIE}
.if ${BUILD:L:Msrc} || ${BUILD:L:Mxenocara}
.  if defined(SUBDIR) && !empty(SUBDIR)
.    for _s in ${SUBDIR}
	@@if [ -f ${_s}/Makefile.bsd-wrapper ]; then \
		_mk_spec_="-f Makefile.bsd-wrapper"; \
	fi; \
	for _t in obj depend all; do \
		su ${BUILDUSER} -c "cd ${_s} && /usr/bin/make $${_mk_spec_} DESTDIR_LIBLINK=${FAKE} $${_t}"; \
	done; \
	su ${BUILDUSER} -c "cd ${_s} && /usr/bin/make $${_mk_spec_} DESTDIR=${FAKE} install";
.    endfor
.  endif
.elif ${BUILD:L:Mkernel}
.  for _kern in GENERIC GENERIC.MP
	@@if cd ${SRCDIR}/sys/arch/${MACHINE_ARCH}/conf; then \
		if config ${_kern}; then \
			if cd ../compile/${_kern} && make; then \
				exit 0; \
			fi; exit 1; \
		fi; exit 1; \
	fi;
	@@if [ ${_kern} = "GENERIC" ]; then \
		su ${BUILDUSER} -c '${INSTALL} ${INSTALL_COPY} -o ${SHAREOWN} -g ${LOCALEGRP} \
		-m 0644 ${SRCDIR}/sys/arch/${MACHINE_ARCH}/compile/${_kern}/bsd \
		${FAKE}/bsd' || \
		{ echo "***>   failed to install ${_kern}"; \
		exit 1; }; \
	elif [ ${_kern} = "GENERIC.MP" ]; then \
		su ${BUILDUSER} -c '${INSTALL} ${INSTALL_COPY} -o ${SHAREOWN} -g ${LOCALEGRP} \
		-m 0644 ${SRCDIR}/sys/arch/${MACHINE_ARCH}/compile/${_kern}/bsd \
		${FAKE}/bsd.mp' || \
		{ echo "***>   failed to install ${_kern}"; \
		exit 1; }; \
	fi; exit 0
.  endfor
.endif
	@@su ${BUILDUSER} -c 'touch $@@'
.endif

syspatch: ${SYSPATCH}

${SYSPATCH}: ${ERRATA}/.plist
.for _m in ${MTREE_FILES}
	@@su ${BUILDUSER} -c '/usr/sbin/mtree ${MTREE_ARGS} -f ${_m}' >/dev/null
.endfor
	@@su ${BUILDUSER} -c 'tar -Pczf ${.TARGET} -C ${FAKE} -I ${ERRATA}/.plist' || \
		{ echo "***>   unable to create ${.TARGET}"; \
		exit 1; };
	@@echo ">> Created ${SYSPATCH}";

${ERRATA}/.fplist: ${_BUILD_COOKIE}
	@@su ${BUILDUSER} -c 'find ${FAKE} \! -type d > ${.OBJDIR}/${ERRATA}/.fplist' || \
		{ echo "***>   unable to create list of files"; \
		exit 1; };

${ERRATA}/.plist: ${ERRATA}/.fplist
	@@su ${BUILDUSER} -c 'for _l in $$(cat ${.OBJDIR}/${ERRATA}/.fplist); do \
		_o=$$(echo $${_l} | sed "s,${FAKE},,g"); \
		cmp -s $${_l} $${_o} || echo $${_o} | sed 's,^/,,g'; \
	done > ${.OBJDIR}/${ERRATA}/.plist'

findstatic:
.if defined(LIB) && !empty(LIB)
	@@cd ${SRCDIR} && for _m in $$(find {bin,sbin} \
		\( -name Makefile -o -name Makefile.bsd-wrapper \) \
		-exec grep -l '\-l${LIB}' {} \;); do \
		echo "SUBDIR+= $$(dirname $${_m})"; \
	done
.endif

.include <bsd.obj.mk>
@


1.6
log
@oops, OSREV -> OSrev.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.syspatch.mk,v 1.5 2016/11/09 15:43:22 ajacoutot Exp $
d27 6
d34 1
a34 1
SYSPATCH=	syspatch${OSrev}-${ERRATA}.tgz
a42 3
# build type defaults to src
BUILD?=		src

d44 2
a45 2
SYSPATCH_DIR=	${FAKE}/var/syspatch/${OSREV}
FAKE=		${DESTDIR}/syspatch/${ERRATA}
a51 1
_INSTALL_COOKIE=${ERRATA}/.install_done
d70 5
a74 1
testroot:
d79 1
a79 7

${_FAKE_COOKIE}: testroot ${_BUILD_COOKIE}
.ifndef DESTDIR
	@@{ echo "***>   setenv DESTDIR before doing that!"; \
	exit 1; };
.else
	@@destmp=`df -P ${DESTDIR} | awk 'END { print $$6 }'`; \
d81 1
a81 1
		echo ${DESTDIR} must be on a noperm filesystem >&2; \
a87 1

d113 10
a122 1
${_INSTALL_COOKIE}: ${_FAKE_COOKIE}
d129 4
a132 2
	cd ${_s} && su ${BUILDUSER} -c "/usr/bin/make $${_mk_spec_} \
		DESTDIR=${FAKE} install"
d137 7
a159 30

.ifdef DESTDIR
${_BUILD_COOKIE}: ${_PATCH_COOKIE}
	@@echo cannot build with DESTDIR set
	@@false
.else
${_BUILD_COOKIE}: ${_PATCH_COOKIE}
.if ${BUILD:L:Msrc} || ${BUILD:L:Mxenocara}
.  if defined(SUBDIR) && !empty(SUBDIR)
.    for _s in ${SUBDIR}
	@@if [ -f ${_s}/Makefile.bsd-wrapper ]; then \
		_mk_spec_="-f Makefile.bsd-wrapper"; \
	fi; \
	for _t in obj depend all; do \
		su ${BUILDUSER} -c "cd ${_s} && /usr/bin/make $${_mk_spec_} $${_t}"; \
	done;
.    endfor
.  endif
.elif ${BUILD:L:Mkernel}
.  for _kern in GENERIC GENERIC.MP
	@@if cd ${SRCDIR}/sys/arch/${MACHINE_ARCH}/conf; then \
		if config ${_kern}; then \
			if cd ../compile/${_kern} && make; then \
				exit 0; \
			fi; exit 1; \
		fi; exit 1; \
	fi; exit 1
.  endfor
.endif
	@@su ${BUILDUSER} -c 'touch $@@'
d171 1
a171 1
	@@echo ">> Created ${SYSPATCH}"; \
d173 1
a173 1
${ERRATA}/.fplist: ${_INSTALL_COOKIE}
@


1.5
log
@Use https to get the patches.
Fix syspatch naming.

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.syspatch.mk,v 1.4 2016/11/03 14:46:48 robert Exp $
d28 1
a28 1
SYSPATCH=	syspatch${OSREV}-${ERRATA}.tgz
@


1.4
log
@switch to using BUILDUSER and add more error checking
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.syspatch.mk,v 1.3 2016/09/05 11:55:06 robert Exp $
d25 1
a25 1
MIRROR=		http://ftp.openbsd.org/pub/OpenBSD/patches/${OSREV}/common
d28 1
a28 1
SYSPATCH=	syspatch-${OSrev}-${ERRATA}.tgz
@


1.3
log
@use OSREV and OSrev instead of setting them in the makefile
and remove variables for MAKE, SIGNIFY, etc.

prodded by deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.syspatch.mk,v 1.2 2016/09/04 16:40:34 robert Exp $
d42 1
a42 1
FAKE=		${ERRATA}/fake
d68 25
a92 1
${_FAKE_COOKIE}: ${_BUILD_COOKIE}
d94 1
a94 1
	@@${SUDO} /usr/sbin/mtree ${MTREE_ARGS} -f ${_m} >/dev/null
d96 2
a97 1
	@@touch $@@
d100 6
a105 8
	@@${INSTALL} -d -m 755 ${SYSPATCH_DIR} && \
	echo ">> Fetch ${MIRROR}/${.TARGET:T}.sig"; \
	if ${FETCH} -o ${SYSPATCH_DIR}/${.TARGET:T}.sig \
		${MIRROR}/${.TARGET:T}.sig; then \
		if /usr/bin/signify -Vep ${SIGNIFY_KEY} -x \
			${SYSPATCH_DIR}/${.TARGET:T}.sig -m ${.TARGET}; then \
				exit 0; \
		fi; \
d109 1
a109 1
	@@/usr/bin/patch ${PATCH_ARGS} < ${ERRATA}/${ERRATA}.patch || \
d112 1
a112 1
	@@touch $@@
d121 2
a122 2
	cd ${_s} && ${SUDO} /usr/bin/make $${_mk_spec_} \
		DESTDIR=${.OBJDIR}/${FAKE} install
d128 3
a130 3
		${SUDO} \
		cp -p ${SRCDIR}/sys/arch/${MACHINE_ARCH}/compile/${_kern}/bsd \
		${.OBJDIR}/${FAKE}/bsd || \
d134 3
a136 3
		${SUDO} \
		cp -p ${SRCDIR}/sys/arch/${MACHINE_ARCH}/compile/${_kern}/bsd \
		${.OBJDIR}/${FAKE}/bsd.mp || \
d142 1
a142 1
	@@touch $@@
d144 5
d157 1
a157 1
		cd ${_s} && /usr/bin/make $${_mk_spec_} $${_t}; \
d165 1
a165 1
			if cd ../compile/${_kern} && make clean && make; then \
d172 2
a173 1
	@@touch $@@
d179 1
a179 2
	@@${SUDO} /usr/sbin/mtree ${MTREE_ARGS} -f ${_m} >/dev/null
	@@${SUDO} chown -R root:wheel ${SYSPATCH_DIR}
d181 1
a181 1
	@@tar -Pczf ${.TARGET} -C ${FAKE} -I ${ERRATA}/.plist || \
d187 1
a187 1
	@@${SUDO} find ${FAKE} \! -type d > ${.OBJDIR}/${ERRATA}/.fplist || \
d192 1
a192 1
	@@for _l in $$(cat ${.OBJDIR}/${ERRATA}/.fplist); do \
d195 1
a195 1
	done > ${.OBJDIR}/${ERRATA}/.plist
@


1.2
log
@allow everything to run as unprivileged user except for fake
install and mtree by splitting up some targets
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.syspatch.mk,v 1.1 2016/09/03 21:43:25 robert Exp $
a20 4
# both the X.Y and XY formats are required
OSREV!=		uname -r
_OSREV=		${OSREV:S/.//g}

a22 4
SIGNIFY=	/usr/bin/signify
PATCH=		/usr/bin/patch
MAKE=		/usr/bin/make
MTREE=		/usr/sbin/mtree
d28 1
a28 1
SYSPATCH=	syspatch-${_OSREV}-${ERRATA}.tgz
d33 1
a33 1
SIGNIFY_KEY=	/etc/signify/openbsd-${_OSREV}-base.pub
d70 1
a70 1
	@@${SUDO} ${MTREE} ${MTREE_ARGS} -f ${_m} >/dev/null
d79 1
a79 1
		if ${SIGNIFY} -Vep ${SIGNIFY_KEY} -x \
d86 1
a86 1
	@@${PATCH} ${PATCH_ARGS} < ${ERRATA}/${ERRATA}.patch || \
d98 1
a98 1
	cd ${_s} && ${SUDO} ${MAKE} $${_mk_spec_} \
d129 1
a129 1
		cd ${_s} && ${MAKE} $${_mk_spec_} $${_t}; \
d150 1
a150 1
	@@${SUDO} ${MTREE} ${MTREE_ARGS} -f ${_m} >/dev/null
@


1.1
log
@add infrastructure to build syspatches (binary updates to stable)

Makefile.000 corresponds to errata_000 which is nonexistent so it
is a good place to provide an example of how to build the others

this is still work in progress, getting it in so people can join
in on the development

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d57 1
d67 1
a67 1
all: ${SYSPATCH}
d76 1
a76 2
${_FAKE_COOKIE}:
	@@${INSTALL} -d -m 755 ${SYSPATCH_DIR}
d78 1
a78 1
	@@${MTREE} ${MTREE_ARGS} -f ${_m} >/dev/null
d82 3
a84 2
${ERRATA}/${ERRATA}.patch: ${_FAKE_COOKIE}
	@@echo ">> Fetch ${MIRROR}/${.TARGET:T}.sig"; \
d99 30
d138 1
a138 2
	done; \
	cd ${_s} && ${MAKE} $${_mk_spec_} DESTDIR=${.OBJDIR}/${FAKE} install
a149 11
	@@if [ ${_kern} = "GENERIC" ]; then \
		cp -p ${SRCDIR}/sys/arch/${MACHINE_ARCH}/compile/${_kern}/bsd \
			${.OBJDIR}/${FAKE}/bsd || \
			{ echo "***>   failed to install ${_kern}"; \
			exit 1; }; \
	elif [ ${_kern} = "GENERIC.MP" ]; then \
		cp -p ${SRCDIR}/sys/arch/${MACHINE_ARCH}/compile/${_kern}/bsd \
			${.OBJDIR}/${FAKE}/bsd.mp || \
			{ echo "***>   failed to install ${_kern}"; \
			exit 1; }; \
	fi; exit 0
d154 2
d158 2
a159 1
	@@${MTREE} ${MTREE_ARGS} -f ${_m} >/dev/null
d166 2
a167 2
${ERRATA}/.fplist: ${_BUILD_COOKIE}
	@@find ${FAKE} \! -type d > ${.OBJDIR}/${ERRATA}/.fplist || \
@

