head	1.95;
access;
symbols
	OPENBSD_6_2_BASE:1.95
	OPENBSD_6_1:1.95.0.24
	OPENBSD_6_1_BASE:1.95
	OPENBSD_6_0:1.95.0.20
	OPENBSD_6_0_BASE:1.95
	OPENBSD_5_9:1.95.0.16
	OPENBSD_5_9_BASE:1.95
	OPENBSD_5_8:1.95.0.18
	OPENBSD_5_8_BASE:1.95
	OPENBSD_5_7:1.95.0.10
	OPENBSD_5_7_BASE:1.95
	OPENBSD_5_6:1.95.0.14
	OPENBSD_5_6_BASE:1.95
	OPENBSD_5_5:1.95.0.12
	OPENBSD_5_5_BASE:1.95
	OPENBSD_5_4:1.95.0.8
	OPENBSD_5_4_BASE:1.95
	OPENBSD_5_3:1.95.0.6
	OPENBSD_5_3_BASE:1.95
	OPENBSD_5_2:1.95.0.4
	OPENBSD_5_2_BASE:1.95
	OPENBSD_5_1_BASE:1.95
	OPENBSD_5_1:1.95.0.2
	OPENBSD_5_0:1.94.0.48
	OPENBSD_5_0_BASE:1.94
	OPENBSD_4_9:1.94.0.46
	OPENBSD_4_9_BASE:1.94
	OPENBSD_4_8:1.94.0.44
	OPENBSD_4_8_BASE:1.94
	OPENBSD_4_7:1.94.0.40
	OPENBSD_4_7_BASE:1.94
	OPENBSD_4_6:1.94.0.42
	OPENBSD_4_6_BASE:1.94
	OPENBSD_4_5:1.94.0.38
	OPENBSD_4_5_BASE:1.94
	OPENBSD_4_4:1.94.0.36
	OPENBSD_4_4_BASE:1.94
	OPENBSD_4_3:1.94.0.34
	OPENBSD_4_3_BASE:1.94
	OPENBSD_4_2:1.94.0.32
	OPENBSD_4_2_BASE:1.94
	OPENBSD_4_1:1.94.0.30
	OPENBSD_4_1_BASE:1.94
	OPENBSD_4_0:1.94.0.28
	OPENBSD_4_0_BASE:1.94
	OPENBSD_3_9:1.94.0.26
	OPENBSD_3_9_BASE:1.94
	OPENBSD_3_8:1.94.0.24
	OPENBSD_3_8_BASE:1.94
	OPENBSD_3_7:1.94.0.22
	OPENBSD_3_7_BASE:1.94
	OPENBSD_3_6:1.94.0.20
	OPENBSD_3_6_BASE:1.94
	OPENBSD_3_5:1.94.0.18
	OPENBSD_3_5_BASE:1.94
	OPENBSD_3_4:1.94.0.16
	OPENBSD_3_4_BASE:1.94
	OPENBSD_3_3:1.94.0.14
	OPENBSD_3_3_BASE:1.94
	OPENBSD_3_2:1.94.0.12
	OPENBSD_3_2_BASE:1.94
	OPENBSD_3_1:1.94.0.10
	OPENBSD_3_1_BASE:1.94
	OPENBSD_3_0:1.94.0.8
	OPENBSD_3_0_BASE:1.94
	OPENBSD_2_9:1.94.0.6
	OPENBSD_2_9_BASE:1.94
	OPENBSD_2_8:1.94.0.4
	OPENBSD_2_8_BASE:1.94
	OPENBSD_2_7:1.94.0.2
	OPENBSD_2_7_BASE:1.94
	OPENBSD_2_6:1.93.0.2
	OPENBSD_2_6_BASE:1.93
	OPENBSD_2_5:1.84.0.2
	OPENBSD_2_5_BASE:1.84
	OPENBSD_2_4:1.46.0.2
	OPENBSD_2_4_BASE:1.46
	OPENBSD_2_3:1.28.0.2
	OPENBSD_2_3_BASE:1.28
	OPENBSD_2_2:1.14.0.2
	OPENBSD_2_2_BASE:1.14
	OPENBSD_2_1:1.12.0.2
	OPENBSD_2_1_BASE:1.12
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6;
locks; strict;
comment	@# @;


1.95
date	2011.09.24.07.26.01;	author espie;	state Exp;
branches;
next	1.94;

1.94
date	2000.03.31.18.43.25;	author espie;	state Exp;
branches;
next	1.93;

1.93
date	99.05.25.20.44.23;	author espie;	state Exp;
branches;
next	1.92;

1.92
date	99.05.23.22.45.15;	author brad;	state Exp;
branches;
next	1.91;

1.91
date	99.05.14.04.38.36;	author brad;	state Exp;
branches;
next	1.90;

1.90
date	99.05.10.21.35.25;	author brad;	state Exp;
branches;
next	1.89;

1.89
date	99.05.04.18.12.24;	author rohee;	state Exp;
branches;
next	1.88;

1.88
date	99.04.20.18.22.56;	author espie;	state Exp;
branches;
next	1.87;

1.87
date	99.04.20.18.09.37;	author espie;	state Exp;
branches;
next	1.86;

1.86
date	99.04.20.18.06.40;	author espie;	state Exp;
branches;
next	1.85;

1.85
date	99.04.20.18.04.27;	author espie;	state Exp;
branches;
next	1.84;

1.84
date	99.04.10.07.48.53;	author marc;	state Exp;
branches;
next	1.83;

1.83
date	99.04.06.19.14.41;	author marc;	state Exp;
branches;
next	1.82;

1.82
date	99.04.02.06.55.56;	author marc;	state Exp;
branches;
next	1.81;

1.81
date	99.03.30.07.12.05;	author marc;	state Exp;
branches;
next	1.80;

1.80
date	99.03.24.01.13.44;	author marc;	state Exp;
branches;
next	1.79;

1.79
date	99.03.16.23.35.37;	author espie;	state Exp;
branches;
next	1.78;

1.78
date	99.03.14.15.19.05;	author rohee;	state Exp;
branches;
next	1.77;

1.77
date	99.03.10.23.22.19;	author marc;	state Exp;
branches;
next	1.76;

1.76
date	99.03.05.16.32.49;	author espie;	state Exp;
branches;
next	1.75;

1.75
date	99.03.03.18.18.46;	author espie;	state Exp;
branches;
next	1.74;

1.74
date	99.03.03.04.16.03;	author marc;	state Exp;
branches;
next	1.73;

1.73
date	99.03.01.19.44.18;	author marc;	state Exp;
branches;
next	1.72;

1.72
date	99.03.01.18.44.04;	author espie;	state Exp;
branches;
next	1.71;

1.71
date	99.02.28.23.23.47;	author espie;	state Exp;
branches;
next	1.70;

1.70
date	99.02.27.18.28.13;	author rohee;	state Exp;
branches;
next	1.69;

1.69
date	99.02.24.20.15.48;	author marc;	state Exp;
branches;
next	1.68;

1.68
date	99.02.24.12.34.46;	author espie;	state Exp;
branches;
next	1.67;

1.67
date	99.02.21.00.50.28;	author espie;	state Exp;
branches;
next	1.66;

1.66
date	99.02.21.00.01.30;	author marc;	state Exp;
branches;
next	1.65;

1.65
date	99.02.18.19.22.45;	author marc;	state Exp;
branches;
next	1.64;

1.64
date	99.02.18.00.01.47;	author marc;	state Exp;
branches;
next	1.63;

1.63
date	99.02.17.23.52.56;	author marc;	state Exp;
branches;
next	1.62;

1.62
date	99.02.17.23.45.15;	author marc;	state Exp;
branches;
next	1.61;

1.61
date	99.02.17.13.00.42;	author espie;	state Exp;
branches;
next	1.60;

1.60
date	99.02.03.17.53.13;	author rohee;	state Exp;
branches;
next	1.59;

1.59
date	99.01.24.02.04.20;	author marc;	state Exp;
branches;
next	1.58;

1.58
date	99.01.08.23.45.48;	author pattonme;	state Exp;
branches;
next	1.57;

1.57
date	98.12.19.16.52.22;	author espie;	state Exp;
branches;
next	1.56;

1.56
date	98.12.18.12.00.46;	author form;	state Exp;
branches;
next	1.55;

1.55
date	98.12.17.18.25.06;	author espie;	state Exp;
branches;
next	1.54;

1.54
date	98.12.16.19.59.48;	author marc;	state Exp;
branches;
next	1.53;

1.53
date	98.11.27.10.51.54;	author form;	state Exp;
branches;
next	1.52;

1.52
date	98.11.25.01.08.35;	author espie;	state Exp;
branches;
next	1.51;

1.51
date	98.11.19.22.15.31;	author marc;	state Exp;
branches;
next	1.50;

1.50
date	98.11.19.04.20.09;	author espie;	state Exp;
branches;
next	1.49;

1.49
date	98.11.17.07.14.16;	author form;	state Exp;
branches;
next	1.48;

1.48
date	98.11.17.06.39.25;	author form;	state Exp;
branches;
next	1.47;

1.47
date	98.11.05.10.36.14;	author espie;	state Exp;
branches;
next	1.46;

1.46
date	98.10.05.05.13.34;	author form;	state Exp;
branches;
next	1.45;

1.45
date	98.09.08.05.51.06;	author marc;	state Exp;
branches;
next	1.44;

1.44
date	98.09.07.22.33.19;	author marc;	state Exp;
branches;
next	1.43;

1.43
date	98.08.24.04.46.14;	author marc;	state Exp;
branches;
next	1.42;

1.42
date	98.08.21.06.57.19;	author marc;	state Exp;
branches;
next	1.41;

1.41
date	98.08.08.06.14.58;	author marc;	state Exp;
branches;
next	1.40;

1.40
date	98.07.29.15.32.54;	author espie;	state Exp;
branches;
next	1.39;

1.39
date	98.07.28.15.25.24;	author espie;	state Exp;
branches;
next	1.38;

1.38
date	98.07.17.04.10.20;	author form;	state Exp;
branches;
next	1.37;

1.37
date	98.07.13.03.11.14;	author todd;	state Exp;
branches;
next	1.36;

1.36
date	98.07.12.04.34.39;	author todd;	state Exp;
branches;
next	1.35;

1.35
date	98.07.09.03.12.18;	author marc;	state Exp;
branches;
next	1.34;

1.34
date	98.07.08.03.27.17;	author marc;	state Exp;
branches;
next	1.33;

1.33
date	98.07.07.04.02.47;	author marc;	state Exp;
branches;
next	1.32;

1.32
date	98.07.06.22.06.51;	author marc;	state Exp;
branches;
next	1.31;

1.31
date	98.06.29.22.21.16;	author marc;	state Exp;
branches;
next	1.30;

1.30
date	98.06.11.16.03.48;	author marc;	state Exp;
branches;
next	1.29;

1.29
date	98.04.28.19.19.29;	author marc;	state Exp;
branches;
next	1.28;

1.28
date	98.04.06.21.46.00;	author marc;	state Exp;
branches;
next	1.27;

1.27
date	98.04.05.04.20.38;	author marc;	state Exp;
branches;
next	1.26;

1.26
date	98.03.27.03.30.43;	author marc;	state Exp;
branches;
next	1.25;

1.25
date	98.02.19.20.41.02;	author marc;	state Exp;
branches;
next	1.24;

1.24
date	98.02.11.00.40.55;	author niklas;	state Exp;
branches;
next	1.23;

1.23
date	98.02.11.00.34.55;	author niklas;	state Exp;
branches;
next	1.22;

1.22
date	98.02.10.08.33.16;	author niklas;	state Exp;
branches;
next	1.21;

1.21
date	97.12.20.01.26.57;	author joey;	state Exp;
branches;
next	1.20;

1.20
date	97.12.20.01.24.08;	author todd;	state Exp;
branches;
next	1.19;

1.19
date	97.12.17.10.06.45;	author niklas;	state Exp;
branches;
next	1.18;

1.18
date	97.12.04.08.26.23;	author niklas;	state Exp;
branches;
next	1.17;

1.17
date	97.12.02.23.36.46;	author niklas;	state Exp;
branches;
next	1.16;

1.16
date	97.12.02.21.58.12;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	97.12.02.11.11.57;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	97.09.21.10.58.41;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	97.09.09.15.11.28;	author imp;	state Exp;
branches;
next	1.12;

1.12
date	97.04.27.21.38.33;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	97.04.19.19.34.29;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	97.01.11.11.58.11;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	96.12.25.20.10.09;	author imp;	state Exp;
branches;
next	1.8;

1.8
date	96.12.22.17.46.02;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.10.22.14.01.19;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.08.23.11.37.41;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.06.30.18.25.29;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.06.11.10.38.02;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.11.23.16;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.03.23.07.28;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.03.22.47.10;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.95
log
@create a new "bounce" file for ports infrastructure.
clean up ancient comments in the existing ones, and use bsd.own.mk's guard
against multiple includes.
@
text
@.if !defined(BSD_OWN_MK)
.  include <bsd.own.mk>
.endif
PORTSDIR?=	/usr/ports
.include	"${PORTSDIR}/infrastructure/mk/bsd.port.mk"
@


1.94
log
@include bsd.own.mk there (allows for PORTSDIR in /etc/mk.conf)

(This whole series of patches approved by millert@@, btw)
@
text
@d1 3
a3 1
.include <bsd.own.mk>
a5 2

# if you can't find this file, cvs update your ports tree as well.
@


1.93
log
@Stub out src/   ports makefile fragments, so that everything is under
ports/ (simpler to keep synchronized).
@
text
@d1 1
@


1.92
log
@- add a few more dist sites to MASTER_SITE_GNU
- add MASTER_SITE_AFTERSTEP and MASTER_SITE_WINDOWMAKER for the master
and mirror sites of two popular window manager suites
- add MASTER_SITE_TCLTK which is Tcl/Tk master sites
@
text
@d1 2
a2 10
#-*- mode: Fundamental; tab-width: 4; -*-
# ex:ts=4
#	$OpenBSD: bsd.port.mk,v 1.91 1999/05/14 04:38:36 brad Exp $
#	$FreeBSD: bsd.port.mk,v 1.264 1996/12/25 02:27:44 imp Exp $
#	$NetBSD: bsd.port.mk,v 1.62 1998/04/09 12:47:02 hubertf Exp $
#
#	bsd.port.mk - 940820 Jordan K. Hubbard.
#	This file is in the public domain.
#
# Please view me with 4 column tabs!
d4 1
a4 2461
# There are two different types of "maintainers" in the whole ports
# framework concept.  Maintainers of the bsd.port*.mk files
# are listed below in the ${OPSYS}_MAINTAINER entries (this file
# is used by multiple *BSD flavors).  You should consult them directly
# if you have any questions/suggestions regarding this file since only
# they are allowed to modify the master copies in the CVS repository!

# For each port, the MAINTAINER variable is what you should consult for
# contact information on the person(s) to contact if you have questions/
# suggestions about that specific port.  By default (if no MAINTAINER
# is listed), a port is maintained by the subscribers of the ports@@openbsd.org
# mailing list, and any correspondence should be directed there.  
#
OpenBSD_MAINTAINER= ports-admin@@openbsd.org

# NEED_VERSION: we need at least this version of bsd.port.mk for this 
# port  to build

FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.91 1999/05/14 04:38:36 brad Exp $$
.if defined(NEED_VERSION)
_VERSION_REVISION=${FULL_REVISION:M[0-9]*.*}

_VERSION=${_VERSION_REVISION:C/\..*//}
_REVISION=${_VERSION_REVISION:C/.*\.//}

_VERSION_NEEDED=${NEED_VERSION:C/\..*//}
_REVISION_NEEDED=${NEED_VERSION:C/.*\.//}

.BEGIN:
	@@if [ ${_VERSION_NEEDED} -gt ${_VERSION} -o \
			${_VERSION_NEEDED} -eq ${_VERSION} -a \
				${_REVISION_NEEDED} -gt ${_REVISION} ]; \
	then \
		${ECHO} "Need version ${NEED_VERSION} of bsd.port.mk"; \
		${FALSE}; \
    fi; 

.endif

# Supported Variables and their behaviors:
#
# Variables that typically apply to all ports:
# 
# ONLY_FOR_ARCHS - If a port only makes sense to certain architectures, this
#				  is a list containing the names for them.  It is checked
#				  against the predefined ${MACHINE_ARCH} value
# ARCH			- The architecture (default: "uname -m").
# OPSYS			- The operating system (default: "uname -s").
# OPSYS_VER		- The current version of the operating system
#				  (default: "uname -r").
# PORTSDIR		- The root of the ports tree.  Defaults: /usr/ports
# DISTDIR 		- Where to get gzip'd, tarballed copies of original sources.
#				  (default: ${PORTSDIR}/distfiles).
# PREFIX		- Where to install things in general (default: /usr/local).
# MASTER_SITES	- Primary location(s) for distribution files if not found
#				  locally.
# MASTER_SITE_SUBDIR - Directory that "%SUBDIR%" in MASTER_SITES is
#				  replaced by.
# PATCH_SITES	- Primary location(s) for distribution patch files
#				  (see PATCHFILES below) if not found locally.
# PATCH_SITE_SUBDIR - Directory that "%SUBDIR%" in PATCH_SITES is
#				  replaced by.
#
# MASTER_SITE_BACKUP - Backup location(s) for distribution files and patch
#				  files if not found locally and ${MASTER_SITES}/${PATCH_SITES}
#				  (default:
#				  ftp://ftp.openbsd.org/pub/OpenBSD/distfiles/${DIST_SUBDIR}/
#				  ftp://ftp.openbsd.org/pub/OpenBSD/licensed/${DIST_SUBDIR}/
#				  ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/)
# MASTER_SITE_OVERRIDE - If set, override the MASTER_SITES setting with this
#				  value.
# MASTER_SITE_OPENBSD - If set, only use ftp.openbsd.org as the
#				  MASTER_SITE_OVERRIDE.
# PACKAGES		- A top level directory where all packages go (rather than
#				  going locally to each port). (default: ${PORTSDIR}/packages).
# GMAKE			- Set to path of GNU make if not in $PORTPATH (default: gmake).
# XMKMF			- Set to path of `xmkmf' if not in $PORTPATH 
#                 (default: xmkmf -a ).
# MAINTAINER	- The e-mail address of the contact person for this port
#				  Defaults: ports@@OpenBSD.ORG
# CATEGORIES	- A list of descriptive categories into which this port falls.
# WRKOBJDIR		- A top level directory where, if defined, the separate working
#				  directories will get created, and symbolically linked to from
#				  ${WRKDIR} (see below).  This is useful for building ports on
#				  several architectures, then ${PORTSDIR} can be NFS-mounted
#				  while ${WRKOBJDIR} is local to every arch
# PREFERRED_CIPHERS
#				- a list of the form cipher.sig of programs to use to check
#				  recorded checksums, in order of decreasing trust.
#				  (default to using sha1, then rmd160, then md5).
#
# Variables that typically apply to an individual port.  Non-Boolean
# variables without defaults are *mandatory*.
#
# WRKDIR 		- A temporary working directory that gets *clobbered* on clean
#				  (default: ${.CURDIR}/work).
# WRKSRC		- A subdirectory of ${WRKDIR} where the distribution actually
#				  unpacks to.  (Default: ${WRKDIR}/${DISTNAME} unless
#				  NO_WRKSUBDIR is set, in which case simply ${WRKDIR}).
# WRKBUILD		- The directory where the port is actually built, useful for 
#                 ports that need a separate directory (default: ${WRKSRC}).
#				  This is intended for GNU configure.
# SEPARATE_BUILD
#               - define if the port can build in directory separate from
#                 WRKSRC. This redefines WRKBUILD to be arch-dependent,
#                 along with the configure, build and install cookies
# DISTNAME		- Name of port or distribution.
# DISTFILES		- Name(s) of archive file(s) containing distribution
#				  (default: ${DISTNAME}${EXTRACT_SUFX}).
# SUPDISTFILES  - Names of supplementary archive files that don't get
# 				  used all the time (default: empty).
# PATCHFILES	- Name(s) of additional files that contain distribution
#				  patches (default: none).  make will look for them at
#				  PATCH_SITES (see above).  They will automatically be
#				  uncompressed before patching if the names end with
#				  ".gz" or ".Z".
# SUPPATCHFILES  - Names of supplementary patch files that don't get
# 				  used all the time (default: empty).
# DIST_SUBDIR	- Suffix to ${DISTDIR}.  If set, all ${DISTFILES} 
#				  and ${PATCHFILES} will be put in this subdirectory of
#				  ${DISTDIR}.  Also they will be fetched in this subdirectory 
#				  from FreeBSD mirror sites.
# ALLFILES		- All of ${DISTFILES} and ${PATCHFILES}.
# MIRROR_DISTFILE - Whether the distfile is redistributable without restrictions.
#				  Defaults to "yes", set this to "no" if restrictions exist.
# IGNOREFILES	- If some of the ${ALLFILES} are not checksum-able, set
#				  this variable to their names.
# PKGNAME		- Name of the package file to create if the DISTNAME 
#				  isn't really relevant for the port/package
#				  (default: ${DISTNAME}).
# EXTRACT_ONLY	- If defined, a subset of ${DISTFILES} you want to
#			  	  actually extract.
# PATCHDIR 		- A directory containing any additional patches you made
#				  to port this software to OpenBSD (default:
#				  ${.CURDIR}/patches)
# PATCH_LIST	- list of patches to apply, can include wildcards (default:
#                 patch-*)
# SCRIPTDIR 	- A directory containing any auxiliary scripts
#				  (default: ${.CURDIR}/scripts)
# FILESDIR 		- A directory containing any miscellaneous additional files.
#				  (default: ${.CURDIR}/files)
# PKGDIR 		- A direction containing any package creation files.
#				  (default: ${.CURDIR}/pkg)
# PKG_DBDIR		- Where package installation is recorded (default: /var/db/pkg)
# FORCE_PKG_REGISTER - If set, it will overwrite any existing package
#				  registration information in ${PKG_DBDIR}/${PKGNAME}.
# NO_MTREE		- If set, will not invoke mtree from bsd.port.mk from
#				  the "install" target.
# MTREE_FILE	- The name of the mtree file (default: /etc/mtree/BSD.x11.dist
#				  if USE_IMAKE or USE_X11 is set, /etc/mtree/BSD.local.dist
#				  otherwise.)
# COMES_WITH	- The first version that a port was made part of the
#				  standard OpenBSD distribution.  If the current OpenBSD
#				  version is >= this version then a notice will be
#				  displayed instead the port being generated.
#
# NO_BUILD		- Use a dummy (do-nothing) build target.
# NO_CONFIGURE	- Use a dummy (do-nothing) configure target.
# NO_CDROM		- Port may not go on CDROM.  Set this string to reason.
# NO_DESCRIBE	- Use a dummy (do-nothing) describe target.
# NO_EXTRACT	- Use a dummy (do-nothing) extract target.
# NO_INSTALL	- Use a dummy (do-nothing) install target.
# NO_PACKAGE	- Use a dummy (do-nothing) package target.
# NO_PKG_REGISTER - Don't register a port install as a package.
# NO_WRKSUBDIR	- Assume port unpacks directly into ${WRKDIR}.
# NO_WRKDIR		- There's no work directory at all; port does this someplace
#				  else.
# NO_DEPENDS	- Don't verify build of dependencies.
# NOCLEANDEPENDS - Don't nuke dependent dirs on make clean (Default: yes)
# BROKEN		- Port is broken.  Set this string to the reason why.
# RESTRICTED	- Port is restricted.  Set this string to the reason why.
# USE_BZIP2		- Port distfiles use bzip2 instead of gzip for compression.
# USE_ZIP		- Port distfiles use zip instead of tar for packaging.
# USE_GMAKE		- Port uses gmake.
# USE_LIBTOOL	- Port uses libtool.
#
# XXX: cygnus products do NOT use autoconf for making its main 
#      configure from configure.in
# USE_AUTOCONF	- Port uses autoconf (implies GNU_CONFIGURE).
# AUTOCONF_DIR  - Where to apply autoconf (default: ${WRKSRC}).
# USE_PERL5		- Port uses perl5 for building and running.
# USE_IMAKE		- Port uses imake.
# USE_X11		- Port uses X11 and installs in ${X11BASE}
# USE_EGCC		- Port needs the egcs C compiler
# USE_EGXX		- Port needs the egcs C++ compiler
# NO_INSTALL_MANPAGES - For imake ports that don't like the install.man
#						target.
# HAS_CONFIGURE	- Says that the port has its own configure script.
# GNU_CONFIGURE	- Set if you are using GNU configure (optional).
# CONFIGURE_SCRIPT - Name of configure script, defaults to 'configure'.
# CONFIGURE_ARGS - Pass these args to configure if ${HAS_CONFIGURE} is set.
# CONFIGURE_SHARED - An argument to GNU configure that expands to
#				  --enable-shared for those architectures that support
#				  shared libraries and --disable-shared for architectures
#				  that do not support shared libraries.
# LIBTOOL_FLAGS	- Pass these flags in ${CONFIGURE} and ${MAKE} environment so
#				  to be used as args by libtool.
# CONFIGURE_ENV - Pass these env (shell-like) to configure if
#				  ${HAS_CONFIGURE} is set.
# SCRIPTS_ENV	- Additional environment vars passed to scripts in
#                 ${SCRIPTDIR} executed by bsd.port.mk.
# MAKE_ENV		- Additional environment vars passed to sub-make in build
#				  stage.
# IS_INTERACTIVE - Set this if your port needs to interact with the user
#				  during a build.  User can then decide to skip this port by
#				  setting ${BATCH}, or compiling only the interactive ports
#				  by setting ${INTERACTIVE}.
# FETCH_DEPENDS - A list of "path:dir" pairs of other ports this
#				  package depends in the "fetch" stage.  "path" is the
#				  name of a file if it starts with a slash (/), an
#				  executable otherwise.  make will test for the
#				  existence (if it is a full pathname) or search for
#				  it in $PORTPATH (if it is an executable) and go
#				  into "dir" to do a "make all install" if it's not
#				  found.
# BUILD_DEPENDS - A list of "path:dir" pairs of other ports this
#				  package depends to build (between the "extract" and
#				  "build" stages, inclusive).  The test done to
#				  determine the existence of the dependency is the
#				  same as FETCH_DEPENDS.
# RUN_DEPENDS	- A list of "path:dir" pairs of other ports this
#				  package depends to run.  The test done to determine
#				  the existence of the dependency is the same as
#				  FETCH_DEPENDS.  This will be checked during the
#				  "install" stage and the name of the dependency will
#				  be put into the package as well.
# LIB_DEPENDS	- A list of "lib:dir" pairs of other ports this package
#				  depends on.  "lib" is the name of a shared library.
#				  make will use "ldconfig -r" to search for the
#				  library.  Note that lib can be any regular expression.
#				  In older versions of this file, you need two backslashes
#				  in front of dots (.) to supress its special meaning (e.g.,
#				  use "foo\\.2\\.:${PORTSDIR}/utils/foo" to match "libfoo.2.*").
#				  No special backslashes are needed to escape regular
#				  expression metacharacters in OpenBSD, and the old backslash
#				  escapes are recognised for backwards compatibility.
# DEPENDS		- A list of other ports this package depends on being
#				  made first.  Use this for things that don't fall into
#				  the above two categories.
#
# EXTRACT_CMD	- Command for extracting archives (default: "gzip",
#				  "bzip2" if USE_BZIP2, "unzip" if USE_ZIP).
# EXTRACT_SUFX	- Suffix for archive files (default: ".tar.gz",
#				  ".tar.bz2" if USE_BZIP2, ".zip" if USE_ZIP).
# EXTRACT_BEFORE_ARGS 
#				- Arguments to ${EXTRACT_CMD} before filename
#				  (default: "-dc" for gzip or bzip2, "-q" for unzip)
# EXTRACT_AFTER_ARGS 
#				- Arguments to ${EXTRACT_CMD} following filename
#				  (default: "| ${TAR} -xf -", or "-d ${WKRDIR}" if USE_ZIP).
#
# FETCH_CMD		  - Full path to ftp/http fetch command if not in $PORTPATH
#				  (default: /usr/bin/ftp).
# FETCH_BEFORE_ARGS -
#				  Arguments to ${FETCH_CMD} before filename (default: none).
# FETCH_AFTER_ARGS -
#				  Arguments to ${FETCH_CMD} following filename (default: none).
# NO_IGNORE     - Set this to YES (most probably in a "make fetch" in
#                 ${PORTSDIR}) if you want to fetch all distfiles,
#                 even for packages not built due to limitation by
#                 absent X or Motif or ONLY_FOR_ARCHS...
# NO_WARNINGS	- Set this to YES to disable warnings regarding variables
#				  to define to control the build.  Automatically set
#				  from the "mirror-distfiles" target.
# ALL_TARGET	- The target to pass to make in the package when building.
#				  (default: "all")
# INSTALL_TARGET- The target to pass to make in the package when installing.
#				  (default: "install")
#
# Motif support:
#
# USE_MOTIF		- Set this in your port if it requires Motif or Lesstif.
#				  It will be built using Lesstif port unless Motif libraries
#				  found or HAVE_MOTIF is defined. See also REQUIRES_MOTIF.
#
# REQUIRES_MOTIF- Set this in your port if it requires Motif.  It will  be
#				  built only if HAVE_MOTIF is set.
# HAVE_MOTIF	- If set, means system has Motif.  Typically set in /etc/mk.conf.
# MOTIF_STATIC	- If set, link libXm statically; otherwise, link it
#				  dynamically.  Typically set in /etc/mk.conf.
# MOTIFLIB		- Set automatically to appropriate value depending on
#				  ${MOTIF_STATIC}.  Substitute references to -lXm with 
#				  patches to make your port conform to our standards.
# MOTIF_ONLY	- If set, build Motif ports only.  (Not much use except for
#				  building packages.)
#
# Variables to change if you want a special behavior:
#
# ECHO_MSG		- Used to print all the '===>' style prompts - override this
#				  to turn them off (default: /bin/echo).
# DEPENDS_TARGET - The target to execute when a port is calling a
#				  dependency (default: "install").
# PATCH_DEBUG	- If set, print out more information about the patches as
#				  it attempts to apply them.
#
# Variables that serve as convenient "aliases" for your *-install targets.
# Use these like: "${INSTALL_PROGRAM} ${WRKSRC}/prog ${PREFIX}/bin".
#
# INSTALL_PROGRAM		- A command to install binary executables.
# INSTALL_SCRIPT		- A command to install executable scripts.
# INSTALL_DATA			- A command to install sharable data.
# INSTALL_MAN			- A command to install manpages (doesn't compress).
# INSTALL_PROGRAM_DIR	- Create a directory for storing programs
# INSTALL_SCRIPT_DIR	- Create a directory for storing scripts (alias for
#						  (INSTALL_PROGRAM_DIR)
# INSTALL_DATA_DIR		- Create a directory for storing arbitrary data
# INSTALL_MAN_DIR		- Create a directory for storing man pages
#
# It is assumed that the port installs manpages uncompressed. If this is
# not the case, set MANCOMPRESSED in the port and define MAN<sect> and
# CAT<sect> for the compressed pages.  The pages will then be automagically
# uncompressed.
#
# MANCOMPRESSED - Indicates that the port installs manpages in a compressed
#                 form (default: port installs manpages uncompressed).
# MAN<sect>		- A list of manpages, categorized by section.  For
#				  example, if your port has "man/man1/foo.1" and
#				  "man/mann/bar.n", set "MAN1=foo.1" and "MANN=bar.n".
#				  The available sections chars are "123456789LN".
# CAT<sect>     - The same as MAN<sect>, only for formatted manpages.
# MANPREFIX		 -The directory prefix for ${MAN<sect>} (default: ${PREFIX}).
# CATPREFIX     - The directory prefix for ${CAT<sect>} (default: ${PREFIX}).
#
# Other variables:
#
# NO_SHARED_LIBS - defined as "yes" for those machine architectures that do
#				  not support shared libraries.  WARNING: This value is
#				  NOT defined until AFTER ".include bsd.port.mk".  Thus
#				  you can NOT use something like ".if defined(NO_SHARED_LIBS)"
#				  before this file is included.
#
# Default targets and their behaviors:
#
# fetch			- Retrieves ${DISTFILES} (and ${PATCHFILES} if defined)
#				  into ${DISTDIR} as necessary.
# fetch-list	- Show list of files that would be retrieved by fetch
# extract		- Unpacks ${DISTFILES} into ${WRKDIR}.
# patch			- Apply any provided patches to the source.
# configure		- Runs either GNU configure, one or more local configure
#				  scripts or nothing, depending on what's available.
# build			- Actually compile the sources.
# install		- Install the results of a build.
# reinstall		- Install the results of a build, ignoring "already installed"
#				  flag.
# deinstall		- Remove the installation.  Alias: uninstall
# plist			- create a file suitable for use as a packing list.  This
#				  is for port maintainers.
# package		- Create a package from an _installed_ port.
# describe		- Try to generate a one-line description for each port for
#				  use in INDEX files and the like.
# checkpatch	- Do a "patch -C" instead of a "patch".  Note that it may
#				  give incorrect results if multiple patches deal with
#				  the same file.
# checksum		- Use ${CHECKSUM_FILE} to ensure that your distfiles are valid.
# makesum		- Generate ${CHECKSUM_FILE} (only do this for your own ports!).
# addsum		- update ${CHECKSUM_FILE} in a non-destructive way 
#				  (your own ports only!)
# readme		- Create a README.html file describing the category or package
# mirror-distfiles	- Mirror the distfile(s) if they are freely redistributable
#				  Setting MIRROR_DISTFILE to "no" in the package Makefile
#				  will override the default "yes", and the distfile will
#				  not be fetched.
# list-distfiles- list the distribution and patch files used by a port.
#				  Typical use is (from the top level of the ports tree)
#				  make ECHO_MSG=: list-distfiles | tee some-file
# obj			- pre-build ${WRKDIR} -> ${WRKOBJDIR}/${PORTSUBDIR} links
# print-depends - print all dependencies for the given package
#
# Default sequence for "all" is:  fetch checksum extract patch configure build
#
# Please read the comments in the targets section below, you
# should be able to use the pre-* or post-* targets/scripts
# (which are available for every stage except checksum) or
# override the do-* targets to do pretty much anything you want.
#
# NEVER override the "regular" targets unless you want to open
# a major can of worms.

# Get the architecture
ARCH!=	uname -m

# Get the operating system type and version
OPSYS!=	uname -s
OPSYS_VER!=	uname -r

.if exists(${.CURDIR}/../Makefile.inc)
.include "${.CURDIR}/../Makefile.inc"
.endif

# Define SUPPORT_SHARES for those machines that support shared libraries.
#
.if (${MACHINE_ARCH} == "alpha") || (${MACHINE_ARCH} == "powerpc") || \
    (${MACHINE_ARCH} == "vax") || (${MACHINE_ARCH} == "hppa")
NO_SHARED_LIBS=	yes
.endif

NOCLEANDEPENDS=	yes
NOMANCOMPRESS?=	yes
DEF_UMASK?=		022

.if exists(${.CURDIR}/Makefile.${ARCH}-${OPSYS})
.include "${.CURDIR}/Makefile.${ARCH}-${OPSYS}"
.elif exists(${.CURDIR}/Makefile.${OPSYS})
.include "${.CURDIR}/Makefile.${OPSYS}"
.elif exists(${.CURDIR}/Makefile.${ARCH})
.include "${.CURDIR}/Makefile.${ARCH}"
.endif

# These need to be absolute since we don't know how deep in the ports
# tree we are and thus can't go relative.  They can, of course, be overridden
# by individual Makefiles or local system make configuration.
PORTSDIR?=		/usr/ports
LOCALBASE?=		${DESTDIR}/usr/local
X11BASE?=		${DESTDIR}/usr/X11R6
DISTDIR?=		${PORTSDIR}/distfiles
_DISTDIR?=		${DISTDIR}/${DIST_SUBDIR}
PACKAGES?=		${PORTSDIR}/packages
TEMPLATES?=		${PORTSDIR}/templates

.if exists(${.CURDIR}/patches.${ARCH}-${OPSYS})
PATCHDIR?=		${.CURDIR}/patches.${ARCH}-${OPSYS}
.elif exists(${.CURDIR}/patches.${OPSYS})
PATCHDIR?=		${.CURDIR}/patches.${OPSYS}
.elif exists(${.CURDIR}/patches.${ARCH})
PATCHDIR?=		${.CURDIR}/patches.${ARCH}
.else
PATCHDIR?=		${.CURDIR}/patches
.endif

PATCH_LIST?=    patch-*

.if exists(${.CURDIR}/scripts.${ARCH}-${OPSYS})
SCRIPTDIR?=		${.CURDIR}/scripts.${ARCH}-${OPSYS}
.elif exists(${.CURDIR}/scripts.${OPSYS})
SCRIPTDIR?=		${.CURDIR}/scripts.${OPSYS}
.elif exists(${.CURDIR}/scripts.${ARCH})
SCRIPTDIR?=		${.CURDIR}/scripts.${ARCH}
.else
SCRIPTDIR?=		${.CURDIR}/scripts
.endif

.if exists(${.CURDIR}/files.${ARCH}-${OPSYS})
FILESDIR?=		${.CURDIR}/files.${ARCH}-${OPSYS}
.elif exists(${.CURDIR}/files.${OPSYS})
FILESDIR?=		${.CURDIR}/files.${OPSYS}
.elif exists(${.CURDIR}/files.${ARCH})
FILESDIR?=		${.CURDIR}/files.${ARCH}
.else
FILESDIR?=		${.CURDIR}/files
.endif

.if exists(${.CURDIR}/pkg.${ARCH}-${OPSYS})
PKGDIR?=		${.CURDIR}/pkg.${ARCH}-${OPSYS}
.elif exists(${.CURDIR}/pkg.${OPSYS})
PKGDIR?=		${.CURDIR}/pkg.${OPSYS}
.elif exists(${.CURDIR}/pkg.${ARCH})
PKGDIR?=		${.CURDIR}/pkg.${ARCH}
.else
PKGDIR?=		${.CURDIR}/pkg
.endif

.if defined(USE_IMAKE) || defined(USE_X11)
PREFIX?=		${X11BASE}
.else
PREFIX?=		${LOCALBASE}
.endif

# where configuration files should go
SYSCONFDIR?=	/etc
# The following 4 lines should go away as soon as the ports are all updated
.if defined(EXEC_DEPENDS)
BUILD_DEPENDS+=	${EXEC_DEPENDS}
RUN_DEPENDS+=	${EXEC_DEPENDS}
.endif
.if defined(USE_GMAKE)
BUILD_DEPENDS+=		${GMAKE}:${PORTSDIR}/devel/gmake
MAKE_PROGRAM=		${GMAKE}
.else
MAKE_PROGRAM=		${MAKE}
.endif
.if defined(USE_AUTOCONF)
GNU_CONFIGURE= yes
BUILD_DEPENDS+=		${AUTOCONF}:${PORTSDIR}/devel/autoconf
AUTOCONF_DIR?=${WRKSRC}
# missing ?= not an oversight
AUTOCONF_ENV=PATH=${PORTPATH}
.endif
.if defined(USE_LIBTOOL)
LIBTOOL?=			${LOCALBASE}/bin/libtool
BUILD_DEPENDS+=		${LIBTOOL}:${PORTSDIR}/devel/libtool
CONFIGURE_ENV+=		LIBTOOL="${LIBTOOL} ${LIBTOOL_FLAGS}"
MAKE_ENV+=			LIBTOOL="${LIBTOOL} ${LIBTOOL_FLAGS}"
.endif
.if defined(USE_EGCC)
BUILD_DEPENDS+= 	${EGCC}:${PORTSDIR}/lang/egcs-stable
CC=${EGCC}
.endif
.if defined(USE_EGXX)
BUILD_DEPENDS+= 	${EGXX}:${PORTSDIR}/lang/egcs-stable
CXX=${EGXX}
.endif
.if defined(USE_MOTIF) && !defined(HAVE_MOTIF) && !defined(REQUIRES_MOTIF)
LIB_DEPENDS+=		Xm.:${PORTSDIR}/x11/lesstif
.endif

.if exists(${PORTSDIR}/../Makefile.inc)
.include "${PORTSDIR}/../Makefile.inc"
.endif

EXTRACT_COOKIE?=	${WRKDIR}/.extract_done
PATCH_COOKIE?=		${WRKDIR}/.patch_done
.if defined(SEPARATE_BUILD)
CONFIGURE_COOKIE?=	${WRKBUILD}/.configure_done
INSTALL_PRE_COOKIE?=${WRKBUILD}/.install_started
INSTALL_COOKIE?=	${WRKBUILD}/.install_done
BUILD_COOKIE?=		${WRKBUILD}/.build_done
PACKAGE_COOKIE?=	${WRKBUILD}/.package_done
.else
CONFIGURE_COOKIE?=	${WRKDIR}/.configure_done
INSTALL_PRE_COOKIE?=${WRKDIR}/.install_started
INSTALL_COOKIE?=	${WRKDIR}/.install_done
BUILD_COOKIE?=		${WRKDIR}/.build_done
PACKAGE_COOKIE?=	${WRKDIR}/.package_done
.endif

# Miscellaneous overridable commands:
GMAKE?=			gmake
AUTOCONF?=		autoconf
EGCC?=			egcc
EGXX?=			eg++
XMKMF?=			xmkmf -a

# be paranoid about which ciphers we trust
.if exists(/sbin/md5)
MD5?=			/sbin/md5
.elif exists(/bin/md5)
MD5?=			/bin/md5
.elif exists(/usr/bin/md5)
MD5?=			/usr/bin/md5
.else
MD5?=			md5
.endif

.if exists(/sbin/sha1)
SHA1?=			/sbin/sha1
.elif exists(/bin/sha1)
SHA1?=			/bin/sha1
.elif exists(/usr/bin/sha1)
SHA1?=			/usr/bin/sha1
.else
SHA1?=			sha1
.endif

.if exists(/sbin/rmd160)
RMD160?=		/sbin/rmd160
.elif exists(/bin/rmd160)
RMD160?=		/bin/rmd160
.elif exists(/usr/bin/rmd160)
RMD160?=		/usr/bin/rmd160
.else
RMD160?=		rmd160
.endif

# Compatibility game
MD5_FILE?=		${FILESDIR}/md5
CHECKSUM_FILE?=	${MD5_FILE}

# Don't touch !!! Used for generating checksums.
CIPHERS=		${SHA1}.SHA1 ${RMD160}.RMD160 ${MD5}.MD5 

# This is the one you can override
PREFERRED_CIPHERS?= ${CIPHERS}

PORTPATH?= /usr/bin:/bin:/usr/sbin:/sbin:${LOCALBASE}/bin:${X11BASE}/bin

# Add any COPTS to CFLAGS.  Note: programs that use imake do not
# use CFLAGS!  Also, many (most?) ports hard code CFLAGS, ignoring
# what we pass in.
CFLAGS+=		${COPTS}

MAKE_FLAGS?=	-f
MAKEFILE?=		Makefile
MAKE_ENV+=		PATH=${PORTPATH} PREFIX=${PREFIX} LOCALBASE=${LOCALBASE} X11BASE=${X11BASE} MOTIFLIB="${MOTIFLIB}" CFLAGS="${CFLAGS}"

.if exists(/usr/bin/fetch)
FETCH_CMD?=		/usr/bin/fetch
.else
FETCH_CMD?=		/usr/bin/ftp
.endif

# By default, distfiles have no restrictions placed on them
MIRROR_DISTFILE?=	yes

TOUCH?=			/usr/bin/touch
TOUCH_FLAGS?=	-f

PATCH?=			/usr/bin/patch
PATCH_STRIP?=	-p0
PATCH_DIST_STRIP?=	-p0
.if defined(PATCH_DEBUG)
PATCH_DEBUG_TMP=	yes
PATCH_ARGS?=	-d ${WRKSRC} -E ${PATCH_STRIP}
PATCH_DIST_ARGS?=	-d ${WRKSRC} -E ${PATCH_DIST_STRIP}
.else
PATCH_DEBUG_TMP=	no
PATCH_ARGS?=	-d ${WRKSRC} --forward --quiet -E ${PATCH_STRIP}
PATCH_DIST_ARGS?=	-d ${WRKSRC} --forward --quiet -E ${PATCH_DIST_STRIP}
.endif
.if defined(BATCH)
PATCH_ARGS+=		--batch
PATCH_DIST_ARGS+=	--batch
.endif

.if defined(PATCH_CHECK_ONLY)
PATCH_ARGS+=	-C
PATCH_DIST_ARGS+=	-C
.endif

.if exists(/bin/tar)
TAR?=	/bin/tar
.else
TAR?=	/usr/bin/tar
.endif
UNZIP?=	unzip
BZIP2?=	bzip2

.if defined(USE_ZIP)
BUILD_DEPENDS+=		${UNZIP}:${PORTSDIR}/archivers/unzip
EXTRACT_CMD?=		${UNZIP}
EXTRACT_SUFX?=		.zip
EXTRACT_BEFORE_ARGS?=  -q
EXTRACT_AFTER_ARGS?=   -d ${WRKDIR}
.else
# common tar case

# Backwards compatibility.
.if defined(EXTRACT_ARGS)
EXTRACT_AFTER_ARGS?=	| ${TAR} ${EXTRACT_ARGS} -
.else
EXTRACT_AFTER_ARGS?=	| ${TAR} -xf -
.endif
EXTRACT_BEFORE_ARGS?=	-dc

.if defined(USE_BZIP2)
BUILD_DEPENDS+=		${BZIP2}:${PORTSDIR}/archivers/bzip2
EXTRACT_CMD?=		${BZIP2}
EXTRACT_SUFX?=		.tar.bz2
.else
EXTRACT_CMD?=		${GZIP_CMD}
EXTRACT_SUFX?=		.tar.gz
.endif

.endif

# Figure out where the local mtree file is
.if !defined(MTREE_FILE)
.if defined(USE_IMAKE) || defined(USE_X11)
MTREE_FILE=	/etc/mtree/BSD.x11.dist
.else
MTREE_FILE=	/etc/mtree/BSD.local.dist
.endif
.endif
MTREE_CMD?=	/usr/sbin/mtree
MTREE_ARGS?=	-U -f ${MTREE_FILE} -d -e -q -p

.include <bsd.own.mk>
MAKE_ENV+=	EXTRA_SYS_MK_INCLUDES="<bsd.own.mk>"

.if !defined(NO_WRKDIR)
.if defined(OBJMACHINE)
WRKDIR?=		${.CURDIR}/work.${MACHINE_ARCH}
.else
WRKDIR?=		${.CURDIR}/work
.endif
.else
WRKDIR?=		${.CURDIR}
.endif
.if defined(NO_WRKSUBDIR)
WRKSRC?=		${WRKDIR}
.else
WRKSRC?=		${WRKDIR}/${DISTNAME}
.endif

.if defined(SEPARATE_BUILD)
WRKBUILD?=		${WRKDIR}/build-${ARCH}
.else
WRKBUILD?=		${WRKSRC}
.endif

.if defined(WRKOBJDIR)
__canonical_PORTSDIR!=	cd ${PORTSDIR}; pwd -P
__canonical_CURDIR!=	cd ${.CURDIR}; pwd -P
PORTSUBDIR=		${__canonical_CURDIR:S,${__canonical_PORTSDIR}/,,}
.endif

# A few aliases for *-install targets
INSTALL_PROGRAM= \
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}
INSTALL_SCRIPT= \
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}
INSTALL_DATA= \
	${INSTALL} ${INSTALL_COPY} -o ${SHAREOWN} -g ${SHAREGRP} -m ${SHAREMODE}
INSTALL_MAN= \
	${INSTALL} ${INSTALL_COPY} -o ${MANOWN} -g ${MANGRP} -m ${MANMODE}
INSTALL_PROGRAM_DIR= \
	${INSTALL} -d -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}
INSTALL_SCRIPT_DIR= \
	${INSTALL_PROGRAM_DIR}
INSTALL_DATA_DIR= \
	${INSTALL} -d -o ${SHAREOWN} -g ${SHAREGRP} -m ${BINMODE}
INSTALL_MAN_DIR= \
	${INSTALL} -d -o ${MANOWN} -g ${MANGRP} -m ${BINMODE}

INSTALL_MACROS=	BSD_INSTALL_PROGRAM="${INSTALL_PROGRAM}" \
			BSD_INSTALL_SCRIPT="${INSTALL_SCRIPT}" \
			BSD_INSTALL_DATA="${INSTALL_DATA}" \
			BSD_INSTALL_MAN="${INSTALL_MAN}" \
			BSD_INSTALL_PROGRAM_DIR="${INSTALL_PROGRAM_DIR}" \
			BSD_INSTALL_SCRIPT_DIR="${INSTALL_SCRIPT_DIR}" \
			BSD_INSTALL_DATA_DIR="${INSTALL_DATA_DIR}" \
			BSD_INSTALL_MAN_DIR="${INSTALL_MAN_DIR}"
MAKE_ENV+=	${INSTALL_MACROS}
SCRIPTS_ENV+=	${INSTALL_MACROS}

# The user can override the NO_PACKAGE by specifying this from
# the make command line
.if defined(FORCE_PACKAGE)
.undef NO_PACKAGE
.endif

# Support architecture dependent packing lists
#
COMMENT?=	${PKGDIR}/COMMENT
DESCR?=		${PKGDIR}/DESCR
.if exists(${PKGDIR}/PLIST.${ARCH})
PLIST?=		${PKGDIR}/PLIST.${ARCH}
.else
.if defined(NO_SHARED_LIBS) && exists(${PKGDIR}/PLIST.noshared)
PLIST?=		${PKGDIR}/PLIST.noshared
.else
PLIST?=		${PKGDIR}/PLIST
.endif
.endif

PKG_CMD?=		/usr/sbin/pkg_create
PKG_DELETE?=	/usr/sbin/pkg_delete
SORT_DEPENDS?=tsort|tail +2|tail -r

.if !defined(PKG_ARGS)
PKG_ARGS=		-v -c ${COMMENT} -d ${DESCR} -f ${PLIST} -p ${PREFIX} -P "`${MAKE} package-depends|${SORT_DEPENDS}`"
.if exists(${PKGDIR}/INSTALL)
PKG_ARGS+=		-i ${PKGDIR}/INSTALL
.endif
.if exists(${PKGDIR}/DEINSTALL)
PKG_ARGS+=		-k ${PKGDIR}/DEINSTALL
.endif
.if exists(${PKGDIR}/REQ)
PKG_ARGS+=		-r ${PKGDIR}/REQ
.endif
.if exists(${PKGDIR}/MESSAGE)
PKG_ARGS+=		-D ${PKGDIR}/MESSAGE
.endif
.if !defined(NO_MTREE)
PKG_ARGS+=		-m ${MTREE_FILE}
.endif
.endif
PKG_SUFX?=		.tgz
# where pkg_add records its dirty deeds.
PKG_DBDIR?=		/var/db/pkg

# shared/dynamic motif libs
.if defined(USE_MOTIF) || defined(HAVE_MOTIF)
.if defined(MOTIF_STATIC)
MOTIFLIB?=	${X11BASE}/lib/libXm.a
.else
MOTIFLIB?=	-L${X11BASE}/lib -lXm
.endif
.endif

AWK?=		/usr/bin/awk
BASENAME?=	/usr/bin/basename
CAT?=		/bin/cat
CP?=		/bin/cp
DIRNAME?=	/usr/bin/dirname
ECHO?=		/bin/echo
EXPR?=		/bin/expr
FALSE?=		/usr/bin/false
FILE?=		/usr/bin/file
GREP?=		/usr/bin/grep
GUNZIP_CMD?=	/usr/bin/gunzip -f
GZCAT?=		/usr/bin/gzcat
GZIP?=		-9
GZIP_CMD?=	/usr/bin/gzip -nf ${GZIP}
LDCONFIG?=	[ ! -x /sbin/ldconfig ] || /sbin/ldconfig
LN?=		/bin/ln
M4?=		/usr/bin/m4
MKDIR?=		/bin/mkdir -p
MV?=		/bin/mv
READLINK?=	/usr/bin/readlink
RM?=		/bin/rm
RMDIR?=		/bin/rmdir
SED?=		/usr/bin/sed
FIND?=      /usr/bin/find

# XXX ${SETENV} is needed in front of var=value lists whenever the next
# command is expanded from a variable, as this could be a shell construct
SETENV?=	/usr/bin/env
SH?=		/bin/sh
TR?=		/usr/bin/tr
TRUE?=		/usr/bin/true

# Used to print all the '===>' style prompts - override this to turn them off.
ECHO_MSG?=		${ECHO}

# How to do nothing.  Override if you, for some strange reason, would rather
# do something.
DO_NADA?=		${TRUE}

ALL_TARGET?=		all
INSTALL_TARGET?=	install

.if defined(USE_IMAKE) && !defined(NO_INSTALL_MANPAGES)
INSTALL_TARGET+=	install.man
.endif

# Popular master sites
MASTER_SITE_XCONTRIB+=	\
	ftp://crl.dec.com/pub/X11/contrib/%SUBDIR%/ \
	ftp://ftp.eu.net/X11/contrib/%SUBDIR%/ \
	ftp://ftp.uni-paderborn.de/pub/X11/contrib/%SUBDIR%/ \
	ftp://ftp.x.org/contrib/%SUBDIR%/

MASTER_SITE_GNU+=	\
	ftp://prep.ai.mit.edu/pub/gnu/%SUBDIR%/ \
	ftp://wuarchive.wustl.edu/systems/gnu/%SUBDIR%/ \
	ftp://ftp.kddlabs.co.jp/pub/gnu/%SUBDIR%/ \
	ftp://ftp.digex.net/pub/gnu/%SUBDIR%/ \
	ftp://ftp.cs.ubc.ca/mirror2/gnu/%SUBDIR%/ \
	ftp://ftp.cdrom.com/pub/gnu/%SUBDIR%/ \
	ftp://ftp.duke.edu/pub/gnu/%SUBDIR%/ \
	ftp://ftp.gamma.ru/pub/gnu/%SUBDIR%/ \
	ftp://tron.um.u-tokyo.ac.jp/pub/GNU/prep/%SUBDIR%/

MASTER_SITE_PERL_CPAN+=	\
	ftp://ftp.digital.com/pub/plan/perl/CPAN/modules/by-module/%SUBDIR%/ \
	ftp://ftp.cdrom.com/pub/perl/CPAN/modules/by-module/%SUBDIR%/

MASTER_SITE_TEX_CTAN+=	\
	ftp://ftp.cdrom.com/pub/tex/ctan/%SUBDIR%/ \
	ftp://wuarchive.wustl.edu/packages/TeX/%SUBDIR%/ \
	ftp://ftp.funet.fi/pub/TeX/CTAN/%SUBDIR%/ \
	ftp://ftp.tex.ac.uk/public/ctan/tex-archive/%SUBDIR%/ \
	ftp://ftp.dante.de/tex-archive/%SUBDIR%/

MASTER_SITE_SUNSITE+=	\
	ftp://metalab.unc.edu/pub/Linux/%SUBDIR%/ \
	ftp://ftp.infomagic.com/pub/mirrors/linux/sunsite/%SUBDIR%/ \
	ftp://ftp.funet.fi/pub/mirrors/sunsite.unc.edu/pub/Linux/%SUBDIR%/ \
	ftp://ftp.lip6.fr/pub/linux/sunsite/%SUBDIR%

MASTER_SITE_KDE+=	\
	ftp://ftp.us.kde.org/pub/kde/%SUBDIR%/ \
	ftp://ftp.kde.org/pub/kde/%SUBDIR%/ \
	ftp://ftp.tuniv.szczecin.pl/pub/kde/%SUBDIR%/ \
	ftp://ftp.fu-berlin.de/pub/unix/X11/gui/kde/%SUBDIR%/ \
	ftp://ftp.dataplus.se/pub/linux/kde/%SUBDIR%/

MASTER_SITE_GNOME+=	\
	ftp://ftp.jimpick.com/pub/mirrors/gnome/%SUBDIR%/ \
	ftp://ftp.geo.net/pub/gnome/%SUBDIR%/ \
	ftp://gnomeftp.wgn.net/pub/gnome/%SUBDIR%/ \
	ftp://ftp.gnome.org/pub/GNOME/%SUBDIR%/

MASTER_SITE_AFTERSTEP+=	\
	ftp://ftp.afterstep.org/%SUBDIR%/ \
	ftp://ftp.digex.net/pub/os/wm/AfterStep/%SUBDIR%/ \
	ftp://ftp.alpha1.net/pub/mirrors/ftp.afterstep.org/%SUBDIR%/ \
	ftp://ftp.math.uni-bonn.de/pub/mirror/ftp.afterstep.org/%SUBDIR%/ \
	ftp://ftp.bse.bg/pub/Unix/X11/wm/afterstep/%SUBDIR%/ \
	ftp://ftp.dti.ad.jp/pub/X/AfterStep/%SUBDIR%/ \
	ftp://ftp.lbi.ro/mirrors/ftp.afterstep.org/pub/%SUBDIR%/ \
	ftp://casper.yz.yamagata-u.ac.jp/pub/X11/apps/afterstep/%SUBDIR%/

MASTER_SITE_WINDOWMAKER+= \
	ftp://ftp.windowmaker.org/pub/%SUBDIR%/ \
	ftp://ftp.goldweb.com.au/pub/WindowMaker/%SUBDIR%/ \
	ftp://ftp.io.com/pub/mirror/windowmaker/%SUBDIR%/ \
	ftp://ftp.ensm-ales.fr/pub/mirrors/ftp.windowmaker.org/%SUBDIR%/ \
	ftp://ftp.freenews.de/pub/windowmaker/%SUBDIR%/ \
	http://jgo.local.net/cool_downloads/wm/%SUBDIR%/ \
	ftp://ftp.cybertrails.com/pub/windowmaker/%SUBDIR%/ \
	ftp://ftp.ameth.org/pub/mirrors/ftp.windowmaker.org/%SUBDIR%/

MASTER_SITE_TCLTK+= \
	ftp://ftp.scriptics.com/pub/tcl/%SUBDIR%/ \
	ftp://mirror.neosoft.com/pub/tcl/mirror/ftp.scriptics.com/%SUBDIR%/ \
	ftp://sunsite.utk.edu/pub/tcl/%SUBDIR%/ \
	ftp://ftp.funet.fi/pub/languages/tcl/tcl/%SUBDIR%/ \
	ftp://ftp.cs.tu-berlin.de/pub/tcl/distrib/%SUBDIR%/ \
	ftp://ftp.srcc.msu.su/mirror/ftp.scriptics.com/pub/tcl/%SUBDIR%/ \
	ftp://ftp.lip6.fr/pub/tcl/distrib/%SUBDIR%/

# Empty declaration to avoid "variable MASTER_SITES recursive" error
MASTER_SITES?=
PATCH_SITES?=

# Substitute subdirectory names
_MASTER_SITES:=	${MASTER_SITES:S/%SUBDIR%/${MASTER_SITE_SUBDIR}/}
PATCH_SITES:=	${PATCH_SITES:S/%SUBDIR%/${PATCH_SITE_SUBDIR}/}
MASTER_SITES:= ${_MASTER_SITES}

# Two backup master sites, First one at ftp.openbsd.org
#
_MASTER_SITE_OPENBSD?=	\
	ftp://ftp.openbsd.org/pub/OpenBSD/distfiles/${DIST_SUBDIR}/ \
	ftp://ftp.openbsd.org/pub/OpenBSD/licensed/${DIST_SUBDIR}/

# set the backup master sites.
#
MASTER_SITE_BACKUP?=	\
	${_MASTER_SITE_OPENBSD} \
	ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/

# If the user has this set, go to the OpenBSD repository for everything.
#
.if defined(MASTER_SITE_OPENBSD)
MASTER_SITE_OVERRIDE=  ${_MASTER_SITE_OPENBSD}
.endif

# Where to put distfiles that don't have any other master site
# ;;; This is referenced in a few Makefiles -- I'd like to get rid of it
#
MASTER_SITE_LOCAL?= \
	ftp://ftp.netbsd.org/pub/NetBSD/packages/distfiles/LOCAL_PORTS/ \
	ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/LOCAL_PORTS/

# I guess we're in the master distribution business! :)  As we gain mirror
# sites for distfiles, add them to this list.
.if !defined(MASTER_SITE_OVERRIDE)
MASTER_SITES+=	${MASTER_SITE_BACKUP}
PATCH_SITES+=	${MASTER_SITE_BACKUP}
.else
MASTER_SITES:=	${MASTER_SITE_OVERRIDE} ${MASTER_SITES}
PATCH_SITES:=	${MASTER_SITE_OVERRIDE} ${PATCH_SITES}
.endif

# OpenBSD code to handle ports distfiles on a CDROM.  The distfiles
# are located in /cdrom/distfiles/${DIST_SUBDIR}/ (assuming that the
# CDROM is mounted on /cdrom).
#
.if exists(/cdrom/distfiles)
CDROM_SITE:=	/cdrom/distfiles/${DIST_SUBDIR}
.if defined(FETCH_SYMLINK_DISTFILES)
CDROM_COPY:=	${LN}
CDROM_OPT=		-s
.else
CDROM_COPY:=	${CP}
CDROM_OPT=		-f
.endif
.endif

# Derived names so that they're easily overridable.
DISTFILES?=		${DISTNAME}${EXTRACT_SUFX}
PKGNAME?=		${DISTNAME}

.if make(makesum) || make(addsum) || defined(__FETCH_ALL)
.if defined(SUPDISTFILES)
 DISTFILES+=${SUPDISTFILES}
.endif
.if defined(SUPPATCHFILES)
 PATCHFILES+=${SUPPATCHFILES}
.endif
.endif
ALLFILES?=	${DISTFILES} ${PATCHFILES}

.if defined(IGNOREFILES)
CKSUMFILES!=	\
	for file in ${ALLFILES}; do \
		ignore=0; \
		for tmp in ${IGNOREFILES}; do \
			if [ "$$file" = "$$tmp" ]; then \
				ignore=1; \
			fi; \
		done; \
		if [ "$$ignore" = 0 ]; then \
			echo "$$file"; \
		else \
			echo ""; \
		fi; \
	done
.else
CKSUMFILES=		${ALLFILES}
.endif

# List of all files, with ${DIST_SUBDIR} in front.  Used for checksum.
.if defined(DIST_SUBDIR)
_CKSUMFILES?=	${CKSUMFILES:S/^/${DIST_SUBDIR}\//}
_IGNOREFILES?=	${IGNOREFILES:S/^/${DIST_SUBDIR}\//}
.else
_CKSUMFILES?=	${CKSUMFILES}
_IGNOREFILES?=	${IGNOREFILES}
.endif

# This is what is actually going to be extracted, and is overridable
#  by user.
EXTRACT_ONLY?=	${DISTFILES}

# Documentation
MAINTAINER?=	ports@@OpenBSD.ORG

.if !defined(CATEGORIES)
.BEGIN:
	@@${ECHO_MSG} "CATEGORIES is mandatory."
	@@${FALSE}
.endif

PKGREPOSITORYSUBDIR?=	All
PKGREPOSITORY?=		${PACKAGES}/${PKGREPOSITORYSUBDIR}
.if exists(${PACKAGES})
PKGFILE?=		${PKGREPOSITORY}/${PKGNAME}${PKG_SUFX}
.else
PKGFILE?=		${PKGNAME}${PKG_SUFX}
.endif

CONFIGURE_SCRIPT?=	configure
.if defined(SEPARATE_BUILD)
_CONFIGURE_SCRIPT=${WRKSRC}/${CONFIGURE_SCRIPT}
.else
_CONFIGURE_SCRIPT=./${CONFIGURE_SCRIPT}
.endif
CONFIGURE_ENV+=		PATH=${PORTPATH}

.if defined(GNU_CONFIGURE)
CONFIGURE_ARGS+=	--prefix=${PREFIX}
CONFIGURE_ARGS+=	--sysconfdir=${SYSCONFDIR}
HAS_CONFIGURE=		yes
.endif

.if defined(NO_SHARED_LIBS)
CONFIGURE_SHARED?=	--disable-shared
.else
CONFIGURE_SHARED?=	--enable-shared
.endif

# Passed to most of script invocations
SCRIPTS_ENV+= CURDIR=${.CURDIR} DISTDIR=${DISTDIR} \
          PATH=${PORTPATH} \
		  WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} WRKBUILD=${WRKBUILD} \
		  PATCHDIR=${PATCHDIR} SCRIPTDIR=${SCRIPTDIR} FILESDIR=${FILESDIR} \
		  PORTSDIR=${PORTSDIR} DEPENDS="${DEPENDS}" \
		  PREFIX=${PREFIX} LOCALBASE=${LOCALBASE} X11BASE=${X11BASE}

.if defined(BATCH)
SCRIPTS_ENV+=	BATCH=yes
.endif

MANPREFIX?=	${PREFIX}
CATPREFIX?=	${PREFIX}

.for sect in 1 2 3 4 5 6 7 8 9
MAN${sect}PREFIX?=	${MANPREFIX}
CAT${sect}PREFIX?=	${CATPREFIX}
.endfor
MANLPREFIX?=	${MANPREFIX}
MANNPREFIX?=	${MANPREFIX}
CATLPREFIX?=	${CATPREFIX}
CATNPREFIX?=	${CATPREFIX}

MANLANG?=	""	# english only by default

.for lang in ${MANLANG}

.for sect in 1 2 3 4 5 6 7 8 9
.if defined(MAN${sect})
_MANPAGES+=	${MAN${sect}:S%^%${MAN${sect}PREFIX}/man/${lang}/man${sect}/%}
.endif
.if defined(CAT${sect})
_CATPAGES+=	${CAT${sect}:S%^%${CAT${sect}PREFIX}/man/${lang}/cat${sect}/%}
.endif
.endfor

.if defined(MANL)
_MANPAGES+=	${MANL:S%^%${MANLPREFIX}/man/${lang}/manl/%}
.endif

.if defined(MANN)
_MANPAGES+=	${MANN:S%^%${MANNPREFIX}/man/${lang}/mann/%}
.endif

.if defined(CATL)
_CATPAGES+=	${CATL:S%^%${CATLPREFIX}/man/${lang}/catl/%}
.endif

.if defined(CATN)
_CATPAGES+=	${CATN:S%^%${CATNPREFIX}/man/${lang}/catn/%}
.endif

.endfor

.MAIN: all

################################################################
# Many ways to disable a port.
#
# If we're in BATCH mode and the port is interactive, or we're
# in interactive mode and the port is non-interactive, skip all
# the important targets.  The reason we have two modes is that
# one might want to leave a build in BATCH mode running
# overnight, then come back in the morning and do _only_ the
# interactive ones that required your intervention.
#
# Don't attempt to build ports that require Motif if you don't
# have Motif.
#
# Ignore ports that can't be resold if building for a CDROM.
#
# Don't build a port if it's restricted and we don't want to get
# into that.
#
# Don't build a port if it's broken.
#
# Don't build a port if it comes with the base system.
################################################################

.if !defined(NO_IGNORE)
.if (defined(IS_INTERACTIVE) && defined(BATCH))
IGNORE=	"is an interactive port"
.elif (!defined(IS_INTERACTIVE) && defined(INTERACTIVE))
IGNORE=	"is not an interactive port"
.elif (defined(REQUIRES_MOTIF) && !defined(HAVE_MOTIF))
IGNORE=	"requires Motif"
.elif (defined(MOTIF_ONLY) && !defined(REQUIRES_MOTIF))
IGNORE=	"does not require Motif"
.elif (defined(NO_CDROM) && defined(FOR_CDROM))
IGNORE=	"may not be placed on a CDROM: ${NO_CDROM}"
.elif (defined(RESTRICTED) && defined(NO_RESTRICTED))
IGNORE=	"is restricted: ${RESTRICTED}"
.elif ((defined(USE_IMAKE) || defined(USE_X11)) && !exists(${X11BASE}))
IGNORE=	"uses X11, but ${X11BASE} not found"
.elif defined(BROKEN)
IGNORE=	"is marked as broken: ${BROKEN}"
.elif defined(ONLY_FOR_ARCHS)
.for __ARCH in ${ONLY_FOR_ARCHS}
.if (${MACHINE_ARCH} == "${__ARCH}") || (${ARCH} == "${__ARCH}")
__ARCH_OK=	1
.endif
.endfor
.if !defined(__ARCH_OK)
.if ${MACHINE_ARCH} == "${ARCH}"
IGNORE= "is only for ${ONLY_FOR_ARCHS}, not ${MACHINE_ARCH}"
.else
IGNORE= "is only for ${ONLY_FOR_ARCHS}, not ${MACHINE_ARCH} \(${ARCH}\)"
.endif
.endif
.elif defined(COMES_WITH)
.if ( ${OPSYS_VER} >= ${COMES_WITH} )
IGNORE= "-- ${PKGNAME:C/-[0-9].*//g} comes with ${OPSYS} as of release ${COMES_WITH}"
.endif
.endif

.if defined(IGNORE)
.if defined(IGNORE_SILENT)
IGNORECMD=	${DO_NADA}
.else
IGNORECMD=	${ECHO_MSG} "===>  ${PKGNAME} ${IGNORE}."
.endif
fetch:
	@@${IGNORECMD}
checksum:
	@@${IGNORECMD}
extract:
	@@${IGNORECMD}
patch:
	@@${IGNORECMD}
configure:
	@@${IGNORECMD}
all:
	@@${IGNORECMD}
build:
	@@${IGNORECMD}
install:
	@@${IGNORECMD}
uninstall deinstall:
	@@${IGNORECMD}
package:
	@@${IGNORECMD}
.endif # IGNORE
.endif # !NO_IGNORE

.if defined(ALL_HOOK)
all:
	@@cd ${.CURDIR} && ${SETENV} CURDIR=${.CURDIR} DISTNAME=${DISTNAME} \
	  DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} WRKBUILD=${WRKBUILD}\
	  PATCHDIR=${PATCHDIR} SCRIPTDIR=${SCRIPTDIR} \
	  FILESDIR=${FILESDIR} PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} \
	  DEPENDS="${DEPENDS}" BUILD_DEPENDS="${BUILD_DEPENDS}" \
	  RUN_DEPENDS="${RUN_DEPENDS}" X11BASE=${X11BASE} \
	${ALL_HOOK}
.endif

.if !target(all)
all: build
.endif

.if !defined(DEPENDS_TARGET)
.if make(reinstall)
DEPENDS_TARGET=	reinstall
.else
DEPENDS_TARGET=	install
.endif
.endif

################################################################
# The following are used to create easy dummy targets for
# disabling some bit of default target behavior you don't want.
# They still check to see if the target exists, and if so don't
# do anything, since you might want to set this globally for a
# group of ports in a Makefile.inc, but still be able to
# override from an individual Makefile.
################################################################

# Disable checksum
.if defined(NO_CHECKSUM) 
.for _TARGET in makesum addsum
.if !target(${_TARGET})
${_TARGET}: fetch-all
	@@${DO_NADA}
.endif
.endfor
.if !target(checksum)
checksum: fetch
	@@${DO_NADA}
.endif
.endif

# Disable extract
.if defined(NO_EXTRACT) && !target(extract)
extract: 
	@@${TOUCH} ${TOUCH_FLAGS} ${EXTRACT_COOKIE}
checksum: fetch 
	@@${DO_NADA}
makesum addsum: fetch-all
	@@${DO_NADA}
.endif

# Disable patch
.if defined(NO_PATCH) && !target(patch)
patch: extract
	@@${TOUCH} ${TOUCH_FLAGS} ${PATCH_COOKIE}
.endif

# Disable configure
.if defined(NO_CONFIGURE) && !target(configure)
configure: patch
	@@${TOUCH} ${TOUCH_FLAGS} ${CONFIGURE_COOKIE}
.endif

# Disable build
.if defined(NO_BUILD) && !target(build)
build: configure
	@@${TOUCH} ${TOUCH_FLAGS} ${BUILD_COOKIE}
.endif

# Disable install
.if defined(NO_INSTALL) && !target(install)
install: build
	@@${TOUCH} ${TOUCH_FLAGS} ${INSTALL_COOKIE}
.endif

# Disable package
.if defined(NO_PACKAGE) && !target(package)
package:
.if defined(IGNORE_SILENT)
	@@${DO_NADA}
.else
	@@${ECHO_MSG} "===>  ${PKGNAME} may not be packaged: ${NO_PACKAGE}."
.endif
.endif

# Disable describe
.if defined(NO_DESCRIBE) && !target(describe)
describe:
	@@${DO_NADA}
.endif

################################################################
# More standard targets start here.
#
# These are the body of the build/install framework.  If you are
# not happy with the default actions, and you can't solve it by
# adding pre-* or post-* targets/scripts, override these.
################################################################

# Fetch

.if !target(do-fetch)
do-fetch:
	@@${MKDIR} ${_DISTDIR}
	@@(cd ${_DISTDIR}; \
	 for file in ${DISTFILES}; do \
		if [ ! -f $$file -a ! -f `${BASENAME} $$file` ]; then \
			if [ -h $$file -o -h `${BASENAME} $$file` ]; then \
				${ECHO_MSG} ">> ${_DISTDIR}/$$file is a broken symlink."; \
				${ECHO_MSG} ">> Perhaps a filesystem (most likely a CD) isn't mounted?"; \
				${ECHO_MSG} ">> Please correct this problem and try again."; \
				exit 1; \
			fi ; \
			if [ ! -z ${CDROM_COPY} ]; then \
				if ${CDROM_COPY} ${CDROM_OPT} ${CDROM_SITE}/$$file .; then \
					continue; \
				fi ; \
			fi ; \
			${ECHO_MSG} ">> $$file doesn't seem to exist on this system."; \
			if [ ! -w ${_DISTDIR}/. ]; then \
				${ECHO_MSG} ">> Can't download to ${_DISTDIR} (permission denied?)."; \
				exit 1; \
			fi; \
			for site in ${MASTER_SITES}; do \
			    ${ECHO_MSG} ">> Attempting to fetch from $${site}."; \
				if ${FETCH_CMD} ${FETCH_BEFORE_ARGS} $${site}$${file} ${FETCH_AFTER_ARGS}; then \
					continue 2; \
				fi \
			done; \
			${ECHO_MSG} ">> Couldn't fetch it - please try to retrieve this";\
			${ECHO_MSG} ">> port manually into ${_DISTDIR} and try again."; \
			exit 1; \
	    fi \
	 done)
.if defined(PATCHFILES)
	@@(cd ${_DISTDIR}; \
	 for file in ${PATCHFILES}; do \
		if [ ! -f $$file -a ! -f `${BASENAME} $$file` ]; then \
			if [ -h $$file -o -h `${BASENAME} $$file` ]; then \
				${ECHO_MSG} ">> ${_DISTDIR}/$$file is a broken symlink."; \
				${ECHO_MSG} ">> Perhaps a filesystem (most likely a CD) isn't mounted?"; \
				${ECHO_MSG} ">> Please correct this problem and try again."; \
				exit 1; \
			fi ; \
			${ECHO_MSG} ">> $$file doesn't seem to exist on this system."; \
			for site in ${PATCH_SITES}; do \
			    ${ECHO_MSG} ">> Attempting to fetch from $${site}."; \
				if ${FETCH_CMD} ${FETCH_BEFORE_ARGS} $${site}$${file} ${FETCH_AFTER_ARGS}; then \
					continue 2; \
				fi \
			done; \
			${ECHO_MSG} ">> Couldn't fetch it - please try to retrieve this";\
			${ECHO_MSG} ">> port manually into ${_DISTDIR} and try again."; \
			exit 1; \
	    fi \
	 done)
.endif
.endif

# This is for the use of sites which store distfiles which others may
# fetch - only fetch the distfile if it is allowed to be
# re-distributed freely
mirror-distfiles:
.if (${MIRROR_DISTFILE} == "yes")
	@@make fetch-all __ARCH_OK=yes NO_IGNORE=yes NO_WARNINGS=yes
.endif

# list the distribution and patch files used by a port.  Typical
# use is		make ECHO_MSG=: list-distfiles | tee some-file
#
list-distfiles:
	@@echo "${PKGNAME}"
	@@for file in ${DISTFILES} ${PATCHFILES}; do \
		if [ "$$file" != "${EXTRACT_SUFX}" ]; then \
			if [ -z "${DIST_SUBDIR}" ]; then \
				printf "\t$$file\n"; \
			else \
				printf "\t${DIST_SUBDIR}/$$file\n"; \
			fi \
		fi \
	 done
	@@echo ""

# Obj
#
.if !target(obj)
obj:
.if !defined(NO_WRKDIR)
.if defined(WRKOBJDIR)
	@@${RM} -rf ${WRKOBJDIR}/${PORTSUBDIR}
	@@${MKDIR} -p ${WRKOBJDIR}/${PORTSUBDIR}
	@@if [ ! -L ${WRKDIR} ] || \
	  [ X`${READLINK} ${WRKDIR}` != X${WRKOBJDIR}/${PORTSUBDIR} ]; then \
		echo "${WRKDIR} -> ${WRKOBJDIR}/${PORTSUBDIR}"; \
		${RM} -f ${WRKDIR}; \
		${LN} -sf ${WRKOBJDIR}/${PORTSUBDIR} ${WRKDIR}; \
	fi
.else
	@@${ECHO_MSG} ">>"
	@@${ECHO_MSG} ">> Please set the WRKOBJDIR variable before using 'make obj'"
	@@${ECHO_MSG} ">>"
	@@exit 1;
.endif
.endif
.endif

# Extract

.if !target(do-extract)
do-extract:
.if !defined(NO_WRKDIR)
.if defined(WRKOBJDIR)
	@@${RM} -rf ${WRKOBJDIR}/${PORTSUBDIR}
	@@${MKDIR} -p ${WRKOBJDIR}/${PORTSUBDIR}
	@@if [ ! -L ${WRKDIR} ] || \
	  [ X`${READLINK} ${WRKDIR}` != X${WRKOBJDIR}/${PORTSUBDIR} ]; then \
		echo "${WRKDIR} -> ${WRKOBJDIR}/${PORTSUBDIR}"; \
		${RM} -f ${WRKDIR}; \
		${LN} -sf ${WRKOBJDIR}/${PORTSUBDIR} ${WRKDIR}; \
	fi
.else
	@@${RM} -rf ${WRKDIR}
	@@${MKDIR} ${WRKDIR}
.endif
.endif
	@@PATH=${PORTPATH}; \
	for file in ${EXTRACT_ONLY}; do \
		if ! (cd ${WRKDIR} && ${EXTRACT_CMD} ${EXTRACT_BEFORE_ARGS} ${_DISTDIR}/$$file ${EXTRACT_AFTER_ARGS});\
		then \
			exit 1; \
		fi \
	done
.endif

# Patch

.if !target(do-patch)
do-patch:
.if defined(PATCHFILES)
	@@${ECHO_MSG} "===>  Applying distribution patches for ${PKGNAME}"
	@@(cd ${_DISTDIR}; \
	  for i in ${PATCHFILES}; do \
		if [ ${PATCH_DEBUG_TMP} = yes ]; then \
			${ECHO_MSG} "===>   Applying distribution patch $$i" ; \
		fi; \
		case $$i in \
			*.Z|*.gz) \
				${GZCAT} $$i | ${PATCH} ${PATCH_DIST_ARGS}; \
				;; \
			*) \
				${PATCH} ${PATCH_DIST_ARGS} < $$i; \
				;; \
		esac; \
	  done)
.endif
	@@if [ -d ${PATCHDIR} ]; then \
		(cd ${PATCHDIR}; \
		for i in ${PATCH_LIST}; do \
			case $$i in \
				*.orig|*.rej|*~) \
					${ECHO_MSG} "===>   Ignoring patchfile $$i" ; \
					;; \
				*) \
				    if [ -e $$i ]; then \
						if [ ${PATCH_DEBUG_TMP} = yes ]; then \
							${ECHO_MSG} "===>   Applying ${OPSYS} patch $$i" ; \
						fi; \
						${PATCH} ${PATCH_ARGS} < $$i; \
					else \
						${ECHO_MSG} "===>   Can't find patch matching $$i"; \
						if [ -d ${PATCHDIR}/CVS -a "$$i" = \
							"${PATCHDIR}/patch-*" ]; then \
								${ECHO_MSG} "===>   Perhaps you forgot the -P flag to cvs co or update?"; \
						fi; \
					fi; \
					;; \
			esac; \
		done) \
	fi
.endif

# Configure

.if !target(do-configure)
do-configure: ${WRKBUILD}
.if defined(USE_AUTOCONF)
	@@cd ${AUTOCONF_DIR} && ${SETENV} ${AUTOCONF_ENV} ${AUTOCONF}
.endif
	@@if [ -f ${SCRIPTDIR}/configure ]; then \
		cd ${.CURDIR} && ${SETENV} ${SCRIPTS_ENV} ${SH} \
		  ${SCRIPTDIR}/configure; \
	fi
.if defined(HAS_CONFIGURE)
	@@(cd ${WRKBUILD} && CC="${CC}" ac_cv_path_CC="${CC}" CFLAGS="${CFLAGS}" \
		CXX="${CXX}" ac_cv_path_CXX="${CXX}" CXXFLAGS="${CXXFLAGS}" \
		INSTALL="/usr/bin/install -c -o ${BINOWN} -g ${BINGRP}" \
		INSTALL_PROGRAM="${INSTALL_PROGRAM}" INSTALL_MAN="${INSTALL_MAN}" \
		INSTALL_SCRIPT="${INSTALL_SCRIPT}" INSTALL_DATA="${INSTALL_DATA}" \
		${CONFIGURE_ENV} ${_CONFIGURE_SCRIPT} ${CONFIGURE_ARGS})
.endif
.if defined(USE_IMAKE)
	@@(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${XMKMF})
.endif
.endif

${WRKBUILD}:
	${MKDIR} ${WRKBUILD}

# Build

.if !target(do-build)
do-build:
	@@(cd ${WRKBUILD}; ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM} ${MAKE_FLAGS} ${MAKEFILE} ${ALL_TARGET})
.endif

# Install

.if !target(do-install)
do-install:
	@@(cd ${WRKBUILD} && ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM} ${MAKE_FLAGS} ${MAKEFILE} ${INSTALL_TARGET})
.endif

# Package

.if !target(do-package)
do-package:
	@@if [ -e ${PLIST} ]; then \
		${ECHO_MSG} "===>  Building package for ${PKGNAME}"; \
		if [ -d ${PACKAGES} ]; then \
			if [ ! -d ${PKGREPOSITORY} ]; then \
				if ! ${MKDIR} ${PKGREPOSITORY}; then \
					${ECHO_MSG} ">> Can't create directory ${PKGREPOSITORY}."; \
					exit 1; \
				fi; \
			fi; \
		fi; \
		if ${PKG_CMD} ${PKG_ARGS} ${PKGFILE}; then \
			if [ -d ${PACKAGES} ]; then \
				${MAKE} ${.MAKEFLAGS} package-links; \
			fi; \
		else \
			${MAKE} ${.MAKEFLAGS} delete-package; \
			exit 1; \
		fi; \
	fi
.endif

# Some support rules for do-package

.if !target(package-links)
package-links:
	@@${MAKE} ${.MAKEFLAGS} delete-package-links
	@@for cat in ${CATEGORIES}; do \
		if [ ! -d ${PACKAGES}/$$cat ]; then \
			if ! ${MKDIR} ${PACKAGES}/$$cat; then \
				${ECHO_MSG} ">> Can't create directory ${PACKAGES}/$$cat."; \
				exit 1; \
			fi; \
		fi; \
		ln -s ../${PKGREPOSITORYSUBDIR}/${PKGNAME}${PKG_SUFX} ${PACKAGES}/$$cat; \
	done;
.endif

.if !target(delete-package-links)
delete-package-links:
	@@${FIND} ${PACKAGES} -type l -name ${PKGNAME}${PKG_SUFX}|xargs ${RM} -f
.endif

.if !target(delete-package)
delete-package:
	@@${MAKE} ${.MAKEFLAGS} delete-package-links
	@@${RM} -f ${PKGFILE}
.endif

################################################################
# This is the "generic" port target, actually a macro used from the
# six main targets.  See below for more.
################################################################

_PORT_USE: .USE
.if make(real-fetch)
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} fetch-depends
.endif
.if make(real-extract)
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} build-depends lib-depends misc-depends
.endif
.if make(real-install)
.if !defined(NO_PKG_REGISTER) && !defined(FORCE_PKG_REGISTER)
	@@if [ -d ${PKG_DBDIR}/${PKGNAME} -o "X$$(ls -d ${PKG_DBDIR}/${PKGNAME:C/-[0-9].*//g}-* 2> /dev/null)" != "X" ]; then \
		${ECHO_MSG} "===>  ${PKGNAME} is already installed - perhaps an older version?"; \
		${ECHO_MSG} "      If so, you may wish to \`\`make deinstall'' and install"; \
		${ECHO_MSG} "      this port again by \`\`make reinstall'' to upgrade it properly."; \
		${ECHO_MSG} "      If you really wish to overwrite the old port of ${PKGNAME}"; \
		${ECHO_MSG} "      without deleting it first, set the variable \"FORCE_PKG_REGISTER\""; \
		${ECHO_MSG} "      in your environment or the \"make install\" command line."; \
		exit 1; \
	fi
.endif
	@@if [ `${SH} -c umask` != ${DEF_UMASK} ]; then \
		${ECHO_MSG} "===>  Warning: your umask is \"`${SH} -c umask`"\".; \
		${ECHO_MSG} "      If this is not desired, set it to an appropriate value"; \
		${ECHO_MSG} "      and install this port again by \`\`make reinstall''."; \
	fi
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} run-depends lib-depends
.endif
.if make(real-install)
	@@touch ${INSTALL_PRE_COOKIE}
.if !defined(NO_MTREE)
	@@if [ `id -u` = 0 ]; then \
		if [ ! -f ${MTREE_FILE} ]; then \
			${ECHO_MSG} "Error: mtree file \"${MTREE_FILE}\" is missing."; \
			${ECHO_MSG} "Copy it from a suitable location (e.g., /usr/src/etc/mtree) and try again."; \
			exit 1; \
		else \
			if [ ! -d ${PREFIX} ]; then \
				mkdir -p ${PREFIX}; \
			fi; \
			${MTREE_CMD} ${MTREE_ARGS} ${PREFIX}/; \
		fi; \
	else \
		${ECHO_MSG} "Warning: not superuser, can't run mtree."; \
		${ECHO_MSG} "Become root and try again to ensure correct permissions."; \
	fi
.endif
.endif
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} ${.TARGET:S/^real-/pre-/}
	@@if [ -f ${SCRIPTDIR}/${.TARGET:S/^real-/pre-/} ]; then \
		cd ${.CURDIR} && ${SETENV} ${SCRIPTS_ENV} ${SH} \
			${SCRIPTDIR}/${.TARGET:S/^real-/pre-/}; \
	fi
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} ${.TARGET:S/^real-/do-/}
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} ${.TARGET:S/^real-/post-/}
	@@if [ -f ${SCRIPTDIR}/${.TARGET:S/^real-/post-/} ]; then \
		cd ${.CURDIR} && ${SETENV} ${SCRIPTS_ENV} ${SH} \
			${SCRIPTDIR}/${.TARGET:S/^real-/post-/}; \
	fi
.if make(real-install) && (defined(_MANPAGES) || defined(_CATPAGES))
.if defined(MANCOMPRESSED) && defined(NOMANCOMPRESS)
	@@${ECHO_MSG} "===>   Uncompressing manual pages for ${PKGNAME}"
.for manpage in ${_MANPAGES} ${_CATPAGES}
	@@${GUNZIP_CMD} ${manpage}.gz
.endfor
.elif !defined(MANCOMPRESSED) && !defined(NOMANCOMPRESS)
	@@${ECHO_MSG} "===>   Compressing manual pages for ${PKGNAME}"
.for manpage in ${_MANPAGES} ${_CATPAGES}
	@@if [ -L ${manpage} ]; then \
		set - `${FILE} ${manpage}`; \
		shift `${EXPR} $$# - 1`; \
		${LN} -sf $${1}.gz ${manpage}.gz; \
		${RM} ${manpage}; \
	else \
		${GZIP_CMD} ${manpage}; \
	fi
.endfor
.endif
.endif
.if make(real-install) && exists(${PKGDIR}/MESSAGE)
	@@${CAT}	${PKGDIR}/MESSAGE
.endif
.if make(real-install) && !defined(NO_PKG_REGISTER)
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} fake-pkg
.endif
.if make(real-extract)
	@@${TOUCH} ${TOUCH_FLAGS} ${EXTRACT_COOKIE}
.endif
.if make(real-patch) && !defined(PATCH_CHECK_ONLY)
	@@${TOUCH} ${TOUCH_FLAGS} ${PATCH_COOKIE}
.endif
.if make(real-configure)
	@@${TOUCH} ${TOUCH_FLAGS} ${CONFIGURE_COOKIE}
.endif
.if make(real-install)
	@@${TOUCH} ${TOUCH_FLAGS} ${INSTALL_COOKIE}
.endif
.if make(real-build)
	@@${TOUCH} ${TOUCH_FLAGS} ${BUILD_COOKIE}
.endif
.if make(real-package) && !defined(PACKAGE_NOINSTALL)
	@@${TOUCH} ${TOUCH_FLAGS} ${PACKAGE_COOKIE}
.endif

################################################################
# Skeleton targets start here
# 
# You shouldn't have to change these.  Either add the pre-* or
# post-* targets/scripts or redefine the do-* targets.  These
# targets don't do anything other than checking for cookies and
# call the necessary targets/scripts.
################################################################

.if !target(fetch)
fetch:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} real-fetch
.endif
.if !target(fetch-all)
fetch-all:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} __FETCH_ALL=yes real-fetch
.endif


.if !target(extract)
extract: ${EXTRACT_COOKIE}
.endif

.if !target(patch)
patch: extract ${PATCH_COOKIE}
.endif

.if !target(configure)
configure: patch ${CONFIGURE_COOKIE}
.endif

.if !target(build)
build: configure ${BUILD_COOKIE}
.endif

.if !target(install)
install: build ${INSTALL_COOKIE}
.endif

.if !target(package)
package: install ${PACKAGE_COOKIE}
.endif

${EXTRACT_COOKIE}: 
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} checksum real-extract
${PATCH_COOKIE}:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} real-patch
${CONFIGURE_COOKIE}:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} real-configure
${BUILD_COOKIE}:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} real-build
${INSTALL_COOKIE}:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} real-install
${PACKAGE_COOKIE}:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} real-package

# And call the macros

real-fetch: _PORT_USE
real-extract: _PORT_USE
	@@${ECHO_MSG} "===>  Extracting for ${PKGNAME}"
real-patch: _PORT_USE
	@@${ECHO_MSG} "===>  Patching for ${PKGNAME}"
real-configure: _PORT_USE
	@@${ECHO_MSG} "===>  Configuring for ${PKGNAME}"
real-build: _PORT_USE
	@@${ECHO_MSG} "===>  Building for ${PKGNAME}"
real-install: _PORT_USE
	@@${ECHO_MSG} "===>  Installing for ${PKGNAME}"
real-package: _PORT_USE

# Empty pre-* and post-* targets, note we can't use .if !target()
# in the _PORT_USE macro

.for name in fetch extract patch configure build install package

.if !target(pre-${name})
pre-${name}:
	@@${DO_NADA}
.endif

.if !target(post-${name})
post-${name}:
	@@${DO_NADA}
.endif

.endfor

# Checkpatch
#
# Special target to verify patches

.if !target(checkpatch)
checkpatch:
	@@cd ${.CURDIR} && ${MAKE} PATCH_CHECK_ONLY=yes ${.MAKEFLAGS} patch
.endif

# Reinstall
#
# Special target to re-run install

.if !target(reinstall)
reinstall:
	@@${RM} -f ${INSTALL_PRE_COOKIE} ${INSTALL_COOKIE} ${PACKAGE_COOKIE}
	@@DEPENDS_TARGET=${DEPENDS_TARGET} ${MAKE} install
.endif

# Deinstall
#
# Special target to remove installation

.if !target(deinstall)
uninstall deinstall:
	@@${ECHO_MSG} "===> Deinstalling for ${PKGNAME}"
	@@${PKG_DELETE} -f ${PKGNAME}
	@@${RM} -f ${INSTALL_COOKIE} ${PACKAGE_COOKIE}
.endif


################################################################
# Some more targets supplied for users' convenience
################################################################

# Cleaning up

.if !target(pre-clean)
pre-clean:
	@@${DO_NADA}
.endif

.if !target(clean)
clean: pre-clean
.if !defined(NOCLEANDEPENDS)
	@@${MAKE} clean-depends
.endif
	@@${ECHO_MSG} "===>  Cleaning for ${PKGNAME}"
.if !defined(NO_WRKDIR)
.if  defined(WRKOBJDIR)
	@@${RM} -rf ${WRKOBJDIR}/${PORTSUBDIR}
	@@${RM} -f ${WRKDIR}
.else
	@@if [ -d ${WRKDIR} ]; then \
		if [ -w ${WRKDIR} ]; then \
			${RM} -rf ${WRKDIR}; \
		else \
			${ECHO_MSG} "===>   ${WRKDIR} not writable, skipping"; \
		fi; \
	fi
.endif
.else
	@@${RM} -f ${WRKDIR}/.*_started ${WRKDIR}/.*_done
.endif
.endif

.if !target(pre-distclean)
pre-distclean:
	@@${DO_NADA}
.endif

.if !target(distclean)
distclean: pre-distclean clean
	@@${ECHO_MSG} "===>  Dist cleaning for ${PKGNAME}"
	@@(if [ -d ${_DISTDIR} ]; then \
		cd ${_DISTDIR}; \
		${RM} -f ${DISTFILES} ${PATCHFILES}; \
	fi)
.if defined(DIST_SUBDIR)
	-@@${RMDIR} ${_DISTDIR}  
.endif
.endif

# Prints out a list of files to fetch (useful to do a batch fetch)

# are we called from bsd.port.subdir.mk (i.e. do we scan all dirs anyways)? XXX
.ifdef(DIRPRFX)
RECURSIVE_FETCH_LIST?=	NO
.else
RECURSIVE_FETCH_LIST?=	YES
.endif

.if !target(fetch-list)
fetch-list:
	@@${MAKE} fetch-list-recursive RECURSIVE_FETCH_LIST=${RECURSIVE_FETCH_LIST} | sort -u
.endif # !target(fetch-list)

.if !target(fetch-list-recursive)
fetch-list-recursive:
	@@${MAKE} fetch-list-one-pkg
.if ${RECURSIVE_FETCH_LIST} != "NO"
	@@for dir in `${ECHO} ${FETCH_DEPENDS} ${BUILD_DEPENDS} ${LIB_DEPENDS}  ${RUN_DEPENDS} | ${TR} '\040' '\012' | ${SED} -e 's/^[^:]*://' -e 's/:.*//' | sort -u` `${ECHO} ${DEPENDS} | ${TR} '\040' '\012' | ${SED} -e 's/:.*//' | sort -u`; do \
		(cd $$dir; ${MAKE} fetch-list-recursive; ); \
	done
.endif # ${RECURSIVE_FETCH_LIST} != "NO"
.endif # !target(fetch-list-recursive)

.if !target(fetch-list-one-pkg)
fetch-list-one-pkg:
	@@${MKDIR} ${_DISTDIR}
	@@[ -z "${_DISTDIR}" ] || ${ECHO} "${MKDIR} ${_DISTDIR}"
	@@(cd ${_DISTDIR}; \
	 for file in ${DISTFILES}; do \
		if [ ! -f $$file -a ! -f `${BASENAME} $$file` ]; then \
			${ECHO} -n "cd ${_DISTDIR} && [ -f $$file -o -f `${BASENAME} $$file` ] || " ; \
			for site in ${MASTER_SITES} ; do \
				${ECHO} -n ${FETCH_CMD} ${FETCH_BEFORE_ARGS} $${site}$${file} "${FETCH_AFTER_ARGS}" '|| ' ; \
			done; \
			${ECHO} "echo $${file} not fetched" ; \
		fi \
	done)
.if defined(PATCHFILES)
	@@(cd ${_DISTDIR}; \
	 for file in ${PATCHFILES}; do \
		if [ ! -f $$file -a ! -f `${BASENAME} $$file` ]; then \
			${ECHO} -n "cd ${_DISTDIR} && [ -f $$file -o -f `${BASENAME} $$file` ] || " ; \
			for site in ${PATCH_SITES}; do \
				${ECHO} -n ${FETCH_CMD} ${FETCH_BEFORE_ARGS} $${site}$${file} "${FETCH_AFTER_ARGS}" '|| ' ; \
			done; \
			${ECHO} "echo $${file} not fetched" ; \
		fi \
	done)
.endif # defined(PATCHFILES)
.endif # !target(fetch-list-one-pkg)

# Checksumming utilities

.if !target(makesum)
makesum: fetch-all
	@@${MKDIR} ${FILESDIR}
	@@if [ -f ${CHECKSUM_FILE} ]; then ${RM} -f ${CHECKSUM_FILE}; fi
	@@(cd ${DISTDIR}; \
	 for file in ${_CKSUMFILES}; do \
	 	for cipher in ${CIPHERS:R}; do \
			$$cipher $$file >> ${CHECKSUM_FILE}; \
		done; \
	 done)
	@@for file in ${_IGNOREFILES}; do \
		${ECHO} "MD5 ($$file) = IGNORE" >> ${CHECKSUM_FILE}; \
	done
	@@sort -u -o ${CHECKSUM_FILE} ${CHECKSUM_FILE} 
.endif

.if !target(addsum)
addsum: fetch-all
	@@${MKDIR} ${FILESDIR}
	@@touch ${CHECKSUM_FILE}
	@@(cd ${DISTDIR}; \
	 for file in ${_CKSUMFILES}; do \
	 	for cipher in ${CIPHERS:R}; do \
			$$cipher $$file >> ${CHECKSUM_FILE}; \
		done; \
	 done)
	@@for file in ${_IGNOREFILES}; do \
		${ECHO} "MD5 ($$file) = IGNORE" >> ${CHECKSUM_FILE}; \
	done
	@@sort -u -o ${CHECKSUM_FILE} ${CHECKSUM_FILE} 
	@@if [ `${SED} -e 's/\=.*$$//' ${CHECKSUM_FILE} | uniq -d | wc -l` -ne 0 ]; then \
		${ECHO} "Inconsistent checksum in ${CHECKSUM_FILE}"; \
		${FALSE}; \
	else \
		${ECHO} "${CHECKSUM_FILE} updated okay, don't forget to remove cruft"; \
	fi
.endif

.if !target(checksum)
checksum: fetch
	@@if [ ! -f ${CHECKSUM_FILE} ]; then \
		${ECHO_MSG} ">> No checksum file."; \
	else \
		(cd ${DISTDIR}; OK="true"; \
		  for file in ${_CKSUMFILES}; do \
			for cipher_sig in ${PREFERRED_CIPHERS}; do \
				sig=`${EXPR} $$cipher_sig : '.*\.\(.*\)'`; \
				CKSUM2=`${GREP} "^$$sig ($$file)" ${CHECKSUM_FILE} | ${AWK} '{print $$4}'`; \
				if [ "$$CKSUM2" = "" ]; then \
					${ECHO_MSG} ">> No $$sig checksum recorded for $$file."; \
				else \
					cipher=`${EXPR} $$cipher_sig : '\(.*\)\.'`; \
					break; \
				fi; \
			done; \
			if [ "$$CKSUM2" = "" ]; then \
				${ECHO_MSG} ">> No checksum recorded for $$file."; \
				OK="false"; \
			elif [ "$$CKSUM2" = "IGNORE" ]; then \
				${ECHO_MSG} ">> Checksum for $$file is set to IGNORE in md5 file even though"; \
				${ECHO_MSG} "   the file is not in the "'$$'"{IGNOREFILES} list."; \
				OK="false"; \
			else \
				CKSUM=`$$cipher < $$file`; \
				if [ "$$CKSUM" = "$$CKSUM2" ]; then \
					${ECHO_MSG} ">> Checksum OK for $$file. ($$sig)"; \
				else \
					${ECHO_MSG} ">> Checksum mismatch for $$file. ($$sig)"; \
					OK="false"; \
				fi; \
			fi; \
		  done; \
		  for file in ${_IGNOREFILES}; do \
			CKSUM2=`${GREP} "($$file)" ${CHECKSUM_FILE} | ${AWK} '{print $$4}'`; \
			if [ "$$CKSUM2" = "" ]; then \
				${ECHO_MSG} ">> No checksum recorded for $$file, file is in "'$$'"{IGNOREFILES} list."; \
				OK="false"; \
			elif [ "$$CKSUM2" != "IGNORE" ]; then \
				${ECHO_MSG} ">> Checksum for $$file is not set to IGNORE in md5 file even though"; \
				${ECHO_MSG} "   the file is in the "'$$'"{IGNOREFILES} list."; \
				OK="false"; \
			fi; \
		  done; \
		  if [ "$$OK" != "true" ]; then \
			${ECHO_MSG} "Make sure the Makefile and checksum file (${CHECKSUM_FILE})"; \
			${ECHO_MSG} "are up to date.  If you want to override this check, type"; \
			${ECHO_MSG} "\"make NO_CHECKSUM=yes [other args]\"."; \
			exit 1; \
		  fi) ; \
	fi
.endif

# packing list utilities.  This generates a packing list from a recently
# installed port.  Not perfect, but pretty close.  The generated file
# will have to have some tweaks done by hand.
# Note: add @@comment PACKAGE(arch=${ARCH}, opsys=${OPSYS}, vers=${OPSYS_VER})
# when port is installed or package created.
#
.if !target(plist)
plist: install
	@@${MKDIR} ${PKGDIR}
	@@(dirs=""; \
	  ld=""; \
	  for f in `${FIND} ${PREFIX} -newer ${INSTALL_PRE_COOKIE} -print 2> /dev/null`; do \
	   ff=`${ECHO} $$f | ${SED} -e 's|^${PREFIX}/||'`; \
	   if [ -d $$f -a ! -h $$f ]; then dirs="$$ff $$dirs"; \
	   else \
	    ${ECHO} $$ff; \
	    if ${ECHO} $$f | ${GREP} -E -q -e '[^/]+\.so\.[0-9]+\.[0-9]+$$'; then \
	     ld="$$LDCONFIG `${DIRNAME} $$f`"; \
	    fi; \
	   fi; \
	  done; \
	  for f in $$dirs; do \
       if ${GREP} -q -e `${BASENAME} $$f` ${MTREE_FILE}; then \
        :; \
       else \
        ${ECHO} "@@dirrm $$f"; \
       fi; \
      done; \
	  for f in $$ld; do ${ECHO} "@@exec ${LDCONFIG} -m $$f"; done; \
	) > ${PLIST}-auto
.endif

################################################################
# The special package-building targets
# You probably won't need to touch these
################################################################


# The README.html target needs full information (this is passed via 
# depends-list and package-depends)
.ifndef FULL_PACKAGE_NAME
FULL_PACKAGE_NAME=NO
.endif 


# Nobody should want to override this unless PKGNAME is simply bogus.

.if !target(package-name)
package-name:
.if (${FULL_PACKAGE_NAME} == "YES")
	@@${ECHO} `${MAKE} package-path`/${PKGNAME}
.else
	@@${ECHO} '${PKGNAME}'
.endif 
.endif 

.if !target(package-path)
package-path:
	@@pwd | sed s@@`cd ${PORTSDIR} ; pwd`/@@@@g
.endif

# Build (recursively) a list of package dependencies suitable for tsort

.if !target(package-depends)
package-depends:
	@@for dir in `${ECHO} ${LIB_DEPENDS} ${RUN_DEPENDS} | ${TR} '\040' '\012' | ${SED} -e 's/^[^:]*://' -e 's/:.*//' | sort -u` `${ECHO} ${DEPENDS} | ${TR} '\040' '\012' | ${SED} -e 's/:.*//' | sort -u`; do \
		if [ -d $$dir ]; then \
			${MAKE} ECHO='${ECHO} -n' package-name FULL_PACKAGE_NAME=${FULL_PACKAGE_NAME}; \
			${ECHO} -n " "; \
			(cd $$dir ; ${MAKE} package-name package-depends FULL_PACKAGE_NAME=${FULL_PACKAGE_NAME}); \
		else \
			${ECHO_MSG} "Warning: \"$$dir\" non-existent -- @@pkgdep registration incomplete" >&2; \
		fi; \
	done
.endif

# Build a package but don't check the package cookie

.if !target(repackage)
repackage: pre-repackage package

pre-repackage:
	@@${RM} -f ${PACKAGE_COOKIE}
.endif

# Build a package but don't check the cookie for installation, also don't
# install package cookie

.if !target(package-noinstall)
package-noinstall:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} PACKAGE_NOINSTALL=yes real-package
.endif

################################################################
# Dependency checking
################################################################

.if !target(depends)
depends: lib-depends misc-depends
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} fetch-depends
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} build-depends
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} run-depends

.if make(fetch-depends)
DEPENDS_TMP+=	${FETCH_DEPENDS}
.endif

.if make(build-depends)
DEPENDS_TMP+=	${BUILD_DEPENDS}
.endif

.if make(run-depends)
DEPENDS_TMP+=	${RUN_DEPENDS}
.endif

_DEPENDS_USE:	.USE
.if defined(DEPENDS_TMP)
.if !defined(NO_DEPENDS)
	@@PATH=${PORTPATH}; \
	for i in ${DEPENDS_TMP}; do \
		prog=`${ECHO} $$i | ${SED} -e 's/:.*//'`; \
		dir=`${ECHO} $$i | ${SED} -e 's/[^:]*://'`; \
		if ${EXPR} "$$dir" : '.*:' > /dev/null; then \
			target=`${ECHO} $$dir | ${SED} -e 's/.*://'`; \
			dir=`${ECHO} $$dir | ${SED} -e 's/:.*//'`; \
		else \
			target=${DEPENDS_TARGET}; \
		fi; \
		found=not; \
		if ${EXPR} "$$prog" : \\/ >/dev/null; then \
			if [ -e "$$prog" ]; then \
				${ECHO_MSG} "===>  ${PKGNAME} depends on file: $$prog - found"; \
				found=""; \
			else \
				${ECHO_MSG} "===>  ${PKGNAME} depends on file: $$prog - not found"; \
			fi; \
		else \
			for d in `echo $$PATH | tr ':' ' '`; do \
				if [ -x $$d/$$prog ]; then \
					found="$$d/$$prog"; \
					break; \
				fi \
			done; \
			${ECHO_MSG} "===>  ${PKGNAME} depends on executable: $$prog - $$found found"; \
		fi; \
		if [ X"$$found" = Xnot ]; then \
			${ECHO_MSG} "===>  Verifying $$target for $$prog in $$dir"; \
			if [ ! -d "$$dir" ]; then \
				${ECHO_MSG} ">> No directory for $$prog.  Skipping.."; \
			else \
				(cd $$dir; ${MAKE} ${.MAKEFLAGS} $$target) ; \
				${ECHO_MSG} "===>  Returning to build of ${PKGNAME}"; \
			fi; \
		fi; \
	done
.endif
.else
	@@${DO_NADA}
.endif

fetch-depends:	_DEPENDS_USE
build-depends:	_DEPENDS_USE
run-depends:	_DEPENDS_USE

lib-depends:
.if defined(LIB_DEPENDS)
.if !defined(NO_DEPENDS)
.if defined(NO_SHARED_LIBS)
	@@for i in ${LIB_DEPENDS}; do \
		lib=`${ECHO} $$i | ${SED} -e 's/:.*//' -e 's|\([^\\]\)[\\\.].*|\1|'`; \
		dir=`${ECHO} $$i | ${SED} -e 's/[^:]*://'`; \
		if ${EXPR} "$$dir" : '.*:' > /dev/null; then \
			target=`${ECHO} $$dir | ${SED} -e 's/.*://'`; \
			dir=`${ECHO} $$dir | ${SED} -e 's/:.*//'`; \
		else \
			target=${DEPENDS_TARGET}; \
		fi; \
		tmp=`mktemp /tmp/bpmXXXXXXXXXX`; \
		if ${LD} -r -o $$tmp -L${LOCALBASE}/lib -L${X11BASE}/lib -l$$lib; then \
			${ECHO_MSG} "===>  ${PKGNAME} depends on library: $$lib - found"; \
		else \
			${ECHO_MSG} "===>  ${PKGNAME} depends on library: $$lib - not found"; \
			${ECHO_MSG} "===>  Verifying $$target for $$lib in $$dir"; \
			if [ ! -d "$$dir" ]; then \
				${ECHO_MSG} ">> No directory for $$lib.  Skipping.."; \
			else \
				(cd $$dir; ${MAKE} ${.MAKEFLAGS} $$target) ; \
				${ECHO_MSG} "===>  Returning to build of ${PKGNAME}"; \
			fi; \
		fi; \
		${RM} -f $$tmp; \
	done
.else
	@@for i in ${LIB_DEPENDS}; do \
		lib=`${ECHO} $$i | ${SED} -e 's/:.*//' -e 's|\([^\\]\)\.|\1\\\\.|g'`; \
		dir=`${ECHO} $$i | ${SED} -e 's/[^:]*://'`; \
		if ${EXPR} "$$dir" : '.*:' > /dev/null; then \
			target=`${ECHO} $$dir | ${SED} -e 's/.*://'`; \
			dir=`${ECHO} $$dir | ${SED} -e 's/:.*//'`; \
		else \
			target=${DEPENDS_TARGET}; \
		fi; \
		libname=`${ECHO} $$lib | ${SED} -e 's|\\\\||g'`; \
		reallib=`${LDCONFIG} -r | ${GREP} -e "-l$$lib" | awk '{ print $$3 }'`; \
		if [ "X$$reallib" = X"" ]; then \
			${ECHO_MSG} "===>  ${PKGNAME} depends on shared library: $$libname - not found"; \
			${ECHO_MSG} "===>  Verifying $$target for $$libname in $$dir"; \
			if [ ! -d "$$dir" ]; then \
				${ECHO_MSG} ">> No directory for $$libname.  Skipping.."; \
			else \
				(cd $$dir; ${MAKE} ${.MAKEFLAGS} $$target) ; \
				${ECHO_MSG} "===>  Returning to build of ${PKGNAME}"; \
			fi; \
		else \
			${ECHO_MSG} "===>  ${PKGNAME} depends on shared library: $$libname - $$reallib found"; \
		fi; \
	done
.endif
.endif
.else
	@@${DO_NADA}
.endif

misc-depends:
.if defined(DEPENDS)
.if !defined(NO_DEPENDS)
	@@for dir in ${DEPENDS}; do \
		if ${EXPR} "$$dir" : '.*:' > /dev/null; then \
			target=`${ECHO} $$dir | ${SED} -e 's/.*://'`; \
			dir=`${ECHO} $$dir | ${SED} -e 's/:.*//'`; \
		else \
			target=${DEPENDS_TARGET}; \
		fi; \
		${ECHO_MSG} "===>  ${PKGNAME} depends on: $$dir"; \
		${ECHO_MSG} "===>  Verifying $$target for $$dir"; \
		if [ ! -d $$dir ]; then \
			${ECHO_MSG} ">> No directory for $$dir.  Skipping.."; \
		else \
			(cd $$dir; ${MAKE} ${.MAKEFLAGS} $$target) ; \
		fi \
	done
	@@${ECHO_MSG} "===>  Returning to build of ${PKGNAME}"
.endif
.else
	@@${DO_NADA}
.endif

.endif

.if !target(clean-depends)
clean-depends:
.if defined(FETCH_DEPENDS) || defined(BUILD_DEPENDS) || defined(LIB_DEPENDS) \
	|| defined(RUN_DEPENDS)
	@@for dir in `${ECHO} ${FETCH_DEPENDS} ${BUILD_DEPENDS} ${LIB_DEPENDS} ${RUN_DEPENDS} | ${TR} '\040' '\012' | ${SED} -e 's/^[^:]*://' -e 's/:.*//' | sort -u`; do \
		if [ -d $$dir ] ; then \
			(cd $$dir; ${MAKE} NOCLEANDEPENDS=yes clean clean-depends); \
		fi \
	done
.endif
.if defined(DEPENDS)
	@@for dir in `${ECHO} ${DEPENDS} | ${TR} '\040' '\012' | ${SED} -e 's/:.*//' | sort -u`; do \
		if [ -d $$dir ] ; then \
			(cd $$dir; ${MAKE} NOCLEANDEPENDS=yes clean clean-depends); \
		fi \
	done
.endif
.endif

.if !target(depends-list)
depends-list:
	@@for dir in `${ECHO} ${FETCH_DEPENDS} ${BUILD_DEPENDS} ${LIB_DEPENDS} | ${TR} '\040' '\012' | ${SED} -e 's/^[^:]*://' -e 's/:.*//' | sort -u` `${ECHO} ${DEPENDS} | ${TR} '\040' '\012' | ${SED} -e 's/:.*//' | sort -u`; do \
		if [ -d $$dir ]; then \
			${MAKE} ECHO='${ECHO} -n' package-name FULL_PACKAGE_NAME=${FULL_PACKAGE_NAME}; \
			${ECHO} -n " "; \
			(cd $$dir ; ${MAKE} package-name depends-list FULL_PACKAGE_NAME=${FULL_PACKAGE_NAME}); \
		else \
			${ECHO_MSG} "Warning: \"$$dir\" non-existent" >&2; \
		fi; \
	done
.endif

################################################################
# Everything after here are internal targets and really
# shouldn't be touched by anybody but the release engineers.
################################################################

# This target generates an index entry suitable for aggregation into
# a large index.  Format is:
#
# distribution-name|port-path|installation-prefix|comment| \
#  description-file|maintainer|categories|build deps|run deps|for arch
#
.if !target(describe)
describe:
	@@${ECHO} -n "${PKGNAME}|${.CURDIR}|"; \
	${ECHO} -n "${PREFIX}|"; \
	if [ -f ${COMMENT} ]; then \
		${ECHO} -n "`${CAT} ${COMMENT}`"; \
	else \
		${ECHO} -n "** No Description"; \
	fi; \
	if [ -f ${DESCR} ]; then \
		${ECHO} -n "|${DESCR}"; \
	else \
		${ECHO} -n "|/dev/null"; \
	fi; \
	${ECHO} -n "|${MAINTAINER}|${CATEGORIES}|"; \
	case "A${FETCH_DEPENDS}B${BUILD_DEPENDS}C${LIB_DEPENDS}D${DEPENDS}E" in \
		ABCDE) ;; \
		*) cd ${.CURDIR} && ${ECHO} -n `make depends-list|${SORT_DEPENDS}`;; \
	esac; \
	${ECHO} -n "|"; \
	case "A${RUN_DEPENDS}B${LIB_DEPENDS}C${DEPENDS}D" in \
		ABCD) ;; \
		*) cd ${.CURDIR} && ${ECHO} -n `make package-depends|${SORT_DEPENDS}`;; \
	esac; \
	${ECHO} -n "|"; \
	if [ "${ONLY_FOR_ARCHS}" = "" ]; then \
		${ECHO} -n "any"; \
	else \
		${ECHO} -n "${ONLY_FOR_ARCHS}"; \
	fi; \
	${ECHO} ""
.endif

README_NAME?=	${TEMPLATES}/README.port

.if !target(readmes)
readmes:	readme
.endif

.if !target(readme)
readme:
	@@rm -f README.html
	@@cd ${.CURDIR} && make README_NAME=${README_NAME} README.html
.endif


HTMLIFY=	${SED} -e 's/&/\&amp;/g' -e 's/>/\&gt;/g' -e 's/</\&lt;/g'

.if make(README.html) || make(readme) || make(readmes)
PKGDEPTH!=${MAKE} package-path|${SED} -e 's|[^./][^/]*|..|g'
.endif

README.html:
	@@${ECHO_MSG} "===>  Creating README.html for ${PKGNAME}"
	@@${ECHO} ${PKGNAME} | ${HTMLIFY} > $@@.tmp3
	@@${MAKE} depends-list FULL_PACKAGE_NAME=YES | ${SORT_DEPENDS}>$@@.tmp1
	@@${MAKE} package-depends FULL_PACKAGE_NAME=YES | ${SORT_DEPENDS} >$@@.tmp2
.for I in 1 2
	@@if [ -s $@@.tmp$I ]; then \
		(${CAT} $@@.tmp$I | while read n; do \
			j=`dirname $$n|${HTMLIFY}`; k=`basename $$n|${HTMLIFY}`; \
			echo "<A HREF=\"${PKGDEPTH}/$$j/README.html\">$$k</A>"; \
		 done;) >$@@.tmp$Ia; \
    else \
    echo "(none)" > $@@.tmp$Ia; \
	fi
.endfor
	@@${CAT} ${README_NAME} | \
		${SED} -e 's|%%PORT%%|'"`${MAKE} package-path | ${HTMLIFY}`"'|g' \
			-e '/%%PKG%%/r$@@.tmp3' \
			-e '/%%PKG%%/d' \
			-e '/%%COMMENT%%/r${PKGDIR}/COMMENT' \
			-e '/%%COMMENT%%/d' \
			-e '/%%BUILD_DEPENDS%%/r$@@.tmp1a' \
			-e '/%%BUILD_DEPENDS%%/d' \
			-e '/%%RUN_DEPENDS%%/r$@@.tmp2a' \
			-e '/%%RUN_DEPENDS%%/d' \
		>> $@@
	@@rm -f $@@.tmp*

.if !target(print-depends-list)
print-depends-list:
.if defined(FETCH_DEPENDS) || defined(BUILD_DEPENDS) || \
	defined(LIB_DEPENDS) || defined(DEPENDS)
	@@${ECHO} -n 'This port requires package(s) "'
	@@${ECHO} -n `make FULL_PACKAGE_NAME=${FULL_PACKAGE_NAME} depends-list | ${SORT_DEPENDS}`
	@@${ECHO} '" to build.'
.endif
.endif

.if !target(print-package-depends)
print-package-depends:
.if defined(RUN_DEPENDS) || defined(LIB_DEPENDS) || defined(DEPENDS)
	@@${ECHO} -n 'This port requires package(s) "'
	@@${ECHO} -n `make FULL_PACKAGE_NAME=${FULL_PACKAGE_NAME} package-depends | ${SORT_DEPENDS}`
	@@${ECHO} '" to run.'
.endif
.endif

.if !target(print-depends)
print-depends: 
	@@${MAKE} FULL_PACKAGE_NAME=YES print-depends-list print-package-depends
.endif

# Fake installation of package so that user can pkg_delete it later.
# Also, make sure that an installed port is recognized correctly in
# accordance to the @@pkgdep directive in the packing lists

.if !target(fake-pkg)
fake-pkg:
	@@if [ ! -f ${PLIST} -o ! -f ${COMMENT} -o ! -f ${DESCR} ]; then ${ECHO} "** Missing package files for ${PKGNAME} - installation not recorded."; exit 1; fi
	@@if [ `/bin/ls -l ${COMMENT} | ${AWK} '{print $$5}'` -gt 60 ]; then \
	    ${ECHO} "** ${COMMENT} too large - installation not recorded."; \
	    exit 1; \
	 fi
	@@if [ ! -d ${PKG_DBDIR} ]; then ${RM} -f ${PKG_DBDIR}; ${MKDIR} ${PKG_DBDIR}; fi
.if defined(FORCE_PKG_REGISTER)
	@@${RM} -rf ${PKG_DBDIR}/${PKGNAME}
.endif
	@@if [ ! -d ${PKG_DBDIR}/${PKGNAME} ]; then \
		${ECHO_MSG} "===>  Registering installation for ${PKGNAME}"; \
		${MKDIR} ${PKG_DBDIR}/${PKGNAME}; \
		${PKG_CMD} ${PKG_ARGS} -O ${PKGFILE} > ${PKG_DBDIR}/${PKGNAME}/+CONTENTS; \
		${CP} ${DESCR} ${PKG_DBDIR}/${PKGNAME}/+DESC; \
		${CP} ${COMMENT} ${PKG_DBDIR}/${PKGNAME}/+COMMENT; \
		if [ -f ${PKGDIR}/INSTALL ]; then \
			${CP} ${PKGDIR}/INSTALL ${PKG_DBDIR}/${PKGNAME}/+INSTALL; \
		fi; \
		if [ -f ${PKGDIR}/DEINSTALL ]; then \
			${CP} ${PKGDIR}/DEINSTALL ${PKG_DBDIR}/${PKGNAME}/+DEINSTALL; \
		fi; \
		if [ -f ${PKGDIR}/REQ ]; then \
			${CP} ${PKGDIR}/REQ ${PKG_DBDIR}/${PKGNAME}/+REQ; \
		fi; \
		if [ -f ${PKGDIR}/MESSAGE ]; then \
			${CP} ${PKGDIR}/MESSAGE ${PKG_DBDIR}/${PKGNAME}/+DISPLAY; \
		fi; \
		for dep in `make package-depends ECHO_MSG=${TRUE} | ${SORT_DEPENDS}`; do \
			if [ -d ${PKG_DBDIR}/$$dep ]; then \
				if ! ${GREP} ^${PKGNAME}$$ ${PKG_DBDIR}/$$dep/+REQUIRED_BY \
					>/dev/null 2>&1; then \
					${ECHO} ${PKGNAME} >> ${PKG_DBDIR}/$$dep/+REQUIRED_BY; \
				fi; \
			fi; \
		done; \
	fi
.endif

# Depend is generally meaningless for arbitrary ports, but if someone wants
# one they can override this.  This is just to catch people who've gotten into
# the habit of typing `make depend all install' as a matter of course.
#
.if !target(depend)
depend:
.endif

# Same goes for tags
.if !target(tags)
tags:
.endif

.PHONY: \
   addsum all build build-depends checkpatch \
   checksum clean clean-depends configure deinstall \
   delete-package delete-package-links depend depends depends-list \
   describe distclean do-build do-configure do-extract \
   do-fetch do-install do-package do-patch extract list-distfiles \
   fake-pkg fetch fetch-depends fetch-list fetch-list-one-pkg \
   fetch-list-recursive install lib-depends makesum mirror-distfiles \
   misc-depends package package-depends package-links package-name \
   package-noinstall package-path patch plist post-build \
   post-configure post-extract post-fetch post-install post-package \
   post-patch pre-build pre-clean pre-configure pre-distclean \
   pre-extract pre-fetch pre-install pre-package pre-patch \
   pre-repackage print-depends-list print-package-depends readme \
   readmes real-extract real-fetch real-install reinstall \
   repackage run-depends tags uninstall fetch-all print-depends
@


1.91
log
@add USE_ZIP for distfiles that use zip (.zip) for its packaging instead of
tar and add USE_BZIP2 for distfiles that use bzip2 (.tar.bz2) for
compression instead of gzip.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.90 1999/05/10 21:35:25 brad Exp $
d30 1
a30 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.90 1999/05/10 21:35:25 brad Exp $$
d846 8
a853 1
	ftp://wuarchive.wustl.edu/systems/gnu/%SUBDIR%/
d884 29
@


1.90
log
@change email address of maintainer to ports-admin@@openbsd.org
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.89 1999/05/04 18:12:24 rohee Exp $
d30 1
a30 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.89 1999/05/04 18:12:24 rohee Exp $$
d183 4
a186 2
# USE_GMAKE		- Says that the port uses gmake.
# USE_LIBTOOL	- Says that the port uses libtool.
d190 1
a190 1
# USE_AUTOCONF	- Says that the port uses autoconf (implies GNU_CONFIGURE).
d192 5
a196 5
# USE_PERL5		- Says that the port uses perl5 for building and running.
# USE_IMAKE		- Says that the port uses imake.
# USE_X11		- Says that the port uses X11 (i.e., installs in ${X11BASE}).
# USE_EGCC		- Says that the port needs the egcs C compiler
# USE_EGXX		- Says that the port needs the egcs C++ compiler
d251 11
a261 8
# EXTRACT_CMD	- Command for extracting archive (default: tar).
# EXTRACT_SUFX	- Suffix for archive names (default: .tar.gz).
# EXTRACT_BEFORE_ARGS -
#				  Arguments to ${EXTRACT_CMD} before filename
#				  (default: -xzf).
# EXTRACT_AFTER_ARGS -
#				  Arguments to ${EXTRACT_CMD} following filename
#				  (default: none).
d631 1
a631 1
EXTRACT_CMD?=	/bin/tar
d633 1
a633 1
EXTRACT_CMD?=	/usr/bin/tar
d635 13
a647 1
# Backwards compatability.
d649 1
a649 1
EXTRACT_BEFORE_ARGS?=   ${EXTRACT_ARGS}
d651 13
a663 1
EXTRACT_BEFORE_ARGS?=   -xzf
a664 1
EXTRACT_SUFX?=	.tar.gz
d1395 2
a1396 1
	@@for file in ${EXTRACT_ONLY}; do \
@


1.89
log
@USE_LIBTOOL from NetBSD
@
text
@d3 3
a5 1
#	$OpenBSD: bsd.port.mk,v 1.88 1999/04/20 18:22:56 espie Exp $
a9 3
# FreeBSD Id: bsd.port.mk,v 1.264 1996/12/25 02:27:44 imp Exp
#	$NetBSD: bsd.port.mk,v 1.62 1998/04/09 12:47:02 hubertf Exp $
#
d25 1
a25 1
OpenBSD_MAINTAINER=	marc@@OpenBSD.ORG
d30 1
a30 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.88 1999/04/20 18:22:56 espie Exp $$
@


1.88
log
@IMPORTANT CHANGE:

depends-list and package-depends now give out output suitable for tsort,
so they are INCOMPATIBLE with the previous version.

PACKAGE_NAME_AS_LINK disappears, functionality is replaced by
FULL_PACKAGE_NAME, which makes more sense anyway.

*This does fix the package dependencies problem*

Still missing: mechanism to output a decent error message in case tsort
finds out a cycle.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.87 1999/04/20 18:09:37 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.87 1999/04/20 18:09:37 espie Exp $$
d185 1
d206 2
d494 6
@


1.87
log
@FIND as a known program
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.86 1999/04/20 18:06:40 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.86 1999/04/20 18:06:40 espie Exp $$
d371 1
d722 2
d725 1
a725 1
PKG_ARGS=		-v -c ${COMMENT} -d ${DESCR} -f ${PLIST} -p ${PREFIX} -P "`${MAKE} package-depends|sort -u`"
d911 1
a911 1
 .endif
a1967 1
HTMLIFY=	${SED} -e 's/&/\&amp;/g' -e 's/>/\&gt;/g' -e 's/</\&lt;/g'
d1969 5
a1973 5
# Set to YES by the README.html target (and passed via depends-list
# and package-depends)
.ifndef PACKAGE_NAME_AS_LINK
PACKAGE_NAME_AS_LINK=NO
.endif # PACKAGE_NAME_AS_LINK
d1980 2
a1981 2
.if (${PACKAGE_NAME_AS_LINK} == "YES")
	@@${ECHO} '<A HREF="../../'`${MAKE} package-path | ${HTMLIFY}`'/README.html">'`echo ${PKGNAME} | ${HTMLIFY}`'</A>'
d1984 2
a1985 2
.endif # PACKAGE_NAME_AS_LINK != ""
.endif # !target(package-name)
d1992 1
a1992 1
# Show (recursively) all the packages this package depends on.
d1998 3
a2000 1
			(cd $$dir ; ${MAKE} package-name package-depends PACKAGE_NAME_AS_LINK=${PACKAGE_NAME_AS_LINK}); \
d2202 7
a2208 1
		(cd $$dir; ${MAKE} package-name depends-list PACKAGE_NAME_AS_LINK=${PACKAGE_NAME_AS_LINK}; ); \
d2240 1
a2240 1
		*) cd ${.CURDIR} && ${ECHO} -n `make depends-list|sort -u`;; \
d2245 1
a2245 1
		*) cd ${.CURDIR} && ${ECHO} -n `make package-depends|sort -u`;; \
d2256 2
d2265 1
a2265 1
	@@cd ${.CURDIR} && make README.html
d2268 6
a2273 1
README_NAME=	${TEMPLATES}/README.port
d2277 13
a2289 5
	@@${MAKE} depends-list PACKAGE_NAME_AS_LINK=YES >> $@@.tmp1
	@@[ -s $@@.tmp1 ] || echo "(none)" >> $@@.tmp1
	@@${MAKE} package-depends PACKAGE_NAME_AS_LINK=YES >> $@@.tmp2
	@@[ -s $@@.tmp2 ] || echo "(none)" >> $@@.tmp2
	@@${ECHO} ${PKGNAME} | ${HTMLIFY} >> $@@.tmp3
d2296 1
a2296 1
			-e '/%%BUILD_DEPENDS%%/r$@@.tmp1' \
d2298 1
a2298 1
			-e '/%%RUN_DEPENDS%%/r$@@.tmp2' \
d2301 1
a2301 1
	@@rm -f $@@.tmp1 $@@.tmp2 $@@.tmp3
d2308 1
a2308 1
	@@${ECHO} -n `make depends-list | sort -u`
d2317 1
a2317 1
	@@${ECHO} -n `make package-depends | sort -u`
d2322 5
d2360 1
a2360 1
		for dep in `make package-depends ECHO_MSG=${TRUE} | sort -u`; do \
d2399 1
a2399 1
   repackage run-depends tags uninstall fetch-all
@


1.86
log
@remove weird restriction on package repository name, and make delete-links
safer.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.85 1999/04/20 18:04:27 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.85 1999/04/20 18:04:27 espie Exp $$
d775 1
d1495 1
a1495 1
	@@find ${PACKAGES} -type l -name ${PKGNAME}${PKG_SUFX}|xargs ${RM} -f
d1939 1
a1939 1
	  for f in `find ${PREFIX} -newer ${INSTALL_PRE_COOKIE} -print 2> /dev/null`; do \
@


1.85
log
@Add SUPDISTFILES/SUPPATCHFILES functionality:
files that are not always needed for all builds, but that must be fetched
for maintainance purposes (makesum, mirror...)

Not to use for intl/usa programs, probably...
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.84 1999/04/10 07:48:53 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.84 1999/04/10 07:48:53 marc Exp $$
a951 2
# Note this has to start with a capital letter (or more accurately, it
#  shouldn't match "[a-z]*"), see the target "delete-package-links" below.
d1494 1
a1494 1
	@@${RM} -f ${PACKAGES}/[a-z]*/${PKGNAME}${PKG_SUFX};
@


1.84
log
@shit: egcs-stable is in LANG, not DEVEL
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.83 1999/04/06 19:14:41 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.83 1999/04/06 19:14:41 marc Exp $$
d122 2
d129 2
d901 8
d1161 1
a1161 1
.for _TARGET in checksum makesum addsum
d1163 1
a1163 1
${_TARGET}: fetch
d1167 4
d1177 3
a1179 1
checksum makesum addsum: fetch
d1296 1
a1296 1
	@@make fetch __ARCH_OK=yes NO_IGNORE=yes NO_WARNINGS=yes
d1625 5
d1838 1
a1838 1
makesum: fetch
d1850 1
d1854 1
a1854 1
addsum: fetch
d1866 1
a1866 2
	@@sort -u ${CHECKSUM_FILE} >${CHECKSUM_FILE}.new
	@@${MV} -f ${CHECKSUM_FILE}.new ${CHECKSUM_FILE}
d2370 1
a2370 1
   repackage run-depends tags uninstall
@


1.83
log
@Fix library dependency test for arch-es that don't
suppport shared libs so building tk80, for example, doesn't
cause tkl80 to get built even thouth it
is already installed.  Update list-distfiles target
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.82 1999/04/02 06:55:56 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.82 1999/04/02 06:55:56 marc Exp $$
d488 1
a488 1
BUILD_DEPENDS+= 	${EGCC}:${PORTSDIR}/devel/egcs-stable
d492 1
a492 1
BUILD_DEPENDS+= 	${EGXX}:${PORTSDIR}/devel/egcs-stable
d1739 1
a1739 1
	@@${RM} -f ${WRKDIR}/.*_done
@


1.82
log
@add list-distfiles target to help me build/update the LICENSE file
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.81 1999/03/30 07:12:05 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.81 1999/03/30 07:12:05 marc Exp $$
d1285 11
a1295 1
	@@for file in ${DISTFILES} ${PATCHFILES}; do ${ECHO} $$file; done
d2074 1
a2074 1
		lib=`${ECHO} $$i | ${SED} -e 's/:.*//' -e 's|\([^\\]\)\.|\1\\\\.|g'`; \
@


1.81
log
@add obj target that works in conjuction with WRKOBJDIR;
code from op21@@squish.org
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.80 1999/03/24 01:13:44 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.80 1999/03/24 01:13:44 marc Exp $$
d363 4
d1281 6
d1288 1
a1288 1

d2327 1
a2327 1
   do-fetch do-install do-package do-patch extract \
@


1.80
log
@arrgghhh! do NOT add pkgdep lines when creating PLIST-auto;
(I thought I had already removed this quite a while ago).
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.79 1999/03/16 23:35:37 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.79 1999/03/16 23:35:37 espie Exp $$
d1275 23
@


1.79
log
@tell gnu configure packages to stuff their files under /etc.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.78 1999/03/14 15:19:05 rohee Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.78 1999/03/14 15:19:05 rohee Exp $$
a1873 1
	  for f in `${MAKE} package-depends|sort -u`; do ${ECHO} "@@pkgdep $$f"; done; \
@


1.78
log
@Adding ${MASTER_SITE_GNOME} and ${MASTER_SITE_KDE}
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.77 1999/03/10 23:22:19 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.77 1999/03/10 23:22:19 marc Exp $$
d462 3
d956 1
@


1.77
log
@pass COPTS in CFLAGS for those ports that do not override CFLAGS;
NOTE: Some (most?) ports override CFLAGS.  This includes all ports
that use imake.  Therefore this change is not as useful as it should be.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.76 1999/03/05 16:32:49 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.76 1999/03/05 16:32:49 espie Exp $$
d801 6
a806 6
MASTER_SITE_TEX_CTAN+=  \
        ftp://ftp.cdrom.com/pub/tex/ctan/%SUBDIR%/  \
        ftp://wuarchive.wustl.edu/packages/TeX/%SUBDIR%/  \
        ftp://ftp.funet.fi/pub/TeX/CTAN/%SUBDIR%/  \
        ftp://ftp.tex.ac.uk/public/ctan/tex-archive/%SUBDIR%/  \
        ftp://ftp.dante.de/tex-archive/%SUBDIR%/
d813 13
@


1.76
log
@Fix makesum/addsum   batch behavior
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.75 1999/03/03 18:18:46 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.75 1999/03/03 18:18:46 espie Exp $$
d561 5
@


1.75
log
@Replace md5 checksum with a choice of sha1, rmd160, md5.
Upward compatible.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.74 1999/03/03 04:16:03 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.74 1999/03/03 04:16:03 marc Exp $$
d1122 4
a1125 2
.if defined(NO_CHECKSUM) && !target(checksum)
checksum: fetch
d1128 2
d1135 1
a1135 5
checksum: fetch
	@@${DO_NADA}
makesum:
	@@${DO_NADA}
addsum:
d1781 1
@


1.74
log
@Remove . from the path passed to configure;
adjust the configure script path appropriate for SEPARATE_BUILD;
this seems to work for all ports, some ports had probs with earlier
changes
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.73 1999/03/01 19:44:18 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.73 1999/03/01 19:44:18 marc Exp $$
d99 4
a102 1
#
d354 4
a357 3
# checksum		- Use files/md5 to ensure that your distfiles are valid.
# makesum		- Generate files/md5 (only do this for your own ports!).
# addsum		- update files/md5 in a non-destructive way (own ports only!)
d519 1
a519 1
# be paranoid about which md5 we trust
d529 22
d552 7
d1752 1
a1752 1
	@@if [ -f ${MD5_FILE} ]; then ${RM} -f ${MD5_FILE}; fi
d1755 3
a1757 1
		${MD5} $$file >> ${MD5_FILE}; \
d1760 1
a1760 1
		${ECHO} "MD5 ($$file) = IGNORE" >> ${MD5_FILE}; \
d1767 1
a1767 1
	@@touch ${MD5_FILE}
d1770 3
a1772 1
		${MD5} $$file >> ${MD5_FILE}; \
d1775 1
a1775 1
		${ECHO} "MD5 ($$file) = IGNORE" >> ${MD5_FILE}; \
d1777 4
a1780 4
	@@sort -u ${MD5_FILE} >${MD5_FILE}.new
	@@${MV} -f ${MD5_FILE}.new ${MD5_FILE}
	@@if [ `${SED} -e 's/\=.*$$//' ${MD5_FILE} | uniq -d | wc -l` -ne 0 ]; then \
		${ECHO} "Inconsistent checksum in ${MD5_FILE}"; \
d1782 1
a1782 1
		${ECHO} "${MD5_FILE} updated okay, don't forget to remove cruft"; \
d1788 2
a1789 2
	@@if [ ! -f ${MD5_FILE} ]; then \
		${ECHO_MSG} ">> No MD5 checksum file."; \
d1793 10
a1802 2
			CKSUM=`${MD5} < $$file`; \
			CKSUM2=`${GREP} "^MD5 ($$file)" ${MD5_FILE} | ${AWK} '{print $$4}'`; \
a1809 2
			elif [ "$$CKSUM" = "$$CKSUM2" ]; then \
				${ECHO_MSG} ">> Checksum OK for $$file."; \
d1811 7
a1817 2
				${ECHO_MSG} ">> Checksum mismatch for $$file."; \
				OK="false"; \
d1821 1
a1821 1
			CKSUM2=`${GREP} "($$file)" ${MD5_FILE} | ${AWK} '{print $$4}'`; \
d1832 1
a1832 1
			${ECHO_MSG} "Make sure the Makefile and md5 file (${MD5_FILE})"; \
@


1.73
log
@Note that NO_SHARED_LIBS can not be tested until after
bsd.port.mk is included; define CONFIGURE_SHARED that is set to
either --enable-shared or --disable-shared depending upon the
architecture.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.72 1999/03/01 18:44:04 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.72 1999/03/01 18:44:04 espie Exp $$
d892 7
a898 2
CONFIGURE_SCRIPT?=	${WRKSRC}/configure
CONFIGURE_ENV+=		PATH=.:${PORTPATH}
d1313 1
a1313 1
		${CONFIGURE_ENV} ${CONFIGURE_SCRIPT} ${CONFIGURE_ARGS})
@


1.72
log
@Work around some broken Configure (such as elm) which don't work correctly
when they're invoked with an absolute path.
This was introduced by the WRKBUILD/WRKSRC split.

So:
- replace default CONFIGURE with a full path, so that you can override it.
- remove leading ${WRKSRC} from the configure invocation.
- add . to the configure path.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.71 1999/02/28 23:23:47 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.71 1999/02/28 23:23:47 espie Exp $$
d99 1
a99 3
# NO_SHARED_LIBS - defined as "yes" for those machine architectures that do
#				  not support shared libraries.

d194 4
d321 8
d898 6
@


1.71
log
@* make the _PORT_USE macro more explicit and less magic in its use of
cookies, so that cookie names are no longer hard-coded.
* new SEPARATE_BUILD feature: for ports that can build outside their source
tree, use build-${ARCH} to build, and move configure/build/install cookie
down inside build-${ARCH}.

Those few people who use NFS to mount ports tree around different
architectures may find this helps.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.70 1999/02/27 18:28:13 rohee Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.70 1999/02/27 18:28:13 rohee Exp $$
d882 2
a883 2
CONFIGURE_SCRIPT?=	configure
CONFIGURE_ENV+=		PATH=${PORTPATH}
d1292 1
a1292 1
		${CONFIGURE_ENV} ${WRKSRC}/${CONFIGURE_SCRIPT} ${CONFIGURE_ARGS})
@


1.70
log
@sunsite.unc.edu changed its name to metalab.unc.edu + French mirror
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.69 1999/02/24 20:15:48 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.69 1999/02/24 20:15:48 marc Exp $$
d114 4
a481 2
# Don't change these!!!  These names are built into the _TARGET_USE macro,
# there is no way to refer to them cleanly from within the macro AFAIK.
d483 8
a494 1
PATCH_COOKIE?=		${WRKDIR}/.patch_done
d496 1
d599 3
d603 1
d1456 17
a1472 4
.if !make(real-fetch) \
	&& (!make(real-patch) || !defined(PATCH_CHECK_ONLY)) \
	&& (!make(real-package) || !defined(PACKAGE_NOINSTALL))
	@@${TOUCH} ${TOUCH_FLAGS} ${WRKDIR}/.${.TARGET:S/^real-//}_done
@


1.69
log
@Do not include @@name or @@cwd in packing lists created by the plist target;
they are not necessary as the proper names are generated when
the package is installed; including them only adds work as they
must be verified and changed when the port changes; thanks to
fgsch@@ for bringing this up
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.68 1999/02/24 12:34:46 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.68 1999/02/24 12:34:46 espie Exp $$
d747 1
a747 1
	ftp://sunsite.unc.edu/pub/Linux/%SUBDIR%/ \
d749 2
a750 1
	ftp://ftp.funet.fi/pub/mirrors/sunsite.unc.edu/pub/Linux/%SUBDIR%/
@


1.68
log
@Declare phony target as phony targets. This may avert a few subtle bugs,
and it documents behavior as well.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.67 1999/02/21 00:50:28 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.67 1999/02/21 00:50:28 espie Exp $$
a1753 2
	  ${ECHO} "@@cwd ${PREFIX}"; \
	  ${ECHO} "@@name ${PKGNAME}"; \
@


1.67
log
@internalize NEED_VERSION sub macros to avoid getting tangled with
user macros.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.66 1999/02/21 00:01:30 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.66 1999/02/21 00:01:30 marc Exp $$
d2172 16
@


1.66
log
@Follow up on espie suggestion: don't allow package registration
(following installation) if the COMMENT exceeds 60 characters
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.65 1999/02/18 19:22:45 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.65 1999/02/18 19:22:45 marc Exp $$
d33 1
a33 1
VERSION_REVISION=${FULL_REVISION:M[0-9]*.*}
d35 2
a36 2
VERSION=${VERSION_REVISION:C/\..*//}
REVISION=${VERSION_REVISION:C/.*\.//}
d38 2
a39 2
VERSION_NEEDED=${NEED_VERSION:C/\..*//}
REVISION_NEEDED=${NEED_VERSION:C/.*\.//}
d42 3
a44 3
	@@if [ ${VERSION_NEEDED} -gt ${VERSION} -o \
			${VERSION_NEEDED} -eq ${VERSION} -a \
				${REVISION_NEEDED} -gt ${REVISION} ]; \
@


1.65
log
@display ${PKGDIR}/MESSAGE after install (if it exists);
use cat(1) instead of more(1), though, so the port need not be
marked as interactive;  problem noted by fgsch@@openbsd.org
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.64 1999/02/18 00:01:47 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.64 1999/02/18 00:01:47 marc Exp $$
d2122 4
@


1.64
log
@use NO_SHARED_LIBS in lib-depends target instead of
testing specifically for the alpha
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.63 1999/02/17 23:52:56 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.63 1999/02/17 23:52:56 marc Exp $$
d1434 3
@


1.63
log
@oops: left out .endif in a cut/paste
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.62 1999/02/17 23:45:15 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.62 1999/02/17 23:45:15 marc Exp $$
d1909 1
a1909 1
.if (${MACHINE_ARCH} == "alpha")
@


1.62
log
@Define NO_SHARED_LIBS for those archs that do not support shared libs;
When selecting a packing list choose in order:
 o PLIST.<arch>
 o PLIST.noshared if NO_SHARED_LIBS is defined
 o PLIST
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.61 1999/02/17 13:00:42 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.61 1999/02/17 13:00:42 espie Exp $$
d643 1
@


1.61
log
@Fix checksum logic: in a manual sequence of
make extract; make patch; make configure; make;
the checksum will only be checked ONCE (before extract), and not
every step of the way...
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.60 1999/02/03 17:53:13 rohee Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.60 1999/02/03 17:53:13 rohee Exp $$
d98 3
a100 1
#				  while ${WRKOBJDIR} is local to every arch.
d367 7
d638 3
@


1.60
log
@Provisions for building in a separate directory tah sources
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.59 1999/01/24 02:04:20 marc Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.59 1999/01/24 02:04:20 marc Exp $$
d1047 1
a1047 1
extract: checksum
d1446 1
a1446 1
extract: checksum ${EXTRACT_COOKIE}
d1469 2
a1470 2
${EXTRACT_COOKIE}:
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} real-extract
@


1.59
log
@pass all install macros to configure; Kenneth R Westerback <krw@@tcn.net>
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.58 1999/01/08 23:45:48 pattonme Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.58 1999/01/08 23:45:48 pattonme Exp $$
d109 3
d580 2
d714 1
a714 1
    ftp://ftp.eu.net/X11/contrib/%SUBDIR%/ \
d865 2
a866 2
		  WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} \
		  SCRIPTDIR=${SCRIPTDIR} FILESDIR=${FILESDIR} \
d1010 1
a1010 1
	  DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} \
d1250 1
a1250 1
do-configure:
d1259 1
a1259 1
	@@(cd ${WRKSRC} && CC="${CC}" ac_cv_path_CC="${CC}" CFLAGS="${CFLAGS}" \
d1264 1
a1264 1
		${CONFIGURE_ENV} ./${CONFIGURE_SCRIPT} ${CONFIGURE_ARGS})
d1271 3
d1278 1
a1278 1
	@@(cd ${WRKSRC}; ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM} ${MAKE_FLAGS} ${MAKEFILE} ${ALL_TARGET})
d1285 1
a1285 1
	@@(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM} ${MAKE_FLAGS} ${MAKEFILE} ${INSTALL_TARGET})
@


1.58
log
@Removed all OPSYS conditionals and extraneous comments for readability.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.57 1998/12/19 16:52:22 espie Exp $
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.57 1998/12/19 16:52:22 espie Exp $$
d1256 4
a1259 3
	    INSTALL="/usr/bin/install -c -o ${BINOWN} -g ${BINGRP}" \
	    INSTALL_PROGRAM="${INSTALL_PROGRAM}" \
	    ${CONFIGURE_ENV} ./${CONFIGURE_SCRIPT} ${CONFIGURE_ARGS})
@


1.57
log
@avoid aliasing between MASTER_SITES and PATCH_SITES, e.g.,
MASTER_SITES=some_sites
PATCH_SITES=${MASTER_SITES}
MASTER_SITE_SUBDIR=one_dir
PATCH_SITE_SUBDIR=second_dir
now works
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.56 1998/12/18 12:00:46 form Exp $
d23 2
a24 3
# is listed), a port is maintained by the subscribers of the ports@@freebsd.org
# mailing list (OpenBSD: ports@@openbsd.org), and any correspondence
# should be directed there.  
a25 1
FreeBSD_MAINTAINER=	asami@@FreeBSD.ORG
a26 1
NetBSD_MAINTAINER=	agc@@netbsd.org
d31 1
a31 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.56 1998/12/18 12:00:46 form Exp $$
d59 6
a64 9
# ARCH			- The architecture, as returned by "uname -m".
# OPSYS			- Portability clause.  This is the operating system the
#				  makefile is being used on.  Automatically set to
#				  "FreeBSD," "NetBSD," or "OpenBSD" as appropriate.
# OPSYS_VER		- The current version if the operating system
# PORTSDIR		- The root of the ports tree.  Defaults:
#					FreeBSD/OpenBSD: /usr/ports
#					NetBSD:          /usr/pkgsrc
# DISTDIR 		- Where to get gzip'd, tarballed copies of original sources
a85 2
# MASTER_SITE_FREEBSD - If set, only use ftp.freebsd.org as the
#				  MASTER_SITE_OVERRIDE.
d92 1
a92 3
#				  Defaults: ports@@OpenBSD.ORG      (OpenBSD)
#							ports@@FreeBSD.ORG      (FreeBSD)
#                           packages@@NetBSD.ORG    (NetBSD)
d122 2
a123 2
# MIRROR_DISTFILE	- Whether the distfile is redistributable without restrictions.
#			  Defaults to "yes", set this to "no" if restrictions exist.
d264 1
a264 3
# HAVE_MOTIF	- If set, means system has Motif.  Typically set in
#				  /etc/make.conf (FreeBSD) or
#				  /etc/mk.conf (OpenBSD, NetBSD).
d266 1
a266 3
#				  dynamically.  Typically set in
#				  /etc/make.conf (FreeBSD) or
#				  /etc/mk.conf (OpenBSD, NetBSD).
a361 1
.if (${OPSYS} == "OpenBSD")
a364 6
.elif (${OPSYS} == "NetBSD")
DEF_UMASK?=		0022
NOCLEANDEPENDS=	yes
.else
DEF_UMASK?=		0022
.endif
a376 4
.if (${OPSYS} == "NetBSD")
PORTSDIR?=		/usr/pkgsrc
LOCALBASE?=		${DESTDIR}/usr/pkg
.else
a378 1
.endif
a461 7
# OpenBSD has perl5 in-tree
#
#.if defined(USE_PERL5)
#BUILD_DEPENDS+=		perl5.00404:${PORTSDIR}/lang/perl5
#RUN_DEPENDS+=		perl5.00404:${PORTSDIR}/lang/perl5
#.endif

a552 3
.if (${OPSYS} == "NetBSD")
MTREE_FILE=	/etc/mtree/BSD.pkg.dist
.else
a555 1
.endif
a558 1
.if (${OPSYS} == "OpenBSD")
a560 7
.elif (${OPSYS} == "NetBSD")
NEED_OWN_INSTALL_TARGET=	no
.include <bsd.own.mk>
SHAREOWN = ${DOCOWN}
SHAREGRP = ${DOCGRP}
SHAREMODE = ${DOCMODE}
.endif
a577 1
# XXX Is pwd -P available in FreeBSD's /bin/sh?
a747 5
# The second backup master site is ftp.freebsd.org
#
_MASTER_SITE_FREEBSD?=	\
	ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/

d751 2
a752 1
	${_MASTER_SITE_OPENBSD} ${_MASTER_SITE_FREEBSD}
a759 6
# If the user has this set, go to the FreeBSD repository for everything.
#
.if defined(MASTER_SITE_FREEBSD)
MASTER_SITE_OVERRIDE=  ${_MASTER_SITE_FREEBSD}
.endif

a776 14
# The following is a FreeBSD construct that does not work in OpenBSD.
# Since OpenBSD does not put packages in /cdrom/ports/packages it
# is safe to leave (but I may remove it in the future).
#
# Search CDROM first if mounted, symlink instead of copy if
# FETCH_SYMLINK_DISTFILES is set
.if exists(/cdrom/ports/distfiles)
MASTER_SITES:=	file:/cdrom/ports/distfiles/${DIST_SUBDIR}/ ${MASTER_SITES}
PATCH_SITES:=	file:/cdrom/ports/distfiles/${DIST_SUBDIR}/ ${PATCH_SITES}
.if defined(FETCH_SYMLINK_DISTFILES)
FETCH_BEFORE_ARGS+=	-l
.endif
.endif

a830 1
.if (${OPSYS} == "OpenBSD")
a831 5
.elif (${OPSYS} == "NetBSD")
MAINTAINER?=	packages@@NetBSD.ORG
.else
MAINTAINER?=	ports@@FreeBSD.ORG
.endif
a2048 3
.if (${OPSYS} == "NetBSD")
README_NAME=	${TEMPLATES}/README.pkg
.else
a2049 1
.endif
@


1.56
log
@make plist: do not add files from just installed ports (we wepend on) to PLIST.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.55 1998/12/17 18:25:06 espie Exp $
d34 1
a34 1
FULL_REVISION=$$OpenBSD: bsd.port.mk,v 1.55 1998/12/17 18:25:06 espie Exp $$
d784 1
a784 1
MASTER_SITES:=	${MASTER_SITES:S/%SUBDIR%/${MASTER_SITE_SUBDIR}/}
d786 1
@


1.55
log
@NEED_VERSION
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.54 1998/12/16 19:59:48 marc Exp $
d34 1
a34 1
FULL_REVISION=$$OpenBSD$$
d268 3
a270 3
# USE_MOTIF	- Set this in your port if it requires Motif or Lesstif.
#		  It will be built using Lesstif port unless Motif libraries
#		  found or HAVE_MOTIF is defined. See also REQUIRES_MOTIF.
d272 1
a272 1
# REQUIRES_MOTIF - Set this in your port if it requires Motif.  It will  be
d1438 1
a1543 1
	@@touch ${INSTALL_PRE_COOKIE}
@


1.54
log
@describe NO_WARNINGS; define in the "mirror-distfiles" target
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.53 1998/11/27 10:51:54 form Exp $
d30 24
@


1.53
log
@make plist: treat links to dirs as files, not dirs
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.52 1998/11/25 01:08:35 espie Exp $
d234 3
d1216 1
a1216 1
	@@make fetch __ARCH_OK=yes NO_IGNORE=yes
@


1.52
log
@- revert change now that we have patch -C
- fix PATCH_LIST so that is works
- add USE_AUTOCONF
- fix PATH env logic

plus some documentation...
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.51 1998/11/19 22:15:31 marc Exp $
d1782 1
a1782 1
	   if [ -d $$f ]; then dirs="$$ff $$dirs"; \
@


1.51
log
@checkpatch target and PATCH_CHECK_ONLY not available with OpenBSD
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.50 1998/11/19 04:20:09 espie Exp $
d72 3
a74 2
# GMAKE			- Set to path of GNU make if not in $PATH (default: gmake).
# XMKMF			- Set to path of `xmkmf' if not in $PATH (default: xmkmf -a ).
d157 5
d188 1
a188 1
#				  it in your $PATH (if it is an executable) and go
d224 1
a224 1
# FETCH_CMD		  - Full path to ftp/http fetch command if not in $PATH
d318 1
a318 1
#				  the same file. NOT AVAILABLE WITH OPENBSD!
d442 7
d484 1
d488 2
d501 2
d505 1
a505 1
MAKE_ENV+=		PATH=${PATH}:${LOCALBASE}/bin:${X11BASE}/bin PREFIX=${PREFIX} LOCALBASE=${LOCALBASE} X11BASE=${X11BASE} MOTIFLIB="${MOTIFLIB}" CFLAGS="${CFLAGS}"
a535 3
# OpenBSD patch does not support the -C option/checkpatch target
#
.if (${OPSYS} != "OpenBSD")
a539 1
.endif
d648 1
d686 1
d703 3
d805 1
a805 1
# The following is a FreeBSD construct that dopes not work in OpenBSD.
d898 1
a898 1
CONFIGURE_ENV+=		PATH=${PATH}:${LOCALBASE}/bin:${X11BASE}/bin
d907 1
a907 1
          PATH=${PATH}:${LOCALBASE}/bin:${X11BASE}/bin \
d1265 2
a1266 1
		for i in ${PATCHDIR}/${PATCH_LIST}; do \
d1286 1
a1286 1
		done; \
d1294 3
d1451 1
a1451 1
		shift `expr $$# - 1`; \
d1556 1
a1556 3
# OpenBSD patch does not support the -C option; thus this target disabled
#
.if (${OPSYS} != "OpenBSD")
a1560 1
.endif
d1579 1
a1579 1
	@@pkg_delete -f ${PKGNAME}
d1886 2
a1887 1
	@@for i in ${DEPENDS_TMP}; do \
d1890 1
a1890 1
		if expr "$$dir" : '.*:' > /dev/null; then \
d1897 1
a1897 1
		if expr "$$prog" : \\/ >/dev/null; then \
d1939 1
a1939 1
		if expr "$$dir" : '.*:' > /dev/null; then \
d1964 1
a1964 1
		if expr "$$dir" : '.*:' > /dev/null; then \
d1995 1
a1995 1
		if expr "$$dir" : '.*:' > /dev/null; then \
@


1.50
log
@new functionalities:
- PATCH_LIST   for conditional patches
- addsum       for non destructive md5 checksum updates
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.49 1998/11/17 07:14:16 form Exp $
d312 1
a312 1
#				  the same file.
d518 3
d525 1
d1533 3
a1535 1

d1539 1
@


1.49
log
@Handle USE_MOTIF.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.47 1998/11/05 10:36:14 espie Exp $
d24 1
a24 1
# mailing list (OpenBSD: ports@@openbsd.org), and any correspondece
d117 1
a117 1
#				  to port this software to FreeBSD (default:
d119 2
d315 1
d388 2
d676 1
d1073 2
d1242 7
a1248 13
		if [ "`echo ${PATCHDIR}/patch-*`" = "${PATCHDIR}/patch-*" ]; then \
			${ECHO_MSG} "===>   Ignoring empty patch directory"; \
			if [ -d ${PATCHDIR}/CVS ]; then \
				${ECHO_MSG} "===>   Perhaps you forgot the -P flag to cvs co or update?"; \
			fi; \
		else \
			${ECHO_MSG} "===>  Applying ${OPSYS} patches for ${PKGNAME}" ; \
			for i in ${PATCHDIR}/patch-*; do \
				case $$i in \
					*.orig|*.rej|*~) \
						${ECHO_MSG} "===>   Ignoring patchfile $$i" ; \
						;; \
					*) \
d1253 10
a1262 4
						;; \
				esac; \
			done; \
		fi; \
d1674 20
@


1.48
log
@Test ${ONLY_FOR_ARCHS} against both ${ARCH} and ${MACHINE_ARCH}.
@
text
@d233 4
d439 3
d648 1
a648 1
.if defined(HAVE_MOTIF)
@


1.47
log
@- support for C++ in configure consistent with sys.mk
- support for USE_EGCC/USE_EGXX similar to USE_GMAKE
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.46 1998/10/05 05:13:34 form Exp $
d968 1
a968 1
.if ${MACHINE_ARCH} == "${__ARCH}"
d973 1
d975 3
@


1.46
log
@check write permissions to ${DISTDIR} before trying to fetch distfiles.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.45 1998/09/08 05:51:06 marc Exp $
d157 2
d427 8
d459 2
d1257 1
@


1.45
log
@don't generate @@exec ranlib for .a files (plist target)
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.44 1998/09/07 22:33:19 marc Exp $
d1114 4
@


1.44
log
@sync with NetBSD where possible.  Fix WRKOBJDIR. Add deinstall target.
Make uninstall an alias for deinstall.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.43 1998/08/24 04:46:14 marc Exp $
d1702 1
a1702 3
	    if ${ECHO} $$f | ${GREP} -E -q -e '[^/]+\.a$$'; then \
	     ${ECHO} '@@exec ranlib %D/%F'; \
	    elif ${ECHO} $$f | ${GREP} -E -q -e '[^/]+\.so\.[0-9]+\.[0-9]+$$'; then \
@


1.43
log
@add -q to mtree invocation.  This requires version of mtree checked in
last week.
@
text
@d3 1
a3 2
#	$OpenBSD: bsd.port.mk,v 1.42 1998/08/21 06:57:19 marc Exp $
#	$NetBSD: $
d9 1
d24 2
a25 1
# mailing list, and any correspondece should be directed there.
d29 1
d35 1
a35 1
# ONLY_FOR_ARCHS- If a port only makes sense to certain architectures, this
d37 1
a37 1
#				  against the predefined ${MACHINE} value
d45 1
a45 1
#					NetBSD:          /usr/opt
d51 2
d55 2
d75 3
a77 1
#				  (default: ports@@FreeBSD.ORG).
a89 1
# beware! unless NOCLEANDEPENDS,  dependencies are also nuked on clean.
d107 2
d150 1
a150 1
# NOCLEANDEPENDS - Don't nuke dependent dirs on make clean.
d195 7
a201 4
#				  library.  Note that lib can be any regular expression,
#				  and you need two backslashes in front of dots (.) to
#				  supress its special meaning (e.g., use
#				  "foo\\.2\\.:${PORTSDIR}/utils/foo" to match "libfoo.2.*").
d215 1
a215 1
#				  (default: /usr/bin/fetch).
d220 8
d234 2
a235 2
#				  /etc/make.conf (FreeBSD,NetBSD) or
#				  /etc/mk.conf (OpenBSD).
d238 2
a239 2
#				  /etc/make.conf (FreeBSD,NetBSD) or
#				  /etc/mk.conf (OpenBSD).
d258 14
a271 8
# INSTALL_PROGRAM - A command to install binary executables.
# INSTALL_SCRIPT - A command to install executable scripts.
# INSTALL_DATA	- A command to install sharable data.
# INSTALL_MAN	- A command to install manpages (doesn't compress).
#
# If your port doesn't automatically compress manpages, set the following.
# Depending on the setting of NOMANCOMPRESS, the make rules will compress
# the manpages for you.
d273 2
d279 3
a281 1
# MANPREFIX		- The directory prefix for ${MAN<sect>} (default: ${PREFIX}).
d296 1
d307 5
d323 3
a329 3
# Get the architecture
ARCH!=	uname -m

d335 1
d338 3
d357 2
a358 1
PORTSDIR?=		/usr/opt
d361 1
a362 1
LOCALBASE?=		${DESTDIR}/usr/local
a367 21
.if !defined(NO_WRKDIR)
.if defined(OBJMACHINE)
WRKDIR?=		${.CURDIR}/work.${MACHINE}
.else
WRKDIR?=		${.CURDIR}/work
.endif
.else
WRKDIR?=		${.CURDIR}
.endif
.if defined(NO_WRKSUBDIR)
WRKSRC?=		${WRKDIR}
.else
WRKSRC?=		${WRKDIR}/${DISTNAME}
.endif

.if defined(WRKOBJDIR)
# XXX Is pwd -P available in FreeBSD's /bin/sh?
__canonical_PORTSDIR!=	cd ${PORTSDIR}; pwd -P
__canonical_CURDIR!=	cd ${.CURDIR}; pwd -P
PORTSUBDIR=		${__canonical_CURDIR:S,${__canonical_PORTSDIR}/,,}
.endif
d420 4
a423 1
BUILD_DEPENDS+=		gmake:${PORTSDIR}/devel/gmake
d425 1
d427 1
d429 2
a430 2
#BUILD_DEPENDS+=		perl5.00401:${PORTSDIR}/lang/perl5
#RUN_DEPENDS+=		perl5.00401:${PORTSDIR}/lang/perl5
a446 4
# How to do nothing.  Override if you, for some strange reason, would rather
# do something.
DO_NADA?=		/usr/bin/true

d463 1
a463 1
MAKE_ENV+=		PREFIX=${PREFIX} LOCALBASE=${LOCALBASE} X11BASE=${X11BASE} MOTIFLIB="${MOTIFLIB}" CFLAGS="${CFLAGS}"
d471 3
a503 1
EXTRACT_SUFX?=	.tar.gz
d510 1
d517 3
d523 1
d530 28
d569 8
d581 5
a585 1
			BSD_INSTALL_MAN="${INSTALL_MAN}"
d644 1
d658 1
a658 2
PORTSPATH?=	${PATH}:${X11BASE}/bin:${LOCALBASE}/bin
SETENV?=	/usr/bin/env PATH=${PORTSPATH}
d661 1
d666 4
d673 4
d680 3
a682 1
    ftp://ftp.eu.net/X11/contrib/%SUBDIR%/
d744 1
d803 2
d825 5
d831 1
d850 1
d858 2
a859 1
SCRIPTS_ENV+=	CURDIR=${.CURDIR} DISTDIR=${DISTDIR} \
d870 1
d874 1
d878 2
d889 3
d902 3
a904 1
.endfor
d906 2
a907 2
.if defined(_MANPAGES) && defined(MANCOMPRESSED)
_MANPAGES:=	${_MANPAGES:S/$/.gz/}
d910 2
d956 1
a956 1
.if ( ${MACHINE} == "${__ARCH}" || ${MACHINE_ARCH} == "${__ARCH}" )
d961 1
a961 5
.if ( ${MACHINE} != ${MACHINE_ARCH} )
IGNORE= "is only for ${ONLY_FOR_ARCHS}, not ${MACHINE} \(${MACHINE_ARCH}\)"
.else
IGNORE= "is only for ${ONLY_FOR_ARCHS}, not ${MACHINE}"
.endif
d991 2
d995 2
a996 2
.endif
.endif
d1150 8
d1165 1
a1165 1
	@@${MKDIR} ${WRKOBJDIR}/${PORTSUBDIR}
d1246 1
a1246 1
	@@(cd ${WRKSRC} && ${SETENV} ${XMKMF})
d1254 1
a1254 5
.if defined(USE_GMAKE)
	@@(cd ${WRKSRC}; ${SETENV} ${MAKE_ENV} ${GMAKE} ${MAKE_FLAGS} ${MAKEFILE} ${ALL_TARGET})
.else defined(USE_GMAKE)
	@@(cd ${WRKSRC}; ${SETENV} ${MAKE_ENV} ${MAKE} ${MAKE_FLAGS} ${MAKEFILE} ${ALL_TARGET})
.endif
d1261 1
a1261 11
.if defined(USE_GMAKE)
	@@(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${GMAKE} ${MAKE_FLAGS} ${MAKEFILE} ${INSTALL_TARGET})
.if defined(USE_IMAKE) && !defined(NO_INSTALL_MANPAGES)
	@@(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${GMAKE} ${MAKE_FLAGS} ${MAKEFILE} install.man)
.endif
.else defined(USE_GMAKE)
	@@(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${MAKE} ${MAKE_FLAGS} ${MAKEFILE} ${INSTALL_TARGET})
.if defined(USE_IMAKE) && !defined(NO_INSTALL_MANPAGES)
	@@(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${MAKE} ${MAKE_FLAGS} ${MAKEFILE} install.man)
.endif
.endif
d1332 1
a1332 1
		${ECHO_MSG} "      If so, you may wish to \`\`pkg_delete ${PKGNAME}'' and install"; \
d1355 3
d1377 1
a1377 1
.if make(real-install) && defined(_MANPAGES)
d1380 2
a1381 2
.for manpage in ${_MANPAGES}
	@@${GUNZIP_CMD} ${manpage}
d1385 9
a1393 2
.for manpage in ${_MANPAGES}
	@@${GZIP_CMD} ${manpage}
d1509 12
d1539 4
d1550 1
d1575 7
d1584 15
d1600 1
d1604 3
a1606 3
			for site in ${MASTER_SITES}; do \
				${ECHO} -n ${FETCH_CMD} ${FETCH_BEFORE_ARGS} $${site}$${file} "${FETCH_AFTER_ARGS}" '||' ; \
					break; \
d1615 1
d1617 1
a1617 2
				${ECHO} -n ${FETCH_CMD} ${FETCH_BEFORE_ARGS} $${site}$${file} "${FETCH_AFTER_ARGS}" '||' ; \
					break; \
d1621 3
a1623 3
	 done)
.endif
.endif
d1725 9
d1738 10
a1747 1
	@@${ECHO} ${PKGNAME}
d1756 1
a1756 1
			(cd $$dir ; ${MAKE} package-name package-depends); \
d1805 1
a1805 1
	@@PATH=${PORTSPATH}; for i in ${DEPENDS_TMP}; do \
d1814 1
d1818 1
a1818 1
				notfound=0; \
a1820 1
				notfound=1; \
d1823 7
a1829 7
			if which "$$prog" > /dev/null 2>&1 ; then \
				${ECHO_MSG} "===>  ${PKGNAME} depends on executable: $$prog - found"; \
				notfound=0; \
			else \
				${ECHO_MSG} "===>  ${PKGNAME} depends on executable: $$prog - not found"; \
				notfound=1; \
			fi; \
d1831 1
a1831 1
		if [ $$notfound != 0 ]; then \
d1855 1
a1855 1
		lib=`${ECHO} $$i | ${SED} -e 's/\\\.[0-9][0-9]*\\\.[0-9]*:.*//'`; \
d1880 1
a1880 1
		lib=`${ECHO} $$i | ${SED} -e 's/:.*//'`; \
d1888 5
a1892 5
		if /sbin/ldconfig -r | ${GREP} -q -e "-l$$lib"; then \
			${ECHO_MSG} "===>  ${PKGNAME} depends on shared library: $$lib - found"; \
		else \
			${ECHO_MSG} "===>  ${PKGNAME} depends on shared library: $$lib - not found"; \
			${ECHO_MSG} "===>  Verifying $$target for $$lib in $$dir"; \
d1894 1
a1894 1
				${ECHO_MSG} ">> No directory for $$lib.  Skipping.."; \
d1899 2
d1957 1
a1957 1
		(cd $$dir; ${MAKE} package-name depends-list); \
d1970 1
a1970 1
#  description-file|maintainer|categories|build deps|run deps
d1996 6
d2015 6
d2023 9
a2031 3
	@@${CAT} ${TEMPLATES}/README.port | \
		${SED} -e 's%%PORT%%'`${ECHO} ${.CURDIR} | ${SED} -e 's.*/\([^/]*/[^/]*\)$$\1'`'g' \
			-e 's%%PKG%%${PKGNAME}g' \
d2034 4
a2037 2
			-e 's%%BUILD_DEPENDS%%'"`${MAKE} print-depends-list`"'' \
			-e 's%%RUN_DEPENDS%%'"`${MAKE} print-package-depends`"'' \
d2039 1
d2086 4
a2089 1
		for dep in `make package-depends ECHO_MSG=/usr/bin/true | sort -u`; do \
@


1.42
log
@when checking for lib depends on the alpha (no shared libs)
check /usr/local/lib and /usr/X11R6/lib in addition to the standard place
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.41 1998/08/08 06:14:58 marc Exp $
d497 1
a497 1
MTREE_ARGS?=	-U -f ${MTREE_FILE} -d -e -p
@


1.41
log
@update 'comes with...' message so it is less confusing
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.40 1998/07/29 15:32:54 espie Exp $
d1703 1
a1703 1
		if ${LD} -r -o $$tmp -l$$lib; then \
@


1.40
log
@
Fix version number checking to handle ja-* correctly.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.39 1998/07/28 15:25:24 espie Exp $
d868 1
a868 1
IGNORE= "comes with ${OPSYS} as of release ${COMES_WITH}"
@


1.39
log
@
Document NOCLEANDEPENDS, make clean gotcha
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.38 1998/07/17 04:10:20 form Exp $
d1237 1
a1237 1
	@@if [ -d ${PKG_DBDIR}/${PKGNAME} -o "X$$(ls -d ${PKG_DBDIR}/${PKGNAME:C/-.*//g}-* 2> /dev/null)" != "X" ]; then \
@


1.38
log
@fix ONLY_FOR_ARCH test in bsd.port.mk
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.37 1998/07/13 03:11:14 todd Exp $
d82 1
d141 1
@


1.37
log
@typo
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.36 1998/07/12 04:34:39 todd Exp $
d853 1
a853 1
.if ${MACHINE} == "${__ARCH}"
d858 3
d862 1
@


1.36
log
@allow detection of older package versions with a new package from the ports tree
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.34 1998/07/08 03:27:17 marc Exp $
d1231 1
a1231 1
	@@if [ -d ${PKG_DBDIR}/${PKGNAME} -o "X$$(ls -d ${PKG_DBDIR}/${PKGNAME:C/-.*//g}-*> 2> /dev/null)" != "X" ]; then \
@


1.35
log
@remove comment from packing list that must be added when
the package is installed, not when the plist is created
@
text
@d1231 1
a1231 1
	@@if [ -d ${PKG_DBDIR}/${PKGNAME} ]; then \
@


1.34
log
@search for files in
ftp://ftp.openbsd.org/pub/OpenBSD/distfiles if they were not found in
ftp://ftp.openbsd.org/pub/OpenBSD/licensed.  The later directory is where
we will keep the tarballs for ports that can not be shipped on the CD.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.33 1998/07/07 04:02:47 marc Exp $
d1537 2
a1546 1
	  ${ECHO} "@@comment PACKAGE(arch=${ARCH}, opsys=${OPSYS}, vers=${OPSYS_VER})"; \
@


1.33
log
@minor tweaks to plist target
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.32 1998/07/06 22:06:51 marc Exp $
d56 1
d634 2
a635 1
	ftp://ftp.openbsd.org/pub/OpenBSD/distfiles/${DIST_SUBDIR}/
@


1.32
log
@New target 'plist' for port developers.  Generates /PLIST-auto
which should require minimal hacking to turn into /PLIST.
CAUTION: does not find files installed with tar, or any other install
method that does not change the timestamp of the installed file.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.31 1998/06/29 22:21:16 marc Exp $
d1541 2
a1543 2
	  ${ECHO} "@@name ${PKGNAME}"; \
	  ${ECHO} "@@cwd ${PREFIX}"; \
d1550 3
a1552 1
	    if ${ECHO} $$f | ${GREP} -E -q -e '/[^/]+\.so\.[0-9]+\.[0-9]+$$'; then \
@


1.31
log
@add support for architecture dependent packing lists;
PLIST.${ARCH} will be used if it exists, otherwise PLIST is used
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.30 1998/06/11 16:03:48 marc Exp $
d15 1
a15 1
# are listed below in the ${OSNAME}_MAINTAINER entries (this file
d40 1
d263 2
d284 1
a284 1
# Get the operating system type
d286 1
d413 1
d570 1
d859 1
a859 2
OS_VER!=	uname -r
.if ( ${OS_VER} >= ${COMES_WITH} )
d1342 1
d1394 1
a1394 1
	@@${RM} -f ${INSTALL_COOKIE} ${PACKAGE_COOKIE}
d1530 34
@


1.30
log
@update OpenBSD maintainer per toddf's request
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.29 1998/04/28 19:19:29 marc Exp $
d519 2
d523 3
d527 1
@


1.29
log
@Redo the way ONLY_FOR_ARCH was implemented.  The new method
allows things like "make clean" and a top level "make index" work
regardless of the architecture upon which the command is issued.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.28 1998/04/06 21:46:00 marc Exp $
d27 1
a27 1
OpenBSD_MAINTAINER=	joey@@OpenBSD.ORG
@


1.28
log
@existing fetch from cdrom was freebsd specific and would not work on OpenBSD;
Add code to copy or link from cdrom that works with OpenBSD.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.27 1998/04/05 04:20:38 marc Exp $
a280 18
.if defined(ONLY_FOR_ARCHS)
.for __ARCH in ${ONLY_FOR_ARCHS}
.if ${MACHINE} == "${__ARCH}"
__ARCH_OK=	1
.endif
.endfor
.else
__ARCH_OK=	1
.endif

.if !defined(__ARCH_OK)
.MAIN:	all

fetch fetch-list extract patch clean clean-depends configure build install reinstall package describe checkpatch checksum makesum all:
	@@echo "This port is only for ${ONLY_FOR_ARCHS},"
	@@echo "and you are running ${MACHINE}."
.else

d837 9
a1868 1
.endif
@


1.27
log
@Add ftp.openbsd.org as a MASTER_SITE_BACKUP before ftp.freebsd.org;
If MASTER_SITE_OPENBSD is defined only ftp.openbsd.org will be used;
Re-do the way COMES_WITH was implemented to allow overide on the
command line by defining NO_IGNORE.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.26 1998/03/27 03:30:43 marc Exp $
d679 4
d693 15
d998 5
@


1.26
log
@Add support for the COMES_WITH variable.  COMES_WITH is set to the OpenBSD
version that a port became part of the standard distribution.  If someone
tries to generate the port on that version (or later) they will see the
message "<port> comes with OpenBSD as of release ${COMES_WITH}".  Users
of earlier versions of OpenBSD will still generate the port.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.25 1998/02/19 20:41:02 marc Exp $
d54 1
d58 4
a61 2
# MASTER_SITE_FREEBSD - If set, only use ${MASTER_SITE_BACKUP} for
#				  MASTER_SITES.
d281 1
a281 13
# Get the operating system type
OPSYS!=	uname -s

.if defined(COMES_WITH)
OS_VER!=	uname -r
.if ( ${OS_VER} >= ${COMES_WITH} )
__NOT_NEEDED!= basename ${.CURDIR}
.endif
.endif
.if defined(__NOT_NEEDED)
fetch fetch-list extract patch clean clean-depends configure build install reinstall package describe checkpatch checksum makesum all:
	@@echo "${__NOT_NEEDED} comes with ${OPSYS} as of release ${COMES_WITH}
.elif defined(ONLY_FOR_ARCHS)
d299 3
d636 12
a647 1
# The primary backup site.
d649 7
a655 1
	ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/
d658 1
d660 1
a660 1
MASTER_SITE_OVERRIDE=  ${MASTER_SITE_BACKUP}
d664 2
d815 2
d836 5
@


1.25
log
@Handle make clean when port is not for machine's architecture
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.24 1998/02/11 00:40:55 niklas Exp $
d118 4
d278 13
a290 1
.if defined(ONLY_FOR_ARCHS)
a309 3

# Get the operating system type
OPSYS!=	uname -s
@


1.24
log
@Fix lib-depends case for alpha even better
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.22 1998/02/10 08:33:16 niklas Exp $
d287 1
a287 1
fetch fetch-list extract patch configure build install reinstall package describe checkpatch checksum makesum all:
@


1.23
log
@Fix lib-depends case for alpha
@
text
@d1588 1
a1588 1
		lib=`${ECHO} $$i | ${SED} -e 's/\\\.[0-9][0-9]*\\\.:.*//'`; \
@


1.22
log
@make LDCONFIG usable on alphas too, no need for special casing it anymore
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.21 1997/12/20 01:26:57 joey Exp $
d1588 1
a1588 1
		lib=`${ECHO} $$i | ${SED} -e 's/\\\.[0-9][0-9]*\\\.[0-9][0-9]*:.*//'`; \
@


1.21
log
@openbsd maintainer changed from imp to me
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.20 1997/12/20 01:24:08 todd Exp $
d577 1
a577 1
LDCONFIG?=	/sbin/ldconfig
@


1.20
log
@fix the PATH problem.
now things SHOULD compile with a PATH of /usr/bin:/bin ...
ANY executable not in these two subdirs should have ${SETENV} prepended
to set the right path.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.19 1997/12/17 10:06:45 niklas Exp $
d27 1
a27 1
OpenBSD_MAINTAINER=	imp@@OpenBSD.ORG
@


1.19
log
@append /usr/local/bin and /usr/X11R6/bin to PATH during ports builds
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.18 1997/12/04 08:26:23 niklas Exp $
d585 2
a586 1
SETENV?=	/usr/bin/env PATH=${PATH}:${X11BASE}/bin:${LOCALBASE}/bin
d1071 1
a1071 1
	@@(cd ${WRKSRC} && ${XMKMF})
d1538 1
a1538 1
	@@for i in ${DEPENDS_TMP}; do \
@


1.18
log
@Make WRKOBJDIR a bit smarter about existing links
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.15 1997/12/02 11:11:57 niklas Exp $
d585 1
a585 1
SETENV?=	/usr/bin/env
@


1.17
log
@do not destroy /dev/null on alpha
@
text
@d581 1
d989 7
a995 4
	@@${MKDIR} -p ${WRKOBJDIR}/${PORTSUBDIR}
	@@echo "${WRKDIR} -> ${WRKOBJDIR}/${PORTSUBDIR}"
	@@# XXX whatif a build is going on right now?  Is this wise?
	@@${LN} -sf ${WRKOBJDIR}/${PORTSUBDIR} ${WRKDIR}
@


1.16
log
@one way to deal with LIB_DEPENDS on alpha
@
text
@d1591 2
a1592 1
		if ${LD} -r -o /dev/null -l$$lib; then \
d1604 1
@


1.15
log
@We have perl5 in-tree
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.14 1997/09/21 10:58:41 niklas Exp $
d1581 24
d1627 1
@


1.14
log
@Accept WRKOBJDIR for NFS mounted ports tree and local objs.  DEF_UMASK is
different on OpenBSD.  Was this OK to commit, imp?
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.13 1997/09/09 15:11:28 imp Exp $
d406 5
a410 4
.if defined(USE_PERL5)
BUILD_DEPENDS+=		perl5.00401:${PORTSDIR}/lang/perl5
RUN_DEPENDS+=		perl5.00401:${PORTSDIR}/lang/perl5
.endif
@


1.13
log
@Merge 1.264 and 1.20 from FreeBSD's bsd.port.mk and bsd.port.subdir.mk respectively
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.11 1997/04/19 19:34:29 millert Exp $
d66 6
d304 3
d346 7
d577 1
d985 7
d995 1
d1173 1
a1173 1
	@@if [ `${SH} -c umask` != 0022 ]; then \
@


1.12
log
@COPY -> INSTALL_COPY and STRIP -> INSTALL_STRIP changes.
For some reason the previous commit did not grab these.
@
text
@d9 1
a9 1
# FreeBSD Id: bsd.port.mk,v 1.241 1996/12/25 02:27:44 imp Exp
d13 12
a24 7
# This is for this file, not for the ports that includes it, so it's
# commented out -- the person to contact if you have questions/
# suggestions about bsd.port.mk.
#
# MAINTAINER=	asami@@FreeBSD.ORG
#
# OPENBSD_MAINTAINER=	imp@@OpenBSD.ORG
d26 2
d36 1
d41 2
a42 2
#					OpenBSD/FreeBSD: /usr/ports
#					NetBSD: /usr/opt
d108 4
a111 2
#				  the "install" target.  This is the default if
#				  USE_IMAKE or USE_X11 is set.
d128 1
d130 1
a130 1
# USE_X11		- Says that the port uses X11.
d137 1
a137 1
# CONFIGURE_ENV  - Pass these env (shell-like) to configure if
d139 4
d180 1
a180 1
#				  (default: -C ${WRKDIR} -xzf).
d197 2
a198 1
#				  /etc/mk.conf.
d200 3
a202 1
#				  dynamically.  Typically set in /etc/mk.conf.
d206 2
d213 2
a214 6
# IS_DEPENDED_TARGET -
#				  The target to execute when a port is called as a
#				  dependency (default: install).  E.g., "make fetch
#				  IS_DEPENDED_TARGET=fetch" will fetch all the distfiles,
#				  including those of dependencies, without actually building
#				  any of them).
d286 3
d300 8
d312 1
a312 1
PORTSDIR?=		${DESTDIR}/usr/opt
d314 1
a314 1
PORTSDIR?=		${DESTDIR}/usr/ports
d316 2
a317 2
LOCALBASE?=		/usr/local
X11BASE?=		/usr/X11R6
d336 8
d345 9
d355 9
d365 9
d375 2
d388 5
a392 1
BUILD_DEPENDS+=               gmake:${PORTSDIR}/devel/gmake
d415 2
a416 2
.if exists(/usr/bin/md5)
MD5?=			/usr/bin/md5
d419 2
a420 2
.elif exists(/usr/local/bin/md5)
MD5?=			/usr/local/bin/md5
d422 1
a422 1
MD5?=			/sbin/md5
d430 3
a432 1
.if (${OPSYS} == "OpenBSD")
a433 2
.else
FETCH_CMD?=		/usr/bin/fetch
d475 6
a480 2
.if !defined(MTREE_LOCAL) && exists(/etc/mtree/BSD.local.dist)
MTREE_LOCAL=	/etc/mtree/BSD.local.dist
d483 1
a483 4
MTREE_ARGS?=	-U -f ${MTREE_LOCAL} -d -e -p
.if defined(USE_X11) || defined(USE_IMAKE) || !defined(MTREE_LOCAL)
NO_MTREE=	yes
.endif
d500 7
d513 4
d519 1
a519 1
PKG_ARGS=		-v -c ${PKGDIR}/COMMENT -d ${PKGDIR}/DESCR -f ${PKGDIR}/PLIST -p ${PREFIX} -P "`${MAKE} package-depends|sort -u`"
d532 2
a533 2
.if !defined(NO_MTREE) && defined(MTREE_LOCAL)
PKG_ARGS+=		-m ${MTREE_LOCAL}
d549 2
a550 1
ECHO?=		/bin/echo
d553 1
a553 6
SETENV?=	/usr/bin/env
RM?=		/bin/rm
MKDIR?=		/bin/mkdir -p
RMDIR?=		/bin/rmdir
AWK?=		/usr/bin/awk
BASENAME?=	/usr/bin/basename
d556 1
d560 5
a564 1
GUNZIP_CMD?=	/usr/bin/gunzip -f
d566 3
d577 31
a607 22
MASTER_SITE_XCONTRIB?=	\
	ftp://ftp.x.org/contrib/${MASTER_SITE_SUBDIR}/ \
	ftp://crl.dec.com/pub/X11/contrib/${MASTER_SITE_SUBDIR}/

MASTER_SITE_GNU?=	\
	ftp://prep.ai.mit.edu/pub/gnu/${MASTER_SITE_SUBDIR}/ \
	ftp://wuarchive.wustl.edu/systems/gnu/${MASTER_SITE_SUBDIR}/

MASTER_SITE_PERL_CPAN?=	\
	ftp://ftp.digital.com/pub/plan/perl/CPAN/modules/by-module/${MASTER_SITE_SUBDIR}/ \
	ftp://ftp.cdrom.com/pub/perl/CPAN/modules/by-module/${MASTER_SITE_SUBDIR}/

MASTER_SITE_TEX_CTAN?=  \
        ftp://ftp.cdrom.com/pub/tex/ctan/${MASTER_SITE_SUBDIR}/  \
        ftp://wuarchive.wustl.edu/packages/TeX/${MASTER_SITE_SUBDIR}/  \
        ftp://ftp.funet.fi/pub/TeX/CTAN/${MASTER_SITE_SUBDIR}/  \
        ftp.tex.ac.uk/public/ctan/tex-archive/${MASTER_SITE_SUBDIR}/

MASTER_SITE_SUNSITE?=	\
	ftp://sunsite.unc.edu/pub/Linux/${MASTER_SITE_SUBDIR}/ \
	ftp://ftp.infomagic.com/pub/mirrors/linux/sunsite/${MASTER_SITE_SUBDIR}/ \
	ftp://ftp.funet.fi/pub/mirrors/sunsite.unc.edu/pub/Linux/${MASTER_SITE_SUBDIR}/
d618 4
a621 3
# Empty declaration to avoid "variable MASTER_SITES recursive" error
MASTER_SITES?=
PATCH_SITES?=
d704 11
d770 1
d777 2
d783 2
d814 1
d831 5
a835 2
.if !defined(IS_DEPENDED_TARGET)
IS_DEPENDED_TARGET=	install
a836 3

.if !target(is_depended)
is_depended:	${IS_DEPENDED_TARGET}
d1010 1
a1010 1
					*.orig|*~) \
d1030 2
a1031 5
		cd ${.CURDIR} && ${SETENV} CURDIR=${.CURDIR} DISTDIR=${DISTDIR}\
		  WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} \
		  SCRIPTDIR=${SCRIPTDIR} FILESDIR=${FILESDIR} \
		  PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} DEPENDS="${DEPENDS}" \
		  X11BASE=${X11BASE} /bin/sh ${SCRIPTDIR}/configure; \
a1058 5
	@@if [ `/bin/sh -c umask` != 0022 ]; then \
		${ECHO_MSG} "===>  Warning: your umask is \"`/bin/sh -c umask`"\".; \
		${ECHO_MSG} "      If this is not desired, set it to an appropriate value"; \
		${ECHO_MSG} "      and install this port again by \`\`make reinstall''."; \
	fi
d1076 1
a1076 1
	@@if [ -e ${PKGDIR}/PLIST ]; then \
d1137 16
d1158 7
a1164 1
		${MTREE_CMD} ${MTREE_ARGS} ${PREFIX}/; \
d1173 2
a1174 5
		cd ${.CURDIR} && ${SETENV} CURDIR=${.CURDIR} DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} \
		  WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} SCRIPTDIR=${SCRIPTDIR} \
		  FILESDIR=${FILESDIR} PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} \
		  DEPENDS="${DEPENDS}" X11BASE=${X11BASE} \
			/bin/sh ${SCRIPTDIR}/${.TARGET:S/^real-/pre-/}; \
d1179 2
a1180 6
		cd ${.CURDIR} && ${SETENV} CURDIR=${.CURDIR} DISTDIR=${DISTDIR}\
		  WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} \
		  SCRIPTDIR=${SCRIPTDIR} FILESDIR=${FILESDIR} \
		  PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} DEPENDS="${DEPENDS}" \
		  X11BASE=${X11BASE} \
			/bin/sh ${SCRIPTDIR}/${.TARGET:S/^real-/post-/}; \
d1301 3
a1303 5
reinstall: pre-reinstall install

pre-reinstall:
	@@${RM} -f ${INSTALL_COOKIE}
	@@${RM} -f ${PACKAGE_COOKIE}
d1344 4
a1347 2
	@@(cd ${_DISTDIR}; \
	${RM} -f ${DISTFILES} ${PATCHFILES})
d1349 1
a1349 1
	@@${RMDIR} ${_DISTDIR}  
d1405 1
a1405 1
			CKSUM2=`${GREP} "($$file)" ${MD5_FILE} | ${AWK} '{print $$4}'`; \
d1413 3
a1415 1
			elif [ "$$CKSUM" != "$$CKSUM2" ]; then \
d1417 1
a1417 1
				exit 1; \
d1431 5
a1435 5
		  if [ "$$OK" = "true" ]; then \
			${ECHO_MSG} "Checksums OK."; \
		  else \
			${ECHO_MSG} "There may be some inconsistencies, make sure the Makefile and md5 file"; \
			${ECHO_MSG} "(\"${MD5_FILE}\") are up to date."; \
d1456 6
a1461 3
	@@for i in ${RUN_DEPENDS} ${LIB_DEPENDS} ${DEPENDS}; do \
		dir=`${ECHO} $$i | ${SED} -e 's/.*://'`; \
		(cd $$dir ; ${MAKE} package-name package-depends); \
d1506 1
a1506 2
.if defined(NO_DEPENDS)
# Just print out messages
d1509 4
a1512 3
		dir=`${ECHO} $$i | ${SED} -e 's/.*://'`; \
		if expr "$$prog" : \\/ >/dev/null; then \
			${ECHO_MSG} "===>  ${PKGNAME} depends on file:  $$prog ($$dir)"; \
d1514 1
a1514 1
			${ECHO_MSG} "===>  ${PKGNAME} depends on executable:  $$prog ($$dir)"; \
a1515 5
	done
.else
	@@for i in ${DEPENDS_TMP}; do \
		prog=`${ECHO} $$i | ${SED} -e 's/:.*//'`; \
		dir=`${ECHO} $$i | ${SED} -e 's/.*://'`; \
d1534 1
a1534 1
			${ECHO_MSG} "===>  Verifying build for $$prog in $$dir"; \
d1538 1
a1538 1
				(cd $$dir; ${MAKE} ${.MAKEFLAGS} is_depended) ; \
d1554 1
a1554 2
.if defined(NO_DEPENDS)
# Just print out messages
d1557 7
a1563 7
		dir=`${ECHO} $$i | ${SED} -e 's/.*://'`; \
		${ECHO_MSG} "===>  ${PKGNAME} depends on shared library:  $$lib ($$dir)"; \
	done
.else
	@@for i in ${LIB_DEPENDS}; do \
		lib=`${ECHO} $$i | ${SED} -e 's/:.*//'`; \
		dir=`${ECHO} $$i | ${SED} -e 's/.*://'`; \
d1568 1
a1568 1
			${ECHO_MSG} "===>  Verifying build for $$lib in $$dir"; \
d1572 1
a1572 1
				(cd $$dir; ${MAKE} ${.MAKEFLAGS} is_depended) ; \
a1583 1
	@@${ECHO_MSG} "===>  ${PKGNAME} depends on:  ${DEPENDS}"
d1585 11
a1595 4
	@@for i in ${DEPENDS}; do \
		${ECHO_MSG} "===>  Verifying build for $$i"; \
		if [ ! -d $$i ]; then \
			${ECHO_MSG} ">> No directory for $$i.  Skipping.."; \
d1597 1
a1597 1
			(cd $$i; ${MAKE} ${.MAKEFLAGS} is_depended) ; \
d1612 4
a1615 3
	@@for i in ${FETCH_DEPENDS} ${BUILD_DEPENDS} ${LIB_DEPENDS} ${RUN_DEPENDS}; do \
		dir=`${ECHO} $$i | ${SED} -e 's/.*://'`; \
		if [ -d $$dir ] ; then (cd $$dir; ${MAKE} clean); fi \
d1619 4
a1622 2
	@@for dir in ${DEPENDS}; do \
		if [ -d $$dir ] ; then (cd $$dir; ${MAKE} clean); fi \
d1629 1
a1629 5
	@@for i in ${FETCH_DEPENDS} ${BUILD_DEPENDS} ${LIB_DEPENDS}; do \
		dir=`${ECHO} $$i | ${SED} -e 's/.*://'`; \
		(cd $$dir; ${MAKE} package-name depends-list); \
	done
	@@for dir in ${DEPENDS}; do \
d1647 4
a1650 4
	@@${ECHO} -n "${PKGNAME}|${.CURDIR}|"
	@@${ECHO} -n "${PREFIX}|"
	@@if [ -f ${PKGDIR}/COMMENT ]; then \
		${ECHO} -n "`${CAT} ${PKGDIR}/COMMENT`"; \
d1653 3
a1655 3
	fi
	@@if [ -f ${PKGDIR}/DESCR ]; then \
		${ECHO} -n "|${PKGDIR}/DESCR"; \
d1658 12
a1669 6
	fi
	@@${ECHO} -n "|${MAINTAINER}|${CATEGORIES}|"
	@@cd ${.CURDIR} && ${ECHO} -n `make depends-list|sort -u`
	@@${ECHO} -n "|"
	@@cd ${.CURDIR} && ${ECHO} -n `make package-depends|sort -u`
	@@${ECHO} ""
d1718 1
a1718 1
	@@if [ ! -f ${PKGDIR}/PLIST -o ! -f ${PKGDIR}/COMMENT -o ! -f ${PKGDIR}/DESCR ]; then ${ECHO} "** Missing package files for ${PKGNAME} - installation not recorded."; exit 1; fi
d1727 2
a1728 2
		${CP} ${PKGDIR}/DESCR ${PKG_DBDIR}/${PKGNAME}/+DESC; \
		${CP} ${PKGDIR}/COMMENT ${PKG_DBDIR}/${PKGNAME}/+COMMENT; \
d1738 8
a1745 4
	else \
		${ECHO_MSG} "===>  ${PKGNAME} is already installed - perhaps an older version?"; \
		${ECHO_MSG} "      If so, you may wish to \`\`pkg_delete ${PKGNAME}'' and install"; \
		${ECHO_MSG} "      this port again by \`\`make reinstall'' to upgrade it properly."; \
@


1.11
log
@We use /etc/mk.conf not /etc/make.conf.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.10 1997/01/11 11:58:11 niklas Exp $
d423 1
a423 1
	${INSTALL} ${COPY} ${STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}
d425 1
a425 1
	${INSTALL} ${COPY} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}
d427 1
a427 1
	${INSTALL} ${COPY} -o ${SHAREOWN} -g ${SHAREGRP} -m ${SHAREMODE}
d429 1
a429 1
	${INSTALL} ${COPY} -o ${MANOWN} -g ${MANGRP} -m ${MANMODE}
@


1.10
log
@Support an ONLY_FOR_ARCHS var, that prohibits doing anything for a certain
port except for certain architectures.  If OBJMACHINE is set set WRKDIR to
work.${MACHINE}.  Fix a shell construct which pdksh interprets differently
than ash as it was written.  Make bsd.own.mk be auto-included in make(1)
invocations below this one.
@
text
@d3 1
a3 1
#	$OpenBSD: bsd.port.mk,v 1.9 1996/12/25 20:10:09 imp Exp $
d182 1
a182 1
#				  /etc/make.conf.
d184 1
a184 1
#				  dynamically.  Typically set in /etc/make.conf.
@


1.9
log
@Merge our chagnes with FreeBSD's latest changes.  We should now
have identical bsd.port.mk files again.  This file has successfully
compiled many of the archivers, gnu make, and emacs (althought the emacs
deltas have not been merged back into the FreeBSD tree yet since I don't
have it working yet).

The FreeBSD Id line may be slightly off since I generated it by hand to match
the commit I just made there.
@
text
@d3 1
a3 1
#	$OpenBSD:$
d26 3
d252 18
d278 1
a278 1
NOMANCOMPRESS?=yes
d296 3
d300 1
d416 5
d861 1
a861 1
		if !(cd ${WRKDIR} && ${EXTRACT_CMD} ${EXTRACT_BEFORE_ARGS} ${_DISTDIR}/$$file ${EXTRACT_AFTER_ARGS});\
d1628 2
@


1.8
log
@bring in bsd.own.mk
@
text
@d1 4
a4 2
# -*- mode: Fundamental; tab-width: 4; -*-
#	$OpenBSD: bsd.port.mk,v 1.7 1996/10/22 14:01:19 niklas Exp $
d9 1
a9 1
# FreeBSD Id: bsd.port.mk,v 1.226 1996/09/24 06:48:22 asami Exp $
d19 2
d26 6
a31 1
# PORTSDIR		- The root of the ports tree (default: /usr/ports).
d33 1
a33 1
#				  (default: ${PORTSDIR}/distfiles/${DIST_SUBDIR}).
d36 1
a36 2
#				  locally (default:
#				   ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/)
d38 1
a38 2
#				  (see PATCHFILES below) if not found locally (default:
#				   ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/)
d40 4
d46 1
a46 1
# MASTER_SITE_FREEBSD - If set, only use the FreeBSD master repository for
d54 1
a54 2
# CATEGORIES	- A list of descriptive categories into which this port falls
#				  (default: orphans).
d72 1
a72 1
# DIST_SUBDIR	- Suffix to ${DISTDIR} (see above).  If set, all ${DISTFILES} 
d76 3
d102 1
a102 1
# NO_CDROM		- Use dummy (do-nothing) targets if FOR_CDROM is set.
d112 1
a112 1
# BROKEN		- Port is broken.
d199 2
a200 1
# Variables that serve as convenient "aliases" for your *-install targets:
a201 1
# Use these like: "${INSTALL_PROGRAM} ${WRKSRC}/prog ${PREFIX}/bin".
d207 10
d249 3
d256 3
a258 1
.include <bsd.own.mk>
d262 4
a265 1
# by individual Makefiles.
d267 1
d270 2
a271 1
DISTDIR?=		${PORTSDIR}/distfiles/${DIST_SUBDIR}
d322 3
d326 5
d337 1
d339 3
d368 1
d370 3
d409 1
a409 1
PKG_ARGS=		-v -c ${PKGDIR}/COMMENT -d ${PKGDIR}/DESCR -f ${PKGDIR}/PLIST -p ${PREFIX} -P "`${MAKE} package-depends|sort|uniq`"
d419 3
d440 1
a440 1
CAT+=		/bin/cat
d444 6
a449 1
MKDIR?=		/bin/mkdir
d451 3
a453 1
BASENAME?=	/usr/bin/basename
a454 3
CAT?=		/bin/cat
GREP?=		/usr/bin/grep
AWK?=		/usr/bin/awk
d462 29
a490 1
# If the user has this set, go to the FreeBSD respository for everything.
d492 1
a492 1
MASTER_SITE_OVERRIDE=  ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/
d501 2
a502 2
MASTER_SITES+=	ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/
PATCH_SITES+=	ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/
d522 28
d556 6
a561 1
CATEGORIES?=	orphans
d580 32
d635 12
a646 7
.if (defined(IS_INTERACTIVE) && defined(BATCH)) || \
	(!defined(IS_INTERACTIVE) && defined(INTERACTIVE)) || \
	(defined(REQUIRES_MOTIF) && !defined(HAVE_MOTIF)) || \
	(defined(NO_CDROM) && defined(FOR_CDROM)) || \
	(defined(RESTRICTED) && defined(NO_RESTRICTED)) || \
	defined(BROKEN)
IGNORE=	yes
d650 15
d666 1
a666 1
	@@${DO_NADA}
d668 1
a668 1
	@@${DO_NADA}
d670 1
a670 5
	@@${DO_NADA}
fetch:
	@@${DO_NADA}
configure:
	@@${DO_NADA}
d672 1
a672 1
	@@${DO_NADA}
d707 6
d723 6
a734 6
# Disable describe
.if defined(NO_DESCRIBE) && !target(describe)
describe:
	@@${DO_NADA}
.endif

d741 6
d750 1
d752 2
a754 5

# Disable install
.if defined(NO_INSTALL) && !target(install)
install: build
	@@${TOUCH} ${TOUCH_FLAGS} ${INSTALL_COOKIE}
d757 4
a760 4
# Disable patch
.if defined(NO_PATCH) && !target(patch)
patch: extract
	@@${TOUCH} ${TOUCH_FLAGS} ${PATCH_COOKIE}
d775 2
a776 2
	@@if [ ! -d ${DISTDIR} ]; then ${MKDIR} -p ${DISTDIR}; fi
	@@(cd ${DISTDIR}; \
d780 1
a780 1
				${ECHO_MSG} ">> ${DISTDIR}/$$file is a broken symlink."; \
d793 1
a793 1
			${ECHO_MSG} ">> port manually into ${DISTDIR} and try again."; \
d798 1
a798 2
	@@if [ ! -d ${DISTDIR} ]; then ${MKDIR} -p ${DISTDIR}; fi
	@@(cd ${DISTDIR}; \
d802 1
a802 1
				${ECHO_MSG} ">> ${DISTDIR}/$$file is a broken symlink."; \
d815 1
a815 1
			${ECHO_MSG} ">> port manually into ${DISTDIR} and try again."; \
d828 1
a828 1
	@@${MKDIR} -p ${WRKDIR}
d831 1
a831 1
		if !(cd ${WRKDIR} && ${EXTRACT_CMD} ${EXTRACT_BEFORE_ARGS} ${DISTDIR}/$$file ${EXTRACT_AFTER_ARGS});\
d844 1
a844 1
	@@(cd ${DISTDIR}; \
d866 1
a866 1
			${ECHO_MSG} "===>  Applying FreeBSD patches for ${PKGNAME}" ; \
d874 1
a874 1
							${ECHO_MSG} "===>   Applying FreeBSD patch $$i" ; \
d922 3
a924 3
		${ECHO_MSG} "===> Warning: your umask is \"`/bin/sh -c umask`"\".; \
		${ECHO_MSG} "     If this is not desired, set it to an appropriate value"; \
		${ECHO_MSG} "     and install this port again by \`\`make reinstall''."; \
d947 1
a947 1
				if ! ${MKDIR} -p ${PKGREPOSITORY}; then \
d971 1
a971 1
			if ! ${MKDIR} -p ${PACKAGES}/$$cat; then \
d1004 1
a1004 1
	@@cd ${.CURDIR} && ${MAKE} ${.MAKEFLAGS} run-depends
d1034 14
a1047 1
.if make(real-install)  && !defined(NO_PKG_REGISTER)
d1173 3
d1178 7
a1184 1
	@@${RM} -rf ${WRKDIR}
d1190 15
d1209 2
a1210 2
	@@if [ ! -d ${DISTDIR} ]; then ${MKDIR} -p ${DISTDIR}; fi
	@@(cd ${DISTDIR}; \
d1221 1
a1221 1
	@@(cd ${DISTDIR}; \
d1238 1
a1238 1
	@@if [ ! -d ${FILESDIR} ]; then ${MKDIR} -p ${FILESDIR}; fi
d1241 1
a1241 1
	 for file in ${DISTFILES} ${PATCHFILES}; do \
d1244 3
d1254 2
a1255 2
		(cd ${DISTDIR}; OK=""; \
		  for file in ${DISTFILES} ${PATCHFILES}; do \
d1259 5
a1263 1
				${ECHO_MSG} ">> No checksum recorded for $$file"; \
d1266 1
a1266 1
				${ECHO_MSG} ">> Checksum mismatch for $$file"; \
d1270 12
a1281 1
		  if [ "$$OK" = "" ]; then \
d1284 2
a1285 1
			${ECHO_MSG} "Checksums OK for files that have them."; \
d1377 1
a1377 1
			if which -s "$$prog"; then \
d1455 16
d1473 1
a1473 1
	@@for i in ${FETCH_DEPENDS} ${BUILD_DEPENDS} ${LIB_DEPENDS} ${DEPENDS}; do \
d1475 4
a1478 1
		(cd $$dir ; ${MAKE} package-name depends-list); \
d1508 1
a1508 1
	@@cd ${.CURDIR} && ${ECHO} -n `make depends-list|sort|uniq`
d1510 1
a1510 1
	@@cd ${.CURDIR} && ${ECHO} -n `make package-depends|sort|uniq`
d1540 1
a1540 1
	@@${ECHO} -n `make depends-list | sort | uniq`
d1549 1
a1549 1
	@@${ECHO} -n `make package-depends | sort | uniq`
d1561 1
a1561 1
	@@if [ ! -d ${PKG_DBDIR} ]; then ${RM} -f ${PKG_DBDIR}; ${MKDIR} -p ${PKG_DBDIR}; fi
d1567 1
a1567 1
		${MKDIR} -p ${PKG_DBDIR}/${PKGNAME}; \
d1581 3
a1583 3
		${ECHO_MSG} "===> ${PKGNAME} is already installed - perhaps an older version?"; \
		${ECHO_MSG} "     If so, you may wish to \`\`pkg_delete ${PKGNAME}'' and install"; \
		${ECHO_MSG} "     this port again by \`\`make reinstall'' to upgrade it properly."; \
@


1.7
log
@Sync with FreeBSD
@
text
@d2 1
a2 1
#	$OpenBSD: bsd.port.mk,v 1.6 1996/08/23 11:37:41 niklas Exp $
d230 1
@


1.6
log
@Merge changes from FreeBSD
@
text
@d2 1
a2 1
#	$OpenBSD: bsd.port.mk,v 1.5 1996/06/30 18:25:29 tholo Exp $
d7 1
a7 1
# FreeBSD Id: bsd.port.mk,v 1.221 1996/08/18 10:53:16 asami Exp $
d116 19
a134 17
# FETCH_DEPENDS - A list of "prog:dir" pairs of other ports this
#				  package depends in the "fetch" stage.  "prog" is the
#				  name of an executable.  make will search your $PATH
#				  for it and go into "dir" to do a "make all install"
#				  if it's not found.
# BUILD_DEPENDS - A list of "prog:dir" pairs of other ports this
#				  package depends to build (between the "extract"
#				  and "build" stages, inclusive).  "prog" is the name
#				  of an executable.  make will search your $PATH for
#				  it and go into "dir" to do a "make all install" if
#				  it's not found.
# RUN_DEPENDS	- A list of "prog:dir" pairs of other ports this package
#				  depends to run.  "prog" is the name of an
#				  executable.  make will search your $PATH for it and
#				  go into "dir" to do a "make all install" if it's not
#				  found.  This will be build during the "install" stage
#				  and its name will be put into the package as well.
d410 3
a418 1
MASTER_SITES?=	# to avoid "variable MASTER_SITES recursive" error
d423 10
d713 1
a713 1
	@@if [ -f ${SCRIPTDIR}/${CONFIGURE_SCRIPT} ]; then \
d718 1
a718 1
		  X11BASE=${X11BASE} /bin/sh ${SCRIPTDIR}/${CONFIGURE_SCRIPT}; \
d1227 1
a1227 1
		dir=`/bin/echo $$i | /usr/bin/sed -e 's/.*://'`; \
@


1.5
log
@Our tar(1) now lives in /bin
@
text
@d2 1
a2 1
#	$OpenBSD: bsd.port.mk,v 1.4 1996/06/11 10:38:02 deraadt Exp $
d7 2
d11 6
a47 1
# 
d87 4
d92 1
a92 2
# NO_CONFIGURE	- Use a dummy (do-nothing) configure target.
# NO_BUILD		- Use a dummy (do-nothing) build target.
d94 1
a94 2
# NO_INSTALL	- Use a dummy (do-nothing) install target.
# NO_CDROM		- Use dummy (do-nothing) targets if FOR_CDROM is set.
d122 2
a123 2
#				  package depends to build (somewhere between the
#				  "extract" to "build" stage).  "prog" is the name
d152 6
a157 2
# NCFTP			- Full path to ncftp command if not in $PATH (default: ncftp).
# NCFTPFLAGS    - Arguments to ${NCFTP} (default: -N).
d166 4
a169 1
#				  dynamically.
d181 10
a191 1
# 
d228 1
d281 1
a281 1
DO_NADA?=		echo -n
d293 1
a293 2
NCFTP?=			/usr/bin/ftp
NCFTPFLAGS?=
d302 1
d306 1
d339 10
d414 1
d497 1
a497 1
	@@${SETENV} CURDIR=${.CURDIR} DISTNAME=${DISTNAME} \
d543 6
d598 1
a598 2
				(${NCFTP} ${NCFTPFLAGS} $${site}$${file} ${NCFTPTAIL} || true); \
				if [ -f $$file -o -f `${BASENAME} $$file` ]; then \
d602 1
a602 1
			${ECHO_MSG} ">> Couldn't fetch it - please try to retreive this";\
d621 1
a621 2
				(${NCFTP} ${NCFTPFLAGS} $${site}$${file} ${NCFTPTAIL} || true); \
				if [ -f $$file -o -f `${BASENAME} $$file` ]; then \
d625 1
a625 1
			${ECHO_MSG} ">> Couldn't fetch it - please try to retreive this";\
d637 1
d640 1
d642 1
a642 1
		if ! (cd ${WRKDIR};${EXTRACT_CMD} ${EXTRACT_BEFORE_ARGS} ${DISTDIR}/$$file ${EXTRACT_AFTER_ARGS});\
a654 14
.if defined(PATCH_DEBUG)
	@@(cd ${DISTDIR}; \
	  for i in ${PATCHFILES}; do \
		${ECHO_MSG} "===>   Applying distribution patch $$i" ; \
		case $$i in \
			*.Z|*.gz) \
				${GZCAT} $$i | ${PATCH} ${PATCH_DIST_ARGS}; \
				;; \
			*) \
				${PATCH} ${PATCH_DIST_ARGS} < $$i; \
				;; \
		esac; \
	  done)
.else
d657 3
a669 2
.endif
.if defined(PATCH_DEBUG)
d671 21
a691 26
		${ECHO_MSG} "===>  Applying FreeBSD patches for ${PKGNAME}" ; \
		for i in ${PATCHDIR}/patch-*; do \
			case $$i in \
				*.orig|*~) \
					${ECHO_MSG} "===>   Ignoring patchfile $$i" ; \
					;; \
				*) \
					${ECHO_MSG} "===>   Applying FreeBSD patch $$i" ; \
					${PATCH} ${PATCH_ARGS} < $$i; \
					;; \
			esac; \
		done; \
	fi
.else
	@@if [ -d ${PATCHDIR} ]; then \
		${ECHO_MSG} "===>  Applying FreeBSD patches for ${PKGNAME}" ; \
		for i in ${PATCHDIR}/patch-*; do \
			case $$i in \
				*.orig|*~) \
					${ECHO_MSG} "===>   Ignoring patchfile $$i" ; \
					;; \
				*) \
					${PATCH} ${PATCH_ARGS} < $$i; \
					;; \
			esac; \
		done;\
a693 1
.endif
d699 6
a704 6
	@@if [ -f ${SCRIPTDIR}/configure ]; then \
		${SETENV} CURDIR=${.CURDIR} DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} \
		  WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} SCRIPTDIR=${SCRIPTDIR} \
		  FILESDIR=${FILESDIR} PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} \
		  DEPENDS="${DEPENDS}" X11BASE=${X11BASE} \
		/bin/sh ${SCRIPTDIR}/configure; \
d707 1
a707 1
	@@(cd ${WRKSRC}; CC="${CC}" ac_cv_path_CC="${CC}" CFLAGS="${CFLAGS}" \
d709 1
a709 1
	    INSTALL_PROGRAM="/usr/bin/install ${COPY} ${STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}" \
d713 1
a713 1
	@@(cd ${WRKSRC}; ${XMKMF})
d732 5
d738 1
a738 1
	@@(cd ${WRKSRC}; ${SETENV} ${MAKE_ENV} ${GMAKE} ${MAKE_FLAGS} ${MAKEFILE} ${INSTALL_TARGET})
d740 1
a740 1
	@@(cd ${WRKSRC}; ${SETENV} ${MAKE_ENV} ${GMAKE} ${MAKE_FLAGS} ${MAKEFILE} install.man)
d743 1
a743 1
	@@(cd ${WRKSRC}; ${SETENV} ${MAKE_ENV} ${MAKE} ${MAKE_FLAGS} ${MAKEFILE} ${INSTALL_TARGET})
d745 1
a745 1
	@@(cd ${WRKSRC}; ${SETENV} ${MAKE_ENV} ${MAKE} ${MAKE_FLAGS} ${MAKEFILE} install.man)
d809 1
a809 1
	@@${MAKE} ${.MAKEFLAGS} fetch-depends
d812 1
a812 1
	@@${MAKE} ${.MAKEFLAGS} build-depends lib-depends misc-depends
d815 1
a815 1
	@@${MAKE} ${.MAKEFLAGS} run-depends
d827 1
a827 1
	@@${MAKE} ${.MAKEFLAGS} ${.TARGET:S/^real-/pre-/}
d829 1
a829 1
		${SETENV} CURDIR=${.CURDIR} DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} \
d835 2
a836 2
	@@${MAKE} ${.MAKEFLAGS} ${.TARGET:S/^real-/do-/}
	@@${MAKE} ${.MAKEFLAGS} ${.TARGET:S/^real-/post-/}
d838 5
a842 4
		${SETENV} CURDIR=${.CURDIR} DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} \
		  WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} SCRIPTDIR=${SCRIPTDIR} \
		  FILESDIR=${FILESDIR} PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} \
		  DEPENDS="${DEPENDS}" X11BASE=${X11BASE} \
d845 2
a846 2
.if make(real-install)
	@@${MAKE} ${.MAKEFLAGS} fake-pkg
d865 1
a865 1
	@@${MAKE} ${.MAKEFLAGS} real-fetch
d893 1
a893 1
	@@${MAKE} ${.MAKEFLAGS} real-extract
d895 1
a895 1
	@@${MAKE} ${.MAKEFLAGS} real-patch
d897 1
a897 1
	@@${MAKE} ${.MAKEFLAGS} real-configure
d899 1
a899 1
	@@${MAKE} ${.MAKEFLAGS} real-build
d901 1
a901 1
	@@${MAKE} ${.MAKEFLAGS} real-install
d903 1
a903 1
	@@${MAKE} ${.MAKEFLAGS} real-package
d943 1
a943 1
	@@${MAKE} PATCH_CHECK_ONLY=yes ${.MAKEFLAGS} patch
d972 3
a974 3
	@@${RM} -f ${EXTRACT_COOKIE} ${CONFIGURE_COOKIE} ${INSTALL_COOKIE} \
		${BUILD_COOKIE} ${PATCH_COOKIE}
.if defined(NO_WRKDIR)
a975 2
.else
	@@${RM} -rf ${WRKDIR}
d988 1
a988 1
				${ECHO} -n ${NCFTP} ${NCFTPFLAGS} $${site}$${file} "${NCFTPTAIL}" '||' ; \
d999 1
a999 1
				${ECHO} -n ${NCFTP} ${NCFTPFLAGS} $${site}$${file} "${NCFTPTAIL}" '||' ; \
d1027 1
a1027 1
			CKSUM=`${MD5} $$file | ${AWK} '{print $$4}'`; \
d1081 1
a1081 1
	@@${MAKE} ${.MAKEFLAGS} PACKAGE_NOINSTALL=yes real-package
d1090 3
a1092 3
	@@${MAKE} ${.MAKEFLAGS} fetch-depends
	@@${MAKE} ${.MAKEFLAGS} build-depends
	@@${MAKE} ${.MAKEFLAGS} run-depends
d1231 1
a1231 1
	@@${ECHO} -n "${PKGNAME}|${.CURDIR}/${PKGNAME}|"
d1244 1
a1244 1
	@@${ECHO} -n `make depends-list|sort|uniq`
d1246 1
a1246 1
	@@${ECHO} -n `make package-depends|sort|uniq`
d1257 1
a1257 1
	@@make README.html
@


1.4
log
@move to bin/md5 for `greater accessibility'
@
text
@d2 1
a2 1
#	$OpenBSD: bsd.port.mk,v 1.3 1996/06/10 11:23:16 niklas Exp $
d293 1
a293 1
EXTRACT_CMD?=	/usr/bin/tar
@


1.3
log
@Reintroduce the long patch(1) options
@
text
@d2 1
a2 1
#	$OpenBSD: bsd.port.mk,v 1.2 1996/06/03 23:07:28 niklas Exp $
d260 1
a260 1
MD5?=			/sbin/md5
@


1.2
log
@Use our ftp & patch
@
text
@d2 1
a2 1
#	$OpenBSD: bsd.port.mk,v 1.1 1996/06/03 22:47:10 niklas Exp $
d280 2
a281 2
PATCH_ARGS?=	-d ${WRKSRC} -N -s -E ${PATCH_STRIP}
PATCH_DIST_ARGS?=	-d ${WRKSRC} -N -s -E ${PATCH_DIST_STRIP}
@


1.1
log
@Initial import of "ports" mk-files from FreeBSD, probably needs work
@
text
@d2 1
a2 1
#	$OpenBSD$
d267 2
a268 2
NCFTP?=			/usr/bin/ncftp
NCFTPFLAGS?=	-N
d280 2
a281 2
PATCH_ARGS?=	-d ${WRKSRC} --forward --quiet -E ${PATCH_STRIP}
PATCH_DIST_ARGS?=	-d ${WRKSRC} --forward --quiet -E ${PATCH_DIST_STRIP}
@
