head	1.75;
access;
symbols
	OPENBSD_6_2_BASE:1.75
	OPENBSD_6_1:1.70.0.8
	OPENBSD_6_1_BASE:1.70
	OPENBSD_6_0:1.70.0.4
	OPENBSD_6_0_BASE:1.70
	OPENBSD_5_9:1.70.0.2
	OPENBSD_5_9_BASE:1.70
	OPENBSD_5_8:1.68.0.4
	OPENBSD_5_8_BASE:1.68
	OPENBSD_5_7:1.66.0.2
	OPENBSD_5_7_BASE:1.66
	OPENBSD_5_6:1.63.0.4
	OPENBSD_5_6_BASE:1.63
	OPENBSD_5_5:1.62.0.4
	OPENBSD_5_5_BASE:1.62
	OPENBSD_5_4:1.59.0.2
	OPENBSD_5_4_BASE:1.59
	OPENBSD_5_3:1.56.0.2
	OPENBSD_5_3_BASE:1.56
	OPENBSD_5_2:1.53.0.2
	OPENBSD_5_2_BASE:1.53
	OPENBSD_5_1_BASE:1.52
	OPENBSD_5_1:1.52.0.4
	OPENBSD_5_0:1.52.0.2
	OPENBSD_5_0_BASE:1.52
	OPENBSD_4_9:1.50.0.2
	OPENBSD_4_9_BASE:1.50
	OPENBSD_4_8:1.49.0.18
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.49.0.14
	OPENBSD_4_7_BASE:1.49
	OPENBSD_4_6:1.49.0.16
	OPENBSD_4_6_BASE:1.49
	OPENBSD_4_5:1.49.0.12
	OPENBSD_4_5_BASE:1.49
	OPENBSD_4_4:1.49.0.10
	OPENBSD_4_4_BASE:1.49
	OPENBSD_4_3:1.49.0.8
	OPENBSD_4_3_BASE:1.49
	OPENBSD_4_2:1.49.0.6
	OPENBSD_4_2_BASE:1.49
	OPENBSD_4_1:1.49.0.4
	OPENBSD_4_1_BASE:1.49
	OPENBSD_4_0:1.49.0.2
	OPENBSD_4_0_BASE:1.49
	OPENBSD_3_9:1.46.0.2
	OPENBSD_3_9_BASE:1.46
	OPENBSD_3_8:1.44.0.2
	OPENBSD_3_8_BASE:1.44
	OPENBSD_3_7:1.43.0.2
	OPENBSD_3_7_BASE:1.43
	OPENBSD_3_6:1.39.0.2
	OPENBSD_3_6_BASE:1.39
	OPENBSD_3_5:1.38.0.4
	OPENBSD_3_5_BASE:1.38
	OPENBSD_3_4:1.38.0.2
	OPENBSD_3_4_BASE:1.38
	OPENBSD_3_3:1.34.0.2
	OPENBSD_3_3_BASE:1.34
	OPENBSD_3_2:1.33.0.2
	OPENBSD_3_2_BASE:1.33
	OPENBSD_3_1:1.30.0.4
	OPENBSD_3_1_BASE:1.30
	OPENBSD_3_0:1.30.0.2
	OPENBSD_3_0_BASE:1.30
	OPENBSD_2_9:1.23.0.2
	OPENBSD_2_9_BASE:1.23
	OPENBSD_2_8:1.21.0.4
	OPENBSD_2_8_BASE:1.21
	OPENBSD_2_7:1.21.0.2
	OPENBSD_2_7_BASE:1.21
	OPENBSD_2_6:1.19.0.2
	OPENBSD_2_6_BASE:1.19
	OPENBSD_2_5:1.18.0.2
	OPENBSD_2_5_BASE:1.18
	OPENBSD_2_4:1.16.0.2
	OPENBSD_2_4_BASE:1.16
	OPENBSD_2_3:1.15.0.2
	OPENBSD_2_3_BASE:1.15
	OPENBSD_2_2:1.13.0.4
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.13.0.2
	OPENBSD_2_1_BASE:1.13
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.75
date	2017.07.21.11.00.24;	author schwarze;	state Exp;
branches;
next	1.74;
commitid	BoVEv4kNJ9HJoATM;

1.74
date	2017.07.09.15.29.52;	author espie;	state Exp;
branches;
next	1.73;
commitid	dZKblCHZNF8CZTov;

1.73
date	2017.07.04.00.59.11;	author espie;	state Exp;
branches;
next	1.72;
commitid	8BJWEohlaP5NvWVv;

1.72
date	2017.07.01.14.41.54;	author espie;	state Exp;
branches;
next	1.71;
commitid	zynor6caSpxwFDub;

1.71
date	2017.06.16.10.20.52;	author espie;	state Exp;
branches;
next	1.70;
commitid	eSEJ9O1N3YyVxZmj;

1.70
date	2015.11.14.23.56.50;	author deraadt;	state Exp;
branches;
next	1.69;
commitid	BrKaQHWTbuUdYB4P;

1.69
date	2015.10.26.10.43.42;	author bluhm;	state Exp;
branches;
next	1.68;
commitid	TxqyjUVPfw3iA85U;

1.68
date	2015.07.20.23.52.29;	author yasuoka;	state Exp;
branches;
next	1.67;
commitid	q7mg0LgasdXqIt1u;

1.67
date	2015.05.14.02.56.01;	author jsg;	state Exp;
branches;
next	1.66;
commitid	gKxrs8uC9DvCRIXP;

1.66
date	2014.12.23.16.35.53;	author deraadt;	state Exp;
branches;
next	1.65;
commitid	2AVPzNipEWb1immD;

1.65
date	2014.10.31.13.46.17;	author jsing;	state Exp;
branches;
next	1.64;
commitid	y63FmUITd26yVanM;

1.64
date	2014.09.29.19.37.51;	author gsoares;	state Exp;
branches;
next	1.63;
commitid	HyPEuvt6lUPuZRWv;

1.63
date	2014.04.23.18.24.23;	author ajacoutot;	state Exp;
branches;
next	1.62;

1.62
date	2013.12.04.22.58.24;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2013.10.15.22.40.00;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2013.08.10.10.19.35;	author ajacoutot;	state Exp;
branches;
next	1.59;

1.59
date	2013.07.11.07.03.46;	author ajacoutot;	state Exp;
branches;
next	1.58;

1.58
date	2013.07.05.21.29.51;	author miod;	state Exp;
branches;
next	1.57;

1.57
date	2013.03.18.10.51.35;	author mpi;	state Exp;
branches;
next	1.56;

1.56
date	2012.08.28.16.45.03;	author pascal;	state Exp;
branches;
next	1.55;

1.55
date	2012.08.28.14.26.47;	author pascal;	state Exp;
branches;
next	1.54;

1.54
date	2012.08.22.19.41.56;	author pascal;	state Exp;
branches;
next	1.53;

1.53
date	2012.04.08.15.56.28;	author jsg;	state Exp;
branches;
next	1.52;

1.52
date	2011.07.18.06.40.18;	author guenther;	state Exp;
branches;
next	1.51;

1.51
date	2011.07.16.23.34.21;	author guenther;	state Exp;
branches;
next	1.50;

1.50
date	2010.11.18.21.16.57;	author miod;	state Exp;
branches;
next	1.49;

1.49
date	2006.06.30.19.00.29;	author otto;	state Exp;
branches;
next	1.48;

1.48
date	2006.06.26.03.12.37;	author brad;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.27.23.01.21;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2005.09.16.21.23.21;	author espie;	state Exp;
branches;
next	1.45;

1.45
date	2005.09.15.07.12.18;	author espie;	state Exp;
branches;
next	1.44;

1.44
date	2005.04.15.17.18.57;	author espie;	state Exp;
branches;
next	1.43;

1.43
date	2004.12.23.23.58.36;	author espie;	state Exp;
branches;
next	1.42;

1.42
date	2004.10.20.09.28.17;	author espie;	state Exp;
branches;
next	1.41;

1.41
date	2004.10.18.10.07.09;	author espie;	state Exp;
branches;
next	1.40;

1.40
date	2004.10.13.16.47.50;	author espie;	state Exp;
branches;
next	1.39;

1.39
date	2004.06.03.20.51.07;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2003.08.29.00.04.41;	author jolan;	state Exp;
branches;
next	1.37;

1.37
date	2003.08.11.17.31.51;	author jakob;	state Exp;
branches;
next	1.36;

1.36
date	2003.07.16.01.29.34;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2003.07.08.13.59.13;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2002.11.10.23.03.55;	author mickey;	state Exp;
branches;
next	1.33;

1.33
date	2002.07.25.18.19.06;	author art;	state Exp;
branches;
next	1.32;

1.32
date	2002.06.25.15.33.18;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2002.05.11.00.20.21;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2001.08.23.16.39.33;	author art;	state Exp;
branches;
next	1.29;

1.29
date	2001.08.16.15.12.48;	author brad;	state Exp;
branches;
next	1.28;

1.28
date	2001.07.20.23.02.21;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2001.07.20.19.48.26;	author mickey;	state Exp;
branches;
next	1.26;

1.26
date	2001.07.20.19.15.39;	author mickey;	state Exp;
branches;
next	1.25;

1.25
date	2001.07.19.23.16.17;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2001.07.18.13.23.03;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2001.01.31.06.41.18;	author art;	state Exp;
branches;
next	1.22;

1.22
date	2000.12.12.00.46.49;	author provos;	state Exp;
branches;
next	1.21;

1.21
date	2000.02.11.15.02.00;	author ho;	state Exp;
branches;
next	1.20;

1.20
date	99.11.26.21.47.09;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	99.09.29.19.21.57;	author beck;	state Exp;
branches;
next	1.18;

1.18
date	98.12.31.23.49.46;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	98.12.19.19.07.34;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	98.07.27.21.11.33;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	98.03.26.23.47.33;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.11.05.09.51.06;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.04.27.21.38.34;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	97.03.26.00.34.54;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.02.26.03.55.16;	author downsj;	state Exp;
branches;
next	1.10;

1.10
date	97.02.09.16.41.50;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.02.09.16.11.15;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	97.01.15.00.36.56;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.12.08.14.42.32;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	96.11.14.14.41.39;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.11.14.14.21.23;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.06.02.05.58.20;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.04.22.01.28.36;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.05.11.12.59;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.75
log
@Garbage collect unused manual page .SUFFIXES, left over
years ago when we formatted manual pages at build time.
Opportunity for cleanup discovered by espie@@.
Make build & release in base and Xenocara checked myself,
and checked in a bulk build by ajacoutot@@.
OK espie@@ millert@@ deraadt@@
@
text
@#	$OpenBSD: bsd.prog.mk,v 1.74 2017/07/09 15:29:52 espie Exp $
#	$NetBSD: bsd.prog.mk,v 1.55 1996/04/08 21:19:26 jtc Exp $
#	@@(#)bsd.prog.mk	5.26 (Berkeley) 6/25/91

.if exists(${.CURDIR}/../Makefile.inc)
.include "${.CURDIR}/../Makefile.inc"
.endif

.include <bsd.own.mk>

.SUFFIXES: .out .o .c .cc .cpp .C .cxx .y .l .s

.if (defined(LDSTATIC) && !defined(STATICPIE)) || defined(NOPIE)
CFLAGS+=       ${NOPIE_FLAGS}
CXXFLAGS+=     ${NOPIE_FLAGS}
AFLAGS+=       ${NOPIE_FLAGS}
LDFLAGS+=      ${NOPIE_LDFLAGS}
.endif

.if ${WARNINGS:L} == "yes"
CFLAGS+=       ${CDIAGFLAGS}
CXXFLAGS+=     ${CXXDIAGFLAGS}
.endif
CFLAGS+=	${COPTS}
CXXFLAGS+=     ${CXXOPTS}

CRTBEGIN?=       ${DESTDIR}/usr/lib/crtbegin.o
CRTEND?=         ${DESTDIR}/usr/lib/crtend.o

LIBCRT0?=	${DESTDIR}/usr/lib/crt0.o
LIBC?=		${DESTDIR}/usr/lib/libc.a
LIBCRYPTO?=	${DESTDIR}/usr/lib/libcrypto.a
LIBCURSES?=	${DESTDIR}/usr/lib/libcurses.a
LIBEDIT?=	${DESTDIR}/usr/lib/libedit.a
LIBEVENT?=	${DESTDIR}/usr/lib/libevent.a
LIBEXPAT?=	${DESTDIR}/usr/lib/libexpat.a
LIBFORM?=	${DESTDIR}/usr/lib/libform.a
LIBFORMW?=	${DESTDIR}/usr/lib/libformw.a
LIBKEYNOTE?=	${DESTDIR}/usr/lib/libkeynote.a
LIBKVM?=	${DESTDIR}/usr/lib/libkvm.a
LIBL?=		${DESTDIR}/usr/lib/libl.a
LIBM?=		${DESTDIR}/usr/lib/libm.a
LIBMENU?=	${DESTDIR}/usr/lib/libmenu.a
LIBMENUW?=	${DESTDIR}/usr/lib/libmenuw.a
LIBRADIUS?=	${DESTDIR}/usr/lib/libradius.a
LIBOSSAUDIO?=	${DESTDIR}/usr/lib/libossaudio.a
LIBPANEL?=	${DESTDIR}/usr/lib/libpanel.a
LIBPANELW?=	${DESTDIR}/usr/lib/libpanelw.a
LIBPCAP?=	${DESTDIR}/usr/lib/libpcap.a
LIBPERL?=	${DESTDIR}/usr/lib/libperl.a
LIBPTHREAD?=	${DESTDIR}/usr/lib/libpthread.a
LIBRPCSVC?=	${DESTDIR}/usr/lib/librpcsvc.a
LIBSKEY?=	${DESTDIR}/usr/lib/libskey.a
LIBSNDIO?=	${DESTDIR}/usr/lib/libsndio.a
LIBSSL?=	${DESTDIR}/usr/lib/libssl.a
LIBTLS?=	${DESTDIR}/usr/lib/libtls.a
LIBTERMCAP?=	${DESTDIR}/usr/lib/libtermcap.a
LIBTERMLIB?=	${DESTDIR}/usr/lib/libtermlib.a
LIBUSB?=	${DESTDIR}/usr/lib/libusbhid.a
LIBUTIL?=	${DESTDIR}/usr/lib/libutil.a
LIBY?=		${DESTDIR}/usr/lib/liby.a
LIBZ?=		${DESTDIR}/usr/lib/libz.a

.if ${MACHINE_ARCH} == "alpha" || ${MACHINE_ARCH} == "amd64" || \
    ${MACHINE_ARCH} == "arm" || ${MACHINE_ARCH} == "i386"
LIBARCH?=	${DESTDIR}/usr/lib/lib${MACHINE_ARCH}.a
.else
LIBARCH?=
.endif

.if defined(PROG)
SRCS ?=	${PROG}.c
MAN ?= ${PROG}.1
.endif

# if we have several progs, define appropriate vars instead
.if defined(PROGS)
.  for p in ${PROGS}
SRCS_$p ?= $p.c
OBJS_$p = ${SRCS_$p:N*.h:N*.sh:R:S/$/.o/}
DPADD_$p ?= ${DPADD}
LDADD_$p ?= ${LDADD}

# XXX still create SRCS, because it's what bsd.dep.mk understands
SRCS += ${SRCS_$p}

# and we can write the actual target already
.    if defined(OBJS_$p) && !empty(OBJS_$p)
.      if !empty(SRCS_$p:M*.C) || !empty(SRCS_$p:M*.cc) || \
	!empty(SRCS_$p:M*.cpp) || !empty(SRCS_$p:M*.cxx)
$p: ${LIBCRT0} ${OBJS_$p} ${LIBC} ${CRTBEGIN} ${CRTEND} ${DPADD_$p}
	${CXX} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} ${OBJS_$p} ${LDADD_$p}
.      else
$p: ${LIBCRT0} ${OBJS_$p} ${LIBC} ${CRTBEGIN} ${CRTEND} ${DPADD_$p}
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} ${OBJS_$p} ${LDADD_$p}
.      endif
.    endif
.  endfor
MAN ?= ${PROGS:=.1}
.endif

.if defined(PROG) || defined(PROGS)
# ... so we create appropriate full list of obj, dep, lex, yacc...
.  if !empty(SRCS:N*.h:N*.sh)
OBJS+=	${SRCS:N*.h:N*.sh:R:S/$/.o/}
DEPS+=	${OBJS:.o=.d}
.  endif

_LEXINTM?=${SRCS:M*.l:.l=.c}
_YACCINTM?=${SRCS:M*.y:.y=.c}
.endif

.if defined(PROG)
.  if defined(OBJS) && !empty(OBJS)
.    if !empty(SRCS:M*.C) || !empty(SRCS:M*.cc) || \
	!empty(SRCS:M*.cpp) || !empty(SRCS:M*.cxx)
${PROG}: ${LIBCRT0} ${OBJS} ${LIBC} ${CRTBEGIN} ${CRTEND} ${DPADD}
	${CXX} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} ${OBJS} ${LDADD}
.    else
${PROG}: ${LIBCRT0} ${OBJS} ${LIBC} ${CRTBEGIN} ${CRTEND} ${DPADD}
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} ${OBJS} ${LDADD}
.    endif
.  endif	# defined(OBJS) && !empty(OBJS)
.endif

.MAIN: all
all: ${PROG} ${PROGS} _SUBDIRUSE

BUILDAFTER += ${PROG} ${PROGS} ${OBJS}

.if !target(clean)
clean: _SUBDIRUSE
	rm -f a.out [Ee]rrs mklog *.core y.tab.h \
	    ${PROG} ${PROGS} ${OBJS} ${_LEXINTM} ${_YACCINTM} ${CLEANFILES}
.endif

cleandir: _SUBDIRUSE clean

.if !target(install)
.if !target(beforeinstall)
beforeinstall:
.endif
.if !target(afterinstall)
afterinstall:
.endif

.if !target(realinstall)
realinstall:
.  if defined(PROG)
	${INSTALL} ${INSTALL_COPY} -S ${INSTALL_STRIP} \
	    -o ${BINOWN} -g ${BINGRP} \
	    -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}/${PROG}
.  endif
.  if defined(PROGS)
.    for p in ${PROGS}
	${INSTALL} ${INSTALL_COPY} -S ${INSTALL_STRIP} \
	    -o ${BINOWN} -g ${BINGRP} \
	    -m ${BINMODE} $p ${DESTDIR}${BINDIR}/$p
.    endfor
.  endif
.endif

install: maninstall _SUBDIRUSE
.if defined(LINKS) && !empty(LINKS)
.  for lnk file in ${LINKS}
	@@l=${DESTDIR}${lnk}; \
	 t=${DESTDIR}${file}; \
	 echo $$t -\> $$l; \
	 rm -f $$t; ln $$l $$t
.  endfor
.endif

maninstall: afterinstall
afterinstall: realinstall
realinstall: beforeinstall
.endif

.if !defined(NOMAN)
.include <bsd.man.mk>
.endif

# if we already got bsd.lib.mk we don't want to wreck that
.if !defined(_LIBS)
.s.o:
	${COMPILE.S} -MD -MF ${.TARGET:R}.d -o $@@ ${.IMPSRC}

.S.o:
	${COMPILE.S} -MD -MF ${.TARGET:R}.d -o $@@ ${.IMPSRC}
.endif

.include <bsd.obj.mk>
.include <bsd.dep.mk>
.include <bsd.subdir.mk>
.include <bsd.sys.mk>
@


1.74
log
@add support to compile several progs at once us
by using alternate setup
PROGS = a b c along with SRCS_a = ... , SRCS_b = ... , SRCS_c = ...

okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.73 2017/07/04 00:59:11 espie Exp $
d11 1
a11 1
.SUFFIXES: .out .o .c .cc .cpp .C .cxx .y .l .s .8 .7 .6 .5 .4 .3 .2 .1 .0
@


1.73
log
@let BUILDFIRST just build first, using the same trick guenther@@ did in
kernel Makefiles (thank you!), also add lex and yacc generated files to
that list.

Let those lex/yacc variables be defined for bsd.lib.mk as well.

Complete the SRCS -> OBJS hints with the library dependency

This should fix most dependency problems.

Commit now, so that people can check if something else is still amiss.
krw@@ agrees
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.72 2017/07/01 14:41:54 espie Exp $
d72 32
a103 1
SRCS?=	${PROG}.c
d106 2
a107 1
DEPS+=	${OBJS:R:S/$/.d/}
d111 1
a111 1
.  endif
d113 1
d115 2
a116 2
.    if !empty(SRCS:M*.C) || !empty(SRCS:M*.cc) || !empty(SRCS:M*.cpp) || \
       !empty(SRCS:M*.cxx)
d124 1
a124 5

.  if	!defined(MAN)
MAN=	${PROG}.1
.  endif	# !defined(MAN)
.endif	# defined(PROG)
d127 1
a127 1
all: ${PROG} _SUBDIRUSE
d129 1
a129 1
BUILDAFTER += ${PROG} ${OBJS}
d134 1
a134 1
	    ${PROG} ${OBJS} ${_LEXINTM} ${_YACCINTM} ${CLEANFILES}
d149 1
a149 1
.if defined(PROG)
d153 8
a160 1
.endif
@


1.72
log
@effectively kill depend as an independant target (there are a few corners
where a separate depend step is still needed, mostly gcc3 and mesa).

Use of BUILDFIRST is mostly enough to make sure important stuff is built
first.

Otherwise, this makes use of -M* compiler options to generate dependencies
on the fly.  There is a bit of behind-the-scene for targets with several
steps (like yacc and/or libraries) and the compiler needs extra hand-holding
with assembler files (don't know why, don't care).

Idea based on guenther@@'s initial kernel work, loads of input from
drahn, aoyama, tb, etc.

okay tb@@

"why wait" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.71 2017/06/16 10:20:52 espie Exp $
d77 2
a78 2
_LEXINTM+=${SRCS:M*.l:.l=.c}
_YACCINTM+=${SRCS:M*.y:.y=.c}
@


1.71
log
@introduce a BUILDFIRST/BUILDAFTER mechanism:
record every standard component built in bsd.lib.mk/bsd.prog.mk in BUILDAFTER
and have BUILDAFTER depend on BUILDFIRST, thus making possible to build
some stuff early without relying on "make depend"

okay tb@@ millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.70 2015/11/14 23:56:50 deraadt Exp $
d75 2
d144 9
@


1.70
log
@libocurses can go to the Attic.  last consumer of it was ramdisk more(1)
conceptual ok guenther millert nicm
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.69 2015/10/26 10:43:42 bluhm Exp $
d97 2
@


1.69
log
@Nothing in base uses native language support anymore.  Remove NLS
support from the makefiles.
OK naddy@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.68 2015/07/20 23:52:29 yasuoka Exp $
a45 1
LIBOLDCURSES?=	${DESTDIR}/usr/lib/libocurses.a
@


1.68
log
@Add radius(3) library.  This will be used by RADIUS server and client
programs to manipulate RADIUS packets.  Mainly written by UMEZAWA
Takeshi.

fix and suggestion deraadt
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.67 2015/05/14 02:56:01 jsg Exp $
a140 4
.endif

.if !defined(NONLS)
.include <bsd.nls.mk>
@


1.67
log
@Stop including CFLAGS in CXXFLAGS it creates problems when mixing
C and C++ when wanting to pass flags to only the C compiler.

Tested in a ports bulk build by naddy and the handful of problems
found were fixed by naddy, jca and pascal.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.66 2014/12/23 16:35:53 deraadt Exp $
d45 1
@


1.66
log
@Small changes to buil
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.65 2014/10/31 13:46:17 jsing Exp $
d15 1
@


1.65
log
@Rename libressl to libtls to avoid confusion and to make it easier to
distinguish between LibreSSL (the project) and libressl (the library).

Discussed with many.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.64 2014/09/29 19:37:51 gsoares Exp $
d13 1
a13 1
.if defined(LDSTATIC) || defined(NOPIE)
@


1.64
log
@add LIBRESSL; OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.63 2014/04/23 18:24:23 ajacoutot Exp $
a50 1
LIBRESSL?=	${DESTDIR}/usr/lib/libressl.a
d55 1
@


1.63
log
@Remove more Kerberos cruft.

ok jca@@ jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.62 2013/12/04 22:58:24 deraadt Exp $
d51 1
@


1.62
log
@express final disapproval of the interfaces in libcompat, such as
them ftime(), gtty(), stty(), re_comp(), cuserid() and others.
Discussion and ongoing work to fix the ports tree from many, especially
naddy.
ok naddy
[There is a bit more cleanup possible after that, but this is considered
the current safe step]
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.61 2013/10/15 22:40:00 deraadt Exp $
a29 1
LIBASN1?=	${DESTDIR}/usr/lib/libasn1.a
a30 1
LIBCOM_ERR?=	${DESTDIR}/usr/lib/libcom_err.a
a37 5
LIBGSSAPI?=	${DESTDIR}/usr/lib/libgssapi.a
LIBHDB?=	${DESTDIR}/usr/lib/libhdb.a
LIBKADM5CLNT?=	${DESTDIR}/usr/lib/libkadm5clnt.a
LIBKADM5SRV?=	${DESTDIR}/usr/lib/libkadm5srv.a
LIBKAFS?=	${DESTDIR}/usr/lib/libkafs.a
a38 1
LIBKRB5?=	${DESTDIR}/usr/lib/libkrb5.a
a50 1
LIBROKEN?=	${DESTDIR}/usr/lib/libroken.a
a58 2
LIBWIND?=	${DESTDIR}/usr/lib/libwind.a
LIBWRAP?=	${DESTDIR}/usr/lib/libwrap.a
@


1.61
log
@We do not produce "core" files, so they do not need to be deleted.  they
have been *.core files for a very long time.  That's a lot of unlink()
calls saved.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.60 2013/08/10 10:19:35 ajacoutot Exp $
a31 1
LIBCOMPAT?=	${DESTDIR}/usr/lib/libcompat.a
@


1.60
log
@libkafs5 -> libkafs (unused in build, so no functional change)
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.59 2013/07/11 07:03:46 ajacoutot Exp $
d110 1
a110 1
	rm -f a.out [Ee]rrs mklog core *.core y.tab.h \
@


1.59
log
@Properly set LIBKAFS5, LIBROKEN and LIBWIND which were used without
being defined. Remove LIBKAFS (superseded by LIBKAFS5).

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.58 2013/07/05 21:29:51 miod Exp $
d45 1
a45 1
LIBKAFS5?=	${DESTDIR}/usr/lib/libkafs5.a
@


1.58
log
@ELF_TOOLCHAIN bye bye.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.57 2013/03/18 10:51:35 mpi Exp $
d45 1
a45 1
LIBKAFS?=	${DESTDIR}/usr/lib/libkafs.a
d60 1
d69 1
@


1.57
log
@Recognize and treat files with .cpp extension like any other C++ file.
This will help me reduce some xenocara Makefiles and as millert@@ pointed
out, .cpp has won over .C or .cxx ;)

Tested in a bulk by landry@@, ok espie@@, sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.56 2012/08/28 16:45:03 pascal Exp $
a25 1
.if ${ELF_TOOLCHAIN:L} == "yes"
a27 1
.endif
@


1.56
log
@We can't add -nopie to LDFLAGS yet, since cc doesn't understand it.  Use
NOPIE_LDFLAGS instead.  Noticed by matthew@@ and deraadt@@.  Sorry for the
breakage ...
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.55 2012/08/28 14:26:47 pascal Exp $
d11 1
a11 1
.SUFFIXES: .out .o .c .cc .C .cxx .y .l .s .8 .7 .6 .5 .4 .3 .2 .1 .0
d90 2
a91 1
.    if !empty(SRCS:M*.C) || !empty(SRCS:M*.cc) || !empty(SRCS:M*.cxx)
@


1.55
log
@LDFLAGS will be -nopie for the NOPIE case, change GCC_PIE_DEFAULT -> PIE_DEFAULT
since it will affect binutils too.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.54 2012/08/22 19:41:56 pascal Exp $
d16 1
a16 1
LDFLAGS+=      -nopie
@


1.54
log
@share/mk bits for PIE, currently disabled.

ok matthew@@ deraadt@@ kettenis@@, manpage prodding and ok jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.53 2012/04/08 15:56:28 jsg Exp $
d16 1
a16 1
LDFLAGS+=      ${NOPIE_FLAGS}
@


1.53
log
@unhook lint from the tree.  The parser is incomplete and difficult
to fix and there are several alternatives that don't tell quite so many
dangerous lies.

enthusiastic agreement from a bunch of people
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.52 2011/07/18 06:40:18 guenther Exp $
d12 6
@


1.52
log
@Pass install the -S option to avoid a window where the target isn't
executable (by mode or content), which can trip up builds with 'make -j'

ok millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.51 2011/07/16 23:34:21 guenther Exp $
d11 1
a11 1
.SUFFIXES: .out .ln .o .c .cc .C .cxx .y .l .s .8 .7 .6 .5 .4 .3 .2 .1 .0
a80 1
LOBJS+=	${LSRCS:.c=.ln} ${SRCS:M*.c:.c=.ln} ${SRCS:M*.y:.y=.ln} ${SRCS:M*.l:.l=.ln}
d104 1
a104 1
	    ${PROG} ${OBJS} ${LOBJS} ${_LEXINTM} ${_YACCINTM} ${CLEANFILES}
a138 7
.endif

.if !target(lint)
lint: ${LOBJS}
.if defined(LOBJS) && !empty(LOBJS)
	@@${LINT} ${LINTFLAGS} ${LDFLAGS:M-L*} ${LOBJS} ${LDADD}
.endif
@


1.51
log
@The /g flag is unneeded when the pattern in ${var:S/pattern/sub/g} can
only match once per word, such as when it's anchored with '$'

ok espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.50 2010/11/18 21:16:57 miod Exp $
d121 2
a122 1
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} \
@


1.50
log
@Sync the LIBFOO defines with the current set of libraries we build and
install. Also define LIBARCH on arm platforms.
ok millert@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.49 2006/06/30 19:00:29 otto Exp $
d78 1
a78 1
OBJS+=	${SRCS:N*.h:N*.sh:R:S/$/.o/g}
@


1.49
log
@generate deps for yacc and lex, and clean stuff generated by these;
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.48 2006/06/26 03:12:37 brad Exp $
a25 2
LIB45?=		${DESTDIR}/usr/lib/lib45.a
LIBACL?=	${DESTDIR}/usr/lib/libacl.a
d29 1
a31 1
LIBDES?=	${DESTDIR}/usr/lib/libdes.a
d34 3
a36 1
LIBGCC?=	${DESTDIR}/usr/lib/libgcc.a
a38 1
LIBKADM?=	${DESTDIR}/usr/lib/libkadm.a
a41 1
LIBKDB?=	${DESTDIR}/usr/lib/libkdb.a
a42 1
LIBKRB?=	${DESTDIR}/usr/lib/libkrb.a
d47 2
d50 3
d55 1
a56 1
LIBSECTOK?=	${DESTDIR}/usr/lib/libsectok.a
d58 1
a59 1
LIBTELNET?=	${DESTDIR}/usr/lib/libtelnet.a
d69 1
a69 1
    ${MACHINE_ARCH} == "i386"
a73 7

# old stuff
LIBDBM?=	${DESTDIR}/usr/lib/libdbm.a
LIBMP?=		${DESTDIR}/usr/lib/libmp.a
LIBPC?=		${DESTDIR}/usr/lib/libpc.a
LIBPLOT?=	${DESTDIR}/usr/lib/libplot.a
LIBRESOLV?=	${DESTDIR}/usr/lib/libresolv.a
@


1.48
log
@remove extraneous brackets and list the architecures in alphabetic order.

no objection from miod@@ and krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.47 2006/05/27 23:01:21 deraadt Exp $
d84 2
d109 2
a110 2
	rm -f a.out [Ee]rrs mklog core *.core \
	    ${PROG} ${OBJS} ${LOBJS} ${CLEANFILES}
@


1.47
log
@support 'make lint' in dirs which contain .y and .l files, help from naddy
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.46 2005/09/16 21:23:21 espie Exp $
d20 1
a20 1
.if (${ELF_TOOLCHAIN:L} == "yes")
d66 2
a67 2
.if (${MACHINE_ARCH} == "alpha" || ${MACHINE_ARCH} == "amd64" || \
     ${MACHINE_ARCH} == "i386")
@


1.46
log
@revert, breaks DESTDIR. sorry.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.45 2005/09/15 07:12:18 espie Exp $
d11 1
a11 1
.SUFFIXES: .out .o .c .cc .C .cxx .y .l .s .8 .7 .6 .5 .4 .3 .2 .1 .0
d84 1
a84 1
LOBJS+=	${LSRCS:.c=.ln} ${SRCS:M*.c:.c=.ln}
@


1.45
log
@uniformize LINKS, so that it gets handled in realinstall all the time
(and the same way).

okay otto@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.44 2005/04/15 17:18:57 espie Exp $
d127 3
a137 3
.endif

install: maninstall _SUBDIRUSE
@


1.44
log
@Bye, bye SHAREDSTRINGS.
Okay deraadt@@, millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.43 2004/12/23 23:58:36 espie Exp $
a126 3
.endif

install: maninstall _SUBDIRUSE
d135 3
@


1.43
log
@give a complete path during install, so that we don't accidentally create
a file with the wrong name if the directory doesn't exist.
Shouldn't happen, ... but when it does it's hard to figure out.

`sounds sane' theo@@.

ran through make build without issue.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.42 2004/10/20 09:28:17 espie Exp $
a78 27

.if defined(SHAREDSTRINGS)
CLEANFILES+=strings
.c.o:
	${CC} -E ${CFLAGS} ${.IMPSRC} | xstr -c -
	@@${CC} ${CFLAGS} -c x.c -o ${.TARGET}
	@@rm -f x.c

.cc.o:
	${CXX} -E ${CXXFLAGS} ${.IMPSRC} | xstr -c -
	@@mv -f x.c x.cc
	@@${CXX} ${CXXFLAGS} -c x.cc -o ${.TARGET}
	@@rm -f x.cc

.C.o:
	${CXX} -E ${CXXFLAGS} ${.IMPSRC} | xstr -c -
	@@mv -f x.c x.C
	@@${CXX} ${CXXFLAGS} -c x.C -o ${.TARGET}
	@@rm -f x.C

.cxx.o:
	${CXX} -E ${CXXFLAGS} ${.IMPSRC} | xstr -c -
	@@mv -f x.c x.cxx
	@@${CXX} ${CXXFLAGS} -c x.cxx -o ${.TARGET}
	@@rm -f x.cxx
.endif

@


1.42
log
@support C/C++
Ditch DESTDIR building.
okay miod, theo.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.40 2004/10/13 16:47:50 espie Exp $
d152 1
a152 1
	    -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}
@


1.41
log
@revert, -B funky semantics ?
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.39 2004/06/03 20:51:07 miod Exp $
d109 1
a109 1
.if !empty(SRCS:N*.h:N*.sh)
d112 1
a112 4
.endif

.if defined(OBJS) && !empty(OBJS)
.if defined(DESTDIR)
d114 2
d117 2
a118 4
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -nostdlib -L${DESTDIR}/usr/lib ${LIBCRT0} ${CRTBEGIN} ${OBJS} ${LDADD} -lgcc -lc -lgcc ${CRTEND}

.else

d121 2
d124 1
a124 4
.endif	# defined(DESTDIR)
.endif	# defined(OBJS) && !empty(OBJS)

.if	!defined(MAN)
d126 1
a126 1
.endif	# !defined(MAN)
@


1.40
log
@indent in a more readable way.
check SRCS files for C++ and invoke g++ accordingly.
Don't link from scratch with DESTDIR, but use -B instead.

okay millert@@
@
text
@d109 1
a109 1
.  if !empty(SRCS:N*.h:N*.sh)
d112 4
a115 1
.  endif
a116 2
.  if defined(OBJS) && !empty(OBJS)
.    if !empty(SRCS:M*.C) || !empty(SRCS:M*.cc) || !empty(SRCS:M*.cxx)
d118 4
a121 2
	${CXX} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -B${DESTDIR}/usr/lib ${OBJS} ${LDADD}
.    else
d123 4
a126 3
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -B${DESTDIR}/usr/lib ${OBJS} ${LDADD}
.    endif
.  endif	# defined(OBJS) && !empty(OBJS)
d128 1
a128 1
.  if	!defined(MAN)
d130 1
a130 1
.  endif	# !defined(MAN)
@


1.39
log
@Define LIBARCH for alpha and amd64, too; ok espie@@ tdeval@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.38 2003/08/29 00:04:41 jolan Exp $
d109 1
a109 1
.if !empty(SRCS:N*.h:N*.sh)
d112 1
a112 4
.endif

.if defined(OBJS) && !empty(OBJS)
.if defined(DESTDIR)
d114 2
d117 2
a118 4
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -nostdlib -L${DESTDIR}/usr/lib ${LIBCRT0} ${CRTBEGIN} ${OBJS} ${LDADD} -lgcc -lc -lgcc ${CRTEND}

.else

d120 3
a122 4
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} ${OBJS} ${LDADD}

.endif	# defined(DESTDIR)
.endif	# defined(OBJS) && !empty(OBJS)
d124 1
a124 1
.if	!defined(MAN)
d126 1
a126 1
.endif	# !defined(MAN)
@


1.38
log
@remove HIDEGAME, it only made sense when 'dm' was still around.

ok fgsch@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.37 2003/08/11 17:31:51 jakob Exp $
d66 3
a68 2
.if ${MACHINE_ARCH} == "i386"
LIBARCH?=	${DESTDIR}/usr/lib/libi386.a
@


1.37
log
@add GSSAPI. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.36 2003/07/16 01:29:34 deraadt Exp $
a155 3
.endif
.if defined(HIDEGAME)
	(cd ${DESTDIR}/usr/games; rm -f ${PROG}; ln -s dm ${PROG})
@


1.36
log
@bye bye LIBCOM_ERR thingies
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.35 2003/07/08 13:59:13 espie Exp $
d37 1
@


1.35
log
@ELF_TOOLCHAIN:L, for consistency with other yes/no variables.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.34 2002/11/10 23:03:55 mickey Exp $
a29 1
LIBCOM_ERR?=	${DESTDIR}/usr/lib/libcom_err.a
@


1.34
log
@hppa is not a special case anymore
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.33 2002/07/25 18:19:06 art Exp $
d20 1
a20 1
.if (${ELF_TOOLCHAIN} == "yes")
@


1.33
log
@ELF_TOOLCHAIN except hppa for crtbegin and crtend.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.32 2002/06/25 15:33:18 millert Exp $
d20 1
a20 1
.if (${ELF_TOOLCHAIN} == "yes") && (${MACHINE_ARCH} != "hppa")
@


1.32
log
@Add LIBEVENT; pointed out by Brian J. Kifiak
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.31 2002/05/11 00:20:21 espie Exp $
d20 1
a20 1
.if (${MACHINE_ARCH} == "powerpc") || (${MACHINE_ARCH} == "alpha") || (${MACHINE_ARCH} == "sparc64")
@


1.31
log
@Add missing libraries to bsd.prog.mk (mostly kerberosV)
Use them in DPADD throughout the tree.
Fix a few mispells (LIBMATH -> LIBM...)
Wipe obsolete lib (LIBRESOLV)
Sort added missing libraries, move obsolete stuff apart.
Synch documentation in bsd.README

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.30 2001/08/23 16:39:33 art Exp $
d36 1
@


1.30
log
@sparc64 needs crtbegin and crtend
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.29 2001/08/16 15:12:48 brad Exp $
d26 3
d30 1
d32 1
a33 2
LIBCRYPTO?=	${DESTDIR}/usr/lib/libcrypto.a
LIBDBM?=	${DESTDIR}/usr/lib/libdbm.a
d37 5
d45 1
a45 1
LIBKAFS?=	${DESTDIR}/usr/lib/libkafs.a
a48 1
LIBMP?=		${DESTDIR}/usr/lib/libmp.a
d50 1
a50 1
LIBPC?=		${DESTDIR}/usr/lib/libpc.a
a51 2
LIBPLOT?=	${DESTDIR}/usr/lib/libplot.a
LIBRESOLV?=	${DESTDIR}/usr/lib/libresolv.a
d53 1
d59 1
d64 13
@


1.29
log
@- remove libatalk
- remove mention of architecture names in the NOPIC variable description
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.28 2001/07/20 23:02:21 espie Exp $
d20 1
a20 1
.if (${MACHINE_ARCH} == "powerpc") || (${MACHINE_ARCH} == "alpha")
@


1.28
log
@One BINDIR too many, I don't know how I pulled that one.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.26 2001/07/20 19:15:39 mickey Exp $
a24 1
LIBATALK?=	${DESTDIR}/usr/lib/libatalk.a
@


1.27
log
@undo broken changes, i dunno a fix for these; how many times you gonna repeat the same mistake espie@@ and millert@@ ?
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.24 2001/07/18 13:23:03 espie Exp $
d144 6
a149 10
	@@set ${LINKS}; \
	while test $$# -ge 2; do \
		l=${DESTDIR}$$1; \
		shift; \
		t=${DESTDIR}$$1; \
		shift; \
		echo $$t -\> $$l; \
		rm -f $$t; \
		ln $$l $$t; \
	done; true
@


1.26
log
@every change you make, every step you take, we'll be whatching you
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.25 2001/07/19 23:16:17 espie Exp $
d144 10
a153 6
.  for lnk file in ${LINKS}
	@@l=${DESTDIR}${BINDIR}${lnk}; \
	 t=${DESTDIR}${BINDIR}${file}; \
	 echo $$t -\> $$l; \
	 rm -f $$t; ln $$l $$t
.  endfor
@


1.25
log
@Minor speed-up tweaks.
- use .for a b in   new syntax for make  to handle links.
- kill mips
- .include shlib_version, since its contents is happy as a Makefile
fragment (avoids 10 shell escapes per lib directory, roughly)

okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.24 2001/07/18 13:23:03 espie Exp $
d145 2
a146 2
	@@l=${DESTDIR}${lnk}; \
	 t=${DESTDIR}${file}; \
@


1.24
log
@CDIAGFLAGS, added to CFLAGS if WARNINGS=Yes
Symetrize C++ situation: add CXXOPTS, CXXDIAGFLAGS.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.23 2001/01/31 06:41:18 art Exp $
d144 6
a149 10
	@@set ${LINKS}; \
	while test $$# -ge 2; do \
		l=${DESTDIR}$$1; \
		shift; \
		t=${DESTDIR}$$1; \
		shift; \
		echo $$t -\> $$l; \
		rm -f $$t; \
		ln $$l $$t; \
	done; true
@


1.23
log
@ELF alpha has crtbegin and crtend.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.22 2000/12/12 00:46:49 provos Exp $
d13 4
d18 1
@


1.22
log
@gmp gone
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.21 2000/02/11 15:02:00 ho Exp $
d15 1
a15 1
.if (${MACHINE_ARCH} == "powerpc")
@


1.21
log
@Add LIBKEYNOTE. (niklas@@ ok)
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.20 1999/11/26 21:47:09 millert Exp $
a29 1
LIBGMP?=	${DESTDIR}/usr/lib/libgmp.a
@


1.20
log
@Add ${LIBPERL}
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.19 1999/09/29 19:21:57 beck Exp $
d32 1
@


1.19
log
@Add LIBSSL and LIBCRYPTO definitions
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.18 1998/12/31 23:49:46 millert Exp $
d40 1
@


1.18
log
@Add ${PIPE} in sys.mk so we do no need to add all over the places; evanc@@concer.to
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.17 1998/12/19 19:07:34 millert Exp $
d25 1
d44 1
@


1.17
log
@add PIPE variable, suitable for /etc/mk.conf, to enable gcc -pipe mode
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.16 1998/07/27 21:11:33 niklas Exp $
d13 1
a13 1
CFLAGS+=	${COPTS} ${PIPE}
@


1.16
log
@LIBGMP was missing
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.15 1998/03/26 23:47:33 deraadt Exp $
d13 1
a13 1
CFLAGS+=	${COPTS}
@


1.15
log
@add LIBKAFS
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.14 1997/11/05 09:51:06 deraadt Exp $
d20 1
d29 1
@


1.14
log
@.cxx support from Mathieu.Herrb@@mipnet.fr
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.13 1997/04/27 21:38:34 millert Exp $
d30 1
@


1.13
log
@COPY -> INSTALL_COPY and STRIP -> INSTALL_STRIP changes.
For some reason the previous commit did not grab these.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.12 1997/03/26 00:34:54 deraadt Exp $
d11 1
a11 1
.SUFFIXES: .out .o .c .cc .C .y .l .s .8 .7 .6 .5 .4 .3 .2 .1 .0
d66 6
@


1.12
log
@no libcrypt, fix DPADD
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.11 1997/02/26 03:55:16 downsj Exp $
d117 2
a118 2
	${INSTALL} ${COPY} ${STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
	    ${PROG} ${DESTDIR}${BINDIR}
@


1.11
log
@Add LIBWRAP.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.10 1997/02/09 16:41:50 deraadt Exp $
d40 1
@


1.10
log
@libcrypt went away a while back
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.9 1997/02/09 16:11:15 mickey Exp $
d43 1
@


1.9
log
@add ${LIBZ}
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.8 1997/01/15 00:36:56 niklas Exp $
a22 1
LIBCRYPT?=	${DESTDIR}/usr/lib/libcrypt.a
@


1.8
log
@Add DESTDIR support for crt{begin,end}.o (powerpc only so far)
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.7 1996/12/08 14:42:32 downsj Exp $
d45 1
@


1.7
log
@install -> ${INSTALL}, -c -> ${COPY}
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.6 1996/11/14 14:41:39 mickey Exp $
d15 5
d77 2
a78 2
${PROG}: ${LIBCRT0} ${OBJS} ${LIBC} ${DPADD}
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -nostdlib -L${DESTDIR}/usr/lib ${LIBCRT0} ${OBJS} ${LDADD} -lgcc -lc -lgcc
d82 1
a82 1
${PROG}: ${LIBCRT0} ${OBJS} ${LIBC} ${DPADD}
@


1.6
log
@correct last fix.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.5 1996/11/14 14:21:23 mickey Exp $
d110 1
a110 1
	install ${COPY} ${STRIP} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
@


1.5
log
@correct LINKS usage
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.4 1996/06/02 05:58:20 tholo Exp $
d122 1
a122 1
		l=${DESTDIR}${BINDIR}/$$1; \
d124 1
a124 1
		t=${DESTDIR}${BINDIR}/$$1; \
@


1.4
log
@Add LIBOLDCURSES
Add LIBTERMLIB
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.2 1996/03/05 11:12:59 mickey Exp $
d122 1
a122 1
		l=${DESTDIR}$$1; \
d124 1
a124 1
		t=${DESTDIR}$$1; \
@


1.3
log
@sync with netbsd 960418
@
text
@d30 1
d37 1
@


1.2
log
@Labeling style changed ($OpenBSD$).
POSTINSTALL added to the <bsd.lkm.mk> (see bsd.README for details).
@
text
@d1 2
a2 2
#	$OpenBSD$
#	$NetBSD: bsd.prog.mk,v 1.53 1995/06/25 22:29:02 cgd Exp $
a23 1
LIBL?=		${DESTDIR}/usr/lib/libl.a
d27 1
d37 1
d153 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
