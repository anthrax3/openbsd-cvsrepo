head	1.90;
access;
symbols
	OPENBSD_6_2:1.90.0.2
	OPENBSD_6_2_BASE:1.90
	OPENBSD_6_1:1.80.0.4
	OPENBSD_6_1_BASE:1.80
	OPENBSD_6_0:1.77.0.2
	OPENBSD_6_0_BASE:1.77
	OPENBSD_5_9:1.74.0.2
	OPENBSD_5_9_BASE:1.74
	OPENBSD_5_8:1.73.0.4
	OPENBSD_5_8_BASE:1.73
	OPENBSD_5_7:1.71.0.2
	OPENBSD_5_7_BASE:1.71
	OPENBSD_5_6:1.71.0.6
	OPENBSD_5_6_BASE:1.71
	OPENBSD_5_5:1.71.0.4
	OPENBSD_5_5_BASE:1.71
	OPENBSD_5_4:1.69.0.2
	OPENBSD_5_4_BASE:1.69
	OPENBSD_5_3:1.68.0.2
	OPENBSD_5_3_BASE:1.68
	OPENBSD_5_2:1.64.0.2
	OPENBSD_5_2_BASE:1.64
	OPENBSD_5_1_BASE:1.61
	OPENBSD_5_1:1.61.0.4
	OPENBSD_5_0:1.61.0.2
	OPENBSD_5_0_BASE:1.61
	OPENBSD_4_9:1.60.0.4
	OPENBSD_4_9_BASE:1.60
	OPENBSD_4_8:1.60.0.2
	OPENBSD_4_8_BASE:1.60
	OPENBSD_4_7:1.59.0.2
	OPENBSD_4_7_BASE:1.59
	OPENBSD_4_6:1.58.0.6
	OPENBSD_4_6_BASE:1.58
	OPENBSD_4_5:1.58.0.2
	OPENBSD_4_5_BASE:1.58
	OPENBSD_4_4:1.57.0.8
	OPENBSD_4_4_BASE:1.57
	OPENBSD_4_3:1.57.0.6
	OPENBSD_4_3_BASE:1.57
	OPENBSD_4_2:1.57.0.4
	OPENBSD_4_2_BASE:1.57
	OPENBSD_4_1:1.57.0.2
	OPENBSD_4_1_BASE:1.57
	OPENBSD_4_0:1.56.0.2
	OPENBSD_4_0_BASE:1.56
	OPENBSD_3_9:1.55.0.2
	OPENBSD_3_9_BASE:1.55
	OPENBSD_3_8:1.43.0.4
	OPENBSD_3_8_BASE:1.43
	OPENBSD_3_7:1.43.0.2
	OPENBSD_3_7_BASE:1.43
	OPENBSD_3_6:1.42.0.2
	OPENBSD_3_6_BASE:1.42
	OPENBSD_3_5:1.37.0.2
	OPENBSD_3_5_BASE:1.37
	OPENBSD_3_4:1.36.0.10
	OPENBSD_3_4_BASE:1.36
	OPENBSD_3_3:1.36.0.8
	OPENBSD_3_3_BASE:1.36
	OPENBSD_3_2:1.36.0.6
	OPENBSD_3_2_BASE:1.36
	OPENBSD_3_1:1.36.0.4
	OPENBSD_3_1_BASE:1.36
	OPENBSD_3_0:1.36.0.2
	OPENBSD_3_0_BASE:1.36
	OPENBSD_2_9:1.28.0.2
	OPENBSD_2_9_BASE:1.28
	OPENBSD_2_8:1.27.0.2
	OPENBSD_2_8_BASE:1.27
	OPENBSD_2_7:1.20.0.4
	OPENBSD_2_7_BASE:1.20
	OPENBSD_2_6:1.20.0.2
	OPENBSD_2_6_BASE:1.20
	OPENBSD_2_5:1.19.0.2
	OPENBSD_2_5_BASE:1.19
	OPENBSD_2_4:1.16.0.4
	OPENBSD_2_4_BASE:1.16
	OPENBSD_2_3:1.16.0.2
	OPENBSD_2_3_BASE:1.16
	OPENBSD_2_2:1.15.0.2
	OPENBSD_2_2_BASE:1.15
	OPENBSD_2_1:1.13.0.2
	OPENBSD_2_1_BASE:1.13
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.90
date	2017.08.09.06.15.29;	author robert;	state Exp;
branches;
next	1.89;
commitid	bdweOKdxuZo7KvWM;

1.89
date	2017.07.25.13.32.14;	author robert;	state Exp;
branches;
next	1.88;
commitid	4ug2LPpW6jX7EOsH;

1.88
date	2017.07.11.18.16.48;	author robert;	state Exp;
branches;
next	1.87;
commitid	1BhSYzqOXkzknl0F;

1.87
date	2017.07.04.00.59.11;	author espie;	state Exp;
branches;
next	1.86;
commitid	8BJWEohlaP5NvWVv;

1.86
date	2017.07.02.17.55.14;	author espie;	state Exp;
branches;
next	1.85;
commitid	gG8oGELc6UewNaz9;

1.85
date	2017.07.01.14.41.54;	author espie;	state Exp;
branches;
next	1.84;
commitid	zynor6caSpxwFDub;

1.84
date	2017.06.16.10.20.52;	author espie;	state Exp;
branches;
next	1.83;
commitid	eSEJ9O1N3YyVxZmj;

1.83
date	2017.06.07.16.01.07;	author robert;	state Exp;
branches;
next	1.82;
commitid	bDgFiY70SmCEz81T;

1.82
date	2017.06.05.09.51.27;	author robert;	state Exp;
branches;
next	1.81;
commitid	p32Eot32tle0fQO0;

1.81
date	2017.04.27.17.41.47;	author robert;	state Exp;
branches;
next	1.80;
commitid	XoRoTC6DHcZ5T8JC;

1.80
date	2017.03.26.18.50.37;	author guenther;	state Exp;
branches;
next	1.79;
commitid	nuGH2ltO1Lr9gAEN;

1.79
date	2016.11.08.19.04.49;	author natano;	state Exp;
branches;
next	1.78;
commitid	DasEq4BGKwJbSLbT;

1.78
date	2016.10.15.13.00.07;	author espie;	state Exp;
branches;
next	1.77;
commitid	97sJQIjk83NOXfhl;

1.77
date	2016.07.04.18.01.44;	author guenther;	state Exp;
branches;
next	1.76;
commitid	MDAws5Y7do6cFWlq;

1.76
date	2016.05.15.03.44.32;	author guenther;	state Exp;
branches;
next	1.75;
commitid	tcI2qVnHcchsD7aH;

1.75
date	2016.04.26.14.49.15;	author deraadt;	state Exp;
branches;
next	1.74;
commitid	YnVqazfGQ4k2iS2J;

1.74
date	2015.10.26.10.43.42;	author bluhm;	state Exp;
branches;
next	1.73;
commitid	TxqyjUVPfw3iA85U;

1.73
date	2015.07.19.20.45.30;	author guenther;	state Exp;
branches;
next	1.72;
commitid	1Obed2dFDThxTNy8;

1.72
date	2015.05.14.02.56.01;	author jsg;	state Exp;
branches;
next	1.71;
commitid	gKxrs8uC9DvCRIXP;

1.71
date	2013.10.15.22.40.00;	author deraadt;	state Exp;
branches;
next	1.70;

1.70
date	2013.10.13.23.30.12;	author guenther;	state Exp;
branches;
next	1.69;

1.69
date	2013.03.18.10.51.35;	author mpi;	state Exp;
branches;
next	1.68;

1.68
date	2012.09.16.20.41.16;	author kettenis;	state Exp;
branches;
next	1.67;

1.67
date	2012.08.31.20.13.09;	author kettenis;	state Exp;
branches;
next	1.66;

1.66
date	2012.08.31.00.11.26;	author deraadt;	state Exp;
branches;
next	1.65;

1.65
date	2012.08.22.17.19.34;	author pascal;	state Exp;
branches;
next	1.64;

1.64
date	2012.07.08.08.44.55;	author espie;	state Exp;
branches;
next	1.63;

1.63
date	2012.07.04.09.01.56;	author espie;	state Exp;
branches;
next	1.62;

1.62
date	2012.04.08.15.56.28;	author jsg;	state Exp;
branches;
next	1.61;

1.61
date	2011.07.16.23.34.21;	author guenther;	state Exp;
branches;
next	1.60;

1.60
date	2010.07.30.19.23.38;	author ckuethe;	state Exp;
branches;
next	1.59;

1.59
date	2010.02.03.20.49.01;	author miod;	state Exp;
branches;
next	1.58;

1.58
date	2009.02.05.19.15.21;	author miod;	state Exp;
branches;
next	1.57;

1.57
date	2007.01.04.11.51.26;	author otto;	state Exp;
branches;
next	1.56;

1.56
date	2006.06.26.03.12.37;	author brad;	state Exp;
branches;
next	1.55;

1.55
date	2006.02.03.19.24.52;	author bernd;	state Exp;
branches;
next	1.54;

1.54
date	2006.01.11.23.53.32;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2005.12.30.16.40.08;	author grange;	state Exp;
branches;
next	1.52;

1.52
date	2005.12.29.14.44.05;	author espie;	state Exp;
branches;
next	1.51;

1.51
date	2005.12.16.19.45.19;	author kettenis;	state Exp;
branches;
next	1.50;

1.50
date	2005.12.16.02.29.49;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2005.12.08.19.56.56;	author kettenis;	state Exp;
branches;
next	1.48;

1.48
date	2005.12.01.22.08.43;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2005.12.01.22.07.26;	author kettenis;	state Exp;
branches;
next	1.46;

1.46
date	2005.11.30.13.04.55;	author steven;	state Exp;
branches;
next	1.45;

1.45
date	2005.11.23.18.34.33;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2005.09.12.17.10.40;	author espie;	state Exp;
branches;
next	1.43;

1.43
date	2004.09.20.18.52.38;	author espie;	state Exp;
branches;
next	1.42;

1.42
date	2004.08.11.09.43.12;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2004.07.08.02.35.51;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2004.07.08.01.29.23;	author pvalchev;	state Exp;
branches;
next	1.39;

1.39
date	2004.06.24.04.35.13;	author pvalchev;	state Exp;
branches;
next	1.38;

1.38
date	2004.06.22.19.50.01;	author pvalchev;	state Exp;
branches;
next	1.37;

1.37
date	2004.02.01.06.02.13;	author drahn;	state Exp;
branches;
next	1.36;

1.36
date	2001.09.25.14.33.44;	author drahn;	state Exp;
branches;
next	1.35;

1.35
date	2001.07.22.13.37.29;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2001.07.21.16.04.03;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2001.07.20.23.02.21;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2001.07.20.19.48.26;	author mickey;	state Exp;
branches;
next	1.31;

1.31
date	2001.07.19.23.16.17;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2001.07.18.13.23.03;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2001.05.05.17.44.49;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2001.04.03.23.00.09;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2000.10.18.11.35.50;	author brad;	state Exp;
branches;
next	1.26;

1.26
date	2000.10.09.15.50.31;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2000.10.03.23.17.07;	author mickey;	state Exp;
branches;
next	1.24;

1.24
date	2000.09.03.18.41.23;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2000.07.15.12.45.04;	author rahnds;	state Exp;
branches;
next	1.22;

1.22
date	2000.05.16.06.15.00;	author niklas;	state Exp;
branches;
next	1.21;

1.21
date	2000.05.15.06.10.21;	author niklas;	state Exp;
branches;
next	1.20;

1.20
date	99.05.26.19.10.28;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	99.01.27.03.28.51;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	98.12.31.23.49.45;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	98.12.19.19.07.33;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	97.11.05.09.51.06;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.09.08.11.16.10;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	97.06.12.15.06.34;	author grr;	state Exp;
branches;
next	1.13;

1.13
date	97.04.27.21.38.28;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	97.02.06.10.49.17;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	97.01.26.00.22.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.12.08.14.42.28;	author downsj;	state Exp;
branches;
next	1.9;

1.9
date	96.11.14.14.21.22;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	96.08.05.16.56.55;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.07.22.09.11.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.05.25.09.03.43;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	96.03.05.11.12.41;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.02.25.19.02.33;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.02.02.20.30.48;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.47.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.90
log
@switch the order of substitutions for syspatch object file order to avoid
deleting ../ in the path
@
text
@#	$OpenBSD: bsd.lib.mk,v 1.89 2017/07/25 13:32:14 robert Exp $
#	$NetBSD: bsd.lib.mk,v 1.67 1996/01/17 20:39:26 mycroft Exp $
#	@@(#)bsd.lib.mk	5.26 (Berkeley) 5/2/91

.include <bsd.own.mk>				# for 'NOPIC' definition

.if exists(${.CURDIR}/../Makefile.inc)
.include "${.CURDIR}/../Makefile.inc"
.endif

.if exists(${.CURDIR}/shlib_version)
.include "${.CURDIR}/shlib_version"
.if defined(LIB) && defined(LIB${LIB}_VERSION)
SHLIB_MAJOR=${LIB${LIB}_VERSION:R}
SHLIB_MINOR=${LIB${LIB}_VERSION:E}
.else
SHLIB_MAJOR=${major}
SHLIB_MINOR=${minor}
.endif
.endif

.MAIN: all

# prefer .S to a .c, add .po, remove stuff not used in the BSD libraries.
# .so used for PIC object files.
# .do used for distrib "crunchgen" object files
# .m for objective c files.
.SUFFIXES:
.SUFFIXES: .out .o .po .so .do .S .s .c .cc .cpp .C .cxx .f .y .l .m4 .m

.if defined(NOPIE)
CFLAGS+=	${NOPIE_FLAGS}
CXXFLAGS+=	${NOPIE_FLAGS}
AFLAGS+=	${NOPIE_FLAGS}
.endif

DIST_CFLAGS+=	-Oz

.c.o:
	@@echo "${COMPILE.c} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${DFLAGS} ${.IMPSRC}  -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.c.po:
	@@echo "${COMPILE.c} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${DFLAGS} -p ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.c.so:
	@@echo "${COMPILE.c} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${DFLAGS} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.c.do:
	@@echo "${COMPILE.c} ${DIST_CFLAGS} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${DFLAGS} ${DIST_CFLAGS} ${.IMPSRC}  -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.cc.o .cpp.o .C.o .cxx.o:
	@@echo "${COMPILE.cc} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${DFLAGS} ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.cc.po .cpp.po .C.po .cxx.po:
	@@echo "${COMPILE.cc} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${DFLAGS} -p ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.cc.so .cpp.so .C.so .cxx.so:
	@@echo "${COMPILE.cc} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${DFLAGS} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

# Fortran 77
.f.o:
	@@echo "${COMPILE.f} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} ${DFLAGS} ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.f.po:
	@@echo "${COMPILE.f} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} ${DFLAGS} -p ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.f.so:
	@@echo "${COMPILE.f} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} ${DFLAGS} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.S.o .s.o:
	@@echo "${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.S} ${DFLAGS} -MF $@@.d ${CFLAGS:M-[IDM]*} ${AINC} \
	    ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.S.po .s.po:
	@@echo "${COMPILE.S} -DPROF ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} \
	    -o ${.TARGET}"
	@@${COMPILE.S} ${DFLAGS} -MF $@@.d -DPROF ${CFLAGS:M-[IDM]*} ${AINC} \
	    ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.S.so .s.so:
	@@echo "${COMPILE.S} ${PICFLAG} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} \
	    -o ${.TARGET}"
	@@${COMPILE.S} ${DFLAGS} -MF $@@.d ${PICFLAG} ${CFLAGS:M-[IDM]*} \
	    ${AINC} ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.S.do .s.do:
	@@echo "${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} ${DIST_CFLAGS} \
	    ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.S} ${DFLAGS} -MF $@@.d ${CFLAGS:M-[IDM]*} ${AINC} \
	    ${DIST_CFLAGS} ${.IMPSRC} -o ${.TARGET}.o
	@@-mv $@@.d $*.d
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.if ${WARNINGS:L} == "yes"
CFLAGS+=	${CDIAGFLAGS}
CXXFLAGS+=	${CXXDIAGFLAGS}
.endif
CFLAGS+=	${COPTS}
CXXFLAGS+=	${CXXOPTS}

DEBUG?=	-g

_LIBS=lib${LIB}.a
.if !defined(NOPROFILE)
_LIBS+=lib${LIB}_p.a
.endif

.if !defined(NOPIC)
.if defined(SHLIB_MAJOR) && defined(SHLIB_MINOR)
FULLSHLIBNAME=lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
_LIBS+=${FULLSHLIBNAME}
.endif

.if defined(LIBREBUILD)
_LIBS+=${FULLSHLIBNAME}.a

.if exists(${.CURDIR}/Symbols.list)
SYMBOLSMAP=Symbols.map
.endif

.endif

.if defined(VERSION_SCRIPT)
${FULLSHLIBNAME}:	${VERSION_SCRIPT}
LDADD+=	-Wl,--version-script=${VERSION_SCRIPT}
.endif
.endif

all: ${_LIBS} _SUBDIRUSE

BUILDAFTER += ${_LIBS}

OBJS+=	${SRCS:N*.h:R:S/$/.o/}
DEPS+=	${OBJS:R:S/$/.d/}

_LEXINTM?=${SRCS:M*.l:.l=.c}
_YACCINTM?=${SRCS:M*.y:.y=.c}

BUILDAFTER += ${OBJS}

lib${LIB}.a: ${OBJS}
	@@echo building standard ${LIB} library
	@@rm -f lib${LIB}.a
	@@${AR} cqD lib${LIB}.a `${LORDER} ${OBJS} | tsort -q`
	${RANLIB} lib${LIB}.a

POBJS+=	${OBJS:.o=.po}
BUILDAFTER += ${POBJS}

lib${LIB}_p.a: ${POBJS}
	@@echo building profiled ${LIB} library
	@@rm -f lib${LIB}_p.a
	@@${AR} cqD lib${LIB}_p.a `${LORDER} ${POBJS} | tsort -q`
	${RANLIB} lib${LIB}_p.a

SOBJS+=	${OBJS:.o=.so}
BUILDAFTER += ${SOBJS}

${FULLSHLIBNAME}: ${SOBJS} ${DPADD}
	@@echo building shared ${LIB} library \(version ${SHLIB_MAJOR}.${SHLIB_MINOR}\)
	@@rm -f ${.TARGET}
.if defined(SYSPATCH_PATH)
	${CC} -shared ${PICFLAG} -o ${.TARGET} \
	    `readelf -Ws ${SYSPATCH_PATH}${LIBDIR}/${.TARGET} | \
	    awk '/ FILE/{sub(".*/", "", $$NF); gsub(/\..*/, ".so", $$NF); print $$NF}' | \
	    egrep -v "(cmll-586|libgcc2|unwind-dw2|mul(d|s|x)c3)" | awk '!x[$$0]++'` ${LDADD}
.else
	${CC} -shared ${PICFLAG} -o ${.TARGET} \
	    `echo ${SOBJS} | tr ' ' '\n' | sort -R` ${LDADD}
.endif

${FULLSHLIBNAME}.a: ${SOBJS}
	@@echo building shared ${LIB} library \(version ${SHLIB_MAJOR}.${SHLIB_MINOR}\) ar
	@@rm -f ${.TARGET}
	@@echo ${PICFLAG} ${LDADD} > .ldadd
	ar cqD ${FULLSHLIBNAME}.a ${SOBJS} .ldadd ${SYMBOLSMAP}

# all .do files...
DOBJS+=	${OBJS:.o=.do}
BUILDAFTER += ${DOBJS}

# .do files that we actually need for where this dist lib will be used
.if defined(DIST_OBJS)
SELECTED_DOBJS=${DIST_OBJS:.o=.do}
.else
SELECTED_DOBJS?=${DOBJS}
.endif

DIST_LIB?=lib${LIB}_d.a
${DIST_LIB}: ${SELECTED_DOBJS}
	@@echo building distrib ${DIST_LIB} library from ${SELECTED_DOBJS}
	@@rm -f ${DIST_LIB}
.if !empty(SELECTED_DOBJS)
	@@${AR} cqD ${DIST_LIB} `${LORDER} ${SELECTED_DOBJS} | tsort -q`
.else
	@@${AR} cqD ${DIST_LIB}
.endif
	${RANLIB} ${DIST_LIB}

.if !target(clean)
clean: _SUBDIRUSE
	rm -f a.out [Ee]rrs mklog *.core y.tab.h \
	    ${_LEXINTM} ${_YACCINTM} ${CLEANFILES}
	rm -f lib${LIB}.a ${OBJS}
	rm -f lib${LIB}_g.a ${GOBJS}
	rm -f lib${LIB}_p.a ${POBJS}
	rm -f lib${LIB}.so.*.* ${SOBJS} .ldadd
	rm -f ${DIST_LIB} ${DOBJS}
.endif

cleandir: _SUBDIRUSE clean


.if !target(install)
.if !target(beforeinstall)
beforeinstall:
.endif

realinstall:
#	ranlib lib${LIB}.a
	${INSTALL} ${INSTALL_COPY} -S -o ${LIBOWN} -g ${LIBGRP} -m 600 lib${LIB}.a \
	    ${DESTDIR}${LIBDIR}/lib${LIB}.a
.if (${INSTALL_COPY} != "-p")
	${RANLIB} -t ${DESTDIR}${LIBDIR}/lib${LIB}.a
.endif
	chmod ${LIBMODE} ${DESTDIR}${LIBDIR}/lib${LIB}.a
.if !defined(NOPROFILE)
#	ranlib lib${LIB}_p.a
	${INSTALL} ${INSTALL_COPY} -S -o ${LIBOWN} -g ${LIBGRP} -m 600 \
	    lib${LIB}_p.a ${DESTDIR}${LIBDIR}
.if (${INSTALL_COPY} != "-p")
	${RANLIB} -t ${DESTDIR}${LIBDIR}/lib${LIB}_p.a
.endif
	chmod ${LIBMODE} ${DESTDIR}${LIBDIR}/lib${LIB}_p.a
.endif
.if !defined(NOPIC) && defined(SHLIB_MAJOR) && defined(SHLIB_MINOR)
	${INSTALL} ${INSTALL_COPY} -S -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    ${FULLSHLIBNAME} ${DESTDIR}${LIBDIR}
.if defined(LIBREBUILD)
	${INSTALL} ${INSTALL_COPY} -S -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    ${FULLSHLIBNAME}.a ${DESTDIR}${LIBDIR}
.endif
.endif
.if defined(LINKS) && !empty(LINKS)
.  for lnk file in ${LINKS}
	@@l=${DESTDIR}${lnk}; \
	 t=${DESTDIR}${file}; \
	 echo $$t -\> $$l; \
	 rm -f $$t; ln $$l $$t
.  endfor
.endif

install: maninstall _SUBDIRUSE
maninstall: afterinstall
afterinstall: realinstall
realinstall: beforeinstall
.endif

.if !defined(NOMAN)
.include <bsd.man.mk>
.endif

.include <bsd.obj.mk>
.include <bsd.dep.mk>
.include <bsd.subdir.mk>
.include <bsd.sys.mk>
@


1.89
log
@change -Os to -Oz all around the tree

clang optimizes better for size with -Oz so use that as a default to avoid
overflowing the ramdisk floppies. gcc now accepts -Oz as an alias for -Os.

ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.88 2017/07/11 18:16:48 robert Exp $
d216 2
a217 2
	    awk '/ FILE/{gsub(/\..*/, ".so", $$NF); sub(".*/", "", $$NF); print $$NF}' | \
	    egrep -v "(cmll-586|libgcc2|unwind-dw2)" | awk '!x[$$0]++'` ${LDADD}
@


1.88
log
@use the previous syspatch's fake root for getting the link order
instead of using / where the libraries are re-ordered on reboot

ok aja@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.87 2017/07/04 00:59:11 espie Exp $
d37 1
a37 1
DIST_CFLAGS+=	-Os
@


1.87
log
@let BUILDFIRST just build first, using the same trick guenther@@ did in
kernel Makefiles (thank you!), also add lex and yacc generated files to
that list.

Let those lex/yacc variables be defined for bsd.lib.mk as well.

Complete the SRCS -> OBJS hints with the library dependency

This should fix most dependency problems.

Commit now, so that people can check if something else is still amiss.
krw@@ agrees
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.86 2017/07/02 17:55:14 espie Exp $
d213 1
a213 1
.if defined(SYSPATCH)
d215 2
a216 1
	    `readelf -Ws ${LIBDIR}/${.TARGET} | awk '/ FILE/{gsub(/\..*/, ".so", $$NF); sub(".*/", "", $$NF); print $$NF}' | \
@


1.86
log
@somehow, I did NOT commit the patch I sent to tb@@. Matthieu noticed it.
commit the right DEPS definition.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.85 2017/07/01 14:41:54 espie Exp $
d186 4
d252 2
a253 1
	rm -f a.out [Ee]rrs mklog *.core ${CLEANFILES}
@


1.85
log
@effectively kill depend as an independant target (there are a few corners
where a separate depend step is still needed, mostly gcc3 and mesa).

Use of BUILDFIRST is mostly enough to make sure important stuff is built
first.

Otherwise, this makes use of -M* compiler options to generate dependencies
on the fly.  There is a bit of behind-the-scene for targets with several
steps (like yacc and/or libraries) and the compiler needs extra hand-holding
with assembler files (don't know why, don't care).

Idea based on guenther@@'s initial kernel work, loads of input from
drahn, aoyama, tb, etc.

okay tb@@

"why wait" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.84 2017/06/16 10:20:52 espie Exp $
d185 1
a185 1
DEPS+=	${OBJS:S/$/.d/}
@


1.84
log
@introduce a BUILDFIRST/BUILDAFTER mechanism:
record every standard component built in bsd.lib.mk/bsd.prog.mk in BUILDAFTER
and have BUILDAFTER depend on BUILDFIRST, thus making possible to build
some stuff early without relying on "make depend"

okay tb@@ millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.83 2017/06/07 16:01:07 robert Exp $
d41 2
a42 1
	@@${COMPILE.c} ${.IMPSRC}  -o ${.TARGET}.o
d48 2
a49 1
	@@${COMPILE.c} -p ${.IMPSRC} -o ${.TARGET}.o
d55 2
a56 1
	@@${COMPILE.c} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
d62 2
a63 1
	@@${COMPILE.c} ${DIST_CFLAGS} ${.IMPSRC}  -o ${.TARGET}.o
d69 2
a70 1
	@@${COMPILE.cc} ${.IMPSRC} -o ${.TARGET}.o
d76 2
a77 1
	@@${COMPILE.cc} -p ${.IMPSRC} -o ${.TARGET}.o
d83 2
a84 1
	@@${COMPILE.cc} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
d91 2
a92 1
	@@${COMPILE.f} ${.IMPSRC} -o ${.TARGET}.o
d98 2
a99 1
	@@${COMPILE.f} -p ${.IMPSRC} -o ${.TARGET}.o
d105 2
a106 1
	@@${COMPILE.f} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
d112 3
a114 1
	@@${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} -o ${.TARGET}.o
d121 3
a123 2
	@@${COMPILE.S} -DPROF ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} \
	    -o ${.TARGET}.o
d130 3
a132 2
	@@${COMPILE.S} ${PICFLAG} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} \
	    -o ${.TARGET}.o
d139 3
a141 2
	@@${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} ${DIST_CFLAGS} ${.IMPSRC} \
	    -o ${.TARGET}.o
d185 1
d196 1
d205 1
a257 4
.if defined(SRCS)
afterdepend: .depend
	@@sed -i 's/^\([^\.]*\).o[ ]*:/\1.o \1.po \1.so \1.do:/' .depend
.endif
@


1.83
log
@make sure there are no duplicate object files linked when building syspatches
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.82 2017/06/05 09:51:27 robert Exp $
d167 2
d170 1
d179 1
d187 1
d208 1
@


1.82
log
@exclude more objects from the readelf output when building syspatches (needed on i386)
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.81 2017/04/27 17:41:47 robert Exp $
d189 1
a189 1
	    egrep -v "(cmll-586|libgcc2|unwind-dw2)"` ${LDADD}
@


1.81
log
@syspatch needs to create shared libs with the same object sequence instead
of randomizing the order so let's read the libs on the system and link the
same way in case a syspatch is being built
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.80 2017/03/26 18:50:37 guenther Exp $
d189 1
a189 1
	    grep -v unwind-dw2` ${LDADD}
@


1.80
log
@The support in 'ar' for 'D'eterministic builds has been in for weeks,
so start using it to make archives (mostly) detereministic for syspatch

ok millert@@ deraadt@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.79 2016/11/08 19:04:49 natano Exp $
d186 5
d193 1
@


1.79
log
@Use sed -i to post-process .depend. This avoids permission issues caused
by the file being created in /tmp.

tweaks and ok tb
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.78 2016/10/15 13:00:07 espie Exp $
d172 1
a172 1
	@@${AR} cq lib${LIB}.a `${LORDER} ${OBJS} | tsort -q`
d179 1
a179 1
	@@${AR} cq lib${LIB}_p.a `${LORDER} ${POBJS} | tsort -q`
d193 1
a193 1
	ar cq ${FULLSHLIBNAME}.a ${SOBJS} .ldadd ${SYMBOLSMAP}
d210 1
a210 1
	@@${AR} cq ${DIST_LIB} `${LORDER} ${SELECTED_DOBJS} | tsort -q`
d212 1
a212 1
	@@${AR} cq ${DIST_LIB}
@


1.78
log
@unify tmp depend generation.
- simpler uniform pattern
- put the tmpfile in OBJDIR, so that mv doesn't whine about groups
when using a separate builduser.

okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.77 2016/07/04 18:01:44 guenther Exp $
d230 1
a230 7
	@@TMP=`mktemp .dependXXXXXXXXXX` || exit 1; \
	if sed -e 's/^\([^\.]*\).o[ ]*:/\1.o \1.po \1.so \1.do:/' \
	      < .depend > $$TMP; then \
		mv $$TMP .depend; \
    	else \
		rm -f $$TMP; \
	fi
@


1.77
log
@DEBUGLIBS has been broken since the gcc4 switch, so delete it.  CFLAGS
contains -g by default anyway

problem noted by Edgar Pettijohn (edgar (at) pettijohn-web.com)
ok millert@@ kettenis@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.76 2016/05/15 03:44:32 guenther Exp $
d230 7
a236 8
	@@(TMP=`mktemp -q /tmp/_dependXXXXXXXXXX`; \
	if [ $$? -ne 0 ]; then \
		echo "$$0: cannot create temp file, exiting..."; \
		exit 1; \
	fi; \
	sed -e 's/^\([^\.]*\).o[ ]*:/\1.o \1.po \1.so \1.do:/' \
	      < .depend > $$TMP; \
	mv $$TMP .depend)
@


1.76
log
@make 'make clean' clean up the .ldadd file, in case LIBREBUILD was set

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.75 2016/04/26 14:49:15 deraadt Exp $
d29 1
a29 1
.SUFFIXES: .out .o .go .po .so .do .S .s .c .cc .cpp .C .cxx .f .y .l .m4 .m
a44 6
.c.go:
	@@echo "${COMPILE.c} -g ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} -g ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

a68 6
.cc.go .cpp.go .C.go .cxx.go:
	@@echo "${COMPILE.cc} -g ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -g ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

a87 6
.f.go:
	@@echo "${COMPILE.f} -g ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} -g ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

a105 6
.S.go .s.go:
	@@echo "${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

a139 3
.if (${DEBUGLIBS:L} == "yes")
_LIBS+=lib${LIB}_g.a
.endif
a174 7
GOBJS+=	${OBJS:.o=.go}
lib${LIB}_g.a: ${GOBJS}
	@@echo building debugging ${LIB} library
	@@rm -f lib${LIB}_g.a
	@@${AR} cq lib${LIB}_g.a `${LORDER} ${GOBJS} | tsort -q`
	${RANLIB} lib${LIB}_g.a

d235 1
a235 1
	sed -e 's/^\([^\.]*\).o[ ]*:/\1.o \1.go \1.po \1.so \1.do:/' \
a252 9
.if (${DEBUGLIBS:L} == "yes")
#	ranlib lib${LIB}_g.a
	${INSTALL} ${INSTALL_COPY} -S -o ${LIBOWN} -g ${LIBGRP} -m 600 \
	    lib${LIB}_g.a ${DESTDIR}${LIBDIR}/debug/lib${LIB}.a
.if (${INSTALL_COPY} != "-p")
	${RANLIB} -t ${DESTDIR}${LIBDIR}/debug/lib${LIB}.a
.endif
	chmod ${LIBMODE} ${DESTDIR}${LIBDIR}/debug/lib${LIB}.a
.endif
@


1.75
log
@provide support for a library setting LIBREBUILD, in which case a ar(1)
file is created of all the subsidiary .so files
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.74 2015/10/26 10:43:42 bluhm Exp $
d256 1
a256 1
	rm -f lib${LIB}.so.*.* ${SOBJS}
@


1.74
log
@Nothing in base uses native language support anymore.  Remove NLS
support from the makefiles.
OK naddy@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.73 2015/07/19 20:45:30 guenther Exp $
d177 9
d221 7
a227 1
	    `${LORDER} ${SOBJS}|tsort -q` ${LDADD}
d308 4
@


1.73
log
@Add infrastructure for specifying a "version script" for the shared library
being built.

ok kettenis@@ zhuk@@ millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.72 2015/05/14 02:56:01 jsg Exp $
a310 4
.endif

.if !defined(NONLS)
.include <bsd.nls.mk>
@


1.72
log
@Stop including CFLAGS in CXXFLAGS it creates problems when mixing
C and C++ when wanting to pass flags to only the C compiler.

Tested in a ports bulk build by naddy and the handful of problems
found were fixed by naddy, jca and pascal.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.71 2013/10/15 22:40:00 deraadt Exp $
d173 7
a179 1
_LIBS+=lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
d208 1
a208 1
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: ${SOBJS} ${DPADD}
d210 2
a211 3
	@@rm -f lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
	${CC} -shared ${PICFLAG} \
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} \
d292 1
a292 1
	    lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} ${DESTDIR}${LIBDIR}
@


1.71
log
@We do not produce "core" files, so they do not need to be deleted.  they
have been *.core files for a very long time.  That's a lot of unlink()
calls saved.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.70 2013/10/13 23:30:12 guenther Exp $
d33 1
@


1.70
log
@Make it possible to build to reduced version of a library, including
just specific objects that are compiled with additional options to
reduce their size.  For use by distrib/ and crunchgen.

style and naming assistance from espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.69 2013/03/18 10:51:35 mpi Exp $
d231 1
a231 1
	rm -f a.out [Ee]rrs mklog core *.core ${CLEANFILES}
@


1.69
log
@Recognize and treat files with .cpp extension like any other C++ file.
This will help me reduce some xenocara Makefiles and as millert@@ pointed
out, .cpp has won over .C or .cxx ;)

Tested in a bulk by landry@@, ok espie@@, sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.68 2012/09/16 20:41:16 kettenis Exp $
d26 1
d29 1
a29 1
.SUFFIXES: .out .o .go .po .so .S .s .c .cc .cpp .C .cxx .f .y .l .m4 .m
d36 2
d62 6
d145 8
d208 21
d236 1
d248 1
a248 1
	sed -e 's/^\([^\.]*\).o[ ]*:/\1.o \1.po \1.so:/' \
@


1.68
log
@Add support for building non-PIE libraries.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.67 2012/08/31 20:13:09 kettenis Exp $
d28 1
a28 1
.SUFFIXES: .out .o .go .po .so .S .s .c .cc .C .cxx .f .y .l .m4 .m
d59 1
a59 1
.cc.o .C.o .cxx.o:
d65 1
a65 1
.cc.go .C.go .cxx.go:
d71 1
a71 1
.cc.po .C.po .cxx.po:
d77 1
a77 1
.cc.so .C.so .cxx.so:
@


1.67
log
@Don't treat zaurus special; everybody gets libraries with debug info now.
We just savd a bunch of space anyway by no longer creating _pic.a libraries.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.66 2012/08/31 00:11:26 deraadt Exp $
d29 5
@


1.66
log
@No longer create lib*_pic.a files.  Nothing uses them anymore.
grep help from sthen; discussion with brad
ok guenther pascal
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.65 2012/08/22 17:19:34 pascal Exp $
a137 1
.if ${MACHINE} != "zaurus"
a138 1
.endif
@


1.65
log
@Convert cpp | as rules in bsd.lib.mk and lib/libc/sys/Makefile.inc to pure cc
invocations.  This allows us to use the compiler builtin define __PIC__ to check
for PIC/PIEness rather than passing -DPIC.  Simplifies PIE work a lot.

ok matthew@@, conceptually ok kurt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.64 2012/07/08 08:44:55 espie Exp $
a150 3
.if (${MACHINE_CPU} != "mips64")
_LIBS+=lib${LIB}_pic.a
.endif
a180 6
lib${LIB}_pic.a: ${SOBJS}
	@@echo building shared object ${LIB} library
	@@rm -f lib${LIB}_pic.a
	@@${AR} cq lib${LIB}_pic.a `${LORDER} ${SOBJS} | tsort -q`
	${RANLIB} lib${LIB}_pic.a

d194 1
a194 1
	rm -f lib${LIB}_pic.a lib${LIB}.so.*.* ${SOBJS}
a240 9
.endif
.if !defined(NOPIC) && (${MACHINE_CPU} != "mips64") 
#	ranlib lib${LIB}_pic.a
	${INSTALL} ${INSTALL_COPY} -S -o ${LIBOWN} -g ${LIBGRP} -m 600 \
	    lib${LIB}_pic.a ${DESTDIR}${LIBDIR}
.if (${INSTALL_COPY} != "-p")
	${RANLIB} -t ${DESTDIR}${LIBDIR}/lib${LIB}_pic.a
.endif
	chmod ${LIBMODE} ${DESTDIR}${LIBDIR}/lib${LIB}_pic.a
@


1.64
log
@remove unneeded and error-prone  ::  rules

okay guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.63 2012/07/04 09:01:56 espie Exp $
d104 2
a105 4
	@@echo "${CPP} ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} | \
		${AS} -o ${.TARGET}"
	@@${CPP} ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} | \
	    ${AS} -o ${.TARGET}.o
d110 2
a111 4
	@@echo "${CPP} ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} |\
	    ${AS} -o ${.TARGET}"
	@@${CPP} ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} | \
	    ${AS} -o ${.TARGET}.o
d116 4
a119 4
	@@echo "${CPP} -DPROF ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} |\
	    ${AS} -o ${.TARGET}"
	@@${CPP} -DPROF ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} | \
	    ${AS} -o ${.TARGET}.o
d124 4
a127 4
	@@echo "${CPP} -DPIC ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} | \
	    ${AS} ${ASPICFLAG} -o ${.TARGET}"
	@@${CPP} -DPIC ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} | \
	    ${AS} ${ASPICFLAG} -o ${.TARGET}.o
@


1.63
log
@remove old arm bootstrap scaffold.
checked this was no longer necessary by miod@@
ok miod@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.62 2012/04/08 15:56:28 jsg Exp $
d167 1
a167 1
lib${LIB}.a:: ${OBJS}
d174 1
a174 1
lib${LIB}_g.a:: ${GOBJS}
d181 1
a181 1
lib${LIB}_p.a:: ${POBJS}
d188 1
a188 1
lib${LIB}_pic.a:: ${SOBJS}
@


1.62
log
@unhook lint from the tree.  The parser is incomplete and difficult
to fix and there are several alternatives that don't tell quite so many
dangerous lies.

enthusiastic agreement from a bunch of people
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.61 2011/07/16 23:34:21 guenther Exp $
a103 4
.if (${MACHINE_ARCH} == "arm")
	@@echo ${COMPILE.S:Q} ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC}
	@@${COMPILE.S} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} -o ${.TARGET}.o
.else
a107 1
.endif
@


1.61
log
@The /g flag is unneeded when the pattern in ${var:S/pattern/sub/g} can
only match once per word, such as when it's anchored with '$'

ok espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.60 2010/07/30 19:23:38 ckuethe Exp $
d25 1
a25 1
# .so used for PIC object files.  .ln used for lint output files.
d28 1
a28 1
.SUFFIXES: .out .o .go .po .so .S .s .c .cc .C .cxx .f .y .l .ln .m4 .m
a53 3
.c.ln:
	${LINT} ${LINTFLAGS} ${CFLAGS:M-[IDU]*} ${CPPFLAGS:M-[IDU]*} -i ${.IMPSRC}

a167 4
.if defined(WANTLINT) && ${WANTLINT:L} != "no"
_LIBS+=llib-l${LIB}.ln
.endif

a205 7
LOBJS+=	${LSRCS:.c=.ln} ${SRCS:M*.c:.c=.ln}
LLIBS?=	-lc
llib-l${LIB}.ln: ${LOBJS}
	@@echo building llib-l${LIB}.ln
	@@rm -f llib-l${LIB}.ln
	@@${LINT} -C${LIB} ${LOBJS} ${LLIBS}

a212 1
	rm -f llib-l${LIB}.ln ${LOBJS}
a271 4
.endif
.if defined(WANTLINT) && ${WANTLINT:L} != "no"
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    llib-l${LIB}.ln ${DESTDIR}${LINTLIBDIR}
@


1.60
log
@Add "-S" to library installs to avoid breakage when one
"make -j8 build" job is installing libc and another job
is expecting to use libc (for example). ok phessler
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.59 2010/02/03 20:49:01 miod Exp $
d177 1
a177 1
OBJS+=	${SRCS:N*.h:R:S/$/.o/g}
@


1.59
log
@Use MACHINE_CPU instead of MACHINE_ARCH to pick the correct machine dependent
files or directories when applicable.
The inspiration and name of MACHINE_CPU come from NetBSD, although the way to
provide it to Makefiles is completely different.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.58 2009/02/05 19:15:21 miod Exp $
d251 1
a251 1
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 lib${LIB}.a \
d259 1
a259 1
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 \
d268 1
a268 1
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 \
d277 1
a277 1
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 \
d285 1
a285 1
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
@


1.58
log
@Revert 1.54 and build debug libs on hp300 too.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.57 2007/01/04 11:51:26 otto Exp $
d163 1
a163 1
.if (${MACHINE_ARCH} != "mips64")
d275 1
a275 1
.if !defined(NOPIC) && (${MACHINE_ARCH} != "mips64") 
@


1.57
log
@actually echo what's being executed; ok espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.56 2006/06/26 03:12:37 brad Exp $
d150 1
a150 1
.if ${MACHINE} != "hp300" && ${MACHINE} != "zaurus"
@


1.56
log
@remove extraneous brackets and list the architecures in alphabetic order.

no objection from miod@@ and krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.55 2006/02/03 19:24:52 bernd Exp $
d31 1
a31 1
	@@echo "${COMPILE.c} ${DEBUG1} ${.IMPSRC} -o ${.TARGET}"
@


1.55
log
@Consistency fix. Use ${} instead of $() for variables.

ok millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.54 2006/01/11 23:53:32 deraadt Exp $
d150 1
a150 1
.if (${MACHINE} != "zaurus") && (${MACHINE} != "hp300")
@


1.54
log
@skip -g libs on hp300 too, it is too heavy
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.53 2005/12/30 16:40:08 grange Exp $
d13 3
a15 3
.if defined(LIB) && defined(LIB$(LIB)_VERSION)
SHLIB_MAJOR=$(LIB$(LIB)_VERSION:R)
SHLIB_MINOR=$(LIB$(LIB)_VERSION:E)
@


1.53
log
@Allow to disable lint by setting WANTLIB=no

ok deraadt@@ espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.52 2005/12/29 14:44:05 espie Exp $
d150 1
a150 1
.if (${MACHINE} != "zaurus")
@


1.52
log
@allows a shared library version to be set using LIBname_VERSION=major.minor
This overrides the major/minor contents of an shlib_version.

Useful for overriding version numbers in ports.

after discussion with bernd@@, millert@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.51 2005/12/16 19:45:19 kettenis Exp $
d171 1
a171 1
.if defined(WANTLINT)
d288 1
a288 1
.if defined(WANTLINT)
@


1.51
log
@Fix typo.  Spotted by hannah at schlund dot de.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.50 2005/12/16 02:29:49 deraadt Exp $
d13 4
d19 1
@


1.50
log
@zaurus cannot fit -g on standard drive, total bummer
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.49 2005/12/08 19:56:56 kettenis Exp $
d65 1
a65 1
	@@echo "${COMPILE.cc} $-p ${.IMPSRC} -o ${.TARGET}"
@


1.49
log
@Compile all libraries with -g; -g1 has some issues and isn't widely used;
-g is much more useful anyway.
welcomed by many, ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.48 2005/12/01 22:08:43 deraadt Exp $
d145 1
d147 1
@


1.48
log
@remove some crud
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.47 2005/12/01 22:07:26 kettenis Exp $
d27 2
a28 2
	@@${COMPILE.c} ${DEBUG1} ${.IMPSRC}  -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
d38 2
a39 2
	@@echo "${COMPILE.c} ${DEBUG1} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${DEBUG1} -p ${.IMPSRC} -o ${.TARGET}.o
d44 3
a46 4
	@@echo "${COMPILE.c} ${DEBUG1} ${PICFLAG} -DPIC ${.IMPSRC} \
		-o ${.TARGET}"
	@@${COMPILE.c} ${DEBUG1} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
d53 3
a55 3
	@@echo "${COMPILE.cc} ${DEBUG1} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${DEBUG1} ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
d65 2
a66 2
	@@echo "${COMPILE.cc} ${DEBUG1} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${DEBUG1} -p ${.IMPSRC} -o ${.TARGET}.o
d71 3
a73 4
	@@echo "${COMPILE.cc} ${DEBUG1} ${PICFLAG} -DPIC ${.IMPSRC} \
		-o ${.TARGET}"
	@@${COMPILE.cc} ${DEBUG1} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
d78 3
a80 3
	@@echo "${COMPILE.f} ${DEBUG1} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} ${DEBUG1} ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
d90 2
a91 2
	@@echo "${COMPILE.f} ${DEBUG1} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} ${DEBUG1} -p ${.IMPSRC} -o ${.TARGET}.o
d96 3
a98 4
	@@echo "${COMPILE.f} ${DEBUG1} ${PICFLAG} -DPIC ${.IMPSRC} \
		-o ${.TARGET}"
	@@${COMPILE.f} ${DEBUG1} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
d111 1
a111 1
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
d135 1
a135 1
	@@${LD} -x -r ${.TARGET}.o -o ${.TARGET}
d145 1
a145 3
.if !defined(DEBUG)
DEBUG1?=	-g1
.endif
@


1.47
log
@Build lib.a, lib_p.a and lib.so.x.y with -g1.
This should give us meaningful backtraces through system libraries.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.46 2005/11/30 13:04:55 steven Exp $
a211 1
# the following looks XXX to me... -- cgd
@


1.46
log
@support for Fortran 77 libraries

"go ahead" espie@@, "looks reasonable" kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.45 2005/11/23 18:34:33 deraadt Exp $
d26 2
a27 2
	@@echo "${COMPILE.c} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${.IMPSRC}  -o ${.TARGET}.o
d38 2
a39 2
	@@echo "${COMPILE.c} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} -p ${.IMPSRC} -o ${.TARGET}.o
d44 3
a46 2
	@@echo "${COMPILE.c} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
d54 2
a55 2
	@@echo "${COMPILE.cc} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${.IMPSRC} -o ${.TARGET}.o
d66 2
a67 2
	@@echo "${COMPILE.cc} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} -p ${.IMPSRC} -o ${.TARGET}.o
d72 3
a74 2
	@@echo "${COMPILE.cc} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
d80 2
a81 2
	@@echo "${COMPILE.f} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} ${.IMPSRC} -o ${.TARGET}.o
d92 2
a93 2
	@@echo "${COMPILE.f} -p ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} -p ${.IMPSRC} -o ${.TARGET}.o
d98 3
a100 2
	@@echo "${COMPILE.f} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.f} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
d147 4
@


1.45
log
@change NOLINT into opposite sense; WANTLINT, since it lets us built
lint libraries for those libraries which want them (and can have them)
ok millert
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.44 2005/09/12 17:10:40 espie Exp $
d73 25
@


1.44
log
@give a full pathname to the installed library, so we don't get a WTF? error
if the directory does not yet exist.

okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.43 2004/09/20 18:52:38 espie Exp $
d137 1
a137 1
.if !defined(NOLINT)
d255 1
a255 1
.if !defined(NOLINT)
@


1.43
log
@pass CPPFLAGS to CLINT. ok deraadt@@, millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.42 2004/08/11 09:43:12 deraadt Exp $
d219 1
a219 1
	    ${DESTDIR}${LIBDIR}
@


1.42
log
@mips -> mips64; pefo ok
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.41 2004/07/08 02:35:51 deraadt Exp $
d50 1
a50 1
	${LINT} ${LINTFLAGS} ${CFLAGS:M-[IDU]*} -i ${.IMPSRC}
@


1.41
log
@for the arm workaround, include CPPFLAGS; ok drahn
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.40 2004/07/08 01:29:23 pvalchev Exp $
d129 1
a129 1
.if (${MACHINE_ARCH} != "mips")
d242 1
a242 1
.if !defined(NOPIC) && (${MACHINE_ARCH} != "mips") 
@


1.40
log
@again: move PICFLAG into bsd.own.mk with the rest of the shlib handling,
and thus simplify logic.  now including bsd.own.mk will override
any current setting in PICFLAG, which is desired.  ok deraadt drahn
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.38 2004/06/22 19:50:01 pvalchev Exp $
d78 1
a78 1
	@@echo ${COMPILE.S:Q} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC}
@


1.39
log
@undo tree breakage, sorry
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.37 2004/02/01 06:02:13 drahn Exp $
a118 11

.if !defined(PICFLAG) && (${MACHINE_ARCH} != "mips")
PICFLAG=-fpic
.if ${MACHINE_ARCH} == "m68k"
# Function CSE makes gas -k not recognize external function calls as lazily
# resolvable symbols, thus sometimes making ld.so report undefined symbol
# errors on symbols found in shared library members that would never be 
# called.  Ask niklas@@openbsd.org for details.
PICFLAG+=-fno-function-cse
.endif
.endif
@


1.38
log
@move PICFLAG into bsd.own.mk where the rest of the lib stuff is
(don't ask why) and simplify logic; needed soon
@
text
@d120 11
@


1.37
log
@arm support. ok espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.36 2001/09/25 14:33:44 drahn Exp $
a118 11

.if !defined(PICFLAG) && (${MACHINE_ARCH} != "mips")
PICFLAG=-fpic
.if ${MACHINE_ARCH} == "m68k"
# Function CSE makes gas -k not recognize external function calls as lazily
# resolvable symbols, thus sometimes making ld.so report undefined symbol
# errors on symbols found in shared library members that would never be 
# called.  Ask niklas@@openbsd.org for details.
PICFLAG+=-fno-function-cse
.endif
.endif
@


1.36
log
@change another -k to ${ASPICFLAGS} missed in the previous commit.
ok jason@@ art@@.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.35 2001/07/22 13:37:29 espie Exp $
d77 4
d85 1
@


1.35
log
@belt-and-suspenders: define SHLIB_* from major/minor, then use
SHLIB_* exclusively.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.34 2001/07/21 16:04:03 espie Exp $
d102 1
a102 1
	    ${AS} -k -o ${.TARGET}"
d104 1
a104 1
	    ${AS} -k -o ${.TARGET}.o
@


1.34
log
@Define SHLIB_MAJOR and SHLIB_MINOR from major/minor, so that perl library
does install.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.33 2001/07/20 23:02:21 espie Exp $
d138 2
a139 2
.if defined(major) && defined(minor)
_LIBS+=lib${LIB}.so.${major}.${minor}
d178 3
a180 3
lib${LIB}.so.${major}.${minor}: ${SOBJS} ${DPADD}
	@@echo building shared ${LIB} library \(version ${major}.${minor}\)
	@@rm -f lib${LIB}.so.${major}.${minor}
d182 1
a182 1
	    -o lib${LIB}.so.${major}.${minor} \
d257 1
a257 1
.if !defined(NOPIC) && defined(major) && defined(minor)
d259 1
a259 1
	    lib${LIB}.so.${major}.${minor} ${DESTDIR}${LIBDIR}
@


1.33
log
@One BINDIR too many, I don't know how I pulled that one.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.31 2001/07/19 23:16:17 espie Exp $
d13 2
@


1.32
log
@undo broken changes, i dunno a fix for these; how many times you gonna repeat the same mistake espie@@ and millert@@ ?
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.30 2001/07/18 13:23:03 espie Exp $
d12 1
a12 2
SHLIB_MAJOR != . ${.CURDIR}/shlib_version ; echo $$major
SHLIB_MINOR != . ${.CURDIR}/shlib_version ; echo $$minor
d136 2
a137 2
.if defined(SHLIB_MAJOR) && defined(SHLIB_MINOR)
_LIBS+=lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
d176 3
a178 11
.if (${MACHINE_ARCH} == "mips")
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: ${OBJS} ${DPADD}
	@@echo building shared ${LIB} library \(version ${SHLIB_MAJOR}.${SHLIB_MINOR}\)
	@@rm -f lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
	${CC} -shared ${PICFLAG} -Wl,-soname,lib${LIB}.so.${SHLIB_MAJOR} \
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} \
	    `${LORDER} ${OBJS}|tsort -q` ${LDADD}
.else
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: ${SOBJS} ${DPADD}
	@@echo building shared ${LIB} library \(version ${SHLIB_MAJOR}.${SHLIB_MINOR}\)
	@@rm -f lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
d180 1
a180 1
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} \
a181 1
.endif
d255 1
a255 1
.if !defined(NOPIC) && defined(SHLIB_MAJOR) && defined(SHLIB_MINOR)
d257 1
a257 1
	    lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} ${DESTDIR}${LIBDIR}
d264 6
a269 10
	@@set ${LINKS}; \
	while test $$# -ge 2; do \
		l=${DESTDIR}$$1; \
		shift; \
		t=${DESTDIR}$$1; \
		shift; \
		echo $$t -\> $$l; \
		rm -f $$t; \
		ln $$l $$t; \
	done; true
@


1.31
log
@Minor speed-up tweaks.
- use .for a b in   new syntax for make  to handle links.
- kill mips
- .include shlib_version, since its contents is happy as a Makefile
fragment (avoids 10 shell escapes per lib directory, roughly)

okay millert@@
@
text
@d12 2
a13 1
.include "${.CURDIR}/shlib_version"
d137 2
a138 2
.if defined(major) && defined(minor)
_LIBS+=lib${LIB}.so.${major}.${minor}
d177 11
a187 3
lib${LIB}.so.${major}.${minor}: ${SOBJS} ${DPADD}
	@@echo building shared ${LIB} library \(version ${major}.${minor}\)
	@@rm -f lib${LIB}.so.${major}.${minor}
d189 1
a189 1
	    -o lib${LIB}.so.${major}.${minor} \
d191 1
d265 1
a265 1
.if !defined(NOPIC) && defined(major) && defined(minor)
d267 1
a267 1
	    lib${LIB}.so.${major}.${minor} ${DESTDIR}${LIBDIR}
d274 10
a283 6
.  for lnk file in ${LINKS}
	@@l=${DESTDIR}${lnk}; \
	 t=${DESTDIR}${file}; \
	 echo $$t -\> $$l; \
	 rm -f $$t; ln $$l $$t
.  endfor
@


1.30
log
@CDIAGFLAGS, added to CFLAGS if WARNINGS=Yes
Symetrize C++ situation: add CXXOPTS, CXXDIAGFLAGS.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.29 2001/05/05 17:44:49 espie Exp $
d12 1
a12 2
SHLIB_MAJOR != . ${.CURDIR}/shlib_version ; echo $$major
SHLIB_MINOR != . ${.CURDIR}/shlib_version ; echo $$minor
d136 2
a137 2
.if defined(SHLIB_MAJOR) && defined(SHLIB_MINOR)
_LIBS+=lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
d176 3
a178 11
.if (${MACHINE_ARCH} == "mips")
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: ${OBJS} ${DPADD}
	@@echo building shared ${LIB} library \(version ${SHLIB_MAJOR}.${SHLIB_MINOR}\)
	@@rm -f lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
	${CC} -shared ${PICFLAG} -Wl,-soname,lib${LIB}.so.${SHLIB_MAJOR} \
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} \
	    `${LORDER} ${OBJS}|tsort -q` ${LDADD}
.else
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: ${SOBJS} ${DPADD}
	@@echo building shared ${LIB} library \(version ${SHLIB_MAJOR}.${SHLIB_MINOR}\)
	@@rm -f lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
d180 1
a180 1
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} \
a181 1
.endif
d255 1
a255 1
.if !defined(NOPIC) && defined(SHLIB_MAJOR) && defined(SHLIB_MINOR)
d257 1
a257 1
	    lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} ${DESTDIR}${LIBDIR}
d264 6
a269 10
	@@set ${LINKS}; \
	while test $$# -ge 2; do \
		l=${DESTDIR}$$1; \
		shift; \
		t=${DESTDIR}$$1; \
		shift; \
		echo $$t -\> $$l; \
		rm -f $$t; \
		ln $$l $$t; \
	done; true
@


1.29
log
@Synch with bsd.prog.mk.
The only client won't see the difference.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.28 2001/04/03 23:00:09 espie Exp $
d107 4
d112 1
@


1.28
log
@Minor clean-ups:
- document some more things (MANPS, make oddities)
- put all PHONY targets in bsd.own.mk, since it's included by everything
that uses it.
- remove them from bsd.lib.mk, since it includes bsd.own.mk.
- ... except for load/unload, which are only in bsd.lkm.mk.
- fix spell target, so that it actually depends on the generated file.

okay niklas@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.27 2000/10/18 11:35:50 brad Exp $
d271 1
a271 1
		l=${DESTDIR}${BINDIR}/$$1; \
d273 1
a273 1
		t=${DESTDIR}${BINDIR}/$$1; \
@


1.27
log
@hardcoded "gcc" -> ${CC}; ok espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.26 2000/10/09 15:50:31 espie Exp $
a285 3

.PHONY: all clean cleandir afterdepend beforeinstall realinstall \
	maninstall afterinstall install
@


1.26
log
@Use gcc -shared -fpic to build shared libraries on all arches.
This repairs objective C.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.25 2000/10/03 23:17:07 mickey Exp $
d176 1
a176 1
	gcc -shared ${PICFLAG} -Wl,-soname,lib${LIB}.so.${SHLIB_MAJOR} \
d183 1
a183 1
	gcc -shared ${PICFLAG} \
@


1.25
log
@allow ../Makefile.inc to overwrite mk.conf settings; millert@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.24 2000/09/03 18:41:23 espie Exp $
d173 1
a173 1
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: lib${LIB}.a ${DPADD}
d176 3
a178 9
	$(LD) -x -shared --whole-archive -soname lib${LIB}.so.${SHLIB_MAJOR} \
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} lib${LIB}.a ${LDADD}
.elif (${MACHINE_ARCH} == "powerpc" )  
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: lib${LIB}_pic.a ${DPADD}
	@@echo building shared ${LIB} library \(version ${SHLIB_MAJOR}.${SHLIB_MINOR}\)
	@@rm -f lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
	$(LD) -x -shared --whole-archive \
	    -soname lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} \
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} lib${LIB}_pic.a ${LDADD}
d180 1
a180 1
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: lib${LIB}_pic.a ${DPADD}
d183 3
a185 2
	$(LD) -x -Bshareable -Bforcearchive \
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} lib${LIB}_pic.a ${LDADD}
d286 3
@


1.24
log
@Boring...  Add :L modifier to all tweakable variables tests.

Closes PR 1246
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.23 2000/07/15 12:45:04 rahnds Exp $
d5 2
a9 2

.include <bsd.own.mk>				# for 'NOPIC' definition
@


1.23
log
@Build shared libraries as expected for the new libexec/ld.so. Currently
this is only used for the powerpc.
The difference between this and the mips (both ELF) is that powerpc expects
the soname field to be libX.{major}.{minor} and is to be built from
the _pic version of the library.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.22 2000/05/16 06:15:00 niklas Exp $
d121 1
a121 1
.if (${DEBUGLIBS} == "yes")
d238 1
a238 1
.if (${DEBUGLIBS} == "yes")
@


1.22
log
@DEBUGLIBS=no still makes defined(DEBUGLIBS) true, ;-)
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.21 2000/05/15 06:10:21 niklas Exp $
d172 7
a178 1
.if (${MACHINE_ARCH} != "mips") 
d182 2
a183 1
	$(LD) -x -Bshareable -Bforcearchive \
d186 1
a186 1
lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR}: lib${LIB}.a ${DPADD}
d189 2
a190 2
	$(LD) -x -shared --whole-archive -soname lib${LIB}.so.${SHLIB_MAJOR} \
	    -o lib${LIB}.so.${SHLIB_MAJOR}.${SHLIB_MINOR} lib${LIB}.a ${LDADD}
@


1.21
log
@Add support for building libraries with debugging information in them.
Enable by setting DEBUGLIBS=yes in /etc/mk.conf, then -g libraries will get
installed in /usr/lib/debug.  This directory will be searched first if
gcc is given the -g flag during the link stage.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.20 1999/05/26 19:10:28 espie Exp $
d121 1
a121 1
.if defined(DEBUGLIBS)
d231 1
a231 1
.if defined(DEBUGLIBS)
@


1.20
log
@Add .m files, necessary to compile libobjc.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.19 1999/01/27 03:28:51 espie Exp $
d22 1
a22 1
.SUFFIXES: .out .o .po .so .S .s .c .cc .C .cxx .f .y .l .ln .m4 .m
d30 6
d57 6
d83 8
d120 4
d125 1
a125 3
_LIBS=lib${LIB}.a lib${LIB}_p.a
.else
_LIBS=lib${LIB}.a
d151 7
d198 1
d231 9
@


1.19
log
@Fix confusing typo
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.18 1998/12/31 23:49:45 millert Exp $
d20 1
d22 1
a22 1
.SUFFIXES: .out .o .po .so .S .s .c .cc .C .cxx .f .y .l .ln .m4
@


1.18
log
@Add ${PIPE} in sys.mk so we do no need to add all over the places; evanc@@concer.to
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.17 1998/12/19 19:07:33 millert Exp $
d45 1
a45 1
	@@echo "${COMPILE.cc} ${.IMPSRC} -o ${TARGET}"
@


1.17
log
@add PIPE variable, suitable for /etc/mk.conf, to enable gcc -pipe mode
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.16 1997/11/05 09:51:06 deraadt Exp $
d86 1
a86 1
CFLAGS+=	${COPTS} ${PIPE}
@


1.16
log
@.cxx support from Mathieu.Herrb@@mipnet.fr
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.15 1997/09/08 11:16:10 niklas Exp $
d86 1
a86 1
CFLAGS+=	${COPTS}
@


1.15
log
@Do not do function CSE on PIC code for m68k, gas does not handle it
correctly, making spurious "undefined symbol" errors turn up without reason
occasionally.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.14 1997/06/12 15:06:34 grr Exp $
d21 1
a21 1
.SUFFIXES: .out .o .po .so .S .s .c .cc .C .f .y .l .ln .m4
d44 1
a44 1
.cc.o .C.o:
d50 1
a50 1
.cc.po .C.po:
d56 1
a56 1
.cc.so .C.so:
@


1.14
log
@make bsd.lib.mk a bit more consistant about the lies it echo's
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.13 1997/04/27 21:38:28 millert Exp $
d90 7
@


1.13
log
@COPY -> INSTALL_COPY and STRIP -> INSTALL_STRIP changes.
For some reason the previous commit did not grab these.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.12 1997/02/06 10:49:17 niklas Exp $
d24 1
a24 1
	@@echo "${COMPILE.c} ${.IMPSRC}"
d45 1
a45 1
	@@echo "${COMPILE.cc} ${.IMPSRC}"
@


1.12
log
@Add a LORDER make symbol and use it
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.11 1997/01/26 00:22:28 deraadt Exp $
d187 1
a187 1
	${INSTALL} ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 lib${LIB}.a \
d189 1
a189 1
.if (${COPY} != "-p")
d195 1
a195 1
	${INSTALL} ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 \
d197 1
a197 1
.if (${COPY} != "-p")
d204 1
a204 1
	${INSTALL} ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 \
d206 1
a206 1
.if (${COPY} != "-p")
d212 1
a212 1
	${INSTALL} ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
d216 1
a216 1
	${INSTALL} ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
@


1.11
log
@use mktemp(1) to avoid /tmp race; spotted by dholland@@eecs.harvard.edu
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.10 1996/12/08 14:42:28 downsj Exp $
d118 1
a118 1
	@@${AR} cq lib${LIB}.a `lorder ${OBJS} | tsort -q`
d125 1
a125 1
	@@${AR} cq lib${LIB}_p.a `lorder ${POBJS} | tsort -q`
d132 1
a132 1
	@@${AR} cq lib${LIB}_pic.a `lorder ${SOBJS} | tsort -q`
@


1.10
log
@install -> ${INSTALL}, -c -> ${COPY}
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.9 1996/11/14 14:21:22 mickey Exp $
d170 6
a175 2
	@@(TMP=/tmp/_depend$$$$; \
	    sed -e 's/^\([^\.]*\).o[ ]*:/\1.o \1.po \1.so:/' \
d177 1
a177 1
	    mv $$TMP .depend)
@


1.9
log
@correct LINKS usage
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.8 1996/08/05 16:56:55 millert Exp $
d183 1
a183 1
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 lib${LIB}.a \
d191 1
a191 1
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 \
d200 1
a200 1
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m 600 \
d208 1
a208 1
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
d212 1
a212 1
	install ${COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
@


1.8
log
@Don't do "ranlib -t" if installed with "-p" since that preserves
the timestamp so things are already in sync.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.7 1996/07/22 09:11:32 deraadt Exp $
d218 1
a218 1
		l=${DESTDIR}$$1; \
d220 1
a220 1
		t=${DESTDIR}$$1; \
@


1.7
log
@make COPTS work in bsd.lib.mk too
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.6 1996/05/25 09:03:43 pefo Exp $
d185 1
d187 1
d193 1
d195 1
d202 1
d204 1
@


1.6
log
@Added support for Mips ELF shlib build. Snapshot status.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.lib.mk,v 1.5 1996/03/05 11:12:41 mickey Exp $
d85 2
@


1.5
log
@Labeling style changed ($OpenBSD$).
POSTINSTALL added to the <bsd.lkm.mk> (see bsd.README for details).
@
text
@d1 1
a1 1
#	$OpenBSD$
d86 1
a86 1
.if !defined(PICFLAG)
d97 1
d99 1
d133 1
d139 7
d192 1
a192 1
.if !defined(NOPIC)
@


1.4
log
@Added <bsd.lkm.mk> file. Correspondent changes made to the bsd.README.
All the rest changed to be $OpenBSD$.
Dedicated to Suzi Quatro (she must be alive still, so best wishes to here).
@
text
@d1 2
a2 1
#	$OpenBSD: bsd.lib.mk,v 1.67 1996/01/17 20:39:26 mycroft Exp $
@


1.3
log
@from netbsd: Use the `-q' option to tsort(1).  From der Mouse
@
text
@d1 1
a1 1
#	$NetBSD: bsd.lib.mk,v 1.67 1996/01/17 20:39:26 mycroft Exp $
@


1.2
log
@update from netbsd
@
text
@d1 1
a1 1
#	$NetBSD: bsd.lib.mk,v 1.66 1995/10/22 00:45:56 christos Exp $
d113 1
a113 1
	@@${AR} cq lib${LIB}.a `lorder ${OBJS} | tsort`
d120 1
a120 1
	@@${AR} cq lib${LIB}_p.a `lorder ${POBJS} | tsort`
d127 1
a127 1
	@@${AR} cq lib${LIB}_pic.a `lorder ${SOBJS} | tsort`
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: bsd.lib.mk,v 1.65 1995/09/30 12:21:33 pk Exp $
d226 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
