head	1.20;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.16
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.12
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.14
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.10
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.8
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.9.0.10
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.20
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.18
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.16
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.20
date	2017.07.05.13.30.01;	author espie;	state Exp;
branches;
next	1.19;
commitid	Xav2mWbiG8oJu7iy;

1.19
date	2017.07.04.00.59.11;	author espie;	state Exp;
branches;
next	1.18;
commitid	8BJWEohlaP5NvWVv;

1.18
date	2017.07.03.15.11.02;	author espie;	state Exp;
branches;
next	1.17;
commitid	2EfN9dpmFqA9mctY;

1.17
date	2017.07.03.07.54.18;	author espie;	state Exp;
branches;
next	1.16;
commitid	FowtdZ9YJ8Pppvw7;

1.16
date	2017.07.01.14.41.54;	author espie;	state Exp;
branches;
next	1.15;
commitid	zynor6caSpxwFDub;

1.15
date	2017.06.16.10.20.52;	author espie;	state Exp;
branches;
next	1.14;
commitid	eSEJ9O1N3YyVxZmj;

1.14
date	2017.06.04.12.25.19;	author espie;	state Exp;
branches;
next	1.13;
commitid	EBNjIoxye1egA7BZ;

1.13
date	2017.05.31.07.48.04;	author anton;	state Exp;
branches;
next	1.12;
commitid	Oml13Pr3kDrXqLpj;

1.12
date	2016.09.04.00.34.29;	author patrick;	state Exp;
branches;
next	1.11;
commitid	Qtswz0uPOFWnLoMa;

1.11
date	2012.10.15.11.14.38;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.31.11.46.09;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.27.03.47.59;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.24.16.39.13;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.03.15.14.32;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.30.19.00.29;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.07.11.24.03;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	98.06.09.19.29.45;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.03.05.11.12.37;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.25.19.02.32;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@based on florian@@'s observation and guenther@@'s work in kernel makefiles.
don't include .d files during obj and cleanup, because those files might
be utterly bogus following an untimely reboot.

This allows cleaning stuff up without needing to manually remove those
files.

okay millert@@, kettenis@@
@
text
@#	$OpenBSD: bsd.dep.mk,v 1.19 2017/07/04 00:59:11 espie Exp $
#	$NetBSD: bsd.dep.mk,v 1.12 1995/09/27 01:15:09 christos Exp $

.if !target(depend)
depend:
	@@:
.endif

# relies on DEPS defined by bsd.lib.mk and bsd.prog.mk
.if defined(DEPS) && !empty(DEPS)
# catch22: don't include potentially bogus files we are going to clean
.  if !(make(clean) || make(cleandir) || make(obj))
.    for o in ${DEPS}
       sinclude $o
.    endfor
.  endif
.endif

CFLAGS += -MD -MP
CXXFLAGS += -MD -MP

# libraries need some special love
DFLAGS = -MD -MP -MT $*.o -MT $*.po -MT $*.so -MT $*.do

.if !target(tags)
.  if defined(SRCS)
tags: ${SRCS} _SUBDIRUSE
	-cd ${.CURDIR}; ${CTAGS} -f /dev/stdout -d ${.ALLSRC:N*.h} | \
	    sed "s;\${.CURDIR}/;;" > tags
.  else
tags:
.  endif
.endif

# explicitly tag most source files
.for i in ${SRCS:N*.[hyl]:N*.sh} ${_LEXINTM} ${_YACCINTM}
# assume libraries
${i:R:S/$/.o/} ${i:R:S/$/.po/} ${i:R:S/$/.so/} ${i:R:S/$/.do/}: $i
.endfor

CLEANFILES += ${DEPS} .depend

BUILDFIRST ?=
BUILDAFTER ?=
.if !empty(BUILDAFTER)
.  for i in ${BUILDFIRST} ${_LEXINTM} ${_YACCINTM}
.    if !exists($i)
${BUILDAFTER}: $i
.    endif
.  endfor
.endif
@


1.19
log
@let BUILDFIRST just build first, using the same trick guenther@@ did in
kernel Makefiles (thank you!), also add lex and yacc generated files to
that list.

Let those lex/yacc variables be defined for bsd.lib.mk as well.

Complete the SRCS -> OBJS hints with the library dependency

This should fix most dependency problems.

Commit now, so that people can check if something else is still amiss.
krw@@ agrees
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.18 2017/07/03 15:11:02 espie Exp $
d11 6
a16 3
.  for o in ${DEPS}
     sinclude $o
.  endfor
@


1.18
log
@re-add dependencies from SRCS to corresponding OBJS.
the old mkdep run did walk the SRCS list and write those as a side-effect.

Without this, bsd.prog.mk .SUFFIXES order will have OBJS depend on the
wrong src file.

Causes of the alpha/stand/bootxx breakage.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.17 2017/07/03 07:54:18 espie Exp $
d34 2
a35 1
${i:R:S/$/.o/}: $i
d39 1
d42 6
a47 2
.if !empty(BUILDFIRST) && !empty(BUILDAFTER)
${BUILDAFTER}: ${BUILDFIRST}
@


1.17
log
@explicitly pass -MD -MP in DFLAGS, so that even if CFLAGS are forced
on the command line, things will still work
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.16 2017/07/01 14:41:54 espie Exp $
d32 4
@


1.16
log
@effectively kill depend as an independant target (there are a few corners
where a separate depend step is still needed, mostly gcc3 and mesa).

Use of BUILDFIRST is mostly enough to make sure important stuff is built
first.

Otherwise, this makes use of -M* compiler options to generate dependencies
on the fly.  There is a bit of behind-the-scene for targets with several
steps (like yacc and/or libraries) and the compiler needs extra hand-holding
with assembler files (don't know why, don't care).

Idea based on guenther@@'s initial kernel work, loads of input from
drahn, aoyama, tb, etc.

okay tb@@

"why wait" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.15 2017/06/16 10:20:52 espie Exp $
d20 1
a20 1
DFLAGS = -MT $*.o -MT $*.po -MT $*.so -MT $*.do
@


1.15
log
@introduce a BUILDFIRST/BUILDAFTER mechanism:
record every standard component built in bsd.lib.mk/bsd.prog.mk in BUILDAFTER
and have BUILDAFTER depend on BUILDFIRST, thus making possible to build
some stuff early without relying on "make depend"

okay tb@@ millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.14 2017/06/04 12:25:19 espie Exp $
a3 1
# some of the rules involve .h sources, so remove them from mkdep line
d5 9
a13 32
depend: beforedepend .depend realdepend afterdepend
.ORDER: beforedepend .depend realdepend afterdepend
realdepend: _SUBDIRUSE

.  if defined(SRCS) && !empty(SRCS)
.depend: ${SRCS} ${_LEXINTM} ${_YACCINTM}
	@@rm -f .depend
	@@files="${.ALLSRC:M*.s} ${.ALLSRC:M*.S}"; \
	if [ "$$files" != " " ]; then \
	  echo mkdep -a ${MKDEP} ${CFLAGS:M-std=*} ${CFLAGS:M-[ID]*} ${CPPFLAGS} ${AINC} $$files;\
	  mkdep -a ${MKDEP} ${CFLAGS:M-std=*} ${CFLAGS:M-[ID]*} ${CPPFLAGS} ${AINC} $$files; \
	fi
	@@files="${.ALLSRC:M*.c}"; \
	if [ "$$files" != "" ]; then \
	  echo mkdep -a ${MKDEP} ${CFLAGS:M-std=*} ${CFLAGS:M-[ID]*} ${CPPFLAGS} $$files; \
	  mkdep -a ${MKDEP} ${CFLAGS:M-[ID]*} ${CPPFLAGS} $$files; \
	fi
	@@files="${.ALLSRC:M*.cc} ${.ALLSRC:M*.C} ${.ALLSRC:M*.cpp}"; \
	files="$$files ${.ALLSRC:M*.cxx}"; \
	if [ "$$files" != "   " ]; then \
	  echo CC=${CXX:Q} mkdep -a ${MKDEP} ${CXXFLAGS:M-std=*} ${CXXFLAGS:M-[ID]*} ${CPPFLAGS} $$files; \
	  CC=${CXX:Q} mkdep -a ${MKDEP} ${CXXFLAGS:M-std=*} ${CXXFLAGS:M-[ID]*} ${CPPFLAGS} $$files; \
	fi
.  else
.depend:
.  endif
.  if !target(beforedepend)
beforedepend:
.  endif
.  if !target(afterdepend)
afterdepend:
.  endif
d16 6
a31 5
.if defined(SRCS)
cleandir: cleandepend
cleandepend:
	rm -f .depend ${.CURDIR}/tags
.endif
d33 1
a38 2

.PHONY: beforedepend depend afterdepend cleandepend realdepend
@


1.14
log
@pass better arguments to mkdep.
- some std= parameters are actually critical, -std=c++11 makes a huge
difference for clang.
- explicitly ask mkdep to run the C++ compiler for C++ code, as again,
some compilers will see the difference.

(this should allow us to repair make depend under src/gnu/usr.bin/clang)

okay kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.13 2017/05/31 07:48:04 anton Exp $
d54 6
@


1.13
log
@Drop -t option from ctags call.

The option has been deprecated for almost 7 years by now.

ok tb@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.12 2016/09/04 00:34:29 patrick Exp $
d15 2
a16 2
	  echo mkdep -a ${MKDEP} ${CFLAGS:M-[ID]*} ${CPPFLAGS} ${AINC} $$files;\
	  mkdep -a ${MKDEP} ${CFLAGS:M-[ID]*} ${CPPFLAGS} ${AINC} $$files; \
d20 1
a20 1
	  echo mkdep -a ${MKDEP} ${CFLAGS:M-[ID]*} ${CPPFLAGS} $$files; \
d26 2
a27 2
	  echo mkdep -a ${MKDEP} ${CXXFLAGS:M-[ID]*} ${CPPFLAGS} $$files; \
	  mkdep -a ${MKDEP} ${CXXFLAGS:M-[ID]*} ${CPPFLAGS} $$files; \
@


1.12
log
@Treat .cpp files as C++ source code in make depend.

ok deraadt@@ jca@@ jsg@@ millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.11 2012/10/15 11:14:38 espie Exp $
d43 1
a43 1
	-cd ${.CURDIR}; ${CTAGS} -f /dev/stdout -d -t ${.ALLSRC:N*.h} | \
@


1.11
log
@old stuff:
- moved to realdepend with success, finish the old subdirdepend.
- .LIBS: doesn't mean anything any more, and it had broken semantics
when it meant something anyways.

okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.10 2012/08/31 11:46:09 espie Exp $
d23 3
a25 2
	@@files="${.ALLSRC:M*.cc} ${.ALLSRC:M*.C} ${.ALLSRC:M*.cxx}"; \
	if [ "$$files" != "  " ]; then \
@


1.10
log
@use subdir realtarget => target recursion (for subdir.mk .USE macro)
will scrap the subdirdepend case later.

okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.9 2010/03/27 03:47:59 oga Exp $
d55 1
a55 1
.PHONY: beforedepend depend afterdepend cleandepend subdirdepend
@


1.9
log
@pass -d -t to the default ``make tags'' flags.

note that this does not affect sys (which already uses those flags) and libc
(which has its own special target for them). just other uses of
bsd.{prog,lib,dep}.mk.

"I suppose" deraadt@@, "yes, we want that" marco@@

From Toni Mueller, thanks!
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.8 2008/03/24 16:39:13 espie Exp $
d6 3
a8 3
depend: beforedepend .depend subdirdepend afterdepend
.ORDER: beforedepend .depend subdirdepend afterdepend
subdirdepend: _SUBDIRUSE
@


1.8
log
@check for emptiness of SRCS, since make warns otherwise.

okay deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.7 2007/11/03 15:14:32 espie Exp $
d42 1
a42 1
	-cd ${.CURDIR}; ${CTAGS} -f /dev/stdout ${.ALLSRC:N*.h} | \
@


1.7
log
@unmess make depend: make sure stuff is built in the correct order.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.6 2006/06/30 19:00:29 otto Exp $
d10 1
a10 1
.  if defined(SRCS)
@


1.6
log
@generate deps for yacc and lex, and clean stuff generated by these;
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.5 2003/08/07 11:24:03 espie Exp $
d6 4
a9 1
depend: beforedepend .depend _SUBDIRUSE afterdepend
d55 1
a55 1
.PHONY: beforedepend depend afterdepend cleandepend
@


1.5
log
@trivial clean-up: indent tests and mark phony targets.
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.dep.mk,v 1.4 1998/06/09 19:29:45 downsj Exp $
d8 1
a8 1
.depend: ${SRCS}
@


1.4
log
@Add CTAGS, with a full pathname, and use it.
@
text
@d1 1
a1 1
#	$OpenBSD$
d7 1
a7 1
.if defined(SRCS)
d25 1
a25 1
.else
d27 2
a28 2
.endif
.if !target(beforedepend)
d30 2
a31 2
.endif
.if !target(afterdepend)
d33 1
a33 1
.endif
d37 1
a37 1
.if defined(SRCS)
d41 1
a41 1
.else
d43 1
a43 1
.endif
d51 2
@


1.3
log
@Labeling style changed ($OpenBSD$).
POSTINSTALL added to the <bsd.lkm.mk> (see bsd.README for details).
@
text
@d39 1
a39 1
	-cd ${.CURDIR}; ctags -f /dev/stdout ${.ALLSRC:N*.h} | \
@


1.2
log
@Added <bsd.lkm.mk> file. Correspondent changes made to the bsd.README.
All the rest changed to be $OpenBSD$.
Dedicated to Suzi Quatro (she must be alive still, so best wishes to here).
@
text
@d1 2
a2 1
#	$OpenBSD: bsd.dep.mk,v 1.12 1995/09/27 01:15:09 christos Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: bsd.dep.mk,v 1.12 1995/09/27 01:15:09 christos Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
