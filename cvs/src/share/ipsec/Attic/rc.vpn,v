head	1.22;
access;
symbols
	OPENBSD_3_9:1.21.0.10
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.8
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.6
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.4
	OPENBSD_3_6_BASE:1.21
	OPENBSD_3_5:1.21.0.2
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.19.0.4
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.19.0.2
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.15.0.6
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.4
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.14.0.4
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@# @;


1.22
date	2006.05.26.04.02.59;	author deraadt;	state dead;
branches;
next	1.21;

1.21
date	2004.02.25.08.42.38;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.07.10.16.45;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.09.06.08.28;	author david;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.20.12.25.45;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2002.12.05.12.50.03;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	2002.12.04.15.03.56;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.27.03.32.56;	author angelos;	state Exp;
branches;
next	1.14;

1.14
date	2000.09.29.19.11.43;	author angelos;	state Exp;
branches;
next	1.13;

1.13
date	2000.09.27.04.36.55;	author angelos;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.27.04.11.21;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.19.03.35.08;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.22.01.57.17;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.13.05.19.10;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.10.08.32.03;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	99.12.14.19.59.39;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	99.12.04.23.30.31;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.11.30.12.10.40;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	99.11.23.11.09.59;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	99.08.28.12.10.37;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	99.02.24.23.33.11;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	98.07.30.08.14.38;	author provos;	state Exp;
branches;
next	;


desc
@@


1.22
log
@let us not talk about ipsecadm and vpn anymore; ok reyk
@
text
@#!/bin/sh
#	$OpenBSD: rc.vpn,v 1.21 2004/02/25 08:42:38 jmc Exp $
#
# Richard Reiner, Ph.D., FSC Internet Corp.
# rreiner@@fscinternet.com
# v0.81 / 26Jul98
#
# Modifications and cleanup by H. Olsson <ho@@openbsd.org>, 28Aug99
# and Markus Friedl <markus@@openbsd.org>
#
# rc.vpn -- configure IPsec in tunnel mode for a mesh of N local and
#           M remote networks. (N x M mesh)
#
# For this to work, you will need to have these enabled (in /etc/sysctl.conf):
#   'sysctl net.inet.ip.forwarding=1'   (IP packet routing)
#   'sysctl net.inet.esp.enable=1'      (IPsec ESP protocol)

# XXX The configuration parameters should be moved to another file.

# Uncomment to debug (and not execute) commands
DEBUG=echo

# Gateway addresses
GW_LOCAL=192.168.254.254
GW_REMOTE=192.168.1.2

# Local and remote networks
LOCAL_NETWORKS="192.168.254.0/24 192.168.253.0/24"
REMOTE_NETWORKS="192.168.1.0/24 192.168.2.0/24"

# Optional, use for manual keying only
# Crypto options and keys, note that key/iv lengths need to correspond
# to the selected encryption and authentication algorithms.
ENC=3des
AUTH=sha1
SPI_OUT=1000
SPI_IN=1001
KEYFILE=/etc/esp-enc-key
AUTHKEYFILE=/etc/esp-auth-key

#############################################################################
############# -- NO CHANGES SHOULD BE NEEDED BELOW THIS LINE -- #############
#############################################################################

ipsecadm=/sbin/ipsecadm

#
# Sanity, be verbose about errors.
# XXX In a 1 x M mesh, ip.forwarding may not be strictly necessary.
#

abort=0
if [ `/usr/sbin/sysctl -n net.inet.esp.enable` == 0 ]; then
	echo "$0: variable 'net.inet.esp.enable=0' (IPsec ESP protocol)"
	abort=1
fi
if [ `/usr/sbin/sysctl -n net.inet.ip.forwarding` == 0 ]; then
	echo "$0: variable 'net.inet.ip.forwarding=0' (IP forwarding/routing)"
	abort=1
fi
if [ ${abort} = 1 ]; then
	echo "$0: must be enabled in /etc/sysctl.conf. Aborting VPN setup."
	[ ! -n "${DEBUG}" ] && exit 0
fi

$DEBUG $ipsecadm flush

#
# Setup the manual SAs
#

if [ "$ENC" ]; then
	$DEBUG $ipsecadm new esp -src $GW_LOCAL -dst $GW_REMOTE \
		-forcetunnel -spi $SPI_OUT -enc $ENC -auth $AUTH \
		-keyfile $KEYFILE -authkeyfile $AUTHKEYFILE

	$DEBUG $ipsecadm new esp -src $GW_REMOTE -dst $GW_LOCAL \
		-forcetunnel -spi $SPI_IN -enc $ENC -auth $AUTH \
		-keyfile $KEYFILE -authkeyfile $AUTHKEYFILE
fi

#
# Setup the Flows, aka SPD
#

# add the gateways
LOCAL_NETWORKS="${GW_LOCAL}/32 ${LOCAL_NETWORKS}"
REMOTE_NETWORKS="${GW_REMOTE}/32 ${REMOTE_NETWORKS}"
# but allow ESP in the clear
BYPASS="$DEBUG ${ipsecadm} flow -transport esp -src ${GW_LOCAL} -dst ${GW_REMOTE} -bypass"
$BYPASS -out -addr ${GW_LOCAL}/32  ${GW_REMOTE}/32
$BYPASS -in  -addr ${GW_REMOTE}/32 ${GW_LOCAL}/32

FLOW="$DEBUG ${ipsecadm} flow -proto esp -src ${GW_LOCAL} -dst ${GW_REMOTE} -require"

# each local net to each remote net
for local_net in ${LOCAL_NETWORKS}; do
	for remote_net in ${REMOTE_NETWORKS}; do
		$FLOW -out -addr $local_net  $remote_net
		$FLOW -in  -addr $remote_net $local_net
	done
done

exit 0
@


1.21
log
@remove -w option to sysctl;

diffs from Paul de Weerd;
ok deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: rc.vpn,v 1.20 2003/11/07 10:16:45 jmc Exp $
@


1.20
log
@adress -> address, and a few more; all from Jonathon Gray;

(mvme68k/mvme88k) vs.c and (vax) if_le.c ok miod@@
isakmpd ones ok ho@@
@
text
@d2 1
a2 1
#	$OpenBSD: rc.vpn,v 1.19 2003/03/09 06:08:28 david Exp $
d15 2
a16 2
#   'sysctl -w net.inet.ip.forwarding=1'   (IP packet routing)
#   'sysctl -w net.inet.esp.enable=1'      (IPsec ESP protocol)
@


1.19
log
@kill whitespace at eol
ok henning@@
@
text
@d2 1
a2 1
#	$OpenBSD: rc.vpn,v 1.18 2003/01/20 12:25:45 markus Exp $
d23 1
a23 1
# Gateway adresses
@


1.18
log
@but allow ESP in the clear (-bypass) between the gateways; avoids
double encryption; ok ho@@
@
text
@d2 1
a2 1
#	$OpenBSD: rc.vpn,v 1.17 2002/12/05 12:50:03 markus Exp $
d62 1
a62 1
	echo "$0: must be enabled in /etc/sysctl.conf. Aborting VPN setup." 
@


1.17
log
@simplify even more; ok ho@@
@
text
@d2 1
a2 1
#	$OpenBSD: rc.vpn,v 1.16 2002/12/04 15:03:56 markus Exp $
d21 1
a21 1
#DEBUG=echo
d89 4
@


1.16
log
@general cleanup, including:
removal of extra flows for gateway to network; make manual keying
optional, allows 'acquire' with isakmpd; no need for sed;
add ipsecadm flush; ok ho@@
@
text
@d2 1
a2 1
#	$OpenBSD: rc.vpn,v 1.15 2001/06/27 03:32:56 angelos Exp $
d9 1
d27 3
a29 5
# Local and remote networks, numbered
LOCAL_NET_0="192.168.254.0/24"
LOCAL_NET_1="192.168.253.0/24"
REMOTE_NET_0="192.168.1.0/24"
REMOTE_NET_1="192.168.2.0/24"
d54 1
a54 1
	echo "$0: variable 'net.inet.esp.enable' (IPsec ESP protocol)"
d58 1
a58 1
	echo "$0: variable 'net.inet.ip.forwarding' (IP forwarding/routing)"
d86 3
a88 3
FLOW="$DEBUG $ipsecadm flow -proto esp -src $GW_LOCAL -dst $GW_REMOTE"
FLOWIN="$FLOW -in -require -addr"
FLOWOUT="$FLOW -out -require -addr"
d90 1
a90 4
# local gateway to remote gateway

$FLOWOUT ${GW_LOCAL}/32  ${GW_REMOTE}/32
$FLOWIN  ${GW_REMOTE}/32 ${GW_LOCAL}/32
d93 4
a96 16

localcount=0
while true; do
	local_net=`eval "echo \\\$LOCAL_NET_${localcount}"`
	if [ "x${local_net}" == "x" ]; then
		break;
	fi
	remotecount=0
	while true; do
		remote_net=`eval "echo \\\$REMOTE_NET_${remotecount}"`
		if [ "x${remote_net}" == "x" ]; then
			break;
		fi
		$FLOWOUT $local_net  $remote_net
		$FLOWIN  $remote_net $local_net
		remotecount=$(($remotecount + 1))
a97 1
	localcount=$(($localcount + 1))
@


1.15
log
@"IPsec" capitalization (jsyn@@nthought.com)
@
text
@d2 1
a2 3

#
#    $OpenBSD: rc.vpn,v 1.14 2000/09/29 19:11:43 angelos Exp $
d24 1
a24 1
GW_PEER=192.168.1.2
d26 5
a30 5
# Local and remote networks, numbered, syntax <network>/<mask>
LOCAL_NET_0=192.168.254.0/255.255.255.0
LOCAL_NET_1=192.168.253.0/255.255.255.0
REMOTE_NET_0=192.168.1.0/255.255.255.0
REMOTE_NET_1=192.168.2.0/255.255.255.0
d32 1
d55 2
a56 2
    echo " VPN: variable 'net.inet.esp.enable' (IPsec ESP protocol)"
    abort=1
d59 2
a60 2
    echo " VPN: variable 'net.inet.ip.forwarding' (IP forwarding/routing)"
    abort=1
d63 2
a64 2
    echo " VPN: must be enabled in /etc/sysctl.conf. Aborting VPN setup." 
    exit 0
d67 15
a81 1
[ ! -n "${DEBUG}" ] && echo " VPN "
d84 1
a84 1
# Setup the SAs
d87 15
a101 47
$DEBUG $ipsecadm new esp -src $GW_LOCAL -dst $GW_PEER \
    -forcetunnel -spi $SPI_OUT -enc $ENC -auth $AUTH \
    -keyfile $KEYFILE -authkeyfile $AUTHKEYFILE

$DEBUG $ipsecadm new esp -src $GW_PEER -dst $GW_LOCAL \
    -forcetunnel -spi $SPI_IN -enc $ENC -auth $AUTH \
    -keyfile $KEYFILE -authkeyfile $AUTHKEYFILE

#
# Create the flows
#

# Gateway to gateway (both egress and ingress flows)
$DEBUG $ipsecadm flow -proto esp -src $GW_LOCAL -dst $GW_PEER \
    -addr $GW_LOCAL 255.255.255.255 $GW_PEER 255.255.255.255 -out -require
$DEBUG $ipsecadm flow -proto esp -src $GW_LOCAL -dst $GW_PEER \
    -addr $GW_PEER 255.255.255.255 $GW_LOCAL 255.255.255.255 -in -require

# Flows from each local to each remote subnet, and vice versa for
# ACL entries
mycount=0
while :
do
    eval network=\$LOCAL_NET_${mycount}
    set `echo $network | sed 's%/% %g'` 0x0 0x0
    local_net=$1
    local_mask=$2
    if [ "${local_net}" != "0x0" ]; then
	peercount=0
	while :
	do
	    eval network=\$REMOTE_NET_${peercount}
	    set `echo $network | sed 's%/% %g'` 0x0 0x0
	    remote_net=$1
	    remote_mask=$2
	    if [ "${remote_net}" != "0x0" ]; then
		$DEBUG $ipsecadm flow \
		    -proto esp -src $GW_LOCAL -dst $GW_PEER \
		    -addr $local_net $local_mask $remote_net $remote_mask \
		    -out -require

		$DEBUG $ipsecadm flow \
		    -proto esp -src $GW_LOCAL -dst $GW_PEER \
                    -in -require \
		    -addr $remote_net $remote_mask $local_net $local_mask
		peercount=$(($peercount + 1))
	    else
d103 10
a112 1
	    fi
d114 1
a114 54
	mycount=$(($mycount + 1))
    else
	break;
    fi
done

# XXX Stuff below is mainly for testing, may be removed later.

# Flows from local gw to each remote subnet, and vice versa
peercount=0
while :
do
    eval network=\$REMOTE_NET_${peercount}
    set `echo $network | sed 's%/% %g'` 0x0 0x0
    remote_net=$1
    remote_mask=$2
    if [ "${remote_net}" != "0x0" ]; then
	$DEBUG $ipsecadm flow \
	    -proto esp -dst $GW_PEER -out -require \
            -src $GW_LOCAL \
	    -addr $GW_LOCAL 255.255.255.255 $remote_net $remote_mask \

	$DEBUG $ipsecadm flow \
	    -proto esp -dst $GW_PEER -in -require \
            -src $GW_LOCAL \
	    -addr $remote_net $remote_mask $GW_LOCAL 255.255.255.255 
	peercount=$(($peercount + 1))
    else
	break;
    fi
done

# Flows from local subnets to the remote gw and vice versa
mycount=0
while :
do
    eval network=\$LOCAL_NET_${mycount}
    set `echo $network | sed 's%/% %g'` 0x0 0x0
    local_net=$1
    local_mask=$2
    if [ "${local_net}" != "0x0" ]; then
	$DEBUG $ipsecadm flow \
	    -proto esp -dst $GW_PEER -out -require \
            -src $GW_LOCAL \
	    -addr $local_net $local_mask $GW_PEER 255.255.255.255

	$DEBUG $ipsecadm flow \
	    -proto esp -dst $GW_PEER -in -require \
            -src $GW_LOCAL \
	    -addr $GW_PEER 255.255.255.255 $local_net $local_mask 
	mycount=$(($mycount + 1))
    else
	break;
    fi
@


1.14
log
@Update to ipsecadm changes.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.13 2000/09/27 04:36:55 angelos Exp $
d12 1
a12 1
# rc.vpn -- configure IPSec in tunnel mode for a mesh of N local and
@


1.13
log
@Oops, missed a couple.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.12 2000/09/27 04:11:21 angelos Exp $
d87 1
a87 1
$DEBUG $ipsecadm flow -proto esp -src $GW_LOCAL -dst $GW_PEER -spi $SPI_OUT \
d89 1
a89 1
$DEBUG $ipsecadm flow -proto esp -src $GW_LOCAL -dst $GW_PEER -spi $SPI_IN \
d111 1
a111 1
		    -proto esp -src $GW_LOCAL -dst $GW_PEER -spi $SPI_OUT \
d116 1
a116 1
		    -proto esp -src $GW_LOCAL -dst $GW_PEER -spi $SPI_IN \
d142 1
a142 1
	    -proto esp -dst $GW_PEER -spi $SPI_OUT -out -require \
d147 1
a147 1
	    -proto esp -dst $GW_PEER -spi $SPI_IN -in -require \
d166 1
a166 1
	    -proto esp -dst $GW_PEER -spi $SPI_OUT -out -require \
d171 1
a171 1
	    -proto esp -dst $GW_PEER -spi $SPI_IN -in -require \
@


1.12
log
@Fix example, add -src.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.11 2000/09/19 03:35:08 angelos Exp $
d143 1
d148 1
a148 1
            -src $GW_LOCAL
d172 1
a172 1
            -src $GW_LOCAL
@


1.11
log
@Update for new architecture.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.10 2000/04/22 01:57:17 angelos Exp $
d87 1
a87 1
$DEBUG $ipsecadm flow -proto esp -dst $GW_PEER -spi $SPI_OUT \
d89 1
a89 1
$DEBUG $ipsecadm flow -proto esp -dst $GW_LOCAL -spi $SPI_IN \
d111 1
a111 1
		    -proto esp -dst $GW_PEER -spi $SPI_OUT \
d116 2
a117 1
		    -proto esp -dst $GW_LOCAL -spi $SPI_IN -in -require \
d146 2
a147 1
	    -proto esp -dst $GW_LOCAL -spi $SPI_IN -in -require \
d166 1
d170 2
a171 1
	    -proto esp -dst $GW_LOCAL -spi $SPI_IN -in -require \
@


1.10
log
@Use -keyfile/-authkeyfile flags.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.9 2000/01/13 05:19:10 angelos Exp $
d88 1
a88 1
    -addr $GW_LOCAL 255.255.255.255 $GW_PEER 255.255.255.255
d90 1
a90 1
    -addr $GW_PEER 255.255.255.255 $GW_LOCAL 255.255.255.255 -ingress
d112 2
a113 1
		    -addr $local_net $local_mask $remote_net $remote_mask
d116 1
a116 1
		    -proto esp -dst $GW_LOCAL -spi $SPI_IN -ingress \
d141 2
a142 2
	    -proto esp -dst $GW_PEER -spi $SPI_OUT \
	    -addr $GW_LOCAL 255.255.255.255 $remote_net $remote_mask
d145 1
a145 1
	    -proto esp -dst $GW_LOCAL -spi $SPI_IN -ingress\
d163 1
a163 1
	    -proto esp -dst $GW_PEER -spi $SPI_OUT \
d167 1
a167 1
	    -proto esp -dst $GW_LOCAL -spi $SPI_IN -ingress\
@


1.9
log
@Update to establish ingress flows as well.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.8 2000/01/10 08:32:03 angelos Exp $
d36 1
a36 1
ENC=des
d40 2
a41 3
KEY=2ea140ac3911cb27
AUTHKEY=176cc284bc1631afbd1468fbe976fa729fcb4321
IV=c4b279f1a9bcd849
d76 1
a76 1
    -key $KEY -authkey $AUTHKEY
d80 1
a80 1
    -key $KEY -authkey $AUTHKEY
@


1.8
log
@Fix rc.vpn as suggested in PR#1052 (rmooney@@iss.net); ipsecadm(8) does
indeed not accept the hexadecimal notation for netmasks anymore.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.7 1999/12/14 19:59:39 ho Exp $
d87 1
a87 1
# Gateway to gateway
d90 2
d93 2
a94 1
# Flows from each local, to each remote, subnet
d114 4
d131 1
a131 1
# Flows from local gw to each remote subnet
d143 4
d153 1
a153 1
# Flows from local subnets to the remote gw
d165 4
@


1.7
log
@Slight syntax change, '/' instead of ':' in addr/mask.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.6 1999/12/04 23:30:31 angelos Exp $
d29 4
a32 4
LOCAL_NET_0=192.168.254.0/0xffffff00
LOCAL_NET_1=192.168.253.0/0xffffff00
REMOTE_NET_0=192.168.1.0/0xffffff00
REMOTE_NET_1=192.168.2.0/0xffffff00
d89 1
a89 1
    -addr $GW_LOCAL 0xffffffff $GW_PEER 0xffffffff
d135 1
a135 1
	    -addr $GW_LOCAL 0xffffffff $remote_net $remote_mask
d153 1
a153 1
	    -addr $local_net $local_mask $GW_PEER 0xffffffff
@


1.6
log
@Get rid of 0.0.0.0 addresses for flows
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.5 1999/11/30 12:10:40 ho Exp $
d28 5
a32 5
# Local and remote networks, numbered, syntax <network>:<mask>
LOCAL_NET_0=192.168.254.0:0xffffff00
LOCAL_NET_1=192.168.253.0:0xffffff00
REMOTE_NET_0=192.168.1.0:0xffffff00
REMOTE_NET_1=192.168.2.0:0xffffff00
d96 1
a96 1
    set `echo $network | sed 's/:/ /g'` 0x0 0x0
d104 1
a104 1
	    set `echo $network | sed 's/:/ /g'` 0x0 0x0
d129 1
a129 1
    set `echo $network | sed 's/:/ /g'` 0x0 0x0
d147 1
a147 1
    set `echo $network | sed 's/:/ /g'` 0x0 0x0
@


1.5
log
@Typo. From je@@interact.se
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.4 1999/11/23 11:09:59 ho Exp $
d89 1
a89 1
    -addr 0.0.0.0 0xffffffff $GW_PEER 0xffffffff
d135 1
a135 1
	    -addr 0.0.0.0 0xffffffff $remote_net $remote_mask
@


1.4
log
@Typo. from brad@@ via niels@@.
@
text
@d4 1
a4 1
#    $OpenBSD: rc.vpn,v 1.3 1999/08/28 12:10:37 ho Exp $
d88 1
a88 1
$DEBUG ipsecadm flow -proto esp -dst $GW_PEER -spi $SPI_OUT \
@


1.3
log
@Modifications, bugfixes and overall cleanup.
@
text
@d4 1
a4 1
#    $OpenBSD$
d15 1
a15 1
# For this to work, you will need to have these enabled (in /etc/sysct.conf):
@


1.2
log
@Update script.
@
text
@d4 1
a4 1
# rc.vpn -- configure IPSec in tunnel mode for M x N networks
d10 1
a10 5

echo ' VPN'


#############################################################################
d12 2
a13 1
# Configurable parameters
d15 28
a42 36

# Should all the commands executed be printed when the script runs?
# N.B. setting this to "YES" may reveal your keys to persons present
# at the console when your system boots.
VPN_DO_ECHO_COMMANDS="YES"

# My interfaces
VPN_MY_INT_IFACE="ep0"
VPN_MY_EXT_IFACE="ep1"

# External IP of my tunnel partner
VPN_PEER_EXT_IP="207.253.158.194"

# The internal IP(s) and mask(s) on the other end of the tunnel -- add as
# many sets as necessary, numbered from 0 upwards.
VPN_PEER_INT_IP_0="192.139.247.253"
VPN_PEER_INT_MASK_0="255.255.255.0"

# IP(s) and mask(s) for *additional* subnets on *our* end of the tunnel
# (the first one is automagically determined below) -- add as many sets
# as necessary, numbered from *1* upwards, or comment out if not needed.
VPN_MY_INT_IP_1="192.139.241.1"
VPN_MY_INT_MASK_1="255.255.255.0"
VPN_MY_INT_IP_2="192.139.243.1"
VPN_MY_INT_MASK_2="255.255.255.0"

# Crypto options and keys
VPN_ENC="des"
VPN_AUTH="sha1"
VPN_SPI_OUT="1000"
VPN_SPI_IN="1001"
VPN_KEY="2ea140ac3911cb27"
VPN_AUTHKEY="176cc284bc1631afbd1468fbe976fa729fcb4321"
VPN_IV="c4b279f1a9bcd849"


a44 1
#############                                                   #############
a45 1
#############                                                   #############
d48 1
a49 2

#############################################################################
d51 2
a52 1
# Derived (automagically found) parameters
a53 11
# Hostnames for ech of our interfaces
VPN_MY_EXT_NAME=`cut -d" " -f2 < /etc/hostname.$VPN_MY_EXT_IFACE`
VPN_MY_INT_NAME=`cut -d" " -f2 < /etc/hostname.$VPN_MY_INT_IFACE`

# Our internal IP and mask (extra subnets, if any, are configured above)
VPN_MY_INT_IP_0=`grep $VPN_MY_INT_NAME < /etc/hosts | cut -d" " -f1`
VPN_MY_INT_MASK_0=`cut -d" " -f3 < /etc/hostname.$VPN_MY_INT_IFACE`

# Our external IP and mask
VPN_MY_EXT_IP=`grep $VPN_MY_EXT_NAME < /etc/hosts | cut -d" " -f1`
VPN_MY_EXT_MASK=`cut -d" " -f3 < /etc/hostname.$VPN_MY_INT_IFACE`
d55 13
d69 1
a69 17
#############################################################################
#
# Pseudo-constants
#
ipsecadm=/sbin/ipsecadm


#############################################################################
#
# Function definitions
#
eval_and_echo () {
  if [ "$VPN_DO_ECHO_COMMANDS" = "YES" ]; then
    echo "$*"
  fi
  eval "$*"
}
a70 2

#############################################################################
d72 1
a72 1
# Executable setup statements
d75 3
a77 4
# Create the SAs
eval_and_echo "$ipsecadm new esp -src $VPN_MY_EXT_IP -dst $VPN_PEER_EXT_IP -forcetunnel -spi $VPN_SPI_OUT -enc $VPN_ENC -auth $VPN_AUTH -key $VPN_KEY -authkey $VPN_AUTHKEY"

eval_and_echo "$ipsecadm new esp -src $VPN_PEER_EXT_IP -dst $VPN_MY_EXT_IP -forcetunnel -spi $VPN_SPI_IN -enc $VPN_ENC -auth $VPN_AUTH -key $VPN_KEY -authkey $VPN_AUTHKEY"
d79 3
d84 1
a84 1
# Create IPSec routes
d87 3
a89 2
# Route between the two external IPs
eval_and_echo "ipsecadm flow -proto esp -dst $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -addr $VPN_MY_EXT_IP 255.255.255.255 $VPN_PEER_EXT_IP 255.255.255.255 -local"
d91 1
a91 1
# Routes from each internal subnet, to each internal subnet on the far side
d95 5
a99 4
    eval next_my_ip=\$VPN_MY_INT_IP_${mycount}
    eval next_my_mask=\$VPN_MY_INT_MASK_${mycount}
    if [ -n "${next_my_ip}" ]; then

d103 9
a111 6
	    eval next_peer_ip=\$VPN_PEER_INT_IP_${peercount}
	    eval next_peer_mask=\$VPN_PEER_INT_MASK_${peercount}
	    if [ -n "${next_peer_ip}" ]; then
		# set an IPSec route for this pair of networks
		eval_and_echo "$ipsecadm flow -proto esp -dst $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -addr $next_my_ip $next_my_mask $next_peer_ip $next_peer_mask"
		peercount=`expr ${peercount} + 1`
d113 1
a113 1
		    break;
d116 1
a116 1
	mycount=`expr ${mycount} + 1`
d122 1
d124 1
a124 1
# Routes to each remote internal subnet
d128 9
a136 7
    eval next_peer_ip=\$VPN_PEER_INT_IP_${peercount}
    eval next_peer_mask=\$VPN_PEER_INT_MASK_${peercount}
    if [ -n "${next_peer_ip}" ]; then

        # Route from my ext IP to each remote internal subnet
	eval_and_echo "$ipsecadm flow -proto esp -dst $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -addr $VPN_MY_EXT_IP 255.255.255.255 $next_peer_ip $next_peer_mask -local"
	peercount=`expr ${peercount} + 1`
d142 1
a142 2

# Routes from each of my internal subnets to the remote external IP
d146 9
a154 5
    eval next_my_ip=\$VPN_MY_INT_IP_${mycount}
    eval next_my_mask=\$VPN_MY_INT_MASK_${mycount}
    if [ -n "${next_my_ip}" ]; then
	eval_and_echo $ipsecadm flow -proto esp -dst $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -addr $next_my_ip $next_my_mask $VPN_PEER_EXT_IP 255.255.255.255
	mycount=`expr ${mycount} + 1`
d159 2
@


1.1
log
@Add a script to configure static VPNs in a NxM fashion, provided by
Richard Reiner <rreiner@@fscinternet.com> (Canada) - the script requires
-current.
@
text
@d105 1
a105 1
eval_and_echo "$ipsecadm new esp -src $VPN_MY_EXT_IP -dst $VPN_PEER_EXT_IP -tunnel $VPN_MY_EXT_IP $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -enc $VPN_ENC -auth $VPN_AUTH -iv $VPN_IV -key $VPN_KEY -authkey $VPN_AUTHKEY"
d107 1
a107 1
eval_and_echo "$ipsecadm new esp -src $VPN_PEER_EXT_IP -dst $VPN_MY_EXT_IP -tunnel $VPN_PEER_EXT_IP $VPN_MY_EXT_IP -spi $VPN_SPI_IN -enc $VPN_ENC -auth $VPN_AUTH -iv $VPN_IV -key $VPN_KEY -authkey $VPN_AUTHKEY"
d115 1
a115 1
eval_and_echo "ipsecadm flow -dst $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -addr $VPN_MY_EXT_IP 255.255.255.255 $VPN_PEER_EXT_IP 255.255.255.255 -local"
d132 1
a132 1
		eval_and_echo "$ipsecadm flow -dst $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -addr $next_my_ip $next_my_mask $next_peer_ip $next_peer_mask"
d154 1
a154 1
	eval_and_echo "$ipsecadm flow -dst $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -addr $VPN_MY_EXT_IP 255.255.255.255 $next_peer_ip $next_peer_mask -local"
d169 1
a169 1
	eval_and_echo $ipsecadm flow -dst $VPN_PEER_EXT_IP -spi $VPN_SPI_OUT -addr $next_my_ip $next_my_mask $VPN_PEER_EXT_IP 255.255.255.255
a174 3



@

