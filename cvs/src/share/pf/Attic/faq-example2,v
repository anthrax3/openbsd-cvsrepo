head	1.5;
access;
symbols
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2008.01.31.22.43.34;	author henning;	state dead;
branches;
next	1.4;

1.4
date	2006.10.07.04.48.01;	author mcbride;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.02.16.16.39;	author joel;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.06.16.04.45;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.02.18.25.49;	author henning;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove obsolete /usr/share/pf, agreed by many
@
text
@# $OpenBSD: faq-example2,v 1.4 2006/10/07 04:48:01 mcbride Exp $

#
# Small, Home Network
# http://www.openbsd.org/faq/pf/queueing.html#example1
#


# enable queueing on the external interface to control traffic going to
# the Internet. use the priq scheduler to control only priorities. set
# the bandwidth to 610Kbps to get the best performance out of the TCP
# ACK queue.

altq on fxp0 priq bandwidth 610Kb queue { std_out, ssh_im_out, dns_out, \
        tcp_ack_out }

# define the parameters for the child queues.
# std_out      - the standard queue. any filter rule below that does not
#                explicitly specify a queue will have its traffic added
#                to this queue.
# ssh_im_out   - interactive SSH and various instant message traffic.
# dns_out      - DNS queries.
# tcp_ack_out  - TCP ACK packets with no data payload.

queue std_out     priq(default)
queue ssh_im_out  priority 4 priq(red)
queue dns_out     priority 5
queue tcp_ack_out priority 6

# enable queueing on the internal interface to control traffic coming in
# from the Internet. use the cbq scheduler to control bandwidth. max
# bandwidth is 2Mbps.

altq on dc0 cbq bandwidth 2Mb queue { std_in, ssh_im_in, dns_in, bob_in }

# define the parameters for the child queues.
# std_in      - the standard queue. any filter rule below that does not
#               explicitly specify a queue will have its traffic added
#               to this queue.
# ssh_im_in   - interactive SSH and various instant message traffic.
# dns_in      - DNS replies.
# bob_in      - bandwidth reserved for Bob's workstation. allow him to
#               borrow.

queue std_in    bandwidth 1.6Mb cbq(default)
queue ssh_im_in bandwidth 200Kb priority 4
queue dns_in    bandwidth 120Kb priority 5
queue bob_in    bandwidth 80Kb cbq(borrow)


# ... in the filtering section of pf.conf ...

alice         = "192.168.0.2"
bob           = "192.168.0.3"
charlie       = "192.168.0.4"
local_net     = "192.168.0.0/24"
ssh_ports     = "{ 22 2022 }"
im_ports      = "{ 1863 5190 5222 }"

# filter rules for fxp0 inbound
block in on fxp0 all

# filter rules for fxp0 outbound
block out on fxp0 all
pass  out on fxp0 inet proto tcp from (fxp0) to any \
        queue(std_out, tcp_ack_out)
pass  out on fxp0 inet proto { udp icmp } from (fxp0) to any
pass  out on fxp0 inet proto { tcp udp } from (fxp0) to any port domain \
        queue dns_out
pass  out on fxp0 inet proto tcp from (fxp0) to any port $ssh_ports \
        queue(std_out, ssh_im_out)
pass  out on fxp0 inet proto tcp from (fxp0) to any port $im_ports \
        queue(ssh_im_out, tcp_ack_out)

# filter rules for dc0 inbound
block in on dc0 all
pass  in on dc0 from $local_net

# filter rules for dc0 outbound
block out on dc0 all
pass  out on dc0 from any to $local_net
pass  out on dc0 proto { tcp udp } from any port domain to $local_net \
        queue dns_in
pass  out on dc0 proto tcp from any port $ssh_ports to $local_net \
        queue(std_in, ssh_im_in)
pass  out on dc0 proto tcp from any port $im_ports to $local_net \
        queue ssh_im_in
pass  out on dc0 from any to $bob queue bob_in
@


1.4
log
@remove 'flags S/SA' and 'keep state'

ok nick@@
@
text
@d1 1
a1 1
# $OpenBSD: faq-example2,v 1.3 2005/07/02 16:16:39 joel Exp $
@


1.3
log
@Sync with the faq
@
text
@d1 1
a1 1
# $OpenBSD: faq-example2,v 1.2 2003/08/06 16:04:45 henning Exp $
d65 3
a67 3
pass  out on fxp0 inet proto tcp from (fxp0) to any flags S/SA \
        keep state queue(std_out, tcp_ack_out)
pass  out on fxp0 inet proto { udp icmp } from (fxp0) to any keep state
d69 1
a69 1
        keep state queue dns_out
d71 1
a71 1
        flags S/SA keep state queue(std_out, ssh_im_out)
d73 1
a73 1
        flags S/SA keep state queue(ssh_im_out, tcp_ack_out)
@


1.2
log
@include URLs to the FAQ where the examplkes appear; Joel Knight
@
text
@d1 1
a1 1
# $OpenBSD: faq-example2,v 1.1 2003/08/02 18:25:49 henning Exp $
d45 3
a47 3
queue std_in    cbq(default)
queue ssh_im_in priority 4
queue dns_in    priority 5
@


1.1
log
@example rulesets from the pf FAQ; provided by Joel Knight
@
text
@d1 1
a1 1
# $OpenBSD$
d5 1
@

