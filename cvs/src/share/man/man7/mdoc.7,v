head	1.151;
access;
symbols
	OPENBSD_6_1:1.150.0.4
	OPENBSD_6_1_BASE:1.150
	OPENBSD_6_0:1.141.0.2
	OPENBSD_6_0_BASE:1.141
	OPENBSD_5_9:1.139.0.2
	OPENBSD_5_9_BASE:1.139
	OPENBSD_5_8:1.134.0.4
	OPENBSD_5_8_BASE:1.134
	OPENBSD_5_7:1.133.0.2
	OPENBSD_5_7_BASE:1.133
	OPENBSD_5_6:1.115.0.4
	OPENBSD_5_6_BASE:1.115
	OPENBSD_5_5:1.108.0.4
	OPENBSD_5_5_BASE:1.108
	OPENBSD_5_4:1.99.0.2
	OPENBSD_5_4_BASE:1.99
	OPENBSD_5_3:1.94.0.2
	OPENBSD_5_3_BASE:1.94
	OPENBSD_5_2:1.93.0.2
	OPENBSD_5_2_BASE:1.93
	OPENBSD_5_1_BASE:1.91
	OPENBSD_5_1:1.91.0.2
	OPENBSD_5_0:1.78.0.2
	OPENBSD_5_0_BASE:1.78
	OPENBSD_4_9:1.65.0.2
	OPENBSD_4_9_BASE:1.65
	OPENBSD_4_8:1.47.0.2
	OPENBSD_4_8_BASE:1.47
	OPENBSD_4_7:1.42.0.2
	OPENBSD_4_7_BASE:1.42
	OPENBSD_4_6:1.41.0.4
	OPENBSD_4_6_BASE:1.41
	OPENBSD_4_5:1.39.0.8
	OPENBSD_4_5_BASE:1.39
	OPENBSD_4_4:1.39.0.6
	OPENBSD_4_4_BASE:1.39
	OPENBSD_4_3:1.39.0.4
	OPENBSD_4_3_BASE:1.39
	OPENBSD_4_2:1.39.0.2
	OPENBSD_4_2_BASE:1.39
	OPENBSD_4_1:1.37.0.6
	OPENBSD_4_1_BASE:1.37
	OPENBSD_4_0:1.37.0.4
	OPENBSD_4_0_BASE:1.37
	OPENBSD_3_9:1.37.0.2
	OPENBSD_3_9_BASE:1.37
	OPENBSD_3_8:1.36.0.2
	OPENBSD_3_8_BASE:1.36
	OPENBSD_3_7:1.35.0.2
	OPENBSD_3_7_BASE:1.35
	OPENBSD_3_6:1.34.0.2
	OPENBSD_3_6_BASE:1.34
	OPENBSD_3_5:1.33.0.2
	OPENBSD_3_5_BASE:1.33
	OPENBSD_3_4:1.29.0.2
	OPENBSD_3_4_BASE:1.29
	OPENBSD_3_3:1.24.0.2
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.23.0.4
	OPENBSD_3_2_BASE:1.23
	OPENBSD_3_1:1.23.0.2
	OPENBSD_3_1_BASE:1.23
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9:1.19.0.2
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_8:1.16.0.2
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.15.0.2
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.151
date	2017.05.05.02.31.23;	author schwarze;	state Exp;
branches;
next	1.150;
commitid	4OU6Sh1kJFMje9Jc;

1.150
date	2017.02.16.14.38.07;	author schwarze;	state Exp;
branches;
next	1.149;
commitid	VDwQSHD2LSGvueh5;

1.149
date	2017.02.05.22.30.16;	author schwarze;	state Exp;
branches;
next	1.148;
commitid	LCPx139fk3lhzGNP;

1.148
date	2017.01.25.03.48.46;	author schwarze;	state Exp;
branches;
next	1.147;
commitid	nffq1zxVTGLly5Zx;

1.147
date	2017.01.09.14.10.18;	author schwarze;	state Exp;
branches;
next	1.146;
commitid	uMcsCr0kx2Vf8HwK;

1.146
date	2016.12.28.17.21.17;	author schwarze;	state Exp;
branches;
next	1.145;
commitid	KjwyCoopqjkm90wM;

1.145
date	2016.10.11.17.30.28;	author schwarze;	state Exp;
branches;
next	1.144;
commitid	WiEkgTZUusmtIdCt;

1.144
date	2016.09.03.13.37.41;	author guenther;	state Exp;
branches;
next	1.143;
commitid	6T3r4QcMFKe3Fo5T;

1.143
date	2016.09.01.10.59.15;	author jmc;	state Exp;
branches;
next	1.142;
commitid	oRNszhTCsK5xbVMn;

1.142
date	2016.08.10.17.37.01;	author jmc;	state Exp;
branches;
next	1.141;
commitid	O5Tjd8GzDmHmRMb3;

1.141
date	2016.05.11.21.52.49;	author deraadt;	state Exp;
branches;
next	1.140;
commitid	VpgRpYXqYSJy4P7J;

1.140
date	2016.03.10.08.58.59;	author jmc;	state Exp;
branches;
next	1.139;
commitid	16X3qljrd3cLYqvn;

1.139
date	2015.12.01.22.27.28;	author jmc;	state Exp;
branches;
next	1.138;
commitid	eUEJRnjrPoI0U4z7;

1.138
date	2015.11.01.21.30.58;	author guenther;	state Exp;
branches;
next	1.137;
commitid	QvpMrIaKKAmSrxL7;

1.137
date	2015.10.11.18.56.08;	author schwarze;	state Exp;
branches;
next	1.136;
commitid	h7KoB8cflvlOTG86;

1.136
date	2015.09.23.09.23.49;	author sobrado;	state Exp;
branches;
next	1.135;
commitid	41zFUL6nXZi2JIur;

1.135
date	2015.09.14.20.06.59;	author schwarze;	state Exp;
branches;
next	1.134;
commitid	r87YNrjEWwl7OkJ0;

1.134
date	2015.03.13.19.58.41;	author jmc;	state Exp;
branches;
next	1.133;
commitid	OcwhWBKGs3Yn7EeA;

1.133
date	2015.02.23.13.30.02;	author schwarze;	state Exp;
branches;
next	1.132;
commitid	0JG7TLVmNW4cori6;

1.132
date	2015.02.15.17.57.26;	author schwarze;	state Exp;
branches;
next	1.131;
commitid	OFrGep384NrihF0U;

1.131
date	2015.01.29.00.33.14;	author schwarze;	state Exp;
branches;
next	1.130;
commitid	9zTrpiF37UnMIPmt;

1.130
date	2015.01.20.18.54.33;	author tedu;	state Exp;
branches;
next	1.129;
commitid	s3Le5lNxQdP1lfC1;

1.129
date	2015.01.03.00.56.54;	author schwarze;	state Exp;
branches;
next	1.128;
commitid	tIWdQxXNfWcqsZrF;

1.128
date	2014.12.31.20.41.53;	author schwarze;	state Exp;
branches;
next	1.127;
commitid	WmHgr572z7oZbKqL;

1.127
date	2014.12.28.15.22.42;	author schwarze;	state Exp;
branches;
next	1.126;
commitid	ItxGB8SZL5ArBhAm;

1.126
date	2014.11.30.21.54.53;	author schwarze;	state Exp;
branches;
next	1.125;
commitid	avA5zVw2sW39Vls0;

1.125
date	2014.11.28.18.35.37;	author schwarze;	state Exp;
branches;
next	1.124;
commitid	C7yrJvu6v6cTTSgM;

1.124
date	2014.11.27.16.20.27;	author schwarze;	state Exp;
branches;
next	1.123;
commitid	snF2JxsotuPud6ts;

1.123
date	2014.11.16.20.45.27;	author schwarze;	state Exp;
branches;
next	1.122;
commitid	6CpzPpF0K6yH09er;

1.122
date	2014.10.30.20.05.33;	author schwarze;	state Exp;
branches;
next	1.121;
commitid	0MyCvIn2JIoyqJkI;

1.121
date	2014.10.20.17.58.56;	author schwarze;	state Exp;
branches;
next	1.120;
commitid	FFDQk2WLcZpwhF8R;

1.120
date	2014.10.12.02.59.04;	author bentley;	state Exp;
branches;
next	1.119;
commitid	om1v8MYUMKNqDtI3;

1.119
date	2014.09.17.00.42.54;	author schwarze;	state Exp;
branches;
next	1.118;
commitid	YW5gAxowjF7TukkD;

1.118
date	2014.08.28.03.49.59;	author schwarze;	state Exp;
branches;
next	1.117;
commitid	NWsLmUjwrMPTDKzS;

1.117
date	2014.08.14.20.55.41;	author schwarze;	state Exp;
branches;
next	1.116;
commitid	1cnxA9sCOgvAZmje;

1.116
date	2014.08.08.16.32.17;	author schwarze;	state Exp;
branches;
next	1.115;
commitid	kqeCWnrliHxAWz27;

1.115
date	2014.07.13.10.23.06;	author schwarze;	state Exp;
branches;
next	1.114;
commitid	B6ztrB42XuW0yWyh;

1.114
date	2014.07.02.19.54.39;	author schwarze;	state Exp;
branches;
next	1.113;
commitid	Yt0K01y5ZeXGGSxs;

1.113
date	2014.07.02.03.47.07;	author schwarze;	state Exp;
branches;
next	1.112;
commitid	p4pNII1v0bYCswy0;

1.112
date	2014.06.24.21.42.20;	author schwarze;	state Exp;
branches;
next	1.111;
commitid	T9d6GXGm1QYbq9se;

1.111
date	2014.06.22.17.06.50;	author schwarze;	state Exp;
branches;
next	1.110;
commitid	Rx98HZP4Tsqd4stO;

1.110
date	2014.03.30.23.57.43;	author dlg;	state Exp;
branches;
next	1.109;

1.109
date	2014.03.18.22.36.31;	author miod;	state Exp;
branches;
next	1.108;

1.108
date	2014.02.16.14.26.51;	author schwarze;	state Exp;
branches;
next	1.107;

1.107
date	2014.01.24.22.54.30;	author schwarze;	state Exp;
branches;
next	1.106;

1.106
date	2014.01.20.00.51.07;	author schwarze;	state Exp;
branches;
next	1.105;

1.105
date	2013.12.30.09.47.43;	author schwarze;	state Exp;
branches;
next	1.104;

1.104
date	2013.12.25.14.08.36;	author schwarze;	state Exp;
branches;
next	1.103;

1.103
date	2013.11.02.20.39.24;	author schwarze;	state Exp;
branches;
next	1.102;

1.102
date	2013.10.06.17.06.26;	author schwarze;	state Exp;
branches;
next	1.101;

1.101
date	2013.09.04.19.39.19;	author patrick;	state Exp;
branches;
next	1.100;

1.100
date	2013.08.14.15.06.42;	author schwarze;	state Exp;
branches;
next	1.99;

1.99
date	2013.07.13.19.27.47;	author schwarze;	state Exp;
branches;
next	1.98;

1.98
date	2013.06.17.17.39.48;	author guenther;	state Exp;
branches;
next	1.97;

1.97
date	2013.04.27.17.15.01;	author jmc;	state Exp;
branches;
next	1.96;

1.96
date	2013.03.26.19.16.19;	author jmc;	state Exp;
branches;
next	1.95;

1.95
date	2013.03.26.14.59.24;	author jmc;	state Exp;
branches;
next	1.94;

1.94
date	2012.08.29.23.38.41;	author schwarze;	state Exp;
branches;
next	1.93;

1.93
date	2012.06.20.22.00.23;	author jmc;	state Exp;
branches;
next	1.92;

1.92
date	2012.06.20.21.37.32;	author schwarze;	state Exp;
branches;
next	1.91;

1.91
date	2012.01.03.11.05.57;	author schwarze;	state Exp;
branches;
next	1.90;

1.90
date	2011.11.01.14.49.16;	author schwarze;	state Exp;
branches;
next	1.89;

1.89
date	2011.09.27.21.47.54;	author schwarze;	state Exp;
branches;
next	1.88;

1.88
date	2011.09.26.23.07.20;	author schwarze;	state Exp;
branches;
next	1.87;

1.87
date	2011.09.26.21.21.27;	author schwarze;	state Exp;
branches;
next	1.86;

1.86
date	2011.09.18.15.54.48;	author schwarze;	state Exp;
branches;
next	1.85;

1.85
date	2011.09.18.10.38.57;	author schwarze;	state Exp;
branches;
next	1.84;

1.84
date	2011.09.17.21.09.54;	author schwarze;	state Exp;
branches;
next	1.83;

1.83
date	2011.09.16.19.36.07;	author jmc;	state Exp;
branches;
next	1.82;

1.82
date	2011.09.09.15.29.21;	author jmc;	state Exp;
branches;
next	1.81;

1.81
date	2011.08.30.12.25.09;	author jmc;	state Exp;
branches;
next	1.80;

1.80
date	2011.08.30.11.38.59;	author jmc;	state Exp;
branches;
next	1.79;

1.79
date	2011.08.16.23.27.52;	author schwarze;	state Exp;
branches;
next	1.78;

1.78
date	2011.08.03.21.03.11;	author schwarze;	state Exp;
branches;
next	1.77;

1.77
date	2011.08.02.00.52.34;	author schwarze;	state Exp;
branches;
next	1.76;

1.76
date	2011.08.01.07.45.08;	author schwarze;	state Exp;
branches;
next	1.75;

1.75
date	2011.07.31.17.12.29;	author schwarze;	state Exp;
branches;
next	1.74;

1.74
date	2011.07.24.02.52.56;	author schwarze;	state Exp;
branches;
next	1.73;

1.73
date	2011.07.15.20.34.34;	author schwarze;	state Exp;
branches;
next	1.72;

1.72
date	2011.07.15.10.28.35;	author schwarze;	state Exp;
branches;
next	1.71;

1.71
date	2011.07.07.20.24.12;	author jmc;	state Exp;
branches;
next	1.70;

1.70
date	2011.06.07.23.40.10;	author schwarze;	state Exp;
branches;
next	1.69;

1.69
date	2011.06.05.17.24.15;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2011.05.16.16.39.52;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2011.04.17.11.54.54;	author schwarze;	state Exp;
branches;
next	1.66;

1.66
date	2011.03.07.01.35.33;	author schwarze;	state Exp;
branches;
next	1.65;

1.65
date	2011.02.07.00.02.50;	author schwarze;	state Exp;
branches;
next	1.64;

1.64
date	2011.02.06.17.33.20;	author schwarze;	state Exp;
branches;
next	1.63;

1.63
date	2011.01.25.00.37.39;	author schwarze;	state Exp;
branches;
next	1.62;

1.62
date	2011.01.22.14.05.28;	author schwarze;	state Exp;
branches;
next	1.61;

1.61
date	2011.01.16.02.56.47;	author schwarze;	state Exp;
branches;
next	1.60;

1.60
date	2011.01.09.15.24.57;	author schwarze;	state Exp;
branches;
next	1.59;

1.59
date	2011.01.09.12.49.22;	author schwarze;	state Exp;
branches;
next	1.58;

1.58
date	2010.12.22.23.45.42;	author schwarze;	state Exp;
branches;
next	1.57;

1.57
date	2010.11.30.20.35.56;	author schwarze;	state Exp;
branches;
next	1.56;

1.56
date	2010.11.28.15.45.26;	author schwarze;	state Exp;
branches;
next	1.55;

1.55
date	2010.10.29.10.36.08;	author schwarze;	state Exp;
branches;
next	1.54;

1.54
date	2010.10.24.14.49.33;	author schwarze;	state Exp;
branches;
next	1.53;

1.53
date	2010.09.26.19.40.27;	author schwarze;	state Exp;
branches;
next	1.52;

1.52
date	2010.09.26.15.10.20;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2010.09.04.08.00.15;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2010.08.31.17.51.31;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2010.08.22.11.39.18;	author schwarze;	state Exp;
branches;
next	1.48;

1.48
date	2010.08.18.01.59.59;	author schwarze;	state Exp;
branches;
next	1.47;

1.47
date	2010.08.07.19.22.50;	author schwarze;	state Exp;
branches;
next	1.46;

1.46
date	2010.08.03.00.07.57;	author schwarze;	state Exp;
branches;
next	1.45;

1.45
date	2010.08.01.20.47.52;	author schwarze;	state Exp;
branches;
next	1.44;

1.44
date	2010.08.01.20.37.51;	author schwarze;	state Exp;
branches;
next	1.43;

1.43
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2010.01.03.16.43.45;	author schwarze;	state Exp;
branches;
next	1.41;

1.41
date	2009.04.23.15.37.14;	author sobrado;	state Exp;
branches;
next	1.40;

1.40
date	2009.03.04.22.17.05;	author sobrado;	state Exp;
branches;
next	1.39;

1.39
date	2007.05.31.22.10.19;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2007.05.31.19.19.58;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2006.01.04.15.13.46;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2005.06.05.19.40.22;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2004.11.21.07.07.46;	author jaredy;	state Exp;
branches;
next	1.34;

1.34
date	2004.07.02.10.36.57;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2004.02.24.21.21.44;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2004.02.20.10.34.41;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2004.01.25.14.58.41;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2004.01.24.21.55.08;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2003.09.02.19.08.21;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2003.07.21.11.50.54;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.02.23.30.15;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2003.05.29.08.46.22;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.04.13.11.06.21;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2002.12.06.02.36.24;	author marc;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.13.13.54.26;	author mpech;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.21;

1.21
date	2001.08.02.18.00.10;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.22.11.14.52;	author mpech;	state Exp;
branches;
next	1.19;

1.19
date	2001.02.25.07.08.31;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.10.00.06.02;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.11.08.20.50.59;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2000.09.11.01.36.53;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.03.24.03.23.23;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.19.19.25.34;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.04.22.19.33;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.09.02.17.42.27;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.07.07.10.50.09;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.05.30.02.27.23;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	99.04.25.14.55.00;	author alex;	state Exp;
branches;
next	1.8;

1.8
date	98.12.02.07.21.02;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.09.07.16.44.37;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.09.06.12.41.41;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.03.07.21.47.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.12.08.20.29.44;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.11.30.04.58.43;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.04.57.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.151
log
@Clean up docs after today's .br and .ft code cleanup; simpler.
@
text
@.\"	$OpenBSD: mdoc.7,v 1.150 2017/02/16 14:38:07 schwarze Exp $
.\"
.\" Copyright (c) 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
.\" Copyright (c) 2010, 2011, 2013-2017 Ingo Schwarze <schwarze@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: February 16 2017 $
.Dt MDOC 7
.Os
.Sh NAME
.Nm mdoc
.Nd semantic markup language for formatting manual pages
.Sh DESCRIPTION
The
.Nm mdoc
language supports authoring of manual pages for the
.Xr man 1
utility by allowing semantic annotations of words, phrases,
page sections and complete manual pages.
Such annotations are used by formatting tools to achieve a uniform
presentation across all manuals written in
.Nm ,
and to support hyperlinking if supported by the output medium.
.Pp
This reference document describes the structure of manual pages
and the syntax and usage of the
.Nm
language.
The reference implementation of a parsing and formatting tool is
.Xr mandoc 1 ;
the
.Sx COMPATIBILITY
section describes compatibility with other implementations.
.Pp
In an
.Nm
document, lines beginning with the control character
.Sq \&.
are called
.Dq macro lines .
The first word is the macro name.
It consists of two or three letters.
Most macro names begin with a capital letter.
For a list of available macros, see
.Sx MACRO OVERVIEW .
The words following the macro name are arguments to the macro, optionally
including the names of other, callable macros; see
.Sx MACRO SYNTAX
for details.
.Pp
Lines not beginning with the control character are called
.Dq text lines .
They provide free-form text to be printed; the formatting of the text
depends on the respective processing context:
.Bd -literal -offset indent
\&.Sh Macro lines change control state.
Text lines are interpreted within the current state.
.Ed
.Pp
Many aspects of the basic syntax of the
.Nm
language are based on the
.Xr roff 7
language; see the
.Em LANGUAGE SYNTAX
and
.Em MACRO SYNTAX
sections in the
.Xr roff 7
manual for details, in particular regarding
comments, escape sequences, whitespace, and quoting.
However, using
.Xr roff 7
requests in
.Nm
documents is discouraged;
.Xr mandoc 1
supports some of them merely for backward compatibility.
.Sh MANUAL STRUCTURE
A well-formed
.Nm
document consists of a document prologue followed by one or more
sections.
.Pp
The prologue, which consists of the
.Sx \&Dd ,
.Sx \&Dt ,
and
.Sx \&Os
macros in that order, is required for every document.
.Pp
The first section (sections are denoted by
.Sx \&Sh )
must be the NAME section, consisting of at least one
.Sx \&Nm
followed by
.Sx \&Nd .
.Pp
Following that, convention dictates specifying at least the
.Em SYNOPSIS
and
.Em DESCRIPTION
sections, although this varies between manual sections.
.Pp
The following is a well-formed skeleton
.Nm
file for a utility
.Qq progname :
.Bd -literal -offset indent
\&.Dd $\&Mdocdate$
\&.Dt PROGNAME section
\&.Os
\&.Sh NAME
\&.Nm progname
\&.Nd one line about what it does
\&.\e\(dq .Sh LIBRARY
\&.\e\(dq For sections 2, 3, and 9 only.
\&.\e\(dq Not used in OpenBSD.
\&.Sh SYNOPSIS
\&.Nm progname
\&.Op Fl options
\&.Ar
\&.Sh DESCRIPTION
The
\&.Nm
utility processes files ...
\&.\e\(dq .Sh CONTEXT
\&.\e\(dq For section 9 functions only.
\&.\e\(dq .Sh IMPLEMENTATION NOTES
\&.\e\(dq Not used in OpenBSD.
\&.\e\(dq .Sh RETURN VALUES
\&.\e\(dq For sections 2, 3, and 9 function return values only.
\&.\e\(dq .Sh ENVIRONMENT
\&.\e\(dq For sections 1, 6, 7, and 8 only.
\&.\e\(dq .Sh FILES
\&.\e\(dq .Sh EXIT STATUS
\&.\e\(dq For sections 1, 6, and 8 only.
\&.\e\(dq .Sh EXAMPLES
\&.\e\(dq .Sh DIAGNOSTICS
\&.\e\(dq For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
\&.\e\(dq .Sh ERRORS
\&.\e\(dq For sections 2, 3, 4, and 9 errno settings only.
\&.\e\(dq .Sh SEE ALSO
\&.\e\(dq .Xr foobar 1
\&.\e\(dq .Sh STANDARDS
\&.\e\(dq .Sh HISTORY
\&.\e\(dq .Sh AUTHORS
\&.\e\(dq .Sh CAVEATS
\&.\e\(dq .Sh BUGS
\&.\e\(dq .Sh SECURITY CONSIDERATIONS
\&.\e\(dq Not used in OpenBSD.
.Ed
.Pp
The sections in an
.Nm
document are conventionally ordered as they appear above.
Sections should be composed as follows:
.Bl -ohang -offset Ds
.It Em NAME
The name(s) and a one line description of the documented material.
The syntax for this as follows:
.Bd -literal -offset indent
\&.Nm name0 ,
\&.Nm name1 ,
\&.Nm name2
\&.Nd a one line description
.Ed
.Pp
Multiple
.Sq \&Nm
names should be separated by commas.
.Pp
The
.Sx \&Nm
macro(s) must precede the
.Sx \&Nd
macro.
.Pp
See
.Sx \&Nm
and
.Sx \&Nd .
.It Em LIBRARY
The name of the library containing the documented material, which is
assumed to be a function in a section 2, 3, or 9 manual.
The syntax for this is as follows:
.Bd -literal -offset indent
\&.Lb libarm
.Ed
.Pp
See
.Sx \&Lb .
.It Em SYNOPSIS
Documents the utility invocation syntax, function call syntax, or device
configuration.
.Pp
For the first, utilities (sections 1, 6, and 8), this is
generally structured as follows:
.Bd -literal -offset indent
\&.Nm bar
\&.Op Fl v
\&.Op Fl o Ar file
\&.Op Ar
\&.Nm foo
\&.Op Fl v
\&.Op Fl o Ar file
\&.Op Ar
.Ed
.Pp
Commands should be ordered alphabetically.
.Pp
For the second, function calls (sections 2, 3, 9):
.Bd -literal -offset indent
\&.In header.h
\&.Vt extern const char *global;
\&.Ft "char *"
\&.Fn foo "const char *src"
\&.Ft "char *"
\&.Fn bar "const char *src"
.Ed
.Pp
Ordering of
.Sx \&In ,
.Sx \&Vt ,
.Sx \&Fn ,
and
.Sx \&Fo
macros should follow C header-file conventions.
.Pp
And for the third, configurations (section 4):
.Bd -literal -offset indent
\&.Cd \(dqit* at isa? port 0x2e\(dq
\&.Cd \(dqit* at isa? port 0x4e\(dq
.Ed
.Pp
Manuals not in these sections generally don't need a
.Em SYNOPSIS .
.Pp
Some macros are displayed differently in the
.Em SYNOPSIS
section, particularly
.Sx \&Nm ,
.Sx \&Cd ,
.Sx \&Fd ,
.Sx \&Fn ,
.Sx \&Fo ,
.Sx \&In ,
.Sx \&Vt ,
and
.Sx \&Ft .
All of these macros are output on their own line.
If two such dissimilar macros are pairwise invoked (except for
.Sx \&Ft
before
.Sx \&Fo
or
.Sx \&Fn ) ,
they are separated by a vertical space, unless in the case of
.Sx \&Fo ,
.Sx \&Fn ,
and
.Sx \&Ft ,
which are always separated by vertical space.
.Pp
When text and macros following an
.Sx \&Nm
macro starting an input line span multiple output lines,
all output lines but the first will be indented to align
with the text immediately following the
.Sx \&Nm
macro, up to the next
.Sx \&Nm ,
.Sx \&Sh ,
or
.Sx \&Ss
macro or the end of an enclosing block, whichever comes first.
.It Em DESCRIPTION
This begins with an expansion of the brief, one line description in
.Em NAME :
.Bd -literal -offset indent
The
\&.Nm
utility does this, that, and the other.
.Ed
.Pp
It usually follows with a breakdown of the options (if documenting a
command), such as:
.Bd -literal -offset indent
The arguments are as follows:
\&.Bl \-tag \-width Ds
\&.It Fl v
Print verbose information.
\&.El
.Ed
.Pp
List the options in alphabetical order,
uppercase before lowercase for each letter and
with no regard to whether an option takes an argument.
Put digits in ascending order before all letter options.
.Pp
Manuals not documenting a command won't include the above fragment.
.Pp
Since the
.Em DESCRIPTION
section usually contains most of the text of a manual, longer manuals
often use the
.Sx \&Ss
macro to form subsections.
In very long manuals, the
.Em DESCRIPTION
may be split into multiple sections, each started by an
.Sx \&Sh
macro followed by a non-standard section name, and each having
several subsections, like in the present
.Nm
manual.
.It Em CONTEXT
This section lists the contexts in which functions can be called in section 9.
The contexts are autoconf, process, or interrupt.
.It Em IMPLEMENTATION NOTES
Implementation-specific notes should be kept here.
This is useful when implementing standard functions that may have side
effects or notable algorithmic implications.
.It Em RETURN VALUES
This section documents the
return values of functions in sections 2, 3, and 9.
.Pp
See
.Sx \&Rv .
.It Em ENVIRONMENT
Lists the environment variables used by the utility,
and explains the syntax and semantics of their values.
The
.Xr environ 7
manual provides examples of typical content and formatting.
.Pp
See
.Sx \&Ev .
.It Em FILES
Documents files used.
It's helpful to document both the file name and a short description of how
the file is used (created, modified, etc.).
.Pp
See
.Sx \&Pa .
.It Em EXIT STATUS
This section documents the
command exit status for section 1, 6, and 8 utilities.
Historically, this information was described in
.Em DIAGNOSTICS ,
a practise that is now discouraged.
.Pp
See
.Sx \&Ex .
.It Em EXAMPLES
Example usages.
This often contains snippets of well-formed, well-tested invocations.
Make sure that examples work properly!
.It Em DIAGNOSTICS
Documents error messages.
In section 4 and 9 manuals, these are usually messages printed by the
kernel to the console and to the kernel log.
In section 1, 6, 7, and 8, these are usually messages printed by
userland programs to the standard error output.
.Pp
Historically, this section was used in place of
.Em EXIT STATUS
for manuals in sections 1, 6, and 8; however, this practise is
discouraged.
.Pp
See
.Sx \&Bl
.Fl diag .
.It Em ERRORS
Documents
.Xr errno 2
settings in sections 2, 3, 4, and 9.
.Pp
See
.Sx \&Er .
.It Em SEE ALSO
References other manuals with related topics.
This section should exist for most manuals.
Cross-references should conventionally be ordered first by section, then
alphabetically (ignoring case).
.Pp
References to other documentation concerning the topic of the manual page,
for example authoritative books or journal articles, may also be
provided in this section.
.Pp
See
.Sx \&Rs
and
.Sx \&Xr .
.It Em STANDARDS
References any standards implemented or used.
If not adhering to any standards, the
.Em HISTORY
section should be used instead.
.Pp
See
.Sx \&St .
.It Em HISTORY
A brief history of the subject, including where it was first implemented,
and when it was ported to or reimplemented for the operating system at hand.
.It Em AUTHORS
Credits to the person or persons who wrote the code and/or documentation.
Authors should generally be noted by both name and email address.
.Pp
See
.Sx \&An .
.It Em CAVEATS
Common misuses and misunderstandings should be explained
in this section.
.It Em BUGS
Known bugs, limitations, and work-arounds should be described
in this section.
.It Em SECURITY CONSIDERATIONS
Documents any security precautions that operators should consider.
.El
.Sh MACRO OVERVIEW
This overview is sorted such that macros of similar purpose are listed
together, to help find the best macro for any given purpose.
Deprecated macros are not included in the overview, but can be found below
in the alphabetical
.Sx MACRO REFERENCE .
.Ss Document preamble and NAME section macros
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Dd Ta document date: Cm $\&Mdocdate$ | Ar month day , year
.It Sx \&Dt Ta document title: Ar TITLE section Op Ar arch
.It Sx \&Os Ta operating system version: Op Ar system Op Ar version
.It Sx \&Nm Ta document name (one argument)
.It Sx \&Nd Ta document description (one line)
.El
.Ss Sections and cross references
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Sh Ta section header (one line)
.It Sx \&Ss Ta subsection header (one line)
.It Sx \&Sx Ta internal cross reference to a section or subsection
.It Sx \&Xr Ta cross reference to another manual page: Ar name section
.It Sx \&Pp , \&Lp Ta start a text paragraph (no arguments)
.El
.Ss Displays and lists
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Bd , \&Ed Ta display block:
.Fl Ar type
.Op Fl offset Ar width
.Op Fl compact
.It Sx \&D1 Ta indented display (one line)
.It Sx \&Dl Ta indented literal display (one line)
.It Sx \&Ql Ta in-line literal display: Ql text
.It Sx \&Bl , \&El Ta list block:
.Fl Ar type
.Op Fl width Ar val
.Op Fl offset Ar val
.Op Fl compact
.It Sx \&It Ta list item (syntax depends on Fl Ar type )
.It Sx \&Ta Ta table cell separator in Sx \&Bl Fl column No lists
.It Sx \&Rs , \&%* , \&Re Ta bibliographic block (references)
.El
.Ss Spacing control
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Pf Ta prefix, no following horizontal space (one argument)
.It Sx \&Ns Ta roman font, no preceding horizontal space (no arguments)
.It Sx \&Ap Ta apostrophe without surrounding whitespace (no arguments)
.It Sx \&Sm Ta switch horizontal spacing mode: Op Cm on | off
.It Sx \&Bk , \&Ek Ta keep block: Fl words
.It Sx \&sp Ta force vertical space: Op Ar height
.El
.Ss Semantic markup for command line utilities:
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Nm Ta start a SYNOPSIS block with the name of a utility
.It Sx \&Fl Ta command line options (flags) (>=0 arguments)
.It Sx \&Cm Ta command modifier (>0 arguments)
.It Sx \&Ar Ta command arguments (>=0 arguments)
.It Sx \&Op , \&Oo , \&Oc Ta optional syntax elements (enclosure)
.It Sx \&Ic Ta internal or interactive command (>0 arguments)
.It Sx \&Ev Ta environmental variable (>0 arguments)
.It Sx \&Pa Ta file system path (>=0 arguments)
.El
.Ss Semantic markup for function libraries:
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Lb Ta function library (one argument)
.It Sx \&In Ta include file (one argument)
.It Sx \&Fd Ta other preprocessor directive (>0 arguments)
.It Sx \&Ft Ta function type (>0 arguments)
.It Sx \&Fo , \&Fc Ta function block: Ar funcname
.It Sx \&Fn Ta function name:
.Op Ar functype
.Ar funcname
.Oo
.Op Ar argtype
.Ar argname
.Oc
.It Sx \&Fa Ta function argument (>0 arguments)
.It Sx \&Vt Ta variable type (>0 arguments)
.It Sx \&Va Ta variable name (>0 arguments)
.It Sx \&Dv Ta defined variable or preprocessor constant (>0 arguments)
.It Sx \&Er Ta error constant (>0 arguments)
.It Sx \&Ev Ta environmental variable (>0 arguments)
.El
.Ss Various semantic markup:
.Bl -column "Brq, Bro, Brc" description
.It Sx \&An Ta author name (>0 arguments)
.It Sx \&Lk Ta hyperlink: Ar uri Op Ar name
.It Sx \&Mt Ta Do mailto Dc hyperlink: Ar address
.It Sx \&Cd Ta kernel configuration declaration (>0 arguments)
.It Sx \&Ad Ta memory address (>0 arguments)
.It Sx \&Ms Ta mathematical symbol (>0 arguments)
.El
.Ss Physical markup
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Em Ta italic font or underline (emphasis) (>0 arguments)
.It Sx \&Sy Ta boldface font (symbolic) (>0 arguments)
.It Sx \&Li Ta typewriter font (literal) (>0 arguments)
.It Sx \&No Ta return to roman font (normal) (no arguments)
.It Sx \&Bf , \&Ef Ta font block:
.Op Fl Ar type | Cm \&Em | \&Li | \&Sy
.El
.Ss Physical enclosures
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Dq , \&Do , \&Dc Ta enclose in typographic double quotes: Dq text
.It Sx \&Qq , \&Qo , \&Qc Ta enclose in typewriter double quotes: Qq text
.It Sx \&Sq , \&So , \&Sc Ta enclose in single quotes: Sq text
.It Sx \&Pq , \&Po , \&Pc Ta enclose in parentheses: Pq text
.It Sx \&Bq , \&Bo , \&Bc Ta enclose in square brackets: Bq text
.It Sx \&Brq , \&Bro , \&Brc Ta enclose in curly braces: Brq text
.It Sx \&Aq , \&Ao , \&Ac Ta enclose in angle brackets: Aq text
.It Sx \&Eo , \&Ec Ta generic enclosure
.El
.Ss Text production
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Ex Fl std Ta standard command exit values: Op Ar utility ...
.It Sx \&Rv Fl std Ta standard function return values: Op Ar function ...
.It Sx \&St Ta reference to a standards document (one argument)
.It Sx \&At Ta At
.It Sx \&Bx Ta Bx
.It Sx \&Bsx Ta Bsx
.It Sx \&Nx Ta Nx
.It Sx \&Fx Ta Fx
.It Sx \&Ox Ta Ox
.It Sx \&Dx Ta Dx
.El
.Sh MACRO REFERENCE
This section is a canonical reference of all macros, arranged
alphabetically.
For the scoping of individual macros, see
.Sx MACRO SYNTAX .
.Ss \&%A
Author name of an
.Sx \&Rs
block.
Multiple authors should each be accorded their own
.Sx \%%A
line.
Author names should be ordered with full or abbreviated forename(s)
first, then full surname.
.Ss \&%B
Book title of an
.Sx \&Rs
block.
This macro may also be used in a non-bibliographic context when
referring to book titles.
.Ss \&%C
Publication city or location of an
.Sx \&Rs
block.
.Ss \&%D
Publication date of an
.Sx \&Rs
block.
Recommended formats of arguments are
.Ar month day , year
or just
.Ar year .
.Ss \&%I
Publisher or issuer name of an
.Sx \&Rs
block.
.Ss \&%J
Journal name of an
.Sx \&Rs
block.
.Ss \&%N
Issue number (usually for journals) of an
.Sx \&Rs
block.
.Ss \&%O
Optional information of an
.Sx \&Rs
block.
.Ss \&%P
Book or journal page number of an
.Sx \&Rs
block.
.Ss \&%Q
Institutional author (school, government, etc.) of an
.Sx \&Rs
block.
Multiple institutional authors should each be accorded their own
.Sx \&%Q
line.
.Ss \&%R
Technical report name of an
.Sx \&Rs
block.
.Ss \&%T
Article title of an
.Sx \&Rs
block.
This macro may also be used in a non-bibliographical context when
referring to article titles.
.Ss \&%U
URI of reference document.
.Ss \&%V
Volume number of an
.Sx \&Rs
block.
.Ss \&Ac
Close an
.Sx \&Ao
block.
Does not have any tail arguments.
.Ss \&Ad
Memory address.
Do not use this for postal addresses.
.Pp
Examples:
.Dl \&.Ad [0,$]
.Dl \&.Ad 0x00000000
.Ss \&An
Author name.
Can be used both for the authors of the program, function, or driver
documented in the manual, or for the authors of the manual itself.
Requires either the name of an author or one of the following arguments:
.Pp
.Bl -tag -width "-nosplitX" -offset indent -compact
.It Fl split
Start a new output line before each subsequent invocation of
.Sx \&An .
.It Fl nosplit
The opposite of
.Fl split .
.El
.Pp
The default is
.Fl nosplit .
The effect of selecting either of the
.Fl split
modes ends at the beginning of the
.Em AUTHORS
section.
In the
.Em AUTHORS
section, the default is
.Fl nosplit
for the first author listing and
.Fl split
for all other author listings.
.Pp
Examples:
.Dl \&.An -nosplit
.Dl \&.An Kristaps Dzonsons \&Aq \&Mt kristaps@@bsd.lv
.Ss \&Ao
Begin a block enclosed by angle brackets.
Does not have any head arguments.
.Pp
Examples:
.Dl \&.Fl -key= \&Ns \&Ao \&Ar val \&Ac
.Pp
See also
.Sx \&Aq .
.Ss \&Ap
Inserts an apostrophe without any surrounding whitespace.
This is generally used as a grammatical device when referring to the verb
form of a function.
.Pp
Examples:
.Dl \&.Fn execve \&Ap d
.Ss \&Aq
Encloses its arguments in angle brackets.
.Pp
Examples:
.Dl \&.Fl -key= \&Ns \&Aq \&Ar val
.Pp
.Em Remarks :
this macro is often abused for rendering URIs, which should instead use
.Sx \&Lk
or
.Sx \&Mt ,
or to note pre-processor
.Dq Li #include
statements, which should use
.Sx \&In .
.Pp
See also
.Sx \&Ao .
.Ss \&Ar
Command arguments.
If an argument is not provided, the string
.Dq file ...\&
is used as a default.
.Pp
Examples:
.Dl ".Fl o Ar file"
.Dl ".Ar"
.Dl ".Ar arg1 , arg2 ."
.Pp
The arguments to the
.Sx \&Ar
macro are names and placeholders for command arguments;
for fixed strings to be passed verbatim as arguments, use
.Sx \&Fl
or
.Sx \&Cm .
.Ss \&At
Formats an
.At
version.
Accepts one optional argument:
.Pp
.Bl -tag -width "v[1-7] | 32vX" -offset indent -compact
.It Cm v[1-7] | 32v
A version of
.At .
.It Cm III
.At III .
.It Cm V[.[1-4]]?
A version of
.At V .
.El
.Pp
Note that these arguments do not begin with a hyphen.
.Pp
Examples:
.Dl \&.At
.Dl \&.At III
.Dl \&.At V.1
.Pp
See also
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
and
.Sx \&Ox .
.Ss \&Bc
Close a
.Sx \&Bo
block.
Does not have any tail arguments.
.Ss \&Bd
Begin a display block.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Bd
.Fl Ns Ar type
.Op Fl offset Ar width
.Op Fl compact
.Ed
.Pp
Display blocks are used to select a different indentation and
justification than the one used by the surrounding text.
They may contain both macro lines and text lines.
By default, a display block is preceded by a vertical space.
.Pp
The
.Ar type
must be one of the following:
.Bl -tag -width 13n -offset indent
.It Fl centered
Produce one output line from each input line, and center-justify each line.
Using this display type is not recommended; many
.Nm
implementations render it poorly.
.It Fl filled
Change the positions of line breaks to fill each line, and left- and
right-justify the resulting block.
.It Fl literal
Produce one output line from each input line,
and do not justify the block at all.
Preserve white space as it appears in the input.
Always use a constant-width font.
Use this for displaying source code.
.It Fl ragged
Change the positions of line breaks to fill each line, and left-justify
the resulting block.
.It Fl unfilled
The same as
.Fl literal ,
but using the same font as for normal text, which is a variable width font
if supported by the output device.
.El
.Pp
The
.Ar type
must be provided first.
Additional arguments may follow:
.Bl -tag -width 13n -offset indent
.It Fl offset Ar width
Indent the display by the
.Ar width ,
which may be one of the following:
.Bl -item
.It
One of the pre-defined strings
.Cm indent ,
the width of a standard indentation (six constant width characters);
.Cm indent-two ,
twice
.Cm indent ;
.Cm left ,
which has no effect;
.Cm right ,
which justifies to the right margin; or
.Cm center ,
which aligns around an imagined center axis.
.It
A macro invocation, which selects a predefined width
associated with that macro.
The most popular is the imaginary macro
.Ar \&Ds ,
which resolves to
.Sy 6n .
.It
A scaling width as described in
.Xr roff 7 .
.It
An arbitrary string, which indents by the length of this string.
.El
.Pp
When the argument is missing,
.Fl offset
is ignored.
.It Fl compact
Do not assert vertical space before the display.
.El
.Pp
Examples:
.Bd -literal -offset indent
\&.Bd \-literal \-offset indent \-compact
   Hello       world.
\&.Ed
.Ed
.Pp
See also
.Sx \&D1
and
.Sx \&Dl .
.Ss \&Bf
Change the font mode for a scoped block of text.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Bf
.Oo
.Fl emphasis | literal | symbolic |
.Cm \&Em | \&Li | \&Sy
.Oc
.Ed
.Pp
The
.Fl emphasis
and
.Cm \&Em
argument are equivalent, as are
.Fl symbolic
and
.Cm \&Sy ,
and
.Fl literal
and
.Cm \&Li .
Without an argument, this macro does nothing.
The font mode continues until broken by a new font mode in a nested
scope or
.Sx \&Ef
is encountered.
.Pp
See also
.Sx \&Li ,
.Sx \&Ef ,
.Sx \&Em ,
and
.Sx \&Sy .
.Ss \&Bk
For each macro, keep its output together on the same output line,
until the end of the macro or the end of the input line is reached,
whichever comes first.
Line breaks in text lines are unaffected.
The syntax is as follows:
.Pp
.D1 Pf \. Sx \&Bk Fl words
.Pp
The
.Fl words
argument is required; additional arguments are ignored.
.Pp
The following example will not break within each
.Sx \&Op
macro line:
.Bd -literal -offset indent
\&.Bk \-words
\&.Op Fl f Ar flags
\&.Op Fl o Ar output
\&.Ek
.Ed
.Pp
Be careful in using over-long lines within a keep block!
Doing so will clobber the right margin.
.Ss \&Bl
Begin a list.
Lists consist of items specified using the
.Sx \&It
macro, containing a head or a body or both.
The list syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Bl
.Fl Ns Ar type
.Op Fl width Ar val
.Op Fl offset Ar val
.Op Fl compact
.Op HEAD ...
.Ed
.Pp
The list
.Ar type
is mandatory and must be specified first.
The
.Fl width
and
.Fl offset
arguments accept macro names as described for
.Sx \&Bd
.Fl offset ,
scaling widths as described in
.Xr roff 7 ,
or use the length of the given string.
The
.Fl offset
is a global indentation for the whole list, affecting both item heads
and bodies.
For those list types supporting it, the
.Fl width
argument requests an additional indentation of item bodies,
to be added to the
.Fl offset .
Unless the
.Fl compact
argument is specified, list entries are separated by vertical space.
.Pp
A list must specify one of the following list types:
.Bl -tag -width 12n -offset indent
.It Fl bullet
No item heads can be specified, but a bullet will be printed at the head
of each item.
Item bodies start on the same output line as the bullet
and are indented according to the
.Fl width
argument.
.It Fl column
A columnated list.
The
.Fl width
argument has no effect; instead, the string length of each argument
specifies the width of one column.
If the first line of the body of a
.Fl column
list is not an
.Sx \&It
macro line,
.Sx \&It
contexts spanning one input line each are implied until an
.Sx \&It
macro line is encountered, at which point items start being interpreted as
described in the
.Sx \&It
documentation.
.It Fl dash
Like
.Fl bullet ,
except that dashes are used in place of bullets.
.It Fl diag
Like
.Fl inset ,
except that item heads are not parsed for macro invocations.
Most often used in the
.Em DIAGNOSTICS
section with error constants in the item heads.
.It Fl enum
A numbered list.
No item heads can be specified.
Formatted like
.Fl bullet ,
except that cardinal numbers are used in place of bullets,
starting at 1.
.It Fl hang
Like
.Fl tag ,
except that the first lines of item bodies are not indented, but follow
the item heads like in
.Fl inset
lists.
.It Fl hyphen
Synonym for
.Fl dash .
.It Fl inset
Item bodies follow items heads on the same line, using normal inter-word
spacing.
Bodies are not indented, and the
.Fl width
argument is ignored.
.It Fl item
No item heads can be specified, and none are printed.
Bodies are not indented, and the
.Fl width
argument is ignored.
.It Fl ohang
Item bodies start on the line following item heads and are not indented.
The
.Fl width
argument is ignored.
.It Fl tag
Item bodies are indented according to the
.Fl width
argument.
When an item head fits inside the indentation, the item body follows
this head on the same output line.
Otherwise, the body starts on the output line following the head.
.El
.Pp
Lists may be nested within lists and displays.
Nesting of
.Fl column
and
.Fl enum
lists may not be portable.
.Pp
See also
.Sx \&El
and
.Sx \&It .
.Ss \&Bo
Begin a block enclosed by square brackets.
Does not have any head arguments.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Bo 1 ,
\&.Dv BUFSIZ \&Bc
.Ed
.Pp
See also
.Sx \&Bq .
.Ss \&Bq
Encloses its arguments in square brackets.
.Pp
Examples:
.Dl \&.Bq 1 , \&Dv BUFSIZ
.Pp
.Em Remarks :
this macro is sometimes abused to emulate optional arguments for
commands; the correct macros to use for this purpose are
.Sx \&Op ,
.Sx \&Oo ,
and
.Sx \&Oc .
.Pp
See also
.Sx \&Bo .
.Ss \&Brc
Close a
.Sx \&Bro
block.
Does not have any tail arguments.
.Ss \&Bro
Begin a block enclosed by curly braces.
Does not have any head arguments.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Bro 1 , ... ,
\&.Va n \&Brc
.Ed
.Pp
See also
.Sx \&Brq .
.Ss \&Brq
Encloses its arguments in curly braces.
.Pp
Examples:
.Dl \&.Brq 1 , ... , \&Va n
.Pp
See also
.Sx \&Bro .
.Ss \&Bsx
Format the
.Bsx
version provided as an argument, or a default value if
no argument is provided.
.Pp
Examples:
.Dl \&.Bsx 1.0
.Dl \&.Bsx
.Pp
See also
.Sx \&At ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
and
.Sx \&Ox .
.Ss \&Bt
Supported only for compatibility, do not use this in new manuals.
Prints
.Dq is currently in beta test.
.Ss \&Bx
Format the
.Bx
version provided as an argument, or a default value if no
argument is provided.
.Pp
Examples:
.Dl \&.Bx 4.3 Tahoe
.Dl \&.Bx 4.4
.Dl \&.Bx
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
and
.Sx \&Ox .
.Ss \&Cd
Kernel configuration declaration.
This denotes strings accepted by
.Xr config 8 .
It is most often used in section 4 manual pages.
.Pp
Examples:
.Dl \&.Cd device le0 at scode?
.Pp
.Em Remarks :
this macro is commonly abused by using quoted literals to retain
whitespace and align consecutive
.Sx \&Cd
declarations.
This practise is discouraged.
.Ss \&Cm
Command modifiers.
Typically used for fixed strings passed as arguments, unless
.Sx \&Fl
is more appropriate.
Also useful when specifying configuration options or keys.
.Pp
Examples:
.Dl ".Nm mt Fl f Ar device Cm rewind"
.Dl ".Nm ps Fl o Cm pid , Ns Cm command"
.Dl ".Nm dd Cm if= Ns Ar file1 Cm of= Ns Ar file2"
.Dl ".Cm IdentityFile Pa ~/.ssh/id_rsa"
.Dl ".Cm LogLevel Dv DEBUG"
.Ss \&D1
One-line indented display.
This is formatted by the default rules and is useful for simple indented
statements.
It is followed by a newline.
.Pp
Examples:
.Dl \&.D1 \&Fl abcdefgh
.Pp
See also
.Sx \&Bd
and
.Sx \&Dl .
.Ss \&Db
This macro is obsolete.
No replacement is needed.
It is ignored by
.Xr mandoc 1
and groff including its arguments.
It was formerly used to toggle a debugging mode.
.Ss \&Dc
Close a
.Sx \&Do
block.
Does not have any tail arguments.
.Ss \&Dd
Document date for display in the page footer.
This is the mandatory first macro of any
.Nm
manual.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Dd Ar month day , year
.Pp
The
.Ar month
is the full English month name, the
.Ar day
is an optionally zero-padded numeral, and the
.Ar year
is the full four-digit year.
.Pp
Other arguments are not portable; the
.Xr mandoc 1
utility handles them as follows:
.Bl -dash -offset 3n -compact
.It
To have the date automatically filled in by the
.Ox
version of
.Xr cvs 1 ,
the special string
.Dq $\&Mdocdate$
can be given as an argument.
.It
The traditional, purely numeric
.Xr man 7
format
.Ar year Ns \(en Ns Ar month Ns \(en Ns Ar day
is accepted, too.
.It
If a date string cannot be parsed, it is used verbatim.
.It
If no date string is given, the current date is used.
.El
.Pp
Examples:
.Dl \&.Dd $\&Mdocdate$
.Dl \&.Dd $\&Mdocdate: July 21 2007$
.Dl \&.Dd July 21, 2007
.Pp
See also
.Sx \&Dt
and
.Sx \&Os .
.Ss \&Dl
One-line indented display.
This is formatted as literal text and is useful for commands and
invocations.
It is followed by a newline.
.Pp
Examples:
.Dl \&.Dl % mandoc mdoc.7 \e(ba less
.Pp
See also
.Sx \&Ql ,
.Sx \&Bd
.Fl literal ,
and
.Sx \&D1 .
.Ss \&Do
Begin a block enclosed by double quotes.
Does not have any head arguments.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Do
April is the cruellest month
\&.Dc
\e(em T.S. Eliot
.Ed
.Pp
See also
.Sx \&Dq .
.Ss \&Dq
Encloses its arguments in
.Dq typographic
double-quotes.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Dq April is the cruellest month
\e(em T.S. Eliot
.Ed
.Pp
See also
.Sx \&Qq ,
.Sx \&Sq ,
and
.Sx \&Do .
.Ss \&Dt
Document title for display in the page header.
This is the mandatory second macro of any
.Nm
file.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Dt
.Ar TITLE
.Ar section
.Op Ar arch
.Ed
.Pp
Its arguments are as follows:
.Bl -tag -width section -offset 2n
.It Ar TITLE
The document's title (name), defaulting to
.Dq UNTITLED
if unspecified.
To achieve a uniform appearance of page header lines,
it should by convention be all caps.
.It Ar section
The manual section.
This may be one of
.Cm 1
.Pq General Commands ,
.Cm 2
.Pq System Calls ,
.Cm 3
.Pq Library Functions ,
.Cm 3p
.Pq Perl Library ,
.Cm 4
.Pq Device Drivers ,
.Cm 5
.Pq File Formats ,
.Cm 6
.Pq Games ,
.Cm 7
.Pq Miscellaneous Information ,
.Cm 8
.Pq System Manager's Manual ,
or
.Cm 9
.Pq Kernel Developer's Manual .
It should correspond to the manual's filename suffix and defaults to
the empty string if unspecified.
.It Ar arch
This specifies the machine architecture a manual page applies to,
where relevant.
For
.Ox ,
the following are valid architectures:
.Cm alpha ,
.Cm amd64 ,
.Cm armv7 ,
.Cm arm64 ,
.Cm hppa ,
.Cm i386 ,
.Cm landisk ,
.Cm loongson ,
.Cm luna88k ,
.Cm macppc ,
.Cm mips64 ,
.Cm octeon ,
.Cm sgi ,
.Cm socppc ,
and
.Cm sparc64 .
.El
.Pp
Examples:
.Dl \&.Dt FOO 1
.Dl \&.Dt FOO 9 i386
.Pp
See also
.Sx \&Dd
and
.Sx \&Os .
.Ss \&Dv
Defined variables such as preprocessor constants, constant symbols,
enumeration values, and so on.
.Pp
Examples:
.Dl \&.Dv NULL
.Dl \&.Dv BUFSIZ
.Dl \&.Dv STDOUT_FILENO
.Pp
See also
.Sx \&Er
and
.Sx \&Ev
for special-purpose constants,
.Sx \&Va
for variable symbols, and
.Sx \&Fd
for listing preprocessor variable definitions in the
.Em SYNOPSIS .
.Ss \&Dx
Format the
.Dx
version provided as an argument, or a default
value if no argument is provided.
.Pp
Examples:
.Dl \&.Dx 2.4.1
.Dl \&.Dx
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Fx ,
.Sx \&Nx ,
and
.Sx \&Ox .
.Ss \&Ec
Close a scope started by
.Sx \&Eo .
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Ec Op Ar TERM
.Pp
The
.Ar TERM
argument is used as the enclosure tail, for example, specifying \e(rq
will emulate
.Sx \&Dc .
.Ss \&Ed
End a display context started by
.Sx \&Bd .
.Ss \&Ef
End a font mode context started by
.Sx \&Bf .
.Ss \&Ek
End a keep context started by
.Sx \&Bk .
.Ss \&El
End a list context started by
.Sx \&Bl .
.Pp
See also
.Sx \&Bl
and
.Sx \&It .
.Ss \&Em
Request an italic font.
If the output device does not provide that, underline.
.Pp
This is most often used for stress emphasis (not to be confused with
importance, see
.Sx \&Sy ) .
In the rare cases where none of the semantic markup macros fit,
it can also be used for technical terms and placeholders, except
that for syntax elements,
.Sx \&Sy
and
.Sx \&Ar
are preferred, respectively.
.Pp
Examples:
.Bd -literal -compact -offset indent
Selected lines are those
\&.Em not
matching any of the specified patterns.
Some of the functions use a
\&.Em hold space
to save the pattern space for subsequent retrieval.
.Ed
.Pp
See also
.Sx \&Bf ,
.Sx \&Li ,
.Sx \&No ,
and
.Sx \&Sy .
.Ss \&En
This macro is obsolete.
Use
.Sx \&Eo
or any of the other enclosure macros.
.Pp
It encloses its argument in the delimiters specified by the last
.Sx \&Es
macro.
.Ss \&Eo
An arbitrary enclosure.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Eo Op Ar TERM
.Pp
The
.Ar TERM
argument is used as the enclosure head, for example, specifying \e(lq
will emulate
.Sx \&Do .
.Ss \&Er
Error constants for definitions of the
.Va errno
libc global variable.
This is most often used in section 2 and 3 manual pages.
.Pp
Examples:
.Dl \&.Er EPERM
.Dl \&.Er ENOENT
.Pp
See also
.Sx \&Dv
for general constants.
.Ss \&Es
This macro is obsolete.
Use
.Sx \&Eo
or any of the other enclosure macros.
.Pp
It takes two arguments, defining the delimiters to be used by subsequent
.Sx \&En
macros.
.Ss \&Ev
Environmental variables such as those specified in
.Xr environ 7 .
.Pp
Examples:
.Dl \&.Ev DISPLAY
.Dl \&.Ev PATH
.Pp
See also
.Sx \&Dv
for general constants.
.Ss \&Ex
Insert a standard sentence regarding command exit values of 0 on success
and >0 on failure.
This is most often used in section 1, 6, and 8 manual pages.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Ex Fl std Op Ar utility ...
.Pp
If
.Ar utility
is not specified, the document's name set by
.Sx \&Nm
is used.
Multiple
.Ar utility
arguments are treated as separate utilities.
.Pp
See also
.Sx \&Rv .
.Ss \&Fa
Function argument or parameter.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Fa
.Qo
.Op Ar argtype
.Op Ar argname
.Qc Ar \&...
.Ed
.Pp
Each argument may be a name and a type (recommended for the
.Em SYNOPSIS
section), a name alone (for function invocations),
or a type alone (for function prototypes).
If both a type and a name are given or if the type consists of multiple
words, all words belonging to the same function argument have to be
given in a single argument to the
.Sx \&Fa
macro.
.Pp
This macro is also used to specify the field name of a structure.
.Pp
Most often, the
.Sx \&Fa
macro is used in the
.Em SYNOPSIS
within
.Sx \&Fo
blocks when documenting multi-line function prototypes.
If invoked with multiple arguments, the arguments are separated by a
comma.
Furthermore, if the following macro is another
.Sx \&Fa ,
the last argument will also have a trailing comma.
.Pp
Examples:
.Dl \&.Fa \(dqconst char *p\(dq
.Dl \&.Fa \(dqint a\(dq \(dqint b\(dq \(dqint c\(dq
.Dl \&.Fa \(dqchar *\(dq size_t
.Pp
See also
.Sx \&Fo .
.Ss \&Fc
End a function context started by
.Sx \&Fo .
.Ss \&Fd
Preprocessor directive, in particular for listing it in the
.Em SYNOPSIS .
Historically, it was also used to document include files.
The latter usage has been deprecated in favour of
.Sx \&In .
.Pp
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Fd
.Li # Ns Ar directive
.Op Ar argument ...
.Ed
.Pp
Examples:
.Dl \&.Fd #define sa_handler __sigaction_u.__sa_handler
.Dl \&.Fd #define SIO_MAXNFDS
.Dl \&.Fd #ifdef FS_DEBUG
.Dl \&.Ft void
.Dl \&.Fn dbg_open \(dqconst char *\(dq
.Dl \&.Fd #endif
.Pp
See also
.Sx MANUAL STRUCTURE ,
.Sx \&In ,
and
.Sx \&Dv .
.Ss \&Fl
Command-line flag or option.
Used when listing arguments to command-line utilities.
Prints a fixed-width hyphen
.Sq \-
directly followed by each argument.
If no arguments are provided, a hyphen is printed followed by a space.
If the argument is a macro, a hyphen is prefixed to the subsequent macro
output.
.Pp
Examples:
.Dl ".Fl R Op Fl H | L | P"
.Dl ".Op Fl 1AaCcdFfgHhikLlmnopqRrSsTtux"
.Dl ".Fl type Cm d Fl name Pa CVS"
.Dl ".Fl Ar signal_number"
.Dl ".Fl o Fl"
.Pp
See also
.Sx \&Cm .
.Ss \&Fn
A function name.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf . Sx \&Fn
.Op Ar functype
.Ar funcname
.Op Oo Ar argtype Oc Ar argname
.Ed
.Pp
Function arguments are surrounded in parenthesis and
are delimited by commas.
If no arguments are specified, blank parenthesis are output.
In the
.Em SYNOPSIS
section, this macro starts a new output line,
and a blank line is automatically inserted between function definitions.
.Pp
Examples:
.Dl \&.Fn \(dqint funcname\(dq \(dqint arg0\(dq \(dqint arg1\(dq
.Dl \&.Fn funcname \(dqint arg0\(dq
.Dl \&.Fn funcname arg0
.Pp
.Bd -literal -offset indent -compact
\&.Ft functype
\&.Fn funcname
.Ed
.Pp
When referring to a function documented in another manual page, use
.Sx \&Xr
instead.
See also
.Sx MANUAL STRUCTURE ,
.Sx \&Fo ,
and
.Sx \&Ft .
.Ss \&Fo
Begin a function block.
This is a multi-line version of
.Sx \&Fn .
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Fo Ar funcname
.Pp
Invocations usually occur in the following context:
.Bd -ragged -offset indent
.Pf \. Sx \&Ft Ar functype
.br
.Pf \. Sx \&Fo Ar funcname
.br
.Pf \. Sx \&Fa Qq Ar argtype Ar argname
.br
\&.\.\.
.br
.Pf \. Sx \&Fc
.Ed
.Pp
A
.Sx \&Fo
scope is closed by
.Sx \&Fc .
.Pp
See also
.Sx MANUAL STRUCTURE ,
.Sx \&Fa ,
.Sx \&Fc ,
and
.Sx \&Ft .
.Ss \&Fr
This macro is obsolete.
No replacement markup is needed.
.Pp
It was used to show numerical function return values in an italic font.
.Ss \&Ft
A function type.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Ft Ar functype
.Pp
In the
.Em SYNOPSIS
section, a new output line is started after this macro.
.Pp
Examples:
.Dl \&.Ft int
.Bd -literal -offset indent -compact
\&.Ft functype
\&.Fn funcname
.Ed
.Pp
See also
.Sx MANUAL STRUCTURE ,
.Sx \&Fn ,
and
.Sx \&Fo .
.Ss \&Fx
Format the
.Fx
version provided as an argument, or a default value
if no argument is provided.
.Pp
Examples:
.Dl \&.Fx 7.1
.Dl \&.Fx
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Nx ,
and
.Sx \&Ox .
.Ss \&Hf
This macro is not implemented in
.Xr mandoc 1 .
.Pp
It was used to include the contents of a (header) file literally.
The syntax was:
.Pp
.Dl Pf . Sx \&Hf Ar filename
.Ss \&Ic
Designate an internal or interactive command.
This is similar to
.Sx \&Cm
but used for instructions rather than values.
.Pp
Examples:
.Dl \&.Ic :wq
.Dl \&.Ic hash
.Dl \&.Ic alias
.Pp
Note that using
.Sx \&Bd Fl literal
or
.Sx \&D1
is preferred for displaying code; the
.Sx \&Ic
macro is used when referring to specific instructions.
.Ss \&In
The name of an include file.
This macro is most often used in section 2, 3, and 9 manual pages.
.Pp
When invoked as the first macro on an input line in the
.Em SYNOPSIS
section, the argument is displayed in angle brackets
and preceded by
.Qq #include ,
and a blank line is inserted in front if there is a preceding
function declaration.
In other sections, it only encloses its argument in angle brackets
and causes no line break.
.Pp
Examples:
.Dl \&.In sys/types.h
.Pp
See also
.Sx MANUAL STRUCTURE .
.Ss \&It
A list item.
The syntax of this macro depends on the list type.
.Pp
Lists
of type
.Fl hang ,
.Fl ohang ,
.Fl inset ,
and
.Fl diag
have the following syntax:
.Pp
.D1 Pf \. Sx \&It Ar args
.Pp
Lists of type
.Fl bullet ,
.Fl dash ,
.Fl enum ,
.Fl hyphen
and
.Fl item
have the following syntax:
.Pp
.D1 Pf \. Sx \&It
.Pp
with subsequent lines interpreted within the scope of the
.Sx \&It
until either a closing
.Sx \&El
or another
.Sx \&It .
.Pp
The
.Fl tag
list has the following syntax:
.Pp
.D1 Pf \. Sx \&It Op Cm args
.Pp
Subsequent lines are interpreted as with
.Fl bullet
and family.
The line arguments correspond to the list's left-hand side; body
arguments correspond to the list's contents.
.Pp
The
.Fl column
list is the most complicated.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&It Ar cell Op Sx \&Ta Ar cell ...
.D1 Pf \. Sx \&It Ar cell Op <TAB> Ar cell ...
.Pp
The arguments consist of one or more lines of text and macros
representing a complete table line.
Cells within the line are delimited by the special
.Sx \&Ta
block macro or by literal tab characters.
.Pp
Using literal tabs is strongly discouraged because they are very
hard to use correctly and
.Nm
code using them is very hard to read.
In particular, a blank character is syntactically significant
before and after the literal tab character.
If a word precedes or follows the tab without an intervening blank,
that word is never interpreted as a macro call, but always output
literally.
.Pp
The tab cell delimiter may only be used within the
.Sx \&It
line itself; on following lines, only the
.Sx \&Ta
macro can be used to delimit cells, and
.Sx \&Ta
is only recognised as a macro when called by other macros,
not as the first macro on a line.
.Pp
Note that quoted strings may span tab-delimited cells on an
.Sx \&It
line.
For example,
.Pp
.Dl .It \(dqcol1 ,\& <TAB> col2 ,\(dq \&;
.Pp
will preserve the whitespace before both commas,
but not the whitespace before the semicolon.
.Pp
See also
.Sx \&Bl .
.Ss \&Lb
Specify a library.
The syntax is as follows:
.Pp
.D1 Pf \. Sx \&Lb Ar library
.Pp
The
.Ar library
parameter may be a system library, such as
.Cm libz
or
.Cm libpam ,
in which case a small library description is printed next to the linker
invocation; or a custom library, in which case the library name is
printed in quotes.
This is most commonly used in the
.Em SYNOPSIS
section as described in
.Sx MANUAL STRUCTURE .
.Pp
Examples:
.Dl \&.Lb libz
.Dl \&.Lb libmandoc
.Ss \&Li
Denotes text that should be in a
.Li literal
font mode.
Note that this is a presentation term and should not be used for
stylistically decorating technical terms.
.Pp
On terminal output devices, this is often indistinguishable from
normal text.
.Pp
See also
.Sx \&Bf ,
.Sx \&Em ,
.Sx \&No ,
and
.Sx \&Sy .
.Ss \&Lk
Format a hyperlink.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Lk Ar uri Op Ar name
.Pp
Examples:
.Dl \&.Lk http://bsd.lv \(dqThe BSD.lv Project\(dq
.Dl \&.Lk http://bsd.lv
.Pp
See also
.Sx \&Mt .
.Ss \&Lp
Synonym for
.Sx \&Pp .
.Ss \&Ms
Display a mathematical symbol.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Ms Ar symbol
.Pp
Examples:
.Dl \&.Ms sigma
.Dl \&.Ms aleph
.Ss \&Mt
Format a
.Dq mailto:
hyperlink.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Mt Ar address
.Pp
Examples:
.Dl \&.Mt discuss@@manpages.bsd.lv
.Dl \&.An Kristaps Dzonsons \&Aq \&Mt kristaps@@bsd.lv
.Ss \&Nd
A one line description of the manual's content.
This is the mandatory last macro of the
.Em NAME
section and not appropriate for other sections.
.Pp
Examples:
.Dl Pf . Sx \&Nd mdoc language reference
.Dl Pf . Sx \&Nd format and display UNIX manuals
.Pp
The
.Sx \&Nd
macro technically accepts child macros and terminates with a subsequent
.Sx \&Sh
invocation.
Do not assume this behaviour: some
.Xr whatis 1
database generators are not smart enough to parse more than the line
arguments and will display macros verbatim.
.Pp
See also
.Sx \&Nm .
.Ss \&Nm
The name of the manual page, or \(em in particular in section 1, 6,
and 8 pages \(em of an additional command or feature documented in
the manual page.
When first invoked, the
.Sx \&Nm
macro expects a single argument, the name of the manual page.
Usually, the first invocation happens in the
.Em NAME
section of the page.
The specified name will be remembered and used whenever the macro is
called again without arguments later in the page.
The
.Sx \&Nm
macro uses
.Sx Block full-implicit
semantics when invoked as the first macro on an input line in the
.Em SYNOPSIS
section; otherwise, it uses ordinary
.Sx In-line
semantics.
.Pp
Examples:
.Bd -literal -offset indent
\&.Sh SYNOPSIS
\&.Nm cat
\&.Op Fl benstuv
\&.Op Ar
.Ed
.Pp
In the
.Em SYNOPSIS
of section 2, 3 and 9 manual pages, use the
.Sx \&Fn
macro rather than
.Sx \&Nm
to mark up the name of the manual page.
.Ss \&No
Normal text.
Closes the scope of any preceding in-line macro.
When used after physical formatting macros like
.Sx \&Em
or
.Sx \&Sy ,
switches back to the standard font face and weight.
Can also be used to embed plain text strings in macro lines
using semantic annotation macros.
.Pp
Examples:
.Dl ".Em italic , Sy bold , No and roman"
.Pp
.Bd -literal -offset indent -compact
\&.Sm off
\&.Cm :C No / Ar pattern No / Ar replacement No /
\&.Sm on
.Ed
.Pp
See also
.Sx \&Em ,
.Sx \&Li ,
and
.Sx \&Sy .
.Ss \&Ns
Suppress a space between the output of the preceding macro
and the following text or macro.
Following invocation, input is interpreted as normal text
just like after an
.Sx \&No
macro.
.Pp
This has no effect when invoked at the start of a macro line.
.Pp
Examples:
.Dl ".Ar name Ns = Ns Ar value"
.Dl ".Cm :M Ns Ar pattern"
.Dl ".Fl o Ns Ar output"
.Pp
See also
.Sx \&No
and
.Sx \&Sm .
.Ss \&Nx
Format the
.Nx
version provided as an argument, or a default value if
no argument is provided.
.Pp
Examples:
.Dl \&.Nx 5.01
.Dl \&.Nx
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
and
.Sx \&Ox .
.Ss \&Oc
Close multi-line
.Sx \&Oo
context.
.Ss \&Oo
Multi-line version of
.Sx \&Op .
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Oo
\&.Op Fl flag Ns Ar value
\&.Oc
.Ed
.Ss \&Op
Optional part of a command line.
Prints the argument(s) in brackets.
This is most often used in the
.Em SYNOPSIS
section of section 1 and 8 manual pages.
.Pp
Examples:
.Dl \&.Op \&Fl a \&Ar b
.Dl \&.Op \&Ar a | b
.Pp
See also
.Sx \&Oo .
.Ss \&Os
Operating system version for display in the page footer.
This is the mandatory third macro of
any
.Nm
file.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Os Op Ar system Op Ar version
.Pp
The optional
.Ar system
parameter specifies the relevant operating system or environment.
It is suggested to leave it unspecified, in which case
.Xr mandoc 1
uses its
.Fl Ios
argument or, if that isn't specified either,
.Fa sysname
and
.Fa release
as returned by
.Xr uname 3 .
.Pp
Examples:
.Dl \&.Os
.Dl \&.Os KTH/CSC/TCS
.Dl \&.Os BSD 4.3
.Pp
See also
.Sx \&Dd
and
.Sx \&Dt .
.Ss \&Ot
This macro is obsolete.
Use
.Sx \&Ft
instead; with
.Xr mandoc 1 ,
both have the same effect.
.Pp
Historical
.Nm
packages described it as
.Dq "old function type (FORTRAN)" .
.Ss \&Ox
Format the
.Ox
version provided as an argument, or a default value
if no argument is provided.
.Pp
Examples:
.Dl \&.Ox 4.5
.Dl \&.Ox
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
and
.Sx \&Nx .
.Ss \&Pa
An absolute or relative file system path, or a file or directory name.
If an argument is not provided, the character
.Sq \(ti
is used as a default.
.Pp
Examples:
.Dl \&.Pa /usr/bin/mandoc
.Dl \&.Pa /usr/share/man/man7/mdoc.7
.Pp
See also
.Sx \&Lk .
.Ss \&Pc
Close parenthesised context opened by
.Sx \&Po .
.Ss \&Pf
Removes the space between its argument and the following macro.
Its syntax is as follows:
.Pp
.D1 .Pf Ar prefix macro arguments ...
.Pp
This is equivalent to:
.Pp
.D1 .No \e& Ns Ar prefix No \&Ns Ar macro arguments ...
.Pp
The
.Ar prefix
argument is not parsed for macro names or delimiters,
but used verbatim as if it were escaped.
.Pp
Examples:
.Dl ".Pf $ Ar variable_name"
.Dl ".Pf . Ar macro_name"
.Dl ".Pf 0x Ar hex_digits"
.Pp
See also
.Sx \&Ns
and
.Sx \&Sm .
.Ss \&Po
Multi-line version of
.Sx \&Pq .
.Ss \&Pp
Break a paragraph.
This will assert vertical space between prior and subsequent macros
and/or text.
.Pp
Paragraph breaks are not needed before or after
.Sx \&Sh
or
.Sx \&Ss
macros or before displays
.Pq Sx \&Bd
or lists
.Pq Sx \&Bl
unless the
.Fl compact
flag is given.
.Ss \&Pq
Parenthesised enclosure.
.Pp
See also
.Sx \&Po .
.Ss \&Qc
Close quoted context opened by
.Sx \&Qo .
.Ss \&Ql
In-line literal display.
This can for example be used for complete command invocations and
for multi-word code fragments when more specific markup is not
appropriate and an indented display is not desired.
While
.Xr mandoc 1
always encloses the arguments in single quotes, other formatters
usually omit the quotes on non-terminal output devices when the
arguments have three or more characters.
.Pp
See also
.Sx \&Dl
and
.Sx \&Bd
.Fl literal .
.Ss \&Qo
Multi-line version of
.Sx \&Qq .
.Ss \&Qq
Encloses its arguments in
.Qq typewriter
double-quotes.
Consider using
.Sx \&Dq .
.Pp
See also
.Sx \&Dq ,
.Sx \&Sq ,
and
.Sx \&Qo .
.Ss \&Re
Close an
.Sx \&Rs
block.
Does not have any tail arguments.
.Ss \&Rs
Begin a bibliographic
.Pq Dq reference
block.
Does not have any head arguments.
The block macro may only contain
.Sx \&%A ,
.Sx \&%B ,
.Sx \&%C ,
.Sx \&%D ,
.Sx \&%I ,
.Sx \&%J ,
.Sx \&%N ,
.Sx \&%O ,
.Sx \&%P ,
.Sx \&%Q ,
.Sx \&%R ,
.Sx \&%T ,
.Sx \&%U ,
and
.Sx \&%V
child macros (at least one must be specified).
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Rs
\&.%A J. E. Hopcroft
\&.%A J. D. Ullman
\&.%B Introduction to Automata Theory, Languages, and Computation
\&.%I Addison-Wesley
\&.%C Reading, Massachusetts
\&.%D 1979
\&.Re
.Ed
.Pp
If an
.Sx \&Rs
block is used within a SEE ALSO section, a vertical space is asserted
before the rendered output, else the block continues on the current
line.
.Ss \&Rv
Insert a standard sentence regarding a function call's return value of 0
on success and \-1 on error, with the
.Va errno
libc global variable set on error.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Rv Fl std Op Ar function ...
.Pp
If
.Ar function
is not specified, the document's name set by
.Sx \&Nm
is used.
Multiple
.Ar function
arguments are treated as separate functions.
.Pp
See also
.Sx \&Ex .
.Ss \&Sc
Close single-quoted context opened by
.Sx \&So .
.Ss \&Sh
Begin a new section.
For a list of conventional manual sections, see
.Sx MANUAL STRUCTURE .
These sections should be used unless it's absolutely necessary that
custom sections be used.
.Pp
Section names should be unique so that they may be keyed by
.Sx \&Sx .
Although this macro is parsed, it should not consist of child node or it
may not be linked with
.Sx \&Sx .
.Pp
See also
.Sx \&Pp ,
.Sx \&Ss ,
and
.Sx \&Sx .
.Ss \&Sm
Switches the spacing mode for output generated from macros.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Sm Op Cm on | off
.Pp
By default, spacing is
.Cm on .
When switched
.Cm off ,
no white space is inserted between macro arguments and between the
output generated from adjacent macros, but text lines
still get normal spacing between words and sentences.
.Pp
When called without an argument, the
.Sx \&Sm
macro toggles the spacing mode.
Using this is not recommended because it makes the code harder to read.
.Ss \&So
Multi-line version of
.Sx \&Sq .
.Ss \&Sq
Encloses its arguments in
.Sq typewriter
single-quotes.
.Pp
See also
.Sx \&Dq ,
.Sx \&Qq ,
and
.Sx \&So .
.Ss \&Ss
Begin a new subsection.
Unlike with
.Sx \&Sh ,
there is no convention for the naming of subsections.
Except
.Em DESCRIPTION ,
the conventional sections described in
.Sx MANUAL STRUCTURE
rarely have subsections.
.Pp
Sub-section names should be unique so that they may be keyed by
.Sx \&Sx .
Although this macro is parsed, it should not consist of child node or it
may not be linked with
.Sx \&Sx .
.Pp
See also
.Sx \&Pp ,
.Sx \&Sh ,
and
.Sx \&Sx .
.Ss \&St
Replace an abbreviation for a standard with the full form.
The following standards are recognised.
Where multiple lines are given without a blank line in between,
they all refer to the same standard, and using the first form
is recommended.
.Bl -tag -width 1n
.It C language standards
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-ansiC
.St -ansiC
.It \-ansiC-89
.St -ansiC-89
.It \-isoC
.St -isoC
.It \-isoC-90
.St -isoC-90
.br
The original C standard.
.Pp
.It \-isoC-amd1
.St -isoC-amd1
.Pp
.It \-isoC-tcor1
.St -isoC-tcor1
.Pp
.It \-isoC-tcor2
.St -isoC-tcor2
.Pp
.It \-isoC-99
.St -isoC-99
.br
The second major version of the C language standard.
.Pp
.It \-isoC-2011
.St -isoC-2011
.br
The third major version of the C language standard.
.El
.It POSIX.1 before the Single UNIX Specification
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-p1003.1-88
.St -p1003.1-88
.It \-p1003.1
.St -p1003.1
.br
The original POSIX standard, based on ANSI C.
.Pp
.It \-p1003.1-90
.St -p1003.1-90
.It \-iso9945-1-90
.St -iso9945-1-90
.br
The first update of POSIX.1.
.Pp
.It \-p1003.1b-93
.St -p1003.1b-93
.It \-p1003.1b
.St -p1003.1b
.br
Real-time extensions.
.Pp
.It \-p1003.1c-95
.St -p1003.1c-95
.br
POSIX thread interfaces.
.Pp
.It \-p1003.1i-95
.St -p1003.1i-95
.br
Technical Corrigendum.
.Pp
.It \-p1003.1-96
.St -p1003.1-96
.It \-iso9945-1-96
.St -iso9945-1-96
.br
Includes POSIX.1-1990, 1b, 1c, and 1i.
.El
.It X/Open Portability Guide version 4 and related standards
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-xpg3
.St -xpg3
.br
An XPG4 precursor, published in 1989.
.Pp
.It \-p1003.2
.St -p1003.2
.It \-p1003.2-92
.St -p1003.2-92
.It \-iso9945-2-93
.St -iso9945-2-93
.br
An XCU4 precursor.
.Pp
.It \-p1003.2a-92
.St -p1003.2a-92
.br
Updates to POSIX.2.
.Pp
.It \-xpg4
.St -xpg4
.br
Based on POSIX.1 and POSIX.2, published in 1992.
.El
.It Single UNIX Specification version 1 and related standards
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-susv1
.St -susv1
.It \-xpg4.2
.St -xpg4.2
.br
This standard was published in 1994.
It was used as the basis for UNIX 95 certification.
The following three refer to parts of it.
.Pp
.It \-xsh4.2
.St -xsh4.2
.Pp
.It \-xcurses4.2
.St -xcurses4.2
.Pp
.It \-p1003.1g-2000
.St -p1003.1g-2000
.br
Networking APIs, including sockets.
.Pp
.It \-svid4
.St -svid4 ,
.br
Published in 1995.
.El
.It Single UNIX Specification version 2 and related standards
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-susv2
.St -susv2
This Standard was published in 1997
and is also called X/Open Portability Guide version 5.
It was used as the basis for UNIX 98 certification.
The following refer to parts of it.
.Pp
.It \-xbd5
.St -xbd5
.Pp
.It \-xsh5
.St -xsh5
.Pp
.It \-xcu5
.St -xcu5
.Pp
.It \-xns5
.St -xns5
.It \-xns5.2
.St -xns5.2
.El
.It Single UNIX Specification version 3
.Pp
.Bl -tag -width "-p1003.1-2001" -compact
.It \-p1003.1-2001
.St -p1003.1-2001
.It \-susv3
.St -susv3
.br
This standard is based on C99, SUSv2, POSIX.1-1996, 1d, and 1j.
It is also called X/Open Portability Guide version 6.
It is used as the basis for UNIX 03 certification.
.Pp
.It \-p1003.1-2004
.St -p1003.1-2004
.br
The second and last Technical Corrigendum.
.El
.It Single UNIX Specification version 4
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-p1003.1-2008
.St -p1003.1-2008
.It \-susv4
.St -susv4
.br
This standard is also called
X/Open Portability Guide version 7.
.Pp
.It \-p1003.1-2013
.St -p1003.1-2013
.br
This is the first Technical Corrigendum.
.El
.It Other standards
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-ieee754
.St -ieee754
.br
Floating-point arithmetic.
.Pp
.It \-iso8601
.St -iso8601
.br
Representation of dates and times, published in 1988.
.Pp
.It \-iso8802-3
.St -iso8802-3
.br
Ethernet local area networks.
.Pp
.It \-ieee1275-94
.St -ieee1275-94
.El
.El
.Ss \&Sx
Reference a section or subsection in the same manual page.
The referenced section or subsection name must be identical to the
enclosed argument, including whitespace.
.Pp
Examples:
.Dl \&.Sx MANUAL STRUCTURE
.Pp
See also
.Sx \&Sh
and
.Sx \&Ss .
.Ss \&Sy
Request a boldface font.
.Pp
This is most often used to indicate importance or seriousness (not to be
confused with stress emphasis, see
.Sx \&Em ) .
When none of the semantic macros fit, it is also adequate for syntax
elements that have to be given or that appear verbatim.
.Pp
Examples:
.Bd -literal -compact -offset indent
\&.Sy Warning :
If
\&.Sy s
appears in the owner permissions, set-user-ID mode is set.
This utility replaces the former
\&.Sy dumpdir
program.
.Ed
.Pp
See also
.Sx \&Bf ,
.Sx \&Em ,
.Sx \&Li ,
and
.Sx \&No .
.Ss \&Ta
Table cell separator in
.Sx \&Bl Fl column
lists; can only be used below
.Sx \&It .
.Ss \&Tn
Supported only for compatibility, do not use this in new manuals.
Even though the macro name
.Pq Dq tradename
suggests a semantic function, historic usage is inconsistent, mostly
using it as a presentation-level macro to request a small caps font.
.Ss \&Ud
Supported only for compatibility, do not use this in new manuals.
Prints out
.Dq currently under development.
.Ss \&Ux
Supported only for compatibility, do not use this in new manuals.
Prints out
.Dq Ux .
.Ss \&Va
A variable name.
.Pp
Examples:
.Dl \&.Va foo
.Dl \&.Va const char *bar ;
.Pp
For function arguments and parameters, use
.Sx \&Fa
instead.
For declarations of global variables in the
.Em SYNOPSIS
section, use
.Sx \&Vt .
.Ss \&Vt
A variable type.
.Pp
This is also used for indicating global variables in the
.Em SYNOPSIS
section, in which case a variable name is also specified.
Note that it accepts
.Sx Block partial-implicit
syntax when invoked as the first macro on an input line in the
.Em SYNOPSIS
section, else it accepts ordinary
.Sx In-line
syntax.
In the former case, this macro starts a new output line,
and a blank line is inserted in front if there is a preceding
function definition or include directive.
.Pp
Examples:
.Dl \&.Vt unsigned char
.Dl \&.Vt extern const char * const sys_signame[] \&;
.Pp
For parameters in function prototypes, use
.Sx \&Fa
instead, for function return types
.Sx \&Ft ,
and for variable names outside the
.Em SYNOPSIS
section
.Sx \&Va ,
even when including a type with the name.
See also
.Sx MANUAL STRUCTURE .
.Ss \&Xc
Close a scope opened by
.Sx \&Xo .
.Ss \&Xo
Extend the header of an
.Sx \&It
macro or the body of a partial-implicit block macro
beyond the end of the input line.
This macro originally existed to work around the 9-argument limit
of historic
.Xr roff 7 .
.Ss \&Xr
Link to another manual
.Pq Qq cross-reference .
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Xr Ar name section
.Pp
Cross reference the
.Ar name
and
.Ar section
number of another man page.
.Pp
Examples:
.Dl \&.Xr mandoc 1
.Dl \&.Xr mandoc 1 \&;
.Dl \&.Xr mandoc 1 \&Ns s behaviour
.Ss \&sp
Emits vertical space.
This macro should not be used; it is implemented for compatibility with
historical manuals.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&sp Op Ar height
.Pp
The
.Ar height
argument is a scaling width as described in
.Xr roff 7 .
If unspecified,
.Sx \&sp
asserts a single vertical space.
.Sh MACRO SYNTAX
The syntax of a macro depends on its classification.
In this section,
.Sq \-arg
refers to macro arguments, which may be followed by zero or more
.Sq parm
parameters;
.Sq \&Yo
opens the scope of a macro; and if specified,
.Sq \&Yc
closes it out.
.Pp
The
.Em Callable
column indicates that the macro may also be called by passing its name
as an argument to another macro.
For example,
.Sq \&.Op \&Fl O \&Ar file
produces
.Sq Op Fl O Ar file .
To prevent a macro call and render the macro name literally,
escape it by prepending a zero-width space,
.Sq \e& .
For example,
.Sq \&Op \e&Fl O
produces
.Sq Op \&Fl O .
If a macro is not callable but its name appears as an argument
to another macro, it is interpreted as opaque text.
For example,
.Sq \&.Fl \&Sh
produces
.Sq Fl \&Sh .
.Pp
The
.Em Parsed
column indicates whether the macro may call other macros by receiving
their names as arguments.
If a macro is not parsed but the name of another macro appears
as an argument, it is interpreted as opaque text.
.Pp
The
.Em Scope
column, if applicable, describes closure rules.
.Ss Block full-explicit
Multi-line scope closed by an explicit closing macro.
All macros contains bodies; only
.Sx \&Bf
and
.Pq optionally
.Sx \&Bl
contain a head.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB
\(lBbody...\(rB
\&.Yc
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&Bd  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ed
.It Sx \&Bf  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ef
.It Sx \&Bk  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ek
.It Sx \&Bl  Ta    \&No     Ta    \&No     Ta    closed by Sx \&El
.It Sx \&Ed  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bd
.It Sx \&Ef  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bf
.It Sx \&Ek  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bk
.It Sx \&El  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bl
.El
.Ss Block full-implicit
Multi-line scope closed by end-of-file or implicitly by another macro.
All macros have bodies; some
.Po
.Sx \&It Fl bullet ,
.Fl hyphen ,
.Fl dash ,
.Fl enum ,
.Fl item
.Pc
don't have heads; only one
.Po
.Sx \&It
in
.Sx \&Bl Fl column
.Pc
has multiple heads.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead... \(lBTa head...\(rB\(rB
\(lBbody...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXXXXXXXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&It Ta \&No Ta Yes  Ta closed by Sx \&It , Sx \&El
.It Sx \&Nd Ta \&No Ta \&No Ta closed by Sx \&Sh
.It Sx \&Nm Ta \&No Ta Yes  Ta closed by Sx \&Nm , Sx \&Sh , Sx \&Ss
.It Sx \&Sh Ta \&No Ta Yes  Ta closed by Sx \&Sh
.It Sx \&Ss Ta \&No Ta Yes  Ta closed by Sx \&Sh , Sx \&Ss
.El
.Pp
Note that the
.Sx \&Nm
macro is a
.Sx Block full-implicit
macro only when invoked as the first macro
in a
.Em SYNOPSIS
section line, else it is
.Sx In-line .
.Ss Block partial-explicit
Like block full-explicit, but also with single-line scope.
Each has at least a body and, in limited circumstances, a head
.Po
.Sx \&Fo ,
.Sx \&Eo
.Pc
and/or tail
.Pq Sx \&Ec .
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB
\(lBbody...\(rB
\&.Yc \(lBtail...\(rB

\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB \
\(lBbody...\(rB \&Yc \(lBtail...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&Ac  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Ao
.It Sx \&Ao  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Ac
.It Sx \&Bc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Bo
.It Sx \&Bo  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Bc
.It Sx \&Brc Ta    Yes      Ta    Yes      Ta    opened by Sx \&Bro
.It Sx \&Bro Ta    Yes      Ta    Yes      Ta    closed by Sx \&Brc
.It Sx \&Dc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Do
.It Sx \&Do  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Dc
.It Sx \&Ec  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Eo
.It Sx \&Eo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Ec
.It Sx \&Fc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Fo
.It Sx \&Fo  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Fc
.It Sx \&Oc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Oo
.It Sx \&Oo  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Oc
.It Sx \&Pc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Po
.It Sx \&Po  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Pc
.It Sx \&Qc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Oo
.It Sx \&Qo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Oc
.It Sx \&Re  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Rs
.It Sx \&Rs  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Re
.It Sx \&Sc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&So
.It Sx \&So  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Sc
.It Sx \&Xc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Xo
.It Sx \&Xo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Xc
.El
.Ss Block partial-implicit
Like block full-implicit, but with single-line scope closed by the
end of the line.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBbody...\(rB \(lBres...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed
.It Sx \&Aq  Ta    Yes      Ta    Yes
.It Sx \&Bq  Ta    Yes      Ta    Yes
.It Sx \&Brq Ta    Yes      Ta    Yes
.It Sx \&D1  Ta    \&No     Ta    \&Yes
.It Sx \&Dl  Ta    \&No     Ta    Yes
.It Sx \&Dq  Ta    Yes      Ta    Yes
.It Sx \&En  Ta    Yes      Ta    Yes
.It Sx \&Op  Ta    Yes      Ta    Yes
.It Sx \&Pq  Ta    Yes      Ta    Yes
.It Sx \&Ql  Ta    Yes      Ta    Yes
.It Sx \&Qq  Ta    Yes      Ta    Yes
.It Sx \&Sq  Ta    Yes      Ta    Yes
.It Sx \&Vt  Ta    Yes      Ta    Yes
.El
.Pp
Note that the
.Sx \&Vt
macro is a
.Sx Block partial-implicit
only when invoked as the first macro
in a
.Em SYNOPSIS
section line, else it is
.Sx In-line .
.Ss Special block macro
The
.Sx \&Ta
macro can only be used below
.Sx \&It
in
.Sx \&Bl Fl column
lists.
It delimits blocks representing table cells;
these blocks have bodies, but no heads.
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&Ta  Ta    Yes      Ta    Yes    Ta closed by Sx \&Ta , Sx \&It
.El
.Ss In-line
Closed by the end of the line, fixed argument lengths,
and/or subsequent macros.
In-line macros have only text children.
If a number (or inequality) of arguments is
.Pq n ,
then the macro accepts an arbitrary number of arguments.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB \(lBres...\(rB

\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB Yc...

\&.Yo \(lB\-arg \(lBval...\(rB\(rB arg0 arg1 argN
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "Arguments" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Arguments
.It Sx \&%A  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%B  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%C  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%D  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%I  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%J  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%N  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%O  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%P  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%Q  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%R  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%T  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%U  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%V  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&Ad  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&An  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ap  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Ar  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&At  Ta    Yes      Ta    Yes      Ta    1
.It Sx \&Bsx Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Bt  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Bx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Cd  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Cm  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Db  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&Dd  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Dt  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Dv  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Dx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Em  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Er  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Es  Ta    Yes      Ta    Yes      Ta    2
.It Sx \&Ev  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ex  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Fa  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Fd  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&Fl  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Fn  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Fr  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ft  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Fx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Hf  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ic  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&In  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&Lb  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&Li  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Lk  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Lp  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Ms  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Mt  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Nm  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&No  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Ns  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Nx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Os  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ot  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ox  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Pa  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Pf  Ta    Yes      Ta    Yes      Ta    1
.It Sx \&Pp  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Rv  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Sm  Ta    \&No     Ta    \&No     Ta    <2
.It Sx \&St  Ta    \&No     Ta    Yes      Ta    1
.It Sx \&Sx  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Sy  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Tn  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ud  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Ux  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Va  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Vt  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Xr  Ta    Yes      Ta    Yes      Ta    2
.It Sx \&sp  Ta    \&No     Ta    \&No     Ta    1
.El
.Ss Delimiters
When a macro argument consists of one single input character
considered as a delimiter, the argument gets special handling.
This does not apply when delimiters appear in arguments containing
more than one character.
Consequently, to prevent special handling and just handle it
like any other argument, a delimiter can be escaped by prepending
a zero-width space
.Pq Sq \e& .
In text lines, delimiters never need escaping, but may be used
as normal punctuation.
.Pp
For many macros, when the leading arguments are opening delimiters,
these delimiters are put before the macro scope,
and when the trailing arguments are closing delimiters,
these delimiters are put after the macro scope.
Spacing is suppressed after opening delimiters
and before closing delimiters.
For example,
.Pp
.D1 Pf \. \&Aq "( [ word ] ) ."
.Pp
renders as:
.Pp
.D1 Aq ( [ word ] ) .
.Pp
Opening delimiters are:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&(
left parenthesis
.It \&[
left bracket
.El
.Pp
Closing delimiters are:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&.
period
.It \&,
comma
.It \&:
colon
.It \&;
semicolon
.It \&)
right parenthesis
.It \&]
right bracket
.It \&?
question mark
.It \&!
exclamation mark
.El
.Pp
Note that even a period preceded by a backslash
.Pq Sq \e.\&
gets this special handling; use
.Sq \e&.
to prevent that.
.Pp
Many in-line macros interrupt their scope when they encounter
delimiters, and resume their scope when more arguments follow that
are not delimiters.
For example,
.Pp
.D1 Pf \. \&Fl "a ( b | c \e*(Ba d ) e"
.Pp
renders as:
.Pp
.D1 Fl a ( b | c \*(Ba d ) e
.Pp
This applies to both opening and closing delimiters,
and also to the middle delimiter, which does not suppress spacing:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&|
vertical bar
.El
.Pp
As a special case, the predefined string \e*(Ba is handled and rendered
in the same way as a plain
.Sq \&|
character.
Using this predefined string is not recommended in new manuals.
.Ss Font handling
In
.Nm
documents, usage of semantic markup is recommended in order to have
proper fonts automatically selected; only when no fitting semantic markup
is available, consider falling back to
.Sx Physical markup
macros.
Whenever any
.Nm
macro switches the
.Xr roff 7
font mode, it will automatically restore the previous font when exiting
its scope.
Manually switching the font using the
.Xr roff 7
.Ql \ef
font escape sequences is never required.
.Sh COMPATIBILITY
This section provides an incomplete list of compatibility issues
between mandoc and GNU troff
.Pq Qq groff .
.Pp
The following problematic behaviour is found in groff:
.Pp
.Bl -dash -compact
.It
.Sx \&Dd
with non-standard arguments behaves very strangely.
When there are three arguments, they are printed verbatim.
Any other number of arguments is replaced by the current date,
but without any arguments the string
.Dq Epoch
is printed.
.It
.Sx \&Lk
only accepts a single link-name argument; the remainder is misformatted.
.It
.Sx \&Pa
does not format its arguments when used in the FILES section under
certain list types.
.It
.Sx \&Ta
can only be called by other macros, but not at the beginning of a line.
.It
.Sx \&%C
is not implemented (up to and including groff-1.22.2).
.It
.Sq \ef
.Pq font face
and
.Sq \eF
.Pq font family face
.Sx Text Decoration
escapes behave irregularly when specified within line-macro scopes.
.It
Negative scaling units return to prior lines.
Instead, mandoc truncates them to zero.
.El
.Pp
The following features are unimplemented in mandoc:
.Pp
.Bl -dash -compact
.It
.Sx \&Bd
.Fl file Ar file
is unsupported for security reasons.
.It
.Sx \&Bd
.Fl filled
does not adjust the right margin, but is an alias for
.Sx \&Bd
.Fl ragged .
.It
.Sx \&Bd
.Fl literal
does not use a literal font, but is an alias for
.Sx \&Bd
.Fl unfilled .
.It
.Sx \&Bd
.Fl offset Cm center
and
.Fl offset Cm right
don't work.
Groff does not implement centered and flush-right rendering either,
but produces large indentations.
.El
.Sh SEE ALSO
.Xr man 1 ,
.Xr mandoc 1 ,
.Xr eqn 7 ,
.Xr man 7 ,
.Xr mandoc_char 7 ,
.Xr roff 7 ,
.Xr tbl 7
.Pp
The web page
.Lk http://mdocml.bsd.lv/mdoc/ "extended documentation for the mdoc language"
provides a few tutorial-style pages for beginners, an extensive style
guide for advanced authors, and an alphabetic index helping to choose
the best macros for various kinds of content.
.Sh HISTORY
The
.Nm
language first appeared as a troff macro package in
.Bx 4.4 .
It was later significantly updated by Werner Lemberg and Ruslan Ermilov
in groff-1.17.
The standalone implementation that is part of the
.Xr mandoc 1
utility written by Kristaps Dzonsons appeared in
.Ox 4.6 .
.Sh AUTHORS
The
.Nm
reference was written by
.An Kristaps Dzonsons Aq Mt kristaps@@bsd.lv .
@


1.150
log
@Surprisingly, groff does not support scaling units in .Bl -column
column width specifiers, so stop supporting them, too.
As a side effect, this fixes an assertion failure that tb@@ found
with afl(1), triggered by: .Bl -column -4n
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.149 2017/02/05 22:30:16 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: February 5 2017 $
a478 1
.It Sx \&br Ta force output line break in text mode (no arguments)
a2750 8
.Ss \&br
Emits a line-break.
This macro should not be used; it is implemented for compatibility with
historical manuals.
.Pp
Consider using
.Sx \&Pp
in the event of natural paragraph breaks.
a3049 1
.It Sx \&br  Ta    \&No     Ta    \&No     Ta    0
@


1.149
log
@document output spacing near delimiters
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.148 2017/01/25 03:48:46 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 25 2017 $
d977 2
a978 4
argument has no effect; instead, each argument specifies the width
of one column, using either the scaling width syntax described in
.Xr roff 7
or the string length of the argument.
@


1.148
log
@add "arm64" as a valid .Dt arch argument;
inspired by deraadt@@'s commit to usr.bin/mandoc/cgi.c
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.147 2017/01/09 14:10:18 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 9 2017 $
d3080 2
d3138 1
a3138 1
and also to the middle delimiter:
@


1.147
log
@Clarify how tabs after .It work
because this is a really nasty trap for the unwary.

Triggered by a question from Abhinav Upadhyay <er dot abhinav dot
upadhyay at gmail dot com> (NetBSD) on discuss@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.146 2016/12/28 17:21:17 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: December 28 2016 $
d1355 1
@


1.146
log
@Make the second, section number argument of .Xr mandatory.
In fact, we have been requiring it for many years.
The only reason to not warn when it was missing
was excessive traditionalism - it was optional in 4.4BSD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.145 2016/10/11 17:30:28 schwarze Exp $
d4 1
a4 1
.\" Copyright (c) 2010, 2011, 2013 Ingo Schwarze <schwarze@@openbsd.org>
d18 1
a18 1
.Dd $Mdocdate: October 11 2016 $
d1846 1
a1847 1
.D1 Pf \. Sx \&It Ar cell Op Sx \&Ta Ar cell ...
d1851 1
a1851 1
Cells within the line are delimited by tabs or by the special
d1853 12
a1864 1
block macro.
d1879 1
a1879 1
.Dl .It \(dqcol1 ; <TAB> col2 ;\(dq \&;
d1881 2
a1882 1
will preserve the semicolon whitespace except for the last.
@


1.145
log
@link to http://mdocml.bsd.lv/mdoc/ below SEE ALSO;
tweak and OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.144 2016/09/03 13:37:41 guenther Exp $
d18 1
a18 1
.Dd $Mdocdate: September 3 2016 $
d2729 1
a2729 1
.D1 Pf \. Sx \&Xr Ar name Op section
d2735 1
a2735 2
number of another man page;
omitting the section number is rarely useful.
d3047 1
a3047 1
.It Sx \&Xr  Ta    Yes      Ta    Yes      Ta    >0
@


1.144
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.143 2016/09/01 10:59:15 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: September 1 2016 $
d3232 6
@


1.143
log
@no more sparc;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.142 2016/08/10 17:37:01 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: August 10 2016 $
a1364 1
.Cm sparc64 ,
d1366 1
a1366 1
.Cm zaurus .
@


1.142
log
@no more armish;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.141 2016/05/11 21:52:49 deraadt Exp $
d18 1
a18 1
.Dd $Mdocdate: May 11 2016 $
a1364 1
.Cm sparc ,
@


1.141
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.140 2016/03/10 08:58:59 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: March 10 2016 $
a1353 1
.Cm armish ,
@


1.140
log
@un-vax;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.139 2015/12/01 22:27:28 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: December 1 2015 $
a1356 1
.Cm hppa64 ,
@


1.139
log
@sync and update the list of supported archs;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.138 2015/11/01 21:30:58 guenther Exp $
d18 1
a18 1
.Dd $Mdocdate: November 1 2015 $
a1368 1
.Cm vax ,
@


1.138
log
@Specify option ordering in the DESCRIPTION section

ok and tweaks jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.137 2015/10/11 18:56:08 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: October 11 2015 $
a1355 1
.Cm aviion ,
a1358 1
.Cm ia64 ,
a1366 1
.Cm solbourne ,
@


1.137
log
@Mention that the first argument of .Pf does not need escaping.
While here, make the first sentence regarding .Pf more concise.
OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.136 2015/09/23 09:23:49 sobrado Exp $
d18 1
a18 1
.Dd $Mdocdate: September 23 2015 $
d306 5
@


1.136
log
@typos.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.135 2015/09/14 20:06:59 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: September 14 2015 $
d2178 1
a2178 3
Removes the space between its argument
.Pq Dq prefix
and the following macro.
d2185 6
a2190 1
.D1 .No Ar prefix No \&Ns Ar macro arguments ...
d2194 1
@


1.135
log
@Avoid .Ns right after .Pf, it's pointless.
In some cases, do additional cleanup in the immediate vicinity.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.134 2015/03/13 19:58:41 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: March 13 2015 $
d2290 1
a2290 1
\&.%C Reading, Massachusettes
@


1.134
log
@remove the first comma from constructs like ", and," and ", or,": you can use
"and" and "or" to join sentence clauses, and you can use commas, but both hinders
reading;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.133 2015/02/23 13:30:02 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: February 23 2015 $
d1645 1
a1645 1
.Pf \. Ns Sx \&Fn
@


1.133
log
@improve NAME section diagnostics;
confusing messages reported by Jan Stary <hans at stare dot cz>
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.132 2015/02/15 17:57:26 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: February 15 2015 $
d2116 1
a2116 1
argument, or, if that isn't specified either,
@


1.132
log
@Tweak the wording to avoid the possible misunderstanding that .In
could only be used in the SYNOPSIS section.  It is fine anywhere.
Issue noticed by bentley@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.131 2015/01/29 00:33:14 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 29 2015 $
d1953 3
a1955 5
This may only be invoked in the
.Em SYNOPSIS
section subsequent the
.Sx \&Nm
macro.
@


1.131
log
@Radical cleanup of COMPATIBILITY sections:
Remove lots of lies, dozens of irrelevant implementation details,
and all references to groff versions older than 1.17.  Move relevant
information to the pages where it belongs, and out of mandoc(1) in
particular.  Add some missing general remarks to roff(7), where it
fits the character and purpose of the page much better.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.130 2015/01/20 18:54:33 tedu Exp $
d18 1
a18 1
.Dd $Mdocdate: January 20 2015 $
d1781 3
a1783 3
An
.Dq include
file.
d1788 1
a1788 1
.Dq #include ,
d1791 2
a1792 1
This is most often used in section 2, 3, and 9 manual pages.
@


1.130
log
@change spelling of centre to center. consistent with other man pages,
the name of the macro being described, and look(1).
ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.129 2015/01/03 00:56:54 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 3 2015 $
d3156 1
a3156 2
between mandoc and other troff implementations, at this time limited
to GNU troff
a3157 9
The term
.Qq historic groff
refers to groff versions before 1.17,
which featured a significant update of the
.Pa doc.tmac
file.
.Pp
Heirloom troff, the other significant troff implementation accepting
\-mdoc, is similar to historic groff.
a3159 1
.ds hist (Historic groff only.)
a3162 26
Display macros
.Po
.Sx \&Bd ,
.Sx \&Dl ,
and
.Sx \&D1
.Pc
may not be nested.
\*[hist]
.It
.Sx \&At
with unknown arguments produces no output at all.
\*[hist]
Newer groff and mandoc print
.Qq AT&T UNIX
and the arguments.
.It
.Sx \&Bl Fl column
does not recognise trailing punctuation characters when they immediately
precede tabulator characters, but treats them as normal text and
outputs a space before them.
.It
.Sx \&Bd Fl ragged compact
does not start a new line.
\*[hist]
.It
a3170 47
.Sx \&Fl
does not print a dash for an empty argument.
\*[hist]
.It
.Sx \&Fn
does not start a new line unless invoked as the line macro in the
.Em SYNOPSIS
section.
\*[hist]
.It
.Sx \&Fo
with
.Pf non- Sx \&Fa
children causes inconsistent spacing between arguments.
In mandoc, a single space is always inserted between arguments.
.It
.Sx \&Ft
in the
.Em SYNOPSIS
causes inconsistent vertical spacing, depending on whether a prior
.Sx \&Fn
has been invoked.
See
.Sx \&Ft
and
.Sx \&Fn
for the normalised behaviour in mandoc.
.It
.Sx \&In
ignores additional arguments and is not treated specially in the
.Em SYNOPSIS .
\*[hist]
.It
.Sx \&It
sometimes requires a
.Fl nested
flag.
\*[hist]
In new groff and mandoc, any list may be nested by default and
.Fl enum
lists will restart the sequence only for the sub-list.
.It
.Sx \&Li
followed by a delimiter is incorrectly used in some manuals
instead of properly quoting that character, which sometimes works with
historic groff.
.It
a3183 13
Historic groff only allows up to eight or nine arguments per macro input
line, depending on the exact situation.
Providing more arguments causes garbled output.
The number of arguments on one input line is not limited with mandoc.
.It
Historic groff has many un-callable macros.
Most of these (excluding some block-level macros) are callable
in new groff and mandoc.
.It
.Sq \(ba
(vertical bar) is not fully supported as a delimiter.
\*[hist]
.It
d3201 14
a3214 1
.Fl file Ar file .
d3219 2
a3220 1
.Fl offset Cm right .
@


1.129
log
@Given the excessively technical description in the old mdoc_samples(7)
manual and its successor groff_mdoc(7), i always considered .Ql as
purely physical markup, but it turns out describing it better allows
to give it a semantic meaning (in-line literal display) that doesn't
contradict existing usage.  One less physical, one more semantic
macro, yay!

Found in a discussion with Steffen Nurpmeso <sdaoden at yandex dot com>.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.128 2014/12/31 20:41:53 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: December 31 2014 $
d780 1
a780 1
Produce one output line from each input line, and centre-justify each line.
d825 1
a825 1
which aligns around an imagined centre axis.
d3304 1
a3304 1
Groff does not implement centred and flush-right rendering either,
@


1.128
log
@describe .Ql more precisely;
defect pointed out by Steffen Nurpmeso <sdaoden at yandex dot com>
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.127 2014/12/28 15:22:42 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: December 28 2014 $
d457 1
a531 1
.It Sx \&Ql Ta single-quoted literal text: Ql text
d1259 1
d1261 1
d2226 5
a2230 2
Request a literal font and enclose in single quotes.
For arguments of three or more characters, formatters other than
d2232 4
a2235 1
usually omit the quotes on non-terminal output devices.
d2237 1
a2237 1
.Sx \&Li
d2239 2
a2240 1
.Sx \&Sq .
@


1.127
log
@Improve documentation of the header/footer macros .Dt, .Os, .TH:
* State the defaults for .Os and the fourth .TH argument.
* Sync the section titles, and stop advertising obscure sections that
aren't actually fully supported and certainly not recommended for use.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.126 2014/11/30 21:54:53 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: November 30 2014 $
d2224 4
a2227 1
Format a single-quoted literal.
d2229 1
a2229 1
.Sx \&Qq
@


1.126
log
@delete three standard abbreviations that are
* no longer used in our tree
* not used in any of NetBSD, FreeBSD, or DragonFly
* not supported by groff
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.125 2014/11/28 18:35:37 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: November 28 2014 $
d1317 1
a1317 1
.Pq utilities ,
d1319 1
a1319 1
.Pq system calls ,
d1321 1
a1321 1
.Pq libraries ,
d1323 1
a1323 1
.Pq Perl libraries ,
d1325 1
a1325 1
.Pq devices ,
d1327 1
a1327 1
.Pq file formats ,
d1329 1
a1329 1
.Pq games ,
d1331 1
a1331 1
.Pq miscellaneous ,
d1333 2
a1334 1
.Pq system utilities ,
d1336 1
a1336 14
.Pq kernel functions ,
.Cm X11
.Pq X Window System ,
.Cm X11R6
.Pq X Window System ,
.Cm unass
.Pq unassociated ,
.Cm local
.Pq local system ,
.Cm draft
.Pq draft manual ,
or
.Cm paper
.Pq paper .
d2111 10
a2120 2
Left unspecified, it defaults to the local operating system version.
This is the suggested form.
@


1.125
log
@Retire support for CSRG supplementary document titles.  These are
long obsolete and were never written in mdoc(7) in the first place.
Removes 100 lines from source files.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.124 2014/11/27 16:20:27 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: November 27 2014 $
a2418 2
.It \-ansiC-99
.St -ansiC-99
a2517 3
.It \-xpg4.3
.St -xpg4.3
.Pp
d2547 1
a2547 7
.It Single UNIX Specification version 3 and related standards
.Pp
.Bl -tag -width "-p1003.1g-2000X" -compact
.It \-p1003.1d-99
.St -p1003.1d-99
.br
Additional real-time extensions.
d2549 1
@


1.124
log
@Fix the obsolete .Db (toggle debug mode) macro to ignore its arguments
and not trigger an assertion when there is more than one argument;
the latter found by jsg@@ with afl.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.123 2014/11/16 20:45:27 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: November 16 2014 $
d436 1
a436 1
.It Sx \&Dt Ta document title: Ar TITLE section Op Ar volume | arch
d1302 1
a1302 1
.Op Ar volume | arch
a1350 29
.It Ar volume
This overrides the volume inferred from
.Ar section .
This field is optional, and if specified, must be one of
.Cm USD
.Pq users' supplementary documents ,
.Cm PS1
.Pq programmers' supplementary documents ,
.Cm AMD
.Pq administrators' supplementary documents ,
.Cm SMM
.Pq system managers' manuals ,
.Cm URM
.Pq users' reference manuals ,
.Cm PRM
.Pq programmers' reference manuals ,
.Cm KM
.Pq kernel manuals ,
.Cm IND
.Pq master index ,
.Cm MMI
.Pq master index ,
.Cm LOCAL
.Pq local manuals ,
.Cm LOC
.Pq local manuals ,
or
.Cm CON
.Pq contributed manuals .
a1383 1
.Dl \&.Dt FOO 4 KM
@


1.123
log
@Delete five standards that are:
* not supported by groff
* not used in any OpenBSD, NetBSD, DragonFly or FreeBSD base manual
* superseded or retracted
* and more than ten years old
Triggered by a question from Carsten Kunze (Heirloom troff).
OK guenther@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.122 2014/10/30 20:05:33 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: October 30 2014 $
d1188 6
a1193 7
Switch debugging mode.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Db Cm on | off
.Pp
This macro is ignored by
.Xr mandoc 1 .
@


1.122
log
@Major bugsquashing with respect to -offset and -width:
1. Support specifying the .Bd and .Bl -offset as a macro default width;
while here, simplify the code handling the same for .Bl -width.
2. Correct handling of .Bl -offset arguments:  unlike .Bd -offset, the
arguments "left", "indent", and "indent-two" have no special meaning.
3. Fix the scaling of string length -offset and -width arguments in -Thtml.
Triggered by an incomplete documentation patch from bentley@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.121 2014/10/20 17:58:56 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: October 20 2014 $
a2579 2
.It \-xns5.2d2.0
.St -xns5.2d2.0
a2581 7
.Pp
.It \-p1387.2
.St -p1387.2
.It \-p1387.2-95
.St -p1387.2-95
.br
POSIX software administration.
a2589 10
.Pp
.It \-p1003.1j-2000
.St -p1003.1j-2000
.br
Advanced real-time extensions.
.Pp
.It \-p1003.1q-2000
.St -p1003.1q-2000
.br
Amendment 7: Tracing [C Language].
@


1.121
log
@improve documentation of .Fa, .Va, and .Vt;
inspired by a discussion with matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.120 2014/10/12 02:59:04 bentley Exp $
d18 1
a18 1
.Dd $Mdocdate: October 12 2014 $
d940 5
a944 2
arguments accept scaling widths as described in
.Xr roff 7
@


1.120
log
@Clarify: SEE ALSO sections are sorted case insensitively.

ok jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.119 2014/09/17 00:42:54 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: September 17 2014 $
d1588 1
a1588 1
Function argument.
d2722 8
d2732 1
a2746 4
Note that this should not be confused with
.Sx \&Ft ,
which is used for function return types.
.Pp
d2751 9
d2761 1
a2761 3
.Sx MANUAL STRUCTURE
and
.Sx \&Va .
@


1.119
log
@Five year old typo reported by Theo Buehler at math dot ethz dot ch, thanks.
I nearly asked: ``What's wrong with it? It formats as "intended".''
(However, what Kristaps intended to write was "indented".)
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.118 2014/08/28 03:49:59 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 28 2014 $
d391 1
a391 1
alphabetically.
@


1.118
log
@Support .St -susv1 and .St -susv4.  Illumos wants to use this,
and it's illogical anyway to have -susv2 and -susv3 but not -susv4.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.117 2014/08/14 20:55:41 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 14 2014 $
d1248 1
a1248 1
One-line intended display.
@


1.117
log
@Clarify that .Em and .Sy are physical, not semantic markup,
explain appropriate usage, and provide some examples.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.116 2014/08/08 16:32:17 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 8 2014 $
d2528 2
d2533 1
a2533 1
This standard was published in 1994 and is also called SUSv1.
d2626 2
d2629 1
a2629 1
This standard is also called SUSv4 and
@


1.116
log
@some corrections and improvements with respect to prologue macros;
found while working on mandoc(1) messages
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.115 2014/07/13 10:23:06 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 13 2014 $
d1485 13
a1497 6
Denotes text that should be
.Em emphasised .
Note that this is a presentation term and should not be used for
stylistically decorating technical terms.
Depending on the output device, this is usually represented
using an italic font or underlined characters.
d1500 8
a1507 2
.Dl \&.Em Warnings!
.Dl \&.Em Remarks :
d2668 18
a2685 4
Format enclosed arguments in symbolic
.Pq Dq boldface .
Note that this is a presentation term and should not be used for
stylistically decorating technical terms.
@


1.115
log
@Unconfuse .Fa documentation:
You can use .Fa with just a type, without a name,
but when you give both, which is the usual case,
they need to go into one single .Fa argument.
Observed by bentley@@; ok jmc@@ bentley@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.114 2014/07/02 19:54:39 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 2 2014 $
d1198 1
a1198 1
Document date.
d1227 5
a1231 2
A few alternative date formats are accepted as well
and converted to the standard form.
d1291 1
a1291 1
Document title.
d1298 1
a1298 3
.Oo
.Ar title
.Oo
d1300 1
a1300 4
.Op Ar volume
.Op Ar arch
.Oc
.Oc
d1304 2
a1305 2
.Bl -tag -width Ds -offset Ds
.It Ar title
d1307 1
a1307 1
.Dq UNKNOWN
d1309 2
a1310 1
It should be capitalised.
d1348 1
a1348 2
.Cm 1
if unspecified.
d2126 1
a2126 1
Document operating system version.
@


1.114
log
@When .Sm is called without an argument, groff toggles the spacing mode,
so let us do the same for compatibility.  Using this feature is of
course not recommended except in manual page obfuscation contests.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.113 2014/07/02 03:47:07 schwarze Exp $
d1581 4
a1584 2
.Op Cm argtype
.Cm argname
d1587 12
a1598 2
This may be invoked for names with or without the corresponding type.
It is also used to specify the field name of a structure.
d1605 1
a1605 1
section when documenting multi-line function prototypes.
d1615 1
a1615 1
.Dl \&.Fa foo
d1718 1
a1718 1
.Pf \. Sx \&Fa Oo Ar argtype Oc Ar argname
@


1.113
log
@Implement the obsolete macros .En .Es .Fr .Ot for backward compatibility,
since this is hardly more complicated than explicitly ignoring them
as we did in the past.  Of course, do not use them!
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.112 2014/06/24 21:42:20 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 24 2014 $
d471 1
a471 1
.It Sx \&Sm Ta switch horizontal spacing mode: Cm on | off
d2343 1
a2343 1
.D1 Pf \. Sx \&Sm Cm on | off
d2352 5
d3035 1
a3035 1
.It Sx \&Sm  Ta    \&No     Ta    \&No     Ta    1
@


1.112
log
@Deprecate .Tn and .Ux, and make it clearer that .Bt and .Ud are deprecated.
Do not use these macros in new documents, they provide no value.
Instead, usually no macro and no markup is needed at all.
Of course, they remain supported for compatibility with existing manuals.

Jason McIntyre (OpenBSD), Thomas Klausner (NetBSD) and
Franco Fichtner (DragonFly) are OK with this documentation change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.111 2014/06/22 17:06:50 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 22 2014 $
d1505 8
a1512 2
This macro is obsolete and ignored by
.Xr mandoc 1 .
d1538 8
a1545 2
This macro is obsolete and ignored by
.Xr mandoc 1 .
d1725 2
a1726 5
This macro is obsolete and ignored by
.Xr mandoc 1 .
.Pp
It was used to show function return values.
The syntax was:
d1728 1
a1728 1
.Dl Pf . Sx \&Fr Ar value
d2141 6
a2146 2
This macro is obsolete and ignored by
.Xr mandoc 1 .
d2921 1
a2998 1
.It Sx \&En  Ta    \&No     Ta    \&No     Ta    0
d3000 1
a3000 1
.It Sx \&Es  Ta    \&No     Ta    \&No     Ta    0
d3007 1
a3007 1
.It Sx \&Fr  Ta    \&No     Ta    \&No     Ta    n
d3024 1
a3024 1
.It Sx \&Ot  Ta    \&No     Ta    \&No     Ta    n
@


1.111
log
@Minimal COMPATIBILITY cleanup:
* Mention that the list is incomplete.
* I implemented %C for groff -current, and it was accepted.
* Font family is \F, not \f.
* Escapes and scaling widths are documented in roff(7), not here.
* Quoting quotes by doubling them is now supported.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.110 2014/03/30 23:57:43 dlg Exp $
d18 1
a18 1
.Dd $Mdocdate: March 30 2014 $
a515 1
.It Sx \&Tn Ta tradename (>0 arguments)
a542 1
.It Sx \&Ux Ta Ux
a752 1
.Sx \&Ox ,
d754 1
a754 1
.Sx \&Ux .
a1117 1
.Sx \&Ox ,
d1119 1
a1119 1
.Sx \&Ux .
d1121 1
a1140 1
.Sx \&Ox ,
d1142 1
a1142 1
.Sx \&Ux .
a1454 1
.Sx \&Ox ,
d1456 1
a1456 1
.Sx \&Ux .
d1505 1
a1505 1
This macro is obsolete and not implemented in
d1532 2
a1533 1
This macro is obsolete and not implemented.
d1713 1
a1713 1
This macro is obsolete and not implemented in
a1757 1
.Sx \&Ox ,
d1759 1
a1759 1
.Sx \&Ux .
a2076 1
.Sx \&Ox ,
d2078 1
a2078 1
.Sx \&Ux .
d2132 1
a2132 1
This macro is obsolete and not implemented in
a2154 1
.Sx \&Nx ,
d2156 1
a2156 1
.Sx \&Ux .
d2644 5
a2648 9
Format a tradename.
.Pp
Since this macro is often implemented to use a small caps font,
it has historically been used for acronyms (like ASCII) as well.
Such usage is not recommended because it would use the same macro
sometimes for semantical annotation, sometimes for physical formatting.
.Pp
Examples:
.Dl \&.Tn IBM
d2650 1
d2654 3
a2656 17
Format the
.Ux
name.
Accepts no argument.
.Pp
Examples:
.Dl \&.Ux
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
and
.Sx \&Ox .
@


1.110
log
@i suggested a CONTEXT section for kernel manpages that describes
which contexts you can call functions in. deraadt@@ encouraged me
to pursue it. ive applied it to a few pages and i think it is worth
moving forward with.

this specific diff was requested by schwartz@@ while we were discussing
it before 5.5.
tweaks from jmc@@ schwartz@@
ok schwartz@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.109 2014/03/18 22:36:31 miod Exp $
d18 1
a18 1
.Dd $Mdocdate: March 18 2014 $
d3157 3
a3159 2
This section documents compatibility between mandoc and other
troff implementations, at this time limited to GNU troff
d3268 1
a3268 1
is not implemented.
d3286 1
a3286 1
.Sq \ef
a3307 30
.It
The
.Sq \eh
.Pq horizontal position ,
.Sq \ev
.Pq vertical position ,
.Sq \em
.Pq text colour ,
.Sq \eM
.Pq text filling colour ,
.Sq \ez
.Pq zero-length character ,
.Sq \ew
.Pq string length ,
.Sq \ek
.Pq horizontal position marker ,
.Sq \eo
.Pq text overstrike ,
and
.Sq \es
.Pq text size
escape sequences are all discarded in mandoc.
.It
The
.Sq \ef
scaling unit is accepted by mandoc, but rendered as the default unit.
.It
In quoted literals, groff allows pairwise double-quotes to produce a
standalone double-quote in formatted output.
This is not supported by mandoc.
@


1.109
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.108 2014/02/16 14:26:51 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: February 16 2014 $
d138 2
d323 3
@


1.108
log
@After Werner Lemberg accepted and committed some updates to the manual
page template contained in groff_mdoc(7), catch up with our own stuff.
In particular, allow ERRORS in section 4 and DIAGNOSTICS in section 9.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.107 2014/01/24 22:54:30 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 24 2014 $
a1389 1
.Cm hp300 ,
a1398 2
.Cm mvme68k ,
.Cm mvme88k ,
@


1.107
log
@Supplement the documentation of the .St macro by minimal commentary
regarding the content and relationships of the various standards,
and sort and group them.
tweaks and ok guenther@@, ok millert@@ sobrado@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.106 2014/01/20 00:51:07 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 20 2014 $
d128 1
a128 1
\&.\e\(dq For sections 2, 3, & 9 only.
d141 1
a141 1
\&.\e\(dq For sections 2, 3, & 9 only.
d143 1
a143 1
\&.\e\(dq For sections 1, 6, 7, & 8 only.
d146 1
a146 1
\&.\e\(dq For sections 1, 6, & 8 only.
d149 1
a149 1
\&.\e\(dq For sections 1, 4, 6, 7, & 8 only.
d151 1
a151 1
\&.\e\(dq For sections 2, 3, & 9 only.
d361 6
a366 2
Documents error conditions.
This is most useful in section 4 manuals.
d376 3
a378 1
Documents error handling in sections 2, 3, and 9.
@


1.106
log
@Change markup of some fixed strings from .Ar to .Cm.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.105 2013/12/30 09:47:43 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: December 30 2013 $
d2375 6
a2380 1
The following standards are recognised:
d2382 5
a2386 43
.Bl -tag -width "-p1003.1g-2000X" -compact
.It \-p1003.1-88
.St -p1003.1-88
.It \-p1003.1-90
.St -p1003.1-90
.It \-p1003.1-96
.St -p1003.1-96
.It \-p1003.1-2001
.St -p1003.1-2001
.It \-p1003.1-2004
.St -p1003.1-2004
.It \-p1003.1-2008
.St -p1003.1-2008
.It \-p1003.1-2013
.St -p1003.1-2013
.It \-p1003.1
.St -p1003.1
.It \-p1003.1b
.St -p1003.1b
.It \-p1003.1b-93
.St -p1003.1b-93
.It \-p1003.1c-95
.St -p1003.1c-95
.It \-p1003.1d-99
.St -p1003.1d-99
.It \-p1003.1g-2000
.St -p1003.1g-2000
.It \-p1003.1i-95
.St -p1003.1i-95
.It \-p1003.1j-2000
.St -p1003.1j-2000
.It \-p1003.1q-2000
.St -p1003.1q-2000
.It \-p1003.2
.St -p1003.2
.It \-p1003.2-92
.St -p1003.2-92
.It \-p1003.2a-92
.St -p1003.2a-92
.It \-p1387.2
.St -p1387.2
.It \-p1387.2-95
.St -p1387.2-95
d2391 3
d2396 1
d2399 1
d2402 1
d2405 5
d2412 15
d2429 22
d2453 15
d2470 8
a2477 16
.It \-ansiC
.St -ansiC
.It \-ansiC-89
.St -ansiC-89
.It \-ansiC-99
.St -ansiC-99
.It \-ieee754
.St -ieee754
.It \-iso8802-3
.St -iso8802-3
.It \-iso8601
.St -iso8601
.It \-ieee1275-94
.St -ieee1275-94
.It \-xpg3
.St -xpg3
d2480 6
d2488 16
d2506 16
d2524 4
d2530 1
a2530 4
.It \-xsh4.2
.St -xsh4.2
.It \-xsh5
.St -xsh5
d2533 2
d2537 28
a2564 6
.It \-xns5.2d2.0
.St -xns5.2d2.0
.It \-xcurses4.2
.St -xcurses4.2
.It \-susv2
.St -susv2
d2567 45
a2611 2
.It \-svid4
.St -svid4
@


1.105
log
@Support .St -p1003.1-2013, "IEEE Std 1003.1-2008/Cor 1-2013".

Note that the POSIX-2008 standard remains in force, so please refrain
from wholesale 2008 -> 2013 replacements.  Make sure to only use the
new -p1003.1-2013 argument for cases where "IEEE Std 1003.1(TM)-2008/
Cor 1-2013, IEEE Standard for Information Technology--Portable
Operating System Interface (POSIX(R)), Technical Corrigendum 1"
actually changes something in the standard with respect to the
specific function documented in the manual you touch.  Otherwise,
please continue using .St -p1003.1-2008.

Triggered by a similar, but slightly incorrect patch from jmc@@;
ok guenther@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.104 2013/12/25 14:08:36 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: December 25 2013 $
d1308 1
a1308 1
.Ar 1
d1310 1
a1310 1
.Ar 2
d1312 1
a1312 1
.Ar 3
d1314 1
a1314 1
.Ar 3p
d1316 1
a1316 1
.Ar 4
d1318 1
a1318 1
.Ar 5
d1320 1
a1320 1
.Ar 6
d1322 1
a1322 1
.Ar 7
d1324 1
a1324 1
.Ar 8
d1326 1
a1326 1
.Ar 9
d1328 1
a1328 1
.Ar X11
d1330 1
a1330 1
.Ar X11R6
d1332 1
a1332 1
.Ar unass
d1334 1
a1334 1
.Ar local
d1336 1
a1336 1
.Ar draft
d1339 1
a1339 1
.Ar paper
d1342 1
a1342 1
.Dq 1
d1348 1
a1348 1
.Ar USD
d1350 1
a1350 1
.Ar PS1
d1352 1
a1352 1
.Ar AMD
d1354 1
a1354 1
.Ar SMM
d1356 1
a1356 1
.Ar URM
d1358 1
a1358 1
.Ar PRM
d1360 1
a1360 1
.Ar KM
d1362 1
a1362 1
.Ar IND
d1364 1
a1364 1
.Ar MMI
d1366 1
a1366 1
.Ar LOCAL
d1368 1
a1368 1
.Ar LOC
d1371 1
a1371 1
.Ar CON
d3166 1
a3166 1
.Fl offset Ar center
d3168 1
a3168 1
.Fl offset Ar right .
@


1.104
log
@Support .St -xsh4.2, the System Interfaces part of the original Single
UNIX Specification.  As this one appears to be used in the wild and we
already have -xpg4.2 and even -xsh5, it makes sense to add this one.
Note that calling the original SUS XPG4.2 appears to be more common
than calling it SUSv1, so it's ok that we don't have .St -susv1.
From Sascha Wildner <saw at online dot de> (DragonFly) via Franco Fichtner.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.103 2013/11/02 20:39:24 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: November 2 2013 $
d2390 2
@


1.103
log
@While answering a question asked by espie@@, i noticed that .Fd is not
completely obsolete, but still somewhat useful for listing preprocessor
directives, in particular in the SYNOPSIS.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.102 2013/10/06 17:06:26 schwarze Exp $
d4 1
a4 1
.\" Copyright (c) 2010, 2011 Ingo Schwarze <schwarze@@openbsd.org>
d18 1
a18 1
.Dd $Mdocdate: October 6 2013 $
d2464 2
@


1.102
log
@Fix an .Lb example in two respects:
As noticed by Sascha Wildner (DragonFly), .Lb wants a "lib" prefix.
And mdoc(3) was merged into mandoc(3) long ago.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.101 2013/09/04 19:39:19 patrick Exp $
d18 1
a18 1
.Dd $Mdocdate: September 4 2013 $
d480 1
d1429 1
a1429 1
for special-purpose constants and
d1431 4
a1434 1
for variable symbols.
d1595 4
a1598 2
Historically used to document include files.
This usage has been deprecated in favour of
d1600 15
a1614 1
Do not use this macro.
d1617 2
a1618 1
.Sx MANUAL STRUCTURE
d1620 1
a1620 1
.Sx \&In .
@


1.101
log
@Beagle has been replaced by armv7.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.100 2013/08/14 15:06:42 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 14 2013 $
d1880 1
a1880 1
.Dl \&.Lb mdoc
@


1.100
log
@Use text production macros to document themselves.
Part of the patch was sent in by Jan Stary <hans at stare dot cz>,
another part was added by jmc@@, the rest was added by myself;
ok jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.99 2013/07/13 19:27:47 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 13 2013 $
d1381 1
a1382 1
.Cm beagle ,
@


1.99
log
@For citing the names and email addresses of authors,
consistently use the style ".An name Aq Mt email".

Triggered by a question from Jan Stary <hans at stare dot cz>,
ok jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.98 2013/06/17 17:39:48 guenther Exp $
d18 1
a18 1
.Dd $Mdocdate: June 17 2013 $
d714 3
a716 1
Formats an AT&T version.
d1094 3
a1096 1
Format the BSD/OS version provided as an argument, or a default value if
d1116 3
a1118 1
Format the BSD version provided as an argument, or a default value if no
d1432 3
a1434 1
Format the DragonFly BSD version provided as an argument, or a default
d2503 3
a2505 1
Format the UNIX name.
@


1.98
log
@Add .St values for POSIX 1003.1d, 1003.1j, and 1003.1q
Tweak descriptions of the other POSIX 1003.1<letter> standards
Sort a few others into their proper places

Discussed with schwarze@@ at t2k13
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.97 2013/04/27 17:15:01 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: April 27 2013 $
d660 1
a660 1
.Dl \&.An Kristaps Dzonsons \&Aq kristaps@@bsd.lv
d1923 1
d3190 1
a3190 2
.An Kristaps Dzonsons ,
.Mt kristaps@@bsd.lv .
@


1.97
log
@- (mdoc.7) fix Xr to self
- double word fix
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.96 2013/03/26 19:16:19 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: March 26 2013 $
d2368 2
d2374 6
d2384 2
a2387 4
.It \-p1003.2
.St -p1003.2
.It \-p1387.2
.St -p1387.2
@


1.96
log
@bits for octeon (will format as OCTEON in Dt);
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.95 2013/03/26 14:59:24 jmc Exp $
d2104 1
a2104 1
.Xr mdoc 7
d2979 1
a2979 1
This section documents compatibility between mandoc and other other
@


1.95
log
@no more palm;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.94 2012/08/29 23:38:41 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 29 2012 $
d1389 1
@


1.94
log
@1) Remove documentation of the groff-1.15 compatibility quirk
of suppressing spacing before a third .Xr argument
because that quirk was removed in mdoc_macro.c rev. 1.72.

2) Mark the "section" argument to .Xr as (syntactically) optional,
but still do not encourage omitting it.
The missing .Op was reported by espie@@.

Wording tweaked by and ok jmc@@, ok millert@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.93 2012/06/20 22:00:23 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: June 20 2012 $
a1388 1
.Cm palm ,
@


1.93
log
@no more mac68k; ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.92 2012/06/20 21:37:32 schwarze Exp $
d2553 1
a2553 1
.D1 Pf \. Sx \&Xr Ar name section
d2555 1
a2555 1
The
d2559 2
a2560 8
are the name and section of the linked manual.
If
.Ar section
is followed by non-punctuation, an
.Sx \&Ns
is inserted into the token stream.
This behaviour is for compatibility with
GNU troff.
@


1.92
log
@When i moved some low-level stuff from mdoc(7) and man(7)
to roff(7) some time ago, i forgot to adjust the cross-references.
Reported by Tim van der Molen <tbvdm at xs4all dot nl>, thanks.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.91 2012/01/03 11:05:57 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 3 2012 $
a1384 1
.Cm mac68k ,
@


1.91
log
@Support .St -isoC-2011 to refer to ISO C11.
From Ulrich Spoerlein, tweaked by kristaps@@.
Werner Lemberg added the same .St argument to groff today.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.90 2011/11/01 14:49:16 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: November 1 2011 $
d823 2
a824 2
A width using the syntax described in
.Sx Scaling Widths .
d929 2
a930 2
arguments accept
.Sx Scaling Widths
d959 3
a961 3
of one column, using either the
.Sx Scaling Widths
syntax or the string length of the argument.
d2591 2
a2592 2
argument must be formatted as described in
.Sx Scaling Widths .
@


1.90
log
@Clean up the description of .Dt:
- Volume and arch are both optional and not alternatives.
- Zap verbiage about what's obvious from the synopsis.
- For fixed argument strings, use .Cm, not .Ar.
- Update the list of architectures for OpenBSD.
Using lots of input from jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.89 2011/09/27 21:47:54 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: September 27 2011 $
d2395 2
@


1.89
log
@even though .Bl is not callable, groff complains when it appears
unescaped on a macro line, so lets just escape it;
noticed by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.88 2011/09/26 23:07:20 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: September 26 2011 $
d1285 2
a1286 1
.Op Ar volume | arch
d1367 32
a1398 35
This specifies a specific relevant architecture.
If
.Ar volume
is not provided, it may be used in its place, else it may be used
subsequent that.
It, too, is optional.
It must be one of
.Ar alpha ,
.Ar amd64 ,
.Ar amiga ,
.Ar arc ,
.Ar arm ,
.Ar armish ,
.Ar aviion ,
.Ar hp300 ,
.Ar hppa ,
.Ar hppa64 ,
.Ar i386 ,
.Ar landisk ,
.Ar loongson ,
.Ar luna88k ,
.Ar mac68k ,
.Ar macppc ,
.Ar mips64 ,
.Ar mvme68k ,
.Ar mvme88k ,
.Ar pmax ,
.Ar sgi ,
.Ar socppc ,
.Ar sparc ,
.Ar sparc64 ,
.Ar sun3 ,
.Ar vax ,
or
.Ar zaurus .
@


1.88
log
@Reorganize part of the content:

1) Move the LANGUAGE SYNTAX from mdoc(7) and man(7) to roff(7),
it's common to both and it's actually roff syntax.
2) Move the MACRO SYNTAX down to the bottom, such that the less
technical parts MANUAL STRUCTURE and MACRO OVERVIEW get to the top.

Getting everything to again fit together after the reshuffling
required various adjustments; also adjust and improve
the DESCRIPTIONS while there.

feedback and "go ahead"  jmc@@ kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.87 2011/09/26 21:21:27 schwarze Exp $
d452 1
a452 1
.It Sx \&Ta Ta table cell separator in Sx Bl Fl column No lists
@


1.87
log
@Replace the .Fl examples by others exhibiting the same features,
but avoiding use of .Nm, because letting .Nm call other macros
is unusual style, and we don't want unusual style in examples.
Issue brought up by kristaps@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.86 2011/09/18 15:54:48 schwarze Exp $
d4 1
a4 1
.\" Copyright (c) 2010 Ingo Schwarze <schwarze@@openbsd.org>
d18 1
a18 1
.Dd $Mdocdate: September 18 2011 $
d23 1
a23 1
.Nd mdoc language reference
d27 11
a37 7
language is used to format
.Bx
.Ux
manuals.
This reference document describes its syntax, structure, and
usage.
The reference implementation for
d39 2
a40 1
formatting is
d46 1
a46 1
An
d48 1
a48 2
document follows simple rules: lines beginning with the control
character
d50 16
a65 3
are parsed for macros.
Lines not beginning with the control character are
interpreted within the scope of prior macros:
d70 2
a71 1
.Sh LANGUAGE SYNTAX
d73 13
a85 108
documents may contain only graphable 7-bit ASCII characters, the space
character, and, in certain circumstances, the tab character.
The back-space character
.Sq \e
indicates the start of an escape sequence for
.Sx Comments ,
.Sx Predefined Strings ,
and
.Sx Special Characters .
.Ss Comments
Text following an escaped double-quote
.Sq \e\(dq ,
whether in a macro or text line, is ignored to the end of
line.
A macro line beginning with a control character and comment escape
.Sq \&.\e\(dq
is also ignored.
Furthermore,
macro lines with only a control character and optional trailing
whitespace are
stripped from input.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.\e\(dq This is a comment line.
\&.\e\(dq The next line is ignored:
\&.
\&.Em Emphasis \e\(dq This is also a comment.
.Ed
.Ss Special Characters
Special characters are used to encode special glyphs and are rendered
differently across output media.
They may occur in both macro and text lines.
Sequences begin with the escape character
.Sq \e
followed by either an open-parenthesis
.Sq \&(
for two-character sequences; an open-bracket
.Sq \&[
for n-character sequences (terminated at a close-bracket
.Sq \&] ) ;
or a single one character sequence.
.Pp
Examples:
.Bl -tag -width Ds -offset indent -compact
.It Li \e(em
Two-letter em dash escape.
.It Li \ee
One-letter backslash escape.
.El
.Pp
See
.Xr mandoc_char 7
for a complete list.
.Ss Text Decoration
Terms may be text-decorated using the
.Sq \ef
escape followed by an indicator: B (bold), I (italic), R (regular), or P
(revert to previous mode).
A numerical representation 3, 2, or 1 (bold, italic, and regular,
respectively) may be used instead.
If a macro opens a font scope after calling
.Sq \ef ,
such as with
.Sx \&Bf ,
the
.Sq \ef
mode will be restored upon exiting the
.Sx \&Bf
scope.
.Pp
Examples:
.Bl -tag -width Ds -offset indent -compact
.It Li \efBbold\efR
Write in bold, then switch to regular font mode.
.It Li \efIitalic\efP
Write in italic, then return to previous font mode.
.El
.Pp
Text decoration is
.Em not
recommended for
.Nm ,
which encourages semantic annotation.
.Ss Predefined Strings
Predefined strings, like
.Sx Special Characters ,
mark special output glyphs.
Predefined strings are escaped with the slash-asterisk,
.Sq \e* :
single-character
.Sq \e*X ,
two-character
.Sq \e*(XX ,
and N-character
.Sq \e*[N] .
.Pp
Examples:
.Bl -tag -width Ds -offset indent -compact
.It Li \e*(Am
Two-letter ampersand predefined string.
.It Li \e*q
One-letter double-quote predefined string.
.El
.Pp
These strings are set using
.Xr roff 7 ,
although
d87 3
a89 133
consists of several pre-set escapes listed in
.Xr mandoc_char 7 .
.Ss Whitespace
Whitespace consists of the space character.
In text lines, whitespace is preserved within a line.
In macro lines, whitespace delimits arguments and is discarded.
.Pp
Unescaped trailing spaces are stripped from text line input unless in a
literal context.
In general, trailing whitespace on any input line is discouraged for
reasons of portability.
In the rare case that a blank character is needed at the end of an
input line, it may be forced by
.Sq \e\ \e& .
.Pp
In general, space characters can be rendered as literal
characters by using non-breaking space escapes or
.Sx Quotation .
.Pp
Blank text lines, which may include whitespace, are only permitted
within literal contexts.
If the first character of a text line is a space, that line is printed
with a leading newline.
.Ss Quotation
Macro arguments may be quoted with double-quotes to so that the
enclosed text is one literal term.
Quoted text, even if whitespace or if it would cause a macro invocation
when unquoted, is considered literal text.
.Pp
A quoted argument begins with a double-quote preceded by whitespace.
The next double-quote not pairwise adjacent to another double-quote
terminates the literal, regardless of surrounding whitespace.
.Pp
Examples:
.Bl -tag -width Ds -offset indent -compact
.It Li .Fn strlen \(dqconst char *s\(dq
Group arguments
.Qq const char *s
into one function argument.
If unspecified,
.Qq const ,
.Qq char ,
and
.Qq *s
would be considered separate arguments.
.Pq See Sx \&Fn .
.It Li .Op \(dqFl a\(dq
Consider
.Qq \&Fl a
as literal text instead of a flag macro.
.Pq Aee Sx \&Op , \&Fl .
.El
.Ss Scaling Widths
Many macros support scaled widths for their arguments.
The syntax for a scaled width is
.Sq Li [+-]?[0-9]*.[0-9]*[:unit:] ,
where a decimal must be preceded or proceeded by at least one digit.
Negative numbers, while accepted, are truncated to zero.
.Pp
The following scaling units are accepted:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It c
centimetre
.It i
inch
.It P
pica (~1/6 inch)
.It p
point (~1/72 inch)
.It f
synonym for
.Sq u
.It v
default vertical span
.It m
width of rendered
.Sq m
.Pq em
character
.It n
width of rendered
.Sq n
.Pq en
character
.It u
default horizontal span
.It M
mini-em (~1/100 em)
.El
.Pp
Using anything other than
.Sq m ,
.Sq n ,
.Sq u ,
or
.Sq v
is necessarily non-portable across output media.
See
.Sx COMPATIBILITY .
.Pp
Examples:
.Bl -tag -width Ds -offset indent -compact
.It Li \&.Bl -tag -width 2i
two-inch tagged list indentation
.Pq see Sx \&Bl
.It Li \&.sp 2v
two vertical spaces
.Pq see Sx \&sp
.El
.Ss Sentence Spacing
Sentences should terminate at the end of an input line.
By doing this, a formatter will be able to apply the proper amount of
spacing after the end of sentence (unescaped) period, exclamation mark,
or question mark followed by zero or more non-sentence closing
delimiters
.Po
.Sq \&) ,
.Sq \&] ,
.Sq \&' ,
.Sq \&"
.Pc .
.Pp
The proper spacing is also intelligently preserved if a sentence ends at
the boundary of a macro line.
.Pp
Examples:
.Bd -literal -offset indent -compact
Do not end sentences mid-line like this.  Instead,
end a sentence like this.
A macro would end like this:
\&.Xr mandoc 1 \&.
.Ed
d416 38
a453 79
.Sh MACRO SYNTAX
Macros are one to three three characters in length and begin with a
control character,
.Sq \&. ,
at the beginning of the line.
An arbitrary amount of whitespace may sit between the control character
and the macro name.
Thus, the following are equivalent:
.Bd -literal -offset indent
\&.Pp
\&.\ \ \ \&Pp
.Ed
.Pp
The syntax of a macro depends on its classification.
In this section,
.Sq \-arg
refers to macro arguments, which may be followed by zero or more
.Sq parm
parameters;
.Sq \&Yo
opens the scope of a macro; and if specified,
.Sq \&Yc
closes it out.
.Pp
The
.Em Callable
column indicates that the macro may also be called by passing its name
as an argument to another macro.
For example,
.Sq \&.Op \&Fl O \&Ar file
produces
.Sq Op Fl O Ar file .
To prevent a macro call and render the macro name literally,
escape it by prepending a zero-width space,
.Sq \e& .
For example,
.Sq \&Op \e&Fl O
produces
.Sq Op \&Fl O .
If a macro is not callable but its name appears as an argument
to another macro, it is interpreted as opaque text.
For example,
.Sq \&.Fl \&Sh
produces
.Sq Fl \&Sh .
.Pp
The
.Em Parsed
column indicates whether the macro may call other macros by receiving
their names as arguments.
If a macro is not parsed but the name of another macro appears
as an argument, it is interpreted as opaque text.
.Pp
The
.Em Scope
column, if applicable, describes closure rules.
.Ss Block full-explicit
Multi-line scope closed by an explicit closing macro.
All macros contains bodies; only
.Sx \&Bf
and
.Pq optionally
.Sx \&Bl
contain a head.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB
\(lBbody...\(rB
\&.Yc
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&Bd  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ed
.It Sx \&Bf  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ef
.It Sx \&Bk  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ek
.It Sx \&Bl  Ta    \&No     Ta    \&No     Ta    closed by Sx \&El
.It Sx \&Ed  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bd
.It Sx \&Ef  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bf
.It Sx \&Ek  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bk
.It Sx \&El  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bl
d455 9
a463 28
.Ss Block full-implicit
Multi-line scope closed by end-of-file or implicitly by another macro.
All macros have bodies; some
.Po
.Sx \&It Fl bullet ,
.Fl hyphen ,
.Fl dash ,
.Fl enum ,
.Fl item
.Pc
don't have heads; only one
.Po
.Sx \&It
in
.Sx \&Bl Fl column
.Pc
has multiple heads.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead... \(lBTa head...\(rB\(rB
\(lBbody...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXXXXXXXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&It Ta \&No Ta Yes  Ta closed by Sx \&It , Sx \&El
.It Sx \&Nd Ta \&No Ta \&No Ta closed by Sx \&Sh
.It Sx \&Nm Ta \&No Ta Yes  Ta closed by Sx \&Nm , Sx \&Sh , Sx \&Ss
.It Sx \&Sh Ta \&No Ta Yes  Ta closed by Sx \&Sh
.It Sx \&Ss Ta \&No Ta Yes  Ta closed by Sx \&Sh , Sx \&Ss
d465 10
a474 53
.Pp
Note that the
.Sx \&Nm
macro is a
.Sx Block full-implicit
macro only when invoked as the first macro
in a
.Em SYNOPSIS
section line, else it is
.Sx In-line .
.Ss Block partial-explicit
Like block full-explicit, but also with single-line scope.
Each has at least a body and, in limited circumstances, a head
.Po
.Sx \&Fo ,
.Sx \&Eo
.Pc
and/or tail
.Pq Sx \&Ec .
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB
\(lBbody...\(rB
\&.Yc \(lBtail...\(rB

\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB \
\(lBbody...\(rB \&Yc \(lBtail...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&Ac  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Ao
.It Sx \&Ao  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Ac
.It Sx \&Bc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Bo
.It Sx \&Bo  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Bc
.It Sx \&Brc Ta    Yes      Ta    Yes      Ta    opened by Sx \&Bro
.It Sx \&Bro Ta    Yes      Ta    Yes      Ta    closed by Sx \&Brc
.It Sx \&Dc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Do
.It Sx \&Do  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Dc
.It Sx \&Ec  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Eo
.It Sx \&Eo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Ec
.It Sx \&Fc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Fo
.It Sx \&Fo  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Fc
.It Sx \&Oc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Oo
.It Sx \&Oo  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Oc
.It Sx \&Pc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Po
.It Sx \&Po  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Pc
.It Sx \&Qc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Oo
.It Sx \&Qo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Oc
.It Sx \&Re  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Rs
.It Sx \&Rs  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Re
.It Sx \&Sc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&So
.It Sx \&So  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Sc
.It Sx \&Xc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Xo
.It Sx \&Xo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Xc
d476 19
a494 20
.Ss Block partial-implicit
Like block full-implicit, but with single-line scope closed by the
end of the line.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBbody...\(rB \(lBres...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed
.It Sx \&Aq  Ta    Yes      Ta    Yes
.It Sx \&Bq  Ta    Yes      Ta    Yes
.It Sx \&Brq Ta    Yes      Ta    Yes
.It Sx \&D1  Ta    \&No     Ta    \&Yes
.It Sx \&Dl  Ta    \&No     Ta    Yes
.It Sx \&Dq  Ta    Yes      Ta    Yes
.It Sx \&Op  Ta    Yes      Ta    Yes
.It Sx \&Pq  Ta    Yes      Ta    Yes
.It Sx \&Ql  Ta    Yes      Ta    Yes
.It Sx \&Qq  Ta    Yes      Ta    Yes
.It Sx \&Sq  Ta    Yes      Ta    Yes
.It Sx \&Vt  Ta    Yes      Ta    Yes
d496 9
a504 23
.Pp
Note that the
.Sx \&Vt
macro is a
.Sx Block partial-implicit
only when invoked as the first macro
in a
.Em SYNOPSIS
section line, else it is
.Sx In-line .
.Ss Special block macro
The
.Sx \&Ta
macro can only be used below
.Sx \&It
in
.Sx \&Bl Fl column
lists.
It delimits blocks representing table cells;
these blocks have bodies, but no heads.
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&Ta  Ta    Yes      Ta    Yes    Ta closed by Sx \&Ta , Sx \&It
d506 8
a513 90
.Ss In-line
Closed by the end of the line, fixed argument lengths,
and/or subsequent macros.
In-line macros have only text children.
If a number (or inequality) of arguments is
.Pq n ,
then the macro accepts an arbitrary number of arguments.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB \(lBres...\(rB

\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB Yc...

\&.Yo \(lB\-arg \(lBval...\(rB\(rB arg0 arg1 argN
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "Arguments" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Arguments
.It Sx \&%A  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%B  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%C  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%D  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%I  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%J  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%N  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%O  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%P  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%Q  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%R  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%T  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%U  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%V  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&Ad  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&An  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ap  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Ar  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&At  Ta    Yes      Ta    Yes      Ta    1
.It Sx \&Bsx Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Bt  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Bx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Cd  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Cm  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Db  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&Dd  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Dt  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Dv  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Dx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Em  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&En  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Er  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Es  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Ev  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ex  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Fa  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Fd  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&Fl  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Fn  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Fr  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ft  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Fx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Hf  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ic  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&In  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&Lb  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&Li  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Lk  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Lp  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Ms  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Mt  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Nm  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&No  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Ns  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Nx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Os  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ot  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ox  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Pa  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Pf  Ta    Yes      Ta    Yes      Ta    1
.It Sx \&Pp  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Rv  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Sm  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&St  Ta    \&No     Ta    Yes      Ta    1
.It Sx \&Sx  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Sy  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Tn  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ud  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Ux  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Va  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Vt  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Xr  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&br  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&sp  Ta    \&No     Ta    \&No     Ta    1
d515 11
a525 31
.Ss Delimiters
When a macro argument consists of one single input character
considered as a delimiter, the argument gets special handling.
This does not apply when delimiters appear in arguments containing
more than one character.
Consequently, to prevent special handling and just handle it
like any other argument, a delimiter can be escaped by prepending
a zero-width space
.Pq Sq \e& .
In text lines, delimiters never need escaping, but may be used
as normal punctuation.
.Pp
For many macros, when the leading arguments are opening delimiters,
these delimiters are put before the macro scope,
and when the trailing arguments are closing delimiters,
these delimiters are put after the macro scope.
For example,
.Pp
.D1 Pf \. \&Aq "( [ word ] ) ."
.Pp
renders as:
.Pp
.D1 Aq ( [ word ] ) .
.Pp
Opening delimiters are:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&(
left parenthesis
.It \&[
left bracket
d527 13
a539 20
.Pp
Closing delimiters are:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&.
period
.It \&,
comma
.It \&:
colon
.It \&;
semicolon
.It \&)
right parenthesis
.It \&]
right bracket
.It \&?
question mark
.It \&!
exclamation mark
d541 17
a557 172
.Pp
Note that even a period preceded by a backslash
.Pq Sq \e.\&
gets this special handling; use
.Sq \e&.
to prevent that.
.Pp
Many in-line macros interrupt their scope when they encounter
delimiters, and resume their scope when more arguments follow that
are not delimiters.
For example,
.Pp
.D1 Pf \. \&Fl "a ( b | c \e*(Ba d ) e"
.Pp
renders as:
.Pp
.D1 Fl a ( b | c \*(Ba d ) e
.Pp
This applies to both opening and closing delimiters,
and also to the middle delimiter:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&|
vertical bar
.El
.Pp
As a special case, the predefined string \e*(Ba is handled and rendered
in the same way as a plain
.Sq \&|
character.
Using this predefined string is not recommended in new manuals.
.Sh MACRO OVERVIEW
This overview is sorted such that macros of similar purpose are listed
together, to help find the best macro for any given purpose.
Deprecated macros are not included in the overview, but can be found
in the alphabetical reference below.
.Ss Document preamble and NAME section macros
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Dd Ta document date: Cm $Mdocdate: September 18 2011 $ | Ar month day , year
.It Sx \&Dt Ta document title: Ar TITLE section Op Ar volume | arch
.It Sx \&Os Ta operating system version: Op Ar system Op Ar version
.It Sx \&Nm Ta document name (one argument)
.It Sx \&Nd Ta document description (one line)
.El
.Ss Sections and cross references
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Sh Ta section header (one line)
.It Sx \&Ss Ta subsection header (one line)
.It Sx \&Sx Ta internal cross reference to a section or subsection
.It Sx \&Xr Ta cross reference to another manual page: Ar name section
.It Sx \&Pp , \&Lp Ta start a text paragraph (no arguments)
.El
.Ss Displays and lists
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Bd , \&Ed Ta display block:
.Fl Ar type
.Op Fl offset Ar width
.Op Fl compact
.It Sx \&D1 Ta indented display (one line)
.It Sx \&Dl Ta indented literal display (one line)
.It Sx \&Bl , \&El Ta list block:
.Fl Ar type
.Op Fl width Ar val
.Op Fl offset Ar val
.Op Fl compact
.It Sx \&It Ta list item (syntax depends on Fl Ar type )
.It Sx \&Ta Ta table cell separator in Sx Bl Fl column No lists
.It Sx \&Rs , \&%* , \&Re Ta bibliographic block (references)
.El
.Ss Spacing control
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Pf Ta prefix, no following horizontal space (one argument)
.It Sx \&Ns Ta roman font, no preceding horizontal space (no arguments)
.It Sx \&Ap Ta apostrophe without surrounding whitespace (no arguments)
.It Sx \&Sm Ta switch horizontal spacing mode: Cm on | off
.It Sx \&Bk , \&Ek Ta keep block: Fl words
.It Sx \&br Ta force output line break in text mode (no arguments)
.It Sx \&sp Ta force vertical space: Op Ar height
.El
.Ss Semantic markup for command line utilities:
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Nm Ta start a SYNOPSIS block with the name of a utility
.It Sx \&Fl Ta command line options (flags) (>=0 arguments)
.It Sx \&Cm Ta command modifier (>0 arguments)
.It Sx \&Ar Ta command arguments (>=0 arguments)
.It Sx \&Op , \&Oo , \&Oc Ta optional syntax elements (enclosure)
.It Sx \&Ic Ta internal or interactive command (>0 arguments)
.It Sx \&Ev Ta environmental variable (>0 arguments)
.It Sx \&Pa Ta file system path (>=0 arguments)
.El
.Ss Semantic markup for function libraries:
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Lb Ta function library (one argument)
.It Sx \&In Ta include file (one argument)
.It Sx \&Ft Ta function type (>0 arguments)
.It Sx \&Fo , \&Fc Ta function block: Ar funcname
.It Sx \&Fn Ta function name:
.Op Ar functype
.Ar funcname
.Oo
.Op Ar argtype
.Ar argname
.Oc
.It Sx \&Fa Ta function argument (>0 arguments)
.It Sx \&Vt Ta variable type (>0 arguments)
.It Sx \&Va Ta variable name (>0 arguments)
.It Sx \&Dv Ta defined variable or preprocessor constant (>0 arguments)
.It Sx \&Er Ta error constant (>0 arguments)
.It Sx \&Ev Ta environmental variable (>0 arguments)
.El
.Ss Various semantic markup:
.Bl -column "Brq, Bro, Brc" description
.It Sx \&An Ta author name (>0 arguments)
.It Sx \&Lk Ta hyperlink: Ar uri Op Ar name
.It Sx \&Mt Ta Do mailto Dc hyperlink: Ar address
.It Sx \&Cd Ta kernel configuration declaration (>0 arguments)
.It Sx \&Ad Ta memory address (>0 arguments)
.It Sx \&Ms Ta mathematical symbol (>0 arguments)
.It Sx \&Tn Ta tradename (>0 arguments)
.El
.Ss Physical markup
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Em Ta italic font or underline (emphasis) (>0 arguments)
.It Sx \&Sy Ta boldface font (symbolic) (>0 arguments)
.It Sx \&Li Ta typewriter font (literal) (>0 arguments)
.It Sx \&No Ta return to roman font (normal) (no arguments)
.It Sx \&Bf , \&Ef Ta font block:
.Op Fl Ar type | Cm \&Em | \&Li | \&Sy
.El
.Ss Physical enclosures
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Dq , \&Do , \&Dc Ta enclose in typographic double quotes: Dq text
.It Sx \&Qq , \&Qo , \&Qc Ta enclose in typewriter double quotes: Qq text
.It Sx \&Sq , \&So , \&Sc Ta enclose in single quotes: Sq text
.It Sx \&Ql Ta single-quoted literal text: Ql text
.It Sx \&Pq , \&Po , \&Pc Ta enclose in parentheses: Pq text
.It Sx \&Bq , \&Bo , \&Bc Ta enclose in square brackets: Bq text
.It Sx \&Brq , \&Bro , \&Brc Ta enclose in curly braces: Brq text
.It Sx \&Aq , \&Ao , \&Ac Ta enclose in angle brackets: Aq text
.It Sx \&Eo , \&Ec Ta generic enclosure
.El
.Ss Text production
.Bl -column "Brq, Bro, Brc" description
.It Sx \&Ex Fl std Ta standard command exit values: Op Ar utility ...
.It Sx \&Rv Fl std Ta standard function return values: Op Ar function ...
.It Sx \&St Ta reference to a standards document (one argument)
.It Sx \&Ux Ta Ux
.It Sx \&At Ta At
.It Sx \&Bx Ta Bx
.It Sx \&Bsx Ta Bsx
.It Sx \&Nx Ta Nx
.It Sx \&Fx Ta Fx
.It Sx \&Ox Ta Ox
.It Sx \&Dx Ta Dx
.El
.Sh REFERENCE
This section is a canonical reference of all macros, arranged
alphabetically.
For the scoping of individual macros, see
.Sx MACRO SYNTAX .
.Ss \&%A
Author name of an
.Sx \&Rs
block.
Multiple authors should each be accorded their own
.Sx \%%A
line.
Author names should be ordered with full or abbreviated forename(s)
first, then full surname.
.Ss \&%B
Book title of an
.Sx \&Rs
d2393 489
a2881 52
.It \-isoC-tcor2
.St -isoC-tcor2
.It \-isoC-99
.St -isoC-99
.It \-iso9945-1-90
.St -iso9945-1-90
.It \-iso9945-1-96
.St -iso9945-1-96
.It \-iso9945-2-93
.St -iso9945-2-93
.It \-ansiC
.St -ansiC
.It \-ansiC-89
.St -ansiC-89
.It \-ansiC-99
.St -ansiC-99
.It \-ieee754
.St -ieee754
.It \-iso8802-3
.St -iso8802-3
.It \-iso8601
.St -iso8601
.It \-ieee1275-94
.St -ieee1275-94
.It \-xpg3
.St -xpg3
.It \-xpg4
.St -xpg4
.It \-xpg4.2
.St -xpg4.2
.It \-xpg4.3
.St -xpg4.3
.It \-xbd5
.St -xbd5
.It \-xcu5
.St -xcu5
.It \-xsh5
.St -xsh5
.It \-xns5
.St -xns5
.It \-xns5.2
.St -xns5.2
.It \-xns5.2d2.0
.St -xns5.2d2.0
.It \-xcurses4.2
.St -xcurses4.2
.It \-susv2
.St -susv2
.It \-susv3
.St -susv3
.It \-svid4
.St -svid4
d2883 11
a2893 4
.Ss \&Sx
Reference a section or subsection in the same manual page.
The referenced section or subsection name must be identical to the
enclosed argument, including whitespace.
d2895 5
a2899 2
Examples:
.Dl \&.Sx MANUAL STRUCTURE
d2901 1
a2901 9
See also
.Sx \&Sh
and
.Sx \&Ss .
.Ss \&Sy
Format enclosed arguments in symbolic
.Pq Dq boldface .
Note that this is a presentation term and should not be used for
stylistically decorating technical terms.
d2903 1
a2903 13
See also
.Sx \&Bf ,
.Sx \&Em ,
.Sx \&Li ,
and
.Sx \&No .
.Ss \&Ta
Table cell separator in
.Sx \&Bl Fl column
lists; can only be used below
.Sx \&It .
.Ss \&Tn
Format a tradename.
d2905 1
a2905 4
Since this macro is often implemented to use a small caps font,
it has historically been used for acronyms (like ASCII) as well.
Such usage is not recommended because it would use the same macro
sometimes for semantical annotation, sometimes for physical formatting.
d2907 1
a2907 8
Examples:
.Dl \&.Tn IBM
.Ss \&Ud
Prints out
.Dq currently under development.
.Ss \&Ux
Format the UNIX name.
Accepts no argument.
d2909 6
a2914 2
Examples:
.Dl \&.Ux
d2916 1
a2916 11
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
and
.Sx \&Ox .
.Ss \&Va
A variable name.
d2918 18
a2935 18
Examples:
.Dl \&.Va foo
.Dl \&.Va const char *bar ;
.Ss \&Vt
A variable type.
This is also used for indicating global variables in the
.Em SYNOPSIS
section, in which case a variable name is also specified.
Note that it accepts
.Sx Block partial-implicit
syntax when invoked as the first macro on an input line in the
.Em SYNOPSIS
section, else it accepts ordinary
.Sx In-line
syntax.
In the former case, this macro starts a new output line,
and a blank line is inserted in front if there is a preceding
function definition or include directive.
d2937 5
a2941 3
Note that this should not be confused with
.Sx \&Ft ,
which is used for function return types.
d2943 4
a2946 3
Examples:
.Dl \&.Vt unsigned char
.Dl \&.Vt extern const char * const sys_signame[] \&;
d2948 1
a2948 19
See also
.Sx MANUAL STRUCTURE
and
.Sx \&Va .
.Ss \&Xc
Close a scope opened by
.Sx \&Xo .
.Ss \&Xo
Extend the header of an
.Sx \&It
macro or the body of a partial-implicit block macro
beyond the end of the input line.
This macro originally existed to work around the 9-argument limit
of historic
.Xr roff 7 .
.Ss \&Xr
Link to another manual
.Pq Qq cross-reference .
Its syntax is as follows:
d2950 1
a2950 1
.D1 Pf \. Sx \&Xr Ar name section
d2952 1
a2952 12
The
.Ar name
and
.Ar section
are the name and section of the linked manual.
If
.Ar section
is followed by non-punctuation, an
.Sx \&Ns
is inserted into the token stream.
This behaviour is for compatibility with
GNU troff.
d2954 2
a2955 8
Examples:
.Dl \&.Xr mandoc 1
.Dl \&.Xr mandoc 1 \&;
.Dl \&.Xr mandoc 1 \&Ns s behaviour
.Ss \&br
Emits a line-break.
This macro should not be used; it is implemented for compatibility with
historical manuals.
d2957 4
a2960 8
Consider using
.Sx \&Pp
in the event of natural paragraph breaks.
.Ss \&sp
Emits vertical space.
This macro should not be used; it is implemented for compatibility with
historical manuals.
Its syntax is as follows:
d2962 23
a2984 9
.D1 Pf \. Sx \&sp Op Ar height
.Pp
The
.Ar height
argument must be formatted as described in
.Sx Scaling Widths .
If unspecified,
.Sx \&sp
asserts a single vertical space.
@


1.86
log
@sync to version 1.11.7 from kristaps@@
main new feature: support the roff(7) .tr request
plus various bugfixes and some refactoring

regressions are so minor that it's better to get this in
and fix them in the tree
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.85 2011/09/18 10:38:57 schwarze Exp $
d2195 5
a2199 5
.Dl ".Nm cat Fl v No considered harmful"
.Dl ".Nm cp Fl pR Ar source ... directory"
.Dl ".Nm find Ar dir Fl type Cm d Fl name Pa CVS"
.Dl ".Nm kill Fl Ar signal_number pid"
.Dl ".Nm su Fl"
@


1.85
log
@sync to mandoc 1.11.5:
document eqn(7) and many other improvements
from kristaps@@

no objection from deraadt@@ against adding an eqn.7 page
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.84 2011/09/17 21:09:54 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: September 17 2011 $
d726 5
a730 5
.It Sx \&It  Ta    \&No     Ta    Yes      Ta    closed by Sx \&It , Sx \&El
.It Sx \&Nd  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Sh
.It Sx \&Nm  Ta    \&No     Ta  Yes Ta closed by Sx \&Nm , Sx \&Sh , Sx \&Ss
.It Sx \&Sh  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Sh
.It Sx \&Ss  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Sh , Sx \&Ss
d1013 1
a1013 1
.It Sx \&Dd Ta document date: Cm $Mdocdate: September 17 2011 $ | Ar month day , year
d2878 3
d2925 3
@


1.84
log
@Add a MACRO OVERVIEW, listing all macros ordered by purpose,
each with a one-line discription.  Use this when wondering
which macro fits best for your particular use case, and whether
there are alternatives.
feedback ond ok  jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.83 2011/09/16 19:36:07 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: September 16 2011 $
d33 3
a35 1
The reference implementation is
d39 1
a39 1
section describes compatibility with other troff \-mdoc implementations.
d47 1
a47 1
Text lines, those not beginning with the control character, are
d57 7
a63 3
.Pp
If the first character of a text line is a space, that line is printed
with a leading newline.
d65 2
a66 2
Text following a
.Sq \e\*q ,
d69 2
a70 2
A macro line with only a control character and comment escape,
.Sq \&.\e\*q ,
d72 3
a74 1
Macro lines with only a control character and optional whitespace are
d76 8
d85 3
a87 1
Special characters may occur in both macro and text lines.
d97 9
a108 6
Examples include
.Sq \e(em
.Pq em-dash
and
.Sq \ee
.Pq back-slash .
d112 3
a114 6
escape followed by an indicator: B (bold), I (italic), R (Roman), or P
(revert to previous mode):
.Pp
.Dl \efBbold\efR \efIitalic\efP
.Pp
A numerical representation 3, 2, or 1 (bold, italic, and Roman,
d126 9
a134 1
Note this form is
d140 1
a140 5
Historically,
troff
also defined a set of package-specific
.Dq predefined strings ,
which, like
d142 1
a142 1
mark special output characters and strings by way of input codes.
d151 15
a165 9
See
.Xr mandoc_char 7
for a complete list.
Examples include
.Sq \e*(Am
.Pq ampersand
and
.Sq \e*(Ba
.Pq vertical bar .
d168 2
a169 4
In text lines, whitespace is preserved within a line; unescaped
trailing spaces are stripped from input (unless in a literal context).
Blank text lines, which may include whitespace, are only permitted
within literal contexts.
d171 4
a174 2
In general, trailing whitespace on input lines is discouraged
for reasons of clarity and portability.
d179 8
a186 1
In macro lines, whitespace delimits arguments and is discarded.
d188 4
a191 14
Macro arguments may be quoted with double-quotes; in this case,
whitespace within the quotes is retained as part of the argument.
For example,
.Pp
.D1 Pf \. \&Fn strlen "\(dqconst char *s\(dq"
.Pp
renders as
.Sq Fn strlen "const char *s" ,
while
.Pp
.D1 Pf \. \&Fn strlen "const char *s"
.Pp
would produce
.Sq Fn strlen const char *s .
d197 19
a215 14
In unquoted arguments, space characters can alternatively be included
by preceding them with a backslash
.Pq Sq \e\~ ,
but quoting is usually better for clarity.
.Pp
Note that any quoted text, even if it would cause a macro invocation
when unquoted, is considered literal text.
Thus, the following produces
.Sq Op "Fl a" :
.Bd -literal -offset indent
\&.Op "Fl a"
.Ed
.Pp
In text lines, quotes are regarded as opaque text.
d217 2
a218 7
Many macros support scaled widths for their arguments, such as
stipulating a two-inch list indentation with the following:
.Bd -literal -offset indent
\&.Bl -tag -width 2i
.Ed
.Pp
The syntax for scaled widths is
d222 1
d264 10
d275 2
a276 3
When composing a manual, make sure that sentences end at the end of
a line.
By doing so, front-ends will be able to apply the proper amount of
a288 1
For example:
d290 7
a296 2
.Dl \&.Xr mandoc 1 \&.
.Dl \&.Fl T \&Ns \&Cm ascii \&.
d334 3
a336 3
\&.\e\*q .Sh LIBRARY
\&.\e\*q For sections 2, 3, & 9 only.
\&.\e\*q Not used in OpenBSD.
d345 23
a367 23
\&.\e\*q .Sh IMPLEMENTATION NOTES
\&.\e\*q Not used in OpenBSD.
\&.\e\*q .Sh RETURN VALUES
\&.\e\*q For sections 2, 3, & 9 only.
\&.\e\*q .Sh ENVIRONMENT
\&.\e\*q For sections 1, 6, 7, & 8 only.
\&.\e\*q .Sh FILES
\&.\e\*q .Sh EXIT STATUS
\&.\e\*q For sections 1, 6, & 8 only.
\&.\e\*q .Sh EXAMPLES
\&.\e\*q .Sh DIAGNOSTICS
\&.\e\*q For sections 1, 4, 6, 7, & 8 only.
\&.\e\*q .Sh ERRORS
\&.\e\*q For sections 2, 3, & 9 only.
\&.\e\*q .Sh SEE ALSO
\&.\e\*q .Xr foobar 1
\&.\e\*q .Sh STANDARDS
\&.\e\*q .Sh HISTORY
\&.\e\*q .Sh AUTHORS
\&.\e\*q .Sh CAVEATS
\&.\e\*q .Sh BUGS
\&.\e\*q .Sh SECURITY CONSIDERATIONS
\&.\e\*q Not used in OpenBSD.
d448 2
a449 2
\&.Cd \*qit* at isa? port 0x2e\*q
\&.Cd \*qit* at isa? port 0x4e\*q
d1013 1
a1013 1
.It Sx \&Dd Ta document date: Cm $Mdocdate$ | Ar month day , year
d2222 2
a2223 2
.Dl \&.Fn \*qint funcname\*q \*qint arg0\*q \*qint arg1\*q
.Dl \&.Fn funcname \*qint arg0\*q
d2428 1
a2428 1
is only recognized as a macro when called by other macros,
d2488 1
a2488 1
.Dl \&.Lk http://bsd.lv \*qThe BSD.lv Project\*q
d3216 1
a3216 1
does not recognize trailing punctuation characters when they immediately
d3328 1
a3328 1
Groff does not implement centered and flush-right rendering either,
d3364 1
d3384 2
a3385 1
.An Kristaps Dzonsons Aq kristaps@@bsd.lv .
@


1.83
log
@after some thought, i think it unlikely that we will need to specify
a revision number for ISO 8601; in addition, the revision number makes
the text unwieldy when discussing the standard in a casual manner.

therefore change the macro from -8601-4 to simply -8601, which will output
"ISO 8601". i'll get kristaps or ingo to make the change upstream to mandoc.

discussed with/ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.82 2011/09/09 15:29:21 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: September 9 2011 $
d967 124
@


1.82
log
@add an St macro for ISO 8601:2004;
ok kristaps (who will update the mandoc repo)
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.81 2011/08/30 12:25:09 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: August 30 2011 $
d2833 2
a2834 2
.It \-iso8601-4
.St -iso8601-4
@


1.81
log
@in column lists, enforce the following ordering:

	.Bl -column header1 header2 ... <Bl flags>

mixing things up confuses mandoc, and adding flags in can screw up the list.
this hopefully just makes things a bit safer (and more consistent).

(one more bit of work left and all column lists should format how we want)
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.80 2011/08/30 11:38:59 jmc Exp $
d2833 2
@


1.80
log
@remove some pointless Pp/-compact combinations; either ingo or kristaps
will update mandoc repo
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.79 2011/08/16 23:27:52 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 16 2011 $
d653 1
a653 1
.Bl -column -offset indent "MacroX" "CallableX" "ParsedX" "closed by XXX"
d685 1
a685 1
.Bl -column -offset indent "MacroX" "CallableX" "ParsedX" "closed by XXXXXXXXXXX"
@


1.79
log
@More information about lots of macros, many new examples, and various fixes.
ok kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.78 2011/08/03 21:03:11 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 3 2011 $
d653 1
a653 2
.Pp
.Bl -column -compact -offset indent "MacroX" "CallableX" "ParsedX" "closed by XXX"
d685 1
a685 2
.Pp
.Bl -column -compact -offset indent "MacroX" "CallableX" "ParsedX" "closed by XXXXXXXXXXX"
d720 1
a720 2
.Pp
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -compact -offset indent
d753 1
a753 2
.Pp
.Bl -column "MacroX" "CallableX" "ParsedX" -compact -offset indent
d788 1
a788 2
.Pp
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -compact -offset indent
d806 1
a806 2
.Pp
.Bl -column "MacroX" "CallableX" "ParsedX" "Arguments" -compact -offset indent
@


1.78
log
@Add small chunks of new text and better examples written from scratch,
filling gaps found by checking the MANUAL DOMAIN chapter in mdoc.samples(7).
While here, fix lots of minor issues.
feedback and ok jmc@@;
tree is locked, but ok to commit this one from deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.77 2011/08/02 00:52:34 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 2 2011 $
d474 15
d550 4
d555 2
d567 2
a568 1
A brief history of the subject, including where support first appeared.
d1201 1
a1201 1
Centre-justify each line.
d1206 2
a1207 1
Left- and right-justify the block.
d1209 2
a1210 1
Do not justify the block at all.
d1212 2
d1215 2
a1216 1
Only left-justify the block.
d1218 4
a1221 2
An alias for
.Fl literal .
d1237 1
a1237 1
the width of standard indentation;
d1414 3
a1416 1
.\" but with additional formatting to the head.
d1419 1
d1459 7
d1542 1
a1542 1
.Dq is currently in beta test .
d1548 1
d1907 2
a1908 1
Denotes text that should be emphasised.
d1911 2
d1920 2
a1921 1
.Sx \&Sy ,
d1923 1
a1923 1
.Sx \&Li .
d2040 1
a2040 1
.Dl ".Nm find Ar dir Fl type Cm d Fl name Pa CVS
d2115 7
a2121 1
This macro is obsolete and not implemented.
d2164 7
a2170 1
This macro is obsolete and not implemented.
d2309 3
a2311 1
Denotes text that should be in a literal font mode.
d2315 3
d2320 2
a2321 1
.Sx \&Sy ,
d2323 1
a2323 1
.Sx \&Em .
d2367 2
a2368 2
.Dl \&.Sx \&Nd mdoc language reference
.Dl \&.Sx \&Nd format and display UNIX manuals
d2420 9
a2428 3
A
.Dq noop
macro used to terminate prior macro contexts.
d2431 13
a2443 1
.Dl \&.Sx \&Fl ab \&No cd \&Fl ef
d2445 6
a2450 3
Suppress a space.
Following invocation, text is interpreted as free-form text until a
macro is encountered.
d2455 3
a2457 1
.Dl \&.Fl o \&Ns \&Ar output
d2535 2
a2536 1
Unknown usage.
d2538 4
a2541 2
.Em Remarks :
this macro has been deprecated.
d2577 1
a2577 1
Removes the space
d2579 1
a2579 1
between its arguments.
d2582 3
a2584 1
.D1 Pf \. \&Pf Ar prefix suffix
d2586 1
a2586 3
The
.Ar suffix
argument may be a macro.
d2589 7
a2595 1
.Dl \&.Pf \e. \&Sx \&Pf \&Ar prefix suffix
d2603 12
d2634 1
a2634 1
.Dq typewriter
d2745 1
a2745 1
.Dq typewriter
d2754 1
a2754 1
Begin a new sub-section.
d2757 6
a2762 4
there's no convention for sub-sections.
Conventional sections, as described in
.Sx MANUAL STRUCTURE ,
rarely have sub-sections.
d2871 2
a2872 2
Reference a section or sub-section.
The referenced section or sub-section name must be identical to the
d2890 1
d2893 1
a2893 1
.Sx \&Em .
d2902 5
d2911 1
a2911 1
.Dq currently under development .
a3206 1
.Xr mdoc.samples 7 ,
@


1.77
log
@The term "reserved characters" is too broad, so narrow it down
to "delimiters", and explain which special handling they get
as macro arguments.  Move the text to a better place and remove
a few lies.  Postpone figuring out the lists of macros causing
that special handling, it would cost too much time right now.
feedback and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.76 2011/08/01 07:45:08 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 1 2011 $
d1040 2
d1112 11
a1122 3
.Dl \&.Fl o \&Ns \&Ar file1
.Dl \&.Ar
.Dl \&.Ar arg1 , arg2 .
d1525 1
d1538 4
a1541 1
Useful when specifying configuration options or keys.
d1544 5
a1548 5
.Dl \&.Cm ControlPath
.Dl \&.Cm ControlMaster
.Pp
See also
.Sx \&Fl .
d1898 1
d1923 1
d1984 1
a1984 1
Command-line flag.
d1994 5
a1998 4
.Dl \&.Fl a b c
.Dl \&.Fl \&Pf a b
.Dl \&.Fl
.Dl \&.Op \&Fl o \&Ns \&Ar file
d2015 4
d2024 1
d2034 2
a2035 1
.Sx MANUAL STRUCTURE
d2062 1
d2078 4
d2122 1
d2137 1
a2137 1
In the
d2139 2
a2140 2
section (only if invoked as the line macro), the first argument is
preceded by
d2142 3
a2144 1
the arguments is enclosed in angle brackets.
d2147 1
a2147 1
.Dl \&.In sys/types
d2412 1
a2412 2
Command-line option.
Used when listing options to command-line utilities.
d2414 3
d2474 3
a2476 3
A file-system path.
If an argument is not provided, the string
.Dq \(ti
d2739 1
d2827 1
a2827 1
syntax when invoked as the first macro in the
d2832 3
@


1.76
log
@Add some new text written from scratch after checking whether anything
explained in mdoc.samples(7) is missing from mdoc(7):
* Discourage trailing whitespace.
* Move all information about quoted arguments to the relevant
  subsection, shortening it a bit, and adding an example.
* Mention that blanks can be quoted with a backslash.
* A better .Nd line in the template (verbatim from mdoc.samples(7)).
* Explain how to escape callable macro names, and provide examples.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.75 2011/07/31 17:12:29 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 31 2011 $
a67 37
.Ss Reserved Characters
Within a macro line, the following characters are reserved:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&.
.Pq period
.It \e.
.Pq escaped period
.It \&,
.Pq comma
.It \&:
.Pq colon
.It \&;
.Pq semicolon
.It \&(
.Pq left-parenthesis
.It \&)
.Pq right-parenthesis
.It \&[
.Pq left-bracket
.It \&]
.Pq right-bracket
.It \&?
.Pq question
.It \&!
.Pq exclamation
.It \&|
.Pq vertical bar
.It \e*(Ba
.Pq reserved-word vertical bar
.El
.Pp
For general use in macro lines, these characters can either be escaped
with a non-breaking space
.Pq Sq \e&
or, if applicable, an appropriate escape sequence can be used.
In text lines, these may be used as normal punctuation.
d595 1
a595 1
escape it by prepending a non-breaking space,
d729 2
a730 3
Like block full-implicit, but with single-line scope closed by
.Sx Reserved Characters
or end of line.
d776 2
a777 3
Closed by
.Sx Reserved Characters ,
end of line, fixed argument lengths, and/or subsequent macros.
d867 84
d2965 1
a2965 1
followed by a reserved character is incorrectly used in some manuals
@


1.75
log
@clarify .Ex and .Rv documentation; from kristaps@@, tweaked a bit
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.74 2011/07/24 02:52:56 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 24 2011 $
d182 6
a188 1
If arguments are quoted, whitespace within the quotes is retained.
d190 15
a204 2
Macro arguments may be quoted with double-quotes to group
space-delimited terms or to retain blocks of whitespace.
d209 5
d331 1
a331 1
\&.Nd a description goes here
d627 11
@


1.74
log
@AT&T recently released a new version of UNIX (System III).
This will soon be needed for the HISTORY of string(3).
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.73 2011/07/15 20:34:34 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 15 2011 $
d1827 2
a1828 1
Insert a standard sentence regarding exit values.
d1831 1
a1831 1
.D1 Pf \. Sx \&Ex Fl std Op Ar utility
d1833 1
a1833 1
When
d1838 3
d2472 8
a2479 5
Inserts text regarding a function call's return value.
This macro must consist of the
.Fl std
argument followed by an optional
.Ar function .
d2482 1
a2482 1
is not provided, the document's name as stipulated by the first
d2484 4
a2487 1
is provided.
@


1.73
log
@improve documentation of .Bl -column .It Ta
using feedback from kristaps@@, ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.72 2011/07/15 10:28:35 schwarze Exp $
d1042 2
d1053 1
@


1.72
log
@be more specific about .Dv, .Er, and .Ev; from kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.71 2011/07/07 20:24:12 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: July 7 2011 $
d764 15
d1960 2
d2084 2
a2085 1
.D1 Pf \. Sx \&It Op Cm args
d2087 6
a2092 7
The
.Cm args
are phrases, a mix of macros and text corresponding to a line column,
delimited by tabs or the special
.Sq \&Ta
pseudo-macro.
Lines subsequent the
d2094 8
a2101 6
are interpreted within the scope of the last phrase.
Calling the pseudo-macro
.Sq \&Ta
will open a new phrase scope (this must occur on a macro line to be
interpreted as a macro).
Note that the tab phrase delimiter may only be used within the
d2103 2
a2104 8
line itself.
Subsequent this, only the
.Sq \&Ta
pseudo-macro may be used to delimit phrases.
Furthermore, note that quoted sections propagate over tab-delimited
phrases on an
.Sx \&It ,
for example,
d2659 5
d2813 1
a2813 1
.Sx \&Bd Fl column
@


1.71
log
@no more mvmeppc;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.70 2011/06/07 23:40:10 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 7 2011 $
d1694 2
a1695 1
Defined variables such as preprocessor constants.
d1698 1
d1703 6
a1708 1
.Sx \&Er .
d1784 3
a1786 1
Display error constants.
d1793 2
a1794 1
.Sx \&Dv .
d1804 4
@


1.70
log
@bring in lots of improvements from kristaps@@;
jmc@@ agrees that it's easiest to first commit it,
then tweak it in the tree
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.69 2011/06/05 17:24:15 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: June 5 2011 $
a1672 1
.Ar mvmeppc ,
@


1.69
log
@fix a formatting error, as reported by Mikolaj Kucharski;
ingo will sync upstream
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.68 2011/05/16 16:39:52 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: May 16 2011 $
d45 2
a46 2
Other lines are interpreted within the scope of
prior macros:
d49 1
a49 1
Other lines are interpreted within the current state.
d56 1
a56 1
If the first character of a line is a space, that line is printed
d61 1
a61 1
whether in a macro or free-form text line, is ignored to the end of
d74 2
d96 2
d104 1
d106 1
a106 1
Special characters may occur in both macro and free-form lines.
d135 7
a141 3
A text decoration is valid within
the current font scope only: if a macro opens a font scope alongside
its own scope, such as
d143 1
a143 8
.Cm \&Sy ,
in-scope invocations of
.Sq \ef
are only valid within the font scope of the macro.
If
.Sq \ef
is specified outside of any font scope, such as in unenclosed, free-form
text, it will affect the remainder of the document.
d177 1
a177 1
In free-form lines, whitespace is preserved within a line; unescaped
d179 1
a179 1
Blank free-form lines, which may include whitespace, are only permitted
d199 1
a199 1
In free-form mode, quotes are regarded as opaque text.
d270 2
a271 2
.Dl \&Xr mandoc 1 \.
.Dl \&Fl T \&Ns \&Cm ascii \.
d300 2
a301 1
file:
d304 1
a304 1
\&.Dt mdoc 7
d307 1
a307 1
\&.Nm foo
d313 1
a313 1
\&.Nm foo
d360 4
d391 1
a391 1
\&.Nm foo
d395 1
a395 1
\&.Nm bar
d401 2
d413 8
d469 9
a477 3
This expands upon the brief, one line description in
.Em NAME .
It usually contains a breakdown of the options (if documenting a
d625 4
a628 1
contains a head.
d826 1
a826 1
.It Sx \&In  Ta    \&No     Ta    \&No     Ta    n
d1064 1
a1064 1
They may contain both macro lines and free-form text lines.
d1182 1
a1182 1
Line breaks in free-form text lines are unaffected.
d1876 3
a1878 3
.Op Cm functype
.Cm funcname
.Op Oo Cm argtype Oc Cm argname
d1886 2
a1887 2
.Dl \&.Fn "int funcname" "int arg0" "int arg1"
.Dl \&.Fn funcname "int arg0"
d1907 1
a1907 1
.D1 Pf \. Sx \&Fo Cm funcname
d1911 1
a1911 1
.Pf \. Sx \&Ft Cm functype
d1913 1
a1913 1
.Pf \. Sx \&Fo Cm funcname
d1915 1
a1915 1
.Pf \. Sx \&Fa Oo Cm argtype Oc Cm argname
d1917 1
a1917 1
\.\.\.
d1936 1
a1936 1
.D1 Pf \. Sx \&Ft Cm functype
d2017 1
a2017 1
.D1 Pf \. Sx \&It Cm args
d2090 1
a2090 1
.D1 Pf \. Sx \&Lb Cm library
d2093 1
a2093 1
.Cm library
d2123 1
a2123 1
.D1 Pf \. Sx \&Lk Cm uri Op Cm name
d2138 1
a2138 1
.D1 Pf \. Sx \&Ms Cm symbol
d2149 1
a2149 1
.D1 Pf \. Sx \&Mt Cm address
d2287 1
a2287 1
.D1 Pf \. Sx \&Os Op Cm system Op Cm version
d2290 1
a2290 1
.Cm system
d2349 1
a2349 1
.D1 Pf \. \&Pf Cm prefix suffix
d2352 1
a2352 1
.Cm suffix
d2356 1
a2356 1
.Dl \&.Pf \e. \&Sx \&Pf \&Cm prefix suffix
d2481 1
a2481 1
output generated from adjacent macros, but free-form text lines
d2704 1
a2704 1
.D1 Pf \. Sx \&Xr Cm name section
d2707 1
a2707 1
.Cm name
d2709 1
a2709 1
.Cm section
d2712 1
a2712 1
.Cm section
d2737 1
a2737 1
.D1 Pf \. Sx \&sp Op Cm height
d2740 1
a2740 1
.Cm height
@


1.68
log
@remove a sentence which isn;t true; ingo will sync upstream
ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.67 2011/04/17 11:54:54 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: April 17 2011 $
d43 1
a43 1
.Sq \.
@


1.67
log
@The semantics of .Bk was described incorrectly
for the case of multiple sibling macros on a single input line.
Issue found investigating a question from sobrado@@.
"I like this diff" kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.66 2011/03/07 01:35:33 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: March 7 2011 $
a95 2
Use of reserved characters is described in
.Sx MACRO SYNTAX .
@


1.66
log
@Clean up date handling,
as a first step to get rid of the frequent petty warnings in this area:
 - always store dates as strings, not as seconds since the Epoch
 - for input, try the three most common formats everywhere
 - for unrecognized format, just pass the date though verbatim
 - when there is no date at all, still use the current date
Originally triggered by a one-line patch from Tim van der Molen,
<tbvdm at xs4all dot nl>, which is included here.
Feedback and OK on manual parts from jmc@@.
"please check this in" kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.65 2011/02/07 00:02:50 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: February 7 2011 $
d1155 3
a1157 2
Keep the output generated from each macro input line together
on one single output line.
@


1.65
log
@Between groff-1.15 and groff-1.20.1, the .Ns macro was changed to no
longer suppress spacing when used at the beginning of an input line,
and mandoc now follows the same behaviour as new groff.
Thus, sweep the tree and remove useless .Ns.
Most places found by jmc@@; ok jmc@@ kristaps@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.64 2011/02/06 17:33:20 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: February 6 2011 $
a199 28
.Ss Dates
There are several macros in
.Nm
that require a date argument.
The canonical form for dates is the American format:
.Pp
.D1 Cm Month Day , Year
.Pp
The
.Cm Day
value is an optionally zero-padded numeral.
The
.Cm Month
value is the full month name.
The
.Cm Year
value is the full four-digit year.
.Pp
Reduced form dates are broken-down canonical form dates:
.Pp
.D1 Cm Month , Year
.D1 Cm Year
.Pp
Some examples of valid dates follow:
.Pp
.D1 "May, 2009" Pq reduced form
.D1 "2009" Pq reduced form
.D1 "May 20, 2009" Pq canonical form
d861 4
a864 2
This should follow the reduced or canonical form syntax described in
.Sx Dates .
d1446 1
a1446 1
.D1 Pf \. Sx \&Dd Op Ar date
d1449 15
a1463 4
.Ar date
may be either
.Ar $\&Mdocdate$ ,
which signifies the current manual revision date dictated by
d1465 11
a1475 3
or instead a valid canonical date as specified by
.Sx Dates .
If a date does not conform or is empty, the current date is used.
d2767 6
a2772 3
without an argument prints
.Dq Epoch .
In mandoc, it resolves to the current date.
@


1.64
log
@If .Ns is specified on its own line, ignore it, like groff does;
from kristaps@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.63 2011/01/25 00:37:39 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 25 2011 $
d286 3
a288 2
delimiters (
.Ns Sq \&) ,
d291 2
a292 1
.Sq \&" ) .
@


1.63
log
@As noticed by deraadt@@, it goes without saying that text files
on a UNIX system use UNIX conventions, and UNIX tools working
on them expect that.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.62 2011/01/22 14:05:28 schwarze Exp $
d3 1
a3 1
.\" Copyright (c) 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
d18 1
a18 1
.Dd $Mdocdate: January 22 2011 $
d2205 2
@


1.62
log
@Lots of in-line macros require arguments but were not marked as such.
Check prompted by kristaps@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.61 2011/01/16 02:56:47 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 16 2011 $
a54 3
All manuals must have
.Ux
line terminators.
@


1.61
log
@If the first character of a free-form text input line is whitespace,
then it will start a new output line;
from kristaps@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.60 2011/01/09 15:24:57 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 9 2011 $
d801 2
a802 2
.It Sx \&Ad  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&An  Ta    Yes      Ta    Yes      Ta    n
d810 1
a810 1
.It Sx \&Cm  Ta    Yes      Ta    Yes      Ta    n
d814 1
a814 1
.It Sx \&Dv  Ta    Yes      Ta    Yes      Ta    n
d820 1
a820 1
.It Sx \&Ev  Ta    Yes      Ta    Yes      Ta    n
d822 1
a822 1
.It Sx \&Fa  Ta    Yes      Ta    Yes      Ta    n
d827 1
a827 1
.It Sx \&Ft  Ta    Yes      Ta    Yes      Ta    n
d833 2
a834 2
.It Sx \&Li  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Lk  Ta    Yes      Ta    Yes      Ta    n
@


1.60
log
@Add and install tbl(7);
written by kristaps@@, looked over by jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.59 2011/01/09 12:49:22 schwarze Exp $
d58 3
@


1.59
log
@Sync to bsd.lv:
* one additional pair of .Sx cross references
* prefer .Dl over .D1 for code examples
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.58 2010/12/22 23:45:42 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: December 22 2010 $
d2906 1
d2908 3
a2910 1
.Xr mdoc.samples 7
@


1.58
log
@minor tweaks:
- improve .Bl wording (from jmc@@)
- document .Pa default (from kristaps@@)
- fix formatting of one COMPATIBILITY note: move "and" out of .Sx
ok jmc@@, kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.57 2010/11/30 20:35:56 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: November 30 2010 $
d128 1
a128 1
.D1 \efBbold\efR \efIitalic\efP
d296 2
a297 2
.D1 \&Xr mandoc 1 \.
.D1 \&Fl T \&Ns \&Cm ascii \.
d942 2
a943 2
.D1 \&.Ad [0,$]
.D1 \&.Ad 0x00000000
d973 2
a974 2
.D1 \&.An -nosplit
.D1 \&.An Kristaps Dzonsons \&Aq kristaps@@bsd.lv
d980 1
a980 1
.D1 \&.Fl -key= \&Ns \&Ao \&Ar val \&Ac
d990 1
a990 1
.D1 \&.Fn execve \&Ap d
d995 1
a995 1
.D1 \&.Fl -key= \&Ns \&Aq \&Ar val
d1016 3
a1018 3
.D1 \&.Fl o \&Ns \&Ar file1
.D1 \&.Ar
.D1 \&.Ar arg1 , arg2 .
d1035 2
a1036 2
.D1 \&.At
.D1 \&.At V.1
d1339 1
a1339 1
.D1 \&.Bq 1 , \&Dv BUFSIZ
d1372 1
a1372 1
.D1 \&.Brq 1 , ... , \&Va n
d1381 2
a1382 2
.D1 \&.Bsx 1.0
.D1 \&.Bsx
d1401 2
a1402 2
.D1 \&.Bx 4.4
.D1 \&.Bx
d1419 1
a1419 1
.D1 \&.Cd device le0 at scode?
d1432 2
a1433 2
.D1 \&.Cm ControlPath
.D1 \&.Cm ControlMaster
d1444 1
a1444 1
.D1 \&.D1 \&Fl abcdefgh
d1483 3
a1485 3
.D1 \&.Dd $\&Mdocdate$
.D1 \&.Dd $\&Mdocdate: July 21 2007$
.D1 \&.Dd July 21, 2007
d1498 1
a1498 1
.D1 \&.Dl % mandoc mdoc.7 \e(ba less
d1666 3
a1668 3
.D1 \&.Dt FOO 1
.D1 \&.Dt FOO 4 KM
.D1 \&.Dt FOO 9 i386
d1678 2
a1679 2
.D1 \&.Dv BUFSIZ
.D1 \&.Dv STDOUT_FILENO
d1688 2
a1689 2
.D1 \&.Dx 2.4.1
.D1 \&.Dx
d1735 2
a1736 2
.D1 \&.Em Warnings!
.D1 \&.Em Remarks :
d1761 2
a1762 2
.D1 \&.Er EPERM
.D1 \&.Er ENOENT
d1773 2
a1774 2
.D1 \&.Ev DISPLAY
.D1 \&.Ev PATH
d1814 3
a1816 3
.D1 \&.Fa \(dqconst char *p\(dq
.D1 \&.Fa \(dqint a\(dq \(dqint b\(dq \(dqint c\(dq
.D1 \&.Fa foo
d1844 4
a1847 4
.D1 \&.Fl a b c
.D1 \&.Fl \&Pf a b
.D1 \&.Fl
.D1 \&.Op \&Fl o \&Ns \&Ar file
d1866 3
a1868 3
.D1 \&.Fn "int funcname" "int arg0" "int arg1"
.D1 \&.Fn funcname "int arg0"
.D1 \&.Fn funcname arg0
d1919 1
a1919 1
.D1 \&.Ft int
d1937 2
a1938 2
.D1 \&.Fx 7.1
.D1 \&.Fx
d1958 2
a1959 2
.D1 \&.Ic hash
.D1 \&.Ic alias
d1980 1
a1980 1
.D1 \&.In sys/types
d2060 1
a2060 1
.D1 .It \(dqcol1 ; <TAB> col2 ;\(dq \&;
d2087 2
a2088 2
.D1 \&.Lb libz
.D1 \&.Lb mdoc
d2106 2
a2107 2
.D1 \&.Lk http://bsd.lv \*qThe BSD.lv Project\*q
.D1 \&.Lk http://bsd.lv
d2121 2
a2122 2
.D1 \&.Ms sigma
.D1 \&.Ms aleph
d2132 1
a2132 1
.D1 \&.Mt discuss@@manpages.bsd.lv
d2142 2
a2143 2
.D1 \&.Sx \&Nd mdoc language reference
.D1 \&.Sx \&Nd format and display UNIX manuals
d2200 1
a2200 1
.D1 \&.Sx \&Fl ab \&No cd \&Fl ef
d2207 1
a2207 1
.D1 \&.Fl o \&Ns \&Ar output
d2220 2
a2221 2
.D1 \&.Nx 5.01
.D1 \&.Nx
d2252 2
a2253 2
.D1 \&.Op \&Fl a \&Ar b
.D1 \&.Op \&Ar a | b
d2274 3
a2276 3
.D1 \&.Os
.D1 \&.Os KTH/CSC/TCS
.D1 \&.Os BSD 4.3
d2294 2
a2295 2
.D1 \&.Ox 4.5
.D1 \&.Ox
d2313 2
a2314 2
.D1 \&.Pa /usr/bin/mandoc
.D1 \&.Pa /usr/share/man/man7/mdoc.7
d2334 1
a2334 1
.D1 \&.Pf \e. \&Sx \&Pf \&Cm prefix suffix
d2594 6
a2599 1
.D1 \&.Sx MANUAL STRUCTURE
d2615 1
a2615 1
.D1 \&.Tn IBM
d2624 1
a2624 1
.D1 \&.Ux
d2639 2
a2640 2
.D1 \&.Va foo
.D1 \&.Va const char *bar ;
d2659 2
a2660 2
.D1 \&.Vt unsigned char
.D1 \&.Vt extern const char * const sys_signame[] \&;
d2698 3
a2700 3
.D1 \&.Xr mandoc 1
.D1 \&.Xr mandoc 1 \&;
.D1 \&.Xr mandoc 1 \&Ns s behaviour
@


1.57
log
@Be more specific about what .Xo can be used for.
jmc@@ calls this change "sufficient"
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.56 2010/11/28 15:45:26 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: November 28 2010 $
d1204 1
a1204 1
Lists consist of items started by the
d2308 3
d2737 10
@


1.56
log
@Define the terms "callable" and "parsed" with more precision.
Be more specific about what "historic groff" refers to.
Explicitely mention the nine argument limit below COMPATIBILITY.
feedback and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.55 2010/10/29 10:36:08 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: October 29 2010 $
d2662 7
a2668 3
Open an extension scope.
This macro originally existed to extend the 9-argument limit of troff;
since this limit has been lifted, the macro has been deprecated.
@


1.55
log
@Referring to terms explained in other manuals, always use .Xr.
Otherwise, hyperlinks can't be produced and people will likely
miss the additional information available.
Requested by deraadt@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.54 2010/10/24 14:49:33 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: October 24 2010 $
d607 5
a611 4
column indicates that the macro may be called subsequent to the initial
line-macro.
If a macro is not callable, then its invocation after the initial line
macro is interpreted as opaque text, such that
d618 4
a621 4
column indicates whether the macro may be followed by further
(ostensibly callable) macros.
If a macro is not parsed, subsequent macro invocations on the line
will be interpreted as opaque text.
d2718 2
a2719 1
refers to groff versions before the
d2721 1
a2721 2
file re-write
.Pq somewhere between 1.15 and 1.19 .
d2811 5
@


1.54
log
@When mentioning a function documented elsewhere, .Xr is often better than .Fn.
Prodded by guenther@@, ok jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.53 2010/09/26 19:40:27 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: September 26 2010 $
d1873 1
a1873 1
When referring to a function documented in another manual page,
d1875 1
a1875 1
is usually preferable.
@


1.53
log
@sync to bsd.lv:
note that \k, \o, \w, \z roff escapes are ignored by mandoc(1)
add a short HISTORY to mdoc(7)
move the sentence telling which sections use LIBRARY in man(7)
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.52 2010/09/26 15:10:20 jmc Exp $
d1873 3
@


1.52
log
@add a "mips64" architecture; requested by/ok miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.51 2010/09/04 08:00:15 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: September 4 2010 $
d2851 8
d2862 1
a2862 2
.Sx Text Decoration
escapes are all discarded in mandoc.
d2877 11
@


1.51
log
@EXIT STATUS is allowed for section 6 pages too (even though none of our
section 6 pages currently contain this information);
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.50 2010/08/31 17:51:31 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: August 31 2010 $
d1649 1
@


1.50
log
@this diff does two things (usually a bad sign):
- note which section headings (.Sh) are not used by openbsd
- move the description of the section heading to under the heading, rather
than before it: a much more logical way to read

diffs mailed upstream...
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.49 2010/08/22 11:39:18 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 22 2010 $
d353 1
a353 1
\&.\e\*q For sections 1 & 8 only.
@


1.49
log
@* sort COMPATIBILITY in mdoc(7); ok kristaps@@
* update escape COMPATIBILITY in mdoc(7) and man(7); from kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.48 2010/08/18 01:59:59 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 18 2010 $
a333 1
\&.\e\*q The next is for sections 2, 3, & 9 only.
d335 2
d346 1
a346 1
\&.\e\*q The next is for sections 2, 3, & 9 only.
d348 1
a348 1
\&.\e\*q The next is for sections 1, 6, 7, & 8 only.
d350 1
a351 1
\&.\e\*q The next is for sections 1, 6 & 8 only.
d353 1
a354 1
\&.\e\*q The next is for sections 1, 4, 6, 7, & 8 only.
d356 1
a356 1
\&.\e\*q The next is for sections 2, 3, & 9 only.
d358 1
d367 1
@


1.48
log
@Correctly display quotes around the .Lk link-name argument,
as noted by Aldis Berzoja.
In COMPATIBILITY, note that groff is misformatting .Lk
when given more than two arguments; from kristaps@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.47 2010/08/07 19:22:50 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 7 2010 $
d2718 3
d2723 6
a2728 3
groff only accepts a single
.Sq \&Lk
link-name argument; the remainder is misformatted.
d2730 8
a2737 3
The
.Sq \&%C
macro is not implemented in groff.
d2739 2
a2740 3
An empty
.Sq \&Dd
macro in groff prints
d2744 3
a2746 2
The \es (font size), \em (font colour), and \eM (font filling colour)
font decoration escapes are all discarded in mandoc.
d2748 5
a2752 2
Old groff fails to assert a newline before
.Sx \&Bd Fl ragged compact .
d2754 2
a2755 1
groff behaves inconsistently when encountering
d2757 2
a2758 7
children of
.Sx \&Fo
regarding spacing between arguments.
In mandoc, this is not the case: each argument is consistently followed
by a single space and the trailing
.Sq \&)
suppresses prior spacing.
a2759 1
groff behaves inconsistently when encountering
a2760 2
and
.Sx \&Fn
d2762 2
a2763 2
.Em SYNOPSIS :
at times newline(s) are suppressed depending on whether a prior
a2765 1
In mandoc, this is not the case.
d2770 1
a2770 1
for the normalised behaviour.
d2772 4
a2775 5
Historic groff does not break before an
.Sx \&Fn
when not invoked as the line macro in the
.Em SYNOPSIS
section.
d2777 8
a2784 5
Historic groff formats the
.Sx \&In
badly: trailing arguments are trashed and
.Em SYNOPSIS
is not specially treated.
d2786 4
a2789 4
groff does not accept the
.Sq \&Ta
pseudo-macro as a line macro.
mandoc does.
d2791 2
a2792 3
The comment syntax
.Sq \e\."
is no longer accepted.
a2793 1
In groff, the
d2795 1
a2795 1
macro does not format its arguments when used in the FILES section under
a2796 1
mandoc does.
d2798 13
a2810 4
Historic groff does not print a dash for empty
.Sx \&Fl
arguments.
mandoc and newer groff implementations do.
a2811 1
groff behaves irregularly when specifying
d2813 4
d2818 1
a2818 2
within line-macro scopes.
mandoc follows a consistent system.
d2820 7
a2826 5
In mandoc, negative scaling units are truncated to zero; groff would
move to prior lines.
Furthermore, the
.Sq f
scaling unit, while accepted, is rendered as the default unit.
d2828 2
a2829 3
In quoted literals, groff allowed pairwise double-quotes to produce a
standalone double-quote in formatted output.
This idiosyncratic behaviour is not applicable in mandoc.
a2830 1
Display offsets
d2834 13
a2846 7
.Fl offset Ar right
are disregarded in mandoc.
Furthermore, troff specifies a
.Fl file Ar file
argument that is not supported in mandoc.
Lastly, since text is not right-justified in mandoc (or even groff),
.Fl ragged
d2848 4
a2851 5
.Fl filled
are aliases, as are
.Fl literal
and
.Fl unfilled .
d2853 3
a2855 2
Historic groff has many un-callable macros.
Most of these (excluding some block-level macros) are now callable.
d2857 3
a2859 32
The vertical bar
.Sq \(ba
made historic groff
.Qq go orbital
but has been a proper delimiter since then.
.It
.Sx \&It Fl nested
is assumed for all lists (it wasn't in historic groff): any list may be
nested and
.Fl enum
lists will restart the sequence only for the sub-list.
.It
Some manuals use
.Sx \&Li
incorrectly by following it with a reserved character and expecting the
delimiter to render.
This is not supported in mandoc.
.It
In groff, the
.Sx \&Cd ,
.Sx \&Er ,
.Sx \&Ex ,
and
.Sx \&Rv
macros were stipulated only to occur in certain manual sections.
mandoc does not have these restrictions.
.It
Newer groff and mandoc print
.Qq AT&T UNIX
prior to unknown arguments of
.Sx \&At ;
older groff did nothing.
@


1.47
log
@sync to bsd.lv:
* When discussing compatibility, be more specific whether we are
  referring to GNU troff or to troff in general.
* Move one compatibility note to the appropriate section.
* And a few minor tweaks.
While here, EXIT STATUS is also ok in section 6.
With permission from deraadt@@ to still improve mandoc manuals.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.46 2010/08/03 00:07:57 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 3 2010 $
d2098 1
a2098 1
.D1 \&.Lk http://bsd.lv "The BSD.lv Project"
d2720 4
d2726 1
a2726 1
macro is not implemented in GNU troff.
@


1.46
log
@tweaks from jmc@@:
* correct a few obvious mistakes
* adopt some of jmc@@'s recent changes to man(7)
* cut down just a little on the awful tendency
  to stick a hyphen between two words.

"yes" deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.45 2010/08/01 20:47:52 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 1 2010 $
d152 1
a152 1
.Xr groff 1
d350 1
a350 1
\&.\e\*q The next is for sections 1 & 8 only.
d421 1
a422 1
\&.In header.h
d573 1
a573 1
Known bugs, limitations and work-arounds should be described
a878 4
.Pp
.Em Remarks :
this macro is not implemented in
.Xr groff 1 .
d2675 1
a2675 1
.Xr groff 1 .
d2719 4
@


1.45
log
@The explanations of the HISTORY and AUTHORS sections were nicer
in the old mdoc(7) manual than in the new one, so put them back.
While here, fix the .Os synopsis and add two more .Xrs.
Do the same in man(7), as far as it is applicable.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.44 2010/08/01 20:37:51 schwarze Exp $
d31 1
a31 1
In this reference document, we describe its syntax, structure, and
d33 3
a35 1
Our reference implementation is mandoc; the
d66 1
a66 1
Macro lines with only a control character and optionally whitespace are
d112 1
a112 1
or a single one-character sequence.
d125 1
a125 1
escape followed by an indicator: B (bold), I, (italic), R (Roman), or P
d177 1
a177 1
In free-form lines, whitespace is preserved within a line; un-escaped
d188 1
a188 1
The next double-quote not pair-wise adjacent to another double-quote
d281 1
a281 1
When composing a manual, make sure that your sentences end at the end of
d293 2
a294 1
the boundary of a macro line, e.g.,
d367 1
a367 1
The sections in a
d373 1
a373 1
The name(s) and a one-line description of the documented material.
d376 2
a377 2
\&.Nm name0
\&.Nm name1
d379 1
a379 1
\&.Nd a one-line description
d451 1
a451 1
If two such dissimilar macros are pair-wise invoked (except for
d477 1
a477 1
This expands upon the brief, one-line description in
d479 1
a479 1
It usually contains a break-down of the options (if documenting a
d495 2
a496 4
This section is the dual of
.Em EXIT STATUS ,
which is used for commands.
It documents the return values of functions in sections 2, 3, and 9.
d517 2
a518 4
Command exit status for section 1, 6, and 8 manuals.
This section is the dual of
.Em RETURN VALUES ,
which is used for functions.
d528 1
a528 1
Make doubly sure that your examples work properly!
d771 1
a771 1
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB \(lbres...\(rb
d1161 1
a1161 1
.Cm \&Sy,
d1395 1
a1395 1
.Dq is currently in beta test.
d1927 3
a1929 1
Format the FreeBSD version provided as an argument, or a default value
d1958 1
a1958 1
.Sx \&Bd No Fl literal
d2130 1
a2130 1
A one-line description of the manual's content.
d2210 3
a2212 1
Format the NetBSD version provided as an argument, or a default value if
d2284 3
a2286 1
Format the OpenBSD version provided as an argument, or a default value
d2606 1
a2606 1
.Dq currently under development.
d2806 1
a2806 1
In quoted literals, groff allowed pair-wise double-quotes to produce a
@


1.44
log
@Move the new mdoc(7) manual written by kristaps@@, replacing the old one
which had much less information, such that the new one gets installed.
No change to the build system required, no text change in this commit.
Doing the big move early even though a few more improvements will follow.
The duplicate information in mdoc.samples(7) will be cleaned up post-release.
ok jmc@@, and kristaps@@ agreed with the plan, too
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.43 2010/03/26 19:30:40 jmc Exp $
d563 1
a563 3
The history of any manual without a
.Em STANDARDS
section should be described in this section.
d565 1
a565 1
Credits to authors, if applicable, should appear in this section.
d2258 1
a2258 1
.D1 Pf \. Sx \&Os Op Cm system
d2860 1
d2862 2
a2863 1
.Xr mandoc_char 7
@


1.43
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.42 2010/01/03 16:43:45 schwarze Exp $
d3 2
a4 2
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
d6 3
a8 11
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
d10 7
a16 11
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
d18 1
a18 3
.\"	@@(#)mdoc.7	8.2 (Berkeley) 12/30/93
.\"
.Dd $Mdocdate: January 3 2010 $
d23 1
a23 8
.Nd quick reference guide for the
.Nm \-mdoc
macro package
.Sh SYNOPSIS
.Nm nroff
.Fl T Ns Ar Name
.Fl mandoc
.Ar file
d26 2
a27 3
.Nm \-mdoc
package is a set of content-based and domain-based macros
used to format the
d29 441
a469 40
man pages.
The macro names and their meanings are
listed below for quick reference; for
a detailed explanation on using the package,
see the tutorial sampler
.Xr mdoc.samples 7 .
.Pp
The macros are described in two groups.
The first includes the structural and physical page layout macros.
The second contains the manual and general text domain
macros which differentiate the
.Nm -\mdoc
package from other
.Xr troff 1
formatting packages.
.Sh PAGE STRUCTURE DOMAIN
.Ss Title Macros
To create a valid manual page, these three macros, in this order,
are required:
.Pp
.Bl -tag -width "xxxx.Os OPERATINGxSYSTEM [version/release]" -compact
.It Li "\&.Dd   $\&Mdocdate$"
Expands to document date.
.It Li "\&.Dt  " Ar "DOCUMENT_TITLE [section] [volume]"
Title, in upper case.
.It Li "\&.Os  " Ar "OPERATING_SYSTEM [version/release]"
Operating system
.Pq Tn BSD .
.El
.Ss Page Layout Macros
Section headers, paragraph breaks, lists and displays.
.Bl -tag -width flag -compact
.It Li \&.Sh
Section Headers.
Valid headers, in the order of presentation:
.Bl -tag -width "RETURN VALUES" -compact
.It Ar NAME
Name section.
Should include the
.Ql \&.Nm
d471 613
a1083 54
.Ql \&.Fn
and the
.Ql \&.Nd
macros.
.It Ar SYNOPSIS
Usage.
All
.Ql \&.Nm
macros must be given an argument.
.It Ar DESCRIPTION
General description, including any options, operands, or other parameters.
.It Ar RETURN VALUES
Sections two, three, and nine function calls.
.It Ar ENVIRONMENT
Describe environment variables.
.It Ar FILES
Files associated with the subject, with short descriptions.
.It Ar EXAMPLES
Examples and suggestions.
.It Ar DIAGNOSTICS
Sections one, four, six, and eight diagnostics.
.It Ar ERRORS
Sections two, three, and nine error and signal handling.
.It Ar SEE ALSO
Cross references and citations.
.It Ar STANDARDS
Conformance to standards if applicable.
.It Ar HISTORY
A brief history of the subject, including where support first appeared.
.It Ar AUTHORS
Credit to the person or persons who wrote the code and/or documentation.
.It Ar CAVEATS
Explanations of common misuses, i.e., security considerations for certain
library functions.
.It Ar BUGS
Gotchas and caveats.
.It Ar other
Customized headers may be added at the author's discretion.
.El
.It Li \&.Ss
Subsection Headers.
.It Li \&.Pp
Paragraph Break.
Vertical space (one line).
.It Li \&.D1
(D-one) Display-one.
Indent and display one text line.
.It Li \&.Dl
(D-ell) Display-one literal.
Indent and display one line of literal text.
.It Li \&.Bd
Begin-display block.
Display options:
.Bl -tag -width "xoffset string " -compact
d1085 1
a1085 1
Unjustified (ragged edges).
d1087 39
a1125 43
Unfilled, unjustified.
.It Fl filled
Filled, and if
.Xr troff 1 ,
also justified.
.It Fl literal
Literal text or code.
.It Fl file Ar name
Read in named
.Ar file
and display.
.It Fl offset Ar string
Offset display.
Acceptable
.Ar string
values:
.Bl -tag -width indent-two -compact
.It Ar left
Align block on left (default).
.It Ar center
Approximate center margin.
.It Ar indent
Six constant width spaces (a tab).
.It Ar indent-two
Two tabs.
.It Ar right
Left aligns block 2 inches from
right.
.It Ar xx Ns Cm n
Where
.Ar xx
is a number from
.No \&4 Ns Cm n
to
.No \&9\&9 Ns Cm n .
.It Ar Aa
Where
.Ar Aa
is a callable macro name.
.It Ar string
The width of
.Ar string
is used.
d1127 6
d1134 159
a1292 34
.It Li \&.Ed
End-display (matches \&.Bd).
.It Li \&.Bl
Begin-list.
Create lists or columns.
Options:
.Bl -tag -width flag -compact
.It Em List-types
.Bl -column "xbullet " -compact
.It Fl bullet Ta "Bullet Item List"
.It Fl dash Ta "Dash Item List"
.It Fl hyphen Ta "(as per" Fl dash ")"
.It Fl item Ta "Unlabeled List"
.It Fl enum Ta "Enumerated List"
.It Fl tag Ta "Tag Labeled List"
.It Fl diag Ta "Diagnostic List"
.It Fl hang Ta "Hanging Labeled List"
.It Fl ohang Ta "Overhanging Labeled List"
.It Fl inset Ta "Inset or Run-on Labeled List"
.It Fl column Ta "Multiple Columns"
.El
.It Em List-parameters
.Bl -tag -width "xcompact " -compact
.It Fl offset
(All lists.) See
.Ql \&.Bd
begin-display above.
.It Fl width
.Pf ( Fl tag
and
.Fl hang
lists only.)
This parameter is effectively required for
.Fl tag
d1294 371
a1664 3
.It Fl compact
(All lists.)
Suppresses blank lines.
d1666 911
d2578 282
a2859 201
.It Li \&.El
End-list.
.It Li \&.It
List item.
.El
.Sh MANUAL AND GENERAL TEXT DOMAIN MACROS
The manual and general text domain macros are special in that
most of them are parsed for callable macros
for example:
.Bl -tag -width ".Op Fl s Ar filex" -offset indent
.It Li "\&.Op Fl s Ar file"
Produces
.Op Fl s Ar file
.El
.Pp
In this example, the option enclosure macro
.Ql \&.Op
is parsed, and calls the callable content macro
.Ql \&Fl
which operates on the argument
.Ql s
and then calls the callable content macro
.Ql \&Ar
which operates on the argument
.Ql file .
Some macros may be callable but are not parsed, or vice versa.
These macros are indicated in the
.Em parsed
and
.Em callable
columns below.
.Pp
Unless stated, manual domain macros share a common syntax:
.Pp
.Dl \&.Va argument [\ .\ ,\ ;\ :\ ?\ !\ (\ )\ [\ ]\ argument \...\ ]
.Pp
.Sy Note :
Opening and closing
punctuation characters are only recognized as such if they are presented
one at a time.
The string
.Ql "),"
is not recognized as punctuation and will be output with a leading whitespace
and in whatever font the calling macro uses.
The
argument list
.Ql "] ) ,"
is recognized as three sequential closing punctuation characters
and a leading white space is not output between the characters
and the previous argument (if any).
The special meaning of a punctuation character may be escaped
with the string
.Ql \e& .
For example the following string,
.Bl -tag -width "&.Ar file1\ , file2\ , file3\ )\ ." -offset indent
.It Li "\&.Ar file1\ , file2\ , file3\ )\ ."
Produces
.Ar file1 , file2 , file3 ) .
.El
.Ss Manual Domain Macros
.Bl -column "Name" "Parsed" "Callable" -compact
.It Em Name	Parsed	Callable	Description
.It Li \&Ad Ta Yes Ta Yes Ta Address. "(This macro may be deprecated.)"
.It Li \&An Ta Yes Ta \&No Ta "Author name."
.It Li \&Ar Ta Yes Ta Yes Ta "Command line argument."
.It Li \&Cd Ta \&No Ta \&No Ta "Configuration declaration."
.It Li \&Cm Ta Yes Ta Yes Ta "Command line argument modifier."
.It Li \&Dv Ta Yes Ta Yes Ta "Defined variable (source code)."
.It Li \&Er Ta Yes Ta Yes Ta "Error number (source code)."
.It Li \&Ev Ta Yes Ta Yes Ta "Environment variable."
.It Li \&Ex Ta \&No Ta \&No Ta "Exit values."
.It Li \&Fa Ta Yes Ta Yes Ta "Function argument."
.It Li \&Fd Ta \&No Ta \&No Ta "Function declaration."
.It Li \&Fl Ta Yes Ta Yes Ta "Flags."
.It Li \&Fn Ta Yes Ta Yes Ta "Function call (also .Fo and .Fc)."
.It Li \&Ft Ta Yes Ta Yes Ta "Function type."
.It Li \&Ic Ta Yes Ta Yes Ta "Interactive command."
.It Li \&In Ta \&No Ta \&No Ta "Include header file."
.It Li \&Li Ta Yes Ta Yes Ta "Literal text."
.It Li \&Nd Ta \&No Ta \&No Ta "Name description."
.It Li \&Nm Ta Yes Ta Yes Ta "Command name."
.It Li \&Op Ta Yes Ta Yes Ta "Option (also .Oo and .Oc)."
.It Li \&Ot Ta Yes Ta Yes Ta "Old style function type (Fortran only)."
.It Li \&Pa Ta Yes Ta Yes Ta "Pathname or file name."
.It Li \&Rv Ta \&No Ta \&No Ta "Return values."
.It Li \&St Ta Yes Ta Yes Ta "Standards (see below)."
.It Li \&Va Ta Yes Ta Yes Ta "Variable name."
.It Li \&Vt Ta Yes Ta Yes Ta "Variable type."
.It Li \&Xr Ta Yes Ta Yes Ta "Manual Page Cross Reference."
.El
.Pp
The known standards for the St macro are:
.Bd -ragged -offset 5n
-p1003.1-88, -p1003.1-90, -p1003.1-96, -p1003.1-2001, -p1003.1-2004,
-p1003.1-2008, -p1003.1, -p1003.1b, -p1003.1b-93, -p1003.1c-95, -p1003.1g-2000,
-p1003.2-92, -p1003.2-95, -p1003.2, -p1387.2, -isoC-90, -isoC-amd1,
-isoC-tcor1, -isoC-tcor2, isoC-99, -ansiC, -ansiC-89, -ansiC-99, -ieee754,
-iso8802-3, -xpg3, -xpg4, -xpg4.2, -xpg4.3, -xbd5, -xcu5, -xsh5, -xns5,
-xns5.2d2.0, -xcurses4.2, -susv2, -susv3, and -svid4.
.Ed
.Ss General Text Domain Macros
.Bl -column "Name" "Parsed" "Callable" -compact
.It Em "Name	Parsed	Callable	Description"
.It Li \&%A Ta Yes Ta \&No Ta "Reference author."
.It Li \&%B Ta Yes Ta Yes Ta "Reference book title."
.It Li \&%\&D Ta \&No Ta \&No Ta "Reference date."
.It Li \&%I Ta Yes Ta Yes Ta "Issuer/Publisher name."
.It Li \&%J Ta Yes Ta Yes Ta "Reference journal title."
.It Li \&%N Ta \&No Ta \&No Ta "Reference issue number."
.It Li \&%\&O Ta \&No Ta \&No Ta "Reference optional information."
.It Li \&%P Ta \&No Ta \&No Ta "Reference page number(s)."
.It Li \&%R Ta \&No Ta \&No Ta "Reference report Name."
.It Li \&%T Ta Yes Ta Yes Ta "Reference article title."
.It Li \&%V Ta \&No Ta \&No Ta "Reference volume."
.It Li \&Ac Ta Yes Ta Yes Ta "Angle close quote."
.It Li \&Ao Ta Yes Ta Yes Ta "Angle open quote."
.It Li \&Aq Ta Yes Ta Yes Ta "Angle quote."
.It Li \&At Ta \&No Ta \&No Ta Tn "AT&T UNIX."
.It Li \&Bc Ta Yes Ta Yes Ta "Bracket close quote."
.It Li \&Bf Ta \&No Ta \&No Ta "Begin font mode."
.It Li \&Bo Ta Yes Ta Yes Ta "Bracket open quote."
.It Li \&Bq Ta Yes Ta Yes Ta "Bracket quote."
.It Li \&Bsx Ta Yes Ta \&No Ta "BSDI BSD/OS."
.It Li \&Bx Ta Yes Ta \&No Ta BSD .
.It Li \&Db Ta \&No Ta \&No Ta "Debug (default is \*qoff\*q)."
.It Li \&Dc Ta Yes Ta Yes Ta "Double close quote."
.It Li \&Do Ta Yes Ta Yes Ta "Double open quote."
.It Li \&Dq Ta Yes Ta Yes Ta "Double quote."
.It Li \&Ec Ta Yes Ta Yes Ta "Enclose string close quote."
.It Li \&Ef Ta \&No Ta \&No Ta "End font mode."
.It Li \&Em Ta Yes Ta Yes Ta "Emphasis (traditional English)."
.It Li \&Eo Ta Yes Ta Yes Ta "Enclose string open quote."
.It Li \&Fx Ta Yes Ta \&No Ta FreeBSD .
.It Li \&Ms Ta Yes Ta \&No Ta "Mathematical symbol."
.It Li \&No Ta Yes Ta Yes Ta "Normal text (no-op)."
.It Li \&Ns Ta Yes Ta Yes Ta "No space."
.It Li \&Nx Ta Yes Ta \&No Ta NetBSD .
.It Li \&Ox Ta Yes Ta \&No Ta OpenBSD .
.It Li \&Pc Ta Yes Ta Yes Ta "Parenthesis close quote."
.It Li \&Pf Ta Yes Ta \&No Ta "Prefix string."
.It Li \&Po Ta Yes Ta Yes Ta "Parenthesis open quote."
.It Li \&Pq Ta Yes Ta Yes Ta "Parentheses quote."
.It Li \&Qc Ta Yes Ta Yes Ta "Straight double close quote."
.It Li \&Ql Ta Yes Ta Yes Ta "Quoted literal."
.It Li \&Qo Ta Yes Ta Yes Ta "Straight double open quote."
.It Li \&Qq Ta Yes Ta Yes Ta "Straight double quote."
.It Li \&Re Ta \&No Ta \&No Ta "Reference end."
.It Li \&Rs Ta \&No Ta \&No Ta "Reference start."
.It Li \&Sc Ta Yes Ta Yes Ta "Single close quote."
.It Li \&So Ta Yes Ta Yes Ta "Single open quote."
.It Li \&Sq Ta Yes Ta Yes Ta "Single quote."
.It Li \&Sm Ta \&No Ta \&No Ta "Space mode (default is \*qon\*q)."
.It Li \&Sx Ta Yes Ta Yes Ta "Section Cross Reference."
.It Li \&Sy Ta Yes Ta Yes Ta "Symbolic (traditional English)."
.It Li \&Tn Ta Yes Ta Yes Ta "Trade or type name (small Caps)."
.It Li \&Ux Ta Yes Ta \&No Ta UNIX .
.It Li \&Xc Ta Yes Ta Yes Ta "Extend argument list close."
.It Li \&Xo Ta Yes Ta Yes Ta "Extend argument list open."
.El
.\" .It Sy \&Hf Ta \&No Ta \&No Ta "Include file with header"
.Pp
Macro names ending in
.Ql q
quote remaining items on the argument list.
Macro names ending in
.Ql o
begin a quote which may span more than one line of input and
are close quoted with the matching macro name ending in
.Ql c .
Enclosure macros may be nested and are limited to
eight arguments.
.Pp
Note: the extended argument list macros
.Pf ( Ql \&.Xo ,
.Ql \&.Xc )
and the function enclosure macros
.Pf ( Ql \&.Fo ,
.Ql \&.Fc )
are irregular.
The extended list macros are used when the number of macro arguments
would exceed the
.Xr troff 1
limitation of nine arguments.
.Sh FILES
.Bl -tag -width "/usr/share/misc/mdoc.template" -compact
.It Pa tmac.doc
manual macro package
.It Pa tmac.doc-common
common structural macros and definitions
.It Pa tmac.doc-ditroff
site dependent
.Xr troff 1
style file
.It Pa tmac.doc-nroff
site dependent
.Xr nroff 1
style file
.It Pa tmac.doc-syms
special defines
.It Pa /usr/share/misc/mdoc.template
template for writing a man page
d2862 7
a2868 5
.Xr groff 1 ,
.Xr man 1 ,
.Xr nroff 1 ,
.Xr troff 1 ,
.Xr mdoc.samples 7
@


1.42
log
@Neither .Pp nor unqualified text are allowed at the top level of .Bl;
instead, .It is required.  Thus, move .Pp and text before the .Bl,
and remove the .Pp altogether where it is not needed.

Syntax errors found by mandoc(1), also required to fix the mandoc build;
feedback and ok jmc@@, and sobrado@@ also supports the direction.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.41 2009/04/23 15:37:14 sobrado Exp $
d32 1
a32 1
.Dd $Mdocdate: April 23 2009 $
d358 1
a358 1
.It Li \&Db Ta \&No Ta \&No Ta "Debug (default is \\*qoff\\*q)."
d385 1
a385 1
.It Li \&Sm Ta \&No Ta \&No Ta "Space mode (default is \\*qon\\*q)."
@


1.41
log
@improve the description for the .Nd macro in a way it is not only
more accurate but also a good mnemonic.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.40 2009/03/04 22:17:05 sobrado Exp $
d32 1
a32 1
.Dd $Mdocdate: March 4 2009 $
d70 1
a71 1
.Pp
@


1.40
log
@adds -p1003.1-2008 to the list of standards for the St macro.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.39 2007/05/31 22:10:19 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: May 31 2007 $
d313 1
a313 1
.It Li \&Nd Ta \&No Ta \&No Ta "Command description."
@


1.39
log
@document new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.38 2007/05/31 19:19:58 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate$
d326 1
a326 1
.Bd -ragged -offset 4n
d328 1
a328 1
-p1003.1, -p1003.1b, -p1003.1b-93, -p1003.1c-95, -p1003.1g-2000,
@


1.38
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.37 2006/01/04 15:13:46 jmc Exp $
d71 3
a73 2
.It Li "\&.Dd  " Ar "Month day, year"
Document date.
@


1.37
log
@missing full stop; from ray lai
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.36 2005/06/05 19:40:22 jmc Exp $
d32 1
a32 1
.Dd December 30, 1993
@


1.36
log
@s/-p1003.1-2003/-p1003.1-2004/g
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.35 2004/11/21 07:07:46 jaredy Exp $
d136 1
a136 1
(D-one) Display-one
@


1.35
log
@make Nx and Ox parsed; ok jmc, (previously) millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.34 2004/07/02 10:36:57 jmc Exp $
d326 1
a326 1
-p1003.1-88, -p1003.1-90, -p1003.1-96, -p1003.1-2001, -p1003.1-2003,
@


1.34
log
@note that section 9 pages may use RETURN VALUES and ERRORS;
note that section 1/6/8 pages may use DIAGNOSTICS;

from discussion w/ jared yanovich;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.33 2004/02/24 21:21:44 jmc Exp $
d365 1
a365 1
.It Li \&Fx Ta \&No Ta \&No Ta FreeBSD .
d369 2
a370 2
.It Li \&Nx Ta \&No Ta \&No Ta NetBSD .
.It Li \&Ox Ta \&No Ta \&No Ta OpenBSD .
@


1.33
log
@sync FILES and SEE ALSO w/ mdoc.samples(7);
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.32 2004/02/20 10:34:41 jmc Exp $
d103 1
a103 1
Sections two and three function calls.
d111 1
a111 1
Section four device interface diagnostics.
d113 1
a113 1
Sections two and three error and signal handling.
@


1.32
log
@- document .In, .Ex, and .Rv
- keep the description of .Cd on one line
- note that .Fd may be used w/ section 9 pages
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.31 2004/01/25 14:58:41 jmc Exp $
d417 1
a417 1
.Bl -tag -width "tmac.doc-ditroff" -compact
d419 1
a419 1
manual and general text domain macros
d422 4
a429 4
.It Pa tmac.doc-ditroff
site dependent
.Xr troff 1
style file
d431 3
a433 1
special defines (such as the standards macro)
d436 4
@


1.31
log
@update .St sections;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.30 2004/01/24 21:55:08 jmc Exp $
d298 1
a298 1
.It Li \&Cd Ta \&No Ta \&No Ta "Configuration declaration (section four only)."
d303 1
d310 1
d317 1
@


1.30
log
@.Vt is not just a FORTRAN thing; noted by Jared Yanvovich;
sadly, our .Vt does not respect punctuation...

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.29 2003/09/02 19:08:21 jmc Exp $
d323 6
a328 5
-p1003.1-88, -p1003.1-90, -p1003.1-01, -p1003.1, -p1003.1b, -p1003.1b-93,
-p1003.1c-95, -p1003.1-96, -p1003.2-92, -p1003.2, -p1387.2-95, -p1387.2,
-ansiC, -ansiC-89, -ansiC-99, -ieee754, -iso8802-3, -xpg3, -xpg4, -xpg4.2,
-xpg4.3, -xbd5, -xcu5, -xsh5, -xns5, -xns5.2d2.0, -xcurses4.2, -susv2, and
-susv3.
@


1.29
log
@mdoc(7): add `?' and `!' to punctuation characters;
mdoc.samples(7): remove BUG concerning blank lines;

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.28 2003/07/21 11:50:54 jmc Exp $
d317 1
a317 1
.It Li \&Vt Ta Yes Ta Yes Ta "Variable type (Fortran only)."
@


1.28
log
@sync with mdoc.samples(7);
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.27 2003/06/02 23:30:15 millert Exp $
d267 1
a267 1
.Dl \&.Va argument [\ .\ ,\ ;\ :\ (\ )\ [\ ]\ argument \...\ ]
@


1.27
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.26 2003/05/29 08:46:22 jmc Exp $
d41 4
a44 3
.Nm groff
.Fl m Ns Ar doc
.Ar files ...
d296 1
d305 1
a333 1
.It Li \&%\&C Ta \&No Ta \&No Ta "Reference place of publishing (city)."
d335 1
d351 2
a352 2
.It Li \&Bsx Ta Yes Ta Yes Ta "BSDI BSD/OS."
.It Li \&Bx Ta Yes Ta Yes Ta BSD .
d361 2
a362 1
.It Li \&Fx Ta Yes Ta Yes Ta FreeBSD .
d365 2
a366 2
.It Li \&Nx Ta Yes Ta Yes Ta NetBSD .
.It Li \&Ox Ta Yes Ta Yes Ta OpenBSD .
d384 1
a384 1
.It Li \&Ux Ta Yes Ta Yes Ta UNIX .
@


1.26
log
@sync docs to agree on section header (.Sh) order for man pages. This also
matches order used by NetBSD, though we don't use all their sections.

Order is:

NAME
SYNOPSIS
DESCRIPTION
RETURN VALUES
ENVIRONMENT
FILES
EXAMPLES
DIAGNOSTICS
ERRORS
SEE ALSO
STANDARDS
HISTORY
AUTHORS
CAVEATS
BUGS

ok krw@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.25 2003/04/13 11:06:21 jmc Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.25
log
@cleanup of typos in section 7 man pages;
mdoc.samples(7): ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.24 2002/12/06 02:36:24 marc Exp $
a104 2
.It Ar EXAMPLES
Examples and suggestions.
a106 4
.It Ar ERRORS
Sections two and three error and signal handling.
.It Ar DIAGNOSTICS
Section four device interface diagnostics.
d111 6
a118 2
.It Ar COMPATIBILITY
Compatibility issues, i.e., deprecated options or parameters.
d121 2
a124 4
.It Ar HISTORY
A brief history of the subject, including where support first appeared.
.It Ar BUGS
Gotchas and caveats.
d128 2
@


1.24
log
@Describe the known standards for the St macro.
OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.23 2001/11/13 13:54:26 mpech Exp $
d309 1
a310 1
.It Li \&Fn Ta Yes Ta Yes Ta "Function call (also .Fo and .Fc)."
@


1.23
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.22 2001/10/05 14:45:54 mpech Exp $
d318 1
a318 1
.It Li \&St Ta Yes Ta Yes Ta "Standards (-p1003.2, -p1003.1 or -ansiC)."
d323 9
@


1.22
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.21 2001/08/02 18:00:10 millert Exp $
d67 1
a67 1
.Xr troff
d403 1
a403 1
.Xr troff
d413 1
a413 1
.Xr nroff
d417 1
a417 1
.Xr troff
@


1.21
log
@document .Nd
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.20 2001/06/22 11:14:52 mpech Exp $
d90 2
a91 1
Name section. Should include the
@


1.20
log
@o) minor sentence fix;
o) add description of ``.Bsx'' to the "BSD Macros" chap.;

aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.19 2001/02/25 07:08:31 aaron Exp $
d312 1
@


1.19
log
@Avoid direct use of troff requests; from FreeBSD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.18 2000/11/10 00:06:02 aaron Exp $
d316 1
a316 1
.It Li \&St Ta Yes Ta Yes Ta "Standards (-p1003.2, -p1003.1 or -ansiC)"
@


1.18
log
@Add COMPATIBILITY section definition.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.17 2000/11/08 20:50:59 aaron Exp $
a295 1
.ne 1i
@


1.17
log
@Fix up mdoc section header descriptions to more accurately reflect how
man pages should be laid out in OpenBSD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.16 2000/09/11 01:36:53 aaron Exp $
d118 2
@


1.16
log
@Remove confusing reference to the .Bd macro description; marc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.15 2000/03/24 03:23:23 aaron Exp $
d90 1
a90 1
Name section, should include the
d99 3
d103 3
a105 2
General description, should include
options and parameters.
d108 4
d115 1
a115 8
Files associated with the subject.
.It Ar EXAMPLES
Examples and suggestions.
.It Ar DIAGNOSTICS
Normally used for section four device interface diagnostics.
.It Ar ERRORS
Sections two and three error and signal
handling.
d120 2
d123 1
a123 2
If a standard is not applicable, the history
of the subject should be given.
d126 3
d130 1
a130 2
Customized headers may be added at
the author's discretion.
@


1.15
log
@Corrections and updates; mostly from NetBSD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.14 2000/03/19 19:25:34 aaron Exp $
a222 2
See
.Ql \&.Bd .
@


1.14
log
@Various cleanups.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.13 2000/03/04 22:19:33 aaron Exp $
d145 2
d148 3
a150 1
Justified.
d225 3
d294 1
a294 1
.Bl -column "Name" "Parsed" Callable" -compact
d304 1
a304 1
.It Li \&Fd Ta Yes Ta Yes Ta "Function declaration."
d319 1
a319 1
.Bl -column "Name" "Parsed" Callable" -compact
d342 1
a342 1
.It Li \&Db Ta \&No Ta \&No Ta "Debug (default is \\*qoff\\*q)"
d374 1
a374 1
.It Li \&Xo Ta Yes Ta Yes Ta "Extend argument list close."
d403 1
a403 1
Manual and general text domain macros.
d405 1
a405 1
Common structural macros and definitions.
d407 1
a407 1
Site dependent
d409 1
a409 1
style file.
d411 1
a411 1
Site dependent
d413 1
a413 1
style file.
d415 1
a415 1
Special defines (such as the standards macro).
@


1.13
log
@In Unix land we prefer "whitespace" to "white space" or "white-space". At
least, this is the impression I get from looking at a lot of Perl docs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.12 1999/09/02 17:42:27 aaron Exp $
d61 2
a62 2
The macros are described in two groups.  The first
includes the structural and physical page layout macros.
d191 2
a192 1
Create lists or columns. Options:
@


1.12
log
@document Ft (Function Type); espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.11 1999/07/07 10:50:09 aaron Exp $
d267 2
a268 2
is not recognized as punctuation and will be output with a leading white
space and in whatever font the calling macro uses.
@


1.11
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.10 1999/05/30 02:27:23 pjanzen Exp $
d297 1
@


1.10
log
@synonym typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.9 1999/04/25 14:55:00 alex Exp $
d37 1
a38 1
.Dt MDOC 7
@


1.9
log
@Document .Bsx and .Fx macros.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.8 1998/12/02 07:21:02 deraadt Exp $
d350 1
a350 1
.It Li \&Qc Ta Yes Ta Yes Ta "Strait Double close quote."
d352 2
a353 2
.It Li \&Qo Ta Yes Ta Yes Ta "Strait Double open quote."
.It Li \&Qq Ta Yes Ta Yes Ta "Strait Double quote."
@


1.8
log
@fix Re description; horikawa@@jp.FreeBSD.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.7 1998/09/07 16:44:37 aaron Exp $
d331 1
d341 1
@


1.7
log
@More man page fixes. Particularly fix uses of it's/its, affect/effect,
then/than and such. Other miscellaneous problems fixed across these source
files.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mdoc.7,v 1.6 1998/09/06 12:41:41 pjanzen Exp $
d352 1
a352 1
.It Li \&Re Ta \&No Ta \&No Ta "Reference start."
@


1.6
log
@spelling, grammar, punctuation
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d326 1
a326 1
.It Li \&At Ta \&No Ta \&No Ta Tn "AT&T UNIX"
d357 1
a357 1
.It Li \&Sm Ta \&No Ta \&No Ta "Space mode (default is \\*qon\\*q)"
d361 1
a361 1
.It Li \&Ux Ta Yes Ta Yes Ta UNIX
@


1.5
log
@Document .Ox and .Nx, noted by johns@@
@
text
@d1 1
a1 1
.\"	$NetBSD: mdoc.7,v 1.2 1994/11/30 19:07:19 jtc Exp $
d61 1
a61 1
The macros are described in two groups, the first
d126 1
a126 1
the authors discretion.
d250 1
a250 1
Some macros may be callable, but are not parsed and vice versa.
d268 1
a268 1
space and in what ever font the calling macro uses.
@


1.4
log
@correct paths
@
text
@d342 2
@


1.3
log
@.It is not parsed, so spell out Bx and Ux; lukem
@
text
@a386 4
.Sh CONFIGURATION
For site specific configuration of the macro package,
see the file
.Pa /usr/src/share/tmac/README .
@


1.2
log
@doc .Bl options -column, -dash, -hyphen; lukem
@
text
@d331 1
a331 1
.It Li \&Bx Ta Yes Ta Yes Ta Bx .
d359 1
a359 1
.It Li \&Ux Ta Yes Ta Yes Ta Ux
@


1.1
log
@Initial revision
@
text
@d193 2
a194 2
.It Ar List-types
.Bl -column xbullet -compact
d196 2
d205 1
d207 1
a207 1
.It List-parameters
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

