head	1.29;
access;
symbols
	OPENBSD_6_2_BASE:1.29
	OPENBSD_6_1:1.29.0.8
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.28.0.6
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.27.0.6
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.23.0.14
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.12
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.10
	OPENBSD_5_0:1.23.0.8
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.6
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.23.0.4
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.22.0.6
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.17.0.8
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.6
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.4
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.4
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.6
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.4
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.29
date	2015.11.10.23.48.17;	author jmc;	state Exp;
branches;
next	1.28;
commitid	QU70QaxjyBAtj4Rv;

1.28
date	2015.02.16.16.38.53;	author naddy;	state Exp;
branches;
next	1.27;
commitid	ne9aoqc3owhFBWUD;

1.27
date	2013.11.02.09.41.58;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2013.07.10.06.43.38;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2013.06.05.03.42.03;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.24.01.37.23;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.02.20.21.08.11;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.24.13.30.47;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.31.19.19.48;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.28.01.46.17;	author david;	state Exp;
branches;
next	1.19;

1.19
date	2006.07.28.13.03.40;	author kurt;	state Exp;
branches;
next	1.18;

1.18
date	2006.07.26.12.45.55;	author kurt;	state Exp;
branches;
next	1.17;

1.17
date	2004.08.12.23.59.37;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.11.19.14.56;	author drahn;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.25.21.56.20;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.12.30.13.51.59;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.13.13.54.25;	author mpech;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.26.00.37.03;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.25.21.49.01;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.19.19.25.23;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.12.09.18.10.23;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	98.11.29.15.47.22;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	98.11.25.04.33.45;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.09.07.16.44.36;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.02.11.11.49.36;	author d;	state Exp;
branches;
next	1.4;

1.4
date	97.06.13.09.20.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.01.12.19.59.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.20.07.20.33;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.29
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@.\"	$OpenBSD: dlfcn.3,v 1.28 2015/02/16 16:38:53 naddy Exp $
.\"	$NetBSD: dlfcn.3,v 1.3 1996/01/09 19:43:34 pk Exp $
.\"
.\" Copyright (c) 1995 Paul Kranenburg
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Paul Kranenburg.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: February 16 2015 $
.Dt DLOPEN 3
.Os
.Sh NAME
.Nm dlopen ,
.Nm dlclose ,
.Nm dlsym ,
.Nm dladdr ,
.Nm dlctl ,
.Nm dlerror
.Nd dynamic link interface
.Sh SYNOPSIS
.In dlfcn.h
.Ft "void *"
.Fn dlopen "const char *path" "int mode"
.Ft "int"
.Fn dlclose "void *handle"
.Ft "void *"
.Fn dlsym "void *handle" "const char *symbol"
.Ft "int"
.Fn dladdr "const void *addr" "Dl_info *info"
.Ft "int"
.Fn dlctl "void *handle" "int cmd" "void *data"
.Ft "char *"
.Fn dlerror "void"
.Sh DESCRIPTION
These functions provide an interface to the run-time linker
.Xr ld.so 1 .
They allow new shared objects to be loaded into a process's address space
under program control.
.Pp
The
.Fn dlopen
function takes the name of a shared object as its first argument.
The shared object is mapped into the address space, relocated, and its external
references are resolved in the same way as is done with the implicitly loaded
shared libraries at program startup.
.Pp
The
.Fa path
parameter can be specified as either an absolute pathname to a shared library
or just the name of the shared library itself.
When an absolute pathname is specified,
only the path provided will be searched for the shared library.
When just a shared library is specified,
the same paths will be searched that are used for
.Dq intrinsic
shared library searches.
.Pp
Shared libraries take the following form:
.Pp
.Dl lib<name>.so[.xx[.yy]]
.Pp
When a shared library is specified without a version or with a partial version,
the same library search rules apply that are used for
.Dq intrinsic
shared library searches.
A null pointer supplied for
.Fa path
will return a special
.Fa handle
that behaves the same as the
.Dv RTLD_DEFAULT
special
.Fa handle .
.Pp
The
.Fa mode
parameter specifies symbol resolution time and symbol visibility.
One of the following values may be used to specify symbol resolution time:
.Bl -tag -width "RTLD_LAZYXX" -offset indent
.It Sy RTLD_NOW
Symbols are resolved immediately.
.It Sy RTLD_LAZY
Symbols are resolved when they are first referred to.
This is the default value if resolution time is unspecified.
.El
.Pp
One of the following values may be used to specify symbol visibility:
.Pp
.Bl -tag -width "RTLD_GLOBAL" -compact -offset indent
.It Sy RTLD_GLOBAL
The object's symbols and the symbols of its dependencies will be visible to
other objects.
.It Sy RTLD_LOCAL
The object's symbols and the symbols of its dependencies will not be visible to
other objects.
This is the default value if visibility is unspecified.
.El
.Pp
To specify both resolution time and visibility, bitwise inclusive OR one of
each of the above values together.
If an object was opened with RTLD_LOCAL and later opened with RTLD_GLOBAL,
then it is promoted to RTLD_GLOBAL.
.Pp
The main executable's symbols are normally invisible to
.Fn dlopen
symbol resolution.
Those symbols will be visible if linking is done with
.Xr gcc 1
.Fl rdynamic ,
which is equivalent to
.Xr ld 1
.Fl -export-dynamic .
.Pp
All shared objects loaded at program startup are globally visible.
.Pp
.Fn dlopen
returns a
.Fa handle
to be used in calls to
.Fn dlclose ,
.Fn dlsym ,
and
.Fn dlctl .
If the named shared object has already been loaded by a previous call to
.Fn dlopen
and not yet unloaded by
.Fn dlclose ,
a
.Fa handle
referring to the resident copy is returned.
.Pp
.Fn dlclose
unlinks and removes the object referred to by
.Fa handle
from the process address space.
If multiple calls to
.Fn dlopen
have been done on this object or the object is a dependency of another object
then the object is removed when its reference count drops to zero.
.Fn dlclose
returns 0 on success and non-zero on failure.
.Pp
.Fn dlsym
searches for a definition of
.Fa symbol
in the object designated by
.Fa handle
and all shared objects that it depends on.
The symbol's address is returned.
If the symbol cannot be resolved,
.Dv NULL
is returned.
.Pp
.Fn dlsym
may also be called with special
.Fa handles .
.Fn dlsym
respects symbol visibility as specified by the
.Fn dlopen
.Fa mode
parameter.
However, the symbols of an object's dependencies are always visible to it.
The following special
.Fa handles
may be used with
.Fn dlsym :
.Bl -tag -width "RTLD_DEFAULTXX" -offset indent
.It Sy NULL
Interpreted as a reference to the executable or shared object
from which the call is being made.
Thus an object can reference its own symbols and the symbols of its
dependencies without calling
.Fn dlopen .
.It Sy RTLD_DEFAULT
All the visible shared objects and the executable will be searched in the order they
were loaded.
.It Sy RTLD_NEXT
The search for
.Fa symbol
is limited to the visible shared objects which were loaded after the one issuing the
call to
.Fn dlsym .
Thus, if
.Fn dlsym
is called from the main program, all the visible shared libraries are searched.
If it is called from a shared library, all subsequently visible shared
libraries are searched.
.It Sy RTLD_SELF
The search for
.Fa symbol
is limited to the shared object issuing the call to
.Fn dlsym
and those shared objects which were loaded after it that are visible.
.El
.Pp
.Fn dladdr
queries the dynamic linker for information about the shared object
containing the address
.Fa addr .
The information is returned in the structure specified by
.Fa info .
The structure contains at least the following members:
.Bl -tag -width "XXXconst char *dli_fname"
.It Li "const char *dli_fname"
The pathname of the shared object containing the address
.Fa addr .
.It Li "void *dli_fbase"
The base address at which the shared object is mapped into the
address space of the calling process.
.It Li "const char *dli_sname"
The name of the nearest run-time symbol with a address less than or
equal to
.Fa addr .
.Pp
If no symbol with a suitable address is found, both this field and
.Va dli_saddr
are set to
.Dv NULL .
.It Li "void *dli_saddr"
The address of the symbol returned in
.Va dli_sname .
.El
.Pp
If a mapped shared object containing
.Fa addr
cannot be found,
.Fn dladdr
returns 0.
In that case, a message detailing the failure can be retrieved by
calling
.Fn dlerror .
On success, a non-zero value is returned.
Note: both strings pointed at by
.Va dli_fname
and
.Va dli_sname
reside in memory private to the run-time linker module and should not
be modified by the caller.
.Pp
In dynamically linked programs, the address of a global function will
point to its program linkage table entry, rather than to the entry
point of the function itself.
This causes most global functions to appear to be defined within the
main executable, rather than in the shared libraries where the actual
code resides.
.Pp
.Fn dlctl
provides an interface similar to
.Xr ioctl 2
to control several aspects of the run-time linker's operation.
This interface is currently under development.
.Pp
.Fn dlerror
returns a character string representing the most recent error that has
occurred while processing one of the other functions described here.
If no dynamic linking errors have occurred since the last invocation of
.Fn dlerror ,
.Fn dlerror
returns
.Dv NULL .
Thus, invoking
.Fn dlerror
a second time, immediately following a prior invocation, will result in
.Dv NULL
being returned.
.Sh SEE ALSO
.Xr ld 1 ,
.Xr ld.so 1 ,
.Xr elf 5
.Sh HISTORY
Some of the
.Nm dl*
functions first appeared in SunOS 4.
@


1.28
log
@Replace \*(Lt \*(Le \*(Gt \*(Ge with literal < <= > >= respectively,
except for instances where \*(Le and \*(Ge are clearly understood as
mathematical symbols.  Discussed with schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.27 2013/11/02 09:41:58 espie Exp $
d32 2
a33 2
.Dd $Mdocdate: November 2 2013 $
.Dt DLFCN 3
@


1.27
log
@move the global description of --export-symbols up to dlopen,
since that's where the problem usually gets noticed,
add -rdynamic for gcc.

okay matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.26 2013/07/10 06:43:38 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: July 10 2013 $
d83 1
a83 1
.Dl lib\*(Ltname\*(Gt.so[.xx[.yy]]
@


1.26
log
@no more link(5). either remove references entirely, or point folks
to elf(5) instead;

ok miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.25 2013/06/05 03:42:03 tedu Exp $
d32 1
a32 1
.Dd $Mdocdate: June 5 2013 $
d127 12
a185 5
All shared objects loaded at program startup are globally visible.
Only the symbols in the main executable that are referenced by a
shared object at link time will be visible unless it has been linked
with the --export-dynamic option where all of its symbols will be
visible.
@


1.25
log
@use fancy .In macros for includes. from Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.24 2013/03/24 01:37:23 deraadt Exp $
d32 1
a32 1
.Dd $Mdocdate: March 24 2013 $
d285 1
a285 1
.Xr link 5
@


1.24
log
@dlerror() should not return const char *, as noted by landry
ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.23 2010/02/20 21:08:11 schwarze Exp $
d32 1
a32 1
.Dd $Mdocdate: February 20 2010 $
d44 1
a44 1
.Fd #include <dlfcn.h>
@


1.23
log
@The .Ud macro must not have arguments, or it kills the build with mandoc(1).
Since this is the only page in our tree using the .Ud macro at all,
just put the text verbatim as suggested by jmc@@.

Note that i have a vague suspicion that the whole sentence
  ("dlctl(3) is currently under development")
might be a lie, but as i didn't receive feedback on that,
i'm just fixing the formatting issue for now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.22 2008/09/24 13:30:47 millert Exp $
d32 1
a32 1
.Dd $Mdocdate: September 24 2008 $
d55 1
a55 1
.Ft "const char *"
@


1.22
log
@Document dlclose() return value.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.21 2007/05/31 19:19:48 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate$
d267 1
a267 2
This interface is
.Ud .
@


1.21
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.20 2007/02/28 01:46:17 david Exp $
d151 2
@


1.20
log
@various spelling corrections
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.19 2006/07/28 13:03:40 kurt Exp $
d32 1
a32 1
.Dd September 30, 1995
@


1.19
log
@Explain the effect of the --export-dynamic link option on the visibility
of the executable's symbols as well as improve the visibility paragraph a
bit. okay drahn@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.18 2006/07/26 12:45:55 kurt Exp $
d119 1
a119 1
This is the default value if visiblity is unspecified.
@


1.18
log
@Sync with current behavior:
- clarify how paths and parital shared library versions are treated
  with dlopen()
- dlopen() mode parameter is supported now - describe how to use it.
- describe how visiblity effects dlsym() with special handles
- remove bugs section
- formatting improvements
With input from drahn@@ and jmc@@. okay drahn@@, that's fine jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.17 2004/08/12 23:59:37 jmc Exp $
a165 1
In all cases
d171 6
a176 4
The main executable and all shared objects loaded at program startup are
globally visible.
In addition, all shared objects that are a dependency of another object are
always visible to the object that depends on them.
@


1.17
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.16 2004/08/11 19:14:56 drahn Exp $
d65 1
a65 1
function takes a name of a shared object as its first argument.
d72 6
a77 7
argument can either be an absolute pathname or it can be of the form
.Sm off
.Do Xo lib Ao name Ac .so
.Op .xx Op .yy Xc
.Dc
.Sm on
in which case the same library search rules apply that are used for
d80 46
a125 5
A null pointer supplied for path is interpreted as a reference to the main
executable of the process.
The second argument currently has no effect, but should be set to
.Dv DL_LAZY
for future compatibility.
d128 3
a130 1
returns a handle to be used in calls to
d137 5
a141 2
.Pq and not yet unloaded by Fn dlclose ,
a handle referring to the resident copy is returned.
d149 2
a150 4
have been done on this object
.Po or the object was once loaded at startup time
.Pc
the object is removed when its reference count drops to zero.
d153 1
a153 1
looks for a definition of
d155 3
a157 2
in the shared object designated by
.Fa handle .
a162 1
If
d164 19
a182 4
is called with the special
.Fa handle
.Dv NULL ,
it is interpreted as a reference to the executable or shared object
d184 13
a196 10
Thus a shared object can reference its own symbols.
.Pp
If
.Fn dlsym
is called with the special
.Fa handle
.Dv RTLD_DEFAULT ,
all the shared objects will be searched in the order they were loaded.
.Pp
If
d198 2
a199 9
is called with the special
.Fa handle
.Dv RTLD_NEXT ,
then the search for the symbol is limited to the shared objects
which were loaded after the one issuing the call to
.Fn dlsym .
Thus, if the function is called from the main program, all
the shared libraries are searched.
If it is called from a shared library, all subsequent shared
d201 4
a204 2
.Pp
If
d206 2
a207 7
is called with the special
.Fa handle
.Dv RTLD_SELF ,
then the search for the symbol is limited to the shared object
issuing the call to
.Fn dlsym
and those shared objects which were loaded after it.
a287 4
.Sh BUGS
An error that occurs while processing a
.Fn dlopen
request results in the termination of the program.
@


1.16
log
@add dladdr() support and add some 'standard' dlsym() support.
ok millert miod pval, grumble deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.15 2003/09/25 21:56:20 millert Exp $
d194 2
a195 2
On success, a non-zero value is returned. Note: both strings pointed
at by
@


1.15
log
@dlerror(3) should clear _dl_errno; based on a patch from Bjorn Sandell.
Closes PR 3441; drahn@@ OK
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.14 2002/12/30 13:51:59 millert Exp $
d39 1
d52 2
d81 2
d118 90
@


1.14
log
@sync protos with dlfcn.h; prompted by niekze AT yahoo DOT com
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.13 2001/11/13 13:54:25 mpech Exp $
d124 10
@


1.13
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.12 2000/10/26 00:37:03 aaron Exp $
d49 1
a49 1
.Fn dlsym "void *handle" "char *symbol"
d52 1
a52 1
.Ft "char *"
@


1.12
log
@Some share/man fleshing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.11 2000/05/25 21:49:01 deraadt Exp $
d56 1
a56 1
.Xr ld.so .
@


1.11
log
@rename rtld(1) to ld.so(1)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.10 2000/03/19 19:25:23 aaron Exp $
d36 5
a40 1
.Nm dlopen , dlclose , dlsym , dlctl , dlerror
d85 1
a85 1
.Fn dlsym
d88 1
a88 2
If the named shared object has already
been loaded by a previous call to
@


1.10
log
@Various cleanups.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d123 1
a123 1
.Xr rtld 1 ,
@


1.9
log
@dlopen and dlsym take const char * parameters.
Fix prototypes, propagate const where applicable.
@
text
@d1 1
d55 1
d58 2
a59 2
function takes a name of a shared object as its first argument. The
shared object is mapped into the address space, relocated and its external
d61 5
a65 2
shared libraries at program startup. The argument can either be an absolute
pathname or it can be of the form
d77 1
d93 2
a94 1
from the process address space. If multiple calls to
d106 2
a107 1
The symbol's address is returned. If the symbol cannot be resolved,
d114 2
a115 2
to control several aspects of the run-time linker's operation. This interface
is
@


1.8
log
@kill superfluous .Nm macro arguments
@
text
@d40 1
a40 1
.Fn dlopen "char *path" "int mode"
@


1.7
log
@share/man/man3 man page repairs
@
text
@d35 1
a35 5
.Nm dlopen ,
.Nm dlclose ,
.Nm dlsym ,
.Nm dlctl ,
.Nm dlerror
@


1.6
log
@More man page fixes. Particularly fix uses of it's/its, affect/effect,
then/than and such. Other miscellaneous problems fixed across these source
files.
@
text
@d56 1
a56 1
They allow new shared objects to be loaded into the process's address space
d60 1
a60 1
function takes a name of a shared object as the first argument. The
d73 1
a73 1
The second argument has currently no effect, but should be set to
@


1.5
log
@Fixed typos
@
text
@d56 1
a56 1
They allow new shared objects to be loaded into the process' address space
d86 1
a86 1
a handle refering to the resident copy is returned.
d94 1
a94 1
.Po or the object was one loaded at startup time
d115 1
a115 1
return a character string representing the most recent error that has
@


1.4
log
@fix
@
text
@d92 1
a92 1
.fn dlopen
d103 1
a103 1
The symbols address is returned. If the symbol cannot be resolved,
@


1.3
log
@from netbsd; Note search mechanism
@
text
@d35 4
a38 4
.Nm dlopen
.Nm dlclose
.Nm dlsym
.Nm dlctl
@


1.2
log
@make dlopen() use hints database, not just paths; from etheisen@@TECLink.Net; netbsd pr#1763
@
text
@d1 1
a1 1
.\"	$NetBSD: dlfcn.3,v 1.2 1995/10/01 18:47:23 pk Exp $
d44 1
a44 1
.Fn dlopen "char *name" "int mode"
d60 13
a72 5
function takes a filename of the forms 'libname.so', 'libname.so.xx.xx' where
xx are the major and minor revisions, or 'pathname/filename' of a shared object
as the first argument. The shared object is mapped into the address space,
relocated and its external references are resolved in the same way as is done
with the implicitly loaded shared libraries at program startup.
@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
.Fn dlopen "char *path" "int mode"
d60 5
a64 4
function takes a pathname of a shared object as the first argument. The
shared object is mapped into the address space, relocated and its external
references are resolved in the same way as is done with the implicitly loaded
shared libraries at program startup.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
