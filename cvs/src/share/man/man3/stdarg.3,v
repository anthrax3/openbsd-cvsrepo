head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.6
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.17.0.8
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.10
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.8
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.6
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.20
date	2015.11.10.23.48.17;	author jmc;	state Exp;
branches;
next	1.19;
commitid	QU70QaxjyBAtj4Rv;

1.19
date	2014.12.07.17.45.19;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	mXsglCcdlvEWhjc5;

1.18
date	2014.11.30.21.21.59;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	LCBTyemv87X040O7;

1.17
date	2013.06.05.03.42.03;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.01.19.13.58;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.48;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.12.12.21.08;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.19.11.04;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.30.12;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.17.22.19.43;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.24.19.32.24;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.20.04.06.13;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.13.16.54.09;	author heko;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.26.00.37.03;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.21.14.08.35;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.19.19.25.25;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.07.09.13.35.37;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.11.29.15.47.23;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	98.11.25.04.33.45;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@.\"	$OpenBSD: stdarg.3,v 1.19 2014/12/07 17:45:19 schwarze Exp $
.\"	$NetBSD: stdarg.3,v 1.15 2002/08/18 08:57:07 yamt Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)stdarg.3	8.1 (Berkeley) 6/5/93
.\"
.Dd $Mdocdate: December 7 2014 $
.Dt VA_START 3
.Os
.Sh NAME
.Nm va_start ,
.Nm va_arg ,
.Nm va_copy ,
.Nm va_end
.Nd variable argument lists
.Sh SYNOPSIS
.In stdarg.h
.Ft void
.Fn va_start "va_list ap" last
.Ft type
.Fn va_arg "va_list ap" type
.Ft void
.Fn va_copy "va_list dst" "va_list src"
.Ft void
.Fn va_end "va_list ap"
.Sh DESCRIPTION
A function may be called with a varying number of arguments of varying
types.
The include file
.In stdarg.h
declares a type
.Vt va_list
and defines three macros for stepping
through a list of arguments whose number and types are not known to
the called function.
.Pp
The called function must declare an object of type
.Vt va_list
which is used by the macros
.Fn va_start ,
.Fn va_arg ,
.Fn va_end ,
and, optionally,
.Fn va_copy .
.Pp
The
.Fn va_start
macro initializes
.Fa ap
for subsequent use by
.Fn va_arg ,
.Fn va_copy
and
.Fn va_end ,
and must be called first.
.Pp
The parameter
.Fa last
is the name of the last parameter before the variable argument list,
i.e., the last parameter of which the calling function knows the type.
.Pp
Because the address of this parameter is used in the
.Fn va_start
macro, it should not be declared as a register variable, nor as a
function, nor an array type.
.Pp
The
.Fn va_arg
macro expands to an expression that has the type and value of the next
argument in the call.
The parameter
.Fa ap
is the
.Va va_list ap
initialized by
.Fn va_start .
Each call to
.Fn va_arg
modifies
.Fa ap
so that the next call returns the next argument.
The parameter
.Fa type
is a type name specified so that the type of a pointer to an
object that has the specified type can be obtained simply by
adding a
.Ql *
to
.Fa type .
.Pp
If there is no next argument, or if
.Fa type
is not compatible with the type of the actual next argument
(as promoted according to the default argument promotions, see below),
random errors will occur.
.Pp
If the type in question is one that would normally be promoted, the
promoted type should be used as the argument to
.Fn va_arg .
The following describes which types should be promoted (and to what):
.Bl -dash -compact
.It
.Vt short
is promoted to
.Vt int
.It
.Vt float
is promoted to
.Vt double
.It
.Vt char
is promoted to
.Vt int
.El
.Pp
The same rules apply to unsigned versions of the above types, as well
as their bit-type equivalents (e.g.\&
.Vt int8_t
and
.Vt int16_t ) .
.Pp
The
.Fn va_copy
macro makes
.Fa dst
a copy of
.Fa src
as if the
.Fn va_start
macro had been applied to it followed by the same sequence of uses of the
.Fn va_arg
macro as had previously been used to reach the present state of
.Fa src .
.Pp
The
.Fn va_end
macro handles a normal return from the function whose variable argument
list was initialized by
.Fn va_start
or
.Fn va_copy .
.Sh RETURN VALUES
The first use of the
.Fn va_arg
macro after that of the
.Fn va_start
macro returns the argument after
.Fa last .
Successive invocations return the values of the remaining
arguments.
.Pp
The
.Fn va_start ,
.Fn va_copy
and
.Fn va_end
macros return no value.
.Sh EXAMPLES
The function
.Fn foo
takes a string of format characters and prints out the argument
associated with each format character based on the type.
.Bd -literal -offset indent
void
foo(char *fmt, ...)
{
	va_list ap;
	int d, c;
	char *s;
	double f;

	va_start(ap, fmt);
	while (*fmt)
		switch (*fmt++) {
		case 's':			/* string */
			s = va_arg(ap, char *);
			printf("string %s\en", s);
			break;
		case 'd':			/* int */
			d = va_arg(ap, int);
			printf("int %d\en", d);
			break;
		case 'c':			/* char */
			c = va_arg(ap, int);	/* promoted */
			printf("char %c\en", c);
			break;
		case 'f':			/* float */
			f = va_arg(ap, double); /* promoted */
			printf("float %f\en", f);
		}
	va_end(ap);
}
.Ed
.Sh STANDARDS
These macros are
.Em not
compatible with the historic macros they replace.
A backward compatible version can be found in the include
file
.In varargs.h .
.Pp
The
.Fn va_start ,
.Fn va_arg
and
.Fn va_end
macros conform to
.St -isoC-99 .
.Sh HISTORY
The
.Fn va_start ,
.Fn va_arg
and
.Fn va_end
macros were introduced in
.St -ansiC .
The
.Fn va_copy
macro was introduced in
.St -isoC-99 .
.Sh BUGS
Unlike the
.Em varargs
macros, the
.Nm stdarg
macros do not permit programmers to
code a function with no fixed arguments.
This problem generates work mainly when converting
.Em varargs
code to
.Nm stdarg
code,
but it also creates difficulties for variadic functions that
wish to pass all of their arguments on to a function
that takes an argument of type
.Vt va_list ,
such as
.Xr vfprintf 3 .
@


1.19
log
@macro cleanup and RETURN VALUES section; from Kaspars Bankovskis
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.18 2014/11/30 21:21:59 schwarze Exp $
d37 2
a38 2
.Dd $Mdocdate: November 30 2014 $
.Dt STDARG 3
@


1.18
log
@Replace all 14 instances of .St -ansiC-99 in our tree with .St -isoC-99.
The former is not used anywhere in NetBSD, FreeBSD, or DragonFly
and not supported by groff, so i'm going to delete it from mandoc(1).
We don't need two macros for the same thing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.17 2013/06/05 03:42:03 tedu Exp $
d37 1
a37 1
.Dd $Mdocdate: June 5 2013 $
d60 1
a60 1
.Aq Pa stdarg.h
d62 1
a62 1
.Pq Li va_list
d68 1
a68 1
.Li va_list
a97 4
.Fn va_start
macro returns no value.
.Pp
The
d104 1
a104 1
.Li va_list Fa ap
d133 1
a133 1
.Va short
d135 1
a135 1
.Va int
d137 1
a137 1
.Va float
d139 1
a139 1
.Va double
d141 1
a141 1
.Va char
d143 1
a143 1
.Va int
d148 1
a148 1
.Dv int8_t
d150 1
a150 10
.Dv int16_t ) .
.Pp
The first use of the
.Fn va_arg
macro after that of the
.Fn va_start
macro returns the argument after
.Fa last .
Successive invocations return the values of the remaining
arguments.
a165 4
.Fn va_copy
macro returns no value.
.Pp
The
d172 9
d183 3
d187 1
a187 1
macro returns no value.
d230 1
a230 1
.Aq Pa varargs.h .
d246 1
a246 1
.St -ansiC-89 .
d265 3
a267 3
that takes a
.Li va_list
argument, such as
@


1.17
log
@use fancy .In macros for includes. from Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.16 2011/04/01 19:13:58 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate: April 1 2011 $
d243 1
a243 1
.St -ansiC-99 .
d255 1
a255 1
.St -ansiC-99 .
@


1.16
log
@after nicm's last commit, fix some cases where non-arguments
had been left on macro lines...
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.15 2007/05/31 19:19:48 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate: May 31 2007 $
d47 1
a47 1
.Fd #include <stdarg.h>
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.14 2005/03/12 12:21:08 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate$
d152 2
a153 1
.Dv int8_t and
@


1.14
log
@escape `.' at eol to avoid double spacing issue;
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.13 2003/06/03 19:11:04 jmc Exp $
d37 1
a37 1
.Dd October 24, 2002
@


1.13
log
@merge COMPATIBILITY;
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.12 2003/06/02 23:30:12 millert Exp $
d151 1
a151 1
as their bit-type equivalents (e.g.
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.11 2002/11/17 22:19:43 millert Exp $
d229 7
a254 7
.Sh COMPATIBILITY
These macros are
.Em not
compatible with the historic macros they replace.
A backward compatible version can be found in the include
file
.Aq Pa varargs.h .
@


1.11
log
@Clarify section on type promotion.  This must be done by the programmer,
va_arg doesn't do it for you.  pvalchev@@ OK
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.10 2002/10/24 19:32:24 millert Exp $
d19 1
a19 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@document va_copy; from NetBSD (kleink)
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.9 2002/07/20 04:06:13 deraadt Exp $
d135 2
a136 2
If the type in question is one that gets promoted, the promoted type
should be used as the argument to
d138 1
a138 1
The following describes which types are promoted (and to what):
d153 5
@


1.9
log
@knf
@
text
@d1 2
a2 2
.\"	$OpenBSD: stdarg.3,v 1.8 2001/08/13 16:54:09 heko Exp $
.\"	$NetBSD: stdarg.3,v 1.3 1994/11/30 15:24:37 jtc Exp $
d41 1
a41 1
.Dd June 5, 1993
d47 1
d57 2
d76 3
a78 2
and
.Fn va_end .
d85 2
a86 1
.Fn va_arg
d164 17
d184 3
a186 1
.Fn va_start .
d234 13
a246 1
.St -ansiC .
@


1.8
log
@- Note that unpromoted types should not be passed to va_arg
  (see http://gcc.gnu.org/ml/gcc-patches/1999-09/msg00221.html)
- Remove unused *p variable from example
- Add a float example (mainly to point out that people shouldn't
  use float because it's promoted to double)
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.7 2000/10/26 00:37:03 aaron Exp $
d173 2
a174 1
void foo(char *fmt, ...)
@


1.7
log
@Some share/man fleshing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.6 2000/03/21 14:08:35 aaron Exp $
d127 1
a127 1
(as promoted according to the default argument promotions),
d130 19
d176 3
a178 2
	int d;
	char c, *p, *s;
d192 1
a192 1
			c = va_arg(ap, char);
d195 3
@


1.6
log
@Use proper KNF in code example; d@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: stdarg.3,v 1.5 2000/03/19 19:25:25 aaron Exp $
d45 3
a47 1
.Nm va_start , va_arg , va_end
@


1.5
log
@Various cleanups.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d160 1
a160 1
		switch(*fmt++) {
@


1.4
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
d61 1
a61 1
.Pq Em va_list
d67 1
a67 1
.Em va_list
d105 1
a105 1
.Em va_list Fa ap
d118 1
a118 1
.Dq \&*
d207 1
a207 1
.Em va_list
@


1.3
log
@kill superfluous .Nm macro arguments
@
text
@d103 1
a103 1
is the 
d107 1
a107 1
Each call to 
d115 1
a115 1
object that has the specified type can be obtained simply by 
d129 1
a129 1
macro after that of the 
d131 1
a131 1
macro returns the argument after 
d139 1
a139 1
list was initialized by 
d189 1
a189 1
file 
@


1.2
log
@share/man/man3 man page repairs
@
text
@d44 1
a44 3
.Nm va_start ,
.Nm va_arg ,
.Nm va_end
d179 1
a179 1
.Fn va_arg ,
@


1.1
log
@Initial revision
@
text
@d44 3
a46 1
.Nm stdarg
d88 1
a88 1
i.e. the last parameter of which the calling function knows the type.
d92 2
a93 2
macro, it should not be declared as a register variable, or as a
function or an array type.
d118 2
a119 1
adding a *
d149 1
a149 1
.Em foo
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
