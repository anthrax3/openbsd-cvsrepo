head	1.65;
access;
symbols
	OPENBSD_6_2:1.65.0.6
	OPENBSD_6_2_BASE:1.65
	OPENBSD_6_1:1.65.0.4
	OPENBSD_6_1_BASE:1.65
	OPENBSD_6_0:1.64.0.2
	OPENBSD_6_0_BASE:1.64
	OPENBSD_5_9:1.63.0.2
	OPENBSD_5_9_BASE:1.63
	OPENBSD_5_8:1.60.0.6
	OPENBSD_5_8_BASE:1.60
	OPENBSD_5_7:1.60.0.2
	OPENBSD_5_7_BASE:1.60
	OPENBSD_5_6:1.59.0.6
	OPENBSD_5_6_BASE:1.59
	OPENBSD_5_5:1.59.0.4
	OPENBSD_5_5_BASE:1.59
	OPENBSD_5_4:1.58.0.2
	OPENBSD_5_4_BASE:1.58
	OPENBSD_5_3:1.57.0.2
	OPENBSD_5_3_BASE:1.57
	OPENBSD_5_2:1.56.0.2
	OPENBSD_5_2_BASE:1.56
	OPENBSD_5_1_BASE:1.54
	OPENBSD_5_1:1.54.0.2
	OPENBSD_5_0:1.52.0.2
	OPENBSD_5_0_BASE:1.52
	OPENBSD_4_9:1.49.0.8
	OPENBSD_4_9_BASE:1.49
	OPENBSD_4_8:1.49.0.6
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.49.0.2
	OPENBSD_4_7_BASE:1.49
	OPENBSD_4_6:1.49.0.4
	OPENBSD_4_6_BASE:1.49
	OPENBSD_4_5:1.48.0.2
	OPENBSD_4_5_BASE:1.48
	OPENBSD_4_4:1.47.0.2
	OPENBSD_4_4_BASE:1.47
	OPENBSD_4_3:1.45.0.2
	OPENBSD_4_3_BASE:1.45
	OPENBSD_4_2:1.43.0.2
	OPENBSD_4_2_BASE:1.43
	OPENBSD_4_1:1.42.0.6
	OPENBSD_4_1_BASE:1.42
	OPENBSD_4_0:1.42.0.4
	OPENBSD_4_0_BASE:1.42
	OPENBSD_3_9:1.42.0.2
	OPENBSD_3_9_BASE:1.42
	OPENBSD_3_8:1.37.0.4
	OPENBSD_3_8_BASE:1.37
	OPENBSD_3_7:1.37.0.2
	OPENBSD_3_7_BASE:1.37
	OPENBSD_3_6:1.36.0.2
	OPENBSD_3_6_BASE:1.36
	OPENBSD_3_5:1.33.0.2
	OPENBSD_3_5_BASE:1.33
	OPENBSD_3_4:1.31.0.2
	OPENBSD_3_4_BASE:1.31
	OPENBSD_3_3:1.27.0.2
	OPENBSD_3_3_BASE:1.27
	OPENBSD_3_2:1.23.0.2
	OPENBSD_3_2_BASE:1.23
	OPENBSD_3_1:1.22.0.2
	OPENBSD_3_1_BASE:1.22
	OPENBSD_3_0:1.20.0.2
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.65
date	2017.01.12.16.28.49;	author mpi;	state Exp;
branches;
next	1.64;
commitid	R9nYGORS4bBuPlEG;

1.64
date	2016.03.14.22.39.23;	author jmc;	state Exp;
branches;
next	1.63;
commitid	LwuzxMe5PYfiknq2;

1.63
date	2015.11.19.13.38.07;	author millert;	state Exp;
branches;
next	1.62;
commitid	84GDrP6o9VcPHWFD;

1.62
date	2015.11.10.23.48.17;	author jmc;	state Exp;
branches;
next	1.61;
commitid	QU70QaxjyBAtj4Rv;

1.61
date	2015.10.10.20.36.20;	author tobias;	state Exp;
branches;
next	1.60;
commitid	embWWldIC6QFlpw0;

1.60
date	2014.09.13.01.09.31;	author guenther;	state Exp;
branches;
next	1.59;
commitid	qs0XNI8ha4FteApe;

1.59
date	2013.08.14.06.32.31;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2013.06.05.03.42.03;	author tedu;	state Exp;
branches;
next	1.57;

1.57
date	2012.11.17.17.21.44;	author guenther;	state Exp;
branches;
next	1.56;

1.56
date	2012.04.11.13.29.14;	author naddy;	state Exp;
branches;
next	1.55;

1.55
date	2012.03.06.23.41.59;	author haesbaert;	state Exp;
branches;
next	1.54;

1.54
date	2012.01.11.19.26.34;	author bluhm;	state Exp;
branches;
next	1.53;

1.53
date	2012.01.11.00.06.48;	author bluhm;	state Exp;
branches;
next	1.52;

1.52
date	2011.07.09.08.43.01;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2011.07.09.00.20.36;	author pirofti;	state Exp;
branches;
next	1.50;

1.50
date	2011.07.03.16.08.40;	author matthew;	state Exp;
branches;
next	1.49;

1.49
date	2009.03.01.10.28.55;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2009.02.25.16.43.05;	author beck;	state Exp;
branches;
next	1.47;

1.47
date	2008.07.27.07.06.42;	author stefan;	state Exp;
branches;
next	1.46;

1.46
date	2008.03.31.13.15.53;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2007.12.24.10.30.27;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2007.12.16.13.23.57;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2007.05.31.19.19.48;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2006.01.12.17.01.15;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2006.01.12.12.05.11;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2006.01.11.09.07.54;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2006.01.06.08.48.06;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2005.10.27.19.27.10;	author otto;	state Exp;
branches;
next	1.37;

1.37
date	2005.01.04.20.45.01;	author jaredy;	state Exp;
branches;
next	1.36;

1.36
date	2004.08.16.21.31.31;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2004.06.03.14.16.33;	author jfb;	state Exp;
branches;
next	1.34;

1.34
date	2004.04.08.16.08.21;	author henning;	state Exp;
branches;
next	1.33;

1.33
date	2003.12.16.21.08.20;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2003.12.05.21.55.29;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2003.06.02.23.30.12;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2003.05.20.09.13.38;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2003.05.17.18.40.12;	author krw;	state Exp;
branches;
next	1.28;

1.28
date	2003.04.16.07.51.22;	author mickey;	state Exp;
branches;
next	1.27;

1.27
date	2003.03.09.17.18.44;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2003.01.15.04.18.19;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2002.12.07.07.18.17;	author marc;	state Exp;
branches;
next	1.24;

1.24
date	2002.11.07.21.02.43;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2002.04.26.02.24.48;	author wcobb;	state Exp;
branches;
next	1.22;

1.22
date	2002.02.24.04.35.32;	author krw;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.03.16.36.40;	author jason;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.02.19.06.58;	author mpech;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.23.04.46.30;	author angelos;	state Exp;
branches;
next	1.18;

1.18
date	2001.05.24.19.08.21;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2001.05.18.17.23.46;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2001.03.01.16.11.14;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.12.14.20.20.06;	author provos;	state Exp;
branches;
next	1.14;

1.14
date	2000.11.21.05.54.33;	author angelos;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.21.05.14.15;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.26.00.37.03;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.15.01.42.29;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.15.01.37.28;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.19.19.25.24;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.09.08.08.20.49;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.09.05.15.55.46;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.07.02.20.11.49;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.06.05.13.18.31;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.11.25.04.33.45;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.06.15.17.56.00;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.05.30.07.48.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.65
log
@TAILQ_CONCAT() takes 3 arguments.
@
text
@.\"	$OpenBSD: queue.3,v 1.64 2016/03/14 22:39:23 jmc Exp $
.\"	$NetBSD: queue.3,v 1.4 1995/07/03 00:25:36 mycroft Exp $
.\"
.\" Copyright (c) 1993 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)queue.3	8.1 (Berkeley) 12/13/93
.\"
.Dd $Mdocdate: March 14 2016 $
.Dt SLIST_INIT 3
.Os
.Sh NAME
.Nm SLIST_ENTRY ,
.Nm SLIST_HEAD ,
.Nm SLIST_HEAD_INITIALIZER ,
.Nm SLIST_FIRST ,
.Nm SLIST_NEXT ,
.Nm SLIST_EMPTY ,
.Nm SLIST_FOREACH ,
.Nm SLIST_FOREACH_SAFE ,
.Nm SLIST_INIT ,
.Nm SLIST_INSERT_AFTER ,
.Nm SLIST_INSERT_HEAD ,
.Nm SLIST_REMOVE_AFTER ,
.Nm SLIST_REMOVE_HEAD ,
.Nm SLIST_REMOVE ,
.Nm LIST_ENTRY ,
.Nm LIST_HEAD ,
.Nm LIST_HEAD_INITIALIZER ,
.Nm LIST_FIRST ,
.Nm LIST_NEXT ,
.Nm LIST_EMPTY ,
.Nm LIST_FOREACH ,
.Nm LIST_FOREACH_SAFE ,
.Nm LIST_INIT ,
.Nm LIST_INSERT_AFTER ,
.Nm LIST_INSERT_BEFORE ,
.Nm LIST_INSERT_HEAD ,
.Nm LIST_REMOVE ,
.Nm LIST_REPLACE ,
.Nm SIMPLEQ_ENTRY ,
.Nm SIMPLEQ_HEAD ,
.Nm SIMPLEQ_HEAD_INITIALIZER ,
.Nm SIMPLEQ_FIRST ,
.Nm SIMPLEQ_NEXT ,
.Nm SIMPLEQ_EMPTY ,
.Nm SIMPLEQ_FOREACH ,
.Nm SIMPLEQ_FOREACH_SAFE ,
.Nm SIMPLEQ_INIT ,
.Nm SIMPLEQ_INSERT_AFTER ,
.Nm SIMPLEQ_INSERT_HEAD ,
.Nm SIMPLEQ_INSERT_TAIL ,
.Nm SIMPLEQ_REMOVE_AFTER ,
.Nm SIMPLEQ_REMOVE_HEAD ,
.Nm SIMPLEQ_CONCAT ,
.Nm TAILQ_ENTRY ,
.Nm TAILQ_HEAD ,
.Nm TAILQ_HEAD_INITIALIZER ,
.Nm TAILQ_FIRST ,
.Nm TAILQ_NEXT ,
.Nm TAILQ_LAST ,
.Nm TAILQ_PREV ,
.Nm TAILQ_EMPTY ,
.Nm TAILQ_FOREACH ,
.Nm TAILQ_FOREACH_SAFE ,
.Nm TAILQ_FOREACH_REVERSE ,
.Nm TAILQ_FOREACH_REVERSE_SAFE ,
.Nm TAILQ_INIT ,
.Nm TAILQ_INSERT_AFTER ,
.Nm TAILQ_INSERT_BEFORE ,
.Nm TAILQ_INSERT_HEAD ,
.Nm TAILQ_INSERT_TAIL ,
.Nm TAILQ_REMOVE ,
.Nm TAILQ_REPLACE ,
.Nm TAILQ_CONCAT
.Nd implementations of singly-linked lists, doubly-linked lists, simple queues, and tail queues
.Sh SYNOPSIS
.In sys/queue.h
.Pp
.Fn SLIST_ENTRY "TYPE"
.Fn SLIST_HEAD "HEADNAME" "TYPE"
.Fn SLIST_HEAD_INITIALIZER "SLIST_HEAD head"
.Ft "struct TYPE *"
.Fn SLIST_FIRST "SLIST_HEAD *head"
.Ft "struct TYPE *"
.Fn SLIST_NEXT "struct TYPE *listelm" "FIELDNAME"
.Ft int
.Fn SLIST_EMPTY "SLIST_HEAD *head"
.Fn SLIST_FOREACH "VARNAME" "SLIST_HEAD *head" "FIELDNAME"
.Fn SLIST_FOREACH_SAFE "VARNAME" "SLIST_HEAD *head" "FIELDNAME" "TEMP_VARNAME"
.Ft void
.Fn SLIST_INIT "SLIST_HEAD *head"
.Ft void
.Fn SLIST_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn SLIST_INSERT_HEAD "SLIST_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn SLIST_REMOVE_AFTER "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn SLIST_REMOVE_HEAD "SLIST_HEAD *head" "FIELDNAME"
.Ft void
.Fn SLIST_REMOVE "SLIST_HEAD *head" "struct TYPE *elm" "TYPE" "FIELDNAME"
.Pp
.Fn LIST_ENTRY "TYPE"
.Fn LIST_HEAD "HEADNAME" "TYPE"
.Fn LIST_HEAD_INITIALIZER "LIST_HEAD head"
.Ft "struct TYPE *"
.Fn LIST_FIRST "LIST_HEAD *head"
.Ft "struct TYPE *"
.Fn LIST_NEXT "struct TYPE *listelm" "FIELDNAME"
.Ft int
.Fn LIST_EMPTY "LIST_HEAD *head"
.Fn LIST_FOREACH "VARNAME" "LIST_HEAD *head" "FIELDNAME"
.Fn LIST_FOREACH_SAFE "VARNAME" "LIST_HEAD *head" "FIELDNAME" "TEMP_VARNAME"
.Ft void
.Fn LIST_INIT "LIST_HEAD *head"
.Ft void
.Fn LIST_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn LIST_INSERT_BEFORE "struct TYPE *listelm" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn LIST_INSERT_HEAD "LIST_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn LIST_REMOVE "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn LIST_REPLACE "struct TYPE *elm" "struct TYPE *elm2" "FIELDNAME"
.Pp
.Fn SIMPLEQ_ENTRY "TYPE"
.Fn SIMPLEQ_HEAD "HEADNAME" "TYPE"
.Fn SIMPLEQ_HEAD_INITIALIZER "SIMPLEQ_HEAD head"
.Ft "struct TYPE *"
.Fn SIMPLEQ_FIRST "SIMPLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn SIMPLEQ_NEXT "struct TYPE *listelm" "FIELDNAME"
.Ft int
.Fn SIMPLEQ_EMPTY "SIMPLEQ_HEAD *head"
.Fn SIMPLEQ_FOREACH "VARNAME" "SIMPLEQ_HEAD *head" "FIELDNAME"
.Fn SIMPLEQ_FOREACH_SAFE "VARNAME" "SIMPLEQ_HEAD *head" "FIELDNAME" "TEMP_VARNAME"
.Ft void
.Fn SIMPLEQ_INIT "SIMPLEQ_HEAD *head"
.Ft void
.Fn SIMPLEQ_INSERT_AFTER "SIMPLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn SIMPLEQ_INSERT_HEAD "SIMPLEQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn SIMPLEQ_INSERT_TAIL "SIMPLEQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn SIMPLEQ_REMOVE_AFTER "SIMPLEQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn SIMPLEQ_REMOVE_HEAD "SIMPLEQ_HEAD *head" "FIELDNAME"
.Fn SIMPLEQ_CONCAT "SIMPLEQ_HEAD *head1" "SIMPLEQ_HEAD *head2"
.Pp
.Fn TAILQ_ENTRY "TYPE"
.Fn TAILQ_HEAD "HEADNAME" "TYPE"
.Fn TAILQ_HEAD_INITIALIZER "TAILQ_HEAD head"
.Ft "struct TYPE *"
.Fn TAILQ_FIRST "TAILQ_HEAD *head"
.Ft "struct TYPE *"
.Fn TAILQ_NEXT "struct TYPE *listelm" "FIELDNAME"
.Ft "struct TYPE *"
.Fn TAILQ_LAST "TAILQ_HEAD *head" "HEADNAME"
.Ft "struct TYPE *"
.Fn TAILQ_PREV "struct TYPE *listelm" "HEADNAME" "FIELDNAME"
.Ft int
.Fn TAILQ_EMPTY "TAILQ_HEAD *head"
.Fn TAILQ_FOREACH "VARNAME" "TAILQ_HEAD *head" "FIELDNAME"
.Fn TAILQ_FOREACH_SAFE "VARNAME" "TAILQ_HEAD *head" "FIELDNAME" "TEMP_VARNAME"
.Fn TAILQ_FOREACH_REVERSE "VARNAME" "TAILQ_HEAD *head" "HEADNAME" "FIELDNAME"
.Fn TAILQ_FOREACH_REVERSE_SAFE "VARNAME" "TAILQ_HEAD *head" "HEADNAME" "FIELDNAME" "TEMP_VARNAME"
.Ft void
.Fn TAILQ_INIT "TAILQ_HEAD *head"
.Ft void
.Fn TAILQ_INSERT_AFTER "TAILQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn TAILQ_INSERT_BEFORE "struct TYPE *listelm" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn TAILQ_INSERT_HEAD "TAILQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn TAILQ_INSERT_TAIL "TAILQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn TAILQ_REMOVE "TAILQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn TAILQ_REPLACE "TAILQ_HEAD *head" "struct TYPE *elm" "struct TYPE *elm2" "FIELDNAME"
.Fn TAILQ_CONCAT "TAILQ_HEAD *head1" "TAILQ_HEAD *head2" "FIELDNAME"
.Sh DESCRIPTION
These macros define and operate on four types of data structures:
singly-linked lists, simple queues, lists, and tail queues.
All four structures support the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Insertion of a new entry at the head of the list.
.It
Insertion of a new entry after any element in the list.
.It
Removal of an entry from the head of the list.
.It
Forward traversal through the list.
.El
.Pp
Singly-linked lists are the simplest of the four data structures
and support only the above functionality.
Singly-linked lists are ideal for applications with large datasets
and few or no removals, or for implementing a LIFO queue.
.Pp
Simple queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added at the end of a list.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
Code size is about 15% greater and operations run about 20% slower
than singly-linked lists.
.El
.Pp
Simple queues are ideal for applications with large datasets and
few or no removals, or for implementing a FIFO queue.
.Pp
All doubly linked types of data structures (lists and tail queues)
additionally allow:
.Pp
.Bl -enum -compact -offset indent
.It
Insertion of a new entry before any element in the list.
.It
Removal of any entry in the list.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
Each element requires two pointers rather than one.
.It
Code size and execution time of operations (except for removal) is about
twice that of the singly-linked data-structures.
.El
.Pp
Lists are the simplest of the doubly linked data structures and support
only the above functionality over singly-linked lists.
.Pp
Tail queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added at the end of a list.
.It
They may be traversed backwards, at a cost.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions and removals must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
Code size is about 15% greater and operations run about 20% slower
than singly-linked lists.
.El
.Pp
An additional type of data structure, circular queues, violated the C
language aliasing rules and were miscompiled as a result.
All code using them should be converted to another structure;
tail queues are usually the easiest to convert to.
.Pp
In the macro definitions,
.Fa TYPE
is the name tag of a user defined structure that must contain a field of type
.Li SLIST_ENTRY ,
.Li LIST_ENTRY ,
.Li SIMPLEQ_ENTRY ,
or
.Li TAILQ_ENTRY ,
named
.Fa FIELDNAME .
The argument
.Fa HEADNAME
is the name tag of a user defined structure that must be declared
using the macros
.Fn SLIST_HEAD ,
.Fn LIST_HEAD ,
.Fn SIMPLEQ_HEAD ,
or
.Fn TAILQ_HEAD .
See the examples below for further explanation of how these macros are used.
.Sh SINGLY-LINKED LISTS
A singly-linked list is headed by a structure defined by the
.Fn SLIST_HEAD
macro.
This structure contains a single pointer to the first element on the list.
The elements are singly linked for minimum space and pointer manipulation
overhead at the expense of O(n) removal for arbitrary elements.
New elements can be added to the list after an existing element or
at the head of the list.
A
.Fa SLIST_HEAD
structure is declared as follows:
.Bd -literal -offset indent
SLIST_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the list.
A pointer to the head of the list can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fa HEADNAME
facility is often not used, leading to the following bizarre code:
.Bd -literal -offset indent
SLIST_HEAD(, TYPE) head, *headp;
.Ed
.Pp
The
.Fn SLIST_ENTRY
macro declares a structure that connects the elements in the list.
.Pp
The
.Fn SLIST_INIT
macro initializes the list referenced by
.Fa head .
.Pp
The list can also be initialized statically by using the
.Fn SLIST_HEAD_INITIALIZER
macro like this:
.Bd -literal -offset indent
SLIST_HEAD(HEADNAME, TYPE) head = SLIST_HEAD_INITIALIZER(head);
.Ed
.Pp
The
.Fn SLIST_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the list.
.Pp
The
.Fn SLIST_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn SLIST_REMOVE_HEAD
macro removes the first element of the list pointed by
.Fa head .
.Pp
The
.Fn SLIST_REMOVE_AFTER
macro removes the list element immediately following
.Fa elm .
.Pp
The
.Fn SLIST_REMOVE
macro removes the element
.Fa elm
of the list pointed by
.Fa head .
.Pp
The
.Fn SLIST_FIRST
and
.Fn SLIST_NEXT
macros can be used to traverse the list:
.Bd -literal -offset indent
for (np = SLIST_FIRST(&head); np != NULL; np = SLIST_NEXT(np, FIELDNAME))
.Ed
.Pp
Or, for simplicity, one can use the
.Fn SLIST_FOREACH
macro:
.Bd -literal -offset indent
SLIST_FOREACH(np, head, FIELDNAME)
.Ed
.Pp
The macro
.Fn SLIST_FOREACH_SAFE
traverses the list referenced by head in a
forward direction, assigning each element in turn to var.
However, unlike
.Fn SLIST_FOREACH
it is permitted to remove var as well
as free it from within the loop safely without interfering with the traversal.
.Pp
The
.Fn SLIST_EMPTY
macro should be used to check whether a simple list is empty.
.Sh SINGLY-LINKED LIST EXAMPLE
.Bd -literal
SLIST_HEAD(listhead, entry) head;
struct entry {
	...
	SLIST_ENTRY(entry) entries;	/* Simple list. */
	...
} *n1, *n2, *np;

SLIST_INIT(&head);			/* Initialize simple list. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
SLIST_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
SLIST_INSERT_AFTER(n1, n2, entries);

SLIST_FOREACH(np, &head, entries)	/* Forward traversal. */
	np-> ...

while (!SLIST_EMPTY(&head)) {	 	/* Delete. */
	n1 = SLIST_FIRST(&head);
	SLIST_REMOVE_HEAD(&head, entries);
	free(n1);
}

.Ed
.Sh LISTS
A list is headed by a structure defined by the
.Fn LIST_HEAD
macro.
This structure contains a single pointer to the first element on the list.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the list.
New elements can be added to the list after an existing element,
before an existing element, or at the head of the list.
A
.Fa LIST_HEAD
structure is declared as follows:
.Bd -literal -offset indent
LIST_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the list.
A pointer to the head of the list can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fa HEADNAME
facility is often not used, leading to the following bizarre code:
.Bd -literal -offset indent
LIST_HEAD(, TYPE) head, *headp;
.Ed
.Pp
The
.Fn LIST_ENTRY
macro declares a structure that connects the elements in the list.
.Pp
The
.Fn LIST_INIT
macro initializes the list referenced by
.Fa head .
.Pp
The list can also be initialized statically by using the
.Fn LIST_HEAD_INITIALIZER
macro like this:
.Bd -literal -offset indent
LIST_HEAD(HEADNAME, TYPE) head = LIST_HEAD_INITIALIZER(head);
.Ed
.Pp
The
.Fn LIST_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the list.
.Pp
The
.Fn LIST_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn LIST_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn LIST_REMOVE
macro removes the element
.Fa elm
from the list.
.Pp
The
.Fn LIST_REPLACE
macro replaces the list element
.Fa elm
with the new element
.Fa elm2 .
.Pp
The
.Fn LIST_FIRST
and
.Fn LIST_NEXT
macros can be used to traverse the list:
.Bd -literal -offset indent
for (np = LIST_FIRST(&head); np != NULL; np = LIST_NEXT(np, FIELDNAME))
.Ed
.Pp
Or, for simplicity, one can use the
.Fn LIST_FOREACH
macro:
.Bd -literal -offset indent
LIST_FOREACH(np, head, FIELDNAME)
.Ed
.Pp
The macro
.Fn LIST_FOREACH_SAFE
traverses the list referenced by head in a
forward direction, assigning each element in turn to var.
However, unlike
.Fn LIST_FOREACH
it is permitted to remove var as well
as free it from within the loop safely without interfering with the traversal.
.Pp
The
.Fn LIST_EMPTY
macro should be used to check whether a list is empty.
.Sh LIST EXAMPLE
.Bd -literal
LIST_HEAD(listhead, entry) head;
struct entry {
	...
	LIST_ENTRY(entry) entries;	/* List. */
	...
} *n1, *n2, *np;

LIST_INIT(&head);			/* Initialize list. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
LIST_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
LIST_INSERT_AFTER(n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
LIST_INSERT_BEFORE(n1, n2, entries);
					/* Forward traversal. */
LIST_FOREACH(np, &head, entries)
	np-> ...

while (!LIST_EMPTY(&head)) {		/* Delete. */
	n1 = LIST_FIRST(&head);
	LIST_REMOVE(n1, entries);
	free(n1);
}
.Ed
.Sh SIMPLE QUEUES
A simple queue is headed by a structure defined by the
.Fn SIMPLEQ_HEAD
macro.
This structure contains a pair of pointers, one to the first element in the
simple queue and the other to the last element in the simple queue.
The elements are singly linked.
New elements can be added to the queue after an existing element,
at the head of the queue or at the tail of the queue.
A
.Fa SIMPLEQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
SIMPLEQ_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the queue.
A pointer to the head of the queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn SIMPLEQ_ENTRY
macro declares a structure that connects the elements in
the queue.
.Pp
The
.Fn SIMPLEQ_INIT
macro initializes the queue referenced by
.Fa head .
.Pp
The queue can also be initialized statically by using the
.Fn SIMPLEQ_HEAD_INITIALIZER
macro like this:
.Bd -literal -offset indent
SIMPLEQ_HEAD(HEADNAME, TYPE) head = SIMPLEQ_HEAD_INITIALIZER(head);
.Ed
.Pp
The
.Fn SIMPLEQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn SIMPLEQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the queue.
.Pp
The
.Fn SIMPLEQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the queue.
.Pp
The
.Fn SIMPLEQ_REMOVE_AFTER
macro removes the queue element immediately following
.Fa elm .
.Pp
The
.Fn SIMPLEQ_REMOVE_HEAD
macro removes the first element
from the queue.
.Pp
The
.Fn SIMPLEQ_CONCAT
macro concatenates all the elements of the queue referenced by
.Fa head2
to the end of the queue referenced by
.Fa head1 ,
emptying
.Fa head2
in the process.
This is more efficient than removing and inserting the individual elements
as it does not actually traverse
.Fa head2 .
.Pp
The
.Fn SIMPLEQ_FIRST
and
.Fn SIMPLEQ_NEXT
macros can be used to traverse the queue.
The
.Fn SIMPLEQ_FOREACH
is used for queue traversal:
.Bd -literal -offset indent
SIMPLEQ_FOREACH(np, head, FIELDNAME)
.Ed
.Pp
The macro
.Fn SIMPLEQ_FOREACH_SAFE
traverses the queue referenced by head in a
forward direction, assigning each element in turn to var.
However, unlike
.Fn SIMPLEQ_FOREACH
it is permitted to remove var as well
as free it from within the loop safely without interfering with the traversal.
.Pp
The
.Fn SIMPLEQ_EMPTY
macro should be used to check whether a list is empty.
.Sh SIMPLE QUEUE EXAMPLE
.Bd -literal
SIMPLEQ_HEAD(listhead, entry) head = SIMPLEQ_HEAD_INITIALIZER(head);
struct entry {
	...
	SIMPLEQ_ENTRY(entry) entries;	/* Simple queue. */
	...
} *n1, *n2, *np;

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
SIMPLEQ_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
SIMPLEQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert at the tail. */
SIMPLEQ_INSERT_TAIL(&head, n2, entries);
					/* Forward traversal. */
SIMPLEQ_FOREACH(np, &head, entries)
	np-> ...
					/* Delete. */
while (!SIMPLEQ_EMPTY(&head)) {
	n1 = SIMPLEQ_FIRST(&head);
	SIMPLEQ_REMOVE_HEAD(&head, entries);
	free(n1);
}
.Ed
.Sh TAIL QUEUES
A tail queue is headed by a structure defined by the
.Fn TAILQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the tail queue and the other to
the last element in the tail queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the tail queue.
New elements can be added to the queue after an existing element,
before an existing element, at the head of the queue, or at the end
of the queue.
A
.Fa TAILQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
TAILQ_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the tail queue.
A pointer to the head of the tail queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn TAILQ_ENTRY
macro declares a structure that connects the elements in
the tail queue.
.Pp
The
.Fn TAILQ_INIT
macro initializes the tail queue referenced by
.Fa head .
.Pp
The tail queue can also be initialized statically by using the
.Fn TAILQ_HEAD_INITIALIZER
macro.
.Pp
The
.Fn TAILQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the tail queue.
.Pp
The
.Fn TAILQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the tail queue.
.Pp
The
.Fn TAILQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn TAILQ_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn TAILQ_REMOVE
macro removes the element
.Fa elm
from the tail queue.
.Pp
The
.Fn TAILQ_REPLACE
macro replaces the list element
.Fa elm
with the new element
.Fa elm2 .
.Pp
The
.Fn TAILQ_CONCAT
macro concatenates all the elements of the tail queue referenced by
.Fa head2
to the end of the tail queue referenced by
.Fa head1 ,
emptying
.Fa head2
in the process.
This is more efficient than removing and inserting the individual elements
as it does not actually traverse
.Fa head2 .
.Pp
.Fn TAILQ_FOREACH
and
.Fn TAILQ_FOREACH_REVERSE
are used for traversing a tail queue.
.Fn TAILQ_FOREACH
starts at the first element and proceeds towards the last.
.Fn TAILQ_FOREACH_REVERSE
starts at the last element and proceeds towards the first.
.Bd -literal -offset indent
TAILQ_FOREACH(np, &head, FIELDNAME)
TAILQ_FOREACH_REVERSE(np, &head, HEADNAME, FIELDNAME)
.Ed
.Pp
The macros
.Fn TAILQ_FOREACH_SAFE
and
.Fn TAILQ_FOREACH_REVERSE_SAFE
traverse the list referenced by head
in a forward or reverse direction respectively,
assigning each element in turn to var.
However, unlike their unsafe counterparts,
they permit both the removal of var
as well as freeing it from within the loop safely
without interfering with the traversal.
.Pp
The
.Fn TAILQ_FIRST ,
.Fn TAILQ_NEXT ,
.Fn TAILQ_LAST
and
.Fn TAILQ_PREV
macros can be used to manually traverse a tail queue or an arbitrary part of
one.
.Pp
The
.Fn TAILQ_EMPTY
macro should be used to check whether a tail queue is empty.
.Sh TAIL QUEUE EXAMPLE
.Bd -literal
TAILQ_HEAD(tailhead, entry) head;
struct entry {
	...
	TAILQ_ENTRY(entry) entries;	/* Tail queue. */
	...
} *n1, *n2, *np;

TAILQ_INIT(&head);			/* Initialize queue. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
TAILQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));	/* Insert at the tail. */
TAILQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
TAILQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
TAILQ_INSERT_BEFORE(n1, n2, entries);
					/* Forward traversal. */
TAILQ_FOREACH(np, &head, entries)
	np-> ...
					/* Manual forward traversal. */
for (np = n2; np != NULL; np = TAILQ_NEXT(np, entries))
	np-> ...
					/* Delete. */
while ((np = TAILQ_FIRST(&head))) {
	TAILQ_REMOVE(&head, np, entries);
	free(np);
}

.Ed
.Sh SEE ALSO
.Xr tree 3
.Sh NOTES
It is an error to assume the next and previous fields are preserved
after an element has been removed from a list or queue.
Using any macro (except the various forms of insertion) on an element
removed from a list or queue is incorrect.
An example of erroneous usage is removing the same element twice.
.Pp
The
.Fn SLIST_END ,
.Fn LIST_END ,
.Fn SIMPLEQ_END
and
.Fn TAILQ_END
macros are deprecated; they provided symmetry with the historical
.Fn CIRCLEQ_END
and just expand to
.Dv NULL .
.Pp
Trying to free a list in the following way is a common error:
.Bd -literal -offset indent
LIST_FOREACH(var, head, entry)
	free(var);
free(head);
.Ed
.Pp
Since
.Va var
is free'd, the FOREACH macros refer to a pointer that may have been
reallocated already.
A similar situation occurs when the current element is deleted
from the list.
In cases like these the data structure's FOREACH_SAFE macros should be used
instead.
.Sh HISTORY
The
.Nm queue
functions first appeared in
.Bx 4.4 .
The historical circle queue macros were deprecated in
.Ox 5.5 .
@


1.64
log
@some Xr; from michal mazurek
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.63 2015/11/19 13:38:07 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: November 19 2015 $
d208 1
a208 1
.Fn TAILQ_CONCAT "TAILQ_HEAD *head1" "TAILQ_HEAD *head2"
@


1.63
log
@Add SIMPLEQ_CONCAT and TAILQ_CONCAT for moving one queue onto the end
of another one.  Adapted from FreeBSD.  OK jmc@@ dlg@@ nicm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.62 2015/11/10 23:48:17 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: November 10 2015 $
d921 2
@


1.62
log
@update NAME section to include all documented functions,
or otherwise change Dt to reflect the name of an existing function;

feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.61 2015/10/10 20:36:20 tobias Exp $
d33 1
a33 1
.Dd $Mdocdate: October 10 2015 $
d79 1
d98 2
a99 1
.Nm TAILQ_REPLACE
d175 1
d208 1
d685 13
d835 13
@


1.61
log
@Added missing curly bracket into LIST_EMPTY example.

ok deraadt@@, otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.60 2014/09/13 01:09:31 guenther Exp $
d33 2
a34 2
.Dd $Mdocdate: September 13 2014 $
.Dt QUEUE 3
@


1.60
log
@Retire the CIRCLEQ_* and *_END macros here, noting why they were deprecated.

kick started by Gre'goire Duche^ne <gduchene@@awhk.org>
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.59 2013/08/14 06:32:31 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 14 2013 $
d596 1
a596 1
while (!LIST_EMPTY(&head))		/* Delete. */
@


1.59
log
@no longer any need to quote macro lines with >9 args;
From: Jan Stary
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.58 2013/06/05 03:42:03 tedu Exp $
d33 1
a33 1
.Dd $Mdocdate: June 5 2013 $
a41 1
.Nm SLIST_END ,
a55 1
.Nm LIST_END ,
a69 1
.Nm SIMPLEQ_END ,
a83 1
.Nm TAILQ_END ,
d97 2
a98 21
.Nm TAILQ_REPLACE ,
.Nm CIRCLEQ_ENTRY ,
.Nm CIRCLEQ_HEAD ,
.Nm CIRCLEQ_HEAD_INITIALIZER ,
.Nm CIRCLEQ_FIRST ,
.Nm CIRCLEQ_LAST ,
.Nm CIRCLEQ_END ,
.Nm CIRCLEQ_NEXT ,
.Nm CIRCLEQ_PREV ,
.Nm CIRCLEQ_EMPTY ,
.Nm CIRCLEQ_FOREACH ,
.Nm CIRCLEQ_FOREACH_SAFE ,
.Nm CIRCLEQ_FOREACH_REVERSE_SAFE ,
.Nm CIRCLEQ_INIT ,
.Nm CIRCLEQ_INSERT_AFTER ,
.Nm CIRCLEQ_INSERT_BEFORE ,
.Nm CIRCLEQ_INSERT_HEAD ,
.Nm CIRCLEQ_INSERT_TAIL ,
.Nm CIRCLEQ_REMOVE ,
.Nm CIRCLEQ_REPLACE
.Nd implementations of singly-linked lists, doubly-linked lists, simple queues, tail queues, and circular queues
a108 2
.Ft "struct TYPE *"
.Fn SLIST_END "SLIST_HEAD *head"
a132 2
.Ft "struct TYPE *"
.Fn LIST_END "LIST_HEAD *head"
a156 2
.Ft "struct TYPE *"
.Fn SIMPLEQ_END "SIMPLEQ_HEAD *head"
a181 2
.Fn TAILQ_END "TAILQ_HEAD *head"
.Ft "struct TYPE *"
a204 34
.Pp
.Fn CIRCLEQ_ENTRY "TYPE"
.Fn CIRCLEQ_HEAD "HEADNAME" "TYPE"
.Fn CIRCLEQ_HEAD_INITIALIZER "CIRCLEQ_HEAD head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_FIRST "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_LAST "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_END "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_NEXT "struct TYPE *listelm" "FIELDNAME"
.Ft "struct TYPE *"
.Fn CIRCLEQ_PREV "struct TYPE *listelm" "FIELDNAME"
.Ft int
.Fn CIRCLEQ_EMPTY "CIRCLEQ_HEAD *head"
.Fn CIRCLEQ_FOREACH "VARNAME" "CIRCLEQ_HEAD *head" "FIELDNAME"
.Fn CIRCLEQ_FOREACH_SAFE "VARNAME" "CIRCLEQ_HEAD *head" "FIELDNAME" "TEMP_VARNAME"
.Fn CIRCLEQ_FOREACH_REVERSE "VARNAME" "CIRCLEQ_HEAD *head" "FIELDNAME"
.Fn CIRCLEQ_FOREACH_REVERSE_SAFE "VARNAME" "CIRCLEQ_HEAD *head" "FIELDNAME" "TEMP_VARNAME"
.Ft void
.Fn CIRCLEQ_INIT "CIRCLEQ_HEAD *head"
.Ft void
.Fn CIRCLEQ_INSERT_AFTER "CIRCLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn CIRCLEQ_INSERT_BEFORE "CIRCLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn CIRCLEQ_INSERT_HEAD "CIRCLEQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn CIRCLEQ_INSERT_TAIL "CIRCLEQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn CIRCLEQ_REMOVE "CIRCLEQ_HEAD *head" "struct TYPE *elm" "FIELDNAME"
.Ft void
.Fn CIRCLEQ_REPLACE "CIRCLEQ_HEAD *head" "struct TYPE *elm" "struct TYPE *elm2" "FIELDNAME"
d206 3
a208 3
These macros define and operate on five types of data structures:
singly-linked lists, simple queues, lists, tail queues, and circular queues.
All five structures support the following functionality:
d221 1
a221 1
Singly-linked lists are the simplest of the five data structures
d248 2
a249 2
All doubly linked types of data structures (lists, tail queues, and circle
queues) additionally allow:
d292 4
a295 21
Circular queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added at the end of a list.
.It
They may be traversed backwards, from tail to head.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions and removals must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
The termination condition for traversal is more complex.
.It
Code size is about 40% greater and operations run about 45% slower than lists.
.El
d303 1
a304 2
or
.Li CIRCLEQ_ENTRY ,
a313 1
.Fn TAILQ_HEAD ,
d315 1
a315 1
.Fn CIRCLEQ_HEAD .
a890 158
.Sh CIRCULAR QUEUES
A circular queue is headed by a structure defined by the
.Fn CIRCLEQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the circular queue and the other to the
last element in the circular queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the queue.
New elements can be added to the queue after an existing element,
before an existing element, at the head of the queue, or at the end
of the queue.
A
.Fa CIRCLEQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
CIRCLEQ_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the circular queue.
A pointer to the head of the circular queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn CIRCLEQ_ENTRY
macro declares a structure that connects the elements in the circular queue.
.Pp
The
.Fn CIRCLEQ_INIT
macro initializes the circular queue referenced by
.Fa head .
.Pp
The circular queue can also be initialized statically by using the
.Fn CIRCLEQ_HEAD_INITIALIZER
macro.
.Pp
The
.Fn CIRCLEQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the circular queue.
.Pp
The
.Fn CIRCLEQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the circular queue.
.Pp
The
.Fn CIRCLEQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn CIRCLEQ_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn CIRCLEQ_REMOVE
macro removes the element
.Fa elm
from the circular queue.
.Pp
The
.Fn CIRCLEQ_REPLACE
macro replaces the list element
.Fa elm
with the new element
.Fa elm2 .
.Pp
The
.Fn CIRCLEQ_FIRST ,
.Fn CIRCLEQ_LAST ,
.Fn CIRCLEQ_END ,
.Fn CIRCLEQ_NEXT
and
.Fn CIRCLEQ_PREV
macros can be used to traverse a circular queue.
The
.Fn CIRCLEQ_FOREACH
is used for circular queue forward traversal:
.Bd -literal -offset indent
CIRCLEQ_FOREACH(np, head, FIELDNAME)
.Ed
.Pp
The
.Fn CIRCLEQ_FOREACH_REVERSE
macro acts like
.Fn CIRCLEQ_FOREACH
but traverses the circular queue backwards.
.Pp
The macros
.Fn CIRCLEQ_FOREACH_SAFE
and
.Fn CIRCLEQ_FOREACH_REVERSE_SAFE
traverse the list referenced by head
in a forward or reverse direction respectively,
assigning each element in turn to var.
However, unlike their unsafe counterparts,
they permit both the removal of var
as well as freeing it from within the loop safely
without interfering with the traversal.
.Pp
The
.Fn CIRCLEQ_EMPTY
macro should be used to check whether a circular queue is empty.
.Sh CIRCULAR QUEUE EXAMPLE
.Bd -literal
CIRCLEQ_HEAD(circleq, entry) head;
struct entry {
	...
	CIRCLEQ_ENTRY(entry) entries;	/* Circular queue. */
	...
} *n1, *n2, *np;

CIRCLEQ_INIT(&head);			/* Initialize circular queue. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
CIRCLEQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));	/* Insert at the tail. */
CIRCLEQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
CIRCLEQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
CIRCLEQ_INSERT_BEFORE(&head, n1, n2, entries);
					/* Forward traversal. */
CIRCLEQ_FOREACH(np, &head, entries)
	np-> ...
					/* Reverse traversal. */
CIRCLEQ_FOREACH_REVERSE(np, &head, entries)
	np-> ...
					/* Delete. */
while (!CIRCLEQ_EMPTY(&head)) {
	n1 = CIRCLEQ_FIRST(&head);
	CIRCLEQ_REMOVE(&head, n1, entries);
	free(n1);
}
.Ed
d904 4
a907 5
macros are provided for symmetry with
.Fn CIRCLEQ_END .
They expand to
.Dv NULL
and don't serve any useful purpose.
d929 2
@


1.58
log
@use fancy .In macros for includes. from Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.57 2012/11/17 17:21:44 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: November 17 2012 $
d121 1
a121 1
.Nd "implementations of singly-linked lists, doubly-linked lists, simple queues, tail queues, and circular queues"
@


1.57
log
@For macro arguments that are type or member names, consistently
show them as a single word in the macro and _not_ as something
that looks like a function argument (i.e., with declarator).

ok beck@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.56 2012/04/11 13:29:14 naddy Exp $
d33 1
a33 1
.Dd $Mdocdate: April 11 2012 $
d123 1
a123 1
.Fd #include <sys/queue.h>
@


1.56
log
@SLIST_REMOVE_NEXT -> SLIST_REMOVE_AFTER for better consistency and
compatibility with FreeBSD/NetBSD.
Also rename SIMPLEQ_REMOVE_NEXT to SIMPLEQ_REMOVE_AFTER.

ok mikeb@@ guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.55 2012/03/06 23:41:59 haesbaert Exp $
d33 1
a33 1
.Dd $Mdocdate: March 6 2012 $
d131 1
a131 1
.Fn SLIST_NEXT "struct TYPE *listelm" "SLIST_ENTRY NAME"
d136 2
a137 2
.Fn SLIST_FOREACH "VARNAME" "SLIST_HEAD *head" "SLIST_ENTRY NAME"
.Fn SLIST_FOREACH_SAFE "VARNAME" "SLIST_HEAD *head" "SLIST_ENTRY NAME" "TEMP_VARNAME"
d141 1
a141 1
.Fn SLIST_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "SLIST_ENTRY NAME"
d143 1
a143 1
.Fn SLIST_INSERT_HEAD "SLIST_HEAD *head" "struct TYPE *elm" "SLIST_ENTRY NAME"
d145 1
a145 1
.Fn SLIST_REMOVE_AFTER "struct TYPE *elm" "SLIST_ENTRY NAME"
d147 1
a147 1
.Fn SLIST_REMOVE_HEAD "SLIST_HEAD *head" "SLIST_ENTRY NAME"
d149 1
a149 1
.Fn SLIST_REMOVE "SLIST_HEAD *head" "struct TYPE *elm" "TYPE" "SLIST_ENTRY NAME"
d157 1
a157 1
.Fn LIST_NEXT "struct TYPE *listelm" "LIST_ENTRY NAME"
d162 2
a163 2
.Fn LIST_FOREACH "VARNAME" "LIST_HEAD *head" "LIST_ENTRY NAME"
.Fn LIST_FOREACH_SAFE "VARNAME" "LIST_HEAD *head" "LIST_ENTRY NAME" "TEMP_VARNAME"
d167 1
a167 1
.Fn LIST_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "LIST_ENTRY NAME"
d169 1
a169 1
.Fn LIST_INSERT_BEFORE "struct TYPE *listelm" "struct TYPE *elm" "LIST_ENTRY NAME"
d171 1
a171 1
.Fn LIST_INSERT_HEAD "LIST_HEAD *head" "struct TYPE *elm" "LIST_ENTRY NAME"
d173 1
a173 1
.Fn LIST_REMOVE "struct TYPE *elm" "LIST_ENTRY NAME"
d175 1
a175 1
.Fn LIST_REPLACE "struct TYPE *elm" "struct TYPE *elm2" "LIST_ENTRY NAME"
d183 1
a183 1
.Fn SIMPLEQ_NEXT "struct TYPE *listelm" "SIMPLEQ_ENTRY NAME"
d188 2
a189 2
.Fn SIMPLEQ_FOREACH "VARNAME" "SIMPLEQ_HEAD *head" "SIMPLEQ_ENTRY NAME"
.Fn SIMPLEQ_FOREACH_SAFE "VARNAME" "SIMPLEQ_HEAD *head" "SIMPLEQ_ENTRY NAME" "TEMP_VARNAME"
d193 1
a193 1
.Fn SIMPLEQ_INSERT_AFTER "SIMPLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
d195 1
a195 1
.Fn SIMPLEQ_INSERT_HEAD "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
d197 1
a197 1
.Fn SIMPLEQ_INSERT_TAIL "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
d199 1
a199 1
.Fn SIMPLEQ_REMOVE_AFTER "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
d201 1
a201 1
.Fn SIMPLEQ_REMOVE_HEAD "SIMPLEQ_HEAD *head" "SIMPLEQ_ENTRY NAME"
d209 1
a209 1
.Fn TAILQ_NEXT "struct TYPE *listelm" "TAILQ_ENTRY NAME"
d213 1
a213 1
.Fn TAILQ_LAST "TAILQ_HEAD *head" "HEADNAME NAME"
d215 1
a215 1
.Fn TAILQ_PREV "struct TYPE *listelm" "HEADNAME NAME" "TAILQ_ENTRY NAME"
d218 4
a221 4
.Fn TAILQ_FOREACH "VARNAME" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME"
.Fn TAILQ_FOREACH_SAFE "VARNAME" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME" "TEMP_VARNAME"
.Fn TAILQ_FOREACH_REVERSE "VARNAME" "TAILQ_HEAD *head" "HEADNAME" "TAILQ_ENTRY NAME"
.Fn TAILQ_FOREACH_REVERSE_SAFE "VARNAME" "TAILQ_HEAD *head" "HEADNAME" "TAILQ_ENTRY NAME" "TEMP_VARNAME"
d225 1
a225 1
.Fn TAILQ_INSERT_AFTER "TAILQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "TAILQ_ENTRY NAME"
d227 1
a227 1
.Fn TAILQ_INSERT_BEFORE "struct TYPE *listelm" "struct TYPE *elm" "TAILQ_ENTRY NAME"
d229 1
a229 1
.Fn TAILQ_INSERT_HEAD "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
d231 1
a231 1
.Fn TAILQ_INSERT_TAIL "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
d233 1
a233 1
.Fn TAILQ_REMOVE "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
d235 1
a235 1
.Fn TAILQ_REPLACE "TAILQ_HEAD *head" "struct TYPE *elm" "struct TYPE *elm2" "TAILQ_ENTRY NAME"
d247 1
a247 1
.Fn CIRCLEQ_NEXT "struct TYPE *listelm" "CIRCLEQ_ENTRY NAME"
d249 1
a249 1
.Fn CIRCLEQ_PREV "struct TYPE *listelm" "CIRCLEQ_ENTRY NAME"
d252 4
a255 4
.Fn CIRCLEQ_FOREACH "VARNAME" "CIRCLEQ_HEAD *head" "CIRCLEQ_ENTRY NAME"
.Fn CIRCLEQ_FOREACH_SAFE "VARNAME" "CIRCLEQ_HEAD *head" "CIRCLEQ_ENTRY NAME" "TEMP_VARNAME"
.Fn CIRCLEQ_FOREACH_REVERSE "VARNAME" "CIRCLEQ_HEAD *head" "CIRCLEQ_ENTRY NAME"
.Fn CIRCLEQ_FOREACH_REVERSE_SAFE "VARNAME" "CIRCLEQ_HEAD *head" "CIRCLEQ_ENTRY NAME" "TEMP_VARNAME"
d259 1
a259 1
.Fn CIRCLEQ_INSERT_AFTER "CIRCLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
d261 1
a261 1
.Fn CIRCLEQ_INSERT_BEFORE "CIRCLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
d263 1
a263 1
.Fn CIRCLEQ_INSERT_HEAD "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
d265 1
a265 1
.Fn CIRCLEQ_INSERT_TAIL "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
d267 1
a267 1
.Fn CIRCLEQ_REMOVE "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
d269 1
a269 1
.Fn CIRCLEQ_REPLACE "CIRCLEQ_HEAD *head" "struct TYPE *elm" "struct TYPE *elm2" "CIRCLEQ_ENTRY NAME"
d389 1
a389 1
.Fa NAME .
d492 1
a492 1
for (np = SLIST_FIRST(&head); np != NULL; np = SLIST_NEXT(np, NAME))
d499 1
a499 1
SLIST_FOREACH(np, head, NAME)
d635 1
a635 1
for (np = LIST_FIRST(&head); np != NULL; np = LIST_NEXT(np, NAME))
d642 1
a642 1
LIST_FOREACH(np, head, NAME)
d773 1
a773 1
SIMPLEQ_FOREACH(np, head, NAME)
d912 2
a913 2
TAILQ_FOREACH(np, &head, NAME)
TAILQ_FOREACH_REVERSE(np, &head, HEADNAME, NAME)
d1074 1
a1074 1
CIRCLEQ_FOREACH(np, head, NAME)
@


1.55
log
@Avoid warning from gcc in TAILQ usage example.

From Lawrence Teo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.54 2012/01/11 19:26:34 bluhm Exp $
d33 1
a33 1
.Dd $Mdocdate: January 11 2012 $
d49 1
a50 1
.Nm SLIST_REMOVE_NEXT ,
d77 1
d80 1
a80 1
.Nm SIMPLEQ_INSERT_AFTER ,
a81 1
.Nm SIMPLEQ_REMOVE_NEXT ,
d145 2
a148 2
.Fn SLIST_REMOVE_NEXT "SLIST_HEAD *head" "struct TYPE *elm" "SLIST_ENTRY NAME"
.Ft void
d193 2
d199 1
a199 1
.Fn SIMPLEQ_INSERT_AFTER "SIMPLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
a201 2
.Ft void
.Fn SIMPLEQ_REMOVE_NEXT "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
d475 1
a475 1
.Fn SLIST_REMOVE_NEXT
d736 7
d755 3
a757 5
.Fn SIMPLEQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
a762 5
.Pp
The
.Fn SIMPLEQ_REMOVE_NEXT
macro removes the queue element immediately following
.Fa elm .
@


1.54
log
@Mark the ..._FOREACH_SAFE macros consistently with .FN.
FOREACH is a group of macros, do not use .FN.
Put sentences belonging together into a common paragraph.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.53 2012/01/11 00:06:48 bluhm Exp $
d969 1
a969 1
while (np = TAILQ_FIRST(&head)) {
@


1.53
log
@Remove SLIST_FOREACH_PREVPTR from src tree, it is not used anymore.
ok guenther@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.52 2011/07/09 08:43:01 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: July 9 2011 $
d502 3
a504 1
The macro SLIST_FOREACH_SAFE traverses the list referenced by head in a
d645 3
a647 1
The macro LIST_FOREACH_SAFE traverses the list referenced by head in a
d776 3
a778 1
The macro SIMPLEQ_FOREACH_SAFE traverses the queue referenced by head in a
d1161 2
a1162 4
is free'd, the
.Fn FOREACH
macro refers to a pointer that may have been reallocated already.
.Pp
a1164 1
.Pp
@


1.52
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.51 2011/07/09 00:20:36 pirofti Exp $
a45 1
.Nm SLIST_FOREACH_PREVPTR ,
a137 1
.Fn SLIST_FOREACH_PREVPTR "VARNAME" "VARNAMEP" "SLIST_HEAD *head" "SLIST_ENTRY NAME"
a507 9
.Pp
The
.Fn SLIST_FOREACH_PREVPTR
macro is similar to
.Fn SLIST_FOREACH
except that it stores a pointer to the previous element in
.Fa VARNAMEP .
This provides access to the previous element while traversing the list,
as one would have with a doubly-linked list.
@


1.51
log
@Document the newly added FOREACH_SAFE marcos.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.50 2011/07/03 16:08:40 matthew Exp $
d33 1
a33 1
.Dd $Mdocdate: July 3 2011 $
d504 5
a508 3
The macro SLIST_FOREACH_SAFE traverses the list referenced by head in the
forward direction, assigning each element in turn to var. However,
unlike SLIST_FOREACH() here it is permitted to both remove var as well
d654 5
a658 3
The macro LIST_FOREACH_SAFE traverses the list referenced by head in the
forward direction, assigning each element in turn to var. However,
unlike LIST_FOREACH() here it is permitted to both remove var as well
d783 5
a787 3
The macro SIMPLEQ_FOREACH_SAFE traverses the queue referenced by head in the
forward direction, assigning each element in turn to var. However,
unlike SIMPLEQ_FOREACH() here it is permitted to both remove var as well
d921 11
a931 6
The macros TAILQ_FOREACH_SAFE and TAILQ_FOREACH_REVERSE_SAFE traverse the
list referenced by head in the forward or reverse direction respectively,
assigning each element in turn to var.  However, unlike their unsafe
counterparts, TAILQ_FOREACH and TAILQ_FOREACH_REVERSE permit to both
remove var as well as free it from within the loop safely without interfering
with the traversal.
d1088 11
a1098 6
The macros CIRCLEQ_FOREACH_SAFE and CIRCLEQ_FOREACH_REVERSE_SAFE traverse the
list referenced by head in the forward or reverse direction respectively,
assigning each element in turn to var.  However, unlike their unsafe
counterparts, CIRCLEQ_FOREACH and CIRCLEQ_FOREACH_REVERSE permit to both
remove var as well as free it from within the loop safely without interfering
with the traversal.
a1174 1
.Ed
@


1.50
log
@Add a SIMPLEQ_REMOVE_NEXT() macro analogous to SLIST_REMOVE_NEXT().

ok krw@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.49 2009/03/01 10:28:55 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 1 2009 $
d45 1
d61 1
d76 1
d93 1
d95 1
d113 2
a114 1
.Nm CIRCLEQ_FOREACH_REVERSE ,
d138 1
d165 1
d191 1
d221 1
d223 1
d255 1
d257 1
d504 5
d652 5
d779 5
d915 7
d1077 7
a1152 8
Proper code needs a second variable.
.Bd -literal -offset indent
for (var = LIST_FIRST(head); var != LIST_END(head); var = nxt) {
	nxt = LIST_NEXT(var, entry);
	free(var);
}
LIST_INIT(head);	/* to put the list back in order */
.Ed
d1156 3
a1158 10
Correct code saves a pointer to the next element in the list before
removing the element:
.Bd -literal -offset indent
for (var = LIST_FIRST(head); var != LIST_END(head); var = nxt) {
	nxt = LIST_NEXT(var, entry);
	if (some_condition) {
		LIST_REMOVE(var, entry);
		some_function(var);
	}
}
@


1.49
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.48 2009/02/25 16:43:05 beck Exp $
d33 1
a33 1
.Dd $Mdocdate: Febuary 25 2009 $
d79 1
d193 2
d738 5
@


1.48
log
@fix examples of list deletion to not leak memory.
ok otto@@ deraadt@@ henning@@ oga@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.47 2008/07/27 07:06:42 stefan Exp $
d33 1
a33 1
.Dd $Mdocdate: July 27 2008 $
d924 1
a924 1
	
d1067 1
a1067 1
	n1 = CIRCLEQ_FIRST(&head);	
@


1.47
log
@Get TAILQ_REPLACE and CIRCLEQ_REPLACE prototypes right.
ok jaredy
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.46 2008/03/31 13:15:53 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 31 2008 $
d520 2
a521 1
while (!SLIST_EMPTY(&head))		/* Delete. */
d523 3
d658 4
a661 1
	LIST_REMOVE(LIST_FIRST(&head), entries);
d772 2
a773 1
while (!SIMPLEQ_EMPTY(&head))
d775 2
d920 1
a920 1
while (np = TAILQ_FIRST(&head))
d922 3
d1066 5
a1070 2
while (!CIRCLEQ_EMPTY(&head))
	CIRCLEQ_REMOVE(&head, CIRCLEQ_FIRST(&head), entries);
@


1.46
log
@some missing bits; from Girish Venkatachalam
ok henning

while here, clean up the queue MLINKS
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.45 2007/12/24 10:30:27 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: December 24 2007 $
d223 1
a223 1
.Fn TAILQ_REPLACE "struct TYPE *elm" "struct TYPE *elm2" "TAILQ_ENTRY NAME"
d255 1
a255 1
.Fn CIRCLEQ_REPLACE "struct TYPE *elm" "struct TYPE *elm2" "CIRCLEQ_ENTRY NAME"
@


1.45
log
@some fixes from Girish Venkatachalam; as far as i can see, otto has already
ok'd this, but is obviously away in some winter wonderland...
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.44 2007/12/16 13:23:57 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: December 16 2007 $
d96 1
d113 2
a114 1
.Nm CIRCLEQ_REMOVE
d181 1
d222 2
d254 2
d849 7
d992 7
@


1.44
log
@fix TAILQ_PREV; from Girish Venkatachalam
ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.43 2007/05/31 19:19:48 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d126 1
a126 1
.Ft "bool"
d152 1
a152 1
.Ft "bool"
d177 2
d203 1
a203 1
.Ft "bool"
d233 1
a233 1
.Ft "bool"
@


1.43
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.42 2006/01/12 17:01:15 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d199 1
@


1.42
log
@remove headp stuff, which is unused;
diff from ray lai; ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.41 2006/01/12 12:05:11 jmc Exp $
d33 1
a33 1
.Dd December 13, 1993
@


1.41
log
@add an example of a singly-linked list;

from ray lai;
tweaked by otto and myself; ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.40 2006/01/11 09:07:54 jmc Exp $
a622 1
struct listhead *headp;		/* List head. */
a866 1
struct tailhead *headp;		/* Tail queue head. */
a1002 1
struct circleq *headp;			/* Circular queue head. */
@


1.40
log
@missing full stop; from ray lai
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.39 2006/01/06 08:48:06 jmc Exp $
d490 23
@


1.39
log
@fix typo; from ray lai;

ok mbalmer millert krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.38 2005/10/27 19:27:10 otto Exp $
d868 1
a868 1
					/* Manual forward traversal */
@


1.38
log
@Avoid using queue internals in the examples, add a few rules to
follow in the NOTES section and an extra example. ok deraadt@@ jmc@@
jaredy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.37 2005/01/04 20:45:01 jaredy Exp $
d717 1
a717 1
	SIMPLEQ_ENTRY(entry) entries;	/* List. */
@


1.37
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.36 2004/08/16 21:31:31 jmc Exp $
d618 1
a618 1
for (np = head.lh_first; np != NULL; np = np->entries.le_next)
d621 2
a622 2
while (head.lh_first != NULL)		/* Delete. */
	LIST_REMOVE(head.lh_first, entries);
d730 1
a730 1
for (np = SIMPLEQ_FIRST(&head); np != NULL; np = SIMPLEQ_NEXT(np, entries))
d733 1
a733 1
while ((n1 = SIMPLEQ_FIRST(&head)) != NULL)
d1003 1
a1003 2
for (np = CIRCLEQ_FIRST(&head); np != CIRCLEQ_END(&head);
    np = CIRCLEQ_NEXT(np, entries))
d1006 1
a1006 2
for (np = CIRCLEQ_LAST(&head); np != CIRCLEQ_END(&head);
    np = CIRCLEQ_PREV(np, entries))
d1009 1
a1009 1
while (CIRCLEQ_FIRST(&head) != CIRCLEQ_END(&head))
d1013 6
d1050 14
@


1.36
log
@correct a mistake in a code example; diff from Lawrence Teo;
henning says it's correct;
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.35 2004/06/03 14:16:33 jfb Exp $
d377 1
a377 1
.Sh SINGLY_LINKED LISTS
@


1.35
log
@Sync man page with macros:

- SIMPLEQ_INSERT_AFTER() takes 4 args (noticed by brad@@ and jmc@@)
- SIMPLEQ_REMOVE_HEAD() has only 2 arguments

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.34 2004/04/08 16:08:21 henning Exp $
d728 1
a728 1
SIMPLEQ_INSERT_TAIL(&head, n1, entries);
@


1.34
log
@swap the last two parameters to TAILQ_FOREACH_REVERSE. matches what FreeBSD
and NetBSD do.
ok millert@@ mcbride@@ markus@@ ho@@, checked to not affect ports by naddy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.33 2003/12/16 21:08:20 millert Exp $
d184 1
a184 1
.Fn SIMPLEQ_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
d186 1
a186 1
.Fn SIMPLEQ_REMOVE_HEAD "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
d725 1
a725 1
SIMPLEQ_INSERT_AFTER(n1, n2, entries);
d734 1
a734 1
	SIMPLEQ_REMOVE_HEAD(&head, n1, entries);
@


1.33
log
@Add SLIST_FOREACH_PREVPTR and SLIST_REMOVE_NEXT.  SLIST_FOREACH_PREVPTR
is like SLIST_FOREACH but it saves a pointer to the previous element.
SLIST_REMOVE_NEXT will remove the element *after* the one passed in.
SLIST_FOREACH_PREVPTR is from FreeBSD; SLIST_REMOVE_NEXT was suggested
by canacar@@; man page additions by yours truly.  OK deraadt@@ (grudgingly)
and man page changes OK jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.32 2003/12/05 21:55:29 millert Exp $
d203 1
a203 1
.Fn TAILQ_FOREACH_REVERSE "VARNAME" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME" "HEADNAME"
d827 1
a827 1
TAILQ_FOREACH_REVERSE(np, &head, NAME, HEADNAME)
@


1.32
log
@Fix pasto in SLIST_REMOVE synopsis; deraadt@@ OK
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.31 2003/06/02 23:30:12 millert Exp $
d45 1
d50 1
d129 1
d139 2
d451 5
d477 9
@


1.31
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.30 2003/05/20 09:13:38 jmc Exp $
d136 1
a136 1
.Fn SLIST_REMOVE "SLIST_HEAD *head" "TYPE *elm" "TYPE" "SLIST_ENTRY NAME"
@


1.30
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.29 2003/05/17 18:40:12 krw Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.29
log
@Emphasize that TAILQ_FOREACH and TAILQ_FOREACH_REVERSE are the
preferred ways to traverse a list. Use TAILQ_FOREACH in a forward
traversal example.

Use correct number of parameters for TAILQ_FOREACH_REVERSE as pointed
out by Markus.

ok henning@@ jmc@@ markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.28 2003/04/16 07:51:22 mickey Exp $
d302 1
a302 1
Each elements requires two pointers rather than one.
d457 1
a457 1
.Fn SLIST_FIRST ,
d564 1
a564 1
.Fn LIST_FIRST ,
d683 1
a683 1
.Fn SIMPLEQ_FIRST ,
d689 1
a689 1
is used for queue traversal
d950 1
a950 1
is used for circular queue forward traversal
@


1.28
log
@fix an example on SIMPLEQ_REMOVE_HEAD(); from cjeker@@diehard.n-r-g.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.27 2003/03/09 17:18:44 millert Exp $
d802 13
d821 2
a822 13
macros can be used to traverse a tail queue.
The
.Fn TAILQ_FOREACH
is used for tail queue traversal
.Bd -literal -offset indent
TAILQ_FOREACH(np, head, NAME)
.Ed
.Pp
The
.Fn TAILQ_FOREACH_REVERSE
acts like
.Fn TAILQ_FOREACH
but traverses the tail queue in reverse.
d851 4
a854 1
for (np = TAILQ_FIRST(&head); np != NULL; np = TAILQ_NEXT(np, entries))
@


1.27
log
@Use "np != NULL", not just "np" in TAILQ example for consistency
(and style(9)); from Pedro Bastos
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.26 2003/01/15 04:18:19 millert Exp $
d718 1
a718 1
while (SIMPLEQ_FIRST(&head) != NULL)		
@


1.26
log
@s/TAIL_FIRST/TAILQ_FIRST/
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.25 2002/12/07 07:18:17 marc Exp $
d849 1
a849 1
for (np = TAILQ_FIRST(&head); np; np = TAILQ_NEXT(np, entries))
@


1.25
log
@document ALL the args to TAILQ_FOREACH_REVERSE
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.24 2002/11/07 21:02:43 millert Exp $
d803 1
a803 1
.Fn TAIL_FIRST ,
@


1.24
log
@Fix CIRCLEQ example; Hector A. Paterno
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.23 2002/04/26 02:24:48 wcobb Exp $
d202 1
a202 1
.Fn TAILQ_FOREACH_REVERSE "VARNAME" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME"
@


1.23
log
@add missing `entry' parameter to LIST_NEXT() in the list freeing example.
ok espie.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.22 2002/02/24 04:35:32 krw Exp $
d965 1
a965 1
	CIRCLEQ_ENTRY entries;		/* Circular queue. */
@


1.22
log
@Fix TAILQ_NEXT() example. First param is listelm, not head.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.21 2002/02/03 16:36:40 jason Exp $
d1022 1
a1022 1
	nxt = LIST_NEXT(var);
@


1.21
log
@document SLIST_REMOVE; vedge@@csoft.org (pr2373)
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.20 2001/08/02 19:06:58 mpech Exp $
d849 1
a849 1
for (np = TAILQ_FIRST(&head); np; np = TAILQ_NEXT(&head, entries))
@


1.20
log
@add lost .Nm entry to .Sh NAME;

millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.19 2001/06/23 04:46:30 angelos Exp $
d53 1
d139 2
d447 7
@


1.19
log
@Document LIST_REPLACE()
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.18 2001/05/24 19:08:21 aaron Exp $
d107 1
@


1.18
log
@Stay within 80 column boundary.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.17 2001/05/18 17:23:46 aaron Exp $
d66 1
d160 2
d544 7
@


1.17
log
@Typo; karma@@altern.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.16 2001/03/01 16:11:14 aaron Exp $
d571 1
a571 1
LIST_INIT(&head);			/* Initialize the list. */
d814 1
a814 1
TAILQ_INIT(&head);			/* Initialize the queue. */
d948 1
a948 1
CIRCLEQ_INIT(&head);			/* Initialize the circular queue. */
@


1.16
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.15 2000/12/14 20:20:06 provos Exp $
d711 1
a711 1
the queue.
@


1.15
log
@cleanup tailq examples
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.14 2000/11/21 05:54:33 angelos Exp $
d799 1
a799 1
but traveres the tail queue in reverse.
d980 1
a980 1
macros are provided for symetry with
@


1.14
log
@Fix.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.13 2000/11/21 05:14:15 deraadt Exp $
d828 1
a828 1
for (np = head.tqh_first; np != NULL; np = np->entries.tqe_next)
d831 2
a832 2
while (head.tqh_first != NULL)
	TAILQ_REMOVE(&head, head.tqh_first, entries);
@


1.13
log
@TAILQ_PREV documented wrong; horape@@tinuviel.compendium.net.ar
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.12 2000/10/26 00:37:03 aaron Exp $
d191 1
a191 1
.Fn TAILQ_PREV "struct TYPE *listelm" "TAILQ_HEAD *head" "HEADNAME NAME"
@


1.12
log
@Some share/man fleshing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.11 2000/04/15 01:42:29 deraadt Exp $
d191 1
a191 1
.Fn TAILQ_PREV "TAILQ_HEAD *head" "HEADNAME NAME"
@


1.11
log
@misc cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.10 2000/04/15 01:37:28 deraadt Exp $
d115 1
a115 1
.sp
d136 1
a136 1
.sp
d159 1
a159 1
.sp
d179 1
a179 1
.sp
d208 1
a208 1
.sp
d240 1
a240 2
singly-linked lists, simple queues, lists, tail queues,
and circular queues.
d257 1
a257 2
and few or no removals,
or for implementing a LIFO queue.
d344 1
a344 2
Code size is about 40% greater and operations run about 45% slower
than lists.
d349 1
a349 2
is the name tag of a user defined structure,
that must contain a field of type
d368 1
a368 2
See the examples below for further explanation of how these
macros are used.
d373 1
a373 2
This structure contains a single pointer to the first element
on the list.
d384 1
a384 1
.sp
d394 1
a394 1
.sp
d400 1
a400 1
.sp
d410 1
a410 2
macro declares a structure that connects the elements in
the list.
d465 1
a465 2
This structure contains a single pointer to the first element
on the list.
d476 1
a476 1
.sp
d486 1
a486 1
.sp
d492 1
a492 1
.sp
d502 1
a502 2
macro declares a structure that connects the elements in
the list.
d592 2
a593 3
This structure contains a pair of pointers,
one to the first element in the simple queue and the other to
the last element in the simple queue.
d603 1
a603 1
.sp
d613 1
a613 1
.sp
d718 1
a718 1
.sp
d728 1
a728 1
.sp
d852 1
a852 1
.sp
d862 1
a862 1
.sp
d871 1
a871 2
macro declares a structure that connects the elements in
the circular queue.
@


1.10
log
@doc some missing macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.9 2000/03/19 19:25:24 aaron Exp $
d407 2
a408 2
The 
.Fa HEADNAME 
d424 1
a424 1
The list can also be initialized statically by using the 
d449 1
a449 1
The 
d458 1
a458 1
Or, for simplicity, one can use the 
d465 1
a465 1
The 
d501 2
a502 2
The 
.Fa HEADNAME 
d518 1
a518 1
The list can also be initialized statically by using the 
d551 1
a551 1
The 
d567 1
a567 1
The 
d601 2
a602 2
This structure contains a pair of pointers, 
one to the first element in the simple queue and the other to 
d640 1
a640 1
The queue can also be initialized statically by using the 
d671 1
a671 1
The 
d683 1
a683 1
The 
d794 1
a794 1
.Fn TAILQ_LAST 
d796 1
a796 1
.Fn TAILQ_PREV 
d811 1
a811 1
The 
d929 1
a929 1
.Fn CIRCLEQ_NEXT 
d946 1
a946 1
The 
d973 1
a973 1
for (np = CIRCLEQ_FIRST(&head); np != CIRCLEQ_END(&head); 
d977 1
a977 1
for (np = CIRCLEQ_LAST(&head); np != CIRCLEQ_END(&head); 
d988 1
a988 1
.Fn SIMPLEQ_END 
d993 1
a993 1
They expand to 
d1003 2
a1004 1
Since 
d1006 2
a1007 2
is free'd, the 
.Fn FOREACH 
@


1.9
log
@Various cleanups.
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.8 1999/09/08 08:20:49 espie Exp $
d89 1
d192 4
d222 4
d805 6
d939 6
@


1.8
log
@Document most of the new macros,
clarify structure comparison (from Free)
@
text
@d1 1
a1 1
.\"	$OpenBSD: queue.3,v 1.7 1999/09/05 15:55:46 espie Exp $
d448 1
d550 1
@


1.7
log
@Document newer queue macros.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d41 12
d59 2
d72 2
d87 2
d103 2
d111 1
a111 1
.Nd "implementations of lists, simple queues, tail queues, and circular queues"
d115 21
d145 3
d230 4
a233 3
These macros define and operate on four types of data structures:
lists, simple queues, tail queues, and circular queues.
All structures except simple queues support the following functionality:
d239 1
a239 1
Insertion of a new entry before or after any list element.
d241 1
a241 1
Removal of any entry in the list.
d246 5
a250 1
Lists support only the above functionality.
d252 1
a252 2
Simple queues are simplified list structures in exchange for 
restricted functionality:
d256 6
a261 1
Simple queue entries require only one pointer.
d263 1
a263 1
Code is roughly twice as small and fast as lists.
d265 1
a265 1
Entries can be added to the end of the queue.
d267 13
a279 1
No insertion of a new entry before a list element.
d281 1
a281 1
Only the first element can be removed.
d284 2
d287 9
d298 2
a299 1
.Bl -enum -offset indent
d301 3
a303 1
Entries can be added to the end of the list.
d310 1
a310 2
All list insertions and removals, except insertion before another element, must
specify the head of the list.
d315 1
a315 1
than lists.
d322 1
a322 1
Entries can be added to the end of a list.
d345 1
d357 1
d365 93
d549 10
d588 1
a588 1
.Fn LIST_HEAD
d593 1
a593 1
The elements are simply linked.
d665 10
d787 10
d916 10
d963 1
d973 20
@


1.6
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d1 1
d43 4
d52 11
d65 6
d79 6
d91 1
a91 1
.Nd implementations of lists, tail queues, and circular queues
d97 8
d106 28
a133 4
.Fn LIST_INSERT_AFTER "TYPE *listelm" "TYPE *elm" "LIST_ENTRY NAME"
.Fn LIST_INSERT_BEFORE "TYPE *listelm" "TYPE *elm" "LIST_ENTRY NAME"
.Fn LIST_INSERT_HEAD "LIST_HEAD *head" "TYPE *elm" "LIST_ENTRY NAME"
.Fn LIST_REMOVE "TYPE *elm" "LIST_ENTRY NAME"
d137 11
d149 10
a158 5
.Fn TAILQ_INSERT_AFTER "TAILQ_HEAD *head" "TYPE *listelm" "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_INSERT_BEFORE "TYPE *listelm" "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_INSERT_HEAD "TAILQ_HEAD *head" "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_INSERT_TAIL "TAILQ_HEAD *head" "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_REMOVE "TAILQ_HEAD *head" "TYPE *elm" "TAILQ_ENTRY NAME"
d162 12
d175 10
a184 5
.Fn CIRCLEQ_INSERT_AFTER "CIRCLEQ_HEAD *head" "TYPE *listelm" "TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Fn CIRCLEQ_INSERT_BEFORE "CIRCLEQ_HEAD *head" "TYPE *listelm" "TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Fn CIRCLEQ_INSERT_HEAD "CIRCLEQ_HEAD *head" "TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Fn CIRCLEQ_INSERT_TAIL "CIRCLEQ_HEAD *head" "TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Fn CIRCLEQ_REMOVE "CIRCLEQ_HEAD *head" "TYPE *elm" "CIRCLEQ_ENTRY NAME"
d186 3
a188 3
These macros define and operate on three types of data structures:
lists, tail queues, and circular queues.
All three structures support the following functionality:
d201 19
a219 2
Lists are the simplest of the three data structures and support
only the above functionality.
d224 1
a224 1
Entries can be added to the end of a list.
d265 1
a265 1
is the name of a user defined structure,
d268 1
d276 1
a276 1
is the name of a user defined structure that must be declared
d279 1
d304 1
a304 1
is the name of the structure to be defined, and
d317 7
d335 7
d367 9
d403 103
d527 1
a527 1
is the name of the structure to be defined, and
d551 4
d586 8
d645 1
a645 1
is the name of the structure to be defined, and
d669 4
d704 9
d737 2
a738 1
for (np = head.cqh_first; np != (void *)&head; np = np->entries.cqe_next)
d741 2
a742 1
for (np = head.cqh_last; np != (void *)&head; np = np->entries.cqe_prev)
d745 2
a746 2
while (head.cqh_first != (void *)&head)
	CIRCLEQ_REMOVE(&head, head.cqh_first, entries);
d748 11
@


1.5
log
@more .Os cleanup, remove some trailing whitespace, cleanse some .Nm
@
text
@d36 1
a36 1
.Dd December, 13, 1993
@


1.4
log
@share/man/man3 man page repairs
@
text
@d38 1
a38 1
.Os BSD 4
@


1.3
log
@use Bx macro for BSD versions
@
text
@d96 1
d101 1
a101 1
Insertion of a new entry before or after any element in the list.
d112 1
a112 1
.Bl -enum -compact -offset indent
d114 1
a114 1
Entries can be added at the end of a list.
d116 1
d118 1
d131 1
d134 1
a134 1
Entries can be added at the end of a list.
d138 1
d140 1
d167 2
a168 2
.Li LIST_HEAD ,
.Li TAILQ_HEAD ,
d170 1
a170 1
.Li CIRCLEQ_HEAD .
d175 1
a175 1
.Nm LIST_HEAD
d206 3
a208 3
The macro
.Nm LIST_ENTRY
declares a structure that connects the elements in
d211 3
a213 3
The macro
.Nm LIST_INIT
initializes the list referenced by
d216 3
a218 3
The macro
.Nm LIST_INSERT_HEAD
inserts the new element
d222 3
a224 3
The macro
.Nm LIST_INSERT_AFTER
inserts the new element
d229 3
a231 3
The macro
.Nm LIST_INSERT_BEFORE
inserts the new element
d236 3
a238 3
The macro
.Nm LIST_REMOVE
removes the element
d270 1
a270 1
.Nm TAILQ_HEAD
d288 1
a288 1
.Li HEADNAME
d290 1
a290 1
.Li TYPE
d303 3
a305 3
The macro
.Nm TAILQ_ENTRY
declares a structure that connects the elements in
d308 3
a310 3
The macro
.Nm TAILQ_INIT
initializes the tail queue referenced by
d313 3
a315 3
The macro
.Nm TAILQ_INSERT_HEAD
inserts the new element
d319 3
a321 3
The macro
.Nm TAILQ_INSERT_TAIL
inserts the new element
d325 3
a327 3
The macro
.Nm TAILQ_INSERT_AFTER
inserts the new element
d332 3
a334 3
The macro
.Nm TAILQ_INSERT_BEFORE
inserts the new element
d339 3
a341 3
The macro
.Nm TAILQ_REMOVE
removes the element
d376 1
a376 1
.Nm CIRCLEQ_HEAD
d394 1
a394 1
.Li HEADNAME
d396 1
a396 1
.Li TYPE
d409 3
a411 3
The macro
.Nm CIRCLEQ_ENTRY
declares a structure that connects the elements in
d414 3
a416 3
The macro
.Nm CIRCLEQ_INIT
initializes the circular queue referenced by
d419 3
a421 3
The macro
.Nm CIRCLEQ_INSERT_HEAD
inserts the new element
d425 3
a427 3
The macro
.Nm CIRCLEQ_INSERT_TAIL
inserts the new element
d431 3
a433 3
The macro
.Nm CIRCLEQ_INSERT_AFTER
inserts the new element
d438 3
a440 3
The macro
.Nm CIRCLEQ_INSERT_BEFORE
inserts the new element
d445 3
a447 3
The macro
.Nm CIRCLEQ_REMOVE
removes the element
@


1.2
log
@for i in `find . -name \*.[123456789] -exec grep '^.Dd ' {} /dev/null \; | \
	grep '"' | cut -d':' -f1`; do
sed -e '/^.Dd /s/"//g' -e '/^.Dd /s/\(^.Dd [A-Za-z]*\) \(.*\)$/\1, \2/' <$i >x
cat x > $i
done
@
text
@d480 2
a481 1
functions first appeared in 4.4BSD.
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
.Dd "December 13, 1993"
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
