head	1.54;
access;
symbols
	OPENBSD_6_2:1.54.0.2
	OPENBSD_6_2_BASE:1.54
	OPENBSD_6_1:1.51.0.4
	OPENBSD_6_1_BASE:1.51
	OPENBSD_6_0:1.48.0.2
	OPENBSD_6_0_BASE:1.48
	OPENBSD_5_9:1.47.0.2
	OPENBSD_5_9_BASE:1.47
	OPENBSD_5_8:1.45.0.6
	OPENBSD_5_8_BASE:1.45
	OPENBSD_5_7:1.45.0.2
	OPENBSD_5_7_BASE:1.45
	OPENBSD_5_6:1.43.0.4
	OPENBSD_5_6_BASE:1.43
	OPENBSD_5_5:1.41.0.4
	OPENBSD_5_5_BASE:1.41
	OPENBSD_5_4:1.37.0.2
	OPENBSD_5_4_BASE:1.37
	OPENBSD_5_3:1.36.0.2
	OPENBSD_5_3_BASE:1.36
	OPENBSD_5_2:1.30.0.2
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.2
	OPENBSD_5_0:1.24.0.2
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.22.0.4
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.2
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.19.0.4
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.6
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@.\" @;


1.54
date	2017.06.10.16.00.27;	author schwarze;	state Exp;
branches;
next	1.53;
commitid	ClvQ6xEMIp3o0d9u;

1.53
date	2017.04.27.06.22.11;	author jmc;	state Exp;
branches;
next	1.52;
commitid	tW4PfC9VgNrdMmbK;

1.52
date	2017.04.27.00.02.03;	author dlg;	state Exp;
branches;
next	1.51;
commitid	0wRLMto5mW1ilXcl;

1.51
date	2017.02.14.12.50.15;	author jmc;	state Exp;
branches;
next	1.50;
commitid	TJ6szOJPRlfOval9;

1.50
date	2017.02.06.02.42.53;	author guenther;	state Exp;
branches;
next	1.49;
commitid	QirVONC83YmnVIYp;

1.49
date	2016.10.16.21.25.16;	author deraadt;	state Exp;
branches;
next	1.48;
commitid	lXn7VfV6r7ZlAFnu;

1.48
date	2016.03.14.03.01.48;	author mmcc;	state Exp;
branches;
next	1.47;
commitid	LfvHPRjMsb1Gqxr9;

1.47
date	2015.12.23.08.42.42;	author bentley;	state Exp;
branches;
next	1.46;
commitid	isflVXoj1eHSpSsO;

1.46
date	2015.11.05.09.48.05;	author jmc;	state Exp;
branches;
next	1.45;
commitid	2IdzdclaEuAvUpsp;

1.45
date	2014.10.18.14.08.48;	author miod;	state Exp;
branches;
next	1.44;
commitid	dw47WfaYKPhFZvRr;

1.44
date	2014.09.28.10.43.33;	author benno;	state Exp;
branches;
next	1.43;
commitid	EHhamTXZ6Ri79f0r;

1.43
date	2014.07.10.19.14.40;	author matthew;	state Exp;
branches;
next	1.42;
commitid	zHz3IG5tWvt3fyWo;

1.42
date	2014.03.23.17.29.06;	author pascal;	state Exp;
branches;
next	1.41;

1.41
date	2014.01.21.07.47.59;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2014.01.21.02.44.14;	author martynas;	state Exp;
branches;
next	1.39;

1.39
date	2013.08.07.01.10.27;	author jsg;	state Exp;
branches;
next	1.38;

1.38
date	2013.08.06.19.05.57;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2013.07.12.10.44.14;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2013.02.08.07.37.43;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2013.02.07.22.33.58;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2013.01.06.21.53.49;	author martynas;	state Exp;
branches;
next	1.33;

1.33
date	2012.09.25.19.51.36;	author brad;	state Exp;
branches;
next	1.32;

1.32
date	2012.08.31.19.01.31;	author pascal;	state Exp;
branches;
next	1.31;

1.31
date	2012.08.12.17.01.35;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2012.06.24.08.28.37;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2012.06.23.23.14.15;	author matthieu;	state Exp;
branches;
next	1.28;

1.28
date	2012.04.21.14.21.58;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2012.04.08.17.36.21;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2011.11.22.09.29.49;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2011.09.21.21.26.04;	author jsg;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.25.19.24.03;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2011.06.02.21.39.10;	author martynas;	state Exp;
branches;
next	1.22;

1.22
date	2010.07.12.16.28.29;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2010.05.09.14.07.58;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.08.17.45.45;	author robert;	state Exp;
branches;
next	1.19;

1.19
date	2008.11.04.23.59.37;	author martynas;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.10.13.12.43;	author merdely;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.27.15.18.00;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.26.22.47.22;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.48;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2006.07.21.13.45.39;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.20.21.05.22;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.11.10.36.23;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.27.14.12.27;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.06.10.39.31;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.18.03.37.46;	author david;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.11.09.16.33;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.11.02.45.37;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.03.16.03.29;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.31.06.00.15;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.02.07.38.40;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.26.14.08.19;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.23.22.25.04;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.31.22.14.49;	author espie;	state Exp;
branches;
next	;


desc
@@


1.54
log
@improve semantic markup for __attribute__
@
text
@.\" $OpenBSD: gcc-local.1,v 1.53 2017/04/27 06:22:11 jmc Exp $
.\"
.\" Copyright (c) 2002 Marc Espie
.\" Copyright (c) 2003 Anil Madhavapeddy
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: April 27 2017 $
.Dt GCC-LOCAL 1
.Os
.Sh NAME
.Nm gcc-local
.Nd local modifications to gcc
.Sh DESCRIPTION
.Ox
uses derivatives of
.Xr gcc 1
versions 3.3.6 or 4.2.1,
depending on machine architecture.
In all cases,
the software comes with specific modifications for
.Ox :
.Bl -dash
.It
.Nm gcc
does not search under
.Pa /usr/local
for include files nor for libraries:
as a system compiler, it only searches the system paths by default.
.It
On all architectures where the stack is non-executable,
trampoline code marks the smallest possible area around the trampoline stub
executable using
.Xr mprotect 2 .
.It
Trampoline code generation is disabled by default.
Code requiring trampolines will not compile without
.Fl ftrampolines .
The warning flag
.Fl Wtrampolines
can be used to locate trampoline instances if trampoline generation
is re-enabled.
.It
The
.Fl O2
option does not include
.Fl fstrict-aliasing ,
as this option causes issues on some legacy code.
.Fl fstrict-aliasing
is very unsafe with code that plays tricks with casts, bypassing the
already weak type system of C.
.It
The
.Fl O2
option does not include
.Fl fstrict-overflow ,
as this option causes issues on some legacy code.
.Fl fstrict-overflow
can cause surprising optimizations to occur, possibly deleting security
critical overflow checks.
.It
The
.Fl O2
option does not include the
.Fl ftree-vrp
optimization as it is known to be broken in
.Nm gcc 4.2.1 .
.It
.Nm gcc
recognizes the extra format attribute syslog, to better match
the definition of
.Xr syslog 3 ,
and silence erroneous warnings when used with
.Fl pedantic .
.It
.Nm gcc
recognizes the attribute
.Cm __nonnull__ ,
which can be used to mark arguments that can't be
.Dv NULL .
The printf format attribute does not imply
.Cm __nonnull__
for the format.
This allows for correct format checking on the
.Xr err 3
function family.
.It
.Nm gcc
recognizes the extra attribute
.Cm __sentinel__ ,
which can be used to mark varargs function that need a
.Dv NULL
pointer to mark argument termination, like
.Xr execl 3 .
This exposes latent bugs for 64-bit architectures,
where a terminating 0 will expand to a 32-bit int, and not a full-fledged
64-bits pointer.
.It
On alpha,
.Fl mieee
is enabled by default to enable full compliance with
the IEEE floating point standard,
although the
.Dq inexact
flag is not maintained.
Additionally, rounding mode is dynamic.
.It
.Nm gcc
comes with the
.Dq ProPolice
stack protection extension, which is enabled by default.
This extension reorders local variable declarations and adds stack consistency
checks at runtime, in order to detect stack overflows, and will attempt to
report the problem in the system logs by calling
.Xr syslog 3
with a
.Dv LOG_CRIT
priority message:
.Dq stack overflow in function XXX ,
and abort the faulting process.
It can be turned off using the
.Fl fno-stack-protector
command line option.
Note that the stack protector relies on some support code in libc.
Stand-alone programs not linked against libc must either provide their own
support bits or use the
.Fl fno-stack-protector
option.
.Pp
There is a
.Fl fstack-protector-all
option that turns stack protection code on for all functions
and disables any heuristic that flags some functions as safe.
This extended checking has a moderate runtime cost though.
There is a
.Fl fstack-protector-strong
option, similar to
.Fl fstack-protector ,
which includes additional functions to be protected \(em those that
have local array definitions
or have references to local frame addresses.
.It
On amd64,
.Fl msave-args
can be passed to the compiler to have functions save their register
arguments on the stack, while maintaining compatibility with the
System 5 AMD64 ABI.
This enables tools and debuggers that understand this semantic to
trivially generate stack traces that include function arguments.
.It
On the alpha, amd64, arm, hppa, i386, mips64, powerpc, sh and sparc64
architectures,
.Nm gcc
generates position-independent executables
.Pq PIEs
by default, allowing the system to load the resulting binary
at a random location.
This behavior can be turned off by passing
.Fl fno-pie
to the compiler and
.Fl nopie
to the linker.
.It
.Nm gcc
recognizes a new flag which is enabled by default,
.Fl Wbounded ,
to perform basic checks on functions which accept buffers and sizes.
An extra attribute,
.Cm __bounded__ ,
has been added to mark functions that can be
checked this way.
.It
.Nm gcc
recognizes a new format attribute, kprintf, to deal with the extra format
arguments
.Ql %b ,
.Ql %r ,
and
.Ql %z
used in the
.Ox
kernel.
.It
.Nm gcc
does not store its version string in objects.
This behavior can be restored with
.Fl fident .
.It
The option
.Fl fstack-shuffle
will randomize the order of stack variables at compile time with
.Nm gcc 4.2.1 ,
which can be helpful to find bugs.
This option is silently ignored by
.Nm gcc 3.3.6 .
.It
.Nm gcc
will not move variables initialized with the value zero
from the data section to the bss section.
The default behaviour of
.Nm gcc 3.3.6
and
.Nm gcc 4.2.1
on other systems is to perform this action, which can be restored for
.Ox
with
.Fl fzero-initialized-in-bss .
.It
.Nm gcc
does not warn for cast expressions used as lvalues outside of
.Fl pedantic .
.It
.Nm gcc 4.2.1
does not warn for passing pointer arguments or assignment with
different signedness outside of
.Fl pedantic .
This can be
re-enabled with the
.Fl Wpointer-sign
flag.
.It
.Nm gcc
recognizes the preprocessor flag
.Fl CC
that lets comments in macros pass through to the output (except in
.Fl traditional
mode).
.It
The warning option
.Fl Wsystem-headers ,
which makes
.Nm gcc
report warnings in systems headers,
is enabled by default.
.It
.Nm gcc
supports two extra warning options:
.Bl -item
.It
.Fl Wframe-larger-than= Ns Va N
.Po
and its non-portable alias
.Fl Wstack-larger-than- Ns Va N
.Pc
will report functions using more than
.Va N
bytes of stack space for their local variables.
Stack space used for other purposes (such as register window saving,
callee-saved registers, or outbound arguments storage)
is not taken into account for this check.
.It
.Fl Wvariable-decl
will report automatic variable declarations whose size cannot be
determined at compile-time.
.El
.It
.Nm gcc 4.2.1
and
.Nm gcc 3.3.6
have backported support for the GCC binary integer constants extension,
which was first introduced in
.Nm gcc 4.3 .
.It
The behavior of
.Fl Wshadow
in
.Nm gcc 4.2.1
has been altered to behave similarly to
.Nm gcc 4.8
and not warn about variables or parameters that shadow a global
function unless the variable or parameter is of type pointer-to-function.
.El
.Sh ATTRIBUTES
The
.Cm __bounded__
attribute is used to type-check functions whose parameters pass fixed-length
buffers and their sizes.
The syntax for normal buffers is:
.Pp
.Ic __attribute__ Ns Po Po
.Cm __bounded__ Ns Pq Cm __buffer__ , Va buffer , length
.Pc Pc
.Pp
where
.Fa buffer
contains the parameter number (starting from 1) of the pointer to the buffer,
and
.Fa length
contains the parameter number of the buffer length argument.
.Pp
.Nm gcc
will emit a warning if the length argument is a constant larger than the
actual size of the buffer.
If the buffer is not a statically declared array of fixed length, no warnings
will be generated.
Refer to
.Xr memcpy 3
for an example of a function with this check.
.Pp
For checking strings, just use
.Cm __string__
instead of
.Cm __buffer__ :
.Pp
.Ic __attribute__ Ns Po Po
.Cm __bounded__ Ns Pq Cm __string__ , Va buffer , length
.Pc Pc
.Pp
In addition to the checks described above, this also tests if the
.Va length
argument was wrongly derived from a
.Fn sizeof "void *"
operation.
.Xr strlcpy 3
is a good example of a string function with this check.
.Pp
If a function needs string checking like
.Cm __string__
but operates on element counts rather than buffer sizes, use
.Cm __wcstring__ :
.Pp
.Ic __attribute__ Ns Po Po
.Cm __bounded__ Ns Pq Cm __wcstring__ , Va buffer , count
.Pc Pc
.Pp
An example of a string function with this check is
.Xr wcslcpy 3 .
.Pp
Some functions specify the length as two arguments:
the number of elements and the size of each element.
In this case, use the
.Cm __size__
attribute:
.Pp
.Ic __attribute__ Ns Po Po
.Cm __bounded__ Ns Pq Cm __size__ , Va buffer , nmemb , size
.Pc Pc
.Pp
where
.Va buffer
contains the parameter number of the pointer to the buffer,
.Va nmemb
contains the parameter number of the number of members, and
.Va size
has the parameter number of the size of each element.
The type checks performed by
.Cm __size__
are the same as the
.Cm __buffer__
attribute.
See
.Xr fread 3
for an example of this type of function.
.Pp
If a function accepts a buffer parameter and specifies that it has to be of a
minimum length, the __minbytes__ attribute can be used:
.Pp
.Ic __attribute__ Ns Po Po
.Cm __bounded__ Ns Pq Cm __minbytes__ , Va buffer , minsize
.Pc Pc
.Pp
where
.Va buffer
contains the parameter number of the pointer to the buffer, and
.Va minsize
specifies the minimum number of bytes that the buffer should be.
.Xr ctime_r 3
is an example of this type of function.
.Pp
If
.Fl Wbounded
is specified with
.Fl Wformat ,
additional checks are performed on
.Xr sscanf 3
format strings.
The
.Ql %s
fields are checked for incorrect bound lengths by checking the size of the
buffer associated with the format argument.
.Sh SEE ALSO
.Xr gcc 1
.Sh CAVEATS
The
.Fl Wbounded
flag only works with statically allocated fixed-size buffers.
Since it is applied at compile-time, dynamically allocated memory buffers
and non-constant arguments are ignored.
@


1.53
log
@spelling;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.52 2017/04/27 00:02:03 dlg Exp $
d98 1
a98 1
.Dv __nonnull__ ,
d102 1
a102 1
.Dv __nonnull__
d110 1
a110 1
.Dv __sentinel__ ,
d189 1
a189 1
.Dv __bounded__ ,
d295 1
a295 1
.Dv __bounded__
d300 3
a302 5
.Li __attribute__ ((__bounded__ (
.Dv __buffer__ ,
.Va buffer ,
.Va length
.Li )))
d321 1
a321 1
.Dv __string__
d323 1
a323 1
.Dv __buffer__ :
d325 3
a327 5
.Li __attribute__ ((__bounded__ (
.Dv __string__ ,
.Va buffer ,
.Va length
.Li )))
d338 1
a338 1
.Dv __string__
d340 1
a340 1
.Dv __wcstring__ :
d342 3
a344 5
.Li __attribute__ ((__bounded__ (
.Dv __wcstring__ ,
.Va buffer ,
.Va count
.Li )))
d352 1
a352 1
.Dv __size__
d355 3
a357 6
.Li __attribute__ ((__bounded__ (
.Dv __size__ ,
.Va buffer ,
.Va nmemb ,
.Va size
.Li )))
d367 1
a367 1
.Dv __size__
d369 1
a369 1
.Dv __buffer__
d378 3
a380 5
.Li __attribute__ ((__bounded__ (
.Dv __minbytes__ ,
.Va buffer ,
.Va minsize
.Li )))
@


1.52
log
@add support for -msave-args in gcc on amd64

i got sick of not having arguments in ddb stack traces on amd64,
which is because amd64 passes arguments in registers, and it's
impossible to figure out where they go without dwarf info, and when
you have dwarf info it is complicated.

solaris has a simple solution for this. they tweaked their compilers
to accept an -msave-args option which makes functions store their
arguments on the stack, while maintaining compatability with the
System V AMD64 ABI. tools (eg, ddb) can then look at the stack to
get access to function arguments in traces.

this ports their changes to gcc 3 to our gcc.

ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.51 2017/02/14 12:50:15 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: February 14 2017 $
d166 1
a166 1
arguments on the stack, while maintaining compatability with the
@


1.51
log
@tweak previous; ok jsg, who reminded me the same text in
gcc-local needed bumped too;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.50 2017/02/06 02:42:53 guenther Exp $
d28 1
a28 1
.Dd $Mdocdate: February 6 2017 $
d162 8
@


1.50
log
@Document the behavior of -Wshadow.  Add arm to the list of PIE archs
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.49 2016/10/16 21:25:16 deraadt Exp $
d28 1
a28 1
.Dd $Mdocdate: October 16 2016 $
d226 1
a226 1
does not warn for pointer arguments passing or assignment with
@


1.49
log
@Delete URL to dead site.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.48 2016/03/14 03:01:48 mmcc Exp $
d28 1
a28 1
.Dd $Mdocdate: March 14 2016 $
d163 1
a163 1
On the alpha, amd64, hppa, i386, mips64, powerpc, sh and sparc64
d275 9
@


1.48
log
@Remove a reference to lint(1) in the description of the -CC option. The
option itself may go away sometime soon.

ok guenther@@, deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.47 2015/12/23 08:42:42 bentley Exp $
d28 1
a28 1
.Dd $Mdocdate: December 23 2015 $
a396 2
.Pp
.Lk http://www.research.ibm.com/trl/projects/security/ssp/
@


1.47
log
@We support PIE on static executables now.

ok pascal@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.46 2015/11/05 09:48:05 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: November 5 2015 $
a239 2
This is used to allow annotations in macros for
lint.
@


1.46
log
@"commandline" -> "command line", since there are so few examples
of the former in the pages, so many of the latter, and in some of
these pages we had multiple spellings;

prompted by tj
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.45 2014/10/18 14:08:48 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: October 18 2014 $
a174 1
It is not supported for static executables.
@


1.45
log
@Mention -fstack-shuffle is a gcc4-only thing, but gets silently ignored by
gcc3. Reminded by zhuk@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.44 2014/09/28 10:43:33 benno Exp $
d28 1
a28 1
.Dd $Mdocdate: September 28 2014 $
d143 1
a143 1
commandline option.
@


1.44
log
@document -fstack-shuffle
ok jmc@@ tedu@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.43 2014/07/10 19:14:40 matthew Exp $
d28 1
a28 1
.Dd $Mdocdate: July 10 2014 $
d204 5
a208 2
will randomize the order of stack variables at compile time, which can
be helpful to find bugs.
@


1.43
log
@Backport support for -Wframe-larger-than=N to base GCC

This is the flag name that modern GCC and Clang have de facto
standardized on for the functionality that we locally named
-Wstack-larger-than-N.

ok brad, miod
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.42 2014/03/23 17:29:06 pascal Exp $
d28 1
a28 1
.Dd $Mdocdate: March 23 2014 $
d201 5
@


1.42
log
@Finally give powerpc PIE.  Remaining bugs on socppc fixed by kettenis@@.

"I think you should do this switch right away" deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.41 2014/01/21 07:47:59 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: January 21 2014 $
d247 3
d251 1
@


1.41
log
@various small fixes to improve readability, mostly in the propolice section;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.40 2014/01/21 02:44:14 martynas Exp $
d163 2
a164 1
On the alpha, amd64, hppa, i386, mips64, sh and sparc64 architectures,
@


1.40
log
@Update gcc-local(1) with recent changes to the toolchain:
- i386 is now PIE
- -Wbounded is enabled by default
- -Wbounded recognizes new attribute __wcstring__
- -fstack-protector-strong is supported
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.39 2013/08/07 01:10:27 jsg Exp $
d28 1
a28 1
.Dd $Mdocdate: August 7 2013 $
d133 1
a133 1
checks at run time, in order to detect stack overflows, and will attempt to
d146 1
a146 1
support bits, or use the
d149 2
a150 1
There is also a
d152 1
a152 1
option, that turns stack protection code on for all functions,
d154 2
a155 2
This extended checking has a moderate runtime cost, though.
There is also a
d157 5
a161 5
option, that is like
.Fl fstack-protector
but includes additional functions to be protected --- those that
have local array definitions, or have references to local frame
addresses.
d325 1
a325 1
An example of such string function with this check is
@


1.39
log
@mention support for binary integer constants
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.38 2013/08/06 19:05:57 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: August 6 2013 $
d154 7
d162 1
a162 1
On the alpha, amd64, hppa, mips64, sh and sparc64 architectures,
d176 1
a176 1
recognizes a new flag,
d312 14
@


1.38
log
@Switch vax to gcc 3.3.6.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.37 2013/07/12 10:44:14 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: July 12 2013 $
d250 7
@


1.37
log
@no more a.out for vax; From: Alexey Suslikov
ok miod
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.36 2013/02/08 07:37:43 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: February 8 2013 $
d38 1
a38 1
versions 2.95.3, 3.3.6 or 4.2.1,
a88 7
The option
.Fl fno-builtin-<function>
was backported to
.Nm gcc 2.95.3 ,
and can be used without having to differentiate between
compilers.
.It
a95 1
Even in 2.95.3,
a118 11
On vax,
.Nm gcc
still uses
.Xr setjmp 3 /
.Xr longjmp 3 -
style exceptions, and so needs extra fixes beyond the pure 2.95.3 release.
.Po so-called
.Dq sjlj
exceptions are also used on aviion, luna88k and mvme88k
.Pc
.It
a217 1
Even in 2.95.3,
@


1.36
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.35 2013/02/07 22:33:58 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: February 7 2013 $
a136 11
.It
On a.out platforms (i.e. vax),
.Nm gcc
uses a linker wrapper to write stubs that call global constructors and
destructors.
Those platforms use
.Nm gcc 2.95.3 ,
and those calls can be traced using
.Fl Wl,-trace-ctors-dtors ,
using
.Xr syslog_r 3 .
@


1.35
log
@Sync with reality. Partially revert 1.28 since gcc 3 is back in town. Also
mention collect2 ctor wrapper only exists on vax, and sjlj exceptions only
remain on vax on m88k as of today.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.34 2013/01/06 21:53:49 martynas Exp $
d28 1
a28 1
.Dd $Mdocdate: January 6 2013 $
d138 1
a138 1
On a.out platforms (i.e vax),
@


1.34
log
@Update information about PIE status in gcc-local(1).  OK pascal@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.33 2012/09/25 19:51:36 brad Exp $
d28 1
a28 1
.Dd $Mdocdate: September 25 2012 $
d38 1
a38 1
versions 2.95.3 or 4.2.1,
d51 1
a51 1
On most architectures,
d54 1
a54 2
.Xr mprotect 2 ,
since the stack area is by default non-executable.
d127 1
a127 1
On some platforms,
d133 4
d138 1
a138 2
On a few
platforms (mostly a.out),
d227 2
@


1.33
log
@Remove mentioning of the -pthread flag.

Discussed with matthew@@ guenther@@ kettenis@@
ok matthew@@ sthen@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.32 2012/08/31 19:01:31 pascal Exp $
d28 1
a28 1
.Dd $Mdocdate: August 31 2012 $
d183 1
a183 1
On the amd64, mips64, mips64el and sparc64 architectures,
@


1.32
log
@Document PIE-by-default behaviour.  With a tweak from matthew@@.

ok deraadt@@ jmc@@ matthew@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.31 2012/08/12 17:01:35 schwarze Exp $
d28 1
a28 1
.Dd $Mdocdate: August 12 2012 $
a49 5
.It
The
.Fl pthread
option should be used to link threaded code, isolating the program from
operating system details.
@


1.31
log
@Use .Lk for HTTP hyperlinks, not .Pa.
Most of the patch from Arto Jonsson <ajonsson at kapsi dot fi>.
jmc@@ agrees in principle that .Lk is the right macro to use.

While here, update a few broken links,
and add missing markup at a few places.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.30 2012/06/24 08:28:37 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: June 24 2012 $
d187 13
@


1.30
log
@tweak previous (sorry matthieu, i should have spotted this earlier);
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.29 2012/06/23 23:14:15 matthieu Exp $
d28 1
a28 1
.Dd $Mdocdate: June 23 2012 $
d378 1
a378 1
.Pa http://www.research.ibm.com/trl/projects/security/ssp/
@


1.29
log
@Document that -Wsystem-headers is on by default.
ok pascal@@, jmc@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.28 2012/04/21 14:21:58 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: April 21 2012 $
d247 1
a247 1
.Fl Wsystem-headers
d250 2
a251 1
report warnings in systems headers is enabled by default.
@


1.28
log
@Don't mention gcc 3 anymore.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.27 2012/04/08 17:36:21 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: April 8 2012 $
d245 6
@


1.27
log
@no more lint;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.26 2011/11/22 09:29:49 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: November 22 2011 $
d38 1
a38 1
versions 2.95.3, 3.3.5, or 4.2.1,
d97 1
a97 3
was backported from
.Nm gcc 3.3.5 ,
to
d100 1
a100 1
both compilers.
d217 1
a217 1
.Nm gcc 3.3.5
@


1.26
log
@no need to plaster "on openbsd" all over the place - we're pretty clear
upfront that this page documents openbsd-specific changes;

from Daniel Dickman
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.25 2011/09/21 21:26:04 jsg Exp $
d28 1
a28 1
.Dd $Mdocdate: September 21 2011 $
d246 1
a246 1
.Xr lint 1 .
@


1.25
log
@add a note about -ftree-vrp being removed from -O2
as it is known to be broken in 4.2.1

prompted by a discussion about other gcc bugs...
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.24 2011/07/25 19:24:03 tedu Exp $
d28 1
a28 1
.Dd $Mdocdate: July 25 2011 $
d51 1
a51 3
On
.Ox ,
the
d62 1
a62 3
On
.Ox ,
by default, trampoline code generation is disabled.
d89 2
d92 1
a92 3
optimization is not included in the
.Fl O2
option as it is known to be broken in
d135 1
a135 3
On some
.Ox
platforms,
a162 2
On
.Ox ,
a214 2
On
.Ox ,
a224 2
On
.Ox ,
a228 2
On
.Ox ,
a247 2
On
.Ox ,
@


1.24
log
@note that -fstrict-overflow is disabled by default.  ok jsg nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.23 2011/06/02 21:39:10 martynas Exp $
d28 1
a28 1
.Dd $Mdocdate: June 2 2011 $
d91 7
@


1.23
log
@Document that the rounding mode is dynamic, on Alpha.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.22 2010/07/12 16:28:29 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: July 12 2010 $
d82 9
@


1.22
log
@document gcc4; requested by brad
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.21 2010/05/09 14:07:58 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 9 2010 $
d151 1
@


1.21
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.20 2010/05/08 17:45:45 robert Exp $
d28 1
a28 1
.Dd $Mdocdate: May 8 2010 $
a34 1
Some
d36 7
a42 9
platforms use a derivative of
.Nm gcc 2.95.3 ,
others use a derivative of
.Nm gcc 3.3.5 .
In both cases,
the
.Nm gcc
software comes with specific modifications for
.Ox .
@


1.20
log
@Document Wpointer-sign is not enabled in gcc 4.2.1 on OpenBSD
if -pedantic is not defined.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.19 2008/11/04 23:59:37 martynas Exp $
d28 1
a28 1
.Dd $Mdocdate: November 4 2008 $
d232 1
a232 1
.Fl pedantic.
@


1.19
log
@man page states that alpha is fully ieee compliant, but it does not
maintain inexact flag.  some platforms implement -mieee-with-inexact;
however it's not practical since it slows down the code, with very
small benefit.  note the fact in the man page that inexact flag is
not maintained.  w/ a tweak from jmc@@.  ok jmc@@, millert@@, merdely@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.18 2008/06/10 13:12:43 merdely Exp $
d28 1
a28 1
.Dd $Mdocdate: June 10 2008 $
d226 11
@


1.18
log
@Document that our gcc on alpha has -mieee enabled by default.

Suggested by and ok jmc.  ok miod.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.17 2007/11/27 15:18:00 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: November 27 2007 $
d150 4
a153 1
the IEEE floating point standard.
@


1.17
log
@tweak the Ox warning section;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.16 2007/11/26 22:47:22 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: November 26 2007 $
d146 5
@


1.16
log
@Add a new warning to gcc, -Wvariable-decl, which causes it to warn for
auto declarations which size are not known at compile time.

This flag will eventually be added to the kernel makefiles so that we
can rely on -Wstack-larger-than work.

ok deraadt@@ mbalmer@@ otto@@ marco@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.15 2007/05/31 19:19:48 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d235 1
a235 1
.Fl Wstack-larger-than-N
d240 1
a240 1
callee-saved registers, outbound arguments storage, etc.)\&
d244 1
a244 1
will report automatic variable declarations whose size can not be
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.14 2006/07/21 13:45:39 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate$
d229 7
a235 2
A new warning,
.Fl Wstack-larger-than-N ,
d242 5
@


1.14
log
@tweak;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.13 2006/07/20 21:05:22 miod Exp $
d28 1
a28 1
.Dd July 16, 2006
@


1.13
log
@Introduce a new compiler warning, -Wstack-larger-than-N, to report
functions which are too greedy in stack variables.

This is intended to be used for kernel compiles, where this warning will
be enabled for a reasonable size (after a few weeks grace period so that
people can upgrade their compiler).

Please note that this warning relies upon md code, and as such is only
available on platforms OpenBSD runs on; also, the stack size being warned
on is only the local variables size, regardless of the ABI stack usage
requirements and the callee-saved registers; which means a function may
be warning-clean yet need more stack space than meets the eye; the
actual size being checked on may change to include these extras in the
future.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.12 2006/04/11 10:36:23 espie Exp $
d235 2
a236 2
callee-saved registers, outbound arguments storage, etc)
is not taken in account for this check.
@


1.12
log
@minimal documentation for -fstack-protector-all and gcc -E -CC in 2.95.3.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.11 2005/04/27 14:12:27 miod Exp $
d28 1
a28 1
.Dd January 3, 2005
d228 9
@


1.11
log
@All gcc versions disable trampolines by default now.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.10 2005/02/06 10:39:31 espie Exp $
d170 5
d218 10
@


1.10
log
@disallow trampolines by default. okay miod@@, jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.9 2005/01/18 03:37:46 david Exp $
d69 1
a69 2
by default, trampoline code generation is disabled in
.Nm gcc 3.3.5 .
@


1.9
log
@sentinel is now implemented in gcc 3.3.5; ok miod@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.8 2005/01/11 09:16:33 jmc Exp $
d66 11
@


1.8
log
@tweaks;
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.7 2005/01/11 02:45:37 espie Exp $
a318 5
.Sh BUGS
The
.Dv __sentinel__
attribute is not yet fully implemented for
.Nm gcc 3.3.5 .
@


1.7
log
@be more specific about pp log attempts.
explain about cast used as lvalues.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.6 2005/01/03 16:03:29 miod Exp $
d145 2
a146 2
report the problem in the system logs by calling 
.Xr syslog 2
@


1.6
log
@Remove gcc 2.95/x86 specific notes, and mention the implicit
-fno-zero-initialized-in-bss for gcc 3.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.5 2004/12/31 06:00:15 david Exp $
d145 7
a151 1
report the problem in the system logs, and abort the faulting process.
d197 6
@


1.5
log
@gcc 3.3.5; ok espie@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.4 2004/09/02 07:38:40 brad Exp $
d28 1
a28 1
.Dd December 1, 2002
a136 5
On i386, the optimizer for
.Nm gcc 2.95.3
features an extra peephole which reduces the function
prologues enough to allow for the ramdisk to fit on one floppy.
.It
d179 12
@


1.4
log
@propolice -> ProPolice
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.3 2004/08/26 14:08:19 miod Exp $
d40 1
a40 1
.Nm gcc 3.3.2 .
d79 1
a79 1
.Nm gcc 3.3.2 ,
d304 1
a304 1
.Nm gcc 3.3.2 .
@


1.3
log
@- update propolice URL
- write attribute names with their underscores (as was already the case for
  __bounded__) for consistency.
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.2 2004/04/23 22:25:04 avsm Exp $
d146 1
a146 1
.Dq propolice
@


1.2
log
@remove note about bounded attribute not being implemented in gcc3
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.1 2004/01/31 22:14:49 espie Exp $
d94 3
a96 2
recognizes the attribute nonnull, which can be used to mark
arguments that can't be
d98 2
a99 1
The printf format attribute does not imply nonnull
d106 3
a108 2
recognizes the extra attribute sentinel, which can be used to mark varargs
function that need a
d293 1
a293 1
.Pa http://www.trl.ibm.com/projects/security/ssp
d301 4
a304 2
The sentinel attribute is not yet fully implemented for
.Nm gcc 3.3.2.
@


1.1
log
@uniform documentation for gcc2 and gcc3.
nits by jmc@@, okay deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: gcc-local.1,v 1.17 2004/01/04 07:08:09 pvalchev Exp $
d298 1
a298 1
The sentinel and bounded attributes are not yet fully implemented for
@

