head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.8
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.10
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.12
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.10
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.8
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.6
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.14.0.14
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.10
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.12
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.8
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.10
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.8
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.6
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.4
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@.\" @;


1.17
date	2016.02.25.09.43.52;	author tb;	state Exp;
branches;
next	1.16;
commitid	kkvc4RctEUkDpJhf;

1.16
date	2014.01.23.12.49.12;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2010.08.10.20.34.15;	author sobrado;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.31.19.19.59;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2005.01.07.11.49.32;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.27.16.41.13;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.22.00.58.40;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.03.10.15.37;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.04.04.43.56;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.01.16.38.39;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.17.23.18.51;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.04.21.56.04;	author kjell;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.04.16.56.52;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.20.06.09.32;	author mpech;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.27.21.19.23;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.10.19.02.19;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.09.03.57.34;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Xr biosboot and describe more precisely how this versatile program
will eventually load the first-stage bootstrap. From Michal Mazurek.

tweaks and ok jmc@@
@
text
@.\"	$OpenBSD: boot_i386.8,v 1.16 2014/01/23 12:49:12 jmc Exp $
.\"
.\" Copyright (c) 1997 Tobias Weingartner
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: January 23 2014 $
.Dt BOOT_I386 8 i386
.Os
.Sh NAME
.Nm boot_i386
.Nd i386 system bootstrapping procedures
.Sh DESCRIPTION
.Ss Cold starts
The
.Tn IBM PC
computers and clones will perform a POST (Power On Self Test) upon
being booted cold.
This test will find and initialize memory, keyboard, and other devices.
It will search for and initialize any extension ROMs that are present,
and then attempt to boot the operating system from an available boot
drive.
.Pp
The boot drive is usually specified in the BIOS setup.
.Ss Warm starts
The BIOS loads the first block (at physical location: track 0, head 0,
sector 1) off the boot device into memory, and if the last two bytes in the
block match the signature 0xAA55, the BIOS considers the block a valid
bootable drive.
The BIOS then proceeds to call the machine code program in this block.
If the BIOS is current, it will also pass the boot drive
to the boot block in register %dl.
.Pp
There are two different types of boot blocks on devices.
There is the
MBR (master boot record) and the PBR (partition boot record).
A digression
into a little piece of history will quickly give light as to why this is so.
In the beginning, the PC
.Dq architecture
came with single or dual floppy
drives, and no hard drives.
The only type of bootable sectors on any device were the PBRs.
They were responsible for loading the rest of the operating
system from the correct device.
When hard disks came out, it was felt that
such a huge space should be able to be partitioned into separate drives,
and this is when the MBR was invented.
.Pp
The MBR relocates itself upon being loaded and invoked by the BIOS.
Embedded within the MBR is a partition table, with four partition table
entries.
The MBR code traverses this table (which was loaded with the
MBR by the BIOS), looking for an active entry, and then loads the MBR or
PBR from the disk location specified by the partition table entry.
So in reality, the MBR is nothing more than a fancy chaining PBR.
.Pp
Note: The MBR could load another MBR, which is the case when you are booting
off an extended partition.
In other words, the first block of an extended
partition is really an MBR, which will then load the corresponding MBR or PBR
out of its extended partition's partition table.
.Ss Geometry translation
.Em WARNING :
This portion of the
.Dq PC BIOS Architecture
is a mess, and a compatibility nightmare.
.Pp
The PC BIOS has an API to manipulate any disk that the BIOS happens to
support.
This interface uses 10 bits to address the cylinder, 8 bits to
address the head, and 6 bits to address the sector of a drive.
This restricts any application using the BIOS to being able to address only
1024 cylinders, 256 heads, and 63 (since the sectors are 1 based) sectors
on a disk.
These limitations proved to be fine for roughly 3 years after
the debut of hard disks on PC computers.
.Pp
Many (if not all) newer drives have many more cylinders than the BIOS API
can support, and likely more sectors per track as well.
To allow the BIOS the ability of accessing these large drives, the BIOS would
.Dq re-map
the
cylinder/head/sector of the real drive geometry into something that would
allow the applications using the BIOS to access a larger portion of the
drive, still using the restricted BIOS API.
.Pp
The reason this has become a problem is that any modern OS will use its own
drivers to access the disk drive, bypassing the BIOS completely.
However,
the MBR, PBR, and partition tables are all still written using the original
BIOS access methods.
This is for backwards compatibility to the original IBM PC!
.Pp
So the gist of it is, the MBR, PBR, and partition table need to have BIOS
geometry offsets and cylinder/head/sector values for them to be able to
load any type of operating system.
This geometry can, and likely will,
change whenever you move a disk from machine to machine, or from controller
to controller.
.Em They are controller and machine specific .
.Ss Boot process options
On most
.Ox
systems, booting
.Ox
from the BIOS will load the
.Ox Ns -specific
first-stage bootstrap,
.Xr biosboot 8 ,
which in turn will locate and load the second-stage bootstrap,
.Xr boot 8 .
Other bootstrapping software may be used, and can chain-load the
.Ox
bootstrapping code, or directly load the kernel.
In the latter case, refer to your bootloader documentation to know which
options are available.
.Ss Abnormal system termination
In case of system crashes, the kernel will usually enter the kernel
debugger,
.Xr ddb 4 ,
unless it is not present in the kernel, or it is disabled via the
.Em ddb.panic
sysctl.
Upon leaving ddb, or if ddb was not entered, the kernel will halt the system
if it was still in device configuration phase, or attempt a dump to the
configured dump device, if possible.
The crash dump will then be recovered by
.Xr savecore 8
during the next multi-user boot cycle.
It is also possible to force other behaviours from ddb.
.Sh FILES
.Bl -tag -width /usr/mdec/biosboot -compact
.It Pa /bsd
default system kernel
.It Pa /bsd.sp
single processor capable kernel
.It Pa /bsd.mp
multiprocessor capable kernel
.It Pa /bsd.rd
standalone installation kernel, suitable for disaster recovery
.It Pa /usr/mdec/mbr
system MBR image
.It Pa /usr/mdec/biosboot
system primary stage bootstrap (PBR)
.It Pa /usr/mdec/boot
system second stage bootstrap (usually also installed as
.Pa /boot )
.It Pa /usr/mdec/pxeboot
PXE bootstrap
.El
.Sh SEE ALSO
.Xr ddb 4 ,
.Xr biosboot 8 ,
.Xr boot 8 ,
.Xr halt 8 ,
.Xr init 8 ,
.Xr installboot 8 ,
.Xr pxeboot 8 ,
.Xr reboot 8 ,
.Xr savecore 8 ,
.Xr shutdown 8
.Sh BUGS
The
.Dq PC BIOS Architecture
makes this process very prone to weird and
wonderful interactions between different operating systems.
.Pp
There is no published standard to the MBR and PBR,
which makes coding these a nightmare.
.\" .Pp
.\" Somebody *please* write me a decent BIOS, and make them (the masses) use it!
@


1.16
log
@remove some redundant info and basically sync with boot_amd64(8);
diff From: Daniel Dickman

ok krw, via schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.15 2010/08/10 20:34:15 sobrado Exp $
d28 1
a28 1
.Dd $Mdocdate: August 10 2010 $
d128 1
a128 1
from the BIOS will eventually load the
d130 3
a132 2
i386 bootstrapping code.
This versatile program is described in a separate document,
d175 1
@


1.15
log
@add a description for bsd.sp where appropriate; while here, write
"multiprocessor" in a consistent way.

written with lots of good advice from jmc@@, who noted that changing
hier(7) was not enough and carefully reviewed this diff.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.14 2007/05/31 19:19:59 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d37 3
a39 2
.Tn "PC AT"
clones will perform a POST (Power On Self Test) upon being booted cold.
a43 1
Failing this, older IBM systems come up in ROM BASIC.
d45 1
a45 6
The newer
.Tn "PC AT"
clones attempt to boot off the drive specified in the BIOS setup, or
if it is an older BIOS, it will start with checking for a disk in floppy
drive A (otherwise known as drive 0) first, and failing that, attempt to
boot the hard disk C (otherwise known as hard disk controller 1, drive 0).
@


1.14
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.13 2005/01/07 11:49:32 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate$
d161 2
d164 1
a164 1
multi-processor capable kernel
@


1.13
log
@document bsd.mp;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.12 2004/12/27 16:41:13 miod Exp $
d28 1
a28 1
.Dd September 4, 1997
@


1.12
log
@Mention bsd.rd in the FILES section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.11 2004/11/22 00:58:40 jmc Exp $
d161 2
@


1.11
log
@.{N,O}x fixes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.10 2004/04/03 10:15:37 jmc Exp $
d161 2
@


1.10
log
@add pxeboot references to FILES and SEE ALSO;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.9 2003/06/04 04:43:56 deraadt Exp $
d134 1
a134 1
.Ox -specific
@


1.9
log
@more 3/4 cleanups for lazy developers
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.8 2003/02/01 16:38:39 jmc Exp $
d168 2
d177 1
@


1.8
log
@typos;
added .Fl to flags for boot_*

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.7 2002/10/17 23:18:51 miod Exp $
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Michael Shalayeff.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
@


1.7
log
@Overhaul of boot_`arch`(8) manual pages (unfinished).

Attempt to factorize some texts, remove old or false stuff, try to be
more {help,use}ful, etc.

boot_alpha and boot_hp300 rewritten on the occasion, and boot_hppa is new.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.6 2002/01/04 21:56:04 kjell Exp $
d48 1
a48 1
Failing this, older IBM systems came up in ROM BASIC.
d72 1
a72 1
came with a single or dual floppy
@


1.6
log
@Fix byte order: 0x55AA -> 0xAA55
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.5 2001/10/04 16:56:52 mpech Exp $
a32 1

d37 2
a38 4
.Nm boot
.Nd
.Tn i386-specific
system bootstrapping procedures
a39 4
.Ss Power fail and crash recovery
Normally, the system will reboot itself at power-up or after crashes.
An automatic consistency check of the file systems will be performed,
and unless this fails, the system will resume multi-user operations.
d94 1
a94 1
.Sh GEOMETRY TRANSLATION
d133 29
d165 1
a165 1
system code
d170 3
a172 2
.It Pa /boot
system second stage bootstrap
d175 1
d178 1
d181 1
d188 1
d191 2
a192 1
Somebody *please* write me a decent BIOS, and make them (the masses) use it!
@


1.5
log
@we don't like .Pp and blank lines before/after .Ss;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.4 2001/08/20 06:09:32 mpech Exp $
d66 1
a66 1
block match the signature 0x55AA, the BIOS considers the block a valid
@


1.4
log
@Powered by @@mantoya.
o) we don't like .Nd without argument, except next line starts with a new
tag;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.3 2001/06/27 21:19:23 pvalchev Exp $
a46 1
.Pp
a62 1
.Pp
@


1.3
log
@spelling/grammer fixes; jsyn@@nthought.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.2 2001/06/10 19:02:19 mickey Exp $
d40 1
@


1.2
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.1 2000/11/09 03:57:34 deraadt Exp $
d90 1
a90 1
Embeded within the MBR is a partition table, with four partition table
@


1.1
log
@incomplete work.  moved them, repaired some, it is a giant mess
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.12 2000/04/15 02:15:16 aaron Exp $
d162 1
a162 1
wonderful interactions between differing operating systems.
@

