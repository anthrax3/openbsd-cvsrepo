head	1.65;
access;
symbols
	OPENBSD_6_1:1.64.0.6
	OPENBSD_6_1_BASE:1.64
	OPENBSD_6_0:1.64.0.2
	OPENBSD_6_0_BASE:1.64
	OPENBSD_5_9:1.63.0.2
	OPENBSD_5_9_BASE:1.63
	OPENBSD_5_8:1.62.0.6
	OPENBSD_5_8_BASE:1.62
	OPENBSD_5_7:1.62.0.2
	OPENBSD_5_7_BASE:1.62
	OPENBSD_5_6:1.57.0.4
	OPENBSD_5_6_BASE:1.57
	OPENBSD_5_5:1.55.0.6
	OPENBSD_5_5_BASE:1.55
	OPENBSD_5_4:1.55.0.2
	OPENBSD_5_4_BASE:1.55
	OPENBSD_5_3:1.53.0.2
	OPENBSD_5_3_BASE:1.53
	OPENBSD_5_2:1.51.0.2
	OPENBSD_5_2_BASE:1.51
	OPENBSD_5_1_BASE:1.48
	OPENBSD_5_1:1.48.0.2
	OPENBSD_5_0:1.46.0.6
	OPENBSD_5_0_BASE:1.46
	OPENBSD_4_9:1.46.0.4
	OPENBSD_4_9_BASE:1.46
	OPENBSD_4_8:1.46.0.2
	OPENBSD_4_8_BASE:1.46
	OPENBSD_4_7:1.45.0.4
	OPENBSD_4_7_BASE:1.45
	OPENBSD_4_6:1.45.0.6
	OPENBSD_4_6_BASE:1.45
	OPENBSD_4_5:1.45.0.2
	OPENBSD_4_5_BASE:1.45
	OPENBSD_4_4:1.44.0.6
	OPENBSD_4_4_BASE:1.44
	OPENBSD_4_3:1.44.0.4
	OPENBSD_4_3_BASE:1.44
	OPENBSD_4_2:1.44.0.2
	OPENBSD_4_2_BASE:1.44
	OPENBSD_4_1:1.43.0.14
	OPENBSD_4_1_BASE:1.43
	OPENBSD_4_0:1.43.0.12
	OPENBSD_4_0_BASE:1.43
	OPENBSD_3_9:1.43.0.10
	OPENBSD_3_9_BASE:1.43
	OPENBSD_3_8:1.43.0.8
	OPENBSD_3_8_BASE:1.43
	OPENBSD_3_7:1.43.0.6
	OPENBSD_3_7_BASE:1.43
	OPENBSD_3_6:1.43.0.4
	OPENBSD_3_6_BASE:1.43
	OPENBSD_3_5:1.43.0.2
	OPENBSD_3_5_BASE:1.43
	OPENBSD_3_4:1.42.0.2
	OPENBSD_3_4_BASE:1.42
	OPENBSD_3_3:1.41.0.2
	OPENBSD_3_3_BASE:1.41
	OPENBSD_3_2:1.37.0.4
	OPENBSD_3_2_BASE:1.37
	OPENBSD_3_1:1.37.0.2
	OPENBSD_3_1_BASE:1.37
	OPENBSD_3_0:1.36.0.2
	OPENBSD_3_0_BASE:1.36
	OPENBSD_2_9:1.32.0.2
	OPENBSD_2_9_BASE:1.32
	OPENBSD_2_8:1.29.0.2
	OPENBSD_2_8_BASE:1.29
	OPENBSD_2_7:1.25.0.2
	OPENBSD_2_7_BASE:1.25
	OPENBSD_2_6:1.17.0.2
	OPENBSD_2_6_BASE:1.17
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5;
locks; strict;
comment	@.\" @;


1.65
date	2017.07.08.02.13.36;	author tedu;	state Exp;
branches;
next	1.64;
commitid	R7qCHCgzduzkG48u;

1.64
date	2016.06.06.15.26.04;	author sthen;	state Exp;
branches;
next	1.63;
commitid	bZpqahOcRpLT9SJc;

1.63
date	2016.02.08.19.29.58;	author jmc;	state Exp;
branches;
next	1.62;
commitid	HQfNKKjV3yeHcUfI;

1.62
date	2014.11.22.18.06.35;	author deraadt;	state Exp;
branches;
next	1.61;
commitid	FHnEB4vQuQqUuCnp;

1.61
date	2014.10.16.02.51.26;	author lteo;	state Exp;
branches;
next	1.60;
commitid	xKlHxRPoBDHvxIoX;

1.60
date	2014.09.18.19.17.02;	author jmc;	state Exp;
branches;
next	1.59;
commitid	KBtHDhxHANNmorri;

1.59
date	2014.08.26.21.48.08;	author jmc;	state Exp;
branches;
next	1.58;
commitid	EabjXjHBCPHk9pKy;

1.58
date	2014.08.26.19.33.48;	author robert;	state Exp;
branches;
next	1.57;
commitid	d4aMPQgs0Avz1qdr;

1.57
date	2014.04.12.16.08.10;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2014.03.13.10.12.11;	author florian;	state Exp;
branches;
next	1.55;

1.55
date	2013.03.14.04.03.47;	author lteo;	state Exp;
branches;
next	1.54;

1.54
date	2013.03.07.13.19.54;	author sthen;	state Exp;
branches;
next	1.53;

1.53
date	2012.11.27.01.02.07;	author djm;	state Exp;
branches;
next	1.52;

1.52
date	2012.11.06.04.16.10;	author lteo;	state Exp;
branches;
next	1.51;

1.51
date	2012.06.19.02.34.53;	author lteo;	state Exp;
branches;
next	1.50;

1.50
date	2012.05.27.07.04.52;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2012.05.25.19.25.38;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2011.09.29.17.57.08;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2011.09.07.09.30.15;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2008.12.16.17.40.04;	author espie;	state Exp;
branches;
next	1.44;

1.44
date	2007.05.31.19.19.59;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2003.12.05.07.48.19;	author beck;	state Exp;
branches;
next	1.42;

1.42
date	2003.06.06.19.28.06;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2003.02.26.15.05.07;	author david;	state Exp;
branches;
next	1.40;

1.40
date	2003.02.15.11.45.53;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2003.02.13.08.23.39;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2002.12.15.19.26.54;	author margarida;	state Exp;
branches;
next	1.37;

1.37
date	2002.01.22.07.08.56;	author jsyn;	state Exp;
branches;
next	1.36;

1.36
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.35;

1.35
date	2001.09.19.19.42.00;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	2001.08.17.11.13.58;	author mpech;	state Exp;
branches;
next	1.33;

1.33
date	2001.08.03.15.21.17;	author mpech;	state Exp;
branches;
next	1.32;

1.32
date	2000.12.22.16.54.38;	author avsm;	state Exp;
branches;
next	1.31;

1.31
date	2000.12.06.23.09.21;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2000.11.20.08.00.04;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2000.10.24.21.50.24;	author beck;	state Exp;
branches;
next	1.28;

1.28
date	2000.10.13.04.09.22;	author aaron;	state Exp;
branches;
next	1.27;

1.27
date	2000.06.17.16.12.48;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2000.06.17.16.04.30;	author beck;	state Exp;
branches;
next	1.25;

1.25
date	2000.04.28.23.59.42;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2000.04.26.16.19.39;	author beck;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.16.20.19.45;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2000.03.29.18.00.42;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2000.03.24.21.00.18;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2000.03.24.20.58.52;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2000.01.25.03.12.30;	author angelos;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.22.02.17.54;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.10.14.20.27.25;	author beck;	state Exp;
branches;
next	1.16;

1.16
date	99.10.14.19.56.15;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	99.10.14.19.54.27;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	99.10.14.19.51.01;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	99.10.05.20.41.22;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	99.10.03.20.15.37;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	99.10.01.22.14.49;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	99.09.30.16.59.18;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	99.09.23.04.12.07;	author alex;	state Exp;
branches;
next	1.8;

1.8
date	99.07.09.13.35.37;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.05.23.14.11.27;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.12.13.26.50;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.03.18.19.27.54;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	99.03.17.03.04.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.03.17.02.55.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.03.17.02.54.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.03.17.02.47.06;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.65
log
@add a hint about subjectAltName. this isn't great, but i'm not sure how
to improve it without muddying up the whole page, and at a minimum it
gives the reader a clue about some concepts to search the web for.
if you can do better, make it so. :)
@
text
@.\"	$OpenBSD: ssl.8,v 1.64 2016/06/06 15:26:04 sthen Exp $
.\"
.\" Copyright (c) 1999 Theo de Raadt, Bob Beck
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 6 2016 $
.Dt SSL 8
.Os
.Sh NAME
.Nm ssl
.Nd details for libssl and libcrypto
.Sh DESCRIPTION
This document describes some of the issues relating to the use of
the OpenSSL libssl and libcrypto libraries.
This document is intended as an overview of what the libraries do,
and what uses them.
.Pp
The libssl and libcrypto libraries implement the TLS version 1 protocol.
It is most commonly used by the HTTPS protocol for encrypted
web transactions, as can be done with
.Xr httpd 8 .
The libcrypto library is also used by various programs such as
.Xr ssh 1 ,
.Xr sshd 8 ,
and
.Xr isakmpd 8 .
.Sh SERVER CERTIFICATES
The most common uses of TLS will require you to generate a server
certificate, which is provided by your host as evidence of its identity
when clients make new connections.
The certificates reside in the
.Pa /etc/ssl
directory, with the keys in the
.Pa /etc/ssl/private
directory.
.Pp
Private keys can be encrypted using AES and a passphrase to protect their
integrity should the encrypted file be disclosed.
However, it is important to note that encrypted server keys mean that the
passphrase needs to be typed in every time the server is started.
If a passphrase is not used, you will need to be absolutely sure your
key file is kept secure.
.Sh GENERATING RSA SERVER CERTIFICATES FOR WEB SERVERS
To support HTTPS transactions in
.Xr httpd 8
you will need to generate an RSA certificate.
.Bd -literal -offset indent
# openssl genrsa -out /etc/ssl/private/server.key 2048
.Ed
.Pp
Or, if you wish the key to be encrypted with a passphrase that you will
have to type in when starting servers
.Bd -literal -offset indent
# openssl genrsa -aes256 -out /etc/ssl/private/server.key 2048
.Ed
.Pp
The next step is to generate a Certificate Signing Request (CSR) which is
used to get a Certificate Authority (CA) to sign your certificate.
To do this use the command:
.Bd -literal -offset indent
# openssl req -new -key /etc/ssl/private/server.key \e
  -out /etc/ssl/private/server.csr
.Ed
.Pp
This
.Pa server.csr
file can then be given to a Certificate Authority who will sign the key.
.Pp
You can also sign the key yourself, using the command:
.Bd -literal -offset indent
# openssl x509 -sha256 -req -days 365 \e
  -in /etc/ssl/private/server.csr \e
  -signkey /etc/ssl/private/server.key \e
  -out /etc/ssl/server.crt
.Ed
.Pp
Note that some new browsers have deprecated using the common name of a
certifate and require that subject alt names be provided.
This may require the use of
.Ar -extfile Pa server.ext
when self-signing.
.Bd -literal -offset indent
# this is an example server.ext file
subjectAltName=DNS:example.com,DNS:www.example.com
.Ed
.Pp
With
.Pa /etc/ssl/server.crt
and
.Pa /etc/ssl/private/server.key
in place, you should be able to start
.Xr httpd 8
with SSL configured, enabling HTTPS transactions with your machine on port 443.
.Pp
You will most likely want to generate a self-signed certificate in the
manner above along with your certificate signing request to test your
server's functionality even if you are going to have the certificate
signed by another Certificate Authority.
Once your Certificate Authority returns the signed certificate to you,
you can switch to using the new certificate by replacing the self-signed
.Pa /etc/ssl/server.crt
with the certificate signed by your Certificate Authority, and then
restarting
.Xr httpd 8 .
.Sh GENERATING ECDSA SERVER CERTIFICATES
First, generate parameters for ECDSA keys.
The following command will use a NIST/SECG curve over a 384-bit
prime field:
.Bd -literal -offset indent
# openssl ecparam -out ec-secp384r1.pem -name secp384r1
.Ed
.Pp
Once you have the ECDSA parameters generated, you can generate a
CSR and unencrypted private key using the command:
.Bd -literal -offset indent
# openssl req -nodes -newkey ec:ec-secp384r1.pem \e
  -keyout /etc/ssl/private/eccert.key -new \e
  -out /etc/ssl/private/eccert.csr
.Ed
.Pp
To generate an encrypted private key, you would use:
.Bd -literal -offset indent
# openssl req -newkey ec:ec-secp384r1.pem \e
  -keyout /etc/ssl/private/eccert.key -new \e
  -out /etc/ssl/private/eccert.csr
.Ed
.Pp
This
.Pa eccert.csr
file can then be given to a CA who will sign the key.
.Pp
You can also sign the key yourself, using the command:
.Bd -literal -offset indent
# openssl x509 -sha256 -req -days 365 \e
  -in /etc/ssl/private/eccert.csr \e
  -signkey /etc/ssl/private/eccert.key \e
  -out /etc/ssl/eccert.crt
.Ed
.Sh SEE ALSO
.Xr openssl 1 ,
.Xr ssh 1 ,
.Xr ssl 3 ,
.Xr httpd 8 ,
.Xr isakmpd 8 ,
.Xr rc 8 ,
.Xr smtpd 8 ,
.Xr sshd 8 ,
.Xr starttls 8
.Sh HISTORY
Prior to Sept 21, 2000,
there were problems shipping fully functional implementations of these
protocols, as such shipment would include shipping
.Em into
the United States.
RSA Data Security Inc (RSADSI) held the patent on the RSA algorithm in the
United States, and because of this, free implementations of RSA were
difficult to distribute and propagate.
(The RSA patent was probably more effective at preventing the adoption of
widespread international integrated crypto than the much maligned ITAR
restrictions were.)
Prior to
.Ox 2.8 ,
these libraries shipped without the RSA algorithm -- all such functions
were stubbed to fail.
Since RSA is a key component of SSL version 2, this meant that SSL version
2 would not work at all.
SSL version 3 and TLS version 1 allow for the exchange of keys via
mechanisms that do not involve RSA, and would work with the shipped version
of the libraries, assuming both ends could agree to a cipher suite and key
exchange that did not involve RSA.
Likewise, the SSH1 protocol in
.Xr ssh 1
uses RSA, so it was similarly encumbered.
.Pp
For instance, another typical alternative is DSA, which is not encumbered
by commercial patents (and lawyers).
.Pp
The HTTPS protocol used by web browsers (in modern incarnations) allows for
the use of SSL version 3 and TLS version 1, which in theory allows for
encrypted web transactions without using RSA.
Unfortunately, all the popular web browsers buy their cryptographic code
from RSADSI.
Predictably, RSADSI would prefer that web browsers used their patented
algorithm, and thus their libraries do not implement any non-RSA cipher and
keying combination.
The result of this was that while the HTTPS protocol allowed for many
cipher suites that did not require the use of patented algorithms, it was
very difficult to use these with the popular commercially available
software.
Prior to version 2.8,
.Ox
allowed users to download RSA enabled versions of the shared libssl and
libcrypto libraries which allowed users to enable full functionality without
recompiling the applications.
This method is now no longer needed, as the fully functional
libraries ship with the system.
However, this entire debacle is worth remembering when choosing
software and vendors.
.Pp
Due to multiple flaws in the protocols, SSL version 2 was removed in
.Ox 5.2
and SSL version 3 was disabled in
.Ox 5.7 .
Users and programs should use TLS version 1.2 instead.
.Pp
This document first appeared in
.Ox 2.5 .
@


1.64
log
@Remove the section about generating DSA keys for webservers etc from the ssl(8)
instructions. ok benno@@ beck@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.63 2016/02/08 19:29:58 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: February 8 2016 $
d95 10
@


1.63
log
@sslv3 has been removed;

prompted by a mail from jiri navratil
help/ok sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.62 2014/11/22 18:06:35 deraadt Exp $
d26 1
a26 1
.Dd $Mdocdate: November 22 2014 $
a114 32
.Sh GENERATING DSA SERVER CERTIFICATES
Generating a DSA certificate involves several steps.
First, generate parameters for DSA keys.
The following command will generate 1024-bit keys:
.Bd -literal -offset indent
# openssl dsaparam 1024 -out dsa1024.pem
.Ed
.Pp
Once you have the DSA parameters generated, you can generate a
CSR and unencrypted private key using the command:
.Bd -literal -offset indent
# openssl req -nodes -newkey dsa:dsa1024.pem \e
  -out /etc/ssl/dsacert.csr -keyout /etc/ssl/private/dsakey.pem
.Ed
.Pp
To generate an encrypted private key, you would use:
.Bd -literal -offset indent
# openssl req -newkey dsa:dsa1024.pem \e
  -out /etc/ssl/dsacert.csr -keyout /etc/ssl/private/dsakey.pem
.Ed
.Pp
This
.Pa server.csr
file can then be given to a CA who will sign the key.
.Pp
You can also sign the key yourself, using the command:
.Bd -literal -offset indent
# openssl x509 -sha256 -req -days 365 \e
  -in /etc/ssl/private/dsacert.csr \e
  -signkey /etc/ssl/private/dsacert.key \e
  -out /etc/ssl/dsacert.crt
.Ed
@


1.62
log
@Delete hogwash about the way randomization was done a long time ago.
these days, we are in control of the situation it is just Done Right.
ok miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.61 2014/10/16 02:51:26 lteo Exp $
d26 1
a26 1
.Dd $Mdocdate: October 16 2014 $
d38 2
a39 3
The SSL libraries (libssl and libcrypto) implement the SSL version 3
and TLS version 1 protocols.
SSL and TLS are most commonly used by the HTTPS protocol for encrypted
d48 1
a48 1
The most common uses of SSL/TLS will require you to generate a server
@


1.61
log
@Document that SSLv3 has been disabled.  Also mention that SSLv2 was
removed and not just disabled in OpenBSD 5.2 (pointed out by brad@@).

feedback from brad@@ jsing@@ sobrado@@
earlier version ok jmc@@
ok jsing@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.60 2014/09/18 19:17:02 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: September 18 2014 $
a47 27
.Sh RANDOM DATA SOURCE
.Ox
uses the
.Xr arandom 4
device as the default source for random data when needed by the routines in
libcrypto and libssl.
If the
.Xr arandom 4
device does not exist or is not readable, many of the routines will fail.
This is most commonly seen by users as the RSA routines failing in
applications such as
.Xr ssh 1
and
.Xr httpd 8 .
.Pp
It is important to remember when using a random data source for certificate
and key generation that the random data source should not be visible by
people who could duplicate the process and come up with the same result.
You should ensure that nobody who you don't trust is in a position to read
the same random data used by you to generate keys and certificates.
The
.Xr arandom 4
device ensures that no two users on the same machine will see the same
data.
See
.Xr openssl 1
for more information on how to use different sources of random data.
a185 1
.Xr arandom 4 ,
@


1.60
log
@the sendmail section is no longer relevant;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.59 2014/08/26 21:48:08 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: August 26 2014 $
d271 5
a275 3
Due to multiple flaws in the protocol, SSL version 2 was disabled in
.Ox 5.2 .
Users and programs should use SSL version 3 or TLS version 1 instead.
@


1.59
log
@sort SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.58 2014/08/26 19:33:48 robert Exp $
a208 14
.Sh USING SSL/TLS WITH SENDMAIL
By default,
.Xr sendmail 8
expects both the keys and certificates to reside in
.Pa /etc/mail/certs ,
not in the
.Pa /etc/ssl
directory.
The default paths may be overridden in the sendmail.cf file.
See
.Xr starttls 8
for information on configuring
.Xr sendmail 8
to use SSL/TLS.
d217 1
a217 1
.Xr sendmail 8 ,
@


1.58
log
@usr.sbin
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.57 2014/04/12 16:08:10 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: April 12 2014 $
d228 1
a229 1
.Xr httpd 8 ,
@


1.57
log
@word fix;
From: Mike Small
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.56 2014/03/13 10:12:11 florian Exp $
d26 1
a26 1
.Dd $Mdocdate: March 13 2014 $
d42 1
a42 1
.Xr nginx 8 .
d61 1
a61 1
.Xr nginx 8 .
d93 1
a93 1
.Xr nginx 8
d130 1
a130 1
.Xr nginx 8
d142 1
a142 1
.Xr nginx 8 .
d229 1
a229 1
.Xr nginx 8 ,
@


1.56
log
@Unhook httpd(8) from build; man page bits
tweaks jmc@@
OK krw@@, gilles@@, lteo@@, tedu@@, todd@@, benno@@, sthen@@
"The time is right." and much help getting the show on the
road deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.55 2013/03/14 04:03:47 lteo Exp $
d26 1
a26 1
.Dd $Mdocdate: March 14 2013 $
d278 1
a278 1
libcrypto libraries which allowed users to enable full function without
@


1.55
log
@Remove SSLv2 references from the intro(3) and ssl(8) man pages, and
mention in ssl(8) that SSLv2 was disabled in OpenBSD 5.2.

feedback/ok jmc sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.54 2013/03/07 13:19:54 sthen Exp $
d26 1
a26 1
.Dd $Mdocdate: March 7 2013 $
d42 1
a42 1
.Xr httpd 8 .
d61 1
a61 1
.Xr httpd 8 .
d93 1
a93 1
.Xr httpd 8
d130 2
a131 4
.Xr httpd 8
with the
.Ar -DSSL
flag, enabling HTTPS transactions with your machine on port 443.
d142 1
a142 1
.Xr httpd 8 .
a227 1
.Xr httpd 8 ,
d229 1
@


1.54
log
@Add ECDSA instructions to ssl(8), with this and DSA's method now generating
a CSR first, then a self-signed cert as a separate step, using the -days and
-sha256 options in the example. Syncs with style used for RSA here/faq and
saves hair pulling if you actually want a CSR and don't notice the "-x509".
Tweaks from jmc@@, stsp and jung like the separate use of -days.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.53 2012/11/27 01:02:07 djm Exp $
d26 1
a26 1
.Dd $Mdocdate: November 27 2012 $
d38 4
a41 4
The SSL libraries (libssl and libcrypto) implement the SSL version 2,
SSL version 3, and TLS version 1 protocols.
SSL version 2 and 3 are most commonly used by the HTTPS protocol for
encrypted web transactions, as can be done with
d286 4
@


1.53
log
@this advice was arguable back in 2003 but is spurious now;
ok mikeb deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.52 2012/11/06 04:16:10 lteo Exp $
d26 1
a26 1
.Dd $Mdocdate: November 6 2012 $
d153 2
a154 2
Once you have the DSA parameters generated, you can generate a certificate
and unencrypted private key using the command:
d156 2
a157 2
# openssl req -x509 -nodes -newkey dsa:dsa1024.pem \e
  -out /etc/ssl/dsacert.pem -keyout /etc/ssl/private/dsakey.pem
d162 48
a209 2
# openssl req -x509 -newkey dsa:dsa1024.pem \e
  -out /etc/ssl/dsacert.pem -keyout /etc/ssl/private/dsakey.pem
@


1.52
log
@Make a few formatting fixes:
- Remove unnecessary .Ar macros.
- Change "https" to "HTTPS" to be consistent with other man pages.
- Add "(CSR)" to the first instance of "Certificate Signing Request."
- Convert one .Ar to .Em in the HISTORY section since the intent of that
  .Ar was to emphasize a point.
- Fix the punctuation in one sentence.

feedback/ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.51 2012/06/19 02:34:53 lteo Exp $
d26 1
a26 1
.Dd $Mdocdate: June 19 2012 $
a242 2
.Sh BUGS
The world needs more DSA capable SSL and SSH services.
@


1.51
log
@Fix punctuation and merge two paragraphs into one to make it read
better.

feedback/ok jmc, ok haesbaert henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.50 2012/05/27 07:04:52 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 27 2012 $
d38 4
a41 13
The SSL libraries (libssl and libcrypto) implement the
.Ar SSL version 2 ,
.Ar SSL version 3 ,
and
.Ar TLS version 1
protocols.
.Ar SSL version 2
and
.Ar 3
are most
commonly used by the
.Ar https
protocol for encrypted web transactions, as can be done with
d57 2
a58 3
This is most commonly seen by users as the
.Ar RSA
routines failing in applications such as
d76 3
a78 4
The most common uses of
.Ar SSL/TLS
will require you to generate a server certificate, which is provided by your
host as evidence of its identity when clients make new connections.
d85 2
a86 4
Private keys can be encrypted using
.Ar AES
and a passphrase to protect their integrity should the encrypted file
be disclosed.
d92 1
a92 3
To support
.Ar https
transactions in
d94 1
a94 3
you will need to generate an
.Ar RSA
certificate.
d105 2
a106 6
The next step is to generate a
.Ar Certificate Signing Request
which is used
to get a
.Ar Certificate Authority (CA)
to sign your certificate.
d115 1
a115 3
file can then be given to a
.Ar Certificate Authority
who will sign the key.
d133 1
a133 3
flag, enabling
.Ar https
transactions with your machine on port 443.
d146 2
a147 6
Generating a
.Ar DSA
certificate involves several steps.
First, generate parameters for
.Ar DSA
keys.
d153 1
a153 3
Once you have the
.Ar DSA
parameters generated, you can generate a certificate
d178 1
a178 2
to use
.Ar SSL/TLS .
d194 1
a194 1
.Ar into
d196 6
a201 12
.Ar RSA Data Security Inc (RSADSI)
held the patent on the
.Ar RSA
algorithm in the United States, and because of this, free
implementations of
.Ar RSA
were difficult to distribute and propagate.
(The
.Ar RSA
patent was probably more effective at preventing the adoption of
widespread international integrated crypto than the much maligned
ITAR restrictions were).
d204 1
a204 3
these libraries shipped without the
.Ar RSA
algorithm -- all such functions
d206 6
a211 17
Since
.Ar RSA
is a key component of
.Ar SSL version 2 ,
this
meant that
.Ar SSL version 2
would not work at all.
.Ar SSL version 3
and
.Ar TLS version 1
allow for the exchange of keys via mechanisms that do not
involve
.Ar RSA ,
and would work with the shipped version of the libraries,
assuming both ends could agree to a cipher suite and key exchange that
did not involve RSA.
d216 2
a217 3
For instance, another typical alternative is
.Ar DSA ,
which is not encumbered by commercial patents (and lawyers).
d219 12
a230 23
The
.Ar https
protocol used by web browsers (in modern incarnations)
allows for the use of
.Ar SSL version 3
and
.Ar TLS version 1 ,
which in theory allows for encrypted web transactions without using
.Ar RSA .
Unfortunately, all the popular web browsers
buy their cryptographic code from
.Ar RSADSI .
Predictably,
.Ar RSADSI
would prefer that web browsers used their patented algorithm, and thus
their libraries do not implement any
.Ar non-RSA
cipher and keying combination.
The result of this was that while the
.Ar https
protocol allowed for many cipher suites that did not require the use
of patented algorithms, it was very difficult to use these with the
popular commercially available software.
d233 3
a235 5
allowed users to download
.Ar RSA
enabled versions of the shared libssl and libcrypto libraries
which allowed users to enable full function without recompiling
the applications.
d244 1
a244 7
The world needs more
.Ar DSA
capable
.Ar SSL
and
.Ar SSH
services.
@


1.50
log
@revert to recommending a key size of 2048, as requested by naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.49 2012/05/25 19:25:38 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 25 2012 $
d69 1
a69 1
.Xr ssh 1 ,
d169 1
a169 1
.Xr httpd 8
d174 1
a174 1
First, you generate a
d176 2
a177 1
parameter set with a command like the following:
a180 8
.Pp
Would generate
.Ar DSA
parameters for 1024 bit
.Ar DSA
keys, and save them to the
file
.Pa dsa1024.pem .
@


1.49
log
@recommend rsa4096 and sha256; from Nicolai
ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.48 2011/09/29 17:57:08 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: September 29 2011 $
d113 1
a113 1
# openssl genrsa -out /etc/ssl/private/server.key 4096
d119 1
a119 1
# openssl genrsa -aes256 -out /etc/ssl/private/server.key 4096
@


1.48
log
@ssl.8: Certifying Authority -> Certificate Authority
isakmpd.8: rsa:1024 -> rsa:2048 (ok markus)
all: X509 -> X.509

from Lawrence Teo
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.47 2011/09/07 09:30:15 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: September 7 2011 $
d113 1
a113 1
# openssl genrsa -out /etc/ssl/private/server.key 2048
d119 1
a119 1
# openssl genrsa -aes256 -out /etc/ssl/private/server.key 2048
d142 4
a145 2
# openssl x509 -req -days 365 -in /etc/ssl/private/server.csr \e
  -signkey /etc/ssl/private/server.key -out /etc/ssl/server.crt
@


1.47
log
@- update key size and alg recommendations; from Lawrence Teo
- whilst here, knock out useless Pp in openssl.1

ok djm markus
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.46 2010/03/26 19:30:40 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: March 26 2010 $
d126 1
a126 1
.Ar Certifying Authority (CA)
d136 2
a137 2
file can then be given to
.Ar Certifying Authority
d161 2
a162 2
signed by another Certifying Authority.
Once your Certifying Authority returns the signed certificate to you,
d165 1
a165 1
with the certificate signed by your Certifying Authority, and then
@


1.46
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.45 2008/12/16 17:40:04 espie Exp $
d26 1
a26 1
.Dd $Mdocdate: December 16 2008 $
d97 1
a97 1
.Ar 3DES
d113 1
a113 1
# openssl genrsa -out /etc/ssl/private/server.key 1024
d119 1
a119 1
# openssl genrsa -des3 -out /etc/ssl/private/server.key 1024
@


1.45
log
@reorder so that web certificates are more obvious.

Avoid the classical noob problem: read half the manpage, figure out
how to build a DSA certificate, then realize it's not what you need.
historically, RSA was patented, and so it made sense to put DSA first.
But the patent expired a few years ago...

okay millert@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.44 2007/05/31 19:19:59 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 31 2007 $
d130 1
a130 1
# openssl req -new -key /etc/ssl/private/server.key \\
d142 1
a142 1
# openssl x509 -req -days 365 -in /etc/ssl/private/server.csr \\
d192 1
a192 1
# openssl req -x509 -nodes -newkey dsa:dsa1024.pem \\
d198 1
a198 1
# openssl req -x509 -newkey dsa:dsa1024.pem \\
@


1.44
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.43 2003/12/05 07:48:19 beck Exp $
d26 1
a26 1
.Dd $Mdocdate$
a103 33
.Sh GENERATING DSA SERVER CERTIFICATES
Generating a
.Ar DSA
certificate involves several steps.
First, you generate a
.Ar DSA
parameter set with a command like the following:
.Bd -literal -offset indent
# openssl dsaparam 1024 -out dsa1024.pem
.Ed
.Pp
Would generate
.Ar DSA
parameters for 1024 bit
.Ar DSA
keys, and save them to the
file
.Pa dsa1024.pem .
.Pp
Once you have the
.Ar DSA
parameters generated, you can generate a certificate
and unencrypted private key using the command:
.Bd -literal -offset indent
# openssl req -x509 -nodes -newkey dsa:dsa1024.pem \\
  -out /etc/ssl/dsacert.pem -keyout /etc/ssl/private/dsakey.pem
.Ed
.Pp
To generate an encrypted private key, you would use:
.Bd -literal -offset indent
# openssl req -x509 -newkey dsa:dsa1024.pem \\
  -out /etc/ssl/dsacert.pem -keyout /etc/ssl/private/dsakey.pem
.Ed
d168 33
@


1.43
log
@It used to be a good thing not to send people to Verisign. now this
is just wrong. Damn wrong.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.42 2003/06/06 19:28:06 jmc Exp $
d26 1
a26 1
.Dd September 19, 2001
@


1.42
log
@- section reorder
- macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.41 2003/02/26 15:05:07 david Exp $
a171 6
One such CA is
.Ar Thawte Certification
which you can reach at
.Ar http://www.thawte.com/ .
Thawte can currently sign RSA keys for you.
A procedure is being worked out to allow for DSA keys.
@


1.41
log
@start new sentence on a new line
ok mpech@@
@
text
@d1 2
a2 2
.\"	$OpenBSD: ssl.8,v 1.40 2003/02/15 11:45:53 deraadt Exp $
.\" 
d5 1
a5 1
.\" 
d14 1
a14 1
.\" 
d25 1
a25 1
.\" 
d175 1
a175 1
.Ar http://www.thawte.com/.
d195 1
a195 1
transactions with your machine on port 443. 
d205 1
a205 1
restarting 
a221 8
.Sh BUGS
The world needs more
.Ar DSA
capable
.Ar SSL
and
.Ar SSH
services.
d242 1
a242 1
algorithm in the United States, and because of this, free 
d296 1
a296 1
would prefer that web browsers used their patented algorithm, and thus 
d319 8
@


1.40
log
@copyright beck and me
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.39 2003/02/13 08:23:39 jmc Exp $
d99 3
a101 3
be disclosed. However, it is
important to note that encrypted server keys mean that the passphrase
needs to be typed in every time the server is started.
@


1.39
log
@typos;

setextattr(8): example markus@@
spamd(8): someone else found some of these on bugs/misc, but for the life
	  of me i can't find out who
pf.conf(5): from openbsd@@davidkrause.com
raidctl(8): from ian@@darwinsys.com
@
text
@d1 25
a25 2
.\"	$OpenBSD: ssl.8,v 1.38 2002/12/15 19:26:54 margarida Exp $
.\"
@


1.38
log
@Remove pkg_add(1) .Xr

fgsch@@ henning@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.37 2002/01/22 07:08:56 jsyn Exp $
d76 1
a76 1
be disclosed, However it is
@


1.37
log
@grammar fixes; ok ericj@@, -mdoc ok mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.36 2001/10/05 14:45:54 mpech Exp $
a207 1
.Xr pkg_add 1 ,
@


1.36
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.35 2001/09/19 19:42:00 millert Exp $
d220 1
a220 1
Prior to Sept 21, 2000
d222 1
a222 1
protocols everywhere in the world, as such shipment would include shipping
d224 1
a224 1
the United States, thus causing problems.
d228 2
a229 2
algorithm in the United States.
Because of this, free implementations of
d234 1
a234 1
patent was probably more effective at preventing the late adoption of
d264 1
a264 2
For instance, another typical alternative
is
d270 1
a270 1
protocol used by web browsers (in modern incarnations),
d277 1
a277 1
Unfortunately all the popular web browsers
d282 2
a283 2
would prefer if web browsers used their patented algorithm, and thus their
libraries do not implement any
d289 1
a289 1
of patented algorithms, It was very difficult to use these with the
@


1.35
log
@mention that sendmail can do SSL/TLS and reference starttls.8
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.34 2001/08/17 11:13:58 mpech Exp $
d177 3
a179 3
signed by another Certifying Authority.  Once your Certifying
Authority returns the signed certificate to you, you can switch to
using the new certificate by replacing the self-signed
@


1.34
log
@o) {Open,Net,Free}BSD -> .{O,N,F}x;
o) "start sentence on new line" issues;
o) minimal -mdoc improvements;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.33 2001/08/03 15:21:17 mpech Exp $
d3 1
a3 1
.Dd March 15, 1999
d184 15
a207 4
.Xr httpd 8 ,
.Xr ssh 1 ,
.Xr sshd 8 ,
.Xr isakmpd 8 ,
d210 2
d213 6
a218 2
.Xr ssl 3 ,
.Xr rc 8
@


1.33
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ssl.8,v 1.32 2000/12/22 16:54:38 avsm Exp $
d35 2
a36 1
OpenBSD uses the
d220 3
a222 1
Prior to OpenBSD 2.8, these libraries shipped without the
d275 3
a277 1
Prior to version 2.8, OpenBSD allowed users to download
@


1.32
log
@smite typos, and add RCS tags where missing; aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a183 1
.Pp
@


1.31
log
@Remove final references to extra RSA libs
@
text
@d1 2
d29 1
a29 1
The libcrypto library is also used by various progams such as
d204 1
a204 1
there were problems shipping fully fuctional implementations of these
d243 1
a243 1
uses RSA, so it was similarily encumbered.
@


1.30
log
@various Xr fixes; nordin@@cse.ogi.edu
@
text
@d112 5
a116 7
To generate
.Ar RSA
certificates, you will first need to upgrade your
shared libraries to support
.Ar RSA
as described above.
Once that is done, you can generate
d118 1
a118 5
certificates that will be usable by
.Xr httpd 8
for
.Ar https
transactions.
a189 3
.Pp
According to "Applied Cryptography: Schneier"
the RSA patent will expire September 20th, 2000.
@


1.29
log
@Add the punchline to the procedure for making web server certificates
to indicate that people should test their server with a self signed
certificate, then simply replace the certificate with a real one to go
production.
@
text
@d99 1
a99 1
paramters generated, you can generate a certificate
d206 1
a206 1
.Xr arandom 4,
@


1.28
log
@Remove unwanted trailing whitespace.
@
text
@d175 12
a186 1
transactions with your machine on port 443.
@


1.27
log
@some silly error repairs
@
text
@d25 1
a25 1
protocol for encrypted web transactions, as can be done with 
d27 1
a27 1
The libcrypto library is also used by various progams such as 
d33 1
a33 1
OpenBSD uses the 
d42 1
a42 1
routines failing in applications such as 
d44 2
a45 2
and 
.Xr httpd 8 . 
d53 2
a54 2
.Xr arandom 4 
device ensures that no two users on the same machine will see the same 
d58 1
a58 1
for more information on how to use different sources of random data. 
d182 1
a182 1
and 
d203 1
a203 1
the United States, thus causing problems. 
d210 1
a210 1
were difficult to distribute and propagate. 
d216 1
a216 1
Prior to OpenBSD 2.8, these libraries shipped without the 
d269 2
a270 2
Prior to version 2.8, OpenBSD allowed users to download 
.Ar RSA 
@


1.26
log
@Change to past tense with a large Hysterical section.
@
text
@d9 3
a11 2
the OpenSSL libssl and libcrypto libraries. This document
is intended as an overview of what the libraries do, and what uses them.
d36 2
a37 1
libcrypto and libssl. If the
d51 2
a52 1
the same random data used by you to generate keys and certificates. The
d55 2
a56 1
data. See
d63 2
a64 2
host as evidence of its identity when clients make new connections. The
certificates reside in the
d75 3
a77 3
needs to be typed in every time the server is started. If a passphrase
is not used, you will need to be absolutely sure your key file
is kept secure.
d81 2
a82 2
certificate involves several steps. First, you generate
a
d117 2
a118 2
as described above. Once that is done,
you can generate
d140 2
a141 2
to sign your certificate. To do this
use the command:
d151 2
a152 1
who will sign the key. One such CA is
d156 2
a157 2
Thawte can currently sign RSA keys for you. A procedure is being worked out
to allow for DSA keys.
d199 3
a201 3
 Prior to Sept 21, 2000
There were problems shipping fully fuctional implementations of these
protocols anywhere in the world, as such shipment would include shipping
d207 2
a208 2
algorithm in the United States. Because of this, free
implementations of
d213 4
a216 4
patent was probably more effective at preventing the widespread
international adoption of integrated crypto than the much maligned
ITAR restrictions were). Prior to OpenBSD 2.8, these libraries 
shipped without the 
d219 2
a220 1
were stubbed to fail. Since
d237 3
d263 2
a264 1
cipher and keying combination. The result of this was that while the
d268 2
a269 2
popular commercially available software. Prior to version 2.8, 
OpenBSD allowed users to download 
d273 5
a277 3
the applications. This method is now no longer needed, as the fully
functional libraries ship with the system. However, this entire
debacle is worth remembering when choosing software and vendors.
a280 1

@


1.25
log
@clean
@
text
@d10 1
a10 2
is intended as an overview of what the libraries do, what uses them,
and the slightly unorthodox way of upgrading the library.
d24 5
a28 31
protocol for encrypted web transactions.
Due to patent issues in the United States, there are
problems with shipping a fully functional implementation of these
protocols anywhere in the world, as such shipment would include shipping
.Ar into
the United States, thus causing problems.
.Sh PATENTS AND THE RSA ALGORITHM
.Ar RSA Data Security Inc (RSADSI)
holds a patent on the
.Ar RSA
algorithm in the United States. Because of this, free
implementations of
.Ar RSA
are difficult to distribute and propagate.
(The
.Ar RSA
patent is probably more effective at preventing the widespread
international adoption of integrated crypto than the much maligned
ITAR restrictions are). The versions of libssl and libcrypto
provided in the stock distribution do not contain the
.Ar RSA
algorithm -- all such functions
are stubbed to fail. Since
.Ar RSA
is a key component of
.Ar SSL version 2 ,
this
means that
.Ar SSL version 2
will not work at all.
.Ar SSL version 3
d30 1
a30 64
.Ar TLS version 1
allow for the exchange of keys via mechanisms that do not
involve
.Ar RSA ,
and will work with the shipped version of the libraries,
assuming both ends can agree to a cipher suite and key exchange that
does not involve RSA.
.Pp
For instance, another typical alternative
is
.Ar DSA ,
which is not encumbered by commercial patents (and lawyers).
.Pp
The
.Ar https
protocol used by web browsers (in modern incarnations),
allows for the use of
.Ar SSL version 3
and
.Ar TLS version 1 ,
which in theory allows for encrypted web transactions without using
.Ar RSA .
Unfortunately all the popular web browsers
buy their cryptographic code from
.Ar RSADSI .
Predictably,
.Ar RSADSI
would prefer if web browsers used their patented algorithm, and thus their
libraries do not implement any
.Ar non-RSA
cipher and keying combination.
.Sh HOW TO ADD RSA-CAPABLE LIBRARIES
Fortunately, not all of the world lives in the United
States.
Additionally
.Ar RSA inc.
permits non-licensed use of the algorithm by certain parties
(i.e., non-commercial use).
If you are permitted to use the
.Ar RSA
algorithm, you can enable the full function of the
.Nm
libraries by updating the shared libraries on your system,
using a command like:
.Bd -literal -offset xxx
# pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/2.7/packages/i386/ssl27.tgz
.Ed

or
.Bd -literal -offset xxx
# pkg_add ftp://ftp.usa.openbsd.org/pub/OpenBSD/2.7/packages/i386/sslUSA27.tgz
.Ed
.Pp
(Obviously, replace
.Ar 2.7
with the current release, and
.Ar i386
with your architecture name (see
.Xr arch 1 ).
See
.Xr afterboot 8
for more details on adding RSA capable libraries.

Once your ssl libraries are updated, the ssl libraries will be fully functional.
d43 1
a43 4
.Xr httpd 8 ,
even after the 
.Ar RSA
capable versions of the library have been added to the system.
d49 4
a52 1
the same random data used by you to generate keys and certificates. See
a172 8
.Nm openssl
and
.Nm libssl
have nearly nonexistent documentation.
Most documentation consists of examples and README files in
the sources.  Mail beck@@openbsd.org to assist or
encourage him to finish the job.
.Pp
d194 73
d269 1
@


1.24
log
@Add a section talking about random data sources, /dev/arandom, and what
happens when it's not there.
@
text
@a280 3

.Pp
Patents can be renewed.
@


1.23
log
@2.7
@
text
@d121 24
d291 1
@


1.22
log
@Xr most important ssl pod2man pages
@
text
@d102 1
a102 1
# pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/2.6/packages/i386/ssl26.tgz
d107 1
a107 1
# pkg_add ftp://ftp.usa.openbsd.org/pub/OpenBSD/2.6/packages/i386/sslUSA26.tgz
d111 1
a111 1
.Ar 2.6
@


1.21
log
@more Xr
@
text
@d266 2
@


1.20
log
@typo
@
text
@d263 3
a265 1
.Xr sshd 1 ,
@


1.19
log
@DSA is patented, but the patent is in the public domain.
@
text
@d115 2
a116 1
.Xr arch 1 ). see 
@


1.18
log
@ie. -> i.e.,
@
text
@d67 2
a68 2
.Ar DSA
-- which is patent-free.
@


1.17
log
@must get sslUSA from usa ftp site
@
text
@d94 1
a94 1
(ie. non-commercial use).
@


1.16
log
@use package location for pkg_add, not link in main dir.
@
text
@d107 1
a107 1
# pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/2.6/packages/i386/sslUSA26.tgz
@


1.15
log
@add bit for sslUSA26 vaporware and refer to afterboot(8)
@
text
@d102 1
a102 1
# pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/2.6/i386/ssl26.tar.gz
d107 1
a107 1
# pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/2.6/i386/sslUSA26.tar.gz
@


1.14
log
@change ssl package name
@
text
@d92 1
a92 1
.Ar RSADSI
d104 5
d115 4
a118 1
.Xr arch 1 ).
@


1.13
log
@more
@
text
@d102 1
a102 1
# pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/2.6/i386/libssl26.tar.gz
@


1.12
log
@2.5->2.6 (thanks markus)
@
text
@d244 5
a248 1
services, 
@


1.11
log
@Oops. I meant to do this.
@
text
@d106 1
a106 1
.Ar 2.5
@


1.10
log
@Updated for openssl, Yet another thing I forgot to commit
@
text
@d1 13
a13 1
raries (libssl and libcrypto) implement the
d102 1
a102 1
# pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/2.6/packages/i386/libssl-1.1.tgz
d214 41
a254 1
  -signkey 
@


1.9
log
@Typo fixes.
@
text
@d1 1
a1 13
.Dd March 15, 1999
.Dt SSL 8
.Os
.Sh NAME
.Nm ssl
.Nd details for libssl and libcrypto
.Sh DESCRIPTION
This document describes some of the issues relating to the use of
Eric Young's libssl and libcrypto libraries. This document
is intended as an overview of what the libraries do, what uses them,
and the slightly unorthodox way of upgrading the library.
.Pp
The SSL libraries (libssl and libcrypto) implement the
d90 1
a90 1
# pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/2.5/packages/i386/libssl-1.1.tgz
d127 1
a127 1
# ssleay dsaparam 1024 -out dsa1024.pem
d143 1
a143 1
# ssleay req -x509 -nodes -newkey dsa:dsa1024.pem \\
d149 1
a149 1
# ssleay req -x509 -newkey dsa:dsa1024.pem \\
d167 1
a167 1
# ssleay genrsa -out /etc/ssl/private/server.key 1024
d173 1
a173 1
# ssleay genrsa -des3 -out /etc/ssl/private/server.key 1024
d184 1
a184 1
# ssleay req -new -key /etc/ssl/private/server.key \\
d201 2
a202 38
# ssleay x509 -req -days 365 -in /etc/ssl/private/server.csr \\
  -signkey /etc/ssl/private/server.key -out /etc/ssl/server.crt
.Ed
.Pp
With
.Pa /etc/ssl/server.crt
and
.Pa /etc/ssl/private/server.key
in place, you should be able to start
.Xr httpd 8
with the
.Ar -DSSL
flag, enabling
.Ar https
transactions with your machine on port 443.
.Sh BUGS
.Pp
.Nm ssleay
and
.Nm libssl
have nearly nonexistent documentation.
Most documentation consists of examples and README files in
the sources.  Mail beck@@openbsd.org to assist or
encourage him to finish the job.
.Pp
The world needs more
.Ar DSA
capable
.Ar SSL
services.
.Pp
Patents can be renewed.
.Sh SEE ALSO
.Xr httpd 8 ,
.Xr rc 8
.Sh HISTORY
This document first appeared in
.Ox 2.5 .
@


1.8
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d38 1
a38 1
are difficult to distribute and propogate.
@


1.7
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d8 1
a8 1
This document describes some of the issues relating to the use of 
d10 1
a10 1
is intended as an overview of what the libraries do, what uses them, 
d26 1
a26 1
Due to patent issues in the United States, there are 
d72 1
a72 1
protocol used by web browsers (in modern incarnations), 
d118 2
a119 2
.Pa /etc/ssl 
directory, with the keys in the 
d127 1
a127 1
important to note that encrypted server keys mean that the passphrase 
d173 1
a173 1
certificates that will be usable by 
d177 1
a177 1
transactions. 
d187 1
a187 1
.Pp 
d204 1
a204 1
who will sign the key. One such CA is 
d217 1
a217 1
With 
d219 1
a219 1
and 
d221 1
a221 1
in place, you should be able to start 
d231 1
a231 1
and 
d237 1
a237 1
.Pp 
@


1.6
log
@grammar police: do not hyphenate compound words that act as adjectives if the
first word ends in -ly

i.e., fully-qualified, newly-created, globally-visible, etc. are wrong
@
text
@d3 1
a3 1
.Os OpenBSD
@


1.5
log
@Fix problem with dsakey generation command for encrypted key, mention thawte.
@
text
@d27 1
a27 1
problems with shipping a fully-functional implementation of these
@


1.4
log
@more scrubbing
@
text
@d156 1
a156 1
  -out /etc/dsacert.pem -keyout /etc/ssl/private/dsakey.pem
d161 2
a162 2
# ssleay req -x509 -nodes -newkey dsa:dsa1024.pem \\
  -out /etc/dsacert.pem -keyout /etc/ssl/private/dsakey.pem
d204 7
a210 1
who will sign the key.
@


1.3
log
@oops
@
text
@d9 1
a9 1
Eric Young's libssl and libcrypto libraries in OpenBSD. This document
d88 1
a88 1
.Sh HOW TO ADD RSA LIBRARIES TO OPENBSD
@


1.2
log
@spelling
@
text
@d189 1
a189 1
.Ar Certifigate Signing Request
@


1.1
log
@do not break things
@
text
@d189 1
a189 1
.Ar Certifiate Signing Request
@

