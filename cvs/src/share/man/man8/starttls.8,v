head	1.22;
access;
symbols
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.10
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.8
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.4
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.16.0.16
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.14
	OPENBSD_5_0:1.16.0.12
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.10
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.8
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.4
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.6
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.8
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.6
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.4
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@.\" @;


1.22
date	2015.12.24.16.54.37;	author mmcc;	state Exp;
branches;
next	1.21;
commitid	52DQs4TJie3OmFZq;

1.21
date	2015.08.14.14.03.27;	author millert;	state Exp;
branches;
next	1.20;
commitid	GW6SxCmHaqXWp4Gm;

1.20
date	2014.10.01.14.09.28;	author jmc;	state Exp;
branches;
next	1.19;
commitid	SN2JZ4qvRekN0CoJ;

1.19
date	2012.10.16.18.14.15;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2012.09.26.17.34.38;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2012.08.15.19.07.30;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.23.11.03.41;	author grunk;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.59;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2005.07.04.08.44.37;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2005.04.30.23.45.42;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.21.15.15.36;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.01.13.36.49;	author grange;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.11.05.37.55;	author david;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.10.08.30.36;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.06.19.28.06;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.14.18.01.24;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.23.16.11.59;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.21.16.29.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.14.14.48.13;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.20.21.18.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.11.22.14.13;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.19.14.08.37;	author millert;	state Exp;
branches;
next	;


desc
@@


1.22
log
@more e-mail -> email
@
text
@.\" $OpenBSD: starttls.8,v 1.21 2015/08/14 14:03:27 millert Exp $
.\"
.\" Copyright (c) 2001 Jose Nazario <jose@@monkey.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: August 14 2015 $
.Dt STARTTLS 8
.Os
.Sh NAME
.Nm starttls
.Nd ESMTP over TLS/SSL
.Sh DESCRIPTION
STARTTLS is an ESMTP option, defined in RFC 3207, which is used to conduct
ESMTP transactions over TLS circuits.
This is used to increase the security of mail server transactions.
.Pp
STARTTLS allows for the combination of several security solutions for MTA
(mail transport agent) level services through the TLS suite.
These security features include:
.Bl -tag -width Ds
.It Confidentiality
Encryption is used to protect data from passive monitoring.
An attacker would have to recover the encryption key used to
decode the transmitted data.
.It Integrity
Hash algorithms are used to ensure the integrity of the
transmitted data, and alternatively the timestamp, protecting against a
replay attack.
This protects data from modification in transit.
.It Authentication
The use of public key encryption allows for the strong authentication of
either, or both, communicating parties.
This can be used to allow for select features, such as relaying,
to be controlled more securely.
.El
.Pp
A new ESMTP option, STARTTLS, has been added.
This is presented by the server when an ESMTP session is initiated.
The client then begins the TLS portion of the ESMTP session by issuing
the command
.Dq STARTTLS .
The remaining portion of the ESMTP session occurs over a TLS channel.
.Ss Creating a private key and certificate for an MTA
This example assumes you are creating your own self-signed certificates
for use with
.Xr smtpd 8
and STARTTLS.
If you have an existing private key and you simply wish to generate
a new certificate (for example, if your old certificate has expired),
see the section entitled
.Sx Creating a certificate with an existing private key .
.Pp
For the purposes of this example the certificates will be stored in
.Pa /etc/ssl ,
though it is possible to use a different directory if needed.
.Pp
Next, you must generate an
.Ar RSA
private key:
.Pp
.Dl # openssl genrsa -out /etc/ssl/private/mail.example.com.key 4096
.Pp
This would generate a 4096-bit
.Ar RSA
key stored in the file
.Pa mail.example.com.key .
.Pp
Once you have generated the
.Ar RSA
key, you can generate a certificate from it using the command:
.Bd -literal -offset indent
# openssl req -x509 -new -key /etc/ssl/private/mail.example.com.key \e
  -out /etc/ssl/mail.example.com.crt -days 365
.Ed
.Pp
You may adjust the lifetime of the certificate via the
.Fl days
parameter (one year in this example).
.Pp
You can verify that the newly-generated certificate has correct information
with the following command:
.Pp
.Dl # openssl x509 -in /etc/ssl/mail.example.com.crt -text
.Pp
If you don't intend to use TLS for authentication (and if you are using
self-signed certificates you probably don't) you can simply link
your new certificate to
.Pa CAcert.pem .
.Pp
.Dl # ln -s /etc/ssl/mail.example.com.crt /etc/ssl/CAcert.pem
.Pp
If, on the other hand, you intend to use TLS for authentication
you should install your certificate authority bundle as
.Pa /etc/ssl/CAcert.pem .
.Pp
Because the private key files are unencrypted,
MTAs
can be picky about using tight permissions on those files.
The certificate directory and the files therein should be
readable and writable only by the owner (root).
A simple way to ensure this is to run the following:
.Pp
.Dl # chmod -R go-rwx /etc/ssl/private
.Ss Creating a certificate with an existing private key
This example assumes you already have an existing private key,
.Pa /etc/ssl/private/mail.example.com.key .
You can generate a new certificate based on this key using the command:
.Bd -literal -offset indent
# openssl req -x509 -new -key /etc/ssl/private/mail.example.com.key \e
  -out /etc/ssl/mail.example.com.crt -days 365
# chmod 600 /etc/ssl/mycert.pem
.Ed
.Pp
You may adjust the lifetime of the certificate via the
.Fl days
parameter (one year in this example).
.Pp
After having installed the certificates
the mail server needs to be configured to accept TLS sessions
and use the key and certificate.
For
.Xr smtpd 8 ,
it's as simple as adding pki configuration to
.Xr smtpd.conf 5 :
.Bd -literal -offset indent
pki mail.example.com certificate "/etc/ssl/mail.example.com.crt"
pki mail.example.com key "/etc/ssl/private/mail.example.com.key"

listen on [...] tls pki mail.example.com auth
.Ed
.Pp
After restarting the mail server, a new option should be presented for ESMTP
transactions, STARTTLS.
You can test this by connecting to the local host and issuing the
.Dq EHLO
command.
.Bd -literal -offset indent
# telnet localhost 25
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 localhost ESMTP OpenSMTPD
EHLO localhost
.Ed
.Pp
After typing
.Em EHLO localhost
you should receive something like the following back.
.Bd -literal -offset indent
250-localhost Hello localhost [127.0.0.1], pleased to meet you
250-8BITMIME
250-ENHANCEDSTATUSCODES
250-SIZE 36700160
250-DSN
250-STARTTLS
250 HELP
.Ed
.Pp
You should see
.Dq STARTTLS
listed along with the other options.
If so, congratulations, the MTA will now use TLS to encrypt your mail
traffic when the remote server supports it.
If not, check
.Pa /var/log/maillog
to see whether the MTA has reported any security problems or other errors.
.Ss Uses for TLS equipped MTAs
The most obvious use of a cryptographically enabled MTA
is for confidentiality of the electronic mail transaction and the
integrity checking provided by the cipher suite.
All traffic between the two mail servers is encrypted, including the
sender and recipient addresses.
TLS also allows for authentication of either or both systems in the transaction.
.Pp
One use of public key cryptography is for strong authentication.
We can use this authentication to selectively relay clients, including
other mail servers and mobile clients like laptops.
However, there have been some problems getting some mail clients to work using
certificate-based authentication.
Note that your clients will have to generate certificates and have them
signed (for trust validation) by a CA (certificate authority) you also trust,
if you configure your server to do client certificate checking.
Two new entries are available for TLS options:
.Bl -tag -width Ds -offset indent
.It VERIFY
contains the status of the level of verification (held in the macro {verify})
.It ENCR
the strength of the encryption (in the macro {cipher_bits})
.El
.Pp
VERIFY can also accept the argument for {cipher_bits}.
Here are a few example entries that illustrate these features, and
the role based granularity as well:
.Pp
Require strong (256-bit) encryption for communication with this server:
.Pp
.Dl TLS_Srv:server1.example.net	ENCR:256
.Pp
For a TLS client,
require verification and a minimum of 128-bit encryption:
.Pp
.Dl TLS_Clt:desktop.example.net VERIFY:128
.Pp
Much more complicated access maps are possible, and error conditions (such
as permanent or temporary, PERM+ or TEMP+) can be set on the basis of
various criteria.
This allows you fine-grained control over the types of connections you
can allow.
.Pp
Note that it is unwise to force all SMTP clients to use TLS, as it is not
yet widespread.
The RFC document notes that publicly referenced SMTP servers, such as the
MX servers for a domain, must not refuse non-TLS connections.
However, restricted access SMTP servers, such as those for a corporate
intranet, can use TLS as an access control mechanism.
.Sh SEE ALSO
.Xr mail 1 ,
.Xr openssl 1 ,
.Xr smtpd 8 ,
.Xr ssl 8
.Sh STANDARDS
.Rs
.%A P. Hoffman
.%D February 2002
.%R RFC 3207
.%T SMTP Service Extension for Secure SMTP over Transport Layer Security
.Re
.Sh CAVEATS
One often forgotten limitation of using TLS on a mail server is the
payload of the mail message and the resulting security there.
Many virus and worm files are now distributed via electronic mail.
While the mail may be encrypted and the servers authenticated, the payload
can still be malicious.
The use of a good content protection program on the desktop is
therefore still of value even with TLS at the MTA level.
.Pp
Because TLS can only authenticate at the server level, true
end-to-end authentication of the mail message cannot be performed with
only the use of STARTLS on the server.
The use of S/MIME or PGP email and trustworthy key hierarchies can guarantee
full confidentiality and integrity of the entire message path.
.Pp
Furthermore, if a mail message traverses more than just the starting and
ending servers, there is no way to control interactions between the intervening
mail servers, which may use non-secure connections.
This introduces a point of vulnerability in the chain.
.Pp
Additionally, SMTP over TLS is not yet widely implemented.
The standard, in fact, doesn't require it, leaving it only as an option, though
specific sites can configure their servers to force it for specific clients.
As such, it is difficult to foresee the widespread use of SMTP using TLS,
despite the fact that the standard is, at the date of this writing,
over two years old.
.Pp
Lastly, interoperability problems can appear between different implementations.
@


1.21
log
@Change examples from DSA to RSA since DSA is starting to be removed
from crypto libraries.  Some smtp servers, notably gmail, now fail
to deliver mail to servers using DSA keys.  Examples adapted from
the smtpd.conf manual.  OK jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.20 2014/10/01 14:09:28 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: October 1 2014 $
d260 1
a260 1
The use of S/MIME or PGP e-mail and trustworthy key hierarchies can guarantee
@


1.20
log
@rework this page to be less mailer specific, but using smtpd as an example;
ok gilles millert
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.19 2012/10/16 18:14:15 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: October 16 2012 $
d77 14
a90 18
Next, you must generate a
.Ar DSA
parameter set with a command like the following:
.Pp
.Dl # openssl dsaparam 1024 -out dsa1024.pem
.Pp
This would generate
.Ar DSA
parameters for 1024-bit
.Ar DSA
keys, and save them to the
file
.Pa dsa1024.pem .
.Pp
Once you have the
.Ar DSA
parameters generated, you can generate a certificate
and unencrypted private key using the command:
d92 2
a93 2
# openssl req -x509 -nodes -days 365 -newkey dsa:dsa1024.pem \e
  -out /etc/ssl/mycert.pem -keyout /etc/ssl/private/mykey.pem
a99 6
Make sure to leave the private key files unencrypted, using the
.Fl nodes
option.
Otherwise the MTA
will be unable to initiate TLS server functions.
.Pp
d103 1
a103 1
.Dl # openssl x509 -in /etc/ssl/mycert.pem -text
d110 1
a110 1
.Dl # ln -s /etc/ssl/mycert.pem /etc/ssl/CAcert.pem
a115 6
At this point, you no longer need the
.Pa dsa1024.pem
file and it can be removed.
.Pp
.Dl # rm dsa1024.pem
.Pp
d126 1
a126 1
.Pa /etc/ssl/private/mykey.pem .
d129 2
a130 2
# openssl req -x509 -new -days 365 -key /etc/ssl/private/mykey.pem \e
  -out /etc/ssl/mycert.pem
d139 2
a140 1
the mail server needs to be configured to accept TLS sessions.
d143 1
a143 1
it's as simple as adding a line like the following to
d145 6
a150 2
.Pp
.Dl listen on [...] tls
@


1.19
log
@some clarifications from Claus Assmann;
ok beck deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.18 2012/09/26 17:34:38 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: September 26 2012 $
a35 3
As of version 8.11,
.Xr sendmail 8
has supported the use of TLS to protect ESMTP communications.
d63 1
a63 1
.Ss Creating a private key and certificate for sendmail
d65 3
a67 1
for use with sendmail and STARTTLS.
d71 1
a71 1
.Sx "Creating a certificate with an existing private key" .
d74 1
a74 1
.Pa /etc/mail/certs ,
a75 3
If this directory does not already exist, you must create it:
.Pp
.Dl # mkdir /etc/mail/certs
d97 1
a97 1
  -out /etc/mail/certs/mycert.pem -keyout /etc/mail/certs/mykey.pem
d107 1
a107 2
Otherwise,
.Xr sendmail 8
d113 1
a113 1
.Dl # openssl x509 -in /etc/mail/certs/mycert.pem -text
d120 1
a120 1
.Dl # ln -s /etc/mail/certs/mycert.pem /etc/mail/certs/CAcert.pem
d124 1
a124 1
.Pa /etc/mail/certs/CAcert.pem .
d133 2
a134 2
.Xr sendmail 8
is picky about using tight permissions on those files.
d139 1
a139 1
.Dl # chmod -R go-rwx /etc/mail/certs
d142 1
a142 1
.Pa /etc/mail/certs/mykey.pem .
d145 3
a147 3
# openssl req -x509 -new -days 365 -key /etc/mail/certs/mykey.pem \e
  -out /etc/mail/certs/mycert.pem
# chmod 600 /etc/mail/certs/mycert.pem
a152 52
.Ss Configuring sendmail to utilize TLS
The global sendmail configuration files,
.Pa /etc/mail/sendmail.cf
and
.Pa /etc/mail/localhost.cf
must be modified to support TLS functionality.
An example .mc file which has entries for TLS options, such as certificates,
is available as
.Pa /usr/share/sendmail/cf/knecht.mc .
.Pp
The pertinent options are:
.Pp
.Bl -bullet -compact
.It
CERT_DIR
.It
confCACERT_PATH
.It
confCACERT
.It
confSERVER_CERT
.It
confSERVER_KEY
.It
confCLIENT_CERT
.It
confCLIENT_KEY
.El
.Pp
By default, the directory
.Pa /etc/mail/certs ,
defined by CERT_DIR, is used to store certificates, and the server will
use the same certificates both as a client (outgoing mail) and as a server
(for incoming mail).
This can be changed by having different entries for the respective roles.
.Pp
The next step is to edit the .mc files your
.Pa sendmail.cf
and
.Pa localhost.cf
files are generated from.
First, change to the directory where your .mc files are stored.
You will need to make TLS-enabled versions of the following files:
.Pa openbsd-proto.mc
and
.Pa openbsd-localhost.mc .
.Bd -literal -offset indent
# cd /usr/share/sendmail/cf

# cp openbsd-proto.mc openbsd-proto-tls.mc
# cp openbsd-localhost.mc openbsd-localhost-tls.mc
.Ed
d154 6
a159 30
You must then edit
.Pa openbsd-proto-tls.mc ,
and
.Pa openbsd-localhost-tls.mc
to add the following lines after the
.Dq VERSIONID
definition (the actual placement within the file is not critical as long
as it is after the
.Dq divert(0)dnl
line).
.Bd -literal -offset indent
define(`CERT_DIR',        `MAIL_SETTINGS_DIR`'certs')
define(`confCACERT_PATH', `CERT_DIR')
define(`confCACERT',      `CERT_DIR/CAcert.pem')
define(`confSERVER_CERT', `CERT_DIR/mycert.pem')
define(`confSERVER_KEY',  `CERT_DIR/mykey.pem')
define(`confCLIENT_CERT', `CERT_DIR/mycert.pem')
define(`confCLIENT_KEY',  `CERT_DIR/mykey.pem')
.Ed
.Pp
Now that you have the TLS-enabled versions of the .mc files
you must generate .cf files from them and install the .cf
files in
.Pa /etc/mail .
.Bd -literal -offset indent
# make openbsd-proto-tls.cf openbsd-localhost-tls.cf

# cp openbsd-proto-tls.cf /etc/mail/sendmail.cf
# cp openbsd-localhost-tls.cf /etc/mail/localhost.cf
.Ed
d161 1
a161 3
Finally, restart sendmail with the new configuration by sending
it a
.Dv SIGHUP .
d163 1
a163 6
.Dl # kill -HUP `head -1 /var/run/sendmail.pid`
.Pp
Note that those are backticks and not single quotes in the example above.
.Pp
After having installed the certificates and configuration files and having
restarted the sendmail daemon, a new option should be presented for ESMTP
d170 1
a170 1
Trying ::1...
d173 1
a173 1
220 localhost ESMTP Sendmail 8.12.1/8.12.1 ready
d181 2
a182 1
250-localhost Hello localhost [IPv6:::1], pleased to meet you
d184 1
a184 3
250-PIPELINING
250-8BITMIME
250-SIZE
a185 1
250-ETRN
a186 1
250-DELIVERBY
d193 1
a193 1
If so, congratulations, sendmail will now use TLS to encrypt your mail
d197 3
a199 3
to see whether sendmail has reported any security problems or other errors.
.Ss Uses for TLS-Equipped sendmail
The most obvious use of a cryptographically enabled sendmail installation
a213 5
.Pp
The use of the access map (usually
.Pa /etc/mail/access ) ,
which is normally used to determine connections and relaying,
can also be extended to give server level control for the use of TLS.
d247 13
a259 1
.Sh LIMITATIONS
d268 1
a268 1
Because sendmail with TLS can only authenticate at the server level, true
a286 17
.Sh SEE ALSO
.Xr mail 1 ,
.Xr openssl 1 ,
.Xr afterboot 8 ,
.Xr sendmail 8 ,
.Xr ssl 8
.Pp
.Lk http://www.sendmail.org/~ca/email/starttls.html
.Sh STANDARDS
.Rs
.%A P. Hoffman
.%D February 2002
.%R RFC 3207
.%T SMTP Service Extension for Secure SMTP over Transport Layer Security
.Re
.Sh HISTORY
TLS features first appeared in sendmail 8.11.
@


1.18
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.17 2012/08/15 19:07:30 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: August 15 2012 $
d322 1
a322 1
Force strong (112-bit) encryption for communications for this server:
d324 1
a324 1
.Dl server1.example.net	ENCR:112
d326 2
a327 1
For a TLS client, force string verification depths to at least 80 bits:
d329 1
a329 1
.Dl TLS_Clt:desktop.example.net VERIFY:80
@


1.17
log
@- use Lk for links

because i already have a trivial addition in afterboot, to briefly document
rc.d(8), i have committed that bit also. that saves me making (even more)
trivial changes to this file, however the text was suggested by ingo and
i'm still waiting for his reply which, to be fair, has only been a wait of
some 30 mins so far. so, the rc.d blurb was requested by ross richardson,
suggested by ingo, and probably ok ingo. but if he objects, we can tweak
it further.
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.16 2008/09/23 11:03:41 grunk Exp $
d26 1
a26 1
.Dd $Mdocdate: September 23 2008 $
a376 2
DARPA Internet Request for Comments RFC 3207
.Pp
d378 7
@


1.16
log
@RFC2487 is obsoleted by RFC3207
ok jmc@@ millert@@
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.15 2007/05/31 19:19:59 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 31 2007 $
d377 1
a377 2
.Tn DARPA
Internet Request for Comments RFC 3207
d379 1
a379 1
http://www.sendmail.org/~ca/email/starttls.html
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.14 2005/07/04 08:44:37 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate$
d33 1
a33 1
STARTTLS is an ESMTP option, defined in RFC 2487, which is used to conduct
d378 1
a378 1
Internet Request for Comments RFC 2487
@


1.14
log
@- fix typo
- sendmail no longer built w/ EXPN or VERB

ok jose@@
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.13 2005/04/30 23:45:42 jmc Exp $
d26 1
a26 1
.Dd January 11, 2002
@


1.13
log
@hyphenate nnn-bit adjectives;
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.12 2004/10/21 15:15:36 millert Exp $
d122 1
a122 1
your new key to
a271 2
250-EXPN
250-VERB
@


1.12
log
@Fix typo; from mpech@@
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.11 2003/10/01 13:36:49 grange Exp $
d89 1
a89 1
parameters for 1024 bit
d324 1
a324 1
Force strong (112 bit) encryption for communications for this server:
@


1.11
log
@typo; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.10 2003/07/11 05:37:55 david Exp $
d330 1
a330 1
.Dl TLS_Clt:desktop.example:net VERIFY:80
@


1.10
log
@fix mdoc syntax
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.9 2003/07/10 08:30:36 jmc Exp $
d120 1
a120 1
If don't intend to use TLS for authentication (and if you are using
@


1.9
log
@fix some lists and macros;
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.8 2003/06/06 19:28:06 jmc Exp $
d326 1
a326 1
.D1 server1.example.net	ENCR:112
d329 2
a330 1
.D1 TLS_Clt:desktop.example:net VERIFY:80
@


1.8
log
@- section reorder
- macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.7 2003/02/14 18:01:24 millert Exp $
d78 2
a79 3
.Bd -literal -offset indent -width Ds
# mkdir /etc/mail/certs
.Ed
d84 2
a85 3
.Bd -literal -offset indent -width Ds
# openssl dsaparam 1024 -out dsa1024.pem
.Ed
d99 2
a100 2
.Bd -literal -offset indent -width Ds
# openssl req -x509 -nodes -days 365 -newkey dsa:dsa1024.pem \\
d117 2
a118 3
.Bd -literal -offset indent -width Ds
# openssl x509 -in /etc/mail/certs/mycert.pem -text
.Ed
d124 2
a125 3
.Bd -literal -offset indent -width Ds
# ln -s /etc/mail/certs/mycert.pem /etc/mail/certs/CAcert.pem
.Ed
d134 2
a135 3
.Bd -literal -offset indent -width Ds
# rm dsa1024.pem
.Ed
d143 2
a144 3
.Bd -literal -offset indent -width Ds
# chmod -R go-rwx /etc/mail/certs
.Ed
d149 2
a150 2
.Bd -literal -offset indent -width Ds
# openssl req -x509 -new -days 365 -key /etc/mail/certs/mykey.pem \\
d170 1
a170 1
.Bl -bullet -literal -compact
d204 1
a204 1
.Bd -literal -offset indent -width Ds
d221 1
a221 1
.Bd -literal -offset indent -width Ds
d235 1
a235 1
.Bd -literal -offset indent -width Ds
d245 2
a246 3
.Bd -literal -offset indent -width Ds
# kill -HUP `head -1 /var/run/sendmail.pid`
.Ed
d256 1
a256 1
.Bd -literal -offset indent -width Ds
d268 1
a268 1
.Bd -literal -offset indent -width Ds
d323 7
a329 9
.\" XXX - clean this up
.Bl -tag -width Ds
.It "Force strong (112 bit) encryption for communications for this server:"
.sp
.Li server1.example.net             ENCR:112
.It "For a TLS client, force string verification depths to at least 80 bits:"
.sp
.Li TLS_Clt:desktop.example:net     VERIFY:80
.El
d379 1
a379 2
Internet Request for Comments
.Tn RFC2487
@


1.7
log
@Add BSD license; OK'd by Jose Nazario.  Also add missing .Os line.
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.6 2002/12/23 16:11:59 millert Exp $
d30 1
a30 1
.Nm starttls 
d36 1
a36 1
As of version 8.11, 
d111 1
a111 1
.Fl nodes 
d193 1
a193 2
.Pp
By default, the directory 
d310 1
a310 1
certificate-based authentication. 
d388 1
a388 1
Internet Request for Comments 
@


1.6
log
@chdir is the syscall, cd is the shell command; Sam Smith
@
text
@d1 25
a25 1
.\" $OpenBSD: starttls.8,v 1.5 2002/10/21 16:29:14 millert Exp $
d28 1
@


1.5
log
@o Add "-days 365" to the examples (default lifetime is 1 month).
o Add an example showing how to make a new cert w/o a new key.
o Mention how to dump a cert in text format.
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.4 2002/10/14 14:48:13 millert Exp $
d187 1
a187 1
# chdir /usr/share/sendmail/cf
@


1.4
log
@No need to modify submit.mc when enabling TLS.  Noted by Marc Matteo
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.3 2002/03/20 21:18:53 millert Exp $
d41 1
a41 1
.Ss Creating a certificate for sendmail
d44 5
d77 1
a77 1
# openssl req -x509 -nodes -newkey dsa:dsa1024.pem \\
d81 4
d92 6
d126 13
@


1.3
log
@Sendmail logs to /var/log/maillog, not /var/log/mail; Matt Bing
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.2 2002/01/11 22:14:13 millert Exp $
d115 2
a116 4
.Pa /etc/mail/submit.cf
(used for mail submitted from the command line by
.Xr mail 1
and others) must be modified to support TLS functionality.
d149 1
a149 2
.Pa localhost.cf ,
.Pa sendmail.cf ,
d151 1
a151 1
.Pa submit.cf
d155 1
a155 2
.Pa openbsd-localhost.mc ,
.Pa openbsd-proto.mc ,
d157 1
a157 1
.Pa submit.mc .
d161 1
a162 2
# cp openbsd-proto.mc openbsd-proto-tls.mc
# cp submit.mc submit-tls.mc
d165 1
a165 2
You must then edit each of
.Pa openbsd-localhost-tls.mc ,
d168 1
a168 1
.Pa submit-tls.mc
d190 1
a190 1
# make openbsd-localhost-tls.cf openbsd-proto-tls.cf submit-tls.cf
d192 1
a193 2
# cp openbsd-proto-tls.cf /etc/mail/sendmail.cf
# cp submit-tls.cf /etc/mail/submit.cf
d200 1
a200 1
# kill -HUP `sed 1q /var/run/sendmail.pid`
@


1.2
log
@Reorganize a little, pull in instructions on certifcate generation
from ssl(8) and provide step-by-step instructions on how to edit
the .mc files, install the new .cf files, restart sendmail and test.
Should now be idiot-proof until science builds us a better idiot.
@
text
@d1 1
a1 1
.\" $OpenBSD: starttls.8,v 1.1 2001/09/19 14:08:37 millert Exp $
d251 1
a251 1
.Pa /var/log/mail
@


1.1
log
@starttls man page for sebdmail over TLS from Jose Nazario and mdoc'd
with minor content changes by me.
@
text
@d1 2
a2 2
.\" $OpenBSD$
.Dd August 20, 2001
d6 1
a6 1
.Nd ESMTP over TLS
d11 1
a11 1
Since version 8.11, 
d41 70
d112 7
a118 3
The global sendmail configuration file,
.Pa /etc/mail/sendmail.cf ,
must be modified to support TLS functionality.
d124 2
a125 1
.Bl -bullet -literal
d142 1
d145 3
a147 3
defined in CERT_DIR, is used to store certificates, and the server will
use the same certificates both as a client and as a server (when sending
and receiving mail, respectively, to another MTA). 
d150 52
a201 12
These certificates can be generated using the 
.Xr openssl 1
utility as described in
.Xr ssl 8 .
Make sure to leave the private key files unencrypted, using the
.Fl nodes 
option.
Otherwise,
.Xr sendmail 8
will be unable to initiate TLS server functions.
Also be sure to name the files as they are defined in the above macros
and store them in PEM format.
d203 3
a205 6
Because the private key files are unencrypted,
.Xr sendmail 8
is picky about using tight permissions on those files.
The certificate directory and the files therein should be
readable and writable only by the owner (root).
A simple way to ensure this is to run the following:
d207 1
a207 1
# chmod -R go-rwx /etc/mail/certs
d210 3
a212 1
Having installed this configuration file and the certificates and
d215 38
a252 2
This can be tested using a mail client which is TLS capable, or by
using a TLS capable server.
d330 1
a330 1
As such, it is difficult to forsee the widespread use of SMTP using TLS,
d336 1
d346 1
a346 1
http://www.sendmail.org/
@

