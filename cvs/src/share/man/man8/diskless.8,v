head	1.68;
access;
symbols
	OPENBSD_6_0:1.67.0.2
	OPENBSD_6_0_BASE:1.67
	OPENBSD_5_9:1.65.0.2
	OPENBSD_5_9_BASE:1.65
	OPENBSD_5_8:1.65.0.4
	OPENBSD_5_8_BASE:1.65
	OPENBSD_5_7:1.64.0.2
	OPENBSD_5_7_BASE:1.64
	OPENBSD_5_6:1.63.0.4
	OPENBSD_5_6_BASE:1.63
	OPENBSD_5_5:1.62.0.4
	OPENBSD_5_5_BASE:1.62
	OPENBSD_5_4:1.61.0.2
	OPENBSD_5_4_BASE:1.61
	OPENBSD_5_3:1.60.0.4
	OPENBSD_5_3_BASE:1.60
	OPENBSD_5_2:1.60.0.2
	OPENBSD_5_2_BASE:1.60
	OPENBSD_5_1_BASE:1.59
	OPENBSD_5_1:1.59.0.2
	OPENBSD_5_0:1.58.0.18
	OPENBSD_5_0_BASE:1.58
	OPENBSD_4_9:1.58.0.16
	OPENBSD_4_9_BASE:1.58
	OPENBSD_4_8:1.58.0.14
	OPENBSD_4_8_BASE:1.58
	OPENBSD_4_7:1.58.0.10
	OPENBSD_4_7_BASE:1.58
	OPENBSD_4_6:1.58.0.12
	OPENBSD_4_6_BASE:1.58
	OPENBSD_4_5:1.58.0.8
	OPENBSD_4_5_BASE:1.58
	OPENBSD_4_4:1.58.0.6
	OPENBSD_4_4_BASE:1.58
	OPENBSD_4_3:1.58.0.4
	OPENBSD_4_3_BASE:1.58
	OPENBSD_4_2:1.58.0.2
	OPENBSD_4_2_BASE:1.58
	OPENBSD_4_1:1.56.0.4
	OPENBSD_4_1_BASE:1.56
	OPENBSD_4_0:1.56.0.2
	OPENBSD_4_0_BASE:1.56
	OPENBSD_3_9:1.24.0.6
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.24.0.4
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.24.0.2
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.23.0.2
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.22.0.4
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	OPENBSD_3_3:1.21.0.2
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.11.0.4
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.68
date	2016.09.01.09.53.08;	author tedu;	state Exp;
branches;
next	1.67;
commitid	8VasbflQGfM4Z3VT;

1.67
date	2016.05.11.21.52.49;	author deraadt;	state Exp;
branches;
next	1.66;
commitid	VpgRpYXqYSJy4P7J;

1.66
date	2016.03.10.09.04.11;	author jmc;	state Exp;
branches;
next	1.65;
commitid	7AvUgktfamfCLhKX;

1.65
date	2015.07.27.17.28.39;	author sobrado;	state Exp;
branches;
next	1.64;
commitid	a73SHFfjDK7MTyGx;

1.64
date	2015.02.16.16.38.54;	author naddy;	state Exp;
branches;
next	1.63;
commitid	ne9aoqc3owhFBWUD;

1.63
date	2014.03.18.22.36.31;	author miod;	state Exp;
branches;
next	1.62;

1.62
date	2013.08.05.12.32.50;	author kettenis;	state Exp;
branches;
next	1.61;

1.61
date	2013.04.15.06.29.57;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2012.03.06.01.25.47;	author dlg;	state Exp;
branches;
next	1.59;

1.59
date	2012.01.28.02.20.46;	author william;	state Exp;
branches;
next	1.58;

1.58
date	2007.05.31.19.19.59;	author jmc;	state Exp;
branches;
next	1.57;

1.57
date	2007.04.13.17.49.41;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2006.05.21.16.35.38;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2006.05.19.19.35.41;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2006.05.19.19.03.12;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2006.05.19.18.03.18;	author jmc;	state Exp;
branches;
next	1.52;

1.52
date	2006.05.19.16.36.41;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2006.05.19.13.02.06;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2006.05.19.10.39.15;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2006.05.19.10.36.27;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.19.10.15.36;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.19.10.04.09;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2006.05.19.09.41.45;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.19.09.23.41;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2006.05.19.08.13.16;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2006.05.18.18.47.40;	author otto;	state Exp;
branches;
next	1.42;

1.42
date	2006.05.18.15.57.02;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2006.05.18.15.26.26;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2006.05.18.14.42.05;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2006.05.18.13.52.28;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2006.05.18.13.05.56;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2006.05.18.12.45.43;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.18.12.34.14;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.18.09.54.42;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.18.09.36.51;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.18.09.13.29;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.18.09.06.32;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.18.09.03.03;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.17.21.38.44;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.17.21.33.07;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.17.21.29.35;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.17.21.24.04;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.17.21.10.45;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.17.21.05.54;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.20.22.12.43;	author jsg;	state Exp;
branches;
next	1.23;

1.23
date	2004.04.09.21.42.25;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.06.19.28.06;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2002.12.13.12.09.21;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2002.10.31.01.43.59;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.08.29.07.34.31;	author wcobb;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.23.09.30.35;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.13.13.54.26;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.20.15.39.57;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.17.11.13.58;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.03.15.21.17;	author mpech;	state Exp;
branches;
next	1.12;

1.12
date	2000.12.28.22.24.00;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.22.02.17.54;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.03.20.04.26;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	99.07.09.13.35.36;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.07.22.03.09;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	96.12.10.18.37.53;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.10.07.20.59.25;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.08.31.12.57.36;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	96.06.11.07.10.54;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.04.44.27;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.29.10.17.52;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.68
log
@remove sparc manuals
@
text
@.\"	$OpenBSD: diskless.8,v 1.67 2016/05/11 21:52:49 deraadt Exp $
.\"	$NetBSD: diskless.8,v 1.7.4.1 1996/05/30 18:58:10 cgd Exp $
.\"
.\"
.\" Copyright (c) 1994 Gordon W. Ross, Theo de Raadt
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: May 11 2016 $
.Dt DISKLESS 8
.Os
.Sh NAME
.Nm diskless
.Nd booting a system over the network
.Sh DESCRIPTION
The ability to boot a machine over the network is useful for
.Em diskless
or
.Em dataless
machines, or as a temporary measure while repairing or
re-installing filesystems on a local disk.
This file provides a general description of the interactions between
a client and its server when a client is booting over the network.
The general description is followed by specific instructions for
configuring a server for diskless clients.
.Pp
When booting a system over the network, there are three
phases of interaction between client and server:
.Pp
.Bl -enum -compact
.It
The PROM (or stage-1 bootstrap) loads a boot program.
.It
The boot program loads a kernel.
.It
The kernel does NFS mounts for root and swap.
.El
.Pp
Each of these phases are described in further detail below.
.Pp
In
.Em phase 1 ,
the PROM loads a boot program.
PROM designs vary widely, so this phase is inherently
machine-specific.
Sun and Motorola machines use RARP to determine the client's IP address
and then use TFTP to download a boot program
from whoever sent the RARP reply.
HP 300-series machines use the
HP Remote Maintenance Protocol
to download a boot program.
Other machines may load a
network boot program either from diskette or
using a special PROM on the network card.
.Pp
In
.Em phase 2 ,
the boot program loads a kernel.
Operation in this phase depends on the design of the boot program.
The procedure used by the boot program is as follows:
.Pp
.Bl -enum -compact
.It
The boot program
gets the client IP address using RARP.
.It
The boot program
gets the client name and server IP address by broadcasting an
RPC/BOOTPARAMS/WHOAMI request with the client IP address.
.It
The boot program
gets the server path for this client's root
using an RPC/BOOTPARAMS/GETFILE request with the client name.
.It
The boot program
gets the root file handle by calling
.Xr mountd 8
with the server path for the client root.
.It
The boot program
gets the kernel file handle by calling
NFS lookup on the root file handle.
.It
The boot program
loads the kernel using
NFS read calls on the kernel file handle.
.It
The boot program
transfers control to the kernel entry point.
.El
.Pp
In
.Em phase 3 ,
the kernel does NFS mounts for root and swap.
The kernel repeats much of the work done by the boot program
because there is no standard way for the boot program to pass
the information it gathered on to the kernel.
The procedure used by the kernel is as follows:
.Pp
.Bl -enum -compact
.It
The kernel finds a boot server using the same procedure
as described in steps 1 and 2 of phase 2, above.
.It
The kernel gets the NFS
file handle for root using the same procedure
as described in steps 3, 4, and 5 of phase 2, above.
.It
The kernel calls the NFS
getattr function to get the last-modified time of the root
directory, and uses it to check the system clock.
.It
If the kernel is configured for swap on NFS,
it uses the same mechanism as for root, but uses the NFS
getattr function to determine the size of the swap area.
.El
.Pp
The
.No INSTALL. Ns Aq Ar arch
notes that come with each distribution
also give details on the specifics of net/diskless booting
for each architecture.
.Pp
The procedures for AMD64 and i386 clients vary somewhat
to the stages detailed above.
See
.Xr pxeboot 8
for more detailed information.
.Sh EXAMPLES
Before a client can boot over the network,
its server must be configured correctly.
This example will demonstrate how to configure a server and client.
.Pp
Assuming the client's hostname is to be
"myclient":
.Bl -enum
.It
Add an entry to
.Pa /etc/ethers
corresponding to the client's Ethernet address:
.Bd -literal -offset indent
8:0:20:7:c5:c7          myclient
.Ed
.Pp
This will be used by
.Xr rarpd 8 .
.It
Assign an IP address for myclient in
.Pa /etc/hosts :
.Bd -literal -offset indent
192.197.96.12           myclient
.Ed
.It
If booting an alpha, amd64, hppa, i386, sgi,
or sparc64 client,
ensure that
.Xr tftpd 8
is configured to run in the directory
.Pa /tftpboot .
.Pp
If booting an HP 300 or older HPPA machine, ensure that
.Pa /etc/rbootd.conf
is configured properly to transfer the boot program to the client.
An entry might look like this:
.Bd -literal -offset indent
08:00:09:01:23:E6	SYS_UBOOT	# myclient
.Ed
.Pp
See the
.Xr rbootd 8
manual page for more information.
.It
If booting a newer alpha, amd64, hppa, i386, sgi,
or sparc64 client,
install a copy of the appropriate diskless boot loader in the
.Pa /tftpboot
directory.
.Pp
If booting a Motorola or Sun client,
make a link such that the boot program is
accessible as a file named after the client's IP address in hex.
For example:
.Bd -literal -offset indent
# cd /tftpboot
# ln -s boot.net C0C5600C
.Ed
.Pp
The following example converts an IP address to hex:
.Bd -literal -offset indent
$ echo 192.197.96.12 | awk -F . \e
	'{ printf "%02X%02X%02X%02X\en", $1, $2, $3, $4 }'
.Ed
.Pp
Sun Sparc machines also require a
.Dq . Ns Aq Ar arch
suffix.
So the filename in the example above for a Sun4 machine would be
.Dq C0C5600C.SUN4 .
The name used is really architecture dependent:
it simply has to match what the booting client's PROM wishes it to be.
If the client's PROM fails to fetch the expected file,
.Xr tcpdump 8
can be used to discover which filename the client is trying to read.
.Pp
Architectures using DHCP
(newer alpha, amd64, hppa, i386, or sgi)
should ensure that
.Xr dhcpd 8
is configured on the server to serve BOOTP protocol requests.
An example entry in
.Xr dhcpd.conf 5 :
.Bd -literal -offset indent
subnet 10.0.0.0 netmask 255.0.0.0 {
	host myclient {
		filename "netboot";
		option root-path "/export/myclient/root";
		hardware ethernet 00:02:56:00:73:31;
		fixed-address 10.42.42.42;
	}
}
.Ed
.Pp
Note that procedures for AMD64 and i386 clients vary somewhat.
See
.Xr pxeboot 8
for more detailed information.
.Pp
Architectures using the HP remote boot server
(HP 300 or older HPPA)
should ensure that the general purpose
boot program is installed in the directory
.Pa /usr/mdec/rbootd .
.Pp
Architectures using MOP
(older Alpha)
should follow the instructions in
.Xr mopd 8
for setting up a TFTP boot.
.It
Add myclient to the bootparams database
.Pa /etc/bootparams :
.Bd -literal -offset indent
myclient  root=server:/export/myclient/root \e
          swap=server:/export/myclient/swap
.Ed
.Pp
Note that some bootparam servers are somewhat sensitive.
Some require fully qualified hostnames or partially qualified hostnames
(which can be solved by having both fully and partially qualified entries).
Other servers are case sensitive.
.It
Build the swap file for myclient:
.Bd -literal -offset indent
# mkdir -p /export/myclient/root/swap
# cd /export/myclient
# dd if=/dev/zero of=swap bs=1m count=120
.Ed
.Pp
This creates a 120 Megabyte swap file and an empty /swap directory.
A smaller swap file may be created if the boot is for
maintenance (i.e. temporary) purposes only.
.It
Populate myclient's root
filesystem on the server.
How this is done depends on the client architecture and the version of the
.Ox
distribution.
It can be as simple as copying and modifying the server's root
filesystem, or perhaps the files can be taken from the
standard binary distribution.
.It
Export the required filesystems in
.Pa /etc/exports :
.Bd -literal -offset indent
/usr -ro myclient
/export/myclient -maproot=root -alldirs myclient
.Ed
.Pp
If the server and client are of the same architecture, then the client
can share the server's
.Pa /usr
filesystem (as is done above).
If not, a properly fleshed out
.Pa /usr
partition will have to be built for the client in some other place.
.It
Copy and customize at least the following files in
.Pa /export/myclient/root :
.Bd -literal -offset indent
# cd /export/myclient/root/etc
# cp /etc/fstab fstab
# cp /etc/hosts hosts
# echo myclient > myname
# echo inet 192.197.96.12 > hostname.le0
.Ed
.Pp
Note that "le0" above should be replaced with the name of
the network interface that the client will use for booting.
.It
Correct at least
the critical mount points in the client's
.Xr fstab 5
(which will be
.Pa /export/myclient/root/etc/fstab ) :
.Bd -literal -offset indent
myserver:/export/myclient/root / nfs rw 0 0
myserver:/export/myclient/swap none swap sw,nfsmntpt=/swap
myserver:/export/myclient/root/usr /usr nfs rw,nodev 0 0
myserver:/export/myclient/root/var /var nfs rw,nosuid,nodev 0 0
.Ed
.Pp
The above example works even if
.Pa /usr
and
.Pa /var
are not on separate partitions.
It allows them to be mounted with NFSv3,
if the server allows it,
and to specify per-partition mount options,
such as
.Dq nodev .
.Pp
If the
.Pa /usr
partition is to be shared between machines,
as in the example
.Pa /etc/exports
above, a more suitable entry might be:
.Bd -literal -offset indent
myserver:/usr /usr nfs ro 0 0
.Ed
.It
Make sure the correct processes are enabled on the server.
See
.Xr rc.conf 8
for details of how to start these processes at boot.
.Pp
For all clients:
.Xr mountd 8 ,
.Xr nfsd 8 ,
.Xr portmap 8 ,
.Xr rarpd 8 ,
and
.Xr rpc.bootparamd 8 .
.Pp
For alpha, amd64, hppa, i386, sgi, and sparc64 clients:
.Xr tftpd 8
.Pp
For HP 300 and older HPPA clients:
.Xr rbootd 8
.Pp
For newer alpha, amd64, hppa, i386, and sgi clients:
.Xr dhcpd 8
.Pp
For older alpha clients:
.Xr mopd 8
.It
Net boot the client.
.El
.Sh FILES
.Bl -tag -width "/usr/mdec/rbootdXX" -compact
.It Pa /etc/bootparams
Client root and swap pathnames.
.It Pa /etc/dhcpd.conf
DHCP daemon configuration file.
.It Pa /etc/ethers
Ethernet addresses of known clients.
.It Pa /etc/exports
Exported NFS mount points.
.It Pa /etc/fstab
Static information about the filesystems.
.It Pa /etc/hostname.$if
Interface-specific configuration file.
.It Pa /etc/hosts
Host name database.
.It Pa /etc/myname
Default hostname and gateway.
.It Pa /etc/rbootd.conf
Configuration file for HP Remote Boot Daemon.
.It Pa /tftpboot
Location of boot programs loaded by the Sun PROM.
.It Pa /usr/mdec/rbootd
Location of boot programs loaded by the HP Boot ROM.
.El
.Sh SEE ALSO
.Xr bootparams 5 ,
.Xr dhcpd.conf 5 ,
.Xr ethers 5 ,
.Xr exports 5 ,
.Xr fstab 5 ,
.Xr hostname.if 5 ,
.Xr hosts 5 ,
.Xr myname 5 ,
.Xr dhcpd 8 ,
.Xr mopd 8 ,
.Xr mountd 8 ,
.Xr nfsd 8 ,
.Xr portmap 8 ,
.Xr pxeboot 8 ,
.Xr rarpd 8 ,
.Xr rbootd 8 ,
.Xr rpc.bootparamd 8 ,
.Xr tcpdump 8 ,
.Xr tftpd 8
@


1.67
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.66 2016/03/10 09:04:11 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: March 10 2016 $
d176 1
a176 1
sparc, or sparc64 client,
d195 2
a196 6
sparc, or sparc64 client,
install a copy of the appropriate diskless boot loader (such as
.Pa boot.net
from the root directory of the
.Ox
sparc tree) in the
d367 1
a367 1
For alpha, amd64, hppa, i386, sgi, sparc, and sparc64 clients:
@


1.66
log
@un-vax;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.65 2015/07/27 17:28:39 sobrado Exp $
d30 1
a30 1
.Dd $Mdocdate: July 27 2015 $
d175 1
a175 1
If booting an alpha, amd64, hppa, hppa64, i386, sgi,
d194 1
a194 1
If booting a newer alpha, amd64, hppa, hppa64, i386, sgi,
d231 1
a231 1
(newer alpha, amd64, hppa, hppa64, i386, or sgi)
d371 1
a371 1
For alpha, amd64, hppa, hppa64, i386, sgi, sparc, and sparc64 clients:
d377 1
a377 1
For newer alpha, amd64, hppa, hppa64, i386, and sgi clients:
@


1.65
log
@use file system path (.Pa) semantic markup macros where appropriate.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.64 2015/02/16 16:38:54 naddy Exp $
d30 1
a30 1
.Dd $Mdocdate: February 16 2015 $
d176 1
a176 1
sparc, sparc64, or vax client,
d260 1
a260 1
(older Alpha and Vax)
d371 1
a371 1
For alpha, amd64, hppa, hppa64, i386, sgi, sparc, sparc64, and vax clients:
d380 1
a380 1
For older alpha and vax clients:
@


1.64
log
@Replace \*(Lt \*(Le \*(Gt \*(Ge with literal < <= > >= respectively,
except for instances where \*(Le and \*(Ge are clearly understood as
mathematical symbols.  Discussed with schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.63 2014/03/18 22:36:31 miod Exp $
d30 1
a30 1
.Dd $Mdocdate: March 18 2014 $
d387 1
a387 1
.It /etc/bootparams
d389 1
a389 1
.It /etc/dhcpd.conf
d391 1
a391 1
.It /etc/ethers
d393 1
a393 1
.It /etc/exports
d395 1
a395 1
.It /etc/fstab
d397 1
a397 1
.It /etc/hostname.$if
d399 1
a399 1
.It /etc/hosts
d401 1
a401 1
.It /etc/myname
d403 1
a403 1
.It /etc/rbootd.conf
d405 1
a405 1
.It /tftpboot
d407 1
a407 1
.It /usr/mdec/rbootd
@


1.63
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.62 2013/08/05 12:32:50 kettenis Exp $
d30 1
a30 1
.Dd $Mdocdate: August 5 2013 $
d318 2
a319 2
# echo myclient \*(Gt myname
# echo inet 192.197.96.12 \*(Gt hostname.le0
@


1.62
log
@rpc.bootparamd(8) is needed on all hardware platforms for true diskless
operations.

Note to the pixie booting crowd: This manual page documents how to run a full
OpenBSD install without having a local disk in your machine.  If you just want
to boot an install kernel, look at pxeboot(8).

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.61 2013/04/15 06:29:57 deraadt Exp $
d30 1
a30 1
.Dd $Mdocdate: April 15 2013 $
d175 1
a175 1
If booting an alpha, amd64, hppa, hppa64, i386, sgi, mvme68k, mvme88k,
d194 2
a195 2
If booting a newer alpha, amd64, hppa, hppa64, i386, sgi, mvme68k,
mvme88k, sparc, or sparc64 client,
d371 1
a371 2
For alpha, amd64, hppa, hppa64, i386, sgi, mvme68k, mvme88k,
sparc, sparc64, and vax clients:
@


1.61
log
@do not Capitalize architecture names, because it makes it hard to search
for them... especially important in this manual page.. diskless setup is
a weavy path of use this, not that, but this, etc
ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.60 2012/03/06 01:25:47 dlg Exp $
d30 1
a30 1
.Dd $Mdocdate: March 6 2012 $
d367 1
d369 1
a369 1
.Xr rarpd 8 .
a379 3
.Pp
For hp300, older hppa, mvme68k, mvme88k, sparc, sparc64, and vax clients:
.Xr rpc.bootparamd 8
@


1.60
log
@clean up some newly created lies now that tftpd doesnt run out of inetd.

poke by deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.59 2012/01/28 02:20:46 william Exp $
d30 1
a30 1
.Dd $Mdocdate: January 28 2012 $
d175 2
a176 2
If booting an Alpha, AMD64, newer HPPA, HPPA64, i386, Mips64, Motorola,
Sun, or Vax client,
d194 2
a195 2
If booting a newer Alpha, AMD64, newer HPPA, HPPA64, i386, Mips64,
Motorola, or Sun client,
d231 1
a231 1
(newer Alpha, AMD64, newer HPPA, HPPA64, i386, or Mips64)
d370 2
a371 2
For Alpha, AMD64, newer HPPA, HPPA64, i386, Mips64, Motorola,
Sun, and Vax clients:
d377 1
a377 1
For newer Alpha, AMD64, newer HPPA, HPPA64, i386, and Mips64 clients:
d380 1
a380 1
For HP 300, older HPPA, Motorola, Sun, and Vax clients:
d383 1
a383 1
For older Alpha and Vax clients:
@


1.59
log
@Correct an inadvertant comma-space transposition
ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.58 2007/05/31 19:19:59 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
a177 2
.Pa /etc/inetd.conf
is configured to run
d179 1
a179 1
in the directory
a372 2
via
.Xr inetd 8
@


1.58
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.57 2007/04/13 17:49:41 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate$
d218 1
a218 1
	'{ printf "%02X%02X%02X%02X\en", $1, $2, $3 ,$4 }'
@


1.57
log
@mountd(8) should be running on the server for diskless setups;
from Mattieu Baptiste
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.56 2006/05/21 16:35:38 jmc Exp $
d30 1
a30 1
.Dd October 2, 1994
@


1.56
log
@diskless bits for AMD64 and i386;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.55 2006/05/19 19:35:41 jmc Exp $
d366 2
a368 1
.Xr rarpd 8 ,
d370 1
a370 1
.Xr nfsd 8 .
@


1.55
log
@tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.54 2006/05/19 19:03:12 jmc Exp $
d144 6
d175 2
a176 1
If booting an Alpha, newer HPPA, HPPA64, Mips64, Motorola, Sun, or Vax client,
d196 2
a197 1
If booting a newer Alpha, newer HPPA, HPPA64, Mips64, Motorola, or Sun client,
d233 1
a233 1
(newer Alpha, newer HPPA, HPPA64, or Mips64)
d250 5
d371 2
a372 1
For Alpha, newer HPPA, HPPA64, Mips64, Motorola, Sun, and Vax clients:
d380 1
a380 1
For newer Alpha, newer HPPA, HPPA64, and Mips64 clients:
d430 1
@


1.54
log
@mickey confirms some hppa64 bits...
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.53 2006/05/19 18:03:18 jmc Exp $
d200 1
a200 1
accessible as a file named after the client's IP address in HEX.
@


1.53
log
@missing entry for hp 300;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.52 2006/05/19 16:36:41 jmc Exp $
d198 1
a198 1
If booting an HPPA64, Motorola, or Sun client,
d225 1
a225 1
(newer Alpha, newer HPPA, or Mips64)
a362 3
For newer Alpha, newer HPPA, and Mips64 clients:
.Xr dhcpd 8
.Pp
d366 4
a369 1
For HP 300, older HPPA, HPPA64, Motorola, Sun, and Vax clients:
@


1.52
log
@older alpha machines use mop; from miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.51 2006/05/19 13:02:06 jmc Exp $
d358 1
a358 1
For Alpha, newer HPPA, HPPA64, Mips64, Motorola, Sun, or Vax clients:
d369 1
a369 1
For older HPPA, HPPA64, Motorola, Sun, or Vax clients:
@


1.51
log
@fixes from miod:

- MOPS -> MOP
- .<arch> suffix is the exception, rather than the rule
- better fstab entries
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.50 2006/05/19 10:39:15 jmc Exp $
d189 1
a189 1
If booting an Alpha, newer HPPA, HPPA64, Mips64, Motorola, or Sun client,
d225 1
a225 1
(Alpha, newer HPPA, or Mips64)
d249 1
a249 1
(Vax)
d363 1
a363 1
For Alpha, newer HPPA, and Mips64 clients:
d372 1
a372 1
For Vax clients:
@


1.50
log
@kill some unneeded .Pp;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.49 2006/05/19 10:36:27 jmc Exp $
d200 1
a200 2
accessible by a file name composed of the client's IP address
in HEX, a dot, and the architecture name (all upper case).
d204 1
a204 1
# ln -s boot.net C0C5600C.SUN4
d213 7
a219 5
Some architectures, such as the Sun3 and Ultrasparc machines, do not append the
architecture name.
It this case, the name would be just C0C5600C.
The name used is architecture dependent, it simply has to match what the
booting client's PROM wishes it to be.
d248 1
a248 1
Architectures using MOPS
d322 23
a344 1
myserver:/usr /usr nfs rw 0 0
@


1.49
log
@let's not discuss how to boot diskless for non-Ox machines;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.48 2006/05/19 10:15:36 jmc Exp $
a161 1
.Pp
a167 1
.Pp
a187 1
.Pp
a251 1
.Pp
a263 1
.Pp
a274 1
.Pp
a283 1
.Pp
a311 1
.Pp
@


1.48
log
@make step 11 a little more readable;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.47 2006/05/19 10:04:09 jmc Exp $
a295 3
# for SunOS:
# /export/myclient -rw=myclient,root=myclient
# for OpenBSD:
a305 13
.Pp
For example,
if the server is a sparc, and the client a sun3,
create and fill
.Pa /export/usr.sun3
and then use the following
.Pa /etc/exports
lines:
.Bd -literal -offset indent
/export/usr.sun3 -ro myclient
/export/myclient -rw=myclient,root=myclient
.Ed
.Pp
@


1.47
log
@mips64 bits;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.46 2006/05/19 09:41:45 jmc Exp $
d348 12
a359 1
Make sure the following processes are enabled on the server:
d363 2
a364 1
(for Alpha, newer HPPA, HPPA64, Mips64, Motorola, Sun, or Vax clients);
d366 2
a367 1
(for Alpha, newer HPPA, and Mips64 clients);
d369 5
a373 1
(for HP 300 and older HPPA clients);
a374 10
(for Vax clients);
.Xr portmap 8 ;
.Xr rarpd 8 ;
.Xr rpc.bootparamd 8 ;
and
.Xr nfsd 8 .
.Pp
See
.Xr rc.conf 8
for details of how to start these processes at boot.
@


1.46
log
@hp 300 and hppa entries, gleaned from INSTALL;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.45 2006/05/19 09:23:41 jmc Exp $
d201 1
a201 1
If booting an HPPA64, Mips64, Motorola, or Sun client,
d227 1
a227 1
(Alpha and newer HPPA)
d354 1
a354 1
(for Alpha and newer HPPA clients);
@


1.45
log
@more stuff for alpha diskless;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.44 2006/05/19 08:13:16 jmc Exp $
d171 1
a171 1
If booting an Alpha, HPPA64, Mips64, Motorola, Sun, or Vax client,
d179 1
a179 1
If booting an HP 300 or HPPA machine, ensure that
d192 1
a192 1
If booting an Alpha, HPPA64, Mips64, Motorola, or Sun client,
d227 1
a227 1
(Alpha)
d245 1
a245 1
(HP 300 or HPPA)
d352 1
a352 3
(for Alpha, HPPA64, Mips64, Motorola, Sun, or Vax clients);
.Xr rarpd 8
(for Alpha, HPPA64, Mips64, Motorola, Sun, or Vax clients);
d354 1
a354 1
(for Alpha clients);
d356 1
a356 1
(for HP 300 and HPPA clients);
d359 2
a361 1
.Xr portmap 8 ;
@


1.44
log
@point people to INSTALL.<arch> docs for details of net/diskless booting;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.43 2006/05/18 18:47:40 otto Exp $
d192 1
a192 1
If booting an HPPA64, Mips64, Motorola, or Sun client,
d200 3
a202 1
Make a link such that the boot program is
d226 21
a246 1
If booting an HP 300 or HPPA machine, ensure that the general purpose
d250 3
a252 2
If booting an Alpha or Vax machine,
follow the instructions in
d352 1
a352 1
(for Alpha, HPPA64, Mips64, Motorola, Sun, or Vax clients),
d354 3
a356 1
(for Alpha, HPPA64, Mips64, Motorola, Sun, or Vax clients),
d358 1
a358 1
(for HP 300 and HPPA clients),
d360 3
a362 3
(for Alpha or Vax clients),
.Xr rpc.bootparamd 8 ,
.Xr portmap 8 ,
d376 2
d399 1
d406 1
@


1.43
log
@correct example awk expression; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.42 2006/05/18 15:57:02 jmc Exp $
d138 6
@


1.42
log
@cover diskless boots from more archs; some adjustments to come;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.41 2006/05/18 15:26:26 jmc Exp $
d206 1
a206 1
	'{ printf "0x%02x%02x%02x%02x\n", $1, $2, $3 ,$4 }'
@


1.41
log
@document diskless alpha boots, after some pointers from mickey;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.40 2006/05/18 14:42:05 jmc Exp $
d46 1
a46 1
configuring a server for diskless Sun clients.
d141 1
a141 2
This example will demonstrate how a Sun client
might be configured -- other clients should be similar.
d165 2
a166 1
If booting a Sun, Motorola, or Alpha client, ensure that
d173 1
a173 1
If booting an HP 300-series machine, ensure that
d186 2
a187 2
If booting a Sun or Motorola client, install a copy of the
appropriate diskless boot loader (such as
d218 2
a219 7
If booting an HP 300-series machine, ensure that the general purpose
boot program
.Pa SYS_UBOOT
(which may be called
.Pa netboot.lif
before installation)
is installed in the directory
d222 1
a222 1
If booting an Alpha machine,
d323 1
a323 1
(for Sun or Motorola clients),
d325 1
a325 1
(for Sun or Motorola clients),
d327 1
a327 1
(for HP clients),
d329 1
a329 1
(for Alpha clients),
@


1.40
log
@document that a smaller swap file may be used too, sometimes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.39 2006/05/18 13:52:28 jmc Exp $
d166 1
a166 1
If booting a Sun or Motorola client, ensure that
d227 5
d333 2
d377 1
@


1.39
log
@back out last, after some discussion;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.38 2006/05/18 13:05:56 jmc Exp $
d249 2
@


1.38
log
@use miod's suggestion for making swap files;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.37 2006/05/18 12:45:43 jmc Exp $
d245 1
a245 1
# dd if=/dev/zero of=swap bs=1m count=0 seek=120
@


1.37
log
@some wording/grammar fixes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.36 2006/05/18 12:34:14 jmc Exp $
d245 1
a245 1
# dd if=/dev/zero of=swap bs=1m count=120
@


1.36
log
@use miod's method for swapping; i had wanted to documented both ways,
but it's just going to make the page overly complicated. this method
has the advantage of making backups easier;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.35 2006/05/18 09:54:42 jmc Exp $
d145 1
a145 1
"myclient",
d159 2
a160 3
Assign an IP address for myclient in your
.Pa /etc/hosts
or DNS database:
d213 1
a213 1
booting client's PROM wishes to it to be.
d251 1
a251 2
Populate myclient's
.Pa /
d257 1
a257 1
filesystem, or perhaps you need to get those files out of the
d275 1
a275 1
If not, you must build a properly fleshed out
d277 1
a277 1
partition for the client in some other place.
d279 3
a281 2
If your server was a sparc, and your client a sun3,
you might create and fill
d306 1
a306 2
Correct
.Em at least
@


1.35
log
@add some entries to FILES and SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.34 2006/05/18 09:36:51 jmc Exp $
d233 1
a233 1
          swap=server:/export/myclient/root/swap
d244 2
a245 2
# mkdir -p /export/myclient/root
# cd /export/myclient/root
d249 1
a249 1
This creates a 120 Megabyte swap file.
d315 1
a316 1
/swap none swap sw 0 0
@


1.34
log
@document which server processes need to be running;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.33 2006/05/18 09:13:29 jmc Exp $
d347 8
d367 3
@


1.33
log
@tidy up point 10;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.32 2006/05/18 09:06:32 jmc Exp $
d318 20
d361 1
@


1.32
log
@make swap example work on diskless boots;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.31 2006/05/18 09:03:03 jmc Exp $
d310 1
a310 1
.Pa /etc/fstab
d312 1
a312 2
.Pa /export/myclient/root/etc/fstab )
i.e.,
@


1.31
log
@otto's example of how to convert an IP address to hex;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.30 2006/05/17 21:38:44 jmc Exp $
d233 1
a233 1
          swap=server:/export/myclient/swap
d244 2
a245 2
# mkdir /export/myclient
# cd /export/myclient
d297 1
a297 1
# cp fstab.nfs fstab
d307 3
a309 1
Correct the critical mount points in the client's
d317 1
@


1.30
log
@section fixes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.29 2006/05/17 21:33:07 jmc Exp $
d202 6
@


1.29
log
@make the phase 2 and 3 lists more consistent with each other;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.28 2006/05/17 21:29:35 jmc Exp $
d47 1
a47 1
.Sh OPERATION
d138 1
a138 1
.Sh CONFIGURATION
d312 13
a324 13
.Bl -tag -width /usr/mdec/rbootd -compact
.It Pa /etc/bootparams
client root and swap pathnames
.It Pa /etc/ethers
Ethernet addresses of known clients
.It Pa /etc/exports
exported NFS mount points
.It Pa /etc/rbootd.conf
configuration file for HP Remote Boot Daemon
.It Pa /tftpboot
location of boot programs loaded by the Sun PROM
.It Pa /usr/mdec/rbootd
location of boot programs loaded by the HP Boot ROM
@


1.28
log
@remove a pile of pesky .Tn macros;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.27 2006/05/17 21:24:04 jmc Exp $
d81 1
a81 1
The boot program:
d85 1
d88 1
d92 1
d96 1
d101 1
d105 1
d109 1
@


1.27
log
@final -enum replacement with text adjusted accordingly;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.26 2006/05/17 21:10:45 jmc Exp $
d67 3
a69 9
Sun and Motorola machines use
.Tn RARP
to determine the client's
.Tn IP
address and then use
.Tn TFTP
to download a boot program from whoever sent the
.Tn RARP
reply.
d71 1
a71 1
.Tn HP Remote Maintenance Protocol
d85 1
a85 2
gets the client IP address using
.Tn RARP .
d87 5
a91 10
gets the client name and server
.Tn IP
address by broadcasting an
.Tn RPC / BOOTPARAMS / WHOAMI
request with the client IP address.
.It
gets the server path for this client's
root using an
.Tn RPC / BOOTPARAMS / GETFILE
request with the client name.
d98 1
a98 2
.Tn NFS
lookup on the root file handle.
d101 1
a101 2
.Tn NFS
read calls on the kernel file handle.
d119 1
a119 2
The kernel gets the
.Tn NFS
d123 1
a123 2
The kernel calls the
.Tn NFS
d127 2
a128 4
If the kernel is configured for swap on
.Tn NFS ,
it uses the same mechanism as for root, but uses the
.Tn NFS
@


1.26
log
@small cleanup;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.25 2006/05/17 21:05:54 jmc Exp $
d62 3
a64 1
In phase 1, the PROM loads a boot program.
d83 3
a85 1
In phase 2, the boot program loads a kernel.
d89 2
a90 2
.Bl -tag -width 2.2 -compact
.It 2.1
d93 1
a93 1
.It 2.2
d99 1
a99 1
.It 2.3
d104 1
a104 1
.It 2.4
d108 1
a108 1
.It 2.5
d112 1
a112 1
.It 2.6
d116 1
a116 1
.It 2.7
d120 3
a122 1
In phase 3, the kernel does NFS mounts for root and swap.
d128 2
a129 2
.Bl -tag -width 2.2 -compact
.It 3.1
d131 2
a132 2
as described in steps 2.1 and 2.2 above.
.It 3.2
d136 2
a137 2
as described in steps 2.3 through 2.5 above.
.It 3.3
d142 1
a142 1
.It 3.4
@


1.25
log
@use -enum lists instead of manually numbering them;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.24 2004/12/20 22:12:43 jsg Exp $
d231 1
a231 1
myclient  root=server:/export/myclient/root \\
d298 2
a299 2
# echo myclient > myname
# echo inet 192.197.96.12 > hostname.le0
d318 2
a321 2
.It Pa /etc/bootparams
client root and swap pathnames
d335 1
a339 1
.Xr reboot 8 ,
d341 1
@


1.24
log
@ethernet -> Ethernet
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.23 2004/04/09 21:42:25 jmc Exp $
d51 2
a52 2
.Bl -tag -width 1.2 -compact
.It 1.
d54 1
a54 1
.It 2.
d56 1
a56 1
.It 3.
d151 2
a152 2
.Bl -tag -width 2.1
.It 1.
d163 1
a163 1
.It 2.
d171 1
a171 1
.It 3.
d191 1
a191 1
.It 4.
d227 1
a227 1
.It 5.
d240 1
a240 1
.It 6.
d250 1
a250 1
.It 7.
d261 1
a261 1
.It 8.
d291 1
a291 1
.It 9.
d305 1
a305 1
.It 10.
@


1.23
log
@spacing;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.22 2003/06/06 19:28:06 jmc Exp $
d155 1
a155 1
corresponding to the client's ethernet address:
@


1.22
log
@- section reorder
- macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.21 2002/12/13 12:09:21 deraadt Exp $
d151 1
a151 2
.Pp
.Bl -tag -width 2.1 -compact
d156 1
a156 1
.Bd -literal -offset indent -compact
d159 1
d167 1
a167 1
.Bd -literal -offset indent -compact
d183 1
a183 1
.Bd -literal -offset indent -compact
d204 1
a204 1
.Bd -literal -offset indent -compact
d230 1
a230 1
.Bd -literal -offset indent -compact
d234 1
d242 1
a242 1
.Bd -literal -offset indent -compact
d247 1
d264 1
a264 1
.Bd -literal -offset indent -compact
d286 1
a286 1
.Bd -literal -offset indent -compact
d294 1
a294 1
.Bd -literal -offset indent -compact
d311 1
a311 1
.Bd -literal -offset indent -compact
@


1.21
log
@remove a joke: "16 Megabyte swap file"
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.20 2002/10/31 01:43:59 millert Exp $
d252 1
a252 1
How this is done depends on the client architecture and the version of the 
@


1.20
log
@There's no point in using a small block size when creating a swap
partition, it just slows down dd.
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.19 2002/08/29 07:34:31 wcobb Exp $
d244 1
a244 1
# dd if=/dev/zero of=swap bs=1m count=16
d246 1
a246 1
This creates a 16 Megabyte swap file.
@


1.19
log
@- replace empty lines by .Pp where appropriate.
- no empty lines at end of file.
ok mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.18 2002/05/23 09:30:35 mpech Exp $
d244 1
a244 1
# dd if=/dev/zero of=swap bs=16k count=1024
@


1.18
log
@'SEE ALSO' audit in 'share/man/':
o) sort;
o) "," is separator of entries;
o) don't use "." or "," in the last entry;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.17 2001/11/13 13:54:26 mpech Exp $
d226 1
a226 1

@


1.17
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.16 2001/10/05 14:45:54 mpech Exp $
d330 1
a330 1
.Xr rarpd 8 ,
d332 1
a332 3
.Xr tftpd 8 ,
.Xr rpc.bootparamd 8 ,
.Xr bootparams 5 ,
a333 1
.Xr exports 5 ,
d335 1
d337 3
a339 1
.Xr reboot 8
@


1.16
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.15 2001/09/20 15:39:57 miod Exp $
d38 1
a38 1
.Xr diskless
d40 1
a40 1
.Xr dataless
@


1.15
log
@Mention that ultrasparc proms don't append the architecture name
to the file name they request via tftp.
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.14 2001/08/17 11:13:58 mpech Exp $
d81 2
a82 2
In phase 2, the boot program loads a kernel.  Operation in
this phase depends on the design of the boot program.
d210 2
a211 1
architecture name. It this case, the name would be just C0C5600C.
d234 4
a237 4
Note that some bootparam servers are somewhat sensitive.  Some require
fully qualified hostnames or partially qualified hostnames (which can
be solved by having both fully and partially qualified entries). Other
servers are case sensitive.
d251 2
a252 2
filesystem on the server.  How this is done depends on the
client architecture and the version of the 
@


1.14
log
@o) {Open,Net,Free}BSD -> .{O,N,F}x;
o) "start sentence on new line" issues;
o) minimal -mdoc improvements;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.13 2001/08/03 15:21:17 mpech Exp $
d209 3
a211 3
For a Sun3 machine, the name would be just C0C5600C
(the sun3 PROM does not append the architecture name). The name
used is architecture dependent, it simply has to match what the
@


1.13
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.12 2000/12/28 22:24:00 miod Exp $
d195 3
a197 1
from the root directory of the OpenBSD sparc tree) in the
d251 3
a253 1
client architecture and the version of the OpenBSD distribution.
@


1.12
log
@We don't provide SYS_NBOOT for netbooting hp300 machines, SYS_UBOOT is
able to do this job. aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.11 2000/01/22 02:17:54 aaron Exp $
a46 1
.Pp
@


1.11
log
@ie. -> i.e.,
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.10 2000/01/03 20:04:26 pjanzen Exp $
d185 1
a185 1
08:00:09:01:23:E6	SYS_NBOOT	# myclient
d216 3
a218 2
If booting an HP 300-series machine, ensure that the network boot program
.Pa SYS_NBOOT
@


1.10
log
@.Sh "SEE ALSO" -> .Sh SEE ALSO
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.9 1999/07/09 13:35:36 aaron Exp $
d303 1
a303 1
ie.
@


1.9
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.8 1999/05/07 22:03:09 jason Exp $
d324 1
a324 1
.Sh "SEE ALSO"
@


1.8
log
@Suggest use of boot.net instead of the SunOS loader; suggested by jlockard@@math.lsa.umich.edu.
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.7 1996/12/10 18:37:53 deraadt Exp $
d155 1
a155 1
Add an entry to 
@


1.7
log
@motorola stuff is similar to sun
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.6 1996/10/07 20:59:25 deraadt Exp $
d195 2
a196 2
.Pa boot.sun4.sunos.4.1.1
from the SunOS media) in the
d205 1
a205 1
# ln -s boot.sun4.sunos.4.1.1 C0C5600C.SUN4
@


1.6
log
@warn about bootparamd server weaknesses
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.5 1996/08/31 12:57:36 pefo Exp $
d63 4
a66 3
In phase 1, the PROM loads a boot program.  PROM designs
vary widely, so this phase is inherently machine-specific.
Sun machines use
d74 2
a75 1
reply.  HP 300-series machines use the
d78 1
a78 1
Typical personal computers may load a
a83 1
(The design described here is the one used by Sun and OpenBSD/hp300.)
d173 1
a173 1
If booting a Sun machine, ensure that
d193 2
a194 2
If booting a Sun machine, install a copy of the appropriate diskless boot
loader (such as
@


1.5
log
@error in hostname
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.4 1996/06/11 07:10:54 deraadt Exp $
d230 4
@


1.4
log
@OpenBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: diskless.8,v 1.3 1996/06/10 04:44:27 deraadt Exp $
d287 1
a287 1
# echo 192.197.96.12 > hostname.le0
@


1.3
log
@clean
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d32 1
a32 1
.Os NetBSD
d82 1
a82 1
(The design described here is the one used by Sun and NetBSD/hp300.)
d244 1
a244 1
client architecture and the version of the NetBSD distribution.
d256 1
a256 1
# for NetBSD:
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d2 1
a2 1
.\"	$NetBSD: diskless.8,v 1.7 1996/02/18 01:10:55 hpeyerl Exp $
d74 1
a74 1
.Tn HP Remote Maintainance Protocol
d141 1
a141 1
getattr funciton to determine the size of the swap area.
d179 1
a179 1
If booting an HP 300-sseries machine, ensure that
d199 1
a199 1
accessible by a file name composed of the client's IP adddress
d294 1
a294 1
Correct the critical mountpoints in the client's
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
.\"	$NetBSD: diskless.8,v 1.6 1995/09/02 17:12:32 thorpej Exp $
d257 1
a257 1
/export/myclient -maproot=root myclient
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
