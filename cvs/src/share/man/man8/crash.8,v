head	1.35;
access;
symbols
	OPENBSD_6_2:1.35.0.2
	OPENBSD_6_2_BASE:1.35
	OPENBSD_6_1:1.35.0.4
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.34.0.4
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.33.0.22
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.14
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.18
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.16
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.12
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.33.0.10
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.33.0.8
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.6
	OPENBSD_5_0:1.33.0.4
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.2
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.31.0.6
	OPENBSD_4_8_BASE:1.31
	OPENBSD_4_7:1.31.0.2
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.31.0.4
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.29.0.2
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.27.0.6
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.4
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.26.0.2
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.25.0.2
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.22.0.8
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.6
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.17.0.2
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.16.0.4
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5;
locks; strict;
comment	@.\" @;


1.35
date	2016.11.29.13.57.34;	author mpi;	state Exp;
branches;
next	1.34;
commitid	Q8xjILOJBR25fwgU;

1.34
date	2015.09.25.17.50.39;	author miod;	state Exp;
branches;
next	1.33;
commitid	XDPuxm3tB9zaXOnH;

1.33
date	2010.11.08.15.52.05;	author sobrado;	state Exp;
branches;
next	1.32;

1.32
date	2010.08.09.20.33.58;	author ray;	state Exp;
branches;
next	1.31;

1.31
date	2009.04.02.13.18.24;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2009.04.01.22.03.40;	author kettenis;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.24.17.15.34;	author ray;	state Exp;
branches;
next	1.28;

1.28
date	2008.12.18.22.23.53;	author sthen;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.31.19.19.59;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2007.01.10.16.33.10;	author tom;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.09.21.33.40;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.26.20.17.13;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.26.07.48.40;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2004.08.14.06.25.58;	author david;	state Exp;
branches;
next	1.21;

1.21
date	2004.08.13.22.07.14;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.01.12.21.16;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.28.14.27.20;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.23.30.15;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.06.20.40.35;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.02.06.07.41;	author nordin;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.07.18.25.50;	author mpech;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.22.08.16.50;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.03.15.21.17;	author mpech;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.01.16.11.23;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.22.16.54.38;	author avsm;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.20.08.00.04;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.26.16.08.58;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.13.04.09.22;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.06.16.43.17;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.17.02.32.47;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.22.03.05.51;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.18.21.26.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.02.14.46.49;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.28.22.36.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Some tweaks reflecting that DEBUG=-g is the default for building kernels.

With jmc@@
@
text
@.\"	$OpenBSD: crash.8,v 1.34 2015/09/25 17:50:39 miod Exp $
.\"
.\" Copyright (c) 1980, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	from: @@(#)crash.8	6.5 (Berkeley) 4/20/91
.\"
.Dd $Mdocdate: September 25 2015 $
.Dt CRASH 8
.Os
.Sh NAME
.Nm crash
.Nd system failure and diagnosis
.Sh DESCRIPTION
This section explains what happens when the system crashes
and (very briefly) how to analyze crash dumps.
.Pp
When the system crashes voluntarily it prints a message of the form
.Bd -literal -offset indent
panic: why i gave up the ghost
.Ed
.Pp
on the console and enters the kernel debugger,
.Xr ddb 4 .
.Pp
If you wish to report this panic, you should include the output of
the
.Ic ps
and
.Ic trace
commands.
Unless the
.Sq ddb.log
sysctl has been disabled, anything output to screen will be
appended to the system message buffer, from where it may be
possible to retrieve it through the
.Xr dmesg 8
command after a warm reboot.
If the debugger command
.Ic boot dump
is entered, or if the debugger was not compiled into the kernel, or
the debugger was disabled with
.Xr sysctl 8 ,
then the system dumps the contents of physical memory
onto a mass storage peripheral device.
The particular device used is determined by the
.Sq dumps on
directive in the
.Xr config 8
file used to build the kernel.
.Pp
After the dump has been written, the system then
invokes the automatic reboot procedure as
described in
.Xr reboot 8 .
If auto-reboot is disabled (in a machine dependent way) the system
will simply halt at this point.
.Pp
Upon rebooting, and
unless some unexpected inconsistency is encountered in the state
of the file systems due to hardware or software failure, the system
will copy the previously written dump into
.Pa /var/crash
using
.Xr savecore 8 ,
before resuming multi-user operations.
.Ss Causes of system failure
The system has a large number of internal consistency checks; if one
of these fails, then it will panic with a very short message indicating
which one failed.
In many instances, this will be the name of the routine which detected
the error, or a two-word description of the inconsistency.
A full understanding of most panic messages requires perusal of the
source code for the system.
.Pp
The most common cause of system failures is hardware failure
.Pq e.g., bad memory
which
can reflect itself in different ways.
Here are the messages which are most likely, with some hints as to causes.
Left unstated in all cases is the possibility that a hardware or software
error produced the message in some unexpected way.
.Bl -tag -width indent
.It no init
This panic message indicates filesystem problems, and reboots are likely
to be futile.
Late in the bootstrap procedure, the system was unable to
locate and execute the initialization process,
.Xr init 8 .
The root filesystem is incorrect or has been corrupted, or the mode
or type of
.Pa /sbin/init
forbids execution.
.It trap type %d, code=%x, pc=%x
A unexpected trap has occurred within the system; the trap types are
machine dependent and can be found listed in
.Pa /sys/arch/ARCH/include/trap.h .
.Pp
The code is the referenced address, and the pc is the program counter at the
time of the fault is printed.
Hardware flakiness will sometimes generate this panic, but if the cause
is a kernel bug,
the kernel debugger
.Xr ddb 4
can be used to locate the instruction and subroutine inside the kernel
corresponding
to the PC value.
If that is insufficient to suggest the nature of the problem,
more detailed examination of the system status at the time of the trap
usually can produce an explanation.
.It init died
The system initialization process has exited.
This is bad news, as no new users will then be able to log in.
Rebooting is the only fix, so the system just does it right away.
.It out of mbufs: map full
The network has exhausted its private page map for network buffers.
This usually indicates that buffers are being lost, and rather than
allow the system to slowly degrade, it reboots immediately.
The map may be made larger if necessary.
.El
.Pp
That completes the list of panic types you are likely to see.
.Ss Analyzing a dump
When the system crashes it writes (or at least attempts to write)
an image of memory, including the kernel image, onto the dump device.
On reboot, the kernel image and memory image are separated and preserved in
the directory
.Pa /var/crash .
.Pp
To analyze the kernel and memory images preserved as
.Pa bsd.0
and
.Pa bsd.0.core ,
you should run
.Xr gdb 1 ,
loading in the images with the following commands:
.Bd -literal -offset indent
# gdb
GNU gdb 6.3
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "i386-unknown-openbsd4.6".
(gdb) file /var/crash/bsd.0
Reading symbols from /var/crash/bsd.0...(no debugging symbols found)...done.
(gdb) target kvm /var/crash/bsd.0.core
.Ed
.Pp
[Note that the
.Dq kvm
target is currently only supported by
.Xr gdb 1
on some architectures.]
.Pp
After this, you can use the
.Ic where
command to show trace of procedure calls that led to the crash.
.Pp
For custom-built kernels, you should use
.Pa bsd.gdb
instead of
.Pa bsd ,
thus allowing
.Xr gdb 1
to show symbolic names for addresses and line numbers from the source.
.Pp
Analyzing saved system images is sometimes called post-mortem debugging.
There are a class of analysis tools designed to work on
both live systems and saved images, most of them are linked with the
.Xr kvm 3
library and share option flags to specify the kernel and memory image.
These tools typically take the following flags:
.Bl -tag -width indent
.It Fl M Ar core
Normally this
.Ar core
is an image produced by
.Xr savecore 8
but it can be
.Pa /dev/mem
too, if you are looking at the live system.
.It Fl N Ar system
Takes a kernel
.Ar system
image as an argument.
This is where the symbolic information is gotten from,
which means the image cannot be stripped.
In some cases, using a
.Pa bsd.gdb
version of the kernel can assist even more.
.El
.Pp
The following commands understand these options:
.Xr fstat 1 ,
.Xr netstat 1 ,
.Xr nfsstat 1 ,
.Xr ps 1 ,
.Xr w 1 ,
.Xr dmesg 8 ,
.Xr iostat 8 ,
.Xr kgmon 8 ,
.Xr pstat 8 ,
.Xr trpt 8 ,
.Xr vmstat 8
and many others.
There are exceptions, however.
For instance,
.Xr ipcs 1
has renamed the
.Fl M
argument to be
.Fl C
instead.
.Pp
Examples of use:
.Bd -literal -offset indent
# ps -N /var/crash/bsd.0 -M /var/crash/bsd.0.core -O paddr
.Ed
.Pp
The
.Fl O Ar paddr
option prints each process'
.Li struct proc
address.
This is very useful information if you are analyzing process contexts in
.Xr gdb 1 .
.Bd -literal -offset indent
# vmstat -N /var/crash/bsd.0 -M /var/crash/bsd.0.core -m
.Ed
.Pp
This analyzes memory allocations at the time of the crash.
Perhaps some resource was starving the system?
.Ss Analyzing a live kernel
Like the tools mentioned above,
.Xr gdb 1
can be used to analyze a live system as well.
This can be accomplished by not specifying a crash dump when selecting the
.Dq kvm
target:
.Bd -literal -offset indent
(gdb) target kvm
.Ed
.Pp
It is possible to inspect processes that entered the kernel by
specifying a process'
.Li struct proc
address to the
.Ic kvm proc
command:
.Bd -literal -offset indent
(gdb) kvm proc 0xd69dada0
#0  0xd0355d91 in sleep_finish (sls=0x0, do_sleep=0)
    at ../../../../kern/kern_synch.c:217
217                     mi_switch();
.Ed
.Pp
After this, the
.Ic where
command will show a trace of procedure calls, right back to where the
selected process entered the kernel.
.Sh CRASH LOCATION DETERMINATION
The following example should make it easier for a novice kernel
developer to find out where the kernel crashed.
.Pp
First, in
.Xr ddb 4
find the function that caused the crash.
It is either the function at the top of the traceback or the function
under the call to
.Fn panic
or
.Fn uvm_fault .
.Pp
The point of the crash usually looks something like this "function+0x4711".
.Pp
Find the function in the sources, let's say that the function is in "foo.c".
.Pp
Go to the kernel build directory, e.g.,
.Pa /sys/arch/ARCH/compile/GENERIC ,
and do the following:
.Bd -literal -offset indent
# objdump -S foo.o | less
.Ed
.Pp
Find the function in the output.
The function will look something like this:
.Bd -literal -offset indent
0: 17 47 11 42         foo %x, bar, %y
4: foo bar             allan %kaka
8: XXXX                boink %bloyt
etc.
.Ed
.Pp
The first number is the offset.
Find the offset that you got in the ddb trace
(in this case it's 4711).
.Pp
When reporting data collected in this way, include ~20 lines before and ~10
lines after the offset from the objdump output in the crash report, as well
as the output of
.Xr ddb 4 Ns 's
"show registers" command.
It's important that the output from objdump includes at least two or
three lines of C code.
.Sh REPORTING
If you are sure you have found a reproducible software bug in the kernel,
and need help in further diagnosis, or already have a fix, use
.Xr sendbug 1
to send the developers a detailed description including the entire session
from
.Xr gdb 1 .
.Sh SEE ALSO
.Xr gdb 1 ,
.Xr sendbug 1 ,
.Xr ddb 4 ,
.Xr reboot 8 ,
.Xr savecore 8
@


1.34
log
@Since bin/ps/keyword.c 1.30 five years ago, ps -O paddr prints the complete
address; do not mention a KERNBASE adjustment anymore.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.33 2010/11/08 15:52:05 sobrado Exp $
d32 1
a32 1
.Dd $Mdocdate: November 8 2010 $
d185 1
a185 7
For custom-built kernels, it is helpful if you had previously
configured your kernel to include debugging symbols with
.Sq makeoptions DEBUG="-g"
.Pq see Xr options 4
(though you will not be able to boot an unstripped kernel since it uses too
much memory).
In this case, you should use
d188 1
a188 1
.Pa bsd.0 ,
d305 2
a306 3
.Pa /sys/arch/ARCH/compile/GENERIC .
.Pp
Do the following:
a307 2
# rm foo.o
# make DEBUG=-g foo.o
@


1.33
log
@neither systat(1) nor slstats(8) understands `-M core' and `-N system';
while here, sort these options.

ok jmc@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.32 2010/08/09 20:33:58 ray Exp $
d32 1
a32 1
.Dd $Mdocdate: August 9 2010 $
d256 1
a256 1
address, but with the value of KERNBASE masked off.
a258 2
You need to add back KERNBASE though, that value can be found in
.Pa /usr/include/$ARCH/param.h .
@


1.32
log
@Remove extra space.

OK jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.31 2009/04/02 13:18:24 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: April 2 2009 $
d206 8
a222 8
.It Fl M Ar core
Normally this
.Ar core
is an image produced by
.Xr savecore 8
but it can be
.Pa /dev/mem
too, if you are looking at the live system.
a229 1
.Xr systat 1 ,
a234 1
.Xr slstats 8 ,
@


1.31
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.30 2009/04/01 22:03:40 kettenis Exp $
d32 1
a32 1
.Dd $Mdocdate: April 1 2009 $
d264 1
a264 1
 # vmstat -N /var/crash/bsd.0 -M /var/crash/bsd.0.core -m
@


1.30
log
@Give some hints about debugging live kernels with gdb(1).
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.29 2008/12/24 17:15:34 ray Exp $
d32 1
a32 1
.Dd $Mdocdate: December 24 2008 $
d270 1
a270 1
Like the tools mentioned above
d284 1
a284 1
.IC kvm proc
d295 1
a295 1
command will show a trace of prodecure calls, right back to where the
@


1.29
log
@Add quotes around DEBUG value, otherwise config doesn't like it.
While here, change -ggdb to -g (by kettenis).

OK millert and kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.28 2008/12/18 22:23:53 sthen Exp $
d32 1
a32 1
.Dd $Mdocdate: December 18 2008 $
d163 1
a163 1
GNU gdb 6.1
d169 1
a169 1
This GDB was configured as "i386-unknown-openbsd3.6".
d269 28
@


1.28
log
@ddb.log is enabled by default, so use "unless disabled" rather
than "if enabled". ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.27 2007/05/31 19:19:59 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: May 31 2007 $
d187 1
a187 1
.Sq makeoptions DEBUG=-ggdb
@


1.27
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.26 2007/01/10 16:33:10 tom Exp $
d32 1
a32 1
.Dd $Mdocdate$
d56 1
a56 1
If the
d58 1
a58 1
sysctl has been enabled, anything output to screen will be
@


1.26
log
@An example should use "e.g." ("for example") rather than "i.e."
("that is").

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.25 2006/05/09 21:33:40 jmc Exp $
d32 1
a32 1
.Dd February 23, 2000
@


1.25
log
@note that only some archs (currently) support target "kvm";

from nikns (pr #5103);
ok kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.24 2006/04/26 20:17:13 jmc Exp $
d286 1
a286 1
Go to the kernel build directory, i.e.,
@


1.24
log
@make example shell independent; from mickey
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.23 2006/04/26 07:48:40 jmc Exp $
d174 6
@


1.23
log
@simpler; from michael knudsen
ok krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.22 2004/08/14 06:25:58 david Exp $
d286 1
a286 1
# DEBUG=-g make foo.o
@


1.22
log
@i386-unknown-openbsd3.6, not 3.5; ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.21 2004/08/13 22:07:14 kettenis Exp $
d286 1
a286 1
# make -n foo.o | sed 's,-c,-g -c,' | sh
@


1.21
log
@Update for new gdb.
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.20 2004/02/01 12:21:16 jmc Exp $
d169 1
a169 1
This GDB was configured as "i386-unknown-openbsd3.5".
@


1.20
log
@note that ps/trace output should be included with crash reports,
and that it can be retreived with the help of ddb.log and dmesg(8);

from Sam Smith;
agreed with tedu@@

also kill .Pp's before displays, and use -indent;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.19 2003/06/28 14:27:20 jmc Exp $
d163 2
a164 2
GNU gdb 4.16.1
Copyright 1996 Free Software Foundation, Inc.
d168 2
a169 3
There is absolutely no warranty for GDB.
Type "show warranty" for details.
This GDB was configured as "i386-unknown-openbsd2.8".
d172 1
a172 1
(gdb) target kcore /var/crash/bsd.0.core
@


1.19
log
@Goto -> Go to;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.18 2003/06/02 23:30:15 millert Exp $
d43 2
a44 3
.Pp
.Bd -literal
        panic: why i gave up the ghost
d49 14
a160 1
.Pp
d245 2
a246 3
.Pp
.Bd -literal
    # ps -N /var/crash/bsd.0 -M /var/crash/bsd.0.core -O paddr
d258 2
a259 3
.Pp
.Bd -literal
    # vmstat -N /var/crash/bsd.0 -M /var/crash/bsd.0.core -m
d285 4
a288 4
.Bd -literal
    # rm foo.o
    # make -n foo.o | sed 's,-c,-g -c,' | sh
    # objdump -S foo.o | less
d293 5
a297 6
.Pp
.Bd -literal
     0: 17 47 11 42         foo %x, bar, %y
     4: foo bar             allan %kaka
     8: XXXX                boink %bloyt
    etc.
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.17 2003/03/06 20:40:35 jmc Exp $
d271 1
a271 1
Goto the kernel build directory, i.e.,
@


1.17
log
@.Xr typos, and some dead ones;

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.16 2002/01/02 06:07:41 nordin Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@Remove reference to timeout table. deraadt@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.15 2001/12/07 18:25:50 mpech Exp $
a224 1
.Xr trsp 8 ,
@


1.15
log
@sort SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.14 2001/10/05 14:45:54 mpech Exp $
a108 5
.It timeout table overflow
.ns
This really shouldn't be a panic, but until the data structure
involved is made to be extensible, running out of entries causes a crash.
If this happens, make the timeout table bigger.
@


1.14
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.13 2001/08/22 08:16:50 niklas Exp $
d319 1
a319 1
.Sh "SEE ALSO"
d321 1
d324 1
a324 2
.Xr savecore 8 ,
.Xr sendbug 1
@


1.13
log
@Correct stuff about ps -Opaddr
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.12 2001/08/03 15:21:17 mpech Exp $
d165 2
a166 1
There is absolutely no warranty for GDB.  Type "show warranty" for details.
d305 3
a307 3
When reporting data collected in this way, include ~20 lines before and ~10 lines
after the offset from the objdump output in the crash report, as well as the output
of
@


1.12
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.11 2001/03/01 16:11:23 aaron Exp $
d249 1
a249 1
option gives the last 6 hexadecimal digits of the
d251 1
a251 1
pointer for each process.
d254 2
a255 4
The preceding digits have to be guessed, but that is not very difficult;
they are the start of the kvm space and is defined by machine-dependent
sizes given in
.Pa /usr/include/$ARCH/vmparam.h .
@


1.11
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.10 2000/12/22 16:54:38 avsm Exp $
a264 1
.Pp
a312 1
.Pp
@


1.10
log
@smite typos, and add RCS tags where missing; aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.9 2000/11/20 08:00:04 deraadt Exp $
d221 1
a227 1
.Xr systat 1 ,
@


1.9
log
@various Xr fixes; nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.8 2000/10/26 16:08:58 aaron Exp $
d192 1
a192 1
both live sysems and saved images, most of them are linked with the
@


1.8
log
@Fix some grammar issues; jcs@@rt.fm. Make a few other improvements while we're
here. Closes PR/1475.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.7 2000/10/13 04:09:22 aaron Exp $
d219 1
a224 1
.Xr nfsstat 8 ,
d227 1
a227 1
.Xr systat 8 ,
@


1.7
log
@Remove unwanted trailing whitespace.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.6 2000/09/06 16:43:17 deraadt Exp $
d94 2
a95 2
can reflect itself in different ways.  Here are the messages which
are most likely, with some hints as to causes.
d101 2
a102 1
to be futile.  Late in the bootstrap procedure, the system was unable to
d132 3
a134 3
The system initialization process has exited.  This is bad news, as no new
users will then be able to log in.  Rebooting is the only fix, so the
system just does it right away.
d158 12
a169 12
.Bd -literal
    # gdb
    GNU gdb 4.16.1
    Copyright 1996 Free Software Foundation, Inc.
    GDB is free software, covered by the GNU General Public License, and you are
    welcome to change it and/or distribute copies of it under certain conditions.
    Type "show copying" to see the conditions.
    There is absolutely no warranty for GDB.  Type "show warranty" for details.
    This GDB was configured as "i386-unknown-openbsd2.8".
    (gdb) file /var/crash/bsd.0
    Reading symbols from /var/crash/bsd.0...(no debugging symbols found)...done.
    (gdb) target kcore /var/crash/bsd.0.core
d190 2
a191 2
Analyzing saved system images is sometimes called post-mortem
debugging.  There are a class of analysis tools designed to work on
d216 1
a216 1
Commands that understands these options consists of:
d232 2
a233 1
There are exceptions too, for instance,
d247 6
a252 3
The "-O paddr" option gives the last 6 hexadecimal digits of the
struct proc pointer for each process.  This is very useful
information if you are analyzing process contexts in
d254 4
a257 4
The preceeding digits has to be guessed, but it is hardly very
difficult, it's the start of the kvm space and is defined by
machine dependent sizes given in
.Pa /usr/include/sys/vmparam.h .
d263 2
a264 2
This analyzes memory allocations at the time of the crash.  Perhaps some
resource was starving the system?
d269 1
a269 1

d272 6
a277 3
find the function that caused the crash. It is either the function
in top on the trace or the function under the call to
"panic()" or "uvm_fault".
d283 1
a283 1
Goto the kernel build directory, i.e.
d293 2
a294 1
Find the function in the output. The function will look something like this:
@


1.6
log
@much more meat, but objdump is still broken..
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.5 2000/04/17 02:32:47 aaron Exp $
d67 1
a67 1
After the dump has been written, the system then 
d121 1
a121 1
is a kernel bug, 
d151 1
a151 1
and 
d207 1
a207 1
.Ar core 
@


1.5
log
@Move some misplaced periods outside of the parentheses.
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.4 2000/03/22 03:05:51 aaron Exp $
d105 3
a107 1
or type of /sbin/init forbids execution.
d158 11
a168 2
	file /var/crash/bsd.0
        target kcore /var/crash/bsd.0.core
d189 118
@


1.4
log
@Some fixes; d@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.3 2000/03/18 21:26:28 deraadt Exp $
d92 1
a92 1
.Pq e.g. bad memory
d169 1
a169 1
much memory.)
@


1.3
log
@more details; d
@
text
@d1 2
a2 1
.\"	$OpenBSD: crash.8,v 1.2 2000/03/02 14:46:49 todd Exp $
d37 1
a37 1
.Dt crash 8
d56 1
a56 1
is enterred, or if the debugger was not compiled into the kernel, or
d144 1
d147 1
a147 1
To analyze the kernel and memory images preserved in
d153 1
a153 1
loading them in with the following commands:
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
.\"	$OpenBSD: crash.8,v 1.1 2000/02/28 22:36:42 deraadt Exp $
d51 17
a67 7
on the console, and enters the kernel debugger
.Xr ddb 4
if it is compiled into the kernel.
If
.Xr ddb 4
is not in the kernel, the system takes a dump on a mass storage
peripheral, and then invokes an automatic reboot procedure as
d70 5
a74 3
(If auto-reboot is disabled (in a machine dependent way) the system
will simply halt at this point.)
Unless some unexpected inconsistency is encountered in the state
d76 6
a81 2
will then resume multi-user operations.
.Pp
d90 3
a92 1
The most common cause of system failures is hardware failure, which
d95 1
a95 1
Left unstated in all cases is the possibility that hardware or software
d115 5
a119 5
The code is the referenced address, and the pc at the
time of the fault is printed.  These problems tend to be easy to track
down if they are kernel bugs since the processor stops cold, but random
flakiness seems to cause this sometimes.
The kernel debugger
d121 2
a122 1
can be used to locate the instruction and subroutine corresponding
d139 1
a139 1
.Pp
d141 11
a151 12
an image of memory into the back end of the dump device,
usually the same as the primary swap
area.  After the system is rebooted, the program
.Xr savecore 8
runs and preserves a copy of this core image and the current
system in a specified directory for later perusal.  See
.Xr savecore 8
for details.
.Pp
To analyze a dump you should begin by running
.Xr gdb 1 .
Once gdb starts, use the command
d154 2
a155 1
        target kcore /dev/mem
a156 1
NIKLAS NIKLAS.
d158 24
a181 1
Then a traceback and other such things can be gotten.
d185 3
a187 1
.Xr reboot 8
@


1.1
log
@add start of a crash page
@
text
@d1 1
a33 1
.\"	$Id: crash.8,v 1.2 1998/09/01 16:38:23 deraadt Exp $
@

