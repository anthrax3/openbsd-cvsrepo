head	1.110;
access;
symbols
	OPENBSD_3_9:1.107.0.2
	OPENBSD_3_9_BASE:1.107
	OPENBSD_3_8:1.106.0.2
	OPENBSD_3_8_BASE:1.106
	OPENBSD_3_7:1.76.0.2
	OPENBSD_3_7_BASE:1.76
	OPENBSD_3_6:1.75.0.2
	OPENBSD_3_6_BASE:1.75
	OPENBSD_3_5:1.73.0.2
	OPENBSD_3_5_BASE:1.73
	OPENBSD_3_4:1.70.0.2
	OPENBSD_3_4_BASE:1.70
	OPENBSD_3_3:1.64.0.4
	OPENBSD_3_3_BASE:1.64
	OPENBSD_3_2:1.64.0.2
	OPENBSD_3_2_BASE:1.64
	OPENBSD_3_1:1.62.0.2
	OPENBSD_3_1_BASE:1.62
	OPENBSD_3_0:1.56.0.2
	OPENBSD_3_0_BASE:1.56
	OPENBSD_2_9:1.50.0.2
	OPENBSD_2_9_BASE:1.50
	OPENBSD_2_8:1.46.0.2
	OPENBSD_2_8_BASE:1.46
	OPENBSD_2_7:1.38.0.2
	OPENBSD_2_7_BASE:1.38
	OPENBSD_2_6:1.26.0.2
	OPENBSD_2_6_BASE:1.26
	OPENBSD_2_5:1.14.0.2
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6;
locks; strict;
comment	@.\" @;


1.110
date	2006.05.26.04.02.59;	author deraadt;	state dead;
branches;
next	1.109;

1.109
date	2006.05.02.21.14.43;	author jmc;	state Exp;
branches;
next	1.108;

1.108
date	2006.03.10.04.29.49;	author david;	state Exp;
branches;
next	1.107;

1.107
date	2005.12.23.18.19.30;	author jmc;	state Exp;
branches;
next	1.106;

1.106
date	2005.08.19.15.38.39;	author jmc;	state Exp;
branches;
next	1.105;

1.105
date	2005.08.19.08.55.56;	author hshoexer;	state Exp;
branches;
next	1.104;

1.104
date	2005.06.07.09.09.50;	author jmc;	state Exp;
branches;
next	1.103;

1.103
date	2005.05.24.04.29.51;	author david;	state Exp;
branches;
next	1.102;

1.102
date	2005.04.27.14.22.27;	author jmc;	state Exp;
branches;
next	1.101;

1.101
date	2005.04.23.08.40.52;	author jmc;	state Exp;
branches;
next	1.100;

1.100
date	2005.04.21.10.50.50;	author jmc;	state Exp;
branches;
next	1.99;

1.99
date	2005.04.21.10.13.59;	author jmc;	state Exp;
branches;
next	1.98;

1.98
date	2005.04.21.09.37.25;	author jmc;	state Exp;
branches;
next	1.97;

1.97
date	2005.04.21.09.35.06;	author jmc;	state Exp;
branches;
next	1.96;

1.96
date	2005.04.17.12.52.42;	author jmc;	state Exp;
branches;
next	1.95;

1.95
date	2005.04.17.12.34.23;	author jmc;	state Exp;
branches;
next	1.94;

1.94
date	2005.04.16.00.01.17;	author jmc;	state Exp;
branches;
next	1.93;

1.93
date	2005.04.15.08.12.53;	author jmc;	state Exp;
branches;
next	1.92;

1.92
date	2005.04.15.08.09.38;	author jmc;	state Exp;
branches;
next	1.91;

1.91
date	2005.04.15.07.45.14;	author jmc;	state Exp;
branches;
next	1.90;

1.90
date	2005.04.14.20.09.33;	author jmc;	state Exp;
branches;
next	1.89;

1.89
date	2005.04.14.12.32.23;	author jmc;	state Exp;
branches;
next	1.88;

1.88
date	2005.04.14.12.06.51;	author jmc;	state Exp;
branches;
next	1.87;

1.87
date	2005.04.14.11.46.04;	author jmc;	state Exp;
branches;
next	1.86;

1.86
date	2005.04.14.10.34.23;	author jmc;	state Exp;
branches;
next	1.85;

1.85
date	2005.04.14.10.04.04;	author jmc;	state Exp;
branches;
next	1.84;

1.84
date	2005.04.14.09.50.53;	author jmc;	state Exp;
branches;
next	1.83;

1.83
date	2005.04.14.09.10.12;	author jmc;	state Exp;
branches;
next	1.82;

1.82
date	2005.04.14.08.46.16;	author jmc;	state Exp;
branches;
next	1.81;

1.81
date	2005.04.14.08.41.52;	author jmc;	state Exp;
branches;
next	1.80;

1.80
date	2005.04.14.08.32.32;	author jmc;	state Exp;
branches;
next	1.79;

1.79
date	2005.04.13.16.56.36;	author jmc;	state Exp;
branches;
next	1.78;

1.78
date	2005.04.12.16.03.08;	author jmc;	state Exp;
branches;
next	1.77;

1.77
date	2005.04.02.00.17.58;	author jmc;	state Exp;
branches;
next	1.76;

1.76
date	2004.11.12.10.51.09;	author jmc;	state Exp;
branches;
next	1.75;

1.75
date	2004.06.02.14.24.02;	author pedro;	state Exp;
branches;
next	1.74;

1.74
date	2004.05.27.22.43.08;	author hshoexer;	state Exp;
branches;
next	1.73;

1.73
date	2004.03.12.09.46.03;	author jmc;	state Exp;
branches;
next	1.72;

1.72
date	2004.02.25.08.42.38;	author jmc;	state Exp;
branches;
next	1.71;

1.71
date	2004.02.06.05.35.27;	author jmc;	state Exp;
branches;
next	1.70;

1.70
date	2003.09.08.14.01.13;	author fgsch;	state Exp;
branches;
next	1.69;

1.69
date	2003.09.05.09.32.18;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2003.07.10.07.54.03;	author markus;	state Exp;
branches;
next	1.67;

1.67
date	2003.06.26.20.16.55;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2003.06.06.19.28.06;	author jmc;	state Exp;
branches;
next	1.65;

1.65
date	2003.05.10.21.53.04;	author jmc;	state Exp;
branches;
next	1.64;

1.64
date	2002.09.07.00.52.19;	author deraadt;	state Exp;
branches;
next	1.63;

1.63
date	2002.05.23.09.30.35;	author mpech;	state Exp;
branches;
next	1.62;

1.62
date	2002.02.19.21.11.22;	author miod;	state Exp;
branches;
next	1.61;

1.61
date	2002.02.12.18.01.02;	author kjell;	state Exp;
branches;
next	1.60;

1.60
date	2002.01.21.20.12.00;	author angelos;	state Exp;
branches;
next	1.59;

1.59
date	2001.12.10.03.17.02;	author ho;	state Exp;
branches;
next	1.58;

1.58
date	2001.11.14.06.09.05;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2001.11.06.20.44.22;	author angelos;	state Exp;
branches;
next	1.56;

1.56
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.55;

1.55
date	2001.10.04.16.56.52;	author mpech;	state Exp;
branches;
next	1.54;

1.54
date	2001.10.04.10.28.20;	author wilfried;	state Exp;
branches;
next	1.53;

1.53
date	2001.07.01.22.14.03;	author angelos;	state Exp;
branches;
next	1.52;

1.52
date	2001.06.19.18.01.03;	author danh;	state Exp;
branches;
next	1.51;

1.51
date	2001.05.30.03.24.17;	author millert;	state Exp;
branches;
next	1.50;

1.50
date	2001.03.01.16.11.24;	author aaron;	state Exp;
branches;
next	1.49;

1.49
date	2001.01.04.22.43.49;	author angelos;	state Exp;
branches;
next	1.48;

1.48
date	2000.12.15.02.54.08;	author provos;	state Exp;
branches;
next	1.47;

1.47
date	2000.11.20.08.00.04;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2000.10.18.16.50.22;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2000.10.13.04.09.22;	author aaron;	state Exp;
branches;
next	1.44;

1.44
date	2000.09.29.19.00.31;	author angelos;	state Exp;
branches;
next	1.43;

1.43
date	2000.09.29.04.03.13;	author angelos;	state Exp;
branches;
next	1.42;

1.42
date	2000.09.27.04.45.47;	author angelos;	state Exp;
branches;
next	1.41;

1.41
date	2000.09.09.22.19.32;	author angelos;	state Exp;
branches;
next	1.40;

1.40
date	2000.07.21.00.20.18;	author angelos;	state Exp;
branches;
next	1.39;

1.39
date	2000.06.01.19.58.00;	author angelos;	state Exp;
branches;
next	1.38;

1.38
date	2000.05.02.22.33.26;	author ho;	state Exp;
branches;
next	1.37;

1.37
date	2000.05.02.22.01.36;	author ho;	state Exp;
branches;
next	1.36;

1.36
date	2000.05.02.21.08.47;	author ho;	state Exp;
branches;
next	1.35;

1.35
date	2000.04.25.19.35.30;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2000.04.25.19.33.22;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2000.04.22.20.48.46;	author kjell;	state Exp;
branches;
next	1.32;

1.32
date	2000.04.22.02.04.23;	author angelos;	state Exp;
branches;
next	1.31;

1.31
date	2000.04.21.21.37.49;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2000.04.16.17.44.33;	author aaron;	state Exp;
branches;
next	1.29;

1.29
date	2000.01.28.06.21.43;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2000.01.13.05.15.42;	author angelos;	state Exp;
branches;
next	1.27;

1.27
date	2000.01.11.01.07.55;	author angelos;	state Exp;
branches;
next	1.26;

1.26
date	99.10.07.20.50.30;	author angelos;	state Exp;
branches;
next	1.25;

1.25
date	99.07.22.12.58.26;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	99.07.22.08.03.52;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	99.07.09.13.35.36;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	99.07.07.20.04.31;	author kjell;	state Exp;
branches;
next	1.21;

1.21
date	99.07.07.06.21.04;	author kjell;	state Exp;
branches;
next	1.20;

1.20
date	99.07.07.04.18.01;	author kjell;	state Exp;
branches;
next	1.19;

1.19
date	99.07.02.20.11.51;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.06.07.01.51.21;	author angelos;	state Exp;
branches;
next	1.17;

1.17
date	99.05.19.06.01.30;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	99.05.16.19.57.40;	author alex;	state Exp;
branches;
next	1.15;

1.15
date	99.04.20.22.56.11;	author alex;	state Exp;
branches;
next	1.14;

1.14
date	99.03.15.15.35.36;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	99.02.25.01.08.40;	author kjell;	state Exp;
branches;
next	1.12;

1.12
date	99.02.24.23.35.20;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	99.02.24.23.33.37;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	99.02.24.22.56.49;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	99.02.12.21.35.27;	author kjell;	state Exp;
branches;
next	1.8;

1.8
date	99.02.12.04.54.46;	author kjell;	state Exp;
branches;
next	1.7;

1.7
date	98.10.30.00.02.57;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.09.07.16.44.37;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.06.29.05.58.50;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	98.06.29.05.56.28;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	98.06.02.09.18.33;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	98.05.24.23.26.42;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.05.24.14.20.40;	author provos;	state Exp;
branches;
next	;


desc
@@


1.110
log
@let us not talk about ipsecadm and vpn anymore; ok reyk
@
text
@.\" $OpenBSD: vpn.8,v 1.109 2006/05/02 21:14:43 jmc Exp $
.\"
.\" Copyright 1998 Niels Provos <provos@@physnet.uni-hamburg.de>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Niels Provos.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" Manual page, using -mandoc macros
.\"
.Dd February 9, 1999
.Dt VPN 8
.Os
.Sh NAME
.Nm vpn
.Nd configuring the system for virtual private networks
.Sh DESCRIPTION
A Virtual Private Network (VPN)
is used to securely connect two or more subnets over the internet.
For each subnet there is a security gateway which is
linked via a cryptographically secured tunnel to the security gateway of
the other subnet.
.Xr ipsec 4
is used to provide the necessary network-layer cryptographic services.
This document describes the configuration process for setting up a VPN.
.Pp
Briefly, creating a VPN consists of the following steps:
.Pp
.Bl -enum -compact
.It
Enable packet forwarding.
.It
Choose a key exchange method: manual or automated.
.It
For manual keying, generate the keys.
.It
For manual keying, create the Security Associations (SA).
.It
For manual keying, create the appropriate IPsec flows.
.It
For automated keying, configure the keying daemon.
.It
Configure firewall rules appropriately.
.It
Enable the packet filter.
.It
For automated keying, start the keying daemon.
.It
Test the setup.
.El
.Ss About this page
It is recommended that a test setup be created before attempting to
deploy a VPN on the internet.
The examples in this page can be done using two machines
directly connected to each other,
and a little imagination.
The IP address of each machine represents a gateway address;
the alias (see below) is simply a hook into a fictitious network.
.Pp
The following steps are only necessary
if the VPN is being set up as a test VPN,
on an internal LAN.
.Pp
The VPN can be represented using two machines (A and B).
An alias should be added to each machine,
to give it the appearance of being in another network.
.Pp
On machine A:
.Bd -literal -offset indent
# ifconfig ne0 192.168.1.13 description "Machine A"
# ifconfig ne0 alias 10.0.50.1
.Ed
.Pp
On machine B:
.Bd -literal -offset indent
# ifconfig bge0 192.168.1.15 description "Machine B"
# ifconfig bge0 alias 10.0.99.1
.Ed
.Pp
For all other (non-test) cases,
.Xr ifconfig 8
should be used to configure machines as normal.
.Pp
Additionally, the GATEWAY_* and NETWORK_* variables used in the
following sections are defined below in
.Sx Configuring Firewall Rules .
Please see that section for the correct values for these variables.
.Ss Enabling Packet Forwarding
For security gateways, proper operation often requires packet
forwarding to be enabled using
.Xr sysctl 8 :
.Bd -literal -offset indent
# sysctl net.inet.ip.forwarding=1
# sysctl net.inet6.ip6.forwarding=1
.Ed
.Pp
Packet forwarding defaults to
.Sq off .
.Pp
Additionally, if
.Va net.inet.ip.forwarding
is set to 2,
IP forwarding is restricted to IPsec traffic only.
These and other IPsec related options are documented in
.Xr sysctl 3 .
.Pp
For more permanent operation,
the appropriate option(s) can be enabled in
.Xr sysctl.conf 5 .
.Ss Choosing a Key Exchange Method
There are currently two key exchange methods available:
.Pp
.Bl -bullet -compact
.It
manual keying:
.Xr ipsecadm 8
or
.Xr ipsecctl 8
.It
automated keying:
.Xr isakmpd 8
.El
.Ss Generating Manual Keys [manual keying]
The shared secret symmetric keys used to create a VPN can
be any hexadecimal value, so long as both sides of the connection use
the same values.
Since the security of the VPN is based on these keys
being unguessable, it is very important that the keys be chosen using a
strong random source.
One practical method of generating them is by using the
.Xr random 4
device.
To produce 160 bits (20 bytes) of randomness, for example, do:
.Bd -literal -offset indent
$ openssl rand 20 | hexdump -e '20/1 "%02x"'
.Ed
or:
.Bd -literal -offset indent -compact
$ openssl rand 20 | perl -pe 's/./unpack("H2",$&)/ges'
.Ed
.Pp
Different cipher types may require different sized keys.
.Pp
.Bl -column "CipherXX" "Key Length" -offset indent -compact
.It Em Cipher	Key Length
.It Li DES Ta "56 bits"
.It Li 3DES Ta "168 bits"
.It Li AES Ta "Variable (128 bits recommended)"
.It Li BLF Ta "Variable (160 bits recommended)"
.It Li CAST Ta "Variable (128 bits maximum and recommended)"
.It Li SKIPJACK Ta "80 bits"
.El
.Pp
Use of DES or SKIPJACK as an encryption algorithm is not recommended
(except for backwards compatibility) due to their short key length.
Furthermore, recent attacks on SKIPJACK have shown severe weaknesses
in its structure.
.Pp
Note that DES requires 8 bytes to form a 56-bit key and 3DES requires 24 bytes
to form its 168-bit key.
This is because the most significant bit of each byte is ignored by both
algorithms.
.Pp
The following would create suitable keys for a 3DES encryption key
and SHA-1 authentication key:
.Bd -literal -offset indent
$ openssl rand 24 | hexdump -e '24/1 "%02x"' \*(Gt enc_key
$ openssl rand 20 | hexdump -e '20/1 "%02x"' \*(Gt auth_key
.Ed
.Pp
The 3DES encryption key needs 192 bits (3x64), or 24 bytes.
The SHA-1 authentication key needs 160 bits, or 20 bytes.
.Ss Creating Security Associations [manual keying]
Before the IPsec flows can be defined, two Security Associations (SAs)
must be defined on each end of the VPN e.g.:
.Bd -literal -offset indent
# ipsecadm new esp -src $GATEWAY_A -dst $GATEWAY_B \e
    -spi $SPI_AB -forcetunnel -enc 3des -auth sha1 \e
    -keyfile $ENCRYPTION_KEY_FILE \e
    -authkeyfile $AUTHENTICATION_KEY_FILE

# ipsecadm new esp -src $GATEWAY_B -dst $GATEWAY_A \e
    -spi $SPI_BA -forcetunnel -enc 3des -auth sha1 \e
    -keyfile $ENCRYPTION_KEY_FILE \e
    -authkeyfile $AUTHENTICATION_KEY_FILE
.Ed
.Pp
Note that the
.Fl key
and
.Fl authkey
options may be used to specify the keys directly in the
.Xr ipsecadm 8
command line.
However, another user could view the keys by using the
.Xr ps 1
command at the appropriate time (or use a program for doing so).
.Pp
Instead of
.Xr ipsecadm 8 ,
the
.Xr ipsecctl 8
utility can be used to define SAs.
It uses a rule based syntax similar to
.Xr pf.conf 5 .
On gateway A add these lines to the file
.Xr ipsec.conf 5 :
.Bd -literal -offset indent
esp from 192.168.1.13 to 192.168.1.15 spi 0xdeadbeef:0xbeefdead \e
	authkey file "/path/to/gateA.auth:/path/to/gateB.auth" \e
	enckey file "/path/to/gateA.enc:/path/to/gateB.enc"
.Ed
.Pp
Similarly on gateway B add these lines to
.Xr ipsec.conf 5 :
.Bd -literal -offset indent
esp from 192.168.1.15 to 192.168.1.13 spi 0xbeefdead:0xdeadbeef \e
	authkey file "/path/to/gateB.auth:/path/to/gateA.auth" \e
	enckey file "/path/to/gateB.enc:/path/to/gateA.enc"
.Ed
.Pp
Note that when no authentication and encryption algorithms are defined,
.Xr ipsecctl 8
will automatically use HMAC-SHA2-256 for authentication and AES-128 in
countermode for encryption.
Therefore the authentication key needs to be 256 bits long; the encryption key
160 bits.
For details see
.Xr ipsec.conf 5 .
.Ss Creating IPsec Flows [manual keying]
Both IPsec gateways need to configure
.Xr ipsec 4
routes (flows) with the
.Xr ipsecadm 8
tool.
Two flows are created on each machine:
the first is for outbound flows,
the second is the ingress filter for the incoming security association.
.Pp
On the security gateway of subnet A:
.Bd -literal -offset indent
# ipsecadm flow -out -require -proto esp \e
    -src $GATEWAY_A -dst $GATEWAY_B \e
    -addr $NETWORK_A $NETWORK_B
# ipsecadm flow -in -require -proto esp \e
    -src $GATEWAY_A -dst $GATEWAY_B \e
    -addr $NETWORK_B $NETWORK_A
.Ed
.Pp
On the security gateway of subnet B:
.Bd -literal -offset indent
# ipsecadm flow -out -require -proto esp \e
    -src $GATEWAY_B -dst $GATEWAY_A \e
    -addr $NETWORK_B $NETWORK_A
# ipsecadm flow -in -require -proto esp \e
    -src $GATEWAY_B -dst $GATEWAY_A \e
    -addr $NETWORK_A $NETWORK_B
.Ed
.Pp
Again it is possible to use
.Xr ipsecctl 8
to define flows.
On gateway A add this line to
.Xr ipsec.conf 5 :
.Bd -literal -offset indent
flow esp from 10.0.50.0/24 to 10.0.99.0/24 peer 192.168.1.15
.Ed
.Pp
And on gateway B this line:
.Bd -literal -offset indent
flow from 10.0.99.0/24 to 10.0.50.0/24 peer 192.168.1.13
.Ed
.Pp
Note that
.Xr ipsecctl 8
will automatically use ESP in tunnel mode.
For details see
.Xr ipsec.conf 5 .
.Pp
To activate the SAs and flows, run this command on both gateways:
.Bd -literal -offset indent
# ipsecctl -f /etc/ipsec.conf
.Ed
.Ss Configuring the Keying Daemon [automated keying]
Unless manual keying is used, both security gateways need to use the
.Xr isakmpd 8
key management daemon.
.Xr isakmpd 8
implements security policy using the
.Em KeyNote
trust management system.
.Pp
To create a VPN between the same two C class networks as the example
above, using
.Xr isakmpd 8 :
.Bl -enum
.It
Create
.Pa /etc/isakmpd/isakmpd.conf
for machine A:
.Bd -literal -offset indent
# Filter incoming phase 1 negotiations so they are only
# valid if negotiating with this local address.

[General]
Listen-On=		192.168.1.13

# Incoming phase 1 negotiations are multiplexed on the
# source IP address.  Phase 1 is used to set up a protected
# channel just between the two gateway machines.
# This channel is then used for the phase 2 negotiation
# traffic (i.e. encrypted & authenticated).

[Phase 1]
192.168.1.15=		peer-machineB

# 'Phase 2' defines which connections the daemon
# should establish.  These connections contain the actual
# "IPsec VPN" information.

[Phase 2]
Connections=		VPN-A-B

# ISAKMP phase 1 peers (from [Phase 1])

[peer-machineB]
Phase=			1
Address=		192.168.1.15
Configuration=		Default-main-mode
Authentication=		yoursharedsecret

# IPSEC phase 2 connections (from [Phase 2])

[VPN-A-B]
Phase=			2
ISAKMP-peer=		peer-machineB
Configuration=		Default-quick-mode
Local-ID=		machineA-internal-network
Remote-ID=		machineB-internal-network

# ID sections (as used in [VPN-A-B])

[machineA-internal-network]
ID-type=		IPV4_ADDR_SUBNET
Network=		10.0.50.0
Netmask=		255.255.255.0

[machineB-internal-network]
ID-type=		IPV4_ADDR_SUBNET
Network=		10.0.99.0
Netmask=		255.255.255.0

# Main and Quick Mode descriptions
# (as used by peers and connections).

[Default-main-mode]
EXCHANGE_TYPE=		ID_PROT
Transforms=		3DES-SHA,BLF-SHA

[Default-quick-mode]
EXCHANGE_TYPE=		QUICK_MODE
Suites=			QM-ESP-3DES-SHA-SUITE
.Ed
.Pp
.It
Create
.Pa /etc/isakmpd/isakmpd.conf
for machine B:
.Bd -literal -offset indent
# Filter incoming phase 1 negotiations so they are only
# valid if negotiating with this local address.

[General]
Listen-On=		192.168.1.15

# Incoming phase 1 negotiations are multiplexed on the
# source IP address.  Phase 1 is used to set up a protected
# channel just between the two gateway machines.
# This channel is then used for the phase 2 negotiation
# traffic (i.e. encrypted & authenticated).

[Phase 1]
192.168.1.13=		peer-machineA

# 'Phase 2' defines which connections the daemon
# should establish.  These connections contain the actual
# "IPsec VPN" information.

[Phase 2]
Connections=		VPN-B-A

# ISAKMP phase 1 peers (from [Phase 1])

[peer-machineA]
Phase=			1
Address=		192.168.1.13
Configuration=		Default-main-mode
Authentication=		yoursharedsecret

# IPSEC phase 2 connections (from [Phase 2])

[VPN-B-A]
Phase=			2
ISAKMP-peer=		peer-machineA
Configuration=		Default-quick-mode
Local-ID=		machineB-internal-network
Remote-ID=		machineA-internal-network

# ID sections (as used in [VPN-A-B])

[machineA-internal-network]
ID-type=		IPV4_ADDR_SUBNET
Network=		10.0.50.0
Netmask=		255.255.255.0

[machineB-internal-network]
ID-type=		IPV4_ADDR_SUBNET
Network=		10.0.99.0
Netmask=		255.255.255.0

# Main and Quick Mode descriptions
# (as used by peers and connections).

[Default-main-mode]
EXCHANGE_TYPE=		ID_PROT
Transforms=		3DES-SHA,BLF-SHA

[Default-quick-mode]
EXCHANGE_TYPE=		QUICK_MODE
Suites=			QM-ESP-3DES-SHA-SUITE
.Ed
.It
Read through the configuration one more time.
The only real differences between the two files in this example are
the IP addresses, and ordering of Local-ID and Remote-ID for the VPN
itself.
Note that the shared secret (the
.Em Authentication
tag) must match between machineA and machineB.
.Pp
Due to the sensitive information contained in the configuration file,
it must be owned by root and installed without any permissions for
"group" or "other".
.Pp
.Dl # chown root:wheel /etc/isakmpd/isakmpd.conf
.Dl # chmod 0600 /etc/isakmpd/isakmpd.conf
.It
Create a simple
.Pa /etc/isakmpd/isakmpd.policy
file for both machine A and machine B (identical):
.Bd -literal -offset indent
Keynote-version: 2
Authorizer: "POLICY"
Conditions: app_domain == "IPsec policy" &&
            esp_present == "yes" &&
            esp_enc_alg != "null" -\*(Gt "true";
.Ed
.Pp
Due to the sensitive information contained in the policy file,
it must be owned by root and installed without any permissions for
"group" or "other".
.Pp
.Dl # chown root:wheel /etc/isakmpd/isakmpd.policy
.Dl # chmod 0600 /etc/isakmpd/isakmpd.policy
.El
.Ss Configuring Firewall Rules
.Xr pf 4
needs to be configured such that all packets from the outside are blocked
by default.
Only successfully IPsec-processed packets (those on the
.Xr enc 4
interface) or key management packets
(for automated keying,
UDP packets with source and destination ports of 500)
should be allowed to pass.
.Pp
Additional filter rules may be present for other traffic,
though care should be taken that other rules do not leak IPsec traffic.
NAT rules can also be used on the
.Xr enc 4
interface.
.Pp
.Sy Note :
The examples in this page describe a test setup on an internal LAN,
using private (non-routable) IP addresses.
In a typical setup,
at least GATEWAY_A and GATEWAY_B would be configured using
public (routable) IP addresses.
NETWORK_A and NETWORK_B may or may not use public IP addresses,
depending on the network.
.Pp
The
.Xr pf.conf 5
rules for a tunnel which uses encryption (the ESP IPsec protocol) and
.Xr isakmpd 8
on security gateway A might look like this:
.Bd -literal -offset indent
GATEWAY_A = "192.168.1.13"
GATEWAY_B = "192.168.1.15"
NETWORK_A = "10.0.50.0/24"
NETWORK_B = "10.0.99.0/24"

ext_if="ne0"

# default deny
# $ext_if is the only interface going to the outside.
block log on { enc0, $ext_if } all

# Pass encrypted traffic to/from security gateways
pass in proto esp from $GATEWAY_B to $GATEWAY_A
pass out proto esp from $GATEWAY_A to $GATEWAY_B

# Need to allow ipencap traffic on enc0.
pass in on enc0 proto ipencap from $GATEWAY_B to $GATEWAY_A

# Pass traffic to/from the designated subnets.
pass in on enc0 from $NETWORK_B to $NETWORK_A
pass out on enc0 from $NETWORK_A to $NETWORK_B

# Pass isakmpd(8) traffic to/from the security gateways
pass in on $ext_if proto udp from $GATEWAY_B port = 500 \e
	to $GATEWAY_A port = 500
pass out on $ext_if proto udp from $GATEWAY_A port = 500 \e
	to $GATEWAY_B port = 500
.Ed
.Pp
The
.Xr pf.conf 5
rules on security gateway B might look like this:
.Bd -literal -offset indent
GATEWAY_A = "192.168.1.13"
GATEWAY_B = "192.168.1.15"
NETWORK_A = "10.0.50.0/24"
NETWORK_B = "10.0.99.0/24"

ext_if="bge0"

# default deny
# $ext_if is the only interface going to the outside.
block log on { enc0, $ext_if } all

# Passing in encrypted traffic from security gateways
pass in proto esp from $GATEWAY_A to $GATEWAY_B
pass out proto esp from $GATEWAY_B to $GATEWAY_A

# Need to allow ipencap traffic on enc0.
pass in on enc0 proto ipencap from $GATEWAY_A to $GATEWAY_B

# Passing in traffic from the designated subnets.
pass in on enc0 from $NETWORK_A to $NETWORK_B
pass out on enc0 from $NETWORK_B to $NETWORK_A

# Passing in isakmpd(8) traffic from the security gateways
pass in on $ext_if proto udp from $GATEWAY_A port = 500 \e
	to $GATEWAY_B port = 500
pass out on $ext_if proto udp from $GATEWAY_B port = 500 \e
	to $GATEWAY_A port = 500
.Ed
.Ss Enabling the Packet Filter
Enable the packet filter and load the ruleset:
.Bd -literal -offset indent
# pfctl -e
# pfctl -f /etc/pf.conf
.Ed
.Ss Starting the Keying Daemon [automated keying]
Start
.Xr isakmpd 8
.Pp
On both machines, run:
.Pp
.Dl # /sbin/isakmpd
.Pp
To run with verbose debugging enabled, instead start with:
.Pp
.Dl # /sbin/isakmpd -d -DA=99
.Ss Testing the Setup
It is important to check the setup is working correctly.
Remember that the following examples illustrate a test setup only,
and therefore tests carried out on GATEWAY_A and NETWORK_A will be
carried out on the same machine (Machine A).
If this were a real setup, GATEWAY_A and a machine on NETWORK_A would be
different machines.
.Pp
Using the test setup,
first check the routing table shows the routes between the two gateways.
.Pp
On GATEWAY_A:
.Bd -literal -offset 1n
$ netstat -rn -f encap
Routing tables

Encap:
Source      Port Destination  Port  Proto SA(Address/Proto/Type/Direction)
10.0.99/24  0    10.0.50/24   0     0     192.168.1.15/50/use/in
10.0.50/24  0    10.0.99/24   0     0     192.168.1.15/50/require/out
.Ed
.Pp
This shows that anything with source address 10.0.99.0/24 (NETWORK_B)
is routed to destination 10.0.50.0/24 (NETWORK_A),
and vice versa.
The opposite would be true if
.Xr netstat 1
were run on GATEWAY_B.
.Pp
Note that the routing table above is given for an automated keying session.
SA information for a manual keying session would differ slightly: the
.Dq Type
field would be
.Dq require
for both directions.
.Pp
Next check that you can
.Xr ping 8
the networks:
.Pp
On NETWORK_A:
.Pp
.Dl $ ping -I 10.0.50.1 10.0.99.1
.Pp
Note the
.Fl I
option passed to
.Xr ping 8 :
this is necessary to specify a source address
from the network.
Check that the
.Xr ping 8
works from both NETWORK_A and NETWORK_B, changing the arguments as necessary.
.Pp
Check that the traffic between the two networks really is
ESP encapsulated.
On GATEWAY_A:
.Pp
.Dl # tcpdump -n -i ne0 esp
.Pp
On NETWORK_A:
.Pp
.Dl $ ping -I 10.0.50.1 10.0.99.1
.Pp
Check that
.Xr tcpdump 8
shows ESP packets whilst the ping is in progress.
That shows that the traffic is IPsec encapsulated.
.Pp
If both networks are pingable,
the routing tables look as described above,
and
.Xr tcpdump 8
is working as described,
it means the VPN is working correctly.
However, it is also important to check that no IPsec traffic
is being leaked,
either by badly designed firewall rules
or by a misconfigured VPN setup.
.Pp
On GATEWAY_A:
.Pp
.Dl "# tcpdump -n -i ne0 not esp and host 192.168.1.15"
.Pp
On NETWORK_A:
.Pp
.Dl $ ping -I 10.0.50.1 10.0.99.1
.Pp
This time
.Xr tcpdump 8
has been instructed to ignore ESP packets going to
host 192.168.1.15 (GATEWAY_B),
and no traffic should be seen whilst the ping is running.
One exception to this is if the automated keying setup has been followed,
in which case
.Xr isakmpd 8
key management packets on UDP port 500 may be seen.
This is perfectly normal.
If any traffic is being leaked
i.e. the last ping detailed above is showing traffic,
it is suggested that the administrator review the steps above,
paying particular notice to the firewall configuration procedures.
.Sh FILES
.Bl -tag -width "/etc/isakmpd/isakmpd.policyXX" -compact
.It Pa /etc/ipsec.conf
.Xr ipsecctl 8
configuration file.
.It Pa /etc/isakmpd/isakmpd.conf
.Xr isakmpd 8
configuration file.
.It Pa /etc/isakmpd/isakmpd.policy
.Xr isakmpd 8
policy file.
.It Pa /etc/pf.conf
Firewall configuration file.
.It Pa /usr/share/ipsec/rc.vpn
Sample VPN configuration file.
.El
.Sh SEE ALSO
.Xr netstat 1 ,
.Xr openssl 1 ,
.Xr sysctl 3 ,
.Xr enc 4 ,
.Xr ipsec 4 ,
.Xr keynote 4 ,
.Xr ipsec.conf 5 ,
.Xr isakmpd.conf 5 ,
.Xr isakmpd.policy 5 ,
.Xr pf.conf 5 ,
.Xr ifconfig 8 ,
.Xr ipsecadm 8 ,
.Xr ipsecctl 8 ,
.Xr isakmpd 8 ,
.Xr pfctl 8 ,
.Xr ping 8 ,
.Xr sysctl 8 ,
.Xr tcpdump 8
@


1.109
log
@correct command-line prompts; from daniel wade
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.108 2006/03/10 04:29:49 david Exp $
@


1.108
log
@remove default Transport=udp and DOI=IPSEC to simplify example isakmpd config
ok jmc@@ hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.107 2005/12/23 18:19:30 jmc Exp $
d157 1
a157 1
# openssl rand 20 | hexdump -e '20/1 "%02x"'
d161 1
a161 1
# openssl rand 20 | perl -pe 's/./unpack("H2",$&)/ges'
d189 2
a190 2
# openssl rand 24 | hexdump -e '24/1 "%02x"' \*(Gt enc_key
# openssl rand 20 | hexdump -e '20/1 "%02x"' \*(Gt auth_key
@


1.107
log
@encryption key should be 160 bits, not 128;

from will h. backman;
ok hshoexer
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.106 2005/08/19 15:38:39 jmc Exp $
a349 1
Transport=		udp
a378 1
DOI=			IPSEC
a382 1
DOI=			IPSEC
a417 1
Transport=		udp
a446 1
DOI=			IPSEC
a450 1
DOI=			IPSEC
@


1.106
log
@add /etc/ipsec.conf to FILES;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.105 2005/08/19 08:55:56 hshoexer Exp $
d249 1
a249 1
128 bits.
@


1.105
log
@document manual keying with ipsecctl

ok, tweaks jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.104 2005/06/07 09:09:50 jmc Exp $
d708 3
@


1.104
log
@note that netstat output may differ slightly for manual keying;

issue found by christophe plasschaert and clarified by hshoexer@@;
ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.103 2005/05/24 04:29:51 david Exp $
d139 2
d220 32
d281 25
d537 1
a537 1
# Passing in encrypted traffic from security gateways
d544 1
a544 1
# Passing in traffic from the designated subnets.
d548 1
a548 1
# Passing in isakmpd(8) traffic from the security gateways
d726 1
d732 1
@


1.103
log
@fix wrong option and clarify a sentence; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.102 2005/04/27 14:22:27 jmc Exp $
d573 7
@


1.102
log
@some improvements from markus@@ and ho@@;
ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.101 2005/04/23 08:40:52 jmc Exp $
d209 1
a209 1
.Fl keyfile
d404 1
a404 1
the IP addresses, and ordering of Local- and Remote-ID for the VPN
@


1.101
log
@- add a Listen-on tag to the example isakmpd.conf files
- be more explicit about permissions for isakmpd.{conf,policy}

diff from dlg@@, who kindly provided feedback on this page;
ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.100 2005/04/21 10:50:50 jmc Exp $
d105 5
d248 1
a248 2
Unless manual keying is used, both security gateways need to start
the
d483 1
a483 1
pass in on enc0 proto ipencap all
d516 1
a516 1
pass in on enc0 proto ipencap all
@


1.100
log
@- remove section on pf "quick" rules: this is not the place to describe
additional rulesets
- reshuffle the filtering section somewhat to read better
- consistency tweak

ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.99 2005/04/21 10:13:59 jmc Exp $
d261 6
d332 6
d407 2
a408 1
it must be installed without any permissions for "group" or "other".
d410 2
a411 1
.Dl # chmod og-rwx /etc/isakmpd/isakmpd.conf
d425 2
a426 1
it must be installed without any permissions for "group" or "other".
d428 2
a429 1
.Dl # chmod og-rwx /etc/isakmpd/isakmpd.policy
@


1.99
log
@kill SPD section: it is neither relevant nor helpful here;
ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.98 2005/04/21 09:37:25 jmc Exp $
d419 1
a419 1
Only successfully IPsec-processed packets (from the
d421 5
a425 4
interface), or key management packets (for
.Xr isakmpd 8 ,
.Tn UDP
packets with source and destination ports of 500) should be allowed to pass.
d428 3
a507 7
.Pp
If there are no other
.Xr pf.conf 5
rules, the "quick" clause can be added to the last four rules.
NAT rules can also be used on the
.Xr enc 4
interface.
d614 1
a614 1
messages on UDP port 500 may be seen.
@


1.98
log
@this is not the correct place to ref options(4);
ipsec(4) covers that anyway;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.97 2005/04/21 09:35:06 jmc Exp $
a510 5
.Pp
.Sy Note :
it is strongly encouraged that instead of detailed PF rules,
the SPD (IPsec flow database) be utilized to specify security policy,
if only to avoid filtering conflicts.
@


1.97
log
@add a section on testing the vpn is working;
as usual, massive help from hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.96 2005/04/17 12:52:42 jmc Exp $
a647 1
.Xr options 4 ,
@


1.96
log
@document effects of net.inet.ip.forwarding=2, and refer to related
sysctls in sysctl(3);

pointed out by msf@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.95 2005/04/17 12:34:23 jmc Exp $
d70 2
d533 95
d642 1
d656 3
a658 1
.Xr sysctl 8
@


1.95
log
@merge/remove EXAMPLES:

previously we were documenting in 2 places how to set up ipsecadm stuff,
and in one place isakmpd. this led to inconsistencies and repitition.

sanity checks + ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.94 2005/04/16 00:01:17 jmc Exp $
d115 7
d123 1
a123 1
the appropriate option(s) should be enabled in your
d546 1
@


1.94
log
@add isakmpd.policy to FILES and sort;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.93 2005/04/15 08:12:53 jmc Exp $
d40 2
a41 2
A virtual private network is used to securely connect two or more subnets
over the internet.
d53 2
a56 2
Enable packet forwarding.
.It
d59 1
a59 2
For manual keying, create the Security Associations (SA), one for
each endpoint.
d63 1
a63 2
For automated keying, create a configuration file for the keying
daemon.
d65 1
a65 6
Configure your firewall rules appropriately.
.El
.Ss Choosing a key exchange method
There are currently two key exchange methods available:
.Pp
.Bl -bullet -compact
d67 1
a67 2
manual keying:
.Xr ipsecadm 8
d69 1
a69 2
automated keying:
.Xr isakmpd 8
d71 32
d118 11
d169 10
d183 2
a184 2
# ipsecadm new esp -spi $SPI_AB -src $GATEWAY_A \e
    -dst $GATEWAY_B -forcetunnel -enc 3des -auth sha1 \e
d187 3
a189 2
# ipsecadm new esp -spi $SPI_BA -src $GATEWAY_B \e
    -dst $GATEWAY_A -forcetunnel -enc 3des -auth sha1 \e
d207 1
a207 1
routes with the
d209 4
a212 1
tool:
d233 1
a233 1
.Ss Configure and run the keying daemon [automated keying]
a237 5
To make sure the daemon is properly configured
to provide the required security services (typically, encryption and
authentication), start the daemon with debugging or verbose output.
Sample configuration files are provided below.
.Pp
a241 12
.Ss Configuring Firewall Rules
.Xr pf 4
needs to be configured such that all packets from the outside are blocked
by default.
Only successfully IPsec-processed packets (from the
.Xr enc 4
interface), or key management packets (for
.Xr isakmpd 8 ,
.Tn UDP
packets with source and destination ports of 500) should be allowed to pass.
Additional filter rules may be present for other traffic,
though care should be taken that other rules do not leak IPsec traffic.
a242 167
.Sy Note :
The examples in this page describe a test setup on an internal LAN,
using private (non-routable) IP addresses.
In a typical setup,
at least GATEWAY_A and GATEWAY_B would be configured using
public (routable) IP addresses.
NETWORK_A and NETWORK_B may or may not use public IP addresses,
depending on the network.
.Pp
The
.Xr pf.conf 5
rules for a tunnel which uses encryption (the ESP IPsec protocol) and
.Xr isakmpd 8
on security gateway A might look like this:
.Bd -literal -offset indent
GATEWAY_A = "192.168.1.13"
GATEWAY_B = "192.168.1.15"
NETWORK_A = "10.0.50.0/24"
NETWORK_B = "10.0.99.0/24"

ext_if="ne0"

# default deny
# $ext_if is the only interface going to the outside.
block log on { enc0, $ext_if } all

# Passing in encrypted traffic from security gateways
pass in proto esp from $GATEWAY_B to $GATEWAY_A
pass out proto esp from $GATEWAY_A to $GATEWAY_B

# Need to allow ipencap traffic on enc0.
pass in on enc0 proto ipencap all

# Passing in traffic from the designated subnets.
pass in on enc0 from $NETWORK_B to $NETWORK_A
pass out on enc0 from $NETWORK_A to $NETWORK_B

# Passing in isakmpd(8) traffic from the security gateways
pass in on $ext_if proto udp from $GATEWAY_B port = 500 \e
	to $GATEWAY_A port = 500
pass out on $ext_if proto udp from $GATEWAY_A port = 500 \e
	to $GATEWAY_B port = 500
.Ed
.Pp
If there are no other
.Xr pf.conf 5
rules, the "quick" clause can be added to the last four rules.
NAT rules can also be used on the
.Xr enc 4
interface.
.Pp
.Sy Note :
it is strongly encouraged that instead of detailed PF rules,
the SPD (IPsec flow database) be utilized to specify security policy,
if only to avoid filtering conflicts.
.Sh EXAMPLES
It is recommended that a test setup be created before attempting to
deploy a VPN on the internet.
The examples in this page can be done using two machines
directly connected to each other,
and a little imagination.
The IP address of each machine represents a gateway address;
the alias (see below) is simply a hook into a fictitious network.
.Ss Manual and automated keying
This step is only necessary if the VPN is being set up as a test VPN,
on an internal LAN.
.Pp
The VPN can be represented using two machines (A and B).
An alias should be added to each machine,
to give it the appearance of being in another network.
.Pp
On machine A:
.Bd -literal -offset indent
# ifconfig ne0 192.168.1.13 description "Machine A"
# ifconfig ne0 alias 10.0.50.1
.Ed
.Pp
On machine B:
.Bd -literal -offset indent
# ifconfig bge0 192.168.1.15 description "Machine B"
# ifconfig bge0 alias 10.0.99.1
.Ed
.Pp
For all other (non-test) cases,
.Xr ifconfig 8
should be used to configure machines appropriately.
.Ss Manual keying
To create a manual keyed VPN between two class C networks using
3DES encryption and the following IP addresses:
.Bd -literal -offset indent
GATEWAY_A = 192.168.1.13
GATEWAY_B = 192.168.1.15
NETWORK_A = 10.0.50.0/24
NETWORK_B = 10.0.99.0/24
.Ed
.Bl -enum
.It
Choose the shared secrets using a suitably random method.
The 3DES encryption key needs 192 bits (3x64), or 24 bytes.
The SHA-1 authentication key needs 160 bits, or 20 bytes.
.Bd -literal -offset indent
# openssl rand 24 | hexdump -e '24/1 "%02x"' > enc_key
# openssl rand 20 | hexdump -e '20/1 "%02x"' > auth_key
.Ed
.It
Create the Security Associations (on both endpoints):
.Bd -literal -offset indent
# /sbin/ipsecadm new esp -src 192.168.1.15 -dst 192.168.1.13 \e
	-forcetunnel -spi 1000 -enc 3des -auth sha1 \e
	-keyfile enc_key -authkeyfile auth_key

# /sbin/ipsecadm new esp -src 192.168.1.13 -dst 192.168.1.15 \e
	-forcetunnel -spi 1001 -enc 3des -auth sha1 \e
	-keyfile enc_key -authkeyfile auth_key
.Ed
.It
Create the IPsec flows on machine A (the first is for
outbound flows, the latter is the ingress filter for the
incoming security association):
.Bd -literal -offset indent
# ipsecadm flow -out -require -proto esp \e
	-src 192.168.1.13 -dst 192.168.1.15 \e
	-addr 10.0.50.0/24 10.0.99.0/24
# ipsecadm flow -in -require -proto esp \e
	-src 192.168.1.13 -dst 192.168.1.15 \e
	-addr 10.0.99.0/24 10.0.50.0/24
.Ed
.It
Create the matching IPsec flows on machine B:
.Bd -literal -offset indent
# ipsecadm flow -out -require -proto esp \e
	-src 192.168.1.13 -dst 192.168.1.15 \e
	-addr 10.0.50.0/24 10.0.99.0/24
# ipsecadm flow -in -require -proto esp \e
	-src 192.168.1.13 -dst 192.168.1.15 \e
	-addr 10.0.99.0/24 10.0.50.0/24
.Ed
.It
Configure the firewall rules on machine A
using the previously defined ruleset:
.Bd -literal -offset indent
GATEWAY_A = "192.168.1.13"
GATEWAY_B = "192.168.1.15"
NETWORK_A = "10.0.50.0/24"
NETWORK_B = "10.0.99.0/24"

(rest of ruleset per Configuring Firewall Rules, above)
.Ed
.It
Configure the firewall rules on machine B, modifying the
definitions as appropriate:
.Bd -literal -offset indent
GATEWAY_A = "192.168.1.13"
GATEWAY_B = "192.168.1.15"
NETWORK_A = "10.0.50.0/24"
NETWORK_B = "10.0.99.0/24"

(rest of ruleset, modified as appropriate)
.Ed
.It
Enable the packet filter and load the ruleset:
.Bd -literal -offset indent
# pfctl -e
# pfctl -f /etc/pf.conf
.Ed
.El
.Ss Automated keying
d398 1
a398 1
            esp_enc_alg != "null" -> "true";
d405 28
a432 3
.It
Configure the firewall rules on machine A
using the previously defined ruleset:
d439 22
a460 1
(rest of ruleset per Configuring Firewall Rules, above)
d462 4
a465 3
.It
Configure the firewall rules on machine B, modifying the
definitions as appropriate:
d472 22
a493 1
(rest of ruleset, modified as appropriate)
d495 13
a507 1
.It
d513 1
a513 1
.It
a523 1
.El
@


1.93
log
@spacing, and a typo;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.92 2005/04/15 08:09:38 jmc Exp $
d582 1
a582 3
.Bl -tag -width "/etc/isakmpd/isakmpd.confXX" -compact
.It Pa /usr/share/ipsec/rc.vpn
Sample VPN configuration file.
d586 3
d591 2
@


1.92
log
@make the examples in this page work for a simple 2 machine, directly
connected, setup; encourage people to try this way before using for real;

ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.89 2005/04/14 12:32:23 jmc Exp $
d302 2
a303 2
GATEWAY_A  = 192.168.1.13
GATEWAY_B  = 192.168.1.15
d311 1
a311 1
The SHA-1 authentication key for needs 160 bits, or 20 bytes.
@


1.91
log
@add `enable packet forwarding' to initial summary;
use `automated' keying, not `automatic', since the rest of the page does;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.90 2005/04/14 20:09:33 jmc Exp $
d47 1
a47 2
This document describes the configuration process for setting up a
.Nm VPN .
d193 1
d209 2
d213 7
a219 4
The examples in this page use a private (non-routable) IP address
to denote gateways (GATEWAY_A and GATEWAY_B).
These addresses are normally public (routable) IP addresses
and are given as examples only.
d227 2
a228 2
GATEWAY_A = "192.168.1.254"
GATEWAY_B = "192.168.2.1"
d262 5
a266 3
Note that it is strongly encouraged that instead of detailed PF
rules, the SPD (IPsec flow database) be utilized to specify security
policy, if only to avoid filtering conflicts.
d268 30
d302 2
a303 2
GATEWAY_A  = 192.168.1.254
GATEWAY_B  = 192.168.2.1
d319 1
a319 1
# /sbin/ipsecadm new esp -src 192.168.2.1 -dst 192.168.1.254 \e
d323 1
a323 1
# /sbin/ipsecadm new esp -src 192.168.1.254 -dst 192.168.2.1 \e
d333 1
a333 1
	-src 192.168.1.254 -dst 192.168.2.1 \e
d336 1
a336 1
	-src 192.168.1.254 -dst 192.168.2.1 \e
d343 1
a343 1
	-src 192.168.1.254 -dst 192.168.2.1 \e
d346 1
a346 1
	-src 192.168.1.254 -dst 192.168.2.1 \e
d353 2
a354 2
GATEWAY_A = "192.168.1.254"
GATEWAY_B = "192.168.2.1"
d364 4
a367 4
GATEWAY_A = "192.168.2.1"
GATEWAY_B = "192.168.1.254"
NETWORK_A = "10.0.99.0/24"
NETWORK_B = "10.0.50.0/24"
d395 1
a395 1
192.168.2.1=		peer-machineB
d409 1
a409 1
Address=		192.168.2.1
d460 1
a460 1
192.168.1.254=		peer-machineA
d474 1
a474 1
Address=		192.168.1.254
d545 2
a546 2
GATEWAY_A = "192.168.1.254"
GATEWAY_B = "192.168.2.1"
d556 4
a559 4
GATEWAY_A = "192.168.2.1"
GATEWAY_B = "192.168.1.254"
NETWORK_A = "10.0.99.0/24"
NETWORK_B = "10.0.50.0/24"
d600 1
@


1.90
log
@detail missing step in summary;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.89 2005/04/14 12:32:23 jmc Exp $
d56 2
d78 1
a78 1
automatic keying:
@


1.89
log
@remove BUGS section, as no longer relevant;
ok hshoexer@@ markus@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.88 2005/04/14 12:06:51 jmc Exp $
d55 2
@


1.88
log
@don't forget to enable pf and load ruleset;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.87 2005/04/14 11:46:04 jmc Exp $
a562 5
.Sh BUGS
In situations where the gateway IPs are outside the tunnelled network
range, such as when tunnelling private (RFC 1918) networks over the Internet,
.Xr isakmpd 8
or manual keying must be used.
@


1.87
log
@simplify filter rules somewhat:

- use a macro for ext_if
- use 1 block rule (rather than block in and out)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.86 2005/04/14 10:34:23 jmc Exp $
d330 6
d521 6
@


1.86
log
@- example policy files are identical for machines A and B, so combine
into one step
- mention necessary permissions for isakmpd.policy
- document these permissions are needed because of sensitive information,
not just because of shared secrets: isakmpd.policy need not contain a
shared secret
- remove useless .Pp

agreed w/ hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.85 2005/04/14 10:04:04 jmc Exp $
d223 2
d226 2
a227 3
# ne0 is the only interface going to the outside.
block in log on { enc0, ne0 } all
block out log on { enc0, ne0 } all
d241 1
a241 1
pass in on ne0 proto udp from $GATEWAY_B port = 500 \e
d243 1
a243 1
pass out on ne0 proto udp from $GATEWAY_A port = 500 \e
@


1.85
log
@tidy up "Choosing a key exchange method", and do not confuse punter;
ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.84 2005/04/14 09:50:53 jmc Exp $
d473 2
a474 2
Due to the shared secret information in the configuration file, it must
be installed without any permissions for "group" or "other".
a476 1
.Pp
d480 1
a480 12
file for machineA:
.Bd -literal -offset indent
Keynote-version: 2
Authorizer: "POLICY"
Conditions: app_domain == "IPsec policy" &&
            esp_present == "yes" &&
            esp_enc_alg != "null" -> "true";
.Ed
.It
Create a simple
.Pa /etc/isakmpd/isakmpd.policy
file for machineB:
d488 5
@


1.84
log
@reduce diff between isakmpd.conf sections for machines A and B;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.83 2005/04/14 09:10:12 jmc Exp $
d71 1
a71 1
manual (symmetric shared secret):
d74 1
a74 1
automatic:
@


1.83
log
@we already have a section on configuring firewall rules, so refer to it
in EXAMPLES rather than reproducing info (and confusing people);

make the firewall section of manual and automatic keying the same;

this also fixes an issue reported by steve murdoch back in november,
that parts of vpn(8) were repeating themselves; sorry to take so long to
fix this, steve;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.82 2005/04/14 08:46:16 jmc Exp $
d406 2
a407 2
# source IP address.  Phase 1 is used to set up a
# protected channel just between the two gateway machines.
d414 2
a415 2
# 'Phase 2' defines which connections the daemon should
# establish.  These connections contain the actual
@


1.82
log
@make this part consistent too;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.81 2005/04/14 08:41:52 jmc Exp $
d316 1
a316 1
(rest of ruleset)
d327 1
a327 1
(rest of ruleset)
d501 2
a502 10
Configure the firewall rules on machines A and B:
.Pp
Use the same ruleset as the manual keying example, but add permission
for the
.Xr isakmpd 8
control traffic, on
.Tn UDP
port 500.
.Pp
For machineA, add:
d504 6
a509 5
# Permit ISAKMPD control traffic between A and B
pass in proto udp from 192.168.2.1 to 192.168.1.254 \e
	port = 500
pass out proto udp from 192.168.1.254 to 192.168.2.1 \e
	port = 500
d511 3
a513 2
.Pp
For machineB, add:
d515 6
a520 5
# Permit ISAKMPD control traffic between A and B
pass in proto udp from 192.168.1.254 to 192.168.2.1 \e
	port = 500
pass out proto udp from 192.168.2.1 to 192.168.1.254 \e
	port = 500
@


1.81
log
@do not mess about w/ the order of macros in pf rules, it just makes
the page harder to read;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.80 2005/04/14 08:32:32 jmc Exp $
d260 4
a263 4
 GATEWAY_A  = 192.168.1.254
 NETWORK_A = 10.0.50.0/24
 GATEWAY_B  = 192.168.2.1
 NETWORK_B = 10.0.99.0/24
@


1.80
log
@make the intro a little more consistent;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.79 2005/04/13 16:56:36 jmc Exp $
d322 1
d324 1
a324 1
GATEWAY_A = "192.168.2.1"
a325 1
NETWORK_A = "10.0.99.0/24"
@


1.79
log
@although the example gateway addresses given are private IP addresses, make it
clear that this is an example only, and would normally be public addresses;

ok hshoexer@@ henning@@ msf@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.78 2005/04/12 16:03:08 jmc Exp $
d54 1
a54 2
Choose a key exchange method: manual keyed or automated via
.Xr isakmpd 8 .
d71 2
a72 1
manual (symmetric shared secret)
d74 1
@


1.78
log
@remove /32 netmasks as they're confusing and not needed;
ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.77 2005/04/02 00:17:58 jmc Exp $
d204 6
@


1.77
log
@make this page look better;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.76 2004/11/12 10:51:09 jmc Exp $
d211 2
a212 2
GATEWAY_A = "192.168.1.254/32"
GATEWAY_B = "192.168.2.1/32"
d304 2
a305 2
GATEWAY_A = "192.168.1.254/32"
GATEWAY_B = "192.168.2.1/32"
d315 2
a316 2
GATEWAY_B = "192.168.1.254/32"
GATEWAY_A = "192.168.2.1/32"
d506 1
a506 1
pass in proto udp from 192.168.2.1/32 to 192.168.1.254/32 \e
d508 1
a508 1
pass out proto udp from 192.168.1.254/32 to 192.168.2.1/32 \e
d515 1
a515 1
pass in proto udp from 192.168.1.254/32 to 192.168.2.1/32 \e
d517 1
a517 1
pass out proto udp from 192.168.2.1/32 to 192.168.1.254/32 \e
@


1.76
log
@typos from joel gudknecht;
help/ok hshoexer@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.75 2004/06/02 14:24:02 pedro Exp $
d54 1
a54 1
Choose a key exchange method: manual keyed, or automated via
d85 2
a86 1
Packet forwarding defaults to 'off'.
a104 1
.Pp
d106 1
a106 1
.Bd -literal -offset indent
d112 1
a112 1
.Bl -column "Cipher" "Key Length" -offset indent -compact
d133 1
a133 1
must be defined on each end of the VPN, e.g.:
d146 1
a146 1
.Fl key
d172 1
a172 1
and on the security gateway of subnet B:
d188 1
a188 1
authentication) start the daemon with debugging or verbose output.
d210 1
a210 1
.Bd -literal
d233 4
a236 2
pass in on ne0 proto udp from $GATEWAY_B port = 500 to $GATEWAY_A port = 500
pass out on ne0 proto udp from $GATEWAY_A port = 500 to $GATEWAY_B port = 500
a247 10
.Sh FILES
.Bl -tag -width /etc/isakmpd/isakmpd.conf -compact
.It Pa /usr/share/ipsec/rc.vpn
Sample VPN configuration file
.It Pa /etc/isakmpd/isakmpd.conf
.Xr isakmpd 8
configuration file
.It Pa /etc/pf.conf
Firewall configuration file
.El
d263 1
a263 1
.Bd -literal
d269 1
a269 1
.Bd -literal
d271 2
a272 2
   -forcetunnel -spi 1000 -enc 3des -auth sha1 \e
   -keyfile enc_key -authkeyfile auth_key
d275 2
a276 2
   -forcetunnel -spi 1001 -enc 3des -auth sha1 \e
   -keyfile enc_key -authkeyfile auth_key
d282 1
a282 1
.Bd -literal
d284 2
a285 2
    -src 192.168.1.254 -dst 192.168.2.1 \e
    -addr 10.0.50.0/24 10.0.99.0/24
d287 2
a288 2
    -src 192.168.1.254 -dst 192.168.2.1 \e
    -addr 10.0.99.0/24 10.0.50.0/24
d292 1
a292 1
.Bd -literal
d294 2
a295 2
    -src 192.168.1.254 -dst 192.168.2.1 \e
    -addr 10.0.50.0/24 10.0.99.0/24
d297 2
a298 2
    -src 192.168.1.254 -dst 192.168.2.1 \e
    -addr 10.0.99.0/24 10.0.50.0/24
d303 1
a303 1
.Bd -literal
d314 1
a314 1
.Bd -literal
d332 6
a337 6
.Bd -literal

# Incoming phase 1 negotiations are multiplexed on the source IP
# address. Phase 1 is used to set up a protected channel just
# between the two gateway machines. This channel is then used for
# the phase 2 negotiation traffic (i.e. encrypted & authenticated).
d342 3
a344 2
# 'Phase 2' defines which connections the daemon should establish.
# These connections contain the actual "IPsec VPN" information.
d379 2
a380 1
# Main and Quick Mode descriptions (as used by peers and connections)
d397 6
a402 6
.Bd -literal

# Incoming phase 1 negotiations are multiplexed on the source IP
# address. Phase 1 is used to set up a protected channel just
# between the two gateway machines. This channel is then used for
# the phase 2 negotiation traffic (i.e. encrypted & authenticated).
d407 3
a409 2
# 'Phase 2' defines which connections the daemon should establish.
# These connections contain the actual "IPsec VPN" information.
d444 2
a445 1
# Main and Quick Mode descriptions (as used by peers and connections)
d460 1
a460 1
the IP-addresses, and ordering of Local- and Remote-ID for the VPN
d468 2
a469 3
.Bd -literal -offset indent
# chmod og-rwx /etc/isakmpd/isakmpd.conf
.Ed
d504 1
a504 1
.Bd -literal
d506 4
a509 2
pass in proto udp from 192.168.2.1/32 to 192.168.1.254/32 port = 500
pass out proto udp from 192.168.1.254/32 to 192.168.2.1/32 port = 500
d513 1
a513 1
.Bd -literal
d515 4
a518 2
pass in proto udp from 192.168.1.254/32 to 192.168.2.1/32 port = 500
pass out proto udp from 192.168.2.1/32 to 192.168.1.254/32 port = 500
d525 2
a526 3
.Bd -literal -offset indent
# /sbin/isakmpd
.Ed
d529 12
a540 3
.Bd -literal -offset indent
# /sbin/isakmpd -d -DA=99
.Ed
@


1.75
log
@need to explicitly pass ipencap traffic on the encapsulation interface
from Pedro Almeida <pedro@@qui.uc.pt>, ok cedric@@, xsa@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.74 2004/05/27 22:43:08 hshoexer Exp $
d511 2
a512 2
pass in proto udp from 192.168.2.1/32 to 193.127.1.254/32 port = 500
pass out proto udp from 192.168.1.254/32 to 193.127.2.1/32 port = 500
d518 2
a519 2
pass in proto udp from 192.168.1.254/32 to 193.127.2.1/32 port = 500
pass out proto udp from 192.168.2.1/32 to 193.127.1.254/32 port = 500
@


1.74
log
@No need to mention kernel configuration for ipsec, it's enabled by default.

ok niklas@@ ho@@ markus@@ jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.73 2004/03/12 09:46:03 jmc Exp $
d224 3
@


1.73
log
@match GENERIC;

from Karl O. Pinc;
ok deraadt@@ markus@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.72 2004/02/25 08:42:38 jmc Exp $
d76 4
a79 24
.Ss Enabling the Appropriate Kernel Operations
Make sure that the following options and devices are enabled in the kernel:
.Bd -literal -offset indent
option    CRYPTO          # Cryptographic Framework
option    IPSEC           # IPSEC VPN
pseudo-device enc 1       # Encapsulation device used by IPSEC
.Ed
.Pp
To use IPsec,
.Xr ipsec 4
operations must be enabled using
.Xr sysctl 8 .
Before doing either manual or automated keying, or performing
encryption (ESP) or authentication (AH) operations, ensure the appropriate
kernel operation has been enabled:
.Bd -literal -offset indent
# sysctl net.inet.esp.enable=1
# sysctl net.inet.ah.enable=1
.Ed
.Pp
The ESP and AH protocols default to 'on'.
.Pp
For security gateways, proper operation often also requires packet
forwarding to be enabled:
@


1.72
log
@remove -w option to sysctl;

diffs from Paul de Weerd;
ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.71 2004/02/06 05:35:27 jmc Exp $
d81 1
a81 1
pseudo-device enc 4       # Encapsulation device used by IPSEC
@


1.71
log
@typo from Tamas Tevesz, via nick@@;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.70 2003/09/08 14:01:13 fgsch Exp $
d92 2
a93 2
# sysctl -w net.inet.esp.enable=1
# sysctl -w net.inet.ah.enable=1
d101 2
a102 2
# sysctl -w net.inet.ip.forwarding=1
# sysctl -w net.inet6.ip6.forwarding=1
@


1.70
log
@fix command line; deraadt@@ jmc@@ ok.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.68 2003/07/10 07:54:03 markus Exp $
d304 1
a304 1
Create the IPsec flows on machine A (the fist is for
@


1.69
log
@remove some erroneous backslashes, and add some indent;
@
text
@d162 1
a162 1
    -authkeyfile$ AUTHENTICATION_KEY_FILE
@


1.68
log
@simplify and cleanup examples;  we now only setup flows for
the internal networks, not for all possible gw-to-network
combinations; with help from jmc@@; ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.67 2003/06/26 20:16:55 jmc Exp $
d78 1
a78 1
.Bd -literal
d132 1
a132 1
.Bl -column "Cipher" "Key Length" -compact
d186 1
a186 1
    -addr $NETWORK_A $NETWORK_B \e
d189 1
a189 1
    -addr $NETWORK_B $NETWORK_A \e
d196 1
a196 1
    -addr $NETWORK_B $NETWORK_A \e
d199 1
a199 1
    -addr $NETWORK_A $NETWORK_B \e
d277 1
a277 1
.Bd -literal
a289 1

d310 1
a310 1
    -addr 10.0.50.0/24 10.0.99.0/24 \e
d313 1
a313 1
    -addr 10.0.99.0/24 10.0.50.0/24 \e
d320 1
a320 1
    -addr 10.0.50.0/24 10.0.99.0/24 \e
d323 1
a323 1
    -addr 10.0.99.0/24 10.0.50.0/24 \e
d489 1
a489 1
.Bd -literal
d497 1
a497 1
.Bd -literal
d508 1
a508 1
.Bd -literal
d543 1
a543 1
.Bd -literal
d548 1
a548 1
.Bd -literal
@


1.67
log
@remove -inset from .Bl;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.66 2003/06/06 19:28:06 jmc Exp $
a80 1
#option   KEY             # KEY implied by IPSEC
d91 3
a93 3
.Bd -literal
	# sysctl -w net.inet.esp.enable=1
	# sysctl -w net.inet.ah.enable=1
d100 3
a102 3
.Bd -literal
	# sysctl -w net.inet.ip.forwarding=1
	# sysctl -w net.inet6.ip6.forwarding=1
d121 2
a122 2
.Bd -literal
	# openssl rand 20 | hexdump -e '20/1 "%02x"'
d126 2
a127 2
.Bd -literal
	# openssl rand 20 | perl -pe 's/./unpack("H2",$&)/ges'
d154 9
a162 9
.Bd -literal
	# ipsecadm new esp -spi SPI_AB -src A_EXTERNAL_IP \e
	    -dst B_EXTERNAL_IP -forcetunnel -enc 3des -auth sha1 \e
	    -keyfile ENCRYPTION_KEY_FILE \e
	    -authkeyfile AUTHENTICATION_KEY_FILE
	# ipsecadm new esp -spi SPI_BA -src B_EXTERNAL_IP \e
	    -dst A_EXTERNAL_IP -forcetunnel -enc 3des -auth sha1 \e
	    -keyfile ENCRYPTION_KEY_FILE \e
	    -authkeyfile AUTHENTICATION_KEY_FILE
d183 7
a189 34
.Bd -literal
	# ipsecadm flow -dst B_EXTERNAL_IP -proto esp
	    -addr A_EXTERNAL_IP 255.255.255.255
	          B_EXTERNAL_IP 255.255.255.255
	    -require -out -src A_EXTERNAL_IP
	# ipsecadm flow -dst B_EXTERNAL_IP -proto esp
	    -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
	          B_INTERNAL_NETWORK B_INTERNAL_NETMASK
	    -require -out -src A_EXTERNAL_IP
	# ipsecadm flow -dst B_EXTERNAL_IP -proto esp
	    -addr A_EXTERNAL_IP 255.255.255.255
	          B_INTERNAL_NETWORK B_INTERNAL_NETMASK
	    -require -out -src A_EXTERNAL_IP
	# ipsecadm flow -dst B_EXTERNAL_IP -proto esp
	    -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
	          B_EXTERNAL_IP 255.255.255.255
	    -require -out -src A_EXTERNAL_IP
	
	# ipsecadm flow -dst B_EXTERNAL_IP -proto esp
	    -addr B_EXTERNAL_IP 255.255.255.255
	          A_EXTERNAL_IP 255.255.255.255
	    -require -in -src A_EXTERNAL_IP
	# ipsecadm flow -dst B_EXTERNAL_IP -proto esp
	    -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
	          A_INTERNAL_NETWORK A_INTERNAL_NETMASK
	    -require -in -src A_EXTERNAL_IP
	# ipsecadm flow -dst B_EXTERNAL_IP -proto esp
	    -addr B_EXTERNAL_IP 255.255.255.255
	          A_INTERNAL_NETWORK A_INTERNAL_NETMASK
	    -require -in -src A_EXTERNAL_IP
	# ipsecadm flow -dst B_EXTERNAL_IP -proto esp
	    -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
	          A_EXTERNAL_IP 255.255.255.255
	    -require -in -src A_EXTERNAL_IP
d193 7
a199 34
.Bd -literal
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
	    -addr B_EXTERNAL_IP 255.255.255.255
	          A_EXTERNAL_IP 255.255.255.255
	    -out -require -src B_EXTERNAL_IP
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
	    -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
	          A_INTERNAL_NETWORK A_INTERNAL_NETMASK
	    -out -require -src B_EXTERNAL_IP
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
	    -addr B_EXTERNAL_IP 255.255.255.255
	          A_INTERNAL_NETWORK A_INTERNAL_NETMASK
	    -out -require -src B_EXTERNAL_IP
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
	    -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
	          A_EXTERNAL_IP 255.255.255.255
	    -out -require -src B_EXTERNAL_IP
	
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
	    -addr A_EXTERNAL_IP 255.255.255.255
	          B_EXTERNAL_IP 255.255.255.255
	    -in -require -src B_EXTERNAL_IP
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
	    -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
	          B_INTERNAL_NETWORK B_INTERNAL_NETMASK
	    -in -require -src B_EXTERNAL_IP
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
	    -addr A_EXTERNAL_IP 255.255.255.255
	          B_INTERNAL_NETWORK B_INTERNAL_NETMASK
	    -in -require -src B_EXTERNAL_IP
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
	    -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
	          B_EXTERNAL_IP 255.255.255.255
	    -in -require -src B_EXTERNAL_IP
d231 4
a234 4
gatewA = "192.168.1.254/32"
gatewB = "192.168.2.1/32"
netA = "10.0.50.0/24"
netB = "10.0.99.0/24"
d242 2
a243 2
pass in proto esp from $gatewB to $gatewA
pass out proto esp from $gatewA to $gatewB
d246 2
a247 2
pass in on enc0 from $netB to $netA
pass out on enc0 from $netA to $netB
d250 2
a251 2
pass in on ne0 proto udp from $gatewB port = 500 to $gatewA port = 500
pass out on ne0 proto udp from $gatewA port = 500 to $gatewB port = 500
a276 1
.Pp
d278 4
a281 4
 A_INTERNAL_IP = 10.0.50.1
 A_EXTERNAL_IP = 192.168.1.254
 B_EXTERNAL_IP = 192.168.2.1
 B_INTERNAL_IP = 10.0.99.1
a282 1
.Pp
a287 1
.Pp
a292 1
.Pp
a294 1
.Pp
d296 2
a297 2
# /sbin/ipsecadm new esp -src 192.168.2.1 -dst 192.168.1.254 \e\ 
   -forcetunnel -spi 1000 -enc 3des -auth sha1 \e\ 
d300 2
a301 2
# /sbin/ipsecadm new esp -src 192.168.1.254 -dst 192.168.2.1  \e\ 
   -forcetunnel -spi 1001 -enc 3des -auth sha1 \e\ 
a303 1
.Pp
d305 2
a306 2
Create the IPsec flows on machine A (the first four are the
outbound flows, the latter four are the ingress filters for the
a307 1
.Pp
d309 16
a324 72
# /sbin/ipsecadm flow -dst 192.168.2.1 -proto esp \e\ 
    -addr 192.168.1.254 255.255.255.255 \e\ 
          192.168.2.1 255.255.255.255 -out \e\ 
    -require -src 192.168.1.254

# /sbin/ipsecadm flow -dst 192.168.2.1 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 10.0.99.0 255.255.255.0 \e\ 
    -require -out -src 192.168.1.254

# /sbin/ipsecadm flow -dst 192.168.2.1 -proto esp \e\ 
    -addr 192.168.1.254 255.255.255.255 \e\ 
          10.0.99.0 255.255.255.0  \e\ 
    -require -out -src 192.168.1.254

# /sbin/ipsecadm flow -dst 192.168.2.1 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 192.168.2.1 255.255.255.255 \e\ 
    -require -out -src 192.168.1.254

# /sbin/ipsecadm flow -dst 192.168.2.1 -proto esp \e\ 
    -addr 192.168.2.1 255.255.255.255 \e\ 
          192.168.1.254 255.255.255.255  \e\ 
    -require -in -src 192.168.1.254

# /sbin/ipsecadm flow -dst 192.168.2.1 -proto esp \e\ 
    -addr 10.0.99.0 255.255.255.0 10.0.50.0 255.255.255.0 \e\ 
    -require -in -src 192.168.1.254

# /sbin/ipsecadm flow -dst 192.168.2.1 -proto esp \e\ 
    -addr 192.168.2.1 255.255.255.255 \e\ 
           10.0.50.0 255.255.255.0  \e\ 
    -require -in -src 192.168.1.254

# /sbin/ipsecadm flow -dst 192.168.2.1 -proto esp \e\ 
    -addr 10.0.99.0 255.255.255.0 \e\ 
	   192.168.1.254 255.255.255.255  \e\ 
    -require -in -src 192.168.1.254
.Ed
.It
Create the ipsec flows on machine B:
.Bd -literal
# /sbin/ipsecadm flow -dst 192.168.1.254 -proto esp \e\ 
    -addr 192.168.2.1 255.255.255.255 \e\ 
          192.168.1.254 255.255.255.255 \e\ 
    -require -out -src 192.168.2.1

# /sbin/ipsecadm flow -dst 192.168.1.254 -proto esp \e\ 
    -addr 10.0.99.0 255.255.255.0 10.0.50.0 255.255.255.0 \e\ 
    -require -out -src 192.168.2.1

# /sbin/ipsecadm flow -dst 192.168.1.254 -proto esp \e\ 
    -addr 192.168.2.1 255.255.255.255 \e\ 
           10.0.50.0 255.255.255.0 -require -out -src 192.168.2.1

# /sbin/ipsecadm flow -dst 192.168.1.254 -proto esp \e\ 
    -addr 10.0.99.0 255.255.255.0 192.168.1.254 255.255.255.255 \e\ 
    -require -out -src 192.168.2.1

# /sbin/ipsecadm flow -dst 192.168.1.254 -proto esp \e\ 
    -addr 192.168.1.254 255.255.255.255 \e\ 
          192.168.2.1 255.255.255.255 -require -in -src 192.168.2.1

# /sbin/ipsecadm flow -dst 192.168.1.254 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 10.0.99.0 255.255.255.0 \e\ 
    -require -in -src 192.168.2.1

# /sbin/ipsecadm flow -dst 192.168.1.254 -proto esp \e\ 
    -addr 192.168.1.254 255.255.255.255 \e\ 
          10.0.99.0 255.255.255.0 -require -in -src 192.168.2.1

# /sbin/ipsecadm flow -dst 192.168.1.254 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 192.168.2.1 255.255.255.255 \e\ 
    -require -in -src 192.168.2.1
d330 4
a333 4
gatewA = "192.168.1.254/32"
gatewB = "192.168.2.1/32"
netA = "10.0.50.0/24"
netB = "10.0.99.0/24"
d341 4
a344 4
gatewB = "192.168.1.254/32"
gatewA = "192.168.2.1/32"
netB = "10.0.50.0/24"
netA = "10.0.99.0/24"
a352 1
.Pp
a357 1
.Pp
a478 1
.Pp
a497 1
.Pp
a504 1
.Pp
a508 1
.Pp
a515 1
.Pp
a538 1
.Pp
@


1.66
log
@- section reorder
- macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.65 2003/05/10 21:53:04 jmc Exp $
d70 1
a70 1
.Bl -bullet -inset -compact
@


1.65
log
@typos;
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.64 2002/09/07 00:52:19 deraadt Exp $
d204 1
a204 1
	          A_EXTERNAL_IP 255.255.255.255 
d318 10
a678 15
.Sh FILES
.Bl -tag -width /etc/isakmpd/isakmpd.conf -compact
.It Pa /usr/share/ipsec/rc.vpn
Sample VPN configuration file
.It Pa /etc/isakmpd/isakmpd.conf
.Xr isakmpd 8
configuration file
.It Pa /etc/pf.conf
Firewall configuration file
.El
.Sh BUGS
In situations where the gateway IPs are outside the tunnelled network
range, such as when tunnelling private (RFC 1918) networks over the Internet,
.Xr isakmpd 8
or manual keying must be used.
d692 5
@


1.64
log
@remove discussion about photurisd; ok ho
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.63 2002/05/23 09:30:35 mpech Exp $
d471 1
a471 1
# address. Phase 1 is used to setup a protected channel just
d534 1
a534 1
# address. Phase 1 is used to setup a protected channel just
@


1.63
log
@'SEE ALSO' audit in 'share/man/':
o) sort;
o) "," is separator of entries;
o) don't use "." or "," in the last entry;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.62 2002/02/19 21:11:22 miod Exp $
d55 1
a55 3
.Xr isakmpd 8
or
.Xr photurisd 8 .
d68 1
a68 1
There are currently three key exchange methods available:
a74 2
.It
.Xr photurisd 8
d258 1
a258 1
either the
a259 2
or
.Xr photurisd 8
a275 3
.Xr photurisd 8 ,
.Tn UDP
packets with source and destination ports of 468, and for
d283 1
a283 1
.Xr photurisd 8
d304 3
a306 3
# Passing in Photuris traffic from the security gateways
pass in on ne0 proto udp from $gatewB port = 468 to $gatewA port = 468
pass out on ne0 proto udp from $gatewA port = 468 to $gatewB port = 468
d670 1
a670 1
.Bl -tag -width /etc/photuris/photuris.conf -compact
a675 3
.It Pa /etc/photuris/photuris.conf
.Xr photurisd 8
configuration file
a679 3
.Xr photurisd 8
can not be used in VPN mode unless both of the security gateway IP addresses
lie within the network ranges being tunnelled.
a695 1
.Xr photurisd 8 ,
@


1.62
log
@IPsec is written ``IPsec'', not ``IPSec''.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.61 2002/02/12 18:01:02 kjell Exp $
d700 1
d703 1
d705 2
a707 1
.Xr pfctl 8 ,
a708 2
.Xr sysctl 8 ,
.Xr openssl 1 ,
d710 3
a712 4
.Xr isakmpd.conf 5 ,
.Xr isakmpd.policy 5 ,
.Xr keynote 4 ,
.Xr photurisd 8
@


1.61
log
@Add 128-bits as recommended AES key length.
Rework the pf rulesets to use better style (ie. macros, lists),
and match the examples used elsewhere in the document
Ok angelos@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.60 2002/01/21 20:12:00 angelos Exp $
d89 1
a89 1
To use IPSec,
@


1.60
log
@Fix typo, noted by ciph3r@@securebydefault.org
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.59 2001/12/10 03:17:02 ho Exp $
d141 1
d295 6
d302 2
a303 4
block in log on ne0 from any to any
block out log on ne0 from any to any
block in log on enc0 from any to any
block out log on enc0 from any to any
d306 2
a307 2
pass in proto esp from gatewB/32 to gatewA/32
pass out proto esp from gatewA/32 to gatewB/32
d310 2
a311 2
pass in on enc0 from netB/netBmask to netA/netAmask
pass out on enc0 from netA/netAmask to netB/netBmask
d314 2
a315 2
pass in on ne0 proto udp from gatewB/32 port = 468 to gatewA/32 port = 468
pass out on ne0 proto udp from gatewA/32 port = 468 to gatewB/32 port = 468
d444 2
a445 1
Configure the firewall rules on machine A:
d447 4
a450 5
# ne0 is the only interface going to the outside.
block in log on ne0 from any to any
block out log on ne0 from any to any
block in log on enc0 from any to any
block out log on enc0 from any to any
d452 1
a452 7
# Passing in encrypted traffic from security gateways
pass in proto esp from 192.168.2.1/32 to 192.168.1.254/32
pass out proto esp from 192.168.1.254/32 to 192.168.2.1/32

# Passing in traffic from the designated subnets.
pass in quick on enc0 from 10.0.99.0/24 to 10.0.50.0/24
pass out quick on enc0 from 10.0.50.0/24 to 10.0.99.0/24 
d455 2
a456 1
Configure the firewall rules on machine B:
d458 4
a461 9
# ne0 is the only interface going to the outside.
block in log on ne0 from any to any
block out log on ne0 from any to any
block in log on enc0 from any to any
block out log on enc0 from any to any

# Passing in encrypted traffic from security gateways
pass in proto esp from 192.168.1.254/32 to 192.168.2.1/32
pass out proto esp from 192.168.2.1/32 to 192.168.1.254/32
d463 1
a463 3
# Passing in traffic from the designated subnets.
pass in quick on enc0 from 10.0.50.0/24 to 10.0.99.0/24
pass out quick on enc0 from 10.0.99.0/24 to 10.0.50.0/24
@


1.59
log
@ESP and AH now enabled by default. Mention IPv6 forwarding. Various typo fixes.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.58 2001/11/14 06:09:05 deraadt Exp $
d693 1
a693 1
.Xr photuris 8
@


1.58
log
@typo; nulld@@norm.nulld.net
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.57 2001/11/06 20:44:22 angelos Exp $
d89 1
d91 1
a91 1
operations must be first enabled using
d101 4
a104 2
For security gateways, enabling packet forwarding is often
required:
d107 1
d110 4
a113 1
For more permanent operation, these options should be enabled in your
d608 1
a608 1
The only real differences between the two files in this example is
d615 1
a615 1
Do to the shared secret information in the configuration file, it must
d680 1
a680 1
For run with verbose debugging enabled, instead start with:
d693 2
a694 1
Photuris configuration file
d701 3
a703 3
lie within the network ranges being tunnelled to.
In situations where the gateway IP is outside the desired netrange, such
as with private (RFC 1918) networks,
@


1.57
log
@Fix symbolic address in example (noticed by kbob@@jogger-egg.com)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.56 2001/10/05 14:45:54 mpech Exp $
d299 1
a299 1
pass out on enc0 from natA/netAmask to netB/netBmask
@


1.56
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.55 2001/10/04 16:56:52 mpech Exp $
d206 1
a206 1
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
@


1.55
log
@we don't like .Pp and blank lines before/after .Ss;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.54 2001/10/04 10:28:20 wilfried Exp $
d41 2
a42 1
over the internet. For each subnet there is a security gateway which is
d111 2
a112 1
the same values. Since the security of the VPN is based on these keys
d114 2
a115 2
strong random source. One practical method of generating them
is by using the
d117 2
a118 1
device. To produce 160 bits (20 bytes) of randomness, for example, do:
d145 3
a147 2
to form its 168-bit key. This is because the most significant bit of each byte
is ignored by both algorithms.
d168 2
a169 1
command line.  However, another user could view the keys by using the
d258 2
a259 1
key management daemon. To make sure the daemon is properly configured
d600 2
a601 2
Read through the configuration one more time. The only real
differences between the two files in this example is
d603 2
a604 1
itself. Note that the shared secret (the
@


1.54
log
@e.g. and i.e. cleanup
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.53 2001/07/01 22:14:03 angelos Exp $
a106 2
.Pp

a166 1
.Pp
a246 1
.Pp
@


1.53
log
@Add PF example and text; openbsd@@davidkrause.com
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.52 2001/06/19 18:01:03 danh Exp $
d480 1
a480 1
# the phase 2 negotiation traffic (i.e encrypted & authenticated).
d543 1
a543 1
# the phase 2 negotiation traffic (i.e encrypted & authenticated).
@


1.52
log
@clean up IP addresses in isakmpd.conf examples;  ok angelos@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.51 2001/05/30 03:24:17 millert Exp $
d265 17
a281 18
.\"XXX - replace with ipfw when it is in-tree
.\".Ss Configuring Firewall Rules
.\".Xr ipf 8
.\"needs to be configured such that all packets from the outside are blocked
.\"by default.
.\"Only successfully IPsec-processed packets (from the
.\".Xr enc 4
.\"interface), or key management packets (for
.\".Xr photurisd 8 ,
.\".Tn UDP
.\"packets with source and destination ports of 468, and for
.\".Xr isakmpd 8 ,
.\".Tn UDP
.\"packets with source and destination ports of 500) should be allowed to pass.
.\".Pp
.\"The
.\".Xr ipf 5
.\"rules for a tunnel which uses encryption (the ESP IPsec protocol) and
d283 30
a312 30
.\"on security gateway A might look like this:
.\".Bd -literal
.\"# ne0 is the only interface going to the outside.
.\"block in log on ne0 from any to any
.\"block out log on ne0 from any to any
.\"block in log on enc0 from any to any
.\"block out log on enc0 from any to any
.\"
.\"# Passing in encrypted traffic from security gateways
.\"pass in proto esp from gatewB/32 to gatewA/32
.\"pass out proto esp from gatewA/32 to gatewB/32
.\"
.\"# Passing in traffic from the designated subnets.
.\"pass in on enc0 from netB/netBmask to netA/netAmask
.\"pass out on enc0 from natA/netAmask to netB/netBmask
.\"
.\"# Passing in Photuris traffic from the security gateways
.\"pass in on ne0 proto udp from gatewB/32 port = 468 to gatewA/32 port = 468
.\"pass out on ne0 proto udp from gatewA/32 port = 468 to gatewB/32 port = 468
.\".Ed
.\".Pp
.\"If there are no other
.\".Xr ipf 5
.\"rules, the "quick" clause can be added to the last four rules.
.\"NAT rules can also be used on the
.\".Xr enc 4
.\"interface.
.\"Note that it is strongly encouraged that instead of detailed IPF
.\"rules, the SPD (IPsec flow database) be utilized to specify security
.\"policy, if only to avoid filtering conflicts.
d684 2
a685 2
.\".It Pa /etc/ipf.rules
.\"Firewall configuration file
d699 2
a700 2
.\".Xr ipf 5 ,
.\".Xr ipf 8 ,
@


1.51
log
@comment out references to ipf to be replaced in the future with whatever packet filter we end up using
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.50 2001/03/01 16:11:24 aaron Exp $
d484 1
a484 1
193.168.2.1=		peer-machineB
d497 1
a497 1
Address=		192.168.1.254
d547 1
a547 1
193.168.1.254=		peer-machineA
d560 1
a560 1
Address=		192.168.2.1
@


1.50
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.49 2001/01/04 22:43:49 angelos Exp $
d265 18
a282 17
.Ss Configuring Firewall Rules
.Xr ipf 8
needs to be configured such that all packets from the outside are blocked
by default.
Only successfully IPsec-processed packets (from the
.Xr enc 4
interface), or key management packets (for
.Xr photurisd 8 ,
.Tn UDP
packets with source and destination ports of 468, and for
.Xr isakmpd 8 ,
.Tn UDP
packets with source and destination ports of 500) should be allowed to pass.
.Pp
The
.Xr ipf 5
rules for a tunnel which uses encryption (the ESP IPsec protocol) and
d284 30
a313 30
on security gateway A might look like this:
.Bd -literal
# ne0 is the only interface going to the outside.
block in log on ne0 from any to any
block out log on ne0 from any to any
block in log on enc0 from any to any
block out log on enc0 from any to any

# Passing in encrypted traffic from security gateways
pass in proto esp from gatewB/32 to gatewA/32
pass out proto esp from gatewA/32 to gatewB/32

# Passing in traffic from the designated subnets.
pass in on enc0 from netB/netBmask to netA/netAmask
pass out on enc0 from natA/netAmask to netB/netBmask

# Passing in Photuris traffic from the security gateways
pass in on ne0 proto udp from gatewB/32 port = 468 to gatewA/32 port = 468
pass out on ne0 proto udp from gatewA/32 port = 468 to gatewB/32 port = 468
.Ed
.Pp
If there are no other
.Xr ipf 5
rules, the "quick" clause can be added to the last four rules.
NAT rules can also be used on the
.Xr enc 4
interface.
Note that it is strongly encouraged that instead of detailed IPF
rules, the SPD (IPsec flow database) be utilized to specify security
policy, if only to avoid filtering conflicts.
d685 2
a686 2
.It Pa /etc/ipf.rules
Firewall configuration file
d700 2
a701 2
.Xr ipf 5 ,
.Xr ipf 8 ,
@


1.49
log
@I hate it when a manpage is wrong.
@
text
@d1 2
a2 1
.\" $OpenBSD: vpn.8,v 1.48 2000/12/15 02:54:08 provos Exp $
@


1.48
log
@remove section talking about photuris limitations
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.47 2000/11/20 08:00:04 deraadt Exp $
d199 1
a199 1
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
d207 1
a207 1
	# ipsecadm flow -dst A_EXTERNAL_IP -proto esp
@


1.47
log
@various Xr fixes; nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.46 2000/10/18 16:50:22 deraadt Exp $
a77 8
.Pp
At present,
.Xr photurisd 8
has a limitation in that the IP adress of the security gateway must
fall within the range of adresses being tunnelled to, making VPNs
between (non-routable) private (RFC 1918) networks difficult.
This does not apply to
.Xr isakmpd 8 .
@


1.46
log
@various cleanups
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.45 2000/10/13 04:09:22 aaron Exp $
d277 1
a277 1
.Xr enc0 4
d315 1
a315 1
.Xr enc0 4
@


1.45
log
@Remove unwanted trailing whitespace.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.44 2000/09/29 19:00:31 angelos Exp $
d89 3
a91 3
option    CRYPTO  # Cryptographic Framework
option    IPSEC   # IPSEC VPN
#option   KEY     # KEY implied by IPSEC
d102 2
a103 2
sysctl -w net.inet.esp.enable=1
sysctl -w net.inet.ah.enable=1
d109 1
a109 1
sysctl -w net.inet.ip.forwarding=1
d126 1
a126 1
   openssl rand 20 | hexdump -e '20/1 "%02x"'
d131 1
a131 1
   openssl rand 20 | perl -pe 's/./unpack("H2",$&)/ges'
d157 8
a164 9
ipsecadm new esp -spi SPI_AB -src A_EXTERNAL_IP
         -dst B_EXTERNAL_IP -forcetunnel
         -enc 3des -auth sha1
         -keyfile ENCRYPTION_KEY_FILE -authkeyfile AUTHENTICATION_KEY_FILE

ipsecadm new esp -spi SPI_BA -src B_EXTERNAL_IP
         -dst A_EXTERNAL_IP -forcetunnel
         -enc 3des -auth sha1
         -keyfile ENCRYPTION_KEY_FILE -authkeyfile AUTHENTICATION_KEY_FILE
d186 33
a218 33
ipsecadm flow -dst B_EXTERNAL_IP -proto esp
         -addr A_EXTERNAL_IP 255.255.255.255
               B_EXTERNAL_IP 255.255.255.255
         -require -out -src A_EXTERNAL_IP
ipsecadm flow -dst B_EXTERNAL_IP -proto esp
         -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK
         -require -out -src A_EXTERNAL_IP
ipsecadm flow -dst B_EXTERNAL_IP -proto esp
         -addr A_EXTERNAL_IP 255.255.255.255
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK
         -require -out -src A_EXTERNAL_IP
ipsecadm flow -dst B_EXTERNAL_IP -proto esp
         -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
               B_EXTERNAL_IP 255.255.255.255
         -require -out -src A_EXTERNAL_IP

ipsecadm flow -dst B_EXTERNAL_IP -proto esp
         -addr B_EXTERNAL_IP 255.255.255.255
               A_EXTERNAL_IP 255.255.255.255 
         -require -in -src A_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK
         -require -in -src A_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr B_EXTERNAL_IP 255.255.255.255
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK
         -require -in -src A_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
               A_EXTERNAL_IP 255.255.255.255
         -require -in -src A_EXTERNAL_IP
d223 33
a255 33
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr B_EXTERNAL_IP 255.255.255.255
               A_EXTERNAL_IP 255.255.255.255
         -out -require -src B_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK
         -out -require -src B_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr B_EXTERNAL_IP 255.255.255.255
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK
         -out -require -src B_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
               A_EXTERNAL_IP 255.255.255.255
         -out -require -src B_EXTERNAL_IP

ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr A_EXTERNAL_IP 255.255.255.255
               B_EXTERNAL_IP 255.255.255.255
         -in -require -src B_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK
         -in -require -src B_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr A_EXTERNAL_IP 255.255.255.255
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK
         -in -require -src B_EXTERNAL_IP
ipsecadm flow -dst A_EXTERNAL_IP -proto esp
         -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
               B_EXTERNAL_IP 255.255.255.255
         -in -require -src B_EXTERNAL_IP
d365 2
a366 1
          192.168.2.1 255.255.255.255 -out -require -src 192.168.1.254
d369 1
a369 1
    -addr 10.0.50.0 255.255.255.0 10.0.99.0 255.255.255.0 \e\
d374 2
a375 1
          10.0.99.0 255.255.255.0 -require -out -src 192.168.1.254
d378 1
a378 1
    -addr 10.0.50.0 255.255.255.0 192.168.2.1 255.255.255.255 \e\
d383 2
a384 1
          192.168.1.254 255.255.255.255 -require -in -src 192.168.1.254
d387 1
a387 1
    -addr 10.0.99.0 255.255.255.0 10.0.50.0 255.255.255.0 \e\
d391 3
a393 2
     -addr 192.168.2.1 255.255.255.255 \e\ 
           10.0.50.0 255.255.255.0 -require -in -src 192.168.1.254
d396 3
a398 2
     -addr 10.0.99.0 255.255.255.0 \e\ 
	   192.168.1.254 255.255.255.255 -require -in -src 192.168.1.254
d405 1
a405 1
          192.168.1.254 255.255.255.255 \e\
d409 1
a409 1
    -addr 10.0.99.0 255.255.255.0 10.0.50.0 255.255.255.0 \e\
d413 1
a413 1
     -addr 192.168.2.1 255.255.255.255 \e\ 
d417 2
a418 2
     -addr 10.0.99.0 255.255.255.0 192.168.1.254 255.255.255.255 \e\
     -require -out -src 192.168.2.1
d425 1
a425 1
    -addr 10.0.50.0 255.255.255.0 10.0.99.0 255.255.255.0 \e\
d433 1
a433 1
    -addr 10.0.50.0 255.255.255.0 192.168.2.1 255.255.255.255 \e\
@


1.44
log
@Update.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.43 2000/09/29 04:03:13 angelos Exp $
d57 1
a57 1
For manual keying, create the Security Associations (SA), one for 
d79 1
a79 1
At present, 
d84 1
a84 1
This does not apply to 
d260 1
a260 1
Unless manual keying is used, both security gateways need to start 
d335 2
a336 2
Choose the shared secrets using a suitably random method. 
The 3DES encryption key needs 192 bits (3x64), or 24 bytes. 
d473 3
a475 3
.It 
Create 
.Pa /etc/isakmpd/isakmpd.conf 
d481 1
a481 1
# address. Phase 1 is used to setup a protected channel just 
d538 2
a539 2
Create 
.Pa /etc/isakmpd/isakmpd.conf 
d544 1
a544 1
# address. Phase 1 is used to setup a protected channel just 
d602 1
a602 1
differences between the two files in this example is 
d644 1
a644 1
for the 
d646 3
a648 3
control traffic, on 
.Tn UDP 
port 500. 
d665 1
a665 1
Start 
d695 1
a695 1
as with private (RFC 1918) networks, 
@


1.43
log
@Update manpage for IPF rules on enc0 -- cedric@@wireless-networks.com
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.42 2000/09/27 04:45:47 angelos Exp $
d187 1
a187 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_AB -proto esp
d191 1
a191 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_AB -proto esp
d195 1
a195 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_AB -proto esp
d199 1
a199 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_AB -proto esp
d204 1
a204 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_BA -proto esp
d208 1
a208 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_BA -proto esp
d212 1
a212 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_BA -proto esp
d216 1
a216 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_BA -proto esp
d224 1
a224 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_BA -proto esp
d228 1
a228 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_BA -proto esp
d232 1
a232 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_BA -proto esp
d236 1
a236 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_BA -proto esp
d241 1
a241 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_AB -proto esp
d245 1
a245 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_AB -proto esp
d249 1
a249 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_AB -proto esp
d253 1
a253 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_AB -proto esp
d364 1
a364 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
d368 1
a368 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
d372 1
a372 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
d376 1
a376 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
d380 1
a380 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1000 -proto esp \e\ 
d384 1
a384 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1000 -proto esp \e\ 
d388 1
a388 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1000 -proto esp \e\ 
d392 1
a392 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1000 -proto esp \e\ 
d399 1
a399 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
d404 1
a404 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
d408 1
a408 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
d412 1
a412 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
d416 1
a416 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1001 -proto esp \e\ 
d420 1
a420 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1001 -proto esp \e\ 
d424 1
a424 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1001 -proto esp \e\ 
d428 1
a428 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1001 -proto esp \e\ 
@


1.42
log
@Update man page.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.41 2000/09/09 22:19:32 angelos Exp $
d60 1
a60 1
For manual keying, create the appropriate IPSec flows.
d154 1
a154 1
Before the IPSec flows can be defined, two Security Associations (SAs)
d178 1
a178 1
.Ss Creating IPSec Flows [manual keying]
d276 2
a277 1
by default. Only successfully IPSec-processed packets (from the
d297 1
d305 1
d314 7
a320 1
rules, the "quick" clause can be added to the last three rules.
d439 1
d447 1
d456 1
d464 1
@


1.41
log
@Some verbiage on kernel options necessary (mostly from willey@@serasystems.com)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.40 2000/07/21 00:20:18 angelos Exp $
a105 7
and
.Bd -literal
sysctl -w net.inet.ip.ipsec-acl=1
.Ed
.Pp
if inbound packet verification is desired (strongly recommended).
.Pp
d190 1
d194 1
d198 1
d202 1
d204 1
a204 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_BA -proto esp
d206 2
a207 1
               A_EXTERNAL_IP 255.255.255.255 -ingress
d210 2
a211 1
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK -ingress
d214 2
a215 1
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK -ingress
d218 2
a219 1
               A_EXTERNAL_IP 255.255.255.255 -ingress
d227 1
d231 1
d235 1
d239 1
d241 1
a241 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_AB -proto esp
d243 3
a245 2
               B_EXTERNAL_IP 255.255.255.255 -ingress
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_AB -proto esp
d247 3
a249 2
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK -ingress
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_AB -proto esp
d251 3
a253 2
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK -ingress
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_AB -proto esp
d255 2
a256 1
               B_EXTERNAL_IP 255.255.255.255 -ingress
d357 1
a357 1
          192.168.2.1 255.255.255.255
d360 2
a361 1
    -addr 10.0.50.0 255.255.255.0 10.0.99.0 255.255.255.0
d365 1
a365 1
          10.0.99.0 255.255.255.0
d368 2
a369 1
    -addr 10.0.50.0 255.255.255.0 192.168.2.1 255.255.255.255
d371 1
a371 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
d373 1
a373 1
          192.168.1.254 255.255.255.255 -ingress
d375 3
a377 2
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
    -addr 10.0.99.0 255.255.255.0 10.0.50.0 255.255.255.0 -ingress
d379 1
a379 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
d381 1
a381 1
           10.0.50.0 255.255.255.0 -ingress
d383 1
a383 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
d385 1
a385 1
	   192.168.1.254 255.255.255.255 -ingress
d392 2
a393 1
          192.168.1.254 255.255.255.255
d396 2
a397 1
    -addr 10.0.99.0 255.255.255.0 10.0.50.0 255.255.255.0
d401 1
a401 1
           10.0.50.0 255.255.255.0
d404 2
a405 1
     -addr 10.0.99.0 255.255.255.0 192.168.1.254 255.255.255.255
d407 1
a407 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
d409 1
a409 1
          192.168.2.1 255.255.255.255 -ingress
d411 3
a413 2
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 10.0.99.0 255.255.255.0 -ingress
d415 1
a415 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
d417 1
a417 1
          10.0.99.0 255.255.255.0 -ingress
d419 3
a421 2
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 192.168.2.1 255.255.255.255 -ingress
@


1.40
log
@CAST-128 keys are 40-128 bits long (not 40-160)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.39 2000/06/01 19:58:00 angelos Exp $
d87 8
@


1.39
log
@Oops, errors in the abstract example (vassilip@@dsl.cis.upenn.edu)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.38 2000/05/02 22:33:26 ho Exp $
d140 1
a140 1
.It Li CAST Ta "Variable (160 bits recommended)"
@


1.38
log
@Back to hexdump again after syntax fix from espie@@.
Add a bit more info in isakmpd.conf example comments on phase1/2.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.37 2000/05/02 22:01:36 ho Exp $
d156 1
a156 1
ipsecadm new esp -spi SPI_OUT -src A_EXTERNAL_IP
d161 1
a161 1
ipsecadm new esp -spi SPI_IN -src B_EXTERNAL_IP
d186 1
a186 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
d189 1
a189 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
d192 1
a192 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
d195 1
a195 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
d199 1
a199 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN -proto esp
d202 1
a202 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN -proto esp
d205 1
a205 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT -proto esp
d208 1
a208 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT -proto esp
d215 1
a215 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN -proto esp
d218 1
a218 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN -proto esp
d221 1
a221 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT -proto esp
d224 1
a224 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT -proto esp
d228 1
a228 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
d231 1
a231 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
d234 1
a234 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
d237 1
a237 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
@


1.37
log
@Revert to using perl in the random key generation examples as hexdump
doesn't always produce the same length output.
Also; 3DES key needs 24, not 20 bytes.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.36 2000/05/02 21:08:47 ho Exp $
d123 6
a128 1
device. To produce 160 bits (20 bytes) of randomness, for example, do a:
d314 1
a314 1
# openssl rand 24 | perl -pe 's/./unpack("H2",$&)/ges' > enc_key
d316 1
a316 1
# openssl rand 20 | perl -pe 's/./unpack("H2",$&)/ges' > auth_key
d443 3
a445 1
# address.
d450 2
a451 1
# In 'Phase 2' we define the VPN connections we want to use.
d506 3
a508 1
# address.
d513 2
a514 1
# In 'Phase 2' we define the VPN connections we want to use.
@


1.36
log
@Update, mostly isakmpd stuff.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.35 2000/04/25 19:35:30 deraadt Exp $
d125 1
a125 1
   /usr/sbin/openssl rand 20 | /usr/bin/hexdump -e \\"%02x\\"
d304 3
a306 1
Choose the shared secrets using a suitably random method:
d309 1
a309 1
# /usr/sbin/openssl rand 20 | /usr/bin/hexdump -e \\"%02x\\" > enc_key
d311 1
a311 1
# /usr/sbin/openssl rand 20 | /usr/bin/hexdump -e \\"%02x\\" > auth_key
@


1.35
log
@grammar
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.34 2000/04/25 19:33:22 deraadt Exp $
d57 2
a58 1
Create a Security Association (SA) for each endpoint.
d60 4
a63 1
Create the appropriate IPSec flows.
d68 1
a68 1
There are currently two key exchange methods available:
d74 2
d79 1
a79 2
At present VPNs between private (RFC 1918) networks must use
manual keying, as
d81 35
a115 5
can only be used if the IP address of the security gateway actually
falls within the range of addresses being tunnelled to.
This can clearly never occur if the addresses being tunnelled to
are non-routable private networks.
.Ss Generating Manual Keys
d125 1
a125 1
   dd if=/dev/urandom bs=20 count=1 |perl -pe 's/(.)/unpack('H2',)/ges'
d147 1
a147 24
.Ss Enabling the Appropriate Kernel Operations
.Xr ipsec 4
operations must be first enabled using
.Xr sysctl 8 .
Before creating security associations, or performing
encryption (ESP) or authentication (AH) operation, ensure the appropriate
kernel operation has been enabled:
.Bd -literal
sysctl -w net.inet.esp.enable=1
sysctl -w net.inet.ah.enable=1
.Ed
.Pp
and
.Bd -literal
sysctl -w net.inet.ip.ipsec-acl=1
.Ed
.Pp
if inbound packet verification is desired (strongly recommended).
.Pp
For more permanent operation, these options should be enabled in your
.Xr sysctl.conf 5 .
.Pp

.Ss Creating Security Associations
d172 1
a172 1
.Ss Creating IPSec Flows
d237 5
a241 2
Furthermore, unless manual keying is used,
both security gateways need to start the
d243 8
a250 5
key management daemon with the
.Fl v
flag and make sure it is configured properly on both sides to
provide the required security services (typically, encryption and
authentication).
d291 1
d307 1
a307 2
# dd if=/dev/urandom bs=1024 count=1 | sha1
cd28c327c7fd0943596a96cc7bf9108cd896f33c
d309 1
a309 5
# dd if=/dev/urandom bs=1024 count=1 | sha1
44aedc8aa8acf0b8c74acd626cd1b1057fb12c76

# dd if=/dev/urandom bs=1024 count=1 | sha1
c9fff55b501206a6607fb45c392c5e1568db2aaf
a315 2
# echo 596a96cc7bf9108cd896f33c44aedc8aa8acf0b8c74acd62 > enc_key
# echo c9fff55b501206a6607fb45c392c5e1568db2aaf > auth_key 
d422 205
d631 3
d644 3
a646 1
as with private (RFC 1918) networks, manual keying must be used.
d654 2
d657 3
@


1.34
log
@keyfile protects keys, not files
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.33 2000/04/22 20:48:46 kjell Exp $
d154 1
a154 1
may be used to specify the keys directly in the
@


1.33
log
@Don't be wasteful of entropy when generating keys.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.32 2000/04/22 02:04:23 angelos Exp $
d156 1
a156 1
command line.  However, another user could view the files by using the
@


1.32
log
@Change the example to use -keyfile/-authkeyfile, add a sentence on why
-key/-authkey are somewhat risky (command line snooping).
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.31 2000/04/21 21:37:49 deraadt Exp $
d88 1
a88 1
device. To produce 160 bits of randomness, for example, do a:
d90 1
a90 1
   dd if=/dev/urandom bs=1024 count=1 | sha1
@


1.31
log
@do not make stupid promises for the next release, three releases ago
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.30 2000/04/16 17:44:33 aaron Exp $
d142 1
a142 1
         -key ENCRYPTION_KEY -authkey AUTHENTICATION_KEY
d147 1
a147 1
         -key ENCRYPTION_KEY -authkey AUTHENTICATION_KEY
d150 10
d302 2
d306 1
a306 2
   -key 596a96cc7bf9108cd896f33c44aedc8aa8acf0b8c74acd62 \e\ 
   -authkey c9fff55b501206a6607fb45c392c5e1568db2aaf
d310 1
a310 2
   -key 596a96cc7bf9108cd896f33c44aedc8aa8acf0b8c74acd62 \e\ 
   -authkey c9fff55b501206a6607fb45c392c5e1568db2aaf
@


1.30
log
@More formatting repairs.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.29 2000/01/28 06:21:43 deraadt Exp $
a414 1
This should be fixed in the next release.
@


1.29
log
@typo; marc@@snafu.org
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.28 2000/01/13 05:15:42 angelos Exp $
d335 1
a335 1
     -addr 10.0.99.0 255.255.255.0 \e\
@


1.28
log
@Mention ingress flows.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.27 2000/01/11 01:07:55 angelos Exp $
d127 1
a127 1
.Ed.
@


1.27
log
@Mention isakmpd
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.26 1999/10/07 20:50:30 angelos Exp $
d124 7
d161 1
a161 1
               B_EXTERNAL_IP 255.255.255.255 -local
d167 1
a167 1
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK -local
d171 13
d190 1
a190 1
               A_EXTERNAL_IP 255.255.255.255 -local
d196 1
a196 1
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK -local
d200 13
d228 1
a228 2
interface), or
key management packets (for
d231 4
a234 1
packets with source and destination ports of 468) should be allowed to pass.
d304 3
a306 1
Create the ipsec route on machine A:
d311 1
a311 1
          192.168.2.1 255.255.255.255 -local
d318 1
a318 1
          10.0.99.0 255.255.255.0 -local
d322 15
d339 1
a339 1
Create the ipsec flow on machine B:
d343 1
a343 1
          192.168.1.254 255.255.255.255 -local
d350 1
a350 1
           10.0.50.0 255.255.255.0 -local
d354 14
@


1.26
log
@Reference enc(4) manpage
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.25 1999/07/22 12:58:26 aaron Exp $
d52 3
a54 1
Choose a key exchange method: manual keyed or
@


1.25
log
@clearer description of DES and 3DES key requirements; deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.24 1999/07/22 08:03:52 deraadt Exp $
d192 1
a192 1
.Nm enc0
d349 1
@


1.24
log
@do not talk about specific versions of openbsd in man pages!
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.23 1999/07/09 13:35:36 aaron Exp $
d48 2
a49 1
Briefly, creating a VPN consists of the following steps
d53 1
a53 1
.Xr photurisd 8
d55 1
a55 1
Create a Security Association (SA) for each endpoint
d57 1
a57 1
Create the appropriate IPSec flows
d59 1
a59 1
Configure your firewall rules appropriately
d107 3
a109 3
Note that when using DES (or 3DES), the most significant bit of each
byte is ignored. This means that 8 bytes are required to form a 56-bit
DES key, and 24 bytes are required to form a 168 bit 3DES key.
@


1.23
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.22 1999/07/07 20:04:31 kjell Exp $
d110 2
a111 1
As of OpenBSD 2.5, IPSEC operations must be first enabled using
@


1.22
log
@RFC 1597 obsoleted by RFC 1918. Pointed out by arusel@@mecon.ar
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.21 1999/07/07 06:21:04 kjell Exp $
d45 1
a45 1
This document describes the configuration process for setting up a 
d51 1
a51 1
Choose a key exchange method: manual keyed or 
d57 1
a57 1
.It 
d71 1
a71 1
manual keying, as  
d79 2
a80 2
be any hexadecimal value, so long as both sides of the connection use 
the same values. Since the security of the VPN is based on these keys 
d83 1
a83 1
is by using the 
d132 1
a132 1
   
d142 1
a142 1
routes with the 
d178 1
a178 1
Furthermore, unless manual keying is used, 
d183 1
a183 1
flag and make sure it is configured properly on both sides to 
d189 5
a193 5
by default. Only successfully IPSec-processed packets (from the 
.Nm enc0 
interface), or 
key management packets (for 
.Xr photurisd 8 , 
d196 1
a196 1
.Pp 
d199 1
a199 1
rules for a tunnel which uses encryption (the ESP IPsec protocol) and 
d224 1
a224 1
To create a manual keyed VPN between two class C networks using 
d229 1
a229 1
 A_EXTERNAL_IP = 192.168.1.254 
d341 1
a341 1
can not be used in VPN mode unless both of the security gateway IP addresses 
d343 1
a343 1
In situations where the gateway IP is outside the desired netrange, such 
@


1.21
log
@Attempt to make photurisd limitations clearer.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.20 1999/07/07 04:18:01 kjell Exp $
d70 1
a70 1
At present VPNs between private (RFC 1597) networks must use
d344 1
a344 1
as with private (RFC 1597) networks, manual keying must be used.
@


1.20
log
@Add the ipsec sysctl information.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.19 1999/07/02 20:11:51 aaron Exp $
d70 2
a71 1
At present VPNs between private networks must use manual keying.
d73 4
a76 2
may only be used in situations where both
security gateways are within their protected network ranges.
a339 1
When using 
d341 2
a342 2
in VPN mode, both of the security gateways IP addresses must fall within
their protected netranges.
d344 1
a344 1
as with private networks (RFC 1597), manual keying must be used.
@


1.19
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.18 1999/06/07 01:51:21 angelos Exp $
d106 15
@


1.18
log
@Fix address typos in the example (markc@@)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.17 1999/05/19 06:01:30 fgsch Exp $
d32 1
a32 1
.Dd Feb 9, 1999
@


1.17
log
@ed0 is gone. use ne0.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.16 1999/05/16 19:57:40 alex Exp $
d235 1
a235 1
# /sbin/ipsecadm new esp -src 198.168.2.1 -dst 198.168.1.254 \e\ 
d240 1
a240 1
# /sbin/ipsecadm new esp -src 198.168.1.254 -dst 198.168.2.1  \e\ 
@


1.16
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.15 1999/04/20 22:56:11 alex Exp $
d185 3
a187 3
# ed0 is the only interface going to the outside.
block in log on ed0 from any to any
block out log on ed0 from any to any
d198 2
a199 2
pass in on ed0 proto udp from gatewB/32 port = 468 to gatewA/32 port = 468
pass out on ed0 proto udp from gatewA/32 port = 468 to gatewB/32 port = 468
d284 3
a286 3
# ed0 is the only interface going to the outside.
block in log on ed0 from any to any
block out log on ed0 from any to any
d299 3
a301 3
# ed0 is the only interface going to the outside.
block in log on ed0 from any to any
block out log on ed0 from any to any
@


1.15
log
@sipp-esp --> esp
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.14 1999/03/15 15:35:36 deraadt Exp $
d330 3
a334 1
.Xr ipsec 4 ,
a335 2
.Xr options 4 ,
.Xr ipf 5 ,
@


1.14
log
@cleanups; nash@@mcs.net
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.13 1999/02/25 01:08:40 kjell Exp $
d191 2
a192 2
pass in proto sipp-esp from gatewB/32 to gatewA/32
pass out proto sipp-esp from gatewA/32 to gatewB/32
d290 2
a291 2
pass in proto sipp-esp from 192.168.2.1/32 to 192.168.1.254/32
pass out proto sipp-esp from 192.168.1.254/32 to 192.168.2.1/32
d305 2
a306 2
pass in proto sipp-esp from 192.168.1.254/32 to 192.168.2.1/32
pass out proto sipp-esp from 192.168.2.1/32 to 192.168.1.254/32
@


1.13
log
@change ipf(1) references to ipf(8)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.12 1999/02/24 23:35:20 angelos Exp $
d182 1
a182 1
.Xr photurisid 8
d333 1
@


1.12
log
@Point to ipsecadm(8).
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.11 1999/02/24 23:33:37 angelos Exp $
d169 1
a169 1
.Xr ipf 1
d330 1
a330 1
.Xr ipf 1 ,
@


1.11
log
@Update man page...
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.10 1999/02/24 22:56:49 angelos Exp $
d331 1
a331 1
.Xr ipsecadm 1 ,
@


1.10
log
@Update the examples to new syntax of ipsecadm.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.9 1999/02/12 21:35:27 kjell Exp $
d125 1
a125 1
.Xr ipsecadm 1 
@


1.9
log
@Added recommended key lengths for variable ciphers. Cleaned up BUGS.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.8 1999/02/12 04:54:46 kjell Exp $
d95 1
d98 5
a102 2
Use of DES as an encryption algorithm is not recommended
(except for backwards compatibility) due to its short key length.
a105 2
.Pp
Initialization vectors (IV) are always 8 byte hexadecimal values.
d108 1
a108 1
must be defined on each end of the VPN. Eg:
d111 2
a112 3
         -dst B_EXTERNAL_IP
         -tunnel A_EXTERNAL_IP B_EXTERNAL_IP
         -enc 3des -auth sha1 -iv INITIALIZATION_VECTOR
d116 2
a117 3
         -dst A_EXTERNAL_IP
         -tunnel B_EXTERNAL_IP A_EXTERNAL_IP
         -enc 3des -auth sha1 -iv INITIALIZATION_VECTOR
d122 1
a122 1
Both subnets need to configure
d130 1
a130 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT
d133 1
a133 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT
d136 1
a136 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT
d139 1
a139 1
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT
d146 1
a146 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN
d149 1
a149 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN
d152 1
a152 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT
d155 1
a155 1
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT
d236 1
a236 2
   -tunnel 198.168.2.1 198.168.1.254 \e\  
   -spi 1000 -enc 3des -auth sha1 -iv cd28c327c7fd0943 \e\ 
d241 1
a241 2
   -tunnel 198.168.1.254 198.168.2.1 \e\ 
   -spi 1001 -enc 3des -auth sha1 -iv cd28c327c7fd0943 \e\ 
d250 1
a250 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 \e\ 
d254 1
a254 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 \e\ 
d257 1
a257 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 \e\ 
d261 1
a261 1
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 \e\ 
d267 1
a267 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 \e\ 
d271 1
a271 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 \e\ 
d274 1
a274 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 \e\ 
d278 1
a278 1
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 \e\ 
@


1.8
log
@Fleshed out the man page. Much more detail.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.7 1998/10/30 00:02:57 aaron Exp $
d82 1
a82 1
device. Eg:
d91 4
a94 4
.It Li DES Ta "8 bytes"
.It Li 3DES Ta "24 bytes"
.It Li BLF Ta "Variable"
.It Li CAST Ta "Variable"
d97 6
d326 4
a329 3
in VPN mode, both of your security gateways need to be in the protected
network; that is, the gateway IP and network mask = network. This means
that it is only possible to tunnel private networks using manual keying.
@


1.7
log
@add a BUGS section; provos@@, and misc cleanups
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.6 1998/09/07 16:44:37 aaron Exp $
d32 1
a32 1
.Dd May 23, 1998
d48 68
d124 12
a135 1
ipsecadm flow -dst gatewB -spi 1 -addr netA netAmask netB netBmask -local
d140 12
a151 1
ipsecadm flow -dst gatewA -spi 1 -addr netB netBmask netA netAmask -local
d154 2
a155 1
Furthermore, both security gateways need to start the
d159 1
a159 1
flag and need to make sure that it is configured properly on both sides to 
d162 1
a162 1
.Pp
d164 6
a169 4
needs to be configured such that all packets from the outside are blocked.
Only packets from the security gateways either on the
.Pa enc0
interface (successfully IPsec-processed packets) or 
d171 1
a171 1
packets with source and remote ports of 468 (Photuris) should be allowed in.
d175 2
a176 1
rules for a tunnel which only uses encryption (the ESP IPsec protocol)
d185 2
a186 2
pass in proto sipp-esp from gatewB to gatewA
pass out proto sipp-esp from gatewA to gatewB
d199 118
d318 3
a320 1
At the moment both of your security gateways need to be in the protected
d322 2
a323 2
that it is not possible to tunnel private networks. Hopefully
support for that will be available in the next release.
@


1.6
log
@More man page fixes. Particularly fix uses of it's/its, affect/effect,
then/than and such. Other miscellaneous problems fixed across these source
files.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.5 1998/06/29 05:58:50 angelos Exp $
d105 5
a111 1
.Xr ipf 5 ,
d115 2
a116 1
.Xr photurisd 8 .
@


1.5
log
@Add reference to options (4)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.4 1998/06/29 05:56:28 angelos Exp $
d74 1
a74 1
Only packets from the security gatewaysm either on the
@


1.4
log
@Fix the language, add more references. General cleanup.
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.3 1998/06/02 09:18:33 provos Exp $
d110 1
@


1.3
log
@add sample ipf configuration
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.2 1998/05/24 23:26:42 provos Exp $
d39 4
a42 5
A virtual private network is used to connect two or more subnets via the
internet. For each subnet there is a security gateway which is connected
via a cryptographically secured tunnel to the security gateway of the other
subnet. In
.Ox
d44 2
a45 2
is used to provide the necessary cryptographical services. This document
describes the configuration process for setting up a 
d64 1
a64 1
Additionally both security gateways need to start the
d68 3
a70 2
flag and have to make sure that it is configured properly on both sides to 
provide encryption and authentication.
a71 1
Now
d73 2
a74 2
needs to be configured that all packets from the outside are blocked.
Only packets from the security gateways either on the
d76 1
a76 1
interface or 
d78 1
a78 2
packets with source and remote ports of 468
should be allowed in.
d80 4
a83 2
The ipf rules for a tunnel which only uses ESP on security gateway A 
might look like this:
d102 3
a104 2
If there are no more ipf rules the quick clause can be added to the last
three rules.
d107 1
@


1.2
log
@mention ipsecadm(1) instead of rt(1)
@
text
@d1 1
a1 1
.\" $OpenBSD: vpn.8,v 1.1 1998/05/24 14:20:40 provos Exp $
d81 23
a108 3
.Sh HISTORY
VPN support appeared first in
.Ox 2.3 .
@


1.1
log
@describe how to set up a VPN.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d83 1
a83 1
.Xr rt 1 ,
@

