head	1.50;
access;
symbols
	OPENBSD_5_9:1.49.0.2
	OPENBSD_5_9_BASE:1.49
	OPENBSD_5_8:1.49.0.4
	OPENBSD_5_8_BASE:1.49
	OPENBSD_5_7:1.48.0.2
	OPENBSD_5_7_BASE:1.48
	OPENBSD_5_6:1.47.0.6
	OPENBSD_5_6_BASE:1.47
	OPENBSD_5_5:1.47.0.4
	OPENBSD_5_5_BASE:1.47
	OPENBSD_5_4:1.40.0.16
	OPENBSD_5_4_BASE:1.40
	OPENBSD_5_3:1.40.0.14
	OPENBSD_5_3_BASE:1.40
	OPENBSD_5_2:1.40.0.12
	OPENBSD_5_2_BASE:1.40
	OPENBSD_5_1_BASE:1.40
	OPENBSD_5_1:1.40.0.10
	OPENBSD_5_0:1.40.0.8
	OPENBSD_5_0_BASE:1.40
	OPENBSD_4_9:1.40.0.6
	OPENBSD_4_9_BASE:1.40
	OPENBSD_4_8:1.40.0.4
	OPENBSD_4_8_BASE:1.40
	OPENBSD_4_7:1.40.0.2
	OPENBSD_4_7_BASE:1.40
	OPENBSD_4_6:1.39.0.8
	OPENBSD_4_6_BASE:1.39
	OPENBSD_4_5:1.39.0.4
	OPENBSD_4_5_BASE:1.39
	OPENBSD_4_4:1.39.0.2
	OPENBSD_4_4_BASE:1.39
	OPENBSD_4_3:1.38.0.4
	OPENBSD_4_3_BASE:1.38
	OPENBSD_4_2:1.38.0.2
	OPENBSD_4_2_BASE:1.38
	OPENBSD_4_1:1.36.0.10
	OPENBSD_4_1_BASE:1.36
	OPENBSD_4_0:1.36.0.8
	OPENBSD_4_0_BASE:1.36
	OPENBSD_3_9:1.36.0.6
	OPENBSD_3_9_BASE:1.36
	OPENBSD_3_8:1.36.0.4
	OPENBSD_3_8_BASE:1.36
	OPENBSD_3_7:1.36.0.2
	OPENBSD_3_7_BASE:1.36
	OPENBSD_3_6:1.35.0.6
	OPENBSD_3_6_BASE:1.35
	OPENBSD_3_5:1.35.0.4
	OPENBSD_3_5_BASE:1.35
	OPENBSD_3_4:1.35.0.2
	OPENBSD_3_4_BASE:1.35
	OPENBSD_3_3:1.25.0.2
	OPENBSD_3_3_BASE:1.25
	OPENBSD_3_2:1.24.0.2
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.21.0.2
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.20.0.2
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.12.0.6
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.4
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.50
date	2016.03.01.16.12.40;	author naddy;	state dead;
branches;
next	1.49;
commitid	EdchA0ejb7OS0o5l;

1.49
date	2015.04.19.08.58.02;	author ratchov;	state Exp;
branches;
next	1.48;
commitid	4aXaKicPUFACoSqY;

1.48
date	2014.09.08.04.40.30;	author doug;	state Exp;
branches;
next	1.47;
commitid	eZUjxECXTMZqzs5z;

1.47
date	2014.02.17.21.06.31;	author juanfra;	state Exp;
branches;
next	1.46;

1.46
date	2014.01.23.08.13.12;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2014.01.23.05.03.33;	author tedu;	state Exp;
branches;
next	1.44;

1.44
date	2014.01.23.04.39.41;	author tedu;	state Exp;
branches;
next	1.43;

1.43
date	2014.01.23.04.36.05;	author tedu;	state Exp;
branches;
next	1.42;

1.42
date	2013.09.23.12.14.20;	author ajacoutot;	state Exp;
branches;
next	1.41;

1.41
date	2013.09.23.06.19.39;	author ajacoutot;	state Exp;
branches;
next	1.40;

1.40
date	2009.10.22.09.22.46;	author sobrado;	state Exp;
branches;
next	1.39;

1.39
date	2008.06.06.15.17.48;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2007.07.11.05.13.18;	author sturm;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.31.19.19.58;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2005.03.11.23.03.58;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.09.07.21.00.41;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2003.09.06.17.23.52;	author avsm;	state Exp;
branches;
next	1.33;

1.33
date	2003.09.05.22.44.34;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2003.09.02.11.23.14;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2003.08.23.19.26.25;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2003.08.06.12.06.55;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.06.19.28.06;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2003.05.10.21.40.54;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2003.05.06.08.56.12;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2003.04.18.04.27.27;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2003.02.19.09.10.36;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2002.05.22.22.11.56;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2002.05.22.14.05.31;	author pvalchev;	state Exp;
branches;
next	1.22;

1.22
date	2002.05.09.06.09.05;	author jasoni;	state Exp;
branches;
next	1.21;

1.21
date	2001.11.13.13.54.26;	author mpech;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.19;

1.19
date	2001.10.04.16.56.52;	author mpech;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.17.11.13.58;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.03.15.21.17;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.03.20.51.11;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2001.04.09.07.14.12;	author tholo;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.27.18.11.12;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.22.16.54.37;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	99.07.30.19.06.40;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.07.09.07.57.26;	author hugh;	state Exp;
branches;
next	1.10;

1.10
date	99.05.23.14.11.24;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.04.02.04.00.04;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	98.12.28.11.17.25;	author hugh;	state Exp;
branches;
next	1.7;

1.7
date	98.09.07.16.44.37;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.07.24.20.49.15;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.01.02.08.51.29;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.02.14.23.14.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.11.07.10.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.41.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Support for running Linux binaries under emulation is going away.

Remove "option COMPAT_LINUX" and everything directly tied to it from the
kernel and the corresponding man page documentation.

ok visa@@ guenther@@
@
text
@.\"	$OpenBSD: compat_linux.8,v 1.49 2015/04/19 08:58:02 ratchov Exp $
.\"	$NetBSD: compat_linux.8,v 1.2 1995/10/16 20:17:59 fvdl Exp $
.\"
.\" Copyright (c) 1995 Frank van der Linden
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed for the NetBSD Project
.\"      by Frank van der Linden
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: April 19 2015 $
.Dt COMPAT_LINUX 8
.Os
.Sh NAME
.Nm compat_linux
.Nd setup for running Linux binaries under emulation
.Sh DESCRIPTION
.Ox
supports running Linux binaries.
This only applies to i386 systems and the ELF binary format.
Most programs should work, including the ones that use the Linux SVGAlib.
Programs that will not work include those that use i386-specific calls,
such as enabling virtual 8086 mode.
.Pp
The Linux compatibility feature is active
for kernels compiled with the
.Nm COMPAT_LINUX
option and kern.emul.linux
.Xr sysctl 8
enabled.
.Pp
A lot of programs are dynamically linked.
This means that the Linux shared libraries that the programs depend on
and the runtime linker are also needed.
Additionally, a "shadow root" directory for Linux binaries
on the
.Ox
system will have to be created.
This directory is named
.Pa /emul/linux .
Any file operations done by Linux programs run under
.Ox
will look in this directory first.
So, if a Linux program opens, for example,
.Pa /etc/passwd ,
.Ox
will first try to open
.Pa /emul/linux/etc/passwd ,
and if that does not exist open the `real'
.Pa /etc/passwd
file.
It is recommended that Linux packages that include configuration
files, etc., be installed under
.Pa /emul/linux ,
to avoid naming conflicts with possible
.Ox
counterparts.
Shared libraries should also be installed in the shadow tree.
.Ss Setting up shared libraries
Run
.Xr pkg_add 1
to install the fedora_base package from the emulators category.
The fedora_base package contains the shared libraries, binaries,
and other related files necessary to run Linux applications.
.Ss Programs using SVGAlib
SVGAlib binaries require some extra care.
The pcvt virtual console driver has to be in the kernel for them to work,
and some symbolic links in the
.Pa /emul/linux/dev
directory will have to be created, namely:
.Bd -unfilled -offset indent
/emul/linux/dev/console -> /dev/tty
/emul/linux/dev/mouse -> whatever device the mouse is connected to
/emul/linux/dev/ttyS0 -> /dev/tty00
/emul/linux/dev/ttyS1 -> /dev/tty01
.Ed
.Pp
Be warned: the first link mentioned here makes SVGAlib binaries
work, but may confuse others, so it may be necessary to remove it again at
some point.
.Ss Other links Linux binaries may require
CD-ROM support requires a link to the CD-ROM device, similar to:
.Pp
.D1 /emul/linux/dev/cdrom -> /dev/cd0a   (first CD-ROM)
.Sh BUGS
.Nm
is incomplete and currently only supported on the i386.
@


1.49
log
@Remove reference to oss audio emulation,
from Scarlett <scarlett at entering.space>. Thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.48 2014/09/08 04:40:30 doug Exp $
d33 1
a33 1
.Dd $Mdocdate: September 8 2014 $
@


1.48
log
@Additional cleanup for procfs removal

ok guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.47 2014/02/17 21:06:31 juanfra Exp $
d33 1
a33 1
.Dd $Mdocdate: February 17 2014 $
a43 2
Additionally, OSS audio is emulated, so Linux binaries can access the
native audio transparently.
a102 4
.Ss Programs using OSS (Linux) audio
Only the DSP device is emulated, the following link should be created:
.Pp
.D1 /emul/linux/dev/dsp -> /dev/audio
@


1.47
log
@Remove an old reference to the a.out support. ok pirofti@@ sthen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.46 2014/01/23 08:13:12 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: January 23 2014 $
a112 7
.Ss File systems
Many Linux binaries expect
.Pa /proc
to have procfs mounted on it.
Some binaries will require it to be mounted using the
.Fl o Ar linux
option.
@


1.46
log
@do not abuse Nm;
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.45 2014/01/23 05:03:33 tedu Exp $
d42 1
a42 2
This only applies to i386 systems for now.
Both the a.out and ELF binary formats are supported.
@


1.45
log
@on second thought, the instructions about copying libraries are also
hopelessly complicated, liable to break, and filled with dubiousness.
just use pkg_add.
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.44 2014/01/23 04:39:41 tedu Exp $
d87 3
a89 9
to install the
.Nm fedora_base
package from the
.Nm emulators
category.
The
.Nm fedora_base
package contains the shared libraries, binaries, and other related files
necessary to run Linux applications.
@


1.44
log
@use pkg_add to install fedora_base, not ports
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.43 2014/01/23 04:36:05 tedu Exp $
a83 9
.Pp
Generally, it will only be necessary to look for the shared libraries
that Linux binaries depend on the first few times that Linux programs
are installed on the
.Ox
system.
After a while, there will be a sufficient set of Linux shared libraries
on the system to be able to run newly imported Linux binaries without
any extra work.
a84 8
How to get to know which shared libraries Linux binaries need, and where
to get them?
Basically, there are 2 possibilities.
(When following these instructions, root privileges are required on the
.Ox
system to perform the necessary installation steps).
.Bl -enum
.It
a95 84
Access to a Linux system is not needed.
.It
Access to a Linux system:
In this case temporarily install the binary there, see what
shared libraries it needs, and copy them to the
.Ox
system.
Example: ftp the Linux binary of Doom.
Put it on the Linux system, and check which shared
libraries it needs by running `ldd linuxxdoom':
.Pp
.Dl (me@@linux) ldd linuxxdoom
.Bd -unfilled -offset indent
libXt.so.3 (DLL Jump 3.1) => /usr/X11/lib/libXt.so.3.1.0
libX11.so.3 (DLL Jump 3.1) => /usr/X11/lib/libX11.so.3.1.0
libc.so.4 (DLL Jump 4.5pl26) => /lib/libc.so.4.6.29
.Ed
.Pp
Get all the files from the last column, and put them under
.Pa /emul/linux ,
with the names in the first column
as symbolic links pointing to them.
The following files would therefore be required on the
.Ox
system:
.Bd -unfilled -offset indent
/emul/linux/usr/X11/lib/libXt.so.3.1.0
/emul/linux/usr/X11/lib/libXt.so.3 (symbolic link to the above)
/emul/linux/usr/X11/lib/libX11.so.3.1.0
/emul/linux/usr/X11/lib/libX11.so.3 (symbolic link to the above)
/emul/linux/lib/libc.so.4.6.29
/emul/linux/lib/libc.so.4 (symbolic link to the above)
.Ed
.Pp
Note that if a Linux shared library with a
matching major revision number to the first column of the 'ldd'
output is already present, it isn't necessary to copy the file named
in the last column to the
.Ox
system; the one already there should work.
It is advisable to copy the shared library anyway, if it is a newer version.
The old one can be removed, as long as the symbolic
link points to the new one.
So, if these libraries exist on the system:
.Bd -unfilled -offset indent
/emul/linux/lib/libc.so.4.6.27
/emul/linux/lib/libc.so.4 -> /emul/linux/lib/libc.so.4.6.27
.Ed
.Pp
and the ldd output for a new binary is:
.Bd -unfilled -offset indent
libc.so.4 (DLL Jump 4.5pl26) => /lib/libc.so.4.6.29
.Ed
.Pp
it isn't necessary to copy
.Pa /lib/libc.so.4.6.29
too, because the program should work fine with the slightly older version.
.Pa libc.so
can be replaced anyway, and that should leave:
.Bd -unfilled -offset indent
/emul/linux/lib/libc.so.4.6.29
/emul/linux/lib/libc.so.4 -> /emul/linux/lib/libc.so.4.6.29
.Ed
.Pp
Please note that the symbolic link mechanism is
only needed for Linux binaries, the
.Ox
runtime linker takes care of looking for matching major revision numbers
itself.
.Pp
Finally, the Linux runtime linker and its config files must be present
on the system.
These files should be copied from the Linux system to their appropriate
place on the
.Ox
system (in the
.Pa /emul/linux
tree):
.Bd -unfilled -offset indent
/lib/ld.so
/etc/ld.so.cache
/etc/ld.so.config
.Ed
.El
@


1.43
log
@instructions for downloading slackware from ftp are comically out of date.
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.42 2013/09/23 12:14:20 ajacoutot Exp $
d33 1
a33 1
.Dd $Mdocdate: September 23 2013 $
d102 5
a106 7
Access to the
.Ox
.Xr ports 7
system:
Install the port named
.Nm fedora/base
in the
d110 2
a111 2
.Nm fedora/base
port contains the shared libraries, binaries, and other related files
@


1.42
log
@Revert. It seems people don't agree about which device should be used.
req. by krw@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.41 2013/09/23 06:19:39 ajacoutot Exp $
d96 1
a96 1
Basically, there are 3 possibilities.
a197 97
.It
No access to a Linux system:
In that case, get the extra files from various ftp sites.
Information on where to look for the various files is appended
below.
.Pp
Retrieve the following files (from _one_ ftp site to avoid
any version mismatches), and install them under
.Pa /emul/linux
(i.e.\&
.Pa /foo/bar
is installed as
.Pa /emul/linux/foo/bar ) :
.Bd -unfilled -offset indent
/sbin/ldconfig
/usr/bin/ldd
/lib/libc.so.x.y.z
/lib/ld.so
.Ed
.Pp
ldconfig and ldd don't necessarily need to be under
.Pa /emul/linux ,
they can be installed elsewhere in the system too.
Just make sure they don't conflict with their
.Ox
counterparts.
A good idea would be to install them in
.Pa /usr/local/bin
as ldconfig-linux and ldd-linux.
.Pp
Create the file
.Pa /emul/linux/etc/ld.so.conf ,
containing the directories in which the Linux runtime linker should look
for shared libs.
It is a plain text file, containing a directory
name on each line.
.Pa /lib
and
.Pa /usr/lib
are standard; the following could be added:
.Bd -unfilled -offset indent
/usr/X11/lib
/usr/local/lib
.Ed
.Pp
Note that these are mapped to
.Pa /emul/linux/XXXX
by the
.Ox
compat code, and should exist as such on the
.Ox
system.
.Pp
Run the Linux ldconfig program.
It should be statically linked, so it doesn't need any shared libraries
by itself.
It will create the file
.Pa /emul/linux/etc/ld.so.cache .
The Linux version of the ldconfig program should be rerun
each time a new shared library is added.
.Pp
The
.Ox
system should now be set up for Linux binaries which only need
a shared libc.
Test this by running the Linux ldd on itself.
Suppose that it is installed as ldd-linux, it should produce
something like:
.Pp
.Dl % ldd-linux `which ldd-linux`
.Pp
.D1 libc.so.4 (DLL Jump 4.5pl26) => /lib/libc.so.4.6.29
.Pp
This being done, new Linux binaries can now be installed.
Whenever a new Linux program is installed, it should be determined
if it needs shared libraries, and if so, whether they are
installed in the
.Pa /emul/linux
tree.
To do this, run the Linux version ldd on the new program, and
watch its output.
ldd (see also the manual page for
.Xr ldd 1 )
will print a list of shared libraries that the program depends on, in the
form  <majorname> (<jumpversion>) => <fullname>.
.Pp
If it prints "not found" instead of <fullname> it means that
an extra library is needed.
Which library this is, is shown
in <majorname>, which will be of the form libXXXX.so.<N>.
Find a libXXXX.so.<N>.<mm> on a Linux ftp site,
and install it on the
.Ox
system.
The XXXX (name) and <N> (major revision number) should match;
the minor number(s) <mm> are less important, though it is
advised to take the most recent version.
a198 67
.Ss Finding the necessary files
.Sy Note :
the information below is valid as of Feb 2003, but certain details
such as names of ftp sites, directories and distribution names
may have changed since then.
It is much easier to use the
.Ox
.Xr ports 7
system (possibility 1, above).
.Pp
Linux is distributed by several groups that make their own set
of binaries that they distribute.
Each distribution has its own name, like "Slackware" or "Yggdrasil".
The distributions are available on a lot of ftp sites.
Sometimes the files are unpacked, and individual files can be retrieved,
but mostly they are stored in distribution sets,
usually consisting of subdirectories with gzipped tar files in them.
The primary ftp sites for the distributions are:
.Bd -unfilled -offset indent
.Pa ftp.ibiblio.org:/pub/Linux/distributions
.Pa distro.ibiblio.org:/pub/Linux/distributions
.\" .Pa tsx-11.mit.edu:/pub/linux/distributions
.Ed
.Pp
Some European mirrors:
.Bd -unfilled -offset indent
.\" .Pa ftp.luth.se:/pub/linux/distributions
.\" .Pa ftp.demon.co.uk:/pub/linux/distributions
.Pa ftp.sunet.se:/pub/Linux/distributions
.Pa src.doc.ic.ac.uk:/packages/linux
.Ed
.Pp
For simplicity, let's concentrate on Slackware here.
This distribution consists of a number of subdirectories, containing
separate packages.
Normally, they're controlled by an install program, but the files can be
retrieved "by hand" too.
The fastest way to find something is to
.Xr grep 1
the file FILELIST.TXT for
the files needed.
Here is an example of a list of files that might be needed, and
in which package it can be found:
.Bd -unfilled -offset indent
Needed                  Package

ld-2.2.5.so             glibc
ldconfig                glibc
ldd                     glibc
libc.so.6               glibc
libX11.so.6             xfree
libXt.so.6              xfree
.Ed
.Pp
So, in this case, the packages glibc and xfree will be needed.
FILELIST.TXT also gives the location of the packages.
Retrieve the packages needed from the following files
(relative to the root of the Slackware distribution tree):
.Bd -unfilled -offset indent
slackware/l/glibc-2.2.5-i386.2.tgz
slackware/x/xfree-4.2.0-i386.5.tgz
.Ed
.Pp
Extract the files from these gzipped tarfiles in the
.Pa /emul/linux
directory
(possibly omitting or afterwards removing unnecessary files).
a230 2
The information about Linux distributions may become outdated.
.Pp
d232 1
a232 1
is currently only supported on the i386.
@


1.41
log
@cd0a -> cd0c for consistency with the FAQ.

discussed with and ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.40 2009/10/22 09:22:46 sobrado Exp $
d33 1
a33 1
.Dd $Mdocdate: October 22 2009 $
d386 1
a386 1
.D1 /emul/linux/dev/cdrom -> /dev/cd0c   (first CD-ROM)
@


1.40
log
@replace cross references to other manual pages with the right macros.
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.39 2008/06/06 15:17:48 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 6 2008 $
d386 1
a386 1
.D1 /emul/linux/dev/cdrom -> /dev/cd0a   (first CD-ROM)
@


1.39
log
@remove the now irrelevant elf2olf BUGS entry; ok deraadt miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.38 2007/07/11 05:13:18 sturm Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d279 3
a281 2
ldd (see also the manual page for ldd(1)) will print a list
of shared libraries that the program depends on, in the
@


1.38
log
@we use fedora instead of redhat these days

from Arnaud Bergeron <abergeron at gmail.com>
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.37 2007/05/31 19:19:58 jmc Exp $
a394 7
.Pp
Linux ELF binaries may be detected as SVR4 binaries.
This can usually be fixed with
.Xr elf2olf 1
by setting the OLF opsys tag to Linux, e.g.\&
.Pp
.Dl % elf2olf -o linux <linux_binary>
@


1.37
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.36 2005/03/11 23:03:58 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d107 1
a107 1
.Nm redhat/base
d112 1
a112 1
.Nm redhat/base
@


1.36
log
@cdrom/CDROM -> CD-ROM;
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.35 2003/09/07 21:00:41 jmc Exp $
d33 1
a33 1
.Dd March 2, 1995
@


1.35
log
@ - escape a dot
 - better layout in BUGS
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.34 2003/09/06 17:23:52 avsm Exp $
d383 1
a383 1
CD-ROM support requires a link to the cdrom device, similar to:
@


1.34
log
@fix a few errors; jmc@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.33 2003/09/05 22:44:34 jmc Exp $
d207 1
a207 1
(i.e.
d396 1
a396 1
Linux ELF binaries may be detected as svr4 binaries.
d399 3
a401 1
by setting the OLF opsys tag to Linux (eg. elf2olf -o linux <linux_binary>).
@


1.33
log
@cd(4) supports ATAPI as well as SCSI devices; from fgs@@
ok henning@@ millert@@ miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.32 2003/09/02 11:23:14 jmc Exp $
d245 3
a247 1
by OpenBSD's compat code, and should exist as such on the
d303 1
a303 1
system (possibility 3, above).
@


1.32
log
@remove section claiming that programs using /proc are unsupported,
since they are supported using the "-o linux" option to mount_procfs;

from NetBSD (Emmanuel Dreyfus, -r1.30);
markus@@ and miod@@ agree.
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.31 2003/08/23 19:26:25 tedu Exp $
d383 1
a383 1
.D1 /emul/linux/dev/cdrom -> /dev/cd0a   (first SCSI CD-ROM)
@


1.31
log
@document necessity for sysctl to enable compat code. ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.30 2003/08/06 12:06:55 jmc Exp $
d47 2
a48 7
Programs that will not work include those that use the Linux
.Pa /proc
filesystem
(which is different from the optional
.Ox
.Pa /proc
filesystem), and i386-specific calls, such as enabling virtual 8086 mode.
@


1.30
log
@- remove old groff macros
- tidy up lists/displays
- indent for readability
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.29 2003/06/06 19:28:06 jmc Exp $
d58 3
a60 1
option enabled.
@


1.29
log
@- section reorder
- macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.28 2003/05/10 21:40:54 jmc Exp $
d103 2
a104 3
.Pp
.Bl -tag -width 123 -compact
.It 1.
d119 1
a119 2
.Pp
.It 2.
d129 2
a130 3
.Bl -tag -width 123 -compact -offset indent
.It (me@@linux) ldd linuxxdoom
.nf
d134 1
a134 2
.fi
.El
d143 8
a150 9
.nf
.Pp
.Pa /emul/linux/usr/X11/lib/libXt.so.3.1.0
.Pa /emul/linux/usr/X11/lib/libXt.so.3 Li (symbolic link to the above)
.Pa /emul/linux/usr/X11/lib/libX11.so.3.1.0
.Pa /emul/linux/usr/X11/lib/libX11.so.3 Li (symbolic link to the above)
.Pa /emul/linux/lib/libc.so.4.6.29
.Pa /emul/linux/lib/libc.so.4 Li (symbolic link to the above)
.fi
d162 4
a165 5
.Pp
.nf
.Pa /emul/linux/lib/libc.so.4.6.27
.Pa /emul/linux/lib/libc.so.4 Li -> Pa /emul/linux/lib/libc.so.4.6.27
.fi
d168 1
a168 2
.nf
.Pp
d170 1
a170 1
.fi
d177 4
a180 5
.Pp
.nf
.Pa /emul/linux/lib/libc.so.4.6.29
.Pa /emul/linux/lib/libc.so.4 Li -> Pa /emul/linux/lib/libc.so.4.6.29
.fi
d196 6
a201 8
.Pp
.nf
.Pa /lib/ld.so
.Pa /etc/ld.so.cache
.Pa /etc/ld.so.config
.fi
.Pp
.It 3.
d214 6
a219 7
.Pp
.nf
.Pa /sbin/ldconfig
.Pa /usr/bin/ldd
.Pa /lib/libc.so.x.y.z
.Pa /lib/ld.so
.fi
d241 4
a244 5
.Pp
.nf
.Pa /usr/X11/lib
.Pa /usr/local/lib
.fi
d268 3
a270 4
.Bl -tag -width 123 -compact -offset indent
.It % ldd-linux `which ldd-linux`
libc.so.4 (DLL Jump 4.5pl26) => /lib/libc.so.4.6.29
.El
d297 1
a297 1
.Sy Note:
d314 5
a318 6
.Pp
.nf
ftp.ibiblio.org:/pub/Linux/distributions
distro.ibiblio.org:/pub/Linux/distributions
.\" tsx-11.mit.edu:/pub/linux/distributions
.fi
d321 6
a326 7
.Pp
.nf
.\" ftp.luth.se:/pub/linux/distributions
.\" ftp.demon.co.uk:/pub/linux/distributions
ftp.sunet.se:/pub/Linux/distributions
src.doc.ic.ac.uk:/packages/linux
.fi
d354 4
a357 5
.Pp
.nf
.Pa slackware/l/glibc-2.2.5-i386.2.tgz
.Pa slackware/x/xfree-4.2.0-i386.5.tgz
.fi
d369 1
a369 2
.Pp
.nf
d374 1
a374 1
.fi
d382 1
a382 3
.nf
/emul/linux/dev/dsp -> /dev/audio
.fi
d386 1
a386 3
.nf
/emul/linux/dev/cdrom -> /dev/cd0a   (first SCSI CD-ROM)
.fi
@


1.28
log
@uppercased .Dt sections.
setup -> set up in compat_svr4(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.27 2003/05/06 08:56:12 jmc Exp $
d309 2
a310 2
.Ss Finding the necessary files.
.Nm Note:
@


1.27
log
@some typos from Leandro Costa, and a couple from myself.
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.26 2003/04/18 04:27:27 millert Exp $
d34 1
a34 1
.Dt compat_linux 8
@


1.26
log
@Slack don't slak; Martin Reindl
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.25 2003/02/19 09:10:36 jmc Exp $
d50 1
a50 1
(which is different from the optional 
d406 1
a406 1
/emul/linux/dev/cdrom -> /dev/cd0a   (first scsi cdrom)
d418 1
a418 1
Linux ELF binaries may be detected as svr4 binaries. 
@


1.25
log
@changes to compat:

* extensive use of .Pa for paths
* .Nm for kernel options
* `procedure' chopped from .Nd
* 2nd person -> passive
* updated instructions on getting freebsd/linux binaries
* various typos

thanks millert@@ and Grzegorz Czaplinski for help with FreeBSD stuff
prompts and ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.24 2002/05/22 22:11:56 miod Exp $
d371 2
a372 2
.Pa slakware/l/glibc-2.2.5-i386.2.tgz
.Pa slakware/x/xfree-4.2.0-i386.5.tgz
@


1.24
log
@Fix some ftp urls.
XXX some knowledgeable person ought to have a look and fix/update this page.
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.23 2002/05/22 14:05:31 pvalchev Exp $
d38 1
a38 1
.Nd setup procedure for running Linux binaries under emulation
d45 5
a49 3
Additionally, OSS audio is emulated, so Linux bins can access the native audio
transparently.
Programs that will not work include those that use the Linux /proc filesystem
d52 1
a52 1
/proc
d61 8
a68 7
This means, that you will also need the Linux shared libraries that
the program depends on, and the runtime linker.
Also, you will need to create a "shadow root" directory for Linux binaries
on your
.Ox
system.
This directory is named /emul/linux.
d72 2
a73 1
So, if a Linux program opens, for example, /etc/passwd,
d75 9
a83 4
will first try to open /emul/linux/etc/passwd, and if that does not exist
open the 'real' /etc/passwd file.
It is recommended that you install Linux packages that include configuration
files, etc under /emul/linux, to avoid naming conflicts with possible
d88 3
a90 3
Generally, you will need to look for the shared libraries that Linux
binaries depend on only the first few times that you install a Linux
program on your
d93 2
a94 2
After a while, you will have a sufficient set of Linux shared libraries
on your system to be able to run newly imported Linux binaries without
d99 2
a100 2
Basically, there are 3 possibilities (when following these instructions:
you will need to be root on your
d102 1
a102 1
system to do the necessary installation steps).
d106 1
a106 1
You have access to the
d109 1
a109 1
system.
d122 3
a124 3
You have access to a Linux system.
In this case you can temporarily install the binary there, see what
shared libraries it needs, and copy them to your
d127 2
a128 2
Example: you have just ftp-ed the Linux binary of Doom.
Put it on the Linux system you have access to, and check which shared
d140 3
a142 2
You would need go get all the files from the last column, and
put them under /emul/linux, with the names in the first column
d144 1
a144 1
This means you eventually have these files on your
d147 1
d149 6
a154 7
.nf
/emul/linux/usr/X11/lib/libXt.so.3.1.0
/emul/linux/usr/X11/lib/libXt.so.3 (symbolic link to the above)
/emul/linux/usr/X11/lib/libX11.so.3.1.0
/emul/linux/usr/X11/lib/libX11.so.3 (symbolic link to the above)
/emul/linux/lib/libc.so.4.6.29
/emul/linux/lib/libc.so.4 (symbolic link to the above)
d157 1
a157 1
Note that if you already have a Linux shared library with a
d159 8
a166 7
output, you won't need to copy the file named in the last column
to your system, the one you already have should work.
It is advisable to copy the shared library anyway if it is a newer version,
though.
You can remove the old one, as long as you make the symbolic
link point to the new one.
So, if you have these libraries on your system:
d169 2
a170 2
/emul/linux/lib/libc.so.4.6.27
/emul/linux/lib/libc.so.4 -> /emul/linux/lib/libc.so.4.6.27
d173 1
a173 2
and you find that the ldd output for a new binary you want to
install is:
d179 5
a183 4
you won't need to worry about copying /lib/libc.so.4.6.29 too,
because the program should work fine with the slightly older version.
You can decide to replace the libc.so anyway, and that should leave
you with:
d186 2
a187 2
/emul/linux/lib/libc.so.4.6.29
/emul/linux/lib/libc.so.4 -> /emul/linux/lib/libc.so.4.6.29
d191 1
a191 2
.Nm only
needed for Linux binaries, the
d194 1
a194 1
itself, you don't need to worry about that.
d196 4
a199 4
Finally, you must make sure that you have the Linux runtime linker
and its config files on your system.
You should copy these files from the Linux system to their appropriate
place on your
d201 3
a203 1
system (in the /emul/linux tree):
d206 3
a208 3
/lib/ld.so
/etc/ld.so.cache
/etc/ld.so.config
d212 2
a213 3
You don't have access to a Linux system.
In that case, you should get the extra files you need from various
ftp sites.
a215 1
For now, let's assume you know where to get the files.
d218 17
a234 12
any version mismatches), and install them under /emul/linux
(i.e. /foo/bar is installed as /emul/linux/foo/bar):
.Pp
.nf
/sbin/ldconfig
/usr/bin/ldd
/lib/libc.so.x.y.z
/lib/ld.so
.fi
.Pp
ldconfig and ldd don't necessarily need to be under /emul/linux,
you can install them elsewhere in the system too.
d238 7
a244 5
A good idea would be to install them in /usr/local/bin as ldconfig-linux
and ldd-linux.
.Pp
Create the file /emul/linux/etc/ld.so.conf, containing the
directories in which the Linux runtime linker should look
d248 4
a251 1
/lib and /usr/lib are standard, you could add the following:
d254 2
a255 2
/usr/X11/lib
/usr/local/lib
d258 5
a262 2
Note that these are mapped to /emul/linux/XXXX by OpenBSD's compat
code, and should exist as such on your system.
d267 4
a270 3
It will create the file /emul/linux/etc/ld.so.cache
You should rerun the Linux version of the ldconfig program
each time you add a new shared library.
d272 3
a274 1
You should now be set up for Linux binaries which only need
d276 2
a277 2
You can test this by running the Linux ldd on itself.
Suppose that you have it installed as ldd-linux, it should produce
d285 7
a291 5
This been done, you are ready to install new Linux binaries.
Whenever you install a new Linux program, you should check
if it needs shared libraries, and if so, whether you have
them installed in the /emul/linux tree.
To do this, you run the Linux version ldd on the new program, and
d298 1
a298 1
you need an extra library.
d300 5
a304 3
in <majorname>, which will be of the form libXXXX.so.<N>
You will need to find a libXXXX.so.<N>.<mm> on a Linux ftp site,
and install it on your system.
d311 1
a311 2
the information below is valid as of the time this
document was written (March, 1995), but certain details
d313 2
a314 2
may have changed by the time you read this.
You can also save yourself a lot of headaches by using the
d323 2
a324 2
Sometimes the files are unpacked, and you can get the individual
files you need, but mostly they are stored in distribution sets,
d330 2
a331 1
tsx-11.mit.edu:/pub/linux/distributions
d337 1
a337 1
ftp.luth.se:/pub/linux/distributions
d339 1
d346 8
a353 11
Normally, they're controlled by an install program, but you can
retrieve files "by hand" too.
First of all, you will need to look in the "contents" subdir of
the distribution.
You will find a lot of small textfiles here describing the contents of
the separate packages.
The fastest way to look something up is to retrieve all
the files in the contents subdirectory, and grep through them for the file
you need.
Here is an example of a list of files that you might need, and
in which contents-file you will find it by grepping through them:
d357 6
a362 22
ld.so                   ldso
ldconfig                ldso
ldd                     ldso
libc.so.4               shlibs
libX11.so.6.0           xf_lib
libXt.so.6.0            xf_lib
libX11.so.3             oldlibs
libXt.so.3              oldlibs
.Ed
.Pp
So, in this case, you will need the packages ldso, shlibs, xf_lib and oldlibs.
In each of the contents-files for these packages, look for a line saying
"PACKAGE LOCATION", it will tell you on which 'disk' the package is,
in our case it will tell us in which subdirectory we need to look.
For our example, we would find the following locations:
.Bd -unfilled -offset indent
Package                 Location

ldso                    diska2
shlibs                  diska2
oldlibs                 diskx6
xf_lib                  diskx9
d365 4
a368 5
The locations called "diskXX" refer to the "slakware/XX" subdirectories
of the distribution, others may be found in the "contrib" subdirectory.
In this case, we could now retrieve the packages we need by retrieving
the following files (relative to the root of the Slackware distribution
tree):
d371 2
a372 4
slakware/a2/ldso.tgz
slakware/a2/shlibs.tgz
slakware/x6/oldlibs/tgz
slakware/x9/xf_lib.tgz
d375 4
a378 3
Extract the files from these gzipped tarfiles in your /emul/linux directory
(possibly omitting or afterwards removing files you don't need), and you
are done.
d382 3
a384 2
and you will also have to create some symbolic links in the /emul/linux/dev
directory, namely:
d388 1
a388 1
/emul/linux/dev/mouse -> whatever device your mouse is connected to
d394 1
a394 1
work, but may confuse others, so you may have to remove it again at
d402 2
a403 2
.Ss Other links Linux bins may require
CD-ROM support requires a link to your cdrom device, similar to:
d409 3
a411 1
Many Linux binaries expect /proc to have procfs mounted on it.
d421 1
a421 1
by setting the OLF opsys tag to Linux (eg: elf2olf -o linux <linux_binary>).
@


1.23
log
@redhat_base -> redhat/base; closes pr2674
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.22 2002/05/09 06:09:05 jasoni Exp $
d300 1
a300 1
sunsite.unc.edu:/pub/Linux/distributions
d308 2
a309 2
ftp.demon.co.uk:/pub/linux/distributions
src.doc.ic.ac.uk:/packages/linux/distributions
@


1.22
log
@- compat_linux is only supported on the i386
- mention use of elf2olf to fix binaries detected as svr4
- ok mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.21 2001/11/13 13:54:26 mpech Exp $
d102 1
a102 1
.Nm redhat_base
d107 1
a107 1
.Nm redhat_base
@


1.21
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.20 2001/10/05 14:45:54 mpech Exp $
d404 8
@


1.20
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.19 2001/10/04 16:56:52 mpech Exp $
d91 3
a93 2
you will need to be root on your OpenBSD system to do the necessary
installation steps).
d97 2
a98 1
You have access to the OpenBSD
d189 3
a191 1
place on your OpenBSD system (in the /emul/linux tree):
d270 2
a271 1
you need an extra library. Which library this is, is shown
@


1.19
log
@we don't like .Pp and blank lines before/after .Ss;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.18 2001/08/17 11:13:58 mpech Exp $
d41 8
a48 6
supports running Linux binaries. This only applies to i386 systems
for now. Both the a.out and ELF binary formats are supported. Most programs
should work, including the ones that use the Linux SVGAlib. Additionally,
OSS audio is emulated, so Linux bins can access the native audio
transparently. Programs that will not work include those that use the Linux
/proc filesystem (which is different from the optional 
d58 5
a62 8
A lot of programs are dynamically linked. This means, that you will
also need the Linux shared libraries that the program depends on, and
the runtime linker.  Also, you will need to create a "shadow root"
directory for Linux binaries on your
.Ox
system. This directory
is named /emul/linux. Any file operations done by Linux programs
run under
d64 6
a69 2
will look in this directory first. So, if a Linux
program opens, for example, /etc/passwd,
d72 3
a74 3
open the 'real' /etc/passwd file. It is recommended that you install
Linux packages that include configuration files, etc under /emul/linux,
to avoid naming conflicts with possible
d89 5
a93 4
to get them? Basically, there are 3 possibilities (when following
these instructions: you will need to be root on your OpenBSD system to
do the necessary installation steps).

d98 2
a99 1
system.  Install the port named
d103 2
a104 1
category.  The
d107 2
a108 2
necessary to run Linux applications.  Access to a Linux system is not
needed.
d111 3
a113 3
You have access to a Linux system. In this case you can
temporarily install the binary there, see what shared libraries
it needs, and copy them to your
d131 2
a132 2
as symbolic links pointing to them. This means you eventually have
these files on your
d148 6
a153 5
to your system, the one you already have should work. It is
advisable to copy the shared library anyway if it is a newer version,
though. You can remove the old one, as long as you make the symbolic
link point to the new one. So, if you have these libraries
on your system:
d185 3
a187 3
and its config files on your system. You should copy these
files from the Linux system to their appropriate place on your
OpenBSD system (in the /emul/linux tree):
d196 3
a198 2
You don't have access to a Linux system. In that case, you
should get the extra files you need from various ftp sites.
d200 2
a201 1
below. For now, let's assume you know where to get the files.
d215 2
a216 2
you can install them elsewhere in the system too. Just make sure
they don't conflict with their
d224 4
a227 3
for shared libs. It is a plain text file, containing a directory
name on each line. /lib and /usr/lib are standard, you could
add the following:
d236 4
a239 3

Run the Linux ldconfig program. It should be statically
linked, so it doesn't need any shared libraries by itself.
d245 4
a248 3
a shared libc. You can test this by running the Linux ldd
on itself. Suppose that you have it installed as ldd-linux, it
should produce something like:
d258 3
a260 2
them installed in the /emul/linux tree. To do this, you run
the Linux version ldd on the new program, and watch its output.
d269 4
a272 4
and install it on your system. The XXXX (name) and <N> (major
revision number) should match; the minor number(s) <mm> are
less important, though it is advised to take the most
recent version.
d279 2
a280 2
may have changed by the time you read this.  You can also
save yourself a lot of headaches by using the
d286 7
a292 7
of binaries that they distribute. Each distribution has its own
name, like "Slackware" or "Yggdrasil". The distributions are
available on a lot of ftp sites. Sometimes the files are unpacked,
and you can get the individual files you need, but mostly they
are stored in distribution sets, usually consisting of subdirectories
with gzipped tar files in them. The primary ftp sites for the
distributions are:
d307 3
a309 2
For simplicity, let's concentrate on Slackware here. This distribution
consists of a number of subdirectories, containing separate packages.
d311 6
a316 4
retrieve files "by hand" too. First of all, you will need to look
in the "contents" subdir of the distribution. You will find
a lot of small textfiles here describing the contents of the separate
packages. The fastest way to look something up is to retrieve all
d318 2
a319 1
you need. Here is an example of a list of files that you might need, and
a320 1
.Pp
a338 1
.Pp
d365 4
a368 3
SVGAlib binaries require some extra care. The pcvt virtual console driver
has to be in the kernel for them to work, and you will also have to create
some symbolic links in the /emul/linux/dev directory, namely:
@


1.18
log
@o) {Open,Net,Free}BSD -> .{O,N,F}x;
o) "start sentence on new line" issues;
o) minimal -mdoc improvements;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.17 2001/08/03 15:21:17 mpech Exp $
a83 1

a260 1

a348 1

a369 1
.Pp
a370 1
.Pp
a375 1
.Pp
a376 1
.Pp
@


1.17
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.16 2001/05/03 20:51:11 aaron Exp $
d40 2
a41 1
OpenBSD supports running Linux binaries. This only applies to i386 systems
d46 3
a48 1
/proc filesystem (which is different from the optional OpenBSD /proc
d59 3
a61 1
directory for Linux binaries on your OpenBSD system. This directory
d63 6
a68 3
run under OpenBSD will look in this directory first. So, if a Linux
program opens, for example, /etc/passwd, OpenBSD will
first try to open /emul/linux/etc/passwd, and if that does not exist
d71 4
a74 2
to avoid naming conflicts with possible OpenBSD counterparts. Shared
libraries should also be installed in the shadow tree.
d78 6
a83 3
program on your OpenBSD system. After a while, you will have a sufficient
set of Linux shared libraries on your system to be able to run newly
imported Linux binaries without any extra work.
d108 6
a113 4
it needs, and copy them to your OpenBSD system. Example: you have
just ftp-ed the Linux binary of Doom. Put it on the Linux
system you have access to, and check which shared libraries it
needs by running `ldd linuxxdoom':
d127 3
a129 1
these files on your OpenBSD system:
d173 4
a176 3
needed for Linux binaries, the OpenBSD runtime linker takes care of
looking for matching major revision numbers itself, you
don't need to worry about that.
d208 5
a212 3
they don't conflict with their OpenBSD counterparts. A good idea
would be to install them in /usr/local/bin as ldconfig-linux and
ldd-linux.
d269 2
a270 1
save yourself a lot of headaches by using the OpenBSD
@


1.16
log
@linux_lib -> redhat_base; pointed out by deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.15 2001/04/09 07:14:12 tholo Exp $
a366 1
.Pp
@


1.15
log
@Add emulation of Linux features to procfs; mostly from NetBSD.  ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.14 2001/01/27 18:11:12 espie Exp $
d83 1
a83 1
.Nm linux_lib
d87 1
a87 1
.Nm linux_lib
@


1.14
log
@Preferred method of installing linux material should be user-friendly.
@
text
@d1 1
a1 1
.\"	$OpenBSD: compat_linux.8,v 1.13 2000/12/22 16:54:37 avsm Exp $
d360 7
@


1.13
log
@smite typos, and add RCS tags where missing; aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d80 13
d171 1
a171 1
.It 2.
a240 13
.Pp
.It 3.
You have access to the OpenBSD
.Xr ports 7
system.  Install the port named
.Nm linux_lib
in the
.Nm emulators
category.  The
.Nm linux_lib
port contains the shared libraries, binaries, and other related files
necessary to run Linux applications.  Access to a Linux system is not
needed.
@


1.12
log
@acd goes away
@
text
@d1 1
d334 1
a334 1
some symbloic links in the /emul/linux/dev directory, namely:
@


1.11
log
@clarify about /proc
@
text
@a356 1
/emul/linux/dev/cdrom -> /dev/acd0a  (first atapi cdrom)
@


1.10
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d43 3
a45 3
transparently. Programs that will not work include the Linux /proc filesystem
(which is different from the optional OpenBSD /proc filesystem), and
i386-specific calls, such as enabling virtual 8086 mode.
@


1.9
log
@mention ports(7) and the emulators/linux_lib port
in the compat_linux(8) man page
@
text
@d34 1
a34 1
.Os BSD 4
@


1.8
log
@emulation includes audio and cdrom
@
text
@d54 1
a54 1
the runtime linker. Also, you will need to create a "shadow root"
d73 1
a73 1
to get them? Basically, there are 2 possibilities (when following
d227 13
d247 4
a250 1
may have changed by the time you read this.
@


1.7
log
@More man page fixes. Particularly fix uses of it's/its, affect/effect,
then/than and such. Other miscellaneous problems fixed across these source
files.
@
text
@d41 5
a45 5
should work, including the ones that use the Linux SVGAlib. Programs that
will not work include the Linux /proc filesystem (which is different from
the optional OpenBSD /proc filesystem), and i386-specific calls, such as
enabling virtual 8086 mode. Currently, sound is not supported for Linux
binaries (they will probably run, but not produce any sound).
d329 16
@


1.6
log
@fix spelling of separate
@
text
@d210 1
a210 1
This being done, you are ready to install new Linux binaries.
d219 1
a219 1
If it prints "not found" in stead of <fullname> it means that
d231 1
a231 1
the information below is valid as of the \time this
@


1.5
log
@change .Nd to include the word "emulation"
@
text
@d263 1
a263 1
a lot of small textfiles here describing the contents of the seperate
@


1.4
log
@lowercase names
@
text
@d37 1
a37 1
.Nd setup procedure for running Linux binaries
@


1.3
log
@OpenBSD
@
text
@d33 1
a33 1
.Dt COMPAT_LINUX 8
d36 1
a36 1
.Nm COMPAT_LINUX
d46 1
a46 1

d51 1
a51 1

@


1.2
log
@update from netbsd
@
text
@d39 1
a39 1
NetBSD supports running Linux binaries. This only applies to i386 systems
d43 1
a43 1
the optional NetBSD /proc filesystem), and i386-specific calls, such as
d55 1
a55 1
directory for Linux binaries on your NetBSD system. This directory
d57 2
a58 2
run under NetBSD will look in this directory first. So, if a Linux
program opens, for example, /etc/passwd, NetBSD will
d62 1
a62 1
to avoid naming conflicts with possible NetBSD counterparts. Shared
d67 1
a67 1
program on your NetBSD system. After a while, you will have a sufficient
d74 1
a74 1
these instructions: you will need to be root on your NetBSD system to
d81 1
a81 1
it needs, and copy them to your NetBSD system. Example: you have
d98 1
a98 1
these files on your NetBSD system:
d142 1
a142 1
needed for Linux binaries, the NetBSD runtime linker takes care of
d149 1
a149 1
NetBSD system (in the /emul/linux tree):
d176 1
a176 1
they don't conflict with their NetBSD counterparts. A good idea
d191 1
a191 1
Note that these are mapped to /emul/linux/XXXX by NetBSD's compat
d206 1
a206 1
.It (me@@netbsd) ldd-linux `which ldd-linux`
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: compat_linux.8,v 1.1.2.1 1995/10/16 20:20:13 fvdl Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
