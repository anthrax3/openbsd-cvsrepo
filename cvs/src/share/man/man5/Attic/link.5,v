head	1.16;
access;
symbols
	OPENBSD_5_3:1.15.0.24
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.22
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.20
	OPENBSD_5_0:1.15.0.18
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.14
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.12
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.10
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.4
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.16
date	2013.07.09.18.25.28;	author miod;	state dead;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.58;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.30.21.31.28;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.19.21.02.15;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.18.20.08.02;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.39;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.13.13.54.26;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.03.15.21.16;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.26.00.37.04;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.19.19.25.30;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.11.26.04.25.58;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.09.06.22.23.21;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	96.12.10.09.06.25;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.08.22.09.35;	author ccappuc;	state Exp;
branches;
next	1.2;

1.2
date	96.01.12.20.00.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Remove link.5, which describes a.out shared libraries only and which content
does not even remotely apply to the ELF world. While there, change
`executable' to `legacy executable' in a.out.5.
@
text
@.\"	$OpenBSD: link.5,v 1.15 2007/05/31 19:19:58 jmc Exp $
.\"	$NetBSD: link.5,v 1.5 1996/01/09 00:14:32 pk Exp $
.\"
.\" Copyright (c) 1993 Paul Kranenburg
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Paul Kranenburg.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: May 31 2007 $
.Dt LINK 5
.Os
.Sh NAME
.Nm link
.Nd dynamic loader and link editor interface
.Sh SYNOPSIS
.Fd #include <link.h>
.Sh DESCRIPTION
The include file
.Aq Pa link.h
declares several structures that are present in dynamically linked
programs and libraries.
The structures define the interface between several components of the
link editor and loader mechanism.
The layout of a number of these structures within the binaries resembles the
.Xr a.out 5
format in many places as it serves such similar functions as symbol
definitions (including the accompanying string table) and relocation records
needed to resolve references to external entities.
It also records a number of data structures
unique to the dynamic loading and linking process.
These include references to other objects that are required to complete
the link-editing process and indirection tables to facilitate
.Em Position Independent Code
(PIC for short) to improve sharing of code pages among different processes.
The collection of data structures described here will be referred to as the
.Em Run-time Relocation Section
(RRS) and is embedded in the standard text and data segments of the dynamically
linked program or shared object image as the existing
.Xr a.out 5
format offers no room for it elsewhere.
.Pp
Several utilities cooperate to ensure that the task of getting a program
ready to run can complete successfully in a way that optimizes the use
of system resources.
The compiler emits PIC code from which shared libraries can be built by
.Xr ld 1 .
The compiler also includes size information of any initialized data items
through the
.Dq .size
assembler directive.
PIC code differs from conventional code
in that it accesses data variables through an indirection table, the
Global Offset Table, by convention accessible by the reserved name
.Dv _GLOBAL_OFFSET_TABLE_ .
The exact mechanism used for this is machine dependent; usually a machine
register is reserved for the purpose.
The rational behind this construct
is to generate code that is independent of the actual load address.
Only the values contained in the Global Offset Table may need updating at
run-time, depending on the load addresses of the various shared objects
in the address space.
.Pp
Likewise, procedure calls to globally defined functions are redirected through
the Procedure Linkage Table (PLT) residing in the data segment of the
core image.
Again, this is done to avoid run-time modifications to the text segment.
.Pp
The linker-editor allocates the Global Offset Table and Procedure Linkage Table
when combining PIC object files into an image suitable for mapping into the
process address space.
It also collects all symbols that may be needed by the
run-time link editor and stores these along with the image's text and data bits.
Another reserved symbol,
.Dv _DYNAMIC ,
is used to indicate the presence of the run-time linker structures.
Whenever
.Dv _DYNAMIC
is relocated to 0, there is no need to invoke the run-time link editor.
If this symbol is non-zero, it points at a data structure from which the
location of the necessary relocation and symbol information can be derived.
This is most notably used by the start-up module,
.Em crt0 .
The
.Dv _DYNAMIC
structure is conventionally located at the start of the data
segment of the image to which it pertains.
.Sh DATA STRUCTURES
The data structures supporting dynamic linking and run-time relocation
reside both in the text and data segments of the image they apply to.
The text segments contain read-only data such as symbol descriptions and
names, while the data segments contain the tables that need to be modified
during the relocation process.
.Pp
The
.Dv _DYNAMIC
symbol references a
.Fa _dynamic
structure:
.Bd -literal -offset indent
struct	_dynamic {
	int	d_version;
	struct	so_debug *d_debug;
	union {
		struct section_dispatch_table *d_sdt;
	} d_un;
	struct	ld_entry *d_entry;
};
.Ed
.Bl -tag -width d_version
.It Fa d_version
This field provides for different versions of the dynamic linking
implementation.
The current version numbers understood by ld and
.Xr ld.so 1
are LD_VERSION_SUN(3), which is used by the SunOS 4.x releases,
and LD_VERSION_BSD(8), which is currently in use by
.Ox .
.It Fa d_un
Refers to a
.Em d_version
dependent data structure.
.It Fa d_debug
This field provides debuggers with a hook to access symbol tables of shared
objects loaded as a result of the actions of the run-time link editor.
.It Fa d_entry
This field is obsoleted by CRT interface version
.Li CRT_VERSION_BSD4 ,
and by the
.Fa crt_ldentry
in
.Fa crt_ldso .
.El
.Pp
The
.Fa section_dispatch_table
structure is the main
.Dq dispatcher
table, containing offsets into the image's segments where various symbol
and relocation information is located.
.Bd -literal -offset indent
struct section_dispatch_table {
	struct	so_map *sdt_loaded;
	long	sdt_sods;
	long	sdt_paths;
	long	sdt_got;
	long	sdt_plt;
	long	sdt_rel;
	long	sdt_hash;
	long	sdt_nzlist;
	long	sdt_filler2;
	long	sdt_buckets;
	long	sdt_strings;
	long	sdt_str_sz;
	long	sdt_text_sz;
	long	sdt_plt_sz;
};
.Ed
.Bl -tag -width sdt_loaded
.It Fa sdt_loaded
A pointer to the first link map loaded (see below).
This field is set by
.Xr ld.so 1
for the benefit of debuggers that may use it to load a shared object's
symbol table.
.It Fa sdt_sods
The start of a (linked) list of shared object descriptors needed by
this object.
.It Fa sdt_paths
Library search rules.
A colon separated list of directories corresponding to the
.Fl R
option of
.Xr ld 1 .
.It Fa sdt_got
The location of the Global Offset Table within this image.
.It Fa sdt_plt
The location of the Procedure Linkage Table within this image.
.It Fa sdt_rel
The location of an array of
.Fa relocation_info
structures
.Po
see
.Xr a.out 5
.Pc
specifying run-time relocations.
.It Fa sdt_hash
The location of the hash table for fast symbol lookup in this object's
symbol table.
.It Fa sdt_nzlist
The location of the symbol table.
.It Fa sdt_filler2
Currently unused.
.It Fa sdt_buckets
The number of buckets in
.Fa sdt_hash .
.It Fa sdt_strings
The location of the symbol string table that goes with
.Fa sdt_nzlist .
.It Fa sdt_str_sz
The size of the string table.
.It Fa sdt_text_sz
The size of the object's text segment.
.It Fa sdt_plt_sz
The size of the Procedure Linkage Table.
.El
.Pp
A
.Fa sod
structure describes a shared object that is needed
to complete the link-edit process of the object containing it.
A list of such objects
.Po
chained through
.Fa sod_next
.Pc
is pointed at
by the
.Fa sdt_sods
in the
.Fa section_dispatch_table
structure.
.Bd -literal -offset indent
struct sod {
	long	sod_name;
	u_int	sod_library : 1,
		sod_reserved : 31;
	short	sod_major;
	short	sod_minor;
	long	sod_next;
};
.Ed
.Bl -tag -width sod_library
.It Fa sod_name
The offset in the text segment of a string describing this link object.
.It Fa sod_library
If set,
.Fa sod_name
specifies a library that is to be searched for by
.Xr ld.so 1 .
The path name
is obtained by searching a set of directories
.Po
see also
.Xr ldconfig 8
.Pc
for a shared object matching
.Em lib<sod_name>.so.n.m .
If not set,
.Fa sod_name
should point at a full path name for the desired shared object.
.It Fa sod_major
Specifies the major version number of the shared object to load.
.It Fa sod_minor
Specifies the preferred minor version number of the shared object to load.
.El
.Pp
The run-time link editor maintains a list of structures called
.Dq link maps
to keep track of all shared objects loaded into a process's address space.
These structures are only used at run-time and do not occur within
the text or data segment of an executable or shared library.
.Bd -literal -offset indent
struct so_map {
	caddr_t	som_addr;
	char 	*som_path;
	struct	so_map *som_next;
	struct	sod *som_sod;
	caddr_t som_sodbase;
	u_int	som_write : 1;
	struct	_dynamic *som_dynamic;
	caddr_t	som_spd;
};
.Ed
.Bl -tag -width som_dynamic
.It Fa som_addr
The address at which the shared object associated with this link map has
been loaded.
.It Fa som_path
The full path name of the loaded object.
.It Fa som_next
Pointer to the next link map.
.It Fa som_sod
The
.Fa sod
structure that was responsible for loading this shared object.
.It Fa som_sodbase
Tossed in later versions of the run-time linker.
.It Fa som_write
Set if (some portion of) this object's text segment is currently writable.
.It Fa som_dynamic
Pointer to this object's
.Fa _dynamic
structure.
.It Fa som_spd
Hook for attaching private data maintained by the run-time link editor.
.El
.Pp
Symbol description with size.
This is simply an
.Fa nlist
structure with one field
.Pq Fa nz_size
added.
Used to convey size information on items in the data segment
of shared objects.
An array of these lives in the shared object's
text segment and is addressed by the
.Fa sdt_nzlist
field of
.Fa section_dispatch_table .
.Bd -literal -offset indent
struct nzlist {
	struct nlist	nlist;
	u_long		nz_size;
#define nz_un		nlist.n_un
#define nz_strx		nlist.n_un.n_strx
#define nz_name		nlist.n_un.n_name
#define nz_type		nlist.n_type
#define nz_value	nlist.n_value
#define nz_desc		nlist.n_desc
#define nz_other	nlist.n_other
};
.Ed
.Bl -tag -width nz_size
.It Fa nlist
See
.Xr nlist 3 .
.It Fa nz_size
The size of the data represented by this symbol.
.El
.Pp
A hash table is included within the text segment of shared objects to
facilitate quick lookup of symbols during run-time link-editing.
The
.Fa sdt_hash
field of the
.Fa section_dispatch_table
structure points at an array of
.Fa rrs_hash
structures:
.Bd -literal -offset indent
struct rrs_hash {
	int	rh_symbolnum;		/* symbol number */
	int	rh_next;		/* next hash entry */
};
.Ed
.Bl -tag -width rh_symbolnum
.It Fa rh_symbolnum
The index of the symbol in the shared object's symbol table (as given by the
.Fa ld_symbols
field).
.It Fa rh_next
In case of collisions, this field is the offset of the next entry in this
hash table bucket.
It is zero for the last bucket element.
.El
.Pp
The
.Fa rt_symbol
structure is used to keep track of run-time allocated commons
and data items copied from shared objects.
These items are kept in a linked list and are exported through the
.Fa dd_cc
field in the
.Fa so_debug
structure (see below) for use by debuggers.
.Bd -literal -offset indent
struct rt_symbol {
	struct nzlist		*rt_sp;
	struct rt_symbol	*rt_next;
	struct rt_symbol	*rt_link;
	caddr_t			rt_srcaddr;
	struct so_map		*rt_smp;
};
.Ed
.Bl -tag -width rt_scraddr
.It Fa rt_sp
The symbol description.
.It Fa rt_next
Virtual address of next
.Fa rt_symbol .
.It Fa rt_link
Next in hash bucket.
Used internally by
.Xr ld.so 1 .
.It Fa rt_srcaddr
Location of the source of initialized data within a shared object.
.It Fa rt_smp
The shared object which is the original source of the data that this
run-time symbol describes.
.El
.Pp
The
.Fa so_debug
structure is used by debuggers to gain knowledge of any shared objects
that have been loaded in the process's address space as a result of run-time
link-editing.
Since the run-time link editor runs as a part of process
initialization, a debugger that wishes to access symbols from shared objects
can only do so after the link editor has been called from
.Em crt0 .
A dynamically linked binary contains a
.Fa so_debug
structure which can be located by means of the
.Fa d_debug
field in
.Fa _dynamic .
.Bd -literal -offset indent
struct 	so_debug {
	int	dd_version;
	int	dd_in_debugger;
	int	dd_sym_loaded;
	char	*dd_bpt_addr;
	int	dd_bpt_shadow;
	struct rt_symbol *dd_cc;
};
.Ed
.Bl -tag -width dd_in_debugger
.It Fa dd_version
Version number of this interface.
.It Fa dd_in_debugger
Set by the debugger to indicate to the run-time linker that the program is
run under control of a debugger.
.It Fa dd_sym_loaded
Set by the run-time linker whenever it adds symbols by loading shared objects.
.It Fa dd_bpt_addr
The address where a breakpoint will be set by the run-time linker to
divert control to the debugger.
This address is determined by the start-up module,
.Em crt0.o ,
to be some convenient place before the call to
.Fa _main .
.It Fa dd_bpt_shadow
Contains the original instruction that was at
.Fa dd_bpt_addr .
The debugger is expected to put this instruction back before continuing the
program.
.It Fa dd_cc
A pointer to the linked list of run-time allocated symbols that the debugger
may be interested in.
.El
.Pp
The
.Em ld_entry
structure defines a set of service routines within
.Xr ld.so 1 .
See
.Xr dlfcn 3
for more information.
.Bd -literal -offset indent
struct ld_entry {
	void	*(*dlopen)(const char *, int);
	int	(*dlclose)(void *);
	void	*(*dlsym)(void *, const char *);
	int	(*dlctl)(void *, int, void *);
	void	(*dlexit)(void);
	void	(*dlrsrvd[3])(void);
};
.Ed
.Pp
The
.Fa crt_ldso
structure defines the interface between
.Xr ld.so 1
and the start-up code in
.Em crt0 .
.Bd -literal -offset indent
struct crt_ldso {
	int		crt_ba;
	int		crt_dzfd;
	int		crt_ldfd;
	struct _dynamic	*crt_dp;
	char		**crt_ep;
	caddr_t		crt_bp;
	char		*crt_prog;
	char		*crt_ldso;
	struct ld_entry	*crt_ldentry;
};
#define CRT_VERSION_SUN		1
#define CRT_VERSION_BSD2	2
#define CRT_VERSION_BSD3	3
#define CRT_VERSION_BSD4	4
.Ed
.Bl -tag -width crt_dzfd
.It Fa crt_ba
The virtual address at which
.Xr ld.so 1
was loaded by
.Em crt0 .
.It Fa crt_dzfd
On SunOS systems, this field contains an open file descriptor to
.Pa /dev/zero
used to get demand paged zeroed pages.
On
.Ox
systems it contains \-1.
.It Fa crt_ldfd
Contains an open file descriptor that was used by
.Em crt0
to load
.Xr ld.so 1 .
.It Fa crt_dp
A pointer to main's
.Fa _dynamic
structure.
.It Fa crt_ep
A pointer to the environment strings.
.It Fa crt_bp
The address at which a breakpoint will be placed by the run-time linker
if the main program is run by a debugger.
See
.Fa so_debug .
.It Fa crt_prog
The name of the main program as determined by
.Em crt0
(CRT_VERSION_BSD3 only).
.It Fa crt_ldso
The path of the run-time linker as mapped by
.Em crt0
(CRT_VERSION_BSD4 only).
.It Fa crt_ldentry
The
.Xr dlfcn 3
entry points provided by the run-time linker (CRT_VERSION_BSD4 only).
.El
.Pp
The
.Fa hints_header
and
.Fa hints_bucket
structures define the layout of the library hints, normally found in
.Pa /var/run/ld.so.hints ,
which is used by
.Xr ld.so 1
to quickly locate the shared object images in the filesystem.
The organization of the hints file is not unlike that of an
.Xr a.out 5
object file, in that it contains a header determining the offset and size
of a table of fixed sized hash buckets and a common string pool.
.Bd -literal -offset indent
struct hints_header {
	long		hh_magic;
#define HH_MAGIC	011421044151
	long		hh_version;
#define LD_HINTS_VERSION_1	1
#define LD_HINTS_VERSION_2	2
	long		hh_hashtab;
	long		hh_nbucket;
	long		hh_strtab;
	long		hh_strtab_sz;
	long		hh_ehints;
	long		hh_dirlist;
};
.Ed
.Bl -tag -width hh_strtab_sz
.It Fa hh_magic
Hints file magic number.
.It Fa hh_version
Interface version number.
.It Fa hh_hashtab
Offset of hash table.
.It Fa hh_strtab
Offset of string table.
.It Fa hh_strtab_sz
Size of strings.
.It Fa hh_ehints
Maximum usable offset in hints file.
.It Fa hh_dirlist
Offset in string table of a colon-separated list of directories that was
used in constructing the hints file.
See also
.Xr ldconfig 8 .
This field is only available with interface version number
.Dv LD_HINTS_VERSION_2
and higher.
.El
.Bd -literal -offset indent
/*
 * Hash table element in hints file.
 */
struct hints_bucket {
	int		hi_namex;
	int		hi_pathx;
	int		hi_dewey[MAXDEWEY];
	int		hi_ndewey;
#define hi_major hi_dewey[0]
#define hi_minor hi_dewey[1]
	int		hi_next;
};
.Ed
.Bl -tag -width hi_ndewey
.It Fa hi_namex
Index of the string identifying the library.
.It Fa hi_pathx
Index of the string representing the full path name of the library.
.It Fa hi_dewey
The version numbers of the shared library.
.It Fa hi_ndewey
The number of valid entries in
.Fa hi_dewey .
.It Fa hi_next
Next bucket in case of hashing collisions.
.El
.Sh CAVEATS
Only the (GNU) C compiler currently supports the creation of shared libraries.
Other programming languages can not be used.
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.14 2003/10/30 21:31:28 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate$
@


1.14
log
@- sync with header
- remove a bunch of useless .Pp's
- a little grammar
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.13 2003/01/19 21:02:15 deraadt Exp $
d32 1
a32 1
.Dd October 23, 1993
@


1.13
log
@typos; jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.12 2003/01/18 20:08:02 deraadt Exp $
d59 2
a60 2
.Em Run-time Relocation Section (RRS)
and is embedded in the standard text and data segments of the dynamically
d78 1
a78 1
The exact mechanism used for this is machine dependent, usually a machine
d83 1
a83 1
run-time depending on the load addresses of the various shared objects
d97 1
a97 1
.Dv _DYNAMIC
a180 1
.Pp
d250 1
a250 1
		sod_unused : 31;
a255 1
.Pp
d271 1
a271 1
.Em lib\&<sod_name>\&.so.n.m .
d356 1
a356 1
A hash table is included within the text segment of shared object to
a370 1
.Pp
a399 1
.Pp
a441 1
.Pp
d476 1
a476 1
	void	*(*dlopen)(char *, int);
d478 1
a478 1
	void	*(*dlsym)(void *, char *);
d481 1
d501 1
a501 1
	char		*crt_ldentry;
a600 1
.Pp
@


1.12
log
@slepping
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.11 2002/02/16 21:27:39 millert Exp $
d114 1
a114 1
names, while the data segments contain the tables that need to be modified by
d151 1
a151 1
and is by the
d389 1
a389 1
These items are kept on linked list and is exported through the
d412 1
a412 1
Used by internally by
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.10 2001/11/13 13:54:26 mpech Exp $
d65 1
a65 1
Several utilities co-operate to ensure that the task of getting a program
@


1.10
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.9 2001/08/03 15:21:16 mpech Exp $
d485 1
a485 1
	void	(*dlexit) __P((void));
@


1.9
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.8 2000/10/26 00:37:04 aaron Exp $
d137 1
a137 1
.Xr ld.so
d186 1
a186 1
.Xr ld.so
d265 1
a265 1
.Xr ld.so .
d413 1
a413 1
.Xr ld.so .
d475 1
a475 1
.Xr ld.so .
d492 1
a492 1
.Xr ld.so
d515 1
a515 1
.Xr ld.so
d529 1
a529 1
.Xr ld.so .
d562 1
a562 1
.Xr ld.so
@


1.8
log
@Some share/man fleshing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.7 2000/03/19 19:25:30 aaron Exp $
a109 1
.Pp
@


1.7
log
@Various cleanups.
@
text
@d1 1
a1 1
.\"	$OpenBSD: link.5,v 1.6 1998/11/26 04:25:58 aaron Exp $
d47 1
a47 2
The layout of a number of these
structures within the binaries resembles the
d49 3
a51 4
format in many places
as it serves such similar functions as symbol definitions (including the
accompanying string table) and relocation records needed to resolve
references to external entities.
d54 2
a55 3
These include references
to other objects that are required to complete the link-editing process and
indirection tables to facilitate
d82 3
a84 4
Only
the values contained in the Global Offset Table may need updating at run-time
depending on the load addresses of the various shared objects in the address
space.
d87 2
a88 2
the Procedure Linkage Table (PLT) residing in the data segment of the core
image.
d101 3
a103 5
is relocated to 0, there is no need to invoke the run-time
link editor.
If this symbol is non-zero, it points at a data structure from
which the location of the necessary relocation and symbol information can
be derived.
d139 2
a140 3
are LD_VERSION_SUN(3),
which is used by the SunOS 4.x releases, and LD_VERSION_BSD(8),
which is currently in use by
d489 1
a489 1

d525 1
a525 1
systems it contains -1.
d564 1
a564 2
to quickly locate the shared object images in the
filesystem.
a633 1

a636 1

@


1.6
log
@share/man/man5/ man page repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d46 2
a47 1
link editor and loader mechanism. The layout of a number of these
d53 4
a56 2
references to external entities. It also records a number of data structures
unique to the dynamic loading and linking process. These include references
d70 2
a71 2
of system resources. The compiler emits PIC code from which shared libraries
can be built by
d76 2
a77 1
assembler directive. PIC code differs from conventional code
d82 4
a85 2
register is reserved for the purpose. The rational behind this construct
is to generate code that is independent of the actual load address. Only
d92 2
a93 1
image. Again, this is done to avoid run-time modifications to the text segment.
d97 2
a98 1
process address space. It also collects all symbols that may be needed by the
d102 2
a103 1
is used to indicate the presence of the run-time linker structures. Whenever
d106 2
a107 1
link editor. If this symbol is non-zero, it points at a data structure from
d109 2
a110 1
be derived. This is most notably used by the start-up module,
d132 1
a132 1
	struct 	so_debug *d_debug;
d136 1
a136 1
	struct  ld_entry *d_entry;
d142 2
a143 1
implementation. The current version numbers understood by ld and
d192 2
a193 1
A pointer to the first link map loaded (see below). This field is set by
d201 2
a202 2
Library search rules. A colon separated list of directories corresponding
to the
d332 2
a333 1
Symbol description with size. This is simply an
d337 4
a340 2
added. Used to convey size information on items in the data segment
of shared objects. An array of these lives in the shared object's
d389 2
a390 1
hash table bucket. It is zero for the last bucket element.
d396 2
a397 2
and data items copied from shared objects. These items are kept on linked list
and is exported through the
d419 2
a420 1
Next in hash bucket. Used by internally by
d433 2
a434 1
link-editing. Since the run-time link editor runs as a part of process
d449 1
a449 1
	char    *dd_bpt_addr;
d465 2
a466 2
divert control to the debugger. This address is determined by the start-up
module,
d529 2
a530 1
used to get demand paged zeroed pages. On
d607 2
a608 1
used in constructing the hints file. See also
@


1.5
log
@More man page fixes. Spelling, grammar, some typos. Lots of double-word
occurrences squashed as well.
@
text
@d1 1
d46 4
a49 2
link-editor and loader mechanism. The layout of a number of these
structures within the binaries resembles the a.out format in many places
d62 1
a62 1
.Xr a.out
d71 3
a73 1
through the .size assembler directive. PIC code differs from conventional code
d76 1
a76 1
.Em _GLOBAL_OFFSET_TABLE_ .
d91 1
a91 1
run-time link-editor and stores these along with the image's text and data bits.
d93 1
a93 1
.Em _DYNAMIC
d95 3
a97 2
_DYNAMIC is relocated to 0, there is no need to invoke the run-time
link-editor. If this symbol is non-zero, it points at a data structure from
d101 3
a103 1
The _DYNAMIC structure is conventionally located at the start of the data
d113 3
a115 1
The _DYNAMIC symbol references a
d131 6
a136 5
implementation. The current version numbers understood by ld and ld.so are
.Em LD_VERSION_SUN (3),
which is used by the SunOS 4.x releases, and
.Em LD_VERSION_BSD (8),
which is currently in use by OpenBSD.
d142 2
a143 2
this field provides debuggers with a hook to access symbol tables of shared
objects loaded as a result of the actions of the run-time link-editor.
d145 5
a149 2
this field is obsoleted by CRT interface version CRT_VERSION_BSD4, and is
replaced by the crt_ldentry in
d186 1
a186 2
.Em this
object.
d229 2
a230 2
structure descibes a shared object that is needed
to complete the link edit process of the object containing it.
d239 3
a241 1
in the section_dispatch_table structure.
d259 3
a261 1
specifies a library that is to be searched for by ld.so. The path name
d278 2
a279 2
The run-time link-editor maintains a list of structures called
.Em link maps
d316 1
a316 1
Hook for attaching private data maintained by the run-time link-editor.
d344 2
a345 4
.Po
see
.Xr nlist 5
.Pc .
d375 1
d399 2
a400 1
Virtual address of next rt_symbol.
d402 2
a403 1
Next in hash bucket. Used by internally by ld.so.
d415 1
a415 1
link-editing. Since the run-time link-editor runs as a part of process
d417 2
a418 1
can only do so after the link-editor has been called from crt0.
d448 3
a450 2
.Em crt0.o,
to be some convenient place before the call to _main.
d463 3
a465 1
structure defines a set of service routines within ld.so. See
d480 4
a483 1
structure defines the interface between ld.so and the start-up code in crt0.
d503 4
a506 1
The virtual address at which ld.so was loaded by crt0.
d509 4
a512 2
.Dq /dev/zero
used to get demand paged zeroed pages. On OpenBSD systems it contains -1.
d514 4
a517 1
Contains an open file descriptor that was used by crt0 to load ld.so.
d528 1
a528 1
.Fa so_debug
d530 3
a532 1
The name of the main program as determined by crt0 (CRT_VERSION_BSD3 only).
d534 3
a536 1
The path of the run-time linker as mapped by crt0 (CRT_VERSION_BSD4 only).
d548 4
a551 2
.Dq /var/run/ld.so.hints,
which is used by ld.so to quickly locate the shared object images in the
d554 1
a554 1
.Dq a.out
@


1.4
log
@"the the" purge
@
text
@d55 1
a55 1
The collection of data structures described here will be refered to as the
d70 1
a70 1
Global Offset Table, by convention accessable by the reserved name
d92 1
a92 1
which the location of the necessary relocation- and symbol information can
d101 1
a101 1
The text segments contain read-only data such as symbols descriptions and
d202 1
a202 1
.Fa sdt_hash
d258 1
a258 1
Specifies the prefered minor version number of the shared object to load.
d263 1
a263 1
to keep track of all shared objects loaded into a process' address space.
d291 1
a291 1
Tossed in later versions the run-time linker.
d336 1
a336 1
to facilitate quick lookup of symbols during run-time link-editing.
d426 1
a426 1
The address were a breakpoint will be set by the run-time linker to
@


1.3
log
@kernel is /bsd, os is OpenBSD
@
text
@d426 1
a426 1
The address were a breakpoint will be set by the the run-time linker to
@


1.2
log
@from netbsd; Document hint file v.2
@
text
@d125 1
a125 1
which is currently in use by NetBSD.
d482 1
a482 1
used to get demand paged zeroed pages. On NetBSD systems it contains -1.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: link.5,v 1.4 1995/09/30 21:28:19 pk Exp $
d524 1
d530 1
d546 7
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
