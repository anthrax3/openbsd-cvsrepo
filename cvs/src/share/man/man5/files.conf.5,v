head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.8
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.6
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.28
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.20
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.24
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.22
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.18
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.16
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.14
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.12
	OPENBSD_5_0:1.21.0.10
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.8
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.6
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.20.0.6
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.4
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4;
locks; strict;
comment	@.\" @;


1.23
date	2016.03.02.15.04.20;	author naddy;	state Exp;
branches;
next	1.22;
commitid	NVeTm9qO4S5DlPqp;

1.22
date	2015.10.01.20.44.49;	author jmc;	state Exp;
branches;
next	1.21;
commitid	SNJ6qEXuDMjZqwOe;

1.21
date	2009.04.26.13.10.20;	author tobias;	state Exp;
branches;
next	1.20;

1.20
date	2007.11.26.11.40.12;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.26.11.38.59;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2007.11.26.11.38.05;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.26.08.55.04;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.25.10.30.39;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.58;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.28.10.26.26;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.14.06.59.47;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.10.16.27.34;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.21.22.40.01;	author aanriot;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.07.14.39.19;	author hshoexer;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.07.20.10.27;	author tdeval;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.05.07.13.59;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.09.20.23.34;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.10.21.27.58;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.02.20.44.18;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.04.21.32.22;	author david;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.18.23.40.58;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.10.23.51.45;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.13.21.21.21;	author miod;	state Exp;
branches;
next	;


desc
@@


1.23
log
@remove the remaining mentions of sys/compat/*; ok deraadt@@ millert@@ jmc@@
@
text
@.\"	$OpenBSD: files.conf.5,v 1.22 2015/10/01 20:44:49 jmc Exp $
.\"
.\" Copyright (c) 2002 Miodrag Vallat.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistribution of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\"
.Dd $Mdocdate: October 1 2015 $
.Dt FILES.CONF 5
.Os
.Sh NAME
.Nm files.conf
.Nd rules base for the config utility
.Sh DESCRIPTION
The various
.Pa files.*\&
files located in the kernel source tree
contain all the necessary information needed by
.Xr config 8
to parse a kernel configuration file and determine the list of files to
compile.
.Pp
The
.Pa files.*\&
rules base are simple, human-readable, text files.
Empty lines, as well as text prefixed by the
.Sq #
character, are ignored.
.Sh DEVICE TREE CONCEPT
The
.Ox
kernel
.Dq sees
the various devices as a hierarchical tree, where the various devices
.Dq attach
to parent entities, which can either be physical devices themselves
.Pq such as a computer bus ,
or logical entities, designed to make the driver code simpler.
Usually, the top-most devices are attached to the pseudo-device
.Dq mainbus ,
which is itself reported as attached to a fictitious
.Dq root
node.
There is no restriction on the
.Dq children
a device node may have;
some device drivers can attach themselves to different kinds of parent devices.
For example, the logical
.Xr scsibus 4
device can either attach at a SCSI controller device,
or at the logical
.Xr atapiscsi 4
bus.
.Sh LOCATORS
Some device attachments need to provide attachment information.
For example, an
.Xr isa 4
device will use a range of I/O ports, one or more DMA channels, and one
interrupt vector.
This attachment information is known as the
.Dq locators
for the device.
Most of the buses support default values for unspecified locators, for devices
that either do not require them
.Po
such as
.Xr isa 4
cards not using interrupts
.Pc ,
or which can autoconfigure themselves
.Po
such as
.Xr pci 4
devices
.Pc .
.Pp
Attachment lines in the kernel configuration file must match the locators of
the device they are attaching to.
For example:
.Bd -literal -offset indent
define pci {[dev = -1], [function = -1]}
.Ed
.Pp
With the rule above,
the following kernel configuration lines are valid:
.Bd -literal -offset indent
pciknob0 at pci? dev 2 function 42 # use fixed values
pciknob* at pci? dev ? function ?  # use default values
pciknob* at pci?                   # use default locators
.Ed
.Pp
But the following are not:
.Bd -literal -offset indent
pciknob* at pci? trick ? treat ?               # unknown locators
pciknob* at pci? dev ? function ? usefulness ? # unknown locators
.Ed
.Sh ATTRIBUTES
The following syntax defines a simple attribute,
which can be later used to factorize code dependencies:
.Pp
.Dl define attribute
.Pp
An attachment-like attribute will also require locators to be specified.
If no locators are necessary:
.Pp
.Dl define attribute {}
.Pp
If locators are provided:
.Pp
.Dl define attribute {[locator1 = default1], [locator2 = default2]}
.Sh DEVICES
For simple device attachment, the following syntax
defines a simple device, with no locators:
.Pp
.Dl device devicename {}
.Pp
If locators are necessary, they are specified as:
.Pp
.Dl device devicename {[locator1 = default1], [locator2 = default2]}
.Pp
A device can also reference an attribute with locators.
This is in fact a dependency rule.
For example,
.Pa sys/conf/files
defines the following attribute for SCSI controllers:
.Pp
.Dl define scsi {}			# no locators
.Pp
And SCSI drivers can then be defined as:
.Pp
.Dl device scsictrl: scsi
.Pp
A device may depend on as many attributes as necessary:
.Pp
.Dl device complexdev: simpledev, otherdev, specialattribute
.Sh PSEUDO DEVICES
Pseudo devices are defined as regular devices, except that they do not
need locators, and use a different keyword:
.Bd -literal -offset indent
pseudo-device loop: inet
pseudo-device ksyms
.Ed
.Pp
The rules above define, respectively,
the loopback network interface and the kernel symbols pseudo-device.
.Sh DEVICE ATTACHMENT RULES
Due to the tree structure of the device nodes, every device but the pseudo
devices need to attach to some parent node.
A device driver has to specify to which parents it can attach, with the
following syntax:
.Pp
.Dl attach device at parent, parent2, parent3
.Pp
The rule above lists all the parent attributes a device may attach to.
For example, given the following:
.Bd -literal -offset indent
device smartknob: bells, whistles
attach smartknob at brainbus
.Ed
.Pp
The following configuration line is then valid:
.Pp
.Dl smartknob* at brainbus?
.Pp
Whilst the following is not:
.Pp
.Dl smartknob* at dumbbus?
.Pp
If a device supports attachments to multiple parents, using different
.Dq glue
routines every time, the following syntax specifies the details:
.Bd -literal -offset indent
attach device at parent with device_parent_glue
attach device at parent2 with device_parent2_glue
.Ed
.Pp
This will define more required attributes, depending on the kernel
configuration file's contents.
.Sh RULE FILE INCLUSION
It is possible to include other rules files anywhere in a file, using the
.Dq include
keyword:
.Pp
.Dl include \&"dev/pci/files.pci\&"
.Pp
The above rule will include the rules for machine-independent PCI code.
.Pp
The files
.Pa sys/arch/machine/conf/files.machine ,
for every
.Dq machine
listed in the machine line in the kernel configuration file, as well as
.Pa sys/conf/files ,
are always processed, and do not need to be included.
.Sh ATTRIBUTE REQUIREMENTS
The kernel configuration file description passed to
.Xr config 8
lists several compilation options, as well as several device definitions.
From this list,
.Xr config 8
will build a list of required attributes, which are:
.Pp
.Bl -bullet -offset indent -compact
.It
The
.Dq option
lines, with the option name translated to lowercase (for example, an
.Dq option INET6
line will produce the
.Dq inet6
attribute).
.It
The device and pseudo-device names, except for
.Dq root .
.El
.Sh KERNEL FILE LIST
Kernel source files are defined as:
.Bd -literal -offset indent
file file-list	dependencies	need-rules
.Ed
.Pp
.Dq file-list
typically only specifies a single filename.
If instead it contains a list of filenames separated by the
.Sq \&|
character,
.Xr config 8
will select the first file from the list which exists.
If
.Dq ${MACHINE_ARCH}
or
.Dq ${MACHINE}
is found in the filename, it will be substituted with the
relevant base architecture name.
.Pp
If the
.Dq dependencies
part is empty, the file will always be compiled in.
This is the case for the core kernel files.
Otherwise, the file will only be added to the list if the dependencies are met.
Dependencies are based upon attributes and device names.
Multiple dependencies can be written using the
.Dq \&|
and
.Dq &
operators.
For example:
.Pp
.Dl file netinet/ipsec_input.c	(inet | inet6) & ipsec
.Pp
The above rule teaches
.Xr config 8
to only add
.Pa sys/netinet/ipsec_input.c
to the filelist if the
.Dq ipsec
attribute, and at least one of the
.Dq inet
and
.Dq inet6
attributes, are required.
.Pp
The
.Dq need
rules can be empty, or one of the following keywords:
.Pp
.Bl -tag -width "needs-count" -compact
.It Ar needs-flag
Create an attribute header file, defining whether or not this
attribute is compiled in.
.It Ar needs-count
Create an attribute header file, defining how many instances of this
attribute are to be compiled in.
This rule is mostly used for pseudo-devices.
.El
.Pp
The
.Dq attribute header files
are simple C header files created in the kernel compilation directory,
with the name
.Pa attribute.h
and containing the following line:
.Pp
.Dl #define NATTRIBUTE	0
.Pp
This would substitute the attribute name and its uppercase form, prefixed with
the letter
.Dq N ,
to
.Dq attribute
and
.Dq NATTRIBUTE ,
respectively.
For a
.Dq needs-flag
rule, the value on the
.Dq #define
line is either 1 if the attribute is required, or 0 if it is not required.
For a
.Dq needs-count
rule, the value is the number of device instances required, or 0
if the device is not required.
.Pp
Attribute files are created for every attribute listed with a
.Dq need
rule, even if it is never referenced from the kernel configuration file.
.Sh MISCELLANEOUS ITEMS
.Pa sys/arch/machine/conf/files.machine
must also supply the following special commands:
.Bl -tag -width maxpartitions
.It Ar maxpartitions
Defines how many partitions are available on disk block devices, usually 16.
This value is used by
.Xr config 8
to set up various device information structures.
.It Ar maxusers
Defines the bounds, and the default value, for the
.Dq maxusers
parameter in the kernel configuration file.
The usual values are 2 8 64 ;
.Xr config 8
will report an error if the
.Dq maxusers parameter
in the kernel configuration file does not fit in the specified range.
.El
.Sh FILES
.Bl -tag -width Ds
.It Pa sys/arch/machine/conf/files.machine
Rules for architecture-dependent files, for the
.Dq machine
architecture.
.It Pa sys/dev/class/files.class
Rules for the
.Dq class
class of devices.
.It Pa sys/scsi/files.scsi
Rules for the common SCSI subsystem.
.El
.Sh SEE ALSO
.Xr config 8
@


1.22
log
@change the option INET example to INET6, since we no longer have INET;
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.21 2009/04/26 13:10:20 tobias Exp $
d27 1
a27 1
.Dd $Mdocdate: April 26 2009 $
a350 4
.It Pa sys/compat/emul/files.emul
Rules for the
.Dq emul
operating system or subsystem emulation.
@


1.21
log
@typos fixed

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.20 2007/11/26 11:40:12 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: November 26 2007 $
d227 1
a227 1
.Dq option INET
d229 1
a229 1
.Dq inet
@


1.20
log
@another uneeded .Pp: should have stayed in bed today...
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.19 2007/11/26 11:38:59 jmc Exp $
d252 1
a252 1
is found in the filename, it will be substited with the
@


1.19
log
@damn, a .Pp i forgot to eliminate;
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.18 2007/11/26 11:38:05 jmc Exp $
a129 1
.Pp
@


1.18
log
@tidy up this page;
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.17 2007/11/26 08:55:04 deraadt Exp $
a155 1
.Pp
@


1.17
log
@${MACHINE} expands too
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.16 2007/11/25 10:30:39 deraadt Exp $
d27 1
a27 1
.Dd $Mdocdate: November 25 2007 $
d41 1
a41 1
.Sh SYNTAX
d46 1
a46 1
.Dq #
d48 1
a48 3
.\"
.Ss Device tree concept
.\"
d69 2
a70 3
device can either attach at an
.Tn SCSI
controller device, or at the logical
d73 1
a73 3
.\"
.Ss Locators
.\"
d98 1
a98 1
For example, given
d103 2
a104 1
in the rules files, the following kernel configuration lines are valid:
d111 1
a111 1
but the following are not:
d116 3
a118 4
.\"
.Ss Attributes
.\"
The syntax
d122 2
a123 4
defines a simple attribute, which can be later used to factorize
code dependencies.
An attachment-like attribute will also require locators to be specified,
such as
d127 1
a127 1
if no locators are necessary, or
d131 3
a133 5
if locators are provided.
.\"
.Ss Devices
.\"
For simple device attachment, the syntax
a136 1
defines a simple device, with no locators.
d145 1
a145 3
defines the following attribute for
.Tn SCSI
controllers:
d149 1
a149 3
and
.Tn SCSI
drivers can then be defined as
d157 1
a157 3
.\"
.Ss Pseudo devices
.\"
d165 3
a167 5
define, respectively, the loopback network interface and the kernel symbols
pseudo-device.
.\"
.Ss Device attachment rules
.\"
d175 2
a176 2
which lists all the parent attributes a device may attach to.
For example, if a device is specified as:
d182 1
a182 1
then a
d186 1
a186 1
configuration file line is valid, while a
a189 2
is not.
.Pp
d198 1
a198 1
and will define more required attributes, depending on the kernel
d200 1
a200 3
.\"
.Ss Rule file inclusion
.\"
d207 1
a207 1
will include the rules for machine-independent PCI code.
d216 1
a216 3
.\"
.Ss Attribute requirements
.\"
d222 1
a222 1
will build a list of required attributes, which are
d226 1
a226 1
the
d234 1
a234 1
the device and pseudo-device names, except for
d237 1
a237 3
.\"
.Ss Kernel file list
.\"
a242 1
The
d244 4
a247 5
typically only specifies only one filename.
Alternatively a list of potential filenames can be supplied,
seperated by
.Dq \&| Ns ,
and
d249 1
a249 1
will select a file based on existance.
d252 1
a252 1
or 
d268 1
a268 1
For example, the line
d272 1
a272 1
teaches
d307 1
a307 1
substituting the attribute name and its uppercase form, prefixed with
d328 1
a328 3
.\"
.Ss Miscellaneous items
.\"
a346 1
.\"
d348 1
a348 1
.Bl -tag -width XXX \" deliberately small width
d362 1
a362 3
Rules for the common
.Tn SCSI
subsystem.
@


1.16
log
@document extension to file pathname list; noted by jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.15 2007/05/31 19:19:58 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: May 31 2007 $
d280 2
d283 1
a283 1
base architecture name.
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.14 2006/10/28 10:26:26 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate$
d266 1
a266 1
file somewhere/somefile.c	dependencies	need-rules
d268 14
@


1.14
log
@prefer `buses' to `busses' for the noun plural;
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.13 2006/08/14 06:59:47 jsg Exp $
d27 1
a27 1
.Dd October 8, 2002
@


1.13
log
@Remove mention of fpemul as it has been removed from tree.
From Mikolaj Kucharski <eth0 at o2.pl>
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.12 2006/08/10 16:27:34 tom Exp $
d87 1
a87 1
Most of the busses support default values for unspecified locators, for devices
@


1.12
log
@Fix a couple of typos: devices are declared with "device", not "define".

ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.11 2005/11/21 22:40:01 aanriot Exp $
a375 2
.It Pa sys/gnu/arch/i386/fpemul/files.fpemul
Rules for the i386 GPL floating-point emulator.
@


1.11
log
@missing 's'.

ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.10 2005/06/07 14:39:19 hshoexer Exp $
d144 1
a144 1
.Dl define device {}
d149 1
a149 1
.Dl define device {[locator1 = default1], [locator2 = default2]}
@


1.10
log
@fix define vs. device mixup

ok miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.9 2005/03/07 20:10:27 tdeval Exp $
d174 2
a175 2
Pseudo device are defined as regular devices, except that they do not need
locators, and use a different keyword:
@


1.9
log
@There is no sys/dev/conf/files file.
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.8 2003/09/05 07:13:59 jmc Exp $
d165 1
a165 1
.Dl define scsictrl: scsi
d169 1
a169 1
.Dl define complexdev: simpledev, otherdev, specialattribute
@


1.8
log
@more spacing, less macro;
ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.7 2003/07/09 20:23:34 jmc Exp $
d154 1
a154 1
.Pa sys/dev/conf/files
@


1.7
log
@fix some lists and some typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.6 2003/05/10 21:27:58 jmc Exp $
d35 1
a35 1
.Pa files.*
d43 1
a43 1
.Pa files.*
d82 1
a82 1
device will use a range of io ports, one or more DMA channels, and one
d104 4
a107 4
.Bl -item -offset indent -compact
.It
.Em define pci {[dev = -1], [function = -1]}
.El
d109 5
a113 8
.Bl -item -offset indent -compact
.It
.Cd "pciknob0 at pci? dev 2 function 42 # use fixed values"
.It
.Cd "pciknob* at pci? dev ? function ?  # use default values"
.It
.Cd "pciknob* at pci?                   # use default locators"
.El
d116 4
a119 6
.Bl -item -offset indent -compact
.It
.Cd "pciknob* at pci? trick ? treat ?               # unknown locators"
.It
.Cd "pciknob* at pci? dev ? function ? usefulness ? # unknown locators"
.El
d124 3
a126 4
.Bl -item -offset indent -compact
.It
.Em define attribute
.El
d131 3
a133 4
.Bl -item -offset indent -compact
.It
.Em define attribute {}
.El
d135 3
a137 4
.Bl -item -offset indent -compact
.It
.Em define attribute {[locator1 = default1], [locator2 = default2]}
.El
d143 3
a145 4
.Bl -item -offset indent -compact
.It
.Em define device {}
.El
d148 3
a150 4
.Bl -item -offset indent -compact
.It
.Em define device {[locator1 = default1], [locator2 = default2]}
.El
d158 3
a160 4
.Bl -item -offset indent -compact
.It
.Em define scsi {}			# no locators
.El
d164 3
a166 4
.Bl -item -offset indent -compact
.It
.Em define scsictrl: scsi
.El
d168 3
a170 4
.Bl -item -offset indent -compact
.It
.Em define complexdev: simpledev, otherdev, specialattribute
.El
d176 5
a180 6
.Bl -item -offset indent -compact
.It
.Em pseudo-device loop: inet
.It
.Em pseudo-device ksyms
.El
d190 3
a192 4
.Bl -item -offset indent -compact
.It
.Em attach device at parent, parent2, parent3
.El
d195 5
a199 6
.Bl -item -offset indent -compact
.It
.Em device smartknob: bells, whistles
.It
.Em attach smartknob at brainbus
.El
d201 3
a203 4
.Bl -item -offset indent -compact
.It
.Cd smartknob* at brainbus?
.El
d205 3
a207 4
.Bl -item -offset indent -compact
.It
.Cd smartknob* at dumbbus?
.El
d213 5
a217 6
.Bl -item -offset indent -compact
.It
.Em attach device at parent with device_parent_glue
.It
.Em attach device at parent2 with device_parent2_glue
.El
d226 3
a228 4
.Bl -item -offset indent -compact
.It
.Em include "dev/pci/files.pci"
.El
d247 2
a248 1
.Bl -bullet -offset XXX -compact
d265 4
a268 4
.Bl -item -offset indent -compact
.It
.Em file somewhere/somefile.c	dependencies	need-rules
.El
d281 3
a283 4
.Bl -item -offset indent -compact
.It
.Em file netinet/ipsec_input.c	(inet | inet6) & ipsec
.El
d299 1
d316 3
a318 4
.Bl -item -offset indent -compact
.It
#define NATTRIBUTE	0
.El
d345 1
a345 1
.Bl -tag -width maxpartitions \" -compact
d363 1
a363 1
.Bl -tag -width XXX -compact \" deliberately small width
a367 1
.Pp
a371 1
.Pp
a375 1
.Pp
a377 1
.Pp
@


1.6
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.5 2003/04/02 20:44:18 jmc Exp $
d46 1
a46 1
.Dq \&#
d67 1
a67 1
a device node may have ;
d297 1
a297 1
.Dq \&&
d365 1
a365 1
.Bl -tag -width maxpartitions .\" -compact
d383 1
a383 1
.Bl -tag -width XXX -compact .\" deliberately small width
@


1.5
log
@pci -> PCI;
killed some whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.4 2003/03/04 21:32:22 david Exp $
d370 1
a370 1
to setup various device information structures.
@


1.4
log
@fix some spelling typos
jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.3 2003/01/18 23:40:58 deraadt Exp $
d95 1
a95 1
.Po 
d135 1
a135 1
An attachment-like attribute will also require locators to be specified, 
d249 1
a249 1
will include the rules for machine-independent pci code.
@


1.3
log
@more typos; jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.2 2002/12/10 23:51:45 miod Exp $
d249 1
a249 1
will include the rules for machine-independant pci code.
@


1.2
log
@Fix display glitch.
@
text
@d1 1
a1 1
.\"	$OpenBSD: files.conf.5,v 1.1 2002/10/13 21:21:21 miod Exp $
d62 1
a62 1
which is itself reported as attached to a fictious
d66 1
a66 1
.Dq childrens
d68 1
a68 1
some device drivers can attach themselves to different kind of parent devices.
d95 2
a96 1
.Pq such as
d98 2
a99 1
devices .
d106 1
a106 1
define pci {[dev = -1], [function = -1]}
d111 1
a111 1
pciknob0 at pci? dev 2 function 42 # use fixed values
d113 1
a113 1
pciknob* at pci? dev ? function ?  # use default values
d115 1
a115 1
pciknob* at pci?                   # use default locators
d117 1
d121 1
a121 1
pciknob* at pci? trick ? treat ?               # unknown locators
d123 1
a123 1
pciknob* at pci? dev ? function ? usefulness ? # unknown locators
d131 1
a131 1
define attribute
d135 2
a136 1
An attachment-like attribute will also require locators to be specified, as
d139 1
a139 1
define attribute {}
d144 1
a144 1
define attribute {[locator1 = default1], [locator2 = default2]}
d153 1
a153 1
define device {}
d159 1
a159 1
define device {[locator1 = default1], [locator2 = default2]}
d170 1
a170 1
define scsi {}			# no locators
d177 1
a177 1
define scsictrl: scsi
d182 1
a182 1
define complexdev: simpledev, otherdev, specialattribute
d191 1
a191 1
pseudo-device loop: inet
d193 1
a193 1
pseudo-device ksyms
d195 1
a195 1
define respectively, the loopback network interface, and the kernel symbols
d206 1
a206 1
attach device at parent, parent2, parent3
d212 1
a212 1
device smartknob: bells, whistles
d214 1
a214 1
attach smartknob at brainbus
d219 1
a219 1
smartknob* at brainbus?
d224 1
a224 1
smartknob* at dumbbus?
d233 1
a233 1
attach device at parent with device_parent_glue
d235 1
a235 1
attach device at parent2 with device_parent2_glue
d247 1
a247 1
include "dev/pci/files.pci"
d286 1
a286 1
file somewhere/somefile.c	dependencies	need-rules
d290 1
a290 1
part is empty, the file will always be compiled-in.
d302 1
a302 1
file netinet/ipsec_input.c	(inet | inet6) & ipsec
d314 1
a314 1
attributes are required.
d320 1
a320 1
.It needs-flag
d323 1
a323 1
.It needs-count
a362 1
The
d366 1
a366 1
.It maxpartitions
d371 1
a371 1
.It maxusers
d388 1
d392 2
a393 1
operating system or subsystem emulation
d398 1
d401 1
@


1.1
log
@A new manual page to describe config(8)'s rules files. Will probably require
more details over time.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d95 3
a97 1
.Pq such as Xr pci 4 devices .
@

