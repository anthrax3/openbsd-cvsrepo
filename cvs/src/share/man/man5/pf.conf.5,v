head	1.557;
access;
symbols
	OPENBSD_6_1:1.557.0.4
	OPENBSD_6_1_BASE:1.557
	OPENBSD_6_0:1.552.0.2
	OPENBSD_6_0_BASE:1.552
	OPENBSD_5_9:1.551.0.2
	OPENBSD_5_9_BASE:1.551
	OPENBSD_5_8:1.545.0.6
	OPENBSD_5_8_BASE:1.545
	OPENBSD_5_7:1.545.0.2
	OPENBSD_5_7_BASE:1.545
	OPENBSD_5_6:1.538.0.4
	OPENBSD_5_6_BASE:1.538
	OPENBSD_5_5:1.536.0.4
	OPENBSD_5_5_BASE:1.536
	OPENBSD_5_4:1.527.0.2
	OPENBSD_5_4_BASE:1.527
	OPENBSD_5_3:1.526.0.2
	OPENBSD_5_3_BASE:1.526
	OPENBSD_5_2:1.520.0.2
	OPENBSD_5_2_BASE:1.520
	OPENBSD_5_1_BASE:1.513
	OPENBSD_5_1:1.513.0.2
	OPENBSD_5_0:1.505.0.2
	OPENBSD_5_0_BASE:1.505
	OPENBSD_4_9:1.489.0.2
	OPENBSD_4_9_BASE:1.489
	OPENBSD_4_8:1.476.0.2
	OPENBSD_4_8_BASE:1.476
	OPENBSD_4_7:1.473.0.2
	OPENBSD_4_7_BASE:1.473
	OPENBSD_4_6:1.443.0.4
	OPENBSD_4_6_BASE:1.443
	OPENBSD_4_5:1.406.0.2
	OPENBSD_4_5_BASE:1.406
	OPENBSD_4_4:1.402.0.2
	OPENBSD_4_4_BASE:1.402
	OPENBSD_4_3:1.393.0.2
	OPENBSD_4_3_BASE:1.393
	OPENBSD_4_2:1.383.0.2
	OPENBSD_4_2_BASE:1.383
	OPENBSD_4_1:1.376.0.2
	OPENBSD_4_1_BASE:1.376
	OPENBSD_4_0:1.355.0.2
	OPENBSD_4_0_BASE:1.355
	OPENBSD_3_9:1.341.0.2
	OPENBSD_3_9_BASE:1.341
	OPENBSD_3_8:1.337.0.2
	OPENBSD_3_8_BASE:1.337
	OPENBSD_3_7:1.326.0.2
	OPENBSD_3_7_BASE:1.326
	OPENBSD_3_6:1.300.0.2
	OPENBSD_3_6_BASE:1.300
	OPENBSD_3_5:1.292.0.2
	OPENBSD_3_5_BASE:1.292
	OPENBSD_3_4:1.271.0.2
	OPENBSD_3_4_BASE:1.271
	OPENBSD_3_3:1.219.0.2
	OPENBSD_3_3_BASE:1.219
	OPENBSD_3_2:1.89.0.2
	OPENBSD_3_2_BASE:1.89
	OPENBSD_3_1:1.37.0.2
	OPENBSD_3_1_BASE:1.37
	OPENBSD_3_0:1.25.0.2
	OPENBSD_3_0_BASE:1.25;
locks; strict;
comment	@.\" @;


1.557
date	2017.01.17.21.08.34;	author jmc;	state Exp;
branches;
next	1.556;
commitid	A14mVTd1R5YCHWX5;

1.556
date	2017.01.04.09.56.08;	author tb;	state Exp;
branches;
next	1.555;
commitid	KLhHCBIQHuJjBKo2;

1.555
date	2017.01.02.22.24.28;	author jmc;	state Exp;
branches;
next	1.554;
commitid	RfNLdhZApEsohCa7;

1.554
date	2016.09.24.10.10.58;	author sthen;	state Exp;
branches;
next	1.553;
commitid	hY5jbjWdwI0zgnf2;

1.553
date	2016.09.13.19.15.50;	author jmc;	state Exp;
branches;
next	1.552;
commitid	oEyCIMubTbGqv80g;

1.552
date	2016.05.14.08.21.40;	author jmc;	state Exp;
branches;
next	1.551;
commitid	Tw8BjQnJkxyIeJ1c;

1.551
date	2016.01.05.22.51.38;	author benno;	state Exp;
branches;
next	1.550;
commitid	RdgH2L9cn05DeHbW;

1.550
date	2015.11.03.11.21.16;	author sobrado;	state Exp;
branches;
next	1.549;
commitid	bPzA8HdnuP7OeK1W;

1.549
date	2015.10.26.00.49.34;	author schwarze;	state Exp;
branches;
next	1.548;
commitid	wra9v1eRjQPOZWfL;

1.548
date	2015.10.22.11.02.48;	author sobrado;	state Exp;
branches;
next	1.547;
commitid	RADVoQt8JFJLGkuf;

1.547
date	2015.09.30.16.35.53;	author sobrado;	state Exp;
branches;
next	1.546;
commitid	BpiKrkuOVH4E2qNF;

1.546
date	2015.09.14.20.06.59;	author schwarze;	state Exp;
branches;
next	1.545;
commitid	r87YNrjEWwl7OkJ0;

1.545
date	2015.02.16.21.43.10;	author jmc;	state Exp;
branches;
next	1.544;
commitid	a2cKsfXATxathKE5;

1.544
date	2015.02.16.16.21.25;	author bentley;	state Exp;
branches;
next	1.543;
commitid	T4szyBpTWSGKAMYe;

1.543
date	2015.02.12.01.29.14;	author henning;	state Exp;
branches;
next	1.542;
commitid	WZt5u5hZSKwSXKYS;

1.542
date	2015.02.10.06.47.08;	author henning;	state Exp;
branches;
next	1.541;
commitid	O7GR1K8LcoyF2Qjl;

1.541
date	2015.01.16.17.20.24;	author schwarze;	state Exp;
branches;
next	1.540;
commitid	pN7rqU7E8gxKf0TG;

1.540
date	2014.12.19.13.04.08;	author reyk;	state Exp;
branches;
next	1.539;
commitid	ctnssYdFDfym7i2Z;

1.539
date	2014.10.23.20.38.37;	author kspillner;	state Exp;
branches;
next	1.538;
commitid	O8gTWbsmGSu7zzV8;

1.538
date	2014.05.28.21.13.21;	author jmc;	state Exp;
branches;
next	1.537;

1.537
date	2014.05.28.19.45.04;	author henning;	state Exp;
branches;
next	1.536;

1.536
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.535;

1.535
date	2014.01.21.01.52.18;	author henning;	state Exp;
branches;
next	1.534;

1.534
date	2014.01.20.02.59.55;	author henning;	state Exp;
branches;
next	1.533;

1.533
date	2014.01.10.12.07.19;	author sobrado;	state Exp;
branches;
next	1.532;

1.532
date	2013.12.21.20.57.01;	author camield;	state Exp;
branches;
next	1.531;

1.531
date	2013.11.27.15.16.29;	author jmc;	state Exp;
branches;
next	1.530;

1.530
date	2013.10.12.21.44.57;	author jmc;	state Exp;
branches;
next	1.529;

1.529
date	2013.10.12.12.44.24;	author sthen;	state Exp;
branches;
next	1.528;

1.528
date	2013.10.12.12.31.37;	author henning;	state Exp;
branches;
next	1.527;

1.527
date	2013.04.25.16.53.11;	author sobrado;	state Exp;
branches;
next	1.526;

1.526
date	2013.02.19.23.01.15;	author sthen;	state Exp;
branches;
next	1.525;

1.525
date	2013.01.16.02.43.24;	author henning;	state Exp;
branches;
next	1.524;

1.524
date	2013.01.16.01.49.20;	author henning;	state Exp;
branches;
next	1.523;

1.523
date	2012.10.18.15.18.56;	author reyk;	state Exp;
branches;
next	1.522;

1.522
date	2012.09.20.11.52.46;	author jmc;	state Exp;
branches;
next	1.521;

1.521
date	2012.09.20.09.43.49;	author camield;	state Exp;
branches;
next	1.520;

1.520
date	2012.07.10.17.22.52;	author jmc;	state Exp;
branches;
next	1.519;

1.519
date	2012.07.10.09.40.35;	author jmc;	state Exp;
branches;
next	1.518;

1.518
date	2012.07.09.20.52.59;	author jmc;	state Exp;
branches;
next	1.517;

1.517
date	2012.07.09.15.20.57;	author zinke;	state Exp;
branches;
next	1.516;

1.516
date	2012.07.09.14.05.35;	author henning;	state Exp;
branches;
next	1.515;

1.515
date	2012.06.29.12.56.20;	author jmc;	state Exp;
branches;
next	1.514;

1.514
date	2012.04.24.14.56.08;	author jmc;	state Exp;
branches;
next	1.513;

1.513
date	2012.01.31.07.46.32;	author jmc;	state Exp;
branches;
next	1.512;

1.512
date	2012.01.30.21.56.48;	author mikeb;	state Exp;
branches;
next	1.511;

1.511
date	2012.01.16.01.18.31;	author bluhm;	state Exp;
branches;
next	1.510;

1.510
date	2012.01.11.15.57.19;	author henning;	state Exp;
branches;
next	1.509;

1.509
date	2011.11.27.19.55.18;	author haesbaert;	state Exp;
branches;
next	1.508;

1.508
date	2011.08.30.00.47.16;	author mikeb;	state Exp;
branches;
next	1.507;

1.507
date	2011.08.18.10.49.40;	author henning;	state Exp;
branches;
next	1.506;

1.506
date	2011.08.16.14.48.39;	author mikeb;	state Exp;
branches;
next	1.505;

1.505
date	2011.08.08.02.50.57;	author mcbride;	state Exp;
branches;
next	1.504;

1.504
date	2011.07.29.10.51.46;	author mcbride;	state Exp;
branches;
next	1.503;

1.503
date	2011.07.27.07.16.08;	author jmc;	state Exp;
branches;
next	1.502;

1.502
date	2011.07.27.00.26.10;	author mcbride;	state Exp;
branches;
next	1.501;

1.501
date	2011.07.09.00.20.18;	author jmc;	state Exp;
branches;
next	1.500;

1.500
date	2011.07.08.22.20.56;	author mcbride;	state Exp;
branches;
next	1.499;

1.499
date	2011.07.04.05.59.38;	author tedu;	state Exp;
branches;
next	1.498;

1.498
date	2011.07.04.05.49.00;	author jmc;	state Exp;
branches;
next	1.497;

1.497
date	2011.07.04.03.36.14;	author henning;	state Exp;
branches;
next	1.496;

1.496
date	2011.07.03.23.37.55;	author zinke;	state Exp;
branches;
next	1.495;

1.495
date	2011.06.23.20.35.22;	author sthen;	state Exp;
branches;
next	1.494;

1.494
date	2011.05.20.22.57.20;	author sthen;	state Exp;
branches;
next	1.493;

1.493
date	2011.05.02.07.04.59;	author jmc;	state Exp;
branches;
next	1.492;

1.492
date	2011.04.06.13.20.44;	author claudio;	state Exp;
branches;
next	1.491;

1.491
date	2011.04.05.14.05.45;	author jsg;	state Exp;
branches;
next	1.490;

1.490
date	2011.03.25.11.09.38;	author bluhm;	state Exp;
branches;
next	1.489;

1.489
date	2011.02.01.17.31.47;	author jmc;	state Exp;
branches;
next	1.488;

1.488
date	2011.01.23.23.34.18;	author henning;	state Exp;
branches;
next	1.487;

1.487
date	2011.01.20.08.44.12;	author sthen;	state Exp;
branches;
next	1.486;

1.486
date	2010.12.31.12.15.31;	author bluhm;	state Exp;
branches;
next	1.485;

1.485
date	2010.12.23.14.39.21;	author jmc;	state Exp;
branches;
next	1.484;

1.484
date	2010.12.22.22.20.36;	author jmc;	state Exp;
branches;
next	1.483;

1.483
date	2010.12.22.21.05.19;	author henning;	state Exp;
branches;
next	1.482;

1.482
date	2010.12.15.14.06.05;	author jmc;	state Exp;
branches;
next	1.481;

1.481
date	2010.09.24.10.57.16;	author henning;	state Exp;
branches;
next	1.480;

1.480
date	2010.09.24.10.41.36;	author jmc;	state Exp;
branches;
next	1.479;

1.479
date	2010.09.24.09.19.04;	author henning;	state Exp;
branches;
next	1.478;

1.478
date	2010.09.22.06.03.32;	author henning;	state Exp;
branches;
next	1.477;

1.477
date	2010.08.20.13.01.43;	author henning;	state Exp;
branches;
next	1.476;

1.476
date	2010.05.19.13.51.37;	author sthen;	state Exp;
branches;
next	1.475;

1.475
date	2010.04.01.19.09.36;	author jsg;	state Exp;
branches;
next	1.474;

1.474
date	2010.03.18.21.49.20;	author jmc;	state Exp;
branches;
next	1.473;

1.473
date	2010.02.19.12.29.06;	author henning;	state Exp;
branches;
next	1.472;

1.472
date	2010.02.18.16.29.40;	author jmc;	state Exp;
branches;
next	1.471;

1.471
date	2010.02.02.19.16.50;	author sthen;	state Exp;
branches;
next	1.470;

1.470
date	2010.01.12.18.42.36;	author jmc;	state Exp;
branches;
next	1.469;

1.469
date	2010.01.12.03.20.51;	author mcbride;	state Exp;
branches;
next	1.468;

1.468
date	2009.12.24.17.00.48;	author deraadt;	state Exp;
branches;
next	1.467;

1.467
date	2009.12.24.09.35.33;	author jmc;	state Exp;
branches;
next	1.466;

1.466
date	2009.12.24.07.14.46;	author dlg;	state Exp;
branches;
next	1.465;

1.465
date	2009.11.30.18.51.57;	author sthen;	state Exp;
branches;
next	1.464;

1.464
date	2009.11.10.09.10.11;	author sthen;	state Exp;
branches;
next	1.463;

1.463
date	2009.11.06.11.44.15;	author eric;	state Exp;
branches;
next	1.462;

1.462
date	2009.11.05.16.01.36;	author sthen;	state Exp;
branches;
next	1.461;

1.461
date	2009.10.14.14.17.53;	author jmeltzer;	state Exp;
branches;
next	1.460;

1.460
date	2009.10.04.16.08.37;	author michele;	state Exp;
branches;
next	1.459;

1.459
date	2009.09.25.14.08.04;	author jmc;	state Exp;
branches;
next	1.458;

1.458
date	2009.09.22.10.42.08;	author jmc;	state Exp;
branches;
next	1.457;

1.457
date	2009.09.08.17.52.17;	author michele;	state Exp;
branches;
next	1.456;

1.456
date	2009.09.08.17.00.41;	author michele;	state Exp;
branches;
next	1.455;

1.455
date	2009.09.07.12.21.10;	author reyk;	state Exp;
branches;
next	1.454;

1.454
date	2009.09.07.11.28.34;	author jmc;	state Exp;
branches;
next	1.453;

1.453
date	2009.09.07.10.36.13;	author jmc;	state Exp;
branches;
next	1.452;

1.452
date	2009.09.03.17.53.25;	author jmc;	state Exp;
branches;
next	1.451;

1.451
date	2009.09.02.14.50.01;	author henning;	state Exp;
branches;
next	1.450;

1.450
date	2009.09.02.13.28.02;	author reyk;	state Exp;
branches;
next	1.449;

1.449
date	2009.09.01.13.43.15;	author henning;	state Exp;
branches;
next	1.448;

1.448
date	2009.07.28.13.29.45;	author claudio;	state Exp;
branches;
next	1.447;

1.447
date	2009.07.27.19.04.30;	author deraadt;	state Exp;
branches;
next	1.446;

1.446
date	2009.07.27.13.39.03;	author sthen;	state Exp;
branches;
next	1.445;

1.445
date	2009.07.19.14.05.36;	author sobrado;	state Exp;
branches;
next	1.444;

1.444
date	2009.07.18.20.28.15;	author sobrado;	state Exp;
branches;
next	1.443;

1.443
date	2009.05.30.16.56.17;	author jmc;	state Exp;
branches;
next	1.442;

1.442
date	2009.05.01.09.01.26;	author jmc;	state Exp;
branches;
next	1.441;

1.441
date	2009.04.27.21.52.26;	author jmc;	state Exp;
branches;
next	1.440;

1.440
date	2009.04.27.19.04.42;	author jmc;	state Exp;
branches;
next	1.439;

1.439
date	2009.04.27.15.32.52;	author jmc;	state Exp;
branches;
next	1.438;

1.438
date	2009.04.26.12.30.20;	author sthen;	state Exp;
branches;
next	1.437;

1.437
date	2009.04.24.20.35.01;	author jmc;	state Exp;
branches;
next	1.436;

1.436
date	2009.04.24.15.40.02;	author jmc;	state Exp;
branches;
next	1.435;

1.435
date	2009.04.24.05.44.39;	author jmc;	state Exp;
branches;
next	1.434;

1.434
date	2009.04.22.13.32.25;	author jmc;	state Exp;
branches;
next	1.433;

1.433
date	2009.04.21.16.11.51;	author jmc;	state Exp;
branches;
next	1.432;

1.432
date	2009.04.21.16.04.27;	author jmc;	state Exp;
branches;
next	1.431;

1.431
date	2009.04.21.14.08.18;	author jmc;	state Exp;
branches;
next	1.430;

1.430
date	2009.04.21.12.41.48;	author jmc;	state Exp;
branches;
next	1.429;

1.429
date	2009.04.21.11.33.42;	author jmc;	state Exp;
branches;
next	1.428;

1.428
date	2009.04.20.20.42.49;	author sthen;	state Exp;
branches;
next	1.427;

1.427
date	2009.04.17.07.00.26;	author jmc;	state Exp;
branches;
next	1.426;

1.426
date	2009.04.16.07.31.51;	author jmc;	state Exp;
branches;
next	1.425;

1.425
date	2009.04.15.09.54.29;	author jmc;	state Exp;
branches;
next	1.424;

1.424
date	2009.04.15.08.27.08;	author sobrado;	state Exp;
branches;
next	1.423;

1.423
date	2009.04.15.07.21.26;	author jmc;	state Exp;
branches;
next	1.422;

1.422
date	2009.04.15.06.08.27;	author jmc;	state Exp;
branches;
next	1.421;

1.421
date	2009.04.14.14.03.53;	author jmc;	state Exp;
branches;
next	1.420;

1.420
date	2009.04.14.08.29.06;	author jmc;	state Exp;
branches;
next	1.419;

1.419
date	2009.04.13.19.08.49;	author jmc;	state Exp;
branches;
next	1.418;

1.418
date	2009.04.10.21.43.37;	author jmc;	state Exp;
branches;
next	1.417;

1.417
date	2009.04.10.21.27.04;	author jmc;	state Exp;
branches;
next	1.416;

1.416
date	2009.04.07.13.52.29;	author henning;	state Exp;
branches;
next	1.415;

1.415
date	2009.04.07.13.48.38;	author henning;	state Exp;
branches;
next	1.414;

1.414
date	2009.04.07.13.40.18;	author henning;	state Exp;
branches;
next	1.413;

1.413
date	2009.04.07.13.27.32;	author jmc;	state Exp;
branches;
next	1.412;

1.412
date	2009.04.07.12.52.57;	author henning;	state Exp;
branches;
next	1.411;

1.411
date	2009.04.07.12.50.44;	author henning;	state Exp;
branches;
next	1.410;

1.410
date	2009.04.06.17.33.21;	author sobrado;	state Exp;
branches;
next	1.409;

1.409
date	2009.04.06.17.22.02;	author sthen;	state Exp;
branches;
next	1.408;

1.408
date	2009.04.06.16.30.20;	author sobrado;	state Exp;
branches;
next	1.407;

1.407
date	2009.04.06.12.05.55;	author henning;	state Exp;
branches;
next	1.406;

1.406
date	2009.01.31.19.37.12;	author sobrado;	state Exp;
branches;
next	1.405;

1.405
date	2008.10.02.12.36.32;	author henning;	state Exp;
branches;
next	1.404;

1.404
date	2008.09.11.17.57.45;	author brad;	state Exp;
branches;
next	1.403;

1.403
date	2008.09.10.15.07.47;	author henning;	state Exp;
branches;
next	1.402;

1.402
date	2008.06.11.07.21.00;	author jmc;	state Exp;
branches;
next	1.401;

1.401
date	2008.06.10.20.55.01;	author mcbride;	state Exp;
branches;
next	1.400;

1.400
date	2008.06.10.16.52.10;	author jmc;	state Exp;
branches;
next	1.399;

1.399
date	2008.06.10.08.04.05;	author jmc;	state Exp;
branches;
next	1.398;

1.398
date	2008.06.10.04.33.04;	author henning;	state Exp;
branches;
next	1.397;

1.397
date	2008.05.19.14.57.31;	author markus;	state Exp;
branches;
next	1.396;

1.396
date	2008.05.07.07.32.37;	author markus;	state Exp;
branches;
next	1.395;

1.395
date	2008.05.07.06.23.30;	author markus;	state Exp;
branches;
next	1.394;

1.394
date	2008.03.19.19.28.24;	author deraadt;	state Exp;
branches;
next	1.393;

1.393
date	2008.02.11.07.46.32;	author jmc;	state Exp;
branches;
next	1.392;

1.392
date	2008.02.01.08.38.00;	author jmc;	state Exp;
branches;
next	1.391;

1.391
date	2008.02.01.07.26.41;	author mcbride;	state Exp;
branches;
next	1.390;

1.390
date	2007.11.21.03.58.46;	author ray;	state Exp;
branches;
next	1.389;

1.389
date	2007.11.09.15.54.53;	author jmc;	state Exp;
branches;
next	1.388;

1.388
date	2007.10.14.16.01.43;	author deraadt;	state Exp;
branches;
next	1.387;

1.387
date	2007.10.13.21.49.15;	author deraadt;	state Exp;
branches;
next	1.386;

1.386
date	2007.09.30.20.12.22;	author henning;	state Exp;
branches;
next	1.385;

1.385
date	2007.09.27.22.40.48;	author mpf;	state Exp;
branches;
next	1.384;

1.384
date	2007.08.30.17.05.44;	author dhartmei;	state Exp;
branches;
next	1.383;

1.383
date	2007.07.17.16.27.38;	author jmc;	state Exp;
branches;
next	1.382;

1.382
date	2007.06.26.20.22.02;	author jmc;	state Exp;
branches;
next	1.381;

1.381
date	2007.06.08.14.16.37;	author henning;	state Exp;
branches;
next	1.380;

1.380
date	2007.05.31.19.19.58;	author jmc;	state Exp;
branches;
next	1.379;

1.379
date	2007.05.08.23.38.12;	author mcbride;	state Exp;
branches;
next	1.378;

1.378
date	2007.04.14.07.24.18;	author jmc;	state Exp;
branches;
next	1.377;

1.377
date	2007.03.21.03.04.16;	author mcbride;	state Exp;
branches;
next	1.376;

1.376
date	2006.12.01.07.23.26;	author camield;	state Exp;
branches;
next	1.375;

1.375
date	2006.11.29.07.03.58;	author jmc;	state Exp;
branches;
next	1.374;

1.374
date	2006.11.28.21.39.46;	author jmc;	state Exp;
branches;
next	1.373;

1.373
date	2006.11.28.17.11.29;	author henning;	state Exp;
branches;
next	1.372;

1.372
date	2006.11.09.13.18.56;	author jmc;	state Exp;
branches;
next	1.371;

1.371
date	2006.11.01.09.19.48;	author jmc;	state Exp;
branches;
next	1.370;

1.370
date	2006.10.31.14.53.44;	author mcbride;	state Exp;
branches;
next	1.369;

1.369
date	2006.10.28.14.31.00;	author mcbride;	state Exp;
branches;
next	1.368;

1.368
date	2006.10.26.13.15.16;	author jmc;	state Exp;
branches;
next	1.367;

1.367
date	2006.10.26.13.11.05;	author jmc;	state Exp;
branches;
next	1.366;

1.366
date	2006.10.26.10.29.43;	author mcbride;	state Exp;
branches;
next	1.365;

1.365
date	2006.10.26.10.26.03;	author mcbride;	state Exp;
branches;
next	1.364;

1.364
date	2006.10.25.11.36.08;	author henning;	state Exp;
branches;
next	1.363;

1.363
date	2006.10.23.06.58.35;	author jmc;	state Exp;
branches;
next	1.362;

1.362
date	2006.10.22.22.40.40;	author mcbride;	state Exp;
branches;
next	1.361;

1.361
date	2006.10.11.13.35.17;	author jmc;	state Exp;
branches;
next	1.360;

1.360
date	2006.10.11.08.44.39;	author mcbride;	state Exp;
branches;
next	1.359;

1.359
date	2006.10.06.16.25.24;	author jmc;	state Exp;
branches;
next	1.358;

1.358
date	2006.10.06.13.56.29;	author jmc;	state Exp;
branches;
next	1.357;

1.357
date	2006.10.06.13.51.06;	author jmc;	state Exp;
branches;
next	1.356;

1.356
date	2006.10.06.10.48.46;	author mcbride;	state Exp;
branches;
next	1.355;

1.355
date	2006.09.12.13.39.37;	author jmc;	state Exp;
branches;
next	1.354;

1.354
date	2006.08.31.18.44.48;	author jmc;	state Exp;
branches;
next	1.353;

1.353
date	2006.08.22.15.55.13;	author dhartmei;	state Exp;
branches;
next	1.352;

1.352
date	2006.08.02.11.45.56;	author dhartmei;	state Exp;
branches;
next	1.351;

1.351
date	2006.07.25.16.59.25;	author jmc;	state Exp;
branches;
next	1.350;

1.350
date	2006.07.09.11.00.17;	author mcbride;	state Exp;
branches;
next	1.349;

1.349
date	2006.06.18.16.01.20;	author hshoexer;	state Exp;
branches;
next	1.348;

1.348
date	2006.05.28.12.07.10;	author jmc;	state Exp;
branches;
next	1.347;

1.347
date	2006.05.28.02.51.06;	author mcbride;	state Exp;
branches;
next	1.346;

1.346
date	2006.05.14.15.51.42;	author deraadt;	state Exp;
branches;
next	1.345;

1.345
date	2006.05.01.15.17.41;	author jmc;	state Exp;
branches;
next	1.344;

1.344
date	2006.05.01.12.24.32;	author dhartmei;	state Exp;
branches;
next	1.343;

1.343
date	2006.04.30.10.12.21;	author jmc;	state Exp;
branches;
next	1.342;

1.342
date	2006.03.14.11.09.44;	author djm;	state Exp;
branches;
next	1.341;

1.341
date	2006.02.20.11.39.43;	author camield;	state Exp;
branches;
next	1.340;

1.340
date	2006.01.18.03.45.28;	author joel;	state Exp;
branches;
next	1.339;

1.339
date	2005.11.17.22.18.20;	author joel;	state Exp;
branches;
next	1.338;

1.338
date	2005.09.16.10.18.29;	author dhartmei;	state Exp;
branches;
next	1.337;

1.337
date	2005.08.06.19.52.36;	author jmc;	state Exp;
branches;
next	1.336;

1.336
date	2005.08.05.22.35.59;	author dhartmei;	state Exp;
branches;
next	1.335;

1.335
date	2005.06.14.18.18.14;	author henning;	state Exp;
branches;
next	1.334;

1.334
date	2005.06.05.13.46.30;	author jmc;	state Exp;
branches;
next	1.333;

1.333
date	2005.06.03.22.14.37;	author jmc;	state Exp;
branches;
next	1.332;

1.332
date	2005.06.02.22.56.50;	author dhartmei;	state Exp;
branches;
next	1.331;

1.331
date	2005.05.27.18.57.56;	author dhartmei;	state Exp;
branches;
next	1.330;

1.330
date	2005.05.26.15.29.47;	author dhartmei;	state Exp;
branches;
next	1.329;

1.329
date	2005.05.26.05.34.00;	author henning;	state Exp;
branches;
next	1.328;

1.328
date	2005.05.23.15.25.50;	author dhartmei;	state Exp;
branches;
next	1.327;

1.327
date	2005.05.18.02.31.49;	author david;	state Exp;
branches;
next	1.326;

1.326
date	2005.03.01.18.10.44;	author jmc;	state Exp;
branches;
next	1.325;

1.325
date	2005.02.27.15.08.39;	author dhartmei;	state Exp;
branches;
next	1.324;

1.324
date	2005.02.25.13.59.14;	author joel;	state Exp;
branches;
next	1.323;

1.323
date	2005.02.24.04.36.45;	author joel;	state Exp;
branches;
next	1.322;

1.322
date	2005.01.01.07.57.53;	author pascoe;	state Exp;
branches;
next	1.321;

1.321
date	2004.12.23.20.33.03;	author jaredy;	state Exp;
branches;
next	1.320;

1.320
date	2004.12.22.17.17.56;	author dhartmei;	state Exp;
branches;
next	1.319;

1.319
date	2004.12.22.00.59.26;	author david;	state Exp;
branches;
next	1.318;

1.318
date	2004.12.21.02.00.36;	author mjc;	state Exp;
branches;
next	1.317;

1.317
date	2004.12.19.12.00.48;	author jmc;	state Exp;
branches;
next	1.316;

1.316
date	2004.12.18.00.23.31;	author mcbride;	state Exp;
branches;
next	1.315;

1.315
date	2004.12.17.11.31.18;	author henning;	state Exp;
branches;
next	1.314;

1.314
date	2004.12.12.17.41.55;	author jmc;	state Exp;
branches;
next	1.313;

1.313
date	2004.12.10.22.17.02;	author henning;	state Exp;
branches;
next	1.312;

1.312
date	2004.12.08.18.49.47;	author dhartmei;	state Exp;
branches;
next	1.311;

1.311
date	2004.12.08.18.47.34;	author dhartmei;	state Exp;
branches;
next	1.310;

1.310
date	2004.12.07.10.40.08;	author dhartmei;	state Exp;
branches;
next	1.309;

1.309
date	2004.12.07.09.36.16;	author deraadt;	state Exp;
branches;
next	1.308;

1.308
date	2004.12.07.05.30.27;	author mcbride;	state Exp;
branches;
next	1.307;

1.307
date	2004.12.04.16.07.31;	author mcbride;	state Exp;
branches;
next	1.306;

1.306
date	2004.12.04.08.02.13;	author mcbride;	state Exp;
branches;
next	1.305;

1.305
date	2004.11.16.18.09.14;	author mpf;	state Exp;
branches;
next	1.304;

1.304
date	2004.11.08.23.32.08;	author aaron;	state Exp;
branches;
next	1.303;

1.303
date	2004.10.28.19.29.53;	author mcbride;	state Exp;
branches;
next	1.302;

1.302
date	2004.10.18.23.08.08;	author mcbride;	state Exp;
branches;
next	1.301;

1.301
date	2004.09.21.16.59.11;	author aaron;	state Exp;
branches;
next	1.300;

1.300
date	2004.09.10.12.40.49;	author jaredy;	state Exp;
branches;
next	1.299;

1.299
date	2004.08.25.07.19.00;	author jaredy;	state Exp;
branches;
next	1.298;

1.298
date	2004.08.23.14.26.04;	author jmc;	state Exp;
branches;
next	1.297;

1.297
date	2004.05.09.10.51.55;	author dhartmei;	state Exp;
branches;
next	1.296;

1.296
date	2004.05.05.23.16.02;	author frantzen;	state Exp;
branches;
next	1.295;

1.295
date	2004.04.24.23.22.54;	author cedric;	state Exp;
branches;
next	1.294;

1.294
date	2004.04.04.19.40.43;	author jmc;	state Exp;
branches;
next	1.293;

1.293
date	2004.03.31.11.13.03;	author dhartmei;	state Exp;
branches;
next	1.292;

1.292
date	2004.02.24.05.44.48;	author mcbride;	state Exp;
branches;
next	1.291;

1.291
date	2004.02.04.19.38.30;	author jmc;	state Exp;
branches;
next	1.290;

1.290
date	2004.02.04.11.09.33;	author mcbride;	state Exp;
branches;
next	1.289;

1.289
date	2004.01.06.09.28.00;	author cedric;	state Exp;
branches;
next	1.288;

1.288
date	2003.12.31.14.09.57;	author jmc;	state Exp;
branches;
next	1.287;

1.287
date	2003.12.31.11.18.25;	author cedric;	state Exp;
branches;
next	1.286;

1.286
date	2003.12.15.05.17.20;	author jmc;	state Exp;
branches;
next	1.285;

1.285
date	2003.12.15.00.02.03;	author mcbride;	state Exp;
branches;
next	1.284;

1.284
date	2003.11.29.10.05.55;	author dhartmei;	state Exp;
branches;
next	1.283;

1.283
date	2003.11.24.16.06.00;	author henning;	state Exp;
branches;
next	1.282;

1.282
date	2003.11.18.22.52.38;	author dhartmei;	state Exp;
branches;
next	1.281;

1.281
date	2003.11.18.22.43.45;	author dhartmei;	state Exp;
branches;
next	1.280;

1.280
date	2003.11.14.16.44.21;	author henning;	state Exp;
branches;
next	1.279;

1.279
date	2003.11.14.13.51.42;	author henning;	state Exp;
branches;
next	1.278;

1.278
date	2003.11.08.00.45.34;	author mcbride;	state Exp;
branches;
next	1.277;

1.277
date	2003.11.07.20.29.54;	author mcbride;	state Exp;
branches;
next	1.276;

1.276
date	2003.11.06.14.38.03;	author henning;	state Exp;
branches;
next	1.275;

1.275
date	2003.10.30.19.08.07;	author jmc;	state Exp;
branches;
next	1.274;

1.274
date	2003.10.24.19.31.59;	author henning;	state Exp;
branches;
next	1.273;

1.273
date	2003.10.07.20.18.36;	author deraadt;	state Exp;
branches;
next	1.272;

1.272
date	2003.10.07.09.57.43;	author henning;	state Exp;
branches;
next	1.271;

1.271
date	2003.09.02.18.37.08;	author jmc;	state Exp;
branches;
next	1.270;

1.270
date	2003.08.28.09.41.22;	author jmc;	state Exp;
branches;
next	1.269;

1.269
date	2003.08.26.18.34.25;	author dhartmei;	state Exp;
branches;
next	1.268;

1.268
date	2003.08.24.12.47.07;	author cedric;	state Exp;
branches;
next	1.267;

1.267
date	2003.08.22.21.50.34;	author david;	state Exp;
branches;
next	1.266;

1.266
date	2003.08.22.18.28.14;	author frantzen;	state Exp;
branches;
next	1.265;

1.265
date	2003.08.22.04.54.13;	author david;	state Exp;
branches;
next	1.264;

1.264
date	2003.08.21.19.12.59;	author frantzen;	state Exp;
branches;
next	1.263;

1.263
date	2003.07.07.09.15.54;	author jmc;	state Exp;
branches;
next	1.262;

1.262
date	2003.07.07.08.42.38;	author henning;	state Exp;
branches;
next	1.261;

1.261
date	2003.07.07.08.38.03;	author henning;	state Exp;
branches;
next	1.260;

1.260
date	2003.07.04.10.42.52;	author henning;	state Exp;
branches;
next	1.259;

1.259
date	2003.06.17.21.48.11;	author david;	state Exp;
branches;
next	1.258;

1.258
date	2003.06.12.10.05.15;	author henning;	state Exp;
branches;
next	1.257;

1.257
date	2003.06.11.23.09.20;	author henning;	state Exp;
branches;
next	1.256;

1.256
date	2003.06.11.17.03.09;	author pb;	state Exp;
branches;
next	1.255;

1.255
date	2003.06.10.16.59.49;	author deraadt;	state Exp;
branches;
next	1.254;

1.254
date	2003.06.07.20.31.13;	author henning;	state Exp;
branches;
next	1.253;

1.253
date	2003.06.07.20.27.56;	author henning;	state Exp;
branches;
next	1.252;

1.252
date	2003.06.07.20.05.12;	author henning;	state Exp;
branches;
next	1.251;

1.251
date	2003.06.07.20.00.52;	author henning;	state Exp;
branches;
next	1.250;

1.250
date	2003.06.03.12.18.02;	author henning;	state Exp;
branches;
next	1.249;

1.249
date	2003.06.02.20.05.49;	author david;	state Exp;
branches;
next	1.248;

1.248
date	2003.05.30.20.06.48;	author henning;	state Exp;
branches;
next	1.247;

1.247
date	2003.05.23.12.06.48;	author jmc;	state Exp;
branches;
next	1.246;

1.246
date	2003.05.17.07.50.46;	author henning;	state Exp;
branches;
next	1.245;

1.245
date	2003.05.17.07.10.34;	author david;	state Exp;
branches;
next	1.244;

1.244
date	2003.05.17.06.44.27;	author david;	state Exp;
branches;
next	1.243;

1.243
date	2003.05.17.06.14.58;	author henning;	state Exp;
branches;
next	1.242;

1.242
date	2003.05.17.05.51.09;	author david;	state Exp;
branches;
next	1.241;

1.241
date	2003.05.16.18.38.47;	author jmc;	state Exp;
branches;
next	1.240;

1.240
date	2003.05.16.17.15.17;	author dhartmei;	state Exp;
branches;
next	1.239;

1.239
date	2003.05.16.09.08.58;	author jmc;	state Exp;
branches;
next	1.238;

1.238
date	2003.05.15.08.38.47;	author jmc;	state Exp;
branches;
next	1.237;

1.237
date	2003.05.15.00.03.06;	author frantzen;	state Exp;
branches;
next	1.236;

1.236
date	2003.05.12.04.22.04;	author dhartmei;	state Exp;
branches;
next	1.235;

1.235
date	2003.05.12.01.25.32;	author dhartmei;	state Exp;
branches;
next	1.234;

1.234
date	2003.05.11.20.46.11;	author frantzen;	state Exp;
branches;
next	1.233;

1.233
date	2003.05.10.23.27.07;	author dhartmei;	state Exp;
branches;
next	1.232;

1.232
date	2003.05.10.22.38.04;	author pb;	state Exp;
branches;
next	1.231;

1.231
date	2003.05.10.16.46.53;	author pb;	state Exp;
branches;
next	1.230;

1.230
date	2003.05.10.00.45.43;	author henning;	state Exp;
branches;
next	1.229;

1.229
date	2003.05.06.15.52.27;	author henning;	state Exp;
branches;
next	1.228;

1.228
date	2003.05.01.16.21.02;	author henning;	state Exp;
branches;
next	1.227;

1.227
date	2003.04.29.12.44.14;	author henning;	state Exp;
branches;
next	1.226;

1.226
date	2003.04.29.10.36.34;	author dhartmei;	state Exp;
branches;
next	1.225;

1.225
date	2003.04.25.19.18.25;	author jmc;	state Exp;
branches;
next	1.224;

1.224
date	2003.04.19.21.58.06;	author henning;	state Exp;
branches;
next	1.223;

1.223
date	2003.04.19.21.45.16;	author henning;	state Exp;
branches;
next	1.222;

1.222
date	2003.04.05.21.46.50;	author henning;	state Exp;
branches;
next	1.221;

1.221
date	2003.04.01.12.29.28;	author pb;	state Exp;
branches;
next	1.220;

1.220
date	2003.04.01.12.23.44;	author pb;	state Exp;
branches;
next	1.219;

1.219
date	2003.03.22.00.10.17;	author david;	state Exp;
branches;
next	1.218;

1.218
date	2003.03.20.01.27.17;	author david;	state Exp;
branches;
next	1.217;

1.217
date	2003.03.13.19.26.27;	author henning;	state Exp;
branches;
next	1.216;

1.216
date	2003.03.13.19.21.05;	author deraadt;	state Exp;
branches;
next	1.215;

1.215
date	2003.03.12.00.49.49;	author henning;	state Exp;
branches;
next	1.214;

1.214
date	2003.03.10.14.15.02;	author jmc;	state Exp;
branches;
next	1.213;

1.213
date	2003.03.10.09.40.47;	author deraadt;	state Exp;
branches;
next	1.212;

1.212
date	2003.03.10.09.33.51;	author deraadt;	state Exp;
branches;
next	1.211;

1.211
date	2003.03.10.09.27.47;	author jmc;	state Exp;
branches;
next	1.210;

1.210
date	2003.03.09.22.02.45;	author frantzen;	state Exp;
branches;
next	1.209;

1.209
date	2003.03.06.04.03.40;	author david;	state Exp;
branches;
next	1.208;

1.208
date	2003.03.04.23.40.03;	author dhartmei;	state Exp;
branches;
next	1.207;

1.207
date	2003.03.04.22.50.36;	author deraadt;	state Exp;
branches;
next	1.206;

1.206
date	2003.03.04.22.38.22;	author deraadt;	state Exp;
branches;
next	1.205;

1.205
date	2003.03.04.22.18.43;	author deraadt;	state Exp;
branches;
next	1.204;

1.204
date	2003.03.04.21.03.46;	author frantzen;	state Exp;
branches;
next	1.203;

1.203
date	2003.03.04.18.36.18;	author deraadt;	state Exp;
branches;
next	1.202;

1.202
date	2003.03.04.18.03.09;	author henning;	state Exp;
branches;
next	1.201;

1.201
date	2003.03.04.16.52.00;	author dhartmei;	state Exp;
branches;
next	1.200;

1.200
date	2003.03.04.16.50.01;	author pb;	state Exp;
branches;
next	1.199;

1.199
date	2003.03.04.16.35.47;	author dhartmei;	state Exp;
branches;
next	1.198;

1.198
date	2003.03.04.16.23.32;	author henning;	state Exp;
branches;
next	1.197;

1.197
date	2003.03.04.16.16.05;	author henning;	state Exp;
branches;
next	1.196;

1.196
date	2003.03.04.16.05.42;	author henning;	state Exp;
branches;
next	1.195;

1.195
date	2003.03.04.15.54.54;	author henning;	state Exp;
branches;
next	1.194;

1.194
date	2003.03.04.15.47.40;	author henning;	state Exp;
branches;
next	1.193;

1.193
date	2003.03.04.15.44.08;	author henning;	state Exp;
branches;
next	1.192;

1.192
date	2003.03.04.15.40.40;	author henning;	state Exp;
branches;
next	1.191;

1.191
date	2003.03.03.22.12.24;	author deraadt;	state Exp;
branches;
next	1.190;

1.190
date	2003.03.02.12.44.42;	author henning;	state Exp;
branches;
next	1.189;

1.189
date	2003.03.02.12.37.49;	author dhartmei;	state Exp;
branches;
next	1.188;

1.188
date	2003.02.28.22.43.59;	author henning;	state Exp;
branches;
next	1.187;

1.187
date	2003.02.21.16.59.29;	author henning;	state Exp;
branches;
next	1.186;

1.186
date	2003.02.18.22.06.49;	author pb;	state Exp;
branches;
next	1.185;

1.185
date	2003.02.14.09.43.18;	author henning;	state Exp;
branches;
next	1.184;

1.184
date	2003.02.13.10.19.44;	author henning;	state Exp;
branches;
next	1.183;

1.183
date	2003.02.13.09.39.14;	author henning;	state Exp;
branches;
next	1.182;

1.182
date	2003.02.13.09.33.53;	author henning;	state Exp;
branches;
next	1.181;

1.181
date	2003.02.13.08.23.40;	author jmc;	state Exp;
branches;
next	1.180;

1.180
date	2003.02.12.13.27.20;	author mcbride;	state Exp;
branches;
next	1.179;

1.179
date	2003.02.10.11.26.30;	author jmc;	state Exp;
branches;
next	1.178;

1.178
date	2003.02.10.11.09.10;	author dhartmei;	state Exp;
branches;
next	1.177;

1.177
date	2003.02.08.20.13.19;	author dhartmei;	state Exp;
branches;
next	1.176;

1.176
date	2003.02.03.16.17.49;	author mpech;	state Exp;
branches;
next	1.175;

1.175
date	2003.02.02.23.38.31;	author henning;	state Exp;
branches;
next	1.174;

1.174
date	2003.02.02.22.47.18;	author henning;	state Exp;
branches;
next	1.173;

1.173
date	2003.02.01.14.37.04;	author mcbride;	state Exp;
branches;
next	1.172;

1.172
date	2003.01.30.15.05.37;	author henning;	state Exp;
branches;
next	1.171;

1.171
date	2003.01.25.17.49.37;	author cedric;	state Exp;
branches;
next	1.170;

1.170
date	2003.01.25.09.35.43;	author jmc;	state Exp;
branches;
next	1.169;

1.169
date	2003.01.24.20.39.54;	author jmc;	state Exp;
branches;
next	1.168;

1.168
date	2003.01.23.13.46.45;	author mcbride;	state Exp;
branches;
next	1.167;

1.167
date	2003.01.23.01.51.55;	author mcbride;	state Exp;
branches;
next	1.166;

1.166
date	2003.01.21.19.59.09;	author jmc;	state Exp;
branches;
next	1.165;

1.165
date	2003.01.15.23.19.19;	author henning;	state Exp;
branches;
next	1.164;

1.164
date	2003.01.10.10.08.54;	author cedric;	state Exp;
branches;
next	1.163;

1.163
date	2003.01.09.10.40.44;	author cedric;	state Exp;
branches;
next	1.162;

1.162
date	2002.12.30.23.58.46;	author mcbride;	state Exp;
branches;
next	1.161;

1.161
date	2002.12.30.11.26.20;	author dhartmei;	state Exp;
branches;
next	1.160;

1.160
date	2002.12.28.22.15.47;	author mcbride;	state Exp;
branches;
next	1.159;

1.159
date	2002.12.24.21.28.46;	author mcbride;	state Exp;
branches;
next	1.158;

1.158
date	2002.12.23.18.42.20;	author henning;	state Exp;
branches;
next	1.157;

1.157
date	2002.12.23.15.18.51;	author mcbride;	state Exp;
branches;
next	1.156;

1.156
date	2002.12.23.13.05.20;	author mcbride;	state Exp;
branches;
next	1.155;

1.155
date	2002.12.22.16.23.35;	author henning;	state Exp;
branches;
next	1.154;

1.154
date	2002.12.18.07.45.37;	author deraadt;	state Exp;
branches;
next	1.153;

1.153
date	2002.12.16.20.35.24;	author henning;	state Exp;
branches;
next	1.152;

1.152
date	2002.12.13.22.30.20;	author henning;	state Exp;
branches;
next	1.151;

1.151
date	2002.12.13.21.54.31;	author henning;	state Exp;
branches;
next	1.150;

1.150
date	2002.12.10.01.38.41;	author margarida;	state Exp;
branches;
next	1.149;

1.149
date	2002.12.10.00.33.33;	author margarida;	state Exp;
branches;
next	1.148;

1.148
date	2002.12.09.22.23.35;	author deraadt;	state Exp;
branches;
next	1.147;

1.147
date	2002.12.09.22.19.39;	author deraadt;	state Exp;
branches;
next	1.146;

1.146
date	2002.12.09.22.09.21;	author henning;	state Exp;
branches;
next	1.145;

1.145
date	2002.12.09.09.44.30;	author deraadt;	state Exp;
branches;
next	1.144;

1.144
date	2002.12.08.20.59.08;	author henning;	state Exp;
branches;
next	1.143;

1.143
date	2002.12.08.20.41.51;	author henning;	state Exp;
branches;
next	1.142;

1.142
date	2002.12.08.00.22.16;	author deraadt;	state Exp;
branches;
next	1.141;

1.141
date	2002.12.08.00.18.42;	author deraadt;	state Exp;
branches;
next	1.140;

1.140
date	2002.12.07.23.15.53;	author dhartmei;	state Exp;
branches;
next	1.139;

1.139
date	2002.12.07.22.58.40;	author deraadt;	state Exp;
branches;
next	1.138;

1.138
date	2002.12.06.00.47.32;	author dhartmei;	state Exp;
branches;
next	1.137;

1.137
date	2002.12.05.15.00.47;	author henning;	state Exp;
branches;
next	1.136;

1.136
date	2002.12.05.12.28.02;	author deraadt;	state Exp;
branches;
next	1.135;

1.135
date	2002.12.03.15.49.31;	author henning;	state Exp;
branches;
next	1.134;

1.134
date	2002.12.03.10.47.53;	author deraadt;	state Exp;
branches;
next	1.133;

1.133
date	2002.12.02.22.26.16;	author henning;	state Exp;
branches;
next	1.132;

1.132
date	2002.12.01.22.21.38;	author henning;	state Exp;
branches;
next	1.131;

1.131
date	2002.11.28.14.58.58;	author henning;	state Exp;
branches;
next	1.130;

1.130
date	2002.11.27.17.52.53;	author deraadt;	state Exp;
branches;
next	1.129;

1.129
date	2002.11.27.17.04.30;	author deraadt;	state Exp;
branches;
next	1.128;

1.128
date	2002.11.26.23.18.36;	author deraadt;	state Exp;
branches;
next	1.127;

1.127
date	2002.11.26.22.50.54;	author deraadt;	state Exp;
branches;
next	1.126;

1.126
date	2002.11.26.22.46.27;	author mcbride;	state Exp;
branches;
next	1.125;

1.125
date	2002.11.26.20.19.56;	author henning;	state Exp;
branches;
next	1.124;

1.124
date	2002.11.26.19.20.12;	author henning;	state Exp;
branches;
next	1.123;

1.123
date	2002.11.26.19.13.05;	author deraadt;	state Exp;
branches;
next	1.122;

1.122
date	2002.11.26.19.09.07;	author deraadt;	state Exp;
branches;
next	1.121;

1.121
date	2002.11.25.04.05.51;	author deraadt;	state Exp;
branches;
next	1.120;

1.120
date	2002.11.25.03.44.12;	author henning;	state Exp;
branches;
next	1.119;

1.119
date	2002.11.25.03.38.17;	author deraadt;	state Exp;
branches;
next	1.118;

1.118
date	2002.11.25.03.25.56;	author deraadt;	state Exp;
branches;
next	1.117;

1.117
date	2002.11.24.23.06.04;	author henning;	state Exp;
branches;
next	1.116;

1.116
date	2002.11.24.18.12.12;	author pb;	state Exp;
branches;
next	1.115;

1.115
date	2002.11.24.17.41.53;	author pb;	state Exp;
branches;
next	1.114;

1.114
date	2002.11.24.17.27.49;	author pb;	state Exp;
branches;
next	1.113;

1.113
date	2002.11.23.05.24.19;	author mcbride;	state Exp;
branches;
next	1.112;

1.112
date	2002.11.20.10.55.26;	author pb;	state Exp;
branches;
next	1.111;

1.111
date	2002.11.20.10.40.01;	author pb;	state Exp;
branches;
next	1.110;

1.110
date	2002.11.19.23.41.03;	author deraadt;	state Exp;
branches;
next	1.109;

1.109
date	2002.11.19.22.18.50;	author pb;	state Exp;
branches;
next	1.108;

1.108
date	2002.11.19.11.34.12;	author pb;	state Exp;
branches;
next	1.107;

1.107
date	2002.11.19.11.30.17;	author henning;	state Exp;
branches;
next	1.106;

1.106
date	2002.11.19.10.29.10;	author pb;	state Exp;
branches;
next	1.105;

1.105
date	2002.11.13.18.24.53;	author dhartmei;	state Exp;
branches;
next	1.104;

1.104
date	2002.11.08.08.08.47;	author mpech;	state Exp;
branches;
next	1.103;

1.103
date	2002.11.06.00.30.04;	author henning;	state Exp;
branches;
next	1.102;

1.102
date	2002.11.04.14.30.21;	author dhartmei;	state Exp;
branches;
next	1.101;

1.101
date	2002.10.31.10.51.03;	author pb;	state Exp;
branches;
next	1.100;

1.100
date	2002.10.31.09.18.24;	author henning;	state Exp;
branches;
next	1.99;

1.99
date	2002.10.27.13.56.59;	author pb;	state Exp;
branches;
next	1.98;

1.98
date	2002.10.14.19.37.51;	author deraadt;	state Exp;
branches;
next	1.97;

1.97
date	2002.10.14.13.07.32;	author henning;	state Exp;
branches;
next	1.96;

1.96
date	2002.10.14.12.59.40;	author henning;	state Exp;
branches;
next	1.95;

1.95
date	2002.10.14.09.21.34;	author henning;	state Exp;
branches;
next	1.94;

1.94
date	2002.10.13.15.51.55;	author henning;	state Exp;
branches;
next	1.93;

1.93
date	2002.10.09.14.37.01;	author henning;	state Exp;
branches;
next	1.92;

1.92
date	2002.10.07.12.39.29;	author dhartmei;	state Exp;
branches;
next	1.91;

1.91
date	2002.10.05.21.17.57;	author dhartmei;	state Exp;
branches;
next	1.90;

1.90
date	2002.10.04.10.15.37;	author henning;	state Exp;
branches;
next	1.89;

1.89
date	2002.09.30.23.41.46;	author frantzen;	state Exp;
branches;
next	1.88;

1.88
date	2002.09.28.22.49.19;	author deraadt;	state Exp;
branches;
next	1.87;

1.87
date	2002.09.26.08.30.36;	author henning;	state Exp;
branches;
next	1.86;

1.86
date	2002.09.18.16.28.47;	author henning;	state Exp;
branches;
next	1.85;

1.85
date	2002.09.18.16.14.31;	author henning;	state Exp;
branches;
next	1.84;

1.84
date	2002.09.15.19.36.22;	author henning;	state Exp;
branches;
next	1.83;

1.83
date	2002.09.15.19.30.54;	author henning;	state Exp;
branches;
next	1.82;

1.82
date	2002.09.12.13.47.20;	author henning;	state Exp;
branches;
next	1.81;

1.81
date	2002.09.12.12.17.05;	author henning;	state Exp;
branches;
next	1.80;

1.80
date	2002.09.12.12.14.35;	author henning;	state Exp;
branches;
next	1.79;

1.79
date	2002.09.06.09.46.52;	author henning;	state Exp;
branches;
next	1.78;

1.78
date	2002.08.10.15.40.05;	author pb;	state Exp;
branches;
next	1.77;

1.77
date	2002.08.08.15.16.42;	author pb;	state Exp;
branches;
next	1.76;

1.76
date	2002.08.04.14.27.48;	author pb;	state Exp;
branches;
next	1.75;

1.75
date	2002.07.30.17.28.54;	author pb;	state Exp;
branches;
next	1.74;

1.74
date	2002.07.30.16.35.15;	author pb;	state Exp;
branches;
next	1.73;

1.73
date	2002.07.30.13.53.57;	author pb;	state Exp;
branches;
next	1.72;

1.72
date	2002.07.30.11.55.31;	author pb;	state Exp;
branches;
next	1.71;

1.71
date	2002.07.30.11.21.46;	author pb;	state Exp;
branches;
next	1.70;

1.70
date	2002.07.30.09.25.00;	author pb;	state Exp;
branches;
next	1.69;

1.69
date	2002.07.30.08.56.07;	author pb;	state Exp;
branches;
next	1.68;

1.68
date	2002.07.30.08.55.12;	author pb;	state Exp;
branches;
next	1.67;

1.67
date	2002.07.29.22.40.45;	author pb;	state Exp;
branches;
next	1.66;

1.66
date	2002.07.21.21.28.06;	author deraadt;	state Exp;
branches;
next	1.65;

1.65
date	2002.07.05.14.32.45;	author henning;	state Exp;
branches;
next	1.64;

1.64
date	2002.07.04.10.51.18;	author henning;	state Exp;
branches;
next	1.63;

1.63
date	2002.07.01.23.10.33;	author dhartmei;	state Exp;
branches;
next	1.62;

1.62
date	2002.06.24.09.54.43;	author dhartmei;	state Exp;
branches;
next	1.61;

1.61
date	2002.06.20.12.04.54;	author dhartmei;	state Exp;
branches;
next	1.60;

1.60
date	2002.06.20.06.43.58;	author mpech;	state Exp;
branches;
next	1.59;

1.59
date	2002.06.20.06.21.40;	author mpech;	state Exp;
branches;
next	1.58;

1.58
date	2002.06.16.17.54.30;	author henning;	state Exp;
branches;
next	1.57;

1.57
date	2002.06.14.21.34.58;	author todd;	state Exp;
branches;
next	1.56;

1.56
date	2002.06.08.17.10.52;	author dhartmei;	state Exp;
branches;
next	1.55;

1.55
date	2002.06.08.08.46.49;	author henning;	state Exp;
branches;
next	1.54;

1.54
date	2002.06.08.08.12.31;	author dhartmei;	state Exp;
branches;
next	1.53;

1.53
date	2002.06.08.08.05.14;	author henning;	state Exp;
branches;
next	1.52;

1.52
date	2002.06.08.07.58.07;	author dhartmei;	state Exp;
branches;
next	1.51;

1.51
date	2002.06.08.04.36.18;	author henning;	state Exp;
branches;
next	1.50;

1.50
date	2002.06.07.22.53.45;	author pb;	state Exp;
branches;
next	1.49;

1.49
date	2002.06.07.21.25.36;	author dhartmei;	state Exp;
branches;
next	1.48;

1.48
date	2002.06.07.19.41.23;	author henning;	state Exp;
branches;
next	1.47;

1.47
date	2002.06.01.04.08.47;	author hugh;	state Exp;
branches;
next	1.46;

1.46
date	2002.05.12.15.02.52;	author dhartmei;	state Exp;
branches;
next	1.45;

1.45
date	2002.05.12.00.54.56;	author dhartmei;	state Exp;
branches;
next	1.44;

1.44
date	2002.05.09.21.58.12;	author jasoni;	state Exp;
branches;
next	1.43;

1.43
date	2002.05.09.19.58.42;	author dhartmei;	state Exp;
branches;
next	1.42;

1.42
date	2002.05.08.18.54.14;	author jasoni;	state Exp;
branches;
next	1.41;

1.41
date	2002.04.30.16.23.01;	author mpech;	state Exp;
branches;
next	1.40;

1.40
date	2002.04.24.18.10.25;	author dhartmei;	state Exp;
branches;
next	1.39;

1.39
date	2002.04.23.14.32.23;	author dhartmei;	state Exp;
branches;
next	1.38;

1.38
date	2002.04.17.17.25.35;	author dhartmei;	state Exp;
branches;
next	1.37;

1.37
date	2002.03.28.02.43.47;	author mickey;	state Exp;
branches;
next	1.36;

1.36
date	2002.03.27.18.16.17;	author mickey;	state Exp;
branches;
next	1.35;

1.35
date	2002.03.17.18.22.45;	author dhartmei;	state Exp;
branches;
next	1.34;

1.34
date	2002.03.07.13.17.40;	author dhartmei;	state Exp;
branches;
next	1.33;

1.33
date	2002.02.23.01.22.54;	author dhartmei;	state Exp;
branches;
next	1.32;

1.32
date	2002.02.19.12.18.24;	author dhartmei;	state Exp;
branches;
next	1.31;

1.31
date	2002.02.15.00.29.56;	author dhartmei;	state Exp;
branches;
next	1.30;

1.30
date	2002.01.27.02.08.08;	author frantzen;	state Exp;
branches;
next	1.29;

1.29
date	2002.01.09.11.30.53;	author dhartmei;	state Exp;
branches;
next	1.28;

1.28
date	2001.12.07.20.36.17;	author beck;	state Exp;
branches;
next	1.27;

1.27
date	2001.11.26.16.51.13;	author jasoni;	state Exp;
branches;
next	1.26;

1.26
date	2001.10.24.10.23.53;	author dhartmei;	state Exp;
branches;
next	1.25;

1.25
date	2001.10.15.16.22.22;	author dhartmei;	state Exp;
branches;
next	1.24;

1.24
date	2001.10.11.19.52.28;	author dhartmei;	state Exp;
branches;
next	1.23;

1.23
date	2001.10.11.19.02.19;	author dhartmei;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.09.13.49.18;	author dhartmei;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.07.11.56.57;	author dhartmei;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.19;

1.19
date	2001.10.01.19.04.16;	author dhartmei;	state Exp;
branches;
next	1.18;

1.18
date	2001.10.01.18.44.36;	author dhartmei;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.28.14.12.15;	author dhartmei;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.25.19.55.25;	author dhartmei;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.15.14.04.20;	author jakob;	state Exp;
branches;
next	1.14;

1.14
date	2001.09.15.03.54.40;	author frantzen;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.28.08.48.57;	author dhartmei;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.25.21.54.26;	author frantzen;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.19.16.44.39;	author dhartmei;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.31.09.02.18;	author wilfried;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.22.20.47.19;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.20.15.42.39;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.20.14.11.05;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.17.22.33.02;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.16.15.41.59;	author dhartmei;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.16.14.25.39;	author dhartmei;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.10.11.05.41;	author dhartmei;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.09.22.12.03;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.08.14.31.23;	author dhartmei;	state Exp;
branches;
next	;


desc
@@


1.557
log
@"hosts" is optional; from matthew martin
ok henning
@
text
@.\"	$OpenBSD: pf.conf.5,v 1.556 2017/01/04 09:56:08 tb Exp $
.\"
.\" Copyright (c) 2002, Daniel Hartmeier
.\" Copyright (c) 2003 - 2013 Henning Brauer <henning@@openbsd.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"    - Redistributions of source code must retain the above copyright
.\"      notice, this list of conditions and the following disclaimer.
.\"    - Redistributions in binary form must reproduce the above
.\"      copyright notice, this list of conditions and the following
.\"      disclaimer in the documentation and/or other materials provided
.\"      with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
.\" FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
.\" COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\" CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
.\" ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: January 4 2017 $
.Dt PF.CONF 5
.Os
.Sh NAME
.Nm pf.conf
.Nd packet filter configuration file
.Sh DESCRIPTION
The
.Xr pf 4
packet filter modifies, drops, or passes packets according to rules or
definitions specified in
.Nm .
.Pp
This is an overview of the sections in this manual page:
.Bl -inset
.It Sx PACKET FILTERING
including network address translation (NAT).
.It Sx OPTIONS
globally tune the behaviour of the packet filtering engine.
.It Sx QUEUEING
provides rule-based bandwidth control.
.It Sx TABLES
provide a method for dealing with large numbers of addresses.
.It Sx ANCHORS
are containers for rules and tables.
.It Sx STATEFUL FILTERING
tracks packets by state.
.It Sx TRAFFIC NORMALISATION
includes scrub, fragment handling, and blocking spoofed traffic.
.It Sx OPERATING SYSTEM FINGERPRINTING
is a method for detecting a host's operating system.
.It Sx EXAMPLES
provides some example rulesets.
.It Sx GRAMMAR
provides a complete BNF grammar reference.
.El
.Pp
The current line can be extended over multiple lines using a backslash
.Pq Sq \e .
Comments can be put anywhere in the file using a hash mark
.Pq Sq # ,
and extend to the end of the current line.
Care should be taken when commenting out multi-line text:
the comment is effective until the end of the entire block.
.Pp
Argument names not beginning with a letter, digit, or underscore
must be quoted.
.Pp
Additional configuration files can be included with the
.Ic include
keyword, for example:
.Bd -literal -offset indent
include "/etc/pf/sub.filter.conf"
.Ed
.Pp
Macros can be defined that will later be expanded in context.
Macro names must start with a letter, digit, or underscore,
and may contain any of those characters.
Macro names may not be reserved words (for example
.Ic pass ,
.Cm in ,
.Cm out ) .
Macros are not expanded inside quotes.
.Pp
For example:
.Bd -literal -offset indent
ext_if = "kue0"
all_ifs = "{" $ext_if lo0 "}"
pass out on $ext_if from any to any
pass in  on $ext_if proto tcp from any to any port 25
.Ed
.Sh PACKET FILTERING
.Xr pf 4
has the ability to
.Ic block ,
.Ic pass ,
and
.Ic match
packets based on attributes of their layer 3
and layer 4 headers.
Filter rules determine which of these actions are taken;
filter parameters specify the packets to which a rule applies.
.Pp
For each packet processed by the packet filter, the filter rules are
evaluated in sequential order, from first to last.
For
.Ic block
and
.Ic pass ,
the last matching rule decides what action is taken;
if no rule matches the packet, the default action is to pass
the packet without creating a state.
For
.Ic match ,
rules are evaluated every time they match;
the pass/block state of a packet remains unchanged.
.Pp
Most parameters are optional.
If a parameter is specified, the rule only applies to packets with
matching attributes.
Certain parameters can be expressed as lists, in which case
.Xr pfctl 8
generates all needed rule combinations.
.Pp
By default
.Xr pf 4
filters packets statefully:
the first time a packet matches a
.Ic pass
rule, a state entry is created.
The packet filter examines each packet to see if it matches an existing state.
If it does, the packet is passed without evaluation of any rules.
After the connection is closed or times out, the state entry is automatically
removed.
.Pp
The following actions can be used in the filter:
.Bl -tag -width Ds
.It Ic block
The packet is blocked.
There are a number of ways in which a
.Ic block
rule can behave when blocking a packet.
The default behaviour is to
.Cm drop
packets silently, however this can be overridden or made
explicit either globally, by setting the
.Cm block-policy
option, or on a per-rule basis with one of the following options:
.Pp
.Bl -tag -width return-icmp6 -compact
.It Cm drop
The packet is silently dropped.
.It Cm return
This causes a TCP RST to be returned for TCP packets
and an ICMP UNREACHABLE for other types of packets.
.It Cm return-icmp
.It Cm return-icmp6
This causes ICMP messages to be returned for packets which match the rule.
By default this is an ICMP UNREACHABLE message, however this
can be overridden by specifying a message as a code or number.
.It Cm return-rst
This applies only to TCP packets,
and issues a TCP RST which closes the connection.
An optional parameter,
.Cm ttl ,
may be given with a TTL value.
.El
.Pp
Options returning ICMP packets currently have no effect if
.Xr pf 4
operates on a
.Xr bridge 4 ,
as the code to support this feature has not yet been implemented.
.Pp
The simplest mechanism to block everything by default and only pass
packets that match explicit rules is specify a first filter rule of:
.Pp
.Dl block all
.It Ic match
The packet is matched.
This mechanism is used to provide fine grained filtering
without altering the block/pass state of a packet.
.Ic match
rules differ from
.Ic block
and
.Ic pass
rules in that parameters are set every time a packet matches the
rule, not only on the last matching rule.
For the following parameters,
this means that the parameter effectively becomes
.Dq sticky
until explicitly overridden:
.Cm nat-to ,
.Cm binat-to ,
.Cm rdr-to ,
.Cm queue ,
.Cm rtable ,
and
.Cm scrub .
.Pp
.Cm log
is different still,
in that the action happens every time a rule matches
i.e. a single packet can get logged more than once.
.It Ic pass
The packet is passed;
state is created unless the
.Cm no state
option is specified.
.El
.Pp
The following parameters can be used in the filter:
.Bl -tag -width Ds
.It Cm in No or Cm out
A packet always comes in on, or goes out through, one interface.
.Cm in
and
.Cm out
apply to incoming and outgoing packets;
if neither are specified,
the rule will match packets in both directions.
.It Cm log Pq Cm all | matches | to Ar interface | Cm user
In addition to any action specified,
log the packet.
Only the packet that establishes the state is logged,
unless the
.Cm no state
option is specified.
The logged packets are sent to a
.Xr pflog 4
interface, by default
.Pa pflog0 ;
pflog0 is monitored by the
.Xr pflogd 8
logging daemon which logs to the file
.Pa /var/log/pflog
in
.Xr pcap 3
binary format.
.Pp
The keywords
.Cm all , matches , to ,
and
.Cm user
are optional and can be combined using commas,
but must be enclosed in parentheses if given.
.Pp
Use
.Cm all
to force logging of all packets for a connection.
This is not necessary when
.Cm no state
is explicitly specified.
.Pp
If
.Cm matches
is specified,
it logs the packet on all subsequent matching rules.
It is often combined with
.Cm to Ar interface
to avoid adding noise to the default log file.
.Pp
The keyword
.Cm user
logs the UID and PID of the
socket on the local host used to send or receive a packet,
in addition to the normal information.
.Pp
To specify a logging interface other than
.Pa pflog0 ,
use the syntax
.Cm to Ar interface .
.It Cm quick
If a packet matches a rule which has the
.Cm quick
option set, this rule
is considered the last matching rule, and evaluation of subsequent rules
is skipped.
.It Cm on Ar interface | Cm any
This rule applies only to packets coming in on, or going out through, this
particular interface or interface group.
For more information on interface groups,
see the
.Ic group
keyword in
.Xr ifconfig 8 .
.Cm any
will match any existing interface except loopback ones.
.It Cm on rdomain Ar number
This rule applies only to packets coming in on, or going out through, this
particular routing domain.
.It Cm inet | inet6
This rule applies only to packets of this address family.
.It Cm proto Ar protocol
This rule applies only to packets of this protocol.
Common protocols are ICMP, ICMP6, TCP, and UDP.
For a list of all the protocol name to number mappings used by
.Xr pfctl 8 ,
see the file
.Pa /etc/protocols .
.It Xo
.Cm from Ar source
.Cm port Ar source
.Cm os Ar source
.Cm to Ar dest
.Cm port Ar dest
.Xc
This rule applies only to packets with the specified source and destination
addresses and ports.
.Pp
Addresses can be specified in CIDR notation (matching netblocks), as
symbolic host names, interface names or interface group names, or as any
of the following keywords:
.Pp
.Bl -tag -width urpf-failed -compact
.It Cm any
Any address.
.It Cm no-route
Any address which is not currently routable.
.It Cm route Ar label
Any address matching the given
.Xr route 8
.Ar label .
.It Cm self
Expands to all addresses assigned to all interfaces.
.It Pf < Ar table Ns >
Any address matching the given
.Ar table .
.It Cm urpf-failed
Any source address that fails a unicast reverse path forwarding (URPF)
check, i.e. packets coming in on an interface other than that which holds
the route back to the packet's source address.
.El
.Pp
Ranges of addresses are specified using the
.Sq -
operator.
For instance:
.Dq 10.1.1.10 - 10.1.1.12
means all addresses from 10.1.1.10 to 10.1.1.12,
hence addresses 10.1.1.10, 10.1.1.11, and 10.1.1.12.
.Pp
Interface names, interface group names, and
.Cm self
can have modifiers appended:
.Pp
.Bl -tag -width :broadcast -compact
.It Cm :0
Do not include interface aliases.
.It Cm :broadcast
Translates to the interface's broadcast address(es).
.It Cm :network
Translates to the network(s) attached to the interface.
.It Cm :peer
Translates to the point-to-point interface's peer address(es).
.El
.Pp
Host names may also have the
.Cm :0
modifier appended to restrict the name resolution to the first of each
v4 and v6 address found.
.Pp
Host name resolution and interface to address translation are done at
ruleset load-time.
When the address of an interface (or host name) changes (under DHCP or PPP,
for instance), the ruleset must be reloaded for the change to be reflected
in the kernel.
Surrounding the interface name (and optional modifiers) in parentheses
changes this behaviour.
When the interface name is surrounded by parentheses, the rule is
automatically updated whenever the interface changes its address.
The ruleset does not need to be reloaded.
This is especially useful with NAT.
.Pp
Ports can be specified either by number or by name.
For example, port 80 can be specified as
.Cm www .
For a list of all port name to number mappings used by
.Xr pfctl 8 ,
see the file
.Pa /etc/services .
.Pp
Ports and ranges of ports are specified using these operators:
.Bd -literal -offset indent
=	(equal)
!=	(unequal)
<	(less than)
<=	(less than or equal)
>	(greater than)
>=	(greater than or equal)
:	(range including boundaries)
><	(range excluding boundaries)
<>	(except range)
.Ed
.Pp
.Sq >< ,
.Sq <>
and
.Sq \&:
are binary operators (they take two arguments).
For instance:
.Bl -tag -width Ds
.It Li port 2000:2004
means
.Sq all ports \(>= 2000 and \(<= 2004 ,
hence ports 2000, 2001, 2002, 2003, and 2004.
.It Li port 2000 >< 2004
means
.Sq all ports > 2000 and < 2004 ,
hence ports 2001, 2002, and 2003.
.It Li port 2000 <> 2004
means
.Sq all ports < 2000 or > 2004 ,
hence ports 1\(en1999 and 2005\(en65535.
.El
.Pp
The operating system of the source host can be specified in the case of TCP
rules with the
.Cm os
modifier.
See the
.Sx OPERATING SYSTEM FINGERPRINTING
section for more information.
.Pp
The
.Cm host ,
.Cm port ,
and
.Cm os
specifications are optional, as in the following examples:
.Bd -literal -offset indent
pass in all
pass in from any to any
pass in proto tcp from any port < 1024 to any
pass in proto tcp from any to any port 25
pass in proto tcp from 10.0.0.0/8 port >= 1024 \e
      to ! 10.1.2.3 port != ssh
pass in proto tcp from any os "OpenBSD"
pass in proto tcp from route "DTAG"
.Ed
.El
.Pp
The following additional parameters can be used in the filter:
.Pp
.Bl -tag -width Ds -compact
.It Cm all
This is equivalent to
.Ql from any to any .
.Pp
.It Cm allow-opts
By default, IPv4 packets with IP options or IPv6 packets with routing
extension headers are blocked.
When
.Cm allow-opts
is specified for a
.Ic pass
rule, packets that pass the filter based on that rule (last matching)
do so even if they contain IP options or routing extension headers.
For packets that match state, the rule that initially created the
state is used.
The implicit pass rule that is used when a packet does not match
any rules does not allow IP options.
.Pp
.It Cm divert-packet port Ar port
Used to send matching packets to
.Xr divert 4
sockets bound to port
.Ar port .
If the default option of fragment reassembly is enabled, scrubbing with
.Cm reassemble tcp
is also enabled for
.Cm divert-packet
rules.
.Pp
.It Cm divert-reply
Used to receive replies for sockets that are bound to addresses
which are not local to the machine.
See
.Xr setsockopt 2
for information on how to bind these sockets.
.Pp
.It Cm divert-to Ar host Cm port Ar port
Used to redirect packets to a local socket bound to
.Ar host
and
.Ar port .
The packets will not be modified, so
.Xr getsockname 2
on the socket will return the original destination address of the packet.
.Pp
.It Cm flags Ar a Ns / Ns Ar b | Cm any
This rule only applies to TCP packets that have the flags
.Ar a
set out of set
.Ar b .
Flags not specified in
.Ar b
are ignored.
For stateful connections, the default is
.Cm flags S/SA .
To indicate that flags should not be checked at all, specify
.Cm flags any .
The flags are: (F)IN, (S)YN, (R)ST, (P)USH, (A)CK, (U)RG, (E)CE, and C(W)R.
.Bl -tag -width "flags /SFRA"
.It Cm flags S/S
Flag SYN is set.
The other flags are ignored.
.It Cm flags S/SA
This is the default setting for stateful connections.
Out of SYN and ACK, exactly SYN may be set.
SYN, SYN+PSH, and SYN+RST match, but SYN+ACK, ACK, and ACK+RST do not.
This is more restrictive than the previous example.
.It Cm flags /SFRA
If the first set is not specified, it defaults to none.
All of SYN, FIN, RST, and ACK must be unset.
.El
.Pp
Because
.Cm flags S/SA
is applied by default (unless
.Cm no state
is specified), only the initial SYN packet of a TCP handshake will create
a state for a TCP connection.
It is possible to be less restrictive, and allow state creation from
intermediate
.Pq non-SYN
packets, by specifying
.Cm flags any .
This will cause
.Xr pf 4
to synchronize to existing connections, for instance
if one flushes the state table.
However, states created from such intermediate packets may be missing
connection details such as the TCP window scaling factor.
States which modify the packet flow, such as those affected by
.Cm af-to ,
.Cm modulate state ,
.Cm nat-to ,
.Cm rdr-to ,
or
.Cm synproxy state
options, or scrubbed with
.Cm reassemble tcp ,
will also not be recoverable from intermediate packets.
Such connections will stall and time out.
.Pp
.It Cm group Ar group
Similar to
.Cm user ,
this rule only applies to packets of sockets owned by the specified
.Ar group .
.Pp
.It Cm icmp-type Ar type Cm code Ar code
.It Cm icmp6-type Ar type Cm code Ar code
This rule only applies to ICMP or ICMP6 packets with the specified type
and code.
Text names for ICMP types and codes are listed in
.Xr icmp 4
and
.Xr icmp6 4 .
The protocol and the ICMP type indicator
.Po
.Cm icmp-type
or
.Cm icmp6-type
.Pc
must match.
.Pp
.It Cm label Ar string
Adds a label to the rule, which can be used to identify the rule.
For instance,
.Ql pfctl -s labels
shows per-rule statistics for rules that have labels.
.Pp
The following macros can be used in labels:
.Pp
.Bl -tag -width "$srcaddrXXX" -compact -offset indent
.It Va $dstaddr
The destination IP address.
.It Va $dstport
The destination port specification.
.It Va $if
The interface.
.It Va $nr
The rule number.
.It Va $proto
The protocol name.
.It Va $srcaddr
The source IP address.
.It Va $srcport
The source port specification.
.El
.Pp
For example:
.Bd -literal -offset indent -compact
ips = "{ 1.2.3.4, 1.2.3.5 }"
pass in proto tcp from any to $ips \e
      port > 1023 label "$dstaddr:$dstport"
.Ed
.Pp
Expands to:
.Bd -literal -offset indent -compact
pass in inet proto tcp from any to 1.2.3.4 \e
      port > 1023 label "1.2.3.4:>1023"
pass in inet proto tcp from any to 1.2.3.5 \e
      port > 1023 label "1.2.3.5:>1023"
.Ed
.Pp
The macro expansion for the
.Cm label
directive occurs only at configuration file parse time, not during runtime.
.Pp
.It Cm once
Creates a one shot rule that will remove itself from an active ruleset after
the first match.
In case this is the only rule in the anchor, the anchor will be destroyed
automatically after the rule is matched.
.Pp
.It Cm probability Ar number Ns %
A probability attribute can be attached to a rule,
with a value set between 0 and 100%,
in which case the rule is honoured using the given probability value.
For example, the following rule will drop 20% of incoming ICMP packets:
.Pp
.Dl block in proto icmp probability 20%
.Pp
.It Cm prio Ar number
Only match packets which have the given queueing priority assigned.
.Pp
.It Cm received-on Ar interface
Only match packets which were received on the specified
.Cm interface
(or interface group).
.Cm any
will match any existing interface except loopback ones.
.Pp
.It Cm rtable Ar number
Used to select an alternate routing table for the routing lookup.
Only effective before the route lookup happened, i.e. when filtering inbound.
.Pp
.It Cm set prio Ar priority | Pq Ar priority , priority
Packets matching this rule will be assigned a specific queueing priority.
Priorities are assigned as integers 0 through 7,
with a default priority of 3.
If the packet is transmitted on a
.Xr vlan 4
interface, the queueing priority will also be written as the priority
code point in the 802.1Q VLAN header.
If two priorities are given, packets which have a TOS of
.Cm lowdelay
and TCP ACKs with no data payload will be assigned to the second one.
Packets with a higher priority number are processed first,
and packets with the same priority are processed
in the order in which they are received.
.Pp
For example:
.Bd -literal -offset indent
pass in proto tcp to port 25 set prio 2
pass in proto tcp to port 22 set prio (2, 5)
.Ed
.Pp
The interface priority queues accessed by the
.Cm set prio
keyword are always enabled and do not require any additional
configuration, unlike the queues described below and in the
.Sx QUEUEING
section.
.Pp
.It Cm set queue Ar queue | Pq Ar queue , queue
Packets matching this rule will be assigned to the specified
.Ar queue .
If two queues are given, packets which have a TOS of
.Cm lowdelay
and TCP ACKs with no data payload will be assigned to the second one.
See
.Sx QUEUEING
for setup details.
.Pp
For example:
.Bd -literal -offset indent
pass in proto tcp to port 25 set queue mail
pass in proto tcp to port 22 set queue(ssh_bulk, ssh_prio)
.Ed
.Pp
.It Cm set tos Ar string | number
Enforces a TOS for matching packets.
.Ar string
may be one of
.Cm critical ,
.Cm inetcontrol ,
.Cm lowdelay ,
.Cm netcontrol ,
.Cm throughput ,
.Cm reliability ,
or one of the DiffServ Code Points:
.Cm ef ,
.Cm af11 No ... Cm af43 ,
.Cm cs0 No ... Cm cs7 ;
.Ar number
may be either a hex or decimal number.
.Pp
.It Cm tag Ar string
Packets matching this rule will be tagged with the specified
.Ar string .
The tag acts as an internal marker that can be used to
identify these packets later on.
This can be used, for example, to provide trust between
interfaces and to determine if packets have been
processed by translation rules.
Tags are
.Dq sticky ,
meaning that the packet will be tagged even if the rule
is not the last matching rule.
Further matching rules can replace the tag with a
new one but will not remove a previously applied tag.
A packet is only ever assigned one tag at a time.
Tags take the same macros as labels (see above).
.Pp
.It Oo Cm \&! Oc Ns Cm tagged Ar string
Used with filter or translation rules
to specify that packets must already
be tagged with the given
.Ar string
in order to match the rule.
Inverse tag matching can also be done
by specifying the
.Cm !\&
operator before the
.Cm tagged
keyword.
.Pp
.It Cm tos Ar string | number
This rule applies to packets with the specified TOS bits set.
.Ar string
may be one of
.Cm critical ,
.Cm inetcontrol ,
.Cm lowdelay ,
.Cm netcontrol ,
.Cm throughput ,
.Cm reliability ,
or one of the DiffServ Code Points:
.Cm ef ,
.Cm af11 No ... Cm af43 ,
.Cm cs0 No ... Cm cs7 ;
.Ar number
may be either a hex or decimal number.
.Pp
For example, the following rules are identical:
.Bd -literal -offset indent
pass all tos lowdelay
pass all tos 0x10
pass all tos 16
.Ed
.Pp
.It Cm user Ar user
This rule only applies to packets of sockets owned by the specified
.Ar user .
For outgoing connections initiated from the firewall, this is the user
that opened the connection.
For incoming connections to the firewall itself, this is the user that
listens on the destination port.
.Pp
When listening sockets are bound to the wildcard address,
.Xr pf 4
cannot determine if a connection is destined for the firewall itself.
To avoid false matches on just the destination port, combine a
.Cm user
rule with source or destination address
.Cm self .
.Pp
All packets, both outgoing and incoming, of one connection are associated
with the same user and group.
Only TCP and UDP packets can be associated with users.
.Pp
The
.Ar user
and
.Ar group
arguments refer to the effective (as opposed to the real) IDs, in
case the socket is created by a setuid/setgid process.
User and group IDs are stored when a socket is created;
when a process creates a listening socket as root (for instance, by
binding to a privileged port) and subsequently changes to another
user ID (to drop privileges), the credentials will remain root.
.Pp
User and group IDs can be specified as either numbers or names.
The syntax is similar to the one for ports.
The following example allows only selected users to open outgoing
connections:
.Bd -literal -offset indent
block out proto tcp all
pass  out proto tcp from self user { < 1000, dhartmei }
.Ed
.El
.Ss Translation
Translation options modify either the source or destination address and
port of the packets associated with a stateful connection.
.Xr pf 4
modifies the specified address and/or port in the packet and recalculates
IP, TCP, and UDP checksums as necessary.
.Pp
Subsequent rules will see packets as they look
after any addresses and ports have been translated.
These rules will therefore have to filter based on the translated
address and port number.
.Pp
The state entry created permits
.Xr pf 4
to keep track of the original address for traffic associated with that state
and correctly direct return traffic for that connection.
.Pp
Different types of translation are possible with pf:
.Bl -tag -width binat-to
.It Cm af-to
Translation between different address families (NAT64) is handled
using
.Cm af-to
rules.
Because address family translation overrides the routing table, it's
only possible to use
.Cm af-to
on inbound rules, and a source address for the resulting translation
must always be specified.
.Pp
The optional second argument is the host or subnet the original
addresses are translated into for the destination.
The lowest bits of the original destination address form the host
part of the new destination address according to the specified subnet.
It is possible to embed a complete IPv4 address into an IPv6 address
using a network prefix of /96 or smaller.
.Pp
When a destination address is not specified it is assumed that the host
part is 32-bit long.
For IPv6 to IPv4 translation this would mean using only the lower 32
bits of the original IPv6 destination address.
For IPv4 to IPv6 translation the destination subnet defaults to the
subnet of the new IPv6 source address with a prefix length of /96.
See RFC 6052 Section 2.2 for details on how the prefix determines the
destination address encoding.
.Pp
For example, the following rules are identical:
.Bd -literal -offset indent
pass in inet af-to inet6 from 2001:db8::1 to 2001:db8::/96
pass in inet af-to inet6 from 2001:db8::1
.Ed
.Pp
In the above example the matching IPv4 packets will be modified to
have a source address of 2001:db8::1 and a destination address will
get prefixed with 2001:db8::/96, e.g. 198.51.100.100 will be
translated to 2001:db8::c633:6464.
.Pp
In the reverse case the following rules are identical:
.Bd -literal -offset indent
pass in inet6 from any to 64:ff9b::/96 af-to inet \e
	from 198.51.100.1 to 0.0.0.0/0
pass in inet6 from any to 64:ff9b::/96 af-to inet \e
	from 198.51.100.1
.Ed
.Pp
The destination IPv4 address is assumed to be embedded inside the
original IPv6 destination address, e.g. 64:ff9b::c633:6464 will be
translated to 198.51.100.100.
.Pp
The current implementation will only extract IPv4 addresses from the
IPv6 addresses with a prefix length of /96 and greater.
.It Cm binat-to
A
.Cm binat-to
rule specifies a bidirectional mapping between an external IP
netblock and an internal IP netblock.
It expands to an outbound
.Cm nat-to
rule and an inbound
.Cm rdr-to
rule.
.It Cm nat-to
A
.Cm nat-to
option specifies that IP addresses are to be changed as the packet
traverses the given interface.
This technique allows one or more IP addresses
on the translating host to support network traffic for a larger range of
machines on an
.Dq inside
network.
Although in theory any IP address can be used on the inside, it is strongly
recommended that one of the address ranges defined by RFC 1918 be used.
Those netblocks are:
.Bd -literal -offset indent
10.0.0.0 \(en 10.255.255.255 (all of net 10, i.e. 10/8)
172.16.0.0 \(en 172.31.255.255 (i.e. 172.16/12)
192.168.0.0 \(en 192.168.255.255 (i.e. 192.168/16)
.Ed
.Pp
.Cm nat-to
is usually applied outbound.
If applied inbound, nat-to to a local IP address is not supported.
.It Cm rdr-to
The packet is redirected to another destination and possibly a
different port.
.Cm rdr-to
can optionally specify port ranges instead of single ports.
For instance:
.Bl -tag -width Ds
.It match in ... port 2000:2999 rdr-to ... port 4000
redirects ports 2000 to 2999 (inclusive) to port 4000.
.It match in ... port 2000:2999 rdr-to ... port 4000:*
redirects port 2000 to 4000, port 2001 to 4001, ..., port 2999 to 4999.
.El
.Pp
.Cm rdr-to
is usually applied inbound.
If applied outbound, rdr-to to a local IP address is not supported.
.El
.Pp
In addition to modifying the address, some translation rules may modify
source or destination ports for TCP or UDP connections;
implicitly in the case of
.Cm nat-to
options and explicitly in the case of
.Cm rdr-to
ones.
Port numbers are never translated with a
.Cm binat-to
rule.
.Pp
Translation options apply only to packets that pass through the specified
interface, and if no interface is specified, translation is applied
to packets on all interfaces.
For instance, redirecting port 80 on an external interface to an internal
web server will only work for connections originating from the outside.
Connections to the address of the external interface from local hosts will
not be redirected, since such packets do not actually pass through the
external interface.
Redirections cannot reflect packets back through the interface they arrive
on, they can only be redirected to hosts connected to different interfaces
or to the firewall itself.
.Pp
However packets may be redirected to hosts connected to the interface the
packet arrived on by using redirection with NAT.
For example:
.Bd -literal -offset indent
pass in on $int_if proto tcp from $int_net to $ext_if port 80 \e
	rdr-to $server
pass out on $int_if proto tcp to $server port 80 \e
	received-on $int_if nat-to $int_if
.Ed
.Pp
Note that redirecting external incoming connections to the loopback address
will effectively allow an external host to connect to daemons
bound solely to the loopback address, circumventing the traditional
blocking of such connections on a real interface.
For example:
.Bd -literal -offset indent
pass in on egress proto tcp from any to any port smtp \e
	rdr-to 127.0.0.1 port spamd
.Ed
.Pp
Unless this effect is desired, any of the local non-loopback addresses
should be used instead as the redirection target, which allows external
connections only to daemons bound to this address or not bound to
any address.
.Pp
For
.Cm af-to ,
.Cm nat-to
and
.Cm rdr-to
options for which there is a single redirection address which has a
subnet mask smaller than 32 for IPv4 or 128 for IPv6 (more than one IP
address), a variety of different methods for assigning this address can be
used:
.Bl -tag -width xxxx
.It Cm bitmask
The
.Cm bitmask
option applies the network portion of the redirection address to the address
to be modified (source with
.Cm nat-to ,
destination with
.Cm rdr-to ) .
.It Cm least-states Op Cm sticky-address
The
.Cm least-states
option selects the address with the least active states from
a given address pool and considers given weights
associated with address(es).
Weights can be specified between 1 and 65535.
Addresses with higher weights are selected more often.
.Pp
.Cm sticky-address
can be specified to ensure that multiple connections from the
same source are mapped to the same redirection address.
Associations are destroyed as soon as there are
no longer states which refer to them;
in order to make the mappings last
beyond the lifetime of the states,
increase the global options with
.Ic set Cm timeout src.track .
.It Cm random Op Cm sticky-address
The
.Cm random
option selects an address at random within the defined block of addresses.
.Cm sticky-address
is as described above.
.It Cm round-robin Op Cm sticky-address
The
.Cm round-robin
option loops through the redirection address(es) and considers given weights
associated with address(es).
Weights can be specified between 1 and 65535.
Addresses with higher weights are selected more often.
.Cm sticky-address
is as described above.
.It Cm source-hash Op Ar key
The
.Cm source-hash
option uses a hash of the source address to determine the redirection address,
ensuring that the redirection address is always the same for a given source.
An optional
.Ar key
can be specified after this keyword either in hex or as a string;
by default
.Xr pfctl 8
randomly generates a key for source-hash every time the
ruleset is reloaded.
.It Cm static-port
With
.Cm nat-to
rules, the
.Cm static-port
option prevents
.Xr pf 4
from modifying the source port on TCP and UDP packets.
.El
.Pp
When more than one redirection address or a table is specified,
.Cm bitmask
is not permitted as a pool type.
.Ss Routing
If a packet matches a rule with one of the following route options set,
the packet filter will route the packet according to the type of route option.
When such a rule creates state, the route option is also applied to all
packets matching the same connection.
.Bl -tag -width route-to
.It Cm dup-to
The
.Cm dup-to
option creates a duplicate of the packet and routes it like
.Cm route-to .
The original packet gets routed as it normally would.
.It Cm reply-to
The
.Cm reply-to
option is similar to
.Cm route-to ,
but routes packets that pass in the opposite direction (replies) to the
specified interface.
Opposite direction is only defined in the context of a state entry, and
.Cm reply-to
is useful only in rules that create state.
It can be used on systems with multiple external connections to
route all outgoing packets of a connection through the interface
the incoming connection arrived through (symmetric routing enforcement).
.It Cm route-to
The
.Cm route-to
option routes the packet to the specified interface with an optional address
for the next hop.
When a
.Cm route-to
rule creates state, only packets that pass in the same direction as the
filter rule specifies will be routed in this way.
Packets passing in the opposite direction (replies) are not affected
and are routed normally.
.El
.Pp
For the
.Cm dup-to ,
.Cm reply-to ,
and
.Cm route-to
route options
for which there is a single redirection address which has a
subnet mask smaller than 32 for IPv4 or 128 for IPv6 (more than one IP
address),
the methods
.Cm least-states ,
.Cm random ,
.Cm round-robin ,
and
.Cm source-hash ,
as described above,
can be used.
.Sh OPTIONS
.Xr pf 4
may be tuned for various situations using the
.Ic set
command.
.Bl -tag -width Ds
.It Ic set Cm block-policy drop | return
The
.Cm block-policy
option sets the default behaviour for the packet
.Ic block
action:
.Pp
.Bl -tag -width return -compact
.It Cm drop
Packet is silently dropped.
.It Cm return
A TCP RST is returned for blocked TCP packets,
an ICMP UNREACHABLE is returned for blocked UDP packets,
and all other packets are silently dropped.
.El
.It Ic set Cm debug Ar level
Set the debug
.Ar level ,
which limits the severity of log messages printed by
.Xr pf 4 .
This should be a keyword from the following ordered list
(highest to lowest):
.Cm emerg ,
.Cm alert ,
.Cm crit ,
.Cm err ,
.Cm warning ,
.Cm notice ,
.Cm info ,
and
.Cm debug .
These keywords correspond to the similar (LOG_) values specified to the
.Xr syslog 3
library routine.
.It Cm set Cm fingerprints Ar filename
Load fingerprints of known operating systems from the given
.Ar filename .
By default fingerprints of known operating systems are automatically
loaded from
.Xr pf.os 5 ,
but can be overridden via this option.
Setting this option may leave a small period of time where the fingerprints
referenced by the currently active ruleset are inconsistent until the new
ruleset finishes loading.
.It Ic set Cm hostid Ar number
The 32-bit hostid
.Ar number
identifies this firewall's state table entries to other firewalls
in a
.Xr pfsync 4
failover cluster.
By default the hostid is set to a pseudo-random value, however it may be
desirable to manually configure it, for example to more easily identify the
source of state table entries.
The hostid may be specified in either decimal or hexadecimal.
.It Ic set Cm limit Ar limit-item number
Sets hard limits on the memory pools used by the packet filter.
See
.Xr pool 9
for an explanation of memory pools.
.Pp
For example,
to set the maximum number of entries in the memory pool used by state table
entries (generated by
.Ic pass
rules which do not specify
.Cm no state )
to 20000:
.Pp
.Dl set limit states 20000
.Pp
To set the maximum number of entries in the memory pool used for fragment
reassembly to 2000:
.Pp
.Dl set limit frags 2000
.Pp
This maximum may not exceed, and should be well below, the maximum number
of mbuf clusters
.Pq sysctl kern.maxclusters
in the system.
.Pp
To set the maximum number of entries in the memory pool used for tracking
source IP addresses (generated by the
.Cm sticky-address
and
.Cm src.track
options) to 2000:
.Pp
.Dl set limit src-nodes 2000
.Pp
To set limits on the memory pools used by tables:
.Bd -literal -offset indent
set limit tables 1000
set limit table-entries 100000
.Ed
.Pp
The first limits the number of tables that can exist to 1000.
The second limits the overall number of addresses that can be stored
in tables to 100000.
.Pp
Various limits can be combined on a single line:
.Bd -literal -offset indent
set limit { states 20000, frags 2000, src-nodes 2000 }
.Ed
.It Ic set Cm loginterface Ar interface | Cm none
Enable collection of packet and byte count statistics for the given
interface or interface group.
These statistics can be viewed using:
.Pp
.Dl # pfctl -s info
.Pp
In this example
.Xr pf 4
collects statistics on the interface named dc0:
.Pp
.Dl set loginterface dc0
.Pp
One can disable the loginterface using:
.Pp
.Dl set loginterface none
.It Ic set Cm optimization Ar environment
Optimize state timeouts for one of the following network environments:
.Pp
.Bl -tag -width Ds -compact
.It Cm aggressive
Aggressively expire connections.
This can greatly reduce the memory usage of the firewall at the cost of
dropping idle connections early.
.It Cm conservative
Extremely conservative settings.
Avoid dropping legitimate connections at the
expense of greater memory utilization (possibly much greater on a busy
network) and slightly increased processor utilization.
.It Cm high-latency
A high-latency environment (such as a satellite connection).
.It Cm normal
A normal network environment.
Suitable for almost all networks.
.It Cm satellite
Alias for
.Cm high-latency .
.El
.It Ic set Cm reassemble yes | no Op Cm no-df
The
.Cm reassemble
option is used to enable or disable the reassembly of fragmented packets,
and can be set to
.Cm yes
(the default) or
.Cm no .
If
.Cm no-df
is also specified, fragments with the
.Dq dont-fragment
bit set are reassembled too,
instead of being dropped;
the reassembled packet will have the
.Dq dont-fragment
bit cleared.
.It Ic set Cm ruleset-optimization Ar level
.Bl -tag -width profile -compact
.It Cm basic
Enable basic ruleset optimization.
This is the default behaviour.
Basic ruleset optimization does four things to improve the
performance of ruleset evaluations:
.Pp
.Bl -enum -compact
.It
remove duplicate rules
.It
remove rules that are a subset of another rule
.It
combine multiple rules into a table when advantageous
.It
reorder the rules to improve evaluation performance
.El
.Pp
.It Cm none
Disable the ruleset optimizer.
.It Cm profile
Uses the currently loaded ruleset as a feedback profile to tailor the
ordering of
.Cm quick
rules to actual network traffic.
.El
.Pp
It is important to note that the ruleset optimizer will modify the ruleset
to improve performance.
A side effect of the ruleset modification is that per-rule accounting
statistics will have different meanings than before.
If per-rule accounting is important for billing purposes or whatnot,
either the ruleset optimizer should not be used or a label field should
be added to all of the accounting rules to act as optimization barriers.
.Pp
Optimization can also be set as a command-line argument to
.Xr pfctl 8 ,
overriding the settings in
.Nm .
.It Ic set Cm skip on Ar ifspec
List interfaces for which packets should not be filtered.
Packets passing in or out on such interfaces are passed as if pf was
disabled, i.e. pf does not process them in any way.
This can be useful on loopback and other virtual interfaces, when
packet filtering is not desired and can have unexpected effects.
.Ar ifspec
is only evaluated when the ruleset is loaded; interfaces created
later will not be skipped.
.It Ic set Cm state-defaults Ar state-option , ...
The
.Cm state-defaults
option sets the state options for states created from rules
without an explicit
.Cm keep state .
For example:
.Pp
.Dl set state-defaults pflow, no-sync
.It Ic set Cm state-policy if-bound | floating
The
.Cm state-policy
option sets the default behaviour for states:
.Pp
.Bl -tag -width if-bound -compact
.It Cm if-bound
States are bound to an interface.
.It Cm floating
States can match packets on any interfaces (the default).
.El
.It Ic set Cm timeout Ar variable value
.Bl -tag -width "src.track" -compact
.It Cm frag
Seconds before an unassembled fragment is expired.
.It Cm interval
Interval between purging expired states and fragments.
.It Cm src.track
Length of time to retain a source tracking entry after the last state
expires.
.El
.Pp
When a packet matches a stateful connection, the seconds to live for the
connection will be updated to that of the
protocol and modifier
which corresponds to the connection state.
Each packet which matches this state will reset the TTL.
Tuning these values may improve the performance of the
firewall at the risk of dropping valid idle connections.
.Pp
.Bl -tag -width Ds -compact
.It Cm tcp.closed
The state after one endpoint sends an RST.
.It Cm tcp.closing
The state after the first FIN has been sent.
.It Cm tcp.established
The fully established state.
.It Cm tcp.finwait
The state after both FINs have been exchanged and the connection is closed.
Some hosts (notably web servers on Solaris) send TCP packets even after closing
the connection.
Increasing
.Cm tcp.finwait
(and possibly
.Cm tcp.closing )
can prevent blocking of such packets.
.It Cm tcp.first
The state after the first packet.
.It Cm tcp.opening
The state after the second packet but before both endpoints have
acknowledged the connection.
.El
.Pp
ICMP and UDP are handled in a fashion similar to TCP, but with a much more
limited set of states:
.Pp
.Bl -tag -width Ds -compact
.It Cm icmp.error
The state after an ICMP error came back in response to an ICMP packet.
.It Cm icmp.first
The state after the first packet.
.It Cm udp.first
The state after the first packet.
.It Cm udp.multiple
The state if both hosts have sent packets.
.It Cm udp.single
The state if the source host sends more than one packet but the destination
host has never sent one back.
.El
.Pp
Other protocols are handled similarly to UDP:
.Pp
.Bl -tag -width xxxx -compact
.It Cm other.first
.It Cm other.multiple
.It Cm other.single
.El
.Pp
Timeout values can be reduced adaptively as the number of state table
entries grows.
.Pp
.Bl -tag -width Ds -compact
.It Cm adaptive.end
When reaching this number of state entries, all timeout values become
zero, effectively purging all state entries immediately.
This value is used to define the scale factor; it should not actually
be reached (set a lower state limit, see below).
.It Cm adaptive.start
When the number of state entries exceeds this value, adaptive scaling
begins.
All timeout values are scaled linearly with factor
(adaptive.end \- number of states) / (adaptive.end \- adaptive.start).
.El
.Pp
Adaptive timeouts are enabled by default, with an adaptive.start value
equal to 60% of the state limit, and an adaptive.end value equal to
120% of the state limit.
They can be disabled by setting both adaptive.start and adaptive.end to 0.
.Pp
The adaptive timeout values can be defined both globally and for each rule.
When used on a per-rule basis, the values relate to the number of
states created by the rule, otherwise to the total number of
states.
.Pp
For example:
.Bd -literal -offset indent
set timeout tcp.first 120
set timeout tcp.established 86400
set timeout { adaptive.start 6000, adaptive.end 12000 }
set limit states 10000
.Ed
.Pp
With 9000 state table entries, the timeout values are scaled to 50%
(tcp.first 60, tcp.established 43200).
.El
.Sh QUEUEING
Packets can be assigned to queues for the purpose of bandwidth
control.
At least one declaration is required to configure queues, and later
any packet filtering rule can reference the defined queues by name.
During the filtering component of
.Nm ,
the last referenced
.Ar queue
name is where any passed packets will be queued, while for
blocked packets it specifies where any resulting ICMP or TCP RST
packets should be queued.
If the referenced queue does not exist on the outgoing interface the
default queue for that interface is used.
Queues attached to an interface build a tree,
thus each queue can have further child queues.
Only leaf queues, i.e. queues without children, can be used to assign
packets to.
The root queue must specifically reference an interface, all other queues
pick up the interface(s) they should be created on from their parent queues
unless explicitly specified.
.Pp
In the following example, a queue named std is created on the interface em0,
with 3 child queues ssh, mail and http.
.Bd -literal -offset indent
queue std on em0 bandwidth 100M
queue ssh parent std bandwidth 10M
queue mail parent std bandwidth 10M
queue http parent std bandwidth 80M default
.Ed
.Pp
The specified bandwidth is the target bandwidth, every queue can receive
more bandwidth as long as the parent still has some available.
The maximum bandwidth that should be assigned to a given queue can be limited
using the
.Cm max
keyword.
Similarly, a minimum (reserved) bandwidth can be specified.
.Bd -literal -offset indent
queue ssh parent std bandwidth 10M min 5M max 25M
.Ed
.Pp
For each of these 3 bandwidth specifications an additional burst bandwidth and
time can be specified.
.Bd -literal -offset indent
queue ssh parent std bandwidth 10M burst 90M for 100ms
.Ed
.Pp
All
.Cm bandwidth
values must be specified as an absolute value.
The suffixes
.Cm K ,
.Cm M ,
and
.Cm G
are used to represent bits, kilobits, megabits, and
gigabits per second, respectively.
The value must not exceed the interface bandwidth.
.Pp
In addition to the bandwidth specifications queues support the following
options:
.Bl -tag -width xxxx
.It Cm default
Packets not matched by another queue are assigned to this queue.
Exactly one default queue per interface is required.
.It Cm on Ar interface
Specifies the interface the queue operates on.
If not given, it operates on all matching interfaces.
.It Cm parent Ar name
Defines which parent queue the queue should be attached to.
Mandatory for all queues except root queues.
The parent queue must exist.
.It Cm qlimit Ar limit
The maximum number of packets held in the queue.
The default is 50.
.El
.Pp
Packets can be assigned to queues based on filter rules by using the
.Cm queue
keyword.
Normally only one
.Ar queue
is specified; when a second one is specified it will instead be used for
packets which have a TOS of
.Cm lowdelay
and for TCP ACKs with no data payload.
.Pp
To continue the previous example, the examples below would specify the
four referenced
queues, plus a few child queues.
Interactive
.Xr ssh 1
sessions get a queue with a minimum bandwidth;
.Xr scp 1
and
.Xr sftp 1
bulk transfers go to a separate queue.
The queues are then referenced by filtering rules (see
.Sx PACKET FILTERING ,
above).
.Bd -literal -offset 4n
queue rootq on em0 bandwidth 100M max 100M
queue http parent rootq bandwidth 60M burst 90M for 100ms
queue  developers parent http bandwidth 45M
queue  employees parent http bandwidth 15M
queue mail parent rootq bandwidth 10M
queue ssh parent rootq bandwidth 20M
queue  ssh_interactive parent ssh bandwidth 10M min 5M
queue  ssh_bulk parent ssh bandwidth 10M
queue std parent rootq bandwidth 20M default

block return out on em0 inet all set queue std
pass out on em0 inet proto tcp from $developerhosts to any port 80 \e
      set queue developers
pass out on em0 inet proto tcp from $employeehosts to any port 80 \e
      set queue employees
pass out on em0 inet proto tcp from any to any port 22 \e
      set queue(ssh_bulk, ssh_interactive)
pass out on em0 inet proto tcp from any to any port 25 \e
      set queue mail
.Ed
.Sh TABLES
Tables are named structures which can hold a collection of addresses and
networks.
Lookups against tables in
.Xr pf 4
are relatively fast, making a single rule with tables much more efficient,
in terms of
processor usage and memory consumption, than a large number of rules which
differ only in IP address (either created explicitly or automatically by rule
expansion).
.Pp
Tables can be used as the source or destination of filter
or translation rules.
They can also be used for the redirect address of
.Cm nat-to
and
.Cm rdr-to
and in the routing options of filter rules, but not for
.Cm bitmask
pools.
.Pp
Tables can be defined with any of the following
.Xr pfctl 8
mechanisms.
As with macros, reserved words may not be used as table names.
.Bl -tag -width "manually"
.It manually
Persistent tables can be manually created with the
.Cm add
or
.Cm replace
option of
.Xr pfctl 8 ,
before or after the ruleset has been loaded.
.It Nm
Table definitions can be placed directly in this file and loaded at the
same time as other rules are loaded, atomically.
Table definitions inside
.Nm
use the
.Ic table
statement, and are especially useful to define non-persistent tables.
The contents of a pre-existing table defined without a list of addresses
to initialize it is not altered when
.Nm
is loaded.
A table initialized with the empty list,
.Li { } ,
will be cleared on load.
.El
.Pp
Tables may be defined with the following attributes:
.Bl -tag -width counters
.It Cm const
The
.Cm const
flag prevents the user from altering the contents of the table once it
has been created.
Without that flag,
.Xr pfctl 8
can be used to add or remove addresses from the table at any time, even
when running with
.Xr securelevel 7
= 2.
.It Cm counters
The
.Cm counters
flag enables per-address packet and byte counters, which can be displayed with
.Xr pfctl 8 .
.It Cm persist
The
.Cm persist
flag forces the kernel to keep the table even when no rules refer to it.
If the flag is not set, the kernel will automatically remove the table
when the last rule referring to it is flushed.
.El
.Pp
This example creates a table called
.Dq private ,
to hold RFC 1918 private network blocks,
and a table called
.Dq badhosts ,
which is initially empty.
A filter rule is set up to block all traffic coming from addresses listed in
either table:
.Bd -literal -offset indent
table <private> const { 10/8, 172.16/12, 192.168/16 }
table <badhosts> persist
block on fxp0 from { <private>, <badhosts> } to any
.Ed
.Pp
The private table cannot have its contents changed and the badhosts table
will exist even when no active filter rules reference it.
Addresses may later be added to the badhosts table, so that traffic from
these hosts can be blocked by using the following:
.Pp
.Dl # pfctl -t badhosts -Tadd 204.92.77.111
.Pp
A table can also be initialized with an address list specified in one or more
external files, using the following syntax:
.Bd -literal -offset indent
table <spam> persist file "/etc/spammers" file "/etc/openrelays"
block on fxp0 from <spam> to any
.Ed
.Pp
The files
.Pa /etc/spammers
and
.Pa /etc/openrelays
list IP addresses, one per line.
Any lines beginning with a
.Sq #
are treated as comments and ignored.
In addition to being specified by IP address, hosts may also be
specified by their hostname.
When the resolver is called to add a hostname to a table,
.Em all
resulting IPv4 and IPv6 addresses are placed into the table.
IP addresses can also be entered in a table by specifying a valid interface
name, a valid interface group, or the
.Cm self
keyword, in which case all addresses assigned to the interface(s) will be
added to the table.
.Sh ANCHORS
Besides the main ruleset,
.Nm
can specify anchor attachment points.
An anchor is a container that can hold rules,
address tables, and other anchors.
When evaluation of the main ruleset reaches an
.Ic anchor
rule,
.Xr pf 4
will proceed to evaluate all rules specified in that anchor.
.Pp
The following example blocks all packets on the external interface by default,
then evaluates all rules in the anchor named "spam",
and finally passes all outgoing connections and
incoming connections to port 25:
.Bd -literal -offset indent
ext_if = "kue0"
block on $ext_if all
anchor spam
pass out on $ext_if all
pass in on $ext_if proto tcp from any to $ext_if port smtp
.Ed
.Pp
Anchors can be manipulated through
.Xr pfctl 8
without reloading the main ruleset or other anchors.
This loads a single rule into the anchor,
which blocks all packets from a specific address:
.Bd -literal -offset indent
# echo "block in quick from 1.2.3.4 to any" | pfctl -a spam -f -
.Ed
.Pp
The anchor can also be populated by adding a
.Ic load anchor
rule after the anchor rule.
When
.Xr pfctl 8
loads
.Nm ,
it will also load all the rules from the file
.Pa /etc/pf-spam.conf
into the anchor.
.Bd -literal -offset indent
anchor spam
load anchor spam from "/etc/pf-spam.conf"
.Ed
.Pp
Filter rule anchors can also be loaded inline in the ruleset
within a brace-delimited block.
Brace delimited blocks may contain rules or other brace-delimited blocks.
When anchors are loaded this way the anchor name becomes optional.
Since the parser specification for anchor names is a string,
double quote characters
.Pq Sq \&"
should be placed around the anchor name.
.Bd -literal -offset indent
anchor "external" on egress {
	block
	anchor out {
		pass proto tcp from any to port { 25, 80, 443 }
	}
	pass in proto tcp to any port 22
}
.Ed
.Pp
Anchor rules can also specify packet filtering parameters
using the same syntax as filter rules.
When parameters are used,
the anchor rule is only evaluated for matching packets.
This allows conditional evaluation of anchors, like:
.Bd -literal -offset indent
block on $ext_if all
anchor spam proto tcp from any to any port smtp
pass out on $ext_if all
pass in on $ext_if proto tcp from any to $ext_if port smtp
.Ed
.Pp
The rules inside anchor "spam" are only evaluated
for TCP packets with destination port 25.
Hence, the following
will only block connections from 1.2.3.4 to port 25:
.Bd -literal -offset indent
# echo "block in quick from 1.2.3.4 to any" | pfctl -a spam -f -
.Ed
.Pp
Matching filter and translation rules marked with the
.Cm quick
option are final and abort the evaluation of the rules in other
anchors and the main ruleset.
If the anchor itself is marked with the
.Cm quick
option,
ruleset evaluation will terminate when the anchor is exited if the packet is
matched by any rule within the anchor.
.Pp
An anchor references other anchor attachment points
using the following syntax:
.Bl -tag -width xxxx
.It Ic anchor Ar name
Evaluates the filter rules in the specified anchor.
.El
.Pp
An anchor has a name which specifies the path where
.Xr pfctl 8
can be used to access the anchor to perform operations on it, such as
attaching child anchors to it or loading rules into it.
Anchors may be nested, with components separated by
.Sq /
characters, similar to how file system hierarchies are laid out.
The main ruleset is actually the default anchor, so filter and
translation rules, for example, may also be contained in any anchor.
.Pp
Anchor rules are evaluated relative to the anchor in which they are contained.
For example,
all anchor rules specified in the main ruleset will reference
anchor attachment points underneath the main ruleset,
and anchor rules specified in a file loaded from a
.Ic load anchor
rule will be attached under that anchor point.
.Pp
Anchors may end with the asterisk
.Pq Sq *
character, which signifies that all anchors attached at that point
should be evaluated in the alphabetical ordering of their anchor name.
For example,
the following
will evaluate each rule in each anchor attached to the "spam" anchor:
.Bd -literal -offset indent
anchor "spam/*"
.Ed
.Pp
Note that it will only evaluate anchors that are directly attached to the
"spam" anchor, and will not descend to evaluate anchors recursively.
.Pp
Since anchors are evaluated relative to the anchor in which they are
contained, there is a mechanism for accessing the parent and ancestor
anchors of a given anchor.
Similar to file system path name resolution, if the sequence
.Sq ..
appears as an anchor path component, the parent anchor of the current
anchor in the path evaluation at that point will become the new current
anchor.
As an example, consider the following:
.Bd -literal -offset indent
# printf 'anchor "spam/allowed"\en' | pfctl -f -
# printf 'anchor "../banned"\enpass\en' | pfctl -a spam/allowed -f -
.Ed
.Pp
Evaluation of the main ruleset will lead into the
spam/allowed anchor, which will evaluate the rules in the
spam/banned anchor, if any, before finally evaluating the
.Ic pass
rule.
.Sh STATEFUL FILTERING
.Xr pf 4
filters packets statefully,
which has several advantages.
For TCP connections, comparing a packet to a state involves checking
its sequence numbers, as well as TCP timestamps if a rule using the
.Cm reassemble tcp
parameter applies to the connection.
If these values are outside the narrow windows of expected
values, the packet is dropped.
This prevents spoofing attacks, such as when an attacker sends packets with
a fake source address/port but does not know the connection's sequence
numbers.
Similarly,
.Xr pf 4
knows how to match ICMP replies to states.
For example,
to allow echo requests (such as those created by
.Xr ping 8 )
out statefully and match incoming echo replies correctly to states:
.Pp
.Dl pass out inet proto icmp all icmp-type echoreq
.Pp
Also, looking up states is usually faster than evaluating rules.
If there are 50 rules, all of them are evaluated sequentially in O(n).
Even with 50000 states, only 16 comparisons are needed to match a
state, since states are stored in a binary search tree that allows
searches in O(log2\~n).
.Pp
Furthermore, correct handling of ICMP error messages is critical to
many protocols, particularly TCP.
.Xr pf 4
matches ICMP error messages to the correct connection, checks them against
connection parameters, and passes them if appropriate.
For example if an ICMP source quench message referring to a stateful TCP
connection arrives, it will be matched to the state and get passed.
.Pp
Finally, state tracking is required for
.Cm nat-to
and
.Cm rdr-to
options, in order to track address and port translations and reverse the
translation on returning packets.
.Pp
.Xr pf 4
will also create state for other protocols which are effectively stateless by
nature.
UDP packets are matched to states using only host addresses and ports,
and other protocols are matched to states using only the host addresses.
.Pp
If stateless filtering of individual packets is desired,
the
.Cm no state
keyword can be used to specify that state will not be created
if this is the last matching rule.
Note that packets which match neither block nor pass rules,
and thus are passed by default,
are effectively passed as if
.Cm no state
had been specified.
.Pp
A number of parameters can also be set to affect how
.Xr pf 4
handles state tracking,
as detailed below.
.Ss State Modulation
Much of the security derived from TCP is attributable to how well the
initial sequence numbers (ISNs) are chosen.
Some popular stack implementations choose
.Em very
poor ISNs and thus are normally susceptible to ISN prediction exploits.
By applying a
.Cm modulate state
rule to a TCP connection,
.Xr pf 4
will create a high quality random sequence number for each connection
endpoint.
.Pp
The
.Cm modulate state
directive implicitly keeps state on the rule and is
only applicable to TCP connections.
.Pp
For instance:
.Bd -literal -offset indent
block all
pass out proto tcp from any to any modulate state
pass in  proto tcp from any to any port 25 flags S/SFRA \e
      modulate state
.Ed
.Pp
Note that modulated connections will not recover when the state table
is lost (firewall reboot, flushing the state table, etc.).
.Xr pf 4
will not be able to infer a connection again after the state table flushes
the connection's modulator.
When the state is lost, the connection may be left dangling until the
respective endpoints time out the connection.
It is possible on a fast local network for the endpoints to start an ACK
storm while trying to resynchronize after the loss of the modulator.
The default
.Cm flags
settings (or a more strict equivalent) should be used on
.Cm modulate state
rules to prevent ACK storms.
.Pp
Note that alternative methods are available
to prevent loss of the state table
and allow for firewall failover.
See
.Xr carp 4
and
.Xr pfsync 4
for further information.
.Ss SYN Proxy
By default,
.Xr pf 4
passes packets that are part of a
TCP handshake between the endpoints.
The
.Cm synproxy state
option can be used to cause
.Xr pf 4
itself to complete the handshake with the active endpoint, perform a handshake
with the passive endpoint, and then forward packets between the endpoints.
.Pp
No packets are sent to the passive endpoint before the active endpoint has
completed the handshake, hence so-called SYN floods with spoofed source
addresses will not reach the passive endpoint, as the sender can't complete the
handshake.
.Pp
The proxy is transparent to both endpoints; they each see a single
connection from/to the other endpoint.
.Xr pf 4
chooses random initial sequence numbers for both handshakes.
Once the handshakes are completed, the sequence number modulators
(see previous section) are used to translate further packets of the
connection.
.Cm synproxy state
includes
.Cm modulate state .
.Pp
Rules with
.Cm synproxy state
will not work if
.Xr pf 4
operates on a
.Xr bridge 4 .
.Pp
Example:
.Bd -literal -offset indent
pass in proto tcp from any to any port www synproxy state
.Ed
.Ss Stateful Tracking Options
A number of options related to stateful tracking can be applied on a
per-rule basis.
One of
.Cm keep state ,
.Cm modulate state ,
or
.Cm synproxy state
must be specified explicitly to apply these options to a rule.
.Pp
.Bl -tag -width xxxx -compact
.It Cm floating
States can match packets on any interfaces
(the opposite of
.Cm if-bound ) .
This is the default.
.It Cm if-bound
States are bound to an interface
(the opposite of
.Cm floating ) .
.It Cm max Ar number
Limits the number of concurrent states the rule may create.
When this limit is reached, further packets that would create
state are dropped until existing states time out.
.It Cm no-sync
Prevent state changes for states created by this rule from appearing on the
.Xr pfsync 4
interface.
.It Cm pflow
States created by this rule are exported on the
.Xr pflow 4
interface.
.It Cm sloppy
Uses a sloppy TCP connection tracker that does not check sequence
numbers at all, which makes insertion and ICMP teardown attacks way
easier.
This is intended to be used in situations where one does not see all
packets of a connection, e.g. in asymmetric routing situations.
It cannot be used with
.Cm modulate state
or
.Cm synproxy state .
.It Ar timeout seconds
Changes the
.Ar timeout
values used for states created by this rule.
For a list of all valid
.Ar timeout
names, see
.Sx OPTIONS
above.
.El
.Pp
Multiple options can be specified, separated by commas:
.Bd -literal -offset indent
pass in proto tcp from any to any \e
      port www keep state \e
      (max 100, source-track rule, max-src-nodes 75, \e
      max-src-states 3, tcp.established 60, tcp.closing 5)
.Ed
.Pp
When the
.Cm source-track
keyword is specified, the number of states per source IP is tracked.
.Pp
.Bl -tag -width xxxx -compact
.It Cm source-track global
The number of states created by all rules that use this option is limited.
Each rule can specify different
.Cm max-src-nodes
and
.Cm max-src-states
options, however state entries created by any participating rule count towards
each individual rule's limits.
.It Cm source-track rule
The maximum number of states created by this rule is limited by the rule's
.Cm max-src-nodes
and
.Cm max-src-states
options.
Only state entries created by this particular rule count toward the rule's
limits.
.El
.Pp
The following limits can be set:
.Pp
.Bl -tag -width xxxx -compact
.It Cm max-src-nodes Ar number
Limits the maximum number of source addresses which can simultaneously
have state table entries.
.It Cm max-src-states Ar number
Limits the maximum number of simultaneous state entries that a single
source address can create with this rule.
.El
.Pp
For stateful TCP connections, limits on established connections (connections
which have completed the TCP 3-way handshake) can also be enforced
per source IP.
.Pp
.Bl -tag -width xxxx -compact
.It Cm max-src-conn Ar number
Limits the maximum number of simultaneous TCP connections which have
completed the 3-way handshake that a single host can make.
.It Cm max-src-conn-rate Ar number Ns / Ns Ar seconds
Limit the rate of new connections over a time interval.
The connection rate is an approximation calculated as a moving average.
.El
.Pp
When one of these limits is reached, further packets that would create
state are dropped until existing states time out.
.Pp
Because the 3-way handshake ensures that the source address is not being
spoofed, more aggressive action can be taken based on these limits.
With the
.Cm overload Pf < Ar table Ns >
state option, source IP addresses which hit either of the limits on
established connections will be added to the named
.Ar table .
This table can be used in the ruleset to block further activity from
the offending host, redirect it to a tarpit process, or restrict its
bandwidth.
.Pp
The optional
.Cm flush
keyword kills all states created by the matching rule which originate
from the host which exceeds these limits.
The
.Cm global
modifier to the
.Cm flush
command kills all states originating from the
offending host, regardless of which rule created the state.
.Pp
For example, the following rules will protect the webserver against
hosts making more than 100 connections in 10 seconds.
Any host which connects faster than this rate will have its address added
to the <bad_hosts> table and have all states originating from it flushed.
Any new packets arriving from this host will be dropped unconditionally
by the block rule.
.Bd -literal -offset indent
block quick from <bad_hosts>
pass in on $ext_if proto tcp to $webserver port www keep state \e
      (max-src-conn-rate 100/10, overload <bad_hosts> flush global)
.Ed
.Sh TRAFFIC NORMALISATION
Traffic normalisation is a broad umbrella term
for aspects of the packet filter which deal with
verifying packets, packet fragments, spoof traffic,
and other irregularities.
.Ss Scrub
Scrub involves sanitising packet content in such a way
that there are no ambiguities in packet interpretation on the receiving side.
It is invoked with the
.Cm scrub
option, added to regular rules.
.Pp
Parameters are specified enclosed in parentheses.
At least one of the following parameters must be specified:
.Bl -tag -width xxxx
.It Cm max-mss Ar number
Enforces a maximum segment size (MSS) for matching TCP packets.
.It Cm min-ttl Ar number
Enforces a minimum TTL for matching IP packets.
.It Cm no-df
Clears the
.Dq dont-fragment
bit from a matching IPv4 packet.
Some operating systems have NFS implementations
which are known to generate fragmented packets with the
.Dq dont-fragment
bit set.
.Xr pf 4
will drop such fragmented
.Dq dont-fragment
packets unless
.Cm no-df
is specified.
.Pp
Unfortunately some operating systems also generate their
.Dq dont-fragment
packets with a zero IP identification field.
Clearing the
.Dq dont-fragment
bit on packets with a zero IP ID may cause deleterious results if an
upstream router later fragments the packet.
Using
.Cm random-id
is recommended in combination with
.Cm no-df
to ensure unique IP identifiers.
.It Cm random-id
Replaces the IPv4 identification field with random values to compensate
for predictable values generated by many hosts.
This option only applies to packets that are not fragmented
after the optional fragment reassembly.
.It Cm reassemble tcp
Statefully normalises TCP connections.
.Cm reassemble tcp
performs the following normalisations:
.Bl -ohang
.It TTL
Neither side of the connection is allowed to reduce their IP TTL.
An attacker may send a packet such that it reaches the firewall, affects
the firewall state, and expires before reaching the destination host.
.Cm reassemble tcp
will raise the TTL of all packets back up to the highest value seen on
the connection.
.It Timestamp Modulation
Modern TCP stacks will send a timestamp on every TCP packet and echo
the other endpoint's timestamp back to them.
Many operating systems will merely start the timestamp at zero when
first booted, and increment it several times a second.
The uptime of the host can be deduced by reading the timestamp and multiplying
by a constant.
Also observing several different timestamps can be used to count hosts
behind a NAT device.
And spoofing TCP packets into a connection requires knowing or guessing
valid timestamps.
Timestamps merely need to be monotonically increasing and not derived off a
guessable base time.
.Cm reassemble tcp
will cause
.Cm scrub
to modulate the TCP timestamps with a random number.
.It Extended PAWS Checks
There is a problem with TCP on long fat pipes, in that a packet might get
delayed for longer than it takes the connection to wrap its 32-bit sequence
space.
In such an occurrence, the old packet would be indistinguishable from a
new packet and would be accepted as such.
The solution to this is called PAWS: Protection Against Wrapped Sequence
numbers.
It protects against it by making sure the timestamp on each packet does
not go backwards.
.Cm reassemble tcp
also makes sure the timestamp on the packet does not go forward more
than the RFC allows.
By doing this,
.Xr pf 4
artificially extends the security of TCP sequence numbers by 10 to 18
bits when the host uses appropriately randomized timestamps, since a
blind attacker would have to guess the timestamp as well.
.El
.El
.Pp
For example:
.Pp
.Dl match in all scrub (no-df random-id max-mss 1440)
.Ss Fragment Handling
The size of IP datagrams (packets) can be significantly larger than the
maximum transmission unit (MTU) of the network.
In cases when it is necessary or more efficient to send such large packets,
the large packet will be fragmented into many smaller packets that will each
fit onto the wire.
Unfortunately for a firewalling device, only the first logical fragment will
contain the necessary header information for the subprotocol that allows
.Xr pf 4
to filter on things such as TCP ports or to perform NAT.
.Pp
One alternative is to filter individual fragments with filter rules.
If packet reassembly is turned off, it is passed to the filter.
Filter rules with matching IP header parameters decide whether the
fragment is passed or blocked, in the same way as complete packets
are filtered.
Without reassembly, fragments can only be filtered based on IP header
fields (source/destination address, protocol), since subprotocol header
fields are not available (TCP/UDP port numbers, ICMP code/type).
The
.Cm fragment
option can be used to restrict filter rules to apply only to
fragments, but not complete packets.
Filter rules without the
.Cm fragment
option still apply to fragments, if they only specify IP header fields.
For instance:
.Bd -literal -offset indent
pass in proto tcp from any to any port 80
.Ed
.Pp
The rule above never applies to a fragment,
even if the fragment is part of a TCP packet with destination port 80,
because without reassembly this information
is not available for each fragment.
This also means that fragments cannot create new or match existing
state table entries, which makes stateful filtering and address
translation (NAT, redirection) for fragments impossible.
.Pp
In most cases, the benefits of reassembly outweigh the additional
memory cost,
so reassembly is on by default.
.Pp
The memory allocated for fragment caching can be limited using
.Xr pfctl 8 .
Once this limit is reached, fragments that would have to be cached
are dropped until other entries time out.
The timeout value can also be adjusted.
.Pp
When forwarding reassembled IPv6 packets, pf refragments them with
the original maximum fragment size.
This allows the sender to determine the optimal fragment size by
path MTU discovery.
.Ss Blocking Spoofed Traffic
Spoofing is the faking of IP addresses,
typically for malicious purposes.
The
.Ic antispoof
directive expands to a set of filter rules which will block all
traffic with a source IP from the network(s) directly connected
to the specified interface(s) from entering the system through
any other interface.
.Pp
For example:
.Dl antispoof for lo0
.Pp
Expands to:
.Bd -literal -offset indent -compact
block drop in on ! lo0 inet from 127.0.0.1/8 to any
block drop in on ! lo0 inet6 from ::1 to any
.Ed
.Pp
For non-loopback interfaces, there are additional rules to block incoming
packets with a source IP address identical to the interface's IP(s).
For example, assuming the interface wi0 had an IP address of 10.0.0.1 and a
netmask of 255.255.255.0:
.Pp
.Dl antispoof for wi0 inet
.Pp
Expands to:
.Bd -literal -offset indent -compact
block drop in on ! wi0 inet from 10.0.0.0/24 to any
block drop in inet from 10.0.0.1 to any
.Ed
.Pp
Caveat: Rules created by the
.Ic antispoof
directive interfere with packets sent over loopback interfaces
to local addresses.
One should pass these explicitly.
.Sh OPERATING SYSTEM FINGERPRINTING
Passive OS fingerprinting is a mechanism to inspect nuances of a TCP
connection's initial SYN packet and guess at the host's operating system.
Unfortunately these nuances are easily spoofed by an attacker so the
fingerprint is not useful in making security decisions.
But the fingerprint is typically accurate enough to make policy decisions
upon.
.Pp
The fingerprints may be specified by operating system class, by
version, or by subtype/patchlevel.
The class of an operating system is typically the vendor or genre
and would be
.Ox
for the
.Xr pf 4
firewall itself.
The version of the oldest available
.Ox
release on the main FTP site
would be 2.6 and the fingerprint would be written as:
.Pp
.Dl \&"OpenBSD 2.6\&"
.Pp
The subtype of an operating system is typically used to describe the
patchlevel if that patch led to changes in the TCP stack behavior.
In the case of
.Ox ,
the only subtype is for a fingerprint that was
normalised by the
.Cm no-df
scrub option and would be specified as:
.Pp
.Dl \&"OpenBSD 3.3 no-df\&"
.Pp
Fingerprints for most popular operating systems are provided by
.Xr pf.os 5 .
Once
.Xr pf 4
is running, a complete list of known operating system fingerprints may
be listed by running:
.Pp
.Dl # pfctl -so
.Pp
Filter rules can enforce policy at any level of operating system specification
assuming a fingerprint is present.
Policy could limit traffic to approved operating systems or even ban traffic
from hosts that aren't at the latest service pack.
.Pp
The
.Cm unknown
class can also be used as the fingerprint which will match packets for
which no operating system fingerprint is known.
.Pp
Examples:
.Bd -literal -offset indent
pass  out proto tcp from any os OpenBSD
block out proto tcp from any os Doors
block out proto tcp from any os "Doors PT"
block out proto tcp from any os "Doors PT SP3"
block out from any os "unknown"
pass on lo0 proto tcp from any os "OpenBSD 3.3 lo0"
.Ed
.Pp
Operating system fingerprinting is limited only to the TCP SYN packet.
This means that it will not work on other protocols and will not match
a currently established connection.
.Pp
Caveat: operating system fingerprints are occasionally wrong.
There are three problems: an attacker can trivially craft his packets to
appear as any operating system he chooses;
an operating system patch could change the stack behavior and no fingerprints
will match it until the database is updated;
and multiple operating systems may have the same fingerprint.
.Sh EXAMPLES
In this example,
the external interface is
.Pa kue0 .
We use a macro for the interface name, so it can be changed easily.
All incoming traffic is "normalised",
and everything is blocked and logged by default.
.Bd -literal -offset 4n
ext_if = "kue0"
match in all scrub (no-df max-mss 1440)
block return log on $ext_if all
.Ed
.Pp
Here we specifically block packets we don't want:
anything coming from source we have no back routes for;
packets whose ingress interface does not match the one in
the route back to their source address;
anything that does not have our address (157.161.48.183) as source;
broadcasts (cable modem noise);
and anything from reserved address space or invalid addresses.
.Bd -literal -offset 4n
block in from no-route to any
block in from urpf-failed to any
block out log quick on $ext_if from ! 157.161.48.183 to any
block in quick on $ext_if from any to 255.255.255.255
block in log quick on $ext_if from { 10.0.0.0/8, 172.16.0.0/12, \e
    192.168.0.0/16, 255.255.255.255/32 } to any
.Ed
.Pp
For ICMP,
pass out/in ping queries.
State matching is done on host addresses and ICMP ID (not type/code),
so replies (like 0/0 for 8/0) will match queries.
ICMP error messages (which always refer to a TCP/UDP packet)
are handled by the TCP/UDP states.
.Bd -literal -offset 4n
pass on $ext_if inet proto icmp all icmp-type 8 code 0
.Ed
.Pp
For UDP,
pass out all UDP connections.
DNS connections are passed in.
.Bd -literal -offset 4n
pass out on $ext_if proto udp all
pass in on $ext_if proto udp from any to any port domain
.Ed
.Pp
For TCP,
pass out all TCP connections and modulate state.
SSH, SMTP, DNS, and IDENT connections are passed in.
We do not allow Windows 9x SMTP connections since they are typically
a viral worm.
.Bd -literal -offset 4n
pass out on $ext_if proto tcp all modulate state
pass in on $ext_if proto tcp from any to any \e
    port { ssh, smtp, domain, auth }
block in on $ext_if proto tcp from any \e
    os { "Windows 95", "Windows 98" } to any port smtp
.Ed
.Pp
Here we pass in/out all IPv6 traffic:
note that we have to enable this in two different ways,
on both our physical interface and our tunnel.
.Bd -literal -offset 4n
pass quick on gif0 inet6
pass quick on $ext_if proto ipv6
.Ed
.Pp
This example illustrates packet tagging.
There are three interfaces: $int_if, $ext_if, and $wifi_if (wireless).
NAT is being done on $ext_if for all outgoing packets.
Packets in on $int_if are tagged and passed out on $ext_if.
All other outgoing packets
(i.e. packets from the wireless network)
are only permitted to access port 80.
.Bd -literal -offset 4n
pass in on $int_if from any to any tag INTNET
pass in on $wifi_if from any to any

block out on $ext_if from any to any
pass out quick on $ext_if tagged INTNET
pass out on $ext_if proto tcp from any to any port 80
.Ed
.Pp
In this example,
we tag incoming packets as they are redirected to spamd(8).
The tag is used to pass those packets through the packet filter.
.Bd -literal -offset 4n
match in on $ext_if inet proto tcp from <spammers> to port smtp \e
     tag SPAMD rdr-to 127.0.0.1 port spamd

block in on $ext_if
pass in on $ext_if inet proto tcp tagged SPAMD
.Ed
.Pp
This example maps incoming requests on port 80 to port 8080, on
which a daemon is running (because, for example, it is not run as root,
and therefore lacks permission to bind to port 80).
.Bd -literal -offset 4n
match in on $ext_if proto tcp from any to any port 80 \e
      rdr-to 127.0.0.1 port 8080
.Ed
.Pp
If a
.Ic pass
rule is used with the
.Cm quick
modifier, packets matching the translation rule are passed without
inspecting subsequent filter rules.
.Bd -literal -offset 4n
pass in quick on $ext_if proto tcp from any to any port 80 \e
      rdr-to 127.0.0.1 port 8080
.Ed
.Pp
In the example below, vlan12 is configured as 192.168.168.1;
the machine translates all packets coming from 192.168.168.0/24 to 204.92.77.111
when they are going out any interface except vlan12.
This has the net effect of making traffic from the 192.168.168.0/24
network appear as though it is the Internet routable address
204.92.77.111 to nodes behind any interface on the router except
for the nodes on vlan12.
Thus, 192.168.168.1 can talk to the 192.168.168.0/24 nodes.
.Bd -literal -offset 4n
match out on ! vlan12 from 192.168.168.0/24 to any nat-to 204.92.77.111
.Ed
.Pp
In the example below, the machine sits between a fake internal
144.19.74.* network, and a routable external IP of 204.92.77.100.
The last rule excludes protocol AH from being translated.
.Bd -literal -offset 4n
pass out on $ext_if from 144.19.74.0/24 nat-to 204.92.77.100
pass out on $ext_if proto ah from 144.19.74.0/24
.Ed
.Pp
In the example below, packets bound for one specific server, as well as those
generated by the sysadmins are not proxied; all other connections are.
.Bd -literal -offset 4n
pass in on $int_if proto { tcp, udp } from any to any port 80 \e
      rdr-to 127.0.0.1 port 80
pass in on $int_if proto { tcp, udp } from any to $server port 80
pass in on $int_if proto { tcp, udp } from $sysadmins to any port 80
.Ed
.Pp
This example maps outgoing packets' source port
to an assigned proxy port instead of an arbitrary port.
In this case, proxy outgoing isakmp with port 500 on the gateway.
.Bd -literal -offset 4n
match out on $ext_if inet proto udp from any port isakmp to any \e
    nat-to ($ext_if) port 500
.Ed
.Pp
One more example uses
.Cm rdr-to
to redirect a TCP and UDP port to an internal machine.
.Bd -literal -offset 4n
match in on $ext_if inet proto tcp from any to ($ext_if) port 8080 \e
      rdr-to 10.1.2.151 port 22
match in on $ext_if inet proto udp from any to ($ext_if) port 8080 \e
      rdr-to 10.1.2.151 port 53
.Ed
.Pp
In this example, a NAT gateway is set up to translate internal addresses
using a pool of public addresses (192.0.2.16/28).
A given source address is always translated to the same pool address by
using the
.Cm source-hash
keyword.
The gateway also translates incoming web server connections
to a group of web servers on the internal network.
.Bd -literal -offset 4n
match out on $ext_if inet from any to any nat-to 192.0.2.16/28 \e
    source-hash
match in  on $ext_if proto tcp from any to any port 80 \e
    rdr-to { 10.1.2.155 weight 2, 10.1.2.160 weight 1, \e
             10.1.2.161 weight 8 } round-robin
.Ed
.Pp
The bidirectional address translation example uses a single
.Cm binat-to
rule that expands to a
.Cm nat-to
and an
.Cm rdr-to
rule.
.Bd -literal -offset 4n
pass on $ext_if from 10.1.2.120 to any binat-to 192.0.2.17
.Ed
.Pp
The previous example is identical to the following set of rules:
.Bd -literal -offset 4n
pass out on $ext_if inet from 10.1.2.120 to any \e
      nat-to 192.0.2.17 static-port
pass in on $ext_if inet from any to 192.0.2.17 rdr-to 10.1.2.120
.Ed
.Pp
In the example below, a router handling both address families
translates an internal IPv4 subnet to IPv6 using the well-known
64:ff9b::/96 prefix:
.Bd -literal -offset 4n
pass in on $v4_if inet af-to inet6 from ($v6_if) to 64:ff9b::/96
.Ed
.Pp
Paired with the example above, the example below can be used on
another router handling both address families to translate back
to IPv4:
.Bd -literal -offset 4n
pass in on $v6_if inet6 to 64:ff9b::/96 af-to inet from ($v4_if)
.Ed
.Sh GRAMMAR
Syntax for
.Nm
in BNF:
.Bd -literal
line           = ( option | pf-rule |
                 antispoof-rule | queue-rule | anchor-rule |
                 anchor-close | load-anchor | table-rule | include )

option         = "set" ( [ "timeout" ( timeout | "{" timeout-list "}" ) ] |
                 [ "ruleset-optimization" [ "none" | "basic" |
                 "profile" ] ] |
                 [ "optimization" [ "default" | "normal" | "high-latency" |
                 "satellite" | "aggressive" | "conservative" ] ]
                 [ "limit" ( limit-item | "{" limit-list "}" ) ] |
                 [ "loginterface" ( interface-name | "none" ) ] |
                 [ "block-policy" ( "drop" | "return" ) ] |
                 [ "state-policy" ( "if-bound" | "floating" ) ]
                 [ "state-defaults" state-opts ]
                 [ "fingerprints" filename ] |
                 [ "skip on" ifspec ] |
                 [ "debug" ( "emerg" | "alert" | "crit" | "err" |
                 "warning" | "notice" | "info" | "debug" ) ] |
		 [ "reassemble" ( "yes" | "no" ) [ "no-df" ] ] )

pf-rule        = action [ ( "in" | "out" ) ]
                 [ "log" [ "(" logopts ")"] ] [ "quick" ]
                 [ "on" ( ifspec | "rdomain" number ) ] [ af ]
                 [ protospec ] [ hosts ] [ filteropts ]

logopts        = logopt [ [ "," ] logopts ]
logopt         = "all" | "matches" | "user" | "to" interface-name

filteropts     = filteropt [ [ "," ] filteropts ]
filteropt      = user | group | flags | icmp-type | icmp6-type |
                 "tos" tos |
                 ( "no" | "keep" | "modulate" | "synproxy" ) "state"
                 [ "(" state-opts ")" ] | "scrub" "(" scrubopts ")" |
                 "fragment" | "allow-opts" | "once" |
		 "divert-packet" "port" port | "divert-reply" |
		 "divert-to" host "port" port |
                 "label" string | "tag" string | [ ! ] "tagged" string |
                 "set prio" ( number | "(" number [ [ "," ] number ] ")" ) |
                 "set queue" ( string | "(" string [ [ "," ] string ] ")" ) |
                 "rtable" number | "probability" number"%" | "prio" number |
		 "af-to" af "from" ( redirhost | "{" redirhost-list "}" )
		 [ "to" ( redirhost | "{" redirhost-list "}" ) ] |
		 "binat-to" ( redirhost | "{" redirhost-list "}" )
		 [ portspec ] [ pooltype ] |
		 "rdr-to" ( redirhost | "{" redirhost-list "}" )
		 [ portspec ] [ pooltype ] |
		 "nat-to" ( redirhost | "{" redirhost-list "}" )
		 [ portspec ] [ pooltype ] [ "static-port" ] |
		 [ route ] | [ "set tos" tos ] |
		 [ [ "!" ] "received-on" ( interface-name | interface-group ) ]

scrubopts      = scrubopt [ [ "," ] scrubopts ]
scrubopt       = "no-df" | "min-ttl" number | "max-mss" number |
                 "reassemble tcp" | "random-id"

antispoof-rule = "antispoof" [ "log" ] [ "quick" ]
                 "for" ifspec [ af ] [ "label" string ]

table-rule     = "table" "<" string ">" [ tableopts ]
tableopts      = tableopt [ tableopts ]
tableopt       = "persist" | "const" | "counters" |
                 "file" string | "{" [ tableaddrs ] "}"
tableaddrs     = tableaddr-spec [ [ "," ] tableaddrs ]
tableaddr-spec = [ "!" ] tableaddr [ "/" mask-bits ]
tableaddr      = hostname | ifspec | "self" |
                 ipv4-dotted-quad | ipv6-coloned-hex

queue-rule     = "queue" string [ "on" interface-name ] queueopts-list

anchor-rule    = "anchor" [ string ] [ ( "in" | "out" ) ] [ "on" ifspec ]
                 [ af ] [ protospec ] [ hosts ] [ filteropt-list ] [ "{" ]

anchor-close   = "}"

load-anchor    = "load anchor" string "from" filename

queueopts-list = queueopts-list queueopts | queueopts
queueopts      = [ "bandwidth" bandwidth ] | [ "min" bandwidth ] |
                 [ "max" bandwidth ] | [ "parent" string ] |
                 [ "default" ] | [ "qlimit" number ]
bandwidth      = bandwidth-spec [ "burst" bandwidth-spec "for" number "ms" ]
bandwidth-spec = number ( "" | "K" | "M" | "G" )

action         = "pass" | "match" | "block" [ return ]
return         = "drop" | "return" |
                 "return-rst" [ "(" "ttl" number ")" ] |
                 "return-icmp" [ "(" icmpcode [ [ "," ] icmp6code ] ")" ] |
                 "return-icmp6" [ "(" icmp6code ")" ]
icmpcode       = ( icmp-code-name | icmp-code-number )
icmp6code      = ( icmp6-code-name | icmp6-code-number )

ifspec         = ( [ "!" ] ( interface-name | interface-group ) ) |
                 "{" interface-list "}"
interface-list = [ "!" ] ( interface-name | interface-group )
                 [ [ "," ] interface-list ]
route          = ( "route-to" | "reply-to" | "dup-to" )
                 ( routehost | "{" routehost-list "}" )
                 [ pooltype ]
af             = "inet" | "inet6"

protospec      = "proto" ( proto-name | proto-number |
                 "{" proto-list "}" )
proto-list     = ( proto-name | proto-number ) [ [ "," ] proto-list ]

hosts          = "all" |
                 "from" ( "any" | "no-route" | "urpf-failed" | "self" |
                 host | "{" host-list "}" | "route" string ) [ port ]
                 [ os ]
                 "to"   ( "any" | "no-route" | "self" | host |
                 "{" host-list "}" | "route" string ) [ port ]

ipspec         = "any" | host | "{" host-list "}"
host           = [ "!" ] ( address [ "weight" number ] |
                 address [ "/" mask-bits ] [ "weight" number ] |
                 "<" string ">" )
redirhost      = address [ "/" mask-bits ]
routehost      = host | host "@@" interface-name |
                 "(" interface-name [ address [ "/" mask-bits ] ] ")"
address        = ( interface-name | interface-group |
                 "(" ( interface-name | interface-group ) ")" |
                 hostname | ipv4-dotted-quad | ipv6-coloned-hex )
host-list      = host [ [ "," ] host-list ]
redirhost-list = redirhost [ [ "," ] redirhost-list ]
routehost-list = routehost [ [ "," ] routehost-list ]

port           = "port" ( unary-op | binary-op | "{" op-list "}" )
portspec       = "port" ( number | name ) [ ":" ( "*" | number | name ) ]
os             = "os"  ( os-name | "{" os-list "}" )
user           = "user" ( unary-op | binary-op | "{" op-list "}" )
group          = "group" ( unary-op | binary-op | "{" op-list "}" )

unary-op       = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
                 ( name | number )
binary-op      = number ( "<>" | "><" | ":" ) number
op-list        = ( unary-op | binary-op ) [ [ "," ] op-list ]

os-name        = operating-system-name
os-list        = os-name [ [ "," ] os-list ]

flags          = "flags" ( [ flag-set ] "/"  flag-set | "any" )
flag-set       = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] [ "E" ]
                 [ "W" ]

icmp-type      = "icmp-type" ( icmp-type-code | "{" icmp-list "}" )
icmp6-type     = "icmp6-type" ( icmp-type-code | "{" icmp-list "}" )
icmp-type-code = ( icmp-type-name | icmp-type-number )
                 [ "code" ( icmp-code-name | icmp-code-number ) ]
icmp-list      = icmp-type-code [ [ "," ] icmp-list ]

tos            = ( "lowdelay" | "throughput" | "reliability" |
                 [ "0x" ] number )

state-opts     = state-opt [ [ "," ] state-opts ]
state-opt      = ( "max" number | "no-sync" | timeout | "sloppy" |
                 "pflow" | "source-track" [ ( "rule" | "global" ) ] |
                 "max-src-nodes" number | "max-src-states" number |
                 "max-src-conn" number |
                 "max-src-conn-rate" number "/" number |
                 "overload" "<" string ">" [ "flush" [ "global" ] ] |
                 "if-bound" | "floating" )

timeout-list   = timeout [ [ "," ] timeout-list ]
timeout        = ( "tcp.first" | "tcp.opening" | "tcp.established" |
                 "tcp.closing" | "tcp.finwait" | "tcp.closed" |
                 "udp.first" | "udp.single" | "udp.multiple" |
                 "icmp.first" | "icmp.error" |
                 "other.first" | "other.single" | "other.multiple" |
                 "frag" | "interval" | "src.track" |
                 "adaptive.start" | "adaptive.end" ) number

limit-list     = limit-item [ [ "," ] limit-list ]
limit-item     = ( "states" | "frags" | "src-nodes" | "tables" |
                 "table-entries" ) number

pooltype       = ( "bitmask" | "least-states" |
                 "random" | "round-robin" |
                 "source-hash" [ ( hex-key | string-key ) ] )
                 [ "sticky-address" ]

include        = "include" filename
.Ed
.Sh FILES
.Bl -tag -width "/etc/protocolsXXX" -compact
.It Pa /etc/hosts
Host name database.
.It Pa /etc/pf.conf
Default location of the ruleset file.
.It Pa /etc/pf.os
Default location of OS fingerprints.
.It Pa /etc/protocols
Protocol name database.
.It Pa /etc/services
Service name database.
.El
.Sh SEE ALSO
.Xr pf 4 ,
.Xr pflow 4 ,
.Xr pfsync 4 ,
.Xr pf.os 5 ,
.Xr pfctl 8 ,
.Xr pflogd 8
.Sh HISTORY
The
.Nm
file format first appeared in
.Ox 3.0 .
@


1.556
log
@modfier -> modifier

From Dimitris Papastamos.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.555 2017/01/02 22:24:28 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: January 2 2017 $
d2644 1
a2644 1
                 [ protospec ] hosts [ filteropts ]
@


1.555
log
@diff from jesper wallin to remove commas in one of the queue examples;
since the comma is optional i chose to remove them because:

- within the block it looks more consistent
- less to type
- the bnf doesn;t even appear to show the commas (not that i can read bnf)
- i prefer it without commas
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.554 2016/09/24 10:10:58 sthen Exp $
d31 1
a31 1
.Dd $Mdocdate: September 24 2016 $
d371 1
a371 1
modfier appended to restrict the name resolution to the first of each
@


1.554
log
@Specify "to" addresses in one of the examples that shows use of af-to for
inet6->inet. Without this, local network traffic (including neighbour
discovery etc) will also get translated. From Peter J. Philipp, with a
tweak to break long lines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.553 2016/09/13 19:15:50 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 13 2016 $
d1484 1
a1484 1
queue ssh parent std bandwidth 10M, min 5M, max 25M
@


1.553
log
@make it clearer that log options require ();
requested by janne johansson

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.552 2016/05/14 08:21:40 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 14 2016 $
d866 4
a869 2
pass in inet6 af-to inet from 198.51.100.1 to 0.0.0.0/0
pass in inet6 af-to inet from 198.51.100.1
@


1.552
log
@unhphenate the world: re-order -> reorder
sthen does not object
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.551 2016/01/05 22:51:38 benno Exp $
d31 1
a31 1
.Dd $Mdocdate: January 5 2016 $
d233 1
a233 1
.It Cm log Op Cm all | matches | to Ar interface | Cm user
d256 2
a257 2
are all optional,
and can be combined using commas.
@


1.551
log
@remove long deprecated "set debug "none|urgent|misc|loud" levels in
pf.conf. Change this before upgrade or pf.conf won't load.
florian@@ henning@@ phessler@@ jung@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.550 2015/11/03 11:21:16 sobrado Exp $
d31 1
a31 1
.Dd $Mdocdate: November 3 2015 $
d1286 1
a1286 1
re-order the rules to improve evaluation performance
@


1.550
log
@we need an unbreakable space in O(log2 n).

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.549 2015/10/26 00:49:34 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: October 26 2015 $
d2635 2
a2636 1
                 [ "debug" ( "none" | "urgent" | "misc" | "loud" ) ] |
@


1.549
log
@adjust macro usage to the usual conventions
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.548 2015/10/22 11:02:48 sobrado Exp $
d31 1
a31 1
.Dd $Mdocdate: October 22 2015 $
d1869 1
a1869 1
searches in O(log2 n).
@


1.548
log
@improve indentation in list block.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.547 2015/09/30 16:35:53 sobrado Exp $
d31 1
a31 1
.Dd $Mdocdate: September 30 2015 $
d45 21
a65 21
.Bl -ohang
.It Sy Packet Filtering
Packet filtering, including network address translation (NAT).
.It Sy Options
Global options tune the behaviour of the packet filtering engine.
.It Sy Queueing
Queueing provides rule-based bandwidth control.
.It Sy Tables
Tables provide a method for dealing with large numbers of addresses.
.It Sy Anchors
Anchors are containers for rules and tables.
.It Sy Stateful Filtering
Stateful filtering tracks packets by state.
.It Sy Traffic Normalisation
Including scrub, fragment handling, and blocking spoofed traffic.
.It Sy Operating System Fingerprinting
A method for detecting a host's operating system.
.It Sy Examples
Some example rulesets.
.It Sy Grammar
Complete BNF grammar reference.
d90 3
a92 3
.Ar pass ,
.Ar in ,
.Ar out ) .
d105 2
a106 2
.Ar block ,
.Ar pass ,
d108 1
a108 1
.Ar match
d117 1
a117 1
.Ar block
d119 1
a119 1
.Ar pass ,
d124 1
a124 1
.Ar match ,
d139 1
a139 1
.Ar pass
d147 2
a148 2
.Bl -tag -width xxxx
.It Ar block
d151 1
a151 1
.Ar block
d154 1
a154 1
.Ar drop
d157 1
a157 1
.Ar block-policy
d160 2
a161 2
.Bl -tag -width "return-icmp6XXX" -compact
.It Ar drop
d163 1
a163 1
.It Ar return
d166 2
a167 2
.It Ar return-icmp
.It Ar return-icmp6
d171 1
a171 1
.It Ar return-rst
d175 1
a175 1
.Ar ttl ,
d189 1
a189 1
.It Ar match
d193 7
a199 4
.Ar match
rules differ from block and pass rules in that
parameters are set every time a packet matches the rule,
not only on the last matching rule.
d204 5
a208 5
.Ar nat-to ,
.Ar binat-to ,
.Ar rdr-to ,
.Ar queue ,
.Ar rtable ,
d210 1
a210 1
.Ar scrub .
d212 1
a212 1
.Ar log
d216 1
a216 1
.It Ar pass
d219 1
a219 1
.Ar no state
d225 1
a225 1
.It Ar in No or Ar out
d227 1
a227 1
.Ar in
d229 1
a229 1
.Ar out
d233 1
a233 1
.It Ar log Pq Cm all | matches | to Ao Ar interface Ac | Cm user
d238 1
a238 1
.Ar no state
d242 2
a243 1
interface, by default pflog0;
d263 1
a263 1
.Ar no state
d271 1
a271 1
.Cm to Aq Ar interface
d280 2
a281 1
To specify a logging interface other than pflog0,
d283 2
a284 2
.Cm to Aq Ar interface .
.It Ar quick
d286 1
a286 1
.Ar quick
d290 1
a290 1
.It Ar on Aq Ar interface
d298 1
a298 1
.Ar any
d300 1
a300 1
.It Ar on Ar rdomain Aq Ar number
d303 1
a303 1
.It Aq Ar af
d305 1
a305 5
Supported values are
.Ar inet
and
.Ar inet6 .
.It Ar proto Aq Ar protocol
d311 1
a311 1
.Em /etc/protocols .
d313 5
a317 5
.Ar from Aq Ar source
.Ar port Aq Ar source
.Ar os Aq Ar source
.Ar to Aq Ar dest
.Ar port Aq Ar dest
d326 2
a327 2
.Bl -tag -width xxxxxxxxxxxxxx -compact
.It Ar any
d329 1
a329 1
.It Ar no-route
d331 1
a331 1
.It Ar route Aq Ar label
d334 2
a335 2
label.
.It Ar self
d337 4
a340 3
.It Aq Ar table
Any address matching the given table.
.It Ar urpf-failed
d355 1
a355 1
.Ar self
d358 2
a359 2
.Bl -tag -width xxxxxxxxxxxx -compact
.It Ar :0
d361 1
a361 1
.It Ar :broadcast
d363 1
a363 1
.It Ar :network
d365 1
a365 1
.It Ar :peer
d370 2
a371 2
.Ar :0
option appended to restrict the name resolution to the first of each
d384 1
a384 2
This is especially useful with
.Ar nat .
d388 1
a388 1
.Em www .
d414 1
a414 1
.It port 2000:2004
d418 1
a418 1
.It port 2000 >< 2004
d422 1
a422 1
.It port 2000 <> 2004
d430 1
a430 1
.Ar os
d436 6
a441 2
The host, port, and OS specifications are optional,
as in the following examples:
d457 3
a459 2
.It Ar all
This is equivalent to "from any to any".
d461 1
a461 1
.It Ar allow-opts
d465 1
a465 1
.Ar allow-opts
d467 1
a467 1
.Ar pass
d472 2
a473 4
The implicit
.Ar pass
rule that is used when a packet does not match any rules does not
allow IP options.
d475 1
a475 1
.It Ar divert-packet Ar port Aq Ar port
d481 1
a481 1
.Ar reassemble tcp
d483 1
a483 1
.Ar divert-packet
d486 1
a486 1
.It Ar divert-reply
d493 1
a493 3
.It Xo Ar divert-to Aq Ar host
.Ar port Aq Ar port
.Xc
d502 1
a502 1
.It Ar flags Ao Ar a Ac Ns / Ns Ao Ar b Ac | Ar any
d504 1
a504 1
.Aq Ar a
d506 1
a506 1
.Aq Ar b .
d508 1
a508 1
.Aq Ar b
d511 1
a511 1
.Ar flags S/SA .
d513 1
a513 1
.Ar flags any .
d515 2
a516 2
.Bl -tag -width Fl
.It Ar flags S/S
d519 1
a519 1
.It Ar flags S/SA
d524 1
a524 1
.It Ar flags /SFRA
d530 1
a530 1
.Ar flags S/SA
d532 1
a532 1
.Ar no state
d539 1
a539 1
.Ar flags any .
d547 4
a550 4
.Ar af-to ,
.Ar modulate ,
.Ar nat-to ,
.Ar rdr-to ,
d552 1
a552 1
.Ar synproxy state
d554 1
a554 1
.Ar reassemble tcp ,
d558 1
a558 1
.It Ar group Aq Ar group
d560 3
a562 2
.Ar user ,
this rule only applies to packets of sockets owned by the specified group.
d564 2
a565 6
.It Xo Ar icmp-type Aq Ar type
.Ar code Aq Ar code
.Xc
.It Xo Ar icmp6-type Aq Ar type
.Ar code Aq Ar code
.Xc
d574 1
a574 1
.Ar icmp-type
d576 1
a576 1
.Ar icmp6-type
d580 1
a580 1
.It Ar label Aq Ar string
d583 1
a583 1
.Dq pfctl -s labels
d589 1
a589 1
.It Ar $dstaddr
d591 1
a591 1
.It Ar $dstport
d593 1
a593 1
.It Ar $if
d595 1
a595 1
.It Ar $nr
d597 1
a597 1
.It Ar $proto
d599 1
a599 1
.It Ar $srcaddr
d601 1
a601 1
.It Ar $srcport
d621 1
a621 1
.Ar label
d624 1
a624 1
.It Ar once
d630 1
a630 1
.It Ar probability Aq Ar number
d638 1
a638 1
.It Ar prio Aq Ar number
d641 1
a641 1
.It Ar received-on Aq Ar interface
d643 1
a643 1
.Ar interface
d645 1
a645 1
.Ar any
d648 1
a648 1
.It Ar rtable Aq Ar number
d652 1
a652 6
.It Xo Ar set prio Aq Ar priority
.No \&| Po
.Aq Ar priority ,
.Aq Ar priority
.Pc
.Xc
d661 1
a661 1
.Ar lowdelay
d674 1
a674 1
.Ar set prio
d680 3
a682 7
.It Xo Ar set queue Aq Ar queue
.No \&| Po
.Aq Ar queue ,
.Aq Ar queue
.Pc
.Xc
Packets matching this rule will be assigned to the specified queue.
d684 1
a684 1
.Ar lowdelay
d696 1
a696 3
.It Xo Ar set tos Aq Ar string
.No \&| Aq Ar number
.Xc
d700 6
a705 6
.Ar critical ,
.Ar inetcontrol ,
.Ar lowdelay ,
.Ar netcontrol ,
.Ar throughput ,
.Ar reliability ,
d707 3
a709 3
.Ar ef ,
.Ar af11 ... af43 ,
.Ar cs0 ... cs7 ;
d713 3
a715 3
.It Ar tag Aq Ar string
Packets matching this rule will be tagged with the
specified string.
d722 1
a722 1
.Qq sticky ,
d730 1
a730 1
.It Ar tagged Aq Ar string
d733 3
a735 1
be tagged with the given tag in order to match the rule.
d740 1
a740 1
.Ar tagged
d743 1
a743 3
.It Xo Ar tos Aq Ar string
.No \&| Aq Ar number
.Xc
d747 6
a752 6
.Ar critical ,
.Ar inetcontrol ,
.Ar lowdelay ,
.Ar netcontrol ,
.Ar throughput ,
.Ar reliability ,
d754 3
a756 3
.Ar ef ,
.Ar af11 ... af43 ,
.Ar cs0 ... cs7 ;
d767 3
a769 2
.It Ar user Aq Ar user
This rule only applies to packets of sockets owned by the specified user.
d779 1
a779 1
.Ar user
d781 1
a781 1
.Ar self .
d787 5
a791 1
User and group refer to the effective (as opposed to the real) IDs, in
d825 2
a826 2
.Bl -tag -width xxxxxxxx
.It Ar af-to
d829 1
a829 1
.Ar af-to
d833 1
a833 1
.Ar af-to
d876 1
a876 1
.It Ar binat-to
d878 1
a878 1
.Ar binat-to
d882 1
a882 1
.Ar nat-to
d884 1
a884 1
.Ar rdr-to
d886 1
a886 1
.It Ar nat-to
d888 1
a888 1
.Ar nat-to
d893 3
a895 1
machines on an "inside" network.
d905 1
a905 1
.Ar nat-to
d908 1
a908 1
.It Ar rdr-to
d911 1
a911 1
.Ar rdr-to
d921 1
a921 1
.Ar rdr-to
d929 1
a929 1
.Ar nat-to
d931 1
a931 1
.Ar rdr-to
d934 1
a934 1
.Ar binat-to
d975 2
a976 2
.Ar af-to ,
.Ar nat-to
d978 1
a978 1
.Ar rdr-to
d984 1
a984 1
.It Ar bitmask
d986 1
a986 1
.Ar bitmask
d989 1
a989 1
.Ar nat-to ,
d991 2
a992 2
.Ar rdr-to ) .
.It Ar least-states Op Ar sticky-address
d994 1
a994 1
.Ar least-states
d1001 1
a1001 1
.Ar sticky-address
d1009 2
a1010 2
.Ar set timeout src.track .
.It Ar random Op Ar sticky-address
d1012 1
a1012 1
.Ar random
d1014 1
a1014 1
.Ar sticky-address
d1016 1
a1016 1
.It Ar round-robin Op Ar sticky-address
d1018 1
a1018 1
.Ar round-robin
d1023 1
a1023 1
.Ar sticky-address
d1025 1
a1025 1
.It Ar source-hash Op Ar key
d1027 1
a1027 1
.Ar source-hash
d1037 1
a1037 1
.It Ar static-port
d1039 1
a1039 1
.Ar nat
d1041 1
a1041 1
.Ar static-port
d1048 1
a1048 1
.Ar bitmask
d1055 2
a1056 2
.Bl -tag -width xxxx
.It Ar dup-to
d1058 1
a1058 1
.Ar dup-to
d1060 1
a1060 1
.Ar route-to .
d1062 1
a1062 1
.It Ar reply-to
d1064 1
a1064 1
.Ar reply-to
d1066 1
a1066 1
.Ar route-to ,
d1070 1
a1070 1
.Ar reply-to
d1075 1
a1075 1
.It Ar route-to
d1077 1
a1077 1
.Ar route-to
d1081 1
a1081 1
.Ar route-to
d1089 2
a1090 2
.Ar dup-to ,
.Ar reply-to ,
d1092 1
a1092 1
.Ar route-to
d1098 3
a1100 3
.Ar least-states ,
.Ar random ,
.Ar round-robin ,
d1102 1
a1102 1
.Ar source-hash ,
d1108 1
a1108 1
.Ar set
d1111 1
a1111 1
.It Ar set block-policy
d1113 1
a1113 1
.Ar block-policy
d1115 1
a1115 1
.Ar block
d1118 2
a1119 2
.Bl -tag -width xxxxxxxx -compact
.It Ar drop
d1121 1
a1121 1
.It Ar return
d1126 1
a1126 1
.It Ar set debug
d1145 3
a1147 2
.It Ar set fingerprints
Load fingerprints of known operating systems from the given filename.
d1155 3
a1157 3
.It Ar set hostid
The 32-bit
.Ar hostid
d1166 1
a1166 1
.It Ar set limit
d1175 1
a1175 1
.Ar pass
d1177 1
a1177 1
.Ar no state )
d1194 1
a1194 1
.Ar sticky-address
d1196 1
a1196 1
.Ar src.track
d1215 1
a1215 1
.It Ar set loginterface
d1231 1
a1231 1
.It Ar set optimization
d1235 1
a1235 1
.It Ar aggressive
d1239 1
a1239 1
.It Ar conservative
d1244 1
a1244 1
.It Ar high-latency
d1246 1
a1246 1
.It Ar normal
d1249 1
a1249 1
.It Ar satellite
d1251 1
a1251 1
.Ar high-latency .
d1253 1
a1253 1
.It Ar set reassemble
d1255 1
a1255 1
.Ar reassemble
d1258 1
a1258 1
.Ar yes
d1260 1
a1260 1
.Ar no .
d1262 1
a1262 1
.Ar no-df
d1264 1
a1264 1
.Ar dont-fragment
d1268 1
a1268 1
.Ar dont-fragment
d1270 3
a1272 3
.It Ar set ruleset-optimization
.Bl -tag -width xxxxxxxx -compact
.It Ar basic
d1288 2
a1289 1
.It Ar none
d1291 1
a1291 1
.It Ar profile
d1293 3
a1295 1
ordering of quick rules to actual network traffic.
d1310 1
a1310 1
.It Ar set skip on Aq Ar ifspec
d1319 1
a1319 1
.It Ar set state-defaults
d1321 1
a1321 1
.Ar state-defaults
d1324 1
a1324 1
.Ar keep state .
d1328 1
a1328 1
.It Ar set state-policy
d1330 1
a1330 1
.Ar state-policy
d1334 1
a1334 1
.It Ar if-bound
d1336 1
a1336 1
.It Ar floating
d1339 1
a1339 1
.It Ar set timeout
d1341 1
a1341 1
.It Ar frag
d1343 1
a1343 1
.It Ar interval
d1345 1
a1345 1
.It Ar src.track
d1359 1
a1359 1
.It Ar tcp.closed
d1361 1
a1361 1
.It Ar tcp.closing
d1363 1
a1363 1
.It Ar tcp.established
d1365 1
a1365 1
.It Ar tcp.finwait
d1370 1
a1370 1
.Ar tcp.finwait
d1372 1
a1372 1
.Ar tcp.closing )
d1374 1
a1374 1
.It Ar tcp.first
d1376 1
a1376 1
.It Ar tcp.opening
d1385 1
a1385 1
.It Ar icmp.error
d1387 1
a1387 1
.It Ar icmp.first
d1389 1
a1389 1
.It Ar udp.first
d1391 1
a1391 1
.It Ar udp.multiple
d1393 1
a1393 1
.It Ar udp.single
d1401 3
a1403 3
.It Ar other.first
.It Ar other.multiple
.It Ar other.single
d1410 1
a1410 1
.It Ar adaptive.end
d1415 1
a1415 1
.It Ar adaptive.start
d1478 1
a1478 1
.Ar max
d1492 1
a1492 1
.Ar bandwidth
d1495 2
a1496 2
.Ar K ,
.Ar M ,
d1498 1
a1498 1
.Ar G
d1506 1
a1506 1
.It Ar default
d1509 1
a1509 1
.It Ar on Aq Ar interface
d1512 1
a1512 1
.It Ar parent Aq Ar name
d1516 1
a1516 1
.It Ar qlimit Aq Ar limit
d1522 1
a1522 1
.Ar queue
d1528 1
a1528 1
.Ar lowdelay
d1579 1
a1579 1
.Ar nat-to
d1581 1
a1581 1
.Ar rdr-to
d1583 1
a1583 1
.Ar bitmask
d1591 1
a1591 1
.It Ar manually
d1593 1
a1593 1
.Ar add
d1595 1
a1595 1
.Ar replace
d1599 1
a1599 1
.It Pa pf.conf
d1605 1
a1605 1
.Ar table
d1618 1
a1618 1
.It Ar const
d1620 1
a1620 1
.Ar const
d1629 1
a1629 1
.It Ar counters
d1631 1
a1631 1
.Ar counters
d1634 1
a1634 1
.It Ar persist
d1636 1
a1636 1
.Ar persist
d1642 2
a1643 2
This example
creates a table called private,
d1645 2
a1646 1
and a table called badhosts,
d1681 1
a1681 1
.Ar all
d1685 1
a1685 1
.Ar self
d1691 1
a1691 3
can specify
.Ar anchor
attachment points.
d1695 1
a1695 1
.Ar anchor
d1722 1
a1722 1
.Ar load anchor
d1775 1
a1775 1
.Ar quick
d1779 1
a1779 1
.Ar quick
d1787 1
a1787 1
.It Ar anchor Aq Ar name
d1806 1
a1806 1
.Ar load anchor
d1840 1
a1840 1
.Ar pass
d1848 1
a1848 1
.Ar reassemble tcp
d1880 1
a1880 1
.Ar nat-to
d1882 1
a1882 1
.Ar rdr-to
d1894 1
a1894 1
.Ar no state
d1900 1
a1900 1
.Ar no state
d1914 1
a1914 1
.Ar modulate state
d1921 1
a1921 1
.Ar modulate state
d1943 1
a1943 1
.Ar flags
d1945 1
a1945 1
.Ar modulate state
d1962 1
a1962 1
.Ar synproxy state
d1980 1
a1980 1
.Ar synproxy state
d1982 1
a1982 1
.Ar modulate state .
d1985 1
a1985 1
.Ar synproxy
d1999 2
a2000 2
.Ar keep state ,
.Ar modulate state ,
d2002 1
a2002 1
.Ar synproxy state
d2006 1
a2006 1
.It Ar floating
d2009 1
a2009 1
.Ar if-bound ) .
d2011 1
a2011 1
.It Ar if-bound
d2014 2
a2015 2
.Ar floating ) .
.It Ar max Aq Ar number
d2019 1
a2019 1
.It Ar no-sync
d2023 1
a2023 1
.It Ar pflow
d2027 1
a2027 1
.It Ar sloppy
d2034 1
a2034 1
.Ar modulate
d2036 8
a2043 6
.Ar synproxy state .
.It Xo Aq Ar timeout
.Aq Ar seconds
.Xc
Changes the timeout values used for states created by this rule.
For a list of all valid timeout names, see
d2057 1
a2057 1
.Ar source-track
d2061 1
a2061 1
.It Ar source-track global
d2064 1
a2064 1
.Ar max-src-nodes
d2066 1
a2066 1
.Ar max-src-states
d2069 1
a2069 1
.It Ar source-track rule
d2071 1
a2071 1
.Ar max-src-nodes
d2073 1
a2073 1
.Ar max-src-states
d2082 1
a2082 1
.It Ar max-src-nodes Aq Ar number
d2085 1
a2085 1
.It Ar max-src-states Aq Ar number
d2095 1
a2095 1
.It Ar max-src-conn Aq Ar number
d2098 1
a2098 3
.It Xo Ar max-src-conn-rate Aq Ar number
.No / Aq Ar seconds
.Xc
d2109 1
a2109 1
.Ar overload Aq Ar table
d2111 2
a2112 1
established connections will be added to the named table.
d2118 1
a2118 1
.Ar flush
d2122 4
a2125 2
.Ar global
modifier to the flush command kills all states originating from the
d2131 1
a2131 3
to the
.Aq bad_hosts
table and have all states originating from it flushed.
d2148 1
a2148 1
.Ar scrub
d2154 1
a2154 1
.It Ar max-mss Aq Ar number
d2156 1
a2156 1
.It Ar min-ttl Aq Ar number
d2158 1
a2158 1
.It Ar no-df
d2160 1
a2160 1
.Ar dont-fragment
d2164 1
a2164 1
.Ar dont-fragment
d2168 1
a2168 1
.Ar dont-fragment
d2170 1
a2170 1
.Ar no-df
d2174 1
a2174 1
.Ar dont-fragment
d2177 1
a2177 1
.Ar dont-fragment
d2181 1
a2181 1
.Ar random-id
d2183 1
a2183 1
.Ar no-df
d2185 1
a2185 1
.It Ar random-id
d2190 1
a2190 1
.It Ar reassemble tcp
d2192 1
a2192 1
.Ar reassemble tcp
d2199 1
a2199 1
.Ar reassemble tcp
d2215 1
a2215 1
.Ar reassemble tcp
d2217 1
a2217 1
.Ar scrub
d2229 1
a2229 1
.Ar reassemble tcp
d2263 1
a2263 1
.Ar fragment
d2267 1
a2267 1
.Ar fragment
d2300 1
a2300 1
.Ar antispoof
d2329 1
a2329 1
.Ar antispoof
d2362 1
a2362 1
.Ar no-df
d2382 1
a2382 1
.Ar unknown
d2408 2
a2409 1
the external interface is kue0.
d2510 1
a2510 1
.Ar pass
d2512 1
a2512 1
.Ar quick
d2558 1
a2558 1
.Ar rdr-to
d2570 3
a2572 1
using the source-hash keyword.
d2584 1
a2584 1
.Ar binat-to
d2586 1
a2586 1
.Ar nat-to
d2588 1
a2588 1
.Ar rdr-to
d2795 1
a2795 1
                 [ sticky-address ]
@


1.547
log
@fix some spelling messes.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.546 2015/09/14 20:06:59 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: September 14 2015 $
d1618 1
a1618 1
.Bl -tag -width persist
@


1.546
log
@Avoid .Ns right after .Pf, it's pointless.
In some cases, do additional cleanup in the immediate vicinity.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.545 2015/02/16 21:43:10 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: February 16 2015 $
d1481 1
a1481 1
Similarily, a minimum (reserved) bandwidth can be specified.
d1515 1
a1515 1
Mandantory for all queues except root queues.
@


1.545
log
@after some discussion with henning, document the various log options as
one section; some text was altered to make it read better;

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.544 2015/02/16 16:21:25 bentley Exp $
d500 1
a500 4
.It Xo Ar flags Aq Ar a
.Pf / Ns Aq Ar b
.No \&| Ar any
.Xc
@


1.544
log
@Don't use greater-equal/less-equal symbols where "<="/">=" are intended.

Also, clean up some usage of predefined strings (which are discouraged by
mandoc_char(7) for portability reasons) and improve spacing in
hostapd.conf(5).

ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.543 2015/02/12 01:29:14 henning Exp $
d31 1
a31 1
.Dd $Mdocdate: February 12 2015 $
d230 3
a232 2
.It Ar log
In addition to the action specified, a log message is generated.
d239 2
a240 3
interface, by default
.Ar pflog0 .
This interface is monitored by the
d242 1
a242 1
logging daemon, which dumps the logged packets to the file
d247 11
a257 2
.It Ar log Pq Ar all
Used to force logging of all packets for a connection.
d261 12
a272 10
As with
.Ar log ,
packets are logged to
.Xr pflog 4 .
.It Ar log Pq Ar matches
Log this packet on all subsequent matching rules, using the log settings
given here, in particular to the pflog interface specified here so that
regular pflogs are not clobbered.
.It Ar log Pq Ar user
Logs the UID and PID of the
d275 4
a278 5
.It Ar log Pq Ar to Aq Ar interface
Send logs to the specified
.Xr pflog 4
interface instead of
.Ar pflog0 .
@


1.543
log
@a shot at documenting the changed log(matches) semantics
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.540 2014/12/19 13:04:08 reyk Exp $
d31 1
a31 1
.Dd $Mdocdate: February 10 2015 $
d387 4
a390 4
\*(Lt	(less than)
\*(Le	(less than or equal)
\*(Gt	(greater than)
\*(Ge	(greater than or equal)
d392 2
a393 2
\*(Gt\*(Lt	(range excluding boundaries)
\*(Lt\*(Gt	(except range)
d396 2
a397 2
.Sq \*(Gt\*(Lt ,
.Sq \*(Lt\*(Gt
d405 1
a405 1
.Sq all ports \*(Ge 2000 and \*(Le 2004 ,
d407 1
a407 1
.It port 2000 \*(Gt\*(Lt 2004
d409 1
a409 1
.Sq all ports \*(Gt 2000 and \*(Lt 2004 ,
d411 1
a411 1
.It port 2000 \*(Lt\*(Gt 2004
d413 1
a413 1
.Sq all ports \*(Lt 2000 or \*(Gt 2004 ,
d430 1
a430 1
pass in proto tcp from any port \*(Lt 1024 to any
d432 1
a432 1
pass in proto tcp from 10.0.0.0/8 port \*(Ge 1024 \e
d603 1
a603 1
      port \*(Gt 1023 label "$dstaddr:$dstport"
d609 1
a609 1
      port \*(Gt 1023 label "1.2.3.4:\*(Gt1023"
d611 1
a611 1
      port \*(Gt 1023 label "1.2.3.5:\*(Gt1023"
d804 1
a804 1
pass  out proto tcp from self user { \*(Lt 1000, dhartmei }
d1644 3
a1646 3
table \*(Ltprivate\*(Gt const { 10/8, 172.16/12, 192.168/16 }
table \*(Ltbadhosts\*(Gt persist
block on fxp0 from { \*(Ltprivate\*(Gt, \*(Ltbadhosts\*(Gt } to any
d1659 2
a1660 2
table \*(Ltspam\*(Gt persist file "/etc/spammers" file "/etc/openrelays"
block on fxp0 from \*(Ltspam\*(Gt to any
d2129 1
a2129 1
block quick from \*(Ltbad_hosts\*(Gt
d2131 1
a2131 1
      (max-src-conn-rate 100/10, overload \*(Ltbad_hosts\*(Gt flush global)
d2487 1
a2487 1
match in on $ext_if inet proto tcp from \*(Ltspammers\*(Gt to port smtp \e
d2667 1
a2667 1
table-rule     = "table" "\*(Lt" string "\*(Gt" [ tableopts ]
d2723 1
a2723 1
                 "\*(Lt" string "\*(Gt" )
d2740 1
a2740 1
unary-op       = [ "=" | "!=" | "\*(Lt" | "\*(Le" | "\*(Gt" | "\*(Ge" ]
d2742 1
a2742 1
binary-op      = number ( "\*(Lt\*(Gt" | "\*(Gt\*(Lt" | ":" ) number
d2767 1
a2767 1
                 "overload" "\*(Lt" string "\*(Gt" [ "flush" [ "global" ] ] |
@


1.542
log
@document matching on prio
@
text
@d31 1
a31 1
.Dd $Mdocdate: January 16 2015 $
d257 3
a259 1
Used to force logging of this packet on all subsequent matching rules.
@


1.541
log
@properly handle opening parentheses, correctly quote vertical bars,
and do not use the legacy predefined string \*(Ba
@
text
@d31 1
a31 1
.Dd $Mdocdate: December 19 2014 $
d630 3
d2646 1
a2646 1
                 "rtable" number | "probability" number"%" |
@


1.540
log
@Support source-hash and random with tables and dynifs; not just pools.
This finally allows to use source-hash for dynamic loadbalancing, eg.
"rdr-to <hosts> source-hash", instead of just round-robin and least-states.

An older pre-siphash version of this diff was tested by many people.

OK tedu@@ benno@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.539 2014/10/23 20:38:37 kspillner Exp $
d31 1
a31 1
.Dd $Mdocdate: October 23 2014 $
d490 1
a490 1
.No \*(Ba Ar any
d642 4
a645 2
.No \*(Ba ( Aq Ar priority ,
.Aq Ar priority )
d675 4
a678 2
.No \*(Ba ( Aq Ar queue ,
.Aq Ar queue )
d695 1
a695 1
.No \*(Ba Aq Ar number
d742 1
a742 1
.No \*(Ba Aq Ar number
@


1.539
log
@Add GRAMMAR to list of sections.

ok jmc@@, deraadt@@ (begrudgingly)
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.538 2014/05/28 21:13:21 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 28 2014 $
d1037 2
a1038 4
.Ar round-robin
and
.Ar least-states
are the only permitted pool types.
d1567 2
a1568 4
and in the routing options of filter rules, but only for
.Ar least-states
and
.Ar round-robin
@


1.538
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.537 2014/05/28 19:45:04 henning Exp $
d64 2
@


1.537
log
@prio is meaningless when bandwidth shaping is in use, fix example
noticed by Marko Cupać <marko.cupac at mimar dot rs>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.536 2014/01/21 03:15:46 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: January 21 2014 $
d1521 1
a1521 1
sessions get a queue with a minimum bandwidth,
d1525 1
a1525 1
bulk transfers go to a seperate queue.
@


1.536
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.535 2014/01/21 01:52:18 henning Exp $
d1521 1
a1521 1
sessions get priority over bulk transfers like
d1524 2
a1525 1
.Xr sftp 1 .
d1546 1
a1546 1
      set (queue(ssh_bulk, ssh_interactive), prio (3, 6))
@


1.535
log
@document how any matches any non-loopback interface, ok benno
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.534 2014/01/20 02:59:55 henning Exp $
d31 1
a31 1
.Dd $Mdocdate: January 20 2014 $
d895 1
a895 1
.It Pa rdr-to
@


1.534
log
@document !received-on, ok dlg benno
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.532 2013/12/21 20:57:01 camield Exp $
d31 1
a31 1
.Dd $Mdocdate: January 10 2014 $
d279 2
d632 2
@


1.533
log
@Using random-id is recommended in combination with no-df to ensure
unique IP identifiers.

ok henning@@
@
text
@d31 1
a31 1
.Dd $Mdocdate: December 21 2013 $
d2646 1
a2646 1
		 [ "received-on" ( interface-name | interface-group ) ]
@


1.532
log
@Document that the "user" socket check is not reliable with wildcard
listeners.  Update the example to reflect this.

Deprecate usage of user "unknown" too, same reason.

Noted by Maxim Khitrov on bugs

ok henning, jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.531 2013/11/27 15:16:29 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: November 27 2013 $
d2224 1
a2224 1
.Dl match in all scrub (no-df max-mss 1440)
@


1.531
log
@document better how priorities work, and fix an example;
diff originally from timo myyra, but tweaked according to henning
(equal prio packets are fifo, not round-robin);

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.530 2013/10/12 21:44:57 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: October 12 2013 $
d763 8
a770 3
For forwarded connections, where the firewall is not a connection endpoint,
the user and group are
.Em unknown .
a784 21
The value
.Ar unknown
matches packets of forwarded connections.
.Ar unknown
can only be used with the operators
.Cm =
and
.Cm != .
Other constructs like
.Cm user \*(Ge unknown
are invalid.
Forwarded packets with unknown user and group ID match only rules
that explicitly compare
.Ar unknown
with the operators
.Cm =
or
.Cm != .
For instance
.Cm user \*(Ge 0
does not match forwarded packets.
d788 2
a789 2
block out proto { tcp, udp } all
pass  out proto { tcp, udp } all user { \*(Lt 1000, dhartmei }
@


1.530
log
@i. e. -> i.e.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.529 2013/10/12 12:44:24 sthen Exp $
d649 3
d1557 1
a1557 1
      set (queue(ssh_bulk, ssh_interactive), prio (6, 3))
@


1.529
log
@explicitely->explicitly
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.528 2013/10/12 12:31:37 henning Exp $
d1453 1
a1453 1
Only leaf queues, i. e. queues without children, can be used to assign
@


1.528
log
@document new queueing. with lots of help from jmc. glanced over by many,
ok phessler sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.527 2013/04/25 16:53:11 sobrado Exp $
d31 1
a31 1
.Dd $Mdocdate: April 25 2013 $
d1457 1
a1457 1
unless explicitely specified.
@


1.527
log
@fix range for assigned ports managed by the IANA (see RFC 1700).

ok sthen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.526 2013/02/19 23:01:15 sthen Exp $
d4 1
d31 1
a31 1
.Dd $Mdocdate: February 19 2013 $
d1440 1
a1440 1
At least two declarations are required to configure queues, and later
d1446 2
a1447 5
name is where any packets from
.Ar pass
rules will be queued, while for
.Ar block
rules it specifies where any resulting ICMP or TCP RST
d1449 2
a1450 8
The
.Em scheduler
defines the algorithm used to decide which packets get delayed, dropped, or
sent out immediately.
There are three schedulers currently supported:
.Bl -tag -width xxxx
.It Ar cbq
Class Based Queueing.
d1453 31
a1483 42
Each queue can have a
.Ar priority
and a
.Ar bandwidth
assigned.
Priority mainly controls the time packets take to get sent out,
while bandwidth has primarily effects on throughput.
.Ar cbq
achieves both partitioning and sharing of link bandwidth
by hierarchically structured classes.
Each class has its own queue
and is assigned its share of bandwidth.
A child class can borrow bandwidth from its parent class
as long as excess bandwidth is available
(see the option
.Ar borrow ,
below).
.It Ar hfsc
Hierarchical Fair Service Curve.
Queues attached to an interface build a tree,
thus each queue can have further child queues.
Each queue can have a
.Ar priority
and a
.Ar bandwidth
assigned.
Priority mainly controls the time packets take to get sent out,
while bandwidth primarily affects throughput.
.Ar hfsc
supports both link-sharing and guaranteed real-time services.
It employs a service curve based QoS model,
and its unique feature is an ability to decouple
delay and bandwidth allocation.
.It Ar priq
Priority Queueing.
Queues are flat attached to the interface,
thus queues cannot have further child queues.
Each queue has a unique
.Ar priority
assigned, ranging from 0 to 15.
Packets in the queue with the highest priority are processed first.
.El
d1485 1
a1485 14
The interfaces on which queueing should be activated are declared using
the
.Ar altq on
declaration.
.Ar altq on
has the following keywords:
.Bl -tag -width xxxx
.It Aq Ar interface
Queueing is enabled on the named interface.
.It Aq Ar scheduler
Specifies which queueing scheduler to use.
.It Ar bandwidth Aq Ar bw
The maximum bitrate for all queues on an
interface may be specified using the
d1487 4
a1490 7
keyword.
The value can be specified as an absolute value or as a
percentage of the interface bandwidth.
When using an absolute value, the suffixes
.Ar b ,
.Ar Kb ,
.Ar Mb ,
d1492 1
a1492 1
.Ar Gb
a1495 23
If
.Ar bandwidth
is not specified, the interface bandwidth is used
(but take note that some interfaces do not know their bandwidth,
or can adapt their bandwidth rates).
.It Ar qlimit Aq Ar limit
The maximum number of packets held in the queue.
The default is 50.
.It Ar tbrsize Aq Ar size
Adjusts the size, in bytes, of the token bucket regulator.
If not specified, heuristics based on the
interface bandwidth are used to determine the size.
.It Ar queue Aq Ar list
Defines a list of subqueues to create on an interface.
.El
.Pp
In the following example, the interface dc0
should queue up to 5Mbps in four second-level queues using
Class Based Queueing.
Those four queues will be shown in a later example.
.Bd -literal -offset indent
altq on dc0 cbq bandwidth 5Mb queue { std, http, mail, ssh }
.Ed
d1497 2
a1498 11
Once interfaces are activated for queueing using the
.Ar altq
directive, a sequence of
.Ar queue
directives may be defined.
The name associated with a queue
must match a queue defined in the altq
directive or, except for the
.Ar priq
scheduler, in a parent queue declaration.
The following keywords can be used:
d1500 3
d1506 4
a1509 26
.It Ar bandwidth Aq Ar bw
Specifies the maximum bitrate to be processed by the queue.
This value must not exceed the value of the parent
.Ar queue
and can be specified as an absolute value or a percentage of the parent
queue's bandwidth.
If not specified, defaults to 100% of the parent queue's bandwidth.
The
.Ar priq
scheduler does not support bandwidth specification.
.It Ar priority Aq Ar level
Between queues a priority level can be set.
For
.Ar cbq
and
.Ar hfsc ,
the range is 0 to 7 and for
.Ar priq ,
the range is 0 to 15.
The default for all is 1.
.Ar priq
queues with a higher priority are always served first.
.Ar cbq
and
.Ar hfsc
queues with a higher priority are preferred in the case of overload.
a1514 66
The scheduler can specify additional parameters using the format
.Ar scheduler Ns Pq Ar parameters .
The parameters are:
.Bl -tag -width Fl
.It Ar default
Packets not matched by another queue are assigned to this one.
Exactly one default queue is required.
.It Ar ecn
Enables Explicit Congestion Notification (ECN) on this queue.
ECN implies RED.
.It Ar red
Enables Random Early Detection (RED) on this queue.
RED drops packets with a probability proportional to the average
queue length.
.El
.Pp
The
.Ar cbq
scheduler supports an additional option:
.Pp
.Bl -tag -width "upperlimit XXXXXXX" -compact -offset 3n
.It Ar borrow
The queue can borrow bandwidth from the parent.
.El
.Pp
The
.Ar hfsc
scheduler supports some additional options:
.Pp
.Bl -tag -width "upperlimit XXXXXXX" -compact -offset 3n
.It Ar linkshare Aq Ar sc
The bandwidth share of a backlogged queue.
.It Ar realtime Aq Ar sc
The minimum required bandwidth for the queue.
.It Ar upperlimit Aq Ar sc
The maximum allowed bandwidth for the queue.
.El
.Pp
.Aq Ar sc
is an abbreviation for
.Ar service curve .
.Pp
The format for service curve specifications is
.Ar ( m1 , d , m2 ) .
.Ar m2
controls the bandwidth assigned to the queue.
.Ar m1
and
.Ar d
are optional and can be used to control the initial bandwidth assignment.
For the first
.Ar d
milliseconds the queue gets the bandwidth given as
.Ar m1 ,
afterwards the value given in
.Ar m2 .
.Pp
Furthermore, with
.Ar cbq
and
.Ar hfsc ,
child queues can be specified as in an
.Ar altq
declaration, thus building a tree of queues using a part of
their parent's bandwidth.
.Pp
d1534 1
a1534 1
The queues may then be referenced by filtering rules (see
d1538 9
a1546 9
queue std bandwidth 10% cbq(default)
queue http bandwidth 60% priority 2 cbq(borrow red) \e
      { employees, developers }
queue  developers bandwidth 75% cbq(borrow)
queue  employees bandwidth 15%
queue mail bandwidth 10% priority 0 cbq(borrow ecn)
queue ssh bandwidth 20% cbq(borrow) { ssh_interactive, ssh_bulk }
queue  ssh_interactive bandwidth 50% priority 7 cbq(borrow)
queue  ssh_bulk bandwidth 50% priority 0 cbq(borrow)
d1548 2
a1549 2
block return out on dc0 inet all set queue std
pass out on dc0 inet proto tcp from $developerhosts to any port 80 \e
d1551 1
a1551 1
pass out on dc0 inet proto tcp from $employeehosts to any port 80 \e
d1553 3
a1555 3
pass out on dc0 inet proto tcp from any to any port 22 \e
      set queue(ssh_bulk, ssh_interactive)
pass out on dc0 inet proto tcp from any to any port 25 \e
d2612 1
a2612 1
                 antispoof-rule | altq-rule | queue-rule | anchor-rule |
a2676 2
altq-rule      = "altq on" interface-name queueopts-list
                 "queue" subqueue
a2677 1
                 subqueue
d2687 5
a2691 5
queueopts      = [ "bandwidth" bandwidth-spec ] |
                 [ "qlimit" number ] | [ "tbrsize" number ] |
                 [ "priority" number ] | [ schedulers ]
schedulers     = ( cbq-def | priq-def | hfsc-def )
bandwidth-spec = "number" ( "b" | "Kb" | "Mb" | "Gb" | "%" )
a2788 14
subqueue       = string | "{" queue-list "}"
queue-list     = string [ [ "," ] string ]
cbq-def        = "cbq" [ "(" cbq-opt [ [ "," ] cbq-opt ] ")" ]
priq-def       = "priq" [ "(" priq-opt [ [ "," ] priq-opt ] ")" ]
hfsc-def       = "hfsc" [ "(" hfsc-opt [ [ "," ] hfsc-opt ] ")" ]
cbq-opt        = ( "default" | "borrow" | "red" | "ecn" )
priq-opt       = ( "default" | "red" | "ecn" )
hfsc-opt       = ( "default" | "red" | "ecn" |
                 linkshare-sc | realtime-sc | upperlimit-sc )
linkshare-sc   = "linkshare" sc-spec
realtime-sc    = "realtime" sc-spec
upperlimit-sc  = "upperlimit" sc-spec
sc-spec        = ( bandwidth-spec |
                 "(" bandwidth-spec number bandwidth-spec ")" )
@


1.526
log
@Make it clear that the default implicit 'pass' rule does not create state,
make sense to deraadt@@, ok/wording tweak from mikeb.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.525 2013/01/16 02:43:24 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: January 16 2013 $
d423 1
a423 1
pass in proto tcp from any port \*(Le 1024 to any
d425 1
a425 1
pass in proto tcp from 10.0.0.0/8 port \*(Gt 1024 \e
@


1.525
log
@move the "set queue" block a bit down so that
a) things are in alphabetical order again
b) the "described below" in the set prio section actually refers to a block
of text below and not above it... ok jsing
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.524 2013/01/16 01:49:20 henning Exp $
d119 1
a119 1
the packet.
@


1.524
log
@for consistency with prio etc, the queue assignment really belongs
into the set block. so make pfctl accept, print and the manpage document
.  match set queue foo
instead of
.  match queue foo
but keep accepting the old way without the explicit set.
ok bob, man jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.522 2012/09/20 11:52:46 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: October 18 2012 $
a624 18
.It Xo Ar set queue Aq Ar queue
.No \*(Ba ( Aq Ar queue ,
.Aq Ar queue )
.Xc
Packets matching this rule will be assigned to the specified queue.
If two queues are given, packets which have a TOS of
.Ar lowdelay
and TCP ACKs with no data payload will be assigned to the second one.
See
.Sx QUEUEING
for setup details.
.Pp
For example:
.Bd -literal -offset indent
pass in proto tcp to port 25 set queue mail
pass in proto tcp to port 22 set queue(ssh_bulk, ssh_prio)
.Ed
.Pp
d661 18
@


1.523
log
@Disallow tables and interface address pools for rdr-to, nat-to and
route-to with any other scheduling algorithms than round-robin or
least-states.  Before this change, pfctl accepted and loaded invalid
address pools, eg. "rdr-to <table> source-hash", but it is not
supported by the kernel and was silently ignored in operation.

Also clarify the manpage a bit by mentioning that tables are only
valid with round-robin or least-states.

ok zinke@@
@
text
@d30 1
a30 1
.Dd $Mdocdate: September 20 2012 $
d625 1
a625 1
.It Xo Ar queue Aq Ar queue
d639 2
a640 2
pass in proto tcp to port 25 queue mail
pass in proto tcp to port 22 queue(ssh_bulk, ssh_prio)
d1700 1
a1700 1
block return out on dc0 inet all queue std
d1702 1
a1702 1
      queue developers
d1704 1
a1704 1
      queue employees
d1706 1
a1706 1
      queue(ssh_bulk, ssh_interactive)
d1708 1
a1708 1
      queue mail
d2800 1
a2800 1
                 "queue" ( string | "(" string [ [ "," ] string ] ")" ) |
@


1.522
log
@remove unneccessary macro;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.521 2012/09/20 09:43:49 camield Exp $
d1042 1
a1042 1
When more than one redirection address is specified,
@


1.521
log
@Lower pf frags limit to not risk running out of mbuf clusters
when dealing with lots of IP fragments.

This sets the default to 25% of the mbuf cluster maximum (hint
from beck).  And the example in the manpage is sane now.

ok mikeb henning beck deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.520 2012/07/10 17:22:52 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: July 10 2012 $
a911 1
.Pp
@


1.520
log
@it seems previous was wrong, so move prio/tos out of OPTIONS,
and put them into the main filtering section, at least for now;

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.519 2012/07/10 09:40:35 jmc Exp $
d1180 1
a1180 1
reassembly to 20000:
d1182 6
a1187 1
.Dl set limit frags 20000
d1210 1
a1210 1
set limit { states 20000, frags 20000, src-nodes 2000 }
@


1.519
log
@move set prio/tos into OPTIONS; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.518 2012/07/09 20:52:59 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: July 9 2012 $
d652 47
a1244 27
.It Xo Ar set prio Aq Ar priority
.No \*(Ba ( Aq Ar priority ,
.Aq Ar priority )
.Xc
Packets matching this rule will be assigned a specific queueing priority.
Priorities are assigned as integers 0 through 7,
with a default priority of 3.
If the packet is transmitted on a
.Xr vlan 4
interface, the queueing priority will also be written as the priority
code point in the 802.1Q VLAN header.
If two priorities are given, packets which have a TOS of
.Ar lowdelay
and TCP ACKs with no data payload will be assigned to the second one.
.Pp
For example:
.Bd -literal -offset indent
pass in proto tcp to port 25 set prio 2
pass in proto tcp to port 22 set prio (2, 5)
.Ed
.Pp
The interface priority queues accessed by the
.Ar set prio
keyword are always enabled and do not require any additional
configuration, unlike the queues described below and in the
.Sx QUEUEING
section.
a1430 18
.It Xo Ar set tos Aq Ar string
.No \*(Ba Aq Ar number
.Xc
Enforces a TOS for matching packets.
.Ar string
may be one of
.Ar critical ,
.Ar inetcontrol ,
.Ar lowdelay ,
.Ar netcontrol ,
.Ar throughput ,
.Ar reliability ,
or one of the DiffServ Code Points:
.Ar ef ,
.Ar af11 ... af43 ,
.Ar cs0 ... cs7 ;
.Ar number
may be either a hex or decimal number.
d2806 1
a2806 1
		 [ route ] |
d2811 1
a2811 1
                 "set tos" tos | "reassemble tcp" | "random-id"
@


1.518
log
@one more prio -> set prio; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.517 2012/07/09 15:20:57 zinke Exp $
a624 28
.It Xo Ar set prio Aq Ar priority
.No \*(Ba ( Aq Ar priority ,
.Aq Ar priority )
.Xc
Packets matching this rule will be assigned a specific queueing priority.
Priorities are assigned as integers 0 through 7,
with a default priority of 3.
If the packet is transmitted on a
.Xr vlan 4
interface, the queueing priority will also be written as the priority
code point in the 802.1Q VLAN header.
If two priorities are given, packets which have a TOS of
.Ar lowdelay
and TCP ACKs with no data payload will be assigned to the second one.
.Pp
For example:
.Bd -literal -offset indent
pass in proto tcp to port 25 set prio 2
pass in proto tcp to port 22 set prio (2, 5)
.Ed
.Pp
The interface priority queues accessed by the
.Ar set prio
keyword are always enabled and do not require any additional
configuration, unlike the queues described below and in the
.Sx QUEUEING
section.
.Pp
d1198 27
d1411 18
a2378 18
.It Xo Ar set tos Aq Ar string
.No \*(Ba Aq Ar number
.Xc
Enforces a TOS for matching packets.
.Ar string
may be one of
.Ar critical ,
.Ar inetcontrol ,
.Ar lowdelay ,
.Ar netcontrol ,
.Ar throughput ,
.Ar reliability ,
or one of the DiffServ Code Points:
.Ar ef ,
.Ar af11 ... af43 ,
.Ar cs0 ... cs7 ;
.Ar number
may be either a hex or decimal number.
@


1.517
log
@Enable support for the 'weight' keyword in the 'least-states'
load balancing case, this allows Weighted Least States (WLS).
Everything prepared on c2k11 with help from mcbride@@.

This finally makes PF ready for the cloud.

ok henning@@ mikeb@@ pyr@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.516 2012/07/09 14:05:35 henning Exp $
d647 1
a647 1
.Ar prio
@


1.516
log
@fix some of the confusion we have in pf regarding filter criteria vs
options that "write" to the packet by putting the latter in a set { } block.
for now prio and tos, maintain set-tos backwards compat for the moment.
"match set { prio 6, tos lowdelay }"
"match set prio 6"
from a discussion with ryan in tokyo a while ago, ok ryan phessler
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.514 2012/04/24 14:56:08 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: June 29 2012 $
d973 4
a976 1
a given address pool.
@


1.515
log
@tcp/udp mandatory for "user"; from ti zed
ok henning
@
text
@d30 1
a30 1
.Dd $Mdocdate: April 24 2012 $
d625 1
a625 1
.It Xo Ar prio Aq Ar priority
d642 2
a643 2
pass in proto tcp to port 25 prio 2
pass in proto tcp to port 22 prio (2, 5)
d2359 1
a2359 1
.It Xo Ar set-tos Aq Ar string
d2362 1
a2362 1
Enforces a TOS for matching IPv4 packets.
d2791 1
a2791 1
                 "prio" ( number | "(" number [ [ "," ] number ] ")" ) |
d2807 1
a2807 1
                 "set-tos" tos | "reassemble tcp" | "random-id"
@


1.514
log
@take a stab at documenting when arguments need quoted, and valid macro
characters;

prompted by a diff from robert peichaer org

thanks gilles and henning for feedback
ok deraadt zinke
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.513 2012/01/31 07:46:32 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: January 31 2012 $
d746 1
a746 2
Only TCP and UDP packets can be associated with users; for other protocols
these parameters are ignored.
@


1.513
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.512 2012/01/30 21:56:48 mikeb Exp $
d30 1
a30 1
.Dd $Mdocdate: January 30 2012 $
d73 3
d84 2
a85 2
Macro names must start with a letter, and may contain letters, digits
and underscores.
@


1.512
log
@document af-to (aka nat64)

the patch was started by todd about a year ago and have been
finally finished by phessler and myself today; discussed with
and tweaks from jmc, ok sthen, henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.511 2012/01/16 01:18:31 bluhm Exp $
d30 1
a30 1
.Dd $Mdocdate: January 16 2012 $
d528 1
a528 1
.Ar af-to,
d810 1
a810 1
on inbound rules, and a source address of the resulting translation
@


1.511
log
@Fix description for tcp.opening timeout in pf.conf(5).
Issue reported by Felix Rust; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.510 2012/01/11 15:57:19 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: January 11 2012 $
d528 1
d802 50
d950 1
d2734 14
d2792 2
@


1.510
log
@make "self" a bit more visible
from Sebastian Benoit <benoit-lists at fb12.de>, ok/input jmc, reminder/input
deraadt and too much of a trail to mention all of it, thx everybody involved
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.509 2011/11/27 19:55:18 haesbaert Exp $
d30 1
a30 1
.Dd $Mdocdate: November 27 2011 $
d1290 2
a1291 1
The state before the destination host ever sends a packet.
@


1.509
log
@Manpage bits for the recent changes in vlan(4) prio handling.

ok jmc henning sthen claudio
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.508 2011/08/30 00:47:16 mikeb Exp $
d30 1
a30 1
.Dd $Mdocdate: August 30 2011 $
d314 2
d332 3
a334 1
Interface names and interface group names can have modifiers appended:
@


1.508
log
@Document a "once" filter option used to create one shot rules.

ok henning, mcbride, jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.507 2011/08/18 10:49:40 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: August 18 2011 $
d624 4
@


1.507
log
@fix overload table BNF
From: william dunand <william.dunand at gmail.com>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.506 2011/08/16 14:48:39 mikeb Exp $
d30 1
a30 1
.Dd $Mdocdate: August 16 2011 $
d603 6
d2710 1
a2710 1
                 "fragment" | "allow-opts" |
@


1.506
log
@Sync documentation with code on the matter of max state limit behavior.
When one of the state limits is reached, further packets that would
create state are dropped, until existing states time out.  Discussed
with mcbride, ok henning, jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.505 2011/08/08 02:50:57 mcbride Exp $
d30 1
a30 1
.Dd $Mdocdate: August 8 2011 $
d2830 1
a2830 1
                 "overload" "\*(Lt" string "\*(Gt" [ "flush" ] |
@


1.505
log
@sync 'set-tos' with 'tos' keyword (DiffServ is supported by both)

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.504 2011/07/29 10:51:46 mcbride Exp $
d30 1
a30 1
.Dd $Mdocdate: July 29 2011 $
d2071 1
a2071 1
state will not match this rule until existing states time out.
d2155 3
@


1.504
log
@Remove requirement to quote 'debug' loglevel for the 'debug' option.

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.503 2011/07/27 07:16:08 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: July 27 2011 $
d2293 2
d2296 1
d2298 5
a2302 2
or
.Ar reliability ;
@


1.503
log
@- new sentence, new line
- zap trailing whitespace
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.502 2011/07/27 00:26:10 mcbride Exp $
a1049 3
The last keyword,
.Cm debug ,
must be quoted.
@


1.502
log
@Add support for weighted round-robin in load balancing pools and tables.
Diff from zinke@@ with a some minor cleanup.
ok henning claudio deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.501 2011/07/09 00:20:18 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: July 9 2011 $
d926 2
a927 1
associated with address(es). Weights can be specified between 1 and 65535.
d955 2
a956 2
and 
.Ar least-states 
d2778 2
a2779 2
host           = [ "!" ] ( address [ "weight" number ] | 
                 address [ "/" mask-bits ] [ "weight" number ] | 
d2840 1
a2840 1
pooltype       = ( "bitmask" | "least-states" | 
d2842 1
a2842 1
                 "source-hash" [ ( hex-key | string-key ) ] ) 
@


1.501
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.500 2011/07/08 22:20:56 mcbride Exp $
d30 1
a30 1
.Dd $Mdocdate: July 8 2011 $
d925 3
a927 1
option loops through the redirection address(es).
a929 4
.Pp
When more than one redirection address is specified,
.Ar round-robin
is the only permitted pool type.
d951 6
d1005 1
d1635 2
a1682 7
.It Ar cost
The
.Ar cost
flag adds a state counter to every address in the table.
The flag is necessary if the table is used with the
.Ar least-states
option.
d2639 2
a2640 1
    rdr-to { 10.1.2.155, 10.1.2.160, 10.1.2.161 } round-robin
d2722 2
a2723 2
tableopt       = "persist" | "const" | "counters" | "file" string |
                 "{" [ tableaddrs ] "}"
d2777 3
a2779 1
host           = [ "!" ] ( address [ "/" mask-bits ] | "\*(Lt" string "\*(Gt" )
d2839 4
a2842 3
pooltype       = ( "bitmask" | "random" |
                 "source-hash" [ ( hex-key | string-key ) ] |
                 "round-robin" ) [ sticky-address ]
@


1.500
log
@Initial description of 'prio' keyword.

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.499 2011/07/04 05:59:38 tedu Exp $
d30 1
a30 1
.Dd $Mdocdate: July 4 2011 $
d616 1
a616 1
Priorities are assigned as integers 0 through 7, 
d628 1
a628 1
The interface priority queues accessed by the 
@


1.499
log
@jmc found a few more mentions of RIO here
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.498 2011/07/04 05:49:00 jmc Exp $
d611 24
d2700 1
@


1.498
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.497 2011/07/04 03:36:14 henning Exp $
a1492 4
.\" .It Ar rio
.\" Enables RIO on this queue.
.\" RIO is RED with IN/OUT, thus running
.\" RED two times more than RIO would achieve the same effect.
d2820 3
a2822 3
cbq-opt        = ( "default" | "borrow" | "red" | "ecn" | "rio" )
priq-opt       = ( "default" | "red" | "ecn" | "rio" )
hfsc-opt       = ( "default" | "red" | "ecn" | "rio" |
@


1.497
log
@bye bye require-order.
i added that button many many many years ago since the order (options, scrub,
nat, filter) was enforced back then, which I hated. now we had that turned
off for ages, and with the scrub and nat rulesets being gone, there is very
little reason to enforce an order at all. so let's get rid of it.
introducing this button was one of my very early commits to openbsd... feels
a bit strange to remove it now :)
ok ryan dlg theo
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.496 2011/07/03 23:37:55 zinke Exp $
d30 1
a30 1
.Dd $Mdocdate: July 3 2011 $
d878 1
a878 1
The 
d880 1
a880 1
option selects the address with the least active states from 
d1659 2
a1660 2
flag adds a state counter to every address of the table. The flag is
necessary if the table is used with the 
@


1.496
log
@bring in least-states load balancing algorithm

ok mcbride@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.495 2011/06/23 20:35:22 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: June 23 2011 $
a1144 11
.It Ar set require-order
If set to
.Ar yes ,
.Xr pfctl 8
will enforce that statement types in the ruleset are listed in the
following order, to match the operation of the underlying packet
filtering engine:
.Em options ,
.Em queueing ,
.Em filtering .
This option is disabled by default.
a2657 1
                 [ "require-order" ( "yes" | "no" ) ]
@


1.495
log
@Use a common text explaining how the various configuration parsers using
the standard OpenBSD-style parse.y handle continuing lines with backslashes,
paying particular attention to how comments are handled (which can cause
nasty side-effects if you're not expecting it).

Most wording from jmc@@, with suggestions from fgsch@@, marc@@, Richard Toohey,
patrick keshishian and Florian Obser, ok jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.494 2011/05/20 22:57:20 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: May 20 2011 $
d877 5
a881 4
.It Ar random Op Ar sticky-address
The
.Ar random
option selects an address at random within the defined block of addresses.
d892 6
d1667 7
@


1.494
log
@Point out that the 'set skip' interfaces are currently only evaluated at
config load time. This may change in future but for now it's better to
document it.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.493 2011/05/02 07:04:59 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 2 2011 $
d65 2
d70 3
@


1.493
log
@update BNF for "set limit"; from Lawrence Teo
ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.492 2011/04/06 13:20:44 claudio Exp $
d30 1
a30 1
.Dd $Mdocdate: April 6 2011 $
d1187 3
@


1.492
log
@Documentation for "on rdomain <number>". OK henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.491 2011/04/05 14:05:45 jsg Exp $
d30 1
a30 1
.Dd $Mdocdate: April 5 2011 $
d2802 2
a2803 1
limit-item     = ( "states" | "frags" | "src-nodes" ) number
@


1.491
log
@remove mention of fastroute here as well
'you are not allowed to speak until you commit' mikeb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.490 2011/03/25 11:09:38 bluhm Exp $
d30 1
a30 1
.Dd $Mdocdate: March 25 2011 $
d270 3
d2655 2
a2656 1
                 [ "on" ifspec ] [ af ] [ protospec ] hosts [ filteropts ]
@


1.490
log
@Pf can reassemble IPv6 fragments now.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.489 2011/02/01 17:31:47 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: February 1 2011 $
a925 4
.It Ar fastroute
The
.Ar fastroute
option does a normal route lookup to find the next hop for the packet.
d2674 1
a2674 1
		 [ "fastroute" | route ] |
@


1.489
log
@- remove an ambiguity regarding the state description. i used part of a
diff from patrick keshishian on misc for this

- document that packets passed by default, matching neither block nor
pass rules, are effectively created with "no state"; as discovered by tedu

...after much discussion on misc and with henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.488 2011/01/23 23:34:18 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: January 23 2011 $
d2325 4
a2328 2
Currently, only IPv4 fragments are supported and IPv6 fragments
are blocked unconditionally.
@


1.488
log
@bit more on reflection, From: James Jerkins <jjerkins at una.edu>
with tweaks from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.487 2011/01/20 08:44:12 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: January 20 2011 $
d129 2
a130 2
rule, a state entry is created; for subsequent packets the filter checks
whether the packet matches any state.
d1922 6
@


1.487
log
@Fix an example using rdr-to where a couple of hosts were exempted from
the redirect; the sample rule used "match" for the general case which
negated the exemptions. From Harald Dunkel.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.486 2010/12/31 12:15:31 bluhm Exp $
d30 1
a30 1
.Dd $Mdocdate: December 31 2010 $
d826 10
@


1.486
log
@According to pf_scrub_ip6() pf does not support the scrub options
no-df, random-id, set-tos for IPv6 rules.  Check this in pfctl and
document it in pf.conf(5).
ok henning@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.485 2010/12/23 14:39:21 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: December 23 2010 $
d2557 1
a2557 1
match in on $int_if proto { tcp, udp } from any to any port 80 \e
@


1.485
log
@fix my last (sloppy) fix; from Thomas Pfaff
ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.484 2010/12/22 22:20:36 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: December 22 2010 $
d2166 1
a2166 1
bit from a matching IP packet.
d2191 1
a2191 1
Replaces the IP identification field with random values to compensate
d2246 1
a2246 1
Enforces a TOS for matching IP packets.
@


1.484
log
@fix sloppy paste in;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.483 2010/12/22 21:05:19 henning Exp $
d999 3
d1004 1
a1004 2
library routine,
and may be abbreviated.
@


1.483
log
@adjust set debug description to reality
From: Thomas Pfaff <tpfaff@@tp76.info>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.482 2010/12/15 14:06:05 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: December 15 2010 $
d984 15
a998 4
Set the debug level which limits the severity of log messages printed by pf(4).
This should be a keyword from the following ordered list (highest to lowest):
emerg, alert, crit, err, warning, notice, info, and debug.
The last keyword, debug, must be quoted.
d1000 3
a1002 1
syslog(3) library routine, and may be abbreviated.
@


1.482
log
@- clarify the "probability" text; based on a diff from Thomas Pfaff
ok henning

- while here, knock out a bad .Pp
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.481 2010/09/24 10:57:16 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: September 24 2010 $
d984 6
a989 14
Set the debug
.Ar level
to one of the following:
.Pp
.Bl -tag -width xxxxxxxx -compact
.It Ar loud
Generate debug messages for common conditions.
.It Ar misc
Generate debug messages for various errors.
.It Ar none
Don't generate debug messages.
.It Ar urgent
Generate debug messages only for serious errors.
.El
@


1.481
log
@oups. the notes i just added looked like shit because i'm too smart too
actually look at the manpage when changing it. ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.480 2010/09/24 10:41:36 jmc Exp $
d596 3
a598 4
A probability attribute can be attached to a rule, with a value set between
0 and 1, bounds not included.
In that case, the rule will be honoured using the given probability value
only.
a1191 1
.Pp
@


1.480
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.479 2010/09/24 09:19:04 henning Exp $
d781 2
d785 1
a785 3
If applied inbound,
nat-to to a local IP address is not supported.
.Ed
d798 2
d802 1
a802 3
If applied outbound,
rdr-to to a local IP address is not supported.
.El
@


1.479
log
@for rdr-to and nat-to, mention in which direction they are usually used
and mention the constraints for use in the "unnatural" direction
ok claudio ryan dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.478 2010/09/22 06:03:32 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: September 22 2010 $
d781 4
a784 2
.Ar nat-to is usually applied outbound. If applied inbound, nat-to
a local IP address is not supported.
d798 4
a801 2
.Ar rdr-to is usually applied inbound. If applied outbound, rdr-to
a local IP address is not supported.
@


1.478
log
@document hwo to play with matches
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.477 2010/08/20 13:01:43 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: August 20 2010 $
d781 2
d796 2
@


1.477
log
@sync divert-packet documentation with reality
PR 6448 pjp at centroid dot eu
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.476 2010/05/19 13:51:37 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: May 19 2010 $
d245 2
d2628 1
a2628 1
logopt         = "all" | "user" | "to" interface-name
@


1.476
log
@redo the list of "sticky" parameters for match rules;

- include translation options
- include "scrub"
- don't include max-mss etc, which aren't used directly rather they
are written like 'match ... scrub (max-mss xxx)'

ok jmc@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.475 2010/04/01 19:09:36 jsg Exp $
d30 1
a30 1
.Dd $Mdocdate: April 1 2010 $
d437 1
a437 1
.It Ar divert-packet Aq Ar port
d2634 1
a2634 1
		 "divert-packet" port | "divert-reply" |
@


1.475
log
@Don't mention translation in the require-order blurb as it is now
part of filtering.

ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.474 2010/03/18 21:49:20 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: March 18 2010 $
d190 3
a192 3
.Ar max-mss ,
.Ar min-ttl ,
.Ar no-df ,
a193 2
.Ar random-id ,
.Ar reassemble tcp ,
d196 1
a196 1
.Ar set-tos .
@


1.474
log
@add divert-* to bnf; from Dave Anderson
ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.473 2010/02/19 12:29:06 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: February 19 2010 $
a1118 1
.Em translation ,
@


1.473
log
@missing "
From: Aivar Jaakson <aivar@@cirt.pri.ee>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.472 2010/02/18 16:29:40 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: February 18 2010 $
d2637 2
@


1.472
log
@missing `]'; from Aivar Jaakson
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.471 2010/02/02 19:16:50 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: February 2 2010 $
d2716 1
a2716 1
                 (" interface-name [ address [ "/" mask-bits ] ] ")"
@


1.471
log
@Add missing 'in' in sample rdr-to rule. Noted by Steve Williams.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.470 2010/01/12 18:42:36 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: January 12 2010 $
d2622 1
a2622 1
		 [ "reassemble" ( "yes" | "no" ) [ "no-df" ] )
@


1.470
log
@better word MSS in pf.conf.5, from Lars Nooden;
the changes in pppoe.4 are just to keep things consistent...
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.469 2010/01/12 03:20:51 mcbride Exp $
d826 1
a826 1
pass on egress proto tcp from any to any port smtp \e
@


1.469
log
@First pass at removing the 'pf_pool' mechanism for translation and routing
actions. Allow interfaces to be specified in special table entries for
the routing actions. Lists of addresses can now only be done using tables,
which pfctl will generate automatically from the existing syntax.

Functionally, this deprecates the use of multiple tables or dynamic
interfaces in a single nat or rdr rule.

ok henning dlg claudio
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.468 2009/12/24 17:00:48 deraadt Exp $
d30 1
a30 1
.Dd $Mdocdate: December 24 2009 $
d2148 1
a2148 1
Enforces a maximum MSS for matching TCP packets.
@


1.468
log
@correct the text for received-on; ok dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.467 2009/12/24 09:35:33 jmc Exp $
d2715 2
a2716 1
routehost      = "(" interface-name [ address [ "/" mask-bits ] ] ")"
@


1.467
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.466 2009/12/24 07:14:46 dlg Exp $
d623 3
a625 6
When packets are received by the system, the interface they enter
the system through is stored in the packet.
The
.Ar received-on
option allows packet filtering based on the interface or
interface group they were received on.
@


1.466
log
@try to document received-on.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.465 2009/11/30 18:51:57 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: November 30 2009 $
d627 1
a627 1
options allows you to filter packets based on the interface or
@


1.465
log
@It doesn't make sense to talk about doing packet tagging "during
nat-to or rdr-to in addition to filter rules".
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.464 2009/11/10 09:10:11 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: November 10 2009 $
d622 8
d2649 2
a2650 1
		 [ "fastroute" | route ]
@


1.464
log
@adjust one of the examples/descriptions for nat-to; it used to be
'nat pass' and nearest equivalent now is to use 'pass quick...nat-to'
not just 'pass...nat-to'. ok henning@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.463 2009/11/06 11:44:15 eric Exp $
d30 1
a30 1
.Dd $Mdocdate: November 6 2009 $
a640 5
Packet tagging can be done during
.Ar nat-to
or
.Ar rdr-to
in addition to filter rules.
@


1.463
log
@correct values for set reassemble

ok henning@@ pyr@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.462 2009/11/05 16:01:36 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: November 5 2009 $
d2511 1
a2511 1
If the
d2513 4
a2516 2
modifier is given, packets matching the translation rule are passed without
inspecting the filter rules.
d2518 1
a2518 1
pass in on $ext_if proto tcp from any to any port 80 \e
@


1.462
log
@Adjust the description of network translation to match the code
following the nat-to changes. Reworked slightly from a diff from eric@@.
ok henning jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.461 2009/10/14 14:17:53 jmeltzer Exp $
d30 1
a30 1
.Dd $Mdocdate: October 14 2009 $
d1098 1
a1098 1
.Ar on
d1100 1
a1100 1
.Ar off .
@


1.461
log
@Second example discussing the pass modifier with rdr-to
should actually use the pass modifier.

ok henning jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.460 2009/10/04 16:08:37 michele Exp $
d30 1
a30 1
.Dd $Mdocdate: October 4 2009 $
d738 5
a742 8
Translation options modify either the source or destination address of the
packets associated with a stateful connection.
A stateful connection is automatically created to track packets matching
such a rule as long as they are not blocked by the filtering section of
.Nm .
The translation engine modifies the specified address and/or port in the
packet, recalculates IP, TCP, and UDP checksums as necessary, and passes it to
the packet filter for evaluation.
d744 1
a744 2
Since translation occurs before filtering,
the filter engine will see packets as they look
d746 1
a746 1
Filter rules will therefore have to filter based on the translated
a747 8
Packets that match a translation rule are only automatically passed if the
.Ar pass
modifier is given,
otherwise they are still subject to
.Ar block
and
.Ar pass
rules.
@


1.460
log
@Add (again) support for divert sockets. They allow you to:

- queue packets from pf(4) to a userspace application
- reinject packets from the application into the kernel stack.

The divert socket can be bound to a special "divert port" and will
receive every packet diverted to that port by pf(4).

The pf syntax is pretty simple, e.g.:

pass on em0 inet proto tcp from any to any port 80 divert-packet port 1

A lot of discussion have happened since my last commit that resulted
in many changes and improvements.
I would *really* like to thank everyone who took part in the discussion
especially canacar@@ who spotted out which are the limitations of this approach.

OpenBSD divert(4) is meant to be compatible with software running on
top of FreeBSD's divert sockets even though they are pretty different and will
become even more with time.

discusses with many, but mainly reyk@@ canacar@@ deraadt@@ dlg@@ claudio@@ beck@@
tested by reyk@@ and myself
ok reyk@@ claudio@@ beck@@
manpage help and ok by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.459 2009/09/25 14:08:04 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: September 25 2009 $
d2528 1
a2528 1
match in on $ext_if proto tcp from any to any port 80 \e
@


1.459
log
@some clarification of "set reassemble" and "no-df"; help/ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.458 2009/09/22 10:42:08 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: September 22 2009 $
d438 11
@


1.458
log
@floating/if-bound may be used per-rule; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.457 2009/09/08 17:52:17 michele Exp $
d30 1
a30 1
.Dd $Mdocdate: September 8 2009 $
d1097 5
a1101 1
option turns reassembly of fragmented packets on or off.
d1104 1
a1104 1
is given, fragments with the
d1106 3
a1108 2
bit set have it cleared before entering the fragment cache,
and thus the reassembled packet doesn't have
d1110 1
a1110 3
set either.
Setting this option does not affect non-fragmented packets.
Fragment reassembly is turned on by default.
d2156 2
a2157 1
Some operating systems are known to generate fragmented packets with the
a2159 1
This is particularly true with NFS.
@


1.457
log
@I had not enough oks to commit this diff.
Sorry.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.455 2009/09/07 12:21:10 reyk Exp $
d30 1
a30 1
.Dd $Mdocdate: September 7 2009 $
d1179 1
a1179 1
States are bound to interface.
d1993 1
d1996 1
a1996 1
and
d1998 1
a1998 3
support these options, and
.Ar keep state
must be specified explicitly to apply options to a rule.
d2001 9
@


1.456
log
@Add support for divert sockets. They allow you to:

- queue packets from pf(4) to a userspace application
- reinject packets from the application into the kernel stack.

The divert socket can be bound to a special "divert port" and will
receive every packet diverted to that port by pf(4).

The pf syntax is pretty simple, e.g.:

pass on em0 inet proto tcp from any to any port 80 divert-packet port 8000

test, bugfix and ok by reyk@@
manpage help and ok by jmc@@
no objections from many others.
@
text
@a438 6
.It Ar divert-packet Aq Ar port
Used to send matching packets to
.Xr divert 4
sockets bound to port
.Ar port .
.Pp
@


1.455
log
@implement binat-to as a macro-like rule: a rule using the new binat-to
syntax will be expanded by the parser to a nat-to+rdr-to combination
to be loaded into the kernel.  this simplifies the migration from old
binat rules and is less error-prone.

feedback from many, manpage bits from jmc@@
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.454 2009/09/07 11:28:34 jmc Exp $
d438 6
@


1.454
log
@remove the trans-anchors bnf entry too; ok sthen henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.453 2009/09/07 10:36:13 jmc Exp $
d757 10
d805 3
d2569 18
d2628 2
d2633 1
a2633 1
		 [ portspec ] [ pooltype ] [ "static-port" ]
@


1.453
log
@remove *-anchor bits from BNF; ok sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.452 2009/09/03 17:53:25 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: September 3 2009 $
d2562 2
a2563 3
                 antispoof-rule | altq-rule | queue-rule | trans-anchors |
                 anchor-rule | anchor-close | load-anchor | table-rule |
                 include )
@


1.452
log
@the recent changes to translation make the ordering of this document
slightly redundant: move the packet filtering section to the top,
and make translation a subsection;

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.451 2009/09/02 14:50:01 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: September 2 2009 $
a2628 3

trans-anchors  = ( "nat-anchor" | "rdr-anchor" ) string
                 [ "on" ifspec ] [ af ] [ "proto" ] [ protospec ] [ hosts ]
@


1.451
log
@match in pass is bullshit (conversion error from nat pass), spotted by phessler
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.450 2009/09/02 13:28:02 reyk Exp $
d45 2
a50 4
.It Sy Translation
Translation specifies how addresses are mapped to other addresses.
.It Sy Packet Filtering
Packet filtering provides rule-based blocking or passing of packets.
d62 1
a62 1
Translation and filter examples.
d91 1
a91 1
.Sh OPTIONS
d93 13
a105 8
may be tuned for various situations using the
.Ar set
command.
.Bl -tag -width Ds
.It Ar set block-policy
The
.Ar block-policy
option sets the default behaviour for the packet
d107 9
a115 1
action:
d117 6
a122 12
.Bl -tag -width xxxxxxxx -compact
.It Ar drop
Packet is silently dropped.
.It Ar return
A TCP RST is returned for blocked TCP packets,
an ICMP UNREACHABLE is returned for blocked UDP packets,
and all other packets are silently dropped.
.El
.It Ar set debug
Set the debug
.Ar level
to one of the following:
d124 4
a127 39
.Bl -tag -width xxxxxxxx -compact
.It Ar loud
Generate debug messages for common conditions.
.It Ar misc
Generate debug messages for various errors.
.It Ar none
Don't generate debug messages.
.It Ar urgent
Generate debug messages only for serious errors.
.El
.It Ar set fingerprints
Load fingerprints of known operating systems from the given filename.
By default fingerprints of known operating systems are automatically
loaded from
.Xr pf.os 5 ,
but can be overridden via this option.
Setting this option may leave a small period of time where the fingerprints
referenced by the currently active ruleset are inconsistent until the new
ruleset finishes loading.
.It Ar set hostid
The 32-bit
.Ar hostid
identifies this firewall's state table entries to other firewalls
in a
.Xr pfsync 4
failover cluster.
By default the hostid is set to a pseudo-random value, however it may be
desirable to manually configure it, for example to more easily identify the
source of state table entries.
The hostid may be specified in either decimal or hexadecimal.
.It Ar set limit
Sets hard limits on the memory pools used by the packet filter.
See
.Xr pool 9
for an explanation of memory pools.
.Pp
For example,
to set the maximum number of entries in the memory pool used by state table
entries (generated by
d129 5
a133 3
rules which do not specify
.Ar no state )
to 20000:
d135 13
a147 1
.Dl set limit states 20000
d149 18
a166 2
To set the maximum number of entries in the memory pool used for fragment
reassembly to 20000:
d168 1
a168 33
.Dl set limit frags 20000
.Pp
To set the maximum number of entries in the memory pool used for tracking
source IP addresses (generated by the
.Ar sticky-address
and
.Ar src.track
options) to 2000:
.Pp
.Dl set limit src-nodes 2000
.Pp
To set limits on the memory pools used by tables:
.Bd -literal -offset indent
set limit tables 1000
set limit table-entries 100000
.Ed
.Pp
The first limits the number of tables that can exist to 1000.
The second limits the overall number of addresses that can be stored
in tables to 100000.
.Pp
Various limits can be combined on a single line:
.Bd -literal -offset indent
set limit { states 20000, frags 20000, src-nodes 2000 }
.Ed
.It Ar set loginterface
Enable collection of packet and byte count statistics for the given
interface or interface group.
These statistics can be viewed using:
.Pp
.Dl # pfctl -s info
.Pp
In this example
d170 3
a172 1
collects statistics on the interface named dc0:
d174 2
a175 1
.Dl set loginterface dc0
d177 22
a198 1
One can disable the loginterface using:
d200 10
a209 3
.Dl set loginterface none
.It Ar set optimization
Optimize state timeouts for one of the following network environments:
d211 69
a279 79
.Bl -tag -width Ds -compact
.It Ar aggressive
Aggressively expire connections.
This can greatly reduce the memory usage of the firewall at the cost of
dropping idle connections early.
.It Ar conservative
Extremely conservative settings.
Avoid dropping legitimate connections at the
expense of greater memory utilization (possibly much greater on a busy
network) and slightly increased processor utilization.
.It Ar high-latency
A high-latency environment (such as a satellite connection).
.It Ar normal
A normal network environment.
Suitable for almost all networks.
.It Ar satellite
Alias for
.Ar high-latency .
.El
.It Ar set reassemble
The
.Ar reassemble
option turns reassembly of fragmented packets on or off.
If
.Ar no-df
is given, fragments with the
.Ar dont-fragment
bit set have it cleared before entering the fragment cache,
and thus the reassembled packet doesn't have
.Ar dont-fragment
set either.
Setting this option does not affect non-fragmented packets.
Fragment reassembly is turned on by default.
.It Ar set require-order
If set to
.Ar yes ,
.Xr pfctl 8
will enforce that statement types in the ruleset are listed in the
following order, to match the operation of the underlying packet
filtering engine:
.Em options ,
.Em queueing ,
.Em translation ,
.Em filtering .
This option is disabled by default.
.It Ar set ruleset-optimization
.Bl -tag -width xxxxxxxx -compact
.It Ar basic
Enable basic ruleset optimization.
This is the default behaviour.
Basic ruleset optimization does four things to improve the
performance of ruleset evaluations:
.Pp
.Bl -enum -compact
.It
remove duplicate rules
.It
remove rules that are a subset of another rule
.It
combine multiple rules into a table when advantageous
.It
re-order the rules to improve evaluation performance
.El
.It Ar none
Disable the ruleset optimizer.
.It Ar profile
Uses the currently loaded ruleset as a feedback profile to tailor the
ordering of quick rules to actual network traffic.
.El
.Pp
It is important to note that the ruleset optimizer will modify the ruleset
to improve performance.
A side effect of the ruleset modification is that per-rule accounting
statistics will have different meanings than before.
If per-rule accounting is important for billing purposes or whatnot,
either the ruleset optimizer should not be used or a label field should
be added to all of the accounting rules to act as optimization barriers.
.Pp
Optimization can also be set as a command-line argument to
d281 11
a291 15
overriding the settings in
.Nm .
.It Ar set skip on Aq Ar ifspec
List interfaces for which packets should not be filtered.
Packets passing in or out on such interfaces are passed as if pf was
disabled, i.e. pf does not process them in any way.
This can be useful on loopback and other virtual interfaces, when
packet filtering is not desired and can have unexpected effects.
.It Ar set state-defaults
The
.Ar state-defaults
option sets the state options for states created from rules
without an explicit
.Ar keep state .
For example:
d293 3
a295 5
.Dl set state-defaults pflow, no-sync
.It Ar set state-policy
The
.Ar state-policy
option sets the default behaviour for states:
d297 15
a311 5
.Bl -tag -width if-bound -compact
.It Ar if-bound
States are bound to interface.
.It Ar floating
States can match packets on any interfaces (the default).
a312 1
.It Ar set timeout
d314 7
a320 9
.Bl -tag -width "src.track" -compact
.It Ar frag
Seconds before an unassembled fragment is expired.
.It Ar interval
Interval between purging expired states and fragments.
.It Ar src.track
Length of time to retain a source tracking entry after the last state
expires.
.El
d322 1
a322 7
When a packet matches a stateful connection, the seconds to live for the
connection will be updated to that of the
protocol and modifier
which corresponds to the connection state.
Each packet which matches this state will reset the TTL.
Tuning these values may improve the performance of the
firewall at the risk of dropping valid idle connections.
d324 9
a332 20
.Bl -tag -width Ds -compact
.It Ar tcp.closed
The state after one endpoint sends an RST.
.It Ar tcp.closing
The state after the first FIN has been sent.
.It Ar tcp.established
The fully established state.
.It Ar tcp.finwait
The state after both FINs have been exchanged and the connection is closed.
Some hosts (notably web servers on Solaris) send TCP packets even after closing
the connection.
Increasing
.Ar tcp.finwait
(and possibly
.Ar tcp.closing )
can prevent blocking of such packets.
.It Ar tcp.first
The state after the first packet.
.It Ar tcp.opening
The state before the destination host ever sends a packet.
d335 4
a338 2
ICMP and UDP are handled in a fashion similar to TCP, but with a much more
limited set of states:
d340 12
a351 13
.Bl -tag -width Ds -compact
.It Ar icmp.error
The state after an ICMP error came back in response to an ICMP packet.
.It Ar icmp.first
The state after the first packet.
.It Ar udp.first
The state after the first packet.
.It Ar udp.multiple
The state if both hosts have sent packets.
.It Ar udp.single
The state if the source host sends more than one packet but the destination
host has never sent one back.
.El
d353 7
a359 1
Other protocols are handled similarly to UDP:
d361 32
a392 4
.Bl -tag -width xxxx -compact
.It Ar other.first
.It Ar other.multiple
.It Ar other.single
d395 7
a401 2
Timeout values can be reduced adaptively as the number of state table
entries grows.
d403 12
a414 11
.Bl -tag -width Ds -compact
.It Ar adaptive.end
When reaching this number of state entries, all timeout values become
zero, effectively purging all state entries immediately.
This value is used to define the scale factor; it should not actually
be reached (set a lower state limit, see below).
.It Ar adaptive.start
When the number of state entries exceeds this value, adaptive scaling
begins.
All timeout values are scaled linearly with factor
(adaptive.end \- number of states) / (adaptive.end \- adaptive.start).
d417 1
a417 4
Adaptive timeouts are enabled by default, with an adaptive.start value
equal to 60% of the state limit, and an adaptive.end value equal to
120% of the state limit.
They can be disabled by setting both adaptive.start and adaptive.end to 0.
d419 3
a421 4
The adaptive timeout values can be defined both globally and for each rule.
When used on a per-rule basis, the values relate to the number of
states created by the rule, otherwise to the total number of
states.
d423 15
a437 7
For example:
.Bd -literal -offset indent
set timeout tcp.first 120
set timeout tcp.established 86400
set timeout { adaptive.start 6000, adaptive.end 12000 }
set limit states 10000
.Ed
d439 6
a444 70
With 9000 state table entries, the timeout values are scaled to 50%
(tcp.first 60, tcp.established 43200).
.El
.Sh QUEUEING
Packets can be assigned to queues for the purpose of bandwidth
control.
At least two declarations are required to configure queues, and later
any packet filtering rule can reference the defined queues by name.
During the filtering component of
.Nm ,
the last referenced
.Ar queue
name is where any packets from
.Ar pass
rules will be queued, while for
.Ar block
rules it specifies where any resulting ICMP or TCP RST
packets should be queued.
The
.Em scheduler
defines the algorithm used to decide which packets get delayed, dropped, or
sent out immediately.
There are three schedulers currently supported:
.Bl -tag -width xxxx
.It Ar cbq
Class Based Queueing.
Queues attached to an interface build a tree,
thus each queue can have further child queues.
Each queue can have a
.Ar priority
and a
.Ar bandwidth
assigned.
Priority mainly controls the time packets take to get sent out,
while bandwidth has primarily effects on throughput.
.Ar cbq
achieves both partitioning and sharing of link bandwidth
by hierarchically structured classes.
Each class has its own queue
and is assigned its share of bandwidth.
A child class can borrow bandwidth from its parent class
as long as excess bandwidth is available
(see the option
.Ar borrow ,
below).
.It Ar hfsc
Hierarchical Fair Service Curve.
Queues attached to an interface build a tree,
thus each queue can have further child queues.
Each queue can have a
.Ar priority
and a
.Ar bandwidth
assigned.
Priority mainly controls the time packets take to get sent out,
while bandwidth primarily affects throughput.
.Ar hfsc
supports both link-sharing and guaranteed real-time services.
It employs a service curve based QoS model,
and its unique feature is an ability to decouple
delay and bandwidth allocation.
.It Ar priq
Priority Queueing.
Queues are flat attached to the interface,
thus queues cannot have further child queues.
Each queue has a unique
.Ar priority
assigned, ranging from 0 to 15.
Packets in the queue with the highest priority are processed first.
.El
d446 5
a450 22
The interfaces on which queueing should be activated are declared using
the
.Ar altq on
declaration.
.Ar altq on
has the following keywords:
.Bl -tag -width xxxx
.It Aq Ar interface
Queueing is enabled on the named interface.
.It Aq Ar scheduler
Specifies which queueing scheduler to use.
.It Ar bandwidth Aq Ar bw
The maximum bitrate for all queues on an
interface may be specified using the
.Ar bandwidth
keyword.
The value can be specified as an absolute value or as a
percentage of the interface bandwidth.
When using an absolute value, the suffixes
.Ar b ,
.Ar Kb ,
.Ar Mb ,
d452 33
a484 18
.Ar Gb
are used to represent bits, kilobits, megabits, and
gigabits per second, respectively.
The value must not exceed the interface bandwidth.
If
.Ar bandwidth
is not specified, the interface bandwidth is used
(but take note that some interfaces do not know their bandwidth,
or can adapt their bandwidth rates).
.It Ar qlimit Aq Ar limit
The maximum number of packets held in the queue.
The default is 50.
.It Ar tbrsize Aq Ar size
Adjusts the size, in bytes, of the token bucket regulator.
If not specified, heuristics based on the
interface bandwidth are used to determine the size.
.It Ar queue Aq Ar list
Defines a list of subqueues to create on an interface.
d487 32
a518 7
In the following example, the interface dc0
should queue up to 5Mbps in four second-level queues using
Class Based Queueing.
Those four queues will be shown in a later example.
.Bd -literal -offset indent
altq on dc0 cbq bandwidth 5Mb queue { std, http, mail, ssh }
.Ed
d520 10
a529 29
Once interfaces are activated for queueing using the
.Ar altq
directive, a sequence of
.Ar queue
directives may be defined.
The name associated with a queue
must match a queue defined in the altq
directive or, except for the
.Ar priq
scheduler, in a parent queue declaration.
The following keywords can be used:
.Bl -tag -width xxxx
.It Ar on Aq Ar interface
Specifies the interface the queue operates on.
If not given, it operates on all matching interfaces.
.It Ar bandwidth Aq Ar bw
Specifies the maximum bitrate to be processed by the queue.
This value must not exceed the value of the parent
.Ar queue
and can be specified as an absolute value or a percentage of the parent
queue's bandwidth.
If not specified, defaults to 100% of the parent queue's bandwidth.
The
.Ar priq
scheduler does not support bandwidth specification.
.It Ar priority Aq Ar level
Between queues a priority level can be set.
For
.Ar cbq
d531 8
a538 15
.Ar hfsc ,
the range is 0 to 7 and for
.Ar priq ,
the range is 0 to 15.
The default for all is 1.
.Ar priq
queues with a higher priority are always served first.
.Ar cbq
and
.Ar hfsc
queues with a higher priority are preferred in the case of overload.
.It Ar qlimit Aq Ar limit
The maximum number of packets held in the queue.
The default is 50.
.El
d540 5
a544 19
The scheduler can specify additional parameters using the format
.Ar scheduler Ns Pq Ar parameters .
The parameters are:
.Bl -tag -width Fl
.It Ar default
Packets not matched by another queue are assigned to this one.
Exactly one default queue is required.
.It Ar ecn
Enables Explicit Congestion Notification (ECN) on this queue.
ECN implies RED.
.It Ar red
Enables Random Early Detection (RED) on this queue.
RED drops packets with a probability proportional to the average
queue length.
.\" .It Ar rio
.\" Enables RIO on this queue.
.\" RIO is RED with IN/OUT, thus running
.\" RED two times more than RIO would achieve the same effect.
.El
d546 1
a546 3
The
.Ar cbq
scheduler supports an additional option:
d548 15
a562 3
.Bl -tag -width "upperlimit XXXXXXX" -compact -offset 3n
.It Ar borrow
The queue can borrow bandwidth from the parent.
d565 6
a570 3
The
.Ar hfsc
scheduler supports some additional options:
d572 7
a578 8
.Bl -tag -width "upperlimit XXXXXXX" -compact -offset 3n
.It Ar linkshare Aq Ar sc
The bandwidth share of a backlogged queue.
.It Ar realtime Aq Ar sc
The minimum required bandwidth for the queue.
.It Ar upperlimit Aq Ar sc
The maximum allowed bandwidth for the queue.
.El
d580 3
a582 3
.Aq Ar sc
is an abbreviation for
.Ar service curve .
d584 6
a589 14
The format for service curve specifications is
.Ar ( m1 , d , m2 ) .
.Ar m2
controls the bandwidth assigned to the queue.
.Ar m1
and
.Ar d
are optional and can be used to control the initial bandwidth assignment.
For the first
.Ar d
milliseconds the queue gets the bandwidth given as
.Ar m1 ,
afterwards the value given in
.Ar m2 .
d591 1
a591 8
Furthermore, with
.Ar cbq
and
.Ar hfsc ,
child queues can be specified as in an
.Ar altq
declaration, thus building a tree of queues using a part of
their parent's bandwidth.
d593 6
a598 7
Packets can be assigned to queues based on filter rules by using the
.Ar queue
keyword.
Normally only one
.Ar queue
is specified; when a second one is specified it will instead be used for
packets which have a TOS of
d600 36
a635 1
and for TCP ACKs with no data payload.
d637 67
a703 7
To continue the previous example, the examples below would specify the
four referenced
queues, plus a few child queues.
Interactive
.Xr ssh 1
sessions get priority over bulk transfers like
.Xr scp 1
d705 19
a723 24
.Xr sftp 1 .
The queues may then be referenced by filtering rules (see
.Sx PACKET FILTERING
below).
.Bd -literal -offset 4n
queue std bandwidth 10% cbq(default)
queue http bandwidth 60% priority 2 cbq(borrow red) \e
      { employees, developers }
queue  developers bandwidth 75% cbq(borrow)
queue  employees bandwidth 15%
queue mail bandwidth 10% priority 0 cbq(borrow ecn)
queue ssh bandwidth 20% cbq(borrow) { ssh_interactive, ssh_bulk }
queue  ssh_interactive bandwidth 50% priority 7 cbq(borrow)
queue  ssh_bulk bandwidth 50% priority 0 cbq(borrow)

block return out on dc0 inet all queue std
pass out on dc0 inet proto tcp from $developerhosts to any port 80 \e
      queue developers
pass out on dc0 inet proto tcp from $employeehosts to any port 80 \e
      queue employees
pass out on dc0 inet proto tcp from any to any port 22 \e
      queue(ssh_bulk, ssh_interactive)
pass out on dc0 inet proto tcp from any to any port 25 \e
      queue mail
d725 2
a726 1
.Sh TRANSLATION
d755 1
a755 1
Two types of translation are possible with pf:
d814 2
a815 2
match in on ne3 inet proto tcp to port smtp rdr-to 127.0.0.1 \e
      port spamd
d885 45
a929 5
.Sh PACKET FILTERING
.Xr pf 4
has the ability to
.Ar block ,
.Ar pass ,
d931 8
a938 10
.Ar match
packets based on attributes of their layer 3
and layer 4 headers.
Filter rules determine which of these actions are taken;
filter parameters specify the packets to which a rule applies.
.Pp
For each packet processed by the packet filter, the filter rules are
evaluated in sequential order, from first to last.
For
.Ar block
d940 4
a943 17
.Ar pass ,
the last matching rule decides what action is taken;
if no rule matches the packet, the default action is to pass
the packet.
For
.Ar match ,
rules are evaluated every time they match;
the pass/block state of a packet remains unchanged.
.Pp
Most parameters are optional.
If a parameter is specified, the rule only applies to packets with
matching attributes.
Certain parameters can be expressed as lists, in which case
.Xr pfctl 8
generates all needed rule combinations.
.Pp
By default
d945 8
a952 14
filters packets statefully:
the first time a packet matches a
.Ar pass
rule, a state entry is created; for subsequent packets the filter checks
whether the packet matches any state.
If it does, the packet is passed without evaluation of any rules.
After the connection is closed or times out, the state entry is automatically
removed.
.Pp
The following actions can be used in the filter:
.Bl -tag -width xxxx
.It Ar block
The packet is blocked.
There are a number of ways in which a
d954 1
a954 7
rule can behave when blocking a packet.
The default behaviour is to
.Ar drop
packets silently, however this can be overridden or made
explicit either globally, by setting the
.Ar block-policy
option, or on a per-rule basis with one of the following options:
d956 1
a956 1
.Bl -tag -width "return-icmp6XXX" -compact
d958 1
a958 1
The packet is silently dropped.
d960 3
a962 13
This causes a TCP RST to be returned for TCP packets
and an ICMP UNREACHABLE for other types of packets.
.It Ar return-icmp
.It Ar return-icmp6
This causes ICMP messages to be returned for packets which match the rule.
By default this is an ICMP UNREACHABLE message, however this
can be overridden by specifying a message as a code or number.
.It Ar return-rst
This applies only to TCP packets,
and issues a TCP RST which closes the connection.
An optional parameter,
.Ar ttl ,
may be given with a TTL value.
d964 40
d1005 7
a1011 5
Options returning ICMP packets currently have no effect if
.Xr pf 4
operates on a
.Xr bridge 4 ,
as the code to support this feature has not yet been implemented.
d1013 1
a1013 2
The simplest mechanism to block everything by default and only pass
packets that match explicit rules is specify a first filter rule of:
d1015 2
a1016 22
.Dl block all
.It Ar match
The packet is matched.
This mechanism is used to provide fine grained filtering
without altering the block/pass state of a packet.
.Ar match
rules differ from block and pass rules in that
parameters are set every time a packet matches the rule,
not only on the last matching rule.
For the following parameters,
this means that the parameter effectively becomes
.Dq sticky
until explicitly overridden:
.Ar max-mss ,
.Ar min-ttl ,
.Ar no-df ,
.Ar queue ,
.Ar random-id ,
.Ar reassemble tcp ,
.Ar rtable ,
and
.Ar set-tos .
d1018 1
a1018 10
.Ar log
is different still,
in that the action happens every time a rule matches
i.e. a single packet can get logged more than once.
.It Ar pass
The packet is passed;
state is created unless the
.Ar no state
option is specified.
.El
d1020 3
a1022 5
The following parameters can be used in the filter:
.Bl -tag -width Ds
.It Ar in No or Ar out
A packet always comes in on, or goes out through, one interface.
.Ar in
d1024 2
a1025 75
.Ar out
apply to incoming and outgoing packets;
if neither are specified,
the rule will match packets in both directions.
.It Ar log
In addition to the action specified, a log message is generated.
Only the packet that establishes the state is logged,
unless the
.Ar no state
option is specified.
The logged packets are sent to a
.Xr pflog 4
interface, by default
.Ar pflog0 .
This interface is monitored by the
.Xr pflogd 8
logging daemon, which dumps the logged packets to the file
.Pa /var/log/pflog
in
.Xr pcap 3
binary format.
.It Ar log Pq Ar all
Used to force logging of all packets for a connection.
This is not necessary when
.Ar no state
is explicitly specified.
As with
.Ar log ,
packets are logged to
.Xr pflog 4 .
.It Ar log Pq Ar user
Logs the UID and PID of the
socket on the local host used to send or receive a packet,
in addition to the normal information.
.It Ar log Pq Ar to Aq Ar interface
Send logs to the specified
.Xr pflog 4
interface instead of
.Ar pflog0 .
.It Ar quick
If a packet matches a rule which has the
.Ar quick
option set, this rule
is considered the last matching rule, and evaluation of subsequent rules
is skipped.
.It Ar on Aq Ar interface
This rule applies only to packets coming in on, or going out through, this
particular interface or interface group.
For more information on interface groups,
see the
.Ic group
keyword in
.Xr ifconfig 8 .
.It Aq Ar af
This rule applies only to packets of this address family.
Supported values are
.Ar inet
and
.Ar inet6 .
.It Ar proto Aq Ar protocol
This rule applies only to packets of this protocol.
Common protocols are ICMP, ICMP6, TCP, and UDP.
For a list of all the protocol name to number mappings used by
.Xr pfctl 8 ,
see the file
.Em /etc/protocols .
.It Xo
.Ar from Aq Ar source
.Ar port Aq Ar source
.Ar os Aq Ar source
.Ar to Aq Ar dest
.Ar port Aq Ar dest
.Xc
This rule applies only to packets with the specified source and destination
addresses and ports.
d1027 1
a1027 3
Addresses can be specified in CIDR notation (matching netblocks), as
symbolic host names, interface names or interface group names, or as any
of the following keywords:
d1029 5
a1033 16
.Bl -tag -width xxxxxxxxxxxxxx -compact
.It Ar any
Any address.
.It Ar no-route
Any address which is not currently routable.
.It Ar route Aq Ar label
Any address matching the given
.Xr route 8
label.
.It Aq Ar table
Any address matching the given table.
.It Ar urpf-failed
Any source address that fails a unicast reverse path forwarding (URPF)
check, i.e. packets coming in on an interface other than that which holds
the route back to the packet's source address.
.El
d1035 3
a1037 7
Ranges of addresses are specified using the
.Sq -
operator.
For instance:
.Dq 10.1.1.10 - 10.1.1.12
means all addresses from 10.1.1.10 to 10.1.1.12,
hence addresses 10.1.1.10, 10.1.1.11, and 10.1.1.12.
d1039 8
a1046 1
Interface names and interface group names can have modifiers appended:
d1048 1
a1048 10
.Bl -tag -width xxxxxxxxxxxx -compact
.It Ar :0
Do not include interface aliases.
.It Ar :broadcast
Translates to the interface's broadcast address(es).
.It Ar :network
Translates to the network(s) attached to the interface.
.It Ar :peer
Translates to the point-to-point interface's peer address(es).
.El
d1050 3
a1052 4
Host names may also have the
.Ar :0
option appended to restrict the name resolution to the first of each
v4 and v6 address found.
d1054 1
a1054 12
Host name resolution and interface to address translation are done at
ruleset load-time.
When the address of an interface (or host name) changes (under DHCP or PPP,
for instance), the ruleset must be reloaded for the change to be reflected
in the kernel.
Surrounding the interface name (and optional modifiers) in parentheses
changes this behaviour.
When the interface name is surrounded by parentheses, the rule is
automatically updated whenever the interface changes its address.
The ruleset does not need to be reloaded.
This is especially useful with
.Ar nat .
d1056 1
a1056 7
Ports can be specified either by number or by name.
For example, port 80 can be specified as
.Em www .
For a list of all port name to number mappings used by
.Xr pfctl 8 ,
see the file
.Pa /etc/services .
d1058 113
a1170 12
Ports and ranges of ports are specified using these operators:
.Bd -literal -offset indent
=	(equal)
!=	(unequal)
\*(Lt	(less than)
\*(Le	(less than or equal)
\*(Gt	(greater than)
\*(Ge	(greater than or equal)
:	(range including boundaries)
\*(Gt\*(Lt	(range excluding boundaries)
\*(Lt\*(Gt	(except range)
.Ed
d1172 8
a1179 19
.Sq \*(Gt\*(Lt ,
.Sq \*(Lt\*(Gt
and
.Sq \&:
are binary operators (they take two arguments).
For instance:
.Bl -tag -width Ds
.It port 2000:2004
means
.Sq all ports \*(Ge 2000 and \*(Le 2004 ,
hence ports 2000, 2001, 2002, 2003, and 2004.
.It port 2000 \*(Gt\*(Lt 2004
means
.Sq all ports \*(Gt 2000 and \*(Lt 2004 ,
hence ports 2001, 2002, and 2003.
.It port 2000 \*(Lt\*(Gt 2004
means
.Sq all ports \*(Lt 2000 or \*(Gt 2004 ,
hence ports 1\(en1999 and 2005\(en65535.
d1182 7
a1188 7
The operating system of the source host can be specified in the case of TCP
rules with the
.Ar os
modifier.
See the
.Sx OPERATING SYSTEM FINGERPRINTING
section for more information.
d1190 20
a1209 12
The host, port, and OS specifications are optional,
as in the following examples:
.Bd -literal -offset indent
pass in all
pass in from any to any
pass in proto tcp from any port \*(Le 1024 to any
pass in proto tcp from any to any port 25
pass in proto tcp from 10.0.0.0/8 port \*(Gt 1024 \e
      to ! 10.1.2.3 port != ssh
pass in proto tcp from any os "OpenBSD"
pass in proto tcp from route "DTAG"
.Ed
d1212 2
a1213 1
The following additional parameters can be used in the filter:
d1216 12
a1227 2
.It Ar all
This is equivalent to "from any to any".
d1229 1
a1229 15
.It Ar allow-opts
By default, IPv4 packets with IP options or IPv6 packets with routing
extension headers are blocked.
When
.Ar allow-opts
is specified for a
.Ar pass
rule, packets that pass the filter based on that rule (last matching)
do so even if they contain IP options or routing extension headers.
For packets that match state, the rule that initially created the
state is used.
The implicit
.Ar pass
rule that is used when a packet does not match any rules does not
allow IP options.
d1231 5
a1235 6
.It Ar divert-reply
Used to receive replies for sockets that are bound to addresses
which are not local to the machine.
See
.Xr setsockopt 2
for information on how to bind these sockets.
d1237 2
a1238 10
.It Xo Ar divert-to Aq Ar host
.Ar port Aq Ar port
.Xc
Used to redirect packets to a local socket bound to
.Ar host
and
.Ar port .
The packets will not be modified, so
.Xr getsockname 2
on the socket will return the original destination address of the packet.
d1240 11
a1250 28
.It Xo Ar flags Aq Ar a
.Pf / Ns Aq Ar b
.No \*(Ba Ar any
.Xc
This rule only applies to TCP packets that have the flags
.Aq Ar a
set out of set
.Aq Ar b .
Flags not specified in
.Aq Ar b
are ignored.
For stateful connections, the default is
.Ar flags S/SA .
To indicate that flags should not be checked at all, specify
.Ar flags any .
The flags are: (F)IN, (S)YN, (R)ST, (P)USH, (A)CK, (U)RG, (E)CE, and C(W)R.
.Bl -tag -width Fl
.It Ar flags S/S
Flag SYN is set.
The other flags are ignored.
.It Ar flags S/SA
This is the default setting for stateful connections.
Out of SYN and ACK, exactly SYN may be set.
SYN, SYN+PSH, and SYN+RST match, but SYN+ACK, ACK, and ACK+RST do not.
This is more restrictive than the previous example.
.It Ar flags /SFRA
If the first set is not specified, it defaults to none.
All of SYN, FIN, RST, and ACK must be unset.
d1253 4
a1256 27
Because
.Ar flags S/SA
is applied by default (unless
.Ar no state
is specified), only the initial SYN packet of a TCP handshake will create
a state for a TCP connection.
It is possible to be less restrictive, and allow state creation from
intermediate
.Pq non-SYN
packets, by specifying
.Ar flags any .
This will cause
.Xr pf 4
to synchronize to existing connections, for instance
if one flushes the state table.
However, states created from such intermediate packets may be missing
connection details such as the TCP window scaling factor.
States which modify the packet flow, such as those affected by
.Ar modulate ,
.Ar nat-to ,
.Ar rdr-to ,
or
.Ar synproxy state
options, or scrubbed with
.Ar reassemble tcp ,
will also not be recoverable from intermediate packets.
Such connections will stall and time out.
d1258 4
a1261 89
.It Ar group Aq Ar group
Similar to
.Ar user ,
this rule only applies to packets of sockets owned by the specified group.
.Pp
.It Xo Ar icmp-type Aq Ar type
.Ar code Aq Ar code
.Xc
.It Xo Ar icmp6-type Aq Ar type
.Ar code Aq Ar code
.Xc
This rule only applies to ICMP or ICMP6 packets with the specified type
and code.
Text names for ICMP types and codes are listed in
.Xr icmp 4
and
.Xr icmp6 4 .
The protocol and the ICMP type indicator
.Po
.Ar icmp-type
or
.Ar icmp6-type
.Pc
must match.
.Pp
.It Ar label Aq Ar string
Adds a label to the rule, which can be used to identify the rule.
For instance,
.Dq pfctl -s labels
shows per-rule statistics for rules that have labels.
.Pp
The following macros can be used in labels:
.Pp
.Bl -tag -width "$srcaddrXXX" -compact -offset indent
.It Ar $dstaddr
The destination IP address.
.It Ar $dstport
The destination port specification.
.It Ar $if
The interface.
.It Ar $nr
The rule number.
.It Ar $proto
The protocol name.
.It Ar $srcaddr
The source IP address.
.It Ar $srcport
The source port specification.
.El
.Pp
For example:
.Bd -literal -offset indent -compact
ips = "{ 1.2.3.4, 1.2.3.5 }"
pass in proto tcp from any to $ips \e
      port \*(Gt 1023 label "$dstaddr:$dstport"
.Ed
.Pp
Expands to:
.Bd -literal -offset indent -compact
pass in inet proto tcp from any to 1.2.3.4 \e
      port \*(Gt 1023 label "1.2.3.4:\*(Gt1023"
pass in inet proto tcp from any to 1.2.3.5 \e
      port \*(Gt 1023 label "1.2.3.5:\*(Gt1023"
.Ed
.Pp
The macro expansion for the
.Ar label
directive occurs only at configuration file parse time, not during runtime.
.Pp
.It Ar probability Aq Ar number
A probability attribute can be attached to a rule, with a value set between
0 and 1, bounds not included.
In that case, the rule will be honoured using the given probability value
only.
For example, the following rule will drop 20% of incoming ICMP packets:
.Pp
.Dl block in proto icmp probability 20%
.Pp
.It Xo Ar queue Aq Ar queue
.No \*(Ba ( Aq Ar queue ,
.Aq Ar queue )
.Xc
Packets matching this rule will be assigned to the specified queue.
If two queues are given, packets which have a TOS of
.Ar lowdelay
and TCP ACKs with no data payload will be assigned to the second one.
See
.Sx QUEUEING
for setup details.
d1265 4
a1268 2
pass in proto tcp to port 25 queue mail
pass in proto tcp to port 22 queue(ssh_bulk, ssh_prio)
d1271 70
a1340 3
.It Ar rtable Aq Ar number
Used to select an alternate routing table for the routing lookup.
Only effective before the route lookup happened, i.e. when filtering inbound.
d1342 15
a1356 31
.It Ar tag Aq Ar string
Packets matching this rule will be tagged with the
specified string.
The tag acts as an internal marker that can be used to
identify these packets later on.
This can be used, for example, to provide trust between
interfaces and to determine if packets have been
processed by translation rules.
Tags are
.Qq sticky ,
meaning that the packet will be tagged even if the rule
is not the last matching rule.
Further matching rules can replace the tag with a
new one but will not remove a previously applied tag.
A packet is only ever assigned one tag at a time.
Packet tagging can be done during
.Ar nat-to
or
.Ar rdr-to
in addition to filter rules.
Tags take the same macros as labels (see above).
.Pp
.It Ar tagged Aq Ar string
Used with filter or translation rules
to specify that packets must already
be tagged with the given tag in order to match the rule.
Inverse tag matching can also be done
by specifying the
.Cm !\&
operator before the
.Ar tagged
d1358 26
d1385 4
a1388 20
.It Xo Ar tos Aq Ar string
.No \*(Ba Aq Ar number
.Xc
This rule applies to packets with the specified TOS bits set.
.Ar string
may be one of
.Ar critical ,
.Ar inetcontrol ,
.Ar lowdelay ,
.Ar netcontrol ,
.Ar throughput ,
.Ar reliability ,
or one of the DiffServ Code Points:
.Ar ef ,
.Ar af11 ... af43 ,
.Ar cs0 ... cs7 ;
.Ar number
may be either a hex or decimal number.
.Pp
For example, the following rules are identical:
d1390 1
a1390 3
pass all tos lowdelay
pass all tos 0x10
pass all tos 16
d1393 45
a1437 9
.It Ar user Aq Ar user
This rule only applies to packets of sockets owned by the specified user.
For outgoing connections initiated from the firewall, this is the user
that opened the connection.
For incoming connections to the firewall itself, this is the user that
listens on the destination port.
For forwarded connections, where the firewall is not a connection endpoint,
the user and group are
.Em unknown .
d1439 19
a1457 4
All packets, both outgoing and incoming, of one connection are associated
with the same user and group.
Only TCP and UDP packets can be associated with users; for other protocols
these parameters are ignored.
d1459 3
a1461 6
User and group refer to the effective (as opposed to the real) IDs, in
case the socket is created by a setuid/setgid process.
User and group IDs are stored when a socket is created;
when a process creates a listening socket as root (for instance, by
binding to a privileged port) and subsequently changes to another
user ID (to drop privileges), the credentials will remain root.
d1463 3
a1465 29
User and group IDs can be specified as either numbers or names.
The syntax is similar to the one for ports.
The value
.Ar unknown
matches packets of forwarded connections.
.Ar unknown
can only be used with the operators
.Cm =
and
.Cm != .
Other constructs like
.Cm user \*(Ge unknown
are invalid.
Forwarded packets with unknown user and group ID match only rules
that explicitly compare
.Ar unknown
with the operators
.Cm =
or
.Cm != .
For instance
.Cm user \*(Ge 0
does not match forwarded packets.
The following example allows only selected users to open outgoing
connections:
.Bd -literal -offset indent
block out proto { tcp, udp } all
pass  out proto { tcp, udp } all user { \*(Lt 1000, dhartmei }
.Ed
d1467 1
a1467 30
.Ss Routing
If a packet matches a rule with one of the following route options set,
the packet filter will route the packet according to the type of route option.
When such a rule creates state, the route option is also applied to all
packets matching the same connection.
.Bl -tag -width xxxx
.It Ar dup-to
The
.Ar dup-to
option creates a duplicate of the packet and routes it like
.Ar route-to .
The original packet gets routed as it normally would.
.It Ar fastroute
The
.Ar fastroute
option does a normal route lookup to find the next hop for the packet.
.It Ar reply-to
The
.Ar reply-to
option is similar to
.Ar route-to ,
but routes packets that pass in the opposite direction (replies) to the
specified interface.
Opposite direction is only defined in the context of a state entry, and
.Ar reply-to
is useful only in rules that create state.
It can be used on systems with multiple external connections to
route all outgoing packets of a connection through the interface
the incoming connection arrived through (symmetric routing enforcement).
.It Ar route-to
d1469 10
a1478 9
.Ar route-to
option routes the packet to the specified interface with an optional address
for the next hop.
When a
.Ar route-to
rule creates state, only packets that pass in the same direction as the
filter rule specifies will be routed in this way.
Packets passing in the opposite direction (replies) are not affected
and are routed normally.
d1481 21
a1501 3
For the
.Ar dup-to ,
.Ar reply-to ,
d1503 23
a1525 8
.Ar route-to
route options
for which there is a single redirection address which has a
subnet mask smaller than 32 for IPv4 or 128 for IPv6 (more than one IP
address),
the methods
.Ar random ,
.Ar round-robin ,
d1527 25
a1551 4
.Ar source-hash ,
as described above in
.Sx TRANSLATION ,
can be used.
d2386 1
a2386 78
.Sh TRANSLATION EXAMPLES
This example maps incoming requests on port 80 to port 8080, on
which a daemon is running (because, for example, it is not run as root,
and therefore lacks permission to bind to port 80).
.Bd -literal -offset 4n
match in on $ext_if proto tcp from any to any port 80 \e
      rdr-to 127.0.0.1 port 8080
.Ed
.Pp
If the
.Ar pass
modifier is given, packets matching the translation rule are passed without
inspecting the filter rules.
.Bd -literal -offset 4n
match in on $ext_if proto tcp from any to any port 80 \e
      rdr-to 127.0.0.1 port 8080
.Ed
.Pp
In the example below, vlan12 is configured as 192.168.168.1;
the machine translates all packets coming from 192.168.168.0/24 to 204.92.77.111
when they are going out any interface except vlan12.
This has the net effect of making traffic from the 192.168.168.0/24
network appear as though it is the Internet routable address
204.92.77.111 to nodes behind any interface on the router except
for the nodes on vlan12.
Thus, 192.168.168.1 can talk to the 192.168.168.0/24 nodes.
.Bd -literal -offset 4n
match out on ! vlan12 from 192.168.168.0/24 to any nat-to 204.92.77.111
.Ed
.Pp
In the example below, the machine sits between a fake internal
144.19.74.* network, and a routable external IP of 204.92.77.100.
The last rule excludes protocol AH from being translated.
.Bd -literal -offset 4n
pass out on $ext_if from 144.19.74.0/24 nat-to 204.92.77.100
pass out on $ext_if proto ah from 144.19.74.0/24
.Ed
.Pp
In the example below, packets bound for one specific server, as well as those
generated by the sysadmins are not proxied; all other connections are.
.Bd -literal -offset 4n
match in on $int_if proto { tcp, udp } from any to any port 80 \e
      rdr-to 127.0.0.1 port 80
pass in on $int_if proto { tcp, udp } from any to $server port 80
pass in on $int_if proto { tcp, udp } from $sysadmins to any port 80
.Ed
.Pp
This example maps outgoing packets' source port
to an assigned proxy port instead of an arbitrary port.
In this case, proxy outgoing isakmp with port 500 on the gateway.
.Bd -literal -offset 4n
match out on $ext_if inet proto udp from any port isakmp to any \e
    nat-to ($ext_if) port 500
.Ed
.Pp
One more example uses
.Ar rdr-to
to redirect a TCP and UDP port to an internal machine.
.Bd -literal -offset 4n
match in on $ext_if inet proto tcp from any to ($ext_if) port 8080 \e
      rdr-to 10.1.2.151 port 22
match in on $ext_if inet proto udp from any to ($ext_if) port 8080 \e
      rdr-to 10.1.2.151 port 53
.Ed
.Pp
In this example, a NAT gateway is set up to translate internal addresses
using a pool of public addresses (192.0.2.16/28).
A given source address is always translated to the same pool address by
using the source-hash keyword.
The gateway also translates incoming web server connections
to a group of web servers on the internal network.
.Bd -literal -offset 4n
match out on $ext_if inet from any to any nat-to 192.0.2.16/28 \e
    source-hash
match in  on $ext_if proto tcp from any to any port 80 \e
    rdr-to { 10.1.2.155, 10.1.2.160, 10.1.2.161 } round-robin
.Ed
.Sh FILTER EXAMPLES
d2479 77
d2601 2
a2602 2
		 [ portspec ] [ pooltype ] [ "static-port" ] 
		 [ "fastroute" | route ] 
@


1.450
log
@all the new *-to options are part of the "filteropts" section at the
end of a pf rule (nat-to, divert-to, rdr-to, ...).  take the
historical chance to upgrade the grammar and move the route options to
the filteropts section as well.

for example,
  pass in on em0 route-to (em1 192.168.1.1) from 10.1.1.1
becomes
  pass in on em0 from 10.1.1.1 route-to (em1 192.168.1.1)

many people like this including pyr@@ mk@@ kettenis@@ todd@@ and others
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.449 2009/09/01 13:43:15 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: September 1 2009 $
d2403 1
a2403 1
match in pass on $ext_if proto tcp from any to any port 80 \e
@


1.449
log
@document new pf. mostly from igor, input and bnf by me
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.448 2009/07/28 13:29:45 claudio Exp $
d30 1
a30 1
.Dd $Mdocdate: July 28 2009 $
d2587 1
a2587 2
                 [ "on" ifspec ] [ "fastroute" | route ] [ af ]
                 [ protospec ] hosts [ filteropts ]
d2605 1
@


1.448
log
@Recommit rev. 1.446 it is again possible to use DSCP names in tos and settos
statements.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.447 2009/07/27 19:04:30 deraadt Exp $
d30 1
a30 1
.Dd $Mdocdate: July 27 2009 $
d703 1
a703 1
Translation rules modify either the source or destination address of the
d731 3
a733 8
Various types of translation are possible with pf:
.Bl -tag -width xxxx
.It Ar binat
A
.Ar binat
rule specifies a bidirectional mapping between an external IP netblock
and an internal IP netblock.
.It Ar nat
d735 2
a736 2
.Ar nat
rule specifies that IP addresses are to be changed as the packet
d749 1
a749 1
.It Pa rdr
d752 2
a753 2
.Ar rdr
rules can optionally specify port ranges instead of single ports.
d756 1
a756 1
.It rdr ... port 2000:2999 -\*(Gt ... port 4000
d759 1
a759 1
.It rdr ... port 2000:2999 -\*(Gt ... port 4000:*
d767 8
a774 32
.Ar nat
rules and explicitly in the case of
.Ar rdr
rules.
Port numbers are never translated with a
.Ar binat
rule.
.Pp
Evaluation order of the translation rules is dependent on the type
of the translation rules and the direction of a packet.
.Ar binat
rules are always evaluated first.
Then either the
.Ar rdr
rules are evaluated on an inbound packet or the
.Ar nat
rules on an outbound packet.
Rules of the same type are evaluated in the same order in which they
appear in the ruleset.
The first matching rule decides what action is taken.
.Pp
The
.Ar no
option prefixed to a translation rule causes packets to remain untranslated,
much in the same way as
.Ar drop quick
works in the packet filter.
If no rule matches the packet, it is passed to the filter engine unmodified.
.Pp
Translation rules apply only to packets that pass through
the specified interface, and if no interface is specified,
translation is applied to packets on all interfaces.
d790 2
a791 1
rdr on ne3 inet proto tcp to port smtp -\*(Gt 127.0.0.1 port spamd
d800 1
a800 1
.Ar nat
d802 2
a803 3
.Ar rdr
rules
for which there is a single redirection address which has a
d813 1
a813 1
.Ar nat ,
d815 1
a815 1
.Ar rdr ) .
d1275 3
a1277 6
.Ar nat ,
.Ar binat ,
or
.Ar rdr
rules,
.Ar modulate
d1401 1
a1401 2
.Ar nat ,
.Ar rdr ,
d1403 2
a1404 2
.Ar binat
rules in addition to filter rules.
d1569 1
a1569 1
.Ar nat
d1571 2
a1572 2
.Ar rdr
rules and in the routing options of filter rules, but only for
a1779 12
.It Ar binat-anchor Aq Ar name
Evaluates the
.Ar binat
rules in the specified anchor.
.It Ar nat-anchor Aq Ar name
Evaluates the
.Ar nat
rules in the specified anchor.
.It Ar rdr-anchor Aq Ar name
Evaluates the
.Ar rdr
rules in the specified anchor.
d1871 1
a1871 2
.Ar binat ,
.Ar nat ,
d1873 2
a1874 2
.Ar rdr
rules, in order to track address and port translations and reverse the
d2394 2
a2395 2
rdr on $ext_if proto tcp from any to any port 80 -\*(Gt 127.0.0.1 \e
    port 8080
d2403 2
a2404 2
rdr pass on $ext_if proto tcp from any to any port 80 -\*(Gt 127.0.0.1 \e
    port 8080
d2416 1
a2416 1
nat on ! vlan12 from 192.168.168.0/24 to any -\*(Gt 204.92.77.111
d2421 1
a2421 3
The
.Ar no nat
rule excludes protocol AH from being translated.
d2423 2
a2424 2
no nat on $ext_if proto ah from 144.19.74.0/24 to any
nat on $ext_if from 144.19.74.0/24 to any -\*(Gt 204.92.77.100
d2430 4
a2433 4
no rdr on $int_if proto { tcp, udp } from any to $server port 80
no rdr on $int_if proto { tcp, udp } from $sysadmins to any port 80
rdr on $int_if proto { tcp, udp } from any to any port 80 \e
    -\*(Gt 127.0.0.1 port 80
d2440 2
a2441 2
nat on $ext_if inet proto udp from any port isakmp to any \e
    -\*(Gt ($ext_if) port 500
d2444 3
a2446 4
Two more examples.
The first uses binat to translate source and destination addresses
(bidirectional).
The second uses rdr to redirect a TCP and UDP port to an internal machine.
d2448 4
a2451 6
binat on $ext_if from 10.1.2.150 to any -\*(Gt $ext_if

rdr on $ext_if inet proto tcp from any to ($ext_if) port 8080 \e
    -\*(Gt 10.1.2.151 port 22
rdr on $ext_if inet proto udp from any to ($ext_if) port 8080 \e
    -\*(Gt 10.1.2.151 port 53
d2461 4
a2464 3
nat on $ext_if inet from any to any -\*(Gt 192.0.2.16/28 source-hash
rdr on $ext_if proto tcp from any to any port 80 \e
    -\*(Gt { 10.1.2.155, 10.1.2.160, 10.1.2.161 } round-robin
d2553 2
a2554 2
rdr on $ext_if inet proto tcp from \*(Ltspammers\*(Gt to port smtp \e
    tag SPAMD -\*(Gt 127.0.0.1 port spamd
d2564 1
a2564 1
line           = ( option | pf-rule | nat-rule | binat-rule | rdr-rule |
d2601 5
a2605 1
                 "rtable" number | "probability" number"%"
a2610 19
nat-rule       = [ "no" ] "nat" [ "pass" [ "log" [ "(" logopts ")" ] ] ]
                 [ "on" ifspec ] [ af ]
                 [ protospec ] hosts [ "tag" string ] [ "tagged" string ]
                 [ "-\*(Gt" ( redirhost | "{" redirhost-list "}" )
                 [ portspec ] [ pooltype ] [ "static-port" ] ]

binat-rule     = [ "no" ] "binat" [ "pass" [ "log" [ "(" logopts ")" ] ] ]
                 [ "on" interface-name ] [ af ]
                 [ "proto" ( proto-name | proto-number ) ]
                 "from" address [ "/" mask-bits ] "to" ipspec
                 [ "tag" string ] [ "tagged" string ]
                 [ "-\*(Gt" address [ "/" mask-bits ] ]

rdr-rule       = [ "no" ] "rdr" [ "pass" [ "log" [ "(" logopts ")" ] ] ]
                 [ "on" ifspec ] [ af ]
                 [ protospec ] hosts [ "tag" string ] [ "tagged" string ]
                 [ "-\*(Gt" ( redirhost | "{" redirhost-list "}" )
                 [ portspec ] [ pooltype ] ]

d2633 1
a2633 1
trans-anchors  = ( "nat-anchor" | "rdr-anchor" | "binat-anchor" ) string
@


1.447
log
@Please don't commit documentation for changes which don't compile in
the tree.  Surely you were involved and noticed that the tree was being
broken.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.445 2009/07/19 14:05:36 sobrado Exp $
d30 1
a30 1
.Dd $Mdocdate: July 19 2009 $
d1457 2
d1460 1
d1462 5
a1466 2
or
.Ar reliability ;
@


1.446
log
@List the additional TOS values and DiffServ Code Points now recognised
by pfctl(8).
@
text
@a1456 2
.Ar critical ,
.Ar inetcontrol ,
a1457 1
.Ar netcontrol ,
d1459 2
a1460 5
.Ar reliability ,
or one of the DiffServ Code Points:
.Ar ef ,
.Ar af11 ... af43 ,
.Ar cs0 ... cs7 ;
@


1.445
log
@take out a few .Ar macros from the examples.

pointed out by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.444 2009/07/18 20:28:15 sobrado Exp $
d30 1
a30 1
.Dd $Mdocdate: July 18 2009 $
d1457 2
d1460 1
d1462 5
a1466 2
or
.Ar reliability ;
@


1.444
log
@use a better layout to improve readability.

ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.443 2009/05/30 16:56:17 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 30 2009 $
d761 1
a761 1
.It Ar rdr ... port 2000:2999 -\*(Gt ... port 4000
d764 1
a764 1
.It Ar rdr ... port 2000:2999 -\*(Gt ... port 4000:*
d1180 1
a1180 1
.It Ar port 2000:2004
d1184 1
a1184 1
.It Ar port 2000 \*(Gt\*(Lt 2004
d1188 1
a1188 1
.It Ar port 2000 \*(Lt\*(Gt 2004
@


1.443
log
@correct the bnf for return-rst, and describe the optional ttl parameter
for it;

started by a mail from Laurent Ghigonis
ok fgsch henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.442 2009/05/01 09:01:26 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: May 1 2009 $
d759 3
a761 1
rdr ... port 2000:2999 -\*(Gt ... port 4000
d763 4
a766 2
rdr ... port 2000:2999 -\*(Gt ... port 4000:*
redirects port 2000 to 4000, 2001 to 4001, ..., 2999 to 4999.
@


1.442
log
@use printf instead of echo for one of the anchor examples - this allows it
to work for users of csh and /bin/echo;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.441 2009/04/27 21:52:26 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 27 2009 $
d958 3
d2701 2
a2702 1
return         = "drop" | "return" | "return-rst" [ "( ttl" number ")" ] |
@


1.441
log
@now that require-order is no longer on by default, we can relax the ordering
of this page a little; instead of talking about statement types, just provide
a brief overview of the page;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.440 2009/04/27 19:04:42 jmc Exp $
d1856 2
a1857 2
# echo 'anchor "spam/allowed"' | pfctl -f -
# echo 'anchor "../banned"\enpass' | pfctl -a spam/allowed -f -
@


1.440
log
@- use .Dl for short displays
- .Nm does not require args
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.439 2009/04/27 15:32:52 jmc Exp $
d43 24
a76 22
There are six types of statements in
.Nm :
.Bl -tag -width xxxx
.It Cm Macros
User-defined variables may be defined and used later, simplifying
the configuration file.
Macros must be defined before they are referenced in
.Nm .
.It Cm Tables
Tables provide a mechanism for increasing the performance and flexibility of
rules with large numbers of source or destination addresses.
.It Cm Options
Options tune the behaviour of the packet filtering engine.
.It Cm Queueing
Queueing provides rule-based bandwidth control.
.It Cm Translation Li (various forms of NAT)
Translation rules specify how addresses are to be mapped or redirected to
other addresses.
.It Cm Packet Filtering
Packet filtering provides rule-based blocking or passing of packets.
.El
.Sh MACROS
a92 122
.Sh TABLES
Tables are named structures which can hold a collection of addresses and
networks.
Lookups against tables in
.Xr pf 4
are relatively fast, making a single rule with tables much more efficient,
in terms of
processor usage and memory consumption, than a large number of rules which
differ only in IP address (either created explicitly or automatically by rule
expansion).
.Pp
Tables can be used as the source or destination of filter
or translation rules.
They can also be used for the redirect address of
.Ar nat
and
.Ar rdr
rules and in the routing options of filter rules, but only for
.Ar round-robin
pools.
.Pp
Tables can be defined with any of the following
.Xr pfctl 8
mechanisms.
As with macros, reserved words may not be used as table names.
.Bl -tag -width "manually"
.It Ar manually
Persistent tables can be manually created with the
.Ar add
or
.Ar replace
option of
.Xr pfctl 8 ,
before or after the ruleset has been loaded.
.It Pa pf.conf
Table definitions can be placed directly in this file and loaded at the
same time as other rules are loaded, atomically.
Table definitions inside
.Nm
use the
.Ar table
statement, and are especially useful to define non-persistent tables.
The contents of a pre-existing table defined without a list of addresses
to initialize it is not altered when
.Nm
is loaded.
A table initialized with the empty list,
.Li { } ,
will be cleared on load.
.El
.Pp
Tables may be defined with the following attributes:
.Bl -tag -width persist
.It Ar const
The
.Ar const
flag prevents the user from altering the contents of the table once it
has been created.
Without that flag,
.Xr pfctl 8
can be used to add or remove addresses from the table at any time, even
when running with
.Xr securelevel 7
= 2.
.It Ar counters
The
.Ar counters
flag enables per-address packet and byte counters, which can be displayed with
.Xr pfctl 8 .
.It Ar persist
The
.Ar persist
flag forces the kernel to keep the table even when no rules refer to it.
If the flag is not set, the kernel will automatically remove the table
when the last rule referring to it is flushed.
.El
.Pp
This example
creates a table called private,
to hold RFC 1918 private network blocks,
and a table called badhosts,
which is initially empty.
A filter rule is set up to block all traffic coming from addresses listed in
either table:
.Bd -literal -offset indent
table \*(Ltprivate\*(Gt const { 10/8, 172.16/12, 192.168/16 }
table \*(Ltbadhosts\*(Gt persist
block on fxp0 from { \*(Ltprivate\*(Gt, \*(Ltbadhosts\*(Gt } to any
.Ed
.Pp
The private table cannot have its contents changed and the badhosts table
will exist even when no active filter rules reference it.
Addresses may later be added to the badhosts table, so that traffic from
these hosts can be blocked by using the following:
.Pp
.Dl # pfctl -t badhosts -Tadd 204.92.77.111
.Pp
A table can also be initialized with an address list specified in one or more
external files, using the following syntax:
.Bd -literal -offset indent
table \*(Ltspam\*(Gt persist file "/etc/spammers" file "/etc/openrelays"
block on fxp0 from \*(Ltspam\*(Gt to any
.Ed
.Pp
The files
.Pa /etc/spammers
and
.Pa /etc/openrelays
list IP addresses, one per line.
Any lines beginning with a
.Sq #
are treated as comments and ignored.
In addition to being specified by IP address, hosts may also be
specified by their hostname.
When the resolver is called to add a hostname to a table,
.Ar all
resulting IPv4 and IPv6 addresses are placed into the table.
IP addresses can also be entered in a table by specifying a valid interface
name, a valid interface group, or the
.Ar self
keyword, in which case all addresses assigned to the interface(s) will be
added to the table.
d1516 3
a1518 3
.Sh ROUTING
If a packet matches a rule with a route option set, the packet filter will
route the packet according to the type of route option.
d1575 4
a1578 1
.Sh STATEFUL FILTERING
d1580 5
a1584 18
filters packets statefully,
which has several advantages.
For TCP connections, comparing a packet to a state involves checking
its sequence numbers, as well as TCP timestamps if a rule using the
.Ar reassemble tcp
parameter applies to the connection.
If these values are outside the narrow windows of expected
values, the packet is dropped.
This prevents spoofing attacks, such as when an attacker sends packets with
a fake source address/port but does not know the connection's sequence
numbers.
Similarly,
.Xr pf 4
knows how to match ICMP replies to states.
For example,
to allow echo requests (such as those created by
.Xr ping 8 )
out statefully and match incoming echo replies correctly to states:
d1586 4
a1589 19
.Dl pass out inet proto icmp all icmp-type echoreq
.Pp
Also, looking up states is usually faster than evaluating rules.
If there are 50 rules, all of them are evaluated sequentially in O(n).
Even with 50000 states, only 16 comparisons are needed to match a
state, since states are stored in a binary search tree that allows
searches in O(log2 n).
.Pp
Furthermore, correct handling of ICMP error messages is critical to
many protocols, particularly TCP.
.Xr pf 4
matches ICMP error messages to the correct connection, checks them against
connection parameters, and passes them if appropriate.
For example if an ICMP source quench message referring to a stateful TCP
connection arrives, it will be matched to the state and get passed.
.Pp
Finally, state tracking is required for
.Ar binat ,
.Ar nat ,
d1592 3
a1594 2
rules, in order to track address and port translations and reverse the
translation on returning packets.
d1596 341
a1936 27
.Xr pf 4
will also create state for other protocols which are effectively stateless by
nature.
UDP packets are matched to states using only host addresses and ports,
and other protocols are matched to states using only the host addresses.
.Pp
If stateless filtering of individual packets is desired,
the
.Ar no state
keyword can be used to specify that state will not be created
if this is the last matching rule.
A number of parameters can also be set to affect how
.Xr pf 4
handles state tracking,
as detailed below.
.Ss State Modulation
Much of the security derived from TCP is attributable to how well the
initial sequence numbers (ISNs) are chosen.
Some popular stack implementations choose
.Em very
poor ISNs and thus are normally susceptible to ISN prediction exploits.
By applying a
.Ar modulate state
rule to a TCP connection,
.Xr pf 4
will create a high quality random sequence number for each connection
endpoint.
a2322 1
.Pp
a2421 168
.Sh ANCHORS
Besides the main ruleset,
.Nm
can specify
.Ar anchor
attachment points.
An anchor is a container that can hold rules,
address tables, and other anchors.
When evaluation of the main ruleset reaches an
.Ar anchor
rule,
.Xr pf 4
will proceed to evaluate all rules specified in that anchor.
.Pp
The following example blocks all packets on the external interface by default,
then evaluates all rules in the anchor named "spam",
and finally passes all outgoing connections and
incoming connections to port 25:
.Bd -literal -offset indent
ext_if = "kue0"
block on $ext_if all
anchor spam
pass out on $ext_if all
pass in on $ext_if proto tcp from any to $ext_if port smtp
.Ed
.Pp
Anchors can be manipulated through
.Xr pfctl 8
without reloading the main ruleset or other anchors.
This loads a single rule into the anchor,
which blocks all packets from a specific address:
.Bd -literal -offset indent
# echo "block in quick from 1.2.3.4 to any" | pfctl -a spam -f -
.Ed
.Pp
The anchor can also be populated by adding a
.Ar load anchor
rule after the anchor rule.
When
.Xr pfctl 8
loads
.Nm ,
it will also load all the rules from the file
.Pa /etc/pf-spam.conf
into the anchor.
.Bd -literal -offset indent
anchor spam
load anchor spam from "/etc/pf-spam.conf"
.Ed
.Pp
Filter rule anchors can also be loaded inline in the ruleset
within a brace-delimited block.
Brace delimited blocks may contain rules or other brace-delimited blocks.
When anchors are loaded this way the anchor name becomes optional.
Since the parser specification for anchor names is a string,
double quote characters
.Pq Sq \&"
should be placed around the anchor name.
.Bd -literal -offset indent
anchor "external" on egress {
	block
	anchor out {
		pass proto tcp from any to port { 25, 80, 443 }
	}
	pass in proto tcp to any port 22
}
.Ed
.Pp
Anchor rules can also specify packet filtering parameters
using the same syntax as filter rules.
When parameters are used,
the anchor rule is only evaluated for matching packets.
This allows conditional evaluation of anchors, like:
.Bd -literal -offset indent
block on $ext_if all
anchor spam proto tcp from any to any port smtp
pass out on $ext_if all
pass in on $ext_if proto tcp from any to $ext_if port smtp
.Ed
.Pp
The rules inside anchor "spam" are only evaluated
for TCP packets with destination port 25.
Hence, the following
will only block connections from 1.2.3.4 to port 25:
.Bd -literal -offset indent
# echo "block in quick from 1.2.3.4 to any" | pfctl -a spam -f -
.Ed
.Pp
Matching filter and translation rules marked with the
.Ar quick
option are final and abort the evaluation of the rules in other
anchors and the main ruleset.
If the anchor itself is marked with the
.Ar quick
option,
ruleset evaluation will terminate when the anchor is exited if the packet is
matched by any rule within the anchor.
.Pp
An anchor references other anchor attachment points
using the following syntax:
.Bl -tag -width xxxx
.It Ar anchor Aq Ar name
Evaluates the filter rules in the specified anchor.
.It Ar binat-anchor Aq Ar name
Evaluates the
.Ar binat
rules in the specified anchor.
.It Ar nat-anchor Aq Ar name
Evaluates the
.Ar nat
rules in the specified anchor.
.It Ar rdr-anchor Aq Ar name
Evaluates the
.Ar rdr
rules in the specified anchor.
.El
.Pp
An anchor has a name which specifies the path where
.Xr pfctl 8
can be used to access the anchor to perform operations on it, such as
attaching child anchors to it or loading rules into it.
Anchors may be nested, with components separated by
.Sq /
characters, similar to how file system hierarchies are laid out.
The main ruleset is actually the default anchor, so filter and
translation rules, for example, may also be contained in any anchor.
.Pp
Anchor rules are evaluated relative to the anchor in which they are contained.
For example,
all anchor rules specified in the main ruleset will reference
anchor attachment points underneath the main ruleset,
and anchor rules specified in a file loaded from a
.Ar load anchor
rule will be attached under that anchor point.
.Pp
Anchors may end with the asterisk
.Pq Sq *
character, which signifies that all anchors attached at that point
should be evaluated in the alphabetical ordering of their anchor name.
For example,
the following
will evaluate each rule in each anchor attached to the "spam" anchor:
.Bd -literal -offset indent
anchor "spam/*"
.Ed
.Pp
Note that it will only evaluate anchors that are directly attached to the
"spam" anchor, and will not descend to evaluate anchors recursively.
.Pp
Since anchors are evaluated relative to the anchor in which they are
contained, there is a mechanism for accessing the parent and ancestor
anchors of a given anchor.
Similar to file system path name resolution, if the sequence
.Sq ..
appears as an anchor path component, the parent anchor of the current
anchor in the path evaluation at that point will become the new current
anchor.
As an example, consider the following:
.Bd -literal -offset indent
# echo 'anchor "spam/allowed"' | pfctl -f -
# echo 'anchor "../banned"\enpass' | pfctl -a spam/allowed -f -
.Ed
.Pp
Evaluation of the main ruleset will lead into the
spam/allowed anchor, which will evaluate the rules in the
spam/banned anchor, if any, before finally evaluating the
.Ar pass
rule.
@


1.439
log
@- restructure the ANCHORS section
- no need to escape quotes within displays
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.438 2009/04/26 12:30:20 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: April 26 2009 $
d41 1
a41 1
.Nm pf.conf .
d54 1
a54 1
.Nm pf.conf :
d60 1
a60 1
.Nm pf.conf .
d129 1
a129 1
.Nm pf.conf
d135 1
a135 1
.Nm pf.conf
d185 2
a186 3
.Bd -literal -offset indent
# pfctl -t badhosts -Tadd 204.92.77.111
.Ed
d282 2
a283 3
.Bd -literal -offset indent
set limit states 20000
.Ed
d287 2
a288 3
.Bd -literal -offset indent
set limit frags 20000
.Ed
d296 2
a297 3
.Bd -literal -offset indent
set limit src-nodes 2000
.Ed
d317 2
a318 3
.Bd -literal -offset indent
# pfctl -s info
.Ed
d323 2
a324 3
.Bd -literal -offset indent
set loginterface dc0
.Ed
d327 2
a328 3
.Bd -literal -offset indent
set loginterface none
.Ed
d427 2
a428 3
.Bd -literal -offset indent
set state-defaults pflow, no-sync
.Ed
d550 1
a550 1
.Nm pf.conf ,
d827 1
a827 1
.Nm pf.conf .
d1088 2
a1089 3
.Bd -literal -offset indent
block all
.Ed
d1505 2
a1506 3
.Bd -literal -offset indent
block in proto icmp probability 20%
.Ed
d1715 2
a1716 3
.Bd -literal -offset indent
pass out inet proto icmp all icmp-type echoreq
.Ed
d2089 2
a2090 3
.Bd -literal -offset indent
match in all scrub (no-df max-mss 1440)
.Ed
d2153 2
a2154 3
.Bd -literal -offset indent -compact
antispoof for lo0
.Ed
d2166 2
a2167 3
.Bd -literal -offset indent
antispoof for wi0 inet
.Ed
d2294 1
a2294 1
.Nm pf.conf ,
@


1.438
log
@switch the require-order default to "no". regression tests still pass.
ok henning@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.437 2009/04/24 20:35:01 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 24 2009 $
d84 1
a84 1
For example,
d86 2
a87 2
ext_if = \&"kue0\&"
all_ifs = \&"{\&" $ext_if lo0 \&"}\&"
d192 1
a192 1
table \*(Ltspam\*(Gt persist file \&"/etc/spammers\&" file \&"/etc/openrelays\&"
d1491 1
a1491 1
ips = \&"{ 1.2.3.4, 1.2.3.5 }\&"
d1493 1
a1493 1
      port \*(Gt 1023 label \&"$dstaddr:$dstport\&"
d1499 1
a1499 1
      port \*(Gt 1023 label \&"1.2.3.4:\*(Gt1023\&"
d1501 1
a1501 1
      port \*(Gt 1023 label \&"1.2.3.5:\*(Gt1023\&"
d2269 2
a2270 2
.Xr pfctl 8
can load rulesets into
a2274 35
.Pp
An anchor has a name which specifies the path where
.Xr pfctl 8
can be used to access the anchor to perform operations on it, such as
attaching child anchors to it or loading rules into it.
Anchors may be nested, with components separated by
.Sq /
characters, similar to how file system hierarchies are laid out.
The main ruleset is actually the default anchor, so filter and
translation rules, for example, may also be contained in any anchor.
.Pp
An anchor can reference another anchor attachment point
using the following kinds of rules:
.Bl -tag -width xxxx
.It Ar anchor Aq Ar name
Evaluates the filter rules in the specified anchor.
.It Ar binat-anchor Aq Ar name
Evaluates the
.Ar binat
rules in the specified anchor.
.It Xo Ar load anchor
.Aq Ar name
.Ar from Aq Ar file
.Xc
Loads the rules from the specified file into the specified anchor.
.It Ar nat-anchor Aq Ar name
Evaluates the
.Ar nat
rules in the specified anchor.
.It Ar rdr-anchor Aq Ar name
Evaluates the
.Ar rdr
rules in the specified anchor.
.El
.Pp
a2280 24
Matching filter and translation rules marked with the
.Ar quick
option are final and abort the evaluation of the rules in other
anchors and the main ruleset.
If the anchor itself is marked with the
.Ar quick
option,
ruleset evaluation will terminate when the anchor is exited if the packet is
matched by any rule within the anchor.
.Pp
Anchor rules are evaluated relative to the anchor in which they are contained.
For example,
all anchor rules specified in the main ruleset will reference
anchor attachment points underneath the main ruleset,
and anchor rules specified in a file loaded from a
.Ar load anchor
rule will be attached under that anchor point.
.Pp
Rules may be contained in anchor attachment points
which do not contain any rules when the main ruleset is loaded,
and later such anchors can be manipulated through
.Xr pfctl 8
without reloading the main ruleset or other anchors.
.Pp
d2286 1
a2286 1
ext_if = \&"kue0\&"
d2293 3
d2299 1
a2299 1
# echo \&"block in quick from 1.2.3.4 to any\&" \&| pfctl -a spam -f -
a2311 1
.Pp
d2317 19
a2335 2
Optionally,
anchor rules can specify packet filtering parameters
d2352 1
a2352 1
# echo \&"block in quick from 1.2.3.4 to any" \&| pfctl -a spam -f -
d2355 47
d2426 2
a2427 3
# echo ' anchor "spam/allowed" ' | pfctl -f -
# echo -e ' anchor "../banned" \en pass' | \e
      pfctl -a spam/allowed -f -
a2434 21
.Pp
Filter rule anchors can also be loaded inline in the ruleset
within a brace-delimited block.
Brace delimited blocks may contain rules or other brace-delimited blocks.
When anchors are loaded this way the anchor name becomes optional.
.Bd -literal -offset indent
anchor "external" on egress {
	block
	anchor out {
		pass proto tcp from any to port { 25, 80, 443 }
	}
	pass in proto tcp to any port 22
}
.Ed
.Pp
Since the parser specification for anchor names is a string, any
reference to an anchor name containing
.Sq /
characters will require double quote
.Pq Sq \&"
characters around the anchor name.
d2523 1
a2523 1
ext_if = \&"kue0\&"
@


1.437
log
@tweak ANCHORS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.436 2009/04/24 15:40:02 jmc Exp $
a73 13
.Pp
With the exception of
.Cm macros
and
.Cm tables ,
the types of statements should be grouped and appear
in the order shown above, as this matches the operation of the underlying
packet filtering engine.
By default
.Xr pfctl 8
enforces this order (see
.Ar set require-order
below).
d373 2
a374 1
By default
d376 3
a378 1
enforces an ordering of the statement types in the ruleset to:
d383 1
a383 6
Setting this option to
.Ar no
disables this enforcement.
There may be non-trivial and non-obvious implications to an out of
order ruleset.
Consider carefully before disabling the order enforcement.
@


1.436
log
@reduce the verbosity of the two examples sections, and provide some
indent;

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.435 2009/04/24 05:44:39 jmc Exp $
d2335 1
a2335 3
If the
.Ar anchor
itself is marked with the
d2341 4
a2344 5
.Ar anchor
rules are evaluated relative to the anchor in which they are contained.
For example, all anchor
rules specified in the main ruleset will reference anchor
attachment points underneath the main ruleset,
d2349 3
a2351 4
Rules may be contained in
.Ar anchor
attachment points which do not contain any rules when the main ruleset
is loaded, and later such anchors can be manipulated through
d2375 1
a2375 6
rule after the anchor rule:
.Bd -literal -offset indent
anchor spam
load anchor spam from "/etc/pf-spam.conf"
.Ed
.Pp
d2384 5
d2428 1
a2428 1
.Dq ..
@


1.435
log
@rearrange/merge the various sections to impose some structure on this page;
ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.434 2009/04/22 13:32:25 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 22 2009 $
d2473 3
a2475 6
.Bd -literal
# use a macro for the interface name, so it can be changed easily
ext_if = \&"ne3\&"

# map daemon on 8080 to appear to be on 80
rdr on $ext_if proto tcp from any to any port 80 -\*(Gt 127.0.0.1 port 8080
d2481 2
a2482 2
inspecting the filter rules:
.Bd -literal
d2484 1
a2484 1
      port 8080
d2494 2
a2495 2
(Thus, 192.168.168.1 can talk to the 192.168.168.0/24 nodes.)
.Bd -literal
d2499 2
a2500 2
In the example below, the machine sits between a fake internal 144.19.74.*
network, and a routable external IP of 204.92.77.100.
d2504 1
a2504 2
.Bd -literal
# NO NAT
d2511 1
a2511 2
.Bd -literal
# NO RDR
d2514 2
a2515 2
rdr on $int_if proto { tcp, udp } from any to any port 80 -\*(Gt 127.0.0.1 \e
      port 80
d2518 13
a2530 27
This longer example uses both a NAT and a redirection.
The external interface has the address 157.161.48.183.
On localhost, we are running
.Xr ftp-proxy 8 ,
waiting for FTP sessions to be redirected to it.
The three mandatory anchors for
.Xr ftp-proxy 8
are omitted from this example; see the
.Xr ftp-proxy 8
manpage.
.Bd -literal
# NAT
# Translate outgoing packets' source addresses (any protocol).
# In this case, any address but the gateway's external address is mapped.
nat on $ext_if inet from ! ($ext_if) to any -\*(Gt ($ext_if)

# NAT PROXYING
# Map outgoing packets' source port to an assigned proxy port instead of
# an arbitrary port.
# In this case, proxy outgoing isakmp with port 500 on the gateway.
nat on $ext_if inet proto udp from any port = isakmp to any -\*(Gt ($ext_if) \e
      port 500

# BINAT
# Translate outgoing packets' source address (any protocol).
# Translate incoming packets' destination address to an internal machine
# (bidirectional).
a2532 3
# RDR
# Translate incoming packets' destination addresses.
# As an example, redirect a TCP and UDP port to an internal machine.
d2534 1
a2534 1
      -\*(Gt 10.1.2.151 port 22
d2536 1
a2536 6
      -\*(Gt 10.1.2.151 port 53

# RDR
# Translate outgoing ftp control connections to send them to localhost
# for proxying with ftp-proxy(8) running on port 8021.
rdr on $int_if proto tcp from any to any port 21 -\*(Gt 127.0.0.1 port 8021
d2540 6
a2545 8
using a pool of public addresses (192.0.2.16/28) and to redirect
incoming web server connections to a group of web servers on the internal
network.
.Bd -literal
# NAT LOAD BALANCE
# Translate outgoing packets' source addresses using an address pool.
# A given source address is always translated to the same pool address by
# using the source-hash keyword.
a2546 4

# RDR ROUND ROBIN
# Translate incoming web server connections to a group of web servers on
# the internal network.
d2548 1
a2548 1
      -\*(Gt { 10.1.2.155, 10.1.2.160, 10.1.2.161 } round-robin
d2551 6
a2556 6
.Bd -literal
# The external interface is kue0
# (157.161.48.183, the only routable address)
# and the private network is 10.0.0.0/8, for which we are doing NAT.

# use a macro for the interface name, so it can be changed easily
a2557 2

# normalise all incoming traffic
a2558 2

# block and log everything by default
d2560 10
a2569 2

# block anything coming from source we have no back routes for
a2570 3

# block packets whose ingress interface does not match the one in
# the route back to their source address
a2571 4

# block and log outgoing packets that do not have our address as source,
# they are either spoofed or something is misconfigured (NAT disabled,
# for instance), we want to be nice and do not send out garbage.
a2572 2

# silently drop broadcasts (cable modem noise)
a2573 4

# block and log incoming packets from reserved address space and invalid
# addresses, they are either spoofed or misconfigured, we cannot reply to
# them anyway (hence, no return-rst).
d2575 10
a2584 9
      192.168.0.0/16, 255.255.255.255/32 } to any

# ICMP

# pass out/in certain ICMP queries and keep state (ping)
# state matching is done on host addresses and ICMP id (not type/code),
# so replies (like 0/0 for 8/0) will match queries
# ICMP error messages (which always refer to a TCP/UDP packet) are
# handled by the TCP/UDP states
d2586 6
a2591 4

# UDP

# pass out all UDP connections and keep state
a2592 2

# pass in certain UDP connections and keep state (DNS)
d2594 8
a2601 4

# TCP

# pass out all TCP connections and modulate state
d2603 10
a2612 13

# pass in certain TCP connections and keep state (SSH, SMTP, DNS, IDENT)
pass in on $ext_if proto tcp from any to any port { ssh, smtp, domain, \e
      auth }

# Do not allow Windows 9x SMTP connections since they are typically
# a viral worm. Alternately we could limit these OSes to 1 connection each.
block in on $ext_if proto tcp from any os {"Windows 95", "Windows 98"} \e
      to any port smtp

# IPv6
# pass in/out all IPv6 traffic: note that we have to enable this in two
# different ways, on both our physical interface and our tunnel
d2615 10
a2624 9

# Packet Tagging

# three interfaces: $int_if, $ext_if, and $wifi_if (wireless). NAT is
# being done on $ext_if for all outgoing packets. tag packets in on
# $int_if and pass those tagged packets out on $ext_if.  all other
# outgoing packets (i.e. packets from the wireless network) are only
# permitted to access port 80.

d2631 6
a2636 4

# tag incoming packets as they are redirected to spamd(8). use the tag
# to pass those packets through the packet filter.

d2638 1
a2638 1
	tag SPAMD -\*(Gt 127.0.0.1 port spamd
@


1.434
log
@tweaks for the final sections;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.433 2009/04/21 16:11:51 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 21 2009 $
d39 1
a39 1
packet filter modifies, drops or passes packets according to rules or
d42 11
a52 1
.Sh STATEMENT ORDER
d79 1
a79 2
the types of statements should be grouped and appear in
.Nm pf.conf
a86 11
.Pp
Comments can be put anywhere in the file using a hash mark
.Pq Sq # ,
and extend to the end of the current line.
.Pp
Additional configuration files can be included with the
.Ic include
keyword, for example:
.Bd -literal -offset indent
include "/etc/pf/sub.filter.conf"
.Ed
d965 64
d1038 2
d1055 18
d1147 1
a1147 79
By default
.Xr pf 4
filters packets statefully; the first time a packet matches a
.Ar pass
rule, a state entry is created; for subsequent packets the filter checks
whether the packet matches any state.
If it does, the packet is passed without evaluation of any rules.
After the connection is closed or times out, the state entry is automatically
removed.
.Pp
This has several advantages.
For TCP connections, comparing a packet to a state involves checking
its sequence numbers, as well as TCP timestamps if a rule using the
.Ar reassemble tcp
parameter applies to the connection.
If these values are outside the narrow windows of expected
values, the packet is dropped.
This prevents spoofing attacks, such as when an attacker sends packets with
a fake source address/port but does not know the connection's sequence
numbers.
Similarly,
.Xr pf 4
knows how to match ICMP replies to states.
For example,
to allow echo requests (such as those created by
.Xr ping 8 )
out statefully and match incoming echo replies correctly to states:
.Bd -literal -offset indent
pass out inet proto icmp all icmp-type echoreq
.Ed
.Pp
Also, looking up states is usually faster than evaluating rules.
If there are 50 rules, all of them are evaluated sequentially in O(n).
Even with 50000 states, only 16 comparisons are needed to match a
state, since states are stored in a binary search tree that allows
searches in O(log2 n).
.Pp
Furthermore, correct handling of ICMP error messages is critical to
many protocols, particularly TCP.
.Xr pf 4
matches ICMP error messages to the correct connection, checks them against
connection parameters, and passes them if appropriate.
For example if an ICMP source quench message referring to a stateful TCP
connection arrives, it will be matched to the state and get passed.
.Pp
Finally, state tracking is required for
.Ar binat ,
.Ar nat ,
and
.Ar rdr
rules, in order to track address and port translations and reverse the
translation on returning packets.
.Pp
.Xr pf 4
will also create state for other protocols which are effectively stateless by
nature.
UDP packets are matched to states using only host addresses and ports,
and other protocols are matched to states using only the host addresses.
.Pp
If stateless filtering of individual packets is desired,
the
.Ar no state
keyword can be used to specify that state will not be created
if this is the last matching rule.
A number of parameters can also be set to affect how
.Xr pf 4
handles state tracking.
See
.Sx STATEFUL TRACKING OPTIONS
below for further details.
.Sh PARAMETERS
The rule parameters specify the packets to which a rule applies.
A packet always comes in on, or goes out through, one interface.
Most parameters are optional.
If a parameter is specified, the rule only applies to packets with
matching attributes.
Certain parameters can be expressed as lists, in which case
.Xr pfctl 8
generates all needed rule combinations.
d1150 1
a1150 2
This rule applies to incoming or outgoing packets.
If neither
d1152 1
a1152 1
nor
d1154 3
a1156 1
are specified, the rule will match packets in both directions.
d1353 1
a1353 1
A number of other parameters can be used with filtering rules:
a1554 6
.It Ar scrub Aq Ar parameter
Perform traffic normalization on matching packets.
See
.Sx TRAFFIC NORMALIZATION
for further information.
.Pp
d1661 41
a1701 7
.Sh TRAFFIC NORMALIZATION
Traffic normalization is used to sanitize packet content in such
a way that there are no ambiguities in packet interpretation on
the receiving side.
Packet normalization is invoked with the
.Ar scrub
option, added to regular rules.
d1703 31
a1733 11
.Ar scrub
has the following parameters:
.Bl -tag -width xxxx
.It Ar no-df
Clears the
.Ar dont-fragment
bit from a matching IP packet.
Some operating systems are known to generate fragmented packets with the
.Ar dont-fragment
bit set.
This is particularly true with NFS.
d1735 14
a1748 5
will drop such fragmented
.Ar dont-fragment
packets unless
.Ar no-df
is specified.
d1750 2
a1751 76
Unfortunately some operating systems also generate their
.Ar dont-fragment
packets with a zero IP identification field.
Clearing the
.Ar dont-fragment
bit on packets with a zero IP ID may cause deleterious results if an
upstream router later fragments the packet.
Using the
.Ar random-id
modifier (see below) is recommended in combination with the
.Ar no-df
modifier to ensure unique IP identifiers.
.It Ar min-ttl Aq Ar number
Enforces a minimum TTL for matching IP packets.
.It Ar max-mss Aq Ar number
Enforces a maximum MSS for matching TCP packets.
.It Xo Ar set-tos Aq Ar string
.No \*(Ba Aq Ar number
.Xc
Enforces a TOS for matching IP packets.
.Ar string
may be one of
.Ar lowdelay ,
.Ar throughput ,
or
.Ar reliability ;
.Ar number
may be either a hex or decimal number.
.It Ar random-id
Replaces the IP identification field with random values to compensate
for predictable values generated by many hosts.
This option only applies to packets that are not fragmented
after the optional fragment reassembly.
.It Ar reassemble tcp
Statefully normalizes TCP connections.
.Ar reassemble tcp
performs the following normalizations:
.Bl -ohang
.It TTL
Neither side of the connection is allowed to reduce their IP TTL.
An attacker may send a packet such that it reaches the firewall, affects
the firewall state, and expires before reaching the destination host.
.Ar reassemble tcp
will raise the TTL of all packets back up to the highest value seen on
the connection.
.It Timestamp Modulation
Modern TCP stacks will send a timestamp on every TCP packet and echo
the other endpoint's timestamp back to them.
Many operating systems will merely start the timestamp at zero when
first booted, and increment it several times a second.
The uptime of the host can be deduced by reading the timestamp and multiplying
by a constant.
Also observing several different timestamps can be used to count hosts
behind a NAT device.
And spoofing TCP packets into a connection requires knowing or guessing
valid timestamps.
Timestamps merely need to be monotonically increasing and not derived off a
guessable base time.
.Ar reassemble tcp
will cause
.Ar scrub
to modulate the TCP timestamps with a random number.
.It Extended PAWS Checks
There is a problem with TCP on long fat pipes, in that a packet might get
delayed for longer than it takes the connection to wrap its 32-bit sequence
space.
In such an occurrence, the old packet would be indistinguishable from a
new packet and would be accepted as such.
The solution to this is called PAWS: Protection Against Wrapped Sequence
numbers.
It protects against it by making sure the timestamp on each packet does
not go backwards.
.Ar reassemble tcp
also makes sure the timestamp on the packet does not go forward more
than the RFC allows.
By doing this,
d1753 4
a1756 5
artificially extends the security of TCP sequence numbers by 10 to 18
bits when the host uses appropriately randomized timestamps, since a
blind attacker would have to guess the timestamp as well.
.El
.El
d1758 3
a1760 48
For example:
.Bd -literal -offset indent
match in all scrub (no-df max-mss 1440)
.Ed
.Sh ROUTING
If a packet matches a rule with a route option set, the packet filter will
route the packet according to the type of route option.
When such a rule creates state, the route option is also applied to all
packets matching the same connection.
.Bl -tag -width xxxx
.It Ar dup-to
The
.Ar dup-to
option creates a duplicate of the packet and routes it like
.Ar route-to .
The original packet gets routed as it normally would.
.It Ar fastroute
The
.Ar fastroute
option does a normal route lookup to find the next hop for the packet.
.It Ar reply-to
The
.Ar reply-to
option is similar to
.Ar route-to ,
but routes packets that pass in the opposite direction (replies) to the
specified interface.
Opposite direction is only defined in the context of a state entry, and
.Ar reply-to
is useful only in rules that create state.
It can be used on systems with multiple external connections to
route all outgoing packets of a connection through the interface
the incoming connection arrived through (symmetric routing enforcement).
.It Ar route-to
The
.Ar route-to
option routes the packet to the specified interface with an optional address
for the next hop.
When a
.Ar route-to
rule creates state, only packets that pass in the same direction as the
filter rule specifies will be routed in this way.
Packets passing in the opposite direction (replies) are not affected
and are routed normally.
.El
.Sh POOL OPTIONS
For
.Ar nat
d1763 2
a1764 22
rules (as well as for the
.Ar dup-to ,
.Ar reply-to ,
and
.Ar route-to
rule options) for which there is a single redirection address which has a
subnet mask smaller than 32 for IPv4 or 128 for IPv6 (more than one IP
address), a variety of different methods for assigning this address can be
used:
.Bl -tag -width xxxx
.It Ar bitmask
The
.Ar bitmask
option applies the network portion of the redirection address to the address
to be modified (source with
.Ar nat ,
destination with
.Ar rdr ) .
.It Ar random Op Ar sticky-address
The
.Ar random
option selects an address at random within the defined block of addresses.
d1766 5
a1770 15
.Ar sticky-address
can be specified to ensure that multiple connections from the
same source are mapped to the same redirection address.
Associations are destroyed as soon as there are
no longer states which refer to them;
in order to make the mappings last
beyond the lifetime of the states,
increase the global options with
.Ar set timeout src.track .
.It Ar round-robin Op Ar sticky-address
The
.Ar round-robin
option loops through the redirection address(es).
.Ar sticky-address
is as described above.
d1772 6
a1777 21
When more than one redirection address is specified,
.Ar round-robin
is the only permitted pool type.
.It Ar source-hash Op Ar key
The
.Ar source-hash
option uses a hash of the source address to determine the redirection address,
ensuring that the redirection address is always the same for a given source.
An optional
.Ar key
can be specified after this keyword either in hex or as a string;
by default
.Xr pfctl 8
randomly generates a key for source-hash every time the
ruleset is reloaded.
.It Ar static-port
With
.Ar nat
rules, the
.Ar static-port
option prevents
d1779 3
a1781 3
from modifying the source port on TCP and UDP packets.
.El
.Sh STATE MODULATION
d1830 1
a1830 1
.Sh SYN PROXY
d1869 1
a1869 1
.Sh STATEFUL TRACKING OPTIONS
d2001 208
d2237 1
a2237 1
normalized by the
a2281 91
.Sh BLOCKING SPOOFED TRAFFIC
"Spoofing" is the faking of IP addresses, typically for malicious
purposes.
The
.Ar antispoof
directive expands to a set of filter rules which will block all
traffic with a source IP from the network(s) directly connected
to the specified interface(s) from entering the system through
any other interface.
.Pp
For example:
.Bd -literal -offset indent -compact
antispoof for lo0
.Ed
.Pp
Expands to:
.Bd -literal -offset indent -compact
block drop in on ! lo0 inet from 127.0.0.1/8 to any
block drop in on ! lo0 inet6 from ::1 to any
.Ed
.Pp
For non-loopback interfaces, there are additional rules to block incoming
packets with a source IP address identical to the interface's IP(s).
For example, assuming the interface wi0 had an IP address of 10.0.0.1 and a
netmask of 255.255.255.0:
.Bd -literal -offset indent
antispoof for wi0 inet
.Ed
.Pp
Expands to:
.Bd -literal -offset indent -compact
block drop in on ! wi0 inet from 10.0.0.0/24 to any
block drop in inet from 10.0.0.1 to any
.Ed
.Pp
Caveat: Rules created by the
.Ar antispoof
directive interfere with packets sent over loopback interfaces
to local addresses.
One should pass these explicitly.
.Sh FRAGMENT HANDLING
The size of IP datagrams (packets) can be significantly larger than the
maximum transmission unit (MTU) of the network.
In cases when it is necessary or more efficient to send such large packets,
the large packet will be fragmented into many smaller packets that will each
fit onto the wire.
Unfortunately for a firewalling device, only the first logical fragment will
contain the necessary header information for the subprotocol that allows
.Xr pf 4
to filter on things such as TCP ports or to perform NAT.
.Pp
One alternative is to filter individual fragments with filter rules.
If packet reassembly is turned off, it is passed to the filter.
Filter rules with matching IP header parameters decide whether the
fragment is passed or blocked, in the same way as complete packets
are filtered.
Without reassembly, fragments can only be filtered based on IP header
fields (source/destination address, protocol), since subprotocol header
fields are not available (TCP/UDP port numbers, ICMP code/type).
The
.Ar fragment
option can be used to restrict filter rules to apply only to
fragments, but not complete packets.
Filter rules without the
.Ar fragment
option still apply to fragments, if they only specify IP header fields.
For instance:
.Bd -literal -offset indent
pass in proto tcp from any to any port 80
.Ed
.Pp
The rule above never applies to a fragment,
even if the fragment is part of a TCP packet with destination port 80,
because without reassembly this information
is not available for each fragment.
This also means that fragments cannot create new or match existing
state table entries, which makes stateful filtering and address
translation (NAT, redirection) for fragments impossible.
.Pp
In most cases, the benefits of reassembly outweigh the additional
memory cost,
so reassembly is on by default.
.Pp
The memory allocated for fragment caching can be limited using
.Xr pfctl 8 .
Once this limit is reached, fragments that would have to be cached
are dropped until other entries time out.
The timeout value can also be adjusted.
.Pp
Currently, only IPv4 fragments are supported and IPv6 fragments
are blocked unconditionally.
d2288 2
a2289 3
An
.Ar anchor
is a container that can hold rules, address tables, and other anchors.
d2291 1
a2291 3
An
.Ar anchor
has a name which specifies the path where
d2301 2
a2302 5
An anchor can reference another
.Ar anchor
attachment point
using the following kinds
of rules:
d2450 1
a2450 1
within a brace ('{' '}') delimited block.
d2592 1
a2592 1
# normalize all incoming traffic
d2661 1
a2661 1
# outgoing packets (i.e., packets from the wireless network) are only
d2888 1
a2888 1
.Bl -tag -width "/etc/protocols" -compact
@


1.433
log
@final sort;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.432 2009/04/21 16:04:27 jmc Exp $
d1821 3
a1823 3
rules, (as well as for the
.Ar route-to ,
.Ar reply-to
d1825 1
a1825 1
.Ar dup-to
d1839 1
a1839 1
.It Ar random
d1843 11
a1853 1
.It Ar round-robin
d1857 2
d1863 1
a1863 1
.It Ar source-hash
d1868 4
a1871 2
An optional key can be specified after this keyword either in hex or as a
string; by default
a1883 17
.Pp
Additionally, the
.Ar sticky-address
option can be specified to help ensure that multiple connections from the
same source are mapped to the same redirection address.
This option can be used with the
.Ar random
and
.Ar round-robin
pool options.
Note that by default these associations are destroyed as soon as there are
no longer states which refer to them; in order to make the mappings last
beyond the lifetime of the states, increase the global options with
.Ar set timeout src.track .
See
.Sx STATEFUL TRACKING OPTIONS
for more ways to control the source tracking.
d1911 1
a1911 1
is lost (firewall reboot, flushing the state table, etc...).
d1937 1
a1937 2
.Xr tcp 4
handshake between the endpoints.
d1950 1
a1950 1
The proxy is transparent to both endpoints, they each see a single
d1976 1
a1976 1
.Ar modulate state
d2002 4
a2005 1
Cannot be used with modulate or synproxy state.
d2105 1
a2105 1
Passive OS Fingerprinting is a mechanism to inspect nuances of a TCP
d2123 1
a2123 1
would be 2.6 and the fingerprint would be written
d2134 1
a2134 1
scrub option and would be specified as
d2187 2
a2188 2
For example, the line
.Bd -literal -offset indent
d2192 2
a2193 2
expands to
.Bd -literal -offset indent
d2201 1
a2201 2
netmask of 255.255.255.0,
the line
d2206 2
a2207 2
expands to
.Bd -literal -offset indent
d2243 1
a2243 1
For instance, the rule
d2248 3
a2250 2
never applies to a fragment, even if the fragment is part of a TCP
packet with destination port 80, because without reassembly this information
d2257 2
a2258 4
memory cost, and it's recommended to use
.Ar set reassemble
to reassemble
all fragments.
d2297 1
a2297 2
Evaluates the filter rules in the specified
.Ar anchor .
d2301 1
a2301 2
rules in the specified
.Ar anchor .
d2306 1
a2306 3
Loads the rules from the specified file into the
anchor
.Ar name .
d2310 1
a2310 2
rules in the specified
.Ar anchor .
d2314 1
a2314 2
rules in the specified
.Ar anchor .
d2337 1
a2337 2
For example, all
.Ar anchor
d2339 2
a2340 3
attachment points underneath the main ruleset, and
.Ar anchor
rules specified in a file loaded from a
d2350 5
a2354 1
For example,
d2363 2
a2364 5
blocks all packets on the external interface by default, then evaluates
all rules in the
.Ar anchor
named "spam", and finally passes all outgoing connections and
incoming connections to port 25.
a2368 4
This loads a single rule into the
.Ar anchor ,
which blocks all packets from a specific address.
.Pp
d2371 1
a2371 3
rule after the
.Ar anchor
rule:
d2386 4
a2389 6
.Ar anchor
rules can specify packet filtering parameters using the same syntax as
filter rules.
When parameters are used, the
.Ar anchor
rule is only evaluated for matching packets.
d2398 4
a2401 6
The rules inside
.Ar anchor
spam are only evaluated for
.Ar tcp
packets with destination port 25.
Hence,
a2405 2
will only block connections from 1.2.3.4 to port 25.
.Pp
d2411 2
a2416 3
will evaluate each rule in each anchor attached to the
.Li spam
anchor.
d2418 1
a2418 2
.Li spam
anchor, and will not descend to evaluate anchors recursively.
d2436 2
a2437 4
.Li spam/allowed
anchor, which will evaluate the rules in the
.Li spam/banned
anchor, if any, before finally evaluating the
d2441 2
a2442 4
Filter rule
.Ar anchors
can also be loaded inline in the ruleset within a brace ('{' '}') delimited
block.
a2892 5
.Xr carp 4 ,
.Xr icmp 4 ,
.Xr icmp6 4 ,
.Xr ip 4 ,
.Xr ip6 4 ,
a2895 4
.Xr route 4 ,
.Xr tcp 4 ,
.Xr udp 4 ,
.Xr hosts 5 ,
a2896 3
.Xr protocols 5 ,
.Xr services 5 ,
.Xr ftp-proxy 8 ,
d2898 1
a2898 2
.Xr pflogd 8 ,
.Xr route 8
@


1.432
log
@tweak NORMALIZATION;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.431 2009/04/21 14:08:18 jmc Exp $
d1781 6
a1790 11
.It Ar route-to
The
.Ar route-to
option routes the packet to the specified interface with an optional address
for the next hop.
When a
.Ar route-to
rule creates state, only packets that pass in the same direction as the
filter rule specifies will be routed in this way.
Packets passing in the opposite direction (replies) are not affected
and are routed normally.
d1804 1
a1804 1
.It Ar dup-to
d1806 9
a1814 4
.Ar dup-to
option creates a duplicate of the packet and routes it like
.Ar route-to .
The original packet gets routed as it normally would.
d1843 8
a1860 8
.It Ar round-robin
The
.Ar round-robin
option loops through the redirection address(es).
.Pp
When more than one redirection address is specified,
.Ar round-robin
is the only permitted pool type.
d1996 11
a2013 11
.It Ar sloppy
Uses a sloppy TCP connection tracker that does not check sequence
numbers at all, which makes insertion and ICMP teardown attacks way
easier.
This is intended to be used in situations where one does not see all
packets of a connection, e.g. in asymmetric routing situations.
Cannot be used with modulate or synproxy state.
.It Ar pflow
States created by this rule are exported on the
.Xr pflow 4
interface.
d2029 8
a2044 8
.It Ar source-track global
The number of states created by all rules that use this option is limited.
Each rule can specify different
.Ar max-src-nodes
and
.Ar max-src-states
options, however state entries created by any participating rule count towards
each individual rule's limits.
d2299 2
a2300 9
.It Ar nat-anchor Aq Ar name
Evaluates the
.Ar nat
rules in the specified
.Ar anchor .
.It Ar rdr-anchor Aq Ar name
Evaluates the
.Ar rdr
rules in the specified
a2306 3
.It Ar anchor Aq Ar name
Evaluates the filter rules in the specified
.Ar anchor .
d2314 10
@


1.431
log
@simplify "log (user)"; help/ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.430 2009/04/21 12:41:48 jmc Exp $
d1707 3
a1709 6
Enforces a
.Em TOS
for matching IP packets.
.Em TOS
may be
given as one of
d1712 4
a1715 2
.Ar reliability ,
or as either hex or decimal.
d1725 2
a1726 3
.Pp
.Bl -tag -width timeout -compact
.It ttl
d1733 1
a1733 1
.It timestamp modulation
d1750 1
a1750 1
.It extended PAWS checks
d1771 1
a1771 1
For example,
@


1.430
log
@tweak PARAMETERS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.429 2009/04/21 11:33:42 jmc Exp $
d1179 3
a1181 5
Logs the UID of the user that owns the socket
and the PID of the process that has the socket open
where the packet is sourced from or destined to
(depending on which socket is local).
This is in addition to the normal information logged.
@


1.429
log
@sort PARAMETERS; also split the list in two, to make it more manageable;
ok henning deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.428 2009/04/20 20:42:49 sthen Exp $
d30 1
a30 1
.Dd $Mdocdate: April 20 2009 $
d1169 1
a1169 1
.It Ar log (all)
d1178 4
a1181 5
.It Ar log (user)
Logs the
.Ux
user ID of the user that owns the socket and the PID of the process that
has the socket open where the packet is sourced from or destined to
d1184 1
a1184 1
.It Ar log (to Aq Ar interface )
d1211 1
a1211 6
Common protocols are
.Xr icmp 4 ,
.Xr icmp6 4 ,
.Xr tcp 4 ,
and
.Xr udp 4 .
d1236 3
a1238 6
Any address whose associated route has label
.Aq Ar label .
See
.Xr route 4
and
.Xr route 8 .
d1240 1
a1240 1
Any address that matches the given table.
d1247 1
a1247 1
Ranges of addresses are specified by using the
d1294 1
a1294 1
Ports and ranges of ports are specified by using these operators:
d1313 1
a1313 1
.Bl -tag -width Fl
d1317 1
a1317 1
hence ports 2000, 2001, 2002, 2003 and 2004.
d1321 1
a1321 1
hence ports 2001, 2002 and 2003.
d1325 1
a1325 1
hence ports 1-1999 and 2005-65535.
d1330 1
a1330 1
.Ar OS
d1336 2
a1337 1
The host, port and OS specifications are optional, as in the following examples:
d1392 1
a1392 2
.No \*(Ba / Ns Aq Ar b
.No \*(Ba any
d1413 1
a1413 1
SYN, SYN+PSH and SYN+RST match, but SYN+ACK, ACK and ACK+RST do not.
d1417 1
a1417 1
All of SYN, FIN, RST and ACK must be unset.
d1438 4
a1441 1
.Ar nat , binat No or Ar rdr
d1443 3
a1445 1
.Ar modulate No or Ar synproxy state
d1447 1
a1447 1
.Ar reassemble tcp
d1462 1
a1462 1
This rule only applies to ICMP or ICMPv6 packets with the specified type
a1467 2
This parameter is only valid for rules that cover protocols ICMP or
ICMP6.
d1477 1
a1477 1
Adds a label (name) to the rule, which can be used to identify the rule.
d1479 1
a1479 1
pfctl -s labels
d1502 1
a1502 1
.Bd -literal -offset indent
d1508 2
a1509 2
expands to
.Bd -literal -offset indent
d1535 2
a1536 4
If two queues are given, packets which have a
.Em TOS
of
.Em lowdelay
d1595 3
a1597 6
This rule applies to packets with the specified
.Em TOS
bits set.
.Em TOS
may be
given as one of
d1600 4
a1603 2
.Ar reliability ,
or as either hex or decimal.
d1637 1
a1637 1
.Em unknown
d1639 1
a1639 1
.Em unknown
d1648 2
a1649 2
that explicitly compare against
.Em unknown
@


1.428
log
@Don't talk about a "scrub reassemble tcp" rule, talk about "reassemble
tcp" parameter. ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.427 2009/04/17 07:00:26 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 17 2009 $
d1144 1
a1144 1
.Bl -tag -width xxxx
d1239 2
d1248 2
a1249 2
.It Ar no-route
Any address which is not currently routable.
a1253 2
.It Aq Ar table
Any address that matches the given table.
d1267 4
a1272 2
.It Ar :broadcast
Translates to the interface's broadcast address(es).
a1274 2
.It Ar :0
Do not include interface aliases.
d1356 5
a1362 13
.It Ar group Aq Ar group
Similar to
.Ar user ,
this rule only applies to packets of sockets owned by the specified group.
.It Ar user Aq Ar user
This rule only applies to packets of sockets owned by the specified user.
For outgoing connections initiated from the firewall, this is the user
that opened the connection.
For incoming connections to the firewall itself, this is the user that
listens on the destination port.
For forwarded connections, where the firewall is not a connection endpoint,
the user and group are
.Em unknown .
d1364 15
a1378 4
All packets, both outgoing and incoming, of one connection are associated
with the same user and group.
Only TCP and UDP packets can be associated with users; for other protocols
these parameters are ignored.
d1380 6
a1385 6
User and group refer to the effective (as opposed to the real) IDs, in
case the socket is created by a setuid/setgid process.
User and group IDs are stored when a socket is created;
when a process creates a listening socket as root (for instance, by
binding to a privileged port) and subsequently changes to another
user ID (to drop privileges), the credentials will remain root.
d1387 5
a1391 8
User and group IDs can be specified as either numbers or names.
The syntax is similar to the one for ports.
The value
.Em unknown
matches packets of forwarded connections.
.Em unknown
can only be used with the operators
.Cm =
d1393 5
a1397 20
.Cm != .
Other constructs like
.Cm user \*(Ge unknown
are invalid.
Forwarded packets with unknown user and group ID match only rules
that explicitly compare against
.Em unknown
with the operators
.Cm =
or
.Cm != .
For instance
.Cm user \*(Ge 0
does not match forwarded packets.
The following example allows only selected users to open outgoing
connections:
.Bd -literal -offset indent
block out proto { tcp, udp } all
pass  out proto { tcp, udp } all user { \*(Lt 1000, dhartmei }
.Ed
d1454 6
a1480 13
.It Xo Ar tos Aq Ar string
.No \*(Ba Aq Ar number
.Xc
This rule applies to packets with the specified
.Em TOS
bits set.
.Em TOS
may be
given as one of
.Ar lowdelay ,
.Ar throughput ,
.Ar reliability ,
or as either hex or decimal.
a1481 21
For example, the following rules are identical:
.Bd -literal -offset indent
pass all tos lowdelay
pass all tos 0x10
pass all tos 16
.Ed
.It Ar allow-opts
By default, IPv4 packets with IP options or IPv6 packets with routing
extension headers are blocked.
When
.Ar allow-opts
is specified for a
.Ar pass
rule, packets that pass the filter based on that rule (last matching)
do so even if they contain IP options or routing extension headers.
For packets that match state, the rule that initially created the
state is used.
The implicit
.Ar pass
rule that is used when a packet does not match any rules does not
allow IP options.
d1490 5
a1494 1
.Bl -tag -width $srcaddr -compact -offset indent
d1497 4
a1502 2
.It Ar $dstaddr
The destination IP address.
a1504 6
.It Ar $dstport
The destination port specification.
.It Ar $proto
The protocol name.
.It Ar $nr
The rule number.
d1525 11
d1555 11
d1588 1
d1599 3
a1601 5
.It Ar rtable Aq Ar number
Used to select an alternate routing table for the routing lookup.
Only effective before the route lookup happened, i.e. when filtering inbound.
.It Xo Ar divert-to Aq Ar host
.Ar port Aq Ar port
d1603 48
a1650 2
Used to redirect packets to a local socket bound to
.Ar host
d1652 16
a1667 16
.Ar port .
The packets will not be modified, so
.Xr getsockname 2
on the socket will return the original destination address of the packet.
.It Ar divert-reply
Used to receive replies for sockets that are bound to addresses
which are not local to the machine.
See
.Xr setsockopt 2
for information on how to bind these sockets.
.It Ar probability Aq Ar number
A probability attribute can be attached to a rule, with a value set between
0 and 1, bounds not included.
In that case, the rule will be honoured using the given probability value
only.
For example, the following rule will drop 20% of incoming ICMP packets:
d1669 2
a1670 1
block in proto icmp probability 20%
a1671 5
.It Ar scrub Aq Ar parameter
Perform traffic normalization on matching packets.
See
.Sx TRAFFIC NORMALIZATION
for further information.
@


1.427
log
@tweak PACKET FILTERING;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.426 2009/04/16 07:31:51 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 16 2009 $
d1077 3
a1079 3
its sequence numbers, as well as TCP timestamps if a
.Ar scrub reassemble tcp
rule applies to the connection.
@


1.426
log
@tweak TRANSLATION;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.425 2009/04/15 09:54:29 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 15 2009 $
d1005 1
a1005 1
.Bl -tag -width xxxx -compact
d1009 2
a1010 8
This causes a TCP RST to be returned for
.Xr tcp 4
packets and an ICMP UNREACHABLE for other types of packets.
.It Ar return-rst
This applies only to
.Xr tcp 4
packets,
and issues a TCP RST which closes the connection.
d1016 3
@


1.425
log
@comment out the RIO stuff until such a time as it is enabled; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.424 2009/04/15 08:27:08 sobrado Exp $
d854 1
a854 1
packet, recalculates IP, TCP and UDP checksums as necessary, and passes it to
d857 3
a859 3
Since translation occurs before filtering the filter
engine will see packets as they look after any
addresses and ports have been translated.
d862 1
a862 2
Packets that match a translation rule are only automatically passed if
the
d864 2
a865 2
modifier is given, otherwise they are
still subject to
d893 5
a897 5
These netblocks are:
.Bd -literal
10.0.0.0 - 10.255.255.255 (all of net 10, i.e., 10/8)
172.16.0.0 - 172.31.255.255 (i.e., 172.16/12)
192.168.0.0 - 192.168.255.255 (i.e., 192.168/16)
d911 2
a912 5
source or destination ports for
.Xr tcp 4
or
.Xr udp 4
connections; implicitly in the case of
d922 1
a922 1
of the translation rules and of the direction of a packet.
d939 2
a940 2
works in the packet filter (see below).
If no rule matches the packet it is passed to the filter engine unmodified.
d954 5
a958 2
Note that redirecting external incoming connections to the loopback
address, as in
a962 3
will effectively allow an external host to connect to daemons
bound solely to the loopback address, circumventing the traditional
blocking of such connections on a real interface.
d964 1
a964 1
should be used as redirection target instead, which allows external
a966 4
.Pp
See
.Sx TRANSLATION EXAMPLES
below.
@


1.424
log
@code and Backus-Naur Form specification rules must fit on 80-column displays;
while here, remove a few superfluous line breaks in examples.

ok henning@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.423 2009/04/15 07:21:26 jmc Exp $
d748 4
a751 5
.It Ar rio
Enables RIO on this queue.
RIO is RED with IN/OUT, thus running
RED two times more than RIO would achieve the same effect.
RIO is currently not supported in the GENERIC kernel.
@


1.423
log
@tweak QUEUEING;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.422 2009/04/15 06:08:27 jmc Exp $
d1914 2
a1915 1
pass in  proto tcp from any to any port 25 flags S/SFRA modulate state
d2108 1
a2108 1
	(max-src-conn-rate 100/10, overload \*(Ltbad_hosts\*(Gt flush global)
d2372 1
a2372 2
pass in on $ext_if proto tcp from any \e
      to $ext_if port smtp
d2381 1
a2381 2
# echo \&"block in quick from 1.2.3.4 to any\&" \&| \e
      pfctl -a spam -f -
d2428 1
a2428 2
# echo \&"block in quick from 1.2.3.4 to any" \&| \e
      pfctl -a spam -f -
d2716 4
a2719 4
                 [ "ruleset-optimization" [ "none" | "basic" | "profile" ]] |
                 [ "optimization" [ "default" | "normal" |
                 "high-latency" | "satellite" |
                 "aggressive" | "conservative" ] ]
d2733 2
a2734 2
                 [ "on" ifspec ] [ "fastroute" | route ] [ af ] [ protospec ]
                 hosts [ filteropts ]
d2740 2
a2741 1
filteropt      = user | group | flags | icmp-type | icmp6-type | "tos" tos |
d2777 1
a2777 1
tableopt      = "persist" | "const" | "counters" | "file" string |
d2827 3
a2829 2
                 "from" ( "any" | "no-route" | "urpf-failed" | "self" | host |
                 "{" host-list "}" | "route" string ) [ port ] [ os ]
d2872 2
a2873 2
state-opt      = ( "max" number | "no-sync" | timeout | "sloppy" | "pflow" |
                 "source-track" [ ( "rule" | "global" ) ] |
@


1.422
log
@sort QUEUEING, and a little list tweaking;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.421 2009/04/14 14:03:53 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 14 2009 $
d585 1
a585 1
.Ar scheduler
d588 1
a588 3
There are three
.Ar schedulers
currently supported.
d592 2
a593 5
.Ar Queues
attached to an interface build a tree, thus each
.Ar queue
can have further child
.Ar queues .
d599 2
a600 4
.Ar Priority
mainly controls the time packets take to get sent out, while
.Ar bandwidth
has primarily effects on throughput.
d604 2
a605 4
Each class has its own
.Ar queue
and is assigned its share of
.Ar bandwidth .
d613 2
a614 5
.Ar Queues
attached to an interface build a tree, thus each
.Ar queue
can have further child
.Ar queues .
d620 2
a621 4
.Ar Priority
mainly controls the time packets take to get sent out, while
.Ar bandwidth
primarily affects throughput.
d626 1
a626 4
.Ar delay
and
.Ar bandwidth
allocation.
d629 3
a631 8
.Ar Queues
are flat attached to the interface, thus,
.Ar queues
cannot have further child
.Ar queues .
Each
.Ar queue
has a unique
d634 1
a634 5
Packets in the
.Ar queue
with the highest
.Ar priority
are processed first.
a647 8
Currently supported values
are
.Ar cbq
for Class Based Queueing,
.Ar priq
for Priority Queueing and
.Ar hfsc
for the Hierarchical Fair Service Curve scheduler.
d693 3
a695 5
The name associated with a
.Ar queue
must match a queue defined in the
.Ar altq
directive (e.g. mail), or, except for the
d697 1
a697 4
.Ar scheduler ,
in a parent
.Ar queue
declaration.
d723 1
a723 1
.Ar Priq
d725 1
a725 1
.Ar Cbq
d727 1
a727 1
.Ar Hfsc
d734 3
a736 7
The
.Ar scheduler
can get additional parameters with
.Xo Aq Ar scheduler
.Pf ( Aq Ar parameters ) .
.Xc
Parameters are as follows:
d742 1
a742 1
Enables ECN (Explicit Congestion Notification) on this queue.
d745 1
a745 1
Enable RED (Random Early Detection) on this queue.
d757 1
a757 2
.Ar scheduler
supports an additional option:
d759 1
a759 1
.Bl -tag -width "upperlimit <sc>XXX" -compact -offset 3n
d766 1
a766 2
.Ar scheduler
supports some additional options:
d768 1
a768 1
.Bl -tag -width "upperlimit <sc>XXX" -compact -offset 3n
d778 1
a778 1
is an acronym for
d811 2
a812 4
packets which have a
.Em TOS
of
.Em lowdelay
d827 1
a827 1
.Bd -literal
@


1.421
log
@tweak TABLES;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.420 2009/04/14 08:29:06 jmc Exp $
a619 17
.It Ar priq
Priority Queueing.
.Ar Queues
are flat attached to the interface, thus,
.Ar queues
cannot have further child
.Ar queues .
Each
.Ar queue
has a unique
.Ar priority
assigned, ranging from 0 to 15.
Packets in the
.Ar queue
with the highest
.Ar priority
are processed first.
d644 17
d784 3
a795 3
.It Ar ecn
Enables ECN (Explicit Congestion Notification) on this queue.
ECN implies RED.
d802 2
a803 1
.Bl -tag -width Fl
d812 4
a815 1
.Bl -tag -width Fl
a819 2
.It Ar linkshare Aq Ar sc
The bandwidth share of a backlogged queue.
@


1.420
log
@tweak OPTIONS; also there is no need to given an example of every "set"
argument, so remove any examples that were not particularly illustrative;

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.419 2009/04/13 19:08:49 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 13 2009 $
d117 3
a119 8
Tables can be used as the source or destination of filter rules,
or
translation rules such as
.Ar nat
or
.Ar rdr
(see below for details on the various rule types).
Tables can also be used for the redirect address of
d141 1
a141 1
Table definitions can be placed directly in this file, and loaded at the
d173 1
a173 1
flag enables per-address packet and byte counters which can be displayed with
@


1.419
log
@sort OPTIONS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.418 2009/04/10 21:43:37 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: April 10 2009 $
a254 5
.Pp
For example:
.Bd -literal -offset indent
set block-policy return
.Ed
d274 1
a274 3
.Xr pf.os 5
in
.Pa /etc
a278 4
.Pp
For example:
.Pp
.Dl set fingerprints \&"/etc/pf.os.devel\&"
a288 4
.Bd -literal -offset indent
set hostid 1
.Ed
.Pp
d297 1
a297 5
.Bd -literal -offset indent
set limit states 20000
.Ed
.Pp
sets the maximum number of entries in the memory pool used by state table
d302 1
a302 2
to 20000.
Using
d304 1
a304 1
set limit frags 20000
d307 2
a308 3
sets the maximum number of entries in the memory pool used for fragment
reassembly to 20000.
Using
d310 1
a310 1
set limit src-nodes 2000
d313 1
a313 1
sets the maximum number of entries in the memory pool used for tracking
d318 6
a323 2
options) to 2000.
Using
a328 1
sets limits on the memory pools used by tables.
d340 1
a340 1
These statistics can be viewed using
a377 5
.Pp
For example:
.Bd -literal -offset indent
set optimization aggressive
.Ed
d384 1
a384 1
is given fragments with the
a448 3
For example:
.Pp
.Dl set skip on lo0
a469 5
.Pp
For example:
.Bd -literal -offset indent
set state-policy if-bound
.Ed
d484 1
a484 1
.Ar proto.modifier
d544 1
a544 1
This value is used to define the scale factor, it should not actually
d550 1
a550 1
(adaptive.end - number of states) / (adaptive.end - adaptive.start).
@


1.418
log
@tweak TABLES;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.417 2009/04/10 21:27:04 jmc Exp $
d239 7
a245 2
.Bl -tag -width xxxx
.It Ar set timeout
d247 7
a253 38
.Bl -tag -width "src.track" -compact
.It Ar interval
Interval between purging expired states and fragments.
.It Ar frag
Seconds before an unassembled fragment is expired.
.It Ar src.track
Length of time to retain a source tracking entry after the last state
expires.
.El
.Pp
When a packet matches a stateful connection, the seconds to live for the
connection will be updated to that of the
.Ar proto.modifier
which corresponds to the connection state.
Each packet which matches this state will reset the TTL.
Tuning these values may improve the performance of the
firewall at the risk of dropping valid idle connections.
.Pp
.Bl -tag -width xxxx -compact
.It Ar tcp.first
The state after the first packet.
.It Ar tcp.opening
The state before the destination host ever sends a packet.
.It Ar tcp.established
The fully established state.
.It Ar tcp.closing
The state after the first FIN has been sent.
.It Ar tcp.finwait
The state after both FINs have been exchanged and the connection is closed.
Some hosts (notably web servers on Solaris) send TCP packets even after closing
the connection.
Increasing
.Ar tcp.finwait
(and possibly
.Ar tcp.closing )
can prevent blocking of such packets.
.It Ar tcp.closed
The state after one endpoint sends an RST.
a255 51
ICMP and UDP are handled in a fashion similar to TCP, but with a much more
limited set of states:
.Pp
.Bl -tag -width xxxx -compact
.It Ar udp.first
The state after the first packet.
.It Ar udp.single
The state if the source host sends more than one packet but the destination
host has never sent one back.
.It Ar udp.multiple
The state if both hosts have sent packets.
.It Ar icmp.first
The state after the first packet.
.It Ar icmp.error
The state after an ICMP error came back in response to an ICMP packet.
.El
.Pp
Other protocols are handled similarly to UDP:
.Pp
.Bl -tag -width xxxx -compact
.It Ar other.first
.It Ar other.single
.It Ar other.multiple
.El
.Pp
Timeout values can be reduced adaptively as the number of state table
entries grows.
.Pp
.Bl -tag -width xxxx -compact
.It Ar adaptive.start
When the number of state entries exceeds this value, adaptive scaling
begins.
All timeout values are scaled linearly with factor
(adaptive.end - number of states) / (adaptive.end - adaptive.start).
.It Ar adaptive.end
When reaching this number of state entries, all timeout values become
zero, effectively purging all state entries immediately.
This value is used to define the scale factor, it should not actually
be reached (set a lower state limit, see below).
.El
.Pp
Adaptive timeouts are enabled by default, with an adaptive.start value
equal to 60% of the state limit, and an adaptive.end value equal to
120% of the state limit.
They can be disabled by setting both adaptive.start and adaptive.end to 0.
.Pp
The adaptive timeout values can be defined both globally and for each rule.
When used on a per-rule basis, the values relate to the number of
states created by the rule, otherwise to the total number of
states.
.Pp
d258 1
a258 4
set timeout tcp.first 120
set timeout tcp.established 86400
set timeout { adaptive.start 6000, adaptive.end 12000 }
set limit states 10000
d260 4
d265 21
a285 2
With 9000 state table entries, the timeout values are scaled to 50%
(tcp.first 60, tcp.established 43200).
d287 1
a287 7
.It Ar set loginterface
Enable collection of packet and byte count statistics for the given
interface or interface group.
These statistics can be viewed using
.Bd -literal -offset indent
# pfctl -s info
.Ed
d289 11
a299 3
In this example
.Xr pf 4
collects statistics on the interface named dc0:
d301 1
a301 6
set loginterface dc0
.Ed
.Pp
One can disable the loginterface using:
.Bd -literal -offset indent
set loginterface none
d304 1
d355 7
d363 66
a430 2
.It Ar none
Disable the ruleset optimizer.
d447 2
a448 1
.Pp
d466 6
a471 23
.It Ar set optimization
Optimize state timeouts for one of the following network environments:
.Pp
.Bl -tag -width xxxx -compact
.It Ar normal
A normal network environment.
Suitable for almost all networks.
.It Ar high-latency
A high-latency environment (such as a satellite connection).
.It Ar satellite
Alias for
.Ar high-latency .
.It Ar aggressive
Aggressively expire connections.
This can greatly reduce the memory usage of the firewall at the cost of
dropping idle connections early.
.It Ar conservative
Extremely conservative settings.
Avoid dropping legitimate connections at the
expense of greater memory utilization (possibly much greater on a busy
network) and slightly increased processor utilization.
.El
.Pp
a472 3
.Bd -literal -offset indent
set optimization aggressive
.Ed
d474 2
a475 1
.It Ar set block-policy
d477 4
a480 14
.Ar block-policy
option sets the default behaviour for the packet
.Ar block
action:
.Pp
.Bl -tag -width xxxxxxxx -compact
.It Ar drop
Packet is silently dropped.
.It Ar return
A TCP RST is returned for blocked TCP packets,
an ICMP UNREACHABLE is returned for blocked UDP packets,
and all other packets are silently dropped.
.El
.Pp
d483 1
a483 1
set block-policy return
d490 1
a490 1
.Bl -tag -width group-bound -compact
d501 19
a519 23
.It Ar set state-defaults
The
.Ar state-defaults
option sets the state options for states created from rules
without an explicit
.Ar keep state .
For example:
.Bd -literal -offset indent
set state-defaults pflow, no-sync
.Ed
.It Ar set hostid
The 32-bit
.Ar hostid
identifies this firewall's state table entries to other firewalls
in a
.Xr pfsync 4
failover cluster.
By default the hostid is set to a pseudo-random value, however it may be
desirable to manually configure it, for example to more easily identify the
source of state table entries.
.Bd -literal -offset indent
set hostid 1
.Ed
d521 21
a541 26
The hostid may be specified in either decimal or hexadecimal.
.It Ar set require-order
By default
.Xr pfctl 8
enforces an ordering of the statement types in the ruleset to:
.Em options ,
.Em queueing ,
.Em translation ,
.Em filtering .
Setting this option to
.Ar no
disables this enforcement.
There may be non-trivial and non-obvious implications to an out of
order ruleset.
Consider carefully before disabling the order enforcement.
.It Ar set fingerprints
Load fingerprints of known operating systems from the given filename.
By default fingerprints of known operating systems are automatically
loaded from
.Xr pf.os 5
in
.Pa /etc
but can be overridden via this option.
Setting this option may leave a small period of time where the fingerprints
referenced by the currently active ruleset are inconsistent until the new
ruleset finishes loading.
d543 2
a544 1
For example:
d546 13
a558 1
.Dl set fingerprints \&"/etc/pf.os.devel\&"
d560 1
a560 7
.It Ar set skip on Aq Ar ifspec
List interfaces for which packets should not be filtered.
Packets passing in or out on such interfaces are passed as if pf was
disabled, i.e. pf does not process them in any way.
This can be useful on loopback and other virtual interfaces, when
packet filtering is not desired and can have unexpected effects.
For example:
d562 5
a566 1
.Dl set skip on lo0
d568 2
a569 4
.It Ar set debug
Set the debug
.Ar level
to one of the following:
d571 11
a581 9
.Bl -tag -width xxxxxxxx -compact
.It Ar none
Don't generate debug messages.
.It Ar urgent
Generate debug messages only for serious errors.
.It Ar misc
Generate debug messages for various errors.
.It Ar loud
Generate debug messages for common conditions.
d583 21
a603 14
.It Ar set reassemble
The
.Ar reassemble
option turns reassembly of fragmented packets on or off.
If
.Ar no-df
is given fragments with the
.Ar dont-fragment
bit set have it cleared before entering the fragment cache,
and thus the reassembled packet doesn't have
.Ar dont-fragment
set either.
Setting this option does not affect non-fragmented packets.
Fragment reassembly is turned on by default.
@


1.417
log
@some improvements for the PACKET FILTERING section;
feedback (i.e. much tearing of hair) and ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.416 2009/04/07 13:52:29 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: April 7 2009 $
a163 6
.It Ar persist
The
.Ar persist
flag forces the kernel to keep the table even when no rules refer to it.
If the flag is not set, the kernel will automatically remove the table
when the last rule referring to it is flushed.
d180 6
d188 7
a194 1
For example,
a200 4
creates a table called private, to hold RFC 1918 private network
blocks, and a table called badhosts, which is initially empty.
A filter rule is set up to block all traffic coming from addresses listed in
either table.
d204 1
a204 1
these hosts can be blocked by using
d221 3
a223 1
Any lines beginning with a # are treated as comments and ignored.
d227 1
a227 1
.Em all
d230 2
a231 2
name, a valid interface group or the
.Em self
@


1.416
log
@bnf-tweaks
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.415 2009/04/07 13:48:38 henning Exp $
d1067 2
a1068 10
packets based on attributes of their layer 3 (see
.Xr ip 4
and
.Xr ip6 4 )
and layer 4 (see
.Xr icmp 4 ,
.Xr icmp6 4 ,
.Xr tcp 4 ,
.Xr udp 4 )
headers.
d1081 1
a1081 1
actions are taken every time the rule matches;
d1101 4
d1108 2
a1109 2
packets, and issues a TCP RST which closes the
connection.
a1114 4
.It Ar return
This causes a TCP RST to be returned for
.Xr tcp 4
packets and an ICMP UNREACHABLE for UDP and other packets.
d1129 12
a1140 4
Every time a packet is matched by one of these rules, the
.Ar queue ,
.Ar rtable ,
.Ar set-tos ,
a1141 1
.Ar max-mss ,
d1143 1
d1145 2
d1148 1
a1148 11
.Ar reassemble tcp
parameters can be overwritten when supplied to the
.Ar match
rule.
These changes happen every time a
.Ar match
rule matches, not only on the last matching one.
When
.Ar logging
is specified, every matching rule causes the packet to be logged.
This means that a single packet can get logged more than once.
d1150 4
a1153 1
This action does not change the state of the packet.
d1185 3
a1191 4
allows echo requests (such as those created by
.Xr ping 8 )
out statefully, and matches incoming echo replies correctly to states.
.Pp
d1207 4
a1210 1
.Ar nat , binat No and Ar rdr
@


1.415
log
@don't we all love BNF? make it lie less
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.414 2009/04/07 13:40:18 henning Exp $
d2823 1
a2823 1
                 hosts [ filteropt-list ]
d2825 1
a2825 1
logopts        = logopt [ "," logopts ]
d2828 1
a2828 1
filteropt-list = filteropt-list filteropt | filteropt
d2837 1
a2837 1
scrubopts      = scrubopt [ "," scrubopts ]
d2863 5
a2867 5
table-rule     = "table" "\*(Lt" string "\*(Gt" [ tableopts-list ]
tableopts-list = tableopts-list tableopts | tableopts
tableopts      = "persist" | "const" | "counters" | "file" string |
                 "{" [ tableaddr-list ] "}"
tableaddr-list = tableaddr-list [ "," ] tableaddr-spec | tableaddr-spec
@


1.414
log
@nits
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.413 2009/04/07 13:27:32 jmc Exp $
d2817 2
a2818 1
                 [ "debug" ( "none" | "urgent" | "misc" | "loud" ) ] )
d2831 2
a2832 4
                 [ "(" state-opts ")" ] |
                 "fragment" | "no-df" | "min-ttl" number | "set-tos" tos |
                 "max-mss" number | "random-id" | "reassemble tcp" |
                 fragmentation | "allow-opts" |
d2837 4
d2894 1
a2894 1
action         = "pass" | "match" | "block" [ return ] | [ "no" ] "scrub"
a2965 3

fragmentation  = [ "fragment reassemble" | "fragment crop" |
                 "fragment drop-ovl" ]
@


1.413
log
@catch up with recent changes (scrub, match, ...); still a ways to go
ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.412 2009/04/07 12:52:57 henning Exp $
d1089 1
a1089 1
actions are taken every time a rule matches;
@


1.412
log
@fragment reassembly on by default
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.411 2009/04/07 12:50:44 henning Exp $
d43 1
a43 1
There are seven types of statements in
a55 3
.It Cm Traffic Normalization Li (reassembly and scrubbing)
Traffic normalization protects internal machines against inconsistencies
in Internet protocols and implementations.
a607 131
.Sh TRAFFIC NORMALIZATION
Traffic normalization is used to sanitize packet content in such
a way that there are no ambiguities in packet interpretation on
the receiving side.
The normalizer does IP fragment reassembly to prevent attacks
that confuse intrusion detection systems by sending overlapping
IP fragments.
Packet normalization is invoked with either the
.Ar scrub
option, added to regular rules, or by means of the
.Ar reassemble
option.
.Pp
.Ar scrub
has the following parameters:
.Bl -tag -width xxxx
.It Ar no-df
Clears the
.Ar dont-fragment
bit from a matching IP packet.
Some operating systems are known to generate fragmented packets with the
.Ar dont-fragment
bit set.
This is particularly true with NFS.
.Ar scrub
will drop such fragmented
.Ar dont-fragment
packets unless
.Ar no-df
is specified.
.Pp
Unfortunately some operating systems also generate their
.Ar dont-fragment
packets with a zero IP identification field.
Clearing the
.Ar dont-fragment
bit on packets with a zero IP ID may cause deleterious results if an
upstream router later fragments the packet.
Using the
.Ar random-id
modifier (see below) is recommended in combination with the
.Ar no-df
modifier to ensure unique IP identifiers.
.It Ar min-ttl Aq Ar number
Enforces a minimum TTL for matching IP packets.
.It Ar max-mss Aq Ar number
Enforces a maximum MSS for matching TCP packets.
.It Xo Ar set-tos Aq Ar string
.No \*(Ba Aq Ar number
.Xc
Enforces a
.Em TOS
for matching IP packets.
.Em TOS
may be
given as one of
.Ar lowdelay ,
.Ar throughput ,
.Ar reliability ,
or as either hex or decimal.
.It Ar random-id
Replaces the IP identification field with random values to compensate
for predictable values generated by many hosts.
This option only applies to packets that are not fragmented
after the optional fragment reassembly.
.It Ar fragment reassemble
If fragment reassembly is turned on, fragments are buffered until they form
a complete packet and only the completed packet is passed on to the filter.
The advantage is that filter rules have to deal only with complete
packets, and can ignore fragments.
The drawback of caching fragments is the additional memory cost.
But the full reassembly method is the only method that currently works
with NAT.
This is the default behavior of a
.Ar scrub
option if no fragmentation modifier is supplied.
.It Ar reassemble tcp
Statefully normalizes TCP connections.
.Ar reassemble tcp
performs the following normalizations:
.Pp
.Bl -tag -width timeout -compact
.It ttl
Neither side of the connection is allowed to reduce their IP TTL.
An attacker may send a packet such that it reaches the firewall, affects
the firewall state, and expires before reaching the destination host.
.Ar reassemble tcp
will raise the TTL of all packets back up to the highest value seen on
the connection.
.It timestamp modulation
Modern TCP stacks will send a timestamp on every TCP packet and echo
the other endpoint's timestamp back to them.
Many operating systems will merely start the timestamp at zero when
first booted, and increment it several times a second.
The uptime of the host can be deduced by reading the timestamp and multiplying
by a constant.
Also observing several different timestamps can be used to count hosts
behind a NAT device.
And spoofing TCP packets into a connection requires knowing or guessing
valid timestamps.
Timestamps merely need to be monotonically increasing and not derived off a
guessable base time.
.Ar reassemble tcp
will cause
.Ar scrub
to modulate the TCP timestamps with a random number.
.It extended PAWS checks
There is a problem with TCP on long fat pipes, in that a packet might get
delayed for longer than it takes the connection to wrap its 32-bit sequence
space.
In such an occurrence, the old packet would be indistinguishable from a
new packet and would be accepted as such.
The solution to this is called PAWS: Protection Against Wrapped Sequence
numbers.
It protects against it by making sure the timestamp on each packet does
not go backwards.
.Ar reassemble tcp
also makes sure the timestamp on the packet does not go forward more
than the RFC allows.
By doing this,
.Xr pf 4
artificially extends the security of TCP sequence numbers by 10 to 18
bits when the host uses appropriately randomized timestamps, since a
blind attacker would have to guess the timestamp as well.
.El
.El
.Pp
For example,
.Bd -literal -offset indent
scrub in on $ext_if all fragment reassemble
.Ed
d1063 2
a1064 1
.Ar block
d1066 1
a1066 1
.Ar pass
a1076 2
In addition, packets may also be
assigned to queues for the purpose of bandwidth control.
d1080 6
a1085 2
The last matching rule decides what action is taken.
If no rule matches the packet, the default action is to pass
d1087 4
d1150 1
a1150 1
Note that these changes may happen on any
d1152 1
a1152 1
rule, not only on the last matching one.
d1746 5
d1752 115
a2320 6
Besides the use of
.Ar scrub
as described in
.Sx TRAFFIC NORMALIZATION
above, there are three options for handling fragments in the packet filter.
.Pp
a2347 5
It's also possible to reassemble only certain fragments by specifying
source or destination addresses or protocols as parameters in
.Ar scrub
options.
.Pp
d2350 3
a2352 5
.Ar scrub
options to reassemble
all fragments via the
.Ar fragment reassemble
modifier.
d2707 1
a2707 1
scrub in on $ext_if all fragment reassemble
@


1.411
log
@bit more precise
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.410 2009/04/06 17:33:21 sobrado Exp $
d30 1
a30 1
.Dd $Mdocdate: April 6 2009 $
d609 1
@


1.410
log
@rewrite the description for the recently added "match" action.

ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.409 2009/04/06 17:22:02 sthen Exp $
d599 1
a599 1
option turns reassembly of packets on or off.
@


1.409
log
@no more normalization statements, remove it from require-order description.
ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.408 2009/04/06 16:30:20 sobrado Exp $
d1262 23
a1289 9
.It Ar match
Action is unaltered, the previously matched rule's action still matters.
Match rules apply queue and rtable assignments for every matched packet,
subsequent matching pass or match rules can overwrite the assignment,
if they don't specify a queue or an rtable, respectively, the previously
set value remains.
Additionally, match rules can contain log statements; the is logging done
for each and every matching match rule, so it is possible to log a single
packet multiple times.
@


1.408
log
@documentation changes related with the monster pf diff from basel;
we are mostly documenting that fragment reassembly has nothing to do
with scrubbing anymore; there is room for a lot of improvements yet.

"commit it and we work on it in-tree.  it is certainly well,
better than what there is now" henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.407 2009/04/06 12:05:55 henning Exp $
a545 1
.Em normalization ,
@


1.407
log
@1) scrub rules are completely gone.
2) packet reassembly: only one method remains, full reassembly. crop
and drop-ovl are gone.
.  set reassemble yes|no [no-df]
if no-df is given fragments (and only fragments!) with the df bit set
have it cleared before entering the fragment cache, and thus the
reassembled packet doesn't have df set either. it does NOT touch
non-fragmented packets.
3) regular rules can have scrub options.
.  pass scrub(no-df, min-ttl 64, max-mss 1400, set-tos lowdelay)
.  match scrub(reassemble tcp, random-id)
of course all options are optional. the individual options still do
what they used to do on scrub rules, but everything is stateful now.
4) match rules
"match" is a new action, just like pass and block are, and can be used
like they do. opposed to pass or block, they do NOT change the
pass/block state of a packet. i. e.
.  pass
.  match
passes the packet, and
.  block
.  match
blocks it.
Every time (!) a match rule matches, i. e. not only when it is the
last matching rule, the following actions are set:
-queue assignment. can be overwritten later, the last rule that set a
queue wins. note how this is different from the last matching rule
wins, if the last matching rule has no queue assignments and the
second last matching rule was a match rule with queue assignments,
these assignments are taken.
-rtable assignments. works the same as queue assignments.
-set-tos, min-ttl, max-mss, no-df, random-id, reassemble tcp, all work
like the above
-logging. every matching rule causes the packet to be logged. this
 means a single packet can get logged more than once (think multiple log
 interfaces with different receivers, like pflogd and spamlogd)
.
almost entirely hacked at n2k9 in basel, could not be committed close to
release. this really should have been multiple diffs, but splitting them
now is not feasible any more. input from mcbride and dlg, and frantzen
about the fragment handling.
speedup around 7% for the common case, the more the more scrub rules
were in use.
manpage not up to date, being worked on.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.406 2009/01/31 19:37:12 sobrado Exp $
d30 1
a30 1
.Dd $Mdocdate: January 31 2009 $
d56 1
a56 1
.It Cm Traffic Normalization Li (e.g. Em scrub )
d61 1
a61 1
.It Cm Translation Li (Various forms of NAT)
a120 2
.Ar scrub
rules
d386 1
a386 3
reassembly (generated by
.Ar scrub
rules) to 20000.
d587 1
a587 1
.Bl -tag -width xxxxxxxxxxxx -compact
d597 13
d618 1
a618 1
Packet normalization is invoked with the
d620 3
a622 1
directive.
d625 1
a625 1
has the following options:
d635 1
a635 1
.Ar Scrub
d677 2
a678 5
Using
.Ar scrub
rules, fragments can be reassembled by normalization.
In this case, fragments are buffered until they form a complete
packet, and only the completed packet is passed on to the filter.
d686 1
a686 24
rule if no fragmentation modifier is supplied.
.It Ar fragment crop
The default fragment reassembly method is expensive, hence the option
to crop is provided.
In this case,
.Xr pf 4
will track the fragments and cache a small range descriptor.
Duplicate fragments are dropped and overlaps are cropped.
Thus data will only occur once on the wire with ambiguities resolving to
the first occurrence.
Unlike the
.Ar fragment reassemble
modifier, fragments are not buffered, they are passed as soon as they
are received.
The
.Ar fragment crop
reassembly mechanism does not yet work with NAT.
.Pp
.It Ar fragment drop-ovl
This option is similar to the
.Ar fragment crop
modifier except that all overlapping or duplicate fragments will be
dropped, and all further corresponding fragments will be
dropped as well.
a688 2
.Ar scrub reassemble tcp
rules may not have the direction (in/out) specified.
a741 9
.Pp
The
.Ar no
option prefixed to a scrub rule causes matching packets to remain unscrubbed,
much in the same way as
.Ar drop quick
works in the packet filter (see below).
This mechanism should be used when it is necessary to exclude specific packets
from broader scrub rules.
d1822 1
a1822 1
Used with filter, translation or scrub rules
d2316 1
a2316 1
rules as described in
d2321 1
a2321 3
If no
.Ar scrub
rule applies to a fragment, it is passed to the filter.
d2350 1
a2350 1
rules.
d2355 1
a2355 1
rules to reassemble
@


1.406
log
@write point-to-point in a consistent way.

jmc@@ has provided a complete list of manual pages to be fixed,
and suggested using uppercase (i.e., Point-to-Point) when discussing
the protocol, and lowercase (point-to-point) otherwise.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.405 2008/10/02 12:36:32 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: October 2 2008 $
d1294 9
d2925 1
a2925 1
action         = "pass" | "block" [ return ] | [ "no" ] "scrub"
@


1.405
log
@document state-defaults option
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.404 2008/09/11 17:57:45 brad Exp $
d30 1
a30 1
.Dd $Mdocdate: September 11 2008 $
d1501 1
a1501 1
Translates to the point to point interface's peer address(es).
@


1.404
log
@Mbit/s -> Mbps

pointed out by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.403 2008/09/10 15:07:47 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: September 10 2008 $
d520 10
d2838 1
@


1.403
log
@pflow related stuff, reminded by jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.402 2008/06/11 07:21:00 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: June 11 2008 $
d904 1
a904 1
should queue up to 5 Mbit/s in four second-level queues using
@


1.402
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.401 2008/06/10 20:55:01 mcbride Exp $
d30 1
a30 1
.Dd $Mdocdate: June 10 2008 $
d2101 4
d2970 1
a2970 1
state-opt      = ( "max" number | "no-sync" | timeout | sloppy |
d3033 1
@


1.401
log
@Make counters on table addresses optional and disabled by default.
Use the 'counters' table option in pf.conf if you actually need them.
If enabled, memory is not allocated until packets match an address.

This saves about 40% memory if counters are not being used, and paves the way
for some more significant cleanups coming soon.

ok henning mpf deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.400 2008/06/10 16:52:10 jmc Exp $
d167 1
a167 1
Tables may be defined with the following two attributes:
d189 1
a189 1
flag enables per-address packet and byte counters which can be displayed with 
@


1.400
log
@another wee correction; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.399 2008/06/10 08:04:05 jmc Exp $
d186 5
d2872 1
a2872 1
tableopts      = "persist" | "const" | "file" string |
@


1.399
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.398 2008/06/10 04:33:04 henning Exp $
d2094 1
a2094 1
packets of a connection, i.e. in asymmetric routing situations.
@


1.398
log
@theo and ryan and I like to scare people
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.397 2008/05/19 14:57:31 markus Exp $
d30 1
a30 1
.Dd $Mdocdate: May 19 2008 $
d2090 2
a2091 2
Uses a sloppy tcp connection tracker that does not check sequence
numbers at all, which makes insertion and icmp teardown attacks way
d2094 1
a2094 1
packets of a connection, i. e. in asymmetric routing situations.
@


1.397
log
@add divert-to/divert-reply; ok henning, pyr
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.396 2008/05/07 07:32:37 markus Exp $
d30 1
a30 1
.Dd $Mdocdate: May 7 2008 $
d2089 7
d2961 1
a2961 1
state-opt      = ( "max" number | "no-sync" | timeout |
@


1.396
log
@scrub allows tagged, too
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.395 2008/05/07 06:23:30 markus Exp $
d1836 16
@


1.395
log
@allow setting TOS with scrub; ok mcbride, claudio
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.394 2008/03/19 19:28:24 deraadt Exp $
d30 1
a30 1
.Dd $Mdocdate: March 19 2008 $
d1824 2
a1825 1
Used with filter or translation rules to specify that packets must already
@


1.394
log
@demonstrate "include" in the bnf; weerd@@weirdnet.nl
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.393 2008/02/11 07:46:32 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: February 11 2008 $
d632 13
d2809 1
a2809 1
filteropt      = user | group | flags | icmp-type | icmp6-type | tos |
d2812 1
a2812 1
                 "fragment" | "no-df" | "min-ttl" number |
d2933 1
a2933 1
tos            = "tos" ( "lowdelay" | "throughput" | "reliability" |
@


1.393
log
@do not describe `/' as solidus; from Allen (freebsd pr120484);
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.392 2008/02/01 08:38:00 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: Febuary 1 2008 $
d2965 1
@


1.392
log
@no more /usr/share/pf;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.391 2008/02/01 07:26:41 mcbride Exp $
d2547 2
a2548 2
reference to an anchor name containing solidus
.Pq Sq /
@


1.391
log
@Document the ability to use filteropts on anchors.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.390 2007/11/21 03:58:46 ray Exp $
d30 1
a30 1
.Dd $Mdocdate: November 21 2007 $
a2977 2
.It Pa /usr/share/pf
Example rulesets.
@


1.390
log
@Fix grammar, pointed out by Jim Razmus and RW.

OK jmc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.389 2007/11/09 15:54:53 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: November 9 2007 $
d2465 2
a2466 4
rules can specify the parameter's
direction, interface, address family, protocol and source/destination
address/port
using the same syntax as filter rules.
d2843 1
a2843 1
                 [ af ] [ protospec ] [ hosts ] [ "{" ]
@


1.389
log
@when "max <number>" is exceeded, packets are not dropped - rather they
fail to match;

from Doichin Dokov
diff from henning and myself
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.388 2007/10/14 16:01:43 deraadt Exp $
d30 1
a30 1
.Dd $Mdocdate: October 14 2007 $
d823 1
a823 1
has primarily effects on throughput.
@


1.388
log
@include in bnf, wanted by jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.387 2007/10/13 21:49:15 deraadt Exp $
d30 1
a30 1
.Dd $Mdocdate: October 13 2007 $
d2046 2
a2047 2
When this limit is reached, further packets matching the rule that would
create state are dropped, until existing states time out.
@


1.387
log
@support an include directive; file of course must also be "secure" like
the main configuration file; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.386 2007/09/30 20:12:22 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: September 30 2007 $
d2772 2
a2773 1
		 anchor-rule | anchor-close | load-anchor | table-rule | )
d2776 1
a2776 1
		 [ "ruleset-optimization" [ "none" | "basic" | "profile" ]] |
@


1.386
log
@while rdr'ing port spamd to portsmtpis perfectly valid, it is at least
a bit confuzzling, so swap.
From: Olli Hauer <ohauer@@gmx.de>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.385 2007/09/27 22:40:48 mpf Exp $
d30 1
a30 1
.Dd $Mdocdate: September 27 2007 $
d81 11
@


1.385
log
@Mention "set loginterface <ifgroup>"
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.384 2007/08/30 17:05:44 dhartmei Exp $
d30 1
a30 1
.Dd $Mdocdate: August 30 2007 $
d1167 1
a1167 1
rdr on ne3 inet proto tcp to port spamd -\*(Gt 127.0.0.1 port smtp
@


1.384
log
@document address ranges, with help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.382 2007/06/26 20:22:02 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: June 26 2007 $
d330 2
a331 1
Enable collection of packet and byte count statistics for the given interface.
@


1.383
log
@typo; from Stephan A. Rickauer
@
text
@d1445 8
@


1.382
log
@checkd -> checked; from Nicholas Marriott
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.381 2007/06/08 14:16:37 henning Exp $
d30 1
a30 1
.Dd $Mdocdate$
d1251 1
a1251 1
state is created state unless the
@


1.381
log
@make it clearer where ifgroups can be used
From: Stuart Henderson <stu@@spacehopper.org>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.380 2007/05/31 19:19:58 jmc Exp $
d1608 1
a1608 1
To indicate that flags should not be checkd at all, specify
@


1.380
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.379 2007/05/08 23:38:12 mcbride Exp $
d1422 2
a1423 1
symbolic host names or interface names, or as any of the following keywords:
d1445 1
a1445 1
Interface names can have modifiers appended:
d2765 1
a2765 1
                 [ "skip on" ( interface-name | "{" interface-list "}" ) ] |
d2807 1
a2807 2
                 "for" ( interface-name | "{" interface-list "}" )
                 [ af ] [ "label" string ]
d2815 2
a2816 2
tableaddr      = hostname | ipv4-dotted-quad | ipv6-coloned-hex |
                 interface-name | "self"
d2847 4
a2850 2
ifspec         = ( [ "!" ] interface-name ) | "{" interface-list "}"
interface-list = [ "!" ] interface-name [ [ "," ] interface-list ]
d2870 3
a2872 2
address        = ( interface-name | "(" interface-name ")" | hostname |
                 ipv4-dotted-quad | ipv6-coloned-hex )
@


1.379
log
@Document the fact that 'allow-opts' applies to IPv6 now as well.

ok jmc@@ dhartmei@@ henning@@ deraadt@@ claudio@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.378 2007/04/14 07:24:18 jmc Exp $
d30 1
a30 1
.Dd November 19, 2002
@


1.378
log
@set timeout source-track -> set timeout src.track; from Jason Testart
and a missing full stop...
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.377 2007/03/21 03:04:16 mcbride Exp $
d1691 2
a1692 1
By default, packets which contain IP options are blocked.
d1698 1
a1698 1
do so even if they contain IP options.
@


1.377
log
@Basic ruleset optimization is now the default.

Use 'set ruleset-optimization none' or the -o none argument
to prevent pfctl from optimizing the ruleset before loading it.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.376 2006/12/01 07:23:26 camield Exp $
d1918 1
a1918 1
.Ar set timeout source-track
@


1.376
log
@Correct the explanation of NAT evaluation order.  binat is always first,
then rdr on inbound packets or nat on outbound packets.  This is _not_
necessarily the same order in which the rules are defined in the ruleset.

ok jmc dhartmei henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.375 2006/11/29 07:03:58 jmc Exp $
d405 2
d408 1
a408 2
.It Ar basic
Enable basic ruleset optimization, which does four things to improve the
@


1.375
log
@stateles -> stateless; from stuart henderson
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.374 2006/11/28 21:39:46 jmc Exp $
d1129 11
a1139 2
For each packet processed by the translator, the translation rules are
evaluated in sequential order, from first to last.
@


1.374
log
@bad space;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.373 2006/11/28 17:11:29 henning Exp $
d1298 1
a1298 1
will also create state for other protocols which are effectively stateles by
@


1.373
log
@mention rtable shitz now that it is enabled in the forwarding path
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.372 2006/11/09 13:18:56 jmc Exp $
d1789 1
a1789 1
Only effective before the route lookup happened, i. e. when filtering inbound.
@


1.372
log
@desireable -> desirable;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.371 2006/11/01 09:19:48 jmc Exp $
d1787 3
d2773 1
a2773 1
                 "probability" number"%"
@


1.371
log
@tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.370 2006/10/31 14:53:44 mcbride Exp $
d510 1
a510 1
desireable to manually configure it, for example to more easily identify the
@


1.370
log
@Document set ruleset-optimization [ none | basic | profile ].
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.369 2006/10/28 14:31:00 mcbride Exp $
d404 2
a405 1
Disable the ruleset optimizer. This is the default behaviour.
d409 1
d420 1
d435 1
a435 1
.Xr pfctl , 
d437 1
a437 1
.Nm pf.conf .
@


1.369
log
@Document inline anchor loading with { } delimited blocks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.368 2006/10/26 13:15:16 jmc Exp $
d401 34
d436 1
a436 1
Optimize the engine for one of the following network environments:
d2737 1
@


1.368
log
@tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.367 2006/10/26 13:11:05 jmc Exp $
d2460 16
d2699 2
a2700 2
                 antispoof-rule | altq-rule | queue-rule | anchor-rule |
                 trans-anchors | load-anchor | table-rule )
d2771 4
a2774 2
anchor-rule    = "anchor" string [ ( "in" | "out" ) ] [ "on" ifspec ]
                 [ af ] [ protospec ] [ hosts ]
@


1.367
log
@tweaks; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.366 2006/10/26 10:29:43 mcbride Exp $
d466 1
a466 1
The 32 bit
d469 3
a471 1
in a pfsync failover cluster.
@


1.366
log
@eep! unbreak.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.365 2006/10/26 10:26:03 mcbride Exp $
d1300 1
a1300 1
interface instance, by default,
@


1.365
log
@Document hostid.

pointed out by Pierre-Yves Ritschard.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.364 2006/10/25 11:36:08 henning Exp $
d473 3
a475 2
.Pp
.Dl set hostid 1
a477 1
.Ed
@


1.364
log
@document how ot send logs to alternate pflog interfaces
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.363 2006/10/23 06:58:35 jmc Exp $
d464 13
@


1.363
log
@remove trailing space;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.362 2006/10/22 22:40:40 mcbride Exp $
d1284 2
a1285 2
option is specified
The logged packets are sent to the
d1287 2
a1288 1
interface.
d1312 5
d2690 1
a2690 1
logopt         = "all" | "user"
@


1.362
log
@Move the stateful content up to the FILTERING section and flesh it out
somewhat to reflect the default 'keep state' behaviour of pf.conf.

prodding by theo, ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.361 2006/10/11 13:35:17 jmc Exp $
d1941 1
a1941 1
per-rule basis. 
@


1.361
log
@fix mark up mistake;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.360 2006/10/11 08:44:39 mcbride Exp $
d65 1
a65 2
Stateful and stateless packet filtering provides rule-based blocking or
passing of packets.
d1140 2
d1181 6
d1188 4
a1191 1
The packet is passed.
d1194 9
a1202 2
If no rule matches the packet, the default action is
.Ar pass .
d1204 14
a1217 2
To block everything by default and only pass packets
that match explicit rules, one uses
d1219 1
a1219 1
block all
d1222 22
a1243 1
as the first filter rule.
d1245 14
d1260 2
a1261 2
.Sx FILTER EXAMPLES
below.
a1284 6
(see
.Ar keep state ,
.Ar modulate state
and
.Ar synproxy state
below).
d1555 26
a1850 117
.Sh STATEFUL INSPECTION
.Xr pf 4
is a stateful packet filter,
which means it can track the state of a connection.
A connection's state is tracked by default, unless
.Ar no state
is specified.
Instead of passing all traffic to port 25, for instance, it will
pass only the initial packet, and then begin to keep state.
Subsequent traffic will flow because the filter is aware of the connection.
.Pp
Before any rules are evaluated, the filter checks whether the packet
matches any state.
If it does, the packet is passed without evaluation of any rules.
.Pp
States are removed after the connection is closed or has timed out.
.Pp
This has several advantages.
Comparing a packet to a state involves checking its sequence numbers.
If the sequence numbers are outside the narrow windows of expected
values, the packet is dropped.
This prevents spoofing attacks, such as when an attacker sends packets with
a fake source address/port but does not know the connection's sequence
numbers.
.Pp
Also, looking up states is usually faster than evaluating rules.
If there are 50 rules, all of them are evaluated sequentially in O(n).
Even with 50000 states, only 16 comparisons are needed to match a
state, since states are stored in a binary search tree that allows
searches in O(log2 n).
.Pp
For instance:
.Bd -literal -offset indent
block all
pass out proto tcp from any to any flags S/SA keep state
pass in  proto tcp from any to any port 25 flags S/SA keep state
.Ed
.Pp
This ruleset blocks everything by default.
Only outgoing connections and incoming connections to port 25 are allowed.
The initial packet of each connection has the SYN
flag set, will be passed and creates state.
All further packets of these connections are passed if they match a state.
.Pp
By default, packets coming in and out of any interface can match a state,
but it is also possible to change that behaviour by assigning states to a
single interface.
.Pp
The default policy is specified by the
.Ar state-policy
global option, but this can be adjusted on a per-rule basis by adding one
of the
.Ar if-bound
or
.Ar floating
keywords to the
.Ar keep state
option.
.Pp
Because
.Ar keep state
and
.Ar flags S/SA
are enabled implicitly, they do not need to be specified.
The following pass rules are equivalent to those in the example above:
.Bd -literal -offset indent
pass out proto tcp from any to any
pass in  proto tcp from any to any port 25
.Ed
.Pp
By default, only the initial SYN packet of a TCP handshake will create a
state for a TCP connection.
One can also be less restrictive, and allow state creation from
intermediate
.Pq non-SYN
packets, by specifying an empty set of flags:
.Ar flags / .
This will cause
.Xr pf 4
to synchronize to existing connections, for instance
if one flushes the state table.
However, states created from such intermediate packets may be missing
connection details such as the TCP window scaling factor.
States created with
.Ar modulate state
or scrubbed with
.Ar reassmble tcp
will also not be recoverable from intermediate packets.
Such connections will stall and time out.
.Pp
.Xr pf 4
will also create state for UDP packets, although it is stateless by nature.
UDP packets are matched to states using only host addresses and ports.
.Pp
ICMP messages fall into two categories: ICMP error messages, which always
refer to a TCP or UDP packet, are matched against the referred to connection.
If one keeps state on a TCP connection, and an ICMP source quench message
referring to this TCP connection arrives, it will be matched to the right
state and get passed.
.Pp
For ICMP queries,
.Ar keep state
creates an ICMP state, and
.Xr pf 4
knows how to match ICMP replies to states.
For example,
.Bd -literal -offset indent
pass out inet proto icmp all icmp-type echoreq keep state
.Ed
.Pp
allows echo requests (such as those created by
.Xr ping 8 )
out, creates state, and matches incoming echo replies correctly to states.
.Pp
Note:
.Ar nat , binat No and Ar rdr
rules implicitly create state for connections.
a1923 1
Hence,
d1926 1
a1926 3
.Ar modulate state
and
.Ar keep state .
d1940 2
a1941 1
All three of
d1946 3
a1948 1
support the following options:
@


1.360
log
@Document 'anchor "foo" quick'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.359 2006/10/06 16:25:24 jmc Exp $
d2339 2
a2340 1
.Ar quick option
@


1.359
log
@these fixes got lost somehow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.358 2006/10/06 13:56:29 jmc Exp $
d2332 1
a2332 1
Matching filter and translation rules in anchors with the
d2335 7
a2341 2
anchors
and the main ruleset.
@


1.358
log
@missing fixes for STATEFUL INSPECTION;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.357 2006/10/06 13:51:06 jmc Exp $
d364 2
a365 2
.Ar no state
) to 20000.
d1217 2
a1218 1
Unless the
d1220 2
a1221 3
option is specified, only the
packet that establishes the state is logged.
(See
@


1.357
log
@kill trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.356 2006/10/06 10:48:46 mcbride Exp $
d1770 2
a1771 2
which means it tracks the state of a connection.
A connection 's state is tracked by default, unless
d1775 1
a1775 1
to pass only the initial packet, and then begin to keep state
d1843 1
a1843 1
.Ar flags /
@


1.356
log
@Document the fact that 'flags S/SA keep state' is now the implicit default,
as well as 'no state' and 'flags any' options.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.355 2006/09/12 13:39:37 jmc Exp $
d97 1
a97 1
pass in  on $ext_if proto tcp from any to any port 25 
d1465 1
a1465 1
pass  out proto { tcp, udp } all user { \*(Lt 1000, dhartmei } 
d1481 1
a1481 1
To indicate that flags should not be checkd at all, specify 
d1833 1
a1833 1
pass out proto tcp from any to any 
d1848 1
a1848 1
However, states created from such intermediate packets may be missing 
d1850 1
a1850 1
States created with 
d1852 1
a1852 1
or scrubbed with 
d1918 1
a1918 1
The default 
d2629 1
a2629 1
pass on $ext_if inet proto icmp all icmp-type 8 code 0 
@


1.355
log
@for apps which use interface groups, point to the section of
ifconfig(8) where they are explained;

ok mcbride mpf henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.354 2006/08/31 18:44:48 jmc Exp $
d96 2
a97 2
pass out on $ext_if from any to any keep state
pass in  on $ext_if proto tcp from any to any port 25 keep state
d362 4
a365 2
.Ar keep state
rules) to 20000.
d992 1
a992 1
      keep state queue developers
d994 1
a994 1
      keep state queue employees
d996 1
a996 1
      keep state queue(ssh_bulk, ssh_interactive)
d998 1
a998 1
      keep state queue mail
d1217 3
a1219 6
All packets for that connection are logged, unless the
.Ar keep state ,
.Ar modulate state
or
.Ar synproxy state
options are specified, in which case only the
d1238 4
a1241 6
Used with
.Ar keep state ,
.Ar modulate state
or
.Ar synproxy state
rules to force logging of all packets for a connection.
d1407 1
a1407 1
pass in proto tcp from any os "OpenBSD" flags S/SA
d1465 1
a1465 2
pass  out proto { tcp, udp } all \e
      user { \*(Lt 1000, dhartmei } keep state
d1470 1
d1479 4
d1489 1
d1769 7
a1775 4
is a stateful packet filter, which means it can track the state of
a connection.
Instead of passing all traffic to port 25, for instance, it is possible
to pass only the initial packet, and then begin to keep state.
a1777 5
If a packet matches a
.Ar pass ... keep state
rule, the filter creates a state for this connection and automatically
lets pass all subsequent packets of that connection.
.Pp
d1826 3
a1828 1
Specifying
d1830 9
a1838 2
restricts state creation to the initial SYN
packet of the TCP handshake.
d1842 2
a1843 1
packets.
d1848 8
d1857 2
a1858 3
For UDP, which is stateless by nature,
.Ar keep state
will create state as well.
d1906 1
a1906 1
pass in  proto tcp from any to any port 25 flags S/SA modulate state
d1909 1
a1909 16
There are two caveats associated with state modulation:
A
.Ar modulate state
rule can not be applied to a pre-existing but unmodulated connection.
Such an application would desynchronize TCP's strict
sequencing between the two endpoints.
Instead,
.Xr pf 4
will treat the
.Ar modulate state
modifier as a
.Ar keep state
modifier and the pre-existing connection will be inferred without
the protection conferred by modulation.
.Pp
The other caveat affects currently modulated states when the state table
d1918 3
a1920 3
Using a
.Ar flags S/SA
modifier on
d1922 1
a1922 1
rules between fast networks is suggested to prevent ACK storms.
d1973 1
a1973 1
pass in proto tcp from any to any port www flags S/SA synproxy state
d2004 1
a2004 1
      port www flags S/SA keep state \e
d2087 1
a2087 1
pass in on $ext_if proto tcp to $webserver port www flags S/SA keep state \e
d2145 1
a2145 1
pass  out proto tcp from any os OpenBSD keep state
d2150 1
a2150 1
pass on lo0 proto tcp from any os "OpenBSD 3.3 lo0" keep state
d2360 1
a2360 1
pass out on $ext_if all keep state
d2362 1
a2362 1
      to $ext_if port smtp keep state
d2410 2
a2411 2
pass out on $ext_if all keep state
pass in on $ext_if proto tcp from any to $ext_if port smtp keep state
d2629 1
a2629 1
pass on $ext_if inet proto icmp all icmp-type 8 code 0 keep state
d2634 1
a2634 1
pass out on $ext_if proto udp all keep state
d2637 1
a2637 1
pass in on $ext_if proto udp from any to any port domain keep state
d2646 1
a2646 1
      auth } flags S/SA keep state
d2656 2
a2657 2
pass quick on gif0 inet6 keep state
pass quick on $ext_if proto ipv6 keep state
d2667 2
a2668 2
pass in on $int_if from any to any tag INTNET keep state
pass in on $wifi_if from any to any keep state
d2671 2
a2672 2
pass out quick on $ext_if tagged INTNET keep state
pass out on $ext_if proto tcp from any to any port 80 keep state
d2681 1
a2681 1
pass in on $ext_if inet proto tcp tagged SPAMD keep state
d2715 1
a2715 1
                 ( "keep" | "modulate" | "synproxy" ) "state"
d2824 1
a2824 1
flags          = "flags" [ flag-set ] "/" flag-set
@


1.354
log
@knock out the cpp/m4 stuff from MACROS; after discussion with many...
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.353 2006/08/22 15:55:13 dhartmei Exp $
d1265 5
@


1.353
log
@back out -r1.497 (support for "tagged {}" lists), it broke "tagged" support
for nat rules. sorry, existing functionality trumps syntactic sugar. feel
free to resubmit a complete patch. closes PR 5207.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.352 2006/08/02 11:45:56 dhartmei Exp $
d83 1
a83 5
Much like
.Xr cpp 1
or
.Xr m4 1 ,
macros can be defined that will later be expanded in context.
@


1.352
log
@in the BNF section, note that a comma is optional, closes PR 5191
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.351 2006/07/25 16:59:25 jmc Exp $
d1633 1
a1633 4
.It Xo Ar tagged Aq Ar string
.No \*(Ba { Ao Ar string Ac ,
.Ao Ar string Ac }
.Xc
d1635 2
a1636 2
be tagged with any of the given tags in order to match the rule.
If only one tag is given, inverse tag matching can also be done
a1641 1
A list of tags cannot be negated as it would expand to a useless rule.
a2717 1
		 "tagged" "{" string [ [ "," ] string ] "}" |
@


1.351
log
@document "tos": pointed out by maxim bourmistrov
diff from jared r r spiegel

ok dhartmei
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.350 2006/07/09 11:00:17 mcbride Exp $
d2780 1
a2780 1
                 "return-icmp" [ "(" icmpcode ["," icmp6code ] ")" ] |
@


1.350
log
@The timeout value is called src.track, not source-track.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.349 2006/06/18 16:01:20 hshoexer Exp $
d1515 20
d1598 1
a1598 1
.Em tos
@


1.349
log
@typo: queu -> queue

ok claudio@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.348 2006/05/28 12:07:10 jmc Exp $
d386 1
a386 1
.Ar source-track
@


1.348
log
@put previous in the correct place; ok mcbride
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.347 2006/05/28 02:51:06 mcbride Exp $
d1572 1
a1572 1
.It Xo Ar queue Aq Ar queu
@


1.347
log
@Adaptive timeouts are now on by default.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.346 2006/05/14 15:51:42 deraadt Exp $
d311 2
a316 1
.El
@


1.346
log
@interface bandwidths can change; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.345 2006/05/01 15:17:41 jmc Exp $
d311 4
d317 1
a317 1
These values can be defined both globally and for each rule.
@


1.345
log
@update the "tagged" line; ok dhartmei
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.344 2006/05/01 12:24:32 dhartmei Exp $
d804 3
a806 1
is not specified, the interface bandwidth is used.
@


1.344
log
@add support for "tagged {}" lists, from Pierre-Yves Ritschard
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.343 2006/04/30 10:12:21 jmc Exp $
d1606 4
a1609 1
.It Ar tagged Aq Ar string
@


1.343
log
@- replace <> with .Aq
- replace OpenBSD with .Ox

from wiz@@netbsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.342 2006/03/14 11:09:44 djm Exp $
d1608 2
a1609 2
be tagged with the given tag in order to match the rule.
Inverse tag matching can also be done
d1615 1
d2692 1
@


1.342
log
@implement a Unicast Reverse Path Forwarding (uRPF) check for pf(4)
which optionally verifies that a packet is received on the interface
that holds the route back to the packet's source address. This makes
it an automatic ingress filter, but only when routing is fully
symmetric.

bugfix feedback claudio@@; ok claudio@@ and dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.341 2006/02/20 11:39:43 camield Exp $
d184 3
a186 3
table <private> const { 10/8, 172.16/12, 192.168/16 }
table <badhosts> persist
block on fxp0 from { <private>, <badhosts> } to any
d204 2
a205 2
table <spam> persist file \&"/etc/spammers\&" file \&"/etc/openrelays\&"
block on fxp0 from <spam> to any
d494 1
a494 1
.It Ar set skip on <ifspec>
d561 1
a561 1
.It Ar min-ttl <number>
d563 1
a563 1
.It Ar max-mss <number>
d774 1
a774 1
.It Ar <interface>
d776 1
a776 1
.It Ar <scheduler>
d786 1
a786 1
.It Ar bandwidth <bw>
d805 1
a805 1
.It Ar qlimit <limit>
d808 1
a808 1
.It Ar tbrsize <size>
d812 1
a812 1
.It Ar queue <list>
d841 1
a841 1
.It Ar on <interface>
d844 1
a844 1
.It Ar bandwidth <bw>
d854 1
a854 1
.It Ar priority <level>
d870 1
a870 1
.It Ar qlimit <limit>
d878 3
a880 1
.Ar <scheduler> Ns Li (\& Ar <parameters> No ) .
d914 1
a914 1
.It Ar realtime <sc>
d916 1
a916 1
.It Ar upperlimit <sc>
d918 1
a918 1
.It Ar linkshare <sc>
d922 2
a923 1
<sc> is an acronym for
d1053 1
a1053 1
rdr ... port 2000:2999 -> ... port 4000
d1055 1
a1055 1
rdr ... port 2000:2999 -> ... port 4000:*
d1100 1
a1100 1
rdr on ne3 inet proto tcp to port spamd -> 127.0.0.1 port smtp
d1259 1
a1259 1
.It Ar on <interface>
d1262 1
a1262 1
.It Ar <af>
d1268 1
a1268 1
.It Ar proto <protocol>
d1281 5
a1285 2
.Ar from <source> port <source> os <source>
.Ar to <dest> port <dest>
d1296 1
a1296 1
.It Ar route <label>
d1298 1
a1298 1
.Ar <label> .
d1309 1
a1309 1
.It Ar <table>
d1356 4
a1359 4
<	(less than)
<=	(less than or equal)
>	(greater than)
>=	(greater than or equal)
d1361 2
a1362 2
><	(range excluding boundaries)
<>	(except range)
d1365 4
a1368 1
><, <> and :
d1374 1
a1374 1
.Sq all ports >= 2000 and <= 2004 ,
d1376 1
a1376 1
.It Ar port 2000 >< 2004
d1378 1
a1378 1
.Sq all ports > 2000 and < 2004 ,
d1380 1
a1380 1
.It Ar port 2000 <> 2004
d1382 1
a1382 1
.Sq all ports < 2000 or > 2004 ,
d1398 1
a1398 1
pass in proto tcp from any port <= 1024 to any
d1400 1
a1400 1
pass in proto tcp from 10.0.0.0/8 port > 1024 \e
d1407 1
a1407 1
.It Ar group <group>
d1411 1
a1411 1
.It Ar user <user>
d1444 1
a1444 1
.Cm user >= unknown
d1454 1
a1454 1
.Cm user >= 0
d1461 1
a1461 1
      user { < 1000, dhartmei } keep state
d1463 4
a1466 1
.It Ar flags <a>/<b> | /<b>
d1468 1
a1468 1
.Ar <a>
d1470 1
a1470 1
.Ar <b> .
d1472 1
a1472 1
.Ar <b>
d1487 6
a1492 2
.It Ar icmp-type <type> code <code>
.It Ar icmp6-type <type> code <code>
d1522 1
a1522 1
.It Ar label <string>
d1551 1
a1551 1
      port > 1023 label \&"$dstaddr:$dstport\&"
d1557 1
a1557 1
      port > 1023 label \&"1.2.3.4:>1023\&"
d1559 1
a1559 1
      port > 1023 label \&"1.2.3.5:>1023\&"
d1565 4
a1568 1
.It Ar queue <queue> | ( <queue> , <queue> )
d1584 1
a1584 1
.It Ar tag <string>
d1606 1
a1606 1
.It Ar tagged <string>
d1615 1
a1615 1
.It Ar probability <number>
d1954 1
a1954 1
.It Ar max <number>
d1962 3
a1964 1
.It Ar <timeout> <seconds>
d2005 1
a2005 1
.It Ar max-src-nodes <number>
d2008 1
a2008 1
.It Ar max-src-states <number>
d2018 1
a2018 1
.It Ar max-src-conn <number>
d2021 3
a2023 1
.It Ar max-src-conn-rate <number> / <seconds>
d2031 1
a2031 1
.Ar overload <table>
d2050 3
a2052 1
to the <bad_hosts> table and have all states originating from it flushed.
d2056 1
a2056 1
block quick from <bad_hosts>
d2058 1
a2058 1
	(max-src-conn-rate 100/10, overload <bad_hosts> flush global)
d2071 3
a2073 1
and would be OpenBSD for the
d2076 3
a2078 1
The version of the oldest available OpenBSD release on the main ftp site
d2085 3
a2087 1
In the case of OpenBSD, the only subtype is for a fingerprint that was
d2269 1
a2269 1
.It Ar nat-anchor <name>
d2274 1
a2274 1
.It Ar rdr-anchor <name>
d2279 1
a2279 1
.It Ar binat-anchor <name>
d2284 1
a2284 1
.It Ar anchor <name>
d2287 4
a2290 1
.It Ar load anchor <name> from <file>
d2451 1
a2451 1
rdr on $ext_if proto tcp from any to any port 80 -> 127.0.0.1 port 8080
d2459 1
a2459 1
rdr pass on $ext_if proto tcp from any to any port 80 -> 127.0.0.1 \e
d2472 1
a2472 1
nat on ! vlan12 from 192.168.168.0/24 to any -> 204.92.77.111
d2483 1
a2483 1
nat on $ext_if from 144.19.74.0/24 to any -> 204.92.77.100
d2492 1
a2492 1
rdr on $int_if proto { tcp, udp } from any to any port 80 -> 127.0.0.1 \e
d2510 1
a2510 1
nat on $ext_if inet from ! ($ext_if) to any -> ($ext_if)
d2516 1
a2516 1
nat on $ext_if inet proto udp from any port = isakmp to any -> ($ext_if) \e
d2523 1
a2523 1
binat on $ext_if from 10.1.2.150 to any -> $ext_if
d2529 1
a2529 1
      -> 10.1.2.151 port 22
d2531 1
a2531 1
      -> 10.1.2.151 port 53
d2536 1
a2536 1
rdr on $int_if proto tcp from any to any port 21 -> 127.0.0.1 port 8021
d2548 1
a2548 1
nat on $ext_if inet from any to any -> 192.0.2.16/28 source-hash
d2554 1
a2554 1
      -> { 10.1.2.155, 10.1.2.160, 10.1.2.161 } round-robin
d2574 1
a2574 1
# block packets whose ingress interface does not match the one in 
d2647 2
a2648 2
rdr on $ext_if inet proto tcp from <spammers> to port smtp \e
	tag SPAMD -> 127.0.0.1 port spamd
d2697 1
a2697 1
                 [ "->" ( redirhost | "{" redirhost-list "}" )
d2705 1
a2705 1
                 [ "->" address [ "/" mask-bits ] ]
d2710 1
a2710 1
                 [ "->" ( redirhost | "{" redirhost-list "}" )
d2717 1
a2717 1
table-rule     = "table" "<" string ">" [ tableopts-list ]
d2771 1
a2771 1
host           = [ "!" ] ( address [ "/" mask-bits ] | "<" string ">" )
d2786 1
a2786 1
unary-op       = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
d2788 1
a2788 1
binary-op      = number ( "<>" | "><" | ":" ) number
d2813 1
a2813 1
                 "overload" "<" string ">" [ "flush" ] |
@


1.341
log
@new ftp-proxy

ok jmc markus
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.340 2006/01/18 03:45:28 joel Exp $
d1299 4
d2540 4
d2731 1
a2731 1
                 "from" ( "any" | "no-route" | "self" | host |
@


1.340
log
@Document the "tables" and "table-entries" limit options.

ok jmc@@ mcbride@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.339 2005/11/17 22:18:20 joel Exp $
d2460 1
a2460 1
On the internal interface, we are running
d2462 6
a2467 1
listening for outbound ftp sessions captured to port 8021.
a2574 5

# pass in data mode connections for ftp-proxy running on this host.
# (see ftp-proxy(8) for details)
pass in on $ext_if proto tcp from any to 157.161.48.183 port >= 49152 \e
      flags S/SA keep state
@


1.339
log
@document "log (user)"

wording help and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.338 2005/09/16 10:18:29 dhartmei Exp $
d372 1
a372 1
Finally,
d383 10
d394 1
a394 1
These can be combined:
@


1.338
log
@in the bnf section, clarify that "fastroute" takes no arguments. also fix
the literal parentheses around the "route/reply/dup-to" arguments.
from  Karl O. Pinc, discussed with jmc@@ and otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.337 2005/08/06 19:52:36 jmc Exp $
d1233 7
@


1.337
log
@replace port number 8025 w/ symbolic `spamd';
ok krw@@ deraadt@@

diff from ray lai;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.336 2005/08/05 22:35:59 dhartmei Exp $
d2618 1
a2618 1
                 [ "on" ifspec ] [ route ] [ af ] [ protospec ]
d2696 1
a2696 2
route          = "fastroute" |
                 ( "route-to" | "reply-to" | "dup-to" )
d2714 1
a2714 1
routehost      = ( interface-name [ address [ "/" mask-bits ] ] )
@


1.336
log
@document "set skip on" in the BNF grammar, from David Krause
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.335 2005/06/14 18:18:14 henning Exp $
d1087 1
a1087 1
rdr on ne3 inet proto tcp to port 8025 -> 127.0.0.1 port 25
@


1.335
log
@the need to use stateful rules for tagging is gone
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.334 2005/06/05 13:46:30 jmc Exp $
d2613 1
@


1.334
log
@(lightly) document carp(4) in reference to state table;

suggested by alexey e. suslikov;
better wording + ok joel@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.333 2005/06/03 22:14:37 jmc Exp $
a1558 8
.Ar pass
rules that use the
.Ar tag
keyword must also use
.Ar keep state ,
.Ar modulate state
or
.Ar synproxy state .
@


1.333
log
@add an ipv6 example;

from alex kirk;
ok dhartmei@@, unless i have badly misunderstood him;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.332 2005/06/02 22:56:50 dhartmei Exp $
d1861 9
d2815 1
@


1.332
log
@In the BNF section, remove one spurious "proto" and add one missing |.
Found by Magne Andreassen.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.331 2005/05/27 18:57:56 dhartmei Exp $
d2562 6
@


1.331
log
@s/log-all/log (all)/
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.330 2005/05/26 15:29:47 dhartmei Exp $
d2623 1
a2623 1
                 "label" string | "tag" string | [ ! ] "tagged" string
d2665 1
a2665 1
                 [ af ] [ "proto" ] [ protospec ] [ hosts ]
@


1.330
log
@support 'log' and 'log-all' in 'nat/rdr/binat pass' rules. original patch
from camield@@. use #defines PF_LOG, PF_LOGALL instead of magic constants.
ok frantzen@@, camield@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.329 2005/05/26 05:34:00 henning Exp $
d1222 1
a1222 1
.It Ar log-all
d2609 1
a2609 1
                 [ "log" | "log-all" ] [ "quick" ]
d2613 3
d2627 1
a2627 1
nat-rule       = [ "no" ] "nat" [ "pass" [ "log" | "log-all" ] ]
d2633 1
a2633 1
binat-rule     = [ "no" ] "binat" [ "pass" [ "log" | "log-all" ] ]
d2640 1
a2640 1
rdr-rule       = [ "no" ] "rdr" [ "pass" [ "log" | "log-all" ] ]
@


1.329
log
@sync with reality
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.328 2005/05/23 15:25:50 dhartmei Exp $
d2624 2
a2625 1
nat-rule       = [ "no" ] "nat" [ "pass" ] [ "on" ifspec ] [ af ]
d2630 3
a2632 2
binat-rule     = [ "no" ] "binat" [ "pass" ] [ "on" interface-name ]
                 [ af ] [ "proto" ( proto-name | proto-number ) ]
d2637 2
a2638 1
rdr-rule       = [ "no" ] "rdr" [ "pass" ] [ "on" ifspec ] [ af ]
@


1.328
log
@the BNF production is called "load-anchor", found by Magne Andreassen
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.327 2005/05/18 02:31:49 david Exp $
d220 1
a220 1
name or the
a444 2
.It Ar group-bound
States are bound to interface group (i.e. ppp)
d1241 1
a1241 3
particular interface.
It is also possible to simply give the interface driver name, like ppp or fxp,
to make the rule match packets flowing through a group of interfaces.
d1753 1
a1753 1
single interface or a group of interfaces.
d1759 1
a1759 2
.Ar if-bound ,
.Ar group-bound
a1764 15
For example, if a rule is defined as:
.Bd -literal -offset indent
pass out on ppp from any to 10.12/16 keep state (group-bound)
.Ed
.Pp
A state created on ppp0 would match packets an all PPP interfaces,
but not packets flowing through fxp0 or any other interface.
.Pp
Keeping rules
.Ar floating
is the more flexible option when the firewall is in a dynamic routing
environment.
However, this has some security implications since a state created by one
trusted network could allow potentially hostile packets coming in from other
interfaces.
d2603 1
a2603 2
                 [ "state-policy" ( "if-bound" | "group-bound" |
                 "floating" ) ]
d2742 1
a2742 1
                 "if-bound" | "group-bound" | "floating" )
@


1.327
log
@max-src-states typo; ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.326 2005/03/01 18:10:44 jmc Exp $
d2614 1
a2614 1
                 trans-anchors | load-anchors | table-rule )
@


1.326
log
@occurance -> occurrence;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.325 2005/02/27 15:08:39 dhartmei Exp $
d1965 1
a1965 1
.Ar max-src-state
@


1.325
log
@support 'tagged' in translation rules, non-delayed tag lookup
ok henning@@, deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.324 2005/02/25 13:59:14 joel Exp $
d635 1
a635 1
In such an occurance, the old packet would be indistinguishable from a
@


1.324
log
@Mention that if a cbq/hfsc queue definition doesn't specify 'bandwidth'
that it defauls to 100% of the parent queue. Fix examples to match.

ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.323 2005/02/24 04:36:45 joel Exp $
d1579 1
a1579 1
Used with filter rules to specify that packets must already
d2646 1
a2646 1
                 [ protospec ] hosts [ "tag" string ]
d2653 1
a2653 1
                 [ "tag" string ]
d2657 1
a2657 1
                 [ protospec ] hosts [ "tag" string ]
@


1.323
log
@Document the 'source-track' stateful tracking option. Heavy influence
from dhartmei and henning.

ok dhartmei@@ henning@@ jmc@@ jaredy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.322 2005/01/01 07:57:53 pascoe Exp $
d842 1
d971 2
a972 2
queue  ssh_interactive priority 7
queue  ssh_bulk priority 0
@


1.322
log
@Fix some parse errors in example rules

ok henning@@ dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.321 2004/12/23 20:33:03 jaredy Exp $
d1958 20
@


1.321
log
@document icmp type/code text abbreviations recognized by pfctl

prodded by John Ladwig <jladwig@@mango.lioness.net>

ok deraadt jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.320 2004/12/22 17:17:56 dhartmei Exp $
d2461 1
a2461 1
binat on $ext_if from 10.1.2.150 to any -> ($ext_if)
d2575 1
a2575 1
pass out on $ext_if from any to any port 80 keep state
@


1.320
log
@Introduce 'set skip on <ifspec>' to support a list of interfaces where no
packet filtering should occur (like loopback, for instance).
Code from Max Laier, with minor improvements based on feedback from
deraadt@@. ok mcbride@@, henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.319 2004/12/22 00:59:26 david Exp $
d1461 4
d1467 6
a1472 1
The protocol and the ICMP type indicator (icmp-type or icmp6-type)
@


1.319
log
@spacing
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.318 2004/12/21 02:00:36 mjc Exp $
d485 10
@


1.318
log
@update to indicate that return-rst generates packets
on bridges. Spotted by Simon Kirby.
proper caps from jmc@@

ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.317 2004/12/19 12:00:48 jmc Exp $
d2583 1
a2583 1
		 [ "state-policy" ( "if-bound" | "group-bound" |
d2719 4
a2722 4
		 "max-src-nodes" number | "max-src-states" number |
		 "max-src-conn" number |
		 "max-src-conn-rate" number "/" number |
		 "overload" "<" string ">" [ "flush" ] |
@


1.317
log
@route <label> rewording from otto@@;
ok dhartmei@@;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.316 2004/12/18 00:23:31 mcbride Exp $
d1148 1
a1148 1
Options returning packets have no effect if
d1151 2
a1152 1
.Xr bridge 4 .
@


1.316
log
@Better wording.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.315 2004/12/17 11:31:18 henning Exp $
d1266 1
a1266 1
Any address whose matching route's label is equal to
@


1.315
log
@Michael Knudsen <e@@molioner.dk> says:
"I think you messed something up when you committed this."
and he is right, I lost a word. Dang! And Thanks :)
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.314 2004/12/12 17:41:55 jmc Exp $
d1958 1
a1958 1
Limit the number of new connections over a time interval.
d1969 2
a1970 2
the offending host, redirect it to a tarpit process, or restrict that
host's bandwidth.
@


1.314
log
@grammar and a little whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.313 2004/12/10 22:17:02 henning Exp $
d1266 1
a1266 1
Any address matching route's label is equal to
@


1.313
log
@document matching on route labels
From: Michael Knudsen <e@@molioner.dk>
jaredy ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.312 2004/12/08 18:49:47 dhartmei Exp $
d1266 1
a1266 1
Any address whose matching route's label is equal to
d1990 1
a1990 1
	(max-src-conn-rate 100/10, overload <bad_hosts> flush global) 
@


1.312
log
@and the example needs 'proto tcp' if it specifies a port, also from mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.311 2004/12/08 18:47:34 dhartmei Exp $
d1262 1
a1262 1
.Bl -tag -width xxxxxxxxxxxx -compact
d1265 7
d1365 1
d2674 1
a2674 1
                 "{" host-list "}" ) [ port ] [ os ]
d2676 1
a2676 1
                 "{" host-list "}" ) [ port ]
d2780 1
d2789 2
a2790 1
.Xr pflogd 8
@


1.311
log
@overload (not overflow) <table>, at least that's what the parser knows.
found by mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.310 2004/12/07 10:40:08 dhartmei Exp $
d1981 1
a1981 1
pass in on $ext_if to $webserver port www flags S/SA keep state \e
@


1.310
log
@and don't lose the documentation for 'flush global'
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.309 2004/12/07 09:36:16 deraadt Exp $
d1957 1
a1957 1
.Ar overflow <table>
d1982 1
a1982 1
	(max-src-conn-rate 100/10, overflow <bad_hosts> flush global) 
d2713 1
a2713 1
		 "overflow" "<" string ">" [ "flush" ] |
@


1.309
log
@tree does not compile, spotted by dlg (not obvious how to fix)
----
Change the default for 'overload <table> flush' to flush only states from the
offending source created by the rule. 'flush global' flushes all states
originating from the offending source. ABI change, requires kernel and pfctl
to be in sync.

ok deraadt@@ henning@@ dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.307 2004/12/04 16:07:31 mcbride Exp $
d1966 7
a1972 2
keyword kills all existing states originating from hosts exceeding these
limits.
d1982 1
a1982 1
	(max-src-conn-rate 100/10, overflow <bad_hosts> flush)
@


1.308
log
@Change the default for 'overload <table> flush' to flush only states from the
offending source created by the rule. 'flush global' flushes all states
originating from the offending source. ABI change, requires kernel and pfctl
to be in sync.

ok deraadt@@ henning@@ dhartmei@@
@
text
@d1966 2
a1967 7
keyword kills all states created by the matching rule which originate
from the host which exceeds these limits.
The
.Ar global
modifier to the flush command kills all states originating from the
offending host, regardless of which rule created the state.
.Pp
d1977 1
a1977 1
	(max-src-conn-rate 100/10, overflow <bad_hosts> flush global)
@


1.307
log
@Cleanup and remove a cut-n-pasto. From jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.306 2004/12/04 08:02:13 mcbride Exp $
d1966 7
a1972 2
keyword kills all existing states originating from hosts exceeding these
limits.
d1982 1
a1982 1
	(max-src-conn-rate 100/10, overflow <bad_hosts> flush)
@


1.306
log
@Document 'max-src-conn', 'max-src-conn-rate', 'overflow <bad> flush'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.305 2004/11/16 18:09:14 mpf Exp $
d1920 1
a1920 1
.Bd -literal
d1970 1
a1970 1
Any host which connects faster than this rate will have it's address added
a1977 18
.Ed
.Sh OPERATING SYSTEM FINGERPRINTING
Passive OS Fingerprinting is a mechanism to inspect nuances of a TCP
connection's initial SYN packet and guess at the host's operating system.
Unfortunately these nuances are easily spoofed by an attacker so the
fingerprint is not useful in making security decisions.
But the fingerprint is typically accurate enough to make policy decisions
.Pp
For a list of all valid timeout names, see
.Sx OPTIONS
above.
.Pp
Multiple options can be specified, separated by commas:
.Bd -literal
pass in proto tcp from any to any \e
      port www flags S/SA keep state \e
      (max 100, source-track rule, max-src-nodes 75, \e
      max-src-states 3, tcp.established 60, tcp.closing 5)
@


1.305
log
@Add "probability" to BNF
ok henning, markus
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.304 2004/11/08 23:32:08 aaron Exp $
d1914 3
d1919 8
d1933 1
a1933 1
.It Ar max-src-nodes
d1936 1
a1936 1
.It Ar max-src-states
d1941 45
d2724 3
@


1.304
log
@Document "no scrub"; from jmc@@, tweaked by me.  dhartmei@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.303 2004/10/28 19:29:53 mcbride Exp $
d2550 2
a2551 1
                 "queue" ( string | "(" string [ [ "," ] string ] ")" )
@


1.303
log
@s/timeout modulation/timestamp modulation/

ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.302 2004/10/18 23:08:08 mcbride Exp $
d646 9
@


1.302
log
@'random-id' no longer applies only to outgoing packets.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.301 2004/09/21 16:59:11 aaron Exp $
d604 1
a604 1
.It timeout modulation
@


1.301
log
@Implement "no scrub" to allow exclusion of specific traffic from scrub rules.
First match wins, just like "no {binat,nat,rdr}".  henning@@, dhartmei@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.300 2004/09/10 12:40:49 jaredy Exp $
d550 1
a550 1
This option only applies to outgoing packets that are not fragmented
@


1.300
log
@mention parent (..) anchors,
mention wildcard (*) anchors,
and mention quotes around anchor names.

ok dhartmei henning jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.299 2004/08/25 07:19:00 jaredy Exp $
d2592 1
a2592 1
action         = "pass" | "block" [ return ] | "scrub"
@


1.299
log
@update w.r.t. recursive anchors
and fix an mdoc list display (from jmc)

ok dhartmei henning jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.298 2004/08/23 14:26:04 jmc Exp $
d2259 46
@


1.298
log
@differentiate between cbq and hfsc;

problem found by marc@@; this diff based on a patch from sven at
sandcat dot nl; ok henning@@;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.297 2004/05/09 10:51:55 dhartmei Exp $
d232 1
a232 1
.Bl -tag -width interval -compact
d2107 1
a2107 1
.Sh ANCHORS AND NAMED RULESETS
d2110 1
a2110 1
can load named rulesets into
d2115 2
a2116 1
contains a list of named rulesets.
d2119 1
a2119 1
has a name which specifies where
d2121 9
a2129 4
can be used to attach sub-rulesets.
A named ruleset contains filter and translation rules, like the
main ruleset.
The main ruleset can reference
d2131 1
a2131 1
attachment points
d2138 1
a2138 1
rules of all named rulesets in the specified
d2143 1
a2143 1
rules of all named rulesets in the specified
d2148 1
a2148 1
rules of all named rulesets in the specified
d2151 1
a2151 1
Evaluates the filter rules of all named rulesets in the specified
d2153 4
a2156 6
.It Ar load anchor <name>:<ruleset> from <file>
Loads the rules from the specified file into the named
ruleset
.Ar <ruleset>
attached to the anchor
.Ar <name> .
d2163 1
a2163 3
will proceed to evaluate all rules specified in the
named rulesets attached to that
.Ar anchor .
d2165 1
a2165 1
Matching filter rules in named rulesets with the
d2167 2
a2168 3
option and matching translation rules are final and abort the
evaluation of both the rules in the
.Ar anchor
a2170 1
Only the main ruleset can contain
d2172 5
a2176 3
rules.
.Pp
When an
d2178 3
a2180 2
contains more than one named ruleset, they are evaluated
in the alphabetical order of their names.
d2182 1
a2182 1
Rules may contain
d2185 1
a2185 1
is loaded, and later such named rulesets can be manipulated through
d2187 1
a2187 1
without reloading the main ruleset.
d2199 1
a2199 1
all rulesets in the
d2205 1
a2205 1
      pfctl -a spam:manual -f -
d2208 1
a2208 1
loads a single ruleset containing a single rule into the
d2212 1
a2212 1
The named ruleset can also be populated by adding a
d2219 1
a2219 1
load anchor spam:manual from "/etc/pf-spam.conf"
d2228 1
a2228 1
into the named ruleset.
d2239 1
a2239 1
This allows conditional evaluation of named rulesets, like:
d2255 1
a2255 1
      pfctl -a spam:manual -f -
d2537 1
a2537 1
load-anchor    = "load anchor" anchorname:rulesetname "from" filename
@


1.297
log
@route-to -> reply-to in one case where it was swapped, from
Christopher Pascoe
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.296 2004/05/05 23:16:02 frantzen Exp $
d685 12
d730 8
@


1.296
log
@Use RFC1323 PAWS timestamps as a logical extension to the conventional TCP
sequence numbers by taking advantage of the maximum 1KHz clock as an upperbound
on the timestamp.  Typically gains 10 to 18 bits of additional security against
blind data insertion attacks.  More if the TS Echo wasn't optional :-(
Enabled with:  scrub on !lo0 all reassemble tcp
ok dhartmei@@.  documentation help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.295 2004/04/24 23:22:54 cedric Exp $
d1568 1
a1568 1
.Ar route-to
@


1.295
log
@Add "probability xxx" rule modifier. ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.294 2004/04/04 19:40:43 jmc Exp $
d621 18
@


1.294
log
@- fix an .El in the wrong place
- add a .Pp
- kill a stray space
- new sentence, new line

from Joel Knight;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.293 2004/03/31 11:13:03 dhartmei Exp $
d1511 9
@


1.293
log
@vender -> vendor, from John Bajana-Bacalle
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.292 2004/02/24 05:44:48 mcbride Exp $
d938 2
a939 2
addresses and ports have been translated. Filter rules
will therefore have to filter based on the translated
d1858 1
d1865 1
a1865 1
.Bl  -tag -width xxxx -compact
d1873 1
a1884 1
.El
@


1.292
log
@'source-track' not 'source-tracking'
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.291 2004/02/04 19:38:30 jmc Exp $
d1894 1
a1894 1
The class of an operating system is typically the vender or genre
@


1.291
log
@upper case ip;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.290 2004/02/04 11:09:33 mcbride Exp $
d238 1
a238 1
Length of time to retain a source-tracking entry after the last state
d381 1
a381 1
.Ar source-tracking
d1860 1
a1860 1
.Ar source-tracking
@


1.290
log
@Document 'set limit src-nodes'
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.289 2004/01/06 09:28:00 cedric Exp $
d378 1
a378 1
source ip addresses (generated by the
@


1.289
log
@group-locked -> group-bound, from J. Knight
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.288 2003/12/31 14:09:57 jmc Exp $
d372 11
d386 1
a386 1
set limit { states 20000, frags 20000 }
d2576 1
a2576 1
limit-item     = ( "states" | "frags" ) number
@


1.288
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.287 2003/12/31 11:18:25 cedric Exp $
d1676 1
a1676 1
pass out on ppp from any to 10.12/16 keep state (group-locked)
@


1.287
log
@Many improvements to the handling of interfaces in PF.

1) PF should do the right thing when unplugging/replugging or cloning/
destroying NICs.

2) Rules can be loaded in the kernel for not-yet-existing devices
(USB, PCMCIA, Cardbus). For example, it is valid to write:
"pass in on kue0" before kue USB is plugged in.

3) It is possible to write rules that apply to group of interfaces
(drivers), like "pass in on ppp all"

4) There is a new ":peer" modifier that completes the ":broadcast"
and ":network" modifiers.

5) There is a new ":0" modifier that will filter out interface aliases.
Can also be applied to DNS names to restore original PF behaviour.

6) The dynamic interface syntax (foo) has been vastly improved, and
now support multiple addresses, v4 and v6 addresses, and all userland
modifiers, like "pass in from (fxp0:network)"

7) Scrub rules now support the !if syntax.

8) States can be bound to the specific interface that created them or
to  a group of interfaces for example:

- pass all keep state (if-bound)
- pass all keep state (group-bound)
- pass all keep state (floating)

9) The default value when only keep state is given can be selected by
using the "set state-policy" statement.

10) "pfctl -ss" will now print the interface scope of the state.

This diff change the pf_state structure slighltly, so you should
recompile your userland tools (pfctl, authpf, pflogd, tcpdump...)

Tested on i386, sparc, sparc64 by Ryan
Tested on macppc, sparc64 by Daniel

ok deraadt@@ mcbride@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.286 2003/12/15 05:17:20 jmc Exp $
d1221 1
a1221 1
Translatee to the point to point interface's peer address(es).
d1668 1
a1668 1
.Ar group-bound 
d1671 1
a1671 1
keyword to the
d1674 1
a1674 1
For example, if a rule is defined as a rule as:
@


1.286
log
@- kill whitespace at EOL
- new sentence, new line
- kill blank line
- missing .El
- missing escape
- ip -> IP
- greate -> create
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.285 2003/12/15 00:02:03 mcbride Exp $
d426 18
d1174 2
d1220 4
d1226 5
d1236 2
a1237 1
Surrounding the interface name in parentheses changes this behaviour.
d1659 31
d2414 2
d2549 2
a2550 1
		 "max-src-nodes" number | "max-src-states" number)
@


1.285
log
@Add support to track stateful connections by source ip. This allows us
to:
- Ensure that clients get a consistent IP mapping with load-balanced
  translation/routing rules
- Limit the number of simultaneous connections a client can make
- Limit the number of clients which can connect through a rule

ok dhartmei@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.284 2003/11/29 10:05:55 dhartmei Exp $
d238 1
a238 1
Length of time to retain a source-tracking entry after the last state 
d1570 2
a1571 2
same source are mapped to the same redirection address. This option can be
used with the
d1577 1
a1577 1
no longer states which refer to them; in order to make the mappings last 
d1581 1
a1581 1
.Sx STATEFUL TRACKING OPTIONS 
a1582 1

d1789 1
a1789 1
keyword is specified, the number of states per source ip is tracked.
d1798 1
a1798 1
source address can greate with this rule.
d1806 1
a1806 1
pass in proto tcp from any to any 
d1811 1
@


1.284
log
@allow ':' (range including boundaries) to be used whereever '><' (range
excluding boundaries) is legal. already supported by kernel, requires only
removal of three error messages. ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.283 2003/11/24 16:06:00 henning Exp $
d237 3
d1566 18
d1787 14
d1807 1
a1807 1
pass in proto tcp from any to any \e
d1809 2
a1810 1
      (max 100, tcp.established 60, tcp.closing 5)
a1811 1
.El
d2484 3
a2486 1
state-opt      = ( "max" number | "no-sync" | timeout )
d2497 1
a2497 1
                 "frag" | "interval" |
d2505 1
a2505 1
                 "round-robin" )
@


1.283
log
@fix load anchor BNF.
from Joel Knight
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.282 2003/11/18 22:52:38 dhartmei Exp $
d1227 2
a1228 1
><	(range)
d1232 2
a1233 3
>< and <>
are binary operators (they take two arguments), and the range
does not include the limits.
d1236 4
@


1.282
log
@more literal confusion, "(" ")" vs. ( )
the parentheses are required when using two queue arguments, and
optional when using one.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.281 2003/11/18 22:43:45 dhartmei Exp $
d2373 1
a2373 1
load-anchor    = "load" anchorname:rulesetname "from" filename
@


1.281
log
@un-quote "return" where it's meant to reference a bnf production
and not a literal.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.280 2003/11/14 16:44:21 henning Exp $
d2331 1
a2331 1
                 "queue" "(" string | ( string [ [ "," ] string ] ) ")"
@


1.280
log
@update BNF for set debug too, again catched by mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.279 2003/11/14 13:51:42 henning Exp $
d2382 1
a2382 1
action         = "pass" | "block" [ "return" ] | "scrub"
@


1.279
log
@document "set debug"

ok jmc@@ cedric@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.278 2003/11/08 00:45:34 mcbride Exp $
d2315 2
a2316 1
                 [ "fingerprints" filename ] )
@


1.278
log
@Add 'no-sync' state option to prevent state transition messages for states
created by this rule from appearing on the pfsync(4) interface. e.g.

pass in proto tcp to self flags S/SA keep state (no-sync)

ok cedric@@ henning@@ dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.277 2003/11/07 20:29:54 mcbride Exp $
d453 16
@


1.277
log
@Add some missing mentions of 'synproxy state'

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.276 2003/11/06 14:38:03 henning Exp $
d1740 4
d2428 1
a2428 1
state-opt      = ( "max" number ) | ( timeout )
d2485 1
@


1.276
log
@document that label macros can now be used in tags as well
with help from and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.275 2003/10/30 19:08:07 jmc Exp $
d1095 2
a1096 1
.Ar keep state
d1098 1
a1098 1
.Ar modulate state
d1102 2
a1103 1
.Ar keep state
d1105 1
a1105 1
.Ar modulate state
d1119 2
a1120 1
.Ar keep state
d1122 1
a1122 1
.Ar modulate state
d1427 4
a1430 1
.Ar keep state .
@


1.275
log
@double word, from Tom Cosgrove;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.274 2003/10/24 19:31:59 henning Exp $
d1431 1
@


1.274
log
@consistently use $ext_if / $int_if in the examples
from jared r r spiegel <jrrs@@ice-nine.org>
ok canacar@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.273 2003/10/07 20:18:36 deraadt Exp $
d1856 1
a1856 1
the maximum transmission unit (MTU) of the network.
@


1.273
log
@typo; ish
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.272 2003/10/07 09:57:43 henning Exp $
d2075 3
d2079 1
a2079 1
rdr on ne3 proto tcp from any to any port 80 -> 127.0.0.1 port 8080
d2087 2
a2088 1
rdr pass on ne3 proto tcp from any to any port 80 -> 127.0.0.1 port 8080
d2103 2
a2104 2
In the example below, fxp1 is the outside interface; the machine sits between a
fake internal 144.19.74.* network, and a routable external IP of 204.92.77.100.
d2110 2
a2111 2
no nat on fxp1 proto ah from 144.19.74.0/24 to any
nat on fxp1 from 144.19.74.0/24 to any -> 204.92.77.100
d2114 2
a2115 4
In the example below, fxp0 is the internal interface.
Packets bound
for one specific server, as well as those generated by the sysadmins
are not proxied; all other connections are.
d2118 4
a2121 3
no rdr on fxp0 proto { tcp, udp } from any to $server port 80
no rdr on fxp0 proto { tcp, udp } from $sysadmins to any port 80
rdr on fxp0 proto { tcp, udp } from any to any port 80 -> 127.0.0.1 port 80
d2125 2
a2126 3
Interface kue0 is the outside interface, and its external address is
157.161.48.183.
Interface fxp0 is the inside interface, and we are running
d2133 1
a2133 1
nat on kue0 inet from ! (kue0) to any -> (kue0)
d2139 1
a2139 1
nat on kue0 inet proto udp from any port = isakmp to any -> (kue0) \e
d2146 1
a2146 1
binat on kue0 from 10.1.2.150 to any -> (kue0)
d2151 4
a2154 4
rdr on kue0 inet proto tcp from any to (kue0) port 8080 -> 10.1.2.151 \e
      port 22
rdr on kue0 inet proto udp from any to (kue0) port 8080 -> 10.1.2.151 \e
      port 53
d2159 1
a2159 1
rdr on fxp0 proto tcp from any to any port 21 -> 127.0.0.1 port 8021
a2165 1
Interface fxp0 is the external interface.
d2171 1
a2171 1
nat on fxp0 inet from any to any -> 192.0.2.16/28 source-hash
d2176 1
a2176 1
rdr on fxp0 proto tcp from any to any port 80 \e
@


1.272
log
@filename needs to be quoted...
ok mcbride@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.271 2003/09/02 18:37:08 jmc Exp $
d1698 1
a1698 1
choses random initial sequence numbers for both handshakes.
@


1.271
log
@escape punctuation;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.270 2003/08/28 09:41:22 jmc Exp $
d2030 1
a2030 1
load anchor spam:manual from /etc/pf-spam.conf
@


1.270
log
@tweak;
ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.269 2003/08/26 18:34:25 dhartmei Exp $
d1436 1
a1436 1
.Cm !
@


1.269
log
@mention that synproxy state takes the same options as keep/modulate state,
add synproxy to BNF. from mpech@@. ok mpech@@, henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.268 2003/08/24 12:47:07 cedric Exp $
d443 3
a445 1
in /etc but can be overridden via this option.
a450 3
.Bd -literal -offset indent
set fingerprints "/etc/pf.os.devel"
.Ed
d452 1
a765 1
.Pp
a1020 1
.Pp
d1152 4
a1155 1
.It Ar from <source> port <source> os <source> to <dest> port <dest>
d1762 2
a1763 3
.Bd -literal -offset indent
"OpenBSD 2.6"
.Ed
d1770 3
a1772 4
scrub option and would be specified like
.Bd -literal -offset indent
"OpenBSD 3.3 no-df"
.Ed
d1780 2
a1781 3
.Bd -literal -offset indent
# pfctl -so
.Ed
d2242 1
a2242 1
# a viral worm.  Alternately we could limit these OSes to 1 connection each.
d2458 2
d2476 1
@


1.268
log
@Tables can now be used in round-robin pools.
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.267 2003/08/22 21:50:34 david Exp $
d1720 3
a1722 2
Both
.Ar keep state
d1724 1
a1724 1
.Ar modulate state
d2298 2
a2299 1
                 ( "keep" | "modulate" ) "state" [ "(" state-opts ")" ] |
@


1.267
log
@pf spelling police
ok dhartmei@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.266 2003/08/22 18:28:14 frantzen Exp $
d123 7
a129 3
Tables cannot be used for things like the redirect address of
translation rules, nor can they be used in the routing options of
filter rules.
@


1.266
log
@- roff indent fix from Max Laier.  thanks!
- fix an example that became wrong when I switched from p0f v1 fingerprints
to p0f v2
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.265 2003/08/22 04:54:13 david Exp $
d565 1
a565 1
.Ar reassemple tcp
@


1.265
log
@spelling
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.264 2003/08/21 19:12:59 frantzen Exp $
d1756 2
a1757 2
.Bd -literal indent
	"OpenBSD 2.6"
d1762 6
a1767 5
In the case of OpenBSD, the only subtype is for a fingerprint on the
loopback interface lo0 since it utilizes a different TCP maximum segment
size and would be specified like
.Bd -literal indent
	"OpenBSD 3.3 lo0"
@


1.264
log
@document passive OS fingerprinting
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.263 2003/07/07 09:15:54 jmc Exp $
d1743 1
a1743 1
Unfortunately these nuaces are easily spoofed by an attacker so the
d1771 1
a1771 1
Once 
d1801 1
a1801 1
a curretly established connection.
@


1.263
log
@fix a macro and remove a whitespace at EOL;
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.262 2003/07/07 08:42:38 henning Exp $
d434 15
d1150 1
a1150 1
.It Ar from <source> port <source> to <dest> port <dest>
d1222 9
a1230 1
The host and port specifications are optional, as in the following examples:
d1238 1
d1740 69
d2237 5
d2282 2
a2283 1
                 [ "require-order" ( "yes" | "no" ) ] )
d2369 1
a2369 1
                 "{" host-list "}" ) [ port ]
d2385 1
d2393 3
@


1.262
log
@clarification in nat pass, pointed out by theo
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.261 2003/07/07 08:38:03 henning Exp $
d652 1
a652 1
.Ar. hfsc
d2032 1
a2032 1
# Translate outgoing packets' source addresses (any protocol). 
@


1.261
log
@I'm pretty sure the formatting cleanup & clarifications here that Joel Knight
did in negotiation with jmc@@ included some dancing with dead chicken ritual

from Joel Knight
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.260 2003/07/04 10:42:52 henning Exp $
d874 3
a876 3
address and port number. In addition, packets that
match a translation rule are not automatically passed
through the packet filter unless the
d878 1
a878 1
modifier is given; translated packets are
@


1.260
log
@nat pass
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.259 2003/06/17 21:48:11 david Exp $
d1981 1
d2032 2
a2033 2
# translate outgoing packets' source addresses (any protocol)
# in this case, any address but the gateway's external address is mapped
d2037 3
a2039 3
# map outgoing packets' source port to an assigned proxy port instead of
# an arbitrary port
# in this case, proxy outgoing isakmp with port 500 on the gateway
d2044 3
a2046 3
# translate outgoing packets' source address (any protocol)
# translate incoming packets' destination address to an internal machine
# (bidirectional)
d2050 2
a2051 2
# translate incoming packets' destination addresses
# as an example, redirect a TCP and UDP port to an internal machine
d2058 2
a2059 2
# translate outgoing ftp control connections to send them to localhost
# for proxying with ftp-proxy(8) running on port 8021
d2061 2
a2062 1

d2068 1
a2068 1

d2070 2
a2071 2
# translate outgoing packets' source addresses using an address pool.  A
# given source address is always translated to the same pool address by
d2076 2
a2077 2
# translate incoming web server connections to a group of web servers on
# the internal network
@


1.259
log
@add adaptive, interval, and frag timeouts to pf.conf and BNF
ok henning@@ dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.258 2003/06/12 10:05:15 henning Exp $
d876 3
a878 1
through the packet filter; translated packets are
d1981 7
d2198 2
a2199 2
nat-rule       = [ "no" ] "nat" [ "on" ifspec ] [ af ] [ protospec ]
                 hosts [ "tag" string ]
d2203 2
a2204 2
binat-rule     = [ "no" ] "binat" [ "on" interface-name ] [ af ]
                 [ "proto" ( proto-name | proto-number ) ]
d2209 2
a2210 2
rdr-rule       = [ "no" ] "rdr" [ "on" ifspec ] [ af ] [ protospec ]
                 hosts [ "tag" string ]
@


1.258
log
@qlimit referenced twice from queueopts, PR 3312
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.257 2003/06/11 23:09:20 henning Exp $
d2297 1
a2297 1
state-opt      = ( "max" number ) | ( timeout seconds )
d2307 3
a2309 3
                 "other.first" | "other.single" | "other.multiple" )
                 seconds
seconds        = number
@


1.257
log
@ref table-rule from line, PR 3311
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.256 2003/06/11 17:03:09 pb Exp $
d2234 1
a2234 2
                 [ "priority" number ] | [ schedulers ] |
                 [ "qlimit" number ]
@


1.256
log
@document that is is unsupported to use return-rst/icmp or synproxy
on bridging firewalls

henning@@ ok, spelling fixes from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.255 2003/06/10 16:59:49 deraadt Exp $
d2164 1
a2164 1
                 trans-anchors | load-anchors )
@


1.255
log
@fix grammer regarding queues; noted by jlouis@@mongers.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.254 2003/06/07 20:31:13 henning Exp $
d1033 5
d1677 7
@


1.254
log
@update BNF to show that tagging is also possible on rdr/nat/binat
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.253 2003/06/07 20:27:56 henning Exp $
d2207 1
a2207 1
                 "queue" queue-list
d2209 1
a2209 1
                 queue-list
@


1.253
log
@second part of the diff from Joel Knight that was sitting in my inbox for
far too long:
better tag documentation.

help and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.251 2003/06/07 20:00:52 henning Exp $
d2178 2
a2179 1
                 hosts [ "->" ( redirhost | "{" redirhost-list "}" )
d2185 1
d2189 2
a2190 1
                 hosts [ "->" ( redirhost | "{" redirhost-list "}" )
@


1.252
log
@update BNF to include "! tagged"
@
text
@d1370 32
a1401 2
A tag will be assigned to packets matching this rule.
Subsequent rules can match on that tag using the
d1403 1
a1403 6
keyword, even on another interface.
The tag is set on every matching rule, not just the last one.
There is one tag per packet, subsequent matches replace it.
.It Ar tagged <string>
This rule applies only to packets that have been tagged with the given
tag.
d2120 24
@


1.251
log
@document "load anchor from file"
mostly from Joel Knight
help and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.250 2003/06/03 12:18:02 henning Exp $
d2125 1
a2125 1
                 "label" string | "tag" string | "tagged" string
@


1.250
log
@make crystal clear that NAT happens before filtering and what that
means for the filter rules.
from Joel Knight again

ok cedric@@, silence everybody else
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.249 2003/06/02 20:05:49 david Exp $
d1825 6
d1886 18
@


1.249
log
@revert to previous BNF formatting; requested by deraadt@@
ok deraadt@@ dhartmei@@
CVSt e---------------------------------------------------------------------
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.248 2003/05/30 20:06:48 henning Exp $
d869 13
a881 1
Translation occurs before filtering.
d946 1
a946 5
.Pp
If no rule matches the packet, the packet is passed to the filter unmodified.
Translation occurs before the filter rules are applied;
therefore rules for redirected packets should specify the address and port
after translation.
@


1.248
log
@the secgtion is called QUEUEING, not QUEUE RULES, so point people to
QUEUEING and not QUEUE RULES...

found by Joel Knight
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.247 2003/05/23 12:06:48 jmc Exp $
d2069 168
a2236 165
line           = ( OPTION | PF-RULE | NAT-RULE | BINAT-RULE | RDR-RULE
                 | ANTISPOOF-RULE | ALTQ-RULE | QUEUE-RULE | ANCHOR-RULE
                 | TRANS-ANCHORS | LOAD-ANCHORS )

option         = set ( [ TIMEOUT ( TIMEOUT | '{' TIMEOUT-LIST '}' ) ] |
                 [ optimization [ default | normal
                 | high-latency | satellite
                 | aggressive | conservative ] ]
                 [ limit LIMIT-LIST ] |
                 [ loginterface ( INTERFACE-NAME | none ) ] |
                 [ block-policy ( drop | return ) ] |
                 [ require-order ( yes | no ) ] )

pf-rule        = ACTION [ ( in | out ) ]
                 [ log | log-all ] [ quick ]
                 [ on IFSPEC ] [ ROUTE ] [ AF ] [ PROTOSPEC ]
                 HOSTS [ FILTEROPT-LIST ]

filteropt-list = FILTEROPT-LIST FILTEROPT | FILTEROPT
filteropt      = USER | GROUP | FLAGS | ICMP-TYPE | ICMP6-TYPE | TOS |
                 ( keep | modulate ) state [ '(' STATE-OPTS ')' ] |
                 fragment | no-df | min-ttl NUMBER | max-mss NUMBER |
                 random-id | reassemble tcp | FRAGMENTATION | allow-opts |
                 label STRING | tag STRING | tagged STRING
		 queue '(' STRING | ( STRING [ [ ',' ] STRING ] ) ')'

nat-rule       = [ no ] nat [ on IFSPEC ] [ AF ] [ PROTOSPEC ]
                 HOSTS [ '->' ( REDIRHOST | '{' REDIRHOST-LIST '}' )
                 [ PORTSPEC ] [ POOLTYPE ] [ static-port ] ]

binat-rule     = [ no ] binat [ on INTERFACE-NAME ] [ AF ]
                 [ proto ( PROTO-NAME | PROTO-NUMBER ) ]
                 from ADDRESS [ '/' MASK-BITS ] to IPSPEC
                 [ '->' ADDRESS [ '/' MASK-BITS ] ]

rdr-rule       = [ no ] rdr [ on IFSPEC ] [ AF ] [ PROTOSPEC ]
                 HOSTS [ '->' ( REDIRHOST | '{' REDIRHOST-LIST '}' )
                 [ PORTSPEC ] [ POOLTYPE ] ]

antispoof-rule = antispoof [ log ] [ quick ]
                 for ( INTERFACE-NAME | '{' INTERFACE-LIST '}' )
                 [ AF ] [ label STRING ]

table-rule     = table '<' STRING '>' [ TABLEOPTS-LIST ]
tableopts-list = TABLEOPTS-LIST TABLEOPTS | TABLEOPTS
tableopts      = persist | const | file STRING | '{' [ TABLEADDR-LIST ] '}'
tableaddr-list = TABLEADDR-LIST [ ',' ] TABLEADDR-SPEC | TABLEADDR-SPEC
tableaddr-spec = [ '!' ] TABLEADDR [ '/' MASK-BITS ]
tableaddr      = HOSTNAME | IPV4-DOTTED-QUAD | IPV6-COLONED-HEX |
                 INTERFACE-NAME | self

altq-rule      = altq on INTERFACE-NAME QUEUEOPTS-LIST
                 queue QUEUE-LIST
queue-rule     = queue STRING [ on INTERFACE-NAME ] QUEUEOPTS-LIST
                 QUEUE-LIST

anchor-rule    = anchor STRING [ ( in | out ) ] [ on IFSPEC ] [ AF ]
                 [ proto ] [ PROTOSPEC ] [ HOSTS ]

trans-anchors  = ( nat-anchor | rdr-anchor | binat-anchor ) STRING
                 [ on IFSPEC ] [ AF ] [ proto ] [ PROTOSPEC ] [ HOSTS ]

load-anchor    = load anchorname:rulesetname from filename

queueopts-list = QUEUEOPTS-LIST QUEUEOPTS | QUEUEOPTS
queueopts      = [ bandwidth BANDWIDTH-SPEC ] |
                 [ qlimit NUMBER ] | [ tbrsize NUMBER ] |
                 [ priority NUMBER ] | [ SCHEDULERS ] |
                 [ qlimit NUMBER ]
schedulers     = ( CBQ-DEF | PRIQ-DEF | HFSC-DEF )
bandwidth-spec = number ( b | Kb | Mb | Gb | '%' )

action         = pass | block [ return ] | scrub
return         = drop | return | return-rst [ '(' ttl NUMBER ')' ]
                 | return-icmp [ '(' ICMPCODE [',' ICMP6CODE ] ')' ]
                 | return-icmp6 [ '(' ICMP6CODE ')' ]
icmpcode       = ( ICMP-CODE-NAME | ICMP-CODE-NUMBER )
icmp6code      = ( ICMP6-CODE-NAME | ICMP6-CODE-NUMBER )

ifspec         = ( [ '!' ] INTERFACE-NAME ) | '{' INTERFACE-LIST '}'
interface-list = [ '!' ] INTERFACE-NAME [ [ ',' ] INTERFACE-LIST ]
route          = fastroute |
                 ( route-to | reply-to | dup-to )
                 ( ROUTEHOST | '{' ROUTEHOST-LIST '}' )
                 [ POOLTYPE ]
af             = inet | inet6

protospec      = proto ( PROTO-NAME | PROTO-NUMBER |
                 '{' PROTO-LIST '}' )
proto-list     = ( PROTO-NAME | PROTO-NUMBER ) [ [ ',' ] PROTO-LIST ]

hosts          = all |
                 from ( any | no-route | self | HOST |
                 '{' HOST-LIST '}' ) [ PORT ]
                 to   ( any | no-route | self | HOST |
                 '{' HOST-LIST '}' ) [ PORT ]

ipspec         = any | HOST | '{' HOST-LIST '}'
host           = [ '!' ] ( ADDRESS [ '/' MASK-BITS ] | '<' STRING '>' )
redirhost      = ADDRESS [ '/' MASK-BITS ]
routehost      = ( INTERFACE-NAME [ ADDRESS [ '/' MASK-BITS ] ] )
address        = ( INTERFACE-NAME | '(' INTERFACE-NAME ')' | HOSTNAME
                 | IPV4-DOTTED-QUAD | IPV6-COLONED-HEX )
host-list      = HOST [ [ ',' ] HOST-LIST ]
redirhost-list = REDIRHOST [ [ ',' ] REDIRHOST-LIST ]
routehost-list = ROUTEHOST [ [ ',' ] ROUTEHOST-LIST ]

port           = port ( UNARY-OP | BINARY-OP | '{' OP-LIST '}' )
portspec       = port ( NUMBER | NAME ) [ ':' ( '*' | NUMBER | NAME ) ]
user           = user ( UNARY-OP | BINARY-OP | '{' OP-LIST '}' )
group          = group ( UNARY-OP | BINARY-OP | '{' OP-LIST '}' )

unary-op       = [ '=' | '!=' | '<' | '<=' | '>' | '>=' ]
                 ( NAME | NUMBER )
binary-op      = NUMBER ( '<>' | '><' | ':' ) NUMBER
op-list        = ( UNARY-OP | BINARY-OP ) [ [ ',' ] OP-LIST ]

flags          = flags [ FLAG-SET ] '/' FLAG-SET
flag-set       = [ F ] [ S ] [ R ] [ P ] [ A ] [ U ] [ E ] [ W ]

icmp-type      = icmp-type ( ICMP-TYPE-CODE | '{' ICMP-LIST '}' )
icmp6-type     = icmp6-type ( ICMP-TYPE-CODE | '{' ICMP-LIST '}')
icmp-type-code = ( ICMP-TYPE-NAME | ICMP-TYPE-NUMBER )
                 [ code ( ICMP-CODE-NAME | ICMP-CODE-NUMBER ) ]
icmp-list      = ICMP-TYPE-CODE [ [ ',' ] ICMP-LIST ]

tos            = tos ( lowdelay | throughput | reliability |
                 [ 0x ] NUMBER )

state-opts     = STATE-OPT [ [ ',' ] STATE-OPTS ]
state-opt      = ( max NUMBER ) | ( timeout SECONDS )

fragmentation  = [ fragment reassemble | fragment crop
                 | fragment drop-ovl ]

timeout-list   = TIMEOUT [ [ ',' ] TIMEOUT-LIST ]
timeout        = ( tcp.first | tcp.opening | tcp.established
                 | tcp.closing | tcp.finwait | tcp.closed
                 | udp.first | udp.single | udp.multiple
                 | icmp.first | icmp.error
                 | other.first | other.single | other.multiple )
                 SECONDS
seconds        = NUMBER

limit-list     = LIMIT-ITEM [ [ ',' ] LIMIT-LIST ]
limit-item     = ( states | frags ) NUMBER

pooltype       = ( bitmask | random
                 | source-hash [ ( hex-key | string-key ) ]
                 | round-robin )

subqueue       = STRING | '{' QUEUE-LIST '}'
queue-list     = STRING [ [ ',' ] STRING ]
cbq-def        = cbq [ '(' CBQ-OPT [ [ ',' ] CBQ-OPT ] ')' ]
priq-def       = priq [ '(' PRIQ-OPT [ [ ',' ] PRIQ-OPT ] ')' ]
hfsc-def       = hfsc [ '(' HFSC-OPT [ [ ',' ] HFSC-OPT ] ')' ]
cbq-opt        = ( default | borrow | red | ecn | rio )
priq-opt       = ( default | red | ecn | rio )
hfsc-opt       = ( default | red | ecn | rio
                 | LINKSHARE-SC | REALTIME-SC | UPPERLIMIT-SC )
linkshare-sc   = linkshare SC-SPEC
realtime-sc    = realtime SC-SPEC
upperlimit-sc  = upperlimit SC-SPEC
sc-spec        = ( BANDWIDTH-SPEC
                 | '(' BANDWIDTH-SPEC NUMBER BANDWIDTH-SPEC ')' )
@


1.247
log
@consistently uppercase abbreviations;
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.246 2003/05/17 07:50:46 henning Exp $
d1353 1
a1353 1
.Sx QUEUE RULES
@


1.246
log
@tweak; 10x jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.245 2003/05/17 07:10:34 david Exp $
d279 1
a279 1
The state after an icmp error came back in response to an icmp packet.
d452 1
a452 1
bit from a matching ip packet.
d477 1
a477 1
Enforces a minimum ttl for matching ip packets.
d479 1
a479 1
Enforces a maximum mss for matching tcp packets.
d1465 1
a1465 1
from modifying the source port on tcp and udp packets.
@


1.245
log
@tweak
ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.244 2003/05/17 06:44:27 david Exp $
d1361 1
a1361 1
.It Ar tag <string> 
d1363 3
a1365 2
This tag can be later used to filter packets with that tag,
even on another interface.
@


1.244
log
@spelling fix
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.243 2003/05/17 06:14:58 henning Exp $
d1610 1
a1610 1
passes packets part of a
d1617 1
a1617 1
to itself complete the handshake with the active endpoint, perform a handshake
@


1.243
log
@tweak
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.242 2003/05/17 05:51:09 david Exp $
d1366 1
a1366 1
There is one tag per packet, susequent matches replace it.
@


1.242
log
@document tags
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.241 2003/05/16 18:38:47 jmc Exp $
d1365 2
d1368 1
a1368 1
This rule applies only to packets that have been tagged with the named
@


1.241
log
@tweak;
ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.240 2003/05/16 17:15:17 dhartmei Exp $
d1361 7
d2089 1
a2089 1
                 label STRING |
@


1.240
log
@TCP SYN proxy. Instead of 'keep state' or 'modulate state', one can use
'synproxy state' for TCP connections. pf will complete the TCP handshake
with the active endpoint before passing any packets to the passive end-
point, preventing spoofed SYN floods from reaching the passive endpoint.

No additional memory requirements, no cookies needed, random initial
sequence numbers, uses the existing sequence number modulators to translate
packets after the handshakes.

ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.239 2003/05/16 09:08:58 jmc Exp $
d1628 1
a1628 2
.Ar keep state
.
a1633 1
.Pp
@


1.239
log
@removed unnecessary macros:
- don't need .Pp before/after .Sh
- don't need .Ns before punctuation

ok krw@@ millert@@ david@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.238 2003/05/15 08:38:47 jmc Exp $
d1598 38
@


1.238
log
@tweak;
ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.237 2003/05/15 00:03:06 frantzen Exp $
a41 1
.Pp
d56 1
a56 1
.It Cm Traffic Normalization Li (e.g. Em scrub Ns )
a81 1
.Pp
d93 1
a93 1
.Ar out Ns ).
a102 1
.Pp
a434 1
.Pp
a774 1
.Pp
d792 1
a792 1
.Ar ( m1 , d , m2 ) . 
d835 1
a835 1
.Xr sftp 1 Ns .
a859 1
.Pp
a968 1
.Pp
d978 1
a978 1
.Xr ip6 4 Ns )
d983 1
a983 1
.Xr udp 4 Ns )
d1205 1
a1205 1
.Ar user Ns ,
d1400 1
a1400 1
.Ar route-to.
a1402 1
.Pp
a1456 1
.Pp
a1663 1
.Pp
@


1.237
log
@document scrub opt "reassemble tcp"
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.236 2003/05/12 04:22:04 dhartmei Exp $
d543 1
a543 1
the other endpoints timestamp back to them.
@


1.236
log
@Use an example that acutally makes some sense.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.235 2003/05/12 01:25:32 dhartmei Exp $
a481 8
For statefully tracked TCP connections,
.Ar scrub
will automatically (without the
.Ar min-ttl
modifier) keep the maximum TTL of each side of the connection and apply
it to all future packets.
Inhibits an attacker from sending low TTL packets through the firewall that
change state but expires before being received by the end host.
d526 33
d2055 3
a2057 2
                 random-id | FRAGMENTATION | allow-opts | label STRING |
                 queue '(' STRING | ( STRING [ [ ',' ] STRING ] ) ')'
@


1.235
log
@Adaptive timeout value scaling. Allows to reduce timeout values as the
number of state table entries grows, so entries time out faster before
the table fills up. Works both globally and per-rule. ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.234 2003/05/11 20:46:11 frantzen Exp $
d322 2
a323 2
With 10500 state table entries, the timeout values are scaled to 25%
(tcp.first 30, tcp.established 21600).
@


1.234
log
@document the dynamic min-ttl TCP scrub behavior
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.233 2003/05/10 23:27:07 dhartmei Exp $
d293 21
d316 4
a319 2
set timeout tcp.established 3600
set timeout { tcp.opening 30, tcp.closing 900 }
d321 3
@


1.233
log
@'return' now causes an ICMP unreachable for non-TCP/UDP/ICMP protocols.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.232 2003/05/10 22:38:04 pb Exp $
d456 8
@


1.232
log
@uppercase all non-literals in BNF.. might make some stuff more clear ;)

commitski henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.231 2003/05/10 16:46:53 pb Exp $
d971 1
a971 2
packets, an ICMP UNREACHABLE for UDP packets,
and silently drops all other packets.
@


1.231
log
@quote non-alphabetic literals

'over the desk' oks..
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.230 2003/05/10 00:45:43 henning Exp $
d1975 3
a1977 3
line           = ( option | pf-rule | nat-rule | binat-rule | rdr-rule
                 | antispoof-rule | altq-rule | queue-rule | anchor-rule
                 | trans-anchors | load-anchors )
d1979 1
a1979 1
option         = set ( [ timeout ( timeout | '{' timeout-list '}' ) ] |
d1983 2
a1984 2
                 [ limit limit-list ] |
                 [ loginterface ( interface-name | none ) ] |
d1988 1
a1988 1
pf-rule        = action [ ( in | out ) ]
d1990 2
a1991 2
                 [ on ifspec ] [ route ] [ af ] [ protospec ]
                 hosts [ filteropt-list ]
d1993 19
a2011 19
filteropt-list = filteropt-list filteropt | filteropt
filteropt      = user | group | flags | icmp-type | icmp6-type | tos |
                 ( keep | modulate ) state [ '(' state-opts ')' ] |
                 fragment | no-df | min-ttl number | max-mss number |
                 random-id | fragmentation | allow-opts | label string |
                 queue '(' string | ( string [ [ ',' ] string ] ) ')'

nat-rule       = [ no ] nat [ on ifspec ] [ af ] [ protospec ]
                 hosts [ '->' ( redirhost | '{' redirhost-list '}' )
                 [ portspec ] [ pooltype ] [ static-port ] ]

binat-rule     = [ no ] binat [ on interface-name ] [ af ]
                 [ proto ( proto-name | proto-number ) ]
                 from address [ '/' mask-bits ] to ipspec
                 [ '->' address [ '/' mask-bits ] ]

rdr-rule       = [ no ] rdr [ on ifspec ] [ af ] [ protospec ]
                 hosts [ '->' ( redirhost | '{' redirhost-list '}' )
                 [ portspec ] [ pooltype ] ]
d2014 2
a2015 2
                 for ( interface-name | '{' interface-list '}' )
                 [ af ] [ label ]
d2017 12
a2028 12
table-rule     = table '<' tablename '>' [ tableopts-list ]
tableopts-list = tableopts-list tableopts | tableopts
tableopts      = persist | const | file "filename" | '{' [ tableaddr-list ] '}'
tableaddr-list = tableaddr-list [ ',' ] tableaddr-spec | tableaddr-spec
tableaddr-spec = [ '!' ] tableaddr [ '/' mask-bits ]
tableaddr      = hostname | ipv4-dotted-quad | ipv6-coloned-hex |
                 interface-name | self

altq-rule      = altq on interface-name queueopts-list
                 queue queue-list
queue-rule     = queue string [ on interface-name ] queueopts-list
                 queue-list
d2030 2
a2031 2
anchor-rule    = anchor string [ ( in | out ) ] [ on ifspec ] [ af ]
                 [ proto ] [ protospec ] [ hosts ]
d2033 2
a2034 2
trans-anchors  = ( nat-anchor | rdr-anchor | binat-anchor ) string
                 [ on ifspec ] [ af ] [ proto ] [ protospec ] [ hosts ]
d2038 6
a2043 6
queueopts-list = queueopts-list queueopts | queueopts
queueopts      = [ bandwidth bandwidth-spec ] |
                 [ qlimit number ] | [ tbrsize number ] |
                 [ priority number ] | [ schedulers ] |
                 [ qlimit number ]
schedulers     = ( cbq-def | priq-def | hfsc-def )
d2047 5
a2051 5
return         = drop | return | return-rst [ '(' ttl number ')' ]
                 | return-icmp [ '(' icmpcode [',' icmp6code ] ')' ]
                 | return-icmp6 [ '(' icmp6code ')' ]
icmpcode       = ( icmp-code-name | icmp-code-number )
icmp6code      = ( icmp6-code-name | icmp6-code-number )
d2053 2
a2054 2
ifspec         = ( [ '!' ] interface-name ) | '{' interface-list '}'
interface-list = [ '!' ] interface-name [ [ ',' ] interface-list ]
d2057 2
a2058 2
                 ( routehost | '{' routehost-list '}' )
                 [ pooltype ]
d2061 3
a2063 3
protospec      = proto ( proto-name | proto-number |
                 '{' proto-list '}' )
proto-list     = ( proto-name | proto-number ) [ [ ',' ] proto-list ]
d2066 19
a2084 19
                 from ( any | no-route | self | host |
                 '{' host-list '}' ) [ port ]
                 to   ( any | no-route | self | host |
                 '{' host-list '}' ) [ port ]

ipspec         = any | host | '{' host-list '}'
host           = [ '!' ] ( address [ '/' mask-bits ] | '<' table '>' )
redirhost      = address [ '/' mask-bits ]
routehost      = ( interface-name [ address [ '/' mask-bits ] ] )
address        = ( interface-name | '(' interface-name ')' | host-name
                 | ipv4-dotted-quad | ipv6-coloned-hex )
host-list      = host [ [ ',' ] host-list ]
redirhost-list = redirhost [ [ ',' ] redirhost-list ]
routehost-list = routehost [ [ ',' ] routehost-list ]

port           = port ( unary-op | binary-op | '{' op-list '}' )
portspec       = port ( number | name ) [ ':' ( '*' | number | name ) ]
user           = user ( unary-op | binary-op | '{' op-list '}' )
group          = group ( unary-op | binary-op | { op-list } )
d2087 3
a2089 3
                 ( name | number )
binary-op      = number ( '<>' | '><' | ':' ) number
op-list        = ( unary-op | binary-op ) [ [ ',' ] op-list ]
d2091 1
a2091 1
flags          = flags [ flag-set ] '/' flag-set
d2094 5
a2098 5
icmp-type      = icmp-type ( icmp-type-code | { icmp-list } )
icmp6-type     = icmp6-type ( icmp-type-code | { icmp-list } )
icmp-type-code = ( icmp-type-name | icmp-type-number )
                 [ code ( icmp-code-name | icmp-code-number ) ]
icmp-list      = icmp-type-code [ [ ',' ] icmp-list ]
d2101 1
a2101 1
                 [ 0x ] number )
d2103 2
a2104 2
state-opts     = state-opt [ [ ',' ] state-opts ]
state-opt      = ( max number ) | ( timeout seconds )
d2109 1
a2109 1
timeout-list   = timeout [ [ ',' ] timeout-list ]
d2115 2
a2116 2
                 seconds
seconds        = number
d2118 2
a2119 2
limit-list     = limit-item [ [ ',' ] limit-list ]
limit-item     = ( states | frags ) number
d2125 5
a2129 5
subqueue       = string | '{' queue-list '}'
queue-list     = string [ [ ',' ] string ]
cbq-def        = cbq [ '(' cbq-opt [ [ ',' ] cbq-opt ] ')' ]
priq-def       = priq [ '(' priq-opt [ [ ',' ] priq-opt ] ')' ]
hfsc-def       = hfsc [ '(' hfsc-opt [ [ ',' ] hfsc-opt ] ')' ]
d2133 6
a2138 6
                 | linkshare-sc | realtime-sc | upperlimit-sc )
linkshare-sc   = linkshare sc-spec
realtime-sc    = realtime sc-spec
upperlimit-sc  = upperlimit sc-spec
sc-spec        = ( bandwidth-spec
                 | '(' bandwidth-spec number bandwidth-spec ')' )
@


1.230
log
@BNF for load anchor stuff
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.229 2003/05/06 15:52:27 henning Exp $
d1979 1
a1979 1
option         = set ( [ timeout ( timeout | { timeout-list } ) ] |
d1995 1
a1995 1
                 ( keep | modulate ) state [ ( state-opts ) ] |
d1998 1
a1998 1
                 queue ( string | ( string [ [ , ] string ] ) )
d2001 2
a2002 2
                 hosts [ -> ( redirhost | { redirhost-list } )
                 [ portspec ] ] [ pooltype ] [ static-port ]
d2006 2
a2007 2
                 from address [ / mask-bits ] to ipspec
                 [ -> address [ / mask-bits ] ]
d2010 2
a2011 2
                 hosts [ -> ( redirhost | { redirhost-list } )
                 [ portspec ] ] [ pooltype ]
d2014 1
a2014 1
                 for ( interface-name | { interface-list } )
d2017 1
a2017 1
table-rule     = table < tablename > [ tableopts-list ]
d2019 3
a2021 3
tableopts      = persist | const | file "filename" | { [ tableaddr-list ] }
tableaddr-list = tableaddr-list [ , ] tableaddr-spec | tableaddr-spec
tableaddr-spec = [ ! ] tableaddr [ / mask-bits ]
d2044 1
a2044 1
bandwidth-spec = number ( b | Kb | Mb | Gb | % )
d2047 3
a2049 3
return         = drop | return | return-rst [ ( ttl number ) ]
                 | return-icmp [ ( icmpcode [, icmp6code ] ) ]
                 | return-icmp6 [ ( icmp6code ) ]
d2053 2
a2054 2
ifspec         = ( [ ! ] interface-name ) | { interface-list }
interface-list = [ ! ] interface-name [ [ , ] interface-list ]
d2057 1
a2057 1
                 ( routehost | { routehost-list } )
d2062 2
a2063 2
                 { proto-list } )
proto-list     = ( proto-name | proto-number ) [ [ , ] proto-list ]
d2067 1
a2067 1
                 { host-list } ) [ port ]
d2069 1
a2069 1
                 { host-list } ) [ port ]
d2071 5
a2075 5
ipspec         = any | host | { host-list }
host           = [ ! ] ( address [ / mask-bits ] | < table > )
redirhost      = address [ / mask-bits ]
routehost      = ( interface-name [ address [ / mask-bits ] ] )
address        = ( interface-name | ( interface-name ) | host-name
d2077 7
a2083 7
host-list      = host [ [ , ] host-list ]
redirhost-list = redirhost [ [,] redirhost-list ]
routehost-list = routehost [ [,] routehost-list ]

port           = port ( unary-op | binary-op | { op-list } )
portspec       = port ( number | name ) [ : ( * | number | name ) ]
user           = user ( unary-op | binary-op | { op-list } )
d2086 1
a2086 1
unary-op       = [ = | != | < | <= | > | >= ]
d2088 2
a2089 2
binary-op      = number ( <> | >< | : ) number
op-list        = ( unary-op | binary-op ) [ [ , ] op-list ]
d2091 1
a2091 1
flags          = flags [ flag-set ] / flag-set
d2098 1
a2098 1
icmp-list      = icmp-type-code [ [ , ] icmp-list ]
d2103 1
a2103 1
state-opts     = state-opt [ [ , ] state-opts ]
d2109 1
a2109 1
timeout-list   = timeout [ [ , ] timeout-list ]
d2118 1
a2118 1
limit-list     = limit-item [ [ , ] limit-list ]
d2125 5
a2129 5
subqueue       = string | { queue-list }
queue-list     = string [ [ , ] string ]
cbq-def        = cbq [ ( cbq-opt [ [ , ] cbq-opt ] ) ]
priq-def       = priq [ ( priq-opt [ [ , ] priq-opt ] ) ]
hfsc-def       = hfsc [ ( hfsc-opt [ [ , ] hfsc-opt ] ) ]
d2138 1
a2138 1
                 | ( bandwidth-spec number bandwidth-spec ) )
@


1.229
log
@fix formatting in the BNF
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.228 2003/05/01 16:21:02 henning Exp $
d1977 1
a1977 1
                 | trans-anchors )
d2035 2
@


1.228
log
@BNF update for label on antispoof
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.227 2003/04/29 12:44:14 henning Exp $
d1997 2
a1998 2
                 random-id | fragmentation | allow-opts |
                 label string | queue ( string | ( string [ [ , ] string ] ) )
d2027 2
a2028 1
queue-rule     = queue string [ on interface-name ] queueopts-list queue-list
d2030 2
a2031 2
anchor-rule    = anchor string [ ( in | out ) ] [ on ifspec ] [ af ] [ proto ]
                 [ protospec ] [ hosts ]
@


1.227
log
@document hfsc
mostly from Berk D. Demir <bdd at ieee.org> with tweaks by me
some nits and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.226 2003/04/29 10:36:34 dhartmei Exp $
d2014 2
a2015 1
                 for ( interface-name | { interface-list } ) [ af ]
@


1.226
log
@port 8081 -> 8021 for ftp-proxy in the examples, so it matches pf.conf
and inetd.conf defaults
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.225 2003/04/25 19:18:25 jmc Exp $
a544 2
.It Ar hfsc
Hierarchical Fair Service Curve.
d562 16
a594 2
.Ar hfsc
for the Hierarchical Fair Service Curve scheduler, and
d596 3
a598 1
for Priority Queueing.
d719 32
@


1.225
log
@added two missing .El macros;

ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.224 2003/04/19 21:58:06 henning Exp $
d1810 1
a1810 1
listening for outbound ftp sessions captured to port 8081.
d1840 2
a1841 2
# for proxying with ftp-proxy(8) running on port 8081
rdr on fxp0 proto tcp from any to any port 21 -> 127.0.0.1 port 8081
@


1.224
log
@BNF update for hfsc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.223 2003/04/19 21:45:16 henning Exp $
d1264 1
a1264 1
.Pp
d1527 1
@


1.223
log
@mention hfsc.
this needs more work.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.222 2003/04/05 21:46:50 henning Exp $
d1988 1
a1988 1
queueopts      = [ bandwidth number ( b | Kb | Mb | Gb | % ) ] |
d1992 2
a1993 1
schedulers     = ( cbq-def | priq-def )
d2078 1
d2081 7
@


1.222
log
@document queue .. on $interface

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.221 2003/04/01 12:29:28 pb Exp $
d525 1
a525 1
There are two
d545 2
d580 3
a582 1
for Class Based Queueing and
d632 2
a633 2
directive (e.g. mail), or, for the
.Ar cbq
d655 3
a657 1
.Ar cbq ,
d661 1
a661 1
The default for both is 1.
d665 2
d707 3
a709 1
.Ar cbq ,
@


1.221
log
@'flags X' is not valid (BNF lied)

henning@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.220 2003/04/01 12:23:44 pb Exp $
d636 3
d1969 1
a1969 1
queue-rule     = queue string queueopts-list queue-list
@


1.220
log
@anchors in BNF
(from loki at niteshade . net)
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.219 2003/03/22 00:10:17 david Exp $
d2026 1
a2026 1
flags          = flags ( flag-set / flag-set | / flag-set )
@


1.219
log
@Cleanup for release:

remove some unneeded escaping of spaces "\ "
indent by 6 spaces in a few places to match the rest of the file
fix a few lines that were improperly wrapped or not wrapped to the next line
update sample rule expansion to match current state of pfctl output
fix spacing in a few places
fix a small typo found by jmc@@
updated a few example rules so that they parse with current pfctl

ok henning@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.218 2003/03/20 01:27:17 david Exp $
d1916 2
a1917 1
                 | antispoof-rule | altq-rule | queue-rule )
d1968 6
d1975 1
a1975 1
queueopts      = [ bandwidth number ( b | Kb | Mb | Gb | %) ] |
@


1.218
log
@replace some .Pp inside .Bd -literal block with empty line
remove an uneeded .Pp
kill whitespace at eol

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.217 2003/03/13 19:26:27 henning Exp $
d103 1
a103 1
pass in \ on $ext_if proto tcp from any to any port 25 keep state
d730 2
a731 2
queue \ developers bandwidth 75% cbq(borrow)
queue \ employees bandwidth 15%
d734 2
a735 2
queue \ ssh_interactive priority 7
queue \ ssh_bulk priority 0
d1088 1
a1088 1
pass in proto tcp from 10.0.0.0/8 port >1024 \e
d1146 2
a1147 2
pass \ out proto { tcp, udp } all \e
   user { < 1000, dhartmei } keep state
d1221 1
a1221 2
      port >1023
label \&"$dstaddr:$dstport\&"
d1226 4
a1229 4
pass in proto tcp from any to 1.2.3.4 \e
      port >1023 label \&"1.2.3.4:>1023\&"
pass in proto tcp from any to 1.2.3.5 \e
      port >1023 label \&"1.2.3.5:>1023\&"
d1386 1
a1386 1
pass  in proto tcp from any to any port 25 flags S/SA keep state
d1434 1
a1434 1
.Ar nat, binat No and Ar rdr
d1456 3
a1458 2
block all pass out proto tcp from any to any modulate state
pass in proto tcp from any to any port 25 flags S/SA modulate state
d1531 2
a1532 2
block in on ! lo0 inet from 127.0.0.1/8 to any
block in on ! lo0 inet6 from ::1 to any
d1546 2
a1547 2
block in on ! wi0 inet from 10.0.0.1/24 to any
block in inet from 10.0.0.1 to any
d1711 1
a1711 1
# echo \&"block in quick from 1.2.3.4 to any\&" \&|
d1743 1
a1743 1
# echo \&"block in quick from 1.2.3.4 to any" \&|
d1786 3
a1788 3
no rdr on fxp0 from any to $server port 80
no rdr on fxp0 from $sysadmins to any port 80
rdr on fxp0 from any to any port 80 -> 127.0.0.1 port 80
d1968 1
a1968 1
queueopts      = [ bandwidth number ( b | Kb | Mb | Gb |  %) ] |
@


1.217
log
@and bandwidth is bits per second
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.216 2003/03/13 19:21:05 deraadt Exp $
d124 1
a124 1
.Ar rdr 
a227 1
.Pp
d582 1
a582 1
The maximum bitrate for all queues on an 
d589 5
a593 5
.Ar b , 
.Ar Kb , 
.Ar Mb , 
and 
.Ar Gb 
d596 2
a597 2
The value must not exceed the interface bandwidth.  
If 
d605 1
a605 1
If not specified, heuristics based on the 
d652 2
a653 2
The default for both is 1. 
.Ar Priq 
d736 1
a736 1
.Pp
d1004 1
a1004 1
and 
d1048 1
a1048 1
For example, port 80 can be specified as 
d1236 1
a1236 1
.It Ar queue <queue> | ( <queue> , <queue> ) 
d1594 1
a1594 1
.Pp 
d1802 1
a1802 1
.Pp
d1809 1
a1809 1
.Pp
d1815 1
a1815 1
.Pp
d1823 1
a1823 1
.Pp
d1828 1
a1828 1
.Pp
d1834 1
a1834 1
.Pp
d1840 1
a1840 1
.Pp
d1852 1
a1852 1
.Pp
d1855 1
a1855 1
.Pp
d1858 1
a1858 1
.Pp
d1861 1
a1861 1
.Pp
d1864 1
a1864 1
.Pp
d1869 1
a1869 1
.Pp
d1872 1
a1872 1
.Pp
d1878 1
a1878 1
.Pp
d1880 1
a1880 1
.Pp
d1887 1
a1887 1
.Pp
d1889 1
a1889 1
.Pp
d1892 1
a1892 1
.Pp
d1895 1
a1895 1
.Pp
d1897 1
a1897 1
.Pp
d1900 1
a1900 1
.Pp
d1904 1
a1904 1
.Pp
d1970 1
a1970 1
                 [ priority number ] | [ schedulers ] | 
@


1.216
log
@bits not bytes; fk@@spoiled.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.215 2003/03/12 00:49:49 henning Exp $
d596 1
a596 1
gigabits, respectively.
@


1.215
log
@fair amount of clarifications, extensions, and corrections
from joel knight <enabled at myrealbox.com>, some tweaks by me, some by jmc@@

ok dhartmei@@ mcbride@@ cedric@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.214 2003/03/10 14:15:02 jmc Exp $
d595 2
a596 2
are used to represent bytes, kilobytes, megabytes, and
gigabytes, respectively.
@


1.214
log
@small changes to mike's random-id section;
ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.213 2003/03/10 09:40:47 deraadt Exp $
d188 8
a195 4
creates a table called private, and then blocks all traffic coming from
RFC 1918 style private network blocks.
Later, addresses may be added to the rule with the following commands, so that
traffic from these hosts can be dropped:
a199 5
When no active rules which refer to the badhosts table exist (such as when the
rules are flushed), the
.Ar persist
keyword ensures that the table will not be lost.
.Pp
d207 8
a214 2
In addition to being specified by IP address, hosts may also be specified
by their hostname.
d557 1
a557 1
assigned, ranging from 0 to 7.
d569 30
a598 4
The
.Ar scheduler
type is required.
The maximum rate for all queues on this interface is specified using the
d600 11
a610 14
directive; if not specified the interface's bandwidth is used.
The value must not exceed the interface bandwidth and can be specified
in absolute and percentage values, where the latter is relative to the
interface bandwidth.
The maximum number of packets in this queue is specified using the
.Ar qlimit
directive.
Token bucket regulator size may be adjusted using the
.Ar tbrsize
directive.
If not given, heuristics based on the interface bandwidth are used.
All sub-queues for this interface have to be listed after the
.Ar queue
directive.
d614 1
a614 1
.Ar cbq .
d627 1
a627 1
must match a listed rule in the
d635 4
a638 3
The maximum bitrate to be processed by this queue is established using the
.Ar bandwidth
keyword.
d641 3
a643 2
and can be specified as an absolute value or a percentage of the
parent's bandwidth.
d645 18
a662 9
does not support a bandwidth specification.
Between queues a
.Ar priority
level can also be set.
The range is 0..7 with a default of 1.
Queues with a higher priority level are preferred in the case of overload.
The maximum number of packets in a queue can be limited using the
.Ar qlimit
keyword.
d710 1
a710 1
.Em tos
d753 2
a754 1
such a rule.
d855 4
d865 1
a865 1
packets based on attributes of their layer 2 (see
d869 1
a869 1
and layer 3 (see
d930 4
d1829 18
@


1.213
log
@use Pa for paths more
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.212 2003/03/10 09:33:51 deraadt Exp $
d429 2
a430 1
bit set. This is particularly true with NFS.
d440 1
a440 1
packets that all contain a zero IP identification field.
d445 1
a445 1
Using the below mentioned
d447 1
a447 1
modifier is recommended in combination with the
d449 1
a449 1
modifier to insure unique IP identifiers.
@


1.212
log
@few minor tweaks
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.211 2003/03/10 09:27:47 jmc Exp $
d1996 1
a1996 1
.It /etc/hosts
d1998 1
a1998 1
.It /etc/pf.conf
d2000 1
a2000 1
.It /etc/protocols
d2002 1
a2002 1
.It /etc/services
d2004 1
a2004 1
.It /usr/share/pf
@


1.211
log
@removal of .Ic for examples.
this was messing the postscript output.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.210 2003/03/09 22:02:45 frantzen Exp $
a98 1
.Pp
d143 1
a143 1
.It Ar pf.conf
d156 1
a156 1
.Ar { } ,
a289 1
.br
d329 1
a367 1
.Pp
a388 1
.Pp
a686 1
.Pp
a1169 1
.Pp
a1199 1
.Pp
a1542 1
.Pp
a1647 1
.Pp
a1661 1
.Pp
a1781 1
.Pp
@


1.210
log
@- document that scrub 'no-df' is sometimes necessary for "certain" OS's NFS
- suggest 'random-id' with 'no-df' since "certain" OSes set ip->ip_id to zero
ok deraadt@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.209 2003/03/06 04:03:40 david Exp $
d101 4
a104 8
.Ic ext_if = \&"kue0\&"
.Ic all_ifs = \&"{\&" $ext_if lo0 \&"}\&"
.Xo Ic pass out on $ext_if from any\ 
.Ic to any keep state
.Xc
.Xo Ic pass in \ on $ext_if proto tcp\ 
.Ic from any to any port 25 keep state
.Xc
d184 3
a186 5
.Ic table <private> const {  10/8, 172.16/12, 192.168/16 }
.Ic table <badhosts> persist
.Xo Ic block on fxp0 from { <private>, <badhosts> }\ 
.Ic to any
.Xc
d194 1
a194 3
.Xo Ic # pfctl -t badhosts -Tadd\ 
.Ic 204.92.77.111
.Xc
d205 2
a206 4
.Ic table <spam> persist file \&"/etc/spammers\&" file \&"/etc/openrelays\&"
.Xo Ic block on fxp0 from <spam>\ 
.Ic to any
.Xc
d293 2
a294 4
.Ic set timeout tcp.established 3600
.Xo Ic set timeout { tcp.opening 30,\ 
.Ic tcp.closing 900 }
.Xc
d301 1
a301 1
.Ic # pfctl -s info
d308 1
a308 1
.Ic set loginterface dc0
d313 1
a313 1
.Ic set loginterface none
d324 1
a324 1
.Ic set limit states 20000
d332 1
a332 1
.Ic set limit frags 20000
d342 1
a342 3
.Xo Ic set limit { states 20000,\ 
.Ic frags 20000 }
.Xc
d371 1
a371 3
.Xo Ic set optimization\ 
.Ic aggressive
.Xc
d393 1
a393 3
.Xo Ic set block-policy\ 
.Ic return
.Xc
a394 1
.Pp
d432 1
a432 1
bit set.  This is particularly true with NFS.
d502 1
a502 3
.Xo Ic scrub in on $ext_if all\ 
.Ic fragment reassemble
.Xc
a503 1
.Pp
d591 1
a591 5
.Xo Ic altq on dc0 cbq bandwidth 5Mb\ 
.Xo Ic queue { std, http, mail,\ 
.Ic ssh }
.Xc
.Xc
d692 19
a710 50
.Xo Ic queue std bandwidth\ 
.Ic 10% cbq(default)
.Xc
.Xo Ic queue http bandwidth 60%\ 
.Ic priority 2 cbq(borrow red) \e
.Xc
.Xo Ic \  \  { employees,\ 
.Ic developers }
.Xc
.Xo Ic queue \ developers bandwidth\ 
.Ic 75% cbq(borrow)
.Xc
.Xo Ic queue \ employees\ 
.Ic bandwidth 15%
.Xc
.Xo Ic queue mail bandwidth 10%\ 
.Ic priority 0 cbq(borrow ecn)
.Xc
.Xo Ic queue ssh bandwidth 20%\ 
.Ic cbq(borrow) { ssh_interactive,\ 
.Ic ssh_bulk }
.Xc
.Xo Ic queue \ ssh_interactive\ 
.Ic priority 7
.Xc
.Xo Ic queue \ ssh_bulk\ 
.Ic priority 0
.Xc
.Pp
.Xo Ic block return out on\ 
.Ic dc0 inet all queue std
.Xc
.Xo Ic pass out on dc0 inet proto tcp from\ 
.Ic $developerhosts to any port 80 \e
.Xc
.Ic \  \  keep state queue developers
.Xo Ic pass out on dc0 inet proto tcp from\ 
.Ic $employeehosts to any port 80 \e
.Xc
.Ic \  \  keep state queue employees
.Xo Ic pass out on dc0 inet proto tcp from\ 
.Ic any to any port 22 \e
.Xc
.Ic \  \  keep state queue(ssh_bulk, ssh_interactive)
.Xo Ic pass out on dc0 inet proto tcp from\ 
.Ic any to any port 25 \e
.Xc
.Xo Ic \  \  keep state\ 
.Ic queue mail
.Xc
d747 3
a749 10
.Xo Ic 10.0.0.0    - 10.255.255.255\ 
.Ic (all of net 10, i.e.,\ 
.Ic 10/8)
.Xc
.Xo Ic 172.16.0.0  - 172.31.255.255\ 
.Ic (i.e., 172.16/12)
.Xc
.Xo Ic 192.168.0.0 - 192.168.255.255\ 
.Ic (i.e., 192.168/16)
.Xc
d756 1
a756 1
.Ic rdr ... port 2000:2999 -> ... port 4000
d758 1
a758 1
.Ic rdr ... port 2000:2999 -> ... port 4000:*
d807 1
a807 3
.Xo Ic rdr on ne3 inet proto tcp\ 
.Ic to port 8025 -> 127.0.0.1 port 25
.Xc
d857 1
a857 1
.It Ar  drop
d885 1
a885 3
.Xo Ic block\ 
.Ic all
.Xc
d933 1
a933 1
.Ar  modulate state
d1013 8
a1020 24
.Xo Cm = Li\ 
.Cm \  (equal)
.Xc
.Xo Cm != Li\ 
.Cm \ (unequal)
.Xc
.Xo Cm < Li\ 
.Cm \  (less than)
.Xc
.Xo Cm <= Li\ 
.Cm \ (less than or equal)
.Xc
.Xo Cm > Li\ 
.Cm \  (greater than)
.Xc
.Xo Cm >= Li\ 
.Cm \ (greater than or equal)
.Xc
.Xo Cm >< Li\ 
.Cm \ (range)
.Xc
.Xo Cm <> Li\ 
.Cm \ (except range)
.Xc
d1023 1
a1023 3
.Cm ><
and
.Cm <>
d1040 6
a1045 18
.Xo Ic pass in\ 
.Ic all
.Xc
.Xo Ic pass in from any\ 
.Ic to any
.Xc
.Xo Ic pass in proto tcp from\ 
.Ic any port <= 1024 to any
.Xc
.Xo Ic pass in proto tcp from\ 
.Ic any to any port 25
.Xc
.Xo Ic pass in proto tcp from\ 
.Ic 10.0.0.0/8 port >1024 \e
.Xc
.Xo Ic \  \  to ! \ 
.Ic 10.1.2.3 port != ssh
.Xc
d1101 3
a1103 9
.Xo Ic block out proto\ 
.Ic { tcp, udp } all
.Xc
.Xo Ic pass \ out proto\ 
.Ic { tcp, udp } all \e
.Xc
.Xo Ic \  user { < 1000,\ 
.Ic dhartmei } keep state
.Xc
d1151 1
a1151 1
.Ic pfctl -s labels
d1176 4
a1179 9
.Xo Ic ips = \&"{ 1.2.3.4,\ 
.Ic 1.2.3.5 }\&"
.Xc
.Xo Ic pass in proto tcp from\ 
.Ic any to $ips \e
.Xc
.Xo Ic \  \  port >1023\ 
.Ic label \&"$dstaddr:$dstport\&"
.Xc
d1184 4
a1187 12
.Xo Ic pass in proto tcp from\ 
.Ic any to 1.2.3.4 \e
.Xc
.Xo Ic \  \  port >1023\ 
.Ic label \&"1.2.3.4:>1023\&"
.Xc
.Xo Ic pass in proto tcp\ 
.Ic from any to 1.2.3.5 \e
.Xc
.Xo Ic \  \  port >1023\ 
.Ic label \&"1.2.3.5:>1023\&"
.Xc
d1207 2
a1208 6
.Xo Ic pass in proto tcp\ 
.Ic to port 25 queue mail
.Xc
.Xo Ic pass in proto tcp to\ 
.Ic port 22 queue(ssh_bulk, ssh_prio)
.Xc
d1343 3
a1345 12
.Xo Ic block\ 
.Ic all
.Xc
.Xo Ic pass out proto tcp\ 
.Ic from any to any\ 
.Ic flags S/SA keep state
.Xc
.Xo Ic pass in proto tcp \ 
.Ic from any to any\ 
.Ic port 25 flags\ 
.Ic S/SA keep state
.Xc
d1385 1
a1385 4
.Xo Ic pass out inet proto\ 
.Ic icmp all icmp-type echoreq\ 
.Ic keep state
.Xc
d1399 1
a1399 1
.Ic very
d1415 2
a1416 7
.Ic block all
.Xo Ic pass out proto tcp from any to any\ 
.Ic modulate state
.Xc
.Xo Ic pass in  proto tcp from any to any\ 
.Ic port 25 flags S/SA modulate state
.Xc
d1468 3
a1470 9
.Xo Ic pass in proto tcp\ 
.Ic from any to any \e
.Xc
.Xo Ic \  \  port www flags\ 
.Ic S/SA keep state \e
.Xc
.Xo Ic \  \  (max 100,\ 
.Ic tcp.established 60, tcp.closing 5)
.Xc
d1484 1
a1484 3
.Xo Ic antispoof\ 
.Ic for lo0
.Xc
d1489 2
a1490 8
.Xo Ic block in on ! lo0\ 
.Ic inet from 127.0.0.1/8\ 
.Ic to any
.Xc
.Xo Ic block in on ! lo0\ 
.Ic inet6 from ::1\ 
.Ic to any
.Xc
d1499 1
a1499 3
.Xo Ic antispoof for\ 
.Ic wi0 inet
.Xc
d1504 2
a1505 7
.Xo Ic block in on ! wi0\ 
.Ic inet from 10.0.0.1/24\ 
.Ic to any
.Xc
.Xo Ic block in inet\ 
.Ic from 10.0.0.1 to any
.Xc
d1551 1
a1551 3
.Xo Ic pass in proto tcp from any to any\ 
.Ic port 80
.Xc
d1657 6
a1662 18
.Xo Ic ext_if =\ 
.Ic \&"kue0\&"
.Xc
.Xo Ic block on\ 
.Ic $ext_if all
.Xc
.Xo Ic anchor\ 
.Ic spam
.Xc
.Xo Ic pass out on\ 
.Ic $ext_if all keep state
.Xc
.Xo Ic pass in on $ext_if\ 
.Ic proto tcp from any \e
.Xc
.Xo Ic \  \  to $ext_if\ 
.Ic port smtp keep state
.Xc
d1672 2
a1673 6
.Xo Cm # echo \&"block in quick from\ 
.Ic 1.2.3.4 to any\&" \&|
.Xc
.Xo Ic \  \  pfctl -a\ 
.Ic spam:manual -f -
.Xc
d1691 4
a1694 10
.Xo Ic block on\ 
.Ic $ext_if all
.Xc
.Xo Ic anchor spam proto tcp from any to\ 
.Ic any port smtp
.Xc
.Ic pass out on $ext_if all keep state
.Xo Ic pass in  on $ext_if proto tcp from any\ 
.Ic to $ext_if port smtp keep state
.Xc
d1704 2
a1705 6
.Xo Ic # echo \&"block in quick from 1.2.3.4\ 
.Ic to any" \&|
.Xc
.Xo Ic \  \  pfctl -a\ 
.Ic spam:manual -f -
.Xc
d1715 1
a1715 3
.Xo Ic rdr on ne3 proto tcp from any\ 
.Ic to any port 80 -> 127.0.0.1 port 8080
.Xc
d1727 1
a1727 3
.Xo Ic nat on ! vlan12 from 192.168.168.0/24\ 
.Ic to any -> 204.92.77.111
.Xc
d1737 2
a1738 6
.Xo Ic no nat on fxp1 proto ah\ 
.Ic from 144.19.74.0/24 to any
.Xc
.Xo Ic nat on fxp1 from 144.19.74.0/24\ 
.Ic to any -> 204.92.77.100
.Xc
d1747 3
a1749 9
.Xo Ic no rdr on fxp0 from any\ 
.Ic to $server port 80
.Xc
.Xo Ic no rdr on fxp0 from $sysadmins\ 
.Ic to any     port 80
.Xc
.Xo Ic rdr on fxp0 from any\ 
.Ic to any     port 80 -> 127.0.0.1 port 80
.Xc
d1762 1
a1762 3
.Xo Ic nat on kue0 inet from !\ 
.Ic (kue0) to any -> (kue0)
.Xc
d1768 2
a1769 6
.Xo Ic nat on kue0 inet proto udp from\ 
.Ic any port = isakmp to any -> (kue0) \e
.Xc
.Xo Ic \  \  port\ 
.Ic 500
.Xc
d1775 1
a1775 3
.Xo Ic binat on kue0 from\ 
.Ic 10.1.2.150 to any -> (kue0)
.Xc
d1780 4
a1783 12
.Xo Ic rdr on kue0 inet proto tcp from any\ 
.Ic to (kue0) port 8080 -> 10.1.2.151 \e
.Xc
.Xo Ic \  \  port\ 
.Ic 22
.Xc
.Xo Ic rdr on kue0 inet proto udp from any\ 
.Ic to (kue0) port 8080 -> 10.1.2.151 \e
.Xc
.Xo Ic \  \  port\ 
.Ic 53
.Xc
d1788 1
a1788 3
.Xo Ic rdr on fxp0 proto tcp from any to\ 
.Ic any port 21 -> 127.0.0.1 port 8081
.Xc
d1798 1
a1798 3
.Xo Ic ext_if =\ 
.Ic \&"kue0\&"
.Xc
d1801 1
a1801 3
.Xo Ic scrub in on $ext_if\ 
.Ic all fragment reassemble
.Xc
d1804 1
a1804 3
.Xo Ic block return log\ 
.Ic on $ext_if all
.Xc
d1807 1
a1807 3
.Xo Ic block in from\ 
.Ic no-route to any
.Xc
d1812 1
a1812 3
.Xo Ic block out log quick on $ext_if\ 
.Ic from ! 157.161.48.183 to any
.Xc
d1815 1
a1815 3
.Xo Ic block in quick on $ext_if\ 
.Ic from any to 255.255.255.255
.Xc
d1820 2
a1821 6
.Xo Ic block in log quick on $ext_if from\ 
.Ic { 10.0.0.0/8, 172.16.0.0/12, \e
.Xc
.Xo Ic \  \  192.168.0.0/16,\ 
.Ic 255.255.255.255/32 } to any
.Xc
d1830 1
a1830 3
.Xo Ic pass on $ext_if inet proto icmp all\ 
.Ic icmp-type 8 code 0 keep state
.Xc
d1835 1
a1835 3
.Xo Ic pass out on $ext_if proto\ 
.Ic udp all keep state
.Xc
d1838 1
a1838 3
.Xo Ic pass in on $ext_if proto udp from any\ 
.Ic to any port domain keep state
.Xc
d1843 1
a1843 3
.Xo Ic pass out on $ext_if proto\ 
.Ic tcp all modulate state
.Xc
d1846 2
a1847 6
.Xo Ic pass in on $ext_if proto tcp from any\ 
.Ic to any port { ssh, smtp, domain, \e
.Xc
.Xo Ic \  \  auth } flags S/SA\ 
.Ic keep state
.Xc
d1851 2
a1852 6
.Xo Ic pass in on $ext_if proto tcp from any\ 
.Ic to 157.161.48.183 port >= 49152 \e
.Xc
.Xo Ic \  \  flags S/SA\ 
.Ic keep state
.Xc
@


1.209
log
@date should be written formally: .Dd Month day, year
also fixes a few misspellings of the month
ok henning@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.208 2003/03/04 23:40:03 dhartmei Exp $
d449 22
@


1.208
log
@Add a paragraph explaining possible unwanted side-effects of redirecting
to the loopback address.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.207 2003/03/04 22:50:36 deraadt Exp $
d30 1
a30 1
.Dd Nov 19, 2002
@


1.207
log
@more oops
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.206 2003/03/04 22:38:22 deraadt Exp $
d845 16
@


1.206
log
@oops
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.205 2003/03/04 22:18:43 deraadt Exp $
d743 1
a743 1
.Xo Ic \  \  keep state
d1590 1
a1590 1
.Xo Ic antispoof
d1904 1
a1904 1
.Xo Ic no rdr on fxp0 from any\		
d1907 1
a1907 1
.Xo Ic no rdr on fxp0 from $sysadmins\	
d1910 1
a1910 1
.Xo Ic rdr on fxp0 from any\		
@


1.205
log
@wrap Ic in Xo/Xc until fixed
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.204 2003/03/04 21:03:46 frantzen Exp $
d1433 1
a1433 1
.Xo Ic pass in proto tcp \
d1893 1
a1893 1
.Xo Ic nat on fxp1 from 144.19.74.0/24\  
d1984 1
a1984 1
.Xo Ic scrub in on $ext_if\
@


1.204
log
@leave my cave to clarify the caveats of state modulation
mdoc incantations from jmc@@
ok henning@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.203 2003/03/04 18:36:18 deraadt Exp $
d200 3
a202 1
.Cm # pfctl -t badhosts -Tadd 204.92.77.111
d304 3
a306 1
.Ic set timeout { tcp.opening 30, tcp.closing 900 }
d308 1
d327 1
d354 3
a356 1
.Ic set limit { states 20000, frags 20000 }
d358 1
d385 3
a387 1
.Ic set optimization aggressive
d389 1
d397 1
a397 1
.Bl -tag -width xxxx -compact
d409 3
a411 1
.Ic set block-policy return
d413 1
d499 3
a501 1
.Ic scrub in on $ext_if all fragment reassemble
d592 3
a594 1
.Ic queue { std, http, mail, ssh }
d696 28
a723 9
.Ic queue std bandwidth 10% cbq(default)
.Ic queue http bandwidth 60% priority 2 cbq(borrow red) \e
.Ic \  \  { employees, developers }
.Ic queue \ developers bandwidth 75% cbq(borrow)
.Ic queue \ employees bandwidth 15%
.Ic queue mail bandwidth 10% priority 0 cbq(borrow ecn)
.Ic queue ssh bandwidth 20% cbq(borrow) { ssh_interactive, ssh_bulk }
.Ic queue \ ssh_interactive priority 7
.Ic queue \ ssh_bulk priority 0
d725 3
a727 1
.Ic block return out on dc0 inet all queue std
d743 3
a745 1
.Ic \  \  keep state queue mail
d782 10
a791 3
.Ic 10.0.0.0    - 10.255.255.255 (all of net 10, i.e., 10/8)
.Ic 172.16.0.0  - 172.31.255.255 (i.e., 172.16/12)
.Ic 192.168.0.0 - 192.168.255.255 (i.e., 192.168/16)
d913 3
a915 1
.Ic block all
d1003 1
a1003 1
.Bl -tag -width "<table>" -compact
d1013 2
a1014 1
.Bl -tag -width ":broadcast" -compact
d1043 24
a1066 8
.Cm = Li \  (equal)
.Cm != Li \ (unequal)
.Cm < Li \  (less than)
.Cm <= Li \ (less than or equal)
.Cm > Li \  (greater than)
.Cm >= Li \ (greater than or equal)
.Cm >< Li \ (range)
.Cm <> Li \ (except range)
d1088 18
a1105 6
.Ic pass in all
.Ic pass in from any to any
.Ic pass in proto tcp from any port <= 1024 to any
.Ic pass in proto tcp from any to any port 25
.Ic pass in proto tcp from 10.0.0.0/8 port >1024 \e
.Ic \  \  to ! 10.1.2.3 port != ssh
d1161 9
a1169 3
.Ic block out proto { tcp, udp } all
.Ic pass \ out proto { tcp, udp } all \e
.Ic \  user { < 1000, dhartmei } keep state
d1242 9
a1250 3
.Ic ips = \&"{ 1.2.3.4, 1.2.3.5 }\&"
.Ic pass in proto tcp from any to $ips \e
.Ic \  \  port >1023 label \&"$dstaddr:$dstport\&"
d1255 12
a1266 4
.Ic pass in proto tcp from any to 1.2.3.4 \e
.Ic \  \  port >1023 label \&"1.2.3.4:>1023\&"
.Ic pass in proto tcp from any to 1.2.3.5 \e
.Ic \  \  port >1023 label \&"1.2.3.5:>1023\&"
d1286 6
a1291 2
.Ic pass in proto tcp to port 25 queue mail
.Ic pass in proto tcp to port 22 queue(ssh_bulk, ssh_prio)
d1426 5
a1430 2
.Ic block all
.Xo Ic pass out proto tcp from any to any\ 
d1433 4
a1436 2
.Xo Ic pass in \ proto tcp from any to any\ 
.Ic port 25 flags S/SA keep state
d1477 2
a1478 1
.Xo Ic pass out inet proto icmp all icmp-type echoreq\ 
d1568 9
a1576 3
.Ic pass in proto tcp from any to any \e
.Ic \  \  port www flags S/SA keep state \e
.Ic \  \  (max 100, tcp.established 60, tcp.closing 5)
d1590 3
a1592 1
.Ic antispoof for lo0
d1597 2
a1598 1
.Xo Ic block in on ! lo0 inet from 127.0.0.1/8\ 
d1601 2
a1602 1
.Xo Ic block in on ! lo0 inet6 from ::1\ 
d1613 3
a1615 1
.Ic antispoof for wi0 inet
d1620 2
a1621 1
.Xo Ic block in on ! wi0 inet from 10.0.0.1/24\ 
d1624 3
a1626 1
.Ic block in inet from 10.0.0.1 to any
d1780 18
a1797 6
.Ic ext_if = \&"kue0\&"
.Ic block on $ext_if all
.Ic anchor spam
.Ic pass out on $ext_if all keep state
.Ic pass in  on $ext_if proto tcp from any \e
.Ic \  \  to $ext_if port smtp keep state
d1810 3
a1812 1
.Ic \  \  pfctl -a spam:manual -f -
d1830 3
a1832 1
.Ic block on $ext_if all
d1852 3
a1854 1
.Ic \  \  pfctl -a spam:manual -f -
d1936 3
a1938 1
.Ic \  \  port 500
d1944 3
a1946 1
.Ic binat on kue0 from 10.1.2.150 to any -> (kue0)
d1954 3
a1956 1
.Ic \  \  port 22
d1960 3
a1962 1
.Ic \  \  port 53
d1979 3
a1981 1
.Ic ext_if = \&"kue0\&"
d1984 3
a1986 1
.Ic scrub in on $ext_if all fragment reassemble
d1989 3
a1991 1
.Ic block return log on $ext_if all
d1994 3
a1996 1
.Ic block in from no-route to any
d2006 3
a2008 1
.Ic block in quick on $ext_if from any to 255.255.255.255
d2016 3
a2018 1
.Ic \  \  192.168.0.0/16, 255.255.255.255/32 } to any
d2034 3
a2036 1
.Ic pass out on $ext_if proto udp all keep state
d2046 3
a2048 1
.Ic pass out on $ext_if proto tcp all modulate state
d2054 3
a2056 1
.Ic \  \  auth } flags S/SA keep state
d2063 3
a2065 1
.Ic \  \  flags S/SA keep state
@


1.203
log
@show example of string concat in macro assign
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.202 2003/03/04 18:03:09 henning Exp $
d1409 7
a1415 1
Caveat:  If
d1417 9
a1425 5
picks up an already established connection
.Po
the firewall was rebooted, the state table was flushed, ...
.Pc
it will not be able to safely modulate the state of that connection.
d1427 11
a1437 18
will fall back and operate as if
.Ar keep state
was specified instead.
Without this fallback, modulation would cause each host to
think that the other end had somehow lost sync.
.Pp
Caveat:  If the state table is flushed or the firewall is rebooted,
currently modulated connections can not be continued or picked
up again by the firewall.
State modulation causes the firewall to phase
shift the sequencing of each side of a connection
.Po
add a random number to each side.
.Pc
Both sides of the connection will notice that its peer has suddenly
shifted its sequence by a random amount.
Neither side
will be able to recover and the connection will stall and eventually close.
@


1.202
log
@fix .Bl width, pt out by theo
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.201 2003/03/04 16:52:00 dhartmei Exp $
d102 1
@


1.201
log
@Fix limit BNF part, since we don't quote token literals, use limit-item,
and limit-list is already a list (due to the recursive definition) which
can also consist of just one entry, so no need for {}.
Found by Maik Kuendig
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.200 2003/03/04 16:50:01 pb Exp $
d384 1
a384 1
.Bl -tag -width xxxxxx -compact
d508 1
a508 1
.Bl -tag -width proq
d721 1
a721 1
.Bl -tag -width xxxxx
@


1.200
log
@update BNF for 'queue ( q_def, q_pri )' and similar in filteropts

ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.199 2003/03/04 16:35:47 dhartmei Exp $
d1904 1
a1904 1
                 [ limit ( limit | { limit-list } ) ] |
d2028 2
a2029 2
limit-list     = limit [ [ , ] limit-list ]
limit          = ( states | frags ) number
@


1.199
log
@other.single was missing in the BNF section, from Maik Kuendig
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.198 2003/03/04 16:23:32 henning Exp $
d1919 1
a1919 1
                 label string | queue string
@


1.198
log
@format nicer
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.197 2003/03/04 16:16:05 henning Exp $
d2024 2
a2025 1
                 | other.first | other.multiple ) seconds
@


1.197
log
@lies
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.196 2003/03/04 16:05:42 henning Exp $
d1441 1
a1441 1
.Bl -tag -width timeout_seconds -compact
@


1.196
log
@make the label example actually work... (missing quotes)
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.195 2003/03/04 15:54:54 henning Exp $
d1171 1
a1171 1
.It Ar queue <string>
d1173 5
d1185 2
a1186 3
.Xo Ic pass in proto tcp from any to any\ 
.Ic port 25 queue mail
.Xc
@


1.195
log
@fix .Bl width in translation section
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.194 2003/03/04 15:47:40 henning Exp $
d1155 1
a1155 1
.Ic ips = "{ 1.2.3.4, 1.2.3.5 }"
d1157 1
a1157 1
.Ic \  \  port >1023 label "$dstaddr:$dstport"
d1163 1
a1163 1
.Ic \  \  port >1023 label "1.2.3.4:>1023"
d1165 1
a1165 1
.Ic \  \  port >1023 label "1.2.3.5:>1023"
@


1.194
log
@fix width in set block-policy list
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.193 2003/03/04 15:44:08 henning Exp $
d721 1
a721 1
.Bl -tag -width xxxx
@


1.193
log
@pfctl -T create is no more
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.192 2003/03/04 15:40:40 henning Exp $
d384 1
a384 1
.Bl -tag -width xxxx -compact
@


1.192
log
@remove lies about queueing and finally take into account that we have more
than one scheduler, explain a bit more how that works etc etc
english(4) police passed in persona jmc@@, ok pb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.191 2003/03/03 22:12:24 deraadt Exp $
a140 1
.Ar create ,
@


1.191
log
@we mean: macros are not expanded inside quotes
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.190 2003/03/02 12:44:42 henning Exp $
d502 42
d550 2
a551 6
scheduler type is required.
Currently
.Ar cbq
and
.Ar priq
are supported.
a554 2
.Ar priq
does not support bandwidth specification.
d581 1
a581 1
directive, a sequence (actually, a tree) of
d588 4
a591 1
directive (e.g. mail) or in a parent
d601 2
d606 1
a606 3
For
.Ar cbq ,
the range is 0..7 with a default of 1.
d611 4
a614 2
The scheduler can get additional parameters with
.Ar cbq Ns Li (\& Ar <parameters> No ) .
a620 2
.It Ar borrow
The queue can borrow bandwidth from the parent.
d635 12
a646 1
Furthermore, child queues can be specified as in an
@


1.190
log
@cbq control keyword is gone
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.189 2003/03/02 12:37:49 dhartmei Exp $
d96 1
a96 1
Macros are not expanded recursively.
@


1.189
log
@The (optional) priority queue is also used for TCP ACKs without data
payload now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.188 2003/02/28 22:43:59 henning Exp $
a581 3
.It Ar control
Control-class packets (RSVP, IGMP, ICMP) are assigned to this queue.
Must not be identical to the default queue.
d1985 1
a1985 2
cbq-opt        = ( default | control | borrow |
                 red | ecn | rio )
@


1.188
log
@note that default and control queue must not be identical
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.187 2003/02/21 16:59:29 henning Exp $
d613 2
a614 1
.Em lowdelay .
@


1.187
log
@typo; Mr. Manpagebeauty Krause. Thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.186 2003/02/18 22:06:49 pb Exp $
d584 1
@


1.186
log
@add PRIQ scheduler to BNF

henning@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.185 2003/02/14 09:43:18 henning Exp $
d1906 1
a1906 1
                 | return-icmp [ ( icmpcode [, icmp6cde ] ) ]
@


1.185
log
@more krause tweaks
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.184 2003/02/13 10:19:44 henning Exp $
d1902 1
a1902 1
schedulers     = cbq-def
d1984 3
a1986 2
cbq-def        = cbq [ ( cbq-type [ [ , ] cbq-type ] ) ]
cbq-type       = ( default | control | borrow |
d1988 1
@


1.184
log
@be consistent when listing the different rule type for order requirement

krause
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.183 2003/02/13 09:39:14 henning Exp $
d848 2
a849 1
below.) The logged packets are sent to the
d929 1
a929 2
This is especially
useful with
@


1.183
log
@grammar; krause

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.182 2003/02/13 09:33:53 henning Exp $
d403 3
a405 3
.Em options,
.Ar scrub ,
.Ar queue ,
d407 1
a407 1
.Em filter .
@


1.182
log
@new sentence, new line
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.181 2003/02/13 08:23:40 jmc Exp $
d44 1
a44 1
There are seven types of statement in
d74 1
a74 1
the types of statement should be grouped and appear in
@


1.181
log
@typos;

setextattr(8): example markus@@
spamd(8): someone else found some of these on bugs/misc, but for the life
	  of me i can't find out who
pf.conf(5): from openbsd@@davidkrause.com
raidctl(8): from ian@@darwinsys.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.180 2003/02/12 13:27:20 mcbride Exp $
d49 2
a50 1
the configuration file. Macros must be defined before they are referenced in
d77 2
a78 1
packet filtering engine. By default
d136 2
a137 1
mechanisms. As with macros, reserved words may not be used as table names.
d226 1
a226 1
added to the table. 
d412 2
a413 1
order ruleset. Consider carefully before disabling the order enforcement.
d508 2
a509 1
scheduler type is required. Currently
d589 2
a590 1
Enables RIO on this queue. RIO is RED with IN/OUT, thus running
d659 3
a661 2
packets associated with a stateful connection. A stateful connection is
automatically created to track packets matching such a rule.
d664 2
a665 1
the packet filter for evaluation. Translation occurs before filtering.
d778 2
a779 1
rule can behave when blocking a packet. The default behaviour is to
d843 2
a844 1
packet that establishes the state is logged. (See
d927 2
a928 1
The ruleset does not need to be reloaded. This is especially
d956 2
a957 1
does not include the limits. For instance:
d1006 2
a1007 2
User and group IDs can be specified as either numbers or names. The
syntax is similar to the one for ports.
d1210 3
a1212 3
ensuring that the redirection address is always the same for a given source. An
optional key can be specified after this keyword either in hex or as a string;
by default
d1239 2
a1240 2
to pass only the initial packet, and then begin to keep state.  Subsequent
traffic will flow because the filter is aware of the connection.
d1519 2
a1520 2
are dropped until other entries time out. The timeout value can
also be adjusted.
@


1.180
log
@Fix BNF for rdr and nat to match merge of rdr and nat parsing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.179 2003/02/10 11:26:30 jmc Exp $
d56 1
a56 1
.It Cm Traffic Normalisation Li (e.g. Em scrub Ns )
d348 1
a348 1
Optimise the engine for one of the following network environments:
@


1.179
log
@queuing -> queueing for consistency

from openbsd@@davidkrause.com via henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.178 2003/02/10 11:09:10 dhartmei Exp $
d1858 1
a1858 2
                 from ipspec to ipspec [ portspec ]
                 [ -> ( redirhost | { redirhost-list } )
d1867 1
a1867 2
                 from ipspec to ipspec [ portspec ]
                 [ -> ( redirhost | { redirhost-list } )
d1934 1
a1934 1
binary-op      = number ( <> | >< ) number
@


1.178
log
@Add random-id to BNF syntax, clean up superflous []
Reported by Dries Schellekens
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.177 2003/02/08 20:13:19 dhartmei Exp $
d60 1
a60 1
Queuing provides rule-based bandwidth control.
d499 1
a499 1
The interfaces on which queuing should be activated are declared using
@


1.177
log
@Add scrub option 'random-id', which replaces IP IDs with random values
for outgoing packets that are not fragmented (after reassembly), to
compensate for predictable IDs generated by some hosts, and defeat
fingerprinting and NAT detection as described in the Bellovin paper
http://www.research.att.com/~smb/papers/fnat.pdf. ok theo@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.176 2003/02/03 16:17:49 mpech Exp $
d1848 1
a1848 1
                 hosts [filteropt-list]
d1851 5
a1855 6
filteropt      = [ user ] | [ group ] | [ flags ] |
                 [ icmp-type | icmp6-type ] | [ tos ] |
                 [ ( keep | modulate ) state [ ( state-opts ) ] ] |
                 [ fragment ] [ no-df ] [ min-ttl number ] |
                 [ max-mss number ] [ fragmentation ] [ allow-opts ] |
                 [ label string ] | [ queue string ]
@


1.176
log
@Add blank space inside '.Xr Ic'.
Spotted by xvenient@@free.fr via henning@@.

millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.175 2003/02/02 23:38:31 henning Exp $
d434 5
@


1.175
log
@typo in anchor section
From: Eduardo Augusto Alvarenga <eduardo at thrx.dyndns.org>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.174 2003/02/02 22:47:18 henning Exp $
d528 1
a528 1
.Xo Ic altq on dc0 cbq bandwidth 5Mb
@


1.174
log
@nicer indentation in the queue example
inspired by a mail to tech@@ from
Eduardo Augusto Alvarenga <eduardo at thrx.dyndns.org>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.173 2003/02/01 14:37:04 mcbride Exp $
d1635 1
a1635 1
.Xo Ic # echo "block in quick from 1.2.3.4\ 
@


1.173
log
@The network interface is not mandatory for translation rules.

ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.172 2003/01/30 15:05:37 henning Exp $
d620 2
a621 2
.Ic queue developers bandwidth 75% cbq(borrow)
.Ic queue employees bandwidth 15%
d624 2
a625 2
.Ic queue ssh_interactive priority 7
.Ic queue ssh_bulk priority 0
@


1.172
log
@document :network and :broadcast modifiers
help jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.171 2003/01/25 17:49:37 cedric Exp $
d724 2
a725 1
the specified interface.
d1853 1
a1853 1
nat-rule       = [ no ] nat on ifspec  [ af ] [ protospec ]
d1858 1
a1858 1
binat-rule     = [ no ] binat on interface-name [ af ]
d1863 1
a1863 1
rdr-rule       = [ no ] rdr on ifspec [ af ] [ protospec ]
@


1.171
log
@Make pf.conf reflect all changes that occured in the last 2 weeks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.170 2003/01/25 09:35:43 jmc Exp $
d893 8
@


1.170
log
@s -> z; thanks naddy@@

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.169 2003/01/24 20:39:54 jmc Exp $
d138 4
a141 1
.Ar create
d205 9
d219 5
d1862 7
a1868 2
table-rule     = table < tablename > [ persist ] [ const ]
		 [ { [ table-address [ , ] ]* } ]
a1911 1
table-address  = hostname | ipv4-dotted-quad | ipv6-coloned-hex
@


1.169
log
@Changed: - Am. Eng. -> Br. Eng.
		eg. normalization -> normalisation
	 - examples/commands in white bold face
	 - .Pa macros -> .Ar
	 - ordered SEE ALSO
	 - removed double quotes from GRAMMAR section
	 - some grammar typos

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.168 2003/01/23 13:46:45 mcbride Exp $
d57 1
a57 1
Traffic normalisation protects internal machines against inconsistencies
d330 1
a330 1
.It Ar set optimisation
d349 2
a350 2
expense of greater memory utilisation (possibly much greater on a busy
network) and slightly increased processor utilisation.
d356 1
a356 1
.Ic set optimisation aggressive
d395 2
a396 2
.Sh TRAFFIC NORMALISATION
Traffic normalisation is used to sanitise packet content in such
d399 1
a399 1
The normaliser does IP fragment reassembly to prevent attacks
d402 1
a402 1
Packet normalisation is invoked with the
d420 1
a420 1
rules, fragments can be reassembled by normalisation.
d1251 1
a1251 1
to synchronise to existing connections, for instance
d1731 1
a1731 1
# normalise all incoming traffic
d1806 1
a1806 1
                 [ optimisation [ default | normal
@


1.168
log
@- rework Tables section in the introduction (pointed out by Theo)
- Macros and Tables can appear anywhere in pf.conf
- Since tables are no longer just a rule option, move the section up
  appropriately.

ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.167 2003/01/23 01:51:55 mcbride Exp $
d43 2
a44 2
There are seven types of statement; The following two statement types
can be placed anywhere in 
d47 5
a51 5
.It Macros
User-defined variables may be defined and later used, simplifying
the configuration file. (Macros must be defined before the are referenced in
.Nm pf.conf Ns ).
.It Tables
d53 2
a54 13
rules with large numbers of source or destination addresses. 
.El
.Pp
The five statement types below should be grouped and appear in
.Nm pf.conf
in the order shown above as this matches the operation of the underlying
packet filtering engine. By default
.Xr pfctl 8
enforces this order (see
.Pa set require-order
below).
.Bl -tag -width xxxx
.It Options
d56 2
a57 2
.It Traffic Normalization (e.g. Pa scrub Ns )
Traffic normalization protects internal machines against inconsistencies
d59 1
a59 1
.It Queueing
d61 1
a61 1
.It Translation (Various forms of NAT)
d64 1
a64 1
.It Packet Filtering
d69 13
d88 1
a88 1
Macro names must start with a letter and may contain letters, digits
d91 3
a93 3
.Pa pass ,
.Pa in ,
.Pa out Ns ).
d98 8
a105 4
.Bd -literal
    ext_if = "kue0"
    pass out on $ext_if           from any to any         keep state
    pass in  on $ext_if proto tcp from any to any port 25 keep state
d113 2
a114 1
are quite fast, making a single rule with tables much more efficient, both in
d120 1
a120 1
.Pa scrub
d124 1
a124 1
.Pa nat
d126 1
a126 1
.Pa rdr 
d134 1
a134 1
mechanisms. As with Macros, reserved words may not be used as table names.
d136 1
a136 1
.It Pa manually
d138 5
a142 3
.Pa create
option of pfctl, before or after the ruleset has been loaded.
.It Pa pf.conf
d146 1
a146 1
.Pa pf.conf
d148 1
a148 1
.Pa table
d150 1
a150 1
The content of a pre-existing table defined without a list of addresses
d152 1
a152 1
.Pa pf.conf
d154 2
a155 2
A table initialized with the empty list
.Pa { }
d161 1
a161 1
.It Pa persist
d163 1
a163 1
.Pa persist
d165 1
a165 1
If that flag is not set, the kernel will automatically remove the table
d167 1
a167 1
.It Pa const
d169 1
a169 1
.Pa const
d181 6
a186 4
.Bd -literal
    table <private> const {  10/8, 172.16/12, 192.168/16 }
    table <badhosts> persist
    block on fxp0 from { <private>, <badhosts> } to any
d191 1
a191 1
Later, addresses may be added to the rule with the following commands so that
d193 2
a194 2
.Bd -literal
    # pfctl -t badhosts -Tadd 204.92.77.111
d199 1
a199 1
.Pa persist
d205 1
a205 1
.Pa all
d209 2
a210 2
may be tuned for various situations with the
.Pa set
d214 1
a214 1
.It Pa set timeout
d217 1
a217 1
.It Pa interval
d219 1
a219 1
.It Pa frag
d224 3
a226 2
connection will be updated to that of the proto.modifier which
corresponds to the connection state.
d232 1
a232 1
.It Pa tcp.first
d234 1
a234 1
.It Pa tcp.opening
d236 1
a236 1
.It Pa tcp.established
d238 1
a238 1
.It Pa tcp.closing
d240 1
a240 1
.It Pa tcp.finwait
d244 6
a249 3
Increasing tcp.finwait (and possibly tcp.closing) can prevent blocking of
such packets.
.It Pa tcp.closed
d257 1
a257 1
.It Pa udp.first
d259 1
a259 1
.It Pa udp.single
d262 1
a262 1
.It Pa udp.multiple
d264 1
a264 1
.It Pa icmp.first
d266 1
a266 1
.It Pa icmp.error
d273 3
a275 3
.It Pa other.first
.It Pa other.single
.It Pa other.multiple
d279 4
a282 4
.Pp
.Bd -literal
    set timeout tcp.established 3600
    set timeout { tcp.opening 30, tcp.closing 900 }
d284 1
a284 1
.It Pa set loginterface
d287 2
a288 2
.Bd -literal
    # pfctl -s info
d294 2
a295 2
.Bd -literal
    set loginterface dc0
d299 2
a300 2
.Bd -literal
    set loginterface none
d302 1
a302 1
.It Pa set limit
d309 2
a310 2
.Bd -literal
    set limit states 20000
d314 5
a318 3
entries (generated by 'keep state' rules) to 20000.
.Bd -literal
    set limit frags 20000
d323 1
a323 1
.Pa scrub
d327 2
a328 2
.Bd -literal
    set limit { states 20000, frags 20000 }
d330 2
a331 2
.It Pa set optimization
Optimize the engine for one of the following network environments:
d334 1
a334 1
.It Pa normal
d337 1
a337 1
.It Pa high-latency
d339 1
a339 1
.It Pa satellite
d341 2
a342 2
.Pa high-latency .
.It Pa aggressive
d346 1
a346 1
.It Pa conservative
d349 2
a350 2
expense of greater memory utilization (possibly much greater on a busy
network) and slightly increased processor utilization.
d355 2
a356 2
.Bd -literal
    set optimization aggressive
d358 1
a358 1
.It Pa set block-policy
d360 1
a360 1
.Pa block-policy
d362 1
a362 1
.Pa block
d366 6
a371 5
.It Pa drop
Packet is silently dropped
.It Pa return
a TCP RST is returned for blocked TCP packets, an ICMP UNREACHABLE is
returned for blocked UDP packets, and all other packets are silently dropped.
d376 2
a377 2
.Bd -literal
    set block-policy return
d379 1
a379 1
.It Pa set require-order
d382 6
a387 5
enforces an ordering of the statement types in the ruleset to: options,
.Pa scrub ,
.Pa queue ,
translation,
filter.
d389 1
a389 1
.Pa no
d395 2
a396 2
.Sh TRAFFIC NORMALIZATION
Traffic normalization is used to sanitize packet content in such
d399 1
a399 1
The normalizer does IP fragment reassembly to prevent attacks
d402 2
a403 2
Packet normalization is invoked with the
.Pa scrub
d406 1
a406 1
.Pa scrub
d409 1
a409 1
.It Pa no-df
d411 1
a411 1
.Pa dont-fragment
d413 1
a413 1
.It Pa min-ttl <number>
d415 1
a415 1
.It Pa max-mss <number>
d417 4
a420 2
.It Pa fragment reassemble
Using scrub rules, fragments can be reassembled by normalization.
d429 1
a429 1
.Pa scrub
d431 1
a431 1
.It Pa fragment crop
d441 1
a441 1
.Pa fragment reassemble
d444 3
a446 1
The crop reassembly mechanism does not yet work with NAT.
d448 1
a448 1
.It Pa fragment drop-ovl
d450 1
a450 1
.Pa fragment crop
d452 1
a452 1
dropped and all following corresponding fragments will be
d457 2
a458 2
.Bd -literal
	scrub in on $ext_if all fragment reassemble
d469 1
a469 1
.Pa queue
d471 1
a471 1
.Pa pass
d473 2
a474 5
.Pa block
rules it specifies where any resulting
.Pa icmp
or
.Pa TCP RST
d479 1
a479 1
.Pa altq on
d483 1
a483 1
.Pa cbq
d485 1
a485 1
.Pa priq
d488 1
a488 1
.Pa bandwidth
d490 1
a490 1
.Pa priq
d496 1
a496 1
.Pa qlimit
d499 1
a499 1
.Pa tbrsize
d503 1
a503 1
.Pa queue
d506 1
a506 2
In the following example, the interface
.Pa dc0
d508 1
a508 1
.Pa cbq .
d510 4
a513 2
.Bd -literal
    altq on dc0 cbq bandwidth 5Mb queue { std, http, mail, ssh }
d517 1
a517 1
.Pa altq
d519 1
a519 1
.Pa queue
d522 1
a522 1
.Pa queue
d524 1
a524 1
.Pa altq
d526 1
a526 1
.Pa queue
d528 2
a529 2
The maximum bitrate to be processed by this queue is established using a
.Pa bandwidth
d532 1
a532 1
.Pa queue
d536 1
a536 1
.Pa priority
d539 1
a539 1
.Pa cbq ,
d543 1
a543 1
.Pa qlimit
d546 1
a546 1
.Pa cbq( <parameters> No ) .
d550 1
a550 1
.It Pa default
d553 1
a553 1
.It Pa borrow
d555 1
a555 1
.It Pa control
d557 1
a557 1
.It Pa red
d561 1
a561 1
.It Pa rio
d563 1
a563 1
RED two times more then RED would do.
d565 1
a565 1
.It Pa ecn
d571 1
a571 1
.Pa altq
d576 1
a576 1
.Pa queue
d579 1
a579 1
.Pa queue
d582 1
a582 1
.Pa tos
d584 1
a584 1
.Pa lowdelay Ns .
d596 1
a596 1
.Em PACKET FILTERING
d600 27
a626 19
    queue std bandwidth 10% cbq(default)
    queue http bandwidth 60% priority 2 cbq(borrow red) \\
        { employees, developers }
    queue developers bandwidth 75% cbq(borrow)
    queue employees bandwidth 15%
    queue mail bandwidth 10% priority 0 cbq(borrow ecn)
    queue ssh bandwidth 20% cbq(borrow) { ssh_interactive, ssh_bulk }
    queue ssh_interactive priority 7
    queue ssh_bulk priority 0

    block return out on dc0 inet all queue std
    pass out on dc0 inet proto tcp from $developerhosts to any port 80 \\
	keep state queue developers
    pass out on dc0 inet proto tcp from $employeehosts to any port 80 \\
	keep state queue employees
    pass out on dc0 inet proto tcp from any to any port 22 \\
	keep state queue(ssh_bulk, ssh_interactive)
    pass out on dc0 inet proto tcp from any to any port 25 \\
	keep state queue mail
d644 1
a644 1
.It Pa binat
d646 1
a646 1
.Pa binat
d649 1
a649 1
.It Pa nat
d651 1
a651 1
.Pa nat
d661 3
a663 3
10.0.0.0    - 10.255.255.255 (all of net 10, i.e., 10/8)
172.16.0.0  - 172.31.255.255 (i.e., 172.16/12)
192.168.0.0 - 192.168.255.255 (i.e., 192.168/16)
d668 1
a668 1
.Pa rdr
d670 4
a673 4
\'rdr ... port 2000:2999 -> ... port 4000\' redirects ports 2000 to 2999
(including port 2000 and 2999) to the same port 4000.
\'rdr ... port 2000:2999 -> ... port 4000:*\' redirects port 2000 to 4000,
2001 to 4001, ..., 2999 to 4999.
d682 1
a682 1
.Pa nat
d684 1
a684 1
.Pa rdr
d687 1
a687 1
.Pa binat
d695 1
a695 1
.Pa no
d698 1
a698 1
.Pa drop quick
d720 1
a720 1
.Pa block
d722 1
a722 1
.Pa pass
d728 2
d731 1
a731 4
.Xr udp 4 ,
.Xr icmp 4 ,
and
.Xr icmp6 4 Ns )
d743 1
a743 1
.It Pa block
d746 1
a746 1
.Pa block
d748 1
a748 1
.Pa drop
d751 1
a751 1
.Pa block-policy
d755 1
a755 1
.It Pa  drop
d757 1
a757 1
.It Pa return-rst
d762 2
a763 2
.It Pa return-icmp
.It Pa return-icmp6
d765 1
a765 1
By default this is an ICMP UNREACHABLE message, however the this
d767 1
a767 1
.It Pa return
d773 1
a773 1
.It Pa pass
d778 1
a778 1
.Pa pass .
d782 2
a783 2
.Bd -literal
    block all
d789 1
a789 1
A packet always comes in on or goes out through one interface.
d797 2
a798 2
.It Pa in No or Pa out
The rule applies to incoming or outgoing packets.
d800 3
a802 3
.Pa in
or
.Pa out
d804 1
a804 1
.It Pa log
d806 10
a815 5
All packets for that connection are logged, unless the `keep state'
or `modulate state' options are specified, in which case only the
packet that establishes the state is logged. (See `keep state' and
`modulate state' below.)
The logged packets are sent to the
d820 1
a820 1
logging daemon which dumps the logged packets to the file
d825 1
a825 1
.It Pa log-all
d827 1
a827 1
.Sq keep state
d829 1
a829 1
.Sq modulate state
d832 1
a832 1
.Pa log ,
d835 1
a835 1
.It Pa quick
d837 1
a837 1
.Sq quick
d841 2
a842 2
.It Pa on No <interface>
The rule applies only to packets coming in on or going out through this
d844 8
a851 5
.It Pa <af>
The rule applies only to packets of this address family.
Supported values are inet and inet6.
.It Pa proto No <protocol>
The rule applies only to packets of this protocol.
d853 2
d856 3
a858 5
.Xr udp 4 ,
.Xr icmp 4 ,
and
.Xr icmp6 4 .
For a list of all protocol name to number mappings used by
d862 2
a863 2
.It Pa from <source> port <source> to <dest> port <dest>
The rule applies only to packets with the specified source and destination
d870 6
a875 6
.It Pa any
Means any address.
.It Pa no-route
Means any address which is not currently routable.
.It Pa <table>
Means any address that matches the given table.
d888 1
a888 1
.Pa nat .
d891 2
a892 2
For example, port 80 can be specified as
.Pa www .
d896 1
a896 1
.Em /etc/services .
d899 9
a907 4
.Bd -literal
    = (equal), != (unequal), < (lesser), <= (lesser or equal),
    > (greater), >= (greater or equal),
    >< (range) and <> (except range).
d910 5
a914 2
>< and <> are binary operators (they take two arguments), and the range
does not include the limits, for instance:
d916 1
a916 1
.It Pa port 2000 >< 2004
d920 1
a920 1
.It Pa port 2000 <> 2004
d927 11
a937 11
.Bd -literal
    pass in all
    pass in from any to any
    pass in proto tcp from any port <= 1024 to any
    pass in proto tcp from any to any port 25
    pass in proto tcp from 10.0.0.0/8 port > 1024 to \\
	! 10.1.2.3 port != ssh
.Ed
.It Pa all
This is a short form for "from any to any".
.It Pa group <group>
d939 1
a939 1
.Pa user Ns ,
d941 2
a942 2
.It Pa user <user>
The rule only applies to packets of sockets owned by the specified user.
d949 1
a949 1
.Pa unknown .
d953 1
a953 1
Only TCP and UDP packets can be associated with users, for other protocols
d963 1
a963 1
User and group IDs can be specified as either numbers or names, the
d966 1
a966 1
.Pa unknown
d968 8
a975 3
.Pa unknown
can only be used with operators = and !=, other constructs
like 'user >= unknown' are invalid.
d978 8
a985 3
.Pa unknown
with operator = or !=, for instance 'user >= 0' does not match
forwarded packets.
d988 13
a1000 9
.Bd -literal
    block out proto { tcp, udp } all
    pass  out proto { tcp, udp } all \\
	user { < 1000, dhartmei } keep state
.Ed
.It Pa flags <a>/<b> | /<b>
The rule only applies to TCP packets that have the flags <a> set
out of set <b>.
Flags not specified in <b> are ignored.
d1003 1
a1003 1
.It Pa flags S/S
d1006 1
a1006 1
.It Pa flags S/SA
d1010 1
a1010 1
.It Pa flags /SFRA
d1014 3
a1016 3
.It Pa icmp-type <type> code <code>
.It Pa icmp6-type <type> code <code>
The rule only applies to ICMP or ICMPv6 packets with the specified type
d1018 3
a1020 3
This parameter is only valid for rules that cover protocols icmp or
icmp6.
The protocol and the icmp type indicator (icmp-type or icmp6-type)
d1022 1
a1022 1
.It Pa allow-opts
d1025 1
a1025 1
.Pa allow-opts
d1027 1
a1027 1
.Pa pass
d1033 1
a1033 1
.Pa pass
d1036 1
a1036 1
.It Pa label <string>
d1039 1
a1039 1
.Pa pfctl -s labels
d1045 14
a1058 14
.It Pa $if
the interface.
.It Pa $srcaddr
the source IP address.
.It Pa $dstaddr
the destination IP address.
.It Pa $srcport
the source port specification.
.It Pa $dstport
the destination port specification.
.It Pa $proto
the protocol name.
.It Pa $nr
the rule number.
d1063 4
a1066 4
.Bd -literal
    ips = "{ 1.2.3.4, 1.2.3.5 }"
    pass in proto tcp from any to $ips port >1023 \\
	label "$dstaddr:$dstport"
d1070 5
a1074 5
.Bd -literal
    pass in proto tcp from any to 1.2.3.4 port >1023 \\
	label "1.2.3.4:>1023"
    pass in proto tcp from any to 1.2.3.5 port >1023 \\
	label "1.2.3.5:>1023"
d1078 1
a1078 1
.Pa label
d1080 1
a1080 1
.It Pa queue <string>
d1082 3
a1084 1
See QUEUE RULES for setup details.
d1088 4
a1091 2
.Bd -literal
    pass in proto tcp from any to any port 25 queue mail
a1092 1
.El
d1100 1
a1100 1
.It Pa fastroute
d1102 1
a1102 1
.Pa fastroute
d1104 1
a1104 1
.It Pa route-to
d1106 1
a1106 1
.Pa route-to
d1110 1
a1110 1
.Pa route-to
d1114 2
a1115 2
and routed normally.
.It Pa reply-to
d1117 1
a1117 1
.Pa reply-to
d1119 1
a1119 1
.Pa route-to
d1122 2
a1123 2
Opposite direction is only defined in context of a state entry, and
.Pa route-to
d1128 1
a1128 1
.It Pa dup-to
d1130 1
a1130 1
.Pa dup-to
d1132 1
a1132 1
.Pa route-to.
d1138 1
a1138 1
.Pa nat
d1140 1
a1140 1
.Pa rdr
d1142 2
a1143 2
.Pa route-to ,
.Pa reply-to
d1145 1
a1145 1
.Pa dup-to
d1151 1
a1151 1
.It Pa bitmask
d1153 1
a1153 1
.Pa bitmask
d1155 5
a1159 2
to be modified (source with nat, destination with rdr).
.It Pa random
d1161 1
a1161 1
.Pa random
d1163 1
a1163 1
.It Pa source-hash
d1165 1
a1165 1
.Pa source-hash
d1169 3
a1171 1
by default pfctl randomly generates a key for source-hash every time the
d1173 1
a1173 1
.It Pa round-robin
d1175 1
a1175 1
.Pa round-robin
d1179 1
a1179 1
.Pa round-robin
d1181 1
a1181 1
.It Pa static-port
d1183 1
a1183 1
.Pa nat
d1185 1
a1185 1
.Pa static-port
d1190 1
d1195 2
a1196 2
Instead of passing all traffic to port 25, for instance, one can pass
only the initial packet, and then begin to keep state.  Subsequent
d1200 1
a1200 1
.Pa pass ... keep state
d1202 1
a1202 1
lets pass all following packets of that connection.
d1219 1
a1219 1
If one has 50 rules, all of them are evaluated sequentially in O(n).
d1225 8
a1232 4
.Bd -literal
    block all
    pass out proto tcp from any to any         flags S/SA keep state
    pass in  proto tcp from any to any port 25 flags S/SA keep state
d1237 2
a1238 2
The initial packet of each connection has the SYN flag set, will be passed
and creates state.
d1241 3
a1243 1
Specifying flags S/SA restricts state creation to the initial SYN
d1251 1
a1251 1
to synchronize to existing connections, for instance
d1254 3
a1256 2
For UDP, which is stateless by nature, keep state will create state
as well.
d1259 1
a1259 1
ICMP messages fall in two categories: ICMP error messages, which always
d1265 3
a1267 1
For ICMP queries, keep state creates an ICMP state, and
d1271 4
a1274 2
.Bd -literal
    pass out inet proto icmp all icmp-type echoreq keep state
d1282 1
a1282 1
.Pa nat, binat No and Pa rdr
d1288 1
a1288 1
.Cm very
d1290 3
a1292 1
By applying a "modulate state" rule to a TCP connection,
d1297 3
a1299 1
The "modulate state" directive implicitly keeps state on the rule and is
d1303 8
a1310 4
.Bd -literal
    block all
    pass out proto tcp from any to any                    modulate state
    pass in  proto tcp from any to any port 25 flags S/SA modulate state
d1321 3
a1323 1
will fall back and operate as if "keep state" was specified instead.
d1341 1
a1341 1
.Pa keep state
d1343 1
a1343 1
.Pa modulate state
d1347 1
a1347 1
.It Pa max <number>
d1351 1
a1351 1
.It Pa <timeout> <seconds>
d1354 1
a1354 1
.Pa OPTIONS
d1359 3
a1361 2
    pass in proto tcp from any to any port www flags S/SA \\
        keep state (max 100, tcp.established 60, tcp.closing 5)
d1367 1
a1367 1
.Pa antispoof
d1374 2
a1375 2
.Bd -literal
    antispoof for lo0
d1379 7
a1385 3
.Bd -literal
    block in on ! lo0 inet from 127.0.0.1/8 to any
    block in on ! lo0 inet6 from ::1 to any
d1393 2
a1394 2
.Bd -literal
    antispoof for wi0 inet
d1398 5
a1402 3
.Bd -literal
    block in on ! wi0 inet from 10.0.0.1/24 to any
    block in inet from 10.0.0.1 to any
d1406 1
a1406 1
.Pa antispoof
d1410 1
d1423 1
a1423 1
.Pa scrub
d1425 1
a1425 1
.Em TRAFFIC NORMALIZATION
d1428 1
a1428 1
The alternative is to filter individual fragments with filter rules.
d1430 1
a1430 1
.Pa scrub
d1439 1
a1439 1
.Pa fragment
d1441 1
a1441 1
fragments but not complete packets.
d1443 1
a1443 1
.Pa fragment
d1447 4
a1450 2
.Bd -literal
    pass in proto tcp from any to any port 80
d1452 1
a1452 1
.Pp
d1458 1
a1458 1
translations (NAT, redirection) for fragments impossible.
d1461 2
a1462 1
source or destination addresses or protocols as parameters in scrub
d1466 3
a1468 1
memory cost, and it's recommended to use scrub rules to reassemble
d1470 1
a1470 1
.Pa fragment reassemble
d1485 1
a1485 1
.Pa anchor
d1488 1
a1488 1
.Pa anchor
d1491 1
a1491 1
.Pa anchor
d1494 1
a1494 1
can be used to attach sub rulesets.
d1498 1
a1498 1
.Pa anchor
d1503 1
a1503 1
.It Pa nat-anchor <name>
d1505 1
a1505 1
.Pa nat
d1507 2
a1508 2
.Pa anchor .
.It Pa rdr-anchor <name>
d1510 1
a1510 1
.Pa rdr
d1512 2
a1513 2
.Pa anchor .
.It Pa binat-anchor <name>
d1515 1
a1515 1
.Pa binat
d1517 2
a1518 2
.Pa anchor .
.It Pa anchor <name>
d1520 1
a1520 1
.Pa anchor .
d1524 1
a1524 1
.Pa anchor
d1529 1
a1529 1
.Pa anchor .
d1532 1
a1532 1
.Pa quick
d1535 1
a1535 1
.Pa anchor
d1539 1
a1539 1
.Pa anchor
d1543 1
a1543 1
.Pa anchor
d1548 1
a1548 1
.Pa anchor
d1555 7
a1561 6
.Bd -literal
    ext_if = "kue0"
    block on $ext_if all
    anchor spam
    pass out on $ext_if all keep state
    pass in  on $ext_if proto tcp from any to $ext_if port smtp keep state
d1566 1
a1566 1
.Pa anchor
d1570 5
a1574 4
Then
.Bd -literal
    # echo "block in quick from 1.2.3.4 to any" | \\
	pfctl -a spam:manual -f -
d1578 1
a1578 1
.Pa anchor ,
d1582 2
a1583 2
.Pa anchor
rules can specify the parameters
d1588 1
a1588 1
.Pa anchor
d1591 9
a1599 5
.Bd -literal
    block on $ext_if all
    anchor spam proto tcp from any to any port smtp
    pass out on $ext_if all keep state
    pass in  on $ext_if proto tcp from any to $ext_if port smtp keep state
d1603 1
a1603 1
.Pa anchor
d1605 1
a1605 1
.Pa tcp
d1608 5
a1612 3
.Bd -literal
    # echo "block in quick from 1.2.3.4 to any" | \\
	pfctl -a spam:manual -f -
d1618 2
a1619 2
which a daemon is running (say it is not run as root,
therefore lacks permission to bind to port 80).
d1622 3
a1624 1
rdr on ne3 proto tcp from any to any port 80 -> 127.0.0.1 port 8080
d1627 1
a1627 1
In the example below, vlan12 is configured for the 192.168.168.1;
d1636 3
a1638 1
nat on ! vlan12 from 192.168.168.0/24 to any -> 204.92.77.111
d1644 1
a1644 1
.Pa no nat
d1648 6
a1653 2
no nat on fxp1 proto ah from 144.19.74.0/24 to any
nat on fxp1 from 144.19.74.0/24 to any -> 204.92.77.100
d1659 1
a1659 1
are not proxied, all other connections are.
d1662 9
a1670 3
no rdr on fxp0 from any        to $server port 80
no rdr on fxp0 from $sysadmins to any     port 80
   rdr on fxp0 from any        to any     port 80 -> 127.0.0.1 port 80
d1677 1
a1677 1
.Xr ftp-proxy 8
d1683 4
a1686 2
nat on kue0 inet from ! (kue0) to any -> (kue0)

d1691 5
a1695 3
nat on kue0 inet proto udp from any port = isakmp to any -> (kue0) \\
        port 500

d1700 2
a1701 2
binat on kue0 from 10.1.2.150 to any -> (kue0)

d1705 9
a1713 5
rdr on kue0 inet proto tcp from any to (kue0) port 8080 -> 10.1.2.151 \\
        port 22
rdr on kue0 inet proto udp from any to (kue0) port 8080 -> 10.1.2.151 \\
        port 53

d1717 3
a1719 1
rdr on fxp0 proto tcp from any to any port 21 -> 127.0.0.1 port 8081
d1722 1
d1727 1
a1727 1

d1729 5
a1733 5
ext_if = "kue0"

# normalize all incoming traffic
scrub in on $ext_if all fragment reassemble

d1735 2
a1736 2
block return log on $ext_if all

d1738 2
a1739 2
block in from no-route to any

d1743 4
a1746 2
block out log quick on $ext_if from ! 157.161.48.183 to any

d1748 2
a1749 2
block in quick on $ext_if from any to 255.255.255.255

d1753 5
a1757 3
block in log quick on $ext_if from { 10.0.0.0/8, 172.16.0.0/12, \\
        192.168.0.0/16, 255.255.255.255/32 } to any

d1759 1
a1759 1

d1765 4
a1768 2
pass on $ext_if inet proto icmp all icmp-type 8 code 0 keep state

d1770 1
a1770 1

d1772 2
a1773 2
pass out on $ext_if proto udp all keep state

d1775 4
a1778 2
pass in on $ext_if proto udp from any to any port domain keep state

d1780 1
a1780 1

d1782 2
a1783 2
pass out on $ext_if proto tcp all modulate state

d1785 5
a1789 3
pass in on $ext_if proto tcp from any to any port { ssh, smtp, domain, \\
        auth } flags S/SA keep state

d1792 4
a1795 3
pass in on $ext_if proto tcp from any to 157.161.48.183 port >= 49152 \\
        flags S/SA keep state

d1802 2
a1803 2
line           = ( option | pf-rule | nat-rule | binat-rule | rdr-rule |
                 antispoof-rule | altq-rule | queue-rule )
d1805 12
a1816 12
option         = set ( [ "timeout" ( timeout | "{" timeout-list "}" ) ] |
                 [ "optimization" [ "default" | "normal" |
                 "high-latency" | "satellite" |
                 "aggressive" | "conservative" ] ]
                 [ "limit" ( limit | "{" limit-list "}" ) ] |
                 [ "loginterface" ( interface-name | "none" ) ] |
                 [ "block-policy" ( "drop" | "return" ) ] |
                 [ "require-order" ( "yes" | "no" ) ] )

pf-rule        = action [ ( "in" | "out" ) ]
                 [ "log" | "log-all" ] [ "quick" ]
                 [ "on" ifspec ] [ route ] [ af ] [ protospec ]
d1822 18
a1839 18
                 [ ( "keep" | "modulate" ) "state" [ "(" state-opts ")" ] ] |
                 [ "fragment" ] [ "no-df" ] [ "min-ttl" number ] |
                 [ "max-mss" number ] [ fragmentation ] [ "allow-opts" ] |
                 [ "label" string ] | [ "queue" string ]

nat-rule       = [ "no" ] "nat" "on" ifspec  [ af ] [ protospec ]
                 "from" ipspec "to" ipspec [ portspec ]
                 [ "->" ( redirhost | "{" redirhost-list "}" )
                 [ portspec ] ] [ pooltype ] [ "static-port" ]

binat-rule     = [ "no" ] "binat" "on" interface-name [ af ]
                 [ "proto" ( proto-name | proto-number ) ]
                 "from" address [ "/" mask-bits ] "to" ipspec
                 [ "->" address [ "/" mask-bits ] ]

rdr-rule       = [ "no" ] "rdr" "on" ifspec [ af ] [ protospec ]
                 "from" ipspec "to" ipspec [ portspec ]
                 [ "->" ( redirhost | "{" redirhost-list "}" )
d1842 2
a1843 2
antispoof-rule = "antispoof" [ "log" ] [ "quick" ]
                 "for" ( interface-name | "{" interface-list "}" ) [ af ]
d1845 2
a1846 2
table-rule     = "table" "<" tablename ">" [ "persist" ] [ "const" ]
		 [ "{" [ table-address [ "," ] ]* "}" ]
d1848 3
a1850 3
altq-rule      = "altq" "on" interface-name queueopts-list
                 "queue" queue-list
queue-rule     = "queue" string queueopts-list queue-list
d1853 4
a1856 4
queueopts      = [ "bandwidth" number ( "b" | "Kb" | "Mb" | "Gb" | " %") ] |
                 [ "qlimit" number ] | [ "tbrsize" number ] |
                 [ "priority" number ] | [ schedulers ] |
                 [ "qlimit" number ]
d1859 4
a1862 4
action         = "pass" | "block" [ return ] | "scrub"
return         = "drop" | "return" | "return-rst" [ "(" "ttl" number ")" ] |
                 "return-icmp" [ "(" icmpcode ["," icmp6code ] ")" ] |
                 "return-icmp6" [ "(" icmp6code ")" ]
d1866 5
a1870 5
ifspec         = ( [ "!" ] interface-name ) | "{" interface-list "}"
interface-list = [ "!" ] interface-name [ [ "," ] interface-list ]
route          = "fastroute" |
                 ( "route-to" | "reply-to" | "dup-to" )
                 ( routehost | "{" routehost-list "}" )
d1872 1
a1872 1
af             = "inet" | "inet6"
d1874 16
a1889 16
protospec      = "proto" ( proto-name | proto-number |
                 "{" proto-list "}" )
proto-list     = ( proto-name | proto-number ) [ [ "," ] proto-list ]

hosts          = "all" |
                 "from" ( "any" | "no-route" | "self" | host |
                 "{" host-list "}" ) [ port ]
                 "to"   ( "any" | "no-route" | "self" | host |
                 "{" host-list "}" ) [ port ]

ipspec         = "any" | host | "{" host-list "}"
host           = [ "!" ] ( address [ "/" mask-bits ] | "<" table ">" )
redirhost      = address [ "/" mask-bits ]
routehost      = ( interface-name [ address [ "/" mask-bits ] ] )
address        = ( interface-name | "(" interface-name ")" | host-name |
                 ipv4-dotted-quad | ipv6-coloned-hex )
d1891 8
a1898 8
host-list      = host [ [ "," ] host-list ]
redirhost-list = redirhost [ [","] redirhost-list ]
routehost-list = routehost [ [","] routehost-list ]

port           = "port" ( unary-op | binary-op | "{" op-list "}" )
portspec       = "port" ( number | name ) [ ":" ( "*" | number | name ) ]
user           = "user" ( unary-op | binary-op | "{" op-list "}" )
group          = "group" ( unary-op | binary-op | "{" op-list "}" )
d1900 1
a1900 1
unary-op       = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
d1902 2
a1903 2
binary-op      = number ( "<>" | "><" ) number
op-list        = ( unary-op | binary-op ) [ [ "," ] op-list ]
d1905 2
a1906 3
flags          = "flags" ( flag-set "/" flag-set | "/" flag-set )
flag-set       = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] [ "E" ]
                 [ "W" ]
d1908 2
a1909 2
icmp-type      = "icmp-type" ( icmp-type-code | "{" icmp-list "}" )
icmp6-type     = "icmp6-type" ( icmp-type-code | "{" icmp-list "}" )
d1911 2
a1912 2
                 [ "code" ( icmp-code-name | icmp-code-number ) ]
icmp-list      = icmp-type-code [ [ "," ] icmp-list ]
d1914 2
a1915 2
tos            = "tos" ( "lowdelay" | "throughput" | "reliability" |
                 [ "0x" ] number )
d1917 2
a1918 2
state-opts     = state-opt [ [ "," ] state-opts ]
state-opt      = ( "max" number ) | ( timeout seconds )
d1920 9
a1928 9
fragmentation  = [ "fragment reassemble" | "fragment crop" |
                 "fragment drop-ovl" ]

timeout-list   = timeout [ [ "," ] timeout-list ]
timeout        = ( "tcp.first" | "tcp.opening" | "tcp.established" |
                 "tcp.closing" | "tcp.finwait" | "tcp.closed" |
                 "udp.first" | "udp.single" | "udp.multiple" |
                 "icmp.first" | "icmp.error" |
                 "other.first" | "other.multiple" ) seconds
d1931 2
a1932 12
limit-list     = limit [ [ "," ] limit-list ]
limit          = ( "states" | "frags" ) number

pooltype       = ( "bitmask" | "random" |
                 "source-hash" [ ( hex-key | string-key ) ] |
                 "round-robin" )

subqueue       = string | "{" queue-list "}"
queue-list     = string [ [ "," ] string ]
cbq-def        = "cbq" [ "(" cbq-type [ [ "," ] cbq-type ] ")" ]
cbq-type       = ( "default" | "control" | "borrow" |
                 "red" | "ecn" | "rio" )
d1934 9
d1946 10
a1955 10
.It Pa /etc/hosts
Host name database
.It Pa /etc/pf.conf
Default location of the ruleset file
.It Pa /etc/protocols
Protocol name database
.It Pa /etc/services
Service name database
.It Pa /usr/share/pf
Example rulesets
d1958 4
d1963 2
d1970 1
a1970 7
.Xr pflogd 8 ,
.Xr ip 4 ,
.Xr ip6 4 ,
.Xr tcp 4 ,
.Xr udp 4 ,
.Xr icmp 4 ,
.Xr icmp6 4
d1974 1
a1974 1
file format appeared in
@


1.167
log
@Cleanup of TABLES section.

Help with english language jmc@@

ok dhartmei@@ cedric@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.166 2003/01/21 19:59:09 jmc Exp $
d43 2
a44 1
There are seven types of statement in
d49 16
a64 1
the configuration file.
a77 4
.It Table Definition
Radix tables provide an effective way to match the source or destination
address of packets against big and changing collections of addresses and
CIDR networks.
a79 9
The types of statement should be grouped and appear in
.Nm pf.conf
in the order shown above as this matches the operation of the underlying
packet filtering engine. By default
.Xr pfctl 8
enforces this order (see
.Pa set require-order
below).
.Pp
d102 94
a1123 93
.Sh TABLES
Tables are named structures which can hold a collection of addresses and
networks.
Lookups against tables in
.Xr pf 4
are quite fast, making a single rule with tables much more efficient, both in
processor usage and memory consumption, than a large number of rules which
differ only in IP address (either created explicitly or automatically by rule
expansion).
.Pp
Tables can be used as the source or destination of filter rules,
.Pa scrub
rules
or
translation rules such as
.Pa nat
or
.Pa rdr .
Tables cannot be used for things like the redirect address of
translation rules, nor can they be used in the routing options of
filter rules.
.Pp
Tables can be defined with any of the following
.Xr pfctl 8
mechanisms:
.Bl -tag -width "manually"
.It Pa manually
Persistent tables can be manually created with the
.Pa create
option of pfctl, before or after the ruleset has been loaded.
.It Pa pf.conf
Table definitions can be placed directly in this file, and loaded at the
same time as other rules are loaded, atomically.
Table definitions inside
.Pa pf.conf
use the
.Pa table
statement, and are especially useful to define non-persistent tables.
The content of a pre-existing table defined without a list of addresses
to initialize it is not altered when
.Pa pf.conf
is loaded.
A table initialized with the empty list
.Pa { }
will be cleared on load.
.El
.Pp
Tables may be defined with the following two attributes:
.Bl -tag -width persist
.It Pa persist
The
.Pa persist
flag forces the kernel to keep the table even when no rules refer to it.
If that flag is not set, the kernel will automatically remove the table
when the last rule referring to it is flushed.
.It Pa const
The
.Pa const
flag prevents the user from altering the contents of the table once it
has been created.
Without that flag,
.Xr pfctl 8
can be used to add or remove addresses from the table at any time, even
when running with
.Xr securelevel 7
= 2.
.El
.Pp
For example,
.Bd -literal
    table <private> const {  10/8, 172.16/12, 192.168/16 }
    table <badhosts> persist
    block on fxp0 from { <private>, <badhosts> } to any
.Ed
.Pp
creates a table called private, and then blocks all traffic coming from
RFC 1918 style private network blocks.
Later, addresses may be added to the rule with the following commands so that
traffic from these hosts can be dropped:
.Bd -literal
    # pfctl -t badhosts -Tadd 204.92.77.111
.Ed
.Pp
When no active rules which refer to the badhosts table exist (such as when the
rules are flushed), the
.Pa persist
keyword ensures that the table will not be lost.
.Pp
In addition to being specified by IP address, hosts may also be specified
by their hostname.
When the resolver is called to add a hostname to a table,
.Pa all
resulting IPv4 and IPv6 addresses are placed into the table.
@


1.166
log
@typos;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.165 2003/01/15 23:19:19 henning Exp $
d723 1
a723 1
and 
d758 1
a758 1
For example, port 80 can be specified as 
d1028 1
a1028 1
Tables are named structures which can hold a collections of addresses and
d1030 7
a1036 2
Internally, they are implemented as PATRICIA trees, like the kernel routing
table.
d1041 1
d1043 30
a1072 6
rules where it makes sense.
They cannot, however, be used for things like the redirect address of a
.Pa rdr
rule,
.Pa dup-to
construct or similar, as one would guess.
d1079 3
a1081 4
flag inform the kernel that we want to keep the table even when no rule
refer to that table.
If that flag is not set, the kernel will automagically remove the table
when the last rule refering to it is flushed.
d1085 2
a1086 2
flag prevent the user to alter the content of the table once it has been
created.
d1095 19
a1113 20
Tables can be defined with any of the following 
.Xr pfctl 8
mechanism:
.Bl -tag -width "manually"
.It Pa manually 
Persistant tables can be manually created with the
.Pa create
option of pfctl, before or after the ruleset has been loaded.
.It Pa pf.conf
Table definitions can be placed directly in this file, and loaded at the
same time as other rules are loaded, atomically.
Table definitions inside
.Pa pf.conf
use the
.Pa table
statement, and are especially useful to define non-persistant tables.
The content of preexisting tables defined without initializer ('{' and '}')
is not altered when (re-)loaded from
.Pa pf.conf.
.El
d1115 2
d1119 1
a1119 1
resulting IP addresses are placed into the table, IPv4 as well as IPv6.
d1350 1
a1350 1
.Pp 
d1706 1
a1706 1
                 [ "priority" number ] | [ schedulers ] | 
@


1.165
log
@at least mention the PRIQ scheduler.
more to come...
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.164 2003/01/10 10:08:54 cedric Exp $
d51 1
a51 1
.It Traffic Normalization (e.g. Pa scrub No )
d138 1
a138 1
The state after one endpoint sends a RST.
d224 1
a224 1
A high-latency environment (such as a satellite connection)
d227 1
a227 1
.Pa high-latency
d485 2
a486 2
    queue  developers bandwidth 75% cbq(borrow)
    queue  employees bandwidth 15%
d489 2
a490 2
    queue  ssh_interactive priority 7
    queue  ssh_bulk priority 0
d853 1
a853 1
SYN, SYN+PSH, SYN+RST match, but SYN+ACK, ACK and ACK+RST do not.
d1131 1
a1131 1
Only outgoing connections and incoming connection to port 25 are allowed.
d1165 2
a1166 3
allows echo requests,
e.g as created by
.Xr ping 8 ,
d1213 1
a1213 1
Both sides of the connection will notice, that its peer has suddenly
d1322 1
a1322 1
packet with destination port 80, because without reassembly, this information
@


1.164
log
@Tipo in tabledef grammar. Found by Rukh <openbsd@@rukh.net>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.163 2003/01/09 10:40:44 cedric Exp $
d365 1
a365 1
scheduler type is required but currently only
d367 3
a369 1
is supported.
d373 2
d391 2
a392 1
should queue up to 5 Mbit/s in four second-level queues using CBQ.
@


1.163
log
@Add support for active/inactive tablesets in the kernel.
Add table definition/initialisation construct in pfctl parser.
Add and fix documentation for pf.4 and pf.conf.5.
Tested on i386 and sparc64 by myself, macppc by Daniel.
ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.162 2002/12/30 23:58:46 mcbride Exp $
d1662 1
a1662 1
table-rule     = "table "<" tablename ">" [ "persist" ] [ "const" ]
@


1.162
log
@Match changes to pfctl and /etc/protocols. ipv6-icmp-type becomes icmp6-type;
"proto ipv6-icmp" still works, but prefer icmp6, since we have icmp6(4),
not ipv6-icmp(4).

ok dhartmei@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.161 2002/12/30 11:26:20 dhartmei Exp $
d43 1
a43 1
There are six types of statement in
d62 4
d731 1
a731 1
.Bl -tag -width no-route -compact
d736 2
d1022 63
d1662 3
d1702 1
a1702 1
host           = [ "!" ] address [ "/" mask-bits ]
d1707 1
@


1.161
log
@Remove stray 'hosts' on the nat-rule production in BNF, found by
Benjamin M.A. Robson.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.160 2002/12/28 22:15:47 mcbride Exp $
d849 1
a849 1
.It Pa ipv6-icmp-type <type> code <code>
d853 2
a854 2
ipv6-icmp.
The protocol and the icmp type indicator (icmp-type or ipv6-icmp-type)
d1569 1
a1569 1
                 [ icmp-type | ipv6-icmp-type ] | [ tos ] |
d1654 1
a1654 1
ipv6-icmp-type = "ipv6-icmp-type" ( icmp-type-code | "{" icmp-list "}" )
@


1.160
log
@More direct explanation of where the port number and protocol number to name
mappings come from.

ok dhartmei@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.159 2002/12/24 21:28:46 mcbride Exp $
d1575 1
a1575 1
nat-rule       = [ "no" ] "nat" "on" ifspec  [ af ] [ protospec ] hosts
@


1.159
log
@More cleanup.

- s/Em/Pa/ where appropriate
- get rid of references to spews and Tomcat
- more simplification by removal of direction
- timeout values are no longer a pfctl(8) thing

yes! henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.158 2002/12/23 18:42:20 henning Exp $
d714 1
a714 1
and
d716 4
d746 9
a754 1
Ports and ranges of ports can be specified using these operators:
d781 1
a781 1
	! 10.1.2.3 port != 22
@


1.158
log
@do not mention optimization default, as "set optimization default" is not
parseable. "normal" is exactly the same, so use that.
good catch by David Krause (again).
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.157 2002/12/23 15:18:51 mcbride Exp $
a95 1

d105 1
a105 1
.It Em interval
d107 1
a107 1
.It Em frag
d119 1
a119 1
.It Em tcp.first
d121 1
a121 1
.It Em tcp.opening
d123 1
a123 1
.It Em tcp.established
d125 1
a125 1
.It Em tcp.closing
d127 1
a127 1
.It Em tcp.finwait
d133 1
a133 1
.It Em tcp.closed
d141 1
a141 1
.It Em udp.first
d143 1
a143 1
.It Em udp.single
d146 1
a146 1
.It Em udp.multiple
d148 1
a148 1
.It Em icmp.first
d150 1
a150 1
.It Em icmp.error
d157 3
a159 3
.It Em other.first
.It Em other.single
.It Em other.multiple
d219 1
a219 1
.It Em high-latency
d224 1
a224 1
.It Em aggressive
d228 1
a228 1
.It Em conservative
d248 1
a248 1
.It Em drop
d250 1
a250 1
.It Em return
d423 1
a423 1
.It Em default
d426 1
a426 1
.It Em borrow
d428 1
a428 1
.It Em control
d430 1
a430 1
.It Em red
d434 1
a434 1
.It Em rio
d438 1
a438 1
.It Em ecn
d469 1
a469 1
.Em Packet Filtering
d509 1
a509 1
.It Em binat
d514 1
a514 1
.It Em nat
d530 1
a530 1
.It Em rdr
d609 1
a609 1
.It Em block
d621 1
a621 1
.It Em  drop
d623 1
a623 1
.It Em return-rst
d628 2
a629 2
.It Em return-icmp
.It Em return-icmp6
d633 1
a633 1
.It Em return
d639 1
a639 1
.It Em pass
d649 1
a649 2
    block in all
    block out all
d652 1
a652 1
as the first two rules.
d670 1
a670 1
.It Em log
d686 1
a686 1
.It Em log-all
d705 1
a705 1
.It <af>
d724 1
a724 1
.It Em any
d726 1
a726 1
.It Em no-route
d752 1
a752 1
.It Em port 2000 >< 2004
d756 1
a756 1
.It Em port 2000 <> 2004
d825 1
a825 1
.It Em flags S/S
d828 1
a828 1
.It Em flags S/SA
d832 1
a832 1
.It Em flags /SFRA
d836 2
a837 1
.It Pa icmp-type <type> code <code> and ipv6-icmp-type <type> code <code>
d867 1
a867 1
.It Em $if
d869 1
a869 1
.It Em $srcaddr
d871 1
a871 1
.It Em $dstaddr
d873 1
a873 1
.It Em $srcport
d875 1
a875 1
.It Em $dstport
d877 1
a877 1
.It Em $proto
d879 1
a879 1
.It Em $nr
d970 1
a970 1
.It Em bitmask
d975 1
a975 1
.It Em random
d979 1
a979 1
.It Em source-hash
d987 1
a987 1
.It Em round-robin
d1103 1
a1103 2
    block out all
    block in  all
d1140 1
a1140 1
.It Em max number
d1144 1
a1144 1
.It Em timeout seconds
d1147 2
a1148 2
.Xr pfctl 8 .
.El
d1210 1
a1210 1
.Pa TRAFFIC NORMALIZATION
d1283 1
a1283 1
.It Em nat-anchor name
d1288 1
a1288 1
.It Em rdr-anchor name
d1293 1
a1293 1
.It Em binat-anchor name
d1298 1
a1298 1
.It Em anchor name
d1312 1
a1312 1
.Em quick
d1338 1
a1338 1
    anchor spews
d1346 1
a1346 1
named "spews", and finally passes all outgoing connections and
d1352 1
a1352 1
	pfctl -a spews:manual -f -
d1371 1
a1371 1
    anchor spews proto tcp from any to any port smtp
d1378 1
a1378 1
spews are only evaluated for
d1384 1
a1384 1
	pfctl -a spews:manual -f -
d1390 1
a1390 1
which Apache Tomcat is running (say Tomcat is not run as root,
d1393 1
a1393 1
# map tomcat on 8080 to appear to be on 80
@


1.157
log
@Fix typo, pointed out by Dries Schellekens
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.156 2002/12/23 13:05:20 mcbride Exp $
d217 1
a217 1
.It Pa default
a219 3
.It Pa normal
Alias for
.Pa default
@


1.156
log
@A nudge towards reality:
- direction is now optional
- better way of specifying drop return rules
- wrap some lines which are too long.

ok dhartmei@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.155 2002/12/22 16:23:35 henning Exp $
d1356 1
a1356 1
    # echo "block in quick from 1.2.3.4 to any" \ \\
@


1.155
log
@consistency; grange@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.154 2002/12/18 07:45:37 deraadt Exp $
d567 1
a567 1
.Pa drop <direction> quick
d670 1
a670 1
Either
d674 1
a674 2
must be specified.
To cover both directions, two rules are needed.
d1043 1
a1043 2
    block out all
    block in  all
d1089 1
a1089 1
.Pa nat No or Pa rdr
d1356 2
a1357 1
    # echo "block in quick from 1.2.3.4 to any" | pfctl -a spews:manual -f -
d1388 2
a1389 1
    # echo "block in quick from 1.2.3.4 to any" | pfctl -a spews:manual -f -
d1487 1
a1487 6
block             out log on $ext_if           all
block             in  log on $ext_if           all
block return-rst  out log on $ext_if proto tcp all
block return-rst  in  log on $ext_if proto tcp all
block return-icmp out log on $ext_if proto udp all
block return-icmp in  log on $ext_if proto udp all
d1513 1
a1513 2
pass out on $ext_if inet proto icmp all icmp-type 8 code 0 keep state
pass in  on $ext_if inet proto icmp all icmp-type 8 code 0 keep state
d1555 1
a1555 1
pf-rule        = action ( "in" | "out" )
@


1.154
log
@how the heck did such a stupid mistake end up in here
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.153 2002/12/16 20:35:24 henning Exp $
d59 1
a59 1
.It Packet filtering
@


1.153
log
@nat after queue, good catch by marc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.152 2002/12/13 22:30:20 henning Exp $
d1290 1
a1290 1
.It Em anchor-nat name
d1295 1
a1295 1
.It Em anchor-rdr name
d1300 1
a1300 1
.It Em anchor-binat name
@


1.152
log
@minor glitch in the queue example
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.151 2002/12/13 21:54:31 henning Exp $
d269 1
a270 1
.Pa queue ,
@


1.151
log
@document extended queue syntax
help theo
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.150 2002/12/10 01:38:41 margarida Exp $
d487 1
a487 1
    block return out on $ext_if inet all queue std
@


1.150
log
@More nitpicking.
Correct placement of .Pp.
(Europeans do use nroff -mandoc)

deraadt@@ henning@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.149 2002/12/10 00:33:33 margarida Exp $
d452 11
d465 2
a466 3
queues, plus a few child queues. The
.Pa tos
field is used to give interactive
d468 1
a468 1
sessions priority over bulk transfers like
d492 2
a493 4
    pass out on dc0 inet proto tcp from any to any port 22 tos 0x10 \\
	keep state queue ssh_interactive #priority for interactive sessions
    pass out on dc0 inet proto tcp from any to any port 22 tos 0x08 \\
	keep state queue ssh_bulk        #less priority for scp/sftp/...
@


1.149
log
@More coherency: rule set(s) -> ruleset(s)

deraadt@@ henning@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.148 2002/12/09 22:23:35 deraadt Exp $
d713 1
a713 1
.Xr icmp6 .
d827 1
a827 1
Of SYN and ACK, exactly SYN is set.
d987 1
a987 1
option loops through the redirection address(s).
d1210 1
a1210 1
above, there are three options for handling fragments in the packet filter
d1234 2
a1235 1
.Pp never applies to a fragment, even if the fragment is part of a TCP
@


1.148
log
@show user & group correctly
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.147 2002/12/09 22:19:39 deraadt Exp $
d729 1
a729 1
rule set load-time.
d731 1
a731 1
for instance), the rule set must be reloaded for the change to be reflected
d736 1
a736 1
The rule set does not need to be reloaded. This is especially
d1042 1
a1042 1
This rule set blocks everything by default.
d1259 2
a1260 2
.Sh ANCHORS AND NAMED RULE SETS
Besides the main rule set,
d1262 1
a1262 1
can load named rule sets into
d1267 1
a1267 1
contains a list of named rule sets.
d1272 4
a1275 4
can be used to attach sub rule-sets.
A named rule set contains filter and translation rules, like the
main rule set.
The main rule set can reference
d1284 1
a1284 1
rules of all named rule sets in the specified
d1289 1
a1289 1
rules of all named rule sets in the specified
d1294 1
a1294 1
rules of all named rule sets in the specified
d1297 1
a1297 1
Evaluates the filter rules of all named rule sets in the specified
d1301 1
a1301 1
When evaluation of the main rule set reaches an
d1306 1
a1306 1
named rule sets attached to that
d1309 1
a1309 1
Matching filter rules in named rule sets with the
d1314 1
a1314 1
and the main rule set.
d1316 1
a1316 1
Only the main rule set can contain
d1322 1
a1322 1
contains more than one named rule set, they are evaluated
d1327 2
a1328 2
attachment points which do not contain any rules when the main rule set
is loaded, and later such named rule sets can be manipulated through
d1330 1
a1330 1
without reloading the main rule set.
d1342 1
a1342 1
all rule sets in the
d1352 1
a1352 1
loads a single rule set containing a single rule into the
d1365 1
a1365 1
This allows conditional evaluation of named rule sets, like:
@


1.147
log
@ARRHGHGHGHGHGHGH
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.146 2002/12/09 22:09:21 henning Exp $
d771 6
a776 3
.It Pa user <user> group <group>
The rule only applies to packets of sockets owned by the specified user
and group.
@


1.146
log
@document the "all" keyword; Theo
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.145 2002/12/09 09:44:30 deraadt Exp $
d770 1
a770 1
is the short form for "from any to any".
@


1.145
log
@two powerful words the germans should know: which and such
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.144 2002/12/08 20:59:08 henning Exp $
d769 2
@


1.144
log
@"flags X" is long dead, the /Y is mandantory now.
fix BNF and remove a now bogus comment
noticed during discussion with gustavo
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.143 2002/12/08 20:41:51 henning Exp $
d1322 2
a1323 2
attachment points that do not contain any rules when the main rule set
is loaded, and named rule sets can be manipulated through
@


1.143
log
@typo; gustavo
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.142 2002/12/08 00:22:16 deraadt Exp $
a815 1
If <b> is not set, all flags are specified.
d1634 1
a1634 2
flags          = "flags" ( flag-set | flag-set "/" flag-set |
                 "/" flag-set )
@


1.142
log
@scheduler keyword dies
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.141 2002/12/08 00:18:42 deraadt Exp $
d1622 1
a1622 1
redirost-list  = redirhost [ [","] redirhost-list ]
@


1.141
log
@BNF improvement: show that queue options are now flexible
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.140 2002/12/07 23:15:53 dhartmei Exp $
d365 1
a365 2
.Pa scheduler
type is required but currently only
d390 1
a390 1
    altq on dc0 scheduler cbq bandwidth 5Mb queue { std, http, mail, ssh }
d1586 1
a1586 1
                 [ "priority" number ] | [ "scheduler" schedulers ] | 
@


1.140
log
@Support parameters in anchor rules. Allows conditional evaluation, like:

  anchor spews inet proto tcp from any to any port smtp

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.139 2002/12/07 22:58:40 deraadt Exp $
d1537 2
a1538 2
line           = ( option | pf_rule | nat_rule | binat_rule | rdr_rule |
		 antispoof_rule | altq_rule | queue_rule )
d1542 2
a1543 2
		 "high-latency" | "satellite" |
		 "aggressive" | "conservative" ] ]
d1549 1
a1549 1
pf_rule        = action ( "in" | "out" )
d1562 28
a1589 28
nat_rule       = [ "no" ] "nat" "on" ifspec  [ af ] [ protospec ] hosts
		 "from" ipspec "to" ipspec [ portspec ]
		 [ "->" ( redirhost | "{" redirhost-list "}" )
		 [ portspec ] ] [ pooltype ] [ "static-port" ]

binat_rule     = [ "no" ] "binat" "on" interface-name [ af ]
		 [ "proto" ( proto-name | proto-number ) ]
		 "from" address [ "/" mask-bits ] "to" ipspec
		 [ "->" address [ "/" mask-bits ] ]

rdr_rule       = [ "no" ] "rdr" "on" ifspec [ af ] [ protospec ]
		 "from" ipspec "to" ipspec [ portspec ]
		 [ "->" ( redirhost | "{" redirhost-list "}" )
		 [ portspec ] ] [ pooltype ]

antispoof_rule = "antispoof" [ "log" ] [ "quick" ]
		 "for" ( interface-name | "{" interface-list "}" )
		 [ af ]

altq_rule      = "altq" "on" interface-name "scheduler" "cbq"
		 [ "bandwidth" number ( "b" | "Kb" | "Mb" | "Gb" ) ]
		 [ "qlimit" number ] [ "tbrsize" number ]
		 "queue" ( string | "{" queue-list "}" )

queue_rule     = "queue" string "bandwidth" number
		 ( "b" | "Kb" | "Mb" | "Gb" | "%" )
		 [ "priority" number ] [ "qlimit" number ] [ cbq-def ]
	         [ string | "{" queue-list "}" ]
d1595 2
a1596 2
icmpcode	= ( icmp-code-name | icmp-code-number )
icmp6code	= ( icmp6-code-name | icmp6-code-number )
d1602 3
a1604 3
		 ( routehost | "{" routehost-list "}" )
		 [ pooltype ]
af	       = "inet" | "inet6"
d1607 1
a1607 1
		 "{" proto-list "}" )
d1668 2
a1669 2
		 "source-hash" [ ( hex-key | string-key ) ] |
		 "round-robin" )
d1671 1
d1675 1
a1675 1
		 "red" | "ecn" | "rio" )
@


1.139
log
@repair BNF to show that filter-opts can now be flexibly ordered a
pass/block line
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.138 2002/12/06 00:47:32 dhartmei Exp $
d1347 1
d1352 29
@


1.138
log
@Introduce anchors and named rule sets, allowing to load additional rule
sets with pfctl and evaluate them from the main rule set using a new type
of rule (which will support conditional evaluation soon). Makes
maintenance of sub-rulesets simpler for pfctl and daemons.

Idea and ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.137 2002/12/05 15:00:47 henning Exp $
d43 1
a43 1
There are six types of statement in 
d57 1
a57 1
Translation rules specify how addresses are to be mapped or redirected to 
d66 1
a66 1
in the order shown above as this matches the operation of the underlying 
d69 2
a70 2
enforces this order (see 
.Pa set require-order 
d113 1
a113 1
connection will be updated to that of the proto.modifier which 
d275 1
a275 1
There may be non-trivial and non-obvious implications to an out of 
d290 1
a290 1
.Pa scrub 
d369 1
a369 1
The maximum rate for all queues on this interface is specified using the 
d453 1
a453 1
To continue the previous example, the examples below would specify the 
d462 2
a463 2
.Xr sftp 1 Ns . 
The queues may then be referenced by filtering rules (see 
d493 1
a493 1
packets associated with a stateful connection. A stateful connection is 
d594 3
a596 3
.Xr icmp6 4 Ns ) 
headers. 
In addition, packets may also be 
d612 1
a612 1
packets silently, however this can be overridden or made 
d671 1
a671 1
All packets for that connection are logged, unless the `keep state' 
d1517 1
a1517 1
                 [ "require-order" ( "yes" | "no" ) ] ).
d1522 9
a1530 7
                 hosts
                 [ user ] [ group ] [ flags ]
                 [ icmp-type | ipv6-icmp-type ] [ tos ]
                 [ ( "keep" | "modulate" ) "state" [ "(" state-opts ")" ] ]
                 [ "fragment" ] [ "no-df" ] [ "min-ttl" number ]
                 [ "max-mss" number ] [ fragmentation ] [ "allow-opts" ]
                 [ "label" string ] .
d1535 1
a1535 1
		 [ portspec ] ] [ pooltype ] [ "static-port" ].
d1540 1
a1540 1
		 [ "->" address [ "/" mask-bits ] ] .
d1545 1
a1545 1
		 [ portspec ] ] [ pooltype ] .
d1549 1
a1549 1
		 [ af ] .
d1554 1
a1554 1
		 "queue" ( string | "{" queue-list "}" ) .
d1559 1
a1559 1
	         [ string | "{" queue-list "}" ] .
d1561 2
a1562 4
action         = "pass" | "block" [ return ] | "scrub" .
return         = "drop" |
                 "return" |
                 "return-rst" [ "(" "ttl" number ")" ] |
d1564 3
a1566 3
                 "return-icmp6" [ "(" icmp6code ")" ] .
icmpcode	= ( icmp-code-name | icmp-code-number ) .
icmp6code	= ( icmp6-code-name | icmp6-code-number ) .
d1569 1
a1569 1
interface-list = [ "!" ] interface-name [ [ "," ] interface-list ] .
d1573 2
a1574 2
		 [ pooltype ] .
af	       = "inet" | "inet6" .
d1577 2
a1578 2
		 "{" proto-list "}" ) .
proto-list     = ( proto-name | proto-number ) [ [ "," ] proto-list ] .
d1584 1
a1584 1
                 "{" host-list "}" ) [ port ] .
d1586 3
a1588 3
ipspec         = "any" | host | "{" host-list "}" .
host           = [ "!" ] address [ "/" mask-bits ] .
redirhost      = address [ "/" mask-bits ] .
d1591 9
a1599 9
                 ipv4-dotted-quad | ipv6-coloned-hex ) .
host-list      = host [ [ "," ] host-list ] .
redirost-list  = redirhost [ [","] redirhost-list ] .
routehost-list = routehost [ [","] routehost-list ] .

port           = "port" ( unary-op | binary-op | "{" op-list "}" ) .
portspec       = "port" ( number | name ) [ ":" ( "*" | number | name ) ] .
user           = "user" ( unary-op | binary-op | "{" op-list "}" ) .
group          = "group" ( unary-op | binary-op | "{" op-list "}" ) .
d1602 3
a1604 3
                 ( name | number ) .
binary-op      = number ( "<>" | "><" ) number .
op-list        = ( unary-op | binary-op ) [ [ "," ] op-list ] .
d1607 1
a1607 1
                           "/" flag-set ) .
d1609 1
a1609 1
                 [ "W" ] .
d1611 2
a1612 2
icmp-type      = "icmp-type" ( icmp-type-code | "{" icmp-list "}" ) .
ipv6-icmp-type = "ipv6-icmp-type" ( icmp-type-code | "{" icmp-list "}" ) .
d1614 2
a1615 2
                 [ "code" ( icmp-code-name | icmp-code-number ) ] .
icmp-list      = icmp-type-code [ [ "," ] icmp-list ] .
d1618 1
a1618 1
                 [ "0x" ] number ) .
d1620 2
a1621 2
state-opts     = state-opt [ [ "," ] state-opts ] .
state-opt      = ( "max" number ) | ( timeout seconds ) .
d1624 1
a1624 1
                 "fragment drop-ovl" ] .
d1626 1
a1626 1
timeout-list   = timeout [ [ "," ] timeout-list ] .
d1631 2
a1632 2
                 "other.first" | "other.multiple" ) seconds .
seconds        = number .
d1634 2
a1635 2
limit-list     = limit [ [ "," ] limit-list ] .
limit          = ( "states" | "frags" ) number .
d1639 1
a1639 1
		 "round-robin" ) .
d1641 2
a1642 2
queue-list     = string [ [ "," ] string ] .
cbq-def        = "cbq" [ "(" cbq-type [ [ "," ] cbq-type ] ")" ] .
d1644 1
a1644 1
		 "red" | "ecn" | "rio" ) .
@


1.137
log
@typos; Dries Schellenkens, Thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.136 2002/12/05 12:28:02 deraadt Exp $
d1256 95
@


1.136
log
@more tweaking.  things above STATEFUL INSPECTION are now ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.135 2002/12/03 15:49:31 henning Exp $
d52 1
a52 1
Traffic normalization protects internal machines against inconsistancies
d595 1
a595 1
headbers. 
d893 1
a893 1
The macro expasion for the
d1041 1
a1041 1
The inital packet of each connection has the SYN flag set, will be passed
d1061 1
a1061 1
refer to a TCP or UDP packet, are matched against the refered to connection.
d1269 1
a1269 1
network appear as though it is the Internet routeable address
@


1.135
log
@add back clarification about percentage bandwidth spec; was accidently
removed; negotiated with harding@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.134 2002/12/03 10:47:53 deraadt Exp $
d344 7
a350 4
At least two rules are required to configure queues, and later
any packet filtering or rule can reference the defined
queues by name.
The last referenced queue name is where any packets from
d360 2
d363 1
a363 1
specifies on which interface queues will be set up.
d366 4
a369 1
type is required where currently only CBQ is supported. (XXX)
d371 1
a371 2
is optional and specifies the maximum rate for all queues on this interface.
If no value is given here, the interface's bandwidth is used.
d373 1
a373 1
in absolute and percentage values, where the latter ones are relative to the
d375 1
d377 2
a378 1
is optional and specifies the maximum number of packets in this queue.
d380 5
a384 4
is optional and specifies the token bucket regulator size. If not given,
heuristics based on the interface bandwidth are used.
All queues for this interface have to be listed after
.Pa queue .
d388 2
a389 1
should queue up to 5 Mbit/s in four queues using CBQ.
d394 6
a399 1
Parameters for the queues are specified in
d401 1
a401 1
rules. The queue name must match the definition in the
d403 4
a406 1
rule.
d408 5
a412 3
sets the maximum bitrate to be processed by this queue.
This value must not exceed the value of the parent queue and can be specified
as an absolute value or a percentage of the parent's bandwidth.
d415 6
a420 3
level can be set.
For CBQ, the range is 0..7 with a default of 1.
Queues with a higher priority level are preferred in the case of overload. (XXX)
d422 1
a422 1
specifies the maximum number of packets in this queue.
d448 1
a448 1
Furthermore child queues can be specified as in an
d450 2
a451 1
rule.
a490 3
Child queues must not exceed the bandwidth definition of the parent.
Relative values are calculated against the bandwidth of the parent queue.
.Pp
d540 1
a540 1
.Xr tcp
d542 1
a542 1
.Xr udp
d595 1
a595 1
headers. 
d617 1
a617 1
.Bl -tag -width xxxx -compact -offset indent
d619 1
a619 1
the packet is silently dropped.
d621 3
a623 1
applies only to tcp packets, and issues a TCP RST which closes the
d627 1
a627 1
return ICMP messages for packets which match the rule.
d631 3
a633 1
returns a TCP RST for tcp packets, an ICMP UNREACHABLE for UDP packets,
d709 6
a714 1
Common protocols are tcp, udp, icmp and ipv6-icmp.
d724 1
a724 1
means any address;
d726 1
a726 1
means any address which is not currently routable.
d893 3
a895 1
Variable expansion takes place at configuration file parse time.
d1003 2
a1004 1
only the initial packet and keep state.
d1006 4
a1009 3
If a packet matches a pass ... keep state rule, the filter creates
a state for this connection and automatically lets pass all following
packets of that connection.
d1021 1
a1021 1
This prevents spoofing attacks, where the attacker sends packets with
@


1.134
log
@merge tweaks from harding
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.133 2002/12/02 22:26:16 henning Exp $
d391 1
a391 1
as an absolute value or a percentage.
@


1.133
log
@explain bandwidth specs better and cope with the last changes
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.132 2002/12/01 22:21:38 henning Exp $
a41 1
A variety of definitions activate features:
d43 2
d47 2
a48 2
User-defined variables can be set and used later on, resulting in a
file which is more easily comprehended.
d50 1
a50 1
Various options can be changed to tune the default behaviour of the engine.
d53 1
a53 1
in Internet protocols.
d55 1
a55 1
A queuing engine allows for filtering rule based bandwidth control.
d57 2
a58 1
Translation rules specify which addresses are to be mapped or redirected.
d60 2
a61 1
Lastly, a stateful and stateless packet filtering can constrain packet flow.
d64 8
a71 3
In general, the above lines must occur in the order shown because this
matches the semantics of the underlying engine; in most cases rules
are evaluated in the order in which they are specified.
d74 1
a74 1
Much like in
d78 1
a78 1
macros can be set and later expanded.
d81 1
a81 1
Macro names may not be reserved words (e.g.
d96 1
a96 1
A variety of global options can be adjusted to tune
d98 1
a98 1
so that it performs better in various situations, using the
d112 3
a114 3
When a packet matches a stateful connection, the seconds to live of the
connection will be updated to that of the proto.modifier which corresponds
to the connection state.
d117 1
a117 1
firewall at the risk of dropping valid idled connections.
d119 1
a119 1
.Bl -tag -width "tcp.established " -compact
d138 1
a138 1
ICMP and UDP are handled in a similar fashion to TCP but with a much more
d141 1
a141 1
.Bl -tag -width "udp.multiple " -compact
d157 1
a157 1
.Bl -tag -width "other.multiple " -compact
d183 1
a183 1
One can unset the loginterface using
d214 1
a214 2
Optimize the engine to one of the following network topographies or
environments:
d216 1
a216 1
.Bl -tag -width "O high-latency " -compact
d229 1
a229 1
Aggressively expire connections when they are likely no longer valid.
d234 1
a234 1
Pains will be taken to avoid dropping legitimate connections at the
d247 1
a247 1
option sets the default behaviour for the
d251 1
a251 1
.Bl -tag -width return -compact
d253 1
a253 1
Packet is dropped silently
d255 2
a256 2
TCP packets are dropped with a TCP RST, UDP packets are dropped with an
ICMP UNREACHABLE, and all other packets are dropped silently.
d267 1
a267 1
enforces an ordering of the ruleset to: options,
d275 2
a276 2
One has to be very careful about the implications of an out of order
ruleset.
a282 3
Packet normalization is invoked via the
.Pa scrub
directive.
d286 3
d290 2
a291 1
A few options exist which affect scrub operation:
d326 1
a326 1
This reassembly mechanism does not yet work with NAT.
d332 1
a332 1
dropped and will cause the following corresponding fragments to be
d342 1
a342 1
Filtering rules can also assign packets to a queue for the purpose of bandwidth
d347 1
a347 1
The queue name last referenced is where any packets from
d355 1
a355 1
packets should be enqueued.
d361 1
a361 1
type is required where currently only CBQ is supported.
d385 1
a385 1
rules. The queuename must match the definition in the
d389 3
a391 4
sets the maximum bitrate that can be processed by this queue.
The value must not exceed the value of the parent queue and can be specified
in absolute and percentage values, the latter ones are relative to the parent
queue's bandwidth.
d396 1
a396 1
Queues with a higher priority level are preferred in the case of overload.
d410 1
a410 1
Control class packets (RSVP, IGMP, ICMP) are assigned to this queue.
d412 1
a412 1
Enables RED (Random Early Detection) on this queue.
d424 1
a424 1
Furthermore child queues can be specified like in an
d428 2
a429 1
Following the previous example, this would specify the four referenced
d437 4
a440 1
.Xr sftp 1 Ns .
d470 3
a472 3
Translation rules modify either the source or destination address of all
packets associated with a stateful connection which is automatically created
for packets matching such a rule.
d475 1
a475 1
the packet filter for evaluation.
d480 1
a480 3
and correctly direct return traffic on that connection.
.Pp
A variety of translation types rules are available with pf:
d482 1
d539 1
a539 1
works in the packet filter.
d541 3
a543 4
If no rule matches the packet, the default action is to pass the packet
up to the filter unmodified.
Translation occurs before the other filters are applied.
Hence, rules for redirected packets should specify the address and port
d545 1
d563 1
a563 1
packets based on a variety of attributes of their layer 2 (see
d572 3
a574 3
.Xr icmp6 4 Ns )
headers.
In addition, packets which are passed or blocked can be
d590 2
a591 2
packets silently, however this can be overridden or made explicit
globally by setting the
d593 1
a593 1
option, or on a per-rule basis with the following options:
d595 1
a595 1
.Bl -tag -width "return-icmp6" -compact -offset indent
d604 2
a605 2
By default this is an ICMP UNREACHABLE message, however the type
of message can be overridden by specifying it as a code or number.
d626 1
a626 1
The rule parameters specify for what packets a rule applies.
d633 1
a633 1
generates all needed rule combinations:
d645 4
a648 2
Not only the packet that creates state is logged, but all packets of
the connection.
d664 5
a668 7
rules.
The same rules as for
.Pa log
regarding
.Xr pflog 4
also apply to
.Pa log-all .
d683 1
a683 1
Common protocols used here are tcp, udp, icmp and ipv6-icmp.
d686 1
a686 1
addresses/ports.
d700 1
a700 1
When the address of an interface (or host name) changes (by DHCP or PPP,
d703 6
a708 3
Interface names surrounded by parentheses cause an automatic update of
the rule whenever the referenced interface changes its address.
Reloading the rule set is not required in this case.
d710 1
a710 1
Ports can be specified using these operators
d730 1
a730 2
The host and port specifications are optional, as the following examples
show:
@


1.132
log
@little clarification about the valid priority numbers
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.131 2002/11/28 14:58:58 henning Exp $
d356 4
d383 2
a384 1
in absolute and percentage values.
@


1.131
log
@+qlimit
+tbrsize
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.130 2002/11/27 17:52:53 deraadt Exp $
d383 1
a383 1
The range is 0..7 with a default of 1.
@


1.130
log
@more tweaking
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.129 2002/11/27 17:04:30 deraadt Exp $
d356 5
d385 2
d1404 1
d1409 1
a1409 1
		 [ "priority" number ] [ cbq-def ]
@


1.129
log
@move even closer to where we want to be
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.128 2002/11/26 23:18:36 deraadt Exp $
d1144 5
a1148 4
There are four options for handling fragments in the packet filter:
.Pp
Use scrub rules.  See the section on
.Pa TRAFFIC NORMALIZATION.
a1197 1
.Pa Binat
@


1.128
log
@more tweaks
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.127 2002/11/26 22:50:54 deraadt Exp $
d443 1
a443 2
Please note that child queues must not exceed the bandwidth definition
of the parent.
d460 1
d462 5
d468 15
a482 1
rules operate on outgoing connections, translating the source address.
d484 2
a485 5
rules operate on incoming connections, translating the destination address.
.It binat
rules (Bidirection NAT) behave somewhat like a combination of both
.Pa nat
and
d487 5
a491 1
and create a one-to-one mapping between two netblocks of equal size.
a509 1
Each rule either matches the packet or doesn't.
d521 1
a521 2
It should be noted that all translations of packets occur before
the filters are applied.
d524 1
a524 1
Note that all translation rules apply only to packets that pass through
d531 1
a531 1
Redirections can't reflect packets back through the interface they arrive
d544 2
a545 2
.Xr ip6 4
) and layer 3 (see
d550 3
a552 2
.Xr icmp6 4
) headers. In addition, packets which are passed or blocked can be
a556 1
Each rule either matches the packet or doesn't.
d559 1
a559 2
If no rule matches the packet, the default action is
.Pa pass .
d561 1
a561 11
To block everything by default and only pass packets
that match explicit rules, one uses
.Bd -literal
    block in all
    block out all
.Ed
.Pp
as the first two rules.
.Pp
.Sh ACTIONS
.Bl -tag -width Fl
d590 7
a596 20
.It Em scrub
The packet is run through normalization/defragmentation.
Scrub rules are not considered last matching rules.
IPv6 packets are not defragmented.
.It Em binat
A
.Pa binat
rule specifies a bidirectional mapping between an external IP netblock
and an internal IP netblock.
.It Em nat
A
.Pa nat
rule specifies that IP addresses are to be changed as the packet
traverses the given interface.
This technique allows one or more IP addresses
on the translating host to support network traffic for a larger range of
machines on an "inside" network.
Although in theory any IP address can be used on the inside, it is strongly
recommended that one of the address ranges defined by RFC 1918 be used.
These netblocks are:
d598 2
a599 3
10.0.0.0    - 10.255.255.255 (all of net 10, i.e., 10/8)
172.16.0.0  - 172.31.255.255 (i.e., 172.16/12)
192.168.0.0 - 192.168.255.255 (i.e., 192.168/16)
d601 2
a602 10
.It Em rdr
The packet is redirected to another destination and possibly a
different port.
.Pa rdr
rules can optionally specify port ranges instead of single ports.
\'rdr ... port 2000:2999 -> ... port 4000\' redirects ports 2000 to 2999
(including port 2000 and 2999) to the same port 4000.
\'rdr ... port 2000:2999 -> ... port 4000:*\' redirects port 2000 to 4000,
2001 to 4001, ..., 2999 to 4999.
.El
d693 1
a693 1
doesn't include the limits, for instance:
d722 1
a722 1
For forwarded connections, where the firewall isn't a connection endpoint,
d733 4
a736 4
Note that user and group IDs are stored when a socket is created;
when a process creates a listening socket as root (for instance, because
it wants to bind to a privileged port) and subsequently sets another
user ID (to drop privileges), the socket's uid remains root.
d770 1
a770 1
SYN, SYN+PSH, SYN+RST match, but SYN+ACK, ACK and ACK+RST don't.
d795 1
a795 1
rule that is used when a packet doesn't match any rules does not
d838 1
a838 1
Note that evaluation takes place at parse time.
d963 1
a963 1
a fake source address/port but doesn't know the connection's sequence
d1069 1
a1069 1
.Sh STATEFUL OPTIONS
a1132 9
.Sh FILTERING ON LOOPBACK INTERFACES
There's hardly a point in filtering on loopback interfaces such as lo0.
Every packet seen there is sent from and to the local host.
One may want to include these rules at the very beginning
of their ruleset to pass all traffic on lo0:
.Bd -literal
    pass in quick on lo0 all
    pass out quick on lo0 all
.Ed
d1174 1
a1174 1
This also means that fragments can't create new or match existing
a1195 70
.Sh FILTER EXAMPLES
.Bd -literal
# The external interface is kue0
# (157.161.48.183, the only routable address)
# and the private network is 10.0.0.0/8, for which we are doing NAT.

# use a macro for the interface name, so it can be changed easily
ext_if = "kue0"

# normalize all incoming traffic
scrub in on $ext_if all fragment reassemble

# block and log everything by default
block             out log on $ext_if           all
block             in  log on $ext_if           all
block return-rst  out log on $ext_if proto tcp all
block return-rst  in  log on $ext_if proto tcp all
block return-icmp out log on $ext_if proto udp all
block return-icmp in  log on $ext_if proto udp all

# block anything coming from source we have no back routes for
block in from no-route to any

# block and log outgoing packets that don't have our address as source,
# they are either spoofed or something is misconfigured (NAT disabled,
# for instance), we want to be nice and don't send out garbage.
block out log quick on $ext_if from ! 157.161.48.183 to any

# silently drop broadcasts (cable modem noise)
block in quick on $ext_if from any to 255.255.255.255

# block and log incoming packets from reserved address space and invalid
# addresses, they are either spoofed or misconfigured, we can't reply to
# them anyway (hence, no return-rst).
block in log quick on $ext_if from { 10.0.0.0/8, 172.16.0.0/12, \\
        192.168.0.0/16, 255.255.255.255/32 } to any

# ICMP

# pass out/in certain ICMP queries and keep state (ping)
# state matching is done on host addresses and ICMP id (not type/code),
# so replies (like 0/0 for 8/0) will match queries
# ICMP error messages (which always refer to a TCP/UDP packet) are
# handled by the TCP/UDP states
pass out on $ext_if inet proto icmp all icmp-type 8 code 0 keep state
pass in  on $ext_if inet proto icmp all icmp-type 8 code 0 keep state

# UDP

# pass out all UDP connections and keep state
pass out on $ext_if proto udp all keep state

# pass in certain UDP connections and keep state (DNS)
pass in on $ext_if proto udp from any to any port domain keep state

# TCP

# pass out all TCP connections and modulate state
pass out on $ext_if proto tcp all modulate state

# pass in certain TCP connections and keep state (SSH, SMTP, DNS, IDENT)
pass in on $ext_if proto tcp from any to any port { ssh, smtp, domain, \\
        auth } flags S/SA keep state

# pass in data mode connections for ftp-proxy running on this host.
# (see ftp-proxy(8) for details)
pass in on $ext_if proto tcp from any to 157.161.48.183 port >= 49152 \\
        flags S/SA keep state

.Ed
d1277 70
@


1.127
log
@tiny spacing nit
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.126 2002/11/26 22:46:27 mcbride Exp $
d96 1
d208 1
d243 1
d410 8
a417 2
queues, plus a few child queues. The tos field is used to give interactive
ssh sessions priority over bulk transfers over ssh like scp and sftp.
d1541 1
a1541 1
.Xr icmp 4
@


1.126
log
@Fix various nits:
- references to ip(4) et. al.
- Remove extra whitespace
- Finish some uncompleted sentences
- s/traffic shaping/bandwidth control/

ok deraadt@@, frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.125 2002/11/26 20:19:56 henning Exp $
d378 1
a378 1
.Pa cbq( <parameters> ) .
@


1.125
log
@fancier queue example
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.124 2002/11/26 19:20:12 henning Exp $
d331 2
a332 1
Filtering rules can also assign packets to a queue,
a451 1
.Pp
d453 7
a459 7
.It Pa nat
These rules operate on outgoing connections, translating the source address.
.It Pa rdr
These rules operate on incoming connections, translating the destination address.
.It Pa binat
These rules (Bidirection NAT) behave somewhat like a combination of both
.Ba nat
d465 6
a470 3
In addition to modifying the address, some translation rules may also modify
source or destination ports for TCP or UDP connections.
In the case of
d472 1
a472 2
rules this is possible,
while it is explicit in the case of
d479 5
d489 1
a489 5
works when doing regular filtering.
.Pp
For each packet processed by the translator, the translation rules are
evaluated in sequential order, from first to last.
The first matching rule decides what action is taken.
d492 1
a492 1
on to the filter rules unmodified.
d495 2
a496 2
Hence, filtering rules for redirected packets must match based on
the address and port after translation.
d514 12
a525 3
packets based on a variety of attributes of their layer 2 (IP) and layer 3
(Transport) headers. In addition, packets which are passed or blocked can be
assigned to queues for the purpose of traffic shaping.
d543 1
d1527 7
a1533 1
.Xr pflogd 8
@


1.124
log
@fix queue example
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.123 2002/11/26 19:13:05 deraadt Exp $
d357 1
a357 1
should queue up to 5 Mbit/s in two queues using CBQ.
d359 1
a359 1
    altq on dc0 scheduler cbq bandwidth 5Mb queue { qname1, qname2 }
d405 26
a430 7
Following the previous example, this would specify the two referenced
queues, plus one child queue:
.Pp
.Bd -literal
    queue qname1 bandwidth 50% cbq(default ecn) { qname1a }
    queue  qname1a bandwidth 1Mb cbq(borrow)
    queue qname2 bandwidth 1000b priority 3
@


1.123
log
@more cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.122 2002/11/26 19:09:07 deraadt Exp $
d411 1
a411 1
    queue qname2 bandwidth 1000 priority 3
@


1.122
log
@more cleanup, and nat parts from mcbride
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.121 2002/11/25 04:05:51 deraadt Exp $
d1337 1
a1337 1
		   antispoof_rule | altq_rule | queue_rule )
d1340 7
a1346 7
                       [ "optimization" [ "default" | "normal" |
				"high-latency" | "satellite" |
				"aggressive" | "conservative" ] ]
                       [ "limit" ( limit | "{" limit-list "}" ) ] |
                       [ "loginterface" ( interface-name | "none" ) ] |
                       [ "block-policy" ( "drop" | "return" ) ] |
                       [ "require-order" ( "yes" | "no" ) ] ).
d1419 1
a1419 1
                   ipv4-dotted-quad | ipv6-coloned-hex ) .
d1446 1
a1446 1
                         [ "0x" ] number ) .
d1452 1
a1452 1
                   "fragment drop-ovl" ] .
@


1.121
log
@another pass, sigh
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.120 2002/11/25 03:44:12 henning Exp $
d53 2
a56 2
.It Queueing
A queuing engine allows for filtering rule based bandwidth control.
d331 1
a331 1
Filtering rules can also assign packets to a queue.
d333 1
a333 1
any basic filtering or NAT rule can reference the defined
d419 13
a431 1
Where is the section discussion NAT / translation?
a432 1
This is the only part of NAT that is fucking documented:
d434 10
a443 2
.It Pa no
Causes matching packets to remain untranslated.
d446 11
a456 2
.Sh PACKET FILTERING
The sentence below is COMPLETELY wrong for an intruduction on *FILTERING*
d458 6
a463 23
While filter rules are typically manipulated using
.Xr pfctl 8
other utilities may be written using the
.Xr ioctl 2
interface described in
.Xr pf 4 .
.Pp
For each packet processed by the packet filter, the filter rules are
evaluated in sequential order, from first to last.
Each rule either matches the packet or doesn't.
The last matching rule decides what action is taken.
.Pp
If no rule matches the packet, the default action is
.Pa pass .
.Pp
To block everything by default and only pass packets
that match explicit rules, one uses
.Bd -literal
    block in all
    block out all
.Ed
.Pp
as the first two rules.
a466 1
Each rule either matches the packet or doesn't.
d470 1
a470 1
up to the filter unmodified.
d473 2
a474 2
Hence, rules for redirected packets should specify the address and port
after translation.
d485 27
d661 3
a663 2
    = (equal), != (unequal), < (lesser), <= (lesser or equal), > (greater),
    >= (greater or equal), >< (range) and <> (except range).
d686 2
a687 1
    pass in proto tcp from 10.0.0.0/8 port > 1024 to ! 10.1.2.3 port != 22
d729 2
a730 1
    pass  out proto { tcp, udp } all user { < 1000, dhartmei } keep state
d800 2
a801 1
    pass in proto tcp from any to $ips port >1023 label "$dstaddr:$dstport"
d806 4
a809 2
    pass in proto tcp from any to 1.2.3.4 port >1023 label "1.2.3.4:>1023"
    pass in proto tcp from any to 1.2.3.5 port >1023 label "1.2.3.5:>1023"
d894 4
a897 17
ensuring that the redirection address is always the same for a given source.
The option can additionally be modified as follows:
.Bl -tag -width "random" -compact -offset indent
.It Em key
The
.Pa key
option for
.Pa source-hash
allows one to specify a string used by pfctl to generate a key which is hashed
in with the source address.
.It Em random
The
.Pa random
option for
.Pa source-hash
randomly generates a key for source-hash every time the ruleset is reloaded.
.El
d989 3
a991 2
lets echo requests
.Pq pings
d994 3
a996 1
Note: nat/rdr rules implicitly create state for connections.
d1250 1
d1273 3
a1275 1
The "no nat" rule excludes protocol AH from being translated.
d1361 2
a1362 2
		 [ "->" ( redirhost | "{" redirhost-list "}" ) [ portspec ] ]
		 [ pooltype ] [ "static-port" ].
d1371 2
a1372 2
		 [ "->" ( redirhost | "{" redirhost-list "}" ) [ portspec ] ]
		 [ pooltype ] .
d1404 2
a1405 1
protospec      = "proto" ( proto-name | proto-number | "{" proto-list "}" ) .
d1465 3
a1467 1
pooltype       = ( "bitmask" | "random" | "source-hash" | "round-robin" ) .
d1471 2
a1472 1
cbq-type       = ( "default" | "control" | "borrow" | "red" | "ecn" | "rio" ) .
@


1.120
log
@fix queue example
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.119 2002/11/25 03:38:17 deraadt Exp $
d208 1
a208 1
.It Em default
d211 1
a211 1
.It Em normal
d213 1
a213 1
.Em default
d216 1
a216 1
.It Em satellite
d218 1
a218 1
.Em high-latency
d237 1
a237 1
.Em block-policy
d239 1
a239 1
.Em block
d263 1
a263 1
.Em no
d336 1
a336 1
.Em pass
d338 1
a338 1
.Em block
d340 1
a340 1
.Em icmp
d342 1
a342 1
.Em TCP RST
d345 1
a345 1
.Em altq on
d348 1
a348 1
.Em scheduler
d350 1
a350 1
.Em bandwidth
d353 1
a353 1
.Em queue .
d363 1
a363 1
.Em queue
d365 1
a365 1
.Em altq
d367 1
a367 1
.Em bandwidth
d372 1
a372 1
.Em priority
d377 1
a377 1
.Em cbq( <parameters> ) .
d402 1
a402 1
.Em altq
d443 1
a443 1
.Em pass .
d480 1
a480 1
.Em block
d482 1
a482 1
.Em drop
d485 1
a485 1
.Em block-policy
d511 1
a511 1
.Em binat
d516 1
a516 1
.Em nat
d533 1
a533 1
.Em rdr
d553 1
a553 1
.Em in
d555 1
a555 1
.Em out
d568 1
a568 1
.Em /var/log/pflog
d659 1
a659 1
.Em unknown .
d676 1
a676 1
.Em unknown
d678 1
a678 1
.Em unknown
d683 1
a683 1
.Em unknown
d720 1
a720 1
.Em allow-opts
d722 1
a722 1
.Em pass
d728 1
a728 1
.Em pass
d734 1
a734 1
.Em pfctl -s labels
d789 1
a789 1
.Em fastroute
d793 1
a793 1
.Em route-to
d797 1
a797 1
.Em route-to
d804 1
a804 1
.Em reply-to
d806 1
a806 1
.Em route-to
d810 1
a810 1
.Em route-to
d817 1
a817 1
.Em dup-to
d819 1
a819 1
.Em route-to.
d825 1
a825 1
.Em nat
d827 1
a827 1
.Em rdr
d829 2
a830 2
.Em route-to ,
.Em reply-to
d832 1
a832 1
.Em dup-to
d840 1
a840 1
.Em bitmask
d845 1
a845 1
.Em random
d849 1
a849 1
.Em source-hash
d856 1
a856 1
.Em key
d858 1
a858 1
.Em source-hash
d863 1
a863 1
.Em random
d865 1
a865 1
.Em source-hash
d870 1
a870 1
.Em round-robin
d874 1
a874 1
.Em round-robin
d878 1
a878 1
.Em nat
d880 1
a880 1
.Em static-port
d954 1
a954 1
For example
d1031 1
a1031 1
      keep state (max 100, tcp.established 60, tcp.closing 5)
d1080 2
a1081 2
pass in quick on lo0 all
pass out quick on lo0 all
d1097 1
a1097 1
.Em TRAFFIC NORMALIZATION.
d1116 8
a1123 4
For instance, the rule 'pass in proto tcp from any to any port 80' never
applies to a fragment, even if the fragment is part of a TCP packet with
destination port 80, because without reassembly, this information is not
available for each fragment.
@


1.119
log
@more crap tuning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.118 2002/11/25 03:25:56 deraadt Exp $
d409 1
a409 1
    queue qname1 bandwidth 50% cbq(default ecn) queue { qname1a }
@


1.118
log
@I am sick of this thing.  It does not follow the rules of manual pages.
Reoganize it, start to use the proper commands that one uses when writing
man pages, and damn well do not continue to make this a "different for
the hell of it" game.  One writes manual pages by reading the source of
others; if you cannot do it that way, stay the hell away.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.117 2002/11/24 23:06:04 henning Exp $
d35 1
a35 2
.Nd filtering, translation (NAT) and queue rules file for the
packet filter
d66 14
a79 1
Where is the fucking introductory paragraph for this section?
a80 2
.Xr pfctl 8
supports macro definition and expansion like:
a86 4
Macro names must start with a letter and may contain letters, digits
and underscores.
Macro names may not be pf reserved words (e.g.  pass, in, out).
Macros are not expanded recursively.
d154 2
a155 1
Example:
d167 3
a169 1
In this example pf is told to collect statistics on the interface named dc0:
d229 3
a231 1
Example:
d248 3
a250 1
Example:
d355 1
a355 1
For example, the interface
d422 1
a422 1
.Bl -item -width xxxx
d756 2
a757 1
Example:
d774 1
a774 1
Example:
d881 3
a883 1
option prevents pf from modifying the source port on tcp and udp packets.
@


1.117
log
@consistency; s/nat/translation/ a few times

ok pb@@ mcbride@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.116 2002/11/24 18:12:12 pb Exp $
d40 21
a60 20
packet filter drops, passes and modifies packets according to the
rules defined in this file.
Filter rules are used to selectively pass traffic while translation
rules specify which addresses are to be mapped and which are to be
redirected.
For each packet inspected by the filter, the set of rules is evaluated
from top to bottom, and the last matching rule decides what action is
performed.
For each packet inspected by the translator, the set of rules is evaluated
from top to bottom, and the first matching rule decides what action is
performed.
In short: filters are last match, translation is first match.
Rules must be in order: options, scrub, translation, queue, filter.
.Sh FILTER RULES
While filter rules are typically manipulated using
.Xr pfctl 8
other utilities may be written using the
.Xr ioctl 2
interface described in
.Xr pf 4 .
d62 3
a64 4
For each packet processed by the packet filter, the filter rules are
evaluated in sequential order, from first to last.
Each rule either matches the packet or doesn't.
The last matching rule decides what action is taken.
d66 2
a67 2
If no rule matches the packet, the default action is
.Em pass .
d69 2
a70 2
To block everything by default and only pass packets
that match explicit rules, one uses
d72 3
a74 2
    block in all
    block out all
d77 10
a86 1
as the first two rules.
d88 2
a89 23
For each packet processed by the translator, the translation rules are
evaluated in sequential order, from first to last.
Each rule either matches the packet or doesn't.
The first matching rule decides what action is taken.
.Pp
If no rule matches the packet, the default action is to pass the packet
up to the filter unmodified.
It should be noted that all translations of packets occur before
the filters are applied.
Hence, rules for redirected packets should specify the address and port
after translation.
Note that all translation rules apply only to packets that pass through
the specified interface.
For instance, redirecting port 80 on an external interface to an internal
web server will only work for connections originating from the outside.
Connections to the address of the external interface from local hosts will
not be redirected, since such packets do not actually pass through the
external interface.
Redirections can't reflect packets back through the interface they arrive
on, they can only be redirected to hosts connected to different interfaces
or to the firewall itself.
.Sh OPTIONS
.Ss timeout
d153 1
a153 1
.Ss loginterface
d169 1
a169 1
.Ss limit
d187 3
a189 1
reassembly (generated by 'scrub' rules) to 20000.
d195 1
a195 1
.Ss optimization
d224 1
a224 1
.Ss block-policy
d241 1
a241 1
.Ss require-order
d244 4
a247 1
enforces an ordering of the ruleset to: options, scrub, translation, queue,
d254 208
d471 1
a471 1
globally by setting the 
d473 1
a473 1
option, or on a per-rule basis with the following options: 
d484 1
a484 1
By default this is an ICMP UNREACHABLE message, however the type 
d534 4
a537 3
.Em pfctl
generates all needed rule combinations.
.Ss in or out
a544 2
.Ss log
.Bl -tag -width Fl
a546 6
.It Em log-all
Used with 
.Sq keep state
or
.Sq modulate state
rules.
a548 2
.El
.Pp
d550 1
a550 1
.Em pflog0
d559 14
a572 2
.Ss quick
If a packet matches a rule which has the 
d577 1
a577 1
.Ss on <interface>
d580 1
a580 1
.Ss <af>
d583 1
a583 1
.Ss proto <protocol>
d586 1
a586 1
.Ss from <source> port <source> to <dest> port <dest>
d592 1
d601 1
a601 1
rule set load-time. 
d619 1
a619 1
means 
d623 1
a623 1
means 
d637 1
a637 1
.Ss user <user> group <group>
d679 1
a679 1
.Ss flags <a>/<b> | /<b>
d697 1
a697 1
.Ss icmp-type <type> code <code> and ipv6-icmp-type <type> code <code>
d704 1
a704 1
.Ss allow-opts
d718 1
a718 1
.Ss label <string>
d756 1
a756 1
.Ss queue <string>
d765 2
a766 7
.Sh NO
The
.Sq no
option is to a translation rule what the
.Sq quick
option is to a filter rule.
This option causes matching packets to remain untranslated.
d772 2
a773 1
.Ss fastroute
d777 1
a777 1
.Ss route-to
d788 1
a788 1
.Ss reply-to
d801 1
a801 1
.Ss dup-to
d807 2
d810 1
a810 2
.Ss <pooltype>
For 
d815 1
a815 2
.Em route-to
,
d822 2
a823 2
used: 
.Bl -tag -width Fl
d845 1
a845 1
allows you to specify a string used by pfctl to generate a key which is hashed
a857 1
.El
d859 1
a859 1
When more than one redirection address is specified, 
d862 1
a862 1
.Ss static-port
d868 1
a868 13
.Sh MACROS
.Em pfctl
supports macro definition and expansion like:
.Bd -literal
    ext_if = "kue0"
    pass out on $ext_if           from any to any         keep state
    pass in  on $ext_if proto tcp from any to any port 25 keep state
.Ed
.Pp
Macro names must start with a letter and may contain letters, digits
and underscores.
Macro names may not be pf reserved words (e.g.  pass, in, out).
Macros are not expanded recursively.
d870 1
a870 1
.Em pf
d917 1
a917 1
intermediate 
d921 1
a921 1
.Em pf
d936 1
a936 1
.Em pf
d943 1
a943 1
lets echo requests 
d954 2
a955 2
By applying a "modulate state" rule to a TCP connection, 
.Em pf
d971 1
a971 1
.Em pf
d977 1
a977 1
.Em pf
d991 1
a991 1
shifted its sequence by a random amount. 
d994 7
a1000 2
.Sh STATE OPTIONS
Both "keep state" and "modulate state" support the following options:
a1016 24
.Sh NORMALIZATION
Packet normalization is invoked via the
.Pa scrub
directive.
Normalization is used to sanitize packet content in such
a way that there are no ambiguities in packet interpretation on
the receiving side.
.Pp
The normalizer does IP fragment reassembly to prevent attacks
that confuse intrusion detection systems by sending overlapping
IP fragments.
.Ss no-df
Clears the
.Pa dont-fragment
bit from a matching ip packet.
.Ss min-ttl <number>
Enforces a minimum ttl for matching ip packets.
.Ss max-mss <number>
Enforces a maximum mss for matching tcp packets.
.Pp
Normalization occurs before filtering, scrub rules and pass/block
rules are evaluated independently.
Hence, their relative position in the rule set is not relevant,
and packets can't be blocked before normalization.
d1020 1
a1020 1
The 
d1022 3
a1024 3
directive expands to a set of filter rules which will block all 
traffic with a source IP from the network(s) directly connected 
to the specified interface(s) from entering the system through 
d1034 2
a1035 2
    block in on ! lo0 inet from 127.0.0.1/8 to any 
    block in on ! lo0 inet6 from ::1 to any 
d1038 1
a1038 1
For non-loopback interfaces, there are additional rules to block incoming 
d1049 2
a1050 2
    block in on ! wi0 inet from 10.0.0.1/24 to any 
    block in inet from 10.0.0.1 to any 
a1066 90
.Sh QUEUE RULES
Filtering rules can also assign packets to a queue.
At least two rules are required to configure queues, following
which any
.Em pass
or
.Em block
rule can reference the defined queues by name.
The queue name last referenced is where any packets from
.Em pass
rules will be queued, while for
.Em block
rules it specifies where any resulting
.Em icmp
or
.Em TCP RST
packets should be enqueued.
.Pp
.Em altq on
specifies on which interface queues will be set up.
The
.Em scheduler
type is required where currently only CBQ is supported.
.Em bandwidth
is optional and specifies the maximum rate for all queues on this interface.
All queues for this interface have to be listed after
.Em queue .
.Pp
For example, the interface
.Pa dc0
should queue up to 5 Mbit/s in two queues using CBQ.
.Bd -literal
    altq on dc0 scheduler cbq bandwidth 5Mb queue { qname1, qname2 }
.Ed
.Pp
Parameters for the queues are specified in
.Em queue
rules. The queuename must match the definition in the
.Em altq
rule.
.Em bandwidth
sets the maximum bitrate that can be processed by this queue.
The value must not exceed the value of the parent queue and can be specified
in absolute and percentage values.
Between queues a
.Em priority
level can be set.
The range is 0..7 with a default of 1.
Queues with a higher priority level are preferred in the case of overload.
The scheduler can get additional parameters with
.Em cbq( <parameters> ) .
Parameters are as follows:
.Pp
.Bl -tag -width Fl
.It Em default
Packets not matched by another queue are assigned to this one.
Exactly one default queue is required.
.It Em borrow
The queue can borrow bandwidth from the parent.
.It Em control
Control class packets (RSVP, IGMP, ICMP) are assigned to this queue.
.It Em red
Enables RED (Random Early Detection) on this queue.
RED drops packets with a probability proportional to the average
queue length.
.It Em rio
Enables RIO on this queue. RIO is RED with IN/OUT, thus running
RED two times more then RED would do.
RIO is currently not supported in the GENERIC kernel.
.It Em ecn
Enables ECN (Explicit Congestion Notification) on this queue.
ECN implies RED.
.El
.Pp
Furthermore child queues can be specified like in an
.Em altq
rule.
.Pp
Following the previous example, this would specify the two referenced
queues, plus one child queue:
.Pp
.Bd -literal
    queue qname1 bandwidth 50% cbq(default ecn) queue { qname1a }
    queue  qname1a bandwidth 1Mb cbq(borrow)
    queue qname2 bandwidth 1000 priority 3
.Ed
.Pp
Please note that child queues must not exceed the bandwidth definition
of the parent.
Relative values are calculated against the bandwidth of the parent queue.
d1071 1
a1071 1
the large packet will be fragmented into many smaller packets that will each 
d1075 1
a1075 1
.Em pf
d1080 2
a1081 39
Using scrub rules, fragments can be reassembled by normalization.
In this case, fragments are buffered until they form a complete
packet, and only the completed packet is passed on to the filter.
The advantage is that filter rules have to deal only with complete
packets, and can ignore fragments.
The drawback of caching fragments is the additional memory cost.
But the full reassembly method is the only method that currently works with NAT.
Full reassembly is triggered by the
.Pa fragment reassemble
modifier on a
.Pa scrub
rule.  This is the default behavior of a
.Pa scrub
rule if no fragmentation modifier is supplied.
.Pp
Scrub also has two additional methods to track fragments without the
high memory cost of full reassembly.
The first is enabled via the
.Pa fragment crop
modifier.
.Em pf
will track the fragments and cache a small range descriptor.
Duplicate fragments are dropped and overlaps are cropped.
Thus data will only occur once on the wire with ambiguities resolving to
the first occurrence.
Unlike the
.Pa fragment reassemble
modifier, fragments are not buffered, they are passed as soon as they
are received.
This reassembly mechanism does not yet work with NAT.
.Pp
Scrub's other method is the
.Pa fragment drop-ovl
modifier.
It is almost identical to the
.Pa fragment crop
modifier except that all overlapping or duplicate fragments will be
dropped and will cause the following corresponding fragments to be
dropped as well.
d1084 3
a1086 1
If no scrub rule applies to a fragment, it is passed to the filter.
d1161 1
a1161 1
	192.168.0.0/16, 255.255.255.255/32 } to any
d1188 1
a1188 1
	auth } flags S/SA keep state
d1193 1
a1193 1
	flags S/SA keep state
d1254 1
a1254 1
	port 500
d1266 1
a1266 1
	port 22
d1268 1
a1268 1
	port 53
d1277 1
a1277 1
.Em pf.conf
d1284 2
a1285 2
                       [ "optimization" [ "default" | "normal" | 
				"high-latency" | "satellite" | 
d1382 2
a1383 2
icmp-type      = "icmp-type" ( icmp-type-code | "{" icmp-list "}" ) . 
ipv6-icmp-type = "ipv6-icmp-type" ( icmp-type-code | "{" icmp-list "}" ) . 
d1386 1
a1386 1
icmp-list      = icmp-type-code [ [ "," ] icmp-list ] . 
d1405 1
a1405 1
limit-list     = limit [ [ "," ] limit-list ] . 
d1418 1
a1418 1
host name database
d1420 1
a1420 1
default location of the ruleset file
d1422 1
a1422 1
protocol name database
d1424 1
a1424 1
service name database
d1426 1
a1426 1
example rulesets
d1435 1
a1435 1
.Xr pflogd 8 ,
@


1.116
log
@we "now" have /usr/share/pf
short descr about the items

henning "go ahead, schnellschnellschnell"
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.115 2002/11/24 17:41:53 pb Exp $
d51 2
a52 2
In short: filters are last match, nat is first match.
Rules must be in order: options, scrub, nat, queue, filter.
d253 2
a254 1
enforces an ordering of the ruleset to: options, scrub, nat, queue, filter.
d562 1
a562 1
option is to a NAT rule what the
d1151 1
a1151 1
.Sh NAT EXAMPLES
@


1.115
log
@reflect new ordering requirements (..nat, queue, filter)
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.114 2002/11/24 17:27:49 pb Exp $
d1370 1
a1370 1
.Bl -tag -width "/etc/pf.conf" -compact
d1372 1
d1374 1
d1376 1
d1378 3
@


1.114
log
@RIO is not yet in GENERIC

henning@@, kjc@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.113 2002/11/23 05:24:19 mcbride Exp $
d52 1
a52 1
Rules must be in order: options, scrub, nat, filter.
d253 1
a253 1
enforces an ordering of the ruleset to: options, scrub, nat, filter.
@


1.113
log
@document "nat pools" changes

syntax may still change somewhat

ok dhartmei@@ henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.112 2002/11/20 10:55:26 pb Exp $
d964 1
@


1.112
log
@BNF update:
o catch up with queuespec change (no 'queue' in altq_rule)
o there cant be a lonely number for bandwidth
o s/k/K/ for queue_rule also

henning@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.111 2002/11/20 10:40:01 pb Exp $
d303 1
a303 1
This technique allows a single IP address
d604 62
d1257 3
a1259 1
                 [ "->" address [ portspec ] ] .
d1268 2
a1269 1
		 [ "->" address [ portspec ] ] .
d1296 3
a1298 6
                 "route-to" "(" interface-name address ")" |
                 "route-to" interface-name |
                 "reply-to" "(" interface-name address ")" |
                 "reply-to" interface-name |
                 "dup-to" "(" interface-name address ")" |
                 "dup-to" interface-name
d1312 2
d1317 2
d1360 2
@


1.111
log
@Xr altq bu-bye

henning@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.110 2002/11/19 23:41:03 deraadt Exp $
d1210 3
a1212 2
altq_rule      = "altq" "on" interface-name "scheduler" "cbq" "bandwidth"
		 number [ "Kb" | "Mb" | "Gb" ] [ "queue" "{" queue-list "}" ] .
d1214 2
a1215 1
queue_rule     = "queue" string "bandwidth" number [ "kb" | "Mb" | "Gb" | "%" ]
d1217 1
a1217 1
	         [ "queue" ( string | "{" queue-list "}" ) ] .
@


1.110
log
@talk about pass and block and queue
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.109 2002/11/19 22:18:50 pb Exp $
a1312 1
.Xr altq 9
@


1.109
log
@.Sh QUEUE RULES

more to come..

previous fixes from various ppl included:
ok henning@@, mcbride@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.108 2002/11/19 11:34:12 pb Exp $
d836 2
a837 1
At least two rules are required to configure queues, which are referenced in
d841 10
a850 1
rules.
@


1.108
log
@"fix" .Nd, "they do not need to know"

request by deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.107 2002/11/19 11:30:17 henning Exp $
d549 9
d834 79
@


1.107
log
@kb -> Kb
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.106 2002/11/19 10:29:10 pb Exp $
d35 1
a35 1
.Nd filtering, translation (NAT) and queue (ALTQ) rules file for the
@


1.106
log
@
first catch up with altq merge:
-Nd: catch on man -k altq/queue
-Xr
-BNF: should leave enough place/logic for more then cbq

henning@@ "commit" ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.105 2002/11/13 18:24:53 dhartmei Exp $
d1113 1
a1113 1
		 number [ "kb" | "Mb" | "Gb" ] [ "queue" "{" queue-list "}" ] .
@


1.105
log
@Add label macro $if, as we support {} list expansion for interfaces now.
From David Gwynne. ok henning@@, camield@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.104 2002/11/08 08:08:47 mpech Exp $
d30 1
a30 1
.Dd July 2, 2002
d35 1
a35 1
.Nd filtering and translation (NAT) rules file for the
d1074 1
a1074 1
		   antispoof_rule )
d1112 7
d1194 5
d1214 2
a1215 1
.Xr pflogd 8
@


1.104
log
@Time to cleanup:
o) start new sentence on a new line;
o) wrap long lines;
o) don't use .Pp before/after .Sh, .Ss;
o) OpenBSD -> .Ox;
o) typos;
o) close .Rs;
o) use space between arguments in tag, for example:
   .Xr blabla ) .

miod@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.103 2002/11/06 00:30:04 henning Exp $
d520 2
@


1.103
log
@2x spelling, Jolan Luff, Thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.102 2002/11/04 14:30:21 dhartmei Exp $
a179 1
.Pp
@


1.102
log
@state-opt = "max" seconds -> number, it limits the number of states not
time. ok henning@@, pb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.101 2002/10/31 10:51:03 pb Exp $
d827 1
a827 1
In cases when it is necessary or more effecient to send such large packets,
d861 1
a861 1
the first occurance.
@


1.101
log
@document 'set require-order (yes|no)'
mini-BNF fix

henning@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.100 2002/10/31 09:18:24 henning Exp $
d1171 1
a1171 1
state-opt      = ( "max" seconds ) | ( timeout seconds ) .
@


1.100
log
@spelling; Jolan Luff, thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.99 2002/10/27 13:56:59 pb Exp $
d251 9
d1080 3
a1082 2
                       [ "loginterface" ( interface-name | "none" ) ] | .
                       [ "block-policy" ( "drop" | "return" ) ] ).
@


1.99
log
@Remove 'flags X' syntax, if people make heavy use of X/FOOBAR, they
chould use macros, e.g.
tcpinit="S/SAFR"
pass in ... flags $tcpinit
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.98 2002/10/14 19:37:51 deraadt Exp $
d454 1
a454 1
that explicitely compare against
d805 1
a805 1
One should pass these explicitely.
@


1.98
log
@.Cm inside .Bd -literal screws up
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.97 2002/10/14 13:07:32 henning Exp $
d464 1
a464 1
.Ss flags <a> | <a>/<b> | /<b>
a476 5
This is more restrictive than the previous example.
.It Em flags S
If the second set is not specified, it defaults to FSRPAUEW.
Hence, only packets with SYN set and all other flags unset match this 
rule.
@


1.97
log
@grammar & formatting
From: Jolan Luff <jolan@@cryptonomicon.org>, who is no i386 wheenie ;-)
Thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.96 2002/10/14 12:59:40 henning Exp $
d72 2
a73 2
.Cm block in all
.Cm block out all
@


1.96
log
@document binat netblocks
from ryan
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.95 2002/10/14 09:21:34 henning Exp $
d815 1
a815 1
of one's ruleset to pass all traffic on lo0:
d1009 1
a1009 1
#NO NAT
@


1.95
log
@your -> one's
From: Gregory Steuck <greg@@nest.cx>
Thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.94 2002/10/13 15:51:55 henning Exp $
d288 2
a289 2
rule specifies a bidirectional mapping between an external IP address
and an internal IP address.
d1095 2
a1096 1
		 "from" address "to" ipspec [ "->" address ] .
@


1.94
log
@talk about lo0 issues
from Gregory Steuck greg at nest dot cx
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.93 2002/10/09 14:37:01 henning Exp $
d815 1
a815 1
of your ruleset to pass all traffic on lo0:
@


1.93
log
@document the extended return-icmp syntax, block return, block drop and set
block-policy.

from ryan

ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.92 2002/10/07 12:39:29 dhartmei Exp $
d601 1
d804 15
@


1.92
log
@Add 'reply-to' to filter rules, similar to route-to, but applying to
replies (packets that flow in the opposite direction of the packet that
created state), used for symmetric routing enforcement.
Document how route-to and reply-to work in context of stateful filtering.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.91 2002/10/05 21:17:57 dhartmei Exp $
d234 17
d255 24
a278 4
Optionally, the filter can return a TCP RST or ICMP UNREACHABLE packet
to the sender, where applicable.
Returning ICMP packets can have
an ICMP code set by number or name, TCP RST can have a TTL set.
d1060 2
a1061 1
                       [ "loginterface" ( interface-name | "none" ) ] ) .
d1090 7
a1096 5
return         = "return-rst" [ "(" "ttl" number ")" ] |
                 "return-icmp"
                     [ "(" ( icmp-code-name | icmp-code-number ) ")" ] |
                 "return-icmp6"
                     [ "(" ( icmp-code-name | icmp-code-number ) ")" ] .
@


1.91
log
@Allow filtering based on IP header's tos field.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.90 2002/10/04 10:15:37 henning Exp $
d517 2
d528 19
d1063 2
@


1.90
log
@new sentence, new line
pointed out by Dries Schellekens, Thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.89 2002/09/30 23:41:46 frantzen Exp $
d1009 1
a1009 1
                 [ icmp-type | ipv6-icmp-type ]
d1081 3
@


1.89
log
@document fragcache
comments jasoni@@, deraadt@@.  ok henning@@ and deraadt@@
i'm sure at least one man page nazi will find something in it though
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.88 2002/09/28 22:49:19 deraadt Exp $
d748 6
a753 6
the maximum transmission unit (MTU) of the network.  In cases when it is
necessary or more effecient to send such large packets, the large packet
will be fragmented into many smaller packets that will each fit onto the
wire.  Unfortunately for a firewalling device, only the first logical
fragment will contain the necessary header information for the
subprotocol that allows
d763 3
a765 3
packets, and can ignore fragments.  The drawback of caching fragments
is the additional memory cost.  But the full reassembly method is the
only method that currently works with NAT.
d775 2
a776 1
high memory cost of full reassembly.  The first is enabled via the
d780 4
a783 3
will track the fragments and cache a small range descriptor.  Duplicate
fragments are dropped and overlaps are cropped.  Thus data will only
occur once on the wire with ambiguities resolving to the first occurance.
d787 2
a788 1
are received.  This reassembly mechanism does not yet work with NAT.
d792 2
a793 1
modifier.  It is almost identical to the
@


1.88
log
@better word; ish
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.87 2002/09/26 08:30:36 henning Exp $
d695 1
a695 1
The normalizer does full IP fragment reassembly to prevent attacks
d747 9
a755 11
IP datagrams (packets) can have a size of up to 65535 bytes.
Most network links, however, have a maximum transmission unit (MTU)
that is significantly lower (1500 bytes is common).
When an IP packet's size exceeds the MTU of the interface it has to
be sent out through, the packet is fragmented.
In general, a fragment only contains an IP header, which is sufficient
for the receiver to reassemble the complete packet.
The headers of subprotocols like TCP, UDP or ICMP are only data payload
on IP level, and such headers are not part of all fragments of a packet.
It's even possible that no fragment contains a complete subprotocol
header, because that header is split among fragments.
d757 1
a757 1
There are two options for handling fragments in the packet filter:
d760 2
a761 2
In this case, fragments are cached until they form a complete
packet, and only complete packets are passed on to the filter.
d763 31
a793 2
packets, and can ignore fragments.
The drawback of caching fragments is the additional memory cost.
d824 3
a826 1
all fragments.
d846 1
a846 1
scrub in on $ext_if all
d1008 1
a1008 1
                 [ "max-mss" number ] [ "allow-opts" ]
d1080 3
@


1.87
log
@document extended antispoof
some help nick@@ and frantzen@@
ok theo
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.86 2002/09/18 16:28:47 henning Exp $
d199 1
a199 1
reassemble (generated by 'scrub' rules) to 20000.
@


1.86
log
@not good; back to old version
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.85 2002/09/15 19:36:22 henning Exp $
d730 15
@


1.85
log
@nicer english, use Packet Filter instead of packet filter
work by nick@@ and a bit nitpicking by me

ok pb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.84 2002/09/15 19:36:22 henning Exp $
d36 1
a36 1
Packet Filter
d40 1
a40 1
Packet Filter drops, passes and modifies packets according to the
d54 2
a55 2
Although filter rules are typically manipulated using
.Xr pfctl 8 ,
d61 1
a61 1
For each packet processed by the Packet Filter, the filter rules are
d176 1
a176 1
One stops interface statistics collection using
d182 1
a182 1
Sets hard limits on the memory pools used by the Packet Filter.
d211 1
a211 1
Suitable for most networks.
d339 2
a340 4
Addresses can be specified in CIDR notation (1.2.3.0/24, matching
the entire netblock), as
symbolic host names (www.openbsd.org) or interface names (dc0), or as 
any of the following keywords:
d351 1
a351 2
for instance), the rule set normally must be reloaded for the change 
to be reflected
d372 1
a372 1
.Sq all ports < 2000 and > 2004 ,
d515 1
a515 1
If a packet matches a rule with a route option set, the Packet Filter will
d546 1
a546 1
is a stateful Packet Filter, which means it can track the state of
d744 1
a744 2
There are two options for handling fragments in the Packet Filter:
A
@


1.84
log
@consistency
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.83 2002/09/15 19:30:54 henning Exp $
d36 1
a36 1
packet filter
d40 1
a40 1
packet filter drops, passes and modifies packets according to the
d54 2
a55 2
While filter rules are typically manipulated using
.Xr pfctl 8
d61 1
a61 1
For each packet processed by the packet filter, the filter rules are
d176 1
a176 1
One can unset the loginterface using
d182 1
a182 1
Sets hard limits on the memory pools used by the packet filter.
d211 1
a211 1
Suitable for almost all networks.
d339 4
a342 2
Addresses can be specified in CIDR notation (matching netblocks), as
symbolic host names or interface names, or as any of the following keywords:
d353 2
a354 1
for instance), the rule set must be reloaded for the change to be reflected
d375 1
a375 1
.Sq all ports < 2000 or > 2004 ,
d518 1
a518 1
If a packet matches a rule with a route option set, the packet filter will
d549 1
a549 1
is a stateful packet filter, which means it can track the state of
d747 2
a748 1
There are two options for handling fragments in the packet filter:
@


1.83
log
@don't forget to mention options in the always famous "Rules must be in order"
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.82 2002/09/12 13:47:20 henning Exp $
d198 1
a198 1
set the maximum number of entries in the memory pool used for fragment
@


1.82
log
@explain antispoof
most work by nick@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.81 2002/09/12 12:17:05 henning Exp $
d52 1
a52 1
Rules must be in order: scrub, nat, filter.
@


1.81
log
@BNF for antispoof
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.80 2002/09/12 12:14:35 henning Exp $
d711 20
@


1.80
log
@nicer
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.79 2002/09/06 09:46:52 henning Exp $
d926 2
a927 1
line           = ( option | pf_rule | nat_rule | binat_rule | rdr_rule )
d957 4
@


1.79
log
@yes, you can specify the address family in nat/rdr/binat rules.
noticed through a misc@@ mail by Paul de Weerd
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.78 2002/08/10 15:40:05 pb Exp $
d953 3
a955 2
rdr_rule       = [ "no" ] "rdr" "on" ifspec [ af ] [ protospec ] "from" ipspec
                 "to" ipspec [ portspec ] [ "->" address [ portspec ] ] .
@


1.78
log
@move section parameters more upwards, include section quick and logging
as a subsection (style changes later)

ok henning@@, frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.75 2002/07/30 17:28:54 pb Exp $
d946 1
a946 1
nat_rule       = [ "no" ] "nat" "on" ifspec  [ protospec ] hosts
d949 3
a951 2
binat_rule     = [ "no" ] "binat" "on" interface-name [ "proto" ( proto-name |
                 proto-number ) ] "from" address "to" ipspec [ "->" address ] .
d953 1
a953 1
rdr_rule       = [ "no" ] "rdr" "on" ifspec [ protospec ] "from" ipspec
@


1.77
log
@remove explanations of external programs (pfctl/tcpdump)

ok henning@@, dhartmei@@, frantzen@@
@
text
@d279 18
a296 1
.Sh LOGGING
d320 1
a320 1
.Sh QUICK
a325 42
.Sh NO
The
.Sq no
option is to a NAT rule what the
.Sq quick
option is to a filter rule.
This option causes matching packets to remain untranslated.
.Sh ROUTING
If a packet matches a rule with a route option set, the packet filter will
route the packet according to the type of route option.
.Ss fastroute
The
.Em fastroute
option does a normal route lookup to find the next hop for the packet.
.Ss route-to
The
.Em route-to
option routes the packet to the specified interface with an optional address
for the next hop.
.Ss dup-to
The
.Em dup-to
option creates a duplicate of the packet and routes it like
.Em route-to.
The original packet gets routed as it normally would.
.Sh PARAMETERS
The rule parameters specify for what packets a rule applies.
A packet always comes in on or goes out through one interface.
Most parameters are optional.
If a parameter is specified, the rule only applies to packets with
matching attributes.
Certain parameters can be expressed as lists, in which case
.Em pfctl
generates all needed rule combinations.
.Ss in or out
The rule applies to incoming or outgoing packets.
Either
.Em in
or
.Em out
must be specified.
To cover both directions, two rules are needed.
d507 25
@


1.76
log
@.SH -> .Sh NAT EXAMPELS
@
text
@a59 34
Filter and NAT rules are loaded from a text file into the kernel using
.Pp
.Cm # pfctl -f file
.Pp
which replaces the active rule set with the new one.
To load only the filter rules from a file, one would use the command
.Pp
.Cm # pfctl -R -f file
.Pp
To load only the NAT rules from a file, one would use the command
.Pp
.Cm # pfctl -N -f file
.Pp
To load only the options from a file, one would use the command
.Pp
.Cm # pfctl -O -f file
.Pp
The active filter rule set can be displayed using
.Pp
.Cm # pfctl -s r
.Pp
The active translation rule set can be displayed using
.Pp
.Cm # pfctl -s n
.Pp
The active options can be displayed using pfctl as well:
.Pp
.Cm # pfctl -s t
.Pp
shows the current timeouts.
.Pp
.Cm # pfctl -s m
.Pp
shows the current limits.
d301 1
a301 1
.Xr tcpdump 8
a302 4
The log files can be read using tcpdump:
.Bd -literal
.Cm # tcpdump -n -e -ttt -r /var/log/pflog
.Ed
@


1.75
log
@BNF is now in sync with reality:
- commas are optional in lists

ok henning@@, dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.74 2002/07/30 16:35:15 pb Exp $
d880 1
a880 1
.SH NAT EXAMPLES
@


1.74
log
@BNF catchup and consolidation of interface name handling:

ok henning@@, dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.73 2002/07/30 13:53:57 pb Exp $
d1001 1
a1001 1
interface-list = [ "!" ] interface-name [ "," interface-list ] .
d1010 1
a1010 1
proto-list     = ( proto-name | proto-number ) [ "," proto-list ] .
d1022 1
a1022 1
host-list      = host [ "," host-list ] .
d1032 1
a1032 1
op-list        = ( unary-op | binary-op ) [ "," op-list ] .
d1043 1
a1043 1
icmp-list      = icmp-type-code [ "," icmp-list ] . 
d1045 1
a1045 1
state-opts     = state-opt [ "," state-opts ] .
d1048 1
a1048 1
timeout-list   = timeout [ "," timeout-list ] .
d1056 1
a1056 1
limit-list     = limit [ "," limit-list ] . 
@


1.73
log
@Merge filter and nat BNF for simplification:
- top of reduction is now 'line', better to add more keywords later on
- reorder, group
- remove double productions

ok dhartmei@@, henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.72 2002/07/30 11:55:31 pb Exp $
d975 1
a975 3
                 [ "on" ( interface-name | "{" interface-list "}" ) ]
                 [ route ] [ af ]
                 [ protospec ]
d984 1
a984 1
nat_rule       = [ "no" ] "nat" "on" [ "!" ] ifname [ protospec ] hosts
d987 1
a987 1
binat_rule     = [ "no" ] "binat" "on" ifname [ "proto" ( proto-name |
d990 1
a990 1
rdr_rule       = [ "no" ] "rdr" "on" [ "!" ] ifname [ protospec ] "from" ipspec
d1000 2
a1001 1
interface-list = interface-name [ "," interface-list ] .
@


1.72
log
@
BNF catchup to reality:
- set loginterface none
- add "self" to hosts

ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.71 2002/07/30 11:21:46 pb Exp $
d960 3
a962 1
Syntax for filter rules in BNF:
d964 2
d973 1
a973 1
rule           = action ( "in" | "out" )
d977 1
a977 2
                 [ "proto" ( proto-name | proto-number |
                             "{" proto-list "}" ) ]
d986 9
d1009 2
d1019 1
d1026 1
a1058 35
.Ed
.Pp
Syntax for translation rules in BNF:
.Bd -literal
rule      = [ "no" ] ( nat_rule | binat_rule | rdr_rule ) .

nat_rule  = "nat" "on" [ "!" ] ifname [ protospec ] hosts
            [ "->" address [ portspec ] ] .

binat_rule = "binat" "on" ifname [ protospec ] "from" address
             "to" ipspec [ "->" address ] .

rdr_rule  = "rdr" "on" [ "!" ] ifname [ protospec ] "from" ipspec
            "to" ipspec [ portspec ] [ "->" address [ portspec ] ] .

protospec = "proto" ( number | "tcp" | "udp" | "icmp" ) .

ipspec    = "any" | host | "{" host-list "}" .

portspec  = "port" ( number | name ) [ ":" ( "*" | number | name ) ] .

hosts     = "all" |
            "from" ( "any" | host | "{" host-list "}" ) [ port ]
            "to"   ( "any" | host | "{" host-list "}" ) [ port ] .

host      = [ "!" ] address [ "/" mask-bits ] .
address   = ( interface-name | "(" interface-name ")" | host-name |
              ipv4-dotted-quad | ipv6-coloned-hex ) .
host-list = host [ "," host-list ] .

port      = "port" ( unary-op | binary-op | "{" op-list "}" ) .
unary-op  = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
            ( name | number ) .
binary-op = number ( "<>" | "><" ) number .
op-list   = ( unary-op | binary-op ) [ "," op-list ] .
@


1.71
log
@
typo/pasto in route-to/dup-to syntax
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.70 2002/07/30 09:25:00 pb Exp $
d967 2
a968 1
		       [ "loginterface" interface-name ] ) .
d1000 4
a1003 4
                 "from" ( "any" | "no-route" | host | "{" host-list "}" )
                     [ port ]
                 "to"   ( "any" | "no-route" | host | "{" host-list "}" )
                     [ port ] .
@


1.70
log
@.Sh GRAMMAR moves to bottom, it's a reference and not readable
for the casual user in first place

ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.69 2002/07/30 08:56:07 pb Exp $
d992 2
a993 2
                 "dup-to" interface-name
                 "route-to" "(" interface-name address ")" |
@


1.69
log
@65335->65535 typo
henning ok@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.68 2002/07/30 08:55:12 pb Exp $
a52 120

.Sh GRAMMAR
Syntax for filter rules in BNF:
.Bd -literal
option         = set ( [ "timeout" ( timeout | "{" timeout-list "}" ) ] |
                       [ "optimization" [ "default" | "normal" | 
				"high-latency" | "satellite" | 
				"aggressive" | "conservative" ] ]
                       [ "limit" ( limit | "{" limit-list "}" ) ] |
		       [ "loginterface" interface-name ] ) .
rule           = action ( "in" | "out" )
                 [ "log" | "log-all" ] [ "quick" ]
                 [ "on" ( interface-name | "{" interface-list "}" ) ]
                 [ route ] [ af ]
                 [ "proto" ( proto-name | proto-number |
                             "{" proto-list "}" ) ]
                 hosts
                 [ user ] [ group ] [ flags ]
                 [ icmp-type | ipv6-icmp-type ]
                 [ ( "keep" | "modulate" ) "state" [ "(" state-opts ")" ] ]
                 [ "fragment" ] [ "no-df" ] [ "min-ttl" number ]
                 [ "max-mss" number ] [ "allow-opts" ]
                 [ "label" string ] .

action         = "pass" | "block" [ return ] | "scrub" .
return         = "return-rst" [ "(" "ttl" number ")" ] |
                 "return-icmp"
                     [ "(" ( icmp-code-name | icmp-code-number ) ")" ] |
                 "return-icmp6"
                     [ "(" ( icmp-code-name | icmp-code-number ) ")" ] .

interface-list = interface-name [ "," interface-list ] .
route          = "fastroute" |
                 "route-to" "(" interface-name address ")" |
                 "dup-to" interface-name
                 "route-to" "(" interface-name address ")" |
                 "dup-to" interface-name
af	       = "inet" | "inet6" .
proto-list     = ( proto-name | proto-number ) [ "," proto-list ] .

hosts          = "all" |
                 "from" ( "any" | "no-route" | host | "{" host-list "}" )
                     [ port ]
                 "to"   ( "any" | "no-route" | host | "{" host-list "}" )
                     [ port ] .

host           = [ "!" ] address [ "/" mask-bits ] .
address        = ( interface-name | "(" interface-name ")" | host-name |
                   ipv4-dotted-quad | ipv6-coloned-hex ) .
host-list      = host [ "," host-list ] .

port           = "port" ( unary-op | binary-op | "{" op-list "}" ) .
user           = "user" ( unary-op | binary-op | "{" op-list "}" ) .
group          = "group" ( unary-op | binary-op | "{" op-list "}" ) .

unary-op       = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
                 ( name | number ) .
binary-op      = number ( "<>" | "><" ) number .
op-list        = ( unary-op | binary-op ) [ "," op-list ] .

flags          = "flags" ( flag-set | flag-set "/" flag-set |
                           "/" flag-set ) .
flag-set       = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] [ "E" ]
                 [ "W" ] .

icmp-type      = "icmp-type" ( icmp-type-code | "{" icmp-list "}" ) . 
ipv6-icmp-type = "ipv6-icmp-type" ( icmp-type-code | "{" icmp-list "}" ) . 
icmp-type-code = ( icmp-type-name | icmp-type-number )
                 [ "code" ( icmp-code-name | icmp-code-number ) ] .
icmp-list      = icmp-type-code [ "," icmp-list ] . 

state-opts     = state-opt [ "," state-opts ] .
state-opt      = ( "max" seconds ) | ( timeout seconds ) .

timeout-list   = timeout [ "," timeout-list ] .
timeout        = ( "tcp.first" | "tcp.opening" | "tcp.established" |
                 "tcp.closing" | "tcp.finwait" | "tcp.closed" |
                 "udp.first" | "udp.single" | "udp.multiple" |
                 "icmp.first" | "icmp.error" |
                 "other.first" | "other.multiple" ) seconds .
seconds        = number .

limit-list     = limit [ "," limit-list ] . 
limit          = ( "states" | "frags" ) number .
.Ed
.Pp
Syntax for translation rules in BNF:
.Bd -literal
rule      = [ "no" ] ( nat_rule | binat_rule | rdr_rule ) .

nat_rule  = "nat" "on" [ "!" ] ifname [ protospec ] hosts
            [ "->" address [ portspec ] ] .

binat_rule = "binat" "on" ifname [ protospec ] "from" address
             "to" ipspec [ "->" address ] .

rdr_rule  = "rdr" "on" [ "!" ] ifname [ protospec ] "from" ipspec
            "to" ipspec [ portspec ] [ "->" address [ portspec ] ] .

protospec = "proto" ( number | "tcp" | "udp" | "icmp" ) .

ipspec    = "any" | host | "{" host-list "}" .

portspec  = "port" ( number | name ) [ ":" ( "*" | number | name ) ] .

hosts     = "all" |
            "from" ( "any" | host | "{" host-list "}" ) [ port ]
            "to"   ( "any" | host | "{" host-list "}" ) [ port ] .

host      = [ "!" ] address [ "/" mask-bits ] .
address   = ( interface-name | "(" interface-name ")" | host-name |
              ipv4-dotted-quad | ipv6-coloned-hex ) .
host-list = host [ "," host-list ] .

port      = "port" ( unary-op | binary-op | "{" op-list "}" ) .
unary-op  = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
            ( name | number ) .
binary-op = number ( "<>" | "><" ) number .
op-list   = ( unary-op | binary-op ) [ "," op-list ] .
.Ed
d958 119
@


1.68
log
@backout, this will go in in little pieces
as advised by theo and henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.66 2002/07/21 21:28:06 deraadt Exp $
d870 1
a870 1
IP datagrams (packets) can have a size of up to 65335 bytes.
@


1.67
log
@
o complete restructuring
o BNF has been fixed and should represent -current as close as possible
o theo: commit this, and then let us get started fixing it.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.65 2002/07/05 14:32:45 henning Exp $
d30 1
a30 1
.Dd July 29, 2002
d35 2
a36 1
.Nd packet filter configuration file
d40 1
a40 1
packet filter handles packets according to the
d42 248
a289 4
This file is evaluated and loaded by
.Xr pfctl 8 .
.Sh RULESET EVALUATION
Rules are grouped into sections which must appear in this order:
d291 12
a302 9
.Bl -tag -item -width "O normalization " -compact
.It Em options
parameters to the packet filter
.It Em normalization
packet sanitizing (scrub)
.It Em translation
Network Address Translation
.It Em filter
block or pass the packet
d305 49
a353 23
Every section is optional.
If the sections are not in order,
.Xr pfctl 8
will fail to load them.
The order of the rules in this file is the order in which a packet will
traverse them.
.Sh PACKET TRANSLATION
.Bl -tag -width Fl
.It Em nat
A
.Em nat
rule specifies that IP addresses are to be changed as the packet
traverses the given interface.
.It Em binat
A
.Em binat
rule specifies a bidirectional mapping between an external IP address
and an internal IP address.
.It Em rdr
The packet is redirected to another destination and possibly a
different port.
.Em rdr
rules can optionally specify port ranges instead of single ports.
d355 1
a355 2
The first rule below redirects port 2003 on the local machine to port
22 on 10.10.2.3; and the second rule controls NAT for that subnet:
d357 1
a357 2
    rdr on $ext_if proto tcp from any to $ext_if port 2004 -> 10.10.2.3 port 22
    nat on $ext_if from 10.10.0.0/16 to any -> $ext_if
d359 24
a382 5
.It Em no
The
.Em no
action applies to nat, rdr and binat rules. If a packet matches this rule,
the evaluation of translation rules stop and the packet is translated.
d384 5
a388 1
.Sh FILTER
d398 35
a432 6
.Sh QUICK
If a packet matches a filter rule which has the
.Sq quick
option set, this rule
is considered the last matching rule, and evaluation of subsequent rules
is skipped.
d438 1
a438 1
Used with
a444 6
.Pp
One can only log
.Em pass
or
.Em block
rules.
d461 31
a491 17
.Sh MACROS
.Em pfctl
supports macro definition and expansion like:
.Bd -literal
    ext_if = "kue0"
    pass out on $ext_if           from any to any         keep state
    pass in  on $ext_if proto tcp from any to any port 25 keep state
.Ed
Additionally you can concatenate strings:
.Bd -literal
    hostone = "10.1.1.1"
    hosttwo = "10.2.1.1"
    hosts = "$hostone $hosttwo 10.3.1.1"
.Pp
Macro names must start with a letter and may contain letters, digits
and underscores.
Macros are not expanded recursively.
a495 4
Not all parameters are applicable to all rule-types and they
have to be in a certain order. See the
.Em GRAMMAR
section below for exact details.
d499 1
a499 1
.Xr pfctl 8
a500 1
Lists are comprised by enclosing braces.
a526 4
.It Em all
means
.Sq from any to any
;
d532 1
a532 1
rule set load-time.
a535 3
Multiple IP addresses on one interface are expanded at rule evalutation
time. If one has IPv4 and IPv6 addresses, the protocol family has
to be defined.
a538 2
(XXX. expanding in () does work?)

d550 1
a550 1
means
d554 1
a554 1
means
d559 2
a560 1
The host and port specifications are optional:
d568 1
a568 2
.Ss user <user>
.Ss group <group>
d570 1
a570 1
or group.
d604 2
a605 1
This example allows only selected users to open outgoing connections:
d626 1
a626 1
Hence, only packets with SYN set and all other flags unset match this
a631 1
.\" XXX -- this needs an example
a658 1
The maximum size of an expanded label is 64 characters.
d686 11
a696 1
    pass in proto tcp from any to 1.2.3.5 port >1023 label "1.2.3.5:>1023"
d699 3
a701 1
Note that evaluation takes place at parse time.
d710 2
a711 2
a state for this connection and automatically passes all subsequent
packets for that connection.
d730 2
a731 2
state, since states are stored in a binary tree that allows searches
in O(log2 n).
d743 3
a745 4
The initial packet of each connection (has the SYN flag set), creates a
state as it is passed.
If a packet is not the initial packet of a connection, it is passed only
if it matches a state.
d750 1
a750 1
intermediate
d759 2
a760 1
using only host addresses and ports.
d763 1
a763 1
refer to a TCP or UDP packet, are matched against the relevant connection.
d776 1
a776 1
lets echo requests
d778 1
a778 1
out, creates a state and matches incoming echo replies correctly.
d787 1
a787 1
By applying a "modulate state" rule to a TCP connection,
a813 1
.\" XXX -- are the above and below caveats contradictory?
d824 1
a824 1
shifted its sequence by a random amount.
d837 1
a837 1
.Em OPTIONS .
d840 1
a840 1
Multiple options can be specified enclosed by parenthesis:
a844 146
.Sh OPTIONS
The syntax for global options is
.Bd -literal
.Cm set option parameters
.Ed
.Pp
Per-rule options are described at the appropriate places.
.Ss optimization
The
.Em optimization
options are just bundles of
.Em timeout
options.
Optimize the engine to one of the following network topographies or
environments:
.Bl -tag -width "O high-latency " -compact
.It Em default
A normal network environment.
Suitable for almost all networks.
.It Em normal
Alias for
.Em default
.It Em high-latency
A high-latency environment (such as a satellite connection)
.It Em satellite
Alias for
.Em high-latency
.It Em aggressive
Aggressively expire connections when they are likely no longer valid.
This can greatly reduce the memory usage of the firewall at the cost of
dropping idle connections early.
.It Em conservative
Extremely conservative settings.
Pains will be taken to avoid dropping legitimate connections at the
expense of greater memory utilization (possibly much greater on a busy
network) and slightly increased processor utilization.
.El
Example:
.Bd -literal
    set optimization aggressive
.Ed
.Ss timeout
.Bl -tag -width interval -compact
.It Em interval
Interval between purging expired states and fragments.
.It Em frag
Seconds before an unassembled fragment is expired.
.El
.Pp
When a packet matches a stateful connection, the seconds to live of the
connection will be updated to that of the proto.modifier which corresponds
to the connection state.
Each packet which matches this state will reset the TTL.
Tuning these values may improve the performance of the
firewall at the risk of dropping valid idled connections.
.Pp
.Bl -tag -width "tcp.established " -compact
.It Em tcp.first
The state after the first packet.
.It Em tcp.opening
The state before the destination host ever sends a packet.
.It Em tcp.established
The fully established state.
.It Em tcp.closing
The state after the first FIN has been sent.
.It Em tcp.finwait
The state after both FINs have been exchanged and the connection is closed.
Some hosts (notably web servers on Solaris) send TCP packets even after closing
the connection.
Increasing tcp.finwait (and possibly tcp.closing) can prevent blocking of
such packets.
.It Em tcp.closed
The state after one endpoint sends a RST.
.El
.Pp
ICMP and UDP are handled in a similar fashion to TCP but with a much more
limited set of states:
.Pp
.Bl -tag -width "udp.multiple " -compact
.It Em udp.first
The state after the first packet.
.It Em udp.single
The state if the source host sends more than one packet but the destination
host has never sent one back.
.It Em udp.multiple
The state if both hosts have sent packets.
.It Em icmp.first
The state after the first packet.
.It Em icmp.error
The state after an icmp error came back in response to an icmp packet.
.El
.Pp
Other protocols are handled similarly to UDP:
.Pp
.Bl -tag -width "other.multiple " -compact
.It Em other.first
.It Em other.single
.It Em other.multiple
.El
.Pp
Example:
.Bd -literal
    set timeout tcp.established 3600
    set timeout { tcp.opening 30, tcp.closing 900 }
.Ed
.Ss loginterface
Enable collection of packet and byte count statistics for the given interface.
These statistics can be viewed using
.Bd -literal
    # pfctl -s info
.Ed
.Pp
In this example pf is told to collect statistics on the interface named dc0:
.Bd -literal
    set loginterface dc0
.Ed
.Pp
One can unset the loginterface using
.Bd -literal
    set loginterface none
.Ed
.Pp
.Ss limit
Sets hard limits on the memory pools used by the packet filter.
See
.Xr pool 9
for an explanation of memory pools.
.Pp
For example,
.Bd -literal
    set limit states 20000
.Ed
.Pp
sets the maximum number of entries in the memory pool used by state table
entries (generated by 'keep state' rules) to 20000.
.Bd -literal
    set limit frags 20000
.Ed
.Pp
set the maximum number of entries in the memory pool used for fragment
reassemble (generated by 'scrub' rules) to 20000.
.Pp
These can be combined:
.Bd -literal
    set limit { states 20000, frags 20000 }
.Ed
d867 2
a868 2
XXX Hence, their relative position in the rule set is not relevant,
XXX and packets can't be blocked before normalization.
d870 1
a870 1
IP datagrams (packets) can have a size of up to 65535 bytes.
d922 2
a923 3
The memory allocated for fragment caching can be limited. See
.Em OPTIONS
for parameters.
a929 18
.Sh ROUTING
If a packet matches a rule with a route option set, the packet filter will
route the packet according to the type of route option.
.Ss fastroute
The
.Em fastroute
option does a normal route lookup to find the next hop for the packet.
.Ss route-to
The
.Em route-to
option routes the packet to the specified interface with an optional address
for the next hop.
.Ss dup-to
The
.Em dup-to
option creates a duplicate of the packet and routes it like
.Em route-to.
The original packet gets routed as it normally would.
d1000 1
a1000 1
.Sh NAT EXAMPLES
d1006 1
a1006 1
rdr on $ext_if proto tcp from any to any port 80 -> 127.0.0.1 port 8080
d1009 3
a1011 3
In the example below, vlan12 is configured for 192.168.168.1;
the machine translates all packets coming from 192.168.168.0/24 to 
204.92.77.111 when they are going out any interface except vlan12.
d1038 1
a1038 1
   rdr on fxp0 from any        to any     port 80 -> 127.0.0.1 port 3128
d1074 1
a1077 154

# redirect a range of ports
# will redirect anything from port 2000 to 2999 to port 4000
rdr on kue0 inet proto tcp from any to (kue0) port 2000:2999 -> 10.1.2.151 \\
	 port 4000
# will redirect anything from port 2000 to 2999 to port 4000 to 4999 (1:1)
rdr on kue0 inet proto tcp from any to (kue0) port 2000:2999 -> 10.1.2.151 \\
	 port 4000:*
.Ed
.Sh CAVEATS
.Ss normalization
IPv6 packets are not sanitized and are inspected by the filter as usual.
.Ss translation
If no rule matches the packet, the default action is to pass the packet
up to the filter unmodified.
It should be noted that all translations of packets occur before
the filters are applied.
Hence, rules for translated packets should specify the address and port
after translation.
Note that all translation rules apply only to packets that pass through
the specified interface.
For instance, redirecting port 80 on an external interface to an internal
web server will only work for connections originating from the outside.
Connections to the address of the external interface from local hosts will
not be redirected, since such packets do not actually pass through the
external interface.
Redirections can't reflect packets back through the interface they arrive
on, they can only be redirected to hosts connected to different interfaces
or to the firewall itself. This applies also to connections originating
from the firewall itself, like if one tries to use the
.Xr ftp-proxy 8
and uses:
.Bd -literal
rdr on $ext_if from $fw_ip to any port 21 -> 127.0.0.1 port 8081
.Ed
this wont work.
.Ss filter
Filtering on a
.Xr bridge 4
can have unwanted blocking of packets, if more then one interface is
configured. See the
.Em NOTES
section there.
.Sh GRAMMAR
Syntax for
.Em pf.conf
in BNF:
.Bd -literal
line           = ( option | pf_rule | macro | [ "no" ] ( nat_rule | 
                 binat_rule | rdr_rule ) )

option         = set ( [ "timeout" ( timeout | "{" timeout-list "}" ) ] |
                       [ "optimization" [ "default" | "normal" |
				"high-latency" | "satellite" |
				"aggressive" | "conservative" ] ]
                       [ "limit" ( limit | "{" limit-list "}" ) ] |
		       [ "loginterface" ( interface-name | "none" ) ] ) .

pf_rule        = action ( "in" | "out" )
                 [ "log" | "log-all" ] [ "quick" ]
                 [ "on" ( [ "!" ] interface-name | "{" interface-list "}" ) ]
                 [ route ] [ af ]
                 [ protospec ] 
                 hosts
                 [ user ] [ group ] [ flags ]
                 [ icmp-type | ipv6-icmp-type ]
                 [ ( "keep" | "modulate" ) "state" [ "(" state-opts ")" ] ]
                 [ "fragment" ] [ "no-df" ] [ "min-ttl" number ]
                 [ "max-mss" number ] [ "allow-opts" ]
                 [ "label" string ] .

action         = "pass" | "block" [ return ] | "scrub" .

return         = "return-rst" [ "(" "ttl" number ")" ] |
                 "return-icmp"
                     [ "(" ( icmp-code-name | icmp-code-number ) ")" ] |
                 "return-icmp6"
                     [ "(" ( icmp-code-name | icmp-code-number ) ")" ] .

interface-list = [ "!" ] interface-name [ [ "," ] interface-list ] .

route          = "fastroute" |
                 "route-to" "(" interface-name address ")" |
                 "route-to" interface-name |
                 "dup-to" "(" interface-name address ")" |
                 "dup-to" interface-name

af	       = "inet" | "inet6" .

protospec      = "proto" ( proto-name | proto-number | "{" proto-list "}" ) .

proto-list     = ( proto-name | proto-number ) [ [ "," ] proto-list ] .

hosts          = "all" |
                 "from" ( "any" | "no-route" | "self" | host | 
                 "{" host-list "}" ) [ port ]
                 "to"   ( "any" | "no-route" | "self" | host | 
                 "{" host-list "}" ) [ port ] .

host           = [ "!" ] address [ "/" mask-bits ] .
address        = ( interface-name | "(" interface-name ")" | host-name |
                   ipv4-dotted-quad | ipv6-coloned-hex ) .
host-list      = host [ [ "," ] host-list ] .

port           = "port" ( unary-op | binary-op | "{" op-list "}" ) .
user           = "user" ( unary-op | binary-op | "{" op-list "}" ) .
group          = "group" ( unary-op | binary-op | "{" op-list "}" ) .

binary-op      = number ( "<>" | "><" ) number .
op-list        = ( unary-op | binary-op ) [ [ "," ] op-list ] .

flags          = "flags" ( flag-set | flag-set "/" flag-set |
                           "/" flag-set ) .
flag-set       = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] [ "E" ]
                 [ "W" ] .

icmp-type      = "icmp-type" ( icmp-type-code | "{" icmp-list "}" ) .
ipv6-icmp-type = "ipv6-icmp-type" ( icmp-type-code | "{" icmp-list "}" ) .
icmp-type-code = ( icmp-type-name | icmp-type-number )
                 [ "code" ( icmp-code-name | icmp-code-number ) ] .
icmp-list      = icmp-type-code [ [ "," ] icmp-list ] .

state-opts     = state-opt [ [ "," ] state-opts ] .
state-opt      = ( "max" seconds ) | ( timeout seconds ) .

timeout-list   = timeout [ [ "," ] timeout-list ] .
timeout        = ( "tcp.first" | "tcp.opening" | "tcp.established" |
                 "tcp.closing" | "tcp.finwait" | "tcp.closed" |
                 "udp.first" | "udp.single" | "udp.multiple" |
                 "icmp.first" | "icmp.error" |
                 "other.first" | "other.multiple" ) seconds .
seconds        = number .

limit-list     = limit [ [ "," ] limit-list ] .
limit          = ( "states" | "frags" ) number .

macro          = string "=" string

nat_rule       = "nat" "on" [ "!" ] interface-list [ protospec ] hosts
                 [ "->" address [ portspec ] ] .

binat_rule     = "binat" "on" ifname [ protospec ] "from" address
                 "to" ipspec [ "->" address ] .

rdr_rule       = "rdr" "on" [ "!" ] interface-list [ ( proto-name | 
                 proto-number ) ] "from" ipspec "to" ipspec [ portspec ]
                 [ "->" address [ portspec ] ] .

ipspec         = "any" | host | "{" host-list "}" .

portspec       = "port" ( number | name ) [ ":" ( "*" | number | name ) ] .

unary-op       = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
                 ( name | number ) .
a1084 1
.It Pa /usr/share/pf/README
a1086 1
.Xr bridge 4 ,
@


1.66
log
@fix route-to also
@
text
@d30 1
a30 1
.Dd July 2, 2002
d35 1
a35 2
.Nd filtering and translation (NAT) rules file for the
packet filter
d39 1
a39 1
packet filter drops, passes and modifies packets according to the
d41 4
a44 156
Filter rules are used to selectively pass traffic while translation
rules specify which addresses are to be mapped and which are to be
redirected.
For each packet inspected by the filter, the set of rules is evaluated
from top to bottom, and the last matching rule decides what action is
performed.
For each packet inspected by the translator, the set of rules is evaluated
from top to bottom, and the first matching rule decides what action is
performed.
In short: filters are last match, nat is first match.
Rules must be in order: scrub, nat, filter.

.Sh GRAMMAR
Syntax for filter rules in BNF:
.Bd -literal
option         = set ( [ "timeout" ( timeout | "{" timeout-list "}" ) ] |
                       [ "optimization" [ "default" | "normal" | 
				"high-latency" | "satellite" | 
				"aggressive" | "conservative" ] ]
                       [ "limit" ( limit | "{" limit-list "}" ) ] |
		       [ "loginterface" interface-name ] ) .
rule           = action ( "in" | "out" )
                 [ "log" | "log-all" ] [ "quick" ]
                 [ "on" ( interface-name | "{" interface-list "}" ) ]
                 [ route ] [ af ]
                 [ "proto" ( proto-name | proto-number |
                             "{" proto-list "}" ) ]
                 hosts
                 [ user ] [ group ] [ flags ]
                 [ icmp-type | ipv6-icmp-type ]
                 [ ( "keep" | "modulate" ) "state" [ "(" state-opts ")" ] ]
                 [ "fragment" ] [ "no-df" ] [ "min-ttl" number ]
                 [ "max-mss" number ] [ "allow-opts" ]
                 [ "label" string ] .

action         = "pass" | "block" [ return ] | "scrub" .
return         = "return-rst" [ "(" "ttl" number ")" ] |
                 "return-icmp"
                     [ "(" ( icmp-code-name | icmp-code-number ) ")" ] |
                 "return-icmp6"
                     [ "(" ( icmp-code-name | icmp-code-number ) ")" ] .

interface-list = interface-name [ "," interface-list ] .
route          = "fastroute" |
                 "route-to" "(" interface-name address ")" |
                 "dup-to" interface-name
                 "route-to" "(" interface-name address ")" |
                 "dup-to" interface-name
af	       = "inet" | "inet6" .
proto-list     = ( proto-name | proto-number ) [ "," proto-list ] .

hosts          = "all" |
                 "from" ( "any" | "no-route" | host | "{" host-list "}" )
                     [ port ]
                 "to"   ( "any" | "no-route" | host | "{" host-list "}" )
                     [ port ] .

host           = [ "!" ] address [ "/" mask-bits ] .
address        = ( interface-name | "(" interface-name ")" | host-name |
                   ipv4-dotted-quad | ipv6-coloned-hex ) .
host-list      = host [ "," host-list ] .

port           = "port" ( unary-op | binary-op | "{" op-list "}" ) .
user           = "user" ( unary-op | binary-op | "{" op-list "}" ) .
group          = "group" ( unary-op | binary-op | "{" op-list "}" ) .

unary-op       = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
                 ( name | number ) .
binary-op      = number ( "<>" | "><" ) number .
op-list        = ( unary-op | binary-op ) [ "," op-list ] .

flags          = "flags" ( flag-set | flag-set "/" flag-set |
                           "/" flag-set ) .
flag-set       = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] [ "E" ]
                 [ "W" ] .

icmp-type      = "icmp-type" ( icmp-type-code | "{" icmp-list "}" ) . 
ipv6-icmp-type = "ipv6-icmp-type" ( icmp-type-code | "{" icmp-list "}" ) . 
icmp-type-code = ( icmp-type-name | icmp-type-number )
                 [ "code" ( icmp-code-name | icmp-code-number ) ] .
icmp-list      = icmp-type-code [ "," icmp-list ] . 

state-opts     = state-opt [ "," state-opts ] .
state-opt      = ( "max" seconds ) | ( timeout seconds ) .

timeout-list   = timeout [ "," timeout-list ] .
timeout        = ( "tcp.first" | "tcp.opening" | "tcp.established" |
                 "tcp.closing" | "tcp.finwait" | "tcp.closed" |
                 "udp.first" | "udp.single" | "udp.multiple" |
                 "icmp.first" | "icmp.error" |
                 "other.first" | "other.multiple" ) seconds .
seconds        = number .

limit-list     = limit [ "," limit-list ] . 
limit          = ( "states" | "frags" ) number .
.Ed
.Pp
Syntax for translation rules in BNF:
.Bd -literal
rule      = [ "no" ] ( nat_rule | binat_rule | rdr_rule ) .

nat_rule  = "nat" "on" [ "!" ] ifname [ protospec ] hosts
            [ "->" address [ portspec ] ] .

binat_rule = "binat" "on" ifname [ protospec ] "from" address
             "to" ipspec [ "->" address ] .

rdr_rule  = "rdr" "on" [ "!" ] ifname [ protospec ] "from" ipspec
            "to" ipspec [ portspec ] [ "->" address [ portspec ] ] .

protospec = "proto" ( number | "tcp" | "udp" | "icmp" ) .

ipspec    = "any" | host | "{" host-list "}" .

portspec  = "port" ( number | name ) [ ":" ( "*" | number | name ) ] .

hosts     = "all" |
            "from" ( "any" | host | "{" host-list "}" ) [ port ]
            "to"   ( "any" | host | "{" host-list "}" ) [ port ] .

host      = [ "!" ] address [ "/" mask-bits ] .
address   = ( interface-name | "(" interface-name ")" | host-name |
              ipv4-dotted-quad | ipv6-coloned-hex ) .
host-list = host [ "," host-list ] .

port      = "port" ( unary-op | binary-op | "{" op-list "}" ) .
unary-op  = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
            ( name | number ) .
binary-op = number ( "<>" | "><" ) number .
op-list   = ( unary-op | binary-op ) [ "," op-list ] .
.Ed
.Sh FILTER RULES
While filter rules are typically manipulated using
.Xr pfctl 8
other utilities may be written using the
.Xr ioctl 2
interface described in
.Xr pf 4 .
Filter and NAT rules are loaded from a text file into the kernel using
.Pp
.Cm # pfctl -f file
.Pp
which replaces the active rule set with the new one.
To load only the filter rules from a file, one would use the command
.Pp
.Cm # pfctl -R -f file
.Pp
To load only the NAT rules from a file, one would use the command
.Pp
.Cm # pfctl -N -f file
.Pp
To load only the options from a file, one would use the command
.Pp
.Cm # pfctl -O -f file
.Pp
The active filter rule set can be displayed using
d46 9
a54 61
.Cm # pfctl -s r
.Pp
The active translation rule set can be displayed using
.Pp
.Cm # pfctl -s n
.Pp
The active options can be displayed using pfctl as well:
.Pp
.Cm # pfctl -s t
.Pp
shows the current timeouts.
.Pp
.Cm # pfctl -s m
.Pp
shows the current limits.
.Pp
For each packet processed by the packet filter, the filter rules are
evaluated in sequential order, from first to last.
Each rule either matches the packet or doesn't.
The last matching rule decides what action is taken.
.Pp
If no rule matches the packet, the default action is
.Em pass .
.Pp
To block everything by default and only pass packets
that match explicit rules, one uses
.Bd -literal
.Cm block in all
.Cm block out all
.Ed
.Pp
as the first two rules.
.Pp
For each packet processed by the translator, the translation rules are
evaluated in sequential order, from first to last.
Each rule either matches the packet or doesn't.
The first matching rule decides what action is taken.
.Pp
If no rule matches the packet, the default action is to pass the packet
up to the filter unmodified.
It should be noted that all translations of packets occur before
the filters are applied.
Hence, rules for redirected packets should specify the address and port
after translation.
Note that all translation rules apply only to packets that pass through
the specified interface.
For instance, redirecting port 80 on an external interface to an internal
web server will only work for connections originating from the outside.
Connections to the address of the external interface from local hosts will
not be redirected, since such packets do not actually pass through the
external interface.
Redirections can't reflect packets back through the interface they arrive
on, they can only be redirected to hosts connected to different interfaces
or to the firewall itself.
.Sh OPTIONS
.Ss timeout
.Bl -tag -width interval -compact
.It Em interval
Interval between purging expired states and fragments.
.It Em frag
Seconds before an unassembled fragment is expired.
d57 23
a79 28
When a packet matches a stateful connection, the seconds to live of the
connection will be updated to that of the proto.modifier which corresponds
to the connection state.
Each packet which matches this state will reset the TTL.
Tuning these values may improve the performance of the
firewall at the risk of dropping valid idled connections.
.Pp
.Bl -tag -width "tcp.established " -compact
.It Em tcp.first
The state after the first packet.
.It Em tcp.opening
The state before the destination host ever sends a packet.
.It Em tcp.established
The fully established state.
.It Em tcp.closing
The state after the first FIN has been sent.
.It Em tcp.finwait
The state after both FINs have been exchanged and the connection is closed.
Some hosts (notably web servers on Solaris) send TCP packets even after closing
the connection.
Increasing tcp.finwait (and possibly tcp.closing) can prevent blocking of
such packets.
.It Em tcp.closed
The state after one endpoint sends a RST.
.El
.Pp
ICMP and UDP are handled in a similar fashion to TCP but with a much more
limited set of states:
d81 2
a82 30
.Bl -tag -width "udp.multiple " -compact
.It Em udp.first
The state after the first packet.
.It Em udp.single
The state if the source host sends more than one packet but the destination
host has never sent one back.
.It Em udp.multiple
The state if both hosts have sent packets.
.It Em icmp.first
The state after the first packet.
.It Em icmp.error
The state after an icmp error came back in response to an icmp packet.
.El
.Pp
Other protocols are handled similarly to UDP:
.Pp
.Bl -tag -width "other.multiple " -compact
.It Em other.first
.It Em other.single
.It Em other.multiple
.El
.Pp
Example:
.Bd -literal
    set timeout tcp.established 3600
    set timeout { tcp.opening 30, tcp.closing 900 }
.Ed
.Ss loginterface
Enable collection of packet and byte count statistics for the given interface.
These statistics can be viewed using
d84 2
a85 1
    # pfctl -s info
d87 5
a91 59
.Pp
In this example pf is told to collect statistics on the interface named dc0:
.Bd -literal
    set loginterface dc0
.Ed
.Pp
One can unset the loginterface using
.Bd -literal
    set loginterface none
.Ed
.Pp
.Ss limit
Sets hard limits on the memory pools used by the packet filter.
See
.Xr pool 9
for an explanation of memory pools.
.Pp
For example,
.Bd -literal
    set limit states 20000
.Ed
.Pp
sets the maximum number of entries in the memory pool used by state table
entries (generated by 'keep state' rules) to 20000.
.Bd -literal
    set limit frags 20000
.Ed
.Pp
set the maximum number of entries in the memory pool used for fragment
reassemble (generated by 'scrub' rules) to 20000.
.Pp
These can be combined:
.Bd -literal
    set limit { states 20000, frags 20000 }
.Ed
.Ss optimization
Optimize the engine to one of the following network topographies or
environments:
.Bl -tag -width "O high-latency " -compact
.It Em default
A normal network environment.
Suitable for almost all networks.
.It Em normal
Alias for
.Em default
.It Em high-latency
A high-latency environment (such as a satellite connection)
.It Em satellite
Alias for
.Em high-latency
.It Em aggressive
Aggressively expire connections when they are likely no longer valid.
This can greatly reduce the memory usage of the firewall at the cost of
dropping idle connections early.
.It Em conservative
Extremely conservative settings.
Pains will be taken to avoid dropping legitimate connections at the
expense of greater memory utilization (possibly much greater on a busy
network) and slightly increased processor utilization.
d93 1
a93 5
Example:
.Bd -literal
    set optimization aggressive
.Ed
.Sh ACTIONS
d103 6
a108 35
.It Em scrub
The packet is run through normalization/defragmentation.
Scrub rules are not considered last matching rules.
IPv6 packets are not defragmented.
.It Em binat
A
.Em binat
rule specifies a bidirectional mapping between an external IP address
and an internal IP address.
.It Em nat
A
.Em nat
rule specifies that IP addresses are to be changed as the packet
traverses the given interface.
This technique allows a single IP address
on the translating host to support network traffic for a larger range of
machines on an "inside" network.
Although in theory any IP address can be used on the inside, it is strongly
recommended that one of the address ranges defined by RFC 1918 be used.
These netblocks are:
.Bd -literal
10.0.0.0    - 10.255.255.255 (all of net 10, i.e., 10/8)
172.16.0.0  - 172.31.255.255 (i.e., 172.16/12)
192.168.0.0 - 192.168.255.255 (i.e., 192.168/16)
.Ed
.It Em rdr
The packet is redirected to another destination and possibly a
different port.
.Em rdr
rules can optionally specify port ranges instead of single ports.
\'rdr ... port 2000:2999 -> ... port 4000\' redirects ports 2000 to 2999
(including port 2000 and 2999) to the same port 4000.
\'rdr ... port 2000:2999 -> ... port 4000:*\' redirects port 2000 to 4000,
2001 to 4001, ..., 2999 to 4999.
.El
d114 1
a114 1
Used with 
d121 6
d143 17
a159 31
.Sh QUICK
If a packet matches a rule which has the 
.Sq quick
option set, this rule
is considered the last matching rule, and evaluation of subsequent rules
is skipped.
.Sh NO
The
.Sq no
option is to a NAT rule what the
.Sq quick
option is to a filter rule.
This option causes matching packets to remain untranslated.
.Sh ROUTING
If a packet matches a rule with a route option set, the packet filter will
route the packet according to the type of route option.
.Ss fastroute
The
.Em fastroute
option does a normal route lookup to find the next hop for the packet.
.Ss route-to
The
.Em route-to
option routes the packet to the specified interface with an optional address
for the next hop.
.Ss dup-to
The
.Em dup-to
option creates a duplicate of the packet and routes it like
.Em route-to.
The original packet gets routed as it normally would.
d164 4
d171 1
a171 1
.Em pfctl
d173 1
d200 4
d209 1
a209 1
rule set load-time. 
d213 3
d219 2
d232 1
a232 1
means 
d236 1
a236 1
means 
d241 1
a241 2
The host and port specifications are optional, as the following examples
show:
d249 2
a250 1
.Ss user <user> group <group>
d252 1
a252 1
and group.
d286 1
a286 2
The following example allows only selected users to open outgoing
connections:
d307 1
a307 1
Hence, only packets with SYN set and all other flags unset match this 
d313 1
d341 1
d372 1
a372 13
Note that evaluation takes place at parse time.
.Sh MACROS
.Em pfctl
supports macro definition and expansion like:
.Bd -literal
    ext_if = "kue0"
    pass out on $ext_if           from any to any         keep state
    pass in  on $ext_if proto tcp from any to any port 25 keep state
.Ed
.Pp
Macro names must start with a letter and may contain letters, digits
and underscores.
Macros are not expanded recursively.
d381 2
a382 2
a state for this connection and automatically lets pass all following
packets of that connection.
d401 2
a402 2
state, since states are stored in a binary search tree that allows
searches in O(log2 n).
d414 4
a417 3
The inital packet of each connection has the SYN flag set, will be passed
and creates state.
All further packets of these connections are passed if they match a state.
d422 1
a422 1
intermediate 
d431 1
a431 2
as well.
UDP packets are matched to states using only host addresses and ports.
d434 1
a434 1
refer to a TCP or UDP packet, are matched against the refered to connection.
d447 1
a447 1
lets echo requests 
d449 1
a449 1
out, creates state, and matches incoming echo replies correctly to states.
d458 1
a458 1
By applying a "modulate state" rule to a TCP connection, 
d485 1
d496 1
a496 1
shifted its sequence by a random amount. 
d509 1
a509 1
.Xr pfctl 8 .
d512 1
a512 1
Multiple options can be specified, separated by commas:
d517 146
d685 2
a686 2
Hence, their relative position in the rule set is not relevant,
and packets can't be blocked before normalization.
d688 1
a688 1
IP datagrams (packets) can have a size of up to 65335 bytes.
d740 3
a742 2
The memory allocated for fragment caching can be limited using
.Xr pfctl 8 .
d749 18
d837 1
a837 1
.SH NAT EXAMPLES
d843 1
a843 1
rdr on ne3 proto tcp from any to any port 80 -> 127.0.0.1 port 8080
d846 3
a848 3
In the example below, vlan12 is configured for the 192.168.168.1;
the machine translates all packets coming from 192.168.168.0/24 to 204.92.77.111
when they are going out any interface except vlan12.
d875 1
a875 1
   rdr on fxp0 from any        to any     port 80 -> 127.0.0.1 port 80
a910 1
# RDR
d914 154
d1075 1
d1078 1
@


1.65
log
@document "set loginterface none"
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.64 2002/07/04 10:51:18 henning Exp $
d86 4
a89 2
                 "route-to" interface-name[":"address] |
                 "dup-to" interface-name[":"address]
@


1.64
log
@document setting options in pf.conf
ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.63 2002/07/01 23:10:33 dhartmei Exp $
d326 5
@


1.63
log
@Language improvements and line wrapping fixes, from Moritz Jodeit
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.62 2002/06/24 09:54:43 dhartmei Exp $
d30 1
a30 1
.Dd June 20, 2002
d57 6
d123 12
a134 1
state-opt      = ( "max" number ) | ( timeout number ) .
d191 4
d203 10
d251 130
@


1.62
log
@Fix more example rules
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.61 2002/06/20 12:04:54 dhartmei Exp $
d35 2
a36 1
.Nd filtering and translation (NAT) rules file for the packet filter
d105 4
a108 2
flags          = "flags" ( flag-set | flag-set "/" flag-set | "/" flag-set ) .
flag-set       = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] [ "E" ] [ "W" ].
d206 1
a206 1
It should be noted that that all translations of packets occur before
d256 1
a256 1
The packet is redirected to a another destination and possibly a
d618 1
a618 1
poor ISNs thus are normally susceptible to ISN prediction exploits.
d644 2
a645 2
Without this fallback, modulation would cause both end hosts to
each think that the other had somehow lost sync.
d655 2
a656 3
The sudden withdrawl
of the modulation will appear to each side of the connection that its
peer has suddenly shifted its sequence by a random amount.
d658 1
a658 1
will be able to recover and the connection will stall then eventually close.
d698 1
a698 1
rules are evaluated independantly.
d764 2
a765 1
# The external interface is kue0 (157.161.48.183, the only routable address)
@


1.61
log
@Use 'inet' in translation rules where required, add example for proxy
port selection. From jolan at enteract dot com
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.60 2002/06/20 06:43:58 mpech Exp $
d524 2
a525 2
    pass out on $ext_if from any to any         keep state
    pass in  on $ext_if from any to any port 25 keep state
d867 1
a867 1
   rdr on fxp0 from any        to any     port 80 -> 127.0.0.1 80
@


1.60
log
@typo from form@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.59 2002/06/20 06:21:40 mpech Exp $
d3 1
a3 1
.\" Copyright (c) 2001, Daniel Hartmeier
d30 1
a30 1
.Dd June 14, 2002
d879 9
a887 2
# in my case, any address but the gateway's external address is mapped
nat on kue0 from ! (kue0) to any -> (kue0)
d898 4
a901 2
rdr on kue0 proto tcp from any to (kue0) port 8080 -> 10.1.2.151 port 22
rdr on kue0 proto udp from any to (kue0) port 8080 -> 10.1.2.151 port 53
@


1.59
log
@Spotted by form@@, mdoc things from mpech@@:
o) wrap long lines;
o) start new sentence on a new line;
o) 41952 -> 49151;
o) add 'flags S/SA' in "FILTER EXAMPLES";
o) remove blank lines before .Ed;

dhartmei@@, henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.58 2002/06/16 17:54:30 henning Exp $
d825 1
a825 1
pass in on $ext_if proto tcp from any to 157.161.48.183 port >= 41951 \\
@


1.58
log
@merge nat.conf.5
most work by Chris Kuethe, some changes by me.
ok dhartmei@@, pb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.57 2002/06/14 21:34:58 todd Exp $
d222 2
a223 1
to the sender, where applicable. Returning ICMP packets can have
d234 2
a235 1
rule specifies a bidirectional mapping between an external IP address and an internal IP address.
d240 2
a241 1
traverses the given interface. This technique allows a single IP address
d301 2
a302 2
option is to a filter rule. This option causes matching packets
to remain untranslated.
d646 2
a647 1
up again by the firewall.  State modulation causes the firewall to phase
d654 2
a655 1
peer has suddenly shifted its sequence by a random amount.  Neither side
d821 1
a821 1
	auth } keep state
d825 2
a826 2
pass in on $ext_if proto tcp from any to 157.161.48.183 port >= 41952 \\
	keep state
d859 2
a860 1
In the example below, fxp0 is the internal interface. Packets bound
a897 2


@


1.57
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.56 2002/06/08 17:10:52 dhartmei Exp $
d30 1
a30 1
.Dd July 8, 2001
d35 1
a35 1
.Nd filter rule configuration file for packet filtering
d41 3
d47 6
d115 16
d132 18
d152 7
a158 3
Filter rules are typically manipulated using
.Xr pfctl 8 .
Filter rules are loaded from a text file into the kernel using
d160 1
a160 1
.Cm # pfctl -R file
d163 9
a171 1
The active rule set can be displayed using
d175 4
d195 22
a218 2
.It Em pass
The packet is passed.
d224 2
d230 28
d293 7
d606 1
a606 6
Note: nat/rdr rules
.Po
see
.Xr nat.conf 5
.Pc
implicitly create state for connections.
d755 1
a755 1
.Sh EXAMPLES
d824 71
a904 1
.Xr nat.conf 5 ,
@


1.56
log
@.Xr pf.conf 5 . -> pfctl 8, from Dries Schellekens
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.55 2002/06/08 08:46:49 henning Exp $
d475 1
a475 1
refering to this TCP connection arrives, it will be matched to the right
@


1.55
log
@no macro concatenation
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.54 2002/06/08 08:12:31 dhartmei Exp $
d551 1
a551 1
.Xr pf.conf 5 .
@


1.54
log
@'(' -> "(" in BNF, from Dries Schellekens
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.53 2002/06/08 08:05:14 henning Exp $
a411 6
.Pp
Macros can be concatenated:
.Bd -literal
    webservers  = "{ 10.0.0.1,  10.0.0.7,  10.0.0.8, "
    webservers += "  10.0.0.17, 10.0.0.25, 10.0.0.37 }"
.Ed
@


1.53
log
@document macro concatenation
ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.52 2002/06/08 07:58:07 dhartmei Exp $
d82 1
a82 1
address        = ( interface-name | '(' interface-name ')' | host-name |
@


1.52
log
@Make state timeouts configurable per rule, like

  pass in from any to any port www keep state (tcp.established 60)

ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.51 2002/06/08 04:36:18 henning Exp $
d412 6
@


1.51
log
@document $proto, $nr in rule labels
add example
ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.50 2002/06/07 22:53:45 pb Exp $
d56 1
a56 1
                 [ ( "keep" | "modulate" ) "state" [ "(" "max" number ")" ] ]
d104 3
a495 5
.Pp
The "(max <number>)" option can be used to limit the number of concurrent
states a rule can create to the specified maximum.
When this limit is reached, further packets matching the rule that would
create state are dropped, until existing states time out.
d541 18
@


1.50
log
@
add the possibility to configure a TTL while return-rst

ok dhartmei@@, ipv6 part itojun@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.49 2002/06/07 21:25:36 dhartmei Exp $
d366 31
a396 3
You can use $srcaddr, $srcport, $dstaddr and $dstport which will be replaced
by source/destination address/port at parse time in the label.
This allows for unique labels even when using address lists.
@


1.49
log
@Add "(max <number>)" option for "keep/modulate state" to limit the number
of concurrent connections a rule can create. ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.48 2002/06/07 19:41:23 henning Exp $
d62 1
a62 1
return         = "return-rst" |
d140 2
a141 1
to the sender, where applicable.
@


1.48
log
@document $srcaddr/$srcport/$dstaddr/$dstport in rule labels
ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.47 2002/06/01 04:08:47 hugh Exp $
d56 1
a56 1
                 [ "keep state" ] [ "modulate state" ]
d464 5
@


1.47
log
@Document ECN support, with input from dhartmei@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.46 2002/05/12 15:02:52 dhartmei Exp $
d365 3
@


1.46
log
@Explain that user/group 'unknown' can only be used with operators = and !=
and refuse other constructs in the parser. Also note that 'user >= 0' does
not match forwarded packets with unknown user ID.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.45 2002/05/12 00:54:56 dhartmei Exp $
d96 1
a96 1
flag-set       = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] .
d320 2
a321 1
Possible flags are F (FIN), S (SYN), R (RST), P (PUSH), A (ACK) and U (URG).
d331 1
a331 1
If the second set is not specified, it defaults to FSRPAU.
@


1.45
log
@Add gid based filtering, reduce to one (effective) uid, rename parser
keywords to 'user' and 'group'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.44 2002/05/09 21:58:12 jasoni Exp $
d284 1
d286 1
a286 1
with the same user.
d289 1
d296 1
d302 10
a311 1
Example:
a312 1
    # allow only specific users to open outgoing connections
@


1.44
log
@Add a max-mss option to the scrub rule which will enforce a maximum mss
by lowering it to the given value.
- ok dhartmei@@, provos@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.43 2002/05/09 19:58:42 dhartmei Exp $
d54 1
a54 1
                 [ ruid ] [ euid ] [ flags ]
d87 2
a88 2
ruid           = "ruid" ( unary-op | binary-op | "{" op-list "}" ) .
euid           = "euid" ( unary-op | binary-op | "{" op-list "}" ) .
d274 3
a276 3
.Ss ruid <ruid> euid <euid>
The rule only applies to packets of sockets owned by the respective real
and effective user IDs.
d282 1
a282 1
the user is
d288 3
a290 1
Note that user IDs are stored when a socket is created;
d294 2
a295 2
User IDs can be specified as either numbers or names, the syntax is
similar to the one for ports.
d303 1
a303 1
    pass  out proto { tcp, udp } all ruid { < 1000, dhartmei } keep state
@


1.43
log
@Introduce user based filtering. Rules can specify ruid and euid (real and
effective user ID) much like ports. The user of a packet is either the
user that opens an outgoing connection, the one that listens on a socket,
or 'unknown' if the firewall is not a connection endpoint (for forwarded
connections). Socket uid lookup code from jwk@@bug.it.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.42 2002/05/08 18:54:14 jasoni Exp $
d58 2
a59 1
                 [ "allow-opts" ] [ "label" string ] .
d509 2
@


1.42
log
@move route grammar to a more logical place, suggested by malachi@@vaned.net
- ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.41 2002/04/30 16:23:01 mpech Exp $
d54 2
a55 1
                 [ flags ] ( [ icmp-type ] | [ ipv6-icmp-type ] )
d84 5
a88 2
port           = "port" ( unary-op | binary-op | "{" port-list "}" ) .
port-list      = ( unary-op | binary-op ) [ "," port-list ] .
d90 3
a92 2
                 ( port-name | port-number ) .
binary-op      = port-number ( "<>" | "><" ) port-number .
d272 29
@


1.41
log
@typo: form -> from. From form@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.40 2002/04/24 18:10:25 dhartmei Exp $
d67 3
a96 4

route          = "fastroute" |
                 "route-to" interface-name[":"address] |
                 "dup-to" interface-name[":"address]
@


1.40
log
@Add dynamic (in-kernel) interface name -> address translation. Instead of
using just the interface name instead of an address and reloading the rule
set whenever the interface changes its address, the interface name can be
put in parentheses, and the kernel will keep track of changes and update
rules. There is no additional cost for evaluating rules (per packet),
the cost occurs when an interface changes address (and the rules are
traversed and updated where necessary).
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.39 2002/04/23 14:32:23 dhartmei Exp $
d560 1
a560 1
# block anything coming form source we have no back routes for
@


1.39
log
@Allow explicit filtering of fragments when they are not reassembled.
Document fragment handling in the man page. Short version: if you're
scrubbing everything (as is recommended, in general), nothing changes.
If you want to deal with fragments manually, read the man page.
ok frantzen.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.38 2002/04/17 17:25:35 dhartmei Exp $
d71 4
a74 2
                 "from" ( "any" | "no-route" | host | "{" host-list "}" ) [ port ]
                 "to"   ( "any" | "no-route" | host | "{" host-list "}" ) [ port ] .
d77 2
a78 2
address        = ( interface-name | host-name | ipv4-dotted-quad |
                   ipv6-coloned-hex ) .
d233 1
a233 1
rule set load-time.
d237 3
a239 5
See
.Xr dhclient-script 8
or
.Xr ppp 8
for information on how to automate this task.
@


1.38
log
@50'000 -> 50000 (50,000 is equally wrong ;), from David Krause
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.37 2002/03/28 02:43:47 mickey Exp $
d56 2
a57 2
                 [ "no-df" ] [ "min-ttl" number ] [ "allow-opts" ]
                 [ "label" string ] .
d480 61
@


1.37
log
@looko; from Dries Schellekens <gwyllion@@ace.ulyssis.org>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.36 2002/03/27 18:16:17 mickey Exp $
d356 1
a356 1
Even with 50'000 states, only 16 comparisons are needed to match a
@


1.36
log
@implement a "no-route" keyword.
usage semantics are analogous w/ "any", meaning is
"any ip address for which there is no route in the
current routing table", could be used in both from and to.
typical usage would be (assuming symmetrical routing):
block in from no-route to any
also doc "any" in the pf.conf.5, include in regress, etc.
tested by me on i386 and sparc.
dhartmei@@ and frantzen@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.35 2002/03/17 18:22:45 dhartmei Exp $
d71 1
a71 1
                 "from" ( "any" ! "no-route" | host | "{" host-list "}" ) [ port ]
@


1.35
log
@Add references to FILES and SEE ALSO sections. From David Krause.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.34 2002/03/07 13:17:40 dhartmei Exp $
d71 2
a72 2
                 "from" ( "any" | host | "{" host-list "}" ) [ port ]
                 "to"   ( "any" | host | "{" host-list "}" ) [ port ] .
d222 8
a229 1
symbolic host names or interface names.
d498 3
@


1.34
log
@Add interface-list to BNF, re-indent and wrap. Found by Attila Nagy.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.33 2002/02/23 01:22:54 dhartmei Exp $
d541 1
d543 1
d548 1
d550 1
d552 1
@


1.33
log
@Mention that normalization happens before filtering, and that the position
of scrub rules (in relation to pass/block rules) is not relevant.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.32 2002/02/19 12:18:24 dhartmei Exp $
d47 36
a82 31
rule       = action ( "in" | "out" )
             [ "log" | "log-all" ] [ "quick" ]
             [ "on" interface-name ] [ route ] [ af ]
             [ "proto" ( proto-name | proto-number | "{" proto-list "}" ) ]
             hosts
             [ flags ] ( [ icmp-type ] | [ ipv6-icmp-type ] )
             [ "keep state" ] [ "modulate state" ]
             [ "no-df" ] [ "min-ttl" number ] [ "allow-opts" ]
             [ "label" string ] .

action     = "pass" | "block" [ return ] | "scrub" .
return     = "return-rst" |
             "return-icmp" [ "(" ( icmp-code-name | icmp-code-number ) ")" ] |
             "return-icmp6" [ "(" ( icmp-code-name | icmp-code-number ) ")" ] .

af	   = "inet" | "inet6" .
proto-list = ( proto-name | proto-number ) [ "," proto-list ] .

hosts      = "all" |
             "from" ( "any" | host | "{" host-list "}" ) [ port ]
             "to"   ( "any" | host | "{" host-list "}" ) [ port ] .

host       = [ "!" ] address [ "/" mask-bits ] .
address    = ( interface-name | host-name | ipv4-dotted-quad |
               ipv6-coloned-hex ) .
host-list  = host [ "," host-list ] .
port       = "port" ( unary-op | binary-op | "{" port-list "}" ) .
port-list  = ( unary-op | binary-op ) [ "," port-list ] .
unary-op   = [ "=" | "!=" | "<" | "<=" | ">" | ">=" ]
             ( port-name | port-number ) .
binary-op  = port-number ( "<>" | "><" ) port-number .
d84 2
a85 2
flags      = "flags" ( flag-set | flag-set "/" flag-set | "/" flag-set ) .
flag-set   = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] .
d87 1
a87 1
icmp-type  = "icmp-type" ( icmp-type-code | "{" icmp-list "}" ) . 
d91 1
a91 1
icmp-list  = icmp-type-code [ "," icmp-list ] . 
d93 3
a95 3
route      = "fastroute" |
             "route-to" interface-name[":"address] |
             "dup-to" interface-name[":"address]
@


1.32
log
@Add a BNF production for address (interface name, host name, or numeric).
In the examples, change "port = x" -> "port x", since it's shorter and
valid.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.31 2002/02/15 00:29:56 dhartmei Exp $
d463 5
@


1.31
log
@Correct BNF, unary port operators are optional and default to =,
"pass ... to any port = ssh" and "pass ... to any port ssh" are
equivalent.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.30 2002/01/27 02:08:08 frantzen Exp $
d70 2
d254 1
a254 1
    pass in proto tcp from any to any port = 25
d310 2
a311 2
    pass out on $ext_if from any to any           keep state
    pass in  on $ext_if from any to any port = 25 keep state
d352 2
a353 2
    pass out proto tcp from any to any           flags S/SA keep state
    pass in  proto tcp from any to any port = 25 flags S/SA keep state
d419 2
a420 2
    pass out proto tcp from any to any                      modulate state
    pass in  proto tcp from any to any port = 25 flags S/SA modulate state
d512 1
a512 1
pass in on $ext_if proto udp from any to any port = domain keep state
@


1.30
log
@clarify the caveats of state modulation a wee bit
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.29 2002/01/09 11:30:53 dhartmei Exp $
d73 1
a73 1
unary-op   = ( "=" | "!=" | "<" | "<=" | ">" | ">=" )
@


1.29
log
@Add labels to rules. These are arbitrary names (not to be confused with
tags that will be used to tag packets later on). Add pfctl -z to clear
per-rule counters. Add pfctl -s labels to output per-rule counters in
terse format and only for rules that have labels. Suggested by
Henning Brauer.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.28 2001/12/07 20:36:17 beck Exp $
d423 9
a431 4
picks up an already established connection (the firewall was rebooted, the
state table was flushed, ...) it will not randomize the sequence number and it
will fall back to operating as if "keep state" was specified for that
connection.
d434 10
a443 3
currently established modulated connections can not be continued or picked
up again by the firewall.
The sequence numbers will be out of sync without the modulator.
@


1.28
log
@add example for ftp-proxy data connections, to reduce some of the questions
on misc@@.  ok dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.27 2001/11/26 16:51:13 jasoni Exp $
d54 2
a55 1
             [ "no-df" ] [ "min-ttl" number ] [ "allow-opts" ] .
d298 5
@


1.27
log
@add bnf and some documentation on fastroute/route-to/dup-to
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.26 2001/10/24 10:23:53 dhartmei Exp $
d502 6
@


1.26
log
@"minium" -> "minimum", ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.25 2001/10/15 16:22:22 dhartmei Exp $
d49 1
a49 1
             [ "on" interface-name ] [ af ]
d85 4
d165 18
@


1.25
log
@Add 'allow-opts' to rules. Packets with IP options will be blocked by
default now, and can be allowed per rule. ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.24 2001/10/11 19:52:28 dhartmei Exp $
d420 1
a420 1
Enforces a minium ttl for matching ip packets.
@


1.24
log
@Remove URL, the FAQ links to it.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.23 2001/10/11 19:02:19 dhartmei Exp $
d54 1
a54 1
             [ "no-df" ] [ "min-ttl" number ] .
d261 14
@


1.23
log
@List possible flags (FIN, SYN, RST, PUSH, ACK, URG), suggested
by Todd Fries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.22 2001/10/09 13:49:18 dhartmei Exp $
a477 5
.Pp
.Pa http://www.obfuscation.org/ipf/
has an extensive filter rule tutorial which for the most part applies to
.Em pf
as well.
@


1.22
log
@man page corrections, from Brian J. Kifiak
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.21 2001/10/07 11:56:57 dhartmei Exp $
d236 1
@


1.21
log
@Add interface name to address translation to pfctl, document it and add
a regress test. Translation is done on rule set load-time only, so the
rule sets must be reloaded when an interface address changes.
parse.y patch from Cedric Berger. Similar patch from Jonathon Fletcher.
Thanks to both.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.20 2001/10/05 14:45:54 mpech Exp $
d144 1
a144 1
This interfece is monitored by
d167 2
a168 1
Certain parameters can be expressed as lists, in which case pfctl
d254 1
a254 1
The rule only applies to ICMP or ICMPV6 packets with the specified type
d271 1
d323 3
a325 1
This will cause pf to synchronize to existing connections, for instance
d355 1
a355 1
implicitely create state for connections.
d358 1
a358 1
initial sequence numbers (ISN) are chosen.
d381 1
a381 1
state table was flushed...) it will not randomize the sequence number and it
d390 1
a390 1
Packet normalization is envoked via the
d395 1
a395 1
the receiver side.
@


1.20
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.19 2001/10/01 19:04:16 dhartmei Exp $
d189 15
a203 2
Addresses can be specified in CIDR notation (matching netblocks) and ports
can be specified using these operators
@


1.19
log
@Clean up example rule set. Use \ to wrap lines, use macro for interface name,
scrub in all.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.18 2001/10/01 18:44:36 dhartmei Exp $
d143 2
a144 1
interface. This interfece is monitored by
d150 2
a151 1
binary format. The log files can be read using tcpdump:
d233 2
a234 1
rule. This is more restrictive than the previous example.
d341 2
a342 2
initial sequence numbers (ISN) are chosen.  Some popular stack implementations
choose
d344 2
a345 2
poor ISNs thus are normally susceptible to ISN prediction exploits.  By
applying a "modulate state" rule to a TCP connection, 
d370 2
a371 3
up again by the firewall.  The sequence numbers will be out of sync without
the modulator.

d375 2
a376 1
directive.  Normalization is used to sanitize packet content in such
@


1.18
log
@It's keep state and modulate state, not keep-state/modulate-state.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.17 2001/09/28 14:12:15 dhartmei Exp $
d388 8
a395 2
# My external interface is kue0 (157.161.48.183, my only routable address)
# and the private network is 10.0.0.0/8, for which i'm doing NAT.
d398 6
a403 6
block             out log on kue0           all
block             in  log on kue0           all
block return-rst  out log on kue0 proto tcp all
block return-rst  in  log on kue0 proto tcp all
block return-icmp out log on kue0 proto udp all
block return-icmp in  log on kue0 proto udp all
d405 1
a405 1
# block and log outgoing packets that don't have my address as source,
d408 1
a408 1
block out log quick on kue0 from ! 157.161.48.183 to any
d411 1
a411 1
block in quick on kue0 from any to 255.255.255.255
d416 2
a417 1
block in log quick on kue0 from { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 255.255.255.255/32 } to any
a418 1
# -----------------------------------------------------------------------
a419 1
# -----------------------------------------------------------------------
d426 2
a427 2
pass out on kue0 inet proto icmp all icmp-type 8 code 0 keep state
pass in  on kue0 inet proto icmp all icmp-type 8 code 0 keep state
a428 1
# -----------------------------------------------------------------------
a429 1
# -----------------------------------------------------------------------
d432 1
a432 1
pass out on kue0 proto udp all keep state
d435 1
a435 1
pass in on kue0 proto udp from any to any port = domain keep state
a436 1
# -----------------------------------------------------------------------
a437 1
# -----------------------------------------------------------------------
d440 1
a440 1
pass out on kue0 proto tcp all modulate state
d443 2
a444 1
pass in on kue0 proto tcp from any to any port { ssh, smtp, domain, auth } keep state
@


1.17
log
@Support underscores in macro names and document it in the man page.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.16 2001/09/25 19:55:25 dhartmei Exp $
d53 1
a53 1
             [ "keep-state" ] [ "modulate-state" ]
d261 1
a261 1
If a packet matches a pass ... keep-state rule, the filter creates
@


1.16
log
@Update examples (af is required for proto icmp).
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.15 2001/09/15 14:04:20 jakob Exp $
d247 3
a249 3
    if="kue0"
    pass out on $if from any to any           keep state
    pass in  on $if from any to any port = 25 keep state
d251 3
@


1.15
log
@describe pflogd usage; canacar@@eee.metu.edu.tr, ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.14 2001/09/15 03:54:40 frantzen Exp $
d320 1
a320 1
    pass out proto icmp all icmp-type echoreq keep state
d418 2
a419 2
pass out on kue0 proto icmp all icmp-type 8 code 0 keep state
pass in  on kue0 proto icmp all icmp-type 8 code 0 keep state
@


1.14
log
@IPv6 support from Ryan McBride (mcbride@@countersiege.com)
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.13 2001/08/28 08:48:57 dhartmei Exp $
d141 9
a149 1
The log messages can be viewed with tcpdump:
d151 1
a151 2
.Cm # ifconfig pflog0 up
.Cm # tcpdump -n -i pflog0
d450 2
a451 1
.Xr pfctl 8
@


1.13
log
@Mention macro definition/expansion with an example.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.12 2001/08/25 21:54:26 frantzen Exp $
d49 1
a49 1
             [ "on" interface-name ]
d52 2
a53 1
             [ flags ] [ icmp-type ] [ "keep-state" ] [ "modulate-state" ]
d58 2
a59 1
             "return-icmp" [ "(" ( icmp-code-name | icmp-code-number ) ")" ] .
d61 1
d79 6
a84 2
icmp-type  = "icmp-type" ( icmp-type-name | icmp-type-number )
             [ "code" ( icmp-code-name | icmp-code-number ) ] .
d125 1
d171 3
d176 1
a176 1
Common protocols used here are tcp, udp and icmp.
d229 7
a235 3
.Ss icmp-type <type> code <code>
The rule only applies to ICMP packets with the specified type and code.
This parameter is only valid for rules that cover protocol icmp.
@


1.12
log
@PF ISN randomization.  Or in trekkie techno-babble, ISN phase modulation.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.11 2001/08/19 16:44:39 dhartmei Exp $
d221 8
@


1.11
log
@Parameter list expansion, documentation and examples.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.10 2001/07/31 09:02:18 wilfried Exp $
d52 1
a52 1
             [ flags ] [ icmp-type ] [ "keep-state" ]
d126 2
d303 34
d405 2
a406 2
# pass out all TCP connections and keep state
pass out on kue0 proto tcp all keep state
@


1.10
log
@allow to test that flags are unset, ok dhartmei@@,  mickey@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.9 2001/07/22 20:47:19 krw Exp $
d47 25
a71 21
rule      = action ( "in" | "out" )
            [ "log" | "log-all" ] [ "quick" ]
            [ "on" interface-name ]
            [ "proto" ( proto-name | proto-number ) ]
            hosts
            [ flags ] [ icmp-type ] [ "keep-state" ]
            [ "no-df" ] [ "min-ttl" number ].

action    = "pass" | "block" [ return ] | "scrub" .
return    = "return-rst" |
            "return-icmp" [ "(" ( icmp-code-name | icmp-code-number ) ")" ]
            .

hosts     = "all" |
            "from" ( "any" | host ) [ port ] "to" ( "any" | host ) [ port ]
            .
host      = [ "!" ] address [ "/" mask-bits ] .
port      = "port" ( unary-op | binary-op ) .
unary-op  = ( "=" | "!=" | "<" | "<=" | ">" | ">=" )
            ( port-name | port-number ) .
binary-op = port-number ( "<>" | "><" ) port-number .
d73 2
a74 2
flags     = "flags" ( flag-set | flag-set "/" flag-set | "/" flag-set ) .
flag-set  = [ "F" ] [ "S" ] [ "R" ] [ "P" ] [ "A" ] [ "U" ] .
d76 2
a77 2
icmp-type = "icmp-type" ( icmp-type-name | icmp-type-number )
            [ "code" ( icmp-code-name | icmp-code-number ) ] .
d148 2
d341 1
a341 4
block in log quick on kue0 from 10.0.0.0/8         to any
block in log quick on kue0 from 172.16.0.0/12      to any
block in log quick on kue0 from 192.168.0.0/16     to any
block in log quick on kue0 from 255.255.255.255/32 to any
d373 1
a373 4
pass in on kue0 proto tcp from any to any port = ssh    keep state
pass in on kue0 proto tcp from any to any port = smtp   keep state
pass in on kue0 proto tcp from any to any port = domain keep state
pass in on kue0 proto tcp from any to any port = auth   keep state
@


1.9
log
@Fix times vs timed typo. Closes PR #1952.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.8 2001/07/20 15:42:39 markus Exp $
d69 1
a69 1
flags     = "flags" flag-set [ "/" flag-set ] .
d190 1
a190 1
.Ss flags <a>[/<b>]
d206 3
@


1.8
log
@fix example: you need 'proto' if you specify ports
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.7 2001/07/20 14:11:05 deraadt Exp $
d225 1
a225 1
States are removed after the connection is closed or has times out.
@


1.7
log
@first cut at a cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.6 2001/07/17 22:33:02 provos Exp $
d186 3
a188 3
    pass in from any port <= 1024 to any
    pass in from any to any port = 25
    pass in from 10.0.0.0/8 port > 1024 to ! 10.1.2.3 port != 22
@


1.6
log
@talk about normalization
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.5 2001/07/16 15:41:59 dhartmei Exp $
d37 3
a39 1
The packet filter drops, passes and modifies packets according to the
d76 2
d80 1
a80 1
.Cm pfctl -R file
d85 1
a85 1
.Cm pfctl -s r
d92 5
a96 3
If no rule matches the packet, the default action is pass.
If you rather want to block everything by default and only pass packets
that match explicit rules, you can achieve this by adding
d98 2
a99 2
    block in all
    block out all
d102 1
a102 1
as your first two rules.
d105 1
a105 1
.It Li pass
d107 1
a107 1
.It Li block
d111 1
a111 1
.It Li scrub
d117 1
a117 1
.It Li log
d119 1
a119 1
.It Li log-all
d129 2
a130 2
    ifconfig pflog0 up
    tcpdump -n -i pflog0
d144 1
a144 1
.Ss in/out
d146 5
a150 1
Either in or out must be specified.
d171 1
a171 1
.It Li port 2000 >< 2004
d175 1
a175 1
.It Li port 2000 <> 2004
d195 1
a195 1
.It Li flags S/S
d198 1
a198 1
.It Li flags S/SA
d202 1
a202 1
.It Li flags S
d210 1
a210 1
.Sh KEEP STATE
d214 1
a214 1
Instead of passing all traffic to port 25, for instance, you can pass
d236 1
a236 1
If you have 50 rules, all of them are evaluated sequentially in O(n).
a240 3
It also makes writing rule sets easier, once you embrace the concept.
You only filter the initial packets and keep state.
All other packets are handled by states.
d257 1
a257 1
You can also be less restrictive, and allow state creation from
d262 1
a262 1
if you flush the state table.
d270 1
a270 1
If you keep state on a TCP connection, and an ICMP source quench message
a313 1
#
a323 1
#
a326 1
#
a331 1
#
a341 1
#
a343 1
#
a345 1
#
a353 1
#
a356 1
#
a363 1
#
a366 1
#
@


1.5
log
@improvements by mpech@@. thank you.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.4 2001/07/16 14:25:39 dhartmei Exp $
d50 2
a51 1
            [ flags ] [ icmp-type ] [ "keep-state" ] .
d285 16
@


1.4
log
@add some substance. formatting probably sub-standard. help appreciated.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.3 2001/07/10 11:05:41 dhartmei Exp $
d38 4
a41 3
rules defined in this file. For each packet inspected by the filter,
the set of rules is evaluated from top to bottom, and the last
matching rule decides what action is performed.
d73 8
a80 3
Filter rules are loaded from a text file into the kernel using pfctl -R
<file>, which replaces the active rule set with the new one. The active
rule set can be displayed using pfctl -s r.
d83 7
a89 7
evaluated in sequential order, from first to last. Each rule either
matches the packet or doesn't. The last matching rule decides what action
is taken.
.Pp
If no rule matches the packet, the default action is pass. If you rather
want to block everything by default and only pass packets that match
explicit rules, you can achieve this by adding
d101 3
a103 2
The packet is blocked. Optionally, the filter can return a TCP RST or
ICMP UNREACHABLE packet to the sender, where applicable.
d105 2
a106 2
The packet is run through normalization/defragmentation. Scrub rules
are not considered last matching rules.
d113 5
a117 2
Used with 'keep state' rules. Not only the packet that creates state
is logged, but all packets of the connection.
d126 3
a128 1
If a packet matches a rule which has the 'quick' option set, this rule
d132 5
a136 4
The rule parameters specify for what packets a rule applies. A packet
always comes in on or goes out through one interface. Most parameters
are optional. If a parameter is specified, the rule only applies to
packets with matching attributes.
d138 3
a140 2
The rule applies to incoming or outgoing packets. Either in or out must
be specified. To cover both directions, two rules are needed.
d145 2
a146 2
The rule applies only to packets of this protocol. Common protocols used
here are tcp, udp and icmp.
d149 3
a151 2
addresses/ports. Addresses can be specified in CIDR notation (matching
netblocks) and ports can be specified using these operators
d161 3
a163 1
means 'all ports > 2000 and < 2004', hence ports 2001, 2002 and 2003.
d165 3
a167 1
means 'all ports < 2000 or > 2004', hence ports 1-1999 and 2005-65535.
d181 2
a182 1
out of set <b>. Flags not specified in <b> are ignored.
d185 2
a186 1
Flag SYN is set. The other flags are ignored.
d188 3
a190 3
Of SYN and ACK, exactly SYN is set. SYN, SYN+PSH, SYN+RST match, but
SYN+ACK, ACK and ACK+RST don't. This is more restrictive than the
previous example.
d192 3
a194 3
If the second set is not specified, it defaults to FSRPAU. Hence, only
packets with SYN set and all other flags unset match this rule. This is
more restrictive than the previous example.
d200 5
a204 3
pf is a stateful packet filter, which means it can track the state of
a connection. Instead of passing all traffic to port 25, for instance,
you can pass only the initial packet and keep state.
d211 2
a212 2
matches any state. If it does, the packet is passed without evaluation
of any rules.
d216 5
a220 4
This has several advantages. Comparing a packet to a state involves
checking its sequence numbers. If the sequence numbers are outside
the narrow windows of expected values, the packet is dropped. This
prevents spoofing attacks, where the attacker sends packets with
d224 2
a225 2
Also, looking up states is usually faster than evaluating rules. If
you have 50 rules, all of them are evaluated sequentially in O(n).
d231 3
a233 2
You only filter the initial packets and keep state. All other packets
are handled by states. For instance:
d241 5
a245 5
This rule set blocks everything by default. Only outgoing connections
and incoming connection to port 25 are allowed. The inital packet of
each connection has the SYN flag set, will be passed and creates
state. All further packets of these connections are passed if they
match a state.
d248 6
a253 3
packet of the TCP handshake. You can also be less restrictive, and
allow state creation from intermediate (non-SYN) packets. This
will cause pf to synchronize to existing connections, for instance
d257 2
a258 2
as well. UDP packets are matched to states using only host addresses
and ports.
d266 4
a269 2
For ICMP queries, keep state creates an ICMP state, and pf knows how to
match ICMP replies to states. For example
d274 10
a283 4
lets echo requests (pings) out, creates state, and matches incoming echo
replies correctly to states.
.Pp
Note: nat/rdr rules (see nat.conf) implicitely create state for connections.
d370 4
a373 2
http://www.obfuscation.org/ipf/ has an extensive filter rule tutorial
which for the most part applies to pf as well.
@


1.3
log
@some .Pp removed, according to mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.2 2001/07/09 22:12:03 marc Exp $
d53 2
a54 1
            "return-icmp" [ "(" ( icmp-code-name | icmp-code-number ) ")" ] .
d57 2
a58 1
            "from" ( "any" | host ) [ port ] "to" ( "any" | host ) [ port ].
d71 4
d76 172
a247 1
Emtpy lines and lines beginning with the character `#' are ignored.
d250 2
a251 2
# My external interface is kue0 (157.161.48.183, my only routable address) and
# the private network is 10.0.0.0/8, for which i'm doing NAT.
d262 3
a264 3
# block and log outgoing packets that don't have my address as source, they are
# either spoofed or something is misconfigured (NAT disabled, for instance),
# we want to be nice and don't send out garbage.
d281 1
a281 1
# -----------------------------------------------------------------------------
d283 1
a283 1
# -----------------------------------------------------------------------------
d287 2
a288 2
# state matching is done on host addresses and ICMP id (not type/code), so
# replies (like 0/0 for 8/0) will match queries
d290 2
a291 2
# ICMP error messages (which always refer to a TCP/UDP packet) are handled
# by the TCP/UDP states
d296 1
a296 1
# -----------------------------------------------------------------------------
d298 1
a298 1
# -----------------------------------------------------------------------------
d308 1
a308 1
# -----------------------------------------------------------------------------
d310 1
a310 1
# -----------------------------------------------------------------------------
d333 3
@


1.2
log
@Add missing closing paren
@
text
@d1 1
a1 1
.\"	$OpenBSD: pf.conf.5,v 1.1 2001/07/08 14:31:23 dhartmei Exp $
a40 1
.Pp
a42 1
.Pp
a70 1
.Pp
a145 1
.Pp
@


1.1
log
@first draft of pf.conf man page (just BNF grammar and example yet)
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d49 1
a49 1
            [ "proto" ( proto-name | proto-number ]
@

