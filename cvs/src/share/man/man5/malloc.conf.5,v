head	1.11;
access;
symbols
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@.\" @;


1.11
date	2016.10.31.10.07.18;	author otto;	state Exp;
branches;
next	1.10;
commitid	Z2dhCBrJvlaKMKmI;

1.10
date	2016.10.28.17.03.47;	author otto;	state Exp;
branches;
next	1.9;
commitid	30a5ZMFgLqKaQ2lR;

1.9
date	2016.10.17.06.29.08;	author otto;	state Exp;
branches;
next	1.8;
commitid	2tR6V6BdorrXe6lc;

1.8
date	2016.10.14.17.34.27;	author otto;	state Exp;
branches;
next	1.7;
commitid	0XWeugGfSAlBONPT;

1.7
date	2016.07.06.20.32.02;	author otto;	state Exp;
branches;
next	1.6;
commitid	AYsEYDeA9HAJozst;

1.6
date	2016.02.19.23.27.17;	author tb;	state Exp;
branches;
next	1.5;
commitid	J3MXSUVoKrwATrRr;

1.5
date	2016.01.12.18.56.39;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	U78p9KM1d0Z1UFeZ;

1.4
date	2016.01.12.18.48.28;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	jgsjzNuRQin8YFSJ;

1.3
date	2016.01.06.17.54.50;	author tedu;	state Exp;
branches;
next	1.2;
commitid	0w8VH9NScIub6Ghc;

1.2
date	2015.12.09.14.09.50;	author tb;	state Exp;
branches;
next	1.1;
commitid	WGunImwQjtkZ6xMB;

1.1
date	2014.12.06.18.54.55;	author schwarze;	state Exp;
branches;
next	;
commitid	hnyzhLLlbSmHuq4Z;


desc
@@


1.11
log
@P is not settable enymore
@
text
@.\"	$OpenBSD: malloc.conf.5,v 1.10 2016/10/28 17:03:47 otto Exp $
.\"
.\" Copyright (c) 2012 Damien Miller <djm@@openbsd.org>
.\" Copyright (c) 2008, 2009, 2010, 2011 Otto Moerbeek <otto@@drijf.net>
.\" Copyright (c) 2003, 2004, 2005 Ted Unangst <tedu@@openbsd.org>
.\" Copyright (c) 1995, 1996 Poul-Henning Kamp <phk@@freebsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: October 28 2016 $
.Dt MALLOC.CONF 5
.Os
.Sh NAME
.Nm malloc.conf
.Nd options for the memory allocator
.Sh DESCRIPTION
Upon the first call to the
.Xr malloc 3
family of functions, an initialization sequence inspects the
symbolic link
.Pa /etc/malloc.conf ,
next checks the environment for a variable called
.Ev MALLOC_OPTIONS ,
and finally looks at the global variable
.Va malloc_options
in the program.
Each is scanned for the following flags.
Flags are single letters.
Unless otherwise noted uppercase means on, lowercase means off.
.Bl -tag -width indent
.It Cm C
.Dq Canaries .
Add canaries at the end of allocations in order to detect
heap overflows.
The canary's content is checked when
.Xr free 3
is called.
If it has been corrupted, the process is aborted.
.It Cm D
.Dq Dump .
.Xr malloc 3
will dump statistics to the file
.Pa ./malloc.out ,
if it already exists,
at exit.
This option requires the library to have been compiled with -DMALLOC_STATS in
order to have any effect.
.It Cm F
.Dq Freeguard .
Enable use after free detection.
Unused pages on the freelist are read and write protected to
cause a segmentation fault upon access.
This will also switch off the delayed freeing of chunks,
reducing random behaviour but detecting double
.Xr free 3
calls as early as possible.
This option is intended for debugging rather than improved security
(use the
.Cm U
option for security).
.It Cm G
.Dq Guard .
Enable guard pages.
Each page size or larger allocation is followed by a guard page that will
cause a segmentation fault upon any access.
.It Cm J
.Dq More junking .
Increase the junk level by one if it is smaller than 2.
.It Cm j
.Dq Less junking .
Decrease the junk level by one if it is larger than 0.
Junking writes some junk bytes into the area allocated.
Currently junk is bytes of 0xdb when allocating;
freed chunks are filled with 0xdf.
By default the junk level is 1: small chunks are always junked
and the first part of pages is junked after free.
After a delay (if not switched off by the F option),
the filling pattern is validated and the process is aborted if the pattern
was modified.
If the junk level is zero, no junking is performed.
For junk level 2, junking is done without size restrictions.
.It Cm R
.Dq realloc .
Always reallocate when
.Xr realloc 3
is called, even if the initial allocation was big enough.
.\".Pp
.\".It Cm U
.\".Dq utrace .
.\"Generate entries for
.\".Xr ktrace 1
.\"for all operations.
.\"Consult the source for this one.
.It Cm S
Enable all options suitable for security auditing.
.It Cm U
.Dq Free unmap .
Enable use after free protection for larger allocations.
Unused pages on the freelist are read and write protected to
cause a segmentation fault upon access.
.It Cm X
.Dq xmalloc .
Rather than return failure,
.Xr abort 3
the program with a diagnostic message on stderr.
It is the intention that this option be set at compile time by
including in the source:
.Bd -literal -offset indent
extern char *malloc_options;
malloc_options = "X";
.Ed
.Pp
Note that this will cause code that is supposed to handle
out-of-memory conditions gracefully to abort instead.
.It Cm <
.Dq Half the cache size .
Decrease the size of the free page cache by a factor of two.
.It Cm >
.Dq Double the cache size .
Increase the size of the free page cache by a factor of two.
.El
.Pp
If a program changes behavior if any of these options (except
.Cm X )
are used,
it is buggy.
.Pp
The default number of free pages cached is 64 per malloc pool.
Multi-threaded programs use multiple pools.
.Sh ENVIRONMENT
.Bl -tag -width "/etc/malloc.conf"
.It Ev MALLOC_OPTIONS
string of option flags
.El
.Sh FILES
.Bl -tag -width "/etc/malloc.conf"
.It Pa /etc/malloc.conf
symbolic link to filename containing option flags
.El
.Sh EXAMPLES
Set a systemwide reduction of the cache to a quarter of the
default size and use guard pages:
.Pp
.Dl # ln -s 'G<<' /etc/malloc.conf
.Sh SEE ALSO
.Xr malloc 3
@


1.10
log
@H is no more
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.9 2016/10/17 06:29:08 otto Exp $
d20 1
a20 1
.Dd $Mdocdate: October 17 2016 $
a91 6
.It Cm P
.Dq Move allocations within a page.
Allocations larger than half a page but smaller than a page
are aligned to the end of a page to catch buffer overruns in more
cases.
This is the default.
@


1.9
log
@R option doesn't compact memory at all; flags are not only useful for
tetsing and debugging; mult-threaded programs use multiple pools
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.8 2016/10/14 17:34:27 otto Exp $
d20 1
a20 1
.Dd $Mdocdate: October 14 2016 $
a75 4
.It Cm H
.Dq Hint .
Pass a hint to the kernel about pages we don't use.
If the machine is paging a lot this may help a bit.
@


1.8
log
@0xd0 -> 0xdb; ok deraadt@@ millert@@ tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.7 2016/07/06 20:32:02 otto Exp $
d20 1
a20 1
.Dd $Mdocdate: July 6 2016 $
a106 1
This can substantially aid in compacting memory.
a142 1
The flags are mostly for testing and debugging.
d148 2
a149 1
The default number of free pages cached is 64.
@


1.7
log
@J/j is a three valued option, document and fix code to actuall support that
with a little help from jmc@@ for the man page bits
ok jca@@  and a reluctant tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.6 2016/02/19 23:27:17 tb Exp $
d20 1
a20 1
.Dd $Mdocdate: February 19 2016 $
d87 2
a88 4
Currently junk is bytes of 0xd0 when allocating; this is pronounced
.Dq Duh .
\&:-)
Freed chunks are filled with 0xdf.
@


1.6
log
@Fix grammar by splitting a longish sentence.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.5 2016/01/12 18:56:39 deraadt Exp $
d20 1
a20 1
.Dd $Mdocdate: January 12 2016 $
d38 2
a39 1
Flags are single letters, uppercase means on, lowercase means off.
d81 6
a86 2
.Dq Junk .
Fill some junk into the area allocated.
d91 7
a97 8
.It Cm j
.Dq Don't Junk .
By default, small chunks are always junked, and the first part of pages
is junked after free.
The reuse of freed memory is delayed.
After the delay, the filling pattern is validated
and the process is aborted if the pattern was modified.
This option ensures that no junking is performed.
@


1.5
log
@zap trailing whitespace
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.4 2016/01/12 18:48:28 deraadt Exp $
d89 2
a90 1
is junked after free and its reuse is delayed.
@


1.4
log
@accurately describe that the (3) malloc option settings are only
inspected on the first call to a malloc(3) family function.
ok tedu
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.3 2016/01/06 17:54:50 tedu Exp $
d20 1
a20 1
.Dd $Mdocdate: January 6 2016 $
d35 1
a35 1
.Va malloc_options 
@


1.3
log
@malloc option 'a' to go away
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.2 2015/12/09 14:09:50 tb Exp $
d20 1
a20 1
.Dd $Mdocdate: December 9 2015 $
d27 1
a27 1
The memory allocator functions of the
d29 9
a37 7
family first look for a symbolic link called
.Pa /etc/malloc.conf
and next check the environment for a variable called
.Ev MALLOC_OPTIONS
and finally for the global variable
.Va malloc_options
and scan them for flags in that order.
@


1.2
log
@Document the new canaries and junk validation features.

ok tedu@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.conf.5,v 1.1 2014/12/06 18:54:55 schwarze Exp $
d20 1
a20 1
.Dd $Mdocdate: December 6 2014 $
a37 8
.It Cm A
.Dq Abort .
.Xr malloc 3
will coredump the process, rather than tolerate internal
inconsistencies or incorrect usage.
This is the default and a very handy debugging aid,
since the core file represents the time of failure,
rather than when the bogus pointer was used.
@


1.1
log
@malloc(3) is in the "comp" install set, malloc.conf(5) in "man",
breaking the hardlink between file system entries, confusing apropos(1).
Split malloc.conf(5) out of malloc(3) as suggested by deraadt@@.
Feedback and OK jmc@@, OK deraadt@@ tedu@@ jasper@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.3,v 1.85 2014/10/30 21:47:47 deraadt Exp $
d20 1
a20 1
.Dd $Mdocdate: October 30 2014 $
d46 8
d95 3
a97 1
is junked after free.
@

