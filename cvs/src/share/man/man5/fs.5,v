head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.6
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.8
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.30
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.26
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.24
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.22
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.20
	OPENBSD_5_0:1.16.0.18
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.16
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.14
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.10
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.12
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.8
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.14.0.12
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.6
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.4
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.19
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	PeV7Ql0T6htfMjhP;

1.18
date	2015.02.15.22.26.45;	author bentley;	state Exp;
branches;
next	1.17;
commitid	szmpRDHaqpG6RctM;

1.17
date	2014.05.29.12.02.50;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.25.16.15.29;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.58;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.26.09.42.14;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2004.02.24.07.17.32;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.06.13.28.13;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.30.14;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.18.23.40.58;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.04.16.56.51;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.19.19.25.28;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.07.09.13.35.38;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.23.14.11.05;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.03.11.01.35.05;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.11.26.04.25.58;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.07.20.22.47.12;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.04.02.19.21.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@use .In rather than .Fd #include
@
text
@.\"	$OpenBSD: fs.5,v 1.18 2015/02/15 22:26:45 bentley Exp $
.\"	$NetBSD: fs.5,v 1.3 1994/11/30 19:31:17 jtc Exp $
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)fs.5	8.2 (Berkeley) 4/19/94
.\"
.Dd $Mdocdate: February 15 2015 $
.Dt FS 5
.Os
.Sh NAME
.Nm fs ,
.Nm inode
.Nd format of file system volume
.Sh SYNOPSIS
.In sys/types.h
.In ufs/ffs/fs.h
.In ufs/ufs/inode.h
.Sh DESCRIPTION
The files
.In ufs/ffs/fs.h
and
.In ufs/ufs/inode.h
declare several structures and define variables and macros
which are used to create and manage the underlying format of
file system objects on random access devices (disks).
.Pp
The block size and number of blocks which
comprise a file system are parameters of the file system.
Sectors beginning at
.Dv BBLOCK
and continuing for
.Dv BBSIZE
are used
for a disklabel and for some hardware primary
and secondary bootstrapping programs.
.Pp
The actual file system begins at sector
.Dv SBLOCK
with the
.Em super-block
that is of size
.Dv SBSIZE .
The following structure describes the super-block and is
from the file
.In ufs/ffs/fs.h :
.Bd -literal
#define	FS_MAGIC 0x011954
struct fs {
	int32_t	 fs_firstfield;	/* historic file system linked list, */
	int32_t	 fs_unused_1;	/*     used for incore super blocks */
	int32_t	 fs_sblkno;	/* addr of super-block / frags */
	int32_t	 fs_cblkno;	/* offset of cyl-block / frags */
	int32_t	 fs_iblkno;	/* offset of inode-blocks / frags */
	int32_t	 fs_dblkno;	/* offset of first data / frags */
	int32_t	 fs_cgoffset;	/* cylinder group offset in cylinder */
	int32_t	 fs_cgmask;	/* used to calc mod fs_ntrak */
	int32_t	 fs_ffs1_time;	/* last time written */
	int32_t	 fs_ffs1_size;	/* # of blocks in fs / frags */
	int32_t	 fs_ffs1_dsize;	/* # of data blocks in fs */
	int32_t	 fs_ncg;	/* # of cylinder groups */
	int32_t	 fs_bsize;	/* size of basic blocks / bytes */
	int32_t	 fs_fsize;	/* size of frag blocks / bytes */
	int32_t	 fs_frag;	/* # of frags in a block in fs */
/* these are configuration parameters */
	int32_t	 fs_minfree;	/* minimum percentage of free blocks */
	int32_t	 fs_rotdelay;	/* # of ms for optimal next block */
	int32_t	 fs_rps;	/* disk revolutions per second */
/* these fields can be computed from the others */
	int32_t	 fs_bmask;	/* ``blkoff'' calc of blk offsets */
	int32_t	 fs_fmask;	/* ``fragoff'' calc of frag offsets */
	int32_t	 fs_bshift;	/* ``lblkno'' calc of logical blkno */
	int32_t	 fs_fshift;	/* ``numfrags'' calc # of frags */
/* these are configuration parameters */
	int32_t	 fs_maxcontig;	/* max # of contiguous blks */
	int32_t	 fs_maxbpg;	/* max # of blks per cyl group */
/* these fields can be computed from the others */
	int32_t	 fs_fragshift;	/* block to frag shift */
	int32_t	 fs_fsbtodb;	/* fsbtodb and dbtofsb shift constant */
	int32_t	 fs_sbsize;	/* actual size of super block */
	int32_t	 fs_csmask;	/* csum block offset (now unused) */
	int32_t	 fs_csshift;	/* csum block number (now unused) */
	int32_t	 fs_nindir;	/* value of NINDIR */
	int32_t	 fs_inopb;	/* inodes per file system block */
	int32_t	 fs_nspf;	/* DEV_BSIZE sectors per frag */
/* yet another configuration parameter */
	int32_t	 fs_optim;	/* optimization preference, see below */
/* these fields are derived from the hardware */
	int32_t	 fs_npsect;	/* DEV_BSIZE sectors/track + spares */
	int32_t	 fs_interleave;	/* DEV_BSIZE sector interleave */
	int32_t	 fs_trackskew;	/* sector 0 skew, per track */
/* fs_id takes the space of unused fs_headswitch and fs_trkseek fields */
	int32_t	 fs_id[2];	/* unique filesystem id */
/* sizes determined by number of cylinder groups and their sizes */
	int32_t	 fs_ffs1_csaddr; /* blk addr of cyl grp summary area */
	int32_t	 fs_cssize;	/* cyl grp summary area size / bytes */
	int32_t	 fs_cgsize;	/* cyl grp block size / bytes */
/* these fields are derived from the hardware */
	int32_t	 fs_ntrak;	/* tracks per cylinder */
	int32_t	 fs_nsect;	/* DEV_BSIZE sectors per track */
	int32_t	 fs_spc;	/* DEV_BSIZE sectors per cylinder */
/* this comes from the disk driver partitioning */
	int32_t	 fs_ncyl;	/* cylinders in file system */
/* these fields can be computed from the others */
	int32_t	 fs_cpg;	/* cylinders per group */
	int32_t	 fs_ipg;	/* inodes per group */
	int32_t	 fs_fpg;	/* blocks per group * fs_frag */
/* this data must be re-computed after crashes */
	struct	csum fs_ffs1_cstotal; /* cylinder summary information */
/* these fields are cleared at mount time */
	int8_t	 fs_fmod;	/* super block modified flag */
	int8_t	 fs_clean;	/* file system is clean flag */
	int8_t	 fs_ronly;	/* mounted read-only flag */
	int8_t	 fs_ffs1_flags;	/* see FS_ below */
	u_char	 fs_fsmnt[MAXMNTLEN]; /* name mounted on */
	u_char	 fs_volname[MAXVOLLEN]; /* volume name */
	u_int64_t fs_swuid;	/* system-wide uid */
	int32_t	 fs_pad;	/* due to alignment of fs_swuid */
/* these fields retain the current block allocation info */
	int32_t	 fs_cgrotor;	 /* last cg searched */
	void	*fs_ocsp[NOCSPTRS]; /* padding; was list of fs_cs bufs */
	u_int8_t *fs_contigdirs; /* # of contiguously allocated dirs */
	struct csum *fs_csp;	 /* cg summary info buffer for fs_cs */
	int32_t	*fs_maxcluster;	 /* max cluster in each cyl group */
	u_char	*fs_active;	 /* reserved for snapshots */
	int32_t	 fs_cpc;	 /* cyl per cycle in postbl */
/* this area is only allocated if fs_ffs1_flags & FS_FLAGS_UPDATED */
	int32_t	 fs_maxbsize;	/* maximum blocking factor permitted */
	int64_t	 fs_spareconf64[17]; /* old rotation block list head */
	int64_t	 fs_sblockloc;	/* offset of standard super block */
	struct csum_total fs_cstotal; /* cylinder summary information */
	int64_t	 fs_time;	/* time last written */
	int64_t	 fs_size;	/* number of blocks in fs */
	int64_t	 fs_dsize;	/* number of data blocks in fs */
	int64_t	 fs_csaddr;	/* blk addr of cyl grp summary area */
	int64_t	 fs_pendingblocks; /* blocks in process of being freed */
	int32_t	 fs_pendinginodes; /* inodes in process of being freed */
	int32_t	 fs_snapinum[FSMAXSNAP];/* space reserved for snapshots */
/* back to stuff that has been around a while */
	int32_t	 fs_avgfilesize; /* expected average file size */
	int32_t	 fs_avgfpdir;	 /* expected # of files per directory */
	int32_t	 fs_sparecon[26];/* reserved for future constants */
	u_int32_t fs_flags;	/* see FS_ flags below */
	int32_t	 fs_fscktime;	 /* last time fsck(8)ed */
	int32_t	 fs_contigsumsize; /* size of cluster summary array */
	int32_t	 fs_maxsymlinklen; /* max length of an internal symlink */
	int32_t	 fs_inodefmt;	 /* format of on-disk inodes */
	u_int64_t fs_maxfilesize;/* maximum representable file size */
	int64_t	 fs_qbmask;	 /* ~fs_bmask - for use with quad size */
	int64_t	 fs_qfmask;	 /* ~fs_fmask - for use with quad size */
	int32_t	 fs_state;	 /* validate fs_clean field */
	int32_t	 fs_postblformat;/* format of positional layout tables */
	int32_t	 fs_nrpos;	 /* number of rotational positions */
	int32_t	 fs_postbloff;	 /* (u_int16) rotation block list head */
	int32_t	 fs_rotbloff;	 /* (u_int8) blocks for each rotation */
	int32_t	 fs_magic;	 /* magic number */
	u_int8_t fs_space[1];	 /* list of blocks for each rotation */
/* actually longer */
};
.Ed
.Pp
Each disk drive contains some number of file systems.
A file system consists of a number of cylinder groups.
Each cylinder group has inodes and data.
.Pp
A file system is described by its super-block, which in turn
describes the cylinder groups.
The super-block is critical
data and is replicated in each cylinder group to protect against
catastrophic loss.
This is done at file system creation time and the critical
super-block data does not change, so the copies need not be
referenced further unless disaster strikes.
.Pp
Addresses stored in inodes are capable of addressing fragments
of
.Dq blocks .
File system blocks of at most size
.Dv MAXBSIZE
can
be optionally broken into 2, 4, or 8 pieces, each of which is
addressable; these pieces may be
.Dv DEV_BSIZE ,
or some multiple of a
.Dv DEV_BSIZE
unit.
.Pp
Large files consist of exclusively large data blocks.
To avoid undue wasted disk space, the last data block of a small file is
allocated only as many fragments of a large block as are
necessary.
The file system format retains only a single pointer
to such a fragment, which is a piece of a single large block that
has been divided.
The size of such a fragment is determinable from
information in the inode, using the
.Fn blksize fs ip lbn
macro.
.Pp
The file system records space availability at the fragment level;
to determine block availability, aligned fragments are examined.
.Pp
The root inode is the root of the file system.
Inode 0 can't be used for normal purposes and
historically bad blocks were linked to inode 1
(inode 1 is no longer used for
this purpose; however, numerous dump tapes make this
assumption, so we are stuck with it).
Thus the root inode is 2.
.Pp
The
.Va fs_minfree
element gives the minimum acceptable percentage of file system
blocks that may be free.
If the freelist drops below this level,
only the superuser may continue to allocate blocks.
The
.Va fs_minfree
element
may be set to 0 if no reserve of free blocks is deemed necessary,
although severe performance degradations will be observed if the
file system is run at greater than 95% full; thus the default
value of
.Va fs_minfree
is 5%.
.Pp
Empirically the best trade-off between block fragmentation and
overall disk utilization at a loading of 95% comes with a
fragmentation of 8; thus the default fragment size is an eighth
of the block size.
.Pp
The element
.Va fs_optim
specifies whether the file system should try to minimize the time spent
allocating blocks
.Pq Dv FS_OPTTIME ,
or if it should attempt to minimize the space fragmentation on the disk
.Pq Dv FS_OPTSPACE .
If the value of
.Va fs_minfree
(see above) is less than 5%,
then the file system defaults to optimizing for space to avoid
running out of full sized blocks.
If the value of
.Va fs_minfree
is greater than or equal to 5%,
fragmentation is unlikely to be problematical, and
the file system defaults to optimizing for time.
.Pp
The
.Va fs_flags
element specifies how the filesystem was mounted:
.Pp
.Bl -tag -width FS_DOSOFTDEP -offset ind -compact
.It Dv FS_DOSOFTDEP
The filesystem was mounted using soft dependencies.
.It Dv FS_UNCLEAN
The filesystem was mounted uncleanly.
.El
.Ss Cylinder group related limits
Each cylinder keeps track of the availability of blocks at different
rotational positions, so that sequential blocks can be laid out
with minimum rotational latency.
With the default of 1 distinct
rotational position, the resolution of the
summary information is 16ms for a typical 3600 RPM drive.
.Pp
The element
.Va fs_rotdelay
was once used to tweak block layout.
.Pp
Each file system has a statically allocated number of inodes, determined
by its size and the desired number of file data bytes per inode at the
time it was created.
See
.Xr newfs 8
for details on how to set this (and other) filesystem parameters.
By default, the inode allocation strategy is extremely conservative.
.Pp
.Dv MINBSIZE
is the smallest allowable block size.
With a
.Dv MINBSIZE
of 4096
it is possible to create files of size
2^32 with only two levels of indirection.
.Dv MINBSIZE
must be big enough to hold a cylinder group block,
thus changes to
.Va struct cg
must keep its size within
.Dv MINBSIZE .
Note that super-blocks are never more than size
.Dv SBSIZE .
.Pp
The path name on which the file system is mounted is maintained in
.Va fs_fsmnt .
.Dv MAXMNTLEN
defines the amount of space allocated in
the super-block for this name.
.Pp
Per cylinder group information is summarized in blocks allocated
from the first cylinder group's data blocks.
These blocks are read in from
.Va fs_csaddr
(of size
.Va fs_cssize )
in addition to the super-block.
.Pp
Note that
.Fn sizeof "struct csum"
must be a power of two in order for
the
.Fn fs_cs
macro to work.
.Ss Super-block for a file system
The size of the rotational layout tables
is limited by the fact that the super-block is of size
.Dv SBSIZE .
The size of these tables is inversely
proportional to the block
size of the file system.
The size of the tables is
increased when sector sizes are not powers of two,
as this increases the number of cylinders
included before the rotational pattern repeats
.Pq Va fs_cpc .
The size of the rotational layout
tables is derived from the number of bytes remaining in
.Va struct fs .
.Pp
The number of blocks of data per cylinder group
is limited because cylinder groups are at most one block.
The inode and free block tables
must fit into a single block after deducting space for
the cylinder group structure
.Va struct cg .
.Ss Inodes
The
.Em inode
is the focus of all file activity in the
.Tn UNIX
file system.
There is a unique inode allocated
for each active file,
each current directory, each mounted-on file,
text file, and the root.
An inode is
.Dq named
by its device/i-number pair.
For further information, see the include file
.In ufs/ufs/inode.h .
.Sh HISTORY
A super-block structure named
.Em filsys
appeared in
.At v6 .
The file system described in this manual appeared
in
.Bx 4.2 .
@


1.18
log
@Use "In" to mark up include files, instead of wrongly wrapping with Aq.

Aq is not the same as <> in non-ASCII situations, so this caused
incorrect output in some places. And it provided no semantics besides.

ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.17 2014/05/29 12:02:50 krw Exp $
d33 1
a33 1
.Dd $Mdocdate: May 29 2014 $
d41 3
a43 3
.Fd #include <sys/types.h>
.Fd #include <ufs/ffs/fs.h>
.Fd #include <ufs/ufs/inode.h>
@


1.17
log
@fsck should use the same values in checking as newfs does in creating
a filesystem. fs_nspf and its derivitives like fs_spc are DEV_BSIZE
values, not actual hardware disk sector values. Adjust initializations
accordingly.

Tweak header and man page comments to make the DEV_BSIZE'ness more
obvious for future spelunkers.

No-op for DEV_BSIZE (a.k.a. 512-byte) sector devices but should help
checking filesystems on, e.g., 4k-byte sector devices.

ok jmc@@ on the man page tweaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.16 2007/06/25 16:15:29 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 25 2007 $
d46 1
a46 1
.Aq Pa ufs/ffs/fs.h
d48 1
a48 1
.Aq Pa ufs/ufs/inode.h
d71 1
a71 1
.Aq Pa ufs/ffs/fs.h :
d377 1
a377 1
.Aq Pa ufs/ufs/inode.h .
@


1.16
log
@update struct fs; ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.15 2007/05/31 19:19:58 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d110 1
a110 1
	int32_t	 fs_nspf;	/* value of NSPF */
d114 2
a115 2
	int32_t	 fs_npsect;	/* # sectors/track including spares */
	int32_t	 fs_interleave;	/* hardware sector interleave */
d125 2
a126 2
	int32_t	 fs_nsect;	/* sectors per track */
	int32_t	 fs_spc;	/* sectors per cylinder */
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.14 2004/05/26 09:42:14 jmc Exp $
d77 4
a80 4
	int32_t	 fs_sblkno;	/* addr of super-block in filesys */
	int32_t	 fs_cblkno;	/* offset of cyl-block in filesys */
	int32_t	 fs_iblkno;	/* offset of inode-blocks in filesys */
	int32_t	 fs_dblkno;	/* offset of first data after cg */
d83 7
a89 7
	time_t	 fs_time;	/* last time written */
	int32_t	 fs_size;	/* number of blocks in fs */
	int32_t	 fs_dsize;	/* number of data blocks in fs */
	int32_t	 fs_ncg;	/* number of cylinder groups */
	int32_t	 fs_bsize;	/* size of basic blocks in fs */
	int32_t	 fs_fsize;	/* size of frag blocks in fs */
	int32_t	 fs_frag;	/* number of frags in a block in fs */
d92 1
a92 1
	int32_t	 fs_rotdelay;	/* num of ms for optimal next block */
d98 1
a98 1
	int32_t	 fs_fshift;	/* ``numfrags'' calc number of frags */
d100 2
a101 2
	int32_t	 fs_maxcontig;	/* max number of contiguous blks */
	int32_t	 fs_maxbpg;	/* max number of blks per cyl group */
d109 1
a109 1
	int32_t	 fs_inopb;	/* value of INOPB */
d117 1
a117 1
/* fs_id takes the space of the unused fs_headswitch and fs_trkseek */
d120 3
a122 3
	int32_t	 fs_csaddr;	/* blk addr of cyl grp summary area */
	int32_t	 fs_cssize;	/* size of cyl grp summary area */
	int32_t	 fs_cgsize;	/* cylinder group size */
d134 1
a134 1
	struct csum fs_cstotal;	/* cylinder summary information */
d139 1
a139 1
	int8_t	 fs_flags;	/* see FS_ below */
d141 3
d150 1
d152 13
a164 2
	int16_t	 fs_opostbl[16][8]; /* old rotation block list head */
	int32_t	 fs_snapinum[20];/* reserved for snapshot inode nums */
d167 3
a169 2
	int32_t	 fs_sparecon[27];/* reserved for future constants */
	time_t	 fs_fscktime;	 /* last time fsck(8)ed */
d171 1
a171 1
	int32_t	 fs_maxsymlinklen; /* max length of internal symlink */
@


1.14
log
@- clarify header locations
- sync header description w/ reality
- better macro usage
- update descriptions
- document FS_* mount flags

all from jared yanovich;
help/editing/ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.13 2004/02/24 07:17:32 jmc Exp $
d33 1
a33 1
.Dd April 19, 1994
@


1.13
log
@correct includes;
ok deraadt@@ fgsch@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.12 2003/06/06 13:28:13 jmc Exp $
d46 1
a46 1
.Aq Pa fs.h
d48 1
a48 1
.Aq Pa inode.h
d71 1
a71 1
.Aq Pa ufs/fs.h :
d75 15
a89 15
	struct	fs *fs_link;	/* linked list of file systems */
	struct	fs *fs_rlink;	/*     used for incore super blocks */
	daddr_t	fs_sblkno;	/* addr of super-block in filesys */
	daddr_t	fs_cblkno;	/* offset of cyl-block in filesys */
	daddr_t	fs_iblkno;	/* offset of inode-blocks in filesys */
	daddr_t	fs_dblkno;	/* offset of first data after cg */
	long	fs_cgoffset;	/* cylinder group offset in cylinder */
	long	fs_cgmask;	/* used to calc mod fs_ntrak */
	time_t 	fs_time;    	/* last time written */
	long	fs_size;	/* number of blocks in fs */
	long	fs_dsize;	/* number of data blocks in fs */
	long	fs_ncg;	/* number of cylinder groups */
	long	fs_bsize;	/* size of basic blocks in fs */
	long	fs_fsize;	/* size of frag blocks in fs */
	long	fs_frag;	/* number of frags in a block in fs */
d91 3
a93 3
	long	fs_minfree;	/* minimum percentage of free blocks */
	long	fs_rotdelay;	/* num of ms for optimal next block */
	long	fs_rps;	/* disk revolutions per second */
d95 4
a98 4
	long	fs_bmask;	/* ``blkoff'' calc of blk offsets */
	long	fs_fmask;	/* ``fragoff'' calc of frag offsets */
	long	fs_bshift;	/* ``lblkno'' calc of logical blkno */
	long	fs_fshift;	/* ``numfrags'' calc number of frags */
d100 2
a101 2
	long	fs_maxcontig;	/* max number of contiguous blks */
	long	fs_maxbpg;	/* max number of blks per cyl group */
d103 8
a110 8
	long	fs_fragshift;	/* block to frag shift */
	long	fs_fsbtodb;	/* fsbtodb and dbtofsb shift constant */
	long	fs_sbsize;	/* actual size of super block */
	long	fs_csmask;	/* csum block offset */
	long	fs_csshift;	/* csum block number */
	long	fs_nindir;	/* value of NINDIR */
	long	fs_inopb;	/* value of INOPB */
	long	fs_nspf;	/* value of NSPF */
d112 1
a112 1
	long	fs_optim;	/* optimization preference, see below */
d114 5
a118 5
	long	fs_npsect;	/* # sectors/track including spares */
	long	fs_interleave;	/* hardware sector interleave */
	long	fs_trackskew;	/* sector 0 skew, per track */
	long	fs_headswitch;	/* head switch time, usec */
	long	fs_trkseek;	/* track-to-track seek, usec */
d120 3
a122 3
	daddr_t fs_csaddr;	/* blk addr of cyl grp summary area */
	long	fs_cssize;	/* size of cyl grp summary area */
	long	fs_cgsize;	/* cylinder group size */
d124 3
a126 3
	long	fs_ntrak;	/* tracks per cylinder */
	long	fs_nsect;	/* sectors per track */
	long  	fs_spc;   	/* sectors per cylinder */
d128 1
a128 1
	long	fs_ncyl;   	/* cylinders in file system */
d130 3
a132 3
	long	fs_cpg;	/* cylinders per group */
	long	fs_ipg;	/* inodes per group */
	long	fs_fpg;	/* blocks per group * fs_frag */
d134 1
a134 1
	struct	csum fs_cstotal;	/* cylinder summary information */
d136 5
a140 5
	char   	fs_fmod;    	/* super block modified flag */
	char   	fs_clean;    	/* file system is clean flag */
	char   	fs_ronly;   	/* mounted read-only flag */
	char   	fs_flags;   	/* currently unused flag */
	char	fs_fsmnt[MAXMNTLEN];	/* name mounted on */
d142 25
a166 13
	long	fs_cgrotor;	/* last cg searched */
	struct	csum *fs_csp[MAXCSBUFS]; /* list of fs_cs info buffers */
	long	fs_cpc;	/* cyl per cycle in postbl */
	short	fs_opostbl[16][8];	/* old rotation block list head */
	long	fs_sparecon[56];	/* reserved for future constants */
	quad	fs_qbmask;	/* ~fs_bmask - for use with quad size */
	quad	fs_qfmask;	/* ~fs_fmask - for use with quad size */
	long	fs_postblformat; /* format of positional layout tables */
	long	fs_nrpos;	/* number of rotational positions */
	long	fs_postbloff;	/* (short) rotation block list head */
	long	fs_rotbloff;	/* (u_char) blocks for each rotation */
	long	fs_magic;	/* magic number */
	u_char	fs_space[1];	/* list of blocks for each rotation */
d206 1
a206 1
.Fn blksize
d221 1
a221 1
.Fa fs_minfree
d224 1
a224 1
If the freelist drops below this level
d227 1
a227 1
.Fa fs_minfree
d233 1
a233 1
.Fa fs_minfree
d242 1
a242 1
.Fa fs_optim
d244 4
a247 2
allocating blocks, or if it should attempt to minimize the space
fragmentation on the disk.
d249 1
a249 1
.Fa fs_minfree
d254 1
a254 1
.Fa fs_minfree
d258 11
d273 3
a275 3
With the default of 8 distinguished
rotational positions, the resolution of the
summary information is 2ms for a typical 3600 rpm drive.
d278 10
a287 14
.Fa fs_rotdelay
gives the minimum number of milliseconds to initiate
another disk transfer on the same cylinder.
It is used in determining the rotationally optimal
layout for disk blocks within a file;
the default value for
.Fa fs_rotdelay
is 2ms.
.Pp
Each file system has a statically allocated number of inodes.
An inode is allocated for each
.Dv NBPI
bytes of disk space.
The inode allocation strategy is extremely conservative.
d299 1
a299 1
.Fa struct cg
d306 1
a306 1
.Fa fs_fsmnt .
a309 5
The limit on the amount of summary information per file system
is defined by
.Dv MAXCSBUFS .
For a 4096 byte block size, it is currently parameterized for a
maximum of two million cylinders.
d314 3
a316 3
.Fa fs_csaddr
(size
.Fa fs_cssize )
d336 1
a336 1
.Pq Fa fs_cpc .
d339 1
a339 1
.Fa struct fs .
d346 1
a346 1
.Fa struct cg .
d348 3
a350 1
The inode is the focus of all file activity in the
d363 3
a365 1
A super-block structure named filsys appeared in
@


1.12
log
@- section reorder
- macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.11 2003/06/02 23:30:14 millert Exp $
d42 1
a42 1
.Fd #include <ufs/ufs/fs.h>
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.10 2003/01/18 23:40:58 deraadt Exp $
d291 1
a291 1
.Dv MAXCSBUFS.
@


1.10
log
@more typos; jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.9 2001/10/04 16:56:51 mpech Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@we don't like .Pp and blank lines before/after .Ss;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.8 2000/03/19 19:25:28 aaron Exp $
d53 1
a53 1
declare several structures, defined variables and macros
d73 1
a73 1
The following structure described the super-block and is
d191 1
a191 1
allocated as only as many fragments of a large block as are
@


1.8
log
@Various cleanups.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.7 1999/07/09 13:35:38 aaron Exp $
a247 1
.Pp
a312 1
.Pp
a334 1
.Pp
@


1.7
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.6 1999/05/23 14:11:05 aaron Exp $
d168 2
a169 1
describes the cylinder groups.  The super-block is critical
d171 2
a172 2
catastrophic loss.  This is done at file system creation
time and the critical
d189 2
a190 2
Large files consist of exclusively large data blocks.  To avoid
undue wasted disk space, the last data block of a small file is
d192 2
a193 1
necessary.  The file system format retains only a single pointer
d195 2
a196 1
has been divided.  The size of such a fragment is determinable from
d215 3
a217 2
blocks that may be free. If the freelist drops below this level
only the super-user may continue to allocate blocks.
d252 2
a253 1
with minimum rotational latency. With the default of 8 distinguished
d321 2
a322 1
size of the file system. The size of the tables is
@


1.6
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.5 1999/03/11 01:35:05 pjanzen Exp $
d180 1
a180 1
can 
d287 1
a287 1
defines the amount of space allocated in 
d296 1
a296 1
from the first cylinder group's data blocks. 
@


1.5
log
@fix more comma splices that involve misuse of conjunctive adverbs
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.4 1998/11/26 04:25:58 aaron Exp $
d39 1
a39 1
.Os BSD 4.2
@


1.4
log
@share/man/man5/ man page repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d203 3
a205 3
historically bad blocks were linked to inode 1,
thus the root inode is 2 (inode 1 is no longer used for
this purpose, however numerous dump tapes make this
d207 1
d218 1
a218 1
however severe performance degradations will be observed if the
d226 1
a226 1
fragmentation of 8, thus the default fragment size is an eighth
@


1.3
log
@MINFREE is 5%; hgweigand@@wiesbaden.netsurf.de
@
text
@d1 1
d176 3
a178 1
of `blocks'. File system blocks of at most size
d184 1
a184 2
or some multiple of
a
d195 1
a195 1
.Fn blksize fs ip lbn
d233 3
a235 1
If the value of fs_minfree (see above) is less than 5%,
d238 3
a240 1
If the value of minfree is greater than or equal to 5%,
d244 1
a244 1
.Em Cylinder group related limits :
d277 1
a277 1
.Pq Fa struct cg
d302 2
a303 2
.Sy N.B.:
.Xr sizeof Pq Fa struct csum
d309 1
a309 2
The
.Em "Super-block for a file system" :
d313 1
a313 2
The size of these tables is
.Em inversely
d322 1
a322 1
.Pq Fa struct fs .
d329 1
a329 1
.Pq Fa struct cg .
d331 1
a331 2
The
.Em Inode :
d339 3
a341 1
An inode is `named' by its device/i-number pair.
@


1.2
log
@correct paths; bgrayson@@ece.utexas.edu
@
text
@d216 1
a216 1
file system is run at greater than 90% full; thus the default
d219 1
a219 1
is 10%.
d222 1
a222 1
overall disk utilization at a loading of 90% comes with a
d231 1
a231 1
If the value of fs_minfree (see above) is less than 10%,
d234 1
a234 1
If the value of minfree is greater than or equal to 10%,
@


1.1
log
@Initial revision
@
text
@d45 2
a46 2
.Fd #include <ufs/fs.h>
.Fd #include <ufs/inode.h>
d338 1
a338 1
.Aq Pa sys/inode.h .
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
