head	1.17;
access;
symbols
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.18
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.16
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.14
	OPENBSD_5_0:1.11.0.12
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.10
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3;
locks; strict;
comment	@.\" @;


1.17
date	2017.01.07.23.12.58;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	SbSzIjGPwjf2zFPX;

1.16
date	2016.03.21.21.14.42;	author natano;	state Exp;
branches;
next	1.15;
commitid	vjuqihfxpxaDGCMF;

1.15
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.14;
commitid	GVTTSAMZ93Lz4hmE;

1.14
date	2014.11.16.12.31.01;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	yv0ECmCdICvq576h;

1.13
date	2014.07.13.23.03.03;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	2rp3WYk7b2iaWyc0;

1.12
date	2013.06.04.19.27.11;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.31.08.28.53;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.23.15.03.50;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.22.21.31.51;	author hshoexer;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.11.13.47.41;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.19.19.49;	author wcobb;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.20.20.00.25;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.10.20.54.21;	author wcobb;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.02.06.01.01;	author wcobb;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.02.03.52.38;	author wcobb;	state Exp;
branches;
next	;


desc
@@


1.17
log
@fix commata in the NAME section
@
text
@.\"	$OpenBSD: pmap.9,v 1.16 2016/03/21 21:14:42 natano Exp $
.\"
.\" Copyright (c) 2001, 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: March 21 2016 $
.Dt PMAP_INIT 9
.Os
.Sh NAME
.Nm pmap_init ,
.Nm pmap_enter ,
.Nm pmap_kenter_pa ,
.Nm pmap_remove ,
.Nm pmap_kremove ,
.Nm pmap_unwire ,
.Nm pmap_protect ,
.Nm pmap_page_protect ,
.Nm pmap_is_modified ,
.Nm pmap_clear_modify ,
.Nm pmap_is_referenced ,
.Nm pmap_clear_reference ,
.Nm pmap_copy_page ,
.Nm pmap_zero_page ,
.Nm pmap_create ,
.Nm pmap_reference ,
.Nm pmap_destroy ,
.Nm pmap_steal_memory ,
.Nm pmap_growkernel ,
.Nm pmap_update ,
.Nm pmap_collect ,
.Nm pmap_virtual_space ,
.Nm pmap_copy
.Nd machine dependent interface to the MMU
.Sh SYNOPSIS
.In machine/pmap.h
.Sh DESCRIPTION
The architecture-dependent
.Nm pmap
module describes how the physical mapping is done between the user-processes
and kernel virtual addresses and the physical addresses of the main memory,
providing machine-dependent translation and access tables that are used
directly or indirectly by the memory-management hardware.
The
.Nm pmap
layer can be viewed as a big array of mapping entries that are indexed by
virtual address to produce a physical address and flags.
These flags describe
the page's protection, whether the page has been referenced or modified and
other characteristics.
.Pp
The
.Nm pmap
interface is consistent across all platforms and hides the way page mappings
are stored.
.Sh INITIALIZATION
.nr nS 1
.Ft void
.Fn pmap_init "void"
.nr nS 0
.Pp
The
.Fn pmap_init
function is called from the machine-independent
.Xr uvm 9
initialization code, when the MMU is enabled.
.Sh PAGE MANAGEMENT
Modified/referenced information is only tracked for pages managed by
.Xr uvm 9
(pages for which a vm_page structure exists).
Only managed mappings of those pages have modified/referenced tracking.
The use of unmanaged mappings should be limited to code which may execute
in interrupt context (such as
.Xr malloc 9 )
or to enter mappings for physical addresses which are not managed by
.Xr uvm 9 .
This allows
.Nm pmap
modules to avoid blocking interrupts when manipulating data structures or
holding locks.
Unmanaged mappings may only be entered into the kernel's virtual address space.
The modified/referenced bits must be tracked on a per-page basis, as they
are not attributes of a mapping, but attributes of a page.
Therefore, even after all mappings for a given page have been removed, the
modified/referenced bits for that page must be preserved.
The only time the modified/referenced bits may be cleared is when
.Xr uvm 9
explicitly calls the
.Fn pmap_clear_modify
and
.Fn pmap_clear_reference
functions.
These functions must also change any internal state necessary to detect
the page being modified or referenced again after the modified/referenced
state is cleared.
.Pp
Mappings entered by
.Fn pmap_enter
are managed, mappings entered by
.Fn pmap_kenter_pa
are not.
.Sh MAPPING ALLOCATION
.nr nS 1
.Ft int
.Fn pmap_enter "pmap_t pmap" "vaddr_t va" "paddr_t pa" "vm_prot_t prot" \
               "int flags"
.Ft void
.Fn pmap_kenter_pa "vaddr_t va" "paddr_t pa" "vm_prot_t prot"
.Ft void
.Fn pmap_remove "pmap_t pmap" "vaddr_t sva" "vaddr_t eva"
.Ft void
.Fn pmap_kremove "vaddr_t va" "vsize_t size"
.nr nS 0
.Pp
The
.Fn pmap_enter
function creates a managed mapping for physical page
.Fa pa
at the specified virtual address
.Fa va
in the target physical map
.Fa pmap
with protection specified by
.Fa prot :
.Bl -tag -width "PROT_WRITE"
.It PROT_READ
The mapping must allow reading.
.It PROT_WRITE
The mapping must allow writing.
.It PROT_EXEC
The page mapped contains instructions that will be executed by the
processor.
.El
.Pp
The
.Fa flags
argument contains protection bits (the same bits used in the
.Fa prot
argument) indicating the type of access that caused the mapping to
be created.
This information may be used to seed modified/referenced
information for the page being mapped, possibly avoiding redundant
faults on platforms that track modified/referenced information in
software.
Other information provided by
.Fa flags :
.Bl -tag -width "PMAP_CANFAIL"
.It PMAP_WIRED
The mapping being created is a wired mapping.
.It PMAP_CANFAIL
The call to
.Fn pmap_enter
is allowed to fail.
If this flag is not set, and the
.Fn pmap_enter
call is unable to create the mapping, perhaps due to insufficient
resources, the
.Nm pmap
module must panic.
.El
.Pp
The access type provided in the
.Fa flags
argument will never exceed the protection specified by
.Fa prot .
.Pp
The
.Fn pmap_enter
function is called by the fault routine to establish a mapping for
the page being faulted in.
If
.Fn pmap_enter
is called to enter a mapping at a virtual address for which a mapping
already exists, the previous mapping must be invalidated.
.Fn pmap_enter
is sometimes called to change the protection for a pre-existing mapping,
or to change the
.Dq wired
attribute for a pre-existing mapping.
.Pp
The
.Fn pmap_kenter_pa
function creates an unmanaged mapping of physical address
.Fa pa
at the specified virtual address
.Fa va
with the protection specified by
.Fa prot .
.Pp
The
.Fn pmap_remove
function removes the range of virtual addresses
.Fa sva
to
.Fa eva
from
.Fa pmap ,
assuming proper alignment.
.Fn pmap_remove
is called during an unmap
operation to remove low-level machine dependent mappings.
.Pp
The
.Fn pmap_kremove
function removes an unmanaged mapping at virtual address
.Fa va
of size
.Fa size .
.Pp
A call to
.Fn pmap_update
must be made after
.Fn pmap_kenter_pa
or
.Fn pmap_kremove
to notify the
.Nm pmap
layer that the mappings need to be made correct.
.Sh ACCESS PROTECTION
.nr nS 1
.Ft void
.Fn pmap_unwire "pmap_t pmap" "vaddr_t va"
.Ft void
.Fn pmap_protect "pmap_t pmap" "vaddr_t sva" "vaddr_t eva" "vm_prot_t prot"
.Ft void
.Fn pmap_page_protect "struct vm_page *pg" "vm_prot_t prot"
.nr nS 0
.Pp
The
.Fn pmap_unwire
function clears the wired attribute for a map/virtual-address pair.
The mapping must already exist in
.Fa pmap .
.Pp
The
.Fn pmap_protect
function sets the physical protection on range
.Fa sva
to
.Fa eva ,
in
.Fa pmap .
.Pp
The
.Fn pmap_protect
function is called during a copy-on-write operation to write protect
copy-on-write memory, and when paging out a page to remove all mappings
of a page.
The
.Fn pmap_page_protect
function sets the permission for all mapping to page
.Fa pg .
The
.Fn pmap_page_protect
function is called before a pageout operation to ensure that all pmap
references to a page are removed.
.Sh PHYSICAL PAGE-USAGE INFORMATION
.nr nS 1
.Ft boolean_t
.Fn pmap_is_modified "struct vm_page *pg"
.Ft boolean_t
.Fn pmap_clear_modify "struct vm_page *pg"
.Ft boolean_t
.Fn pmap_is_referenced "struct vm_page *pg"
.Ft boolean_t
.Fn pmap_clear_reference "struct vm_page *pg"
.nr nS 0
.Pp
The
.Fn pmap_is_modified
and
.Fn pmap_clear_modify
functions read/set the modify bits on the specified physical page
.Fa pg .
The
.Fn pmap_is_referenced
and
.Fn pmap_clear_reference
functions read/set the reference bits on the specified physical page
.Fa pg .
.Pp
The
.Fn pmap_is_referenced
and
.Fn pmap_is_modified
functions are called by the pagedaemon when looking for pages to free.
The
.Fn pmap_clear_referenced
and
.Fn pmap_clear_modify
functions are called by the pagedaemon to help identification of pages
that are no longer in demand.
.Sh PHYSICAL PAGE INITIALIZATION
.nr nS 1
.Ft void
.Fn pmap_copy_page "struct vm_page *src" "struct vm_page *dst"
.Ft void
.Fn pmap_zero_page "struct vm_page *page"
.nr nS 0
.Pp
The
.Fn pmap_copy_page
function copies the content of the physical page
.Fa src
to physical page
.Fa dst .
.Pp
The
.Fn pmap_zero_page
function fills
.Fa page
with zeroes.
.Sh INTERNAL DATA STRUCTURE MANAGEMENT
.nr nS 1
.Ft pmap_t
.Fn pmap_create "void"
.Ft void
.Fn pmap_reference "pmap_t pmap"
.Ft void
.Fn pmap_destroy "pmap_t pmap"
.nr nS 0
.Pp
The
.Fn pmap_create
function creates an instance of the
.Em pmap
structure.
.Pp
The
.Fn pmap_reference
function increments the reference count on
.Fa pmap .
.Pp
The
.Fn pmap_destroy
function decrements the reference count on physical map
.Fa pmap
and retires it from service if the count drops to zero, assuming
it contains no valid mappings.
.Sh OPTIONAL FUNCTIONS
.nr nS 1
.Ft vaddr_t
.Fn pmap_steal_memory "vsize_t size" "vaddr_t *vstartp" "vaddr_t *vendp"
.Ft vaddr_t
.Fn pmap_growkernel "vaddr_t maxkvaddr"
.Ft void
.Fn pmap_update "pmap_t pmap"
.Ft void
.Fn pmap_collect "pmap_t pmap"
.Ft void
.Fn pmap_virtual_space "vaddr_t *vstartp" "vaddr_t *vendp"
.Ft void
.Fn pmap_copy "pmap_t dst_pmap" "pmap_t src_pmap" "vaddr_t dst_addr" \
              "vsize_t len" "vaddr_t src_addr"
.nr nS 0
.Pp
Wired memory allocation before the virtual memory system is bootstrapped
is accomplished by the
.Fn pmap_steal_memory
function.
After that point, the kernel memory allocation routines should be used.
.Pp
The
.Fn pmap_growkernel
function can preallocate kernel page tables to a specified virtual address.
.Pp
The
.Fn pmap_update
function notifies the
.Nm pmap
module to force processing of all delayed actions for all pmaps.
.Pp
The
.Fn pmap_collect
function informs the
.Nm pmap
module that the given
.Em pmap
is not expected to be used for some time, giving the
.Nm pmap
module a chance to prioritize.
The initial bounds of the kernel virtual address space are returned by
.Fn pmap_virtual_space .
.Pp
The
.Fn pmap_copy
function copies the range specified by
.Fa src_addr
and
.Fa src_len
from
.Fa src_pmap
to the range described by
.Fa dst_addr
and
.Fa dst_len
in
.Fa dst_map .
.Fn pmap_copy
is called during a
.Xr fork 2
operation to give the child process an initial set of low-level
mappings.
.Sh SEE ALSO
.Xr fork 2 ,
.Xr uvm 9
.Sh HISTORY
The
.Bx 4.4
.Nm pmap
module is based on Mach 3.0.
The introduction of
.Xr uvm 9
left the
.Nm pmap
interface unchanged for the most part.
.Sh BUGS
Ifdefs must be documented.
.Pp
.Fn pmap_update
should be mandatory.
@


1.16
log
@s/the pmap_init_module/the pmap module/
In r1.15 some occurrences of 'pmap' have been replaced with 'pmap_init'
by accident, due to unrelated refactoring.
ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.15 2015/11/23 17:53:57 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: November 23 2015 $
d35 1
a35 1
.Nm pmap_kremove
d53 1
a53 1
.Nm pmap_copy ,
@


1.15
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.14 2014/11/16 12:31:01 deraadt Exp $
d27 1
a27 1
.Dd $Mdocdate: November 16 2014 $
d59 1
a59 1
.Nm
d65 1
a65 1
.Nm
d73 1
a73 1
.Nm
d98 1
a98 1
.Nm
d178 1
a178 1
.Nm
d237 1
a237 1
.Nm
d390 1
a390 1
.Nm
d396 1
a396 1
.Nm
d400 1
a400 1
.Nm
d430 1
a430 1
.Nm
d435 1
a435 1
.Nm
@


1.14
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.13 2014/07/13 23:03:03 schwarze Exp $
d27 2
a28 2
.Dd $Mdocdate: July 13 2014 $
.Dt PMAP 9
d31 23
a53 1
.Nm pmap
@


1.13
log
@Do not fold multiple function arguments into the same .Fn argument:
That may cause indexing and formatting issues.
Buggy mdoc(7) code mentioned by uebayasi@@ to jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.12 2013/06/04 19:27:11 schwarze Exp $
d27 1
a27 1
.Dd $Mdocdate: June 4 2013 $
d123 2
a124 2
.Bl -tag -width "VM_PROT_EXECUTE"
.It VM_PROT_READ
d126 1
a126 1
.It VM_PROT_WRITE
d128 1
a128 1
.It VM_PROT_EXECUTE
@


1.12
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.11 2008/12/31 08:28:53 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: December 31 2008 $
d224 1
a224 1
.Fn pmap_page_protect "struct vm_page *pg, vm_prot_t prot"
@


1.11
log
@pmap_remove() correction; from Ariane van der Steld
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.10 2007/12/23 15:03:50 jsing Exp $
d27 1
a27 1
.Dd $Mdocdate: December 23 2007 $
d34 1
a34 1
.Fd #include <machine/pmap.h>
@


1.10
log
@pmap_steal_memory() returns vaddr_t.

ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.9 2007/05/31 19:20:00 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate$
d108 1
a108 1
.Fn pmap_remove "pmap_t pmap" "vaddr_t sva" "paddr_t eva"
@


1.9
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.8 2004/11/22 21:31:51 hshoexer Exp $
d340 1
a340 1
.Ft void
@


1.8
log
@correctly describe parameters for pmap_kremove.

ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.7 2003/07/11 13:47:41 jmc Exp $
d27 1
a27 1
.Dd September 21, 2001
@


1.7
log
@fix some lists and macros;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.6 2003/06/06 20:56:32 jmc Exp $
d204 2
@


1.6
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.5 2003/06/02 19:19:49 wcobb Exp $
d123 1
a123 1
.Bl -tag -width "VM_PROT_EXECUTE" -indent
d145 1
a145 1
.Bl -tag -width "PMAP_CANFAIL" -indent
@


1.5
log
@two-clause license; (c) 2003.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.4 2003/04/20 20:00:25 jmc Exp $
a402 5
.Sh BUGS
Ifdefs must be documented.
.Pp
.Fn pmap_update
should be mandatory.
d413 5
@


1.4
log
@typos;

ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.3 2002/09/10 20:54:21 wcobb Exp $
d3 1
a3 1
.\" Copyright (c) 2001, 2002 CubeSoft Communications, Inc.
d9 1
a9 1
.\" 1. Redistribution of source code must retain the above copyright
d11 3
a13 3
.\" 2. Neither the name of CubeSoft Communications, nor the names of its
.\"    contributors may be used to endorse or promote products derived from
.\"    this software without specific prior written permission.
@


1.3
log
@sync with the pmap_zero_page and pmap_copy_page API change; ok art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.2 2002/09/02 06:01:01 wcobb Exp $
d14 1
a14 1
.\" 
d172 1
a172 1
already exists, the previous mapping must in invalidated.
d334 1
a334 1
and retire it from service if the count drops to zero, assuming
@


1.2
log
@- no .Pp before .Sh.
- hte -> the.
- remove spaces in -width strings.
- begin sentence on a new line.
- sort xrefs.
from mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pmap.9,v 1.1 2002/09/02 03:52:38 wcobb Exp $
d292 1
a292 1
.Fn pmap_copy_page "paddr_t src" "paddr_t dst"
d294 1
a294 1
.Fn pmap_zero_page "paddr_t phys"
d306 2
a307 2
function fills the page at
.Fa phys
@


1.1
log
@Document the pmap interface.
art@@ "it's work in progress" ok
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a53 1
.Pp
d123 1
a123 1
.Bl -tag -width "VM_PROT_EXECUTE  " -indent
d137 3
a139 2
argument) indicating the type of access that caused hte mapping to
be created. This information may be used to seed modified/referenced
d145 1
a145 1
.Bl -tag -width "PMAP_CANFAIL   " -indent
d151 2
a152 1
is allowed to fail. If this flag is not set, and the
d401 2
a402 2
.Xr uvm 9 ,
.Xr fork 2
@

