head	1.37;
access;
symbols
	OPENBSD_6_1:1.37.0.6
	OPENBSD_6_1_BASE:1.37
	OPENBSD_6_0:1.37.0.4
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.37.0.2
	OPENBSD_5_9_BASE:1.37
	OPENBSD_5_8:1.36.0.4
	OPENBSD_5_8_BASE:1.36
	OPENBSD_5_7:1.33.0.2
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.4
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.32.0.4
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.26.0.10
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.8
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.6
	OPENBSD_5_0:1.26.0.4
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.25.0.4
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.24.0.12
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.8
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.6
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.4
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.18.0.12
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.10
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.8
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.6
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.4
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.18.0.2
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9;
locks; strict;
comment	@.\" @;


1.37
date	2015.11.24.19.58.48;	author jmc;	state Exp;
branches;
next	1.36;
commitid	4xOez56DVfejQZh9;

1.36
date	2015.06.25.09.25.09;	author mpi;	state Exp;
branches;
next	1.35;
commitid	KxcvvSzCrYW0s38c;

1.35
date	2015.05.23.12.57.09;	author markus;	state Exp;
branches;
next	1.34;
commitid	0zkm81DUFCA52t0m;

1.34
date	2015.04.17.11.06.39;	author mikeb;	state Exp;
branches;
next	1.33;
commitid	9qtIF3TAxDImZwgH;

1.33
date	2014.07.10.03.48.25;	author lteo;	state Exp;
branches;
next	1.32;
commitid	Gc1rQ6OHVT00bXjK;

1.32
date	2013.08.13.09.52.53;	author mpi;	state Exp;
branches;
next	1.31;

1.31
date	2013.07.17.20.21.54;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2013.06.11.01.01.15;	author dlg;	state Exp;
branches;
next	1.29;

1.29
date	2013.06.04.19.27.09;	author schwarze;	state Exp;
branches;
next	1.28;

1.28
date	2013.05.17.22.42.20;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2013.05.17.17.20.09;	author mpi;	state Exp;
branches;
next	1.26;

1.26
date	2011.01.29.13.15.39;	author bluhm;	state Exp;
branches;
next	1.25;

1.25
date	2010.03.13.06.39.33;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2007.05.28.17.22.16;	author henning;	state Exp;
branches;
next	1.22;

1.22
date	2007.05.27.13.53.56;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.27.05.33.39;	author henning;	state Exp;
branches;
next	1.20;

1.20
date	2007.01.03.18.43.12;	author claudio;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.30.14.31.59;	author pedro;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.08.07.07.35;	author mcbride;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.13.21.32.26;	author henning;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.10.22.38.27;	author henning;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.26.15.05.07;	author david;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.30.23.30.47;	author frantzen;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.07.19.57.45;	author dhartmei;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.07.01.46.11;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.08.20.13.04;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.03.15.21.17;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.04.21.56.57;	author dhartmei;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.27.08.38.57;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.27.03.50.49;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.25.06.40.52;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.25.06.37.04;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.25.05.47.17;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.25.05.40.39;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.25.05.07.15;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.37
log
@update NAME; somehow missed this file when i did man9;
ok schwarze
@
text
@.\"	$OpenBSD: mbuf_tags.9,v 1.36 2015/06/25 09:25:09 mpi Exp $
.\"
.\" The author of this man page is Angelos D. Keromytis (angelos@@cis.upenn.edu)
.\"
.\" Copyright (c) 2001 Angelos D. Keromytis
.\"
.\" Permission to use, copy, and modify this software with or without
.\" fee is hereby granted, provided that this entire notice is included
.\" in all source code copies of any software which is or includes a copy
.\" or modification of this software.
.\"
.\" THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTY. IN PARTICULAR, NONE OF THE AUTHORS MAKES ANY
.\" REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
.\" MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
.\" PURPOSE.
.\"
.Dd $Mdocdate: June 25 2015 $
.Dt M_TAG_GET 9
.Os
.Sh NAME
.Nm m_tag_get ,
.Nm m_tag_find ,
.Nm m_tag_prepend ,
.Nm m_tag_delete ,
.Nm m_tag_copy ,
.Nm m_tag_delete_chain ,
.Nm m_tag_init ,
.Nm m_tag_copy_chain ,
.Nm m_tag_first ,
.Nm m_tag_next
.Nd a framework for generic packet attributes
.Sh SYNOPSIS
.In sys/mbuf.h
.Ft "struct m_tag *"
.Fn m_tag_get "int type" "int len" "int flags"
.Ft "struct m_tag *"
.Fn m_tag_find "struct mbuf *mbuf" "int type" "struct m_tag *tag"
.Ft void
.Fn m_tag_prepend "struct mbuf *mbuf" "struct m_tag *tag"
.Ft void
.Fn m_tag_delete "struct mbuf *mbuf" "struct m_tag *tag"
.Ft "struct m_tag *"
.Fn m_tag_copy "struct m_tag *tag"
.Ft void
.Fn m_tag_delete_chain "struct mbuf *mbuf"
.Ft void
.Fn m_tag_init "struct mbuf *mbuf"
.Ft int
.Fn m_tag_copy_chain "struct mbuf *mbuf" "struct mbuf *mbuf2"
.Ft "struct m_tag *"
.Fn m_tag_first "struct mbuf *mbuf"
.Ft "struct m_tag *"
.Fn m_tag_next "struct mbuf *mbuf" "struct m_tag *tag"
.Sh DESCRIPTION
These functions allow the manipulation of generic packet attributes.
They are used by the kernel to keep track of operations done or
scheduled to happen to packets.
These attributes are attached to
.Xr mbuf 9
packet headers.
.Pp
Mbuf tags get allocated using
.Xr pool 9 .
.Pp
.Fn m_tag_get
allocates a new tag of type
.Va type
with
.Va len
bytes of space following the tag header itself.
The
.Va flag
argument is passed directly to
.Xr pool_get 9 .
If successful,
.Fn m_tag_get
returns a memory buffer of (len + sizeof (struct m_tag)) bytes.
The first sizeof(struct m_tag) bytes contain a struct m_tag:
.Bd -literal
struct m_tag {
	SLIST_ENTRY(m_tag)	m_tag_link;	/* List of packet tags */
	u_int16_t		m_tag_id;	/* Tag ID */
	u_int16_t		m_tag_len;	/* Length of data */
};
.Ed
.Pp
The
.Va m_tag_link
field is used to link tags together (see
.Xr queue 3
for more details).
The
.Va m_tag_id
and
.Va m_tag_len
fields are set to
.Va type
and
.Va len
respectively.
Following this structure are
.Va len
bytes of space that can be used to store tag-specific information.
.Pp
The currently defined tag types are:
.Bl -tag -width PACKET_TAG_PF_REASSEMBLED
.It PACKET_TAG_IPSEC_IN_DONE
Used by
.Xr ipsec 4
to indicate successful processing performed on an input packet.
The tag contains a
.Va struct tdb_ident ,
as defined in
.Pa sys/netinet/ip_ipsp.h ,
identifying the security association under which the packet arrived.
.It PACKET_TAG_IPSEC_OUT_DONE
Used by IPsec to indicate that an output packet has been
IPsec-processed.
The tag contains a
.Va struct tdb_ident
identifying the security association applied to the packet.
This tag is primarily used to detect and avoid loops in IPsec
processing on output.
.It PACKET_TAG_GIF
Used by the
.Xr gif 4
interface to detect loops in processing.
The tag contains a pointer to the gif interface that already processed
the packet.
.It PACKET_TAG_GRE
Used by the
.Xr gre 4
interface to detect loops in processing.
The tag contains a pointer to the gre interface that already processed
the packet.
.It PACKET_TAG_DLT
Used by
.Xr bpf 4
to indicate that the packet was injected.
The tag contains a
.Va u_int
identifying the data link layer type.
.It PACKET_TAG_PF_DIVERT
Indicates that the packet was diverted by
.Xr pf 4
using the
.Em divert-to
or
.Em divert-reply
directives.
The tag contains a
.Va struct pf_divert
identifying the port, address and routing domain the packet should be
diverted to.
.It PACKET_TAG_PIPEX
Used by
.Xr pipex 4
to cache its session information.
The tag contains a
.Va struct pipex_tag .
.It PACKET_TAG_PF_REASSEMBLED
Used by
.Xr pf 4
to reassemble IPv6 fragments.
The tag contains a
.Va struct pf_fragment_tag .
.It PACKET_TAG_SRCROUTE
Used by the IPv4 stack to keep track of the source route of an incoming
IP packet, in case a protocol wants to respond over the same route.
The tag contains a
.Va struct ip_srcrt .
.El
.Pp
.Fn m_tag_find
finds an instance of a tag of type
.Va type
attached to packet
.Va mbuf .
If
.Va tag
is
.Dv NULL ,
the first such tag is returned.
Otherwise, the first tag of type
.Va type
after
.Va tag
is returned.
If no such tag is found,
.Dv NULL
is returned.
.Pp
.Fn m_tag_prepend
adds the new tag
.Va tag
at the head of the tag list for packet
.Va mbuf .
.Pp
.Fn m_tag_delete
removes and then de-allocates tag
.Va tag
from the list of tags of packet
.Va mbuf .
.Pp
.Fn m_tag_copy
creates an unlinked copy of tag
.Va tag .
.Pp
.Fn m_tag_delete_chain
deletes all tags attached to packet
.Va mbuf .
.Pp
.Fn m_tag_init
initializes the tag storage for packet
.Va mbuf .
.Pp
.Fn m_tag_copy_chain
copies all tags from packet
.Va mbuf
to packet
.Va mbuf2 .
On success, it returns 0.
Otherwise, it returns
.Er ENOBUFS .
.Pp
.Fn m_tag_first
returns the first tag attached to packet
.Va mbuf .
.Pp
.Fn m_tag_next
returns the tag following
.Va tag
in packet
.Va mbuf .
.Pp
The
.Fn M_MOVE_PKTHDR
and
.Fn M_MOVE_HDR
macros defined in
.Pa sys/sys/mbuf.h
move the tags from the old to the new mbuf.
.Sh CODE REFERENCES
The tag-manipulating code is contained in the file
.Pa sys/kern/uipc_mbuf2.c .
.Sh SEE ALSO
.Xr bpf 4 ,
.Xr bridge 4 ,
.Xr gif 4 ,
.Xr gre 4 ,
.Xr ipsec 4 ,
.Xr pf 4 ,
.Xr pipex 4 ,
.Xr mbuf 9
.Sh HISTORY
The packet tags first appeared in
.Ox 2.9
and were written by
.An Angelos D. Keromytis Aq Mt angelos@@openbsd.org .
@


1.36
log
@PACKET_TAG_BRIDGE is gone.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.35 2015/05/23 12:57:09 markus Exp $
d18 2
a19 2
.Dd $Mdocdate: May 23 2015 $
.Dt MBUF_TAGS 9
d22 10
a31 1
.Nm mbuf_tags
@


1.35
log
@PACKET_TAG_IPSEC_PENDING_TDB is gone, too.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.34 2015/04/17 11:06:39 mikeb Exp $
d18 1
a18 1
.Dd $Mdocdate: April 17 2015 $
a115 6
.It PACKET_TAG_BRIDGE
Used by the
.Xr bridge 4
code to detect loops in bridge processing.
The tag contains a pointer to the bridge interface that already
forwarded the frame.
@


1.34
log
@IPSEC_IN_CRYPTO_DONE and OUT_CRYPTO_NEEDED are gone
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.33 2014/07/10 03:48:25 lteo Exp $
d18 1
a18 1
.Dd $Mdocdate: July 10 2014 $
d98 1
a98 1
.Bl -tag -width PACKET_TAG_IPSEC_PENDING_TDB
a115 7
.It PACKET_TAG_IPSEC_PENDING_TDB
Used by the IPsec stack to keep track of IPsec processing that should
happen to the packet on output.
The tag contains a
.Va struct tdb_ident
identifying the security association that should be applied at the
next loop of IPsec processing.
@


1.33
log
@divert-packet no longer uses the PACKET_TAG_PF_DIVERT mbuf tag.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.32 2013/08/13 09:52:53 mpi Exp $
d18 1
a18 1
.Dd $Mdocdate: August 13 2013 $
d98 1
a98 1
.Bl -tag -width PACKET_TAG_IPSEC_OUT_CRYPTO_NEEDED
a115 14
.It PACKET_TAG_IPSEC_IN_CRYPTO_DONE
Used by network cards that implement on-board IPsec processing to
indicate that the crypto processing of an IPsec packet has been done.
The tag contains a
.Va struct tdb_ident
identifying the security association under which the packet arrived.
.It PACKET_TAG_IPSEC_OUT_CRYPTO_NEEDED
Used by the IPsec stack to signal to network cards that implement
on-board IPsec processing that such processing is needed.
The tag contains a
.Va struct tdb_ident
identifying the security association that should be applied.
The packet is already formatted for the appropriate security
protocol.
@


1.32
log
@When net.inet.ip.sourceroute is enable, store the source route
of incoming IPv4 packets with the SSRR or LSRR header option in
a m_tag rather than in a single static entry.

Use a new m_tag type, PACKET_TAG_SRCROUTE, for this and bump
PACKET_TAG_MAXSIZE accordingly.

Adapted from FreeBSD r135274 with inputs from bluhm@@.

ok bluhm@@, mikeb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.31 2013/07/17 20:21:54 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 17 2013 $
d165 1
a165 2
by using
.Em divert-packet ,
@


1.31
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.30 2013/06/11 01:01:15 dlg Exp $
d18 1
a18 1
.Dd $Mdocdate: June 11 2013 $
d187 5
@


1.30
log
@return ENOBUFS on failure from m_defrag and m_tag_copy_chain.

m_foo functions that return errors are now consistent as far as i can tell.

ok bluhm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.29 2013/06/04 19:27:09 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 4 2013 $
d274 1
a274 1
.An Angelos D. Keromytis Aq angelos@@openbsd.org .
@


1.29
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.28 2013/05/17 22:42:20 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: May 17 2013 $
d239 1
a239 1
.Er ENOMEM .
@


1.28
log
@i got SEE ALSO completely wrong ;(
sorry mpi!
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.27 2013/05/17 17:20:09 mpi Exp $
d25 1
a25 1
.Fd #include <sys/mbuf.h>
@


1.27
log
@Sync with reality.

ok henning@@, yasuoka@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.26 2011/01/29 13:15:39 bluhm Exp $
d18 1
a18 1
.Dd $Mdocdate: January 29 2011 $
d262 1
a262 1
.Xr bpf 4,
a266 1
.Xr mbuf 9 ,
d268 2
a269 1
.Xr pipex 4
@


1.26
log
@The function m_tag_copy_chain() returned 0 on success and 1 on
failure.  The man page explained it the other way around.  Change
the return code to the more obvious 0 or ENOMEM and document this.
ok krw@@ markus@@ miod@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.25 2010/03/13 06:39:33 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: March 13 2010 $
d50 3
a52 1
These attributes are attached to mbuf packet headers.
d55 1
a55 2
.Xr malloc 9 ,
thus, due to the performance impact, mbuf tags should be used with care.
d66 1
a66 1
.Xr malloc 9 .
d98 1
a98 3
.Bl -tag -width "111111111111"
.It PACKET_TAG_NONE
This should never be used.
a129 8
.It PACKET_TAG_IPSEC_IN_COULD_DO_CRYPTO
Used by network cards that implement on-board IPsec
processing to indicate to the IPsec stack that cryptographic
processing could be deferred to hardware.
The tag contains a
.Va struct tdb_ident
identifying the security association that could be offloaded to the
network card.
d155 32
a186 4
.It PACKET_TAG_IN_PACKET_CHECKSUM
Used by network cards that can compute complete packet checksums to
pass that information to higher-level protocols.
The tag contains the 2 byte checksum of the packet.
a257 5
The
.Fn M_DUP_PKTHDR
and
.Fn M_DUP_HDR
macros create copies of the tag chain for the new mbuf.
d262 1
d267 3
a269 1
.Xr malloc 9
@


1.25
log
@no need for "-offset -0i";
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.24 2007/05/31 19:20:00 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: May 31 2007 $
d218 3
a220 2
On success, it returns 1.
Otherwise, it returns 0.
@


1.24
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.23 2007/05/28 17:22:16 henning Exp $
d18 1
a18 1
.Dd $Mdocdate$
d70 1
a70 1
.Bd -literal -offset 0i
@


1.23
log
@pf does not use mbuf tags any more
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.22 2007/05/27 13:53:56 jmc Exp $
d18 1
a18 1
.Dd June 25, 2001
@


1.22
log
@replace wonky macro;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.21 2007/05/27 05:33:39 henning Exp $
a167 36
.It PACKET_TAG_PF_TAG
Used by
.Xr pf 4
to tag packets based on their purpose/behavior.
Packets could be generated by the packet filter cached as
fragmented, marked for queueing, or redirected to localhost.
Packets generated, routed, or stored due to fragmentation
by the packet filter contain no data.
When generated by
.Xr pf 4
they are not tested and thus passed unconditionally.
.Pp
In order to prevent loops caused by subsequent matching
routing rules, packets routed by
.Xr pf 4
are not tested more than once.
.Pp
Packets that have been cached by the fragment cache will do
a short circuit if processed again.
If they were to re-enter the fragcache,
they would be indistinguishable from a
duplicate of a previous packet and would be dropped.
.Pp
When queueing happens the tag will contain the ID of the
queue this packet should go to.
.Pp
Another scenario takes place when TCP and UDP packets are to
be redirected to loopback addresses.
The functions tcp_input() and udp_input() reverse the order of
lookups in in_pcblookup_listen(), when this tag is present, so
unspecific listeners are matched before specific ones.
This prevents external connections from appearing local to daemons
such as
.Xr portmap 8
listening on both unspecific and specific loopback sockets in order to
grant higher privileges to local users.
a250 1
.Xr pf 4 ,
@


1.21
log
@add a note that mbuf tags use malloc'd memory, ok theo
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.20 2007/01/03 18:43:12 claudio Exp $
d51 1
a51 1
.Dd
@


1.20
log
@Sync with reality. m_tag_free() and m_tag_unlink() where removed and
m_tag_delete_chain() was a simplified. OK dhartmei@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.19 2006/09/30 14:31:59 pedro Exp $
d51 4
@


1.19
log
@Better description of PF mbuf tags, from Diego Casati
Tweaks by jmc@@, okay henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.18 2003/12/08 07:07:35 mcbride Exp $
a27 2
.Ft void
.Fn m_tag_free "struct m_tag *tag"
a32 2
.Fn m_tag_unlink "struct mbuf *mbuf" "struct m_tag *tag"
.Ft void
d37 1
a37 1
.Fn m_tag_delete_chain "struct mbuf *mbuf" "struct m_tag *tag"
a201 3
.Fn m_tag_free
de-allocates a tag.
.Pp
a226 6
.Fn m_tag_unlink
removes tag
.Va tag
from the list of tags of packet
.Va mbuf .
.Pp
d239 1
a239 8
.Va mbuf
following tag
.Va tag .
If
.Va tag
is
.Dv NULL ,
all tags are deleted.
@


1.18
log
@Mbuf tag tcp and udp packets which are translated to localhost, and
use the the presence of this tag to reverse the match order in
in{6}_pcblookup_listen(). Some daemons (such as portmap) do a double
bind, binding to both * and localhost in order to differentiate local
from non-local connections, and potentially granting more privilege to
local ones. This change ensures that redirected connections to localhost
do not appear local to such a daemon.

Bulk of changes from dhartmei@@, some changes markus@@

ok dhartmei@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.17 2003/06/06 20:56:32 jmc Exp $
d168 1
a168 20
.It PACKET_TAG_PF_GENERATED
Used to mark packets generated by the packet filter
.Xr pf 4 .
Packets with this tag are not tested by pf but passed unconditionally.
Contains no data.
.It PACKET_TAG_PF_ROUTED
Used to mark packets routed by the packet filter
.Xr pf 4 .
Packets with this tag are not tested by pf more than once to prevent
loops caused by subsequent matching routing rules.
Contains no data.
.It PACKET_TAG_PF_FRAGCACHE
Used to mark fragmented packets cached by the packet filter
.Xr pf 4 .
Packets with this tag have been cached by the fragment cache already
and will short circuit it if processed again.
If they were to re-enter the fragcache, they would be indistinguishable
from a duplicate of a previous packet and would be dropped.
Contains no data.
.It PACKET_TAG_PF_QID
d171 6
a176 4
for queueing.
The tag contains the ID of the queue this packet should go to.
.It PACKET_TAG_PF_TAG
Used by
d178 4
a181 3
to tag packets and filtering on those later on.
.It PACKET_TAG_PF_TRANSLATE_LOCALHOST
Used by
d183 13
a195 1
to mark TCP and UDP packets redirected to loopback addresses.
@


1.17
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.16 2003/05/13 21:32:26 henning Exp $
d196 12
@


1.16
log
@PACKET_TAG_PF_TAG
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.15 2003/05/10 22:38:27 henning Exp $
d300 2
a301 1
and were written by Angelos D. Keromytis <angelos@@openbsd.org>.
@


1.15
log
@document PACKET_TAG_PF_QID

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.14 2003/02/26 15:05:07 david Exp $
d192 4
@


1.14
log
@start new sentence on a new line
ok mpech@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.13 2002/09/30 23:30:47 frantzen Exp $
d187 5
@


1.13
log
@document PF_FRAGCACHE tag
ok henning@@ deraadt@@ and my cat who is in the process of mauling my foot
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.12 2002/06/07 19:57:45 dhartmei Exp $
d183 3
a185 3
and will short circuit it if processed again.  If they were to re-enter
the fragcache, they would be indistinguishable from a duplicate of a
previous packet and would be dropped.
@


1.12
log
@Add mbuf tag PACKET_TAG_PF_ROUTED, used to prevent loops for pf routed
packets. ok angelos@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.11 2002/06/07 01:46:11 aaron Exp $
d178 8
@


1.11
log
@tyop
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.10 2002/02/08 20:13:04 angelos Exp $
d172 6
@


1.10
log
@.Nm packet tags -> .Nm mbuf_tags
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.9 2001/08/03 15:21:17 mpech Exp $
d179 1
a179 1
finds the an instance of a tag of type
@


1.9
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.8 2001/07/04 21:56:57 dhartmei Exp $
d22 1
a22 1
.Nm packet tags
@


1.8
log
@document PACKET_TAG_PF_GENERATED; ok angelos@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.7 2001/06/27 08:38:57 aaron Exp $
a263 1
.Pp
@


1.7
log
@Improve markup and correct a malformed sentence.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.6 2001/06/27 03:50:49 angelos Exp $
d168 5
d273 1
@


1.6
log
@M_COPY_* -> M_MOVE_*
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.5 2001/06/25 06:40:52 angelos Exp $
d80 1
a80 1
field is used to link tags together. See
d82 1
a82 1
for more details.
d118 1
a118 1
Used by network cards that implement on-board IPsec processing, to
d181 1
a181 1
.Va NULL ,
d189 1
a189 1
.Va NULL
d222 1
a222 1
.Va NULL ,
d258 1
a258 1
create a new copy of the tag chain for the new mbuf.
@


1.5
log
@Mention M_COPY_HDR/M_COPY_PKTHDR vs. M_DUP_HDR/M_DUP_PKTHDR wrt. tags
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.4 2001/06/25 06:37:04 angelos Exp $
d248 1
a248 1
.Fn M_COPY_PKTHDR
d250 1
a250 1
.Fn M_COPY_HDR
@


1.4
log
@Better wording.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.3 2001/06/25 05:47:17 angelos Exp $
d246 15
a260 1
.Sh CODE REFERENCS
@


1.3
log
@IPsec->ipsec for .Xr (mpech@@prosoft.org.lv)
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.2 2001/06/25 05:40:39 angelos Exp $
d156 1
a156 1
The tag contains a pointer to the gif interface that already forwarded
d162 1
a162 1
The tag contains a pointer to the gre interface that already forwarded
@


1.2
log
@Update.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mbuf_tags.9,v 1.1 2001/06/25 05:07:15 angelos Exp $
d102 1
a102 1
.Xr IPsec 4
@


1.1
log
@Man page for mbuf tags.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d164 1
a164 1
.It PACKET_TAG_PACKET_CHECKSUM
@

