head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.6
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.8
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.12.0.12
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.8
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.22
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.20
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.18
	OPENBSD_5_0:1.11.0.16
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.14
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.12
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.8
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3;
locks; strict;
comment	@.\" @;


1.14
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.13;
commitid	GVTTSAMZ93Lz4hmE;

1.13
date	2015.09.14.12.05.33;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	qvL3XzXKj2mMGbSP;

1.12
date	2013.07.17.20.21.52;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.17.14.05.01;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.14.11.16.27;	author mglocker;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.03.14.59.55;	author mglocker;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.02.07.27.51;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.01.22.34.19;	author mglocker;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.16.13.17.05;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.30.20.34.25;	author jaredy;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.04.15.14.36;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.04.14.12.05;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.04.12.48.42;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.14
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@.\"	$OpenBSD: ieee80211.9,v 1.13 2015/09/14 12:05:33 schwarze Exp $
.\"
.\" Copyright (c) 2004 Bruce M. Simpson <bms@@spc.org>
.\" Copyright (c) 2004 Darron Broad <darron@@kewl.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD: src/share/man/man9/ieee80211.9,v 1.3 2004/07/07 12:59:39 ru Exp $
.\" $Id: ieee80211.9,v 1.13 2015/09/14 12:05:33 schwarze Exp $
.\"
.Dd $Mdocdate: September 14 2015 $
.Dt IEEE80211_IFATTACH 9
.Os
.Sh NAME
.Nm ieee80211_ifattach , ieee80211_ifdetach ,
.Nm ieee80211_mhz2ieee , ieee80211_chan2ieee , ieee80211_ieee2mhz ,
.Nm ieee80211_media_init , ieee80211_media_change , ieee80211_media_status ,
.Nm ieee80211_watchdog ,
.Nm ieee80211_setmode , ieee80211_chan2mode ,
.Nm ieee80211_rate2media , ieee80211_media2rate ,
.Nm ieee80211_rate2plcp , ieee80211_plcp2rate
.Nd core 802.11 network stack functions
.Sh SYNOPSIS
.In net80211/ieee80211_var.h
.In net80211/ieee80211_proto.h
.Ft void
.Fn ieee80211_ifattach "struct ifnet *ifp"
.Ft void
.Fn ieee80211_ifdetach "struct ifnet *ifp"
.Ft u_int
.Fn ieee80211_mhz2ieee "u_int freq" "u_int flags"
.Ft u_int
.Fn ieee80211_chan2ieee "struct ieee80211com *ic" \
"const struct ieee80211_channel *c"
.Ft u_int
.Fn ieee80211_ieee2mhz "u_int chan" "u_int flags"
.Ft void
.Fo ieee80211_media_init
.Fa "struct ifnet *ifp" "ifm_change_cb_t media_change"
.Fa "ifm_stat_cb_t media_stat"
.Fc
.Ft int
.Fn ieee80211_media_change "struct ifnet *ifp"
.Ft void
.Fn ieee80211_media_status "struct ifnet *ifp" "struct ifmediareq *imr"
.Ft void
.Fn ieee80211_watchdog "struct ifnet *ifp"
.Ft int
.Fn ieee80211_setmode "struct ieee80211com *ic" "enum ieee80211_phymode mode"
.Ft enum ieee80211_phymode
.Fo ieee80211_chan2mode
.Fa "struct ieee80211com *ic" "const struct ieee80211_channel *chan"
.Fc
.Ft int
.Fo ieee80211_rate2media
.Fa "struct ieee80211com *ic" "int rate" "enum ieee80211_phymode mode"
.Fc
.Ft int
.Fn ieee80211_media2rate "int mword"
.Ft u_int8_t
.Fn ieee80211_rate2plcp "u_int8_t rate" "enum ieee80211_phymode mode"
.Ft u_int8_t
.Fn ieee80211_plcp2rate "u_int8_t plcp" "enum ieee80211_phymode mode"
.Sh DESCRIPTION
The
.Nm ieee80211
collection of functions are used to manage wireless network interfaces in the
system which use the system's software 802.11 network stack.
Most of these functions require that attachment to the stack is performed
before calling.
Several utility functions are also provided; these are safe to call from
any driver without prior initialization.
.Pp
.\"
The
.Fn ieee80211_ifattach
function attaches the network interface
.Fa ifp
to the 802.11 network stack layer.
This function must be called before using any of the
.Nm ieee80211
functions which need to store driver state across invocations.
The
.Vt struct ifnet
instance pointed to by
.Fa ifp
MUST be an instance of
.Vt struct ieee80211com ,
with various fields initialized to tell
.Nm ieee80211
about its capabilities.
This function performs Ethernet and BPF attachment (by calling
.Fn ether_ifattach
and
.Fn bpfattach )
on behalf of the caller.
It also implements the
.Vt ifmedia
interface.
.Pp
.\"
The
.Fn ieee80211_ifdetach
function frees any
.Nm ieee80211
structures associated with the driver, and performs Ethernet and BPF
detachment on behalf of the caller.
.Pp
.\"
The
.Fn ieee80211_mhz2ieee
utility function converts the frequency
.Fa freq
(specified in MHz) to an IEEE 802.11 channel number.
The
.Fa flags
argument is a hint which specifies whether the frequency is in
the 2GHz ISM band
.Pq Vt IEEE80211_CHAN_2GHZ
or the 5GHz band
.Pq Vt IEEE80211_CHAN_5GHZ ;
appropriate clipping of the result is then performed.
.Pp
.\"
The
.Fn ieee80211_chan2ieee
function converts the channel specified in
.Fa *c
to an IEEE channel number for the driver
.Fa ic .
If the conversion would be invalid, an error message is printed to the
system console.
This function requires that the driver is hooked up to the
.Nm ieee80211
subsystem.
.Pp
.\"
The
.Fn ieee80211_ieee2mhz
utility function converts the IEEE channel number
.Ft chan
to a frequency (in MHz).
The
.Fa flags
argument is a hint which specifies whether the frequency is in
the 2GHz ISM band
.Pq Vt IEEE80211_CHAN_2GHZ
or the 5GHz band
.Pq Vt IEEE80211_CHAN_5GHZ ;
appropriate clipping of the result is then performed.
.Pp
.\"
The
.Fn ieee80211_media_init
function initializes media data structures used by the
.Vt ifmedia
interface, for the driver
.Fa ifp .
It must be called by the driver after calling
.Fn ieee80211_ifattach
and before calling most
.Nm ieee80211
functions.
The
.Fa media_change
and
.Fa media_stat
arguments specify helper functions which will be invoked by the
.Vt ifmedia
framework when the user changes or queries media options,
using a command such as
.Xr ifconfig 8 .
.Pp
.\"
The
.Fn ieee80211_media_status
and
.Fn ieee80211_media_change
functions are device-independent handlers for
.Vt ifmedia
commands and are not intended to be called directly.
.Pp
.\"
The
.Fn ieee80211_watchdog
function is intended to be called from a driver's
.Va if_watchdog
routine.
It is used to perform periodic cleanup of state within the software 802.11
stack, as well as timing out scans.
.Pp
.\"
The
.Fn ieee80211_setmode
function is called from within the 802.11 stack to change the mode
of the driver's PHY; it is not intended to be called directly.
.Pp
.\"
The
.Fn ieee80211_chan2mode
function returns the PHY mode required for use with the channel
.Fa chan
on the device
.Fa ic .
This is typically used when selecting a rate set, to be advertised in
beacons, for example.
.Pp
.\"
The
.Fn ieee80211_rate2media
function converts the bit rate
.Fa rate
(measured in units of 0.5Mbps) to an
.Vt ifmedia
sub-type, for the device
.Fa ic
running in PHY mode
.Fa mode .
The
.Fn ieee80211_media2rate
performs the reverse of this conversion, returning the bit rate (in 0.5Mbps
units) corresponding to an
.Vt ifmedia
sub-type.
.Pp
.\"
The
.Fn ieee80211_rate2plcp
function converts the bit rate
.Fa rate
(measured in units of 0.5Mbps) to a
.Vt plcp
signal (in msb-first R4-R1 format).
The
.Fn ieee80211_plcp2rate
function performs the reverse of this conversion,
returning the bit rate (in 0.5Mbps units) corresponding to a
.Vt plcp
signal (in msb-first R4-R1 format).
.\"
.Sh SEE ALSO
.Xr ifmedia 4 ,
.Xr ieee80211_crypto 9 ,
.Xr ieee80211_input 9 ,
.Xr ieee80211_ioctl 9 ,
.Xr ieee80211_node 9 ,
.Xr ieee80211_output 9 ,
.Xr ieee80211_proto 9 ,
.Xr ieee80211_radiotap 9 ,
.Xr rssadapt 9
.Sh HISTORY
The
.Nm ieee80211
series of functions first appeared in
.Nx 1.5 ,
and were later ported to
.Fx 4.6
and
.Ox 3.6 .
.Sh AUTHORS
.An -nosplit
This man page was written by
.An Bruce M. Simpson Aq Mt bms@@FreeBSD.org
and
.An Darron Broad Aq Mt darron@@kewl.org .
@


1.13
log
@add missing function return types
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.12 2013/07/17 20:21:52 schwarze Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.12 2013/07/17 20:21:52 schwarze Exp $
d31 2
a32 2
.Dd $Mdocdate: July 17 2013 $
.Dt IEEE80211 9
@


1.12
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.11 2007/11/17 14:05:01 damien Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.11 2007/11/17 14:05:01 damien Exp $
d31 1
a31 1
.Dd $Mdocdate: November 17 2007 $
d62 1
a62 1
.Fa int
d64 1
a64 1
.Fa void
@


1.11
log
@make it clear in the code and in the man page that the rate2plcp and
plcp2rate functions use plcp codes in most-significant-bit-first format
(R4-R1).
some drivers like wpi(4) and iwn(4) want plcp codes in lsb-first format
so they can't use those functions.
also the IEEE standard uses R1-R4 notation so this can be a bit confusing
for those refering to it.

use u_int8_t for plcp code and rate instead of int.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.10 2007/11/14 11:16:27 mglocker Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.10 2007/11/14 11:16:27 mglocker Exp $
d31 1
a31 1
.Dd $Mdocdate: November 14 2007 $
d283 1
a283 1
.An Bruce M. Simpson Aq bms@@FreeBSD.org
d285 1
a285 1
.An Darron Broad Aq darron@@kewl.org .
@


1.10
log
@Add ieee80211_rate2plcp() and ieee80211_plcp2rate() functions, which
convert the PLCP header signal field to a rate value and vice versa.

This implementation has been discussed with Damien and doesn't change
any existing net80211 structures.

ok damien@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.9 2007/11/03 14:59:55 mglocker Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.9 2007/11/03 14:59:55 mglocker Exp $
d31 1
a31 1
.Dd $Mdocdate: November 3 2007 $
d80 4
a83 4
.Ft int
.Fn ieee80211_rate2plcp "int rate" "enum ieee80211_phymode mode"
.Ft int
.Fn ieee80211_plcp2rate "int plcp" "enum ieee80211_phymode mode"
d253 1
a253 1
signal.
d259 1
a259 1
signal.
@


1.9
log
@Revert last commit which added ieee80211_rate2plcp() and
ieee80211_plcp2rate() because I've got a late feedback from Damien that
he dislike the implementation method a lot.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.8 2007/11/02 07:27:51 jmc Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.8 2007/11/02 07:27:51 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: June 16 2007 $
d40 2
a41 1
.Nm ieee80211_rate2media , ieee80211_media2rate
d80 4
d245 15
@


1.8
log
@tweaks for previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.7 2007/11/01 22:34:19 mglocker Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.7 2007/11/01 22:34:19 mglocker Exp $
d31 1
a31 1
.Dd $Mdocdate: November 1 2007 $
d40 1
a40 2
.Nm ieee80211_rate2media , ieee80211_media2rate ,
.Nm ieee80211_rate2plcp , ieee80211_plcp2rate
a78 6
.Ft u_int8_t
.Fn ieee80211_rate2plcp "struct ieee80211com *ic" "int rate" \
"enum ieee80211_phymode mode"
.Ft int
.Fn ieee80211_plcp2rate "struct ieee80211com *ic" "u_int8_t plcp" \
"enum ieee80211_phymode mode"
a239 15
.Pp
.\"
The
.Fn ieee80211_rate2plcp
function converts the bit rate
.Fa rate
(measured in units of 0.5Mbps) to a
.Vt plcp
signal.
The
.Fn ieee80211_plcp2rate
function performs the reverse of this conversion,
returning the bit rate (in 0.5Mbps units) corresponding to a
.Vt plcp
signal.
@


1.7
log
@Add ieee80211_rate2plcp() and ieee80211_plcp2rate() functions.

Help and OK reyk@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.6 2007/06/16 13:17:05 damien Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.6 2007/06/16 13:17:05 damien Exp $
d31 1
a31 1
.Dd $Mdocdate: June 16 2007 $
d255 1
a255 1
signal. 
d258 2
a259 2
performs the reverse of this conversion, returning the bit rate (in 0.5Mbps
units) corresponding to a
@


1.6
log
@constify
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.5 2007/05/31 19:20:00 jmc Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.5 2007/05/31 19:20:00 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
d40 2
a41 1
.Nm ieee80211_rate2media , ieee80211_media2rate
d80 6
d247 15
@


1.5
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.4 2005/09/30 20:34:25 jaredy Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.4 2005/09/30 20:34:25 jaredy Exp $
d31 1
a31 1
.Dd $Mdocdate$
d52 2
a53 1
.Fn ieee80211_chan2ieee "struct ieee80211com *ic" "struct ieee80211_channel *c"
d71 1
a71 1
.Fa "struct ieee80211com *ic" "struct ieee80211_channel *chan"
@


1.4
log
@deploy .An -nosplit; ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.3 2005/04/04 15:14:36 jmc Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.3 2005/04/04 15:14:36 jmc Exp $
d31 1
a31 1
.Dd March 2, 2004
@


1.3
log
@add rssadapt(9) to SEE ALSO in ieee80211(9), and vice versa;
ok jsg@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.2 2005/04/04 14:12:05 jmc Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.2 2005/04/04 14:12:05 jmc Exp $
d260 1
@


1.2
log
@apply some fixes originally mailed to jsg@@;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ieee80211.9,v 1.1 2005/04/04 12:48:42 jsg Exp $
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.1 2005/04/04 12:48:42 jsg Exp $
d248 2
a249 1
.Xr ieee80211_radiotap 9
@


1.1
log
@Some documentation for the 802.11 stack written by
Bruce M. Simpson and Darron Broad for FreeBSD, adapted to reflect
the state of our stack.  Help from and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d29 1
a29 1
.\" $Id: ieee80211.9,v 1.5 2004/03/04 12:33:27 bruce Exp $
d96 1
a96 1
functions which need to store driver state across invocations;
d147 1
a147 1
This function REQUIRES that the driver is hooked up to the
@

