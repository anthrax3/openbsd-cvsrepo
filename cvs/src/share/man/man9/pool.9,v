head	1.54;
access;
symbols
	OPENBSD_6_1_BASE:1.54
	OPENBSD_6_0:1.52.0.2
	OPENBSD_6_0_BASE:1.52
	OPENBSD_5_9:1.51.0.2
	OPENBSD_5_9_BASE:1.51
	OPENBSD_5_8:1.49.0.8
	OPENBSD_5_8_BASE:1.49
	OPENBSD_5_7:1.49.0.2
	OPENBSD_5_7_BASE:1.49
	OPENBSD_5_6:1.49.0.4
	OPENBSD_5_6_BASE:1.49
	OPENBSD_5_5:1.45.0.6
	OPENBSD_5_5_BASE:1.45
	OPENBSD_5_4:1.45.0.2
	OPENBSD_5_4_BASE:1.45
	OPENBSD_5_3:1.43.0.2
	OPENBSD_5_3_BASE:1.43
	OPENBSD_5_2:1.42.0.6
	OPENBSD_5_2_BASE:1.42
	OPENBSD_5_1_BASE:1.42
	OPENBSD_5_1:1.42.0.4
	OPENBSD_5_0:1.42.0.2
	OPENBSD_5_0_BASE:1.42
	OPENBSD_4_9:1.41.0.6
	OPENBSD_4_9_BASE:1.41
	OPENBSD_4_8:1.41.0.4
	OPENBSD_4_8_BASE:1.41
	OPENBSD_4_7:1.41.0.2
	OPENBSD_4_7_BASE:1.41
	OPENBSD_4_6:1.40.0.6
	OPENBSD_4_6_BASE:1.40
	OPENBSD_4_5:1.40.0.2
	OPENBSD_4_5_BASE:1.40
	OPENBSD_4_4:1.36.0.2
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.34.0.4
	OPENBSD_4_3_BASE:1.34
	OPENBSD_4_2:1.34.0.2
	OPENBSD_4_2_BASE:1.34
	OPENBSD_4_1:1.33.0.4
	OPENBSD_4_1_BASE:1.33
	OPENBSD_4_0:1.33.0.2
	OPENBSD_4_0_BASE:1.33
	OPENBSD_3_9:1.32.0.2
	OPENBSD_3_9_BASE:1.32
	OPENBSD_3_8:1.29.0.2
	OPENBSD_3_8_BASE:1.29
	OPENBSD_3_7:1.28.0.6
	OPENBSD_3_7_BASE:1.28
	OPENBSD_3_6:1.28.0.4
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.28.0.2
	OPENBSD_3_5_BASE:1.28
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.22.0.2
	OPENBSD_3_3_BASE:1.22
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3;
locks; strict;
comment	@.\" @;


1.54
date	2016.09.15.06.11.14;	author jmc;	state Exp;
branches;
next	1.53;
commitid	XMgt9OGYmAHnZNP7;

1.53
date	2016.09.15.02.00.16;	author dlg;	state Exp;
branches;
next	1.52;
commitid	RlO92XR575sygHqm;

1.52
date	2016.04.21.04.09.28;	author mlarkin;	state Exp;
branches;
next	1.51;
commitid	Ujd8bJH9hHcKeRgM;

1.51
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.50;
commitid	GVTTSAMZ93Lz4hmE;

1.50
date	2015.09.06.16.52.20;	author kettenis;	state Exp;
branches;
next	1.49;
commitid	C6KKFqbLiwG0TjQk;

1.49
date	2014.07.02.05.48.38;	author jmc;	state Exp;
branches;
next	1.48;
commitid	amfzO8mLvAEmEa84;

1.48
date	2014.07.02.00.49.50;	author dlg;	state Exp;
branches;
next	1.47;
commitid	MGxSYRRVNCMFHGNo;

1.47
date	2014.07.02.00.40.30;	author dlg;	state Exp;
branches;
next	1.46;
commitid	fg4F7FwMK5gi2oO4;

1.46
date	2014.07.02.00.39.43;	author dlg;	state Exp;
branches;
next	1.45;
commitid	4nRvjOhpDoXLC8HH;

1.45
date	2013.07.17.20.21.54;	author schwarze;	state Exp;
branches;
next	1.44;

1.44
date	2013.06.04.19.27.11;	author schwarze;	state Exp;
branches;
next	1.43;

1.43
date	2012.09.17.06.11.58;	author guenther;	state Exp;
branches;
next	1.42;

1.42
date	2011.07.05.23.42.44;	author tedu;	state Exp;
branches;
next	1.41;

1.41
date	2010.03.08.21.56.17;	author oga;	state Exp;
branches;
next	1.40;

1.40
date	2009.01.15.21.20.15;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2009.01.15.17.35.48;	author oga;	state Exp;
branches;
next	1.38;

1.38
date	2008.11.09.07.41.27;	author ckuethe;	state Exp;
branches;
next	1.37;

1.37
date	2008.10.27.08.56.49;	author dlg;	state Exp;
branches;
next	1.36;

1.36
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.35;

1.35
date	2008.05.06.20.57.19;	author thib;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.07.20.24.45;	author pedro;	state Exp;
branches;
next	1.32;

1.32
date	2005.09.30.18.04.45;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2005.09.09.08.51.54;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2005.09.09.03.38.08;	author pedro;	state Exp;
branches;
next	1.29;

1.29
date	2005.07.31.03.26.45;	author pascoe;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.20.18.37.37;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.31.00.38.27;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.30.21.27.44;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.08.29.19.46.29;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2003.04.20.20.00.25;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2003.02.24.02.26.06;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2002.12.20.08.06.55;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2002.10.08.04.46.35;	author todd;	state Exp;
branches;
next	1.19;

1.19
date	2002.05.28.09.07.07;	author mpech;	state Exp;
branches;
next	1.18;

1.18
date	2002.04.03.00.33.54;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.25.04.53.16;	author dhartmei;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.25.00.23.20;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.10.29.12.43.44;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.04.16.56.52;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.21.18.27.12;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.23.16.40.16;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.28.05.37.28;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.28.05.34.46;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.27.22.11.26;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.27.08.03.57;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.26.05.37.52;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.01.16.11.25;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.22.00.13.34;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.12.18.06.01;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.26.21.21.38;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	99.09.22.09.54.38;	author espie;	state dead;
branches;
next	1.1;

1.1
date	99.09.22.03.16.47;	author csapuntz;	state Exp;
branches;
next	;


desc
@@


1.54
log
@some pool_setipl mop up; ok dlg
@
text
@.\"	$OpenBSD: pool.9,v 1.53 2016/09/15 02:00:16 dlg Exp $
.\"	$NetBSD: pool.9,v 1.18 2001/06/21 11:59:01 wiz Exp $
.\"
.\" Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Paul Kranenburg.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: September 15 2016 $
.Dt POOL_INIT 9
.Os
.Sh NAME
.Nm pool_init ,
.Nm pool_destroy ,
.Nm pool_get ,
.Nm pool_put ,
.Nm pool_prime ,
.Nm pool_sethiwat ,
.Nm pool_setlowat ,
.Nm pool_sethardlimit
.Nd resource-pool manager
.Sh SYNOPSIS
.In sys/types.h
.In sys/pool.h
.Ft void
.Fo pool_init
.Fa "struct pool *pool"
.Fa "size_t size"
.Fa "u_int align"
.Fa "int ipl"
.Fa "int flags"
.Fa "const char *wmesg"
.Fa "struct pool_allocator *palloc"
.Fc
.Ft void
.Fo pool_destroy
.Fa "struct pool *pp"
.Fc
.Ft void *
.Fn pool_get "struct pool *pp" "int flags"
.Ft void
.Fn pool_put "struct pool *pp" "void *item"
.Ft int
.Fn pool_prime "struct pool *pp" "int nitems"
.Ft void
.Fn pool_sethiwat "struct pool *pp" "int n"
.Ft void
.Fn pool_setlowat "struct pool *pp" "int n"
.Ft int
.Fo pool_sethardlimit
.Fa "struct pool *pp"
.Fa "unsigned n"
.Fa "const char *warnmess"
.Fa "int ratecap"
.Fc
.Sh DESCRIPTION
These utility routines provide management of pools of fixed-sized
areas of memory.
Resource pools set aside an amount of memory for exclusive use by the resource
pool owner.
This can be used by applications to guarantee the availability of a minimum
amount of memory needed to continue operation independent of the memory
resources currently available from the system-wide memory allocator
.Pq Xr malloc 9 .
The pool manager obtains memory by using the special-purpose memory
allocator
.Fa palloc
passed to
.Fn pool_init ,
for extra pool items in case the number of allocations exceeds
the nominal number of pool items managed by a pool resource.
This temporary memory will be automatically returned to the system
at a later time.
.Ss CREATING A POOL
The function
.Fn pool_init
initializes a resource pool.
The arguments are:
.Bl -tag -offset indent -width "align_offset"
.It Fa pool
Specifies the pool storage to be initialized.
.It Fa size
Specifies the size of the memory items managed by the pool.
.It Fa align
Specifies the memory address alignment of the items returned by
.Fn pool_get .
This argument must be a power of two.
If zero,
the alignment defaults to an architecture-specific natural alignment.
.It Fa ipl
The interrupt protection level used to protect the pool's internals,
and at what level the pool can be safely used.
See
.Xr spl 9
for a list of the IPLs.
.It Fa flags
Specifies various flags set on the pool at creation time.
.It Fa wmesg
The message passed on to
.Xr tsleep 9
if
.Fn pool_get
must wait for items to be returned to the pool.
.It Fa palloc
The back-end allocator used to manage the memory for the pool.
.Fa palloc
may be
.Dv NULL ,
in which case the pool manager chooses an appropriate back-end allocator.
If the
.Dv PR_WAITOK
flag has been specified, this allocator may not be interrupt safe.
It is recommended to specify this flag if the pool will never be
accessed in interrupt context.
.El
.Ss DESTROYING A POOL
The
.Fn pool_destroy
function destroys a resource pool.
It takes a single argument
.Fa pp
identifying the pool resource instance.
.Ss ALLOCATING ITEMS FROM A POOL
.Fn pool_get
allocates an item from the pool and returns a pointer to it.
.Bl -tag -offset indent -width "flags"
.It Fa pp
The handle identifying the pool resource instance.
.It Fa flags
One or more flags.
Either
.Dv PR_WAITOK
or
.Dv PR_NOWAIT
must be specified
to define behaviour in case the pooled resources are depleted.
If no resources are available and
.Dv PR_NOWAIT
was specified,
this function returns
.Dv NULL .
If
.Dv PR_WAITOK
was specified
but
.Dv PR_LIMITFAIL
was not,
.Fn pool_get
will wait until items are returned to the pool.
If both
.Dv PR_WAITOK
and
.Dv PR_LIMITFAIL
were specified, and the pool has reached its hard limit,
.Fn pool_get
will return
.Dv NULL
without waiting, allowing the caller to do its own garbage collection;
however, it will still wait if the pool is not yet at its hard limit.
If
.Dv PR_ZERO
was specified and an item has been successfully allocated, it is zeroed before
being returned to the caller.
.El
.Ss RETURNING ITEMS TO A POOL
.Fn pool_put
returns the pool item pointed at by
.Fa item
to the resource pool identified by the pool handle
.Fa pp .
If the number of available items in the pool exceeds the maximum pool
size set by
.Fn pool_sethiwat
and there are no outstanding requests for pool items,
the excess items will be returned to the system if possible.
.Bl -tag -offset indent -width "item"
.It Fa pp
The handle identifying the pool resource instance.
.It Fa item
A pointer to a pool item previously obtained by
.Fn pool_get .
.El
.Pp
If a non-interrupt safe allocator has been selected by passing the
.Dv PR_WAITOK
flag to
.Fn pmap_init ,
.Fn pool_put
may sleep when completely unused pages are released.
.Ss PRIMING A POOL
.Fn pool_prime
adds items to the pool.
Storage space for the items is allocated by using the page allocation
routine specified to
.Fn pool_init .
.Pp
.Fn pool_prime
.Bl -tag -offset indent -width "nitems"
.It Fa pp
The handle identifying the pool resource instance.
.It Fa nitems
The number of items to add to the pool.
.El
.Ss SETTING POOL RESOURCE WATERMARKS
A pool will attempt to increase its resource usage to keep up with the demand
for its items.
Conversely,
it will return unused memory to the system should the number of accumulated
unused items in the pool exceed a programmable limit.
The limits for the minimum and maximum number of items which a pool should keep
at hand are known as the high and low
.Sy watermarks .
The functions
.Fn pool_sethiwat
and
.Fn pool_setlowat
set a pool's high and low watermarks, respectively.
.Pp
.Fn pool_sethiwat
.Bl -tag -offset indent -width "flags"
.It Fa pp
The handle identifying the pool resource instance.
.It Fa n
The maximum number of items to keep in the pool.
As items are returned and the total number of pages in the pool is larger
than the maximum set by this function,
any completely unused pages are released immediately.
If this function is not used to specify a maximum number of items,
the pages will remain associated with the pool until the system runs low
on memory,
at which point the VM system will try to reclaim unused pages.
.El
.Pp
.Fn pool_setlowat
.Bl -tag -offset indent -width "flags"
.It Fa pp
The handle identifying the pool resource instance.
.It Fa n
The minimum number of items to keep in the pool.
The number of pages in the pool will not decrease below the required value to
accommodate the minimum number of items specified by this function.
Unlike
.Fn pool_prime ,
this function does not allocate the necessary memory up-front.
.El
.Ss SETTING HARD LIMITS
The function
.Fn pool_sethardlimit
sets a hard limit on the pool to
.Fa n
items.
If the hard limit is reached
.Fa warnmess
will be printed to the console, but no more than every
.Fa ratecap
seconds.
Upon successful completion, a value of 0 is returned.
The value EINVAL is returned when the current size of the pool
already exceeds the requested hard limit.
.Ss POTENTIAL PITFALLS
Note that undefined behaviour results when mixing the storage providing
methods supported by the pool resource routines.
.Pp
The pool resource code uses a per-pool lock to protect its internal state.
If any pool functions are called in an interrupt context,
the caller must block all interrupts that might cause the
code to be reentered.
.Sh CONTEXT
.Fn pool_init ,
.Fn pool_destroy ,
.Fn pool_prime ,
.Fn pool_sethiwat ,
.Fn pool_setlowat ,
and
.Fn pool_sethardlimit
can be called during autoconf or from process context.
.Pp
.Fn pool_get
and
.Fn pool_put
can be called during autoconf or from process context.
If the pool has been initialised with an interrupt safe pool allocator
they can also be called from interrupt context at or below the
interrupt level specified by a call to
.Fn pool_init .
.Sh RETURN VALUES
.Fn pool_get
will return a pointer to an item allocated from the pool.
If
.Dv PR_NOWAIT
or
.Dv PR_LIMITFAIL
were passed as flags to the pool it may return
.Dv NULL
if there are no resources available or if the pool hard limit has been reached,
respectively.
.Pp
.Fn pool_prime
will return
.Dv ENOMEM
if the requested number of items could not be allocated.
Otherwise, the return value is 0.
.Pp
.Fn pool_sethardlimit
will return
.Dv EINVAL
if the current size of the pool exceeds the requested hard limit.
Otherwise, the return value is 0.
.Sh CODE REFERENCES
The pool manager is implemented in the file
.Pa sys/kern/subr_pool.c .
.Sh SEE ALSO
.Xr free 9 ,
.Xr malloc 9 ,
.Xr spl 9 ,
.Xr uvm 9
.Sh HISTORY
The pool manager first appeared in
.Nx 1.4
and was ported to
.Ox
by
.An Artur Grabowski Aq Mt art@@openbsd.org .
@


1.53
log
@all pools have their ipl set via pool_setipl, so fold it into pool_init.

the ioff argument to pool_init() is unused and has been for many
years, so this replaces it with an ipl argument. because the ipl
will be set on init we no longer need pool_setipl.

most of these changes have been done with coccinelle using the spatch
below. cocci sucks at formatting code though, so i fixed that by hand.

the manpage and subr_pool.c bits i did myself.

ok tedu@@ jmatthew@@

@@ipl@@
expression pp;
expression ipl;
expression s, a, o, f, m, p;
@@@@
-pool_init(pp, s, a, o, f, m, p);
-pool_setipl(pp, ipl);
+pool_init(pp, s, a, ipl, f, m, p);
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.52 2016/04/21 04:09:28 mlarkin Exp $
d31 1
a31 1
.Dd $Mdocdate: April 21 2016 $
a293 1
.Fn pool_setipl ,
d307 1
a307 1
.Fn pool_setipl .
@


1.52
log
@
Remove some incorrect and outdated references to pool debugging from pool.h
and pool(9) manpage

ok dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.51 2015/11/23 17:53:57 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: November 23 2015 $
a39 1
.Nm pool_setipl ,
d52 1
a52 1
.Fa "u_int align_offset"
a67 2
.Fn pool_setipl "struct pool *pp" "int ipl"
.Ft void
d112 6
a117 4
.It Fa align_offset
The offset within an item to which the
.Fa align
parameter applies.
a266 16
.El
.Ss SETTING THE PROTECTION LEVEL
The
.Fn pool_setipl
function is used to specify the interrupt protection level at which the pool
can be safely used.
.Pp
.Fn pool_setipl
.Bl -tag -offset indent -width "flags"
.It Fa pp
The handle identifying the pool resource instance.
.It Fa ipl
The interrupt protection level used to protect the pool's internals.
See
.Xr spl 9
for a list of the IPLs.
@


1.51
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.50 2015/09/06 16:52:20 kettenis Exp $
d31 1
a31 1
.Dd $Mdocdate: September 6 2015 $
a306 17
.Ss DEBUGGING
To debug a misbehaving pool, a kernel can be compiled with the
.Dv MALLOC_DEBUG
option and memory debugging on pools can be enabled with the
.Dv PR_DEBUG
flag passed in the
.Fa flags
argument in the call to
.Fn pool_init .
See
.Xr malloc 9
for more information about
.Dv MALLOC_DEBUG .
Alternatively, the
.Dv PR_DEBUGCHK
flag can be passed to enable pool internal consistency checks before and
after each allocation and free.
@


1.50
log
@Remove some lies and document that passing the PR_WAITOK flag to pmap_init(9)
is the new way to request a non-interrupt-safe backend allocator.

ok jmc@@, deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.49 2014/07/02 05:48:38 jmc Exp $
d31 2
a32 2
.Dd $Mdocdate: July 2 2014 $
.Dt POOL 9
@


1.49
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.48 2014/07/02 00:49:50 dlg Exp $
d132 6
a137 4
in which case the pool manager uses an interrupt safe allocator.
It is recommended that this be set to
.Em pool_allocator_nointr
if the pool will never be accessed in an interrupt context.
d198 1
a198 2
the excess items will be returned to the system by calling
.Fn prelease .
d206 7
d250 1
a250 2
any completely unused pages are released immediately
.Pq by calling Fn prelease .
@


1.48
log
@RETURN VALUES section
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.46 2014/07/02 00:39:43 dlg Exp $
a218 1
.Pp
d343 1
a343 1
was passed as flags to the pool it may return
d345 1
a345 1
if there are no resources available or if the pool hard limit has been reached
d354 1
a354 1
.Fn pool_sethardlimit 
d356 2
a357 1
.Dv EINVAL if the current size of the pool exceeds the requested hard limit.
@


1.47
log
@oops, extra newline
@
text
@a219 5
This function may return
.Dv ENOMEM
in case the requested number of items could not be allocated.
Otherwise,
the return value is 0.
d337 22
@


1.46
log
@add a CONTEXT section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.45 2013/07/17 20:21:54 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: July 17 2013 $
a322 1

@


1.45
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.44 2013/06/04 19:27:11 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: June 4 2013 $
d323 20
@


1.44
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.43 2012/09/17 06:11:58 guenther Exp $
d31 1
a31 1
.Dd $Mdocdate: September 17 2012 $
d337 1
a337 1
.An Artur Grabowski Aq art@@openbsd.org .
@


1.43
log
@Rework the description of the flags to pool_get(9)

ok jmc@@, tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.42 2011/07/05 23:42:44 tedu Exp $
d31 1
a31 1
.Dd $Mdocdate: July 5 2011 $
d46 2
a47 2
.Fd #include <sys/types.h>
.Fd #include <sys/pool.h>
@


1.42
log
@a short note about PR_DEBUGCHK
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.41 2010/03/08 21:56:17 oga Exp $
d31 1
a31 1
.Dd $Mdocdate: March 8 2010 $
d151 4
a154 3
One or more of
.Dv PR_URGENT ,
.Dv PR_WAITOK ,
d156 2
a157 3
or
.Dv PR_LIMITFAIL ,
that define behaviour in case the pooled resources are depleted.
d159 5
d165 4
a168 3
is given,
this function will wait until items are returned to the pool.
Otherwise
d170 2
a171 4
returns
.Dv NULL .
.Dv PR_NOWAIT
should be provided in cases where
d173 1
a173 14
is not.
If
.Dv PR_URGENT
is specified and no items are available and
.Fa palloc
cannot allocate a new page,
the system will panic
.Pq XXX .
.\"Undefined behaviour results if
.\".Dv PR_MALLOCOK
.\"is specified on a pool handle that was created using client-provided
.\"storage.
.\" a bunch of other flags aren't documented.
If both
d175 1
a175 3
and
.Dv PR_WAITOK
are specified, and the pool has reached its hard limit,
d183 1
a183 1
is passed and an item has been successfully allocated, it is zeroed before
@


1.41
log
@document PR_NOWAIT.

(for those who've forgotten, if you can't sleep in pool_get, use
PR_NOWAIT, not zero. it makes the intention a lot clearer.

prompted by deraadt and jsing. ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.40 2009/01/15 21:20:15 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: January 15 2009 $
d330 4
@


1.40
log
@no comma for last item in a NAME list;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.39 2009/01/15 17:35:48 oga Exp $
d153 2
a154 1
.Dv PR_WAITOK
d166 4
@


1.39
log
@Remove the pool_cache documentation and MLINKs, tedu removed the code at h2k7.

pool_set_ctordtor() (which can emulate what pool_cache_* did) still needs
documenting though.

tedu@@ and jmc@@ seemed to agree. "Do it. I command you!" blambert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.38 2008/11/09 07:41:27 ckuethe Exp $
d31 1
a31 1
.Dd $Mdocdate: November 9 2008 $
d43 1
a43 1
.Nm pool_sethardlimit ,
@


1.38
log
@remove reference to POOL_DIAGNOSTIC which hasn't existed for nearly a year.
ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.37 2008/10/27 08:56:49 dlg Exp $
d31 1
a31 1
.Dd $Mdocdate: October 27 2008 $
a43 6
.Nm pool_cache_init ,
.Nm pool_cache_destroy ,
.Nm pool_cache_get ,
.Nm pool_cache_put ,
.Nm pool_cache_destruct_object ,
.Nm pool_cache_invalidate
a80 18
.Ft void
.Fo pool_cache_init
.Fa "struct pool_cache *pc"
.Fa "struct pool *pp"
.Fa "int (*ctor)(void *, void *, int)"
.Fa "void (*dtor)(void *, void *)"
.Fa "void *arg"
.Fc
.Ft void
.Fn pool_cache_destroy "struct pool_cache *pc"
.Ft void *
.Fn pool_cache_get "struct pool_cache *pc" "int flags"
.Ft void
.Fn pool_cache_put "struct pool_cache *pc" "void *object"
.Ft void
.Fn pool_cache_destruct_object "struct pool_cache *pc" "void *object"
.Ft void
.Fn pool_cache_invalidate "struct pool_cache *pc"
a311 36
.Ss POOL CACHES
Another set of functions are available as extensions to the pool manager.
The pool cache functions automatically call constructors and destructors
when objects are allocated from the pool or returned to it.
They have similar semantics as the other pool functions.
The
.Fa pp
argument to
.Fn pool_cache_init
must already be initialized.
.Pp
Objects are not immediately deconstructed when put into the pool cache.
Instead, they are maintained for future allocations.
When the system determines that memory needs to be reclaimed, then the
deconstructor is called on each free object and it is placed back into the
pool.
The
.Fa ctor
and
.Fa dtor
functions are passed
.Fa arg
and a pointer to the object, in that order.
The
.Fa ctor
is also passed the same
.Fa flags
that are passed to
.Fn pool_cache_get .
The
.Fn pool_cache_destruct_object
function deconstructs and puts an object back into the pool immediately.
.Fn pool_cache_invalidate
deconstructs all cached objects and releases their memory.
.Pp
Pool caches are also commonly referred to as a slab allocator.
@


1.37
log
@document pool_setipl.

with help from jmc@@, thank you.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.35 2008/05/06 20:57:19 thib Exp $
d31 1
a31 1
.Dd $Mdocdate: May 6 2008 $
a371 3
.Ss DIAGNOSTICS
Pool usage logs can be enabled by defining the compile-time option
.Dv POOL_DIAGNOSTIC .
@


1.36
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d40 1
d75 2
d298 16
d394 1
@


1.35
log
@Add a PR_ZERO flag for pools, to compliment the M_ZERO
malloc flag, does the same thing.
use it in a few places.

OK tedu@@, "then go ahead. and don't forget the manpage (-:" miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.34 2007/05/31 19:20:00 jmc Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
@


1.34
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.33 2006/05/07 20:24:45 pedro Exp $
d38 1
a38 1
.Dd $Mdocdate$
d215 4
@


1.33
log
@Pool drains are gone, okay tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.32 2005/09/30 18:04:45 jmc Exp $
d38 1
a38 1
.Dd July 23, 1998
@


1.32
log
@add pool_set_drain_hook and pool_sethardlimit to .Nm;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.31 2005/09/09 08:51:54 jmc Exp $
a43 1
.Nm pool_set_drain_hook ,
a73 6
.Ft void
.Fo pool_set_drain_hook
.Fa "struct pool *pp"
.Fa "void (*fn)(void *, int)"
.Fa "void *arg"
.Fc
a171 16
.Ss SETTING DRAIN CALLBACK
The
.Fn pool_set_drain_hook
function can be used to specify a function that will be called when
memory is running low.
The callback
.Fa fn
will be called with the arguments
.Fa arg
which is the third argument to
.Fn pool_set_drain_hook
and
.Fa flags
which will have
.Dv PR_WAITOK
set if the drain hook is allowed to sleep.
@


1.31
log
@grammar;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.30 2005/09/09 03:38:08 pedro Exp $
d44 1
d50 1
@


1.30
log
@Fix the description of palloc, okay deraadt@@ tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.29 2005/07/31 03:26:45 pascoe Exp $
d165 2
a166 2
in which case the pool manager uses a interrupt safe allocator.
It is recommended to set this to
d168 1
a168 1
if the pool will never be accessed in interrupt context.
@


1.29
log
@Pools aren't fun, don't let people think they are.  (fix argument name to
match source).

ok dlg deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.28 2004/01/20 18:37:37 tedu Exp $
d125 1
a125 1
.Fn palloc
d162 1
a162 1
.Fn palloc
d165 1
a165 12
in which case the pool manager uses the
.Em pool_allocator_kmem
allocator which uses
.Xr uvm_km_kmemalloc 9
and
.Xr uvm_km_free 9
to allocate and release memory using the
.Em kmem_map
.Po
see
.Xr uvm 9
.Pc .
d168 1
a168 2
if the pool will never be accessed in interrupt context, since that
allocator is much more efficient.
d217 1
a217 1
.Fn palloc
@


1.28
log
@notes on pool_cache. ok markus jmc a while back.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.27 2003/12/31 00:38:27 jmc Exp $
d76 1
a76 1
.Fa "void (*fun)(void *, int)"
d195 1
a195 1
.Fa fun
@


1.27
log
@remove obsolete reference to "storage" parameter;
ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.26 2003/12/30 21:27:44 jmc Exp $
d48 7
a54 1
.Nm pool_setlowat
d96 18
d353 36
@


1.26
log
@sync with <pool.h> and remove a .Pp before a list;
ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.25 2003/08/29 19:46:29 tedu Exp $
d247 1
a247 1
Storage space for the items is either allocated by using the page allocation
d249 1
a249 6
.Fn pool_init ,
or provided to
.Fn pool_prime
by the caller through the
.Fa storage
parameter.
@


1.25
log
@add some includes, from Patrick Latifi via jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.24 2003/06/06 20:56:32 jmc Exp $
d60 1
a60 1
.Fa "char *wmesg"
d78 1
a78 1
.Fn pool_prime "struct pool *pp" "int nitems" "caddr_t storage"
d86 1
a86 1
.Fa "int n"
a112 1
.Pp
a261 2
.It Fa storage
Optional pre-allocated storage.
@


1.24
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.23 2003/04/20 20:00:25 jmc Exp $
d51 1
@


1.23
log
@typos;

ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.22 2003/02/24 02:26:06 deraadt Exp $
d364 2
a365 1
by Artur Grabowski <art@@openbsd.org>.
@


1.22
log
@of of
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.21 2002/12/20 08:06:55 art Exp $
d150 1
a150 1
see 
d308 1
a308 1
The number pages in the pool will not decrease below the required value to
@


1.21
log
@ - fix one argument to pool_init.
 - document PR_DEBUG.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.20 2002/10/08 04:46:35 todd Exp $
d188 1
a188 1
One or more of of
@


1.20
log
@formatting knit, fix a run-together phrase
from Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.19 2002/05/28 09:07:07 mpech Exp $
d58 1
a58 1
.Fa "int nitems"
d128 2
a129 7
.It Fa nitems
Specifies the number of memory items that are allocated to
the pool at creation time.
This number may be zero,
in which case
.Fn pool_prime
can be used at a later time to add permanent items to the pool.
d339 13
@


1.19
log
@	man9/:
o) Start new sentence on a new line;
o) FreeBSD -> .Fx;
o) OpenBSD -> .Ox;
o) Close .Bl/Bd lists;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.18 2002/04/03 00:33:54 art Exp $
d154 2
a155 1
.Po see 
@


1.18
log
@Document pool_destroy. From NetBSD through Kamil Andrusz <wizz@@mniam.net>
pr 2507
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.17 2002/02/25 04:53:16 dhartmei Exp $
d165 2
a166 1
function destroys a resource pool. It takes a single argument
@


1.17
log
@Make pool_sethardlimit() check that it doesn't decrease the limit below
the current size of the pool. ok art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.16 2002/02/25 00:23:20 art Exp $
d63 4
d162 6
@


1.16
log
@Catch up to reality.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.15 2001/10/29 12:43:44 espie Exp $
d78 1
a78 1
.Ft void
d308 2
a309 2
The
.Fn pool_sethardlmit
d318 3
@


1.15
log
@Unconfuse.
ok art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.14 2001/10/04 16:56:52 mpech Exp $
d60 7
a66 4
.Fa "u_int pagesz"
.Fa "void *(*palloc)(unsigned long sz, int flags, int tag)"
.Fa "void (*prelease)(void *v, unsigned long sz, int tag)"
.Fa "int mtag"
d78 7
a84 1
.\" .Fn POOL_STORAGE_SIZE "size" "nitems"
d94 2
a95 1
The pool manager can optionally obtain temporary memory by calling the
d97 1
a97 1
function passed to
d109 1
a109 1
.Bl -tag -offset indent -width "prelease"
d131 1
a131 1
.It Fa wchan
a136 3
.It Fa pagesz
The unit which is used to allocate additional memory to the pool.
It must be a power of two.
d138 1
a138 10
is called to add additional memory if the pool is depleted.
It must return
.Fa pagesz
aligned memory.
The argument
.Fa sz
shall be a multiple of
.Fa pagesz .
.It Fa prelease
is called to release pages back to the system.
a139 2
and
.Fn prelease
d142 3
a144 1
in which case the pool manager uses
d149 1
a149 1
.Em kernel_map
d153 16
a168 3
.It Fa mtag
The memory tag passed to
.Fn palloc
d170 4
a173 8
.Fn prelease
when allocating or releasing memory pages.
.El
.\".Pp
.\"The macro
.\".Fn POOL_STORAGE_SIZE "size" "nitems"
.\"can be used to determine the amount of storage needed to setup a pool,
.\"given the size and number of the pool items.
d307 11
@


1.14
log
@we don't like .Pp and blank lines before/after .Ss;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.13 2001/08/21 18:27:12 krw Exp $
d59 1
a59 1
.Fa "char *wchan"
d122 1
a122 3
The
.Sq wait channel
passed on to
@


1.13
log
@Typo: 'a architecture' -> 'an architecture
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.12 2001/06/23 16:40:16 art Exp $
d164 1
a164 1
.Pp
@


1.12
log
@reflect reality.
Parts from NetBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.11 2001/05/28 05:37:28 angelos Exp $
d109 1
a109 1
the alignment defaults to a architecture-specific natural alignment.
@


1.11
log
@It's actually "up-front". Alphabetical order for references at the
end, and uncomment uvm(9).
@
text
@d1 2
a2 2
.\"	$OpenBSD: pool.9,v 1.10 2001/05/28 05:34:46 angelos Exp $
.\"	$NetBSD: pool.9,v 1.13 1999/04/03 14:50:21 msaitoh Exp $
d42 1
a42 1
.Nm pool_create ,
d52 3
a54 3
.Ft struct pool *
.\" too many arguments for a single .Fn
.Fo pool_create
d88 1
a88 1
.Fn pool_create ,
d95 2
a96 2
.Fn pool_create
initializes a resource pool and returns a handle to it.
d100 2
d134 1
a134 1
It returns
d139 1
a139 1
will be a multiple of
d155 1
a155 1
.Xr UVM 9
a162 4
.It Fa storage
Optional storage provided by the caller to use in lieu of
.Xr malloc 9
for both the pool handle and all pool items.
a164 12
If not enough memory is available to create the pool resource,
.Fn pool_create
returns
.Dv NULL .
If the
.Fa storage
parameter is used,
the client is responsible for providing enough storage
to accommodate the number of pool items specified by
.Fa nitems ,
as well as the space required by the pool's administrative overhead
.Pq i.e., the pool handle .
d235 4
a238 3
Storage space for the items is either allocated directly using
.Xr malloc 9
or given to
d240 3
a242 1
preallocated by the calling function.
d250 4
a253 7
Storage for the pool items can be passed in the
.Fa storage
argument.
If this parameter is
.Dv NULL ,
the items are allocated by using
.Xr malloc 9 .
a258 1
.El
d267 1
a267 1
.Sy watermarks.
@


1.10
log
@"upfront" is not an English word.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.9 2001/05/27 22:11:26 angelos Exp $
d315 1
a315 1
this function does not allocate the necessary memory up front.
d332 1
d334 1
a334 2
.Xr free 9
.\" .Xr uvm 9
@


1.9
log
@Fix "(seeUVM(9))"
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.8 2001/05/27 08:03:57 angelos Exp $
d315 1
a315 1
this function does not allocate the necessary memory upfront.
@


1.8
log
@"If both ... is specified ..." is not proper english.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.7 2001/03/26 05:37:52 aaron Exp $
d152 1
a152 1
.Po see
@


1.7
log
@Remove BUGS section since pool(9) will now work with old VM system.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.6 2001/03/01 16:11:25 aaron Exp $
d220 1
a220 1
is specified, and the pool has reached its hard limit,
@


1.6
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.5 2000/12/22 00:13:34 avsm Exp $
a334 2
.Sh BUGS
Pool will not work with old VM and is only used by UVM.
@


1.5
log
@more typo fixes; aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.4 2000/10/12 18:06:01 aaron Exp $
d107 1
a107 1
the alignment defaults to a architecture-specific natural aligment.
@


1.4
log
@General man page cleanups, mostly to remove trailing whitespace, hard
sentence breaks, and other such things.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.3 2000/04/26 21:21:38 mickey Exp $
d103 1
a103 1
Specifies the memory address aligment of the items returned by
@


1.3
log
@pool manipulation routines; second take
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d29 1
a29 1
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS 
d178 1
a178 1
.Pq i.e. the pool handle .
d217 1
a217 1
.Dv PR_LIMITFAIL 
d220 3
a222 3
is specified, and the pool has reached its hard limit, 
.Fn pool_get 
will return 
@


1.2
log
@REVERT TO PREVIOUS STATE OF AFFAIR.

If those pages are different from the NetBSD version, maybe there's a
reason ?

Like, possibly, I just read our source code, which just happens to do
things in DIFFERENT ways than NetBSD does ?

As far as the added pages go, they obviously haven't been checked against
actual code as well, hence they're worse than useless, since a large part
of the information is definitely misleading.
@
text
@d1 2
a2 2
.\"	$OpenBSD: pool.9,v 1.1 1999/09/22 03:16:47 csapuntz Exp $
.\"	$NetBSD: pool.9,v 1.14 1999/08/05 04:00:04 sommerfeld Exp $
a48 1
.\".Nm POOL_STORAGE_SIZE
d75 1
a75 1
.Fn POOL_STORAGE_SIZE "size" "nitems"
a327 2
.\" .Sh RETURN VALUES
.\" .Sh EXAMPLES
a330 1
.\" .Sh AUTHOR
d333 4
a336 2
.Xr free 9 ,
.Xr uvm 9
d338 5
a342 4
The
.Nx
pool manager appeared in
.Nx 1.4 .
@


1.1
log
@

Add/update some man9 pages from NetBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: pool.9,v 1.14 1999/08/05 04:00:04 sommerfeld Exp $
@

