head	1.44;
access;
symbols
	OPENBSD_6_2_BASE:1.44
	OPENBSD_6_1:1.44.0.4
	OPENBSD_6_1_BASE:1.44
	OPENBSD_6_0:1.43.0.2
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.42.0.2
	OPENBSD_5_9_BASE:1.42
	OPENBSD_5_8:1.40.0.4
	OPENBSD_5_8_BASE:1.40
	OPENBSD_5_7:1.38.0.2
	OPENBSD_5_7_BASE:1.38
	OPENBSD_5_6:1.37.0.6
	OPENBSD_5_6_BASE:1.37
	OPENBSD_5_5:1.37.0.4
	OPENBSD_5_5_BASE:1.37
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.31.0.8
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.6
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.4
	OPENBSD_5_0:1.31.0.2
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.29.0.8
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.6
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.4
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.28.0.4
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.2
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.25.0.2
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.23.0.6
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.4
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.2
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.22.0.8
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.6
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.4
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	OPENBSD_3_3:1.19.0.2
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.18.0.4
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@.\" @;


1.44
date	2016.09.22.12.55.24;	author mpi;	state Exp;
branches;
next	1.43;
commitid	yHpOPoIDV9B9PJbt;

1.43
date	2016.06.14.15.58.03;	author bluhm;	state Exp;
branches;
next	1.42;
commitid	CQEa6xVpTizjgoPL;

1.42
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.41;
commitid	GVTTSAMZ93Lz4hmE;

1.41
date	2015.09.14.15.14.55;	author schwarze;	state Exp;
branches;
next	1.40;
commitid	TPchOLbdlEugnrt2;

1.40
date	2015.06.11.16.04.55;	author mikeb;	state Exp;
branches;
next	1.39;
commitid	MOqBXhfMcP6tJwgR;

1.39
date	2015.03.18.11.53.38;	author dlg;	state Exp;
branches;
next	1.38;
commitid	4Fp26J25hrAO50fn;

1.38
date	2014.12.22.04.43.38;	author dlg;	state Exp;
branches;
next	1.37;
commitid	heMRN1DhgQwxUmkV;

1.37
date	2014.02.13.14.20.07;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2014.02.13.12.40.02;	author dlg;	state Exp;
branches;
next	1.35;

1.35
date	2014.02.13.12.38.20;	author dlg;	state Exp;
branches;
next	1.34;

1.34
date	2014.02.13.12.32.49;	author dlg;	state Exp;
branches;
next	1.33;

1.33
date	2013.11.27.04.28.32;	author dlg;	state Exp;
branches;
next	1.32;

1.32
date	2013.06.04.19.27.14;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2011.05.10.01.03.28;	author dlg;	state Exp;
branches;
next	1.30;

1.30
date	2011.05.09.22.08.25;	author dlg;	state Exp;
branches;
next	1.29;

1.29
date	2009.04.21.19.30.14;	author mk;	state Exp;
branches;
next	1.28;

1.28
date	2008.07.30.19.41.32;	author mk;	state Exp;
branches;
next	1.27;

1.27
date	2008.07.24.17.31.59;	author mk;	state Exp;
branches;
next	1.26;

1.26
date	2008.07.23.11.45.21;	author art;	state Exp;
branches;
next	1.25;

1.25
date	2007.09.14.16.16.08;	author mk;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.31.19.20.01;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2005.09.30.18.41.32;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2004.01.23.23.08.46;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.03.01.27.31;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2003.04.20.20.00.25;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2002.12.20.06.13.44;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.15.02.02.50;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2001.12.22.16.41.51;	author nordin;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.07.10.23.33;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.07.17.02.32.51;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2001.04.23.15.30.27;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.15.23.21.39;	author csapuntz;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.16.13.30.48;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.12.18.06.03;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.28.04.07.45;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.05.13.24.55;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.05.13.23.00;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.05.07.24.08;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.04.17.06.14;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.18.12.57.17;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.23.11.15.21;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.23.10.10.20;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.09.02.17.28.07;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.01.20.52.13;	author espie;	state Exp;
branches;
next	;


desc
@@


1.44
log
@Introduce a new 'softclock' thread that will be used to execute timeout
callbacks needing a process context.

The function timeout_set_proc(9) has to be used instead of timeout_set(9)
when a timeout callback needs a process context.

Note that if such a timeout is waiting, understand sleeping, for a non
negligible amount of time it might delay other timeouts needing a process
context.

dlg@@ agrees with this as a temporary solution.

Manpage tweaks from jmc@@

ok kettenis@@, bluhm@@, mikeb@@
@
text
@.\"	$OpenBSD: timeout.9,v 1.43 2016/06/14 15:58:03 bluhm Exp $
.\"
.\" Copyright (c) 2000 Artur Grabowski <art@@openbsd.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 14 2016 $
.Dt TIMEOUT_SET 9
.Os
.Sh NAME
.Nm timeout_set ,
.Nm timeout_set_proc ,
.Nm timeout_add ,
.Nm timeout_add_sec ,
.Nm timeout_add_msec ,
.Nm timeout_add_nsec ,
.Nm timeout_add_usec ,
.Nm timeout_add_tv ,
.Nm timeout_add_ts ,
.Nm timeout_add_bt ,
.Nm timeout_del ,
.Nm timeout_pending ,
.Nm timeout_initialized ,
.Nm timeout_triggered ,
.Nm TIMEOUT_INITIALIZER
.Nd execute a function after a specified period of time
.Sh SYNOPSIS
.In sys/types.h
.In sys/timeout.h
.Ft void
.Fn timeout_set "struct timeout *to" "void (*fn)(void *)" "void *arg"
.Ft void
.Fn timeout_set_proc "struct timeout *to" "void (*fn)(void *)" "void *arg"
.Ft int
.Fn timeout_add "struct timeout *to" "int ticks"
.Ft int
.Fn timeout_del "struct timeout *to"
.Ft int
.Fn timeout_pending "struct timeout *to"
.Ft int
.Fn timeout_initialized "struct timeout *to"
.Ft int
.Fn timeout_triggered "struct timeout *to"
.Ft int
.Fn timeout_add_tv "struct timeout *to" "struct timeval *"
.Ft int
.Fn timeout_add_ts "struct timeout *to" "struct timespec *"
.Ft int
.Fn timeout_add_bt "struct timeout *to" "struct bintime *"
.Ft int
.Fn timeout_add_sec "struct timeout *to" "int sec"
.Ft int
.Fn timeout_add_msec "struct timeout *to" "int msec"
.Ft int
.Fn timeout_add_usec "struct timeout *to" "int usec"
.Ft int
.Fn timeout_add_nsec "struct timeout *to" "int nsec"
.Fn TIMEOUT_INITIALIZER "void (*fn)(void *)" "void *arg"
.Sh DESCRIPTION
The
.Nm timeout
API provides a mechanism to execute a function at a given time.
The granularity of the time is limited by the granularity of the
.Xr hardclock 9
timer which executes
.Xr hz 9
times a second.
.Pp
It is the responsibility of the caller to provide these functions with
pre-allocated timeout structures.
.Pp
The functions
.Fn timeout_set
and
.Fn timeout_set_proc
prepare the timeout structure
.Fa to
to be used in future calls to
.Fn timeout_add
and
.Fn timeout_del .
The timeout will be prepared to call the function specified by the
.Fa fn
argument with a
.Fa void *
argument given in the
.Fa arg
argument.
Once initialized, the
.Fa to
structure can be used repeatedly in
.Fn timeout_add
and
.Fn timeout_del
and does not need to be reinitialized unless
the function called and/or its argument must change.
.Pp
The function
.Fn timeout_add
schedules the execution of the
.Fa to
timeout in at least
.Fa ticks Ns /hz
seconds.
Negative values of
.Fa ticks
are illegal.
If the value is
.Sq 0
it will, in the current implementation, be treated as
.Sq 1 ,
but in the future it might cause an immediate timeout.
The timeout in the
.Fa to
argument must be already initialized by
.Fn timeout_set
or
.Fn timeout_set_proc
and may not be used in calls to
.Fn timeout_set
or
.Fn timeout_set_proc
until it has timed out or been removed with
.Fn timeout_del .
If the timeout in the
.Fa to
argument is already scheduled, the old execution time will be
replaced by the new one.
.Pp
The function
.Fn timeout_del
will cancel the timeout in the argument
.Fa to .
If the timeout has already executed or has never been added
the call will have no effect.
.Pp
The
.Fn timeout_pending
macro can be used to check if a timeout is scheduled to run.
.Pp
The
.Fn timeout_initialized
macro can be used to check if a timeout has been initialized.
.Pp
The
.Fn timeout_triggered
macro can be used to check if a timeout is running or has been run.
The
.Fn timeout_add
and
.Fn timeout_del
functions clear the triggered state for that timeout.
.Pp
When possible, use the
.Fn timeout_add_tv ,
.Fn timeout_add_ts ,
.Fn timeout_add_bt ,
.Fn timeout_add_sec ,
.Fn timeout_add_msec ,
.Fn timeout_add_usec ,
and
.Fn timeout_add_nsec
functions instead of
.Fn timeout_add .
Those functions add a timeout whilst converting the time specified
by the respective types.
They also defer the timeout handler for at least one tick if called
with a positive value.
.Pp
A timeout declaration can be initialised with the
.Fn TIMEOUT_INITIALIZER
macro.
The timeout will be prepared to call the function specified by the
.Fa fn
argument with the
.Fa void *
argument given in
.Fa arg .
.Sh CONTEXT
.Fn timeout_set
and
.Fn timeout_set_proc
can be called during autoconf, from process context, or from interrupt
context.
.Pp
.Fn timeout_add ,
.Fn timeout_add_sec ,
.Fn timeout_add_msec ,
.Fn timeout_add_nsec ,
.Fn timeout_add_usec ,
.Fn timeout_add_tv ,
.Fn timeout_add_ts ,
.Fn timeout_add_bt ,
.Fn timeout_del ,
.Fn timeout_pending ,
.Fn timeout_initialized ,
.Fn timeout_triggered
can be called during autoconf, from process context, or from any
interrupt context at or below
.Dv IPL_CLOCK .
.Pp
When the timeout runs, the
.Fa fn
argument to
.Fn timeout_set
or
.Fn timeout_set_proc
will be called in an interrupt context at
.Dv IPL_SOFTCLOCK
or a process context, respectively.
.Sh RETURN VALUES
.Fn timeout_add ,
.Fn timeout_add_sec ,
.Fn timeout_add_msec ,
.Fn timeout_add_nsec ,
.Fn timeout_add_usec ,
.Fn timeout_add_tv ,
.Fn timeout_add_ts ,
and
.Fn timeout_add_bt
will return 1 if the timeout
.Fa to
was added to the timeout schedule or 0 if it was already queued.
.Pp
.Fn timeout_del
will return 1 if the timeout
.Fa to
was removed from the pending timeout schedule or 0 if it was not
currently queued.
.Sh CODE REFERENCES
These functions are implemented in the file
.Pa sys/kern/kern_timeout.c .
.Sh SEE ALSO
.Xr hz 9 ,
.Xr splclock 9 ,
.Xr tsleep 9 ,
.Xr tvtohz 9
@


1.43
log
@Prevent a round to zero in the timeout_add_...() functions.  Getting
an immediate timeout if a positive value is specified is unexpected
behavior.  Defer calling the handler for at least one tick.  Do not
change that timeout_add(0) gives you an immediate timeout.
OK millert@@ uebayasi@@ tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.42 2015/11/23 17:53:57 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: November 23 2015 $
d31 1
d51 2
d91 1
a91 1
The function
d93 3
a95 1
prepares the timeout structure
d136 2
d140 2
d200 2
d225 2
d228 2
a229 1
.Dv IPL_SOFTCLOCK .
@


1.42
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.41 2015/09/14 15:14:55 schwarze Exp $
d26 1
a26 1
.Dd $Mdocdate: September 14 2015 $
d177 2
@


1.41
log
@Remove useless quoting from .Fo and .Fn function names, to prevent
development of a cargo cult in case people look at existing files
for examples.  This achieves a consistent .Fo and .Fn quoting style
across the whole tree.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.40 2015/06/11 16:04:55 mikeb Exp $
d26 2
a27 2
.Dd $Mdocdate: June 11 2015 $
.Dt TIMEOUT 9
@


1.40
log
@Remove hzto(9) manual pages and references;  OK dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.39 2015/03/18 11:53:38 dlg Exp $
d26 1
a26 1
.Dd $Mdocdate: March 18 2015 $
d49 1
a49 1
.Fn "timeout_set" "struct timeout *to" "void (*fn)(void *)" "void *arg"
d51 1
a51 1
.Fn "timeout_add" "struct timeout *to" "int ticks"
d53 1
a53 1
.Fn "timeout_del" "struct timeout *to"
d55 1
a55 1
.Fn "timeout_pending" "struct timeout *to"
d57 1
a57 1
.Fn "timeout_initialized" "struct timeout *to"
d59 1
a59 1
.Fn "timeout_triggered" "struct timeout *to"
d61 1
a61 1
.Fn "timeout_add_tv" "struct timeout *to" "struct timeval *"
d63 1
a63 1
.Fn "timeout_add_ts" "struct timeout *to" "struct timespec *"
d65 1
a65 1
.Fn "timeout_add_bt" "struct timeout *to" "struct bintime *"
d67 1
a67 1
.Fn "timeout_add_sec" "struct timeout *to" "int sec"
d69 1
a69 1
.Fn "timeout_add_msec" "struct timeout *to" "int msec"
d71 1
a71 1
.Fn "timeout_add_usec" "struct timeout *to" "int usec"
d73 2
a74 2
.Fn "timeout_add_nsec" "struct timeout *to" "int nsec"
.Fn "TIMEOUT_INITIALIZER" "void (*fn)(void *)" "void *arg"
@


1.39
log
@describe the context the callback runs at in the CONTEXT section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.38 2014/12/22 04:43:38 dlg Exp $
d26 1
a26 1
.Dd $Mdocdate: December 22 2014 $
a237 1
.Xr hzto 9 ,
@


1.38
log
@add TIMEOUT_INITIALIZER for initting timeout declaractions.

similar to TASK_INITIALIZER and all the queue _INITIALIZER things.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.37 2014/02/13 14:20:07 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: February 13 2014 $
a83 1
The function will be called at softclock interrupt level.
d207 7
@


1.37
log
@revery -r1.34's addition of spl(9) to SEE ALSO: we already have splclock(9)
in there, and they're one and the same page;
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.36 2014/02/13 12:40:02 dlg Exp $
d42 2
a43 1
.Nm timeout_triggered
d74 1
d178 10
@


1.36
log
@wrap long lines
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.35 2014/02/13 12:38:20 dlg Exp $
a220 1
.Xr spl 9 ,
@


1.35
log
@document the timeout_add and timeout_del return values in the RETURN VALUES
section.

im not sure what to do with the macros yet.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.34 2014/02/13 12:32:49 dlg Exp $
d178 2
a179 1
can be called during autoconf, from process context, or from interrupt context.
d193 2
a194 1
can be called during autoconf, from process context, or from any interrupt context at or below
d213 2
a214 1
was removed from the pending timeout schedule or 0 if it was not currently queued.
@


1.34
log
@document the contexts you can call this api from out into its own section
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.33 2013/11/27 04:28:32 dlg Exp $
d26 1
a26 1
.Dd $Mdocdate: November 27 2013 $
a133 3
If the timeout was not already scheduled by a previous call to
.Fn timeout_add
it will return 1, otherwise 0.
a144 3
If the timeout was actually removed by
.Fn timeout_del
it will return 1, otherwise 0.
d194 18
@


1.33
log
@make timeout_add and its wrappers return whether the timeout was scheduled
in this call by returning 1, or a previous call by returning 0. this makes
it easy to refcount the stuff we're scheduling a timeout for, and brings
the api in line with what task_add(9) provides.

ok mpi@@ matthew@@ mikeb@@ guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.32 2013/06/04 19:27:14 schwarze Exp $
d26 1
a26 1
.Dd $Mdocdate: June 4 2013 $
a85 2
All functions in this API may be used in interrupt context below
.Fn splclock .
d182 18
d206 1
@


1.32
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.31 2011/05/10 01:03:28 dlg Exp $
d26 1
a26 1
.Dd $Mdocdate: May 10 2011 $
d49 1
a49 1
.Ft void
d59 1
a59 1
.Ft void
d61 1
a61 1
.Ft void
d63 1
a63 1
.Ft void
d65 1
a65 1
.Ft void
d67 1
a67 1
.Ft void
d69 1
a69 1
.Ft void
d71 1
a71 1
.Ft void
d136 3
d152 1
a152 1
it will return 1.
@


1.31
log
@timeout_del now returns an int.

this could probably be explained a bit better :/
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.30 2011/05/09 22:08:25 dlg Exp $
d26 1
a26 1
.Dd $Mdocdate: May 9 2011 $
d45 2
a46 2
.Fd #include <sys/types.h>
.Fd #include <sys/timeout.h>
@


1.30
log
@the api that these timeouts replaced doesnt exist in our tree anymore, so
dont talk about it.

ok krw@@, millert@@, miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.29 2009/04/21 19:30:14 mk Exp $
d26 1
a26 1
.Dd $Mdocdate: April 21 2009 $
d51 1
a51 1
.Ft void
d147 3
@


1.29
log
@Document timeout_add_msec().

oga pointed out that it was undocumented, which caused me to find out
that I had this diff in my tree.

`fine' deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.28 2008/07/30 19:41:32 mk Exp $
d26 1
a26 1
.Dd $Mdocdate: July 30 2008 $
a87 5
.Pp
This API replaces the historic functions
.Fn timeout
and
.Fn untimeout .
@


1.28
log
@In the .Fn entries for timeout_add_usec/nsec, don't call the parameter
``sec''.  Instead, use usec/nsec.

Agreed with/no opposition from blambert.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.27 2008/07/24 17:31:59 mk Exp $
d26 1
a26 1
.Dd $Mdocdate: July 24 2008 $
d33 1
d68 2
d175 1
@


1.27
log
@Add timeout_add_sec() etc. to .Nm and, on jmc's request, tweak
some other stuff.

ok art jmc blambert
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.26 2008/07/23 11:45:21 art Exp $
d26 1
a26 1
.Dd $Mdocdate: July 23 2008 $
d67 1
a67 1
.Fn "timeout_add_usec" "struct timeout *to" "int sec"
d69 1
a69 1
.Fn "timeout_add_nsec" "struct timeout *to" "int sec"
@


1.26
log
@Document the new timeout_add_* functions.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.25 2007/09/14 16:16:08 mk Exp $
d26 1
a26 1
.Dd $Mdocdate: September 14 2007 $
d32 6
d167 1
a167 3
When possible, instead of using
.Fn timeout_add
the functions
d173 1
d175 4
a178 3
should be used.
Those functions add a timeout doing conversion of the time specified
by their respective types.
@


1.25
log
@sleep(9) was removed aeons ago according to miod, so remove references
to it.  Because man pages are named after functions (at least they
should be) and sleep(9) doesn't exist anymore, sleep.9 is renamed to
tsleep.9.

Input and reminders from jmc and ratchov.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.24 2007/05/31 19:20:01 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 31 2007 $
d52 12
d160 13
@


1.24
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.23 2005/09/30 18:41:32 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate$
a153 1
.Xr sleep 9 ,
d155 1
@


1.23
log
@add timeout_triggered to .Nm;

Note: i am not touching MLINK for untimeout(9), ugly though that word is,
since it seems to have a historical basis...
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.22 2004/01/23 23:08:46 jmc Exp $
d26 1
a26 1
.Dd June 23, 1996
@


1.22
log
@`Ns' implies `No', so `Ns No' -> `Ns'; (even simpler in adduser(8))
discussed with todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.21 2003/06/03 01:27:31 art Exp $
d34 2
a35 1
.Nm timeout_initialized
@


1.21
log
@license cleaning.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.20 2003/04/20 20:00:25 jmc Exp $
d101 1
a101 1
.Fa ticks Ns No /hz
@


1.20
log
@typos;

ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.19 2002/12/20 06:13:44 art Exp $
d12 1
a12 4
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
@


1.19
log
@Reword to get rid of second person.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.18 2002/02/15 02:02:50 art Exp $
d61 1
a61 1
.Nm hz
d92 1
a92 1
structure can be used in repeatedly in
d145 1
a145 1
The 
@


1.18
log
@Xr tvtohz.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.17 2001/12/22 16:41:51 nordin Exp $
d96 2
a97 2
and does not need to be reinitialized unless you wish to
change the function called and/or the argument to it.
@


1.17
log
@New scalable implementation with constant time add and delete. ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.16 2001/11/07 10:23:33 art Exp $
d157 2
a158 1
.Xr splclock 9
@


1.16
log
@The old timeout API is gone.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.15 2001/07/17 02:32:51 krw Exp $
a157 7
.Sh BUGS
The
.Fn timeout_add
function executes in linear time depending on the number of pending timeouts.
It will also block all interrupts while inserting the timeout
to the timeout queue.
Thus it is not recommended to use a large number of timeouts in the system.
@


1.15
log
@Change references to hardclock to .Xr where it seem appropriate
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.14 2001/04/23 15:30:27 aaron Exp $
a149 7
.Pp
The old
.Fn timeout
and
.Fn untimeout
interface is implemented as wrappers around the new API, but it's
obsolete and will be removed in the future.
@


1.14
log
@Various man page fixes and improvements from gluk@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.13 2001/03/15 23:21:39 csapuntz Exp $
d59 1
a59 1
.Nm hardclock
@


1.13
log
@Document timeout_triggered
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.12 2001/02/16 13:30:48 espie Exp $
d162 1
@


1.12
log
@Add function types.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.11 2000/10/12 18:06:03 aaron Exp $
d52 2
d141 9
@


1.11
log
@General man page cleanups, mostly to remove trailing whitespace, hard
sentence breaks, and other such things.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.10 2000/06/28 04:07:45 aaron Exp $
d42 1
d44 1
d46 1
d48 1
d50 1
@


1.10
log
@While I'm reading this, complete the NAME section and fix a typo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.9 2000/06/05 13:24:55 aaron Exp $
d4 1
a4 1
.\" All rights reserved. 
d6 3
a8 3
.\" Redistribution and use in source and binary forms, with or without 
.\" modification, are permitted provided that the following conditions 
.\" are met: 
d10 5
a14 5
.\" 1. Redistributions of source code must retain the above copyright 
.\"    notice, this list of conditions and the following disclaimer. 
.\" 2. Redistributions in binary form must reproduce the above copyright 
.\"    notice, this list of conditions and the following disclaimer in the 
.\"    documentation and/or other materials provided with the distribution. 
d16 1
a16 1
.\"    derived from this software without specific prior written permission. 
d27 1
a27 1
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
d101 2
a102 1
are illegal. If the value is
d151 4
a154 5
function executes in linear time depending on the number of pending
timeouts. It will also block all interrupts while inserting the timeout
to the timeout queue. Thus it is not recommended to use a large number
of timeouts in the system.

@


1.9
log
@Err, make it splclock(9), so it's more clear to the reader.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.8 2000/06/05 13:23:00 aaron Exp $
d35 3
a37 1
.Nm timeout_del
d70 1
a70 1
Prepares the timeout structure
d89 1
a89 1
and doesn't need to be reinitialized unless you wish to
@


1.8
log
@Xr spl(9)
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.7 2000/06/05 07:24:08 art Exp $
d144 1
a144 1
.Xr spl 9
@


1.7
log
@Various fixes.
From millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.6 2000/06/04 17:06:14 krw Exp $
d143 2
a144 1
.Xr sleep 9
@


1.6
log
@fix typo preapared -> prepared
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.5 2000/04/18 12:57:17 art Exp $
d56 3
a58 3
It's the caller responsibility to provide those functions with
pre-allocated timeout structures. All functions in this API may
be used in interrupt context below
d74 1
a74 1
The timeout will be prepared to call the function given in the
d91 2
a92 2
.Fn timeout_del
schedules an execution of the
d147 1
a147 1
function executes in linear speed depending on the number of pending
@


1.5
log
@Better explaination, various fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.4 2000/03/23 11:15:21 art Exp $
d74 1
a74 1
The timeout will be preapared to call the function given in the
@


1.4
log
@Document timeout_pending and timeout_initialized.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.3 2000/03/23 10:10:20 art Exp $
d36 1
a36 1
.Nd execute a function after a specified length of time
d46 21
a66 1
The finction
d102 2
a103 2
.Sq 1
, but in the future it might cause an immediate timeout.
d108 3
a110 2
and may not be used in calls to timeout_set until it has
timed out or been removed with
a130 6
.Pp
It's the caller responsibility to provide those functions with
the timeout structures. No functions in this API will do memory
allocation. All functions in this API may be called in interrupt
context below
.Fn splclock .
@


1.3
log
@Document the new timeout API.
@
text
@d1 1
a1 1
.\"	$OpenBSD: timeout.9,v 1.2 1999/09/02 17:28:07 espie Exp $
d43 2
d102 8
@


1.2
log
@Minor fusses: OpenBSD tag, misused macros, codes references path.
@
text
@d1 1
a1 2
.\"	$OpenBSD$
.\"	$NetBSD: timeout.9,v 1.7 1999/03/16 00:40:48 garbled Exp $
d3 2
a4 2
.\" Copyright (c) 1996 The NetBSD Foundation, Inc.
.\" All rights reserved.
d6 3
a8 2
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Paul Kranenburg.
d10 7
a16 15
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d18 10
a27 11
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
d33 3
a35 2
.Nm timeout ,
.Nm untimeout
d39 4
a42 5
.Fd #include <sys/systm.h>
.Ft void
.Fn "timeout" "void (*ftn)(void *)" "void *arg" "int ticks"
.Ft void
.Fn "untimeout" "void (*ftn)(void *)" "void *arg"
d44 24
d69 4
a72 4
.Fn timeout
schedules a call to the function given by the argument
.Fa ftn
to take place after
d75 1
a75 1
Non-positive values of
d77 16
a92 8
are silently converted to the value
.Sq 1 .
.Fa ftn
should be a pointer to a function that takes a
.Fa void *
argument, to which the argument
.Fa arg
will be passed.
d95 15
d111 2
a112 10
cancels the first scheduled call
.Pq i.e. the one with the shortest delay left
that matches the
.Aq Fa ftn , Ns Fa arg
pair.
If a match can not be found in the callout queue, nothing happens.
.Pp
The callout queue is statically sized, dependent on the
.Va MAXUSERS
parameter.
d115 1
a115 1
.Pa sys/kern/kern_clock.c .
d120 7
a126 2
.Fn untimeout
should probably remove all matches from the queue.
@


1.1
log
@Import some documentation from NetBSD, after checking that details match.

hz.9 and hzto.9 from scratch
@
text
@d1 1
@

