head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.4
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.16
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.18
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.10
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.14
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.12
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.8
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.8
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.6
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4;
locks; strict;
comment	@.\" @;


1.13
date	2016.06.19.16.06.18;	author jmc;	state Exp;
branches;
next	1.12;
commitid	1HM7nflGRysIBHiT;

1.12
date	2016.06.19.11.54.33;	author natano;	state Exp;
branches;
next	1.11;
commitid	wHLNY5GFNXJSFYaC;

1.11
date	2011.09.03.22.59.07;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.21.07.54.33;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.18.18.26.34;	author blambert;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.31.19.20.01;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.05.12.57.06;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.04.19.08.33;	author pedro;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.02.15.42.12;	author jaredy;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.31.22.59.29;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.28.00.58.48;	author marius;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.27.22.31.47;	author marius;	state Exp;
branches;
next	;


desc
@@


1.13
log
@no more lock(9);
@
text
@.\"     $OpenBSD: vnsubr.9,v 1.12 2016/06/19 11:54:33 natano Exp $
.\"     $NetBSD: vnsubr.9,v 1.21 2004/05/25 14:54:56 hannken Exp $
.\"
.\" Copyright (c) 2001 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Gregory McGarry.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 19 2016 $
.Dt VNSUBR 9
.Os
.Sh NAME
.Nm vnsubr ,
.Nm vn_close ,
.Nm vn_default_error ,
.Nm vn_isunder ,
.Nm vn_lock ,
.Nm vn_marktext ,
.Nm vn_rdwr ,
.Nm vn_open ,
.Nm vn_stat ,
.Nm vn_writechk
.Nd high-level convenience functions for vnode operations
.Sh SYNOPSIS
.In sys/param.h
.In sys/lock.h
.In sys/vnode.h
.Ft int
.Fn vn_close "struct vnode *vp" "int flags" "struct ucred *cred" "struct proc *p"
.Ft int
.Fn vn_default_error "void *v"
.Ft int
.Fn vn_isunder "struct vnode *dvp" "struct vnode *rvp" "struct proc *p"
.Ft int
.Fn vn_lock "struct vnode *vp" "int flags" "struct proc *p"
.Ft void
.Fn vn_marktext "struct vnode *vp"
.Ft int
.Fn vn_open "struct nameidata *ndp" "int fmode" "int cmode"
.Ft int
.Fo vn_rdwr
.Fa "enum uio_rw rw" "struct vnode *vp" "caddr_t base"
.Fa "int len" "off_t offset" "enum uio_seg segflg" "int ioflg"
.Fa "struct ucred *cred" "size_t *aresid" "struct proc *p"
.Fc
.Ft int
.Fn vn_stat "struct vnode *vp" "struct stat *sb" "struct proc *p"
.Ft int
.Fn vn_writechk "struct vnode *vp"
.Sh DESCRIPTION
The high-level functions described in this page are convenience
functions for simplified access to the vnode operations described in
.Xr VOP_LOOKUP 9 .
.Bl -tag -width Ds
.It Fn vn_close "vp" "flags" "cred" "p"
Common code for a vnode close.
The argument
.Fa vp
is the unlocked vnode of the vnode to close.
.Fn vn_close
simply locks the vnode, invokes the vnode operation
.Fn VOP_CLOSE
and calls
.Xr vput 9
to return the vnode to the freelist or holdlist.
Note that
.Fn vn_close
expects an unlocked, referenced vnode and will dereference the vnode
prior to returning.
If the operation is successful, zero is returned;
otherwise an appropriate error is returned.
.It Fn vn_default_error "v"
A generic "default" routine that just returns error.
It is used by a file system to specify unsupported operations in
the vnode operations vector.
.It Fn vn_isunder "dvp" "rvp" "p"
Common code to check if one directory specified by the vnode
.Fa rvp
can be found inside the directory specified by the vnode
.Fa dvp .
The argument
.Fa p
is the calling process.
.Fn vn_isunder
is intended to be used in
.Xr chroot 2 ,
.Xr chdir 2 ,
.Xr fchdir 2 ,
etc., to ensure that
.Xr chroot 2
actually means something.
If the operation is successful, zero is returned; otherwise 1 is returned.
.It Fn vn_lock "vp" "flags" "p"
Acquire the vnode lock.
Certain file system operations require that
the vnode lock be held when they are called.
.Pp
The
.Fn vn_lock
function must not be called when the vnode's reference count is
zero.
Instead, the
.Xr vget 9
function should be used.
.Pp
In addition to the
.Fa flags
accepted by
.Xr VOP_LOCK 9 ,
the
.Dv LK_RETRY
flag may be used.
.Dv LK_RETRY
causes
.Fn vn_lock
to return the vnode even if it has been reclaimed.
It must not be used with
.Dv LK_NOWAIT .
.Pp
The
.Fn vn_lock
function can sleep.
.It Fn vn_marktext "vp"
Common code to mark the vnode
.Fa vp
as being the text of a running process.
.It Fn vn_open "ndp" "fmode" "cmode"
Common code for vnode open operations.
The pathname is described in the
.Vt nameidata
pointer (see
.Xr namei 9 ) .
The arguments
.Fa fmode
and
.Fa cmode
specify the
.Xr open 2
file mode and the access permissions for creation.
.Fn vn_open
checks permissions and invokes the
.Xr VOP_OPEN 9
or
.Xr VOP_CREATE 9
vnode operations.
If the operation is successful, zero is returned;
otherwise an appropriate error code is returned.
.It Xo
.Fo vn_rdwr
.Fa "rw" "vp" "base" "len" "offset"
.Fa "segflg" "ioflg" "cred" "aresid" "p"
.Fc
.Xc
Common code to package up an I/O request on a vnode into a
.Vt uio
and then perform the I/O.
The argument
.Fa rw
specifies whether the I/O is a read
.Pq Dv UIO_READ
or write
.Pq Dv UIO_WRITE
operation.
The unlocked vnode is specified by
.Fa vp .
The arguments
.Fa p
and
.Fa cred
are the calling process and its credentials.
The remaining arguments specify the
.Vt uio
parameters.
For further information on these parameters, see
.Xr uiomove 9 .
.It Fn vn_stat "vp" "sb" "p"
Common code for a vnode stat operation.
The vnode is specified by the argument
.Fa vp ,
and
.Fa sb
is the buffer in which to store the stat information.
The argument
.Fa p
is the calling process.
.Fn vn_stat
basically calls the vnode operation
.Xr VOP_GETATTR 9
and transfers the contents of a
.Vt vattr
structure into a
.Vt struct stat .
If the operation is successful, zero is returned; otherwise an
appropriate error code is returned.
.It Fn vn_writechk "vp"
Common code to check for write permission on the vnode
.Fa vp .
A vnode is read-only if it is in use as a process's text image.
If the vnode is read-only,
.Er ETXTBSY
is returned; otherwise zero is
returned to indicate that the vnode can be written to.
.El
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er ETXTBSY
Cannot write to a vnode since it is a process's text image.
.It Bq Er ENOENT
The vnode has been reclaimed and is dead.
This error is only returned if the
.Dv LK_RETRY
flag is not passed to
.Fn vn_lock .
.It Bq Er EBUSY
The
.Dv LK_NOWAIT
flag was set and
.Fn vn_lock
would have slept.
.El
.Sh CODE REFERENCES
This section describes places within the
.Ox
source tree where actual code implementing or using the vnode
framework can be found.
All pathnames are relative to
.Pa /usr/src .
.Pp
The high-level convenience functions are implemented within the files
.Pa sys/kern/vfs_vnops.c
and
.Pa sys/sys/vnode.h .
.Sh SEE ALSO
.Xr file 9 ,
.Xr namei 9 ,
.Xr vfs 9 ,
.Xr vnode 9 ,
.Xr VOP_LOOKUP 9
.Sh BUGS
The locking discipline is bizarre.
Many vnode operations are passed locked vnodes on entry but release
the lock before they exit.
Discussions with Kirk McKusick indicate that locking
discipline evolved out of the pre-VFS way of doing inode locking.
In addition, the current locking discipline may actually save
lines of code, especially if the number of file systems is fewer
than the number of call sites.
However, the VFS interface would
require less wizardry if the locking discipline were simpler.
.Pp
The locking discipline is used in some places to attempt to make a
series of operations atomic (e.g., permissions check +
operation).
This does not work for non-local file systems that do not
support locking (e.g., NFS).
.Pp
Are vnode locks even necessary?
The security checks can be moved into the individual file systems.
Each file system can have the responsibility of ensuring that vnode
operations are suitably atomic.
.Pp
The
.Dv LK_NOWAIT
flag does prevent the caller from sleeping.
.Pp
The locking discipline as it relates to shared locks has yet to be defined.
@


1.12
log
@Remove the lockmgr() API. It is only used by filesystems, where it is a
trivial change to use rrw locks instead. All it needs is LK_* defines
for the RW_* flags.

tested by naddy and sthen on package building infrastructure
input and ok jmc mpi tedu
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.11 2011/09/03 22:59:07 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 3 2011 $
a256 1
.Xr lock 9 ,
@


1.11
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.10 2011/07/21 07:54:33 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: July 21 2011 $
d128 1
a128 1
The
d130 11
a140 15
argument may contain the following flags:
.Pp
.Bl -tag -width LK_EXCLUSIVE -offset indent -compact
.It Dv LK_RETRY
Return the vnode even if it has been reclaimed.
.It Dv LK_NOWAIT
Don't wait if the vnode lock is held by someone else
(may still wait on reclamation lock).
Must not be used with
.Dv LK_RETRY .
.It Dv LK_EXCLUSIVE
Acquire an exclusive lock.
.It Dv LK_SHARED
Acquire a shared lock.
.El
@


1.10
log
@no more vnode_if.src;
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.9 2009/03/18 18:26:34 blambert Exp $
d31 1
a31 1
.Dd $Mdocdate: March 18 2009 $
d131 3
a133 2
.Bl -column LK_INTERLOCK -offset indent
.It Dv LK_RETRY Ta
d135 3
a137 3
.It Dv LK_NOWAIT Ta
Don't wait if the vnode lock is held by someone else (may still
wait on reclamation lock).
d140 1
a140 1
.It Dv LK_EXCLUSIVE Ta
d142 1
a142 1
.It Dv LK_SHARED Ta
@


1.9
log
@Remove man page mentions of the vnode interlock, which is long dead.

ok jmc@@ thib@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.8 2008/06/26 05:42:08 ray Exp $
d31 1
a31 1
.Dd $Mdocdate: June 26 2008 $
a118 3
See
.Pa sys/kern/vnode_if.src
for more details.
@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.7 2007/05/31 19:20:01 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
a136 2
.It Dv LK_INTERLOCK Ta
Must be set if the caller owns the vnode interlock.
d139 1
a139 1
wait on reclamation lock or on interlock).
a150 2
.Fn vn_lock
releases the vnode interlock before exit.
@


1.7
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.6 2007/05/05 12:57:06 art Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d31 1
a31 1
.Dd $Mdocdate$
@


1.6
log
@No more vn_access.
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.5 2005/12/04 19:08:33 pedro Exp $
d38 1
a38 1
.Dd May 25, 2004
@


1.5
log
@Document vn_access(), okay jmc@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.4 2005/06/02 15:42:12 jaredy Exp $
a42 1
.Nm vn_access ,
a57 2
.Fn vn_access "struct vnode *vp" "int mode"
.Ft int
a83 7
.It Fn vn_access "vp" "mode"
Common code for checking if the current process has enough permissions
to access the vnode pointed to by
.Fa vp
with mode
.Fa mode .
The vnode should be passed unlocked, and remains unlocked upon return.
@


1.4
log
@tweaks, grammar, punctuation, typos

ok jmc
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.3 2005/05/31 22:59:29 jmc Exp $
d43 1
d59 2
d87 7
@


1.3
log
@minor tweaks;
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.2 2005/05/28 00:58:48 marius Exp $
d51 1
a51 1
.Nm vn_writechk ,
d93 1
a93 1
.Fn vput
d99 1
a99 1
If the operation is successful zero is returned,
d121 1
a121 1
If the operation is successful zero is returned, otherwise 1 is returned.
d135 1
a135 1
.Fn vget
d148 1
a148 1
wait on reclamation lock on or interlock).
a159 1
The
d168 3
a170 1
The pathname is described in the nameidata pointer (see
d180 2
a181 2
checks  permissions and invokes the
.Fn VOP_OPEN
d185 1
a185 1
If the operation is successful zero is returned,
d187 4
a190 3
.It Xo Fo vn_rdwr "enum uio_rw rw" "struct vnode *vp" "caddr_t base"
.Fa "int len" "off_t offset" "enum uio_seg segflg" "int ioflg"
.Fa "struct ucred *cred" "size_t *aresid" "struct proc *p"
d193 3
a195 2
Common code to package up an I/O request on a vnode into a uio and
then perform the I/O.
d198 4
a201 1
specifies whether the I/O is a read (UIO_READ) or write (UIO_WRITE)
d210 4
a213 2
The remaining arguments specify the uio parameters.
For further information on these parameters see
d221 1
a221 1
is the buffer to return the stat information.
d227 6
a232 3
.Fn VOP_GETATTR
and transfers the contents of a vattr structure into a struct stat.
If the operation is successful zero is returned, otherwise an
d238 3
a240 1
If the vnode is read-only ETEXTBSY is returned, otherwise zero is
d246 1
a246 1
Cannot write to a vnode since is a process's text image.
d249 3
a251 1
This error is only returned if the LK_RETRY flag is not passed to
d254 3
a256 1
The LK_NOWAIT flag was set and
a273 1
.Xr intro 9 ,
@


1.2
log
@fixups due to the careful eyes of pedro@@

ok pedro@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: vnsubr.9,v 1.1 2005/05/27 22:31:47 marius Exp $
d82 2
a83 3
.Xr vnodeops 9 .
.Sh FUNCTIONS
.Bl -tag -width Ds -compact
d91 1
a91 1
.Xr VOP_CLOSE 9
d123 2
a124 1
Acquire the vnode lock.  Certain file system operations require that
d180 1
a180 1
.Xr VOP_OPEN 9
d210 1
a210 1
.Fa vp
d219 2
a220 2
.Xr VOP_GETATTR 9
and transfer the contents of a vattr structure into a struct stat.
d245 1
a245 1
.Nx
d270 1
a270 1
lines of code, esp. if the number of file systems is fewer
@


1.1
log
@add vnsubr(9) from NetBSD.  add the more detailed vn_lock(9) text to it
and remove vn_lock.

ok tedu@@
@
text
@d1 1
a1 1
.\"     $OpenBSD$
d64 1
a64 1
.Fn vn_lock "struct vnode *vp" "int flags"
a75 2
.Fn vn_readdir "struct file *fp" "char *buf" "int segflg" "u_int count" "int *done" "struct proc *p" "off_t **cookies" "int *ncookies"
.Ft int
d123 1
a123 1
.It Fn vn_lock "vp" "flags"
d163 4
a206 25
.It Xo Fo vn_readdir "struct file *fp" "char *buf" "int segflg" 
.Fa "u_int count" "int *done" "struct proc *p" 
.Fa "off_t **cookies" "int *ncookies"
.Fc
.Xc
Common code for reading the contents of a directory.
The argument
.Fa fp
is the file structure,
.Fa buf
is the buffer for placing the struct dirent structures.
The arguments
.Fa cookies
and
.Fa ncookies
specify the addresses for the list and number of directory seek
cookies generated for NFS.
Both
.Fa cookies
and
.Fa ncookies
should be NULL is they aren't required to be returned by
.Fn vn_readdir .
If the operation is successful zero is returned, otherwise an
appropriate error code is returned.
a241 4
.It Fn vn_marktext "vp"
Common code to mark the vnode
.Fa vp
as being the text of a running process.
@

