head	1.24;
access;
symbols
	OPENBSD_5_9:1.23.0.4
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.20.0.6
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.16
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.14
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.12
	OPENBSD_5_0:1.19.0.10
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.8
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.6
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.17.0.4
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.2
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2;
locks; strict;
comment	@.\" @;


1.24
date	2016.06.19.11.54.33;	author natano;	state dead;
branches;
next	1.23;
commitid	wHLNY5GFNXJSFYaC;

1.23
date	2015.01.11.19.34.52;	author guenther;	state Exp;
branches;
next	1.22;
commitid	mYYjUBRhGJS1wXIo;

1.22
date	2014.07.09.14.16.10;	author guenther;	state Exp;
branches;
next	1.21;
commitid	hAMeGvfNXfwKQfLZ;

1.21
date	2014.04.03.03.57.42;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2013.06.04.19.27.08;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.25.21.20.50;	author oga;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.25.01.50.50;	author oga;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.12.16.25.59;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.11.12.06.34;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2007.02.03.16.58.30;	author pedro;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.19.09.33.58;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.19.02.18.00;	author pedro;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.20.15.14.05;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.18.18.00.22;	author pedro;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.31.15.08.20;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.18.09.57.53;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.07.06.21.37;	author david;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.25.08.51.31;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.24.00.44.36;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.08.08.08.47;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.12.13.22.08;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.12.02.38.48;	author provos;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Remove the lockmgr() API. It is only used by filesystems, where it is a
trivial change to use rrw locks instead. All it needs is LK_* defines
for the RW_* flags.

tested by naddy and sthen on package building infrastructure
input and ok jmc mpi tedu
@
text
@.\"     $OpenBSD: lock.9,v 1.23 2015/01/11 19:34:52 guenther Exp $
.\"     $NetBSD: lock.9,v 1.12 2001/11/01 01:13:43 wiz Exp $
.\"
.\" Copyright (c) 2000 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: January 11 2015 $
.Dt LOCK 9
.Os
.Sh NAME
.Nm lock ,
.Nm lockinit ,
.Nm lockmgr ,
.Nm lockstatus
.Nd kernel lock functions
.Sh SYNOPSIS
.In sys/lock.h
.Ft void
.Fn lockinit "struct lock *lock" "int prio" "const char *wmesg" \
"int timo" "int flags"
.Ft int
.Fn lockmgr "struct lock *lock" "u_int flags" "struct simplelock *slock"
.Ft int
.Fn lockstatus "struct lock *lock"
.Sh DESCRIPTION
The
.Nm
functions provide synchronisation in the kernel by preventing multiple
processes from simultaneously executing critical sections of code
accessing shared data.
.Pp
struct lock supports sleeping until the lock can be acquired.
The lock manager supplies both exclusive-access and
shared-access locks, with recursive exclusive-access locks within a
single process.
It also allows upgrading a shared-access lock to an
exclusive-access lock, as well as downgrading an exclusive-access lock
to a shared-access lock.
.Sh FUNCTIONS
The functions which operate on locks are:
.Bl -tag -width Ds
.It Fn lockinit "lock" "prio" "wmesg" "timo" "flags"
The lock
.Fa lock
is initialised according to the parameters provided.
Arguments are as follows:
.Pp
.Bl -tag -width Ds -compact
.It Fa lock
The lock.
.It Fa prio
The process priority when it is woken up after sleeping on the lock.
.It Fa wmesg
A sleep message used when a process goes to sleep waiting for the lock, so
that the exact reason it is sleeping can easily be identified.
.It Fa timo
The maximum sleep time.
Used by
.Xr tsleep 9 .
.It Fa flags
Flags to specify the lock behaviour permanently over the lifetime of
the lock.
Valid lock flags are:
.Pp
.Bl -tag -width "LK_CANRECURSEXX" -compact
.It LK_NOWAIT
Processes should not sleep when attempting to acquire the lock.
.It LK_CANRECURSE
Processes can acquire the lock recursively.
.El
.El
.It Fn lockmgr "lock" "flags" "slock"
Set, change or release a lock according to the parameters provided.
Arguments are as follows:
.Pp
.Bl -tag -width Ds -compact
.It Fa lock
The lock.
.It Fa flags
Flags to specify the lock request type.
In addition to the flags specified above, the following flags are valid:
.Bl -tag -width Ds
.It LK_SHARED
Get one of many possible shared-access locks.
If a process holding an exclusive-access lock requests a shared-access lock,
the exclusive-access lock is downgraded to a shared-access lock.
.It LK_EXCLUSIVE
Stop further shared-access locks, when they are cleared, grant a
pending upgrade if it exists, then grant an exclusive-access lock.
Only one exclusive-access lock may exist at a time, except that a
process holding an exclusive-access lock may get additional
exclusive-access locks if it explicitly sets the LK_CANRECURSE flag in
the lock request, or if the LK_CANRECURSE flag was set when the lock
was initialised.
.It LK_RELEASE
Release one instance of a lock.
.It LK_DRAIN
Wait for all activity on the lock to end, then mark it decommissioned.
This feature is used before freeing a lock that is part of a piece of
memory that is about to be freed.
.It LK_RECURSEFAIL
Attempt at recursive lock fails.
.El
.Pp
.It Fa slock
This argument exists for legacy reasons, it is now ignored.
.El
.It Fn lockstatus "lock"
Returns the current state of lock
.Fa lock .
.Pp
.Bl -tag -width "LK_EXCLUSIVE" -offset indent -compact
.It Dv LK_EXCLUSIVE
Lock is locked for exclusive-access by the calling thread.
.It Dv LK_EXCLOTHER
Lock is locked for exclusive-access by a different thread.
.It Dv LK_SHARED
Lock is locked for shared-access.
The current thread may be one of the threads that has it locked.
.It 0
Lock is not locked.
.El
.El
.Sh RETURN VALUES
Successfully acquired locks return 0.
A failed lock attempt always returns a non-zero error value.
No lock is held after an error return.
Locks will always succeed unless one of the following is true:
.Bl -tag -width Er
.It Bq Er EBUSY
LK_NOWAIT is set and a sleep would be required.
.It Bq Er EINTR
PCATCH is set in lock priority and a signal arrives to interrupt
a system call.
.It Bq Er ERESTART
PCATCH is set in lock priority and a signal arrives so that
the system call is restarted.
.It Bq Er EWOULDBLOCK
Non-null lock timeout and timeout expires.
.El
.Sh SEE ALSO
.Xr mutex 9 ,
.Xr pmap 9 ,
.Xr rwlock 9 ,
.Xr spl 9 ,
.Xr tsleep 9 ,
.Xr uvm 9
.Sh HISTORY
The kernel locking API first appeared in
.Bx 4.4 lite2 .
It was progressively deprecated in favor of
.Xr rwlock 9 .
@


1.23
log
@LOCKDEBUG is dead; perform the funeral rites

pointed out by Helg (xx404 (at) msn.com)
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.22 2014/07/09 14:16:10 guenther Exp $
d28 1
a28 1
.Dd $Mdocdate: July 9 2014 $
@


1.22
log
@Rewrite lockstatus() description to be more like rw_status()
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.21 2014/04/03 03:57:42 tedu Exp $
d28 1
a28 1
.Dd $Mdocdate: April 3 2014 $
a59 4
.Pp
If the kernel option LOCKDEBUG is enabled, additional facilities
are provided to record additional lock information.
These facilities are provided to assist in determining deadlock occurrences.
@


1.21
log
@lies lies lies lies lies
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.20 2013/06/04 19:27:08 schwarze Exp $
d28 1
a28 1
.Dd $Mdocdate: June 4 2013 $
d134 1
a134 1
Determine the status of lock
d136 12
a147 2
Returns LK_EXCLUSIVE or LK_SHARED for exclusive-access and
shared-access locks respectively.
@


1.20
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.19 2009/03/25 21:20:50 oga Exp $
d28 1
a28 1
.Dd $Mdocdate: March 25 2009 $
a32 4
.Nm simple_lock_init ,
.Nm simple_lock ,
.Nm simple_lock_try ,
.Nm simple_unlock ,
d35 1
a35 2
.Nm lockstatus ,
.Nm lockmgr_printinfo ,
a39 8
.Fn simple_lock_init "struct simplelock *slock"
.Ft void
.Fn simple_lock "struct simplelock *slock"
.Ft int
.Fn simple_lock_try "struct simplelock *slock"
.Ft void
.Fn simple_unlock "struct simplelock *slock"
.Ft void
a45 2
.Ft void
.Fn lockmgr_printinfo "struct lock *lock"
d52 2
a53 20
A number of different locks are available:
.Bl -tag -width Ds
.It struct simplelock
Provides a simple spinning mutex.
A processor will busy-wait while trying to acquire a simplelock.
The simplelock operations are
implemented with machine-dependent locking primitives.
.Pp
Simplelocks are usually used only by the high-level lock manager and
to protect short, critical sections of code.
Simplelocks are the only
locks that can be used inside an interrupt handler.
For a simplelock to be used in an interrupt handler, care must be taken to
disable the interrupt, acquire the lock, do any processing, release
the simplelock and re-enable the interrupt.
This procedure is necessary to avoid deadlock between the interrupt handler
and other processes executing on the same processor.
.It struct lock
Provides a high-level lock supporting sleeping/spinning until the lock
can be acquired.
a59 1
.El
a64 33
The functions which operate on simplelocks are:
.Bl -tag -width Ds
.It Fn simple_lock_init "slock"
The simplelock
.Fa slock
is initialised to the unlocked state.
.It Fn simple_lock "slock"
The simplelock
.Fa slock
is locked.
If the simplelock is held then execution will
spin until the simplelock is acquired.
Care must be taken that the calling process does not already hold
the simplelock.
In this case, the simplelock can never be acquired.
If kernel option LOCKDEBUG is enabled, a "locking against myself" panic
will occur.
.It Fn simple_lock_try "slock"
Try to acquire the simplelock
.Fa slock
without spinning.
If the simplelock is held by another process then the return value is 0.
If the simplelock was acquired successfully then the return value is 1.
.It Fn simple_unlock "slock"
The simplelock
.Fa slock
is unlocked.
The simplelock must be locked and the calling process must
be the one that last acquired the simplelock.
If the calling process does not hold the simplelock, the simplelock
will be released but the kernel behaviour is undefined.
.El
.Pp
a137 3
.It Fn lockmgr_printinfo "lock"
Print out information about state of lock
.Fa lock .
a155 16
.Sh CODE REFERENCES
This section describes places within the
.Ox
source tree where actual code implementing or utilising the locking
framework can be found.
All pathnames are relative to
.Pa /usr/src .
.Pp
The locking framework itself is implemented within the file
.Pa sys/kern/kern_lock.c .
Data structures and function prototypes for the framework are located
in
.Pa sys/sys/lock.h .
.\"Machine-dependent simplelock primitives are implemented within the
.\"file
.\".Pa sys/arch/\*[Lt]arch\*[Gt]/include/lock.h .
d165 1
a165 1
.Bx 4.4 -lite2 .
@


1.19
log
@Remove LK_SLEEPFAIL
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.18 2009/03/25 01:50:50 oga Exp $
d43 1
a43 1
.Fd #include <sys/lock.h>
@


1.18
log
@Lying is bad, so stop lying about functionality that was removed ages
ago.

ok blambert (who had a similar diff a few days ago)
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.17 2008/06/26 05:42:08 ray Exp $
d28 1
a28 1
.Dd $Mdocdate: June 26 2008 $
a159 2
.It LK_SLEEPFAIL
Processes should sleep, then return failure when acquiring the lock.
a216 2
.It Bq Er ENOLCK
LK_SLEEPFAIL is set and a sleep was done.
@


1.17
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.16 2007/05/31 19:20:00 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
a104 7
A statically allocated simplelock also can be initialised with the macro
SIMPLELOCK_INITIALIZER.
The effect is the same as the dynamic initialisation by a call to
simple_lock_init.
For example,
.Pp
.Dl struct simplelock slock = SIMPLELOCK_INITIALIZER;
a196 4
.It LK_INTERLOCK
Unlock the simplelock
.Fa slock
when the lock is acquired.
d200 1
a200 11
Simplelock interlock.
If the flag LK_INTERLOCK is set in
.Fa flags ,
.Fa slock
is a simplelock held by the caller.
When the lock
.Fa lock
is acquired, the simplelock is released.
If the flag LK_INTERLOCK is not set,
.Fa slock
is ignored.
@


1.16
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.15 2007/04/12 16:25:59 miod Exp $
a14 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d28 1
a28 1
.Dd $Mdocdate$
@


1.15
log
@Remove traces of LK_UPGRADE and LK_FORCEUPGRADE in the error descriptions.
Spotted by jmc@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.14 2007/04/11 12:06:34 miod Exp $
d35 1
a35 1
.Dd June 23, 2000
@


1.14
log
@lockmgr keeps losing code, call 911!

ok pedro@@ art@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.13 2007/02/03 16:58:30 pedro Exp $
d242 1
a242 2
No lock is held after an error return (in particular, a failed LK_UPGRADE or
LK_FORCEUPGRADE will have released its shared-access lock).
d246 1
a246 3
LK_FORCEUPGRADE is requested and some other process has already
requested a lock upgrade or LK_NOWAIT is set and a sleep would
be required.
@


1.13
log
@Remove references to LK_EXCLUPGRADE, LK_REENABLE, LK_SETRECURSE and
LK_SPIN, okay miod@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.12 2005/11/19 09:33:58 jmc Exp $
a202 12
.It LK_UPGRADE
The process must hold a shared-access lock that it wants to have
upgraded to an exclusive-access lock.
Other processes may get exclusive
access to the protected resource between the time that the upgrade is
requested and the time that it is granted.
.It LK_DOWNGRADE
The process must hold an exclusive-access lock that it wants to have
downgraded to a shared-access lock.
If the process holds multiple
(recursive) exclusive-access locks, they will all be downgraded to
shared-access locks.
d280 1
d287 2
@


1.12
log
@fix list madness;
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.11 2005/11/19 02:18:00 pedro Exp $
a208 9
.It LK_EXCLUPGRADE
The process must hold a shared-access lock that it wants to have
upgraded to an exclusive-access lock.
If the request succeeds, no
other processes will have acquired exclusive access to the protected
resource between the time that the upgrade is requested and the time
that it is granted.
However, if another process has already requested
an upgrade, the request will fail.
a220 6
.It LK_REENABLE
Lock is to be re-enabled after drain.
The LK_REENABLE flag may be set
only at the release of a lock obtained by a drain.
.It LK_SETRECURSE
Other locks while we have it OK.
a222 2
.It LK_SPIN
Lock spins instead of sleeping.
@


1.11
log
@Remove unnecessary lockmgr() archaism that was costing too much in terms
of panics and bugfixes. Access curproc directly, do not expect a process
pointer as an argument. Should fix many "process context required" bugs.
Incentive and okay millert@@, okay marc@@. Various testing, thanks.
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.10 2005/02/20 15:14:05 jmc Exp $
d50 1
a50 1
.Fd #include \*[Lt]sys/lock.h\*[Gt]
d75 1
a75 2
.Pp
.Bl -tag -width compact
d107 1
a107 2
.Pp
.Bl -tag -width compact
d118 1
a118 1
struct simplelock slock = SIMPLELOCK_INITIALIZER;
d147 1
a147 2
.Pp
.Bl -tag -width compact
d153 2
a154 1
.Bl -tag -width compact
d170 2
a171 1
.Bl -tag -width compact
d183 2
a184 1
.Bl -tag -width compact
d190 1
a190 1
.Bl -tag -width compact
d245 1
@


1.10
log
@sort SEE ALSO;
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.9 2005/02/18 18:00:22 pedro Exp $
d63 1
a63 2
.Fn lockmgr "struct lock *lock" "u_int flags" "struct simplelock *slock" \
"struct proc *p"
d181 1
a181 1
.It Fn lockmgr "lock" "flags" "slock" "p"
a256 3
.It Fa p
Should always point to the current process
.Va curproc .
@


1.9
log
@.Xr mutex 9, now that it exists.
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.8 2003/03/31 15:08:20 mpech Exp $
d310 1
d314 1
a314 2
.Xr uvm 9 ,
.Xr mutex 9
@


1.8
log
@Comment NetBSD related stuff.

millert@@ ok
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.7 2003/03/18 09:57:53 avsm Exp $
d313 2
a314 1
.Xr uvm 9
@


1.7
log
@- document the 'struct proc p' 4th argument to lockmgr
- put the lockmgr argument descriptions in order

ok miod@@, art@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: lock.9,v 1.6 2003/03/07 06:21:37 david Exp $
d306 3
a308 3
Machine-dependent simplelock primitives are implemented within the
file
.Pa sys/arch/\*[Lt]arch\*[Gt]/include/lock.h .
@


1.6
log
@$OpenBSD$
ok henning@@
@
text
@d1 1
a1 1
.\"     $OpenBSD$
d182 1
a182 1
.It Fn lockmgr "lock" "flags" "slock"
a187 12
.It Fa slock
Simplelock interlock.
If the flag LK_INTERLOCK is set in
.Fa flags ,
.Fa slock
is a simplelock held by the caller.
When the lock
.Fa lock
is acquired, the simplelock is released.
If the flag LK_INTERLOCK is not set,
.Fa slock
is ignored.
d246 15
@


1.5
log
@double word typos;

all from David Krause - thanks!
@
text
@d1 1
@


1.4
log
@s/Nx/Ox/
ok deraadt@@
@
text
@d86 1
a86 1
locks that can be be used inside an interrupt handler.
@


1.3
log
@Time to cleanup:
o) start new sentence on a new line;
o) wrap long lines;
o) don't use .Pp before/after .Sh, .Ss;
o) OpenBSD -> .Ox;
o) typos;
o) close .Rs;
o) use space between arguments in tag, for example:
   .Xr blabla ) .

miod@@ ok
@
text
@d291 1
a291 1
.Nx
@


1.2
log
@There is no "simple_lock_unlock" function...
@
text
@d73 2
a74 1
accessing shared data.  A number of different locks are available:
d78 3
a80 2
Provides a simple spinning mutex.  A processor will busy-wait while
trying to acquire a simplelock.  The simplelock operations are
d84 4
a87 3
to protect short, critical sections of code.  Simplelocks are the only
locks that can be be used inside an interrupt handler.  For a
simplelock to be used in an interrupt handler, care must be taken to
d89 3
a91 3
the simplelock and re-enable the interrupt.  This procedure is
necessary to avoid deadlock between the interrupt handler and other
processes executing on the same processor.
d94 2
a95 1
can be acquired.  The lock manager supplies both exclusive-access and
d97 2
a98 1
single process.  It also allows upgrading a shared-access lock to an
d104 2
a105 2
are provided to record additional lock information.  These facilities are
provided to assist in determining deadlock occurrences.
d113 6
a118 4
is initialised to the unlocked state.  A statically allocated simplelock
also can be initialised with the macro SIMPLELOCK_INITIALIZER.  The
effect is the same as the dynamic initialisation by a call to
simple_lock_init.  For example,
d124 8
a131 5
is locked.  If the simplelock is held then execution will
spin until the simplelock is acquired.  Care must be taken that the
calling process does not already hold the simplelock.  In this case, the
simplelock can never be acquired.  If kernel option LOCKDEBUG is enabled,
a "locking against myself" panic will occur.
d135 3
a137 3
without spinning.  If the simplelock is held by another process
then the return value is 0.  If the simplelock was acquired
successfully then the return value is 1.
d141 5
a145 4
is unlocked.  The simplelock must be locked and the calling process must
be the one that last acquired the simplelock.  If the calling
process does not hold the simplelock, the simplelock will be released
but the kernel behaviour is undefined.
d154 2
a155 2
is initialised according to the parameters provided.  Arguments are as
follows:
d165 2
a166 1
The maximum sleep time.  Used by
d170 2
a171 1
the lock.  Valid lock flags are:
d188 2
a189 1
Simplelock interlock.  If the flag LK_INTERLOCK is set in
d192 2
a193 1
is a simplelock held by the caller.  When the lock
d195 2
a196 2
is acquired, the simplelock is released.  If the flag LK_INTERLOCK is
not set,
d200 2
a201 2
Flags to specify the lock request type.  In addition to the flags
specified above, the following flags are valid:
d204 3
a206 3
Get one of many possible shared-access locks.  If a process holding an
exclusive-access lock requests a shared-access lock, the
exclusive-access lock is downgraded to a shared-access lock.
d217 2
a218 1
upgraded to an exclusive-access lock.  Other processes may get exclusive
d223 2
a224 1
upgraded to an exclusive-access lock.  If the request succeeds, no
d227 2
a228 1
that it is granted.  However, if another process has already requested
d232 2
a233 1
downgraded to a shared-access lock.  If the process holds multiple
d243 2
a244 1
Lock is to be re-enabled after drain.  The LK_REENABLE flag may be set
d268 5
a272 5
Successfully acquired locks return 0.  A failed lock attempt always
returns a non-zero error value.  No lock is held after an error
return (in particular, a failed LK_UPGRADE or LK_FORCEUPGRADE will
have released its shared-access lock).  Locks will always succeed
unless one of the following is true:
d293 2
a294 1
framework can be found.  All pathnames are relative to
@


1.1
log
@lock man page from NetBSD
@
text
@d128 1
a128 1
.It Fn simple_lock_unlock "slock"
@

