head	1.8;
access;
symbols
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.24
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.22
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.20
	OPENBSD_5_0:1.4.0.18
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.16
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.14
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.10
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.12
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4;
locks; strict;
comment	@.\" @;


1.8
date	2014.02.04.20.55.22;	author dlg;	state dead;
branches;
next	1.7;

1.7
date	2014.01.30.08.16.56;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2014.01.30.00.44.20;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.04.19.27.03;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.14.13.10.24;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.27.14.56.52;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.27.10.06.56;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rename atomic.9 to atomic_setbits_int.9 since the former isn't a function
you can call.

discussed briefly with jmc@@ who i might have misinterpreted.
@
text
@.\" $OpenBSD: atomic.9,v 1.7 2014/01/30 08:16:56 jmc Exp $
.\"
.\" Copyright (c) 2007 Artur Grabowski <art@@openbsd.org>
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: January 30 2014 $
.Dt ATOMIC 9
.Os
.Sh NAME
.Nm atomic ,
.Nm atomic_setbits_int ,
.Nm atomic_clearbits_int
.Nd interface to perform atomic operations on data
.Sh SYNOPSIS
.In sys/atomic.h
.Ft void
.Fn atomic_setbits_int "unsigned int *p" "unsigned int b"
.Ft void
.Fn atomic_clearbits_int "unsigned int *p" "unsigned int b"
.Sh DESCRIPTION
The
.Nm
set of functions provide an interface for changing data atomically with
respect to interrupts and multiple processors in the system.
.Pp
There are several sets of atomic memory operations available:
.Bl -tag -width "atomic_swap(9)" -offset indent
.It Xr atomic_add 9
These functions perform atomic addition operations.
.It Xr atomic_cas 9
These functions perform atomic compare-and-swap operations.
.It Xr atomic_dec 9
These functions perform atomic decrement operations.
.It Xr atomic_inc 9
These functions perform atomic increment operations.
.It Xr atomic_sub 9
These functions perform atomic subtraction operations.
.It Xr atomic_swap 9
These functions perform atomic swap operations.
.El
.Pp
The
.Fn atomic_setbits_int
function sets the bits in
.Fa b
in the integer pointed to by
.Fa p .
It is equivalent to
.Bd -literal -offset indent
*p |= b;
.Ed
.Pp
The
.Fn atomic_clearbits_int
function clears the bits in
.Fa b
in the integer pointed to by
.Fa p .
It is equivalent to
.Bd -literal -offset indent
*p &= ~b;
.Ed
.Sh SEE ALSO
.Xr atomic_add 9 ,
.Xr atomic_cas 9 ,
.Xr atomic_dec 9 ,
.Xr atomic_inc 9 ,
.Xr atomic_sub 9 ,
.Xr atomic_swap 9
.Sh HISTORY
The
.Nm
functions first appeared in
.Ox 4.1 .
@


1.7
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: atomic.9,v 1.6 2014/01/30 00:44:20 dlg Exp $
@


1.6
log
@add an MI api for atomic ops in the kernel. this api has its origins in
solaris, but we found it via netbsd.

this provides an MI implementation by using gccs atomic builtins. if an
arch wants to provide a better implementation it can simply provide the
specific bit of the api it wants to replace as a macro.

we're being conservative with this API and only providing it in the
kernel, and only for uints, ulongs, and pointers.

discussed at n2k14 and with hackers at length.
ok kettenis@@
@
text
@d1 1
a1 1
.\" $OpenBSD: atomic.9,v 1.5 2013/06/04 19:27:03 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 4 2013 $
a38 1
.Pp
@


1.5
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\" $OpenBSD: atomic.9,v 1.4 2007/05/31 19:20:00 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: May 31 2007 $
d27 1
a27 1
.In machine/atomic.h
d38 17
d76 7
@


1.4
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: atomic.9,v 1.3 2007/05/14 13:10:24 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate$
d27 1
a27 1
.Fd #include <machine/atomic.h>
@


1.3
log
@these functions first appeared in 4.1, not 4.0;
from jung; ok art
@
text
@d1 1
a1 1
.\" $OpenBSD: atomic.9,v 1.2 2007/04/27 14:56:52 jmc Exp $
d18 1
a18 1
.Dd April 27, 2007
@


1.2
log
@tweaks;
@
text
@d1 1
a1 1
.\" $OpenBSD: atomic.9,v 1.1 2007/04/27 10:06:56 art Exp $
d63 1
a63 1
.Ox 4.0 .
@


1.1
log
@Document atomic_{set,clear}bits_int.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d24 1
a24 1
.Nm atomic_clearbits_int ,
a58 1
.Pp
@

