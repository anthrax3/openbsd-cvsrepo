head	1.3;
access;
symbols;
locks; strict;
comment	@.\" @;


1.3
date	2014.02.03.07.03.04;	author dlg;	state dead;
branches;
next	1.2;

1.2
date	2014.01.30.08.16.56;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2014.01.30.00.44.20;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@rename the atomic_foo manpages to atomic_foo_int or _uint cos we name these
after functions. for reasons.

reminded by jmc@@
@
text
@.\" $OpenBSD: atomic_cas.9,v 1.2 2014/01/30 08:16:56 jmc Exp $
.\"
.\" Copyright (c) 2014 David Gwynne <dlg@@openbsd.org>
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: January 30 2014 $
.Dt ATOMIC_CAS 9
.Os
.Sh NAME
.Nm atomic_cas_uint ,
.Nm atomic_cas_ulong ,
.Nm atomic_cas_ptr
.Nd atomic compare-and-swap operations
.Sh SYNOPSIS
.In sys/atomic.h
.Ft unsigned int
.Fn atomic_cas_uint "volatile unsigned int *p" "unsigned int expected" "unsigned int new"
.Ft unsigned long
.Fn atomic_cas_ulong "volatile unsigned long *p" "unsigned long expected" "unsigned long new"
.Ft void *
.Fn atomic_cas_ptr "volatile void **p" "void *expected" "void *new"
.Sh DESCRIPTION
The
.Nm atomic_cas
set of functions provide an interface for atomically performing
compare-and-swap operations with respect to interrupts and multiple
processors in the system.
.Pp
The value referenced by the pointer
.Fa p
is compared against
.Fa expected .
If these values are equal then
.Fa new
replaces the value stored at
.Fa p .
.Sh RETURN VALUES
These functions return the value at
.Fa p
as it was before the attempt to swap it.
.Sh SEE ALSO
.Xr atomic 9 ,
.Xr atomic_swap 9
.Sh HISTORY
The
.Nm atomic_cas
functions first appeared in
.Ox 5.5 .
@


1.2
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: atomic_cas.9,v 1.1 2014/01/30 00:44:20 dlg Exp $
@


1.1
log
@add an MI api for atomic ops in the kernel. this api has its origins in
solaris, but we found it via netbsd.

this provides an MI implementation by using gccs atomic builtins. if an
arch wants to provide a better implementation it can simply provide the
specific bit of the api it wants to replace as a macro.

we're being conservative with this API and only providing it in the
kernel, and only for uints, ulongs, and pointers.

discussed at n2k14 and with hackers at length.
ok kettenis@@
@
text
@d1 1
a1 1
.\" $OpenBSD$
d18 1
a18 1
.Dd $Mdocdate$
d45 1
a45 1
If the these values are equal then
a48 1
.Ed
@

