head	1.4;
access;
symbols
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.16
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2003.01.11.06.21.07;	author wcobb;	state dead;
branches;
next	1.3;

1.3
date	2001.11.06.21.54.41;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.12.18.06.04;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	96.03.11.13.04.50;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove the vm_* manpages, these functions were replaced in uvm.
ok art@@
@
text
@.\"
.\"	$OpenBSD: vm_allocate.9,v 1.3 2001/11/06 21:54:41 miod Exp $
.\"
.\" Mach Operating System
.\" Copyright (c) 1991,1990 Carnegie Mellon University
.\" All Rights Reserved.
.\"
.\" Permission to use, copy, modify and distribute this software and its
.\" documentation is hereby granted, provided that both the copyright
.\" notice and this permission notice appear in all copies of the
.\" software, derivative works or modified versions, and any portions
.\" thereof, and that both notices appear in supporting documentation.
.\"
.\" CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
.\" CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
.\" ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
.\"
.\" Carnegie Mellon requests users of this software to return to
.\"
.\"  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
.\"  School of Computer Science
.\"  Carnegie Mellon University
.\"  Pittsburgh PA 15213-3890
.\"
.\" any improvements or extensions that they make and grant Carnegie Mellon
.\" the rights to redistribute these changes.
.\"
.TH vm_allocate 9 9/19/93
.CM 4
.SH NAME
.nf
vm_allocate  \-  allocates virtual memory for a task
.SH SYNOPSIS
.nf
.ft B
#include <uvm/uvm_extern.h>

.nf
.ft B
int	vm_allocate(map, address, size, anywhere)
	vm_map_t	map;
	vm_address_t	*address;	/* in/out */
	vm_size_t	size;
	boolean_t	anywhere;


.fi
.ft P
.SH ARGUMENTS
.TP 15
.B
map
Virtual address space to be affected.
.TP 15
.B
address
Starting address.  If the
.B anywhere
option is false,
an attempt is made to allocate virtual memory starting at
this virtual address. If this address is not at the beginning
of a virtual page, it will be rounded down to one.
If there is not enough space at this address, no memory will be allocated.
If the anywhere option is true, the input value of this address will
be ignored, and the space will be allocated wherever it is available.
In either case, the address at which memory was actually allocated will
be returned in
.B address
.
.TP 15
.B
size
Number of bytes to allocate (rounded by the system in a
machine dependent way to an integral number of virtual pages).
.TP 15
.B
anywhere
If true, the kernel should find and allocate any region of
the specified size, and return the address of the resulting region in
.B address
.  If false, virtual memory will be allocated starting at
.B address
, rounded to a virtual page boundary if there
is sufficient space.

.SH DESCRIPTION
.B vm_allocate
allocates a region of virtual memory, placing it in the
specified task's address space.  The physical memory is not actually
allocated until the new virtual memory is referenced.  By default,
the kernel rounds all addresses down
to the nearest page boundary and all memory sizes up to the nearest page
size.  The global variable
.B cnt.vm_page_size
contains the page size.
Initially, the pages of allocated memory will be protected
to allow all forms of access, and will be inherited in child tasks as
a copy.  Subsequent calls to
.B vm_map_protect
and
.B vm_map_inherit
may
be used to change these properties.  The allocated region is always
zero-filled.

.SH DIAGNOSTICS
.TP 25
KERN_SUCCESS
Memory allocated.
.TP 25
KERN_INVALID_ADDRESS
Illegal address specified.
.TP 25
KERN_NO_SPACE
Not enough space left to satisfy this request

.SH SEE ALSO
.B vm_deallocate, vm_map_inherit, vm_map_protect

@


1.3
log
@uvm headers there too.
@
text
@d2 1
a2 1
.\"	$OpenBSD: vm_allocate.9,v 1.2 2000/10/12 18:06:04 aaron Exp $
@


1.2
log
@General man page cleanups, mostly to remove trailing whitespace, hard
sentence breaks, and other such things.
@
text
@d2 1
a2 1
.\"	$OpenBSD: vm_allocate.9,v 1.1 1996/03/11 13:04:50 mickey Exp $
d36 1
a36 1
#include <vm/vm_extern.h>
@


1.1
log
@New pages for VM interface.
Introduction need to be expanded.
@
text
@d1 2
a2 2
.\" 
.\"	$OpenBSD$
d7 1
a7 1
.\" 
d13 1
a13 1
.\" 
d17 1
a17 1
.\" 
d19 1
a19 1
.\" 
d24 1
a24 1
.\" 
d27 1
a27 1
.\" 
d57 1
a57 1
Starting address.  If the 
d59 1
a59 1
option is false, 
d62 1
a62 1
of a virtual page, it will be rounded down to one. 
d66 2
a67 2
In either case, the address at which memory was actually allocated will 
be returned in 
d73 1
a73 1
Number of bytes to allocate (rounded by the system in a 
d78 2
a79 2
If true, the kernel should find and allocate any region of 
the specified size, and return the address of the resulting region in 
d83 1
a83 1
, rounded to a virtual page boundary if there 
d90 4
a93 4
allocated until the new virtual memory is referenced.  By default, 
the kernel rounds all addresses down 
to the nearest page boundary and all memory sizes up to the nearest page 
size.  The global variable 
d98 1
a98 1
a copy.  Subsequent calls to 
d100 1
a100 1
and 
d103 2
a104 2
be used to change these properties.  The allocated region is always 
zero-filled. 
@

