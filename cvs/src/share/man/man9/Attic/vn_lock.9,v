head	1.8;
access;
symbols
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@.\" @;


1.8
date	2005.05.27.22.31.47;	author marius;	state dead;
branches;
next	1.7;

1.7
date	2004.04.17.20.30.41;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.20.20.38.28;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.26.20.18.07;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.28.19.22.05;	author csapuntz;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.28.22.14.23;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.10.06.44.17;	author csapuntz;	state Exp;
branches;
next	;


desc
@@


1.8
log
@add vnsubr(9) from NetBSD.  add the more detailed vn_lock(9) text to it
and remove vn_lock.

ok tedu@@
@
text
@.\"     $OpenBSD: vn_lock.9,v 1.7 2004/04/17 20:30:41 jmc Exp $
.\"
.\" Copyright (c) 2001 Constantine Sapuntzakis
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd March 9, 2001
.Dt VN_LOCK 9
.Os
.Sh NAME
.Nm vn_lock
.Nd acquire the vnode lock
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/vnode.h>
.Ft int
.Fn "vn_lock" "struct vnode *vp" "int flags" "struct proc *p"
.Sh DESCRIPTION
The
.Fn vn_lock
function is used to acquire the vnode lock.
Certain file system operations require that the vnode lock be held when
they are called.
See
.Pa sys/kern/vnode_if.src
for more details.
.Pp
The
.Fn vn_lock
function must not be called when the vnode's reference count is
zero.
Instead, the
.Fn vget
function should be used.
.Pp
The
.Fa flags
argument may contain the following flags:
.Bl -column LK_INTERLOCK -offset indent
.It Dv LK_RETRY Ta
Return the vnode even if it has been reclaimed.
.It Dv LK_INTERLOCK Ta
Must be set if the caller owns the vnode interlock.
.It Dv LK_NOWAIT Ta
Don't wait if the vnode lock is held by someone else (may still
wait on reclamation lock on or interlock).
Must not be used with
.Dv LK_RETRY .
.It Dv LK_EXCLUSIVE Ta
Acquire an exclusive lock.
.It Dv LK_SHARED Ta
Acquire a shared lock.
.El
.Pp
The
.Fn vn_lock
function can sleep.
The
.Fn vn_lock
releases the vnode interlock before exit.
.Sh RETURN VALUES
Upon successful completion, a value of 0 is returned.
Otherwise, one of the following errors is returned.
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er ENOENT
The vnode has been reclaimed and is dead.
This error is only returned if the
.Dv LK_RETRY
flag is not passed.
.It Bq Er EBUSY
The
.Dv LK_NOWAIT
flag was set and
.Fn vn_lock
would have slept.
.El
.Sh SEE ALSO
.Xr vnode 9
.Sh BUGS
The locking discipline is bizarre.
Many vnode operations are passed locked vnodes on entry but release
the lock before they exit.
Discussions with Kirk McKusick indicate that locking
discipline evolved out of the pre-VFS way of doing inode locking.
In addition, the current locking discipline may actually save
lines of code, esp. if the number of file systems is fewer
than the number of call sites.
However, the VFS interface would
require less wizardry if the locking discipline were simpler.
.Pp
The locking discipline is used in some places to attempt to make a
series of operations atomic (e.g., permissions check +
operation).
This does not work for non-local file systems that do not
support locking (e.g., NFS).
.Pp
Are vnode locks even necessary?
The security checks can be moved into the individual file systems.
Each file system can have the responsibility of ensuring that vnode
operations are suitably atomic.
.Pp
The
.Dv LK_NOWAIT
flag does prevent the caller from sleeping.
.Pp
The locking discipline as it relates to shared locks has yet to be defined.
@


1.7
log
@lots of fixes from jared yanovich;
@
text
@d1 1
a1 1
.\"     $OpenBSD: vn_lock.9,v 1.6 2003/04/20 20:38:28 jmc Exp $
@


1.6
log
@typos, a little grammar, and lots of space at EOL deleted;
@
text
@d1 1
a1 1
.\"     $OpenBSD: vn_lock.9,v 1.5 2002/08/26 20:18:07 art Exp $
d57 1
a57 1
fields may contain the following flags:
d66 2
a67 1
Must not be used with LK_RETRY.
d87 3
a89 1
This error is only returned if the LK_RETRY flag is not passed.
d91 5
a95 1
The LK_NOWAIT flag was set and the vn_lock would have slept.
d107 1
a107 1
then the number of call sites.
d122 3
a124 1
The LK_NOWAIT flag does prevent the caller from sleeping.
@


1.5
log
@Add licenses to man pages written by Costa.
Licenses sent to me from him in mail, but he can't commit right now.
@
text
@d1 1
a1 1
.\"     $OpenBSD: vn_lock.9,v 1.4 2002/02/28 19:22:05 csapuntz Exp $
d43 3
a45 1
See sys/kern/vnode_if.src for more details.
d55 2
a56 2
The 
.Fa flags 
d68 1
a68 1
Acquire an exclusive lock
d70 1
a70 1
Acquire a shared lock
d92 1
a92 1
.Sh BUGS 
@


1.4
log
@Check in some new vnode man page from FreeBSD. Thanks to Peter Werner
@
text
@d1 25
a25 1
.\"     $OpenBSD: $
@


1.3
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
@


1.2
log
@speling; jsyn@@nthought.com
@
text
@d2 2
a3 2
.Dt vn_lock 9
.Os OpenBSD 2.9
d15 5
a19 4
function is used to acquire the vnode lock. Certain file system
operations require that the vnode lock be held when they are
called. See sys/kern/vnode_if.src for more details.

d23 2
a24 1
zero. Instead, the
d27 1
a27 1

d38 2
a39 2
wait on reclamation lock on or interlock). Must not be used
with LK_RETRY.
d45 1
a45 1

d48 2
a49 1
function can sleep. The
a51 2


a54 1

d58 2
a59 2
The vnode has been reclaimed and is dead. This error is only
returned if the LK_RETRY flag is not passed.
a62 1

a64 1

d66 4
a69 3
The locking discipline is bizarre. Many vnode operations are
passed locked vnodes on entry but release the lock before they
exit. Discussions with Kirk McKusick indicate that locking
d73 2
a74 1
then the number of call sites. However, the VFS interface would
d76 1
a76 1

d78 10
a87 9
series of operations atomic (e.g. permissions check +
operation). This does not work for non-local file systems that do not
support locking (e.g. NFS).

Are vnode locks even necessary? The security checks can be
moved into the individual file systems. Each file system can
have the responsibility of ensuring that vnode operations are suitably
atomic.

d89 1
a89 1

@


1.1
log
@Man page on vn_lock
@
text
@d52 1
a52 1
Upon succesful completion, a value of 0 is returned.
@

