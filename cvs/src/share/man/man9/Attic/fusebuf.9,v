head	1.11;
access;
symbols
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10;
locks; strict;
comment	@.\" @;


1.11
date	2013.08.08.06.41.06;	author jmc;	state dead;
branches;
next	1.10;

1.10
date	2013.07.05.06.45.07;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.12.05.56.53;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.11.20.20.52;	author sobrado;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.11.20.17.02;	author sobrado;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.04.19.27.06;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.04.18.26.51;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.03.19.56.16;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.03.16.35.55;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.03.16.34.34;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.16.34.00;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@rename fuse docs after existent functions;
@
text
@.\" $OpenBSD: fusebuf.9,v 1.10 2013/07/05 06:45:07 jmc Exp $
.\"
.\" Copyright (c) 2013 Sylvestre Gallon <ccna.syl@@gmail.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: July 5 2013 $
.Dt FUSEBUF 9
.Os
.Sh NAME
.Nm fusebuf
.Nd kernel messaging mechanism for file system in userland
.Sh SYNOPSIS
.In sys/fusebuf.h
.Ft struct fusebuf *
.Fn fb_setup "size_t size" "ino_t inode" "int type" "struct proc *p"
.Ft int
.Fn fb_queue "dev_t dev" "struct fusebuf *fbuf"
.Bd -literal
#define	FUSEBUFSIZE	4096
#define	FUSEFDSIZE	sizeof(((struct fusebuf *)0)->F_dat.FD)
#define	FUSELEN		(FUSEBUFSIZE - sizeof(struct fb_hdr) - \\
			sizeof(union uFD))

struct fb_hdr {
	SIMPLEQ_ENTRY(fusebuf)	fh_next;
	size_t			fh_len;
	size_t			fh_resid;
	uint32_t		fh_err;
	int			fh_type;
	ino_t			fh_ino;
	uint64_t		fh_uuid;
};

struct fb_io {
	uint64_t		fi_fd;
	ino_t			fi_ino;
	off_t			fi_off;
	size_t			fi_len;
	mode_t			fi_mode;
	uint32_t		fi_flags;
};

struct fusebuf {
        struct	fb_hdr fb_hdr;
	struct {
		union uFD {
			struct statvfs	FD_stat;
			struct vattr	FD_vattr;
			struct fb_io	FD_io;

		} FD;
		char	F_databuf[FUSELEN];
	} F_dat;
};

#define fb_next		fb_hdr.fh_next
#define fb_len		fb_hdr.fh_len
#define fb_resid	fb_hdr.fh_resid
#define fb_err		fb_hdr.fh_err
#define fb_type		fb_hdr.fh_type
#define fb_ino		fb_hdr.fh_ino
#define fb_uuid		fb_hdr.fh_uuid

#define fb_stat		F_dat.FD.FD_stat
#define fb_vattr	F_dat.FD.FD_vattr
#define fb_io_fd	F_dat.FD.FD_io.fi_fd
#define fb_io_ino	F_dat.FD.FD_io.fi_ino
#define fb_io_off	F_dat.FD.FD_io.fi_off
#define fb_io_len	F_dat.FD.FD_io.fi_len
#define fb_io_mode	F_dat.FD.FD_io.fi_mode
#define fb_io_flags	F_dat.FD.FD_io.fi_flags
#define	fb_dat		F_dat.F_databuf
.Ed
.Sh DESCRIPTION
These functions provide a way to manage the kernel messaging mechanism for
.Xr fuse 4
file systems.
It is based on
.Xr mbuf 9 .
.Pp
Each FUSE operation fits in a
.Nm
except for read, write, and readdirs,
which are split into several fusebufs with a changing value in
.Fa fb_io_off
for each.
The size of a fusebuf is
.Fa FUSEBUFSIZE .
.Pp
A fusebuf structure is defined as an
.Fa fb_hdr
followed by a structure containing a union and a buffer
.Fa F_Dat .
The header contains the following elements:
.Bl -tag -width foobarmoocow
.It Fa fh_next
A
.Xr SIMPLEQ_ENTRY 3
needed to store the different fusebufs stored with
.Fa fb_queue .
.It Fa fh_len
Indicates the amount of data in
.Fa F_dat .
.It Fa fh_resid
Used for partial
.Xr fuse 4
reads.
If the read does not fill the fusebuf, the number of bytes of
.Fa F_dat
written in this field are stored.
.It Fa fh_err
Indicates the
.Xr errno 2
failure of a fusebuf.
.It Fa fh_type
Indicates the type of fusebuf transaction (see below).
.It Fa fh_ino
Indicates the inode on which the
.Xr fuse 4
operation is done.
.It Fa fh_uuid
UUID to track the answer.
This number is generated with
.Xr arc4random 9 .
.El
.Pp
The
.Fa fh_type
variable can take the following values:
.Pp
.Bl -tag -compact -offset indent -width XXXXXXXXXXXXXXXXXX
.It Dv FBT_LOOKUP
The fusebuf is a lookup operation.
.It Dv FBT_GETATTR
The fusebuf is a gettattr operation.
.It Dv FBT_SETATTR
The fusebuf is a setattr operation.
.It Dv FBT_READLINK
The fusebuf is a readlink operation.
.It Dv FBT_SYMLINK
The fusebuf is a symlink operation.
.It Dv FBT_MKNOD
The fusebuf is a mknod operation.
.It Dv FBT_MKDIR
The fusebuf is a mkdir operation.
.It Dv FBT_UNLINK
The fusebuf is an unlink operation.
.It Dv FBT_RMDIR
The fusebuf is an rmdir operation.
.It Dv FBT_RENAME
The fusebuf is a rename operation.
.It Dv FBT_LINK
The fusebuf is a link operation.
.It Dv FBT_OPEN
The fusebuf is an open operation.
.It Dv FBT_READ
The fusebuf is a read operation.
.It Dv FBT_WRITE
The fusebuf is a write operation.
.It Dv FBT_STATFS
The fusebuf is a statfs operation.
.It Dv FBT_RELEASE
The fusebuf is a file close operation.
.It Dv FBT_FSYNC
The fusebuf is a file sync operation.
.It Dv FBT_FLUSH
The fusebuf is a flush operation.
.It Dv FBT_INIT
The fusebuf initializes the FUSE connection.
.It Dv FBT_OPENDIR
The fusebuf is an opendir operation.
.It Dv FBT_READDIR
The fusebuf is a readdir operation.
.It Dv FBT_RELEASEDIR
The fusebuf is a close dir operation.
.It Dv FBT_FSYNCDIR
The fusebuf is a dir sync operation.
.It Dv FBT_ACCESS
The fusebuf is an access operation.
.It Dv FBT_CREATE
The fusebuf is a create file operation.
.It Dv FBT_DESTROY
The fusebuf closes the FUSE connection.
.El
.Pp
All the data needed by the FUSE clients is contained in the
.Fa F_dat
structure.
This structure contains a union
.Fa FD
of frequently used type
and a buffer
.Fa F_databuf
to send data to libfuse.
The union contains the following elements:
.Bl -tag -width foobarmoocow
.It Fa FD_stat
A struct
.Xr statvfs 3
filled in by the FUSE client statfs for the FUSE VFS statfs code.
.It Fa FD_vattr
Used by the getattr and setattr calls.
.It Fa FD_io
Contains all fields commonly used by FUSE client callbacks to
provide information to FUSE vnops.
It is used by access, readdir, release, releasedir, read, write, create,
mkdir, and setattr.
.El
.Pp
Setattr uses a struct fb_io and a struct vattr.
Settattr uses
.Fa FD_stat
and encapsulates a struct fb_io in
.Fa F_databuf
with
.Fa fbtod .
.Sh SEE ALSO
.Xr errno 2 ,
.\".Xr fuse 3 ,
.Xr queue 3 ,
.Xr statvfs 3 ,
.Xr fuse 4 ,
.Xr arc4random 9 ,
.Xr mbuf 9
.Sh HISTORY
The
.Nm
API first appeared in
.Ox 5.4 .
@


1.10
log
@various tidy up;
ok tedu sobrado Sylvestre Gallon
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.9 2013/06/12 05:56:53 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: June 12 2013 $
@


1.9
log
@some simple initial fixes; this file still needs read properly
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.8 2013/06/11 20:20:52 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: June 11 2013 $
d47 1
a47 1
	ino_t           	fi_ino;
d86 3
a88 2
Fusebufs functions provide a way to manage the kernel messaging mechanism
for file system in userland.
d92 1
a92 1
Each fuse operation fits in a
d94 2
a95 2
except for read, write, and readdirs.
These operations are split into severals fusebufs with a changing value in
d118 2
a119 2
read.
If the read is inferior of the fusebuf, we store the number of bytes of
d121 1
a121 1
written in this field.
d129 1
a129 1
Indicates the ino on which the
d144 1
a144 1
the fusebuf is a lookup operation.
d146 1
a146 1
the fusebuf is a gettattr operation.
d148 1
a148 1
the fusebuf is a setattr operation.
d150 1
a150 1
the fusebuf is a readlink operation.
d152 1
a152 1
the fusebuf is a symlink operation.
d154 1
a154 1
the fusebuf is a mknod operation.
d156 1
a156 1
the fusebuf is a mkdir operation.
d158 1
a158 1
the fusebuf is an unlink operation.
d160 1
a160 1
the fusebuf is an rmdir operation.
d162 1
a162 1
the fusebuf is a rename operation.
d164 1
a164 1
the fusebuf is a link operation.
d166 1
a166 1
the fusebuf is an open operation.
d168 1
a168 1
the fusebuf is a read operation.
d170 1
a170 1
the fusebuf is a write operation.
d172 1
a172 1
the fusebuf is a statfs operation.
d174 1
a174 1
the fusebuf is a file close operation.
d176 1
a176 1
the fusebuf is a file sync operation.
d178 1
a178 1
the fusebuf is a flush operation.
d180 1
a180 1
the fusebuf initializes the fuse connection.
d182 1
a182 1
the fusebuf is an opendir operation.
d184 1
a184 1
the fusebuf is a readdir operation.
d186 1
a186 1
the fusebuf is a close dir operation.
d188 1
a188 1
the fusebuf is a dir sync operation.
d190 1
a190 1
the fusebuf is an access operation.
d192 1
a192 1
the fusebuf is a create file operation.
d194 1
a194 1
the fusebuf closes the fuse connection.
d197 1
a197 1
All the data needed by the fuse clients is contained in the
d211 1
a211 1
filled in by the fuse client statfs for the fuse VFS statfs code.
d215 2
a216 2
Contains all fields commonly used by fuse client callbacks to
provide information to fuse vnops.
d230 1
a230 1
.Xr fuse 3 ,
@


1.8
log
@split "filesystem" and "mountpoints" as "file system" and "mount points",
respectively.
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.7 2013/06/11 20:17:02 sobrado Exp $
d108 1
a108 1
.Xr SIMPLEQ_ENTRY 9
d132 2
a133 1
UUID to track the answer. This number is generated with
d231 1
a231 1
.Xr statvfs 3,
@


1.7
log
@fix argument to document title (.Dt) macro in the manual page prologue.

ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.6 2013/06/04 19:27:06 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 4 2013 $
d87 1
a87 1
for filesystem in userland.
@


1.6
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.5 2013/06/04 18:26:51 tedu Exp $
d18 1
a18 1
.Dt FUSE 9
@


1.5
log
@fusebufsize update
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.4 2013/06/03 19:56:16 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: June 3 2013 $
d24 1
a24 1
.Fd #include <sys/fusebuf.h>
@


1.4
log
@rewording
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.3 2013/06/03 16:35:55 tedu Exp $
d30 3
a32 2
#define FUSEFDSIZE	sizeof(((struct fusebuf *)0)->F_dat.FD)
#define FUSELEN		(PAGE_SIZE - sizeof(struct fb_hdr) - \\
d98 1
a98 1
.Fa PAGE_SIZE .
@


1.3
log
@5.4 is the magic number
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.2 2013/06/03 16:34:34 tedu Exp $
d86 2
a87 1
for filesystem in userland. It is based on
a88 7
There is some changes with the original
.Xr mbuf 9 ,
the
.Fa mbuf_ext
and
.Fa pkthdr
are not needed so not existant.
d90 1
a90 1
Each fuse operation fit in a
d92 2
a93 2
except for read write and readdirs. These operations are splitted in severals
fusebufs with a changing value in
d95 3
a97 3
each time. Several functions and macros are used to handle fusebufs. The size
of an fusebuf is
.Fa PAGE_SIZE
d99 1
a99 1
An fusebuf structure is defined as an
d101 1
a101 1
followed by a structure containing an union and a buffer
d106 1
a106 1
This is a
d109 1
a109 1
.Fa fb_queue
d112 1
a112 1
.Fa F_dat
d114 1
a114 1
Is used to for partial
d116 2
a117 2
read. if a the read is inferior of the fusebuf, we store
the number of bytes of
d123 1
a123 1
failure of a fusebuf
d131 1
a131 1
Uuid to track the answer. This number is generated with
d155 1
a155 1
the fusebuf is a unlink operation.
d157 1
a157 1
the fusebuf is a rmdir operation.
d163 1
a163 1
the fusebuf is a open operation.
d177 1
a177 1
the fusebuf initialise the fuse connection.
d187 1
a187 1
the fusebuf is a access operation.
d191 1
a191 1
the fusebuf close the fuse connection.
d194 1
a194 1
All the data needed by the fuse clients are contained in the
d196 2
a197 1
structure. This structure contained an union
d202 1
a202 1
to send datas to libfuse.
d206 1
a206 1
Is a struct
d208 1
a208 1
fill by the fuse client statfs for the fuse VFS statfs code.
d210 1
a210 1
Is used by the getattr and setattr calls.
d212 4
a215 3
Contains all fields commonly used by fuse clients callback to
give information to fuse vnops. It is used by access, readdir,
release, releasedir, read, write, create, mkdir and setattr.
d218 2
a219 1
Setattr use a struct fb_io and a struct vattr. To do that settattr used
d221 1
a221 1
and encapsulate a struct fb_io in
d224 1
a224 1
.Fa fbtod
@


1.2
log
@rcsids
@
text
@d1 1
a1 1
.\" $OpenBSD$
d240 1
a240 1
.Ox ?? .
@


1.1
log
@add two more fuse files
@
text
@d1 1
d17 1
a17 1
.Dd $Mdocdate: April 30 2013 $
d240 1
a240 1
.Ox ?? .@

