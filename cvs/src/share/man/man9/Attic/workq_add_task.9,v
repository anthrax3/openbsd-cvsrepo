head	1.18;
access;
symbols
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.14.0.14
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5;
locks; strict;
comment	@.\" @;


1.18
date	2015.01.27.10.18.31;	author dlg;	state dead;
branches;
next	1.17;
commitid	gmRmg4gRdnpts3kX;

1.17
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2013.07.17.20.21.56;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2013.06.04.19.27.18;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2009.09.03.15.10.39;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.02.14.17.56;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.30.23.55.22;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.28.19.31.53;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.28.17.06.42;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.28.15.54.04;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.25.17.40.12;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.25.15.58.29;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.24.14.34.23;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.11.22.13.19;	author thib;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.01.00.27.23;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.31.23.36.44;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.31.21.43.02;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.31.21.41.41;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove workq code. its been replaced with tasks.

it has been unused since december, and unhooked from the build since
christmas.

ok krw@@
@
text
@.\"	$OpenBSD: workq_add_task.9,v 1.17 2014/01/21 03:15:46 schwarze Exp $
.\"
.\" Copyright (c) 2007 David Gwynne <dlg@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: January 21 2014 $
.Dt WORKQ_ADD_TASK 9
.Os
.Sh NAME
.Nm workq_add_task ,
.Nm workq_queue_task ,
.Nm workq_create ,
.Nm workq_destroy
.Nd work queues
.Sh SYNOPSIS
.In sys/workq.h
.Ft int
.Fn "workq_add_task" "struct workq *wq" "int flags" "void (*func)(void *, void *)" "void *arg1" "void *arg2"
.Ft void
.Fn "workq_queue_task" "struct workq *wq" "struct workq_task *wqt" "int flags" "void (*func)(void *, void *)" "void *arg1" "void *arg2"
.Ft struct workq *
.Fn "workq_create" "const char *name" "int maxthreads" "int ipl"
.Ft void
.Fn "workq_destroy" "struct workq *wq"
.Sh DESCRIPTION
The
workq
framework API provides a mechanism to defer tasks to a process context when
it is impossible to run such a task in the current context.
.Pp
.Fn workq_add_task
adds a task to the workq specified by the
.Fa wq
argument.
If
.Fa wq
is
.Dv NULL
the task will be run by the kernel's generic work queue.
Tasks in the kernel's generic work queue should not run for long periods of
time, they should use their own workq for task processing.
A task is specified by the
.Fa func
argument, and will be called with
.Fa arg1
and
.Fa arg2 .
Two arguments are allowed to provide additional flexibility to the called
function.
In many cases, one may wish to perform an action on a target.
Two arguments allow both target and action to be passed without
the need for a wrapper struct to contain them in a single argument.
The
.Fa flags
argument specifies creation and runtime characteristics of the task.
The possible flags are:
.Pp
.Bl -tag -offset indent -width WQ_WAITOKXXX -compact
.It Dv WQ_WAITOK
Wait for resources to become available.
If resources are not available and this flag is not set then
.Fn workq_add_task
will return
.Dv ENOMEM .
.El
.Pp
.Fn workq_queue_task
adds a task to the workq specified by the
.Fa wq
argument, using the memory provided by the
.Fa wqt
argument to store that task's entry on the workq.
The
.Fa flags ,
.Fa func ,
.Fa arg1 ,
and
.Fa arg2
arguments are the same as those in the
.Fn workq_add_task
function.
However, because the caller is responsible for providing the memory
needed to store the task on the workq,
.Fn workq_queue_task
is guaranteed to succeed.
.Pp
.Fn workq_create
creates a workq to be used when tasks would unnecessarily block the kernel
workq.
The
.Fa name
argument specifies the name of the kernel threads that run the tasks.
.Fa maxthreads
specifies the maximum number of worker threads that will service the work
queue.
.Fa ipl
specifies the interrupt protection level at which the workq can be safely used.
See
.Xr spl 9
for a list of the IPLs.
.Pp
.Fn workq_destroy
causes the resources associated with a previously created workq to be freed.
It will wait till all the tasks in the work queue are completed before
returning.
.Pp
.Fn workq_add_task ,
.Fn workq_create ,
and
.Fn workq_destroy
can be called during
.Xr autoconf 9
or from process context.
.Fn workq_add_task
can additionally be called from interrupt context if
.Dv WQ_WAITOK
is not specified.
.Sh SEE ALSO
.Xr autoconf 9 ,
.Xr spl 9
.Sh HISTORY
The workq framework was originally written by
.An Ted Unangst Aq Mt tedu@@openbsd.org ,
and heavily influenced by arguments with
.An David Gwynne Aq Mt dlg@@openbsd.org .
The workq framework first appeared in
.Ox 4.2 .
@


1.17
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.16 2013/07/17 20:21:56 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: July 17 2013 $
@


1.16
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.15 2013/06/04 19:27:18 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 4 2013 $
d44 1
a44 1
.Pa wq
d47 1
a47 1
.Pa wq
d54 1
a54 1
.Pa func
d56 1
a56 1
.Pa arg1
d58 1
a58 1
.Pa arg2 .
d65 1
a65 1
.Pa flags
d80 1
a80 1
.Pa wq
d82 1
a82 1
.Pa wqt
d85 3
a87 3
.Pa flags ,
.Pa func ,
.Pa arg1 ,
d89 1
a89 1
.Pa arg2
d102 1
a102 1
.Pa name
d104 1
a104 1
.Pa maxthreads
d107 1
a107 1
.Pa ipl
@


1.15
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.14 2009/09/03 15:10:39 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 3 2009 $
d134 1
a134 1
.An Ted Unangst Aq tedu@@openbsd.org ,
d136 1
a136 1
.An David Gwynne Aq dlg@@openbsd.org .
@


1.14
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.13 2009/09/02 14:17:56 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: September 2 2009 $
d27 1
a27 1
.Fd #include <sys/workq.h>
@


1.13
log
@document workq_queue_task
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.12 2008/10/30 23:55:22 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: October 30 2008 $
d81 1
a81 1
argument using the memory provided by the
d83 1
a83 1
argument to store that tasks entry on the workq.
@


1.12
log
@reintroduce mutexes to workqs for locking.

tested by many on many archs including several alpha test.

ok tedu@@ go for it deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.10 2007/11/28 17:06:42 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 28 2007 $
d22 1
d30 2
d77 20
@


1.11
log
@i prefer our ISC license.
@
text
@d30 1
a30 1
.Fn "workq_create" "const char *name" "int maxthreads"
d84 5
d107 2
a108 1
.Xr autoconf 9
@


1.10
log
@readjust list width after previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.9 2007/11/28 15:54:04 tedu Exp $
d5 3
a7 1
.\" All rights reserved.
d9 7
a15 19
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.9
log
@i'm always behind on the doc updates
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.8 2007/11/25 17:40:12 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: November 25 2007 $
d76 1
a76 1
.Bl -tag -offset indent -width WQ_DIRECTOKXXX -compact
@


1.8
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.7 2007/11/25 15:58:29 tedu Exp $
d27 1
a27 1
.Dd $Mdocdate: November 24 2007 $
a82 5
.It Dv WQ_DIRECTOK
If the workq argument is
.Dv NULL ,
process the request immediately instead of
queueing until threads are ready.
@


1.7
log
@document new WQ_DIRECTOK flag
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.6 2007/11/24 14:34:23 tedu Exp $
d76 1
a76 1
.Bl -tag -offset indent -width WQ_WAITOKXXX -compact
d84 3
a86 1
If the workq argument is NULL, process the request immediately instead of
@


1.6
log
@workq_add_task returns ENOMEM on failure
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.5 2007/06/11 22:13:19 thib Exp $
d27 1
a27 1
.Dd $Mdocdate: June 11 2007 $
d83 3
@


1.5
log
@spell tedu's name correctly.

ok jmc@@,tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.4 2007/06/01 00:27:23 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: June 1 2007 $
d82 1
a82 1
.Dv NULL .
@


1.4
log
@start new sentence w/ capital letter;
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.3 2007/05/31 23:36:44 tedu Exp $
d27 1
a27 1
.Dd $Mdocdate: May 31 2007 $
d115 1
a115 1
.An Ted Unanst Aq tedu@@openbsd.org ,
@


1.3
log
@explain the usefulness of being able to provide two arguments
ok dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.2 2007/05/31 21:43:02 dlg Exp $
d74 1
a74 1
the possible flags are:
@


1.2
log
@tedu just moved an argument to workq_add_task
@
text
@d1 1
a1 1
.\"	$OpenBSD: workq_add_task.9,v 1.1 2007/05/31 21:41:41 dlg Exp $
d66 5
@


1.1
log
@add a manpage for workq stuff.

thanks to jmc for tweaking it. im sure he'll find more changes to make soon
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d27 1
a27 1
.Dd $Mdocdate$
d38 1
a38 1
.Fn "workq_add_task" "struct workq *wq" "void (*func)(void *, void *)" "void *arg1" "void *arg2" "int flags"
@

