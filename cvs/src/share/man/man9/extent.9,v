head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.8
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.10
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.14.0.16
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.14
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.12
	OPENBSD_5_0:1.14.0.10
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.8
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@.\" @;


1.19
date	2015.11.01.21.26.48;	author jmc;	state Exp;
branches;
next	1.18;
commitid	WWHUg7NSwgnfw8Dy;

1.18
date	2014.02.08.20.29.01;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2014.01.21.21.46.54;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2013.07.17.20.21.52;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2013.06.04.19.27.06;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2009.04.19.15.26.52;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2009.04.10.20.57.04;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.30.20.34.25;	author jaredy;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.02.08.36.04;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.09.22.42.18;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.05.05.07.47;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.10.20.02.20;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.12.18.05.59;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.09.22.09.54.38;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.09.22.03.16.47;	author csapuntz;	state Exp;
branches;
next	1.1;

1.1
date	99.09.05.16.23.11;	author espie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@replace "can not" with "cannot";
@
text
@.\"	$OpenBSD: extent.9,v 1.18 2014/02/08 20:29:01 kettenis Exp $
.\"	$NetBSD: extent.9,v 1.15 1999/03/16 00:40:47 garbled Exp $
.\"
.\" Copyright (c) 1996, 1998 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Jason R. Thorpe and Greg Hudson.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: February 8 2014 $
.Dt EXTENT 9
.Os
.Sh NAME
.Nm extent_create ,
.Nm extent_destroy ,
.Nm extent_alloc ,
.Nm extent_alloc_with_descr ,
.Nm extent_alloc_subregion ,
.Nm extent_alloc_subregion_with_descr ,
.Nm extent_alloc_region ,
.Nm extent_free ,
.Nm extent_print
.Nd general purpose extent manager
.Sh SYNOPSIS
.In sys/malloc.h
.In sys/extent.h
.Ft struct extent *
.Fn extent_create "char *name" "u_long start" "u_long end" "int mtype" "caddr_t storage" "size_t storagesize" "int flags"
.Ft void
.Fn extent_destroy "struct extent *ex"
.Ft int
.Fn extent_alloc "struct extent *ex" "u_long size" "u_long alignment" "u_long skew" "u_long boundary" "int flags" "u_long *result"
.Ft int
.Fn extent_alloc_with_descr "struct extent *ex" "u_long size" "u_long alignment" "u_long skew" "u_long boundary" "int flags" "struct extent_region *rp" "u_long *result"
.Ft int
.\" too many arguments for a single .Fn
.Fo extent_alloc_subregion
.Fa "struct extent *ex"
.Fa "u_long substart"
.Fa "u_long subend"
.Fa "u_long size"
.Fa "u_long alignment"
.Fa "u_long skew"
.Fa "u_long boundary"
.Fa "int flags"
.Fa "u_long *result"
.Fc
.Ft int
.\" way too many arguments for a single .Fn
.Fo extent_alloc_subregion_with_descr
.Fa "struct extent *ex"
.Fa "u_long substart"
.Fa "u_long subend"
.Fa "u_long size"
.Fa "u_long alignment"
.Fa "u_long skew"
.Fa "u_long boundary"
.Fa "int flags"
.Fa "struct extent_region *rp"
.Fa "u_long *result"
.Fc
.Ft int
.Fn extent_alloc_region "struct extent *ex" "u_long start" "u_long size" "int flags"
.Ft int
.Fn extent_free "struct extent *ex" "u_long start" "u_long size" "int flags"
.Ft void
.Fn extent_print "struct extent *ex"
.Sh DESCRIPTION
The extent manager provides management of areas of memory or
other enumerable spaces (such as I/O ports).
An opaque structure called an
.Nm extent map
keeps track of allocated regions within the enumerable space.
.Pp
.Fn extent_create
creates an extent map managing the space from
.Fa start
to
.Fa end
inclusive.
All memory allocation will use the memory type
.Fa mtype
.Po
see
.Xr malloc 9
.Pc .
The extent map will have the name
.Fa name ,
used for identification in case of errors or in
.Xr ddb 4
.Ic show extents .
If the flag
.Dv EX_NOCOALESCE
is set, internal coalescing of regions is disabled,
and only entire regions may be freed within the extent map, so that
.Fn extent_free
will never have to allocate a region descriptor.
If the flag
.Dv EX_FILLED
is set, the entire space managed by the extent map will be allocated
upon creation of the extent map, such that selected regions may be
made available through calls to
.Fn extent_free .
.Pp
Some applications may want to use an extent map but
can't use
.Fn malloc
and
.Fn free .
These applications may provide pre-allocated storage for
all descriptor overhead with the arguments
.Fa storage
and
.Fa storagesize .
An extent of this type is called a
.Nm fixed extent .
If the application can safely use
.Fn malloc
and
.Fn free ,
.Fa storage
should be
.Dv NULL .
A fixed extent has a fixed number of region descriptors, so care
should be taken to provide enough storage for them; alternatively, the
flag
.Dv EX_MALLOCOK
may be passed to extent requests to indicate that a fixed extent
map may be extended using a call to
.Fn malloc .
Note that passing the flag
.Dv EX_FILLED
to
.Fn extent_create
will consume a region descriptor upon creation of the extent map.
.Pp
The caller should pass the flag
.Dv EX_WAITOK
or
.Dv EX_NOWAIT
to extent functions that have a memory overhead, to specify whether
it is okay to wait.
These functions are
.Fn extent_create
(non fixed extents),
.Fn extent_free
(unless
.Dv EX_NOCOALESCE
is set),
.Fn extent_alloc ,
.Fn extent_alloc_subregion
and
.Fn extent_alloc_region .
.Pp
.Fn extent_destroy
destroys the extent map
.Fa ex ,
freeing all allocated regions.
If the extent is not a fixed extent,
the region and internal extent descriptors themselves are freed.
This function always succeeds.
.Pp
.Fn extent_alloc
allocates a region in the extent map
.Fa ex
of size
.Fa size
that fits the provided parameters.
There are two distinct allocation policies, which are selected by the
.Fa flags
argument:
.Bl -tag -offset indent -width "XXXXXXXXX"
.It Dv EX_FAST
Allocate the first region that fits the provided parameters, regardless
of resulting extent fragmentation.
.It default
Allocate the smallest region that is capable of holding the request,
thus minimizing fragmentation of the extent.
.El
.Pp
The caller may specify that it is okay to wait for space to become free in the
extent by setting the flag
.Dv EX_WAITSPACE .
If
.Dv EX_WAITSPACE
is not set, the allocation will fail if the request cannot be
satisfied without sleeping.
.Pp
The request will be aligned to a multiple of
.Fa alignment .
That value must be a power of 2.
If no alignment is necessary, the value
.Dv EX_NOALIGN
should be specified.
If
.Fa skew
is non-zero, it modifies the requested alignment result in the following way:
the value
.Pq Fa result No - Fa skew
is aligned to
.Fa alignment
boundaries.
.Fa skew
must be a smaller number than
.Fa alignment .
If
.Fa boundary
is not
.Dv EX_NOBOUNDARY ,
the allocated region will not cross any boundary lines, spaced
.Fa boundary
apart.
If the caller specifies the
.Dv EX_BOUNDZERO
flag, boundary lines begin at zero.
Otherwise, boundary lines begin at the beginning of the extent.
The allocated region may begin on a
boundary line, but the end of the region will not touch nor cross a
boundary line.
A
.Fa boundary
argument smaller than the sum of the requested skew and the size of
the request is invalid.
Upon successful completion,
.Fa *result
will contain the start of the allocated region.
.Pp
.Fn extent_alloc_with_descr
is similar to
.Fn extent_alloc
but allows the caller to provide a pre-allocated region descriptor instead
of having the function allocate one.
This function can only be used with extents that have the
.Dv EX_NOCOALESCE
property.
.Pp
.Fn extent_alloc_subregion
and
.Fn extent_alloc_subregion_with_descr
are generalized versions of
.Fn extent_alloc
and
.Fn extent_alloc_with_descr
that allow the caller to specify that the allocated region must fall
within the subregion from
.Fa substart
to
.Fa subend
inclusive.
.Pp
.Fn extent_alloc_region
allocates the specific region in the extent map
.Fa ex
beginning at
.Fa start
with the size
.Fa size .
If the caller specifies the
.Dv EX_CONFLICTOK
flag, the allocation will succeed even if part of the requested region
has already been allocated.
The caller may specify that it is okay to wait for the indicated
region to be free by setting the flag
.Dv EX_WAITSPACE .
If neither
.Dv EX_WAITSPACE
nor
.Dv EX_CONFLICTOK
is set, the allocation will fail if the request cannot be
satisfied without sleeping.
.Pp
.Fn extent_free
frees a region of
.Fa size
bytes starting at
.Fa start
in the extent map
.Fa ex .
If the extent has the
.Dv EX_NOCOALESCE
property, only entire regions may be freed.
If the extent has the
.Dv EX_NOCOALESCE
property and the caller attempts to free a partial region, behavior is
undefined.
If called on an extent without the
.Dv EX_NOCOALESCE
property, this function can fail with error codes listed below, otherwise
this function will always succeed.
.Pp
.Fn extent_print
Prints out information about extent
.Fa ex .
This function always succeeds.
.Sh RETURN VALUES
The behavior of all extent manager functions is undefined if given
invalid arguments.
.Fn extent_create
returns the extent map on success, or
.Dv NULL
if it fails to allocate storage for the extent map.
It always succeeds when creating a fixed extent or when given the flag
.Dv EX_WAITOK .
.Fn extent_alloc ,
.Fn extent_alloc_region ,
.Fn extent_alloc_subregion ,
and
.Fn extent_free
return one of the following values:
.Bl -tag -offset indent -width "XXXXXXXX"
.It Dv 0
Operation was successful.
.It Dv ENOMEM
If
.Dv EX_NOWAIT
is specified, the extent manager was not able to allocate a region
descriptor for the new region or to split a region when freeing a
partial region.
.It Dv EAGAIN
Requested region is not available and
.Dv EX_WAITSPACE
was not specified.
.It Dv EINTR
Process received a signal while waiting for the requested region to
become available in the extent.
.El
.Sh EXAMPLES
Here is an example of a (useless) function that uses several of the
extent manager routines.
.Bd -literal
void
func()
{
	struct extent *foo_ex;
	u_long region_start;
	int error;

	/*
	 * Extent "foo" manages a 256k region starting at 0x0 and
	 * only allows complete regions to be freed so that
	 * extent_free() never needs to allocate memory.
	 */
	foo_ex = extent_create("foo", 0x0, 0x3ffff, M_DEVBUF,
	    NULL, 0, EX_WAITOK | EX_NOCOALESCE);

	/*
	 * Allocate an 8k region, aligned to a 4k boundary, which
	 * does not cross any of the 3 64k boundaries (at 64k,
	 * 128k, and 192k) within the extent.
	 */
	error = extent_alloc(foo_ex, 0x2000, 0x1000, 0x10000,
	    EX_NOWAIT, &region_start);
	if (error)
		panic("you lose");

	/*
	 * Give up the extent.
	 */
	extent_destroy(foo_ex);
}
.Ed
.\"
.\" Yeah, right... document EX_CATCH first...
.\"
.\" .Sh LIMITATIONS
.\" The flag
.\" .Dv EX_CATCH
.\" cannot be used to catch signals in all circumstances since
.\" .Xr malloc 9
.\" does not provide such a functionality.
.Sh CODE REFERENCES
The extent manager itself is implemented within the file
.Pa sys/kern/subr_extent.c .
.Pp
The i386 bus management code uses the extent manager for managing I/O
ports and I/O memory.
See
.Pa sys/arch/i386/i386/machdep.c .
.Sh SEE ALSO
.Xr ddb 4 ,
.Xr malloc 9
.Sh HISTORY
The extent manager appeared in
.Nx 1.3 .
.Sh AUTHORS
.An -nosplit
The extent manager was designed and implemented by
.An Jason R. Thorpe Aq Mt thorpej@@NetBSD.ORG .
.An Matthias Drochner Aq Mt drochner@@zelux6.zel.kfa-juelich.de
contributed to the initial testing and optimization of the implementation.
.An Chris Demetriou Aq Mt cgd@@NetBSD.ORG
contributed many architectural suggestions.
@


1.18
log
@Add extent_alloc_with_descr(9) as a wrapper around
extent_alloc_subregion_with_descr(9) mirroring extent_alloc(9).

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.17 2014/01/21 21:46:54 kettenis Exp $
d31 1
a31 1
.Dd $Mdocdate: January 21 2014 $
d207 1
a207 1
is not set, the allocation will fail if the request can not be
d290 1
a290 1
is set, the allocation will fail if the request can not be
@


1.17
log
@Document extent_alloc_subregion_with_descr(9).
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.16 2013/07/17 20:21:52 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: July 17 2013 $
d38 1
d55 2
d249 9
d259 3
a261 1
is a generalized version of
d263 4
a266 2
that also allows the caller to specify that the allocated region must
fall within the subregion from
a270 9
.Pp
.Fn extent_alloc_subregion_with_descr
is similar to
.Fn extent_alloc_subregion
but allows the caller to provide a pre-allocated region descriptor instead
of having the function allocate one.
This function can only be used with extents that have the
.Dv EX_NOCOALESCE
property.
@


1.16
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.15 2013/06/04 19:27:06 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: June 4 2013 $
d39 1
d67 14
d255 9
@


1.15
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.14 2009/04/19 15:26:52 kettenis Exp $
d31 1
a31 1
.Dd $Mdocdate: April 19 2009 $
d378 2
a379 2
.An Jason R. Thorpe Aq thorpej@@NetBSD.ORG .
.An Matthias Drochner Aq drochner@@zelux6.zel.kfa-juelich.de
d381 1
a381 1
.An Chris Demetriou Aq cgd@@NetBSD.ORG
@


1.14
log
@Add a new EX_FILLED flag to make extent_create() create an extent map that
has all space allocated such that we can make holes in it using extent_free().

ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.13 2009/04/10 20:57:04 kettenis Exp $
d31 1
a31 1
.Dd $Mdocdate: April 10 2009 $
d44 2
a45 2
.Fd #include <sys/malloc.h>
.Fd #include <sys/extent.h>
@


1.13
log
@Add EX_CONFLICTOK flag that allows an allocation to conflict with existing
allocations, making sure that the union of all space is allocated.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.12 2008/06/26 05:42:08 ray Exp $
d31 1
a31 1
.Dd $Mdocdate: June 26 2008 $
d101 6
d134 5
@


1.12
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.11 2007/05/31 19:20:00 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
d237 4
d244 1
a244 1
If
d246 3
a248 1
is not set, the allocation will fail if the request can not be
@


1.11
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.10 2005/09/30 20:34:25 jaredy Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d31 1
a31 1
.Dd $Mdocdate$
@


1.10
log
@deploy .An -nosplit; ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.9 2003/07/02 08:36:04 jmc Exp $
d38 1
a38 1
.Dd September 23, 1996
@


1.9
log
@simplify macro usage;
from wiz@@netbsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.8 2003/06/06 20:56:32 jmc Exp $
d366 1
@


1.8
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.7 2002/08/09 22:42:18 jason Exp $
d198 1
a198 4
.Po Fa result
\& -
.Fa skew
.Pc
@


1.7
log
@Be more explitic that extent_free on EX_NOCOALESCE extents (assuming
otherwise valid arguments) cannot fail.
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.6 2001/10/05 05:07:47 millert Exp $
a361 6
.Sh AUTHORS
The extent manager was designed and implemented by Jason
R. Thorpe <thorpej@@NetBSD.ORG>.
Matthias Drochner <drochner@@zelux6.zel.kfa-juelich.de> contributed to the
initial testing and optimization of the implementation.
Chris Demetriou <cgd@@NetBSD.ORG> contributed many architectural suggestions.
d368 7
@


1.6
log
@Document the skew argument to extent_alloc and extent_alloc_subregion.
From NetBSD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.5 2000/11/10 20:02:20 todd Exp $
d269 4
@


1.5
log
@.Sh AUTHOR -> AUTHORS, ok aaron@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.4 2000/10/12 18:05:59 aaron Exp $
d58 1
a58 1
.Fn extent_alloc "struct extent *ex" "u_long size" "u_long alignment" "u_long boundary" "int flags" "u_long *result"
d60 12
a71 1
.Fn extent_alloc_subregion "struct extent *ex" "u_long substart" "u_long subend" "u_long size" "u_long alignment" "u_long boundary" "u_long flags" "u_long *result"
d195 14
d224 2
a225 1
argument smaller than the size of the request is invalid.
@


1.4
log
@General man page cleanups, mostly to remove trailing whitespace, hard
sentence breaks, and other such things.
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.3 1999/09/22 09:54:38 espie Exp $
d332 1
a332 1
.Sh AUTHOR
@


1.3
log
@REVERT TO PREVIOUS STATE OF AFFAIR.

If those pages are different from the NetBSD version, maybe there's a
reason ?

Like, possibly, I just read our source code, which just happens to do
things in DIFFERENT ways than NetBSD does ?

As far as the added pages go, they obviously haven't been checked against
actual code as well, hence they're worse than useless, since a large part
of the information is definitely misleading.
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.1 1999/09/05 16:23:11 espie Exp $
d29 1
a29 1
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS 
d69 2
a70 2
other enumerable spaces (such as I/O ports).  An opaque structure
called an
d79 2
a80 1
inclusive.  All memory allocation will use the memory type
d88 2
a89 2
used for identification in case of errors or in 
.Xr ddb 4 
d93 1
a93 1
is set, internal coalescing of regions is disabled, 
d129 3
a131 2
to extent functions that have a memory overhead, to specify whether 
it is okay to wait.  These functions are
d136 1
a136 1
.Dv EX_NOCOALESCE 
d139 2
a140 2
.Fn extent_alloc_subregion 
and 
d146 2
a147 1
freeing all allocated regions.  If the extent is not a fixed extent,
d156 2
a157 2
that fits the provided parameters.  There are two distinct allocation
policies, which are selected by the
d169 1
a169 1
The caller may specify that it is okay to wait for space to become free in the 
d179 2
a180 2
That value must be a power of 2.  If no alignment
is necessary, the value 
d182 2
a183 1
should be specified.  If
d186 1
a186 1
.Dv EX_NOBOUNDARY , 
d188 3
a190 2
.Fa boundary 
apart.  If the caller specifies the
d192 6
a197 4
flag, boundary lines begin at zero.  Otherwise, boundary lines
begin at the beginning of the extent.  The allocated region may begin on a
boundary line, but the end of the region will not touch nor cross a 
boundary line.  A 
d199 2
a200 2
argument smaller than the size of the request is
invalid.  Upon successful completion,
d206 1
a206 1
.Fn extent_alloc 
d212 1
a212 1
inclusive.  
d233 1
a233 1
.Fa start 
d238 2
a239 1
property, only entire regions may be freed.  If the extent has the
d242 1
a242 1
undefined.  
d247 1
a247 1
This function always succeeds.  
d254 2
a255 2
if it fails to allocate storage for the extent map.  It always
succeeds when creating a fixed extent or when given the flag
d278 1
a278 1
become available in the extent.  
d312 1
a312 1
	extent_destroy(foo_ex); 
d322 1
a322 1
.\" .Xr malloc 9 
d329 2
a330 1
ports and I/O memory.  See
d334 4
a337 4
R. Thorpe <thorpej@@NetBSD.ORG>.  Matthias Drochner
<drochner@@zelux6.zel.kfa-juelich.de> contributed to the initial
testing and optimization of the implementation.  Chris Demetriou
<cgd@@NetBSD.ORG> contributed many architectural suggestions.
@


1.2
log
@

Add/update some man9 pages from NetBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: extent.9,v 1.15 1999/03/16 00:40:47 garbled Exp $
a41 1
.Nm extent ,
a61 15
.Fn extent_alloc1 "struct extent *ex" "u_long size" "u_long alignment" "u_long skew" "u_long boundary" "int flags" "u_long *result"
.Ft int
.\" too many arguments for a single .Fn
.Fo extent_alloc_subregion1
.Fa "struct extent *ex"
.Fa "u_long substart"
.Fa "u_long subend"
.Fa "u_long size"
.Fa "u_long alignment"
.Fa "u_long skew"
.Fa "u_long boundary"
.Fa "u_long flags"
.Fa "u_long *result"
.Fc
.Ft int
d68 2
a69 4
The
.Nx
extent manager provides management of areas of memory or
other number spaces (such as I/O ports).  An opaque structure
d72 1
a72 1
keeps track of allocated regions within the number space.
d87 4
a90 1
used for identification in case of an error.  If the flag
d92 2
a93 2
is specified, only entire regions may be freed within the extent map,
but internal coalescing of regions is disabled so that
d95 1
a95 7
will never have to allocate a region descriptor and therefore will
never fail.  The caller must specify one of the flags
.Dv EX_NOWAIT
or
.Dv EX_WAITOK ,
specifying whether it is okay to wait for memory allocated for
extent map overhead.
d97 1
a97 1
There are some applications which may want to use an extent map but
d120 1
a120 1
may be passed to allocation requests to indicate that a fixed extent
d124 17
d149 1
a149 1
allocates a region in extent
d159 1
a159 1
Allocate the first region that fits the provided paramters, regardless
d166 2
a167 2
The caller must specify if waiting for space in the extent is allowed
using the flag
d171 1
a171 1
is not specified, the allocation will fail if the request can not be
d173 7
a179 9
The caller must also specify, using the
.Dv EX_NOWAIT
or
.Dv EX_WAITOK
flags, if waiting for overhead allocation is allowed.
The request will be aligned to
.Fa alignment
boundaries.  Alignment values must be a power of 2.  If no alignment
is necessary, the value 1 should be specified.  If
d181 5
a185 4
is nonzero, the allocated region will not cross any of the numbers
which are a multiple of
.Fa boundary .
If the caller specifies the
d187 1
a187 1
flag, the boundary lines begin at zero.  Otherwise, the boundary lines
d189 4
a192 2
boundary address, but the end of the region will not touch nor cross
it.  A boundary argument smaller than the size of the request is
d198 3
a200 3
is similar to
.Fn extent_alloc ,
but it allows the caller to specify that the allocated region must
d205 1
a205 4
inclusive.  The other arguments and the return values of
.Fn extent_alloc_subregion
are otherwise the same as those of
.Fn extent_alloc .
d214 2
a215 2
The caller must specify whether it is okay to wait for the indicated
region to be free using the flag
d219 1
a219 1
is not specified, the allocation will fail if the request can not be
a220 26
The caller must also specify, using the
.Dv EX_NOWAIT 
or
.Dv EX_WAITOK
flags, if waiting for overhead allocation is allowed.
.Pp
The
.Fn extent_alloc1
and
.Fn extent_alloc_subregion1
functions are extensions that take one additional argument, 
.Fa skew ,
that modifies the requested alignment result in the following way:
the value
.Po Fa result
\& -
.Fa skew
.Pc
is aligned to
.Fa alignment
boundaries.
.Fa skew
must be a smaller number than
.Fa alignment .
Also, a boundary argument smaller than the sum of the requested skew
and the size of the request is invalid.
d225 4
a228 4
bytes in extent
.Fa ex
starting at
.Fa start .
d234 1
a234 9
undefined.  The caller must specify one of the flags
.Dv EX_NOWAIT
or
.Dv EX_WAITOK
to specify whether waiting for memory is okay; these flags have
meaning in the event that allocation of a region descriptor is
required during the freeing process.  This situation occurs only when
a partial region that begins and ends in the middle of another region
is freed.  Behavior is undefined if invalid arguments are provided.
d237 1
a237 1
Print out information about extent
d239 1
a239 8
This function always succeeds.  Behavior is undefined if invalid
arguments are provided.
.Sh LOCKING
The extent manager performs all necessary locking on the extent map
itself, and any other data structures internal to the extent manager.
The locks used by the extent manager are spin locks, and will never sleep.
This should be taken into account when designing the locking protocol
for users of the extent manager.
d270 1
a270 2
become available in the extent.  Does not apply to
.Fn extent_free .
d307 9
a316 7
This section describes places within the
.Nx
source tree where
actual code implementing or using the extent manager can be found.
All pathnames are relative to
.Pa /usr/src .
.Pp
a318 2
Function prototypes for the framework are located in
.Pa sys/sys/extent.h .
d321 1
a321 1
ports and I/O memory.  This code is in the file
d324 1
a324 3
The
.Nx
extent manager was architected and implemented by Jason
d330 1
d333 1
a333 3
The
.Nx
extent manager appeared in
@


1.1
log
@New man pages, adapted from NetBSD.
Add corresponding cross-references.
Missed some uses of .Dv.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d42 1
d63 15
d84 4
a87 2
The extent manager provides management of areas of memory or
other enumerable spaces (such as I/O ports).  An opaque structure
d90 1
a90 1
keeps track of allocated regions within the enumerable space.
d105 1
a105 4
used for identification in case of errors or in 
.Xr ddb 4 
.Ic show extents .
If the flag
d107 2
a108 2
is set, internal coalescing of regions is disabled, 
and only entire regions may be freed within the extent map, so that
d110 7
a116 1
will never have to allocate a region descriptor.
d118 1
a118 1
Some applications may want to use an extent map but
d141 1
a141 1
may be passed to extent requests to indicate that a fixed extent
a144 17
The caller should pass the flag
.Dv EX_WAITOK
or
.Dv EX_NOWAIT
to extent functions that have a memory overhead, to specify whether 
it is okay to wait.  These functions are
.Fn extent_create
(non fixed extents),
.Fn extent_free
(unless
.Dv EX_NOCOALESCE 
is set),
.Fn extent_alloc ,
.Fn extent_alloc_subregion 
and 
.Fn extent_alloc_region .
.Pp
d153 1
a153 1
allocates a region in the extent map
d163 1
a163 1
Allocate the first region that fits the provided parameters, regardless
d170 2
a171 2
The caller may specify that it is okay to wait for space to become free in the 
extent by setting the flag
d175 1
a175 1
is not set, the allocation will fail if the request can not be
d177 9
a185 7
.Pp
The request will be aligned to a multiple of
.Fa alignment .
That value must be a power of 2.  If no alignment
is necessary, the value 
.Dv EX_NOALIGN
should be specified.  If
d187 4
a190 5
is not
.Dv EX_NOBOUNDARY , 
the allocated region will not cross any boundary lines, spaced
.Fa boundary 
apart.  If the caller specifies the
d192 1
a192 1
flag, boundary lines begin at zero.  Otherwise, boundary lines
d194 2
a195 4
boundary line, but the end of the region will not touch nor cross a 
boundary line.  A 
.Fa boundary
argument smaller than the size of the request is
d201 3
a203 3
is a generalized version of
.Fn extent_alloc 
that also allows the caller to specify that the allocated region must
d208 4
a211 1
inclusive.  
d220 2
a221 2
The caller may specify that it is okay to wait for the indicated
region to be free by setting the flag
d225 1
a225 1
is not set, the allocation will fail if the request can not be
d227 26
d257 4
a260 4
bytes starting at
.Fa start 
in the extent map
.Fa ex .
d266 9
a274 1
undefined.  
d277 1
a277 1
Prints out information about extent
d279 8
a286 1
This function always succeeds.  
d317 2
a318 1
become available in the extent.  
a354 9
.\"
.\" Yeah, right... document EX_CATCH first...
.\"
.\" .Sh LIMITATIONS
.\" The flag
.\" .Dv EX_CATCH
.\" cannot be used to catch signals in all circumstances since
.\" .Xr malloc 9 
.\" does not provide such a functionality.
d356 7
d365 2
d369 1
a369 1
ports and I/O memory.  See
d372 3
a374 1
The extent manager was designed and implemented by Jason
a379 1
.Xr ddb 4 ,
d382 3
a384 1
The extent manager appeared in
@

