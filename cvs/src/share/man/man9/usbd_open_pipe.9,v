head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3;
locks; strict;
comment	@.\" @;


1.4
date	2016.06.27.23.38.01;	author jmatthew;	state Exp;
branches;
next	1.3;
commitid	7oXxd91vji2D7Ixo;

1.3
date	2015.05.04.14.36.26;	author jmc;	state Exp;
branches;
next	1.2;
commitid	IUm85fKs6zpf8ad3;

1.2
date	2015.05.04.14.18.13;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	rQ2eoiO4NQoTdvso;

1.1
date	2015.05.04.10.12.34;	author mpi;	state Exp;
branches;
next	;
commitid	Y7fymVNEhxWOY0E7;


desc
@@


1.4
log
@the flag is USBD_EXCLUSIVE_USE, not USBD_EXCLUSIVE_ACCESS
@
text
@.\" $OpenBSD: usbd_open_pipe.9,v 1.3 2015/05/04 14:36:26 jmc Exp $
.\"
.\" Copyright (c) 2015 Sean Levy <attila@@stalphonsos.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 4 2015 $
.Dt USBD_OPEN_PIPE 9
.Os
.Sh NAME
.Nm usbd_open_pipe , usbd_open_pipe_intr
.Nd create USB pipe
.Sh SYNOPSIS
.In dev/usb/usb.h
.In dev/usb/usbdi.h
.Ft usbd_status
.Fn usbd_open_pipe "struct usbd_interface *iface" "uint8_t address" "uint8_t flags" "struct usbd_pipe **pipe"
.Ft usbd_status
.Fn usbd_open_pipe_intr "struct usbd_interface *iface" "uint8_t address" "uint8_t flags" "struct usbd_pipe **pipe" "void *priv" "void *buffer" "uint32_t len" "usbd_callback cb" "int ival"
.Sh DESCRIPTION
The
.Fn usbd_open_pipe
and
.Fn usbd_open_pipe_intr
functions create pipes.
A pipe is a logical connection between the host and an endpoint on a
USB device.
USB drivers use pipes to manage transfers to or from a USB
endpoint.
.Pp
The
.Fn usbd_open_pipe
function takes the following arguments:
.Bl -tag -width callback
.It Fa iface
The USB interface for which the pipe is to be created.
.It Fa address
The address of the endpoint in that interface to which the pipe should be
connected.
.It Fa flags
A bitmask of flags.
Currently there is only one flag bit defined:
.Bl -tag -width xxx -offset indent
.It Dv USBD_EXCLUSIVE_USE
Do not allow other pipes to use this endpoint while this pipe exists.
.El
.It Fa pipe
A pointer to where the resulting
.Vt struct usbd_pipe *
should be stored if the call is successful.
.El
.Pp
The
.Fn usbd_open_pipe_intr
takes the following arguments:
.Bl -tag -width callback
.It Fa iface
The USB interface for which the pipe is to be created.
.It Fa address
The endpoint in that interface to which the pipe should be connected.
.It Fa flags
A bitmask of flags.
These flags are not interpreted in the same way as the
.Fa flags
passed to
.Fn usbd_open_pipe .
Instead,
.Fn usbd_open_pipe_intr
implicitly turns on the
.Dv USBD_EXCLUSIVE_USE
bit for the pipe, disallowing multiple interrupt pipes for
the same endpoint.
The
.Fa flags
argument in this case is instead passed directly to
.Xr usbd_setup_xfer 9
as its
.Fa flags
argument, whose interpretation is documented in
its man page.
.It Fa pipe
A pointer to where the resulting
.Vt struct usbd_pipe *
should be stored if the call is successful.
.It Fa priv
A pointer to a private cookie untouched by the USB stack for reuse in
the callback specified by the
.Fa cb
argument.
.It Fa buffer
A pointer to the data buffer for use by the implicit transfer
(see below).
.It Fa len
The length in bytes of
.Fa buffer .
.It Fa cb
A callback invoked every time the interrupt transfer completes.
.It Fa ival
The interval in milliseconds with which the interrupt pipe
should be polled by the USB stack.
.El
.Pp
Pipes created by
.Fn usbd_open_pipe_intr
implicitly have a repeating transfer queued on them which
is run every
.Fa ival
milliseconds.
This implicit transfer is not automatically removed from the list of
transfers maintained by the pipe, unlike normal transfers, and will
continue to be processed every
.Fa ival
milliseconds.
.Sh CONTEXT
.Fn usbd_open_pipe
and
.Fn usbd_open_pipe_intr
can be called during autoconf or from process context.
.Sh SEE ALSO
.Xr usb 4 ,
.Xr usbd_close_pipe 9 ,
.Xr usbd_transfer 9
@


1.3
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: usbd_open_pipe.9,v 1.2 2015/05/04 14:18:13 schwarze Exp $
d54 1
a54 1
.It Dv USBD_EXCLUSIVE_ACCESS
d80 1
a80 1
.Dv USBD_EXCLUSIVE_ACCESS
@


1.2
log
@add missing .Vt macros
@
text
@d1 1
a1 1
.\" $OpenBSD: usbd_open_pipe.9,v 1.1 2015/05/04 10:12:34 mpi Exp $
d46 1
a46 1
the USB interface for which the pipe is to be created.
d51 2
a52 1
A bitmask of flags.  Currently there is only one flag bit defined:
d72 2
a73 2
A bitmask of flags.  These flags are not interpreted in the same
way as the
d82 2
a83 1
the same endpoint.  The
@


1.1
log
@Document usbd_open_pipe(9) and friends, from Sean Levy with some tweaks.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d58 1
a58 1
.Ql struct usbd_pipe *
d91 1
a91 1
.Ql struct usbd_pipe *
@

