head	1.19;
access;
symbols
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.20
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.18
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.16
	OPENBSD_5_0:1.12.0.14
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.12
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.10
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3;
locks; strict;
comment	@.\" @;


1.19
date	2016.03.15.06.49.21;	author jmc;	state Exp;
branches;
next	1.18;
commitid	MqKgfFXnekYP3S1d;

1.18
date	2016.03.15.04.19.26;	author stefan;	state Exp;
branches;
next	1.17;
commitid	dVAAaMtSGQ5wNbP2;

1.17
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.16;
commitid	GVTTSAMZ93Lz4hmE;

1.16
date	2015.02.10.22.23.51;	author jmc;	state Exp;
branches;
next	1.15;
commitid	IQkpT2TPNOwig7wJ;

1.15
date	2015.02.10.21.56.08;	author miod;	state Exp;
branches;
next	1.14;
commitid	C5iGb36LQxjM60Q3;

1.14
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2013.06.04.19.27.15;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.31.19.20.01;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.16.15.15.49;	author uwe;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.14.18.44.21;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.21.08.57.47;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.22.01.54.12;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.07.06.21.37;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.09.22.29.33;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.20.10.32;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.09.22.09.54.38;	author espie;	state dead;
branches;
next	1.1;

1.1
date	99.09.22.03.16.47;	author csapuntz;	state Exp;
branches;
next	;


desc
@@


1.19
log
@spelling fix;
@
text
@.\"	$OpenBSD: uiomove.9,v 1.18 2016/03/15 04:19:26 stefan Exp $
.\"	$NetBSD: uiomove.9,v 1.6 2001/12/26 00:16:30 wiz Exp $
.\"
.\" Copyright (c) 1996 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: March 15 2016 $
.Dt UIOMOVE 9
.Os
.Sh NAME
.Nm uiomove
.Nd move data described by a struct uio
.Sh SYNOPSIS
.In sys/systm.h
.Ft int
.Fn uiomove "void *buf" "size_t n" "struct uio *uio"
.Sh DESCRIPTION
The
.Nm
function copies up to
.Fa n
bytes between the kernel-space address pointed
to by
.Fa buf
and the addresses described by
.Fa uio ,
which may be in user-space or kernel-space.
.Pp
The
.Fa uio
argument is a pointer to a
.Fa struct uio
as defined by
.In sys/uio.h :
.Bd -literal
struct uio {
	struct	iovec *uio_iov;	/* pointer to array of iovecs */
	int	uio_iovcnt;	/* number of iovecs in array */
	off_t	uio_offset;	/* offset into file this uio corresponds to */
	size_t	uio_resid;	/* residual i/o count */
	enum	uio_seg uio_segflg;
	enum	uio_rw uio_rw;
	struct	proc *uio_procp;/* associated process or NULL */
};
.Ed
.Pp
A
.Fa struct uio
typically describes data in motion.
Several of the fields described below reflect that expectation.
.Bl -tag -width uio_xxxxxx
.It uio_iov
Pointer to array of
.Fa struct iovecs :
.Bd -literal
struct iovec {
	void	*iov_base;	/* Base address. */
	size_t	 iov_len;	/* Length. */
};
.Ed
.It uio_iovcnt
The number of iovecs in the array.
.It uio_offset
An offset into the corresponding object.
.It uio_resid
The amount of data remaining to be transferred.
.It uio_segflg
A flag indicating whether the space described is in user-space
(UIO_USERSPACE) or kernel-space (UIO_SYSSPACE).
.It uio_rw
A flag indicating whether data should be read into the space
(UIO_READ) or written from the space (UIO_WRITE).
.It uio_procp
A pointer to a process whose data area is described by the
structure, or which is having the I/O done on its behalf if
the area is in kernel-space.
.Nm uiomove
itself does not use this field if the area is in kernel-space,
but other functions that take a
.Fa struct uio
may depend on this information.
.El
.Pp
The value of
.Fa uio->uio_rw
controls whether
.Nm
copies data from
.Fa buf
to
.Fa uio
or vice versa.
.Pp
The lesser of
.Fa n
or
.Fa uio->uio_resid
bytes are copied.
.Pp
.Nm
changes fields of the structure pointed to by
.Fa uio ,
such that
.Fa uio->uio_resid
is decremented by the amount of data moved,
.Fa uio->uio_offset
is incremented by the same amount, and the array of iovecs is adjusted
to point that much farther into the region described.
This allows multiple calls to
.Nm
to easily be used to fill or drain the region of data.
.Sh RETURN VALUES
.Nm
returns 0 on success or EFAULT if a bad address is encountered.
.Sh SEE ALSO
.Xr copy 9
@


1.18
log
@Remove now unused legacy uiomovei() function.

All its callers got reviewed and converted to
use uiomove() properly.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.17 2015/11/23 17:53:57 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: November 23 2015 $
d135 1
a135 1
returs 0 on success or EFAULT if a bad address is encountered.
@


1.17
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.16 2015/02/10 22:23:51 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: February 10 2015 $
d32 1
a32 2
.Nm uiomove ,
.Nm uiomovei
a37 2
.Ft int
.Fn uiomovei "void *buf" "int n" "struct uio *uio"
a132 7
.Pp
The
.Nm uiomovei
function is similar to
.Nm uiomove ,
but uses a signed integer as the byte count.
It is a temporary legacy interface and should not be used in new code.
d135 1
a135 3
and
.Nm uiomovei
return 0 on success or EFAULT if a bad address is encountered.
@


1.16
log
@remove extra word in previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.15 2015/02/10 21:56:08 miod Exp $
d32 2
a33 1
.Nm uiomove
@


1.15
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.14 2014/01/21 03:15:46 schwarze Exp $
d28 1
a28 1
.Dd $Mdocdate: January 21 2014 $
d138 1
a138 1
function is a similar to
@


1.14
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.13 2013/06/04 19:27:15 schwarze Exp $
d28 1
a28 1
.Dd $Mdocdate: June 4 2013 $
d37 3
a39 1
.Fn uiomove "void *buf" "int n" "struct uio *uio"
d135 7
d144 3
a146 1
returns 0 on success or EFAULT if a bad address is encountered.
@


1.13
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.12 2008/06/26 05:42:08 ray Exp $
d28 1
a28 1
.Dd $Mdocdate: June 26 2008 $
d55 1
a55 1
.Aq Pa sys/uio.h :
@


1.12
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.11 2007/05/31 19:20:01 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d35 1
a35 1
.Fd #include <sys/systm.h>
@


1.11
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.10 2005/11/16 15:15:49 uwe Exp $
a14 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d28 1
a28 1
.Dd $Mdocdate$
@


1.10
log
@Suggest filling in uio_procp even if the area is in kernel-space if
the structure is passed to functions other than uiomove();
discussed with pedro@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.9 2005/02/14 18:44:21 jmc Exp $
d35 1
a35 1
.Dd February 12, 1999
@


1.9
log
@uio->uio_resid, not uio->resid;

from kirihara masaharu (netbsd pr #29355);
ok miod@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.8 2004/07/21 08:57:47 jmc Exp $
d71 1
a71 1
	struct	proc *uio_procp;/* process if UIO_USERSPACE */
d102 8
a109 2
A pointer to the process whose data area is described by the
structure, or NULL if the area is in kernel-space.
@


1.8
log
@typo from netbsd (-r 1.10);
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.7 2003/07/22 01:54:12 tedu Exp $
d119 1
a119 1
.Fa uio->resid
@


1.7
log
@uiomove takes void * now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.6 2003/06/06 20:56:32 jmc Exp $
d99 1
a99 1
A flag indicating whether date should be read into the space
@


1.6
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.5 2003/03/07 06:21:37 david Exp $
d44 1
a44 1
.Fn uiomove "caddr_t buf" "int n" "struct uio *uio"
@


1.5
log
@$OpenBSD$
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d70 1
a70 1
	enum	uio_rw uio_rw;	
@


1.4
log
@Remove fetch(9) and store(9) manual pages and references to them.
@
text
@d1 1
@


1.3
log
@uimove(9) from NetBSD with minor changes for OpenBSD.  We should
consider changing the size parameter to uiomove() from int to size_t.
@
text
@d137 1
a137 3
.Xr copy 9 ,
.Xr fetch 9 ,
.Xr store 9
@


1.2
log
@REVERT TO PREVIOUS STATE OF AFFAIR.

If those pages are different from the NetBSD version, maybe there's a
reason ?

Like, possibly, I just read our source code, which just happens to do
things in DIFFERENT ways than NetBSD does ?

As far as the added pages go, they obviously haven't been checked against
actual code as well, hence they're worse than useless, since a large part
of the information is definitely misleading.
@
text
@d1 1
a1 2
.\"	$OpenBSD: uiomove.9,v 1.1 1999/09/22 03:16:47 csapuntz Exp $
.\"	$NetBSD: uiomove.9,v 1.3 1999/03/16 00:40:48 garbled Exp $
d43 1
a43 1
.Fn uiomove "void *buf" "int n" "struct uio *uio"
d45 1
a45 2

The 
d47 1
a47 1
function copies up to 
d50 1
a50 1
to by 
d54 3
a56 3
which may be in user-space or kernel-space. 

The 
d58 1
a58 1
argument is a pointer to a 
d68 1
a68 1
	enum	uio_seg uio_segflg; 
d73 2
a74 2

A 
a77 1

d80 1
a80 1
Pointer to array of 
d93 1
a93 2
The amount of space described by the structure; notionally, the amount
of data remaining to be transferred.
d99 1
a99 1
(UIO_READ) or written from the space (UIO_WRITE). 
d104 1
a104 1

d107 1
a107 1
controls whether 
d109 1
a109 1
copies data from 
d113 3
a115 3
or vice versa. 

The lesser of 
d117 1
a117 1
or 
d119 3
a121 3
bytes are copied. 

.Nm 
d123 2
a124 2
.Fa uio , 
such that 
d126 2
a127 2
is decremented by the amount of data moved, 
.Fa uio->uio_offset 
d130 1
a130 1
This allows multiple calls to 
a132 2


d134 1
a134 1
.Nm 
a135 1

d137 1
d139 1
a139 2
.Xr store 9 ,
.Xr copy 9
@


1.1
log
@

Add/update some man9 pages from NetBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: uiomove.9,v 1.3 1999/03/16 00:40:48 garbled Exp $
@

