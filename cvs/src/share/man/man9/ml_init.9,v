head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.8
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@.\" @;


1.13
date	2016.04.15.05.05.21;	author dlg;	state Exp;
branches;
next	1.12;
commitid	ZmGLFaWO5K4UN2cP;

1.12
date	2015.11.24.14.56.10;	author jmc;	state Exp;
branches;
next	1.11;
commitid	SeFZBpNT6Q4GIXpW;

1.11
date	2015.11.21.18.52.16;	author jmc;	state Exp;
branches;
next	1.10;
commitid	YtcsGzdXC7qGLuXS;

1.10
date	2015.11.21.11.46.24;	author mpi;	state Exp;
branches;
next	1.9;
commitid	R3ua3lEs0X7VVO7b;

1.9
date	2015.11.21.00.32.46;	author dlg;	state Exp;
branches;
next	1.8;
commitid	U6nznGWDCPokFk3a;

1.8
date	2015.11.02.09.21.48;	author dlg;	state Exp;
branches;
next	1.7;
commitid	PesTrvy25aL3WZ7G;

1.7
date	2015.10.22.05.26.06;	author dlg;	state Exp;
branches;
next	1.6;
commitid	Z4k0lD49Bt5dFQva;

1.6
date	2015.10.02.09.24.13;	author sobrado;	state Exp;
branches;
next	1.5;
commitid	TofXoWE3NW1YGWou;

1.5
date	2015.09.23.12.44.35;	author dlg;	state Exp;
branches;
next	1.4;
commitid	KpqjvieQSx4BnC64;

1.4
date	2015.09.14.15.14.55;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	TPchOLbdlEugnrt2;

1.3
date	2015.09.10.15.59.18;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	nVuRWJDyjSSrKiR4;

1.2
date	2015.08.14.05.25.29;	author dlg;	state Exp;
branches;
next	1.1;
commitid	zw6gETat7LvrmWZO;

1.1
date	2015.06.17.06.24.46;	author mpi;	state Exp;
branches;
next	;
commitid	qlrqL3TQLE2Q12SU;


desc
@@


1.13
log
@remove ml_filter, mq_filter, niq_filter.

theyre currently unused, so no functional change.
@
text
@.\"     $OpenBSD: ml_init.9,v 1.12 2015/11/24 14:56:10 jmc Exp $
.\"
.\"  Copyright (c) 2015 David Gwynne <dlg@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: November 24 2015 $
.Dt ML_INIT 9
.Os
.Sh NAME
.Nm ml_init ,
.Nm ml_enqueue ,
.Nm ml_dequeue ,
.Nm ml_enlist ,
.Nm ml_dechain ,
.Nm ml_len ,
.Nm ml_empty ,
.Nm ml_purge ,
.Nm MBUF_LIST_INITIALIZER ,
.Nm MBUF_LIST_FIRST ,
.Nm MBUF_LIST_NEXT ,
.Nm MBUF_LIST_FOREACH
.Nd mbuf list API
.Sh SYNOPSIS
.In sys/mbuf.h
.Ft void
.Fn ml_init "struct mbuf_list *ml"
.Ft void
.Fn ml_enqueue "struct mbuf_list *ml" "struct mbuf *m"
.Ft struct mbuf *
.Fn ml_dequeue "struct mbuf_list *ml"
.Ft void
.Fn ml_enlist "struct mbuf_list *ml" "struct mbuf_list *src"
.Ft struct mbuf *
.Fn ml_dechain "struct mbuf_list *ml"
.Ft unsigned int
.Fn ml_len "struct mbuf_list *ml"
.Ft int
.Fn ml_empty "struct mbuf_list *ml"
.Ft unsigned int
.Fn ml_purge "struct mbuf_list *ml"
.Ft struct mbuf_list
.Fn MBUF_LIST_INITIALIZER
.Ft struct mbuf *
.Fn MBUF_LIST_FIRST "struct mbuf_list *ml"
.Ft struct mbuf *
.Fn MBUF_LIST_NEXT "struct mbuf *m"
.Fn MBUF_LIST_FOREACH "struct mbuf_list *ml" "VARNAME"
.Sh DESCRIPTION
The mbuf list API provides implementations of data structures and operations
for managing lists of mbufs between contexts.
.Pp
mbuf_list structures support the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Insertion of a new mbuf at the end of the list.
.It
Removal of an mbuf from the head of the list.
.El
.Bl -tag -width Ds
.It Fn ml_init "struct mbuf_list *ml"
Initialise the
.Fa ml
mbuf_list structure.
.It Fn MBUF_LIST_INITIALIZER
An initialiser for an mbuf_list structure declaration.
.It Fn ml_enqueue "struct mbuf_list *ml" "struct mbuf *m"
Enqueue mbuf
.Fa m
on the end of the
.Fa ml
mbuf list.
.It Fn ml_dequeue "struct mbuf_list *ml"
Dequeue an mbuf from the front of the
.Fa ml
mbuf list.
.It Fn ml_enlist "struct mbuf_list *ml" "struct mbuf_list *src"
Enqueue all the mbufs on the
.Fa src
mbuf list on to the end of the
.Fa ml
mbuf list.
.It Fn ml_dechain "struct mbuf_list *ml"
Dequeues all mbufs from the
.Fa ml
mbuf list.
.It Fn ml_len "struct mbuf_list *ml"
Return the number of mbufs on the
.Fa ml
mbuf list.
.It Fn ml_empty "struct mbuf_list *ml"
Return if the
.Fa ml
mbuf list is empty.
.It Fn ml_purge "struct mbuf_list *ml"
Free all the mbufs on the
.Fa ml
mbuf list.
.It Fn MBUF_LIST_FIRST "struct mbuf_list *ml"
Access the first mbuf in the
.Fa ml
mbuf list for traversal.
.It Fn MBUF_LIST_NEXT "struct mbuf *m"
Access the next mbuf in the mbuf list after
.Fa m .
.It Fn MBUF_LIST_FOREACH "struct mbuf_list *ml" "VARNAME"
A convenience macro that can be used to iterate over the contents of the
.Fa ml
mbuf list.
.Fa VARNAME
identifies the name (not the address) of an mbuf pointer that will
be set to each entry on the list.
Note that it is unsafe to modify the list while iterating over it.
.El
.Sh CONTEXT
.Fn ml_init ,
.Fn ml_enqueue ,
.Fn ml_dequeue ,
.Fn ml_enlist ,
.Fn ml_dechain ,
.Fn ml_len ,
.Fn ml_empty ,
.Fn ml_purge ,
.Fn MBUF_LIST_INITIALIZER ,
.Fn MBUF_LIST_FIRST ,
.Fn MBUF_LIST_NEXT ,
and
.Fn MBUF_LIST_FOREACH
can be called during autoconf, from process context, or from interrupt context.
.Sh RETURN VALUES
.Fn ml_dequeue
returns the mbuf that was at the head of its list.
If the list was empty,
.Dv NULL
is returned.
.Pp
.Fn ml_dechain
returns all the mbufs that were on the list via
a pointer to an mbuf with the chain accessible via m_nextpkt members.
If the list was empty,
.Dv NULL
is returned.
.Pp
.Fn ml_len
returns the number of mbufs on the list.
.Pp
.Fn ml_empty
return a non-zero value if the list is empty, otherwise 0.
.Pp
.Fn ml_purge
returns the number of mbufs that were freed.
.Pp
.Fn MBUF_LIST_FIRST
returns the first mbuf in the mbuf list, or
.Dv NULL
if the list is empty.
.Pp
.Fn MBUF_LIST_NEXT
returns the next mbuf in the mbuf list, or
.Dv NULL
if the end of the list has been reached.
.Sh SEE ALSO
.Xr mbuf 9
@


1.12
log
@two missing NAME entries;
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.11 2015/11/21 18:52:16 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 21 2015 $
a25 1
.Nm ml_filter ,
a45 6
.Ft struct mbuf *
.Fo ml_filter
.Fa "struct mbuf_list *ml"
.Fa "int (*filter)(void *, struct mbuf *)"
.Fa "void *context"
.Fc
a97 19
.It Fo ml_filter
.Fa "struct mbuf_list *ml"
.Fa "int (*filter)(void *, struct mbuf *)"
.Fa "void *context"
.Fc
Iterates over the mbufs on the
.Fa ml
mbuf list, passing each of them to the
.Fa filter
function.
If the
.Fa filter
returns non-zero, the packet is removed from the
.Fa ml
mbuf list to be returned as part of an mbuf chain by
.Fn ml_filter .
.Fa context
is passed as the first argument to each call of
.Fa filter .
a151 7
.Dv NULL
is returned.
.Pp
.Fn ml_filter
returns the mbufs that were successfully matched by the filter
function on the list via a pointer to a chain of mbufs.
If no packets matched the filter,
@


1.11
log
@previous chopped off too much;
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.10 2015/11/21 11:46:24 mpi Exp $
d26 1
d29 1
@


1.10
log
@Retire ml_requeue(9) and mq_requeue(9).

As Kenjiro Cho pointed out it is very hard to cancel a dequeue operation
for some queueing disciplines when such it keeps some internal states.

As you can see, APIs can also Live Fast & Die Young.

ok dlg@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.9 2015/11/21 00:32:46 dlg Exp $
d75 1
a75 1
.It
@


1.9
log
@provide MBUF_LIST_FIRST and MBUF_LIST_NEXT for iterating over an mbuf_list.

MBUF_LIST_FOREACH is then rewritten on top of those.

this makes it easier to get at the head of a list too, which may make
the hfsc ifq backend nicer.

based on a discussion with kenjiro cho
ok mpi@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.8 2015/11/02 09:21:48 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: November 2 2015 $
a23 1
.Nm ml_requeue ,
a41 2
.Fn ml_requeue "struct mbuf_list *ml" "struct mbuf *m"
.Ft void
a75 4
Reinsertion of an mbuf at the head of the list.
.It
Removal of the entire chain of mbufs on the list.
.El
a92 6
.It Fn ml_requeue "struct mbuf_list *ml" "struct mbuf *m"
Enqueue mbuf
.Fa m
at the head of the
.Fa ml
mbuf list.
a153 1
.Fn ml_requeue ,
@


1.8
log
@provide ml_purge and mq_purge.

these are modelled on IF_PURGE or IFQ_PURGE. they m_freem all the
mbufs on an mbuf list or queue.

ok jmatthew@@ mpi@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.7 2015/10/22 05:26:06 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: October 22 2015 $
d30 2
d62 4
d147 7
d174 2
d208 10
@


1.7
log
@rename ml_join to ml_enlist and expose it to the rest of the kernel.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.6 2015/10/02 09:24:13 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: October 2 2015 $
d56 2
d137 4
d159 1
d190 3
@


1.6
log
@fix typo.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.5 2015/09/23 12:44:35 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: September 23 2015 $
d25 1
d42 2
d98 6
d149 1
@


1.5
log
@ml_init and mq_init return void.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.4 2015/09/14 15:14:55 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: September 14 2015 $
d57 1
a57 1
The mbuf list API provides implementions of data structures and operations
@


1.4
log
@Remove useless quoting from .Fo and .Fn function names, to prevent
development of a cargo cult in case people look at existing files
for examples.  This achieves a consistent .Fo and .Fn quoting style
across the whole tree.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.3 2015/09/10 15:59:18 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: September 10 2015 $
d33 1
@


1.3
log
@delete bogus trailing comma from .Nm in NAME section
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.2 2015/08/14 05:25:29 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: August 14 2015 $
d33 1
a33 1
.Fn "ml_init" "struct mbuf_list *ml"
d35 1
a35 1
.Fn "ml_enqueue" "struct mbuf_list *ml" "struct mbuf *m"
d37 1
a37 1
.Fn "ml_dequeue" "struct mbuf_list *ml"
d39 1
a39 1
.Fn "ml_requeue" "struct mbuf_list *ml" "struct mbuf *m"
d41 1
a41 1
.Fn "ml_dechain" "struct mbuf_list *ml"
d49 1
a49 1
.Fn "ml_len" "struct mbuf_list *ml"
d51 1
a51 1
.Fn "ml_empty" "struct mbuf_list *ml"
d53 2
a54 2
.Fn "MBUF_LIST_INITIALIZER"
.Fn "MBUF_LIST_FOREACH" "struct mbuf_list *ml" "VARNAME"
d72 1
a72 1
.It Fn "ml_init" "struct mbuf_list *ml"
d76 1
a76 1
.It Fn "MBUF_LIST_INITIALIZER"
d78 1
a78 1
.It Fn "ml_enqueue" "struct mbuf_list *ml" "struct mbuf *m"
d84 1
a84 1
.It Fn "ml_dequeue" "struct mbuf_list *ml"
d88 1
a88 1
.It Fn "ml_requeue" "struct mbuf_list *ml" "struct mbuf *m"
d94 1
a94 1
.It Fn "ml_dechain" "struct mbuf_list *ml"
d117 1
a117 1
.It Fn "ml_len" "struct mbuf_list *ml"
d121 1
a121 1
.It Fn "ml_empty" "struct mbuf_list *ml"
d125 1
a125 1
.It Fn "MBUF_LIST_FOREACH" "struct mbuf_list *ml" "VARNAME"
@


1.2
log
@provide ml_requeue and mq_requeue for prepending mbufs on lists/queues

ok mpi@@ claudio@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: ml_init.9,v 1.1 2015/06/17 06:24:46 mpi Exp $
d17 1
a17 1
.Dd $Mdocdate: June 17 2015 $
d29 1
a29 1
.Nm MBUF_LIST_FOREACH ,
@


1.1
log
@Move mbuf_list and mbuf_queue documentation in their own manual.

ok jmc@@, deraadt@@, dlg@@
@
text
@d1 1
a1 1
.\"     $OpenBSD$
d17 1
a17 1
.Dd $Mdocdate: February 19 2015 $
d24 1
d38 2
d67 2
d88 6
d138 1
@

