head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.8
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.10
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.14.0.12
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.10
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.8
	OPENBSD_5_0:1.14.0.6
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.1.0.10
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.8
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@.\" @;


1.23
date	2016.06.19.11.54.33;	author natano;	state Exp;
branches;
next	1.22;
commitid	wHLNY5GFNXJSFYaC;

1.22
date	2014.02.13.14.23.05;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2014.02.13.13.16.40;	author dlg;	state Exp;
branches;
next	1.20;

1.20
date	2014.02.13.13.12.32;	author dlg;	state Exp;
branches;
next	1.19;

1.19
date	2014.01.19.10.01.35;	author dlg;	state Exp;
branches;
next	1.18;

1.18
date	2013.12.09.03.16.29;	author dlg;	state Exp;
branches;
next	1.17;

1.17
date	2013.12.09.03.14.30;	author dlg;	state Exp;
branches;
next	1.16;

1.16
date	2013.07.17.20.21.54;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2013.06.04.19.27.10;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2010.08.08.12.39.05;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.07.20.30.21;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2009.09.08.13.36.20;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2009.09.08.06.02.47;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.08.05.58.35;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2009.05.11.19.49.25;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.25.20.14.42;	author weingart;	state Exp;
branches;
next	1.7;

1.7
date	2007.12.09.20.54.01;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.09.09.53.10;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.09.00.58.28;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.14.16.39.34;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.13.11.34.25;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.18.16.15.32;	author pedro;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Remove the lockmgr() API. It is only used by filesystems, where it is a
trivial change to use rrw locks instead. All it needs is LK_* defines
for the RW_* flags.

tested by naddy and sthen on package building infrastructure
input and ok jmc mpi tedu
@
text
@.\" $OpenBSD: mutex.9,v 1.22 2014/02/13 14:23:05 jmc Exp $
.\"
.\" Copyright (c) 2005 Pedro Martelletto <pedro@@ambientworks.net>
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: February 13 2014 $
.Dt MUTEX 9
.Os
.Sh NAME
.Nm mutex ,
.Nm mtx_init ,
.Nm mtx_enter ,
.Nm mtx_enter_try ,
.Nm mtx_leave ,
.Nm MUTEX_ASSERT_LOCKED ,
.Nm MUTEX_ASSERT_UNLOCKED ,
.Nm MUTEX_INITIALIZER
.Nd interface to CPU mutexes
.Sh SYNOPSIS
.In sys/mutex.h
.Ft void
.Fn mtx_init "struct mutex *mtxp" "int wantipl"
.Ft void
.Fn mtx_enter "struct mutex *mtxp"
.Ft int
.Fn mtx_enter_try "struct mutex *mtxp"
.Ft void
.Fn mtx_leave "struct mutex *mtxp"
.Fn MUTEX_ASSERT_LOCKED "struct mutex *mtxp"
.Fn MUTEX_ASSERT_UNLOCKED "struct mutex *mtxp"
.Fn MUTEX_INITIALIZER "int wantipl"
.Sh DESCRIPTION
The
.Nm
set of functions provides a non-recursive, interrupt-aware spinning mechanism
to ensure mutual exclusion between different CPUs.
.Pp
The
.Fn mtx_init
function is used to initiate the mutex pointed to by
.Fa mtxp .
When acquired, the mutex will cause the processor interrupt level to be raised
to
.Fa wantipl
if necessary.
.Pp
The
.Fn mtx_enter
function acquires a mutex, spinning if necessary.
.Pp
The
.Fn mtx_enter_try
function attempts to acquire a mutex.
.Pp
The
.Fn mtx_leave
function releases a mutex.
In case the acquisition of the mutex caused the interrupt level to be changed,
it is then restored.
.Pp
The
.Fn MUTEX_ASSERT_LOCKED
and
.Fn MUTEX_ASSERT_UNLOCKED
macros may be used to assert that a mutex is held locked or unlocked by
the current CPU.
.Pp
A mutex declaration may be initialised with the
.Fn MUTEX_INITIALIZER
macro.
When acquired, the mutex will cause the processor interrupt level to be raised
to
.Fa wantipl
if necessary.
.Sh CONTEXT
.Fn mtx_init
can be called during autoconf, from process context, or from interrupt
context.
.Pp
.Fn mtx_enter ,
.Fn mtx_enter_try ,
and
.Fn mtx_leave
can be called during autoconf, from process context, or from any
interrupt context at or below the interrupt level
.Fa mtxp
was initialised with.
.Sh RETURN VALUES
The
.Fn mtx_enter_try
function will return non-zero if it succeeds in acquiring the mutex
.Fa mtxp ,
otherwise it will return 0.
.Sh SEE ALSO
.Xr msleep 9 ,
.Xr rwlock 9 ,
.Xr spl 9
.Sh HISTORY
The
.Nm
functions first appeared in
.Ox 3.6 .
.Sh AUTHORS
The
.Nm
functions were written by
.An Artur Grabowski Aq Mt art@@openbsd.org .
.Sh CAVEATS
As these are spinning locks, don't sleep while holding one.
.Pp
Multiple mutexes may be nested, but not interleaved.
This is okay:
.Bd -literal -offset indent
mtx_enter(foo);
mtx_enter(bar);
mtx_leave(bar);
mtx_leave(foo);
.Ed
.Pp
While this is
.Fa not :
.Bd -literal -offset indent
mtx_enter(foo);
mtx_enter(bar);
mtx_leave(foo);
mtx_leave(bar);
.Ed
@


1.22
log
@lowercase non-capital;
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.21 2014/02/13 13:16:40 dlg Exp $
a106 1
.Xr lockmgr 9 ,
@


1.21
log
@use the return values section to document return values
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.20 2014/02/13 13:12:32 dlg Exp $
d103 1
a103 1
function will return non-zero If it succeeds in acquiring the mutex
@


1.20
log
@explicitely document the contexts you can call mutex functions in.
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.19 2014/01/19 10:01:35 dlg Exp $
d18 1
a18 1
.Dd $Mdocdate: January 19 2014 $
a65 2
If it succeeds in acquiring the mutex it will return non-zero, otherwise
it will return 0.
d100 6
@


1.19
log
@msleep.9 is relevant to my interests.

ok guenther@@
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.18 2013/12/09 03:16:29 dlg Exp $
d18 1
a18 1
.Dd $Mdocdate: December 9 2013 $
d89 13
a118 3
.Pp
If using a mutex in an interrupt handler, locks must be initialised
with the correct IPL or deadlock will occur.
@


1.18
log
@.Nm lines for the macros
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.17 2013/12/09 03:14:30 dlg Exp $
d91 1
@


1.17
log
@basic documentation for MUTEX_INITIALIZER.
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.16 2013/07/17 20:21:54 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 17 2013 $
d26 4
a29 1
.Nm mtx_leave
@


1.16
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.15 2013/06/04 19:27:10 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 4 2013 $
d40 1
d78 8
@


1.15
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.14 2010/08/08 12:39:05 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: August 8 2010 $
d90 1
a90 2
.An Artur Grabowski
.Aq art@@openbsd.org .
@


1.14
log
@cpu -> CPU;
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.13 2010/08/07 20:30:21 oga Exp $
d18 1
a18 1
.Dd $Mdocdate: August 7 2010 $
d29 1
a29 1
.Fd #include <sys/mutex.h>
@


1.13
log
@Document the mutex locking assert macros.

Requested by marco.

ok marco@@, schwarze@@ (who insists that manpages are still unlocked).
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.12 2009/09/08 13:36:20 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: September 8 2009 $
d76 1
a76 1
the current cpu.
@


1.12
log
@missing word;
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.11 2009/09/08 06:02:47 deraadt Exp $
d38 2
d70 7
@


1.11
log
@slight corrections from what dlg just commited
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.10 2009/09/08 05:58:35 dlg Exp $
d60 1
a60 1
If it succeeds in acquiring the mutex it will non-zero, otherwise
@


1.10
log
@another missing bit of mtx_enter_try.
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.9 2009/05/11 19:49:25 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: May 11 2009 $
d25 1
d60 1
a60 1
If it succeeds in acquiring the mutex it will return 1, otherwise
@


1.9
log
@remove the mtx_enter_try() bits until the code goes back in;
ok weingart
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.8 2009/04/25 20:14:42 weingart Exp $
d18 1
a18 1
.Dd $Mdocdate: April 25 2009 $
d33 2
d55 6
@


1.8
log
@Enter mtx_enter_try.  In part for completeness, things may start
using this soon(ish).  Ok oga@@, sorta yes kettenis@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.7 2007/12/09 20:54:01 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: December 9 2007 $
a24 1
.Nm mtx_enter_try ,
a32 2
.Ft int
.Fn mtx_enter_try "struct mutex *mtxp"
a52 6
.Pp
The
.Fn mtx_enter_try
function tries to acquire a mutex.
On success it will return a non-zero value, zero on failure.
It is recommended that this function only be used if absolutely necessary.
@


1.7
log
@update pedro's email address, at his request;
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.6 2007/12/09 09:53:10 jmc Exp $
d25 1
d34 2
d56 6
@


1.6
log
@kill trailing whitespace;
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.5 2007/12/09 00:58:28 tedu Exp $
d3 1
a3 1
.\" Copyright (c) 2005 Pedro Martelletto <pedro@@openbsd.org>
@


1.5
log
@clarify that mtx_enter will only raise the ipl if necessary (not
arbitrarily set it).
noticed by deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.4 2007/05/31 19:20:00 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: May 31 2007 $
d47 1
a47 1
.Fa wantipl 
@


1.4
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.3 2007/05/14 16:39:34 jsg Exp $
d18 1
a18 1
.Dd $Mdocdate$
d45 1
a45 1
When acquired, the mutex will cause the processor interrupt level to be changed
d47 2
a48 1
.Fa wantipl .
@


1.3
log
@Add notes about sleeping with held locks and interrupt handler usage.
Based on comments by art, and tweaked by jmc.

ok art@@
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.2 2007/05/13 11:34:25 jsg Exp $
d18 1
a18 1
.Dd February 9, 2005
@


1.2
log
@reference rwlock(9)
@
text
@d1 1
a1 1
.\" $OpenBSD: mutex.9,v 1.1 2005/02/18 16:15:32 pedro Exp $
d74 5
@


1.1
log
@Manual page for the mutex set of functions. Okay jmc@@ and art@@.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d60 1
@

