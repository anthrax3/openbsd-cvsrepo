head	1.34;
access;
symbols
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.34.0.4
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.33.0.12
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.4
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.8
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.6
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.2
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.31.0.4
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.2
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.2
	OPENBSD_5_0:1.29.0.4
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.26.0.14
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.26.0.10
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.12
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.26.0.8
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.6
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.4
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.26.0.2
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.22.0.12
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.10
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.8
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.6
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.21.0.4
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	OPENBSD_3_3:1.19.0.2
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.18.0.4
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.13.0.2
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@# @;


1.34
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.33;
commitid	GVTTSAMZ93Lz4hmE;

1.33
date	2013.07.17.20.21.52;	author schwarze;	state Exp;
branches;
next	1.32;

1.32
date	2013.06.04.19.27.04;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2012.04.06.15.42.56;	author jsing;	state Exp;
branches;
next	1.30;

1.30
date	2011.10.06.22.22.11;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2010.11.17.15.01.05;	author bluhm;	state Exp;
branches;
next	1.28;

1.28
date	2010.09.23.14.06.37;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2010.09.22.05.28.59;	author krw;	state Exp;
branches;
next	1.26;

1.26
date	2007.06.25.17.30.07;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.20.18.15.47;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2007.05.05.12.46.32;	author art;	state Exp;
branches;
next	1.22;

1.22
date	2004.05.01.23.20.01;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.04.15.04.14.29;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2002.12.20.19.27.07;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.16.21.27.39;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.06.15.04.34;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.27.08.42.59;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.12.22.00.13.34;	author avsm;	state Exp;
branches;
next	1.14;

1.14
date	2000.11.10.20.02.20;	author todd;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.12.18.05.58;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.26.20.29.06;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.26.20.11.16;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	99.09.22.09.54.37;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.09.22.03.16.47;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	99.09.02.17.28.06;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.07.02.20.11.52;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.23.14.11.39;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.09.05.17.41.49;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.07.09.18.28.15;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.07.08.22.09.37;	author ccappuc;	state Exp;
branches;
next	1.2;

1.2
date	96.04.22.01.28.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.01.11.17.48.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.34
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@.\"	$OpenBSD: disk.9,v 1.33 2013/07/17 20:21:52 schwarze Exp $
.\"	$NetBSD: disk.9,v 1.2 1996/04/08 20:41:25 jtc Exp $
.\"
.\" Copyright (c) 1995, 1996 Jason R. Thorpe.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed for the NetBSD Project
.\"	by Jason R. Thorpe.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
.\" AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: July 17 2013 $
.Dt DISK_INIT 9
.Os
.Sh NAME
.Nm disk_init ,
.Nm disk_attach ,
.Nm disk_detach ,
.Nm disk_busy ,
.Nm disk_unbusy
.Nd generic disk framework
.Sh SYNOPSIS
.In sys/types.h
.In sys/disklabel.h
.In sys/disk.h
.Ft void
.Fn disk_init "void"
.Ft void
.Fn disk_attach "struct disk *"
.Ft void
.Fn disk_detach "struct disk *"
.Ft void
.Fn disk_busy "struct disk *"
.Ft void
.Fn disk_unbusy "struct disk *" "long bcount" "int read"
.Sh DESCRIPTION
The
.Ox
generic disk framework is designed to provide flexible,
scalable, and consistent handling of disk state and metrics information.
The fundamental component of this framework is the
.Nm
structure, which is defined as follows:
.Bd -literal
struct disk {
	TAILQ_ENTRY(disk) dk_link;	/* link in global disklist */
	struct rwlock   dk_lock;        /* disk lock */
	struct mutex	dk_mtx;		/* busy/unbusy mtx */
	char	        *dk_name;	/* disk name */
	struct device	*dk_device;	/* disk device structure. */
	dev_t		dk_devno;	/* disk device number. */
	int             dk_flags;       /* disk flags */
#define DKF_CONSTRUCTED  0x0001
#define DKF_OPENED       0x0002
#define DKF_NOLABELREAD  0x0004

	/*
	 * Metrics data; note that some metrics may have no meaning
	 * on certain types of disks.
	 */
	int	  dk_busy;	/* busy counter */
	u_int64_t dk_rxfer;	/* total number of read transfers */
	u_int64_t dk_wxfer;	/* total number of write transfers */
	u_int64_t dk_seek;	/* total independent seek operations */
	u_int64_t dk_rbytes;	/* total bytes read */
	u_int64_t dk_wbytes;	/* total bytes written */
	struct timeval	dk_attachtime;	/* time disk was attached */
	struct timeval	dk_timestamp; /*time of first busy or any unbusy*/
	struct timeval	dk_time;	/* total time spent busy */

        int             dk_bopenmask;   /* block devices open */
        int             dk_copenmask;   /* character devices open */
        int             dk_openmask;    /* composite (bopen|copen) */
        int             dk_state;       /* label state   ### */
        int             dk_blkshift; /*shift to convert DEV_BSIZE to blks*/
        int             dk_byteshift; /* shift to convert bytes to blks */

	/*
	 * Disk label information.  Storage for the in-core disk label
	 * must be dynamically allocated, otherwise the size of this
	 * structure becomes machine-dependent.
	 */
	struct disklabel *dk_label;
};
.Ed
.Pp
The system maintains a global linked-list of all disks attached to the
system.
This list, called
.Nm disklist ,
may grow or shrink over time as disks are dynamically added and removed
from the system.
An example of a driver which currently makes use of the detachment
capability of the framework is the
.Xr vnd 4
pseudo-device driver.
.Pp
The following is a brief description of each function in the framework:
.Bl -tag -width "disk_unbusy()"
.It Fn disk_init
Initialize the disklist and other data structures used by the framework.
Called by
.Fn main
before autoconfiguration.
.It Fn disk_attach
Attach a disk; allocate storage for the disklabel, set the
.Dq attached time
timestamp, insert the disk into the disklist, and increment the
system disk count.
.It Fn disk_detach
Detach a disk; free storage for the disklabel, remove the disk
from the disklist, and decrement the system disk count.
If the count drops below zero, panic.
.It Fn disk_busy
Increment the disk's
.Dq busy counter .
If this counter goes from 0 to 1, set the timestamp corresponding to
this transfer.
.It Fn disk_unbusy
Decrement a disk's busy counter.
If the count drops below zero, print a warning message.
Get the current time, subtract it from the disk's timestamp, and add
the difference to the disk's running total.
Set the disk's timestamp to the current time.
If the provided byte count is greater than 0,
add it to the disk's running total and increment the number of transfers
performed by the disk.
The third argument
.Ar read
specifies the direction of I/O;
if non-zero it means reading from the disk,
otherwise it means writing to the disk.
.El
.Pp
The functions typically called by device drivers are
.Fn disk_attach ,
.Fn disk_detach ,
.Fn disk_busy
and
.Fn disk_unbusy .
.Sh USING THE FRAMEWORK
This section includes a description on basic use of the framework
and example usage of its functions.
Actual implementation of
a device driver which utilizes the framework may vary.
.Pp
A special routine,
.Fn disk_init ,
is provided to perform basic initialization of data structures used by
the framework.
It is called exactly once by the system, in
.Fn main ,
before device autoconfiguration.
.Pp
Each device in the system uses a
.Dq softc
structure which contains autoconfiguration and state information for that
device.
In the case of disks, the softc should also contain one instance
of the disk structure, e.g.:
.Bd -literal
struct foo_softc {
	struct	device *sc_dev;		/* generic device information */
	struct	disk *sc_dk;		/* generic disk information */
	[ . . . more . . . ]
};
.Ed
.Pp
In order for the system to gather metrics data about a disk, the disk must
be registered with the system.
The
.Fn disk_attach
routine performs all of the functions currently required to register a disk
with the system including allocation of disklabel storage space,
recording of the time since boot that the disk was attached, and insertion
into the disklist.
Note that since this function allocates storage space
for the disklabel, it must be called before the disklabel is read from the
media or used in any other way.
Before
.Fn disk_attach
is called, a portion of the disk structure must be initialized with
data specific to that disk.
For example, in the
.Dq foo
disk driver, the following would be performed in the autoconfiguration
.Dq attach
routine:
.Bd -literal
void
fooattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct foo_softc *sc = (struct foo_softc *)self;
	[ . . . ]

	/* Initialize and attach the disk structure. */
	sc->sc_dk.dk_driver = &foodkdriver;
	sc->sc_dk.dk_name = sc->sc_dev.dv_xname;
	disk_attach(&sc->sc_dk);

	/* Read geometry and fill in pertinent parts of disklabel. */
	[ . . . ]
}
.Ed
.Pp
The
.Nm foodkdriver
above is the disk's
.Dq driver
switch.
This switch currently includes a pointer to the disk's
.Dq strategy
routine.
This switch needs to have global scope and should be initialized as follows:
.Bd -literal
void	foostrategy(struct buf *);
struct	dkdriver foodkdriver = { foostrategy };
.Ed
.Pp
Once the disk is attached, metrics may be gathered on that disk.
In order to gather metrics data, the driver must tell the framework
when the disk starts and stops operations.
This functionality is provided by the
.Fn disk_busy
and
.Fn disk_unbusy
routines.
The
.Fn disk_busy
routine should be called immediately before a command to the disk is
sent, e.g.:
.Bd -literal
void
foostart(sc)
	struct foo_softc *sc;
{
	[ . . . ]

	/* Get buffer from drive's transfer queue. */
	[ . . . ]

	/* Build command to send to drive. */
	[ . . . ]

	/* Tell the disk framework we're going busy. */
	disk_busy(&sc->sc_dk);

	/* Send command to the drive. */
	[ . . . ]
}
.Ed
.Pp
When
.Fn disk_busy
is called, a timestamp is taken if the disk's busy counter moves from
0 to 1, indicating the disk has gone from an idle to non-idle state.
Note that
.Fn disk_busy
must be called at
.Fn splbio .
At the end of a transaction, the
.Fn disk_unbusy
routine should be called.
This routine performs some consistency checks,
such as ensuring that the calls to
.Fn disk_busy
and
.Fn disk_unbusy
are balanced.
This routine also performs the actual metrics calculation.
A timestamp is taken, and the difference from the timestamp taken in
.Fn disk_busy
is added to the disk's total running time.
The disk's timestamp is then
updated in case there is more than one pending transfer on the disk.
A byte count is also added to the disk's running total, and if greater than
zero, the number of transfers the disk has performed is incremented.
.Bd -literal
void
foodone(xfer)
	struct foo_xfer *xfer;
{
	struct foo_softc = (struct foo_softc *)xfer->xf_softc;
	struct buf *bp = xfer->xf_buf;
	long nbytes;
	[ . . . ]

	/*
	 * Get number of bytes transferred.  If there is no buf
	 * associated with the xfer, we are being called at the
	 * end of a non-I/O command.
	 */
	if (bp == NULL)
		nbytes = 0;
	else
		nbytes = bp->b_bcount - bp->b_resid;

	[ . . . ]

	/* Notify the disk framework that we've completed the transfer. */
	disk_unbusy(&sc->sc_dk, nbytes);

	[ . . . ]
}
.Ed
.Pp
Like
.Fn disk_busy ,
.Fn disk_unbusy
must be called at
.Fn splbio .
.Sh CODE REFERENCES
The disk framework itself is implemented within the file
.Pa sys/kern/subr_disk.c .
Data structures and function prototypes for the framework are located in
.Pa sys/sys/disk.h .
.Pp
The
.Ox
machine-independent SCSI disk and CD-ROM drivers utilize the disk framework.
They are located in
.Pa sys/scsi/sd.c
and
.Pa sys/scsi/cd.c .
.Pp
The
.Ox
.Xr vnd 4
driver utilizes the detachment capability of the framework.
This is located in
.Pa sys/dev/vnd.c .
.Sh SEE ALSO
.Xr vnd 4 ,
.Xr spl 9
.Sh HISTORY
The
.Ox
generic disk framework first appeared in
.Nx 1.2 .
.Sh AUTHORS
The
.Ox
generic disk framework was architected and implemented within
.Nx
by
.An Jason R. Thorpe Aq Mt thorpej@@NetBSD.ORG .
@


1.33
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.32 2013/06/04 19:27:04 schwarze Exp $
d34 2
a35 2
.Dd $Mdocdate: June 4 2013 $
.Dt DISK 9
d38 5
a42 1
.Nm disk
@


1.32
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.31 2012/04/06 15:42:56 jsing Exp $
d34 1
a34 1
.Dd $Mdocdate: April 6 2012 $
d366 1
a366 1
.An Jason R. Thorpe Aq thorpej@@NetBSD.ORG .
@


1.31
log
@Remove raidframe related references.
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.29 2010/11/17 15:01:05 bluhm Exp $
d34 1
a34 1
.Dd $Mdocdate: November 17 2010 $
d41 3
a43 3
.Fd #include <sys/types.h>
.Fd #include <sys/disklabel.h>
.Fd #include <sys/disk.h>
@


1.30
log
@no more ccd(4);
@
text
@a347 2
.Xr raid 4
and
d349 2
a350 4
drivers utilize the detachment capability of the framework.
They are located in
.Pa sys/dev/raidframe/
and
a352 1
.Xr raid 4 ,
@


1.29
log
@Make the comment for dk_timestamp more accurate.
ok krw@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.28 2010/09/23 14:06:37 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: September 23 2010 $
d111 2
a112 4
Drivers which currently make use of the detachment
capability of the framework are the
.Xr ccd 4
and
d114 1
a114 1
pseudo-device drivers.
a347 1
.Xr ccd 4 ,
d353 1
a353 2
.Pa sys/dev/ccd.c ,
.Pa sys/dev/raidframe/ ,
a356 1
.Xr ccd 4 ,
@


1.28
log
@update struct disk; ok jsing
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.27 2010/09/22 05:28:59 krw Exp $
d34 1
a34 1
.Dd $Mdocdate: September 22 2010 $
d86 1
a86 1
	struct timeval	dk_timestamp;	/* timestamp of last unbusy */
@


1.27
log
@Garbage collect the field dk_labelsector since there are no uses
in the tree. Update disk.9 to reflect current reality.

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.26 2007/06/25 17:30:07 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: June 25 2007 $
d72 2
@


1.26
log
@update struct disk; ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.25 2007/06/20 18:15:47 deraadt Exp $
d34 1
a34 1
.Dd $Mdocdate: May 31 2007 $
d66 1
d68 2
a93 2
	struct	dkdriver *dk_driver;	/* pointer to driver */

d99 1
a99 2
	daddr64_t	dk_labelsector;	/* sector containing label */
	struct disklabel *dk_label;	/* label */
@


1.25
log
@b_cylinder does not need to be set on the callpath down into drivers.
cpu_disklabel can go away, since nothing anymore needs to use it; ok miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.24 2007/05/31 19:20:00 jmc Exp $
d65 4
a68 7
	char	 *dk_name;	/* disk name */
	int	 dk_bopenmask;	/* block devices open */
	int	 dk_copenmask;	/* character devices open */
	int	 dk_openmask;	/* composite (bopen|copen) */
	int	 dk_state;	/* label state */
	int	 dk_blkshift;	/* shift to convert DEV_BSIZE to blks */
	int	 dk_byteshift;	/* shift to convert bytes to blks */
d75 2
a76 1
	u_int64_t dk_xfer;	/* total number of transfers */
d78 2
a79 1
	u_int64_t dk_bytes;	/* total bytes transferred */
d84 7
d98 1
a98 1
	daddr_t	 dk_labelsector;	/* sector containing label */
@


1.24
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.23 2007/05/05 12:46:32 art Exp $
d34 1
a34 1
.Dd $Mdocdate$
a93 1
	struct cpu_disklabel *dk_cpulabel;
@


1.23
log
@disk_resetstat and disk_find are gone.
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.22 2004/05/01 23:20:01 millert Exp $
d34 1
a34 1
.Dd January 7, 1996
@


1.22
log
@Update description of disk_unbusy(); from NetBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.21 2003/06/06 20:56:32 jmc Exp $
a53 4
.Ft void
.Fn disk_resetstat "struct disk *"
.Ft struct disk *
.Fn disk_find "char *"
d112 1
a112 1
.Bl -tag -width "disk_resetstat()"
a145 6
.It Fn disk_resetstat
Reset the running byte, transfer, and time totals.
.It Fn disk_find
Return a pointer to the disk structure corresponding to the name provided, or
.Dv NULL
if the disk does not exist.
d151 1
a151 2
.Fn disk_busy ,
.Fn disk_unbusy ,
d153 1
a153 4
.Fn disk_resetstat .
The function
.Fn disk_find
is provided as a utility function.
a326 6
.Pp
At some point a driver may wish to reset the metrics data gathered on a
particular disk.
For this function, the
.Fn disk_resetstat
routine is provided.
@


1.21
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.20 2003/04/15 04:14:29 jmc Exp $
d53 1
a53 1
.Fn disk_unbusy "struct disk *"
d145 5
@


1.20
log
@typos;

VOP, crypto and disklabel ok tedu@@
audio(9) ok naddy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.19 2002/12/20 19:27:07 millert Exp $
a367 6
.Sh AUTHORS
The
.Ox
generic disk framework was architected and implemented within
.Nx
by Jason R. Thorpe <thorpej@@NetBSD.ORG>.
d378 7
@


1.19
log
@fix two typos; Dave Steinberg
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.18 2002/02/16 21:27:39 millert Exp $
d110 1
a110 1
.Nm ccd
d112 1
a112 1
.Nm vnd
d358 2
a359 2
.Nm ccd ,
.Nm raid ,
d361 1
a361 1
.Nm vnd
@


1.18
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.17 2001/09/06 15:04:34 mpech Exp $
d204 1
a204 1
is called, a portions of the disk structure must be initialized with
@


1.17
log
@Initial idea from aaron@@: Last char of .Xr group in SEE ALSO section should
be a single digit. Powered by mantoya@@.

millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.16 2001/06/27 08:42:59 aaron Exp $
d240 1
a240 1
void	foostrategy __P((struct buf *));
@


1.16
log
@Reference NULL using .Dv.
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.15 2000/12/22 00:13:34 avsm Exp $
d378 1
a378 1
.Xr spl 9 .
@


1.15
log
@more typo fixes; aaron@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.14 2000/11/10 20:02:20 todd Exp $
d148 3
a150 2
Return a pointer to the disk structure corresponding to the name provided,
or NULL if the disk does not exist.
@


1.14
log
@.Sh AUTHOR -> AUTHORS, ok aaron@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.13 2000/10/12 18:05:58 aaron Exp $
d125 1
a125 1
timestamp, insert the disk into the disklist, and intrement the
d128 1
a128 1
Detatch a disk; free storage for the disklabel, remove the disk
d181 1
a181 1
of the disk stucture, e.g.:
d237 1
a237 1
This switch needs to have global scope and sould be initialized as follows:
@


1.13
log
@General man page cleanups, mostly to remove trailing whitespace, hard
sentence breaks, and other such things.
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.12 2000/04/26 20:29:06 mickey Exp $
d367 1
a367 1
.Sh AUTHOR
@


1.12
log
@history says that it first appeared in netbsd 1.2
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.11 2000/04/26 20:11:16 mickey Exp $
d59 1
a59 1
The 
d64 1
a64 1
.Nm 
d103 2
a104 1
system.  This list, called
d107 2
a108 1
from the system.  Drivers which currently make use of the detachment
d129 2
a130 2
from the disklist, and decrement the system disk count.  If the count
drops below zero, panic.
d137 2
a138 2
Decrement a disk's busy counter.  If the count drops below zero, print
a warning message.
d140 3
a142 2
the difference to the disk's running total.  Set the disk's timestamp
to the current time.  If the provided byte count is greater than 0,
d164 2
a165 1
and example usage of its functions.  Actual implementation of
d171 2
a172 1
the framework.  It is called exactly once by the system, in
d179 3
a181 2
device.  In the case of disks, the softc should also contain one instance
of the disk stucture, eg:
d191 2
a192 1
be registered with the system.  The
d197 2
a198 1
into the disklist.  Note that since this function allocates storage space
d200 2
a201 1
media or used in any other way.  Before
d204 2
a205 1
data specific to that disk.  For example, in the
d233 2
a234 1
switch.  This switch currently includes a pointer to the disk's
d236 2
a237 2
routine.  This switch needs to have global scope and sould be initialized
as follows:
d243 4
a246 3
Once the disk is attached, metrics may be gathered on that disk.  In order
to gather metrics data, the driver must tell the framework when the disk
starts and stops operations.  This functionality is provided by the
d250 2
a251 1
routines.  The
d254 1
a254 1
sent, eg:
d286 2
a287 1
routine should be called.  This routine performs some consistency checks,
d292 2
a293 1
are balanced.  This routine also performs the actual metrics calculation.
d296 2
a297 1
is added to the disk's total running time.  The disk's timestamp is then
d337 2
a338 1
particular disk.  For this function, the
d347 1
a347 1
The 
d349 2
a350 2
machine-independent SCSI disk and CD-ROM drivers utilize the
disk framework.  They are located in
d368 1
a368 1
The 
d370 1
a370 1
generic disk framework was architected and implemented within 
d379 1
a379 1
The 
d381 1
a381 1
generic disk framework first appeared in 
@


1.11
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.10 1999/09/22 09:54:37 espie Exp $
d365 1
a365 2
.Nx
1.1A.
@


1.10
log
@REVERT TO PREVIOUS STATE OF AFFAIR.

If those pages are different from the NetBSD version, maybe there's a
reason ?

Like, possibly, I just read our source code, which just happens to do
things in DIFFERENT ways than NetBSD does ?

As far as the added pages go, they obviously haven't been checked against
actual code as well, hence they're worse than useless, since a large part
of the information is definitely misleading.
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.8 1999/09/02 17:28:06 espie Exp $
d49 1
a49 1
.Fn disk_detatch "struct disk *"
d125 1
a125 1
.It Fn disk_detatch
d151 1
a151 1
.Fn disk_detatch ,
d340 2
a341 1
.Nm ccd
d346 2
a347 1
.Pa sys/dev/ccd.c
d358 1
d365 2
a366 1
.Nx at version 1.1A.
@


1.9
log
@

Add/update some man9 pages from NetBSD
@
text
@d1 2
a2 2
.\"	$OpenBSD: disk.9,v 1.10 1999/03/16 00:40:47 garbled Exp $
.\"	$NetBSD: disk.9,v 1.10 1999/03/16 00:40:47 garbled Exp $
d38 1
a38 8
.Nm disk ,
.Nm disk_init ,
.Nm disk_attach ,
.Nm disk_detatch ,
.Nm disk_busy ,
.Nm disk_unbusy ,
.Nm disk_find ,
.Nm disk_resetstat
d49 1
a49 1
.Fn disk_detach "struct disk *"
d59 2
a60 2
The
.Nx
d64 1
a64 1
.Nm disk
d84 1
a84 1
	u_int64_t dk_bytes;	/* total bytes transfered */
d125 1
a125 1
.It Fn disk_detach
d135 2
a136 1
Decrement a disk's busy counter.  If the count drops below zero, panic.
d151 1
a151 1
.Fn disk_detach ,
d179 1
a179 1
	struct	disk sc_dk;		/* generic disk information */
d296 1
a296 1
	 * Get number of bytes transfered.  If there is no buf
a324 7
This section describes places within the
.Nx
source tree where actual
code implementing or utilizing the disk framework can be found.  All
pathnames are relative to
.Pa /usr/src .
.Pp
d330 2
a331 2
The
.Nx
d339 1
a339 1
.Nx
d349 3
a351 1
The
d353 1
a353 2
generic disk framework was architected and implemented by
Jason R. Thorpe <thorpej@@NetBSD.ORG>.
d357 1
a357 1
.Xr spl 9
d359 4
a362 4
The
.Nx
generic disk framework appeared in
.Nx 1.2 .
@


1.8
log
@Minor fusses: OpenBSD tag, misused macros, codes references path.
@
text
@d1 2
a2 2
.\"	$OpenBSD: disk.9,v 1.7 1999/07/02 20:11:52 aaron Exp $
.\"	$NetBSD: disk.9,v 1.2 1996/04/08 20:41:25 jtc Exp $
d38 8
a45 1
.Nm disk
d56 1
a56 1
.Fn disk_detatch "struct disk *"
d66 2
a67 2
The 
.Ox
d71 1
a71 1
.Nm 
d91 1
a91 1
	u_int64_t dk_bytes;	/* total bytes transferred */
d132 1
a132 1
.It Fn disk_detatch
d142 1
a142 2
Decrement a disk's busy counter.  If the count drops below zero, print
a warning message.
d157 1
a157 1
.Fn disk_detatch ,
d185 1
a185 1
	struct	disk *sc_dk;		/* generic disk information */
d302 1
a302 1
	 * Get number of bytes transferred.  If there is no buf
d331 7
d343 2
a344 2
The 
.Ox
d352 1
a352 1
.Ox
d362 1
a362 3
The 
.Ox
generic disk framework was architected and implemented within 
d364 2
a365 1
by Jason R. Thorpe <thorpej@@NetBSD.ORG>.
d369 1
a369 1
.Xr spl 9 .
d371 4
a374 4
The 
.Ox
generic disk framework first appeared in 
.Nx at version 1.1A.
@


1.7
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.6 1999/05/23 14:11:39 aaron Exp $
d59 3
a61 1
The OpenBSD generic disk framework is designed to provide flexible,
d64 1
a64 1
.Nm disk
a324 5
This section describes places within the OpenBSD source tree where actual
code implementing or utilizing the disk framework can be found.  All
pathnames are relative to
.Nm /usr/src .
.Pp
d326 1
a326 1
.Nm sys/kern/subr_disk.c .
d328 1
a328 1
.Nm sys/sys/disk.h .
d330 3
a332 1
The OpenBSD machine-independent SCSI disk and CD-ROM drivers utilize the
d334 1
a334 1
.Nm sys/scsi/sd.c
d336 1
a336 1
.Nm sys/scsi/cd.c .
d338 2
a339 1
The OpenBSD
d345 1
a345 1
.Nm sys/dev/ccd.c
d347 1
a347 1
.Nm sys/dev/vnd.c .
d349 4
a352 1
The OpenBSD generic disk framework was architected and implemented within NetBSD
d359 4
a362 1
The OpenBSD generic disk framework first appeared in NetBSD at version 1.1A.
@


1.6
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.5 1998/09/05 17:41:49 deraadt Exp $
d34 1
a34 1
.Dd Jan 7, 1996
@


1.5
log
@more man page repairs; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.4 1997/07/09 18:28:15 kstailey Exp $
d36 1
a36 1
.Os OpenBSD
@


1.4
log
@disk_unbusy() does not call panic()
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.3 1996/07/08 22:09:37 ccappuc Exp $
d82 1
a82 1
	u_int64_t dk_bytes;	/* total bytes transfered */
d294 1
a294 1
	 * Get number of bytes transfered.  If there is no buf
@


1.3
log
@kernel is /bsd, os is OpenBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: disk.9,v 1.2 1996/04/22 01:28:20 deraadt Exp $
d133 2
a134 1
Decrement a disk's busy counter.  If the count drops below zero, panic.
@


1.2
log
@sync with netbsd 960418
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d36 1
a36 1
.Os NetBSD
d59 1
a59 1
The NetBSD generic disk framework is designed to provide flexible,
d322 1
a322 1
This section describes places within the NetBSD source tree where actual
d332 1
a332 1
The NetBSD machine-independent SCSI disk and CD-ROM drivers utilize the
d338 1
a338 1
The NetBSD
d348 2
a349 2
The NetBSD generic disk framework was architected and implemented by
Jason R. Thorpe <thorpej@@NetBSD.ORG>.
d355 1
a355 1
The NetBSD generic disk framework appeared in NetBSD 1.1A.
@


1.1
log
@from netbsd; new pages
@
text
@d1 2
a2 1
.\"	$NetBSD: disk.9,v 1.1 1996/01/09 00:22:04 thorpej Exp $
d252 1
a252 1
	/* Tell the disk framework we're is going busy. */
@
