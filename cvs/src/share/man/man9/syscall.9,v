head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.4
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.12
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3;
locks; strict;
comment	@.\" @;


1.13
date	2016.04.25.19.24.42;	author tedu;	state Exp;
branches;
next	1.12;
commitid	nrtZxsobBLCi86f5;

1.12
date	2016.03.02.15.04.20;	author naddy;	state Exp;
branches;
next	1.11;
commitid	NVeTm9qO4S5DlPqp;

1.11
date	2014.11.15.14.41.03;	author bentley;	state Exp;
branches;
next	1.10;
commitid	HuCemPIiOkto0SJD;

1.10
date	2013.10.08.05.13.34;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2013.08.14.06.32.32;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.19.13.17.25;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.31.19.20.01;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.18.14.51.42;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.08.19.17.28;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.23.18.31.34;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.20.02.58.06;	author david;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.24.22.08.56;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.24.20.15.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.13
log
@remove systrace
@
text
@.\"	$OpenBSD: syscall.9,v 1.12 2016/03/02 15:04:20 naddy Exp $
.\"
.\" Copyright (c) 2003 Michael Shalayeff
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: March 2 2016 $
.Dt SYSCALL 9
.Os
.Sh NAME
.Nm syscall
.Nd system calls overview
.Sh DESCRIPTION
System calls in the kernel are implemented through a set of
switch tables for each emulation type.
Each table is generated from the
.Dq master
file by
.Pa sys/kern/makesyscalls.sh
through the appropriate rules in the
.Pa Makefile .
.Pp
The
.Dq master
file is a text file consisting of a list of lines for each
system call.
Lines may be split by the means of back slashing the end of the line.
Each line is a set of fields separated by whitespace:
.Pp
.D1 Cd number type ...
.Pp
Where:
.Bl -tag -width number -compact
.It number
is the system call number;
.It type
is one of:
.Bl -tag -width COMPAT_XXX -compact
.It STD
always included;
.It OBSOL
obsolete, not included in the system;
.It UNIMPL
unimplemented, not included in the system;
.It NODEF
included, but don't define the syscall number;
.It NOARGS
included, but don't define the syscall args structure;
.It INDIR
included, but don't define the syscall args structure,
and allow it to be "really" varargs;
.It COMPAT_XX
a compatibility system call, only included if the corresponding
option is configured for the kernel (see
.Xr options 4 ) .
.El
.El
.Pp
The rest of the line for the STD, NODEF, NOARGS, and COMPAT_XX
types is:
.Pp
.D1 Cd { pseudo-proto } [alias]
.Pp
.Nm pseudo-proto
is a C-like prototype used to generate the system call argument list,
and alias is an optional name alias for the call.
The function in the prototype has to be defined somewhere in
the kernel sources as it will be used as an entry point for
the corresponding system call.
.Pp
For other types the rest of the line is a comment.
.Pp
To generate the header and code files from the
.Dq master
file a
.Xr make 1
command has to be run from the directory containing the
.Dq master
file.
.Ss Usage
Entry from the user space for the system call is machine dependent.
Typical code to invoke a system call from the machine dependent
sources might look like this:
.Bd -literal -offset indent

	const struct sysent *callp;
	register_t code, args[8], rval[2];
	struct proc *p = curproc;
	int code, nsys;

\&...

/* "code" is the system call number passed from the user space */

\&...

if (code < 0 || code >= nsys)
	callp += p->p_emul->e_nosys;	/* illegal */
else
	callp += code;

/* copyin the arguments from the user space */
\&...
	rval[0] = 0;

/* the following steps are now performed using mi_syscall() */
#ifdef SYSCALL_DEBUG
	scdebug_call(p, code, args);
#endif
#ifdef KTRACE
	if (KTRPOINT(p, KTR_SYSCALL))
		ktrsyscall(p, code, argsize, args);
#endif
	error = (*callp->sy_call)(p, args, rval);

	switch (error) {
	case 0:
		/* normal return */
		\&...
		break;
	case ERESTART:
		/*
		 * adjust PC to point before the system call
		 * in the user space in order for the return
		 * back there we reenter the kernel to repeat
		 * the same system call
		 */
		\&...
		break;
	case EJUSTRETURN:
		/* just return */
		break;
	default:
		/*
		 * an error returned:
		 *	call an optional emulation errno mapping
		 *	routine and return back to the user.
		 */
		if (p->p_emul->e_errno)
			error = p->p_emul->e_errno[error];
		\&...
		break;
	}

/* the following steps are now performed using mi_syscall_return() */
#ifdef SYSCALL_DEBUG
	scdebug_ret(p, code, orig_error, rval);
#endif
	userret(p);
#ifdef KTRACE
	if (KTRPOINT(p, KTR_SYSRET))
		ktrsysret(p, code, orig_error, rval[0]);
#endif

.Ed
.Pp
The
.Dq SYSCALL_DEBUG
parts of the code are explained in the section
.Sx Debugging
later in the document.
For the
.Dq KTRACE
portions of the code refer to the
.Xr ktrace 9
document for further explanations.
.Ss Debugging
For debugging purposes the line
.Pp
.D1 Cd option SYSCALL_DEBUG
.Pp
should be included in the kernel configuration file (see
.Xr options 4 ) .
This allows tracing for calls, returns, and arguments for both
implemented and non-implemented system calls.
A global integer variable
.Dq scdebug
contains a mask for the desired logging events:
.Pp
.Bl -tag -width SCDEBUG_SHOWARGS__ -compact
.It SCDEBUG_CALLS
(0x0001) show calls;
.It SCDEBUG_RETURNS
(0x0002) show returns;
.It SCDEBUG_ALL
(0x0004) show even syscalls that are implemented;
.It SCDEBUG_SHOWARGS
(0x0008) show arguments to calls.
.El
.Pp
Use
.Xr ddb 4
to set the
.Dq scdebug
to a value desired.
.Sh CODE REFERENCES
.Bl -tag -width sys/kern/syscalls.master -compact
.It Pa sys/kern/makesyscalls.sh
a
.Xr sh 1
script for generating C files out of the syscall master file;
.It Pa sys/kern/syscalls.conf
a configuration file for the shell script above;
.It Pa sys/kern/syscalls.master
master files describing names and numbers for the system calls;
.It Pa sys/kern/syscalls.c
system call names lists;
.It Pa sys/kern/init_sysent.c
system call switch tables;
.It Pa sys/sys/syscallargs.h
system call argument lists;
.It Pa sys/sys/syscall.h
system call numbers;
.It Pa sys/sys/syscall_mi.h
Machine-independent syscall entry end return handling.
.El
.Sh SEE ALSO
.Xr ktrace 2 ,
.Xr syscall 2 ,
.Xr ktrace 9 ,
.Xr sysctl_int 9
.Sh HISTORY
The
.Nm
section manual page appeared in
.Ox 3.4 .
@


1.12
log
@remove the remaining mentions of sys/compat/*; ok deraadt@@ millert@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.11 2014/11/15 14:41:03 bentley Exp $
d26 1
a26 1
.Dd $Mdocdate: November 15 2014 $
d133 1
a133 6
#if NSYSTRACE > 0
	if (ISSET(p->p_flag, P_SYSTRACE))
		error = systrace_redirect(code, p, args, rval);
	else
#endif
		error = (*callp->sy_call)(p, args, rval);
a185 6
.Dq NSYSTRACE
is a system call tracing facility and is explained in the
.Xr systrace 9
and
.Xr systrace 4
documents.
a238 1
.Xr systrace 4 ,
d240 1
a240 2
.Xr sysctl_int 9 ,
.Xr systrace 9
@


1.11
log
@Reduce instances of `` '' in manuals.

troff displays these as typographic quotes, but nroff implementations
almost always print them literally, which rarely has the intended effect
with modern fonts, even in stock xterm.

These uses of `` '' can be replaced either with more semantic alternatives
or with Dq, which prints typographic quotes in a UTF-8 locale (but will
automatically fall back to `` '' in an ASCII locale).

improvements and ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.10 2013/10/08 05:13:34 guenther Exp $
d26 1
a26 1
.Dd $Mdocdate: October 8 2013 $
d232 1
a232 1
.It Pa sys/{kern,compat/*}/syscalls.conf
d234 1
a234 1
.It Pa sys/{kern,compat/*}/syscalls.master
d236 1
a236 1
.It Pa sys/{kern/,compat/*/*_}syscalls.c
d238 1
a238 1
.It Pa sys/{kern/init,compat/*/*}_sysent.c
d240 1
a240 1
.It Pa sys/{sys/,compat/*/*_}syscallargs.h
d242 1
a242 1
.It Pa sys/{sys/,compat/*/*_}syscall.h
@


1.10
log
@Reference mi_syscall() and mi_syscall_return() and syscall_mi.h
Update userret() arguments
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.9 2013/08/14 06:32:32 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: August 14 2013 $
d112 1
a112 1
/* ``code'' is the system call number passed from the user space */
@


1.9
log
@no longer any need to quote macro lines with >9 args;
From: Jan Stary
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.8 2010/09/19 13:17:25 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: September 19 2010 $
d123 1
d125 1
a132 1
	rval[0] = 0;
d139 1
d168 2
d173 1
a173 1
	userret(p, frame.tf_eip, sticks);
d243 3
a245 1
system call numbers.
@


1.8
log
@- put the Os macro in the correct place
- in one instance, .Dr -> .Dq
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.7 2007/05/31 19:20:01 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 31 2007 $
d31 1
a31 1
.Nd "system calls overview"
@


1.7
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.6 2006/01/18 14:51:42 mickey Exp $
d26 1
a26 1
.Dd $Mdocdate$
d203 1
a203 1
.Dr scdebug
@


1.6
log
@internal sysctl functions and etc
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.5 2003/11/08 19:17:28 jmc Exp $
d26 1
a26 1
.Dd July 21, 2003
@


1.5
log
@typos from Jonathon Gray;
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.4 2003/10/23 18:31:34 jmc Exp $
d246 1
@


1.4
log
@typos from Jared Yanovich;
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.3 2003/08/20 02:58:06 david Exp $
d100 2
a101 2
Entry from the user space for the system call is machine dependant.
Typical code to invoke a system call from the machine dependant
@


1.3
log
@remove extra "for"
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.2 2003/07/24 22:08:56 jmc Exp $
d186 1
a186 1
document for futher explanations.
@


1.2
log
@various tweaks;
ok mickey@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: syscall.9,v 1.1 2003/07/24 20:15:45 mickey Exp $
d204 1
a204 1
contains a mask for for the desired logging events:
@


1.1
log
@rename VOP_LOOKUP.9 into vnodeops.9 for nicer xreffing.
a few pages i wrote being high on acetyl salicylic acid.
vfs(9) from netbsd.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d37 1
a37 1
file by the
d44 4
a47 4
file is a text file sonsisting of a list of lines for each
system call. Lines may be split by the means of back slashing the end
of the line.
Each line is a set of fields seprated by whitespaces:
d49 1
a49 1
.Cd number type ...
d72 1
a72 1
a compatibility systen call, only included if the corresponding
d74 1
a74 1
.Xr options 4 ).
d81 1
a81 1
.Cd { pseudo-proto } [alias]
a82 1
The
d84 1
a84 1
is a C-like prototype used to generate the system call argument list
d96 1
a96 1
command has to be ran from the directory containing the
a98 1
.Pp
d168 1
a168 1
#endif  
d180 1
a180 1
.Dq Debugging
d184 1
a184 1
portitions of the code refer to the
d186 1
a186 2
document for futher exlanations.
The
d191 1
a191 1
.Xr systrcae 4
d194 1
a194 1
For debugging purposes a line
d196 1
a196 1
.Cd option SYSCALL_DEBUG
d198 2
a199 2
should be inluded into the kernel configuration file (see
.Xr options 4 ).
d201 1
a201 1
implemented and not system calls.
d205 2
a206 1
.Bl -tag -width SCDEBUG_SHOWARGS__ -compat
@

