head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.6
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.8
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4;
locks; strict;
comment	@.\" @;


1.6
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.5;
commitid	GVTTSAMZ93Lz4hmE;

1.5
date	2014.10.22.23.56.47;	author dlg;	state Exp;
branches;
next	1.4;
commitid	W6i4CJDuhqS3nLLJ;

1.4
date	2014.03.14.11.53.35;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2014.03.14.10.47.21;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2014.02.13.12.39.01;	author dlg;	state dead;
branches;
next	1.1;

1.1
date	2014.02.13.12.38.20;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@.\" $OpenBSD: bemtoh32.9,v 1.5 2014/10/22 23:56:47 dlg Exp $
.\"
.\" Copyright (c) 2014 David Gwynne <dlg@@openbsd.org>
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: October 22 2014 $
.Dt BEMTOH32 9
.Os
.Sh NAME
.Nm bemtoh16 ,
.Nm bemtoh32 ,
.Nm bemtoh64 ,
.Nm lemtoh16 ,
.Nm lemtoh32 ,
.Nm lemtoh64 ,
.Nm htobem16 ,
.Nm htobem32 ,
.Nm htobem64 ,
.Nm htolem16 ,
.Nm htolem32 ,
.Nm htolem64
.Nd byte swapping memory load and store operations
.Sh SYNOPSIS
.In sys/types.h
.Ft uint16_t
.Fn bemtoh16 "volatile const uint16_t *m"
.Ft uint32_t
.Fn bemtoh32 "volatile const uint32_t *m"
.Ft uint64_t
.Fn bemtoh64 "volatile const uint64_t *m"
.Ft uint16_t
.Fn lemtoh16 "volatile const uint16_t *m"
.Ft uint32_t
.Fn lemtoh32 "volatile const uint32_t *m"
.Ft uint64_t
.Fn lemtoh64 "volatile const uint64_t *m"
.Ft void
.Fn htobem16 "volatile uint16_t *m" "uint16_t v"
.Ft void
.Fn htobem32 "volatile uint32_t *m" "uint32_t v"
.Ft void
.Fn htobem64 "volatile uint64_t *m" "uint64_t v"
.Ft void
.Fn htolem16 "volatile uint16_t *m" "uint16_t v"
.Ft void
.Fn htolem32 "volatile uint32_t *m" "uint32_t v"
.Ft void
.Fn htolem64 "volatile uint64_t *m" "uint64_t v"
.Sh DESCRIPTION
This API provides a way to take advantage of an architecture's ability
to load and store words in memory of different endians.
If an architecture has no specialised support for these operations
they will be implemented as a wrapper around the
.Xr byteorder 3
API.
.Pp
These operations are subject to the same alignment restrictions as
the host's normal memory loads and stores.
.Pp
.Fn bemtoh16 ,
.Fn bemtoh32 ,
and
.Fn bemtoh64
read a big endian value from the memory located at
.Fa m
into the host's native byte order.
.Fn lemtoh16 ,
.Fn lemtoh32 ,
and
.Fn lemtoh64
read a little endian value from the memory located at
.Fa m
into the host's native byte order.
.Pp
.Fn htobem16 ,
.Fn htobem32 ,
and
.Fn htobem64
store the host's native byte ordered value of
.Fa v
as a big endian value in the memory located at
.Fa m .
.Fn htolem16 ,
.Fn htolem32 ,
and
.Fn htolem64
store the host's native byte ordered value of
.Fa v
as a little endian value in the memory located at
.Fa m .
.Sh CONTEXT
.Fn bemtoh16 ,
.Fn bemtoh32 ,
.Fn bemtoh64 ,
.Fn lemtoh16 ,
.Fn lemtoh32 ,
.Fn lemtoh64 ,
.Fn htobem16 ,
.Fn htobem32 ,
.Fn htobem64 ,
.Fn htolem16 ,
.Fn htolem32 ,
and
.Fn htolem64
can be called during autoconf, from process context, or from interrupt
context.
.Sh RETURN VALUES
.Fn bemtoh16 ,
.Fn bemtoh32 ,
.Fn bemtoh64 ,
.Fn lemtoh16 ,
.Fn lemtoh32 ,
and
.Fn lemtoh64
return the host's native byte ordered value of the memory at
.Fa m
after the appropriate byteswapping has occurred.
.Pp
.Fn htobem16 ,
.Fn htobem32 ,
.Fn htobem64 ,
.Fn htolem16 ,
.Fn htolem32 ,
and
.Fn htolem64
do not return a value.
.Sh SEE ALSO
.Xr byteorder 3
.Sh HISTORY
These functions first appeared in
.Ox 5.6 .
@


1.5
log
@make [bl]emtoh{16,32,64} take volatile const foo *, not volatile foo *

while in the manpage add volatile where the code has it too.

ok miod@@ guenther@@
@
text
@d1 1
a1 1
.\" $OpenBSD: bemtoh32.9,v 1.4 2014/03/14 11:53:35 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: March 14 2014 $
d31 3
a33 3
.Nm htobem16 ,
.Nm htobem32 ,
.Nm htobem64
@


1.4
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: bemtoh32.9,v 1.3 2014/03/14 10:47:21 dlg Exp $
d38 1
a38 1
.Fn bemtoh16 "uint16_t *m"
d40 1
a40 1
.Fn bemtoh32 "uint32_t *m"
d42 1
a42 1
.Fn bemtoh64 "uint64_t *m"
d44 1
a44 1
.Fn lemtoh16 "uint16_t *m"
d46 1
a46 1
.Fn lemtoh32 "uint32_t *m"
d48 1
a48 1
.Fn lemtoh64 "uint64_t *m"
d50 1
a50 1
.Fn htobem16 "uint16_t *m" "uint16_t v"
d52 1
a52 1
.Fn htobem32 "uint32_t *m" "uint32_t v"
d54 1
a54 1
.Fn htobem64 "uint64_t *m" "uint64_t v"
d56 1
a56 1
.Fn htolem16 "uint16_t *m" "uint16_t v"
d58 1
a58 1
.Fn htolem32 "uint32_t *m" "uint32_t v"
d60 1
a60 1
.Fn htolem64 "uint64_t *m" "uint64_t v"
@


1.3
log
@provide an MI api for doing byteswapping loads and stores. some
archs have instrutions that can do this, and the rest that dont get
to use wrappers around the byteswap(3) api.

this provides MI backends for sparc64 and powerpc which get a big
benefit from this because byteswapping in registers is really hard
for them.

the intended use case is for reading and writing bits of dma memory
handed to and from hardware.

discussed with miod@@ guenther@@ deraadt@@
ok miod@@ kettenis@@
@
text
@d1 1
a1 1
.\" $OpenBSD: bemtoh32.9,v 1.1 2014/02/13 12:38:20 dlg Exp $
d18 1
a18 1
.Dd $Mdocdate: February 13 2014 $
d50 1
a50 1
.Fn htobem16 "uint16_t *m, uint16_t v"
d52 1
a52 1
.Fn htobem32 "uint32_t *m, uint32_t v"
d54 1
a54 1
.Fn htobem64 "uint64_t *m, uint64_t v"
d56 1
a56 1
.Fn htolem16 "uint16_t *m, uint16_t v"
d58 1
a58 1
.Fn htolem32 "uint32_t *m, uint32_t v"
d60 1
a60 1
.Fn htolem64 "uint64_t *m, uint64_t v"
d62 1
a62 1
This API provides a way to take advantage of an architectures ability
d70 1
a70 1
the hosts normal memory loads and stores.
d78 1
a78 1
into the hosts native byte order.
d85 1
a85 1
into the hosts native byte order.
d91 1
a91 1
store the hosts native byte ordered value of
d99 1
a99 1
store the hosts native byte ordered value of
d127 1
a127 1
return the hosts native byte ordered value of the memory at
@


1.2
log
@this wasnt supposed to be part of the timeout.9 change
@
text
@d117 1
a117 1
can all be called during autoconf, from process context, or from interrupt
@


1.1
log
@document the timeout_add and timeout_del return values in the RETURN VALUES
section.

im not sure what to do with the macros yet.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d18 1
a18 1
.Dd $Mdocdate: February 4 2014 $
@

