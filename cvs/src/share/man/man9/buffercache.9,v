head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.8
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@.\" @;


1.12
date	2017.08.22.00.18.56;	author sf;	state Exp;
branches;
next	1.11;
commitid	3He6jx9D01LdyeDr;

1.11
date	2017.02.28.19.36.14;	author natano;	state Exp;
branches;
next	1.10;
commitid	WPHjA3r2Oi7R4v2p;

1.10
date	2014.12.11.14.29.42;	author jmc;	state Exp;
branches;
next	1.9;
commitid	trYgpmrbw4V1m1YS;

1.9
date	2013.06.11.16.42.05;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.31.08.50.40;	author shadchin;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.24.14.19.24;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.23.16.24.43;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.16.11.27.52;	author pedro;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.30.14.48.00;	author pedro;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.16.01.23.34;	author pedro;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.22.21.26.02;	author jmc;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Add some buffercache docs

* add clarifications and bread_cluster() buffercache(9)
* add some comments to vfs_bio.c

ok tedu@@
@
text
@.\"	$OpenBSD: buffercache.9,v 1.11 2017/02/28 19:36:14 natano Exp $
.\"     $NetBSD: buffercache.9,v 1.13 2004/06/25 15:31:37 wiz Exp $
.\"
.\" Copyright (c)2003 YAMAMOTO Takashi,
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.\" following copyright notices are from sys/kern/vfs_bio.c.
.\" they are here because i took some comments from it.  yamt@@NetBSD.org
.\"
.\"
.\"/*-
.\" * Copyright (c) 1982, 1986, 1989, 1993
.\" *	The Regents of the University of California.  All rights reserved.
.\" * (c) UNIX System Laboratories, Inc.
.\" * All or some portions of this file are derived from material licensed
.\" * to the University of California by American Telephone and Telegraph
.\" * Co. or Unix System Laboratories, Inc. and are reproduced herein with
.\" * the permission of UNIX System Laboratories, Inc.
.\" *
.\" * Redistribution and use in source and binary forms, with or without
.\" * modification, are permitted provided that the following conditions
.\" * are met:
.\" * 1. Redistributions of source code must retain the above copyright
.\" *    notice, this list of conditions and the following disclaimer.
.\" * 2. Redistributions in binary form must reproduce the above copyright
.\" *    notice, this list of conditions and the following disclaimer in the
.\" *    documentation and/or other materials provided with the distribution.
.\" * 3. Neither the name of the University nor the names of its contributors
.\" *    may be used to endorse or promote products derived from this software
.\" *    without specific prior written permission.
.\" *
.\" * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" * SUCH DAMAGE.
.\" *
.\" *	@@(#)vfs_bio.c	8.6 (Berkeley) 1/11/94
.\" */
.\"
.\"/*-
.\" * Copyright (c) 1994 Christopher G. Demetriou
.\" *
.\" * Redistribution and use in source and binary forms, with or without
.\" * modification, are permitted provided that the following conditions
.\" * are met:
.\" * 1. Redistributions of source code must retain the above copyright
.\" *    notice, this list of conditions and the following disclaimer.
.\" * 2. Redistributions in binary form must reproduce the above copyright
.\" *    notice, this list of conditions and the following disclaimer in the
.\" *    documentation and/or other materials provided with the distribution.
.\" * 3. All advertising materials mentioning features or use of this software
.\" *    must display the following acknowledgement:
.\" *	This product includes software developed by the University of
.\" *	California, Berkeley and its contributors.
.\" * 4. Neither the name of the University nor the names of its contributors
.\" *    may be used to endorse or promote products derived from this software
.\" *    without specific prior written permission.
.\" *
.\" * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" * SUCH DAMAGE.
.\" *
.\" *	@@(#)vfs_bio.c	8.6 (Berkeley) 1/11/94
.\" */
.\"
.\"
.\" ------------------------------------------------------------
.Dd $Mdocdate: February 28 2017 $
.Dt BUFFERCACHE 9
.Os
.Sh NAME
.Nm buffercache ,
.Nm bread ,
.Nm bread_cluster ,
.Nm breadn ,
.Nm bwrite ,
.Nm bawrite ,
.Nm bdwrite ,
.Nm getblk ,
.Nm geteblk ,
.Nm incore ,
.Nm brelse ,
.Nm biodone ,
.Nm biowait
.Nd buffer cache interfaces
.\" ------------------------------------------------------------
.Sh SYNOPSIS
.In sys/buf.h
.Ft int
.Fn bread "struct vnode *vp" "daddr_t blkno" "int size" \
"struct buf **bpp"
.Ft int
.Fn bread_cluster "struct vnode *vp" "daddr_t blkno" "int size" \
"struct buf **bpp"
.Ft int
.Fn breadn "struct vnode *vp" "daddr_t blkno" "int size" \
"daddr_t rablks[]" "int rasizes[]" "int nrablks" \
"struct buf **bpp"
.Ft int
.Fn bwrite "struct buf *bp"
.Ft void
.Fn bawrite "struct buf *bp"
.Ft void
.Fn bdwrite "struct buf *bp"
.Ft struct buf *
.Fn getblk "struct vnode *vp" "daddr_t blkno" "int size" \
"int slpflag" "int slptimeo"
.Ft struct buf *
.Fn geteblk "size_t size"
.Ft struct buf *
.Fn incore "struct vnode *vp" "daddr_t blkno"
.Ft void
.Fn brelse "struct buf *bp"
.Ft void
.Fn biodone "struct buf *bp"
.Ft int
.Fn biowait "struct buf *bp"
.\" ------------------------------------------------------------
.Sh DESCRIPTION
The
.Nm
interface is used by each filesystem to improve I/O performance using
in-core caches of filesystem blocks.
.Pp
The kernel memory used to cache a block is called a buffer and
described by a
.Em buf
structure.
In addition to describing a cached block, a
.Em buf
structure is also used to describe an I/O request as a part of
the disk driver interface.
.Pp
The block size used for logical block numbers depends on the type of the
given vnode.
For file vnodes, this is f_iosize of the underlying filesystem.
For block device vnodes, this will usually be DEV_BSIZE.
.\" XXX struct buf, B_ flags, MP locks, etc.
.\" XXX free list, hash queue, etc.
.\" ------------------------------------------------------------
.Sh FUNCTIONS
.Bl -tag -width compact
.It Fn bread "vp" "blkno" "size" "bpp"
Read a block corresponding to
.Fa vp
and
.Fa blkno .
The buffer is returned via
.Fa bpp .
.Pp
If the buffer is not found (i.e. the block is not cached in memory),
.Fn bread
calls
.Fn getblk
to allocate a buffer with enough pages for
.Fa size
and reads the specified disk block into it.
.Pp
.Fn bread
always returns a buffer, even if it returns an error due to an I/O
error.
.Pp
The buffer returned by
.Fn bread
is marked as busy.
(The
.Dv B_BUSY
flag is set.)
After manipulation of the buffer returned from
.Fn bread ,
the caller should unbusy it so that another thread can get it.
If the buffer contents are modified and should be written back to disk,
it should be unbusied using one of the variants of
.Fn bwrite .
Otherwise, it should be unbusied using
.Fn brelse .
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Xo
.Fo breadn
.Fa "vp"
.Fa "blkno"
.Fa "size"
.Fa "rablks"
.Fa "rasizes"
.Fa "nrablks"
.Fa "bpp"
.Fc
.Xc
Get a buffer as
.Fn bread .
In addition,
.Fn breadn
will start read-ahead of blocks specified by
.Fa rablks ,
.Fa rasizes ,
and
.Fa nrablks .
The read-ahead blocks aren't returned, but are available in cache for
future accesses.
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Xo
.Fo bread_cluster
.Fa "vp"
.Fa "blkno"
.Fa "size"
.Fa "bpp"
.Fc
.Xc
Read a block of size
.Fa "size"
corresponding to
.Fa vp
and
.Fa blkno ,
with readahead.
If neither the first block nor a part of the next MAXBSIZE bytes is already
in the buffer cache,
.Fn bread_cluster
will perform a read-ahead of MAXBSIZE bytes in a single I/O operation.
This is currently more efficient than
.Fn breadn .
The read-ahead data isn't returned, but is available in cache for
future access.
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn bwrite "bp"
Write a block.
Start I/O for write using
.Fn VOP_STRATEGY .
Then, unless the
.Dv B_ASYNC
flag is set in
.Fa bp ,
.Fn bwrite
waits for the I/O to complete.
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn bawrite "bp"
Write a block asynchronously.
Set the
.Dv B_ASYNC
flag in
.Fa bp
and simply call
.Fn VOP_BWRITE ,
which results in
.Fn bwrite
for most filesystems.
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn bdwrite "bp"
Delayed write.
Unlike
.Fn bawrite ,
.Fn bdwrite
won't start any I/O.
It only marks the buffer as dirty
.Pq Dv B_DELWRI
and unbusies it.
This routine should be used when the buffer is expected
to be modified again soon, typically a small write that
partially fills a buffer.
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn getblk "vp" "blkno" "size" "slpflag" "slptimeo"
Get a block of requested size
.Fa size
that is associated with a given vnode and block
offset, specified by
.Fa vp
and
.Fa blkno .
If it is found in the block cache, mark it as having been found,
make it busy and return it.
Otherwise, return an empty block of the correct size.
It is up to the caller to ensure that the cached blocks
are of the correct size.
.Pp
If
.Fn getblk
needs to sleep,
.Fa slpflag
and
.Fa slptimeo
are used as arguments for
.Fn tsleep .
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn geteblk "size"
Allocate an empty, disassociated block of a given size
.Fa size .
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn incore "vp" "blkno"
Determine if a block associated with a given vnode and block offset
is in the cache.
If it is there, return a pointer to it.
Note that
.Fn incore
doesn't mark the buffer as busy unlike
.Fn getblk .
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn brelse "bp"
Unlock a buffer by clearing the
.Dv B_AGE ,
.Dv B_ASYNC ,
.Dv B_BUSY ,
.Dv B_NOCACHE ,
and
.Dv B_DEFERRED
flags and release it to the free lists.
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn biodone "bp"
Mark I/O complete on a buffer.
If a callback has been requested by
.Dv B_CALL ,
do so.
Otherwise, wake up the waiting processes.
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn biowait "bp"
Wait for operations on the buffer to complete.
When they do, extract and return the I/O's error value.
If the operation on the buffer is being done via a direct call to a
.Fn strategy
type function, then the buffer must be previously initialized with the
.Dv B_RAW
flag.
.El
.\" ------------------------------------------------------------
.Sh CODE REFERENCES
This section describes places within the
.Ox
source tree where actual code implementing the buffer cache subsystem
can be found.
All pathnames are relative to
.Pa /usr/src .
.Pp
The buffer cache subsystem is implemented within the file
.Pa sys/kern/vfs_bio.c .
.Sh SEE ALSO
.Xr intro 9 ,
.Xr vnode 9 ,
.Xr VOP_STRATEGY 9
.Rs
.%A Maurice J. Bach
.%B "The Design of the UNIX Operating System"
.%I "Prentice Hall"
.%D 1986
.Re
.Rs
.%A Marshall Kirk McKusick
.%A Keith Bostic
.%A Michael J. Karels
.%A John S. Quarterman
.%B "The Design and Implementation of the 4.4BSD Operating System"
.%I "Addison Wesley"
.%D 1996
.Re
.Rs
.%A Leffler, et. al.
.%B "The Design and Implementation of the 4.3 BSD Unix Operating System"
.%I Addison Wesley
.%D 1989
.Re
@


1.11
log
@geteblk() has been switched to size_t.
ok stefan, as part of a larger diff
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.10 2014/12/11 14:29:42 jmc Exp $
d105 1
a105 1
.Dd $Mdocdate: December 11 2014 $
d111 1
d130 3
d170 5
d196 4
d237 24
@


1.10
log
@according to kaspars bankovskis, allocbuf was removed in -r1.88
of sys/kern/vfs_bio.c;
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.9 2013/06/11 16:42:05 deraadt Exp $
d105 1
a105 1
.Dd $Mdocdate: June 11 2013 $
d142 1
a142 1
.Fn geteblk "int size"
@


1.9
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.8 2011/07/31 08:50:40 shadchin Exp $
d105 1
a105 1
.Dd $Mdocdate: July 31 2011 $
a117 1
.Nm allocbuf ,
a145 2
.Fn allocbuf "struct buf *bp" "int size"
.Ft void
a295 10
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn allocbuf "bp" "size"
Expand or contract the actual memory allocated to a buffer.
If the buffer shrinks, the truncated part of the data
is lost, so it is up to the caller to have written
it out
.Em first
if needed; this routine will not start a write.
If the buffer grows, it is the caller's responsibility to fill out
the buffer's additional contents.
@


1.8
log
@cred argument was removed from bread() and breadn()

ok tedu@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.7 2008/07/24 14:19:24 jmc Exp $
d105 1
a105 1
.Dd $Mdocdate: July 24 2008 $
d127 1
a127 1
.Fn bread "struct vnode *vp" "daddr64_t blkno" "int size" \
d130 2
a131 2
.Fn breadn "struct vnode *vp" "daddr64_t blkno" "int size" \
"daddr64_t rablks[]" "int rasizes[]" "int nrablks" \
d140 1
a140 1
.Fn getblk "struct vnode *vp" "daddr64_t blkno" "int size" \
d145 1
a145 1
.Fn incore "struct vnode *vp" "daddr64_t blkno"
@


1.7
log
@kill whitespace at eol;
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.6 2008/07/23 16:24:43 beck Exp $
d105 1
a105 1
.Dd $Mdocdate: July 23 2008 $
d128 1
a128 1
"struct ucred *cred" "struct buf **bpp"
d132 1
a132 1
"struct ucred *cred" "struct buf **bpp"
d174 1
a174 1
.It Fn bread "vp" "blkno" "size" "cred" "bpp"
a212 1
.Fa "cred"
a371 6
.\" ------------------------------------------------------------
.Sh BUGS
In the current implementation,
.Fn bread
and its variants
don't use a specified credential.
@


1.6
log
@
Correct cases of mishandling of pending reads and writes to prevent
them going negative - this consists of identifying a number of cases of
IO not going through the buffer cache and marking those buffers with
B_RAW - as well as fixing nfs_bio to show pending writes and reads through
the buffer cache via NFS

still has a problem with mishandling the counters I believe in the
async/sync fallback case where counters stay positive which will be
addressed seperately.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.5 2007/05/31 19:20:00 jmc Exp $
d105 1
a105 1
.Dd $Mdocdate: May 31 2007 $
d330 4
a333 4
When they do, extract and return the I/O's error value. 
If the operation on the buffer is being done via a direct call to a 
.Fn strategy 
type function, then the buffer must be previously initialized with the 
@


1.5
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.4 2006/10/16 11:27:52 pedro Exp $
d105 1
a105 1
.Dd $Mdocdate$
d330 6
a335 1
When they do, extract and return the I/O's error value.
@


1.4
log
@Use daddr64_t for logical blocks, okay krw@@ thib@@ mickey@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.3 2004/11/30 14:48:00 pedro Exp $
d105 1
a105 1
.Dd August 30, 2004
@


1.3
log
@breada() is gone, help and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.2 2004/10/16 01:23:34 pedro Exp $
d127 1
a127 1
.Fn bread "struct vnode *vp" "daddr_t blkno" "int size" \
d130 2
a131 2
.Fn breadn "struct vnode *vp" "daddr_t blkno" "int size" \
"daddr_t rablks[]" "int rasizes[]" "int nrablks" \
d140 1
a140 1
.Fn getblk "struct vnode *vp" "daddr_t blkno" "int size" \
d145 1
a145 1
.Fn incore "struct vnode *vp" "daddr_t blkno"
@


1.2
log
@match the given breadn() prototype, ok marius@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: buffercache.9,v 1.1 2004/09/22 21:26:02 jmc Exp $
a110 1
.Nm breada ,
a133 4
.Fn breada "struct vnode *vp" "daddr_t blkno" "int size" \
"daddr_t rablkno" "int rabsize" \
"struct ucred *cred" "struct buf **bpp"
.Ft int
a227 12
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.It Fn breada "vp" "blkno" "size" "rablkno" "rabsize" "cred" "bpp"
Same as
.Fn breadn
with single block read-ahead.
This function is for compatibility with old filesystem code and
shouldn't be used by new ones.
It simply calls
.Fn breadn
with
.Fa nrablks
set to 1.
@


1.1
log
@buffercache.9 man page from netbsd, ported by sven dehmlow, +mlinks;
some tidy up from myself;

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d227 1
a227 1
.Fa rablk ,
@

