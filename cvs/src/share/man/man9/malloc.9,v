head	1.63;
access;
symbols
	OPENBSD_6_0:1.62.0.4
	OPENBSD_6_0_BASE:1.62
	OPENBSD_5_9:1.62.0.2
	OPENBSD_5_9_BASE:1.62
	OPENBSD_5_8:1.61.0.6
	OPENBSD_5_8_BASE:1.61
	OPENBSD_5_7:1.61.0.2
	OPENBSD_5_7_BASE:1.61
	OPENBSD_5_6:1.58.0.4
	OPENBSD_5_6_BASE:1.58
	OPENBSD_5_5:1.49.0.6
	OPENBSD_5_5_BASE:1.49
	OPENBSD_5_4:1.49.0.2
	OPENBSD_5_4_BASE:1.49
	OPENBSD_5_3:1.47.0.4
	OPENBSD_5_3_BASE:1.47
	OPENBSD_5_2:1.47.0.2
	OPENBSD_5_2_BASE:1.47
	OPENBSD_5_1_BASE:1.46
	OPENBSD_5_1:1.46.0.8
	OPENBSD_5_0:1.46.0.6
	OPENBSD_5_0_BASE:1.46
	OPENBSD_4_9:1.46.0.4
	OPENBSD_4_9_BASE:1.46
	OPENBSD_4_8:1.46.0.2
	OPENBSD_4_8_BASE:1.46
	OPENBSD_4_7:1.45.0.2
	OPENBSD_4_7_BASE:1.45
	OPENBSD_4_6:1.43.0.6
	OPENBSD_4_6_BASE:1.43
	OPENBSD_4_5:1.43.0.2
	OPENBSD_4_5_BASE:1.43
	OPENBSD_4_4:1.41.0.2
	OPENBSD_4_4_BASE:1.41
	OPENBSD_4_3:1.40.0.2
	OPENBSD_4_3_BASE:1.40
	OPENBSD_4_2:1.39.0.2
	OPENBSD_4_2_BASE:1.39
	OPENBSD_4_1:1.37.0.2
	OPENBSD_4_1_BASE:1.37
	OPENBSD_4_0:1.36.0.4
	OPENBSD_4_0_BASE:1.36
	OPENBSD_3_9:1.36.0.2
	OPENBSD_3_9_BASE:1.36
	OPENBSD_3_8:1.35.0.2
	OPENBSD_3_8_BASE:1.35
	OPENBSD_3_7:1.30.0.6
	OPENBSD_3_7_BASE:1.30
	OPENBSD_3_6:1.30.0.4
	OPENBSD_3_6_BASE:1.30
	OPENBSD_3_5:1.30.0.2
	OPENBSD_3_5_BASE:1.30
	OPENBSD_3_4:1.29.0.2
	OPENBSD_3_4_BASE:1.29
	OPENBSD_3_3:1.23.0.2
	OPENBSD_3_3_BASE:1.23
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.18.0.4
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.13.0.2
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@# @;


1.63
date	2016.11.14.03.23.45;	author dlg;	state Exp;
branches;
next	1.62;
commitid	tWdKewG24yOL854A;

1.62
date	2015.08.24.15.33.49;	author mpi;	state Exp;
branches;
next	1.61;
commitid	h0m9NyUpRFq6qXAR;

1.61
date	2014.11.19.05.42.26;	author deraadt;	state Exp;
branches;
next	1.60;
commitid	oSamiEPG8gnEdDx4;

1.60
date	2014.11.02.05.16.43;	author tedu;	state Exp;
branches;
next	1.59;
commitid	c05jDFQcM9C4EMa9;

1.59
date	2014.08.20.11.23.42;	author mikeb;	state Exp;
branches;
next	1.58;
commitid	vzc4wz1s3pDevb7K;

1.58
date	2014.07.23.06.22.28;	author jmc;	state Exp;
branches;
next	1.57;
commitid	eTsohpfy1zOmnmRx;

1.57
date	2014.07.23.02.30.12;	author dlg;	state Exp;
branches;
next	1.56;
commitid	LWzlYZWxjzGCUMNn;

1.56
date	2014.07.12.18.51.10;	author tedu;	state Exp;
branches;
next	1.55;
commitid	Urcg2TbAmDRKM5f9;

1.55
date	2014.07.12.10.47.21;	author tedu;	state Exp;
branches;
next	1.54;
commitid	4EORxO1WauFK34K0;

1.54
date	2014.07.10.19.35.38;	author matthew;	state Exp;
branches;
next	1.53;
commitid	ySy3AEcGo8AM2gOr;

1.53
date	2014.07.10.19.33.16;	author matthew;	state Exp;
branches;
next	1.52;
commitid	V84Gt32TGTrY0uFt;

1.52
date	2014.04.03.04.10.34;	author lteo;	state Exp;
branches;
next	1.51;

1.51
date	2014.03.27.07.28.35;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2014.03.26.06.05.07;	author dlg;	state Exp;
branches;
next	1.49;

1.49
date	2013.07.04.17.39.45;	author tedu;	state Exp;
branches;
next	1.48;

1.48
date	2013.06.04.19.27.09;	author schwarze;	state Exp;
branches;
next	1.47;

1.47
date	2012.04.06.15.42.56;	author jsing;	state Exp;
branches;
next	1.46;

1.46
date	2010.07.14.10.31.54;	author matthew;	state Exp;
branches;
next	1.45;

1.45
date	2010.03.08.21.57.39;	author oga;	state Exp;
branches;
next	1.44;

1.44
date	2010.01.03.16.43.46;	author schwarze;	state Exp;
branches;
next	1.43;

1.43
date	2008.12.11.09.07.16;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2008.09.02.21.42.05;	author chl;	state Exp;
branches;
next	1.41;

1.41
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.40;

1.40
date	2007.09.07.10.31.10;	author art;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.01.05.37.14;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2007.02.13.18.14.01;	author mk;	state Exp;
branches;
next	1.36;

1.36
date	2005.12.14.22.03.00;	author pedro;	state Exp;
branches;
next	1.35;

1.35
date	2005.08.18.14.32.23;	author dlg;	state Exp;
branches;
next	1.34;

1.34
date	2005.08.06.17.04.07;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2005.06.17.21.36.20;	author drahn;	state Exp;
branches;
next	1.32;

1.32
date	2005.04.15.13.30.51;	author tom;	state Exp;
branches;
next	1.31;

1.31
date	2005.03.30.23.25.59;	author pedro;	state Exp;
branches;
next	1.30;

1.30
date	2004.01.14.19.34.05;	author grange;	state Exp;
branches;
next	1.29;

1.29
date	2003.07.11.13.47.41;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.21.01.05.09;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.21.00.57.43;	author tedu;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.04.17.05.08.39;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2003.04.02.16.04.19;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.24.03.55.05;	author tedu;	state Exp;
branches;
next	1.22;

1.22
date	2002.12.20.06.10.27;	author art;	state Exp;
branches;
next	1.21;

1.21
date	2002.12.20.06.05.31;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2002.08.28.08.28.20;	author tdeval;	state Exp;
branches;
next	1.19;

1.19
date	2002.07.17.11.49.36;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.17.15.52.56;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.28.22.14.23;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.14.05.11.40;	author angelos;	state Exp;
branches;
next	1.15;

1.15
date	2001.04.14.22.55.12;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.01.16.11.25;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.12.18.06.00;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.06.25.13.46.06;	author pjanzen;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.07.10.02.56;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.06.20.33.18;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.06.20.18.54;	author art;	state Exp;
branches;
next	1.8;

1.8
date	99.10.05.20.53.11;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.09.23.04.12.07;	author alex;	state Exp;
branches;
next	1.6;

1.6
date	99.09.02.17.28.06;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	99.08.30.20.23.59;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	99.08.30.17.35.29;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	99.07.02.20.11.52;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	97.04.09.02.28.54;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.11.01.23.41.09;	author millert;	state Exp;
branches;
next	;


desc
@@


1.63
log
@M_COUNTERS is a thing
@
text
@.\"	$OpenBSD: malloc.9,v 1.62 2015/08/24 15:33:49 mpi Exp $
.\"	$NetBSD: malloc.9,v 1.2 1996/10/30 05:29:54 lukem Exp $
.\"
.\" Copyright (c) 1996 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Paul Kranenburg.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: August 24 2015 $
.Dt MALLOC 9
.Os
.Sh NAME
.Nm malloc ,
.Nm mallocarray ,
.Nm free
.Nd kernel memory allocator
.Sh SYNOPSIS
.In sys/types.h
.In sys/malloc.h
.Ft void *
.Fn malloc "size_t size" "int type" "int flags"
.Ft void *
.Fn mallocarray "size_t nmemb" "size_t size" "int type" "int flags"
.Ft void
.Fn free "void *addr" "int type" "size_t size"
.Sh DESCRIPTION
The
.Fn malloc
function allocates uninitialized memory in kernel address space for an
object whose size is specified by
.Fa size .
.Pp
The
.Fn mallocarray
function is the same as
.Fn malloc ,
but allocates space for an array of
.Fa nmemb
objects and checks for arithmetic overflow.
.Pp
The
.Fn free
function releases memory at address
.Fa addr
that was previously allocated by
.Fn malloc
or
.Fn mallocarray
for re-use.
The same object size originally provided to
.Fn malloc
should be specified by
.Fa size ,
because
.Fn free
will operate faster knowing this.
If tracking the size is difficult, specify
.Ar size
as 0.
If
.Fa addr
is a null pointer, no action occurs.
.Pp
The
.Fa flags
argument affects the operational characteristics of
.Fn malloc
and
.Fn mallocarray
as follows:
.Bl -tag -width xxx -offset indent
.It Dv M_WAITOK
If memory is currently unavailable,
.Fn malloc
may call sleep to wait for resources to be released by other processes.
.It Dv M_NOWAIT
Causes
.Fn malloc
to return
.Dv NULL
if the request cannot be immediately fulfilled due to resource shortage.
.It Dv M_CANFAIL
In the
.Dv M_WAITOK
case, if not enough memory is available, return
.Dv NULL
instead of calling
.Xr panic 9 .
If
.Fn mallocarray
detects an overflow
or
.Fn malloc
detects an excessive allocation, return
.Dv NULL
instead of calling
.Xr panic 9 .
.It Dv M_ZERO
Causes allocated memory to be zeroed.
.El
.Pp
One of
.Dv M_NOWAIT
or
.Dv M_WAITOK
must be specified via the
.Fa flags
argument.
.Pp
The
.Fa type
argument broadly identifies the kernel subsystem for which the allocated
memory was needed, and is commonly used to maintain statistics about
kernel memory usage.
These statistics can be examined using
.Xr vmstat 8
or
.Xr systat 1
if either of the kernel
.Xr options 4
.Cm KMEMSTATS
or
.Cm DEBUG
are enabled.
.Pp
The following types are currently defined:
.Pp
.Bl -tag -offset indent -width XXXXXXXXXXXXXX -compact
.It Dv M_FREE
Should be on free list.
.It Dv M_DEVBUF
Device driver memory.
.It Dv M_DEBUG
.Nm malloc
debug structures.
.It Dv M_PCB
Protocol control blocks.
.It Dv M_RTABLE
Routing tables.
.It Dv M_FTABLE
Fragment reassembly headers.
.It Dv M_IFADDR
Interface addresses.
.It Dv M_SOOPTS
Socket options.
.It Dv M_SYSCTL
Sysctl persistent buffers.
.It Dv M_COUNTERS
Per-CPU Counters for use via
.Xr counters_alloc 9 .
.It Dv M_IOCTLOPS
Ioctl data buffers.
.It Dv M_IOV
Large IOVs.
.It Dv M_MOUNT
VFS mount structs.
.It Dv M_NFSREQ
NFS request headers.
.It Dv M_NFSMNT
NFS mount structures.
.It Dv M_VNODE
Dynamically allocated vnodes.
.It Dv M_CACHE
Dynamically allocated cache entries.
.It Dv M_DQUOT
UFS quota entries.
.It Dv M_UFSMNT
UFS mount structures.
.It Dv M_SHM
SVID compatible shared memory segments.
.It Dv M_VMMAP
VM map structures.
.It Dv M_SEM
SVID compatible semaphores.
.It Dv M_DIRHASH
UFS directory hash structures.
.It Dv M_ACPI
ACPI structures.
.It Dv M_VMPMAP
VM pmap data.
.It Dv M_FILE
Open file structures.
.It Dv M_FILEDESC
Open file descriptor tables.
.It Dv M_PROC
Proc structures.
.It Dv M_SUBPROC
Proc sub-structures.
.It Dv M_VCLUSTER
Cluster for VFS.
.It Dv M_MFSNODE
MFS vnode private part.
.It Dv M_NETADDR
Export host address structures.
.It Dv M_NFSSVC
NFS server structures.
.It Dv M_NFSD
NFS server daemon structures.
.It Dv M_IPMOPTS
Internet multicast options.
.It Dv M_IPMADDR
Internet multicast addresses.
.It Dv M_IFMADDR
Link-level multicast addresses.
.It Dv M_MRTABLE
Multicast routing tables.
.It Dv M_ISOFSMNT
ISOFS mount structures.
.It Dv M_ISOFSNODE
ISOFS vnode private part.
.It Dv M_MSDOSFSMNT
MSDOS FS mount structures.
.It Dv M_MSDOSFSFAT
MSDOS FS FAT tables.
.It Dv M_MSDOSFSNODE
MSDOS FS vnode private part.
.It Dv M_TTYS
Allocated tty structures.
.It Dv M_EXEC
Argument lists & other mem used by exec.
.It Dv M_MISCFSMNT
Miscellaneous FS mount structures.
.It Dv M_FUSEFS
FUSE FS mount structures.
.It Dv M_PFKEY
Pfkey data.
.It Dv M_TDB
Transforms database.
.It Dv M_XDATA
IPsec data.
.It Dv M_PAGEDEP
File page dependencies.
.It Dv M_INODEDEP
Inode dependencies.
.It Dv M_NEWBLK
New block allocation.
.It Dv M_INDIRDEP
Indirect block dependencies.
.It Dv M_VMSWAP
VM swap structures.
.It Dv M_UVMAMAP
UVM amap and related.
.It Dv M_UVMAOBJ
UVM aobj and related.
.It Dv M_USB
USB general.
.It Dv M_USBDEV
USB device driver.
.It Dv M_USBHC
USB host controller.
.It Dv M_MEMDESC
Memory range.
.It Dv M_CRYPTO_DATA
.Xr crypto 9
data buffers.
.It Dv M_CREDENTIALS
.Xr ipsec 4
related credentials.
.It Dv M_EMULDATA
Per process emulation data.
.It Dv M_IP6OPT
IPv6 options.
.It Dv M_IP6NDP
IPv6 neighbour discovery structures.
.It Dv M_TEMP
Miscellaneous temporary data buffers.
.It Dv M_NTFSMNT
NTFS mount structures.
.It Dv M_NTFSNTNODE
NTFS ntnode information.
.It Dv M_NTFSNODE
NTFS fnode information.
.It Dv M_NTFSDIR
NTFS directory buffers.
.It Dv M_NTFSHASH
NTFS ntnode hash tables.
.It Dv M_NTFSVATTR
NTFS file attribute information.
.It Dv M_NTFSRDATA
NTFS resident data.
.It Dv M_NTFSDECOMP
NTFS decompression temporary storage.
.It Dv M_NTFSRUN
NTFS vrun storage.
.It Dv M_KEVENT
.Xr kqueue 2
data structures.
.It Dv M_UDFMOUNT
UDF mount structures.
.It Dv M_UDFFENTRY
UDF file entries.
.It Dv M_UDFFID
UDF file ID.
.It Dv M_AGP
AGP memory.
.It Dv M_DRM
Direct Rendering Manager.
.El
.Sh CONTEXT
.Fn malloc
and
.Fn mallocarray
can be called during autoconf, from process context, or from interrupt context
if
.Dv M_NOWAIT
is passed via
.Fa flags .
They can't be called from interrupt context if
.Dv M_WAITOK
is passed via
.Fa flags .
.Pp
.Fn free
can be called during autoconf, from process context, or from interrupt context.
.Sh RETURN VALUES
.Fn malloc
and
.Fn mallocarray
return a kernel virtual address that is suitably aligned for storage of
any type of object.
.Sh DIAGNOSTICS
A kernel compiled with the
.Dv DIAGNOSTIC
configuration option attempts to detect memory corruption caused by
such things as writing outside the allocated area and unbalanced calls to
.Fn malloc
or
.Fn mallocarray ,
and
.Fn free .
Failing consistency checks will cause a panic or a system console message:
.Pp
.Bl -bullet -offset indent -compact
.It
panic:
.Dq malloc: bogus type
.It
panic:
.Dq malloc: out of space in kmem_map
.It
panic:
.Dq malloc: allocation too large
.It
panic:
.Dq malloc: wrong bucket
.It
panic:
.Dq malloc: lost data
.It
panic:
.Dq mallocarray: overflow
.It
panic:
.Dq free: unaligned addr
.It
panic:
.Dq free: duplicated free
.It
panic:
.Dq free: multiple frees
.It
panic:
.Dq free: non-malloced addr
.It
panic:
.Dq free: size too large
.It
panic:
.Dq free: size too small
.It
panic:
.Dq kmeminit: minbucket too small/struct freelist too big
.It
.Dq multiply freed item Aq addr
.It
.Dq Data modified on freelist: Aq data object description
.El
.Sh DEBUGGING
A kernel compiled with the
.Cm MALLOC_DEBUG
option allows for more extensive debugging of memory allocations.
The
.Va debug_malloc_type ,
.Va debug_malloc_size ,
.Va debug_malloc_size_lo
and
.Va debug_malloc_size_hi
variables choose which allocation to debug.
.Va debug_malloc_type
should be set to the memory type and
.Va debug_malloc_size
should be set to the memory size to debug.
0 can be used as a wildcard.
.Va debug_malloc_size_lo
and
.Va debug_malloc_size_hi
can be used to specify a range of sizes if the exact size to debug is not
known.
When those are used,
.Va debug_malloc_size
needs to be set to the wildcard.
.Dv M_DEBUG
can also be specified as an allocation type to force allocation with
debugging.
.Pp
Every call to
.Fn malloc
or
.Fn mallocarray
with a memory type and size that matches the debugged type and size will
allocate two virtual pages.
The pointer returned will be aligned so that
the requested area will end at the page boundary and the second virtual page
will be left unmapped.
This way we can catch reads and writes outside the allocated area.
.Pp
Every call to
.Fn free
with memory that was returned by the debugging allocators will cause the memory
area to become unmapped so that we can catch dangling reads and writes to
freed memory.
.Pp
There are no special diagnostics if any errors are caught by the debugging
malloc.
The errors will look like normal access to unmapped memory.
On a memory access error, the
.Ic show malloc
command in
.Xr ddb 4
can be invoked to see what memory areas are allocated and freed.
If the faulting address is within two pages from an address on the allocated
list, there was an access outside the allocated area.
If the faulting address is within two pages from an address on the free list,
there was an access to freed memory.
.Pp
Care needs to be taken when using the
.Cm MALLOC_DEBUG
option:  the memory consumption can run away pretty quickly and there is
a severe performance degradation when allocating and freeing debugged memory
types.
.Sh SEE ALSO
.Xr systat 1 ,
.Xr vmstat 8
@


1.62
log
@Rename M_RTABLE bucket into "rtable" to match the code and kill unused
M_BWMETER.

ok mikeb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.61 2014/11/19 05:42:26 deraadt Exp $
d31 1
a31 1
.Dd $Mdocdate: November 19 2014 $
d170 3
@


1.61
log
@document when to pass free() a size, and hey -- if it is impossible track
it down, that is ok, you can pass 0. (but it is slower)
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.61 2014/11/19 05:38:26 deraadt Exp $
a306 2
.It Dv M_BWMETER
Multicast upcall bandwidth meters.
@


1.60
log
@tweak wording and update panic messages
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.59 2014/08/20 11:23:42 mikeb Exp $
d31 1
a31 1
.Dd $Mdocdate: August 20 2014 $
d75 7
a81 1
.Fa size .
@


1.59
log
@Remove userland bits related to the crypto(4) interface;  ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.58 2014/07/23 06:22:28 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: July 23 2014 $
d72 3
a74 1
The size of the object should be specified by
d351 1
a351 1
.Dq malloc - bogus type
d366 3
d376 9
@


1.58
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.57 2014/07/23 02:30:12 dlg Exp $
d265 1
a265 1
.Xr crypto 4
@


1.57
log
@document mallocarray like malloc throughout the page. better describe
what M_CANFAIL means for each.

motivation and initial diff from doug hogan
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.56 2014/07/12 18:51:10 tedu Exp $
d31 1
a31 1
.Dd $Mdocdate: July 12 2014 $
d111 1
a111 1
.Xr panic 9 . 
d320 1
a320 1
.Fa flags.
@


1.56
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.55 2014/07/12 10:47:21 tedu Exp $
d54 1
d59 1
a59 1
except it allocates space for an array of
d69 2
d80 5
a84 3
argument further qualifies
.Fn malloc Ns 's
operational characteristics as follows:
a86 3
The same as having no other
.Fa flags
specified.
a95 5
One of
.Dv M_NOWAIT
or
.Dv M_WAITOK
must be specified.
d103 9
a111 4
.Dv M_CANFAIL
has no effect if
.Dv M_NOWAIT
is specified.
d113 1
a113 3
Causes
.Fn malloc
to return zeroed memory.
d116 8
d314 3
a316 1
can be called,
d320 2
a321 3
.Fa flags ,
during autoconf, from process context, or from interrupt context;
it can't be called from interrupt context if
d330 3
a332 1
returns a kernel virtual address that is suitably aligned for storage of
d338 1
a338 1
such things as writing outside the allocated area and unbalanced calls to the
d340 2
d343 1
a343 2
.Fn free
functions.
d409 2
d420 1
a420 1
with memory that was returned by the debugging malloc will cause the memory
@


1.55
log
@remove bluetooth malloc types
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.54 2014/07/10 19:35:38 matthew Exp $
d31 1
a31 1
.Dd $Mdocdate: July 10 2014 $
d47 1
a47 1
.Fn free "void *addr" "int type"
d69 2
@


1.54
log
@Oops, fix man page typo.

thx Jean-Philippe Ouellet
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.53 2014/07/10 19:33:16 matthew Exp $
a288 2
.It Dv M_BLUETOOTH
Bluetooth data structures.
a296 2
.It Dv M_BTHIDEV
Bluetooth HID.
@


1.53
log
@Add mallocarray(9)

While here, change malloc(9)'s size argument from "unsigned long" to
"size_t".

ok tedu
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.52 2014/04/03 04:10:34 lteo Exp $
d31 1
a31 1
.Dd $Mdocdate: April 3 2014 $
d45 1
a45 1
.Fn malloc "size_t nmemb" "size_t size" "int type" "int flags"
@


1.52
log
@Sync malloc(9) M_* types with sys/malloc.h
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.51 2014/03/27 07:28:35 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: March 27 2014 $
d36 1
d43 3
a45 1
.Fn malloc "unsigned long size" "int type" "int flags"
d54 9
d64 1
a64 1
releases memory at address
d75 2
a76 1
argument further qualifies malloc's
@


1.51
log
@tweak previous; help/ok dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.50 2014/03/26 06:05:07 dlg Exp $
d31 1
a31 1
.Dd $Mdocdate: March 26 2014 $
d211 2
d225 4
a246 2
.It Dv M_PACKET_TAGS
Packet-attached information tags.
@


1.50
log
@CONTEXT for malloc.

feels a bit clumsy, hopefully jmc can help.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.49 2013/07/04 17:39:45 tedu Exp $
d31 1
a31 1
.Dd $Mdocdate: July 4 2013 $
d291 3
a293 2
can be called during autoconf, or from process context if
.Dv M_WAITOK
d296 3
a298 2
or during during autoconf, from process context, or from interrupt context if
.Dv M_NOWAIT
@


1.49
log
@free(null) works
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.48 2013/06/04 19:27:09 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: June 4 2013 $
d289 13
@


1.48
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.47 2012/04/06 15:42:56 jsing Exp $
d31 1
a31 1
.Dd $Mdocdate: April 6 2012 $
d57 3
@


1.47
log
@Remove raidframe related references.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.45 2010/03/08 21:57:39 oga Exp $
d31 1
a31 1
.Dd $Mdocdate: March 8 2010 $
d39 2
a40 2
.Fd #include <sys/types.h>
.Fd #include <sys/malloc.h>
@


1.46
log
@Eliminate some unused malloc(9) type defines.  Also get rid of the
mysterious and unused mbtypes[] array in mbuf.h.

ok tedu@@, deraadt@@
@
text
@a219 2
.It Dv M_RAIDFRAME
RAIDframe data.
@


1.45
log
@Don't mention that M_WAITOK is defined to be zero, readers do not need
to know that.

ok jmc@@, though i'm tempted to remove the whole bit about being the same
as having no other flags specified as well.

Prompted by a discussion with deraadt and tedu.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.44 2010/01/03 16:43:46 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: January 3 2010 $
a118 2
.It Dv M_MBUF
Mbuf memory.
a145 2
.It Dv M_NFSNODE
NFS vnode private part.
a181 2
.It Dv M_NFSUID
NFS uid mapping structures.
a241 4
.It Dv M_1394CTL
IEEE 1394 control structures.
.It Dv M_1394DATA
IEEE 1394 data buffers.
a247 4
.It Dv M_IP6RR
IPv6 router renumbering prefix.
.It Dv M_RR_ADDR
IPv6 router renumbering interface identifiers.
@


1.44
log
@Neither .Pp nor unqualified text are allowed at the top level of .Bl;
instead, .It is required.  Thus, move .Pp and text before the .Bl,
and remove the .Pp altogether where it is not needed.

Syntax errors found by mandoc(1), also required to fix the mandoc build;
feedback and ok jmc@@, and sobrado@@ also supports the direction.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.43 2008/12/11 09:07:16 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: December 11 2008 $
d64 1
a64 3
This is defined to be 0, and is therefore most useful as an aid to code
readability.
In effect, it is the same as having no other
d76 5
@


1.43
log
@- update the list of types
- some text improvements
- remember systat(1)

ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.42 2008/09/02 21:42:05 chl Exp $
d31 1
a31 1
.Dd $Mdocdate: September 2 2008 $
d313 1
a314 1
.Pp
@


1.42
log
@remove last bits of MALLOC/FREE

spotted by and initial patch from espie@@, with inputs from jmc@@

ok espie@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.41 2008/06/26 05:42:08 ray Exp $
d31 1
a31 1
.Dd $Mdocdate: June 26 2008 $
a57 3
Unlike its standard C library counterpart
.Pq Xr malloc 3 ,
the kernel version takes two more arguments.
d60 1
a60 2
argument further qualifies
.Fn malloc Ns 's
d100 11
d163 2
d210 1
a210 1
Misc. FS mount structures.
d291 7
a297 1
UDF file ids.
a298 12
.Pp
Statistics based on the
.Fa type
argument are maintained only if the kernel option
.Dv KMEMSTATS
is used when compiling the kernel
.Po the default in current\ \&
.Ox
kernels
.Pc
and can be examined by using
.Sq vmstat -m .
d409 1
@


1.41
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.40 2007/09/07 10:31:10 art Exp $
d31 1
a31 1
.Dd $Mdocdate: September 7 2007 $
d35 2
a36 1
.Nm malloc
a42 1
.Fn MALLOC "space" "cast" "unsigned long size" "int type" "int flags"
a44 1
.Fn FREE "void *addr" "int type"
a56 17
The
.Fn MALLOC
macro variant is functionally equivalent to
.Bd -literal -offset indent
(space) = (cast)malloc((u_long)(size), type, flags)
.Ed
.Pp
and the
.Fn FREE
macro variant is equivalent to
.Bd -literal -offset indent
free((caddr_t)(addr), type)
.Ed
.Pp
These macros should only be used when the
.Fa size
argument is a constant.
@


1.40
log
@Document M_ZERO.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.39 2007/06/01 05:37:14 deraadt Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d31 1
a31 1
.Dd $Mdocdate: June 1 2007 $
@


1.39
log
@remove crufty adosfs.  everytime we try to change a vfs layer interface,
adosfs has the issue and in an entirely different way.  noone uses this
code so this is hte best way to handle the problem
diff from pedro who went to sleep but we need to move ahead; ok thib
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.38 2007/05/31 19:20:00 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate$
d118 4
@


1.38
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.37 2007/02/13 18:14:01 mk Exp $
a222 6
.It Dv M_ADOSFSMNT
ADOSFS mount structures.
.It Dv M_ANODE
ADOSFS anode structures and tables.
.It Dv M_ADOSFSBITMAP
ADOSFS bitmap.
@


1.37
log
@It's not M1394CTL and M1394DATA.  It's M_1394CTL and M_1394DATA.

ok brad
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.36 2005/12/14 22:03:00 pedro Exp $
d38 1
a38 1
.Dd August 6, 2005
@


1.36
log
@Make ext2fs use a memory pool to allocate inodes, okay tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.35 2005/08/18 14:32:23 dlg Exp $
d263 1
a263 1
.It Dv M1394CTL
d265 1
a265 1
.It Dv M1394DATA
@


1.35
log
@document M_WAITOK as a separate flag rather than a note to M_NOWAIT

help from and ok jmc@@ ok deraadt@@ no objections art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.34 2005/08/06 17:04:07 miod Exp $
a228 2
.It Dv M_EXT2FSNODE
EXT2FS vnode private part.
@


1.34
log
@Document M_CANFAIL and sync M_xxx types;
prodded by beck@@, feedback jmc@@, ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.33 2005/06/17 21:36:20 drahn Exp $
d92 9
a106 8
Otherwise,
.Fn malloc
may call sleep to wait for resources to be released by other processes.
Note that
.Dv M_WAITOK
is conveniently defined to be 0, and hence may be or'ed into the
.Fa flags
argument to indicate that it's OK to wait for resources.
@


1.33
log
@Extended Attributes was a piece to get to ACLs, however ACLs have not
been worked on, so EA is pointless to maintain. go ahead jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.32 2005/04/15 13:30:51 tom Exp $
d38 1
a38 1
.Dd June 16, 1996
a100 4
If this flag is not set,
.Fn malloc
will never return
.Dv NULL .
d106 11
a118 2
Currently, only one flag is defined.
.Pp
a147 2
.It Dv M_NAMEI
Namei path name buffers.
d172 4
a235 2
.It Dv M_VFS
VFS file systems.
a241 2
.It Dv M_VMSWAP
VM swap structures.
d256 3
d298 7
@


1.32
log
@Missing space

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.30 2004/01/14 19:34:05 grange Exp $
a252 2
.It Dv M_UFS_EXTATTR
UFS Extended Attributes.
@


1.31
log
@mention new udf malloc types, okay deraadt@@
@
text
@d107 1
a107 1
is conveniently defined to be 0, and hence maybe or'ed into the
@


1.30
log
@Get rid of M_LOCKF and use pool for allocating lockf structures.
 From NetBSD.

Tested by many people, ok art@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.29 2003/07/11 13:47:41 jmc Exp $
d294 6
@


1.29
log
@fix some lists and macros;
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.28 2003/06/21 01:05:09 tedu Exp $
a174 2
.It Dv M_LOCKF
Byte-range locking structures.
@


1.28
log
@make type descriptions generally plural.
Vfs -> VFS, Adosfs -> ADOSFS, etc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.27 2003/06/21 00:57:43 tedu Exp $
d89 1
a89 1
.Fn malloc No Ns 's
@


1.27
log
@document new malloc type EMULDATA and missing NTFS types.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.26 2003/06/06 20:56:32 jmc Exp $
d132 1
a132 1
Protocol control block.
d136 1
a136 1
Fragment reassembly header.
d138 1
a138 1
Interface address.
d144 1
a144 1
Namei path name buffer.
d146 1
a146 1
Ioctl data buffer.
d150 1
a150 1
Vfs mount struct.
d152 1
a152 1
NFS request header.
d154 1
a154 1
NFS mount structure.
d164 1
a164 1
UFS mount structure.
d172 1
a172 1
Open file structure.
d174 1
a174 1
Open file descriptor table.
d186 1
a186 1
Export host address structure.
d188 1
a188 1
NFS server structure.
d190 1
a190 1
NFS uid mapping structure.
d192 1
a192 1
NFS server daemon structure.
d196 1
a196 1
Internet multicast address.
d198 1
a198 1
Link-level multicast address.
d202 1
a202 1
ISOFS mount structure.
d206 1
a206 1
MSDOS FS mount structure.
d208 1
a208 1
MSDOS FS fat table.
d216 1
a216 1
Miscfs mount structures.
d218 1
a218 1
Adosfs mount structures.
d220 1
a220 1
Adosfs anode structures and tables.
d222 1
a222 1
Adosfs bitmap.
@


1.26
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.25 2003/04/17 05:08:39 jmc Exp $
d266 2
d278 18
@


1.25
log
@typos;

md5(9): ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.24 2003/04/02 16:04:19 jmc Exp $
d129 1
a129 1
.Xr malloc 9
a292 2
.Sh SEE ALSO
.Xr vmstat 8
d398 2
@


1.24
log
@nfs -> NFS
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.23 2003/02/24 03:55:05 tedu Exp $
d109 1
a109 1
argument to indicate that it's Ok to wait for resources.
d358 1
a358 1
Can be used to specify a range of sizes if the exact size to debug is not
@


1.23
log
@sync with reality

ok art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.22 2002/12/20 06:10:27 art Exp $
d188 1
a188 1
Nfs server structure.
d190 1
a190 1
Nfs uid mapping structure.
d192 1
a192 1
Nfs server daemon structure.
@


1.22
log
@Reword the DEBUGGING section to get rid of second person forms.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.21 2002/12/20 06:05:31 art Exp $
d125 1
a125 1
Mbuf  memory.
d128 3
a130 2
.It Dv M_SOCKET
Socket structure.
a134 2
.It Dv M_HTABLE
IMP host tables.
a136 2
.It Dv M_ZOMBIE
Zombie proc status
a144 2
.It Dv M_GPROF
Kernel profiling buffer.
a146 6
.It Dv M_CRED
Credentials.
.It Dv M_PGRP
Process group header.
.It Dv M_SESSION
Session header.
a168 6
.It Dv M_VMMAPENT
VM map entry structures.
.It Dv M_VMOBJ
VM object structure.
.It Dv M_VMOBJHASH
VM object hash structure.
d170 1
a170 7
VM pmap.
.It Dv M_VMPVENT
VM phys-virt mapping entry.
.It Dv M_VMPAGER
XXX: VM pager struct.
.It Dv M_VMPGDATA
XXX: VM pager private data.
d181 2
a182 6
.It Dv M_SEGMENT
Segment for LFS.
.It Dv M_LFSNODE
LFS vnode private part.
.It Dv M_FFSNODE
FFS vnode private part.
a184 4
.It Dv M_NQLEASE
Nqnfs lease.
.It Dv M_NQMHOST
Nqnfs host address table.
a220 4
.It Dv M_IPQ
IP packet queue entry.
.It Dv M_AFS
Andrew File System.
a224 2
.It Dv M_PFIL
Packer filter.
a238 22
.It Dv M_BMSAFEMAP
Block or frag allocated from cyl group map.
.It Dv M_ALLOCDIRECT
Block or frag dependency for an inode.
.It Dv M_INDIRDEP
Indirect block dependencies.
.It Dv M_ALLOCINDIR
Block dependency for an indirect block.
.It Dv M_FREEFRAG
Previously used frag for an inode.
.It Dv M_FREEBLKS
Blocks freed from an inode.
.It Dv M_FREEFILE
Inode deallocated.
.It Dv M_DIRADD
New directory entry.
.It Dv M_MKDIR
New directory.
.It Dv M_DIRREM
Directory entry deleted.
.It Dv M_VMPBUCKET
VM page buckets.
d244 1
a244 1
UVM amap and realted.
d246 1
a246 3
UVM aobj and realted.
.It Dv M_POOL
Pool memory.
a252 2
.It Dv M_PIPE
Pipe structures.
d255 2
a256 10
.It Dv M_DEBUG
.Xr malloc 9
debug structures.
.It Dv M_KNOTE
Kernel event queue.
.It Dv M_CRYPTO_DATA
Cryptographic framework data buffers.
.It Dv M_IPSEC_POLICY
.Xr ipsec 4
SPD structures.
d262 4
a265 2
.It Dv M_CRYPTO_OPS
Cryptographic framework operation request structures.
@


1.21
log
@Document M_DEBUG.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.20 2002/08/28 08:28:20 tdeval Exp $
d411 2
a412 3
option allows for more extensive
debugging of memory allocations.
You can choose which allocation to debug with the
d418 1
a418 1
variables.
d422 1
a422 1
should be set to the memory size you want to debug.
d454 1
a454 1
When you get a memory access error, invoke the
d458 1
a458 1
to see what memory areas are allocated and freed.
d460 1
a460 1
list, you have gotten an access outside the allocated area.
d462 1
a462 1
you have gotten an access to freed memory.
d464 1
a464 1
You have to be very careful when using the
@


1.20
log
@RAIDframe spelling. ok art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.19 2002/07/17 11:49:36 art Exp $
d430 1
a430 1
When those are used, you need to set
d432 4
a435 1
to the wildcard.
d455 1
a455 1
When you get a memory access error, you can invoke the
@


1.19
log
@malloc debug variables have changed.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.18 2001/07/17 15:52:56 art Exp $
d301 1
a301 1
Raidframe data.
@


1.18
log
@Document ranges.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.17 2001/06/28 22:14:23 millert Exp $
d414 3
a416 3
.Va malloc_deb_type ,
.Va malloc_deb_size ,
.Va malloc_deb_size_lo
d418 1
a418 1
.Va malloc_deb_size_hi
d420 1
a420 1
.Va malloc_deb_type
d422 1
a422 1
.Va malloc_deb_size
d425 1
a425 1
.Va malloc_deb_size_lo
d427 1
a427 1
.Va malloc_deb_size_hi
d431 1
a431 1
.Va malloc_deb_size
@


1.17
log
@speling; jsyn@@nthought.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.16 2001/05/14 05:11:40 angelos Exp $
d414 3
a416 1
.Va malloc_deb_type
d418 1
a418 1
.Va malloc_deb_size
d425 8
@


1.16
log
@Sync with reality (M_SYSCTL is not yet committed, but it's coming)
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.15 2001/04/14 22:55:12 art Exp $
d159 1
a159 1
Large iov's.
d324 1
a324 1
Cryptographic framewrok data buffers.
@


1.15
log
@Mention that MALLOC should only be used for allocations with a constant size.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.14 2001/03/01 16:11:25 aaron Exp $
d144 2
a145 2
.It Dv M_SONAME
Socket name.
a151 2
.It Dv M_MAPMEM
Mapped memory descriptors.
a161 2
.It Dv M_FHANDLE
Network file handle.
a247 2
.It Dv M_MISCFSNODE
Miscfs vnode private part.
a249 2
.It Dv M_ADOSFSNODE
ADosfs vnode private part.
a299 8
.It Dv M_DISCQ
IPv6 discq.
.It Dv M_FRAGQ
IPv6 fragq.
.It Dv M_SECA
Sec Assoc.
.It Dv M_I6IFP
IPv6 if info.
d314 29
d344 1
a344 1
Misc temporary data buffers.
@


1.14
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.13 2000/10/12 18:06:00 aaron Exp $
d78 4
@


1.13
log
@General man page cleanups, mostly to remove trailing whitespace, hard
sentence breaks, and other such things.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.12 2000/06/25 13:46:06 pjanzen Exp $
d351 1
a351 1
such things as writing outside the allocated area and imbalanced calls to the
@


1.12
log
@comma splice
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.11 2000/06/07 10:02:56 art Exp $
d81 2
a82 1
the kernel version takes two more arguments.  The
@


1.11
log
@Document how 'show malloc' in ddb can be used to find out what went wrong.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.10 2000/06/06 20:33:18 aaron Exp $
d403 2
a404 2
should be set to the memory size you want to debug. 0 can be used as a
wildcard.
d436 1
a436 1
option, the memory consumption can run away pretty quickly and there is
@


1.10
log
@Some minor corrections.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.9 2000/06/06 20:18:54 art Exp $
d424 9
@


1.9
log
@Document MALLOC_DEBUG.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.8 1999/10/05 20:53:11 aaron Exp $
d113 2
a114 1
kernel memory usage. The following types are currently defined:
d354 2
a355 2
functions. Failing consistency checks will cause a panic or a system console
message:
d392 1
a392 1
.Dv MALLOC_DEBUG
d394 2
a395 2
debugging of memory allocations. You can choose which allocation to debug
with the
d409 2
a410 1
allocate two virtual pages. The pointer returned will be aligned so that
d412 2
a413 2
will be left unmapped. This way we can catch reads and writes outside the
allocated area.
d421 3
a423 2
There are no special diagnotics if any errors are caught by the debugging
malloc. The errors will look like normal access to unmapped memory.
d426 1
a426 1
.Dv MALLOC_DEBUG
@


1.8
log
@The .Bl -tag flag expects a -width argument.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.7 1999/09/23 04:12:07 alex Exp $
d389 38
@


1.7
log
@Typo fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: malloc.9,v 1.6 1999/09/02 17:28:06 espie Exp $
d86 1
a86 1
.Bl -tag -offset indent
@


1.6
log
@Minor fusses: OpenBSD tag, misused macros, codes references path.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d85 1
a85 1
operational charateristics as follows:
@


1.5
log
@Missed include
@
text
@d1 1
@


1.4
log
@More accurate messages, add missing types.
Complete SYNOPSIS.
@
text
@d44 1
@


1.3
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d44 1
d258 64
d328 1
a328 1
argument is maintained only if the kernel option
d331 2
a332 2
.Po the default in current
.Nx
d346 1
a346 1
configuration option attempts to detect detect memory corruption caused by
d381 1
a381 1
.Dq init: minbucket too small/struct freelist too big
@


1.2
log
@the the
@
text
@d37 1
a37 1
.Dd Jun 16, 1996
@


1.1
log
@kernel malloc()/MALLOC() man page from NetBSD
@
text
@d108 1
a108 1
argument broadly identifies the the kernel subsystem for which the allocated
@
