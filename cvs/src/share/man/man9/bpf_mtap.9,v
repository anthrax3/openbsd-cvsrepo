head	1.10;
access;
symbols
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8;
locks; strict;
comment	@.\" @;


1.10
date	2016.10.10.08.33.32;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	8RjgGQqyXDrXyMCk;

1.9
date	2016.09.12.16.24.37;	author krw;	state Exp;
branches;
next	1.8;
commitid	RJDGNn3vwOF2QQ11;

1.8
date	2016.05.10.23.51.50;	author dlg;	state Exp;
branches;
next	1.7;
commitid	SDyMIfptKN4Ug25j;

1.7
date	2016.04.08.06.40.07;	author jmc;	state Exp;
branches;
next	1.6;
commitid	WaJV7YlTFfxC1BLV;

1.6
date	2016.04.08.03.53.35;	author dlg;	state Exp;
branches;
next	1.5;
commitid	C5gqX8vpirO5dxLo;

1.5
date	2016.04.08.03.49.16;	author dlg;	state Exp;
branches;
next	1.4;
commitid	GTkfuuOZoK0Cgziv;

1.4
date	2016.03.29.10.40.13;	author dlg;	state Exp;
branches;
next	1.3;
commitid	rOnAAB0MreGqSU9P;

1.3
date	2016.03.29.07.33.21;	author jmc;	state Exp;
branches;
next	1.2;
commitid	ZnUaZBTzsjmrXM0n;

1.2
date	2016.03.29.05.20.09;	author dlg;	state Exp;
branches;
next	1.1;
commitid	6U2BhyEN0RhtYFcB;

1.1
date	2016.03.29.05.18.24;	author dlg;	state Exp;
branches;
next	;
commitid	m6JWn4blhA5Lagzo;


desc
@@


1.10
log
@Fix typo "bfp".
OK dlg@@
@
text
@.\"	$OpenBSD: bpf_mtap.9,v 1.9 2016/09/12 16:24:37 krw Exp $
.\"
.\" Copyright (c) 2016 David Gwynne <dlg@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: September 12 2016 $
.Dt BPF_MTAP 9
.Os
.Sh NAME
.Nm bpf_filter ,
.Nm bpf_mfilter ,
.Nm bpf_validate ,
.Nm bpf_mtap ,
.Nm bpf_mtap_hdr ,
.Nm bpf_mtap_af ,
.Nm bpf_mtap_ether
.Nd BPF kernel API
.Sh SYNOPSIS
.In net/bpf.h
.Ft u_int
.Fo bpf_filter
.Fa "const struct bpf_insn *pc"
.Fa "const u_char *pkt"
.Fa "u_int wirelen"
.Fa "u_int pktlen"
.Fc
.Ft u_int
.Fo bpf_mfilter
.Fa "const struct bpf_insn *pc"
.Fa "const struct mbuf *m"
.Fa "u_int wirelen"
.Fc
.Ft int
.Fn bpf_validate "struct bpf_insn *pc" "int len"
.Ft int
.Fn bpf_mtap "caddr_t bpf" "const struct mbuf *m" "u_int direction"
.Ft int
.Fo bpf_mtap_hdr
.Fa "caddr_t bpf"
.Fa "caddr_t hdr"
.Fa "u_int hdrlen"
.Fa "const struct mbuf *m"
.Fa "u_int direction"
.Fa "void (*cpfn)(const void *, void *, size_t)"
.Fc
.Ft int
.Fo bpf_mtap_af
.Fa "caddr_t bpf"
.Fa "u_int32_t af"
.Fa "const struct mbuf *m"
.Fa "u_int direction"
.Fc
.Ft int
.Fn bpf_mtap_ether "caddr_t bpf" "const struct mbuf *m" "u_int direction"
.Sh DESCRIPTION
The BPF kernel API provides functions for evaluating BPF instructions
against packets, and incoming linkage from device drivers.
A packet is parsed by the filters associated with each interface
and, if accepted, stashed into the corresponding buffer.
.Pp
.Fn bpf_filter
executes the BPF program referenced by
.Fa pc
against the packet buffer starting at
.Fa pkt
of
.Fa pktlen
bytes in length.
.Fa wirelen
is the length of the original packet on the wire.
.Pp
.Fn bpf_mfilter
executes the BPF program referenced by
.Fa pc
against the packet in the mbuf
.Fa m .
.Fa wirelen
is the length of the original packet on the wire.
.Pp
.Fn bpf_validate
tests if the BPF program referenced by
.Fa pc
is valid.
.Fa len
specifies the number of instructions in
.Fa pc .
.Pp
.Fn bpf_tap
runs the filters on the BPF interface referenced by
.Fa bpf
in the direction
.Fa direction
against the packet in the
.Fa pkt
buffer.
.Pp
.Fn bpf_mtap
runs the filters on the BPF interface referenced by
.Fa bpf
in the direction
.Fa direction
against the packet in mbuf chain
.Fa m .
.Pp
.Fn bpf_mtap_hdr
runs the filters on the BPF interface referenced by
.Fa bpf
in the direction
.Fa direction
against the packet in mbuf chain
.Fa m .
The header referenced by
.Fa hdr
will be prefixed to the packet during filter evaluation.
A custom packet copy function may be provided via
.Fa cpfn .
If
.Fa cpfn
is
.Dv NULL
an internal function for copying mbuf payloads will be used.
.Pp
.Fn bpf_mtap_af
runs the filters on the BPF interface referenced by
.Fa bpf
in the direction
.Fa direction
against the packet in mbuf chain
.Fa m .
The address family specified by
.Fa af
will be prepended to the packet before matching occurs.
.Pp
.Fn bpf_mtap_ether
runs the filters on the BPF interface referenced by
.Fa bpf
in the direction
.Fa direction
against an Ethernet packet in the mbuf
.Fa m .
If the mbuf is flagged with
.Dv M_VLANTAG
an Ethernet VLAN header is constructed using
m->m_pkthdr.ether_vtag
and
m->m_pkthdr.pf.prio
before matching occurs.
.Sh CONTEXT
.Fn bpf_filter ,
.Fn bpf_mfilter ,
and
.Fn bpf_validate
can be called from process context, or from an interrupt context.
.Pp
.Fn bpf_mtap ,
.Fn bpf_mtap ,
.Fn bpf_mtap_hdr ,
.Fn bpf_mtap_af ,
and
.Fn bpf_mtap_ether
can be called from process context, or from an interrupt context at or below
.Dv IPL_NET .
.Sh RETURN VALUES
.Fn bpf_filter ,
and
.Fn bpf_mfilter
return -1 (cast to an unsigned integer) if the filter program is
.Dv NULL ,
or the result of the filter program.
Filter programs should return the maximum number of bytes of the
packet to capture, or 0 if the packet does not match the filter
program.
.Pp
.Fn bpf_validate
returns a non-zero value if the BPF program is valid,
otherwise 0.
.Pp
.Fn bpf_mtap ,
.Fn bpf_mtap_hdr ,
.Fn bpf_mtap_af ,
and
.Fn bpf_mtap_ether
return 1 if the packet matched a filter that indicates the packet
should be dropped, otherwise 0.
.Sh SEE ALSO
.Xr mbuf 9 ,
.Xr spl 9
@


1.9
log
@bpf_tap() is long dead! Long live bpf_mtap() & friends.

ok natano@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bpf_mtap.9,v 1.8 2016/05/10 23:51:50 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: May 10 2016 $
d99 1
a99 1
.Fn bfp_tap
d108 1
a108 1
.Fn bfp_mtap
d116 1
a116 1
.Fn bfp_mtap_hdr
@


1.8
log
@the bpf_mtap functions take const struct mbuf *s now
@
text
@d1 1
a1 1
.\"	$OpenBSD: bpf_mtap.9,v 1.7 2016/04/08 06:40:07 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 8 2016 $
a23 1
.Nm bpf_tap ,
a46 2
.Fn bpf_tap "caddr_t bpf" "u_char *pkt" "u_int pktlen" "u_int direction"
.Ft int
a166 1
.Fn bpf_tap ,
a188 1
.Fn bpf_tap ,
@


1.7
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: bpf_mtap.9,v 1.6 2016/04/08 03:53:35 dlg Exp $
d50 1
a50 1
.Fn bpf_mtap "caddr_t bpf" "struct mbuf *m" "u_int direction"
d56 1
a56 1
.Fa "struct mbuf *m"
d61 6
a66 1
.Fn bpf_mtap_af "caddr_t bpf" "u_int32_t af" "struct mbuf *m" "u_int direction"
d68 1
a68 1
.Fn bpf_mtap_ether "caddr_t bpf" "struct mbuf *m" "u_int direction"
@


1.6
log
@may as well put words around bpf_validate while here
@
text
@d1 1
a1 1
.\"	$OpenBSD: bpf_mtap.9,v 1.5 2016/04/08 03:49:16 dlg Exp $
d175 1
a175 1
and 
d178 1
a178 1
.Dv NULL,
@


1.5
log
@document bpf_filter and bpf_mfilter
@
text
@d1 1
a1 1
.\"	$OpenBSD: bpf_mtap.9,v 1.4 2016/03/29 10:40:13 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: March 29 2016 $
d23 1
d46 2
d89 8
d159 1
d161 1
a161 1
.Fn bpf_mfilter
d183 4
@


1.4
log
@all the bpf_mtap functions now return whether to drop the packet or not
@
text
@d1 1
a1 1
.\"	$OpenBSD: bpf_mtap.9,v 1.3 2016/03/29 07:33:21 jmc Exp $
d21 2
d31 13
d62 2
a63 1
The BPF kernel API provides incoming linkage from device drivers.
d67 19
d147 6
d162 10
@


1.3
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: bpf_mtap.9,v 1.2 2016/03/29 05:20:09 dlg Exp $
d31 1
a31 1
.Ft void
d33 1
a33 1
.Ft void
d42 1
a42 1
.Ft void
d44 1
a44 1
.Ft void
d121 7
a127 2
.Fn bpf_tap
returns 1 if the packet matched a filter that indicates the packet
@


1.2
log
@IPL_NET, not IPL_HIGH.

too much reading task_add.9 as a reference
@
text
@d1 1
a1 1
.\"	$OpenBSD: bpf_mtap.9,v 1.1 2016/03/29 05:18:24 dlg Exp $
d34 1
a34 1
.Fo bpf_hdr
d37 1
a37 1
.Fa "u_int hdrlen" 
d48 2
a49 2
A packet is parsed by the filters associated with each interface,
and if accepted, stashed into the corresponding buffer.
@


1.1
log
@some basic doco for the bpf_mtap family of functions.

yes yes deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d119 1
a119 1
.Dv IPL_HIGH .
@

