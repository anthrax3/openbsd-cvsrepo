head	1.70;
access;
symbols
	OPENBSD_6_0:1.65.0.4
	OPENBSD_6_0_BASE:1.65
	OPENBSD_5_9:1.65.0.2
	OPENBSD_5_9_BASE:1.65
	OPENBSD_5_8:1.59.0.6
	OPENBSD_5_8_BASE:1.59
	OPENBSD_5_7:1.59.0.2
	OPENBSD_5_7_BASE:1.59
	OPENBSD_5_6:1.58.0.4
	OPENBSD_5_6_BASE:1.58
	OPENBSD_5_5:1.57.0.4
	OPENBSD_5_5_BASE:1.57
	OPENBSD_5_4:1.54.0.4
	OPENBSD_5_4_BASE:1.54
	OPENBSD_5_3:1.54.0.2
	OPENBSD_5_3_BASE:1.54
	OPENBSD_5_2:1.53.0.2
	OPENBSD_5_2_BASE:1.53
	OPENBSD_5_1_BASE:1.51
	OPENBSD_5_1:1.51.0.2
	OPENBSD_5_0:1.50.0.12
	OPENBSD_5_0_BASE:1.50
	OPENBSD_4_9:1.50.0.10
	OPENBSD_4_9_BASE:1.50
	OPENBSD_4_8:1.50.0.8
	OPENBSD_4_8_BASE:1.50
	OPENBSD_4_7:1.50.0.4
	OPENBSD_4_7_BASE:1.50
	OPENBSD_4_6:1.50.0.6
	OPENBSD_4_6_BASE:1.50
	OPENBSD_4_5:1.50.0.2
	OPENBSD_4_5_BASE:1.50
	OPENBSD_4_4:1.49.0.4
	OPENBSD_4_4_BASE:1.49
	OPENBSD_4_3:1.49.0.2
	OPENBSD_4_3_BASE:1.49
	OPENBSD_4_2:1.48.0.2
	OPENBSD_4_2_BASE:1.48
	OPENBSD_4_1:1.46.0.2
	OPENBSD_4_1_BASE:1.46
	OPENBSD_4_0:1.45.0.2
	OPENBSD_4_0_BASE:1.45
	OPENBSD_3_9:1.42.0.2
	OPENBSD_3_9_BASE:1.42
	OPENBSD_3_8:1.41.0.2
	OPENBSD_3_8_BASE:1.41
	OPENBSD_3_7:1.38.0.4
	OPENBSD_3_7_BASE:1.38
	OPENBSD_3_6:1.38.0.2
	OPENBSD_3_6_BASE:1.38
	OPENBSD_3_5:1.37.0.2
	OPENBSD_3_5_BASE:1.37
	OPENBSD_3_4:1.33.0.2
	OPENBSD_3_4_BASE:1.33
	OPENBSD_3_3:1.31.0.2
	OPENBSD_3_3_BASE:1.31
	OPENBSD_3_2:1.27.0.2
	OPENBSD_3_2_BASE:1.27
	OPENBSD_3_1:1.25.0.2
	OPENBSD_3_1_BASE:1.25
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6;
locks; strict;
comment	@.\" @;


1.70
date	2017.01.22.22.57.15;	author benno;	state Exp;
branches;
next	1.69;
commitid	zsSttYfSZgoN0bT6;

1.69
date	2017.01.22.09.03.09;	author benno;	state Exp;
branches;
next	1.68;
commitid	eBexgkIblmu7ZXTo;

1.68
date	2016.10.18.18.13.56;	author millert;	state Exp;
branches;
next	1.67;
commitid	aPPHgmmA4hseZUFx;

1.67
date	2016.10.18.12.38.01;	author millert;	state Exp;
branches;
next	1.66;
commitid	Us8lv7O4Dfc4wDQ2;

1.66
date	2016.08.24.16.14.24;	author renato;	state Exp;
branches;
next	1.65;
commitid	AFoUImpFwEtg1bcs;

1.65
date	2015.11.01.21.57.14;	author guenther;	state Exp;
branches;
next	1.64;
commitid	P4kC9YAV9DAwqlDp;

1.64
date	2015.10.12.17.20.53;	author schwarze;	state Exp;
branches;
next	1.63;
commitid	eDEh0c4hhr1FhRy7;

1.63
date	2015.10.05.21.59.29;	author tedu;	state Exp;
branches;
next	1.62;
commitid	rllXSzDJHI63q8Cp;

1.62
date	2015.10.05.01.22.34;	author deraadt;	state Exp;
branches;
next	1.61;
commitid	l8g9I3KbTRcbSRkA;

1.61
date	2015.09.26.15.40.28;	author guenther;	state Exp;
branches;
next	1.60;
commitid	OKX3zLNBbgQ8Slyp;

1.60
date	2015.09.23.17.49.16;	author tedu;	state Exp;
branches;
next	1.59;
commitid	rEy097RIibdfOWKp;

1.59
date	2015.01.23.13.02.49;	author sthen;	state Exp;
branches;
next	1.58;
commitid	vxNaa7AqH0qoSrEK;

1.58
date	2014.06.01.15.44.09;	author deraadt;	state Exp;
branches;
next	1.57;
commitid	o40HZ8iz6nQaPVbk;

1.57
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.56;

1.56
date	2013.08.14.08.39.28;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2013.08.14.06.32.32;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2012.11.02.16.35.21;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2012.04.11.21.09.23;	author ratchov;	state Exp;
branches;
next	1.52;

1.52
date	2012.04.08.17.36.21;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2011.09.17.08.38.26;	author schwarze;	state Exp;
branches;
next	1.50;

1.50
date	2008.11.14.13.42.05;	author tedu;	state Exp;
branches;
next	1.49;

1.49
date	2007.09.28.00.13.23;	author sobrado;	state Exp;
branches;
next	1.48;

1.48
date	2007.05.31.19.20.01;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2007.05.29.00.22.50;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2007.02.15.18.08.50;	author thib;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.27.05.05.16;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2006.03.21.03.24.59;	author ray;	state Exp;
branches;
next	1.43;

1.43
date	2006.03.19.19.17.58;	author ray;	state Exp;
branches;
next	1.42;

1.42
date	2005.10.27.10.26.55;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2005.08.08.13.15.58;	author xsa;	state Exp;
branches;
next	1.40;

1.40
date	2005.07.09.08.05.08;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2005.05.15.22.38.26;	author krw;	state Exp;
branches;
next	1.38;

1.38
date	2004.04.10.09.10.16;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2004.02.24.19.55.51;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2004.02.10.20.33.32;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.10.04.11.35.31;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2003.09.29.11.29.20;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.29.13.26.04;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2003.04.20.20.04.17;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2003.02.26.15.05.07;	author david;	state Exp;
branches;
next	1.30;

1.30
date	2003.02.25.08.51.31;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2003.01.21.08.12.41;	author hugh;	state Exp;
branches;
next	1.28;

1.28
date	2002.10.11.22.15.02;	author marc;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.03.06.27.44;	author kjell;	state Exp;
branches;
next	1.26;

1.26
date	2002.05.23.09.30.35;	author mpech;	state Exp;
branches;
next	1.25;

1.25
date	2002.04.01.18.41.27;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.17.19.58.32;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2002.01.12.16.23.36;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.05.14.45.54;	author mpech;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.04.10.28.20;	author wilfried;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.28.22.14.23;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.24.22.16.11;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.24.22.03.03;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.18.15.17.04;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.04.10.17.31.55;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.03.14.21.21.31;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.06.19.56.52;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.04.03.26.44;	author jason;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.25.18.14.05;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.21.15.41.26;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.20.21.09.07;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.25.15.03.41;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.12.18.06.03;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.06.21.46.56;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.09.14.06.21.23;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	99.09.07.13.44.15;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.09.06.13.36.42;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	99.09.05.16.23.12;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.08.31.17.08.04;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.08.19.08.12.11;	author millert;	state Exp;
branches;
next	;


desc
@@


1.70
log
@improve on previous edit.
suggested by jmc@@, thanks for watching over my feeble attempts to edit
manpages.
@
text
@.\" Copyright (c) 1995 FreeBSD Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL [your name] OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: style.9,v 1.69 2017/01/22 09:03:09 benno Exp $
.\"
.Dd $Mdocdate: January 22 2017 $
.Dt STYLE 9
.Os
.Sh NAME
.Nm style
.Nd Kernel source file style guide (KNF)
.Sh DESCRIPTION
This file specifies the preferred style for kernel source files in the
.Ox
source tree.
It is also a guide for preferred userland code style.
These guidelines should be followed for all new code.
In general, code can be considered
.Dq new code
when it makes up about 50% or more of the file(s) involved.
This is enough to break precedents in the existing code and use the
current style guidelines.
.Bd -literal -offset indent
/*
 * Style guide for the OpenBSD KNF (Kernel Normal Form).
 */

/*
 * VERY important single-line comments look like this.
 */

/* Most single-line comments look like this. */

/*
 * Multi-line comments look like this.  Make them real sentences.
 * Fill them so they look like real paragraphs.
 */
.Ed
.Pp
Kernel include files (i.e.,
.In sys/*.h )
come first; normally, you'll need
.In sys/types.h
OR
.In sys/param.h ,
but not both!
.In sys/types.h
includes
.In sys/cdefs.h ,
and it's okay to depend on that.
.Bd -literal -offset indent
#include <sys/types.h>	/* Non-local includes in brackets. */
.Ed
.Pp
If it's a network program, put the network include files next.
.Bd -literal -offset indent
#include <net/if.h>
#include <net/if_dl.h>
#include <net/route.h>
#include <netinet/in.h>
.Ed
.Pp
Then there's a blank line, followed by the
.Pa /usr/include
files.
The
.Pa /usr/include
files, for the most part, should be sorted.
.Pp
Global pathnames are defined in
.Pa /usr/include/paths.h .
Pathnames local to the program go in
.Pa pathnames.h
in the local directory.
.Bd -literal -offset indent
#include <paths.h>
.Ed
.Pp
Then there's a blank line, and the user include files.
.Bd -literal -offset indent
#include "pathnames.h"	/* Local includes in double quotes. */
.Ed
.Pp
All functions are prototyped somewhere.
.Pp
Function prototypes for private functions (i.e., functions not used
elsewhere) go at the top of the first source module.
In userland, functions local to one source module should be declared
.Ql static .
This should not be done in kernel land since it makes it impossible
to use the kernel debugger.
.Pp
Functions used from other parts of the kernel are prototyped in the
relevant include file.
.Pp
Functions that are used locally in more than one module go into a
separate header file, e.g.,
.Pa extern.h .
.Pp
Prototypes should not have variable names associated with the types; i.e.,
.Bd -literal -offset indent
void	function(int);
.Ed
not:
.Bd -literal -offset indent -compact
void	function(int a);
.Ed
.Pp
Prototypes may have an extra space after a tab to enable function names
to line up:
.Bd -literal -offset indent
static char	*function(int, const char *);
static void	 usage(void);
.Ed
.Pp
There should be no space between the function name and the argument list.
.Pp
Use
.Li __dead
from
.In sys/cdefs.h
for functions that don't return, i.e.,
.Bd -literal -offset indent
__dead void	abort(void);
.Ed
.Pp
In header files, put function prototypes within
.Dv __BEGIN_DECLS / __END_DECLS
matching pairs.
This makes the header file usable from C++.
.Pp
Macros are capitalized and parenthesized, and should avoid side-effects.
If they are an inline expansion of a function, the function is defined
all in lowercase; the macro has the same name all in uppercase.
If the macro needs more than a single line, use braces.
Right-justify the backslashes, as the resulting definition is easier to read.
If the macro encapsulates a compound statement, enclose it in a
.Dq Li do
loop,
so that it can safely be used in
.Dq Li if
statements.
Any final statement-terminating semicolon should be
supplied by the macro invocation rather than the macro, to make parsing easier
for pretty-printers and editors.
.Bd -literal -offset indent
#define	MACRO(x, y) do {					\e
	variable = (x) + (y);					\e
	(y) += 2;						\e
} while (0)
.Ed
.Pp
Enumeration values are all uppercase.
.Bd -literal -offset indent
enum enumtype { ONE, TWO } et;
.Ed
.Pp
When defining unsigned integers use
.Dq "unsigned int"
rather than just
.Dq "unsigned" ;
the latter has been a source of confusion in the past.
.Pp
When declaring variables in structures, declare them sorted by use, then
by size (largest to smallest), then by alphabetical order.
The first category normally doesn't apply, but there are exceptions.
Each one gets its own line.
Put a tab after the first word, i.e., use
.Ql int^Ix;
and
.Ql struct^Ifoo *x; .
.Pp
Major structures should be declared at the top of the file in which they
are used, or in separate header files if they are used in multiple
source files.
Use of the structures should be by separate declarations and should be
.Dq Li extern
if they are declared in a header file.
.Bd -literal -offset indent
struct foo {
	struct	foo *next;	/* List of active foo */
	struct	mumble amumble;	/* Comment for mumble */
	int	bar;
};
struct foo *foohead;		/* Head of global foo list */
.Ed
.Pp
Use
.Xr queue 3
macros rather than rolling your own lists, whenever possible.
Thus, the previous example would be better written:
.Bd -literal -offset indent
#include <sys/queue.h>
struct	foo {
	LIST_ENTRY(foo)	link;	/* Queue macro glue for foo lists */
	struct	mumble amumble;	/* Comment for mumble */
	int	bar;
};
LIST_HEAD(, foo) foohead;	/* Head of global foo list */
.Ed
.Pp
Avoid using typedefs for structure types.
This makes it impossible
for applications to use pointers to such a structure opaquely, which
is both possible and beneficial when using an ordinary struct tag.
When convention requires a typedef, make its name match the struct tag.
Avoid typedefs ending in
.Dq Li \&_t ,
except as specified in Standard C or by
.Tn POSIX .
Don't use the same name for a struct tag and a typedef, as this makes
the code unusable from C++.
.Bd -literal -offset indent
/* Make the structure name match the typedef. */
typedef struct _bar {
	int	level;
} BAR;
.Ed
.Bd -literal -offset indent
/*
 * All major routines should have a comment briefly describing what
 * they do.  The comment before the "main" routine should describe
 * what the program does.
 */
int
main(int argc, char *argv[])
{
	int aflag, bflag, ch, num;
	const char *errstr;
.Ed
.Pp
For consistency,
.Xr getopt 3
should be used to parse options.
Options should be sorted in the
.Xr getopt 3
call and the switch statement, unless
parts of the switch cascade.
Elements in a switch statement that cascade should have a FALLTHROUGH comment.
Numerical arguments should be checked for accuracy.
.Bd -literal -offset indent
while ((ch = getopt(argc, argv, "abn:")) != -1) {
	switch (ch) {		/* Indent the switch. */
	case 'a':		/* Don't indent the case. */
		aflag = 1;
		/* FALLTHROUGH */
	case 'b':
		bflag = 1;
		break;
	case 'n':
		num = strtonum(optarg, 0, INT_MAX, &errstr);
		if (errstr) {
			warnx("number is %s: %s", errstr, optarg);
			usage();
		}
		break;
	default:
		usage();
	}
}
argc -= optind;
argv += optind;
.Ed
.Pp
Use a space after keywords
.Pf ( Li if ,
.Li while ,
.Li for ,
.Li return ,
.Li switch ) .
No braces are
used for control statements with zero or only a single statement unless that
statement is more than a single line, in which case they are permitted.
.Bd -literal -offset indent
for (p = buf; *p != '\e0'; ++p)
	continue;
for (;;)
	stmt;
for (;;) {
	z = a + really + long + statement + that + needs +
	    two + lines + gets + indented + four + spaces +
	    on + the + second + and + subsequent + lines;
}
for (;;) {
	if (cond)
		stmt;
}
.Ed
.Pp
Parts of a for loop may be left empty.
.Bd -literal -offset indent
for (; cnt < 15; cnt++) {
	stmt1;
	stmt2;
}
.Ed
.Pp
Indentation is an 8 character tab.
Second level indents are four spaces.
All code should fit in 80 columns.
.Bd -literal -offset indent
while (cnt < 20)
	z = a + really + long + statement + that + needs +
	    two + lines + gets + indented + four + spaces +
	    on + the + second + and + subsequent + lines;
.Ed
.Pp
Do not add whitespace at the end of a line, and only use tabs
followed by spaces to form the indentation.
Do not use more spaces than a tab will produce
and do not use spaces in front of tabs.
.Pp
Closing and opening braces go on the same line as the else.
Braces that aren't necessary may be left out, unless they cause
a compiler warning.
.Bd -literal -offset indent
if (test)
	stmt;
else if (bar) {
	stmt;
	stmt;
} else
	stmt;
.Ed
.Pp
Do not use spaces after function names.
Commas have a space after them.
Do not use spaces after
.Sq \&(
or
.Sq \&[
or preceding
.Sq \&]
or
.Sq \&)
characters.
.Bd -literal -offset indent
if ((error = function(a1, a2)))
	exit(error);
.Ed
.Pp
Unary operators don't require spaces; binary operators do.
Don't use parentheses unless they're required for precedence, the statement
is confusing without them, or the compiler generates a warning without them.
Remember that other people may be confused more easily than you.
Do YOU understand the following?
.Bd -literal -offset indent
a = b->c[0] + ~d == (e || f) || g && h ? i : j >> 1;
k = !(l & FLAGS);
.Ed
.Pp
Exits should be 0 on success, or non-zero for errors.
.Bd -literal -offset indent
/*
 * Avoid obvious comments such as
 * "Exit 0 on success."
 */
exit(0);
.Ed
.Pp
The function type should be on a line by itself
preceding the function.
.Bd -literal -offset indent
static char *
function(int a1, int a2, float fl, int a4)
{
.Ed
.Pp
When declaring variables in functions, declare them sorted by size (largest to
smallest), then in alphabetical order; multiple ones per line are okay.
Old style function declarations should be avoided.
ANSI style function declarations should go in an include file such as
.Dq Pa extern.h .
If a line overflows, reuse the type keyword.
.Pp
Be careful not to obfuscate the code by initializing variables in
the declarations.
Use this feature only thoughtfully.
DO NOT use function calls in initializers!
.Bd -literal -offset indent
struct foo one, *two;
double three;
int *four, five;
char *six, seven, eight, nine, ten, eleven, twelve;

four = myfunction();
.Ed
.Pp
Do not declare functions inside other functions.
.Pp
Casts and
.Fn sizeof
calls are not followed by a space.
Note that
.Xr indent 1
does not understand this rule.
.Pp
Use of the
.Dq register
specifier is discouraged in new code.
Optimizing compilers such as gcc can generally do a better job
of choosing which variables to place in registers to improve
code performance.
The exception to this is in functions containing assembly code where the
.Dq register
specifier is required for proper code generation in the absence of
compiler optimization.
.Pp
When using
.Fn longjmp
or
.Fn vfork
in a program, the
.Fl W
or
.Fl Wall
flag should be used to verify that the compiler does not generate
warnings such as
.Bd -literal -offset indent
warning: variable `foo' might be clobbered by `longjmp' or `vfork'.
.Ed
.Pp
If any warnings of this type occur, you must apply the
.Dq volatile
type-qualifier to the variable in question.
Failure to do so may result in improper code generation when optimization
is enabled.
Note that for pointers, the location of
.Dq volatile
specifies if the type-qualifier applies to the pointer, or the thing being
pointed to.
A volatile pointer is declared with
.Dq volatile
to the right of the
.Dq * .
Example:
.Bd -literal -offset indent
char *volatile foo;
.Ed
.Pp
says that
.Dq foo
is volatile, but
.Dq *foo
is not.
To make
.Dq *foo
volatile use the syntax
.Bd -literal -offset indent
volatile char *foo;
.Ed
.Pp
If both the pointer and the thing pointed to are volatile use
.Bd -literal -offset indent
volatile char *volatile foo;
.Ed
.Pp
.Dq const
is also a type-qualifier and the same rules apply.
The description of a read-only hardware register might look something like:
.Bd -literal -offset indent
const volatile char *reg;
.Ed
.Pp
Global flags set inside signal handlers should be of type
.Dq volatile sig_atomic_t
if possible.
This guarantees that the variable may be accessed as an atomic entity,
even when a signal has been delivered.
Global variables of other types (such as structures) are not
guaranteed to have consistent values when accessed via a signal handler.
.Pp
.Dv NULL
is the preferred null pointer constant.
Use
.Dv NULL
instead of
(type\ *)0 or (type\ *)NULL in all cases except for arguments to variadic
functions where the compiler does not know the type.
.Pp
Don't use
.Ql \&!
for tests unless it's a boolean, i.e., use
.Bd -literal -offset indent
if (*p == '\e0')
.Ed
not
.Bd -literal -offset indent -compact
if (!*p)
.Ed
.Pp
Routines returning
.Li void *
should not have their return values cast to any pointer type.
.Pp
Use the
.Xr err 3
and
.Xr warn 3
family of functions.
Don't roll your own!
.Bd -literal -offset indent
if ((four = malloc(sizeof(struct foo))) == NULL)
	err(1, NULL);
if ((six = (int *)overflow()) == NULL)
	errx(1, "Number overflowed.");
return eight;
.Ed
.Pp
Old-style function declarations look like this:
.Bd -literal -offset indent
static char *
function(a1, a2, fl, a4)
	int a1, a2;	/* Declare ints, too, don't default them. */
	float fl;	/* Beware double vs. float prototype differences. */
	int a4;		/* List in order declared. */
{
	...
}
.Ed
.Pp
Use ANSI function declarations unless you explicitly need K&R compatibility.
Long parameter lists are wrapped with a normal four space indent.
.Pp
Variable numbers of arguments should look like this:
.Bd -literal -offset indent
#include <stdarg.h>

void
vaf(const char *fmt, ...)
{
	va_list ap;
	va_start(ap, fmt);

	STUFF;

	va_end(ap);

	/* No return needed for void functions. */
}

static void
usage(void)
{
	extern char *__progname;	/* from crt0.o */
.Ed
.Pp
Usage statements should take the same form as the synopsis in manual pages.
Options without
operands come first, in alphabetical order inside a single set of
braces, followed by options with operands, in alphabetical order,
each in braces, followed by required arguments in the order they
are specified, followed by optional arguments in the order they
are specified.
.Pp
A bar
.Pq Sq \&|
separates either-or options/arguments,
and multiple options/arguments which are specified together are
placed in a single set of braces.
.Pp
If numbers are used as options, they should be placed first,
as shown in the example below.
Uppercase letters take precedence over lowercase.
.Bd -literal -offset indent
"usage: f [-12aDde] [-b b_arg] [-m m_arg] req1 req2 [opt1 [opt2]]\en"
"usage: f [-a | -b] [-c [-de] [-n number]]\en"
.Ed
.Pp
The
.Li __progname
string may be used instead of hard-coding the program name.
.Bd -literal -offset indent
(void)fprintf(stderr, "usage: %s [-ab]\en", __progname);
exit(1);
.Ed
.Pp
New core kernel code should be reasonably compliant with the style guides.
The guidelines for third-party maintained modules and device drivers are more
relaxed but at a minimum should be internally consistent with their style.
.Pp
Whenever possible, code should be run through a code checker
(e.g.,
.Dq Li gcc -Wall -W -Wpointer-arith -Wbad-function-cast ...\&
or splint from the ports tree) and produce minimal warnings.
Since lint has been removed, the only lint-style comment that should
be used is FALLTHROUGH, as it's useful to humans.
Other lint-style comments such as ARGSUSED, LINTED, and NOTREACHED
may be deleted.
.Pp
Note that documentation follows its own style guide,
as documented in
.Xr mdoc 7 .
.Sh FILES
.Bl -tag -width "/usr/share/misc/license.template " -compact
.It Pa /usr/share/misc/license.template
Example license for new code.
.El
.Sh SEE ALSO
.Xr indent 1 ,
.Xr err 3 ,
.Xr queue 3 ,
.Xr warn 3 ,
.Xr mdoc 7
.Sh HISTORY
This man page is largely based on the src/admin/style/style file from the
.Bx 4.4-Lite2
release, with updates to reflect the current practice and
desire of the
.Ox
project.
@


1.69
log
@remove the perfect example
ok lengthyhackroomdiscussion@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.68 2016/10/18 18:13:56 millert Exp $
d27 1
a27 1
.Dd $Mdocdate: October 18 2016 $
d89 1
a89 1
files should be mosty sorted.
@


1.68
log
@Don't tell the programmer not to put variable declarations inside
blocks.  OK guenther@@ kettenis@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.67 2016/10/18 12:38:01 millert Exp $
d89 1
a89 4
files should be sorted!
.Bd -literal -offset indent
#include <stdio.h>
.Ed
@


1.67
log
@Use "continue;" instead of a bare ";" in the for() loop example
with no body.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.66 2016/08/24 16:14:24 renato Exp $
d27 1
a27 1
.Dd $Mdocdate: August 24 2016 $
a314 2
Don't put declarations inside blocks unless the routine is
unusually complicated.
@


1.66
log
@Since the removal of rwhod and friends a couple of years ago, there
isn't any file in the base system including <protocols/rwhod.h>. So,
stop suggesting the inclusion of this header in this man page.

ok tedu@@ deraadt@@ mpi@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.65 2015/11/01 21:57:14 guenther Exp $
d27 1
a27 1
.Dd $Mdocdate: November 1 2015 $
d300 1
a300 1
	;	/* nothing */
@


1.65
log
@Delete sentence about option ordering the manpage (moved to mdoc.7)
While here: PRINTFLIKE has been cleaned from base so don't mention it

suggested by and ok jmc@@ schwarze@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.64 2015/10/12 17:20:53 schwarze Exp $
d27 1
a27 1
.Dd $Mdocdate: October 12 2015 $
a81 1
#include <protocols/rwhod.h>
@


1.64
log
@Parentheses are useless after "return", it's not a function.
There is no need to mop this up everywhere, but at least style(9)
should show modern rather than historic style.
OK millert@@ tedu@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.63 2015/10/05 21:59:29 tedu Exp $
d27 1
a27 1
.Dd $Mdocdate: October 5 2015 $
a591 2
Note that the options list in manual pages should be purely alphabetical.
That is, with no regard to whether an option takes an argument.
d615 2
a616 2
Other lint-style comments such as ARGSUSED, LINTED, NOTREACHED, and
PRINTFLIKE may be deleted.
@


1.63
log
@change a few examples to be more stylistic. pointed out by rob pierce
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.62 2015/10/05 01:22:34 deraadt Exp $
d534 1
a534 1
return (eight);
@


1.62
log
@user land -> userland; from Rob Pierce
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.61 2015/09/26 15:40:28 guenther Exp $
d27 1
a27 1
.Dd $Mdocdate: September 26 2015 $
d267 1
a267 1
while ((ch = getopt(argc, argv, "abn:")) != -1)
d285 1
d381 5
a385 5
exit(0);	/*
		 * Avoid obvious comments such as
		 * "Exit 0 on success."
		 */
}
a534 1
}
a604 1
}
@


1.61
log
@Update guidelines for lint-style comments

ok krw@@, schwarze@@, jmc@@, millert@@, tedu@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.60 2015/09/23 17:49:16 tedu Exp $
d27 1
a27 1
.Dd $Mdocdate: September 23 2015 $
d37 1
a37 1
It is also a guide for preferred user land code style.
d113 1
a113 1
In user land, functions local to one source module should be declared
@


1.60
log
@refer to err and warn families, suggested by Michael McConville
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.59 2015/01/23 13:02:49 sthen Exp $
d27 1
a27 1
.Dd $Mdocdate: January 23 2015 $
a265 1
Code that cannot be reached should have a NOTREACHED comment.
a283 1
		/* NOTREACHED */
d616 4
@


1.59
log
@Normal OpenBSD code fits in an 80 column term. From Jim Smith, ok dlg.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.58 2014/06/01 15:44:09 deraadt Exp $
d27 1
a27 1
.Dd $Mdocdate: June 1 2014 $
d524 1
a524 1
Use
d526 4
a529 3
or
.Xr warn 3 ,
don't roll your own!
@


1.58
log
@Remove mention of the old __P practice.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.57 2014/01/21 03:15:46 schwarze Exp $
d27 1
a27 1
.Dd $Mdocdate: January 21 2014 $
d328 1
@


1.57
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.56 2013/08/14 08:39:28 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: August 14 2013 $
a124 7
Use of the
.Li __P
macro has been deprecated.
It is allowed in code imported from other sources but should not be
used in native
.Ox
code.
@


1.56
log
@some Bx/Ox conversion;
From: Jan Stary
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.55 2013/08/14 06:32:32 jmc Exp $
d62 1
a62 1
.Aq Pa sys/*.h )
d64 1
a64 1
.Aq Pa sys/types.h
d66 1
a66 1
.Aq Pa sys/param.h ,
d68 1
a68 1
.Aq Pa sys/types.h
d70 1
a70 1
.Aq Pa sys/cdefs.h ,
d153 1
a153 1
.Aq Pa sys/cdefs.h
@


1.55
log
@no longer any need to quote macro lines with >9 args;
From: Jan Stary
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.54 2012/11/02 16:35:21 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: November 2 2012 $
d639 3
a641 4
This man page is largely based on the src/admin/style/style file from
the
.Tn BSD
4.4-Lite2 release, with updates to reflect the current practice and
@


1.54
log
@replace "err(1, (char *)NULL);" with "err(1, NULL);"
from Rafael

ok haesbaert ratchov
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.53 2012/04/11 21:09:23 ratchov Exp $
d27 1
a27 1
.Dd $Mdocdate: April 11 2012 $
d32 1
a32 1
.Nd "Kernel source file style guide (KNF)"
@


1.53
log
@Recommend using "unsigned int" instead of just "unsigned".
ok deraadt@@, tweaks from jmc@@ and todd@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.52 2012/04/08 17:36:21 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: April 8 2012 $
d537 1
a537 1
	err(1, (char *)NULL);
@


1.52
log
@no more lint;
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.51 2011/09/17 08:38:26 schwarze Exp $
d27 1
a27 1
.Dd $Mdocdate: September 17 2011 $
d189 6
@


1.51
log
@remove mdoc.samples(7): all info already is in mdoc(7)
feedback and ok  jmc@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.50 2008/11/14 13:42:05 tedu Exp $
d27 1
a27 1
.Dd $Mdocdate: November 14 2008 $
d615 1
a615 2
.Dq Li gcc -Wall -W -Wpointer-arith -Wbad-function-cast ... ,
.Xr lint 1
@


1.50
log
@the warnings produced by -Wtraditional are not interesting, so remove it.
ok jmc otto
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.49 2007/09/28 00:13:23 sobrado Exp $
d27 1
a27 1
.Dd $Mdocdate: September 28 2007 $
d621 1
a621 1
.Xr mdoc.samples 7 .
d632 1
a632 1
.Xr mdoc.samples 7
@


1.49
log
@make clear that the usage and synopsis take the same form

problem noticed by jakemsr@@; rewording suggested by jmc@@

ok jakemsr@@, jmc@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.48 2007/05/31 19:20:01 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: May 31 2007 $
d417 1
a417 6
Do not declare functions inside other functions: ANSI C says that
such declarations have file scope regardless of the nesting of the
declaration.
Hiding file declarations in what appears to be a local scope is
undesirable and will elicit complaints from a good compiler, such as
.Dq Li gcc -Wtraditional .
d615 1
a615 1
.Dq Li gcc -Wall -W -Wtraditional -Wpointer-arith -Wbad-function-cast ... ,
@


1.48
log
@convert to new .Dd format;
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.47 2007/05/29 00:22:50 deraadt Exp $
d27 1
a27 1
.Dd $Mdocdate$
d581 1
a581 1
Usage statements should look like the manual pages.
@


1.47
log
@delete some overly fascist rules.. prodded by tom/jmc
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.46 2007/02/15 18:08:50 thib Exp $
d27 1
a27 1
.Dd June 18, 2001
@


1.46
log
@forever loops may be done with for or while, it doesnt matter;
so remove a line that says it matters.

ok deraadt@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.45 2006/05/27 05:05:16 deraadt Exp $
d607 1
a607 1
string, should be used instead of hard-coding the program name.
a616 5
.Pp
Stylistic changes (including whitespace changes) are hard on the source
repository and are to be avoided without good reason.
Code that is approximately KNF compliant in the repository must not diverge
from compliance.
@


1.45
log
@remove bogus non-style advice that just causes "discussions"
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.44 2006/03/21 03:24:59 ray Exp $
a300 4
Forever loops are done with
.Li for ,
not
.Li while .
@


1.44
log
@Encourage using strtonum(3).
Sync variable declarations with variables used in getopt(3) loop.

OK otto@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.43 2006/03/19 19:17:58 ray Exp $
a516 11
Test pointers
against
.Dv NULL ,
i.e., use:
.Bd -literal -offset indent
(p = f()) == NULL
.Ed
not:
.Bd -literal -offset indent -compact
!(p = f())
.Ed
@


1.43
log
@Remove case '?': from getopt example.

OK otto@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.42 2005/10/27 10:26:55 deraadt Exp $
d254 2
a255 4
	long num;
	int ch;
	char *ep;

d278 3
a280 4
		num = strtol(optarg, &ep, 10);
		if (num <= 0 || *ep != '\e0') {
			warnx("illegal number, -n argument -- %s",
			    optarg);
@


1.42
log
@make the example more likely to compile, ha ha; maticd@@gmail.com
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.41 2005/08/08 13:15:58 xsa Exp $
a286 1
	case '?':
@


1.41
log
@lclint is not in the ports tree anymore, splint is. OK jmc@@.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.40 2005/07/09 08:05:08 jmc Exp $
d340 1
a340 1
	    two lines + gets + indented + four + spaces +
@


1.40
log
@note that documentation has its own style guide, mdoc.samples(7);
suggested by beck@@, ok tdeval@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.39 2005/05/15 22:38:26 krw Exp $
d646 1
a646 1
or lclint from the ports tree) and produce minimal warnings.
@


1.39
log
@Update style recommendation around NULL usage, especially in function
parameters, after discussions a while ago with mickey@@, deraadt@@,
millert@@.

Verbiage by millert@@, ok millert@@.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.38 2004/04/10 09:10:16 jmc Exp $
d647 4
d660 2
a661 1
.Xr warn 3
@


1.38
log
@specify an indent for displays, plus some grammar;
ok deraadt@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.37 2004/02/24 19:55:51 jmc Exp $
d519 2
a520 5
(type\ *)0 or (type\ *)NULL in contexts where the compiler knows the
type, e.g., in assignments.
Use (type\ *)NULL in other contexts, in particular for all function args.
(Casting is essential for variadic args and is necessary for other args
if the function prototype might not be in scope.)
@


1.37
log
@add FILES section documenting license.template;
from Nick Nauwelaerts;

ok deraadt@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.36 2004/02/10 20:33:32 jmc Exp $
d44 1
a44 1
.Bd -literal -offset 0i
d56 2
a57 2
 * Multi-line comments look like this.  Make them real sentences.  Fill
 * them so they look like real paragraphs.
d72 2
a73 2
.Bd -literal -offset 0i
#include <sys/types.h>		/* Non-local includes in brackets. */
d77 1
a77 1
.Bd -literal -offset 0i
d91 1
a91 1
.Bd -literal -offset 0i
d100 1
a100 1
.Bd -literal -offset 0i
d104 3
a106 3
Then, there's a blank line, and the user include files.
.Bd -literal -offset 0i
#include "pathnames.h"		/* Local includes in double quotes. */
d132 2
a133 2
Prototypes should not have variable names associated with the types; i.e.:
.Bd -literal -compact -offset 0i
a135 1
.Pp
d137 1
a137 1
.Bd -literal -compact -offset 0i
d143 1
a143 1
.Bd -literal -offset 0i
d155 1
a155 1
.Bd -literal -offset 0i
d178 4
a181 4
.Bd -literal -offset 0i
#define	MACRO(x, y) do {						\e
	variable = (x) + (y);						\e
	(y) += 2;							\e
d186 1
a186 1
.Bd -literal -offset 0i
d205 1
a205 1
.Bd -literal -offset 0i
d218 1
a218 1
.Bd -literal -offset 0i
d239 1
a239 1
.Bd -literal -offset 0i
d245 1
a245 1
.Bd -literal -offset 0i
d270 14
a283 19
.Bd -literal -offset 0i
	while ((ch = getopt(argc, argv, "abn:")) != -1)
		switch (ch) {		/* Indent the switch. */
		case 'a':		/* Don't indent the case. */
			aflag = 1;
			/* FALLTHROUGH */
		case 'b':
			bflag = 1;
			break;
		case 'n':
			num = strtol(optarg, &ep, 10);
			if (num <= 0 || *ep != '\e0') {
				warnx("illegal number, -n argument -- %s",
				    optarg);
				usage();
			}
			break;
		case '?':
		default:
a284 1
			/* NOTREACHED */
d286 8
a293 3
	argc -= optind;
	argv += optind;

d296 1
a296 1
Use space after keywords
d309 12
a320 4
.Bd -literal -offset 0i
	for (p = buf; *p != '\e0'; ++p)
		;	/* nothing */
	for (;;)
d322 1
a322 9
	for (;;) {
		z = a + really + long + statement + that + needs +
		    two + lines + gets + indented + four + spaces +
		    on + the + second + and + subsequent + lines;
	}
	for (;;) {
		if (cond)
			stmt;
	}
d328 5
a332 5
.Bd -literal -offset 0i
	for (; cnt < 15; cnt++) {
		stmt1;
		stmt2;
	}
d337 5
a341 5
.Bd -literal -offset 0i
	while (cnt < 20)
		z = a + really + long + statement + that + needs +
		    two lines + gets + indented + four + spaces +
		    on + the + second + and + subsequent + lines;
d352 8
a359 8
.Bd -literal -offset 0i
	if (test)
		stmt;
	else if (bar) {
		stmt;
		stmt;
	} else
		stmt;
d373 3
a375 3
.Bd -literal -offset 0i
	if ((error = function(a1, a2)))
		exit(error);
d383 3
a385 3
.Bd -literal -offset 0i
	a = b->c[0] + ~d == (e || f) || g && h ? i : j >> 1;
	k = !(l & FLAGS);
d389 5
a393 5
.Bd -literal -offset 0i
	exit(0);	/*
			 * Avoid obvious comments such as
			 * "Exit 0 on success."
			 */
d399 1
a399 1
.Bd -literal -offset 0i
d405 1
a405 1
When declaring variables in functions declare them sorted by size (largest to
d410 1
a410 1
If a line overflows reuse the type keyword.
d416 5
a420 5
.Bd -literal -offset 0i
	struct foo one, *two;
	double three;
	int *four, five;
	char *six, seven, eight, nine, ten, eleven, twelve;
d422 1
a422 1
	four = myfunction();
d425 1
a425 1
Do not declare functions inside other functions; ANSI C says that
d460 1
a460 1
.Bd -literal -offset 0i
d464 1
a464 1
If any warnings of this type occur you must apply the
d478 1
a478 1
.Bd -literal -offset 0i
d490 1
a490 1
.Bd -literal -offset 0i
d495 1
a495 1
.Bd -literal -offset 0i
d502 1
a502 1
.Bd -literal -offset 0i
d528 1
a528 1
.Bd -literal -offset 0i
a530 1
.Pp
d532 1
a532 1
.Bd -literal -offset 0i
d539 1
a539 1
.Bd -literal -offset 0i
a541 1
.Pp
d543 1
a543 1
.Bd -literal -offset 0i
d556 6
a561 6
.Bd -literal -offset 0i
	if ((four = malloc(sizeof(struct foo))) == NULL)
		err(1, (char *)NULL);
	if ((six = (int *)overflow()) == NULL)
		errx(1, "Number overflowed.");
	return (eight);
d566 1
a566 1
.Bd -literal -offset 0i
d581 1
a581 1
.Bd -literal -offset 0i
d622 1
a622 1
.Bd -ragged -offset 0.3i
d630 3
a632 3
.Bd -literal -offset 0i
	(void)fprintf(stderr, "usage: %s [-ab]\en", __progname);
	exit(1);
@


1.36
log
@describe `volatile' as type-qualifier, not specifier;
from Mathias K. Straede (PR 3681);
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.35 2003/10/04 11:35:31 jmc Exp $
a245 1
.Pp
d654 5
@


1.35
log
@Note that for usage(), numbers (as options) come first, followed by
alphabetical order (uppercase takes precedence over lower).
Man page option descriptions also appear in this order.

This is in line with NetBSD/FreeBSD pages.
Discussed with millert@@ and deraadt@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.34 2003/09/29 11:29:20 jmc Exp $
d469 1
a469 1
specifier to the variable in question.
@


1.34
log
@/usr include files -> /usr/include files;
from FreeBSD (rev. 1.103);

ok deraadt@@ miod@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.33 2003/06/29 13:26:04 jmc Exp $
d615 1
d622 5
d628 1
a628 1
"usage: f [-ade] [-b b_arg] [-m m_arg] req1 req2 [opt1 [opt2]]\en"
@


1.33
log
@swap .Pa Aq -> .Aq Pa to make both macros expand;
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.32 2003/04/20 20:04:17 jmc Exp $
d86 2
a87 2
.Pa /usr
include files.
d89 2
a90 2
.Pa /usr
include files should be sorted!
@


1.32
log
@typos;
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.31 2003/02/26 15:05:07 david Exp $
d62 1
a62 1
.Pa Aq sys/*.h )
d64 1
a64 1
.Pa Aq sys/types.h
d66 1
a66 1
.Pa Aq sys/param.h ,
d68 1
a68 1
.Pa Aq sys/types.h
d70 1
a70 1
.Pa Aq sys/cdefs.h ,
d154 1
a154 1
.Pa Aq sys/cdefs.h
@


1.31
log
@start new sentence on a new line
ok mpech@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.30 2003/02/25 08:51:31 jmc Exp $
d435 2
a436 2
Casts and 
.Fn sizeof 
@


1.30
log
@double word typos;

all from David Krause - thanks!
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.29 2003/01/21 08:12:41 hugh Exp $
d503 2
a504 2
is also a type-qualifier and the same rules apply.  The description of
a read-only hardware register might look something like:
@


1.29
log
@Style, punctuation and grammar fixups from Ted Unangst on bugs@@.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.28 2002/10/11 22:15:02 marc Exp $
d461 1
a461 1
flag should be used to verify that that compiler does not generate
@


1.28
log
@Add a bit on volatile vs volatile pointers.  OK jason@@ millert@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.27 2002/06/03 06:27:44 kjell Exp $
d271 1
a271 1
Code that cannot be reached should have a NOTREACHED comment,
d377 1
a377 1
	if (error = function(a1, a2))
d381 1
a381 1
Unary operators don't require spaces, binary operators do.
d415 1
a415 1
Be careful to not obfuscate the code by initializing variables in
d446 1
a446 1
of choosing which variables to be placed in registers to improve
@


1.27
log
@use void keyword in usage example. ok theo
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.26 2002/05/23 09:30:35 mpech Exp $
d472 1
a472 1
Note that for pointers, the
d474 24
a497 2
should go after to the type, not before.
Use
d499 1
a499 1
char * volatile foo;
d502 3
a504 1
not:
d506 1
a506 1
volatile char *foo;
@


1.26
log
@'SEE ALSO' audit in 'share/man/':
o) sort;
o) "," is separator of entries;
o) don't use "." or "," in the last entry;

millert@@ ok
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.25 2002/04/01 18:41:27 deraadt Exp $
d579 1
a579 1
usage()
@


1.25
log
@recommending sysexits.h has been ridiculous from the start
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.24 2002/02/17 19:58:32 millert Exp $
d628 1
a628 1
.Xr queue 3
@


1.24
log
@Deprecate __P
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.23 2002/01/12 16:23:36 millert Exp $
d391 1
a391 3
Exits should be 0 on success, or according to the predefined
values in
.Xr sysexits 3 .
d393 1
a393 1
	exit(EX_OK);	/*
d628 1
a628 2
.Xr queue 3 ,
.Xr sysexits 3 ,
@


1.23
log
@ o Don't use register except in conjunction with assembler
 o use volatile to avoid clobbering by longjmp or vfork
 o variables to be modified in signal handlers should be volatile sig_atomic_t
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.22 2001/10/05 14:45:54 mpech Exp $
a124 5
Only use the
.Li __P
macro from the include file
.Pa Aq sys/cdefs.h
if the source file in general is (to be) compilable with a K&R compiler.
d127 5
a131 2
macro in new code is discouraged, although modifications to existing
files should be consistent with that file's conventions.
@


1.22
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.21 2001/10/04 10:28:20 wilfried Exp $
d445 51
@


1.21
log
@e.g. and i.e. cleanup
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.20 2001/06/28 22:14:23 millert Exp $
d441 2
a442 1
calls are not followed by a space.  Note that
@


1.20
log
@speling; jsyn@@nthought.com
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.19 2001/06/24 22:16:11 millert Exp $
d157 1
a157 1
for functions that don't return, e.g.,
d458 1
a458 1
e.g., use:
d470 1
a470 1
for tests unless it's a boolean, e.g., use
@


1.19
log
@No variable names associated with prototype parameters, even in the kernel.
By general consensus...
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.18 2001/06/24 22:03:03 millert Exp $
d439 3
a441 2
Casts and sizeof's are not followed by a space.
Note that
@


1.18
log
@No space between function name and parenthesized arg types in a function
prototype.  Also nuke some __P's while I am in here.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.17 2001/06/18 15:17:04 millert Exp $
d134 7
a140 2
Only the kernel has a name associated with the types; i.e., in the kernel use:
.Bd -literal -offset 0i
a142 4
and in user land use:
.Bd -literal -offset 0i
void	function(int);
.Ed
d150 2
@


1.17
log
@As discussed ages ago we prefer ANSI for new code.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.16 2001/04/10 17:31:55 millert Exp $
d136 1
a136 1
void	function (int a);
d140 1
a140 1
void	function (int);
d146 2
a147 2
static char	*function __P((int, const char *));
static void	 usage __P((void));
d156 1
a156 1
__dead void	abort __P((void));
@


1.16
log
@Remove lies about printf vs. puts/fputs/putchar.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.15 2001/03/14 21:21:31 aaron Exp $
d27 1
a27 1
.Dd August 19, 1999
d125 1
a125 1
When declaring a prototype, use the
d128 6
a133 1
.Pa Aq sys/cdefs.h .
d136 1
a136 1
void	function __P((int a));
d140 1
a140 1
void	function __P((int));
d405 1
a405 3
function(a1, a2, fl, a4)
	int a1, a2, a4;	/* Declare ints too, don't default them. */
	float fl;	/* List in order declared, as much as possible. */
d411 2
a412 2
Old style function declarations can go on the same line.
ANSI style function declarations should go in the include file
d494 1
a494 4
Don't use ANSI function declarations unless you absolutely have to,
i.e., you're declaring functions with variable numbers of arguments.
.Pp
ANSI function declarations look like this:
d496 5
a500 2
void
function(int a1, int a2)
d506 3
a510 1
#if __STDC__
a511 3
#else
#include <varargs.h>
#endif
a513 1
#if __STDC__
a514 5
#else
vaf(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
a516 1
#if __STDC__
a517 3
#else
	va_start(ap);
#endif
@


1.15
log
@Correct getopt usage in sample code; fixes PR/1729.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.14 2001/03/06 19:56:52 brad Exp $
a538 5
.Pp
Use
.Xr printf 3 ,
not fputs/puts/putchar/whatever; it's faster and usually cleaner, not
to mention helpful in avoiding stupid bugs.
@


1.14
log
@first sweep ...
OpenBSD -> .Ox
NetBSD -> .Nx
FreeBSD -> .Fx
--
Ok'd by aaron@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.13 2001/02/04 03:26:44 jason Exp $
d267 1
a267 1
	while ((ch = getopt(argc, argv, "abn")) != -1)
@


1.13
log
@Put KNF in the NAME field so apropos/man -k will find it.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.12 2001/01/25 18:14:05 aaron Exp $
d598 1
a598 1
.Tn OpenBSD
@


1.12
log
@Clarify that local variable declarations should be sorted by size largest to
smallest; smart@@monkey.org
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.11 2000/12/21 15:41:26 aaron Exp $
d32 1
a32 1
.Nd "Kernel source file style guide"
@


1.11
log
@Revert the previous commit: it made sense for human consumption, but lint(1)
and other code checkers don't like this special case. Pointed out by espie@@
and michaels@@inet.no.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.10 2000/12/20 21:09:07 aaron Exp $
d186 1
a186 1
by size, and then by alphabetical order.
d406 2
a407 2
When declaring variables in functions declare them sorted by size,
then in alphabetical order; multiple ones per line are okay.
@


1.10
log
@Mention that /* NOTREACHED */ is unncessary following an exit(3) call, where it
is obvious.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.9 2000/10/25 15:03:41 aaron Exp $
d265 1
a265 4
Code that cannot be reached should have a NOTREACHED comment, except following,
i.e., an
.Xr exit 3
call, where it is obvious.
@


1.9
log
@Various fixes; from gluk@@ptci.ru
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.8 2000/10/12 18:06:03 aaron Exp $
d265 4
a268 1
Code that cannot be reached should have a NOTREACHED comment.
@


1.8
log
@General man page cleanups, mostly to remove trailing whitespace, hard
sentence breaks, and other such things.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.7 2000/03/06 21:46:56 aaron Exp $
d265 1
a265 1
Code that cannot be reached should not have a NOTREACHED comment.
d338 1
a338 1
		    on + the + second + and + subsequent + lines.
@


1.7
log
@Do not leave `(' characters dangling at the end of lines; instead, use the
appropriate mdoc macros to handle these cases.
@
text
@d1 1
a1 1
.\" Copyright (c) 1995 FreeBSD Inc. 
d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.6 1999/09/14 06:21:23 pjanzen Exp $
d36 2
a37 1
source tree.  It is also a guide for preferred user land code style.
d41 3
a43 2
when it makes up about 50% or more of the file(s) involved.  This is enough
to break precedents in the existing code and use the current style guidelines.
d61 1
a61 1
Kernel include files (i.e.
d111 3
a113 3
Function prototypes for private functions (i.e. functions not used
elsewhere) go at the top of the first source module.  In user land,
functions local to one source module should be declared
d122 1
a122 1
separate header file, e.g.
d149 1
a149 1
for functions that don't return, e.g.
d156 2
a157 1
matching pairs.  This makes the header file usable from C++.
d161 3
a163 3
all in lowercase; the macro has the same name all in uppercase.  If the
macro needs more than a single line, use braces.  Right-justify the
backslashes, as the resulting definition is easier to read.
d186 4
a189 3
by size, and then by alphabetical order.  The first category normally
doesn't apply, but there are exceptions.  Each one gets its own line.
Put a tab after the first word, i.e. use
d196 2
a197 2
source files.  Use of the structures should be by separate declarations
and should be
d211 2
a212 2
macros rather than rolling your own lists, whenever possible.  Thus,
the previous example would be better written:
d223 2
a224 1
Avoid using typedefs for structure types.  This makes it impossible
d227 2
a228 2
When convention requires a typedef, make its name match the struct
tag.  Avoid typedefs ending in
d258 2
a259 2
should be used to parse options.  Options
should be sorted in the
d262 4
a265 4
parts of the switch cascade.  Elements in a switch statement that
cascade should have a FALLTHROUGH comment.  Numerical arguments
should be checked for accuracy.  Code that cannot be reached should
have a NOTREACHED comment.
d322 3
a324 2
Parts of a for loop may be left empty.  Don't put declarations
inside blocks unless the routine is unusually complicated.
d342 2
a343 2
followed by spaces
to form the indentation.  Do not use more spaces than a tab will produce
d359 3
a361 3
Do not use spaces after function names.  Commas have a space after them.
Do not use spaces
after
d375 4
a378 4
Unary operators don't require spaces, binary operators do.  Don't
use parentheses unless they're required for precedence, the statement
is confusing without them, or the compiler generates a warning without
them.  Remember that other people may be confused more easily than you.
d407 3
a409 3
then in alphabetical order; multiple ones per line are okay.  Old
style function declarations can go on the same line.  ANSI style
function declarations should go in the include file
d414 2
a415 1
the declarations.  Use this feature only thoughtfully.
d428 3
a430 3
declaration.  Hiding file declarations in what appears to be a local
scope is undesirable and will elicit complaints from a good compiler,
such as
d433 2
a434 1
Casts and sizeof's are not followed by a space.  Note that
d439 2
a440 1
is the preferred null pointer constant.  Use
d444 4
a447 4
type, e.g., in assignments.  Use (type\ *)NULL in other contexts,
in particular for all function args.  (Casting is essential for
variadic args and is necessary for other args if the function prototype
might not be in scope.)
d463 1
a463 1
for tests unless it's a boolean, e.g. use
d492 1
a492 1
i.e. you're declaring functions with variable numbers of arguments.
d545 2
a546 1
Usage statements should look like the manual pages.  Options without
d551 2
a552 1
are specified.  A bar
d577 3
a579 3
repository and are to be avoided without good reason.  Code that is
approximately KNF compliant in the repository must not diverge from
compliance.
a585 1

@


1.6
log
@Tidying and spelling
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.5 1999/09/07 13:44:15 d Exp $
d288 2
a289 2
Use space after keywords (
.Li if ,
@


1.5
log
@+, millert@@ ok
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.4 1999/09/06 13:36:42 espie Exp $
d59 10
a68 3
Kernel include files (i.e. sys/*.h) come first; normally, you'll need
<sys/types.h>
OR <sys/param.h>, but not both!  <sys/types.h> includes <sys/cdefs.h>,
d83 6
a88 2
Then there's a blank line, followed by the /usr include files.
The /usr include files should be sorted!
d93 5
a97 2
Global pathnames are defined in /usr/include/paths.h.  Pathnames local
to the program go in pathnames.h in the local directory.
d123 5
a127 3
When declaring a prototype, use the __P macro from the include file
<sys/cdefs.h>.  Only the kernel has a name associated with the types,
i.e. in the kernel use:
d131 1
a131 1
in user land use:
d143 5
a147 1
Use __dead from <sys/cdefs.h> for functions that don't return, e.g.
d152 3
a154 3
In header files, put function prototypes within 
__BEGIN_DECLS/__END_DECLS matching pairs.  This makes the header file
usable from C++.
d156 1
a156 1
Macros are capitalized, parenthesized, and should avoid side-effects.
d158 1
a158 1
all in lowercase, the macro has the same name all in uppercase.  If the
d164 1
a164 1
so that it can safely be used in 
d193 3
a195 1
and should be "extern" if they are declared in a header file.
d251 6
a256 2
For consistency, getopt should be used to parse options.  Options
should be sorted in the getopt call and the switch statement, unless
d288 7
a294 1
Use space after keywords (if, while, for, return, switch).  No braces are
d296 5
a300 2
statement is more than a single line in which case they are permitted.
Forever loops are done with for's, not while's.
d353 1
a353 1
Do not use spaces after function names.  Commas have a space after them.  
d371 1
a371 1
is confusing without them, or the compiler generates a waring without
d395 1
a395 1
	int a1, a2, a4;	/* Declare ints, too, don't default them. */
d403 2
a404 1
function declarations should go in the include file "extern.h".
d423 2
a424 1
such as "gcc -Wtraditional".
d430 6
a435 6
.Dv NULL 
is the preferred null pointer constant.  Use 
.Dv NULL 
instead of 
(type *)0 or (type *)NULL in contexts where the compiler knows the
type, e.g., in assignments.  Use (type *)NULL in other contexts,
d440 2
a441 2
against 
.Dv NULL , 
d452 3
a454 1
Don't use '!' for tests unless it's a boolean, e.g. use
d464 3
a466 2
Routines returning void * should not have their return values cast
to any pointer type.
d534 1
a534 1
to mention avoiding stupid bugs.
d536 1
a536 1
Usage statements should look like the manual pages.  Options w/o
d571 2
a572 1
(e.g., "gcc -Wall -W -Wtraditional -Wpointer-arith -Wbad-function-cast ...",
d584 2
a585 2
the 
.Tn BSD 
@


1.4
log
@oops, thanks, Todd.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.3 1999/09/05 16:23:12 espie Exp $
d273 1
a273 1
		    two lines + gets + indented + four + spaces +
@


1.3
log
@New man pages, adapted from NetBSD.
Add corresponding cross-references.
Missed some uses of .Dv.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.2 1999/08/31 17:08:04 espie Exp $
d393 1
a393 2
.Dv
NULL 
@


1.2
log
@A few C++ nits, more references.
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.1 1999/08/19 08:12:11 millert Exp $
d393 5
a397 1
NULL is the preferred null pointer constant.  Use NULL instead of 
d404 3
a406 1
against NULL, e.g., use:
@


1.1
log
@From FreeBSD with changes from /usr/share/misc/style
@
text
@d25 1
a25 1
.\"	$OpenBSD$
d35 1
a35 1
.Tn OpenBSD
d37 1
a37 1
These guidelines should be followed for for all new code.
d96 1
a96 1
elsewhere) go at the top of the first source module.  In, user land,
d127 9
d140 1
a140 1
backslashes; it makes it easier to read.
d205 2
d262 1
a262 1
Space after keywords (if, while, for, return, switch).  No braces are
d318 2
a319 1
No spaces after function names.  Commas have a space after them.  No spaces
d386 2
a387 1
scope is undesirable and will elicit complaints from a good compiler.
d526 3
a528 1
(e.g., "gcc -Wall" or lint(1)) and produce minimal warnings.
d533 1
@

