head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10;
locks; strict;
comment	@.\" @;


1.16
date	2015.09.14.15.14.55;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	TPchOLbdlEugnrt2;

1.15
date	2015.02.09.08.36.53;	author jmc;	state Exp;
branches;
next	1.14;
commitid	FNidnTpooqMiaNuC;

1.14
date	2015.02.09.03.24.48;	author dlg;	state Exp;
branches;
next	1.13;
commitid	Xq9MHvbbGe7vRFul;

1.13
date	2015.01.27.03.17.35;	author dlg;	state Exp;
branches;
next	1.12;
commitid	MyKPm9Q3dQu92BiX;

1.12
date	2014.06.11.08.47.53;	author blambert;	state Exp;
branches;
next	1.11;
commitid	wAEViZUWYkamiCIp;

1.11
date	2014.04.02.13.19.01;	author mpi;	state Exp;
branches;
next	1.10;

1.10
date	2014.02.13.11.56.44;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2014.02.13.11.44.12;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2013.12.23.04.24.43;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2013.12.09.01.54.49;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.30.19.31.30;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.30.02.11.32;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.29.07.57.57;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.29.04.35.46;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.29.04.35.20;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Remove useless quoting from .Fo and .Fn function names, to prevent
development of a cargo cult in case people look at existing files
for examples.  This achieves a consistent .Fo and .Fn quoting style
across the whole tree.
@
text
@.\"	$OpenBSD: task_add.9,v 1.15 2015/02/09 08:36:53 jmc Exp $
.\"
.\" Copyright (c) 2013 David Gwynne <dlg@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: February 9 2015 $
.Dt TASK_ADD 9
.Os
.Sh NAME
.Nm taskq_create ,
.Nm taskq_destroy ,
.Nm task_set ,
.Nm task_add ,
.Nm task_del ,
.Nm TASK_INITIALIZER
.Nd task queues
.Sh SYNOPSIS
.In sys/task.h
.Ft struct taskq *
.Fo taskq_create
.Fa "const char *name"
.Fa "unsigned int nthreads"
.Fa "int ipl"
.Fa "unsigned int flags"
.Fc
.Ft void
.Fn taskq_destroy "struct taskq *tq"
.Ft void
.Fn task_set "struct task *t" "void (*fn)(void *)" "void *arg"
.Ft int
.Fn task_add "struct taskq *tq" "struct task *t"
.Ft int
.Fn task_del "struct taskq *tq" "struct task *t"
.Vt extern struct taskq *const systq;
.Vt extern struct taskq *const systqmp;
.Fn TASK_INITIALIZER "void (*fn)(void *)" "void *arg"
.Sh DESCRIPTION
The
taskq
API provides a mechanism to defer work to a process context.
.Pp
.Fn taskq_create
allocates a taskq and a set of threads to be used to complete work
that would be inappropriate for the shared system taskq.
The
.Fa name
argument specifies the name of the kernel threads that are created
to service the work on the taskq.
.Fa nthreads
specifies the number of threads that will be created to handle the work.
.Fa ipl
specifies the highest interrupt protection level at which
.Fn task_add
and
.Fn task_del
will be called against the created taskq.
See
.Xr spl 9
for a list of the IPLs.
The operational characteristics of the taskq
can be altered by OR'ing the following defines into the
.Fa flags
argument:
.Bl -tag -width xxx -offset indent
.It Dv TASKQ_MPSAFE
The threads servicing the taskq will be run without the kernel big lock.
.It Dv TASKQ_CANTSLEEP
The tasks run via the taskq cannot sleep.
.El
.Pp
.Fn taskq_destroy
causes the resources associated with a previously created taskq to be freed.
It will wait till all the tasks in the work queue are completed before
returning.
Calling
.Fn taskq_destroy
against the system taskq is an error and will lead to undefined
behaviour or a system fault.
.Pp
It is the responsibility of the caller to provide the
.Fn task_set ,
.Fn task_add ,
and
.Fn task_del
functions with pre-allocated task structures.
.Pp
.Fn task_set
prepares the task structure
.Fa t
to be used in future calls to
.Fn task_add
and
.Fn task_del .
.Fa t
will be prepared to call the function
.Fa fn
with the argument specified by
.Fa arg .
Once initialised, the
.Fa t
structure can be used repeatedly in calls to
.Fn task_add
and
.Fn task_del
and does not need to be reinitialised unless the function called
and/or its argument must change.
.Pp
.Fn task_add
schedules the execution of the work specified by the
task structure
.Fa t
on the
.Fa tq
taskq.
The task structure must already be initialised by
.Fn task_set .
.Pp
.Fn task_del
will remove the task structure
.Fa t
from the taskq
.Fa tq .
If the work was already executed or has not been added to the taskq,
the call will have no effect.
Calling
.Fn task_del
against a different taskq than the one given in a previous call to
.Fn task_add
is an error and will lead to undefined behaviour.
.Pp
The kernel provides two system taskqs:
.Va systq ,
which executes while holding the kernel lock, and
.Va systqmp ,
which does not hold the kernel lock during execution.
They can both be used by any subsystem for short lived tasks.
They are serviced by a single thread and can therefore provide predictable
ordering of work.
Work can be scheduled on the system taskqs from callers at or below IPL_HIGH.
.Pp
A task declaration can be initialised with the
.Fn TASK_INITIALIZER
macro.
The task will be prepared to call the function specified by the
.Fa fn
argument with the
.Fa void *
argument given in
.Fa arg .
.Sh CONTEXT
.Fn taskq_create
and
.Fn taskq_destroy
can be called during autoconf, or from process context.
.Fn task_set ,
.Fn task_add ,
and
.Fn task_del
can be called during autoconf, from process context, or from interrupt context.
.Sh RETURN VALUES
.Fn taskq_create
returns a pointer to a taskq structure on success or
.Dv NULL
on failure.
.Pp
.Fn task_add
will return 1 if the task
.Fa t
was added to the taskq
.Fa tq
or 0 if the task was already queued.
.Pp
.Fn task_del
will return 1 if the task
.Fa t
was removed from the taskq
.Fa tq
or 0 if the task was not already on the queue.
.Sh SEE ALSO
.Xr autoconf 9 ,
.Xr spl 9
.Sh HISTORY
The task API was originally written by
.An David Gwynne Aq Mt dlg@@openbsd.org .
The task API first appeared in
.Ox 5.5 .
@


1.15
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.14 2015/02/09 03:24:48 dlg Exp $
d31 1
a31 1
.Fo "taskq_create"
d38 1
a38 1
.Fn "taskq_destroy" "struct taskq *tq"
d40 1
a40 1
.Fn "task_set" "struct task *t" "void (*fn)(void *)" "void *arg"
d42 1
a42 1
.Fn "task_add" "struct taskq *tq" "struct task *t"
d44 1
a44 1
.Fn "task_del" "struct taskq *tq" "struct task *t"
d47 1
a47 1
.Fn "TASK_INITIALIZER" "void (*fn)(void *)" "void *arg"
@


1.14
log
@task_add takes a flags argument now. this throws some words at it,
maybe some will stick.
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.13 2015/01/27 03:17:35 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: January 27 2015 $
d71 2
a72 1
You can or the following defines into the
d74 1
a74 1
argument do change the operational characteristics of the taskq:
@


1.13
log
@remove the second void * argument on tasks.

when workqs were introduced, we provided a second argument so you
could pass a thing and some context to work on it in. there were
very few things that took advantage of the second argument, so when
i introduced pools i suggested removing it. since tasks were meant
to replace workqs, it was requested that we keep the second argument
to make porting from workqs to tasks easier.

now that workqs are gone, i had a look at the use of the second
argument again and found only one good use of it (vdsp(4) on sparc64
if you're interested) and a tiny handful of questionable uses. the
vast majority of tasks only used a single argument. i have since
modified all tasks that used two args to only use one, so now we
can remove the second argument.

so this is a mechanical change. all tasks only passed NULL as their
second argument, so we can just remove it.

ok krw@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.12 2014/06/11 08:47:53 blambert Exp $
d17 1
a17 1
.Dd $Mdocdate: June 11 2014 $
d31 6
a36 1
.Fn "taskq_create" "const char *name" "unsigned int nthreads" "int ipl"
d71 9
@


1.12
log
@Create system taskq ("systqmp") which runs without the kernel lock;
currently unused.

ok dlg@@
manpage improvement and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.11 2014/04/02 13:19:01 mpi Exp $
d17 1
a17 1
.Dd $Mdocdate: April 2 2014 $
d35 1
a35 1
.Fn "task_set" "struct task *t" "void (*fn)(void *, void *)" "void *arg1" "void *arg2"
d42 1
a42 1
.Fn "TASK_INITIALIZER" "void (*fn)(void *, void *)" "void *arg1" "void *arg2"
d93 2
a94 4
with the arguments specified by
.Fa arg1
and
.Fa arg2 .
d144 2
a145 4
arguments given in
.Fa arg1
and
.Fa arg2 .
@


1.11
log
@Add missing "SEE ALSO" header.
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.10 2014/02/13 11:56:44 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: February 13 2014 $
d41 1
d129 7
a135 4
The kernel provides a system taskq
.Va systq
that can be used by any subsystem for short lived tasks.
It is serviced by a single thread and can therefore provide predictable
d137 1
a137 1
Work can be scheduled on the system taskq from callers at or below IPL_HIGH.
@


1.10
log
@document return values in the RETURN VALUES section.

ingo@@ suggested putting RETURN VALUES after CONTEXT, and i agree. this
seems to flow well.
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.9 2014/02/13 11:44:12 dlg Exp $
d175 1
@


1.9
log
@introduce a CONTEXT section that describes where you can call the bits of
the API from.

task_add is the first manpage to get this, but hopefully not the last.

inspired by the CONTEXT section in solaris, and introduced here with the
blessing of deraadt@@, jmc@@, and ingo@@.
discussed with jmc@@ and ingo@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.8 2014/01/21 03:15:46 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: January 21 2014 $
a113 4
.Fn task_add
will return 1 if
.Fa t
was added to the taskq or 0 if it was already on the taskq.
a126 1
If the work was actually removed from the taskq it will return 1, otherwise 0.
d156 19
a174 1
.Sh SEE ALSO
@


1.8
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.7 2013/12/23 04:24:43 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: December 23 2013 $
d151 1
a151 1
.Pp
@


1.7
log
@document TASK_INITIALIZER()
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.6 2013/12/09 01:54:49 dlg Exp $
d17 1
a17 1
.Dd $Mdocdate: December 9 2013 $
d51 1
a51 1
.Pa name
d54 1
a54 1
.Pa nthreads
d56 1
a56 1
.Pa ipl
@


1.6
log
@document the global systq.
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.5 2013/10/30 19:31:30 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 30 2013 $
d25 2
a26 1
.Nm task_del
d41 1
d139 12
@


1.5
log
@task_systq got removed;
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.4 2013/10/30 02:11:32 dlg Exp $
d39 1
a43 4
.\" .Pp
.\" The system taskq is serviced by a single thread and can therefore
.\" provide predictable ordering of work.
.\" Work can be scheduled on the system taskq from callers at or below IPL_HIGH.
d130 7
@


1.4
log
@deprecate taskq_systq() and replace it with extern struct taskq
*const systq defined in task.h

this reduces the cost of using the system taskq and looks less ugly.

requested by and ok kettenis@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.3 2013/10/29 07:57:57 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 29 2013 $
a20 1
.Nm taskq_systq ,
@


1.3
log
@task_add tweaks; ok dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.2 2013/10/29 04:35:46 dlg Exp $
a30 2
.Fn "taskq_systq" "void"
.Ft struct taskq *
d44 4
a47 6
.Pp
.Fn taskq_systq
returns a pointer to the shared system taskq.
The system taskq is serviced by a single thread and can therefore
provide predictable ordering of work.
Work can be scheduled on the system taskq from callers at or below IPL_HIGH.
a138 1
.Fn taskq_systq ,
@


1.2
log
@u_int -> unsigned int
@
text
@d1 1
a1 1
.\"	$OpenBSD: task_add.9,v 1.1 2013/10/29 04:35:20 dlg Exp $
d129 1
a129 1
.Ta tq .
d134 1
a134 1
for gainst a different taskq than the one given in a previous call to
@


1.1
log
@document the kernel task api
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d17 1
a17 1
.Dd $Mdocdate: October 24 2013 $
d33 1
a33 1
.Fn "taskq_create" "const char *name" "u_int nthreads" "int ipl"
@

