head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.4
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.18.0.6
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.6
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.9.0.12
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.10
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3;
locks; strict;
comment	@.\" @;


1.19
date	2017.08.12.23.27.44;	author guenther;	state Exp;
branches;
next	1.18;
commitid	KkQWydgZAZU2Itho;

1.18
date	2016.06.19.11.54.33;	author natano;	state Exp;
branches;
next	1.17;
commitid	wHLNY5GFNXJSFYaC;

1.17
date	2014.07.09.18.00.09;	author jmc;	state Exp;
branches;
next	1.16;
commitid	5rVZtyEc9LPuyRiQ;

1.16
date	2014.07.09.13.43.25;	author guenther;	state Exp;
branches;
next	1.15;
commitid	8p0toMBtRNnkn1GG;

1.15
date	2014.07.09.13.12.52;	author tedu;	state Exp;
branches;
next	1.14;
commitid	sRFa7U6dWrRzZu0W;

1.14
date	2014.02.14.05.15.16;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2014.02.14.05.14.25;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2013.12.09.04.13.40;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2013.07.17.20.21.55;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.04.19.27.12;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.01.14.21.10;	author blambert;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.09.20.54.01;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.31.19.20.01;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.14.16.39.34;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.10.21.07.48;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.11.12.06.46;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.16.10.19.00;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.07.20.15.06;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.20.20.32.31;	author pedro;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Add rw_assert_anylock(), for assering you have it either read or write locked

ok tedu@@ mpi@@
@
text
@.\" $OpenBSD: rwlock.9,v 1.18 2016/06/19 11:54:33 natano Exp $
.\"
.\" Copyright (c) 2006 Pedro Martelletto <pedro@@ambientworks.net>
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: June 19 2016 $
.Dt RWLOCK 9
.Os
.Sh NAME
.Nm rwlock ,
.Nm rw_init ,
.Nm rw_enter ,
.Nm rw_exit ,
.Nm rw_enter_read ,
.Nm rw_enter_write ,
.Nm rw_exit_read ,
.Nm rw_exit_write ,
.Nm rw_assert_wrlock ,
.Nm rw_assert_rdlock ,
.Nm rw_assert_anylock ,
.Nm rw_assert_unlocked ,
.Nm rw_status ,
.Nm RWLOCK_INITIALIZER ,
.Nm rrw_init ,
.Nm rrw_enter ,
.Nm rrw_exit ,
.Nm rrw_status
.Nd interface to read/write locks
.Sh SYNOPSIS
.In sys/rwlock.h
.Ft void
.Fn rw_init "struct rwlock *rwl" "const char *name"
.Ft int
.Fn rw_enter "struct rwlock *rwl" "int flags"
.Ft void
.Fn rw_exit "struct rwlock *rwl"
.Ft void
.Fn rw_enter_read "struct rwlock *rwl"
.Ft void
.Fn rw_enter_write "struct rwlock *rwl"
.Ft void
.Fn rw_exit_read "struct rwlock *rwl"
.Ft void
.Fn rw_exit_write "struct rwlock *rwl"
.Ft int
.Fn rw_assert_wrlock "struct rwlock *rwl"
.Ft void
.Fn rw_assert_rdlock "struct rwlock *rwl"
.Ft void
.Fn rw_assert_anylock "struct rwlock *rwl"
.Ft void
.Fn rw_assert_unlocked "struct rwlock *rwl"
.Ft int
.Fn rw_status "struct rwlock *rwl"
.Fn RWLOCK_INITIALIZER "const char *name"
.Ft void
.Fn rrw_init "struct rrwlock *rrwl" "const char *name"
.Ft int
.Fn rrw_enter "struct rrwlock *rrwl" "int flags"
.Ft void
.Fn rrw_exit "struct rrwlock *rrwl"
.Ft int
.Fn rrw_status "struct rrwlock *rrwl"
.Sh DESCRIPTION
The
.Nm
set of functions provides a multiple-reader, single-writer locking mechanism to
ensure mutual exclusion between different threads.
.Pp
Read locks can be acquired while the write lock is not held, and may coexist in
distinct threads at any time.
A write lock, however, can only be acquired when there are no read locks held,
granting exclusive access to a single thread.
.Pp
The
.Fn rw_init
function is used to initiate the lock pointed to by
.Fa rwl .
The
.Fa name
argument specifies the name of the lock, which is used as the wait message
if the thread needs to sleep.
.Pp
The
.Fn rw_enter
function acquires a lock.
The
.Fa flags
argument specifies what kind of lock should be obtained and also
modifies the operation.
The possible flags are:
.Pp
.Bl -tag -offset indent -width RW_DOWNGRADEXXX -compact
.It Dv RW_READ
Acquire a shared lock.
.It Dv RW_WRITE
Acquire an exclusive lock.
.It Dv RW_DOWNGRADE
Safely release an exclusive lock and acquire a shared lock without
letting other exclusive locks in between.
.It Dv RW_INTR
When waiting for a lock, allow signals to interrupt the sleep.
.It Dv RW_NOSLEEP
Do not wait for busy locks, fail with
.Dv EBUSY
instead.
.It Dv RW_SLEEPFAIL
Wait for busy locks, but do not obtain them, fail with
.Dv EAGAIN
instead.
.El
.Pp
The
.Fn rw_exit
function is used to release a held lock.
.Pp
The
.Fn rw_enter_read
function acquires a read lock, sleeping if necessary.
.Pp
The
.Fn rw_enter_write
function acquires a write lock, sleeping if necessary.
.Pp
The
.Fn rw_exit_read
function releases a read lock.
.Pp
The
.Fn rw_exit_write
function releases a write lock.
.Pp
The
.Fn rw_assert_wrlock ,
.Fn rw_assert_rdlock ,
.Fn rw_assert_anylock ,
and
.Fn rw_assert_unlocked
functions check the status
.Fa rwl ,
panicking if it is not write-, read-, any-, or unlocked, respectively.
.Pp
.Nm rw_status
returns the current state of the lock:
.Pp
.Bl -tag -width "RW_WRITE_OTHER" -offset indent -compact
.It Dv RW_WRITE
Lock is write locked by the calling thread.
.It Dv RW_WRITE_OTHER
Lock is write locked by a different thread.
.It Dv RW_READ
Lock is read locked.
The current thread may be one of the threads that has it locked.
.It 0
Lock is not locked.
.El
.Pp
A lock declaration may be initialised with the
.Fn RWLOCK_INITIALIZER
macro.
The
.Fa name
argument specifies the name of the lock, which is used as the wait message
if the thread needs to sleep.
.Pp
The
.Nm rrwlock
functions support recursive write locking by the same process.
They otherwise behave the same as their rwlock counterparts.
.Sh CONTEXT
.Fn rw_init
and
.Fn rrw_init
can be called during autoconf, from process context, or from interrupt context.
.Pp
All other functions can be called during autoconf or from process context.
.Sh SEE ALSO
.Xr mutex 9 ,
.Xr spl 9
.Sh HISTORY
The
.Nm
functions first appeared in
.Ox 3.5 .
.Sh AUTHORS
The
.Nm
functions were written by
.An Artur Grabowski Aq Mt art@@openbsd.org .
@


1.18
log
@Remove the lockmgr() API. It is only used by filesystems, where it is a
trivial change to use rrw locks instead. All it needs is LK_* defines
for the RW_* flags.

tested by naddy and sthen on package building infrastructure
input and ok jmc mpi tedu
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.17 2014/07/09 18:00:09 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: July 9 2014 $
d32 1
d62 2
d148 1
d153 1
a153 1
panicking if it is not write-, read-, or unlocked, respectively.
@


1.17
log
@sort out the MLINKS mess, and tweak previous a bit;
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.16 2014/07/09 13:43:25 guenther Exp $
d186 2
a187 2
.Xr lockmgr 9 ,
.Xr mutex 9
@


1.16
log
@Fixed rw_status() description, moving it to where it belongs.
Clarify threads vs process.
Move up some general explanatory text.
Add rw_assert_* to the NAME section and kill crossref to spl(9)
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.15 2014/07/09 13:12:52 tedu Exp $
d34 5
a38 1
.Nm RWLOCK_INITIALIZER
a56 2
.Fn rw_status "struct rwlock *rwl"
.Ft void
d177 1
a177 1
They otherwise behavior equivalently to their rwlock counterparts.
@


1.15
log
@crude rrwlock to appease guenther and beck
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.14 2014/02/14 05:15:16 dlg Exp $
d18 1
a18 1
.Dd $Mdocdate: February 14 2014 $
d30 4
d60 2
d75 6
a80 1
ensure mutual exclusion between different processes.
d89 1
a89 1
if the process needs to sleep.
a140 18
.Fn rw_status
function returns the current status of the lock:
.Pp
.Bl -tag -offset indent -width RW_DOWNGRADEXXX -compact
.It Dv 0
Not locked.
.It Dv RW_READ
Read locked.
.It Dv RW_WRITE
Write locked.
.El
.Pp
Read locks can be acquired while the write lock is not held, and may coexist in
distinct processes at any time.
A write lock, however, can only be acquired when there are no read locks held,
granting exclusive access to a single process.
.Pp
The
d149 15
d170 1
a170 1
if the process needs to sleep.
d185 1
a185 2
.Xr mutex 9 ,
.Xr spl 9
@


1.14
log
@remove the caveat apologising that you cant use rwlocks in interrupt
handlers now that context explains that you can only use them in
autoconf or process context.
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.13 2014/02/14 05:14:25 dlg Exp $
d48 2
d57 8
d129 13
d163 5
d170 2
d174 1
a174 8
.Fn rw_enter ,
.Fn rw_exit ,
.Fn rw_enter_read ,
.Fn rw_enter_write ,
.Fn rw_exit_read ,
and
.Fn rw_exit_write
can be called during autoconf or from process context.
@


1.13
log
@CONTEXT
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.12 2013/12/09 04:13:40 dlg Exp $
d18 1
a18 1
.Dd $Mdocdate: December 9 2013 $
a165 3
.Sh CAVEATS
While it is safe to sleep with an rwlock held, they cannot
be used in an interrupt handler as an rwlock is bound to a process.
@


1.12
log
@document RWLOCK_INITIALIZER
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.11 2013/07/17 20:21:55 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 17 2013 $
d140 12
@


1.11
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.10 2013/06/04 19:27:12 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 4 2013 $
d29 2
a30 1
.Nm rw_exit_write
d54 1
d132 8
@


1.10
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.9 2010/08/01 14:21:10 blambert Exp $
d18 1
a18 1
.Dd $Mdocdate: August 1 2010 $
d143 1
a143 2
.An Artur Grabowski
.Aq art@@openbsd.org .
@


1.9
log
@document the rw_assert_ functions

ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.8 2007/12/09 20:54:01 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: December 9 2007 $
d32 1
a32 1
.Fd #include <sys/rwlock.h>
@


1.8
log
@update pedro's email address, at his request;
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.7 2007/05/31 19:20:01 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: May 31 2007 $
d47 6
d121 9
@


1.7
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.6 2007/05/14 16:39:34 jsg Exp $
d3 1
a3 1
.\" Copyright (c) 2006 Pedro Martelletto <pedro@@openbsd.org>
d18 1
a18 1
.Dd $Mdocdate$
@


1.6
log
@Add notes about sleeping with held locks and interrupt handler usage.
Based on comments by art, and tweaked by jmc.

ok art@@
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.5 2007/04/10 21:07:48 art Exp $
d18 1
a18 1
.Dd April 19, 2006
@


1.5
log
@Document RW_DOWNGRADE.
miod noticed that I forgot to commit it.
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.4 2007/01/11 12:06:46 art Exp $
d130 3
@


1.4
log
@Document rw_enter and rw_exit.
Requested and ok by dlg@@, ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.3 2006/08/16 10:19:00 dlg Exp $
d76 3
@


1.3
log
@document the name argument to rw_init.

ok mbalmer@@ jmc@@ pedro@@
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.2 2006/05/07 20:15:06 tedu Exp $
d24 2
d35 4
d63 30
d114 1
@


1.2
log
@name arg for rw_init
@
text
@d1 1
a1 1
.\" $OpenBSD: rwlock.9,v 1.1 2006/04/20 20:32:31 pedro Exp $
d51 4
@


1.1
log
@Document the rwlock() API, okay deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD$
d32 1
a32 1
.Fn rw_init "struct rwlock *rwl"
@

