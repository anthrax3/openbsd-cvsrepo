head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.8
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.15.0.4
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.12.0.14
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.10
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.12
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.8
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.6
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@.\" @;


1.23
date	2015.12.20.08.10.36;	author sf;	state Exp;
branches;
next	1.22;
commitid	riEBhOGQ0H79no3z;

1.22
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.21;
commitid	GVTTSAMZ93Lz4hmE;

1.21
date	2014.12.09.14.41.00;	author jmc;	state Exp;
branches;
next	1.20;
commitid	ASoCpBcTHcDedt4o;

1.20
date	2014.07.14.06.44.11;	author jmc;	state Exp;
branches;
next	1.19;
commitid	UvrQ0DlB4cLPIaGj;

1.19
date	2014.07.13.23.49.40;	author uebayasi;	state Exp;
branches;
next	1.18;
commitid	z6zKhO7L2b0jL3QY;

1.18
date	2013.07.11.01.24.12;	author jsg;	state Exp;
branches;
next	1.17;

1.17
date	2013.06.08.19.06.51;	author sf;	state Exp;
branches;
next	1.16;

1.16
date	2013.06.04.19.27.08;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2012.04.26.01.22.31;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.09.02.26.31;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.24.13.33.00;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.04.22.20.48;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.29.21.56.45;	author pedro;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.02.19.01.58;	author uwe;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.11.17.28.51;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.10.17.56.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.03.02.08.12;	author wcobb;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.21.09.28.09;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.17.05.08.39;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.08.08.08.47;	author mpech;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.24.03.31.42;	author wcobb;	state Exp;
branches;
next	;


desc
@@


1.23
log
@improve CTASSERT man page

* add CTASSERT.9 link
* add "void" to prototype
@
text
@.\"	$OpenBSD: kern.9,v 1.22 2015/11/23 17:53:57 jmc Exp $
.\"
.\" Copyright (c) 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 23 2015 $
.Dt KASSERT 9
.Os
.Sh NAME
.Nm imax ,
.Nm imin ,
.Nm lmax ,
.Nm lmin ,
.Nm max ,
.Nm min ,
.Nm ulmax ,
.Nm ulmin ,
.Nm abs ,
.Nm assert ,
.Nm KASSERT ,
.Nm KDASSERT ,
.Nm KASSERTMSG ,
.Nm KDASSERTMSG ,
.Nm CTASSERT ,
.Nm skpc ,
.Nm scanc ,
.Nm bcmp ,
.Nm timingsafe_bcmp ,
.Nm memchr ,
.Nm memcmp ,
.Nm ffs ,
.Nm fls ,
.Nm flsl ,
.Nm strlen ,
.Nm strnlen ,
.Nm strncpy ,
.Nm strlcpy ,
.Nm strlcat ,
.Nm strcmp ,
.Nm strncmp ,
.Nm strncasecmp ,
.Nm getsn
.Nd kernel library routines
.Sh SYNOPSIS
.In lib/libkern/libkern.h
.Sh DESCRIPTION
The
.Nm
library implements a set of useful functions and macros inside the kernel.
.Sh MATH
.nr nS 1
.Ft int
.Fn imax "int a" "int b"
.Ft int
.Fn imin "int a" "int b"
.Ft long
.Fn lmax "long a" "long b"
.Ft long
.Fn lmin "long a" "long b"
.Ft u_int
.Fn max "u_int a" "u_int b"
.Ft u_int
.Fn min "u_int a" "u_int b"
.Ft u_long
.Fn ulmax "u_long a" "u_long b"
.Ft u_long
.Fn ulmin "u_long a" "u_long b"
.Ft int
.Fn abs "int j"
.nr nS 0
.Pp
The
.Fn min ,
.Fn imin ,
.Fn lmin
and
.Fn ulmin
functions return the smallest integer between
.Fa a
and
.Fa b ,
inclusive.
The
.Fn max ,
.Fn imax ,
.Fn lmax
and
.Fn ulmax
functions return the largest integer between
.Fa a
and
.Fa b ,
inclusive.
.Pp
The
.Fn abs
function computes the absolute value of integer
.Fa j .
.Sh ASSERTIONS
.nr nS 1
.Ft "void"
.Fn assert "CONDITION"
.Ft "void"
.Fn KASSERT "CONDITION"
.Ft "void"
.Fn KDASSERT "CONDITION"
.Ft "void"
.Fn KASSERTMSG "CONDITION" "fmt" "..."
.Ft "void"
.Fn KDASSERTMSG "CONDITION" "fmt" "..."
.nr nS 0
.Pp
These macros cause kernel
.Xr panic 9
if the given condition evaluates to false.
.Fn assert
tests are always compiled in.
.Fn KASSERT
and
.Fn KASSERTMSG
tests are only included if the kernel has
.Dv DIAGNOSTIC
enabled.
.Fn KDASSERT
and
.Fn KDASSERTMSG
tests are only included if the kernel has
.Dv DEBUG
enabled.
The
.Fn KASSERTMSG
and
.Fn KDASSERTMSG
macros append
to the
.Xr panic 9
format string the message specified by
.Fa format
and its subsequent arguments, similar to
.Xr printf 9
functions.
.Pp
.nr nS 1
.Ft "void"
.Fn CTASSERT "CONDITION"
.nr nS 0
.Pp
This macro causes a compile time error if the given condition evaluates to
false.
Its main purpose is to verify assertions about type and struct sizes that
would otherwise make the code fail at run time.
.Fn CTASSERT
can be used in global scope or at the start of blocks, where variable
declarations are allowed.
.Sh BYTE STRINGS
.nr nS 1
.Ft int
.Fn skpc "int mask" "size_t size" "u_char *cp"
.Ft int
.Fn scanc "u_int size" "const u_char *cp" "const u_char *table" "int mask"
.Ft int
.Fn bcmp "const void *b1" "const void *b2" "size_t len"
.Ft int
.Fn timingsafe_bcmp "const void *b1" "const void *b2" "size_t len"
.Ft void *
.Fn memchr "const void *b" "int c" "size_t len"
.Ft int
.Fn memcmp "const void *b1" "const void *b2" "size_t len"
.Ft int
.Fn ffs "int value"
.Ft int
.Fn fls "int value"
.Ft int
.Fn flsl "long value"
.nr nS 0
.Pp
The
.Fn skpc
function locates the first unsigned character of value different than
.Fa mask
inside the string
.Fa cp .
.Pp
The
.Fn scanc
function expects a string of indexes into the table
.Fa table .
Each table element is bitwise ANDed against
.Fa mask .
.Pp
.Fn skpc
and
.Fn scanc
expect the string to be of size
.Fa size ,
and return the index relative to the end of the string where the match
occurred, or zero if
.Fa mask
is not present in the string.
.Pp
The
.Fn fls
and
.Fn flsl
functions find the last bit set in
.Fa value
and return the index of that bit.
.Pp
The remaining functions have the same semantics as their libc counterparts,
.Xr bcmp 3 ,
.Xr timingsafe_bcmp 3 ,
.Xr memchr 3 ,
.Xr memcmp 3
and
.Xr ffs 3 .
.Sh CHARACTER STRINGS
.nr nS 1
.Ft size_t
.Fn strlen "const char *s"
.Ft size_t
.Fn strnlen "const char *s" "size_t maxlen"
.Ft char *
.Fn strncpy "char *dst" "const char *src" "size_t len"
.Ft size_t
.Fn strlcpy "char *dst" "const char *src" "size_t size"
.Ft size_t
.Fn strlcat "char *dst" "const char *src" "size_t size"
.Ft int
.Fn strcmp "const char *s1" "const char *s2"
.Ft int
.Fn strncmp "const char *s1" "const char *s2" "size_t len"
.Ft int
.Fn strncasecmp "const char *s1" "const char *s2" "size_tlen"
.nr nS 0
.Pp
Those functions have the same semantics as their libc counterparts,
.Xr strlen 3 ,
.Xr strncpy 3 ,
.Xr strnlen 3 ,
.Xr strlcpy 3 ,
.Xr strlcat 3 ,
.Xr strcmp 3 ,
.Xr strncmp 3
and
.Xr strncasecmp 3 .
.Sh MISCELLANEOUS
.nr nS 1
.Ft int
.Fn getsn "char *cp" "int size"
.nr nS 0
.Pp
The
.Fn getsn
function reads user input from the console and returns on newline.
The result is written into
.Fa cp ,
which is assumed to be
.Fa size
bytes long.
.Sh SEE ALSO
.Xr assert 3 ,
.Xr bcmp 3 ,
.Xr ffs 3 ,
.Xr memchr 3 ,
.Xr memcmp 3
.Sh STANDARDS
The
.Fn abs ,
.Fn memchr ,
.Fn memcmp ,
.Fn strlen ,
.Fn strncpy ,
.Fn strcmp ,
.Fn strncmp
and
.Fn strcasecmp
functions conform to
.St -ansiC .
.Sh HISTORY
The
.Fn skpc
and
.Fn scanc
functions are based on vax instructions of the same name.
The
.Fn KASSERTMSG
and
.Fn KDASSERTMSG
macros are taken from
.Nx .
@


1.22
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.21 2014/12/09 14:41:00 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: December 9 2014 $
d45 1
d165 1
@


1.21
log
@no more string(3);
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.20 2014/07/14 06:44:11 jmc Exp $
d27 2
a28 2
.Dd $Mdocdate: July 14 2014 $
.Dt KERN 9
d31 32
a62 1
.Nm kern
d239 2
a242 2
.Ft size_t
.Fn strnlen "const char *s" "size_t maxlen"
@


1.20
log
@use Nx;
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.19 2014/07/13 23:49:40 uebayasi Exp $
d27 1
a27 1
.Dd $Mdocdate: July 13 2014 $
d253 1
a253 2
.Xr memcmp 3 ,
.Xr string 3
@


1.19
log
@KASSERTMSG(9): New kernel assertion with message

KASSERT() is annoying as it only prints the expression as a string.  If you
(developers) want to know a little more information, you have to do:

	#ifdef DIAGNOSTIC
		if (bad)
			panic(...);
	#endif

KASSERTMSG() replaces it into a single line:

		KASSERTMSG(!bad, ...);

Taken from NetBSD.

(There is a concern that KASSERT() messages are too long; consume more memory,
and not friendly for small monitors.  This have to be considered & revisited
later.)

"Like" from henning@@
Man page review & advices from jmc@@ and schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d27 1
a27 1
.Dd $Mdocdate$
d278 2
a279 1
macros are taken from NetBSD.
@


1.18
log
@document fls/flsl
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.17 2013/06/08 19:06:51 sf Exp $
d27 1
a27 1
.Dd $Mdocdate: June 8 2013 $
d96 4
d108 2
d114 2
d119 12
d274 5
@


1.17
log
@Add CTASSERT macro, for compile time assertions

ok kettenis@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.16 2013/06/04 19:27:08 schwarze Exp $
d27 1
a27 1
.Dd $Mdocdate: June 4 2013 $
d139 4
d168 8
@


1.16
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.15 2012/04/26 01:22:31 matthew Exp $
d27 1
a27 1
.Dd $Mdocdate: April 26 2012 $
d111 12
@


1.15
log
@Add strnlen() to libkern.

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.14 2011/01/09 02:26:31 deraadt Exp $
d27 1
a27 1
.Dd $Mdocdate: January 9 2011 $
d34 1
a34 1
.Fd #include <lib/libkern/libkern.h>
@


1.14
log
@Upon consideration, random(9) should definately not be documented. It
is not for use by other things (and is not used that way, typically very
MD).  Perhaps we should rename it to something else...
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.13 2010/09/24 13:33:00 matthew Exp $
d27 1
a27 1
.Dd $Mdocdate: September 24 2010 $
d167 2
d183 1
@


1.13
log
@Add timingsafe_bcmp(3) to libc, mention that it's already in the
kernel in kern(9), and remove it from OpenSSH.

ok deraadt@@, djm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.12 2007/05/31 19:20:00 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: May 31 2007 $
a186 23
.Sh RANDOM NUMBER GENERATION
.nr nS 1
.Ft u_long
.Fn random "void"
.Ft void
.Fn srandom "u_long seed"
.nr nS 0
.Pp
The
.Fn random
function returns a random number.
The
.Fn srandom
function initializes the random seed.
.Fn random
will by default produce a sequence of numbers that can be duplicated
by calling
.Fn srandom
with `1' as the seed.
The
.Fn random
function is discouraged in favor of
.Xr arc4random 9 .
d207 1
a207 2
.Xr string 3 ,
.Xr arc4random 9
@


1.12
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.11 2007/05/04 22:20:48 deraadt Exp $
d27 1
a27 1
.Dd $Mdocdate$
d119 2
d155 1
@


1.11
log
@locc dies; spotted by miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.10 2005/08/29 21:56:45 pedro Exp $
d27 1
a27 1
.Dd August 9, 2002
@


1.10
log
@Correctly describe skpc(), okay deraadt@@ jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.9 2005/04/02 19:01:58 uwe Exp $
a113 2
.Fn locc "int mask" "u_int size" "char *cp"
.Ft int
a127 6
.Fn locc
function locates an integer of value
.Fa mask
inside the string
.Fa cp .
The
a140 1
.Fn locc ,
a243 1
.Fn locc ,
@


1.9
log
@synopsis is #include <lib/libkern/libkern.h>
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.8 2003/06/11 17:28:51 tedu Exp $
d137 1
a137 1
function locates an unsigned character of value
@


1.8
log
@no more strcpy, strcat.  sprintf -> snprintf.  ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.7 2003/06/10 17:56:35 millert Exp $
d34 1
a34 1
.Fd #include <lib/libkern.h>
@


1.7
log
@Be clear that we mean "inclusive" when we say between; jmc@@ OK
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.6 2003/06/06 20:56:32 jmc Exp $
a170 4
.Fn strcat "char *s" "const char *append"
.Ft char *
.Fn strcpy "char *dst" "const char *src"
.Ft char *
a185 2
.Xr strcat 3 ,
.Xr strcpy 3 ,
a243 2
.Fn strcat ,
.Fn strcpy ,
@


1.6
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.5 2003/06/03 02:08:12 wcobb Exp $
d70 2
a71 1
.Fa b .
d81 2
a82 1
.Fa b .
@


1.5
log
@clean up my licenses.
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.4 2003/05/21 09:28:09 jmc Exp $
a184 1
.Pp
@


1.4
log
@typos from pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.3 2003/04/17 05:08:39 jmc Exp $
d3 2
a4 1
.\" Copyright (c) 2002 CubeSoft Communications, Inc. <http://www.csoft.org>
d9 1
a9 1
.\" 1. Redistribution of source code must retain the above copyright
d11 3
a13 3
.\" 2. Neither the name of CubeSoft Communications, Inc, nor the names of its
.\"    contributors may be used to endorse or promote products derived from
.\"    this software without specific prior written permission.
@


1.3
log
@typos;

md5(9): ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.2 2002/11/08 08:08:47 mpech Exp $
d153 1
a153 1
occured, or zero if
@


1.2
log
@Time to cleanup:
o) start new sentence on a new line;
o) wrap long lines;
o) don't use .Pp before/after .Sh, .Ss;
o) OpenBSD -> .Ox;
o) typos;
o) close .Rs;
o) use space between arguments in tag, for example:
   .Xr blabla ) .

miod@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: kern.9,v 1.1 2002/08/24 03:31:42 wcobb Exp $
d13 1
a13 1
.\" 
d33 1
a33 1
#include <lib/libkern.h>
d229 1
a229 1
The result is writte into
a234 2
.Xr arc4random 9 ,
.Xr string 3 ,
d237 1
d240 2
a241 1
.Xr ffs 3
@


1.1
log
@document libkern functions/macros; ok art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a37 1
.Pp
a197 1
.Pp
a233 1
.Pp
@

