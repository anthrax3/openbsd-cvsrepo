head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.16
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.14
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.10
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.12
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.8
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.12
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.8
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.6
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@.\" @;


1.13
date	2013.06.04.19.27.10;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.22.06.20.46;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.21.21.29.20;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.22.02.57.06;	author mk;	state Exp;
branches;
next	1.8;

1.8
date	2007.08.02.07.13.27;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.28.14.32.59;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.27.16.04.22;	author pedro;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.26.20.19.41;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.25.15.00.46;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.15.15.21.51;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.15.11.41.26;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@.\"	$OpenBSD: pci_intr_map.9,v 1.12 2011/05/22 06:20:46 jmc Exp $
.\"
.\" Copyright (c) 2005 Michael Shalayeff
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 22 2011 $
.Dt PCI_INTR_MAP 9
.Os
.Sh NAME
.Nm pci_intr_map ,
.Nm pci_intr_map_msi ,
.Nm pci_intr_line ,
.Nm pci_intr_string ,
.Nm pci_intr_establish ,
.Nm pci_intr_disestablish
.Nd PCI interrupts
.Sh SYNOPSIS
.In alpha/pci/pci_machdep.h
.In i386/pci/pci_machdep.h
.In powerpc/pci/pci_machdep.h
.In sgi/pci/pci_machdep.h
.In machine/pci_machdep.h
.Ft int
.Fn pci_intr_map "struct pci_attach_args *paa" "pci_intr_handle_t *ih"
.Ft int
.Fn pci_intr_map_msi "struct pci_attach_args *paa" "pci_intr_handle_t *ih"
.Ft int
.Fn pci_intr_line "pci_intr_handle_t ih"
.Ft const char *
.Fn pci_intr_string "pci_chipset_tag_t pc" "pci_intr_handle_t ih"
.Ft void *
.Fn pci_intr_establish "pci_chipset_tag_t pc" "pci_intr_handle_t ih" \
"int level" "int (*func)(void *)" "void *arg" "const char *name"
.Ft void
.Fn pci_intr_disestablish "pci_chipset_tag_t pc" "void *v"
.Sh DESCRIPTION
These functions are provided by the machine-dependent implementation
for attaching handler functions to the interrupts of PCI devices.
.Pp
An architect type is provided by the machine-dependent
code
.Va pci_intr_handle_t ,
to be initialised by
.Fn pci_intr_map
or
.Fn pci_intr_map_msi .
.Pp
The
.Fn pci_intr_map
function should be called first to establish a mapping between a PCI
pin and the interrupt controller's interrupt vector.
This process may include resolving the mapping through
firmware-provided information.
For devices that support Message Signaled Interrupts (MSI) the
.Fn pci_intr_map_msi
function should be called instead.
This function can fail if the
system does not support MSI.
In that case
.Fn pci_intr_map
should be called to fall back on classic PCI interrupts.
.Pp
Having initialised the
.Va pci_intr_handle_t
in the previous step, an interrupt handler can be established using
.Fn pci_intr_establish
or converted into printable form using
.Fn pci_intr_string .
A handler established using
.Fn pci_intr_establish
is always called with the system interrupt priority level set equal to,
or higher than,
.Va level .
.Pp
.Fn pci_intr_line
provides the interrupt line extracted from the MD interrupt handle.
Upon device detachment,
.Fn pci_intr_disestablish
should be used to disassociate the handler from the interrupt.
.Pp
See
.Xr spl 9
for an explanation of the
.Va ipl
.Dq interrupt priority levels .
.Sh EXAMPLES
A typical code sequence for establishing a handler
for a device interrupt in the driver might be:
.Bd -literal -offset 3n
int
xxxattach(struct device *parent, struct device *self, void *aux)
{
	struct xxx_softc *sc = (struct xxx_softc *)self;
	struct pci_attach_args *pa = aux;
	pci_intr_handle_t ih;
	const char *intrstr;
	bus_size_t size;

	\&...

	if (pci_intr_map_msi(pa, &ih) && pci_intr_map(pa, &ih)) {
		printf(": can't map interrupt\en");
		bus_space_unmap(sc->iot, sc->ioh, size);
		return;
	}
	intrstr = pci_intr_string(pa->pa_pc, ih);
	sc->sc_ih = pci_intr_establish(pa->pa_pc, ih, IPL_NET,
	    xxx_intr, sc, sc->sc_dev.dv_xname);
	if (!sc->sc_ih) {
		printf(": can't establish interrupt");
		if (intrstr)
			printf(" at %s", intrstr);
		printf("\en");
		bus_space_unmap(sc->iot, sc->ioh, size);
		return;
	}

	printf(": %s\en", intrstr);

	\&...
}
.Ed
.Sh SEE ALSO
.Xr cardbus 4 ,
.Xr pci 4 ,
.Xr pcibios 4 ,
.Xr pci_conf_read 9 ,
.Xr spl 9
.Sh HISTORY
These functions first appeared in
.Ox 1.2 .
.\" .Sh AUTHORS
@


1.12
log
@- new sentence, new line
- space needed before punctuation
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.11 2011/05/21 21:29:20 kettenis Exp $
d18 1
a18 1
.Dd $Mdocdate: May 21 2011 $
d30 5
a34 5
.Fd #include <alpha/pci/pci_machdep.h>
.Fd #include <i386/pci/pci_machdep.h>
.Fd #include <powerpc/pci/pci_machdep.h>
.Fd #include <sgi/pci/pci_machdep.h>
.Fd #include <machine/pci_machdep.h>
@


1.11
log
@Document pci_intr_map_msi(9).
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.10 2010/03/26 19:30:40 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: March 26 2010 $
d68 2
a69 1
function should be called instead.  This function can fail if the
d97 1
a97 1
.Dq interrupt priority levels.
@


1.10
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.9 2009/08/22 02:57:06 mk Exp $
d18 1
a18 1
.Dd $Mdocdate: August 22 2009 $
d23 1
d38 2
d56 3
a58 1
.Fn pci_intr_map .
d66 7
d112 1
a112 1
	if (pci_intr_map(pa, &ih)) {
@


1.9
log
@Update pci_intr_establish() prototype.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.8 2007/08/02 07:13:27 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: August 2 2007 $
d101 1
a101 1
		printf(": can't map interrupt\\n");
d112 1
a112 1
		printf("\\n");
d117 1
a117 1
	printf(": %s\\n", intrstr);
@


1.8
log
@more cats removal;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.7 2007/07/28 14:32:59 kettenis Exp $
d18 1
a18 1
.Dd $Mdocdate$
d42 1
a42 1
"int level" "int (*func)(void *)" "void *arg" "char *name"
@


1.7
log
@pci_intr_line() doesn't take a pointer as its argument.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.6 2007/05/31 19:20:00 jmc Exp $
a30 1
.Fd #include <cats/pci/pci_machdep.h>
@


1.6
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.5 2006/04/27 16:04:22 pedro Exp $
d38 1
a38 1
.Fn pci_intr_line "pci_intr_handle_t *ih"
@


1.5
log
@Document how PCI interrupt handlers are called, okay mickey@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.4 2006/04/26 20:19:41 jmc Exp $
d18 1
a18 1
.Dd April 25, 2006
@


1.4
log
@tweak; ok mickey
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.3 2006/04/25 15:00:46 mickey Exp $
d69 6
@


1.3
log
@reference to spl(9)
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.2 2005/11/15 15:21:51 jmc Exp $
d77 1
a77 1
for explanation
@


1.2
log
@various tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pci_intr_map.9,v 1.1 2005/11/15 11:41:26 mickey Exp $
d18 1
a18 1
.Dd November 20, 2005
d43 1
a43 1
"int type" "int (*func)(void *)" "void *arg" "char *name"
d74 6
d121 2
a122 1
.Xr pci_conf_read 9
@


1.1
log
@pci_intr* page
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d19 1
a19 1
.Dt pci_intr_map 9
d23 1
d47 2
a48 2
These functions are provided by the machine-dependant implementaion
for attaching handler function to PCI devices' interrupts.
d50 1
a50 1
An architected type is provided by the machine-dependant
d52 3
a54 3
.Nm pci_intr_handle_t
to be initialied by the
.Nm pci_intr_map .
d57 2
a58 2
.Nm pci_intr_map
function shall be called first to establish a mapping between a PCI
d60 7
a66 6
This process may include resolving the mapping through the means
of firmware-provided information.
Having the
.Nm pci_intr_handle_t
initialised in the previous step an interrupt handler can be established using
.Nm pci_intr_establish
d68 7
a74 8
.Nm pci_intr_string .
The
.Nm pci_intr_line
provides the interrupt line extracted form the MD interrupt handle.
Upon device detachment one shall use
.Nm pci_intr_disestablish
to disassociate the handler from the interrupt.
.Pp
d77 1
a77 1
.Bd -literal
d85 1
a85 1
	bus_size_t size;  
d115 1
a115 1
.Xr pci_conf_read 9 .
@

