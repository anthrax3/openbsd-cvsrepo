head	1.8;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5;
locks; strict;
comment	@.\" @;


1.8
date	2016.11.14.10.32.46;	author mpi;	state Exp;
branches;
next	1.7;
commitid	to0Je2i4V2FtpmS1;

1.7
date	2015.12.11.16.08.30;	author mpi;	state Exp;
branches;
next	1.6;
commitid	icCuUARbK7keEHjW;

1.6
date	2015.10.21.08.48.12;	author mpi;	state Exp;
branches;
next	1.5;
commitid	eHMnt02pwJm3R8Yu;

1.5
date	2014.03.26.13.57.54;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2014.03.18.14.04.31;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2014.03.18.11.53.54;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2014.03.18.10.47.34;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2014.03.18.09.01.11;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Automatically create a default lo(4) interface per rdomain.

In order to stop abusing lo0 for all rdomains, a new loopback interface
will be created every time a rdomain is created.  The unit number will
be the same as the rdomain, i.e. lo1 will be attached to rdomain 1.

If this loopback interface is already in use it wont be possible to create
the corresponding rdomain.

In order to know which lo(4) interface is attached to a rdomain, its index
is stored in the rtable/rdomain map.

This is a long overdue since the introduction of rtable/rdomain.  It also
fixes a recent regression due to resetting the rdomain of an incoming
packet reported by semarie@@, Andreas Bartelt and Nils Frohberg.

ok claudio@@
@
text
@.\"     $OpenBSD: rtable_add.9,v 1.7 2015/12/11 16:08:30 mpi Exp $
.\"
.\" Copyright (c) 2011 Bret S. Lambert <blambert@@openbsd.org>
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: December 11 2015 $
.Dt RTABLE_ADD 9
.Os
.Sh NAME
.Nm rtable_add ,
.Nm rtable_exists ,
.Nm rtable_loindex ,
.Nm rtable_l2 ,
.Nm rtable_l2set
.Nd routing tables and routing domains interface
.Sh SYNOPSIS
.In net/rtable.h
.Ft int
.Fn rtable_add "unsigned int id"
.Ft int
.Fn rtable_exists "unsigned int id"
.Ft unsigned int
.Fn rtable_loindex "unsigned int id"
.Ft unsigned int
.Fn rtable_l2 "unsigned int id"
.Ft void
.Fn rtable_l2set "unsigned int id" "unsigned int rdomain"
.Sh DESCRIPTION
Routing tables contain layer 2 and 3 forwarding information.
Each address family in use will have its own routing table.
Routing domains are a way of logically segmenting a router among multiple
networks and may contain more than one routing table.
.Bl -tag -width Ds
.It Fn rtable_add "unsigned int id"
Add routing table with ID of
.Fa id
to routing domain
.Fa 0 .
.It Fn rtable_exists "unsigned int id"
Return
.Fa 1
if routing table with ID
.Fa id
exists,
.Fa 0
otherwise.
.It Fn rtable_loindex "unsigned int id"
Return the default
.Xr lo 4
interface index for the routing table with ID of
.Fa id .
.It Fn rtable_l2 "unsigned int id"
Get the routing domain of routing table with ID of
.Fa id .
.It Fn rtable_l2set "unsigned int id" "unsigned int rdomain"
Place routing table with ID of
.Fa id
under the routing domain with ID of
.Fa rdomain .
.El
.Sh CONTEXT
.Fn rtable_add ,
.Fn rtable_exists ,
.Fn rtable_loindex ,
.Fn rtable_l2 ,
and
.Fn task_l2set
can be called during autoconf, from process context, or from interrupt context.
.Sh RETURN VALUES
.Fn rtable_add
may fail with:
.Pp
.Bl -tag -width Er -compact
.It Bq Er EEXIST
A routing table with ID of
.Fa id
already exists.
.It Bq Er ENOMEM
Memory could not be allocated to extend the list of routing domains.
.El
.Sh SEE ALSO
.Xr lo 4 ,
.Xr route 4 ,
.Xr route 8
@


1.7
log
@Correct SYNOPSIS.
@
text
@d1 1
a1 1
.\"     $OpenBSD: rtable_add.9,v 1.6 2015/10/21 08:48:12 mpi Exp $
d18 1
a18 1
.Dd $Mdocdate: October 21 2015 $
d24 1
d35 2
d59 5
d76 1
d94 1
@


1.6
log
@No longer mention rtable_get(), it's a private function now.

While here use C99 types in function definitions.
@
text
@d1 1
a1 1
.\"     $OpenBSD: rtable_add.9,v 1.5 2014/03/26 13:57:54 mpi Exp $
d18 1
a18 1
.Dd $Mdocdate: March 26 2014 $
d28 1
a28 1
.In net/route.h
@


1.5
log
@Add a CONTEXT section, requested by dlg@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: rtable_add.9,v 1.4 2014/03/18 14:04:31 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: March 18 2014 $
a23 1
.Nm rtable_get ,
d30 1
a30 1
.Fn rtable_add "u_int id"
d32 3
a34 5
.Fn rtable_exists "u_int id"
.Ft struct radix_node_head *
.Fn rtable_get "u_int id" "sa_family_t af"
.Ft u_int
.Fn rtable_l2 "u_int id"
d36 1
a36 1
.Fn rtable_l2set "u_int id" "u_int rdomain"
d43 1
a43 1
.It Fn rtable_add "u_int id"
d48 1
a48 1
.It Fn rtable_exists "u_int id"
d56 1
a56 9
.It Fn rtable_get "u_int id" "sa_family_t af"
Return the root node for the family
.Fa af
of the routing table with ID of
.Fa id
if it exists,
.Fa NULL
otherwise.
.It Fn rtable_l2 "u_int id"
d59 1
a59 1
.It Fn rtable_l2set "u_int id" "u_int rdomain"
a67 1
.Fn rtable_get ,
@


1.4
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\"     $OpenBSD: rtable_add.9,v 1.3 2014/03/18 11:53:54 mpi Exp $
d76 8
@


1.3
log
@typo, pointed by millert@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: rtable_add.9,v 1.2 2014/03/18 10:47:34 mpi Exp $
d61 1
a61 1
.Fa af 
d64 1
a64 1
if it exists, 
@


1.2
log
@Rename rt_gettable() into rtable_get(), swap its arguments to be
coherent with the existing rtable_* functions and document it.

While here fix some other manpage glitches pointed out by jmc@@.
@
text
@d1 1
a1 1
.\"     $OpenBSD: rtable_add.9,v 1.1 2014/03/18 09:01:11 mpi Exp $
d35 1
a35 1
.Fn rttable_get "u_int id" "sa_family_t af"
@


1.1
log
@Split route(9) into various manuals to make it easier to complete/improve
its content.

With inputs from jmc@@ and schwarze@@
@
text
@d1 1
a1 1
.\"     $OpenBSD$
d18 1
a18 1
.Dd $Mdocdate$
d24 1
d34 2
d39 1
a39 3
.Fn rtable_l2set "u_int id" "u_int parent"
.Ft struct radix_node_head *
.Fn rt_gettable "sa_family_t af" "u_int id"
d46 5
d54 1
a54 1
if table with ID
d59 4
a62 2
.It Fn rtable_add "u_int id"
Add table with ID of
d64 3
a66 2
to routing domain
.Fa 0 .
d68 1
a68 1
Get the routing domain of table with ID of
d70 2
a71 2
.It Fn rtable_l2set "u_int id" "u_int parent"
Place table with ID of
d74 1
a74 1
.Fa parent .
d82 1
a82 1
A table with ID of
@

