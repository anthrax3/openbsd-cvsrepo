head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4;
locks; strict;
comment	@.\" @;


1.6
date	2016.08.30.16.45.54;	author natano;	state Exp;
branches;
next	1.5;
commitid	bR1BHPSoghZ5Wk7v;

1.5
date	2016.05.16.20.12.20;	author jmc;	state Exp;
branches;
next	1.4;
commitid	k7x9ZI6CgSbR8rBr;

1.4
date	2014.01.19.08.21.19;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.28.21.27.41;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.28.14.54.18;	author syl;	state Exp;
branches;
next	1.1;

1.1
date	2013.08.08.06.41.06;	author jmc;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Use struct stat for storing attributes in fusebufs, because using struct
vattr in userspace is suboptimal as some related helpers are not
available, e.g. VATTR_NULL() and IFTOVT(). The conversion is now done in
the kernel where it belongs. As a side effect the <sys/vnode.h> include
can be removed from libfuse.

tweaks and ok guenther
@
text
@.\" $OpenBSD: fb_setup.9,v 1.5 2016/05/16 20:12:20 jmc Exp $
.\"
.\" Copyright (c) 2013 Sylvestre Gallon <ccna.syl@@gmail.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 16 2016 $
.Dt FB_SETUP 9
.Os
.Sh NAME
.Nm fb_setup ,
.Nm fb_queue ,
.Nm fb_delete
.Nd kernel messaging mechanism for file system in userland (FUSE)
.Sh SYNOPSIS
.In sys/fusebuf.h
.Ft struct fusebuf *
.Fn fb_setup "size_t size" "ino_t inode" "int type" "struct proc *p"
.Ft int
.Fn fb_queue "dev_t dev" "struct fusebuf *fbuf"
.Ft void
.Fn fb_delete "struct fusebuf *fbuf"
.Bd -literal
#define FUSEBUFMAXSIZE	(4096*1024)
#define	FUSEBUFSIZE	(sizeof(struct fusebuf))

struct fb_hdr {
	SIMPLEQ_ENTRY(fusebuf)	fh_next;
	size_t			fh_len;
	int			fh_err;
	int			fh_type;
	ino_t			fh_ino;
	uint64_t		fh_uuid;
};

struct fb_io {
	uint64_t	fi_fd;
	ino_t		fi_ino;
	off_t		fi_off;
	size_t		fi_len;
	mode_t		fi_mode;
	uint32_t	fi_flags;
};

struct fusebuf {
	struct fb_hdr	fb_hdr;
	union {
		struct statvfs	FD_stat;
		struct stat	FD_attr;
		struct fb_io	FD_io;

	} FD;
	uint8_t	*fb_dat;
};

#define fb_next		fb_hdr.fh_next
#define fb_len		fb_hdr.fh_len
#define fb_err		fb_hdr.fh_err
#define fb_type		fb_hdr.fh_type
#define fb_ino		fb_hdr.fh_ino
#define fb_uuid		fb_hdr.fh_uuid

#define fb_stat		FD.FD_stat
#define fb_attr		FD.FD_attr
#define fb_io_fd	FD.FD_io.fi_fd
#define fb_io_ino	FD.FD_io.fi_ino
#define fb_io_off	FD.FD_io.fi_off
#define fb_io_len	FD.FD_io.fi_len
#define fb_io_mode	FD.FD_io.fi_mode
#define fb_io_flags	FD.FD_io.fi_flags
.Ed
.Sh DESCRIPTION
These functions provide a way to manage the kernel messaging mechanism for
.Xr fuse 4
file systems.
It is based on
.Xr mbuf 9 .
.Pp
Each FUSE operation fits in a fusebuf
except for read, write, and readdirs,
which are split into several fusebufs with a changing value in
.Fa fb_io_off
for each.
The size of a fusebuf is
.Fa FUSEBUFSIZE .
.Pp
A fusebuf structure is defined as an
.Fa fb_hdr
followed by a structure containing a union and a buffer
.Fa F_Dat .
The header contains the following elements:
.Bl -tag -width foobarmoocow
.It Fa fh_next
A
.Xr SIMPLEQ_ENTRY 3
needed to store the different fusebufs stored with
.Fn fb_queue .
.It Fa fh_len
Indicates the amount of data in
.Fa F_dat .
.It Fa fh_resid
Used for partial
.Xr fuse 4
reads.
If the read does not fill the fusebuf, the number of bytes of
.Fa F_dat
written in this field are stored.
.It Fa fh_err
Indicates the
.Xr errno 2
failure of a fusebuf.
.It Fa fh_type
Indicates the type of fusebuf transaction (see below).
.It Fa fh_ino
Indicates the inode on which the
.Xr fuse 4
operation is done.
.It Fa fh_uuid
UUID to track the answer.
This number is generated with
.Xr arc4random 9 .
.El
.Pp
The
.Fa fh_type
variable can take the following values:
.Pp
.Bl -tag -compact -offset indent -width XXXXXXXXXXXXXXXXXX
.It Dv FBT_LOOKUP
The fusebuf is a lookup operation.
.It Dv FBT_GETATTR
The fusebuf is a gettattr operation.
.It Dv FBT_SETATTR
The fusebuf is a setattr operation.
.It Dv FBT_READLINK
The fusebuf is a readlink operation.
.It Dv FBT_SYMLINK
The fusebuf is a symlink operation.
.It Dv FBT_MKNOD
The fusebuf is a mknod operation.
.It Dv FBT_MKDIR
The fusebuf is a mkdir operation.
.It Dv FBT_UNLINK
The fusebuf is an unlink operation.
.It Dv FBT_RMDIR
The fusebuf is an rmdir operation.
.It Dv FBT_RENAME
The fusebuf is a rename operation.
.It Dv FBT_LINK
The fusebuf is a link operation.
.It Dv FBT_OPEN
The fusebuf is an open operation.
.It Dv FBT_READ
The fusebuf is a read operation.
.It Dv FBT_WRITE
The fusebuf is a write operation.
.It Dv FBT_STATFS
The fusebuf is a statfs operation.
.It Dv FBT_RELEASE
The fusebuf is a file close operation.
.It Dv FBT_FSYNC
The fusebuf is a file sync operation.
.It Dv FBT_FLUSH
The fusebuf is a flush operation.
.It Dv FBT_INIT
The fusebuf initializes the FUSE connection.
.It Dv FBT_OPENDIR
The fusebuf is an opendir operation.
.It Dv FBT_READDIR
The fusebuf is a readdir operation.
.It Dv FBT_RELEASEDIR
The fusebuf is a close dir operation.
.It Dv FBT_FSYNCDIR
The fusebuf is a dir sync operation.
.It Dv FBT_ACCESS
The fusebuf is an access operation.
.It Dv FBT_CREATE
The fusebuf is a create file operation.
.It Dv FBT_DESTROY
The fusebuf closes the FUSE connection.
.El
.Pp
All the data needed by the FUSE clients is contained in the
.Fa F_dat
structure.
This structure contains a union
.Fa FD
of frequently used type
and a buffer
.Fa F_databuf
to send data to libfuse.
The union contains the following elements:
.Bl -tag -width foobarmoocow
.It Fa FD_stat
A struct
.Xr statvfs 3
filled in by the FUSE client statfs for the FUSE VFS statfs code.
.It Fa FD_attr
Used by the getattr and setattr calls.
.It Fa FD_io
Contains all fields commonly used by FUSE client callbacks to
provide information to FUSE vnops.
It is used by access, readdir, release, releasedir, read, write, create,
mkdir, and setattr.
.El
.Pp
Setattr uses a struct fb_io and a struct stat.
Settattr uses
.Fa FD_stat
and encapsulates a struct fb_io in
.Fa F_databuf
with
.Fa fbtod .
.Pp
Fusebufs can be deleted with the
.Fn fb_delete
helper.
.Sh SEE ALSO
.Xr errno 2 ,
.Xr fuse_main 3 ,
.Xr queue 3 ,
.Xr statvfs 3 ,
.Xr fuse 4 ,
.Xr arc4random 9 ,
.Xr mbuf 9
.Sh HISTORY
The
.Nm
API first appeared in
.Ox 5.4 .
@


1.5
log
@uncomment the Xr for fuse_main(3); from ray
@
text
@d1 1
a1 1
.\" $OpenBSD: fb_setup.9,v 1.4 2014/01/19 08:21:19 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: January 19 2014 $
d59 1
a59 1
		struct vattr	FD_vattr;
d63 1
a63 1
	uint8_t	*F_databuf;
d74 1
a74 1
#define fb_vattr	FD.FD_vattr
a80 1
#define	fb_dat		F_databuf
d208 1
a208 1
.It Fa FD_vattr
d217 1
a217 1
Setattr uses a struct fb_io and a struct vattr.
@


1.4
log
@Obvious typo in macro, .Fn fb_queue, not .Fa.
@
text
@d1 1
a1 1
.\" $OpenBSD: fb_setup.9,v 1.3 2013/11/28 21:27:41 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 28 2013 $
d231 1
a231 1
.\".Xr fuse_main 3 ,
@


1.3
log
@add fb_queue and fb_delete to NAME, so man -k picks them up;
@
text
@d1 1
a1 1
.\" $OpenBSD: fb_setup.9,v 1.2 2013/11/28 14:54:18 syl Exp $
d108 1
a108 1
.Fa fb_queue .
@


1.2
log
@update fb_setup(9) to follow changes that occurs in struct fusebuf few
month ago. Add also a few words about fb_delete(9).

ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: fb_setup.9,v 1.1 2013/08/08 06:41:06 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 8 2013 $
d21 3
a23 1
.Nm fb_setup
@


1.1
log
@rename fuse docs after existent functions;
@
text
@d1 1
a1 1
.\" $OpenBSD: fusebuf.9,v 1.10 2013/07/05 06:45:07 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 5 2013 $
d29 2
d32 2
a33 4
#define	FUSEBUFSIZE	4096
#define	FUSEFDSIZE	sizeof(((struct fusebuf *)0)->F_dat.FD)
#define	FUSELEN		(FUSEBUFSIZE - sizeof(struct fb_hdr) - \\
			sizeof(union uFD))
d38 1
a38 2
	size_t			fh_resid;
	uint32_t		fh_err;
d45 6
a50 6
	uint64_t		fi_fd;
	ino_t			fi_ino;
	off_t			fi_off;
	size_t			fi_len;
	mode_t			fi_mode;
	uint32_t		fi_flags;
d54 8
a61 10
        struct	fb_hdr fb_hdr;
	struct {
		union uFD {
			struct statvfs	FD_stat;
			struct vattr	FD_vattr;
			struct fb_io	FD_io;

		} FD;
		char	F_databuf[FUSELEN];
	} F_dat;
a65 1
#define fb_resid	fb_hdr.fh_resid
d71 9
a79 9
#define fb_stat		F_dat.FD.FD_stat
#define fb_vattr	F_dat.FD.FD_vattr
#define fb_io_fd	F_dat.FD.FD_io.fi_fd
#define fb_io_ino	F_dat.FD.FD_io.fi_ino
#define fb_io_off	F_dat.FD.FD_io.fi_off
#define fb_io_len	F_dat.FD.FD_io.fi_len
#define fb_io_mode	F_dat.FD.FD_io.fi_mode
#define fb_io_flags	F_dat.FD.FD_io.fi_flags
#define	fb_dat		F_dat.F_databuf
d88 1
a88 2
Each FUSE operation fits in a
.Nm
d223 4
@

