head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.9.0.24
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.22
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.20
	OPENBSD_5_0:1.9.0.18
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.16
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.14
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.10
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3;
locks; strict;
comment	@.\" @;


1.13
date	2015.09.14.15.14.55;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	TPchOLbdlEugnrt2;

1.12
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2013.07.17.20.21.55;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.04.19.27.12;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.29.21.09.38;	author cnst;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.16.00.20.23;	author cnst;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.24.07.21.22;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.24.05.39.53;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.31.19.20.01;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.28.11.36.14;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.24.16.09.31;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.23.17.53.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove useless quoting from .Fo and .Fn function names, to prevent
development of a cargo cult in case people look at existing files
for examples.  This achieves a consistent .Fo and .Fn quoting style
across the whole tree.
@
text
@.\"	$OpenBSD: sensor_attach.9,v 1.12 2014/01/21 03:15:46 schwarze Exp $
.\"
.\" Copyright (c) 2006 Michael Knudsen <mk@@openbsd.org>
.\" Copyright (c) 2006 Constantine A. Murenin <cnst+openbsd@@bugmail.mojo.ru>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: January 21 2014 $
.Dt SENSOR_ATTACH 9
.Os
.Sh NAME
.Nm sensor_attach ,
.Nm sensor_detach ,
.Nm sensor_find ,
.Nm sensordev_install ,
.Nm sensordev_deinstall ,
.Nm sensordev_get ,
.Nm sensor_task_register ,
.Nm sensor_task_unregister
.Nd sensors framework
.Sh SYNOPSIS
.In sys/sensors.h
.Ft void
.Fn sensordev_install "struct ksensordev *sensdev"
.Ft void
.Fn sensordev_deinstall "struct ksensordev *sensdev"
.Ft struct ksensordev *
.Fn sensordev_get "int devnum"
.Pp
.Ft void
.Fn sensor_attach "struct ksensordev *sensdev" "struct ksensor *sens"
.Ft void
.Fn sensor_detach "struct ksensordev *sensdev" "struct ksensor *sens"
.Ft struct ksensor *
.Fn sensor_find "int devnum" "enum sensor_type stype" "int numt"
.Pp
.Ft struct sensor_task *
.Fn sensor_task_register "void *arg" "void (*func)(void *)" "int period"
.Ft void
.Fn sensor_task_unregister "struct sensor_task *st"
.Sh DESCRIPTION
The
sensors
framework API provides a mechanism for manipulation of hardware sensors
that are available under the
.Va hw.sensors
.Xr sysctl 8
tree.
.Pp
.Fn sensor_attach
adds the sensor specified by the
.Fa sens
argument to the sensor device specified by the
.Fa sensdev
argument.
.Fn sensor_detach
can be used to remove sensors previously added by
.Fn sensor_attach .
.Pp
.Fn sensordev_install
registers the sensor device specified by the
.Fa sensdev
argument so that all sensors that are attached to the device become
accessible via the sysctl interface.
.Fn sensordev_deinstall
can be used to remove sensor devices previously registered by
.Fn sensordev_install .
.Pp
.Fn sensordev_get
takes ordinal number
.Fa devnum
specifying a sensor device and
returns a pointer to the corresponding
.Vt struct ksensordev ,
or
.Dv NULL
if no such sensor device exists.
.Pp
.Fn sensor_find
takes ordinal number
.Fa devnum
specifying a sensor device, sensor type
.Fa stype
and ordinal number of sensor of such type
.Fa numt ,
and returns a pointer to the corresponding
.Vt struct ksensor ,
or
.Dv NULL
if no such sensor exists.
.Fn sensor_find
will always return
.Dv NULL
if the corresponding sensor devices are not registered by
.Fn sensordev_install .
.Pp
Drivers are responsible for retrieving, interpreting, and normalising
sensor values and updating the sensor struct periodically.
If the driver needs process context, for example to sleep, it can
register a task with the sensor framework.
.Pp
.Fn sensor_task_register
is used to register a periodic task to update sensors.
The
.Fa func
argument is a pointer to the function to run with an interval of
.Fa period
seconds.
The
.Fa arg
parameter is the argument given to the
.Fa func
function.
.Fn sensor_task_unregister
ensures that the task specified by the
.Fa st
argument is no longer running, and then removes it from the queue.
.Pp
All the functions in the sensor framework must be called during
.Xr autoconf 9
or from a process context.
Additionally,
.Fn sensor_task_unregister
must not be called from the sensor task that it is about to remove.
.Sh SEE ALSO
.Xr sysctl 8 ,
.Xr autoconf 9
.Sh HISTORY
The sensor framework was written by
.An Alexander Yurchenko Aq Mt grange@@openbsd.org
and first appeared in
.Ox 3.4 .
.An David Gwynne Aq Mt dlg@@openbsd.org
later extended it for
.Ox 3.8 .
.An Constantine A. Murenin Aq Mt cnst+openbsd@@bugmail.mojo.ru
extended it even further by introducing the concept of sensor devices in
.Ox 4.1 .
@


1.12
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.11 2013/07/17 20:21:55 schwarze Exp $
d27 1
a27 1
.Dd $Mdocdate: July 17 2013 $
d43 1
a43 1
.Fn "sensordev_install" "struct ksensordev *sensdev"
d45 1
a45 1
.Fn "sensordev_deinstall" "struct ksensordev *sensdev"
d47 1
a47 1
.Fn "sensordev_get" "int devnum"
d50 1
a50 1
.Fn "sensor_attach" "struct ksensordev *sensdev" "struct ksensor *sens"
d52 1
a52 1
.Fn "sensor_detach" "struct ksensordev *sensdev" "struct ksensor *sens"
d54 1
a54 1
.Fn "sensor_find" "int devnum" "enum sensor_type stype" "int numt"
d57 1
a57 1
.Fn "sensor_task_register" "void *arg" "void (*func)(void *)" "int period"
d59 1
a59 1
.Fn "sensor_task_unregister" "struct sensor_task *st"
@


1.11
log
@use .Mt for AUTHORS email; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.10 2013/06/04 19:27:12 schwarze Exp $
d27 1
a27 1
.Dd $Mdocdate: June 4 2013 $
d71 1
a71 1
.Pa sens
d73 1
a73 1
.Pa sensdev
d81 1
a81 1
.Pa sensdev
d90 1
a90 1
.Pa devnum
d100 1
a100 1
.Pa devnum
d102 1
a102 1
.Pa stype
d104 1
a104 1
.Pa numt ,
@


1.10
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.9 2007/07/29 21:09:38 cnst Exp $
d27 1
a27 1
.Dd $Mdocdate: July 29 2007 $
d149 1
a149 1
.An Alexander Yurchenko Aq grange@@openbsd.org
d152 1
a152 1
.An David Gwynne Aq dlg@@openbsd.org
d155 1
a155 1
.An Constantine A. Murenin Aq cnst+openbsd@@bugmail.mojo.ru
@


1.9
log
@KNF synopsis: put stars in appropriate places (consistent with other synopses)
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.8 2007/07/16 00:20:23 cnst Exp $
d27 1
a27 1
.Dd $Mdocdate$
d41 1
a41 1
.Fd #include <sys/sensors.h>
@


1.8
log
@fix sensor_task_unregister description to reflect reality; ok dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.7 2007/06/24 07:21:22 jmc Exp $
d46 2
a47 2
.Ft struct ksensordev
.Fn "*sensordev_get" "int devnum"
d53 2
a54 2
.Ft struct ksensor
.Fn "*sensor_find" "int devnum" "enum sensor_type stype" "int numt"
@


1.7
log
@tweak the description of sensor_task_unregister;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.6 2007/06/24 05:39:53 dlg Exp $
d134 1
a134 1
removes the task specified by the
d136 1
a136 1
argument.
d143 1
a143 3
must not be called while a function previously registered with
.Fn sensor_task_register
is running.
@


1.6
log
@document changes to the sensor_task api. task_register now returns a
pointer to the sensor_task it just created, and task_unregister takes it
to remove that task from the system.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.5 2007/05/31 19:20:01 jmc Exp $
a132 1
The
d134 1
a134 1
removes the task specified with by the
@


1.5
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.4 2007/03/22 16:55:31 deraadt Exp $
d56 1
a56 1
.Ft int
d59 1
a59 1
.Fn "sensor_task_unregister" "void *arg"
d135 3
a137 4
removes all tasks previously registered with
.Fn sensor_task_register
with an argument of
.Fa arg .
@


1.4
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.3 2006/12/28 11:36:14 jmc Exp $
d27 1
a27 1
.Dd December 23, 2006
@


1.3
log
@tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.2 2006/12/24 16:09:31 deraadt Exp $
d43 1
a43 1
.Fn "sensordev_install" "struct sensordev *sensdev"
d45 2
a46 2
.Fn "sensordev_deinstall" "struct sensordev *sensdev"
.Ft struct sensordev
d50 1
a50 1
.Fn "sensor_attach" "struct sensordev *sensdev" "struct sensor *sens"
d52 2
a53 2
.Fn "sensor_detach" "struct sensordev *sensdev" "struct sensor *sens"
.Ft struct sensor
d93 1
a93 1
.Vt struct sensordev ,
d106 1
a106 1
.Vt struct sensor ,
@


1.2
log
@typos; Murenin
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_attach.9,v 1.1 2006/12/23 17:53:09 deraadt Exp $
d70 1
a70 1
adds sensor specified by the
d72 1
a72 1
argument to sensor device specified by the
d80 1
a80 1
registers sensor device specified by the
d91 1
a91 1
specifying sensor device and
d101 1
a101 1
specifying sensor device, sensor type
@


1.1
log
@describe new functions to handle sensors; by Constantine A. Murenin
@
text
@d1 1
a1 1
.\"	$OpenBSD: sensor_add.9,v 1.3 2006/10/10 14:07:56 dlg Exp $
d27 2
a28 2
.Dd April 23, 2006
.Dt SENSOR_ADD 9
@

