head	1.18;
access;
symbols
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.8
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.22
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.20
	OPENBSD_5_0:1.10.0.18
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.16
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.14
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4;
locks; strict;
comment	@.\" @;


1.18
date	2017.02.11.23.12.22;	author jmc;	state Exp;
branches;
next	1.17;
commitid	N8XHlvZ3fSzwQp1G;

1.17
date	2017.02.11.19.51.06;	author guenther;	state Exp;
branches;
next	1.16;
commitid	dp1qF9REvzwtzfTw;

1.16
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.15;
commitid	GVTTSAMZ93Lz4hmE;

1.15
date	2015.05.07.08.53.33;	author mpi;	state Exp;
branches;
next	1.14;
commitid	c9ymkCbPubGplOgk;

1.14
date	2015.05.06.08.52.17;	author mpi;	state Exp;
branches;
next	1.13;
commitid	8Nt1erARPXBfs0Oe;

1.13
date	2015.04.30.11.46.16;	author millert;	state Exp;
branches;
next	1.12;
commitid	xpxzaMyVuESoOwaD;

1.12
date	2013.06.04.19.27.06;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.04.02.47.49;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.03.06.37.37;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.08.08.23.33;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.05.14.25.52;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.24.06.50.21;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.15.04.14.29;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.23.19.48.38;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.23.16.13.49;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.23.15.59.09;	author mpech;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.23.15.22.51;	author art;	state Exp;
branches;
next	;


desc
@@


1.18
log
@tweak previous;
@
text
@.\"     $OpenBSD: file.9,v 1.17 2017/02/11 19:51:06 guenther Exp $
.\"
.\" Copyright (c) 2002 Artur Grabowski <art@@openbsd.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: February 11 2017 $
.Dt FALLOC 9
.Os
.Sh NAME
.Nm falloc ,
.Nm fdrelease ,
.Nm FREF ,
.Nm FRELE ,
.Nm fd_getfile ,
.Nm getsock ,
.Nm getvnode
.Nd an overview of file descriptor handling
.Sh SYNOPSIS
.In sys/file.h
.In sys/filedesc.h
.Ft int
.Fn falloc "struct proc *p" "int flags" "struct file **resultfp" "int *resultfd"
.Ft int
.Fn fdrelease "struct proc *p" "int fd"
.Ft void
.Fn FREF "struct file *fp"
.Ft int
.Fn FRELE "struct file *fp" "struct proc *p"
.Ft struct file *
.Fn fd_getfile "struct filedesc *fdp" "int fd"
.Ft int
.Fn getsock "struct proc *p" "int fd" "struct file **fpp"
.In sys/file.h
.In sys/filedesc.h
.In sys/vnode.h
.Ft int
.Fn getvnode "struct proc *p" "int fd" "struct file **fpp"
.Sh DESCRIPTION
These functions provide the interface for the UNIX file descriptors.
File descriptors can be used to access vnodes (see
.Xr vnode 9 ) ,
sockets (see
.Xr socket 2 ) ,
pipes (see
.Xr pipe 2 ) ,
kqueues (see
.Xr kqueue 2 ) ,
and various special purpose communication endpoints.
.Pp
A new file and a file descriptor for it are allocated with the function
.Fn falloc .
The
.Fa flags
argument can be used to set the
.Dv UF_EXCLOSE
flag on the new descriptor.
The larval file and fd are returned via
.Fa resultfp
and
.Fa resultfd ,
which must not be
.Dv NULL .
.Fn falloc
initializes the new file to have a reference count of two:
one for the reference from the file descriptor table and one
for the caller to release with
.Fn FRELE
when it's done initializing it.
.Pp
A file descriptor is freed with
.Fn fdrelease .
This releases the reference that it holds to the underlying file;
if that's the last reference then the file will be freed.
.\" with
.\" .Xr closef 9 .
.Pp
The files are extracted from the file descriptor table using the
functions
.Fn fd_getfile
.Fn fd_getfile
performs all necessary checks to see if the file descriptor number is
within the range of file descriptor table, and if the descriptor is
valid.
.Pp
The files are extracted from the process context using the
function
.Fn getsock
and
.Fn getvnode .
These functions are special cases that besides doing
.Fn fd_getfile
also check if the descriptor is a socket or a vnode respectively,
return the proper errno on error and increase the use count with
.Fn FREF .
.Sh CONCURRENT ACCESS
Since multiple processes can share the same file descriptor table,
it's important that the file is not freed in one process while some
other process is still accessing it.
To solve that problem a special use count is kept with the functions
.Fn FREF
and
.Fn FRELE .
In most cases
.Fn FREF
should be used on a file after it has been extracted
from the file descriptor table and
.Fn FRELE
should be called when the file won't be used anymore.
There are cases when this isn't necessary, but since
.Fn FREF
and
.Fn FRELE
are cheap to use, there is no reason to risk introducing bugs by
not using them.
.Sh CODE REFERENCES
The majority of those functions are implemented in
.Pa sys/kern/kern_descrip.c .
The function prototypes and the macros are located in
.Pa sys/sys/file.h
and
.Pa sys/sys/filedesc.h .
.Sh SEE ALSO
.Xr vnode 9
@


1.17
log
@Add a flags argument to falloc() that lets it optionally set the
close-on-exec flag on the newly allocated fd.  Make falloc()'s
return arguments non-optional: assert that they're not NULL.

ok mpi@@ millert@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.16 2015/11/23 17:53:57 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: November 23 2015 $
d87 1
a87 1
when it done initializing it.
@


1.16
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.15 2015/05/07 08:53:33 mpi Exp $
d25 1
a25 1
.Dd $Mdocdate: May 7 2015 $
d41 1
a41 1
.Fn falloc "struct proc *p" "struct file **resultfp" "int *resultfd"
d69 13
a81 1
A new file descriptor is allocated with the function
d83 7
a89 1
and freed with
d91 4
a94 7
.Fn falloc
and
.Fn fdrelease
deal with allocating and freeing slots in the file descriptor table,
expanding the table when necessary and initializing the descriptor.
It's possible to do those things in smaller steps, but it's not
recommended to make complicated kernel APIs that require it.
@


1.15
log
@Pass a thread pointer instead of its file descriptor table to getvnode(9).

Input and ok millert@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.14 2015/05/06 08:52:17 mpi Exp $
d25 2
a26 2
.Dd $Mdocdate: May 6 2015 $
.Dt FILE 9
d29 7
a35 1
.Nm file
@


1.14
log
@Pass a thread pointer instead of its file descriptor table to getsock(9).

Diff from Vitaliy Makkoveev.

Manpage tweak and ok millert@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.13 2015/04/30 11:46:16 millert Exp $
d25 1
a25 1
.Dd $Mdocdate: April 30 2015 $
d50 1
a50 1
.Fn getvnode "struct filedesc *fdp" "int fd" "struct file **fpp"
a77 2
and
.Fn getvnode .
a81 6
.Fn getvnode
is a special case that besides doing
.Fn fd_getfile
also checks if the descriptor is a vnode, returns the proper
errno on error and increases the use count with
.Fn FREF .
a84 1
.Fn getsock .
d86 3
a88 1
is a special case that besides doing
d90 2
a91 2
also checks if the descriptor is a socket, returns the proper
errno on error and increases the use count with
@


1.13
log
@FRELE returns an int not void.  It is actually the return value
of fdrop() (or 0 if the ref count is non-zero).  From Kanonenvogel
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.12 2013/06/04 19:27:06 schwarze Exp $
d25 1
a25 1
.Dd $Mdocdate: June 4 2013 $
d45 1
a45 1
.Fn getsock "struct filedesc *fdp" "int fd" "struct file **fpp"
d77 1
a77 2
.Fn fd_getfile ,
.Fn getvnode
d79 1
a79 1
.Fn getsock .
d84 10
d95 1
a95 3
and
.Fn getvnode
are special cases that besides doing
d97 2
a98 2
also check if the descriptor is a vnode or socket, return the proper
errno on error and increase the use count with
@


1.12
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.11 2012/10/04 02:47:49 guenther Exp $
d25 1
a25 1
.Dd $Mdocdate: October 4 2012 $
d40 1
a40 1
.Ft void
@


1.11
log
@FRELE() has a second argument now
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.10 2007/05/31 19:20:00 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: May 31 2007 $
d32 2
a33 2
.Fd #include <sys/file.h>
.Fd #include <sys/filedesc.h>
d46 3
a48 3
.Fd #include <sys/file.h>
.Fd #include <sys/filedesc.h>
.Fd #include <sys/vnode.h>
@


1.10
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.9 2007/04/03 06:37:37 jasper Exp $
d25 1
a25 1
.Dd $Mdocdate$
d41 1
a41 1
.Fn FRELE "struct file *fp"
@


1.9
log
@put "CODE REFERENCES" before "SEE ALSO" for consistency

ok jmc@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.8 2006/11/08 08:23:33 jmc Exp $
d25 1
a25 1
.Dd August 23, 2002
@


1.8
log
@getvnode requires vnode.h; from bret lambert
ok pedro
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.7 2004/02/05 14:25:52 jmc Exp $
a112 2
.Sh SEE ALSO
.Xr vnode 9
d120 2
@


1.7
log
@make .Nm match .Dt to avoid screwy apropos(1) output;
found by pb@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.6 2004/01/24 06:50:21 jmc Exp $
d45 5
a50 2
.Ft int
.Fn getsock "struct filedesc *fdp" "int fd" "struct file **fpp"
@


1.6
log
@typo from Jared Yanovich;
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.5 2003/04/15 04:14:29 jmc Exp $
d29 1
a29 1
.Nm vnode
@


1.5
log
@typos;

VOP, crypto and disklabel ok tedu@@
audio(9) ok naddy@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.4 2002/08/23 19:48:38 art Exp $
d35 1
a35 1
.Fn falloc "struct proc *p" "struct file **fesultfp" "int *resultfd"
@


1.4
log
@Document the FREF done in getvnode and soon in getsock.
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.3 2002/08/23 16:13:49 mpech Exp $
d59 1
a59 1
.Pp 
d61 1
a61 1
.Fn falloc 
d67 1
a67 1
deal with allocating and freeing slots in the file descriptor table
d91 1
a91 1
Since multiple processes can share the same file descriptor table
d116 1
a116 1
.Pa sys/sys/file.h 
@


1.3
log
@o) fix .Sh usage;
o) minor fix;

art@@ ok
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.2 2002/08/23 15:59:09 mpech Exp $
d87 3
a89 2
also check if the descriptor is a vnode or socket and return the proper
errno on error.
@


1.2
log
@o) fix .Xr usage;
o) typos;

art@@ ok
@
text
@d1 1
a1 1
.\"     $OpenBSD: file.9,v 1.1 2002/08/23 15:22:51 art Exp $
d59 1
a59 1
.Sh 
d62 1
a62 2
and
freed with
@


1.1
log
@Document various file descriptor access functoins in the kernel.
@
text
@d1 1
a1 1
.\"     $OpenBSD: mbuf.9,v 1.6 2002/06/14 17:25:19 aaron Exp $
d51 1
a51 1
.Xr vnode 9 ),
d53 1
a53 1
.Xr socket 2 ),
d55 1
a55 1
.Xr pipe 2 ),
d57 1
a57 1
.Xr kqueue 2 ),
d69 1
a69 1
expanding the table when necessary and intializing the descriptor.
d113 1
a113 1
The majority of those functions are implmeneted in
@

