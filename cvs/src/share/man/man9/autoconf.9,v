head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.6
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.20
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.18
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.16
	OPENBSD_5_0:1.10.0.14
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.12
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.10
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.6
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@.\" @;


1.16
date	2015.12.11.16.07.02;	author mpi;	state Exp;
branches;
next	1.15;
commitid	fbhqfhfdKxBcsetK;

1.15
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.14;
commitid	GVTTSAMZ93Lz4hmE;

1.14
date	2014.07.13.09.37.22;	author mpi;	state Exp;
branches;
next	1.13;
commitid	1hBrcCsZcuRkaPf2;

1.13
date	2014.07.13.09.28.06;	author mpi;	state Exp;
branches;
next	1.12;
commitid	CpzJc3aR3N1cQxL7;

1.12
date	2014.07.10.19.23.10;	author mpi;	state Exp;
branches;
next	1.11;
commitid	13YqusHQZEhur7bk;

1.11
date	2013.06.04.19.27.03;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.14.16.16.08;	author mk;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.28.10.26.26;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.14.17.54.02;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.29.19.46.29;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.08.23.17.18;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.08.08.08.47;	author mpech;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.27.01.15.34;	author wcobb;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Replace mountroothook_establish(9) by config_mountroot(9) a narrower API
similar to config_defer(9).

ok mikeb@@, deraadt@@
@
text
@.\"     $OpenBSD: autoconf.9,v 1.15 2015/11/23 17:53:57 jmc Exp $
.\"     $NetBSD: autoconf.9,v 1.9 2002/02/13 08:18:35 ross Exp $
.\"
.\" Copyright (c) 2001 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Gregory McGarry.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 23 2015 $
.Dt CONFIG_SEARCH 9
.Os
.Sh NAME
.Nm config_search ,
.Nm config_rootsearch ,
.Nm config_found_sm ,
.Nm config_found ,
.Nm config_rootfound
.Nd autoconfiguration framework
.Sh SYNOPSIS
.In sys/param.h
.In sys/device.h
.Sh DESCRIPTION
Autoconfiguration is the process of matching hardware devices with an
appropriate device driver.
In its most basic form, autoconfiguration consists of the recursive
process of finding and attaching all devices on a bus, including other buses.
.Pp
The autoconfiguration framework supports
.Em direct configuration
where the bus driver can determine the devices present.
.Pp
The autoconfiguration framework also supports
.Em indirect configuration
where the drivers must probe the bus looking for the presence of a device.
Direct configuration is preferred since it can find hardware regardless of
the presence of proper drivers.
.Pp
The autoconfiguration process occurs at system bootstrap and is driven by a
table generated from a
.Do
machine description
.Dc
file by
.Xr config 8 .
For a description of the
.Xr config 8
.Do
device definition
.Dc
language, see
.Xr files.conf 5 .
.Pp
Each device must have a name consisting of an alphanumeric string that
ends with a unit number.
The unit number identifies an instance of the driver.
Device data structures are allocated dynamically during autoconfiguration,
giving a unique address for each instance.
.Sh INDIRECT CONFIGURATION
.nr nS 1
.Ft "void *"
.Fn config_search "cfmatch_t func" "struct device *parent" "void *aux"
.Ft "void *"
.Fn config_rootsearch "cfmatch_t func" "char *rootname" "void *aux"
.nr nS 0
.Pp
The
.Fn config_search
function performs indirect configuration of physical devices by iterating
over all potential children, calling the given function
.Fa func
for each one.
.Pp
The
.Fn config_rootsearch
function finds the root device identified by the string
.Fa rootname ,
in a manner similar to
.Fn config_search ,
except that there is no parent device.
If
.Fa func
is
.Dv NULL ,
.Fn config_search
applies each child's match function instead.
The argument
.Fa parent
is the pointer to the parent's device structure.
The given
.Fa aux
argument describes the device that has been found and is simply passed
on through
.Fa func
to the child.
.Fn config_search
returns a pointer to the best-matched child or
.Dv NULL
otherwise.
.Pp
The role of
.Fa func
is to call
the match function for each device and call
.Fn config_attach
for any positive matches.
.Bd -literal
typedef int (*cfmatch_t)(struct device *parent, void *child, void *aux);
.Ed
.Pp
If
.Fa func
is
.Dv NULL ,
then the parent should record the return value from
.Fn config_search
and call
.Fn config_attach
itself.
.Pp
Note that this function is designed so that it can be used to apply an
arbitrary function to all potential children.
In this case callers may choose to ignore the return value.
.Sh DIRECT CONFIGURATION
.nr nS 1
.Ft "struct device *"
.Fn config_found_sm "struct device *parent" "void *aux" "cfprint_t print" \
                    "cfmatch_t submatch"
.Ft "struct device *"
.Fn config_found "struct device *parent" "void *aux" "cfprint_t print"
.Ft "struct device *"
.Fn config_rootfound "char *rootname" "void *aux"
.nr nS 0
.Pp
The
.Fn config_found_sm
function performs direct configuration on a physical device.
.Fn config_found_sm
is called by the parent and in turn calls the
.Fa submatch
function to call the match function as determined by the configuration table.
If
.Fa submatch
is
.Dv NULL ,
the driver match functions are called directly.
The argument
.Fa parent
is the pointer to the parent's device structure.
The given
.Fa aux
argument describes the device that has been found.
The
.Em softc
structure for the matched device will be allocated, and the appropriate
driver attach function will be called.
.Pp
If the device is matched, the system prints the name of the child and
parent devices, and then calls the
.Fa print
function to produce additional information if desired.
If no driver takes a match, the same
.Fa print
function is called to complain.
The print function is called with the
.Fa aux
argument and, if the matches failed, the full name (including unit
number) of the parent device, otherwise
.Dv NULL .
.Bd -literal
typedef int (*cfprint_t)(void *aux, const char *parentname);
#define	QUIET	0		/* print nothing */
#define	UNCONF	1		/* print " not configured" */
#define	UNSUPP	2		/* print " not supported" */
.Ed
.Pp
Two special strings,
.Do
not configured
.Dc
and
.Do
unsupported
.Dc
will be appended automatically to non-driver reports if the return
value is
.Dv UNCONF
or
.Dv UNSUPP
respectively, otherwise the function should return the value
.Dv QUIET .
.Pp
The
.Fn config_found_sm
function returns a pointer to the attached device's
.Em softc
structure if the device is attached,
.Dv NULL
otherwise.
Most callers can ignore this value, since the system will already have
printed a diagnostic.
.Pp
The
.Fn config_found
macro expands to
.Fn config_found_sm "parent" "aux" "print" "submatch"
with
.Fa submatch
set to
.Dv NULL
and is provided for compatibility with older drivers.
.Pp
The
.Fn config_rootfound
function performs the same operation on the root device identified
by the
.Fa rootname
string.
.Sh CODE REFERENCES
The autoconfiguration framework itself is implemented within the file
.Pa sys/kern/subr_autoconf.c .
Data structures and function prototypes for the framework are located in
.Pa sys/sys/device.h .
.Sh SEE ALSO
.Xr autoconf 4 ,
.Xr files.conf 5 ,
.Xr config 8 ,
.Xr config_attach 9
.Sh HISTORY
Autoconfiguration first appeared in
.Bx 4.1 .
The autoconfiguration framework was completely revised in
.Bx 4.4 .
@


1.15
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.14 2014/07/13 09:37:22 mpi Exp $
d31 1
a31 1
.Dd $Mdocdate: July 13 2014 $
d39 1
a39 2
.Nm config_rootfound ,
.Nm config_defer
a239 14
.Sh DEFERRED CONFIGURATION
.nr nS 1
.Ft "void"
.Fn config_defer "struct device *dev" "void (*func)(struct device *)"
.nr nS 0
.Pp
The
.Fn config_defer
function is called by the child to defer the remainder of its configuration
until all its parent's devices have been attached.
At this point, the function
.Fa func
is called with the argument
.Fa dev .
@


1.14
log
@What would you use config_init() for?
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.12 2014/07/10 19:23:10 mpi Exp $
d31 2
a32 2
.Dd $Mdocdate: July 10 2014 $
.Dt AUTOCONF 9
d35 6
a40 1
.Nm autoconf
@


1.13
log
@Split config_attach/detach(9) from autoconf(9).  Stop talking about
config_deactivate(9), it should die.  Mention config_detach_children(9).
Use CONTEXT and RETURN VALUES sections
@
text
@a75 9
.Sh INITIALIZATION
.nr nS 1
.Ft "void"
.Fn config_init "void"
.nr nS 0
.Pp
The
.Fn config_init
function initializes the autoconfiguration data structures.
@


1.12
log
@No need to talk about config_activate(), we don't have it anymore.
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.11 2013/06/04 19:27:03 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: June 4 2013 $
a244 59
.Sh ATTACHING AND DETACHING DEVICES
.nr nS 1
.Ft "struct device *"
.Fn config_attach "struct device *parent" "void *cf" "void *aux" \
                  "cfprint_t print"
.Ft "int"
.Fn config_detach "struct device *dev" "int flags"
.nr nS 0
.Pp
The
.Fn config_attach
function attaches a found device.
Memory is allocated for the
.Em softc
structure and the driver's attach function is called according to the
configuration table.
If successful,
.Fn config_attach
returns the
.Em softc .
If unsuccessful, it returns
.Dv NULL .
.Pp
The
.Fn config_detach
function is called by the parent to detach the child device.
The second argument
.Fa flags
contains detachment flags:
.Bd -literal
#define	DETACH_FORCE	0x01	/* Force detachment; hardware gone */
#define	DETACH_QUIET	0x02	/* Don't print a notice */
.Ed
.Pp
The
.Fn config_detach
function returns zero if successful and an error code otherwise.
.Fn config_detach
is always called from process context, allowing
.Xr tsleep 9
to be called while the device detaches itself (to deal with processes
which have a device open).
.Sh DEVICE DEACTIVATION
.nr nS 1
.Ft "int"
.Fn config_deactivate "struct device *dev"
.nr nS 0
.Pp
The
.Fn config_deactivate
function is called by the parent to deactivate the child device
.Fa dev .
.Fn config_deactivate
is called from interrupt context to immediately relinquish resources
and notify dependent kernel subsystems that the device is about to be
detached.
At some later point,
.Fn config_detach
will be called to finalise the removal of the device.
d267 2
a268 1
.Xr config 8
a273 2
The detach and activate/deactivate interfaces appeared in
.Nx 1.5 .
@


1.11
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.10 2008/06/26 05:42:08 ray Exp $
d31 1
a31 1
.Dd $Mdocdate: June 26 2008 $
d287 1
a287 1
.Sh DEVICE ACTIVATION/DEACTIVATION
a289 2
.Fn config_activate "struct device *dev"
.Ft "int"
a291 9
.Pp
The
.Fn config_activate
function is called by the parent to activate the child device
.Fa dev .
It is called to activate resources and initialise other kernel
subsystems (such as the network subsystem).
.Fn config_activate
is called from interrupt context after the device has been attached.
@


1.10
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.9 2007/09/14 16:16:08 mk Exp $
d31 1
a31 1
.Dd $Mdocdate: September 14 2007 $
d38 2
a39 2
.Fd #include <sys/param.h>
.Fd #include <sys/device.h>
@


1.9
log
@sleep(9) was removed aeons ago according to miod, so remove references
to it.  Because man pages are named after functions (at least they
should be) and sleep(9) doesn't exist anymore, sleep.9 is renamed to
tsleep.9.

Input and reminders from jmc and ratchov.
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.8 2007/05/31 19:20:00 jmc Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
@


1.8
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.7 2006/10/28 10:26:26 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate$
d291 1
a291 1
.Xr sleep 9
@


1.7
log
@prefer `buses' to `busses' for the noun plural;
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.6 2004/02/14 17:54:02 jmc Exp $
d38 1
a38 1
.Dd August 25, 2002
@


1.6
log
@some improvements from Jared Yanovich;
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.5 2003/08/29 19:46:29 tedu Exp $
d51 1
a51 1
process of finding and attaching all devices on a bus, including other busses.
@


1.5
log
@add some includes, from Patrick Latifi via jmc@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.4 2003/06/06 20:56:32 jmc Exp $
d45 2
a46 2
.Fd #include \*[Lt]sys/param.h\*[Gt]
.Fd #include \*[Lt]sys/device.h\*[Gt]
d91 1
a91 1
function initializes autoconfiguration data structures.
a95 1
.Pp
d116 2
a117 2
is NULL,
.Pp
d130 3
a132 1
returns a pointer to the best-matched child or NULL otherwise.
a161 1
.Pp
a163 1
.Pp
d177 3
a179 1
is NULL, the driver match functions are called directly.
d201 2
a202 2
number) of the parent device, otherwise NULL.
.Pp
d230 3
a232 1
structure if the device is attached, NULL otherwise.
a256 1
.Pp
d279 1
a279 1
.Em flags
a280 1
.Pp
a297 1
.Pp
d343 1
@


1.4
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.3 2003/03/08 23:17:18 jmc Exp $
d342 1
@


1.3
log
@.Xr's for section9:

- MLINKS for uvm stuff
- MLINK vgone.9 vgonel.9
- typos
- fixed SYNOPSIS of extattr(9)

lots of help from miod and art
ok miod@@ art@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.2 2002/11/08 08:08:47 mpech Exp $
a208 1
.Pp
d342 1
a342 1
.Xr config 8 .
@


1.2
log
@Time to cleanup:
o) start new sentence on a new line;
o) wrap long lines;
o) don't use .Pp before/after .Sh, .Ss;
o) OpenBSD -> .Ox;
o) typos;
o) close .Rs;
o) use space between arguments in tag, for example:
   .Xr blabla ) .

miod@@ ok
@
text
@d1 1
a1 1
.\"     $OpenBSD: autoconf.9,v 1.1 2002/08/27 01:15:34 wcobb Exp $
d76 1
a76 1
.Xr config 9 .
@


1.1
log
@Document the device autoconfiguration framework;
from NetBSD with some modifications.
ok art@@
@
text
@d1 1
a1 1
.\"     $OpenBSD$
a91 1
.Pp
@

