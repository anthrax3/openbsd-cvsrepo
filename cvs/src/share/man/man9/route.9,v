head	1.17;
access;
symbols
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2;
locks; strict;
comment	@.\" @;


1.17
date	2017.01.11.15.09.52;	author rzalamena;	state Exp;
branches;
next	1.16;
commitid	qfpqCfxjwsP7hMD8;

1.16
date	2015.11.23.17.53.57;	author jmc;	state Exp;
branches;
next	1.15;
commitid	GVTTSAMZ93Lz4hmE;

1.15
date	2015.10.30.09.48.03;	author bluhm;	state Exp;
branches;
next	1.14;
commitid	pj0TvBlzgblOD3qP;

1.14
date	2014.12.19.18.57.17;	author bluhm;	state Exp;
branches;
next	1.13;
commitid	Y7cEc5OLE6eDnM7U;

1.13
date	2014.11.01.21.45.54;	author mpi;	state Exp;
branches;
next	1.12;
commitid	vAC35q1SeIuVuq7L;

1.12
date	2014.10.14.10.56.10;	author mpi;	state Exp;
branches;
next	1.11;
commitid	EtfSlgFUsJBlAEys;

1.11
date	2014.10.08.07.39.46;	author mpi;	state Exp;
branches;
next	1.10;
commitid	s4Iu5dTrJ6DwkpFx;

1.10
date	2014.04.02.13.10.48;	author mpi;	state Exp;
branches;
next	1.9;

1.9
date	2014.03.18.09.01.11;	author mpi;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.22.06.25.52;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2014.01.20.05.07.49;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.04.19.27.12;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2012.09.19.19.30.42;	author blambert;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.12.14.59.38;	author blambert;	state Exp;
branches;
next	1.3;

1.3
date	2011.12.09.13.02.13;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.09.12.56.59;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.08.20.58.49;	author blambert;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Updated the route(9) man page by removing nonexistent function and
updating the prototype of others.

ok jmc@@
@
text
@.\"     $OpenBSD: route.9,v 1.16 2015/11/23 17:53:57 jmc Exp $
.\"
.\" Copyright (c) 2011 Bret S. Lambert <blambert@@openbsd.org>
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: November 23 2015 $
.Dt RT_SETGATE 9
.Os
.Sh NAME
.Nm rt_setgate ,
.Nm rtredirect ,
.Nm rtdeletemsg
.Nd kernel routing interface
.Sh SYNOPSIS
.In net/route.h
.Ft int
.Fn rt_setgate "struct rtentry *rt" "struct sockaddr *gate" "u_int tableid"
.Ft void
.Fn rtredirect "struct sockaddr *dst" "struct sockaddr *gateway" \
"struct sockaddr *src" "struct rtentry **rtp" "unsigned int rdomain"
.Ft int
.Fn rtdeletemsg "struct rtentry *rt" "struct ifnet *ifp" "u_int tableid"
.Sh DESCRIPTION
Routing entries describe the routes to be taken by packets in a router.
.Bl -tag -width Ds
.It Fn rt_setgate "struct rtentry *rt" "struct sockaddr *gate" "u_int tableid"
Set the address of the gateway for routes described by
.Fa rt
to
.Fa gate .
If memory must be allocated to hold the gateway address,
the address for which
.Fa rt
describes routes will be copied from
.Fa gate .
.It Fn rtredirect "struct sockaddr *dst" "struct sockaddr *gateway" \
"struct sockaddr *src" "struct rtentry **rtp" "unsigned int rdomain"
Redirect routes to
.Fa dst
through
.Fa gateway ,
such as in response to an ICMP redirect message.
.Fa src
should be the address from which the redirect message was received.
If
.Fa rtp
is not NULL,
it will be populated by the routing entry corresponding to
.Fa dst .
.It Fn rtdeletemsg "struct rtentry *rt" "struct ifnet *ifp" "u_int tableid"
Delete routing table entry
.Fa rt
from table
.Fa tableid
and forward a notification message to all
.Fa AF_ROUTE
sockets.
.El
.Sh RETURN VALUES
.Fn rt_setgate
may fail with:
.Pp
.Bl -tag -width Er -compact
.It Bq Er ENOBUFS
Memory could not be allocated for the gateway.
.El
.Pp
.Fn rtdeletemsg
may fail with:
.Pp
.Bl -tag -width Er -compact
.It Bq Er EAFNOSUPPORT
The protocol used by
.Fa rt
is not supported by table with ID
.Fa tableid .
.It Bq Er ESRCH
No routing entry for
.Fa rt
could be found.
.It Bq Er ESRCH
.Fa rt
is a multipath routing entry that conflicts with an existing one.
.El
.Sh SEE ALSO
.Xr route 4 ,
.Xr route 8 ,
.Xr rt_timer_add 9 ,
.Xr rtable_add 9 ,
.Xr rtlabel_id2name 9 ,
.Xr rtrequest 9
@


1.16
log
@add missing NAME entries;
feedback/ok schwarze
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.15 2015/10/30 09:48:03 bluhm Exp $
d18 2
a19 2
.Dd $Mdocdate: October 30 2015 $
.Dt RT_LOOKUP 9
a21 1
.Nm rt_lookup ,
a27 2
.Ft struct rtentry *
.Fn rt_lookup "struct sockaddr *dst" "struct sockaddr *mask" "u_int tableid"
d29 1
a29 2
.Fn rt_setgate "struct rtentry *rt0" "struct sockaddr *dst" \
"struct sockaddr *gate" "u_int tableid"
d32 1
a32 2
"struct sockaddr *netmask" "int flags" "struct sockaddr *src" \
"struct rtentry **rtp" "u_int rdomain"
d34 1
a34 1
.Fn rtdeletemsg "struct rtentry *rt" "u_int tableid"
d38 1
a38 9
.It Fn rt_lookup "struct sockaddr *dst" "struct sockaddr *mask" "u_int tableid"
Return pointer to routing entry corresponding to address
.Fa dst
with a mask of
.Fa mask
from table
.Fa tableid .
.It Fn rt_setgate "struct rtentry *rt0" "struct sockaddr *dst" \
"struct sockaddr *gate" "u_int tableid"
d40 1
a40 1
.Fa rt0
d42 1
a42 1
.Fa gateway .
d45 1
a45 1
.Fa rt0
d47 1
a47 1
.Fa dst .
d49 1
a49 2
"struct sockaddr *netmask" "int flags" "struct sockaddr *src" \
"struct rtentry **rtp" "u_int rdomain"
d62 1
a62 1
.It Fn rtdeletemsg "struct rtentry *rt" "u_int tableid"
@


1.15
log
@Rename rtrequest1() to rtrequest().
"make sure to update the manpage too" mpi@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.14 2014/12/19 18:57:17 bluhm Exp $
d18 2
a19 2
.Dd $Mdocdate: December 19 2014 $
.Dt ROUTE 9
d22 4
a25 1
.Nm route
@


1.14
log
@Do not report an EDQUOT "Disk quota exceeded" error from the routing
code.  Instead generate an ENOBUFS "No buffer space available" error
at the malloc(9) failure in rt_setgate(9) and propagate it.
OK mpi@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.13 2014/11/01 21:45:54 mpi Exp $
d18 1
a18 1
.Dd $Mdocdate: November 1 2014 $
d114 1
a114 1
.Xr rtrequest1 9
@


1.13
log
@Document rtalloc(9).
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.12 2014/10/14 10:56:10 mpi Exp $
d18 1
a18 1
.Dd $Mdocdate: October 14 2014 $
d84 6
a89 1
returns non-0 if it cannot allocate memory.
@


1.12
log
@RTFREE() is no more.
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.11 2014/10/08 07:39:46 mpi Exp $
d18 1
a18 1
.Dd $Mdocdate: October 8 2014 $
a27 4
.Ft struct rtentry *
.Fn rtalloc1 "struct sockaddr *dst" "int flags" "u_int tableid"
.Ft void
.Fn rtfree "struct rtentry *rt"
a80 4
.It Fn rtfree "struct rtentry *rt"
Release a reference to
.Fa rt ,
freeing it if the reference count drops to 0.
d101 1
a101 1
is a multipath route that conflicts with existing multipath route.
@


1.11
log
@rtalloc(9) and rtalloc_noclone(9) are dead, long live rtalloc1(9)!

reminded by phessler@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.10 2014/04/02 13:10:48 mpi Exp $
d18 1
a18 1
.Dd $Mdocdate: April 2 2014 $
a31 1
.Fn RTFREE "struct rtentry *rt"
a88 3
.It Fn RTFREE
A macro which calls
.Fn rtfree .
@


1.10
log
@Add a man page for rtrequest1(9) splitted from route(9) with some
improvements.

ok sthen@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.9 2014/03/18 09:01:11 mpi Exp $
d18 1
a18 1
.Dd $Mdocdate: March 18 2014 $
a27 4
.Ft void
.Fn rtalloc "struct route *ro"
.Ft void
.Fn rtalloc_noclone "struct route *ro"
@


1.9
log
@Split route(9) into various manuals to make it easier to complete/improve
its content.

With inputs from jmc@@ and schwarze@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.8 2014/01/22 06:25:52 claudio Exp $
d18 1
a18 1
.Dd $Mdocdate: January 22 2014 $
a37 3
.Fn rtrequest1 "int req" "struct rt_addrinfo *info" "u_int8_t prio" \
"struct rtentry **ret_nrt" "u_int tableid"
.Ft int
a45 23
.Bd -literal
struct rt_addrinfo {
	int	rti_addrs;
	struct	sockaddr *rti_info[RTAX_MAX];
	int	rti_flags;
	struct	ifaddr *rti_ifa;
	struct	ifnet *rti_ifp;
	struct	rt_msghdr *rti_rtm;
	u_char	rti_mpls;
};

#define RTAX_DST	0	/* destination sockaddr present */
#define RTAX_GATEWAY	1	/* gateway sockaddr present */
#define RTAX_NETMASK	2	/* netmask sockaddr present */
#define RTAX_IFP	4	/* interface name sockaddr present */
#define RTAX_IFA	5	/* interface addr sockaddr present */
#define RTAX_AUTHOR	6	/* sockaddr for author of redirect */
#define RTAX_BRD	7	/* for NEWADDR, broadcast or p-p dest */
#define RTAX_SRC	8	/* source sockaddr present */
#define RTAX_SRCMASK	9	/* source netmask present */
#define RTAX_LABEL	10	/* route label present */
#define RTAX_MAX	11	/* size of array to allocate */
.Ed
a55 24
.It Fn rtrequest1 "int req" "struct rt_addrinfo *info" "u_int8_t prio" \
"struct rtentry **ret_nrt" "u_int tableid"
Perform the action specified in
.Fa req
on table
.Fa tableid .
.Fa req
can be any of the following:
.Bl -tag -width "RTM_RESOLVEXXX" -offset indent
.It RTM_ADD
.\" XXX Describe adding an entry.
.It RTM_RESOLVE
.\" XXX Describe resolving an entry.
.It RTM_DELETE
.\" XXX Describe deleting an entry.
.El
.Pp
If
.Fa ret_nrt
is non-NULL, a pointer to the routing entry which satisfied the request is
placed there.
If
.Fa prio
is 0, a default priority based on the egress interface is used.
a98 39
.Fn rtrequest1
may fail with:
.Pp
.Bl -tag -width Er -compact
.It Bq Er EAFNOSUPPORT
The protocol used by
.Fa info
is not supported in table with ID of
.Fa tableid .
.It Bq Er ESEARCH
No routing entry corresponding to
.Fa info
could be found.
.It Bq Er ESEARCH
Multipath route with no gateway provided in
.Fa info .
.It Bq Er ESEARCH
The routing entry could not be found in the routing table.
.It Bq Er EINVAL
.Fa req
specified
.Fa RTM_RESOLVE
with a
.Fa ret_nrt
argument which does not point to a cloneable routing entry.
.It Bq Er EEXIST
Multipath route conflicts with existing multipath route.
.It Bq Er EEXIST
The route could not be entered into the routing table.
.It Bq Er ENOMEM
Space for MPLS protocol data could not be allocated.
.It Bq Er ENOBUFS
Space for a new routing entry could not be allocated.
.It Bq Er ENETUNREACH
An interface address corresponding to the route described by
.Fa info
could not be found.
.El
.Pp
d124 2
a125 4
.Xr rtlabel_id2name 9
.Sh BUGS
The current route entry reference counting code, while not incorrect, is also
likely not correct either.
@


1.8
log
@Adjust man pages since RTA_GENMASK is going away (even though we keep the
defines for now they should not be documented).
OK benno@@ and agreed dlg@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.7 2014/01/20 05:07:49 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 20 2014 $
a48 32
.Ft int
.Fn rtable_exists "u_int id"
.Ft int
.Fn rtable_add "u_int id"
.Ft u_int
.Fn rtable_l2 "u_int id"
.Ft void
.Fn rtable_l2set "u_int id" "u_int parent"
.Ft struct radix_node_head *
.Fn rt_gettable "sa_family_t af" "u_int id"
.Ft struct rttimer_queue *
.Fn rt_timer_queue_create "u_int timeout"
.Ft int
.Fn rt_timer_add "struct rtentry *rt" \
"void (*func)(struct rtentry *, struct rttimer *)" \
"struct rttimer_queue *queue" "u_int rtableid"
.Ft void
.Fn rt_timer_queue_change "struct rttimer_queue *rtq" "long timeout"
.Ft void
.Fn rt_timer_queue_destroy "struct rttimer_queue *rtq" "int destroy"
.Ft unsigned long
.Fn rt_timer_count "struct rttimer_queue *rtq"
.Ft void
.Fn rt_timer_remove_all "struct rtentry *rt"
.Ft u_int16_t
.Fn rtlabel_name2id "char *name"
.Ft const char *
.Fn rtlabel_id2name "u_int16_t id"
.Ft struct sockaddr *
.Fn rtlabel_id2sa "u_int16_t labelid" "struct sockaddr_rtlabel *sa_rl"
.Ft void
.Fn rtlabel_unref "u_int16_t id"
a72 1
.Ss Route Entries
a147 82
.Ss Routing Tables and Domains
Routing tables contain layer 2 and 3 forwarding information.
Each address family in use will have its own routing table.
Routing domains are a way of logically segmenting a router among multiple
networks and may contain more than one routing table.
.Bl -tag -width Ds
.It Fn rtable_exists "u_int id"
Return
.Fa 1
if table with ID
.Fa id
exists,
.Fa 0
otherwise.
.It Fn rtable_add "u_int id"
Add table with ID of
.Fa id
to routing domain
.Fa 0 .
.It Fn rtable_l2 "u_int id"
Get the routing domain of table with ID of
.Fa id .
.It Fn rtable_l2set "u_int id" "u_int parent"
Place table with ID of
.Fa id
under the routing domain with ID of
.Fa parent .
.El
.Ss Route Timer Queues
Route timer queues provide a method of queueing routing-related actions to be
triggered once per second.
.Bl -tag -width Ds
.It Fn rt_timer_queue_create "u_int timeout"
Create a timer queue with a timeout of
.Fa timeout
seconds.
.It Fn rt_timer_add "struct rtentry *rt" \
"void (*func)(struct rtentry *, struct rttimer *)" \
"struct rttimer_queue *queue" "u_int rtableid"
Schedule
.Fa func
to be called on
.Fa rt
using the timeout of
.Fa queue .
If
.Fa rt
already has a call to
.Fa func
scheduled on any timer queue, it will be replaced with the new invocation.
.It Fn rt_timer_queue_change "struct rttimer_queue *rtq" "long timeout"
Set timeout for
.Fa rtq
to
.Fa timeout
seconds.
.It Fn rt_timer_remove_all "struct rtentry *rt"
Remove all timeouts associated with
.Fa rt
from all routing timer queues.
.El
.Ss Route Labels
Route labels are arbitrary data appended to routes and can be acted upon by
.Xr pf 4 .
.Bl -tag -width Ds
.It Fn rtlabel_name2id "char *name"
Return numerical ID of the route label named
.Fa name ,
creating the label if it does not already exist.
.It Fn rtlabel_id2name "u_int16_t id"
Return the string name of the route label with ID
.Fa id .
.It Fn rtlabel_id2sa "u_int16_t labelid" "struct sockaddr_rtlabel *sa_rl"
Populate
.Fa sa_rl
with the data from the route label specified by
.Fa labelid .
.It Fn rtlabel_unref "u_int16_t id"
Remove a reference to the route label with ID
.Fa id ,
freeing the label if the reference count drops to 0.
.El
a207 22
.Pp
.Fn rtable_add
may fail with:
.Pp
.Bl -tag -width Er -compact
.It Bq Er EEXIST
A table with ID of
.Fa id
already exists.
.It Bq Er ENOMEM
Memory could not be allocated to extend the list of routing domains.
.El
.Pp
.Fn rt_timer_add
may fail with
.Er ENOBUFS
if memory could not be allocated for the timeout.
.Pp
.Fn rtlabel_name2id
returns
.Fa 0
if it was unable to create a route label.
d210 4
a213 1
.Xr route 8
@


1.7
log
@Obvious .Xr fixes, found while testing mandocdb(8).
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.6 2013/06/04 19:27:12 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 4 2013 $
a94 1
#define RTAX_GENMASK	3	/* cloning mask sockaddr present */
@


1.6
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.5 2012/09/19 19:30:42 blambert Exp $
d18 1
a18 1
.Dd $Mdocdate: September 19 2012 $
d245 1
a245 1
.Xr pf .
@


1.5
log
@Update the route(9) manpage to reflect recent change to rt_lookup()

reminded by jmc@@

ok jmc@@ claudio@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.4 2011/12/12 14:59:38 blambert Exp $
d18 1
a18 1
.Dd $Mdocdate: December 12 2011 $
d25 1
a25 1
.Fd #include <net/route.h>
@


1.4
log
@Consistently use the term "route label" throughout.

Noticed by and ok sthen@@
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.3 2011/12/09 13:02:13 sthen Exp $
d18 1
a18 1
.Dd $Mdocdate: December 9 2011 $
d26 1
a26 1
.Ft struct radix_node *
d110 1
a110 1
Return pointer to routing entry (as a radix_node) corresponding to address
@


1.3
log
@s/timout/timeout
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.2 2011/12/09 12:56:59 sthen Exp $
d248 1
a248 1
Return numerical ID of routing label named
d252 1
a252 1
Return the string name of routing label with ID
d260 1
a260 1
Remove a reference to routing label with ID
d345 1
a345 1
if it was unable to create a routing label.
@


1.2
log
@typo, s/conficts/conflicts/
@
text
@d1 1
a1 1
.\"     $OpenBSD: route.9,v 1.1 2011/12/08 20:58:49 blambert Exp $
d18 1
a18 1
.Dd $Mdocdate: December 8 2011 $
d215 1
a215 1
Create a timer queue with a timout of
@


1.1
log
@Begin documenting the soup sandwich that is the kernel routing code.

Much handholding jmc@@

ok jmc@@ sthen@@ claudio@@
@
text
@d1 1
a1 1
.\"     $OpenBSD$
d18 1
a18 1
.Dd $Mdocdate$
d322 1
a322 1
is a multipath route that conficts with existing multipath route.
@

