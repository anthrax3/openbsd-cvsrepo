head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.2
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.27.0.2
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.25.0.8
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.4
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.2
	OPENBSD_5_0:1.14.0.6
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.8
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@.\" @;


1.29
date	2017.02.12.04.55.08;	author guenther;	state Exp;
branches;
next	1.28;
commitid	1rXx7AiXIWFC9gYa;

1.28
date	2017.01.24.07.59.58;	author jmc;	state Exp;
branches;
next	1.27;
commitid	XT3zR4SN2BtR65JB;

1.27
date	2016.03.30.06.58.06;	author jmc;	state Exp;
branches;
next	1.26;
commitid	nFeMLhYWGqPPjE4B;

1.26
date	2015.09.14.15.14.55;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	TPchOLbdlEugnrt2;

1.25
date	2014.07.07.05.31.42;	author matthew;	state Exp;
branches;
next	1.24;
commitid	EsBdDSSIJKtJvk79;

1.24
date	2014.07.01.05.53.13;	author jmc;	state Exp;
branches;
next	1.23;
commitid	L4zndaj0IIwiBH5B;

1.23
date	2014.02.12.05.49.36;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2014.01.20.07.57.55;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2013.08.14.08.39.28;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2013.06.04.19.27.06;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2012.06.13.06.15.23;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2012.04.12.19.13.44;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2012.04.12.14.25.57;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.16.10.05.45;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2011.10.16.06.48.38;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.29.17.54.12;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.03.01.49.44;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.28.12.27.03;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.19.20.00;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.15.13.46.24;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.16.17.48.36;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.06.20.56.32;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.03.15.21.17;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.14.19.43.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.12.18.05.59;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.07.04.38.38;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.09.05.16.23.11;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.02.17.24.35;	author espie;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Split up fork1():
 - FORK_THREAD handling is a totally separate function, thread_fork(),
   that is only used by sys___tfork() and which loses the flags, func,
   arg, and newprocp parameters and gains tcb parameter to guarantee
   the new thread's TCB is set before the creating thread returns
 - fork1() loses its stack and tidptr parameters
Common bits factor out:
 - struct proc allocation and initialization moves to thread_new()
 - maxthread handling moves to fork_check_maxthread()
 - setting the new thread running moves to fork_thread_start()
The MD cpu_fork() function swaps its unused stacksize parameter for
a tcb parameter.

luna88k testing by aoyama@@, alpha testing by dlg@@
ok mpi@@
@
text
@.\"	$OpenBSD: fork1.9,v 1.28 2017/01/24 07:59:58 jmc Exp $
.\"	$NetBSD: fork1.9,v 1.3 1999/03/16 00:40:47 garbled Exp $
.\"
.\" Copyright (c) 1998 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
.\" NASA Ames Research Center.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: January 24 2017 $
.Dt FORK1 9
.Os
.Sh NAME
.Nm fork1
.Nd create a new process
.Sh SYNOPSIS
.In sys/types.h
.In sys/proc.h
.Ft int
.Fo fork1
.Fa "struct proc *p1"
.Fa "int flags"
.Fa "void (*func)(void *)"
.Fa "void *arg"
.Fa "register_t *retval"
.Fa "struct proc **rnewprocp"
.Fc
.Sh DESCRIPTION
.Fn fork1
creates a new process out of
.Ar p1 ,
which should be the current thread.
This function is used primarily to implement the
.Xr fork 2
and
.Xr vfork 2
system calls, as well as the
.Xr kthread_create 9
function.
.Pp
The
.Ar flags
argument is used to control the behavior of the fork and is created by
a bitwise-OR of the following values:
.Bl -tag -width FORK_SHAREFILES
.It Dv FORK_FORK
The call is done by the
.Xr fork 2
system call.
Used only for statistics.
.It Dv FORK_VFORK
The call is done by the
.Xr vfork 2
system call.
Used only for statistics.
.It Dv FORK_PPWAIT
Suspend the parent process until the child is terminated (by calling
.Xr _exit 2
or abnormally), or makes a call to
.Xr execve 2 .
.It Dv FORK_SHAREFILES
Let the child share the file descriptor table with the parent through
fdshare().
The default behavior is to copy the table through
fdcopy().
.It Dv FORK_IDLE
The new thread will be left in the
.Dv SIDL
state.
The default behavior is to make it runnable and add it to the run queue.
.It Dv FORK_NOZOMBIE
The child will be dissociated from the parent and will not leave a status
for the parent to collect.
See
.Xr wait 2 .
.It Dv FORK_SHAREVM
The child will share the parent's address space.
The default behavior is
that the child gets a copy-on-write copy of the address space.
.It Dv FORK_SIGHAND
The child will share the parent's signal actions, including the handler,
mask, and flags, with sigactsshare().
The default behavior is to copy the signal actions from the parent with
sigactsinit().
.Dv FORK_SHAREVM
must also be set.
.It Dv FORK_PTRACE
The child will start with tracing enabled, as if
ptrace(PT_TRACE_ME, 0, 0, 0) had been invoked in the child.
.El
.Pp
If
.Fa func
is not
.Dv NULL ,
the new thread will begin execution by calling this function.
It defaults to child_return, which returns to userland.
.Pp
If
.Fa arg
is not
.Dv NULL ,
it is the argument to the previous function.
It defaults to a pointer to the new thread.
.Pp
If
.Fa retval
is not
.Dv NULL ,
the PID of the child process will be stored in
.Fa *retval
on successful completion.
.Pp
If
.Fa rnewprocp
is not
.Dv NULL ,
the newly created thread is stored in
.Fa *rnewprocp
on successful completion.
.Sh RETURN VALUES
Upon successful completion of the fork operation,
.Fn fork1
returns 0.
Otherwise, the following error values are returned:
.Bl -tag -width [EAGAIN]
.It Bq Er EAGAIN
The system limits on the total number of threads or processes would
be exceeded.
.It Bq Er EAGAIN
The limit
.Dv RLIMIT_NPROC
on the total number of processes under execution by this
user id would be exceeded.
.It Bq Er ENOMEM
There is insufficient swap space for the new thread.
.El
.Sh SEE ALSO
.Xr execve 2 ,
.Xr fork 2 ,
.Xr vfork 2 ,
.Xr kthread_create 9 ,
.Xr psignal 9 ,
.Xr tfind 9
.Sh CAVEATS
The
.Nm
function semantics are specific to
.Ox .
Other
.Bx
systems have different semantics.
@


1.28
log
@pfind(9) has been renamed to tfind(9);
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.27 2016/03/30 06:58:06 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: March 30 2016 $
a44 2
.Fa "void *stack"
.Fa "pid_t *tidptr"
d54 1
a54 1
which should be the current process.
d56 2
a57 2
.Xr fork 2 ,
.Xr __tfork 3 ,
a77 5
.It Dv FORK_TFORK
The call is done by the
.Xr __tfork 3
system call.
Used only for statistics.
d89 1
a89 1
The child will be left in the
a111 8
.It Dv FORK_THREAD
The child will instead be a kernel-level thread in the same process
as the parent.
.Dv FORK_SHAREFILES ,
.Dv FORK_SHAREVM ,
and
.Dv FORK_SIGHAND
must also be set.
d115 1
a115 1
.Fa stack
d118 2
a119 2
it will be used as the initial value of the child's stack pointer,
instead of using the child's copy of the parent's stack.
d122 1
a122 1
.Fa tidptr
d125 2
a126 4
the PID of the child process will be written there in the parent
on success.
This is guaranteed to be done before
the child process is started.
d132 3
a134 9
it will hold the following values after successful completion
of the fork operation:
.Bl -tag -width retval[0]
.It Fa retval[0]
This will contain the PID of the child process.
.It Fa retval[1]
In the parent process, this will contain the value 0.
In the child process, this will contain 1.
.El
d137 1
a137 1
.Fa func
d140 3
a142 12
the new process will begin execution by calling this function.
It defaults to child_return, which returns to userland.
.Pp
If
.Fa arg
is not
.Dv NULL ,
it is the argument to the previous function.
It defaults to a pointer to the new process.
.Pp
The newly created process is returned through
.Fa *rnewprocp .
d150 2
a151 1
The limit on the total number of system processes would be exceeded.
d157 2
a163 1
.Xr __tfork 3 ,
@


1.27
log
@some Xr adjustment to catch up with MLINKS removal;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.26 2015/09/14 15:14:55 schwarze Exp $
d32 1
a32 1
.Dd $Mdocdate: September 14 2015 $
d195 2
a196 2
.Xr pfind 9 ,
.Xr psignal 9
@


1.26
log
@Remove useless quoting from .Fo and .Fn function names, to prevent
development of a cargo cult in case people look at existing files
for examples.  This achieves a consistent .Fo and .Fn quoting style
across the whole tree.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.25 2014/07/07 05:31:42 matthew Exp $
d32 1
a32 1
.Dd $Mdocdate: July 7 2014 $
d59 1
a59 1
.Xr __tfork 2 ,
d82 1
a82 1
.Xr __tfork 2
a189 1
.Xr __tfork 2 ,
d193 1
@


1.25
log
@fork1: FORK_THREAD requires FORK_SHAREFILES

Now that file descriptor tables have moved from a per-thread resource
to per-process, it's impossible to fork a thread without sharing the
file descriptor table.

ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.24 2014/07/01 05:53:13 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: July 1 2014 $
d42 1
a42 1
.Fo "fork1"
@


1.24
log
@no more uvm_fork(9);
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.23 2014/02/12 05:49:36 guenther Exp $
d32 1
a32 1
.Dd $Mdocdate: February 12 2014 $
d122 1
a122 1
.Dv FORK_NOZOMBIE ,
@


1.23
log
@fork1's exitsig argument just vanished (mwuhahahaha)
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.22 2014/01/20 07:57:55 guenther Exp $
d32 1
a32 1
.Dd $Mdocdate: January 20 2014 $
d196 1
a196 2
.Xr psignal 9 ,
.Xr uvm_fork 9
@


1.22
log
@FORK_CLEANFILES is gone, but FORK_IDLE has been added
Also, the stack parameter is now used by __tfork, so yes, it's tested now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.21 2013/08/14 08:39:28 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: August 14 2013 $
a43 1
.Fa "int exitsig"
a157 6
.Pp
The signal
.Fa exitsig
is sent to the parent
.Fa p1
on exit of the new process.
@


1.21
log
@some Bx/Ox conversion;
From: Jan Stary
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.20 2013/06/04 19:27:06 schwarze Exp $
d32 1
a32 1
.Dd $Mdocdate: June 4 2013 $
d96 5
a100 3
.It Dv FORK_CLEANFILES
The child starts with a clean file descriptor table created by
fdinit().
a212 6
.Pp
The only use of a non-null
.Fa stack
is for
.Xr compat_linux 8
on i386, so that feature is mostly untested.
@


1.20
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.19 2012/06/13 06:15:23 guenther Exp $
d32 1
a32 1
.Dd $Mdocdate: June 13 2012 $
d208 3
a210 1
Other BSD systems have different semantics.
@


1.19
log
@Remove duplicate description of FORK_TFORK

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.18 2012/04/12 19:13:44 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: April 12 2012 $
d39 2
a40 2
.Fd #include <sys/types.h>
.Fd #include <sys/proc.h>
@


1.18
log
@sort SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.17 2012/04/12 14:25:57 deraadt Exp $
a83 5
system call.
Used only for statistics.
.It Dv FORK_TFORK
The call is done by the
.Fn __tfork
@


1.17
log
@more rfork mop-up
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.16 2011/11/16 10:05:45 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: November 16 2011 $
d200 1
a202 1
.Xr __tfork 2 ,
@


1.16
log
@do not Xr non-existent man pages;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.15 2011/10/16 06:48:38 guenther Exp $
d32 1
a32 1
.Dd $Mdocdate: October 16 2011 $
d60 1
a60 1
.Xr rfork 2 ,
d81 1
a81 1
.It Dv FORK_RFORK
d83 1
a83 1
.Xr rfork 2
d202 1
a202 1
.Xr rfork 2 ,
@


1.15
log
@stacksize argument is gone and replaced with tidptr argument
Document new FORK_TFORK bit and that stack argument is used by compat_linux

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.14 2010/06/29 17:54:12 tedu Exp $
d32 1
a32 1
.Dd $Mdocdate: June 29 2010 $
d88 1
a88 1
.Xr __tfork 2
@


1.14
log
@RTHREADS kernel options is gone, spotted by jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.13 2010/04/03 01:49:44 guenther Exp $
d32 1
a32 1
.Dd $Mdocdate: April 3 2010 $
d47 1
a47 1
.Fa "size_t stacksize"
d86 5
d137 11
a147 6
the area starting at
.Fa stack
of extent
.Fa stacksize
will be used for the child's stack, instead of cloning the parent's
stack.
d157 1
a157 1
This will contain the pid of the child process.
d215 5
a219 5
The system never uses
.Fn fork1
with a non-null
.Fa stack ,
so that feature is not even tested.
@


1.13
log
@Add missing documention:
 - fork1() flags: FORK_SIGHAND, FORK_PTRACE, and FORK_THREAD
 - RTHREADS kernel option
 - rfork() RFTHREAD flag (with a BUGS entry that it's not usable from C)

ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.12 2009/07/28 12:27:03 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: July 28 2009 $
a125 2
If the kernel option RTHREADS isn't enabled then the call will return
.Dv ENOTSUP .
@


1.12
log
@document rnewprocp; based on a diff from Vladimir Kirillov
help/ok art
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.11 2008/06/26 05:42:08 ray Exp $
d32 1
a32 1
.Dd $Mdocdate: June 26 2008 $
d108 20
@


1.11
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.10 2007/05/31 19:20:00 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: May 31 2007 $
d42 11
a52 1
.Fn "fork1" "struct proc *p1" "int exitsig" "int flags" "void *stack" "size_t stacksize" "void (*func)(void *)" "void *arg" "register_t *retval"
d154 3
@


1.10
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.9 2004/07/15 13:46:24 mpech Exp $
a18 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d32 1
a32 1
.Dd $Mdocdate$
@


1.9
log
@Remove references to non-existent manuals. From form@@.

millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.8 2004/03/16 17:48:36 tedu Exp $
d39 1
a39 1
.Dd January 6, 1998
@


1.8
log
@reality sync.  started by Sven Dehmlow.  ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.7 2003/06/06 20:56:32 jmc Exp $
d90 1
a90 1
.Xr fdshare 9 .
d92 1
a92 1
.Xr fdcopy 9 .
d95 1
a95 1
.Xr fdinit 9 .
@


1.7
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- use .Ox for OpenBSD, .Fx for FreeBSD
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.6 2001/08/03 15:21:17 mpech Exp $
d49 1
a49 1
.Fn "fork1" "struct proc *p1" "int flags" "void *stack" "size_t stacksize" "register_t *retval"
d131 20
d172 2
a173 1
.Xr psignal 9
@


1.6
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.5 2001/01/14 19:43:25 millert Exp $
d145 8
a164 8
.Sh SEE ALSO
.Xr execve 2 ,
.Xr fork 2 ,
.Xr rfork 2 ,
.Xr vfork 2 ,
.Xr kthread_create 9 ,
.Xr pfind 9 ,
.Xr psignal 9
@


1.5
log
@create_kthread(9) -> kthread_create(9); overdose@@vomitorium.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.4 2000/10/12 18:05:59 aaron Exp $
d130 1
@


1.4
log
@General man page cleanups, mostly to remove trailing whitespace, hard
sentence breaks, and other such things.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.3 2000/02/07 04:38:38 art Exp $
d60 1
a60 1
.Xr create_kthread 9
d161 1
d163 1
a163 2
.Xr psignal 9 ,
.Xr create_kthread 9
@


1.3
log
@Update to reflect recent changes to the interface.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.2 1999/09/05 16:23:11 espie Exp $
d49 1
a49 1
.Fn "fork1" "struct proc *p1" "int flags" "void *stack" "size_t stacksize" "register_t *retval" 
d54 2
a55 2
which should be the current process.  This function is used primarily
to implement the
d60 1
a60 1
.Xr create_kthread 9 
d71 2
a72 1
system call. Used only for statistics.
d76 2
a77 1
system call. Used only for statistics.
d81 2
a82 1
system call. Used only for statistics.
d98 2
a99 1
for the parent to collect. See
d102 2
a103 1
The child will share the parent's address space. The default behavior is
d109 2
a110 2
is not 
.Dv NULL , 
d120 2
a121 2
is not 
.Dv NULL , 
d128 2
a129 2
In the parent process, this will contain the value 0.  In the child process,
this will contain 1.
d133 2
a134 1
returns 0.  Otherwise, the following error values are returned:
d147 1
a147 1
function semantics are specific to 
d152 1
a152 1
.Fn fork1 
@


1.2
log
@New man pages, adapted from NetBSD.
Add corresponding cross-references.
Missed some uses of .Dv.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fork1.9,v 1.1 1999/09/02 17:24:35 espie Exp $
d49 1
a49 1
.Fn "fork1" "struct proc *p1" "int forktype" "int rforkflags" "void *stack" "size_t stacksize" "register_t *retval" 
d63 11
a73 11
The 
.Fa forktype
argument can be 
.Dv ISFORK ,
.Dv ISVFORK 
or
.Dv ISRFORK
and controls whether 
.Nm
has
.Xr fork 2 ,
d75 3
a77 1
or
d79 10
a88 21
semantics.
.Pp
The
.Ar rforkflags
argument is only used if
.Fa forktype 
equals
.Dv ISRFORK ,
and is used to implement
.Xr rfork 2 
semantics.
.Bl -tag -width RFNOWAIT
.It Dv RFPROC
Should always be set. The system currently does not support changing an
existing process characteristics.
.It Dv RFNOWAIT
See
.Xr rfork 2 .
.It Dv RFFDG
If set, the child gets a copy of the parent's file descriptor table
through 
d90 2
a91 5
Otherwise, the file descriptor table is shared through
.Xr fdshare 9 .
.It Dv RFCFDG
If set, the child starts out with a clean file descriptor table created
by
d93 7
a99 4
.It Dv RFMEM
If set, the child will share the parent's address space, apart from the
stack segment, which is always copied.  Otherwise, the child will get a 
copy-on-write snapshot of the parent address space.
@


1.1
log
@More manpages.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d113 3
a115 1
is not NULL, the area starting at
d124 3
a126 1
is not NULL, it will hold the following values after successful completion
d155 1
a155 1
.Nm 
@

