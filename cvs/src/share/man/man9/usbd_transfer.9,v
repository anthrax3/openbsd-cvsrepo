head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@.\" @;


1.7
date	2015.05.04.14.36.26;	author jmc;	state Exp;
branches;
next	1.6;
commitid	IUm85fKs6zpf8ad3;

1.6
date	2015.05.04.10.12.34;	author mpi;	state Exp;
branches;
next	1.5;
commitid	Y7fymVNEhxWOY0E7;

1.5
date	2014.07.12.16.07.06;	author mpi;	state Exp;
branches;
next	1.4;
commitid	yeviOaIdSWhv3xi0;

1.4
date	2014.07.12.08.48.19;	author mpi;	state Exp;
branches;
next	1.3;
commitid	b31q9i9UfN5rfiyW;

1.3
date	2014.03.27.13.33.02;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2014.03.26.14.25.35;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.20.15.34.52;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.7
log
@tweak previous;
@
text
@.\" $OpenBSD: usbd_transfer.9,v 1.6 2015/05/04 10:12:34 mpi Exp $
.\"
.\" Copyright (c) 2013 Martin Pieuchot
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 4 2015 $
.Dt USBD_TRANSFER 9
.Os
.Sh NAME
.Nm usbd_setup_xfer , usbd_transfer
.Nd submit USB data transfers
.Sh SYNOPSIS
.In dev/usb/usb.h
.In dev/usb/usbdi.h
.Ft void
.Fn usbd_setup_xfer "struct usbd_xfer *xfer" "struct usbd_pipe *pipe" \
 "void *priv" "void *buffer" "uint32_t length" "uint16_t flags" \
 "uint32_t timeout" "usbd_callback callback"
.Ft usbd_status
.Fn usbd_transfer "struct usbd_xfer *xfer"
.Sh DESCRIPTION
These functions provide a controller independent mechanism to perform USB
data transfers.
They make use of a pipe created by
.Xr usbd_open_pipe 9
or
.Xr usbd_open_pipe_intr 9 .
.Pp
The function
.Fn usbd_setup_xfer
is used to initialize the structure pointed to by
.Fa xfer ,
describing an individual transfer to submit.
It takes the following arguments:
.Bl -tag -width callback
.It Fa xfer
A pointer to an existing structure describing a transfer.
.It Fa pipe
A pointer to a pipe associated with the endpoint for the transfer.
.It Fa priv
A pointer to a private cookie untouched by the USB stack for reuse in the
.Fa callback .
.It Fa buffer
A pointer to the data buffer.
.It Fa length
The total length of the data to read or write.
.It Fa flags
The characteristics of the transfer:
.Bl -tag -width xxx -offset indent
.It Dv USBD_NO_COPY
Do not copy data between
.Fa buffer
and the DMA buffer.
.It Dv USBD_SYNCHRONOUS
Causes
.Fn usbd_transfer
to sleep until the I/O transfer is complete or the
.Fa timeout
expires.
.It Dv USBD_SHORT_XFER_OK
Do not report short reads, when the length of the data read is lower than
.Fa length ,
as errors.
.It Dv USBD_FORCE_SHORT_XFER
Submit a supplementary zero length packet at the end of the written data.
Some requests may need such packets in order to be properly terminated.
.It Dv USBD_CATCH
Used in conjunction with the
.Dv USBD_SYNCHRONOUS
flag to pass the
.Dv PCATCH
flag to
.Xr tsleep 9
in order to check for signals before and after sleeping.
.El
.It Fa timeout
Timeout of the transfer in milliseconds.
.It Fa callback
A routine invoked upon completion of the transfer whether successful or not.
.El
.Pp
The function
.Fn usbd_transfer
is used to submit the USB transfer described by
.Fa xfer
to the corresponding
.Xr usb 4
host controller to perform I/O with devices.
.Sh CONTEXT
.Fn usbd_setup_xfer
can be called during autoconf, from process context, or from interrupt context.
.Pp
.Fn usbd_transfer
can be called during autoconf, from process context, or from interrupt context
if
.Dv USBD_SYNCHRONOUS
has not been passed via
.Fa flags .
.Sh SEE ALSO
.Xr ehci 4 ,
.Xr ohci 4 ,
.Xr uhci 4 ,
.Xr usb 4 ,
.Xr tsleep 9 ,
.Xr usbd_open_pipe 9 ,
.Xr usbd_open_pipe_intr 9
@


1.6
log
@Document usbd_open_pipe(9) and friends, from Sean Levy with some tweaks.
@
text
@d1 1
a1 1
.\" $OpenBSD: usbd_transfer.9,v 1.5 2014/07/12 16:07:06 mpi Exp $
d17 1
a17 1
.Dd $Mdocdate: July 12 2014 $
d34 2
a35 1
data transfers.  They make use of a pipe created by
@


1.5
log
@Grammar, from stsp@@
@
text
@d1 1
a1 1
.\" $OpenBSD: usbd_transfer.9,v 1.4 2014/07/12 08:48:19 mpi Exp $
d34 4
a37 1
data transfers.
d114 3
a116 1
.Xr tsleep 9
@


1.4
log
@Improve the definition of USBD_FORCE_SHORT_XFER, prompted by a question
from stsp@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: usbd_transfer.9,v 1.3 2014/03/27 13:33:02 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 27 2014 $
d73 1
a73 1
Some requests may need such packet in order to be properly terminated.
@


1.3
log
@tweak previous; help/ok mpi
@
text
@d1 1
a1 1
.\" $OpenBSD: usbd_transfer.9,v 1.2 2014/03/26 14:25:35 mpi Exp $
d17 1
a17 1
.Dd $Mdocdate: March 26 2014 $
d72 2
a73 3
Submit a supplementary zero length packet at the end of the data if
.Fa length
is a multiple of the endpoint's wMaxPacketSize.
@


1.2
log
@Add a CONTEXT section.
@
text
@d1 1
a1 1
.\" $OpenBSD: usbd_transfer.9,v 1.1 2013/09/20 15:34:52 mpi Exp $
d17 1
a17 1
.Dd $Mdocdate: September 20 2013 $
d102 2
a103 1
can be called during autoconf, or from process context if
d105 2
a106 5
has been passed via
.Fa flags
when initializing
.Fa xfer ,
or during autoconf, from process context, or from interrupt context otherwise.
@


1.1
log
@Unify and document usbd_transfer(9).

Get rid of the badly named usbd_bulk_transfer() and usbd_intr_transfer()
they were two identical wrappers to submit a synchronous transfer.

Now all synchronous transfers are submited using usbd_setup_xfer(9) and
usbd_transfer(9) explicitly using the USBD_CATCH flag when signals must
be checked.

Previous version ok'd by mglocker@@, with subtle inputs from miod@@
@
text
@d1 1
a1 1
.\" $OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d97 12
a108 3
.Sh CODE REFERENCES
These functions are implemented in the file
.Pa sys/dev/usb/usbdi.c .
@

