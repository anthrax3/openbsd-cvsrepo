head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.24
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.22
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.20
	OPENBSD_5_0:1.4.0.18
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.16
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.14
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.10
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.12
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@.\" @;


1.5
date	2013.06.04.19.27.13;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.31.19.20.01;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.28.01.46.17;	author david;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.19.15.16.49;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.18.14.51.43;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Replace old-fashioned .Fd by new-fangled .In for #include lines.
Diff from Jan Klemkow <j dot klemkow at wemelug dot de> on tech@@.
No objection from jmc@@ against this type of change.
@
text
@.\"	$OpenBSD: sysctl_int.9,v 1.4 2007/05/31 19:20:01 jmc Exp $
.\"
.\" Copyright (c) 2006 Michael Shalayeff
.\" All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 31 2007 $
.Dt SYSCTL_INT 9
.Os
.Sh NAME
.Nm sysctl_int ,
.Nm sysctl_int_arr ,
.Nm sysctl_quad ,
.Nm sysctl_string ,
.Nm sysctl_tstring ,
.Nm sysctl_rdint ,
.Nm sysctl_rdquad ,
.Nm sysctl_rdstring ,
.Nm sysctl_rdstruct ,
.Nm sysctl_struct
.Nd kernel sysctl interface
.Sh SYNOPSIS
.In sys/types.h
.In sys/sysctl.h
.Ft int
.Fn sysctl_int "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "int *valp"
.Ft int
.Fn sysctl_int_arr "int **valpp" "int *name" "u_int namelen" "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen"
.Ft int
.Fn sysctl_quad "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "int64_t *valp"
.Ft int
.Fn sysctl_string "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "char *str" "int maxlen"
.Ft int
.Fn sysctl_tstring "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "char *str" "int maxlen"
.Ft int
.Fn sysctl_rdint "void *oldp" "size_t *oldlenp" "void *newp" "int val"
.Ft int
.Fn sysctl_rdquad "void *oldp" "size_t *oldlenp" "void *newp" "int64_t val"
.Ft int
.Fn sysctl_rdstring "void *oldp" "size_t *oldlenp" "void *newp" "const char *str"
.Ft int
.Fn sysctl_rdstruct "void *oldp" "size_t *oldlenp" "void *newp" "const void *sp" "int len"
.Ft int
.Fn sysctl_struct "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "void *sp" "int len"
.Sh DESCRIPTION
These functions and data structures aim to simplify and partially
implement operations for the kernel and user implementations of the
.Xr sysctl 3
interface.
A single
.Xr syscall 9
is used to request and modify kernel variables.
The
.Fa mib
argument is recursively scanned as an array of integers, either calling
further functions for parsing the rest of the MIB for nodes or operating
on kernel data for leaf nodes.
.Ss Data Structures
For each level of the MIB tree, the kernel header files provide a
.Xr cpp 1
macro initialiser for an array of the following data structures:
.Bd -literal -offset indent
struct ctlname {
	char	*ctl_name;	/* subsystem name */
	int	ctl_type;	/* type of name */
};
.Ed
.Pp
For example:
.Bd -literal -offset indent
#define CTL_NAMES { \e
	{ 0, 0 }, \e
	{ "kern", CTLTYPE_NODE }, \e
	{ "vm", CTLTYPE_NODE }, \e
	{ "fs", CTLTYPE_NODE }, \e
	{ "net", CTLTYPE_NODE }, \e
	{ "debug", CTLTYPE_NODE }, \e
	{ "hw", CTLTYPE_NODE }, \e
	{ "machdep", CTLTYPE_NODE }, \e
	{ "user", CTLTYPE_NODE }, \e
	{ "ddb", CTLTYPE_NODE }, \e
	{ "vfs", CTLTYPE_NODE }, \e
}
.Ed
.Pp
Each array element initialiser maps the correspondent MIB identifier.
The
.Fa ctl_name
field provides a string name.
The
.Fa ctl_type
field describes the identifier type, where possible values are:
.Pp
.Bl -tag -width CTLTYPE_STRING_ -compact -offset indent
.It CTLTYPE_NODE
The name is a node;
.It CTLTYPE_INT
The name describes an integer;
.It CTLTYPE_STRING
The name describes a string;
.It CTLTYPE_QUAD
The name describes a 64-bit number;
.It CTLTYPE_STRUCT
The name describes a structure.
.El
.Pp
For each of the types there are two functions provided to perform both
read and write or only a read operation on the identifier (see the
following subsection).
.Pp
These data structures are used by the
.Xr sysctl 8
program to provide mapping into MIB identifiers.
.Ss Functions
All of the functions perform a write provided that
.Ar newp
is not a
.Dv NULL
pointer and
.Ar newlen
specifies an appropriate data length.
All read-only versions of the functions return
.Dv EPERM
if a write operation is requested.
.Pp
The following helper functions are provided to aid operation on the
kernel data variables referenced by the leaf nodes in the MIBs:
.Bl -tag -width sysctl_
.It Fn sysctl_int "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "int *valp"
The variable referenced by
.Ar valp
is a 32-bit integer.
Read or write returning the previous value in the user memory location
pointed to by the
.Ar oldp
argument.
The value pointed to by
.Ar oldlenp
has to be no less than four.
.It Fn sysctl_rdint "void *oldp" "size_t *oldlenp" "void *newp" "int val"
A read-only version of the above.
.\" .It sysctl_int_arr
.It Fn sysctl_quad "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "int64_t *valp"
The variable referenced is a 64-bit integer.
Read or write returning the previous value in the user memory location
pointed to by the
.Ar oldp
argument.
The value pointed to by
.Ar oldlenp
has to be no less than eight.
.It Fn sysctl_rdquad "void *oldp" "size_t *oldlenp" "void *newp" "int64_t val"
A read-only version of the above.
.It Fn sysctl_string "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "char *str" "int maxlen"
The variable referenced by the
.Ar str
argument is a string of maximum length of
.Ar maxlen .
The old value is copied out into a user buffer pointed to by the
.Ar oldp
argument.
If there is not enough space to store it, an
.Dv ENOMEM
is returned.
If
.Ar newlen
is larger than
.Ar maxlen ,
an
.Dv EINVAL
error is returned.
.It Fn sysctl_tstring "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "char *str" "int maxlen"
A version of the above that truncates the old value that does not fit
into the buffer provided by
.Ar oldp
instead of returning
.Dv ENOMEM .
.It Fn sysctl_rdstring "void *oldp" "size_t *oldlenp" "void *newp" "const char *str"
A read-only version of
.Fn sysctl_string .
.It Fn sysctl_struct "void *oldp" "size_t *oldlenp" "void *newp" "size_t newlen" "void *sp" "int len"
Assume the area pointed to by the
.Ar sp
argument is an opaque array of bytes of size
.Ar len .
Old and new length checks are performed and data is copied in and/or out.
.It Fn sysctl_rdstruct "void *oldp" "size_t *oldlenp" "void *newp" "const void *sp" "int len"
A read-only version of the above.
.El
.Sh SEE ALSO
.Xr sysctl 3 ,
.Xr sysctl.conf 5 ,
.Xr sysctl 8 ,
.Xr syscall 9
.Sh HISTORY
These functions first appeared in
.Bx 4.4 .
.\" .Sh AUTHORS
@


1.4
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sysctl_int.9,v 1.3 2007/02/28 01:46:17 david Exp $
d18 1
a18 1
.Dd $Mdocdate$
d34 2
a35 2
.Fd #include <sys/types.h>
.Fd #include <sys/sysctl.h>
@


1.3
log
@various spelling corrections
@
text
@d1 1
a1 1
.\"	$OpenBSD: sysctl_int.9,v 1.2 2006/01/19 15:16:49 jmc Exp $
d18 1
a18 1
.Dd January 20, 2006
@


1.2
log
@tweaks; ok mickey
@
text
@d1 1
a1 1
.\"	$OpenBSD: sysctl_int.9,v 1.1 2006/01/18 14:51:43 mickey Exp $
d193 1
a193 1
Aassume the area pointed to by the
@


1.1
log
@internal sysctl functions and etc
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d57 5
a61 3
These functions and data structures are aimed to simplify and partially
implement oprations for kernel and user implementation of sysctl interface.
Single
d65 3
a67 3
.Nm mib
argument is recursively scanned as an array of integers either calling
futher function for parsing the rest of the MIB for nodes or operating
d70 2
a71 2
For each level of MIB tree kernel header files provide a
.Nm cpp 1
d82 12
a93 12
#define CTL_NAMES { \\
	{ 0, 0 }, \\
	{ "kern", CTLTYPE_NODE }, \\
	{ "vm", CTLTYPE_NODE }, \\
	{ "fs", CTLTYPE_NODE }, \\
	{ "net", CTLTYPE_NODE }, \\
	{ "debug", CTLTYPE_NODE }, \\
	{ "hw", CTLTYPE_NODE }, \\
	{ "machdep", CTLTYPE_NODE }, \\
	{ "user", CTLTYPE_NODE }, \\
	{ "ddb", CTLTYPE_NODE }, \\
	{ "vfs", CTLTYPE_NODE }, \\
d99 1
a99 1
.Nm ctl_name
d102 3
a104 2
.Nm ctl_type
field describes the identifier type where possible values are:
d117 1
d119 1
a119 1
read and write or only a read operations on the identifier (see the
d126 1
a126 1
All of the functions perform a write shall
d128 2
a129 2
argument be not
.Nm NULL
d132 1
a132 1
be specifies appropriate data length.
d134 2
a135 2
.Nm EPERM
shall a write operation be requested.
d137 1
a137 1
The following helper functions are provided to aid operating on the
d141 1
a141 1
The variable referenced by the
d144 2
a145 2
Read or write returning previous value in the user memory location
pointed by the
d148 1
a148 1
The value pointed to by the
d150 1
a150 1
has to be no less then four.
d156 2
a157 2
Read or write returning previous value in the user memory location
pointed by the
d160 1
a160 1
The value pointed to by the
d162 1
a162 1
has to be no less then eight.
d170 1
a170 1
Copy out old value into user buffer pointed to by the
d173 2
a174 2
If there is not enough space to store that a
.Nm ENOMEM
d178 4
a181 4
larger than
.Ar maxlen
a
.Nm EINVAL
d185 1
a185 1
into the buffer provided byt
d188 1
a188 1
.Nm ENOMEM .
d190 2
a191 2
A read-only version of the
.Nm sysctl_string .
d195 1
a195 1
argument be an opaque array of byte of size
@

