head	1.42;
access;
symbols
	OPENBSD_6_2:1.42.0.2
	OPENBSD_6_2_BASE:1.42
	OPENBSD_6_1:1.39.0.4
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.34.0.6
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.33.0.10
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.8
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.6
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.32.0.4
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.32.0.2
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.30.0.2
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.10
	OPENBSD_5_0:1.29.0.8
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.6
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.4
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.28.0.10
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.6
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.4
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.28.0.2
	OPENBSD_4_3_BASE:1.28
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.26.0.2
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.25.0.14
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.12
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.10
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.25.0.8
	OPENBSD_3_7_BASE:1.25
	OPENBSD_3_6:1.25.0.6
	OPENBSD_3_6_BASE:1.25
	OPENBSD_3_5:1.25.0.4
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.24.0.2
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.23.0.2
	OPENBSD_3_2_BASE:1.23
	OPENBSD_3_1:1.22.0.4
	OPENBSD_3_1_BASE:1.22
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9:1.19.0.2
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_8:1.17.0.2
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10;
locks; strict;
comment	@.\" @;


1.42
date	2017.04.25.13.52.08;	author jmc;	state Exp;
branches;
next	1.41;
commitid	fimt1lxWODpA5bhG;

1.41
date	2017.04.15.18.45.15;	author jmc;	state Exp;
branches;
next	1.40;
commitid	HAcAgUsPmRbLPmtr;

1.40
date	2017.04.06.17.36.00;	author jmc;	state Exp;
branches;
next	1.39;
commitid	n7OUOJrg0tbMesJv;

1.39
date	2017.03.27.17.02.15;	author jmc;	state Exp;
branches;
next	1.38;
commitid	4EenAPKm6TaGoHnM;

1.38
date	2017.03.22.19.57.55;	author jmc;	state Exp;
branches;
next	1.37;
commitid	tOI6zvTRt4SpnCVQ;

1.37
date	2017.03.22.17.19.32;	author bluhm;	state Exp;
branches;
next	1.36;
commitid	B7F4cnm21wBJCw0X;

1.36
date	2017.03.22.07.06.23;	author jmc;	state Exp;
branches;
next	1.35;
commitid	ZX3xv0LXqHzJ8cNs;

1.35
date	2017.03.20.23.52.05;	author jmc;	state Exp;
branches;
next	1.34;
commitid	atxF0Pt0TB7OD0VP;

1.34
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.33;
commitid	PeV7Ql0T6htfMjhP;

1.33
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.32;

1.32
date	2012.08.22.18.27.00;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2012.08.12.17.01.35;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2012.06.21.19.57.14;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2009.12.13.15.48.21;	author sobrado;	state Exp;
branches;
next	1.28;

1.28
date	2008.01.24.22.46.58;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.31.19.19.50;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2007.01.22.06.12.16;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2003.08.08.09.51.53;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2003.01.18.23.53.49;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2002.06.07.17.33.14;	author itojun;	state Exp;
branches;
next	1.22;

1.22
date	2001.06.24.19.42.23;	author itojun;	state Exp;
branches;
next	1.21;

1.21
date	2001.06.23.05.57.05;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.23.02.33.12;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2000.12.21.21.01.16;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.24.10.25.12;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	2000.09.17.00.53.35;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.15.14.24.12;	author itojun;	state Exp;
branches;
next	1.15;

1.15
date	2000.06.15.08.11.47;	author itojun;	state Exp;
branches;
next	1.14;

1.14
date	2000.06.14.16.30.44;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2000.06.14.16.09.15;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2000.06.12.11.15.37;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.28.18.27.15;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.17.05.00.49;	author itojun;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.03.21.19.36;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.28.23.46.31;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.22.08.15.02;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.19.17.31.41;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.06.02.21.37;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.06.02.17.13;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	99.12.25.02.10.37;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	99.12.19.03.14.27;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	99.12.08.13.58.42;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.42
log
@some ip6 setup notes; help/ok bluhm
@
text
@.\"	$OpenBSD: inet6.4,v 1.41 2017/04/15 18:45:15 jmc Exp $
.\"	$KAME: inet6.4,v 1.19 2000/11/24 10:13:18 itojun Exp $
.\"
.\" Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the project nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: April 15 2017 $
.Dt INET6 4
.Os
.Sh NAME
.Nm inet6
.Nd Internet protocol version 6 family
.Sh SYNOPSIS
.In sys/types.h
.In netinet/in.h
.Sh DESCRIPTION
The Internet Protocol version 6 family
is an updated version of the Internet Protocol version 4 family.
It comprises Internet Protocol version 6
.Pq IPv6 ,
Internet Control Message Protocol version 6
.Pq ICMPv6 ,
Transmission Control Protocol
.Pq TCP ,
and User Datagram Protocol
.Pq UDP .
.Xr tcp 4
is used to support the
.Dv SOCK_STREAM
abstraction while
.Xr udp 4
is used to support the
.Dv SOCK_DGRAM
abstraction.
A raw interface to IPv6 is available by creating an Internet socket of type
.Dv SOCK_RAW .
The ICMPv6 message protocol is accessible from a raw socket.
.Pp
IPv6 addresses are 128-bit quantities,
stored in network standard byteorder.
The include file
.In netinet/in.h
defines this address
as a discriminated union.
.Pp
Sockets bound to the
.Nm
family utilize the following addressing structure:
.Bd -literal -offset indent
struct sockaddr_in6 {
	u_int8_t	sin6_len;
	sa_family_t	sin6_family;
	in_port_t	sin6_port;
	u_int32_t	sin6_flowinfo;
	struct in6_addr	sin6_addr;
	u_int32_t	sin6_scope_id;
};
.Ed
.Pp
Sockets may be created with the local address
.Dq ::
(which is equal to IPv6 address
.Dv 0:0:0:0:0:0:0:0 )
to effect
.Dq wildcard
matching on incoming messages.
.Pp
For security reasons,
.Ox
does not route IPv4 traffic to an
.Dv AF_INET6
socket,
and does not support IPv4 mapped addresses,
where IPv4 traffic is seen as if it comes from an IPv6 address like
.Dq ::ffff:10.1.1.1 .
Where both IPv4 and IPv6 traffic need to be accepted,
bind and listen on two sockets.
.Pp
Global addresses utilise the first 48 bits of the address
for the routing prefix.
The next 16 bits designate the subnet,
and the final 64 bits are used as a host identifier.
.Pp
The IPv6 specification also defines link-local addresses,
which are scoped.
A scoped address is ambiguous to the kernel
if it is specified without a scope identifier.
To manipulate scoped addresses properly from userland,
programs must use the advanced API defined in RFC 3542.
A compact description of the advanced API is available in
.Xr ip6 4 .
If scoped addresses are specified without explicit scope,
the kernel may raise an error.
.Pp
KAME supports an extended numeric IPv6 address notation
for link-local addresses,
such as
.Dq fe80::1%de0
to specify
.Dq fe80::1
on the
.Dq de0
interface.
This notation is supported by
.Xr getaddrinfo 3
and
.Xr getnameinfo 3 ,
as well as userland programs such as
.Xr telnet 1
and
.Xr ftp 1 .
.Pp
Scoped addresses are handled specially in the kernel.
In kernel structures like routing tables or interface structures,
scoped addresses have their interface index embedded into the address.
Therefore
the address on some kernel structures is not the same as that on the wire.
The embedded index will be visible on
.Dv PF_ROUTE
sockets, kernel memory access via
.Xr kvm 3 ,
and some other occasions.
HOWEVER, users should never use the embedded form.
.Sh IPv6 SETUP
Generally speaking,
IPv6 connectivity is achieved in a fashion similar to that for IPv4.
For native IPv6 setup,
routers attach to the network either manually or using
.Cm autoconf
to connect to an ISP;
hosts receive an address prefix from a router advertisement daemon such as
.Xr rtadvd 8
and use
.Cm autoconf
for stateless address configuration (SLAAC).
For setups which tunnel IPv6 over IPv4,
see
.Xr gif 4 .
.Pp
The
.Sx INET6
and
.Sx TUNNEL
sections of
.Xr ifconfig 8
contain information relevant to IPv6 setups;
settings can be made permanent using
.Xr hostname.if 5
files.
Routers need to set the
.Va net.inet6.ip6.forwarding
.Xr sysctl 3 .
.Sh SEE ALSO
.Xr socket 2 ,
.Xr icmp6 4 ,
.Xr ip6 4 ,
.Xr tcp 4 ,
.Xr udp 4 ,
.Xr hostname.if 5 ,
.Xr ifconfig 8 ,
.Xr rtadvd 8
.Sh STANDARDS
.Rs
.%A Tatsuya Jinmei
.%A Atsushi Onoe
.%D June 2000
.%N draft-ietf-ipngwg-scopedaddr-format-02.txt
.%O work in progress material
.%R internet draft
.%T "An Extension of Format for IPv6 Scoped Addresses"
.Re
.Pp
.Rs
.%A R. Gilligan
.%A S. Thomson
.%A J. Bound
.%A J. McCann
.%A W. Stevens
.%D February 2003
.%R RFC 3493
.%T Basic Socket Interface Extensions for Ipv6
.Re
.Pp
.Rs
.%A W. Stevens
.%A M. Thomas
.%A E. Nordmark
.%A T. Jinmei
.%D May 2003
.%R RFC 3542
.%T Advanced Sockets Application Programming Interface (API) for IPv6
.Re
.Sh HISTORY
The implementation described herein appeared in WIDE/KAME project.
.Sh CAVEATS
It is advisable to explicitly reject all packets to your network
not used by any of your interface prefixes.
Otherwise packets that have a destination address belonging to your network
may be routed back to your provider via the default route.
Set a reject route for your assigned prefix:
.Pp
.Dl # route add -net 2001:db8::/48 ::1 -reject
@


1.41
log
@more streamlining, with help from bluhm;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.40 2017/04/06 17:36:00 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: April 6 2017 $
d148 29
a178 1
.Xr sysctl 3 ,
d182 4
a185 1
.Xr udp 4
@


1.40
log
@shuffle for a saner read; help/ok bluhm
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.39 2017/03/27 17:02:15 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: March 27 2017 $
d41 5
a45 18
The
.Nm
family is an updated version of the
.Xr inet 4
family.
While
.Xr inet 4
implements Internet Protocol version 4,
.Nm
implements Internet Protocol version 6.
.Pp
The
.Nm
family is comprised of the
Internet Protocol version 6
.Pq IPv6
network protocol, Internet Control
Message Protocol version 6
d51 2
a52 1
TCP is used to support the
d54 3
a56 1
abstraction while UDP is used to support the
a58 4
Note that TCP and UDP are common to
.Xr inet 4
and
.Nm inet6 .
d86 2
a87 4
.Po
which is equal to IPv6 address
.Dv 0:0:0:0:0:0:0:0
.Pc
d99 1
a99 1
.Li ::ffff:10.1.1.1 .
a148 1
.Xr ioctl 2 ,
a151 1
.Xr intro 4 ,
@


1.39
log
@various fixes to bring this page up to date a little;
help/ok bluhm
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.38 2017/03/22 19:57:55 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: March 22 2017 $
a76 18
For security reasons,
.Ox
does not route IPv4 traffic to an
.Dv AF_INET6
socket,
and does not support IPv4 mapped addresses,
where IPv4 traffic is seen as if it comes from an IPv6 address like
.Li ::ffff:10.1.1.1 .
Where both IPv4 and IPv6 traffic need to be accepted, listen on two sockets.
.Pp
It is also advisable to explicitly reject all packets to your network
not used by any of your interface prefixes.
Otherwise packets that have a destination address belonging to your network
may be routed back to your provider via the default route.
Set a reject route for your assigned prefix:
.Pp
.Dl # route add -net 2001:db8::/48 ::1 -reject
.Pp
d108 11
d206 8
@


1.38
log
@kill Tn;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.37 2017/03/22 17:19:32 bluhm Exp $
a75 22
.\" .Pp
.\" The 128-bit IPv6 address contains both network and host parts.
.\" However, direct examination of addresses is discouraged.
.\" For those programs which absolutely need to break addresses
.\" into their component parts, the following
.\" .Xr ioctl 2
.\" commands are provided for a datagram socket in the
.\" .Nm
.\" domain; they have the same form as the
.\" .Dv SIOCIFADDR
.\" command (see
.\" .Xr intro 4 ) .
.\" .Pp
.\" .Bl -tag -width SIOCSIFNETMASK
.\" .It Dv SIOCSIFNETMASK
.\" Set interface network mask.
.\" The network mask defines the network part of the address;
.\" if it contains more of the address than the address type would indicate,
.\" then subnets are in use.
.\" .It Dv SIOCGIFNETMASK
.\" Get interface network mask.
.\" .El
d94 3
a96 2
.Sh ADDRESSING
IPv6 addresses are 16 byte quantities, stored in network standard byteorder.
d117 1
a117 1
.Dq Dv ::
d126 8
a133 3
The IPv6 specification defines scoped address,
like link-local addresses.
A scoped address is ambiguous to the kernel,
d142 1
a142 1
KAME implementation supports extended numeric IPv6 address notation
d144 2
a145 2
like
.Dq Li fe80::1%de0
d147 5
a151 7
.Do
.Li fe80::1
on
.Li de0
interface
.Dc .
The notation is supported by
d154 2
a155 2
.Xr getnameinfo 3 .
Some normal userland programs, such as
d157 2
a158 8
or
.Xr ftp 1 ,
are able to use the notation.
With special programs
like
.Xr ping6 8 ,
an outgoing interface can be specified with an extra command line option
to disambiguate scoped addresses.
d161 5
a165 5
In the kernel structures like routing tables or interface structure,
scoped addresses will have their interface index embedded into the address.
Therefore,
the address on some of the kernel structure is not the same as that on the wire.
The embedded index will become visible on
d167 2
a168 2
socket, kernel memory accesses via
.Xr kvm 3
a212 10
.Sh BUGS
The IPv6 support is subject to change as the Internet protocols develop.
Users should not depend on details of the current implementation,
but rather the services exported.
.Pp
.Dq Version independent
code should be implemented as much as possible in order to support both
.Xr inet 4
and
.Nm inet6 .
@


1.37
log
@Fix syntax of example route command.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.36 2017/03/22 07:06:23 jmc Exp $
d56 1
a56 1
.Pq Tn IPv6
d59 1
a59 1
.Pq Tn ICMPv6 ,
d61 1
a61 1
.Pq Tn TCP ,
d63 2
a64 3
.Pq Tn UDP .
.Tn TCP
is used to support the
d66 1
a66 3
abstraction while
.Tn UDP
is used to support the
d69 1
a69 5
Note that
.Tn TCP
and
.Tn UDP
are common to
d73 1
a73 4
A raw interface to
.Tn IPv6
is available
by creating an Internet socket of type
d75 1
a75 3
The
.Tn ICMPv6
message protocol is accessible from a raw socket.
@


1.36
log
@zap some historical notes and an out of date url;
help/ok bluhm
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.35 2017/03/20 23:52:05 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: March 20 2017 $
d127 1
a127 1
.Dl # route -add net 2001:db8::/48 ::1 -reject
@


1.35
log
@some notes from bluhm about setting a reject route;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.34 2015/09/10 17:55:21 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: September 10 2015 $
d160 1
a160 1
like link-local or site-local address.
a168 2
Note that scoped addresses are not for daily use at this moment,
both from a specification and an implementation point of view.
a206 6
For details please consult
.Lk http://www.kame.net/dev/cvsweb2.cgi/kame/IMPLEMENTATION .
Note that the above URL describes the situation with the latest KAME tree,
not the
.Ox
tree.
@


1.34
log
@use .In rather than .Fd #include
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.33 2014/01/21 03:15:46 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: January 21 2014 $
d120 8
@


1.33
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.32 2012/08/22 18:27:00 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: August 22 2012 $
d38 2
a39 2
.Fd #include <sys/types.h>
.Fd #include <netinet/in.h>
@


1.32
log
@- remove the text describing rfc 2553: that rfc has been replaced, and
it talks about things not even relevant to openbsd

- document there's no ipv4 mapped addressing, as requested by todd

- rearrange text more logically

- update rfc reference
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.31 2012/08/12 17:01:35 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: August 12 2012 $
d123 1
a123 1
.Aq Pa netinet/in.h
@


1.31
log
@Use .Lk for HTTP hyperlinks, not .Pa.
Most of the patch from Arto Jonsson <ajonsson at kapsi dot fi>.
jmc@@ agrees in principle that .Lk is the right macro to use.

While here, update a few broken links,
and add missing markup at a few places.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.30 2012/06/21 19:57:14 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: June 21 2012 $
d52 1
d54 2
a55 2
is a collection of protocols layered atop the
.Em Internet Protocol version 6
d57 21
a77 6
transport layer, and utilizing the IPv6 address format.
The
.Nm
family provides protocol support for the
.Dv SOCK_STREAM ,
.Dv SOCK_DGRAM ,
d79 2
a80 4
.Dv SOCK_RAW
socket types; the
.Dv SOCK_RAW
interface provides access to the
d82 38
a119 1
protocol.
a206 139
.Sh PROTOCOLS
The
.Nm
family is comprised of the
.Tn IPv6
network protocol, Internet Control
Message Protocol version 6
.Pq Tn ICMPv6 ,
Transmission Control Protocol
.Pq Tn TCP ,
and User Datagram Protocol
.Pq Tn UDP .
.Tn TCP
is used to support the
.Dv SOCK_STREAM
abstraction while
.Tn UDP
is used to support the
.Dv SOCK_DGRAM
abstraction.
Note that
.Tn TCP
and
.Tn UDP
are common to
.Xr inet 4
and
.Nm inet6 .
A raw interface to
.Tn IPv6
is available
by creating an Internet socket of type
.Dv SOCK_RAW .
The
.Tn ICMPv6
message protocol is accessible from a raw socket.
.\" .Pp
.\" The 128-bit IPv6 address contains both network and host parts.
.\" However, direct examination of addresses is discouraged.
.\" For those programs which absolutely need to break addresses
.\" into their component parts, the following
.\" .Xr ioctl 2
.\" commands are provided for a datagram socket in the
.\" .Nm
.\" domain; they have the same form as the
.\" .Dv SIOCIFADDR
.\" command (see
.\" .Xr intro 4 ) .
.\" .Pp
.\" .Bl -tag -width SIOCSIFNETMASK
.\" .It Dv SIOCSIFNETMASK
.\" Set interface network mask.
.\" The network mask defines the network part of the address;
.\" if it contains more of the address than the address type would indicate,
.\" then subnets are in use.
.\" .It Dv SIOCGIFNETMASK
.\" Get interface network mask.
.\" .El
.Ss Interaction between IPv4/v6 sockets
.Ox
does not route IPv4 traffic to an
.Dv AF_INET6
socket,
for security reasons.
If both IPv4 and IPv6 traffic need to be accepted, listen on two sockets.
.Pp
The behavior of
.Dv AF_INET6
TCP/UDP socket is documented in RFC 2553.
Basically, it says the following:
.Pp
.Bl -bullet -compact
.It
A specific bind to an
.Dv AF_INET6
socket
.Po
.Xr bind 2
with address specified
.Pc
should accept IPv6 traffic to that address only.
.It
If a wildcard bind is performed on an
.Dv AF_INET6
socket
.Po
.Xr bind 2
to IPv6 address
.Li ::
.Pc ,
and there is no wildcard bind
.Dv AF_INET
socket on that TCP/UDP port, IPv6 traffic as well as IPv4 traffic
should be routed to that
.Dv AF_INET6
socket.
IPv4 traffic should be seen as if it came from IPv6 address like
.Li ::ffff:10.1.1.1 .
This is called IPv4 mapped address.
.It
If there are both wildcard bind
.Dv AF_INET
socket and wildcard bind
.Dv AF_INET6
socket on one TCP/UDP port, they should behave separately.
IPv4 traffic should be routed to
.Dv AF_INET
socket and IPv6 should be routed to
.Dv AF_INET6
socket.
.El
.Pp
However, RFC 2553 does not define the constraint between the order of
.Xr bind 2 ,
nor how IPv4 TCP/UDP port numbers and IPv6 TCP/UDP port numbers
relate to each other
.Po
should they be integrated or separated
.Pc .
Implemented behavior is very different from kernel to kernel.
Therefore, it is unwise to rely too much upon the behavior of
.Dv AF_INET6
wildcard bind socket.
It is recommended to listen to two sockets, one for
.Dv AF_INET
and another for
.Dv AF_INET6 ,
if both IPv4 and IPv6 traffic are to be accepted.
.Pp
It should also be noted that
malicious parties can take advantage of the complexity presented above,
and are able to bypass access control,
if the target node routes IPv4 traffic to
.Dv AF_INET6
socket.
Caution should be taken when handling connections
from IPv4 mapped addresses to
.Dv AF_INET6
sockets.
a219 2
.%T "An Extension of Format for IPv6 Scoped Addresses"
.%R internet draft
d223 23
a247 3
The
.Nm
protocol interface is defined in RFC 2553 and RFC 3542.
@


1.30
log
@rfc 3542 obsoletes rfc 2292; ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.29 2009/12/13 15:48:21 sobrado Exp $
d31 1
a31 1
.Dd $Mdocdate: December 13 2009 $
d151 1
a151 1
.Pa http://www.kame.net/dev/cvsweb2.cgi/kame/IMPLEMENTATION .
@


1.29
log
@kill fifty-eight commented out lines from the manual page code
leaving the ioctl description by now, until we see if it is needed
(claudio@@ has noted that the ioctl description is a copy from
inet(4), so it would need to be reworked).

ok claudio@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.28 2008/01/24 22:46:58 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: January 24 2008 $
d105 1
a105 1
programs must use the advanced API defined in RFC 2292.
d317 1
a317 1
protocol interface is defined in RFC 2553 and RFC 2292.
@


1.28
log
@-r1.23 introduced an error in signposting, as spotted by Stefan Sperling;
fix that now;

while i'm here, the text read very badly, so i've redone the paragraph;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.27 2007/05/31 19:19:50 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
a213 58
.\" .Sh ROUTING
.\" The current implementation of Internet protocols includes some routing-table
.\" adaptations to provide enhanced caching of certain end-to-end
.\" information necessary for Transaction TCP and Path MTU Discovery.  The
.\" following changes are the most significant:
.\" .Bl -enum
.\" .It
.\" All IP routes, except those with the
.\" .Dv RTF_CLONING
.\" flag and those to multicast destinations, have the
.\" .Dv RTF_PRCLONING
.\" flag forcibly enabled (they are thus said to be
.\" .Dq "protocol cloning" . )
.\" .It
.\" When the last reference to an IP route is dropped, the route is
.\" examined to determine if it was created by cloning such a route.  If
.\" this is the case, the
.\" .Dv RTF_PROTO3
.\" flag is turned on, and the expiration timer is initialized to go off
.\" in net.inet.ip.rtexpire seconds.  If such a route is re-referenced,
.\" the flag and expiration timer are reset.
.\" .It
.\" A kernel timeout runs once every ten minutes, or sooner if there are
.\" soon-to-expire routes in the kernel routing table, and deletes the
.\" expired routes.
.\" .El
.\" .Pp
.\" A dynamic process is in place to modify the value of
.\" net.inet.ip.rtexpire if the number of cached routes grows too large.
.\" If after an expiration run there are still more than
.\" net.inet.ip.rtmaxcache unreferenced routes remaining, the rtexpire
.\" value is multiplied by 3/4, and any routes which have longer
.\" expiration times have those times adjusted.  This process is damped
.\" somewhat by specification of a minimum rtexpire value
.\" (net.inet.ip.rtminexpire), and by restricting the reduction to once in
.\" a ten-minute period.
.\" .Pp
.\" If some external process deletes the original route from which a
.\" protocol-cloned route was generated, the ``child route'' is deleted.
.\" (This is actually a generic mechanism in the routing code support for
.\" protocol-requested cloning.)
.\" .Pp
.\" No attempt is made to manage routes which were not created by protocol
.\" cloning; these are assumed to be static, under the management of an
.\" external routing process, or under the management of a link layer
.\" (e.g.,
.\" .Tn ARP
.\" for Ethernets).
.\" .Pp
.\" Only certain types of network activity will result in the cloning of a
.\" route using this mechanism.  Specifically, those protocols (such as
.\" .Tn TCP
.\" and
.\" .Tn UDP )
.\" which themselves cache a long-lasting reference to route for a destination
.\" will trigger the mechanism; whereas raw
.\" .Tn IP
.\" packets, whether locally-generated or forwarded, will not.
@


1.27
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.26 2007/01/22 06:12:16 miod Exp $
d31 1
a31 1
.Dd $Mdocdate$
d276 3
a278 4
socket.
The particular behavior in RFC 2553 is intentionally omitted for security
reasons presented above.
If both IPv4 and IPv6 traffic need to be accepted, listen to two sockets.
@


1.26
log
@Fix KAME cvsweb urls
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.25 2003/08/08 09:51:53 jmc Exp $
d31 1
a31 1
.Dd January 29, 1999
@


1.25
log
@refer to RFCs consistently (RFC XXXX);
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.24 2003/01/18 23:53:49 deraadt Exp $
d151 1
a151 1
.Pa http://www.kame.net/dev/cvsweb.cgi/kame/IMPLEMENTATION .
@


1.24
log
@inet6 fixes from jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.23 2002/06/07 17:33:14 itojun Exp $
d105 1
a105 1
programs must use the advanced API defined in RFC2292.
d277 1
a277 1
The particular behavior in RFC2553 is intentionally omitted for security
d283 1
a283 1
TCP/UDP socket is documented in RFC2553.
d327 1
a327 1
However, RFC2553 does not define the constraint between the order of
d376 1
a376 1
protocol interface is defined in RFC2553 and RFC2292.
@


1.23
log
@reorder paragraph for clarity
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.22 2001/06/24 19:42:23 itojun Exp $
d43 1
a43 1
family is an updated version of
d100 1
a100 1
IPv6 specification defines scoped address,
d103 4
a106 4
if it is specified without scope identifier.
To manipulate scoped addresses properly from the userland,
programs must use advanced API defined in RFC2292.
Compact description on the advanced API is available in
d109 1
a109 1
the kernel may raise error.
d111 1
a111 1
both from specification and implementation point of view.
d128 1
a128 1
Some of normal userland programs, such as
d136 1
a136 1
you can specify outgoing interface by extra command line option
d141 1
a141 1
scoped addresses will have its interface index embedded into the address.
d226 1
a226 1
.\" .Dq "protocol cloning" ).
d274 1
a274 1
does not route IPv4 traffic to
d279 1
a279 1
If you need to accept both IPv4 and IPv6 traffic, listen to two sockets.
d284 2
a285 1
Basically, it says as follows:
d288 1
a288 1
Specific bind on
d297 1
a297 2
If you perform wildcard bind
on
d329 2
a330 2
nor how IPv4 TCP/UDP port number and IPv6 TCP/UDP port number
relate each other
d334 1
a334 1
Implemented behavior is very different across kernel to kernel.
d342 1
a342 1
when you would like to accept both IPv4 and IPv6 traffic.
d350 2
a351 2
Users are advised to take caution handling connections
from IPv4 mapped address to
d376 1
a376 1
protocol interface are defined in RFC2553 and RFC2292.
d383 2
a384 3
Users are suggested to implement
.Dq version independent
code as much as possible, as you will need to support both
@


1.22
log
@update reference to sys/netinet6/IMPLEMENTATION
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.21 2001/06/23 05:57:05 deraadt Exp $
d273 8
a353 9
.Pp
Because of the above,
.Ox
does not route IPv4 traffic to
.Dv AF_INET6
socket.
The particular behavior in RFC2553 is intentionally omitted for security
reasons presented above.
If you need to accept both IPv4 and IPv6 traffic, listen to two sockets.
@


1.21
log
@ok, tmac is now fixed
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.20 2001/06/23 02:33:12 deraadt Exp $
d151 5
a155 1
.Pa sys/netinet6/IMPLEMENTATION .
@


1.20
log
@join .%A entries; most by bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.19 2000/12/21 21:01:16 aaron Exp $
d362 2
a363 1
.%A Tatsuya Jinmei and Atsushi Onoe
@


1.19
log
@Various repairs, $Id$ tags added, etc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.18 2000/11/24 10:25:12 itojun Exp $
d362 1
a362 2
.%A Tatsuya Jinmei
.%A Atsushi Onoe
@


1.18
log
@sync with recent kame document.
- on AF_INET6, :: does not mean local node.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.17 2000/09/17 00:53:35 aaron Exp $
d60 2
a61 1
.Dv SOCK_STREAM , SOCK_DGRAM ,
@


1.17
log
@Zap some unwanted trailing whitespace.
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6.4,v 1.16 2000/06/15 14:24:12 itojun Exp $
.\"	$KAME: inet6.4,v 1.15 2000/06/15 14:21:50 itojun Exp $
d77 1
a77 1
family utilize the following addressing structure,
a97 13
The address in a
.Xr connect 2
or
.Xr sendto 2
call may be given as
.Dq Dv ::
to mean
.Dq this host .
.Dq Dv ::
can be obtained by setting
.Dv sin6_addr
field into 0, or by using the address contained in variable
.Dv in6addr_any .
d365 2
a366 2
.%D March 2000
.%N draft-ietf-ipngwg-scopedaddr-format-01.txt
@


1.16
log
@typo.  ftp(8) -> ftp(1)
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.15 2000/06/15 08:11:47 itojun Exp $
d281 1
a281 1
The behavior of 
@


1.15
log
@typo
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6.4,v 1.14 2000/06/14 16:30:44 itojun Exp $
.\"	$KAME: inet6.4,v 1.14 2000/06/15 08:10:20 itojun Exp $
d143 1
a143 1
.Xr ftp 8 ,
@


1.14
log
@explicitly recommend listening to two sockets.
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6.4,v 1.13 2000/06/14 16:09:15 itojun Exp $
.\"	$KAME: inet6.4,v 1.13 2000/06/14 16:28:16 itojun Exp $
d280 1
a280 1
.Ss Interation between IPv4/v6 sockets
@


1.13
log
@move IPv4 mapped issue from inetd.8.  some clarifications.
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6.4,v 1.12 2000/06/12 11:15:37 itojun Exp $
.\"	$KAME: inet6.4,v 1.12 2000/06/14 15:52:25 itojun Exp $
d338 5
d360 3
@


1.12
log
@sync with latest kame.  reorder sections, s/CAVEAT/BUGS/.
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6.4,v 1.11 2000/05/28 18:27:15 deraadt Exp $
.\"	$KAME: inet6.4,v 1.10 2000/06/12 10:27:23 itojun Exp $
d280 75
@


1.11
log
@typo; maurice@@ivo.ig.net
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6.4,v 1.10 2000/04/17 05:00:49 itojun Exp $
.\"	$KAME: inet6.4,v 1.9 2000/04/14 09:30:11 itojun Exp $
a288 11
.Sh CAVEAT
The IPv6 support is subject to change as the Internet protocols develop.
Users should not depend on details of the current implementation,
but rather the services exported.
.Pp
Users are suggested to implement
.Dq version independent
code as much as possible, as you will need to support both
.Xr inet 4
and
.Nm inet6 .
d304 11
@


1.10
log
@correct untermintaed sentence.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.9 2000/04/03 21:19:36 aaron Exp $
d152 1
a152 1
In the kenrel structures like routing tables or interface structure,
@


1.9
log
@Remove trailing whitespace.
@
text
@d1 2
a2 1
.\"	$OpenBSD: inet6.4,v 1.8 2000/03/28 23:46:31 deraadt Exp $
a30 2
.\"	KAME Id: inet6.4,v 1.7 2000/03/22 07:59:10 jinmei Exp
.\"
d69 1
a69 1
IPv6 addresses are 16 byte quantities, stored in network standard format
@


1.8
log
@bye bye ttcp menion
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.7 2000/03/22 08:15:02 itojun Exp $
d5 1
a5 1
.\" 
d17 1
a17 1
.\" 
d98 1
a98 1
matching on incoming messages. 
d115 1
a115 1
A scoped address is ambiguous to the kernel, 
d159 1
a159 1
socket, kernel memory accesses via 
@


1.7
log
@correct example for IPv6 scoped address.  refer latest draft.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.6 2000/02/19 17:31:41 deraadt Exp $
a288 1
.Xr ttcp 4 ,
@


1.6
log
@use more modern types
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.5 2000/01/06 02:21:37 itojun Exp $
d30 1
a30 1
.\"	KAME Id: inet6.4,v 1.4 2000/01/06 02:20:16 itojun Exp
d129 1
a129 1
.Dq Li fe80::1@@de0
d308 2
a309 1
.%N draft-ietf-ipngwg-scopedaddr-format-00.txt
@


1.5
log
@fix pathname.  enable reference to ip6.4.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.4 2000/01/06 02:17:13 itojun Exp $
d81 3
a83 3
	u_char		sin6_len;
	u_char		sin6_family;
	u_int16_t	sin6_port;
@


1.4
log
@improve scoped address part. (in sync with kame tree)
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.3 1999/12/25 02:10:37 itojun Exp $
d30 1
a30 1
.\"	KAME Id: inet6.4,v 1.3 2000/01/06 02:13:43 itojun Exp
d164 1
a164 2
.Pa IMPLEMENTATION
supplied with KAME kit.
d287 1
a287 1
.\" .Xr ip6 4 ,
@


1.3
log
@fix rfc number.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.2 1999/12/19 03:14:27 itojun Exp $
d30 1
a30 1
.\"	KAME Id: inet6.4,v 1.1.1.1 1999/08/08 23:30:37 itojun Exp
d113 12
a124 3
The implementation intentionally does not support RFC2553 IPv4 mapped address
.Pq IPv4 traffic on top of AF_INET6 socket ,
due to its possible negative impact to security and access control.
d126 2
a127 7
IPv6 defines scoped address such as link-local or site-local address.
To manipulate link-local addresses properly from the userland,
programs must use advanced API defined in RFC2292.
Otherwise, the address is ambiguous to the kernel and error will be generated.
Scoped address is not for daily use at this moment both from specification
and implementation point of view.
Most of normal userland program
d129 13
d144 3
a146 3
.Xr telnetd 8
cannot handle scoped address properly.
Only special programs,
d149 1
a149 4
supports scoped address.
For example,
.Xr ping6 8
has special option for specifying outgoing interface
d153 2
a154 2
Scoped addresses will have its interface index embedded into the address,
in routing table or interface structure.
d157 1
a157 1
The embedded index will be visible on
d159 3
a161 2
socket and results from
.Xr ifconfig 8 ,
d303 9
@


1.2
log
@add icmp6(4) and ip6(4).  may need some update to sync with reality.

in inet6(4), state that we do not support RFC1933 due to security reasons.
@
text
@d1 1
a1 1
.\"	$OpenBSD: inet6.4,v 1.1 1999/12/08 13:58:42 itojun Exp $
d113 1
a113 1
The implementation intentionally does not support RFC1993 IPv4 mapped address
@


1.1
log
@add faith(4), gif(4) and inet6(4).
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d112 4
@

