head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.36
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.34
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.32
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.20
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.28
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.26
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.24
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.22
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.18
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.16
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.14
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.12
	OPENBSD_5_0:1.11.0.10
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.8
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.6
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@.\" @;


1.11
date	2009.05.21.16.07.25;	author mk;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.19.19.53;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.21.12.47.57;	author mbalmer;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.25.04.41.10;	author mk;	state Exp;
branches;
next	1.7;

1.7
date	2006.09.05.14.21.50;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.29.15.04.36;	author mk;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.29.19.53.56;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.14.08.10.09;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.10.05.14;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.25.07.54.24;	author david;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.17.00.28.31;	author jaredy;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Be more explicit about disabling ddb and the reasons for doing so.

ok sthen
@
text
@.\"	$OpenBSD: watchdog.4,v 1.10 2007/05/31 19:19:53 jmc Exp $
.\"
.\" Copyright (c) 2004-2006 Michael Knudsen <mk@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.Dd $Mdocdate: May 31 2007 $
.Dt WATCHDOG 4
.Os
.Sh NAME
.Nm watchdog
.Nd hardware timers/counters for quick crash recovery
.Sh DESCRIPTION
Hardware watchdog timers are devices that reboot the machine when it
hangs.
The kernel continually resets the watchdog clock on a regular basis.
Thus, if the kernel halts, the clock will time out and reset the machine.
Watchdog timers may be configured to be reset from userland
to cause a reboot if process scheduling fails;
see
.Xr watchdogd 8
for further information.
.Pp
A number of hardware watchdogs are supported, and all are configured
using
.Xr sysctl 8
under the
.Va kern.watchdog
name:
.Bl -tag -width kern.watchdog.period -offset indent
.It Va kern.watchdog.auto
Automatically reset
.Pq Sq tickle
the watchdog timer but disable it at system shutdown time.
.It Va kern.watchdog.period
The timeout in seconds.
Setting it to zero disables the watchdog timer.
.El
.Pp
In situations where the machine provides vital services which are not
handled completely in kernel space, e.g. mail exchange, it may be
desirable to reboot the machine if process scheduling fails.
This is done by setting
.Va kern.watchdog.auto
to zero and running a process which repeatedly sets
.Va kern.watchdog.period
to the desired timeout value.
Then, if process scheduling fails, the process resetting the timer will
not be run, leading to the machine being rebooted.
Note that the kernel will not automatically disable an enabled watchdog at
system shutdown time when
.Va kern.watchdog.auto
is set to zero.
.Pp
Watchdog timers should be used in high-availability environments where
getting machines up and running quickly after a crash is more important
than determining the cause of the crash.
A watchdog timer enables a crashed machine to autonomously attempt to
recover quickly after a system failure.
.Pp
Note that this also means that it is unwise to combine watchdog timers
with
.Xr ddb 4
since the latter may prevent the former from resetting the
watchdog timeout before it expires.
This means that the machine will be rebooted before any debugging
can be done.
In other words: For mission critical machines, disable
.Xr ddb 4
by adding
.Dq ddb.panic=0
to
.Xr sysctl.conf 5
since this will give the chance to perform a crash dump and reboot.
Simply setting the watchdog will lose the debug trace of what went
wrong.
.Sh SEE ALSO
.Xr ddb 4 ,
.Xr sysctl.conf 5 ,
.Xr config 8 ,
.Xr sysctl 8 ,
.Xr watchdogd 8
.Sh BUGS
For systems with multiple watchdog timers available, only a single
one can be used at a time.
There is currently no way of selecting which device is used; the first
discovered by the kernel is selected.
@


1.10
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.9 2006/12/21 12:47:57 mbalmer Exp $
d16 1
a16 1
.Dd $Mdocdate$
d77 9
d88 1
@


1.9
log
@Change the semantics of kern.watchdog.auto slightly: If kern.watchdog.auto is
set to 0, the watchdog will not be retriggered by the kernel *and* it will not
be disabled at system shutdown time (before it got disabled at system shutdown
time.)

ok markus mickey mk
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.8 2006/09/25 04:41:10 mk Exp $
d16 1
a16 1
.Dd December 16, 2004
@


1.8
log
@Update my address.
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.7 2006/09/05 14:21:50 jmc Exp $
d43 1
a43 1
the watchdog timer.
d59 4
@


1.7
log
@devices with watchdog functionality should reference this page,
but not neccessarily the other way round;
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.6 2006/08/29 15:04:36 mk Exp $
d3 1
a3 1
.\" Copyright (c) 2004-2006 Michael Knudsen <mk@@molioner.dk>
@


1.6
log
@Reality check:

        o Sync list of watchdog drivers in SEE ALSO
        o All watchdogs are now configured using sysctl
        o All watchdogs can thus be triggered from userland

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.5 2005/09/29 19:53:56 grange Exp $
a74 7
.Xr elansc 4 ,
.Xr esm 4 ,
.Xr geodesc 4 ,
.Xr ichwdt 4 ,
.Xr ipmi 4 ,
.Xr viasio 4 ,
.Xr wdt 4 ,
@


1.5
log
@Xr viasio(4)
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.4 2005/09/14 08:10:09 jmc Exp $
d3 1
a3 1
.\" Copyright (c) 2004 Michael Knudsen <mk@@molioner.dk>
d27 2
a28 2
Some watchdog timers may be configured to be reset from userland,
causing a reboot if process scheduling fails;
d33 2
a34 2
A few watchdog drivers are supported, and most support timeout
configuration via
d76 1
d79 1
@


1.4
log
@point watchdog(4) readers to watchdogd(8);
discussed with michael knudsen;
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.3 2005/09/12 10:05:14 jmc Exp $
d78 1
@


1.3
log
@add some Xr's for ichwdt(4) and wtachdogd(8);
from alexey e. suslikov;
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.2 2005/05/25 07:54:24 david Exp $
d28 4
a31 1
causing a reboot if process scheduling fails.
@


1.2
log
@whitespace
@
text
@d1 1
a1 1
.\"	$OpenBSD: watchdog.4,v 1.1 2004/12/17 00:28:31 jaredy Exp $
d74 1
d77 2
a78 1
.Xr sysctl 8
@


1.1
log
@Add a new page about hardware watchdog devices, under a BSD license.

From:  Michael Knudsen

ok various
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d4 1
a4 1
.\" 
d8 1
a8 1
.\" 
@

