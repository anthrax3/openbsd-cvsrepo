head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.28
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.26
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.22
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.20
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.18
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.16
	OPENBSD_5_0:1.15.0.14
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.12
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.10
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.6
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@.\" @;


1.17
date	2016.05.24.05.47.16;	author mpi;	state Exp;
branches;
next	1.16;
commitid	fRLLmAEXiKtPShI3;

1.16
date	2015.02.16.16.38.54;	author naddy;	state Exp;
branches;
next	1.15;
commitid	ne9aoqc3owhFBWUD;

1.15
date	2008.06.26.05.42.07;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2008.03.10.12.48.24;	author sobrado;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.31.19.19.52;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.19.20.11.45;	author mbalmer;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.13.07.49.38;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.30.19.59.25;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.23.01.16.57;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.22.23.41.22;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.26.22.09.53;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.05.14.45.53;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.03.15.21.16;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.03.21.19.37;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.18.21.48.58;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.14.47.50;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	99.08.13.06.34.59;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.17
log
@USB_DISCOVER and USB_GET_STRING_DESC are no more.

ok deraadt@@
@
text
@.\"	$OpenBSD: ugen.4,v 1.16 2015/02/16 16:38:54 naddy Exp $
.\"	$NetBSD: ugen.4,v 1.7 1999/07/30 01:32:05 augustss Exp $
.\"
.\" Copyright (c) 1999 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Lennart Augustsson.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: February 16 2015 $
.Dt UGEN 4
.Os
.Sh NAME
.Nm ugen
.Nd USB generic device support
.Sh SYNOPSIS
.Cd "ugen* at uhub?"
.Sh DESCRIPTION
The
.Nm
driver provides support for all USB devices that do not have
a special driver.
It supports access to all parts of the device, but not in a way that is as
convenient as a special purpose driver.
.Pp
There can be up to 127 USB devices connected to a USB bus.
Each USB device can have up to 16 endpoints.
Each of these endpoints will communicate in one of four different modes:
control, isochronous, bulk, or interrupt.
Each of the endpoints will have a different device node.
The four least significant bits in the minor device number determine which
endpoint the device accesses and the rest of the bits determine which
USB device.
.Pp
If an endpoint address is used both for input and output the device
can be opened for both read or write.
.Pp
To find out what endpoints exist there are a series of
.Xr ioctl 2
operations available for the control endpoint that return the USB descriptors
of the device, configurations, interfaces, and endpoints.
.Pp
The control transfer mode can only happen on the control endpoint,
which is always endpoint 0.
Control requests are issued by
.Xr ioctl 2
calls.
.\" .Pp
.\" The isochronous transfer mode can be in or out depending on the
.\" endpoint.  To perform I/O on an isochronous endpoint
.\" .Xr read 2
.\" and
.\" .Xr write 2
.\" should be used.
.\" Before any I/O operations can take place the transfer rate in
.\" bytes/second has to be set.  This is done with
.\" .Xr ioctl 2
.\" .Dv USB_SET_ISO_RATE .
.\" Performing this call sets up a buffer corresponding to
.\" about 1 second of data.
.Pp
The bulk transfer mode can be in or out depending on the
endpoint.
To perform I/O on a bulk endpoint
.Xr read 2
and
.Xr write 2
should be used.
All I/O operations on a bulk endpoint are unbuffered.
.Pp
The interrupt transfer mode can only be in.
To perform input from an interrupt endpoint
.Xr read 2
should be used.
A moderate amount of buffering is done by the driver.
.Pp
All endpoints handle the following
.Xr ioctl 2
calls:
.Pp
.Bl -tag -width indent -compact
.It Dv USB_SET_SHORT_XFER (int)
Allow short read transfer.
Normally a transfer from the device which is shorter than the request
specified is reported as an error.
.Pp
.It Dv USB_SET_TIMEOUT (int)
Set the timeout on the device operations, the time is specified
in milliseconds.
The value 0 is used to indicate that there is no timeout.
.El
.Pp
The control endpoint (endpoint 0) handles the following
.Xr ioctl 2
calls:
.Pp
.Bl -tag -width indent -compact
.It Dv USB_GET_CONFIG (int)
Get the device configuration number.
.Pp
.It Dv USB_SET_CONFIG (int)
Set the device into the given configuration number.
This operation can only be performed when the control endpoint
is the sole open endpoint.
.Pp
.It Dv USB_GET_ALTINTERFACE (struct usb_alt_interface)
Get the alternative setting number for the interface with the given
index.
The
.Fa uai_config_index
is ignored in this call.
.Bd -literal
struct usb_alt_interface {
	int	uai_config_index;
	int	uai_interface_index;
	int	uai_alt_no;
};
.Ed
.Pp
.It Dv USB_SET_ALTINTERFACE (struct usb_alt_interface)
Set the alternative setting to the given number in the interface with the
given index.
The
.Fa uai_config_index
is ignored in this call.
.Pp
This operation can only be performed when no endpoints for the interface
are open.
.Pp
.It Dv USB_GET_NO_ALT (struct usb_alt_interface)
Return the number of different alternate settings in the
.Fa uai_alt_no
field.
.Pp
.It Dv USB_GET_DEVICE_DESC (usb_device_descriptor_t)
Return the device descriptor.
.Pp
.It Dv USB_GET_CONFIG_DESC (struct usb_config_desc)
Return the descriptor for the configuration with the given index.
For convenience the current configuration can be specified by
.Dv USB_CURRENT_CONFIG_INDEX .
.Bd -literal
struct usb_config_desc {
	int	ucd_config_index;
	usb_config_descriptor_t ucd_desc;
};
.Ed
.Pp
.It Dv USB_GET_INTERFACE_DESC (struct usb_interface_desc)
Return the interface descriptor for an interface specified by its
configuration index, interface index, and alternative index.
For convenience the current alternative can be specified by
.Dv USB_CURRENT_ALT_INDEX .
.Bd -literal
struct usb_interface_desc {
	int	uid_config_index;
	int	uid_interface_index;
	int	uid_alt_index;
	usb_interface_descriptor_t uid_desc;
};
.Ed
.Pp
.It Dv USB_GET_ENDPOINT_DESC (struct usb_endpoint_desc)
Return the endpoint descriptor for the endpoint specified by its
configuration index, interface index, alternative index, and
endpoint index.
.Bd -literal
struct usb_endpoint_desc {
	int	ued_config_index;
	int	ued_interface_index;
	int	ued_alt_index;
	int	ued_endpoint_index;
	usb_endpoint_descriptor_t ued_desc;
};
.Ed
.Pp
.It Dv USB_GET_FULL_DESC (struct usb_full_desc)
Return all the descriptors for the given configuration.
.Bd -literal
struct usb_full_desc {
	int	ufd_config_index;
	u_int	ufd_size;
	u_char	*ufd_data;
};
.Ed
.Pp
The
.Fa ufd_data
field should point to a memory area of the size given in the
.Fa ufd_size
field.
The proper size can be determined by first issuing a
.Dv USB_GET_CONFIG_DESC
and inspecting the
.Fa wTotalLength
field.
.Pp
.It Dv USB_DO_REQUEST
Send a USB request to the device on the control endpoint.
Any data sent to/from the device is located at
.Fa ucr_data .
The size of the transferred data is determined from the
.Fa ucr_request .
The
.Fa ucr_addr
field is ignored in this call.
.Bd -literal
struct usb_ctl_request {
	int	ucr_addr;
	usb_device_request_t ucr_request;
	void	*ucr_data;
	int	ucr_flags;
#define	USBD_SHORT_XFER_OK	0x04	/* allow short reads */
	int	ucr_actlen;	/* actual length transferred */
};
.Ed
.Pp
This is a dangerous operation in that it can perform arbitrary operations
on the device.
Some of the most dangerous (e.g., changing the device address) are not
allowed.
.Pp
.It Dv USB_GET_DEVICEINFO (struct usb_device_info)
Get an information summary for the device.
This call will not issue any USB transactions.
.El
.Pp
Note that there are two different ways of addressing configurations, interfaces,
alternatives, and endpoints: by index or by number.
The index is the ordinal number (starting from 0) of the descriptor
as presented by the device.
The number is the respective number of the entity as found in its descriptor.
Enumeration of descriptors use the index, getting and setting typically uses
numbers.
.Pp
Example:
All endpoints (except the control endpoint) for the current configuration
can be found by iterating the
.Fa interface_index
from 0 to
.Fa config_desc->bNumInterface-1
and for each of these iterating the
.Fa endpoint_index
from 0 to
.Fa interface_desc->bNumEndpoints-1 .
The
.Fa config_index
should be set to
.Dv USB_CURRENT_CONFIG_INDEX
and
.Fa alt_index
should be set to
.Dv USB_CURRENT_ALT_INDEX .
.Sh FILES
.Bl -tag -width Pa
.It Pa /dev/ugenN.EE
Endpoint
.Pa EE
of device
.Pa N .
.El
.Sh SEE ALSO
.Xr intro 4 ,
.Xr uhub 4 ,
.Xr usb 4
.Sh HISTORY
The
.Nm
driver
appeared in
.Ox 2.6 .
.Sh BUGS
The driver is not yet finished; there is no access to isochronous endpoints.
@


1.16
log
@Replace \*(Lt \*(Le \*(Gt \*(Ge with literal < <= > >= respectively,
except for instances where \*(Le and \*(Ge are clearly understood as
mathematical symbols.  Discussed with schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.15 2008/06/26 05:42:07 ray Exp $
d31 1
a31 1
.Dd $Mdocdate: June 26 2008 $
a217 11
.Pp
.It Dv USB_GET_STRING_DESC (struct usb_string_desc)
Get a string descriptor for the given language id and
string index.
.Bd -literal
struct usb_string_desc {
	int	usd_string_index;
	int	usd_language_id;
	usb_string_descriptor_t usd_desc;
};
.Ed
@


1.15
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.14 2008/03/10 12:48:24 sobrado Exp $
d31 1
a31 1
.Dd $Mdocdate: March 10 2008 $
d273 1
a273 1
.Fa config_desc-\*(GtbNumInterface-1
d277 1
a277 1
.Fa interface_desc-\*(GtbNumEndpoints-1 .
@


1.14
log
@source code should fit on a 80-column display; add some paragraph breaks

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.13 2007/05/31 19:19:52 jmc Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
@


1.13
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.12 2006/06/19 20:11:45 mbalmer Exp $
d38 1
a38 1
.Dd $Mdocdate$
d114 1
d147 1
d253 1
a253 1
	int	ucr_actlen;		/* actual length transferred */
d256 1
@


1.12
log
@Some markup/content errors.  Found by Marc Winiger <mw@@msys.ch>.  ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.11 2006/05/13 07:49:38 jmc Exp $
d38 1
a38 1
.Dd December 15, 2003
@


1.11
log
@grammar; from graham gower
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.10 2004/09/30 19:59:25 mickey Exp $
d281 1
a281 1
.Fa interface_desc-*(GtbNumEndpoints .
@


1.10
log
@kill default locators
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.9 2004/03/23 01:16:57 millert Exp $
d284 1
a284 1
should set to
@


1.9
log
@fix typo; Michael Coulter; OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.8 2004/03/22 23:41:22 millert Exp $
d45 1
a45 1
.Cd "ugen* at uhub? port ? configuration ?"
@


1.8
log
@Update to reality; adapted from NetBSD with some corrections.
OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.7 2002/09/26 22:09:53 miod Exp $
d207 1
a207 1
	int	ucd_config_index;
@


1.7
log
@Second part of the man4 mi cleanup.
- more/better xrefs
- sync .Cd lines with actual configuration files
- intro(4) reference police
- huge usb(4) update
- follow mdoc.samples suggested man page section ordering when necessary
- add netintro(4) and hostname.if(5) xrefs to all ethernet drivers

ok deraadt@@ mickey@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.6 2001/10/05 14:45:53 mpech Exp $
d38 1
a38 1
.Dd July 12, 1998
d64 1
a64 5
can be opened for both read or write, but an
.Xr open 2
cannot specify
.Dv O_RDWR
mode; the endpoint must be opened once for each direction.
d105 1
a105 1
The control endpoint (endpoint 0) handles the following
d114 9
d124 1
d137 1
a137 1
.Fa config_index
d141 3
a143 3
	int	config_index;
	int	interface_index;
	int	alt_no;
d150 1
a150 1
.Fa config_index
d158 1
a158 1
.Fa alt_no
d170 2
a171 2
	int	config_index;
	usb_config_descriptor_t desc;
d182 4
a185 4
	int	config_index;
	int	interface_index;
	int	alt_index;
	usb_interface_descriptor_t desc;
d195 5
a199 5
	int	config_index;
	int	interface_index;
	int	alt_index;
	int	endpoint_index;
	usb_endpoint_descriptor_t desc;
d207 3
a209 3
	int	config_index;
	u_int	size;
	u_char	*data;
d214 1
a214 1
.Fa data
d216 1
a216 1
.Fa size
d229 3
a231 3
	int	string_index;
	int	language_id;
	usb_string_descriptor_t desc;
d238 1
a238 1
.Fa data .
d240 1
a240 1
.Fa request .
d242 1
a242 1
.Fa addr
d246 6
a251 3
	int	addr;
	usb_device_request_t request;
	void	*data;
d277 1
a277 1
.Fa config_desc->bNumInterface-1
d281 1
a281 1
.Fa interface_desc->bNumEndpoints .
d290 8
@


1.6
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.5 2001/08/03 15:21:16 mpech Exp $
d45 1
a45 1
.Cd "ugen* at uhub?"
d282 2
@


1.5
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.4 2000/04/03 21:19:37 aaron Exp $
d50 3
a52 2
a special driver.  It supports access to all parts of the device,
but not in a way that is as convenient as a special purpose driver.
d55 7
a61 6
Each USB device can have up to 16 endpoints.  Each of these endpoints
will communicate in one of four different modes: control, isochronous,
bulk, or interrupt.  Each of the endpoints will have a different
device node.  The four least significant bits in the minor device
number determine which endpoint the device accesses and the rest
of the bits determine which USB device.
d76 2
a77 2
which is always endpoint 0.  Control requests
are issued by
d95 2
a96 1
endpoint.  To perform I/O on a bulk endpoint
d106 2
a107 2
should be used.  A moderate amount of buffering is done
by the driver.
d115 3
a117 3
Allow short read transfer.  Normally a transfer from the device
which is shorter than the request specified is reported as an
error.
d211 2
a212 1
field.  The proper size can be determined by first issuing a
d246 3
a248 2
on the device.  Some of the most dangerous (e.g., changing the device
address) are not allowed.
d251 2
a252 2
Get an information summary for the device.  This call will not
issue any USB transactions.
d258 4
a261 3
as presented by the device.  The number is the respective number of
the entity as found in its descriptor.  Enumeration of descriptors
use the index, getting and setting typically uses numbers.
@


1.4
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.3 2000/01/18 21:48:58 aaron Exp $
a45 1
.Pp
@


1.3
log
@Repair duplicate word occurences; (as found by a Perl script sent to us from
Tom Christiansen <tchrist@@perl.com>).
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.2 1999/08/13 14:47:50 aaron Exp $
d78 1
a78 1
calls.  
d128 1
a128 1
The 
d141 1
a141 1
The 
d205 1
a205 1
The 
d232 1
a232 1
The 
d251 1
a251 1
Note that there are two different ways of addressing configurations, interfaces, 
d268 1
a268 1
The 
@


1.2
log
@some repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: ugen.4,v 1.1 1999/08/13 06:34:59 fgsch Exp $
d207 1
a207 1
field should point to a memory area of of the size given in the
@


1.1
log
@Add USB man pages. More comming.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d59 2
a60 2
number determines which endpoint the device accesses and the rest
of the bits determines which USB device.
d69 1
a69 1
To find out what endpoints that exist there are a series of
d71 1
a71 1
operation on the control endpoint that returns the USB descriptors
d74 2
a75 3
The control transfer mode can only happen on the control endpoint
which is always endpoint 0.  The control endpoint accepts request
and may respond with an answer to such request.  Control request
d81 1
a81 1
.\" endpoint.  To perform IO on an isochronous endpoint
d86 1
a86 1
.\" Before any IO operations can take place the transfer rate in
d94 1
a94 1
endpoint.  To perform IO on a bulk endpoint
d99 1
a99 1
All IO operations on a bulk endpoint are unbuffered.
d116 1
d119 1
a121 1
.br
d124 1
d129 1
a129 1
.Dv config_index
d142 1
a142 1
.Dv config_index
d144 1
a144 1
.br
d147 1
d150 1
a150 1
.Dv alt_no
d152 1
d155 1
d166 1
d180 1
d194 1
d204 1
d206 1
a206 1
.Dv data
d208 1
a208 1
.Dv size
d212 1
a212 1
.Dv wTotalLength
d214 1
d225 1
d229 1
a229 1
.Dv data .
d231 1
a231 1
.Dv request .
d233 1
a233 1
.Dv addr
d245 1
d261 1
a261 1
.Dv interface_index
d263 1
a263 1
.Dv config_desc->bNumInterface-1
d265 1
a265 1
.Dv endpoint_index
d267 1
a267 1
.Dv interface_desc->bNumEndpoints .
d269 1
a269 1
.Dv config_index
d273 1
a273 1
.Dv alt_index
d283 1
a283 1
.Ox 2.5 .
@

