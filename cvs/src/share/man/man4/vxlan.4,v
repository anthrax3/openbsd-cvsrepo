head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@.\" @;


1.6
date	2016.09.03.15.27.54;	author jmc;	state Exp;
branches;
next	1.5;
commitid	tSmPk2V9i5UJFWHW;

1.5
date	2016.09.03.13.46.57;	author reyk;	state Exp;
branches;
next	1.4;
commitid	3QjHFZLzmkdTcUlc;

1.4
date	2015.10.02.15.26.55;	author sobrado;	state Exp;
branches;
next	1.3;
commitid	QG6BlRtu69TfuP4R;

1.3
date	2013.10.13.10.52.35;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.13.10.41.12;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.13.10.10.01;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.6
log
@counting things always catches us out...
@
text
@.\"	$OpenBSD: vxlan.4,v 1.5 2016/09/03 13:46:57 reyk Exp $
.\"
.\" Copyright (c) 2013 Reyk Floeter <reyk@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: September 3 2016 $
.Dt VXLAN 4
.Os
.Sh NAME
.Nm vxlan
.Nd virtual extensible local area network tunnel interface
.Sh SYNOPSIS
.Cd "pseudo-device vxlan"
.Sh DESCRIPTION
The
.Nm
interface is a tunnelling pseudo-device for overlaying virtualized
layer 2 networks over layer 3 networks.
.Pp
A
.Nm
interface can be created using the
.Ic ifconfig vxlan Ns Ar N Ic create
command.
Once configured, the interface encapsulates and decapsulates Ethernet
frames in UDP datagrams that are exchanged with tunnel endpoints.
The default UDP port for VXLAN traffic is 4789.
.Pp
Each
.Nm
interface uses a 24-bit
.Ic vnetid
(virtual networks identifier)
that distinguishes multiple virtualized layer 2 networks and
their tunnels between identical tunnel endpoints.
.Pp
The interface can operate in the following tunnel modes:
.Bl -tag -width multicast
.It Ic unicast mode
When a unicast IP address is configured as the tunnel destination,
all traffic is sent to a single tunnel endpoint.
.It Ic multicast mode
When a multicast IP address is configured as the tunnel destination,
all traffic is sent to all the tunnel endpoints that subscribed for the
specified multicast group.
.It Ic dynamic mode
When
.Nm
is configured for multicast mode and added to a
.Xr bridge 4 ,
all broadcast and multicast traffic is sent to the multicast group,
but directed traffic is sent to unicast IP addresses of individual tunnel
endpoints as they are learned by the bridge.
.It Ic multipoint mode
When
.Nm
is configured with
.Ic vnetid any
and added to a
.Xr bridge 4 ,
all return traffic is sent to the known tunnel endpoints
as they are learned by the bridge.
In this mode,
.Nm
does not use a specific virtual network identifier but learns the ones
of the individual tunnel endpoints.
It is used to dynamically bridge many virtual networks together.
.El
.Pp
The configuration can be done at runtime or by setting up a
.Xr hostname.if 5
configuration file for
.Xr netstart 8 .
.Sh EXAMPLES
Create a tunnel to a unicast tunnel endpoint, using the virtual tunnel
identifier 5:
.Bd -literal -offset indent
# ifconfig vxlan0 tunnel 192.168.1.100 192.168.1.200 vnetid 5
# ifconfig vxlan0 10.1.1.100/24
.Ed
.Pp
The following examples creates a dynamic tunnel that is attached to a
.Xr bridge 4 :
.Bd -literal -offset indent
# ifconfig vxlan0 tunnel 192.168.1.100 239.1.1.100 vnetid 7395
# ifconfig vxlan0 10.1.2.100/24
# ifconfig bridge0 add vxlan0 up
.Ed
.Pp
Prior to the assignment of UDP port 4789 by IANA, some early VXLAN
implementations used port 8472.
A non-standard port can be specified with the tunnel destination
address:
.Bd -literal -offset indent
# ifconfig vxlan0 tunnel 192.168.1.100 239.1.1.100:8472
.Ed
.Sh SECURITY
.Nm
does not provide any integrated security features.
It is designed to be a simple protocol that can be used in trusted
data center environments, to carry VM traffic between virtual machine
hypervisors, and provide virtualized layer 2 networks in Cloud
infrastructures.
.Pp
To protect
.Nm
tunnels, the traffic can be protected with IPsec to add authentication
and encryption for confidentiality.
.Pp
The Packet Filter (PF) can be used to filter tunnel traffic with
endpoint policies in
.Xr pf.conf 5 :
.Bd -literal -offset indent
table <vxlantep> { 192.168.1.200, 192.168.1.201 }
block in on vmx0
pass out on vmx0
pass in on vmx0 proto udp from <vxlantep> to port vxlan
.Ed
.Pp
The Time-to-Live (TTL) value of the tunnel can be set to 1 or a low
value to restrict the traffic to the local network:
.Bd -literal -offset indent
# ifconfig vxlan0 tunnelttl 1
.Ed
.Sh SEE ALSO
.Xr bridge 4 ,
.Xr inet 4 ,
.Xr hostname.if 5 ,
.Xr ifconfig 8 ,
.Xr netstart 8
.Sh STANDARDS
.Rs
.%A M. Mahalingam
.%A D. Dutt
.%A K. Duda
.%A P. Agarwal
.%A L. Kreeger
.%A T. Sridhar
.%A M. Bursell
.%A C. Wright
.%D May 2013
.%R draft-mahalingam-dutt-dcops-vxlan-04
.%T VXLAN: A Framework for Overlaying Virtualized Layer 2 Networks over Layer 3 Networks
.Re
.Sh HISTORY
The
.Nm
device first appeared in
.Ox 5.5 .
.Sh AUTHORS
The
.Nm
driver was written by
.An Reyk Floeter Aq Mt reyk@@openbsd.org .
.Sh CAVEATS
The
.Nm
interface requires at least 50 bytes for the IP, UDP and VXLAN
protocol overhead and optionally 4 bytes for the encapsulated VLAN tag.
The default MTU is set to 1500 bytes but can be adjusted if the
transport interfaces carrying the tunnel traffic do not support larger
MTUs, the tunnel traffic is leaving the local network, or if
interoperability with another implementation requires running a
decreased MTU of 1450 bytes.
In any other case, it is commonly recommended to set the MTU of the
transport interfaces to at least 1600 bytes.
.Pp
The implementation does not support IPv6 tunnel endpoints at present.
@


1.5
log
@Add support for a multipoint-to-multipoint mode in vxlan(4).  In this
mode, vxlan(4) must be configured to accept any virtual network
identifier with "vnetid any" and added to a bridge(4) or switch(4).
This way the driver will dynamically learn the tunnel endpoints and
their vnetids for the responses and can be used to dynamically bridge
between VXLANs.  It is also being used in combination with switch(4)
and the OpenFlow tunnel classifiers.

With input from yasuoka@@ goda@@
OK deraadt@@ dlg@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vxlan.4,v 1.4 2015/10/02 15:26:55 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: October 2 2015 $
d48 1
a48 1
The interface can operate in three different tunnel modes:
@


1.4
log
@replace vxlan port number by its official service name; while here,
use a comma to separate entries hold in the vxlan tunnel endpoint
table as it is the style most commonly used in base.

ok reyk@@; henning@@ agrees.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vxlan.4,v 1.3 2013/10/13 10:52:35 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 13 2013 $
d64 15
a78 1
endpoints, as they are learned by the bridge.
@


1.3
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vxlan.4,v 1.2 2013/10/13 10:41:12 reyk Exp $
d111 1
a111 1
table <vxlantep> { 192.168.1.200 192.168.1.201 }
d114 1
a114 1
pass in on vmx0 proto udp from <vxlantep> to port 4789
@


1.2
log
@Set the default MTU to full 1500 bytes.  We do not want to encourage
running vxlan(4) with a lowered MTU of just 1450 bytes instead of
bumping the MTU of the transport interfaces to at least 1550 or
preferrably 1600 bytes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vxlan.4,v 1.1 2013/10/13 10:10:01 reyk Exp $
d45 1
a45 1
that allows to distinguish multiple virtualized layer 2 networks and
a64 1
.Xr 
a127 10
.Sh HISTORY
The
.Nm
device first appeared in
.Ox 5.5 .
.Sh AUTHORS
The
.Nm
driver was written by
.An Reyk Floeter Aq Mt reyk@@openbsd.org .
d140 1
a140 1
.%T VXLAN: A Framework for Overlaying Virtualized Layer 2 Networks over Layer 3 Networks.
d142 10
d160 1
a160 1
interoperability with another implementation requires to run a
@


1.1
log
@Import vxlan(4), the virtual extensible local area network tunnel
interface.  VXLAN is a UDP-based tunnelling protocol for overlaying
virtualized layer 2 networks over layer 3 networks. The implementation
is based on draft-mahalingam-dutt-dcops-vxlan-04 and has been tested
with other implementations in the wild.

put it in deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d158 7
a164 6
The default MTU is set to 1450 bytes but can be adjusted if the
transport interfaces carrying the tunnel traffic support larger MTUs. 
It is recommended to set the MTU of the transport interfaces to at
least 1550 bytes and to bump the MTU of the
.Nm
interfaces to 1500 bytes accordingly.
@

