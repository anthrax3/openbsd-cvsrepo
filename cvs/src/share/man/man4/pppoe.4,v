head	1.33;
access;
symbols
	OPENBSD_6_1:1.33.0.4
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.31.0.4
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.28.0.6
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.4
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.24.0.8
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.4
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.2
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.23.0.4
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.22.0.8
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.20.0.4
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.2
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.19.0.2
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6;
locks; strict;
comment	@.\" @;


1.33
date	2017.03.22.21.37.24;	author jmc;	state Exp;
branches;
next	1.32;
commitid	qdkTspBkXLqAgBqd;

1.32
date	2016.08.16.08.56.28;	author mpi;	state Exp;
branches;
next	1.31;
commitid	bNihq8piomzXUT55;

1.31
date	2016.04.01.05.47.34;	author jmc;	state Exp;
branches;
next	1.30;
commitid	TFtvenGQ06aBr55K;

1.30
date	2016.04.01.04.03.35;	author jsg;	state Exp;
branches;
next	1.29;
commitid	mLDEumOGraMzIlUg;

1.29
date	2015.08.12.09.15.49;	author mpi;	state Exp;
branches;
next	1.28;
commitid	xDrN42XV29c4zEhS;

1.28
date	2015.02.16.16.38.54;	author naddy;	state Exp;
branches;
next	1.27;
commitid	ne9aoqc3owhFBWUD;

1.27
date	2014.10.08.12.57.51;	author sthen;	state Exp;
branches;
next	1.26;
commitid	llKb2kWdaTH2keuw;

1.26
date	2014.03.17.21.55.05;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2014.03.17.17.07.45;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2012.09.26.17.34.38;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2012.01.19.23.29.24;	author sthen;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.12.18.42.36;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.06.13.53.53;	author ajacoutot;	state Exp;
branches;
next	1.20;

1.20
date	2008.06.26.05.42.07;	author ray;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.27.18.00.42;	author claudio;	state Exp;
branches;
next	1.18;

1.18
date	2007.11.27.12.33.29;	author claudio;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.31.19.19.51;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.10.22.07.02;	author kili;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.17.21.36.58;	author mpf;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.04.08.53.46;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.18.18.05.04;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.08.19.06.41;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.18.20.17.42;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.18.15.38.57;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.17.11.50.23;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.17.03.29.55;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.06.15.30.50;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.29.10.39.54;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.30.12.42.21;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.30.10.13.57;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.30.09.46.52;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.30.09.39.15;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.29.22.56.04;	author canacar;	state Exp;
branches;
next	;


desc
@@


1.33
log
@less verbose KERNEL OPTIONS section; help/ok sthen
@
text
@.\"	$OpenBSD: pppoe.4,v 1.32 2016/08/16 08:56:28 mpi Exp $
.\"	$NetBSD: pppoe.4,v 1.26 2003/10/02 07:06:36 wiz Exp $
.\"
.\" Copyright (c) 2002 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Martin Husemann <martin@@NetBSD.org>.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: August 16 2016 $
.Dt PPPOE 4
.Os
.Sh NAME
.Nm pppoe
.Nd PPP Over Ethernet protocol network interface
.Sh SYNOPSIS
.Cd "pseudo-device pppoe"
.Sh DESCRIPTION
The
.Nm
interface encapsulates
.Em Point-to-Point Protocol (PPP)
packets inside Ethernet frames as defined by RFC 2516.
.Pp
This is often used to connect a router via a DSL modem to
an access concentrator.
The
.Nm
interface does not by itself transmit or receive frames,
but needs an Ethernet interface to do so.
This Ethernet interface is connected to the
.Nm
interface via
.Xr ifconfig 8 .
The Ethernet interface needs to be marked UP, but does not need to have an
IP address.
.Pp
There are two basic modes of operation, controlled via the
.Em link1
switch.
The default mode,
.Em link1
not being set, tries to keep the configured session open all the
time.
If the session is disconnected, a new connection attempt is started
immediately.
The
.Dq dial on demand
mode, selected by setting
.Em link1 ,
only establishes a connection when data is being sent to the interface.
.Pp
Before a
.Nm
interface is usable, it needs to be configured.
The following steps are necessary:
.Bl -bullet
.It
Create the interface.
.It
Connect an Ethernet interface.
This interface is used for the physical communication.
As noted above it must be marked UP, but need not have an IP address.
.It
Configure authentication.
The PPP session needs to identify the client to the peer.
For more details on the available options see
.Xr ifconfig 8 .
.It
If using IPv6, configure a link-local address.
.El
.Pp
This all is typically accomplished using an
.Pa /etc/hostname.pppoe0
file.
A typical file looks like this:
.Bd -literal -offset indent
inet 0.0.0.0 255.255.255.255 NONE \e
	pppoedev em0 authproto pap \e
	authname 'testcaller' authkey 'donttell' up
dest 0.0.0.1
inet6 eui64
!/sbin/route add default -ifp pppoe0 0.0.0.1
!/sbin/route add -inet6 default -ifp pppoe0 fe80::%pppoe0
.Ed
.Pp
The physical interface must also be marked
.Ql up :
.Bd -literal -offset indent
# echo "up" > /etc/hostname.em0
.Ed
.Pp
Since this is a PPP interface, the addresses assigned to the interface
may change during PPP negotiation.
There is no fine grained control available for deciding
which addresses are acceptable and which are not.
For the local side and the remote address there is exactly one choice:
hard coded address or wildcard.
If a real address is assigned to one side of the connection,
PPP negotiation will only agree to exactly this address.
If one side is wildcarded,
every address suggested by the peer will be accepted.
.Pp
To wildcard the local address set it to 0.0.0.0; to wildcard the remote
address set it to 0.0.0.1.
.Sh KERNEL OPTIONS
.Nm
does not interfere with other PPPoE implementations
running on the same machine.
However under some circumstances
(such as after a crash or power failure)
the peer device might initially refuse to
reestablish a new PPPoE connection
because there is already an open session.
This would be indicated by the client sending a high number of PADI packets
before successfully connecting.
The
.Nm
driver can be told to kill all unknown PPPoE sessions
by sending a PADT packet to explicitly terminate the old session.
Add the following to the kernel config file:
.Pp
.Dl option PPPOE_TERM_UNKNOWN_SESSIONS
.Sh MTU/MSS ISSUES
Problems can arise on machines with private IPs connecting to the Internet
via a machine running both
Network Address Translation (NAT)
and
.Nm .
Standard Ethernet uses a
maximum transmission unit (MTU)
of 1500 bytes,
whereas PPPoE mechanisms need a further 8 bytes of overhead.
This leaves a maximum MTU of 1492.
.Nm
sets the MTU on its interface to 1492 as a matter of course.
However,
machines connecting on a private LAN will still have their MTUs set to 1500,
causing conflict.
Using a packet filter,
the
maximum segment size (MSS)
can be set (clamped) to the required value.
The following rule in
.Xr pf.conf 5
would set the MSS to 1440:
.Pp
.Dl match on pppoe0 scrub (max-mss 1440)
.Pp
Although in theory the maximum MSS over a PPPoE interface
is 1452 bytes,
1440 appears to be a safer bet.
Note that setting the MSS this way can have undesirable effects,
such as interfering with the OS detection features of
.Xr pf 4 .
.Pp
Alternatively in cases where the remote equipment supports RFC 4638
and the physical interface is configured to support jumbo frames,
the MTU of the
.Nm
interface can be raised and it will attempt to negotiate an increased MTU.
For example, in
.Pa /etc/hostname.pppoe0 :
.Bd -literal -offset indent
inet 0.0.0.0 255.255.255.255 NONE mtu 1500 \e
	pppoedev em0 authproto pap \e
	authname 'testcaller' authkey 'donttell' up
dest 0.0.0.1
!/sbin/route add default -ifp pppoe0 0.0.0.1
.Ed
.Pp
The physical interface must also be configured like so:
.Bd -literal -offset indent
# echo "up mtu 1508" > /etc/hostname.em0
.Ed
.Pp
With this, the previously mentioned MSS clamping rules in
.Xr pf.conf 5
are no longer necessary.
.Pp
See
.Xr pf.conf 5
for more information on MTU, MSS, and NAT.
.Sh SEE ALSO
.Xr sppp 4 ,
.Xr hostname.if 5 ,
.Xr pf.conf 5 ,
.Xr ifconfig 8
.Sh STANDARDS
.Rs
.%A L. Mamakos
.%A K. Lidl
.%A J. Evarts
.%A D. Carrel
.%A D. Simone
.%A R. Wheeler
.%D February 1999
.%R RFC 2516
.%T A Method for Transmitting PPP Over Ethernet (PPPoE)
.Re
.Pp
.Rs
.%A P. Arberg
.%A D. Kourkouzelis
.%A M. Duckett
.%A T. Anschutz
.%A J. Moisand
.%D September 2006
.%R RFC 4638
.%T Accommodating a Maximum Transit Unit/Maximum Receive Unit (MTU/MRU) Greater Than 1492 in the Point-to-Point Protocol over Ethernet (PPPoE)
.Re
.Sh HISTORY
The
.Nm
device first appeared in
.Ox 3.7 .
.Sh CAVEATS
RFC 4638 negotiation is only aware of the MTU configured on the endpoints,
but not the maximum MTU supported on the path between them.
If the path cannot pass the larger Ethernet frames, negotiation will succeed
but the connection will not function correctly.
.Sh BUGS
This implementation is client side only.
.Pp
It is important to specify
.Dq Li netmask 255.255.255.255
to
.Xr ifconfig 8 .
If the netmask is unspecified, it will be set to 8 when 0.0.0.0 is
configured to the interface, and it will persist after negotiation.
.Pp
The presence of a
.Xr mygate 5
file will interfere with the routing table.
Make sure this file is either empty or does not exist.
@


1.32
log
@In the IPv6 default route example, use a gateway that corresponds to a
RTF_HOST route and is always on the correct interface.

The gateway value doesn't really matter for routes on p2p interfaces
but this allow us to tighten the checks when adding RTF_GATEWAY routes.

ok stsp@@, sthen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.31 2016/04/01 05:47:34 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: April 1 2016 $
a127 1
A
d129 1
a129 1
enabled kernel will not interfere with other PPPoE implementations
d131 8
a138 2
Under special circumstances
(details below) this is not desirable, so the
d141 2
a142 5
received by the Ethernet interface used for a configured
.Nm
interface.
To do this,
add the following to your kernel config file:
a144 12
.Pp
This option is only useful if you have a static IP address assigned and
your ISP does not use LCP echo requests to monitor the link status.
After a crash or power failure the peer device still tries to send data to
the no longer active session on your computer, and might refuse to
reestablish a new connection, because there already is an open session.
On receipt of such packets, the
.Nm
driver with this option set will send a PADT packet
(request to terminate the session).
The peer will immediately disconnect
the orphaned session and allow a new one to be established.
@


1.31
log
@no Pp before Sh;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.30 2016/04/01 04:03:35 jsg Exp $
d105 1
a105 1
!/sbin/route add -inet6 default -ifp pppoe0 fe80::
@


1.30
log
@Building kernels with PPPOE_SERVER enabled has been broken for at least
eleven years, remove it.

Despite what the wildly outdated time(9) claims, there is no longer
globally visible "struct timeval mono_time" or "struct timeval time".

ok mpi@@ sthen@@ mikeb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.29 2015/08/12 09:15:49 mpi Exp $
d31 1
a31 1
.Dd $Mdocdate: August 12 2015 $
a154 1
.Pp
@


1.29
log
@Update the IPv6 example to something that works...

...although this create a race condition pointed by sthen@@ where the
other side might try to negotiave IPv6 before it is enable.

This is *another* fallback of the no IPv6 by default policy.  Since
setting an address implicitly brings the underlying interface UP.

And pppoe(4) (which is special) starts singing as soon as it is UP
even if no proto or parent device has been specified.  Obviously this
cannot work.

Better have a working and racy example than a non-working one.

Diff submitted by Delan Azabani, thanks!

ok naddy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.28 2015/02/16 16:38:54 naddy Exp $
d31 1
a31 1
.Dd $Mdocdate: February 16 2015 $
a155 13
If the kernel is compiled with option
.Dv PPPOE_SERVER ,
there are two modes of connection, controlled via the
.Em link0
switch.
The default mode,
.Em link0
not being set, is client mode.
The
.Dq PPPoE server
mode, selected by setting
.Em link0 ,
is to wait for incoming PPPoE sessions.
@


1.28
log
@Replace \*(Lt \*(Le \*(Gt \*(Ge with literal < <= > >= respectively,
except for instances where \*(Le and \*(Ge are clearly understood as
mathematical symbols.  Discussed with schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.27 2014/10/08 12:57:51 sthen Exp $
d31 1
a31 1
.Dd $Mdocdate: October 8 2014 $
a98 1
inet6 eui64
d103 1
d105 1
a105 1
!/sbin/route add default -ifp pppoe0 fe80::
@


1.27
log
@At present (since NOINET6-by-default), pppoe(4) does not request IPV6CP unless
the pppoe interface already has a link-local address. Add to the config sample
showing how to do this with "inet6 eui64". Not ideal and may want further
changes in the driver, but since v6 over pppoe is broken for some people let's
at least document it for now. Also show the not-easy-to-guess "route add" line
that's needed. ok deraadt@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.26 2014/03/17 21:55:05 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: March 17 2014 $
d111 1
a111 1
# echo "up" \*(Gt /etc/hostname.em0
d219 1
a219 1
# echo "up mtu 1508" \*(Gt /etc/hostname.em0
@


1.26
log
@some userland pppoe cleaning;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.25 2014/03/17 17:07:45 deraadt Exp $
d90 2
d99 1
d105 1
@


1.25
log
@the userland ppp(9) code goes awa.  Having too much ppp choice in the
tree results in one-true-ppp not coming into existance.  This code is
essentially un-audited and quite dangerous.
ok claudio sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.24 2012/09/26 17:34:38 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 26 2012 $
a139 3
Note that this will break all userland PPPoE
implementations using the same Ethernet interface!
.Pp
a180 8
.Pp
While
.Xr pppoe 8
has an internal option,
.Dq mssfixup ,
which is enabled by default and takes care of this,
.Nm
users have to rely on other methods.
@


1.24
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.23 2012/01/19 23:29:24 sthen Exp $
d31 1
a31 1
.Dd $Mdocdate: January 19 2012 $
d240 1
a240 3
.Xr ifconfig 8 ,
.Xr ppp 8 ,
.Xr pppoe 8
@


1.23
log
@Document RFC 4638 support in pppoe(4). Incorporates parts from Matt Dainty
and myself, with help from jmc@@ and feedback from phessler@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.22 2010/01/12 18:42:36 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: January 12 2010 $
d243 1
d245 7
a253 1
.%D February 1999
d255 1
d257 6
a264 1
.%D September 2006
@


1.22
log
@better word MSS in pf.conf.5, from Lars Nooden;
the changes in pppoe.4 are just to keep things consistent...
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.21 2009/04/06 13:53:53 ajacoutot Exp $
d31 1
a31 1
.Dd $Mdocdate: April 6 2009 $
d95 1
a95 4
.Sh EXAMPLES
A typical
.Pa /etc/hostname.pppoe0
file looks like this:
d98 1
a98 1
	pppoedev ne0 authproto pap \e
d107 1
a107 1
# echo "up" \*(Gt /etc/hostname.ne0
d209 24
d248 5
d258 5
@


1.21
log
@Adapt PF rule to new scrub syntax.

input from and ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.20 2008/06/26 05:42:07 ray Exp $
d31 1
a31 1
.Dd $Mdocdate: June 26 2008 $
d178 1
a178 1
Maximum Transmission Unit (MTU)
d197 1
a197 1
Maximum Segment Size (MSS)
@


1.20
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.19 2007/11/27 18:00:42 claudio Exp $
d31 1
a31 1
.Dd $Mdocdate: November 27 2007 $
d203 1
a203 1
.Dl scrub out on pppoe0 max-mss 1440
@


1.19
log
@On jmc@@'s request add a bit that mentions that the pf(4) mssfix up is only
needed on pppoe(4) and not needed with pppoe(8) because it is done by ppp(8)
by default. OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.18 2007/11/27 12:33:29 claudio Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
@


1.18
log
@Don't give bad advice. The MTU/MSS issue is not solvable by changing the MTU
of any interface of the pppoe router. The best way to get a reliable network
connection is to use pf(4) and the max-mss scrub option.
OK henning@@, mbalmer@@ Yes please! sthen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.17 2007/05/31 19:19:51 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate$
d195 7
@


1.17
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.16 2007/05/10 22:07:02 kili Exp $
a194 12
Userland
.Xr pppoe 8
users do not have to worry about this issue, since
.Xr ppp 8
itself has an option,
.Dq mssfixup ,
which is enabled by default and takes care of this.
Kernel
.Nm
users have to rely on other methods:
.Bl -bullet
.It
d209 1
a209 2
such as reducing TCP/IP throughput,
and interfering with the OS detection features of
a210 11
.It
Setting the MTU on all interfaces being NAT'ed to 1492,
instead of the Ethernet default, 1500.
This can be done using
.Xr ifconfig 8 .
The following would set the MTU to 1492 on interface bge0:
.Pp
.Dl # ifconfig bge0 mtu 1492
.Pp
Unfortunately not all interfaces support setting the MTU at this time.
.El
@


1.16
log
@
PPP Over Ethernet (not "over"). More consistent with pppoe(8) and the rfc.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.15 2007/04/17 21:36:58 mpf Exp $
d38 1
a38 1
.Dd October 1, 2003
@


1.15
log
@Add support for setting the address of the ppp peer.
Use the proper in_ifscrub() / in_ifinit() calls for
address changes to generate routing messages.
The correct way to set the default route now
needs the -ifp option, e.g.
 route add default -ifp pppoe0 0.0.0.1
Since the route is set right after bringing
the interface up, it still works w/out -ifp though.

Changes mostly from NetBSD.

Tested by Matthias Bauer and bluhm@@
OK canacar@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.14 2006/12/04 08:53:46 jmc Exp $
d43 1
a43 1
.Nd PPP over Ethernet protocol network interface
@


1.14
log
@wrap authname and authkey args in quotes to prevent problems
when using special chars;

from andreas bihlmaier
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.13 2006/09/18 18:05:04 jmc Exp $
d111 1
a111 1
!/sbin/route add default 0.0.0.1
@


1.13
log
@change the example hostname.pppoe0 to match the format
documented in hostname.if(5). although it is more complex,
we at least document how and why it works;

complaints on a postcard...

ok reyk canacar
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.12 2006/09/08 19:06:41 jmc Exp $
d109 1
a109 1
	authname testcaller authkey donttell up
@


1.12
log
@correct SYNOPSIS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.11 2006/05/18 20:17:42 jmc Exp $
d107 4
a110 2
inet 0.0.0.0 255.255.255.255 0.0.0.1 pppoedev ne0 \e
	authproto pap authname testcaller authkey donttell up
@


1.11
log
@tweak previous; ok reyk
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.10 2006/05/18 15:38:57 reyk Exp $
d45 1
a45 1
.Nm pseudo-device pppoe
@


1.10
log
@the physical interface must be marked UP

ok naddy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.9 2006/05/17 11:50:23 jmc Exp $
d112 5
a116 7
To mark the physical interface UP, just write a single
.Ql up
in
.Pa /etc/hostname.ne0
or the corresponding 
.Xr hostname.if 5
file.
@


1.9
log
@sort SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.8 2006/05/17 03:29:55 reyk Exp $
d111 8
@


1.8
log
@implement support for sppp(4) in ifconfig. have a look at the updated
manual pages pppoe(4) and sppp(4) for examples.

the spppcontrol(8) utility is not required anymore and will probably
be removed in the near future.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.7 2005/10/06 15:30:50 jmc Exp $
d232 1
d237 1
a237 2
.Xr pppoe 8 ,
.Xr sppp 4
@


1.7
log
@note that /etc/mygate will cause conflict with pppoe(4)
and advise against it;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.6 2004/12/29 10:39:54 jmc Exp $
d96 1
a96 1
.Xr spppcontrol 8 .
d107 2
a108 5
pppoedev ne0
!/sbin/ifconfig ne0 up
!/usr/sbin/spppcontrol \e$if myauthproto=pap myauthname=testcaller \e
	myauthkey=donttell
!/sbin/ifconfig \e$if inet 0.0.0.0 0.0.0.1 netmask 0xffffffff
a109 1
up
d237 1
a237 1
.Xr spppcontrol 8
d252 1
a252 1
.Dq Li netmask 0xffffffff
@


1.6
log
@reinstate a (rewritten) MTU/MSS ISSUES section;
better layout and other tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.5 2004/11/30 12:42:21 jmc Exp $
d261 5
@


1.5
log
@mcintyre learns the hard way that $int should be \$if when passed to
ifconfig(8);
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.4 2004/11/30 10:13:57 jmc Exp $
a80 14
If the kernel is compiled with option
.Dv PPPOE_SERVER ,
there are two modes of connection, controlled via the
.Em link0
switch.
The default mode,
.Em link0
not being set, is client mode.
The
.Dq PPPoE server
mode, selected by setting
.Em link0 ,
is to wait for incoming PPPoE session.
.Pp
d108 2
a109 2
! /sbin/ifconfig ne0 up
! /usr/sbin/spppcontrol \e$if myauthproto=pap myauthname=testcaller \e
d111 2
a112 2
! /sbin/ifconfig \e$if inet 0.0.0.0 0.0.0.1 netmask 0xffffffff
! /sbin/route add default 0.0.0.1
d127 1
a127 1
To wildcard the local address set it to 0.0.0.0, to wildcard the remote
d129 1
a129 1
.Sh OPTIONS
d132 2
a133 3
enabled kernel will not interfere with other
.Nm PPPoE
implementations running on the same machine.
d137 2
a138 3
driver can be told to kill all unknown
.Nm PPPoE
sessions received by the Ethernet interface used for a configured
d146 1
a146 2
Note that this will break all userland
.Nm PPPoE
d160 75
d237 1
d250 1
a250 1
device appeared in
@


1.4
log
@correct path for spppcontrol;
from bernd ahlers;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.3 2004/11/30 09:46:52 jmc Exp $
d123 1
a123 1
! /usr/sbin/spppcontrol $int myauthproto=pap myauthname=testcaller \e
d125 1
a125 1
! /sbin/ifconfig $int inet 0.0.0.0 0.0.0.1 netmask 0xffffffff
@


1.3
log
@`option' keyword, not `options';
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.2 2004/11/30 09:39:15 jmc Exp $
d123 1
a123 1
! /sbin/spppcontrol $int myauthproto=pap myauthname=testcaller \e
@


1.2
log
@one more ifconfig.if -> hostname.if;
@
text
@d1 1
a1 1
.\"	$OpenBSD: pppoe.4,v 1.1 2004/11/29 22:56:04 canacar Exp $
d81 1
a81 1
If the kernel is compiled with options
d160 1
a160 1
.Dl options PPPOE_TERM_UNKNOWN_SESSIONS
@


1.1
log
@Add missing pppoe(4) manual page. Adapted from NetBSD version.
Reminded by mickey@@, with help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d114 1
a114 1
.Pa /etc/ifconfig.pppoe0
@

