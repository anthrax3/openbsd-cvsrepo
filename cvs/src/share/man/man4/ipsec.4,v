head	1.84;
access;
symbols
	OPENBSD_6_2:1.84.0.2
	OPENBSD_6_2_BASE:1.84
	OPENBSD_6_1:1.84.0.6
	OPENBSD_6_1_BASE:1.84
	OPENBSD_6_0:1.84.0.4
	OPENBSD_6_0_BASE:1.84
	OPENBSD_5_9:1.83.0.2
	OPENBSD_5_9_BASE:1.83
	OPENBSD_5_8:1.83.0.6
	OPENBSD_5_8_BASE:1.83
	OPENBSD_5_7:1.83.0.4
	OPENBSD_5_7_BASE:1.83
	OPENBSD_5_6:1.79.0.10
	OPENBSD_5_6_BASE:1.79
	OPENBSD_5_5:1.79.0.8
	OPENBSD_5_5_BASE:1.79
	OPENBSD_5_4:1.79.0.4
	OPENBSD_5_4_BASE:1.79
	OPENBSD_5_3:1.79.0.2
	OPENBSD_5_3_BASE:1.79
	OPENBSD_5_2:1.78.0.10
	OPENBSD_5_2_BASE:1.78
	OPENBSD_5_1_BASE:1.78
	OPENBSD_5_1:1.78.0.8
	OPENBSD_5_0:1.78.0.6
	OPENBSD_5_0_BASE:1.78
	OPENBSD_4_9:1.78.0.4
	OPENBSD_4_9_BASE:1.78
	OPENBSD_4_8:1.78.0.2
	OPENBSD_4_8_BASE:1.78
	OPENBSD_4_7:1.77.0.10
	OPENBSD_4_7_BASE:1.77
	OPENBSD_4_6:1.77.0.12
	OPENBSD_4_6_BASE:1.77
	OPENBSD_4_5:1.77.0.8
	OPENBSD_4_5_BASE:1.77
	OPENBSD_4_4:1.77.0.6
	OPENBSD_4_4_BASE:1.77
	OPENBSD_4_3:1.77.0.4
	OPENBSD_4_3_BASE:1.77
	OPENBSD_4_2:1.77.0.2
	OPENBSD_4_2_BASE:1.77
	OPENBSD_4_1:1.76.0.4
	OPENBSD_4_1_BASE:1.76
	OPENBSD_4_0:1.76.0.2
	OPENBSD_4_0_BASE:1.76
	OPENBSD_3_9:1.69.0.2
	OPENBSD_3_9_BASE:1.69
	OPENBSD_3_8:1.65.0.2
	OPENBSD_3_8_BASE:1.65
	OPENBSD_3_7:1.57.0.6
	OPENBSD_3_7_BASE:1.57
	OPENBSD_3_6:1.57.0.4
	OPENBSD_3_6_BASE:1.57
	OPENBSD_3_5:1.57.0.2
	OPENBSD_3_5_BASE:1.57
	OPENBSD_3_4:1.56.0.2
	OPENBSD_3_4_BASE:1.56
	OPENBSD_3_3:1.54.0.2
	OPENBSD_3_3_BASE:1.54
	OPENBSD_3_2:1.50.0.2
	OPENBSD_3_2_BASE:1.50
	OPENBSD_3_1:1.49.0.2
	OPENBSD_3_1_BASE:1.49
	OPENBSD_3_0:1.48.0.2
	OPENBSD_3_0_BASE:1.48
	OPENBSD_2_9:1.39.0.2
	OPENBSD_2_9_BASE:1.39
	OPENBSD_2_8:1.35.0.2
	OPENBSD_2_8_BASE:1.35
	OPENBSD_2_7:1.31.0.2
	OPENBSD_2_7_BASE:1.31
	OPENBSD_2_6:1.26.0.2
	OPENBSD_2_6_BASE:1.26
	OPENBSD_2_5:1.19.0.2
	OPENBSD_2_5_BASE:1.19
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3;
locks; strict;
comment	@# @;


1.84
date	2016.03.18.21.39.18;	author jmc;	state Exp;
branches;
next	1.83;
commitid	OVHzfJzwftStHqyl;

1.83
date	2015.02.16.16.38.54;	author naddy;	state Exp;
branches;
next	1.82;
commitid	ne9aoqc3owhFBWUD;

1.82
date	2015.01.29.07.48.51;	author jmc;	state Exp;
branches;
next	1.81;
commitid	Bro9QdT3I2gyOUt0;

1.81
date	2014.11.16.19.57.24;	author schwarze;	state Exp;
branches;
next	1.80;
commitid	5KwnyPVZR1dC1mYp;

1.80
date	2014.11.15.14.41.02;	author bentley;	state Exp;
branches;
next	1.79;
commitid	HuCemPIiOkto0SJD;

1.79
date	2012.08.15.19.17.02;	author jmc;	state Exp;
branches;
next	1.78;

1.78
date	2010.06.07.08.38.09;	author jmc;	state Exp;
branches;
next	1.77;

1.77
date	2007.05.31.19.19.50;	author jmc;	state Exp;
branches;
next	1.76;

1.76
date	2006.08.31.11.46.39;	author jmc;	state Exp;
branches;
next	1.75;

1.75
date	2006.08.29.18.14.26;	author jmc;	state Exp;
branches;
next	1.74;

1.74
date	2006.08.29.17.57.28;	author jmc;	state Exp;
branches;
next	1.73;

1.73
date	2006.08.29.17.51.02;	author jmc;	state Exp;
branches;
next	1.72;

1.72
date	2006.08.29.17.23.41;	author jmc;	state Exp;
branches;
next	1.71;

1.71
date	2006.05.26.08.54.04;	author jmc;	state Exp;
branches;
next	1.70;

1.70
date	2006.05.26.04.02.59;	author deraadt;	state Exp;
branches;
next	1.69;

1.69
date	2005.12.12.11.56.47;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2005.11.27.10.58.23;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2005.11.26.23.32.34;	author hshoexer;	state Exp;
branches;
next	1.66;

1.66
date	2005.11.24.12.08.16;	author pedro;	state Exp;
branches;
next	1.65;

1.65
date	2005.08.19.15.45.47;	author jmc;	state Exp;
branches;
next	1.64;

1.64
date	2005.04.16.00.19.36;	author jmc;	state Exp;
branches;
next	1.63;

1.63
date	2005.04.16.00.10.47;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2005.04.15.23.31.06;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2005.04.15.23.27.33;	author jmc;	state Exp;
branches;
next	1.60;

1.60
date	2005.04.15.23.21.20;	author jmc;	state Exp;
branches;
next	1.59;

1.59
date	2005.04.08.18.46.16;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2005.04.02.00.14.44;	author jmc;	state Exp;
branches;
next	1.57;

1.57
date	2004.03.27.16.52.43;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2003.06.06.10.29.41;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2003.05.27.13.21.19;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2003.03.22.08.55.01;	author david;	state Exp;
branches;
next	1.53;

1.53
date	2003.03.20.07.26.33;	author jmc;	state Exp;
branches;
next	1.52;

1.52
date	2003.01.13.19.16.34;	author kjell;	state Exp;
branches;
next	1.51;

1.51
date	2003.01.13.19.13.26;	author kjell;	state Exp;
branches;
next	1.50;

1.50
date	2002.09.18.07.36.07;	author deraadt;	state Exp;
branches
	1.50.2.1;
next	1.49;

1.49
date	2002.02.19.21.11.22;	author miod;	state Exp;
branches;
next	1.48;

1.48
date	2001.10.05.14.45.53;	author mpech;	state Exp;
branches;
next	1.47;

1.47
date	2001.08.03.15.21.16;	author mpech;	state Exp;
branches;
next	1.46;

1.46
date	2001.07.01.22.05.50;	author angelos;	state Exp;
branches;
next	1.45;

1.45
date	2001.06.26.23.24.11;	author angelos;	state Exp;
branches;
next	1.44;

1.44
date	2001.06.26.05.44.00;	author mpech;	state Exp;
branches;
next	1.43;

1.43
date	2001.06.25.06.00.35;	author angelos;	state Exp;
branches;
next	1.42;

1.42
date	2001.06.25.03.30.23;	author provos;	state Exp;
branches;
next	1.41;

1.41
date	2001.06.22.12.15.45;	author mpech;	state Exp;
branches;
next	1.40;

1.40
date	2001.06.01.06.21.29;	author angelos;	state Exp;
branches;
next	1.39;

1.39
date	2001.03.01.16.11.17;	author aaron;	state Exp;
branches;
next	1.38;

1.38
date	2000.12.21.21.01.17;	author aaron;	state Exp;
branches;
next	1.37;

1.37
date	2000.12.12.00.29.21;	author angelos;	state Exp;
branches;
next	1.36;

1.36
date	2000.11.20.08.00.01;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2000.10.27.18.57.32;	author aaron;	state Exp;
branches;
next	1.34;

1.34
date	2000.10.13.18.56.50;	author aaron;	state Exp;
branches;
next	1.33;

1.33
date	2000.09.29.04.03.18;	author angelos;	state Exp;
branches;
next	1.32;

1.32
date	2000.09.22.05.14.45;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2000.04.28.06.58.58;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2000.04.22.01.07.01;	author angelos;	state Exp;
branches;
next	1.29;

1.29
date	2000.04.22.01.05.29;	author angelos;	state Exp;
branches;
next	1.28;

1.28
date	2000.04.03.21.19.36;	author aaron;	state Exp;
branches;
next	1.27;

1.27
date	2000.01.10.22.51.12;	author angelos;	state Exp;
branches;
next	1.26;

1.26
date	99.10.07.21.48.34;	author angelos;	state Exp;
branches;
next	1.25;

1.25
date	99.10.05.21.16.03;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	99.09.23.04.12.04;	author alex;	state Exp;
branches;
next	1.23;

1.23
date	99.08.26.12.52.15;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	99.07.09.13.35.46;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	99.07.03.20.41.20;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	99.05.16.19.56.26;	author alex;	state Exp;
branches;
next	1.19;

1.19
date	99.03.11.01.35.04;	author pjanzen;	state Exp;
branches;
next	1.18;

1.18
date	99.03.02.15.40.37;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.02.24.23.35.43;	author angelos;	state Exp;
branches;
next	1.16;

1.16
date	99.02.24.23.33.23;	author angelos;	state Exp;
branches;
next	1.15;

1.15
date	99.02.23.03.49.51;	author angelos;	state Exp;
branches;
next	1.14;

1.14
date	99.02.18.10.09.05;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	98.12.30.10.25.29;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	98.12.29.12.01.25;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	98.10.31.23.17.40;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	98.09.26.01.14.16;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	98.09.01.16.38.20;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.05.24.23.46.59;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	98.05.18.21.23.11;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.05.18.21.12.50;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	98.03.05.09.30.59;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	97.11.05.10.13.43;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.10.24.13.11.52;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	97.09.07.18.24.40;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.09.07.09.53.05;	author provos;	state Exp;
branches;
next	;

1.50.2.1
date	2003.01.12.06.01.50;	author kjell;	state Exp;
branches;
next	1.50.2.2;

1.50.2.2
date	2003.01.12.06.06.35;	author kjell;	state Exp;
branches;
next	;


desc
@@


1.84
log
@+.Xr ipsec.conf 5 ,
from rob pierce
@
text
@.\" $OpenBSD: ipsec.4,v 1.83 2015/02/16 16:38:54 naddy Exp $
.\"
.\" Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Niels Provos.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" Manual page, using -mandoc macros
.\"
.Dd $Mdocdate: February 16 2015 $
.Dt IPSEC 4
.Os
.Sh NAME
.Nm ipsec
.Nd IP Security Protocol
.Sh DESCRIPTION
IPsec is a pair of protocols,
Encapsulating Security Payload (ESP)
and Authentication Header (AH),
which provide security services for IP datagrams.
.Pp
Both protocols may be enabled or disabled using the following
.Xr sysctl 3
variables in
.Pa /etc/sysctl.conf .
By default, both protocols are enabled:
.Pp
.Bl -tag -width "net.inet.esp.enableXX" -offset indent -compact
.It net.inet.esp.enable
Enable the ESP IPsec protocol
.It net.inet.ah.enable
Enable the AH IPsec protocol
.El
.Pp
There are four main security properties provided by IPsec:
.Bl -inset -offset indent
.It Confidentiality
\- Ensure it is hard for anyone but the
receiver to understand what data has been communicated.
For example, ensuring the secrecy of passwords when logging
into a remote machine over the Internet.
.It Integrity
\- Guarantee that the data does not get changed
in transit.
If you are on a line carrying invoicing data you
probably want to know that the amounts and account numbers
are correct and have not been modified by a third party.
.It Authenticity
\- Sign your data so that others can see that it
is really you that sent it.
It is clearly nice to know that documents are not forged.
.It Replay protection
\- We need ways to ensure a datagram is processed only once, regardless
of how many times it is received.
That is, it should not be possible for an attacker
to record a transaction (such as a bank account withdrawal), and then
by replaying it verbatim cause the peer to think a new message
(withdrawal request) had been received.
WARNING: as per the standard's specification, replay protection is not
performed when using manual-keyed IPsec (e.g. when using
.Xr ipsecctl 8 ) .
.El
.Ss IPsec Protocols
IPsec provides these services using two new protocols:
Authentication Header (AH), and
Encapsulating Security Payload (ESP).
.Pp
ESP can provide the properties authentication, integrity, replay protection,
and confidentiality of the data
(it secures everything in the packet that follows the IP header).
Replay protection requires authentication and
integrity (these two always go together).
Confidentiality (encryption) can be used with or without
authentication/integrity.
Similarly, one could use authentication/integrity with or without
confidentiality.
.Pp
AH provides authentication, integrity, and replay protection
(but not confidentiality).
The main difference between the authentication features of
AH and ESP is that AH also authenticates portions of the IP
header of the packet
(such as the source/destination addresses).
ESP authenticates only the packet payload.
.\".Pp
.\"A third protocol is available which is highly relevant to IPsec: IPComp.
.\"IPComp is a protocol used to reduce the size of IP datagrams
.\"(i.e. it provides compression).
.\"See
.\".Xr ipcomp 4
.\"for further information.
.Ss Authentication Header (AH)
AH works by computing a value that depends on all of the payload
data, some of the IP header data, and a certain secret value
(the authentication key).
This value is then sent with the rest of each packet.
The receiver performs the same computation, and if the value matches,
he knows no one tampered with the data (integrity), the address information
(authenticity) or a sequence number (replay protection).
He knows this because the secret authentication key makes sure no
active attacker (man-in-the-middle) can recompute the correct value after
altering the packet.
The algorithms used to compute these values are called hash algorithms and are
parameters in the SA, just like the authentication key.
.Ss Encapsulating Security Payload (ESP)
ESP optionally does almost everything that AH does
except that it does not protect the outer IP
header but furthermore it encrypts the payload data with an encryption
algorithm using a secret encryption key.
Only the ones knowing this key can decrypt the data, thus providing
confidentiality.
Both the algorithm and the encryption key are parameters of the SA.
.Ss Security Associations (SAs)
These protocols require certain parameters for each connection, describing
exactly how the desired protection will be achieved.
These parameters are collected in an entity called a security association,
or SA for short.
Typical SA parameters include encryption algorithm, hash algorithm,
encryption key, and authentication key, to name a few.
When two peers have established matching SAs
(one at each end),
packets protected with one end's SA may be verified and/or decrypted
using the information in the other end's SA.
The only issue remaining is to ensure that both ends have matching SAs.
This may be done manually, or automatically using a key management daemon.
.Pp
Further information on manual SA establishment is described in
.Xr ipsec.conf 5 .
Information on automated key management for IKEv1 can be found in
.Xr isakmpd 8
and for IKEv2 in
.Xr iked.conf 5 .
.Ss Security Parameter Indexes (SPIs)
In order to identify an SA we need to have a unique name for it.
This name is a triplet, consisting of the destination address, security
parameter index (aka SPI) and the security protocol (ESP or AH).
Since the destination address is part of the name, an SA is necessarily a
unidirectional construct.
For a bidirectional communication channel, two SAs are required, one
outgoing and one incoming, where the destination address is our local
IP address.
The SPI is just a number that helps us make the name unique;
it can be arbitrarily chosen in the range 0x100 \- 0xffffffff.
The security protocol number should be 50 for ESP and 51 for AH,
as these are the protocol numbers assigned by IANA.
.Ss Modes of Operation
IPsec can operate in two modes, either tunnel or transport mode.
In transport mode the ordinary IP
header is used to deliver the packets to their endpoint;
in tunnel mode the ordinary IP
header just tells us the address of a security gateway
which knows how to verify/decrypt the payload and forward the
packet to a destination given by another IP
header contained in the protected payload.
Tunnel mode can be used for establishing virtual private networks (VPNs),
where parts of the networks can be spread out over an
unsafe public network, but security gateways at each subnet are responsible
for encrypting and decrypting the data passing over the public net.
An SA will contain information specifying
whether it is a tunnel or transport mode SA,
and for tunnels it will contain values to fill in into the outer IP header.
.Ss Lifetimes
The SA also holds a couple of other parameters, especially useful for
automatic keying, called lifetimes, which puts a limit on how much we can
use an SA for protecting our data.
These limits can be in wall-clock time or in volume of our data.
.Ss IPsec Examples
To better illustrate how IPsec works, consider a typical TCP packet:
.Pp
.Dl [IP header] [TCP header] [data...]
.Pp
If we apply ESP in transport mode to the above packet, we will get:
.Pp
.Dl [IP header] [ESP header] [TCP header] [data...]
.Pp
Everything after the ESP
header is protected by whatever services of ESP we are using
(authentication/integrity, replay protection, confidentiality).
This means the IP header itself is not protected.
.Pp
If we apply ESP in tunnel mode to the original packet, we would get:
.Pp
.Dl [IP header] [ESP header] [IP header] [TCP header] [data...]
.Pp
Again, everything after the ESP header is cryptographically protected.
Notice the insertion of an IP header between the ESP and TCP header.
This mode of operation allows us to hide who the true
source and destination addresses of a packet are
(since the protected and the unprotected IP
headers don't have to be exactly the same).
A typical application of this is in Virtual Private Networks (or VPNs),
where two firewalls use IPsec
to secure the traffic of all the hosts behind them.
For example:
.Bd -literal -offset indent
Net A <----> Firewall 1 <--- Internet ---> Firewall 2 <----> Net B
.Ed
.Pp
Firewall 1 and Firewall 2 can protect all communications between Net A
and Net B by using IPsec in tunnel mode, as illustrated above.
.Pp
This implementation makes use of a virtual interface,
.Nm enc0 ,
which can be used in packet filters to specify those packets that have
been or will be processed by IPsec.
.Pp
NAT can also be applied to
.Nm enc#
interfaces, but special care should be taken because of the interactions
between NAT and the IPsec flow matching, especially on the packet output path.
Inside the TCP/IP stack, packets go through the following stages:
.Bd -literal -offset indent
UL/R -> [X] -> PF/NAT(enc0) -> IPsec -> PF/NAT(IF) -> IF
UL/R <-------- PF/NAT(enc0) <- IPsec <- PF/NAT(IF) <- IF
.Ed
.Pp
With IF being the real interface and UL/R the Upper Layer or Routing code.
The [X]
stage on the output path represents the point where the packet
is matched against the IPsec flow database (SPD) to determine if and how
the packet has to be IPsec-processed.
If, at this point, it is determined that the packet should be IPsec-processed,
it is processed by the PF/NAT code.
Unless PF drops the packet, it will then be IPsec-processed, even if the
packet has been modified by NAT.
.Pp
Security Associations can be set up manually with
.Xr ipsecctl 8
or automatically with the
.Xr isakmpd 8
or
.Xr iked 8
key management daemons.
.Ss Additional Variables
A number of
.Xr sysctl 8
variables are relevant to
.Nm .
These are generally
.Va net.inet.ah.* ,
.Va net.inet.esp.* ,
.Va net.inet.ip.forwarding ,
.Va net.inet6.ip6.forwarding ,
and
.Va net.inet.ip.ipsec-* .
Full explanations can be found in
.Xr sysctl 3 ,
and variables can be set using the
.Xr sysctl 8
interface.
.Pp
A number of kernel options are also relevant to
.Nm .
See
.Xr options 4
for further information.
.Ss API Details
The following IP-level
.Xr setsockopt 2
and
.Xr getsockopt 2
options are specific to
.Nm ipsec .
A socket can specify security levels for three different categories:
.Bl -tag -width IP_ESP_NETWORK_LEVEL -offset 2n
.It IP_AUTH_LEVEL
Specifies the use of authentication for packets sent or received by the
socket.
.It IP_ESP_TRANS_LEVEL
Specifies the use of encryption in transport mode for packets sent or
received by the socket.
.It IP_ESP_NETWORK_LEVEL
Specifies the use of encryption in tunnel mode.
.El
.Pp
For each of the categories there are five possible levels which
specify the security policy to use in that category:
.Bl -tag -width IPSEC_LEVEL_REQUIRE -offset 2n
.It IPSEC_LEVEL_BYPASS
Bypass the default system security policy.
This option can only be used by privileged processes.
This level is necessary for the key management daemon,
.Xr isakmpd 8 .
.It IPSEC_LEVEL_AVAIL
If a Security Association is available it will be used for sending packets
by that socket.
.It IPSEC_LEVEL_USE
Use IP Security for sending packets but still accept packets which are not
secured.
.It IPSEC_LEVEL_REQUIRE
Use IP Security for sending packets and also require IP Security for
received data.
.It IPSEC_LEVEL_UNIQUE
The outbound Security Association will only be used by this socket.
.El
.Pp
When a new socket is created, it is assigned the default system security
level in each category.
These levels can be queried with
.Xr getsockopt 2 .
Only a privileged process can lower the security level with a
.Xr setsockopt 2
call.
.Pp
For example, a server process might want to accept only authenticated
connections to prevent session hijacking.
It would issue the following
.Xr setsockopt 2
call:
.Bd -literal -offset 4n
int level = IPSEC_LEVEL_REQUIRE;
error = setsockopt(s, IPPROTO_IP, IP_AUTH_LEVEL, &level, sizeof(int));
.Ed
.Pp
The system does guarantee that it will succeed at establishing the
required security associations.
In any case a properly configured key management daemon is required which
listens to messages from the kernel.
.Pp
A list of all security associations in the kernel tables can be
obtained using the
.Xr ipsecctl 8
command.
.Sh DIAGNOSTICS
A socket operation may fail with one of the following errors returned:
.Bl -tag -width [EINVAL]
.It Bq Er EACCES
An attempt was made to lower the security level below the system default
by a non-privileged process.
.It Bq Er EINVAL
The length of option field did not match or an unknown security level
was given.
.El
.Pp
.Xr netstat 1
can be used to obtain some statistics about AH and ESP usage, using the
.Fl p
flag.
Using the
.Fl r
flag,
.Xr netstat 1
displays information about IPsec flows.
.Pp
.Xr vmstat 8
displays information about memory use by IPsec with the
.Fl m
flag (look for
.Dq tdb
and
.Dq xform
allocations).
.Sh SEE ALSO
.Xr enc 4 ,
.\".Xr ipcomp 4 ,
.Xr options 4 ,
.Xr ipsec.conf 5 ,
.Xr iked 8 ,
.Xr ipsecctl 8 ,
.Xr isakmpd 8 ,
.Xr sysctl 8
.Sh HISTORY
IPsec was originally designed to provide security services
for Internet Protocol IPv6.
It has since been engineered to provide those services for
the original Internet Protocol, IPv4.
.Pp
The IPsec protocol design process was started in 1992 by
John Ioannidis, Phil Karn, and William Allen Simpson.
In 1995, the former wrote an implementation for
.Bsx .
Angelos D. Keromytis ported it to
.Ox
and
.Nx .
The latest transforms and new features were
implemented by Angelos D. Keromytis and Niels Provos.
.Sh AUTHORS
.An -nosplit
The authors of the IPsec code proper are
.An John Ioannidis ,
.An Angelos D. Keromytis ,
and
.An Niels Provos .
.Pp
.An Niklas Hallqvist
and
.An Niels Provos
are the authors of
.Xr isakmpd 8 .
.Pp
.An Eric Young Ap s
libdeslite was used in this implementation for the DES algorithm.
.Pp
.An Steve Reid Ap s
SHA-1 code was also used.
.Pp
The
.Xr setsockopt 2 Ns / Ns Xr getsockopt 2
interface follows somewhat loosely the
draft-mcdonald-simple-ipsec-api
(since expired, but still available from
.Lk ftp://ftp.kame.net/pub/internet-drafts/ ) .
.Sh BUGS
There's a lot more to be said on this subject.
This is just a beginning.
At the moment the socket options are not fully implemented.
@


1.83
log
@Replace \*(Lt \*(Le \*(Gt \*(Ge with literal < <= > >= respectively,
except for instances where \*(Le and \*(Ge are clearly understood as
mathematical symbols.  Discussed with schwarze@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.82 2015/01/29 07:48:51 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: January 29 2015 $
d380 1
@


1.82
log
@manual SAs described in ipsec.conf(5) not ipsecctl(8);
from paul gorman
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.81 2014/11/16 19:57:24 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: November 16 2014 $
d219 1
a219 1
Net A \*(Lt----\*(Gt Firewall 1 \*(Lt--- Internet ---\*(Gt Firewall 2 \*(Lt----\*(Gt Net B
d236 2
a237 2
UL/R -\*(Gt [X] -\*(Gt PF/NAT(enc0) -\*(Gt IPsec -\*(Gt PF/NAT(IF) -\*(Gt IF
UL/R \*(Lt-------- PF/NAT(enc0) \*(Lt- IPsec \*(Lt- PF/NAT(IF) \*(Lt- IF
@


1.81
log
@add some missing .An macros and remove some obsolete .Tn
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.80 2014/11/15 14:41:02 bentley Exp $
d33 1
a33 1
.Dd $Mdocdate: November 15 2014 $
d151 1
a151 1
.Xr ipsecctl 8 .
@


1.80
log
@Reduce instances of `` '' in manuals.

troff displays these as typographic quotes, but nroff implementations
almost always print them literally, which rarely has the intended effect
with modern fonts, even in stock xterm.

These uses of `` '' can be replaced either with more semantic alternatives
or with Dq, which prints typographic quotes in a UTF-8 locale (but will
automatically fall back to `` '' in an ASCII locale).

improvements and ok schwarze@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.79 2012/08/15 19:17:02 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 15 2012 $
d401 1
d403 4
a406 1
John Ioannidis, Angelos D. Keromytis, and Niels Provos.
d408 4
a411 1
Niklas Hallqvist and Niels Provos are the authors of
d414 2
a415 2
Eric Young's libdeslite was used in this implementation for the
DES algorithm.
d417 2
a418 1
Steve Reid's SHA-1 code was also used.
@


1.79
log
@use Lk for links;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.78 2010/06/07 08:38:09 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 7 2010 $
d371 5
a375 1
flag (look for ``tdb'' and ``xform'' allocations).
@


1.78
log
@make clearer the relationship between isakmpd and ikev1; and iked and ikev2;
ok reyk
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.77 2007/05/31 19:19:50 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d413 1
a413 1
.Pa ftp://ftp.kame.net/pub/internet-drafts/ ) .
@


1.77
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.76 2006/08/31 11:46:39 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d152 4
a155 2
Information on automated key management may be found in
.Xr isakmpd 8 .
d254 3
a256 1
key management daemon.
d376 1
@


1.76
log
@make this page less ipv4-centric, and shuffle;
inout/ok mcbride hshoexer
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.75 2006/08/29 18:14:26 jmc Exp $
d33 1
a33 1
.Dd September 5, 1997
@


1.75
log
@ACKNOWLEDGEMENTS -> AUTHORS;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.74 2006/08/29 17:57:28 jmc Exp $
a57 7
The original Internet Protocol, IPv4,
does not inherently provide any
protection to transferred data.
Furthermore, it does not even guarantee that the sender is who he
claims to be.
IPsec tries to remedy this by providing the required security services for
IP datagrams.
d376 5
@


1.74
log
@remove some unhelpful Xrs; ok hshoexer
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.73 2006/08/29 17:51:02 jmc Exp $
d393 1
a393 1
.Sh ACKNOWLEDGMENTS
@


1.73
log
@comment out ipcomp stuff for now; ok hshoexer
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.72 2006/08/29 17:23:41 jmc Exp $
a375 1
.Xr sysctl 3 ,
a376 3
.Xr icmp 4 ,
.Xr inet 4 ,
.Xr ip 4 ,
a377 1
.Xr netintro 4 ,
a378 2
.Xr tcp 4 ,
.Xr udp 4 ,
@


1.72
log
@move the NOTE section into the main body;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.71 2006/05/26 08:54:04 jmc Exp $
d115 7
a121 7
.Pp
A third protocol is available which is highly relevant to IPsec: IPComp.
IPComp is a protocol used to reduce the size of IP datagrams
(i.e. it provides compression).
See
.Xr ipcomp 4
for further information.
d381 1
a381 1
.Xr ipcomp 4 ,
@


1.71
log
@remove unneeded .Pp;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.70 2006/05/26 04:02:59 deraadt Exp $
d39 7
a45 3
.Sh NOTE
.Tn IPsec
may be enabled or disabled using the following
a56 5
.Sh DESCRIPTION
IPsec is a pair of protocols,
Encapsulating Security Payload (ESP)
and Authentication Header (AH),
which provide security services for IP datagrams.
@


1.70
log
@let us not talk about ipsecadm and vpn anymore; ok reyk
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.69 2005/12/12 11:56:47 jmc Exp $
a190 1
.Pp
@


1.69
log
@fix typo;

from tamas tevesz;
ok hshoexer
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.68 2005/11/27 10:58:23 jmc Exp $
d92 1
a92 1
.Xr ipsecadm 8 ) .
d158 1
a158 3
Further information on manual SA establishment is described in both
.Xr ipsecadm 8
and
a191 2
Further information on setting up VPNs is described in
.Xr vpn 8 .
d257 1
a257 3
Security Associations can be set up manually with the
.Xr ipsecadm 8
and
d259 1
a259 1
utilities, or automatically with the
a387 1
.Xr ipsecadm 8 ,
d390 1
a390 2
.Xr sysctl 8 ,
.Xr vpn 8
@


1.68
log
@remove trailing whitespace;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.67 2005/11/26 23:32:34 hshoexer Exp $
d248 1
a248 1
UL/R \*(Lt-------- PF/NAT(enc0) \*(Lt- IPsec -\*(Gt PF/NAT(IF) \*(Lt- IF
@


1.67
log
@Now as kernfs is gone, tell people to use ipsecctl(8).  Suggested by deraadt@@
ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.66 2005/11/24 12:08:16 pedro Exp $
d356 1
a356 1
.Xr ipsecctl 8 
@


1.66
log
@Remove kernfs, okay deraadt@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.65 2005/08/19 15:45:47 jmc Exp $
d353 5
@


1.65
log
@ipsecctl(8) can be used for manual setups too;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.64 2005/04/16 00:19:36 jmc Exp $
a352 6
.Pp
A list of all security associations in the kernel tables can be
obtained via the kernfs file
.Aq Pa ipsec ,
typically in
.Aq Pa /kern/ipsec .
@


1.64
log
@replace `<' and `>';
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.63 2005/04/16 00:10:47 jmc Exp $
d91 1
a91 1
performed when using manual-keyed IPsec (e.g., when using
d158 4
a161 2
Further information on manual SA establishment is described in
.Xr ipsecadm 8 .
d263 3
a265 1
utility or automatically with the
d396 1
@


1.63
log
@document options(4);
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.62 2005/04/15 23:31:06 jmc Exp $
d228 1
a228 1
Net A <----> Firewall 1 <--- Internet ---> Firewall 2 <----> Net B
d245 2
a246 2
UL/R -> [X] -> PF/NAT(enc0) -> IPsec -> PF/NAT(IF) -> IF
UL/R <-------- PF/NAT(enc0) <- IPsec -> PF/NAT(IF) <- IF
@


1.62
log
@shuffle sections into a more logical order;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.61 2005/04/15 23:27:33 jmc Exp $
d264 1
a264 1
.Ss Additional Sysctl Variables
d281 6
d388 1
@


1.61
log
@mention vpn(8);
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.60 2005/04/15 23:21:20 jmc Exp $
a122 18
.Ss Security Associations (SAs)
These protocols require certain parameters for each connection, describing
exactly how the desired protection will be achieved.
These parameters are collected in an entity called a security association,
or SA for short.
Typical SA parameters include encryption algorithm, hash algorithm,
encryption key, and authentication key, to name a few.
When two peers have established matching SAs
(one at each end),
packets protected with one end's SA may be verified and/or decrypted
using the information in the other end's SA.
The only issue remaining is to ensure that both ends have matching SAs.
This may be done manually, or automatically using a key management daemon.
.Pp
Further information on manual SA establishment is described in
.Xr ipsecadm 8 .
Information on automated key management may be found in
.Xr isakmpd 8 .
d144 18
d264 17
a348 17
.Ss Additional Sysctl Variables
A number of
.Xr sysctl 8
variables are relevant to
.Nm .
These are generally
.Va net.inet.ah.* ,
.Va net.inet.esp.* ,
.Va net.inet.ip.forwarding ,
.Va net.inet6.ip6.forwarding ,
and
.Va net.inet.ip.ipsec-* .
Full explanations can be found in
.Xr sysctl 3 ,
and variables can be set using the
.Xr sysctl 8
interface.
@


1.60
log
@mention sysctl variables;
idea from msf@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.59 2005/04/08 18:46:16 jmc Exp $
d191 3
@


1.59
log
@document ipcomp(4);
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.58 2005/04/02 00:14:44 jmc Exp $
d329 17
d372 1
d383 1
@


1.58
log
@various tweaks;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.57 2004/03/27 16:52:43 deraadt Exp $
d116 7
d359 1
@


1.57
log
@Nm ipsec; kevlo jmc
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.56 2003/06/06 10:29:41 jmc Exp $
d46 2
a47 1
.Bl -tag -width xxxxxxxxxxxxxxxxxxxxx
d54 4
a57 10
.Tn IPsec
is a pair of protocols,
.Tn ESP
(for Encapsulating Security
Payload) and
.Tn AH
(for Authentication Header), which provide
security services for
.Tn IP
datagrams.
d59 1
a59 2
The original Internet Protocol -
.Tn IPv4 -
d64 3
a66 6
.Tn IPsec
tries to remedy this by providing the required security services for
.Tn IP
datagrams.
There are four main security properties provided by
.Tn IPsec :
d69 1
a69 1
- Ensure it is hard for anyone but the
d74 1
a74 1
- Guarantee that the data does not get changed
d80 1
a80 1
- Sign your data so that others can see that it
d84 1
a84 1
- We need ways to ensure a datagram is processed only once, regardless
d86 1
a86 1
I.e. it should not be possible for an attacker
d90 1
a90 1
WARNING: as per the standards specification, replay protection is not
d95 7
a101 13
.Tn IPsec
provides these services using two new protocols:
.Tn AH ,
Authentication Header, and
.Tn ESP ,
Encapsulating Security Payload.
.Pp
.Tn ESP
can provide the properties authentication, integrity, replay protection, and
confidentiality of the data (it secures everything in the packet that
follows the
.Tn IP
header).
d109 2
a110 3
.Tn AH
provides authentication, integrity, and replay protection (but not
confidentiality).
d112 4
a115 11
.Tn AH
and
.Tn ESP
is that
.Tn AH
also authenticates portions of the
.Tn IP
header of the packet (such as the source/destination
addresses).
.Tn ESP
authenticates only the packet payload.
d120 2
a121 6
or
.Tn SA
for short.
Typical
.Tn SA
parameters include encryption algorithm, hash algorithm,
d123 1
a123 2
When two peers have established matching
.Tn SAs
d125 3
a127 7
packets protected with one end's
.Tn SA
may be verified and/or decrypted
using the information in the other end's
.Tn SA .
The only issue remaining is to ensure that both ends have matching
.Tn SAs .
d130 1
a130 3
Further information on manual
.Tn SA
establishment is described in
d135 3
a137 6
.Tn AH
works by computing a value that depends on all of the payload
data, some of the
.Tn IP
header data, and a certain secret value (the
authentication key).
d148 2
a149 6
.Tn ESP
optionally does almost everything that
.Tn AH
does except that it does not
protect the outer
.Tn IP
d164 3
a166 6
The SPI is just a number that helps us make the name unique, it can be
arbitrarily chosen in the range 0x100 - 0xffffffff.
The security protocol number should be 50 for
.Tn ESP
and 51 for
.Tn AH ,
d169 7
a175 11
.Tn IPsec
can operate in two modes, either tunnel or transport mode.
In transport mode the ordinary
.Tn IP
header is used to deliver the packets to their endpoint,
in tunnel mode the ordinary
.Tn IP
header just tells us the address of a
security gateway, knowing how to verify/decrypt the payload and forward the
packet to a destination given by another
.Tn IP
d177 2
a178 2
Tunnel mode can be used for establishing VPNs, virtual
private networks, where parts of the networks can be spread out over an
d181 3
a183 4
An SA will hold information telling if it is a tunnel or transport mode SA,
and for tunnels, it will contain values to fill in into the outer
.Tn IP
header.
d190 12
a201 8
To better illustrate how
.Tn IPsec
works, consider a typical
.Tn TCP
packet:
.Bd -literal -offset indent
[IP header] [TCP header] [data...]
.Ed
d203 1
a203 6
If we apply
.Tn ESP
in transport mode to the above packet, we will get:
.Bd -literal -offset indent
[IP header] [ESP header] [TCP header] [data...]
.Ed
d205 1
a205 16
where everything after the
.Tn ESP
header is protected by whatever services of
.Tn ESP
we are using (authentication/integrity, replay protection,
confidentiality).
This means the
.Tn IP
header itself is not protected.
.Pp
If we apply
.Tn ESP
in tunnel mode to the original packet, we would get:
.Bd -literal -offset indent
[IP header] [ESP header] [IP header] [TCP header] [data...]
.Ed
d207 2
a208 11
where, again, everything after the
.Tn ESP
header is cryptographically
protected.
Notice the insertion of an
.Tn IP
header between the
.Tn ESP
and
.Tn TCP
header.
d210 2
a211 3
source and destination addresses of a packet are (since the protected
and the unprotected
.Tn IP
d214 1
a214 2
where two firewalls use
.Tn IPsec
d222 1
a222 3
and Net B by using
.Tn IPsec
in tunnel mode, as illustrated above.
d224 1
a224 1
This implementation makes use of a virtual interface
d227 1
a227 2
been or will be processed by
.Tn IPsec .
d239 3
a241 8
With
.Tn IF
being the real interface and
.Tn UL/R
the Upper Layer or Routing code.
The
.Tn [X]
Stage on the output path represents the point where the packet
d255 1
a255 2
The following
.Tn IP-level
d262 1
a262 1
.Bl -tag -width IP_ESP_NETWORK_LEVEL
d275 1
a275 1
.Bl -tag -width IPSEC_LEVEL_REQUIRE
d319 3
a321 3
.Aq Pa ipsec
(typically in
.Aq Pa /kern/ipsec ) .
d326 1
a326 1
when an attempt is made to lower the security level below the system default
d334 1
a334 5
can be used to obtain some statistics about
.Tn AH
and
.Tn ESP
usage, using the
d341 1
a341 3
displays information about
.Tn IPsec
flows.
d359 2
a360 4
The
.Tn IPsec
protocol design process was started in 1992 by John Ioannidis, Phil Karn
and William Allen Simpson.
d370 2
a371 3
The authors of the
.Tn IPsec
code proper are John Ioannidis, Angelos D. Keromytis, and Niels Provos.
d382 1
a382 1
.Xr setsockopt 2 / Ns Xr getsockopt 2
d384 3
a386 3
draft-mcdonald-simple-ipsec-api (since expired, but
still available from
.Pa ftp://ftp.kame.net/pub/internet-drafts/ )
@


1.56
log
@- section reorder
- some macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.55 2003/05/27 13:21:19 jmc Exp $
d37 1
a37 1
.Nm IPsec
@


1.55
log
@little cleanup;
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.54 2003/03/22 08:55:01 david Exp $
a437 4
.Sh BUGS
There's a lot more to be said on this subject.
This is just a beginning.
At the moment the socket options are not fully implemented.
d449 13
d481 4
a484 13
.Sh HISTORY
The
.Tn IPsec
protocol design process was started in 1992 by John Ioannidis, Phil Karn
and William Allen Simpson.
In 1995, the former wrote an implementation for
.Bsx .
Angelos D. Keromytis ported it to
.Ox
and
.Nx .
The latest transforms and new features were
implemented by Angelos D. Keromytis and Niels Provos.
@


1.54
log
@replace tabs following .It macro with spaces; output is the same
ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.53 2003/03/20 07:26:33 jmc Exp $
a102 1
.Pp
a138 1
.Pp
d150 1
a150 1
When two peers have established matching 
d157 1
a157 1
.Tn SA.
a167 1
.Pp
a183 1
.Pp
a195 1
.Pp
a211 1
.Pp
a232 1
.Pp
a237 1
.Pp
d306 1
a306 1
.Tn IPsec.
a337 1
.Pp
d345 1
a345 1
.Xr ipsec 4 .
d451 1
a451 1
.Xr isakmpd 8
d468 1
a468 1
interface follows somewhat loosely the 
@


1.53
log
@typos;

ok millert@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.52 2003/01/13 19:16:34 kjell Exp $
d77 1
a77 1
.It	Confidentiality
d82 1
a82 1
.It	Integrity
d88 1
a88 1
.It	Authenticity
d92 1
a92 1
.It	Replay protection
@


1.52
log
@ESP=encapsulatING security payload.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.51 2003/01/13 19:13:26 kjell Exp $
d119 1
a119 1
integrity (these two go always together).
d156 1
a156 1
.Tn SA ,
d160 1
a160 1
The only issue remaining left is to ensure that both ends have matching
d202 1
a202 1
In order to identify a SA we need to have a unique name for it.
d205 1
a205 1
Since the destination address is part of the name, a SA is necessarily a
d210 1
a210 1
The SPI is just a number that helps us making the name unique, it can be
d235 1
a235 1
A SA will hold information telling if it is a tunnel or transport mode SA,
d243 1
a243 1
use a SA for protecting our data.
d415 1
a415 2
.Aq Pa /kern/ipsec
).
@


1.51
log
@Clean up some language, structure. ok niklas@@, mpech@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.50 2002/09/18 07:36:07 deraadt Exp $
d110 1
a110 1
Encapsulated Security Payload.
@


1.50
log
@no photurisd
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.49 2002/02/19 21:11:22 miod Exp $
d41 1
a41 1
is enabled with the following
d44 2
a45 1
.Pa /etc/sysctl.conf :
d60 3
a62 1
security services for IP datagrams.
d64 2
a65 4
The internet protocol,
.Tn IP ,
aka
.Tn IPv4 ,
d67 3
a69 2
protection to your transferred data.
It does not even guarantee that the sender is who he says he is.
d71 5
a75 3
tries to remedy this.
There are several kinds of properties you might want to add to your
communication, the most common are:
d78 1
a78 1
- Make sure it is hard for anyone but the
d80 1
a80 1
You do not want anyone to see your passwords when logging
d83 2
a84 2
- Guarantee that the data does not get changed on
the way.
d87 1
a87 1
are correct and not altered while in-transit.
d93 6
a98 9
- We need ways to ensure a transaction can only be carried out once unless
we are authorized to repeat it.
I.e. it should not be possible for someone
to record a transaction, and then replaying it verbatim, in order to get an
effect of multiple transactions being received by the peer.
Consider the attacker has got to know what the traffic is all about by other
means than cracking the encryption, and that the traffic causes events
favourable for him, like depositing money into his account.
We need to make sure he cannot just replay that traffic later.
d104 1
d106 1
a106 2
can provide all of these properties, in two new protocols,
called
d108 1
a108 1
Authentication header, and
d110 1
a110 1
Encapsulated security payload.
d113 1
a113 1
can provide authentication, integrity, replay protection, and
d128 3
a130 1
Its main difference with
d134 1
a134 2
also secures
parts of the
d136 1
a136 1
header of the packet (like the source/destination
d138 2
d141 3
a143 2
These protocols need some parameters for each connection, telling
exactly how the wanted protection will be added.
d145 24
a168 12
or SA for short.
Typical parameters are: encryption algorithm, hash algorithm,
encryption key, authentication key etc.
When two peers have setup matching SAs at both ends, packets protected with
one end's SA, will be possible to verify and/or decrypt using the other
end's SA.
The only problem left is to see that both ends have matching SAa, which
can be done manually, or automatically with a key management daemon.
.Pp
Further information on manual SA establishment is described in
.Xr ipsecadm 8 ,
and we provide a key management daemon called
d171 1
d173 1
a173 1
works by doing a computation of a value depending on all of the payload
d176 4
a179 4
header data and a certain secret value, the
authentication key and sending this value along with the rest of each
packet.
The receiver will do the same computation, and if the value matches,
d182 5
a186 4
He knows this because the secret authentication key makes sure no man in the
middle can recompute the correct value after altering the packet.
The algorithms used for the computations are called hash algorithms and is
a parameter in the SA, just like the authentication key.
d188 1
d201 1
d204 2
a205 2
parameter index (aka SPI) and the security protocol.
Since the destination address is part of the name, a SA is a
d207 1
a207 1
For a bidirectional communication channel, two SAs are needed, one
d218 1
d240 1
d246 1
d347 1
d373 1
a373 1
This level is necessary for key management daemons like
d478 4
a481 2
interface follows somewhat loosely the draft-mcdonald-simple-ipsec-api,
which is work in progress.
@


1.50.2.1
log
@AH, ESP enabled by default now. While here, clean up the language a bit
ok and suggestions by niklas@@, mpech@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.50 2002/09/18 07:36:07 deraadt Exp $
d41 1
a41 1
may be enabled or disabled using the following
d44 1
a44 2
.Pa /etc/sysctl.conf .
By default, both protocols are enabled:
d59 1
a59 3
security services for
.Tn IP
datagrams.
d61 4
a64 2
The original Internet Protocol -
.Tn IPv4 -
d66 2
a67 3
protection to transferred data.
Furthermore, it does not even guarantee that the sender is who he
claims to be.
d69 3
a71 5
tries to remedy this by providing the required security services for
.Tn IP
datagrams.
There are four main security properties provided by
.Tn IPsec :
d74 1
a74 1
- Ensure it is hard for anyone but the
d76 1
a76 1
For example, ensuring the secrecy of passwords when logging
d79 2
a80 2
- Guarantee that the data does not get changed
in transit.
d83 1
a83 1
are correct and have not been modified by a third party.
d89 9
a97 6
- We need ways to ensure a datagram is processed only once, regardless
of how many times it is received.
I.e. it should not be possible for an attacker
to record a transaction (such as a bank account withdrawal), and then
by replaying it verbatim cause the peer to think a new message
(withdrawal request) had been received.
a102 1
.Ss IPsec Protocols
d104 2
a105 1
provides these services using two new protocols:
d107 1
a107 1
Authentication Header, and
d109 1
a109 1
Encapsulated Security Payload.
d112 1
a112 1
can provide the properties authentication, integrity, replay protection, and
d127 1
a127 3
The main difference between the authentication features of
.Tn AH
and
d131 2
a132 1
also authenticates portions of the
d134 1
a134 1
header of the packet (such as the source/destination
a135 2
.Tn ESP
authenticates only the packet payload.
d137 2
a138 3
.Ss Security Associations (SAs)
These protocols require certain parameters for each connection, describing
exactly how the desired protection will be achieved.
d140 12
a151 24
or
.Tn SA
for short.
Typical
.Tn SA
parameters include encryption algorithm, hash algorithm,
encryption key, and authentication key, to name a few.
When two peers have established matching 
.Tn SAs
(one at each end),
packets protected with one end's
.Tn SA ,
may be verified and/or decrypted
using the information in the other end's
.Tn SA.
The only issue remaining left is to ensure that both ends have matching
.Tn SAs .
This may be done manually, or automatically using a key management daemon.
.Pp
Further information on manual
.Tn SA
establishment is described in
.Xr ipsecadm 8 .
Information on automated key management may be found in
a153 1
.Ss Authentication Header (AH)
d155 1
a155 1
works by computing a value that depends on all of the payload
d158 4
a161 4
header data, and a certain secret value (the
authentication key).
This value is then sent with the rest of each packet.
The receiver performs the same computation, and if the value matches,
d164 4
a167 5
He knows this because the secret authentication key makes sure no
active attacker (man-in-the-middle) can recompute the correct value after
altering the packet.
The algorithms used to compute these values are called hash algorithms and are
parameters in the SA, just like the authentication key.
a168 1
.Ss Encapsulating Security Payload (ESP)
a180 1
.Ss Security Parameter Indexes (SPIs)
d183 2
a184 2
parameter index (aka SPI) and the security protocol (ESP or AH).
Since the destination address is part of the name, a SA is necessarily a
d186 1
a186 1
For a bidirectional communication channel, two SAs are required, one
a196 1
.Ss Modes of Operation
a217 1
.Ss Lifetimes
a222 1
.Ss IPsec Examples
a322 1
.Ss API Details
d348 1
a348 1
This level is necessary for the key management daemon,
d453 2
a454 4
interface follows somewhat loosely the 
draft-mcdonald-simple-ipsec-api (since expired, but
still available from
.Pa ftp://ftp.kame.net/pub/internet-drafts/ )
@


1.50.2.2
log
@No, not on this branch. grr.
@
text
@d41 1
a41 1
is enabled with the following
d44 2
a45 1
.Pa /etc/sysctl.conf :
d60 3
a62 1
security services for IP datagrams.
d64 2
a65 4
The internet protocol,
.Tn IP ,
aka
.Tn IPv4 ,
d67 3
a69 2
protection to your transferred data.
It does not even guarantee that the sender is who he says he is.
d71 5
a75 3
tries to remedy this.
There are several kinds of properties you might want to add to your
communication, the most common are:
d78 1
a78 1
- Make sure it is hard for anyone but the
d80 1
a80 1
You do not want anyone to see your passwords when logging
d83 2
a84 2
- Guarantee that the data does not get changed on
the way.
d87 1
a87 1
are correct and not altered while in-transit.
d93 6
a98 9
- We need ways to ensure a transaction can only be carried out once unless
we are authorized to repeat it.
I.e. it should not be possible for someone
to record a transaction, and then replaying it verbatim, in order to get an
effect of multiple transactions being received by the peer.
Consider the attacker has got to know what the traffic is all about by other
means than cracking the encryption, and that the traffic causes events
favourable for him, like depositing money into his account.
We need to make sure he cannot just replay that traffic later.
d104 1
d106 1
a106 2
can provide all of these properties, in two new protocols,
called
d108 1
a108 1
Authentication header, and
d110 1
a110 1
Encapsulated security payload.
d113 1
a113 1
can provide authentication, integrity, replay protection, and
d128 3
a130 1
Its main difference with
d134 1
a134 2
also secures
parts of the
d136 1
a136 1
header of the packet (like the source/destination
d138 2
d141 3
a143 2
These protocols need some parameters for each connection, telling
exactly how the wanted protection will be added.
d145 24
a168 12
or SA for short.
Typical parameters are: encryption algorithm, hash algorithm,
encryption key, authentication key etc.
When two peers have setup matching SAs at both ends, packets protected with
one end's SA, will be possible to verify and/or decrypt using the other
end's SA.
The only problem left is to see that both ends have matching SAa, which
can be done manually, or automatically with a key management daemon.
.Pp
Further information on manual SA establishment is described in
.Xr ipsecadm 8 ,
and we provide a key management daemon called
d171 1
d173 1
a173 1
works by doing a computation of a value depending on all of the payload
d176 4
a179 4
header data and a certain secret value, the
authentication key and sending this value along with the rest of each
packet.
The receiver will do the same computation, and if the value matches,
d182 5
a186 4
He knows this because the secret authentication key makes sure no man in the
middle can recompute the correct value after altering the packet.
The algorithms used for the computations are called hash algorithms and is
a parameter in the SA, just like the authentication key.
d188 1
d201 1
d204 2
a205 2
parameter index (aka SPI) and the security protocol.
Since the destination address is part of the name, a SA is a
d207 1
a207 1
For a bidirectional communication channel, two SAs are needed, one
d218 1
d240 1
d246 1
d347 1
d373 1
a373 1
This level is necessary for key management daemons like
d478 4
a481 2
interface follows somewhat loosely the draft-mcdonald-simple-ipsec-api,
which is work in progress.
@


1.49
log
@IPsec is written ``IPsec'', not ``IPSec''.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.48 2001/10/05 14:45:53 mpech Exp $
d151 1
a151 3
and we provide two key management daemons,
.Xr photurisd 8
and
a319 2
.Xr photurisd 8
or
d321 1
a321 1
key management daemons.
a348 2
.Xr photurisd 8
or
d436 1
a436 2
.Xr isakmpd 8 ,
.Xr photurisd 8 ,
@


1.48
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.47 2001/08/03 15:21:16 mpech Exp $
d300 2
a301 2
UL/R -> [X] -> PF/NAT(enc0) -> IPSec -> PF/NAT(IF) -> IF
UL/R <-------- PF/NAT(enc0) <- IPSec -> PF/NAT(IF) <- IF
d314 1
a314 1
If, at this point, it is determined that the packet should be IPSec-processed,
@


1.47
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.46 2001/07/01 22:05:50 angelos Exp $
d66 2
a67 2
protection to your transferred data.  It does not even guarantee that
the sender is who he says he is.
d69 2
a70 2
tries to remedy this.  There
are several kinds of properties you might want to add to your
d80 2
a81 1
the way.  If you are on a line carrying invoicing data you
d86 2
a87 2
is really you that sent it.  It is clearly nice to know that
documents are not forged.
d90 2
a91 1
we are authorized to repeat it.  I.e. it should not be possible for someone
d93 7
a99 6
effect of multiple transactions being received by the peer.  Consider the
attacker has got to know what the traffic is all about by other means than
cracking the encryption, and that the traffic causes events favourable for him,
like depositing money into his account.  We need to make sure he cannot just
replay that traffic later. WARNING: as per the standards specification, replay
protection is not performed when using manual-keyed IPsec (e.g., when using
d116 7
a122 4
header). Replay protection requires authentication and
integrity (these two go always together). Confidentiality (encryption)
can be used with or without authentication/integrity. Similarly,
one could use authentication/integrity with or without confidentiality.
d126 2
a127 1
confidentiality). Its main difference with
d138 3
a140 2
exactly how the wanted protection will be added.  These parameters are
collected in an entity called a security association, or SA for short.
d142 5
a146 4
encryption key, authentication key etc.  When two peers have setup
matching SAs at both ends, packets protected with one end's SA, will
be possible to verify and/or decrypt using the other end's SA.  The
only problem left is to see that both ends have matching SAa, which
d162 2
a163 1
packet.  The receiver will do the same computation, and if the value matches,
d165 5
a169 5
(authenticity) or a sequence number (replay protection).  He knows this because
the secret authentication key makes sure no man in the middle can recompute the
correct value after altering the packet.  The algorithms used for the
computations are called hash algorithms and is a parameter in the SA, just
like the authentication key.
d177 17
a193 14
header but furthermore it encrypts the payload data
with an encryption algorithm using a secret encryption key.  Only the ones
knowing this key can decrypt the data, thus providing confidentiality.  Both
the algorithm and the encryption key are parameters of the SA.
.Pp
In order to identify a SA we need to have a unique name for it.  This name is
a triplet, consisting of the destination address, security parameter index
(aka SPI) and the security protocol.  Since the destination address is part
of the name, a SA is a unidirectional construct.  For a bidirectional
communication channel, two SAs are needed, one outgoing and one incoming,
where the destination address is our local IP address.  The SPI is just a
number that helps us making the name unique, it can be arbitrarily chosen
in the range 0x100 - 0xffffffff.  The security protocol number should be 50
for
d200 2
a201 2
can operate in two modes, either tunnel or transport mode.  In transport
mode the ordinary
d210 2
a211 2
header contained in the
protected payload.  Tunnel mode can be used for establishing VPNs, virtual
d214 3
a216 3
for encrypting and decrypting the data passing over the public net.  A SA
will hold information telling if it is a tunnel or transport mode SA, and for
tunnels, it will contain values to fill in into the outer
d222 2
a223 2
use a SA for protecting our data.  These limits can be in wall-clock time
or in volume of our data.
d246 2
a247 1
confidentiality). This means the
d261 2
a262 1
protected. Notice the insertion of an
d268 2
a269 1
header. This mode of operation allows us to hide who the true
d273 2
a274 2
headers don't have to be exactly the same). A
typical application of this is in Virtual Private Networks (or VPNs),
d277 2
a278 1
to secure the traffic of all the hosts behind them. For example:
d290 2
a291 2
which can be used in packet filters to specify those
packets that have been or will be processed by
d313 3
a315 2
the packet has to be IPsec-processed. If, at this point, it is determined
that the packet should be IPSec-processed, it is processed by the PF/NAT code.
d350 2
a351 2
Bypass the default system security policy. This option can only be used
by privileged processes.
d388 3
a390 3
required security associations.  In any case a properly configured
key management daemon is required which listens to messages from the
kernel.
d416 2
a417 1
flag.  Using the
d430 2
a431 1
There's a lot more to be said on this subject. This is just a beginning.
d466 2
a467 2
and William Allen Simpson. In 1995, the former wrote an
implementation for
@


1.46
log
@IPF cleanups; openbsd@@davidkrause.com
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.45 2001/06/26 23:24:11 angelos Exp $
a50 1
.Pp
@


1.45
log
@PF-related text/references (jsyn@@nthought.com)
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.44 2001/06/26 05:44:00 mpech Exp $
d278 1
a278 2
.Xr ipnat 8
can also be applied to
@


1.44
log
@we sort SEE ALSO by alpha && section.

millert@@ ok.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.43 2001/06/25 06:00:35 angelos Exp $
d285 2
a286 2
UL/R -> [X] -> IPF/NAT(enc0) -> IPSec -> IPF/NAT(IF) -> IF
UL/R <-------- IPF/NAT(enc0) <- IPSec -> IPF/NAT(IF) <- IF
d299 2
a300 2
that the packet should be IPSec-processed, it is processed by the IPF/NAT code.
Unless IPF drops the packet, it will then be IPsec-processed, even if the
@


1.43
log
@Alpha order for SEE ALSO references.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.42 2001/06/25 03:30:23 provos Exp $
d420 3
a424 1
.Xr netintro 4 ,
a425 2
.Xr tcp 4 ,
.Xr udp 4 ,
@


1.42
log
@humpa humpa puff nat is back
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.41 2001/06/22 12:15:45 mpech Exp $
d420 2
d423 1
a425 3
.Xr ipsecadm 8 ,
.Xr isakmpd 8 ,
.Xr photurisd 8 ,
@


1.41
log
@o) remove unnecessary .Pp;
o) remove unnecessary .Nm args;
o) closes .Bl;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) sort SEE ALSO;
o) better -mdoc style;
o) typos;

aaron@@ ok.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.40 2001/06/01 06:21:29 angelos Exp $
d278 25
a302 25
.\" .Xr ipnat 8
.\" can also be applied to
.\" .Nm enc#
.\" interfaces, but special care should be taken because of the interactions
.\" between NAT and the IPsec flow matching, especially on the packet output path.
.\" Inside the TCP/IP stack, packets go through the following stages:
.\" .Bd -literal -offset indent
.\" UL/R -> [X] -> IPF/NAT(enc0) -> IPSec -> IPF/NAT(IF) -> IF
.\" UL/R <-------- IPF/NAT(enc0) <- IPSec -> IPF/NAT(IF) <- IF
.\" .Ed
.\" .Pp
.\" With
.\" .Tn IF
.\" being the real interface and
.\" .Tn UL/R
.\" the Upper Layer or Routing code.
.\" The
.\" .Tn [X]
.\" Stage on the output path represents the point where the packet
.\" is matched against the IPsec flow database (SPD) to determine if and how
.\" the packet has to be IPsec-processed. If, at this point, it is determined
.\" that the packet should be IPSec-processed, it is processed by the IPF/NAT code.
.\" Unless IPF drops the packet, it will then be IPsec-processed, even if the
.\" packet has been modified by NAT.
.\" .Pp
@


1.40
log
@No more IPF/IPNAT.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.39 2001/03/01 16:11:17 aaron Exp $
d98 1
a98 2
.Xr ipsecadm 8
).
a413 1
.Br
a419 1
.Xr isakmpd 8 ,
d424 1
d426 1
a426 1
.Xr vpn 8 .
@


1.39
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.38 2000/12/21 21:01:17 aaron Exp $
d279 25
a303 25
.Xr ipnat 8
can also be applied to
.Nm enc#
interfaces, but special care should be taken because of the interactions
between NAT and the IPsec flow matching, especially on the packet output path.
Inside the TCP/IP stack, packets go through the following stages:
.Bd -literal -offset indent
UL/R -> [X] -> IPF/NAT(enc0) -> IPSec -> IPF/NAT(IF) -> IF
UL/R <-------- IPF/NAT(enc0) <- IPSec -> IPF/NAT(IF) <- IF
.Ed
.Pp
With
.Tn IF
being the real interface and
.Tn UL/R
the Upper Layer or Routing code.
The
.Tn [X]
Stage on the output path represents the point where the packet
is matched against the IPsec flow database (SPD) to determine if and how
the packet has to be IPsec-processed. If, at this point, it is determined
that the packet should be IPSec-processed, it is processed by the IPF/NAT code.
Unless IPF drops the packet, it will then be IPsec-processed, even if the
packet has been modified by NAT.
.Pp
@


1.38
log
@Various repairs, $Id$ tags added, etc.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.37 2000/12/12 00:29:21 angelos Exp $
d156 1
a156 1
he knows noone tampered with the data (integrity), the address information
@


1.37
log
@Remove references to ipsec-acl
@
text
@d1 2
a2 1
.\" $OpenBSD: ipsec.4,v 1.36 2000/11/20 08:00:01 deraadt Exp $
@


1.36
log
@various Xr fixes; nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.35 2000/10/27 18:57:32 aaron Exp $
a48 6
.It net.inet.ip.ipsec-acl
Enable IPsec ingress packet filtering.  See
.Xr ipsecadm 8
and
.Xr sysctl 3
for more details on use and semantics.
@


1.35
log
@Minor nit: print IPsec in bold under NAME section by using Nm; nate@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.34 2000/10/13 18:56:50 aaron Exp $
d310 1
a310 1
.Xr ipsecadm 1
@


1.34
log
@Purely mdoc fixes.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.33 2000/09/29 04:03:18 angelos Exp $
d36 1
a36 1
.Tn IPsec
@


1.33
log
@Update manpage for IPF rules on enc0 -- cedric@@wireless-networks.com
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.32 2000/09/22 05:14:45 millert Exp $
d285 2
a286 2
can also be applied to 
.Nm enc# 
d295 1
a295 1
With 
d297 1
a297 1
being the real interface and 
d299 2
a300 2
the Upper Layer or Routing code. 
The 
@


1.32
log
@Correctly format "setsockopt(2)/getsockopt(2)" so that it doesn't hosed
the mdoc macros.  Use the .Bsx macro instead of saying "BSD/OS".
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.31 2000/04/28 06:58:58 deraadt Exp $
d281 1
a281 1
packets that have been successfully processed by
d283 25
@


1.31
log
@grammar
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.30 2000/04/22 01:07:01 angelos Exp $
d423 1
a423 2
.Xr setsockopt 2 / Ns
.Xr getsockopt 2
d432 1
a432 1
.Tn BSD/OS .
a438 1

@


1.30
log
@A bit more on netstat
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.29 2000/04/22 01:05:29 angelos Exp $
d430 1
a430 1
protocol started in 1992, by John Ioannidis, Phil Karn
@


1.29
log
@Document vmstat and netstat relevance to ipsec, add pointer to
net.inet.ip.ipsec-acl.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.28 2000/04/03 21:19:36 aaron Exp $
d381 7
a387 1
flag.
d412 1
a412 1
code proper are John Ioannidis, Angelos D. Keromytis and Niels Provos.
d414 1
a414 1
Niklas Hallqvist & Niels Provos are the authors of
@


1.28
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.27 2000/01/10 22:51:12 angelos Exp $
d39 1
a39 1
.Tn IPSec
d46 1
a46 1
Enable the ESP IPSec protocol
d48 7
a54 1
Enable the AH IPSec protocol
d58 1
a58 1
.Tn IPSec
d74 1
a74 1
.Tn IPSec
d107 1
a107 1
.Tn IPSec
d193 1
a193 1
.Tn IPSec
d220 1
a220 1
.Tn IPSec
d267 1
a267 1
.Tn IPSec
d275 1
a275 1
.Tn IPSec
d282 1
a282 1
.Tn IPSec.
d361 1
a361 1
.Aq Pa /kernfs/ipsec
d373 14
d405 1
a405 1
.Tn IPSec
d423 1
a423 1
.Tn IPSec
@


1.27
log
@Document /kern/ipsec
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.26 1999/10/07 21:48:34 angelos Exp $
d352 1
a352 1
obtained via the kernfs file 
@


1.26
log
@Add a reference to enc(4)
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.25 1999/10/05 21:16:03 aaron Exp $
d350 7
@


1.25
log
@.Xr isakmpd(4) -> .Xr isakmpd(8); kjell@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.24 1999/09/23 04:12:04 alex Exp $
d365 1
@


1.24
log
@Typo fixes.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.23 1999/08/26 12:52:15 aaron Exp $
d368 1
a368 1
.Xr isakmpd 4 ,
@


1.23
log
@spelling
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.22 1999/07/09 13:35:46 aaron Exp $
d306 1
a306 1
specify the security policy to use in that catagory:
@


1.22
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.21 1999/07/03 20:41:20 deraadt Exp $
d55 1
a55 1
(for Encapsulting Security
@


1.21
log
@talk about ipsec sysctl variables
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.20 1999/05/16 19:56:26 alex Exp $
d280 1
a280 1
utility or automatically with the 
@


1.20
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.19 1999/03/11 01:35:04 pjanzen Exp $
d38 13
@


1.19
log
@fix more comma splices that involve misuse of conjunctive adverbs
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.18 1999/03/02 15:40:37 aaron Exp $
d352 2
d355 1
a356 1
.Xr inet 4 ,
a358 2
.Xr icmp 4 ,
.Xr isakmpd 4 ,
@


1.18
log
@EACESS -> EACCES; garath@@code.ridgefield.org
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.17 1999/02/24 23:35:43 angelos Exp $
d157 1
a157 1
knowing this key can decrypt the data, hence confidentiality is provided.  Both
@


1.17
log
@Point to ipsecadm(8).
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.16 1999/02/24 23:33:23 angelos Exp $
d340 1
a340 1
.It Bq Er EACESS
@


1.16
log
@Update man page.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.15 1999/02/23 03:49:51 angelos Exp $
d359 1
a359 1
.Xr ipsecadm 1 ,
@


1.15
log
@Remove references to PF_ENCAP.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.14 1999/02/18 10:09:05 niklas Exp $
d82 4
a85 1
replay that traffic later.
@


1.14
log
@The long awaited IPsec intro text
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.13 1998/12/30 10:25:29 deraadt Exp $
a37 7
.Sh SYNOPSIS
.Fd #include <net/encap.h>
.Fd #include <netinet/ip_ipsp.h>
.Fd #include <netinet/ip_esp.h>
.Fd #include <netinet/ip_ah.h>
.Ft int
.Fn socket AF_ENCAP SOCK_RAW AF_UNSPEC
d332 2
a333 5
key management daemon is required which listens to
.Dv EMT_NOTIFY
messages on a
.Dv PF_ENCAP
socket.
@


1.13
log
@fix typo; jdb@@osbie.layer8.net
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.12 1998/12/29 12:01:25 deraadt Exp $
d36 1
a36 1
.Nm ipsec
d46 3
a48 2
.Tn IPSec is a pair of protocols,
.Nm ESP
d51 1
a51 1
.Nm AH
d53 1
a53 9
security services for IP datagrams. Specifically,
.Nm ESP
provides
confidentiality, connectionless
integrity, anti-replay service and limited traffic flow
confidentiality. It optionally provides data origin authentication.
.Nm AH
provides connectionless integrity, data
origin authentication and anti-replay service.
d55 207
a261 18
This is done by inserting the appropriate header
.Nm ( ESP
or
.Nm AH )
between the IP header and the payload. The inserted header,
along with the IP header destination address, provide enough
information to find the relevant state in the kernel (security
association) and handle the packet appropriately (decrypt,
authenticate etc.)
.Pp
An SA (Security Association) is uniquely defined by the
.Nm SPI
(Security Parameter Index), which is a 32-bit integer,
the remote IP address and the security protocol.
.Pp
The payload can be any of the usual IP protocols (TCP, UDP, ICMP
etc.) or IP itself, for those situations where IP tunneling is
required.
d266 2
a267 1
packets that have been successfully processed by IPSec.
d269 1
a269 2
Security Associations can be set up manually with
the
d271 1
a271 1
utility or the 
d332 1
a332 1
.Bd -literal
d370 6
a375 2
The authors of this code are John Ioannidis, Angelos D.
Keromytis and Niels Provos.
d388 3
a390 1
The IPsec protocol started in 1992, by John Ioannidis, Phil Karn
d392 7
a398 2
implementation for BSD/OS. Angelos D. Keromytis ported it to
OpenBSD and NetBSD. The latest transforms and new features were
@


1.12
log
@add isakmpd(8) references
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.11 1998/10/31 23:17:40 espie Exp $
d198 1
a198 1
.Xr getsockotp 2
@


1.11
log
@Fix netintro/intro muck-up.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.10 1998/09/26 01:14:16 provos Exp $
d89 1
a89 1
utility or the
d91 3
a93 1
key management daemon.
d121 3
a123 1
.Xr photurisd 8 .
d183 1
@


1.10
log
@add reference to vpn(8)
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.9 1998/09/01 16:38:20 deraadt Exp $
d174 1
a174 1
.Xr intro 4 ,
@


1.9
log
@more man page fixes; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.8 1998/05/24 23:46:59 provos Exp $
d180 2
a181 1
.Xr photurisd 8 .
@


1.8
log
@remove rt and rtdelete from list of man pages
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.7 1998/05/18 21:23:11 deraadt Exp $
d116 1
a116 1
Bypass the default system security policy, this options can only be used
@


1.7
log
@cleanup
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.6 1998/05/18 21:12:50 provos Exp $
a179 2
.Xr rt 1 ,
.Xr rtdelete 1 ,
@


1.6
log
@short describtion of setsockopt/getsockopt interface for ipsec.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.5 1998/03/05 09:30:59 provos Exp $
d46 2
a47 2
.Tn IPSec is a pair of protocols, 
.Nm ESP 
d49 2
a50 2
Payload) and 
.Nm AH 
d52 2
a53 2
security services for IP datagrams. Specifically, 
.Nm ESP 
d58 1
a58 1
.Nm AH 
d62 3
a64 3
This is done by inserting the appropriate header 
.Nm ( ESP 
or 
d69 1
a69 1
association) and handle the packet appropriately (decrypt, 
d74 1
a74 1
(Security Parameter Index), which is a 32-bit integer, 
d81 1
a81 1
This implementation makes use of a virtual interface 
d95 2
a96 1
.Xr setsockopt 2 / Ns
d98 1
a98 1
are specific to
d100 1
a100 1
A socket can specifiy security levels for three different categories:
d112 2
a113 2
For each of the categories there are five possible levels which specify the
security policy used for each category:
d117 2
a118 2
by privileged processes. This level is necessary for key management daemons
like
d127 2
a128 2
Use IP Security for sending packets and also require IP Security for receiving
data.
d132 5
a136 4
.Pp 
When a socket gets created it is assigned the default system security level
for each category which can be queried with
.Xr getsockopt 2 . 
d138 1
a138 1
.Xr setsockopt 2 
d141 4
a144 3
For example, a server process might want to accept only authenticated 
connections to prevent session hijacking. It would issue the following
.Xr setsockopt 2 
d148 1
a148 2
error = setsockopt(s, IPPROTO_IP, IP_AUTH_LEVEL, (u_char *)&level, 
		   sizeof(int));
d151 5
a155 5
The system can not guarantee that it will be able to establish the
required security associations, in any case a properly configured
key management daemon is required which listens to 
.Dv EMT_NOTIFY 
messages on a 
d192 1
a192 1
The 
d194 1
a194 1
.Xr getsockotp 2 
d198 1
a198 1
The IPsec protocol started in 1992, by John Ioannidis, Phil Karn 
@


1.5
log
@correct reference to photurisd.
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.4 1997/11/05 10:13:43 deraadt Exp $
d92 74
d168 2
d189 6
@


1.4
log
@lowercase first use of .Nm
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.3 1997/10/24 13:11:52 provos Exp $
d90 1
a90 1
.Xr photurisd 1
d104 1
a104 1
.Xr photurisd 1 .
@


1.3
log
@typo
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.2 1997/09/07 18:24:40 deraadt Exp $
d36 1
a36 1
.Nm IPSec
@


1.2
log
@typo
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.4,v 1.1 1997/09/07 09:53:05 provos Exp $
d90 1
a90 1
.Xr photurid 1
@


1.1
log
@initial documentation for ipsec.
@
text
@d1 1
a1 1
.\" $OpenBSD: startkey.1,v 1.3 1997/07/24 23:47:21 provos Exp $
d74 1
a74 1
(Securtiy Parameter Index), which is a 32-bit integer, 
@

