head	1.75;
access;
symbols
	OPENBSD_6_1_BASE:1.75
	OPENBSD_6_0:1.71.0.4
	OPENBSD_6_0_BASE:1.71
	OPENBSD_5_9:1.68.0.2
	OPENBSD_5_9_BASE:1.68
	OPENBSD_5_8:1.68.0.4
	OPENBSD_5_8_BASE:1.68
	OPENBSD_5_7:1.66.0.6
	OPENBSD_5_7_BASE:1.66
	OPENBSD_5_6:1.66.0.4
	OPENBSD_5_6_BASE:1.66
	OPENBSD_5_5:1.63.0.4
	OPENBSD_5_5_BASE:1.63
	OPENBSD_5_4:1.62.0.14
	OPENBSD_5_4_BASE:1.62
	OPENBSD_5_3:1.62.0.12
	OPENBSD_5_3_BASE:1.62
	OPENBSD_5_2:1.62.0.10
	OPENBSD_5_2_BASE:1.62
	OPENBSD_5_1_BASE:1.62
	OPENBSD_5_1:1.62.0.8
	OPENBSD_5_0:1.62.0.6
	OPENBSD_5_0_BASE:1.62
	OPENBSD_4_9:1.62.0.4
	OPENBSD_4_9_BASE:1.62
	OPENBSD_4_8:1.62.0.2
	OPENBSD_4_8_BASE:1.62
	OPENBSD_4_7:1.61.0.2
	OPENBSD_4_7_BASE:1.61
	OPENBSD_4_6:1.61.0.4
	OPENBSD_4_6_BASE:1.61
	OPENBSD_4_5:1.59.0.2
	OPENBSD_4_5_BASE:1.59
	OPENBSD_4_4:1.55.0.2
	OPENBSD_4_4_BASE:1.55
	OPENBSD_4_3:1.50.0.2
	OPENBSD_4_3_BASE:1.50
	OPENBSD_4_2:1.42.0.2
	OPENBSD_4_2_BASE:1.42
	OPENBSD_4_1:1.39.0.4
	OPENBSD_4_1_BASE:1.39
	OPENBSD_4_0:1.39.0.2
	OPENBSD_4_0_BASE:1.39
	OPENBSD_3_9:1.38.0.2
	OPENBSD_3_9_BASE:1.38
	OPENBSD_3_8:1.37.0.2
	OPENBSD_3_8_BASE:1.37
	OPENBSD_3_7:1.36.0.2
	OPENBSD_3_7_BASE:1.36
	OPENBSD_3_6:1.35.0.2
	OPENBSD_3_6_BASE:1.35
	OPENBSD_3_5:1.34.0.2
	OPENBSD_3_5_BASE:1.34
	OPENBSD_3_4:1.33.0.2
	OPENBSD_3_4_BASE:1.33
	OPENBSD_3_3:1.29.0.2
	OPENBSD_3_3_BASE:1.29
	OPENBSD_3_2:1.27.0.2
	OPENBSD_3_2_BASE:1.27
	OPENBSD_3_1:1.24.0.2
	OPENBSD_3_1_BASE:1.24
	OPENBSD_3_0:1.20.0.4
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9:1.20.0.2
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@# @;


1.75
date	2016.09.08.20.42.58;	author ratchov;	state Exp;
branches;
next	1.74;
commitid	qKNFiQnsT4iSVjBi;

1.74
date	2016.09.08.05.18.20;	author ratchov;	state Exp;
branches;
next	1.73;
commitid	mAiJglMpTjrR1Ke6;

1.73
date	2016.09.01.10.08.23;	author ratchov;	state Exp;
branches;
next	1.72;
commitid	xwR9WJUelJSrMie8;

1.72
date	2016.08.31.07.22.43;	author ratchov;	state Exp;
branches;
next	1.71;
commitid	u524ZaNwqXxsCXa2;

1.71
date	2016.06.18.07.59.30;	author ratchov;	state Exp;
branches;
next	1.70;
commitid	fEJswg099P796SWr;

1.70
date	2016.03.16.07.38.12;	author jmc;	state Exp;
branches;
next	1.69;
commitid	QVwitSTrelJoq296;

1.69
date	2016.03.16.06.46.39;	author ratchov;	state Exp;
branches;
next	1.68;
commitid	QZGe5AFBhlhD5xcQ;

1.68
date	2015.07.28.20.45.02;	author ratchov;	state Exp;
branches;
next	1.67;
commitid	eZrQAVJUnWy2oIFo;

1.67
date	2015.07.27.06.10.22;	author ratchov;	state Exp;
branches;
next	1.66;
commitid	wjV9dmUtNtu4TyqT;

1.66
date	2014.06.28.08.20.51;	author matthew;	state Exp;
branches;
next	1.65;
commitid	0Rgt8KjT3JwEuIZP;

1.65
date	2014.06.28.07.08.14;	author jmc;	state Exp;
branches;
next	1.64;
commitid	gY9hIpzFLLknCFgq;

1.64
date	2014.06.28.06.59.45;	author matthew;	state Exp;
branches;
next	1.63;
commitid	7rDk5oPDIf2Lw1Th;

1.63
date	2013.08.28.16.19.39;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2010.07.15.03.43.11;	author jakemsr;	state Exp;
branches;
next	1.61;

1.61
date	2009.06.27.14.28.39;	author jmc;	state Exp;
branches;
next	1.60;

1.60
date	2009.03.24.15.47.36;	author sobrado;	state Exp;
branches;
next	1.59;

1.59
date	2009.01.17.10.07.50;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2009.01.16.23.07.33;	author jakemsr;	state Exp;
branches;
next	1.57;

1.57
date	2008.10.27.07.53.24;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2008.10.26.15.07.25;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2008.06.26.05.42.06;	author ray;	state Exp;
branches;
next	1.54;

1.54
date	2008.05.26.08.08.51;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2008.05.26.00.36.08;	author jakemsr;	state Exp;
branches;
next	1.52;

1.52
date	2008.04.21.00.32.42;	author jakemsr;	state Exp;
branches;
next	1.51;

1.51
date	2008.03.22.11.05.31;	author ratchov;	state Exp;
branches;
next	1.50;

1.50
date	2007.12.06.19.41.28;	author deanna;	state Exp;
branches;
next	1.49;

1.49
date	2007.11.03.09.10.40;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2007.10.28.22.12.23;	author ratchov;	state Exp;
branches;
next	1.47;

1.47
date	2007.10.08.00.46.49;	author jakemsr;	state Exp;
branches;
next	1.46;

1.46
date	2007.10.03.21.49.12;	author jakemsr;	state Exp;
branches;
next	1.45;

1.45
date	2007.09.28.00.52.51;	author jakemsr;	state Exp;
branches;
next	1.44;

1.44
date	2007.09.17.13.46.11;	author jakemsr;	state Exp;
branches;
next	1.43;

1.43
date	2007.09.12.06.12.23;	author ratchov;	state Exp;
branches;
next	1.42;

1.42
date	2007.08.08.05.51.23;	author jakemsr;	state Exp;
branches;
next	1.41;

1.41
date	2007.07.06.04.40.20;	author jakemsr;	state Exp;
branches;
next	1.40;

1.40
date	2007.05.31.19.19.49;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2006.04.26.16.14.54;	author jason;	state Exp;
branches;
next	1.38;

1.38
date	2006.01.19.05.07.02;	author jakemsr;	state Exp;
branches;
next	1.37;

1.37
date	2005.08.08.01.47.06;	author mickey;	state Exp;
branches;
next	1.36;

1.36
date	2004.11.06.05.02.46;	author brad;	state Exp;
branches;
next	1.35;

1.35
date	2004.08.04.00.05.30;	author jaredy;	state Exp;
branches;
next	1.34;

1.34
date	2004.01.26.13.33.09;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2003.07.09.13.26.20;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2003.06.06.10.29.41;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2003.04.25.18.09.42;	author avsm;	state Exp;
branches;
next	1.30;

1.30
date	2003.03.28.09.47.20;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2003.03.14.10.07.35;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2002.12.13.16.36.52;	author naddy;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.30.22.02.13;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2002.06.30.21.45.25;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2002.05.23.09.30.34;	author mpech;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.08.01.51.25;	author frantzen;	state Exp;
branches;
next	1.23;

1.23
date	2002.02.12.18.03.44;	author mpech;	state Exp;
branches;
next	1.22;

1.22
date	2001.11.26.16.51.48;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	2001.11.13.18.26.53;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2001.03.07.23.58.49;	author todd;	state Exp;
branches;
next	1.19;

1.19
date	2001.03.01.16.11.16;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2001.01.13.19.53.51;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.13.15.35.58;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2001.01.11.18.52.53;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.09.16.51.53;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.18.02.38.21;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.13.18.56.49;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.30.17.14.57;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.27.18.30.49;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.30.21.46.38;	author alex;	state Exp;
branches;
next	1.9;

1.9
date	99.07.09.13.35.48;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	98.09.05.17.41.48;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.06.02.09.04.30;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	98.05.05.10.13.43;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	98.04.30.22.28.58;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	96.06.16.13.50.57;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.29.10.16.04;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.22.11.47.21;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.11.13.04.27.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.75
log
@Remove reference to /dev/sound*. With tweaks from jmc@@, thanks.
@
text
@.\"	$OpenBSD: audio.4,v 1.69 2016/03/16 06:46:39 ratchov Exp $
.\"	$NetBSD: audio.4,v 1.20 1998/05/28 17:27:15 augustss Exp $
.\"
.\" Copyright (c) 1996 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by John T. Kohl.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: March 16 2016 $
.Dt AUDIO 4
.Os
.Sh NAME
.Nm audio ,
.Nm mixer
.Nd device-independent audio driver layer
.Sh SYNOPSIS
.Cd "audio* at ..."
.Pp
.In sys/types.h
.In sys/ioctl.h
.In sys/audioio.h
.In string.h
.Sh DESCRIPTION
The
.Nm audio
driver provides support for various audio peripherals.
It provides a uniform programming interface layer above different
underlying audio hardware drivers.
The audio layer provides full-duplex operation if the
underlying hardware configuration supports it.
.Pp
There are three device files available for audio operation:
.Pa /dev/audio ,
.Pa /dev/audioctl ,
and
.Pa /dev/mixer .
.Pa /dev/audio
is used for recording or playback of digital samples.
.Pa /dev/mixer
is used to manipulate volume, recording source, or other audio mixer
functions.
.Pa /dev/audioctl
accepts the same
.Xr ioctl 2
operations as
.Pa /dev/audio ,
but no other operations.
In contrast to
.Pa /dev/audio ,
which has the exclusive open property,
.Pa /dev/audioctl
can be opened at any time and can be used to read the
.Nm audio
device variables while it is in use.
.Sh SAMPLING DEVICES
When
.Pa /dev/audio
is opened, it attempts to maintain the previous audio sample format and
record/playback mode.
In addition, if it is opened read-only
(write-only) the device is set to half-duplex record (play) mode with
recording (playing) unpaused.
.Pp
Only one process may hold open a sampling device at a given time
(although file descriptors may be shared between processes once the
first open completes).
.Pp
On a half-duplex device, either reads or writes are allowed,
but not both.
On a full-duplex device, reads and writes may operate
concurrently without interference.
.Pp
If a writing process does not call
.Xr write 2
frequently enough to provide samples at the pace the hardware
consumes them silence is inserted.
If a reading process does not call
.Xr read 2
frequently enough, it will simply miss samples.
.Pp
The
.Nm audio
device is accessed with
.Xr read 2
or
.Xr write 2 .
.Pp
The
.Nm audio
device, like most devices, can be used in
.Xr poll 2 ,
.Pp
The following
.Xr ioctl 2
commands are supported on the sample devices:
.Pp
.Bl -tag -width Ds -compact
.It Dv AUDIO_GETDEV Fa "audio_device_t *"
This command fetches the current hardware device information into the
.Vt audio_device_t *
argument.
.Bd -literal
typedef struct audio_device {
        char name[MAX_AUDIO_DEV_LEN];
        char version[MAX_AUDIO_DEV_LEN];
        char config[MAX_AUDIO_DEV_LEN];
} audio_device_t;
.Ed
.Pp
.It Dv AUDIO_SETPAR Fa "struct audio_swpar *"
.It Dv AUDIO_GETPAR Fa "struct audio_swpar *"
Set or get audio parameters as encoded in the
.Vt audio_swpar
structure.
.Bd -literal
struct audio_swpar {
	unsigned int sig;	/* if 1, encoding is signed */
	unsigned int le;	/* if 1, encoding is little-endian */
	unsigned int bits;	/* bits per sample */
	unsigned int bps;	/* bytes per sample */
	unsigned int msb;	/* if 1, bits are msb-aligned */
	unsigned int rate;	/* common play & rec sample rate */
	unsigned int pchan;	/* play channels */
	unsigned int rchan;	/* rec channels */
	unsigned int nblks;	/* number of blocks in play buffer */
	unsigned int round;	/* common frames per block */
};
.Ed
.Pp
When setting the device parameters with
.Dv AUDIO_SETPAR ,
the
.Vt audio_swpar
structure should first be initialized with
.Bd -literal
struct audio_swpar ap;

AUDIO_INITPAR(&ap);
.Ed
.Pp
and then only the values to be changed should be set.
This ensures that the software will work with future versions
of the driver.
The driver will attempt to set the given parameters; if the
device doesn't support them, it will choose other parameters.
Then the software must call
.Dv AUDIO_GETPAR
to obtain the parameters in use.
.Pp
The parameters are as follows:
.Bl -tag -width "round"
.It Va bits
Number of bits per sample: must be between 1 and 32.
.It Va bps
Bytes per sample; if specified, it must be large enough to hold all bits.
By default it's set to the smallest power of two large enough to hold
.Va bits .
.It Va sig
If set (i.e. non-zero) then the samples are signed,
otherwise they are unsigned.
.It Va le
If set, then the byte order is little endian;
if not it is big endian;
it's meaningful only if
.Va bps
> 1.
.It Va msb
If set, then the
.Va bits
are aligned in the packet to the most significant bit
(i.e. lower bits are padded),
otherwise to the least significant bit
(i.e. higher bits are padded).
It's meaningful only if
.Va bits
<
.Va bps
* 8.
.It Va rchan
The number of recorded channels; meaningful only if the
device is opened for reading.
.It Va pchan
The number of channels playing; meaningful only if
the device is opened for writing.
.It Va rate
The sampling frequency in Hz.
.It Va nblks
The number of blocks in the play buffer.
.It Va round
The audio block size.
.El
.Pp
.It Dv AUDIO_START
Start playback and/or recording immediately.
If the device is open for writing (playback), then
the play buffer must be filled with the
.Xr write 2
syscall.
The buffer size is obtained by multiplying
the
.Va nblks ,
.Va round ,
and
.Va bps
parameters obtained with
.Dv AUDIO_GETPAR .
.Pp
.It Dv AUDIO_STOP
Stop playback and recording immediately.
.Pp
.It Dv AUDIO_GETPOS Fa "struct audio_pos *"
Fetch an atomic snapshot of device timing information in the
.Vt audio_pos
structure.
.Bd -literal
struct audio_pos {
	unsigned int play_pos;	/* total bytes played */
	unsigned int play_xrun;	/* bytes of silence inserted */
	unsigned int rec_pos;	/* total bytes recorded */
	unsigned int rec_xrun;	/* bytes dropped */
};
.Ed
.Pp
The properties have the following meaning:
.Bl -tag -width "play_xrun"
.It Va play_pos
Total number of bytes played by the device since playback started
(a.k.a the device wall clock).
.It Va play_xrun
The number of bytes corresponding to silence played because
.Xr write 2
wasn't called fast enough.
.It Va rec_pos
Total number of bytes recorded by the device since recording started
(a.k.a the device wall clock).
.It Va rec_xrun
The number of bytes dropped because
.Xr read 2
wasn't called fast enough.
.El
.Pp
.It Dv AUDIO_GETSTATUS Fa "struct audio_status *"
Fetch the current device status from the audio driver in the
.Vt audio_status
structure.
This
.Xr ioctl 2
is intended for use with diagnostic tools
and is of no use to audio programs.
.Bd -literal
struct audio_status {
#define AUMODE_PLAY	0x01
#define AUMODE_RECORD	0x02
	int mode;	/* current mode */
	int pause;	/* not started yet */
	int active;	/* playing/recording in progress */
};
.Ed
.Pp
The properties have the following meaning:
.Bl -tag -width "active"
.It Va mode
The current mode determined by
.Xr open 2
flags.
.It Va pause
If set, indicates that
.Dv AUDIO_STOP
was called, and the device is not attempting to start.
.It Va active
If set, indicates that the device is playing and/or recording.
.El
.El
.Sh MIXER DEVICE
The
.Nm mixer
device,
.Pa /dev/mixer ,
may be manipulated with
.Xr ioctl 2
but does not support
.Xr read 2
or
.Xr write 2 .
It supports the following
.Xr ioctl 2
commands:
.Pp
.Bl -tag -width Ds -compact
.It Dv AUDIO_GETDEV Fa "audio_device_t *"
This command is the same as described above for the sampling devices.
.Pp
.It Dv AUDIO_MIXER_READ Fa "mixer_ctrl_t *"
.It Dv AUDIO_MIXER_WRITE Fa "mixer_ctrl_t *"
These commands read the current mixer state or set new mixer state for
the specified device
.Va dev .
.Va type
identifies which type of value is supplied in the
.Vt mixer_ctrl_t *
argument.
.Bd -literal
#define AUDIO_MIXER_CLASS  0
#define AUDIO_MIXER_ENUM   1
#define AUDIO_MIXER_SET    2
#define AUDIO_MIXER_VALUE  3
typedef struct mixer_ctrl {
	int dev;			/* input: nth device */
	int type;
	union {
		int ord;		/* enum */
		int mask;		/* set */
		mixer_level_t value;	/* value */
	} un;
} mixer_ctrl_t;

#define AUDIO_MIN_GAIN  0
#define AUDIO_MAX_GAIN  255
typedef struct mixer_level {
	int num_channels;
	u_char level[8];		/* [num_channels] */
} mixer_level_t;
#define AUDIO_MIXER_LEVEL_MONO	0
#define AUDIO_MIXER_LEVEL_LEFT	0
#define AUDIO_MIXER_LEVEL_RIGHT	1
.Ed
.Pp
For a mixer value, the
.Va value
field specifies both the number of channels and the values for each
channel.
If the channel count does not match the current channel count, the
attempt to change the setting may fail (depending on the hardware
device driver implementation).
For an enumeration value, the
.Va ord
field should be set to one of the possible values as returned by a prior
.Dv AUDIO_MIXER_DEVINFO
command.
The type
.Dv AUDIO_MIXER_CLASS
is only used for classifying particular
.Nm mixer
device types and is not used for
.Dv AUDIO_MIXER_READ
or
.Dv AUDIO_MIXER_WRITE .
.Pp
.It Dv AUDIO_MIXER_DEVINFO Fa "mixer_devinfo_t *"
This command is used iteratively to fetch audio
.Nm mixer
device information into the input/output
.Vt mixer_devinfo_t *
argument.
To query all the supported devices, start with an index field of
0 and continue with successive devices (1, 2, ...) until the
command returns an error.
.Bd -literal
typedef struct mixer_devinfo {
	int index;		/* input: nth mixer device */
	audio_mixer_name_t label;
	int type;
	int mixer_class;
	int next, prev;
#define AUDIO_MIXER_LAST	-1
	union {
		struct audio_mixer_enum {
			int num_mem;
			struct {
				audio_mixer_name_t label;
				int ord;
			} member[32];
		} e;
		struct audio_mixer_set {
			int num_mem;
			struct {
				audio_mixer_name_t label;
				int mask;
			} member[32];
		} s;
		struct audio_mixer_value {
			audio_mixer_name_t units;
			int num_channels;
			int delta;
		} v;
	} un;
} mixer_devinfo_t;
.Ed
.Pp
The
.Va label
field identifies the name of this particular mixer control.
The
.Va index
field may be used as the
.Va dev
field in
.Dv AUDIO_MIXER_READ
and
.Dv AUDIO_MIXER_WRITE
commands.
The
.Va type
field identifies the type of this mixer control.
Enumeration types are typically used for on/off style controls (e.g., a
mute control) or for input/output device selection (e.g., select
recording input source from CD, line in, or microphone).
Set types are similar to enumeration types but any combination
of the mask bits can be used.
.Pp
The
.Va mixer_class
field identifies what class of control this is.
This value is set to the index value used to query the class itself.
The
.Pq arbitrary
value set by the hardware driver may be determined by examining the
.Va mixer_class
field of the class itself,
a mixer of type
.Dv AUDIO_MIXER_CLASS .
For example, a mixer level controlling the input gain on the
.Dq line in
circuit would have a
.Va mixer_class
that matches an input class device with the name
.Dq inputs
.Dv ( AudioCinputs )
and would have a
.Va label
of
.Dq line
.Dv ( AudioNline ) .
Mixer controls which control audio circuitry for a particular audio
source (e.g., line-in, CD in, DAC output) are collected under the input class,
while those which control all audio sources (e.g., master volume,
equalization controls) are under the output class.
Hardware devices capable of recording typically also have a record class,
for controls that only affect recording,
and also a monitor class.
.Pp
The
.Va next
and
.Va prev
may be used by the hardware device driver to provide hints for the next
and previous devices in a related set (for example, the line in level
control would have the line in mute as its
.Dq next
value).
If there is no relevant next or previous value,
.Dv AUDIO_MIXER_LAST
is specified.
.Pp
For
.Dv AUDIO_MIXER_ENUM
mixer control types,
the enumeration values and their corresponding names are filled in.
For example, a mute control would return appropriate values paired with
.Dv AudioNon
and
.Dv AudioNoff .
For the
.Dv AUDIO_MIXER_VALUE
and
.Dv AUDIO_MIXER_SET
mixer control types, the channel count is
returned; the units name specifies what the level controls (typical
values are
.Dv AudioNvolume ,
.Dv AudioNtreble ,
and
.Dv AudioNbass ) .
.\" For AUDIO_MIXER_SET mixer control types, what is what?
.El
.Pp
By convention, all the mixer devices can be distinguished from other
mixer controls because they use a name from one of the
.Dv AudioC*
string values.
.Sh FILES
.Bl -tag -width /dev/audioctl -compact
.It Pa /dev/audio
.It Pa /dev/audioctl
.It Pa /dev/mixer
.El
.Sh SEE ALSO
.Xr aucat 1 ,
.Xr audioctl 1 ,
.Xr cdio 1 ,
.Xr mixerctl 1 ,
.Xr ioctl 2 ,
.Xr sio_open 3 ,
.Xr ac97 4 ,
.Xr uaudio 4 ,
.Xr audio 9
.\" .Sh BUGS
@


1.74
log
@While /dev/audio is in use, /dev/audioctl has read-only access to
device variables.
@
text
@d54 1
a54 1
There are four device files available for audio operation:
a55 1
.Pa /dev/sound ,
d60 1
a60 3
and
.Pa /dev/sound
are used for recording or playback of digital samples.
d68 1
a68 1
.Pa /dev/sound ,
d71 1
a71 1
.Pa /dev/sound ,
a79 2
or
.Pa /dev/sound
a84 5
In all respects
.Pa /dev/audio
and
.Pa /dev/sound
are identical.
a506 1
.It Pa /dev/sound
@


1.73
log
@Fix typo: replace AUDIO_GETINFO by AUDIO_GETPAR.
@
text
@d77 1
a77 1
can be opened at any time and can be used to manipulate the
d79 1
a79 1
device while it is in use.
@


1.72
log
@Delete unused ioctls and associated macros. Move macros that are still
used internally by low-level drivers from sys/audioio.h to
dev/audio_if.h instead of deleting them.
@
text
@d179 1
a179 1
.Dv AUDIO_GETINFO
@


1.71
log
@Add a new AUDIO_GETSTATUS ioctl to get various audio driver variables.
It's intended for use with diagnostic tools (like audioctl) and is of
no use to audio programs.
@
text
@a129 10
.It Dv AUDIO_RERROR Fa "int *"
.It Dv AUDIO_PERROR Fa "int *"
Obsolete.
These commands fetch the count of dropped input or output samples into
the
.Vt int *
argument, respectively.
There is no information regarding when in the sample stream
they were dropped.
.Pp
a140 186
.Pp
.It Dv AUDIO_GETFD Fa "int *"
This command returns 1 if in full-duplex mode, else 0.
.Pp
.It Dv AUDIO_GETENC Fa "audio_encoding_t *"
This command is used iteratively to fetch sample encoding
.Va name Ns s
and
.Va format_id Ns s
into the input/output
.Vt audio_encoding_t *
argument.
.Bd -literal
typedef struct audio_encoding {
	int index;      /* input: nth encoding */
	char name[MAX_AUDIO_DEV_LEN]; /* name of encoding */
	int encoding;   /* value for encoding parameter */
	int precision;  /* value for precision parameter */
	int bps;        /* value for bps parameter */
	int msb;        /* value for msb parameter */
} audio_encoding_t;
.Ed
.Pp
To query
all the supported encodings, start with an index field of 0 and
continue with successive encodings (1, 2, ...) until the command returns
an error.
.Pp
.It Dv AUDIO_SETFD Fa "int *"
Does nothing, left for compatibility; argument must point to a non-zero
integer if the device is opened in read-write mode.
.Pp
.It Dv AUDIO_GETPROPS Fa "int *"
This command gets a bit set of hardware properties.
If the hardware
has a certain property, the corresponding bit is set, otherwise it is not.
The properties can have the following values:
.Pp
.Bl -tag -width AUDIO_PROP_INDEPENDENT -compact
.It Dv AUDIO_PROP_FULLDUPLEX
The device admits full-duplex operation.
.It Dv AUDIO_PROP_INDEPENDENT
The device can set playing and recording channel counts independently.
.El
.Pp
.It Dv AUDIO_GETIOFFS Fa "audio_offset_t *"
.It Dv AUDIO_GETOOFFS Fa "audio_offset_t *"
Obsolete.
These commands fetch the number of bytes played or recorded.
The information is returned in the
.Vt audio_offset
structure.
.Bd -literal
typedef struct audio_offset {
	u_int	samples;   /* Total number of bytes transferred */
} audio_offset_t;
.Ed
.Pp
.It Dv AUDIO_GETINFO Fa "audio_info_t *"
.It Dv AUDIO_SETINFO Fa "audio_info_t *"
Get or set audio information as encoded in the
.Vt audio_info
structure.
.Bd -literal
typedef struct audio_info {
	struct	audio_prinfo play;   /* info for play (output) side */
	struct	audio_prinfo record; /* info for record (input) side */
	u_int	hiwat;		/* blocks count in play buffer */
	u_int	mode;		/* current device mode */
#define AUMODE_PLAY	0x01
#define AUMODE_RECORD	0x02
} audio_info_t;
.Ed
.Pp
When setting the current state with
.Dv AUDIO_SETINFO ,
the
.Vt audio_info
structure should first be initialized with
.Pp
.Dl "AUDIO_INITINFO(&info);"
.Pp
and then the particular values to be changed should be set.
This allows the audio driver to only set those things that you wish
to change and eliminates the need to query the device with
.Dv AUDIO_GETINFO
first.
.Pp
The
.Va mode
field is read-only and set to
.Dv AUMODE_PLAY ,
.Dv AUMODE_RECORD ,
or a bitwise OR combination of the three.
Only full-duplex audio devices support
simultaneous record and playback.
.Pp
.Va hiwat
contains the number of blocks in the kernel play buffer.
Writes to the audio devices will queue blocks until the play buffer
is full, at which point any more write calls will block
until space for at least one byte is available.
.Bd -literal
struct audio_prinfo {
	u_int	sample_rate;	/* sample rate in bit/s */
	u_int	channels;	/* number of channels, usually 1 or 2 */
	u_int	precision;	/* number of bits/sample */
	u_int	bps;		/* number of bytes/sample */
	u_int	msb;		/* data alignment */
	u_int	encoding;	/* data encoding (AUDIO_ENCODING_* below) */
	u_int	block_size;     /* size a block */
	/* Current state of device: */
	u_char	pause;		/* non-zero if paused, zero to resume */
	u_char	active;		/* non-zero if I/O is currently active */
};
.Ed
.Pp
The
.Nm
driver requires identical playback and
recording sample rates, sample encodings, and block durations.
.Pp
The
.Va encoding
parameter can have the following values:
.Pp
.Bl -tag -width AUDIO_ENCODING_SLINEAR_BE -compact
.It Dv AUDIO_ENCODING_ULAW
mu-law encoding, 8 bits/sample
.It Dv AUDIO_ENCODING_ALAW
A-law encoding, 8 bits/sample
.It Dv AUDIO_ENCODING_SLINEAR_LE
two's complement signed linear encoding with little endian byte order
.It Dv AUDIO_ENCODING_SLINEAR_BE
two's complement signed linear encoding with big endian byte order
.It Dv AUDIO_ENCODING_ULINEAR_LE
unsigned linear encoding with little endian byte order
.It Dv AUDIO_ENCODING_ULINEAR_BE
unsigned linear encoding with big endian byte order
.El
.Pp
The
.Va precision
parameter describes the number of bits of audio data per sample.
The
.Va bps
parameter describes the number of bytes of audio data per sample.
The
.Va msb
parameter describes the alignment of the data in the sample.
It is only meaningful when
.Va precision
/ NBBY <
.Va bps .
A value of 1 means the data is aligned to the most significant bit.
.Pp
.Va block_size
is the block size in bytes, which determines the frequency at which
blocking
.Xr read 2 ,
.Xr write 2 ,
or
.Xr poll 2 ,
wake up.
The generic
.Nm audio
driver layer and the hardware driver have the
opportunity to adjust this block size to get it within
implementation-required limits.
Normally the
.Va block_size
is recalculated
when other parameters changes.
.Pp
It is recommended to set
.Va block_size
at the same time as, or after, all other parameters have been set.
.Pp
.Va pause
returns the current pause/unpause state for recording or playback.
For
.Dv AUDIO_SETINFO ,
if the pause value is specified it will either pause
or unpause the particular direction.
In full-duplex the pause values for both directions must
be equal.
@


1.70
log
@knock out unused Pp in previous;
@
text
@d469 32
@


1.69
log
@Expose new audio ioctls that do one thing only: start and stop DMA,
set and get parameters. This is much simpler.

ok semarie, armani, tweaks from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.67 2015/07/27 06:10:22 ratchov Exp $
d31 1
a31 1
.Dd $Mdocdate: July 27 2015 $
a362 1
.Pp
@


1.68
log
@Add the AUDIO_GETPOS ioctl() to fetch a snapshot of the 4 counters
returned by AUDIO_GETxOFFS and AUDIO_xERROR ioctls.

ok deraadt
@
text
@d338 102
@


1.67
log
@Remove sections that describe features we don't support any longer.
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.66 2014/06/28 08:20:51 matthew Exp $
d31 1
a31 1
.Dd $Mdocdate: June 28 2014 $
d132 1
d198 1
d337 31
@


1.66
log
@espie points out <string.h> is needed for the AUDIO_INITINFO() macro
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.65 2014/06/28 07:08:14 jmc Exp $
d83 4
a86 3
is opened, it automatically configures the underlying driver for the
hardware's default sample format, or monaural 8-bit mu-law if a default
sample format has not been specified by the underlying driver.
d89 2
a90 6
recording (playing) unpaused and playing (recording) paused.
When
.Pa /dev/sound
is opened, it maintains the previous audio sample format and
record/playback mode.
In all other respects
d100 2
a101 7
On a half-duplex device, writes while recording is in progress will be
immediately discarded.
Similarly, reads while playback is in progress
will be filled with silence but delayed to return at the current
sampling rate.
If both playback and recording are requested on a half-duplex
device, playback mode takes precedence and recordings will get silence.
a103 11
If a full-duplex capable
.Nm audio
device is opened for both reading and writing,
it will start in half-duplex play mode with recording paused.
For proper full-duplex operation, after the device is opened for reading
and writing, full-duplex mode must be set and then recording must be unpaused.
On either type of device, if the playback mode is paused then silence is
played instead of the provided samples and, if recording is paused, then
the process blocks in
.Xr read 2
until recording is unpaused.
a108 8
If the
.Dv AUMODE_PLAY_ALL
mode is not set the writing process must
provide enough data via
subsequent write calls to
.Dq catch up
in time to the current audio
block before any more process-provided samples will be played.
d115 1
a115 1
device is normally accessed with
d118 1
a118 24
.Xr write 2
calls, but it can also be mapped into user memory with
.Xr mmap 2
(when supported by the device).
Once the device has been mapped it can no longer be accessed
by read or write; all access is by reading and writing to
the mapped memory.
The device appears as a block of memory
of size
.Va buffer_size
(as available via
.Dv AUDIO_GETINFO ) .
The device driver will continuously move data between this buffer
and the audio hardware, wrapping around at the end of the buffer.
To find out where the hardware is currently accessing data in the buffer the
.Dv AUDIO_GETIOFFS
and
.Dv AUDIO_GETOOFFS
calls can be used.
The playing and recording buffers are distinct and must be
mapped separately if both are to be used.
Only encodings that are not emulated (i.e., where
.Dv AUDIO_ENCODINGFLAG_EMULATED
is not set) work properly for a mapped device.
d123 1
a123 10
.Xr select 2 ,
can be set in non-blocking mode, and can be set (with an
.Dv FIOASYNC
.Xr ioctl 2 )
to send a
.Dv SIGIO
when I/O is possible.
The mixer device can be set to generate a
.Dv SIGIO
whenever a mixer value is changed.
a129 5
.It Dv AUDIO_FLUSH
This command stops all playback and recording, clears all queued
buffers, resets error counters, and restarts recording and playback as
appropriate for the current sampling mode.
.Pp
a138 10
.It Dv AUDIO_WSEEK Fa "u_long *"
This command fetches the count of bytes that are queued ahead of the
first sample in the most recent sample block written into its
.Vt u_long *
argument.
.Pp
.It Dv AUDIO_DRAIN
This command suspends the calling process until all queued playback
samples have been played by the hardware.
.Pp
d152 1
a152 1
This command returns the current setting of the full-duplex mode.
a169 2
	int flags;
#define AUDIO_ENCODINGFLAG_EMULATED 1 /* software emulation mode */
d179 2
a180 5
This command sets the device into full-duplex operation if its integer
argument has a non-zero value, or into half-duplex operation if it
contains a zero value.
If the device does not support full-duplex
operation, attempting to set full-duplex mode returns an error.
a190 3
.It Dv AUDIO_PROP_MMAP
The device can be used with
.Xr mmap 2 .
d192 1
a192 2
The device can set the playing and recording encoding parameters
independently.
d197 1
a197 6
These commands fetch the current offset in the input (output) buffer where
the audio hardware's DMA engine will be putting (getting) data.
They are mostly useful when the device
buffer is available in user space via the
.Xr mmap 2
call.
a203 2
	u_int	deltablks; /* Blocks transferred since last checked */
	u_int	offset;    /* Physical transfer offset in buffer */
a206 22
.It Dv AUDIO_GETRRINFO Fa "audio_bufinto_t *"
.It Dv AUDIO_GETPRINFO Fa "audio_bufinfo_t *"
These commands fetch the current information about the input or
output buffer, respectively.
The block size, high and low water marks and current position
are returned in the
.Vt audio_bufinfo
structure.
.Bd -literal
typedef struct audio_bufinfo {
	u_int	blksize;	/* block size */
	u_int	hiwat;		/* high water mark */
	u_int	lowat;		/* low water mark */
	u_int	seek;		/* current position */
} audio_bufinfo_t;
.Ed
.Pp
This information is mostly useful in input or output loops to determine
how much data to read or write, respectively.
Note, these ioctls were added to aid in porting third party applications
and libraries, and should not be used in new code.
.Pp
d216 1
a216 7
	u_int	monitor_gain;	     /* input to output mix */
	/* BSD extensions */
	u_int	blocksize;	/* H/W read/write block size */
	u_int	hiwat;		/* output high water mark */
	u_int	lowat;		/* output low water mark */
	u_char	output_muted;	/* toggle play mute */
	u_char	cspare[3];
a219 1
#define AUMODE_PLAY_ALL 0x04	/* do not do real-time correction */
d239 1
a239 1
field should be set to
a241 1
.Dv AUMODE_PLAY_ALL ,
a245 12
.Va blocksize
is used to attempt to set both play and record block sizes
to the same value, it is left for compatibility only and
its use is discouraged.
.Pp
.Va hiwat
and
.Va lowat
are used to control write behavior.
Writes to the audio devices will queue up blocks until the high-water
mark is reached, at which point any more write calls will block
until the queue is drained to the low-water mark.
d247 4
a250 9
and
.Va lowat
set those high- and low-water marks (in audio blocks).
The default for
.Va hiwat
is the maximum value and for
.Va lowat
75% of
.Va hiwat .
a258 5
	u_int	gain;		/* volume level */
	u_int	port;		/* selected I/O port */
	u_int	seek;		/* BSD extension */
	u_int	avail_ports;	/* available I/O ports */
	u_int	buffer_size;	/* total size audio buffer */
a260 2
	u_int	samples;	/* number of samples */
	u_int	eof;		/* End Of File (zero-size writes) counter */
a261 5
	u_char	error;		/* non-zero if underflow/overflow occurred */
	u_char	waiting;	/* non-zero if another process hangs in open */
	u_char	balance;	/* stereo channel balance */
	u_char	cspare[2];
	u_char	open;		/* non-zero if currently open */
d266 4
a269 6
Note:  many hardware audio drivers require identical playback and
recording sample rates, sample encodings, and channel counts.
The playing information is always set last and will prevail on such hardware.
If the hardware can handle different settings the
.Dv AUDIO_PROP_INDEPENDENT
property is set.
a279 6
.It Dv AUDIO_ENCODING_SLINEAR
two's complement signed linear encoding with the platform byte order
.It Dv AUDIO_ENCODING_ULINEAR
unsigned linear encoding with the platform byte order
.It Dv AUDIO_ENCODING_ADPCM
ADPCM encoding, 8 bits/sample
a304 45
The
.Va gain ,
.Va port ,
and
.Va balance
settings provide simple shortcuts to the richer
.Nm mixer
interface described below.
The
.Va gain
should be in the range
.Bq Dv AUDIO_MIN_GAIN , AUDIO_MAX_GAIN
and the balance in the range
.Bq Dv AUDIO_LEFT_BALANCE , AUDIO_RIGHT_BALANCE
with the normal setting at
.Dv AUDIO_MID_BALANCE .
.Pp
The input port should be a combination of:
.Pp
.Bl -tag -width AUDIO_MICROPHONE -compact
.It Dv AUDIO_MICROPHONE
to select microphone input.
.It Dv AUDIO_LINE_IN
to select line input.
.It Dv AUDIO_CD
to select CD input.
.El
.Pp
The output port should be a combination of:
.Pp
.Bl -tag -width AUDIO_HEADPHONE -compact
.It Dv AUDIO_SPEAKER
to select speaker output.
.It Dv AUDIO_HEADPHONE
to select headphone output.
.It Dv AUDIO_LINE_OUT
to select line output.
.El
.Pp
The available ports can be found in
.Va avail_ports .
.Pp
.Va buffer_size
is the total size of the audio buffer.
The buffer size divided by the
d306 7
a312 8
gives the maximum value for
.Va hiwat .
Currently the
.Va buffer_size
can only be read and not set.
.Pp
.Va block_size
sets the current audio block size.
a317 3
Upon return from an
.Dv AUDIO_SETINFO
call, the actual block_size set is returned in this field.
d320 2
a321 8
is calculated to correspond to 50ms of sound and it is recalculated
when the encoding parameter changes, but if the
.Va block_size
is set explicitly this value becomes sticky, i.e., it remains
even when the encoding is changed.
The stickiness can be cleared by reopening the device or setting the
.Va block_size
to 0.
a322 11
Care should be taken when setting the
.Va block_size
before other parameters.
If the device does not natively support the audio parameters, then the
internal block size may be scaled to a larger size to accommodate
conversion to a native format.
If the
.Va block_size
has been set, the internal block size will not be rescaled when the
parameters, and thus possibly the scaling factor, change.
This can result in a block size much larger than was originally requested.
a326 13
The
.Va seek
and
.Va samples
fields are only used for
.Dv AUDIO_GETINFO .
.Va seek
represents the count of
bytes pending;
.Va samples
represents the total number of bytes recorded or played, less those
that were dropped due to inadequate consumption/production rates.
.Pp
d333 2
a555 1
.Xr ossaudio 3 ,
d560 1
a560 5
.Sh BUGS
If the device is used in
.Xr mmap 2
it is currently always mapped for writing (playing) due to
VM system weirdness.
@


1.65
log
@Dv blah , Dv bleh
is more simply written as
Dv blah , bleh
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.64 2014/06/28 06:59:45 matthew Exp $
d44 1
@


1.64
log
@audio(4) has nothing to do with <string.h>
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.63 2013/08/28 16:19:39 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: August 28 2013 $
d472 1
a472 1
.Bq Dv AUDIO_MIN_GAIN , Dv AUDIO_MAX_GAIN
d474 1
a474 1
.Bq Dv AUDIO_LEFT_BALANCE , Dv AUDIO_RIGHT_BALANCE
@


1.63
log
@wording fix; original diff from remco, but i've reworded it to read better
ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.62 2010/07/15 03:43:11 jakemsr Exp $
d31 1
a31 1
.Dd $Mdocdate: July 15 2010 $
d41 3
a43 4
.Fd #include <sys/types.h>
.Fd #include <sys/ioctl.h>
.Fd #include <sys/audioio.h>
.Fd #include <string.h>
@


1.62
log
@add two new members to structs audio_encoding and audio_prinfo.
for both structs, the new members are 'bps' and 'msb', which
describe the number of bytes per sample and data alignment in the
sample, respectively.  drivers must properly set these fields in
the 'query_encoding', 'set_parameters' and 'get_default_params'
hardware interface methods.

discussed with ratchov, deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.61 2009/06/27 14:28:39 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: June 27 2009 $
d157 2
a158 2
The device driver will continuously move data from this buffer
from/to the audio hardware, wrapping around at the end of the buffer.
@


1.61
log
@sync description of struct audio_prinfo;
reported by frederic, documentation/6179
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.60 2009/03/24 15:47:36 sobrado Exp $
d31 1
a31 1
.Dd $Mdocdate: March 24 2009 $
d242 2
d393 2
d450 7
a456 2
For sample formats such as 8, 16, and 32-bit, where the number of audio data
bits is a power of 2,
d458 3
a460 4
is also exactly the size of each sample.
For other sample formats the sample size is the smallest power of
2 bits that the data can fit into.
For example the sample size of 20 and 24-bit formats is 32 bits.
@


1.60
log
@fix a few typographical errors.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.59 2009/01/17 10:07:50 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: January 17 2009 $
d388 1
a388 1
	u_int	sample_rate;	/* sample rate in samples/s */
d397 1
a397 1
	u_int	_ispare[1];
@


1.59
log
@typo fix - ok jakemsr - and add a comma;
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.58 2009/01/16 23:07:33 jakemsr Exp $
d31 1
a31 1
.Dd $Mdocdate: January 16 2009 $
d199 1
a199 1
argument, repectively.
d531 1
a531 1
internal block size may be scaled to a larger size to accomodate
d537 1
a537 1
This can result in a block size much larger than was orginally requested.
@


1.58
log
@deal with sample precisions that are not a power of 2.

discussed with and ok ratchov; manpage tweak from naddy, thanks
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.57 2008/10/27 07:53:24 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: October 27 2008 $
d446 1
a446 1
For ample formats such as 8, 16 and 32-bit, where the number of audio data
@


1.57
log
@sa_open -> sio_open, after recent changes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.56 2008/10/26 15:07:25 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: October 26 2008 $
d442 11
@


1.56
log
@add some audio/libsa cross refs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.55 2008/06/26 05:42:06 ray Exp $
d31 1
a31 1
.Dd $Mdocdate: June 26 2008 $
d772 1
a772 1
.Xr sa_open 3 ,
@


1.55
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.54 2008/05/26 08:08:51 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 26 2008 $
d772 1
@


1.54
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.53 2008/05/26 00:36:08 jakemsr Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
@


1.53
log
@
explain why, even though we support "sticky" block sizes, setting block
sizes before other parameters can cause problems.

ok ratchov@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.52 2008/04/21 00:32:42 jakemsr Exp $
d38 1
a38 1
.Dd $Mdocdate: April 21 2008 $
d522 1
d536 1
a536 1
at the same time as, or after all other parameters have been set.
@


1.52
log
@
allow low level audio drivers to specify a default sample format,
instead of 8-bit mono mulaw @@ 8kHz.

this is just the infrastructure; no drivers are specifying a default
yet.

ok ratchov@@, deanna@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.51 2008/03/22 11:05:31 ratchov Exp $
d38 1
a38 1
.Dd $Mdocdate: March 22 2008 $
d522 14
@


1.51
log
@add audio(4) driver the ability to use different block sizes for play and
record modes. This makes possible to have blocks of the same duration if the
play and record formats are different. The API change is backward
compatible, so it shouldn't be noticed by current audio ports.

ok jakemsr
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.50 2007/12/06 19:41:28 deanna Exp $
d38 1
a38 1
.Dd $Mdocdate: December 6 2007 $
d90 3
a92 2
is opened, it automatically directs the underlying driver to manipulate
monaural 8-bit mu-law samples.
d98 1
a98 1
is opened, it maintains the previous audio sample mode and
@


1.50
log
@Remove incomplete device Xr list.  The device pages already reference
audio(4), and the bus pages reference the devices, so there's no need
for audio(4) to try to keep up.

Requested by & ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.49 2007/11/03 09:10:40 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate: November 3 2007 $
d370 5
a391 21
.Pp
.Va blocksize
sets the current audio blocksize.
The generic
.Nm audio
driver layer and the hardware driver have the
opportunity to adjust this block size to get it within
implementation-required limits.
Upon return from an
.Dv AUDIO_SETINFO
call, the actual blocksize set is returned in this field.
Normally the
.Va blocksize
is calculated to correspond to 50ms of sound and it is recalculated
when the encoding parameter changes, but if the
.Va blocksize
is set explicitly this value becomes sticky, i.e., it remains
even when the encoding is changed.
The stickiness can be cleared by reopening the device or setting the
.Va blocksize
to 0.
d494 1
a494 1
.Va blocksize
d500 21
@


1.49
log
@add aucat(1) and cdio(1) to SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.48 2007/10/28 22:12:23 ratchov Exp $
d38 1
a38 1
.Dd $Mdocdate: October 28 2007 $
a760 29
.Pp
For ports using the ISA bus:
.Xr gus 4 ,
.Xr pss 4 ,
.Xr sb 4 ,
.Xr wss 4
.Pp
For ports using the PCI bus:
.Xr aria 4 ,
.Xr auich 4 ,
.Xr auixp 4 ,
.Xr autri 4 ,
.Xr auvia 4 ,
.Xr azalia 4 ,
.Xr clcs 4 ,
.Xr clct 4 ,
.Xr cmpci 4 ,
.Xr eap 4 ,
.Xr emu 4 ,
.Xr envy 4 ,
.Xr esa 4 ,
.Xr eso 4 ,
.Xr ess 4 ,
.Xr fms 4 ,
.Xr maestro 4 ,
.Xr neo 4 ,
.Xr sv 4 ,
.Xr yds 4 ,
.Xr ym 4
@


1.48
log
@add new envy(4) man page

ok jmc@@, ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.47 2007/10/08 00:46:49 jakemsr Exp $
d38 1
a38 1
.Dd $Mdocdate: October 8 2007 $
d752 1
d754 1
@


1.47
log
@explain that AUDIO_GET[PR]RINFO were added for porting 3rd party
software and should be avoided in new code

suggested by ratchov@@, help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.46 2007/10/03 21:49:12 jakemsr Exp $
d38 1
a38 1
.Dd $Mdocdate: October 3 2007 $
d778 1
@


1.46
log
@
add two new audio ioctls, AUDIO_GETPRINFO and AUDIO_GETRRINFO, and the
data structure these ioctls use, audio_bufinfo.

these ioctls return information about the play and record buffers
into the audio_bufinfo structure.

these are being added to aid in porting non-native audio applications
and libraries, and to fix issues in our OSS audio emulation.  these
ioctls exist only on OpenBSD and should not be used in code intended
for distribution.

ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.45 2007/09/28 00:52:51 jakemsr Exp $
d38 1
a38 1
.Dd $Mdocdate: September 28 2007 $
d320 2
@


1.45
log
@be explicit about configuring audio devices for full-duplex mode.

OK jmc@@ (a while back)
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.44 2007/09/17 13:46:11 jakemsr Exp $
d38 1
a38 1
.Dd $Mdocdate: September 17 2007 $
d300 20
@


1.44
log
@implement the output_muted member of audio_info_t as found in original
Sun audio.

input from and ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.43 2007/09/12 06:12:23 ratchov Exp $
d38 1
a38 1
.Dd $Mdocdate: September 12 2007 $
d121 3
a123 2
it will start in half-duplex play mode; full-duplex mode has to be set
explicitly.
@


1.43
log
@add missing description of AUDIO_PERROR ioctl

reviewed (and corrected) by jakemsr@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.42 2007/08/08 05:51:23 jakemsr Exp $
d38 1
a38 1
.Dd $Mdocdate: August 8 2007 $
d314 2
a315 1
	u_int	_ispare1;
@


1.42
log
@revert the change in rev 1.60 of audio.c and the corresponding
documentation change

the audio layer is still too "imperfect" for this change

fixes problems reported aanriot, matthieu and dtucker

requested by deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.41 2007/07/06 04:40:20 jakemsr Exp $
d38 1
a38 1
.Dd $Mdocdate: July 6 2007 $
d200 3
a202 1
This command fetches the count of dropped input samples into its
d204 1
a204 1
argument.
@


1.41
log
@- enable full-duplex mode by default if a device is opened
  read-write and it supports full-duplex operation.
- update documentation to match this behaviour.

see http://marc.info/?l=openbsd-tech&m=118310788926431&w=2 for
more background on this change

"patches look correct to me" marc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.40 2007/05/31 19:19:49 jmc Exp $
d38 1
a38 1
.Dd $Mdocdate: May 31 2007 $
d121 2
a122 1
it will start in full-duplex playback and recording mode.
@


1.40
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.39 2006/04/26 16:14:54 jason Exp $
d38 1
a38 1
.Dd $Mdocdate$
d121 1
a121 2
it will start in half-duplex play mode; full-duplex mode has to be set
explicitly.
@


1.39
log
@Xr azalia (thanks miod)
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.38 2006/01/19 05:07:02 jakemsr Exp $
d38 1
a38 1
.Dd March 11, 1997
@


1.38
log
@seek is a count of bytes, not samples

OK millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.37 2005/08/08 01:47:06 mickey Exp $
d746 1
@


1.37
log
@more xr auipx i missed to commit first round
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.36 2004/11/06 05:02:46 brad Exp $
d207 1
a207 1
This command fetches the count of samples that are queued ahead of the
d499 1
a499 1
samples pending;
@


1.36
log
@The audio(4) manpage says to use code that looks like
    ioctl(fd, AUDIO_INITINFO, &info);
to initialize the audioinfo struct. This does not work as there
is no AUDIO_INITINFO ioctl command. Rather, the structure should be
initialized with something that looks like this:
    AUDIO_INITINFO(&info);

From: Chris Kuethe <ckuethe at ualberta dot ca> in PR 3980
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.35 2004/08/04 00:05:30 jaredy Exp $
d743 1
@


1.35
log
@- sync to netbsd
- update to reality
- grammar, punctuation, rewording
- since this page describes both the mixer and audio devices,
  add mention of the mixer device in relevant places
- use standard conventions for documenting ioctls
- macro and other mdoc fixes
- add some unmentioned audio devices and other cross-refs to
  "see also"

help and ok jmc

and add kernel config usage to synopsis (from deraadt)
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.34 2004/01/26 13:33:09 jmc Exp $
d326 1
a326 1
.Dl "ioctl(fd, AUDIO_INITINFO, &info);"
@


1.34
log
@missing thing from Jared Yanovich;
dhartmeier@@ saved me from making a mess of this;
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.33 2003/07/09 13:26:20 jmc Exp $
d42 2
a43 1
.Nm audio
d46 2
d54 1
a54 1
.Nm
d84 3
a86 2
can be opened at any time and can be used to manipulate the audio device
while it is in use.
d118 3
a120 1
If a full-duplex capable audio device is opened for both reading and writing
d137 3
a139 1
subsequent write calls to ``catch up'' in time to the current audio
d145 3
a147 1
The audio device is normally accessed with
d175 8
a182 3
The audio device, like most devices, can be used in
.Va select ,
can be set in non-blocking mode and can be set to send a
d198 4
a201 2
.It Dv AUDIO_RERROR (int)
This command fetches the count of dropped input samples into its integer
d205 7
a211 3
.It Dv AUDIO_WSEEK (int)
This command fetches the count of samples queued ahead of the
first sample in the most recent sample block written into its integer argument.
d215 2
a216 1
.It Dv AUDIO_GETDEV (audio_device_t)
d218 2
a219 1
audio_device_t argument.
d227 2
a228 1
.It Dv AUDIO_GETFD (int)
d230 9
a238 3
.It Dv AUDIO_GETENC (audio_encoding_t)
This command is used iteratively to fetch sample encoding names and
format_ids into the input/output audio_encoding_t argument.
d249 1
d254 2
a255 1
.It Dv AUDIO_SETFD (int)
d261 2
a262 1
.It Dv AUDIO_GETPROPS (int)
d265 1
a265 1
has a certain property the corresponding bit is set, otherwise it is not.
d267 2
a268 1
.Bl -tag -width Ds -compact
d270 1
a270 1
the device admits full-duplex operation.
d272 1
a272 1
the device can be used with
d275 1
a275 1
the device can set the playing and recording encoding parameters
d278 6
a283 5
.It Dv AUDIO_GETIOFFS (audio_offset_t)
.It Dv AUDIO_GETOOFFS (audio_offset_t)
This command fetches the current offset in the input(output) buffer where
the hardware is putting (getting) data.
It is mostly useful when the device
d287 3
a289 1
The information is returned in the audio_offset structure.
d297 6
a302 3
.It Dv AUDIO_GETINFO (audio_info_t)
.It Dv AUDIO_SETINFO (audio_info_t)
Get or set audio information as encoded in the audio_info structure.
d307 1
a307 1
	u_int	monitor_gain;
d322 6
a327 2
the audio_info structure should first be initialized with
.Dv AUDIO_INITINFO Po &info Pc
d364 3
a366 1
The generic audio driver layer and the hardware driver have the
d414 3
a416 1
The encoding parameter can have the following values:
d418 1
a418 1
.Bl -tag -width Ds -compact
d441 1
a441 1
.Va port
d444 2
a445 1
settings provide simple shortcuts to the richer mixer
d447 3
a449 1
The gain should be in the range
d456 1
a456 1
The input port should be a combination of
d458 1
a458 1
.Bl -tag -width Ds -compact
d467 1
a467 1
The output port should be a combination of
d469 1
a469 1
.Bl -tag -width Ds -compact
d471 1
a471 1
to select microphone output.
d512 3
a514 1
The mixer device,
d527 1
a527 1
.It Dv AUDIO_GETDEV (audio_device_t)
d529 10
a538 2
.It Dv AUDIO_MIXER_READ (mixer_ctrl_t)
.It Dv AUDIO_MIXER_WRITE (mixer_ctrl_t)
d553 1
a553 2
.Ed
.Bd -literal
a562 1

d564 1
a564 7
These commands read the current mixer state or set new mixer state for
the specified device
.Va dev .
.Va type
identifies which type of value is supplied in the
.Va mixer_ctrl_t
argument.
d567 2
a568 2
field specifies both the number of channels and the values for each of
the channels.
d579 3
a581 2
is only used for classifying particular mixer device
types and is not used for
d585 9
a593 5
.It Dv AUDIO_MIXER_DEVINFO (mixer_devinfo_t)
This command is used iteratively to fetch audio mixer device information
into the input/output mixer_devinfo_t argument.
To query all the supported encodings, start with an index field of
0 and continue with successive encodings (1, 2, ...) until the
d621 1
d652 19
a670 3
For example, a mixer level controlling the input gain on the ``line
in'' circuit would be a class that matches an input class device
with the name ``Inputs'' (AudioCInputs).
d675 3
d685 3
a687 1
control would have the line in mute as its "next" value).
d697 4
a700 2
AudioNon and AudioNoff.
For
d706 5
a710 1
values are AudioNvolume, AudioNtreble, AudioNbass).
d714 4
a717 2
By convention, all the mixer device can be distinguished from other
mixer controls because they use a name from one of the AudioC* string values.
d731 1
d741 1
d752 2
d756 3
a758 1
.Xr sv 4
@


1.33
log
@- fix lists/displays
- quote .Cd's
- add/remove .Pp's as necessary
- fix some .Re/.Rs's
- simplify macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.32 2003/06/06 10:29:41 jmc Exp $
d277 1
a277 1
};
@


1.32
log
@- section reorder
- some macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.31 2003/04/25 18:09:42 avsm Exp $
d178 1
a178 1
.Bl -tag -width indent -compact
d234 1
a234 1
.Bl -tag -width indent -compact
d283 1
a283 1
.Li Dv AUDIO_INITINFO Po &info Pc
d369 2
a370 1
.Bl -tag -width indent -compact
d404 1
a404 1
.br
d406 2
a407 1
.Bl -tag -width indent -compact
d415 1
d417 2
a418 1
.Bl -tag -width indent -compact
d426 1
d472 2
a473 1
.Bl -tag -width indent -compact
d567 1
@


1.31
log
@AUDIO_ENCODING_* is below, not above the struct description
jason@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.30 2003/03/28 09:47:20 jmc Exp $
d151 1
a151 1
.Dv AUDIO_GETINFO ).
@


1.30
log
@mu-law and A-law spelling;
mu-law and u-law are the same, so used mu-law for consistency;

ok jason@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.29 2003/03/14 10:07:35 jmc Exp $
d341 1
a341 1
	u_int	encoding;	/* data encoding (AUDIO_ENCODING_* above) */
@


1.29
log
@typos;

audio(4): ok naddy@@
cardbus(4): ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.28 2002/12/13 16:36:52 naddy Exp $
d87 1
a87 1
monaural 8-bit mulaw samples.
d371 1
a371 1
mulaw encoding, 8 bits/sample
d373 1
a373 1
alaw encoding, 8 bits/sample
@


1.28
log
@audio_prinfo.seek is int now; document and sync
ok miod@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.27 2002/06/30 22:02:13 miod Exp $
d78 2
a79 2
.Pa /dev/sound
which has the exclusive open property
d118 1
a118 1
played instead of the provided samples, and if recording is paused then
d166 1
a166 1
.Va select,
d247 2
a248 2
the hardware is putting(getting) data.
It mostly useful when the device
d315 1
a315 1
75 % of
d331 1
a331 1
is set explicitly this value becomes sticky, i.e., it is remains
@


1.27
log
@Do not end an enumerations of Xr with a dot, and do not let a dot hide
inside an enumeration as well.
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.26 2002/06/30 21:45:25 deraadt Exp $
d344 1
a344 1
	u_long	seek;		/* BSD extension */
@


1.26
log
@Xr cleanup; seb@@todesplanet.de
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.25 2002/05/23 09:30:34 mpech Exp $
d642 1
a642 1
.Xr wss 4 .
@


1.25
log
@'SEE ALSO' audit in 'share/man/':
o) sort;
o) "," is separator of entries;
o) don't use "." or "," in the last entry;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.24 2002/04/08 01:51:25 frantzen Exp $
a639 1
.Xr pas 4 ,
@


1.24
log
@document the ESS Allegro-1 and Maestro-3 driver
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.23 2002/02/12 18:03:44 mpech Exp $
d658 1
a658 1
.Xr sv 4 .
@


1.23
log
@fix style in .SYNOPSIS. Spotted by grange@@grange.ru

deraadt@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.22 2001/11/26 16:51:48 mickey Exp $
d654 1
@


1.22
log
@add autri.4, from netbsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.21 2001/11/13 18:26:53 deraadt Exp $
d47 1
a48 1
.Fd #include <sys/audioio.h>
@


1.21
log
@kill BUGS sections that basically say "there might be bugs".  Like, WTF?
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.20 2001/03/07 23:58:49 todd Exp $
d647 2
d653 1
@


1.20
log
@spelling
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.19 2001/03/01 16:11:16 aaron Exp $
a655 2
Some of the device-specific manual pages do not yet exist.
.br
@


1.19
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.18 2001/01/13 19:53:51 aaron Exp $
d333 1
a333 1
The stickyness can be cleared by reopening the device or setting the
@


1.18
log
@Driver for Cirrus Logic CS4281 sound chips. Originally written for NetBSD by
Tatoku Ogaito, banged into shape for OpenBSD by me. Recording has not been
tested yet, but mpg123 works fine. Sound still works after suspend/resume.

XXX: On the IBM ThinkPad X20, must disable pcibios else the cs4281 won't
generate interrupts. Cause yet unknown but probably not the driver's fault.
YMMV on other laptops with this chip.
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.17 2001/01/13 15:35:58 espie Exp $
d352 1
a352 1
	u_char	error;		/* non-zero if underflow/overflow ocurred */
@


1.17
log
@Preliminary man page for maestro. Link it.
Keep alphabetical order in audio.4 while we're at it :)
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.16 2001/01/11 18:52:53 deraadt Exp $
d647 2
@


1.16
log
@move ich to auich at mickey's request
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.15 2001/01/09 16:51:53 espie Exp $
d646 1
d650 1
a650 1
.Xr auich 4 ,
@


1.15
log
@More complete synopsis, ok millert@@,aaron@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.14 2000/10/18 02:38:21 aaron Exp $
d649 1
a649 1
.Xr ich 4 ,
@


1.14
log
@- Arguments to .Nd should go on the same line as .Nd.
- Standardize Nd format for all Ethernet man pages for easy man -k'ing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.13 2000/10/13 18:56:49 aaron Exp $
d46 2
@


1.13
log
@Purely mdoc fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.12 2000/05/30 17:14:57 mickey Exp $
d43 1
a43 2
.Nd
device-independent audio driver layer
@


1.12
log
@Xr pci audio drivers
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.11 2000/04/27 18:30:49 mickey Exp $
d160 1
a160 1
Only encodings that are not emulated (i.e. where
d321 2
a322 1
implementation-required limits.  Upon return from an
d575 2
a576 2
Enumeration types are typically used for on/off style controls (e.g. a
mute control) or for input/output device selection (e.g. select
d589 2
a590 2
source (e.g. line-in, CD in, DAC output) are collected under the input class,
while those which control all audio sources (e.g. master volume,
d631 1
a631 2
.Xr mixerctl 1 .
.br
d633 1
a633 1
.Xr ossaudio 3 .
d635 2
a636 2
.Xr audio 9 .
.br
d643 1
a643 1
.br
a657 1
.Pp
@


1.11
log
@xr audio(9)
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.10 2000/03/30 21:46:38 alex Exp $
d634 1
d643 8
@


1.10
log
@buffersize -> buffer_size
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.9 1999/07/09 13:35:48 aaron Exp $
d634 1
@


1.9
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.8 1998/09/05 17:41:48 deraadt Exp $
d148 1
a148 1
.Va buffersize
@


1.8
log
@more man page repairs; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.7 1998/06/02 09:04:30 provos Exp $
d330 1
a330 1
even when the encoding is changed. 
@


1.7
log
@cross reference audioctl(1) and mixerctl(1), add info about mixer_level_t
which has been missing for all these years. augustss.
@
text
@d1 1
a1 1
.\"	$OpenBSD: audio.4,v 1.6 1998/05/05 10:13:43 provos Exp $
d115 1
a115 1
explicitely.
d188 1
a188 1
This command fetches the count of samples are queued ahead of the
d204 1
a204 1
The command returns the current setting of the full duplex mode.
d235 1
a235 1
the device admits full duplex operation.
d329 1
a329 1
is set explicitely this value becomes sticky, i.e., it is remains
d385 1
a385 1
unsigned linear encoding with little big byte order
d399 1
a399 1
withe the normal setting at
@


1.6
log
@.Xr ossaudio 3
@
text
@d1 2
a2 2
.\"	$OpenBSD: audio.4,v 1.5 1998/04/30 22:28:58 provos Exp $
.\"	$NetBSD: audio.4,v 1.3 1996/02/27 22:42:05 jtc Exp $
d40 1
a40 1
.Os 
d51 4
a54 3
driver provides support for various audio peripherals.  It provides a
uniform programming interface layer above different underlying audio
hardware drivers.  The audio layer provides full-duplex operation if the
d75 2
a76 1
but no other operations.  In contrast to
d86 2
a87 1
monaural 8-bit mulaw samples.  In addition, if it is opened read-only
d93 2
a94 1
record/playback mode.  In all other respects
d105 2
a106 1
immediately discarded.  Similarly, reads while playback is in progress
d108 2
a109 1
sampling rate.  If both playback and recording are requested on a half-duplex
d113 2
a114 2
If a full-duplex capable audio device is opened for both reading and writing 
it will start in half-duplex play mode; full-duplex mode has to be set 
d126 3
a128 3
If the 
.Dv AUMODE_PLAY_ALL 
mode is not set the writing process must 
d141 1
a141 1
.Xr mmap 2 
d145 2
a146 1
the mapped memory.  The device appears as a block of memory
d149 1
a149 1
(as available via 
d152 2
a153 3
from/to the audio hardware, wrapping around at the end of the
buffer.  To find out where the hardware is currently accessing
data in the buffer the
d184 2
a185 1
argument.  There is no information regarding when in the sample stream
d225 2
a226 1
contains a zero value.  If the device does not support full-duplex
d229 2
a230 1
This command gets a bit set of hardware properties.  If the hardware
d246 2
a247 1
the hardware is putting(getting) data.  It mostly useful when the device
d278 1
d283 3
a285 3
and then the particular values to be changed should be set.  This
allows the audio driver to only set those things that you wish to
change and eliminates the need to query the device with
d302 4
a305 4
are used to control write behavior.  Writes to the audio devices will
queue up blocks until the high-water mark is reached, at which point any
more write calls will block until the queue is drained to the low-water
mark.
d309 2
a310 1
set those high- and low-water marks (in audio blocks).  The default for
d314 1
a314 1
75 % of 
d318 4
a321 3
sets the current audio blocksize.  The generic audio driver layer and
the hardware driver have the opportunity to adjust this block size to
get it within implementation-required limits.  Upon return from an
d324 1
a324 1
Normally the 
d330 2
a331 2
even when the encoding is changed.  The stickyness can be cleared
by reopening the device or setting the
d360 2
a361 2
recording sample rates, sample encodings, and channel counts.  The
playing information is always set last and will prevail on such hardware.
d388 1
a388 1
The 
d394 3
a396 2
interface described below.  The gain should be in the range
.Bq Dv AUDIO_MIN_GAIN , Dv AUDIO_MAX_GAIN 
d424 2
a425 2
is the total size of the audio buffer.  The buffer size divided
by the 
d457 1
a457 1
.Xr ioctl 2 
d485 12
d501 1
a501 1
identifies which type of value is supplied in the 
d503 1
a503 1
argument.  
d507 4
a510 3
the channels.  If the channel count does not match the current channel
count, the attempt to change the setting may fail (depending on the
hardware device driver implementation).
d515 2
a516 1
command.  The type
d525 4
a528 3
into the input/output mixer_devinfo_t argument.  To query all the
supported encodings, start with an index field of 0 and continue with
successive encodings (1, 2, ...) until the command returns an error.
d559 1
a559 1
The 
d561 3
a563 2
field identifies the name of this particular mixer control.  The
.Va index 
d570 2
a571 1
commands.  The
d582 5
a586 5
field identifies what class of control this is.  This value is set to
the index value used to query the class itself.  For example, a mixer
level controlling the input gain on the ``line in'' circuit would be a
class that matches an input class device with the name ``Inputs''
(AudioCInputs).
d598 2
a599 2
control would have the line in mute as its "next" value).  If there is
no relevant next or previous value,
d603 1
a603 1
For 
d606 2
a607 2
the enumeration values and their corresponding names are filled in.  For
example, a mute control would return appropriate values paired with
d629 3
@


1.5
log
@update man page to reality, from NetBSD, mostly by Lennart Augustsson
<augustss@@cs.chalmers.se>.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d598 2
a599 1
.Xr ioctl 2 .
@


1.4
log
@fix includes and device names; netbsd pr#2523; jhawk@@mit.edu
@
text
@d29 2
a30 2
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
d38 1
a38 1
.Dd November 5, 1995
d50 1
a50 1
.Nm audio
d56 1
a56 1
There are three device files available for audio operation:
d59 1
d69 11
a79 1

a99 8
Reads and writes to a sampling device should be in multiples of the
current audio block size which can be queried and set using the
interfaces described below.
Writes which are not multiples of the block size will be padded to a
block boundary with silence.
Reads which are not multiples of the block size will consume a block
from the audio hardware but only return the requested number of bytes.
.Pp
d107 3
d118 6
a123 3
frequently enough to provide audio playback blocks in time for the next
hardware interrupt service, one or more audio silence blocks will be
queued for playback.  The writing process must provide enough data via
a125 2
[Alternatively, the playing process can use one of the interfaces below
to halt and later restart audio playback.]
d130 37
d170 1
d196 2
d199 2
d203 6
a208 3
	int index;	/* input: nth encoding */
	char name[MAX_AUDIO_DEV_LEN];
	int format_id;
d211 2
a212 3
This command is used iteratively to fetch sample encoding names and
format_ids into the input/output audio_encoding_t argument.  To query
all the supported encodings, start with an index field of zero and
a214 4
.It Dv AUDIO_GETFD (int)
This command fetches a non-zero value into its integer argument if the
hardware supports full-duplex operation, or a zero value if the hardware
only supports half-duplex operation.
d220 29
d254 3
a256 3
	struct	audio_prinfo play;	/* Info for play (output) side */
	struct	audio_prinfo record;	/* Info for record (input) side */
	u_int	__spare;
d258 1
a258 1
	u_int	blocksize;	/* input blocking threshold */
d261 1
a261 1
	u_int	backlog;	/* samples of output backlog to gen. */
d265 2
a266 1
} audio_info_t;
d268 9
a276 5
When setting the current state with AUDIO_SETINFO, the audio_info
structure should first be initialized with AUDIO_INITINFO(&info) and
then the particular values to be changed should be set.  This allows the
audio driver to only set those things that you wish to change and
eliminates the need to query the device with AUDIO_GETINFO first.
d280 7
a286 1
field should be set to AUMODE_PLAY, AUMODE_RECORD, or their bitwise OR.
d298 6
a303 1
set those high- and low-water marks (in audio blocks).
d309 12
a320 4
AUDIO_SETINFO call, the actual blocksize set is returned in this field.
.Pp
.Va backlog
is currently unused.
d330 3
a332 1
	u_int	ispare[3];
d339 2
a340 1
	u_char	cspare[3];
d346 1
a346 1
[Note:  many hardware audio drivers require identical playback and
d348 26
a373 1
recording information is always set last and will prevail on such hardware.]
d375 6
a380 1
The gain and port settings provide simple shortcuts to the richer mixer
d382 36
a417 3
[AUDIO_MIN_GAIN,AUDIO_MAX_GAIN].  The port value is hardware-dependent
and should be selected (if setting with AUDIO_SETINFO) based upon return
values from the mixer query functions below or from a prior AUDIO_GETINFO.
d423 2
a424 1
fields are only used for AUDIO_GETINFO.
d429 1
a429 1
represents the total number of samples recorded or played, less those
d434 3
a436 1
For AUDIO_SETINFO, if the pause value is specified it will either pause
d457 4
a460 4
#define AUDIO_MIXER_CLASS	0
#define AUDIO_MIXER_ENUM	1
#define AUDIO_MIXER_SET		2
#define AUDIO_MIXER_VALUE	3
d475 2
a476 1
identifies which type of value is supplied in the mixer_ctrl_t
d487 8
a494 4
AUDIO_MIXER_DEVINFO command.
The type
AUDIO_MIXER_CLASS is only used for classifying particular mixer device
types and is not used for AUDIO_MIXER_READ or AUDIO_MIXER_WRITE.
d498 1
a498 1
supported encodings, start with an index field of zero and continue with
d536 5
a540 2
field in AUDIO_MIXER_READ and AUDIO_MIXER_WRITE commands.
The
d546 2
d568 7
a574 3
no relevant next or previous value, AUDIO_MIXER_LAST is specified.
.Pp
For AUDIO_MIXER_ENUM mixer control types,
d578 5
a582 1
For AUDIO_MIXER_VALUE mixer control types, the channel count is
d588 2
a589 4
By convention, all the mixer device indices for generic
class grouping are at the end of the index number space for a particular
hardware device, and can be distinguished from other mixer controls
because they use a name from one of the AudioC* string values.
d591 6
a596 3
.Pa /dev/audio
.Pa /dev/mixer
.Pa /dev/sound
d609 5
a613 5
The device class conventions are just a wish and not yet reality.
.br
Audio playback can be scratchy with pops and crackles due to the
audio layer's buffering scheme.  Using a bigger blocksize will help
reduce such annoyances.
@


1.3
log
@From NetBSD: merge of 960317
@
text
@d46 1
a47 5
.Pa /dev/audio
.br
.Pa /dev/sound
.br
.Pa /dev/mixer
d405 4
@


1.2
log
@From NetBSD:
Fix typo, from John Kohl.  Closes PR 2066.
@
text
@d1 4
a4 1
.\" Copyright (c) 1995 John T. Kohl
d7 3
d18 7
a24 2
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
d26 10
a35 10
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
.\" ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
a36 2
.\"	
.\"	$Id: audio.4,v 1.1 1995/11/13 04:27:27 deraadt Exp $
@


1.1
log
@generic audio man page; from jtk@@kolvir.arlington.ma.us; netbsd pr#1752
@
text
@d27 1
a27 1
.\"	$Id: audio.4,v 1.3 1995/11/11 23:27:15 jtk Exp $
d68 1
a68 1
monaural 8-bit mulaw sample.  In addition, if it is opened read-only
@
