head	1.43;
access;
symbols
	OPENBSD_6_2_BASE:1.43
	OPENBSD_6_1:1.42.0.4
	OPENBSD_6_1_BASE:1.42
	OPENBSD_6_0:1.41.0.4
	OPENBSD_6_0_BASE:1.41
	OPENBSD_5_9:1.39.0.2
	OPENBSD_5_9_BASE:1.39
	OPENBSD_5_8:1.37.0.8
	OPENBSD_5_8_BASE:1.37
	OPENBSD_5_7:1.37.0.6
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.37.0.4
	OPENBSD_5_6_BASE:1.37
	OPENBSD_5_5:1.36.0.4
	OPENBSD_5_5_BASE:1.36
	OPENBSD_5_4:1.34.0.6
	OPENBSD_5_4_BASE:1.34
	OPENBSD_5_3:1.34.0.4
	OPENBSD_5_3_BASE:1.34
	OPENBSD_5_2:1.34.0.2
	OPENBSD_5_2_BASE:1.34
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.2
	OPENBSD_5_0:1.32.0.4
	OPENBSD_5_0_BASE:1.32
	OPENBSD_4_9:1.32.0.2
	OPENBSD_4_9_BASE:1.32
	OPENBSD_4_8:1.31.0.2
	OPENBSD_4_8_BASE:1.31
	OPENBSD_4_7:1.30.0.2
	OPENBSD_4_7_BASE:1.30
	OPENBSD_4_6:1.30.0.4
	OPENBSD_4_6_BASE:1.30
	OPENBSD_4_5:1.26.0.2
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.24.0.2
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.23.0.4
	OPENBSD_4_3_BASE:1.23
	OPENBSD_4_2:1.23.0.2
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.22.0.6
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.4
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.2
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.21.0.2
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.20.0.4
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.2
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.43
date	2017.05.21.16.33.53;	author jca;	state Exp;
branches;
next	1.42;
commitid	tvczjCIL8yXrPAUW;

1.42
date	2016.08.31.21.32.06;	author bluhm;	state Exp;
branches;
next	1.41;
commitid	KxHBN8DDpvk5Wp6b;

1.41
date	2016.07.13.08.40.46;	author mpi;	state Exp;
branches;
next	1.40;
commitid	VkTTZG0LgjCK3eLa;

1.40
date	2016.03.23.12.57.53;	author benno;	state Exp;
branches;
next	1.39;
commitid	U069bXs2kaTa3qvg;

1.39
date	2015.09.11.20.17.10;	author mpi;	state Exp;
branches;
next	1.38;
commitid	ApmfmgK4a1wwazfh;

1.38
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.37;
commitid	PeV7Ql0T6htfMjhP;

1.37
date	2014.05.08.09.30.48;	author mpi;	state Exp;
branches;
next	1.36;

1.36
date	2014.01.22.06.25.52;	author claudio;	state Exp;
branches;
next	1.35;

1.35
date	2013.11.17.00.40.50;	author bluhm;	state Exp;
branches;
next	1.34;

1.34
date	2012.03.17.10.16.41;	author dlg;	state Exp;
branches;
next	1.33;

1.33
date	2011.12.08.20.58.49;	author blambert;	state Exp;
branches;
next	1.32;

1.32
date	2011.02.12.09.40.33;	author sthen;	state Exp;
branches;
next	1.31;

1.31
date	2010.07.03.04.44.51;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2009.06.05.06.48.32;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2009.06.05.00.43.09;	author claudio;	state Exp;
branches;
next	1.28;

1.28
date	2009.03.31.01.37.33;	author dlg;	state Exp;
branches;
next	1.27;

1.27
date	2009.03.27.13.31.15;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2009.01.29.14.38.56;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2009.01.29.12.48.01;	author claudio;	state Exp;
branches;
next	1.24;

1.24
date	2008.05.07.12.04.26;	author claudio;	state Exp;
branches;
next	1.23;

1.23
date	2007.05.31.19.19.51;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.23.14.19.13;	author claudio;	state Exp;
branches;
next	1.21;

1.21
date	2005.06.12.18.57.57;	author naddy;	state Exp;
branches;
next	1.20;

1.20
date	2004.08.10.15.07.11;	author jaredy;	state Exp;
branches;
next	1.19;

1.19
date	2004.06.19.20.00.19;	author cedric;	state Exp;
branches;
next	1.18;

1.18
date	2004.06.08.14.50.38;	author cedric;	state Exp;
branches;
next	1.17;

1.17
date	2004.05.04.22.50.18;	author claudio;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.21.19.35.39;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.31.19.53.42;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.26.08.33.12;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.30.12;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.19.18.40.01;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.03.11.02.36;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.26.07.55.40;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.06.21.13.18;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.05.14.45.53;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.01.16.11.19;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.21.21.01.19;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.22.12.00.41;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.09.23.04.12.05;	author alex;	state Exp;
branches;
next	1.3;

1.3
date	99.08.13.01.26.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.07.09.13.35.47;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.43
log
@Fix copy/paste in comment.
@
text
@.\"	$OpenBSD: route.4,v 1.42 2016/08/31 21:32:06 bluhm Exp $
.\"	$NetBSD: route.4,v 1.3 1994/11/30 16:22:31 jtc Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)route.4	8.6 (Berkeley) 4/19/94
.\"
.Dd $Mdocdate: August 31 2016 $
.Dt ROUTE 4
.Os
.Sh NAME
.Nm route
.Nd kernel packet forwarding database
.Sh SYNOPSIS
.In sys/socket.h
.In net/if.h
.In net/route.h
.Ft int
.Fn socket PF_ROUTE SOCK_RAW family
.Sh DESCRIPTION
.Ox
provides some packet routing facilities.
The kernel maintains a routing information database, which
is used in selecting the appropriate network interface when
transmitting packets.
.Pp
A user process (or possibly multiple co-operating processes)
maintains this database by sending messages over a special kind
of socket.
This supplants fixed size
.Xr ioctl 2 Ns 's
used in earlier releases.
Routing table changes may only be carried out by the super user.
.Pp
The operating system may spontaneously emit routing messages in response
to external events, such as receipt of a redirect, or failure to
locate a suitable route for a request.
The message types are described in greater detail below.
.Pp
Routing database entries come in two flavors: for a specific
host, or for all hosts on a generic subnetwork (as specified
by a bit mask and value under the mask).
The effect of wildcard or default route may be achieved by using
a mask of all zeros, and there may be hierarchical routes.
.Pp
When the system is booted and addresses are assigned
to the network interfaces, each protocol family
installs a routing table entry for each interface when it is ready for traffic.
Normally the protocol specifies the route
through each interface as a
.Dq direct
connection to the destination host
or network.
If the route is direct, the transport layer of a protocol family usually
requests the packet be sent to the same host specified in the packet.
Otherwise, the interface is requested to address the packet to the gateway
listed in the routing entry (i.e., the packet is forwarded).
.Pp
When routing a packet,
the kernel will attempt to find
the most specific route matching the destination.
(If there are two different mask and value-under-the-mask pairs
that match, the more specific is the one with more bits in the mask.
A route to a host is regarded as being supplied with a mask of
as many ones as there are bits in the destination.)
If no entry is found, the destination is declared to be unreachable,
and a routing\-miss message is generated if there are any
listeners on the routing control socket described below.
.Pp
A wildcard routing entry is specified with a zero
destination address value and a mask of all zeroes.
Wildcard routes will be used
when the system fails to find other routes matching the
destination.
The combination of wildcard routes and routing redirects can provide
an economical mechanism for routing traffic.
Routes created by redirects from wildcard routes and other routes
will be marked
.Em cloned ,
until their
.Dq parent
from which they were created has disappeared.
.Pp
Route labels can be attached to routes and may contain arbitrary
information about the route.
Labels are sent over the routing socket (see below) as
.Vt sockaddr_rtlabel
structures.
.Ss The Routing Socket
One opens the channel for passing routing control messages
by using the
.Xr socket 2
call shown in the
.Sx SYNOPSIS
above.
.Pp
The
.Fa family
parameter may be
.Dv AF_UNSPEC ,
which will provide
routing information for all address families, or can be restricted
to a specific address family by specifying which one is desired.
There can be more than one routing socket open per system.
.Pp
Messages are formed by a header followed by a small
number of
.Vt sockaddr
structures (which are variable length),
interpreted by position, and delimited
by the length entry in the
.Vt sockaddr .
An example of a message with four addresses might be an
IPv4 route addition: the destination, netmask, gateway, and label,
since both netmasks and labels are sent over the routing socket as
.Vt sockaddr
structures.
The interpretation of which addresses are present is given by a
bit mask within the header, and the sequence is least significant
to most significant bit within the vector.
.Pp
Any messages sent to the kernel are returned, and copies are sent
to all interested listeners.
The kernel will provide the process ID
for the sender, and the sender may use an additional sequence
field to distinguish between outstanding messages.
However, message replies may be lost when kernel buffers are exhausted.
.Pp
The kernel may reject certain messages, and will indicate this
by filling in the
.Va rtm_errno
field.
The routing code returns
.Er EEXIST
if
requested to duplicate an existing entry,
.Er ESRCH
if
requested to delete a non-existent entry,
or
.Er ENOBUFS
if insufficient resources were available
to install a new route.
In the current implementation, all routing processes run locally,
and the values for
.Va rtm_errno
are available through the normal
.Va errno
mechanism, even if the routing reply message is lost.
.Pp
A process may avoid the expense of reading replies to
its own messages by issuing a
.Xr setsockopt 2
call indicating that the
.Dv SO_USELOOPBACK
option at the
.Dv SOL_SOCKET
level is to be turned off.
A process may ignore all messages from the routing socket
by doing a
.Xr shutdown 2
system call for further input.
.Pp
A process can specify an alternate routing table by using the
.Dv SO_RTABLE
.Xr setsockopt 2 .
.Pp
A process can specify which route message types it's interested in
by using
.Dv ROUTE_FILTER(int type)
and issuing a setsockopt call with the
.Dv ROUTE_MSGFILTER
option at the
.Dv AF_ROUTE
level.
For example, to only get interface specific messages:
.Bd -literal -offset indent
unsigned int rtfilter;

rtfilter = ROUTE_FILTER(RTM_IFINFO) |
    ROUTE_FILTER(RTM_IFANNOUNCE);

if (setsockopt(routefd, PF_ROUTE, ROUTE_MSGFILTER,
    &rtfilter, sizeof(rtfilter)) == -1)
	err(1, "setsockopt(ROUTE_MSGFILTER)");
.Ed
.Pp
If a route is in use when it is deleted,
the routing entry will be marked down and removed from the routing table,
but the resources associated with it will not
be reclaimed until all references to it are released.
User processes can obtain information about the routing
entry to a specific destination by using a
.Dv RTM_GET
message or via the
.Dv PF_ROUTE
.Xr sysctl 3 .
.Pp
Messages include:
.Bd -literal
#define RTM_ADD		0x1	/* Add Route */
#define RTM_DELETE	0x2	/* Delete Route */
#define RTM_CHANGE	0x3	/* Change Metrics or flags */
#define RTM_GET		0x4	/* Report Metrics */
#define RTM_LOSING	0x5	/* Kernel Suspects Partitioning */
#define RTM_REDIRECT	0x6	/* Told to use different route */
#define RTM_MISS	0x7	/* Lookup failed on this address */
#define RTM_LOCK	0x8	/* fix specified metrics */
#define RTM_RESOLVE	0xb	/* req to resolve dst to LL addr */
#define RTM_NEWADDR	0xc	/* address being added to iface */
#define RTM_DELADDR	0xd	/* address being removed from iface */
#define RTM_IFINFO	0xe	/* iface going up/down etc. */
#define RTM_IFANNOUNCE	0xf	/* iface arrival/departure */
#define RTM_DESYNC	0x10	/* route socket buffer overflow */
.Ed
.Pp
A message header consists of one of the following:
.Bd -literal
struct rt_msghdr {
	u_short	rtm_msglen;	/* to skip over non-understood messages */
	u_char	rtm_version;	/* future binary compatibility */
	u_char	rtm_type;	/* message type */
	u_short	rtm_hdrlen;	/* sizeof(rt_msghdr) to skip over the header */
	u_short	rtm_index;	/* index for associated ifp */
	u_short rtm_tableid;	/* routing table id */
	u_char	rtm_priority;	/* routing priority */
	u_char	rtm_mpls;	/* MPLS additional infos */
	int	rtm_addrs;	/* bitmask identifying sockaddrs in msg */
	int	rtm_flags;	/* flags, incl. kern & message, e.g. DONE */
	int	rtm_fmask;	/* bitmask used in RTM_CHANGE message */
	pid_t	rtm_pid;	/* identify sender */
	int	rtm_seq;	/* for sender to identify action */
	int	rtm_errno;	/* why failed */
	u_int	rtm_inits;	/* which metrics we are initializing */
	struct	rt_metrics rtm_rmx; /* metrics themselves */
};

struct if_msghdr {
	u_short	ifm_msglen;	/* to skip over non-understood messages */
	u_char	ifm_version;	/* future binary compatibility */
	u_char	ifm_type;	/* message type */
	u_short ifm_hdrlen;	/* sizeof(if_msghdr) to skip over the header */
	u_short	ifm_index;	/* index for associated ifp */
	u_short	ifm_tableid;	/* routing table id */
	u_char	ifm_pad1;
	u_char	ifm_pad2;
	int	ifm_addrs;	/* like rtm_addrs */
	int	ifm_flags;	/* value of if_flags */
	int	ifm_xflags;
	struct	if_data ifm_data;/* statistics and other data about if */
};

struct ifa_msghdr {
	u_short	ifam_msglen;	/* to skip over non-understood messages */
	u_char	ifam_version;	/* future binary compatibility */
	u_char	ifam_type;	/* message type */
	u_short ifam_hdrlen;	/* sizeof(ifa_msghdr) to skip over the header */
	u_short	ifam_index;	/* index for associated ifp */
	u_short	ifam_tableid;	/* routing table id */
	u_char	ifam_pad1;
	u_char	ifam_pad2;
	int	ifam_addrs;	/* like rtm_addrs */
	int	ifam_flags;	/* value of ifa_flags */
	int	ifam_metric;	/* value of ifa_metric */
};

struct if_announcemsghdr {
	u_short	ifan_msglen;	/* to skip over non-understood messages */
	u_char	ifan_version;	/* future binary compatibility */
	u_char	ifan_type;	/* message type */
	u_short ifan_hdrlen;	/* sizeof(ifa_msghdr) to skip over the header */
	u_short	ifan_index;	/* index for associated ifp */
	u_short	ifan_what;	/* what type of announcement */
	char	ifan_name[IFNAMSIZ];	/* if name, e.g. "en0" */
};
.Ed
.Pp
The
.Dv RTM_IFINFO
message uses an
.Vt if_msghdr
header, the
.Dv RTM_NEWADDR
and
.Dv RTM_DELADDR
messages use an
.Vt ifa_msghdr
header,
the
.Dv RTM_IFANNOUNCE
message uses an
.Vt if_announcemsghdr
header,
and all other messages use the
.Vt rt_msghdr
header.
.Pp
The metrics structure is:
.Bd -literal
struct rt_metrics {
	u_int64_t	rmx_pksent;	/* packets sent using this route */
	int64_t		rmx_expire;	/* lifetime for route, e.g. redirect */
	u_int		rmx_locks;	/* Kernel must leave these values */
	u_int		rmx_mtu;	/* MTU for this path */
	u_int		rmx_refcnt;	/* # references hold */
	u_int		rmx_hopcount;	/* max hops expected */
	u_int		rmx_recvpipe;	/* inbound delay-bandwidth product */
	u_int		rmx_sendpipe;	/* outbound delay-bandwidth product */
	u_int		rmx_ssthresh;	/* outbound gateway buffer limit */
	u_int		rmx_rtt;	/* estimated round trip time */
	u_int		rmx_rttvar;	/* estimated rtt variance */
	u_int		rmx_pad;
};
.Ed
.Pp
Only
.Va rmx_mtu , rmx_expire , rmx_pksent ,
and
.Va rmx_locks
are used by the kernel routing table.
All other values will be ignored when inserting them into the kernel and are
set to zero in routing messages sent by the kernel.
They are left for compatibility reasons with other systems.
.Pp
Flags include the values:
.Bd -literal
#define	RTF_UP        0x1       /* route usable */
#define	RTF_GATEWAY   0x2       /* destination is a gateway */
#define	RTF_HOST      0x4       /* host entry (net otherwise) */
#define	RTF_REJECT    0x8       /* host or net unreachable */
#define	RTF_DYNAMIC   0x10      /* created dynamically (by redirect) */
#define	RTF_MODIFIED  0x20      /* modified dynamically (by redirect) */
#define	RTF_DONE      0x40      /* message confirmed */
#define	RTF_CLONING   0x100     /* generate new routes on use */
#define	RTF_MULTICAST 0x200     /* route associated to a mcast addr.  */
#define	RTF_LLINFO    0x400     /* generated by ARP or NDP */
#define	RTF_STATIC    0x800     /* manually added */
#define	RTF_BLACKHOLE 0x1000    /* just discard pkts (during updates) */
#define	RTF_PROTO3    0x2000    /* protocol specific routing flag */
#define	RTF_PROTO2    0x4000    /* protocol specific routing flag */
#define	RTF_PROTO1    0x8000    /* protocol specific routing flag */
#define	RTF_CLONED    0x10000   /* this is a cloned route */
#define RTF_MPATH     0x40000   /* multipath route or operation */
#define RTF_MPLS      0x100000  /* MPLS additional infos */
#define RTF_LOCAL     0x200000	/* route to a local address */
#define RTF_BROADCAST 0x400000	/* route associated to a bcast addr. */
#define RTF_CONNECTED 0x800000	/* interface route */
.Ed
.Pp
The following flags (defined as
.Dv RTF_FMASK )
can be changed by an RTM_CHANGE request:
.Dv RTF_LLINFO ,
.Dv RTF_PROTO1 ,
.Dv RTF_PROTO2 ,
.Dv RTF_PROTO3 ,
.Dv RTF_BLACKHOLE ,
.Dv RTF_REJECT ,
.Dv RTF_STATIC
and
.Dv RTF_MPLS .
.Pp
Specifiers for metric values in
.Va rmx_locks
and
.Va rtm_inits
are:
.Bd -literal
#define RTV_MTU		0x1	/* init or lock _mtu */
#define RTV_HOPCOUNT	0x2	/* init or lock _hopcount */
#define RTV_EXPIRE	0x4	/* init or lock _expire */
#define RTV_RPIPE	0x8	/* init or lock _recvpipe */
#define RTV_SPIPE	0x10	/* init or lock _sendpipe */
#define RTV_SSTHRESH	0x20	/* init or lock _ssthresh */
#define RTV_RTT		0x40	/* init or lock _rtt */
#define RTV_RTTVAR	0x80	/* init or lock _rttvar */
.Ed
.Pp
Only
.Dv RTV_MTU
and
.Dv RTV_EXPIRE
should be used; all other flags are ignored.
.Pp
Specifiers for which addresses are present in the messages are:
.Bd -literal
#define RTA_DST		0x1	/* destination sockaddr present */
#define RTA_GATEWAY	0x2	/* gateway sockaddr present */
#define RTA_NETMASK	0x4	/* netmask sockaddr present */
#define RTA_IFP		0x10	/* interface name sockaddr present */
#define RTA_IFA		0x20	/* interface addr sockaddr present */
#define RTA_AUTHOR	0x40	/* sockaddr for author of redirect */
#define RTA_BRD		0x80	/* for NEWADDR, bcast or p-p dest addr */
#define RTA_SRC		0x100	/* source sockaddr present */
#define RTA_SRCMASK	0x200	/* source netmask present */
#define RTA_LABEL	0x400	/* route label present */
.Ed
.Sh SEE ALSO
.Xr netstat 1 ,
.Xr socket 2 ,
.Xr sysctl 3 ,
.Xr mygate 5 ,
.Xr route 8 ,
.Xr route 9
.Sh HISTORY
A
.Dv PF_ROUTE
protocol family first appeared in
.Bx 4.3 Reno .
@


1.42
log
@Remove unused RTF_MASK route flag.
Requested by and OK mpi@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.41 2016/07/13 08:40:46 mpi Exp $
d33 1
a33 1
.Dd $Mdocdate: July 13 2016 $
d396 1
a396 1
#define RTV_EXPIRE	0x4	/* init or lock _hopcount */
@


1.41
log
@Introduce RTF_MULTICAST and flag corresponding IPv6 routes as such
instead of abusing RTF_CLONING.

Fix a leak reporeted by Aaron Riekenberg on misc@@, ok sthen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.40 2016/03/23 12:57:53 benno Exp $
d33 1
a33 1
.Dd $Mdocdate: March 23 2016 $
a358 1
#define	RTF_MASK      0x80      /* subnet mask present */
@


1.40
log
@add missing RTF_CONNECTED, remove ESIS (End System to Intermediate
System Protocol) add NDP instead, add information about RTF_FMASK.
phessler@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.39 2015/09/11 20:17:10 mpi Exp $
d33 1
a33 1
.Dd $Mdocdate: September 11 2015 $
d361 1
@


1.39
log
@No longer document RTF_XRESOLVE but keep the define around until
ports are clean.
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.38 2015/09/10 17:55:21 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: September 10 2015 $
d361 1
a361 1
#define	RTF_LLINFO    0x400     /* generated by ARP or ESIS */
d372 1
d374 13
@


1.38
log
@use .In rather than .Fd #include
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.37 2014/05/08 09:30:48 mpi Exp $
d33 1
a33 1
.Dd $Mdocdate: May 8 2014 $
a360 1
#define	RTF_XRESOLVE  0x200     /* external daemon resolves name */
@


1.37
log
@Sync flags with route.h
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.36 2014/01/22 06:25:52 claudio Exp $
d33 1
a33 1
.Dd $Mdocdate: January 22 2014 $
d40 3
a42 3
.Fd #include <sys/socket.h>
.Fd #include <net/if.h>
.Fd #include <net/route.h>
@


1.36
log
@Adjust man pages since RTA_GENMASK is going away (even though we keep the
defines for now they should not be documented).
OK benno@@ and agreed dlg@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.35 2013/11/17 00:40:50 bluhm Exp $
d33 1
a33 1
.Dd $Mdocdate: November 17 2013 $
d371 2
@


1.35
log
@The struct rt_metrics has changed, update documentation in route(4).
While there, add some missing constants.
OK claudio@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.34 2012/03/17 10:16:41 dlg Exp $
d33 1
a33 1
.Dd $Mdocdate: March 17 2012 $
a399 1
#define RTA_GENMASK	0x8	/* cloning mask sockaddr present */
@


1.34
log
@remove IP_JUMBO, SO_JUMBO, and RTF_JUMBO.

no objection from mcbride@@ krw@@ markus@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.33 2011/12/08 20:58:49 blambert Exp $
d33 1
a33 1
.Dd $Mdocdate: December 8 2011 $
d327 1
a329 1
	u_int		rmx_expire;	/* lifetime for route, e.g. redirect */
d337 1
d365 1
d405 2
@


1.33
log
@Begin documenting the soup sandwich that is the kernel routing code.

Much handholding jmc@@

ok jmc@@ sthen@@ claudio@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.32 2011/02/12 09:40:33 sthen Exp $
d33 1
a33 1
.Dd $Mdocdate: February 12 2011 $
a367 1
#define RTF_JUMBO     0x80000   /* try to use jumbo frames */
@


1.32
log
@sync with v4 route socket changes. ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.31 2010/07/03 04:44:51 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: July 3 2010 $
d411 2
a412 1
.Xr route 8
@


1.31
log
@Fix the naming of interfaces and variables for rdomains and rtables
and make it possible to bind sockets (including listening sockets!)
to rtables and not just rdomains.  This changes the name of the
system calls, socket option, and ioctl.  After building with this
you should remove the files /usr/share/man/cat2/[gs]etrdomain.0.

Since this removes the existing [gs]etrdomain() system calls, the
libc major is bumped.

Written by claudio@@, criticized^Wcritiqued by me
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.30 2009/06/05 06:48:32 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 5 2009 $
d239 1
d248 1
d250 3
a252 1
	int	rtm_flags;	/* flags, incl. kern & message, eg DONE */
d254 2
d259 1
a259 3
	int	rtm_use;	/* deprecated use rtm_rmx->rmx_pksent */
#define rtm_fmask	rtm_use	/* bitmask used in RTM_CHANGE message */
	u_long	rtm_inits;	/* which metrics we are initializing */
d267 5
d274 1
a274 1
	u_short	ifm_index;	/* index for associated ifp */
d282 5
a288 1
	u_short	ifam_index;	/* index for associated ifp */
d296 1
d298 1
a299 1
	u_short	ifan_what;	/* what type of announcement */
d326 11
a336 10
	u_long	rmx_locks;	/* Kernel must leave these values alone */
	u_long	rmx_mtu;	/* MTU for this path */
	u_long	rmx_hopcount;	/* max hops expected */
	u_long	rmx_expire;	/* lifetime for route, e.g. redirect */
	u_long	rmx_recvpipe;	/* inbound delay-bandwidth product */
	u_long	rmx_sendpipe;	/* outbound delay-bandwidth product */
	u_long	rmx_ssthresh;	/* outbound gateway buffer limit */
	u_long	rmx_rtt;	/* estimated round trip time */
	u_long	rmx_rttvar;	/* estimated rtt variance */
	u_long	rmx_pksent;	/* packets sent using this route */
d368 2
@


1.30
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.29 2009/06/05 00:43:09 claudio Exp $
d189 2
a190 3
A process can specify a routing domain by setting the
.Dv SO_RDOMAIN
flag to
@


1.29
log
@Document SO_RDOMAIN
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.28 2009/03/31 01:37:33 dlg Exp $
d33 1
a33 1
.Dd $Mdocdate: March 31 2009 $
d191 1
a191 1
flag to 
@


1.28
log
@document the changes to the route filter API. basically:

-ROUTE_SETFILTER(rtfilter, RTM_IFINFO);
-ROUTE_SETFILTER(rtfilter, RTM_IFANNOUNCE);
+rtfilter = ROUTE_FILTER(RTM_IFINFO) |
+    ROUTE_FILTER(RTM_IFANNOUNCE);

poked by claudio@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.27 2009/03/27 13:31:15 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 27 2009 $
d188 5
@


1.27
log
@zap trailing whitespace; from grunk
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.26 2009/01/29 14:38:56 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: January 29 2009 $
d191 1
a191 1
.Dv ROUTE_SETFILTER(unsigned int flags, int type)
d201 2
a202 2
ROUTE_SETFILTER(rtfilter, RTM_IFINFO);
ROUTE_SETFILTER(rtfilter, RTM_IFANNOUNCE);
@


1.26
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.25 2009/01/29 12:48:01 claudio Exp $
d203 1
a203 1
		  
@


1.25
log
@My try at documenting the route socket filtering. ja ja dlg@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.24 2008/05/07 12:04:26 claudio Exp $
d33 1
a33 1
.Dd $Mdocdate: May 7 2008 $
d189 2
a190 2
A process can specify which route message types he's interested in.
By using
d197 1
a197 1
For example to only get interface specific messages:
@


1.24
log
@More .Xr routed removes. Add the other routing daemons to netintro instead.
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.23 2007/05/31 19:19:51 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d181 1
a181 2
option
at the
d188 20
@


1.23
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.22 2006/02/23 14:19:13 claudio Exp $
d33 1
a33 1
.Dd $Mdocdate$
d371 1
a371 2
.Xr route 8 ,
.Xr routed 8
@


1.22
log
@Update struct rt_msghdr. rtm_use is deprecated and is now know as rtm_fmask.
rtm_fmask is used on RTM_CHANGE to unset certain flags. OK mcbride@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.21 2005/06/12 18:57:57 naddy Exp $
d33 1
a33 1
.Dd April 19, 1994
@


1.21
log
@remove vestiges of SIOCADDRT here too; ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.20 2004/08/10 15:07:11 jaredy Exp $
d230 2
a231 1
	int	rtm_use;	/* from rtentry */
@


1.20
log
@update to reality
- elaborate on cloned route behavior
- mention route labels
- sync header file excerpts
- remove ISO mention
- things that were new 10 years ago are just "the way" now, so do not
  refer to them as such
- remove source routing stuff for now
mdoc corrections
add some cross-refs
slight consistency and reorganizational fixes
grammar, punctuation, and rewording fixes

requested by, help, and ok henning
help and ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.19 2004/06/19 20:00:19 cedric Exp $
a210 2
#define RTM_OLDADD	0x9	/* caused by SIOCADDRT */
#define RTM_OLDDEL	0xa	/* caused by SIOCDELRT */
@


1.19
log
@sync (RTF_MPATH).
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.18 2004/06/08 14:50:38 cedric Exp $
d44 1
a44 1
.Fn socket PF_ROUTE SOCK_RAW "int family"
d61 1
a61 1
to external events, such as receipt of a re-direct, or failure to
d67 1
a67 1
by a bit mask and value under the mask.
d90 1
a90 1
as many ones as there are bits in the destination).
d96 1
a96 1
destination address value, and a mask of all zeroes.
d102 13
a114 1
.Pp
d116 3
a118 1
by using the socket call shown in
d120 1
a120 1
above:
d125 1
a125 1
.Dv AF_UNSPEC
d132 6
a137 5
number of sockaddrs (now variable length particularly
in the
.Tn ISO
case), interpreted by position, and delimited
by the new length entry in the sockaddr.
d139 4
a142 3
.Tn ISO
redirect:
Destination, Netmask, Gateway, and Author of the redirect.
d156 1
a156 1
.Ar rtm_errno
d159 1
a159 1
.Dv EEXIST
d162 1
a162 1
.Dv ESRCH
d166 1
a166 1
.Dv ENOBUFS
d171 1
a171 1
.Ar rtm_errno
d197 1
a197 1
message, or via the
d236 1
a236 2
.Ed
.Bd -literal
d246 1
a246 2
.Ed
.Bd -literal
d256 1
a256 2
.Ed
.Bd -literal
d269 2
a270 2
message uses a
.Ar if_msghdr
d275 2
a276 2
messages use a
.Ar ifa_msghdr
d280 2
a281 2
message uses a
.Ar if_announcemsghdr
d284 1
a284 1
.Ar rt_msghdr
d302 6
a307 2
Only rmx_mtu, rmx_expire, rmx_pksent, and rmx_locks are used by the kernel
routing table.
a326 1
#define	RTF_PROTO3    0x2000    /* protocol specific routing flag */
a329 1
#define RTF_SOURCE    0x20000   /* this route has a source selector */
d333 5
a337 1
Specifiers for metric values in rmx_locks and rtm_inits are:
d348 6
a353 1
Only RTV_MTU and RTV_EXPIRE should be used all other flags are ignored.
d365 1
a365 2
#define RTA_SRC		0x100	/* source sockaddr present */
#define RTA_SRCMASK	0x200	/* source netmask present */
d368 1
d370 9
a378 1
.Xr sysctl 3
@


1.18
log
@add new flag and addresses for source-based routing. ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.17 2004/05/04 22:50:18 claudio Exp $
d315 1
@


1.17
log
@The tcp specific routing metrics are almost never used so reduce the routing
table from these metrics. struct rt_msghdr used by the routing socket is not
affected and so most userland apps don't need to be changed.
some man page polishing by jmc@@
OK henning@@ markus@@ theo@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.16 2004/01/21 19:35:39 jmc Exp $
d314 1
d339 3
a341 1
#define RTA_BRD		0x80  /* for NEWADDR, broadcast or p-p dest addr */
@


1.16
log
@sync with headers;
this also includes some typo fixes and improvememnts from the NetBSD page;

prompted by markus@@ and ok itojun@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.15 2003/08/31 19:53:42 jmc Exp $
d289 5
d327 1
@


1.15
log
@.Sx SYNOPSIS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.14 2003/08/26 08:33:12 itojun Exp $
d133 1
a133 1
The kernel will provide the process id.
d153 1
a153 1
In the current implementation, all routing process run locally,
d181 3
a183 1
message.
d187 15
a201 8
#define	RTM_ADD		0x1    /* Add Route */
#define	RTM_DELETE	0x2    /* Delete Route */
#define	RTM_CHANGE	0x3    /* Change Metrics, Flags, or Gateway */
#define	RTM_GET		0x4    /* Report Information */
#define	RTM_LOOSING	0x5    /* Kernel Suspects Partitioning */
#define	RTM_REDIRECT	0x6    /* Told to use different route */
#define	RTM_MISS	0x7    /* Lookup failed on this address */
#define	RTM_RESOLVE	0xb    /* request to resolve dst to LL addr */
d204 1
a204 1
A message header consists of:
d207 12
a218 12
    u_short rtm_msglen;  /* to skip over non-understood messages */
    u_char  rtm_version; /* future binary compatibility */
    u_char  rtm_type;    /* message type */
    u_short rtm_index;   /* index for associated ifp */
    pid_t   rtm_pid;     /* identify sender */
    int     rtm_addrs;   /* bitmask identifying sockaddrs in msg */
    int     rtm_seq;     /* for sender to identify action */
    int     rtm_errno;   /* why failed */
    int     rtm_flags;   /* flags, incl kern & message, e.g. DONE */
    int     rtm_use;     /* from rtentry */
    u_long  rtm_inits;   /* which values we are initializing */
    struct  rt_metrics rtm_rmx;	/* metrics themselves */
d221 52
d274 1
a274 1
where
d277 10
a286 9
    u_long rmx_locks;     /* Kernel must leave these values alone */
    u_long rmx_mtu;       /* MTU for this path */
    u_long rmx_hopcount;  /* max hops expected */
    u_long rmx_expire;    /* lifetime for route, e.g. redirect */
    u_long rmx_recvpipe;  /* inbound delay-bandwidth product */
    u_long rmx_sendpipe;  /* outbound delay-bandwidth product */
    u_long rmx_ssthresh;  /* outbound gateway buffer limit */
    u_long rmx_rtt;       /* estimated round trip time */
    u_long rmx_rttvar;    /* estimated rtt variance */
d305 3
a307 2
#define	RTF_PROTO2    0x4000    /* protocol specific routing flag #1 */
#define	RTF_PROTO1    0x8000    /* protocol specific routing flag #2 */
d313 8
a320 7
#define	RTV_SSTHRESH  0x1    /* init or lock _ssthresh */
#define	RTV_RPIPE     0x2    /* init or lock _recvpipe */
#define	RTV_SPIPE     0x4    /* init or lock _sendpipe */
#define	RTV_HOPCOUNT  0x8    /* init or lock _hopcount */
#define	RTV_RTT       0x10   /* init or lock _rtt */
#define	RTV_RTTVAR    0x20   /* init or lock _rttvar */
#define	RTV_MTU       0x40   /* init or lock _mtu */
d325 8
a332 7
#define RTA_DST       0x1    /* destination sockaddr present */
#define RTA_GATEWAY   0x2    /* gateway sockaddr present */
#define RTA_NETMASK   0x4    /* netmask sockaddr present */
#define RTA_GENMASK   0x8    /* cloning mask sockaddr present */
#define RTA_IFP       0x10   /* interface name sockaddr present */
#define RTA_IFA       0x20   /* interface addr sockaddr present */
#define RTA_AUTHOR    0x40   /* sockaddr for author of redirect */
d334 3
@


1.14
log
@mark cloned route with RTF_CLONED.  remove RTF_CLONED route when clone parent
disappers.  deraadt ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.13 2003/06/02 23:30:12 millert Exp $
d104 3
a106 1
by using the socket call shown in the synopsis above:
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.12 2003/04/19 18:40:01 millert Exp $
d243 1
@


1.12
log
@fix typos; Julien Bordet
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.11 2003/04/03 11:02:36 jmc Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.10 2002/09/26 07:55:40 miod Exp $
d200 1
a200 1
    u_short rmt_msglen;  /* to skip over non-understood messages */
d203 2
a204 2
    u_short rmt_index;   /* index for associated ifp */
    pid_t   rmt_pid;     /* identify sender */
@


1.10
log
@Incomplete section 4 mi manual page cleanup.
- make configuration lines match GENERIC files
- more Xr (hopefully usefule Xr)
- never mention intro(4) on non-physical devices (i.e. protocols), always
mention it for physical devices
- random text style and quoting fixes
- drivers ported from FreeBSD did mention rc.conf instead of hostname.if as
the place to put mediaopt
- some .Tn UNIX -> .Ox replacements
- etc, etc...

reviewd in part by deraadt@@ (until he got bored of this)
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.9 2002/05/06 21:13:18 deraadt Exp $
d129 1
a129 1
The interpretation of which address are present is given by a
@


1.9
log
@spelling
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.8 2001/10/05 14:45:53 mpech Exp $
d50 1
a50 1
.Tn UNIX
@


1.8
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.7 2001/03/01 16:11:19 aaron Exp $
d97 1
a97 1
listers on the routing control socket described below.
@


1.7
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: route.4,v 1.6 2000/12/21 21:01:19 aaron Exp $
d82 5
a86 5
or network.  If the route is direct, the transport layer of
a protocol family usually requests the packet be sent to the
same host specified in the packet.  Otherwise, the interface
is requested to address the packet to the gateway listed in the routing entry
(i.e. the packet is forwarded).
d103 3
a105 3
destination.  The combination of wildcard
routes and routing redirects can provide an economical
mechanism for routing traffic.
d134 5
a138 4
to all interested listeners.  The kernel will provide the process
id. for the sender, and the sender may use an additional sequence
field to distinguish between outstanding messages.  However,
message replies may be lost when kernel buffers are exhausted.
@


1.6
log
@Various repairs, $Id$ tags added, etc.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d120 1
a120 1
number of sockadders (now variable length particularly
@


1.5
log
@Use .Va macro when referring to the global variable errno.
@
text
@d1 1
@


1.4
log
@Typo fixes.
@
text
@d157 1
a157 1
.Em errno
@


1.3
log
@blow away kmem info; freebsd
@
text
@d220 2
a221 2
    u_long rmx_recvpipe;  /* inbound delay-bandwith product */
    u_long rmx_sendpipe;  /* outbound delay-bandwith product */
@


1.2
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d181 1
a181 6
message,
or by reading the
.Pa /dev/kmem
device, or by issuing a
.Xr getkerninfo 2
system call.
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
.Nm route 
d88 1
a88 1
the kernel will attempt to find 
d170 1
a170 1
by doing a 
d177 1
a177 1
be reclaimed until all references to it are released. 
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
