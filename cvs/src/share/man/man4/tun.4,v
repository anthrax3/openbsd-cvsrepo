head	1.43;
access;
symbols
	OPENBSD_6_2_BASE:1.43
	OPENBSD_6_1:1.43.0.8
	OPENBSD_6_1_BASE:1.43
	OPENBSD_6_0:1.43.0.6
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.43.0.2
	OPENBSD_5_9_BASE:1.43
	OPENBSD_5_8:1.40.0.10
	OPENBSD_5_8_BASE:1.40
	OPENBSD_5_7:1.40.0.8
	OPENBSD_5_7_BASE:1.40
	OPENBSD_5_6:1.40.0.6
	OPENBSD_5_6_BASE:1.40
	OPENBSD_5_5:1.40.0.4
	OPENBSD_5_5_BASE:1.40
	OPENBSD_5_4:1.39.0.10
	OPENBSD_5_4_BASE:1.39
	OPENBSD_5_3:1.39.0.8
	OPENBSD_5_3_BASE:1.39
	OPENBSD_5_2:1.39.0.6
	OPENBSD_5_2_BASE:1.39
	OPENBSD_5_1_BASE:1.39
	OPENBSD_5_1:1.39.0.4
	OPENBSD_5_0:1.39.0.2
	OPENBSD_5_0_BASE:1.39
	OPENBSD_4_9:1.38.0.2
	OPENBSD_4_9_BASE:1.38
	OPENBSD_4_8:1.36.0.14
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.36.0.10
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.36.0.12
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.36.0.8
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.36.0.6
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.36.0.4
	OPENBSD_4_3_BASE:1.36
	OPENBSD_4_2:1.36.0.2
	OPENBSD_4_2_BASE:1.36
	OPENBSD_4_1:1.35.0.2
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.34.0.2
	OPENBSD_4_0_BASE:1.34
	OPENBSD_3_9:1.33.0.8
	OPENBSD_3_9_BASE:1.33
	OPENBSD_3_8:1.33.0.6
	OPENBSD_3_8_BASE:1.33
	OPENBSD_3_7:1.33.0.4
	OPENBSD_3_7_BASE:1.33
	OPENBSD_3_6:1.33.0.2
	OPENBSD_3_6_BASE:1.33
	OPENBSD_3_5:1.27.0.2
	OPENBSD_3_5_BASE:1.27
	OPENBSD_3_4:1.26.0.2
	OPENBSD_3_4_BASE:1.26
	OPENBSD_3_3:1.25.0.2
	OPENBSD_3_3_BASE:1.25
	OPENBSD_3_2:1.20.0.6
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.20.0.4
	OPENBSD_3_1_BASE:1.20
	OPENBSD_3_0:1.20.0.2
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9:1.18.0.2
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@# @;


1.43
date	2015.10.23.16.45.51;	author claudio;	state Exp;
branches;
next	1.42;
commitid	JPSGR0m6iK50Cmcg;

1.42
date	2015.10.23.15.17.24;	author claudio;	state Exp;
branches;
next	1.41;
commitid	2qlCd1puZxcXBi4a;

1.41
date	2015.09.14.17.09.26;	author schwarze;	state Exp;
branches;
next	1.40;
commitid	S61RkPHYGNo5TpDc;

1.40
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.39;

1.39
date	2011.05.02.11.14.11;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2010.09.23.01.24.32;	author matthew;	state Exp;
branches;
next	1.37;

1.37
date	2010.08.26.14.04.46;	author claudio;	state Exp;
branches;
next	1.36;

1.36
date	2007.05.31.19.19.52;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2007.02.21.15.01.28;	author claudio;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.09.19.03.04;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2004.09.02.12.55.22;	author jaredy;	state Exp;
branches;
next	1.32;

1.32
date	2004.08.17.23.58.36;	author jaredy;	state Exp;
branches;
next	1.31;

1.31
date	2004.07.28.21.46.04;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2004.06.26.12.24.28;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2004.06.25.04.12.52;	author claudio;	state Exp;
branches;
next	1.28;

1.28
date	2004.06.25.04.09.02;	author claudio;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.08.10.03.43;	author markus;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.06.10.29.41;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.03.11.07.54.01;	author david;	state Exp;
branches;
next	1.24;

1.24
date	2003.03.10.02.37.34;	author mdw;	state Exp;
branches;
next	1.23;

1.23
date	2003.03.09.18.51.36;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2003.03.09.01.19.34;	author deraadt;	state dead;
branches;
next	1.21;

1.21
date	2003.02.18.07.54.53;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.05.14.45.53;	author mpech;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.22.12.15.47;	author mpech;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.05.04.01.21;	author angelos;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.09.18.01.03;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.21.21.01.21;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.09.17.00.53.35;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.05.23.05.04.37;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.15.11.45.51;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.12.16.06.45.31;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.09.23.04.12.05;	author alex;	state Exp;
branches;
next	1.10;

1.10
date	99.06.05.13.18.33;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.05.16.19.56.40;	author alex;	state Exp;
branches;
next	1.8;

1.8
date	99.03.01.05.41.13;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	98.11.04.16.45.57;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	98.10.31.23.17.42;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	98.09.06.22.23.20;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	97.09.07.18.30.03;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.08.02.09.56.25;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.16.16.08.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.10.14.12.47.02;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.43
log
@From jmc@@ "the exclusive open propery" does not make sense. Try with 'an'.
@
text
@.\"	$OpenBSD: tun.4,v 1.42 2015/10/23 15:17:24 claudio Exp $
.\"
.\" Copyright (c) 2003 Marcus D. Watts  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, and the entire permission notice in its entirety,
.\"    including the disclaimer of warranties.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote
.\"    products derived from this software without specific prior
.\"    written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" MARCUS D. WATTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
.\" OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
.\" TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
.\" USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: October 23 2015 $
.Dt TUN 4
.Os
.Sh NAME
.Nm tun
.Nd network tunnel pseudo-device
.Sh SYNOPSIS
.Cd "pseudo-device tun"
.Pp
.In sys/types.h
.In net/if_tun.h
.Sh DESCRIPTION
The
.Nm
driver provides a network interface pseudo-device.
Packets sent to this interface can be read by a userland process
and processed as desired.
Packets written by the userland process are injected back into
the kernel networking subsystem.
.Pp
A
.Nm
interface can be created at runtime using the
.Ic ifconfig tun Ns Ar N Ic create
command or by opening the character special device
.Pa /dev/tunN .
.Pp
Each device has an exclusive open property: it cannot be opened
if it is already open and in use by another process.
Each read returns at most one packet; if insufficient
buffer space is provided, the packet is truncated.
Each write supplies exactly one packet.
Each packet read or written is prefixed with a tunnel header consisting of
a 4-byte network byte order integer containing the address family.
On the last close of the device, all queued packets are discarded.
If the device was created by opening
.Pa /dev/tunN ,
it will be automatically destroyed.
Devices created via
.Xr ifconfig 8
are only marked as not running and traffic will be dropped returning
.Er EHOSTDOWN .
.Pp
Writes never block.
If the protocol queue is full, the packet is dropped, a
.Dq collision
is counted, and
.Er ENOBUFS
is returned.
.Pp
In addition to the usual network interface
ioctl commands described in
.Xr netintro 4 ,
the following special commands defined in
.In net/if_tun.h
are supported:
.Pp
.Bl -tag -width indent -compact
.It Dv TUNGIFINFO Fa "struct tuninfo *"
.It Dv TUNSIFINFO Fa "struct tuninfo *"
Get or set the interface characteristics.
.Bd -literal
/* iface info */
struct tuninfo {
        u_int   mtu;
        u_short type;
        u_short flags;
        u_int   baudrate;
};
.Ed
.Pp
.Va flags
sets the interface flags, and
can include one or more of
.Dv IFF_UP ,
.Dv IFF_POINTOPOINT ,
.Dv IFF_MULTICAST ,
.Dv IFF_BROADCAST .
Flags given will be set; flags omitted will be cleared; flags not in this list
will not be changed even when given.
Flags default to
.Dv IFF_POINTOPOINT .
It is an error to set both
.Dv IFF_POINTOPOINT
and
.Dv IFF_BROADCAST .
.\" should say what type affects...
.Va type
defaults to
.Dv IFT_TUNNEL .
This sets the interface media address header type.
.Pp
.It Dv TUNSIFMODE Fa int *flags
Set just the interface flags.
The same restrictions as for
.Dv TUNSIFINFO
apply.
.Pp
.It Dv FIONBIO Fa int *flag
Set non-blocking I/O.
.Pp
.It Dv FIOASYNC Fa int *flag
Cause signal
.Dv SIGIO
to be sent when a packet can be read.
.Pp
.It Dv TIOCSPGRP Fa int *pgrp
.It Dv TIOCGPGRP Fa int *pgrp
Get or set the process group to which signals might be sent
via
.Dv FIOASYNC .
.Pp
.It Dv FIONREAD Fa int *count
Get the byte count of the next packet available to be read.
.El
.Sh FILES
.Bl -tag -width /dev/tun* -compact
.It Pa /dev/tun*
.El
.Sh ERRORS
If open fails,
.Xr errno 2
may be set to one of:
.Bl -tag -width Er
.It Bq Er ENXIO
Not that many devices configured.
.It Bq Er EBUSY
Device was already open.
.El
.Pp
If a
.Xr write 2
call fails,
.Xr errno 2
is set to one of:
.Bl -tag -width Er
.It Bq Er EMSGSIZE
The packet supplied was too small or too large.
The maximum sized packet allowed is currently 16384 bytes.
.It Bq Er ENOBUFS
There were no mbufs, or
the queue for the outgoing protocol is full.
.It Bq Er EAFNOSUPPORT
The address family specified in the tunnel header was not
recognized.
.El
.Pp
Ioctl commands may fail with:
.Bl -tag -width Er
.It Bq Er EINVAL
Attempt to set both
.Dv IFF_POINTOPOINT
and
.Dv IFF_BROADCAST
with
.Dv TUNSIFMODE
or using
.Dv SIOCGIFADDR
or
.Dv SIOCSIFADDR .
.It Bq Er ENOTTY
Unrecognized ioctl command.
.El
.Pp
A
.Xr read 2
call may fail because of:
.Bl -tag -width Er
.It Bq Er EHOSTDOWN
The device is not ready.
The device must have an
.Xr inet 4
interface address assigned to it, such as via
.Dv SIOCSIFADDR .
.It Bq Er EWOULDBLOCK
Non-blocking I/O was selected and no packets were available.
.El
.Pp
An attempt to send a packet out via the interface may fail with:
.Bl -tag -width Er
.It Bq Er EHOSTDOWN
The device is not ready.
The device must have an
.Xr inet 4
interface address assigned to it, such as via
.Dv SIOCSIFADDR .
.El
.Sh SEE ALSO
.Xr inet 4 ,
.Xr intro 4 ,
.Xr netintro 4 ,
.Xr hostname.if 5 ,
.Xr ifconfig 8 ,
.Xr netstart 8
@


1.42
log
@Adjust tun(4) and tap(4) after the split.
Note: "pseudo-device tun" is used by both devices this is not a typo
OK dlg@@ mpi@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.41 2015/09/14 17:09:26 schwarze Exp $
d29 1
a29 1
.Dd $Mdocdate: September 14 2015 $
d56 1
a56 1
Each device has the exclusive open property; it cannot be opened
@


1.41
log
@convert .Fd #include to .In
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.40 2014/01/21 03:15:46 schwarze Exp $
d29 1
a29 1
.Dd $Mdocdate: January 21 2014 $
a55 21
Both layer 3 and layer 2 tunneling is supported;
layer 3 tunneling is the default mode.
To enable layer 2 tunneling mode,
where the
.Nm
interface simulates an Ethernet network interface,
the
.Ar link0
flag needs to be set with
.Xr ifconfig 8
or by setting up a
.Xr hostname.if 5
configuration file for
.Xr netstart 8 .
Note that setting or unsetting the
.Ar link0
flag causes
.Nm
to lose any configuration settings,
and that it is not advisable to use the flag with any other parameters.
.Pp
d62 1
a62 3
a 4-byte network byte order integer containing the address family in the case
of layer 3 tunneling.
In layer 2 mode the 4-byte tunnel header is replaced with an Ethernet header.
d110 1
a110 4
.Dv IFF_POINTOPOINT
for layer 3 and to
.Dv IFF_BROADCAST | IFF_MULTICAST
for layer 2 mode.
d118 1
a118 4
.Dv IFT_TUNNEL
for layer 3 and
.Dv IFT_ETHER
for layer 2 tunneling mode.
a142 4
.Pp
.It Dv SIOCGIFADDR Fa struct ether_addr *addr
.It Dv SIOCSIFADDR Fa struct ether_addr *addr
Get or set the Ethernet address of the device in layer 2 mode.
d188 1
a188 2
.Dv SIOCSIFADDR
in layer 3 mode.
@


1.40
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.39 2011/05/02 11:14:11 jmc Exp $
d29 1
a29 1
.Dd $Mdocdate: May 2 2011 $
d38 2
a39 2
.Fd #include <sys/types.h>
.Fd #include <net/if_tun.h>
@


1.39
log
@no need to escape `|'; as discussed with schwartze
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.38 2010/09/23 01:24:32 matthew Exp $
d29 1
a29 1
.Dd $Mdocdate: September 23 2010 $
d106 1
a106 1
.Aq Pa net/if_tun.h
@


1.38
log
@Eliminate mention of EPERM error condition from tun(4) man page.  We
just use the filesystem permissions now.

Pointed out by stsp@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.37 2010/08/26 14:04:46 claudio Exp $
d29 1
a29 1
.Dd $Mdocdate: August 26 2010 $
d135 1
a135 1
.Dv IFF_BROADCAST \&| IFF_MULTICAST
@


1.37
log
@Try to be a bit more specific about what happens when link0 is used.
link0 will reset the interface and all configuration is lost (e.g. -inet6 or
rdomain settings) so use link0 as first command without any other arguments
to get a deterministic behaviour.
With a lot of help by jmc@@ (actually commiting his version because it is much
nicer, as ususal).
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.36 2007/05/31 19:19:52 jmc Exp $
d29 1
a29 1
.Dd $Mdocdate: May 31 2007 $
a185 2
.It Bq Er EPERM
Only the superuser may open the device.
@


1.36
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.35 2007/02/21 15:01:28 claudio Exp $
d29 1
a29 1
.Dd $Mdocdate$
d56 7
a62 2
Both layer 3 and layer 2 tunneling is supported.
Layer 3 tunneling is the default mode; to enable layer 2 tunneling mode the
d65 1
a65 1
.Xr ifconfig 8 ,
d70 3
a72 1
In layer 2 mode the
d74 2
a75 1
interface is simulating an Ethernet network interface.
@


1.35
log
@Sync with reality. Initial diff by Ingo Schwarze additional help by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.34 2006/05/09 19:03:04 jmc Exp $
d29 1
a29 1
.Dd March 9, 2003
@


1.34
log
@no need to specify a "count" argument: ifconfig(8) handles these
"on demand";

from jan niemann;
ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.33 2004/09/02 12:55:22 jaredy Exp $
d78 8
a85 3
On the last close of the device, all packets are discarded,
the device is marked down, and all routes via the device
are removed.
d88 1
a88 2
If the protocol queue is full, the packet is dropped,
a
d122 7
a128 2
It defaults to
.Dv IFF_POINTOPOINT .
d136 4
a139 3
.Dv IFT_PROPVIRTUAL
but can be set to
.Dv IFT_PPP .
d144 3
a250 7
.Sh BUGS
There is no way to set
.Dv TUN_STAYUP .
.Pp
.Dv TUNSIFINFO
does no checking on
.Va flags .
@


1.33
log
@minor mdoc fixes
consistency in wording
fix ioctl listing

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.32 2004/08/17 23:58:36 jaredy Exp $
d36 1
a36 1
.Cd "pseudo-device tun" Op Ar count
@


1.32
log
@keep all "ifconfig <cloneable> create" examples the same

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.31 2004/07/28 21:46:04 jmc Exp $
d84 3
a86 1
a ``collision'' is counted, and
d98 3
a100 3
.It Dv TUNGIFINFO (struct tuninfo)
.It Dv TUNSIFINFO (struct tuninfo)
Can be used to get or set the interface characteristics.
d133 2
a134 1
Can be used to just set the interface flags.
d136 2
a137 1
Can be used to set non-blocking I/O.
d139 1
a139 1
Can be used to cause signal
d142 1
d148 1
d150 2
a151 1
Gets the byte count of the next packet available to be read.
d165 1
a165 1
.It Bq Eq EPERM
d167 1
a167 1
.It Bq Eq ENXIO
d169 1
a169 1
.It Bq Eq EBUSY
d179 1
a179 1
.It Bq Eq EMSGSIZE
d182 1
a182 1
.It Bq Eq ENOBUFS
d185 1
a185 1
.It Bq Eq EAFNOSUPPORT
d192 1
a192 1
.It Bq EINVAL
d204 1
a204 1
.It Bq ENOTTY
d212 1
a212 1
.It Bq Eq EHOSTDOWN
d218 1
a218 1
.It Bq Eq EWOULDBLOCK
d224 1
a224 1
.It Bq Eq EHOSTDOWN
@


1.31
log
@hostname.tun can be used to set link0, so add standard hostname.if(5)/
netstart(8) blurb; spotted by Alexey E. Suslikov;

also, add hostname.if(5) and netstart(8) to SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.30 2004/06/26 12:24:28 jmc Exp $
d52 1
a52 1
.Ic ifconfig tunN create
@


1.30
log
@- hyphenate 4-byte (adjectival)
- uppercase `e' in ethernet
- kill whitespace
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.29 2004/06/25 04:12:52 claudio Exp $
d57 1
a57 1
Layer 3 tunneling is the default mode, to enable layer 2 tunneling mode the
d60 5
a64 1
.Xr ifconfig 8 .
d228 3
a230 1
.Xr ifconfig 8
@


1.29
log
@typo noticed by theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.28 2004/06/25 04:09:02 claudio Exp $
d71 1
a71 1
a 4 byte network byte order integer containing the address family in the case
d73 1
a73 1
In layer 2 mode the 4 byte tunnel header is replaced with a Ethernet header.
d143 1
a143 1
Get or set the ethernet address of the device in layer 2 mode.
d187 1
a187 1
.Dv TUNSIFMODE 
@


1.28
log
@Add tap aka layer 2 tunneling support to tun(4). It can be enabled by setting
the link0 flag via ifconfig(8). OK markus@@, canacar@@ also tested by ish@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.27 2003/12/08 10:03:43 markus Exp $
d56 1
a56 1
Both layer 3 and layer 2 tunnenling is supported.
@


1.27
log
@mention ifconfig create; sync synopsis like (Op Ar count). with jmc, deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.26 2003/06/06 10:29:41 jmc Exp $
d56 9
d71 3
a73 1
a 4 byte network byte order integer containing the address family.
d134 1
a134 1
.It Dv TIOCSPGRP Fa int *pgpp
d141 3
a180 3
.It Bq EBUSY
.Dv TUNSIFMODE
and the interface was up.
d187 6
a192 1
.Dv TUNSIFMODE .
@


1.26
log
@- section reorder
- some macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.25 2003/03/11 07:54:01 david Exp $
d36 1
a36 1
.Cd pseudo-device tun Op Ar count
a47 1
By default 2 such interfaces are provided.
d49 1
a49 1
The
d51 5
a55 4
driver normally appears as a character special device,
.Pa /dev/tun0 ,
.Pa /dev/tun1 ,
etc.
@


1.25
log
@date is supposed to be written formally
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.24 2003/03/10 02:37:34 mdw Exp $
d205 1
a206 1
.Xr inet 4 ,
d210 3
a212 2
There is no way to set TUN_STAYUP.
.br
@


1.24
log
@Fixed some small typos & formatting following suggestions from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.23 2003/03/09 18:51:36 deraadt Exp $
d29 1
a29 1
.Dd Mar 9, 2003
@


1.23
log
@start of replacement tun page; from mdw
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d73 1
a73 1
In additional to the usual network interface
d83 1
a83 1
can be used to get or set the interface characteristics.
d93 1
d118 1
a118 1
can be to use to set non-blocking I/O.
d120 1
a120 1
can be used to cause signal
d152 1
a152 1
is set to one of
d158 1
a158 1
The were no mbufs, or
d165 1
a165 1
Ioctl commands may fail with
d183 1
a183 1
call may fail because of
d195 1
a195 1
An attempt to send a packet out via the interface may fail with
d205 2
a206 2
.Xr intro 4
.Xr inet 4
a214 1

@


1.22
log
@der Mouse, ie. "Mike Parker", adamantly refuses to let us put his real
name on a copyright notice, therefore legally this file is not free
software.  Mike thinks I am rude for saying that a non-legal license
is not free software.  Well, I am sorry, but legally we *must* remove
it.  I can't believe how IRC some people are...
Anyone want to step up and write a free replacement for this page?  If
you can write a free replacement in a day or so, that would be awesome.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.21 2003/02/18 07:54:53 jmc Exp $
d3 1
a3 3
.\"
.\" Copyright (c) 1996 der Mouse
.\" All rights reserved.
a7 1
.\"
d9 2
a10 1
.\"    notice, this list of conditions and the following disclaimer.
d14 14
a27 16
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by der Mouse.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d29 1
a29 1
.Dd March 10, 1996
d34 1
a34 1
.Nd Tunnel Network Interface
d36 4
a39 1
.Cd "pseudo-device tun 4"
d43 6
a48 8
interface is a software loopback mechanism that can be loosely
described as the network interface analog of the
.Xr pty 4 ,
that is,
.Nm
does for network interfaces what the
.Nm pty
driver does for terminals.
d52 52
a103 23
driver, like the
.Nm pty
driver, provides two interfaces: an interface like the usual facility
it is simulating (a network interface in the case of
.Nm tun ,
or a terminal for
.Nm pty ) ,
and a character-special device
.Dq control
interface.
.Pp
The network interfaces are named
.Sy tun Ns Ar 0 ,
.Sy tun Ns Ar 1 ,
etc, as many in all as the
.Ar count
figure given on the
.Sy pseudo-device
line.
Each one supports the usual network-interface
.Xr ioctl 2 Ns s ,
such as
.Dv SIOCSIFADDR
d105 41
a145 14
.Dv SIOCSIFNETMASK ,
and thus can be used with
.Xr ifconfig 8
like any other interface.
At boot time, they are
.Dv POINTOPOINT
interfaces, but this can be changed; see the description of the control
device, below.
When the system chooses to transmit a packet on the network interface,
the packet can be read from the control device (it appears as
.Dq input
there); writing a packet to the control device generates an input
packet on the network interface, as if the (nonexistent) hardware had
just received it.
d147 16
a162 61
There are two control interfaces.
The
.Em data
interface, normally
.Pa /dev/tun Ns Sy N ,
is exclusive-open (it cannot be opened if it is already open), is
normally restricted to the superuser, and can
.Dq transmit
and
.Dq receive
packets.
The
.Em control
interface, normally
.Pa /dev/tunc Ns Sy N ,
cannot send and receive packets, but can be opened by many processes at
once; it is intended for status queries and changes (many of which can
also be implemented with
.Fn ioctl
calls on the data interface).
There are a number of status bits that can be set or cleared via the control
interfaces; they are mentioned below where applicable, and they are all
summarized in the discussions of the control interfaces.
.\" Why isn't .Ss documented in mdoc(7) and mdoc.samples(7)?
.Ss The data interface
The data interface supports
.Xr read 2 ,
.Xr write 2 ,
and
.Xr ioctl 2
calls to, respectively, collect
.Dq output
packets, generate
.Dq input
packets, and perform control functions.
As mentioned above, this interface is exclusive-open; if the
.Dv SUONLY
bit is set (which it is by default), it cannot be opened at all except
by the superuser.
By default, a
.Fn read
call will return an error
.Pf ( Er EHOSTDOWN )
if the interface is not
.Dq ready
(which means that the control device is open and the interface's
address has been set); if preferred, the
.Dv RRWAIT
bit can be set, in which case a
.Fn read
call will block (even if non-blocking I/O has been enabled) until the
interface is ready.
Once the interface is ready,
.Fn read
will return a packet if one is available; if not, it will either block
until one is or return
.Er EWOULDBLOCK ,
depending on whether non-blocking I/O has been enabled.
If the packet is longer than is allowed for in the buffer passed to
.Fn read ,
the extra data will be silently dropped.
d164 7
a170 51
The first u_int32_t of data will always be the address family (eg,
.Dv AF_INET )
of the packet in network byte order.
By default, the packet data follows immediately, but if
the
.Dv PREPADDR
bit is set, the address to which the packet is to be sent is placed
after the address family u_int32_t and before the packet data.
The size and layout of the address depends on the address family; for
.Dv AF_INET ,
for example, it is a
.Va struct in_addr .
A
.Xr write 2
call passes a packet in to be
.Dq received
on the pseudo-interface.
Each
.Fn write
call supplies exactly one packet; the packet length is taken from the
amount of data provided to
.Fn write .
The first u_int32_t must be the address family of the packet in network
byte order, much as in packets returned by
.Fn read ;
the packet data always follows immediately.
A
.Fn write
with an invalid address family (e.g.
not specified or in the wrong byte order) will return
.Er ENOSUPPORT .
A large number of
.Xr ioctl 2
calls are also supported.
They are defined in
.Aq Pa net/if_tun.h Ns .
.Bl -tag -width TUN_PREPADDR
.It Dv TUNSDEBUG
The argument should be a pointer to an
.Va int ;
this sets the internal debugging variable to that value.
What, if anything, this variable controls is not documented here;
see the source code.
.It Dv TUNGDEBUG
The argument should be a pointer to an
.Va int ;
this stores the internal debugging variable's value into it.
.It Dv TUNSIFMODE
The argument should be a pointer to an
.Va int ;
its value must be
d172 6
a177 74
or
.Dv IFF_BROADCAST .
The type of the corresponding
.Em tun Ns Sy n
interface is set to the supplied type.
If the value is anything else, an
.Er EINVAL
error occurs.
The interface must be down at the time; if it is up, an
.Er EBUSY
error occurs.
.\" X .It Dv TUNSFLAG
.\" X The interface's flag bits are set as specified in the
.\" X .Va int
.\" X argument.  Only some of the bits can be modified; the rest are
.\" X read-only.  The bits are defined in
.\" X .Aq Pa net/if_tun.h
.\" X with a
.\" X .Dv TUN_
.\" X prefix; for example, the bit called
.\" X .Dv RRWAIT
.\" X in this document would be referred to in source code as
.\" X .Dv TUN_RRWAIT .
.\" X The bits are:
.\" X .\" Why isn't the way to create a table like this documented in mdoc(7)
.\" X .\" or mdoc.samples(7)?!
.\" X .Bl -column "TUN_PREPADDR" "RO/RW" -compact -indent-two
.\" X .It Name Ta RO/RW Ta Meaning
.\" X .It Dv TUN_OPEN Ta RO Ta "Data control device is open."
.\" X .It Dv TUN_INITED Ta RO Ta "Initialized."
.\" X .It Dv TUN_RCOLL Ta RO Ta "Select-for-read collision."
.\" X .It Dv TUN_IASET Ta RO Ta "Address has been set."
.\" X .It Dv TUN_DSTADDR Ta RO Ta "Destination address has been set."
.\" X .It Dv TUN_RWAIT Ta RO Ta "A process is blocked in Fn read Ns ."
.\" X .It Dv TUN_ASYNC Ta RO Ta "Generate Dv SIGIO No for readers."
.\" X .It Dv TUN_NBIO Ta RO Ta "Non-blocking I/O for reads."
.\" X .It Dv TUN_BRDADDR Ta RO Ta "Broadcast address has been set."
.\" X .It Dv TUN_PREPADDR Ta RW Ta "Prepend sent-to address for reads."
.\" X .It Dv TUN_STAYUP Ta RW Ta "Don't take interface down on close."
.\" X .It Dv TUN_SUONLY Ta RW Ta "Data control device is superuser only."
.\" X .It Dv TUN_RRWAIT Ta RW Ta "Wait for ready when reading."
.\" X .El
.\" X .It Dv TUNGFLAG
.\" X The interface's flag bits are fetched into the argument
.\" X .Va int .
.\" X The flags and their meanings are as for
.\" X .Dv TUNSFLAG .
.\" X .It Dv FIONBIO
.\" X Turn non-blocking I/O for reads off or on, according as the argument
.\" X .Va int Ns 's
.\" X value is or isn't zero.  (Writes are always nonblocking.)
.\" X .It Dv FIOASYNC
.\" X Turn asynchronous I/O for reads (ie, generation of
.\" X .Dv SIGIO
.\" X when data is available to be read) off or on, according as the argument
.\" X .Va int Ns 's
.\" X value is or isn't zero.
.\" X .It Dv FIONREAD
.\" X If any packets are queued to be read, store the size of the first one
.\" X into the argument
.\" X .Va int ;
.\" X otherwise, store zero.
.\" X .It Dv TIOCSPGRP
.\" X Set the process group to receive
.\" X .Dv SIGIO
.\" X signals, when asynchronous I/O is enabled, to the argument
.\" X .Va int
.\" X value.
.\" X .It Dv TIOCGPGRP
.\" X Retrieve the process group value for
.\" X .Dv SIGIO
.\" X signals into the argument
.\" X .Va int
.\" X value.
a178 7
The data control device also supports
.Xr select 2
for read; selecting for write is pointless, and always succeeds, since
writes are always nonblocking (if the packet cannot be accepted for a
transient reason (e.g., no buffer space available), it is silently
dropped; if the reason is not transient (e.g., packet too large), an
error is returned).
d180 1
a180 22
On the last close of the data device, by default, the interface is
brought down (as if with
.Dq ifconfig tun Ns Sy n down ) ;
if the
.Dv STAYUP
bit is set, this is not done.
In either case, all queued packets are thrown away.
(If the interface is up when the data device is not open, either
because of
.Dv STAYUP
or because it was explicitly brought up, output packets are always
thrown away rather than letting them pile up.)
.Ss The control interface
The alternative control interface is a text-based interface designed
for shell-script or human use; it allows control of many of the things
that can be done with
.Fn ioctl
calls on the data interface, and a few more as well.
.Pp
.Fn read Ns s
on the control interface always return a single line of text (or just
the beginning of the line, if the buffer passed to
d182 11
a192 19
was too small to take the whole line).
The line contains items in the general format
.Do
.Li item=value
.Dc ,
where
.Li item
is a keyword and
.Li value
is a value appropriate to the keyword.
This line is intended for human use; programs should use the
.Fn ioctl
interface.
Here is an actual example (broken because of width restrictions):
.Bd -literal
unit=0 flags=(open,inited,!rcoll,iaset,!dstaddr,!rwait,!async,
!nbio,!brdaddr,prepaddr,stayup,suonly,rrwait) type=broadcast
mtu=1500 coll=0 ipkts=0/0 opkts=0/0 pgrp=0
.Ed
d194 9
a202 55
Note that the current file offset is ignored for reads, so using a tool like
.Xr cat 1
will result in infinite output.
Use something more like
.Dq head\ \&-1
for command-line use.
It is possible to
.Xr select 2
for reading on this device, which will indicate that the device is
readable whenever the state is changed.
.Pp
Writes to the control interface are interpreted as modifications to the
state.
Each
.Fn write
call is treated separately.
The data written is broken at whitespace (blanks, tabs, newlines);
each resulting fragment has its first character examined.
If this character is a
.Ql \&+
or
.Ql \&\- ,
the rest of the fragment is taken as a flag name, and the flag is
turned on (for
.Ql \&+ )
or off (for
.Ql \&\- ) .
(Flag names are as generated on reads; they are the same as the
.Dv TUN_ Ns Em xxx
constants, with the leading
.Dv TUN_
removed and the rest lowercased.)
If the first character is
.Ql t ,
the second character must be
.Ql b
or
.Ql p ,
and the interface type is set to
.Dv IFF_BROADCAST
or
.Dv IFF_POINTOPOINT ,
respectively.
If the first character is
.Ql g
or
.Ql m ,
the rest of the fragment is taken as a number in decimal (possibly with
a leading \&\- sign) and the result is taken as a new process group,
for
.Ql g
or MTU, for
.Ql m .
(The MTU must not be less than 1; attempts to set it so return
.Er EIO . )
d204 4
a207 3
.Xr inet 4 ,
.Xr inet6 4 ,
.Xr netintro 4
d209 6
a214 27
The
.Dv SUONLY
bit is a botch, especially since the control interface, which is never
restricted by the kernel, can change it.
Access control really should be handled by the permission bits on the
.Pa /dev
entries for the data and control devices; this bit is a historical
artifact.
.Pp
The process-group values for
.Dv SIGIO
signals should be checked; as it stands, the driver can be used (by
anyone who can open the control or data device) to send any desired
signal to an arbitrary process or process group.
(Until this is fixed, you should be careful to set the permission bits to
allow only root to open the control device, and either do the same for
the data device or leave the
.Dv SUONLY
bit set.)
.Sh NOTES
Very old versions of the tunnel device did not include the address
family at the start of the packet.
More recent versions passed the address family as a single byte, but this
caused problems with bpf, hence the current version passes a u_int32_t
of address family.
This was initially pass in host byte order, but the current version now uses
network byte order.
@


1.21
log
@copyrights added;

ac97(4): Constantine Sapuntzakis
scsi(4): Julian Elischer
tun(4): der Mouse (thanks mickey@@ for help with this one)
vlan(4): Jason R. Thorpe
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.20 2001/10/05 14:45:53 mpech Exp $
@


1.20
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 31
a31 1
.\"	$OpenBSD: tun.4,v 1.19 2001/06/22 12:15:47 mpech Exp $
@


1.19
log
@o) remove unnecessary .Pp;
o) remove unnecessary .Nm args;
o) closes .Bl;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) sort SEE ALSO;
o) better -mdoc style;
o) typos;

aaron@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.18 2001/03/05 04:01:21 angelos Exp $
d43 2
a44 1
line.  Each one supports the usual network-interface
d52 2
a53 1
like any other interface.  At boot time, they are
d56 3
a58 3
device, below.  When the system chooses to transmit a packet on the
network interface, the packet can be read from the control device (it
appears as
d64 2
a65 1
There are two control interfaces.  The
d74 2
a75 1
packets.  The
d83 4
a86 4
calls on the data interface).  There are a number of status bits that
can be set or cleared via the control interfaces; they are mentioned
below where applicable, and they are all summarized in the discussions
of the control interfaces.
d98 2
a99 2
packets, and perform control functions.  As mentioned above, this
interface is exclusive-open; if the
d102 2
a103 1
by the superuser.  By default, a
d115 2
a116 1
interface is ready.  Once the interface is ready,
d121 2
a122 2
depending on whether non-blocking I/O has been enabled.  If the packet
is longer than is allowed for in the buffer passed to
d128 2
a129 2
of the packet in network byte order.  By default, the packet data follows
immediately, but if
d133 2
a134 2
after the address family u_int32_t and before the packet data.  The size and
layout of the address depends on the address family; for
d142 2
a143 1
on the pseudo-interface.  Each
d154 2
a155 2
with an invalid address family (e.g. not specified or in the wrong byte
order) will return
d159 2
a160 1
calls are also supported.  They are defined in
d166 3
a168 3
this sets the internal debugging variable to that value.  What, if
anything, this variable controls is not documented here; see the source
code.
d182 2
a183 2
interface is set to the supplied type.  If the value is anything else,
an
d185 2
a186 1
error occurs.  The interface must be down at the time; if it is up, an
d257 2
a258 2
transient reason (eg, no buffer space available), it is silently
dropped; if the reason is not transient (eg, packet too large), an
d266 4
a269 3
bit is set, this is not done.  In either case, all queued packets are
thrown away.  (If the interface is up when the data device is not open,
either because of
d284 2
a285 2
was too small to take the whole line).  The line contains items in the
general format
d293 2
a294 2
is a value appropriate to the keyword.  This line is intended for human
use; programs should use the
d296 2
a297 2
interface.  Here is an actual example (broken because of width
restrictions):
d306 2
a307 1
will result in infinite output.  Use something more like
d309 2
a310 1
for command-line use.  It is possible to
d316 2
a317 1
state.  Each
d319 4
a322 3
call is treated separately.  The data written is broken at whitespace
(blanks, tabs, newlines); each resulting fragment has its first
character examined.  If this character is a
d335 2
a336 1
removed and the rest lowercased.)  If the first character is
d346 2
a347 1
respectively.  If the first character is
d367 2
a368 2
restricted by the kernel, can change it.  Access control really should
be handled by the permission bits on the
d377 4
a380 4
signal to an arbitrary process or process group.  (Until this is fixed,
you should be careful to set the permission bits to allow only root to
open the control device, and either do the same for the data device or
leave the
d385 5
a389 4
family at the start of the packet.  More recent versions passed the
address family as a single byte, but this caused problems with bpf,
hence the current version passes a u_int32_t of address family.  This was
initially pass in host byte order, but the current version now uses
a390 1

@


1.18
log
@Rename TUNSMODE to TUNSIFMODE
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.17 2001/01/09 18:01:03 krw Exp $
d13 1
a13 1
.Nm tun
d18 1
a18 1
.Nm tun
d24 1
a24 1
.Nm tun
@


1.17
log
@Typo: 'eg.' -> 'e.g.'
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.16 2000/12/21 21:01:21 aaron Exp $
d165 1
a165 1
.It Dv TUNSMODE
@


1.16
log
@Various repairs, $Id$ tags added, etc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.15 2000/09/17 00:53:35 aaron Exp $
d147 1
a147 1
with an invalid address family (eg. not specified or in the wrong byte
@


1.15
log
@Zap some unwanted trailing whitespace.
@
text
@d1 2
a2 1
.\"	$OpenBSD: tun.4,v 1.14 2000/05/23 05:04:37 deraadt Exp $
@


1.14
log
@doc actual tun behaviour; jon@@spock.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.13 2000/04/15 11:45:51 aaron Exp $
d140 1
a140 1
The first u_int32_t must be the address family of the packet in network 
d145 3
a147 3
.Fn write 
with an invalid address family (eg. not specified or in the wrong byte 
order) will return 
@


1.13
log
@- For consistency, `super-user' -> `superuser' in all cases.
- Some punctuation fixes.
- Some `id' -> `ID'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.12 1999/12/16 06:45:31 deraadt Exp $
d121 1
a121 1
of the packet in host byte order.  By default, the packet data follows
d140 2
a141 2
The first u_int32_t must be the address family of the packet in host byte order,
much as in packets returned by
d144 5
d370 3
a372 1
hence the current version passes a u_int32_t of address family.
@


1.12
log
@Xr inet6 4
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.11 1999/09/23 04:12:05 alex Exp $
d66 1
a66 1
normally restricted to the super-user, and can
d97 1
a97 1
by the super-user.  By default, a
d202 1
a202 1
.\" X .It Dv TUN_SUONLY Ta RW Ta "Data control device is super-user only."
@


1.11
log
@Typo fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.10 1999/06/05 13:18:33 aaron Exp $
d339 1
@


1.10
log
@more .Os cleanup, remove some trailing whitespace, cleanse some .Nm
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.9 1999/05/16 19:56:40 alex Exp $
d355 1
a355 1
you should be careful to set the permisison bits to allow only root to
@


1.9
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.8 1999/03/01 05:41:13 aaron Exp $
d4 1
a4 1
.Os OpenBSD 1.2
@


1.8
log
@currect -> current; d@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.7 1998/11/04 16:45:57 mickey Exp $
d338 2
a339 2
.Xr netintro 4 ,
.Xr inet 4
@


1.7
log
@kill bogus sentence, probably scribbled by me. noticed by espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.6 1998/10/31 23:17:42 espie Exp $
d364 1
a364 1
hence the currect version passes a u_int32_t of address family.
@


1.6
log
@Fix netintro/intro muck-up.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.5 1998/09/06 22:23:20 aaron Exp $
a336 3
.Pp
This interface is useful for command-line reconfiguration, such as
setting the interface type at boot time, with 
@


1.5
log
@More man page fixes. Spelling, grammar, some typos. Lots of double-word
occurrences squashed as well.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.4 1997/09/07 18:30:03 deraadt Exp $
d341 1
a341 1
.Xr intro 4 ,
@


1.4
log
@neat typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.3 1997/08/02 09:56:25 deraadt Exp $
d29 1
a29 1
or a terinal for
@


1.3
log
@pass address family as host-byte-order u_int32_t. this fixes bpf.  add a
note to the bottom of tun.4 to indicate that this is a binary
incompatibility with older versions, and describe all 3 revisions this
has gone through. everyone -- recompile your code that uses tun.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.2 1996/12/16 16:08:52 deraadt Exp $
d367 1
a367 1
hence the currect version passwd a u_int32_t of address family.
@


1.2
log
@fix .Nm stuff so that man -k works
@
text
@d1 1
a1 1
.\"	$OpenBSD: tun.4,v 1.1 1996/10/14 12:47:02 mickey Exp $
d119 1
a119 1
The first byte of data will always be the address family (eg,
d121 2
a122 1
of the packet.  By default, the packet data follows immediately, but if
d126 1
a126 1
after the address family byte and before the packet data.  The size and
d140 2
a141 2
The first byte must be the address family of the packet, much as in
packets returned by
d363 6
@


1.1
log
@add tun pseudo-device interface manual.
from der mouse Net's PR, if i didn't missed my memory...
it was lost in my tree a long ago (:
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d7 1
a7 3
.\" Why doesn't this work right?  mdoc(7) nor mdoc.samples(7) lists
.\" .Nd, except for a passing reference in the latter.
tunnel software network interface
d9 1
a9 8
.\" want to write
.\" .Sy pseudo-device
.\" .Nm tun
.\" .Op Ar count
.\" so that .Nm is just "tun", but if we do that we get a line break
.\" after "pseudo-device", ick.
.Nm pseudo-device tun
.Op Ar count
@
