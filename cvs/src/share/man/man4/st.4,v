head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.2
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.12
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.8
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.6
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.10
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.8
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.14
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.12
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.8
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@# @;


1.20
date	2016.09.04.14.42.58;	author naddy;	state Exp;
branches;
next	1.19;
commitid	TaxzezdnwEeWzIjg;

1.19
date	2014.06.28.06.18.26;	author matthew;	state Exp;
branches;
next	1.18;
commitid	246JFW0oVphokrT1;

1.18
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2011.03.12.19.24.20;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.02.15.22.38;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.52;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.28.02.49.19;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.01.19.17.04;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.01.05.55.32;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.11.23.25.59;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.30.19.59.25;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.09.16.06.07;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.07.16.03.32;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.26.07.55.40;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.22.12.15.47;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.10.13.27.35;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.07.09.13.35.47;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.02.09.13.49.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.09.06.22.23.19;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	97.03.28.22.53.42;	author millert;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Block devices are no longer supported, so stop talking about them and
the difference from raw devices.
@
text
@.\"	$OpenBSD: st.4,v 1.19 2014/06/28 06:18:26 matthew Exp $
.\"	$NetBSD: st.4,v 1.2 1996/10/20 23:15:24 explorer Exp $
.\"
.\" Copyright (c) 1996
.\"     Julian Elischer <julian@@freebsd.org>.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 28 2014 $
.Dt ST 4
.Os
.Sh NAME
.Nm st
.Nd SCSI tape driver
.Sh SYNOPSIS
.Cd "st* at scsibus?"
.Cd "#st0 at scsibus0 target 4 lun 0" Pq fixed-configuration example
.Sh DESCRIPTION
The
.Nm
driver provides support for
.Tn SCSI
tape drives.
.Pp
.Tn SCSI
devices have a relatively high level interface and talk to the system via a
.Tn SCSI
adapter and a
.Tn SCSI
adapter driver
e.g.\&
.Xr ahc 4 .
The
.Tn SCSI
adapter must be separately configured into the system before a
.Tn SCSI
tape can be configured.
.Pp
As the
.Tn SCSI
adapter is probed during boot, the
.Tn SCSI
bus is scanned for devices.
Any devices found which answer as
.Em Sequential
type devices will be attached to the
.Nm
driver.
.Sh MOUNT SESSIONS
The
.Nm
driver is based around the concept of a
.Em mount session ,
which is defined as the period between the time that a tape is
mounted and the time when it is unmounted.
Any parameters set during a mount session remain in effect for the remainder
of the session or until replaced.
The tape can be unmounted, bringing the session to a close in several ways.
These include:
.Bl -enum
.It
Closing an
.Dq unmount device .
.It
Using the
.Dv MTOFFL
.Xr ioctl 2
command, reachable through the
.Cm offline
command of
.Xr mt 1 .
.El
.Sh EJECT and REWIND
Bit 0 of the minor number specifies whether a rewind is attempted when the
device is closed.
When it is set, the device will not attempt a rewind on close
and the device will have an
.Sq n
in its name.
For example,
.Pa /dev/rst0
will rewind on close but
.Pa /dev/nrst0
will not.
.Pp
Bit 1 of the minor number specifies whether an eject is attempted when the
device is closed.
When it is set, the device will attempt to eject its media on close
and the device will have an
.Sq e
in its name.
For example,
.Pa /dev/erst0
will eject its media on close but
.Pa /dev/rst0
will not.
.Pp
If both bit 0 and bit 1 are set then an eject will
be attempted without a rewind and the device will have both an
.Sq e
and an
.Sq n
in its name.
For example,
.Pa /dev/enrst0
will eject its media without first rewinding it on close.
.Pp
There is no guarantee that the attempted eject or rewind will be supported
by the actual hardware.
.Sh BLOCKING MODES
.Tn SCSI
tapes may run in either
.Em variable
or
.Em fixed
block-size modes.
Most
.Tn QIC Ns -type
devices run in fixed block-size mode, whereas most nine-track tapes
and many new cartridge formats allow variable block-size.
The difference between the two is as follows:
.Bl -inset
.It Variable block-size:
Each write made to the device results in a single logical record
written to the tape.
One can never read or write
.Em part
of a record from tape (though you may request a larger block and
read a smaller record); nor can one read multiple blocks.
Data from a single write is therefore read by a single read.
The block size used may be any value supported by the device, the
.Tn SCSI
adapter and the system (usually between 1 byte and 64 Kbytes,
sometimes more).
.Pp
When reading a variable record/block from the tape, the head is
logically considered to be immediately after the last item read,
and before the next item after that.
If the next item is a file mark, but it was never read, then the next
process to read will immediately hit the file mark and receive an
end-of-file notification.
.It Fixed block-size
data written by the user is passed to the tape as a succession of
fixed size blocks.
It may be contiguous in memory, but it is considered to be a series of
independent blocks.
One may never write an amount of data that is not an exact multiple of the
blocksize.
One may read and write the same data as a different set of records.
In other words, blocks that were written together may be read separately,
and vice-versa.
.Pp
If one requests more blocks than remain in the file, the drive will
encounter the file mark.
Because there is some data to return (unless there were no records before
the file mark), the read will succeed, returning that data.
The next read will return immediately with an
.Dv EOF .
(As above, if the file mark is never read, it remains for the next process
to read if in no-rewind mode.)
.El
.Sh FILE MARK HANDLING
The handling of file marks on write is automatic.
If the user has written to the tape, and has not done a read since the last
write, then a file mark will be written to the tape when the device is closed.
If a rewind is requested after a write, then the driver
assumes that the last file on the tape has been written, and ensures
that there are two file marks written to the tape.
The exception to this is that there seems to be a standard (which we follow,
but don't understand why) that certain types of tape do not actually
write two file marks to tape, but when read, report a
.Dq phantom
file mark when the last file is read.
These devices include the QIC family of devices.
(It might be that this set of devices is the same set as that of fixed.
This has not yet been determined, and they are treated as separate
behaviors by the driver at this time.)
.Sh IOCTLS
The following
.Xr ioctl 2
calls apply to
.Tn SCSI
tapes.
Some also apply to other tapes.
They are defined in the header file
.In sys/mtio.h .
.\"
.\" Almost all of this discussion belongs in a separate mt(4)
.\" manual page, since it is common to all magnetic tapes.
.\"
.Bl -tag -width MTIOCEEOT
.It Dv MTIOCGET Fa "struct mtget *"
Retrieve the status and parameters of the tape.
.It Dv MTIOCTOP "struct mtop *"
Perform a multiplexed operation.
The argument structure is as follows:
.Bd -literal -offset indent
struct mtop {
	short	mt_op;
	int	mt_count;
};
.Ed
.Pp
The following operation values are defined for
.Va mt_op :
.Bl -tag -width MTSELDNSTY
.It Dv MTWEOF
Write
.Va mt_count
end of file marks at the present head position.
.It Dv MTFSF
Skip over
.Va mt_count
file marks.
Leave the head on the EOM side of the last skipped file mark.
.It Dv MTBSF
Skip
.Em backwards
over
.Va mt_count
file marks.
Leave the head on the BOM (beginning of media) side of the last skipped
file mark.
.It Dv MTFSR
Skip forwards over
.Va mt_count
records.
.It Dv MTBSR
Skip backwards over
.Va mt_count
records.
.It Dv MTREW
Rewind the device to the beginning of the media.
.It Dv MTOFFL
Rewind the media (and, if possible, eject).
Even if the device cannot eject the media it will often no longer respond
to normal requests.
.It Dv MTNOP
No-op; set status only.
.It Dv MTCACHE
Enable controller buffering.
.It Dv MTNOCACHE
Disable controller buffering.
.It Dv MTSETBSIZ
Set the blocksize to use for the device/mode.
If the device is capable of variable blocksize operation, and the blocksize
is set to 0, then the drive will be driven in variable mode.
This parameter is in effect for the present mount session only.
.It Dv MTSETDNSTY
Set the density value (see
.Xr mt 1 )
to use when running in the mode opened (minor bits 2 and 3).
This parameter is in effect for the present
mount session only.
.El
.It Dv MTIOCIEOT
Set end-of-tape processing (not presently supported for
.Nm
devices).
.It Dv MTIOCEEOT
Set end-of-tape processing (not presently supported for
.Nm
devices).
.El
.Sh FILES
.Bl -tag -width /dev/[e][n][r]st[0-9] -compact
.It Pa /dev/[e][n][r]st[0-9]
General form.
.It Pa /dev/rst0
No eject, rewind on close.
.It Pa /dev/nrst0
No eject, no rewind on close.
.It Pa /dev/erst0
Eject, rewind on close.
.It Pa /dev/enrst0
Eject, no rewind on close.
.El
.Sh SEE ALSO
.Xr chio 1 ,
.Xr mt 1 ,
.Xr intro 4 ,
.Xr mtio 4 ,
.Xr scsi 4
.Sh HISTORY
This
.Nm
driver was originally written for
.Tn Mach
2.5 by Julian Elischer, and was ported to
.Nx
by Charles Hannum.
This man page was edited for
.Nx
by Jon Buller.
@


1.19
log
@Cleanup documentation for SCSI device driver ioctl()s.
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.18 2014/01/21 03:15:46 schwarze Exp $
d29 1
a29 1
.Dd $Mdocdate: January 21 2014 $
a43 10
The device can have both a
.Em raw
interface and a
.Em block
interface; however, only the raw interface is usually used (or recommended).
The raw interface devices will have an
.Sq r
in their names
e.g.\&
.Pa /dev/rst0 .
@


1.18
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.17 2011/03/12 19:24:20 krw Exp $
d29 1
a29 1
.Dd $Mdocdate: March 12 2011 $
d222 1
a222 2
.It Dv MTIOCGET
.Pq Li "struct mtget"
d224 1
a224 2
.It Dv MTIOCTOP
.Pq Li "struct mtop"
@


1.17
log
@mtop uses int, not daddr_t, for count.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.16 2007/11/02 15:22:38 jmc Exp $
d29 1
a29 1
.Dd $Mdocdate: November 2 2007 $
d216 1
a216 1
.Aq Pa sys/mtio.h .
@


1.16
log
@+.Xr chio 1 ,
ok beck
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.15 2007/05/31 19:19:52 jmc Exp $
d29 1
a29 1
.Dd $Mdocdate$
d232 1
a232 1
	daddr_t	mt_count;
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.14 2007/05/28 02:49:19 krw Exp $
d311 1
@


1.14
log
@Remove references to wt(4). Don't install wt.4 anymore.
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.13 2006/06/01 19:17:04 krw Exp $
d29 1
a29 1
.Dd August 23, 1996
@


1.13
log
@Clean out more crap. Tweaks by jmc@@.

ok beck@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.12 2006/06/01 05:55:32 krw Exp $
d314 1
a314 2
.Xr scsi 4 ,
.Xr wt 4
@


1.12
log
@Bring man page into closer correspondance with current reality. Tweaks by
jmc@@.

ok beck@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.11 2005/09/11 23:25:59 krw Exp $
a43 3
It allows a tape drive to be run in several different modes depending
on minor numbers and supports several different
.Dq sub-modes .
d49 5
d61 3
a63 3
(e.g.,
.Xr ahc 4 ) .
A
d65 1
a65 1
adapter must also be separately configured into the system before a
d128 10
a207 16
.Sh KERNEL CONFIGURATION
Because different tape drives behave differently, there is a
mechanism within the source to
.Nm
to quickly and conveniently recognize and deal with brands and
models of drive that have special requirements.
.Pp
There is a table (called the
.Em quirk table )
in which the identification strings of known errant drives can be stored.
Alongside each is a set of flags that allows the setting
of densities and blocksizes for each of the modes, along with a
set of
.Dq QUIRK
flags that can be used to enable or disable sections
of code within the driver if a particular drive is recognized.
@


1.11
log
@'e' comes before 'n' in st names. And 'r' is optional too.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.10 2004/09/30 19:59:25 mickey Exp $
d73 1
a73 1
.Sq Em Sequential
d81 1
a81 1
.Dq Em mount session ,
d83 1
a83 1
mounted, and the time when it is unmounted.
d91 1
a91 4
.Dq unmount device ,
referred to as sub-mode 00 below.
An example is
.Pa /dev/rst0 .
d97 1
a97 1
.Sq Cm offline
a99 5
.It
Opening a different mode will implicitly unmount the tape, thereby
closing off the mode that was previously mounted.
All parameters will be loaded freshly from the new mode.
(See below for more on modes.)
d101 24
a124 18
.Sh MODES AND SUB-MODES
There are several different
.Sq operation
modes.
These are controlled by bits 2 and 3 of the minor number
and are designed to allow users to easily read and write different
formats of tape on devices that allow multiple formats.
The parameters for each mode can be set individually by hand with the
.Xr mt 1
command.
When a device corresponding to a particular mode is first
mounted, the operating parameters for that mount session are copied
from that mode.
Further changes to the parameters during the session will change those in
effect for the session but not those set in the operation mode.
To change the parameters for an operation mode, one must compile them into the
.Dq Em quirk
table in the driver's source code.
d126 2
a127 25
In addition to the operating modes mentioned above, bits 0 and 1
of the minor number are interpreted as
.Sq sub-modes .
The sub-modes differ in the action taken when the device is closed:
.Bl -tag -width XXXX
.It 00
A close will rewind the device; if the tape has been written, then
a file mark will be written before the rewind is requested.
The device is unmounted.
.It 01
A close will leave the tape mounted.
If the tape was written to, a file mark will be written.
No other head positioning takes place.
Any further reads or writes will occur directly after the last
read, or the written file mark.
.It 10
A close will rewind the device.
If the tape has been written, then a file mark will be written before the
rewind is requested.
On completion of the rewind an unload command will be issued.
The device is unmounted.
.It 11
Reserved.
Currently unused.
.El
d131 1
a131 1
.Sq Em variable
d133 1
a133 1
.Sq Em fixed
d204 1
a204 1
.Dq Em quirk table )
d304 1
a304 1
general form
d306 1
a306 1
Mode 0, rewind on close
d308 1
a308 1
Mode 2, No rewind on close
d310 3
a312 1
Mode 3, Eject on close (if capable)
@


1.10
log
@kill default locators
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.9 2003/11/09 16:06:07 jmc Exp $
d327 2
a328 2
.Bl -tag -width /dev/[n][e]rst[0-9] -compact
.It Pa /dev/[n][e]rst[0-9]
@


1.9
log
@remove .Pp's before lists and displays;
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.8 2003/04/07 16:03:32 jmc Exp $
d36 1
a36 1
.Cd "st* at scsibus? target ? lun ?"
@


1.8
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.7 2002/09/26 07:55:40 miod Exp $
a249 1
.Pp
@


1.7
log
@Incomplete section 4 mi manual page cleanup.
- make configuration lines match GENERIC files
- more Xr (hopefully usefule Xr)
- never mention intro(4) on non-physical devices (i.e. protocols), always
mention it for physical devices
- random text style and quoting fixes
- drivers ported from FreeBSD did mention rc.conf instead of hostname.if as
the place to put mediaopt
- some .Tn UNIX -> .Ox replacements
- etc, etc...

reviewd in part by deraadt@@ (until he got bored of this)
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.6 2001/06/22 12:15:47 mpech Exp $
d162 1
a162 1
devices run in fixed block-size mode, where most nine-track tapes
d218 1
a218 1
(It might be that this set of devices is the same set as that of fixed
d245 1
a245 1
.Fd <sys/mtio.h> .
@


1.6
log
@o) remove unnecessary .Pp;
o) remove unnecessary .Nm args;
o) closes .Bl;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) sort SEE ALSO;
o) better -mdoc style;
o) typos;

aaron@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: st.4,v 1.5 2000/07/10 13:27:35 aaron Exp $
d36 2
a37 2
.Cd st* at scsibus? target ? lun ?
.Cd st1 at scsibus0 target 4 lun 0
d245 1
a245 1
.Aq Pa /sys/mtio.h .
d340 1
d342 2
a343 1
.Xr scsi 4
@


1.5
log
@Cleanup.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d348 1
a348 1
.Tn NetBSD
d351 1
a351 1
.Tn NetBSD
@


1.4
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD
d43 5
a47 3
tape drives. It allows a tape drive to be run in several different
modes depending on minor numbers and supports several different
`sub-modes'.  The device can have both a
d49 1
a49 2
interface
and a
d51 1
a51 2
interface; however, only the raw interface is usually used (or
recommended).
d54 1
a54 2
devices have a relatively high level interface and talk to the
system via a
d71 2
a72 1
bus is scanned for devices. Any devices found which answer as
d83 5
a87 4
mounted, and the time when it is unmounted.  Any parameters set
during a mount session remain in effect for the remainder of the
session or until replaced. The tape can be unmounted, bringing the
session to a close in several ways.  These include:
d90 4
a93 2
Closing an `unmount device', referred to as sub-mode 00 below. An
example is
d96 2
a97 1
Using the MTOFFL
d105 3
a107 3
closing off the mode that was previously mounted.  All parameters
will be loaded freshly from the new mode.  (See below for more on
modes.)
d112 2
a113 1
modes. These are controlled by bits 2 and 3 of the minor number
d115 2
a116 2
formats of tape on devices that allow multiple formats.  The
parameters for each mode can be set individually by hand with the
d118 7
a124 6
command.  When a device corresponding to a particular mode is first
mounted, The operating parameters for that mount session are copied
from that mode.  Further changes to the parameters during the
session will change those in effect for the session but not those
set in the operation mode.  To change the parameters for an operation
mode, one must compile them into the
d138 3
a140 2
A close will leave the tape mounted.  If the tape was written to,
a file mark will be written.  No other head positioning takes place.
d144 5
a148 4
A close will rewind the device. If the tape has been written, then
a file mark will be written before the rewind is requested.  On
completion of the rewind an unload command will be issued.  The
device is unmounted.
d150 2
a151 1
Reserved.  Currently unused.
d159 2
a160 1
block-size modes.  Most
d163 2
a164 2
and many new cartridge formats allow variable block-size.  The
difference between the two is as follows:
d168 2
a169 1
written to the tape.  One can never read or write
d172 3
a174 3
read a smaller record); nor can one read multiple blocks.  Data
from a single write is therefore read by a single read. The block
size used may be any value supported by the device, the
d181 4
a184 3
and before the next item after that. If the next item is a file
mark, but it was never read, then the next process to read will
immediately hit the file mark and receive an end-of-file notification.
d187 8
a194 6
fixed size blocks.  It may be contiguous in memory, but it is
considered to be a series of independent blocks. One may never
write an amount of data that is not an exact multiple of the
blocksize.  One may read and write the same data as a different
set of records. In other words, blocks that were written together
may be read separately, and vice-versa.
d197 7
a203 5
encounter the file mark.  Because there is some data to return
(unless there were no records before the file mark), the read will
succeed, returning that data. The next read will return immediately
with an EOF.  (As above, if the file mark is never read, it remains
for the next process to read if in no-rewind mode.)
d206 4
a209 4
The handling of file marks on write is automatic. If the user has
written to the tape, and has not done a read since the last write,
then a file mark will be written to the tape when the device is
closed.  If a rewind is requested after a write, then the driver
d211 10
a220 9
that there are two file marks written to the tape.  The exception
to this is that there seems to be a standard (which we follow, but
don't understand why) that certain types of tape do not actually
write two file marks to tape, but when read, report a `phantom'
file mark when the last file is read.  These devices include the
QIC family of devices.  (It might be that this set of devices is
the same set as that of fixed block devices.  This has not been
determined yet, and they are treated as separate behaviors by the
driver at this time.)
d230 2
a231 2
in which the identification strings of known errant drives can be
stored.  Alongside each is a set of flags that allows the setting
d233 3
a235 1
set of `QUIRK' flags that can be used to enable or disable sections
d242 3
a244 2
tapes.  Some also apply to other tapes.  They are defined in the
header file
d257 2
a258 1
Perform a multiplexed operation.  The argument structure is as follows:
d276 2
a277 2
file marks. Leave the head on the EOM side of the last skipped
file mark.
d283 3
a285 2
file marks. Leave the head on the BOM (beginning of media)
side of the last skipped file mark.
d297 3
a299 2
Rewind the media (and, if possible, eject). Even if the device cannot
eject the media it will often no longer respond to normal requests.
d307 4
a310 4
Set the blocksize to use for the device/mode. If the device is capable of
variable blocksize operation, and the blocksize is set to 0, then the drive
will be driven in variable mode. This parameter is in effect for the present
mount session only.
d330 1
a330 1
general form:
a337 2
.Sh DIAGNOSTICS
None.
d349 2
a350 1
by Charles Hannum.  This man page was edited for
@


1.3
log
@Xr mtio 4
@
text
@d70 1
a70 1
adapter is probed during boot, the 
d74 1
a74 1
type devices will be attached to the 
d78 1
a78 1
The 
d80 1
a80 1
driver is based around the concept of a 
d106 1
a106 1
There are several different 
d146 1
a146 1
tapes may run in either 
d150 1
a150 1
block-size modes.  Most 
d158 1
a158 1
written to the tape.  One can never read or write 
d219 1
a219 1
The following 
d265 1
a265 1
Skip forwards over 
d289 1
a289 1
Set the density value (see 
d326 1
a326 1
2.5 by Julian Elischer, and was ported to 
@


1.2
log
@More man page fixes. Spelling, grammar, some typos. Lots of double-word
occurrences squashed as well.
@
text
@d319 1
@


1.1
log
@Move ncr.4 out of man4.i386/ncr.4 and update it from NetBSD.
Remove one of the tekram cards from man4.i386/aha.4 that is really
ncr-based and add cd.4, fpa.4, sd.4, st.4, uk.4 from NetBSD
(some originally from FreeBSD).
@
text
@d174 1
a174 1
Data written by the user is passed to the tape as a succession of
d179 1
a179 1
set of records, In other words, blocks that were written together
d185 1
a185 1
succeed, returning that data, The next read will return immediately
@

