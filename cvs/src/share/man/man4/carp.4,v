head	1.38;
access;
symbols
	OPENBSD_6_1:1.38.0.8
	OPENBSD_6_1_BASE:1.38
	OPENBSD_6_0:1.38.0.6
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.2
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.36.0.4
	OPENBSD_5_8_BASE:1.36
	OPENBSD_5_7:1.35.0.4
	OPENBSD_5_7_BASE:1.35
	OPENBSD_5_6:1.34.0.22
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.34.0.20
	OPENBSD_5_5_BASE:1.34
	OPENBSD_5_4:1.34.0.16
	OPENBSD_5_4_BASE:1.34
	OPENBSD_5_3:1.34.0.14
	OPENBSD_5_3_BASE:1.34
	OPENBSD_5_2:1.34.0.12
	OPENBSD_5_2_BASE:1.34
	OPENBSD_5_1_BASE:1.34
	OPENBSD_5_1:1.34.0.10
	OPENBSD_5_0:1.34.0.8
	OPENBSD_5_0_BASE:1.34
	OPENBSD_4_9:1.34.0.6
	OPENBSD_4_9_BASE:1.34
	OPENBSD_4_8:1.34.0.4
	OPENBSD_4_8_BASE:1.34
	OPENBSD_4_7:1.34.0.2
	OPENBSD_4_7_BASE:1.34
	OPENBSD_4_6:1.32.0.4
	OPENBSD_4_6_BASE:1.32
	OPENBSD_4_5:1.31.0.4
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.31.0.2
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.30.0.2
	OPENBSD_4_3_BASE:1.30
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.23.0.4
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.2
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.19.0.4
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.16.0.2
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9;
locks; strict;
comment	@.\" @;


1.38
date	2015.11.03.17.45.32;	author jmc;	state Exp;
branches;
next	1.37;
commitid	WpIqlR449QQwEWnZ;

1.37
date	2015.11.02.15.18.51;	author mpi;	state Exp;
branches;
next	1.36;
commitid	MSuGT837jBZG4WVj;

1.36
date	2015.08.03.17.40.07;	author benno;	state Exp;
branches;
next	1.35;
commitid	iUdZKr70328Em5zk;

1.35
date	2015.01.21.11.21.27;	author mpi;	state Exp;
branches;
next	1.34;
commitid	PGMHUv34ELtXDAhF;

1.34
date	2010.03.12.13.36.16;	author mpf;	state Exp;
branches;
next	1.33;

1.33
date	2009.11.24.18.35.25;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2009.03.24.15.47.36;	author sobrado;	state Exp;
branches;
next	1.31;

1.31
date	2008.05.06.15.12.00;	author mcbride;	state Exp;
branches;
next	1.30;

1.30
date	2008.02.11.07.58.28;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2008.02.05.22.57.31;	author mpf;	state Exp;
branches;
next	1.28;

1.28
date	2007.09.18.09.18.04;	author mpf;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.31.19.19.49;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2007.04.17.08.26.35;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2007.03.19.07.28.43;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2007.03.18.23.29.31;	author mpf;	state Exp;
branches;
next	1.23;

1.23
date	2006.06.15.08.55.39;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2006.06.15.07.58.45;	author mcbride;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.08.12.08.54;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.09.19.03.04;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2005.08.09.09.52.12;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.24.17.16.32;	author mcbride;	state Exp;
branches;
next	1.17;

1.17
date	2005.05.17.13.16.13;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.07.23.41.35;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2004.12.07.21.22.26;	author mcbride;	state Exp;
branches;
next	1.14;

1.14
date	2004.11.15.20.28.09;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2004.11.15.12.14.10;	author henning;	state Exp;
branches;
next	1.12;

1.12
date	2004.08.17.00.24.40;	author jaredy;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.26.09.20.14;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.05.22.39.54;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.25.17.53.16;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.21.20.16.37;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.05.17.24.13;	author mcbride;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.25.08.42.38;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.08.10.03.43;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.19.03.57.25;	author david;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.18.17.48.50;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.18.00.47.03;	author mcbride;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.17.21.04.58;	author mcbride;	state Exp;
branches;
next	;


desc
@@


1.38
log
@improve the load balancing text; ok mpi
@
text
@.\"	$OpenBSD: carp.4,v 1.37 2015/11/02 15:18:51 mpi Exp $
.\"
.\" Copyright (c) 2003, Ryan McBride.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 2 2015 $
.Dt CARP 4
.Os
.Sh NAME
.Nm carp
.Nd Common Address Redundancy Protocol
.Sh SYNOPSIS
.Cd "pseudo-device carp"
.Sh DESCRIPTION
The
.Nm
interface is a pseudo-device which implements and controls the
CARP protocol.
.Nm
allows multiple hosts on the same local network to share a set of IP addresses.
Its primary purpose is to ensure that these
addresses are always available, but in some configurations
.Nm
can also provide load balancing functionality.
.Pp
A
.Nm
interface can be created at runtime using the
.Ic ifconfig carp Ns Ar N Ic create
command or by setting up a
.Xr hostname.if 5
configuration file for
.Xr netstart 8 .
.Pp
To use
.Nm ,
the administrator needs to configure at minimum
a common virtual host ID (VHID) and
virtual host IP address on each machine which is to take part in the virtual
group.
Additional parameters can also be set on a per-interface basis:
.Cm advbase
and
.Cm advskew ,
which are used to control how frequently the host sends advertisements when it
is the master for a virtual host, and
.Cm pass
which is used to authenticate carp advertisements.
Finally
.Cm carpdev
is used to specify which interface the
.Nm
device attaches to.
These configurations can be done using
.Xr ifconfig 8 ,
or through the
.Dv SIOCSVH
ioctl.
.Pp
.Nm
can also be used in conjunction with
.Xr ifstated 8
to respond to changes in CARP state;
however, for most uses this will not be necessary.
See the manual page for
.Xr ifstated 8
for more information.
.Pp
Additionally, there are a number of global parameters which can be set using
.Xr sysctl 8 :
.Bl -tag -width xxxxxxxxxxxxxxxxxxxxxxxxxx
.It net.inet.carp.allow
Accept incoming
.Nm
packets.
Enabled by default.
.It net.inet.carp.preempt
Allow virtual hosts to preempt each other.
Disabled by default.
.It net.inet.carp.log
Make
.Nm
log state changes, bad packets, and other errors.
May be a value between 0 and 7 corresponding with
.Xr syslog 3
priorities.
The default value is 2, which limits logging to changes in CARP state.
.El
.Sh LOAD BALANCING
.Nm
uses IP balancing to load balance incoming traffic
over a group of
.Nm
hosts.
IP balancing is not dependent on ARP and therefore works
for traffic that comes over a router.
However it requires the traffic that is destined towards
the load balanced IP addresses to be received by all
.Nm
hosts.
While this is always the case when connected to a hub,
it has to play some tricks in switched networks, which
will result in a higher network load.
.Pp
To configure load balancing one has to specify multiple
carp nodes using the
.Cm carpnodes
option.
Each node in a load balancing cluster is represented
by at least one
.Qq Cm vhid : Ns Cm advskew
pair in a comma separated list.
.Nm
tries to distribute the incoming network load over all configured carpnodes.
The following example
creates a load balancing group consisting of three nodes,
using vhids 3, 4 and 6:
.Bd -literal -offset indent
# ifconfig carp0 carpnodes 3:0,4:0,6:100
.Ed
.Pp
The advskew value of the last node is set to 100,
so that this node is designated to the BACKUP state.
It will only become MASTER if all nodes with a lower advskew value have failed.
By varying this value throughout the machines in the cluster
it is possible to decide which share of the network load each node receives.
Therefore, all carp interfaces in the cluster are configured identically, except
for a different
.Cm advskew
value within the carpnodes specification.
.Pp
IP balancing works by utilizing the network itself to distribute
incoming traffic to all
.Nm
nodes in the cluster.
Each packet is filtered on the incoming
.Nm
interface so that only one node in the cluster accepts the
packet.
All the other nodes will just silently drop it.
The filtering function uses a hash over the source and destination
address of the IPv4 or IPv6 packet and compares the result against the
state of the carpnode.
.Pp
IP balancing is activated by setting the
.Cm balancing
mode to
.Cm ip .
This is the recommended default setting.
In this mode, carp uses a multicast MAC address, so that a switch
sends incoming traffic towards all nodes.
.Pp
However, there are a few OS and routers that do not accept a multicast
MAC address being mapped to a unicast IP.
This can be resolved by using one of the following unicast options.
For scenarios where a hub is used it is not necessary to use a multicast MAC
and it is safe to use the
.Ar ip-unicast
mode.
Manageable switches can usually be tricked into forwarding unicast
traffic to all cluster nodes ports by configuring them into some
sort of monitoring mode.
If this is not possible, using the
.Ar ip-stealth
mode is another option, which should work on most switches.
In this mode
.Nm
never sends packets with its virtual MAC address as source.
Stealth mode prevents a switch from learning the virtual MAC
address, so that it has to flood the traffic to all its ports.
Please note that activating stealth mode on a
.Nm
interface that has already been running might not work instantly.
As a workaround the VHID of the first carpnode can be changed to a
previously unused one, or just wait until the MAC table entry in the
switch times out.
Some layer 3 switches do port learning based on ARP packets.
Therefore the stealth mode cannot hide the virtual MAC address
from these kind of devices.
.Pp
If IP balancing is being used on a firewall, it is recommended to
configure the
.Cm carpnodes
in a symmetrical manner.
This is achieved by simply using the same
.Cm carpnodes
list on all sides of the firewall.
This ensures that packets of one connection will pass in and out
on the same host and are not routed asymmetrically.
.Sh EXAMPLES
For most scenarios it is desirable to have a well-defined master,
achieved by enabling the
.Cm preempt
option.
Enable it on both host A and B:
.Pp
.Dl # sysctl net.inet.carp.preempt=1
.Pp
Assume that host A is the preferred master and carp should run on the physical
interfaces em0 with the network 192.168.1.0/24 and em1 with network
192.168.2.0/24.
This is the setup for host A:
.Bd -literal -offset indent
# ifconfig carp0 192.168.1.1/24 carpdev em0 vhid 1
# ifconfig carp1 192.168.2.1/24 carpdev em1 vhid 2
.Ed
.Pp
The setup for host B is identical, but it has a higher
.Cm advskew :
.Bd -literal -offset indent
# ifconfig carp0 192.168.1.1/24 carpdev em0 vhid 1 advskew 100
# ifconfig carp1 192.168.2.1/24 carpdev em1 vhid 2 advskew 100
.Ed
.Ss LOAD BALANCING
In order to set up a load balanced virtual host, it is necessary to configure
one
.Cm carpnodes
entry for each physical host.
In the following example, two physical hosts are configured to
provide balancing and failover for the IP address 192.168.1.10.
.Pp
First the
.Nm
interface on Host A is configured.
The
.Cm advskew
of 100 on the second carpnode entry means that its advertisements will be sent
out slightly less frequently and will therefore become the designated backup.
.Bd -literal -offset indent
# ifconfig carp0 192.168.1.10 carpdev em0 carpnodes 1:0,2:100 \e
	balancing ip
.Ed
.Pp
The configuration for host B is identical, except the skew is on
the carpnode entry with virtual host 1 rather than virtual host 2.
.Bd -literal -offset indent
# ifconfig carp0 192.168.1.10 carpdev em0 carpnodes 1:100,2:0 \e
	balancing ip
.Ed
.Pp
If a different mode of load balancing is desired the
.Cm balancing
mode can be adjusted accordingly.
.Sh SEE ALSO
.Xr sysctl 3 ,
.Xr inet 4 ,
.Xr pfsync 4 ,
.Xr hostname.if 5 ,
.Xr ifconfig 8 ,
.Xr ifstated 8 ,
.Xr netstart 8 ,
.Xr sysctl 8
.Sh HISTORY
The
.Nm
device first appeared in
.Ox 3.5 .
.Sh BUGS
If load balancing is used in setups where the carpdev does not share
an IP in the same subnet as
.Nm ,
it is not possible to use the IP of the
.Nm
interface for self originated traffic.
This is because the return packets are also subject to load balancing
and might end up on any other node in the cluster.
.Pp
If an IPv6 load balanced carp interface is taken down manually,
it will accept all incoming packets for its address.
This will lead to duplicated packets.
@


1.37
log
@Stop mentionning ARP load balancing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.36 2015/08/03 17:40:07 benno Exp $
d26 1
a26 1
.Dd $Mdocdate: August 3 2015 $
d111 1
a111 1
provides a mechanism to load balance incoming traffic
d114 2
a115 2
hosts: IP balancing.
IP balancing is not dependent on ARP and therefore also works
d117 2
a118 4
This method should work in all environments.
The downside of IP balancing is that it requires the traffic
that is destined towards the load balanced IP addresses
to be received by all
d168 1
a168 1
.Ar ip .
d249 4
a252 2
.Pp
.Dl # ifconfig carp0 192.168.1.10 carpdev em0 carpnodes 1:0,2:100 balancing ip
d256 4
a259 2
.Pp
.Dl # ifconfig carp0 192.168.1.10 carpdev em0 carpnodes 1:100,2:0 balancing ip
@


1.36
log
@Rolf Sommerhalder reports that the examples in the carp manpage are
little lies: you have to use carpdev now to configure a carp parent
interface.
ok mpi@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.35 2015/01/21 11:21:27 mpi Exp $
d26 1
a26 1
.Dd $Mdocdate: January 21 2015 $
d111 1
a111 1
provides two mechanisms to load balance incoming traffic
d114 1
a114 14
hosts:
ARP balancing and IP balancing.
.Pp
Which one to use mainly depends on the network environment
.Nm
is being used in.
ARP balancing has limited abilities for load balancing the
incoming connections between hosts in an Ethernet network.
It only works for clients in the local network, because
ARP balancing spreads the load by varying ARP replies
based on the source MAC address of the host sending the query.
Therefore it cannot balance traffic that crosses a router, because the
router itself will always be balanced to the same virtual host.
.Pp
d117 1
a117 2
This method should work in all environments and can
also provide more fine grained load balancing than ARP balancing.
a126 4
A rule of thumb might be to use ARP balancing if there
are many hosts on the same network segment and
to use IP balancing for all other cases.
.Pp
d154 1
a154 40
See the
.Sx EXAMPLES
section for a practical example of load balancing.
.Ss ARP BALANCING
For ARP balancing, one has to configure multiple
.Cm carpnodes
and choose the
.Cm balancing
mode
.Ar arp .
.Pp
Once an ARP request is received, the CARP protocol will use a hashing
function against the source MAC address in the ARP request to determine
which carpnode the request belongs to.
If the corresponding
carpnode is in master state, the ARP request will be answered, otherwise
it will be ignored.
.Pp
The ARP load balancing has some limitations.
Firstly, ARP balancing only works on the local network segment.
It cannot balance traffic that crosses a router, because the
router itself will always be balanced to the same carpnode.
Secondly, ARP load balancing can lead to asymmetric routing
of incoming and outgoing traffic, thus combining it with
.Xr pfsync 4
requires special care, because this can create a race condition between
balanced routers and the host they are serving.
ARP balancing can be safely used with pfsync if the
.Xr pf 4
ruleset translates the source address to an unshared address on the
outgoing interface using a NAT rule.
This requires multiple CARP groups with
.Em different
IP addresses on the outgoing interface, configured so that each host is the
master of one group.
.Pp
ARP balancing also works for IPv6, but instead of ARP the Neighbor Discovery
Protocol (NDP) is used.
.Ss IP BALANCING
IP load balancing works by utilizing the network itself to distribute
d259 1
a259 2
If ARP balancing or a different mode of IP balancing is desired
the
@


1.35
log
@carpdev argument is no longer optional.
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.34 2010/03/12 13:36:16 mpf Exp $
d26 1
a26 1
.Dd $Mdocdate: March 12 2010 $
d278 3
a280 2
Assume that host A is the preferred master and 192.168.1.x/24 is
configured on one physical interface and 192.168.2.y/24 on another.
d283 2
a284 2
# ifconfig carp0 192.168.1.1 vhid 1
# ifconfig carp1 192.168.2.1 vhid 2
d290 2
a291 2
# ifconfig carp0 192.168.1.1 vhid 1 advskew 100
# ifconfig carp1 192.168.2.1 vhid 2 advskew 100
d309 1
a309 1
.Dl # ifconfig carp0 192.168.1.10 carpnodes 1:0,2:100 balancing ip
d314 1
a314 1
.Dl # ifconfig carp0 192.168.1.10 carpnodes 1:100,2:0 balancing ip
@


1.34
log
@Since my changes @@n2k10, carp(4) group failover does not rely
on preempt anymore.  Adjust manpage.
Pointed out by sthen@@, wording jmc@@.
OK sthen, jmc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.33 2009/11/24 18:35:25 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: November 24 2009 $
a73 2
If unspecified, the kernel attempts to set it by looking for
another interface with the same subnet.
@


1.33
log
@Layer-3 -> layer 3;
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.32 2009/03/24 15:47:36 sobrado Exp $
d26 1
a26 1
.Dd $Mdocdate: March 24 2009 $
a100 12
It is also used to failover
.Nm
interfaces as a group.
When the option is enabled and one of the
.Nm
enabled physical interfaces
goes down,
.Cm advskew
is changed to 240 on all
.Nm
interfaces.
See also the first example.
d272 4
a275 5
For firewalls and routers with multiple interfaces, it is desirable to
failover all of the
.Nm
interfaces together, when one of the physical interfaces goes down.
This is achieved by the preempt option.
a293 9
.Pp
Because of the preempt option, when one of the physical interfaces of
host A fails,
.Cm advskew
is adjusted to 240 on all its
.Nm
interfaces.
This will cause host B to preempt on both interfaces instead of
just the failed one.
@


1.32
log
@fix a few typographical errors.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.31 2008/05/06 15:12:00 mcbride Exp $
d26 1
a26 1
.Dd $Mdocdate: May 6 2008 $
d270 1
a270 1
Some Layer-3 switches do port learning based on ARP packets.
@


1.31
log
@Use the standard syslog levels on CARP logging messages instead of
simple on/off, allowing more control over how verbose the logging is.
This also allows you to do a further level of filtering in syslog.conf
if you need to.

Also add logging of state changes, inspired by diff provided by
Brian A. Seklecki in PR 5513. These messages are logged by default.

ok henning mpf deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.30 2008/02/11 07:58:28 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: February 11 2008 $
d253 1
a253 1
Managable switches can usually be tricked into forwarding unicast
@


1.30
log
@bump Mdocdate for pages committed in "febuary", necessary because
of a typo in rcs.c;
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.29 2008/02/05 22:57:31 mpf Exp $
d26 1
a26 1
.Dd $Mdocdate$
d115 1
a115 1
Log bad
d117 5
a121 2
packets.
Disabled by default.
@


1.29
log
@Move carp load balancing (ARP/IP) to a simpler configuration scheme.
Instead of using the same IP on multiple interfaces, carp has to be
configured with the new "carpnodes" and "balancing" options.
 # ifconfig carp0 carpnodes 1:0,2:100,3:100 balancing ip carpdev sis0 192.168.5.50

Please note, that this is a flag day for anyone using carp balancing.
You'll need to adjust your configuration accordingly.

Addititionally this diff adds IPv6 NDP balancing support.

Tested and OK mcbride@@, reyk@@.
Manpage help by jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.28 2007/09/18 09:18:04 mpf Exp $
d26 1
a26 1
.Dd $Mdocdate: September 18 2007 $
@


1.28
log
@ARP balancing has been changed to use the source MAC address
quite a while ago.  Manpage and comment update by Matthew Dempsky.
OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.27 2007/05/31 19:19:49 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 31 2007 $
a118 3
.It net.inet.carp.arpbalance
Balance local traffic using ARP.
Disabled by default.
d156 23
a178 8
The configuration of ARP and IP load balancing is quite similar:
a load balancing group is created out of multiple
.Nm
interfaces by configuring them with the same IP addresses,
but to different VHIDs.
All
.Nm
nodes in the cluster are configured identically, except
d181 2
a182 1
to control which interfaces on a host will be the designated master.
d187 7
a193 3
For load balancing, several
.Nm
interfaces are configured to the same IP address, but to different VHIDs.
d196 1
a196 1
which VHID the request belongs to.
d198 1
a198 2
.Nm
interface is in master state, the ARP request will be answered, otherwise
d204 1
a204 1
router itself will always be balanced to the same virtual host.
d218 3
d233 1
a233 3
state of the
.Nm
load balancing group.
a234 4
A load balancing group consists of two or more
.Nm
interfaces per host which are configured with common IP addresses
but different VHIDs.
d236 20
a255 6
.Cm link0
flag on the first interface of the group.
In most cases it is recommended to also enable the
.Cm link1
flag.
This flag enables the stealth mode on the interface.
a258 1
This is necessary to receive incoming traffic on all hosts in switched networks.
a260 5
The
.Cm link1
flag can be avoided
only if using a hub or if the switch ports that are connected
to the cluster nodes can be configured into some sort of monitoring mode.
d264 3
a266 3
As a workaround the VHID can be changed to a previously unused
one, or just wait until the MAC table entry in the switch times out.
.Pp
a269 5
In such cases,
.Nm
can be told to use a multicast MAC address by additionally enabling the
.Cm link2
flag.
d272 6
a277 3
configure the load balancing group in a symmetrical manner.
This is achieved by prioritizing the interfaces in the same order
(ascending by VHID) on both sides of the firewall.
d314 5
a318 3
In order to set up an load balanced virtual host, it is necessary to configure
one virtual host for each physical host.
In the following example, two virtual hosts are configured on two hosts to
d323 1
a323 1
interfaces on Host A are configured.
d326 1
a326 1
of 100 on the second virtual host means that its advertisements will be sent
d328 2
a329 4
.Bd -literal -offset indent
# ifconfig carp0 192.168.1.10 vhid 1
# ifconfig carp1 192.168.1.10 vhid 2 advskew 100
.Ed
d332 1
a332 5
virtual host 1 rather than virtual host 2.
.Bd -literal -offset indent
# ifconfig carp0 192.168.1.10 vhid 1 advskew 100
# ifconfig carp1 192.168.1.10 vhid 2
.Ed
d334 1
a334 1
If ARP balancing is being used, it must be enabled on both hosts:
d336 4
a339 14
.Dl # sysctl net.inet.carp.arpbalance=1
.Pp
If IP balancing is being used, instead enable the
.Cm link0
and
.Cm link1
flags on the first interface of the load balancing group on both hosts:
.Bd -literal -offset indent
A# ifconfig carp0 192.168.1.10 vhid 1 link0 link1
A# ifconfig carp1 192.168.1.10 vhid 2 advskew 100
.Pp
B# ifconfig carp0 192.168.1.10 vhid 1 advskew 100 link0 link1
B# ifconfig carp1 192.168.1.10 vhid 2
.Ed
d354 13
@


1.27
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.26 2007/04/17 08:26:35 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate$
d138 1
a138 1
based on the source IP address of the host sending the query.
d178 1
a178 1
function against the source IP address in the ARP request to determine
@


1.26
log
@some markup from Dmitri Alenitchev, tweaked by myself;
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.25 2007/03/19 07:28:43 jmc Exp $
d26 1
a26 1
.Dd October 16, 2003
@


1.25
log
@groff does not like blank lines;
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.24 2007/03/18 23:29:31 mpf Exp $
d74 1
a74 1
If unspecified, the kernel attempts to set carpdev by looking for
d107 3
a109 1
goes down, advskew is changed to 240 on all
d279 2
a280 1
The setup for host B is identical, but it has a higher advskew:
d287 3
a289 1
host A fails, advskew is adjusted to 240 on all its
@


1.24
log
@Manpage bits for IP load balancing.
Configuration is subject to change.
With help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.23 2006/06/15 08:55:39 jmc Exp $
d243 1
a243 1

@


1.23
log
@- misplaced .El
- some wording fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.22 2006/06/15 07:58:45 mcbride Exp $
d121 1
a121 1
.Sh ARP LEVEL LOAD BALANCING
d123 49
a171 2
has limited abilities for load balancing the incoming connections
between hosts in an Ethernet network.
a181 3
See the
.Sx EXAMPLES
section for a practical example of load balancing.
d200 59
d273 2
a274 6
# ifconfig carp0 create
# ifconfig carp0 vhid 1 pass mekmitasdigoat 192.168.1.1 \e
	netmask 255.255.255.0
# ifconfig carp1 create
# ifconfig carp1 vhid 2 pass mekmitasdigoat 192.168.2.1 \e
	netmask 255.255.255.0
d279 2
a280 6
# ifconfig carp0 create
# ifconfig carp0 vhid 1 advskew 100 pass mekmitasdigoat \e
	192.168.1.1 netmask 255.255.255.0
# ifconfig carp1 create
# ifconfig carp1 vhid 2 advskew 100 pass mekmitasdigoat \e
	192.168.2.1 netmask 255.255.255.0
d289 3
a291 4
.Pp
In order to set up an ARP balanced virtual host, it is necessary to configure
one virtual host for each physical host which would respond to ARP requests
and thus handle the traffic.
d301 1
a301 1
out slightly less frequently.
d303 2
a304 6
# ifconfig carp0 create
# ifconfig carp0 vhid 1 pass mekmitasdigoat 192.168.1.10 \e
	netmask 255.255.255.0
# ifconfig carp1 create
# ifconfig carp1 vhid 2 advskew 100 pass mekmitasdigoat \e
	192.168.1.10 netmask 255.255.255.0
d310 2
a311 6
# ifconfig carp0 create
# ifconfig carp0 vhid 1 advskew 100 pass mekmitasdigoat \e
	192.168.1.10 netmask 255.255.255.0
# ifconfig carp1 create
# ifconfig carp1 vhid 2 pass mekmitasdigoat 192.168.1.10 \e
	netmask 255.255.255.0
d314 1
a314 1
Finally, the ARP balancing feature must be enabled on both hosts:
d318 12
a329 9
When the hosts receive an ARP request for 192.168.1.10, the source IP address
of the request is used to compute which virtual host should answer the request.
The host which is master of the selected virtual host will reply to the
request, the other(s) will ignore it.
.Pp
This way, locally connected systems will receive different ARP replies and
subsequent IP traffic will be balanced among the hosts.
If one of the hosts fails, the other will take over the virtual MAC address,
and begin answering ARP requests on its behalf.
@


1.22
log
@More clarity about the pitfalls of ARP balancing, heavily inspired by
similar changes in FreeBSD, but mentions the use of nat to prevent
asymetric routes.

prodded by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.21 2006/06/08 12:08:54 jmc Exp $
d120 1
d140 1
a140 1
First, ARP balancing only works on the local network segment.
d143 2
a144 2
Second, ARP load balancing can lead to asymmetric routing
of incoming and outgoing traffic, and thus combining it with
d148 4
a151 4
ARP balancing safely can be used with pfsync if the
.Xr pf
ruleset is translates the source address to an unshared address on the
outgoing interface using a nat rule.
a155 1
.El
@


1.21
log
@provide an abbreviation for virtual host id;
from freebsd text
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.20 2006/05/09 19:03:04 jmc Exp $
d120 35
a240 4
.Pp
Note: ARP balancing only works on the local network segment.
It cannot balance traffic that crosses a router, because the router
itself will always be balanced to the same virtual host.
@


1.20
log
@no need to specify a "count" argument: ifconfig(8) handles these
"on demand";

from jan niemann;
ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.19 2005/08/09 09:52:12 jmc Exp $
d57 2
a58 1
the administrator needs to configure at minimum a common virtual host ID and
@


1.19
log
@lightly document ifstated(8);
help + ok mpf@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.18 2005/05/24 17:16:32 mcbride Exp $
d33 1
a33 1
.Cd "pseudo-device carp" Op Ar count
@


1.18
log
@Use the 'netmask' keyword in the ifconfig examples so they actually work.

Courtesy of stephen.marley@@cl-is.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.17 2005/05/17 13:16:13 jmc Exp $
d81 9
d215 1
@


1.17
log
@.Xr pfsync 4 ,
from freebsd -r1.7 glebius@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.16 2004/12/07 23:41:35 jmc Exp $
d127 1
a127 1
	255.255.255.0
d130 1
a130 1
	255.255.255.0
d137 1
a137 1
	192.168.1.1 255.255.255.0
d140 1
a140 1
	192.168.2.1 255.255.255.0
d166 1
a166 1
	255.255.255.0
d169 1
a169 1
	192.168.1.10 255.255.255.0
d177 1
a177 1
	192.168.1.10 255.255.255.0
d180 1
a180 1
	255.255.255.0
@


1.16
log
@an other -> another;
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.15 2004/12/07 21:22:26 mcbride Exp $
d203 1
@


1.15
log
@Initail documentation of 'carpdev'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.14 2004/11/15 20:28:09 jmc Exp $
d74 1
a74 1
an other interface with the same subnet.
@


1.14
log
@missing .El;
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.13 2004/11/15 12:14:10 henning Exp $
d68 7
@


1.13
log
@clarify preempt, especially wrt failing all interfaces over at once,
and better examples, from camield@@, ok ryan and me
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.12 2004/08/17 00:24:40 jaredy Exp $
d103 1
@


1.12
log
@a few mdoc fixes

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.11 2004/07/26 09:20:14 jmc Exp $
d75 28
a102 1
.Xr sysctl 8 .
d104 38
d143 4
a146 4
one virtual host for each physical host which would respond to ARP
requests and thus handle the traffic.
In the following example, 2 hosts are configured to provide balancing and
failover for the IP address 192.168.1.10.
d179 7
a185 10
When the hosts receive an ARP request for 192.168.1.10, they both select
one of the virtual hosts based on the source IP address in the request.
The host which is master of that virtual host will reply to the request, the
other will ignore it.
.Pp
Because the host which advertises most often will tend to be the master, the
result of this is that Host A will tend to be the master for the virtual host
with ID 1, while Host B will tend to be the master for the virtual host with ID
2, and therefore arp requests and subsequent IP traffic are balanced across the
two hosts.
d190 2
a191 2
Connections which cross a router to arrive on the local network segment
will all appear to come from that router and be balanced to the same host.
@


1.11
log
@.Xr hostname.if 5
.Xr netstart 8

from Alexey E. Suslikov
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.10 2004/07/05 22:39:54 jmc Exp $
d49 1
a49 1
.Ic ifconfig carpN create
d61 1
a61 1
.Ar advbase
d63 1
a63 1
.Ar advskew ,
d66 1
a66 1
.Ar pass
d87 1
a87 1
.Ar advskew
@


1.10
log
@avoid mess by specifying netmask to EXAMPLES;
problem found by Diana Eichert, solution from ho@@, and ok mcbride@@;
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.9 2004/03/25 17:53:16 henning Exp $
d133 1
d135 1
@


1.9
log
@fix english, from Joel Knight, deraadt ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.8 2004/03/21 20:16:37 jmc Exp $
d92 2
a93 1
# ifconfig carp0 vhid 1 pass mekmitasdigoat 192.168.1.10
d95 2
a96 1
# ifconfig carp1 vhid 2 advskew 100 pass mekmitasdigoat 192.168.1.10
d103 2
a104 1
# ifconfig carp0 vhid 1 advskew 100 pass mekmitasdigoat 192.168.1.10
d106 2
a107 1
# ifconfig carp1 vhid 2 pass mekmitasdigoat 192.168.1.10
@


1.8
log
@wording from Andre Lucas (PR 3723);
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.7 2004/03/05 17:24:13 mcbride Exp $
d88 1
a88 1
of 100 on the second virtual host means that it's advertisements will be sent
@


1.7
log
@Remove "you" and other minor cleanup. Pointed out by deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.6 2004/02/25 08:42:38 jmc Exp $
d78 2
a79 2
one virtual host for each physical host which would responding to ARP
requests and thus handling the traffic.
@


1.6
log
@remove -w option to sysctl;

diffs from Paul de Weerd;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.5 2003/12/08 10:03:43 markus Exp $
d78 3
a80 3
one virtual host for each physical host which you would like to have actively
responding to ARP requests and thus handling the traffic.
In the following example, we will configure 2 hosts to provide balancing and
d83 1
a83 1
First, we configure the
d85 1
a85 1
interfaces on Host A.
d97 2
a98 2
Now we configure Host B.
The configuration is identical, except we skew virtual host 1 instead.
@


1.5
log
@mention ifconfig create; sync synopsis like (Op Ar count). with jmc, deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.4 2003/10/19 03:57:25 david Exp $
d108 1
a108 1
.Dl # sysctl -w net.inet.carp.arpbalance=1
@


1.4
log
@typos from Steve Andre <andres@@msu.edu>
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.3 2003/10/18 17:48:50 jmc Exp $
d46 9
d91 1
d93 1
d100 1
d102 1
@


1.3
log
@tweaks;
ok mcbride@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: carp.4,v 1.2 2003/10/18 00:47:03 mcbride Exp $
d55 1
a55 1
which are used to control how frequently the host sends advertisments when it
d97 1
a97 1
When the hosts recieve an ARP request for 192.168.1.10, they both select
@


1.2
log
@CARP documentation cleanups, mostly from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d40 2
a41 2
Allows multiple hosts on the same local network to share a set of IP
addresses among them. It's primary purpose is to ensure that these
@


1.1
log
@Common Address Redundancy Protocol

Allows multiple hosts to share an IP address, providing high availability
and load balancing.

Based on code by mickey@@, with additional help from markus@@
and Marco_Pfatschbacher@@genua.de

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: $
d27 1
a27 1
.Dt CARP
d37 1
a37 1
interface is a pseudo-device which implements and controls the 
d39 6
d47 2
a48 2
.Nm carp ,
the administrator needs to configure at minimum a a common virtual host id and
d50 2
a51 1
group. Additinal parameters can also be set on a per-interface basis:
d59 1
a59 1
These configurations can be done by using
a67 1
.Pp
d70 1
a70 1
responding to arp requests and thus handling the traffic.
d94 2
a95 3
.Bd -literal -offset indent
# sysctl -w net.inet.carp.arpbalance=1
.Ed
d104 1
a104 1
with id 1, while Host B will tend to be the master for the virtual host with id
d106 7
a112 6
two hosts. If one of the hosts fails, the other will take over the virtual MAC
address, and begin answering ARP requests on it's behalf.
.Pp
Note: ARP balancing only works on the local network segment. Connections from
which cross a router to arrive on the local netowrk segment will all appear
to come from that router and be balanced to the same host.
d114 1
d117 1
a117 2
.Xr sysctl 8 ,
.Xr sysctl 3
@

