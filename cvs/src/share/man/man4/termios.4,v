head	1.37;
access;
symbols
	OPENBSD_6_2:1.37.0.4
	OPENBSD_6_2_BASE:1.37
	OPENBSD_6_1:1.37.0.8
	OPENBSD_6_1_BASE:1.37
	OPENBSD_6_0:1.37.0.6
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.37.0.2
	OPENBSD_5_9_BASE:1.37
	OPENBSD_5_8:1.36.0.10
	OPENBSD_5_8_BASE:1.36
	OPENBSD_5_7:1.36.0.8
	OPENBSD_5_7_BASE:1.36
	OPENBSD_5_6:1.36.0.6
	OPENBSD_5_6_BASE:1.36
	OPENBSD_5_5:1.36.0.4
	OPENBSD_5_5_BASE:1.36
	OPENBSD_5_4:1.35.0.8
	OPENBSD_5_4_BASE:1.35
	OPENBSD_5_3:1.35.0.6
	OPENBSD_5_3_BASE:1.35
	OPENBSD_5_2:1.35.0.4
	OPENBSD_5_2_BASE:1.35
	OPENBSD_5_1_BASE:1.35
	OPENBSD_5_1:1.35.0.2
	OPENBSD_5_0:1.34.0.4
	OPENBSD_5_0_BASE:1.34
	OPENBSD_4_9:1.34.0.2
	OPENBSD_4_9_BASE:1.34
	OPENBSD_4_8:1.33.0.2
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.32.0.2
	OPENBSD_4_7_BASE:1.32
	OPENBSD_4_6:1.30.0.6
	OPENBSD_4_6_BASE:1.30
	OPENBSD_4_5:1.30.0.2
	OPENBSD_4_5_BASE:1.30
	OPENBSD_4_4:1.28.0.2
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.27.0.4
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.26.0.12
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.10
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.26.0.8
	OPENBSD_3_9_BASE:1.26
	OPENBSD_3_8:1.26.0.6
	OPENBSD_3_8_BASE:1.26
	OPENBSD_3_7:1.26.0.4
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.26.0.2
	OPENBSD_3_6_BASE:1.26
	OPENBSD_3_5:1.25.0.4
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.18.0.4
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.2
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.11.0.6
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.4
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.37
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.36;
commitid	PeV7Ql0T6htfMjhP;

1.36
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.35;

1.35
date	2011.08.19.19.59.51;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2010.09.19.12.41.23;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2010.03.01.07.54.07;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2009.12.26.09.46.17;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2009.01.12.07.44.57;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2008.08.21.18.16.13;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2008.05.14.20.12.12;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.31.19.19.52;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2004.04.27.16.44.09;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.08.28.16.58.28;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2003.08.28.14.15.52;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.26.19.36.29;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.06.10.29.41;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.02.23.30.13;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.05.13.51.58;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2003.04.09.04.29.03;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.06.23.33.46;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.13.13.54.26;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.05.14.45.53;	author mpech;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.20.05.57.55;	author mpech;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.22.12.15.47;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.21.21.01.20;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.20.08.00.01;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.07.09.13.35.47;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.06.05.13.18.33;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.04.02.16.21.36;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	98.09.06.22.23.20;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	98.06.08.17.26.51;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.08.27.18.01.10;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.03.29.20.15.52;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	97.01.30.07.59.50;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.12.16.20.04.51;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.12.10.09.06.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.37
log
@use .In rather than .Fd #include
@
text
@.\"	$OpenBSD: termios.4,v 1.36 2014/01/21 03:15:46 schwarze Exp $
.\"	$NetBSD: termios.4,v 1.5 1994/11/30 16:22:36 jtc Exp $
.\"
.\" Copyright (c) 1991, 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)termios.4	8.4 (Berkeley) 4/19/94
.\"
.Dd $Mdocdate: January 21 2014 $
.Dt TERMIOS 4
.Os
.Sh NAME
.Nm termios
.Nd general terminal line discipline
.Sh SYNOPSIS
.In termios.h
.Sh DESCRIPTION
This describes a general terminal line discipline that is
supported on tty asynchronous communication ports.
.Ss Opening a Terminal Device File
When a terminal file is opened, it normally causes the process to wait
until a connection is established.
For most hardware, the presence of a connection is indicated by the assertion
of the hardware
.Dv CARRIER line .
If the termios structure associated with the terminal file has the
.Dv CLOCAL
flag set in the cflag, or if the
.Dv O_NONBLOCK
flag is set
in the
.Xr open 2
call, then the open will succeed even without
a connection being present.
In practice, applications
seldom open these files; they are opened by special programs, such
as
.Xr getty 8
or
.Xr sshd 8 ,
and become
an application's standard input, output, and error files.
.Ss Job Control in a Nutshell
Every process is associated with a particular process group and session.
The grouping is hierarchical: every member of a particular process group is a
member of the same session.
This structuring is used in managing groups of related processes for purposes
of
.\" .Gw "job control" ;
.Em "job control" ;
that is, the
ability from the keyboard (or from program control) to simultaneously
stop or restart
a complex command (a command composed of one or more related
processes).
The grouping into process groups allows delivering of signals that stop or
start the group as a whole, along with arbitrating which process group has
access to the single controlling terminal.
The grouping at a higher layer into sessions is to restrict
the job control related signals and system calls to within processes
resulting from a particular instance of a "login".
Typically, a session is created when a user logs in, and the login terminal
is set up to be the controlling terminal; all processes spawned from that
login shell are in the same session, and inherit the controlling
terminal.
A job control shell
operating interactively (that is, reading commands from a terminal)
normally groups related processes together by placing them into the
same process group.
A set of processes in the same process group is collectively referred to as
a "job".
When the foreground process group of the terminal is the same as the process
group of a particular job, that job is said to be in the "foreground".
When the process group of the terminal is different than the process group of
a job (but is still the controlling terminal), that job is said
to be in the "background".
Normally the shell reads a command and starts the job that implements that
command.
If the command is to be started in the foreground (typical), it sets the
process group of the terminal to the process group of the started job, waits
for the job to complete, and then sets the process group of the terminal
back to its own process group (it puts itself into the foreground).
If the job is to be started in the background (as denoted by the shell
operator "&"), it never changes the process group of the terminal and doesn't
wait for the job to complete (that is, it immediately attempts to read the next
command).
If the job is started in the foreground, the user may type a key (usually
.Ql \&^Z )
which generates the terminal stop signal
.Pq Dv SIGTSTP
and has the effect of stopping the entire job.
The shell will notice that the job stopped, and will resume running after
placing itself in the foreground.
The shell also has commands for placing stopped jobs in the background,
and for placing stopped or background jobs into the foreground.
.Ss Orphaned Process Groups
An orphaned process group is a process group that has no process
whose parent is in a different process group, yet is in the same
session.
Conceptually it means a process group that doesn't have
a parent that could do anything if it were to be stopped.
For example, the initial login shell is typically in an orphaned
process group.
Orphaned process groups are immune to keyboard generated stop
signals and job control signals resulting from reads or writes to the
controlling terminal.
.Ss The Controlling Terminal
A terminal may belong to a process as its controlling terminal.
Each process of a session that has a controlling terminal has the same
controlling terminal.
A terminal may be the controlling terminal for at most one session.
The controlling terminal for a session is allocated by the session leader
by issuing the
.Dv TIOCSCTTY
ioctl.
A controlling terminal is never acquired by merely opening a terminal device
file.
When a controlling terminal becomes
associated with a session, its foreground process group is set to
the process group of the session leader.
.Pp
The controlling terminal is inherited by a child process during a
.Xr fork 2
function call.
A process relinquishes its controlling terminal when it creates a new session
with the
.Xr setsid 2
function; other processes remaining in the old session that had this terminal
as their controlling terminal continue to have it.
A process does not relinquish its
controlling terminal simply by closing all of its file descriptors
associated with the controlling terminal if other processes continue to
have it open.
.Pp
When a controlling process terminates, the controlling terminal is
disassociated from the current session, allowing it to be acquired by a
new session leader.
Subsequent access to the terminal by other processes in the earlier session
will be denied, with attempts to access the terminal treated as if modem
disconnect had been sensed.
.Ss Terminal Access Control
If a process is in the foreground process group of its controlling
terminal, read operations are allowed.
Any attempts by a process
in a background process group to read from its controlling terminal
causes a
.Dv SIGTTIN
signal to be sent to
the process's group
unless one of the
following special cases apply: If the reading process is ignoring or
blocking the
.Dv SIGTTIN
signal, or if the process group of the reading process is orphaned, the
.Xr read 2
returns -1 with
.Va errno
set to
.Er EIO
and no
signal is sent.
The default action of the
.Dv SIGTTIN
signal is to stop the
process to which it is sent.
.Pp
If a process is in the foreground process group of its controlling
terminal, write operations are allowed.
Attempts by a process in a background process group to write to its
controlling terminal will cause the process group to be sent a
.Dv SIGTTOU
signal unless one of the following special cases apply:
If
.Dv TOSTOP
is not
set, or if
.Dv TOSTOP
is set and the process is ignoring or blocking the
.Dv SIGTTOU
signal, the process is allowed to write to the terminal and the
.Dv SIGTTOU
signal is not sent.
If
.Dv TOSTOP
is set, and the process group of
the writing process is orphaned, and the writing process is not ignoring
or blocking
.Dv SIGTTOU ,
the
.Xr write 2
returns -1 with
.Va errno
set to
.Er EIO
and no signal is sent.
.Pp
Certain calls that set terminal parameters are treated in the same
fashion as write, except that
.Dv TOSTOP
is ignored; that is, the effect is
identical to that of terminal writes when
.Dv TOSTOP
is set.
.Ss Input Processing and Reading Data
A terminal device associated with a terminal device file may operate in
full-duplex mode, so that data may arrive even while output is occurring.
Each terminal device file has associated with it an input queue, into
which incoming data is stored by the system before being read by a
process.
The system imposes a limit,
.Pf \&{ Dv MAX_INPUT Ns \&} ,
on the number of
bytes that may be stored in the input queue.
The behavior of the system when this limit is exceeded depends on the
setting of the
.Dv IMAXBEL
flag in the termios
.Fa c_iflag .
If this flag is set, the terminal
is sent an
.Tn ASCII
.Dv BEL
character each time a character is received
while the input queue is full.
Otherwise, the input queue is flushed upon receiving the character.
.Pp
Two general kinds of input processing are available, determined by
whether the terminal device file is in canonical mode or noncanonical
mode.
Additionally, input characters are processed according to the
.Fa c_iflag
and
.Fa c_lflag
fields.
Such processing can include echoing, which in general means transmitting
input characters immediately back to the terminal when they are received
from the terminal.
This is useful for terminals that can operate in full-duplex mode.
.Pp
The manner in which data is provided to a process reading from a terminal
device file is dependent on whether the terminal device file is in
canonical or noncanonical mode.
.Pp
Another dependency is whether the
.Dv O_NONBLOCK
flag is set by
.Fn open
or
.Fn fcntl .
If the
.Dv O_NONBLOCK
flag is clear, then the read request is
blocked until data is available or a signal has been received.
If the
.Dv O_NONBLOCK
flag is set, then the read request is completed, without
blocking, in one of three ways:
.Bl -enum -offset indent
.It
If there is enough data available to satisfy the entire request,
and the read completes successfully the number of bytes read is returned.
.It
If there is not enough data available to satisfy the entire
request, and the read completes successfully, having read as
much data as possible, the number of bytes read is returned.
.It
If there is no data available, the read returns -1, with
.Va errno
set to
.Er EAGAIN .
.El
.Pp
When data is available depends on whether the input processing mode is
canonical or noncanonical.
.Ss Canonical Mode Input Processing
In canonical mode input processing, terminal input is processed in units
of lines.
A line is delimited by a newline
.Ql \&\en
character, an end-of-file
.Pq Dv EOF
character, or an end-of-line
.Pq Dv EOL
character.
See the
.Sx "Special Characters"
section for
more information on
.Dv EOF
and
.Dv EOL .
This means that a read request will
not return until an entire line has been typed, or a signal has been
received.
Also, no matter how many bytes are requested in the read call,
at most one line is returned.
It is not, however, necessary to read a whole line at once; any number
of bytes, even one, may be requested in a read without losing information.
.Pp
.Pf \&{ Dv MAX_CANON Ns \&}
is a limit on the
number of bytes in a line.
The behavior of the system when this limit is
exceeded is the same as when the input queue limit
.Pf \&{ Dv MAX_INPUT Ns \&} ,
is exceeded.
.Pp
Erase and kill processing occur when either of two special characters,
the
.Dv ERASE
and
.Dv KILL
characters (see the
.Sx "Special Characters section" ) ,
is received.
This processing affects data in the input queue that has not yet been
delimited by a newline
.Dv NL ,
.Dv EOF ,
or
.Dv EOL
character.
This un-delimited data makes up the current line.
The
.Dv ERASE
character deletes the last
character in the current line, if there is any.
The
.Dv KILL
character
deletes all data in the current line, if there is any.
The
.Dv ERASE
and
.Dv KILL
characters have no effect if there is no data in the current line.
The
.Dv ERASE
and
.Dv KILL
characters themselves are not placed in the input
queue.
.Ss Noncanonical Mode Input Processing
In noncanonical mode input processing, input bytes are not assembled into
lines, and erase and kill processing does not occur.
The values of the
.Dv VMIN
and
.Dv VTIME
members of the
.Fa c_cc
array are used to determine how to
process the bytes received.
.Pp
.Dv VMIN
represents the minimum number of bytes that should be received when
the
.Xr read 2
function successfully returns.
.Dv VTIME
is a timer of 0.1 second
granularity that is used to time out bursty and short term data
transmissions.
If
.Dv VMIN
is greater than
.Pf \&{ Dv MAX_INPUT Ns \&} ,
the response to the
request is undefined.
The four possible values for
.Dv VMIN
and
.Dv VTIME
and
their interactions are described below.
.Ss "Case A: VMIN > 0, VTIME > 0"
In this case
.Dv VTIME
serves as an inter-byte timer and is activated after
the first byte is received.
Since it is an inter-byte timer, it is reset after a byte is received.
The interaction between
.Dv VMIN
and
.Dv VTIME
is as
follows: as soon as one byte is received, the inter-byte timer is
started.
If
.Dv VMIN
bytes are received before the inter-byte timer expires
(remember that the timer is reset upon receipt of each byte), the read is
satisfied.
If the timer expires before
.Dv VMIN
bytes are received, the
characters received to that point are returned to the user.
Note that if
.Dv VTIME
expires at least one byte is returned because the timer would
not have been enabled unless a byte was received.
In this case
.Pf \&( Dv VMIN
> 0,
.Dv VTIME
> 0) the read blocks until the
.Dv VMIN
and
.Dv VTIME
mechanisms are
activated by the receipt of the first byte, or a signal is received.
If data is in the buffer at the time of the read(), the result is as
if data had been received immediately after the read().
.Ss "Case B: VMIN > 0, VTIME = 0"
In this case, since the value of
.Dv VTIME
is zero, the timer plays no role
and only
.Dv VMIN
is significant.
A pending read is not satisfied until
.Dv VMIN
bytes are received (i.e., the pending read blocks until
.Dv VMIN
bytes
are received), or a signal is received.
A program that uses this case to read record-based terminal
.Dv I/O
may block indefinitely in the read
operation.
.Ss "Case C: VMIN = 0, VTIME > 0"
In this case, since
.Dv VMIN
= 0,
.Dv VTIME
no longer represents an inter-byte
timer.
It now serves as a read timer that is activated as soon as the
read function is processed.
A read is satisfied as soon as a single byte is received or the read
timer expires.
Note that in this case if the timer expires, no bytes are returned.
If the timer does not expire, the only way the read can be satisfied is
if a byte is received.
In this case the read will not block indefinitely waiting for a byte; if
no byte is received within
.Dv VTIME Ns *0.1
seconds after the read is initiated,
the read returns a value of zero, having read no data.
If data is in the buffer at the time of the read, the timer is started
as if data had been received immediately after the read.
.Ss Case D: VMIN = 0, VTIME = 0
The minimum of either the number of bytes requested or the number of
bytes currently available is returned without waiting for more
bytes to be input.
If no characters are available, read returns a value of zero, having
read no data.
.Ss Writing Data and Output Processing
When a process writes one or more bytes to a terminal device file, they
are processed according to the
.Fa c_oflag
field (see the
.Sx Output Modes
section).
The
implementation may provide a buffering mechanism; as such, when a call to
write() completes, all of the bytes written have been scheduled for
transmission to the device, but the transmission will not necessarily
have been completed.
.\" See also .Sx "6.4.2" for the effects of
.\" .Dv O_NONBLOCK
.\" on write.
.Ss Special Characters
Certain characters have special functions on input or output or both.
These functions are summarized as follows:
.Bl -tag -width indent
.It Dv INTR
Special character on input and is recognized if the
.Dv ISIG
flag (see the
.Sx "Local Modes"
section) is enabled.
Generates a
.Dv SIGINT
signal which is sent to all processes in the foreground
process group for which the terminal is the controlling
terminal.
If
.Dv ISIG
is set, the
.Dv INTR
character is
discarded when processed.
.It Dv QUIT
Special character on input and is recognized if the
.Dv ISIG
flag is enabled.
Generates a
.Dv SIGQUIT
signal which is
sent to all processes in the foreground process group
for which the terminal is the controlling terminal.
If
.Dv ISIG
is set, the
.Dv QUIT
character is discarded when
processed.
.It Dv ERASE
Special character on input and is recognized if the
.Dv ICANON
flag is set.
Erases the last character in the current line; see
.Sx "Canonical Mode Input Processing" .
It does not erase beyond the start of a line, as delimited by a
.Dv NL ,
.Dv EOF ,
or
.Dv EOL
character.
If
.Dv ICANON
is set, the
.Dv ERASE
character is
discarded when processed.
.It Dv KILL
Special character on input and is recognized if the
.Dv ICANON
flag is set.
Deletes the entire line, as delimited by a
.Dv NL ,
.Dv EOF ,
or
.Dv EOL
character.
If
.Dv ICANON
is set, the
.Dv KILL
character is discarded when processed.
.It Dv EOF
Special character on input and is recognized if the
.Dv ICANON
flag is set.
When received, all the bytes waiting to be read are immediately passed to the
process, without waiting for a newline, and the
.Dv EOF
is discarded.
Thus, if there are no bytes waiting (that
is, the
.Dv EOF
occurred at the beginning of a line), a byte
count of zero is returned from the read(),
representing an end-of-file indication.
If
.Dv ICANON
is
set, the
.Dv EOF
character is discarded when processed.
.It Dv NL
Special character on input and is recognized if the
.Dv ICANON
flag is set.
It is the line delimiter
.Ql \&\en .
.It Dv EOL
Special character on input and is recognized if the
.Dv ICANON
flag is set.
Is an additional line delimiter,
like
.Dv NL .
.It Dv SUSP
If the
.Dv ISIG
flag is enabled, receipt of the
.Dv SUSP
character causes a
.Dv SIGTSTP
signal to be sent to all processes in the
foreground process group for which the terminal is the
controlling terminal, and the
.Dv SUSP
character is
discarded when processed.
.It Dv STOP
Special character on both input and output and is
recognized if the
.Dv IXON
(output control) or
.Dv IXOFF
(input
control) flag is set.
Can be used to temporarily suspend output.
It is useful with fast terminals to prevent output from disappearing
before it can be read.
If
.Dv IXON
is set, the
.Dv STOP
character is discarded when
processed.
.It Dv START
Special character on both input and output and is
recognized if the
.Dv IXON
(output control) or
.Dv IXOFF
(input
control) flag is set.
Can be used to resume output that has been suspended by a
.Dv STOP
character.
If
.Dv IXON
is set, the
.Dv START
character is discarded when processed.
.It Dv CR
Special character on input and is recognized if the
.Dv ICANON
flag is set; it is the
.Ql \&\er ,
as denoted in the
.Tn \&C
Standard {2}.
When
.Dv ICANON
and
.Dv ICRNL
are set and
.Dv IGNCR
is not set, this character is translated into a
.Dv NL ,
and
has the same effect as a
.Dv NL
character.
.El
.Pp
The following special characters are extensions defined by this
system and are not a part of 1003.1 termios.
.Bl -tag -width indent
.It Dv EOL2
Secondary
.Dv EOL
character.
Same function as
.Dv EOL .
.It Dv WERASE
Special character on input and is recognized if the
.Dv ICANON
flag is set.
Erases the last word in the current
line according to one of two algorithms.
If the
.Dv ALTWERASE
flag is not set, first any preceding whitespace is
erased, and then the maximal sequence of non-whitespace
characters.
If
.Dv ALTWERASE
is set, first any preceding
whitespace is erased, and then the maximal sequence
of alphabetic/underscores or non alphabetic/underscores.
As a special case in this second algorithm, the first previous
non-whitespace character is skipped in determining
whether the preceding word is a sequence of
alphabetic/underscores.
This sounds confusing but turns out to be quite practical.
.It Dv REPRINT
Special character on input and is recognized if the
.Dv ICANON
flag is set.
Causes the current input edit line
to be retyped.
.It Dv DSUSP
Has similar actions to the
.Dv SUSP
character, except that
the
.Dv SIGTSTP
signal is delivered when one of the processes
in the foreground process group issues a read() to the
controlling terminal.
.It Dv LNEXT
Special character on input and is recognized if the
.Dv IEXTEN
flag is set.
Receipt of this character causes the next character to be taken literally.
.It Dv DISCARD
Special character on input and is recognized if the
.Dv IEXTEN
flag is set.
Receipt of this character toggles the flushing of terminal output.
.It Dv STATUS
Special character on input and is recognized if the
.Dv ICANON
flag is set.
Receipt of this character causes a
.Dv SIGINFO
signal to be sent to the foreground process group of the
terminal.
Also, if the
.Dv NOKERNINFO
flag is not set, it
causes the kernel to write a status message to the terminal
that displays the current load average, the name of the
command in the foreground, its process ID, the symbolic
wait channel, the number of user and system seconds used,
the percentage of CPU the process is getting, and the resident
set size of the process.
.El
.Pp
The
.Dv NL
and
.Dv CR
characters cannot be changed.
The values for all the remaining characters can be set and are
described later in the document under
.Sx Special Control Characters .
.Pp
Special
character functions associated with changeable special control characters
can be disabled individually by setting their value to
.Dv {_POSIX_VDISABLE} ;
see
.Sx "Special Control Characters" .
.Pp
If two or more special characters have the same value, the function
performed when that character is received is undefined.
.Ss Modem Disconnect
If a modem disconnect is detected by the terminal interface for a
controlling terminal, and if
.Dv CLOCAL
is not set in the
.Fa c_cflag
field for
the terminal, the
.Dv SIGHUP
signal is sent to the controlling
process associated with the terminal.
Unless other arrangements have been made, this causes the controlling
process to terminate.
Any subsequent call to the read() function returns the value zero,
indicating end of file.
Thus, processes that read a terminal file and test for end-of-file can
terminate appropriately after a disconnect.
.\" If the
.\" .Er EIO
.\" condition specified in 6.1.1.4 that applies
.\" when the implementation supports job control also exists, it is
.\" unspecified whether the
.\" .Dv EOF
.\" condition or the
.\" .Pf [ Dv EIO
.\" ] is returned.
Any
subsequent write() to the terminal device returns -1, with
.Va errno
set to
.Er EIO ,
until the device is closed.
.Sh General Terminal Interface
.Ss Closing a Terminal Device File
The last process to close a terminal device file causes any output
to be sent to the device and any input to be discarded.
Then, if
.Dv HUPCL
is set in the control modes, and the communications port supports a
disconnect function, the terminal device performs a disconnect.
.Ss Parameters That Can Be Set
Routines that need to control certain terminal
.Tn I/O
characteristics
do so by using the termios structure as defined in the header
.In termios.h .
This structure contains minimally four scalar elements of bit flags
and one array of special characters.
The scalar flag elements are
named:
.Fa c_iflag ,
.Fa c_oflag ,
.Fa c_cflag ,
and
.Fa c_lflag .
The character array is named
.Fa c_cc ,
and its maximum index is
.Dv NCCS .
.Ss Input Modes
Values of the
.Fa c_iflag
field describe the basic
terminal input control, and are composed of
following masks:
.Pp
.Bl -tag -width IMAXBEL -offset indent -compact
.It Dv IGNBRK
/* ignore BREAK condition */
.It Dv BRKINT
/* map BREAK to SIGINT */
.It Dv IGNPAR
/* ignore (discard) parity errors */
.It Dv PARMRK
/* mark parity and framing errors */
.It Dv INPCK
/* enable checking of parity errors */
.It Dv ISTRIP
/* strip 8th bit off chars */
.It Dv INLCR
/* map NL into CR */
.It Dv IGNCR
/* ignore CR */
.It Dv ICRNL
/* map CR to NL (ala CRMOD) */
.It Dv IXON
/* enable output flow control */
.It Dv IXOFF
/* enable input flow control */
.It Dv IXANY
/* any char will restart after stop */
.It Dv IMAXBEL
/* ring bell on input queue full */
.It Dv IUCLC
/* translate upper case to lower case */
.El
.Pp
In the context of asynchronous serial data transmission, a break
condition is defined as a sequence of zero-valued bits that continues for
more than the time to send one byte.
The entire sequence of zero-valued bits is interpreted as a single break
condition, even if it continues for a time equivalent to more than one byte.
In contexts other than asynchronous serial data transmission the definition
of a break condition is implementation defined.
.Pp
If
.Dv IGNBRK
is set, a break condition detected on input is ignored, that
is, not put on the input queue and therefore not read by any process.
If
.Dv IGNBRK
is not set and
.Dv BRKINT
is set, the break condition flushes the
input and output queues and if the terminal is the controlling terminal
of a foreground process group, the break condition generates a
single
.Dv SIGINT
signal to that foreground process group.
If neither
.Dv IGNBRK
nor
.Dv BRKINT
is set, a break condition is read as a single
.Ql \&\e0 ,
or if
.Dv PARMRK
is set, as
.Ql \&\e377 ,
.Ql \&\e0 ,
.Ql \&\e0 .
.Pp
If
.Dv IGNPAR
is set, a byte with a framing or parity error (other than
break) is ignored.
.Pp
If
.Dv PARMRK
is set, and
.Dv IGNPAR
is not set, a byte with a framing or parity
error (other than break) is given to the application as the
three-character sequence
.Ql \&\e377 ,
.Ql \&\e0 ,
X, where
.Ql \&\e377 ,
.Ql \&\e0
is a two-character
flag preceding each sequence and X is the data of the character received
in error.
To avoid ambiguity in this case, if
.Dv ISTRIP
is not set, a valid
character of
.Ql \&\e377
is given to the application as
.Ql \&\e377 ,
.Ql \&\e377 .
If
neither
.Dv PARMRK
nor
.Dv IGNPAR
is set, a framing or parity error (other than
break) is given to the application as a single character
.Ql \&\e0 .
.Pp
If
.Dv INPCK
is set, input parity checking is enabled.
If
.Dv INPCK
is not set,
input parity checking is disabled, allowing output parity generation
without input parity errors.
Note that whether input parity checking is enabled or disabled is independent
of whether parity detection is enabled or disabled (see
.Sx "Control Modes" ) .
If parity detection is enabled but input
parity checking is disabled, the hardware to which the terminal is
connected recognizes the parity bit, but the terminal special file
does not check whether this bit is set correctly or not.
.Pp
If
.Dv ISTRIP
is set, valid input bytes are first stripped to seven bits,
otherwise all eight bits are processed.
.Pp
If
.Dv INLCR
is set, a received
.Dv NL
character is translated into a
.Dv CR
character.
If
.Dv IGNCR
is set, a received
.Dv CR
character is ignored (not
read).
If
.Dv IGNCR
is not set and
.Dv ICRNL
is set, a received
.Dv CR
character is
translated into a
.Dv NL
character.
.Pp
If
.Dv IXON
is set, start/stop output control is enabled.
A received
.Dv STOP
character suspends output and a received
.Dv START
character
restarts output.
If
.Dv IXANY
is also set, then any character may
restart output.
When
.Dv IXON
is set,
.Dv START
and
.Dv STOP
characters are not
read, but merely perform flow control functions.
When
.Dv IXON
is not set,
the
.Dv START
and
.Dv STOP
characters are read.
.Pp
If
.Dv IXOFF
is set, start/stop input control is enabled.
The system shall transmit one or more
.Dv STOP
characters, which are intended to cause the
terminal device to stop transmitting data, as needed to prevent the input
queue from overflowing and causing the undefined behavior described in
.Sx "Input Processing and Reading Data" ,
and shall transmit one or more
.Dv START
characters, which are
intended to cause the terminal device to resume transmitting data, as
soon as the device can continue transmitting data without risk of
overflowing the input queue.
The precise conditions under which
.Dv STOP
and
START
characters are transmitted are implementation defined.
.Pp
If
.Dv IMAXBEL
is set and the input queue is full, subsequent input shall cause an
.Tn ASCII
.Dv BEL
character to be transmitted to
the output queue.
.Pp
If
.Dv IUCLC
is set, characters will be translated from upper to lower case on
input.
.Pp
The initial input control value after open() is implementation defined.
.Ss Output Modes
Values of the
.Fa c_oflag
field describe the basic terminal output control,
and are composed of the following masks:
.Pp
.Bl -tag -width OXTABS -offset indent -compact
.It Dv OPOST
/* enable following output processing */
.It Dv ONLCR
/* map NL to CR-NL (ala
.Dv CRMOD )
*/
.It Dv OXTABS
/* expand tabs to spaces */
.It Dv ONOEOT
/* discard
.Dv EOT Ns 's
.Pq ^D
on output */
.It Dv OCRNL
/* map CR to NL */
.It Dv OLCUC
/* translate lower case to upper case */
.It Dv ONOCR
/* No CR output at column 0 */
.It Dv ONLRET
/* NL performs the CR function */
.El
.Pp
If
.Dv OPOST
is set, the remaining flag masks are interpreted as follows;
otherwise characters are transmitted without change.
.Pp
If
.Dv ONLCR
is set, newlines are translated to carriage return, linefeeds.
.Pp
If
.Dv OXTABS
is set, tabs are expanded to the appropriate number of
spaces (assuming 8 column tab stops).
.Pp
If
.Dv ONOEOT
is set,
.Tn ASCII
.Dv EOT Ns 's
are discarded on output.
.Pp
If
.Dv OCRNL
is set, carriage returns are translated to newlines.
.Pp
If
.Dv OLCUC
is set, lower case is translated to upper case on output.
.Pp
If
.Dv ONOCR
is set, no CR character is output when at column 0.
.Pp
If
.Dv ONLRET
is set, NL also performs CR on output, and reset current
column to 0.
.Ss Control Modes
Values of the
.Fa c_cflag
field describe the basic
terminal hardware control, and are composed of the
following masks.
Not all values
specified are supported by all hardware.
.Pp
.Bl -tag -width CRTSXIFLOW -offset indent -compact
.It Dv CSIZE
/* character size mask */
.It Dv CS5
/* 5 bits (pseudo) */
.It Dv CS6
/* 6 bits */
.It Dv CS7
/* 7 bits */
.It Dv CS8
/* 8 bits */
.It Dv CSTOPB
/* send 2 stop bits */
.It Dv CREAD
/* enable receiver */
.It Dv PARENB
/* parity enable */
.It Dv PARODD
/* odd parity, else even */
.It Dv HUPCL
/* hang up on last close */
.It Dv CLOCAL
/* ignore modem status lines */
.It Dv CCTS_OFLOW
/*
.Dv CTS
flow control of output */
.It Dv CRTSCTS
/* same as
.Dv CCTS_OFLOW
*/
.It Dv CRTS_IFLOW
/* RTS flow control of input */
.It Dv MDMBUF
/* flow control output via Carrier */
.El
.Pp
The
.Dv CSIZE
bits specify the byte size in bits for both transmission and
reception.
The
.Fa c_cflag
is masked with
.Dv CSIZE
and compared with the
values
.Dv CS5 ,
.Dv CS6 ,
.Dv CS7 ,
or
.Dv CS8 .
This size does not include the parity bit, if any.
If
.Dv CSTOPB
is set, two stop bits are used, otherwise one stop bit.
For example, at 110 baud, two stop bits are normally used.
.Pp
If
.Dv CREAD
is set, the receiver is enabled.
Otherwise, no character is received.
Not all hardware supports this bit.
In fact, this flag is pretty silly and if it were not part of the
.Nm
specification it would be omitted.
.Pp
If
.Dv PARENB
is set, parity generation and detection are enabled and a parity
bit is added to each character.
If parity is enabled,
.Dv PARODD
specifies
odd parity if set, otherwise even parity is used.
.Pp
If
.Dv HUPCL
is set, the modem control lines for the port are lowered
when the last process with the port open closes the port or the process
terminates.
The modem connection is broken.
.Pp
If
.Dv CLOCAL
is set, a connection does not depend on the state of the modem
status lines.
If
.Dv CLOCAL
is clear, the modem status lines are
monitored.
.Pp
Under normal circumstances, a call to the open() function waits for
the modem connection to complete.
However, if the
.Dv O_NONBLOCK
flag is set
or if
.Dv CLOCAL
has been set, the open() function returns
immediately without waiting for the connection.
.Pp
If
.Dv CCTS_OFLOW
.Pf ( Dv CRTSCTS )
is set,
transmission is stopped when
.Dv CTS
is lowered and resumed when
.Dv CTS
is raised.
.Pp
If
.Dv MDMBUF
is set then output flow control is controlled by the state
of Carrier Detect.
.Pp
If the object for which the control modes are set is not an asynchronous
serial connection, some of the modes may be ignored; for example, if an
attempt is made to set the baud rate on a network connection to a
terminal on another host, the baud rate may or may not be set on the
connection between that terminal and the machine it is directly connected
to.
.Ss Local Modes
Values of the
.Fa c_lflag
field describe the control of
various functions, and are composed of the following
masks.
.Pp
.Bl -tag -width NOKERNINFO -offset indent -compact
.It Dv ECHOKE
/* visual erase for line kill */
.It Dv ECHOE
/* visually erase chars */
.It Dv ECHOK
/* echo NL after line kill */
.It Dv ECHO
/* enable echoing */
.It Dv ECHONL
/* echo
.Dv NL
even if
.Dv ECHO
is off */
.It Dv ECHOPRT
/* visual erase mode for hardcopy */
.It Dv ECHOCTL
/* echo control chars as ^(Char) */
.It Dv ISIG
/* enable signals
.Dv INTR ,
.Dv QUIT ,
.Dv [D]SUSP
*/
.It Dv ICANON
/* canonicalize input lines */
.It Dv ALTWERASE
/* use alternate
.Dv WERASE
algorithm */
.It Dv IEXTEN
/* enable
.Dv DISCARD
and
.Dv LNEXT
*/
.It Dv EXTPROC
/* external processing */
.It Dv TOSTOP
/* stop background jobs from output */
.It Dv FLUSHO
/* output being flushed (state) */
.It Dv NOKERNINFO
/* no kernel output from
.Dv VSTATUS
*/
.It Dv PENDIN
/* XXX retype pending input (state) */
.It Dv NOFLSH
/* don't flush after interrupt */
.It Dv XCASE
/* canonical upper/lower case */
.El
.Pp
If
.Dv ECHO
is set, input characters are echoed back to the terminal.
If
.Dv ECHO
is not set, input characters are not echoed.
.Pp
If
.Dv ECHOE
and
.Dv ICANON
are set, the
.Dv ERASE
character causes the terminal
to erase the last character in the current line from the display, if
possible.
If there is no character to erase, an implementation may echo
an indication that this was the case or do nothing.
.Pp
If
.Dv ECHOK
and
.Dv ICANON
are set, the
.Dv KILL
character causes
the current line to be discarded and the system echoes the
.Ql \&\en
character after the
.Dv KILL
character.
.Pp
If
.Dv ECHOKE
and
.Dv ICANON
are set, the
.Dv KILL
character causes the current line to be discarded and the system causes
the terminal to erase the line from the display.
.Pp
If
.Dv ECHOPRT
and
.Dv ICANON
are set, the system assumes that the display is a printing device and prints a
backslash and the erased characters when processing
.Dv ERASE
characters, followed by a forward slash.
.Pp
If
.Dv ECHOCTL
is set, the system echoes control characters
in a visible fashion using a caret followed by the control character.
.Pp
If
.Dv ALTWERASE
is set, the system uses an alternative algorithm
for determining what constitutes a word when processing
.Dv WERASE
characters (see
.Dv WERASE ) .
.Pp
If
.Dv ECHONL
and
.Dv ICANON
are set, the
.Ql \&\en
character echoes even if
.Dv ECHO
is not set.
.Pp
If
.Dv ICANON
is set, canonical processing is enabled.
This enables the erase and kill edit functions, and the assembly of input
characters into lines delimited by
.Dv NL ,
.Dv EOF ,
and
.Dv EOL ,
as described in
.Sx "Canonical Mode Input Processing" .
.Pp
If
.Dv ICANON
is not set, read requests are satisfied directly from the input
queue.
A read is not satisfied until at least
.Dv VMIN
bytes have been received or the timeout value
.Dv VTIME
expired between bytes.
The time value represents tenths of seconds.
See
.Sx "Noncanonical Mode Input Processing"
for more details.
.Pp
If
.Dv ISIG
is set, each input character is checked against the special
control characters
.Dv INTR ,
.Dv QUIT ,
and
.Dv SUSP
(job control only).
If an input character matches one of these control characters, the function
associated with that character is performed.
If
.Dv ISIG
is not set, no
checking is done.
Thus these special input functions are possible only
if
.Dv ISIG
is set.
.Pp
If
.Dv IEXTEN
is set, implementation-defined functions are recognized
from the input data.
How
.Dv IEXTEN
being set
interacts with
.Dv ICANON ,
.Dv ISIG ,
.Dv IXON ,
or
.Dv IXOFF
is implementation defined.
If
.Dv IEXTEN
is not set, then
implementation-defined functions are not recognized, and the
corresponding input characters are not processed as described for
.Dv ICANON ,
.Dv ISIG ,
.Dv IXON ,
and
.Dv IXOFF .
.Pp
If
.Dv NOFLSH
is set, the normal flush of the input and output queues
associated with the
.Dv INTR ,
.Dv QUIT ,
and
.Dv SUSP
characters
is not done.
.Pp
If
.Dv XCASE
and
.Dv ICANON
is set, an upper case character is preserved on input if prefixed by
a \e character.
In addition, this prefix is added to upper case characters on output.
.Pp
In addition, the following special character translations are in effect:
.Bl -column "for:" "use:" -offset indent
.It Em "for:" Ta Em "use:"
.It Dv ` Ta \&\e'
.It Dv \&| Ta \&\e!
.It Dv ~ Ta \&\e^
.It Dv { Ta \&\e(
.It Dv } Ta \&\e)
.It Dv \&\e Ta \&\e\e
.El
.Pp
If
.Dv TOSTOP
is set, the signal
.Dv SIGTTOU
is sent to the process group of a process that tries to write to
its controlling terminal if it is not in the foreground process group for
that terminal.
This signal, by default, stops the members of the process group.
Otherwise, the output generated by that process is output to the
current output stream.
Processes that are blocking or ignoring
.Dv SIGTTOU
signals are excepted and allowed to produce output and the
.Dv SIGTTOU
signal
is not sent.
.Pp
If
.Dv NOKERNINFO
is set, the kernel does not produce a status message
when processing
.Dv STATUS
characters (see
.Dv STATUS ) .
.Ss Special Control Characters
The special control characters values are defined by the array
.Fa c_cc .
This table lists the array index, the corresponding special character,
and the system default value.
For an accurate list of the system defaults, consult the header file
.In sys/ttydefaults.h .
.Bl -column "Index Name" "Special Character" -offset indent
.It Em "Index Name" Ta Em "Special Character" Ta Em "Default Value"
.It Dv VEOF Ta EOF Ta \&^D
.It Dv VEOL Ta EOL Ta _POSIX_VDISABLE
.It Dv VEOL2 Ta EOL2 Ta _POSIX_VDISABLE
.It Dv VERASE Ta ERASE Ta \&^? Ql \&\e177
.It Dv VWERASE  Ta WERASE Ta \&^W
.It Dv VKILL Ta KILL Ta \&^U
.It Dv VREPRINT Ta REPRINT Ta \&^R
.It Dv VINTR Ta INTR Ta \&^C
.It Dv VQUIT Ta QUIT Ta \&^\e\e Ql \&\e34
.It Dv VSUSP Ta SUSP Ta \&^Z
.It Dv VDSUSP Ta DSUSP Ta \&^Y
.It Dv VSTART Ta START Ta \&^Q
.It Dv VSTOP Ta STOP Ta \&^S
.It Dv VLNEXT Ta LNEXT Ta \&^V
.It Dv VDISCARD Ta DISCARD Ta \&^O
.It Dv VMIN Ta --- Ta \&1
.It Dv VTIME Ta --- Ta \&0
.It Dv VSTATUS Ta STATUS Ta \&^T
.El
.Pp
If the
value of one of the changeable special control characters (see
.Sx "Special Characters" )
is
.Dv {_POSIX_VDISABLE} ,
that function is disabled; that is, no input
data is recognized as the disabled special character.
If
.Dv ICANON
is
not set, the value of
.Dv {_POSIX_VDISABLE}
has no special meaning for the
.Dv VMIN
and
.Dv VTIME
entries of the
.Fa c_cc
array.
.Pp
The initial values of the flags and control characters
after open() is set according to the values in the header
.In sys/ttydefaults.h .
.Sh SEE ALSO
.Xr tcgetattr 3 ,
.Xr tcsetattr 3
@


1.36
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.35 2011/08/19 19:59:51 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 19 2011 $
d40 1
a40 1
.Fd #include <termios.h>
@


1.35
log
@as with other list types, column lists generally do not need a Pp/-compact
construct;

this also sidesteps what seems to be a problem with mandoc, in that
"-column -compact" seems to mess up the formatting. thus these pages should
now have their lists formatted nicely (i.e. correctly aligned and with indent
applied);

as a side note, the fact that headers are not properly marked up is another
issue which will be addressed separately (a mandoc fix is needed, i think).
i have fudged a few of these to mark up properly, since the workaround does
make sense for some pages.

as another side note, i haven;t fixed man7, as i need to prepare a separate
diff for kristaps and ingo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.34 2010/09/19 12:41:23 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: September 19 2010 $
d804 1
a804 1
.Aq Pa termios.h .
d1503 1
a1503 1
.Aq Pa sys/ttydefaults.h .
d1548 1
a1548 1
.Aq Pa sys/ttydefaults.h .
@


1.34
log
@fix some unbalanced quoting, and a little whitespace removal;
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.33 2010/03/26 19:30:40 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 26 2010 $
d1463 2
a1464 3
.Pp
.Bl -column "for:" "use:" -offset indent -compact
.It Em "for:    use:"
d1466 1
a1466 1
.It Dv | Ta \&\e!
d1504 2
a1505 3
.Pp
.Bl -column "Index Name" "Special Character" -offset indent -compact
.It Em "Index Name	Special Character	Default Value"
@


1.33
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.32 2010/03/01 07:54:07 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 1 2010 $
d487 1
a487 1
.Sx "Output Modes
@


1.32
log
@CCTS_OFLOW is correctly implemented, not unused (as currently documented);
provide a description

from G. Paul Ziemba, freebsd pr docs/144127
ok miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.31 2009/12/26 09:46:17 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: December 26 2009 $
d1459 1
a1459 1
a \\ character.
@


1.31
log
@SIGINTR -> SIGINT; taken from mrg@@netbsd's fix to termios.4 (-r1.33);
ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.30 2009/01/12 07:44:57 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: January 12 2009 $
d1216 1
a1216 1
The
d1219 6
a1224 1
flag is currently unused.
@


1.30
log
@macro fix; from patrick keshishian
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.29 2008/08/21 18:16:13 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 21 2008 $
d829 1
a829 1
/* map BREAK to SIGINTR */
@


1.29
log
@+ECHOK; from Markus Bergkvist
ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.28 2008/05/14 20:12:12 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 14 2008 $
d586 1
a586 1
.Dv NL
@


1.28
log
@ttydefaults.h -> sys/ttydefaults.h;
from Ed Schouten; freebsd -r1.32
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.27 2007/05/31 19:19:52 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d1244 2
@


1.27
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.26 2004/04/27 16:44:09 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d1497 1
a1497 1
.Aq Pa ttydefaults.h .
@


1.26
log
@missing `.It' which was causing START and CT descriptions to be concatenated;
from Juho Juopperi (NetBSD PR 25352);
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.25 2003/08/28 16:58:28 jmc Exp $
d33 1
a33 1
.Dd April 19, 1994
@


1.25
log
@...and still I got it wrong;
put the bracket in the right place, and slight sync with header.
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.24 2003/08/28 14:15:52 jmc Exp $
d645 1
a645 1
.Dv CR
@


1.24
log
@missing bracket;
from Vink Joris
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.23 2003/06/26 19:36:29 jmc Exp $
d1056 2
a1057 2
.Pf ( Ql ^D
on output) */
d1065 1
a1065 1
/* NL performs CR function */
@


1.23
log
@.Er Dv -> .Er
from wiz@@netbsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.22 2003/06/06 10:29:41 jmc Exp $
d1056 1
a1056 1
.Ql \&^D
@


1.22
log
@- section reorder
- some macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.21 2003/06/02 23:30:13 millert Exp $
d183 1
a183 1
.Er Dv EIO
d218 1
a218 1
.Er Dv EIO
@


1.21
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.20 2003/05/05 13:51:58 jmc Exp $
d49 1
a49 1
.Dv CARRIER line.
d177 2
a178 2
.Dv SIGTTIN signal, or if the process group of the reading
process is orphaned, the
d342 1
a342 1
.Dv NL,
d675 1
a675 1
.Dv EOL.
d753 1
a753 1
.Dv {_POSIX_VDISABLE};
d1049 1
a1049 1
.Dv CRMOD)
d1370 1
a1370 1
.Dv NL,
d1373 1
a1373 1
.Dv EOL,
@


1.20
log
@corrections from Leandro Costa.

- corrections to tradenames
- updated URLs
- general typos

thanks Leandro!
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.19 2003/04/09 04:29:03 jmc Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.19
log
@typos;

sti(4): ok mickey@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.18 2002/05/06 23:33:46 millert Exp $
d741 1
a741 1
the percentage of cpu the process is getting, and the resident
@


1.18
log
@Kill/adjust r(login|exec)d? references now that those are no longer in
the tree.
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.17 2001/11/13 13:54:26 mpech Exp $
d91 1
a91 1
is setup to be the controlling terminal; all processes spawned from that
d200 2
a201 1
signal unless one of the following special cases apply:  If
d752 1
a752 1
Special Control Characters.
d1449 1
a1449 1
are not be done.
@


1.17
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.16 2001/10/05 14:45:53 mpech Exp $
d68 1
a68 1
.Xr rlogind 8 ,
@


1.16
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.15 2001/08/20 05:57:55 mpech Exp $
d217 1
a217 1
.Xr write
d385 1
a385 1
.Xr read
@


1.15
log
@Powered by @@mantoya.
o) fix bogus .Xr usage;

millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.14 2001/06/22 12:15:47 mpech Exp $
d50 3
a52 2
until a connection is established.  For most hardware, the presence
of a connection is indicated by the assertion of the hardware
d74 3
a76 2
member of the same session.  This structuring is used in managing groups
of related processes for purposes of
d83 5
a87 4
processes).  The grouping into process groups allows delivering
of signals that stop or start the group as a whole, along with
arbitrating which process group has access to the single controlling
terminal.  The grouping at a higher layer into sessions is to restrict
d89 3
a91 3
resulting from a particular instance of a "login".  Typically, a session
is created when a user logs in, and the login terminal is setup
to be the controlling terminal; all processes spawned from that
d97 6
a102 5
same process group.  A set of processes in the same process group
is collectively referred to as a "job". When the foreground process
group of the terminal is the same as the process group of a particular
job, that job is said to be in the "foreground".  When the process
group of the terminal is different than the process group of
d104 9
a112 9
to be in the "background".  Normally the
shell reads a command and starts the job that implements that
command.  If the command is to be started in the foreground (typical), it
sets the process group of the terminal to the process group
of the started job, waits for the job to complete, and then
sets the process group of the terminal back to its own process
group (it puts itself into the foreground).  If the job is to
be started in the background (as denoted by the shell operator "&"),
it never changes the process group of the terminal and doesn't
d114 2
a115 2
command).  If the job is started in the foreground, the user may
type a key (usually
d127 5
a131 3
session.  Conceptually it means a process group that doesn't have
a parent that could do anything if it were to be stopped.  For example,
the initial login shell is typically in an orphaned process group.
d136 6
a141 5
A terminal may belong to a process as its controlling terminal.  Each
process of a session that has a controlling terminal has the same
controlling terminal.  A terminal may be the controlling terminal for at
most one session.  The controlling terminal for a session is allocated by
the session leader by issuing the
d143 3
a145 2
ioctl.  A controlling terminal
is never acquired by merely opening a terminal device file.
d152 3
a154 2
function call.  A process relinquishes its controlling terminal when it
creates a new session with the
d156 2
a157 3
function; other processes
remaining in the old session that had this terminal as their controlling
terminal continue to have it.
d165 4
a168 3
new session leader.  Subsequent access to the terminal by other processes
in the earlier session will be denied, with attempts to access the
terminal treated as if modem disconnect had been sensed.
d179 1
a179 1
following special cases apply:  If the reading process is ignoring or
d189 2
a190 1
signal is sent.  The default action of the
d209 2
a210 1
signal is not sent.  If
d236 2
a237 1
process.  The system imposes a limit,
d240 3
a242 2
bytes that may be stored in the input queue.  The behavior of the system
when this limit is exceeded depends on the setting of the
d251 2
a252 2
while the input queue is full.  Otherwise, the input queue is flushed
upon receiving the character.
d256 2
a257 2
mode. Additionally,
input characters are processed according to the
d261 5
a265 4
fields.  Such processing can include echoing, which
in general means transmitting input characters immediately back to the
terminal when they are received from the terminal.  This is useful for
terminals that can operate in full-duplex mode.
d280 2
a281 1
blocked until data is available or a signal has been received.  If the
d288 1
a288 2
and the read completes successfully the number of
bytes read is returned.
d304 2
a305 1
of lines.  A line is delimited by a newline
d311 2
a312 1
character.  See the
d321 5
a325 4
received.  Also, no matter how many bytes are requested in the read call,
at most one line is returned.  It is not, however, necessary to
read a whole line at once; any number of bytes, even one, may be
requested in a read without losing information.
d349 3
a351 2
character.  This un-delimited
data makes up the current line.  The
d354 2
a355 1
character in the current line, if there is any.  The
d358 2
a359 1
deletes all data in the current line, if there is any.  The
d372 2
a373 1
lines, and erase and kill processing does not occur.  The values of the
d390 2
a391 1
transmissions.  If
d396 2
a397 1
request is undefined.  The four possible values for
d407 3
a409 2
the first byte is received.  Since it is an inter-byte timer, it is reset
after a byte is received.  The interaction between
d414 3
a416 2
follows:  as soon as one byte is received, the inter-byte timer is
started.  If
d420 2
a421 1
satisfied.  If the timer expires before
d424 2
a425 1
characters received to that point are returned to the user.  Note that if
d428 2
a429 1
not have been enabled unless a byte was received.  In this case
d438 2
a439 2
activated by the receipt of the first byte, or a signal is received.  If
data is in the buffer at the time of the read(), the result is as
d447 2
a448 1
is significant.  A pending read is not satisfied until
d453 2
a454 2
are received), or a signal is received.  A program that uses this case to
read record-based terminal
d464 8
a471 5
timer.  It now serves as a read timer that is activated as soon as the
read function is processed.  A read is satisfied as soon as a single
byte is received or the read timer expires.  Note that in this case if
the timer expires, no bytes are returned.  If the timer does not
expire, the only way the read can be satisfied is if a byte is received.
d476 3
a478 3
the read returns a value of zero, having read no data.  If data is
in the buffer at the time of the read, the timer is started as if
data had been received immediately after the read.
d482 3
a484 2
bytes to be input.  If no characters are available, read returns a
value of zero, having read no data.
d491 2
a492 1
section).  The
d509 2
a510 1
section) is enabled.  Generates a
d514 2
a515 1
terminal.  If
d524 2
a525 1
flag is enabled.  Generates a
d529 2
a530 1
for which the terminal is the controlling terminal.  If
d539 2
a540 2
flag is set.  Erases the last character in the
current line; see
d542 1
a542 2
It does not erase beyond
the start of a line, as delimited by a
d547 2
a548 1
character.  If
d557 2
a558 2
flag is set.  Deletes the entire line, as
delimited by a
d563 2
a564 1
character.  If
d572 2
a573 2
flag is set.  When received, all the bytes
waiting to be read are immediately passed to the
d576 2
a577 1
is discarded.  Thus, if there are no bytes waiting (that
d582 2
a583 1
representing an end-of-file indication.  If
d592 2
a593 1
flag is set.  It is the line delimiter
d598 2
a599 1
flag is set.  Is an additional line delimiter,
d622 4
a625 3
control) flag is set.  Can be used to temporarily
suspend output.  It is useful with fast terminals to
prevent output from disappearing before it can be read.
d639 2
a640 2
control) flag is set.  Can be used to resume output that
has been suspended by a
d642 2
a643 1
character.  If
d655 2
a656 1
Standard {2}.  When
d676 2
a677 1
character.  Same function as
d682 4
a685 2
flag is set.  Erases the last word in the current
line according to one of two algorithms.  If the
d689 2
a690 1
characters.  If
d698 2
a699 2
alphabetic/underscores.  This sounds confusing but turns
out to be quite practical.
d703 2
a704 1
flag is set.  Causes the current input edit line
d718 2
a719 2
flag is set.  Receipt of this character causes the next
character to be taken literally.
d723 2
a724 2
flag is set.  Receipt of this character toggles the flushing
of terminal output.
d728 2
a729 1
flag is set.  Receipt of this character causes a
d732 2
a733 1
terminal.  Also, if the
d772 3
a774 2
process associated with the terminal.  Unless other arrangements have
been made, this causes the controlling process to terminate.
d776 3
a778 3
indicating end of file.  Thus, processes that read a terminal
file and test for end-of-file can terminate appropriately after a
disconnect.
d797 2
a798 1
to be sent to the device and any input to be discarded.  Then, if
d809 2
a810 1
and one array of special characters.  The scalar flag elements are
d861 5
a865 5
more than the time to send one byte.  The entire sequence of zero-valued
bits is interpreted as a single break condition, even if it continues for
a time equivalent to more than one byte.  In contexts other than
asynchronous serial data transmission the definition of a break condition
is implementation defined.
d870 2
a871 1
is, not put on the input queue and therefore not read by any process.  If
d880 2
a881 1
signal to that foreground process group.  If neither
d913 2
a914 1
in error.  To avoid ambiguity in this case, if
d933 2
a934 1
is set, input parity checking is enabled.  If
d938 3
a940 3
without input parity errors.  Note that whether input parity checking is
enabled or disabled is independent of whether parity detection is enabled
or disabled (see
d958 2
a959 1
character.  If
d964 2
a965 1
read).  If
d978 2
a979 1
is set, start/stop output control is enabled.  A received
d984 2
a985 1
restarts output. If
d988 2
a989 1
restart output. When
d996 2
a997 1
read, but merely perform flow control functions.  When
d1008 2
a1009 2
is set, start/stop input control is enabled.  The system shall
transmit one or more
d1020 2
a1021 1
overflowing the input queue.  The precise conditions under which
d1157 2
a1158 1
reception.  The
d1169 2
a1170 1
This size does not include the parity bit, if any.  If
d1172 2
a1173 2
is set, two stop bits are used, otherwise one stop bit.  For example, at
110 baud, two stop bits are normally used.
d1177 4
a1180 4
is set, the receiver is enabled.  Otherwise, no character is
received.
Not all hardware supports this bit.  In fact, this flag
is pretty silly and if it were not part of the
d1182 1
a1182 2
specification
it would be omitted.
d1187 2
a1188 1
bit is added to each character.  If parity is enabled,
d1197 2
a1198 1
terminates.  The modem connection is broken.
d1203 2
a1204 1
status lines.  If
d1210 2
a1211 1
the modem connection to complete.  However, if the
d1297 2
a1298 1
is set, input characters are echoed back to the terminal.  If
d1310 2
a1311 1
possible.  If there is no character to erase, an implementation may echo
d1333 2
a1334 4
character causes
the current line to be discarded and the system causes
the terminal
to erase the line from the display.
d1340 1
a1340 2
are set, the system assumes
that the display is a printing device and prints a
d1370 3
a1372 3
is set, canonical processing is enabled.  This enables the
erase and kill edit functions, and the assembly of input characters into
lines delimited by
d1383 2
a1384 1
queue.  A read is not satisfied until at least
d1386 1
a1386 2
bytes have been
received or the timeout value
d1388 3
a1390 2
expired between bytes.  The time value
represents tenths of seconds.  See
d1402 4
a1405 3
(job control only).  If an input
character matches one of these control characters, the function
associated with that character is performed.  If
d1408 2
a1409 1
checking is done.  Thus these special input functions are possible only
d1417 2
a1418 1
from the input data.  How
d1455 2
a1456 2
a \\ character.  In addition, this prefix is added to upper case
characters on output.
d1476 5
a1480 3
that terminal.  This signal, by default, stops the members of the process
group.  Otherwise, the output generated by that process is output to the
current output stream.  Processes that are blocking or ignoring
d1498 2
a1499 2
and the system default value.  For an accurate list of
the system defaults, consult the header file
d1545 1
a1545 2
after open() is set according to
the values in the header
@


1.14
log
@o) remove unnecessary .Pp;
o) remove unnecessary .Nm args;
o) closes .Bl;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) sort SEE ALSO;
o) better -mdoc style;
o) typos;

aaron@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: termios.4,v 1.13 2000/12/21 21:01:20 aaron Exp $
d260 1
a260 1
.Xr open()
d262 1
a262 1
.Xr fcntl() .
@


1.13
log
@Various repairs, $Id$ tags added, etc.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d1112 1
a1112 1
.Nm termios
@


1.12
log
@various Xr fixes; nordin@@cse.ogi.edu
@
text
@d1 1
@


1.11
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d64 1
a64 1
.Xr getty 2
d66 1
a66 1
.Xr rlogind 2 ,
@


1.10
log
@more .Os cleanup, remove some trailing whitespace, cleanse some .Nm
@
text
@d1108 1
a1108 1
received. 
@


1.9
log
@.Pp macros do not belong immiedately after .Sh section header lines
@
text
@d38 1
a38 1
.Os BSD 4
@


1.8
log
@More man page fixes. Spelling, grammar, some typos. Lots of double-word
occurrences squashed as well.
@
text
@a739 1
.Pp
@


1.7
log
@spelling
@
text
@d114 1
a114 1
and has the affect of stopping the entire job.
d175 2
a176 1
.Va errno set to
d207 2
a208 1
errno set to
d280 2
a281 1
errno set to
d371 1
a371 1
.Dv \&{ Dv MAX_INPUT Ns \&} ,
d504 1
a504 1
the start of a line, as delimited by an
@


1.6
log
@fix ' use
@
text
@d644 1
a644 1
alphabetic/undercores.  This sounds confusing but turns
@


1.5
log
@Change MIN & TIME to VMIN & VTIME; from NetBSD PR 3243
@
text
@d1019 1
a1019 1
.Dv EOT NS 's
@


1.4
log
@xref a few things
@
text
@d349 1
a349 1
.Dv MIN
d351 1
a351 1
.Dv TIME
d357 1
a357 1
.Dv MIN
d362 1
a362 1
.Dv TIME
d366 1
a366 1
.Dv MIN
d371 1
a371 1
.Dv MIN
d373 1
a373 1
.Dv TIME
d376 1
a376 1
.Ss "Case A: MIN > 0, TIME > 0"
d378 1
a378 1
.Dv TIME
d382 1
a382 1
.Dv MIN
d384 1
a384 1
.Dv TIME
d388 1
a388 1
.Dv MIN
d392 1
a392 1
.Dv MIN
d395 1
a395 1
.Dv TIME
d398 1
a398 1
.Pf \&( Dv MIN
d400 1
a400 1
.Dv TIME
d402 1
a402 1
.Dv MIN
d404 1
a404 1
.Dv TIME
d409 1
a409 1
.Ss "Case B: MIN > 0, TIME = 0"
d411 1
a411 1
.Dv TIME
d414 1
a414 1
.Dv MIN
d416 1
a416 1
.Dv MIN
d418 1
a418 1
.Dv MIN
d425 1
a425 1
.Ss "Case C: MIN = 0, TIME > 0"
d427 1
a427 1
.Dv MIN
d429 1
a429 1
.Dv TIME
d438 1
a438 1
.Dv TIME Ns *0.1
d443 1
a443 1
.Ss Case D: MIN = 0, TIME = 0
d1310 1
a1310 1
.Dv MIN
d1313 1
a1313 1
.Dv TIME
@


1.3
log
@Implement more tty flags for better portability from other systems:

	XCASE - canonical input/output processing
	IUCLC - translate uppercase to lowercase on input
	OLCUC - translate lowercase to uppercase on output
	OCRNL - translate carriage return to newline on output
	ONOCR - do not output carriage return at column 0
	ONLRET - newline performs carriage return function

In addition the tty compatibility interface supports LCASE properly.

Look at termios(4) for a more complete description of the above flags.
@
text
@d1468 3
@


1.2
log
@"the the" purge
@
text
@d796 2
d965 5
d991 8
d1021 17
d1216 2
d1371 20
@


1.1
log
@Initial revision
@
text
@d960 1
a960 1
character to be transmitted to the
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
