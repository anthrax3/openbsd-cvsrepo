head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.40
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.28
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.36
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.34
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.32
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.30
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.26
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.24
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.22
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.20
	OPENBSD_5_0:1.15.0.18
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@.\" @;


1.15
date	2007.05.31.19.19.55;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.12.15.14.43;	author mbalmer;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.05.14.18.24;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.11.11.06.20;	author mk;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.31.13.58.58;	author mk;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.14.09.18.38;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.04.08.37.32;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.17.10.04.06;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.12.10.31.22;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.30.19.59.27;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.09.13.26.20;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.01.07.14.14;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.02.20.37.35;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.05.13.46.53;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	99.04.28.23.20.56;	author alex;	state Exp;
branches;
next	;


desc
@@


1.15
log
@convert to new .Dd format;
@
text
@.\" Copyright (c) 1998,1999 Alex Nash
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: wdt.4,v 1.14 2006/12/12 15:14:43 mbalmer Exp $
.\"
.Dd $Mdocdate$
.Dt WDT 4 i386
.Os
.Sh NAME
.Nm wdt
.Nd ICS PCI-WDT500/501 watchdog timer device
.Sh SYNOPSIS
.Cd "wdt0 at pci?"
.Sh DESCRIPTION
The
.Nm
driver provides support for the Industrial Computer Source
PCI-WDT500 and PCI-WDT501 boards.
.Pp
For PCI-WDT500 boards, basic watchdog timer functionality is supported.
For PCI-WDT501 boards, the onboard buzzer will sound when the watchdog
counter expires.
The sensors are not yet supported.
.Pp
If the kernel crashes, the watchdog
timer is not reset and the system will reboot (assuming a proper connection
is made between the WDT50x and motherboard).
Alternatively, the watchdog
can be reinitialized via a userland process which ensures that process
scheduling, not just kernel timeout processing, is still taking place.
See
.Xr watchdog 4
and
.Xr watchdogd 8
for more information.
.Pp
The timer can be configured to have a timeout from 2 to 1800 seconds.
.Sh SEE ALSO
.Xr intro 4 ,
.Xr pci 4 ,
.Xr watchdog 4 ,
.Xr watchdogd 8
.Sh HISTORY
The
.Nm
driver first appeared in
.Ox 2.6 .
@


1.14
log
@Remove the BUGS section here, too.
requested by jmc.
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.13 2006/09/05 14:18:24 jmc Exp $
d27 1
a27 1
.Dd April 25, 1999
@


1.13
log
@- use the "watchdog" keyword where possible
- remove "driver" from elansc's Nd
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.12 2006/06/11 11:06:20 mk Exp $
a68 7
.Sh BUGS
It's unwise to combine
.Nm
with
.Xr ddb 4 ,
since the latter may prevent the former from resetting the
watchdog timeout before it expires.
@


1.12
log
@Update wrt. the wdt0 char device goo removal.

ok jmc
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.11 2006/05/31 13:58:58 mk Exp $
d32 1
a32 1
.Nd ICS PCI-WDT500/501 watchdog timer device driver
@


1.11
log
@Sync with reality. ok jmc
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.10 2005/05/14 09:18:38 jmc Exp $
a34 1
.Cd "option WDT_DISABLE_BUZZER"
d42 3
a44 5
For PCI-WDT501 boards, additional access to the onboard buzzer,
isolated inputs, temperature, and power supply monitors is provided.
To disable the onboard buzzer on PCI-WDT501 boards, add
.Ic option WDT_DISABLE_BUZZER
to your kernel configuration.
d52 5
a56 4
See the
.Dv WIOCSCHED
.Xr ioctl 2
below for more information.
a58 40
.Sh INTERFACE
The
.Nm
driver is controlled via
.Xr ioctl 2
calls to
.Pa /dev/wdt0 .
The following commands are supported:
.Bl -tag -width WIOCGETSTATE
.It Dv WIOCGETSTATE
Returns the current temperature and board status into the
wdt_state structure pointer passed to
.Xr ioctl 2 .
See
.Aq Pa dev/pci/wdt50x.h
for the definition of the wdt_state structure and state bits.
.It Dv WIOCSCHED
Places the process into an infinite loop (interrupted only via a signal)
to guarantee process scheduling.
The driver utilizes the process' context to reinitialize the watchdog timeout.
Should process scheduling fail, the timeout will not be reinitialized and the
system will be rebooted.
Note that it is possible to force a reboot by sending a
.Dv SIGSTOP
signal to a process in
.Dv WIOCSCHED
and waiting for the watchdog timer to expire.
Since
.Dv WIOCSCHED
can have such dramatic consequences, it may only be issued by superuser
processes regardless of the permissions on
.Pa /dev/wdt0 .
.El
.Sh FILES
.Bl -tag -width /usr/include/dev/pci/wdt50x.h -compact
.It Pa /dev/wdt0
watchdog control device
.It Pa /usr/include/dev/pci/wdt50x.h
structure and ioctl definitions
.El
a59 1
.Xr ioctl 2 ,
d62 2
a63 1
.Xr watchdog 4
a69 2
The ioctl interface isn't generic.
.Pp
@


1.10
log
@add back watchdog(4) Xr, as it's still relevant to wdt;
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.9 2005/05/04 08:37:32 jmc Exp $
a48 2
By default the watchdog timer is set to 30 seconds and is refreshed
by the kernel's timeout processing.
d59 2
@


1.9
log
@wdt(4) does not use watchdog(4) framework, so remove Xr;
from grange@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.8 2004/12/17 10:04:06 jmc Exp $
d104 2
a105 1
.Xr pci 4
@


1.8
log
@.Xr watchdog 4
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.7 2004/11/12 10:31:22 jmc Exp $
d104 1
a104 2
.Xr pci 4 ,
.Xr watchdog 4
@


1.7
log
@add wdt(4)'s ddb(4) warning to BUGS;

original diff from michael knudsen;
ok jaredy@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.6 2004/09/30 19:59:27 mickey Exp $
d104 2
a105 1
.Xr pci 4
@


1.6
log
@kill default locators
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.5 2003/07/09 13:26:20 jmc Exp $
d116 1
a116 1
.Xr ddb 4
@


1.5
log
@- fix lists/displays
- quote .Cd's
- add/remove .Pp's as necessary
- fix some .Re/.Rs's
- simplify macros
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.4 2002/10/01 07:14:14 miod Exp $
d34 1
a34 1
.Cd "wdt0 at pci? dev ? function ?"
@


1.4
log
@Manpage cleaning police:
- more and better .Xr
- prefer "option FOO" rather than "options FOO", and put the option
  lines after the device definition lines in SYNOPSIS
- identify these manpages as section 4/i386, not section 4.
- long awaited update to intro(4/i386)
- npx(4/i386) was too NetBSD-ish - we only provide one math emulator
- random touches

ok deraadt@@
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.3 2001/08/02 20:37:35 hugh Exp $
d34 2
a35 2
.Cd wdt0 at pci? dev ? function ?
.Cd option WDT_DISABLE_BUZZER
@


1.3
log
@pet peeve, insure vs ensure
insure is to indemnify against some contingency
ensure is to make sure
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.2 2000/07/05 13:46:53 aaron Exp $
d34 1
a35 1
.Cd wdt0 at pci? dev ? function ?
d102 3
a104 1
.Xr ioctl 2
@


1.2
log
@man4.i386 repairs.
@
text
@d25 1
a25 1
.\"	$OpenBSD: wdt.4,v 1.1 1999/04/28 23:20:56 alex Exp $
d55 1
a55 1
can be reinitialized via a userland process which insures that process
@


1.1
log
@Added wdt driver for the Industrial Computer Source PCI-WDT50x watchdog
timers.
@
text
@d25 1
a25 1
.\"	$OpenBSD$
d45 3
a47 3
To disable the onboard buzzer on PCI-WDT501 boards, add the
.Em WDT_DISABLE_BUZZER
option to your kernel configuration.
d50 2
a51 1
by the kernel's timeout processing.  If the kernel crashes, the watchdog
d53 2
a54 1
is made between the WDT50x and motherboard).  Alternatively, the watchdog
d79 7
a85 5
to guarantee process scheduling.  The driver utilizes the process'
context to reinitialize the watchdog timeout.  Should process
scheduling fail, the timeout will not be reinitialized and the system
will be rebooted.  Note that it is possible to force a reboot by sending
a SIGSTOP signal to a process in
d97 1
a97 1
Watchdog control device.
d99 1
a99 3
Structure and ioctl definitions to interface with the
.Nm
driver.
@

