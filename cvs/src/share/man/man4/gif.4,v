head	1.29;
access;
symbols
	OPENBSD_6_2_BASE:1.29
	OPENBSD_6_1:1.29.0.6
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.27.0.14
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.12
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.27.0.10
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.27.0.8
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.27.0.4
	OPENBSD_5_4_BASE:1.27
	OPENBSD_5_3:1.27.0.2
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.25.0.4
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.2
	OPENBSD_5_0:1.24.0.8
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.6
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.18.0.12
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.8
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.6
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.4
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.17.0.4
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.2
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.8
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.6
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.4
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7;
locks; strict;
comment	@.\" @;


1.29
date	2016.06.07.20.25.48;	author sthen;	state Exp;
branches;
next	1.28;
commitid	dbMM8GJxFHKiOURH;

1.28
date	2015.12.02.10.08.05;	author yasuoka;	state Exp;
branches;
next	1.27;
commitid	nKsnXswItsuxY3Xw;

1.27
date	2012.09.26.17.34.38;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2012.08.23.15.03.36;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2011.12.03.23.01.21;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2009.11.24.19.13.07;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2009.11.24.18.34.43;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2009.11.24.18.06.22;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2009.11.24.14.43.36;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2009.11.23.06.10.12;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2009.11.22.22.01.55;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2007.05.31.19.19.50;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.09.19.03.04;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.17.23.58.36;	author jaredy;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.16.21.54.53;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.23.10.19.18;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.08.10.03.43;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.08.09.51.53;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.22.12.15.45;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.31.00.25.38;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.31.00.19.22;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.18.02.38.22;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.24.13.26.49;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.19.09.43.49;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.19.09.37.35;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.03.21.19.36;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.16.00.04.27;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.16.00.03.02;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	99.12.08.13.58.42;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.29
log
@etherip(4) was introduced in 5.9 as a clean alternative to gif(4)'s layer-2
mode that was enabled when it was added to a bridge(4). Update the manual
pages to direct people towards using etherip(4) for this purpose.
Reads fine to jmc@@, ok mpi@@.

This code will be removed from gif(4) in the future. Switching should be
as simple as renaming the config file (hostname.gifX -> hostname.etheripX),
changing the interface name in hostname.bridgeX, and updating firewall
rules etc. to match - I've tested this with etherip+bridge+isakmpd+ospf
tunnels.
@
text
@.\"	$OpenBSD: gif.4,v 1.28 2015/12/02 10:08:05 yasuoka Exp $
.\"	$KAME: gif.4,v 1.15 2000/04/19 09:39:42 itojun Exp $
.\"
.\" Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the project nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: December 2 2015 $
.Dt GIF 4
.Os
.Sh NAME
.Nm gif
.Nd generic tunnel interface
.Sh SYNOPSIS
.Cd "pseudo-device gif"
.Sh DESCRIPTION
The
.Nm
interface is a generic tunnelling pseudo-device for IPv4 and IPv6.
It can tunnel IPv[46] over IPv[46] with behavior mainly based on
RFC 4213 IPv6-over-IPv4, for a total of four possible combinations.
.Pp
A
.Nm
interface can be created at runtime using the
.Ic ifconfig gif Ns Ar N Ic create
command or by setting up a
.Xr hostname.if 5
configuration file for
.Xr netstart 8 .
.Pp
The
.Nm
interface must be configured with the
addresses used for the outer header.
This can be done by using
.Xr ifconfig 8 Ns 's
.Ic tunnel
command (which uses the
.Dv SIOCSIFPHYADDR
ioctl).
.Pp
The addresses of the inner header must be configured by using
.Xr ifconfig 8
in the normal way.
The routing table can be used to direct packets toward the
.Nm
interface.
.Sh SEE ALSO
.Xr sysctl 3 ,
.Xr etherip 4 ,
.Xr inet 4 ,
.Xr inet6 4 ,
.Xr ipsec 4 ,
.Xr hostname.if 5 ,
.Xr ifconfig 8 ,
.Xr netstart 8
.Sh STANDARDS
.Rs
.%A E. Nordmark
.%A R. Gilligan
.%D October 2005
.%R RFC 4213
.%T Basic Transition Mechanisms for IPv6 Hosts and Routers
.Re
.Sh HISTORY
The
.Nm
device first appeared in WIDE hydrangea IPv6 kit.
.Pp
Previously,
.Nm
supported RFC 3378 EtherIP tunnels over
.Xr bridge 4
interfaces.
This is now handled by
.Xr etherip 4 .
.Sh BUGS
There are many tunnelling protocol specifications,
defined differently from each other.
.Nm
may not interoperate with peers which are based on different specifications,
and are picky about outer header fields.
For example, you cannot usually use
.Nm
to talk with IPsec devices that use IPsec tunnel mode.
.Pp
The current code does not check if the ingress address
.Pq outer source address
configured to
.Nm
makes sense.
Make sure to configure an address which belongs to your node.
Otherwise, your node will not be able to receive packets from the peer,
and your node will generate packets with a spoofed source address.
.Pp
If the outer protocol is IPv6, path MTU discovery for encapsulated packet
may affect communication over the interface.
@


1.28
log
@Remove setting "link2" to the bridge in the EXAMPLE section.  When the
section is describing a way to protect encapsulated packets by IPsec,
"link2" was misleading since it is unrelated to that purpose.

ok markus
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.27 2012/09/26 17:34:38 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 26 2012 $
a44 4
When instead used as a member in a
.Xr bridge 4 ,
it will tunnel Ethernet packets over IPv[46] using RFC 3378 EtherIP
encapsulation (version 3), providing two more combinations.
d55 1
a55 1
For all six modes the
d66 1
a66 2
For the IPv[46] over IPv[46] modes the addresses of the inner
header must be configured by using
a68 7
Note that IPv6 link-local address
.Pq those start with Li fe80::
will be automatically configured whenever possible.
One may need to remove any IPv6 link-local address manually using
.Xr ifconfig 8 ,
to disable the use of IPv6 as inner header, for example when
a pure IPv4-over-IPv6 tunnel is required.
a71 114
.Pp
For the Ethernet-over-IP modes the
.Nm
interface must be made a member of a
.Xr bridge 4 .
The
.Xr sysctl 3
variable
.Dv net.inet.etherip.allow
must be set to 1, unless
.Xr ipsec 4
is being used to protect the traffic.
Ethernet frames are then encapsulated and sent across the network
to another
.Xr bridge 4 ,
which decapsulates the datagram and processes the resulting Ethernet
frame as if it had originated on a normal Ethernet interface.
This effectively allows a layer 2 network to be extended from one point to
another, possibly through the Internet.
This mechanism may be used in
conjunction with IPsec by specifying the appropriate IPsec flows
between the two bridges.
To only protect the bridge traffic between
the two bridges, the transport protocol 97 (etherip) selector may be
used in
.Xr ipsec.conf 5 .
Otherwise, the Ethernet frames will be sent in the clear between the
two bridges.
.Sh EXAMPLES
Given two physically separate Ethernet networks, a bridge can
be used as follows to make them appear as the same local area network.
If bridge1 on network1 has the external IP address 1.2.3.4 on fxp0,
bridge2 on network2 has the external IP address 4.3.2.1 on fxp0, and
both bridges have fxp1 on their internal network (network1 and network2,
respectively), the following configuration can be used to bridge
network1 and network2.
.Pp
First create the bridge interface,
adding the encapsulation interface and internal Ethernet interface
to the bridge interface:
.Bd -literal -offset indent
# ifconfig bridge0 add gif0 add fxp1
.Ed
.Pp
Create and configure the gif0 interface:
.Bd -literal -offset indent
(on bridge 1) # ifconfig gif0 tunnel 1.2.3.4 4.3.2.1
(on bridge 2) # ifconfig gif0 tunnel 4.3.2.1 1.2.3.4
.Ed
.Pp
Create Security Associations (SAs) between the external IP address of each
bridge and matching ingress flows by using the following
.Xr ipsec.conf 5
file on bridge1:
.Bd -literal -offset indent
esp from 1.2.3.4 to 4.3.2.1 spi 0x4242:0x4243 \e
        authkey file "auth1:auth2" enckey file "enc1:enc2"
flow esp proto etherip from 1.2.3.4 to 4.3.2.1
.Ed
.Pp
Now load these rules into the kernel by issuing the
.Xr ipsecctl 8
command:
.Bd -literal -offset indent
# ipsecctl -f ipsec.conf
.Ed
.Pp
Appropriate
.Xr ipsec.conf 5
for bridge2:
.Bd -literal -offset indent
esp from 4.3.2.1 to 1.2.3.4 spi 0x4243:0x4242 \e
        authkey file "auth2:auth1" enckey file "enc2:enc1"
flow esp proto etherip from 4.3.2.1 to 1.2.3.4
.Ed
.Pp
And load them:
.Bd -literal -offset indent
# ipsecctl -f ipsec.conf
.Ed
.Pp
To use dynamic (as opposed to static) keying,
use this
.Xr ipsec.conf 5
on bridge1:
.Bd -literal -offset indent
ike esp proto etherip from 1.2.3.4 to 4.3.2.1
.Ed
.Pp
And on bridge2:
.Bd -literal -offset indent
ike esp proto etherip from 4.3.2.1 to 1.2.3.4
.Ed
.Pp
Bring up the internal interface (if not already up) and encapsulation
interface:
.Bd -literal -offset indent
# ifconfig fxp1 up
# ifconfig gif0 up
.Ed
.Pp
Finally, bring the bridge interface up and allow it to start processing
frames:
.Pp
.Dl # ifconfig bridge0 up
.Pp
The internal interface on each bridge need not have an IP
address: the bridge can function without it.
.Pp
Note:  It is possible to put the above commands in the
.Xr hostname.if 5
files, using the
.Sq !\&
operator.
d74 1
a74 1
.Xr bridge 4 ,
a82 8
.%A R. Housley
.%A S. Hollenbeck
.%D September 2002
.%R RFC 3378
.%T EtherIP: Tunneling Ethernet Frames in IP Datagrams
.Re
.Pp
.Rs
d93 8
a121 10
.Pp
When used in conjunction with a
.Xr bridge 4
interface,
only one bridge tunnel may be operational for every pair of
source/destination addresses.
If more than one
.Nm
interface is configured with the same pair of outer addresses, the
one with the lowest index number will receive all traffic.
@


1.27
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.26 2012/08/23 15:03:36 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: August 23 2012 $
d188 1
a188 1
.Dl # ifconfig bridge0 up link2
@


1.26
log
@after some discussion with sthen, update the rfc reference from 1933 to 4213;
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.25 2011/12/03 23:01:21 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: December 3 2011 $
d207 1
d215 1
@


1.25
log
@Remove an OpenBSD-specific tweak regarding .Xr spacing
and make it compatible with bsd.lv mandoc and with groff-1.21.
This tweak was originally added for compatibility with groff-1.15,
which is no longer needed.

ok jmc@@ kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.24 2009/11/24 19:13:07 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: November 24 2009 $
d44 1
a44 1
RFC 1933 IPv6-over-IPv4, for a total of four possible combinations.
a207 7
.%A R. Gilligan
.%A E. Nordmark
.%B RFC 1933
.%T Transition Mechanisms for IPv6 Hosts and Routers
.%D April 1996
.Re
.Rs
d210 2
a211 1
.%B RFC 3378
d213 7
a219 1
.%D September 2002
@


1.24
log
@more tweaking... ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.23 2009/11/24 18:34:43 jmc Exp $
d64 1
a64 1
.Xr ifconfig 8 's
@


1.23
log
@more tweaking...
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.22 2009/11/24 18:06:22 deraadt Exp $
d47 1
a47 1
it will tunnel Ethernet packets over IPv[46] using RFC 3378 Etherip
d109 1
a109 3
.Xr ipsec.conf 5
or
.Xr isakmpd 8 .
d165 1
a165 2
To use
.Xr isakmpd 8
a212 1
.%O ftp://ftp.isi.edu/in-notes/rfc1933.txt
a219 9
.%O ftp://ftp.isi.edu/in-notes/rfc3378.txt
.Re
.Rs
.%A Sally Floyd
.%A David L. Black
.%A K. K. Ramakrishnan
.%T IPsec Interactions with ECN
.%D December 1999
.%O draft-ietf-ipsec-ecn-02.txt
a220 1
.\"
a224 1
.\"
@


1.22
log
@rototill the various bits here to so that people can see how amazingly
rich the gif featureset really is
ok jmc claudio
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.21 2009/11/24 14:43:36 jmc Exp $
d69 1
a69 1

d80 2
a81 2
a pure IPv4-over-IPv6 tunnel is required .
The routing table can used be to direct packets toward the
d114 1
a114 1
.Sh EXAMPLE
d124 1
a124 1
then add the encapsulation interface and internal Ethernet interface
d150 1
a150 1
        # ipsecctl -f ipsec.conf
d164 1
a164 1
        # ipsecctl -f ipsec.conf
d176 1
a176 1
And that one on bridge2:
d219 8
d262 3
a264 2
When used in conjunction with the
.Xr bridge 4 ,
@


1.21
log
@avoid some duplication in the bridge section; ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.20 2009/11/23 06:10:12 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: November 23 2009 $
d43 6
a48 5
It can tunnel IPv[46] traffic over IPv[46], for a total of four
possible combinations.
The behavior of
.Nm
is mainly based on RFC 1933 IPv6-over-IPv4 configured tunnel.
d59 4
a62 3
To use
.Nm gif ,
the administrator needs to configure the addresses used for the outer header.
d64 3
a66 2
.Xr ifconfig 8 ,
or through the
d68 6
a73 4
ioctl.
The administrator needs to also configure the addresses used for the
inner header, by using
.Xr ifconfig 8 .
d79 3
a81 3
to disable the use of IPv6 as inner header
.Pq e.g., when a pure IPv4-over-IPv6 tunnel is required .
Also, the routing table may be used to route the packets toward the
d85 5
a89 2
If plain Ethernet-over-IP is being used,
the
d93 7
a99 18
must be set to 1.
This is not necessary in cases where Ethernet-over-IP is being
protected using
.Xr ipsec 4 .
.Pp
The
.Nm
interface may also be used as a
.Xr bridge 4
member.
Ethernet frames sent through
.Nm
interfaces are encapsulated inside
.Xr ip 4
or
.Xr ip6 4
datagrams and sent across the network to another bridge, which
decapsulates the datagram and then processes the resulting Ethernet
d101 1
a101 1
This effectively allows a layer-2 network to be extended from one point to
d114 2
a115 2
.Pp
For example, given two physically separate Ethernet networks, the bridge can
@


1.20
log
@- avoid references to self
- remove reference to bridgename.if
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.19 2009/11/22 22:01:55 deraadt Exp $
d31 1
a31 1
.Dd $Mdocdate: November 22 2009 $
d90 1
a90 1
Finally, the
d92 1
a92 1
interface may be used as a
a94 21
Ethernet frames forwarded by the bridge to the
.Nm
interface are encapsulated inside an IPv4 or IPv6 header (depending on
how the interface is configured), with transport protocol number 97
(etherip).
IPv4 or IPv6 packets carrying transport protocol 97 are delivered to
the
.Nm
interface whose "physical" addresses match the source/destination
addresses of the packet (the source address of the packet must match
the destination "physical" address, and vice versa).
.\"
.Sh IPSEC BRIDGE
The bridge can also be used to tunnel Ethernet frames over IPv4 or
IPv6 by using the
.Nm
interface.
In addition to adding Ethernet interfaces,
one or more
.Nm
interfaces are added as members of the bridge.
d99 2
@


1.19
log
@Move information describing the bridge and brconfig behaviour into
the relevant manual pages.  Functionality is described in the (4)
pages, controlling the functionality in ifconfig(8), and the hostname.if
gains the old bridgename.if(5) functionality.
ok claudio jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.18 2007/05/31 19:19:50 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
d110 1
a110 1
.Xr gif 4
d114 1
a114 1
.Xr gif 4 ,
d116 2
a117 3
Ethernet frames sent
through the
.Xr gif 4
a219 2
and
.Xr bridgename.if 5
@


1.18
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.17 2006/05/09 19:03:04 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate$
d107 119
@


1.17
log
@no need to specify a "count" argument: ifconfig(8) handles these
"on demand";

from jan niemann;
ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.16 2004/08/17 23:58:36 jaredy Exp $
d31 1
a31 1
.Dd April 10, 1999
@


1.16
log
@keep all "ifconfig <cloneable> create" examples the same

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.15 2004/07/16 21:54:53 jmc Exp $
d38 1
a38 1
.Cd "pseudo-device gif" Op Ar count
@


1.15
log
@.Xr bridge 4 in SEE ALSO; from Alexey E. Suslikov;
add hostname.if 5 and netstart 8 while i'm at it;
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.14 2004/02/23 10:19:18 jmc Exp $
d52 1
a52 1
.Ic ifconfig gifN create
@


1.14
log
@- document net.inet.etherip.allow; as noted by Graeme Lee
- tidy up references a little
- .Xr sysctl(3) and ipsec(4)

help/ok markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.13 2003/12/08 10:03:43 markus Exp $
d109 1
d113 3
a115 1
.Xr ifconfig 8
@


1.13
log
@mention ifconfig create; sync synopsis like (Op Ar count). with jmc, deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.12 2003/08/08 09:51:53 jmc Exp $
d80 10
d108 1
d111 1
d114 6
a119 6
.%A	R. Gilligan
.%A	E. Nordmark
.%B	RFC 1933
.%T	Transition Mechanisms for IPv6 Hosts and Routers
.%D	April 1996
.%O	ftp://ftp.isi.edu/in-notes/rfc1933.txt
d122 6
a127 6
.%A	Sally Floyd
.%A	David L. Black
.%A	K. K. Ramakrishnan
.%T	"IPsec Interactions with ECN"
.%D	December 1999
.%O	draft-ietf-ipsec-ecn-02.txt
@


1.12
log
@refer to RFCs consistently (RFC XXXX);
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.11 2001/06/22 12:15:45 mpech Exp $
d48 9
@


1.11
log
@o) remove unnecessary .Pp;
o) remove unnecessary .Nm args;
o) closes .Bl;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) sort SEE ALSO;
o) better -mdoc style;
o) typos;

aaron@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.10 2000/12/31 00:25:38 angelos Exp $
d47 1
a47 1
is mainly based on RFC1933 IPv6-over-IPv4 configured tunnel.
d95 1
a95 1
.%B	RFC1933
@


1.10
log
@Update bugs section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.9 2000/12/31 00:19:22 angelos Exp $
d72 1
a72 1
.Nm gif
d77 1
a77 1
.Nm gif
d83 1
a83 1
.Nm gif
d141 1
a141 1
.Nm gif
@


1.9
log
@Some text on use with the bridge.
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.8 2000/10/18 02:38:22 aaron Exp $
d135 9
@


1.8
log
@- Arguments to .Nd should go on the same line as .Nd.
- Standardize Nd format for all Ethernet man pages for easy man -k'ing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.7 2000/04/24 13:26:49 itojun Exp $
d67 1
a67 1
Finally, the routing table may be used to route the packets toward the
d70 17
@


1.7
log
@remove backward compatibilty clause, it did not make sense (tun(4) has no
relationship at all)
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.6 2000/04/19 09:43:49 itojun Exp $
d36 1
a36 2
.Nd
.Tn Generic tunnel interface
@


1.6
log
@use "Op Ar count".
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.5 2000/04/19 09:37:35 itojun Exp $
a70 13
.\"
.Ss Backward compatibility
The
.Nm
interface will capture packets toward a IPv4-in-IPv4 tunnel used by a
.Xr tun 4
multicast tunnel device
.Pq used in MBone community .
For compatibility, IPv4-in-IPv4 traffic will be matched to
.Nm
interfaces first, then sent to
.Xr tun 4
if no match is found.
@


1.5
log
@add bugs section.   reference updates.
@
text
@d1 2
a2 2
.\"	$OpenBSD: gif.4,v 1.4 2000/04/03 21:19:36 aaron Exp $
.\"	$KAME: gif.4,v 1.14 2000/04/19 09:28:50 itojun Exp $
d39 1
a39 1
.Cd "pseudo-device gif 4"
@


1.4
log
@Remove trailing whitespace.
@
text
@d1 2
a2 1
.\"	$OpenBSD: gif.4,v 1.3 2000/01/16 00:04:27 angelos Exp $
a30 2
.\"     KAME Id: gif.4,v 1.2 1999/09/29 15:36:17 itojun Exp
.\"
d88 9
a96 2
.Xr ifconfig 8 ,
RFC1933
d102 2
a103 2
.%D	February 1999
.%O	http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt
d110 22
@


1.3
log
@A bit more cleanup.
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.2 2000/01/16 00:03:02 angelos Exp $
d5 1
a5 1
.\" 
d17 1
a17 1
.\" 
d77 1
a77 1
.Xr tun 4 
@


1.2
log
@Update to not mention gifconfig(8); remove verbiage about ECN and
multidestination modes (we propagate ECN by default, and don't support
multidestination mode).
@
text
@d1 1
a1 1
.\"	$OpenBSD: gif.4,v 1.1 1999/12/08 13:58:42 itojun Exp $
a71 3
.Pp
.Nm
is ECN-friendly.
@


1.1
log
@add faith(4), gif(4) and inet6(4).
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d44 3
a46 3
interface is a generic tunnelling pseudo device for IPv4 and IPv6.
It can tunnel IPv[46] traffic over IPv[46].
Therefore, there can be four possible configurations.
d53 1
a53 2
administrator needs to configure protocol and addresses used for the outer 
header.
d55 2
a56 2
.Xr gifconfig 8 ,
or
d59 1
a59 1
Also, administrator needs to configure protocol and addresses used for the
d65 1
a65 1
You may need to remove IPv6 link-local address manually using
d67 3
a69 3
when you would like to disable the use of IPv6 as inner header
.Pq like when you need pure IPv4-over-IPv6 tunnel .
Finally, use routing table to route the packets toward
d74 1
a74 10
interface can be configued to perform bidirectional tunnel, or
multi-destination tunnel.
This is controlled by
.Dv IFF_LINK0
interface flag.
Also,
.Nm
can be configured to be ECN friendly.
This can be configured by
.Dv IFF_LINK1 .
a75 116
.Ss Bidirectional and multi-destination mode
Usually,
.Nm
implements bidirectional tunnel.
.Xr gifconfig 8
should configure a tunnel ingress point
.Pq this node
and an egress point
.Pq tunnel endpoint ,
and
one
.Nm
interface will tunnel to only a single tunnel endpoint,
and accept from only a single tunnel endpoint.
Source and destination address for outer IP header is always the
ingress and the egress point configued by
.Xr gifconfig 8 .
.Pp
With
.Dv IFF_LINK0
interface flag,
.Nm
can be configured to implement multi-destination tunnel.
With
.Dv IFF_LINK0 ,
it is able to configure egress point to IPv4 wildcard address
.Pq Nm 0.0.0.0
or IPv6 unspecified address
.Pq Nm 0::0 .
In this case, destination address for the outer IP header is
determined based on the routing table setup.
Therefore, one
.Nm
interface can tunnel to multiple destinations.
Also,
.Nm
will accept tunneled traffic from any outer source address.
.Pp
When finding a
.Nm gif
interface from the inbound tunneled traffic,
bidirectional mode interface is preferred than multi-destination mode interface.
For example, if you have the following three
.Nm
interfaces on node A, tunneled traffic from C to A will match the second
.Nm
interface, not the third one.
.Bl -bullet -compact -offset indent
.It
bidirectional, A to B
.It
bidirectional, A to C
.It
multi-destination, A to any
.El
.Pp
Please note that multi-destination mode is far less secure
than bidirectional mode.
Multi-destination mode
.Nm
can accept tunneled packet from anybody,
and can be attacked from a malicious node.
.Pp
.Ss ECN friendly behavior
.Nm
can be configured to be ECN friendly, as described in
.Dv draft-ipsec-ecn-00.txt .
This is turned off by default, and can be turned on by
.Dv IFF_LINK1
interface flag.
.Pp
Without
.Dv IFF_LINK1 ,
.Nm
will show a normal behavior, like described in RFC1933.
This can be summarized as follows:
.Bl -tag -width "Ingress" -offset indent
.It Ingress
Set outer TOS bit to
.Dv 0 .
.It Egress
Drop outer TOS bit.
.El
.Pp
With
.Dv IFF_LINK1 ,
.Nm
will copy ECN bits
.Po
.Dv 0x02
and
.Dv 0x01
on IPv4 TOS byte or IPv6 traffic class byte
.Pc
on egress and ingress, as follows:
.Bl -tag -width "Ingress" -offset indent
.It Ingress
Copy TOS bits except for ECN CE
.Po
masked with
.Dv 0xfe
.Pc
from
inner to outer.
set ECN CE bit to
.Dv 0 .
.It Egress
Use inner TOS bits with some change.
If outer ECN CE bit is
.Dv 1 ,
enable ECN CE bit on the inner.
.El
.Pp
Note that the ECN friendly behavior violates RFC1933.
This should be used in mutual agreement with the tunnel endpoint.
.Pp
d77 1
d79 2
a80 3
interface will capture packets toward IPv4-in-IPv4 tunnel,
which has been used by
.Xr vif 4 
d85 2
a86 2
interfaces first, and then sent to
.Xr vif 4
d92 1
a92 2
.Xr vif 4 ,
.Xr gifconfig 8 ,
@

