head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.12
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@.\" @;


1.8
date	2014.02.15.23.41.19;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.24.04.38.52;	author mlarkin;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.18.15.29.03;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.18.12.40.29;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.18.05.38.20;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2008.06.16.15.21.10;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.16.14.33.16;	author phessler;	state Exp;
branches;
next	;


desc
@@


1.8
log
@say more explicitly where the .Er values show up, and fix the .Sh title;
triggered because Jan Stary noticed that .Sh RETURN VALUES is strange
to have in section 4 manuals;
ok matthieu@@
@
text
@.\"	$OpenBSD: mtrr.4,v 1.7 2014/01/21 03:15:46 schwarze Exp $
.\"
.\" MTRR driver for OpenBSD.
.\" Copyright 1999 Matthieu Herrb <matthieu@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.Dd $Mdocdate: January 21 2014 $
.Dt MTRR 4 amd64
.Os
.Sh NAME
.Nm mtrr
.Nd driver for CPU memory range attributes
.Sh SYNOPSIS
.Cd "pseudo-device mtrr 1"
.Sh DESCRIPTION
The
.Nm
device provides access to the memory range attributes supported by the
MTRRs on AMD64 compatible CPUs.
.Ss IOCTL INTERFACE
Several architectures allow attributes to be associated with ranges of physical
memory.
These attributes can be manipulated via
.Fn ioctl
calls performed on
.Pa /dev/mem
or
.Pa /dev/xf86 .
Declarations and data types are to be found in
.In sys/memrange.h .
.Pp
The specific attributes, and number of programmable ranges may vary between
architectures.
The full set of supported attributes is:
.Bl -tag -width MDF_WRITECOMBINE
.It Dv MDF_UNCACHEABLE
The region is not cached.
.It Dv MDF_WRITECOMBINE
Writes to the region may be combined or performed out of order.
.It Dv MDF_WRITETHROUGH
Writes to the region are committed synchronously.
.It Dv MDF_WRITEBACK
Writes to the region are committed asynchronously.
.It Dv MDF_WRITEPROTECT
The region cannot be written to.
.El
.Pp
Memory ranges are described by
.Bd -literal -offset xxxx
struct mem_range_desc {
	u_int64_t	mr_base;	/\(** physical base address \(**/
	u_int64_t	mr_len;		/\(** physical length of region \(**/
	int		mr_flags;	/\(** attributes of region \(**/
	char		mr_owner[8];
};
.Ed
.Pp
In addition to the region attributes listed above, the following flags
may also be set in the
.Fa mr_flags
field:
.Bl -tag -width MDF_FIXACTIVE
.It Dv MDF_FIXBASE
The region's base address cannot be changed.
.It Dv MDF_FIXLEN
The region's length cannot be changed.
.It Dv MDF_FIRMWARE
The region is believed to have been established by the system firmware.
.It Dv MDF_ACTIVE
The region is currently active.
.It Dv MDF_BOGUS
We believe the region to be invalid or otherwise erroneous.
.It Dv MDF_FIXACTIVE
The region cannot be disabled.
.El
.Pp
Operations are performed using
.Bd -literal -offset xxxx
struct mem_range_op {
	struct mem_range_desc	*mo_desc;
	int			mo_arg[2];
};
.Ed
.Pp
The
.Fa MEMRANGE_GET
ioctl is used to retrieve current memory range attributes.
If
.Fa mo_arg[0]
is set to 0, it will be updated with the total number of memory range
descriptors.
If greater than 0, the array at
.Fa mo_desc
will be filled with a corresponding number of descriptor structures,
or the maximum, whichever is less.
.Pp
The
.Fa MEMRANGE_SET
ioctl is used to add, alter and remove memory range attributes.
A range with the
.Dv MDF_FIXACTIVE
flag may not be removed.
.Pp
.Fa mo_arg[0]
should be set to MEMRANGE_SET_UPDATE to update an existing
or establish a new range, or to MEMRANGE_SET_REMOVE to remove a range.
.Sh ERRORS
On
.Xr ioctl 2
failure,
.Xr errno 2
will be set as follows:
.Bl -tag -width Er
.It Bq Er EOPNOTSUPP
Memory range operations are not supported on this architecture.
.It Bq Er ENXIO
No memory range descriptors are available (e.g., firmware has not enabled
any).
.It Bq Er EINVAL
The memory range supplied as an argument is invalid or overlaps another
range in a fashion not supported by this architecture.
.It Bq Er EBUSY
An attempt to remove or update a range failed because the range is busy.
.It Bq Er ENOSPC
An attempt to create a new range failed due to a shortage of hardware
resources (e.g., descriptor slots).
.It Bq Er ENOENT
An attempt to remove a range failed because no range matches the descriptor
base/length supplied.
.It Bq Er EPERM
An attempt to remove a range failed because the range is permanently
enabled.
.El
.Sh SEE ALSO
.Xr ioctl 2 ,
.Xr mem 4 ,
.Xr pctr 4 ,
.Xr xf86 4 ,
.Xr memconfig 8
.Sh HISTORY
.Nm
support was originally included in
.Fx 3.3 .
@


1.7
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: mtrr.4,v 1.6 2013/08/24 04:38:52 mlarkin Exp $
d10 1
a10 1
.Dd $Mdocdate: August 24 2013 $
d110 6
a115 1
.Sh RETURN VALUES
@


1.6
log
@

Remove reference to "busy ranges" which were never implemented (and now
removed)
@
text
@d1 1
a1 1
.\"	$OpenBSD: mtrr.4,v 1.5 2011/03/18 15:29:03 deraadt Exp $
d10 1
a10 1
.Dd $Mdocdate: March 18 2011 $
d33 1
a33 1
.Aq Pa sys/memrange.h .
@


1.5
log
@sigh
@
text
@d1 1
a1 1
.\"	$OpenBSD: mtrr.4,v 1.2 2008/06/16 15:21:10 jmc Exp $
d10 1
a10 1
.Dd $Mdocdate: June 16 2008 $
a77 3
.It Dv MDF_BUSY
The region is currently owned by another process and may not be
altered.
d105 1
a105 3
flag may not be removed; a range with the
.Dv MDF_BUSY
flag may not be removed or updated.
@


1.4
log
@oh, it should stay
@
text
@d1 146
@


1.3
log
@old style mtrr interface went away
@
text
@a0 146
.\"	$OpenBSD: mtrr.4,v 1.2 2008/06/16 15:21:10 jmc Exp $
.\"
.\" MTRR driver for OpenBSD.
.\" Copyright 1999 Matthieu Herrb <matthieu@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.Dd $Mdocdate: June 16 2008 $
.Dt MTRR 4 amd64
.Os
.Sh NAME
.Nm mtrr
.Nd driver for CPU memory range attributes
.Sh SYNOPSIS
.Cd "pseudo-device mtrr 1"
.Sh DESCRIPTION
The
.Nm
device provides access to the memory range attributes supported by the
MTRRs on AMD64 compatible CPUs.
.Ss IOCTL INTERFACE
Several architectures allow attributes to be associated with ranges of physical
memory.
These attributes can be manipulated via
.Fn ioctl
calls performed on
.Pa /dev/mem
or
.Pa /dev/xf86 .
Declarations and data types are to be found in
.Aq Pa sys/memrange.h .
.Pp
The specific attributes, and number of programmable ranges may vary between
architectures.
The full set of supported attributes is:
.Bl -tag -width MDF_WRITECOMBINE
.It Dv MDF_UNCACHEABLE
The region is not cached.
.It Dv MDF_WRITECOMBINE
Writes to the region may be combined or performed out of order.
.It Dv MDF_WRITETHROUGH
Writes to the region are committed synchronously.
.It Dv MDF_WRITEBACK
Writes to the region are committed asynchronously.
.It Dv MDF_WRITEPROTECT
The region cannot be written to.
.El
.Pp
Memory ranges are described by
.Bd -literal -offset xxxx
struct mem_range_desc {
	u_int64_t	mr_base;	/\(** physical base address \(**/
	u_int64_t	mr_len;		/\(** physical length of region \(**/
	int		mr_flags;	/\(** attributes of region \(**/
	char		mr_owner[8];
};
.Ed
.Pp
In addition to the region attributes listed above, the following flags
may also be set in the
.Fa mr_flags
field:
.Bl -tag -width MDF_FIXACTIVE
.It Dv MDF_FIXBASE
The region's base address cannot be changed.
.It Dv MDF_FIXLEN
The region's length cannot be changed.
.It Dv MDF_FIRMWARE
The region is believed to have been established by the system firmware.
.It Dv MDF_ACTIVE
The region is currently active.
.It Dv MDF_BOGUS
We believe the region to be invalid or otherwise erroneous.
.It Dv MDF_FIXACTIVE
The region cannot be disabled.
.It Dv MDF_BUSY
The region is currently owned by another process and may not be
altered.
.El
.Pp
Operations are performed using
.Bd -literal -offset xxxx
struct mem_range_op {
	struct mem_range_desc	*mo_desc;
	int			mo_arg[2];
};
.Ed
.Pp
The
.Fa MEMRANGE_GET
ioctl is used to retrieve current memory range attributes.
If
.Fa mo_arg[0]
is set to 0, it will be updated with the total number of memory range
descriptors.
If greater than 0, the array at
.Fa mo_desc
will be filled with a corresponding number of descriptor structures,
or the maximum, whichever is less.
.Pp
The
.Fa MEMRANGE_SET
ioctl is used to add, alter and remove memory range attributes.
A range with the
.Dv MDF_FIXACTIVE
flag may not be removed; a range with the
.Dv MDF_BUSY
flag may not be removed or updated.
.Pp
.Fa mo_arg[0]
should be set to MEMRANGE_SET_UPDATE to update an existing
or establish a new range, or to MEMRANGE_SET_REMOVE to remove a range.
.Sh RETURN VALUES
.Bl -tag -width Er
.It Bq Er EOPNOTSUPP
Memory range operations are not supported on this architecture.
.It Bq Er ENXIO
No memory range descriptors are available (e.g., firmware has not enabled
any).
.It Bq Er EINVAL
The memory range supplied as an argument is invalid or overlaps another
range in a fashion not supported by this architecture.
.It Bq Er EBUSY
An attempt to remove or update a range failed because the range is busy.
.It Bq Er ENOSPC
An attempt to create a new range failed due to a shortage of hardware
resources (e.g., descriptor slots).
.It Bq Er ENOENT
An attempt to remove a range failed because no range matches the descriptor
base/length supplied.
.It Bq Er EPERM
An attempt to remove a range failed because the range is permanently
enabled.
.El
.Sh SEE ALSO
.Xr ioctl 2 ,
.Xr mem 4 ,
.Xr pctr 4 ,
.Xr xf86 4 ,
.Xr memconfig 8
.Sh HISTORY
.Nm
support was originally included in
.Fx 3.3 .
@


1.2
log
@missing full stops;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mtrr.4,v 1.1 2008/06/16 14:33:16 phessler Exp $
@


1.1
log
@add the man page for mtrr on amd64.

Reminded by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d10 1
a10 1
.Dd $Mdocdate: May 31 2007 $
d33 1
a33 1
.Aq Pa sys/memrange.h
@

