head	1.41;
access;
symbols
	OPENBSD_6_1:1.41.0.2
	OPENBSD_6_1_BASE:1.41
	OPENBSD_6_0:1.39.0.4
	OPENBSD_6_0_BASE:1.39
	OPENBSD_5_9:1.38.0.2
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.35.0.14
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.35.0.12
	OPENBSD_5_7_BASE:1.35
	OPENBSD_5_6:1.35.0.10
	OPENBSD_5_6_BASE:1.35
	OPENBSD_5_5:1.35.0.8
	OPENBSD_5_5_BASE:1.35
	OPENBSD_5_4:1.35.0.4
	OPENBSD_5_4_BASE:1.35
	OPENBSD_5_3:1.35.0.2
	OPENBSD_5_3_BASE:1.35
	OPENBSD_5_2:1.34.0.2
	OPENBSD_5_2_BASE:1.34
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.2
	OPENBSD_5_0:1.32.0.2
	OPENBSD_5_0_BASE:1.32
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.28.0.10
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.28.0.6
	OPENBSD_4_7_BASE:1.28
	OPENBSD_4_6:1.28.0.8
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.4
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.2
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.26.0.4
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.26.0.2
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.25.0.2
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.23.0.8
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.6
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.4
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.23.0.2
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.22.0.6
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.22.0.4
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	OPENBSD_3_3:1.19.0.2
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.18.0.4
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.12.0.6
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.4
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.41
date	2016.08.18.11.45.18;	author jmc;	state Exp;
branches;
next	1.40;
commitid	L9oMTG7mJPASlDZl;

1.40
date	2016.08.16.22.21.17;	author vgross;	state Exp;
branches;
next	1.39;
commitid	t6hSs1Di1O3UTldP;

1.39
date	2016.06.28.17.32.58;	author jca;	state Exp;
branches;
next	1.38;
commitid	YvDBjhrwkQL4A58z;

1.38
date	2015.10.20.22.08.19;	author jmc;	state Exp;
branches;
next	1.37;
commitid	Vais7sZ0IEOBWk6g;

1.37
date	2015.10.20.20.22.42;	author benno;	state Exp;
branches;
next	1.36;
commitid	bUJ2rTPueuGa0qeo;

1.36
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.35;
commitid	PeV7Ql0T6htfMjhP;

1.35
date	2012.08.24.20.13.03;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2012.07.16.18.05.35;	author markus;	state Exp;
branches;
next	1.33;

1.33
date	2011.09.08.16.43.56;	author giovanni;	state Exp;
branches;
next	1.32;

1.32
date	2011.06.15.13.28.03;	author mikeb;	state Exp;
branches;
next	1.31;

1.31
date	2011.06.15.13.09.19;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2011.06.15.09.13.32;	author mikeb;	state Exp;
branches;
next	1.29;

1.29
date	2011.02.03.16.08.24;	author otto;	state Exp;
branches;
next	1.28;

1.28
date	2008.05.09.08.16.35;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	2008.03.14.15.16.06;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.31.19.19.50;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.11.13.38.00;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2006.10.11.09.50.44;	author henning;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.18.20.33.11;	author jaredy;	state Exp;
branches;
next	1.22;

1.22
date	2003.08.08.09.51.53;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.06.10.29.41;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.02.23.30.12;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.12.04.00.55.08;	author ho;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.13.13.54.25;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2001.10.05.14.45.53;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.04.16.56.51;	author mpech;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.14.09.12.06;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.29.19.44.02;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.21.21.01.16;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.07.09.13.35.46;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.06.05.13.18.32;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.05.16.19.56.25;	author alex;	state Exp;
branches;
next	1.9;

1.9
date	99.03.02.15.30.29;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.02.16.22.16.50;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	98.10.31.23.17.40;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	98.09.06.22.23.19;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.03.10.04.50.47;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.28.11.30.04;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.21.12.57.32;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.02.05.14.40.40;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.41
log
@punctuation fix;
@
text
@.\"	$OpenBSD: ip.4,v 1.40 2016/08/16 22:21:17 vgross Exp $
.\"	$NetBSD: ip.4,v 1.3 1994/11/30 16:22:19 jtc Exp $
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)ip.4	8.2 (Berkeley) 11/30/93
.\"
.Dd $Mdocdate: August 16 2016 $
.Dt IP 4
.Os
.Sh NAME
.Nm ip
.Nd Internet Protocol
.Sh SYNOPSIS
.In sys/types.h
.In sys/socket.h
.In netinet/in.h
.Ft int
.Fn socket AF_INET SOCK_RAW proto
.Sh DESCRIPTION
.Tn IP
is the network layer protocol used
by the Internet protocol family.
Options may be set at the
.Tn IP
level
when using higher-level protocols that are based on
.Tn IP
(such as
.Tn TCP
and
.Tn UDP ) .
It may also be accessed
through a
.Dq raw socket
when developing new protocols, or
special-purpose applications.
.Pp
There are several
.Tn IP-level
.Xr setsockopt 2 Ns / Ns Xr getsockopt 2
options.
.Dv IP_OPTIONS
may be used to provide
.Tn IP
options to be transmitted in the
.Tn IP
header of each outgoing packet
or to examine the header options on incoming packets.
.Tn IP
options may be used with any socket type in the Internet family.
The format of
.Tn IP
options to be sent is that specified by the
.Tn IP
protocol specification (RFC 791), with one exception:
the list of addresses for Source Route options must include the first-hop
gateway at the beginning of the list of gateways.
The first-hop gateway address will be extracted from the option list
and the size adjusted accordingly before use.
To disable previously specified options,
use a zero-length buffer:
.Bd -literal -offset indent
setsockopt(s, IPPROTO_IP, IP_OPTIONS, NULL, 0);
.Ed
.Pp
.Dv IP_TOS
and
.Dv IP_TTL
may be used to set the type-of-service and time-to-live
fields in the
.Tn IP
header for
.Dv SOCK_STREAM ,
.Dv SOCK_DGRAM
and
.Dv SOCK_RAW
sockets.
For example,
.Bd -literal -offset indent
int tos = IPTOS_LOWDELAY;       /* see <netinet/ip.h> */
setsockopt(s, IPPROTO_IP, IP_TOS, &tos, sizeof(tos));

int ttl = 60;                   /* max = 255 */
setsockopt(s, IPPROTO_IP, IP_TTL, &ttl, sizeof(ttl));
.Ed
.Pp
.Dv IP_IPDEFTTL
can be used to retrieve the system wide default TTL.
.Pp
If the
.Dv IP_RECVDSTADDR
option is enabled on a
.Dv SOCK_DGRAM
socket,
the
.Xr recvmsg 2
call will return the destination
.Tn IP
address for a
.Tn UDP
datagram.
The
.Va msg_control
field in the
.Vt msghdr
structure points to a buffer that contains a
.Vt cmsghdr
structure followed by the
.Tn IP
address.
The
.Vt cmsghdr
fields have the following values:
.Bd -literal -offset indent
cmsg_len = CMSG_LEN(sizeof(struct in_addr))
cmsg_level = IPPROTO_IP
cmsg_type = IP_RECVDSTADDR
.Ed
.Pp
If the
.Dv IP_RECVDSTPORT
option is enabled on a
.Dv SOCK_DGRAM
socket,
the
.Xr recvmsg 2
call will return the destination
port for a
.Tn UDP
datagram.
The
.Va msg_control
field in the
.Vt msghdr
structure points to a buffer that contains a
.Vt cmsghdr
structure followed by the port in 16-bit network byte order.
The
.Vt cmsghdr
fields have the following values:
.Bd -literal -offset indent
cmsg_len = CMSG_LEN(sizeof(u_int16_t))
cmsg_level = IPPROTO_IP
cmsg_type = IP_RECVDSTPORT
.Ed
.Pp
If the
.Dv IP_RECVTTL
option is enabled on a
.Dv SOCK_DGRAM
or
.Dv SOCK_RAW
socket, the
.Xr recvmsg 2
call will return the
.Tn TTL
of the received datagram.
The
.Va msg_control
field in the
.Vt msghdr
structure points to a buffer that contains a
.Vt cmsghdr
structure followed by the
.Tn TTL
value.
The
.Vt cmsghdr
fields have the following values:
.Bd -literal -offset indent
cmsg_len = CMSG_LEN(sizeof(u_int8_t))
cmsg_level = IPPROTO_IP
cmsg_type = IP_RECVTTL
.Ed
.Pp
The
.Dv IP_MINTTL
option may be used on TCP and UDP sockets to discard packets with a TTL
lower than the option value.
This can be used to implement the
.Em Generalized TTL Security Mechanism (GTSM)
according to RFC 5082.
To discard all packets with a TTL lower than 255:
.Bd -literal -offset indent
int minttl = 255;
setsockopt(s, IPPROTO_IP, IP_MINTTL, &minttl, sizeof(minttl));
.Ed
.Pp
If the
.Dv IP_IPSECFLOWINFO
option is enabled on a
.Dv SOCK_DGRAM
socket,
the
.Xr recvmsg 2
call will return information identifying the incoming
IPsec SA for a
.Tn UDP
datagram.
The
.Va msg_control
field in the
.Vt msghdr
structure points to a buffer that contains a
.Vt cmsghdr
structure followed by flow information in 32-bit network byte order.
When this information is passed to a
.Xr sendmsg 2
call the ID of the incoming SA will be used for looking up the
outgoing SA for the
.Tn UDP
datagram.
The
.Vt cmsghdr
fields for
.Xr recvmsg 2
and
.Xr sendmsg 2
have the following values:
.Bd -literal -offset indent
cmsg_len = CMSG_LEN(sizeof(u_int32_t))
cmsg_level = IPPROTO_IP
cmsg_type = IP_IPSECFLOWINFO
.Ed
.Pp
The
.Dv IP_PORTRANGE
option causes the default allocation policy for when the kernel is asked
to choose a free port number.
Three choices are available:
.Pp
.Bl -tag -width IP_PORTRANGE_DEFAULT -compact -offset indent
.It Dv IP_PORTRANGE_DEFAULT
The regular range of non-reserved ports.
.It Dv IP_PORTRANGE_HIGH
A high range, for fun.
.It Dv IP_PORTRANGE_LOW
Reserved ports; between 600 and 1023.
.El
.Pp
If the
.Dv IP_RECVRTABLE
option is enabled on a
.Dv SOCK_DGRAM
socket,
the
.Xr recvmsg 2
call will return the source routing domain for a
.Tn UDP
datagram.
The
.Va msg_control
field in the
.Vt msghdr
structure points to a buffer that contains a
.Vt cmsghdr
structure followed by the routing table ID.
The
.Vt cmsghdr
fields have the following values:
.Bd -literal -offset indent
cmsg_len = CMSG_LEN(sizeof(u_int))
cmsg_level = IPPROTO_IP
cmsg_type = IP_RECVRTABLE
.Ed
.Pp
When sending on a
.Dv SOCK_DGRAM
socket with
.Xr sendmsg 2 ,
the source address to be used can be passed as ancillary data
with a type code of
.Dv IP_SENDSRCADDR .
The
.Va msg_control
field in the
.Vt msghdr
structure should point to a buffer that contains a
.Vt cmsghdr
structure followed by the requested source address.
The
.Vt cmsghdr
fields should have the following values:
.Bd -literal -offset indent
cmsg_len = CMSG_LEN(sizeof(struct in_addr))
cmsg_level = IPPROTO_IP
cmsg_type = IP_SENDSRCADDR
.Ed
.Pp
The same checks and restrictions as for
.Xr bind 2
apply, unless the socket is bound to
.Dv INADDR_ANY .
In this case, there is no source address overlap check.
.Ss "Multicast Options"
.Tn IP
multicasting is supported only on
.Dv AF_INET
sockets of type
.Dv SOCK_DGRAM
and
.Dv SOCK_RAW ,
and only on networks where the interface
driver supports multicasting.
.Pp
The
.Dv IP_MULTICAST_TTL
option changes the time-to-live (TTL)
for outgoing multicast datagrams
in order to control the scope of the multicasts:
.Bd -literal -offset indent
u_char ttl;	/* range: 0 to 255, default = 1 */
setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl));
.Ed
.Pp
Datagrams with a TTL of 1 are not forwarded beyond the local network.
Multicast datagrams with a TTL of 0 will not be transmitted on any network,
but may be delivered locally if the sending host belongs to the destination
group and if multicast loopback has not been disabled on the sending socket
(see below).
Multicast datagrams with TTL greater than 1 may be forwarded
to other networks if a multicast router is attached to the local network.
.Pp
For hosts with multiple interfaces, each multicast transmission is
sent from the primary network interface.
The
.Dv IP_MULTICAST_IF
option overrides the default for
subsequent transmissions from a given socket:
.Bd -literal -offset indent
struct in_addr addr;
setsockopt(s, IPPROTO_IP, IP_MULTICAST_IF, &addr, sizeof(addr));
.Ed
.Pp
where
.Va addr
is the local
.Tn IP
address of the desired interface or
.Dv INADDR_ANY
to specify the default interface.
An interface's local IP address and multicast capability can
be obtained via the
.Dv SIOCGIFCONF
and
.Dv SIOCGIFFLAGS
.Xr ioctl 2 Ns 's .
Normal applications should not need to use this option.
.Pp
If a multicast datagram is sent to a group to which the sending host itself
belongs (on the outgoing interface), a copy of the datagram is, by default,
looped back by the IP layer for local delivery.
The
.Dv IP_MULTICAST_LOOP
option gives the sender explicit control
over whether or not subsequent datagrams are looped back:
.Bd -literal -offset indent
u_char loop;	/* 0 = disable, 1 = enable (default) */
setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, &loop, sizeof(loop));
.Ed
.Pp
This option
improves performance for applications that may have no more than one
instance on a single host (such as a router daemon), by eliminating
the overhead of receiving their own transmissions.
It should generally not
be used by applications for which there may be more than one instance on a
single host (such as a conferencing program) or for which the sender does
not belong to the destination group (such as a time querying program).
.Pp
A multicast datagram sent with an initial TTL greater than 1 may be delivered
to the sending host on a different interface from that on which it was sent,
if the host belongs to the destination group on that other interface.
The loopback control option has no effect on such delivery.
.Pp
A host must become a member of a multicast group before it can receive
datagrams sent to the group.
To join a multicast group, use the
.Dv IP_ADD_MEMBERSHIP
option:
.Bd -literal -offset indent
struct ip_mreq mreq;
setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
.Ed
.Pp
where
.Fa mreq
is the following structure:
.Bd -literal -offset indent
struct ip_mreq {
    struct in_addr imr_multiaddr; /* multicast group to join */
    struct in_addr imr_interface; /* interface to join on */
}
.Ed
.Pp
.Va imr_interface
should
be
.Dv INADDR_ANY
to choose the default multicast interface,
or the
.Tn IP
address of a particular multicast-capable interface if
the host is multihomed.
Membership is associated with a single interface;
programs running on multihomed hosts may need to
join the same group on more than one interface.
Up to
.Dv IP_MAX_MEMBERSHIPS
(currently 4095) memberships may be added on a
single socket.
.Pp
To drop a membership, use:
.Bd -literal -offset indent
struct ip_mreq mreq;
setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, &mreq, sizeof(mreq));
.Ed
.Pp
where
.Fa mreq
contains the same values as used to add the membership.
Memberships are dropped when the socket is closed or the process exits.
.\"-----------------------
.Ss "Raw IP Sockets"
Raw
.Tn IP
sockets are connectionless,
and are normally used with the
.Xr sendto 2
and
.Xr recvfrom 2
calls, though the
.Xr connect 2
call may also be used to fix the destination for future
packets (in which case the
.Xr read 2
or
.Xr recv 2
and
.Xr write 2
or
.Xr send 2
system calls may be used).
.Pp
If
.Fa proto
is 0, the default protocol
.Dv IPPROTO_RAW
is used for outgoing
packets, and only incoming packets destined for that protocol
are received.
If
.Fa proto
is non-zero, that protocol number will be used on outgoing packets
and to filter incoming packets.
.Pp
Outgoing packets automatically have an
.Tn IP
header prepended to
them (based on the destination address and the protocol
number the socket is created with),
unless the
.Dv IP_HDRINCL
option has been set.
Incoming packets are received with
.Tn IP
header and options intact.
.Pp
.Dv IP_HDRINCL
indicates the complete IP header is included with the data
and may be used only with the
.Dv SOCK_RAW
type.
.Bd -literal -offset indent
#include <netinet/ip.h>

int hincl = 1;                  /* 1 = on, 0 = off */
setsockopt(s, IPPROTO_IP, IP_HDRINCL, &hincl, sizeof(hincl));
.Ed
.Pp
Unlike previous
.Bx
releases, the program must set all
the fields of the IP header, including the following:
.Bd -literal -offset indent
ip->ip_v = IPVERSION;
ip->ip_hl = hlen >> 2;
ip->ip_id = 0;  /* 0 means kernel set appropriate value */
ip->ip_off = htons(offset);
ip->ip_len = htons(len);
.Ed
.Pp
Additionally note that starting with
.Ox 2.1 ,
the
.Va ip_off
and
.Va ip_len
fields are in network byte order.
If the header source address is set to
.Dv INADDR_ANY ,
the kernel will choose an appropriate address.
.Sh DIAGNOSTICS
A socket operation may fail with one of the following errors returned:
.Bl -tag -width [EADDRNOTAVAIL]
.It Bq Er EISCONN
when trying to establish a connection on a socket which
already has one, or when trying to send a datagram with the destination
address specified and the socket is already connected;
.It Bq Er ENOTCONN
when trying to send a datagram, but
no destination address is specified, and the socket hasn't been
connected;
.It Bq Er ENOBUFS
when the system runs out of memory for
an internal data structure;
.It Bq Er EADDRNOTAVAIL
when an attempt is made to create a
socket with a network address for which no network interface
exists.
.It Bq Er EACCES
when an attempt is made to create
a raw IP socket by a non-privileged process.
.El
.Pp
The following errors specific to
.Tn IP
may occur when setting or getting
.Tn IP
options:
.Bl -tag -width EADDRNOTAVAILxx
.It Bq Er EINVAL
An unknown socket option name was given.
.It Bq Er EINVAL
The IP option field was improperly formed;
an option field was shorter than the minimum value
or longer than the option buffer provided.
.El
.Sh SEE ALSO
.Xr getsockopt 2 ,
.Xr ioctl 2 ,
.Xr recv 2 ,
.Xr send 2 ,
.Xr icmp 4 ,
.Xr inet 4 ,
.Xr netintro 4
.Sh HISTORY
The
.Nm
protocol appeared in
.Bx 4.2 .
@


1.40
log
@Add IP_SENDSRCADDR cmsg for UDP sockets. As suggested by sthen@@,
IP_SENDSRCADDR == IP_RECVDSTADDR.

OK sthen@@ jca@@ bluhm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.39 2016/06/28 17:32:58 jca Exp $
d33 1
a33 1
.Dd $Mdocdate: June 28 2016 $
d296 3
a298 2
.Xr sendmsg 2
, the source address to be used can be passed as ancillary data with a type code of
@


1.39
log
@IP_MINTTL and IPV6_MINHOPCOUNT work on TCP and UDP sockets

Input from and ok bluhm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.38 2015/10/20 22:08:19 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: October 20 2015 $
d292 28
@


1.38
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.37 2015/10/20 20:22:42 benno Exp $
d204 2
a205 3
option may be used on
.Dv SOCK_STREAM
sockets to discard packets with a TTL lower than the option value.
@


1.37
log
@add a new getsockopt option IP_IPDEFTTL to retrieve the default ttl.
this can be used as an alternative to sysctl net.inet.ip.ttl, in
programs that use pledge().
ok reyk@@, "Like this" deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.36 2015/09/10 17:55:21 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: September 10 2015 $
d99 1
a99 2
.Dv SOCK_STREAM
,
d114 1
a114 1
can be used to retrieve the system wide default ttl.
@


1.36
log
@use .In rather than .Fd #include
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.35 2012/08/24 20:13:03 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 24 2012 $
d100 2
d103 1
a103 1
.Dv SOCK_DGRAM
d113 3
@


1.35
log
@- rfc 5082 replaces rfc 3682; ok claudio
- flesh out SEE ALSO in bgpd.8
- fix a formatting warning in relayd.conf.5
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.34 2012/07/16 18:05:35 markus Exp $
d33 1
a33 1
.Dd $Mdocdate: July 16 2012 $
d40 3
a42 3
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
.Fd #include <netinet/in.h>
@


1.34
log
@add IP_IPSECFLOWINFO option to sendmsg() and recvmsg(), so npppd(4)
can use this to select the IPsec tunnel for sending L2TP packets.
this fixes Windows (always binding to 1701) and Android clients
(negotiating wildcard flows); feedback mpf@@ and yasuoka@@;
ok henning@@ and yasuoka@@; ok jmc@@ for the manpage
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.33 2011/09/08 16:43:56 giovanni Exp $
d33 1
a33 1
.Dd $Mdocdate: September 8 2011 $
d205 1
a205 1
according to RFC 3682.
@


1.33
log
@
sys/types.h is needed before sys/socket.h
spotted by Thomas de Grivel, ok matthew@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.32 2011/06/15 13:28:03 mikeb Exp $
d33 1
a33 1
.Dd $Mdocdate: June 15 2011 $
d210 37
@


1.32
log
@oops. some unrelated junk has slipped in
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.31 2011/06/15 13:09:19 jmc Exp $
d40 1
@


1.31
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.30 2011/06/15 09:13:32 mikeb Exp $
a249 9
.Ed
.Pp
The
.Dv SO_RTABLE
option can get or set a routing domain of the socket.
The actual routing table number is supplied as an integer argument:
.Bd -literal -offset indent
int rtid = 1;
setsockopt(s, IPPROTO_IP, SO_RTABLE, &rtid, sizeof(rtid));
@


1.30
log
@Document IP_RECVRTABLE
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.29 2011/02/03 16:08:24 otto Exp $
d33 1
a33 1
.Dd $Mdocdate: February 3 2011 $
d224 1
a224 1
.Ed
d242 1
a242 1
structure followed by the routing table id.
d250 1
a250 1
.El
@


1.29
log
@mention the right type for IP_RECVTTL; ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.28 2008/05/09 08:16:35 markus Exp $
d33 1
a33 1
.Dd $Mdocdate: May 9 2008 $
d224 26
d251 9
@


1.28
log
@add IP_RECVDSTPORT; ok jmc, beck
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.27 2008/03/14 15:16:06 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 14 2008 $
d192 1
a192 1
cmsg_len = CMSG_LEN(sizeof(struct in_addr))
@


1.27
log
@IP_MAX_MEMBERSHIPS was bumped to 4095 in -r1.74; from Matthew Dempsky
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.26 2007/05/31 19:19:50 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d139 27
@


1.26
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.25 2006/10/11 13:38:00 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d313 1
a313 1
(currently 20) memberships may be added on a
@


1.25
log
@tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.24 2006/10/11 09:50:44 henning Exp $
d33 1
a33 1
.Dd November 30, 1993
@


1.24
log
@document IP_RECVTTL and IP_MINTTL
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.23 2004/12/18 20:33:11 jaredy Exp $
d178 1
a178 1
To discard all packets with a ttl lower than 255, 
@


1.23
log
@cleanup and indent examples.  ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.22 2003/08/08 09:51:53 jmc Exp $
d139 43
@


1.22
log
@refer to RFCs consistently (RFC XXXX);
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.21 2003/06/06 10:29:41 jmc Exp $
d87 1
a87 1
.Bd -literal
d103 1
a103 1
.Bd -literal
d123 7
a129 2
The msg_control field in the msghdr structure points to a buffer
that contains a cmsghdr structure followed by the
d132 4
a135 2
The cmsghdr fields have the following values:
.Bd -literal
d141 2
a142 1
The IP_PORTRANGE
d146 3
a148 2
.Bl -tag -width IP_PORTRANGE_DEFAULT
.It IP_PORTRANGE_DEFAULT
d150 1
a150 1
.It IP_PORTRANGE_HIGH
d152 1
a152 1
.It IP_PORTRANGE_LOW
d171 1
a171 1
.Bd -literal
d175 1
a175 1
.sp
d190 1
a190 1
.Bd -literal
d194 4
a197 2
.sp
where "addr" is the local
d207 1
a207 1
ioctls.
d217 1
a217 1
.Bd -literal
d221 1
a221 1
.sp
d241 1
a241 1
.Bd -literal
d245 1
a245 1
.sp
d249 1
a249 1
.Bd -literal
d255 2
a256 2
.sp
.Dv imr_interface
d274 1
a274 1
.Bd -literal
d278 1
a278 1
.sp
d334 1
a334 1
.Bd -literal
d340 1
a340 1
.sp
d342 1
a342 1
.Tn BSD
d345 1
a345 1
.Bd -literal
a351 1
.sp .5
d355 5
a359 1
the ip_off and ip_len fields are in network byte order.
d401 1
@


1.21
log
@- section reorder
- some macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.20 2003/06/02 23:30:12 millert Exp $
d80 1
a80 1
protocol specification (RFC-791), with one exception:
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.19 2002/12/04 00:55:08 ho Exp $
d153 1
a153 1
.Dv SOCK_RAW,
d347 1
a347 1
.Dv INADDR_ANY,
@


1.19
log
@The IPTOS_ #defines live in netinet/ip.h. millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.18 2001/11/13 13:54:25 mpech Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.18
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.17 2001/10/05 14:45:53 mpech Exp $
d108 1
a108 1
int tos = IPTOS_LOWDELAY;       /* see <netinet/in.h> */
@


1.17
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.16 2001/10/04 16:56:51 mpech Exp $
d121 1
a121 1
.Xr recvmsg
d282 1
a282 1
.Xr sendto
d284 1
a284 1
.Xr recvfrom
@


1.16
log
@we don't like .Pp and blank lines before/after .Ss;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.15 2001/05/14 09:12:06 markus Exp $
d105 2
a106 1
sockets. For example,
d140 2
a141 1
to choose a free port number.  Three choices are available:
d175 2
a176 1
(see below).  Multicast datagrams with TTL greater than 1 may be forwarded
d218 2
a219 1
the overhead of receiving their own transmissions.  It should generally not
d226 2
a227 2
if the host belongs to the destination group on that other interface.  The
loopback control option has no effect on such delivery.
d230 2
a231 1
datagrams sent to the group.  To join a multicast group, use the
@


1.15
log
@cmsg_len = CMSG_LEN(sizeof(struct in_addr)) is correct, ok itojun@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.14 2001/01/29 19:44:02 aaron Exp $
a148 1
.Pp
a272 1
.Pp
@


1.14
log
@Fix mdoc botch; markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ip.4,v 1.13 2000/12/21 21:01:16 aaron Exp $
d132 1
a132 1
cmsg_len = sizeof(struct in_addr)
@


1.13
log
@Various repairs, $Id$ tags added, etc.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d69 1
a69 2
.Xr setsockopt 2 / Ns
.Xr getsockopt 2
@


1.12
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
@


1.11
log
@more .Os cleanup, remove some trailing whitespace, cleanse some .Nm
@
text
@d48 1
a48 1
.Tn IP 
d71 1
a71 1
.Dv IP_OPTIONS 
d83 1
a83 1
.Tn IP 
d95 3
a97 3
.Dv IP_TOS 
and 
.Dv IP_TTL 
d99 6
a104 6
fields in the 
.Tn IP 
header for 
.Dv SOCK_STREAM 
and 
.Dv SOCK_DGRAM 
d114 4
a117 4
If the 
.Dv IP_RECVDSTADDR 
option is enabled on a 
.Dv SOCK_DGRAM 
d121 9
a129 9
call will return the destination 
.Tn IP 
address for a 
.Tn UDP 
datagram. 
The msg_control field in the msghdr structure points to a buffer 
that contains a cmsghdr structure followed by the 
.Tn IP 
address. 
d150 3
a152 3
.Tn IP 
multicasting is supported only on 
.Dv AF_INET 
d154 2
a155 2
.Dv SOCK_DGRAM 
and 
d160 2
a161 2
The 
.Dv IP_MULTICAST_TTL 
d177 1
a177 1
For hosts with multiple interfaces, each multicast transmission is 
d179 3
a181 3
The 
.Dv IP_MULTICAST_IF 
option overrides the default for 
d188 2
a189 2
where "addr" is the local 
.Tn IP 
d191 1
a191 1
.Dv INADDR_ANY 
d193 6
a198 6
An interface's local IP address and multicast capability can 
be obtained via the 
.Dv SIOCGIFCONF 
and 
.Dv SIOCGIFFLAGS 
ioctls. 
d203 4
a206 4
looped back by the IP layer for local delivery. 
The 
.Dv IP_MULTICAST_LOOP 
option gives the sender explicit control 
d226 3
a228 3
A host must become a member of a multicast group before it can receive 
datagrams sent to the group.  To join a multicast group, use the 
.Dv IP_ADD_MEMBERSHIP 
d235 1
a235 1
where 
d245 1
a245 1
.Dv imr_interface 
d247 5
a251 5
be 
.Dv INADDR_ANY 
to choose the default multicast interface, 
or the 
.Tn IP 
d254 5
a258 5
Membership is associated with a single interface; 
programs running on multihomed hosts may need to 
join the same group on more than one interface.  
Up to 
.Dv IP_MAX_MEMBERSHIPS 
d268 1
a268 1
where 
d270 2
a271 2
contains the same values as used to add the membership. 
Memberships are dropped when the socket is closed or the process exits.  
d285 1
a285 1
packets (in which case the 
d289 1
a289 1
and 
d312 2
a313 2
unless the 
.Dv IP_HDRINCL 
d319 1
a319 1
.Dv IP_HDRINCL 
d321 2
a322 2
and may be used only with the 
.Dv SOCK_RAW 
d331 2
a332 2
Unlike previous 
.Tn BSD 
d347 1
a347 1
If the header source address is set to 
d365 1
a365 1
when an attempt is made to create a 
@


1.10
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d38 1
a38 1
.Os BSD 4.2
@


1.9
log
@EACESS -> EACCES; garath@@code.ridgefield.org
@
text
@d388 1
a389 2
.Xr recv 2 ,
.Xr netintro 4 ,
d391 2
a392 1
.Xr inet 4
@


1.8
log
@IP is not a transport layer protocol
@
text
@d368 1
a368 1
.It Bq Er EACESS
@


1.7
log
@Fix netintro/intro muck-up.
@
text
@d49 1
a49 1
is the transport layer protocol used
@


1.6
log
@More man page fixes. Spelling, grammar, some typos. Lots of double-word
occurrences squashed as well.
@
text
@d390 1
a390 1
.Xr intro 4 ,
@


1.5
log
@use .Ox
@
text
@d215 1
a215 1
instance on a single host (such as a router demon), by eliminating
@


1.4
log
@doc IP_PORTRANGE
@
text
@d345 1
a345 1
.Tn OpenBSD 2.1
@


1.3
log
@blank line
@
text
@d136 12
@


1.2
log
@document that ip_off and ip_len are now in network byte order
@
text
@d331 1
@


1.1
log
@Initial revision
@
text
@d327 2
a328 1
ip->ip_off = offset;
d331 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

