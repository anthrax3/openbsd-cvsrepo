head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.14
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.16
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.12
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.10
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10;
locks; strict;
comment	@.\" @;


1.13
date	2013.07.16.16.05.49;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.22.21.52.53;	author weerd;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.31.19.19.50;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.30.22.35.42;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.30.20.21.42;	author marco;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.21.07.05.53;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.27.16.55.04;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.21.17.19.42;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.21.17.15.37;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.21.17.13.38;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.16.18.57.44;	author marco;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.07.09.12.38;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.06.20.58.09;	author marco;	state Exp;
branches;
next	;


desc
@@


1.13
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@.\"	$OpenBSD: ipmi.4,v 1.12 2010/03/22 21:52:53 weerd Exp $
.\"
.\" Copyright (c) 2005 Marco Peereboom <marco@@openbsd.org>
.\" Text was heavily borrowed from the IPMI spec V1.5
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.Dd $Mdocdate: March 22 2010 $
.Dt IPMI 4
.Os
.Sh NAME
.Nm ipmi
.Nd Intelligent Platform Management Interface driver
.Sh SYNOPSIS
.Cd "ipmi0 at mainbus0"
.Sh DESCRIPTION
The
.Nm
term Intelligent Platform Management refers to autonomous monitoring and
recovery features implemented directly in platform management hardware and
firmware.
The key characteristics of Intelligent Platform Management is that
inventory, monitoring, logging, and recovery control functions are available
independent of the main processor, BIOS, and operating system.
.Pp
Platform status information can be obtained and recovery actions initiated
under situations where vendor "in-band" management mechanisms are unavailable.
The independent monitoring, logging, and access functions available through IPMI
provide a level of manageability built in to the platform hardware.
This can support systems where there is no systems management software
available for a particular operating system.
.Pp
At the heart of the IPMI architecture is a microcontroller called
the Baseboard Management Controller (BMC).
The BMC provides the intelligence behind Intelligent Platform Management.
The BMC manages the interface between system management software
and the platform management hardware, provides autonomous monitoring,
event logging, and recovery control and serves as the gateway
between systems management software and hardware.
.Sh IPMI MESSAGING
IPMI uses message-based interfaces for the different interfaces to the platform
management subsystems.
All IPMI messages share the same fields in the message "payload",
regardless of the interface (transport) that they're transferred over.
IPMI messaging uses a request/response protocol.
IPMI request messages are commonly referred to as commands.
The use of request/response protocol facilitates the transfer of
IPMI messages over different transports.
IPMI commands are grouped into functional command sets
using a field called network function code.
There are command sets for sensor and event related commands,
chassis commands etc.
This functional grouping makes it easier to organize and manage
the assignment and allocation of command values.
.Sh SENSOR MODEL
Access to monitored information such as temperatures, voltages, fan status
etc., is provided via the IPMI Sensor Model.
Instead of providing direct access to the monitoring hardware,
IPMI provides access by abstracted sensor commands
such as the "Get Sensor Reading" command,
implemented via a management controller.
This approach isolates the software from changes in the
platform management hardware implementation.
.Pp
Sensors are classified according to the type of readings they provide
and/or the type of events they generate.
A sensor can return either an analog or discrete reading.
Sensor events can be discrete or threshold-based.
.Sh SYSTEM EVENT LOG AND EVENT MESSAGES
The BMC provides a centralized non-volatile System Event Log, or SEL.
Having the SEL and logging functions managed by the BMC
helps ensure that post-mortem logging information is available
should a failure occur that disables the systems processor(s).
.Pp
A set of IPMI commands allows the SEL to be read and cleared
and for events to be added to the SEL.
The common request message (command)
used for adding events to the SEL is referred to as an Event Message.
.Sh SENSOR DATA RECORDS & CAPABILITIES COMMANDS
IPMI's extensibility and scalability mean that
each platform implementation can have
a different population of management controllers and sensors and
different event generation capabilities.
The design of IPMI allows system
management software to retrieve information from the platform
and automatically configure itself to the platform's capabilities.
.Pp
Information that describes the platform management capabilities
is provided via two mechanisms:
Capabilities Commands and Sensor Data Records (SDRs).
Capabilities commands are commands within the IPMI command sets that return
fields that provide information on other commands and functions the controller
can handle.
.Sh SYSTEMS INTERFACES
IPMI defines three standardized systems interfaces that systems software uses
for transferring IPMI messages to the BMC.
In order to support a variety of microcontrollers,
IPMI offers a choice of systems interfaces.
The system interfaces are similar enough so that
a single driver can handle all IPMI system interfaces.
.Bl -tag -width Ds
.It Keyboard Controller Style (KCS)
The bit definitions and operation of the registers follows that used in the
Intel 8742 Universal Peripheral Interface microcontroller.
The term "Keyboard Controller Style" reflects the fact that
the 8742 interface was used as the legacy keyboard controller interface
in PC architecture computer systems.
This interface is available built in to several commercially available
microcontrollers.
Data is transferred across the KCS interface using a per-byte handshake.
.It System Management Interface Chip (SMIC)
The SMIC interface provides an alternative
when the implementer wishes to use a microcontroller for the BMC
that does not have the built-in hardware for a KCS interface.
This interface is a three I/O port interface that can be
implemented using a simple ASIC, FPGA, or discrete logic devices.
It may also be built in to a custom-designed management controller.
Like the KCS interface,
a per-byte handshake is also used
for transferring data across the SMIC interface.
.It Block Transfer (BT)
This interface provides a higher performance system interface option.
Unlike the KCS and SMIC interfaces,
a per-block handshake is used for transferring data across the interface.
The BT interface also provides an alternative to using
a controller with a built-in KCS interface.
The BT interface has three I/O mapped ports.
A typical implementation includes hardware buffers for holding
upstream and downstream message blocks.
The BT interface can be implemented using an ASIC or FPGA
or may be built in to a custom-designed management controller.
.El
.Sh WATCHDOG
IPMI provides
.Xr watchdog 4
timer functionality.
Once configured, if the watchdog is not reset within
a certain period of time,
it will timeout and the server will reset.
The reset will occur regardless of the recoverability of the hang or crash.
.Pp
Example of enabling a watchdog:
.Pp
.Dl # sysctl kern.watchdog.period=10
.Pp
In this case if the watchdog is not reset,
it'll reboot the server after roughly 10 seconds.
.Pp
Example of disabling the watchdog:
.Pp
.Dl # sysctl kern.watchdog.period=0
.Sh SEE ALSO
.Xr watchdog 4 ,
.Xr sensorsd 8 ,
.Xr sysctl 8
.Sh HISTORY
The
.Nm
driver first appeared in
.Ox 3.9
and conforms to the IPMI 1.5 specification.
.Sh AUTHORS
The
.Nm
driver was written by
.An Jordan Hargrave Aq Mt jordan@@openbsd.org .
@


1.12
log
@Add missing text from license. Originally found in safte(4) in July
2005, this was copied around quite a bit.

ok jmc@@ deraadt@@ dlg@@ claudio@@ grange@@ marco@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.11 2007/05/31 19:19:50 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 31 2007 $
d175 1
a175 1
.An Jordan Hargrave Aq jordan@@openbsd.org .
@


1.11
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.10 2005/11/30 22:35:42 jmc Exp $
d15 3
a17 3
.\" TORTIOUS ACTION, ARISING OUT OF
.\" PERFORMANCE OF THIS SOFTWARE.
.Dd $Mdocdate$
@


1.10
log
@clean up the watchdog section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.9 2005/11/30 20:21:42 marco Exp $
d17 1
a17 1
.Dd October 5, 2005
@


1.9
log
@Add watchdog heading.  Lots of help from various people.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.8 2005/11/21 07:05:53 dlg Exp $
d143 6
a148 3
IPMI provides watchdog timer functionality.
Once configured, if the watchdog is not reset within a x second timeout,
the server will reset.
a149 4
.Bl -tag -width Ds
.It Example of enabling a watchdog:
sysctl -w kern.watchdog.period=10
.El
d151 8
a158 2
In this case if the watchdog is not reset it'll reboot the server after roughly
10 seconds.
d160 1
a160 4
.Bl -tag -width Ds
.It Example of disabling watchdog:
sysctl -w kern.watchdog.period=0
.El
d162 1
d164 1
a164 2
.Xr sysctl 8 ,
.Xr watchdog 4
@


1.8
log
@fix up the copyright date on these pages. the ipmi.4 change is ok by marco@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.7 2005/10/27 16:55:04 jmc Exp $
d142 17
d161 2
a162 1
.Xr sysctl 8
@


1.7
log
@typo;

from fabio olive leite;
ok marco@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.6 2005/10/21 17:19:42 jmc Exp $
d3 1
a3 1
.\" Copyright (c) Marco Peereboom <marco@@openbsd.org>
@


1.6
log
@another typo;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.5 2005/10/21 17:15:37 jmc Exp $
d119 1
a119 1
Data is transferred across the KCS interface using a per byte-byte handshake.
@


1.5
log
@should have waited one second longer.. ;)
fix a typo; confirmed by marco@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.4 2005/10/21 17:13:38 jmc Exp $
d127 1
a127 1
Like the KCS interfacei,
@


1.4
log
@spelling;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.3 2005/10/16 18:57:44 marco Exp $
d60 1
a60 1
There are command sets for sensor and even related commands,
@


1.3
log
@Two typos from Christian Brueffer <chris at unixpages dot org>
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.2 2005/10/07 09:12:38 jmc Exp $
d91 1
a91 1
a differerent population of management controllers and sensors and
@


1.2
log
@various fixes; little dancing ;(
marco: new sentence, new line please!
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipmi.4,v 1.1 2005/10/06 20:58:09 marco Exp $
d69 1
a69 1
such as the "Get Seonsor Reading" command,
d84 1
a84 1
A set of IPMI commands alows the SEL to be read and cleared
@


1.1
log
@Add man for ipmi.  jmc have a ball :-)
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d5 1
a5 1
.\" 
d9 1
a9 1
.\" 
d30 4
a33 3
firmware.  The key characteristics of Intelligent Platform Management is that
inventory, monitoring, logging and recovery control functions are available
indepent of the main processor, BIOS and operating system.
d35 1
a35 1
Platform status information can be obtiained and recovery actions initiated
d37 12
a48 7
The independent monitoring, logging and access functions available through IPMI
provide a level of manageability built-in to the platform hardware.  This can
support systems where there is no systems management software available for a
particular operating system.
.Pp
At the heart of the IPMI architecture is a microcontroller called the Baseboard Management Controller or BMC.  The BMC provides the intelligence behind Intelligent Platform Management.  The BMC manages the interface between system management software and the platform management hardware, provides autonomous monitoring, event logging and recovery control and serves as the gateway between systems management software and hardware.
.Pp
d51 13
a63 3
management subsystems.  All IPMI messages share the same fields in the message
"payload"; regardless of the interface (transport) that they're transferred
over.  IPMI messaging uses a request/response protocol.  IPMI request messages are commonly referred to as commands.  The use of request/response protocol facilitates the transfer of IPMI messages over different transports.  IPMI commands are grouped into functional command sets using a field called network function code.  There are command sets for sensor and even related commands, chassis commands etc.  This functional grouping makes it easier to organize and manage the assignment and allocation of command values.
d66 6
a71 4
etc., is provided via the IPMI Sensor Model.  Instead of providing direct
access to the monitoring hardware IPMI provides access by abstracted sensor
commands such as the "Get Seonsor Reading" command, implemented via a
management controller.  This approach isolates the software from changes in the
d74 4
a77 1
Sensors are classified according to the type of readings they provide and/or the type of events they generate.  A sensor can return either an analog or discrete reading.  Sensor events can be discrete or threshold-based.
d79 9
a87 6
The BMC provides a centralized non-volatile System Event Log, or SEL.  Having
the SEL and logging functions managed by the BMC helps ensure that post-mortem
logging information is available should a failure occur that disables the
systems processor(s).
.Pp
A set of IPMI commands alows the SEL to be read and cleared and for events to be added to the SEL.  The common request message (command) used for adding events to the SEL is referred to as Event Message.
d89 11
a99 8
IPMI's extensibility and scalability mean that each platform implementation can
have a differerent population of management controllers and sensors and
different event generation capabilities.  The design of IPMI allows system
management software to retrieve information from the platform and automatically
configure itself to the platform's capabilities.
.Pp
Information that describes the platform management capabilities is provided via
two mechanisms: Capabilities Commands and Sensor Data Records (SDRs).
d104 7
a110 7
IPMI defines three standardized systems intefaces that systems software uses
for transfering IPMI messages to the BMC.  In order to support a variety of
microcontrollers, IPMI offers a choice of systems interfaces.  The system
interfaces are similar enough so that a single driver can handle all IPMI
system interfaces.
.Pp
.Bl -tag -width <10> -compact
d112 8
a119 8
The bit definitions, and operation of the registers follows that used in the
Intel 8742 Universal Peripheral Interface microcontroller.  The term "Keyboard
Controller Style" reflects the fact that the 8742 interface was used as the
legacy keyboard controller interface in PC architecture computer systems.  This
interface is available built-in to several commercially available
microcontrollers.  Data is transferred accross the KCS interface using a per
byte-byte handshake.
.Pp
d121 9
a129 8
The SMIC interface provides an alternative when the implementer wishes to use a
microcontroller for the BMC that does not have the built-in hardware for a KCS
interface.  This interface is a three I/O port interface that can be
implemented using a simple ASIC, FPGA or discrete logic devices.  It may also
be built-in to a custom-designed management controller.  Like the KCS interface
a per-byte handshake is also used for transferring data accross the SMIC
interface.
.Pp
d131 10
a140 8
This interface provides a higher performance system interface option.  Unlike
the KCS and SMIC interfaces a per-block handshake is used for transferring data
accross the interface.  The BT interface also provides an alternative to using
a controller with a built-in KCS interface.  The BT interface has three I/O
mapped ports.  A typical implementation includes hardware buffers for holding
upstream and downstream message blocks.  The BT interface can be implemented
using an ASIC or FPGA or may be built-in to a custom-designed management
controller.
d143 2
a144 2
.Xr sysctl 8 ,
.Xr sensorsd 8
a152 1
.Om
d154 2
a155 2
driver was written by Jordan Hargrave <jordan@@openbsd.org>

@

