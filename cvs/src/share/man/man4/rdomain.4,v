head	1.10;
access;
symbols
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7;
locks; strict;
comment	@.\" @;


1.10
date	2016.11.14.16.17.50;	author jmc;	state Exp;
branches;
next	1.9;
commitid	z1WO935EqCNTFTec;

1.9
date	2016.11.14.10.32.46;	author mpi;	state Exp;
branches;
next	1.8;
commitid	to0Je2i4V2FtpmS1;

1.8
date	2015.07.04.07.51.03;	author jmc;	state Exp;
branches;
next	1.7;
commitid	n5zTQ2I46G1AVKEZ;

1.7
date	2015.02.06.03.10.43;	author phessler;	state Exp;
branches;
next	1.6;
commitid	w6i2FLsUc1x8E0he;

1.6
date	2015.02.06.01.01.31;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	eXheLORRn0Pv8aUC;

1.5
date	2015.02.05.20.46.30;	author sthen;	state Exp;
branches;
next	1.4;
commitid	yxOEze8mUtYoo9wy;

1.4
date	2015.02.05.20.31.55;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	A5eygEwAQrQbn1Qg;

1.3
date	2015.02.05.10.43.49;	author phessler;	state Exp;
branches;
next	1.2;
commitid	eEPnpSCqiqvY1iwU;

1.2
date	2015.02.05.10.25.56;	author sthen;	state Exp;
branches;
next	1.1;
commitid	CZ3FiLonnLLkteCN;

1.1
date	2015.02.05.08.58.10;	author phessler;	state Exp;
branches;
next	;
commitid	3YgC6V550XP0P1e1;


desc
@@


1.10
log
@tweak previous;
@
text
@.\"	$OpenBSD: rdomain.4,v 1.9 2016/11/14 10:32:46 mpi Exp $
.\"
.\" Copyright (c) 2015 Peter Hessler <phessler@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: November 14 2016 $
.Dt RDOMAIN 4
.Os
.Sh NAME
.Nm rtable ,
.Nm rdomain
.Nd routing tables and routing domains
.Sh DESCRIPTION
The traditional kernel routing system had a single table for routes and
allowed only non-conflicting IP address assignments.
The
.Nm rtable
feature allows multiple lookup tables for routes.
The
.Nm rdomain
feature provides a way to logically segment a router
between network paths.
.Ss Routing tables
Each
.Nm rtable
contains routes for outbound network packets.
A routing domain can contain more than one
.Nm rtable .
Multiple routing tables are commonly used for Policy Based Routing.
.Pp
The highest ID that can be used for an
.Nm rtable
is 255.
.Ss Routing domains
Each
.Nm rdomain
is a completely separate address space in the kernel.
An IP address (e.g. 10.0.0.1/16) can be assigned in more than one
.Nm rdomain ,
but
cannot be assigned more than once per
.Nm rdomain .
An interface belongs to one and only one
.Nm rdomain .
The interface's
.Nm rdomain
determines which rdomain an incoming packet will
be in.
Virtual interfaces do not need to belong to the same
.Nm rdomain
as the parent.
Each
.Nm rdomain
contains at least one routing table.
.Pp
Network traffic within an
.Nm rdomain
stays within the current routing domain.
.Xr pf 4
is used to move traffic from one
.Nm rdomain
to a different
.Nm rdomain .
.Pp
When an interface is assigned to a non-existent
.Nm rdomain
it gets created automatically.
At the same time an
.Nm rtable
with the same ID and a
.Xr lo 4
interface with a unit number matching the ID get created and assigned to the new
domain.
.Pp
The highest ID that can be used for an
.Nm rdomain
is 255.
.Sh EXAMPLES
Set up em0 and lo4 onto rdomain 4:
.Bd -literal -offset indent
# ifconfig em0 rdomain 4
# ifconfig lo4 inet 127.0.0.1/8
# ifconfig em0 192.0.2.100/24
.Ed
.Pp
Set a default route and localhost reject route within rdomain 4:
.Bd -literal -offset indent
# route -T4 -qn add -net 127 127.0.0.1 -reject
# route -T4 -n add default 192.0.2.1
.Ed
.Pp
Start an sshd in rdomain 4:
.Pp
.Dl # route -T4 exec /usr/sbin/sshd
.Pp
Display to which rdomain processes are assigned:
.Pp
.Dl # ps aux -o rtable
.Pp
pf.conf snippet to block incoming port 80, and nat-to and move to rtable 0
on interface em1:
.Bd -literal -offset indent
block in on rdomain 4 proto tcp to any port 80
match out on rdomain 4 to !$internal_net nat-to (em1) rtable 0
.Ed
.Sh SEE ALSO
.Xr ps 1 ,
.Xr lo 4 ,
.Xr route 4 ,
.Xr pf.conf 5 ,
.Xr ifconfig 8 ,
.Xr route 8
.Sh HISTORY
.Ox
support for
.\" XXX - rdomains, not 'rtable'
.\" .Nm
rdomains
first appeared in
.Ox 4.9
and IPv6 support first appeared in
.Ox 5.5 .
.Sh CAVEATS
When an rtable already exists a new domain with the same ID cannot be created.
Since there is no command to destroy an rtable
a reboot is necessary.
.Pp
No tool is available to assign more than one rtable to an rdomain
other than to the default one (0).
@


1.9
log
@Automatically create a default lo(4) interface per rdomain.

In order to stop abusing lo0 for all rdomains, a new loopback interface
will be created every time a rdomain is created.  The unit number will
be the same as the rdomain, i.e. lo1 will be attached to rdomain 1.

If this loopback interface is already in use it wont be possible to create
the corresponding rdomain.

In order to know which lo(4) interface is attached to a rdomain, its index
is stored in the rtable/rdomain map.

This is a long overdue since the introduction of rtable/rdomain.  It also
fixes a recent regression due to resetting the rdomain of an incoming
packet reported by semarie@@, Andreas Bartelt and Nils Frohberg.

ok claudio@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rdomain.4,v 1.8 2015/07/04 07:51:03 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 4 2015 $
d83 1
a83 1
interface with a unit number equals to ID get created and assigned to the new
@


1.8
log
@various improvements from remi locherer;
i've tweaked it a bit, based on feedback from claudio and phessler

ok phessler
@
text
@d1 1
a1 1
.\"	$OpenBSD: rdomain.4,v 1.7 2015/02/06 03:10:43 phessler Exp $
d17 1
a17 1
.Dd $Mdocdate: February 6 2015 $
d81 4
a84 1
with the same ID gets created and assigned to the new domain.
a92 1
# ifconfig lo4 rdomain 4
d119 1
@


1.7
log
@packets stay within a routing domain.  to move them, use pf(4)
@
text
@d1 1
a1 1
.\"	$OpenBSD: rdomain.4,v 1.6 2015/02/06 01:01:31 schwarze Exp $
d32 2
a33 2
feature makes it possible to assign the same IP address to more than one
interface.
a39 1
Within a domain, IP addresses used for different interfaces cannot overlap.
d41 4
d75 11
d105 4
d116 1
d131 7
@


1.6
log
@tweak wording, using feedback from sthen@@ and jmc@@; ok phessler@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: rdomain.4,v 1.5 2015/02/05 20:46:30 sthen Exp $
d17 1
a17 1
.Dd $Mdocdate: February 5 2015 $
d63 9
@


1.5
log
@snippit/snippet
@
text
@d1 1
a1 1
.\"	$OpenBSD: rdomain.4,v 1.4 2015/02/05 20:31:55 schwarze Exp $
d26 2
a27 1
allowed for non-conflicting IP address assignments.
d29 2
a30 1
and
d32 2
a33 2
allows us to have separate lookup tables for routes,
and assign IP addresses independently from other interfaces.
d35 1
d37 5
a41 6
allows one to set a different route table for outbound network packets.
As with the traditional routing system, IP addresses cannot overlap.
You can have multiple
.Nm rtable
within the same routing domain.
Commonly used to set Policy Based Routing.
d43 1
d45 1
a45 1
are completely separate routing domains and tables in the kernel.
d60 1
a60 1
An
@


1.4
log
@tweak previous
@
text
@d1 1
a1 1
.\"	$OpenBSD: rdomain.4,v 1.3 2015/02/05 10:43:49 phessler Exp $
d79 1
a79 1
pf.conf snippit to block incoming port 80, and nat-to and move to rtable 0
@


1.3
log
@add some (untested) examples of use
@
text
@d1 1
a1 1
.\"	$OpenBSD: rdomain.4,v 1.2 2015/02/05 10:25:56 sthen Exp $
d27 1
a27 1
.Em rtable
d29 1
a29 1
.Em rdomain
d32 2
a33 3
.Pp
.Sh rtable
.Em rtable
d37 1
a37 1
.Em rtable
d40 2
a41 2
.Sh rdomain
.Em rdomain
d43 2
a44 2
An IP address (e.g. 10.0.0.1/16) can be assigned in multiple
.Em rdomains ,
d47 1
a47 1
.Em rdomain .
d49 1
a49 1
.Em rdomain .
d51 1
a51 1
.Em rdomain
d55 1
a55 1
.Em rdomain
d58 1
a58 1
.Em rdomain
d61 13
a73 10
Set up em0 and lo4 onto
.Em rdomain 4 ,
.Pp
.Dl # ifconfig em0 rdomain 4
.Dl # ifconfig lo4 rdomain 4
.Dl # ifconfig lo4 inet 127.0.0.1/8
.Dl # ifconfig em0 192.0.2.100/24
.Pp
Set a default route and localhost reject route within
.Em rdomain 4 .
d75 1
a75 5
.Dl # route -T4 -qn add -net 127 127.0.0.1 -reject
.Dl # route -T4 -n add default 192.0.2.1
.Pp
Starts an sshd in
.Em rdomain 4 .
d80 2
a81 3
on interface em1
.Pp
.Bd -literal -offset 4n
@


1.2
log
@typos
@
text
@d1 1
a1 1
.\"	$OpenBSD: rdomain.4,v 1.1 2015/02/05 08:58:10 phessler Exp $
d61 27
a87 5
.\" .Sh EXAMPLES
.\" make some
.\" ifconfig em0 rdomain 4
.\" ifconfig em0 192.0.2.100/24
.\" route -T4 -n add default 192.0.2.1
@


1.1
log
@start documenting routing tables and routing domains

general acceptance of the room
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d30 2
a31 2
allows us to have seperate lookup tables for routes,
and assign IP addresses independantly from other interfaces.
d43 2
a44 2
are completely seperate seperate routing domains and tables in the kernel.
An IP address (e.g. 10.0.0.1/16) can be assigned in multple
@

