head	1.49;
access;
symbols
	OPENBSD_6_2:1.49.0.10
	OPENBSD_6_2_BASE:1.49
	OPENBSD_6_1:1.49.0.8
	OPENBSD_6_1_BASE:1.49
	OPENBSD_6_0:1.49.0.6
	OPENBSD_6_0_BASE:1.49
	OPENBSD_5_9:1.49.0.2
	OPENBSD_5_9_BASE:1.49
	OPENBSD_5_8:1.47.0.6
	OPENBSD_5_8_BASE:1.47
	OPENBSD_5_7:1.47.0.4
	OPENBSD_5_7_BASE:1.47
	OPENBSD_5_6:1.46.0.4
	OPENBSD_5_6_BASE:1.46
	OPENBSD_5_5:1.42.0.8
	OPENBSD_5_5_BASE:1.42
	OPENBSD_5_4:1.42.0.4
	OPENBSD_5_4_BASE:1.42
	OPENBSD_5_3:1.42.0.2
	OPENBSD_5_3_BASE:1.42
	OPENBSD_5_2:1.41.0.4
	OPENBSD_5_2_BASE:1.41
	OPENBSD_5_1_BASE:1.41
	OPENBSD_5_1:1.41.0.2
	OPENBSD_5_0:1.40.0.12
	OPENBSD_5_0_BASE:1.40
	OPENBSD_4_9:1.40.0.10
	OPENBSD_4_9_BASE:1.40
	OPENBSD_4_8:1.40.0.8
	OPENBSD_4_8_BASE:1.40
	OPENBSD_4_7:1.40.0.4
	OPENBSD_4_7_BASE:1.40
	OPENBSD_4_6:1.40.0.6
	OPENBSD_4_6_BASE:1.40
	OPENBSD_4_5:1.40.0.2
	OPENBSD_4_5_BASE:1.40
	OPENBSD_4_4:1.39.0.2
	OPENBSD_4_4_BASE:1.39
	OPENBSD_4_3:1.37.0.4
	OPENBSD_4_3_BASE:1.37
	OPENBSD_4_2:1.37.0.2
	OPENBSD_4_2_BASE:1.37
	OPENBSD_4_1:1.33.0.8
	OPENBSD_4_1_BASE:1.33
	OPENBSD_4_0:1.33.0.6
	OPENBSD_4_0_BASE:1.33
	OPENBSD_3_9:1.33.0.4
	OPENBSD_3_9_BASE:1.33
	OPENBSD_3_8:1.33.0.2
	OPENBSD_3_8_BASE:1.33
	OPENBSD_3_7:1.30.0.2
	OPENBSD_3_7_BASE:1.30
	OPENBSD_3_6:1.28.0.2
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	OPENBSD_3_3:1.20.0.4
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.17.0.2
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_8:1.16.0.4
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.49
date	2015.09.11.13.04.05;	author stsp;	state Exp;
branches;
next	1.48;
commitid	ymX8tMNfbxq15A4Y;

1.48
date	2015.09.10.17.55.21;	author schwarze;	state Exp;
branches;
next	1.47;
commitid	PeV7Ql0T6htfMjhP;

1.47
date	2014.08.10.07.23.59;	author guenther;	state Exp;
branches;
next	1.46;
commitid	4NZS0tnOaHAx4AIQ;

1.46
date	2014.07.11.22.10.51;	author tedu;	state Exp;
branches;
next	1.45;
commitid	g2ZepqWF7McI47RS;

1.45
date	2014.05.30.07.18.22;	author guenther;	state Exp;
branches;
next	1.44;

1.44
date	2014.05.09.06.37.38;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2014.05.08.13.08.43;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2012.11.23.20.13.26;	author sthen;	state Exp;
branches;
next	1.41;

1.41
date	2011.12.03.23.01.21;	author schwarze;	state Exp;
branches;
next	1.40;

1.40
date	2009.01.29.19.35.27;	author claudio;	state Exp;
branches;
next	1.39;

1.39
date	2008.05.08.13.45.43;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2008.05.07.12.04.26;	author claudio;	state Exp;
branches;
next	1.37;

1.37
date	2007.06.11.08.42.01;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2007.06.11.00.27.13;	author uwe;	state Exp;
branches;
next	1.35;

1.35
date	2007.06.04.21.34.01;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.31.19.19.51;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2005.06.08.04.17.43;	author henning;	state Exp;
branches;
next	1.32;

1.32
date	2005.06.07.23.12.17;	author henning;	state Exp;
branches;
next	1.31;

1.31
date	2005.06.07.21.38.09;	author henning;	state Exp;
branches;
next	1.30;

1.30
date	2005.02.27.09.04.03;	author david;	state Exp;
branches;
next	1.29;

1.29
date	2004.10.11.22.27.54;	author jaredy;	state Exp;
branches;
next	1.28;

1.28
date	2004.08.21.21.58.15;	author jaredy;	state Exp;
branches;
next	1.27;

1.27
date	2004.08.21.21.22.43;	author jaredy;	state Exp;
branches;
next	1.26;

1.26
date	2004.08.15.23.27.35;	author jaredy;	state Exp;
branches;
next	1.25;

1.25
date	2004.05.30.21.31.35;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2004.05.29.17.54.46;	author jcs;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.09.16.06.07;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.06.10.29.41;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.02.23.30.12;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.26.07.55.40;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2001.11.13.13.54.25;	author mpech;	state Exp;
branches;
next	1.18;

1.18
date	2001.10.05.14.45.53;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.01.16.11.18;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	2000.02.19.14.41.11;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	99.07.09.13.35.47;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.07.02.20.11.49;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.06.05.13.18.32;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.05.16.19.56.32;	author alex;	state Exp;
branches;
next	1.11;

1.11
date	99.02.26.19.56.32;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	99.02.16.01.24.46;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.11.18.01.46.30;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	98.09.05.17.41.49;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.09.03.23.08.10;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	98.08.07.19.52.58;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.08.05.22.40.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.05.02.08.19.04;	author d;	state Exp;
branches;
next	1.3;

1.3
date	96.03.19.11.03.33;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.41.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.49
log
@documentation updates for ifmedia64
@
text
@.\"	$OpenBSD: netintro.4,v 1.48 2015/09/10 17:55:21 schwarze Exp $
.\"	$NetBSD: netintro.4,v 1.4 1995/10/19 08:03:40 jtc Exp $
.\"
.\" Copyright (c) 1983, 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)netintro.4	8.2 (Berkeley) 11/30/93
.\"
.Dd $Mdocdate: September 10 2015 $
.Dt NETINTRO 4
.Os
.Sh NAME
.Nm netintro
.Nd introduction to networking facilities
.Sh SYNOPSIS
.In sys/socket.h
.In net/route.h
.In net/if.h
.Sh DESCRIPTION
This section is a general introduction to the networking facilities
available in the system.
Documentation in this part of section
4 is broken up into three areas:
.Em protocol families
(domains),
.Em protocols ,
and
.Em network interfaces .
.Pp
All network protocols are associated with a specific
.Em protocol family .
A protocol family provides basic services to the protocol
implementation to allow it to function within a specific
network environment.
These services may include packet fragmentation and reassembly, routing,
addressing, and basic transport.
A protocol family may support multiple methods of addressing, though
the current protocol implementations do not.
A protocol family is normally comprised of a number of protocols, one per
.Xr socket 2
type.
It is not required that a protocol family support all socket types.
A protocol family may contain multiple protocols supporting the same socket
abstraction.
.Pp
A protocol supports one of the socket abstractions detailed in
.Xr socket 2 .
A specific protocol may be accessed either by creating a
socket of the appropriate type and protocol family, or
by requesting the protocol explicitly when creating a socket.
Protocols normally accept only one type of address format,
usually determined by the addressing structure inherent in
the design of the protocol family/network architecture.
Certain semantics of the basic socket abstractions are
protocol specific.
All protocols are expected to support the basic model for their particular
socket type, but may, in addition, provide non-standard facilities or
extensions to a mechanism.
For example, a protocol supporting the
.Dv SOCK_STREAM
abstraction may allow more than one byte of out-of-band
data to be transmitted per out-of-band message.
.Pp
A network interface is similar to a device interface.
Network interfaces comprise the lowest layer of the
networking subsystem, interacting with the actual transport
hardware.
An interface may support one or more protocol families and/or address formats.
The
.Sx SYNOPSIS
section of each network interface entry gives a sample
specification of the related drivers for use in providing a system description
to the
.Xr config 8
program.
The
.Sx DIAGNOSTICS
section lists messages which may appear on the console
and/or in the system error log,
.Pa /var/log/messages
(see
.Xr syslogd 8 ) ,
due to errors in device operation.
.Pp
Network interfaces may be collected together into interface groups.
An interface group is a container that can be used generically when
referring to any interface related by some criteria.
When an action is performed on an interface group, such as packet
filtering by the
.Xr pf 4
subsystem, the operation will be applied to each member interface in the
group, if supported by the subsystem.
The
.Xr ifconfig 8
utility can be used to view and assign membership of an interface to an
interface group with the
.Cm group
modifier.
.Sh PROTOCOLS
The system currently supports the
Internet protocols (IPv4 and IPv6),
MPLS,
and a few others.
Raw socket interfaces are provided to the
.Tn IP
protocol
layer of the
Internet.
Consult the appropriate manual pages in this section for more
information regarding the support for each protocol family.
.Sh ADDRESSING
Associated with each protocol family is an address
format.
All network addresses adhere to a general structure, called a
.Vt sockaddr ,
described below.
However, each protocol imposes a finer, more specific structure, generally
renaming the variant, which is discussed in the protocol family manual
page alluded to above.
.Bd -literal -offset indent
struct sockaddr {
	u_int8_t	sa_len;		/* total length */
	sa_family_t	sa_family;	/* address family */
	char		sa_data[14];	/* actually longer */
};
.Ed
.Pp
The field
.Va sa_len
contains the total length of the structure,
which may exceed 16 bytes.
The following address values for
.Va sa_family
are known to the system
(and additional formats are defined for possible future implementation):
.Bd -literal
#define AF_LOCAL	1	/* local to host */
#define AF_INET		2	/* internetwork: UDP, TCP, etc. */
#define AF_INET6	24	/* IPv6 */
#define AF_MPLS		33	/* Multiprotocol Label Switching */
.Ed
.Pp
The
.Va sa_data
field contains the actual address value.
Note that it may be longer than 14 bytes.
.Sh ROUTING
.Ox
provides some packet routing facilities.
The kernel maintains a routing information database, which
is used in selecting the appropriate network interface when
transmitting packets.
.Pp
A user process (or possibly multiple co-operating processes)
maintains this database by sending messages over a special kind
of socket.
This supplants fixed-size
.Xr ioctl 2 Ns s
used in earlier releases.
.Pp
This facility is described in
.Xr route 4 .
.Sh INTERFACES
Each network interface in a system corresponds to a
path through which messages may be sent and received.
A network interface usually has a hardware device associated with it,
though certain interfaces such as the loopback interface,
.Xr lo 4 ,
do not.
.Pp
The following
.Xr ioctl 2
calls may be used to manipulate network interfaces.
The
.Xr ioctl 2
is made on a socket (typically of type
.Dv SOCK_DGRAM )
in the desired domain.
Most of the requests
take an
.Vt ifreq
structure pointer as their parameter.
This structure is as follows:
.Bd -literal
struct	ifreq {
#define IFNAMSIZ 16
	char	ifr_name[IFNAMSIZ];	/* if name, e.g. "en0" */
	union {
		struct	sockaddr	ifru_addr;
		struct	sockaddr	ifru_dstaddr;
		struct	sockaddr	ifru_broadaddr;
		short			ifru_flags;
		int			ifru_metric;
		uint64_t		ifru_media;
		caddr_t			ifru_data;
	} ifr_ifru;
#define	ifr_addr	ifr_ifru.ifru_addr	/* address */
#define	ifr_dstaddr	ifr_ifru.ifru_dstaddr	/* other end of p-to-p link */
#define	ifr_broadaddr	ifr_ifru.ifru_broadaddr	/* broadcast address */
#define	ifr_flags	ifr_ifru.ifru_flags	/* flags */
#define	ifr_metric	ifr_ifru.ifru_metric	/* metric */
#define	ifr_mtu		ifr_ifru.ifru_metric	/* mtu (overload) */
#define	ifr_hardmtu	ifr_ifru.ifru_metric	/* hardmtu (overload) */
#define	ifr_media	ifr_ifru.ifru_media	/* media options */
#define	ifr_rdomainid	ifr_ifru.ifru_metric	/* VRF instance (overload) */
#define	ifr_vnetid	ifr_ifru.ifru_metric	/* Virtual Net Id (overload) */
#define	ifr_ttl		ifr_ifru.ifru_metric	/* tunnel TTL (overload) */
#define	ifr_data	ifr_ifru.ifru_data	/* for use by interface */
};
.Ed
.Pp
The supported
.Xr ioctl 2
requests are:
.Bl -tag -width Ds
.It Dv SIOCSIFADDR Fa "struct ifreq *"
Set the interface address for a protocol family.
Following the address assignment, the
.Dq initialization
routine for the
interface is called.
.Pp
This call has been deprecated and superseded by the
.Dv SIOCAIFADDR
call, described below.
.It Dv SIOCSIFDSTADDR Fa "struct ifreq *"
Set the point-to-point address for a protocol family and interface.
.Pp
This call has been deprecated and superseded by the
.Dv SIOCAIFADDR
call, described below.
.It Dv SIOCSIFBRDADDR Fa "struct ifreq *"
Set the broadcast address for a protocol family and interface.
.Pp
This call has been deprecated and superseded by the
.Dv SIOCAIFADDR
call, described below.
.It Dv SIOCGIFADDR Fa "struct ifreq *"
Get the interface address for a protocol family.
.It Dv SIOCGIFDSTADDR Fa "struct ifreq *"
Get the point-to-point address for a protocol family and interface.
.It Dv SIOCGIFBRDADDR Fa "struct ifreq *"
Get the broadcast address for a protocol family and interface.
.It Dv SIOCGIFDESCR Fa "struct ifreq *"
Get the interface description, returned in the
.Va ifru_data
field.
.It Dv SIOCSIFDESCR Fa "struct ifreq *"
Set the interface description to the value of the
.Va ifru_data
field, limited to the size of
.Dv IFDESCRSIZE .
.It Dv SIOCSIFFLAGS Fa "struct ifreq *"
Set the interface flags.
If the interface is marked down, any processes currently routing packets
through the interface are notified; some interfaces may be reset so that
incoming packets are no longer received.
When marked up again, the interface is reinitialized.
.It Dv SIOCGIFFLAGS Fa "struct ifreq *"
Get the interface flags.
.It Dv SIOCGIFXFLAGS Fa "struct ifreq *"
Get the extended interface flags.
.It Dv SIOCGIFMTU Fa "struct ifreq *"
Get the current MTU of the interface.
.It Dv SIOCGIFHARDMTU Fa "struct ifreq *"
Get the maximum hardware MTU of the interface.
.It Dv SIOCSIFMEDIA Fa "struct ifreq *"
Set the interface media settings.
See
.Xr ifmedia 4
for possible values.
.It Dv SIOCGIFMEDIA Fa "struct ifmediareq *"
Get the interface media settings.
The
.Vt ifmediareq
structure is as follows:
.Bd -literal
struct ifmediareq {
	char		ifm_name[IFNAMSIZ];	/* if name, e.g. "en0" */
	uint64_t	ifm_current;	/* current media options */
	uint64_t	ifm_mask;	/* don't care mask */
	uint64_t	ifm_status;	/* media status */
	uint64_t	ifm_active;	/* active options */
	int		ifm_count;	/* #entries in ifm_ulist array */
	uint64_t	*ifm_ulist;	/* media words */
};
.Ed
.Pp
See
.Xr ifmedia 4
for interpreting this value.
.It Dv SIOCSIFMETRIC Fa "struct ifreq *"
Set the interface routing metric.
The metric is used only by user-level routers.
.It Dv SIOCGIFMETRIC Fa "struct ifreq *"
Get the interface metric.
.It Dv SIOCSIFPRIORITY Fa "struct ifreq *"
Set the interface routing priority.
The interface routing priority influences the resulting routing priority of
new static routes added to the kernel using the specified interface.
The value is in the range of 0 to 16 with smaller numbers being better.
.It Dv SIOCGIFPRIORITY Fa "struct ifreq *"
Get the interface priority.
.It Dv SIOCGIFRDOMAIN Fa "struct ifreq *"
Get the interface routing domain.
This identifies which routing table is used for the interface.
.It Dv SIOCAIFADDR Fa "struct ifaliasreq *"
An interface may have more than one address associated with it
in some protocols.
This request provides a means to add additional addresses (or modify
characteristics of the primary address if the default address for the
address family is specified).
.Pp
Rather than making separate calls to set destination or broadcast addresses,
or network masks (now an integral feature of multiple protocols), a separate
structure,
.Vt ifaliasreq ,
is used to specify all three facets simultaneously (see below).
One would use a slightly tailored version of this structure specific
to each family (replacing each
.Vt sockaddr
by one
of the family-specific type).
One should always set the length of a
.Vt sockaddr ,
as described in
.Xr ioctl 2 .
.Pp
The
.Vt ifaliasreq
structure is as follows:
.Bd -literal
struct ifaliasreq {
	char	ifra_name[IFNAMSIZ];	/* if name, e.g. "en0" */
	struct	sockaddr ifra_addr;
	struct	sockaddr ifra_dstaddr;
#define ifra_broadaddr ifra_dstaddr
	struct	sockaddr ifra_mask;
};
.Ed
.It Dv SIOCDIFADDR Fa "struct ifreq *"
This request deletes the specified address from the list
associated with an interface.
It also uses the
.Vt ifaliasreq
structure to allow for the possibility of protocols allowing
multiple masks or destination addresses, and also adopts the
convention that specification of the default address means
to delete the first address for the interface belonging to
the address family in which the original socket was opened.
.It Dv SIOCGIFCONF Fa "struct ifconf *"
Get the interface configuration list.
This request takes an
.Vt ifconf
structure (see below) as a value-result parameter.
The
.Va ifc_len
field should be initially set to the size of the buffer
pointed to by
.Va ifc_buf .
On return it will contain the length, in bytes, of the
configuration list.
.Pp
Alternately, if the
.Va ifc_len
passed in is set to 0,
.Dv SIOCGIFCONF
will set
.Va ifc_len
to the size that
.Va ifc_buf
needs to be to fit the entire configuration list and will not
fill in the other parameters.
This is useful for determining the exact size that
.Va ifc_buf
needs to be in advance.
Note, however, that this is an extension
that not all operating systems support.
.Bd -literal
struct ifconf {
	int	ifc_len;	  /* size of associated buffer */
	union {
		caddr_t	ifcu_buf;
		struct	ifreq *ifcu_req;
	} ifc_ifcu;
#define ifc_buf ifc_ifcu.ifcu_buf /* buffer address */
#define ifc_req ifc_ifcu.ifcu_req /* array of structures ret'd */
};
.Ed
.It Dv SIOCIFCREATE Fa "struct ifreq *"
Attempt to create the specified interface.
.It Dv SIOCIFDESTROY Fa "struct ifreq *"
Attempt to destroy the specified interface.
.It Dv SIOCIFGCLONERS Fa "struct if_clonereq *"
Get the list of clonable interfaces.
This request takes an
.Vt if_clonereq
structure pointer (see below) as a value-result parameter.
The
.Va ifcr_count
field should be set to the number of
.Dv IFNAMSIZ Ns -sized
strings that can fit in the buffer pointed to by
.Va ifcr_buffer .
On return,
.Va ifcr_total
will be set to the number of clonable interfaces, and the buffer pointed
to by
.Va ifcr_buffer
will be filled with the names of clonable interfaces aligned on
.Dv IFNAMSIZ
boundaries.
.Pp
The
.Vt if_clonereq
structure is as follows:
.Bd -literal
struct if_clonereq {
	int   ifcr_total;  /* total cloners (out) */
	int   ifcr_count;  /* room for this many in user buf */
	char *ifcr_buffer; /* buffer for cloner names */
};
.Ed
.It Dv SIOCAIFGROUP Fa "struct ifgroupreq *"
Associate the interface named by
.Va ifgr_name
with the interface group named by
.Va ifgr_group .
The
.Vt ifgroupreq
structure is as follows:
.Bd -literal
struct ifg_req {
	char			 ifgrq_group[IFNAMSIZ];
};

struct ifgroupreq {
	char	ifgr_name[IFNAMSIZ];
	u_int	ifgr_len;
	union {
		char	ifgru_group[IFNAMSIZ];
		struct	ifg_req *ifgru_groups;
	} ifgr_ifgru;
#define ifgr_group	ifgr_ifgru.ifgru_group
#define ifgr_groups	ifgr_ifgru.ifgru_groups
};
.Ed
.It Dv SIOCGIFGROUP Fa "struct ifgroupreq *"
Retrieve the list of groups for which an interface is a member.
The interface is named by
.Va ifgr_name .
On enter, the amount of memory in which the group names will
be written is stored in
.Va ifgr_len ,
and the group names themselves will be written to the memory
pointed to by
.Va ifgr_groups .
On return, the amount of memory actually written is returned in
.Va ifgr_len .
.Pp
Alternately, if the
.Va ifgr_len
passed in is set to 0,
.Dv SIOCGIFGROUP
will set
.Va ifgr_len
to the size that
.Va ifgr_groups
needs to be to fit the entire group list and will not
fill in the other parameters.
This is useful for determining the exact size that
.Va ifgr_groups
needs to be in advance.
.It Dv SIOCDIFGROUP Fa "struct ifgroupreq *"
Remove the membership of the interface named by
.Va ifgr_name
from the group
.Va ifgr_group .
.El
.Sh SEE ALSO
.Xr netstat 1 ,
.Xr ioctl 2 ,
.Xr socket 2 ,
.Xr arp 4 ,
.Xr bridge 4 ,
.Xr ifmedia 4 ,
.Xr inet 4 ,
.Xr intro 4 ,
.Xr ip 4 ,
.Xr ip6 4 ,
.Xr lo 4 ,
.Xr mpe 4 ,
.Xr pf 4 ,
.Xr tcp 4 ,
.Xr udp 4 ,
.Xr hosts 5 ,
.Xr networks 5 ,
.Xr bgpd 8 ,
.Xr config 8 ,
.Xr ifconfig 8 ,
.Xr mrouted 8 ,
.Xr netstart 8 ,
.Xr ospfd 8 ,
.Xr ripd 8 ,
.Xr route 8
.Sh HISTORY
The
.Nm
manual appeared in
.Bx 4.3 Tahoe .
@


1.48
log
@use .In rather than .Fd #include
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.47 2014/08/10 07:23:59 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: August 10 2014 $
d213 7
a219 6
		struct	sockaddr ifru_addr;
		struct	sockaddr ifru_dstaddr;
		struct	sockaddr ifru_broadaddr;
		short	ifru_flags;
		int	ifru_metric;
		caddr_t	ifru_data;
d221 12
a232 8
#define ifr_addr	ifr_ifru.ifru_addr	/* address */
#define ifr_dstaddr	ifr_ifru.ifru_dstaddr	/* p-to-p peer */
#define ifr_broadaddr	ifr_ifru.ifru_broadaddr	/* broadcast address */
#define ifr_flags	ifr_ifru.ifru_flags	/* flags */
#define ifr_metric	ifr_ifru.ifru_metric	/* metric */
#define ifr_mtu		ifr_ifru.ifru_metric	/* mtu (overload) */
#define ifr_media	ifr_ifru.ifru_metric	/* media options */
#define ifr_data	ifr_ifru.ifru_data	/* used by interface */
d303 7
a309 7
	char	 ifm_name[IFNAMSIZ];	/* if name, e.g. "en0" */
	int	 ifm_current;	/* current media options */
	int	 ifm_mask;	/* don't care mask */
	int	 ifm_status;	/* media status */
	int	 ifm_active;	/* active options */
	int	 ifm_count;	/* #entries in ifm_ulist array */
	int	*ifm_ulist;	/* media words */
@


1.47
log
@AF_BLUETOOTH is gone.  AF_LOCAL isn't involved pipe (and portals are gone).
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.46 2014/07/11 22:10:51 tedu Exp $
d33 1
a33 1
.Dd $Mdocdate: July 11 2014 $
d40 3
a42 3
.Fd #include <sys/socket.h>
.Fd #include <net/route.h>
.Fd #include <net/if.h>
@


1.46
log
@Let us hurry. There is nothing to fear here.
That's what scares me.
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.45 2014/05/30 07:18:22 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: May 30 2014 $
d161 1
a161 1
#define AF_LOCAL	1	/* local to host (pipes, portals) */
a163 1
#define AF_BLUETOOTH	32	/* Bluetooth */
@


1.45
log
@Appletalk support was removed a while ago.  So was natm and hylink (if ever).
Let's mention MPLS instead.

Noted by Remi Locherer (remi.locherer (at) relo.ch)
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.44 2014/05/09 06:37:38 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 9 2014 $
a504 1
.Xr bluetooth 4 ,
@


1.44
log
@my previous attempt to fix the renaming of the inet(3) pages was wrong;
this fixes those by referencing the correct page, and cleans up the netintro/
inet entries;

all this on the advice (and ok) of guenther!
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.43 2014/05/08 13:08:43 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 8 2014 $
d126 1
a126 1
Appletalk,
a162 2
#define AF_HYLINK	15	/* NSC Hyperchannel */
#define AF_APPLETALK	16	/* AppleTalk */
a163 1
#define AF_NATM		27	/* native ATM access */
d165 1
d513 1
@


1.43
log
@inet(3) -> inet_net(3);
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.42 2012/11/23 20:13:26 sthen Exp $
d33 1
a33 1
.Dd $Mdocdate: November 23 2012 $
a505 1
.Xr inet_net 3 ,
@


1.42
log
@Document SIOCGIFXFLAGS, SIOCGIFMTU, SIOCGIFHARDMTU, SIOCGIFRDOMAIN ioctls.
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.41 2011/12/03 23:01:21 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: December 3 2011 $
d506 1
a506 1
.Xr inet 3 ,
@


1.41
log
@Remove an OpenBSD-specific tweak regarding .Xr spacing
and make it compatible with bsd.lv mandoc and with groff-1.21.
This tweak was originally added for compatibility with groff-1.15,
which is no longer needed.

ok jmc@@ kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.40 2009/01/29 19:35:27 claudio Exp $
d33 1
a33 1
.Dd $Mdocdate: January 29 2009 $
d283 6
d326 3
@


1.40
log
@Document SIOCSIFPRIORITY and friend. Found on my HD. OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.39 2008/05/08 13:45:43 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 8 2008 $
d185 1
a185 1
.Xr ioctl 2 's
@


1.39
log
@sort SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.38 2008/05/07 12:04:26 claudio Exp $
d33 1
a33 1
.Dd $Mdocdate: May 7 2008 $
d313 7
@


1.38
log
@More .Xr routed removes. Add the other routing daemons to netintro instead.
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.37 2007/06/11 08:42:01 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 11 2007 $
d505 1
d508 1
a509 2
.Xr route 8 ,
.Xr bgpd 8 ,
d512 1
a512 1
.Xr mrouted 8
@


1.37
log
@+.Xr bluetooth 4 ,
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.36 2007/06/11 00:27:13 uwe Exp $
d33 1
a33 1
.Dd $Mdocdate: June 4 2007 $
d509 4
a512 1
.Xr routed 8
@


1.36
log
@Document the Bluetooth network protocols and mention that there is AF_BLUETOOTH
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.35 2007/06/04 21:34:01 jmc Exp $
d492 1
@


1.35
log
@no more IPX; ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.34 2007/05/31 19:19:51 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d167 1
@


1.34
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.33 2005/06/08 04:17:43 henning Exp $
d126 1
a126 1
Appletalk, Novell's IPX protocols,
a164 1
#define AF_IPX		23	/* Novell Internet Protocol */
a489 1
.Xr ipx 3 ,
@


1.33
log
@stop talking about obsolete network protocols that are gone or about to go
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.32 2005/06/07 23:12:17 henning Exp $
d33 1
a33 1
.Dd September 3, 1994
@


1.32
log
@move description of the default groups to the ifconfog manpage
netintro should only give an intro, not the glory details :) theo ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.31 2005/06/07 21:38:09 henning Exp $
d126 1
a126 2
the Xerox Network Systems(tm) protocols,
CCITT, Appletalk, Novell's IPX protocols,
d132 1
a132 4
Internet, and to the
.Tn IDP
protocol of Xerox
.Tn NS .
a162 2
#define AF_NS		6	/* Xerox NS protocols */
#define AF_CCITT	10	/* CCITT protocols, X.25 etc */
@


1.31
log
@sync ifgroups paragraph with reality
wether it really belongs to netintro to be discussed seperately
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.30 2005/02/27 09:04:03 david Exp $
a111 9
Interfaces may be a member of any number of interface groups.
Cloned interfaces are members of their interface family group by default.
For example, a PPP interface such as
.Li ppp0
is a member of the PPP interface family group,
.Li ppp .
The interface(s) the default route(s) point to are members of the
.Em external
interface group.
@


1.30
log
@spelling fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.29 2004/10/11 22:27:54 jaredy Exp $
d113 1
a113 1
All interfaces are members of their interface family group by default.
d118 3
@


1.29
log
@sync to recent ifgroup changes
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.28 2004/08/21 21:58:15 jaredy Exp $
d257 1
a257 1
This call has been deprecated and superceded by the
d263 1
a263 1
This call has been deprecated and superceded by the
d269 1
a269 1
This call has been deprecated and superceded by the
@


1.28
log
@fix typo introduced by last commit, spotted by jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.27 2004/08/21 21:22:43 jaredy Exp $
d451 4
d460 1
a460 1
		struct	ifgroup *ifgru_groups;
@


1.27
log
@describe interface groups

idea and ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.26 2004/08/15 23:27:35 jaredy Exp $
d111 1
a111 1
referring to any interface by related some criteria.
@


1.26
log
@mdoc fixes
remove OSI and other old stuff
update header file excerpts
misc punctuation, grammar, rewording, etc.
normalize ioctl listing
document interface group ioctls
document interface cloning ioctls (help from FreeBSD)
add some cross-refs

"[mdoc] stuff is fine" jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.25 2004/05/30 21:31:35 jmc Exp $
d108 21
d508 1
@


1.25
log
@add a little .Dv;
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.24 2004/05/29 17:54:46 jcs Exp $
d37 1
a37 1
.Nm networking
d93 3
a95 1
The SYNOPSIS section of each network interface entry gives a sample
d100 3
a102 1
The DIAGNOSTICS section lists messages which may appear on the console
d110 4
a113 5
Internet
protocols, the Xerox Network Systems(tm) protocols,
and some of the
.Tn ISO OSI
protocols.
d127 2
a128 1
All network addresses adhere to a general structure, called a sockaddr,
d135 3
a137 3
	u_int8_t	sa_len;
	sa_family_t	sa_family;
	char		sa_data[14];
d142 1
a142 1
.Ar sa_len
d146 1
a146 1
.Ar sa_family
d150 9
a158 10
#define    AF_UNIX      1    /* local to host (pipes, portals) */
#define    AF_INET      2    /* internetwork: UDP, TCP, etc. */
#define    AF_NS        6    /* Xerox NS protocols */
#define    AF_CCITT     10   /* CCITT protocols, X.25 etc */
#define    AF_HYLINK    15   /* NSC Hyperchannel */
#define    AF_APPLETALK 16   /* AppleTalk */
#define    AF_ISO       18   /* ISO protocols */
#define    AF_IPX       23   /* Novell Internet Protocol */
#define    AF_INET6     24   /* IPv6 */
#define    AF_NATM      27   /* native ATM access */
d160 5
d175 2
a176 2
This supplants fixed size
.Xr ioctl 2
d197 1
a197 1
Most of the requests supported in earlier releases
d199 3
a201 3
.Ar ifreq
structure as its parameter.
This structure has the form
d204 2
a205 2
#define    IFNAMSIZ    16
	char    ifr_name[IFNAMSIZ];         /* if name, e.g. "en0" */
d207 6
a212 6
	        struct    sockaddr ifru_addr;
	        struct    sockaddr ifru_dstaddr;
	        struct    sockaddr ifru_broadaddr;
	        short     ifru_flags;
	        int       ifru_metric;
	        caddr_t   ifru_data;
d214 8
a221 7
#define ifr_addr      ifr_ifru.ifru_addr    /* address */
#define ifr_dstaddr   ifr_ifru.ifru_dstaddr /* other end of p-to-p link */
#define ifr_broadaddr ifr_ifru.ifru_broadaddr /* broadcast address */
#define ifr_flags     ifr_ifru.ifru_flags   /* flags */
#define ifr_metric    ifr_ifru.ifru_metric  /* metric */
#define ifr_media     ifr_ifru.ifru_metric  /* media options (overload) */
#define ifr_data      ifr_ifru.ifru_data    /* for use by interface */
d225 9
a233 5
Calls which are now deprecated are:
.Bl -tag -width SIOCGIFBRDADDR
.It Dv SIOCSIFADDR
Set interface address for protocol family.
Following the address assignment, the ``initialization'' routine for the
a234 5
.It Dv SIOCSIFDSTADDR
Set point to point address for protocol family and interface.
.It Dv SIOCSIFBRDADDR
Set broadcast address for protocol family and interface.
.El
d236 24
a259 16
.Xr ioctl 2
requests to obtain addresses and requests both to set and
retrieve other data are still fully supported
and use the
.Ar ifreq
structure:
.Bl -tag -width SIOCGIFBRDADDR
.It Dv SIOCGIFADDR
Get interface address for protocol family.
.It Dv SIOCGIFDSTADDR
Get point to point address for protocol family and interface.
.It Dv SIOCGIFBRDADDR
Get broadcast address for protocol family and interface.
.It Dv SIOCGIFDESCR
Get interface description, returned in the
.Ar ifru_data
d261 3
a263 3
.It Dv SIOCSIFDESCR
Set interface description to the value of the
.Ar ifru_data
d266 2
a267 2
.It Dv SIOCSIFFLAGS
Set interface flags field.
d272 4
a275 4
.It Dv SIOCGIFFLAGS
Get interface flags.
.It Dv SIOCSIFMEDIA
Set interface media.
d279 17
a295 2
.It Dv SIOCGIFMEDIA
Get interface media.
d299 2
a300 2
.It Dv SIOCSIFMETRIC
Set interface routing metric.
d302 3
a304 7
.It Dv SIOCGIFMETRIC
Get interface metric.
.El
.Pp
There are two requests that make use of a new structure:
.Bl -tag -width SIOCGIFBRDADDR
.It Dv SIOCAIFADDR
d310 1
d312 8
a319 4
or network masks (now an integral feature of multiple protocols) a separate
structure is used to specify all three facets simultaneously (see below).
One would use a slightly tailored version of this struct specific
to each family (replacing each sockaddr by one
d321 3
a323 4
Where the sockaddr itself is larger than the
default size, one needs to modify the
.Xr ioctl 2
identifier itself to include the total size, as described in
d325 14
a338 1
.It Dv SIOCDIFADDR
d342 1
a342 1
.Ar if_aliasreq
d348 2
a349 2
.It Dv SIOCGIFCONF
Get interface configuration list.
d351 1
a351 1
.Ar ifconf
d354 1
a354 1
.Ar ifc_len
d357 1
a357 1
.Ar ifc_buf .
d360 1
d362 1
a362 1
.Ar ifc_len
d366 1
a366 1
.Ar ifc_len
d368 2
a369 2
.Ar ifc_buf
needs to be to fit the entire configuration list and not
d372 1
a372 1
.Ar ifc_buf
a375 1
.El
d377 42
a418 8
/*
* Structure used in SIOCAIFADDR request.
*/
struct ifaliasreq {
        char    ifra_name[IFNAMSIZ];   /* if name, e.g. "en0" */
        struct  sockaddr        ifra_addr;
        struct  sockaddr        ifra_broadaddr;
        struct  sockaddr        ifra_mask;
d421 8
d430 3
a432 8
/*
* Structure used in SIOCGIFCONF request.
* Used to retrieve interface configuration
* for machine (useful for programs which
* must know all networks accessible).
*/
struct ifconf {
	int   ifc_len;		/* size of associated buffer */
d434 5
a438 5
		caddr_t    ifcu_buf;
	        struct     ifreq *ifcu_req;
	} ifc_ifcu;
#define ifc_buf ifc_ifcu.ifcu_buf /* buffer address */
#define ifc_req ifc_ifcu.ifcu_req /* array of structures returned */
d441 32
d474 1
d477 3
d482 1
d484 7
d492 3
d498 1
a498 1
.Nm netintro
d500 1
a500 1
.Bx 4.3 tahoe .
@


1.24
log
@introduce SIOCSIFDESCR and SIOCGIFDESCR to maintain interface
descriptions, configurable with ifconfig

help from various, ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.23 2003/11/09 16:06:07 jmc Exp $
d248 2
a249 1
field, limited to the size of IFDESCRSIZE.
@


1.23
log
@remove .Pp's before lists and displays;
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.22 2003/06/06 10:29:41 jmc Exp $
d241 8
@


1.22
log
@- section reorder
- some macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.21 2003/06/02 23:30:12 millert Exp $
a333 1
.Pp
@


1.21
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.20 2002/09/26 07:55:40 miod Exp $
d175 1
a175 1
path through which messages may be sent and received. 
@


1.20
log
@Incomplete section 4 mi manual page cleanup.
- make configuration lines match GENERIC files
- more Xr (hopefully usefule Xr)
- never mention intro(4) on non-physical devices (i.e. protocols), always
mention it for physical devices
- random text style and quoting fixes
- drivers ported from FreeBSD did mention rc.conf instead of hostname.if as
the place to put mediaopt
- some .Tn UNIX -> .Ox replacements
- etc, etc...

reviewd in part by deraadt@@ (until he got bored of this)
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.19 2001/11/13 13:54:25 mpech Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.19
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.18 2001/10/05 14:45:53 mpech Exp $
d162 1
a162 1
.Tn UNIX
@


1.18
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.17 2001/03/01 16:11:18 aaron Exp $
d186 1
a186 1
.Xr ioctl
d189 1
a189 1
.Xr ioctl
d232 1
a232 1
.Xr Ioctl
d286 1
a286 1
.Xr ioctl
d288 1
a288 1
.Xr ioctl .
@


1.17
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.16 2000/02/19 14:41:11 deraadt Exp $
d62 6
a67 6
network environment.  These services may include
packet fragmentation and reassembly, routing, addressing, and
basic transport.  A protocol family may support multiple
methods of addressing, though the current protocol implementations
do not.  A protocol family is normally comprised of a number
of protocols, one per
d69 4
a72 3
type.  It is not required that a protocol family support
all socket types.  A protocol family may contain multiple
protocols supporting the same socket abstraction.
d83 5
a87 4
protocol specific.  All protocols are expected to support
the basic model for their particular socket type, but may,
in addition, provide non-standard facilities or extensions
to a mechanism.  For example, a protocol supporting the
d95 5
a99 6
hardware.  An interface may support one or more protocol
families and/or address formats.
The SYNOPSIS section of each network interface
entry gives a sample specification
of the related drivers for use in providing
a system description to the
d127 5
a131 4
format.  All network addresses adhere to a general structure,
called a sockaddr, described below. However, each protocol
imposes a finer, more specific structure, generally renaming
the variant, which is discussed in the protocol family manual
d179 3
a181 3
path through which messages may be sent and received.  A network
interface usually has a hardware device associated with it, though
certain interfaces such as the loopback interface,
d196 2
a197 1
structure as its parameter.  This structure has the form
d223 3
a225 3
Set interface address for protocol family.  Following the address
assignment, the ``initialization'' routine for
the interface is called.
d246 4
a249 4
Set interface flags field.  If the interface is marked down,
any processes currently routing packets through the interface
are notified;
some interfaces may be reset so that incoming packets are no longer received.
d254 2
a255 1
Set interface media. See
d259 2
a260 1
Get interface media. See
d274 7
a280 8
in some protocols.  This request provides a means to
add additional addresses (or modify characteristics of the
primary address if the default address for the address family
is specified).  Rather than making separate calls to
set destination or broadcast addresses, or network masks
(now an integral feature of multiple protocols)
a separate structure is used to specify all three facets simultaneously
(see below).
d291 2
a292 1
associated with an interface.  It also uses the
d300 2
a301 1
Get interface configuration list.  This request takes an
d303 2
a304 1
structure (see below) as a value-result parameter.  The
d310 2
a311 1
configuration list.  Alternately, if the
d323 2
a324 1
needs to be in advance.  Note, however, that this is an extension
@


1.16
log
@documentation updates; paik@@webnexus.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.15 1999/07/09 13:35:47 aaron Exp $
d257 1
a257 1
for interpretting this value.
@


1.15
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.14 1999/07/02 20:11:49 aaron Exp $
d133 3
a135 3
	u_char	sa_len;
    	u_char	sa_family;
    	char	sa_data[14];
@


1.14
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.13 1999/06/05 13:18:32 aaron Exp $
d62 2
a63 2
network environment.  These services may include 
packet fragmentation and reassembly, routing, addressing, and 
d71 1
a71 1
protocols supporting the same socket abstraction. 
d183 1
a183 1
The following 
d191 1
a191 1
Most of the requests supported in earlier releases 
d297 1
a297 1
structure (see below) as a value-result parameter.  The 
d300 1
a300 1
pointed to by 
@


1.13
log
@more .Os cleanup, remove some trailing whitespace, cleanse some .Nm
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.12 1999/05/16 19:56:32 alex Exp $
d37 1
a37 1
.Dd Sept 3, 1994
@


1.12
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.11 1999/02/26 19:56:32 jason Exp $
d39 1
a39 1
.Os BSD 4.2
@


1.11
log
@Xr bridge(4)
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.10 1999/02/16 01:24:46 millert Exp $
d348 1
a349 2
.Xr ioctl 2 ,
.Xr intro 4 ,
d352 1
@


1.10
log
@mention that SIOCGIFCONF with ifc_len = 0 is an extension
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.9 1998/11/18 01:46:30 aaron Exp $
d351 2
a353 1
.Xr ifmedia 4 ,
@


1.9
log
@paramaters -> parameters
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.8 1998/09/05 17:41:49 deraadt Exp $
d315 2
a316 1
needs to be in advance.
@


1.8
log
@more man page repairs; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: netintro.4,v 1.7 1998/09/03 23:08:10 jason Exp $
d312 1
a312 1
fill in the other paramaters.
@


1.7
log
@Documentation for ifmedia & updated ifconfig usage
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d128 1
a128 1
imposes finer and more specific structure, generally renaming
d141 1
a141 1
contains the total length of the of the structure,
d153 1
a153 1
#define    AF_APPLETALK 16   /* Apple Talk */
d286 1
a286 1
This requests deletes the specified address from the list
@


1.6
log
@indent nicer
@
text
@d1 1
d37 1
a37 1
.Dd November 30, 1993
d212 1
d250 8
d351 1
@


1.5
log
@mention new SIOCGIFCONF semantics
@
text
@d131 1
a131 1
    struct sockaddr {
d135 1
a135 1
    };
d197 9
a205 9
    char    ifr_name[IFNAMSIZ];         /* if name, e.g. "en0" */
    union {
        struct    sockaddr ifru_addr;
        struct    sockaddr ifru_dstaddr;
        struct    sockaddr ifru_broadaddr;
        short     ifru_flags;
        int       ifru_metric;
        caddr_t   ifru_data;
    } ifr_ifru;
d327 5
a331 5
    int   ifc_len;		/* size of associated buffer */
    union {
        caddr_t    ifcu_buf;
        struct     ifreq *ifcu_req;
    } ifc_ifcu;
@


1.4
log
@fix small typo, indent a "}" and add some AF_ examples that reflect what the current kernel has in it
@
text
@d293 13
a305 1
configuration list.
@


1.3
log
@SIOCAIFCONF -> SIOCAIFADDR
@
text
@d125 1
a125 1
format.  All network address adhere to a general structure,
d135 1
a135 1
};
d152 1
d154 3
@


1.2
log
@update from netbsd
@
text
@d293 1
a293 1
* Structure used in SIOCAIFCONF request.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: netintro.4,v 1.3 1994/11/30 16:22:24 jtc Exp $
d193 1
a193 1
    char    ifr_name[IFNAMSIZE];        /* if name, e.g. "en0" */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
