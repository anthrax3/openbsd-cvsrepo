head	1.86;
access;
symbols
	OPENBSD_6_1:1.85.0.4
	OPENBSD_6_1_BASE:1.85
	OPENBSD_6_0:1.81.0.4
	OPENBSD_6_0_BASE:1.81
	OPENBSD_5_9:1.80.0.2
	OPENBSD_5_9_BASE:1.80
	OPENBSD_5_8:1.77.0.6
	OPENBSD_5_8_BASE:1.77
	OPENBSD_5_7:1.77.0.4
	OPENBSD_5_7_BASE:1.77
	OPENBSD_5_6:1.76.0.4
	OPENBSD_5_6_BASE:1.76
	OPENBSD_5_5:1.75.0.8
	OPENBSD_5_5_BASE:1.75
	OPENBSD_5_4:1.75.0.4
	OPENBSD_5_4_BASE:1.75
	OPENBSD_5_3:1.75.0.2
	OPENBSD_5_3_BASE:1.75
	OPENBSD_5_2:1.73.0.4
	OPENBSD_5_2_BASE:1.73
	OPENBSD_5_1_BASE:1.73
	OPENBSD_5_1:1.73.0.2
	OPENBSD_5_0:1.72.0.2
	OPENBSD_5_0_BASE:1.72
	OPENBSD_4_9:1.71.0.2
	OPENBSD_4_9_BASE:1.71
	OPENBSD_4_8:1.68.0.2
	OPENBSD_4_8_BASE:1.68
	OPENBSD_4_7:1.67.0.2
	OPENBSD_4_7_BASE:1.67
	OPENBSD_4_6:1.58.0.6
	OPENBSD_4_6_BASE:1.58
	OPENBSD_4_5:1.58.0.2
	OPENBSD_4_5_BASE:1.58
	OPENBSD_4_4:1.54.0.2
	OPENBSD_4_4_BASE:1.54
	OPENBSD_4_3:1.51.0.4
	OPENBSD_4_3_BASE:1.51
	OPENBSD_4_2:1.51.0.2
	OPENBSD_4_2_BASE:1.51
	OPENBSD_4_1:1.48.0.2
	OPENBSD_4_1_BASE:1.48
	OPENBSD_4_0:1.47.0.2
	OPENBSD_4_0_BASE:1.47
	OPENBSD_3_9:1.42.0.2
	OPENBSD_3_9_BASE:1.42
	OPENBSD_3_8:1.41.0.4
	OPENBSD_3_8_BASE:1.41
	OPENBSD_3_7:1.41.0.2
	OPENBSD_3_7_BASE:1.41
	OPENBSD_3_6:1.36.0.4
	OPENBSD_3_6_BASE:1.36
	OPENBSD_3_5:1.36.0.2
	OPENBSD_3_5_BASE:1.36
	OPENBSD_3_4:1.34.0.2
	OPENBSD_3_4_BASE:1.34
	OPENBSD_3_3:1.32.0.2
	OPENBSD_3_3_BASE:1.32
	OPENBSD_3_2:1.31.0.2
	OPENBSD_3_2_BASE:1.31
	OPENBSD_3_1:1.29.0.2
	OPENBSD_3_1_BASE:1.29
	OPENBSD_3_0:1.28.0.2
	OPENBSD_3_0_BASE:1.28
	OPENBSD_2_9:1.26.0.2
	OPENBSD_2_9_BASE:1.26
	OPENBSD_2_8:1.24.0.2
	OPENBSD_2_8_BASE:1.24
	OPENBSD_2_7:1.18.0.2
	OPENBSD_2_7_BASE:1.18
	OPENBSD_2_6:1.17.0.2
	OPENBSD_2_6_BASE:1.17
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.12.0.2
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.86
date	2017.04.22.11.05.04;	author visa;	state Exp;
branches;
next	1.85;
commitid	8d11vHFT1NT6Mdii;

1.85
date	2017.01.24.05.32.00;	author mpi;	state Exp;
branches;
next	1.84;
commitid	KfcP9FTEfsck0Mcw;

1.84
date	2017.01.24.04.50.48;	author mpi;	state Exp;
branches;
next	1.83;
commitid	7fSfbVLUln1cPk3S;

1.83
date	2017.01.24.01.01.33;	author mpi;	state Exp;
branches;
next	1.82;
commitid	dXKi2sw36dd8GkZk;

1.82
date	2016.09.01.12.24.56;	author jmc;	state Exp;
branches;
next	1.81;
commitid	IUrwpb4m8FAj1LFc;

1.81
date	2016.03.10.08.56.46;	author jmc;	state Exp;
branches;
next	1.80;
commitid	91ECB8w31p15ryU4;

1.80
date	2016.01.15.11.39.28;	author dlg;	state Exp;
branches;
next	1.79;
commitid	MweBs5hY44i3hWib;

1.79
date	2015.09.11.08.34.35;	author guenther;	state Exp;
branches;
next	1.78;
commitid	OsSj1hNnF1qMR5HS;

1.78
date	2015.08.29.00.01.54;	author guenther;	state Exp;
branches;
next	1.77;
commitid	WqqEZv8b4MZdPudP;

1.77
date	2015.02.16.16.38.54;	author naddy;	state Exp;
branches;
next	1.76;
commitid	ne9aoqc3owhFBWUD;

1.76
date	2014.03.18.22.36.31;	author miod;	state Exp;
branches;
next	1.75;

1.75
date	2012.11.14.22.19.02;	author jmc;	state Exp;
branches;
next	1.74;

1.74
date	2012.11.11.18.28.17;	author guenther;	state Exp;
branches;
next	1.73;

1.73
date	2011.11.07.20.29.56;	author miod;	state Exp;
branches;
next	1.72;

1.72
date	2011.07.05.07.08.25;	author tedu;	state Exp;
branches;
next	1.71;

1.71
date	2010.11.27.19.59.10;	author miod;	state Exp;
branches;
next	1.70;

1.70
date	2010.11.27.19.57.21;	author miod;	state Exp;
branches;
next	1.69;

1.69
date	2010.11.05.15.18.54;	author claudio;	state Exp;
branches;
next	1.68;

1.68
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2010.02.03.00.41.00;	author jsing;	state Exp;
branches;
next	1.66;

1.66
date	2009.11.22.00.04.48;	author miod;	state Exp;
branches;
next	1.65;

1.65
date	2009.08.17.13.12.11;	author jasper;	state Exp;
branches;
next	1.64;

1.64
date	2009.08.15.07.04.52;	author jmc;	state Exp;
branches;
next	1.63;

1.63
date	2009.08.14.21.27.03;	author thib;	state Exp;
branches;
next	1.62;

1.62
date	2009.08.13.20.13.04;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2009.08.13.17.50.02;	author thib;	state Exp;
branches;
next	1.60;

1.60
date	2009.08.10.04.53.58;	author jmc;	state Exp;
branches;
next	1.59;

1.59
date	2009.08.09.23.04.47;	author miod;	state Exp;
branches;
next	1.58;

1.58
date	2009.02.22.15.10.41;	author jsing;	state Exp;
branches;
next	1.57;

1.57
date	2009.01.18.13.36.56;	author thib;	state Exp;
branches;
next	1.56;

1.56
date	2008.12.23.10.05.24;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2008.09.01.05.45.54;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2008.05.18.06.53.56;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2008.03.23.20.22.33;	author miod;	state Exp;
branches;
next	1.52;

1.52
date	2008.03.23.12.31.56;	author miod;	state Exp;
branches;
next	1.51;

1.51
date	2007.05.31.19.19.50;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2007.03.18.15.27.56;	author mickey;	state Exp;
branches;
next	1.49;

1.49
date	2007.03.15.17.10.20;	author miod;	state Exp;
branches;
next	1.48;

1.48
date	2006.11.28.18.56.17;	author uwe;	state Exp;
branches;
next	1.47;

1.47
date	2006.07.06.18.16.19;	author miod;	state Exp;
branches;
next	1.46;

1.46
date	2006.06.17.17.33.33;	author miod;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.21.15.55.02;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2006.05.20.18.31.50;	author mickey;	state Exp;
branches;
next	1.43;

1.43
date	2006.05.03.21.51.29;	author miod;	state Exp;
branches;
next	1.42;

1.42
date	2005.12.15.01.37.32;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2005.03.07.23.41.54;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2005.01.04.10.28.35;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2005.01.03.22.55.03;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2005.01.03.22.44.43;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2005.01.03.16.49.54;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2004.02.01.12.23.47;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.10.22.06.38.55;	author mcbride;	state Exp;
branches;
next	1.34;

1.34
date	2003.07.09.13.26.20;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2003.05.12.20.03.35;	author mickey;	state Exp;
branches;
next	1.32;

1.32
date	2003.03.16.10.18.44;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2002.09.10.13.15.38;	author mpech;	state Exp;
branches;
next	1.30;

1.30
date	2002.04.25.20.27.43;	author ian;	state Exp;
branches;
next	1.29;

1.29
date	2002.01.28.19.53.41;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2001.08.24.11.21.02;	author hugh;	state Exp;
branches;
next	1.27;

1.27
date	2001.08.03.15.21.16;	author mpech;	state Exp;
branches;
next	1.26;

1.26
date	2001.04.18.23.18.56;	author art;	state Exp;
branches;
next	1.25;

1.25
date	2001.03.01.16.11.16;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	2000.07.29.00.58.24;	author marc;	state Exp;
branches;
next	1.23;

1.23
date	2000.07.09.20.56.29;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	2000.07.02.02.44.04;	author ericj;	state Exp;
branches;
next	1.21;

1.21
date	2000.06.09.23.05.19;	author mickey;	state Exp;
branches;
next	1.20;

1.20
date	2000.06.07.11.30.49;	author art;	state Exp;
branches;
next	1.19;

1.19
date	2000.06.07.09.44.27;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.15.11.45.51;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.09.21.22.30.08;	author d;	state Exp;
branches;
next	1.16;

1.16
date	99.09.05.16.20.15;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	99.07.09.13.35.48;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.05.16.19.56.21;	author alex;	state Exp;
branches;
next	1.13;

1.13
date	99.02.23.10.58.28;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	98.09.01.16.38.20;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	98.06.12.12.01.11;	author d;	state Exp;
branches;
next	1.10;

1.10
date	97.12.10.06.15.54;	author gene;	state Exp;
branches;
next	1.9;

1.9
date	97.11.04.21.16.31;	author chuck;	state Exp;
branches;
next	1.8;

1.8
date	97.10.13.04.32.15;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.07.06.19.46.10;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.06.15.02.05.59;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.06.12.02.55.48;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.06.11.23.33.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.04.07.04.31;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.04.15.22.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.86
log
@Shuffle bits into their proper files.

Prompted by jmc@@
@
text
@.\"	$OpenBSD: ddb.4,v 1.85 2017/01/24 05:32:00 mpi Exp $
.\"	$NetBSD: ddb.4,v 1.5 1994/11/30 16:22:09 jtc Exp $
.\"
.\" Mach Operating System
.\" Copyright (c) 1991,1990 Carnegie Mellon University
.\" All Rights Reserved.
.\"
.\" Permission to use, copy, modify and distribute this software and its
.\" documentation is hereby granted, provided that both the copyright
.\" notice and this permission notice appear in all copies of the
.\" software, derivative works or modified versions, and any portions
.\" thereof, and that both notices appear in supporting documentation.
.\"
.\" CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
.\" CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
.\" ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
.\"
.\" Carnegie Mellon requests users of this software to return to
.\"
.\"  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
.\"  School of Computer Science
.\"  Carnegie Mellon University
.\"  Pittsburgh PA 15213-3890
.\"
.\" any improvements or extensions that they make and grant Carnegie Mellon
.\" the rights to redistribute these changes.
.\"
.Dd $Mdocdate: January 24 2017 $
.Dt DDB 4
.Os
.Sh NAME
.Nm ddb
.Nd kernel debugger
.Sh DESCRIPTION
The
.Nm
debugger provides a means for debugging the kernel,
and analysing the kernel after a system crash ("panic"), with a
.Xr gdb 1 Ns \&-like
syntax.
.Pp
.Nm
is invoked upon a kernel panic when the
.Xr sysctl 8
.Va ddb.panic
is set to 1.
It may be invoked from the console when the sysctl
.Va ddb.console
is set to 1, using any of the following methods:
.Bl -dash -offset 3n
.It
Using the key sequence
.Li Ctrl-Alt-Esc .
.It
Sending a
.Dv BREAK
when using a serial console.
.It
Writing to the sysctl
.Va ddb.trigger .
.It
For i386 and amd64 architectures,
using the key sequence
.Li Ctrl-Alt-Delete
when the sysctl
.Va machdep.kbdreset
is set to 2.
.El
.Pp
.Nm
prompts for commands on the console with:
.Pp
.Dl ddb>
.Pp
The general syntax of a
.Nm
command is:
.Bd -ragged -offset indent
.Ar command
.Oo Ic / Ns Ar modifiers Oc " "
.Oo Ar address Oc Ns
.Op Ic \&, Ns Ar count
.Ed
.Pp
To save typing,
.Nm
makes use of a context inferred from previous commands.
In this context,
the current location is called
.Va dot .
.\" The
.\" .Va dot
.\" is displayed with
.\" a hexadecimal format at a prompt.
The
.Ic examine ,
.Ic search ,
.Ic show struct ,
and
.Ic write
commands update
.Va dot
to be that of the last address
examined or the last location modified, and
have intuitive effects on
.Va next
and
.Va prev .
All the other commands do not change
.Va dot ,
and set
.Va next
to be the same.
(See
.Sx VARIABLES . )
.Pp
.\" Specifying
.\" .Ar address
.\" in a command sets
.\" .Va dot .
An expression can be used in place of
.Ar address
(see
.Sx EXPRESSIONS ) .
Omitting
.Ar address
in a command uses the last value of
.Va dot .
A missing
.Ar count
is taken to be 1 for printing commands or \*(If
for stack traces.
Entering a blank line causes the last command to be repeated using
.Va next
in place of
.Ar address ,
a
.Ar count
of 1, and no modifiers.
.Pp
.Nm
has a feature like
.Xr more 1
for the output.
If the number of lines output in response to one command exceeds the number
set in the
.Va $lines
variable, it displays the message
.Ql "--db_more--"
and waits for a response.
.Pp
The valid responses are:
.Pp
.Bl -tag -width 10n -offset indent -compact
.It Aq Ic space
One more page.
.It Aq Ic return
One more line.
.It Ic q
Abort the current command, and return to the command input mode.
.El
.Pp
The following command line editing keys are provided:
.Pp
.Bl -tag -width 10n -offset indent -compact
.It Ic ^b
back one character
.It Ic ^f
forward one character
.It Ic ^a
beginning of line
.It Ic ^e
end of line
.It Ic ^w
erase word back
.It Ic ^h | Aq Ic del
erase previous character
.It Ic ^d
erase next character
.It Ic ^k
delete to end of line
.It Ic ^u
delete line
.It Ic ^p
previous in command history
.It Ic ^n
next in command history
.It Ic ^r
redraw line
.It Ic ^t
exchange the two characters to the left of the cursor
.El
.Sh COMMANDS
The following commands may be typed at the
.Ql ddb>
prompt.
Some commands consist of more than one word, and if only the first word
or words are entered, the possible alternatives to complete the command
are displayed and no other action is performed.
.Bl -tag -width 10n
.\" --------------------
.It Ic help
List the available commands.
.\" --------------------
.It Xo
.Oo Ic e Oc Ns
.Ic x Ns Op Ic amine
.Op Cm /bhlqaAxzodurcsmiI
.Op Ar addr Ns
.Op Ic \&, Ns Ar count
.Xc
Display the contents at address
.Ar addr
according to the formats in the modifier.
If no format is specified, the last formats specified for this command
are used.
.Pp
The format characters are:
.Pp
.Bl -tag -width 4n -compact
.It Cm /b
look at by bytes (8 bits)
.It Cm /h
look at by half words (16 bits)
.It Cm /l
look at by long words (32 bits) (default)
.It Cm /q
look at by long longs (64 bits) (only available on 64-bit platforms)
.It Cm /a
print the location being displayed
.It Cm /A
print the location with a line number if possible
.It Cm /x
display in unsigned hex
.It Cm /z
display in signed hex
.It Cm /o
display in unsigned octal
.It Cm /d
display in signed decimal
.It Cm /u
display in unsigned decimal
.It Cm /r
display in current radix, signed
.It Cm /c
display low 8 bits as a character.
Non-printing characters are displayed as an octal escape code (e.g., '\e000').
.It Cm /s
display the null-terminated string at the location.
Non-printing characters are displayed as octal escapes.
.It Cm /m
display in unsigned hex with character dump at the end of each line.
The location is also displayed in hex at the beginning of each line.
.It Cm /i
display as an instruction
.It Cm /I
display as an alternate format instruction depending on the
machine:
.Pp
.Bl -tag -width powerpc_ -compact
.It alpha
Print affected register contents for every instruction.
.It amd64 ,
.It i386
Do not skip padding to the next long word boundary for unconditional jumps.
.It m88k
Decode instructions for the opposite CPU model (e.g. m88110 when running on an
m88100 processor).
.El
.El
.Pp
The value of
.Va next
is set to the
.Ar addr
plus the size of the data examined.
.\" --------------------
.It Xo
.Ic print
.Op Cm /axzodurc
.Op Ar addr Op Ar addr ...
.Xc
Print each
.Ar addr
according to the modifier character.
The valid modifiers are a subset of those from the
.Ic examine
command, and act as described there.
If no modifier is specified, the last one specified in a
previous use of
.Ic print
is used.
The
.Ar addr
argument
can be a string, and it is printed as a literal.
.Pp
For example,
.Bd -literal -offset indent
print/x "eax = " $eax "\enecx = " $ecx "\en"
.Ed
.Pp
will print something like this:
.Bd -literal -offset indent
eax = xxxxxx
ecx = yyyyyy
.Ed
.\" --------------------
.\" .It Xo Ic w Ns Op Cm /bhl
.\" .Op Ar addr
.\" .Ar expr Op expr ...
.\" .Xc
.It Xo
.Ic w Ns Op Ic rite
.Op Cm /bhl
.Op Ar addr
.Ar expr Op Ar expr ...
.Xc
Write the value of each
.Ar expr
expression at succeeding locations start at
.Ar addr .
The write unit size can be specified using one of the modifiers:
.Pp
.Bl -tag -width 4n -offset indent -compact
.It Cm /b
byte (8 bits)
.It Cm /h
half word (16 bits)
.It Cm /l
long word (32 bits) (default)
.El
.Pp
The value of
.Va next
is set to
.Ar addr
plus the size of values written.
.Pp
.Sy Warning:
since there is no delimiter between expressions, the
command may not parse as you expect.
It is best to enclose each expression in parentheses.
.\" --------------------
.It Xo Ic set
.Ic $ Ns Ar name
.Op Ic =
.Ar expr
.Xc
Set the named variable or register with the value of
.Ar expr .
Valid variable names are described below.
.\" --------------------
.It Ic boot Ar how
Reboot the machine depending on
.Ar how :
.Pp
.Bl -tag -width "boot poweroff" -compact
.It Ic boot sync
Sync disks and reboot.
.It Ic boot crash
Dump core and reboot.
.It Ic boot dump
Sync disks, dump core and reboot.
.It Ic boot halt
Just halt.
.It Ic boot reboot
Just reboot.
.It Ic boot poweroff
Power down the machine whenever possible; if it fails, just halt.
.El
.\" --------------------
.It Xo
.Ic break
.Op Ar addr Ns
.Op Ic \&, Ns Ar count
.Xc
Set a break point at
.Ar addr .
If
.Ar count
is supplied,
.Nm
allows the breakpoint to be silently hit
.Ar ( count No \- 1 )
times before stopping at the
break point.
.Pp
If the break point is successfully set, a break point number is
displayed, in the form
.Ic # Ns Ar number .
This can later be used in deleting the break point
or for adding conditions to it.
.\" --------------------
.\" .It Xo Ic d
.\" .Op Ar addr | Ic # Ns Ar number
.\" .Xc
.It Xo
.Ic d Ns Op Ic elete
.Op Ar addr | Ic # Ns Ar number
.Xc
Delete the break point set with the
.Ic break
command.
.\" --------------------
.\" .It Xo Ic s Ns Op Cm /p
.\" .Op Ic \&, Ns Ar count
.\" .Xc
.It Xo
.Ic s Ns Op Ic tep
.Op Cm /p
.Op Ic \&, Ns Ar count
.Xc
Single step
.Ar count
times.
If the
.Cm /p
modifier is specified, print each instruction at each step.
Otherwise, only print the last instruction.
.Pp
.Sy Warning:
depending on machine type, it may not be possible to
single-step through some low-level code paths.
On machines with software-emulated single-stepping (e.g., alpha),
stepping through code executed by interrupt handlers will probably
do the wrong thing.
.\" --------------------
.It Ic call Ar name Ns Xo
.Ic \&( Ns Ar expr
.Op Ic \&, Ar expr ...
.Ic \&)
.Xc
Call the function named by
.Ar name
with the argument(s) listed in parentheses.
Parentheses may be omitted if the function takes no arguments.
The number of arguments is currently limited to 10.
.\" --------------------
.\" .It Ic c Ns Op Cm /c
.It Xo
.Ic c Ns Op Ic ontinue
.Op Cm /c
.Xc
Continue execution until a breakpoint or watchpoint.
If the
.Cm /c
modifier is given, instructions are counted while executing.
.Pp
.Sy Warning:
when counting with
.Cm /c ,
.Nm
is really silently single-stepping.
This means that single-stepping on low-level code may cause strange
behavior.
.\" --------------------
.It Xo
.Ic watch
.Ar addr
.Op Ic \&, Ns Ar size
.Xc
Set a watchpoint for the region starting at
.Ar addr .
Execution stops and control returns to
.Nm
when an attempt is made to modify a watched region.
The
.Ar size
argument defaults to 4.
.Pp
If you specify a wrong space address, the request is rejected
with an error message.
.Pp
.Sy Warning:
attempts to watch wired kernel memory
may cause an unrecoverable error on some systems (e.g., i386).
.\" --------------------
.It Ic dwatch Ar addr
Delete the watchpoint at address
.Ar addr
that was previously set with a
.Ic watch
command.
.\" --------------------
.It Xo
.Ic hangman
.Op Cm /s Ns Op Ic 0-9
.Xc
This is a tiny and handy tool for random kernel hangs analysis, of which its
depth is controlled by the optional argument of the default value of five.
It uses some sophisticated heuristics to spot the global symbol that
caused the hang.
Since the discovering algorithm is a probabilistic one,
you may spend substantial time to figure the exact symbol name.
This smart thing requires a little of your attention, the input it accepts
is mostly of the same format as that of the famous
.Xr hangman 6
game, to which it, apparently, is obliged by the name.
Hint: the
.Xr nm 1
utility might help.
.\" --------------------
.It Ic until Op Cm /p
Stop at the next
.Qq call
or
.Qq return
instruction.
If the
.Cm /p
modifier is specified,
.Nm
prints the call nesting depth and the
cumulative instruction count at each call or return.
Otherwise, it stays silent until the matching return is hit.
.\" --------------------
.It Ic match Op Cm /p
Stop at the next matching return instruction.
If the
.Cm /p
modifier is specified,
.Nm
prints the call nesting depth and the
cumulative instruction count at each call or return.
Otherwise, it remains mostly quiet.
.\" --------------------
.It Ic next Op Cm /p
The
.Ic next
command is a synonym for
.Ic match .
.\" --------------------
.It Xo
.Ic trace
.Op Cm /pu
.Op Ar frameaddr Ns
.Op Ic \&, Ns Ar count
.Xc
Show the stack trace.
The
.Cm /p
modifier interprets the
.Ar frameaddr
argument as the TID of a process and shows the stack trace of
that process.
The
.Cm /p
modifier is not supported on all platforms.
The
.Cm /u
modifier shows the stack trace of user space;
if omitted, the kernel stack is traced instead.
The
.Ar count
argument is the limit on the number of frames to be followed.
If
.Ar count
is omitted, all frames are printed.
.Pp
.Sy Warning:
user space stack trace is valid
only if the machine dependent code supports it.
.\" --------------------
.It Xo
.Ic search
.Op Cm /bhl
.Op Ar addr
.Ar value
.Op Ar mask
.Op Ic \&, Ns Ar count
.Xc
Search memory for a value beginning at
.Ar addr .
This command might fail in interesting
ways if it doesn't find the searched-for value.
This is because
.Nm
doesn't always recover from touching bad memory.
The optional
.Ar count
argument limits the search.
The modifiers are the same as those of the
.Ic write
command.
.Pp
The
.Va next
address is set to the address where
.Ar value
is found, or just after where the search area finishes.
.\" --------------------
.It Ic show Ar what
Displays various things, depending on
.Ar what :
.Bl -tag -width 4n
.\" --------------------
.It Ic show bcstats
Prints the buffer cache statistics.
.\" --------------------
.It Ic show breaks
Prints a list of all breakpoints that have been set with the
.Ic break
command.
.\" --------------------
.It Xo
.Ic show buf
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li struct buf
at
.Ar addr .
If the
.Cm /f
modifier is specified output will also include
.Li softdep
printout, if those are available.
.\" --------------------
.It Ic show extents
Prints a detailed list of all extents.
.\" --------------------
.It Ic show locks Op Ar addr
Prints the list of locks held by a thread.
If an optional address is not specified,
.Li curproc
is assumed.
The
.Cm option WITNESS
is required for this command to be available.
.\" --------------------
.It Ic show malloc Op Ar addr
Prints malloc debugging information if available.
If an optional address is specified, only information about that address
is printed.
.\" --------------------
.It Xo
.Ic show map
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li vm_map
at
.Ar addr .
If the
.Cm /f
modifier is specified the complete map is printed.
.\" --------------------
.It Ic show mbuf Ar addr
Prints the
.Li struct mbuf
header at
.Ar addr .
Depending on the mbuf flags
.Li struct pkthdr
and
.Li struct m_ext
are printed as well.
.\" --------------------
.It Xo
.Ic show mount
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li struct mount
at
.Ar addr .
If the
.Cm /f
modifier is specified prints out all
.Li vnodes
(see also
.Cm show vnode )
and also all
.Li bufs
(see also
.Cm show buf )
on all those vnodes.
.\" --------------------
.It Xo
.Ic show nfsnode
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li struct nfsnode
at
.Ar addr .
If the
.Cm /f
modifier is specified prints out additional
information as well.
.\" --------------------
.It Xo
.Ic show nfsreq
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li struct nfsreq
at
.Ar addr .
If the
.Cm /f
modifier is specified prints out additional
information as well.
.\" --------------------
.It Xo
.Ic show object
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li vm_object
at
.Ar addr .
If the
.Cm /f
modifier is specified the complete object is printed.
.\" --------------------
.It Xo
.Ic show offset
.Ar offset
.Xc
Prints a list of the known kernel structure fields which occur at the given
.Ar offset
from the beginning of the struct, as well as their size.
The
.Cm option DDB_STRUCT
is required for this command to be available.
.\" --------------------
.It Xo
.Ic show page
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li vm_page
at
.Ar addr .
If the
.Cm /f
modifier is specified the complete page is printed.
.\" --------------------
.It Ic show panic
Prints the panic string.
.\" --------------------
.It Xo
.Ic show pool
.Op Cm /p
.Ar addr
.Xc
Prints the
.Li pool
at
.Ar addr .
Valid modifiers:
.Bl -tag -width xxx -compact
.It Cm /p
Print the pagelist for this pool.
.El
.\" --------------------
.It Ic show proc Op Ar addr
Prints the
.Li struct proc
at
.Ar addr .
If an optional address is not specified
.Li curproc
is assumed.
.\" --------------------
.It Ic show registers Op Cm /u
Display the register set.
If the
.Cm /u
modifier is specified, it displays user registers (or the currently
saved registers) instead of the kernel's.
Note: The
.Cm /u
modifier is not supported on every machine, in which case
incorrect information may be displayed.
.\" --------------------
.It Ic show socket Ar addr
Prints the
.Li struct socket
at
.Ar addr .
If the socket is spliced, the
.Li struct sosplice
associated with the socket is printed as well.
.\" --------------------
.It Xo
.Ic show struct
.Ar name
.Op addr
.Xc
Prints the content of the memory at
.Ar addr
as a struct
.Ar name .
Nested structures and bit fields are not printed.
Character arrays are printed as bytes.
The
.Cm option DDB_STRUCT
is required for this command to be available.
.\" --------------------
.It Ic show uvmexp
Displays a selection of uvm counters and statistics.
.\" --------------------
.It Xo
.Ic show vnode
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li struct vnode
at
.Ar addr .
If the
.Cm /f
modifier is specified prints out all
.Li bufs
(see also
.Cm show buf )
currently attached to this
.Li vnode .
.\" --------------------
.It Ic show watches
Displays all watchpoints set with the
.Ic watch
command.
.\" --------------------
.It Ic show witness Op Cm /b
Prints the current order list.
If the
.Cm /b
modifier is specified, the list of found lock order violations is printed
instead.
The
.Cm option WITNESS
is required for this command to be available.
.\" --------------------
.It Ic show all procs Op Cm /anow
Display information on all processes.
.Pp
.Bl -tag -width foo -compact
.It Cm /n
(Default) Show process information in a
.Xr ps 1 Ns \&-like
format.
Information printed includes process ID, thread ID, parent
process ID, UID, process status, process flags, process
wait channel message and process command name.
.It Cm /a
Shows the kernel virtual addresses of each process'
proc structure, u-area, and vmspace structure.
The vmspace address is also the address of the process'
.Li vm_map
structure
and can be used in the
.Ic show map
command.
.It Cm /o
Shows non-idle threads that were on CPU when ddb was entered.
Information printed includes thread ID, process ID, UID, process flags,
thread flags, current CPU, and command name.
.It Cm /w
Shows each thread's ID, command, process group,
wait channel address, and wait channel message.
.El
.\" --------------------
.It Ic show all bufs Op Cm /f
Display information about all buffers in the system.
.Pp
.Bl -tag -width foo -compact
.It Cm /f
For each buffer, print a more detailed output.
See the
.Ic show buf
command for more information.
.El
.\" --------------------
.It Ic show all callout
Display the contents of the callout table.
.\" --------------------
.It Ic show all pools Op Cm /a
Display information about all system pools in a format similar to
.Xr vmstat 8 .
.Pp
.Bl -tag -width foo -compact
.It Cm /a
Displays
.Dq interesting
address information.
.El
.\" --------------------
.It Ic show all locks
Prints the list of locks held by all threads in the system.
The
.Cm option WITNESS
is required for this command to be available.
.\" --------------------
.It Ic show all mounts Op Cm /f
Display information on all mounted filesystems.
.Pp
.Bl -tag -width foo -compact
.It Cm /f
For each filesystem, list all its struct vnode addresses.
These addresses can be used in the
.Ic show vnode
command.
.El
.\" --------------------
.It Ic show all nfsnodes Op Cm /f
Display information about all nfsnodes in the system.
.Pp
.Bl -tag -width foo -compact
.It Cm /f
For each nfsnode, print a more detailed output.
See the
.Ic show nfsnode
command for more information.
.El
.\" --------------------
.It Ic show all nfsreqs Op Cm /f
Display information for all outstanding NFS requests.
.Pp
.Bl -tag -width foo -compact
.It Cm /f
For each NFS requests, print a more detailed output.
See the
.Ic show nfsreq
command for more information.
.El
.\" --------------------
.It Ic show all vnodes Op Cm /f
Display information about all vnodes in the system.
.Pp
.Bl -tag -width foo -compact
.It Cm /f
For each vnode, print a more detailed output.
See the
.Ic show vnode
command for more information.
.El
.El
.\" --------------------
.It Ic callout
A synonym for the
.Ic show all callout
command.
.\" --------------------
.It Ic ps Op Cm /anow
A synonym for
.Ic show all procs .
.\" --------------------
.It Xo
.Ic mac Ns Op Ic hine
.Ar subcommand Op Ar args ...
.Xc
Perform a platform-specific command.
.Pp
The following commands are supported by multiprocessor kernels on
these platforms: amd64, i386, macppc, mips64, and sparc64.
.Pp
.Bl -tag -width "searchframe [addr]" -compact
.It Ic cpuinfo
Display the state of each CPU.
.It Ic ddbcpu Ar N
Stop the current CPU and start handling
.Nm
on the selected CPU.
.It Ic startcpu Op Ar N
Resume normal processing on the selected CPU,
or all CPUs if none is specified.
.It Ic stopcpu Op Ar N
Stop normal processing on the selected CPU,
or all CPUs (except the one handling
.Nm )
if none is specified.
.El
.Pp
Other platform-specific commands:
.\" .Pp
.\" amd64:
.Pp
arm:
.Bl -tag -width "searchframe [addr]" -compact
.It Ic frame Ar addr
Display the trapframe at
.Ar addr .
.El
.Pp
i386:
.Bl -tag -width "searchframe [addr]" -compact
.\" .It Ic acpi disasm Ar ??
.\" .It Ic acpi showval Ar ??
.\" .It Ic acpi tree Ar ??
.\" .It Ic acpi trace Ar ??
.\" Evil ACPI debugging magic.
.It Ic sysregs
Display the contents of the privileged registers:
.Va IDTR ,
.Va GDTR ,
.Va LDTR ,
.Va TR ,
.Va CR0 ,
.Va CR2 ,
.Va CR3 ,
and
.Va CR4 .
.\" (i386-only)
.El
.Pp
m88k:
.Bl -tag -width "searchframe [addr]" -compact
.It Ic ddbcpu Ar N
Stop the current CPU and start handling
.Nm
on the selected CPU.
.It Ic frame Ar addr
Display the trapframe at
.Ar addr .
.It Ic regs
Display the registers from when
.Nm
was entered.
.It Ic searchframe Op Ar addr
Search for and display stack exception frames,
starting from
.Ar addr
if given, else the address in register
.Va r31 ,
and stopping at the next 8k boundary.
.It Ic where
Display where the current CPU was stopped.
.El
.Pp
mips64:
.Bl -tag -width "searchframe [addr]" -compact
.It Xo
.Ic tlb Op Cm /p Ar asid
.Op Cm /c
.Op Ar tlb
.Xc
.It Ic trap Ar ??
.El
.Pp
sh:
.Bl -tag -width "searchframe [addr]" -compact
.It Ic cache Op Ar addr
Display the cache, starting from
.Ar addr ,
defaulting to 0.
.It Ic frame
Display the switch and trap frames.
.\" .It Ic stack
.It Ic tlb
Display the TLB.
.El
.Pp
sparc64:
.Bl -tag -width "searchframe [addr]" -compact
.It Ic ctx
Display the context addresses for all threads.
.\" .It Ic dtlb Ar 0,2
.\" .It Ic dtsb
.\" .It Ic esp
.\" .It Ic fpstate Op Ar addr
.\" .It Ic itlb Ar 0,1,2
.\" .It Ic kmap Op Ar addr
.\" .It Ic pcb Op Ar addr
.\" .It Ic pctx Ar pid
.\" .It Ic page Ar addr
.\" .It Ic phys Op Ar addr
.\" .It Ic pmap Op Ar addr
.\" .It Ic proc Op Ar addr
.\" .It Ic prom Ar ??
.\" .It Ic pv Ar addr
.\" .It Ic stack Op Ar addr
.\" .It Ic tf Op Ar addr
.\" .It Ic ts
.\" .It Ic traptrace Op Ar addr
.\" .It Ic watch Op Ar addr
.\" .It Ic window Op Ar winnum
.\" .It Ic xir Op Ar addr
.El
.\" --------------------
.El
.Sh VARIABLES
.Nm
denotes registers and variables by
.Ic $ Ns Va name .
Register names can be found with the
.Ic show registers
command.
.Pp
Some variable names are suffixed with numbers, and some may have a modifier
following a colon immediately after the variable name.
For example, register variables can have the
.Ql :u
modifier to indicate a
user register (e.g.,
.Ql $eax:u ) .
.Pp
Built-in debugger variables currently supported are:
.Bl -tag -width 10n -compact -offset indent
.It Va $radix
Input and output radix.
.It Va $maxoff
Addresses are printed as
.Ar symbol Ns Li + Ns Ar offset
unless
.Ar offset
is greater than
.Va $maxoff .
.It Va $maxwidth
The width of the displayed lines.
.It Va $lines
The number of lines to page.
This is used by the
.Dq more
feature.
.It Va $tabstops
Tab stop width.
.It Va $log
Controls whether the output of
.Nm
will also appear in the system message
buffer.
.El
.Pp
These variables can also be controlled outside
.Nm
via the
.Sq ddb
.Xr sysctl 8
hierarchy.
.Sh EXPRESSIONS
Almost all expression operators in C are supported except for
.Ql ~ ,
.Ql ^ ,
and unary
.Ql & .
Special rules for expressions in
.Nm
are:
.Bl -tag -width 15n -compact -offset indent
.It Ar identifier
The name of a symbol.
It is translated to the address (or value) of the symbol.
.Ql \&.
and
.Ql \&:
can be used in the identifier.
The following can be accepted as an identifier,
if supported by an object format dependent routine:
.Bl -item -offset indent -compact
.It
.Sm off
.Oo Ar filename Li \&: Oc Ar func
.Op \&: Ar linenumber
.It
.Op Ar filename \&:
.Ar variable
.It
.Ar filename
.Op \&: Ar linenumber
.Sm on
.El
The symbol may be prefixed with
.Sq Ar symboltablename Ns ::
(e.g.,
.Ql emulator::mach_msg_trap )
to specify other than kernel symbols.
.It Ar number
The radix is determined by the first two letters:
.Ql 0x :
hex,
.Ql 0o :
octal,
.Ql 0t :
decimal, otherwise, the value of
.Va $radix
is used.
.It Li \&.
.Va dot :
the current address.
.It Li +
.Va next :
the next address.
.It Li ..
The address of the start of the last line examined.
Unlike
.Va dot
or
.Va next ,
this is only changed by the
.Ic examine
or
.Ic write
command.
.It Li '
The last address explicitly specified.
.It Li $ Ns Ar variable
The value of a register or variable.
The name may be followed by a
.Ql \&:
and modifiers as described above with
.Ar identifier .
.It Ar expr Li # Ar expr
A binary operator which rounds up the left hand side to the next
multiple of right hand side.
.It Li * Ns Ar expr
Indirection.
It may be followed by a ':' and modifiers as described above.
.El
.Sh SEE ALSO
.Xr gdb 1 ,
.Xr nm 1 ,
.Xr witness 4 ,
.Xr sysctl.conf 5 ,
.Xr hangman 6 ,
.Xr kgdb 7 ,
.Xr crash 8 ,
.Xr sysctl 8 ,
.Xr extent 9 ,
.Xr pool 9 ,
.Xr uvm 9
.Sh HISTORY
This kernel facility first appeared in the MACH 2 operating system
developed by CMU.
Hangman (which stands for "hangs maniacal analyzer") first appeared in
.Ox 1.2 .
@


1.85
log
@Display process group in "ps /w" since they got removed from "ps /n".

While here fix the formating of /w /o and /a.

ok guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.84 2017/01/24 04:50:48 mpi Exp $
d624 9
d836 10
d900 6
d1224 1
@


1.84
log
@Display the thread ID (TID) rather than the process group ID (PGRP)
in ddb(4)'s default 'ps' view.

This allow to use 'tr /p' easily now that it requires a TID.

With inputs from guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.83 2017/01/24 01:01:33 mpi Exp $
d852 1
a852 1
Shows each thread's ID, command, system call emulation,
@


1.83
log
@The /p modifier now takes a TID, while here add a missing argument
for 'show all procs'.

ok guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.82 2016/09/01 12:24:56 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: September 1 2016 $
d836 2
a837 2
process ID, process group, UID, process status, process flags, process
command name, and process wait channel message.
@


1.82
log
@no more sparc;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.81 2016/03/10 08:56:46 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: March 10 2016 $
d545 1
a545 1
argument as the PID of a process and shows the stack trace of
d835 1
a835 1
Information printed includes thread ID, parent
d931 1
a931 1
.It Ic ps Op Cm /anw
@


1.81
log
@un-vax;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.80 2016/01/15 11:39:28 dlg Exp $
d28 1
a28 1
.Dd $Mdocdate: January 15 2016 $
a1037 5
.El
.Pp
sparc:
.Bl -tag -width "searchframe [addr]" -compact
.It Ic proc Ar ??
@


1.80
log
@document "show socket".

jmc@@ was super keen for this.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.79 2015/09/11 08:34:35 guenther Exp $
d28 1
a28 1
.Dd $Mdocdate: September 11 2015 $
a268 2
.It vax
Don't assume that each external label is a procedure entry mask.
@


1.79
log
@Add ps/o
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.78 2015/08/29 00:01:54 guenther Exp $
d28 1
a28 1
.Dd $Mdocdate: August 29 2015 $
d778 9
@


1.78
log
@sparc64 supports the normal cpuinfo/ddbcpu/startcpu/stopcpu now
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.77 2015/02/16 16:38:54 naddy Exp $
d28 1
a28 1
.Dd $Mdocdate: February 16 2015 $
d820 1
a820 1
.It Ic show all procs Op Cm /anw
d828 1
a828 1
Information printed includes process ID, parent
d840 4
d845 1
a845 1
Shows each process' PID, command, system call emulation,
@


1.77
log
@Replace \*(Lt \*(Le \*(Gt \*(Ge with literal < <= > >= respectively,
except for instances where \*(Le and \*(Ge are clearly understood as
mathematical symbols.  Discussed with schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.76 2014/03/18 22:36:31 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: March 18 2014 $
d931 1
a931 1
these platforms: amd64, i386, macppc, and mips64.
@


1.76
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.75 2012/11/14 22:19:02 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: November 14 2012 $
d73 1
a73 1
.Dl ddb\*(Gt
d195 1
a195 1
.Ql ddb\*(Gt
@


1.75
log
@some formatting/sorting/consistency fixes for "machine"; ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.74 2012/11/11 18:28:17 guenther Exp $
d28 1
a28 1
.Dd $Mdocdate: November 11 2012 $
a265 4
.It m68k
Use
.Tn Motorola
assembly syntax.
a1013 5
.El
.Pp
mvme68k:
.Bl -tag -width "searchframe [addr]" -compact
.It Ic prom Ar ??
@


1.74
log
@Document the machine subcommands.

ok jmc@@, pirofti@@, mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.73 2011/11/07 20:29:56 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: November 7 2011 $
d936 2
a937 1
.Bl -tag -width cpuinfo_
d955 9
d965 2
a966 4
.Bl -tag -width sparc64_ -compact
.\" .It amd64 ,
.It i386
.Bl -tag -width foo -compact
d985 3
a987 8
.It arm
.Bl -tag -width foo -compact
.It Ic frame Ar addr
Display the trapframe at
.Ar addr .
.El
.It m88k
.Bl -tag -width foo -compact
d1009 3
a1011 2
.It mips64
.Bl -tag -width foo -compact
d1013 1
a1013 1
.Ic tlb Op Cm /p Ar asid 
d1019 3
a1021 2
.It mvme68k
.Bl -tag -width foo -compact
d1024 16
a1039 2
.It sparc
.Bl -tag -width foo -compact
d1042 3
a1044 2
.It sparc64
.Bl -tag -width foo -compact
a1067 13
.El
.It sh
.Bl -tag -width foo -compact
.It Ic tlb
Display the TLB.
.It Ic cache Op Ar addr
Display the cache, starting from
.Ar addr ,
defaulting to 0.
.It Ic frame
Display the switch and trap frames.
.\" .It Ic stack
.El
@


1.73
log
@When multiple display modifiers are specified on a ddb examine command, do
not advance the address until the last modifier has been processed. This
allows sequences like `x/xi address,count' to yield meaningful results.
As a bonus, handle `i' and `I' modifiers last, so that I don't have to
fight my habit of using `x/ix' instead of `x/xi'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.72 2011/07/05 07:08:25 tedu Exp $
d28 1
a28 1
.Dd $Mdocdate: July 5 2011 $
d359 1
d928 135
d1101 3
a1103 1
Controls whether the output of ddb will also appear in the system message
d1107 3
a1109 1
These variables can also be controlled outside ddb via the
@


1.72
log
@there are no cachelist or logs for pools
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.71 2010/11/27 19:59:10 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: November 27 2010 $
a214 1
Multiple modifier formats display multiple locations.
@


1.71
log
@Get rid of the vm_map field of ddb breakpoints and watchpoints, and do not
pretend these could work on userland addresses.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.70 2010/11/27 19:57:21 miod Exp $
d750 1
a750 1
.Op Cm /clp
a758 4
.It Cm /c
Print the cachelist and its statistics for this pool.
.It Cm /l
Print the log entries for this pool.
@


1.70
log
@Remove ddb single-step load and store counters. Most platforms do not
implement them, and they are of questionable usefulness.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.69 2010/11/05 15:18:54 claudio Exp $
d28 1
a28 1
.Dd $Mdocdate: November 5 2010 $
a483 1
Watchpoints on user addresses work best.
@


1.69
log
@Document "show mbuf addr" to display the mbuf header of the mbuf at addr.
Requested by miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.68 2010/03/26 19:30:40 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: March 26 2010 $
d430 2
a431 2
single-step through some low-level code paths or user space code.
On machines with software-emulated single-stepping (e.g., pmax),
a454 1
Some machines (e.g., pmax) also count loads and stores.
@


1.68
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.67 2010/02/03 00:41:00 jsing Exp $
d28 1
a28 1
.Dd $Mdocdate: February 3 2010 $
d649 11
@


1.67
log
@Document 'show bcstats'.

ok beck@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.65 2009/08/17 13:12:11 jasper Exp $
d28 1
a28 1
.Dd $Mdocdate: August 17 2009 $
d248 1
a248 1
Non-printing characters are displayed as an octal escape code (e.g., '\\000').
@


1.66
log
@Fix examine command option list.
@
text
@d606 3
@


1.65
log
@document 'show all bufs'
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.64 2009/08/15 07:04:52 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: August 15 2009 $
d208 1
a208 1
.Op Cm /bhlaAxzodurcsmiI
@


1.64
log
@tweak previous (you were missing an .El, thib);
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.63 2009/08/14 21:27:03 thib Exp $
d28 1
a28 1
.Dd $Mdocdate: August 14 2009 $
d839 11
@


1.63
log
@document show (all) nfsnode(s) and fix up the nfsreq parts.

the alignment is a bit off, but I can't spot why so I'm
hoping jmc@@ will "tweak previous" soon.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.61 2009/08/13 17:50:02 thib Exp $
d28 1
a28 1
.Dd $Mdocdate: August 13 2009 $
a49 1
.Pp
d669 28
a810 28
.It Xo
.Ic show nfsreq
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li struct nfsreq
at
.Ar addr.
If the
.Cm /f
modifier is specified prints out additional
information as well.
.\" --------------------
.It Xo
.Ic show nfsnode 
.Op Cm /f
.Ar addr
.Xc
Prints the
.Li struct nfsnode 
at
.Ar addr.
If the
.Cm /f
modifier is specified prints out additional
information as well.
.\" --------------------
d866 2
a867 2
.It Ic show all vnodes Op Cm /f
Display information about all vnodes in the system.
d871 1
a871 1
For each vnode, print a more detailed output.
d873 1
a873 1
.Ic show vnode
d878 1
a878 1
Display information for all outstanding nfs requests.
d882 1
a882 1
For each nfs requests, print a more detailed output.
d884 1
a884 1
.Ic show nfsreq 
d888 2
a889 2
.It Ic show all nfsnodes Op Cm /f
Display information about all nfsnodes in the system.
d893 1
a893 1
For each nfsnode, print a more detailed output.
d895 1
a895 1
.Ic show nfsnode 
d897 1
@


1.62
log
@zap trailing whitespace;
@
text
@d798 14
d878 2
a879 2
.It Ic show all nfsreq
Display a list of pointers to all outstanding nfs requests.
d881 6
d888 12
@


1.61
log
@document the show all vnodes command. prompted by jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.59 2009/08/09 23:04:47 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: August 10 2009 $
d854 1
a854 1
Display information about all vnodes in the system. 
@


1.60
log
@need a space between args and punctuation;
@
text
@d28 1
a28 1
.Dd $Mdocdate: August 9 2009 $
d851 11
@


1.59
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.58 2009/02/22 15:10:41 jsing Exp $
d28 1
a28 1
.Dd $Mdocdate: February 22 2009 $
d99 1
a99 1
.Ic show struct,
@


1.58
log
@Document ddb.trigger.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.56 2008/12/23 10:05:24 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: December 23 2008 $
d99 1
d683 11
d747 15
@


1.57
log
@Add nfs ddb hooks, for now only to show all the outstanding nfsreq's
and to print out struct nfsreq.

"get it in so people can pound on it" blambert@@
OK and information_s_ on the manpage from miod@@
@
text
@d47 1
a47 2
It may be invoked from the console when the
.Xr sysctl 8
d49 1
a49 1
is set to 1 using any of the following methods:
d59 3
@


1.56
log
@- document machdep.ddb=2
- tidy up the text around it a little
- no need to discuss kernel options we have on by default (DDB)

feedback/ok dlg
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.55 2008/09/01 05:45:54 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: September 1 2008 $
d755 14
d823 4
@


1.55
log
@- Ctl -> Ctrl
- some missing words from the vnode command

from Pierre Riteau
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.54 2008/05/18 06:53:56 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 18 2008 $
d43 1
a43 3
is only available if the kernel was configured with the DDB option.
.Nm
will be invoked upon a kernel panic when the
a44 1
name
d47 1
a47 6
.Nm
may be invoked from the console by the key sequence
.Li Ctrl-Alt-Esc
or by sending a
.Dv BREAK
if using a serial console, when the
a48 1
name
d50 18
a67 1
is set to 1.
@


1.54
log
@some missing articles; from Pierre Riteau
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.53 2008/03/23 20:22:33 miod Exp $
d28 1
a28 1
.Dd $Mdocdate: March 23 2008 $
d52 1
a52 1
.Li Ctl-Alt-Esc
d740 1
a740 1
prints all
@


1.53
log
@Missing .El; spotted by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.52 2008/03/23 12:31:56 miod Exp $
d948 1
a948 1
This kernel facility first appeared in MACH 2 operating system
@


1.52
log
@show all mounts command for ddb. From mickey a long time ago.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.51 2007/05/31 19:19:50 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d800 1
@


1.51
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.50 2007/03/18 15:27:56 mickey Exp $
d28 1
a28 1
.Dd $Mdocdate$
d779 1
d790 10
@


1.50
log
@document show buf|vnode|mount
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.49 2007/03/15 17:10:20 miod Exp $
d28 1
a28 1
.Dd November 30, 1993
@


1.49
log
@Disable x/q functionnality on 32bit platforms, because the examination code
is not supposed to work on values larger than db_expr_t.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.48 2006/11/28 18:56:17 uwe Exp $
d601 15
d638 21
d728 18
@


1.48
log
@Support "trace /p <pid>" to show the stack trace of any process.
(Keep in mind that $radix is 0x10 by default.); ok by many
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.47 2006/07/06 18:16:19 miod Exp $
d219 1
a219 1
look at by long longs (64 bits)
@


1.47
log
@Sync with reality:
- document ^t in input.
- we do not implement break /u.
- we do not have $workxx variables.
- mention $log and sysctl ddb.*
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.46 2006/06/17 17:33:33 miod Exp $
d534 1
a534 1
.Op Cm /u
d539 9
@


1.46
log
@We do not have the xf and xb commands.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.45 2006/05/21 15:55:02 jmc Exp $
d180 2
a182 12
.\" .Pp
.\" During command execution,
.\" .Nm ddb
.\" is sensitive only to the following keystrokes:
.\" .Bl -tag -width 10n -compact -offset indent
.\" .It Ic \&^s
.\" pause
.\" .It Ic \&^q
.\" unpause
.\" .It Ic \&^c
.\" abort command (even if paused)
.\" .El
a370 1
.Op Cm /u
a389 18
.Pp
When the
.Cm /u
modifier is specified,
.Ar addr
is taken as a user space address.
Without it, the address is considered as a kernel space address.
Wrong space addresses are rejected with an error message.
The
.Cm /u
modifier can be used only if it is supported by machine dependent
routines.
.Pp
.Sy Warning:
if a user text is shadowed by a normal user space debugger,
user space break points may not work correctly.
Setting a breakpoint at the low-level code paths may also cause strange
behavior.
d773 3
a775 5
.It Va $work Ns Ar xx
Work variables.
The suffix
.Ar xx
is a number from 0 to 31.
d777 5
@


1.45
log
@tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.44 2006/05/20 18:31:50 mickey Exp $
a283 15
.\" --------------------
.It Ic xf
Examine forward.
Execute an
.Ic examine
command with the last specified parameters to it
except that the next address displayed by it is used as the start address.
.\" --------------------
.It Ic xb
Examine backward.
Execute an
.Ic examine
command with the last specified parameters to it
except that the last start address subtracted by the size displayed by it
is used as the start address.
@


1.44
log
@document sh all poo
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.43 2006/05/03 21:51:29 miod Exp $
d761 2
a762 3
Display information about all system pools in similar to
.Xr vmstat 8
output format.
@


1.43
log
@Mention x/I behaviour on m88k.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.42 2005/12/15 01:37:32 miod Exp $
d760 11
@


1.42
log
@Document x/q, sync x/I with reality.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.41 2005/03/07 23:41:54 jmc Exp $
d271 3
a273 3
.\" .It m88k
.\" Decode instructions for the opposite CPU (i.e. m88110 when running on an
.\" m88100 processor, and the opposite).
@


1.41
log
@more macro simplification;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.40 2005/01/04 10:28:35 jmc Exp $
d228 2
d262 12
a275 4
.It i386
Don't round to the next long word boundary.
.It mips
Print register contents.
@


1.40
log
@no need for .Li here;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.39 2005/01/03 22:55:03 jmc Exp $
d73 1
a73 1
.Oo Ic \&, Ns Ar count Oc
d207 1
a207 1
.Ic x Ns Oo Ic amine Oc
d326 1
a326 1
.Ic w Ns Oo Ic rite Oc
d429 1
a429 1
.Ic d Ns Oo Ic elete Oc
d440 1
a440 1
.Ic s Ns Oo Ic tep Oc
d472 1
a472 1
.Ic c Ns Oo Ic ontinue Oc
d826 1
a826 1
.Oo \&: Ar linenumber Oc
@


1.39
log
@use .Aq or \*(Gt instead of `<' and `>';
remove some unneccessary escaping;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.38 2005/01/03 22:44:43 jmc Exp $
d674 1
a674 2
Prints the
.Li panic string.
@


1.38
log
@too much Xo/Xc in this file;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.37 2005/01/03 16:49:54 miod Exp $
d64 1
a64 1
.Dl ddb>
d145 1
a145 1
.It Ic <space>
d147 1
a147 1
.It Ic <return>
d166 1
a166 1
.It Ic ^h | <del>
d195 1
a195 1
.Ql ddb>
d837 1
a837 1
.Sq Ar symboltablename Ns \&::
d857 1
a857 1
.It Li \..
@


1.37
log
@Add "show panic" command to ddb, to easily retrieve the panic message.
Will hopefully bring us better panic reports.

From Joris Vink.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.36 2004/02/01 12:23:47 jmc Exp $
d536 1
a536 4
.It Xo
.Ic until
.Op Cm /p
.Xc
d629 1
a629 4
.It Xo
.Ic show malloc
.Op Ar addr
.Xc
d673 1
a673 3
.It Xo
.Ic show panic
.Xc
d676 1
a676 1
.\" -------------------- 
d696 1
a696 4
.It Xo
.Ic show proc
.Op Ar addr
.Xc
d705 1
a705 4
.It Xo
.Ic show registers
.Op Cm /u
.Xc
d724 1
a724 4
.It Xo
.Ic show all procs
.Op Cm /anw
.Xc
d757 1
a757 4
.It Xo
.Ic ps
.Op Cm /anw
.Xc
@


1.36
log
@.Xr crash 8;
from Sam Smith;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.35 2003/10/22 06:38:55 mcbride Exp $
d679 6
@


1.35
log
@Document how to break into ddb on serial console.

ok mickey@@ henning@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.34 2003/07/09 13:26:20 jmc Exp $
d903 1
@


1.34
log
@- fix lists/displays
- quote .Cd's
- add/remove .Pp's as necessary
- fix some .Re/.Rs's
- simplify macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.33 2003/05/12 20:03:35 mickey Exp $
d53 3
a55 1
when the
@


1.33
log
@talk about show proc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.32 2003/03/16 10:18:44 jmc Exp $
d39 1
a39 1
.Xr gdb 1 No Ns \&-like
d62 1
a62 3
.Bd -literal -offset indent
ddb>
.Ed
a66 1
.Pp
d135 1
a135 1
.Va \&$lines
d154 1
a154 1
.It Ic \&^b
d156 1
a156 1
.It Ic \&^f
d158 1
a158 1
.It Ic \&^a
d160 1
a160 1
.It Ic \&^e
d162 1
a162 1
.It Ic \&^w
d164 1
a164 1
.It Ic \&^h | <del>
d166 1
a166 1
.It Ic \&^d
d168 1
a168 1
.It Ic \&^k
d170 1
a170 1
.It Ic \&^u
d172 1
a172 1
.It Ic \&^p
d174 1
a174 1
.It Ic \&^n
d176 1
a176 1
.It Ic \&^r
d356 2
a357 2
.Ic \&$ Ns Ar name
.Op Ic \&=
d366 2
a367 1
.Bl -tag -width "boot poweroff" -compact -indent offset
d395 1
a395 1
.Ar ( count No \&- 1 )
d739 1
a739 1
.Xr ps 1 No Ns \&-like
d788 1
a788 1
.Ql \&$eax:u ) .
d792 1
a792 1
.It Va \&$radix
d794 1
a794 1
.It Va \&$maxoff
d800 2
a801 2
.Va \&$maxoff .
.It Va \&$maxwidth
d803 1
a803 1
.It Va \&$lines
d808 1
a808 1
.It Va \&$tabstops
d810 1
a810 1
.It Va \&$work Ns Ar xx
d818 2
a819 2
.Ql \&~ ,
.Ql \&^ ,
d821 1
a821 1
.Ql \&& .
d849 1
a849 1
.Ql Ar symboltablename Ns \&::
d861 1
a861 1
.Va \&$radix
d866 1
a866 1
.It Li \&+
d880 1
a880 1
.It Li \&'
d882 1
a882 1
.It Li \&$ Ns Ar variable
d888 1
a888 1
.It Ar expr Li \&# Ar expr
d891 1
a891 1
.It Li \&* Ns Ar expr
@


1.32
log
@typos;

ddb(4), hilid(4), hilkbd(4), hilms(4): ok miod@@
gsckbd(4): found by miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.31 2002/09/10 13:15:38 mpech Exp $
d697 12
@


1.31
log
@typo in copy/paste.

art@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.30 2002/04/25 20:27:43 ian Exp $
d146 1
a146 1
.It <space>
d148 1
a148 1
.It <return>
d158 1
a158 1
back up one character
d160 1
a160 1
forward up one character
d167 1
a167 1
.It Ic \&^h No | <del>
d218 1
a218 1
is used.
d285 1
a285 1
Executes an
d294 1
a294 1
.Op Ar addr Op addr ...
d330 1
a330 1
.Ar expr Op expr ...
d412 1
a412 1
Without it, the address is considered in the kernel space.
d508 1
a508 1
may cause unrecoverable error on some systems (e.g., i386).
d514 1
a514 1
that was previously set with
d522 1
a522 1
This is tiny and handy tool for random kernel hangs analysis, of which its
d526 1
a526 1
Since the discovering algorithm is a probabilistic one
d545 1
a545 1
If
d579 1
a579 1
If omitted, the kernel stack is traced instead.
d772 1
a772 1
Some variables names are suffixed with numbers, and some may have a modifier
d783 1
a783 1
Input and output radix
d790 1
a790 1
.Va \&$maxoff.
d883 1
a883 1
It may be followed by a ':' and  modifiers as described above.
@


1.30
log
@Modernize wording (remove ancient reference), and move invocation
before details of usage.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.29 2002/01/28 19:53:41 miod Exp $
d677 1
a677 1
modifier is specified the complete object is printed.
@


1.29
log
@Update to mention the new vocabulary added in the last two commits to
ddb/db_command.c, with some text borrowed from NetBSD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.28 2001/08/24 11:21:02 hugh Exp $
d35 5
a39 3
The kernel debugger has most of the features of the old kdb,
but with a more rational
.Pf ( Xr gdb 1 No Ns \&-like )
d43 17
a193 17
.Pp
.Nm
is only available if the kernel was configured with the DDB option.
.Nm
will be invoked upon a kernel panic when the
.Xr sysctl 8
name
.Va ddb.panic
is set to 1.
.Nm
may be invoked from the console by the key sequence
.Li Ctl-Alt-Esc
when the
.Xr sysctl 8
name
.Va ddb.console
is set to 1.
@


1.28
log
@kgdb(7) cross references this file, so it might as well be reciprocated.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.27 2001/08/03 15:21:16 mpech Exp $
d367 1
a367 1
.Bl -tag -width "boot crashx" -compact -indent offset
d376 4
d631 8
d652 3
a654 2
.Ic show malloc
.Op Ar addr
d656 7
a662 3
Prints malloc debugging information if available.
If an optional address is specified, only information about that address
is printed.
d665 1
a665 1
.Ic show object
d670 1
a670 1
.Li vm_object
d678 19
d710 3
d890 3
a892 1
.Xr extent 9
@


1.27
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.26 2001/04/18 23:18:56 art Exp $
d849 1
@


1.26
log
@Document boot halt.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.25 2001/03/01 16:11:16 aaron Exp $
d843 1
@


1.25
log
@A slew of share/ man page fixes; nordin@@cse.ogi.edu. These have been sitting
in my INBOX since Nov 6, 2000, probably forgot about them since the tree was
frozen at that time.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.24 2000/07/29 00:58:24 marc Exp $
d374 2
@


1.24
log
@
Note that ddb must be enabled with sysctl before it can be used.
Prodding from Gregory Steuck <greg@@nest.cx> who looked in the man
page for that info
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.23 2000/07/09 20:56:29 aaron Exp $
d393 1
a393 1
If the break point is successfuly set, a break point number is
d692 1
a692 1
Shows the kernel virtual addesses of each process'
@


1.23
log
@Many formatting fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.22 2000/07/02 02:44:04 ericj Exp $
d40 1
a40 1
.Nm ddb
d48 1
a48 1
.Nm ddb
d59 1
a59 1
.Nm ddb
d113 1
a113 1
.Nm ddb
d176 1
a176 1
.Nm ddb
d178 14
d387 1
a387 1
.Nm ddb
d476 1
a476 1
.Nm ddb
d489 1
a489 1
.Nm ddb
d540 1
a540 1
.Nm ddb
d550 1
a550 1
.Nm ddb
d596 1
a596 1
.Nm ddb
d722 1
a722 1
.Nm ddb
d770 1
a770 1
.Nm ddb
d844 1
d846 1
@


1.22
log
@fix spelling
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.21 2000/06/09 23:05:19 mickey Exp $
d37 2
a38 2
.No ( Xr gdb 1
\&- like) syntax.
d70 1
a70 1
.Ic search
d116 3
a118 2
for the output.  If the number of lines output in response to
one command exceeds the number set in the
d123 1
d125 2
a126 1
.Bl -tag -width 10n -compact -offset indent
d136 2
a137 1
.Bl -tag -width 10n -compact -offset indent
d181 4
a184 3
prompt. Some commands consist of more than one word, and if
only the first word or words are entered, the possible alternatives
to complete the command are displayed and no other action is performed.
d205 1
d231 1
a231 1
Non-printing characters are displayed as an octal escape code (e.g. '\\000').
d243 1
d293 3
a295 1
can be a string, and it is printed as a literal.  For example,
d299 1
d321 2
a322 1
.Bl -tag -width 4n -compact -offset indent
d389 4
a392 3
is taken as a user space address. Without it,
the address is considered in the kernel space. Wrong space addresses
are rejected with an error message.  The
d399 3
a401 2
user space break points may not work correctly.  Setting a break
point at the low-level code paths may also cause strange behavior.
d503 2
a504 1
caused the hang. Since the discovering algorithm is a probabilistic one
d528 2
a529 2
cumulative instruction count at each call or return.  Otherwise,
it stays silent until the matching return is hit.
d538 2
a539 2
cumulative instruction count at each call or return.  Otherwise, it remains
mostly quiet.
d553 2
a554 1
Show the stack trace. The
d580 2
a581 1
ways if it doesn't find the searched-for value.  This is because
d583 2
a584 1
doesn't always recover from touching bad memory.  The optional
d586 2
a587 1
argument limits the search. The modifiers are the same as those of the
d598 1
a598 1
The show command displays different things, depending on
d600 1
a600 1
.Bl -tag -width 4n -compact
d603 1
a603 1
Prints a list of all the breakpoints that have been set with the
d615 3
a617 1
Prints the vm_map at
d621 1
a621 2
modifieris specified the
complete map is printed.
d636 7
a642 2
Prints the vm_object at 'addr'. If the 'f' option is specified the
complete object is printed.
d668 1
d672 3
a674 2
.Xr ps 1 Ns
\&-like format.  Information printed includes process ID, parent
d679 4
a682 2
proc structure, u-area, and vmspace structure.   The vmspace
address is also the address of the process' vm_map structure
d720 1
a720 1
user register (e.g.
@


1.21
log
@right order of operation for boot dump; from Grigoriy Orlov <gluk@@ptci.ru>
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.20 2000/06/07 11:30:49 art Exp $
d807 1
a807 1
Hangman (wich stands for "hangs maniacal analyzer") first appeared in
@


1.20
log
@Document the optional address argument to 'show malloc'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.19 2000/06/07 09:44:27 art Exp $
d348 1
a348 1
Dump core, sync disks and reboot.
@


1.19
log
@Document 'show malloc'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.18 2000/04/15 11:45:51 aaron Exp $
d604 4
a607 1
.It Ic show malloc
d609 2
@


1.18
log
@- For consistency, `super-user' -> `superuser' in all cases.
- Some punctuation fixes.
- Some `id' -> `ID'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.17 1999/09/21 22:30:08 d Exp $
d603 3
@


1.17
log
@grammar. ok aaron@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.16 1999/09/05 16:20:15 espie Exp $
d96 1
a96 1
.Sx EXPRESSIONS . )
@


1.16
log
@Document show extents
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.15 1999/07/09 13:35:48 aaron Exp $
d276 1
a276 1
The valid modifiers act are a subset of those from the
d701 4
a704 1
The number of lines to page.  It is used by "more" feature.
d711 1
a711 1
can be a number from 0 to 31.
@


1.15
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.14 1999/05/16 19:56:21 alex Exp $
d589 3
d791 2
a792 1
.Xr hangman 6
@


1.14
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.13 1999/02/23 10:58:28 espie Exp $
d7 1
a7 1
.\" 
d13 1
a13 1
.\" 
d17 1
a17 1
.\" 
d19 1
a19 1
.\" 
d24 1
a24 1
.\" 
d27 1
a27 1
.\" 
d37 1
a37 1
.No ( Xr gdb 1 
d93 1
a93 1
An expression can be used in place of 
d114 1
a114 1
has a feature like 
d297 1
a297 1
.\" .Op Ar addr 
d535 1
a535 1
.Op Cm /u 
d545 1
a545 1
argument is the limit on the number of frames to be followed. 
d635 1
a635 1
(Default) Show process information in a 
d637 1
a637 1
\&-like format.  Information printed includes process ID, parent 
d720 1
a720 1
.Ql \&. 
d732 1
a732 1
.Op Ar filename \&: 
d735 1
a735 1
.Ar filename 
d783 1
a783 1
Indirection. 
@


1.13
log
@Spell `algorithm' (no, it's not derived from the greek `algo', and `rythm',
however painful it may be)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.12 1998/09/01 16:38:20 deraadt Exp $
d787 2
a788 2
.Xr hangman 6 ,
.Xr nm 1 .
@


1.12
log
@more man page fixes; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.11 1998/06/12 12:01:11 d Exp $
d490 1
a490 1
caused the hang. Since the discovering algorythm is a probabilistic one
@


1.11
log
@clean, doco more commands
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.10 1997/12/10 06:15:54 gene Exp $
d649 1
a649 1
wait channel addresss, and wait channel message.
@


1.10
log
@hangman 'stands' for something not 'stays'; pointed out by ficus.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.9 1997/11/04 21:16:31 chuck Exp $
d36 3
a38 1
but with a more rational (gdb-like) syntax.
d40 64
a103 15
The current location is called 'dot'.  The 'dot' is displayed with
a hexadecimal format at a prompt.
Examine and write commands update 'dot' to the address of the last line
examined or the last location modified, and set 'next' to the address of
the next location to be examined or changed.
Other commands don't change 'dot', and set 'next' to be the same as 'dot'.
.Pp
The general command syntax is:
.Pp
command[/modifier] address [,count]
.Pp
A blank line repeats from the address 'next' with count 1 and no modifiers.
Specifying 'address' sets 'dot' to the address.
Omitting 'address' uses 'dot'.
A missing 'count' is taken to be 1 for printing commands or infinity
d105 7
d114 7
a120 6
has a feature like a command
.Nm more
for the output.  If an output line exceeds the number set in the
.Nm $lines
variable, it displays
.Nm "--db_more--"
d122 2
a123 2
The valid responses for it are:
.Bl -tag -width 10n
d125 1
a125 1
one more page
d127 3
a129 3
one more line
.It q
abort the current command, and return to the command input mode.
d131 43
d175 5
d181 14
a194 2
.It examine(x) [/<modifier>] <addr>[,<count>]
Display the addressed locations according to the formats in the modifier.
d199 9
a207 9
The format characters are
.Bl -tag -width 4n
.It b
look at by bytes(8 bits)
.It h
look at by half words(16 bits)
.It l
look at by long words(32 bits)
.It a
d209 1
a209 1
.It A
d211 1
a211 1
.It x
d213 1
a213 1
.It z
d215 1
a215 1
.It o
d217 1
a217 1
.It d
d219 1
a219 1
.It u
d221 1
a221 1
.It r
d223 1
a223 1
.It c
d226 1
a226 1
.It s
d229 1
a229 1
.It m
d232 1
a232 1
.It i
d234 2
a235 2
.It I
display as an instruction with possible alternate formats depending on the
d237 1
a237 1
.Bl -tag -width powerpc_
d239 1
a239 1
don't assume that each external label is a procedure entry mask
d241 1
a241 1
don't round to the next long word boundary
d243 1
a243 1
print register contents
d246 8
a253 1
.It xf
d255 3
a257 1
It executes an examine command with the last specified parameters to it
d259 2
a260 1
.It xb
d262 3
a264 1
It executes an examine command with the last specified parameters to it
d267 25
a291 11
.It print[/axzodurc] <addr1> [ <addr2> ... ]
Print 'addr's according to the modifier character.
Valid formats are: a x z o d u r c.
If no modifier is specified, the last one specified to it is used.  'addr'
can be a string, and it is printed as it is.  For example,
.ti +4n
print/x "eax = " $eax "\\necx = " $ecx "\\n"
.br
will print like
.br
.in +4n
a292 1
.br
d294 25
a318 1
.in -4n
d320 18
a337 11
.It write[/bhl] <addr> <expr1> [ <expr2> ... ]
Write the expressions at succeeding locations.
The write unit size can be specified in the modifier with a letter
b (byte), h (half word) or l(long word) respectively.  If omitted,
long word is assumed.
.Pp
Warning: since there is no delimiter between expressions, strange
things may happen.
It's best to enclose each expression in parentheses.
.It set $<variable> [=] <expr>
Set the named variable or register with the value of 'expr'.
d339 44
a382 15
.It boot {sync,crash,dump}
Reboot the machine with syncing disks, not syncing or dumping core, 
syncing disk and dumping core, respectively.
.It break[/u] <addr>[,<count>]
Set a break point at 'addr'.
If count is supplied, continues (count-1) times before stopping at the
break point.  If the break point is set, a break point number is
printed with '#'.  This number can be used in deleting the break point
or adding conditions to it.
.XS 2n
.IP u 5n
Set a break point in user space address. Without 'u' option,
the address is considered in the kernel space, and wrong space address
is rejected with an error message.
This option can be used only if it is supported by machine dependent
d384 3
a386 2
.XE 2n
Warning: if a user text is shadowed by a normal user space debugger,
d389 10
a398 3
.It delete <addr>|#<number>
Delete the break point.  The target break point can be specified by a
break point number with '#', or by 'addr' like specified in 'break'
d400 15
a414 3
.It step[/p] [,<count>]
Single step 'count' times.
If 'p' option is specified, print each instruction at each step.
d417 2
a418 1
Warning: depending on machine type, it may not be possible to
d423 17
a439 9
.It call <name>[(<args>)]
Call the named function with argument(s) listed in parentheses,
wich maybe omitted if there is no one.
Current upper limit for number of arguments is 10.
.It callout
See
.Nm show all callout
command.
.It continue[/c]
d441 3
a443 1
If /c, count instructions while executing.
d446 5
a450 1
Warning: when counting, the debugger is really silently single-stepping.
d453 28
a480 5
.It dwatch <addr>
Delete watchpoint at 
.Nm <addr>
address, that was previously set with
.Nm watch
d482 6
a487 2
.It hangman [/s[0-9]]
This is tiny and handy tool for random kernel hangs analysis, which
d498 16
a513 4
might help.
.It until[/p]
Stop at the next call or return instruction.
If 'p' option is specified, print the call nesting depth and the
d515 34
a548 12
only print when the matching return is hit.
.It next[/p]
Stop at the matching return instruction.
If 'p' option is specified, print the call nesting depth and the
cumulative instruction count at each call or return.  Otherwise,
only print when the matching return is hit.
.It match[/p]
A synonym for 'next'.
.It trace[/u] [ <frame_addr> ][,<count>]
Stack trace.  'u' option traces user space; if omitted, only traces
kernel space. 'count' is the number of frames to be traced. 
If the 'count' is omitted, all frames are printed.
d550 2
a551 1
Warning: User space stack trace is valid
d553 12
a564 2
.It search[/bhl] <addr> <value> [<mask>] [,<count>]
Search memory for a value. This command might fail in interesting
d566 72
a637 10
ddb doesn't always recover from touching bad memory.  The optional
count argument limits the search.
.It show all callout
Display callout table contents.
.It ps[/a][/n][/w]
A synonym for 'show all procs'.
.It show all procs[/a][/n][/w]
Display all process information.
The 'n' option (the default) shows process information in a 
UNIX-like 'ps' format.  Information printed includes process ID, parent 
d640 3
a642 2
The 'a' option shows the kernel virtual addesses of each process'
proc structure , u-area, and vmspace structure.   The vmspace
d644 5
a648 2
and can be used in the 'show map' command.
The 'w' option shows each process' PID, command, system call emulation,
d650 18
a667 28
.It show breaks
Prints the list of all breakpoints had been set.
.It show map[/f] <addr>
Prints the vm_map at 'addr'. If the 'f' option is specified the
complete map is printed.
.It show object[/f] <addr>
Prints the vm_object at 'addr'. If the 'f' option is specified the
complete object is printed.
.It show registers
Display the register set.
If 'u' option is specified, it displays user registers instead of
kernel or currently saved one.
.Pp
Warning: The support of 'u' option depends on the machine.  If
not supported, incorrect information will be displayed.
.It show watches
Displays all watchpoints.
.It watch <addr>,<size>
Set a watchpoint for a region.  Execution stops
when an attempt to modify the region occurs.
The 'size' argument defaults to 4.
.Pp
If you specify a wrong space address, the request is rejected
with an error message.
.Pp
Warning: Attempts to watch wired kernel memory
may cause unrecoverable error in some systems such as i386.
Watchpoints on user addresses work best.
d669 5
a673 4
The debugger accesses registers and variables as
.I $<name>.
Register names are as in the
.Nm show registers
d675 2
a676 1
Some variables are suffixed with numbers, and may have some modifier
d678 9
a686 6
For example, register variables can have 'u' modifier to indicate
user register (e.g. $eax:u).
.Pp
Built-in variables currently supported are:
.Bl -tag -width 10n
.It radix
d688 12
a699 7
.It maxoff
Addresses are printed as 'symbol'+offset unless offset is greater than maxoff.
.It maxwidth
The width of the displayed line.
.It lines
The number of lines.  It is used by "more" feature.
.It tabstops
d701 5
a705 4
.It work\fIxx\fR
Work variable.
.I 'xx'
can be 0 to 31.
d708 6
a713 3
Almost all expression operators in C are supported except '~', '^',
and unary '&'.
Special rules in
d716 65
a780 29
.Bl -tag -width 15n
.It "<identifier>"
name of a symbol.  It is translated to the address(or value) of it.  '.'
and ':' can be used in the identifier.  If supported by an object format
dependent routine,
[\fI<filename>\fR:]\fI<func>\fR[:\fI<linenumber>\fR]
[\fI<filename>\fR:]\fI<variable>\fR, and
\fI<filename>\fR[:\fI<linenumber>\fR]
can be accepted as a symbol.
The symbol may be prefixed with '\fI<symbol_table_name>\fR::'
like 'emulator::mach_msg_trap' to specify other than kernel symbols.
.It "<number>"
radix is determined by the first two letters:
0x: hex, 0o: octal, 0t: decimal, otherwise, follow current radix.
.It \.
\'dot'
.It \+
\'next'
.It \..
address of the start of the last line examined.
Unlike 'dot' or 'next', this is only changed by "examine" or
"write" command.
.It \'
last address explicitly specified.
.It "$<variable>"
register name or variable.  It is translated to the value of it.
It may be followed by a ':' and modifiers as described above.
.It \#
a binary operator which rounds up the left hand side to the next
d782 3
a784 2
.It "*<expr>"
indirection.  It may be followed by a ':' and  modifiers as described above.
@


1.9
log
@update docs on "ps" (show all procs) cmd
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.8 1997/10/13 04:32:15 mickey Exp $
d374 1
a374 1
Hangman (wich stays for "hangs maniacal analyzer") first appeared in
@


1.8
log
@use sublist for 'x /I' description
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.7 1997/07/06 19:46:10 mickey Exp $
a256 2
.It ps[/m]
A synonym for 'show all procs'.
d259 3
a261 1
.It show all procs[/m]
d263 10
a272 9
This version of
.Nm ddb
prints more information than previous one.
It shows UNIX process information like "ps".
The UNIX process information may not be shown if it is not
supported in the machine, or the bottom of the stack of the
target process is not in the main memory at that time.
The 'm' options will alter the 'ps' display to show vm_map
addresses for the process and not show other info.
@


1.7
log
@proper OpenBSD macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.6 1997/06/15 02:05:59 mickey Exp $
d118 1
d125 1
@


1.6
log
@move towards completeness
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.5 1997/06/12 02:55:48 mickey Exp $
d372 1
a372 1
OpenBSD 1.2.
@


1.5
log
@man boot&hangman
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.4 1997/06/11 23:33:40 deraadt Exp $
d196 8
d212 6
d219 2
a220 1
This is tiny and handy tool to anylyze random kernel hangs.
d224 4
d230 1
a230 1
may help.
d255 4
d270 8
a277 2
.It ps[/m]
A synonym for 'show all procs'.
a284 6
.It show map[/f] <addr>
Prints the vm_map at 'addr'. If the 'f' option is specified the
complete map is printed.
.It show object[/f] <addr>
Prints the vm_object at 'addr'. If the 'f' option is specified the
complete object is printed.
d365 8
a372 1
.Xr hangman 6 .
@


1.4
log
@.Xr
@
text
@d1 1
a1 1
.\"	$OpenBSD: ddb.4,v 1.3 1997/06/04 07:04:31 mickey Exp $
d162 3
d204 8
@


1.3
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d330 2
@


1.2
log
@converted to mandoc
@
text
@d277 1
a277 1
.IP radix
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2
.\" -*- nroff -*-
.\" 
d28 7
a34 19
.TH ddb 4
.SH NAME
ddb \- kernel debugger
.de XX
.sp
.ti -4n
\\$1
.br
.sp
..
.de XS
.nr )R +\\$1
..
.de XE
.nr )R -\\$1
..
.SH DESCRIPTION
.br
.sp
d37 1
a37 1
.sp
d44 1
a44 1
.sp
d46 3
a48 4
.sp
.ti +4n
\fIcommand[/modifier] address [,count]\fR
.sp
d54 8
a61 4
.sp
"\fBddb\fR" has a feature like a command "\fBmore\fR"
for the output.  If an output line exceeds the number set in the $lines
variable, it displays "\fI--db_more--\fR"
d64 2
a65 2
.XS 4n
.IP \fI\<space>\fR 10n
d67 1
a67 1
.IP \fI\<return>\fR 10n
d69 1
a69 1
.IP \fB\q\fR 10n
d71 4
a74 9
.LP
.sp
.XE 4n
.LP
.B COMMANDS
.sp
.XS 4n
.LP
.XX "\fBexamine(x) \fI[/<modifier>] <addr>[,<count>]\fR"
d79 1
a79 1
.br
d81 2
a82 4
.sp
.LP
.XS 2n
.IP b 5n
d84 1
a84 1
.IP h 5n
d86 1
a86 1
.IP l 5n
d88 1
a88 1
.IP a 5n
d90 1
a90 1
.IP A 5n
d92 1
a92 1
.IP x 5n
d94 1
a94 1
.IP z 5n
d96 1
a96 1
.IP o 5n
d98 1
a98 1
.IP d 5n
d100 1
a100 1
.IP u 5n
d102 1
a102 1
.IP r 5n
d104 1
a104 1
.IP c 5n
d107 1
a107 1
.IP s 5n
d110 1
a110 1
.IP m 5n
d113 1
a113 1
.IP i 5n
d115 1
a115 1
.IP I 5n
d118 1
a118 5
.XE 2n
.LP
.XS 5n
.LP
.IP vax 6n
d120 1
a120 1
.IP i386 6n
d122 1
a122 1
.IP mips 6n
d124 2
a125 4
.LP
.XE 5n
.LP
.XX xf
d129 1
a129 1
.XX xb
d134 1
a134 1
.XX "\fBprint[/axzodurc] \fI<addr1> [ <addr2> ... ]\fR"
a138 2
.br
.sp
a141 1
.sp
d143 1
a143 1
.sp
d149 2
a150 3
.sp
.br
.XX "\fBwrite[/bhl] \fI<addr> <expr1> [ <expr2> ... ]\fR"
d155 1
a155 1
.br
d159 1
a159 1
.XX "\fBset \fI$<variable> [=] <expr>\fR"
d162 1
a162 1
.XX "\fBbreak[/u] \fI<addr>[,<count>]\fR"
a167 1
.LP
a174 1
.LP
d179 1
a179 1
.XX "\fBdelete \fI<addr>|#<number>\fR"
d183 1
a183 1
.XX "\fBstep[/p] \fI[,<count>]\fR"
d187 1
a187 2
.br
.sp
d193 1
a193 1
.XX "\fBcontinue[/c]\fR"
d197 1
a197 2
.br
.sp
d201 1
a201 1
.XX "\fBuntil[/p]\fR"
d206 1
a206 1
.XX "\fBnext[/p]\fR"
d211 1
a211 1
.XX "\fBmatch[/p]\fR"
d213 1
a213 1
.XX "\fBtrace[/u] \fI[ <frame_addr> ][,<count>]\fR"
d217 1
a217 2
.br
.sp
d220 1
a220 1
.XX "\fBsearch[/bhl] \fI<addr> <value> [<mask>] [,<count>]\fR"
d225 1
a225 1
.XX "\fBshow all procs[/m]\fR"
d227 2
a228 1
This version of "\fBddb\fR"
d236 1
a236 2
.br
.XX "\fBps[/m]\fR"
d238 1
a238 1
.XX "\fBshow registers\fR"
d242 1
a242 2
.br
.sp
d245 1
a245 1
.XX "\fBshow map[/f] \fI<addr>\fR"
d248 1
a248 1
.XX "\fBshow object[/f]  \fI<addr>\fR"
d251 1
a251 1
.XX "\fBshow watches\fR"
d253 1
a253 1
.XX "\fBwatch \fI<addr>,<size>\fR"
d257 1
a257 1
.br
d260 1
a260 2
.br
.sp
d264 1
a264 7
.br
.LP
.XE 4n
.LP
.sp
.B VARIABLES
.sp
d267 2
a268 1
Register names are as in the "\fBshow registers\fR"
d274 1
a274 2
.br
.sp
d276 2
a277 2
.sp
.IP radix 12n
d279 1
a279 1
.IP maxoff 12n
d281 1
a281 1
.IP maxwidth 12n
d283 1
a283 1
.IP lines 12n
d285 1
a285 1
.IP tabstops 12n
d287 1
a287 1
.IP work\fIxx\fR
d291 2
a292 5
.LP
.LP
.sp
.B EXPRESSIONS
.sp
d295 2
a296 1
Special rules in "\fBddb\fR"
d298 2
a299 2
.br
.IP "<identifier>" 15n
d303 3
a305 3
[\fI<file_name>\fR:]\fI<func>\fR[:\fI<line_number>\fR]
[\fI<file_name>\fR:]\fI<variable>\fR, and
\fI<file_name>\fR[:\fI<line_number>\fR]
d309 1
a309 1
.IP "<number>" 15n
d312 1
a312 1
.IP \. 15n
d314 1
a314 1
.IP \+ 15n
d316 1
a316 1
.IP \.. 15n
d320 1
a320 1
.IP \' 15n
d322 1
a322 1
.IP "$<variable>" 15n
d325 1
a325 1
.IP \# 15n
d328 1
a328 1
.IP "*<expr>" 15n
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
