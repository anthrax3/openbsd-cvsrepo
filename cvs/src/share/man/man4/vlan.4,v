head	1.44;
access;
symbols
	OPENBSD_6_0:1.44.0.4
	OPENBSD_6_0_BASE:1.44
	OPENBSD_5_9:1.41.0.2
	OPENBSD_5_9_BASE:1.41
	OPENBSD_5_8:1.41.0.6
	OPENBSD_5_8_BASE:1.41
	OPENBSD_5_7:1.41.0.4
	OPENBSD_5_7_BASE:1.41
	OPENBSD_5_6:1.40.0.4
	OPENBSD_5_6_BASE:1.40
	OPENBSD_5_5:1.37.0.6
	OPENBSD_5_5_BASE:1.37
	OPENBSD_5_4:1.37.0.2
	OPENBSD_5_4_BASE:1.37
	OPENBSD_5_3:1.36.0.2
	OPENBSD_5_3_BASE:1.36
	OPENBSD_5_2:1.34.0.4
	OPENBSD_5_2_BASE:1.34
	OPENBSD_5_1_BASE:1.34
	OPENBSD_5_1:1.34.0.2
	OPENBSD_5_0:1.33.0.6
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.4
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.33.0.2
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.31.0.6
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.31.0.8
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.31.0.4
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.31.0.2
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.29.0.4
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.29.0.2
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.28.0.2
	OPENBSD_4_1_BASE:1.28
	OPENBSD_4_0:1.27.0.2
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.26.0.2
	OPENBSD_3_9_BASE:1.26
	OPENBSD_3_8:1.24.0.4
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.24.0.2
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.23.0.2
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.17.0.2
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.16.0.4
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4;
locks; strict;
comment	@.\" @;


1.44
date	2016.04.28.21.32.11;	author dlg;	state Exp;
branches;
next	1.43;
commitid	f9jXbDMFYq6vM3Tz;

1.43
date	2016.04.23.06.53.35;	author jmc;	state Exp;
branches;
next	1.42;
commitid	ptMTPJPSyIDclxLF;

1.42
date	2016.04.23.06.17.42;	author dlg;	state Exp;
branches;
next	1.41;
commitid	c9OtX9ndYKUSAPla;

1.41
date	2015.01.15.20.37.36;	author schwarze;	state Exp;
branches;
next	1.40;
commitid	VwT6DmpwXYKHzEuv;

1.40
date	2014.04.23.11.42.14;	author naddy;	state Exp;
branches;
next	1.39;

1.39
date	2014.04.21.16.21.08;	author henning;	state Exp;
branches;
next	1.38;

1.38
date	2014.04.21.14.08.09;	author henning;	state Exp;
branches;
next	1.37;

1.37
date	2013.06.02.20.23.34;	author tedu;	state Exp;
branches;
next	1.36;

1.36
date	2013.01.17.21.54.18;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2012.08.18.08.44.25;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2011.11.27.19.55.18;	author haesbaert;	state Exp;
branches;
next	1.33;

1.33
date	2010.06.08.13.24.16;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2010.06.03.16.15.00;	author naddy;	state Exp;
branches;
next	1.31;

1.31
date	2008.06.26.05.42.07;	author ray;	state Exp;
branches;
next	1.30;

1.30
date	2008.06.01.16.18.49;	author brad;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.31.19.19.53;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2007.02.21.06.10.01;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.09.19.03.04;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.11.23.08.51;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.11.22.59.47;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2004.11.27.22.46.28;	author henning;	state Exp;
branches;
next	1.23;

1.23
date	2004.08.17.23.58.36;	author jaredy;	state Exp;
branches;
next	1.22;

1.22
date	2004.08.12.18.43.08;	author mcbride;	state Exp;
branches;
next	1.21;

1.21
date	2004.07.26.09.20.14;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.08.10.03.43;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.06.10.29.41;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.11.04.32.28;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.18.07.54.53;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2001.12.18.20.33.51;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.13.13.54.26;	author mpech;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.05.14.45.53;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.20.05.57.55;	author mpech;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.03.23.21.20;	author chris;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.03.15.21.16;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.22.12.15.47;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.13.11.37.30;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.10.20.02.17;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.17.00.53.35;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.02.15.59.14;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.12.14.40.49;	author chris;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.28.05.26.22;	author chris;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.27.03.25.36;	author chris;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.26.22.30.21;	author chris;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.26.19.00.57;	author chris;	state Exp;
branches;
next	;


desc
@@


1.44
log
@provide some examples.

encouragement and reminders from jmc@@
@
text
@.\" $OpenBSD: vlan.4,v 1.43 2016/04/23 06:53:35 jmc Exp $
.\"
.\" Copyright (c) 2000 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Jason R. Thorpe of Zembu Labs, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: April 23 2016 $
.Dt VLAN 4
.Os
.Sh NAME
.Nm vlan ,
.Nm svlan
.Nd IEEE 802.1Q/1AD pseudo-device
.Sh SYNOPSIS
.Cd "pseudo-device vlan"
.Sh DESCRIPTION
The
.Nm vlan
driver provides network interfaces supporting Virtual Local Area
Networks (VLANs) on Ethernet networks.
.Nm vlan
interfaces implement virtual networks using the IEEE 802.1q protocol.
.Nm svlan
interfaces implement virtual networks using the IEEE 802.1ad protocol.
.Pp
.Nm svlan
interfaces allow construction of IEEE 802.1ad-compliant provider bridges.
.Nm vlan
and
.Nm svlan
interfaces can be configured to provide QinQ or stacked VLANs.
.Pp
The interfaces can be created at runtime using the
.Ic ifconfig vlan Ns Ar N Ic create
command or by setting up a
.Xr hostname.if 5
configuration file for
.Xr netstart 8 .
The interface itself can be configured with
.Xr ifconfig 8 ;
see its manual page for more information.
.Pp
.Nm vlan
and
.Nm svlan
interfaces must be configured with a parent Ethernet interface to
operate, and a virtual network identifier.
Packets transmitted through a
.Nm vlan
or
.Nm svlan
interface will be encapsulated in their respective protocols and
transmitted on the specified physical interface.
802.1q and 802.1ad packets received on the parent interface will be
matched to the
.Nm vlan
and
.Nm svlan
interfaces by their respective protocol and virtual network
identifiers, and decapsulated for reception on the associated virtual
interfaces.
.Pp
The 802.1q and 802.1ad protocols include a priority field which may
be altered via
.Xr pf.conf 5 ;
see the
.Cm prio
option for more information.
.Pp
.Nm vlan
and
.Nm svlan
interfaces support the following
.Xr ioctl 2 Ns s :
.Bl -tag -width indent -offset 3n
.It Dv SIOCSIFPARENT Fa "struct if_parent *"
Set the parent interface.
The parent may only be configured while the virtual interface is
administratively down.
.It Dv SIOCGIFPARENT Fa "struct if_parent *"
Get the currently configured parent interface.
.It Dv SIOCDIFPARENT Fa "struct ifreq *"
Delete the parent interface configuration.
The parent may only be removed while the virtual interface is
administratively down.
.It Dv SIOCSVNETID Fa "struct ifreq *"
Set the virtual network identifier.
Valid identifiers are in the range 1 to 4095.
.It Dv SIOCGVNETID Fa "struct if_parent *"
Get the currently configured virtual network identifier.
.It Dv SIOCDVNETID Fa "struct ifreq *"
Clear the current virtual network identifier.
Virtual interfaces without a configured virtual network identifier
will use 0 in their protocols tag field.
.It Dv SIOCSIFLLADDR Fa "struct ifreq *"
Configure a custom MAC address on the virtual interface.
When the virtual interface is using a custom MAC address the parent
interface will be configured to promiscuously receive packets.
When operating without a custom MAC address the virtual interface
will inherit the parent interfaces MAC address.
Configuring 00:00:00:00:00:00 as the MAC address will clear the
custom MAC address configuration and resume operation with the
parents MAC address.
.El
.Pp
.Nm vlan
and
.Nm svlan
interfaces use the following capability on parent interfaces:
.Bl -tag -width "IFCAP_VLAN_HWTAGGING" -offset 3n
.It IFCAP_VLAN_MTU
The parent interface can handle full sized frames, plus the size
of the vlan tag.
.El
.Pp
.Nm vlan
interfaces use the following capability on parent interfaces:
.Bl -tag -width "IFCAP_VLAN_HWTAGGING" -offset 3n
.It IFCAP_VLAN_HWTAGGING
The parent interface will offload the encapsulation and decapsulation
of 802.1q frames.
.El
.Sh EXAMPLES
Create an 802.1q virtual interface on top of the physical interface
em0, with virtual network identifier 5:
.Bd -literal -offset indent
# ifconfig vlan0 create
# ifconfig vlan0 parent em0 vnetid 5
# ifconfig vlan0 10.1.1.100/24
.Ed
.Pp
Create an 802.1q VLAN interface on network 10, on top of an 802.1ad
provider bridge on network 8, on top of the physical interface bge0:
.Bd -literal -offset indent
# ifconfig svlan0 create
# ifconfig svlan0 parent bge0 vnetid 8
# ifconfig svlan0 up
# ifconfig vlan0 create
# ifconfig vlan0 parent svlan0 vnetid 10
# ifconfig vlan0 10.1.1.101/24
.Ed
.Pp
Configure an 802.1q VLAN interface with a custom MAC address:
.Bd -literal -offset indent
# ifconfig vlan0 lladdr fe:e1:ba:d0:84:0e
.Ed
.Pp
Remove a custom MAC address from an 802.1q VLAN interface:
.Bd -literal -offset indent
# ifconfig vlan0 lladdr 00:00:00:00:00:00
.Ed
.Sh SEE ALSO
.Xr inet 4 ,
.Xr ip 4 ,
.Xr netintro 4 ,
.Xr hostname.if 5 ,
.Xr pf.conf 5 ,
.Xr ifconfig 8 ,
.Xr netstart 8
.Rs
.%T IEEE 802.1q standard
.%U http://standards.ieee.org/getieee802/802.1.html
.Re
.Rs
.%Q Provider Bridges, QinQ
.%T IEEE 802.1ad standard
.Re
.Sh AUTHORS
Originally
.An Garrett Wollman Aq Mt wollman@@freebsd.org .
.Sh CAVEATS
Some Ethernet chips will either discard or truncate
Ethernet frames that are larger than 1514 bytes.
This causes a problem as 802.1Q tagged frames can be up to 1518 bytes.
Most controller chips can be told not to discard large frames
and/or to increase the allowed frame size.
@


1.43
log
@remove errant Pp;
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.42 2016/04/23 06:17:42 dlg Exp $
d146 29
@


1.42
log
@update this to reflect the current state of the driver.

while here remove a lot of cruft, namely stuff about how packets
are laid out.

i dislike documenting the ioctls instead of what to do with ifconfig.
most people arent programming against devices, they just want to
configure the things using the existing tools. oh well.

an examples section would be welcome if someone can tell me what's
useful.

ok sthen@@ jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.41 2015/01/15 20:37:36 schwarze Exp $
d30 1
a30 1
.Dd $Mdocdate: January 15 2015 $
a97 1
.Pp
@


1.41
log
@Use .An in the AUTHORS section where appropriate;
from Kaspars at Bankovskis dot net
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.40 2014/04/23 11:42:14 naddy Exp $
d30 1
a30 1
.Dd $Mdocdate: April 23 2014 $
d41 12
a52 4
.Nm
Ethernet interface allows construction of virtual LANs when used in
conjunction with IEEE 802.1Q-compliant Ethernet devices.
The
d54 1
a54 5
Ethernet interface allows construction of IEEE 802.1AD-compliant
provider bridges.
It is normally used for QinQ to stack
.Nm
interfaces on top of it.
d66 22
a87 21
For
.Nm
devices,
the 802.1Q header specifies the virtual LAN number, and thus allows an
Ethernet switch (or other 802.1Q compliant network devices) to be aware of
which LAN the frame is part of, and in the case of a switch, which
port(s) the frame can go to.
Frames transmitted through the vlan interface will be diverted to the specified
physical interface with a 802.1Q vlan tag added.
802.1Q frames received by the parent interface with the
correct vlan tag will be diverted to the associated
.Nm
pseudo-interface.
.Pp
Frame headers which normally contain the destination host, source host, and
protocol, are altered with additional information, comprising as follows:
16 bits for the ether type (0x8100);
3 bits for the priority field;
1 bit for the canonical field (always 0);
and 12 bits for the vlan identifier.
The priority field may be altered via
a91 11
Following the vlan header is the actual ether type for the frame and length
information.
.Pp
For
.Nm svlan
devices,
the configuration is identical to the
.Nm
interface, the only differences being that it uses a different Ethernet
type (0x88a8) and an independent VLAN ID space on the parent
interface.
d93 1
a93 1
.Nm
d96 1
a96 1
interfaces support the following unique
d98 30
a127 5
.Bl -tag -width "SIOCSETVLAN" -offset 3n
.It SIOCGETVLAN
Get the vlan tag and parent for a given vlan interface.
.It SIOCSETVLAN
Set the vlan tag and parent for a given vlan interface.
d130 1
a130 1
.Nm
d133 1
a133 1
interfaces use the following interface capabilities:
a137 5
.It IFCAP_VLAN_HWTAGGING
The parent interface will participate in the tagging of frames.
(This is not supported by
.Nm svlan
interfaces.)
a138 7
.Sh DIAGNOSTICS
.Bl -diag
.It "vlan0: initialized with non-standard mtu N (parent ...)"
The IFCAP_VLAN_MTU capability was not set on the parent interface.
We assume in this event that the parent interface is not capable of handling
frames larger than its MTU.
This will generally result in a non-compliant 802.1Q implementation.
d140 6
a145 6
Some Ethernet chips will either discard or truncate
Ethernet frames that are larger than 1514 bytes.
This causes a problem as 802.1Q tagged frames can be up to 1518 bytes.
Most controller chips can be told not to discard large frames
and/or to increase the allowed frame size.
Refer to the hardware manual for your chip to do this.
a146 18
.Pp
If the IFCAP_VLAN_MTU capability is set on a vlan parent,
.Nm
assumes that the Ethernet chip on the parent can handle
oversized frames.
Either the chip allows 1518 byte frames by default (such as
.Xr rl 4 ) ,
the driver has instructed the chip to do so (such as
.Xr fxp 4
and
.Xr dc 4 ) ,
or the driver also takes advantage of a hardware tagging capability,
and thus oversized frames are never actually sent by
.Ox
(such as
.Xr txp 4
and
.Xr ti 4 ) .
a147 1
.Xr bridge 4 ,
d156 1
a156 1
.%T IEEE 802.1Q standard
d161 1
a161 1
.%T IEEE 802.1AD standard
d166 6
@


1.40
log
@Remove badly outdated information: FDDI and Token Ring are gone,
VLAN tags on transmitted packets have been visible to bpf since
the introduction of bpf_mtap_ether().  ok brad@@, henning@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.39 2014/04/21 16:21:08 henning Exp $
d30 1
a30 1
.Dd $Mdocdate: April 21 2014 $
d176 2
a177 1
Originally wollman@@freebsd.org.
@


1.39
log
@use the language from the 802.1Q standard which just talks about tags,
not encap, not header. reyk happy & ok.
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.38 2014/04/21 14:08:09 henning Exp $
a176 15
.Sh BUGS
The 802.1Q specification allows for operation over FDDI and Token Ring
as well as Ethernet.
This driver only supports such operation with Ethernet devices.
.Pp
When the IFCAP_VLAN_HWTAGGING capability is set on the parent interface,
.Nm
does not participate in the actual tagging of Ethernet frames.
It simply passes the vlan ID on to the parent interface for tagging on transmit.
The vlan tagged packet is not actually visible to
.Ox .
Thus,
.Xr bpf 4
will show untagged packets on the parent interface, although frames
are actually being transmitted with tags on the wire.
@


1.38
log
@stop lieing. vlan is not an encapsulation. it doesn't encapsulate ethernet
frames, it replaces the ethernet header by a slightly extended one.
ok sthen jmc
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.36 2013/01/17 21:54:18 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: June 2 2013 $
d70 1
a70 2
physical interface with a 802.1Q vlan header instead of the regular Ethernet
header.
@


1.37
log
@change format strings in error messages to reasonable values more likely
to be understood by people who don't program in C.
ok everyone
@
text
@d30 1
a30 1
.Dd $Mdocdate: January 17 2013 $
d36 1
a36 1
.Nd IEEE 802.1Q/1AD encapsulation/decapsulation pseudo-device
d70 3
a72 2
physical interface with 802.1Q vlan encapsulation.
Frames with 802.1Q encapsulation received by the parent interface with the
d78 1
a78 4
protocol, are altered with additional information.
After the source host,
a 32-bit 802.1Q header is included,
comprising as follows:
@


1.36
log
@various macro fixes;
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.35 2012/08/18 08:44:25 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: August 18 2012 $
d130 1
a130 1
.It "vlan%d: initialized with non-standard mtu %d (parent %s)"
@


1.35
log
@within Rs/Re reference blocks, use %U instead of %O (or any other
variants) for URLs, allowing mandoc -Thtml to properly generate links;

(sendmail.8 changes are simply using Lk, which i somehow missed in previous)

ingo reminded me to verify that gnu groff recognises %U: 1.20.1 does not,
but 1.21 does;
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.34 2011/11/27 19:55:18 haesbaert Exp $
d30 1
a30 1
.Dd $Mdocdate: November 27 2011 $
d175 1
a176 1
.%U Provider Bridges, QinQ
@


1.34
log
@Manpage bits for the recent changes in vlan(4) prio handling.

ok jmc henning sthen claudio
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.33 2010/06/08 13:24:16 jmc Exp $
d30 1
a30 1
.Dd $Mdocdate: June 8 2010 $
d172 1
a172 1
.%O http://standards.ieee.org/getieee802/802.1.html
d176 1
a176 1
.%O Provider Bridges, QinQ
@


1.33
log
@tweak previous; help/ok naddy
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.32 2010/06/03 16:15:00 naddy Exp $
d30 1
a30 1
.Dd $Mdocdate: June 3 2010 $
d86 1
a86 1
.Xr ifconfig 8 ;
d88 1
a88 1
.Cm vlanprio
d107 1
a107 1
.Bl -tag -width "SIOCSETVLANPRIO" -offset 3n
a109 2
.It SIOCGETVLANPRIO
Get the vlan priority for a given vlan interface.
a111 2
.It SIOCSETVLANPRIO
Set the vlan priority for a given vlan interface.
d167 1
@


1.32
log
@Add support for 802.1ad-style QinQ nested VLANs.

QinQ-compliant svlan (service VLAN) interfaces are implemented as
a new cloner type, use Ethernet type 0x88a8, and have a dedicated
VLAN tag hash to avoid ID conflicts.  vlan(4) interfaces can be
stacked on top of svlan(4).

Originally from reyk@@, input from claudio@@ and deraadt@@
ok claudio@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.31 2008/06/26 05:42:07 ray Exp $
d30 1
a30 1
.Dd $Mdocdate: June 26 2008 $
d36 1
a36 1
.Nd "IEEE 802.1Q/1AD encapsulation/decapsulation pseudo-devices"
d45 2
a46 2
.Ic svlan
Ethernet interface allows contruction of IEEE 802.1AD-compliant
d48 3
d52 1
a52 3
A
.Nm
interface can be created at runtime using the
d62 4
a65 3
This driver currently only supports
802.1Q encapsulation over Ethernet (Ethernet protocol 0x8100).
The 802.1Q header specifies the virtual LAN number, and thus allows an
d93 4
a96 4
An
.Ic svlan
interface is normally used for QinQ in 802.1AD-compliant provider bridges to
stack other
d98 1
a98 10
interfaces on top of it.
It can be created using the
.Ic ifconfig svlan Ns Ar N Ic create
command or by setting up a
.Xr hostname.if 5
configuration file for
.Xr netstart 8 .
The configuration is identical to the
.Nm
interface, the only differences are that it uses a different Ethernet
d103 2
d119 2
d127 1
a127 1
The parent interface will participate in the tagging of frames
d129 2
a130 2
.Ic svlan
interfaces).
@


1.31
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.30 2008/06/01 16:18:49 brad Exp $
d30 1
a30 1
.Dd $Mdocdate: June 1 2008 $
d34 3
a36 2
.Nm vlan
.Nd "IEEE 802.1Q encapsulation/decapsulation pseudo-device"
d44 4
d91 18
d130 4
a133 1
The parent interface will participate in the tagging of frames.
d179 4
@


1.30
log
@Remove further mentioning of HW VLAN stripping.
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.29 2007/05/31 19:19:53 jmc Exp $
a16 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d30 1
a30 1
.Dd $Mdocdate: May 31 2007 $
@


1.29
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.28 2007/02/21 06:10:01 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate$
d143 1
a143 1
and thus oversized frames are never actually sent or received by
d170 2
a171 3
does not participate in the actual tagging or untagging of Ethernet frames.
It simply passes the vlan ID on to the parent interface for tagging on transmit,
and gets a vlan ID for each packet on receive.
d177 1
a177 1
are actually being transmitted and received with tags on the wire.
@


1.28
log
@from brad:
Hardware VLAN stripping was removed by Camiel before 3.8.

ok camiel
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.27 2006/05/09 19:03:04 jmc Exp $
d37 1
a37 1
.Dd January 9, 2000
@


1.27
log
@no need to specify a "count" argument: ifconfig(8) handles these
"on demand";

from jan niemann;
ok deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.26 2006/01/11 23:08:51 jmc Exp $
d114 1
a114 1
The parent interface will participate in the tagging and untagging of frames.
@


1.26
log
@- add the info about configuring vlans using ifconfig to the main text
body, rather than tacking on the info to SEE ALSO
- tidy up the lists
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.25 2006/01/11 22:59:47 jmc Exp $
d44 1
a44 1
.Cd "pseudo-device vlan" Op Ar count
@


1.25
log
@- document vlanprio, requested by mpech
- document some new ioctls
- remove an unneccessary list

most of this diff is based on a mail from claudio;
ok norby
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.24 2004/11/27 22:46:28 henning Exp $
d59 3
d96 2
a97 2
.Bl -tag -width aaa
.It SIOCGETVLAN:
d99 1
a99 1
.It SIOCGETVLANPRIO:
d101 1
a101 1
.It SIOCSETVLAN:
d103 1
a103 1
.It SIOCSETVLANPRIO:
d109 2
a110 2
.Bl -tag -width aaa
.It IFCAP_VLAN_MTU:
d113 1
a113 1
.It IFCAP_VLAN_HWTAGGING:
a160 6
.Pp
The
.Nm
interface is to be configured with
.Xr ifconfig 8 ;
see its manual page for more information.
@


1.24
log
@remove the whining about missing upport for cisco's proprietary ISL
enacpsulation from the BUGS section.
this is not a bug - if anything is a bug is it ISL itself.
ISL has no relevance whatsover, even cisco itself stopped supporting
it in new products years ago. millert ok
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.23 2004/08/17 23:58:36 jaredy Exp $
d60 2
a61 4
This driver currently supports the following modes of operation:
.Bl -tag -width abc
.It 802.1Q encapsulation over Ethernet (Ethernet protocol 0x8100)
.Pp
a71 1
.El
d76 11
a86 3
a 32-bit 802.1Q header is included, with 16 bits for the ether type (0x8100), 3
bits for the priority field (not used in this implementation), 1 bit for
the canonical field (always 0), and 12 bits for the vlan identifier.
d94 4
d100 3
a102 2
.It SIOCGETVLAN:
Get the vlan tag and parent for a given vlan interface.
a103 1
.El
d162 1
a162 1
.Xr ifconfig 8 ,
@


1.23
log
@keep all "ifconfig <cloneable> create" examples the same

ok jmc
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.22 2004/08/12 18:43:08 mcbride Exp $
a172 5
.Pp
This driver could be the basis for support of the Cisco ISL VLAN protocol,
detailed at http://www.cisco.com/warp/public/473/741_4.html .
Unfortunately, public reimplementation of this protocol is currently prevented
by patent (at least in the USA).
@


1.22
log
@Remove leftovers from pre-clonable device days.
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.21 2004/07/26 09:20:14 jmc Exp $
d54 1
a54 1
.Ic ifconfig vlanN create
@


1.21
log
@.Xr hostname.if 5
.Xr netstart 8

from Alexey E. Suslikov
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.20 2003/12/08 10:03:43 markus Exp $
a84 7
The network interfaces are named
.Sy vlan Ns Ar 0 ,
.Sy vlan Ns Ar 1 ,
etc.
The number of interfaces is given by the corresponding
.Sy pseudo-device
line in the system config file.
@


1.20
log
@mention ifconfig create; sync synopsis like (Op Ar count). with jmc, deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.19 2003/06/06 10:29:41 jmc Exp $
d149 3
a151 1
.Xr ifconfig 8
@


1.19
log
@- section reorder
- some macro fixes
- kill whitespace at EOL
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.18 2003/04/11 04:32:28 jmc Exp $
d44 1
a44 1
.Cd pseudo-device vlan Op Ar count
d50 9
@


1.18
log
@typos;

wscons(4): ok miod@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.17 2003/02/18 07:54:53 jmc Exp $
d151 2
a173 2
.Sh AUTHORS
Originally wollman@@freebsd.org.
@


1.17
log
@copyrights added;

ac97(4): Constantine Sapuntzakis
scsi(4): Julian Elischer
tun(4): der Mouse (thanks mickey@@ for help with this one)
vlan(4): Jason R. Thorpe
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.16 2001/12/18 20:33:51 brad Exp $
d62 3
a64 1
correct vlan tag will be diverted to the associated vlan pseudo-interface.
d83 1
a83 1
.Xr vlan 4
d93 1
a93 1
.Xr vlan 4
d105 1
a105 1
The IFCAP_VLAN_MTU capability was not set on the parent interface.  
d107 1
a107 1
frames larger then its MTU.
d111 1
a111 1
Ethernet frames that are larger then 1514 bytes.
d119 2
a120 2
.Xr vlan 4
assumes that Ethernet chip on the parent can handle
d125 1
a125 1
.Xr fxp 4 
d146 3
a148 1
The vlan interface is to be configured with
d157 1
a157 1
.Xr vlan 4
d160 1
a160 1
and gets a vlan ID for each packet on receive. 
d163 1
a163 1
Thus, 
@


1.16
log
@fix Cisco ISL VLAN protocol URL
@
text
@d1 35
a35 1
.\" $OpenBSD: vlan.4,v 1.15 2001/11/13 13:54:26 mpech Exp $
@


1.15
log
@o) Fix bogus .Xr usage;
o) CAVEAT -> CAVEATS;
o) AUTHOR -> AUTHORS;
o) Start new sentence on a new line;
o) For URL and path names use .Pa;
o) We don't like .Pp before .Rs;
o) Don't use .Pp before/after .Sh;
o) OpenBSD -> .Ox;

millert@@ ok and help;
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.14 2001/10/05 14:45:53 mpech Exp $
d131 1
a131 1
detailed at http://www.cisco.com/warp/public/741/4.html .
@


1.14
log
@Powered by @@mantoya:
o) start new sentence on a new line;
o) minor mdoc fixes;
millert@@ ok

Tip of the day:   www.mpechismazohist.com
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.13 2001/08/20 05:57:55 mpech Exp $
a104 1
.Pp
@


1.13
log
@Powered by @@mantoya.
o) fix bogus .Xr usage;

millert@@ ok.
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.12 2001/08/03 23:21:20 chris Exp $
d71 2
a72 2
frames larger then its MTU.   This will generally result in a non-compliant
802.1Q implementation.
d75 2
a76 2
Ethernet frames that are larger then 1514 bytes.  This causes a problem as
802.1Q tagged frames can be up to 1518 bytes.
d78 2
a79 2
and/or to increase the allowed frame size.  Refer to the hardware manual
for your chip to do this.
@


1.12
log
@Use IFCAP_VLAN_MTU and IFCAP_VLAN_HWTAGGING capabilities:

LINK0 disappears; we now set IFCAP_VLAN_HWTAGGING at ifnet->if_capabilities
in the Ethernet driver for cards/drivers which support hardware tagging.

MTU ambiguity disppears; we now set IFCAP_VLAN_MTU in the Ethernet driver
when we know the chip will not truncate/discard vlan-sized frames.

Only allow the MTU to be changed within the scope of the parent interface's
MTU.  (Here we also take into account IFCAP_VLAN_MTU)

Propagate hardware-assisted IP/TCP/UDP checksumming flags to the vlan interface
if the card supports hardware tagging (from NetBSD)
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.11 2001/08/03 15:21:16 mpech Exp $
d87 1
a87 1
.Xr rl 4 ),
d91 1
a91 1
.Xr dc 4 ),
d98 1
a98 1
.Xr ti 4 .)
@


1.11
log
@o) We don't like .Pp before/after .Sh;
o) .Nm always has argument in .Sh SYNOPSIS;
o) We always closes .Bl and .Bd tags;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.10 2001/06/22 12:15:47 mpech Exp $
d57 23
a79 5
The operation mode can be given as
.Bl -tag -width bbb
.It link0
The parent interface supports VLAN tagging/untagging in hardware,
this requires support from the Ethernet driver as well.
d82 17
a98 2
to
.Xr ifconfig 8 .
d106 7
a112 2
All aspects of the vlan interface can be configured with
.Xr ifconfig 8 ;
a113 5
.Pp
A draft of IEEE 802.1Q standard can be obtained from
http://grouper.ieee.org/groups/802/1/pages/802.1Q.html
or the final version can be purchased from the
Institute of Electrical and Electronic Engineers, Inc.
d119 11
a129 20
Some Ethernet chips (notably the Intel 82558 and 82559) automatically
discard frames that are larger then 1514 bytes.
All Ethernet
chips supporting this sort of feature should allow for it to be turned off.
Optimally, upon loading, the chip's driver would do this (The
.Xr fxp 4
driver currently does for the Intel 82558/82559 chips.)
Refer to the hardware manual for your Ethernet chip to determine
if it has this feature, and if so, for information on how to turn it off.
A symptom of this problem is that small frames pass through the VLAN
(such as a frame carrying an ICMP packet), but frames which are at MTU size
are dropped.
When these frames are dropped, the TCP session will hang.
A temporary kludge is to set the MTU for each machine behind each VLAN to
1496 or less.
.Pp
Some Ethernet chips support 802.1Q tagging/untagging in hardware, but
do not have the appropriate hooks in their driver to pass the frame
directly to if_vlan.
The PCI device driver if_ti is able to do this, use it as a reference.
d132 1
a132 1
detailed at http://www.cisco.com/warp/public/741/4.html.
@


1.10
log
@o) remove unnecessary .Pp;
o) remove unnecessary .Nm args;
o) closes .Bl;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) sort SEE ALSO;
o) better -mdoc style;
o) typos;

aaron@@ ok.
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.9 2001/05/13 11:37:30 fgsch Exp $
a65 1
.Pp
a110 1
.Pp
@


1.9
log
@supporting.
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.8 2000/11/10 20:02:17 todd Exp $
d13 1
a13 1
.Nm vlan
@


1.8
log
@.Sh AUTHOR -> AUTHORS, ok aaron@@
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.7 2000/09/17 00:53:35 aaron Exp $
d90 1
a90 1
chips sporting this sort of feature should allow for it to be turned off.
@


1.7
log
@Zap some unwanted trailing whitespace.
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.6 2000/07/02 15:59:14 aaron Exp $
d113 1
a113 1
.Sh AUTHOR
@


1.6
log
@- s/ethernet/Ethernet/
- Remove hard sentence breaks.
- Some SEE ALSO reordering.
- Other repairs.
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.5 2000/06/12 14:40:49 chris Exp $
d35 1
a35 1
bits for the priority field (not used in this implementation), 1 bit for 
d51 1
a51 1
.It SIOCSETVLAN: 
d53 1
a53 1
.It SIOCGETVLAN: 
d57 1
a57 1
The operation mode can be given as 
d91 1
a91 1
Optimally, upon loading, the chip's driver would do this (The 
@


1.5
log
@State the not-so-obvious
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.4 2000/04/28 05:26:22 chris Exp $
d3 1
a3 1
.Dd 09 January 2000
d14 2
a15 2
ethernet interface allows construction of virtual LANs when used in
conjunction with IEEE 802.1Q-compliant ethernet devices.
d19 1
a19 1
.It 802.1Q encapsulation over ethernet (Ethernet protocol 0x8100)
d22 1
a22 1
ethernet switch (or other 802.1Q compliant network devices) to be aware of
d24 5
a28 5
port(s) the frame can go to.  Frames transmitted through the vlan
interface will be diverted to the specified physical interface with
802.1Q vlan encapsulation. Frames with 802.1Q encapsulation received by
the parent interface with the correct vlan tag will be diverted to the
associated vlan pseudo-interface.
d32 2
a33 1
protocol, are altered with additional information.  After the source host,
d36 3
a38 2
the canonical field (always 0), and 12 bits for the vlan identifier.  Following
the vlan header is the actual ether type for the frame and length information.
d61 1
a61 1
this requires support from the ethernet driver as well. 
a67 2
.Xr netintro 4 ,
.Xr ip 4 ,
d70 2
d75 1
a75 1
.Xr ifconfig 8 ,
d84 2
a85 2
as well as Ethernet.  
This driver only supports such operation with ethernet devices.
d87 3
a89 2
Some ethernet chips (notably the Intel 82558 and 82559) automatically
discard frames that are larger then 1514 bytes.  All ethernet
d94 1
a94 1
Refer to the hardware manual for your ethernet chip to determine
d98 2
a99 1
are dropped.  When these frames are dropped, the TCP session will hang.
d103 1
a103 1
Some ethernet chips support 802.1Q tagging/untagging in hardware, but
d105 2
a106 2
directly to if_vlan.  The PCI device driver if_ti is able to do this,
use it as a reference.
d109 3
a111 3
detailed at http://www.cisco.com/warp/public/741/4.html.  Unfortunately,
public reimplementation of this protocol is currently prevented by patent
(at least in the USA).
d114 1
a114 1
Originally wollman@@freebsd.org
@


1.4
log
@Reorganize top
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.3 2000/04/27 03:25:36 chris Exp $
d71 4
@


1.3
log
@Talking about frames, not packets here!
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.2 2000/04/26 22:30:21 chris Exp $
d20 11
d33 2
a34 2
a 32-bit 802.1Q header is included, with 16 bits for the ether type (0x8100), 3 
bits for the priority field (not used in this implementation), 1 bit for
d36 1
a36 9
the vlan header is the actual ether type for the packet and length information.
.Pp
The 802.1Q header specifies the virtual LAN number,
and thus allows an ethernet switch (or other 802.1Q compliant
network devices) to be aware of which LAN the packet is part of, and
in the case of a switch, which port(s) the packet can go to.
This driver allows OpenBSD to separate packets logically with separate
virtual ethernet network interfaces.
.El
@


1.2
log
@Small fixup
@
text
@d1 1
a1 1
.\" $OpenBSD: vlan.4,v 1.1 2000/04/26 19:00:57 chris Exp $
d79 1
a79 1
discard frames that are larger then 1500 bytes.  All ethernet
@


1.1
log
@vlan(4)
@
text
@d1 1
a1 1
.\" $OpenBSD$
d27 6
a32 5
The 802.1Q header specifies the virtual LAN
and thus allows an ethernet switch or other 802.1Q compliant
network devices to be aware of which device the packet was intended for.
This driver allows OpenBSD to group packets logically with separate
interfaces.
d78 1
a78 1
Some ethernet chips (notably the Intel 82558/82559) automatically
d80 9
a88 2
chips sporting this feature should allow for it to be turned off.
Optimally, upon loading, the chip's OpenBSD driver would do this.
d90 1
a90 5
1496 or less.  Refer to the hardware manual for your ethernet chip to determine
if it has this feature, and if so, for information on how to turn it off.
A symptom of this problem is that small packets (ICMP)
but packets which are >MTU size are dropped, thus causing
bulk TCP transfers to hang.
d93 1
a93 1
do not have the appropriate hooks in their driver to pass the packet
d97 1
a97 1
This driver could be extended to support the Cisco ISL VLAN protocol,
@

