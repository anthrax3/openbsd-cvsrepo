head	1.3;
access;
symbols
	OPENBSD_4_7:1.2.0.52
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.54
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.50
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.48
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.46
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.44
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.42
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.40
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.38
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.36
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.34
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.32
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.30
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.28
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.26
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.24
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.22
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.20
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.18
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	FreeBSD-970105:1.1.1.1
	phk:1.1.1;
locks; strict;
comment	@.\" @;


1.3
date	2010.07.01.20.12.32;	author tedu;	state dead;
branches;
next	1.2;

1.2
date	97.01.05.22.18.09;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	97.01.05.22.15.45;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.01.05.22.15.45;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.3
log
@these files are unbelievably out of date
@
text
@.\"
.\" ----------------------------------------------------------------------------
.\" "THE BEER-WARE LICENSE" (Revision 42):
.\" <phk@@login.dknet.dk> wrote this file.  As long as you retain this notice you
.\" can do whatever you want with this stuff. If we meet some day, and you think
.\" this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
.\" ----------------------------------------------------------------------------
.\"
.\" $OpenBSD: kernel.ms,v 1.2 1997/01/05 22:18:09 tholo Exp $
.\"
.ds RH The kernel and memory
.NH
The kernel and memory
.PP
Brk(2) isn't a particularly convenient interface,
it was probably made more to fit the memory model of the 
hardware being used, than to fill the needs of the programmers.
.PP
Before paged and/or virtual memory systems became
common, the most popular memory management facility used for
UNIX was segments.
This was also very often the only vehicle for imposing protection on 
various parts of memory.
Depending on the hardware, segments can be anything, and consequently 
how the kernels exploited them varied a lot from UNIX to UNIX and from
machine to machine.
.PP
Typically a process would have one segment for the text section, one
for the data and bss section combined and one for the stack.
On some systems the text shared a segment with the data and bss, and was
consequently just as writable as them.
.PP
In this setup all the brk(2) system call have to do is to find the
right amount of free storage, possibly moving things around in physical
memory, maybe even swapping out a segment or two to make space,
and change the upper limit on the data segment according to the address given.
.PP
In a more modern page based virtual memory implementation this is still
pretty much the situation, except that the granularity is now pages:
The kernel finds the right number of free pages, possibly paging some
pages out to free them up, and then plug them into the page-table of 
the process.
.PP
As such the difference is very small, the real difference is that in
the old world of swapping, either the entire process was in primary
storage (or it wouldn't be selected to be run) in a modern VM kernel,
a process might only have a subset of its pages in primary memory,
the rest will be paged in, if and when the process tries to access them.
.PP
Only very few programs deal with the brk(2) interface directly, the
few that does usually have their own memory management facilities.
LISP or FORTH interpreters are good examples.
Most other programs use the
.B malloc(3) 
interface instead, and leave it to the malloc implementation to 
use brk(2) to get storage allocated from the kernel.
@


1.2
log
@OpenBSD tags
@
text
@d9 1
a9 1
.\" $OpenBSD: kernel.ms,v 1.1.1.1 1997/01/05 22:15:45 tholo Exp $
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
.\" $Id: kernel.ms,v 1.3 1996/11/14 08:10:31 phk Exp $
@


1.1.1.1
log
@malloc(3) paper by phk; from FreeBSD
@
text
@@
