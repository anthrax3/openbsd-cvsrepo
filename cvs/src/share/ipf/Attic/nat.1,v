head	1.6;
access;
symbols
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2001.05.30.02.12.08;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	99.10.05.19.00.09;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	97.10.15.19.28.34;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	97.02.26.04.44.26;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.02.26.04.40.03;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	96.07.18.05.57.24;	author dm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@Example NAT Rules

# Scenario: Two network interfaces; one connected to internal 192.168.0.XXX
# network, other connected externally to the Internet. Suppose the internal
# interface is named ep1 and the external interface is named xl0. The
# following mapping will provide the internal network with Internet
# connectivity for tcp/udp traffic (note the ep1 name is not used; instead
# its network address is used):
map xl0 192.168.0.0/24 -> xl0/32 portmap tcp/udp 10000:20000

# map all tcp connections from network 10 to the address of the first ppp0
# interface (which can be dynamically assigned prior to use of ipnat)
map ppp0 10.0.0.0/8 -> ppp0/32 portmap tcp/udp 10000:20000

# map all tcp connections from network 10 into addresses of network 240.1.0
map ppp0 10.0.0.0/8 -> 240.1.0.0/24 portmap tcp/udp 10000:60000

# map all tcp connections from 10.1.0.0/16 to 240.1.0.1, changing the source
# port number to something between 10,000 and 20,000 inclusive.  For all other
# IP packets, allocate an IP # between 240.1.0.0 and 240.1.0.255, temporarily
# for each new user.
#
map ed1 10.1.0.0/16 -> 240.1.0.1/32 portmap tcp 10000:20000
map ed1 10.1.0.0/16 -> 240.1.0.0/24
#
# Redirection is triggered for input packets.
# For example, to redirect FTP connections through this box, to the local ftp
# port, forcing them to connect through a proxy, you would use:
#
rdr ed0 0.0.0.0/0 port ftp -> 127.0.0.1 port ftp
#
@


1.5
log
@Better NAT documentation.
@
text
@@


1.4
log
@add title
@
text
@d1 9
a9 1
			  nat.rules examples
@


1.3
log
@even more examples
@
text
@d1 2
@


1.2
log
@more examples
@
text
@d2 1
a2 1
# interface
d4 3
@


1.1
log
@added my two firewall examples, plus the stuff from the distribution
@
text
@d1 4
@
