head	1.21;
access;
symbols
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.17.0.16
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.12
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.14
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.6
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.10
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.8
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.10
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.24
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.22
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.20
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.18
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.16
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	r20000612:1.1.1.1
	dsr:1.1.1
	r19990103:1.1.1.1
	per:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.08.29.15.25.51;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	bVRfnhpAXApSlqvG;

1.20
date	2017.01.24.23.37.10;	author millert;	state Exp;
branches;
next	1.19;
commitid	6WmP0TOiCdwMSpw7;

1.19
date	2017.01.24.07.48.36;	author guenther;	state Exp;
branches;
next	1.18;
commitid	veGB6uLWx3BTEAfk;

1.18
date	2017.01.23.13.00.09;	author guenther;	state Exp;
branches;
next	1.17;
commitid	HAR0DSiIm2Be6qd4;

1.17
date	2012.12.05.23.20.06;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.01.02.00.59.01;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.16.07.26.36;	author ragge;	state Exp;
branches;
next	1.14;

1.14
date	2009.05.18.20.27.19;	author drahn;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.06.20.03.57;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.02.16.57.58;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.04.03.01.42;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.31.04.58.25;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.28.00.22.01;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.24.01.53.58;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.23.22.13.46;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.19.19.39.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.30;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.06.12.38.44;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.13.03.33.55;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.13.03.33.55;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.21
log
@rename *fdprint function to *dprintf, like libc version
@
text
@/*	$OpenBSD: dl_printf.c,v 1.20 2017/01/24 23:37:10 millert Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)printf.c	8.1 (Berkeley) 6/11/93
 */

/*
 * Scaled down version of printf(3).
 *
 * One additional format:
 *
 * The format %b is supported to decode error registers.
 * Its usage is:
 *
 *	printf("reg=%b\n", regval, "<base><arg>*");
 *
 * where <base> is the output base expressed as a control character, e.g.
 * \10 gives octal; \20 gives hex.  Each arg is a sequence of characters,
 * the first of which gives the bit number to be inspected (origin 1), and
 * the next characters (up to a control character, i.e. a character <= 32),
 * give the name of the register.  Thus:
 *
 *	printf("reg=%b\n", 3, "\10\2BITTWO\1BITONE\n");
 *
 * would produce output:
 *
 *	reg=3<BITTWO,BITONE>
 */

#include <sys/types.h>
#include <stdarg.h>
#include "resolve.h"		/* for __progname */
#include "syscall.h"
#include "util.h"

static int lastfd = -1;
#define OUTBUFSIZE 128
static char outbuf[OUTBUFSIZE];
static char *outptr = outbuf;

static void kprintn(int, u_long, int);
static void kdoprnt(int, const char *, va_list);
static void _dl_flushbuf(void);

static void putcharfd(int, int );

static void
putcharfd(int c, int fd)
{
	char b = c;
	int len;

	if (fd != lastfd) {
		_dl_flushbuf();
		lastfd = fd;
	}
	*outptr++ = b;
	len = outptr - outbuf;
	if ((len >= OUTBUFSIZE) || (b == '\n') || (b == '\r')) {
		_dl_flushbuf();
	}
}

static void
_dl_flushbuf()
{
	int len = outptr - outbuf;
	if (len != 0) {
		_dl_write(lastfd, outbuf, len);
		outptr = outbuf;
	}
}

void
_dl_printf(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	kdoprnt(2, fmt, ap);
	va_end(ap);
}

void
_dl_dprintf(int fd, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	kdoprnt(fd, fmt, ap);
	va_end(ap);
}

void
_dl_vprintf(const char *fmt, va_list ap)
{
	kdoprnt(2, fmt, ap);
}

static void
kdoprnt(int fd, const char *fmt, va_list ap)
{
	unsigned long ul;
	int lflag, ch;
	char *p;

	for (;;) {
		while ((ch = *fmt++) != '%') {
			if (ch == '\0') {
				_dl_flushbuf();
				return;
			}
			putcharfd(ch, fd);
		}
		lflag = 0;
reswitch:
		switch (ch = *fmt++) {
		case 'l':
			lflag = 1;
			goto reswitch;
		case 'b':
		{
			int set, n;

			ul = va_arg(ap, int);
			p = va_arg(ap, char *);
			kprintn(fd, ul, *p++);

			if (!ul)
				break;

			for (set = 0; (n = *p++);) {
				if (ul & (1 << (n - 1))) {
					putcharfd(set ? ',' : '<', fd);
					for (; (n = *p) > ' '; ++p)
						putcharfd(n, fd);
					set = 1;
				} else
					for (; *p > ' '; ++p);
			}
			if (set)
				putcharfd('>', fd);
		}
			break;
		case 'c':
			ch = va_arg(ap, int);
			putcharfd(ch & 0x7f, fd);
			break;
		case 's':
			p = va_arg(ap, char *);
			while ((ch = *p++))
				putcharfd(ch, fd);
			break;
		case 'd':
			ul = lflag ? va_arg(ap, long) : va_arg(ap, int);
			if ((long)ul < 0) {
				putcharfd('-', fd);
				ul = -(long)ul;
			}
			kprintn(fd, ul, 10);
			break;
		case 'o':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			kprintn(fd, ul, 8);
			break;
		case 'u':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			kprintn(fd, ul, 10);
			break;
		case 'p':
			putcharfd('0', fd);
			putcharfd('x', fd);
			lflag += sizeof(void *)==sizeof(u_long)? 1 : 0;
		case 'x':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			kprintn(fd, ul, 16);
			break;
		case 'X':
		{
			int l;

			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			if (lflag)
				l = (sizeof(ulong) * 8) - 4;
			else
				l = (sizeof(u_int) * 8) - 4;
			while (l >= 0) {
				putcharfd("0123456789abcdef"[(ul >> l) & 0xf], fd);
				l -= 4;
			}
			break;
		}
		default:
			putcharfd('%', fd);
			if (lflag)
				putcharfd('l', fd);
			putcharfd(ch, fd);
		}
	}
}

static void
kprintn(int fd, unsigned long ul, int base)
{
	/* hold a long in base 8 */
	char *p, buf[(sizeof(long) * NBBY / 3) + 1];

	p = buf;
	do {
		*p++ = "0123456789abcdef"[ul % base];
	} while (ul /= base);
	do {
		putcharfd(*--p, fd);
	} while (p > buf);
}

static const char ldso[] = "ld.so: ";

__dead void
_dl_die(const char *fmt, ...)
{
	va_list ap;

	_dl_printf("%s%s: ", ldso, __progname);
	va_start(ap, fmt);
	kdoprnt(2, fmt, ap);
	_dl_write(2, "\n", 1);
	va_end(ap);

	_dl_diedie();
}

__dead void
_dl_oom(void)
{
	static const char oom[] = ": out of memory\n";

	_dl_write(2, ldso, sizeof(ldso) - 1);
	_dl_write(2, __progname, _dl_strlen(__progname));
	_dl_write(2, oom, sizeof(oom) - 1);
	_dl_diedie();
}
@


1.20
log
@make ldso[] const; OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.19 2017/01/24 07:48:36 guenther Exp $	*/
d112 1
a112 1
_dl_fdprintf(int fd, const char *fmt, ...)
@


1.19
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.18 2017/01/23 13:00:09 guenther Exp $	*/
d244 1
a244 1
static char ldso[] = "ld.so: ";
@


1.18
log
@Mark a bunch of stuff static

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.17 2012/12/05 23:20:06 deraadt Exp $	*/
d59 1
d136 2
a137 1
			if (ch == '\0')
d139 1
a226 1
	_dl_flushbuf();
d242 27
@


1.17
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.16 2010/01/02 00:59:01 deraadt Exp $	*/
d62 1
a62 1
int lastfd = -1;
@


1.16
log
@the abstraction of using a function pointer for the print functions is
not needed (and secondly, ran into hppa not relocating function pointers
correctly)
ok kettenis drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.15 2009/08/16 07:26:36 ragge Exp $	*/
a56 1
#include <sys/cdefs.h>
@


1.15
log
@Do not have multiple va_end().  Ok miod@@ + many more.
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.14 2009/05/18 20:27:19 drahn Exp $	*/
d68 2
a69 2
static void kprintn(void (*)(int,int), int, u_long, int);
static void kdoprnt(void (*)(int,int), int, const char *, va_list);
d107 1
a107 1
	kdoprnt(putcharfd, 2, fmt, ap);
d117 1
a117 1
	kdoprnt(putcharfd, fd, fmt, ap);
d124 1
a124 1
	kdoprnt(putcharfd, 2, fmt, ap);
d128 1
a128 1
kdoprnt(void (*put)(int,int), int fd, const char *fmt, va_list ap)
d138 1
a138 1
			put(ch, fd);
d152 1
a152 1
			kprintn(put, fd, ul, *p++);
d159 1
a159 1
					put(set ? ',' : '<', fd);
d161 1
a161 1
						put(n, fd);
d167 1
a167 1
				put('>', fd);
d172 1
a172 1
			put(ch & 0x7f, fd);
d177 1
a177 1
				put(ch, fd);
d182 1
a182 1
				put('-', fd);
d185 1
a185 1
			kprintn(put, fd, ul, 10);
d189 1
a189 1
			kprintn(put, fd, ul, 8);
d193 1
a193 1
			kprintn(put, fd, ul, 10);
d196 2
a197 2
			put('0', fd);
			put('x', fd);
d201 1
a201 1
			kprintn(put, fd, ul, 16);
d213 1
a213 1
				put("0123456789abcdef"[(ul >> l) & 0xf], fd);
d219 1
a219 1
			put('%', fd);
d221 2
a222 2
				put('l', fd);
			put(ch, fd);
d229 1
a229 1
kprintn(void (*put)(int,int), int fd, unsigned long ul, int base)
d239 1
a239 1
		put(*--p, fd);
@


1.14
log
@Add buffer mechanism internal ld.so printing code. makes ktrace more readable.
nudge nudge deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.13 2003/07/06 20:03:57 deraadt Exp $	*/
a224 1
	va_end(ap);
@


1.13
log
@various proto, ansi, and knf repair.  tested on all architectures that
use it. (build may require make cleandir because of .depend balony)
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.12 2003/06/02 19:38:24 millert Exp $	*/
d63 5
d70 1
d78 12
d91 8
a98 1
	_dl_write(fd, &b, 1);
d226 1
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.11 2003/02/02 16:57:58 deraadt Exp $	*/
d61 1
@


1.11
log
@knf & ansi; drahn ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.10 2002/10/04 03:01:42 drahn Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@Print full 64 bit address. At least until LD_TRACE_LOADED_OBJECTS_FMT[12]
is supported properly.
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.9 2002/08/31 04:58:25 drahn Exp $	*/
d188 1
a188 1
			else 
@


1.9
log
@Add the ability to output to file descriptors besides stderr.
This allows ldd outptut go to stdout like it should. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.8 2002/05/28 00:22:01 deraadt Exp $	*/
d183 1
a183 1
			int l = 28;
d186 4
@


1.8
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.7 2002/05/24 01:53:58 deraadt Exp $	*/
d66 2
a67 2
static void kprintn(void (*)(int), u_long, int);
static void kdoprnt(void (*)(int), const char *, va_list);
d69 1
a69 1
static void putchar(int);
d72 1
a72 1
putchar(int c)
d76 1
a76 1
	_dl_write(2, &b, 1);
d85 11
a95 1
	kdoprnt(putchar, fmt, ap);
d102 1
a102 1
	kdoprnt(putchar, fmt, ap);
d106 1
a106 1
kdoprnt(void (*put)(int), const char *fmt, va_list ap)
d116 1
a116 1
			put(ch);
d130 1
a130 1
			kprintn(put, ul, *p++);
d137 1
a137 1
					put(set ? ',' : '<');
d139 1
a139 1
						put(n);
d145 1
a145 1
				put('>');
d150 1
a150 1
			put(ch & 0x7f);
d155 1
a155 1
				put(ch);
d160 1
a160 1
				put('-');
d163 1
a163 1
			kprintn(put, ul, 10);
d167 1
a167 1
			kprintn(put, ul, 8);
d171 1
a171 1
			kprintn(put, ul, 10);
d174 2
a175 2
			put('0');
			put('x');
d179 1
a179 1
			kprintn(put, ul, 16);
d187 1
a187 1
				put("0123456789abcdef"[(ul >> l) & 0xf]);
d193 1
a193 1
			put('%');
d195 2
a196 2
				put('l');
			put(ch);
d203 1
a203 1
kprintn(void (*put)(int), unsigned long ul, int base)
d213 1
a213 1
		put(*--p);
@


1.7
log
@remove another unneeded function
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.6 2002/05/23 22:13:46 deraadt Exp $	*/
d74 2
a75 2
	char b;
	b = c;
d98 2
a100 3
	int ch;
	unsigned long ul;
	int lflag;
d117 1
d140 1
a140 1
				put(ch & 0x7f);
d174 1
d195 1
a195 1
					/* hold a long in base 8 */
@


1.6
log
@remove _dl_sprintf().  nothing uses it.  and if it is gone, nothing can
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.5 2002/02/19 19:39:38 millert Exp $	*/
a69 2
static void sputchar(int);
static char *sbuf;
a78 6
static void
sputchar(int c)
{
	*sbuf++ = c;
}

d175 1
a175 1
			while(l >= 0) {
@


1.5
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.4 2002/02/17 19:42:26 millert Exp $	*/
a84 12
}

void
_dl_sprintf(char *buf, const char *fmt, ...)
{
	va_list ap;

	sbuf = buf;
	va_start(ap, fmt);
	kdoprnt(sputchar, fmt, ap);
	va_end(ap);
	*sbuf = '\0';
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.3 2002/02/16 21:27:30 millert Exp $	*/
a62 1
#ifdef __STDC__
a63 3
#else
#include <varargs.h>
#endif
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.2 2001/06/06 12:38:44 art Exp $	*/
d70 2
a71 2
static void kprintn __P((void (*)(int), u_long, int));
static void kdoprnt __P((void (*)(int), const char *, va_list));
@


1.2
log
@cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: dl_printf.c,v 1.1.1.1 2000/06/13 03:33:55 rahnds Exp $	*/
d73 2
a74 2
static void putchar __P((int));
static void sputchar __P((int));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.13 1998/06/12 12:09:12 d Exp $	*/
d78 1
a78 2
putchar(c)
	int c;
d86 1
a86 2
sputchar(c)
	int c;
a91 1
#ifdef __STDC__
a92 4
#else
_dl_sprintf(buf, fmt, va_alist)
	char *buf, *fmt;
#endif
a96 1
#ifdef __STDC__
a97 3
#else
	va_start(ap);
#endif
a103 1
#ifdef __STDC__
a104 4
#else
_dl_printf(fmt, va_alist)
	char *fmt;
#endif
a107 1
#ifdef __STDC__
a108 3
#else
	va_start(ap);
#endif
d120 1
a120 4
kdoprnt(put, fmt, ap)
	void (*put)__P((int));
	const char *fmt;
	va_list ap;
d134 2
a135 1
reswitch:	switch (ch = *fmt++) {
d216 1
a216 4
kprintn(put, ul, base)
	void (*put)__P((int));
	unsigned long ul;
	int base;
@


1.1.1.1
log
@Initial import of ELF ld.so. This was written indepently of the gnu rtld
code and is fully BSD copyrighted.
This initial import contains a mostly working mips and partially working
powerpc version. No support for ld.so.hints or system run path exists.

@
text
@@
