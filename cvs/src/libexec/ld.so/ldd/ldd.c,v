head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.4
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.20.0.8
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.8
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.07.02.19.06.12;	author tobias;	state Exp;
branches;
next	1.20;
commitid	Pj2InVE0ARUQRWuq;

1.20
date	2015.08.23.06.28.51;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	F1A0SlNlyWp2zkjt;

1.19
date	2015.01.20.02.16.19;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	Dv4leW7QAQHuKCVU;

1.18
date	2015.01.16.16.18.07;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	31KwZ9PARAKUg1ob;

1.17
date	2014.10.18.03.16.19;	author doug;	state Exp;
branches;
next	1.16;
commitid	9qT2XJyiwbb6dDCu;

1.16
date	2013.07.14.14.36.41;	author jca;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.29.07.19.19;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.02.09.27.34;	author sobrado;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.25.02.51.08;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.29.04.47.17;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.10.00.04.28;	author david;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.01.27.31;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.24.03.44.37;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.20.03.56.48;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.09.07.04.42;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.13.19.43.21;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.08.05.20.38;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.07.20.05.38;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.14.22.18.23;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.15.50.14;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.17.17.50.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Fixed a typo in error message.

ok jmc@@
@
text
@/*	$OpenBSD: ldd.c,v 1.20 2015/08/23 06:28:51 deraadt Exp $	*/
/*
 * Copyright (c) 2001 Artur Grabowski <art@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <elf_abi.h>
#include <err.h>
#include <fcntl.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include <limits.h>
#include <dlfcn.h>
#include <errno.h>

#include <sys/stat.h>
#include <sys/mman.h>
#include <sys/wait.h>

int usage(void);
int doit(char *);

int
main(int argc, char **argv)
{
	int c, xflag, ret;

	xflag = 0;
	while ((c = getopt(argc, argv, "x")) != -1) {
		switch (c) {
		case 'x':
			xflag = 1;
			break;
		default:
			usage();
			/*NOTREACHED*/
		}
	}

	if (xflag)
		errx(1, "-x not yet implemented");

	argc -= optind;
	argv += optind;

	if (argc == 0)
		usage();

	if (setenv("LD_TRACE_LOADED_OBJECTS", "true", 1) < 0)
		err(1, "setenv(LD_TRACE_LOADED_OBJECTS)");

	ret = 0;
	while (argc--) {
		ret |= doit(*argv);
		argv++;
	}

	return ret;
}

int
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s program ...\n", __progname);
	exit(1);
}


int
doit(char *name)
{
	Elf_Ehdr ehdr;
	Elf_Phdr *phdr;
	int fd, i, size, status, interp=0;
	char buf[PATH_MAX];
	struct stat st;
	void * dlhandle;

	if ((fd = open(name, O_RDONLY)) < 0) {
		warn("%s", name);
		return 1;
	}

	if (fstat(fd, &st) == -1) {
		warn("%s", name);
		close(fd);
		return 1;
	}

	if (!S_ISREG(st.st_mode)) {
		warnx("%s: not a regular file", name);
		close(fd);
		return 1;
	}
	if (read(fd, &ehdr, sizeof(ehdr)) < 0) {
		warn("read(%s)", name);
		close(fd);
		return 1;
	}

	if (memcmp(ehdr.e_ident, ELFMAG, SELFMAG) ||
	    ehdr.e_machine != ELF_TARG_MACH) {
		warnx("%s: not an ELF executable", name);
		close(fd);
		return 1;
	}

	if ((phdr = reallocarray(NULL, ehdr.e_phnum, sizeof(Elf_Phdr))) == NULL)
		err(1, "reallocarray");
	size = ehdr.e_phnum * sizeof(Elf_Phdr);

	if (pread(fd, phdr, size, ehdr.e_phoff) != size) {
		warn("read(%s)", name);
		close(fd);
		free(phdr);
		return 1;
	}
	close(fd);

	for (i = 0; i < ehdr.e_phnum; i++)
		if (phdr[i].p_type == PT_INTERP) {
			interp = 1;
			break;
		}
	free(phdr);

	printf("%s:\n", name);
	fflush(stdout);
	switch (fork()) {
	case -1:
		err(1, "fork");
	case 0:
		if (ehdr.e_type == ET_DYN && !interp) {
			if (realpath(name, buf) == NULL) {
				printf("realpath(%s): %s", name,
				    strerror(errno));
				fflush(stdout);
				_exit(1);
			}
			dlhandle = dlopen(buf, RTLD_TRACE);
			if (dlhandle == NULL) {
				printf("%s\n", dlerror());
				fflush(stdout);
				_exit(1);
			}
			_exit(0);
		}

		if (i == ehdr.e_phnum) {
			printf("not a dynamic executable\n");
			fflush(stdout);
			_exit(0);
		}

		execl(name, name, (char *)NULL);
		perror(name);
		_exit(1);
	default:
		if (wait(&status) < 0) {
			warn("wait");
			return 1;
		}
		if (WIFSIGNALED(status)) {
			if (WTERMSIG(status) == SIGINT)
				return 1;
			fprintf(stderr, "%s: signal %d\n", name,
			    WTERMSIG(status));
			return 1;
		}
		if (WEXITSTATUS(status)) {
			fprintf(stderr, "%s: exit status %d\n", name,
			    WEXITSTATUS(status));
			return 1;
		}
	}

	return 0;
}
@


1.20
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.19 2015/01/20 02:16:19 deraadt Exp $	*/
d116 1
a116 1
		warnx("%s: not an regular file", name);
@


1.19
log
@Add support for tracing libraries in static PIE binaries.  rcrt does not
contain "LD_TRACE_LOADED_OBJECTS" support, so this gets done by calling
RTLD_TRACE directly.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.18 2015/01/16 16:18:07 deraadt Exp $	*/
d102 1
a102 1
	void * dlhandle; 
d110 1
a110 1
		warn("%s", name);	
@


1.18
log
@<sys/param.h> to <limits.h> conversion.  Verified binaries
ok millert, thanks to doug for process advice
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.17 2014/10/18 03:16:19 doug Exp $	*/
d33 1
d37 1
d101 1
d109 11
a151 19
	if (ehdr.e_type == ET_DYN && !interp) {
		printf("%s:\n", name);
		if (realpath(name, buf) == NULL) {
			warn("realpath(%s)", name);
			return 1;
		}
		dlhandle = dlopen(buf, RTLD_TRACE);
		if (dlhandle == NULL) {
			printf("%s\n", dlerror());
			return 1;
		}
		return 0;
	}

	if (i == ehdr.e_phnum) {
		warnx("%s: not a dynamic executable", name);
		return 1;
	}

d158 22
d189 2
@


1.17
log
@Simple malloc() to reallocarray() conversion.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.16 2013/07/14 14:36:41 jca Exp $	*/
d34 1
a39 1
#include <sys/param.h>
d98 1
a98 1
	char buf[MAXPATHLEN];
@


1.16
log
@Fix possible memory/fd leak in the error path.
From David Hill dhill at mindcry.org; ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.15 2011/04/29 07:19:19 jmc Exp $	*/
d119 2
a121 2
	if ((phdr = malloc(size)) == NULL)
		err(1, "malloc");
@


1.15
log
@-x is currently unimplemented, so comment it out from the man page, and remove
it from usage(); if any developer wants to confirm that it will never
be an option, let me know and i'll zap the text entirely;

this is one half of a diff from Amit Kulkarni - i won;t be touching the other
half;
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.14 2009/03/02 09:27:34 sobrado Exp $	*/
d129 1
d136 1
a148 2
		close(fd);
		free(phdr);
a150 3

	close(fd);
	free(phdr);
@


1.14
log
@ldd(1) accepts more than one program as argument; while here,
synchronize synopsis and usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.13 2008/06/25 02:51:08 kurt Exp $	*/
d87 1
a87 1
	fprintf(stderr, "usage: %s [-x] program ...\n", __progname);
@


1.13
log
@Make ldd grok pie binaries.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.12 2007/05/29 04:47:17 jason Exp $	*/
d87 1
a87 1
	fprintf(stderr, "Usage: %s [-x] <filename> ...\n", __progname);
@


1.12
log
@based on a diff from Matt Provost: allow printing of ldd information
on libraries themselves.  Works by setting up the debugging flags then
calling dlopen() to do the heavy lifting.  ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.11 2003/07/10 00:04:28 david Exp $	*/
d97 1
a97 1
	int fd, i, size, status;
a100 1

d119 18
a136 1
	if (ehdr.e_type == ET_DYN) {
d148 1
a151 13
	size = ehdr.e_phnum * sizeof(Elf_Phdr);
	if ((phdr = malloc(size)) == NULL)
		err(1, "malloc");

	if (pread(fd, phdr, size, ehdr.e_phoff) != size) {
		warn("read(%s)", name);
		close(fd);
		free(phdr);
		return 1;
	}
	for (i = 0; i < ehdr.e_phnum; i++)
		if (phdr[i].p_type == PT_DYNAMIC)
			break;
@


1.11
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.10 2003/06/03 01:27:31 art Exp $	*/
d34 1
d39 1
d98 2
a100 1
	printf("%s:\n", name);
d120 15
d156 1
@


1.10
log
@license cleaning.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.9 2002/05/24 03:44:37 deraadt Exp $	*/
d32 1
@


1.9
log
@various KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.8 2002/02/20 03:56:48 jason Exp $	*/
d12 1
a12 4
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
@


1.8
log
@err/warn strings don't need \n's
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.7 2001/07/09 07:04:42 deraadt Exp $	*/
d4 1
a4 1
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 5
a14 5
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d16 1
a16 1
 *    derived from this software without specific prior written permission. 
d27 1
a27 1
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
a96 1
	char *buf;
a166 2

	
@


1.7
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.6 2001/06/13 19:43:21 deraadt Exp $	*/
d62 1
a62 1
		errx(1, "-x not yet implemented\n");
@


1.6
log
@print the name
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.5 2001/06/08 05:20:38 deraadt Exp $	*/
d146 1
a146 1
		execl(name, name, NULL);
d169 1
a169 1
	@


1.5
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.4 2001/06/07 20:05:38 art Exp $	*/
d99 2
@


1.4
log
@It started with trying to write code to avoid running static binaries,
it ended with a complete rewrite.

XXX - Doesn't handle '-x' yet, but the old didn't do that either (and didn't
      even match the man page).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d154 1
a154 1
				WTERMSIG(status));
d159 1
a159 1
				WEXITSTATUS(status));
@


1.3
log
@Commit initial alpha bits, to facilitate in-tree dev.
This code is not yet working.
@
text
@d1 1
a1 2
/*	$OpenBSD: ldd.c,v 1.2 2001/05/11 15:50:14 art Exp $ */

d3 2
a4 2
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
d6 3
a8 13
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
d10 7
a16 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d18 10
a28 35
/*
 * Copyright (c) 1996 Per Fogelstrom
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */


/* readsoname() adapted from Eric Youngdale's readelf program */

a30 8
#include <string.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <sys/file.h>
d32 1
a32 2
#include <string.h>
#include <unistd.h>
d35 1
a35 1
#include <elf_abi.h>
d37 3
a39 1
int readsoneeded(FILE *f, int flag);
d41 2
a42 8
void
usage()
{
	extern char *__progname;

	fprintf(stderr, "Usage: %s <filename> ...\n", __progname);
	exit(1);
}
d45 1
a45 3
main(argc, argv)
	int argc;
	char **argv;
d47 1
a47 4
	FILE *fp;
	int lflag = 0;
	int rval;
	int c;
d49 2
a50 1
	while ((c = getopt(argc, argv, "l")) != EOF) {
d52 2
a53 2
		case 'l':
			lflag = 1;
d61 3
d67 1
a67 1
	if (argc <= 0) {
a68 2
		/*NOTREACHED*/
	}
d70 2
a71 2
	if (setenv("LD_TRACE_LOADED_OBJECTS", "1", 1) == -1)
		errx(1, "cannot setenv LD_TRACE_LOADED_OBJECTS");
d73 1
a73 1
	rval = 0;
d75 3
a77 2
		int     fd;
		int     status;
d79 2
a80 13
		if (lflag) {
			if ((fp = fopen(*argv, "r")) == NULL) {
				warn("%s", *argv);
				rval |= 1;
				argv++;
				continue;
			}
			readsoneeded(fp, 0);
			fclose(fp);
			continue;
		}
		printf("%s:\n", *argv);
		fflush(stdout);
d82 4
a85 25
		switch (fork()) {
		case -1:
			err(1, "fork");
			break;
		default:
			if (wait(&status) <= 0) {
				warn("wait");
				rval |= 1;
			} else if (WIFSIGNALED(status)) {
				fprintf(stderr, "%s: signal %d\n",
						*argv, WTERMSIG(status));
				rval |= 1;
			} else if (WIFEXITED(status) && WEXITSTATUS(status)) {
				fprintf(stderr, "%s: exit status %d\n",
						*argv, WEXITSTATUS(status));
				rval |= 1;
			}
			break;
		case 0:
			rval |= execl(*argv, *argv, NULL) != 0;
			perror(*argv);
			_exit(1);
		}
		argv++;
	}
d87 2
a88 1
	return (rval ? 1 : 0);
d91 1
d93 1
a93 1
readsoneeded(FILE *infile, int dyncheck)
d95 14
a108 39
	Elf_Ehdr *epnt;
	Elf_Phdr *ppnt;
	int i;
	int isdynamic = 0;
	char *header;
	unsigned long dynamic_addr = 0;
	unsigned long dynamic_size = 0;
	int strtab_val = 0;
	int soname_val = 0;
	long loadaddr = -1;
	long loadbase = 0;
	Elf_Dyn *dpnt;
	struct stat st;
	char *res = NULL;

	if (fstat(fileno(infile), &st))
		return -1L;
	header = mmap(0, st.st_size, PROT_READ, MAP_SHARED, fileno(infile), 0);
	if (header == MAP_FAILED)
		return -1;

	epnt = (Elf_Ehdr *)header;
	if ((u_long)(epnt+1) > (u_long)(header + st.st_size))
		goto skip;

	ppnt = (Elf_Phdr *)&header[epnt->e_phoff];
	if ((u_long)ppnt < (u_long)header ||
	    (u_long)(ppnt+epnt->e_phnum) > (u_long)(header + st.st_size))
		goto skip;

	for (i = 0; i < epnt->e_phnum; i++) {
		if (loadaddr == -1 && ppnt->p_vaddr != 0) 
			loadaddr = (ppnt->p_vaddr & 0xfffff000) -
			    (ppnt->p_offset & 0xfffff000);
		if (ppnt->p_type == 2) {
			dynamic_addr = ppnt->p_offset;
			dynamic_size = ppnt->p_filesz;
		}
		ppnt++;
d110 6
a115 14
		
	dpnt = (Elf_Dyn *) &header[dynamic_addr];
	dynamic_size = dynamic_size / sizeof(Elf_Dyn);
	if ((u_long)dpnt < (u_long)header ||
	    (u_long)(dpnt+dynamic_size) > (u_long)(header + st.st_size))
		goto skip;
	
	while (dpnt->d_tag != DT_NULL) {
		if (dpnt->d_tag == DT_STRTAB)
			strtab_val = dpnt->d_un.d_val;
#define DT_MIPS_BASE_ADDRESS    0x70000006      /* XXX */
		if (dpnt->d_tag == DT_MIPS_BASE_ADDRESS)
			loadbase = dpnt->d_un.d_val;
		dpnt++;
d118 3
a120 2
	if (!strtab_val)
		goto skip;
d122 39
a160 12
	dpnt = (Elf_Dyn *) &header[dynamic_addr];
	while (dpnt->d_tag != DT_NULL) {
		if (dpnt->d_tag == DT_NEEDED) {
			isdynamic = 1;
			if (dyncheck)
				break;
			soname_val = dpnt->d_un.d_val;
			if (soname_val != 0 &&
			    soname_val + strtab_val - loadbase >= 0 &&
			    soname_val + strtab_val - loadbase < st.st_size)
				printf("%s\n",
				    header - loadbase + soname_val + strtab_val);
a161 1
		dpnt++;
d164 1
a164 4
skip:
	munmap(header, st.st_size);

	return isdynamic;
d167 1
@


1.2
log
@-1 -> MAP_FAILED
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.1 2000/09/17 17:50:57 deraadt Exp $ */
d179 2
a180 2
	Elf32_Ehdr *epnt;
	Elf32_Phdr *ppnt;
d184 2
a185 2
	unsigned int dynamic_addr = 0;
	unsigned int dynamic_size = 0;
d188 3
a190 3
	int loadaddr = -1;
	int loadbase = 0;
	Elf32_Dyn *dpnt;
d200 2
a201 2
	epnt = (Elf32_Ehdr *)header;
	if ((int)(epnt+1) > (int)(header + st.st_size))
d204 3
a206 3
	ppnt = (Elf32_Phdr *)&header[epnt->e_phoff];
	if ((int)ppnt < (int)header ||
	    (int)(ppnt+epnt->e_phnum) > (int)(header + st.st_size))
d220 4
a223 4
	dpnt = (Elf32_Dyn *) &header[dynamic_addr];
	dynamic_size = dynamic_size / sizeof(Elf32_Dyn);
	if ((int)dpnt < (int)header ||
	    (int)(dpnt+dynamic_size) > (int)(header + st.st_size))
d238 1
a238 1
	dpnt = (Elf32_Dyn *) &header[dynamic_addr];
@


1.1
log
@activate ldd, and indent some ld.so messages to make it easier to see what is going on
@
text
@d1 1
a1 1
/*	$OpenBSD: ldd.c,v 1.3 2000/09/15 07:13:44 deraadt Exp $ */
d197 1
a197 1
	if (header == (caddr_t)-1)
@

