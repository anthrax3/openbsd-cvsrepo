head	1.30;
access;
symbols
	OPENBSD_6_2:1.30.0.2
	OPENBSD_6_2_BASE:1.30
	OPENBSD_6_1:1.28.0.4
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.7.0.24
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.22
	OPENBSD_5_0:1.7.0.20
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.18
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.16
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.12
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.14
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.10
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.8
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7;
locks; strict;
comment	@# @;


1.30
date	2017.08.28.14.06.22;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	r8vwp03giVzP3uiZ;

1.29
date	2017.08.27.21.59.52;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	VUjW1bPAOMU4NF33;

1.28
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.27;
commitid	veGB6uLWx3BTEAfk;

1.27
date	2016.08.31.13.18.57;	author guenther;	state Exp;
branches;
next	1.26;
commitid	CVAxKVTW0W9k3Y9P;

1.26
date	2016.08.28.06.15.32;	author guenther;	state Exp;
branches;
next	1.25;
commitid	Y7AbrDd15D7CrGY4;

1.25
date	2016.05.07.21.20.11;	author guenther;	state Exp;
branches;
next	1.24;
commitid	TsxvaEIX0pORQvWE;

1.24
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.23;
commitid	d9R7VGw9CHTkwXE1;

1.23
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.22;
commitid	hneUpr7ZOJCeNeHP;

1.22
date	2016.03.21.01.32.49;	author guenther;	state Exp;
branches;
next	1.21;
commitid	7Tp2uEssgeiK9f77;

1.21
date	2015.11.15.03.41.24;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	kmpP8aoRsEOyxUMj;

1.20
date	2015.09.19.20.56.47;	author guenther;	state Exp;
branches;
next	1.19;
commitid	FcRQ6g8MqXiORdFs;

1.19
date	2015.09.13.17.08.04;	author guenther;	state Exp;
branches;
next	1.18;
commitid	BssYI6s6zozAyfkk;

1.18
date	2014.12.30.18.31.21;	author miod;	state Exp;
branches;
next	1.17;
commitid	5TlnLzrxYBXHygbE;

1.17
date	2014.07.14.03.54.51;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	fsr4AzfIP3TLhLM2;

1.16
date	2014.07.09.12.51.21;	author guenther;	state Exp;
branches;
next	1.15;
commitid	l16v8zUGQ3906m8T;

1.15
date	2014.07.06.07.28.36;	author otto;	state Exp;
branches;
next	1.14;
commitid	vlK4cqSehsiJVTpr;

1.14
date	2014.07.05.16.59.36;	author miod;	state Exp;
branches;
next	1.13;
commitid	pXrmuPqTP2udNBuA;

1.13
date	2013.12.25.15.14.59;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2013.08.13.05.52.20;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2013.06.01.09.57.58;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.9;

1.9
date	2012.11.01.10.25.33;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.24.03.26.56;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.14.19.47.50;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.14.17.00.25;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.11.23.05.23;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.11.02.38.31;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.10.22.26.40;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.10.21.19.54;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.10.07.44.58;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.30
log
@whitespace
@
text
@/*	$OpenBSD: ldasm.S,v 1.29 2017/08/27 21:59:52 deraadt Exp $ */

/*
 * Copyright (c) 2006 Dale Rahn
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define DL_DATA_SIZE	(16 * 4)	/* XXX */
#include <machine/asm.h>
#include <sys/syscall.h>

ENTRY(_dl_start)
	mov	r15, r12		// save for later
	mov	r15, r4			// sp
	add	#-(4+4+DL_DATA_SIZE), r15
	mov	r15, r5			// dl_data
	bsr	1f
	 nop
1:
.L_offbase:
	sts	pr, r0
	mov.l	.L_dynamic, r6
	add	r0, r6			// DYNAMIC
	mov.l	.L_boot_bind, r0
	bsrf	r0			// boot_bind(sp, dl_data, DYNAMIC)
	 nop
.L_call_boot_bind:
	mov	r12, r4
	add	#4, r4			// argv
	mov.l	@@r12, r5
	add	#2, r5
	shll2	r5
	add	r12, r5			// envp
	mov	r15, r7			// dl_data
	mov	r7, r6
	add	#(7*4), r6
	mov.l	@@r6, r6			// dl_data[AUX_base] == loff

	mov.l	.L_boot, r0
	bsrf	r0			// _dl_boot(argv, envp, loff, dl_data)
	 nop
.L_call_boot:
	mov	r12, r15
	mov.l	@@r15, r4		// argc
	mov	r15, r5
	add	#4, r5			// argv

	mov	r4, r6
	add	#1, r6
	shll2	r6
	add	r5, r6			// envp

	mov	r0, r12
	mova	.L_GOT, r0
	mov.l	.L_GOT, r7
	add	r7, r0			// GOT
	mov.l	.L_dl_dtors, r7
	jmp	@@r12
	 mov.l	@@(r0,r7), r7		// cleanup

	.align 2
.L_boot_bind:
	.long _dl_boot_bind-.L_call_boot_bind
.L_boot:
	.long _dl_boot-.L_call_boot
.L_dynamic:
	.long _DYNAMIC-.L_offbase
.L_GOT:
	.long _GLOBAL_OFFSET_TABLE_
.L_dl_dtors:
	.long _dl_dtors@@GOT
	.size _dl_start, .-dl_start


/*
 * r0 - obj
 * r1 - reloff
 */

ENTRY(_dl_bind_start)
	mov.l	r2, @@-r15
	mov.l	r3, @@-r15
	mov.l	r4, @@-r15
	mov.l	r5, @@-r15
	mov.l	r6, @@-r15
	mov.l	r7, @@-r15
	sts.l	pr, @@-r15
	sts.l	macl, @@-r15
	sts.l	mach, @@-r15

	mov	r0, r4	 /* move obj to 'C' arg */
	mov.l	.L_dl_bind, r0
	bsrf r0
	 mov r1, r5	 /* move reloff to 'C' arg */
.L_call_dl_bind:

	lds.l	@@r15+, mach
	lds.l	@@r15+, macl
	lds.l	@@r15+, pr
	mov.l	@@r15+, r7
	mov.l	@@r15+, r6
	mov.l	@@r15+, r5
	mov.l	@@r15+, r4
	mov.l	@@r15+, r3
	jmp	@@r0		/* jump to specified address */
	 mov.l	@@r15+, r2

	.align 2
.L_dl_bind:
	.long	_dl_bind-.L_call_dl_bind
	.size _dl_bind_start, .-dl_bind_start
@


1.29
log
@Replace heaps of hand-written syscall stubs with a simpler framework
which is largely MI.
ok visa kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.28 2017/01/24 07:48:37 guenther Exp $ */
d34 1
a34 1
	mov	r15, r12		// save for later 
d54 1
a54 1
	add	r12, r5			// envp 
@


1.28
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.27 2016/08/31 13:18:57 guenther Exp $ */
a31 1
#include <SYS.h>
a132 66


	/* STUB */


/* ld.so SYSCALLS */

#define DL_SYSCALL(n) DL_SYSCALL2(n,n)
#define DL_SYSCALL2(n,c)				\
	.global		__CONCAT(_dl_,n)		;\
	.type		__CONCAT(_dl_,n)%function	;\
__CONCAT(_dl_,n):					;\
	SYSTRAP(c)					;\
	bf	.L_cerr					;\
	 nop						;\
	rts						;\
	 nop

#define DL_SYSCALL_NOERR(n) DL_SYSCALL2_NOERR(n,n)
#define DL_SYSCALL2_NOERR(n,c)				\
	.global		__CONCAT(_dl_,n)		;\
	.type		__CONCAT(_dl_,n)%function	;\
__CONCAT(_dl_,n):					;\
	SYSTRAP(c)					;\
	rts						;\
	 nop


	.section	".text"
	.align		4
DL_SYSCALL(close)


	.global		_dl_exit
	.type		_dl_exit%function
_dl_exit:
	SYSTRAP(exit)
1:
	bra 1b
	 nop

DL_SYSCALL_NOERR(issetugid)
DL_SYSCALL_NOERR(getthrid)
DL_SYSCALL(thrkill)
DL_SYSCALL2(_syscall,__syscall)
DL_SYSCALL(munmap)
DL_SYSCALL(mprotect)
DL_SYSCALL(open)
DL_SYSCALL(read)

.L_cerr:
	neg	r0, r0
	rts
	 nop

DL_SYSCALL(write)
DL_SYSCALL(fstat)
DL_SYSCALL(readlink)
DL_SYSCALL(utrace)
DL_SYSCALL(getentropy)
DL_SYSCALL(sendsyslog)
DL_SYSCALL(pledge)
DL_SYSCALL2(getcwd,__getcwd)
DL_SYSCALL(sysctl)
DL_SYSCALL(getdents)

@


1.27
log
@alpha and sh have TCB_SET() macros so don't need _dl_set_tcb()

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.26 2016/08/28 06:15:32 guenther Exp $ */
d152 1
d175 3
a177 2
DL_SYSCALL(issetugid)
DL_SYSCALL(getthrid)
@


1.26
log
@ld.so doesn't need gettimeofday or lstat stubs any more

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.25 2016/05/07 21:20:11 guenther Exp $ */
a196 1
DL_SYSCALL2_NOERR(set_tcb,__set_tcb)
@


1.25
log
@Move the set_tcb after getdents to keep L_cerr in range.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.24 2016/05/07 19:05:23 guenther Exp $ */
a188 1
DL_SYSCALL(gettimeofday)
a189 1
DL_SYSCALL(lstat)
@


1.24
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.23 2016/03/21 22:41:29 bluhm Exp $ */
d198 1
a199 2

DL_SYSCALL(getdents)
@


1.23
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.22 2016/03/21 01:32:49 guenther Exp $ */
d175 1
d198 1
@


1.22
log
@Switch ld.so's stack smash handler from sendsyslog to sendsyslog2
and pass the LOG_CONS flag like libc's handler.

ok deraadt@@ bluhm@@ (who had a similar diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.21 2015/11/15 03:41:24 deraadt Exp $ */
d193 1
a193 1
DL_SYSCALL(sendsyslog2)
@


1.21
log
@ldd(1) sets environment variable LD_TRACE_LOADED_OBJECTS to tell ld.so
that it should show information about the program it loads, rather than
run it.  In that specific case, ld.so can pledge to "stdio rpath" to
ensure that code path in ld.so has no bugs.
Yes, a pledge in ld.so.... who'd have thought!
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.20 2015/09/19 20:56:47 guenther Exp $ */
d193 1
a193 1
DL_SYSCALL(sendsyslog)
@


1.20
log
@kbind has eliminated the need for and use of the bind lock.  Delete it, the
the callback, and the sigprocmask stub.
Keep around the DL_SETBINDLCK case until libpthread stops using it.

discussed with miod@@ at l2k15
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.19 2015/09/13 17:08:04 guenther Exp $ */
d194 1
@


1.19
log
@Rename __sysctl syscall to just sysctl, as the userland wrapper is no longer
necessary

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.18 2014/12/30 18:31:21 miod Exp $ */
a198 26
	.global		_dl_sigprocmask
	.type		_dl_sigprocmask%function
_dl_sigprocmask:
	mov	r5, r2			/* fetch new sigset pointer */
	tst	r2, r2			/* check new sigset pointer */
	bf	1f			/* if not null, indirect */
	 mov	#1, r4			/* SIG_BLOCK */
	bra	2f
	 nop
1:	mov.l	@@r2, r2			/* fetch indirect ... */
	mov	r2, r5			/* to new mask arg */
2:	mov.l	LSYS_sigprocmask, r0
	trapa	#0x80
	bf	.L_cerr
	 mov	r6, r2			/* fetch old mask requested */
	tst	r2, r2			/* test if old mask requested */
	bt	out
	 mov.l	r0, @@r2			/* store old mask */
out:
	xor	r0, r0
	rts
	 nop

	.align	2
LSYS_sigprocmask:
	.long	SYS_sigprocmask
@


1.18
log
@Clean up and optimize _dl_start a bit by using immediate addressing for
the constants whenever they fit, and avoiding saving and restoring
registers we don't need to preserve.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.17 2014/07/14 03:54:51 deraadt Exp $ */
d195 1
a195 1
DL_SYSCALL2(sysctl,__sysctl)
@


1.17
log
@Now that we have sendsyslog(2), we can directly use it in the
(previously completely retarded) stack_smash_handler of ld.so
ok beck miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.16 2014/07/09 12:51:21 guenther Exp $ */
d35 4
a38 12
	mov	r15, r12			// save for later 
	sts	pr, r11
	mov	r15, r4			// boot_bind(sp, dl_data) (sp)
	mov.l	.L_datasize, r0
	sub	r0, r15
	mov	r15, r5
	mov	r5, r13
	// not trusting register to store the data, push it on the stack.
	// callee/caller save questions

	mov	r15, r14

d45 1
a45 3
	add	r0, r6
	mov	 r14, r15
	mov	r15, r14
d47 1
a47 1
	bsrf	r0
d51 2
a52 2
	add	#4, r4
	mov.l	@@r12, r5		//loads argc
d55 2
a56 3
	add	r12, r5			// calc argv 

	mov	r13, r7
d58 2
a59 3
	mov.l	.L_loff, r0
	add	r0, r6
	mov.l	@@r6, r6
d62 1
a62 1
	bsrf	r0
a64 1

d66 1
a66 2
	lds	r11, pr
	mov.l	@@r15, r4
d68 1
a68 1
	add	#4, r5
d73 1
a73 1
	add	r5, r6			// calc envp
a87 2
.L_datasize:
	.long 4+4+DL_DATA_SIZE
a89 2
.L_loff:
	.long 7*4
@


1.16
log
@_dl_fcntl() is no longer used; kill the stubs

ok otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.15 2014/07/06 07:28:36 otto Exp $ */
d211 1
@


1.15
log
@move from sysclt(KERN_ARND) to getentropy(2); ok miod@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.14 2014/07/05 16:59:36 miod Exp $ */
a205 1
DL_SYSCALL(fcntl)
@


1.14
log
@Unlike libc syscall stubs, ld.so syscall stubs are expected to return -errno,
rather than -1, upon failure.

Even though nothing in ld.so currently needs to explicitely check for specific
error values, consistency doesn't hurt.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.13 2013/12/25 15:14:59 miod Exp $ */
d211 1
@


1.13
log
@Pass _dl_dtors as the csu cleanup routine on sh
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.12 2013/08/13 05:52:20 guenther Exp $ */
d200 1
a200 1
	mov	#-1, r0 
a241 2


@


1.12
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.11 2013/06/01 09:57:58 miod Exp $ */
d88 8
a95 2
	jmp	@@r0
	 mov	#0, r7
d108 4
@


1.11
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.10 2013/04/05 12:58:03 kurt Exp $ */
d204 1
a204 1
DL_SYSCALL(getdirentries)
@


1.10
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.9 2012/11/01 10:25:33 kettenis Exp $ */
d200 1
@


1.9
log
@Clear r7 before passing control to the main object.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.8 2012/10/24 03:26:56 guenther Exp $ */
d198 3
@


1.8
log
@Garbage-collect the _dl_stat() routine, now unused

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.7 2006/11/14 19:47:50 drahn Exp $ */
d89 1
a89 1
	 nop
@


1.7
log
@stack corruption was fixed a while ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.6 2006/11/14 17:00:25 drahn Exp $ */
a194 1
DL_SYSCALL(stat)
@


1.6
log
@cleanup pointed out by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.5 2006/11/11 23:05:23 drahn Exp $ */
d29 1
a29 7
/*
 * correct size is 16 * 4 but the 4096 is because of a stack corruption
 * bug that I couldn't find.
 */

#define DL_DATA_SIZE	(8192 + 16 * 4)	/* XXX */
#define DATA_OFFSET	(48)	/* XXX */
a39 1
	mov.l	.L_offset, r0
a40 1
	add	r0, r5
a97 2
.L_offset:
	.long DATA_OFFSET
@


1.5
log
@when calculating envp, skip over the NULL between argv and envp.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.4 2006/11/11 02:38:31 drahn Exp $ */
d55 1
a55 3
	mova	.L_call_boot_bind, r0
	mov	#0, r0
	bsrf	r0
d57 1
@


1.4
log
@Working?
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.3 2006/11/10 22:26:40 drahn Exp $ */
d94 1
@


1.3
log
@dont want to know where this stack corruption is coming from.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.2 2006/11/10 21:19:54 drahn Exp $ */
a51 3
//	mov.l	r13,@@-r15		// save dl_data
//	mov.l	r12,@@-r15		// save original sp
//	mov.l	r11,@@-r15		// save pr
a68 3
//	mov.l	@@r15+, r11
//	mov.l	@@r15+, r12
//	mov.l	@@r15+, r13
a75 1
#if 0
a76 5
	mov	#24, r0			// WTF? 
	sub	r0, r7
#else
	mov	r13, r7
#endif
a82 4
//	mov.l	r13,@@-r15		// save dl_data
//	mov.l	r12,@@-r15		// save original sp
//	mov.l	r11,@@-r15		// save pr
	mov	r12, r15
d87 1
a87 4
	mov	r14, r15
//	mov.l	@@r15+, r11
//	mov.l	@@r15+, r12
//	mov.l	@@r15+, r13
d89 7
d97 1
@


1.2
log
@Getting much closer.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.1 2006/11/10 07:44:58 drahn Exp $ */
d34 2
a35 1
#define DL_DATA_SIZE	(4096 + 16 * 4)	/* XXX */
d46 1
d48 1
d117 2
@


1.1
log
@Not quite working ld.so support for sh
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.6 2006/05/03 16:10:52 drahn Exp $ */
d4 1
a4 1
 * Copyright (c) 2004 Dale Rahn
d29 6
a34 1
#define DL_DATA_SIZE	(16 * 4)	/* XXX */
d40 2
a41 3
	mov	r15, r8			// save for later 
	mov	r15,r14
	sts	pr, r10
d46 19
a64 2
	add	#4, r5
	mov	r5, r9
d69 4
a72 1
	mov	r8, r4
d74 1
a74 1
	mov.l	@@r8, r5		//loads argc
d77 10
a86 2
	add	r8, r5
	mov	r9, r6
d89 2
d92 4
a95 2
	mov	r9, r7
	mov	r8, r15
d101 4
a104 1
	lds	r10, pr
d114 2
@

