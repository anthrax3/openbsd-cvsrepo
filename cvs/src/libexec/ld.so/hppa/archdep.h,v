head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.2
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.14;
commitid	veGB6uLWx3BTEAfk;

1.14
date	2017.01.21.01.15.00;	author guenther;	state Exp;
branches;
next	1.13;
commitid	QprHiuRGEnP0ckD2;

1.13
date	2017.01.20.10.40.30;	author guenther;	state Exp;
branches;
next	1.12;
commitid	uAlj3GUarQrChIDM;

1.12
date	2017.01.09.22.51.04;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	8mveS1UjNqlN99uR;

1.11
date	2016.05.18.20.40.20;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	2B3GUZfTLbygCJRi;

1.10
date	2015.12.06.23.36.12;	author guenther;	state Exp;
branches;
next	1.9;
commitid	g8Z7pgqt28AVPEBX;

1.9
date	2014.01.19.10.25.45;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2013.12.24.10.53.37;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.13.02.33.24;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.13.18.44.55;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.02.12.16.35;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.09.21.45.26;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.16.23.19.42;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.07.15.18.19;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.25.21.48.00;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.15
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@/*	$OpenBSD: archdep.h,v 1.14 2017/01/21 01:15:00 guenther Exp $	*/

/*
 * Copyright (c) 2004 Michael Shalayeff
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _HPPA_ARCHDEP_H_
#define _HPPA_ARCHDEP_H_

#define	RELOC_TAG	DT_RELA
#define	HAVE_JMPREL	1

#define	MACHID	EM_PARISC		/* ELF e_machine ID value checked */

#include <elf_abi.h>
#include <machine/reloc.h>
#include "syscall.h"
#include "util.h"


static inline void
RELOC_JMPREL(Elf_RelA *r, const Elf_Sym *s, Elf_Addr *p, unsigned long v,
    Elf_Addr *pltgot)
{
	if (ELF_R_TYPE(r->r_info) == RELOC_IPLT) {
		p[0] = v + s->st_value + r->r_addend;
		p[1] = (Elf_Addr)pltgot;
	} else {
		_dl_exit(5);
	}
}

static inline void
RELOC_DYN(Elf_RelA *r, const Elf_Sym *s, Elf_Addr *p, unsigned long v)
{
	if (ELF_R_TYPE(r->r_info) == RELOC_DIR32) {
		if (ELF_R_SYM(r->r_info) != 0)
			*p = v + s->st_value + r->r_addend;
		else
			*p = v + r->r_addend;
	} else if (ELF_R_TYPE(r->r_info) == RELOC_PLABEL32) {
		*p = v + s->st_value + r->r_addend;
	} else {
		_dl_exit(6);
	}
}

#define RELOC_GOT(obj, offs)

void _hppa_dl_dtors(void);
Elf_Addr _dl_md_plabel(Elf_Addr, Elf_Addr *);

#endif /* _HPPA_ARCHDEP_H_ */
@


1.14
log
@_dl_exit() is __dead, so it should return void.
Move _dl_mmap() and _dl_mquery() inlines from archdep.h to syscall.h and
remove pointless casts and unnecessary parens.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.13 2017/01/20 10:40:30 guenther Exp $	*/
a51 1
		_dl_printf("unknown bootstrap relocation\n");
a66 1
		_dl_printf("unknown bootstrap relocation\n");
@


1.13
log
@Delete ancient macros and unnecessary #includes

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.12 2017/01/09 22:51:04 kettenis Exp $	*/
a41 7

static inline void *
_dl_mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset)
{
	return((void *)_dl__syscall((quad_t)SYS_mmap, addr, len, prot,
	    flags, fd, 0, offset));
}
@


1.12
log
@Remove dependency on __got_{start,end} symbols and look at PT_GNU_RELRO
instead.  Result in a few more pages that aren't writable on some platforms
(such as hppa).  Based on an initial diff from guenther@@.

Thanks to deraadt@@ for testing.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.11 2016/05/18 20:40:20 deraadt Exp $	*/
a35 2
#define	DL_MALLOC_ALIGN	8	/* Arch constraint or otherwise */

a37 4
#define	RELTYPE	Elf_Rela
#define	RELSIZE	sizeof(Elf_Rela)

#include <sys/mman.h>
@


1.11
log
@fix types for mmap wrappers.  A few whitespace cleanups snuck in.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.10 2015/12/06 23:36:12 guenther Exp $	*/
a86 2

#define GOT_PERMS PROT_READ
@


1.10
log
@Simplify the relocation code for the ld.so bootstrap and static pie: track
just the dynamic tags are needed instead of reusing the generic elf_object_t
structure.

testing and feedback from miod@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.9 2014/01/19 10:25:45 guenther Exp $	*/
d50 1
a50 2
_dl_mmap(void *addr, unsigned int len, unsigned int prot,
	unsigned int flags, int fd, off_t offset)
d53 1
a53 1
		flags, fd, 0, offset));
@


1.9
log
@Only i386 needs mquery; delete the static inlines from amd64 and hppa
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.8 2013/12/24 10:53:37 kettenis Exp $	*/
d33 3
d59 2
a60 1
RELOC_REL(Elf_Rel *r, const Elf_Sym *s, Elf_Addr *p, unsigned long v)
d62 7
a68 2
	/* HPPA does no REL type relocations */
	_dl_exit(20);
d72 1
a72 2
RELOC_RELA(Elf_RelA *r, const Elf_Sym *s, Elf_Addr *p, unsigned long v,
    Elf_Addr *pltgot)
a78 3
	} else if (ELF_R_TYPE(r->r_info) == RELOC_IPLT) {
		p[0] = v + s->st_value + r->r_addend;
		p[1] = (Elf_Addr)pltgot;
@


1.8
log
@Remove some leftover bits that are no longer necessary now that we no
longer call atexit(4) directly on hppa.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.7 2013/11/13 02:33:24 guenther Exp $	*/
a50 8
		flags, fd, 0, offset));
}

static inline void *
_dl_mquery(void *addr, unsigned int len, unsigned int prot,
	unsigned int flags, int fd, off_t offset)
{
	return((void *)_dl__syscall((quad_t)SYS_mquery, addr, len, prot,
@


1.7
log
@Complete the prototype in a function cast to quiet a gcc warning

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.6 2013/01/13 18:44:55 miod Exp $	*/
a91 6
#define	MD_CALL(sobj, func, arg) \
    hppa_call((arg), (sobj)->dyn.pltgot, (func))

#define	MD_ATEXIT(sobj, sym, func) \
    MD_CALL((sobj), (void (*)(void))((sobj)->obj_base + (sym)->st_value), &_hppa_dl_dtors)

a94 1
void hppa_call(void *, Elf_Addr *, void (*)(void));
@


1.6
log
@Correctly process RELOC_DIR32 while relocating ld.so itself; this allow
global data initializers to work as intended.
ok drahn kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.5 2010/01/02 12:16:35 kettenis Exp $	*/
d96 1
a96 1
    MD_CALL((sobj), (void (*)())((sobj)->obj_base + (sym)->st_value), &_hppa_dl_dtors)
@


1.5
log
@Fix handling of hppa RELOC_IPLT relocations during 'bootstrap relocation'.

ok miod@@, deraadt@@, jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.4 2008/04/09 21:45:26 kurt Exp $	*/
a69 6
/*
 * !!!!! WARNING: THIS CODE CANNOT HANDLE ld.so RELOCATIONS OF THE FORM
 * 0000bde8 R_PARISC_DIR32    .data+0x00000048
 * these can be caused by static intialization foo = &bar;
 * prepare to code around this problem, or fix it here.
 */
a73 1
	/* XXX fille out _sl ??? */
d75 4
a78 1
		*p = v + r->r_addend;
@


1.4
log
@Improve support for shared libs linked at non-zero addreses:
- rename private values in struct elf_object to better
  describe their meaning:
    s/load_offs/obj_base/ "object's address '0' base"
    s/load_addr/load_base/ "The base address of the loadable
    segments"
- gdb needs the obj_base value so swap positions with load_base in
  struct elf_object
- fix a few occurrences of where load_base was used instead of
  obj_base.

With help and okay drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.3 2005/09/16 23:19:42 drahn Exp $	*/
d77 2
a78 1
RELOC_RELA(Elf_RelA *r, const Elf_Sym *s, Elf_Addr *p, unsigned long v)
d84 2
a85 1
		*p = v + s->st_value + r->r_addend;
@


1.3
log
@Rework symbol lookup to more closely match sun's documentation, now
treats dlopens as load groups. ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.2 2004/06/07 15:18:19 mickey Exp $	*/
d98 1
a98 1
    MD_CALL((sobj), (void (*)())((sobj)->load_offs + (sym)->st_value), &_hppa_dl_dtors)
@


1.2
log
@fixup the dlsym() return to produce a callable address (plabel) and move one comment closer to the code it talks about earlier; drahn@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.1 2004/05/25 21:48:00 mickey Exp $	*/
d70 6
@


1.1
log
@md parts for hppa
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d98 1
@

