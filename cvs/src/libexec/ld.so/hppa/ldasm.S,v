head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.23
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.22;
commitid	veGB6uLWx3BTEAfk;

1.22
date	2016.08.28.06.15.32;	author guenther;	state Exp;
branches;
next	1.21;
commitid	Y7AbrDd15D7CrGY4;

1.21
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.20;
commitid	d9R7VGw9CHTkwXE1;

1.20
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.19;
commitid	hneUpr7ZOJCeNeHP;

1.19
date	2016.03.21.01.32.48;	author guenther;	state Exp;
branches;
next	1.18;
commitid	7Tp2uEssgeiK9f77;

1.18
date	2015.11.15.03.41.24;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	kmpP8aoRsEOyxUMj;

1.17
date	2015.09.19.20.56.47;	author guenther;	state Exp;
branches;
next	1.16;
commitid	FcRQ6g8MqXiORdFs;

1.16
date	2015.09.13.17.08.03;	author guenther;	state Exp;
branches;
next	1.15;
commitid	BssYI6s6zozAyfkk;

1.15
date	2014.07.14.03.54.51;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	fsr4AzfIP3TLhLM2;

1.14
date	2014.07.09.12.51.20;	author guenther;	state Exp;
branches;
next	1.13;
commitid	l16v8zUGQ3906m8T;

1.13
date	2014.07.06.07.28.36;	author otto;	state Exp;
branches;
next	1.12;
commitid	vlK4cqSehsiJVTpr;

1.12
date	2013.12.23.13.57.44;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2013.08.13.05.52.19;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.01.09.57.58;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.27.08.30.35;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.24.03.26.56;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.01.21.36.00;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.03.22.18.04;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.03.16.10.52;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.09.17.57.40;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.25.21.56.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.25.21.48.00;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.23
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@/*	$OpenBSD: ldasm.S,v 1.22 2016/08/28 06:15:32 guenther Exp $	*/

/*
 * Copyright (c) 2004 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/syscall.h>
#include <machine/asm.h>
#define	_LOCORE
#include <machine/frame.h>
#include <machine/vmparam.h>
#undef	_LOCORE

ENTRY(_dl_start,32)
	copy	r3, r1
	copy	sp, r3
	stwm	r1, HPPA_FRAME_SIZE+16*4(sp)

	stw	%arg0, HPPA_FRAME_ARG(0)(r3)	/* ps_strings */

#define	ADDR(s,r) \
	bl	4, t1							!\
	depi	0, 31, 2, t1	/* kill pl bits */			!\
	b	s		/* cold brunch -- never done */		!\
	ldw	0(t1), t2	/* cat(w,w1,w2{10},w2{0..9}) << 2 */	!\
	extru	t2, 28, 10, t3	/* w2{0..9} */				!\
	extru	t2, 26, 16, r	/* w1 */				!\
	dep	t3, 31, 11, r						!\
	extru,=	t2, 31, 1, r0	/* w */					!\
	depi	1, 15, 1, r						!\
	extru,=	t2, 29, 1, r0	/* w2{10} */				!\
	depi	1, 21, 1, r						!\
	sh2add	r, t1, r	/* plus the base */			!\
	addi	8, r, r		/* bl target is -8 */

	ADDR(_GLOBAL_OFFSET_TABLE_, r19)
	ADDR(_DYNAMIC, arg2)
	stw	arg2, HPPA_FRAME_ARG(1)(r3)

	/* make sure to get a fault until it's set proper */
	ldi	-1, %dp

	ldw	0(arg0), arg0
	ldo	4(r3), arg1			/* dl_data */
	bl	_dl_boot_bind, rp
	ldo	-4(arg0), arg0

	ldw	HPPA_FRAME_ARG(1)(r3), arg1	/* &_DYNAMIC */
	ldw	HPPA_FRAME_ARG(0)(r3), arg3	/* ps_strings */
	ldw	0(r19), arg2
	sub	arg1, arg2, arg2		/* loff */

	ldw	0(arg3), arg0			/* argv */
	ldw	8(arg3), arg1			/* envp */

	bl	_dl_boot, rp
	ldo	4(r3), arg3			/* dl_data */

	ldw	HPPA_FRAME_ARG(0)(r3), arg0	/* ps_strings */
	ADDR(_hppa_dl_dtors_plabel, arg1)
	ldw	0(arg1), arg1			/* cleanup */

	ldo	HPPA_FRAME_SIZE(r3), sp
	copy	r0, rp
	bv	r0(ret0)
	ldwm	-HPPA_FRAME_SIZE(sp), r3
EXIT(_dl_start)

/*
 * void _hppa_dl_dtors(void);
 */
ENTRY(_hppa_dl_dtors,0)
	ADDR(_GLOBAL_OFFSET_TABLE_, r19)
	b	_dl_dtors
	nop
EXIT(_hppa_dl_dtors)

	.section .data
	.align 4
_hppa_dl_dtors_plabel:
	.word P%_hppa_dl_dtors
	.previous

LEAF_ENTRY(_hppa_dl_set_dp)
	bv	r0(rp)
	copy	arg0, r27
EXIT(_hppa_dl_set_dp)

/*
 * This is a magic branch instruction that is used by GCC's
 * __canonicalize_funcptr_for_compare() function to fixup relocations
 * in order to do function pointer comparisons.
 */
	bl	_dl_bind, rp

ENTRY(_dl_bind_start,32)
	copy	r3, r1
	copy	sp, r3
	stwm	r1, HPPA_FRAME_SIZE(sp)

	stw	rp, HPPA_FRAME_CRP(r3)
	stw	arg0, HPPA_FRAME_ARG(0)(r3)
	stw	arg1, HPPA_FRAME_ARG(1)(r3)
	stw	arg2, HPPA_FRAME_ARG(2)(r3)
	stw	arg3, HPPA_FRAME_ARG(3)(r3)
	stw	t1, 4(r3)
	stw	ret0, 8(r3)
	stw	ret1, 12(r3)

	ldw	12(r20), arg0
	copy	r19, arg1

	bl	_dl_bind, rp
	copy	r21, r19

	copy	ret0, r21	/* &func */
	copy	ret1, r19	/* sl */

	ldw	HPPA_FRAME_ARG(0)(r3), arg0
	ldw	HPPA_FRAME_ARG(1)(r3), arg1
	ldw	HPPA_FRAME_ARG(2)(r3), arg2
	ldw	HPPA_FRAME_ARG(3)(r3), arg3
	ldw	4(r3), t1
	ldw	8(r3), ret0
	ldw	12(r3), ret1

	ldw	HPPA_FRAME_CRP(r3), rp
	ldo	HPPA_FRAME_SIZE(r3), sp
	bv	r0(r21)
	ldwm	-HPPA_FRAME_SIZE(sp), r3
EXIT(_dl_bind_start)

#define	SYSCALL(x)				!\
	stw	rp, HPPA_FRAME_ERP(sr0,sp)	!\
	ldil	L%SYSCALLGATE, r1		!\
	ble	4(sr7, r1)			!\
	ldi	__CONCAT(SYS_,x), t1		!\
	comb,<>	r0, t1, _dl_sysexit		!\
	ldw	HPPA_FRAME_ERP(sr0,sp), rp

_dl_sysexit
	bv	r0(rp)
	sub	r0, ret0, ret0

ENTRY(_dl_close,0)
	SYSCALL(close)
	bv	r0(rp)
	nop
EXIT(_dl_close)

ENTRY(_dl_exit,0)
	SYSCALL(exit)
	bv	r0(rp)
	nop
EXIT(_dl_exit)

ENTRY(_dl_issetugid,0)
	SYSCALL(issetugid)
	bv	r0(rp)
	nop
EXIT(_dl_issetugid)

ENTRY(_dl_getthrid,0)
	SYSCALL(getthrid)
	bv	r0(rp)
	nop
EXIT(_dl_getthrid)

ENTRY(_dl__syscall,0)
	SYSCALL(__syscall)
	bv	r0(rp)
	nop
EXIT(_dl__syscall)

ENTRY(_dl_munmap,0)
	SYSCALL(munmap)
	bv	r0(rp)
	nop
EXIT(_dl_munmap)

ENTRY(_dl_mprotect,0)
	SYSCALL(mprotect)
	bv	r0(rp)
	nop
EXIT(_dl_mprotect)

ENTRY(_dl_open,0)
	SYSCALL(open)
	bv	r0(rp)
	nop
EXIT(_dl_open)

ENTRY(_dl_read,0)
	SYSCALL(read)
	bv	r0(rp)
	nop
EXIT(_dl_read)

ENTRY(_dl_write,0)
	SYSCALL(write)
	bv	r0(rp)
	nop
EXIT(_dl_write)

ENTRY(_dl_fstat,0)
	SYSCALL(fstat)
	bv	r0(rp)
	nop
EXIT(_dl_fstat)

ENTRY(_dl_sysctl,0)
	SYSCALL(sysctl)
	bv	r0(rp)
	nop
EXIT(_dl_issetugid)

ENTRY(_dl_getdents,0)
	SYSCALL(getdents)
	bv	r0(rp)
	nop
EXIT(_dl_getdents)

ENTRY(_dl_readlink,0)
	SYSCALL(readlink)
	bv	r0(rp)
	nop
EXIT(_dl_readlink)

ENTRY(_dl_getcwd,0)
	SYSCALL(__getcwd)
	bv	r0(rp)
	nop
EXIT(_dl_getcwd)

ENTRY(_dl_utrace,0)
	SYSCALL(utrace)
	bv	r0(rp)
	nop
EXIT(_dl_utrace)

ENTRY(_dl_getentropy,0)
	SYSCALL(getentropy)
	bv	r0(rp)
	nop
EXIT(_dl_getentropy)

ENTRY(_dl_sendsyslog,0)
	SYSCALL(sendsyslog)
	bv	r0(rp)
	nop
EXIT(_dl_sendsyslog)

ENTRY(_dl_set_tcb,0)
	SYSCALL(__set_tcb)
	bv	r0(rp)
	nop
EXIT(_dl_set_tcb)

ENTRY(_dl_pledge,0)
	SYSCALL(pledge)
	bv	r0(rp)
	nop
EXIT(_dl_pledge)

ENTRY(_dl_thrkill,0)
	SYSCALL(thrkill)
	bv	r0(rp)
	nop
EXIT(_dl_thrkill)

	.end
@


1.22
log
@ld.so doesn't need gettimeofday or lstat stubs any more

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.21 2016/05/07 19:05:23 guenther Exp $	*/
d286 6
@


1.21
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.20 2016/03/21 22:41:29 bluhm Exp $	*/
a244 6
ENTRY(_dl_gettimeofday,0)
	SYSCALL(gettimeofday)
	bv	r0(rp)
	nop
EXIT(_dl_gettimeofday)

a249 6

ENTRY(_dl_lstat,0)
	SYSCALL(lstat)
	bv	r0(rp)
	nop
EXIT(_dl_lstat)
@


1.20
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.19 2016/03/21 01:32:48 guenther Exp $	*/
d185 6
d286 6
@


1.19
log
@Switch ld.so's stack smash handler from sendsyslog to sendsyslog2
and pass the LOG_CONS flag like libc's handler.

ok deraadt@@ bluhm@@ (who had a similar diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.18 2015/11/15 03:41:24 deraadt Exp $	*/
d275 2
a276 2
ENTRY(_dl_sendsyslog2,0)
	SYSCALL(sendsyslog2)
d279 1
a279 1
EXIT(_dl_sendsyslog2)
@


1.18
log
@ldd(1) sets environment variable LD_TRACE_LOADED_OBJECTS to tell ld.so
that it should show information about the program it loads, rather than
run it.  In that specific case, ld.so can pledge to "stdio rpath" to
ensure that code path in ld.so has no bugs.
Yes, a pledge in ld.so.... who'd have thought!
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.17 2015/09/19 20:56:47 guenther Exp $	*/
d275 2
a276 2
ENTRY(_dl_sendsyslog,0)
	SYSCALL(sendsyslog)
d279 1
a279 1
EXIT(_dl_sendsyslog)
@


1.17
log
@kbind has eliminated the need for and use of the bind lock.  Delete it, the
the callback, and the sigprocmask stub.
Keep around the DL_SETBINDLCK case until libpthread stops using it.

discussed with miod@@ at l2k15
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.16 2015/09/13 17:08:03 guenther Exp $	*/
d280 6
@


1.16
log
@Rename __sysctl syscall to just sysctl, as the userland wrapper is no longer
necessary

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.15 2014/07/14 03:54:51 deraadt Exp $	*/
a279 22

ENTRY(_dl_sigprocmask,0)
	stw	arg2, HPPA_FRAME_ARG(2)(sp)

	comb,<>,n r0, arg1, _dl_sigprocmask$nblock

	b	_dl_sigprocmask$call
	ldi	1, arg0

_dl_sigprocmask$nblock
	ldw	0(arg1), arg1
	stw	arg1, HPPA_FRAME_ARG(1)(sp)

_dl_sigprocmask$call
	SYSCALL(sigprocmask)

	ldw	HPPA_FRAME_ARG(2)(sp), arg2
	add,=	r0, arg2, r0
	stw	ret0, 0(arg2)
	bv	r0(rp)
	copy	r0, ret0
EXIT(_dl_sigprocmask)
@


1.15
log
@Now that we have sendsyslog(2), we can directly use it in the
(previously completely retarded) stack_smash_handler of ld.so
ok beck miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.14 2014/07/09 12:51:20 guenther Exp $	*/
d228 1
a228 1
	SYSCALL(__sysctl)
@


1.14
log
@_dl_fcntl() is no longer used; kill the stubs

ok otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.13 2014/07/06 07:28:36 otto Exp $	*/
d274 6
@


1.13
log
@move from sysclt(KERN_ARND) to getentropy(2); ok miod@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.12 2013/12/23 13:57:44 kettenis Exp $	*/
a225 6

ENTRY(_dl_fcntl,0)
	SYSCALL(fcntl)
	bv	r0(rp)
	nop
EXIT(_dl_fcntl)
@


1.12
log
@Make ld.so pass its cleanup handler in %arg1 and stop calling atiexit(4)
directly from ld.so on hppa.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.11 2013/08/13 05:52:19 guenther Exp $	*/
d274 6
@


1.11
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.10 2013/06/01 09:57:58 miod Exp $	*/
d82 2
a83 1
	copy	r0, arg1			/* cleanup */
d100 6
a109 21

/*
 * void hppa_call(void (*arg)(void), void *r19, Elf_Addr func);
 */
ENTRY(hppa_call,0)
	copy	r3, r1
	copy	sp, r3
	stwm	r1, HPPA_FRAME_SIZE(sp)
	stw	r19, HPPA_FRAME_SL(r3)
	stw	rp, HPPA_FRAME_CRP(r3)
	copy	arg1, r19
	.call
	blr	r0, rp
	bv,n	(arg2)
	nop
	ldw	HPPA_FRAME_CRP(r3), rp
	ldw	HPPA_FRAME_SL(r3), r19
	ldo	HPPA_FRAME_SIZE(r3), sp
	bv	r0(rp)
	ldwm	-HPPA_FRAME_SIZE(sp), r3
EXIT(hppa_call)
@


1.10
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.9 2013/04/05 12:58:03 kurt Exp $	*/
d253 2
a254 2
ENTRY(_dl_getdirentries,0)
	SYSCALL(getdirentries)
d257 1
a257 1
EXIT(_dl_getdirentries)
@


1.9
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.8 2012/10/27 08:30:35 kettenis Exp $	*/
d152 2
a153 3
	/* load &func and sl from plt entry returned */
	ldw	0(ret0), r21
	ldw	4(ret0), r19
d282 6
@


1.8
log
@Clear arg1 before passing control to the main object.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.7 2012/10/24 03:26:56 guenther Exp $	*/
d265 18
@


1.7
log
@Garbage-collect the _dl_stat() routine, now unused

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.6 2010/02/01 21:36:00 kettenis Exp $	*/
d82 1
a82 2
	/* ??? cleanup, arg1 */
	/* ??? obj, arg2 */
@


1.6
log
@Properly restore ret1 instead of overwriting ret0 with the saved value.
Fixes lazy binding for functions that return results larger than 64 bits
(such as structs).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.5 2010/01/03 22:18:04 kettenis Exp $	*/
a235 6

ENTRY(_dl_stat,0)
	SYSCALL(stat)
	bv	r0(rp)
	nop
EXIT(_dl_stat)
@


1.5
log
@Make lazy binding work on hppa.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.4 2006/05/03 16:10:52 drahn Exp $	*/
d163 1
a163 1
	ldw	12(r3), ret0
@


1.4
log
@prebind - how to prelink a binary without throwing security out the window

Prelink fixes the address of libraries making 'return to libc' attacks trival,
prebind uses a different method to achieve most of the same gains, however
without adding any security conerns.

Still under development, now in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.3 2005/01/09 17:57:40 mickey Exp $	*/
d126 7
d143 1
d161 1
@


1.3
log
@set %dp before any constructors get to run; found and debugged w/ niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.2 2004/05/25 21:56:49 deraadt Exp $	*/
d257 6
@


1.2
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.1 2004/05/25 21:48:00 mickey Exp $	*/
d62 3
d99 5
@


1.1
log
@md parts for hppa
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d266 4
a269 4
	add,=   r0, arg2, r0
	stw     ret0, 0(arg2)
	bv      r0(rp)
	copy    r0, ret0
@

