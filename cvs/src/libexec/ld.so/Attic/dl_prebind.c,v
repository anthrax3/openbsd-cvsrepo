head	1.19;
access;
symbols
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8;
locks; strict;
comment	@ * @;


1.19
date	2016.07.04.21.15.06;	author guenther;	state dead;
branches;
next	1.18;
commitid	qHDzpShMNCJZKLBF;

1.18
date	2015.10.14.17.29.44;	author tobias;	state Exp;
branches;
next	1.17;
commitid	wv178wLClm9TloLm;

1.17
date	2015.01.16.16.18.07;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	31KwZ9PARAKUg1ob;

1.16
date	2014.07.10.09.03.01;	author otto;	state Exp;
branches;
next	1.15;
commitid	ImRWDrCXNlhODvC7;

1.15
date	2014.07.06.17.33.10;	author otto;	state Exp;
branches;
next	1.14;
commitid	Todo1ZT3AnVz3T5r;

1.14
date	2014.06.21.08.00.22;	author otto;	state Exp;
branches;
next	1.13;
commitid	wh9FTpEgwThWVeqE;

1.13
date	2013.11.13.05.41.41;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2013.06.04.00.59.00;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2013.04.16.23.16.19;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.27.19.04.26;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2008.04.09.21.45.26;	author kurt;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.12.22.14.04;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.10.03.26.50;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.08.20.37.01;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.08.20.34.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.05.14.34.27;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.05.04.45.02;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.04.15.03.31;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.03.16.10.51;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove prebind support: binding to symbol table indices is too fragile
for our development process.

ok kettenis@@ deraadt@@
@
text
@/* $OpenBSD: dl_prebind.c,v 1.18 2015/10/14 17:29:44 tobias Exp $ */
/*
 * Copyright (c) 2006 Dale Rahn <drahn@@dalerahn.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/exec.h>
#include <sys/sysctl.h>
#include <nlist.h>
#include <link.h>
#include <dlfcn.h>
#include <unistd.h>

#include "syscall.h"
#include "archdep.h"
#include "resolve.h"
#include "sod.h"
#include "stdlib.h"
#include "dl_prebind.h"

void elf_dump_footer(struct prebind_footer *footer);
void dump_prelink(Elf_Addr base, u_long size);
void prebind_dump_footer(struct prebind_footer *footer, char *file);
void prebind_dump_symcache(struct symcachetab *symcachetab, u_int32_t cnt);
void prebind_dump_nameidx(struct nameidx *nameidx, u_int32_t numblibs,
    char *nametab);
void prebind_dump_fixup(struct fixup *fixup, u_int32_t numfixups);
void prebind_dump_libmap(u_int32_t *libmap, u_int32_t numlibs);
struct prebind_footer *_dl_prebind_data_to_footer(void *data);

char *_dl_prog_prebind_map;
struct prebind_footer *prog_footer;
extern char *_dl_noprebind;
extern char *_dl_prebind_validate;

int _dl_prebind_match_failed; /* = 0 */

char *prebind_bind_now = "prebind";

struct prebind_footer *
_dl_prebind_data_to_footer(void *prebind_data)
{
	u_int32_t *poffset, offset;
	struct prebind_footer *footer;
	char *c;

	poffset = prebind_data;
	c = prebind_data;
	offset = *poffset;
	c += offset;
	footer = (void *)c;
	return footer;
}

void
prebind_load_exe(Elf_Phdr *phdp, elf_object_t *exe_obj)
{
	struct prebind_footer *footer;

	exe_obj->prebind_data = (void *)phdp->p_vaddr;
	_dl_prog_prebind_map = exe_obj->prebind_data;

	footer = _dl_prebind_data_to_footer(_dl_objects->prebind_data);

	if (footer->bind_id[0] == BIND_ID0 &&
	    footer->bind_id[1] == BIND_ID1 &&
	    footer->bind_id[2] == BIND_ID2 &&
	    footer->bind_id[3] == BIND_ID3 &&
	    footer->prebind_version == PREBIND_VERSION) {
		prog_footer = footer;
		if (_dl_bindnow == NULL)
			_dl_bindnow = prebind_bind_now;
	} else {
		DL_DEB(("prebind data missing\n"));
		_dl_prog_prebind_map = NULL;
	}
	if (_dl_noprebind != NULL) {
		/*prog_footer is valid, we should free it */
		_dl_prog_prebind_map = NULL;
		prog_footer = NULL;
		exe_obj->prebind_data = NULL;
		if (_dl_bindnow == prebind_bind_now)
			_dl_bindnow = NULL;
	}
#if 0
	else if (_dl_debug)
		dump_prelink((long)_dl_prog_prebind_map,
		    prog_footer->prebind_size);
#endif
}

void *
prebind_load_fd(int fd, const char *name)
{
	struct prebind_footer footer;
	struct nameidx *nameidx;
	void *prebind_data;
	char *nametab;
	ssize_t len;
	int idx;

	if (_dl_prog_prebind_map == NULL || _dl_prebind_match_failed)
		return 0;

	_dl_lseek(fd, -(off_t)sizeof(struct prebind_footer), SEEK_END);
	len = _dl_read(fd, (void *)&footer, sizeof(struct prebind_footer));

	if (len != sizeof(struct prebind_footer) ||
	    footer.bind_id[0] != BIND_ID0 ||
	    footer.bind_id[1] != BIND_ID1 ||
	    footer.bind_id[2] != BIND_ID2 ||
	    footer.bind_id[3] != BIND_ID3 ||
	    footer.prebind_version != PREBIND_VERSION) {
		_dl_prebind_match_failed = 1;
		DL_DEB(("prebind match failed %s\n", name));
		return (NULL);
	}

	prebind_data = _dl_mmap(0, footer.prebind_size, PROT_READ,
	    MAP_FILE, fd, footer.prebind_base);
	if (_dl_mmap_error(prebind_data)) {
		_dl_prebind_match_failed = 1;
		DL_DEB(("prebind match failed %s\n", name));
		return (NULL);
	}

	DL_DEB(("prebind_load_fd for lib %s\n", name));

	nameidx = (void *)(_dl_prog_prebind_map + prog_footer->nameidx_idx);
	nametab = (void *)(_dl_prog_prebind_map + prog_footer->nametab_idx);

	/* libraries are loaded in random order, so we just have
	 * to look thru the list to find ourselves
	 */
	for (idx = 0; idx < prog_footer->numlibs; idx++) {
		if (_dl_strcmp(nametab + nameidx[idx].name, name) == 0)
			break;
	}

	if (idx == prog_footer->numlibs) {
		_dl_prebind_match_failed = 1; /* not found */
	} else if (footer.id0 != nameidx[idx].id0 ||
	    footer.id1 != nameidx[idx].id1) {
		_dl_prebind_match_failed = 1;
		DL_DEB(("prebind match id0 %d pid0 %d id1 %d pid1 %d\n",
		    footer.id0, nameidx[idx].id0,
		    footer.id1, nameidx[idx].id1));
	}

	if (_dl_prebind_match_failed == 1) {
		DL_DEB(("prebind match failed for %s\n", name));
	}

	return prebind_data;
}
#define NUM_STATIC_OBJS 10
elf_object_t *objarray_static[NUM_STATIC_OBJS];
elf_object_t **objarray;

void
prebind_symcache(elf_object_t *object, int plt)
{
	u_int32_t *fixupidx, *fixupcnt, *libmap, *idxtolib;
	u_int32_t *poffset, offset, symcache_cnt;
	struct symcachetab *symcachetab;
	struct prebind_footer *footer;
	int i = 0, cur_obj = -1, idx;
	char *prebind_map;
	char *c;
	struct fixup *fixup;
	elf_object_t *obj;

	struct symcachetab *s;

	if (object->prebind_data == NULL)
		return;
//	DL_DEB(("prebind symcache %s\n", object->load_name));

	obj = _dl_objects;
	while (obj != NULL) {
		if (obj == object)
			cur_obj = i;
		i++;
		obj = obj->next;
	}

	if (cur_obj == -1)
		return;	/* unable to find object ? */

	if (objarray == NULL) {
		if (i <= NUM_STATIC_OBJS) {
			objarray = &objarray_static[0];
		} else {
			objarray = _dl_reallocarray(NULL, i,
			    sizeof(elf_object_t *));
			if (objarray == NULL)
				_dl_exit(20);
		}

		obj = _dl_objects;
		i = 0;
		while (obj != NULL) {
			objarray[i] = obj;
			i++;
			obj = obj->next;
		}
	}

	poffset = (u_int32_t *)object->prebind_data;
	c = object->prebind_data;
	offset = *poffset;
	c += offset;

	footer = (void *)c;
	prebind_map = (void *)object->prebind_data;

	if (plt) {
		symcachetab = (void *)(prebind_map + footer->pltsymcache_idx);
		symcache_cnt = footer->pltsymcache_cnt;
//		DL_DEB(("loading plt %d\n", symcache_cnt));
	} else {
		symcachetab = (void *)(prebind_map + footer->symcache_idx);
		symcache_cnt = footer->symcache_cnt;
//		DL_DEB(("loading got %d\n", symcache_cnt));
	}

	libmap = (void *)(_dl_prog_prebind_map + prog_footer->libmap_idx);
	idxtolib = (void *)(_dl_prog_prebind_map + libmap[cur_obj]);

	for (i = 0; i < symcache_cnt; i++) {
		struct elf_object *tobj;
		const Elf_Sym *sym;
#ifdef DEBUG2
		const char *str;
#endif

		s = &(symcachetab[i]);
		if (cur_obj == 0)
			idx = s->obj_idx;
		else
			idx = idxtolib[s->obj_idx];

		if (idx == -1) /* somehow an invalid object ref happend */
			continue;
#if 0
		DL_DEB(("%s:", object->load_name));
		DL_DEB(("symidx %d: obj %d %d sym %d flags %x\n",
		    s->idx, s->obj_idx, idx, s->sym_idx,
		    SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt));
#endif
		tobj = objarray[idx];
		sym = tobj->dyn.symtab + s->sym_idx;
#ifdef DEBUG2
		str = tobj->dyn.strtab + sym->st_name;
		DL_DEB(("symidx %d: obj %d %s sym %d %s flags %d %x\n",
		    s->idx, s->obj_idx, tobj->load_name,
		    s->sym_idx, str, SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt,
		    object->obj_base + sym->st_value));
#endif
		_dl_symcache[s->idx].obj = tobj;
		_dl_symcache[s->idx].sym = sym;
		_dl_symcache[s->idx].flags =
		    SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt;
	}

	if (!plt) {
		fixupidx = (void *)(_dl_prog_prebind_map +
		    prog_footer->fixup_idx);
		fixup = (void *)(_dl_prog_prebind_map +
		    fixupidx[2*cur_obj]);
		fixupcnt = (void *)(_dl_prog_prebind_map +
		    prog_footer->fixupcnt_idx);

		for (i = 0; i < fixupcnt[2*cur_obj]; i++) {
			struct fixup *f;
			struct elf_object *tobj;
			const Elf_Sym *sym;
#ifdef DEBUG2
			const char *str;
#endif

			f = &(fixup[i]);
#if 0
			DL_DEB(("symidx %d: obj %d sym %d flags %x\n",
			    f->sym, f->obj_idx, f->sym_idx, f->flags));
#endif
			tobj = objarray[f->obj_idx];
			sym = tobj->dyn.symtab + f->sym_idx;
#ifdef DEBUG2
			str = tobj->dyn.strtab + sym->st_name;
			DL_DEB(("symidx %d: obj %d %s sym %d %s flags %d %x\n",
			    f->sym, f->obj_idx, tobj->load_name,
			    f->sym_idx, str, SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt,
			    object->obj_base + sym->st_value));
#endif
			_dl_symcache[f->sym].obj = tobj;
			_dl_symcache[f->sym].sym = sym;
			_dl_symcache[f->sym].flags =
			    SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt;
		}
	} else {

		fixupidx = (void *)(_dl_prog_prebind_map +
		    prog_footer->fixup_idx);
		fixup = (void *)(_dl_prog_prebind_map +
		    fixupidx[2*cur_obj+1]);
		fixupcnt = (void *)(_dl_prog_prebind_map +
		    prog_footer->fixupcnt_idx);

#if 0
		DL_DEB(("prebind loading symbols fixup plt %s\n",
		    object->load_name));
#endif
		for (i = 0; i < fixupcnt[2*cur_obj+1]; i++) {
			struct fixup *f;
			struct elf_object *tobj;
			const Elf_Sym *sym;
#ifdef DEBUG2
			const char *str;
#endif

			f = &(fixup[i]);
#if 0
			DL_DEB(("symidx %d: obj %d sym %d flags %x\n",
			    f->sym, f->obj_idx, f->sym_idx,
			    SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt));
#endif
			tobj = objarray[f->obj_idx];
			sym = tobj->dyn.symtab + f->sym_idx;
#ifdef DEBUG2
			str = tobj->dyn.strtab + sym->st_name;
			DL_DEB(("symidx %d: obj %d %s sym %d %s flags %d %x\n",
			    f->sym, f->obj_idx, tobj->load_name,
			    f->sym_idx, str, SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt,
			    object->obj_base + sym->st_value));
#endif
			_dl_symcache[f->sym].obj = tobj;
			_dl_symcache[f->sym].sym = sym;
			_dl_symcache[f->sym].flags =
			    SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt;
		}
	}
//	DL_DEB(("prebind_data loaded\n"));
}

void
prebind_free(elf_object_t *object)
{
	struct prebind_footer *footer;

	if (object->prebind_data == NULL)
		return;
#ifdef DEBUG1
	DL_DEB(("prebind_free for %s %p\n", object->load_name,
	    object->prebind_data));
#endif
	if (object->prebind_data != 0) {
		footer = _dl_prebind_data_to_footer(object->prebind_data);

#ifdef DEBUG1
		DL_DEB(("freeing prebind data sz %x\n", footer->prebind_size));
#endif

		_dl_munmap((void *)ELF_TRUNC((long)object->prebind_data, _dl_pagesz),
		    ELF_ROUND((long)object->prebind_data+footer->prebind_size,
		    _dl_pagesz) - ELF_TRUNC((long)object->prebind_data, _dl_pagesz));

		object->prebind_data = NULL;
		_dl_prog_prebind_map = NULL;

		if (_dl_bindnow == prebind_bind_now)
			_dl_bindnow = NULL;
	}
}

int validate_errs;

struct timeval beforetp;

void
_dl_prebind_pre_resolve()
{
	struct prebind_footer *footer;
	elf_object_t *object;
	struct nameidx *nameidx;
	char *nametab, *name;
	int idx;

	if (_dl_prog_prebind_map != NULL) {
		nameidx = (void *)(_dl_prog_prebind_map +
		    prog_footer->nameidx_idx);
		nametab = (void *)(_dl_prog_prebind_map +
		    prog_footer->nametab_idx);
		for (idx = 1, object = _dl_objects->next; object != NULL;
		    object = object->next, idx++) {
			if (object->prebind_data == NULL) {
				/* ld.so doesn't have prebind data */
				if (object->next == NULL)
					continue;
				DL_DEB(("missing prebind data %s\n",
				    object->load_name));
				_dl_prebind_match_failed = 1;
				break;
			}
			footer = _dl_prebind_data_to_footer(
			    object->prebind_data);
			if (footer == NULL ||
			    nameidx[idx].id0 != footer->id0 ||
			    nameidx[idx].id1 != footer->id1) {
				DL_DEB(("invalid prebind data %s\n",
				    object->load_name));
				_dl_prebind_match_failed = 1;
				break;
			}
			name = object->load_name;
			if (_dl_strcmp(nametab + nameidx[idx].name, name)
			    != 0) {
				DL_DEB(("invalid prebind name %s\n",
				    object->load_name));
				_dl_prebind_match_failed = 1;
				break;
			}
		}
	}

	if (_dl_prebind_match_failed) {
		for (object = _dl_objects; object != NULL;
		    object = object->next)
			prebind_free(object);
		if (_dl_bindnow == prebind_bind_now)
			_dl_bindnow = NULL;
	}

	if (_dl_debug)
		_dl_gettimeofday(&beforetp, NULL);
}

void
_dl_prebind_post_resolve()
{
	char buf[7];
	int i;
	struct timeval after_tp;
	struct timeval diff_tp;
	elf_object_t *object;

	if (_dl_debug) {
		_dl_gettimeofday(&after_tp, NULL);

		timersub(&after_tp, &beforetp, &diff_tp);

		for (i = 0; i < 6; i++) {
			buf[5-i] = (diff_tp.tv_usec % 10) + '0';
			diff_tp.tv_usec /= 10;
		}
		buf[6] = '\0';

		/*
		 * _dl_printf lacks %lld support; therefore assume
		 * relocation takes less than 2^31 seconds
		 */
		_dl_printf("relocation took %d.%s\n", (int)diff_tp.tv_sec, buf);
	}

	for (object = _dl_objects; object != NULL; object = object->next)
		prebind_free(object);

	if (_dl_prebind_validate) {
		if (validate_errs) {
			_dl_printf("validate_errs %d\n", validate_errs);
			_dl_exit(20);
		} else {
			_dl_exit(0);
		}
	}
}

void
prebind_validate(elf_object_t *req_obj, unsigned int symidx, int flags,
    const Elf_Sym *ref_sym)
{
	const Elf_Sym *sym, **this;
	const elf_object_t *sobj;
	const char *symn;

	/* Don't verify non-matching flags*/

	sym = req_obj->dyn.symtab;
	sym += symidx;
	symn = req_obj->dyn.strtab + sym->st_name;
	this = &sym;

	//_dl_printf("checking %s\n", symn);
	_dl_find_symbol(symn, this, flags, ref_sym, req_obj, &sobj);

	if (_dl_symcache[symidx].sym != *this ||
	    _dl_symcache[symidx].obj != sobj) {
		_dl_printf("symbol %d mismatch on sym %s req_obj %s,\n"
		    "should be obj %s is obj %s\n",
		    symidx, symn, req_obj->load_name, sobj->load_name,
		    _dl_symcache[symidx].obj->load_name);
		if (req_obj == sobj)
			_dl_printf("obj %p %p\n", _dl_symcache[symidx].obj, sobj);
		sym = _dl_symcache[symidx].obj->dyn.symtab;
		sym += symidx;
		symn = _dl_symcache[symidx].obj->dyn.strtab + sym->st_name;
		_dl_printf("obj %s name %s\n",
		    _dl_symcache[symidx].obj->load_name,
		    symn);
	}
}

#ifdef DEBUG1
void
prebind_dump_symcache(struct symcachetab *symcachetab, u_int32_t cnt)
{
	struct symcachetab *s;
	int i;

	_dl_printf("cache: cnt %d\n", cnt);
	for (i = 0; i < cnt; i++) {
		s = &(symcachetab[i]);
		_dl_printf("symidx %d: obj %d sym %d\n",
		    s->idx, s->obj_idx, s->sym_idx);
	}
}

void
prebind_dump_nameidx(struct nameidx *nameidx, u_int32_t numlibs, char *nametab)
{
	struct nameidx *n;
	int i;

	_dl_printf("libs:\n");
	for (i = 0; i < numlibs; i++) {
		_dl_printf("lib %d offset %d id0 %d, id1 %d\n", i,
		    nameidx[i].name, nameidx[i].id0, nameidx[i].id1);
	}
	for (i = 0; i < numlibs; i++) {
		n = &(nameidx[i]);
		_dl_printf("nametab %p n %d\n", nametab, n->name);
		_dl_printf("lib %s %x %x\n", nametab + n->name, n->id0, n->id1);
	}
}

void
prebind_dump_fixup(struct fixup *fixup, u_int32_t numfixups)
{
	struct fixup *f;
	int i;

	_dl_printf("fixup: %d\n", numfixups);
	for (i = 0; i < numfixups; i++) {
		f = &(fixup[i]);

		_dl_printf("idx %d obj %d sym idx %d\n",
		    f->sym, f->obj_idx, f->sym_idx);

	}
}

void
prebind_dump_libmap(u_int32_t *libmap, u_int32_t numlibs)
{
	int i;

	for (i = 0; i < numlibs; i++) {
		//_dl_printf("lib%d off %d %s\n", i, libmap[i], strtab+libmap[i]);
		_dl_printf("lib%d off %d\n", i, libmap[i]);
	}
}

void
dl_dump_footer(struct prebind_footer *footer)
{
//	_dl_printf("base %qd\n", (long long)footer->prebind_base);
	_dl_printf("nameidx_idx %d\n", footer->nameidx_idx);
	_dl_printf("symcache_idx %d\n", footer->symcache_idx);
	_dl_printf("fixupcnt_idx %d\n", footer->fixupcnt_idx);
	_dl_printf("fixup_cnt %d\n", footer->fixup_cnt);
	_dl_printf("nametab_idx %d\n", footer->nametab_idx);
	_dl_printf("symcache_cnt %d\n", footer->symcache_cnt);
	_dl_printf("fixup_cnt %d\n", footer->fixup_cnt);
	_dl_printf("numlibs %d\n", footer->numlibs);
	_dl_printf("id0 %d\n", footer->id0);
	_dl_printf("id1 %d\n", footer->id1);
//	_dl_printf("orig_size %lld\n", (long long)footer->orig_size);
	_dl_printf("version %d\n", footer->prebind_version);
	_dl_printf("bind_id %c%c%c%c\n", footer->bind_id[0],
	    footer->bind_id[1], footer->bind_id[2], footer->bind_id[3]);
}
void
dump_prelink(Elf_Addr base, u_long size)
{
	u_int32_t *fixupidx, *fixupcnt, *libmap;
	struct symcachetab *symcachetab;
	struct prebind_footer *footer;
	struct nameidx *nameidx;
	struct fixup *fixup;
	char *nametab, *id;
	void *prebind_map;
	int i;

	id = (char *) (base+size);
	id -= 4;
	DL_DEB(("id %c %c %c %c\n", id[0], id[1], id[2], id[3]));
	footer = (void *) (base+size - sizeof (struct prebind_footer));
	dl_dump_footer(footer);

	prebind_map = (void *)base;
	nameidx = prebind_map + footer->nameidx_idx;
	symcachetab = prebind_map + footer->symcache_idx;
	fixupidx = prebind_map + footer->fixup_idx;
	nametab = prebind_map + footer->nametab_idx;
	fixupcnt = prebind_map + footer->fixupcnt_idx;
	libmap = prebind_map + footer->libmap_idx;

	prebind_dump_symcache(symcachetab, footer->symcache_cnt);
	prebind_dump_nameidx(nameidx, footer->numlibs, nametab);
	for (i = 0; i < footer->fixup_cnt; i++) {
		_dl_printf("fixup %d cnt %d idx %d\n", i, fixupcnt[i], fixupidx[i]);
		fixup = prebind_map + fixupidx[i];
		prebind_dump_fixup(fixup, fixupcnt[i]);
	}
	prebind_dump_libmap(libmap, footer->numlibs);
}
#endif /* DEBUG1 */
@


1.18
log
@Check mmap and read return values. While at it, remove unused duplicated file.

ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.17 2015/01/16 16:18:07 deraadt Exp $ */
@


1.17
log
@<sys/param.h> to <limits.h> conversion.  Verified binaries
ok millert, thanks to doug for process advice
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.16 2014/07/10 09:03:01 otto Exp $ */
d134 6
@


1.16
log
@check all memory allocations; ok miod@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.15 2014/07/06 17:33:10 otto Exp $ */
a20 1
#include <sys/param.h>
@


1.15
log
@enable -Wall, explicitly call _dl_strsep, and zap some redundant includes
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.14 2014/06/21 08:00:22 otto Exp $ */
d204 2
@


1.14
log
@Move to a non-zeroing _dl_malloc, a _dl_calloc and _dl_reallocarry and
fix _dl_strdup to return NULL instead of crash; ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.13 2013/11/13 05:41:41 deraadt Exp $ */
a23 1
#include <string.h>
@


1.13
log
@prototype & void * math cleanup
ok guenther
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.12 2013/06/04 00:59:00 brad Exp $ */
d203 2
a204 1
			objarray = _dl_malloc(sizeof(elf_object_t *) * i);
@


1.12
log
@Fix a bunch of "variable 'foo' set but not used." warnings emitted by newer GCC.

ok matthew@@ kurt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.11 2013/04/16 23:16:19 deraadt Exp $ */
d46 1
a46 1
void *_dl_prog_prebind_map;
d138 2
a139 2
	nameidx = _dl_prog_prebind_map + prog_footer->nameidx_idx;
	nametab = _dl_prog_prebind_map + prog_footer->nametab_idx;
d177 1
a177 1
	void *prebind_map;
d224 1
a224 1
		symcachetab = prebind_map + footer->pltsymcache_idx;
d228 1
a228 1
		symcachetab = prebind_map + footer->symcache_idx;
d233 2
a234 2
	libmap = _dl_prog_prebind_map + prog_footer->libmap_idx;
	idxtolib = _dl_prog_prebind_map + libmap[cur_obj];
d273 6
a278 3
		fixupidx = _dl_prog_prebind_map + prog_footer->fixup_idx;
		fixup = _dl_prog_prebind_map + fixupidx[2*cur_obj];
		fixupcnt = _dl_prog_prebind_map + prog_footer->fixupcnt_idx;
d309 6
a314 3
		fixupidx = _dl_prog_prebind_map + prog_footer->fixup_idx;
		fixup = _dl_prog_prebind_map + fixupidx[2*cur_obj+1];
		fixupcnt = _dl_prog_prebind_map + prog_footer->fixupcnt_idx;
d396 4
a399 2
		nameidx = _dl_prog_prebind_map + prog_footer->nameidx_idx;
		nametab = _dl_prog_prebind_map + prog_footer->nametab_idx;
@


1.11
log
@an acceptable time_t truncation (binding cannot take that long)
ok matthew
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.10 2010/10/27 19:04:26 deraadt Exp $ */
d178 1
a178 2
	struct nameidx *nameidx;
	char *nametab, *c;
d222 1
a222 1
	nameidx = prebind_map + footer->nameidx_idx;
a231 1
	nametab = prebind_map + footer->nametab_idx;
d239 1
d241 1
d259 1
a260 1
#ifdef DEBUG2
d281 1
d283 1
d292 1
a293 1
#ifdef DEBUG2
d318 1
d320 1
d330 1
a331 1
#ifdef DEBUG2
a482 1
	Elf_Addr ret;
d492 1
a492 1
	ret = _dl_find_symbol(symn, this, flags, ref_sym, req_obj, &sobj);
@


1.10
log
@repair ;;
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.9 2008/04/09 21:45:26 kurt Exp $ */
d452 5
a456 1
		_dl_printf("relocation took %d.%s\n", diff_tp.tv_sec, buf);
@


1.9
log
@Improve support for shared libs linked at non-zero addreses:
- rename private values in struct elf_object to better
  describe their meaning:
    s/load_offs/obj_base/ "object's address '0' base"
    s/load_addr/load_base/ "The base address of the loadable
    segments"
- gdb needs the obj_base value so swap positions with load_base in
  struct elf_object
- fix a few occurrences of where load_base was used instead of
  obj_base.

With help and okay drahn@@
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.8 2006/05/12 22:14:04 drahn Exp $ */
d223 1
a223 1
	nameidx = prebind_map + footer->nameidx_idx;;
d602 1
a602 1
	nameidx = prebind_map + footer->nameidx_idx;;
@


1.8
log
@Commit the rest of the api change that started in prebind.
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.7 2006/05/10 03:26:50 deraadt Exp $ */
d264 1
a264 1
		    object->load_addr + sym->st_value));
d295 1
a295 1
			    object->load_addr + sym->st_value));
d331 1
a331 1
			    object->load_addr + sym->st_value));
@


1.7
log
@pretty this up; ok drahn
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.6 2006/05/08 20:37:01 deraadt Exp $ */
d286 1
a286 1
			    f->sym, f->targobj_idx, f->sym_idx, f->flags));
d288 1
a288 1
			tobj = objarray[f->targobj_idx];
d293 1
a293 1
			    f->sym, f->targobj_idx, tobj->load_name,
d321 1
a321 1
			    f->sym, f->targobj_idx, f->sym_idx,
d324 1
a324 1
			tobj = objarray[f->targobj_idx];
d329 1
a329 1
			    f->sym, f->targobj_idx, tobj->load_name,
d547 2
a548 2
		_dl_printf("idx %d targobj %d sym idx %d\n",
		    f->sym, f->targobj_idx, f->sym_idx);
@


1.6
log
@more spacing
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.5 2006/05/08 20:34:36 deraadt Exp $ */
d58 2
a59 2
	u_int32_t *poffset;
	u_int32_t offset;
a60 1
	struct prebind_footer *footer;
a66 1

d111 1
a112 1
	struct nameidx *nameidx;
d114 1
a115 1
	ssize_t len;
d123 1
a123 1
	if (len !=  sizeof(struct prebind_footer) ||
d145 1
a145 1
		if (_dl_strcmp( nametab + nameidx[idx].name, name) == 0)
d152 1
a152 1
	    footer.id1 != nameidx[idx].id1)  {
d155 2
a156 2
		   footer.id0, nameidx[idx].id0,
		    footer.id1,  nameidx[idx].id1));
d172 5
a177 1
	struct symcachetab *symcachetab;
d179 1
a179 2
	u_int32_t *fixupidx;
	char *nametab;
a180 3
	u_int32_t *fixupcnt;
	u_int32_t *libmap;
	u_int32_t *idxtolib;
a181 8
	struct prebind_footer *footer;
	char *c;
	int i = 0;
	int cur_obj = -1;
	int idx;
	u_int32_t *poffset;
	u_int32_t offset;
	u_int32_t symcache_cnt;
a215 1

d236 1
a236 1
	idxtolib  = _dl_prog_prebind_map + libmap[cur_obj];
d249 1
a249 1
		if (idx == -1) /* somehow  an invalid object ref happend */
d254 2
a255 3
			s->idx, s->obj_idx, idx,
			s->sym_idx,
			SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt));
d257 1
a257 1
		tobj =  objarray[idx];
d262 3
a264 5
			s->idx, s->obj_idx, tobj->load_name,
			s->sym_idx, str,
			    SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt,
			object->load_addr + sym->st_value
			));
d286 1
a286 2
				f->sym, f->targobj_idx,
				f->sym_idx, f->flags));
d288 1
a288 1
			tobj =  objarray[f->targobj_idx];
d293 3
a295 5
				f->sym, f->targobj_idx, tobj->load_name,
				f->sym_idx, str,
				    SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt,
				object->load_addr + sym->st_value
				));
d321 2
a322 3
				f->sym, f->targobj_idx,
				f->sym_idx,
			        SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt));
d324 1
a324 1
			tobj =  objarray[f->targobj_idx];
d329 3
a331 5
				f->sym, f->targobj_idx, tobj->load_name,
				f->sym_idx, str,
				    SYM_SEARCH_ALL|SYM_WARNNOTFOUND|plt,
				object->load_addr + sym->st_value
				));
d350 1
a350 1
	DL_DEB(("prebind_free  for %s %p\n", object->load_name,
d361 2
a362 3
		    ELF_ROUND((long)object->prebind_data+footer->prebind_size
			,_dl_pagesz) -
		    ELF_TRUNC((long)object->prebind_data, _dl_pagesz));
d375 1
d379 1
d382 1
a382 1
	char *nametab;
a383 2
	char *name;
	struct prebind_footer *footer;
d410 1
a410 1
			if (_dl_strcmp( nametab + nameidx[idx].name, name)
d462 1
a462 1
		} else  {
d472 2
a473 1
	const Elf_Sym *sym;
a474 1
	const elf_object_t *sobj;
a475 1
	const Elf_Sym **this;
d477 1
a477 1
	/* Dont verify non-matching flags*/
d490 3
a492 3
			"should be obj %s is obj %s\n",
			symidx,
			symn, req_obj->load_name, sobj->load_name, _dl_symcache[symidx].obj->load_name);
d498 3
a500 3
			_dl_printf("obj %s name %s\n",
			    _dl_symcache[symidx].obj->load_name,
			    symn);
d508 1
d510 1
a510 1
	struct symcachetab *s;
d515 1
a515 1
			s->idx, s->obj_idx, s->sym_idx);
d522 1
d524 1
a524 1
	struct nameidx *n;
d540 1
d542 1
a542 1
	struct fixup *f;
d557 1
d581 1
a581 1
	   footer->bind_id[1], footer->bind_id[2], footer->bind_id[3]);
d586 1
a586 2
	int i;
	char *id;
d588 1
d590 2
d593 1
a593 6
	struct prebind_footer *footer;
	u_int32_t *fixupidx;
	char *nametab;
	struct fixup *fixup;
	u_int32_t *fixupcnt;
	u_int32_t *libmap;
d596 1
a596 1
	id -=4;
@


1.5
log
@de-space
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.4 2006/05/05 14:34:27 drahn Exp $ */
d632 1
a632 1
	for(i = 0; i < footer->fixup_cnt; i++) {
@


1.4
log
@Prebind should not force lazy binding to be turned off during dlopen()
the presense of LD_BIND_NOW should control that. Fixes the X server.
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.3 2006/05/05 04:45:02 drahn Exp $ */
d68 1
a68 1
	
d237 1
a237 1
		symcache_cnt = footer->pltsymcache_cnt; 
d241 1
a241 1
		symcache_cnt = footer->symcache_cnt; 
d248 1
a248 1
	
d339 1
a339 1
				f->sym_idx, 
d566 1
a566 1
		_dl_printf("idx %d targobj %d sym idx %d\n", 
@


1.3
log
@Make certain that it doesn't try to load prelink info once the primary link
is finished. prelink on dlopen cannot work, the symbol cache still works, just
cannot be preloaded. fixes xchm.
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.2 2006/05/04 15:03:31 drahn Exp $ */
d387 3
@


1.2
log
@Avoid a couple of potential crashes if the input data isn't right. ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: dl_prebind.c,v 1.1 2006/05/03 16:10:51 drahn Exp $ */
d386 1
@


1.1
log
@prebind - how to prelink a binary without throwing security out the window

Prelink fixes the address of libraries making 'return to libc' attacks trival,
prebind uses a different method to achieve most of the same gains, however
without adding any security conerns.

Still under development, now in-tree.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d207 3
d259 3
@

