head	1.28;
access;
symbols
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.6.0.8
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.28
date	2017.08.27.21.59.52;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	VUjW1bPAOMU4NF33;

1.27
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.26;
commitid	veGB6uLWx3BTEAfk;

1.26
date	2017.01.21.01.15.00;	author guenther;	state Exp;
branches;
next	1.25;
commitid	QprHiuRGEnP0ckD2;

1.25
date	2016.08.28.06.15.32;	author guenther;	state Exp;
branches;
next	1.24;
commitid	Y7AbrDd15D7CrGY4;

1.24
date	2016.07.04.21.15.07;	author guenther;	state Exp;
branches;
next	1.23;
commitid	qHDzpShMNCJZKLBF;

1.23
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.22;
commitid	d9R7VGw9CHTkwXE1;

1.22
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.21;
commitid	hneUpr7ZOJCeNeHP;

1.21
date	2016.03.21.01.32.49;	author guenther;	state Exp;
branches;
next	1.20;
commitid	7Tp2uEssgeiK9f77;

1.20
date	2015.11.15.03.41.24;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	kmpP8aoRsEOyxUMj;

1.19
date	2015.09.19.20.56.47;	author guenther;	state Exp;
branches;
next	1.18;
commitid	FcRQ6g8MqXiORdFs;

1.18
date	2014.09.01.05.09.53;	author doug;	state Exp;
branches;
next	1.17;
commitid	XQe4V1YtkyCx6uWd;

1.17
date	2014.07.14.03.54.51;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	fsr4AzfIP3TLhLM2;

1.16
date	2014.07.09.12.51.21;	author guenther;	state Exp;
branches;
next	1.15;
commitid	l16v8zUGQ3906m8T;

1.15
date	2014.07.06.07.28.36;	author otto;	state Exp;
branches;
next	1.14;
commitid	vlK4cqSehsiJVTpr;

1.14
date	2014.07.05.21.54.51;	author miod;	state Exp;
branches;
next	1.13;
commitid	L2YdBy6SCQ1MEPfW;

1.13
date	2014.07.05.17.05.08;	author miod;	state Exp;
branches;
next	1.12;
commitid	qI33qwjpMQlsifaE;

1.12
date	2013.08.13.05.52.20;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2013.06.09.13.10.19;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.01.09.57.58;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.24.03.26.56;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.14.32.46;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.28.15.02.41;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.02.20.12.08;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.03.16.10.52;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.22.04.07.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.09.17.47.44;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.17.11.45;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Replace heaps of hand-written syscall stubs with a simpler framework
which is largely MI.
ok visa kettenis
@
text
@/*	$OpenBSD: syscall.h,v 1.27 2017/01/24 07:48:37 guenther Exp $ */

/*
 * Copyright (c) 1998-2002 Opsycon AB, Sweden.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#ifndef __DL_SYSCALL_H__
#define __DL_SYSCALL_H__

#include <sys/stat.h>
#include <sys/syscall.h>

#ifndef _dl_MAX_ERRNO
#define _dl_MAX_ERRNO 512L
#endif
#define _dl_mmap_error(__res) \
    ((long)__res < 0 && (long)__res >= -_dl_MAX_ERRNO)

int	_dl_close(int);
__dead
void	_dl_exit(int);
int	_dl_fstat(int, struct stat *);
int	_dl___getcwd(char *, size_t);
ssize_t	_dl_getdents(int, char *, size_t);
int	_dl_issetugid(void);
int	_dl_getthrid(void);
int	_dl_mprotect(const void *, size_t, int);
int	_dl_munmap(const void *, size_t);
int	_dl_open(const char *, int);
ssize_t	_dl_read(int, const char *, size_t);
ssize_t	_dl_readlink(const char *, char *, size_t);
void	_dl___set_tcb(void *);
int	_dl_pledge(const char *, const char **);
long	_dl___syscall(quad_t, ...);
int	_dl_sysctl(const int *, u_int, void *, size_t *, void *, size_t);
int	_dl_utrace(const char *, const void *, size_t);
int	_dl_getentropy(char *, size_t);
int	_dl_sendsyslog(const char *, size_t, int);
__dead
void	_dl_thrkill(pid_t, int, void *);

static inline void *
_dl_mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset)
{
	return (void *)_dl___syscall(SYS_mmap, addr, len, prot,
	    flags, fd, 0, offset);
}

#endif /*__DL_SYSCALL_H__*/
@


1.27
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.26 2017/01/21 01:15:00 guenther Exp $ */
d44 1
a44 1
int	_dl_getcwd(char *, size_t);
d53 1
a53 1
void	_dl_set_tcb(void *);
d55 1
a55 1
long	_dl__syscall(quad_t, ...);
d66 1
a66 1
	return (void *)_dl__syscall(SYS_mmap, addr, len, prot,
@


1.26
log
@_dl_exit() is __dead, so it should return void.
Move _dl_mmap() and _dl_mquery() inlines from archdep.h to syscall.h and
remove pointless casts and unnecessary parens.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.25 2016/08/28 06:15:32 guenther Exp $ */
d60 2
@


1.25
log
@ld.so doesn't need gettimeofday or lstat stubs any more

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.24 2016/07/04 21:15:07 guenther Exp $ */
d42 1
a42 1
int	_dl_exit(int);
d64 2
a65 2
	return((void *)_dl__syscall((quad_t)SYS_mmap, addr, len, prot,
	    flags, fd, 0, offset));
@


1.24
log
@Remove prebind support: binding to symbol table indices is too fragile
for our development process.

ok kettenis@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.23 2016/05/07 19:05:23 guenther Exp $ */
a45 1
int	_dl_gettimeofday(struct timeval *, struct timezone *);
a47 1
int	_dl_lstat(const char *, struct stat *);
@


1.23
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.22 2016/03/21 22:41:29 bluhm Exp $ */
a61 6

static inline off_t
_dl_lseek(int fd, off_t offset, int whence)
{
	return _dl__syscall((quad_t)SYS_lseek, fd, 0, offset, whence);
}
@


1.22
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.21 2016/03/21 01:32:49 guenther Exp $ */
d48 1
d55 1
@


1.21
log
@Switch ld.so's stack smash handler from sendsyslog to sendsyslog2
and pass the LOG_CONS flag like libc's handler.

ok deraadt@@ bluhm@@ (who had a similar diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.20 2015/11/15 03:41:24 deraadt Exp $ */
d59 1
a59 1
int	_dl_sendsyslog2(const char *, size_t, int);
@


1.20
log
@ldd(1) sets environment variable LD_TRACE_LOADED_OBJECTS to tell ld.so
that it should show information about the program it loads, rather than
run it.  In that specific case, ld.so can pledge to "stdio rpath" to
ensure that code path in ld.so has no bugs.
Yes, a pledge in ld.so.... who'd have thought!
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.19 2015/09/19 20:56:47 guenther Exp $ */
d59 1
a59 1
int	_dl_sendsyslog(const char *, size_t);
@


1.19
log
@kbind has eliminated the need for and use of the bind lock.  Delete it, the
the callback, and the sigprocmask stub.
Keep around the DL_SETBINDLCK case until libpthread stops using it.

discussed with miod@@ at l2k15
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.18 2014/09/01 05:09:53 doug Exp $ */
d54 1
@


1.18
log
@Sync readlink(2) with IEEE Std 1003.1-2008.

discussion, help and ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.17 2014/07/14 03:54:51 deraadt Exp $ */
a32 1
#include <sys/signal.h>
a53 1
int	_dl_sigprocmask(int, const sigset_t *, sigset_t *);
@


1.17
log
@Now that we have sendsyslog(2), we can directly use it in the
(previously completely retarded) stack_smash_handler of ld.so
ok beck miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.16 2014/07/09 12:51:21 guenther Exp $ */
d54 1
a54 1
int	_dl_readlink(const char *, char *, size_t);
@


1.16
log
@_dl_fcntl() is no longer used; kill the stubs

ok otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.15 2014/07/06 07:28:36 otto Exp $ */
a46 1
int	_dl_getentropy(char *, size_t);
d59 2
@


1.15
log
@move from sysclt(KERN_ARND) to getentropy(2); ok miod@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.14 2014/07/05 21:54:51 miod Exp $ */
a43 1
int	_dl_fcntl(int, int, ...);
@


1.14
log
@Mark _dl_exit __dead.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.13 2014/07/05 17:05:08 miod Exp $ */
d48 1
@


1.13
log
@Add more sugar to build syscall stubs, and turn them from inlines to real
entry points, now that we no longer need _dl_mprotect to be inline; also,
make sure syscall failures return -errno rather than -1.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.12 2013/08/13 05:52:20 guenther Exp $ */
d42 1
@


1.12
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.11 2013/06/09 13:10:19 miod Exp $ */
a34 2
extern long _dl__syscall(quad_t val, ...);

d41 18
a58 4
/*
 *  Inlined system call functions that can be used before
 *  any dynamic address resolving has been done.
 */
d60 2
a61 2
extern inline void
_dl_exit(int status)
d63 1
a63 12
	register int __status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "li    $2,%1\n\t"
	    "syscall"
	    : "=r" (__status)
	    : "I" (SYS_exit), "r" (status)
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	while (1)
		;
d66 1
a66 82
extern inline int
_dl_open(const char* addr, int flags)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_open), "r" (addr), "r" (flags)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_close(int fd)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_close), "r" (fd)
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline ssize_t
_dl_write(int fd, const char* buf, size_t len)
{
	register ssize_t status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_write), "r" (fd), "r" (buf), "r" (len)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline ssize_t
_dl_read(int fd, const char* buf, size_t len)
{
	register ssize_t status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_read), "r" (fd), "r" (buf), "r" (len)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline void *
a70 273
}

extern inline int
_dl_munmap(const void* addr, size_t len)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_munmap), "r" (addr), "r" (len)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_mprotect(const void *addr, size_t size, int prot)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "li    $2,%1\n\t"
	    "syscall"
	    : "=r" (status)
	    : "I" (SYS_mprotect), "r" (addr), "r" (size), "r" (prot)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_fstat(const int fd, struct stat *sb)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "li    $2,%1\n\t"
	    "syscall"
	    : "=r" (status)
	    : "I" (SYS_fstat), "r" (fd), "r" (sb)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline ssize_t
_dl_fcntl(int fd, int cmd, int flag)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_fcntl), "r" (fd), "r" (cmd), "r" (flag)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline ssize_t
_dl_getdents(int fd, char *buf, size_t nbytes)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_getdents), "r" (fd), "r" (buf), "r" (nbytes)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_issetugid(void)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "li    $2,%1\n\t"
	    "syscall"
	    : "=r" (status)
	    : "I" (SYS_issetugid)
	    :  "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline off_t
_dl_lseek(int fd, off_t offset, int whence)
{
	return _dl__syscall((quad_t)SYS_lseek, fd, 0, offset, whence);
}

extern inline int
_dl_sigprocmask(int how, const sigset_t *set, sigset_t *oset)
{
	sigset_t sig_store;
	sigset_t sig_store1;

	if (set != NULL)
		sig_store1 = *set;
	else
		sig_store1 = 0;

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "move    %0, $2"
	    : "=r" (sig_store)
	    : "I" (SYS_sigprocmask), "r" (how), "r" (sig_store1)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	if (oset != NULL)
		*oset = sig_store;

	return 0;
}

static inline int
_dl_sysctl(const int *name, u_int namelen, void *oldp, size_t *oldplen,
    void *newp, size_t newlen)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "move  $7,%5\n\t"
	    "move  $8,%6\n\t"
	    "move  $9,%7\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beqz   $2,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS___sysctl), "r" (name), "r" (namelen), "r" (oldp),
	    "r" (oldplen), "r" (newp), "r" (newlen)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_gettimeofday(struct timeval* tp, struct timezone *tzp)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_gettimeofday), "r" (tp), "r" (tzp)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_readlink(const char *path, char *buf, size_t bufsiz)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_readlink), "r" (path), "r" (buf), "r" (bufsiz)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_lstat(const char *path, struct stat *sb)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_lstat), "r" (path), "r" (sb)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

static inline int
_dl_getcwd(char *buf, size_t size)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS___getcwd), "r" (buf), "r" (size)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_utrace(const char *label, const void *addr, size_t len)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "li    $2,%1\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_utrace), "r" (label), "r" (addr), "r" (len)
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
@


1.11
log
@Constify the mib argument of sysctl().
ok matthew@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.10 2013/06/01 09:57:58 miod Exp $ */
d230 1
a230 1
_dl_getdirentries(int fd, char *buf, int nbytes, off_t *basep)
a237 1
	    "move  $7,%5\n\t"
d244 1
a244 1
	    : "I" (SYS_getdirentries), "r" (fd), "r" (buf), "r" (nbytes), "r" (basep)
@


1.10
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.9 2013/04/05 12:58:03 kurt Exp $ */
d300 2
a301 2
_dl_sysctl(int *name, u_int namelen, void *oldp, size_t *oldplen, void *newp,
    size_t newlen)
@


1.9
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.8 2012/10/24 03:26:56 guenther Exp $ */
d401 21
@


1.8
log
@Garbage-collect the _dl_stat() routine, now unused

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.7 2012/08/17 14:32:46 matthew Exp $ */
d298 1
d324 1
d340 61
@


1.7
log
@Fix mips64 and powerpc's ld.so syscall implementations by adding
"memory" to the list of clobbered registers for all syscalls that
accept a pointer.  This prevents GCC from optimizing away memory loads
and stores that otherwise appear unused in a function.

Issue noted and identified by miod; fix by me.
ok miod, mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.6 2010/10/28 15:02:41 millert Exp $ */
a185 17
	    : "memory", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_stat(const char *addr, struct stat *sb)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "li    $2,%1\n\t"
	    "syscall"
	    : "=r" (status)
	    : "I" (SYS_stat), "r" (addr), "r" (sb)
@


1.6
log
@Change basep parameter of getdirentries() to be off_t *, not long *
so it works correctly with large offsets (and matches other systems).
This requires adding a new getdirentries syscall, with the old one
renamed to ogetdirentries.  All in-tree consumers of getdirentries()
have been updated.  Bump libc and libpthread major numbers.
OK and with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.5 2008/10/02 20:12:08 kurt Exp $ */
d80 1
a80 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d120 1
a120 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d141 1
a141 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d168 1
a168 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d186 1
a186 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d203 1
a203 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d220 1
a220 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d241 1
a241 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d263 1
a263 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d308 1
a308 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d336 1
a336 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d355 1
a355 1
	    : "$3", "$4", "$5", "$6", "$7", "$8", "$9",
@


1.5
log
@Fix mmap() error checking to be correct 64-bit addresses. Consistently
use _dl_mmap_error() to check for mmap() errors. Adjust datatypes of
some local vars for 64-bit safety.

okay millert@@ drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.4 2006/05/03 16:10:52 drahn Exp $ */
d247 1
a247 1
_dl_getdirentries(int fd, char *buf, int nbytes, long *basep)
@


1.4
log
@prebind - how to prelink a binary without throwing security out the window

Prelink fixes the address of libraries making 'return to libc' attacks trival,
prebind uses a different method to achieve most of the same gains, however
without adding any security conerns.

Still under development, now in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.3 2005/09/22 04:07:11 deraadt Exp $ */
d38 1
a38 1
#define _dl_MAX_ERRNO 4096
d40 2
a41 2
#define _dl_check_error(__res)	\
	((int) __res < 0 && (int) __res >= -_dl_MAX_ERRNO)
@


1.3
log
@knf; ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.2 2004/09/09 17:47:44 pefo Exp $ */
d336 19
@


1.2
log
@ABI64 shared libs now handled.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.1 2004/08/11 17:11:45 pefo Exp $ */
d292 2
a293 2
        sigset_t sig_store;
        sigset_t sig_store1;
d295 4
a298 5
        if (set != NULL) {
                sig_store1 = *set;
        } else {
                sig_store1 = 0;
        }
d300 1
a300 1
        __asm__ volatile (
d304 4
a307 4
            "syscall\n\t"
            "move    %0, $2"
            : "=r" (sig_store)
            : "I" (SYS_sigprocmask), "r" (how), "r" (sig_store1)
d310 2
a311 2
        if (oset != NULL)
                *oset = sig_store;
d313 1
a313 1
        return 0;
d319 1
a319 1
        register int status __asm__ ("$2");
d321 15
a335 15
        __asm__ volatile (
            "move  $4,%2\n\t"
            "move  $5,%3\n\t"
            "move  $6,%4\n\t"
            "move  $7,%5\n\t"
            "move  $8,%6\n\t"
            "move  $9,%7\n\t"
	    "li    $2,%1\n\t"
            "syscall\n\t"
            "beqz   $2,1f\n\t"
            "li    $2,-1\n\t"
            "1:"
            : "=r" (status)
            : "I" (SYS___sysctl), "r" (name), "r" (namelen), "r" (oldp),
            "r" (oldplen), "r" (newp), "r" (newlen)
d338 1
a338 1
        return status;
a339 1

@


1.1
log
@mips->mips64
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.13 2004/08/06 09:40:44 pefo Exp $ */
d48 1
a48 1
extern inline int
a53 1
	    "move  $2,%1\n\t"
d55 1
d58 2
a59 2
	    : "0" (SYS_exit), "r" (status)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a70 1
	    "move  $2,%1\n\t"
d73 1
d79 2
a80 2
	    : "0" (SYS_open), "r" (addr), "r" (flags)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a90 1
	    "move  $2,%1\n\t"
d92 1
d98 2
a99 2
	    : "0" (SYS_close), "r" (fd)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a109 1
	    "move  $2,%1\n\t"
d113 1
d119 2
a120 2
	    : "0" (SYS_write), "r" (fd), "r" (buf), "r" (len)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a130 1
	    "move  $2,%1\n\t"
d134 1
d140 2
a141 2
	    : "0" (SYS_read), "r" (fd), "r" (buf), "r" (len)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d147 1
a147 1
_dl_mmap(void *addr, size_t size, int prot, int flags, int fd, off_t f_offset)
d149 2
a150 33
	register void * malloc_buffer __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "addiu $29,-40\n\t"
	    "move  $6,%2\n\t"
	    "move  $7,%3\n\t"
	    "sw    %4,16($29)\n\t"
	    "sw    %5,20($29)\n\t"
#ifdef __MIPSEL__
	    "li    $4,197\n\t"
	    "li    $5,0\n\t"
	    "sw    %6,24($29)\n\t"
	    "sw    $0,28($29)\n\t"
	    "sw    %7,32($29)\n\t"
	    "sw    $0,36($29)\n\t"
#endif
#ifdef __MIPSEB__
	    "li    $4,0\n\t"
	    "li    $5,197\n\t"
	    "sw    %6,24($29)\n\t"
	    "sw    $0,28($29)\n\t"
	    "sw    $0,32($29)\n\t"
	    "sw    %7,36($29)\n\t"
#endif
	    "syscall\n\t"
	    "addiu $29,40"
	    : "=r" (malloc_buffer)
	    : "0" (SYS___syscall), "r" (addr), "r" (size), "r" (prot),
	    "r" (flags), "r" (fd), "r" ((int)f_offset)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return malloc_buffer;
a158 1
	    "move  $2,%1\n\t"
d161 1
d167 2
a168 2
	    : "0" (SYS_munmap), "r" (addr), "r" (len)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a178 1
	    "move  $2,%1\n\t"
d182 1
d185 2
a186 2
	    : "0" (SYS_mprotect), "r" (addr), "r" (size), "r" (prot)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a196 1
	    "move  $2,%1\n\t"
d199 1
d202 2
a203 2
	    : "0" (SYS_stat), "r" (addr), "r" (sb)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a213 1
	    "move  $2,%1\n\t"
d216 1
d219 2
a220 2
	    : "0" (SYS_fstat), "r" (fd), "r" (sb)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a230 1
	    "move  $2,%1\n\t"
d234 1
d240 2
a241 2
	    : "0" (SYS_fcntl), "r" (fd), "r" (cmd), "r" (flag)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d251 1
a251 1
	__asm__ volatile ("move  $2,%1\n\t"
d256 1
d262 2
a263 2
	    : "0" (SYS_getdirentries), "r" (fd), "r" (buf), "r" (nbytes), "r" (basep)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
d274 1
a274 1
	    "move  $2,%1\n\t"
d277 2
a278 2
	    : "0" (SYS_issetugid)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a301 1
	    "li    $2,%1\n\t"
d304 1
d309 1
a309 1
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
a322 2
	    "move  $2,%1\n\t"
	    "addiu $29,-40\n\t"
d327 3
a329 2
            "sw    %6,16($29)\n\t"
            "sw    %7,20($29)\n\t"
a330 1
	    "addiu $29,40\n\t"
d335 1
a335 1
            : "r" (SYS___sysctl), "r" (name), "r" (namelen), "r" (oldp),
d337 1
a337 1
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
@

