head	1.6;
access;
symbols
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	r20000612:1.1.1.2
	dsr:1.1.1
	r19990103:1.1.1.1
	per:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2002.05.23.23.16.28;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2001.10.24.13.06.35;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.25.21.51.16;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.14.22.18.23;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.28.19.34.29;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.13.03.34.17;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.13.03.34.17;	author rahnds;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.06.13.03.40.29;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.6
log
@This stuff has no license.  Delete it.  If someone wants it back, get the licenses cleaned up, and put it in regress
@
text
@/*	$OpenBSD: dltest.c,v 1.5 2001/10/24 13:06:35 mpech Exp $	*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <dlfcn.h>
#include <ctype.h>
#include <elf_abi.h>
#include <nlist.h>
#include "archdep.h"
#include "resolve.h"

typedef void (*func_t)(const char *);

#define DL_NOW 0
void
dltest(const char *s)
{
	printf("From dltest: ");
	for(;*s; s++) {
		putchar(toupper(*s));
	}
	putchar('\n');
}
struct elf_object *foo;

main(int argc, char **argv)
{
	void *handle;
	func_t fptr;
	char *libname = "libfoo.so";
	char **name = NULL;
	char *funcname = "foo";
	char *param = "Dynamic Loading Test";
	int ch;
	int mode;

	while((ch = getopt(argc, argv, "a:b:f:l:")) != -1) {
		switch(ch) {
		case 'a':
			param = optarg;
			break;

		case 'b':
			switch(*optarg) {
			case 'l':
				mode = DL_LAZY;
				break;

			case 'n':
				mode = DL_NOW;
				break;
			}
			break;

		case 'l':
			libname = optarg;
			break;

		case 'f':
			funcname = optarg;
			break;
		}
	}

	printf("opening library %s for function %s\n", libname, funcname);
	handle = dlopen(libname, mode);
	if(handle == NULL) {
		fprintf(stderr, "%s: dlopen: '%s'\n", libname, dlerror());
		exit(1);
	}

	fptr = (func_t)dlsym(handle, funcname);
	if(fptr == NULL) {
		fprintf(stderr, "%s: dlsym: '%s'\n", funcname, dlerror());
		exit(1);
	}

	name = (char **)dlsym(handle, "libname");
	if(name == NULL) {
		fprintf(stderr, "libname: dlsym: '%s'\n", dlerror());
		exit(1);
	}

	printf("Call '%s' in '%s':\n", funcname, *name);

	(*fptr)(param);

#ifdef __mips__
	dlctl(handle, DL_DUMP_MAP, NULL);
#endif /* __mips__ */

	dlclose(handle);

	printf("After 'dlclose()'\n");
#ifdef __mips__
	dlctl(handle, DL_DUMP_MAP, NULL);
#endif /* __mips__ */

	return(0);
}


@


1.5
log
@getopt(3) returns -1 when out of args, not EOF.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dltest.c,v 1.4 2001/09/25 21:51:16 drahn Exp $	*/
@


1.4
log
@Slight cleanup on ld.so tests, link with rpath built in, so that running
test does not require LD_LIBRARY_PATH.
remove an unnecessary header file from dltest.c
@
text
@d1 1
a1 1
/*	$OpenBSD: dltest.c,v 1.3 2001/05/14 22:18:23 niklas Exp $	*/
d38 1
a38 1
	while((ch = getopt(argc, argv, "a:b:f:l:")) != EOF) {
@


1.3
log
@Commit initial alpha bits, to facilitate in-tree dev.
This code is not yet working.
@
text
@d1 1
a1 1
/*	$OpenBSD: dltest.c,v 1.2 2001/01/28 19:34:29 niklas Exp $	*/
a8 1
#include <machine/reloc.h>
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d11 2
a12 2
#include "../powerpc/archdep.h"
#include "../resolve.h"
@


1.1
log
@Initial revision
@
text
@d1 2
d8 5
d16 1
d26 1
d67 1
d90 1
d92 1
d97 1
d99 1
a102 1

@


1.1.1.1
log
@Initial import of ELF ld.so. This was written indepently of the gnu rtld
code and is fully BSD copyrighted.
This initial import contains a mostly working mips and partially working
powerpc version. No support for ld.so.hints or system run path exists.

@
text
@@


1.1.1.2
log
@Updated version of ld.so, contains additional functionality and fixes/
design changes required by egcs.

added support for ldconfig/ld.so.hints

changes to low level relocation code, required by egcs pic
code generation that moved global variable loads to before the
self relocation was performed. Only powerpc supported, mips code not updated.

Code cleaned up somewhat reasonably.

This code needs to be reviewed closely for significant problems
such as correctness and security.
@
text
@a5 5
#include <elf_abi.h>
#include <machine/reloc.h>
#include <nlist.h>
#include "../powerpc/archdep.h"
#include "../resolve.h"
a8 1
#define DL_NOW 0
a17 1
struct elf_object *foo;
a57 1
	printf("opening library %s for function %s\n", libname, funcname);
a79 1
#ifdef __mips__
a80 1
#endif /* __mips__ */
a84 1
#ifdef __mips__
a85 1
#endif /* __mips__ */
d89 1
@

