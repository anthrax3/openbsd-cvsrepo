head	1.33;
access;
symbols
	OPENBSD_6_0:1.31.0.2
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.25.0.8
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.18
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.14
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.16
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.12
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.10
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.8
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5;
locks; strict;
comment	@# @;


1.33
date	2016.09.01.09.30.59;	author tedu;	state dead;
branches;
next	1.32;
commitid	W3WhHsm8evLS7ffT;

1.32
date	2016.08.28.06.15.32;	author guenther;	state Exp;
branches;
next	1.31;
commitid	Y7AbrDd15D7CrGY4;

1.31
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.30;
commitid	d9R7VGw9CHTkwXE1;

1.30
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.29;
commitid	hneUpr7ZOJCeNeHP;

1.29
date	2016.03.21.01.32.49;	author guenther;	state Exp;
branches;
next	1.28;
commitid	7Tp2uEssgeiK9f77;

1.28
date	2015.11.15.03.41.24;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	kmpP8aoRsEOyxUMj;

1.27
date	2015.09.19.20.56.47;	author guenther;	state Exp;
branches;
next	1.26;
commitid	FcRQ6g8MqXiORdFs;

1.26
date	2015.09.13.17.08.04;	author guenther;	state Exp;
branches;
next	1.25;
commitid	BssYI6s6zozAyfkk;

1.25
date	2014.07.14.03.54.51;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	fsr4AzfIP3TLhLM2;

1.24
date	2014.07.09.12.51.21;	author guenther;	state Exp;
branches;
next	1.23;
commitid	l16v8zUGQ3906m8T;

1.23
date	2014.07.06.07.28.36;	author otto;	state Exp;
branches;
next	1.22;
commitid	vlK4cqSehsiJVTpr;

1.22
date	2013.12.25.11.10.02;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2013.08.13.05.52.21;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2013.06.01.09.57.58;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.18;

1.18
date	2012.10.24.03.26.56;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2012.10.22.17.28.27;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2010.12.12.18.16.10;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.03.16.10.52;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.25.15.56.18;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.09.21.01.10;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.20.20.35;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.02.16.57.58;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.18.19.20.02;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2002.11.23.19.50.45;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.23.19.14.25;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.22.23.58.09;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.21.16.01.55;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.11.18.41.17;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.29.15.20.38;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.27.15.35.55;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.27.13.56.36;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.27.13.19.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.33
log
@retire sparc
@
text
@/*	$OpenBSD: ldasm.S,v 1.32 2016/08/28 06:15:32 guenther Exp $	*/

/*
 * Copyright (c) 2001 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*-
 * Copyright (c) 2000 Eduardo Horvath.
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Christos Zoulas and Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/syscall.h>
#include <machine/trap.h>
#include <machine/asm.h>

#define DL_DATA_SIZE	(16*4)
#define ARGC		96

	.section	".text"
	.align	4
	.global	_dl_start
	.type	_dl_start,@@function
_dl_start:
	sub	%g0, %g0, %fp		! clear frame
	sub	%sp, 32 + DL_DATA_SIZE, %sp	! make room for dl_data
	add	%sp, ARGC, %l3

	add	%l3, DL_DATA_SIZE, %o0
	mov	%o0, %l0

	/*
	 * need to figure out where _DYNAMIC is located newer binutils
	 * does not fill in GOT to read _DYNAMIC before relocation.
	 */
	call	0f
	 nop
	call	_DYNAMIC+8		! not executed (no delay needed)
0:	ld	[%o7+8], %o2		! load stub call instruction
	sll	%o2, 2, %o2		! extract PC offset
	sra	%o2, 0, %o2		! sign-extend

	add	%o2, %o7, %o2		! real &_DYNAMIC

	call	_dl_boot_bind		! _dl_boot_bind(sp,dl_data,dynamicp)
	 mov	%l3, %o1

	mov	%l3, %o3
	ld	[%l0], %l3		! argc = *sp
	sll	%l3, 2, %l3		! argc *= sizeof(long)
	add	%l0, 4, %o0		! argv = [sp + argc]
	add	%l0, 8, %o1		! envp = sp + 8 +
	add	%o1, %l3, %o1		!	+ argc

	add	%o3, (7*4), %l2
	ld	[%l2], %o2		! loff = dl_data[AUX_base];

	call	_dl_boot		! _dl_boot(argv,envp,loff,dl_data)
	 nop

	add	%sp, 32 + DL_DATA_SIZE, %sp	! restore stack

1:	call	2f
	 sethi	%hi(_GLOBAL_OFFSET_TABLE_+(.-1b)), %l7
2:	or	%l7, %lo(_GLOBAL_OFFSET_TABLE_+(.-1b)), %l7
	add	%l7, %o7, %l7

	jmp	%o0
	 ld	[%l7 + _dl_dtors], %g1	! %g1 = cleanup


	.section	".text"
	.align	4
	.global	_dl_bind_start
	.type	_dl_bind_start,@@function
_dl_bind_start:	# (obj, reloff)
	save	%sp, -96, %sp		/* setup standard stack frame */
	ld	[%i7 + 8], %o0		/* obj id is in second PLT slot */
	srl	%g1, 10, %o1		/* offset is in high 22 bits */
	call	_dl_bind		/* Call _rtld_bind(obj, offset) */
	 sub	%o1, 12*4, %o1		/* first 4 `pltrel' entries missing! */

	mov	%o0, %g1		/* return value == function address */
	restore				/* get rid of our context */
	 jmp	%g1			/* and the jmpslot context, then go. */
	restore

	.section ".text"
	.align 4
	.global _dl_close
	.type _dl_close,@@function
_dl_close:
	mov SYS_close | SYSCALL_G2RFLAG, %g1	! call sys_close
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_exit
	.type _dl_exit,@@function
_dl_exit:
	mov SYS_exit | SYSCALL_G2RFLAG, %g1	! call sys_exit
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_issetugid
	.type _dl_issetugid,@@function
_dl_issetugid:
	mov SYS_issetugid | SYSCALL_G2RFLAG, %g1	! call sys_issetugid
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_getthrid
	.type _dl_getthrid,@@function
_dl_getthrid:
	mov SYS_getthrid | SYSCALL_G2RFLAG, %g1	! call sys_getthrid
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl__syscall
	.type _dl__syscall,@@function
_dl__syscall:
	mov SYS___syscall | SYSCALL_G2RFLAG, %g1	! call sys_syscall
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_munmap
	.type _dl_munmap,@@function
_dl_munmap:
	mov SYS_munmap | SYSCALL_G2RFLAG, %g1	! calling sys_munmap
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_mprotect
	.type _dl_mprotect,@@function
_dl_mprotect:
	mov SYS_mprotect | SYSCALL_G2RFLAG, %g1	! calling sys_mprotect
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_open
	.type _dl_open,@@function
_dl_open:
	mov SYS_open | SYSCALL_G2RFLAG, %g1	! calling sys_open
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_read
	.type _dl_read,@@function
_dl_read:
	mov SYS_read | SYSCALL_G2RFLAG, %g1	! calling sys_read
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_write
	.type _dl_write,@@function
_dl_write:
	mov SYS_write | SYSCALL_G2RFLAG, %g1	! calling sys_write
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.globl _dl_fstat
	.type _dl_fstat,@@function
_dl_fstat:
	mov  SYS_fstat | SYSCALL_G2RFLAG, %g1	! call sys_fstat
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.globl _dl_getdents
	.type _dl_getdents,@@function
_dl_getdents:
	mov  SYS_getdents | SYSCALL_G2RFLAG, %g1	! call sys_getdents
	add %o7, 8, %g2					! just return on success
	t ST_SYSCALL					! off to wonderland
	retl
	 sub %g0, %o0, %o0				! error: result = -errno


	.section ".text"
	.align 4
	.globl _dl_sysctl
	.type _dl_sysctl,@@function
_dl_sysctl:
	mov  SYS_sysctl | SYSCALL_G2RFLAG, %g1		! call sys_sysctl
	add %o7, 8, %g2					! just return on success
	t ST_SYSCALL					! off to wonderland
	retl
	 sub %g0, %o0, %o0				! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_readlink
	.type _dl_readlink,@@function
_dl_readlink:
	mov SYS_readlink | SYSCALL_G2RFLAG, %g1	! calling sys_readlink
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_getcwd
	.type _dl_getcwd,@@function
_dl_getcwd:
	mov SYS___getcwd | SYSCALL_G2RFLAG, %g1	! calling sys_getcwd
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_utrace
	.type _dl_utrace,@@function
_dl_utrace:
	mov SYS_utrace | SYSCALL_G2RFLAG, %g1	! calling sys_utrace
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_getentropy
	.type _dl_getentropy,@@function
_dl_getentropy:
	mov SYS_getentropy | SYSCALL_G2RFLAG, %g1	! calling sys_getentropy
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno

	.section ".text"
	.align 4
	.global _dl_sendsyslog
	.type _dl_sendsyslog,@@function
_dl_sendsyslog:
	mov SYS_sendsyslog | SYSCALL_G2RFLAG, %g1	! calling sys_sendsyslog
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno

	.section ".text"
	.align 4
	.global _dl_pledge
	.type _dl_pledge,@@function
_dl_pledge:
	mov SYS_pledge | SYSCALL_G2RFLAG, %g1	! calling sys_pledge
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno

/*
 * V8 sparc .{,u}{mul,div,rem} replacements.
 * We try to mimic them 100%.  Full 64 bit sources or outputs, and
 * these routines are required to update the condition codes.
 */
.globl _C_LABEL(_mulreplace), _C_LABEL(_mulreplace_end)
_C_LABEL(_mulreplace):
	smulcc	%o0, %o1, %o0
	retl
	 rd	%y, %o1
_C_LABEL(_mulreplace_end):

.globl _C_LABEL(_umulreplace), _C_LABEL(_umulreplace_end)
_C_LABEL(_umulreplace):
	umulcc	%o0, %o1, %o0
	retl
	 rd	%y, %o1
_C_LABEL(_umulreplace_end):

.globl _C_LABEL(_divreplace), _C_LABEL(_divreplace_end)
_C_LABEL(_divreplace):
	sra	%o0, 31, %g1
	wr	%g1, 0, %y
	nop
	nop
	nop
	retl
	 sdivcc	%o0, %o1, %o0
_C_LABEL(_divreplace_end):

.globl _C_LABEL(_udivreplace), _C_LABEL(_udivreplace_end)
_C_LABEL(_udivreplace):
	wr	%g0, 0, %y
	nop
	nop
	nop
	retl
	 udivcc	%o0, %o1, %o0
_C_LABEL(_udivreplace_end):

.globl _C_LABEL(_remreplace), _C_LABEL(_remreplace_end)
_C_LABEL(_remreplace):
	sra	%o0, 31, %g1
	wr	%g1, 0, %y
	nop
	nop
	nop
	sdiv	%o0, %o1, %o2
	smul	%o1, %o2, %o2
	retl
	 subcc	%o0, %o2, %o0
_C_LABEL(_remreplace_end):

.globl _C_LABEL(_uremreplace), _C_LABEL(_uremreplace_end)
_C_LABEL(_uremreplace):
	wr	%g0, 0, %y
	nop
	nop
	nop
	udiv	%o0, %o1, %o2
	umul	%o1, %o2, %o2
	retl
	 subcc	%o0, %o2, %o0
_C_LABEL(_uremreplace_end):
@


1.32
log
@ld.so doesn't need gettimeofday or lstat stubs any more

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.31 2016/05/07 19:05:23 guenther Exp $	*/
@


1.31
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.30 2016/03/21 22:41:29 bluhm Exp $	*/
a298 12
	.global _dl_gettimeofday
	.type _dl_gettimeofday,@@function
_dl_gettimeofday:
	mov SYS_gettimeofday | SYSCALL_G2RFLAG, %g1	! calling sys_gettimeofday
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
a302 12
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_lstat
	.type _dl_lstat,@@function
_dl_lstat:
	mov SYS_lstat | SYSCALL_G2RFLAG, %g1	! calling sys_lstat
@


1.30
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.29 2016/03/21 01:32:49 guenther Exp $	*/
d171 12
@


1.29
log
@Switch ld.so's stack smash handler from sendsyslog to sendsyslog2
and pass the LOG_CONS flag like libc's handler.

ok deraadt@@ bluhm@@ (who had a similar diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.28 2015/11/15 03:41:24 deraadt Exp $	*/
d358 4
a361 4
	.global _dl_sendsyslog2
	.type _dl_sendsyslog2,@@function
_dl_sendsyslog2:
	mov SYS_sendsyslog2 | SYSCALL_G2RFLAG, %g1	! calling sys_sendsyslog
@


1.28
log
@ldd(1) sets environment variable LD_TRACE_LOADED_OBJECTS to tell ld.so
that it should show information about the program it loads, rather than
run it.  In that specific case, ld.so can pledge to "stdio rpath" to
ensure that code path in ld.so has no bugs.
Yes, a pledge in ld.so.... who'd have thought!
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.27 2015/09/19 20:56:47 guenther Exp $	*/
d358 4
a361 4
	.global _dl_sendsyslog
	.type _dl_sendsyslog,@@function
_dl_sendsyslog:
	mov SYS_sendsyslog | SYSCALL_G2RFLAG, %g1	! calling sys_sendsyslog
@


1.27
log
@kbind has eliminated the need for and use of the bind lock.  Delete it, the
the callback, and the sigprocmask stub.
Keep around the DL_SETBINDLCK case until libpthread stops using it.

discussed with miod@@ at l2k15
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.26 2015/09/13 17:08:04 guenther Exp $	*/
d362 11
@


1.26
log
@Rename __sysctl syscall to just sysctl, as the userland wrapper is no longer
necessary

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.25 2014/07/14 03:54:51 deraadt Exp $	*/
a282 18


	/* _dl_sigprocmask does not support NULL new mask */
	.section ".text"
	.align 4
	.globl _dl_sigprocmask
	.type _dl_sigprocmask,@@function
_dl_sigprocmask:
	ld	[%o1], %o1
	mov	SYS_sigprocmask, %g1			! call sys___sigprocmask
	t	ST_SYSCALL				! off to wonderland

	cmp	%o2, 0
	bne,a	1f
	 st	%o0, [%o2]
1:
	retl
	 clr	%o0
@


1.25
log
@Now that we have sendsyslog(2), we can directly use it in the
(previously completely retarded) stack_smash_handler of ld.so
ok beck miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.24 2014/07/09 12:51:21 guenther Exp $	*/
d278 1
a278 1
	mov  SYS___sysctl | SYSCALL_G2RFLAG, %g1	! call sys___sysctl
@


1.24
log
@_dl_fcntl() is no longer used; kill the stubs

ok otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.23 2014/07/06 07:28:36 otto Exp $	*/
d369 11
@


1.23
log
@move from sysclt(KERN_ARND) to getentropy(2); ok miod@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.22 2013/12/25 11:10:02 kettenis Exp $	*/
a254 12
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.globl _dl_fcntl
	.type _dl_fcntl,@@function
_dl_fcntl:
	mov  SYS_fcntl | SYSCALL_G2RFLAG, %g1	! call sys_fcntl
@


1.22
log
@Make ld.so pass its cleanup handler in %g1 as required by the SPARC System V
ABI, and stop calling atexit(4) directly from ld.so on sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.21 2013/08/13 05:52:21 guenther Exp $	*/
d369 12
@


1.21
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.20 2013/06/01 09:57:58 miod Exp $	*/
d116 5
d122 1
a122 1
	 clr	%g1			! XXX don't register with atexit
@


1.20
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.19 2013/04/05 12:58:03 kurt Exp $	*/
d270 4
a273 4
	.globl _dl_getdirentries
	.type _dl_getdirentries,@@function
_dl_getdirentries:
	mov  SYS_getdirentries | SYSCALL_G2RFLAG, %g1	! call sys_getdirentries
@


1.19
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.18 2012/10/24 03:26:56 guenther Exp $	*/
d357 11
@


1.18
log
@Garbage-collect the _dl_stat() routine, now unused

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.17 2012/10/22 17:28:27 kettenis Exp $	*/
d320 37
@


1.17
log
@Stop passing around PS_STRINGS in %g1.  The ELF ABI reserves this register
for passing around a pointer to a cleanup function and we'd like to use it
for that purpose in the near future.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.16 2010/12/12 18:16:10 kettenis Exp $	*/
a237 12
	add %o7, 8, %g2				! just return on success
	t ST_SYSCALL				! off to wonderland
	retl
	 sub %g0, %o0, %o0			! error: result = -errno


	.section ".text"
	.align 4
	.global _dl_stat
	.type _dl_stat,@@function
_dl_stat:
	mov SYS_stat | SYSCALL_G2RFLAG, %g1	! call sys_stat
@


1.16
log
@Allocate a full C compiler-style stack frame that includes space for 6
extended word argument slots required by the ABI.
Apparently gcc4 uses them in cases where gcc3 didn't.  Fixes segmentation
faults with gcc4 because the space for the slots was colliding with
the space for dl_data that we allocated on the stack.

ok miod@@, drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.15 2006/05/03 16:10:52 drahn Exp $	*/
a78 1
	mov	%g1, %l1		! save ps_strings
d117 1
a117 1
	 mov	%l1, %g1		! restore ps_strings
@


1.15
log
@prebind - how to prelink a binary without throwing security out the window

Prelink fixes the address of libraries making 'return to libc' attacks trival,
prebind uses a different method to achieve most of the same gains, however
without adding any security conerns.

Still under development, now in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.14 2004/05/25 15:56:18 deraadt Exp $	*/
d71 1
a71 1
#define ARGC		(16*4)
d80 1
a80 1
	sub	%sp, DL_DATA_SIZE, %sp	! make room for dl_data
d115 1
a115 1
	add	%sp, DL_DATA_SIZE, %sp	! restore stack
@


1.14
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.13 2003/07/09 21:01:10 drahn Exp $	*/
d321 12
@


1.13
log
@changes to ld.so to be compatible with newer binutils, requires
slight changes in the startup code on most archs. ok art@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.12 2003/06/02 20:20:35 jason Exp $	*/
d266 1
a266 1
	 sub %g0, %o0, %o0                      ! error: result = -errno
d278 1
a278 1
	 sub %g0, %o0, %o0                      ! error: result = -errno
d290 1
a290 1
	 sub %g0, %o0, %o0                      ! error: result = -errno
d302 1
a302 1
	 sub %g0, %o0, %o0                      ! error: result = -errno
@


1.12
log
@nuke clause 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.11 2003/02/02 16:57:58 deraadt Exp $	*/
d85 15
a99 1
	call	_dl_boot_bind		! _dl_boot_bind(sp,dl_data)
@


1.11
log
@knf & ansi; drahn ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.10 2002/12/18 19:20:02 drahn Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@Prepare for an upcoming ELF executable change. This will allow ld.so to
protect the GOT and PLT sections of the executable from being overwritten.
This behavior is enabled by changes in the executable/shared object layout,
and does not occur without the ld changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.9 2002/11/23 19:50:45 drahn Exp $	*/
d107 1
a107 1
	
d309 1
a309 1
1:	
@


1.9
log
@After fixing these comments, I add another incorrect one.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.8 2002/11/23 19:14:25 drahn Exp $	*/
d294 18
@


1.8
log
@Implement [u]mul/[u]div/[u]rem with faster version if available
on machine. Improves speed for dynamic userland processes when active.
Idea from Theo. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.7 2002/11/22 23:58:09 drahn Exp $	*/
d289 1
a289 1
	mov  SYS___sysctl | SYSCALL_G2RFLAG, %g1	! call sys_fstat
@


1.7
log
@Fix the comments on which systemcall is being processed, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.6 2002/10/21 16:01:55 drahn Exp $	*/
d283 76
@


1.6
log
@Simplify the ld.so asm api, the data is available other ways.
tested by naddy@@ and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.5 2002/08/11 18:41:17 drahn Exp $	*/
d157 3
a159 3
	mov SYS_issetugid | SYSCALL_G2RFLAG, %g1
	add %o7, 8, %g2
	t ST_SYSCALL
d161 1
a161 1
	 sub %g0, %o0, %o0
d169 1
a169 1
	mov SYS___syscall | SYSCALL_G2RFLAG, %g1	! call sys_exit
d181 1
a181 1
	mov SYS_munmap | SYSCALL_G2RFLAG, %g1	! calling sys_mmap
d265 1
a265 1
	mov  SYS_fcntl | SYSCALL_G2RFLAG, %g1	! call sys_fstat
d277 1
a277 1
	mov  SYS_getdirentries | SYSCALL_G2RFLAG, %g1	! call sys_fstat
@


1.5
log
@The parameter dynp was never used, rather than pass in a dummy on most
archs and a nasty calcuation on others, remove the parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.4 2002/07/29 15:20:38 art Exp $	*/
a88 1
	mov	0, %o2			! dynp = 0
d90 2
a91 2
	call	_dl_boot_bind		! _dl_boot_bind(sp,loff,dynp,dl_data)
	 mov	%l3, %o3
@


1.4
log
@Bunch of cleanups and one last bugfix that seems to make things work.
Mark COPY relocations as needing to resolve the destination symbol.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.3 2002/07/27 15:35:55 art Exp $	*/
d94 1
a94 1
	mov	%l3, %o4
d101 1
a101 1
	add	%o4, (7*4), %l2
d104 2
a105 2
	call	_dl_boot		! _dl_boot(argv,envp,loff,dynp,dl_data)
	 mov	0, %o3			! dynp = 0
@


1.3
log
@this is not sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.2 2002/07/27 13:56:36 art Exp $	*/
d107 1
a107 1
	add	%sp, DL_DATA_SIZE, %sp		! restore stack
@


1.2
log
@Stop being too creative, steal more code from sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.1 2002/07/27 13:19:26 art Exp $	*/
d96 3
a98 3
	sll	%l3, 3, %l3		! argc *= sizeof(long)
	add	%l0, 8, %o0		! argv = [sp + argc]
	add	%l0, 16, %o1		! envp = sp + 16 +
@


1.1
log
@Just a skeleton for sparc. Builds, but pieces are missing and it doesn't
even get to dl_boot_bind correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d83 10
a92 8
	mov	0, %fp			/* Erect a fence post for ourselves */
	mov	%g1, %l1		/* save ps_strings */
	sub	%sp, DL_DATA_SIZE, %sp	/* make room for dl_data */
	mov	%sp, %o3

	mov	%g0, %o2
	call	_dl_boot_bind
	 add	%sp, ARGC+DL_DATA_SIZE, %o0	/* &argc - 8 */
d101 1
a101 1
	add	%o4, (7*8), %l2
@

