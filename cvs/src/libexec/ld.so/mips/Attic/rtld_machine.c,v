head	1.17;
access;
symbols
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	r20000612:1.1.1.2
	dsr:1.1.1
	r19990103:1.1.1.1
	per:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2004.08.11.17.11.45;	author pefo;	state dead;
branches;
next	1.16;

1.16
date	2004.08.06.09.38.29;	author pefo;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.25.18.07.20;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.02.15.17.51;	author drahn;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.28.03.11.00;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.09.16.10.04;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.02.16.57.58;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.18.19.20.02;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2002.11.14.15.15.54;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.25.10.39.52;	author pefo;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.23.12.38.29;	author pefo;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.07.08.54.50;	author jufi;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.05.23.13.55;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.24.04.21.27;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.24.04.17.00;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.24.03.44.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.13.03.34.15;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.13.03.34.15;	author rahnds;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.06.13.03.40.27;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.17
log
@mips->mips64
@
text
@/*	$OpenBSD: rtld_machine.c,v 1.16 2004/08/06 09:38:29 pefo Exp $ */

/*
 * Copyright (c) 1998-2004 Opsycon AB, Sweden.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define _DYN_LOADER

#include <sys/types.h>
#include <sys/mman.h>

#include <link.h>
#include "resolve.h"
#include "syscall.h"
#include "archdep.h"

int
_dl_md_reloc(elf_object_t *object, int rel, int relsz)
{
	int	i;
	int	numrel;
	int	fails = 0;
	Elf32_Addr loff;
	Elf32_Rel  *relocs;

	loff = object->load_offs;
	numrel = object->Dyn.info[relsz] / sizeof(Elf32_Rel);
	relocs = (Elf32_Rel *)(object->Dyn.info[rel]);

	if (relocs == NULL)
		return(0);

	for (i = 0; i < numrel; i++, relocs++) {
		Elf32_Addr r_addr = relocs->r_offset + loff;
		Elf32_Addr ooff = 0;
		const Elf32_Sym *sym, *this;
		const char *symn;
		int type;

		if (ELF32_R_SYM(relocs->r_info) == 0xffffff)
			continue;

		sym = object->dyn.symtab;
		sym += ELF32_R_SYM(relocs->r_info);
		this = sym;
		symn = object->dyn.strtab + sym->st_name;
		type = ELF32_R_TYPE(relocs->r_info);

		if (ELF32_R_SYM(relocs->r_info) &&
		    !(ELF32_ST_BIND(sym->st_info) == STB_LOCAL &&
		    ELF32_ST_TYPE (sym->st_info) == STT_NOTYPE)) {
			ooff = _dl_find_symbol(symn, _dl_objects, &this, NULL,
			SYM_SEARCH_ALL | SYM_NOWARNNOTFOUND | SYM_PLT,
			sym->st_size, object);
			if (!this && ELF32_ST_BIND(sym->st_info) == STB_GLOBAL) {
				_dl_printf("%s: can't resolve reference '%s'\n",
				    _dl_progname, symn);
				fails++;
			}

		}

		switch (ELF32_R_TYPE(relocs->r_info)) {
		case R_MIPS_REL32:
			if (ELF32_ST_BIND(sym->st_info) == STB_LOCAL &&
			    (ELF32_ST_TYPE(sym->st_info) == STT_SECTION ||
			    ELF32_ST_TYPE(sym->st_info) == STT_NOTYPE) ) {
				*(u_int32_t *)r_addr += loff + sym->st_value;
			} else if (this) {
				*(u_int32_t *)r_addr += this->st_value + ooff;
			}
			break;

		case R_MIPS_NONE:
			break;

		default:
			_dl_printf("%s: unsupported relocation '%s'\n",
			    _dl_progname, symn);
			_dl_exit(1);
		}
	}

	return(fails);
}

/*
 *	Relocate the Global Offset Table (GOT). Currently we don't
 *	do lazy evaluation here because the GNU linker doesn't
 *	follow the ABI spec which says that if an external symbol
 *	is referenced by other relocations than CALL16 and 26 it
 *	should not be given a stub and have a zero value in the
 *	symbol table. By not doing so, we can't use pointers to
 *	external functions and use them in comparisons...
 */
void
_dl_md_reloc_got(elf_object_t *object, int lazy)
{
	int	i, n;
	Elf32_Addr loff;
	Elf32_Addr ooff;
	Elf32_Addr *gotp;
	Elf32_Addr plt_addr;
	const Elf32_Sym  *symp;
	const Elf32_Sym  *this;
	const char *strt;

	if (object->status & STAT_GOT_DONE)
		return;

	lazy = 0;	/* XXX Fix ld before enabling lazy */
	loff = object->load_offs;
	strt = object->dyn.strtab;
	gotp = object->dyn.pltgot;
	n = object->Dyn.info[DT_MIPS_LOCAL_GOTNO - DT_LOPROC + DT_NUM];

	DL_DEB(("loff: '%p'\n", loff));
	/*
	 *  Set up pointers for run time (lazy) resolving.
	 */
	gotp[0] = (int)_dl_rt_resolve;
	if (gotp[1] & 0x80000000) {
		gotp[1] = (int)object | 0x80000000;
	}

	/*  First do all local references. */
	for (i = ((gotp[1] & 0x80000000) ? 2 : 1); i < n; i++) {
		gotp[i] += loff;
	DL_DEB(("got: '%p' = %x\n", &gotp[i], gotp[i]));
	}

	gotp += n;

	symp =  object->dyn.symtab;
	symp += object->Dyn.info[DT_MIPS_GOTSYM - DT_LOPROC + DT_NUM];
	n =  object->Dyn.info[DT_MIPS_SYMTABNO - DT_LOPROC + DT_NUM] -
	    object->Dyn.info[DT_MIPS_GOTSYM - DT_LOPROC + DT_NUM];

	plt_addr = 0;
	this = NULL;
	object->plt_size = 0;
	object->got_size = 0;
	ooff = _dl_find_symbol("__got_start", object, &this, NULL,
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, 0, object);
	if (this != NULL)
		object->got_start = ooff + this->st_value;

	this = NULL;
	ooff = _dl_find_symbol("__got_end", object, &this, NULL,
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, 0, object);
	if (this != NULL)
		object->got_size = ooff + this->st_value  - object->got_addr;

	this = NULL;
	ooff = _dl_find_symbol("__plt_start", object, &this, NULL,
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, 0, object);
	if (this != NULL)
		object->plt_start = ooff + this->st_value;

	this = NULL;
	ooff = _dl_find_symbol("__plt_end", object, &this, NULL,
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, 0, object);
	if (this != NULL)
		object->plt_size = ooff + this->st_value  - plt_addr;

	/*
	 *  Then do all global references according to the ABI.
	 *  Quickstart is not yet implemented.
	 */
	while (n--) {
		if (symp->st_shndx == SHN_UNDEF &&
		    ELF32_ST_TYPE(symp->st_info) == STT_FUNC) {
	DL_DEB(("got: '%s' = %x\n", strt + symp->st_name, symp->st_value));
			if (symp->st_value == 0 || !lazy) {
				this = 0;
				ooff = _dl_find_symbol(strt + symp->st_name,
				    _dl_objects, &this, NULL,
				    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT,
				    symp->st_size, object);
				if (this)
					*gotp = this->st_value + ooff;
			} else
				*gotp = symp->st_value + ooff;
		} else if (symp->st_shndx == SHN_COMMON ||
			symp->st_shndx == SHN_UNDEF) {
			this = 0;
			ooff = _dl_find_symbol(strt + symp->st_name,
			    _dl_objects, &this, NULL,
			    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT,
			    symp->st_size, object);
			if (this)
				*gotp = this->st_value + ooff;
		} else if (ELF32_ST_TYPE(symp->st_info) == STT_FUNC) {
			*gotp += loff;
		} else {	/* XXX ??? */	/* Resolve all others immediatly */
			*gotp = symp->st_value + loff;
		}
		gotp++;
		symp++;
	}
	object->status |= STAT_GOT_DONE;

	if (object->got_size != 0)
		_dl_mprotect((void*)object->got_start, object->got_size,
		    PROT_READ);
	if (object->plt_size != 0)
		_dl_mprotect((void*)object->plt_start, object->plt_size,
		    PROT_READ|PROT_EXEC);
}
@


1.16
log
@update for mips
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.15 2004/05/25 18:07:20 mickey Exp $ */
@


1.15
log
@return object* the symbol is in for _dl_find_symbol*; drahn@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.14 2003/09/02 15:17:51 drahn Exp $ */
d4 1
a4 1
 * Copyright (c) 1998-2002 Opsycon AB, Sweden.
d32 1
d125 1
a128 2
	Elf_Addr ooff;
	const Elf_Sym *this;
d139 1
d151 1
d161 1
d163 2
d168 1
a168 1
		object->got_addr = ooff + this->st_value;
d180 1
a180 1
		object->plt_addr = ooff + this->st_value;
d186 1
a186 1
		object->plt_size = ooff + this->st_value  - object->plt_addr;
d195 1
a195 1
DL_DEB(("got: '%s' = %x\n", strt + symp->st_name, symp->st_value));
d225 2
a226 2
	if (object->got_addr != NULL && object->got_size != 0)
		_dl_mprotect((void*)object->got_addr, object->got_size,
d228 2
a229 2
	if (object->plt_addr != NULL && object->plt_size != 0)
		_dl_mprotect((void*)object->plt_addr, object->plt_size,
@


1.14
log
@Fix PR 3371, symbol lookup in dlopen()ed objects is not correct. Correct
behavior for RTLD_GLOBAL/RTLD_LOCAL is now supported. ok espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.13 2003/07/28 03:11:00 drahn Exp $ */
d73 1
a73 1
			ooff = _dl_find_symbol(symn, _dl_objects, &this,
d160 1
a160 1
	ooff = _dl_find_symbol("__got_start", object, &this,
d166 1
a166 1
	ooff = _dl_find_symbol("__got_end", object, &this,
d172 1
a172 1
	ooff = _dl_find_symbol("__plt_start", object, &this,
d178 1
a178 1
	ooff = _dl_find_symbol("__plt_end", object, &this,
d194 1
a194 1
				    _dl_objects, &this,
d205 1
a205 1
			    _dl_objects, &this,
@


1.13
log
@The fifth argument to _dl_find_symbol is a 'int size', not a SYM_ define.
Fix several calls which had the incorrect but working define in that position
It happened that SYM_NOTPLT was 0, which was the desired size value.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.12 2003/06/09 16:10:04 deraadt Exp $ */
d75 1
a75 1
			sym->st_size, object->load_name);
d161 1
a161 1
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, 0, NULL);
d167 1
a167 1
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, 0, NULL);
d173 1
a173 1
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, 0, NULL);
d179 1
a179 1
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, 0, NULL);
d196 1
a196 1
				    symp->st_size, object->load_name);
d207 1
a207 1
			    symp->st_size, object->load_name);
@


1.12
log
@pefo 3/4 licence cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.11 2003/02/02 16:57:58 deraadt Exp $ */
d161 1
a161 2
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, SYM_NOTPLT,
	    NULL);
d167 1
a167 2
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, SYM_NOTPLT,
	    NULL);
d173 1
a173 2
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, SYM_NOTPLT,
	    NULL);
d179 1
a179 2
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_PLT, SYM_NOTPLT,
	    NULL);
@


1.11
log
@knf & ansi; drahn ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.10 2002/12/18 19:20:02 drahn Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@Prepare for an upcoming ELF executable change. This will allow ld.so to
protect the GOT and PLT sections of the executable from being overwritten.
This behavior is enabled by changes in the executable/shared object layout,
and does not occur without the ld changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.9 2002/11/14 15:15:54 drahn Exp $ */
d229 1
a229 1
	if (object->got_addr != NULL && object->got_size != 0) 
d231 2
a232 2
		    PROT_READ); 
	if (object->plt_addr != NULL && object->plt_size != 0) 
@


1.9
log
@Make error messages on symbol lookup failures more useful.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.8 2002/10/25 10:39:52 pefo Exp $ */
d132 2
d164 28
d228 7
@


1.8
log
@Some small fixes in MI code for mips backport. A new reloc md function,
RELOC_GOT, was added to handle mips got bootstrap reloc.

Also remove workaround used on previous versions of binutils for mips.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.7 2002/10/23 12:38:29 pefo Exp $ */
d80 1
a80 1
			sym->st_size);
d175 1
a175 1
				    symp->st_size);
d186 1
a186 1
			    symp->st_size);
@


1.7
log
@mips archdep stuff update while waiting for ok on mi
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.6 2002/07/07 08:54:50 jufi Exp $ */
d169 1
@


1.6
log
@
typos/grammar/better words
in comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.5 2002/06/05 23:13:55 art Exp $ */
d4 1
a4 1
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
d16 1
a16 2
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
d61 1
a61 1
		Elf32_Addr ooff;
d64 1
d73 1
d78 3
a80 1
			ooff = _dl_find_symbol(symn, _dl_objects, &this, 0, 1);
d94 2
a95 2
				*(u_int32_t *)r_addr += loff;
			} else if (this)
d97 1
d133 3
a141 3
	if (object->status & STAT_GOT_DONE)
		return;

d150 1
a150 3
	/*
	 *  First do all local references.
	 */
a168 1
_dl_printf("undef: %s = %X\n", strt + symp->st_name, symp->st_value);
d172 3
a174 1
				    _dl_objects, &this, 0, 1);
d183 3
a185 1
			    _dl_objects, &this, 0, 1);
@


1.5
log
@Cleanup/remove duplicate code that checks STAT_RELOC_DONE.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.4 2002/05/24 04:21:27 deraadt Exp $ */
d116 1
a116 1
 *	external functions and use them in comparitions...
@


1.4
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.3 2002/05/24 04:17:00 deraadt Exp $ */
d57 1
a57 1
	if ((object->status & STAT_RELOC_DONE) || !relocs)
d105 1
a105 1
	object->status |= STAT_RELOC_DONE;
@


1.3
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.2 2002/05/24 03:44:38 deraadt Exp $ */
d75 1
a75 1
		   !(ELF32_ST_BIND(sym->st_info) == STB_LOCAL &&
d89 1
a89 1
			   (ELF32_ST_TYPE(sym->st_info) == STT_SECTION ||
@


1.2
log
@various KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: rtld_machine.c,v 1.1.1.2 2000/06/13 03:40:27 rahnds Exp $ */
a43 1

d53 1
a53 1
	loff   = object->load_offs;
d57 1
a57 1
	if ((object->status & STAT_RELOC_DONE) || !relocs) {
a58 1
	}
d76 1
a76 1
		     ELF32_ST_TYPE (sym->st_info) == STT_NOTYPE)) {
d92 1
a92 1
			} else if (this) {
a93 1
			}
d101 1
a101 1
					_dl_progname, symn);
d133 1
a133 1
	n    = object->Dyn.info[DT_MIPS_LOCAL_GOTNO - DT_LOPROC + DT_NUM];
d135 1
a135 1
	if (object->status & STAT_GOT_DONE) {
a136 1
	}
d157 2
a158 2
	n    =  object->Dyn.info[DT_MIPS_SYMTABNO - DT_LOPROC + DT_NUM] -
		object->Dyn.info[DT_MIPS_GOTSYM - DT_LOPROC + DT_NUM];
d166 1
a166 1
		   ELF32_ST_TYPE(symp->st_info) == STT_FUNC) {
d171 2
a172 2
						_dl_objects, &this, 0, 1);
				if (this) {
d174 1
a174 2
				}
			} else {
a175 1
			}
d180 2
a181 2
						_dl_objects, &this, 0, 1);
			if (this) {
a182 1
			}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d5 1
a5 1
 * 
d58 1
a58 1
	if((object->status & STAT_RELOC_DONE) || !relocs) {
d62 1
a62 1
	for(i = 0; i < numrel; i++, relocs++) {
d68 1
a68 1
		if(ELF32_R_SYM(relocs->r_info) == 0xffffff) {
a69 1
		}
d76 1
a76 1
		if(ELF32_R_SYM(relocs->r_info) &&
d79 2
a80 3
			
			ooff = _dl_find_symbol(symn, _dl_objects, &this, 0);
			if(!this && ELF32_ST_BIND(sym->st_info) == STB_GLOBAL) {
d82 1
a82 1
						_dl_progname, symn);
d88 1
a88 1
		switch(ELF32_R_TYPE(relocs->r_info)) {
d90 1
a90 1
			if(ELF32_ST_BIND(sym->st_info) == STB_LOCAL &&
d94 1
a94 2
			}
			else if(this) {
d138 1
a138 1
	if(object->status & STAT_GOT_DONE) {
d146 1
a146 1
	if(gotp[1] & 0x80000000) {
d153 1
a153 1
	for(i = ((gotp[1] & 0x80000000) ? 2 : 1); i < n; i++) {
d158 1
a158 1
	
d168 2
a169 2
	while(n--) {
		if(symp->st_shndx == SHN_UNDEF &&
d172 1
a172 1
			if(symp->st_value == 0 || !lazy) {
d175 2
a176 2
							_dl_objects, &this, 0);
				if(this) {
d179 1
a179 2
			}
			else {
d182 1
a182 2
		}
		else if(symp->st_shndx == SHN_COMMON ||
d186 2
a187 2
						_dl_objects, &this, 0);
			if(this) {
d190 1
a190 2
		}
		else if(ELF32_ST_TYPE(symp->st_info) == STT_FUNC) {
d192 1
a192 2
		}
		else {	/* XXX ??? */	/* Resolve all others immediatly */
@


1.1.1.1
log
@Initial import of ELF ld.so. This was written indepently of the gnu rtld
code and is fully BSD copyrighted.
This initial import contains a mostly working mips and partially working
powerpc version. No support for ld.so.hints or system run path exists.

@
text
@@


1.1.1.2
log
@Updated version of ld.so, contains additional functionality and fixes/
design changes required by egcs.

added support for ldconfig/ld.so.hints

changes to low level relocation code, required by egcs pic
code generation that moved global variable loads to before the
self relocation was performed. Only powerpc supported, mips code not updated.

Code cleaned up somewhat reasonably.

This code needs to be reviewed closely for significant problems
such as correctness and security.
@
text
@d81 1
a81 1
			ooff = _dl_find_symbol(symn, _dl_objects, &this, 0, 1);
d178 1
a178 1
						_dl_objects, &this, 0, 1);
d191 1
a191 1
						_dl_objects, &this, 0, 1);
@

