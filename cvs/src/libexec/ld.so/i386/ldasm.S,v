head	1.29;
access;
symbols
	OPENBSD_6_0:1.26.0.2
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.16
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.14
	OPENBSD_5_0:1.11.0.12
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.10
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@# @;


1.29
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.28;
commitid	veGB6uLWx3BTEAfk;

1.28
date	2016.08.28.06.15.32;	author guenther;	state Exp;
branches;
next	1.27;
commitid	Y7AbrDd15D7CrGY4;

1.27
date	2016.08.07.03.03.44;	author guenther;	state Exp;
branches;
next	1.26;
commitid	99RMJw8lQNMjhoft;

1.26
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.25;
commitid	d9R7VGw9CHTkwXE1;

1.25
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.24;
commitid	hneUpr7ZOJCeNeHP;

1.24
date	2016.03.21.01.32.48;	author guenther;	state Exp;
branches;
next	1.23;
commitid	7Tp2uEssgeiK9f77;

1.23
date	2015.11.15.03.41.24;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	kmpP8aoRsEOyxUMj;

1.22
date	2015.09.19.20.56.47;	author guenther;	state Exp;
branches;
next	1.21;
commitid	FcRQ6g8MqXiORdFs;

1.21
date	2015.09.13.17.08.03;	author guenther;	state Exp;
branches;
next	1.20;
commitid	BssYI6s6zozAyfkk;

1.20
date	2014.09.22.16.13.02;	author brad;	state Exp;
branches;
next	1.19;
commitid	YNDFn1YJL7MKjRub;

1.19
date	2014.07.14.03.54.51;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	fsr4AzfIP3TLhLM2;

1.18
date	2014.07.09.12.51.20;	author guenther;	state Exp;
branches;
next	1.17;
commitid	l16v8zUGQ3906m8T;

1.17
date	2014.07.06.07.28.36;	author otto;	state Exp;
branches;
next	1.16;
commitid	vlK4cqSehsiJVTpr;

1.16
date	2013.12.23.10.39.10;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2013.08.13.05.52.19;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2013.06.01.09.57.58;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.24.03.26.56;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.16.14.17.51;	author kurt;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.03.16.10.52;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.03.15.37.50;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.25.15.56.18;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.09.21.01.10;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.01.35.30;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.30.01.13.53;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.02.16.57.58;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.18.19.20.02;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.21.16.01.55;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.23.23.02.48;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.29
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@/*	$OpenBSD: ldasm.S,v 1.28 2016/08/28 06:15:32 guenther Exp $ */

/*
 * Copyright (c) 2002 Dale Rahn
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */


#define DL_DATA_SIZE	(16*4)
#include <sys/syscall.h>
#include <machine/asm.h>

	.text
	.align  4
	.globl  _dl_start
	.type   _dl_start,@@function
_dl_start:
	movl	%esp,%eax		# save stack pointer for _rtld
	subl	$DL_DATA_SIZE,%esp	# allocate dl_data
	call	1f			# push &_DYNAMIC...
1:	addl	$(_DYNAMIC-1b),(%esp)	# ...for dl_boot_bind
	movl	%esp,%ebx
	movl	%ebx,%edi		# save dl_data arg for dl_boot
	pushl	%ebx			# push dl_data for dl_boot_bind

	mov	%eax, %esi		# save stack for dl_boot

	pushl	%eax			# load saved SP for dl_boot_bind

	call	_dl_boot_bind@@PLT	# _dl_boot_bind(sp,dl_data)

	pushl	%edi			# push saved dl_data
	movl	%edi,%ebp
	movl	(7*4)(%ebp),%eax
	pushl	%eax			# push loff from dl_data

	movl	%esi,%ebp
	movl	$4,%eax
	imull	0(%ebp),%eax
	addl	$8,%eax
	addl	%ebp,%eax
	push	%eax			# push envp

	leal	4(%ebp),%eax
	push	%eax			# push argv

	call	_dl_boot@@PLT		# _dl_boot(argv,envp,loff,dl_data)

	addl	$7*4,%esp		# pop args

	addl	$DL_DATA_SIZE,%esp	# return dl_data

	call	1f			# %edx = cleanup
1:	popl	%ebx
	addl	$_GLOBAL_OFFSET_TABLE_+[.-1b], %ebx
	leal	_dl_dtors@@GOTOFF(%ebx), %edx

	jmp	*%eax


/* copied from lib/libc/arch/i386/SYS.h - XXX */
#define __DO_SYSCALL(x)                                 \
	movl $__CONCAT(SYS_, x),%eax;         \
	int $0x80


#define DL_SYSCALL(n) DL_SYSCALL2(n,n)
#define DL_SYSCALL2(n,c)					\
	.section	".text"					;\
	.align		4					;\
	.global		__CONCAT(_dl_,n)			;\
	.type		__CONCAT(_dl_,n),@@function		;\
__CONCAT(_dl_,n):						;\
	__DO_SYSCALL(c)						;\
	jb	.L_cerr						;\
	ret

#define DL_SYSCALL(n) DL_SYSCALL2(n,n)
#define DL_SYSCALL2(n,c)					\
	.section	".text"					;\
	.align		4					;\
	.global		__CONCAT(_dl_,n)			;\
	.type		__CONCAT(_dl_,n),@@function		;\
__CONCAT(_dl_,n):						;\
	__DO_SYSCALL(c)						;\
	jb	.L_cerr						;\
	ret

DL_SYSCALL(close)

	.section	".text"
	.align		4
	.global _dl_exit
	.type _dl_exit,@@function
_dl_exit:
	mov	$SYS_exit, %eax
	int	$0x80
	ret

DL_SYSCALL(issetugid)
DL_SYSCALL(getthrid)
DL_SYSCALL2(_syscall,__syscall)
DL_SYSCALL(munmap)
DL_SYSCALL(mprotect)
DL_SYSCALL(open)
DL_SYSCALL(read)
DL_SYSCALL(write)
DL_SYSCALL(fstat)
DL_SYSCALL(readlink)
DL_SYSCALL(utrace)
DL_SYSCALL(getentropy)
DL_SYSCALL(sendsyslog)
DL_SYSCALL(pledge)
DL_SYSCALL2(getcwd,__getcwd)
DL_SYSCALL(sysctl)
DL_SYSCALL(getdents)
DL_SYSCALL2(set_tcb,__set_tcb)
DL_SYSCALL(thrkill)

.L_cerr:
	/* error: result = -errno; - handled here. */
	neg	%eax
	ret


	.align 4
	.global _dl_bind_start
	.type _dl_bind_start,@@function
_dl_bind_start:
	pushf				# save registers
	pushl   %eax
	pushl   %ecx
	pushl   %edx
	pushl   %ebx
	pushl   %ebp
	pushl   %esi
	pushl   %edi
	pushl   %ds
	pushl   %es

	pushl   44(%esp)		# Copy of reloff
	pushl   44(%esp)		# Copy of obj
	call    _dl_bind@@PLT		# Call the binder
	addl    $8,%esp			# pop binder args
	movl    %eax,44(%esp)		# Store function to be called in obj

	popl    %es			# restore registers
	popl    %ds
	popl    %edi
	popl    %esi
	popl    %ebp
	popl    %ebx
	popl    %edx
	popl    %ecx
	popl    %eax
	popf

	leal    4(%esp),%esp		# Discard reloff, do not change eflags
	ret

@


1.28
log
@ld.so doesn't need gettimeofday or lstat stubs any more

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.27 2016/08/07 03:03:44 guenther Exp $ */
d100 11
a121 1

d140 1
@


1.27
log
@Teach i386 to pass &_DYNAMIC to _dl_boot_bind()
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.26 2016/05/07 19:05:23 guenther Exp $ */
a120 1
DL_SYSCALL(gettimeofday)
a121 1
DL_SYSCALL(lstat)
@


1.26
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.25 2016/03/21 22:41:29 bluhm Exp $ */
d42 2
a43 1
	pushl	$0			# push 0 for dynamicp (unused on i386)
@


1.25
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.24 2016/03/21 01:32:48 guenther Exp $ */
d112 1
d130 1
@


1.24
log
@Switch ld.so's stack smash handler from sendsyslog to sendsyslog2
and pass the LOG_CONS flag like libc's handler.

ok deraadt@@ bluhm@@ (who had a similar diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.23 2015/11/15 03:41:24 deraadt Exp $ */
d124 1
a124 1
DL_SYSCALL(sendsyslog2)
@


1.23
log
@ldd(1) sets environment variable LD_TRACE_LOADED_OBJECTS to tell ld.so
that it should show information about the program it loads, rather than
run it.  In that specific case, ld.so can pledge to "stdio rpath" to
ensure that code path in ld.so has no bugs.
Yes, a pledge in ld.so.... who'd have thought!
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.22 2015/09/19 20:56:47 guenther Exp $ */
d124 1
a124 1
DL_SYSCALL(sendsyslog)
@


1.22
log
@kbind has eliminated the need for and use of the bind lock.  Delete it, the
the callback, and the sigprocmask stub.
Keep around the DL_SETBINDLCK case until libpthread stops using it.

discussed with miod@@ at l2k15
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.21 2015/09/13 17:08:03 guenther Exp $ */
d125 1
@


1.21
log
@Rename __sysctl syscall to just sysctl, as the userland wrapper is no longer
necessary

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.20 2014/09/22 16:13:02 brad Exp $ */
a130 25
	neg	%eax
	ret


	/* _dl_sigprocmask: does not handle NULL new set */

	.section	".text"
	.align		4
	.global _dl_sigprocmask
	.type _dl_sigprocmask,@@function
_dl_sigprocmask:
	movl	8(%esp), %ecx
	movl    (%ecx),%ecx
	movl	%ecx,8(%esp)		# to new mask arg
	mov	$SYS_sigprocmask, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	movl	12(%esp),%ecx		# fetch old mask requested
	testl	%ecx,%ecx		# test if old mask requested
	jz	2f
	movl	%eax,(%ecx)		# store old mask
	xorl	%eax,%eax
2:	ret

1:	/* error: result = -errno; - handled here. */
@


1.20
log
@Correct the token used.

Pointed out by LLVM.

ldasm.S:111:74: error: unexpected token in '.type' directive
.section ".text" ; .align 4 ; .global _dl_issetugid ; .type _dl_issetugid%function ;_dl_issetugid: ; movl $253,%eax; int $0x80 ; jb .L_cerr ; ret
                                                                         ^

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.19 2014/07/14 03:54:51 deraadt Exp $ */
d126 1
a126 1
DL_SYSCALL2(sysctl,__sysctl)
@


1.19
log
@Now that we have sendsyslog(2), we can directly use it in the
(previously completely retarded) stack_smash_handler of ld.so
ok beck miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.18 2014/07/09 12:51:20 guenther Exp $ */
d93 1
a93 1
	.type		__CONCAT(_dl_,n)%function		;\
@


1.18
log
@_dl_fcntl() is no longer used; kill the stubs

ok otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.17 2014/07/06 07:28:36 otto Exp $ */
d124 1
@


1.17
log
@move from sysclt(KERN_ARND) to getentropy(2); ok miod@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.16 2013/12/23 10:39:10 kettenis Exp $ */
a118 1
DL_SYSCALL(fcntl)
@


1.16
log
@Make ld.so pass its cleanup handler in %edx as required by the i386 System V
ABI, and stop calling atexit(4) directly from ld.so on i386.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.15 2013/08/13 05:52:19 guenther Exp $ */
d124 1
@


1.15
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.14 2013/06/01 09:57:58 miod Exp $ */
a40 1
	pushl	%ebx			# save ps_strings
d74 5
a78 3
	popl	%ebx			# %ebx = ps_strings
	movl	$0,%edx			# %edx = cleanup - XXXDSR
	movl	$0,%ecx			# %ecx = obj_main - XXXDSR
@


1.14
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.13 2013/04/05 12:58:03 kurt Exp $ */
d125 1
a125 1
DL_SYSCALL(getdirentries)
@


1.13
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.12 2012/10/24 03:26:56 guenther Exp $ */
d122 1
@


1.12
log
@Garbage-collect the _dl_stat() routine, now unused

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.11 2009/02/16 14:17:51 kurt Exp $ */
d120 3
@


1.11
log
@Fix passing of ps_strings, cleanup and obj_main values to _start() in crt0.

looks correct kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.10 2006/05/03 16:10:52 drahn Exp $ */
a116 1
DL_SYSCALL(stat)
@


1.10
log
@prebind - how to prelink a binary without throwing security out the window

Prelink fixes the address of libraries making 'return to libc' attacks trival,
prebind uses a different method to achieve most of the same gains, however
without adding any security conerns.

Still under development, now in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.9 2006/05/03 15:37:50 drahn Exp $ */
d71 1
a71 1
	addl	$5*4,%esp		# pop args
d75 3
a77 3
	popl	%ebx			# %ebx = ps_strings - XXXDSR
	popl	%edx			# %edx = cleanup - XXXDSR
	popl	%ecx			# %ecx = obj_main - XXXDSR
@


1.9
log
@Rewrite the ld.so syscall stubs as macros. no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.8 2004/05/25 15:56:18 deraadt Exp $ */
d120 1
@


1.8
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.7 2003/07/09 21:01:10 drahn Exp $ */
d80 16
a95 8
	.section	".text"
	.align		4
	.global _dl_close
	.type _dl_close,@@function
_dl_close:
	mov	$SYS_close, %eax
	int	$0x80
	jb	1f
d98 2
d110 12
a121 129
	.section	".text"
	.align		4
	.global _dl_issetugid
	.type _dl_issetugid,@@function
_dl_issetugid:
	mov	$SYS_issetugid, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl__syscall
	.type _dl__syscall,@@function
_dl__syscall:
	mov	$SYS___syscall, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_munmap
	.type _dl_munmap,@@function
_dl_munmap:
	mov	$SYS_munmap, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_mprotect
	.type _dl_mprotect,@@function
_dl_mprotect:
	mov	$SYS_mprotect, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_open
	.type _dl_open,@@function
_dl_open:
	mov	$SYS_open, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_read
	.type _dl_read,@@function
_dl_read:
	mov	$SYS_read, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_write
	.type _dl_write,@@function
_dl_write:
	mov	$SYS_write, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_stat
	.type _dl_stat,@@function
_dl_stat:
	mov	$SYS_stat, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_fstat
	.type _dl_fstat,@@function
_dl_fstat:
	mov	$SYS_fstat, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_fcntl
	.type _dl_fcntl,@@function
_dl_fcntl:
	mov	$SYS_fcntl, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret

	.section	".text"
	.align		4
	.global _dl_sysctl
	.type _dl_sysctl,@@function
_dl_sysctl:
	mov	$SYS___sysctl, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_getdirentries
	.type _dl_getdirentries,@@function
_dl_getdirentries:
	mov	$SYS_getdirentries, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret
d123 1
a123 1
1:
@


1.7
log
@changes to ld.so to be compatible with newer binutils, requires
slight changes in the startup code on most archs. ok art@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.6 2003/06/03 01:35:30 drahn Exp $ */
d31 1
a31 1
#define DL_DATA_SIZE      (16*4)
@


1.6
log
@kill clause 3 and 4 from several of my copyrights, cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.5 2003/05/30 01:13:53 drahn Exp $ */
d18 1
a18 1
 * WsdfARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
d43 1
d71 1
a71 1
	addl	$4*4,%esp			# pop args
@


1.5
log
@When loading a shared object or libraries dependant object, load them
in random order. This will reduce the possiblity of a buffer overflow
being able to predict the addresss of useful code. Can be disabled
with the LD_NORANDOM environment variable for debugging purposes.
ok deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.4 2003/02/02 16:57:58 deraadt Exp $ */
d5 1
a14 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Dale Rahn.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@knf & ansi; drahn ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.3 2002/12/18 19:20:02 drahn Exp $ */
d209 10
@


1.3
log
@Prepare for an upcoming ELF executable change. This will allow ld.so to
protect the GOT and PLT sections of the executable from being overwritten.
This behavior is enabled by changes in the executable/shared object layout,
and does not occur without the ld changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.2 2002/10/21 16:01:55 drahn Exp $ */
d269 1
a269 1
 
d275 1
a275 1
 
@


1.2
log
@Simplify the ld.so asm api, the data is available other ways.
tested by naddy@@ and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.1 2002/08/23 23:02:48 drahn Exp $ */
d226 25
@


1.1
log
@Support for i386 ELF. Not an indication that the change is going to be made,
just so that these files are maintained in the tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.5 2002/07/07 08:54:50 jufi Exp $ */
a51 3
	pushl	$0			# dynp
	pushl	$0			# push dummy for loff

d56 1
a56 1
	call	_dl_boot_bind@@PLT	# _dl_boot_bind(sp,loff,dl_data)
d75 1
a75 1
	addl	$4*6,%esp			# pop args
@

