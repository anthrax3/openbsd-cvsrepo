head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.2
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.24
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.20
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.18
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.16
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.14
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.12
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.20
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.19;
commitid	veGB6uLWx3BTEAfk;

1.19
date	2017.01.20.10.40.30;	author guenther;	state Exp;
branches;
next	1.18;
commitid	uAlj3GUarQrChIDM;

1.18
date	2017.01.09.22.51.04;	author kettenis;	state Exp;
branches;
next	1.17;
commitid	8mveS1UjNqlN99uR;

1.17
date	2015.12.06.23.36.12;	author guenther;	state Exp;
branches;
next	1.16;
commitid	g8Z7pgqt28AVPEBX;

1.16
date	2014.12.27.13.13.25;	author kettenis;	state Exp;
branches;
next	1.15;
commitid	a1FfQ1Gq2ABF0Pqw;

1.15
date	2014.11.03.17.50.56;	author guenther;	state Exp;
branches;
next	1.14;
commitid	FlXbNaFQfyra9gBu;

1.14
date	2014.04.16.10.52.58;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2010.01.02.12.16.35;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.24.20.16.12;	author drahn;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.09.21.01.10;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.09.16.10.03;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.15.22.43.06;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.25.10.39.52;	author pefo;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.12.01.05.23;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.24.03.44.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.21.23.17.53;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.30;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.08.06.52.32;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.31.13.26.09;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.14.22.18.20;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.20
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@/*	$OpenBSD: archdep.h,v 1.19 2017/01/20 10:40:30 guenther Exp $ */

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _ALPHA_ARCHDEP_H_
#define _ALPHA_ARCHDEP_H_

#define	RELOC_TAG	DT_RELA

#define	MACHID	EM_ALPHA_EXP	/* ELF e_machine ID value checked */

#include <elf_abi.h>
#include <machine/reloc.h>
#include "syscall.h"
#include "util.h"

static inline void
RELOC_DYN(Elf64_Rela *r, const Elf64_Sym *s, Elf64_Addr *p, unsigned long v)
{
	if (ELF64_R_TYPE(r->r_info) == RELOC_RELATIVE) {
		/* handled by _reloc_alpha_got */
	} else if (ELF64_R_TYPE(r->r_info) == RELOC_NONE) {
		/* nothing to do */
	} else if (ELF64_R_TYPE(r->r_info) == RELOC_JMP_SLOT) {
		Elf64_Addr val = v + s->st_value + r->r_addend -
			(Elf64_Addr)(p);
		*p = val;
		__asm volatile("imb" : : : "memory");
	} else if (ELF64_R_TYPE(r->r_info) == RELOC_GLOB_DAT) {
		*p = v + s->st_value + r->r_addend;
	} else {
		_dl_exit(6);
	}
}

#define RELOC_GOT(obj, offs)

#endif /* _ALPHA_ARCHDEP_H_ */
@


1.19
log
@Delete ancient macros and unnecessary #includes

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.18 2017/01/09 22:51:04 kettenis Exp $ */
a55 1
		_dl_printf("unknown bootstrap relocation\n");
@


1.18
log
@Remove dependency on __got_{start,end} symbols and look at PT_GNU_RELRO
instead.  Result in a few more pages that aren't writable on some platforms
(such as hppa).  Based on an initial diff from guenther@@.

Thanks to deraadt@@ for testing.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.17 2015/12/06 23:36:12 guenther Exp $ */
a33 2
#define	DL_MALLOC_ALIGN	8	/* Arch constraint or otherwise */

a34 3

#define	RELTYPE	Elf64_Rela
#define	RELSIZE	sizeof(Elf64_Rela)
@


1.17
log
@Simplify the relocation code for the ld.so bootstrap and static pie: track
just the dynamic tags are needed instead of reusing the generic elf_object_t
structure.

testing and feedback from miod@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.16 2014/12/27 13:13:25 kettenis Exp $ */
a66 2

#define GOT_PERMS PROT_READ
@


1.16
log
@Make ld.so process only R_ALPHA_RELATIVE relocations during early GOT
relocation in _reloc_alpha_got(), and teach RELOC_RELA() to skip R_ALPHA_NONE
relocations (which are just nops used to fill out the relocation table).
Handling R_ALPHA_NONE relocations will be necessary for static PIE support
and it is not inconceivable that ld.so will end up with such relocations
at some point.

ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.15 2014/11/03 17:50:56 guenther Exp $ */
d32 2
d47 1
a47 9
RELOC_REL(Elf64_Rel *r, const Elf64_Sym *s, Elf64_Addr *p, unsigned long v)
{
	/* Alpha does not use REL type relocations */
	_dl_exit(20);
}

static inline void
RELOC_RELA(Elf64_Rela *r, const Elf64_Sym *s, Elf64_Addr *p, unsigned long v,
    Elf_Addr *pltgot)
@


1.15
log
@Eliminate RTLD_PROTECT_PLT: ld.so is built with -Bsymbolic so the
PLT is empty/unused.  On at least macppc and sparc64, ld.so's attempt
to mprotect its PLT could instead hit its own allocated data and
cause a segfault shortly there after.

While here, take a shot at preventing the same issue with the GOT
by checking for __got_start != __got_end.

reproduction *with ktracing* by afresh1@@ provided the key data
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.14 2014/04/16 10:52:58 guenther Exp $ */
d57 2
@


1.14
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.13 2010/01/02 12:16:35 kettenis Exp $ */
a42 2

#define RTLD_PROTECT_PLT
@


1.13
log
@Fix handling of hppa RELOC_IPLT relocations during 'bootstrap relocation'.

ok miod@@, deraadt@@, jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.12 2004/05/24 20:16:12 drahn Exp $ */
d63 1
a63 1
		__asm __volatile("imb" : : : "memory");
@


1.12
log
@Change define used to deal with PLT protection, use postive logic not negative.
ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.11 2003/07/09 21:01:10 drahn Exp $ */
d54 2
a55 1
RELOC_RELA(Elf64_Rela *r, const Elf64_Sym *s, Elf64_Addr *p, unsigned long v)
@


1.11
log
@changes to ld.so to be compatible with newer binutils, requires
slight changes in the startup code on most archs. ok art@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.10 2003/06/09 16:10:03 deraadt Exp $ */
d43 2
@


1.10
log
@pefo 3/4 licence cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.9 2003/02/15 22:43:06 drahn Exp $ */
a53 2
	extern Elf_Addr  _GLOBAL_OFFSET_TABLE_[];

d55 1
a55 3
		if ((caddr_t)p < (caddr_t)_GLOBAL_OFFSET_TABLE_ ||
		    (caddr_t)p >= (caddr_t)&_DYNAMIC)
			*p += (Elf_Addr)v;
@


1.9
log
@After relocation is completed, remove write protection from GOT/PLT in ld.so.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.8 2002/10/25 10:39:52 pefo Exp $ */
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.8
log
@Some small fixes in MI code for mips backport. A new reloc md function,
RELOC_GOT, was added to handle mips got bootstrap reloc.

Also remove workaround used on previous versions of binutils for mips.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.7 2002/08/12 01:05:23 drahn Exp $ */
d80 2
@


1.7
log
@Add support for REL type relocations, all currently supported arch
use only RELA type relocations, but that could change. ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.6 2002/05/24 03:44:37 deraadt Exp $ */
d78 2
@


1.6
log
@various KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.5 2002/02/21 23:17:53 drahn Exp $ */
d49 7
@


1.5
log
@cleanup of MD/MI ld.so (elf), most changes by art@@ cleanup by me.
tested on alpha sparc64 powerpc.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.4 2002/02/16 21:27:30 millert Exp $ */
d5 1
a5 1
 * 
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.3 2001/06/08 06:52:32 art Exp $ */
d47 2
a48 80

int	_dl_write(int, const char *, int);

/*
 *	The following functions are declared inline so they can
 *	be used before bootstrap linking has been finished.
 */
static inline void
_dl_wrstderr(const char *s)
{
	while(*s) {
		_dl_write(2, s, 1);
		s++;
	}
}

static inline void *
_dl_memset(void *p, const char v, size_t c)
{
	char *ip = p;

	while(c--)
		*ip++ = v;
	return(p);
}

static inline int
_dl_strlen(const char *p)
{
	const char *s = p;

	while(*s != '\0')
		s++;
	return(s - p);
}

static inline char *
_dl_strcpy(char *d, const char *s)
{
	char *rd = d;

	while((*d++ = *s++) != '\0');

	return(rd);
}

static inline int
_dl_strncmp(const char *d, const char *s, int c)
{
	while(c-- && *d && *d == *s) {
		d++;
		s++;
	};
	if(c < 0) {
		return(0);
	}
	return(*d - *s);
}
 
static inline int
_dl_strcmp(const char *d, const char *s)
{
	while(*d && *d == *s) {
		d++;
		s++;
	}
	return(*d - *s);
}
 
static inline const char *
_dl_strchr(const char *p, const int c)
{
	while(*p) {
		if(*p == c) {
			return(p);
		}
		p++;
	}
	return(0);
}
@


1.3
log
@Cleanup.
exit when the bootstrap relocation fails.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.2 2001/05/31 13:26:09 art Exp $ */
d48 1
a48 1
int	_dl_write __P((int, const char *, int));
@


1.2
log
@Correctly implement most linking for alpha.
Remove a lot of code copied from powerpc.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.1 2001/05/14 22:18:20 niklas Exp $ */
d133 1
a133 1
	if(ELF64_R_TYPE(r->r_info) == RELOC_RELATIVE) {
d137 1
a137 1
	} else if(ELF64_R_TYPE(r->r_info) == RELOC_JMP_SLOT) {
d142 1
a142 1
	} else if(ELF64_R_TYPE(r->r_info) == RELOC_GLOB_DAT) {
d146 1
@


1.1
log
@Commit initial alpha bits, to facilitate in-tree dev.
This code is not yet working.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.3 2000/10/19 02:44:16 drahn Exp $ */
a54 5
_dl_dcbf(Elf64_Addr *addr)
{
}

static inline void
d129 1
a129 2
RELOC_RELA(Elf64_Rela *r,
	const Elf64_Sym *s, Elf64_Addr *p, int v)
d131 15
a145 25
	if(ELF64_R_TYPE((r)->r_info) == RELOC_RELATIVE) {
		if((ELF64_ST_BIND((s)->st_info) == STB_LOCAL) &&
		   ((ELF64_ST_TYPE((s)->st_info) == STT_SECTION) ||
		   (ELF64_ST_TYPE((s)->st_info) == STT_NOTYPE)) ) {
			*(p) = (v) + (r)->r_addend;
		} else {
			*(p) = (v) + (s)->st_value + (r)->r_addend;
		}
	} else if(ELF64_R_TYPE((r)->r_info) == RELOC_JMP_SLOT) {
		Elf64_Addr val = (v) + (s)->st_value + (r)->r_addend -
			(Elf64_Addr)(p); 			
		if (((val & 0xfe000000) != 0) &&	
			((val & 0xfe000000) != 0xfe000000))
		{					
			/* invalid offset */	
			_dl_exit(20);			
		} 				
		val &= ~0xfc000000;	
		val |=  0x48000000;
		*(p) = val;	
		_dl_dcbf(p);
	} else if(ELF64_R_TYPE((r)->r_info) == RELOC_GLOB_DAT) {
		*(p) = (v) + (s)->st_value + (r)->r_addend;
	} else {					
		/* error */
@

