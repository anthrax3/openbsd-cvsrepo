head	1.29;
access;
symbols
	OPENBSD_6_2:1.29.0.4
	OPENBSD_6_2_BASE:1.29
	OPENBSD_6_1:1.26.0.4
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@# @;


1.29
date	2017.08.28.14.12.09;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	5Qs5z8p4XnR5pAIq;

1.28
date	2017.08.27.21.59.52;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	VUjW1bPAOMU4NF33;

1.27
date	2017.08.15.00.26.02;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	4VEwOglsh9fk7Gg8;

1.26
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.25;
commitid	veGB6uLWx3BTEAfk;

1.25
date	2016.08.28.06.15.32;	author guenther;	state Exp;
branches;
next	1.24;
commitid	Y7AbrDd15D7CrGY4;

1.24
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.23;
commitid	d9R7VGw9CHTkwXE1;

1.23
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.22;
commitid	hneUpr7ZOJCeNeHP;

1.22
date	2016.03.21.01.32.48;	author guenther;	state Exp;
branches;
next	1.21;
commitid	7Tp2uEssgeiK9f77;

1.21
date	2015.11.15.03.41.24;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	kmpP8aoRsEOyxUMj;

1.20
date	2015.09.19.20.56.47;	author guenther;	state Exp;
branches;
next	1.19;
commitid	FcRQ6g8MqXiORdFs;

1.19
date	2015.09.13.17.08.03;	author guenther;	state Exp;
branches;
next	1.18;
commitid	BssYI6s6zozAyfkk;

1.18
date	2014.07.14.03.54.50;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	fsr4AzfIP3TLhLM2;

1.17
date	2014.07.09.12.51.20;	author guenther;	state Exp;
branches;
next	1.16;
commitid	l16v8zUGQ3906m8T;

1.16
date	2014.07.09.07.05.48;	author guenther;	state Exp;
branches;
next	1.15;
commitid	iXfQaSH5pwdyGEAA;

1.15
date	2014.07.06.07.28.36;	author otto;	state Exp;
branches;
next	1.14;
commitid	vlK4cqSehsiJVTpr;

1.14
date	2013.12.23.22.13.03;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2013.08.13.05.52.18;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2013.06.01.09.57.58;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.24.03.26.56;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.22.21.14.59;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.23.21.41.19;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.11.16.27.14;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.03.16.10.52;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.04.03.59.24;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.25.15.56.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.23.20.52.04;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.10.16.59.08;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.10.14.18.14;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.29
log
@whitespace
@
text
@/*	$OpenBSD: ldasm.S,v 1.28 2017/08/27 21:59:52 deraadt Exp $	*/

/*
 * Copyright (c) 2002,2004 Dale Rahn
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */


#define DL_DATA_SIZE	(16*8)	 /* 16 * sizeof(ELF_Addr) */
#define DL_LOFF_OFFSET	(7*8)	/* index 7 */
#include <machine/asm.h>

	.text
	.align	16,0xcc
	.globl	_dl_start
	.type	_dl_start,@@function
_dl_start:
	movq	%rsp, %r12		# save stack pointer for _rtld

	subq	$8, %rsp		# align stack
	andq	$~15, %rsp
	addq	$8, %rsp

	pushq	%rbx			# save ps_strings
	subq	$DL_DATA_SIZE, %rsp	# allocate dl_data

	leaq	_DYNAMIC(%rip),%rdx	# &_DYNAMIC
	movq	%rsp, %rsi		# dl_data for dl_boot_bind
	movq	%r12, %rdi		# load saved SP for dl_boot_bind
	call	_dl_boot_bind@@PLT	# _dl_boot_bind(sp,dl_data,dynamicp)

	movq	%rsp, %rcx		# dl_data
	movq	DL_LOFF_OFFSET(%rsp), %rdx		# loff from dl_data

	movq	(%r12), %rdi
	leaq	16(%r12,%rdi,8), %rsi	# envp
	movq	%r12, %rdi
	addq	$8,%rdi			# argv
	call	_dl_boot@@PLT		# _dl_boot(argv,envp,loff,dl_data)

	addq	$DL_DATA_SIZE,%rsp	# return dl_data

	leaq	_dl_dtors(%rip), %rdx	# %rdx = cleanup
	movq	%r12, %rsp
	jmp	*%rax

	.align 16,0xcc
	.global _dl_bind_start
	.type _dl_bind_start,@@function
_dl_bind_start:
	.cfi_startproc
	.cfi_adjust_cfa_offset	16
	pushfq				# save registers
	.cfi_adjust_cfa_offset	8
	/*.cfi_offset	%rflags, -16 */
	pushq	%rax
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%rax, -24
	pushq	%rcx
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%rcx, -32
	pushq	%rdx
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%rdx, -40
	pushq	%rsi
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%rsi, -48
	pushq	%rdi
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%rdi, -56
	pushq	%r8
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%r8, -64
	pushq	%r9
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%r9, -72
	pushq	%r10
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%r10, -80
	pushq	%r11
	.cfi_adjust_cfa_offset	8
	.cfi_offset	%r11, -88

	movq	80(%rsp), %rdi		# Copy of reloff
	movq	88(%rsp), %rsi		# Copy of obj
	call	_dl_bind@@PLT		# Call the binder
	movq	%rax,88(%rsp)		# Store function to be called in obj

	popq	%r11			# restore registers
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%r11
	popq	%r10
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%r10
	popq	%r9
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%r9
	popq	%r8
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%r8
	popq	%rdi
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%rdi
	popq	%rsi
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%rsi
	popq	%rdx
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%rdx
	popq	%rcx
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%rcx
	popq	%rax
	.cfi_adjust_cfa_offset	-8
	.cfi_restore	%rax
	popfq
	.cfi_adjust_cfa_offset	-8
	/*.cfi_restore	%rflags */

	leaq	8(%rsp),%rsp		# Discard reloff, do not change eflags
	.cfi_adjust_cfa_offset	-8
	ret
	.cfi_endproc
@


1.28
log
@Replace heaps of hand-written syscall stubs with a simpler framework
which is largely MI.
ok visa kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.27 2017/08/15 00:26:02 deraadt Exp $	*/
d45 1
a45 1
	
@


1.27
log
@Align text locations to 16 (instead of 4) to match modern recommendations
(generally associated with hardwired BTC limitations).  And then fill
those alignments with 0xcc (int 3) to match our trapsled model.  Resulting
binaries show no sequential nop's.
ok mlarkin kettenis mortimer
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.26 2017/01/24 07:48:37 guenther Exp $	*/
a32 1
#include <sys/syscall.h>
a68 42
	.section	".text"

#define	DL_SYSCALL(n) DL_SYSCALL2(n,n)
#define	DL_SYSCALL2(n,c) \
	.global	__CONCAT(_dl_,n)		;\
	.type	__CONCAT(_dl_,n), @@function	;\
	.align	16,0xcc				;\
__CONCAT(_dl_,n):				;\
	movl	$(__CONCAT(SYS_,c)), %eax	;\
	movq	%rcx, %r10			;\
	syscall					;\
	jb	1f				;\
	ret

DL_SYSCALL(open)
DL_SYSCALL(fstat)
DL_SYSCALL(read)
DL_SYSCALL(write)
DL_SYSCALL(close)
DL_SYSCALL(issetugid)
DL_SYSCALL(getthrid)
DL_SYSCALL(getdents)
DL_SYSCALL(mprotect)
DL_SYSCALL(munmap)
DL_SYSCALL(exit)
DL_SYSCALL(readlink)
DL_SYSCALL(utrace)
DL_SYSCALL(getentropy)
DL_SYSCALL(sendsyslog)
DL_SYSCALL(pledge)
DL_SYSCALL2(getcwd,__getcwd)
DL_SYSCALL2(set_tcb,__set_tcb)
DL_SYSCALL2(_syscall,__syscall)
DL_SYSCALL(sysctl)
DL_SYSCALL(thrkill)

1:
	/* error: result = -errno; - handled here. */
	neg	%rax
	ret


a145 1

@


1.26
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.25 2016/08/28 06:15:32 guenther Exp $	*/
d37 1
a37 1
	.align	4
d76 1
a76 1
	.align	4				;\
d112 1
a112 1
	.align 4
@


1.25
log
@ld.so doesn't need gettimeofday or lstat stubs any more

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.24 2016/05/07 19:05:23 guenther Exp $	*/
d104 1
@


1.24
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.23 2016/03/21 22:41:29 bluhm Exp $	*/
a93 1
DL_SYSCALL(gettimeofday)
a95 1
DL_SYSCALL(lstat)
@


1.23
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.22 2016/03/21 01:32:48 guenther Exp $	*/
d90 1
@


1.22
log
@Switch ld.so's stack smash handler from sendsyslog to sendsyslog2
and pass the LOG_CONS flag like libc's handler.

ok deraadt@@ bluhm@@ (who had a similar diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.21 2015/11/15 03:41:24 deraadt Exp $	*/
d99 1
a99 1
DL_SYSCALL(sendsyslog2)
@


1.21
log
@ldd(1) sets environment variable LD_TRACE_LOADED_OBJECTS to tell ld.so
that it should show information about the program it loads, rather than
run it.  In that specific case, ld.so can pledge to "stdio rpath" to
ensure that code path in ld.so has no bugs.
Yes, a pledge in ld.so.... who'd have thought!
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.20 2015/09/19 20:56:47 guenther Exp $	*/
d99 1
a99 1
DL_SYSCALL(sendsyslog)
@


1.20
log
@kbind has eliminated the need for and use of the bind lock.  Delete it, the
the callback, and the sigprocmask stub.
Keep around the DL_SETBINDLCK case until libpthread stops using it.

discussed with miod@@ at l2k15
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.19 2015/09/13 17:08:03 guenther Exp $	*/
d100 1
@


1.19
log
@Rename __sysctl syscall to just sysctl, as the userland wrapper is no longer
necessary

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.18 2014/07/14 03:54:50 deraadt Exp $	*/
a109 17

	/* _dl_sigprocmask: does not handle NULL new set */

	.align 4
	.global _dl_sigprocmask
	.type _dl_sigprocmask,@@function
_dl_sigprocmask:
	movl	(%rsi),%esi		# fetch indirect...
	movl	$SYS_sigprocmask, %eax
	movq	%rcx, %r10
	syscall
	jc	1b		 /* error: result = -errno */
	testq	%rdx,%rdx		# test if old mask requested
	jz	2f
	movl	%eax,(%rdx)		# store old mask
	xorq	%rax,%rax
2:	ret
@


1.18
log
@Now that we have sendsyslog(2), we can directly use it in the
(previously completely retarded) stack_smash_handler of ld.so
ok beck miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.17 2014/07/09 12:51:20 guenther Exp $	*/
d103 1
a103 1
DL_SYSCALL2(sysctl,__sysctl)
@


1.17
log
@_dl_fcntl() is no longer used; kill the stubs

ok otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.16 2014/07/09 07:05:48 guenther Exp $	*/
d99 1
@


1.16
log
@Fix backtraces through _dl_bind_start by adding dwarf annotations for
the stack adjustments/handling in the asm.  Based on FreeBSD.

ok kettenis@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.15 2014/07/06 07:28:36 otto Exp $	*/
a84 1
DL_SYSCALL(fcntl)
@


1.15
log
@move from sysclt(KERN_ARND) to getentropy(2); ok miod@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.14 2013/12/23 22:13:03 kettenis Exp $	*/
d101 1
d132 2
d135 2
d138 2
d141 2
d144 2
d147 2
d150 2
d153 2
d156 2
d159 2
d162 2
d171 2
d174 2
d177 2
d180 2
d183 2
d186 2
d189 2
d192 2
d195 2
d198 2
d202 1
d204 1
@


1.14
log
@Make ld.so pass its cleanup handler in %rdx as required by the AMD64 System V
ABI, and stop calling atexit(4) directly from ld.so on amd64.  Note that this
means that binaries built before the middle of november may no longer call
destructors in shared libraries implemented in C++.  Update your packages!

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.13 2013/08/13 05:52:18 guenther Exp $	*/
d99 1
@


1.13
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.12 2013/06/01 09:57:58 miod Exp $	*/
d66 1
a66 3
#	popq	%rbx			# %rbx = ps_strings - XXXDSR
#	popq	%rcx			# %rcx = obj_main - XXXDSR
	movq	$0, %rdx		# %rdx = cleanup - XXXDSR
@


1.12
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.11 2013/04/05 12:58:03 kurt Exp $	*/
d93 1
a93 1
DL_SYSCALL(getdirentries)
@


1.11
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.10 2012/10/24 03:26:56 guenther Exp $	*/
d100 1
@


1.10
log
@Garbage-collect the _dl_stat() routine, now unused

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.9 2012/10/22 21:14:59 kettenis Exp $	*/
d98 3
@


1.9
log
@Zero %rdx before transferring control to the main program, to indicate that
the main program should not register a cleanup handler with atexit(3).
This will allow us to add the cleanup handler registration code to crt0.c
and have ld.so pass its cleanup handler to the main program in the future.

ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.8 2011/07/23 21:41:19 kettenis Exp $	*/
a88 1
DL_SYSCALL(stat)
@


1.8
log
@Properly align the stack early on in the ld.so startup code such that code run
from .init that uses SSE doesn't randomly trigger SIGBUS.

ok drahn@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.7 2010/05/11 16:27:14 guenther Exp $	*/
a66 1
#	popq	%rdx			# %rdx = cleanup - XXXDSR
d68 1
@


1.7
log
@Correct the _dl_sigprocmask() stub to take and store signal masks
as 32bit values instead of 64bit values, synchronizing it with the
libc stub.  gcc4 apparently packs the stack in _dl_bind() more
tightly, so this was resulting in the saved rbx register being
overwriten.

ok drahn@@, marco@@, NicM@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.6 2006/05/03 16:10:52 drahn Exp $	*/
d42 5
@


1.6
log
@prebind - how to prelink a binary without throwing security out the window

Prelink fixes the address of libraries making 'return to libc' attacks trival,
prebind uses a different method to achieve most of the same gains, however
without adding any security conerns.

Still under development, now in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.5 2005/05/04 03:59:24 drahn Exp $	*/
d109 1
a109 1
	movq	(%rsi),%rsi		# fetch indirect...
d116 1
a116 1
	movq	%rax,(%rdx)		# store old mask
@


1.5
log
@%rsi is not callee save, use source register that is saved across call
This also allows propolice to be enabled in ld.so for amd64
ok marco@@ weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.4 2004/05/25 15:56:18 deraadt Exp $	*/
d92 1
@


1.4
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.3 2004/02/23 20:52:04 deraadt Exp $	*/
d50 2
a51 2
	movq	%rsi, %rcx		# dl_data
	movq	DL_LOFF_OFFSET(%rsi), %rdx		# loff from dl_data
@


1.3
log
@pretty
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.2 2004/02/10 16:59:08 drahn Exp $	*/
d71 1
a71 1
	.global	__CONCAT(_dl_,n) 		;\
@


1.2
log
@Make this work. will figure out what this should be later.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.1 2004/02/10 14:18:14 drahn Exp $	*/
d37 3
a39 3
	.align  4
	.globl  _dl_start
	.type   _dl_start,@@function
d53 2
a54 2
        movq    (%r12), %rdi
	leaq    16(%r12,%rdi,8), %rsi	# envp
d108 1
a108 1
	movq    (%rsi),%rsi		# fetch indirect  ...
d124 9
a132 9
	pushq   %rax
	pushq   %rcx
	pushq   %rdx
	pushq   %rsi
	pushq   %rdi
	pushq   %r8
	pushq   %r9
	pushq   %r10
	pushq   %r11
d136 2
a137 2
	call    _dl_bind@@PLT		# Call the binder
	movq    %rax,88(%rsp)		# Store function to be called in obj
d150 1
a150 1
	leaq    8(%rsp),%rsp		# Discard reloff, do not change eflags
@


1.1
log
@AMD64 dynamic linker. initial work by mickey finished up by myself.
lazy binding not working yet. problem exists with gcc and -fpic jump tables.
ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 4
a64 3
	popq	%rbx			# %rbx = ps_strings - XXXDSR
	popq	%rdx			# %rdx = cleanup - XXXDSR
	popq	%rcx			# %rcx = obj_main - XXXDSR
@

