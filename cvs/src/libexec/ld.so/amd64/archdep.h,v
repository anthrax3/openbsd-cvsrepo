head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.2
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2017.01.21.01.15.00;	author guenther;	state Exp;
branches;
next	1.10;
commitid	QprHiuRGEnP0ckD2;

1.10
date	2017.01.20.10.40.30;	author guenther;	state Exp;
branches;
next	1.9;
commitid	uAlj3GUarQrChIDM;

1.9
date	2017.01.09.22.51.04;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	8mveS1UjNqlN99uR;

1.8
date	2016.05.18.20.40.20;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	2B3GUZfTLbygCJRi;

1.7
date	2015.12.06.23.36.12;	author guenther;	state Exp;
branches;
next	1.6;
commitid	g8Z7pgqt28AVPEBX;

1.6
date	2014.12.22.03.51.08;	author kurt;	state Exp;
branches;
next	1.5;
commitid	IDpxsqs0vh0PbV5Z;

1.5
date	2014.01.19.10.25.45;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.02.12.16.35;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.24.20.16.12;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.27.17.36.15;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.10.14.18.14;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.11
log
@_dl_exit() is __dead, so it should return void.
Move _dl_mmap() and _dl_mquery() inlines from archdep.h to syscall.h and
remove pointless casts and unnecessary parens.

ok kettenis@@
@
text
@/*	$OpenBSD: archdep.h,v 1.10 2017/01/20 10:40:30 guenther Exp $	*/

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _X86_64_ARCHDEP_H_
#define _X86_64_ARCHDEP_H_

#define	RELOC_TAG	DT_RELA

#define	MACHID	EM_AMD64	/* ELF e_machine ID value checked */

#include <elf_abi.h>
#include <machine/reloc.h>
#include "syscall.h"
#include "util.h"


static inline void
RELOC_DYN(Elf64_Rela *r, const Elf64_Sym *s, Elf64_Addr *p, unsigned long v)
{
	if (ELF64_R_TYPE(r->r_info) == R_X86_64_RELATIVE) {
		*p = v + r->r_addend;
	} else if (ELF64_R_TYPE(r->r_info) == R_X86_64_GLOB_DAT) {
		*p = v + s->st_value + r->r_addend;
	} else if (ELF64_R_TYPE(r->r_info) == R_X86_64_64) {
		*p = v + s->st_value + r->r_addend;
	} else {
		_dl_exit(6);
	}
}

#define RELOC_GOT(obj, offs)

#endif /* _X86_64_ARCHDEP_H_ */
@


1.10
log
@Delete ancient macros and unnecessary #includes

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.9 2017/01/09 22:51:04 kettenis Exp $	*/
a39 7

static inline void *
_dl_mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset)
{
	return((void *)_dl__syscall((quad_t)SYS_mmap, addr, len, prot,
	    flags, fd, 0, offset));
}
@


1.9
log
@Remove dependency on __got_{start,end} symbols and look at PT_GNU_RELRO
instead.  Result in a few more pages that aren't writable on some platforms
(such as hppa).  Based on an initial diff from guenther@@.

Thanks to deraadt@@ for testing.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.8 2016/05/18 20:40:20 deraadt Exp $	*/
a33 2
#define	DL_MALLOC_ALIGN	8	/* Arch constraint or otherwise */

a35 4
#define	RELTYPE	Elf32_Rela
#define	RELSIZE	sizeof(Elf32_Rela)

#include <sys/mman.h>
@


1.8
log
@fix types for mmap wrappers.  A few whitespace cleanups snuck in.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.7 2015/12/06 23:36:12 guenther Exp $	*/
a69 2

#define GOT_PERMS PROT_READ
@


1.7
log
@Simplify the relocation code for the ld.so bootstrap and static pie: track
just the dynamic tags are needed instead of reusing the generic elf_object_t
structure.

testing and feedback from miod@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.6 2014/12/22 03:51:08 kurt Exp $	*/
d48 1
a48 2
_dl_mmap(void *addr, unsigned int len, unsigned int prot,
	unsigned int flags, int fd, off_t offset)
d51 1
a51 1
		flags, fd, 0, offset));
@


1.6
log
@Introduce new csu0 variant for -static -pie binaries to use called
rcsu0.o where the initial 'r' is for relocatable. rcsu0.o performs
self-relocation on static pie binaries by calling a slightly modified
copy of ld.so's _dl_boot_bind() in boot.h.

The first arch implementatation is also included for amd64 where
__start calls _dl_boot_bind() and then calls ___start(). Includes
parts from kettenis@@ to help get R_X86_64_64 relocations working
and proper handling for undefined weak symbols.

This is the first part of several to get static pie self-relocating
binaries working. binutils, gcc and kernel changes are forthcoming
to complete the solution, then per-arch implementations are needed
for MD_RCRT0_START in csu.

okay kettenis@@ pascal@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.5 2014/01/19 10:25:45 guenther Exp $	*/
d32 2
d57 1
a57 8
RELOC_REL(Elf64_Rel *r, const Elf64_Sym *s, Elf64_Addr *p, unsigned long v)
{
	/* AMD64 is a rela architecture */
}

static inline void
RELOC_RELA(Elf64_Rela *r, const Elf64_Sym *s, Elf64_Addr *p, unsigned long v,
    Elf_Addr *pltgot)
@


1.5
log
@Only i386 needs mquery; delete the static inlines from amd64 and hppa
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.4 2010/01/02 12:16:35 kettenis Exp $	*/
d68 2
a70 1
		_dl_printf("unknown bootstrap relocation\n");
@


1.4
log
@Fix handling of hppa RELOC_IPLT relocations during 'bootstrap relocation'.

ok miod@@, deraadt@@, jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.3 2004/05/24 20:16:12 drahn Exp $	*/
a49 8
		flags, fd, 0, offset));
}

static inline void *
_dl_mquery(void *addr, unsigned int len, unsigned int prot,
	unsigned int flags, int fd, off_t offset)
{
	return((void *)_dl__syscall((quad_t)SYS_mquery, addr, len, prot,
@


1.3
log
@Change define used to deal with PLT protection, use postive logic not negative.
ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.2 2004/02/27 17:36:15 deraadt Exp $	*/
d69 2
a70 1
RELOC_RELA(Elf64_Rela *r, const Elf64_Sym *s, Elf64_Addr *p, unsigned long v)
@


1.2
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.1 2004/02/10 14:18:14 drahn Exp $	*/
a43 2

#define RTLD_TEXT_PLT
@


1.1
log
@AMD64 dynamic linker. initial work by mickey finished up by myself.
lazy binding not working yet. problem exists with gcc and -fpic jump tables.
ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
#define	MACHID	EM_X86_64	/* ELF e_machine ID value checked */
@

