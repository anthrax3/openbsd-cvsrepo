head	1.30;
access;
symbols
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.26.0.10
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.6
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.8
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.22.0.2
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.21.0.14
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.12
	OPENBSD_5_0:1.21.0.10
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.8
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.6
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.20.0.10
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.8
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.6
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.4
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.8
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.6
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.4
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.2
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.30
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.29;
commitid	veGB6uLWx3BTEAfk;

1.29
date	2017.01.23.11.04.19;	author guenther;	state Exp;
branches;
next	1.28;
commitid	S5tuIs7J9J3pZIQB;

1.28
date	2016.08.27.03.52.25;	author guenther;	state Exp;
branches;
next	1.27;
commitid	aCdjWVtN0XBFFloU;

1.27
date	2016.08.12.20.39.01;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	9Gsc7gGSE2YeEbd8;

1.26
date	2014.06.21.08.00.23;	author otto;	state Exp;
branches;
next	1.25;
commitid	wh9FTpEgwThWVeqE;

1.25
date	2014.01.23.01.07.45;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2013.11.27.21.25.04;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.22;

1.22
date	2012.08.07.17.47.06;	author matthew;	state Exp;
branches;
next	1.21;

1.21
date	2009.05.18.20.20.01;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.09.14.51.13;	author drahn;	state Exp;
branches;
next	1.19;

1.19
date	2004.10.17.03.56.49;	author drahn;	state Exp;
branches;
next	1.18;

1.18
date	2004.05.25.21.42.47;	author mickey;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.11.14.51.01;	author drahn;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.06.20.03.58;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.11.17.47.57;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.09.16.10.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.30.01.13.53;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.31.15.11.59;	author drahn;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.24.04.11.21;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.24.04.11.10;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.24.04.00.44;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.24.00.13.55;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.23.23.56.31;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.28.00.23.57;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.27.20.07.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.24.18.37.38;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.24.03.44.37;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.09.19.59.47;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.21.23.17.53;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.30
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@/*	$OpenBSD: util.h,v 1.29 2017/01/23 11:04:19 guenther Exp $	*/

/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef __DL_UTIL_H__
#define __DL_UTIL_H__

#include <sys/utsname.h>
#include <stdarg.h>
#include <stddef.h>		/* for NULL */

__BEGIN_HIDDEN_DECLS
void *_dl_malloc(size_t size);
void *_dl_calloc(size_t nmemb, const size_t size);
void *_dl_realloc(void *, size_t size);
void *_dl_reallocarray(void *, size_t nmemb, size_t size);
void _dl_free(void *);
char *_dl_strdup(const char *);
size_t _dl_strlen(const char *);
size_t _dl_strlcat(char *dst, const char *src, size_t siz);
void _dl_printf(const char *fmt, ...);
void _dl_vprintf(const char *fmt, va_list ap);
void _dl_fdprintf(int, const char *fmt, ...);
void _dl_show_objects(void);
void _dl_arc4randombuf(void *, size_t);
u_int32_t _dl_arc4random(void);
ssize_t _dl_write(int fd, const char* buf, size_t len);
char * _dl_dirname(const char *path);
char *_dl_realpath(const char *path, char *resolved);
int _dl_uname(struct utsname *name);

long _dl_strtol(const char *nptr, char **endptr, int base);

__dead void _dl_oom(void);
__dead void _dl_die(const char *, ...) __attribute__((format (printf, 1, 2)));
#define _dl_diedie()	_dl_thrkill(0, 9, NULL)
__END_HIDDEN_DECLS

#define	_dl_round_page(x)	(((x) + (__LDPGSZ - 1)) & ~(__LDPGSZ - 1))

/*
 *	The following functions are declared inline so they can
 *	be used before bootstrap linking has been finished.
 */
static inline void *
_dl_memset(void *dst, const int c, size_t n)
{
	if (n != 0) {
		char *d = dst;

		do
			*d++ = c;
		while (--n != 0);
	}
	return (dst);
}

static inline void
_dl_bcopy(const void *src, void *dest, int size)
{
	unsigned const char *psrc = src;
	unsigned char *pdest = dest;
	int i;

	for (i = 0; i < size; i++)
		pdest[i] = psrc[i];
}

static inline size_t
_dl_strlcpy(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	const char *s = src;
	size_t n = siz;

	/* Copy as many bytes as will fit */
	if (n != 0 && --n != 0) {
		do {
			if ((*d++ = *s++) == 0)
				break;
		} while (--n != 0);
	}

	/* Not enough room in dst, add NUL and traverse rest of src */
	if (n == 0) {
		if (siz != 0)
			*d = '\0';		/* NUL-terminate dst */
		while (*s++)
			;
	}

	return(s - src - 1);	/* count does not include NUL */
}

static inline int
_dl_strncmp(const char *s1, const char *s2, size_t n)
{
	if (n == 0)
		return (0);
	do {
		if (*s1 != *s2++)
			return (*(unsigned char *)s1 - *(unsigned char *)--s2);
		if (*s1++ == 0)
			break;
	} while (--n != 0);
	return (0);
}

static inline int
_dl_strcmp(const char *s1, const char *s2)
{
	while (*s1 == *s2++)
		if (*s1++ == 0)
			return (0);
	return (*(unsigned char *)s1 - *(unsigned char *)--s2);
}

static inline const char *
_dl_strchr(const char *p, const int ch)
{
	for (;; ++p) {
		if (*p == ch)
			return((char *)p);
		if (!*p)
			return((char *)NULL);
	}
	/* NOTREACHED */
}

static inline char *
_dl_strrchr(const char *str, const int ch)
{
	const char *p;
	char *retval = NULL;

	for (p = str; *p != '\0'; ++p)
		if (*p == ch)
			retval = (char *)p;

	return retval;
}

static inline char *
_dl_strstr(const char *s, const char *find)
{
	char c, sc;
	size_t len;
	if ((c = *find++) != 0) {
		len = _dl_strlen(find);
		do {
			do {
				if ((sc = *s++) == 0)
					return (NULL);
			} while (sc != c);
		} while (_dl_strncmp(s, find, len) != 0);
		s--;
	}
	return ((char *)s);
}

static inline int
_dl_isalnum(int c)
{
	return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');
}

#endif /*__DL_UTIL_H__*/
@


1.29
log
@Wrap function declarations with __{BEGIN,END}_HIDDEN_DECLS to reduce
relocations inside ld.so that it has to bootstrap

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.28 2016/08/27 03:52:25 guenther Exp $	*/
d59 4
a70 11
static inline void
_dl_wrstderr(const char *s)
{
	const char *p = s;
	size_t n = 0;

	while (*p++)
		n++;
	_dl_write(2, s, n);
}

@


1.28
log
@Pull in <stddef.h> for NULL
(not stdio, because ld.so has a reduced library behind it)
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.27 2016/08/12 20:39:01 deraadt Exp $	*/
d38 1
d59 1
@


1.27
log
@the slimmed down random functions inside ld.so are strict clones of the
libc arc4random API, so call them _dl_{arc4random,arcrandombuf}
ok tedu guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.26 2014/06/21 08:00:23 otto Exp $	*/
d36 1
@


1.26
log
@Move to a non-zeroing _dl_malloc, a _dl_calloc and _dl_reallocarry and
fix _dl_strdup to return NULL instead of crash; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.25 2014/01/23 01:07:45 deraadt Exp $	*/
d49 2
a50 2
void _dl_randombuf(void *, size_t);
u_int32_t _dl_random(void);
@


1.25
log
@improve some types
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.24 2013/11/27 21:25:04 deraadt Exp $	*/
d37 4
a40 1
void *_dl_malloc(const size_t size);
@


1.24
log
@make the _dl_isalnum() resemble the ctype version
prodding from kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.23 2013/04/05 12:58:03 kurt Exp $	*/
d47 1
a47 1
unsigned int _dl_random(void);
@


1.23
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.22 2012/08/07 17:47:06 matthew Exp $	*/
d189 1
a189 1
_dl_isalnum(const char c)
@


1.22
log
@Factor out a _dl_randombuf() method from _dl_random().
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.21 2009/05/18 20:20:01 deraadt Exp $	*/
d34 1
d40 2
d49 3
a95 10
static inline int
_dl_strlen(const char *str)
{
	const char *s;

	for (s = str; *s; ++s)
		;
	return (s - str);
}

d186 6
@


1.21
log
@make _dl_wrstderr() not call write per-character; ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.20 2007/02/09 14:51:13 drahn Exp $	*/
d43 1
@


1.20
log
@readdir buffers should not get a fixed buffer size, but should be dependant
on the block size of the filesystem. Rounded up to page size for efficiency.
similar to change in libc yesterday. Should fix PR 5364.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.19 2004/10/17 03:56:49 drahn Exp $	*/
d57 6
a62 4
	while (*s) {
		_dl_write(2, s, 1);
		s++;
	}
@


1.19
log
@Fix some problems related to LD_LIBRARY_PATH parsing where it would not
correctly deal with current directory searches specified by "::", ":foo" or
"foo:"
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.18 2004/05/25 21:42:47 mickey Exp $	*/
d47 2
@


1.18
log
@provide one version of _dl_bcopy instead of copy in every arch; drahn@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.17 2003/11/11 14:51:01 drahn Exp $	*/
d154 13
@


1.17
log
@Better fix to the library name parsing. now correctly handles
libpython2.2.so.0.0 vs libpython2.1.so.0.0. Clean up a potential
memory leak if the filename is not a valid library.
ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.16 2003/07/06 20:03:58 deraadt Exp $	*/
a45 2
void _dl_bcopy(const void *src, void *dest, int size);

d72 11
@


1.16
log
@various proto, ansi, and knf repair.  tested on all architectures that
use it. (build may require make cleandir because of .depend balony)
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.15 2003/06/11 17:47:57 deraadt Exp $	*/
d145 18
@


1.15
log
@no more register
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.14 2003/06/09 16:10:03 deraadt Exp $	*/
d33 3
d40 1
d44 5
@


1.14
log
@pefo 3/4 licence cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.13 2003/05/30 01:13:53 drahn Exp $	*/
d58 1
a58 1
		register char *d = dst;
@


1.13
log
@When loading a shared object or libraries dependant object, load them
in random order. This will reduce the possiblity of a buffer overflow
being able to predict the addresss of useful code. Can be disabled
with the LD_NORANDOM environment variable for debugging purposes.
ok deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.12 2002/08/31 15:11:59 drahn Exp $	*/
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.12
log
@argh, include prototype for dl_fdprintf(), missed by myself and reviewers.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.11 2002/07/24 04:11:21 deraadt Exp $	*/
d45 1
@


1.11
log
@use real clones of the libc functions
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.8 2002/07/24 00:13:55 deraadt Exp $	*/
d43 1
@


1.10
log
@ok i found it
@
text
@d59 1
a59 1
_dl_memset(void *p, const int v, size_t c)
d61 2
a62 1
	char *ip = p;
d64 5
a68 3
	while (c--)
		*ip++ = (char)v;
	return(p);
d72 1
a72 1
_dl_strlen(const char *p)
d74 1
a74 1
	const char *s = p;
d76 3
a78 3
	while (*s != '\0')
		s++;
	return(s - p);
d108 1
a108 1
_dl_strncmp(const char *d, const char *s, size_t len)
d110 9
a118 7
	while (len-- && *d && *d == *s) {
		d++;
		s++;
	}
	if (len < 0)
		return(0);
	return(*d - *s);
d122 1
a122 1
_dl_strcmp(const char *d, const char *s)
d124 4
a127 5
	while (*d && *d == *s) {
		d++;
		s++;
	}
	return(*d - *s);
d131 1
a131 1
_dl_strchr(const char *p, const int c)
d133 5
a137 4
	while (*p) {
		if (*p == c)
			return(p);
		p++;
d139 1
a139 1
	return(0);
@


1.9
log
@back out broken stuff until it is fixed
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.6 2002/05/28 00:23:57 deraadt Exp $	*/
d39 1
a39 2
int _dl_write(int, const char *, int);
void *_dl_malloc(const int size);
d59 1
a59 1
_dl_memset(void *p, const char v, size_t c)
d64 1
a64 1
		*ip++ = v;
d79 1
a79 1
_dl_strlcpy(char *dst, const char *src, int siz)
d105 1
a105 1
_dl_strncmp(const char *d, const char *s, int c)
d107 1
a107 1
	while (c-- && *d && *d == *s) {
d111 1
a111 1
	if (c < 0)
@


1.8
log
@make more _dl_*() func params like real ones in libc
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.7 2002/07/23 23:56:31 mickey Exp $	*/
d39 2
a40 1
void *_dl_malloc(const size_t size);
d60 1
a60 1
_dl_memset(void *p, const int v, size_t c)
d65 1
a65 1
		*ip++ = (char)v;
d80 1
a80 1
_dl_strlcpy(char *dst, const char *src, size_t siz)
d106 1
a106 1
_dl_strncmp(const char *d, const char *s, size_t len)
d108 1
a108 1
	while (len-- && *d && *d == *s) {
d112 1
a112 1
	if (len < 0)
@


1.7
log
@match _dl_ syscall prototypes w/ the real syscalls prototypes, including args and return values; art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.6 2002/05/28 00:23:57 deraadt Exp $	*/
d39 1
a39 1
void *_dl_malloc(const int size);
d59 1
a59 1
_dl_memset(void *p, const char v, size_t c)
d64 1
a64 1
		*ip++ = v;
d79 1
a79 1
_dl_strlcpy(char *dst, const char *src, int siz)
d105 1
a105 1
_dl_strncmp(const char *d, const char *s, int c)
d107 1
a107 1
	while (c-- && *d && *d == *s) {
d111 1
a111 1
	if (c < 0)
@


1.6
log
@proto _dl_show_objects() in one place
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.5 2002/05/27 20:07:06 deraadt Exp $	*/
a38 1
int _dl_write(int, const char *, int);
@


1.5
log
@left over __P removals
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.4 2002/05/24 18:37:38 drahn Exp $	*/
d44 1
@


1.4
log
@Change _dl_strcpy() to _dl_strlcpy(), implementation taken from libc.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.3 2002/05/24 03:44:37 deraadt Exp $	*/
d39 1
a39 1
int _dl_write __P((int, const char *, int));
@


1.3
log
@various KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.2 2002/04/09 19:59:47 drahn Exp $	*/
d4 2
d78 2
a79 2
static inline char *
_dl_strcpy(char *d, const char *s)
d81 19
a99 1
	char *rd = d;
d101 1
a101 3
	while ((*d++ = *s++) != '\0')
		;
	return(rd);
@


1.2
log
@Add the Copyrights from the respective files the code came from. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 1
a5 1
 * 
d50 1
a50 1
	while(*s) {
d61 1
a61 1
	while(c--)
d71 1
a71 1
	while(*s != '\0')
d81 2
a82 2
	while((*d++ = *s++) != '\0');

d89 1
a89 1
	while(c-- && *d && *d == *s) {
d92 2
a93 2
	};
	if(c < 0) {
a94 1
	}
d97 1
a97 1
 
d101 1
a101 1
	while(*d && *d == *s) {
d107 1
a107 1
 
d111 2
a112 2
	while(*p) {
		if(*p == c) {
a113 1
		}
@


1.1
log
@cleanup of MD/MI ld.so (elf), most changes by art@@ cleanup by me.
tested on alpha sparc64 powerpc.
@
text
@d1 34
@

