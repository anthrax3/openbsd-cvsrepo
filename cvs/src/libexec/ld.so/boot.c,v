head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.6
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2017.01.09.22.51.04;	author kettenis;	state Exp;
branches;
next	1.14;
commitid	8mveS1UjNqlN99uR;

1.14
date	2016.08.13.20.57.04;	author guenther;	state Exp;
branches;
next	1.13;
commitid	r84pVracdExBH7Ai;

1.13
date	2016.08.09.03.58.35;	author guenther;	state Exp;
branches;
next	1.12;
commitid	3KsTmUfC2TQAqMgb;

1.12
date	2016.08.07.03.05.23;	author guenther;	state Exp;
branches;
next	1.11;
commitid	XoKaUgklLqr4KORR;

1.11
date	2016.08.07.03.03.44;	author guenther;	state Exp;
branches;
next	1.10;
commitid	99RMJw8lQNMjhoft;

1.10
date	2016.08.07.03.01.53;	author guenther;	state Exp;
branches;
next	1.9;
commitid	2iYIwn4jtIofjDNj;

1.9
date	2016.08.07.02.59.27;	author guenther;	state Exp;
branches;
next	1.8;
commitid	nYb0aZY0rlv9o120;

1.8
date	2016.08.07.02.57.19;	author guenther;	state Exp;
branches;
next	1.7;
commitid	X1fMqpFGsY4rfcwF;

1.7
date	2016.07.15.09.25.47;	author guenther;	state Exp;
branches;
next	1.6;
commitid	JjWTrDicGb2HTi6M;

1.6
date	2015.12.06.23.36.12;	author guenther;	state Exp;
branches;
next	1.5;
commitid	g8Z7pgqt28AVPEBX;

1.5
date	2015.01.16.16.18.07;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	31KwZ9PARAKUg1ob;

1.4
date	2014.11.15.02.14.10;	author guenther;	state Exp;
branches;
next	1.3;
commitid	WV8CnZqYWPIGbhzb;

1.3
date	2014.08.19.10.01.50;	author uebayasi;	state Exp;
branches;
next	1.2;
commitid	GzMdjcNfkndv2wR6;

1.2
date	2014.07.06.17.33.10;	author otto;	state Exp;
branches;
next	1.1;
commitid	Todo1ZT3AnVz3T5r;

1.1
date	2014.02.16.01.16.38;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove dependency on __got_{start,end} symbols and look at PT_GNU_RELRO
instead.  Result in a few more pages that aren't writable on some platforms
(such as hppa).  Based on an initial diff from guenther@@.

Thanks to deraadt@@ for testing.

ok guenther@@
@
text
@/*	$OpenBSD: boot.c,v 1.14 2016/08/13 20:57:04 guenther Exp $ */

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * IMPORTANT: any functions below are NOT protected by SSP.  Please
 * do not add anything except what is required to reach GOT with
 * an adjustment.
 */

#define	_DYN_LOADER

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/exec.h>
#include <sys/sysctl.h>
#include <nlist.h>
#include <link.h>
#include <dlfcn.h>

#include "syscall.h"
#include "archdep.h"
#include "stdlib.h"

#include "../../lib/csu/os-note-elf.h"

#if RELOC_TAG == DT_RELA
typedef	Elf_RelA	RELOC_TYPE;
#elif RELOC_TAG == DT_REL
typedef	Elf_Rel		RELOC_TYPE;
#else
# error "unknown RELOC_TAG"
#endif

/* The set of dynamic tags that we're interested in for bootstrapping */
struct boot_dyn {
	RELOC_TYPE	*dt_reloc;	/* DT_RELA   or DT_REL */
	Elf_Addr	dt_relocsz;	/* DT_RELASZ or DT_RELSZ */
	Elf_Addr	*dt_pltgot;
	Elf_Addr	dt_pltrelsz;
	const Elf_Sym	*dt_symtab;
#ifdef HAVE_JMPREL
	RELOC_TYPE	*dt_jmprel;
#endif
#if DT_PROCNUM > 0
	u_long		dt_proc[DT_PROCNUM];
#endif
};

/*
 * Local decls.
 */
void _dl_boot_bind(const long, long *, Elf_Dyn *);

void
_dl_boot_bind(const long sp, long *dl_data, Elf_Dyn *dynp)
{
	struct boot_dyn	dynld;		/* Resolver data for the loader */
	AuxInfo		*auxstack;
	long		*stack;
	int		n, argc;
	char		**argv, **envp;
	long		loff;
	Elf_Addr	i;
	RELOC_TYPE	*rp;
	Elf_Ehdr	*ehdp;
	Elf_Phdr	*phdp;

	/*
	 * Scan argument and environment vectors. Find dynamic
	 * data vector put after them.
	 */
	stack = (long *)sp;
	argc = *stack++;
	argv = (char **)stack;
	envp = &argv[argc + 1];
	stack = (long *)envp;
	while (*stack++ != 0L)
		;

	/*
	 * Zero out dl_data.
	 */
	for (n = 0; n <= AUX_entry; n++)
		dl_data[n] = 0;

	/*
	 * Dig out auxiliary data set up by exec call. Move all known
	 * tags to an indexed local table for easy access.
	 */
	for (auxstack = (AuxInfo *)stack; auxstack->au_id != AUX_null;
	    auxstack++) {
		if (auxstack->au_id > AUX_entry)
			continue;
		dl_data[auxstack->au_id] = auxstack->au_v;
	}
	loff = dl_data[AUX_base];	/* XXX assumes ld.so is linked at 0x0 */

	/*
	 * We need to do 'selfreloc' in case the code weren't
	 * loaded at the address it was linked to.
	 *
	 * Scan the DYNAMIC section for the loader.
	 * Cache the data for easier access.
	 */
	_dl_memset(&dynld, 0, sizeof(dynld));
	while (dynp->d_tag != DT_NULL) {
		/* first the tags that are pointers to be relocated */
		if (dynp->d_tag == DT_PLTGOT)
			dynld.dt_pltgot = (void *)(dynp->d_un.d_ptr + loff);
		else if (dynp->d_tag == DT_SYMTAB)
			dynld.dt_symtab = (void *)(dynp->d_un.d_ptr + loff);
		else if (dynp->d_tag == RELOC_TAG)	/* DT_{RELA,REL} */
			dynld.dt_reloc = (void *)(dynp->d_un.d_ptr + loff);
#ifdef HAVE_JMPREL
		else if (dynp->d_tag == DT_JMPREL)
			dynld.dt_jmprel = (void *)(dynp->d_un.d_ptr + loff);
#endif

		/* Now for the tags that are just sizes or counts */
		else if (dynp->d_tag == DT_PLTRELSZ)
			dynld.dt_pltrelsz = dynp->d_un.d_val;
		else if (dynp->d_tag == RELOC_TAG+1)	/* DT_{RELA,REL}SZ */
			dynld.dt_relocsz = dynp->d_un.d_val;
#if DT_PROCNUM > 0
		else if (dynp->d_tag >= DT_LOPROC &&
		    dynp->d_tag < DT_LOPROC + DT_PROCNUM)
			dynld.dt_proc[dynp->d_tag - DT_LOPROC] =
			    dynp->d_un.d_val;
#endif /* DT_PROCNUM */
		dynp++;
	}

#ifdef HAVE_JMPREL
	rp = dynld.dt_jmprel;
	for (i = 0; i < dynld.dt_pltrelsz; i += sizeof *rp) {
		Elf_Addr *ra;
		const Elf_Sym *sp;

		sp = dynld.dt_symtab + ELF_R_SYM(rp->r_info);
		if (ELF_R_SYM(rp->r_info) && sp->st_value == 0)
			_dl_exit(5);

		ra = (Elf_Addr *)(rp->r_offset + loff);
		RELOC_JMPREL(rp, sp, ra, loff, dynld.dt_pltgot);
		rp++;
	}
#endif /* HAVE_JMPREL */

	rp = dynld.dt_reloc;
	for (i = 0; i < dynld.dt_relocsz; i += sizeof *rp) {
		Elf_Addr *ra;
		const Elf_Sym *sp;

		sp = dynld.dt_symtab + ELF_R_SYM(rp->r_info);
		if (ELF_R_SYM(rp->r_info) && sp->st_value == 0)
			_dl_exit(6);

		ra = (Elf_Addr *)(rp->r_offset + loff);
		RELOC_DYN(rp, sp, ra, loff);
		rp++;
	}

	RELOC_GOT(&dynld, loff);

	/*
	 * we have been fully relocated here, so most things no longer
	 * need the loff adjustment
	 */

	/*
	 * No further changes to the PLT and/or GOT are needed so make
	 * them read-only.
	 */

	/* do any RWX -> RX fixups for executable PLTs and apply GNU_RELRO */
	ehdp = (Elf_Ehdr *)loff;
	phdp = (Elf_Phdr *)(loff + ehdp->e_phoff);
	for (i = 0; i < ehdp->e_phnum; i++, phdp++) {
		switch (phdp->p_type) {
#if defined(__alpha__) || defined(__hppa__) || defined(__powerpc__) || \
    defined(__sparc64__)
		case PT_LOAD:
			if ((phdp->p_flags & (PF_X | PF_W)) != (PF_X | PF_W))
				break;
			_dl_mprotect((void *)(phdp->p_vaddr + loff),
			    phdp->p_memsz, PROT_READ);
			break;
#endif
		case PT_GNU_RELRO:
			_dl_mprotect((void *)(phdp->p_vaddr + loff),
			    phdp->p_memsz, PROT_READ);
			break;
		}
	}
}
@


1.14
log
@Passing in &_DYNAMIC appears to have stuck, so eliminate the extra
variable
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.13 2016/08/09 03:58:35 guenther Exp $ */
d90 2
d194 26
@


1.13
log
@Teach arm to pass &_DYNAMIC to _dl_boot_bind(); can optimize later in tree
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.12 2016/08/07 03:05:23 guenther Exp $ */
d80 1
a80 1
_dl_boot_bind(const long sp, long *dl_data, Elf_Dyn *dynamicp)
a84 1
	Elf_Dyn		*dynp;
a127 2
	dynp = dynamicp;

@


1.12
log
@As with csu, alpha passes &_DYNAMIC to _reloc_alpha_got(), so just
save that and pass it to _dl_boot_bind() too
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.11 2016/08/07 03:03:44 guenther Exp $ */
a128 4

#if defined(__arm__)
	dynp = (Elf_Dyn *)((long)_DYNAMIC + loff);
#else
a129 1
#endif
@


1.11
log
@Teach i386 to pass &_DYNAMIC to _dl_boot_bind()
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.10 2016/08/07 03:01:53 guenther Exp $ */
d130 1
a130 3
#if defined(__alpha__)
	dynp = (Elf_Dyn *)((long)_DYNAMIC);
#elif defined(__arm__)
@


1.10
log
@Teach mips64 to pass &_DYNAMIC to _dl_boot_bind()

mips64be testing by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.9 2016/08/07 02:59:27 guenther Exp $ */
d132 1
a132 1
#elif defined(__arm__) || defined(__i386__)
@


1.9
log
@hahahah: amd64 has been passing &_DYNAMIC to _dl_boot_bind() for
*149 months*
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.8 2016/08/07 02:57:19 guenther Exp $ */
d132 1
a132 1
#elif defined(__arm__) || defined(__i386__) || defined(__mips64__)
@


1.8
log
@Flip the #ifdef logic: amd64, arm, i386, and mips64 are the only archs
using the #else case
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.7 2016/07/15 09:25:47 guenther Exp $ */
d132 1
a132 1
#elif defined(__amd64__) || defined(__arm__) || defined(__i386__) || defined(__mips64__)
@


1.7
log
@Switch m88k to pass &_DYNAMIC to _dl_boot_bind()

probably works: this ASM pattern is already used for _dl_dtors
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.6 2015/12/06 23:36:12 guenther Exp $ */
d132 3
a134 2
#elif defined(__sparc__) || defined(__sparc64__) || defined(__powerpc__) || \
    defined(__hppa__) || defined(__sh__) || defined(__m88k__)
a135 2
#else
	dynp = (Elf_Dyn *)((long)_DYNAMIC + loff);
@


1.6
log
@Simplify the relocation code for the ld.so bootstrap and static pie: track
just the dynamic tags are needed instead of reusing the generic elf_object_t
structure.

testing and feedback from miod@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.5 2015/01/16 16:18:07 deraadt Exp $ */
d133 1
a133 1
    defined(__hppa__) || defined(__sh__)
@


1.5
log
@<sys/param.h> to <limits.h> conversion.  Verified binaries
ok millert, thanks to doug for process advice
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.4 2014/11/15 02:14:10 guenther Exp $ */
a46 3
#include "path.h"
#include "resolve.h"
#include "sod.h"
a47 1
#include "dl_prebind.h"
d51 23
d82 1
a82 1
	struct elf_object  dynld;	/* Resolver data for the loader */
d87 4
a90 2
	char **argv, **envp;
	long loff;
d138 21
a158 4
	_dl_memset(dynld.Dyn.info, 0, sizeof(dynld.Dyn.info));
	while (dynp != NULL && dynp->d_tag != DT_NULL) {
		if (dynp->d_tag < DT_NUM)
			dynld.Dyn.info[dynp->d_tag] = dynp->d_un.d_val;
d161 1
a161 1
			dynld.Dyn.info[dynp->d_tag - DT_LOPROC + DT_NUM] =
d163 1
a163 2
		if (dynp->d_tag == DT_TEXTREL)
			dynld.dyn.textrel = 1;
d167 13
a179 33
	/*
	 * Do the 'bootstrap relocation'. This is really only needed if
	 * the code was loaded at another location than it was linked to.
	 * We don't do undefined symbols resolving (to difficult..)
	 */

	/* "relocate" dyn.X values if they represent addresses */
	{
		int i, val;
		/* must be code, not pic data */
		int table[20];

		i = 0;
		table[i++] = DT_PLTGOT;
		table[i++] = DT_HASH;
		table[i++] = DT_STRTAB;
		table[i++] = DT_SYMTAB;
		table[i++] = DT_RELA;
		table[i++] = DT_INIT;
		table[i++] = DT_FINI;
		table[i++] = DT_REL;
		table[i++] = DT_JMPREL;
		/* other processors insert their extras here */
		table[i++] = DT_NULL;
		for (i = 0; table[i] != DT_NULL; i++) {
			val = table[i];
			if (val >= DT_LOPROC && val < DT_LOPROC + DT_PROCNUM)
				val = val - DT_LOPROC + DT_NUM;
			else if (val >= DT_NUM)
				continue;
			if (dynld.Dyn.info[val] != 0)
				dynld.Dyn.info[val] += loff;
		}
d181 1
d183 12
a194 70
	{
		u_int32_t rs;
		Elf_Rel *rp;
		int	i;

		rp = (Elf_Rel *)(dynld.Dyn.info[DT_REL]);
		rs = dynld.dyn.relsz;

		for (i = 0; i < rs; i += sizeof (Elf_Rel)) {
			Elf_Addr *ra;
			const Elf_Sym *sp;

			sp = dynld.dyn.symtab;
			sp += ELF_R_SYM(rp->r_info);

			if (ELF_R_SYM(rp->r_info) && sp->st_value == 0) {
#if 0
/* cannot printf in this function */
				_dl_wrstderr("Dynamic loader failure: self bootstrapping impossible.\n");
				_dl_wrstderr("Undefined symbol: ");
				_dl_wrstderr((char *)dynld.dyn.strtab +
				    sp->st_name);
#endif
				_dl_exit(5);
			}

			ra = (Elf_Addr *)(rp->r_offset + loff);
			RELOC_REL(rp, sp, ra, loff);
			rp++;
		}
	}

	for (n = 0; n < 2; n++) {
		unsigned long rs;
		Elf_RelA *rp;
		int	i;

		switch (n) {
		case 0:
			rp = (Elf_RelA *)(dynld.Dyn.info[DT_JMPREL]);
			rs = dynld.dyn.pltrelsz;
			break;
		case 1:
			rp = (Elf_RelA *)(dynld.Dyn.info[DT_RELA]);
			rs = dynld.dyn.relasz;
			break;
		default:
			rp = NULL;
			rs = 0;
		}
		for (i = 0; i < rs; i += sizeof (Elf_RelA)) {
			Elf_Addr *ra;
			const Elf_Sym *sp;

			sp = dynld.dyn.symtab;
			sp += ELF_R_SYM(rp->r_info);
			if (ELF_R_SYM(rp->r_info) && sp->st_value == 0) {
#if 0
				_dl_wrstderr("Dynamic loader failure: self bootstrapping impossible.\n");
				_dl_wrstderr("Undefined symbol: ");
				_dl_wrstderr((char *)dynld.dyn.strtab +
				    sp->st_name);
#endif
				_dl_exit(6);
			}

			ra = (Elf_Addr *)(rp->r_offset + loff);
			RELOC_RELA(rp, sp, ra, loff, dynld.dyn.pltgot);
			rp++;
		}
@


1.4
log
@ELF files have moved up a level

pointed out by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.3 2014/08/19 10:01:50 uebayasi Exp $ */
a39 1
#include <sys/param.h>
@


1.3
log
@ld.so(1): Missing stack var initialization

Explicitly zero-clear stack array to read dynamic segments.  This code has
been working because stack is mapped as anon and zero'ed right after execve(2).

Found by work-in-progress Valgrind port for OpenBSD/amd64.

OK millert@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d54 1
a54 1
#include "../../lib/csu/common_elf/os-note-elf.h"
@


1.2
log
@enable -Wall, explicitly call _dl_strsep, and zap some redundant includes
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.1 2014/02/16 01:16:38 martynas Exp $ */
d118 1
@


1.1
log
@Unbreak ld.so with ssp-strong/all on sparc64 and powerpc.  With the
new SSP logic it additionally protects functions which have their
local addresses taken of, and _dl_boot_bind() gets selected.

We have to go through GOT to reach __guard_local, however it hasn't
been relocated yet.  So add boot.c and don't protect everything up
to the point until it has been relocated and no longer needs the
loff adjustment.

OK matthew@@.  Full build done & tested by florian@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.146 2014/01/23 00:31:34 deraadt Exp $ */
a42 1
#include <string.h>
@

