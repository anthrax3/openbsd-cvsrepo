head	1.63;
access;
symbols
	OPENBSD_6_1:1.63.0.4
	OPENBSD_6_1_BASE:1.63
	OPENBSD_6_0:1.62.0.2
	OPENBSD_6_0_BASE:1.62
	OPENBSD_5_9:1.60.0.2
	OPENBSD_5_9_BASE:1.60
	OPENBSD_5_8:1.57.0.4
	OPENBSD_5_8_BASE:1.57
	OPENBSD_5_7:1.55.0.2
	OPENBSD_5_7_BASE:1.55
	OPENBSD_5_6:1.50.0.4
	OPENBSD_5_6_BASE:1.50
	OPENBSD_5_5:1.47.0.4
	OPENBSD_5_5_BASE:1.47
	OPENBSD_5_4:1.45.0.2
	OPENBSD_5_4_BASE:1.45
	OPENBSD_5_3:1.41.0.2
	OPENBSD_5_3_BASE:1.41
	OPENBSD_5_2:1.37.0.12
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.10
	OPENBSD_5_0:1.37.0.8
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.37.0.6
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.37.0.4
	OPENBSD_4_8_BASE:1.37
	OPENBSD_4_7:1.37.0.2
	OPENBSD_4_7_BASE:1.37
	OPENBSD_4_6:1.36.0.12
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.36.0.8
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.36.0.6
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.36.0.4
	OPENBSD_4_3_BASE:1.36
	OPENBSD_4_2:1.36.0.2
	OPENBSD_4_2_BASE:1.36
	OPENBSD_4_1:1.35.0.2
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.34.0.2
	OPENBSD_4_0_BASE:1.34
	OPENBSD_3_9:1.30.0.2
	OPENBSD_3_9_BASE:1.30
	OPENBSD_3_8:1.25.0.2
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.24.0.4
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.24.0.2
	OPENBSD_3_6_BASE:1.24
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	OPENBSD_3_3:1.18.0.2
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	r20000612:1.1.1.2
	dsr:1.1.1
	r19990103:1.1.1.1
	per:1.1.1;
locks; strict;
comment	@# @;


1.63
date	2017.01.05.21.14.22;	author naddy;	state Exp;
branches;
next	1.62;
commitid	Ss31fMtgzL87rjYA;

1.62
date	2016.07.04.21.15.06;	author guenther;	state Exp;
branches;
next	1.61;
commitid	qHDzpShMNCJZKLBF;

1.61
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.60;
commitid	d9R7VGw9CHTkwXE1;

1.60
date	2015.08.31.02.53.57;	author guenther;	state Exp;
branches;
next	1.59;
commitid	lTMF8Y3C9fQGd6jQ;

1.59
date	2015.08.28.14.16.01;	author kettenis;	state Exp;
branches;
next	1.58;
commitid	u7hux9azv5JfRQFY;

1.58
date	2015.08.23.23.20.00;	author guenther;	state Exp;
branches;
next	1.57;
commitid	Nimc1TnpkyT0ONny;

1.57
date	2015.07.26.19.30.58;	author guenther;	state Exp;
branches;
next	1.56;
commitid	IMCkOvVOvAmvTT7v;

1.56
date	2015.05.26.20.15.54;	author miod;	state Exp;
branches;
next	1.55;
commitid	lA6KLQHtaRMwVf9t;

1.55
date	2015.02.08.00.15.22;	author uebayasi;	state Exp;
branches;
next	1.54;
commitid	wu6QfGRnHaQ6k1EQ;

1.54
date	2014.12.22.19.14.59;	author deraadt;	state Exp;
branches;
next	1.53;
commitid	8D3bvXpOseAdceoI;

1.53
date	2014.12.19.14.19.41;	author deraadt;	state Exp;
branches;
next	1.52;
commitid	i0WLGq3N0F2gpiMo;

1.52
date	2014.12.16.23.59.47;	author deraadt;	state Exp;
branches;
next	1.51;
commitid	zX7VEsia1JOq9L79;

1.51
date	2014.12.16.20.53.12;	author pascal;	state Exp;
branches;
next	1.50;
commitid	qcIKj8kLTMUowDHX;

1.50
date	2014.06.21.08.00.22;	author otto;	state Exp;
branches;
next	1.49;
commitid	wh9FTpEgwThWVeqE;

1.49
date	2014.06.05.08.41.09;	author otto;	state Exp;
branches;
next	1.48;
commitid	FsKlhvhdNbVfIAg0;

1.48
date	2014.05.28.18.57.56;	author brad;	state Exp;
branches;
next	1.47;

1.47
date	2014.02.16.01.16.38;	author martynas;	state Exp;
branches;
next	1.46;

1.46
date	2013.12.31.04.07.34;	author guenther;	state Exp;
branches;
next	1.45;

1.45
date	2013.07.05.21.29.51;	author miod;	state Exp;
branches;
next	1.44;

1.44
date	2013.06.01.09.57.55;	author miod;	state Exp;
branches;
next	1.43;

1.43
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.42;

1.42
date	2013.03.20.21.49.59;	author kurt;	state Exp;
branches;
next	1.41;

1.41
date	2013.02.17.22.06.31;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2013.01.05.11.19.25;	author miod;	state Exp;
branches;
next	1.39;

1.39
date	2012.09.12.09.19.54;	author haesbaert;	state Exp;
branches;
next	1.38;

1.38
date	2012.08.31.20.09.27;	author kettenis;	state Exp;
branches;
next	1.37;

1.37
date	2010.02.03.20.49.00;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2007.08.08.21.04.13;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2006.12.26.22.36.51;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.11.22.03.22;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.04.01.52.16;	author drahn;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.03.16.10.51;	author drahn;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.03.15.48.16;	author drahn;	state Exp;
branches;
next	1.30;

1.30
date	2005.09.28.16.20.01;	author drahn;	state Exp;
branches;
next	1.29;

1.29
date	2005.09.23.01.15.03;	author drahn;	state Exp;
branches;
next	1.28;

1.28
date	2005.09.22.22.33.40;	author drahn;	state Exp;
branches;
next	1.27;

1.27
date	2005.09.16.23.20.51;	author drahn;	state Exp;
branches;
next	1.26;

1.26
date	2005.09.16.23.19.41;	author drahn;	state Exp;
branches;
next	1.25;

1.25
date	2005.03.23.19.48.05;	author drahn;	state Exp;
branches;
next	1.24;

1.24
date	2004.05.26.19.16.30;	author mickey;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.20.23.23.09;	author avsm;	state Exp;
branches;
next	1.22;

1.22
date	2003.07.06.20.03.57;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.27.01.13.00;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.26.17.55.42;	author drahn;	state Exp;
branches;
next	1.19;

1.19
date	2003.04.17.03.40.45;	author drahn;	state Exp;
branches;
next	1.18;

1.18
date	2002.10.21.16.28.18;	author drahn;	state Exp;
branches;
next	1.17;

1.17
date	2002.08.21.15.40.30;	author art;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.27.13.19.26;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.12.20.18.30;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.25.02.46.09;	author drahn;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.25.02.34.45;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.21.23.17.53;	author drahn;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.20.01.13.44;	author pvalchev;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.24.23.38.09;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.23.02.24.07;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.20.20.16.29;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.08.06.50.34;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.23.14.24.03;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.15.11.38.25;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.14.22.18.19;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.17.17.50.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.08.04.23.45;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.13.03.33.55;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.13.03.33.55;	author rahnds;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.06.13.03.39.53;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.63
log
@Build with -fno-builtin to keep clang from optimizing the _dl_memset()
and _dl_bcopy() functions into calls to memset() and memcpy().
ok kettenis@@
@
text
@#	$OpenBSD: Makefile,v 1.62 2016/07/04 21:15:06 guenther Exp $

SUBDIR=ldconfig ldd
MAN=	ld.so.1

.include <bsd.own.mk>

.if defined(NOPIC)
NOPROG=
.else
PROG=	ld.so
BINMODE=444

VERSION_SCRIPT=	${.CURDIR}/Symbols.map
ELF_LDFLAGS+=--version-script=${VERSION_SCRIPT}

VPATH=${.CURDIR}/../../lib/libc/string

SRCS=	ldasm.S boot.c loader.c resolve.c dlfcn.c dl_printf.c rtld_machine.c
SRCS+=	path.c util.c sod.c strsep.c strtol.c dir.c library_subr.c
SRCS+=	dl_realpath.c dl_uname.c dl_dirname.c strlcat.c strlen.c trace.c
SRCS+=	malloc.c reallocarray.c tib.c

.if (${MACHINE_ARCH} == "i386")
SRCS+=	library_mquery.c
.else
SRCS+=	library.c
.endif

.include "${.CURDIR}/${MACHINE_CPU}/Makefile.inc"
.PATH:	${.CURDIR}/${MACHINE_CPU}

DEBUG?=	-g
CFLAGS += -fno-builtin
CFLAGS += -Wall -Werror
CFLAGS += -I${.CURDIR} -I${.CURDIR}/${MACHINE_CPU} \
	-D'DEF_WEAK(x)=asm("")' -D'DEF_STRONG(x)=asm("")' \
	-Dstrsep=_dl_strsep -Dstrlcat=_dl_strlcat -Dstrlen=_dl_strlen
CDIAGFLAGS=
INSTALL_STRIP=

ELF_LDFLAGS+=--shared -Bsymbolic --no-undefined

test_prog=	test-$(PROG)
CLEANFILES+=	test-$(PROG)
candidate=	$(PROG).test
CLEANFILES+=	${candidate}

$(test_prog):
	printf '#include <stdio.h>\nint main(int argc, char **argv){ printf("%%s: ", argv[0]); printf("%%s!\\n", argv[1] ? argv[1] : "foo"); }\n' | \
	$(CC) -x c - -Wl,-dynamic-linker,${.OBJDIR}/$(candidate) -o $@@

$(PROG): $(test_prog) ${VERSION_SCRIPT}
	$(LD) -x -e _dl_start $(ELF_LDFLAGS) -o $(candidate) $(OBJS) $(LDADD)
.ifndef CROSSDIR
	ulimit -c 0; [ "`${.OBJDIR}/$(test_prog) ok`" = "${.OBJDIR}/$(test_prog): ok!" ]
.endif
	cp $(candidate) $@@
.endif

.include <bsd.prog.mk>

boot.o: boot.c
	${COMPILE.c} -fno-stack-protector ${.IMPSRC}
@


1.62
log
@Remove prebind support: binding to symbol table indices is too fragile
for our development process.

ok kettenis@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.61 2016/05/07 19:05:23 guenther Exp $
d34 1
@


1.61
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.60 2015/08/31 02:53:57 guenther Exp $
d20 1
a20 1
SRCS+=	path.c util.c sod.c strsep.c strtol.c dir.c library_subr.c dl_prebind.c
@


1.60
log
@Add framework for resolving (pun intended) libc namespace issues, using
wrapper .h files and asm labels to let internal calls resolve directly and
not be overridable or use the PLT.  Then, apply that framework to most of
the functions in stdio.h, string.h, err.h, and wchar.h.  Delete the
should-have-been-hidden-all-along _v?(err|warn)[cx]? symbols while here.

tests clean on i386, amd64, sparc64, powerpc, and mips64

naming feedback from kettenis@@ and millert@@
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.59 2015/08/28 14:16:01 kettenis Exp $
d22 1
a22 1
SRCS+=	malloc.c reallocarray.c
@


1.59
log
@Use ELF_LDFLAGS to pass the --version-script argument such that we actually
hide symbols on all our architectures; hppa, hppa64 and sh override LDADD.
LDADD isn't really the proper variable for passing linker flags anyway.

ok guenther@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.58 2015/08/23 23:20:00 guenther Exp $
d36 1
@


1.58
log
@Apply a symbol export list to ld.so with just the expected dl*() and the
two symbols needed by gdb.  Remember: ld.so exports override those in
shared libs.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.57 2015/07/26 19:30:58 guenther Exp $
d15 1
a15 1
LDADD+=	--version-script=${VERSION_SCRIPT}
@


1.57
log
@Reenable the ld.so pre-install test; the "am I cross-compiling" test was
too loose.  Update the test to try to exercise the printf binding twice.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.56 2015/05/26 20:15:54 miod Exp $
d14 3
d51 1
a51 1
$(PROG): $(test_prog)
@


1.56
log
@Better cross-compilation check
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.55 2015/02/08 00:15:22 uebayasi Exp $
d45 1
a45 1
	printf '#include <stdio.h>\nint main(int argc, char **argv){ printf("%%s\\n", argv[1]); }\n' | \
d50 2
a51 2
.ifndef HOSTCC
	ulimit -c 0; [ "`${.OBJDIR}/$(test_prog) ok`" = ok ]
@


1.55
log
@Fix cross-build.  OK jsing@@ miod@@ guenther@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d50 1
a50 1
.ifndef CROSSDIR
@


1.54
log
@Static PIE has been delayed for quite a while.  By pushing hard with pascal
towards a wimpy (but sufficient) model, kurt and kettenis got upset enough
to do it the right way, right away before we got out of hand.  Bravo!
We no longer need /sbin/ld.so on the new roadmap.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.53 2014/12/19 14:19:41 deraadt Exp $
d50 1
d52 1
@


1.53
log
@place the afterinstall: target correctly for static-only architectures
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.52 2014/12/16 23:59:47 deraadt Exp $
a25 4

afterinstall:
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
	    ${.OBJDIR}/ld.so ${DESTDIR}/sbin/ld.so
@


1.52
log
@install both ld.so with mode 444
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.51 2014/12/16 20:53:12 pascal Exp $
d27 3
a56 4

afterinstall:
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
	    ${.OBJDIR}/ld.so ${DESTDIR}/sbin/ld.so
@


1.51
log
@Install a copy of ld.so into /sbin.  Soon to be used in order to make "static"
PIE possible.

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.50 2014/06/21 08:00:22 otto Exp $
d12 1
d56 1
a56 1
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m ${NONBINMODE} \
@


1.50
log
@Move to a non-zeroing _dl_malloc, a _dl_calloc and _dl_reallocarry and
fix _dl_strdup to return NULL instead of crash; ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.49 2014/06/05 08:41:09 otto Exp $
d53 4
@


1.49
log
@add malloc.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.48 2014/05/28 18:57:56 brad Exp $
d18 1
a18 1
SRCS+=	malloc.c
@


1.48
log
@Remove additional files generated during ld.so build on make clean.

From drahn Bitrig

ok miod@@ guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.47 2014/02/16 01:16:38 martynas Exp $
d18 2
@


1.47
log
@Unbreak ld.so with ssp-strong/all on sparc64 and powerpc.  With the
new SSP logic it additionally protects functions which have their
local addresses taken of, and _dl_boot_bind() gets selected.

We have to go through GOT to reach __guard_local, however it hasn't
been relocated yet.  So add boot.c and don't protect everything up
to the point until it has been relocated and no longer needs the
loff adjustment.

OK matthew@@.  Full build done & tested by florian@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.46 2013/12/31 04:07:34 guenther Exp $
d38 1
d40 1
@


1.46
log
@Don't consider ld.so to be successfully built unless a test program
using it works, because seeing "make build" fail right after it
installs a broken ld.so is *#!&%(@@*)# annoying.

Presumably needs to be fixed for cross-builds.

ok matthew@@ deraadt@@ miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.45 2013/07/05 21:29:51 miod Exp $
d15 2
a16 2
SRCS=	ldasm.S loader.c resolve.c dlfcn.c dl_printf.c rtld_machine.c path.c
SRCS+=	util.c sod.c strsep.c strtol.c dir.c library_subr.c dl_prebind.c
d51 3
@


1.45
log
@ELF_TOOLCHAIN bye bye.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.44 2013/06/01 09:57:55 miod Exp $
d37 11
a47 2
$(PROG):
	$(LD) -x -e _dl_start $(ELF_LDFLAGS) -o $(PROG) $(OBJS) $(LDADD)
@


1.44
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.43 2013/04/05 12:58:03 kurt Exp $
a7 2
.if (${ELF_TOOLCHAIN:L} == "yes")

a38 2
.endif

@


1.43
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.42 2013/03/20 21:49:59 kurt Exp $
d19 1
a19 1
SRCS+=	dl_realpath.c dl_uname.c dl_dirname.c strlcat.c strlen.c
@


1.42
log
@- Parse colon separated paths into NULL terminated arrays of string
pointers to prepare for adding rpath ORIGIN support.
okay matthew@@ millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.41 2013/02/17 22:06:31 deraadt Exp $
d19 1
d33 1
a33 1
	-Dstrsep=_dl_strsep
@


1.41
log
@Always enter this ld.so and subdirectories to create obj (and then the
MI man pages, even if vax currently lacks the programs)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.40 2013/01/05 11:19:25 miod Exp $
d17 1
a17 1
SRCS=	ldasm.S loader.c resolve.c dlfcn.c dl_printf.c rtld_machine.c
@


1.40
log
@if defined(NOPIC), do not attempt to .include arch/Makefile.inc for it may
not exist yet.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.39 2012/09/12 09:19:54 haesbaert Exp $
a3 1

d7 3
d40 2
@


1.39
log
@Define empty CDIAGFLAGS for programs that use Werror.
Makes "make build" build with WARNINGS=Yes on amd64.

ok espie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.38 2012/08/31 20:09:27 kettenis Exp $
a11 1
.endif
d38 1
@


1.38
log
@Compile ld.so with debug info.  This will not only help people hacking on
ld.so itself, but also make it easier to debug code that uses dlopen(3).

ok deraadt@@, matthew@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.37 2010/02/03 20:49:00 miod Exp $
d32 1
@


1.37
log
@Use MACHINE_CPU instead of MACHINE_ARCH to pick the correct machine dependent
files or directories when applicable.
The inspiration and name of MACHINE_CPU come from NetBSD, although the way to
provide it to Makefiles is completely different.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.36 2007/08/08 21:04:13 deraadt Exp $
d28 1
@


1.36
log
@on NOPIC architectures, do not build and install ld.so.  this is in
particular for landisk (sh) where ld.so does not yet 100% work, but
was still being installed.  libtool cares.  modified from matthieu
patch; ok drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.35 2006/12/26 22:36:51 deraadt Exp $
d25 2
a26 2
.include "${.CURDIR}/${MACHINE_ARCH}/Makefile.inc"
.PATH:	${.CURDIR}/${MACHINE_ARCH}
d29 1
a29 1
CFLAGS += -I${.CURDIR} -I${.CURDIR}/${MACHINE_ARCH} \
@


1.35
log
@no more seperate prebind
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.34 2006/05/11 22:03:22 deraadt Exp $
d4 10
a23 2
PROG=	ld.so
MAN=	ld.so.1
@


1.34
log
@move prebind_strip(8) into ldconfig as the -D option; ok drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.33 2006/05/04 01:52:16 drahn Exp $
a3 1
#SUBDIR+=prebind
@


1.33
log
@Dont build/install prebind tools just yet.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.32 2006/05/03 16:10:51 drahn Exp $
d4 1
a4 1
#SUBDIR+=prebind prebind_strip
@


1.32
log
@prebind - how to prelink a binary without throwing security out the window

Prelink fixes the address of libraries making 'return to libc' attacks trival,
prebind uses a different method to achieve most of the same gains, however
without adding any security conerns.

Still under development, now in-tree.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2006/05/03 15:48:16 drahn Exp $
d3 1
a3 1
SUBDIR=ldconfig ldd prebind prebind_strip
@


1.31
log
@Extra paranoid, do not allow the dynamic linker to have unresolved references
as this causes much frustration as it fails to run after being installed
and is a paint to recover.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 2005/09/28 16:20:01 drahn Exp $
d3 2
a4 1
SUBDIR=ldconfig ldd
d8 1
a8 1
SRCS+=	util.c sod.c strsep.c strtol.c dir.c library_subr.c
@


1.30
log
@If there is some compilation error/warning in ld.so do not allow it to
build, ld.so is too fragile and destructive otherwise.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2005/09/23 01:15:03 drahn Exp $
d25 1
a25 1
ELF_LDFLAGS+=--shared -Bsymbolic
@


1.29
log
@sigh. again
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2005/09/22 22:33:40 drahn Exp $
d20 1
a20 1
CFLAGS += -Wall
@


1.28
log
@Track if symbols are searched but missing while resolving GOT, if
any are missing exit instead of later causing an abort, ok kurt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2005/09/16 23:20:51 drahn Exp $
a25 2
CFLAGS += -g
ELF_LDFLAGS+=-g
@


1.27
log
@revert the debug enable.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2005/09/16 23:19:41 drahn Exp $
d26 2
@


1.26
log
@Rework symbol lookup to more closely match sun's documentation, now
treats dlopens as load groups. ok kurt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2005/03/23 19:48:05 drahn Exp $
a19 1
CFLAGS += -g
a25 1
ELF_LDFLAGS+=-g
@


1.25
log
@Code reorganization, move copied code in library.c and library_mquery.c
into its own file. no functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2004/05/26 19:16:30 mickey Exp $
d20 1
d27 1
@


1.24
log
@allow md makefile to supply LDADD; drahn@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2003/11/20 23:23:09 avsm Exp $
d7 1
a7 1
SRCS+=	util.c sod.c strsep.c strtol.c dir.c
@


1.23
log
@remove -Werror from userland builds, to give us a chance to
use more verbose warning options if desired.
ok millert@@, henning@@, david@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2003/07/06 20:03:57 deraadt Exp $
d28 1
a28 1
	$(LD) -x -e _dl_start $(ELF_LDFLAGS) -o $(PROG) $(OBJS)
@


1.22
log
@various proto, ansi, and knf repair.  tested on all architectures that
use it. (build may require make cleandir because of .depend balony)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2003/06/27 01:13:00 deraadt Exp $
d20 1
a20 1
CFLAGS += -Werror -Wall
@


1.21
log
@put it in section 1
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2003/06/26 17:55:42 drahn Exp $
d4 1
a4 1
VPATH=${.CURDIR}/../../lib/libc/string:${.CURDIR}/../../sys/lib/libsa
d9 1
a9 1
SRCS+=	library_mquery.c 
d11 1
a11 1
SRCS+=	library.c 
d22 1
a22 1
	-Dstrsep=_dl_strsep -Dstrtol=_dl_strtol
@


1.20
log
@Manpage for ELF ld.so, derived from a.out version, not yet complete
also points out missing features in the ELF ld.so.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2003/04/17 03:40:45 drahn Exp $
d15 1
a15 1
MAN=	ld.so.8
@


1.19
log
@mquery support, currently for i386 only.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2002/10/21 16:28:18 drahn Exp $
a5 1
NOMAN=
@


1.18
log
@Remove the -D__PIC__ from this, it does not affect the building
of any current platform, so makes no sense. pointed out by Per.
Tested on alpha, i386, macppc, sparc, sparc64 (binary diff).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2002/08/21 15:40:30 art Exp $
d7 1
a7 1
SRCS=	ldasm.S loader.c library.c resolve.c dlfcn.c dl_printf.c rtld_machine.c
d9 6
@


1.17
log
@Split out MD makefile parts into separate files and do
some other cleanup in the Makefile.
drahn@@ ok.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2002/07/27 13:19:26 art Exp $
d16 1
a16 1
CFLAGS += -I${.CURDIR} -D__PIC__ -I${.CURDIR}/${MACHINE_ARCH} \
@


1.16
log
@Just a skeleton for sparc. Builds, but pieces are missing and it doesn't
even get to dl_boot_bind correctly.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2002/07/12 20:18:30 drahn Exp $
d8 1
a8 3
SRCS+=	util.c
SRCS+=  sod.c strsep.c strtol.c
SRCS+=  dir.c
d12 2
a13 20
.if (${MACHINE_ARCH} == "sparc64")
CFLAGS += -fpic -msoft-float
AFLAGS += -fpic
.endif
.if (${MACHINE_ARCH} == "powerpc")
CFLAGS += -fpic -msoft-float
.endif
.if (${MACHINE_ARCH} == "alpha")
CFLAGS += -fpic -mno-fp-regs
LIBCSRCDIR=${.CURDIR}/../../lib/libc
.include "${LIBCSRCDIR}/arch/alpha/Makefile.inc"
.endif
.if (${MACHINE_ARCH} == "sparc")
CFLAGS += -fpic -msoft-float -I${LIBCSRCDIR}/arch/sparc
AFLAGS = ${CFLAGS}
LIBCSRCDIR=${.CURDIR}/../../lib/libc
.include "${LIBCSRCDIR}/arch/sparc/Makefile.inc"
.PATH: ${LIBCSRCDIR}/arch/sparc/gen/
SRCS+=umul.S
.endif
a14 1
#CFLAGS += -Werror -Wall -Wno-uninitialized
d16 1
a16 2
CFLAGS += -I${.CURDIR} -DNO_UNDERSCORE -DVERBOSE_DLINKER \
	-D__PIC__ -I${.CURDIR}/${MACHINE_ARCH} \
d20 1
a20 7
.PATH:	${.CURDIR}/${MACHINE_ARCH}

ELF_LDFLAGS=--shared -Bsymbolic # using GNU ld
.if (${MACHINE_ARCH} == "powerpc")
ADDR=-Tdata 8000
ELF_LDFLAGS+=${ADDR} # using GNU ld
.endif
@


1.15
log
@Change ld.so search order/method to match the a.out ld.so.

run destructors on dlclose()

Move more symbols into _dl_ private space, so that the proper (libc)
version of the function will be used.

Add readdir() functionality to perform the proper library searching.

Support DL_PRELOAD

Do not relocate symbols if ld.so is being traced (and will exit).

Misc lint cleanup.

ok art@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2002/05/25 02:46:09 drahn Exp $
d25 8
@


1.14
log
@use _dl_strncmp() not strncmp(), _dl version is already present and used.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2002/05/25 02:34:45 drahn Exp $
d10 1
d13 1
a21 1
CFLAGS += -Werror -Wall -Wno-uninitialized
d26 3
d30 2
a31 2
	-DUSE_CACHE -D__PIC__ -I${.CURDIR}/${MACHINE_ARCH}
#CFLAGS += -g -DDL_PRINTF_DEBUG
d36 1
a37 1
#ADDR=-Ttext 21860000 -Tdata 21863000
d39 1
a39 3
ELF_LDFLAGS=--shared -Bsymbolic ${ADDR} # using GNU ld
.else
ELF_LDFLAGS=--shared -Bsymbolic # using GNU ld
@


1.13
log
@_dl_strcmp() and _dl_strchr() exist, do not pull these routines
from libsa source.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2002/02/21 23:17:53 drahn Exp $
d9 1
a9 1
SRCS+=  sod.c strncmp.c strsep.c strtol.c
@


1.12
log
@cleanup of MD/MI ld.so (elf), most changes by art@@ cleanup by me.
tested on alpha sparc64 powerpc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2001/11/20 01:13:44 pvalchev Exp $
d9 1
a9 2
SRCS+=  sod.c strcmp.c strncmp.c strsep.c strtol.c
OBJS+=  strchr.o
@


1.11
log
@bye bye, libdl
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2001/09/24 23:38:09 art Exp $
d8 2
a9 1
SRCS+=  sod.c strcmp.c strncmp.c strsep.c strtol.c strdup.c strcpy.c
d21 1
a21 1
CFLAGS += -Werror
@


1.10
log
@sparc64 needs slightly different flags.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2001/09/23 02:24:07 drahn Exp $
d3 1
a3 1
SUBDIR=libdl ldconfig ldd
@


1.9
log
@pass appropriate compilation flags for sparc64. needs to be compiled PIC.
both C and asm files.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2001/07/20 20:16:29 mickey Exp $
d13 2
a14 2
CFLAGS += -fPIC -msoft-float
AFLAGS += -fPIC 
@


1.8
log
@do not include or define things which are common for this subdir's parent
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2001/06/08 06:50:34 art Exp $
d12 4
@


1.7
log
@No more need to pull in strlen from libc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2001/05/23 14:24:03 drahn Exp $
a11 1
BINDIR=/usr/libexec
a39 1
.include <bsd.subdir.mk>
@


1.6
log
@Do not enable debugging, such as PRINTF_DEBUG for ld.so, it becomes
too verbose for normal usage.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2001/05/15 11:38:25 deraadt Exp $
d8 1
a8 1
SRCS+=  sod.c strcmp.c strlen.c strncmp.c strsep.c strtol.c strdup.c strcpy.c
@


1.5
log
@Niklas, there is no excuse for breaking this code
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2001/05/14 22:18:19 niklas Exp $
d24 1
a24 1
CFLAGS += -g -DDL_PRINTF_DEBUG
@


1.4
log
@Commit initial alpha bits, to facilitate in-tree dev.
This code is not yet working.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2000/09/17 17:50:57 deraadt Exp $
a12 1
CFLAGS += -Werror
d17 1
@


1.3
log
@activate ldd, and indent some ld.so messages to make it easier to see what is going on
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2000/09/08 04:23:45 rahnds Exp $
a3 7
#CFLAGS =
.if (${MACHINE_ARCH} == "powerpc")
CFLAGS += -fpic -msoft-float
.endif
CFLAGS += -I${.CURDIR} -DNO_UNDERSCORE -DVERBOSE_DLINKER \
	-DUSE_CACHE -D__PIC__ -I${.CURDIR}/${MACHINE_ARCH}
#CFLAGS += -g
d13 12
@


1.2
log
@PowerPC does not need to build this -Wall, if other archs would not.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1.1.2 2000/06/13 03:39:53 rahnds Exp $
d3 1
a3 1
SUBDIR=libdl ldconfig
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 1997/04/27 20:55:51 millert Exp $
d3 5
d10 2
d13 1
d15 2
d24 7
a30 1
ELF_LDFLAGS=--shared # using GNU ld
a34 1

d36 1
@


1.1.1.1
log
@Initial import of ELF ld.so. This was written indepently of the gnu rtld
code and is fully BSD copyrighted.
This initial import contains a mostly working mips and partially working
powerpc version. No support for ld.so.hints or system run path exists.

@
text
@@


1.1.1.2
log
@Updated version of ld.so, contains additional functionality and fixes/
design changes required by egcs.

added support for ldconfig/ld.so.hints

changes to low level relocation code, required by egcs pic
code generation that moved global variable loads to before the
self relocation was performed. Only powerpc supported, mips code not updated.

Code cleaned up somewhat reasonably.

This code needs to be reviewed closely for significant problems
such as correctness and security.
@
text
@a2 5
SUBDIR=libdl ldconfig
#CFLAGS =
.if (${MACHINE_ARCH} == "powerpc")
CFLAGS += -fpic -msoft-float -Wall
.endif
a4 2
#CFLAGS += -g
VPATH=${.CURDIR}/../../lib/libc/string:${.CURDIR}/../../sys/lib/libsa
a5 1
NOMAN=
a6 2
SRCS+=  sod.c strcmp.c strlen.c strncmp.c strsep.c strtol.c strdup.c strcpy.c
OBJS+=  strchr.o
d14 1
a14 7
.if (${MACHINE_ARCH} == "powerpc")
#ADDR=-Ttext 21860000 -Tdata 21863000
ADDR=-Tdata 8000
ELF_LDFLAGS=--shared -Bsymbolic ${ADDR} # using GNU ld
.else
ELF_LDFLAGS=--shared -Bsymbolic # using GNU ld
.endif
d19 1
a20 1
.include <bsd.subdir.mk>
@

