head	1.11;
access;
symbols
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.14
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.12
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.16
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.12
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2016.07.04.20.56.50;	author kettenis;	state dead;
branches;
next	1.10;
commitid	roU3LTBV1W77FE1g;

1.10
date	2015.09.06.08.44.07;	author tobias;	state Exp;
branches;
next	1.9;
commitid	TaRSF6Mp9inTtdFb;

1.9
date	2015.06.10.20.50.05;	author miod;	state Exp;
branches;
next	1.8;
commitid	MQR5kHnk6hKSfZ87;

1.8
date	2015.01.19.02.44.53;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mAID3mktI4FEGlig;

1.7
date	2015.01.16.16.18.07;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	31KwZ9PARAKUg1ob;

1.6
date	2013.12.03.01.47.06;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2013.11.13.05.41.43;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.20.21.49.59;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.30.04.30.01;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.13.16.33.40;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.12.23.20.52;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Nuke prebind support; it's unworkable and we're never going to finish it.

ok guenther@@, deraadt@@
@
text
@/* $OpenBSD: library.c,v 1.10 2015/09/06 08:44:07 tobias Exp $ */
/*
 * Copyright (c) 2006 Dale Rahn <drahn@@dalerahn.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <limits.h>
#include <fcntl.h>
#include <nlist.h>
#include <elf_abi.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>
#include <dirent.h>
#include "link.h"
#include "sod.h"
#include "resolve.h"
#include "prebind.h"
#include "prebind_struct.h"

char *_dl_default_path[2] = { "/usr/lib", NULL };

elf_object_t *elf_load_shlib_hint(struct sod *sod, struct sod *req_sod,
	    int ignore_hints, char **libpath);
char	 *elf_find_shlib(struct sod *sodp, char **searchpath, int nohints);
elf_object_t * elf_tryload_shlib(const char *libname);
int	elf_match_file(struct sod *sodp, char *name, int namelen);
int	load_lib(const char *, struct elf_object *);

int
load_lib(const char *name, struct elf_object *parent)
{
	struct sod sod, req_sod;
	int ignore_hints, try_any_minor = 0;
	struct elf_object *object = NULL;

#if 0
	printf("load_lib %s\n", name);
#endif
	ignore_hints = 0;

	if(strchr(name, '/')) {
		char *paths[2];
		char *lpath, *lname;

		lpath = strdup(name);
		if (lpath == NULL)
			return (1);
		lname = strrchr(lpath, '/');
		if (lname == NULL || lname[1] == '\0') {
			free(lpath);
			return (1); /* failed */
		}
		*lname = '\0';
		lname++;

		_dl_build_sod(lname, &sod);
		req_sod = sod;

		paths[0] = lpath;
		paths[1] = NULL;
		/* this code does not allow lower minors */
fullpathagain:
		object = elf_load_shlib_hint(&sod, &req_sod,
			ignore_hints, paths);
		if (object != NULL)
			goto fullpathdone;

		if (try_any_minor == 0) {
			try_any_minor = 1;
			ignore_hints = 1;
			req_sod.sod_minor = -1;
			goto fullpathagain;
		}
		/* ERR */
fullpathdone:
		free(lpath);
		free((char *)sod.sod_name);
		return (object == NULL); /* failed */
	}
	_dl_build_sod(name, &sod);
	req_sod = sod;

	/* ignore LD_LIBRARY_PATH */

again:
	if (parent->rpath != NULL) {
		object = elf_load_shlib_hint(&sod, &req_sod,
		    ignore_hints, parent->rpath);
		if (object != NULL)
			goto done;
	}
	if (parent != load_object && load_object->rpath != NULL) {
		object = elf_load_shlib_hint(&sod, &req_sod,
			ignore_hints, load_object->rpath);
		if (object != NULL)
			goto done;
	}
	object = elf_load_shlib_hint(&sod, &req_sod, ignore_hints, NULL);

	if (try_any_minor == 0) {
		try_any_minor = 1;
		ignore_hints = 1;
		req_sod.sod_minor = -1;
		goto again;
	}
	if (object == NULL)
		printf ("unable to load %s\n", name);

done:
	free((char *)sod.sod_name);

	return (object == NULL);
}

/*
 * attempt to locate and load a library based on libpath, sod info and
 * if it needs to respect hints, passing type and flags to perform open
 */
elf_object_t *
elf_load_shlib_hint(struct sod *sod, struct sod *req_sod,
    int ignore_hints, char **libpath)
{
	elf_object_t *object = NULL;
	char *hint;

	hint = elf_find_shlib(req_sod, libpath, ignore_hints);
	if (hint != NULL) {
		if (req_sod->sod_minor < sod->sod_minor)
			printf("warning: lib%s.so.%d.%d: "
			    "minor version >= %d expected, "
			    "using it anyway\n",
			    (char *)sod->sod_name, sod->sod_major,
			    req_sod->sod_minor, sod->sod_minor);
		object = elf_tryload_shlib(hint);
	}
	return object;
}

char elf_hint_store[PATH_MAX];

char *
elf_find_shlib(struct sod *sodp, char **searchpath, int nohints)
{
	char *hint, **pp;
	struct sod tsod, bsod;		/* transient and best sod */
	struct dirent *dp;
	int match, len;
	DIR *dd;

	/* if we are to search default directories, and hints
	 * are not to be used, search the standard path from ldconfig
	 * (_dl_hint_search_path) or use the default path
	 */
	if (nohints)
		goto nohints;

	if (searchpath == NULL) {
		/* search 'standard' locations, find any match in the hints */
		hint = _dl_findhint((char *)sodp->sod_name, sodp->sod_major,
		    sodp->sod_minor, NULL);
		if (hint)
			return hint;
	} else {
		/* search hints requesting matches for only
		 * the searchpath directories,
		 */
		for (pp = searchpath; *pp != NULL; pp++) {
			hint = _dl_findhint((char *)sodp->sod_name,
			    sodp->sod_major, sodp->sod_minor, *pp);
			if (hint != NULL)
				return hint;
		}
	}

	/*
	 * For each directory in the searchpath, read the directory
	 * entries looking for a match to sod. filename compare is
	 * done by _dl_match_file()
	 */
nohints:
	if (searchpath == NULL) {
		if (_dl_hint_search_path != NULL)
			searchpath = _dl_hint_search_path;
		else
			searchpath = _dl_default_path;
	}
	memset(&bsod, 0, sizeof(bsod));
	for (pp = searchpath; *pp != NULL; pp++) {
		if ((dd = opendir(*pp)) != NULL) {
			match = 0;
			while ((dp = readdir(dd)) != NULL) {
				tsod = *sodp;
				if (elf_match_file(&tsod, dp->d_name,
				    dp->d_namlen)) {
					/*
					 * When a match is found, tsod is
					 * updated with the major+minor found.
					 * This version is compared with the
					 * largest so far (kept in bsod),
					 * and saved if larger.
					 */
					if (!match ||
					    tsod.sod_major == -1 ||
					    tsod.sod_major > bsod.sod_major ||
					    ((tsod.sod_major ==
					    bsod.sod_major) &&
					    tsod.sod_minor > bsod.sod_minor)) {
						bsod = tsod;
						match = 1;
						len = strlcpy(
						    elf_hint_store, *pp,
						    PATH_MAX);
						if (pp[0][len-1] != '/') {
							elf_hint_store[len] =
							    '/';
							len++;
						}
						strlcpy(
						    &elf_hint_store[len],
						    dp->d_name,
						    PATH_MAX-len);
						if (tsod.sod_major == -1)
							break;
					}
				}
			}
			closedir(dd);
			if (match) {
				*sodp = bsod;
				return (elf_hint_store);
			}
		}
	}
	return NULL;
}

elf_object_t *
elf_tryload_shlib(const char *libname)
{
	struct elf_object *object;
	object = elf_lookup_object(libname);

	if (object == NULL)
		object = load_file(libname, OBJTYPE_LIB);
	if (object == NULL)
		printf("tryload_shlib %s\n", libname);
	return object;
}

/*
 * elf_match_file()
 *
 * This function determines if a given name matches what is specified
 * in a struct sod. The major must match exactly, and the minor must
 * be same or larger.
 *
 * sodp is updated with the minor if this matches.
 */

int
elf_match_file(struct sod *sodp, char *name, int namelen)
{
	int match;
	struct sod lsod;
	char *lname;

	lname = name;
	if (sodp->sod_library) {
		if (strncmp(name, "lib", 3))
			return 0;
		lname += 3;
	}
	if (strncmp(lname, (char *)sodp->sod_name,
	    strlen((char *)sodp->sod_name)))
		return 0;

	_dl_build_sod(name, &lsod);

	match = 0;
	if (strcmp((char *)lsod.sod_name, (char *)sodp->sod_name) == 0 &&
	    lsod.sod_library == sodp->sod_library &&
	    (sodp->sod_major == -1 || sodp->sod_major == lsod.sod_major) &&
	    (sodp->sod_minor == -1 || lsod.sod_minor >= sodp->sod_minor)) {
		match = 1;

		/* return version matched */
		sodp->sod_major = lsod.sod_major;
		sodp->sod_minor = lsod.sod_minor;
	}
	free((char *)lsod.sod_name);
	return match;
}

@


1.10
log
@Check strdup return value for NULL.

ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.9 2015/06/10 20:50:05 miod Exp $ */
@


1.9
log
@Typos: equalivant, fucntion, libary.
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.8 2015/01/19 02:44:53 deraadt Exp $ */
d63 2
@


1.8
log
@gcc does not understand that the loop conditionally sets bsod before
using it, so it warns...  Copy the warning silencing code from the
same function in ../ld.so
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.7 2015/01/16 16:18:07 deraadt Exp $ */
d268 1
a268 1
 * This fucntion determines if a given name matches what is specified
@


1.7
log
@<sys/param.h> to <limits.h> conversion.  Verified binaries
ok millert, thanks to doug for process advice
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.6 2013/12/03 01:47:06 deraadt Exp $ */
d202 1
@


1.6
log
@stop using sys/syslimits.h directly, and use limits.h
prodded by millert
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.5 2013/11/13 05:41:43 deraadt Exp $ */
a19 1
#include <sys/param.h>
d29 1
d154 1
a154 1
char elf_hint_store[MAXPATHLEN];
d226 1
a226 1
						    MAXPATHLEN);
d235 1
a235 1
						    MAXPATHLEN-len);
@


1.5
log
@prototype & void * math cleanup
ok guenther
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.4 2013/03/20 21:49:59 kurt Exp $ */
a19 1
#include <sys/syslimits.h>
d22 1
@


1.4
log
@- Parse colon separated paths into NULL terminated arrays of string
pointers to prepare for adding rpath ORIGIN support.
okay matthew@@ millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.3 2009/12/30 04:30:01 drahn Exp $ */
d37 1
a37 1
char * _dl_default_path[2] = { "/usr/lib", NULL };
d39 3
a41 3
elf_object_t * elf_load_shlib_hint(struct sod *sod, struct sod *req_sod,
    int ignore_hints, char **libpath);
char * elf_find_shlib(struct sod *sodp, char **searchpath, int nohints);
d43 2
a44 1
int elf_match_file(struct sod *sodp, char *name, int namelen);
@


1.3
log
@Remove paths from the prebind code that shouldn't be present.
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.2 2006/05/13 16:33:40 deraadt Exp $ */
d37 1
a37 2
/* TODO - library path from ldconfig */
#define DEFAULT_PATH "/usr/lib"
d40 2
a41 2
    int ignore_hints, const char *libpath);
char * elf_find_shlib(struct sod *sodp, const char *searchpath, int nohints);
d58 1
d73 2
d78 1
a78 1
			ignore_hints, lpath);
d100 1
a100 1
	if (parent->dyn.rpath != NULL) {
d102 1
a102 1
		    ignore_hints, parent->dyn.rpath);
d106 1
a106 1
	if (parent != load_object && load_object->dyn.rpath != NULL) {
d108 1
a108 1
			ignore_hints, load_object->dyn.rpath);
d135 1
a135 1
    int ignore_hints, const char *libpath)
d156 1
a156 1
elf_find_shlib(struct sod *sodp, const char *searchpath, int nohints)
d158 1
a158 1
	char *hint, lp[PATH_MAX + 10], *path;
a160 1
	const char *pp;
d181 1
a181 14
		pp = searchpath;
		while (pp) {
			path = lp;
			while (path < lp + PATH_MAX &&
			    *pp && *pp != ':' && *pp != ';')
				*path++ = *pp++;
			*path = 0;

			/* interpret "" as curdir "." */
			if (lp[0] == '\0') {
				lp[0] = '.';
				lp[1] = '\0';
			}

d183 1
a183 1
			    sodp->sod_major, sodp->sod_minor, lp);
a185 5

			if (*pp)	/* Try curdir if ':' at end */
				pp++;
			else
				pp = 0;
d199 1
a199 1
			searchpath = DEFAULT_PATH;
d201 2
a202 14
	pp = searchpath;
	while (pp) {
		path = lp;
		while (path < lp + PATH_MAX && *pp && *pp != ':' && *pp != ';')
			*path++ = *pp++;
		*path = 0;

		/* interpret "" as curdir "." */
		if (lp[0] == '\0') {
			lp[0] = '.';
			lp[1] = '\0';
		}

		if ((dd = opendir(lp)) != NULL) {
d224 1
a224 1
						    elf_hint_store, lp,
d226 1
a226 1
						if (lp[len-1] != '/') {
a245 5

		if (*pp)	/* Try curdir if ':' at end */
			pp++;
		else
			pp = 0;
@


1.2
log
@some knf and delinting; ok drahn
@
text
@d1 1
a1 1
/* $OpenBSD: library.c,v 1.1 2006/05/12 23:20:52 deraadt Exp $ */
d38 1
a38 1
#define DEFAULT_PATH "/usr/lib:/usr/X11R6/lib:/usr/local/qte/lib"
@


1.1
log
@move the prebind code into ldconfig as the -P option.
next we will want to enhance the verbose mode, fix error handling,
and change the prebind delete code to use the same directory handling
code
ok drahn
@
text
@d1 1
a1 1
/* $OpenBSD: objarray.c,v 1.8 2006/05/12 15:12:42 drahn Exp $ */
d50 1
a50 2
	int ignore_hints;
	int try_any_minor = 0;
d60 1
d77 1
a77 1
		if (object != NULL) 
d100 1
a100 1
			ignore_hints, parent->dyn.rpath);
d110 1
a110 2
	object = elf_load_shlib_hint(&sod, &req_sod,
		ignore_hints, NULL);
d157 1
a161 1
	struct sod tsod, bsod;		/* transient and best sod */
d289 2
a290 1
	if (object == NULL) {
a291 1
	}
d327 4
a330 5
	if ((strcmp((char *)lsod.sod_name, (char *)sodp->sod_name) == 0) &&
	    (lsod.sod_library == sodp->sod_library) &&
	    ((sodp->sod_major == -1) || (sodp->sod_major == lsod.sod_major)) &&
	    ((sodp->sod_minor == -1) ||
	    (lsod.sod_minor >= sodp->sod_minor))) {
@

