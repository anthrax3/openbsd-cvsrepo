head	1.32;
access;
symbols
	OPENBSD_6_1:1.31.0.4
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.29.0.2
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.22.0.4
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.14.0.4
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.38
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.36
	OPENBSD_5_0:1.13.0.34
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.32
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.30
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.26
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.28
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.24
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.22
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.20
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.18
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.16
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	r20000612:1.1.1.1
	dsr:1.1.1;
locks; strict;
comment	@# @;


1.32
date	2017.08.27.21.59.52;	author deraadt;	state Exp;
branches;
next	1.31;
commitid	VUjW1bPAOMU4NF33;

1.31
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.30;
commitid	veGB6uLWx3BTEAfk;

1.30
date	2016.08.28.06.15.32;	author guenther;	state Exp;
branches;
next	1.29;
commitid	Y7AbrDd15D7CrGY4;

1.29
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.28;
commitid	d9R7VGw9CHTkwXE1;

1.28
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.27;
commitid	hneUpr7ZOJCeNeHP;

1.27
date	2016.03.21.01.32.49;	author guenther;	state Exp;
branches;
next	1.26;
commitid	7Tp2uEssgeiK9f77;

1.26
date	2015.11.15.03.41.24;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	kmpP8aoRsEOyxUMj;

1.25
date	2015.09.19.20.56.47;	author guenther;	state Exp;
branches;
next	1.24;
commitid	FcRQ6g8MqXiORdFs;

1.24
date	2015.09.19.20.09.08;	author kettenis;	state Exp;
branches;
next	1.23;
commitid	JFIHG59PKjYwSLdH;

1.23
date	2015.09.13.17.08.04;	author guenther;	state Exp;
branches;
next	1.22;
commitid	BssYI6s6zozAyfkk;

1.22
date	2015.06.01.19.55.20;	author miod;	state Exp;
branches;
next	1.21;
commitid	9lhS1toLXq1HXgio;

1.21
date	2014.07.14.03.54.51;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	fsr4AzfIP3TLhLM2;

1.20
date	2014.07.09.12.51.21;	author guenther;	state Exp;
branches;
next	1.19;
commitid	l16v8zUGQ3906m8T;

1.19
date	2014.07.06.07.28.36;	author otto;	state Exp;
branches;
next	1.18;
commitid	vlK4cqSehsiJVTpr;

1.18
date	2014.07.05.20.41.25;	author miod;	state Exp;
branches;
next	1.17;
commitid	zx3AJZL8OTCTrlVs;

1.17
date	2014.07.05.17.06.18;	author miod;	state Exp;
branches;
next	1.16;
commitid	jSLj33X9mOpIw96Z;

1.16
date	2013.12.23.22.03.52;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2013.12.23.21.49.27;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2012.12.31.10.07.51;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.09.21.01.10;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.09.16.10.04;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.26.22.05.06;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.02.16.57.58;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.09.20.56.34;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.21.16.01.55;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.09.19.06.18;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.11.18.41.17;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.07.08.54.50;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.24.04.17.01;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.24.03.44.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.24.21.35.09;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.13.03.40.35;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.13.03.40.35;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Replace heaps of hand-written syscall stubs with a simpler framework
which is largely MI.
ok visa kettenis
@
text
@/*	$OpenBSD: ldasm.S,v 1.31 2017/01/24 07:48:37 guenther Exp $ */

/*
 * Copyright (c) 1999 Dale Rahn
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define AUX_entry 9

#include <machine/asm.h>
#include <sys/syscall.h>

ENTRY(_dl_start)
	mr	19, 1
	stwu	1, (-16 -((AUX_entry+3)*4))(1)	# Some space.

	mflr	27		/* save off old link register */
	stw	27, 4(19)	/* save in normal location */

	# squirrel away the arguments for main
	mr	20, 3	#argc
	mr	21, 4	#argv
	mr	22, 5	#envp
	mr	23, 6	# ???

	bcl	20, 31, 1f
1:	mflr	30
	addis	30, 30, _GLOBAL_OFFSET_TABLE_-1b@@ha
	addi	30, 30, _GLOBAL_OFFSET_TABLE_-1b@@l

	bcl	20, 31, 1f
1:	mflr	18,
	addis	18, 18, _DYNAMIC-1b@@ha
	addi	18, 18, _DYNAMIC-1b@@l
	lwz	4, 0(30)	# load address of _DYNAMIC according to got.
	sub	4, 18, 4	# determine load offset

	mr	17, 4		# save for _dl_boot

	subi	3, 21, 4	# Get stack pointer (arg0 for _dl_boot).
	addi	4, 1, 8		# dl_data
	mr	5, 18		# dynamicp

	bl	_dl_boot_bind@@local

	mr	3, 21		# argv
	mr	4, 22		# envp
	mr	5, 17		# loff
	addi	6, 1, 8		# dl_data

	bl	_dl_boot@@local

	mtctr	3		# put return value into ctr to execute

	# get back the squirreled away the arguments for main
	mr	3, 20
	mr	4, 21
	mr	5, 22
	mr	6, 23

	lwz	7, _dl_dtors@@got(30)

	mtlr	27
	lwz	1, 0(1)		# Restore stack pointer.
	bctr			# Go execute the 'real' program.

ENTRY(_dl_bind_start)
	stwu	1,-72(1)

	stw	0,8(1)		# save r0 - cerror ;-)
	mflr	0
	stw	0,68(1)		# save	lr

	stw	3,12(1)		# save	r3-r10, C calling convention
	stw	4,20(1)		# r13 - r31 are preserved by called code
	stw	5,24(1)
	stw	6,28(1)
	stw	7,32(1)
	stw	8,36(1)
	stw	9,40(1)
	stw	10,44(1)

	mr	3,12		# obj
	mr	4,11		# reloff
	bl	_dl_bind@@plt	#	_rtld_bind(obj,	reloff)
	mtctr	3

	lwz	3,12(1)
	lwz	4,20(1)
	lwz	5,24(1)
	lwz	6,28(1)
	lwz	7,32(1)
	lwz	8,36(1)
	lwz	9,40(1)
	lwz	10,44(1)

	lwz	0,68(1)		# restore lr
	mtlr	0
	lwz	0,8(1)

	addi	1,1,72
	bctr
@


1.31
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.30 2016/08/28 06:15:32 guenther Exp $ */
a123 41

#define	DL_SYSCALL(n)		DL_SYSCALL2(n,n)
#define	DL_SYSCALL_NOERR(n)	DL_SYSCALL2_NOERR(n,n)
#define	DL_SYSCALL2(n,c)						\
ENTRY(_dl_##n)								\
	li	0, SYS_##c;						\
	sc;								\
	cmpwi	0, 0;							\
	beqlr+;								\
	b	_dl_cerror
#define	DL_SYSCALL2_NOERR(n,c)						\
ENTRY(_dl_##n)								\
	li	0, SYS_##c;						\
	sc;								\
	blr

_dl_cerror:
	neg	3, 3
	blr

DL_SYSCALL(close)
DL_SYSCALL_NOERR(exit)
DL_SYSCALL(fstat)
DL_SYSCALL2(getcwd,__getcwd)
DL_SYSCALL(getdents)
DL_SYSCALL(getentropy)
DL_SYSCALL(sendsyslog)
DL_SYSCALL(pledge)
DL_SYSCALL_NOERR(issetugid)
DL_SYSCALL_NOERR(getthrid)
DL_SYSCALL(mmap)
DL_SYSCALL(mprotect)
DL_SYSCALL(munmap)
DL_SYSCALL(open)
DL_SYSCALL(read)
DL_SYSCALL(readlink)
DL_SYSCALL2(_syscall,__syscall)
DL_SYSCALL(sysctl)
DL_SYSCALL(thrkill)
DL_SYSCALL(utrace)
DL_SYSCALL(write)
@


1.30
log
@ld.so doesn't need gettimeofday or lstat stubs any more

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.29 2016/05/07 19:05:23 guenther Exp $ */
d162 1
@


1.29
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.28 2016/03/21 22:41:29 bluhm Exp $ */
a151 1
DL_SYSCALL(gettimeofday)
a153 1
DL_SYSCALL(lstat)
@


1.28
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.27 2016/03/21 01:32:49 guenther Exp $ */
d154 1
@


1.27
log
@Switch ld.so's stack smash handler from sendsyslog to sendsyslog2
and pass the LOG_CONS flag like libc's handler.

ok deraadt@@ bluhm@@ (who had a similar diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.26 2015/11/15 03:41:24 deraadt Exp $ */
d150 1
a150 1
DL_SYSCALL(sendsyslog2)
@


1.26
log
@ldd(1) sets environment variable LD_TRACE_LOADED_OBJECTS to tell ld.so
that it should show information about the program it loads, rather than
run it.  In that specific case, ld.so can pledge to "stdio rpath" to
ensure that code path in ld.so has no bugs.
Yes, a pledge in ld.so.... who'd have thought!
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.25 2015/09/19 20:56:47 guenther Exp $ */
d150 1
a150 1
DL_SYSCALL(sendsyslog)
@


1.25
log
@kbind has eliminated the need for and use of the bind lock.  Delete it, the
the callback, and the sigprocmask stub.
Keep around the DL_SETBINDLCK case until libpthread stops using it.

discussed with miod@@ at l2k15
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.24 2015/09/19 20:09:08 kettenis Exp $ */
d151 1
@


1.24
log
@Make bootstrapping code compatible with the Secure-PLT ABI.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.23 2015/09/13 17:08:04 guenther Exp $ */
a141 22
	blr

ENTRY(_dl_sigprocmask)
	/* _dl_sigprocmask does not support NULL as the new mask */
#if 0
	cmpwi	4, 0
	bne+	1f
	li	3, 1		/* SIG_BLOCK */
	b	2f
1:
#endif
	lwz	4, 0(4)
2:
	li	0, SYS_sigprocmask
	sc
	cmpwi	0, 0
	bne-	_dl_cerror
	cmpwi	5, 0
	beq-	1f
	stw	3, 0(5)
1:
	li	3, 0
@


1.23
log
@Rename __sysctl syscall to just sysctl, as the userland wrapper is no longer
necessary

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.22 2015/06/01 19:55:20 miod Exp $ */
d47 10
a56 47
	bl	1f
	# this instruction never gets executed but can be used
	# to find the virtual address where the page is loaded.
	bl _GLOBAL_OFFSET_TABLE_@@local-4
	bl _DYNAMIC@@local
1:
	mflr	5		# this stores where we are (+4)
	lwz	18, 0(5)	# load the instruction at offset_sym
				# it contains an offset to the location
				# of the GOT.

	rlwinm	18,18,0,8,30	# mask off the offset portion of the instr.

	/*
	 * these adds effectively calculate the value the
	 * bl _GLOBAL_OFFSET_TABLE_@@local-4
	 * operation that would be below would calculate.
	 */
	add	28, 18, 5
	mr	6, 5		# save offset for later use

	/* mprotect GOT-4 for correct execution of blrl instruction */
	li	0, SYS_mprotect
	mr	3, 28
	li	4, 4
	li	5, 7 /* (PROT_READ|PROT_WRITE|PROT_EXEC) */
	sc

	mr	5, 6

	li	0, 0
	dcbf	5, 18
	sync
	isync
	icbi	5, 18		# make certain that the got table addr is
				# not in the icache
	sync
	isync

	/* This calculates the address of _DYNAMIC the same way
	 * that the GLOBAL_OFFSET_TABLE was calculated.
	 */
	lwz	18, 4(5)
	rlwinm	18,18,0,8,30	# mask off the offset portion of the instr.
	add	8, 18, 5	# address of _DYNAMIC (arg6 for _dl_boot)
	addi	18, 8, 4	# correction.
	lwz	4, 4(28)	# load address of _DYNAMIC according to got.
a60 1

d82 1
a82 3
	bl	_GLOBAL_OFFSET_TABLE_@@local-4
	mflr	31
	lwz	7, _dl_dtors@@got(31)
@


1.22
log
@In the lazy binding routine, make sure we actually allocate the stack we need,
instead of corrupting the caller's stack by mistake.

This fixes the mysterious segfaults in __powerpc_read_tcb() reported on
earlier G3 systems - more recent processors have been luckier...

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.21 2014/07/14 03:54:51 deraadt Exp $ */
d223 1
a223 1
DL_SYSCALL2(sysctl,__sysctl)
@


1.21
log
@Now that we have sendsyslog(2), we can directly use it in the
(previously completely retarded) stack_smash_handler of ld.so
ok beck miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.20 2014/07/09 12:51:21 guenther Exp $ */
d129 1
a129 1
	stwu	1,-64(1)
d162 1
a162 1
	addi	1,1,64
@


1.20
log
@_dl_fcntl() is no longer used; kill the stubs

ok otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.19 2014/07/06 07:28:36 otto Exp $ */
d212 1
@


1.19
log
@move from sysclt(KERN_ARND) to getentropy(2); ok miod@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.18 2014/07/05 20:41:25 miod Exp $ */
a207 1
DL_SYSCALL(fcntl)
@


1.18
log
@Implement _dl_mmap as direct mmap(2) wrapper, without needing to use
__syscall(2) - calling convention will conveniently provide the padding
argument.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.17 2014/07/05 17:06:18 miod Exp $ */
d212 1
@


1.17
log
@Add more sugar to build syscall stubs, and turn them from inlines to real
entry points; also, make sure syscall failures return -errno rather than -1.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.16 2013/12/23 22:03:52 kettenis Exp $ */
d215 1
@


1.16
log
@Make ld.so pass its cleanup handler in r7 as required by the PowerPC System V
ABI, and stop calling atexit(4) directly from ld.so on powerpc.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.15 2013/12/23 21:49:27 kettenis Exp $ */
d164 60
@


1.15
log
@Fix indentation.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.14 2012/12/31 10:07:51 miod Exp $ */
a118 1
	li	7, 0
d120 3
@


1.14
log
@Spell `calculation' correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.13 2003/07/09 21:01:10 drahn Exp $ */
d42 4
a45 4
	mr 20, 3	#argc
	mr 21, 4	#argv
	mr 22, 5	#envp
	mr 23, 6	# ???
d58 1
a58 1
	rlwinm 18,18,0,8,30	# mask off the offset portion of the instr.
d112 1
a112 1
	mtctr 3			# put return value into ctr to execute
d115 5
a119 5
	mr 3, 20
	mr 4, 21
	mr 5, 22
	mr 6, 23
	li 7, 0
d122 1
a122 1
	mtlr 27
@


1.13
log
@changes to ld.so to be compatible with newer binutils, requires
slight changes in the startup code on most archs. ok art@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.12 2003/06/09 16:10:04 deraadt Exp $ */
d63 1
a63 1
	 * operation that would be below would calulate.
@


1.12
log
@pefo 3/4 licence cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.11 2003/02/26 22:05:06 drahn Exp $ */
a28 9
/*
 * #ifdef blrl_never_causes_illegal_access
 * background for the else of this define
 * On the machine this code is being written, on a large portion
 * of the tims this code is executed the blrl instruct causes an
 * illegal instruction, hopefully by touching the page with a load
 * will prevent the execute access from faulting.
 */

a46 2
	.local	.L___offset_sym
	.type .L___offset_sym,@@function
a47 1
.L___offset_sym:
d51 1
d86 9
a94 8
	# calculate where we want to be (via the got)
	bl _GLOBAL_OFFSET_TABLE_@@local-4
	mflr 28


	lwz	4, .L___offset_sym@@got(28)
	mr	6, 4		# make copy of register for debugging

d96 1
a96 2
	sub	4, 5, 4		# calculate offset (arg1 for _dl_boot)
	mr	17, 4
d101 1
@


1.11
log
@Initialized the ABI stated 'cleanup' parameter to _start. This parameter
is not used, but is now initialized to a valid value.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.10 2003/02/02 16:57:58 deraadt Exp $ */
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Dale Rahn.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@knf & ansi; drahn ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.9 2002/12/09 20:56:34 drahn Exp $ */
d135 1
@


1.9
log
@Build ld.so as a normal shared object, not with special linkage.
mprotect the necessary bit to make this work right. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.8 2002/10/21 16:01:55 drahn Exp $ */
d83 1
a83 1
	mr	6, 5 	# save offset for later use
@


1.8
log
@Simplify the ld.so asm api, the data is available other ways.
tested by naddy@@ and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.7 2002/09/09 19:06:18 drahn Exp $ */
d47 1
d83 10
@


1.7
log
@Add lazy binding support for powerpc ld.so. ok pvalchev@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.6 2002/08/11 18:41:17 drahn Exp $ */
a67 1
	bl _DYNAMIC@@local
a88 1

a91 8
	addi	28, 28, 4
	mr	29, 28

	lwz	30, 0(28)	# this loads the first entry of the GOT
				# thus forcing it to be paged in when
				# we jump to it below.


a99 7
	/* This cheats and calculates the address of _DYNAMIC
	 * the same way that the GLOBAL_OFFSET_TABLE was calcuated
	 */
	lwz	18, 4(5)
	rlwinm 18,18,0,8,30	# mask off the offset portion of the instr.
	add	8, 18, 5	# address of _DYNAMIC (arg6 for _dl_boot)
	addi	18, 8, 4	# correction.
d106 1
a106 3
	mr	4, 17		# loff
	mr	5, 18		# dynamicp
	addi	6, 1, 8		# dl_data
@


1.6
log
@The parameter dynp was never used, rather than pass in a dummy on most
archs and a nasty calcuation on others, remove the parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.5 2002/07/07 08:54:50 jufi Exp $ */
d149 36
a184 4
	.globl	_dl_rt_resolve
	.data
_dl_rt_resolve:
	.long	0
@


1.5
log
@
typos/grammar/better words
in comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.4 2002/05/24 04:17:01 deraadt Exp $ */
d132 1
a132 2
	mr	6, 18		# dynamicp
	addi	7, 1, 8		# dl_data
@


1.4
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.3 2002/05/24 03:44:38 deraadt Exp $ */
d78 1
a78 1
	 * these adds effectively calculates the value the
@


1.3
log
@various KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.2 2001/09/24 21:35:09 drahn Exp $ */
d113 1
a113 1
	lwz     18, 4(5)
@


1.2
log
@API change between asm code and _dl_boot_bind(). Simply and
reduce number of parameters. Alpha changes coming shortly.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.1.1.1 2000/06/13 03:40:35 rahnds Exp $ */
d5 1
a5 1
 * 
d48 1
a48 1
ENTRY(_dl_start)		
d63 1
a63 1
	bl 	1f
d84 1
a84 1
	li 	0, 0
d95 1
a95 1
	mr 	29, 28
d107 2
a108 2
	lwz 	4, .L___offset_sym@@got(28)
	mr 	6, 4		# make copy of register for debugging
d137 1
a137 1
	mtctr 3 		# put return value into ctr to execute
d148 1
a148 1
	bctr 			# Go execute the 'real' program.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d50 1
a50 1
	stwu	1, (-16 -((AUX_entry+1)*4))(1)	# Some space.
d122 1
a122 1
	mr	3, 19		# Get stack pointer (arg0 for _dl_boot).
d124 2
a125 5
	mr	5, 20		# argc
	mr	6, 21		# argv
	mr	7, 22		# envp
	mr	8, 18		# dynamicp
	addi	9, 1, 8		# dl_data
@


1.1.1.1
log
@Updated version of ld.so, contains additional functionality and fixes/
design changes required by egcs.

added support for ldconfig/ld.so.hints

changes to low level relocation code, required by egcs pic
code generation that moved global variable loads to before the
self relocation was performed. Only powerpc supported, mips code not updated.

Code cleaned up somewhat reasonably.

This code needs to be reviewed closely for significant problems 
such as correctness and security.

@
text
@@
