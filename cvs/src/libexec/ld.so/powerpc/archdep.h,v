head	1.21;
access;
symbols
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.20
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.16
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.14
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.24
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.20
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.18
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.16
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.14
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.12
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	r20000612:1.1.1.1
	dsr:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.20;
commitid	veGB6uLWx3BTEAfk;

1.20
date	2017.01.20.10.40.30;	author guenther;	state Exp;
branches;
next	1.19;
commitid	uAlj3GUarQrChIDM;

1.19
date	2017.01.09.22.51.04;	author kettenis;	state Exp;
branches;
next	1.18;
commitid	8mveS1UjNqlN99uR;

1.18
date	2015.12.06.23.36.12;	author guenther;	state Exp;
branches;
next	1.17;
commitid	g8Z7pgqt28AVPEBX;

1.17
date	2015.09.19.20.16.25;	author kettenis;	state Exp;
branches;
next	1.16;
commitid	b8o8y9ATrPwF8T86;

1.16
date	2014.11.03.17.50.56;	author guenther;	state Exp;
branches;
next	1.15;
commitid	FlXbNaFQfyra9gBu;

1.15
date	2014.07.05.12.22.41;	author miod;	state Exp;
branches;
next	1.14;
commitid	9W9uPz2PrBSw3aOa;

1.14
date	2010.01.02.12.16.35;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.24.20.16.12;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.09.16.10.04;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.15.22.43.06;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.25.10.39.52;	author pefo;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.12.01.05.23;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.12.20.18.30;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.24.04.17.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.24.03.44.38;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.29.15.52.30;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.21.23.17.53;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.19.02.44.16;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.01.00.54.35;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.13.03.40.32;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.13.03.40.32;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.21
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@/*	$OpenBSD: archdep.h,v 1.20 2017/01/20 10:40:30 guenther Exp $ */

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _POWERPC_ARCHDEP_H_
#define _POWERPC_ARCHDEP_H_

#define	RELOC_TAG	DT_RELA

#define	MACHID	EM_PPC	/* ELF e_machine ID value checked */

#include <elf_abi.h>
#include <machine/reloc.h>
#include "syscall.h"
#include "util.h"

/*
 *	The following functions are declared inline so they can
 *	be used before bootstrap linking has been finished.
 */

static inline void
_dl_dcbf(Elf32_Addr *addr)
{
	__asm__ volatile ("dcbst 0, %0\n\t"
	    "sync\n\t"
	    "icbi 0, %0\n\t"
	    "sync\n\t"
	    "isync"
	    : : "r" (addr) : "0");
}

static inline void
RELOC_DYN(Elf32_Rela *r, const Elf32_Sym *s, Elf32_Addr *p, unsigned long v)
{
	if (ELF32_R_TYPE(r->r_info) == RELOC_RELATIVE) {
		*p = v + r->r_addend;
	} else if (ELF32_R_TYPE(r->r_info) == RELOC_JMP_SLOT) {
		Elf32_Addr val = v + s->st_value + r->r_addend -
		    (Elf32_Addr)(p);
		if (((val & 0xfe000000) != 0) &&
		    ((val & 0xfe000000) != 0xfe000000)) {
			/* invalid offset */
			_dl_exit(20);
		}
		val &= ~0xfc000000;
		val |=  0x48000000;
		*p = val;
		_dl_dcbf(p);
	} else if (ELF32_R_TYPE((r)->r_info) == RELOC_GLOB_DAT) {
		*p = v + s->st_value + r->r_addend;
	} else {
		_dl_exit(6);
	}
}

#define RELOC_GOT(obj, offs)

#endif /* _POWERPC_ARCHDEP_H_ */
@


1.20
log
@Delete ancient macros and unnecessary #includes

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.19 2017/01/09 22:51:04 kettenis Exp $ */
a76 2
		/* XXX - printf might not work here, but we give it a shot. */
		_dl_printf("Unknown bootstrap relocation.\n");
@


1.19
log
@Remove dependency on __got_{start,end} symbols and look at PT_GNU_RELRO
instead.  Result in a few more pages that aren't writable on some platforms
(such as hppa).  Based on an initial diff from guenther@@.

Thanks to deraadt@@ for testing.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.18 2015/12/06 23:36:12 guenther Exp $ */
a33 2
#define	DL_MALLOC_ALIGN	4	/* Arch constraint or otherwise */

a34 3

#define	RELTYPE	Elf32_Rela
#define	RELSIZE	sizeof(Elf32_Rela)
@


1.18
log
@Simplify the relocation code for the ld.so bootstrap and static pie: track
just the dynamic tags are needed instead of reusing the generic elf_object_t
structure.

testing and feedback from miod@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.17 2015/09/19 20:16:25 kettenis Exp $ */
a88 2

#define GOT_PERMS PROT_READ
@


1.17
log
@Remove PROT_EXEC bit from GOT_PERMS.  ld.so doesn't need it anymore, and
rcrt0.o will add it for BSS-PLT binaries if necessary.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.16 2014/11/03 17:50:56 guenther Exp $ */
d32 2
d63 1
a63 9
RELOC_REL(Elf_Rel *r, const Elf_Sym *s, Elf_Addr *p, unsigned long v)
{
	/* PowerPC does not use REL type relocations */
	_dl_exit(20);
}

static inline void
RELOC_RELA(Elf32_Rela *r, const Elf32_Sym *s, Elf32_Addr *p, unsigned long v,
    Elf_Addr *pltgot)
@


1.16
log
@Eliminate RTLD_PROTECT_PLT: ld.so is built with -Bsymbolic so the
PLT is empty/unused.  On at least macppc and sparc64, ld.so's attempt
to mprotect its PLT could instead hit its own allocated data and
cause a segfault shortly there after.

While here, take a shot at preventing the same issue with the GOT
by checking for __got_start != __got_end.

reproduction *with ktracing* by afresh1@@ provided the key data
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.15 2014/07/05 12:22:41 miod Exp $ */
d96 1
a96 1
#define GOT_PERMS (PROT_READ|PROT_EXEC)
@


1.15
log
@No need to redefine DT_PROCNUM and DT_BIND_NOW here, these are provided by MI
<elf_abi.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.14 2010/01/02 12:16:35 kettenis Exp $ */
a42 2

#define RTLD_PROTECT_PLT
@


1.14
log
@Fix handling of hppa RELOC_IPLT relocations during 'bootstrap relocation'.

ok miod@@, deraadt@@, jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.13 2004/05/24 20:16:12 drahn Exp $ */
a44 6

/* HACK */
#define DT_PROCNUM 0
#ifndef DT_BIND_NOW
#define DT_BIND_NOW 0
#endif
@


1.13
log
@Change define used to deal with PLT protection, use postive logic not negative.
ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.12 2003/06/09 16:10:04 deraadt Exp $ */
d76 2
a77 1
RELOC_RELA(Elf32_Rela *r, const Elf32_Sym *s, Elf32_Addr *p, unsigned long v)
@


1.12
log
@pefo 3/4 licence cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.11 2003/02/15 22:43:06 drahn Exp $ */
d43 2
@


1.11
log
@After relocation is completed, remove write protection from GOT/PLT in ld.so.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.10 2002/10/25 10:39:52 pefo Exp $ */
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@Some small fixes in MI code for mips backport. A new reloc md function,
RELOC_GOT, was added to handle mips got bootstrap reloc.

Also remove workaround used on previous versions of binutils for mips.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.9 2002/08/12 01:05:23 drahn Exp $ */
d106 2
@


1.9
log
@Add support for REL type relocations, all currently supported arch
use only RELA type relocations, but that could change. ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.8 2002/07/12 20:18:30 drahn Exp $ */
d104 2
@


1.8
log
@Change ld.so search order/method to match the a.out ld.so.

run destructors on dlclose()

Move more symbols into _dl_ private space, so that the proper (libc)
version of the function will be used.

Add readdir() functionality to perform the proper library searching.

Support DL_PRELOAD

Do not relocate symbols if ld.so is being traced (and will exit).

Misc lint cleanup.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.7 2002/05/24 04:17:01 deraadt Exp $ */
d70 7
@


1.7
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.6 2002/05/24 03:44:38 deraadt Exp $ */
d60 1
@


1.6
log
@various KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.5 2002/04/29 15:52:30 drahn Exp $ */
d63 6
a68 6
  __asm__ volatile ("dcbst 0, %0\n\t"
		    "sync\n\t"
		    "icbi 0, %0\n\t"
		    "sync\n\t"
		    "isync"
                    : : "r" (addr) : "0");
@


1.5
log
@Clean up RELOC_RELATIVE reloction type, do correct relocation instead
of incorrect symbol handling for it. RELOC_RELA() is not a macro, so
remove extra () from the code, try to print error and exit if unknown
relocation type is encountered.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.4 2002/02/21 23:17:53 drahn Exp $ */
d5 1
a5 1
 * 
d52 1
a52 1
#ifndef DT_BIND_NOW 
d74 1
a74 1
	if(ELF32_R_TYPE(r->r_info) == RELOC_RELATIVE) {
d76 1
a76 1
	} else if(ELF32_R_TYPE(r->r_info) == RELOC_JMP_SLOT) {
d78 7
a84 8
			(Elf32_Addr)(p); 			
		if (((val & 0xfe000000) != 0) &&	
			((val & 0xfe000000) != 0xfe000000))
		{					
			/* invalid offset */	
			_dl_exit(20);			
		} 				
		val &= ~0xfc000000;	
d86 1
a86 1
		*p = val;	
d88 1
a88 1
	} else if(ELF32_R_TYPE((r)->r_info) == RELOC_GLOB_DAT) {
d90 1
a90 1
	} else {					
@


1.4
log
@cleanup of MD/MI ld.so (elf), most changes by art@@ cleanup by me.
tested on alpha sparc64 powerpc.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.3 2000/10/19 02:44:16 drahn Exp $ */
d72 1
a72 2
RELOC_RELA(Elf32_Rela *r,
	const Elf32_Sym *s, Elf32_Addr *p, int v)
d74 4
a77 10
	if(ELF32_R_TYPE((r)->r_info) == RELOC_RELATIVE) {
		if((ELF32_ST_BIND((s)->st_info) == STB_LOCAL) &&
		   ((ELF32_ST_TYPE((s)->st_info) == STT_SECTION) ||
		   (ELF32_ST_TYPE((s)->st_info) == STT_NOTYPE)) ) {
			*(p) = (v) + (r)->r_addend;
		} else {
			*(p) = (v) + (s)->st_value + (r)->r_addend;
		}
	} else if(ELF32_R_TYPE((r)->r_info) == RELOC_JMP_SLOT) {
		Elf32_Addr val = (v) + (s)->st_value + (r)->r_addend -
d87 1
a87 1
		*(p) = val;	
d90 1
a90 1
		*(p) = (v) + (s)->st_value + (r)->r_addend;
d92 3
a94 1
		/* error */
@


1.3
log
@Fix bug in dl_strcmp, it is not always legal to access a pointer
at offset -1, the code that was here was very odd, the corrected code
was basically copied from the libsa version.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.3 2000/10/19 02:41:57 drahn Exp $ */
d47 2
a56 15
 *	Simple reloc of REL32's. Used by bootstrapping.
 */
#define	SIMPLE_RELOC(r, s, p, v)					\
	if(ELF32_R_TYPE((r)->r_info) == RELOC_32) {			\
		if((ELF32_ST_BIND((s)->st_info) == STB_LOCAL) &&	\
		   (ELF32_ST_TYPE((s)->st_info) == STT_SECTION ||	\
		    ELF32_ST_TYPE((s)->st_info) == STT_NOTYPE) ) {	\
			*(p) += (v);					\
		}							\
		else {							\
			*(p) = (v) + (s)->st_value;			\
		}							\
	}

/*
a68 75
}

static inline int _dl_write (int fd, const char* buf, int len);
static inline void
_dl_wrstderr(const char *s)
{
	while(*s) {
		_dl_write(2, s, 1);
		s++;
	}
}

static inline void *
_dl_memset(void *p, const char v, size_t c)
{
	char *ip = p;

	while(c--)
		*ip++ = v;
	return(p);
}

static inline int
_dl_strlen(const char *p)
{
	const char *s = p;

	while(*s != '\0')
		s++;
	return(s - p);
}

static inline char *
_dl_strcpy(char *d, const char *s)
{
	char *rd = d;

	while((*d++ = *s++) != '\0');

	return(rd);
}

static inline int
_dl_strncmp(const char *d, const char *s, int c)
{
	while(c-- && *d && *d == *s) {
		d++;
		s++;
	};
	if(c < 0) {
		return(0);
	}
	return(*d - *s);
}
 
static inline int
_dl_strcmp(const char *d, const char *s)
{
	while(*d && *d == *s) {
		d++;
		s++;
	}
	return(*d - *s);
}
 
static inline const char *
_dl_strchr(const char *p, const int c)
{
	while(*p) {
		if(*p == c) {
			return(p);
		}
		p++;
	}
	return(0);
@


1.2
log
@Sync the cache as specified by the powerpc manuals, didn't change anything.
but is more correct.
@
text
@d1 1
a1 1
/*	$OpenBSD: archdep.h,v 1.1.1.1 2000/06/13 03:40:32 rahnds Exp $ */
d127 4
a130 1
	while(c-- && *d && *d++ == *s++) {};
d134 1
a134 1
	return(d[-1] - s[-1]);
d140 5
a144 2
	while(*d && *d++ == *s++) {};
	return(d[-1] - s[-1]);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d76 5
a80 2
  __asm__ volatile ("li 0, 0\n\t"
                    "dcbf 0, %0"
@


1.1.1.1
log
@Updated version of ld.so, contains additional functionality and fixes/
design changes required by egcs.

added support for ldconfig/ld.so.hints

changes to low level relocation code, required by egcs pic
code generation that moved global variable loads to before the
self relocation was performed. Only powerpc supported, mips code not updated.

Code cleaned up somewhat reasonably.

This code needs to be reviewed closely for significant problems 
such as correctness and security.

@
text
@@
