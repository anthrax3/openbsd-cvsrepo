head	1.26;
access;
symbols
	OPENBSD_6_1:1.25.0.4
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.6.0.26
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.24
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@# @;


1.26
date	2017.08.27.21.59.52;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	VUjW1bPAOMU4NF33;

1.25
date	2017.01.24.07.48.37;	author guenther;	state Exp;
branches;
next	1.24;
commitid	veGB6uLWx3BTEAfk;

1.24
date	2016.08.28.06.15.32;	author guenther;	state Exp;
branches;
next	1.23;
commitid	Y7AbrDd15D7CrGY4;

1.23
date	2016.08.09.03.58.35;	author guenther;	state Exp;
branches;
next	1.22;
commitid	3KsTmUfC2TQAqMgb;

1.22
date	2016.05.07.19.05.23;	author guenther;	state Exp;
branches;
next	1.21;
commitid	d9R7VGw9CHTkwXE1;

1.21
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.20;
commitid	hneUpr7ZOJCeNeHP;

1.20
date	2016.03.21.01.32.48;	author guenther;	state Exp;
branches;
next	1.19;
commitid	7Tp2uEssgeiK9f77;

1.19
date	2015.11.15.03.41.24;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	kmpP8aoRsEOyxUMj;

1.18
date	2015.09.19.20.56.47;	author guenther;	state Exp;
branches;
next	1.17;
commitid	FcRQ6g8MqXiORdFs;

1.17
date	2015.09.13.17.08.03;	author guenther;	state Exp;
branches;
next	1.16;
commitid	BssYI6s6zozAyfkk;

1.16
date	2014.07.14.03.54.51;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	fsr4AzfIP3TLhLM2;

1.15
date	2014.07.09.12.51.20;	author guenther;	state Exp;
branches;
next	1.14;
commitid	l16v8zUGQ3906m8T;

1.14
date	2014.07.06.07.28.36;	author otto;	state Exp;
branches;
next	1.13;
commitid	vlK4cqSehsiJVTpr;

1.13
date	2014.07.05.16.59.36;	author miod;	state Exp;
branches;
next	1.12;
commitid	pXrmuPqTP2udNBuA;

1.12
date	2013.12.25.15.01.39;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2013.08.13.05.52.18;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.01.09.57.58;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.05.12.58.03;	author kurt;	state Exp;
branches;
next	1.8;

1.8
date	2012.12.22.11.46.16;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.24.03.26.56;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.03.16.10.52;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.23.06.04.03;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.25.15.56.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.09.21.09.31;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.09.16.47.19;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.07.06.00.49;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Replace heaps of hand-written syscall stubs with a simpler framework
which is largely MI.
ok visa kettenis
@
text
@/*	$OpenBSD: ldasm.S,v 1.25 2017/01/24 07:48:37 guenther Exp $ */

/*
 * Copyright (c) 2004 Dale Rahn
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define DL_DATA_SIZE	(16 * 4)	/* XXX */
#include <machine/asm.h>
#include <sys/syscall.h>

ENTRY(_dl_start)
	mov	fp, sp
	mov	r5, sp
	mov	lr, r6				@@ save lr
	sub	sp, sp, #4+4+DL_DATA_SIZE
	add	r7, sp, #4			@@ dl_data

	mov	r0, fp				@@ original stack
	mov	r1, r7				@@ dl_data

	ldr	r8, .L_GOT			@@ calculate address of GOT...
1:	add	r8, pc, r8			@@ into r8

	ldr	r2, .L__DYNAMIC			@@ &_DYNAMIC
	add	r2, r2, r8 

	bl	_dl_boot_bind

	add	r0, r5, #4			@@ argv
	ldr	r1, [r5, #0x0]			@@ envp
	add	r1, r1, #2
	add	r1, fp, r1, lsl #2
	ldr	r2, [r7, #7*4]			@@ loff from dl_data
	mov	r3, r7				@@ dl_data
	bl	_dl_boot

	mov	sp, fp
	mov	fp, #0
	mov	lr, r6

	mov	r1, r0
	ldr	r0, .L_dl_dtors
	add	r0, r0, r8 
	mov	pc, r1
.L_GOT:
	.long	_GLOBAL_OFFSET_TABLE_-(1b+8)
.L__DYNAMIC:
	.long	_DYNAMIC(GOTOFF)
.L_dl_dtors:
	.long	_dl_dtors(GOTOFF)


ENTRY(_dl_bind_start)
	/*
	 * ip is pointer to got entry for this relocation
	 * lr is pointer to pltgot[2], which is entry -1 of got plt reloc.
	 * return address is on stack
	 */
	stmdb	sp!, {r0-r4,sl,fp}

	sub	r1, ip, lr		/* r1 = 4 * (n + 1) */
	sub	r1, r1, #4		/* r1 = 4 * n */
	mov	r1, r1, lsr #2		/* r1 = n */

	ldr	r0, [lr, #-4]
	bl	_dl_bind
	mov	ip, r0
	ldmia	sp!, {r0-r4,sl,fp,lr}
	mov	pc, ip
@


1.25
log
@On fatal errors, kill ourselves with thrkill(0,9,NULL) instead of
simply exiting, via helper functions _dl_die(), _dl_diedie(), and
_dl_oom().

prompted by a complaint from jsing@@
ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.24 2016/08/28 06:15:32 guenther Exp $ */
a31 1
#include <SYS.h>
a91 51

	/* STUB */


/* ld.so SYSCALLS */

#define DL_SYSCALL(n) DL_SYSCALL2(n,n)
#define DL_SYSCALL2(n,c)					\
	.global		__CONCAT(_dl_,n)		;\
	.type		__CONCAT(_dl_,n)%function	;\
__CONCAT(_dl_,n):					;\
	SYSTRAP(c)					;\
	bcs	.L_cerr					;\
	mov	pc, lr

	.section	".text"
	.align		4
DL_SYSCALL(close)


	.global		_dl_exit
	.type		_dl_exit%function
_dl_exit:
	SYSTRAP(exit)
	1:
		b 1b

DL_SYSCALL(issetugid)
DL_SYSCALL(getthrid)
DL_SYSCALL2(_syscall,__syscall)
DL_SYSCALL(munmap)
DL_SYSCALL(mprotect)
DL_SYSCALL(open)
DL_SYSCALL(read)
DL_SYSCALL(write)
DL_SYSCALL(fstat)
DL_SYSCALL(readlink)
DL_SYSCALL(utrace)
DL_SYSCALL(getentropy)
DL_SYSCALL(sendsyslog)
DL_SYSCALL(pledge)
DL_SYSCALL2(getcwd,__getcwd)
DL_SYSCALL(sysctl)
DL_SYSCALL2(set_tcb,__set_tcb)
DL_SYSCALL(thrkill)

DL_SYSCALL(getdents)

.L_cerr:
	rsb	r0, r0, #0		/* r0 = -errno */
	mov	pc, lr
@


1.24
log
@ld.so doesn't need gettimeofday or lstat stubs any more

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.23 2016/08/09 03:58:35 guenther Exp $ */
d137 1
@


1.23
log
@Teach arm to pass &_DYNAMIC to _dl_boot_bind(); can optimize later in tree
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.22 2016/05/07 19:05:23 guenther Exp $ */
a128 1
DL_SYSCALL(gettimeofday)
a129 1
DL_SYSCALL(lstat)
@


1.22
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.21 2016/03/21 22:41:29 bluhm Exp $ */
d44 6
a64 3
	ldr	r2, .L_GOT
1:
	add	r2, pc, r2
d66 1
a66 1
	add	r0, r0, r2 
d70 2
@


1.21
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.20 2016/03/21 01:32:48 guenther Exp $ */
d116 1
d133 1
@


1.20
log
@Switch ld.so's stack smash handler from sendsyslog to sendsyslog2
and pass the LOG_CONS flag like libc's handler.

ok deraadt@@ bluhm@@ (who had a similar diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.19 2015/11/15 03:41:24 deraadt Exp $ */
d128 1
a128 1
DL_SYSCALL(sendsyslog2)
@


1.19
log
@ldd(1) sets environment variable LD_TRACE_LOADED_OBJECTS to tell ld.so
that it should show information about the program it loads, rather than
run it.  In that specific case, ld.so can pledge to "stdio rpath" to
ensure that code path in ld.so has no bugs.
Yes, a pledge in ld.so.... who'd have thought!
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.18 2015/09/19 20:56:47 guenther Exp $ */
d128 1
a128 1
DL_SYSCALL(sendsyslog)
@


1.18
log
@kbind has eliminated the need for and use of the bind lock.  Delete it, the
the callback, and the sigprocmask stub.
Keep around the DL_SETBINDLCK case until libpthread stops using it.

discussed with miod@@ at l2k15
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.17 2015/09/13 17:08:03 guenther Exp $ */
d129 1
@


1.17
log
@Rename __sysctl syscall to just sysctl, as the userland wrapper is no longer
necessary

ok deraadt@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.16 2014/07/14 03:54:51 deraadt Exp $ */
a132 14

	.global		_dl_sigprocmask
	.type		_dl_sigprocmask%function
_dl_sigprocmask:
	teq	r1, #0
	moveq	r0, #1
	moveq	r1, #0
	ldrne	r1, [r1]
	SYSTRAP(sigprocmask)
	bcs	.L_cerr
	teq	r2, #0
	strne	r0, [r2]
	mov	r0, #0
	mov	pc, lr
@


1.16
log
@Now that we have sendsyslog(2), we can directly use it in the
(previously completely retarded) stack_smash_handler of ld.so
ok beck miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.15 2014/07/09 12:51:20 guenther Exp $ */
d130 1
a130 1
DL_SYSCALL2(sysctl,__sysctl)
@


1.15
log
@_dl_fcntl() is no longer used; kill the stubs

ok otto@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.14 2014/07/06 07:28:36 otto Exp $ */
d128 1
@


1.14
log
@move from sysclt(KERN_ARND) to getentropy(2); ok miod@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.13 2014/07/05 16:59:36 miod Exp $ */
a122 1
DL_SYSCALL(fcntl)
@


1.13
log
@Unlike libc syscall stubs, ld.so syscall stubs are expected to return -errno,
rather than -1, upon failure.

Even though nothing in ld.so currently needs to explicitely check for specific
error values, consistency doesn't hurt.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.12 2013/12/25 15:01:39 miod Exp $ */
d128 1
@


1.12
log
@Pass _dl_dtors as the csu cleanup routine on arm.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.11 2013/08/13 05:52:18 guenther Exp $ */
d148 1
a148 2
	mov	r0, #0
	sub	r0, r0, #1
@


1.11
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.10 2013/06/01 09:57:58 miod Exp $ */
d59 5
a63 1
	mov	r0, #0
d65 4
@


1.10
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.9 2013/04/05 12:58:03 kurt Exp $ */
d123 1
a123 1
DL_SYSCALL(getdirentries)
@


1.9
log
@- Add ORIGIN, OSNAME, OSREL and PLATFORM substitution support for rpaths.
Improvements and okay matthew@@, millert@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.8 2012/12/22 11:46:16 kettenis Exp $ */
d119 1
@


1.8
log
@Zero %r0 before transferring control to the main program, to indicate that
the main program should not register a cleanup handler with atexit(3).
This will allow us to add the cleanup handler registration code to crt0.c
and have ld.so pass its cleanup handler to the main program in the future.

tested by tobiasu@@
ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.7 2012/10/24 03:26:56 guenther Exp $ */
d117 3
@


1.7
log
@Garbage-collect the _dl_stat() routine, now unused

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.6 2006/05/03 16:10:52 drahn Exp $ */
d58 3
a60 1
	mov	pc, r0
@


1.6
log
@prebind - how to prelink a binary without throwing security out the window

Prelink fixes the address of libraries making 'return to libc' attacks trival,
prebind uses a different method to achieve most of the same gains, however
without adding any security conerns.

Still under development, now in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.5 2005/10/23 06:04:03 drahn Exp $ */
a111 1
DL_SYSCALL(stat)
@


1.5
log
@Use libc's SYS.h and SYSTRAP instead of rolling own. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.4 2004/05/25 15:56:18 deraadt Exp $ */
d115 1
@


1.4
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.3 2004/02/09 21:09:31 drahn Exp $ */
d32 1
a32 1
#include <arm/swi.h>
d89 1
a89 1
	swi	SWI_OS_NETBSD|__CONCAT(SYS_,c)		;\
d101 1
a101 1
	swi	SWI_OS_NETBSD|SYS_exit
d126 1
a126 1
	swi	SWI_OS_NETBSD|SYS_sigprocmask
@


1.3
log
@Enable lazy binding on arm:
  _dl_bind_start inspired by netbsd.
  changed a define to LD_ALLOW_WRITABLE_TEXT, should this be allowed?
  remove plt protect code, arm has a text PLT.
  relocate the got entries associated with the plt.
  perform got protect/unprotect for lazy binding updates.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.2 2004/02/09 16:47:19 drahn Exp $ */
d71 1
a71 1
	mov     r1, r1, lsr #2		/* r1 = n */
d97 1
a97 1
	
d118 1
a118 1
	
d132 1
a132 1
	
@


1.2
log
@Use macros to reduce the amount of hand written asm. inspired by future amd64
code. no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.1 2004/02/07 06:00:49 drahn Exp $ */
d62 16
@


1.1
log
@Dynamic linker support for arm. non-lazy binding works.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.1 2004/01/18 22:02:08 drahn Exp $ */
a43 1

d62 1
d68 9
d79 2
a80 6
	.global		_dl_close
	.type		_dl_close%function
_dl_close:
	swi	SWI_OS_NETBSD|SYS_close
	bcs	.L_cerr
	mov	pc, lr
d89 11
a99 7
	.global		_dl_issetugid
	.type		_dl_issetugid%function
_dl_issetugid:
	swi	SWI_OS_NETBSD|SYS_issetugid
	bcs	.L_cerr
	mov	pc, lr
	
d101 1
a101 76
	.global		_dl__syscall
	.type		_dl__syscall%function
_dl__syscall:
	swi	SWI_OS_NETBSD|SYS___syscall
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_munmap
	.type		_dl_munmap%function
_dl_munmap:
	swi	SWI_OS_NETBSD|SYS_munmap
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_mprotect
	.type		_dl_mprotect%function
_dl_mprotect:
	swi	SWI_OS_NETBSD|SYS_mprotect
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_open
	.type		_dl_open%function
_dl_open:
	swi	SWI_OS_NETBSD|SYS_open
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_read
	.type		_dl_read%function
_dl_read:
	swi	SWI_OS_NETBSD|SYS_read
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_write
	.type		_dl_write%function
_dl_write:
	swi	SWI_OS_NETBSD|SYS_write
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_stat
	.type		_dl_stat%function
_dl_stat:
	swi	SWI_OS_NETBSD|SYS_stat
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_fstat
	.type		_dl_fstat%function
_dl_fstat:
	swi	SWI_OS_NETBSD|SYS_fstat
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_fcntl
	.type		_dl_fcntl%function
_dl_fcntl:
	swi	SWI_OS_NETBSD|SYS_fcntl
	bcs	.L_cerr
	mov	pc, lr

	.global		_dl_sysctl
	.type		_dl_sysctl%function
_dl_sysctl:
	swi	SWI_OS_NETBSD|SYS___sysctl
	bcs	.L_cerr
	mov	pc, lr
	
	.global		_dl_getdirentries
	.type		_dl_getdirentries%function
_dl_getdirentries:
	swi	SWI_OS_NETBSD|SYS_getdirentries
	bcs	.L_cerr
	mov	pc, lr
@

