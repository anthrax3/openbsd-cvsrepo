head	1.22;
access;
symbols
	OPENBSD_3_1:1.21.0.2
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.12.0.4
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.11.0.4
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.8.0.6
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2002.05.06.19.48.21;	author deraadt;	state dead;
branches;
next	1.21;

1.21
date	2002.03.16.19.48.57;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2002.03.16.18.44.48;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.02.16.21.27.30;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.09.07.04.44;	author deraadt;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2001.05.29.21.37.16;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.01.28.19.34.30;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.25.19.22.16;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2000.09.15.07.13.46;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.20.18.42.38;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	99.08.17.09.13.13;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.07.10.08.06.08;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.07.09.23.54.36;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.07.07.06.02.12;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.04.06.09.14.35;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.02.06.12.49.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.17.07.12.06;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.12.22.03.41.16;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.07.28.06.33.16;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.22.01.59.20;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.08.34.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.20;	author deraadt;	state Exp;
branches;
next	;

1.18.2.1
date	2002.03.19.04.28.22;	author jason;	state Exp;
branches;
next	;


desc
@@


1.22
log
@rlogind and rexecd go away
@
text
@/*	$OpenBSD: rexecd.c,v 1.21 2002/03/16 19:48:57 millert Exp $	*/

/*
 * Copyright (c) 1983 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1983 The Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/*static char sccsid[] = "from: @@(#)rexecd.c	5.12 (Berkeley) 2/25/91";*/
static char rcsid[] = "$OpenBSD: rexecd.c,v 1.21 2002/03/16 19:48:57 millert Exp $";
#endif /* not lint */

#include <sys/param.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/time.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <signal.h>
#include <netdb.h>
#include <pwd.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <paths.h>
#include <err.h>
#include <login_cap.h>
#include <bsd_auth.h>

/*VARARGS1*/
void error();

char	*remote;
char	*envinit[1];
extern char **environ;

struct	sockaddr_in asin = { AF_INET };

void doit(int, struct sockaddr_in *);
void getstr(char *buf, int cnt, char *err);

/*
 * remote execute server:
 *	username\0
 *	password\0
 *	command\0
 *	data
 */
/*ARGSUSED*/
int
main(argc, argv)
	int argc;
	char **argv;
{
	struct sockaddr_in from;
	struct hostent *hp;
	int fromlen;

	openlog(argv[0], LOG_PID, LOG_AUTH);
	fromlen = sizeof (from);
	if (getpeername(0, (struct sockaddr *)&from, &fromlen) < 0) {
		(void)fprintf(stderr,
		    "rexecd: getpeername: %s\n", strerror(errno));
		exit(1);
	}

	hp = gethostbyaddr((char *) &from.sin_addr, sizeof(from.sin_addr),
	    from.sin_family);
	remote = strdup(hp ? hp->h_name : inet_ntoa(from.sin_addr));
	if (remote == NULL) {
		(void)fprintf(stderr, "rexecd: strdup: %s\n", strerror(errno));
		exit(1);
	}

	doit(0, &from);
	exit(0);
}

void
doit(f, fromp)
	int f;
	struct sockaddr_in *fromp;
{
	char cmdbuf[NCARGS+1], *cp, *namep;
	char user[16], pass[16];
	struct passwd *pwd;
	int s;
	u_short port;
	int pv[2], pid, cc;
	fd_set ready, readfrom;
	char buf[BUFSIZ], sig;
	int one = 1;
	int maxfd;
	login_cap_t *lc;
	auth_session_t *as;

	(void) signal(SIGINT, SIG_DFL);
	(void) signal(SIGQUIT, SIG_DFL);
	(void) signal(SIGTERM, SIG_DFL);
#ifdef DEBUG
	{ int t = open(_PATH_TTY, O_RDWR);
		if (t >= 0) {
			ioctl(t, TIOCNOTTY, (char *)0);
			(void) close(t);
		}
	}
#endif
	dup2(f, 0);
	dup2(f, 1);
	dup2(f, 2);
	(void) alarm(60);
	port = 0;
	for (;;) {
		char c;
		if (read(f, &c, 1) != 1)
			exit(1);
		if (c == 0)
			break;
		port = port * 10 + c - '0';
	}
	(void) alarm(0);
	getstr(user, sizeof(user), "username");
	getstr(pass, sizeof(pass), "password");
	getstr(cmdbuf, sizeof(cmdbuf), "command");
	setpwent();
	pwd = getpwnam(user);
	if (pwd == NULL) {
		error("Permission denied.\n");
		exit(1);
	}
	lc = login_getclass(pwd->pw_class);
	if (lc == NULL) {
		error("Login class incorrect.\n");
		exit(1);
	}
	as = auth_open();
	if (as == NULL || auth_setpwd(as, pwd) != 0) {
		error("Unable to allocate memory.\n");
		exit(1);
	}
	endpwent();
	if (pwd->pw_uid)
		auth_checknologin(lc);
	if (*pwd->pw_passwd != '\0') {
		namep = crypt(pass, pwd->pw_passwd);
		if (strcmp(namep, pwd->pw_passwd)) {
			error("Permission denied.\n");
			exit(1);
		}
	}

	syslog(LOG_INFO, "login from %s as %s", remote, user);

	setegid(pwd->pw_gid);
	seteuid(pwd->pw_uid);
	if (chdir(pwd->pw_dir) < 0) {
		error("No remote directory.\n");
		exit(1);
	}
	if (port != 0) {
		if (port < IPPORT_RESERVED) {
			syslog(LOG_ERR, "client stderr port in reserved range");
			exit(1); 
		}
		s = socket(AF_INET, SOCK_STREAM, 0);
		if (s < 0)
			exit(1);
		if (bind(s, (struct sockaddr *)&asin, sizeof (asin)) < 0)
			exit(1);
		(void) alarm(60);
		fromp->sin_port = htons(port);
		if (connect(s, (struct sockaddr *)fromp, sizeof (*fromp)) < 0)
			exit(1);
		(void) alarm(0);
	}
	seteuid(0);
	setegid(0);	/* XXX use a saved gid instead? */

	(void) write(2, "\0", 1);
	if (port) {
		(void) pipe(pv);
		pid = fork();
		if (pid == -1)  {
			error("Try again.\n");
			exit(1);
		}
		if (pid) {
			(void) close(0); (void) close(1); (void) close(2);
			(void) close(f); (void) close(pv[1]);
			FD_ZERO(&readfrom);
			FD_SET(s, &readfrom);
			FD_SET(pv[0], &readfrom);
			maxfd = s;
			if (pv[0] > maxfd)
				maxfd = pv[0];
			ioctl(pv[1], FIONBIO, (char *)&one);
			/* should set s nbio! */
			do {
				ready = readfrom;
				switch (select(maxfd+1, &ready,
				    (fd_set *)NULL, (fd_set *)NULL,
				    (struct timeval *)NULL)) {
				case 0:
				case -1:
					if (errno == EINTR)
						continue;
					exit(0);
				default:
					break;
				}
					
				if (FD_ISSET(s, &ready)) {
					if (read(s, &sig, 1) <= 0)
						FD_CLR(s, &readfrom);
					else
						killpg(pid, sig);
				}
				if (FD_ISSET(pv[0], &ready)) {
					cc = read(pv[0], buf, sizeof (buf));
					if (cc <= 0) {
						shutdown(s, 1+1);
						FD_CLR(pv[0], &readfrom);
					} else
						(void) write(s, buf, cc);
				}
			} while (FD_ISSET(pv[0], &readfrom) ||
			    FD_ISSET(s, &readfrom));
			exit(0);
		}
		setsid();
		(void) close(s); (void)close(pv[0]);
		dup2(pv[1], 2);
	}
	if (*pwd->pw_shell == '\0')
		pwd->pw_shell = _PATH_BSHELL;
	if (f > 2)
		(void) close(f);

	environ = envinit;
	if (setenv("HOME", pwd->pw_dir, 1) == -1 ||
	    setenv("SHELL", pwd->pw_shell, 1) == -1 ||
	    setenv("LOGNAME", pwd->pw_name, 1) == -1 ||
	    setenv("USER", pwd->pw_name, 1) == -1)
		err(1, "unable to setup environment");
	if (setusercontext(lc, pwd, pwd->pw_uid, LOGIN_SETALL))
		err(1, "unable to set user context");
	if (auth_approval(as, lc, pwd->pw_name, "rexec") <= 0)
		err(1, "approval failure");
	auth_close(as);
	login_close(lc);

	cp = strrchr(pwd->pw_shell, '/');
	if (cp)
		cp++;
	else
		cp = pwd->pw_shell;
	closelog();
	execl(pwd->pw_shell, cp, "-c", cmdbuf, (char *)NULL);
	perror(pwd->pw_shell);
	exit(1);
}

/*VARARGS1*/
void
error(fmt, a1, a2, a3)
	char *fmt;
	int a1, a2, a3;
{
	char buf[BUFSIZ];

	buf[0] = 1;
	(void) snprintf(buf+1, sizeof buf-1, fmt, a1, a2, a3);
	(void) write(2, buf, strlen(buf));
}

void
getstr(buf, cnt, err)
	char *buf;
	int cnt;
	char *err;
{
	char c;

	do {
		if (read(0, &c, 1) != 1)
			exit(1);
		*buf++ = c;
		if (--cnt == 0) {
			error("%s too long\n", err);
			exit(1);
		}
	} while (c != 0);
}
@


1.21
log
@Add missing auth_close() and login_close() calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: rexecd.c,v 1.20 2002/03/16 18:44:48 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rexecd.c,v 1.20 2002/03/16 18:44:48 millert Exp $";
@


1.20
log
@Avoid potential corruption of passwd pointer auth_approval().
Also check for strdup() failure while I am here.
@
text
@d1 1
a1 1
/*	$OpenBSD: rexecd.c,v 1.19 2002/02/16 21:27:30 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rexecd.c,v 1.19 2002/02/16 21:27:30 millert Exp $";
d289 2
@


1.19
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rexecd.c,v 1.18 2001/07/09 07:04:44 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rexecd.c,v 1.18 2001/07/09 07:04:44 deraadt Exp $";
a75 1
login_cap_t *lc;
d110 4
d134 2
d176 5
d287 1
a287 1
	if (auth_approval(NULL, lc, pwd->pw_name, "rexec") <= 0)
@


1.18
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: rexecd.c,v 1.17 2001/05/29 21:37:16 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rexecd.c,v 1.17 2001/05/29 21:37:16 millert Exp $";
d71 1
a71 1
void error __P(());
d80 2
a81 2
void doit __P((int, struct sockaddr_in *));
void getstr __P((char *buf, int cnt, char *err));
@


1.18.2.1
log
@Pull in patch from current:
Fix (millert):
Avoid potential corruption of passwd pointer by auth_approval().
@
text
@d1 1
a1 1
/*	$OpenBSD: rexecd.c,v 1.18 2001/07/09 07:04:44 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rexecd.c,v 1.18 2001/07/09 07:04:44 deraadt Exp $";
d76 1
a110 4
	if (remote == NULL) {
		(void)fprintf(stderr, "rexecd: strdup: %s\n", strerror(errno));
		exit(1);
	}
a130 2
	login_cap_t *lc;
	auth_session_t *as;
a170 5
	as = auth_open();
	if (as == NULL || auth_setpwd(as, pwd) != 0) {
		error("Unable to allocate memory.\n");
		exit(1);
	}
d277 1
a277 1
	if (auth_approval(as, lc, pwd->pw_name, "rexec") <= 0)
a278 2
	auth_close(as);
	login_close(lc);
@


1.17
log
@Call auth_checknologin() and auth_approval() as appropriate for BSD
authentication.
@
text
@d1 1
a1 1
/*	$OpenBSD: rexecd.c,v 1.16 2001/01/28 19:34:30 niklas Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rexecd.c,v 1.16 2001/01/28 19:34:30 niklas Exp $";
d286 1
a286 1
	execl(pwd->pw_shell, cp, "-c", cmdbuf, 0);
@


1.16
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rexecd.c,v 1.15 2001/01/25 19:22:16 deraadt Exp $";
d51 4
d68 1
a68 3

#include <netinet/in.h>
#include <arpa/inet.h>
d172 2
d260 1
a260 1
		setpgrp(0, getpid());
d277 2
@


1.15
log
@protos
@
text
@d1 2
d44 1
a44 1
static char rcsid[] = "$Id: rexecd.c,v 1.14 2000/09/15 07:13:46 deraadt Exp $";
@


1.14
log
@check return value for setenv(3) for failure, and deal appropriately
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.13 2000/08/20 18:42:38 millert Exp $";
d60 1
@


1.13
log
@Add calls to setusercontext() and login_get*().  We basically call
setusercontext() in most places where previously we did a setlogin().
Add default login.conf file and put root in the "daemon" login class.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.12 1999/08/17 09:13:13 millert Exp $";
d263 5
a267 4
	setenv("HOME", pwd->pw_dir, 1);
	setenv("SHELL", pwd->pw_shell, 1);
	setenv("LOGNAME", pwd->pw_name, 1);
	setenv("USER", pwd->pw_name, 1);
@


1.12
log
@More <sys/file.h> vs. <fcntl.h> and open() flags fixes.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.11 1998/07/10 08:06:08 deraadt Exp $";
d60 1
a67 6
char	username[20] = "USER=";
char	homedir[sizeof("HOME=")+MAXPATHLEN] = "HOME=";
char	shell[sizeof("SHELL=")+MAXPATHLEN] = "SHELL=";
char	path[sizeof("PATH=") + sizeof(_PATH_DEFPATH)] = "PATH=";
char	*envinit[] = { homedir, shell, path, username, NULL };
char	**environ;
d69 3
d161 5
d261 1
a261 11
	if (setlogin(pwd->pw_name) == -1 ||
	    setegid((gid_t)pwd->pw_gid) == -1 ||
	    setgid((gid_t)pwd->pw_gid) == -1 ||
	    initgroups(pwd->pw_name, pwd->pw_gid) == -1 ||
	    seteuid((uid_t)pwd->pw_uid) == -1 ||
	    setuid((uid_t)pwd->pw_uid) == -1) {
		error("failed to setup.\n");
		exit(1);
	}
		
	(void)strcat(path, _PATH_DEFPATH);
d263 7
a269 3
	strncat(homedir, pwd->pw_dir, sizeof(homedir)-6);
	strncat(shell, pwd->pw_shell, sizeof(shell)-7);
	strncat(username, pwd->pw_name, sizeof(username)-6);
@


1.11
log
@do not syslog() with "\n"; skipped smtpd/named/ipmon; 12 minutes of dabbling
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.10 1998/07/09 23:54:36 millert Exp $";
d53 1
d133 1
a133 1
	{ int t = open(_PATH_TTY, 2);
@


1.10
log
@Don't open stderr channel until after the user has authenticated themselves
and never open a reserved port.  Fix from www.infilsec.com, credited
to "The South African Tiger Team".  While we're in here, don't leak
info about who is a valid user.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.9 1998/07/07 06:02:12 deraadt Exp $";
d181 1
a181 1
			syslog(LOG_ERR, "client stderr port in reserved range\n");
@


1.9
log
@a big bunch of next to nothing
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.8 1997/04/06 09:14:35 deraadt Exp $";
a152 12
	if (port != 0) {
		s = socket(AF_INET, SOCK_STREAM, 0);
		if (s < 0)
			exit(1);
		if (bind(s, (struct sockaddr *)&asin, sizeof (asin)) < 0)
			exit(1);
		(void) alarm(60);
		fromp->sin_port = htons(port);
		if (connect(s, (struct sockaddr *)fromp, sizeof (*fromp)) < 0)
			exit(1);
		(void) alarm(0);
	}
d159 1
a159 1
		error("Login incorrect.\n");
d166 1
a166 1
			error("Password incorrect.\n");
d178 16
@


1.8
log
@cleanup using -Wall
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.7 1997/02/06 12:49:56 deraadt Exp $";
d67 4
a70 5
char	homedir[MAXPATHLEN] = "HOME=";
char	shell[64] = "SHELL=";
char	path[sizeof(_PATH_DEFPATH) + sizeof("PATH=")] = "PATH=";
char	*envinit[] =
	    {homedir, shell, path, username, 0};
d122 2
a123 1
	int pv[2], pid, ready, readfrom, cc;
d126 1
d205 6
a210 1
			readfrom = (1<<s) | (1<<pv[0]);
d215 1
a215 1
				(void) select(16, (fd_set *)&ready,
d217 11
a227 2
				    (struct timeval *)NULL);
				if (ready & (1<<s)) {
d229 1
a229 1
						readfrom &= ~(1<<s);
d233 1
a233 1
				if (ready & (1<<pv[0])) {
d237 1
a237 1
						readfrom &= ~(1<<pv[0]);
d241 2
a242 1
			} while (readfrom);
d253 10
a262 6
	setlogin(pwd->pw_name);
	(void) setegid((gid_t)pwd->pw_gid);
	(void) setgid((gid_t)pwd->pw_gid);
	initgroups(pwd->pw_name, pwd->pw_gid);
	(void) seteuid((uid_t)pwd->pw_uid);
	(void) setuid((uid_t)pwd->pw_uid);
@


1.7
log
@buf oflow
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.6 1997/01/17 07:12:06 millert Exp $";
d64 1
a64 1
int error();
d77 3
d88 1
d110 1
d113 1
d260 1
d272 1
@


1.6
log
@r?index -> strr?chr
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.5 1996/12/22 03:41:16 tholo Exp $";
d261 1
a261 1
	(void) sprintf(buf+1, fmt, a1, a2, a3);
@


1.5
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.4 1996/07/28 06:33:16 deraadt Exp $";
d242 1
a242 1
	cp = rindex(pwd->pw_shell, '/');
@


1.4
log
@syslog always; inspired by freebsd
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.3 1996/07/22 01:59:20 deraadt Exp $";
d232 1
d235 1
@


1.3
log
@seteuid for chdir
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.2 1996/05/26 08:34:56 deraadt Exp $";
a48 1
#include <netinet/in.h>
d57 1
d60 3
d66 11
d90 1
d93 1
d100 5
a107 10
char	username[20] = "USER=";
char	homedir[64] = "HOME=";
char	shell[64] = "SHELL=";
char	path[sizeof(_PATH_DEFPATH) + sizeof("PATH=")] = "PATH=";
char	*envinit[] =
	    {homedir, shell, path, username, 0};
char	**environ;

struct	sockaddr_in asin = { AF_INET };

d126 4
a129 4
	  if (t >= 0) {
		ioctl(t, TIOCNOTTY, (char *)0);
		(void) close(t);
	  }
d175 3
d245 1
@


1.2
log
@setlogin(); netbsd pr#1292; jimj@@miller.cs.uwm.edu
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.1.1.1 1995/10/18 08:43:20 deraadt Exp $";
d164 2
d170 3
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rexecd.c,v 1.2 1993/08/01 18:30:01 mycroft Exp $";
d212 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
