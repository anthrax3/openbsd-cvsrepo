head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.8.0.36
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.34
	OPENBSD_5_0:1.8.0.32
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.30
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.28
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2015.12.22.08.54.16;	author mmcc;	state Exp;
branches;
next	1.14;
commitid	sTDrw9FlbNNwVprE;

1.14
date	2015.11.19.18.37.01;	author millert;	state Exp;
branches;
next	1.13;
commitid	qC16TiBA67bibMKz;

1.13
date	2015.10.17.19.50.47;	author bluhm;	state Exp;
branches;
next	1.12;
commitid	MH48JN6v7b58fdRY;

1.12
date	2015.10.15.20.14.23;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	RbVeUW2OTnMVFeEt;

1.11
date	2013.12.03.01.29.00;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.13.21.21.17;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2012.12.04.02.24.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.10.21.30.27;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.06.18.19.14;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.02.01.27.16;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.07.17.16.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.06.05.37.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.13.06.36;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.20.20.08.23;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.20.01.41.53;	author millert;	state Exp;
branches;
next	;


desc
@@


1.15
log
@assign pointers to NULL rather than 0
@
text
@/*	$OpenBSD: login_token.c,v 1.14 2015/11/19 18:37:01 millert Exp $	*/

/*-
 * Copyright (c) 1995, 1996 Berkeley Software Design, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Berkeley Software Design,
 *      Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI $From: login_token.c,v 1.2 1996/09/04 05:33:05 prb Exp $
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>

#include <err.h>
#include <readpassphrase.h>
#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <syslog.h>
#include <limits.h>
#include <string.h>
#include <unistd.h>
#include <login_cap.h>
#include <bsd_auth.h>

#include "token.h"

int
main(int argc, char *argv[])
{
	FILE *back = NULL;
	char *username = NULL;
	char *instance;
	char challenge[1024];
	char response[1024];
	char *pp = NULL;
	int c;
	int mode = 0;
	struct rlimit cds;
	sigset_t blockset;

	(void)setpriority(PRIO_PROCESS, 0, 0);

	/* We block keyboard-generated signals during database accesses. */
	sigemptyset(&blockset);
	sigaddset(&blockset, SIGINT);
	sigaddset(&blockset, SIGQUIT);
	sigaddset(&blockset, SIGTSTP);

	openlog(NULL, LOG_ODELAY, LOG_AUTH);

	cds.rlim_cur = 0;
	cds.rlim_max = 0;
	if (setrlimit(RLIMIT_CORE, &cds) < 0)
		syslog(LOG_ERR, "couldn't set core dump size to 0: %m");

	if (pledge("stdio rpath wpath cpath fattr flock getpw tty", NULL) == -1) {
		syslog(LOG_ERR, "pledge: %m");
		exit(1);
	}

	(void)sigprocmask(SIG_BLOCK, &blockset, NULL);
	if (token_init(argv[0]) < 0) {
		syslog(LOG_ERR, "unknown token type");
		errx(1, "unknown token type");
	}
	(void)sigprocmask(SIG_UNBLOCK, &blockset, NULL);

	while ((c = getopt(argc, argv, "ds:v:")) != -1)
		switch (c) {
		case 'd':		/* to remain undocumented */
			back = stdout;
			break;
		case 'v':
			break;
		case 's':	/* service */
			if (strcmp(optarg, "login") == 0)
				mode = 0;
			else if (strcmp(optarg, "challenge") == 0)
				mode = 1;
			else if (strcmp(optarg, "response") == 0)
				mode = 2;
			else {
				syslog(LOG_ERR, "%s: invalid service", optarg);
				exit(1);
			}
			break;
		default:
			syslog(LOG_ERR, "usage error");
			exit(1);
		}

	switch (argc - optind) {
	case 2:
	case 1:
		username = argv[optind];
		break;
	default:
		syslog(LOG_ERR, "usage error");
		exit(1);
	}


	if (back == NULL && (back = fdopen(3, "r+")) == NULL)  {
		syslog(LOG_ERR, "reopening back channel");
		exit(1);
	}
	if (mode == 2) {
		mode = 0;
		c = -1;
		while (++c < sizeof(challenge) &&
		    read(3, &challenge[c], 1) == 1) {
			if (challenge[c] == '\0' && ++mode == 2)
				break;
			if (challenge[c] == '\0' && mode == 1)
				pp = challenge + c + 1;
		}
		if (mode < 2) {
			syslog(LOG_ERR, "protocol error on back channel");
			exit(1);
		}
	} else {
		(void)sigprocmask(SIG_BLOCK, &blockset, NULL);
		tokenchallenge(username, challenge, sizeof(challenge),
		    tt->proper);
		(void)sigprocmask(SIG_UNBLOCK, &blockset, NULL);
		if (mode == 1) {
			fprintf(back, BI_VALUE " challenge %s\n",
			    auth_mkvalue(challenge));
			fprintf(back, BI_CHALLENGE "\n");
			exit(0);
		}

		pp = readpassphrase(challenge, response, sizeof(response), 0);
		if (pp == NULL)
			exit(1);
		if (*pp == '\0') {
			char buf[64];
			snprintf(buf, sizeof(buf), "%s Response [echo on]: ",
			    tt->proper);
			pp = readpassphrase(buf, response, sizeof(response),
			    RPP_ECHO_ON);
			if (pp == NULL)
				exit(1);
		}
	}

	(void)sigprocmask(SIG_BLOCK, &blockset, NULL);
	if (tokenverify(username, challenge, pp) == 0) {
		fprintf(back, BI_AUTH "\n");

		if ((instance = strchr(username, '.'))) {
			*instance++ = 0;
			if (strcmp(instance, "root") == 0)
				fprintf(back, BI_ROOTOKAY "\n");
		}
		fprintf(back, BI_SECURE "\n");
		exit(0);
	}

	fprintf(back, BI_REJECT "\n");
	exit(1);
}
@


1.14
log
@Call syslog() if login_* pledge fails; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.13 2015/10/17 19:50:47 bluhm Exp $	*/
d59 1
a59 1
	char *username = 0;
d63 1
a63 1
	char *pp = 0;
@


1.13
log
@login_token needs pledge "flock" now.
OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.12 2015/10/15 20:14:23 bluhm Exp $	*/
d84 4
a87 2
	if (pledge("stdio rpath wpath cpath fattr flock getpw tty", NULL) == -1)
		err(1, "pledge");
@


1.12
log
@Pledge login_token with "stdio rpath wpath cpath fattr getpw tty".
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.11 2013/12/03 01:29:00 deraadt Exp $	*/
d84 1
a84 1
	if (pledge("stdio rpath wpath cpath fattr getpw tty", NULL) == -1)
@


1.11
log
@use LOGIN_NAME_MAX instead of L_cuserid, and adjust .h includes; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.10 2013/01/13 21:21:17 fgsch Exp $	*/
d83 3
@


1.10
log
@Fix warnings.
millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.9 2012/12/04 02:24:47 deraadt Exp $	*/
d44 1
d47 1
a47 1
#include <stdlib.h>
@


1.9
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.8 2004/03/10 21:30:27 millert Exp $	*/
a57 1
	char *class = 0;
a115 1
		class = argv[optind + 1];
@


1.8
log
@More checking for a NULL return value from getpass().  otto@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.7 2002/09/06 18:19:14 deraadt Exp $	*/
a37 1
#include <sys/param.h>
@


1.7
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.6 2002/06/02 01:27:16 deraadt Exp $	*/
d159 3
a161 1
		if (!pp || *pp == '\0') {
d167 2
@


1.6
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.5 2001/12/07 17:16:18 millert Exp $	*/
d56 1
a56 3
main(argc, argv)
	int argc;
	char **argv;
@


1.5
log
@Block keyboard-generated signals during database accesses.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.4 2001/12/06 05:37:04 millert Exp $	*/
d95 1
a95 1
		switch(c) {
d118 1
a118 1
	switch(argc - optind) {
@


1.4
log
@Do not set handler for SIGINT and SIGQUIT to SIG_IGN since it prevents
getpass()/readpassphrase() from being able to restore the tty mode
on keyboard interrupt.  Along with the recent readpassphrase.c commit
this means that if you ^C things that use login scripts (like su(1))
with a non-CBREAK shell your tty mode will be restored nicely.

TODO:
The various login scripts need to install handlers to avoid leaving
turd files or otherwise ending in a bad state.  It would also be
nice to send BI_REJECT to the back channel.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.3 2001/10/24 13:06:36 mpech Exp $	*/
d44 1
d70 1
d74 6
d87 1
d92 1
d149 1
d152 1
d170 1
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.2 2000/12/20 20:08:23 markus Exp $	*/
a69 2
	(void)signal(SIGQUIT, SIG_IGN);
	(void)signal(SIGINT, SIG_IGN);
@


1.2
log
@use arc4random, clear secrets, use readpassphrase in tokeninit; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_token.c,v 1.1 2000/12/20 01:41:53 millert Exp $	*/
d86 1
a86 1
	while ((c = getopt(argc, argv, "ds:v:")) != EOF)
@


1.1
log
@Provides ActivCard, CRYPTOCard and SNK-004 authentication from BSDi
Will be used when BSD authentication is enabled
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 1
	char *pp;
@

