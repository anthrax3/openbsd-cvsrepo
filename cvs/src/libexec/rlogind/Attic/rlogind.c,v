head	1.35;
access;
symbols
	OPENBSD_3_1:1.34.0.2
	OPENBSD_3_1_BASE:1.34
	OPENBSD_3_0:1.29.0.2
	OPENBSD_3_0_BASE:1.29
	OPENBSD_2_9:1.27.0.2
	OPENBSD_2_9_BASE:1.27
	OPENBSD_2_8:1.24.0.4
	OPENBSD_2_8_BASE:1.24
	OPENBSD_2_7:1.24.0.2
	OPENBSD_2_7_BASE:1.24
	OPENBSD_2_6:1.21.0.2
	OPENBSD_2_6_BASE:1.21
	OPENBSD_2_5:1.20.0.8
	OPENBSD_2_5_BASE:1.20
	OPENBSD_2_4:1.20.0.6
	OPENBSD_2_4_BASE:1.20
	OPENBSD_2_3:1.20.0.4
	OPENBSD_2_3_BASE:1.20
	OPENBSD_2_2:1.20.0.2
	OPENBSD_2_2_BASE:1.20
	OPENBSD_2_1:1.19.0.2
	OPENBSD_2_1_BASE:1.19
	OPENBSD_2_0:1.9.0.2
	OPENBSD_2_0_BASE:1.9
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.35
date	2002.05.06.19.48.21;	author deraadt;	state dead;
branches;
next	1.34;

1.34
date	2002.02.16.21.27.31;	author millert;	state Exp;
branches;
next	1.33;

1.33
date	2002.02.16.19.34.45;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2002.02.15.19.16.36;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2002.01.07.03.44.30;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2001.12.07.18.45.33;	author mpech;	state Exp;
branches;
next	1.29;

1.29
date	2001.07.08.21.18.09;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2001.06.11.15.18.50;	author mickey;	state Exp;
branches;
next	1.27;

1.27
date	2001.01.28.19.34.31;	author niklas;	state Exp;
branches;
next	1.26;

1.26
date	2001.01.19.18.01.03;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2000.11.10.17.46.08;	author itojun;	state Exp;
branches;
next	1.24;

1.24
date	2000.03.09.15.03.29;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2000.01.27.05.21.13;	author itojun;	state Exp;
branches;
next	1.22;

1.22
date	99.11.15.01.03.28;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	99.07.20.22.40.40;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	97.06.29.11.10.29;	author provos;	state Exp;
branches;
next	1.19;

1.19
date	97.02.13.22.33.11;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	97.02.13.22.29.10;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	97.02.13.22.21.10;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	97.02.05.21.09.30;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.02.05.14.26.52;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.02.05.04.18.27;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.01.17.07.12.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	97.01.15.23.41.02;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	96.12.04.04.11.44;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	96.11.11.05.34.41;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	96.08.27.10.26.59;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.08.02.10.13.35;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.07.31.09.25.46;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.07.31.09.15.53;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.07.31.09.05.15;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.17.07.21.18;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.02.22.10.39.24;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.16.22.20.20;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@rlogind and rexecd go away
@
text
@/*	$OpenBSD: rlogind.c,v 1.34 2002/02/16 21:27:31 millert Exp $	*/

/*-
 * Copyright (c) 1983, 1988, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1988, 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/* from: static char sccsid[] = "@@(#)rlogind.c	8.1 (Berkeley) 6/4/93"; */
static char *rcsid = "$OpenBSD: rlogind.c,v 1.34 2002/02/16 21:27:31 millert Exp $";
#endif /* not lint */

/*
 * remote login server:
 *	\0
 *	remuser\0
 *	locuser\0
 *	terminal_type/speed\0
 *	data
 */

#define	FD_SETSIZE	16		/* don't need many bits for select */
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <signal.h>
#include <termios.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <arpa/inet.h>
#include <netdb.h>

#include <pwd.h>
#include <syslog.h>
#include <util.h>
#include <errno.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include "pathnames.h"

#ifndef TIOCPKT_WINDOW
#define TIOCPKT_WINDOW 0x80
#endif

#ifdef	KERBEROS
#include <des.h>
#include <kerberosIV/krb.h>
#define	SECURE_MESSAGE "This rlogin session is using DES encryption for all transmissions.\r\n"

AUTH_DAT	*kdata;
KTEXT		ticket;
u_char		auth_buf[sizeof(AUTH_DAT)];
u_char		tick_buf[sizeof(KTEXT_ST)];
Key_schedule	schedule;
int		doencrypt, retval, use_kerberos, vacuous;

#define		ARGSTR			"alnkvx"
#else
#define		ARGSTR			"aln"
#endif	/* KERBEROS */

char	*env[2];
#define	NMAX 30
char	lusername[NMAX+1], rusername[NMAX+1];
static	char term[64] = "TERM=";
#define	ENVSIZE	(sizeof("TERM=")-1)	/* skip null for concatenation */
int	keepalive = 1;
int	check_all = 1;

struct	passwd *pwd;

void	doit(int, struct sockaddr *);
int	control(int, char *, int);
void	protocol(int, int);
void	cleanup(int);
void	fatal(int, char *, int);
int	do_rlogin(struct sockaddr *);
void	getstr(char *, int, char *);
void	setup_term(int);
int	do_krb_login(struct sockaddr_in *);
void	usage(void);
int	local_domain(char *);
char	*topdomain(char *);

int
main(argc, argv)
	int argc;
	char *argv[];
{
	extern int __check_rhosts_file;
	struct sockaddr_storage from;
	int ch, fromlen, on;

	openlog("rlogind", LOG_PID | LOG_CONS, LOG_AUTH);

	opterr = 0;
	while ((ch = getopt(argc, argv, ARGSTR)) != -1)
		switch (ch) {
		case 'a':
			/* check_all = 1; */
			break;
		case 'l':
			__check_rhosts_file = 0;
			break;
		case 'n':
			keepalive = 0;
			break;
#ifdef KERBEROS
		case 'k':
			use_kerberos = 1;
			break;
		case 'v':
			vacuous = 1;
			break;
		case 'x':
			doencrypt = 1;
			break;
#endif
		case '?':
		default:
			usage();
			break;
		}
	argc -= optind;
	argv += optind;

#ifdef	KERBEROS
	if (use_kerberos && vacuous) {
		usage();
		fatal(STDERR_FILENO, "only one of -k and -v allowed", 0);
	}
#endif
	fromlen = sizeof (from);
	if (getpeername(0, (struct sockaddr *)&from, &fromlen) < 0) {
		/* syslog(LOG_ERR,"Can't get peer name of remote host: %m"); */
		fatal(STDERR_FILENO, "Can't get peer name of remote host", 1);
	}
	on = 1;
	if (keepalive &&
	    setsockopt(0, SOL_SOCKET, SO_KEEPALIVE, &on, sizeof (on)) < 0)
		syslog(LOG_WARNING, "setsockopt (SO_KEEPALIVE): %m");
	if (from.ss_family == AF_INET) {
		on = IPTOS_LOWDELAY;
		if (setsockopt(0, IPPROTO_IP, IP_TOS, (char *)&on,
		    sizeof(int)) < 0) {
			syslog(LOG_WARNING, "setsockopt (IP_TOS): %m");
		}
	}
	doit(0, (struct sockaddr *)&from);
}

int	child;
int	netf;
char	line[MAXPATHLEN];
int	confirmed;

struct winsize win = { 0, 0, 0, 0 };


void
doit(f, fromp)
	int f;
	struct sockaddr *fromp;
{
	int master, pid, on = 1;
	int authenticated = 0;
	char hostname[MAXHOSTNAMELEN];
	int good;
	char c;
	char naddr[NI_MAXHOST];
	char saddr[NI_MAXHOST];
	char raddr[NI_MAXHOST];
	u_int16_t *portp;
	struct addrinfo hints, *res, *res0;
	int gaierror;
#ifdef NI_WITHSCOPEID
	const int niflags = NI_NUMERICHOST | NI_NUMERICSERV | NI_WITHSCOPEID;
#else
	const int niflags = NI_NUMERICHOST | NI_NUMERICSERV;
#endif

	alarm(60);
	read(f, &c, 1);

	if (c != 0)
		exit(1);
#ifdef	KERBEROS
	if (vacuous)
		fatal(f, "Remote host requires Kerberos authentication", 0);
#endif

	alarm(0);
	switch (fromp->sa_family) {
	case AF_INET:
		portp = &((struct sockaddr_in *)fromp)->sin_port;
		break;
	case AF_INET6:
		portp = &((struct sockaddr_in6 *)fromp)->sin6_port;
		break;
	default:
		syslog(LOG_ERR, "malformed \"from\" address (af %d)\n",
		    fromp->sa_family);
		exit(1);
	}
	if (getnameinfo((struct sockaddr *)fromp, fromp->sa_len,
	    naddr, sizeof(naddr), NULL, 0, niflags) != 0) {
		syslog(LOG_ERR, "malformed \"from\" address (af %d)\n",
		    fromp->sa_family);
		exit(1);
	}

	good = 0;
	if (getnameinfo((struct sockaddr *)fromp, fromp->sa_len,
	    saddr, sizeof(saddr), NULL, 0, NI_NAMEREQD) == 0) {
		strlcpy(hostname, saddr, sizeof(hostname));
		if (check_all) {
			memset(&hints, 0, sizeof(hints));
			hints.ai_family = fromp->sa_family;
			hints.ai_socktype = SOCK_STREAM;
			hints.ai_flags = AI_CANONNAME;
			res0 = NULL;
			gaierror = getaddrinfo(hostname, "0", &hints, &res0);
			for (res = res0; !good && res; res = res->ai_next) {
				if (res->ai_family != fromp->sa_family)
					continue;
				if (res->ai_addrlen != fromp->sa_len)
					continue;
				if (getnameinfo(res->ai_addr, res->ai_addrlen,
				    raddr, sizeof(raddr), NULL, 0, niflags) == 0
				 && strcmp(naddr, raddr) == 0)
					good = 1;
			}
			if (res0)
				freeaddrinfo(res0);
		} else
			good = 1;
	}
	/* aha, the DNS looks spoofed */
	if (!good)
		strlcpy(hostname, naddr, sizeof(hostname));


#ifdef	KERBEROS
	if (use_kerberos) {
		retval = do_krb_login((struct sockaddr_in *)fromp);
		if (retval == 0)
			authenticated++;
		else if (retval > 0)
			fatal(f, (char *)krb_err_txt[retval], 0);
		write(f, &c, 1);
		confirmed = 1;		/* we sent the null! */
	} else
#endif
	{
		if (ntohs(*portp) >= IPPORT_RESERVED ||
		    ntohs(*portp) < IPPORT_RESERVED/2) {
			syslog(LOG_NOTICE, "Connection from %s on illegal port",
				naddr);
			fatal(f, "Permission denied", 0);
		}
#ifdef IP_OPTIONS
		if (fromp->sa_family == AF_INET) {
			struct ipoption opts;
			int optsize = sizeof(opts), ipproto, i;
			struct protoent *ip;

			if ((ip = getprotobyname("ip")) != NULL)
				ipproto = ip->p_proto;
			else
				ipproto = IPPROTO_IP;
			if (getsockopt(0, ipproto, IP_OPTIONS, (char *)&opts,
			    &optsize) == 0 && optsize != 0) {
				for (i = 0; (void *)&opts.ipopt_list[i] -
				    (void *)&opts < optsize; ) {
					u_char c = (u_char)opts.ipopt_list[i];
					if (c == IPOPT_LSRR || c == IPOPT_SSRR)
						exit(1);
					if (c == IPOPT_EOL)
						break;
					i += (c == IPOPT_NOP) ? 1 :
					    (u_char)opts.ipopt_list[i+1];
				}
			}
		}
#endif
		if (do_rlogin(fromp) == 0)
			authenticated++;
	}
	if (confirmed == 0) {
		write(f, "", 1);
		confirmed = 1;		/* we sent the null! */
	}
#ifdef	KERBEROS
	if (doencrypt)
		(void) des_write(f, SECURE_MESSAGE, sizeof(SECURE_MESSAGE) - 1);
#endif
	netf = f;

	pid = forkpty(&master, line, NULL, &win);
	if (pid < 0) {
		if (errno == ENOENT)
			fatal(f, "Out of ptys", 0);
		else
			fatal(f, "Forkpty", 1);
	}
	if (pid == 0) {
		if (f > 2)	/* f should always be 0, but... */
			(void) close(f);
		setup_term(0);
		if (authenticated) {
#ifdef	KERBEROS
			if (use_kerberos && (pwd->pw_uid == 0))
				syslog(LOG_INFO|LOG_AUTH,
				    "ROOT Kerberos login from %s.%s@@%s on %s\n",
				    kdata->pname, kdata->pinst, kdata->prealm,
				    hostname);
#endif

			execl(_PATH_LOGIN, "login", "-p", "-h", hostname, "-u",
			    rusername, "-f", "--", lusername, (char *)NULL);
		} else
			execl(_PATH_LOGIN, "login", "-p", "-h", hostname,
			    "-u", rusername, "--", lusername, (char *)NULL);
		fatal(STDERR_FILENO, _PATH_LOGIN, 1);
		/*NOTREACHED*/
	}
#ifdef	KERBEROS
	/*
	 * If encrypted, don't turn on NBIO or the des read/write
	 * routines will croak.
	 */

	if (!doencrypt)
#endif
		ioctl(f, FIONBIO, &on);
	ioctl(master, FIONBIO, &on);
	ioctl(master, TIOCPKT, &on);
	signal(SIGCHLD, cleanup);
	protocol(f, master);
	signal(SIGCHLD, SIG_DFL);
	cleanup(0);
}

char	magic[2] = { 0377, 0377 };
char	oobdata[] = {TIOCPKT_WINDOW};

/*
 * Handle a "control" request (signaled by magic being present)
 * in the data stream.  For now, we are only willing to handle
 * window size changes.
 */
int
control(pty, cp, n)
	int pty;
	char *cp;
	int n;
{
	struct winsize w;

	if (n < 4+sizeof (w) || cp[2] != 's' || cp[3] != 's')
		return (0);
	oobdata[0] &= ~TIOCPKT_WINDOW;	/* we know he heard */
	bcopy(cp+4, (char *)&w, sizeof(w));
	w.ws_row = ntohs(w.ws_row);
	w.ws_col = ntohs(w.ws_col);
	w.ws_xpixel = ntohs(w.ws_xpixel);
	w.ws_ypixel = ntohs(w.ws_ypixel);
	(void)ioctl(pty, TIOCSWINSZ, &w);
	return (4+sizeof (w));
}

/*
 * rlogin "protocol" machine.
 */
void
protocol(f, p)
	int f, p;
{
	char pibuf[1024+1], fibuf[1024], *pbp, *fbp;
	int pcc = 0, fcc = 0;
	int cc, nfd, n;
	char cntl;

	/*
	 * Must ignore SIGTTOU, otherwise we'll stop
	 * when we try and set slave pty's window shape
	 * (our controlling tty is the master pty).
	 */
	(void) signal(SIGTTOU, SIG_IGN);
	send(f, oobdata, 1, MSG_OOB);	/* indicate new rlogin */
	if (f > p)
		nfd = f + 1;
	else
		nfd = p + 1;
	if (nfd > FD_SETSIZE) {
		syslog(LOG_ERR, "select mask too small, increase FD_SETSIZE");
		fatal(f, "internal error (select mask too small)", 0);
	}
	for (;;) {
		fd_set ibits, obits, ebits, *omask;

		FD_ZERO(&ebits);
		FD_ZERO(&ibits);
		FD_ZERO(&obits);
		omask = (fd_set *)NULL;
		if (fcc) {
			FD_SET(p, &obits);
			omask = &obits;
		} else
			FD_SET(f, &ibits);
		if (pcc >= 0) {
			if (pcc) {
				FD_SET(f, &obits);
				omask = &obits;
			} else
				FD_SET(p, &ibits);
		}
		FD_SET(p, &ebits);
		if ((n = select(nfd, &ibits, omask, &ebits, 0)) < 0) {
			if (errno == EINTR)
				continue;
			fatal(f, "select", 1);
		}
		if (n == 0) {
			/* shouldn't happen... */
			sleep(5);
			continue;
		}
#define	pkcontrol(c)	((c)&(TIOCPKT_FLUSHWRITE|TIOCPKT_NOSTOP|TIOCPKT_DOSTOP))
		if (FD_ISSET(p, &ebits)) {
			cc = read(p, &cntl, 1);
			if (cc == 1 && pkcontrol(cntl)) {
				cntl |= oobdata[0];
				send(f, &cntl, 1, MSG_OOB);
				if (cntl & TIOCPKT_FLUSHWRITE) {
					pcc = 0;
					FD_CLR(p, &ibits);
				}
			}
		}
		if (FD_ISSET(f, &ibits)) {
#ifdef	KERBEROS
			if (doencrypt)
				fcc = des_read(f, fibuf, sizeof(fibuf));
			else
#endif
				fcc = read(f, fibuf, sizeof(fibuf));
			if (fcc < 0 && errno == EWOULDBLOCK)
				fcc = 0;
			else {
				char *cp;
				int left, n;

				if (fcc <= 0)
					break;
				fbp = fibuf;

			top:
				for (cp = fibuf; cp < fibuf+fcc-1; cp++)
					if (cp[0] == magic[0] &&
					    cp[1] == magic[1]) {
						left = fcc - (cp-fibuf);
						n = control(p, cp, left);
						if (n) {
							left -= n;
							if (left > 0)
								bcopy(cp+n, cp, left);
							fcc -= n;
							goto top; /* n^2 */
						}
					}
				FD_SET(p, &obits);		/* try write */
			}
		}

		if (FD_ISSET(p, &obits) && fcc > 0) {
			cc = write(p, fbp, fcc);
			if (cc > 0) {
				fcc -= cc;
				fbp += cc;
			}
		}

		if (FD_ISSET(p, &ibits)) {
			pcc = read(p, pibuf, sizeof (pibuf));
			pbp = pibuf;
			if (pcc < 0 && errno == EWOULDBLOCK)
				pcc = 0;
			else if (pcc <= 0)
				break;
			else if (pibuf[0] == 0) {
				pbp++, pcc--;
#ifdef	KERBEROS
				if (!doencrypt)
#endif
					FD_SET(f, &obits);	/* try write */
			} else {
				if (pkcontrol(pibuf[0])) {
					pibuf[0] |= oobdata[0];
					send(f, &pibuf[0], 1, MSG_OOB);
				}
				pcc = 0;
			}
		}
		if ((FD_ISSET(f, &obits)) && pcc > 0) {
#ifdef	KERBEROS
			if (doencrypt)
				cc = des_write(f, pbp, pcc);
			else
#endif
				cc = write(f, pbp, pcc);
			if (cc < 0 && errno == EWOULDBLOCK) {
				/*
				 * This happens when we try write after read
				 * from p, but some old kernels balk at large
				 * writes even when select returns true.
				 */
				if (!FD_ISSET(p, &ibits))
					sleep(5);
				continue;
			}
			if (cc > 0) {
				pcc -= cc;
				pbp += cc;
			}
		}
	}
}

void
cleanup(signo)
	int signo;
{
	char *p;

	p = line + sizeof(_PATH_DEV) - 1;
	if (logout(p))
		logwtmp(p, "", "");
	(void)chmod(line, 0666);
	(void)chown(line, 0, 0);
	*p = 'p';
	(void)chmod(line, 0666);
	(void)chown(line, 0, 0);
	shutdown(netf, 2);
	if (signo)
		_exit(1);
	else
		exit(1);
}

void
fatal(f, msg, syserr)
	int f;
	char *msg;
	int syserr;
{
	int len = 0;
	char buf[BUFSIZ], *bp = buf;

	/*
	 * Prepend binary one to message if we haven't sent
	 * the magic null as confirmation.
	 */
	if (!confirmed) {
		*bp++ = '\01';		/* error indicator */
		len++;
	}
	if (syserr)
		len += snprintf(bp, sizeof(buf) - len,
		    "rlogind: %s: %s.\r\n",
		    msg, strerror(errno));
	else
		len += snprintf(bp, sizeof(buf) - len,
		    "rlogind: %s.\r\n", msg);
	if (len >= sizeof(buf))
		len = sizeof(buf) - 1;

	(void) write(f, buf, len);
	exit(1);
}

int
do_rlogin(dest)
	struct sockaddr *dest;
{
	getstr(rusername, sizeof(rusername), "remuser too long");
	getstr(lusername, sizeof(lusername), "locuser too long");
	getstr(term+ENVSIZE, sizeof(term)-ENVSIZE, "Terminal type too long");

	pwd = getpwnam(lusername);
	if (pwd == NULL)
		return (-1);
	if (pwd->pw_uid == 0)
		return (-1);
	/* XXX why don't we syslog() failure? */
	return (iruserok_sa(dest, dest->sa_len, 0, rusername, lusername));
}

void
getstr(buf, cnt, errmsg)
	char *buf;
	int cnt;
	char *errmsg;
{
	char c;

	do {
		if (read(0, &c, 1) != 1)
			exit(1);
		if (--cnt < 0)
			fatal(STDOUT_FILENO, errmsg, 0);
		*buf++ = c;
	} while (c != 0);
}

extern	char **environ;

void
setup_term(fd)
	int fd;
{
	char *cp = strchr(term+ENVSIZE, '/');
	char *speed;
	struct termios tt;

#ifndef notyet
	tcgetattr(fd, &tt);
	if (cp) {
		*cp++ = '\0';
		speed = cp;
		cp = strchr(speed, '/');
		if (cp)
			*cp++ = '\0';
		cfsetspeed(&tt, atoi(speed));
	}

	tt.c_iflag = TTYDEF_IFLAG;
	tt.c_oflag = TTYDEF_OFLAG;
	tt.c_lflag = TTYDEF_LFLAG;
	tcsetattr(fd, TCSAFLUSH, &tt);
#else
	if (cp) {
		*cp++ = '\0';
		speed = cp;
		cp = strchr(speed, '/');
		if (cp)
			*cp++ = '\0';
		tcgetattr(fd, &tt);
		cfsetspeed(&tt, atoi(speed));
		tcsetattr(fd, TCSAFLUSH, &tt);
	}
#endif

	env[0] = term;
	env[1] = 0;
	environ = env;
}

#ifdef	KERBEROS
#define	VERSION_SIZE	9

/*
 * Do the remote kerberos login to the named host with the
 * given inet address
 *
 * Return 0 on valid authorization
 * Return -1 on valid authentication, no authorization
 * Return >0 for error conditions
 */
int
do_krb_login(dest)
	struct sockaddr_in *dest;
{
	int rc;
	char instance[INST_SZ], version[VERSION_SIZE];
	long authopts = 0L;	/* !mutual */
	struct sockaddr_in faddr;

	kdata = (AUTH_DAT *) auth_buf;
	ticket = (KTEXT) tick_buf;

	instance[0] = '*';
	instance[1] = '\0';

	if (doencrypt) {
		rc = sizeof(faddr);
		if (getsockname(0, (struct sockaddr *)&faddr, &rc))
			return (-1);
		authopts = KOPT_DO_MUTUAL;
		rc = krb_recvauth(
			authopts, 0,
			ticket, "rcmd",
			instance, dest, &faddr,
			kdata, "", schedule, version);
		 desrw_set_key(&kdata->session, schedule);

	} else
		rc = krb_recvauth(
			authopts, 0,
			ticket, "rcmd",
			instance, dest, (struct sockaddr_in *) 0,
			kdata, "", (struct des_ks_struct *) 0, version);

	if (rc != KSUCCESS)
		return (rc);

	getstr(lusername, sizeof(lusername), "locuser");
	/* get the "cmd" in the rcmd protocol */
	getstr(term+ENVSIZE, sizeof(term)-ENVSIZE, "Terminal type");

	pwd = getpwnam(lusername);
	if (pwd == NULL)
		return (-1);

	/* returns nonzero for no access */
	if (kuserok(kdata, lusername) != 0)
		return (-1);
	
	return (0);

}
#endif /* KERBEROS */

void
usage()
{
#ifdef KERBEROS
	syslog(LOG_ERR, "usage: rlogind [-aln] [-k | -v]");
#else
	syslog(LOG_ERR, "usage: rlogind [-aln]");
#endif
	exit(2);
}
@


1.34
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogind.c,v 1.33 2002/02/16 19:34:45 millert Exp $	*/
d44 1
a44 1
static char *rcsid = "$OpenBSD: rlogind.c,v 1.33 2002/02/16 19:34:45 millert Exp $";
@


1.33
log
@Deal with snprintf returning >= sizeof(buf) and simplify some
of the arithmetic.  deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogind.c,v 1.32 2002/02/15 19:16:36 deraadt Exp $	*/
d44 1
a44 1
static char *rcsid = "$OpenBSD: rlogind.c,v 1.32 2002/02/15 19:16:36 deraadt Exp $";
d112 12
a123 12
void	doit __P((int, struct sockaddr *));
int	control __P((int, char *, int));
void	protocol __P((int, int));
void	cleanup __P((int));
void	fatal __P((int, char *, int));
int	do_rlogin __P((struct sockaddr *));
void	getstr __P((char *, int, char *));
void	setup_term __P((int));
int	do_krb_login __P((struct sockaddr_in *));
void	usage __P((void));
int	local_domain __P((char *));
char	*topdomain __P((char *));
@


1.32
log
@slight snprintf paranoia
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogind.c,v 1.31 2002/01/07 03:44:30 millert Exp $	*/
d44 1
a44 1
static char *rcsid = "$OpenBSD: rlogind.c,v 1.31 2002/01/07 03:44:30 millert Exp $";
d597 1
a597 1
	int len;
d604 1
a604 1
	if (!confirmed)
d606 2
d609 1
a609 1
		len = snprintf(bp, buf + sizeof buf - bp,
d613 1
a613 1
		len = snprintf(bp, buf + sizeof buf - bp,
d615 4
a618 1
	(void) write(f, buf, bp + len - buf);
@


1.31
log
@To disable a SIGCHLD signal handler use SIG_DFL, *not* SIG_IGN
which now has a different meaning.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogind.c,v 1.30 2001/12/07 18:45:33 mpech Exp $	*/
d44 1
a44 1
static char *rcsid = "$OpenBSD: rlogind.c,v 1.30 2001/12/07 18:45:33 mpech Exp $";
d607 2
a608 1
		len = sprintf(bp, "rlogind: %s: %s.\r\n",
d611 2
a612 1
		len = sprintf(bp, "rlogind: %s.\r\n", msg);
@


1.30
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogind.c,v 1.29 2001/07/08 21:18:09 deraadt Exp $	*/
d44 1
a44 1
static char *rcsid = "$OpenBSD: rlogind.c,v 1.29 2001/07/08 21:18:09 deraadt Exp $";
d380 1
a380 1
	signal(SIGCHLD, SIG_IGN);
@


1.29
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogind.c,v 1.28 2001/06/11 15:18:50 mickey Exp $	*/
d44 1
a44 1
static char *rcsid = "$OpenBSD: rlogind.c,v 1.28 2001/06/11 15:18:50 mickey Exp $";
d417 1
a417 1
	register int f, p;
d420 1
a420 1
	register int pcc = 0, fcc = 0;
d491 1
a491 1
				register char *cp;
d655 1
a655 1
	register char *cp = strchr(term+ENVSIZE, '/');
@


1.28
log
@strncpy vs strlcpy, some strlen missuse.
some other related minor cleanups, and spaces.
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogind.c,v 1.27 2001/01/28 19:34:31 niklas Exp $	*/
d44 1
a44 1
static char *rcsid = "$OpenBSD: rlogind.c,v 1.27 2001/01/28 19:34:31 niklas Exp $";
d73 1
d420 1
a420 1
	register pcc = 0, fcc = 0;
d451 1
a451 1
		if (pcc >= 0)
d457 1
@


1.27
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char *rcsid = "$OpenBSD: rlogind.c,v 1.26 2001/01/19 18:01:03 deraadt Exp $";
d207 1
a207 1
	int good = 0;
d251 1
d254 1
a254 1
		strncpy(hostname, saddr, sizeof(hostname)-1);
a255 1
			good = 0;
d262 1
a262 1
			for (res = res0; good == 0 && res; res = res->ai_next) {
d276 1
a276 2
	} else
		good = 0;
d278 2
a279 3
	if (good == 0)
		strncpy(hostname, naddr, sizeof(hostname)-1);
	hostname[sizeof(hostname)-1] = '\0';
@


1.26
log
@do _exit() in exit handler, if it is a signal
@
text
@d1 2
d44 1
a44 1
static char *rcsid = "$Id: rlogind.c,v 1.25 2000/11/10 17:46:08 itojun Exp $";
@


1.25
log
@tiny fix on getaddrinfo error handling
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.24 2000/03/09 15:03:29 deraadt Exp $";
d583 4
a586 1
	exit(1);
@


1.24
log
@-Wall cleanup
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.23 2000/01/27 05:21:13 itojun Exp $";
d258 1
a259 2
			if (gaierror)
				res0 = NULL;
@


1.23
log
@make rshd and rlogind IPv6-ready.
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.22 1999/11/15 01:03:28 deraadt Exp $";
d285 1
a285 1
		retval = do_krb_login(fromp);
d302 21
a322 21
		if (fromp->sa_family == AF_INET)
		{
		struct ipoption opts;
		int optsize = sizeof(opts), ipproto, i;
		struct protoent *ip;

		if ((ip = getprotobyname("ip")) != NULL)
			ipproto = ip->p_proto;
		else
			ipproto = IPPROTO_IP;
		if (getsockopt(0, ipproto, IP_OPTIONS, (char *)&opts,
		    &optsize) == 0 && optsize != 0) {
			for (i = 0; (void *)&opts.ipopt_list[i] - (void *)&opts <
			    optsize; ) {
				u_char c = (u_char)opts.ipopt_list[i];
				if (c == IPOPT_LSRR || c == IPOPT_SSRR)
					exit(1);
				if (c == IPOPT_EOL)
					break;
				i += (c == IPOPT_NOP) ? 1 :
				    (u_char)opts.ipopt_list[i+1];
a323 1
		}
@


1.22
log
@logging getpeername() failures is a waste of time
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.21 1999/07/20 22:40:40 deraadt Exp $";
d109 1
a109 1
void	doit __P((int, struct sockaddr_in *));
d114 1
a114 1
int	do_rlogin __P((struct sockaddr_in *));
d128 1
a128 1
	struct sockaddr_in from;
d179 8
a186 4
	on = IPTOS_LOWDELAY;
	if (setsockopt(0, IPPROTO_IP, IP_TOS, (char *)&on, sizeof(int)) < 0)
		syslog(LOG_WARNING, "setsockopt (IP_TOS): %m");
	doit(0, &from);
d200 1
a200 1
	struct sockaddr_in *fromp;
a203 1
	register struct hostent *hp;
d207 11
d230 22
a251 5
	fromp->sin_port = ntohs((u_short)fromp->sin_port);
	hp = gethostbyaddr((char *)&fromp->sin_addr, sizeof(struct in_addr),
	    fromp->sin_family);
	if (hp) {
		strncpy(hostname, hp->h_name, sizeof(hostname)-1);
d253 17
a269 8
			hp = gethostbyname(hostname);
			if (hp) {
				for (; good == 0 && hp->h_addr_list[0] != NULL;
				    hp->h_addr_list++)
					if (!bcmp(hp->h_addr_list[0],
					    (caddr_t)&fromp->sin_addr,
					    sizeof(fromp->sin_addr)))
						good = 1;
d271 2
a272 1
	
d275 2
a276 1
	}
d278 2
a279 2
	if (hp == NULL || good == 0)
		strncpy(hostname, inet_ntoa(fromp->sin_addr), sizeof(hostname)-1);
d295 2
a296 3
		if (fromp->sin_family != AF_INET ||
		    fromp->sin_port >= IPPORT_RESERVED ||
		    fromp->sin_port < IPPORT_RESERVED/2) {
d298 1
a298 1
				inet_ntoa(fromp->sin_addr));
d302 1
d614 1
a614 1
	struct sockaddr_in *dest;
d626 1
a626 1
	return (iruserok(dest->sin_addr.s_addr, 0, rusername, lusername));
@


1.21
log
@bad arguments? usage() should syslog()
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.20 1997/06/29 11:10:29 provos Exp $";
d172 1
a172 1
		syslog(LOG_ERR,"Can't get peer name of remote host: %m");
@


1.20
log
@new location of des.h
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.19 1997/02/13 22:33:11 deraadt Exp $";
d720 1
@


1.19
log
@if i find one more little problem, and have to make one more little
tweak to this ip option handling code I am going to absolutely scream
in rage, following which I will rip the bloody innards out of netinet
and build my own new incompatible option checking/processing interface
that does not make it so hidiously difficult to check if a session has
source routes active!
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.18 1997/02/13 22:29:10 deraadt Exp $";
d83 1
a83 1
#include <kerberosIV/des.h>
@


1.18
log
@option handling is a bitch
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.17 1997/02/13 22:21:10 deraadt Exp $";
d273 1
a273 1
			    sizeof opts; ) {
@


1.17
log
@ok, i finally learned about struct ipoption
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.16 1997/02/05 21:09:30 deraadt Exp $";
d272 2
a273 1
			for (i = 0; i < optsize; ) {
@


1.16
log
@do not warn about valid options; invalid options correctly quit
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.15 1997/02/05 14:26:52 deraadt Exp $";
d65 1
d262 2
a263 2
		u_char optbuf[BUFSIZ/3];
		int optsize = sizeof(optbuf), ipproto, i;
d270 1
a270 1
		if (getsockopt(0, ipproto, IP_OPTIONS, (char *)optbuf,
d273 1
a273 1
				u_char c = optbuf[i];
d278 2
a279 1
				i += (c == IPOPT_NOP) ? 1 : optbuf[i+1];
@


1.15
log
@need not clear options since bad ones cause exit; provos@@ws1.physnet.uni-hamburg.de
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.14 1997/02/05 04:18:27 deraadt Exp $";
d261 1
a261 2
		u_char optbuf[BUFSIZ/3], *cp;
		char lbuf[sizeof(optbuf)*3+1], *lp;
a270 5
			for (lp = lbuf, i = 0; i < optsize; i++, lp += 3)
				sprintf(lp, " %2.2x", optbuf[i]);
			syslog(LOG_NOTICE,
			    "Connection received using IP options (ignored):%s",
			    lbuf);
@


1.14
log
@IPOPT_LSRR/IPOPT_SSRR must exit() due to tcp sequencing; pointed out by
provos@@wserver.physnet.uni-hamburg.de. also another 1-char buffer overflow.
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.13 1997/01/17 07:12:08 millert Exp $";
a283 6
			}
			if (setsockopt(0, ipproto, IP_OPTIONS,
			    (char *)NULL, optsize) != 0) {
				syslog(LOG_ERR,
				    "setsockopt IP_OPTIONS NULL: %m");
				exit(1);
@


1.13
log
@r?index -> strr?chr
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.12 1997/01/15 23:41:02 millert Exp $";
d262 2
a263 2
		char lbuf[BUFSIZ], *lp;
		int optsize = sizeof(optbuf), ipproto;
d272 2
a273 3
			lp = lbuf;
			for (cp = optbuf; optsize > 0; cp++, optsize--, lp += 3)
				sprintf(lp, " %2.2x", *cp);
d277 8
@


1.12
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.11 1996/12/04 04:11:44 millert Exp $";
d612 1
a612 1
	register char *cp = index(term+ENVSIZE, '/');
d621 1
a621 1
		cp = index(speed, '/');
d635 1
a635 1
		cp = index(speed, '/');
@


1.11
log
@Take advantage of new "-u" flag in login(1).
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.10 1996/11/11 05:34:41 mickey Exp $";
d133 1
a133 1
	while ((ch = getopt(argc, argv, ARGSTR)) != EOF)
@


1.10
log
@correct type cast
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.9 1996/08/27 10:26:59 deraadt Exp $";
d320 2
a321 2
			execl(_PATH_LOGIN, "login", "-p", "-h", hostname, "-f",
			    "--", lusername, (char *)NULL);
d324 1
a324 1
			    "--", lusername, (char *)NULL);
@


1.9
log
@strncpy correctly
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.8 1996/08/02 10:13:35 deraadt Exp $";
d692 1
a692 1
			kdata, "", (bit_64 *) 0, version);
@


1.8
log
@local_domain/topdomain unneeded
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.7 1996/07/31 09:25:46 deraadt Exp $";
d219 1
a219 1
		strncpy(hostname, hp->h_name, sizeof hostname);
d236 2
a237 1
		strncpy(hostname, inet_ntoa(fromp->sin_addr), sizeof hostname);
@


1.7
log
@do not gethostbyname() of #.#.#.#
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.6 1996/07/31 09:15:53 deraadt Exp $";
a720 42
}

/*
 * Check whether host h is in our local domain,
 * defined as sharing the last two components of the domain part,
 * or the entire domain part if the local domain has only one component.
 * If either name is unqualified (contains no '.'),
 * assume that the host is local, as it will be
 * interpreted as such.
 */
int
local_domain(h)
	char *h;
{
	char localhost[MAXHOSTNAMELEN];
	char *p1, *p2;

	localhost[0] = 0;
	(void) gethostname(localhost, sizeof(localhost));
	p1 = topdomain(localhost);
	p2 = topdomain(h);
	if (p1 == NULL || p2 == NULL || !strcasecmp(p1, p2))
		return (1);
	return (0);
}

char *
topdomain(h)
	char *h;
{
	register char *p;
	char *maybe = NULL;
	int dots = 0;

	for (p = h + strlen(h); p >= h; p--) {
		if (*p == '.') {
			if (++dots == 2)
				return (p);
			maybe = p;
		}
	}
	return (maybe);
@


1.6
log
@ah heck, impliment -a flag and turn it on by default. kills netbsd pr#1295
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.5 1996/07/31 09:05:15 deraadt Exp $";
d201 1
d218 1
a218 1
	if (hp)
d220 16
a235 1
	else
a237 18
	if (check_all) {
		int good = 0;

		hp = gethostbyname(hostname);
		if (hp) {
			for (; good == 0 && hp->h_addr_list[0] != NULL;
			    hp->h_addr_list++)
				if (!bcmp(hp->h_addr_list[0],
				    (caddr_t)&fromp->sin_addr,
				    sizeof(fromp->sin_addr)))
					good = 1;
		}

		/* aha, the DNS looks spoofed */
		if (hp == NULL || good == 0)
			strncpy(hostname, inet_ntoa(fromp->sin_addr),
			    sizeof hostname);
	}
@


1.5
log
@-a is dead; normal sized host buffer, de-constipate
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.4 1996/04/17 07:21:18 tholo Exp $";
d93 1
a93 1
#define		ARGSTR			"lnkvx"
d95 1
a95 1
#define		ARGSTR			"ln"
d104 1
d135 3
d221 19
@


1.4
log
@Make encrypted remote logins work again
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.3 1996/02/22 10:39:24 niklas Exp $";
d93 1
a93 1
#define		ARGSTR			"alnkvx"
d95 1
a95 1
#define		ARGSTR			"aln"
a103 1
int	check_all = 0;
a133 3
		case 'a':
			check_all = 1;
			break;
d196 1
a196 1
	char hostname[2 * MAXHOSTNAMELEN + 1];
d214 1
a214 1
		(void)strcpy(hostname, hp->h_name);
d216 1
a216 1
		(void)strcpy(hostname, inet_ntoa(fromp->sin_addr));
d224 1
a224 1
			fatal(f, krb_err_txt[retval], 0);
@


1.3
log
@From NetBSD:
Make sure that the user name cannot ever be interpreted as an option to
login(8).  Note: This does *not* fix any security holes.
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.2 1995/12/16 22:20:20 tholo Exp $";
d667 1
a667 1
		 des_set_key(&kdata->session, schedule);
@


1.2
log
@Make it possible to build without SKEY support
Add support for building with kerberosIV
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.1.1.1 1995/10/18 08:43:20 deraadt Exp $";
d302 2
a303 2
			execl(_PATH_LOGIN, "login", "-p",
			    "-h", hostname, "-f", lusername, (char *)NULL);
d305 2
a306 2
			execl(_PATH_LOGIN, "login", "-p",
			    "-h", hostname, lusername, (char *)NULL);
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char *rcsid = "$Id: rlogind.c,v 1.6 1994/06/05 13:57:52 cgd Exp $";
d81 14
d96 1
d144 11
d163 6
d208 4
d222 11
d276 4
d294 7
d310 8
d424 5
d475 3
d488 5
d631 64
d699 3
d703 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
