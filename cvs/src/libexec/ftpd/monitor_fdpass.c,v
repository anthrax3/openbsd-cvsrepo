head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.4
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	OPENBSD_5_0:1.4.0.14
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.12
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.1.0.14
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.12
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.10
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.8
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.02.29.20.22.36;	author jca;	state Exp;
branches;
next	1.6;
commitid	fTLsdsfGLcvRL1Vg;

1.6
date	2013.11.12.04.44.14;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2012.04.04.17.24.49;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.24.16.11.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.15.16.19.02;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.13.01.49.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.28.18.49.30;	author henning;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Print ssize_t with %zd; ok deraadt@@ mmcc@@
@
text
@/*	$OpenBSD: monitor_fdpass.c,v 1.6 2013/11/12 04:44:14 deraadt Exp $	*/

/*
 * Copyright (c) 2002 Matthieu Herrb
 * Copyright (c) 2001 Niels Provos <provos@@citi.umich.edu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <errno.h>
#include <fcntl.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>
#include "monitor.h"

void
send_fd(int sock, int fd)
{
	struct msghdr msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	struct cmsghdr *cmsg;
	struct iovec vec;
	int result = 0;
	ssize_t n;

	memset(&msg, 0, sizeof(msg));

	if (fd >= 0) {
		msg.msg_control = (caddr_t)&cmsgbuf.buf;
		msg.msg_controllen = sizeof(cmsgbuf.buf);
		cmsg = CMSG_FIRSTHDR(&msg);
		cmsg->cmsg_len = CMSG_LEN(sizeof(int));
		cmsg->cmsg_level = SOL_SOCKET;
		cmsg->cmsg_type = SCM_RIGHTS;
		*(int *)CMSG_DATA(cmsg) = fd;
	} else
		result = errno;

	vec.iov_base = &result;
	vec.iov_len = sizeof(int);
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;

	if ((n = sendmsg(sock, &msg, 0)) == -1)
		syslog(LOG_WARNING, "send_fd: sendmsg(%d): %m", sock);
	if (n != sizeof(int))
		syslog(LOG_WARNING, "send_fd: sendmsg: expected sent 1 got %zd",
		    n);
}

int
recv_fd(int sock)
{
	struct msghdr msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	struct cmsghdr *cmsg;
	struct iovec vec;
	ssize_t n;
	int result;
	int fd;

	memset(&msg, 0, sizeof(msg));
	vec.iov_base = &result;
	vec.iov_len = sizeof(int);
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	if ((n = recvmsg(sock, &msg, 0)) == -1) {
		syslog(LOG_WARNING, "recv_fd: recvmsg(%d): %m", sock);
		return -1;
	}
	if (n != sizeof(int))
		syslog(LOG_WARNING,
		    "recv_fd: recvmsg: expected received 1 got %zd", n);
	if (result == 0) {
		cmsg = CMSG_FIRSTHDR(&msg);
		if (cmsg == NULL) {
			syslog(LOG_WARNING, "recv_fd: no message header");
			return (-1);
		}
		if (cmsg->cmsg_type != SCM_RIGHTS)
			syslog(LOG_WARNING, "recv_fd: expected type %d got %d",
			    SCM_RIGHTS, cmsg->cmsg_type);
		fd = (*(int *)CMSG_DATA(cmsg));
		return (fd);
	} else {
		errno = result;
		return (-1);
	}
}
@


1.6
log
@repair the last prototype by bringing in monitor.h
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.5 2012/04/04 17:24:49 deraadt Exp $	*/
d65 2
a66 2
		syslog(LOG_WARNING, "send_fd: sendmsg: expected sent 1 got %ld",
		    (long)n);
d97 1
a97 1
		    "recv_fd: recvmsg: expected received 1 got %ld", (long)n);
@


1.5
log
@Return an error much earlier if recvmsg fails
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.4 2008/03/24 16:11:00 deraadt Exp $	*/
d29 1
@


1.4
log
@msg_controllen has to be CMSG_SPACE so that the kernel can account for
each cmsg_len (ie. msg_controllen = sum of CMSG_ALIGN(cmsg_len).  This
works now that kernel fd passing has been fixed to accept a bit of
sloppiness because of this ABI repair.
lots of discussion with kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.3 2008/03/15 16:19:02 deraadt Exp $	*/
d90 1
a90 1
	if ((n = recvmsg(sock, &msg, 0)) == -1)
d92 2
@


1.3
log
@Repair the simple cases for msg_controllen where it should just be
CMSG_SIZE(sizeof(int)), not sizeof(buffer) which may be larger because
of alignment; ok kettenis hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.2 2008/03/13 01:49:52 deraadt Exp $	*/
d47 1
a47 1
		msg.msg_controllen = CMSG_LEN(sizeof(int));
d88 1
a88 1
	msg.msg_controllen = CMSG_LEN(sizeof(int));
@


1.2
log
@Correct CMSG_SPACE and CMSG_LEN usage everywhere in the tree. Due to
an extensive discussion with otto, kettenis, millert, and hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.1 2004/11/28 18:49:30 henning Exp $	*/
d47 1
a47 1
		msg.msg_controllen = sizeof(cmsgbuf.buf);
d88 1
a88 1
	msg.msg_controllen = sizeof(cmsgbuf.buf);
@


1.1
log
@privilege seperate ftpd
handle the pre-authentication phase (minus a tiny tiny tiny amount
of code after accept()) in an unprivileged process, asking the
privileged monitor for help where needed.
work by Moritz Jodeit <moritz@@jodeit.org> with help from theo and me
tests theo ian@@ matthieu@@ ben@@networkinsanity.com a.schlichting@@lemarit.com
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 4
a37 1
	char tmp[CMSG_SPACE(sizeof(int))];
d46 2
a47 2
		msg.msg_control = (caddr_t)tmp;
		msg.msg_controllen = CMSG_LEN(sizeof(int));
d72 4
a75 1
	char tmp[CMSG_SPACE(sizeof(int))];
d87 2
a88 2
	msg.msg_control = tmp;
	msg.msg_controllen = sizeof(tmp);
@

