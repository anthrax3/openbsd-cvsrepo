head	1.26;
access;
symbols
	OPENBSD_6_0:1.26.0.2
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.24.0.26
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.18
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.22
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.20
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.16
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.14
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.12
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.10
	OPENBSD_5_0:1.24.0.8
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.6
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.22.0.8
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.4
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.2
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.21.0.8
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.6
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.4
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.2
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.20.0.10
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.8
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.6
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.4
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	OPENBSD_3_0:1.13.0.4
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.11.0.4
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2016.02.29.17.50.34;	author jca;	state Exp;
branches;
next	1.25;
commitid	qsoQyV09oSzHwsYA;

1.25
date	2015.10.04.11.58.09;	author tedu;	state Exp;
branches;
next	1.24;
commitid	npFkpN0ctNAVbBUf;

1.24
date	2010.03.08.19.34.44;	author kettenis;	state Exp;
branches;
next	1.23;

1.23
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.30.12.03.51;	author ragge;	state Exp;
branches
	1.22.4.1
	1.22.8.1;
next	1.21;

1.21
date	2006.04.02.21.38.56;	author djm;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.10.22.57.12;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.11.14.24.46;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.07.02.18.09.54;	author danh;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.29.20.35.27;	author mpech;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.26.09.32.07;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.23.16.31.18;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.18.17.20.13;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.24.11.50.55;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.12.08.13.15.21;	author itojun;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	99.02.26.00.15.54;	author art;	state Exp;
branches;
next	1.9;

1.9
date	97.06.29.07.35.48;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.12.07.10.52.06;	author bitblt;	state Exp;
branches;
next	1.7;

1.7
date	96.10.25.23.59.18;	author imp;	state Exp;
branches;
next	1.6;

1.6
date	96.10.25.23.37.01;	author imp;	state Exp;
branches;
next	1.5;

1.5
date	96.10.15.08.24.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.30.02.01.16;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.07.30.01.59.17;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.07.27.06.16.28;	author joshd;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.16;	author deraadt;	state Exp;
branches;
next	;

1.11.4.1
date	2001.04.23.21.13.54;	author jason;	state Exp;
branches;
next	;

1.22.4.1
date	2010.03.12.13.27.38;	author jasper;	state Exp;
branches;
next	;

1.22.8.1
date	2010.03.12.13.27.11;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Kill unused variable.
@
text
@/*	$OpenBSD: popen.c,v 1.25 2015/10/04 11:58:09 tedu Exp $	*/
/*	$NetBSD: popen.c,v 1.5 1995/04/11 02:45:00 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software written by Ken Arnold and
 * published in UNIX Review, Vol. 6, No. 8.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <sys/wait.h>

#include <errno.h>
#include <glob.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

#include <netinet/in.h>

#include "monitor.h"
#include "extern.h"

/*
 * Special version of popen which avoids call to shell.  This ensures noone
 * may create a pipe to a hidden program as a side effect of a list or dir
 * command.
 */
#define MAX_ARGV	100
#define MAX_GARGV	1000

FILE *
ftpd_popen(char *program, char *type, pid_t *pidptr)
{
	char *cp;
	FILE *iop;
	int argc, gargc, pdes[2];
	pid_t pid;
	char **pop, *argv[MAX_ARGV], *gargv[MAX_GARGV];

	if ((*type != 'r' && *type != 'w') || type[1])
		return (NULL);

	if (pipe(pdes) < 0)
		return (NULL);

	/* break up string into pieces */
	for (argc = 0, cp = program;argc < MAX_ARGV-1; cp = NULL)
		if (!(argv[argc++] = strtok(cp, " \t\n")))
			break;
	argv[MAX_ARGV-1] = NULL;

	/* glob each piece */
	gargv[0] = argv[0];
	for (gargc = argc = 1; argv[argc]; argc++) {
		glob_t gl;

		memset(&gl, 0, sizeof(gl));
		if (glob(argv[argc],
		    GLOB_BRACE|GLOB_NOCHECK|GLOB_QUOTE|GLOB_TILDE|GLOB_LIMIT,
		    NULL, &gl)) {
			if (gargc < MAX_GARGV-1) {
				gargv[gargc++] = strdup(argv[argc]);
				if (gargv[gargc -1] == NULL)
					fatal ("Out of memory.");
			}

		} else if (gl.gl_pathc > 0) {
			for (pop = gl.gl_pathv; *pop && gargc < MAX_GARGV-1; pop++) {
				gargv[gargc++] = strdup(*pop);
				if (gargv[gargc - 1] == NULL)
					fatal ("Out of memory.");
			}
		}
		globfree(&gl);
	}
	gargv[gargc] = NULL;

	iop = NULL;

	switch (pid = fork()) {
	case -1:			/* error */
		(void)close(pdes[0]);
		(void)close(pdes[1]);
		goto pfree;
		/* NOTREACHED */
	case 0:				/* child */
		if (*type == 'r') {
			if (pdes[1] != STDOUT_FILENO) {
				dup2(pdes[1], STDOUT_FILENO);
				(void)close(pdes[1]);
			}
			dup2(STDOUT_FILENO, STDERR_FILENO); /* stderr too! */
			(void)close(pdes[0]);
		} else {
			if (pdes[0] != STDIN_FILENO) {
				dup2(pdes[0], STDIN_FILENO);
				(void)close(pdes[0]);
			}
			(void)close(pdes[1]);
		}
		closelog();

		if (strcmp(gargv[0], "/bin/ls") == 0) {
			extern int optreset;
			extern int ls_main(int, char **);

			/* reset getopt for ls_main */
			optreset = optind = 1;
			exit(ls_main(gargc, gargv));
		}

		execv(gargv[0], gargv);
		_exit(1);
	}
	/* parent; assume fdopen can't fail...  */
	if (*type == 'r') {
		iop = fdopen(pdes[0], type);
		(void)close(pdes[1]);
	} else {
		iop = fdopen(pdes[1], type);
		(void)close(pdes[0]);
	}
	*pidptr = pid;

pfree:	for (argc = 1; gargv[argc] != NULL; argc++)
		free(gargv[argc]);

	return (iop);
}

int
ftpd_pclose(FILE *iop, pid_t pid)
{
	int status;
	pid_t rv;
	sigset_t sigset, osigset;

	(void)fclose(iop);
	sigemptyset(&sigset);
	sigaddset(&sigset, SIGINT);
	sigaddset(&sigset, SIGQUIT);
	sigaddset(&sigset, SIGHUP);
	sigprocmask(SIG_BLOCK, &sigset, &osigset);
	while ((rv = waitpid(pid, &status, 0)) < 0 && errno == EINTR)
		continue;
	sigprocmask(SIG_SETMASK, &osigset, NULL);
	if (rv < 0)
		return (-1);
	if (WIFEXITED(status))
		return (WEXITSTATUS(status));
	return (1);
}
@


1.25
log
@fix custom popen to return pid to caller instead of tracking in a giant
array. this implies we can't use a function pointer for close, but also
means we get to repair some abuse of the comma operator.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.24 2010/03/08 19:34:44 kettenis Exp $	*/
d165 1
a165 1
	int fdes, status;
@


1.24
log
@Check that gl_pathc is bigger than zero before derefencing gl_pathv.  While
this shouldn't happen since we specifiy GLOB_NOMAGIC, it doesn't hurt to be
paranoid, even if we fix the bug in glob(3) that causes gl_pathc to be zero
even if we specify GLOB_NOMAGIC.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.23 2009/10/27 23:59:31 deraadt Exp $	*/
a58 3
static pid_t *pids;
static int fds;

d63 1
a63 1
ftpd_popen(char *program, char *type)
a73 6
	if (!pids) {
		if ((fds = getdtablesize()) <= 0)
			return (NULL);
		if ((pids = calloc(fds, sizeof(pid_t))) == NULL)
			return (NULL);
	}
d154 1
a154 1
	pids[fileno(iop)] = pid;
d163 1
a163 1
ftpd_pclose(FILE *iop)
d166 1
a166 1
	pid_t pid;
a168 6
	/*
	 * pclose returns -1 if stream is not associated with a
	 * `popened' command, or, if already `pclosed'.
	 */
	if (pids == 0 || pids[fdes = fileno(iop)] == 0)
		return (-1);
d175 1
a175 1
	while ((pid = waitpid(pids[fdes], &status, 0)) < 0 && errno == EINTR)
d178 1
a178 2
	pids[fdes] = 0;
	if (pid < 0)
@


1.23
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.22 2008/06/30 12:03:51 ragge Exp $	*/
d107 1
a107 1
		} else
d113 1
@


1.22
log
@Include file order must be "monitor.h" before "extern.h" otherwise enum
auth_ret is referenced before it is declared, which is not allowed by C99.

Ok krw@@, millert@@, gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.21 2006/04/02 21:38:56 djm Exp $	*/
a35 9

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)popen.c	8.3 (Berkeley) 4/6/94";
#else
static const char rcsid[] =
    "$OpenBSD: popen.c,v 1.21 2006/04/02 21:38:56 djm Exp $";
#endif
#endif /* not lint */
@


1.22.4.1
log
@MFC, original commit by kettenis@@:
---------------------------
Check that gl_pathc is bigger than zero before derefencing gl_pathv.  While
this shouldn't happen since we specifiy GLOB_NOMAGIC, it doesn't hurt to be
paranoid, even if we fix the bug in glob(3) that causes gl_pathc to be zero
even if we specify GLOB_NOMAGIC.

ok deraadt@@

---------------------------

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.22 2008/06/30 12:03:51 ragge Exp $	*/
d42 1
a42 1
    "$OpenBSD: popen.c,v 1.22 2008/06/30 12:03:51 ragge Exp $";
d116 1
a116 1
		} else if (gl.gl_pathc > 0) {
a121 1
		}
@


1.22.8.1
log
@MFC, original commit by kettenis@@:
---------------------------
Check that gl_pathc is bigger than zero before derefencing gl_pathv.  While
this shouldn't happen since we specifiy GLOB_NOMAGIC, it doesn't hurt to be
paranoid, even if we fix the bug in glob(3) that causes gl_pathc to be zero
even if we specify GLOB_NOMAGIC.

ok deraadt@@

---------------------------

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.22 2008/06/30 12:03:51 ragge Exp $	*/
d42 1
a42 1
    "$OpenBSD: popen.c,v 1.22 2008/06/30 12:03:51 ragge Exp $";
d116 1
a116 1
		} else if (gl.gl_pathc > 0) {
a121 1
		}
@


1.21
log
@malloc(x * y) -> calloc(x, y) from adobriyan AT gmail.com, with tweaks
suggested by kjell@@; ok otto@@ pat@@ millert@@ jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.20 2003/12/10 22:57:12 deraadt Exp $	*/
d42 1
a42 1
    "$OpenBSD: popen.c,v 1.20 2003/12/10 22:57:12 deraadt Exp $";
d59 2
@


1.20
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.19 2003/06/11 14:24:46 deraadt Exp $	*/
d42 1
a42 1
    "$OpenBSD: popen.c,v 1.19 2003/06/11 14:24:46 deraadt Exp $";
d87 1
a87 1
		if ((pids = (pid_t *)malloc((u_int)(fds * sizeof(pid_t)))) == NULL)
a88 1
		memset(pids, 0, fds * sizeof(pid_t));
@


1.19
log
@ansi cleanup; ok ian markus
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.18 2003/06/02 19:38:24 millert Exp $	*/
d41 2
a42 2
static const char rcsid[] = 
    "$OpenBSD: popen.c,v 1.18 2003/06/02 19:38:24 millert Exp $";
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.17 2002/07/02 18:09:54 danh Exp $	*/
d42 1
a42 1
    "$OpenBSD: popen.c,v 1.17 2002/07/02 18:09:54 danh Exp $";
d73 1
a73 2
ftpd_popen(program, type)
	char *program, *type;
d179 1
a179 2
ftpd_pclose(iop)
	FILE *iop;
@


1.17
log
@* use lostconn() as the SIGALRM handler in receive_data() as originally
  done by downsj@@ in revision 1.54.

* some -Wall cleanup
  - only declare check_host() if TCPWRAPPERS is defined.
  - use socklen_t where appropriate instead of int (pointer signedness
    warnings).
  - {u_}char * pointer signedness warnings.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.16 2002/05/29 20:35:27 mpech Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
    "$OpenBSD$";
@


1.16
log
@More pid_t cleanup. Since 'pid' is pid_t we should:
o) in ftpd_popen() convert 'pids' from int to pid_t too;
o) in ftpd_pclose() return '-1', not pid_t, because it returns int;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.15 2002/05/26 09:32:07 deraadt Exp $	*/
d43 1
a43 1
static char sccsid[] = "@@(#)popen.c	8.3 (Berkeley) 4/6/94";
d45 2
a46 1
static char rcsid[] = "$NetBSD: popen.c,v 1.5 1995/04/11 02:45:00 cgd Exp $";
@


1.15
log
@pid_t cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.14 2002/01/23 16:31:18 mpech Exp $	*/
d69 1
a69 1
static int *pids;
d91 1
a91 1
		if ((pids = (int *)malloc((u_int)(fds * sizeof(int)))) == NULL)
d93 1
a93 1
		memset(pids, 0, fds * sizeof(int));
d207 1
a207 1
		return (pid);
@


1.14
log
@Use always '.' in the end of the fatal() message. Consistency is good.

millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.13 2001/03/18 17:20:13 deraadt Exp $	*/
d81 2
a82 1
	int argc, gargc, pdes[2], pid;
d131 1
a131 1
	switch(pid = fork()) {
@


1.13
log
@use GLOB_LIMIT
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.12 2001/01/24 11:50:55 deraadt Exp $	*/
d115 1
a115 1
					fatal ("Out of memory");
d122 1
a122 1
					fatal ("Out of memory");
@


1.12
log
@proto ls_main()
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.11 1999/12/08 13:15:21 itojun Exp $	*/
a106 1
		int flags = GLOB_BRACE|GLOB_NOCHECK|GLOB_QUOTE|GLOB_TILDE;
d109 3
a111 1
		if (glob(argv[argc], flags, NULL, &gl)) {
@


1.11
log
@IPv6 support from KAME.
XXX kerberos and tcp_wrapper needs checking
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.10 1999/02/26 00:15:54 art Exp $	*/
d154 2
@


1.11.4.1
log
@Pull in patch from current:
Fix (deraadt):
Use the GLOB_LIMIT support in glob(3) to constrain a remote denial of
service against ftpd(1).
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.11 1999/12/08 13:15:21 itojun Exp $	*/
d107 1
d110 1
a110 3
		if (glob(argv[argc],
		    GLOB_BRACE|GLOB_NOCHECK|GLOB_QUOTE|GLOB_TILDE|GLOB_LIMIT,
		    NULL, &gl)) {
@


1.10
log
@implement internal ls
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.9 1997/06/29 07:35:48 deraadt Exp $	*/
d61 1
@


1.9
log
@partial Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.8 1996/12/07 10:52:06 bitblt Exp $	*/
d127 2
a128 1
	switch(pid = vfork()) {
d150 7
@


1.8
log
@Checks to see that strdup() worked, dies with error message on failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: popen.c,v 1.4 1996/07/30 02:01:16 downsj Exp $	*/
d83 1
a83 1
	if (*type != 'r' && *type != 'w' || type[1])
d173 1
a173 1
	int fdes, omask, status;
@


1.7
log
@Spacing nits
@
text
@d110 1
a110 1
			if (gargc < MAX_GARGV-1)
d112 4
d117 1
a117 1
			for (pop = gl.gl_pathv; *pop && gargc < MAX_GARGV-1; pop++)
d119 3
@


1.6
log
@Better bounds checking on argv and gargv to eliminate a fencepost error
on argv and gargv variables.
@
text
@d97 1
a97 1
	for (argc = 0, cp = program;argc < MAX_ARGV - 1; cp = NULL)
d100 1
a100 1
	argv[ MAX_ARGV - 1 ] = NULL;
d110 1
a110 1
			if (gargc < MAX_GARGV - 1)
d113 1
a113 1
			for (pop = gl.gl_pathv; *pop && gargc < MAX_GARGV - 1; pop++)
@


1.5
log
@nearly impossible oflow
@
text
@d71 3
d81 1
a81 1
	char **pop, *argv[100], *gargv[1000];
d97 1
a97 1
	for (argc = 0, cp = program;argc < 100; cp = NULL)
d100 1
d110 1
a110 1
			if (gargc < 1000)
d113 1
a113 1
			for (pop = gl.gl_pathv; *pop && gargc < 1000; pop++)
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d105 4
a108 3
		if (glob(argv[argc], flags, NULL, &gl))
			gargv[gargc++] = strdup(argv[argc]);
		else
@


1.3
log
@closelog() before exec.
@
text
@d1 1
@


1.2
log
@bounds check on argv and gargv
@
text
@d57 1
d135 2
@


1.1
log
@Initial revision
@
text
@d92 1
a92 1
	for (argc = 0, cp = program;; cp = NULL)
d106 1
a106 1
			for (pop = gl.gl_pathv; *pop; pop++)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
