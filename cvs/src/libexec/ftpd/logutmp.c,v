head	1.13;
access;
symbols
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.28
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.26
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.22
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.20
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.18
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.16
	OPENBSD_5_0:1.11.0.14
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.12
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.10
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.08.14.22.57.31;	author guenther;	state Exp;
branches;
next	1.12;
commitid	8eF7hq2rTFPeIa2T;

1.12
date	2014.10.25.03.19.22;	author lteo;	state Exp;
branches;
next	1.11;
commitid	H62Mb5ByK9fun2vA;

1.11
date	2008.06.30.12.03.51;	author ragge;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.27.04.27.27;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.28.20.24.51;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.10.22.57.12;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.07.03.18.11;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.11.14.24.46;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.04.16.08.08;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.07.18.45.32;	author mpech;	state Exp;
branches;
next	1.3;

1.3
date	99.12.10.10.41.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.07.13.02.11.17;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.18.10.09.23;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.13
log
@When upcasting to off_t for multiplication, the cast needs to be *before*
the multiplication to avoid truncation/overflow

ok krw@@
@
text
@/*	$OpenBSD: logutmp.c,v 1.12 2014/10/25 03:19:22 lteo Exp $	*/
/*
 * Portions Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 * Portions Copyright (c) 1996, Jason Downs.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>

#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <utmp.h>
#include <stdio.h>
#include <string.h>
#include <ttyent.h>

#include "monitor.h"
#include "extern.h"

static int fd = -1;
static int topslot = -1;

/*
 * Special versions of login()/logout() which hold the utmp file open,
 * for use with ftpd.
 */

void
ftpd_login(struct utmp *ut)
{
	struct utmp ubuf;

	/*
	 * First, loop through /etc/ttys, if needed, to initialize the
	 * top of the tty slots, since ftpd has no tty.
	 */
	if (topslot < 0) {
		topslot = 0;
		while (getttyent() != (struct ttyent *)NULL)
			topslot++;
	}
	if ((topslot < 0) || ((fd < 0) &&
	    (fd = open(_PATH_UTMP, O_RDWR|O_CREAT, 0644)) < 0))
		return;

	/*
	 * Now find a slot that's not in use...
	 */
	(void)lseek(fd, (off_t)topslot * sizeof(struct utmp), SEEK_SET);

	while (1) {
		if (read(fd, &ubuf, sizeof(struct utmp)) ==
		    sizeof(struct utmp)) {
			if (!ubuf.ut_name[0]) {
				(void)lseek(fd, -(off_t)sizeof(struct utmp),
				    SEEK_CUR);
				break;
			}
			topslot++;
		} else {
			(void)lseek(fd, (off_t)topslot * sizeof(struct utmp),
			    SEEK_SET);
			break;
		}
	}

	(void)write(fd, ut, sizeof(struct utmp));
}

int
ftpd_logout(char *line)
{
	struct timeval tv;
	struct utmp ut;
	int rval;

	rval = 0;
	if (fd < 0)
		return(rval);

	(void)lseek(fd, 0, SEEK_SET);

	while (read(fd, &ut, sizeof(struct utmp)) == sizeof(struct utmp)) {
		if (!ut.ut_name[0] ||
		    strncmp(ut.ut_line, line, UT_LINESIZE))
			continue;
		bzero(ut.ut_name, UT_NAMESIZE);
		bzero(ut.ut_host, UT_HOSTSIZE);
		gettimeofday(&tv, NULL);
		ut.ut_time = tv.tv_sec;
		(void)lseek(fd, -(off_t)sizeof(struct utmp), SEEK_CUR);
		(void)write(fd, &ut, sizeof(struct utmp));
		rval = 1;
	}
	return(rval);
}
@


1.12
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.11 2008/06/30 12:03:51 ragge Exp $	*/
d79 1
a79 1
	(void)lseek(fd, (off_t)(topslot * sizeof(struct utmp)), SEEK_SET);
d91 2
a92 2
			(void)lseek(fd, (off_t)(topslot *
			    sizeof(struct utmp)), SEEK_SET);
@


1.11
log
@Include file order must be "monitor.h" before "extern.h" otherwise enum
auth_ret is referenced before it is declared, which is not allowed by C99.

Ok krw@@, millert@@, gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.10 2005/05/27 04:27:27 millert Exp $	*/
a35 1
#include <netinet/in_systm.h>
@


1.10
log
@include sys/time.h to get struct timeval
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.9 2004/11/28 20:24:51 deraadt Exp $	*/
d47 2
@


1.9
log
@use gettimeofday() instead of time() in functions called from signal handlers; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.8 2003/12/10 22:57:12 deraadt Exp $	*/
d33 1
@


1.8
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.7 2003/07/07 03:18:11 deraadt Exp $	*/
d101 1
d117 2
a118 1
		(void)time(&ut.ut_time);
@


1.7
log
@make this match protos; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.6 2003/06/11 14:24:46 deraadt Exp $	*/
d72 1
a72 1
	    	return;
@


1.6
log
@ansi cleanup; ok ian markus
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.5 2003/06/04 16:08:08 deraadt Exp $	*/
d33 5
d46 1
a46 2

typedef struct utmp UTMP;
d57 1
a57 1
login(UTMP *ut)
d59 1
a59 1
	UTMP ubuf;
d77 1
a77 1
	(void)lseek(fd, (off_t)(topslot * sizeof(UTMP)), SEEK_SET);
d80 2
a81 1
		if (read(fd, &ubuf, sizeof(UTMP)) == sizeof(UTMP)) {
d83 2
a84 1
				(void)lseek(fd, -(off_t)sizeof(UTMP), SEEK_CUR);
d89 2
a90 1
			(void)lseek(fd, (off_t)(topslot * sizeof(UTMP)), SEEK_SET);
d95 1
a95 1
	(void)write(fd, ut, sizeof(UTMP));
d99 1
a99 1
logout(char *line)
d101 1
a101 1
	UTMP ut;
d110 1
a110 1
	while (read(fd, &ut, sizeof(UTMP)) == sizeof(UTMP)) {
d117 2
a118 2
		(void)lseek(fd, -(off_t)sizeof(UTMP), SEEK_CUR);
		(void)write(fd, &ut, sizeof(UTMP));
@


1.5
log
@fix some more UCB term 3
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.4 2001/12/07 18:45:32 mpech Exp $	*/
d53 1
a53 2
login(ut)
	UTMP *ut;
d92 1
a92 2
logout(line)
	char *line;
@


1.4
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.3 1999/12/10 10:41:03 deraadt Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@indent
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.2 1998/07/13 02:11:17 millert Exp $	*/
d98 1
a98 1
	register char *line;
@


1.2
log
@ftpd: sleep for an indeterminate amount for non-existant logins
      to simulate a crypt, like login does.
Use SEEK_* not L_* and kill some 0L's used in lseek while we're there.
@
text
@d1 1
a1 1
/*	$OpenBSD: logutmp.c,v 1.1 1996/06/18 10:09:23 downsj Exp $	*/
d71 2
a72 2
	if ((topslot < 0) || ((fd < 0)
	    && (fd = open(_PATH_UTMP, O_RDWR|O_CREAT, 0644)) < 0))
d110 2
a111 2
		if (!ut.ut_name[0]
		    || strncmp(ut.ut_line, line, UT_LINESIZE))
@


1.1
log
@my netbsd pr#2217: add utmp support to ftpd, some other small changes/fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 1
a78 1
	(void)lseek(fd, (off_t)(topslot * sizeof(UTMP)), L_SET);
d83 1
a83 1
				(void)lseek(fd, -(off_t)sizeof(UTMP), L_INCR);
d88 1
a88 1
			(void)lseek(fd, (off_t)(topslot * sizeof(UTMP)), L_SET);
d107 1
a107 1
	(void)lseek(fd, 0, L_SET);
d116 1
a116 1
		(void)lseek(fd, -(off_t)sizeof(UTMP), L_INCR);
@

