head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.6
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.26
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.18
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.22
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.20
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.16
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.14
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.10
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.22
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.18
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.16
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.14
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.12
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.10
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.8
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.09.04.15.03.13;	author jca;	state Exp;
branches;
next	1.18;
commitid	44QBPP680ACuAT8g;

1.18
date	2016.04.25.15.43.34;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	I3EQuSEiFuZ6Sj6q;

1.17
date	2015.12.01.20.23.46;	author tim;	state Exp;
branches;
next	1.16;
commitid	PTwicLEsu6Rr20Pr;

1.16
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2004.09.15.19.03.19;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.06.02.02.21.15;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.05.17.02.37;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.20.19.51.36;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.06.19.43.54;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.15.23.47.57;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.28.23.22.21;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.28.22.59.20;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.28.22.40.33;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.09.04.06.42;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.28.19.34.32;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.17.19.23.27;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.09.19.09.28.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.09.22.08.41.33;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@'pw' can't be NULL here, remove useless test.
@
text
@/*	$OpenBSD: rusersd.c,v 1.18 2016/04/25 15:43:34 deraadt Exp $	*/

/*-
 *  Copyright (c) 1993 John Brezak
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/file.h>
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <pwd.h>
#include <syslog.h>
#include <rpc/rpc.h>
#include <rpcsvc/rusers.h>	/* New version */
#include <rpcsvc/rnusers.h>	/* Old version */
#include <rpc/pmap_clnt.h>
#include <utmp.h>

extern void rusers_service(struct svc_req *, SVCXPRT *);

int from_inetd = 1;
int utmp_fd;

/* ARGSUSED */
static void
cleanup(int signo)
{
	(void) pmap_unset(RUSERSPROG, RUSERSVERS_3);	/* XXX signal races */
	(void) pmap_unset(RUSERSPROG, RUSERSVERS_IDLE);
	(void) pmap_unset(RUSERSPROG, RUSERSVERS_ORIG);
	_exit(0);
}

int
main(int argc, char *argv[])
{
	int sock = 0, proto = 0;
	socklen_t fromlen;
	struct sockaddr_storage from;
	struct passwd *pw;
	SVCXPRT *transp;

	if ((utmp_fd = open(_PATH_UTMP, O_RDONLY)) == -1) {
		syslog(LOG_ERR, "cannot open %s", _PATH_UTMP);
		exit(1);
	}

	openlog("rpc.rusersd", LOG_NDELAY|LOG_CONS|LOG_PID, LOG_DAEMON);

	pw = getpwnam("_rusersd");
	if (!pw) {
		syslog(LOG_ERR, "no such user _rusersd");
		exit(1);
	}
	if (chroot("/var/empty") == -1) {
		syslog(LOG_ERR, "cannot chdir to /var/empty.");
		exit(1);
	}
	chdir("/");

	setgroups(1, &pw->pw_gid);
	setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid);
	setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid);

	/*
	 * See if inetd started us
	 */
	fromlen = sizeof(from);
	if (getsockname(0, (struct sockaddr *)&from, &fromlen) < 0) {
		from_inetd = 0;
		sock = RPC_ANYSOCK;
		proto = IPPROTO_UDP;
	}

	if (!from_inetd) {
		daemon(0, 0);

		(void) pmap_unset(RUSERSPROG, RUSERSVERS_3);
		(void) pmap_unset(RUSERSPROG, RUSERSVERS_IDLE);
		(void) pmap_unset(RUSERSPROG, RUSERSVERS_ORIG);

		(void) signal(SIGINT, cleanup);
		(void) signal(SIGTERM, cleanup);
		(void) signal(SIGHUP, cleanup);
	}

	transp = svcudp_create(sock);
	if (transp == NULL) {
		syslog(LOG_ERR, "cannot create udp service.");
		exit(1);
	}
	if (!svc_register(transp, RUSERSPROG, RUSERSVERS_3, rusers_service, proto)) {
		syslog(LOG_ERR,
		    "unable to register (RUSERSPROG, RUSERSVERS_3, %s).",
		    proto ? "udp" : "(inetd)");
		exit(1);
	}
	if (!svc_register(transp, RUSERSPROG, RUSERSVERS_IDLE, rusers_service, proto)) {
		syslog(LOG_ERR,
		    "unable to register (RUSERSPROG, RUSERSVERS_IDLE, %s).",
		    proto ? "udp" : "(inetd)");
		exit(1);
	}
	if (!svc_register(transp, RUSERSPROG, RUSERSVERS_ORIG, rusers_service, proto)) {
		syslog(LOG_ERR,
		    "unable to register (RUSERSPROG, RUSERSVERS_ORIG, %s).",
		    proto ? "udp" : "(inetd)");
		exit(1);
	}

	svc_run();
	syslog(LOG_ERR, "svc_run returned");
	exit(1);
}
@


1.18
log
@prefer setres{u,g}id() rather than manipulating both real and effective
ids, it clarifies these are full revocation situations.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.17 2015/12/01 20:23:46 tim Exp $	*/
d88 3
a90 5
	if (pw) {
		setgroups(1, &pw->pw_gid);
		setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid);
		setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid);
	}
@


1.17
log
@Don't fall back to user nobody if _rusersd doesn't exist; "Of course!" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.16 2009/10/27 23:59:31 deraadt Exp $	*/
d90 2
a91 4
		setegid(pw->pw_gid);
		setgid(pw->pw_gid);
		seteuid(pw->pw_uid);
		setuid(pw->pw_uid);
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.15 2004/09/15 19:03:19 deraadt Exp $	*/
d78 4
a81 2
	if (!pw)
		pw = getpwnam("nobody");
@


1.15
log
@ARGSUSED signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.14 2004/06/02 02:21:15 brad Exp $	*/
a29 4

#ifndef lint
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.14 2004/06/02 02:21:15 brad Exp $";
#endif /* not lint */
@


1.14
log
@IPv6 support.

From NetBSD

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.13 2003/07/05 17:02:37 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.13 2003/07/05 17:02:37 deraadt Exp $";
d55 1
@


1.13
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.12 2003/01/20 19:51:36 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.12 2003/01/20 19:51:36 deraadt Exp $";
d69 1
a69 1
	struct sockaddr_in from;
@


1.12
log
@use LOG_NDELAY in chroot() using daemons
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.11 2002/09/06 19:43:54 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.11 2002/09/06 19:43:54 deraadt Exp $";
d55 1
a55 1
void
@


1.11
log
@use socklen_t more; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.10 2002/07/15 23:47:57 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.10 2002/07/15 23:47:57 deraadt Exp $";
d78 2
a117 2

	openlog("rpc.rusersd", LOG_CONS|LOG_PID, LOG_DAEMON);
@


1.10
log
@5 new uid/gid sets; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.9 2002/06/28 23:22:21 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.9 2002/06/28 23:22:21 deraadt Exp $";
d67 2
a68 1
	int sock = 0, proto = 0, fromlen;
@


1.9
log
@stupid bug written in the last minute
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.8 2002/06/28 22:59:20 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.8 2002/06/28 22:59:20 deraadt Exp $";
d77 3
a79 1
	pw = getpwnam("nobody");
@


1.8
log
@correct uid handling; markus
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.7 2002/06/28 22:40:33 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.7 2002/06/28 22:40:33 deraadt Exp $";
d72 1
a72 1
	if (utmp_fd = open(_PATH_UTMP, O_RDONLY) == -1) {
@


1.7
log
@go back to running these as root from inetd.  however once rpc.{rusersd,rstatd}
starts, do a chroot to /var/empty and change to user nobody.
hi mom, i'm in jail!
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.6 2002/06/09 04:06:42 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.6 2002/06/09 04:06:42 deraadt Exp $";
d89 1
a89 1
		setegid(pw->pw_uid);
@


1.6
log
@some misc cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: rusersd.c,v 1.5 2001/01/28 19:34:32 niklas Exp $	*/
d6 1
a6 1
 * 
d17 1
a17 1
 * 
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.5 2001/01/28 19:34:32 niklas Exp $";
d37 1
d42 1
d48 1
d53 1
d56 1
a56 1
cleanup()
d65 1
a65 3
main(argc, argv)
	int argc;
	char *argv[];
d67 3
d71 20
a90 4
	int sock = 0;
	int proto = 0;
	struct sockaddr_in from;
	int fromlen;
d101 1
a101 1
	
d115 1
a115 1
	
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rusersd.c,v 1.4 2001/01/17 19:23:27 deraadt Exp $";
d47 1
a47 1
extern void rusers_service();
d101 3
a103 1
		syslog(LOG_ERR, "unable to register (RUSERSPROG, RUSERSVERS_3, %s).", proto?"udp":"(inetd)");
d107 3
a109 1
		syslog(LOG_ERR, "unable to register (RUSERSPROG, RUSERSVERS_IDLE, %s).", proto?"udp":"(inetd)");
d113 3
a115 1
		syslog(LOG_ERR, "unable to register (RUSERSPROG, RUSERSVERS_ORIG, %s).", proto?"udp":"(inetd)");
@


1.4
log
@use _exit() in signal handlers, and flag that the pmap_unset() calls are unsafe
@
text
@d1 2
d32 1
a32 1
static char rcsid[] = "$Id: rusersd.c,v 1.3 1997/09/19 09:28:03 deraadt Exp $";
@


1.3
log
@Wall
@
text
@d30 1
a30 1
static char rcsid[] = "$Id: rusersd.c,v 1.2 1996/09/22 08:41:33 tholo Exp $";
d52 1
a52 1
	(void) pmap_unset(RUSERSPROG, RUSERSVERS_3);
d55 1
a55 1
	exit(0);
@


1.2
log
@Make this work properly with corrected rnusers.x
Also implement protocol version 1 while at it
@
text
@d30 1
a30 1
static char rcsid[] = "$Id: rusersd.c,v 1.1.1.1 1995/10/18 08:43:21 deraadt Exp $";
d33 2
a35 1
#include <rpc/rpc.h>
d37 2
d40 1
d43 1
d58 1
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
static char rcsid[] = "$Id: rusersd.c,v 1.8 1995/01/13 19:59:15 mycroft Exp $";
d49 1
d78 1
d98 4
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
