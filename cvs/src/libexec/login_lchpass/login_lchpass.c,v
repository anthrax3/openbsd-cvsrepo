head	1.20;
access;
symbols
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.14.0.14
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.6
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.10
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.8
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.4
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.26
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.24
	OPENBSD_5_0:1.13.0.22
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.20
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.18
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.14
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.16
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.12
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.10
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.8
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.6
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.4
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.09.03.10.48.15;	author gsoares;	state Exp;
branches;
next	1.19;
commitid	RozIKuWxjCiPJIuQ;

1.19
date	2016.08.01.17.04.18;	author jca;	state Exp;
branches;
next	1.18;
commitid	Gwrxm58xaF2yOSYb;

1.18
date	2015.11.18.19.27.46;	author tedu;	state Exp;
branches;
next	1.17;
commitid	OBYBS4eQ2U2qPazA;

1.17
date	2015.10.25.08.39.26;	author ajacoutot;	state Exp;
branches;
next	1.16;
commitid	cLlYHAKgT7hh5C62;

1.16
date	2015.10.22.12.32.33;	author tedu;	state Exp;
branches;
next	1.15;
commitid	eiozEsHyKysLLYUw;

1.15
date	2015.10.05.17.31.17;	author millert;	state Exp;
branches;
next	1.14;
commitid	TEnCycDCWPhCYHBk;

1.14
date	2012.12.04.02.24.47;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.09.19.14.10;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.10.21.30.27;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.15.20.56.02;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.06.18.45.06;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.28.01.14.37;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.02.01.27.15;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.30;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.06.21.53.28;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.07.04.20.19;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.06.05.37.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.13.06.35;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.25.22.10.28;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.12.02.32.57;	author millert;	state Exp;
branches;
next	;


desc
@@


1.20
log
@convert to use readpassphrase() instead of DEPRECATED/getpass()
OK millert@@
@
text
@/*	$OpenBSD: login_lchpass.c,v 1.19 2016/08/01 17:04:18 jca Exp $	*/

/*-
 * Copyright (c) 1995,1996 Berkeley Software Design, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Berkeley Software Design,
 *      Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI $From: login_lchpass.c,v 1.4 1997/08/08 18:58:23 prb Exp $
 */
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/file.h>
#include <sys/uio.h>
#include <sys/wait.h>

#include <err.h>
#include <errno.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>
#include <stdarg.h>
#include <login_cap.h>
#include <readpassphrase.h>

#define BACK_CHANNEL	3

int local_passwd(char *, int);

int
main(int argc, char *argv[])
{
	struct iovec iov[2];
	struct passwd *pwd;
	char *username = NULL, *hash = NULL;
	char oldpass[1024];
	struct rlimit rl;
	int c;

	iov[0].iov_base = BI_SILENT;
	iov[0].iov_len = sizeof(BI_SILENT) - 1;
	iov[1].iov_base = "\n";
	iov[1].iov_len = 1;

	rl.rlim_cur = 0;
	rl.rlim_max = 0;
	(void)setrlimit(RLIMIT_CORE, &rl);

	(void)setpriority(PRIO_PROCESS, 0, 0);

	openlog("login", LOG_ODELAY, LOG_AUTH);

	while ((c = getopt(argc, argv, "v:s:")) != -1)
		switch (c) {
		case 'v':
			break;
		case 's':	/* service */
			if (strcmp(optarg, "login") != 0) {
				syslog(LOG_ERR, "%s: invalid service", optarg);
				exit(1);
			}
			break;
		default:
			syslog(LOG_ERR, "usage error");
			exit(1);
		}

	switch (argc - optind) {
	case 2:
		/* class is not used */
	case 1:
		username = argv[optind];
		break;
	default:
		syslog(LOG_ERR, "usage error");
		exit(1);
	}

	pwd = getpwnam_shadow(username);
	if (pwd) {
		if (pwd->pw_uid == 0) {
			syslog(LOG_ERR, "attempted root password change");
			pwd = NULL;
		} else if (*pwd->pw_passwd == '\0') {
			syslog(LOG_ERR, "%s attempting to add password",
			    username);
			pwd = NULL;
		}
	}

	if (pwd)
		hash = pwd->pw_passwd;

	(void)setpriority(PRIO_PROCESS, 0, -4);

	(void)printf("Changing local password for %s.\n", username);
	if ((readpassphrase("Old Password:", oldpass, sizeof(oldpass),
		    RPP_ECHO_OFF)) == NULL)
		exit(1);

	if (crypt_checkpass(oldpass, hash) != 0) {
		explicit_bzero(oldpass, strlen(oldpass));
		exit(1);
	}
	explicit_bzero(oldpass, strlen(oldpass));

	/*
	 * We rely on local_passwd() to block signals during the
	 * critical section.
	 */
	local_passwd(pwd->pw_name, 1);
	(void)writev(BACK_CHANNEL, iov, 2);
	exit(0);
}
@


1.19
log
@zap unused var
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.18 2015/11/18 19:27:46 tedu Exp $	*/
d54 1
d65 2
a66 1
	char *username = NULL, *hash = NULL, *p;
d127 2
a128 1
	if ((p = getpass("Old Password:")) == NULL)
d131 2
a132 2
	if (crypt_checkpass(p, hash) != 0) {
		explicit_bzero(p, strlen(p));
d135 1
a135 1
	explicit_bzero(p, strlen(p));
@


1.18
log
@use _shadow getpw functions. these utilities obviously deal with hashes.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.17 2015/10/25 08:39:26 ajacoutot Exp $	*/
a61 1
	login_cap_t *lc;
@


1.17
log
@No need to declare pwd_gensalt; it's unused and gone.
ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.16 2015/10/22 12:32:33 tedu Exp $	*/
d108 1
a108 1
	pwd = getpwnam(username);
@


1.16
log
@use crypt_checkpass instead of doing things the hard way with crypt.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.15 2015/10/05 17:31:17 millert Exp $	*/
a57 1
int pwd_gensalt(char *, int, login_cap_t *, char);
@


1.15
log
@Use explicit_bzero() instead of memset() for zeroing out secrets.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.14 2012/12/04 02:24:47 deraadt Exp $	*/
d66 1
a66 1
	char *username = NULL, *salt, *p, saltbuf[_PASSWORD_LEN + 1];
d122 1
a122 9
		salt = pwd->pw_passwd;
	else {
		/* no such user, get appropriate salt */
		if ((lc = login_getclass(NULL)) == NULL ||
		    pwd_gensalt(saltbuf, sizeof(saltbuf), lc, 'l') == 0)
			salt = "xx";
		else
			salt = saltbuf;
	}
d130 4
a133 1
	salt = crypt(p, salt);
a134 2
	if (!pwd || strcmp(salt, pwd->pw_passwd) != 0)
		exit(1);
@


1.14
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.13 2006/03/09 19:14:10 millert Exp $	*/
d139 1
a139 1
	memset(p, 0, strlen(p));
@


1.13
log
@Foil potential timing attacks by using the correct password hash
instead of "xx".  In practice this means bcrypt() will be used for
non-existent users instead of DES crypt().
Adapted from a patch by Peter Philipp.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.12 2004/03/10 21:30:27 millert Exp $	*/
a35 1
#include <sys/param.h>
@


1.12
log
@More checking for a NULL return value from getpass().  otto@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.11 2002/10/15 20:56:02 millert Exp $	*/
d59 1
d64 1
d67 1
a67 1
	char *username = NULL, *salt, *p;
d124 8
a131 2
	else
		salt = "xx";
@


1.11
log
@localhost variable is not needed; Peter Werner
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.10 2002/09/06 18:45:06 deraadt Exp $	*/
d128 2
a129 1
	p = getpass("Old Password:");
@


1.10
log
@ansi; ok millert pvalchev
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.9 2002/06/28 01:14:37 deraadt Exp $	*/
a64 1
	char localhost[MAXHOSTNAMELEN];
a80 3

	if (gethostname(localhost, sizeof(localhost)) < 0)
		syslog(LOG_ERR, "couldn't get local hostname: %m");
@


1.9
log
@minor indent cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.8 2002/06/02 01:27:15 deraadt Exp $	*/
d61 1
a61 3
main(argc, argv)
	int argc;
	char *argv[];
d66 2
a67 3
	char *username = NULL;
	char *salt;
	char *p;
a68 1
	struct rlimit rl;
@


1.8
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.7 2002/02/16 21:27:30 millert Exp $	*/
d68 1
a68 1
    	char *username = NULL;
d71 1
a71 1
    	int c;
d90 1
a90 1
    	while ((c = getopt(argc, argv, "v:s:")) != -1)
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.6 2002/01/06 21:53:28 millert Exp $	*/
d91 1
a91 1
		switch(c) {
d105 1
a105 1
	switch(argc - optind) {
@


1.6
log
@Don't let root change it's password via login_l?chpass(8).
At some point in the future, passwd(1) may call these auth methods
at which time we will need a flag to allow root to do a password
change and also to allow account w/o a password to be given one.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.5 2001/12/07 04:20:19 millert Exp $	*/
d58 1
a58 1
int local_passwd __P((char *, int));
@


1.5
log
@Use writev() to send status on the backchannel instead of fdopen()ing
fd 3 and using stdio.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.4 2001/12/06 05:37:04 millert Exp $	*/
d68 1
a68 1
    	char *username = 0;
d117 9
a125 5

	if (pwd && *pwd->pw_passwd == '\0') {
		syslog(LOG_ERR, "%s attempting to add password", username);
		(void)writev(BACK_CHANNEL, iov, 2);
		exit(0);
d135 1
a135 1
	(void)printf("Changing local password for %s.\n", pwd->pw_name);
@


1.4
log
@Do not set handler for SIGINT and SIGQUIT to SIG_IGN since it prevents
getpass()/readpassphrase() from being able to restore the tty mode
on keyboard interrupt.  Along with the recent readpassphrase.c commit
this means that if you ^C things that use login scripts (like su(1))
with a non-CBREAK shell your tty mode will be restored nicely.

TODO:
The various login scripts need to install handlers to avoid leaving
turd files or otherwise ending in a bad state.  It would also be
nice to send BI_REJECT to the back channel.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.3 2001/10/24 13:06:35 mpech Exp $	*/
d41 1
d56 2
d65 1
a65 1
	FILE *back;
d74 5
a117 5
	if (!(back = fdopen(3, "a")))  {
		syslog(LOG_ERR, "reopening back channel");
		exit(1);
	}

d120 1
a120 1
		fprintf(back, BI_SILENT "\n");
d131 1
a131 1
	printf("Changing local password for %s.\n", pwd->pw_name);
d138 5
d144 1
a144 1
	fprintf(back, BI_SILENT "\n");
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.2 2001/06/25 22:10:28 millert Exp $	*/
a74 2
	(void)signal(SIGQUIT, SIG_IGN);
	(void)signal(SIGINT, SIG_IGN);
@


1.2
log
@Remove instance stuff now that su uses an explicit option to specify
the invoking user.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_lchpass.c,v 1.1 2000/12/12 02:32:57 millert Exp $	*/
d84 1
a84 1
    	while ((c = getopt(argc, argv, "v:s:")) != EOF)
@


1.1
log
@lchpass login script; changes local password
will be used when BSD authentication is enabled
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a65 1
    	char *instance;
a108 4

	instance = strchr(username, '.');
	if (instance)
		*instance++ = '\0';
@

