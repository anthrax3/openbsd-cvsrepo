head	1.11;
access;
symbols
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2016.08.22.19.41.18;	author schwarze;	state dead;
branches;
next	1.10;
commitid	ey7eLp6W2n4XJ7B4;

1.10
date	2014.03.21.10.59.31;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.29.11.08.56;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2011.06.24.10.40.18;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2011.02.22.00.23.14;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.13.15.39.03;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.09.08.12.49;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.24.14.08.20;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.13.11.22.24;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.24.00.00.05;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.12.05.08;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@This code served us well for many years,
but we are unlikely to reactivate it; espie@@ agrees.
The new code is in /usr/src/usr.bin/mandoc/mandocdb.c.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Unformated.pm,v 1.10 2014/03/21 10:59:31 espie Exp $
# Copyright (c) 2000-2004 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
package OpenBSD::Makewhatis::Unformated;

# add_unformated_subject($toadd, $section, $toexpand, $h) :
#
#   build subject from list of $toadd lines, and add it to the list
#   of current subjects as section $section
#
sub add_unformated_subject
{
    my ($toadd, $section, $toexpand, $h) = @@_;

    my $exp = sub {
    	if (defined $toexpand->{$_[0]}) {
		return $toexpand->{$_[0]};
	} else {
		$h->errsay("#2: can't expand #1", $_[0]);
		return "";
	}
    };

    my $s = join(' ', @@$toadd);
	# do interpolations
    $s =~ s/\\\*\((..)/&$exp($1)/ge;
    $s =~ s/\\\*\[(.*?)\]/&$exp($1)/ge;

	# horizontal space adjustments
    while ($s =~ s/\\s[-+]?\d+//g)
    	{}
	# unbreakable spaces
    $s =~ s/\\\s+/ /g;
    	# unbreakable em dashes
    $s =~ s/\\\|\\\(em\\\|/-/g;
	# em dashes
    $s =~ s/\\\(em\s+/- /g;
    	# single quotes
    $s =~ s/\\\(aq/\'/g;
    	# em dashes in the middle of lines
    $s =~ s/\\\(em/-/g;
    $s =~ s/\\\*[LO]//g;
    $s =~ s/\\\(tm/(tm)/g;
	# font changes
    $s =~ s/\\f[BIRP]//g;
    $s =~ s/\\f\(..//g;
    	# fine space adjustments
    while ($s =~ s/\\[vh]\'.*?\'//g)
    	{}
    unless ($s =~ s/\s+\\-\s+/ ($section) - / || 
    	$s =~ s/\s?\\\-/ ($section) -/ ||
    	$s =~ s/\s-\s/ ($section) - /) {
	$h->weird_subject($s) if $h->p->picky;
	    # Try guessing where the separation falls...
	$s =~ s/\s+\:\s+/ ($section) - / || $s =~ s/\S+\s/$& ($section) - / || 
	    $s =~ s/$/ ($section) - (empty subject)/;
    }
	# other dashes
    $s =~ s/\\-/-/g;
	# escaped characters
    $s =~ s/\\\&(.)/$1/g;
    $s =~ s/\\\|/|/g;
	# gremlins...
    $s =~ s/\\c//g;
	# sequence of spaces
    $s =~ s/\s+$//;
    $s =~ s/^\s+//;
    $s =~ s/\s+/ /g;
    	# some damage control
    if ($s =~ m/^\Q($section) - \E/) {
    	$h->weird_subject($s) if $h->p->picky;
	return;
    }
    $h->add($s);
}

# handle($file, $h)
#
#   handle an unformated manpage in $file
#
#   may return several subjects, perl(3p) do !
#
sub handle
{
    my ($f, $h) = @@_;
    my %toexpand = (Na => 'NaN', Tm => '(tm)');
    my $so_found = 0;
    my $found_th = 0;
    my $found_old = 0;
    my $found_dt = 0;
    my $found_new = 0;
    # subject/keep is the only way to deal with Nm/Nd pairs
    my @@subject = ();
    my @@keep = ();
    my $nd_seen = 0;
	# retrieve basename of file
    my ($name, $section) = $h->filename =~ m|(?:.*/)?(.*)\.([\w\d]+)|;
	# scan until macro
    local $_;
    while (<$f>) {
	next unless m/^\./ || $found_old || $found_new;
	next if m/^\.\\\"/;
	next if m/^\.if\s+t\s+/;
	s/^\.i[ef]\s+n\s+//;
	s/^\.i[ef]\s+\\n\(\.g\s+//;
	if (m/^\.\s*de/) {
	    while (<$f>) {
		last if m/^\.\s*\./;
	    }
	    next;
	}
	if (m/^\.\s*ds\s+(\S+)\s+/) {
	    chomp($toexpand{$1} = $');
	    next;
	}
	    # Some cross-refs just link to another manpage
	$so_found = 1 if m/^\.\s*so/;
	if (m/^\.\s*TH/ || m/^\.\s*th/) {
		# in pricky mode, we should try to match these
	    # ($name2, $section2) = m/^\.(?:TH|th)\s+(\S+)\s+(\S+)/;
	    	# scan until first section
	    $found_th = 1;
	    next;
	}
	if ($found_th && !$found_old && (m/^\.\s*SH/ || m/^\.\s*sh/)) {
		$found_old = 1;
		next;
	}
	if (m/^\.\s*Dt/) {
	    $section .= "/$1" if (m/^\.\s*Dt\s+\S+\s+\d\S*\s+(\S+)/);
	    $found_dt = 1;
	    next;
    	}
	if ($found_dt && !$found_new && m/^\.\s*Sh/) {
		$found_new = 1;
		next;
	}
	if ($found_old) {
		last if m/^\.\s*(?:SH|sh|SS|ss|nf|LI)/;
		    # several subjects in one manpage
		if (m/^\.\s*(?:PP|Pp|br|PD|LP|sp)/) {
		    add_unformated_subject(\@@subject,
			$section, \%toexpand, $h) if @@subject != 0;
		    @@subject = ();
		    next;
		}
		next if m/^\'/ || m/^\.\s*tr\s+/ || m/^\.\s*\\\"/ ||
		    m/^\.\s*sv/ || m/^\.\s*Vb\s+/ || m/\.\s*HP\s+/;
		# Motif index entries, don't do anything for now.
		next if m/^\.\s*iX/;
		# Some other index (cook)
		next if m/^\.\s*XX/;
		chomp;
		s/\.\s*(?:B|I|IR|SM|BR)\s+//;
		if (m/^\.\s*(\S\S)/) {
		    $h->errsay("#2: not grokking #1", $_) if $h->p->picky;
		    next;
		}
		push(@@subject, $_) unless m/^\s*$/;
		next;
	}
	if ($found_new) {
		last if m/^\.\s*Sh/;
		s/\s,/,/g;
		if (s/^\.\s*(\S\S)\s+//) {
		    my $macro = $1;
		    next if $macro eq "\\\"";
		    s/\"(.*?)\"/$1/g;
		    s/\\-/-/g;
		    $macro eq 'Xr' and s/^(\S+)\s+(\d\S*)/$1 ($2)/;
		    $macro eq 'Ox' and s/^/OpenBSD /;
		    $macro eq 'Nx' and s/^/NetBSD /;
		    if ($macro eq 'Nd') {
			if (@@keep != 0) {
			    add_unformated_subject(\@@keep, 
				$section, \%toexpand, $h);
			    @@keep = ();
			}
			push(@@subject, "\\-");
			$nd_seen = 1;
		    }
		    if ($nd_seen && $macro eq 'Nm') {
			@@keep = @@subject;
			@@subject = ();
			$nd_seen = 0;
		    }
		}
		push(@@subject, $_) unless m/^\s*$/;
	}
    }
    if ($found_th && !$found_old) {
	    $h->cant_find_subject;
    }
    if ($found_dt && !$found_new) {
	    $h->cant_find_subject;
    }
    unshift(@@subject, @@keep) if @@keep != 0;
    add_unformated_subject(\@@subject, $section,
	\%toexpand, $h) if @@subject != 0;
    if (!$so_found && !$found_old && !$found_new) {
    	$h->errsay("Unknown manpage type #1");
    }
}

1;
@


1.10
log
@fix "my $_" issues in preparation for perl 5.18
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.9 2013/01/29 11:08:56 espie Exp $
@


1.9
log
@refactor code a bit to actually store subjects in the subject object
reformat for 8 spaces tab.
okay millert@@
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.8 2011/06/24 10:40:18 schwarze Exp $
d39 1
a39 1
    my $_ = join(' ', @@$toadd);
d41 2
a42 2
    s/\\\*\((..)/&$exp($1)/ge;
    s/\\\*\[(.*?)\]/&$exp($1)/ge;
d45 1
a45 1
    while (s/\\s[-+]?\d+//g)
d48 1
a48 1
    s/\\\s+/ /g;
d50 1
a50 1
    s/\\\|\\\(em\\\|/-/g;
d52 1
a52 1
    s/\\\(em\s+/- /g;
d54 1
a54 1
    s/\\\(aq/\'/g;
d56 3
a58 3
    s/\\\(em/-/g;
    s/\\\*[LO]//g;
    s/\\\(tm/(tm)/g;
d60 2
a61 2
    s/\\f[BIRP]//g;
    s/\\f\(..//g;
d63 1
a63 1
    while (s/\\[vh]\'.*?\'//g)
d65 4
a68 3
    unless (s/\s+\\-\s+/ ($section) - / || s/\s?\\\-/ ($section) -/ ||
    	s/\s-\s/ ($section) - /) {
	$h->weird_subject($_) if $h->p->picky;
d70 2
a71 1
	s/\s+\:\s+/ ($section) - / || s/\S+\s/$& ($section) - / || s/$/ ($section) - (empty subject)/;
d74 1
a74 1
    s/\\-/-/g;
d76 2
a77 2
    s/\\\&(.)/$1/g;
    s/\\\|/|/g;
d79 1
a79 1
    s/\\c//g;
d81 3
a83 3
    s/\s+$//;
    s/^\s+//;
    s/\s+/ /g;
d85 2
a86 2
    if (m/^\Q($section) - \E/) {
    	$h->weird_subject($_) if $h->p->picky;
d89 1
a89 1
    $h->add($_);
a110 1
    my $_;
d114 1
@


1.8
log
@Handle \*(Na in .Nd, needed by nan(3).
Prodded by deraadt@@, "Yep" espie@@.
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.7 2011/02/22 00:23:14 espie Exp $
d21 1
a21 1
# add_unformated_subject($lines, $toadd, $section, $p) :
d28 1
a28 1
    my ($subjects, $toadd, $section, $toexpand, $h) = @@_;
d65 1
a65 1
    unless (s/\s+\\-\s+/ ($section) - / || s/\s*\\\-/ ($section) -/ ||
d69 1
a69 1
	s/\s+\:\s+/ ($section) - / || s/\S+\s+/$& ($section) - / || s/\s*$/ ($section) - (empty subject)/;
d87 1
a87 1
    push(@@$subjects, $_);
d90 1
a90 1
# $lines = handle($file, $h)
a98 1
    my @@lines = ();
d155 1
a155 1
		    add_unformated_subject(\@@lines, \@@subject,
d169 1
a169 2
		    $h->errsay("#2: not grokking #1", $_)
			if $h->p->picky;
d188 1
a188 1
			    add_unformated_subject(\@@lines, \@@keep, 
d205 1
a205 1
    		$h->cant_find_subject;
d208 1
a208 1
    		$h->cant_find_subject;
d211 1
a211 1
    add_unformated_subject(\@@lines, \@@subject, $section,
a215 1
    return \@@lines;
@


1.7
log
@shut up unless -v, and a few minor enhancements.
okay miod@@
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.6 2010/07/13 15:39:03 espie Exp $
d100 1
a100 1
    my %toexpand = (Tm => '(tm)');
@


1.6
log
@handle Tm, like in tiff2ps
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.5 2010/07/09 08:12:49 espie Exp $
d21 1
a21 1
# add_unformated_subject($lines, $toadd, $section, $filename, $toexpand, $p) :
d28 1
a28 1
    my ($subjects, $toadd, $section, $filename, $toexpand, $p) = @@_;
d34 1
a34 1
		$p->errsay("#1: can't expand #2", $filename, $_[0]);
d67 1
a67 1
	$p->errsay("Weird subject line in #1:\n#2", $filename, $_) if $p->picky;
d84 1
a84 2
    	$p->errsay("Rejecting non-subject line from #1:\n#2", $filename, $_)
	    if $p->picky;
d90 1
a90 1
# $lines = handle($file, $filename, $p)
d98 1
a98 1
    my ($f, $filename, $p) = @@_;
d112 1
a112 1
    my ($name, $section) = $filename =~ m|(?:.*/)?(.*)\.([\w\d]+)|;
d157 1
a157 2
			$section, $filename, \%toexpand, $p)
			    if @@subject != 0;
d170 2
a171 2
		    $p->errsay("#1: not grokking #2", $filename, $_)
			if $p->picky;
d191 1
a191 1
				$section, $filename, \%toexpand, $p);
d207 1
a207 1
	    $p->errsay("Couldn't find subject in old manpage #1", $filename);
d210 1
a210 1
	    $p->errsay("Couldn't find subject in new manpage #1", $filename);
d214 1
a214 1
	$filename, \%toexpand, $p) if @@subject != 0;
d216 1
a216 1
    	$p->errsay("Unknown manpage type #1", $filename);
@


1.5
log
@don't print directly, use an interface that's similar enough to pkg_add
print framework so that we'll be able to integrate with it better.
ok millert@@
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.4 2009/12/24 14:08:20 espie Exp $
d101 1
a101 1
    my %toexpand = ();
@


1.4
log
@deal with the new .Aq in perl manpages production.
- handle .ie, .el minimally
- define \(aq as the ' symbol.
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.3 2005/01/13 11:22:24 espie Exp $
d21 1
a21 1
# add_unformated_subject($lines, $toadd, $section, $filename, $toexpand):
d28 1
a28 1
    my ($subjects, $toadd, $section, $filename, $toexpand, $picky) = @@_;
d34 1
a34 1
		print STDERR "$filename: can't expand $_[0]\n";
d39 1
a39 1
    local $_ = join(' ', @@$toadd);
d67 1
a67 1
	print STDERR "Weird subject line in $filename:\n$_\n" if $picky;
d84 2
a85 2
    	print STDERR "Rejecting non-subject line from $filename:\n$_\n"
	    if $picky;
d91 1
a91 1
# $lines = handle($file, $filename, $picky)
d99 1
a99 1
    my ($f, $filename, $picky) = @@_;
d111 1
a111 1
    local $_;
d158 1
a158 1
			$section, $filename, \%toexpand, $picky)
d172 2
a173 2
		    print STDERR "$filename: not grokking $_\n" 
			if $picky;
d193 1
a193 1
				$section, $filename, \%toexpand, $picky);
d209 1
a209 1
	    print STDERR "Couldn't find subject in old manpage $filename\n";
d212 1
a212 1
	    print STDERR "Couldn't find subject in new manpage $filename\n";
d216 1
a216 1
	$filename, \%toexpand, $picky) if @@subject != 0;
d218 1
a218 1
	print STDERR "Unknown manpage type $filename\n";
@


1.3
log
@handle
.if n
.if t
sequences (see jadetex.1)

okay jmc@@
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.2 2004/12/24 00:00:05 espie Exp $
d53 2
d119 2
a120 1
	s/^\.if\s+n\s+//;
@


1.2
log
@streamline parser loops, now we've got a simple loop with flags, instead
of involved loops. Makes it MUCH easier to have uniform treatment of
various constructs.
okay millert@@
@
text
@d2 1
a2 1
# $OpenBSD: Unformated.pm,v 1.1 2004/08/06 12:05:08 espie Exp $
d116 2
@


1.1
log
@Reorganize makewhatis in smaller modules.
Avoid pulling unneeded code: for instance, if you have only formated
manpages in your system, Unformated will never be used; Check put aside
and only used in -p mode. -t mode won't pull Whatis. Find; File::Compare
and File::Copy and File::Temp likewise.

okay millert@@
@
text
@d2 1
a2 1
# $OpenBSD$
d101 8
d114 2
a115 1
	next unless m/^\./;
d132 24
a155 5
	    while (<$f>) {
		if (m/^\.\s*de/) {
		    while (<$f>) {
			last if m/^\.\s*\./;
		    }
d158 11
a168 2
		if (m/^\.\s*ds\s+(\S+)\s+/) {
		    chomp($toexpand{$1} = $');
d171 19
a189 24
		next unless m/^\./;
		if (m/^\.\s*SH/ || m/^\.\s*sh/) {
		    my @@subject = ();
		    while (<$f>) {
			last if m/^\.\s*(?:SH|sh|SS|ss|nf|LI)/;
			    # several subjects in one manpage
			if (m/^\.\s*(?:PP|Pp|br|PD|LP|sp)/) {
			    add_unformated_subject(\@@lines, \@@subject,
				$section, $filename, \%toexpand, $picky)
				    if @@subject != 0;
			    @@subject = ();
			    next;
			}
			next if m/^\'/ || m/^\.\s*tr\s+/ || m/^\.\s*\\\"/ ||
			    m/^\.\s*sv/ || m/^\.\s*Vb\s+/ || m/\.\s*HP\s+/;
			if (m/^\.\s*de/) {
			    while (<$f>) {
				last if m/^\.\s*\./;
			    }
			    next;
			}
			if (m/^\.\s*ds\s+(\S+)\s+/) {
			    chomp($toexpand{$1} = $');
			    next;
d191 2
a192 12
			# Motif index entries, don't do anything for now.
			next if m/^\.\s*iX/;
			# Some other index (cook)
			next if m/^\.\s*XX/;
			chomp;
			s/\.\s*(?:B|I|IR|SM|BR)\s+//;
			if (m/^\.\s*(\S\S)/) {
			    print STDERR "$filename: not grokking $_\n" 
				if $picky;
			    next;
			}
			push(@@subject, $_) unless m/^\s*$/;
d194 4
a197 43
		    add_unformated_subject(\@@lines, \@@subject, $section,
			$filename, \%toexpand, $picky) if @@subject != 0;
		    return \@@lines;
		}
	    }
	    print STDERR "Couldn't find subject in old manpage $filename\n";
	} elsif (m/^\.\s*Dt/) {
	    $section .= "/$1" if (m/^\.\s*Dt\s+\S+\s+\d\S*\s+(\S+)/);
	    while (<$f>) {
		next unless m/^\./;
		if (m/^\.\s*Sh/) {
		    # subject/keep is the only way to deal with Nm/Nd pairs
		    my @@subject = ();
		    my @@keep = ();
		    my $nd_seen = 0;
		    while (<$f>) {
		    	next if m/^\.\\\"/;
			last if m/^\.\s*Sh/;
			s/\s,/,/g;
			if (s/^\.\s*(\S\S)\s+//) {
			    my $macro = $1;
			    next if $macro eq "\\\"";
			    s/\"(.*?)\"/$1/g;
			    s/\\-/-/g;
			    $macro eq 'Xr' and s/^(\S+)\s+(\d\S*)/$1 ($2)/;
			    $macro eq 'Ox' and s/^/OpenBSD /;
			    $macro eq 'Nx' and s/^/NetBSD /;
			    if ($macro eq 'Nd') {
				if (@@keep != 0) {
				    add_unformated_subject(\@@lines, \@@keep, 
				    	$section, $filename, \%toexpand, $picky);
				    @@keep = ();
				}
				push(@@subject, "\\-");
				$nd_seen = 1;
			    }
			    if ($nd_seen && $macro eq 'Nm') {
				@@keep = @@subject;
				@@subject = ();
				$nd_seen = 0;
			    }
			}
			push(@@subject, $_) unless m/^\s*$/;
a198 5
		    unshift(@@subject, @@keep) if @@keep != 0;
		    add_unformated_subject(\@@lines, \@@subject, $section,
		    	$filename, \%toexpand, $picky)
			    if @@subject != 0;
		    return \@@lines;
d200 1
a200 1
	    }
d203 10
a212 1
    if ($so_found == 0) {
@

