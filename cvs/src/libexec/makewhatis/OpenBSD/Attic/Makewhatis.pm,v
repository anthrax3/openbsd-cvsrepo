head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@# @;


1.15
date	2016.08.22.19.41.18;	author schwarze;	state dead;
branches;
next	1.14;
commitid	ey7eLp6W2n4XJ7B4;

1.14
date	2014.03.21.10.59.31;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2014.03.21.10.58.46;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.29.11.08.55;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2012.01.27.11.27.18;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2011.02.22.00.23.14;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.25.17.42.29;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.13.15.38.27;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.09.08.12.49;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.22.15.50.05;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.05.11.02.35;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.07.07.52.10;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.06.16.19.42;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.06.14.09.35;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.12.05.08;	author espie;	state Exp;
branches;
next	;


desc
@@


1.15
log
@This code served us well for many years,
but we are unlikely to reactivate it; espie@@ agrees.
The new code is in /usr/src/usr.bin/mandoc/mandocdb.c.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Makewhatis.pm,v 1.14 2014/03/21 10:59:31 espie Exp $
# Copyright (c) 2000-2004 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# used to print everything. People using makewhatis internally can
# override this

package OpenBSD::Makewhatis::Printer;
sub new
{
	my $class = shift;
	return bless {}, $class;
}

sub print
{
	my $self = shift;
	print $self->f(@@_);
}

sub errsay
{
	my $self = shift;
	print STDERR $self->f(@@_), "\n";
}

sub fatal
{
	my $self = shift;
	die $self->f(@@_);
}

sub f
{
	my $self = shift;
	if (@@_ == 0) {
		return '';
	}
	my ($fmt, @@l) = @@_;
	# make it so that #0 is #
	unshift(@@l, '#');
	$fmt =~ s/\#(\d+)/$l[$1]/ge;
	return $fmt;
}

sub picky
{
	return shift->{picky};
}

sub verbose
{
	return shift->{verbose};
}
sub testmode
{
	return shift->{testmode};
}

sub check_dir
{
	my ($self, $dir) = @@_;
	unless (-d $dir) {
	    $self->fatal("#1: #2 is not a directory", $0, $dir);
	}
}

package OpenBSD::Makewhatis;


# $subjects = scan_manpages(\@@list, $p)
#
#   scan a set of manpages, return list of subjects
#
sub scan_manpages
{
	my ($list, $p) = @@_;

	require OpenBSD::Makewhatis::Subject;
	my $h = OpenBSD::Makewhatis::SubjectHandler->new($p);

	for my $filename (@@$list) {
		my $file;
		if ($filename =~ m/\.(?:Z|gz)$/) {
			unless (open $file, '-|', "gzip", "-fdc", $filename) {
				$p->errsay("#1: can't decompress #2: #3", 
				    $0, $filename, $!);
				next;
			}
			$filename = $`;
		} else {
			if (-z $filename) {
				$p->errsay("Empty file #1", $filename);
				next;
			}
			unless (open $file, '<', $filename) {
				$p->errsay("#1: can't read #2: #3", $0, 
				    $filename, $!);
				next;
			}
		}
		$h->set_filename($filename);
		if ($filename =~ m/\.(?:[1-9ln][^.]*|tbl)$/) {
			require OpenBSD::Makewhatis::Unformated;

			OpenBSD::Makewhatis::Unformated::handle($file, $h);
		} elsif ($filename =~ m/\.0$/) {
			require OpenBSD::Makewhatis::Formated;

			OpenBSD::Makewhatis::Formated::handle($file, $h);
			# in test mode, we try harder
		} elsif ($p->testmode) {
			require OpenBSD::Makewhatis::Unformated;

			OpenBSD::Makewhatis::Unformated::handle($file, $h);
			if ($h->no_subjects) {
				require OpenBSD::Makewhatis::Formated;

				OpenBSD::Makewhatis::Formated::handle($file, 
				    $h);
			}
		} else {
			$p->errsay("Can't find type of #1", $filename);
			next;
		}
	}
	if ($p->picky) {
		require OpenBSD::Makewhatis::Check;

		while (my ($s, $f) = each %{$h->subject_hash}) {
			OpenBSD::Makewhatis::Check::verify_subject($s, 
			    $f, $p);
		}
	}
	my @@done = $h->subjects;
	return \@@done;
}

# build_index($dir, $p)
#
#   build index for $dir
#
sub build_index
{
	require OpenBSD::Makewhatis::Find;
	require OpenBSD::Makewhatis::Whatis;

	my ($dir, $p) = @@_;
	my $list = OpenBSD::Makewhatis::Find::find_manpages($dir);
	my $subjects = scan_manpages($list, $p);
	OpenBSD::Makewhatis::Whatis::write($subjects, $dir, $p);
}

# merge($dir, \@@pages, $p)
#
#   merge set of pages into directory index
#
sub merge
{
	require OpenBSD::Makewhatis::Whatis;

	my ($mandir, $args, $p) = @@_;
	$p //= OpenBSD::Makewhatis::Printer->new;
	$p->check_dir($mandir);
	my $whatis = "$mandir/whatis.db";
	my $subjects = scan_manpages($args, $p);
	if (open(my $old, '<', $whatis)) {
		while (my $l = <$old>) {
			chomp $l;
			push(@@$subjects, $l);
		}
		close($old);
	}
	OpenBSD::Makewhatis::Whatis::write($subjects, $mandir, $p);
}

# open_whatis(dir, file, $p)
#
#   open existing whatis database, or recreate it in case of problem
#
sub open_whatis
{
	my ($mandir, $whatis, $p) = @@_;
	my $fh;

	if (!open($fh , '<', $whatis) && $!{ENOENT}) {
		build_index($mandir, $p);
		open($fh , '<', $whatis);
	}
	return $fh;
}

# remove(dir, \@@pages, $p)
#
#   remove set of pages from directory index
#
sub remove
{
	require OpenBSD::Makewhatis::Whatis;

	my ($mandir, $args, $p) = @@_;
	$p //= OpenBSD::Makewhatis::Printer->new;
	$p->check_dir($mandir);
	my $whatis = "$mandir/whatis.db";
	my $old = open_whatis($mandir, $whatis, $p) or
	    $p->fatal("#1: can't open #2 to merge with: #3", $0, $whatis, $!);
	my $subjects = scan_manpages($args, $p);
	my %remove = map {$_ => 1 } @@$subjects;
	$subjects = [];
	while (my $l = <$old>) {
		chomp $l;
		push(@@$subjects, $l) unless defined $remove{$l};
	}
	close($old);
	OpenBSD::Makewhatis::Whatis::write($subjects, $mandir, $p);
}

# $dirs = default_dirs($p)
#
#   read list of default directories from man.conf
#
sub default_dirs
{
	my $p = shift;
	my $args=[];
	open(my $conf, '<', '/etc/man.conf') or 
	    $p->fatal("#1: can't open #2: #3", $0, "/etc/man.conf", $!);
	while (my $l = <$conf>) {
	    chomp $l;
	    push(@@$args, $1) if $l =~ m/^_whatdb\s+(.*)\/whatis\.db\s*$/;
	}
	close $conf;
	return $args;
}

# makewhatis(\@@args, \%opts)
#
#   glue for front-end, see makewhatis(8)
#
sub makewhatis
{
	my ($args, $opts) = @@_;
	my $p = OpenBSD::Makewhatis::Printer->new;
	if (defined $opts->{'p'}) {
		$p->{picky} = 1;
	}
	if (defined $opts->{'t'}) {
		$p->{testmode} = 1;
		my $subjects = scan_manpages($args, $p);
		$p->print("#1", join("\n", @@$subjects)."\n");
		return;
	} 
	if (defined $opts->{'v'}) {
		$p->{verbose} = 1;
	}

	if (defined $opts->{'d'}) {
		merge($opts->{'d'}, $args, $p);
		return;
	}
	if (defined $opts->{'u'}) {
		remove($opts->{'u'}, $args, $p);
		return;
	}
	if (@@$args == 0) {
		$args = default_dirs($p);
	}
		
	for my $mandir (@@$args) {
		if (-d $mandir) {
			build_index($mandir, $p);
		} elsif (-e $mandir || $p->picky) {
			$p->errsay("#1: #2 is not a directory", $0, $mandir);
		}
	}
}

1;
@


1.14
log
@fix "my $_" issues in preparation for perl 5.18
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.13 2014/03/21 10:58:46 espie Exp $
@


1.13
log
@fix picky mode, my subject handler was not maintaining enough state.
problem introduced some time ago while improving the code :(

okay millert@@
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.12 2013/01/29 11:08:55 espie Exp $
d54 1
a54 1
	my ($_, @@l) = @@_;
d57 2
a58 2
	s/\#(\d+)/$l[$1]/ge;
	return $_;
d97 1
a97 1
	for my $_ (@@$list) {
d99 2
a100 2
		if (m/\.(?:Z|gz)$/) {
			unless (open $file, '-|', "gzip", "-fdc", $_) {
d102 1
a102 1
				    $0, $_, $!);
d105 1
a105 1
			$_ = $`;
d107 2
a108 2
			if (-z $_) {
				$p->errsay("Empty file #1", $_);
d111 3
a113 2
			unless (open $file, '<', $_) {
				$p->errsay("#1: can't read #2: #3", $0, $_, $!);
d117 2
a118 2
		$h->set_filename($_);
		if (m/\.(?:[1-9ln][^.]*|tbl)$/) {
d122 1
a122 1
		} elsif (m/\.0$/) {
d138 1
a138 1
			$p->errsay("Can't find type of #1", $_);
@


1.12
log
@refactor code a bit to actually store subjects in the subject object
reformat for 8 spaces tab.
okay millert@@
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.11 2012/01/27 11:27:18 espie Exp $
d140 3
a142 2
		if ($p->picky) {
			require OpenBSD::Makewhatis::Check;
d144 3
a146 4
			for my $s ($h->subjects) {
				OpenBSD::Makewhatis::Check::verify_subject($s, 
				    $_, $p);
			}
@


1.11
log
@fix pkg_delete for people who had mandocdb enabled:
if we don't find a whatis.db when deleting (which could happen if
mandocdb was enabled while pkg_add was running), first create it,
then update it.

okay nigel@@, schwarze@@
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.10 2011/02/22 00:23:14 espie Exp $
a69 1

d92 50
a141 50
    my ($list, $p) = @@_;
    my $_;
    my $done=[];

    require OpenBSD::Makewhatis::Subject;
    my $h = OpenBSD::Makewhatis::SubjectHandler->new($p);

    for my $_ (@@$list) {
	my ($file, $subjects);
	if (m/\.(?:Z|gz)$/) {
	    unless (open $file, '-|', "gzip", "-fdc", $_) {
	    	$p->errsay("#1: can't decompress #2: #3", $0, $_, $!);
		next;
	    }
	    $_ = $`;
	} else {
	    if (-z $_) {
	    	$p->errsay("Empty file #1", $_);
		next;
	    }
	    unless (open $file, '<', $_) {
	    	$p->errsay("#1: can't read #2: #3", $0, $_, $!);
		next;
	    }
	}
	$h->set_filename($_);
	if (m/\.(?:[1-9ln][^.]*|tbl)$/) {
	    require OpenBSD::Makewhatis::Unformated;

	    $subjects = OpenBSD::Makewhatis::Unformated::handle($file, $h);
	} elsif (m/\.0$/) {
	    require OpenBSD::Makewhatis::Formated;

	    $subjects = OpenBSD::Makewhatis::Formated::handle($file, $h);
	    # in test mode, we try harder
	} elsif ($p->testmode) {
	    require OpenBSD::Makewhatis::Unformated;

	    $subjects = OpenBSD::Makewhatis::Unformated::handle($file, $h);
	    if (@@$subjects == 0) {
		require OpenBSD::Makewhatis::Formated;

	    	$subjects = OpenBSD::Makewhatis::Formated::handle($file, $h);
	    }
	} else {
	    $p->errsay("Can't find type of #1", $_);
	    next;
	}
	if ($p->picky) {
		require OpenBSD::Makewhatis::Check;
d143 4
a146 2
		for my $s (@@$subjects) {
			OpenBSD::Makewhatis::Check::verify_subject($s, $_, $p);
d149 2
a150 3
	push @@$done, @@$subjects;
    }
    return $done;
d159 2
a160 2
    require OpenBSD::Makewhatis::Find;
    require OpenBSD::Makewhatis::Whatis;
d162 4
a165 4
    my ($dir, $p) = @@_;
    my $list = OpenBSD::Makewhatis::Find::find_manpages($dir);
    my $subjects = scan_manpages($list, $p);
    OpenBSD::Makewhatis::Whatis::write($subjects, $dir, $p);
d183 2
a184 2
		    chomp $l;
		    push(@@$subjects, $l);
d225 2
a226 2
	    chomp $l;
	    push(@@$subjects, $l) unless defined $remove{$l};
d259 1
a259 1
	    $p->{picky} = 1;
d262 4
a265 4
	    $p->{testmode} = 1;
	    my $subjects = scan_manpages($args, $p);
	    $p->print("#1", join("\n", @@$subjects)."\n");
	    return;
a266 1

d272 2
a273 2
	    merge($opts->{'d'}, $args, $p);
	    return;
d276 2
a277 2
	    remove($opts->{'u'}, $args, $p);
	    return;
d280 1
a280 1
	    $args = default_dirs($p);
d284 5
a288 5
	    if (-d $mandir) {
		build_index($mandir, $p);
	    } elsif (-e $mandir || $p->picky) {
	    	$p->errsay("#1: #2 is not a directory", $0, $mandir);
	    }
@


1.10
log
@shut up unless -v, and a few minor enhancements.
okay miod@@
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.9 2010/10/25 17:42:29 espie Exp $
d191 16
d219 1
a219 1
	open(my $old, '<', $whatis) or
@


1.9
log
@give a different error message for empty files, as they are obviously wrong
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.8 2010/07/13 15:38:27 espie Exp $
d66 5
d97 4
a100 1
    for (@@$list) {
d103 1
a103 1
	    unless (open $file, '-|', "gzip -fdc $_") {
d118 1
d122 1
a122 1
	    $subjects = OpenBSD::Makewhatis::Unformated::handle($file, $_, $p);
d126 1
a126 1
	    $subjects = OpenBSD::Makewhatis::Formated::handle($file, $_, $p);
d131 1
a131 1
	    $subjects = OpenBSD::Makewhatis::Unformated::handle($file, $_, $p);
d135 1
a135 1
	    	$subjects = OpenBSD::Makewhatis::Formated::handle($file, $_, $p);
d251 4
@


1.8
log
@work around a strange problem in locality of @@_ by copying stuff.
okay millert@@
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.7 2010/07/09 08:12:49 espie Exp $
d101 4
@


1.7
log
@don't print directly, use an interface that's similar enough to pkg_add
print framework so that we'll be able to integrate with it better.
ok millert@@
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.6 2007/08/22 15:50:05 espie Exp $
d54 1
a54 1
	my $_ = shift;
d56 2
a57 2
	unshift(@@_, '#');
	s/\#(\d+)/$_[$1]/ge;
@


1.6
log
@err msg looks better with a \n
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.5 2005/03/05 11:02:35 espie Exp $
d20 59
a80 1
my ($picky, $testmode);
d82 1
a82 2

# $subjects = scan_manpages(\@@list)
d86 1
a86 1
sub scan_manpages($)
d88 2
a89 2
    my $list = shift;
    local $_;
d96 1
a96 1
	    	warn "$0: Can't decompress $_\n";
d102 1
a102 1
	    	warn "$0: Can't read $_\n";
d109 1
a109 1
	    $subjects = OpenBSD::Makewhatis::Unformated::handle($file, $_);
d113 1
a113 1
	    $subjects = OpenBSD::Makewhatis::Formated::handle($file, $_);
d115 1
a115 1
	} elsif ($testmode) {
d118 1
a118 1
	    $subjects = OpenBSD::Makewhatis::Unformated::handle($file, $_);
d122 1
a122 1
	    	$subjects = OpenBSD::Makewhatis::Formated::handle($file, $_);
d125 1
a125 1
	    print STDERR "Can't find type of $_\n";
d128 1
a128 1
	if ($picky) {
d132 1
a132 1
			OpenBSD::Makewhatis::Check::verify_subject($s, $_);
d140 1
a140 1
# build_index($dir)
d144 1
a144 1
sub build_index($)
d149 1
a149 1
    my $dir = shift;
d151 2
a152 2
    my $subjects = scan_manpages($list);
    OpenBSD::Makewhatis::Whatis::write($subjects, $dir);
d155 1
a155 1
# merge($dir, \@@pages)
d159 1
a159 1
sub merge($$)
d163 3
a165 5
	my ($mandir, $args) = @@_;
	    
	unless (-d $mandir) {
	    die "$0: $mandir: not a directory"
	}
d167 1
a167 1
	my $subjects = scan_manpages($args);
d175 1
a175 1
	OpenBSD::Makewhatis::Whatis::write($subjects, $mandir);
d178 1
a178 1
# remove(dir, \@@pages)
d182 1
a182 1
sub remove($$)
d186 3
a188 4
	my ($mandir, $args) = @@_;
	unless (-d $mandir) {
	    die "$0: $mandir: not a directory"
	}
d191 2
a192 2
	    die "$0: can't open $whatis to merge with: $!";
	my $subjects = scan_manpages($args);
d200 1
a200 1
	OpenBSD::Makewhatis::Whatis::write($subjects, $mandir);
d203 1
a203 1
# $dirs = default_dirs()
d207 1
a207 1
sub default_dirs()
d209 1
d212 1
a212 1
	    die "$0: Can't open /etc/man.conf";
d225 1
a225 1
sub makewhatis($$)
d228 1
d230 1
a230 1
	    $picky = 1;
d233 3
a235 3
	    $testmode = 1;
	    my $subjects = scan_manpages($args);
	    print join("\n", @@$subjects), "\n";
d240 1
a240 1
	    merge($opts->{'d'}, $args);
d244 1
a244 1
	    remove($opts->{'u'}, $args);
d248 1
a248 1
	    $args = default_dirs();
d253 3
a255 3
		build_index($mandir);
	    } elsif (-e $mandir || $picky) {
		print STDERR "$0: $mandir is not a directory\n";
@


1.5
log
@bit of clean-up, cosmetic, style, comments.
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.4 2004/08/07 07:52:10 espie Exp $
d68 1
a68 1
	    print STDERR "Can't find type of $_";
@


1.4
log
@.tbl is also a valid suffix.
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.3 2004/08/06 16:19:42 espie Exp $
d25 1
a25 1
# $subjects = scan_manpages($list)
d29 1
a29 1
sub scan_manpages
d87 1
a87 1
sub build_index
d98 5
a102 1
sub merge
d114 3
a116 3
		while (<$old>) {
		    chomp;
		    push(@@$subjects, $_);
d123 5
a127 1
sub remove
d137 1
a137 1
	    die "$0 $whatis to merge with";
d141 3
a143 3
	while (<$old>) {
	    chomp;
	    push(@@$subjects, $_) unless defined $remove{$_};
d149 5
a153 1
sub default_dirs
a154 1
	local $_;
d158 3
a160 3
	while (<$conf>) {
	    chomp;
	    push(@@$args, $1) if /^_whatdb\s+(.*)\/whatis\.db\s*$/;
d166 5
a170 1
sub makewhatis
@


1.3
log
@not an error when merging in a directory without whatis.db.
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.2 2004/08/06 14:09:35 espie Exp $
d49 1
a49 1
	if (m/\.[1-9ln][^.]*$/) {
@


1.2
log
@creeping chdir. Not used at all these days, but would bug other clients,
such as pkg_ad....
@
text
@d2 1
a2 1
# $OpenBSD: Makewhatis.pm,v 1.1 2004/08/06 12:05:08 espie Exp $
a107 2
	open(my $old, '<', $whatis) or
	    die "$0 $whatis to merge with";
d109 6
a114 3
	while (<$old>) {
	    chomp;
	    push(@@$subjects, $_);
a115 1
	close($old);
@


1.1
log
@Reorganize makewhatis in smaller modules.
Avoid pulling unneeded code: for instance, if you have only formated
manpages in your system, Unformated will never be used; Check put aside
and only used in -p mode. -t mode won't pull Whatis. Find; File::Compare
and File::Copy and File::Temp likewise.

okay millert@@
@
text
@d2 1
a2 1
# $OpenBSD$
a106 2
	chdir $mandir;

a126 2
	chdir $mandir;

@

