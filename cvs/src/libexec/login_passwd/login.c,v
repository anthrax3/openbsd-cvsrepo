head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.12
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.10
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.6
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.24
	OPENBSD_5_0:1.9.0.22
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.20
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.18
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.14
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2016.09.03.11.24.40;	author tedu;	state Exp;
branches;
next	1.15;
commitid	LMlFM7CeT1JUVjtv;

1.15
date	2016.09.03.10.50.16;	author gsoares;	state Exp;
branches;
next	1.14;
commitid	6CxPUDDPsFqUpPKq;

1.14
date	2016.09.02.10.36.51;	author gsoares;	state Exp;
branches;
next	1.13;
commitid	q0igZlPgRiGefjB7;

1.13
date	2016.08.16.04.44.38;	author tedu;	state Exp;
branches;
next	1.12;
commitid	lwsnf8drFDMgS8ET;

1.12
date	2015.10.05.17.31.17;	author millert;	state Exp;
branches;
next	1.11;
commitid	TEnCycDCWPhCYHBk;

1.11
date	2015.01.16.06.39.50;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	Uu5nFG3wCl0LACBb;

1.10
date	2012.06.01.01.43.19;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.02.01.00.40;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.14.18.33.42;	author biorn;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.10.21.30.27;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.17.02.20.17;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.06.18.45.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.02.01.27.15;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.06.05.37.04;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.09.15.18.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.26.05.03.28;	author hin;	state Exp;
branches;
next	;


desc
@@


1.16
log
@set password to return of readpassphrase(), not always the buffer.
@
text
@/*	$OpenBSD: login.c,v 1.15 2016/09/03 10:50:16 gsoares Exp $	*/

/*-
 * Copyright (c) 1995 Berkeley Software Design, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Berkeley Software Design,
 *      Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI $From: login_passwd.c,v 1.11 1997/08/08 18:58:24 prb Exp $
 */

#include "common.h"

FILE *back = NULL;

int
main(int argc, char **argv)
{
	int opt, mode = 0, ret, lastchance = 0;
	char *username, *password = NULL;
	char pbuf[1024];
	char response[1024];
	int arg_login = 0, arg_notickets = 0;
	char invokinguser[LOGIN_NAME_MAX];
	char *wheel = NULL, *class = NULL;

	invokinguser[0] = '\0';

	setpriority(PRIO_PROCESS, 0, 0);

	openlog(NULL, LOG_ODELAY, LOG_AUTH);

	while ((opt = getopt(argc, argv, "ds:v:")) != -1) {
		switch (opt) {
		case 'd':
			back = stdout;
			break;
		case 's':	/* service */
			if (strcmp(optarg, "login") == 0)
				mode = MODE_LOGIN;
			else if (strcmp(optarg, "challenge") == 0)
				mode = MODE_CHALLENGE;
			else if (strcmp(optarg, "response") == 0)
				mode = MODE_RESPONSE;
			else {
				syslog(LOG_ERR, "%s: invalid service", optarg);
				exit(1);
			}
			break;
		case 'v':
			if (strncmp(optarg, "wheel=", 6) == 0)
				wheel = optarg + 6;
			else if (strncmp(optarg, "lastchance=", 11) == 0)
				lastchance = (strcmp(optarg + 11, "yes") == 0);
			else if (strcmp(optarg, "login=yes") == 0)
				arg_login = 1;
			else if (strcmp(optarg, "notickets=yes") == 0)
				arg_notickets = 1;
			else if (strncmp(optarg, "invokinguser=", 13) == 0)
				snprintf(invokinguser, sizeof(invokinguser),
				    "%s", &optarg[13]);
			/* Silently ignore unsupported variables */
			break;
		default:
			syslog(LOG_ERR, "usage error1");
			exit(1);
		}
	}

	switch (argc - optind) {
	case 2:
		class = argv[optind + 1];
		/*FALLTHROUGH*/
	case 1:
		username = argv[optind];
		break;
	default:
		syslog(LOG_ERR, "usage error2");
		exit(1);
	}

	if (back == NULL && (back = fdopen(3, "r+")) == NULL) {
		syslog(LOG_ERR, "reopening back channel: %m");
		exit(1);
	}

	/*
	 * Read password, either as from the terminal or if the
	 * response mode is active from the caller program.
	 *
	 * XXX  This is completely ungrokkable, and should be rewritten.
	 */
	switch (mode) {
	case MODE_RESPONSE: {
		int count;
		mode = 0;
		count = -1;
		while (++count < sizeof(response) &&
		    read(3, &response[count], 1) == 1) {
			if (response[count] == '\0' && ++mode == 2)
				break;
			if (response[count] == '\0' && mode == 1) {
				password = response + count + 1;
			}
		}
		if (mode < 2) {
			syslog(LOG_ERR, "protocol error on back channel");
			exit(1);
		}
		break;
	}

	case MODE_LOGIN:
		password = readpassphrase("Password:", pbuf, sizeof(pbuf), RPP_ECHO_OFF);
		break;
	case MODE_CHALLENGE:
		fprintf(back, BI_AUTH "\n");
		exit(0);
		break;
	default:
		syslog(LOG_ERR, "%d: unknown mode", mode);
		exit(1);
		break;
	}

	ret = AUTH_FAILED;
#ifdef PASSWD
	if (ret != AUTH_OK)
		ret = pwd_login(username, password, wheel, lastchance, class);
#endif

	if (password != NULL)
		explicit_bzero(password, strlen(password));
	if (ret != AUTH_OK)
		fprintf(back, BI_REJECT "\n");

	closelog();

	exit(0);
}
@


1.15
log
@convert to use readpassphrase() instead of DEPRECATED/getpass()
OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.14 2016/09/02 10:36:51 gsoares Exp $	*/
d139 1
a139 2
		readpassphrase("Password:", pbuf, sizeof(pbuf), RPP_ECHO_OFF);
		password = pbuf;
@


1.14
log
@krb5 bits should rest in peace
OK deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.13 2016/08/16 04:44:38 tedu Exp $	*/
d46 1
d139 2
a140 1
		password = getpass("Password:");
@


1.13
log
@remove unneeded casts
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.12 2015/10/05 17:31:17 millert Exp $	*/
a150 4
#ifdef KRB5
	ret = krb5_login(username, invokinguser, password, arg_login,
			 !arg_notickets, class);
#endif
@


1.12
log
@Use explicit_bzero() instead of memset() for zeroing out secrets.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.11 2015/01/16 06:39:50 deraadt Exp $	*/
d123 1
a123 1
		    read(3, &response[count], (size_t)1) == (ssize_t)1) {
@


1.11
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.10 2012/06/01 01:43:19 dlg Exp $	*/
d161 1
a161 1
		memset(password, 0, strlen(password));
@


1.10
log
@add a krb5-noverify option for login.conf that disables verification
of the server against a local host keytab file when you're authing
users with login_krb5. useful for when you need to auth users but
dealing with the domain admins is painful...

ok sthen@@ jj@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.9 2006/04/02 01:00:40 deraadt Exp $	*/
d48 1
a48 1
	char invokinguser[MAXLOGNAME];
@


1.9
log
@a FALLTHROUGH and one size_t cast
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.8 2005/04/14 18:33:42 biorn Exp $	*/
d153 1
a153 1
			 !arg_notickets);
@


1.8
log
@
drop some krb4 stuff

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.7 2004/03/10 21:30:27 millert Exp $	*/
d97 1
d123 1
a123 1
		    read(3, &response[count], 1) == 1) {
@


1.7
log
@More checking for a NULL return value from getpass().  otto@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.6 2003/03/17 02:20:17 deraadt Exp $	*/
a149 3
#ifdef KRB4
	ret = krb4_login(username, password, invokinguser, !arg_notickets);
#endif
@


1.6
log
@incorrect string length matching; ianm@@cit.uws.edu.au
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.5 2002/09/06 18:45:06 deraadt Exp $	*/
d162 2
a163 1
	memset(password, 0, strlen(password));
@


1.5
log
@ansi; ok millert pvalchev
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.4 2002/06/02 01:27:15 deraadt Exp $	*/
d73 1
a73 1
                        break;
d75 4
a78 4
                        if (strncmp(optarg, "wheel=", 6) == 0)
                                wheel = optarg + 6;
                        else if (strncmp(optarg, "lastchance=", 10) == 0)
				lastchance = (strcmp(optarg + 10, "yes") == 0);
d122 1
a122 1
		      read(3, &response[count], 1) == 1) {
@


1.4
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.3 2001/12/06 05:37:04 millert Exp $	*/
a138 1
		
@


1.3
log
@Do not set handler for SIGINT and SIGQUIT to SIG_IGN since it prevents
getpass()/readpassphrase() from being able to restore the tty mode
on keyboard interrupt.  Along with the recent readpassphrase.c commit
this means that if you ^C things that use login scripts (like su(1))
with a non-CBREAK shell your tty mode will be restored nicely.

TODO:
The various login scripts need to install handlers to avoid leaving
turd files or otherwise ending in a bad state.  It would also be
nice to send BI_REJECT to the back channel.
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.2 2001/08/09 15:18:45 millert Exp $	*/
d58 1
a58 1
		switch(opt) {
d94 1
a94 1
	switch(argc - optind) {
d116 1
a116 1
	switch(mode) {
@


1.2
log
@o wheel and lastchance are -v args (variable), not -s (service)
o an unknown service is a fatal error
o some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: login.c,v 1.1 2001/06/26 05:03:28 hin Exp $	*/
a52 2
	signal(SIGQUIT, SIG_IGN);
	signal(SIGINT, SIG_IGN);
@


1.1
log
@Cleanup and unify login_passwd, login_krb4, login_krb4-or-pwd, login_krb5 and
login_krb5-or-pwd.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_krb5.c,v 1.10 2001/06/25 22:02:13 hin Exp $	*/
d49 1
a49 1
	char *wheel = NULL , *class = NULL;
d59 1
a59 1
	while((opt = getopt(argc, argv, "ds:v:")) != -1) {
d65 1
a65 1
			if(strcmp(optarg, "login") == 0)
d67 1
a67 1
			else if(strcmp(optarg, "challenge") == 0)
d69 1
a69 1
			else if(strcmp(optarg, "response") == 0)
d71 6
d81 1
a81 4
			/* Silently ignore unknown options */
                        break;
		case 'v':
			if(strcmp(optarg, "login=yes") == 0)
d83 1
a83 1
			else if(strcmp(optarg, "notickets=yes") == 0)
d85 1
a85 1
			else if(strncmp(optarg, "invokinguser=", 13) == 0)
d87 2
a88 2
					 "%s", &optarg[13]);
			/* All other arguments are silently ignored */
d107 1
a107 1
	if(back == NULL && (back = fdopen(3, "r+")) == NULL) {
d123 1
a123 1
		while(++count < sizeof(response) &&
d125 1
a125 1
			if(response[count] == '\0' && ++mode == 2)
d127 1
a127 1
			if(response[count] == '\0' && mode == 1) {
d131 1
a131 1
		if(mode < 2) {
d161 1
a161 1
	if(ret != AUTH_OK)
d166 1
a166 1
	if(ret != AUTH_OK)
d171 1
a171 1
	return 0;
@

