head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.8
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.36
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.34
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.30
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.28
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.26
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.24
	OPENBSD_5_0:1.9.0.22
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.20
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.18
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.14
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.11.19.18.37.01;	author millert;	state Exp;
branches;
next	1.13;
commitid	qC16TiBA67bibMKz;

1.13
date	2015.11.18.19.27.46;	author tedu;	state Exp;
branches;
next	1.12;
commitid	OBYBS4eQ2U2qPazA;

1.12
date	2015.10.14.17.06.58;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	2k2wCSf829qSW3Ek;

1.11
date	2015.10.05.17.31.17;	author millert;	state Exp;
branches;
next	1.10;
commitid	TEnCycDCWPhCYHBk;

1.10
date	2014.09.16.22.07.02;	author tedu;	state Exp;
branches;
next	1.9;
commitid	iIRD10cwmzaJmwuy;

1.9
date	2006.03.09.19.14.10;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.10.21.30.27;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.29.18.39.23;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.19.20.22.21;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.12.21.55.46;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.29.05.56.36;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.26.05.03.28;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.25.21.52.16;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.12.02.33.44;	author millert;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Call syslog() if login_* pledge fails; OK deraadt@@
@
text
@/*	$OpenBSD: login_passwd.c,v 1.13 2015/11/18 19:27:46 tedu Exp $	*/

/*-
 * Copyright (c) 2001 Hans Insulander <hin@@openbsd.org>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "common.h"

int
pwd_login(char *username, char *password, char *wheel, int lastchance,
    char *class)
{
	struct passwd *pwd;
	size_t plen;
	char *goodhash = NULL;
	int passok = 0;

	if (wheel != NULL && strcmp(wheel, "yes") != 0) {
		fprintf(back, BI_VALUE " errormsg %s\n",
		    auth_mkvalue("you are not in group wheel"));
		fprintf(back, BI_REJECT "\n");
		return (AUTH_FAILED);
	}
	if (password == NULL)
		return (AUTH_FAILED);

	pwd = getpwnam_shadow(username);
	if (pwd)
		goodhash = pwd->pw_passwd;

	setpriority(PRIO_PROCESS, 0, -4);

	if (pledge("stdio rpath", NULL) == -1) {
		syslog(LOG_ERR, "pledge: %m");
		return (AUTH_FAILED);
	}

	if (crypt_checkpass(password, goodhash) == 0)
		passok = 1;
	plen = strlen(password);
	explicit_bzero(password, plen);

	if (!passok)
		return (AUTH_FAILED);

	if (login_check_expire(back, pwd, class, lastchance) == 0)
		fprintf(back, BI_AUTH "\n");
	else
		return (AUTH_FAILED);

	return (AUTH_OK);
}
@


1.13
log
@use _shadow getpw functions. these utilities obviously deal with hashes.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.12 2015/10/14 17:06:58 deraadt Exp $	*/
d55 4
a58 2
	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");
@


1.12
log
@pledge "stdio rpath" is good enough for these mainline BSD auth login
programs.
(I am very surprised pledge ended up working for programs like this)
ok semarie millert
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.11 2015/10/05 17:31:17 millert Exp $	*/
d49 1
a49 1
	pwd = getpwnam(username);
@


1.11
log
@Use explicit_bzero() instead of memset() for zeroing out secrets.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.10 2014/09/16 22:07:02 tedu Exp $	*/
d54 4
@


1.10
log
@use crypt_checkpass function to make things simple
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.9 2006/03/09 19:14:10 millert Exp $	*/
d57 1
a57 1
	memset(password, 0, plen);
@


1.9
log
@Foil potential timing attacks by using the correct password hash
instead of "xx".  In practice this means bcrypt() will be used for
non-existent users instead of DES crypt().
Adapted from a patch by Peter Philipp.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.8 2004/03/10 21:30:27 millert Exp $	*/
a35 1
	login_cap_t *lc;
d37 2
a38 1
	char *salt, saltbuf[_PASSWORD_LEN + 1];
d51 1
a51 9
		salt = pwd->pw_passwd;
	else {
		/* no such user, get appropriate salt */
		if ((lc = login_getclass(NULL)) == NULL ||
		    pwd_gensalt(saltbuf, sizeof(saltbuf), lc, 'l') == 0)
			salt = "xx";
		else
			salt = saltbuf;
	}
d54 2
a55 2

	salt = crypt(password, salt);
d59 1
a59 8
	/*
	 * Authentication fails if the user does not exist in the password
	 * database, the given password does not match the entry in the
	 * password database, or if the user's password field is empty
	 * and the given password is not the empty string.
	 */
	if (!pwd || strcmp(salt, pwd->pw_passwd) != 0 ||
	    (*pwd->pw_passwd == '\0' && plen > 0))
@


1.8
log
@More checking for a NULL return value from getpass().  otto@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.7 2003/07/29 18:39:23 deraadt Exp $	*/
d36 1
d38 1
a38 1
	char *salt;
d52 8
a59 2
	else
		salt = "xx";
@


1.7
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.6 2002/03/19 20:22:21 millert Exp $	*/
d45 2
@


1.6
log
@Only accept the empty string for users with no password.
Previously, any password was accepted (that's how crypt() behaves).
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.5 2001/08/12 21:55:46 millert Exp $	*/
d32 1
a32 1
pwd_login(char *username, char *password, char *wheel, int lastchance, 
@


1.5
log
@some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.4 2001/06/29 05:56:36 deraadt Exp $	*/
d36 1
a46 7

	/* Check for empty password */
	if (pwd != NULL && *pwd->pw_passwd == '\0') {
		fprintf(back, BI_AUTH "\n");
		return (AUTH_OK);
	}

d55 11
a65 2
	memset(password, 0, strlen(password));
	if (!pwd || strcmp(salt, pwd->pw_passwd) != 0)
@


1.4
log
@ugly
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.3 2001/06/26 05:03:28 hin Exp $	*/
d42 1
a42 1
		return AUTH_FAILED;
d50 1
a50 1
		return AUTH_OK;
d63 1
a63 1
		return AUTH_FAILED;
d68 1
a68 1
		return AUTH_FAILED;
d70 1
a70 1
	return AUTH_OK;
@


1.3
log
@Cleanup and unify login_passwd, login_krb4, login_krb4-or-pwd, login_krb5 and
login_krb5-or-pwd.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_krb5.c,v 1.10 2001/06/25 22:02:13 hin Exp $	*/
d33 1
a33 1
	  char *class)
d38 4
a41 5

	if((wheel != NULL) && strcmp(wheel, "yes") != 0) {
                fprintf(back, BI_VALUE " errormsg %s\n",
                    auth_mkvalue("you are not in group wheel"));
                fprintf(back, BI_REJECT "\n");
d48 1
a48 1
	if((pwd != NULL) && (*pwd->pw_passwd == '\0')) {
d53 1
a53 1
	if(pwd)
d65 1
a65 1
	if(login_check_expire(back, pwd, class, lastchance) == 0)
@


1.2
log
@Don't do the root instance handling stuff; su no longer does it.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_passwd.c,v 1.1 2000/12/12 02:33:44 millert Exp $	*/
d4 2
a5 1
 * Copyright (c) 1995 Berkeley Software Design, Inc. All rights reserved.
a14 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Berkeley Software Design,
 *      Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
d16 1
a16 1
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
d19 1
a19 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
a26 2
 *
 *	BSDI $From: login_passwd.c,v 1.11 1997/08/08 18:58:24 prb Exp $
a27 18
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/file.h>
#include <sys/wait.h>

#include <err.h>
#include <errno.h>
#include <pwd.h>
#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>
#include <util.h>
d29 1
a29 2
#include <login_cap.h>
#include <bsd_auth.h>
d32 2
a33 3
main(argc, argv)
	int argc;
	char *argv[];
a34 4
	FILE *back;
	char *class, *p, *salt, *username, *wheel;
	char response[1024];
	int c, mode, lastchance;
d36 2
a37 1
	struct rlimit rl;
d39 5
a43 55
	class = NULL;
	username = NULL;
	wheel = NULL;
	mode = 0;
	p = NULL;
	lastchance = 0;

	rl.rlim_cur = 0;
	rl.rlim_max = 0;
	(void)setrlimit(RLIMIT_CORE, &rl);

	(void)signal(SIGQUIT, SIG_IGN);
	(void)signal(SIGINT, SIG_IGN);
	(void)setpriority(PRIO_PROCESS, 0, 0);

	openlog("login", LOG_ODELAY, LOG_AUTH);

	back = NULL;
	while ((c = getopt(argc, argv, "dv:s:")) != -1)
		switch(c) {
		case 'd':
			back = stdout;
			break;
		case 'v':
			if (strncmp(optarg, "wheel=", 6) == 0)
				wheel = optarg + 6;
			else if (strncmp(optarg, "lastchance=", 10) == 0)
				lastchance = (strcmp(optarg + 10, "yes") == 0);
			break;
		case 's':	/* service */
			if (strcmp(optarg, "login") == 0)
				mode = 0;
			else if (strcmp(optarg, "challenge") == 0)
				mode = 1;
			else if (strcmp(optarg, "response") == 0)
				mode = 2;
			else {
				syslog(LOG_ERR, "%s: invalid service", optarg);
				exit(1);
			}
			break;
		default:
			syslog(LOG_ERR, "usage error");
			exit(1);
		}

	switch(argc - optind) {
	case 2:
		class = argv[optind + 1];
	case 1:
		username = argv[optind];
		break;
	default:
		syslog(LOG_ERR, "usage error");
		exit(1);
d48 2
a49 12
	if (back == NULL && (back = fdopen(3, "r+")) == NULL) {
		syslog(LOG_ERR, "reopening back channel: %m");
		exit(1);
	}
	if (wheel != NULL && strcmp(wheel, "yes") != 0) {
		fprintf(back, BI_VALUE " errormsg %s\n",
		    auth_mkvalue("you are not in group wheel"));
		fprintf(back, BI_REJECT "\n");
		exit(1);
	}

	if (pwd && *pwd->pw_passwd == '\0') {
d51 1
a51 1
		exit(0);
d54 1
a54 6
	if (mode == 1) {
		fprintf(back, BI_SILENT "\n");
		exit(0);
	}

	if (pwd)
d59 1
a59 18
	(void)setpriority(PRIO_PROCESS, 0, -4);

	if (mode == 2) {
		mode = 0;
		c = -1;
		while (++c < sizeof(response) &&
		    read(3, &response[c], 1) == 1) {
			if (response[c] == '\0' && ++mode == 2)
				break;
			if (response[c] == '\0' && mode == 1)
				p = response + c + 1;
		}
		if (mode < 2) {
			syslog(LOG_ERR, "protocol error on back channel");
			exit(1);
		}
	} else
		p = getpass("Password:");
d61 2
a62 2
	salt = crypt(p, salt);
	memset(p, 0, strlen(p));
d64 1
a64 1
		exit(1);
d66 4
a69 1
	c = login_check_expire(back, pwd, class, lastchance);
d71 1
a71 3
	if (c == 0)
		fprintf(back, BI_AUTH "\n");
	exit(c);
@


1.1
log
@passwd login script; authenticates the user via passwd/yp
will be used when BSD authentication is enabled
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 1
a64 1
	char *class, *instance, *p, *salt, *username, *wheel;
d127 1
a127 15
	/*
	 * .root instances in passwd is just the root account.
	 * all other instances will fail.
	 * make a special check to see if there really is an
	 * account named user.root.
	 */
	if ((pwd = getpwnam(username)) == NULL) {
		instance = strchr(username, '.');
		if (instance && strcmp(instance+1, "root") == 0) {
			*instance++ = 0;
			if ((pwd = getpwnam(username)) == NULL || pwd->pw_uid)
				username = instance;
		}
		pwd = getpwnam(username);
	}
@

