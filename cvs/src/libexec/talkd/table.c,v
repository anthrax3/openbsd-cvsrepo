head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.2
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.14.0.22
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.20
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.16
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.14
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.18
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.14
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.12
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.10
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.8
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.08.26.08.44.04;	author guenther;	state Exp;
branches;
next	1.18;
commitid	dpwZQdubB8GYo1Gq;

1.18
date	2016.03.16.15.41.10;	author krw;	state Exp;
branches;
next	1.17;
commitid	JEVxsRygqcjPtWTf;

1.17
date	2016.02.01.07.25.51;	author mestre;	state Exp;
branches;
next	1.16;
commitid	mlHQSQiQmQJoaJgw;

1.16
date	2015.01.16.06.39.51;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	Uu5nFG3wCl0LACBb;

1.15
date	2014.10.08.02.10.05;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	fBPYoaRNmI8t2Q8Z;

1.14
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.14.15.39.19;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.09.14.50.53;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.10.04.32.45;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.11.14.24.46;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.31;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.07.18.45.33;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	99.11.29.22.22.57;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.11.29.22.18.19;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.07.10.08.06.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.15.05.10.11;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.04.28.23.56.20;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Pull in <sys/time.h> for gettimeofday()

ok deraadt@@
@
text
@/*	$OpenBSD: table.c,v 1.18 2016/03/16 15:41:10 krw Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Routines to handle insertion, deletion, etc on the table
 * of requests kept by the daemon. Nothing fancy here, linear
 * search on a double-linked list. A time is kept with each
 * entry so that overly old invitations can be eliminated.
 *
 * Consider this a mis-guided attempt at modularity
 */
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <protocols/talkd.h>

#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

#include "talkd.h"

#define MAX_ID 16000	/* << 2^15 so I don't have sign troubles */

struct	timeval tp;
struct	timezone txp;

typedef struct table_entry TABLE_ENTRY;

struct table_entry {
	CTL_MSG request;
	time_t	time;
	TAILQ_ENTRY(table_entry) list;
};
TAILQ_HEAD(, table_entry)	table;

static void	delete(TABLE_ENTRY *);

/*
 * Init the table
 */
void
init_table(void)
{
	TAILQ_INIT(&table);
}

/*
 * Look in the table for an invitation that matches the current
 * request looking for an invitation
 */
CTL_MSG *
find_match(CTL_MSG *request)
{
	TABLE_ENTRY *ptr, *next;
	time_t current_time;

	gettimeofday(&tp, &txp);
	current_time = tp.tv_sec;
	if (debug)
		print_request("find_match", request);
	for (ptr = TAILQ_FIRST(&table); ptr != NULL; ptr = next) {
		next = TAILQ_NEXT(ptr, list);
		if ((current_time - ptr->time) > MAX_LIFE) {
			/* the entry is too old */
			if (debug)
				print_request("deleting expired entry",
				    &ptr->request);
			delete(ptr);
			continue;
		}
		if (debug)
			print_request("", &ptr->request);
		if (ptr->request.type == LEAVE_INVITE &&
		    strcmp(request->l_name, ptr->request.r_name) == 0 &&
		    strcmp(request->r_name, ptr->request.l_name) == 0)
			return (&ptr->request);
	}
	if (debug)
		syslog(LOG_DEBUG, "find_match: not found");

	return (NULL);
}

/*
 * Look for an identical request, as opposed to a complimentary
 * one as find_match does
 */
CTL_MSG *
find_request(CTL_MSG *request)
{
	TABLE_ENTRY *ptr, *next;
	time_t current_time;

	gettimeofday(&tp, &txp);
	current_time = tp.tv_sec;
	/*
	 * See if this is a repeated message, and check for
	 * out of date entries in the table while we are it.
	 */
	if (debug)
		print_request("find_request", request);
	for (ptr = TAILQ_FIRST(&table); ptr != NULL; ptr = next) {
		next = TAILQ_NEXT(ptr, list);
		if ((current_time - ptr->time) > MAX_LIFE) {
			/* the entry is too old */
			if (debug)
				print_request("deleting expired entry",
				    &ptr->request);
			delete(ptr);
			continue;
		}
		if (debug)
			print_request("", &ptr->request);
		if (request->pid == ptr->request.pid &&
		    request->type == ptr->request.type &&
		    strcmp(request->r_name, ptr->request.r_name) == 0 &&
		    strcmp(request->l_name, ptr->request.l_name) == 0) {
			/* update the time if we 'touch' it */
			ptr->time = current_time;
			return (&ptr->request);
		}
	}
	return (NULL);
}

void
insert_table(CTL_MSG *request, CTL_RESPONSE *response)
{
	TABLE_ENTRY *ptr;
	time_t current_time;

	if (debug)
		print_request( "insert_table", request );
	gettimeofday(&tp, &txp);
	current_time = tp.tv_sec;
	request->id_num = new_id();
	response->id_num = htonl(request->id_num);
	/* insert a new entry into the top of the list */
	ptr = malloc(sizeof(TABLE_ENTRY));
	if (ptr == NULL) {
		syslog(LOG_ERR, "insert_table: Out of memory");
		_exit(1);
	}
	ptr->time = current_time;
	ptr->request = *request;
	TAILQ_INSERT_HEAD(&table, ptr, list);
}

/*
 * Generate a unique non-zero sequence number
 */
int
new_id(void)
{
	static int current_id = 0;

	current_id = (current_id + 1) % MAX_ID;
	/* 0 is reserved, helps to pick up bugs */
	if (current_id == 0)
		current_id = 1;
	return (current_id);
}

/*
 * Delete the invitation with id 'id_num'
 */
int
delete_invite(int id_num)
{
	TABLE_ENTRY *ptr;

	if (debug)
		syslog(LOG_DEBUG, "delete_invite(%d)", id_num);
	TAILQ_FOREACH(ptr, &table, list) {
		if (ptr->request.id_num == id_num)
			break;
		if (debug)
			print_request("", &ptr->request);
	}
	if (ptr != NULL) {
		delete(ptr);
		return (SUCCESS);
	}
	return (NOT_HERE);
}

/*
 * Classic delete from a double-linked list
 */
static void
delete(TABLE_ENTRY *ptr)
{

	if (debug)
		print_request("delete", &ptr->request);
	TAILQ_REMOVE(&table, ptr, list);
	free((char *)ptr);
}
@


1.18
log
@More "(<blah> *)0" -> NULL, avoiding any stdarg functions.

Feedback millert@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.17 2016/02/01 07:25:51 mestre Exp $	*/
d42 1
@


1.17
log
@Remove unused headers and sort the remaining

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.16 2015/01/16 06:39:51 deraadt Exp $	*/
d110 1
a110 1
	return ((CTL_MSG *)0);
d152 1
a152 1
	return ((CTL_MSG *)0);
@


1.16
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.15 2014/10/08 02:10:05 deraadt Exp $	*/
d40 1
a40 1
#include <sys/time.h>
a41 1
#include <sys/queue.h>
d43 3
d48 1
a48 3
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
@


1.15
log
@do not need a cast from void *
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.14 2009/10/27 23:59:31 deraadt Exp $	*/
a39 1
#include <sys/param.h>
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.13 2005/10/14 15:39:19 otto Exp $	*/
d169 1
a169 1
	ptr = (TABLE_ENTRY *)malloc(sizeof(TABLE_ENTRY));
@


1.13
log
@Use queue macros instead of directly accessing fields. ok millert@@ pat@@
deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.12 2004/11/09 14:50:53 otto Exp $	*/
a30 5

#ifndef lint
/*static char sccsid[] = "from: @@(#)table.c	5.7 (Berkeley) 2/26/91";*/
static char rcsid[] = "$Id: table.c,v 1.12 2004/11/09 14:50:53 otto Exp $";
#endif /* not lint */
@


1.12
log
@Avoid use after free(), slight optimization. From Patrick Latifi.
ok tom@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.11 2004/03/10 04:32:45 deraadt Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: table.c,v 1.11 2004/03/10 04:32:45 deraadt Exp $";
d96 2
a97 2
	for (ptr = table.tqh_first; ptr != NULL; ptr = next) {
		next = ptr->list.tqe_next;
d137 2
a138 2
	for (ptr = table.tqh_first; ptr != NULL; ptr = next) {
		next = ptr->list.tqe_next;
d209 1
a209 1
	for (ptr = table.tqh_first; ptr != NULL; ptr = ptr->list.tqe_next) {
@


1.11
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.10 2003/06/11 14:24:46 deraadt Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: table.c,v 1.10 2003/06/11 14:24:46 deraadt Exp $";
d89 1
a89 1
	TABLE_ENTRY *ptr;
d96 2
a97 1
	for (ptr = table.tqh_first; ptr != NULL; ptr = ptr->list.tqe_next) {
d108 3
a110 3
		if (strcmp(request->l_name, ptr->request.r_name) == 0 &&
		    strcmp(request->r_name, ptr->request.l_name) == 0 &&
		    ptr->request.type == LEAVE_INVITE)
d126 1
a126 1
	TABLE_ENTRY *ptr;
d137 2
a138 1
	for (ptr = table.tqh_first; ptr != NULL; ptr = ptr->list.tqe_next) {
d149 1
a149 2
		if (strcmp(request->r_name, ptr->request.r_name) == 0 &&
		    strcmp(request->l_name, ptr->request.l_name) == 0 &&
d151 2
a152 1
		    request->pid == ptr->request.pid) {
@


1.10
log
@ansi cleanup; ok ian markus
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.9 2003/06/02 19:38:24 millert Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: table.c,v 1.9 2003/06/02 19:38:24 millert Exp $";
d40 1
a40 1
 * search on a double-linked list. A time is kept with each 
d109 1
a109 1
		     ptr->request.type == LEAVE_INVITE)
d120 1
a120 1
 * one as find_match does 
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.8 2002/02/16 21:27:31 millert Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: table.c,v 1.8 2002/02/16 21:27:31 millert Exp $";
d77 1
a77 1
init_table()
d87 1
a87 2
find_match(request)
	CTL_MSG *request;
d123 1
a123 2
find_request(request)
	CTL_MSG *request;
d160 1
a160 3
insert_table(request, response)
	CTL_MSG *request;
	CTL_RESPONSE *response;
d201 1
a201 2
delete_invite(id_num)
	int id_num;
d224 1
a224 2
delete(ptr)
	TABLE_ENTRY *ptr;
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.7 2001/12/07 18:45:33 mpech Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 1
a34 1
static char rcsid[] = "$Id: table.c,v 1.7 2001/12/07 18:45:33 mpech Exp $";
@


1.7
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.6 1999/11/29 22:22:57 d Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: table.c,v 1.6 1999/11/29 22:22:57 d Exp $";
d75 1
a75 1
static void	delete __P((TABLE_ENTRY *));
@


1.6
log
@back out TAILQ_FOREACH - not portable, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.5 1999/11/29 22:18:19 d Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: table.c,v 1.5 1999/11/29 22:18:19 d Exp $";
d75 1
a75 1
static void	delete __P((register TABLE_ENTRY *));
d92 1
a92 1
	register CTL_MSG *request;
d94 1
a94 1
	register TABLE_ENTRY *ptr;
d129 1
a129 1
	register CTL_MSG *request;
d131 1
a131 1
	register TABLE_ENTRY *ptr;
d170 1
a170 1
	register TABLE_ENTRY *ptr;
d212 1
a212 1
	register TABLE_ENTRY *ptr;
d234 1
a234 1
	register TABLE_ENTRY *ptr;
@


1.5
log
@use TAILQ_FOREACH, ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.4 1998/07/10 08:06:19 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: table.c,v 1.4 1998/07/10 08:06:19 deraadt Exp $";
d101 1
a101 1
	TAILQ_FOREACH(ptr, &table, list) {
d142 1
a142 1
	TAILQ_FOREACH(ptr, &table, list) {
d216 1
a216 1
	TAILQ_FOREACH(ptr, &table, list) {
@


1.4
log
@do not syslog() with "\n"; skipped smtpd/named/ipmon; 12 minutes of dabbling
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.3 1996/07/15 05:10:11 mickey Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: table.c,v 1.3 1996/07/15 05:10:11 mickey Exp $";
d101 1
a101 1
	for (ptr = table.tqh_first; ptr != NULL; ptr = ptr->list.tqe_next) {
d142 1
a142 1
	for (ptr = table.tqh_first; ptr != NULL; ptr = ptr->list.tqe_next) {
d216 1
a216 1
	for (ptr = table.tqh_first; ptr != NULL; ptr = ptr->list.tqe_next) {
@


1.3
log
@fix time differencies computations (orig from alan@@parsys.co.uk, but
don't use difftime(3), it returns double)
use <sys/queue.h> for queue maintanance
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char rcsid[] = "$Id: table.c,v 1.2 1996/04/28 23:56:20 mickey Exp $";
d118 1
a118 1
		syslog(LOG_DEBUG, "find_match: not found\n");
@


1.2
log
@Fix the bugs w/ that osockaddr.
minor cleanups.
this was tested w/: OpenBSD, Kleenux, BSDi (in all combinations).
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: table.c,v 1.1.1.1 1995/10/18 08:43:23 deraadt Exp $";
d52 1
a62 2
#define NIL ((TABLE_ENTRY *)0)

d70 2
a71 3
	long	time;
	TABLE_ENTRY *next;
	TABLE_ENTRY *last;
d73 1
a73 1
TABLE_ENTRY	*table = NIL;
d78 9
d101 2
a102 2
	for (ptr = table; ptr != NIL; ptr = ptr->next) {
		if ((ptr->time - current_time) > MAX_LIFE) {
d142 2
a143 2
	for (ptr = table; ptr != NIL; ptr = ptr->next) {
		if ((ptr->time - current_time) > MAX_LIFE) {
d181 1
a181 1
	if (ptr == NIL) {
d187 1
a187 5
	ptr->next = table;
	if (ptr->next != NIL)
		ptr->next->last = ptr;
	ptr->last = NIL;
	table = ptr;
a213 1
	ptr = table;
d216 1
a216 1
	for (ptr = table; ptr != NIL; ptr = ptr->next) {
d222 1
a222 1
	if (ptr != NIL) {
d239 1
a239 6
	if (table == ptr)
		table = ptr->next;
	else if (ptr->last != NIL)
		ptr->last->next = ptr->next;
	if (ptr->next != NIL)
		ptr->next->last = ptr->last;
@


1.1
log
@Initial revision
@
text
@d1 2
d38 1
a38 1
static char rcsid[] = "$Id: table.c,v 1.2 1993/08/01 18:29:32 mycroft Exp $";
d58 1
a63 1
extern	int debug;
d75 1
d77 1
a77 3
TABLE_ENTRY *table = NIL;
CTL_MSG *find_request();
CTL_MSG *find_match();
d110 3
d158 1
d166 2
d190 2
a191 1
new_id()
d205 1
d230 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
