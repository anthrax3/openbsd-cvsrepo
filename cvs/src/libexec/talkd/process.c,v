head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.14
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.10
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.8
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.6
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.4
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.2
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.17.0.12
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.10
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.8
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.6
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.14
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.12
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.10
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.8
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.6
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.4
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.8
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.6
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.4
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2016.03.16.15.41.10;	author krw;	state Exp;
branches;
next	1.22;
commitid	JEVxsRygqcjPtWTf;

1.22
date	2016.02.01.07.25.51;	author mestre;	state Exp;
branches;
next	1.21;
commitid	mlHQSQiQmQJoaJgw;

1.21
date	2015.01.16.06.39.51;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	Uu5nFG3wCl0LACBb;

1.20
date	2013.11.27.21.25.24;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2006.10.18.21.23.11;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.10.04.32.45;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.11.14.24.46;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.25.07.40.09;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.22.20.16.17;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.22.20.01.28;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.22.00.32.27;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.07.18.45.33;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	98.07.10.08.06.18;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.07.19.03.09.41;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.07.02.04.11.15;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.07.02.04.07.59;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.06.25.12.09.35;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.06.24.13.41.29;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.04.29.00.46.56;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.04.28.23.56.20;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@More "(<blah> *)0" -> NULL, avoiding any stdarg functions.

Feedback millert@@ kettenis@@
@
text
@/*	$OpenBSD: process.c,v 1.22 2016/02/01 07:25:51 mestre Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * process.c handles the requests, which can be of three types:
 *	ANNOUNCE - announce to a user that a talk is wanted
 *	LEAVE_INVITE - insert the request into the table
 *	LOOK_UP - look up to see if a request is waiting in
 *		  in the table for the local user
 *	DELETE - delete invitation
 */
#include <sys/socket.h>
#include <sys/stat.h>
#include <arpa/inet.h>
#include <protocols/talkd.h>

#include <ctype.h>
#include <limits.h>
#include <netdb.h>
#include <paths.h>
#include <stdio.h>
#include <string.h>
#include <syslog.h>
#include <utmp.h>

#include "talkd.h"

#define	satosin(sa)	((struct sockaddr_in *)(sa))

void
process_request(CTL_MSG *mp, CTL_RESPONSE *rp)
{
	CTL_MSG *ptr;
	char *s;

	rp->vers = TALK_VERSION;
	rp->type = mp->type;
	rp->id_num = htonl(0);
	if (mp->vers != TALK_VERSION) {
		syslog(LOG_WARNING, "Bad protocol version %d", mp->vers);
		rp->answer = BADVERSION;
		return;
	}
	mp->id_num = ntohl(mp->id_num);
	if (ntohs(mp->addr.sa_family) != AF_INET) {
		syslog(LOG_WARNING, "Bad address, family %d",
		    ntohs(mp->addr.sa_family));
		rp->answer = BADADDR;
		return;
	}
	if (ntohs(mp->ctl_addr.sa_family) != AF_INET) {
		syslog(LOG_WARNING, "Bad control address, family %d",
		    ntohs(mp->ctl_addr.sa_family));
		rp->answer = BADCTLADDR;
		return;
	}
	for (s = mp->l_name; *s; s++)
		if (!isprint((unsigned char)*s)) {
			syslog(LOG_NOTICE, "Illegal user name. Aborting");
			rp->answer = FAILED;
			return;
		}
	if (memcmp(&satosin(&rp->addr)->sin_addr,
	    &satosin(&mp->ctl_addr)->sin_addr,
	    sizeof(struct in_addr))) {
		char buf1[32], buf2[32];

		strlcpy(buf1, inet_ntoa(satosin(&rp->addr)->sin_addr),
		    sizeof(buf1));
		strlcpy(buf2, inet_ntoa(satosin(&mp->ctl_addr)->sin_addr),
		    sizeof(buf2));
		syslog(LOG_WARNING, "addresses are different, %s != %s",
		    buf1, buf2);
	}
	rp->addr.sa_family = 0;
	mp->pid = ntohl(mp->pid);
	if (debug)
		print_request("process_request", mp);
	switch (mp->type) {

	case ANNOUNCE:
		do_announce(mp, rp);
		break;

	case LEAVE_INVITE:
		ptr = find_request(mp);
		if (ptr != NULL) {
			rp->id_num = htonl(ptr->id_num);
			rp->answer = SUCCESS;
		} else
			insert_table(mp, rp);
		break;

	case LOOK_UP:
		ptr = find_match(mp);
		if (ptr != NULL) {
			rp->id_num = htonl(ptr->id_num);
			rp->addr = ptr->addr;
			rp->addr.sa_family = ptr->addr.sa_family;
			rp->answer = SUCCESS;
		} else
			rp->answer = NOT_HERE;
		break;

	case DELETE:
		rp->answer = delete_invite(mp->id_num);
		break;

	default:
		rp->answer = UNKNOWN_REQUEST;
		break;
	}
	if (debug)
		print_response("process_request", rp);
}

void
do_announce(CTL_MSG *mp, CTL_RESPONSE *rp)
{
	struct hostent *hp;
	CTL_MSG *ptr;
	int result;

	/* see if the user is logged */
	result = find_user(mp->r_name, mp->r_tty, sizeof(mp->r_tty));
	if (result != SUCCESS) {
		rp->answer = result;
		return;
	}
	hp = gethostbyaddr((char *)&satosin(&mp->ctl_addr)->sin_addr,
		sizeof(struct in_addr), AF_INET);
	if (hp == NULL) {
		rp->answer = MACHINE_UNKNOWN;
		return;
	}
	ptr = find_request(mp);
	if (ptr == (CTL_MSG *) 0) {
		insert_table(mp, rp);
		rp->answer = announce(mp, hp->h_name);
		return;
	}
	if (mp->id_num > ptr->id_num) {
		/*
		 * This is an explicit re-announce, so update the id_num
		 * field to avoid duplicates and re-announce the talk.
		 */
		ptr->id_num = new_id();
		rp->id_num = htonl(ptr->id_num);
		rp->answer = announce(mp, hp->h_name);
	} else {
		/* a duplicated request, so ignore it */
		rp->id_num = htonl(ptr->id_num);
		rp->answer = SUCCESS;
	}
}

/*
 * Search utmp for the local user
 */
int
find_user(char *name, char *tty, size_t ttyl)
{
	struct utmp ubuf, ubuf1;
	int status;
	FILE *fp;
	char line[UT_LINESIZE+1];
	char ftty[PATH_MAX];
	time_t	idle, now;

	time(&now);
	idle = INT_MAX;
	if ((fp = fopen(_PATH_UTMP, "r")) == NULL) {
		fprintf(stderr, "talkd: can't read %s.\n", _PATH_UTMP);
		return (FAILED);
	}
#define SCMPN(a, b)	strncmp(a, b, sizeof(a))
	status = NOT_HERE;
	(void) strlcpy(ftty, _PATH_DEV, sizeof(ftty));
	while (fread((char *) &ubuf, sizeof(ubuf), 1, fp) == 1)
		if (SCMPN(ubuf.ut_name, name) == 0) {
			if (*tty == '\0') {
				/* no particular tty was requested */
				struct stat statb;

				memcpy(line, ubuf.ut_line, UT_LINESIZE);
				line[sizeof(line)-1] = '\0';
				ftty[sizeof(_PATH_DEV)-1] = '\0';
				strlcat(ftty, line, sizeof(ftty));
				if (stat(ftty, &statb) == 0) {
					if (!(statb.st_mode & S_IWGRP)) {
						if (status == NOT_HERE)
							status = PERMISSION_DENIED;
					} else if (now - statb.st_atime < idle) {
						idle = now - statb.st_atime;
						status = SUCCESS;
						ubuf1 = ubuf;
					}
				}
			} else if (SCMPN(ubuf.ut_line, tty) == 0) {
				status = SUCCESS;
				break;
			}
		}
	fclose(fp);
	if (*tty == '\0' && status == SUCCESS) {
		memcpy(line, ubuf1.ut_line, UT_LINESIZE);
		line[sizeof(line)-1] = '\0';
		strlcpy(tty, line, ttyl);
	}
	return (status);
}
@


1.22
log
@Remove unused headers and sort the remaining

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.21 2015/01/16 06:39:51 deraadt Exp $	*/
d115 1
a115 1
		if (ptr != (CTL_MSG *)0) {
d124 1
a124 1
		if (ptr != (CTL_MSG *)0) {
d160 1
a160 1
	if (hp == (struct hostent *)0) {
@


1.21
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.20 2013/11/27 21:25:24 deraadt Exp $	*/
d40 1
a41 2
#include <sys/socket.h>
#include <netinet/in.h>
d44 3
d48 1
a48 1
#include <syslog.h>
d51 3
a53 3
#include <ctype.h>
#include <paths.h>
#include <limits.h>
a183 2

#include <utmp.h>
@


1.20
log
@unsigned char for ctype
ok okan kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.19 2009/10/27 23:59:31 deraadt Exp $	*/
a39 1
#include <sys/param.h>
d51 1
d195 1
a195 1
	char ftty[MAXPATHLEN];
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.18 2006/10/18 21:23:11 deraadt Exp $	*/
d84 1
a84 1
		if (!isprint(*s)) {
@


1.18
log
@do not name FILE * variables "fd" since it is confusing
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.17 2004/03/10 04:32:45 deraadt Exp $	*/
a30 5

#ifndef lint
/*static char sccsid[] = "from: @@(#)process.c	5.10 (Berkeley) 2/26/91";*/
static char rcsid[] = "$Id: process.c,v 1.17 2004/03/10 04:32:45 deraadt Exp $";
#endif /* not lint */
@


1.17
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.16 2003/06/11 14:24:46 deraadt Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: process.c,v 1.16 2003/06/11 14:24:46 deraadt Exp $";
d198 1
a198 1
	FILE *fd;
d205 1
a205 1
	if ((fd = fopen(_PATH_UTMP, "r")) == NULL) {
d212 1
a212 1
	while (fread((char *) &ubuf, sizeof(ubuf), 1, fd) == 1)
d237 1
a237 1
	fclose(fd);
@


1.16
log
@ansi cleanup; ok ian markus
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.15 2003/06/02 19:38:24 millert Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: process.c,v 1.15 2003/06/02 19:38:24 millert Exp $";
d104 1
a104 1
		       buf1, buf2);
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.14 2002/11/25 07:40:09 itojun Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: process.c,v 1.14 2002/11/25 07:40:09 itojun Exp $";
d62 1
a62 3
process_request(mp, rp)
	CTL_MSG *mp;
	CTL_RESPONSE *rp;
d149 1
a149 3
do_announce(mp, rp)
	CTL_MSG *mp;
	CTL_RESPONSE *rp;
d194 1
a194 3
find_user(name, tty, ttyl)
	char *name, *tty;
	size_t ttyl;
@


1.14
log
@avoid size_t -> int conversion.  style nit for sizeof().  David Krause
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.13 2002/05/22 20:16:17 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 1
a34 1
static char rcsid[] = "$Id: process.c,v 1.13 2002/05/22 20:16:17 millert Exp $";
@


1.13
log
@Fix last commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.12 2002/05/22 20:01:28 millert Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.12 2002/05/22 20:01:28 millert Exp $";
d106 1
a106 1
		    sizeof buf1);
d108 1
a108 1
		    sizeof buf2);
d164 1
a164 1
	result = find_user(mp->r_name, mp->r_tty, sizeof mp->r_tty);
d170 1
a170 1
		sizeof (struct in_addr), AF_INET);
d204 1
a204 1
	int ttyl;
d219 1
a219 1
#define SCMPN(a, b)	strncmp(a, b, sizeof (a))
d221 2
a222 2
	(void) strlcpy(ftty, _PATH_DEV, sizeof ftty);
	while (fread((char *) &ubuf, sizeof ubuf, 1, fd) == 1)
@


1.12
log
@Fix some ut_line manipulation pointed out by Moritz Jodeit.
Fixes from Theo and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.11 2002/05/22 00:32:27 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.11 2002/05/22 00:32:27 deraadt Exp $";
d230 2
a231 2
				strlcat(ftty+sizeof(_PATH_DEV)-1, line,
				    sizeof(ftty));
@


1.11
log
@strlcpy sprinkling
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.10 2001/12/07 18:45:33 mpech Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.10 2001/12/07 18:45:33 mpech Exp $";
d209 1
d228 4
a231 2
				strlcpy(ftty+sizeof(_PATH_DEV)-1, ubuf.ut_line,
				    sizeof(ftty) - sizeof(_PATH_DEV)-1);
d242 1
a242 1
			} else if (strcmp(ubuf.ut_line, tty) == 0) {
d248 5
a252 2
	if (*tty == '\0' && status == SUCCESS)
		strlcpy(tty, ubuf1.ut_line, ttyl);
@


1.10
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.9 1998/07/10 08:06:18 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.9 1998/07/10 08:06:18 deraadt Exp $";
d101 8
a108 5
		   &satosin(&mp->ctl_addr)->sin_addr,
		   sizeof(struct in_addr))) {
		char	buf1[32], buf2[32];
		strcpy(buf1, inet_ntoa(satosin(&rp->addr)->sin_addr));
		strcpy(buf2, inet_ntoa(satosin(&mp->ctl_addr)->sin_addr));
d164 1
a164 1
	result = find_user(mp->r_name, mp->r_tty);
d202 1
a202 1
find_user(name, tty)
d204 1
d209 1
a209 1
	char ftty[20];
d220 1
a220 1
	(void) strcpy(ftty, _PATH_DEV);
d227 2
a228 1
				strcpy(ftty+sizeof(_PATH_DEV)-1, ubuf.ut_line);
d246 1
a246 1
		strcpy(tty, ubuf1.ut_line);
@


1.9
log
@do not syslog() with "\n"; skipped smtpd/named/ipmon; 12 minutes of dabbling
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.8 1996/07/19 03:09:41 millert Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.8 1996/07/19 03:09:41 millert Exp $";
d67 2
a68 2
	register CTL_MSG *mp;
	register CTL_RESPONSE *rp;
d70 1
a70 1
	register CTL_MSG *ptr;
d153 1
a153 1
	register CTL_MSG *mp;
@


1.8
log
@Patch to catch non-printables in the announce string
(ala the 'flash' hack) from FreeBSD (cleanup of patch
from Dima Ruban <dima@@demos.su>).

Also fixes a syslog() message--we use recvfrom now.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.7 1996/07/02 04:11:15 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.7 1996/07/02 04:11:15 deraadt Exp $";
d106 1
a106 1
		syslog(LOG_WARNING, "addresses are different, %s != %s\n",
@


1.7
log
@sequence space math hates me
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.6 1996/07/02 04:07:59 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.6 1996/07/02 04:07:59 deraadt Exp $";
d59 1
d71 1
d94 6
@


1.6
log
@2 bugs: would not have worked near epoch, copied ttyname in wrong case
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.5 1996/06/25 12:09:35 mickey Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.5 1996/06/25 12:09:35 mickey Exp $";
d220 1
a220 1
					} else if (statb.st_atime - now < idle) {
@


1.5
log
@fix last change.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.4 1996/06/24 13:41:29 mickey Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.4 1996/06/24 13:41:29 mickey Exp $";
d199 1
d201 1
a201 2
	idle = now;

d214 1
d216 1
a216 1
				if (stat(ftty,&statb) == 0) {
d218 1
a218 1
						if (status != SUCCESS)
d220 4
a223 6
					} else {
						if ((now - statb.st_atime) < idle) {
							idle = now - statb.st_atime;
							status = SUCCESS;
							ubuf1 = ubuf;
						}
d232 1
a232 1
	if (*tty != '\0' && status == SUCCESS)
@


1.4
log
@show talk request on the most non-idle tty (if there is more than one).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.3 1996/04/29 00:46:56 mickey Exp $";
d233 1
a233 1
	if (status == SUCCESS)
@


1.3
log
@add missed satosin().
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.2 1996/04/28 23:56:20 mickey Exp $";
d194 1
a194 1
	struct utmp ubuf;
a196 1
	struct stat statb;
d198 3
a211 1
				status = PERMISSION_DENIED;
d213 2
a214 1
				(void) strcpy(ftty+5, ubuf.ut_line);
d216 10
a225 5
					if (!(statb.st_mode & 020))
						continue;
					(void) strcpy(tty, ubuf.ut_line);
					status = SUCCESS;
					break;
d227 1
a227 2
			}
			if (strcmp(ubuf.ut_line, tty) == 0) {
d233 2
@


1.2
log
@Fix the bugs w/ that osockaddr.
minor cleanups.
this was tested w/: OpenBSD, Kleenux, BSDi (in all combinations).
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.1.1.1 1995/10/18 08:43:23 deraadt Exp $";
d61 2
@


1.1
log
@Initial revision
@
text
@d1 2
d38 1
a38 1
static char rcsid[] = "$Id: process.c,v 1.2 1993/08/01 18:29:34 mycroft Exp $";
d53 1
d60 1
d62 1
a62 3
CTL_MSG *find_request();
CTL_MSG *find_match();

a67 1
	extern int debug;
d78 1
a78 2
	mp->addr.sa_family = ntohs(mp->addr.sa_family);
	if (mp->addr.sa_family != AF_INET) {
d80 1
a80 1
		    mp->addr.sa_family);
d84 1
a84 2
	mp->ctl_addr.sa_family = ntohs(mp->ctl_addr.sa_family);
	if (mp->ctl_addr.sa_family != AF_INET) {
d86 1
a86 1
		    mp->ctl_addr.sa_family);
d90 10
d123 1
a123 1
			rp->addr.sa_family = htons(ptr->addr.sa_family);
d141 1
a155 1
#define	satosin(sa)	((struct sockaddr_in *)(sa))
d188 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
