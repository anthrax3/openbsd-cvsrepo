head	1.24;
access;
symbols
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.8
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.8
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.6
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.21.0.14
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.12
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.10
	OPENBSD_5_0:1.21.0.8
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.6
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.4
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.20.0.26
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.22
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.20
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.18
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.16
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.14
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.12
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.10
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.8
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.6
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.4
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.8.0.8
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.6.0.8
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.6
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.4
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2016.02.01.07.25.51;	author mestre;	state Exp;
branches;
next	1.23;
commitid	mlHQSQiQmQJoaJgw;

1.23
date	2015.01.16.06.39.51;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	Uu5nFG3wCl0LACBb;

1.22
date	2013.04.17.17.40.53;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.10.04.32.45;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.10.03.45.24;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.11.14.24.46;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.11.25.07.40.09;	author itojun;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.24.17.36.53;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.07.08.54.50;	author jufi;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.21.23.51.28;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.27.31;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.08.21.18.12;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.10.12.44.37;	author itojun;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.06.00.01.45;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.08.18.03.42.10;	author millert;	state Exp;
branches
	1.8.8.1;
next	1.7;

1.7
date	98.07.03.14.33.38;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.07.18.00.18.53;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.07.18.00.05.33;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.17.23.41.10;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.17.23.17.08;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.28.23.56.18;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.22;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.22;	author deraadt;	state Exp;
branches;
next	;

1.8.8.1
date	2000.10.06.20.02.33;	author jason;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Remove unused headers and sort the remaining

OK tb@@
@
text
@/*	$OpenBSD: announce.c,v 1.23 2015/01/16 06:39:51 deraadt Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>
#include <protocols/talkd.h>

#include <limits.h>
#include <paths.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <vis.h>

#include "talkd.h"

static void	print_mesg(FILE *,CTL_MSG *,char *);

/*
 * Announce an invitation to talk.  If the user is
 * accepting messages, announce that a talk is requested.
 */
int
announce(CTL_MSG *request, char *remote_machine)
{
	char full_tty[PATH_MAX];
	FILE *tf;
	struct stat stbuf;

	(void)snprintf(full_tty, sizeof(full_tty), "%s/%s", _PATH_DEV,
	    request->r_tty);
	if (access(full_tty, 0) != 0)
		return (FAILED);
	if ((tf = fopen(full_tty, "w")) == NULL)
		return (PERMISSION_DENIED);
	if (fstat(fileno(tf), &stbuf) < 0) {
		fclose(tf);
		return (PERMISSION_DENIED);
	}
	if ((stbuf.st_mode & S_IWGRP) == 0) {
		fclose(tf);
		return (PERMISSION_DENIED);
	}
	print_mesg(tf, request, remote_machine);
	fclose(tf);
	return (SUCCESS);
}

#define max(a,b) ( (a) > (b) ? (a) : (b) )
#define N_LINES 5
#define N_CHARS 120

/*
 * Build a block of characters containing the message.
 * It is sent blank filled and in a single block to
 * try to keep the message in one piece if the recipient
 * is in vi at the time
 */
static void
print_mesg(FILE *tf, CTL_MSG *request, char *remote_machine)
{
	time_t clocktime;
	struct tm *localclock;
	char line_buf[N_LINES][N_CHARS];
	int sizes[N_LINES];
	char big_buf[(N_LINES + 1) * N_CHARS];
	char *bptr, *lptr, vis_user[sizeof(request->l_name) * 4];
	int i, j, max_size;

	i = 0;
	max_size = 0;
	time(&clocktime);
	localclock = localtime(&clocktime);
	(void)snprintf(line_buf[i], N_CHARS, " ");
	sizes[i] = strlen(line_buf[i]);
	max_size = max(max_size, sizes[i]);
	i++;
	(void)snprintf(line_buf[i], N_CHARS,
	    "Message from Talk_Daemon@@%s at %d:%02d ...",
	    hostname, localclock->tm_hour , localclock->tm_min );
	sizes[i] = strlen(line_buf[i]);
	max_size = max(max_size, sizes[i]);
	i++;
	strvis(vis_user, request->l_name, VIS_CSTYLE);
	(void)snprintf(line_buf[i], N_CHARS,
	    "talk: connection requested by %s@@%s.",
	    vis_user, remote_machine);
	sizes[i] = strlen(line_buf[i]);
	max_size = max(max_size, sizes[i]);
	i++;
	(void)snprintf(line_buf[i], N_CHARS, "talk: respond with:  talk %s@@%s",
	    vis_user, remote_machine);
	sizes[i] = strlen(line_buf[i]);
	max_size = max(max_size, sizes[i]);
	i++;
	(void)snprintf(line_buf[i], N_CHARS, " ");
	sizes[i] = strlen(line_buf[i]);
	max_size = max(max_size, sizes[i]);
	i++;
	bptr = big_buf;
	*bptr++ = '\007'; /* send something to wake them up */
	*bptr++ = '\r';	/* add a \r in case of raw mode */
	*bptr++ = '\n';
	for (i = 0; i < N_LINES; i++) {
		/* copy the line into the big buffer */
		lptr = line_buf[i];
		while (*lptr != '\0')
			*(bptr++) = *(lptr++);
		/* pad out the rest of the lines with blanks */
		for (j = sizes[i]; j < max_size + 2; j++)
			*(bptr++) = ' ';
		*(bptr++) = '\r';	/* add a \r in case of raw mode */
		*(bptr++) = '\n';
	}
	*bptr = '\0';
	fprintf(tf, "%s", big_buf);
	fflush(tf);
}
@


1.23
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.22 2013/04/17 17:40:53 deraadt Exp $	*/
a31 1
#include <sys/types.h>
a32 3
#include <sys/time.h>
#include <sys/wait.h>
#include <sys/socket.h>
d34 1
a34 3
#include <errno.h>
#include <syslog.h>
#include <unistd.h>
d36 1
a37 1
#include <stdlib.h>
d39 1
d41 1
a41 1
#include <paths.h>
@


1.22
log
@do not mix concepts of gettimeofday(), tv_sec, and localtime() in a
useless fashion.
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.21 2009/10/27 23:59:31 deraadt Exp $	*/
a31 1
#include <sys/param.h>
d41 1
d58 1
a58 1
	char full_tty[MAXPATHLEN];
@


1.21
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.20 2004/03/10 04:32:45 deraadt Exp $	*/
a93 1
	struct timeval clock;
a94 1
	struct timezone zone;
d104 1
a104 2
	gettimeofday(&clock, &zone);
	clocktime = clock.tv_sec;
@


1.20
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.19 2004/03/10 03:45:24 tedu Exp $	*/
a30 5

#ifndef lint
/*static char sccsid[] = "from: @@(#)announce.c	5.9 (Berkeley) 2/26/91";*/
static char rcsid[] = "$Id: announce.c,v 1.19 2004/03/10 03:45:24 tedu Exp $";
#endif /* not lint */
@


1.19
log
@close file on error paths.  from Patrick Latifi
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.18 2003/06/11 14:24:46 deraadt Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: announce.c,v 1.18 2003/06/11 14:24:46 deraadt Exp $";
d91 1
a91 1
 * Build a block of characters containing the message. 
d118 1
a118 1
	(void)snprintf(line_buf[i], N_CHARS, 
@


1.18
log
@ansi cleanup; ok ian markus
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.17 2003/06/02 19:38:24 millert Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: announce.c,v 1.17 2003/06/02 19:38:24 millert Exp $";
d73 2
a74 1
	if (fstat(fileno(tf), &stbuf) < 0)
d76 3
a78 1
	if ((stbuf.st_mode&S_IWGRP) == 0)
d80 1
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.16 2002/11/25 07:40:09 itojun Exp $	*/
d34 1
a34 1
static char rcsid[] = "$Id: announce.c,v 1.16 2002/11/25 07:40:09 itojun Exp $";
d61 1
a61 3
announce(request, remote_machine)
	CTL_MSG *request;
	char *remote_machine;
d93 1
a93 4
print_mesg(tf, request, remote_machine)
	FILE *tf;
	CTL_MSG *request;
	char *remote_machine;
@


1.16
log
@avoid size_t -> int conversion.  style nit for sizeof().  David Krause
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.15 2002/09/24 17:36:53 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 1
a34 1
static char rcsid[] = "$Id: announce.c,v 1.15 2002/09/24 17:36:53 millert Exp $";
@


1.15
log
@Allocate vis_user on the stack instead of using malloc().  This
way we don't have to worry about malloc() failure.  Also closes
a memory leak since vis_user was never free()d.  Lack of malloc()
checking pointed out by Peter Werner.
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.14 2002/07/07 08:54:50 jufi Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.14 2002/07/07 08:54:50 jufi Exp $";
d73 1
a73 1
	(void)snprintf(full_tty, sizeof full_tty, "%s/%s", _PATH_DEV,
@


1.14
log
@
typos/grammar/better words
in comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.13 2002/05/21 23:51:28 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.13 2002/05/21 23:51:28 deraadt Exp $";
d111 1
a111 1
	char *bptr, *lptr, *vis_user;
a128 1
	vis_user = (char *) malloc(strlen(request->l_name) * 4 + 1);
@


1.13
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.12 2002/02/16 21:27:31 millert Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.12 2002/02/16 21:27:31 millert Exp $";
d96 1
a96 1
 * in in vi at the time
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.11 2001/07/08 21:18:12 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.11 2001/07/08 21:18:12 deraadt Exp $";
d124 2
a125 2
		"Message from Talk_Daemon@@%s at %d:%02d ...",
		hostname, localclock->tm_hour , localclock->tm_min );
d132 2
a133 2
		"talk: connection requested by %s@@%s.",
		vis_user, remote_machine);
d138 1
a138 1
		vis_user, remote_machine);
@


1.11
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.10 2000/10/10 12:44:37 itojun Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.10 2000/10/10 12:44:37 itojun Exp $";
d58 1
a58 1
static void	print_mesg __P((FILE *,CTL_MSG *,char *));
@


1.10
log
@need more size to big_buf for line termination (\r\n).
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.9 2000/07/06 00:01:45 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.9 2000/07/06 00:01:45 deraadt Exp $";
a68 1
	int pid, status;
@


1.9
log
@use %s with fprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.8 1998/08/18 03:42:10 millert Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.8 1998/08/18 03:42:10 millert Exp $";
d111 1
a111 1
	char big_buf[N_LINES*N_CHARS];
@


1.8
log
@TIOCNOTTY is the default in POSIX termios, no need to explicately ask for it.
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.7 1998/07/03 14:33:38 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.7 1998/07/03 14:33:38 deraadt Exp $";
d163 1
a163 1
	fprintf(tf, big_buf);
@


1.8.8.1
log
@Pull in patch from current:
Fix (deraadt):
use %s with fprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.8 1998/08/18 03:42:10 millert Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.8 1998/08/18 03:42:10 millert Exp $";
d163 1
a163 1
	fprintf(tf, "%s", big_buf);
@


1.7
log
@S_IWGRP
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.6 1996/07/18 00:18:53 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.6 1996/07/18 00:18:53 deraadt Exp $";
a47 1
#include <sgtty.h>
d61 2
a62 5
 * Announce an invitation to talk.
 *
 * Because the tty driver insists on attaching a terminal-less
 * process to any terminal that it writes on, we must fork a child
 * to protect ourselves
a68 34
	int pid, val, status;

	if (pid = fork()) {
		/* we are the parent, so wait for the child */
		if (pid == -1)		/* the fork failed */
			return (FAILED);
		do {
			val = wait(&status);
			if (val == -1) {
				if (errno == EINTR)
					continue;
				/* shouldn't happen */
				syslog(LOG_WARNING, "announce: wait: %m");
				return (FAILED);
			}
		} while (val != pid);
		if (status&0377 > 0)	/* we were killed by some signal */
			return (FAILED);
		/* Get the second byte, this is the exit/return code */
		return ((status >> 8) & 0377);
	}
	/* we are the child, go and do it */
	_exit(announce_proc(request, remote_machine));
}
	
/*
 * See if the user is accepting messages. If so, announce that 
 * a talk is requested.
 */
int
announce_proc(request, remote_machine)
	CTL_MSG *request;
	char *remote_machine;
{
a79 6
	/*
	 * On first tty open, the server will have
	 * it's pgrp set, so disconnect us from the
	 * tty before we catch a signal.
	 */
	ioctl(fileno(tf), TIOCNOTTY, (struct sgttyb *) 0);
a164 1
	ioctl(fileno(tf), TIOCNOTTY, (struct sgttyb *) 0);
@


1.6
log
@param.h
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.5 1996/07/18 00:05:33 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.5 1996/07/18 00:05:33 deraadt Exp $";
d126 1
a126 1
	if ((stbuf.st_mode&020) == 0)
@


1.5
log
@\007 instead of ^G; from phk@@freebsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.4 1996/07/17 23:41:10 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.4 1996/07/17 23:41:10 deraadt Exp $";
d41 1
@


1.4
log
@buffer overflow from dholland@@hcs.HARVARD.EDU; could do with some cleanup?
@
text
@d1 1
a1 1
/*	$OpenBSD: announce.c,v 1.3 1996/07/17 23:17:08 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.3 1996/07/17 23:17:08 deraadt Exp $";
d191 1
a191 1
	*bptr++ = ''; /* send something to wake them up */
@


1.3
log
@buffer overflow
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.2 1996/04/28 23:56:18 mickey Exp $";
d163 1
a163 1
	(void)sprintf(line_buf[i], " ");
d167 3
a169 2
	(void)sprintf(line_buf[i], "Message from Talk_Daemon@@%s at %d:%02d ...",
	hostname, localclock->tm_hour , localclock->tm_min );
d175 2
a176 1
	(void)sprintf(line_buf[i], "talk: connection requested by %s@@%s.",
d181 1
a181 1
	(void)sprintf(line_buf[i], "talk: respond with:  talk %s@@%s",
d186 1
a186 1
	(void)sprintf(line_buf[i], " ");
@


1.2
log
@Fix the bugs w/ that osockaddr.
minor cleanups.
this was tested w/: OpenBSD, Kleenux, BSDi (in all combinations).
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.1.1.1 1995/10/18 08:43:22 deraadt Exp $";
d107 1
a107 1
	char full_tty[32];
d111 2
a112 1
	(void)sprintf(full_tty, "%s/%s", _PATH_DEV, request->r_tty);
@


1.1
log
@Initial revision
@
text
@d1 2
d38 1
a38 1
static char rcsid[] = "$Id: announce.c,v 1.5 1995/06/07 17:14:41 cgd Exp $";
d56 1
d58 1
a58 1
extern char hostname[];
d67 1
d101 1
d141 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
