head	1.25;
access;
symbols
	OPENBSD_6_2_BASE:1.25
	OPENBSD_6_1:1.25.0.8
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.22
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.20
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.16
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.14
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.12
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.10
	OPENBSD_5_0:1.22.0.8
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.24
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.20
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.18
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.16
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.14
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.12
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.10
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.8
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.6
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.4
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.2
	OPENBSD_3_6_BASE:1.21
	OPENBSD_3_5:1.20.0.4
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.17.0.2
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.10
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.8
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.8
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.6
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.4
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2016.02.05.10.13.51;	author mestre;	state Exp;
branches;
next	1.24;
commitid	4vGSvLERwVccd60A;

1.24
date	2016.02.01.07.25.51;	author mestre;	state Exp;
branches;
next	1.23;
commitid	mlHQSQiQmQJoaJgw;

1.23
date	2015.01.16.06.39.51;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	Uu5nFG3wCl0LACBb;

1.22
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2004.08.08.19.32.45;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.26.07.53.26;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.11.14.24.46;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.11.25.07.40.09;	author itojun;	state Exp;
branches;
next	1.16;

1.16
date	2002.10.08.02.53.54;	author itojun;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.25.03.43.20;	author itojun;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.06.19.43.54;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.03.16.59.05;	author vincent;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.21.02.28.32;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.16.12.16.16;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.19.18.38.02;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.08.21.18.12;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.11.22.07.44;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.07.08.19.15.19;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.07.19.03.09.41;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.07.18.00.18.54;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.18.00.04.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.15.05.10.12;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.04.28.23.56.22;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@pledge(2) for talkd(8):

rpath: fopen(3) _PATH_UTMP in read mode
wpath/cpath: fopen(3) full_tty in write mode (w), which implies O_CREAT
inet/dns: the intervening hosts in the conversation may be remote, or not, but
since we will never know beforehand then it'll always need inet and dns to
resolve the hostnames

ok jca@@ and also discussed with tb@@
@
text
@/*	$OpenBSD: talkd.c,v 1.24 2016/02/01 07:25:51 mestre Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * The top level of the daemon, the format is heavily borrowed
 * from rwhod.c. Basically: find out who and where you are;
 * disconnect all descriptors and ttys, and then endless
 * loop on waiting for and processing requests
 */
#include <sys/socket.h>
#include <protocols/talkd.h>

#include <errno.h>
#include <limits.h>
#include <paths.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

#include "talkd.h"

int	debug = 0;
void	timeout(int);
long	lastmsgtime;

char	hostname[HOST_NAME_MAX+1];

#define TIMEOUT 30
#define MAXIDLE 120

int
main(int argc, char *argv[])
{
	if (getuid() != 0) {
		fprintf(stderr, "%s: getuid: not super-user\n", argv[0]);
		exit(1);
	}
	openlog("talkd", LOG_PID, LOG_DAEMON);
	if (gethostname(hostname, sizeof(hostname)) < 0) {
		syslog(LOG_ERR, "gethostname: %m");
		_exit(1);
	}
	if (chdir(_PATH_DEV) < 0) {
		syslog(LOG_ERR, "chdir: %s: %m", _PATH_DEV);
		_exit(1);
	}
	if (argc > 1 && strcmp(argv[1], "-d") == 0)
		debug = 1;
	init_table();
	signal(SIGALRM, timeout);
	alarm(TIMEOUT);

	if (pledge("stdio rpath wpath cpath inet dns", NULL) == -1) {
		syslog(LOG_ERR, "pledge: %m");
		_exit(1);
	}

	for (;;) {
		CTL_RESPONSE response;
		socklen_t len = sizeof(response.addr);
		CTL_MSG	request;
		int cc;
		struct sockaddr ctl_addr;

		memset(&response, 0, sizeof(response));
		cc = recvfrom(STDIN_FILENO, (char *)&request,
		    sizeof(request), 0, (struct sockaddr *)&response.addr,
		    &len);
		if (cc != sizeof(request)) {
			if (cc < 0 && errno != EINTR)
				syslog(LOG_WARNING, "recvfrom: %m");
			continue;
		}

		/* Force NUL termination */
		request.l_name[sizeof(request.l_name) - 1] = '\0';
		request.r_name[sizeof(request.r_name) - 1] = '\0';
		request.r_tty[sizeof(request.r_tty) - 1] = '\0';

		memcpy(&ctl_addr, &request.ctl_addr, sizeof(ctl_addr));
		ctl_addr.sa_family = ntohs(request.ctl_addr.sa_family);
		ctl_addr.sa_len = sizeof(ctl_addr);
		if (ctl_addr.sa_family != AF_INET)
			continue;

		lastmsgtime = time(0);
		process_request(&request, &response);
		/* can block here, is this what I want? */
		cc = sendto(STDOUT_FILENO, (char *)&response,
		    sizeof(response), 0, &ctl_addr, sizeof(ctl_addr));
		if (cc != sizeof(response))
			syslog(LOG_WARNING, "sendto: %m");
	}
}

void
timeout(int signo)
{
	int save_errno = errno;

	if (time(0) - lastmsgtime >= MAXIDLE)
		_exit(0);
	alarm(TIMEOUT);
	errno = save_errno;
}
@


1.24
log
@Remove unused headers and sort the remaining

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.23 2015/01/16 06:39:51 deraadt Exp $	*/
d83 5
@


1.23
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.22 2009/10/27 23:59:31 deraadt Exp $	*/
a37 1
#include <sys/types.h>
d40 1
a40 3
#include <signal.h>
#include <syslog.h>
#include <time.h>
a41 1
#include <unistd.h>
d43 2
d48 3
a50 1
#include <paths.h>
@


1.22
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.21 2004/08/08 19:32:45 deraadt Exp $	*/
a37 1
#include <sys/param.h>
d46 1
d57 1
a57 1
char	hostname[MAXHOSTNAMELEN];
@


1.21
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.20 2003/06/26 07:53:26 deraadt Exp $	*/
a30 11

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1983 Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/*static char sccsid[] = "from: @@(#)talkd.c	5.8 (Berkeley) 2/26/91";*/
static char rcsid[] = "$Id: talkd.c,v 1.20 2003/06/26 07:53:26 deraadt Exp $";
#endif /* not lint */
@


1.20
log
@simple protos
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.19 2003/06/11 14:24:46 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$Id: talkd.c,v 1.19 2003/06/11 14:24:46 deraadt Exp $";
d45 1
a45 1
 * from rwhod.c. Basically: find out who and where you are; 
@


1.19
log
@ansi cleanup; ok ian markus
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.18 2003/06/02 19:38:24 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$Id: talkd.c,v 1.18 2003/06/02 19:38:24 millert Exp $";
d65 1
a65 1
void	timeout();
d134 1
a134 1
timeout(void)
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.17 2002/11/25 07:40:09 itojun Exp $	*/
d40 1
a40 1
static char rcsid[] = "$Id: talkd.c,v 1.17 2002/11/25 07:40:09 itojun Exp $";
d74 1
a74 3
main(argc, argv)
	int argc;
	char *argv[];
d134 1
a134 1
timeout()
@


1.17
log
@avoid size_t -> int conversion.  style nit for sizeof().  David Krause
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.16 2002/10/08 02:53:54 itojun Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$Id: talkd.c,v 1.16 2002/10/08 02:53:54 itojun Exp $";
@


1.16
log
@sa_family on wire is network byteorder. from Alexander Yurchenko <grange@@rt.mipt.ru>
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.15 2002/09/25 03:43:20 itojun Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.15 2002/09/25 03:43:20 itojun Exp $";
d87 1
a87 1
	if (gethostname(hostname, sizeof (hostname)) < 0) {
d110 1
a110 1
		    sizeof (request), 0, (struct sockaddr *)&response.addr,
d112 1
a112 1
		if (cc != sizeof (request)) {
d133 2
a134 2
		    sizeof (response), 0, &ctl_addr, sizeof (ctl_addr));
		if (cc != sizeof (response))
@


1.15
log
@- "resposne" is used without initialization, so zero-fill
- sendto(2) performed with osockaddr, so avoid that
- reject anything other than AF_INET

based on patch from xs@@kittenz.org.  deraadt/millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.14 2002/09/06 19:43:54 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.14 2002/09/06 19:43:54 deraadt Exp $";
d124 1
a124 1
		ctl_addr.sa_family = request.ctl_addr.sa_family;
@


1.14
log
@use socklen_t more; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.13 2002/07/03 16:59:05 vincent Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.13 2002/07/03 16:59:05 vincent Exp $";
d106 1
d108 1
d117 1
d119 9
a127 3
		request.l_name[NAME_SIZE-1] = '\0';
		request.r_name[NAME_SIZE-1] = '\0';
		request.r_tty[TTY_SIZE-1] = '\0';
d133 1
a133 2
		    sizeof (response), 0, (struct sockaddr *)&request.ctl_addr,
		    sizeof (request.ctl_addr));
@


1.13
log
@ add a missing newline to an error message.

 from Jean-Francois Brousseau <krapht@@secureops.com>

 ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.12 2002/06/21 02:28:32 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.12 2002/06/21 02:28:32 millert Exp $";
d103 1
a103 1
		int cc, len = sizeof(response.addr);
d105 1
@


1.12
log
@o Use *_FILENO defines instead of numbers
o Kill sockt global, it is not needed
o Use STDOUT_FILENO as the 1st arg to sendto().

Previously we used sockt in sendto() which only worked because a) globals
are intialized to 0 and b) inetd sets up fds 0-2 dup'd to the same thing
so it didn't matter that we were sending to stdin, not stdout.
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.11 2002/05/16 12:16:16 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.11 2002/05/16 12:16:16 deraadt Exp $";
d82 2
a83 2
	if (getuid()) {
		fprintf(stderr, "%s: getuid: not super-user", argv[0]);
@


1.11
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.10 2002/02/19 18:38:02 mpech Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.10 2002/02/19 18:38:02 mpech Exp $";
a67 1
int	sockt;
d106 3
a108 2
		cc = recvfrom(0, (char *)&request, sizeof (request), 0,
		    (struct sockaddr *)&response.addr, &len);
d122 1
a122 1
		cc = sendto(sockt, (char *)&response,
@


1.10
log
@Fix gethostname() usage.

deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.9 2001/07/08 21:18:12 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.9 2001/07/08 21:18:12 deraadt Exp $";
d101 1
d103 3
a105 4
		CTL_MSG		request;
		CTL_RESPONSE	response;
		int		cc;
		int		len = sizeof(response.addr);
d108 1
a108 1
			(struct sockaddr *)&response.addr, &len);
@


1.9
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.8 2001/01/11 22:07:44 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.8 2001/01/11 22:07:44 deraadt Exp $";
d88 1
a88 1
	if (gethostname(hostname, sizeof (hostname) - 1) < 0) {
@


1.8
log
@save_errno in signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.8 2001/01/11 19:14:43 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.8 2001/01/11 19:14:43 deraadt Exp $";
d78 1
@


1.7
log
@Force NUL termination of strings in request we get from client; okir@@monad.swb.de
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.6 1996/07/19 03:09:41 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.6 1996/07/19 03:09:41 millert Exp $";
d132 1
d137 1
@


1.6
log
@Patch to catch non-printables in the announce string
(ala the 'flash' hack) from FreeBSD (cleanup of patch
from Dima Ruban <dima@@demos.su>).

Also fixes a syslog() message--we use recvfrom now.
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.5 1996/07/18 00:18:54 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.5 1996/07/18 00:18:54 deraadt Exp $";
d113 5
@


1.5
log
@param.h
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.4 1996/07/18 00:04:09 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.4 1996/07/18 00:04:09 deraadt Exp $";
d110 1
a110 1
				syslog(LOG_WARNING, "recv: %m");
@


1.4
log
@full hostnames; from cstruble@@singularity.bevc.blacksburg.va.us
@
text
@d1 1
a1 1
/*	$OpenBSD: talkd.c,v 1.3 1996/07/15 05:10:12 mickey Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.3 1996/07/15 05:10:12 mickey Exp $";
d53 1
@


1.3
log
@fix time differencies computations (orig from alan@@parsys.co.uk, but
don't use difftime(3), it returns double)
use <sys/queue.h> for queue maintanance
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.2 1996/04/28 23:56:22 mickey Exp $";
d72 1
a72 1
char	hostname[32];
@


1.2
log
@Fix the bugs w/ that osockaddr.
minor cleanups.
this was tested w/: OpenBSD, Kleenux, BSDi (in all combinations).
@
text
@d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.1.1.1 1995/10/18 08:43:23 deraadt Exp $";
d96 1
@


1.1
log
@Initial revision
@
text
@d1 2
d44 1
a44 1
static char rcsid[] = "$Id: talkd.c,v 1.2 1993/08/01 18:29:30 mycroft Exp $";
d65 1
a65 3

CTL_MSG		request;
CTL_RESPONSE	response;
a80 3
	register CTL_MSG *mp = &request;
	int cc;

d99 8
a106 4
		extern int errno;

		cc = recv(0, (char *)mp, sizeof (*mp), 0);
		if (cc != sizeof (*mp)) {
d112 1
a112 1
		process_request(mp, &response);
d115 2
a116 2
		    sizeof (response), 0, (struct sockaddr *)&mp->ctl_addr,
		    sizeof (mp->ctl_addr));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
