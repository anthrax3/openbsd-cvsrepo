head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.03.12.18.17.26;	author tedu;	state dead;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.02.02.21.15;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.06.21.57.27;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.06.19.43.54;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.29.07.30.01;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.31;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.08.21.18.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.28.19.34.32;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.17.19.23.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.22;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.22;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Are they going to help?
No.
Well, then tell them to stay out of the way.

ok deraadt
@
text
@/*	$OpenBSD: sprayd.c,v 1.10 2009/10/27 23:59:31 deraadt Exp $*/

/*
 * Copyright (c) 1994 Christos Zoulas
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Christos Zoulas.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <syslog.h>
#include <rpc/rpc.h>
#include <rpcsvc/spray.h>

static void spray_service(struct svc_req *, SVCXPRT *);

static int from_inetd = 1;

#define TIMEOUT 120

static void
cleanup(int signo)
{
	(void) pmap_unset(SPRAYPROG, SPRAYVERS);	/* XXX signal race */
	_exit(0);
}

static void
die(int signo)
{
	_exit(0);
}

int
main(int argc, char *argv[])
{
	SVCXPRT *transp;
	int sock = 0;
	int proto = 0;
	struct sockaddr_storage from;
	socklen_t fromlen;

	/*
	 * See if inetd started us
	 */
	fromlen = sizeof(from);
	if (getsockname(0, (struct sockaddr *)&from, &fromlen) < 0) {
		from_inetd = 0;
		sock = RPC_ANYSOCK;
		proto = IPPROTO_UDP;
	}

	if (!from_inetd) {
		daemon(0, 0);

		(void) pmap_unset(SPRAYPROG, SPRAYVERS);

		(void) signal(SIGINT, cleanup);
		(void) signal(SIGTERM, cleanup);
		(void) signal(SIGHUP, cleanup);
	} else {
		(void) signal(SIGALRM, die);
		alarm(TIMEOUT);
	}

	openlog("rpc.sprayd", LOG_CONS|LOG_PID, LOG_DAEMON);

	transp = svcudp_create(sock);
	if (transp == NULL) {
		syslog(LOG_ERR, "cannot create udp service.");
		return 1;
	}
	if (!svc_register(transp, SPRAYPROG, SPRAYVERS, spray_service, proto)) {
		syslog(LOG_ERR,
		    "unable to register (SPRAYPROG, SPRAYVERS, %s).",
		    proto ? "udp" : "(inetd)");
		return 1;
	}

	svc_run();
	syslog(LOG_ERR, "svc_run returned");
	return 1;
}


static void
spray_service(struct svc_req *rqstp, SVCXPRT *transp)
{
	static struct timeval clear, get;
	static spraycumul scum;

	switch (rqstp->rq_proc) {
	case SPRAYPROC_CLEAR:
		scum.counter = 0;
		(void) gettimeofday(&clear, 0);
		/*FALLTHROUGH*/

	case NULLPROC:
		(void)svc_sendreply(transp, xdr_void, (char *)NULL);
		return;

	case SPRAYPROC_SPRAY:
		scum.counter++;
		return;

	case SPRAYPROC_GET:
		(void) gettimeofday(&get, 0);
		timersub(&get, &clear, &get);
		scum.clock.sec = get.tv_sec;
		scum.clock.usec = get.tv_usec;
		break;

	default:
		svcerr_noproc(transp);
		return;
	}

	if (!svc_sendreply(transp, xdr_spraycumul, (caddr_t)&scum)) {
		svcerr_systemerr(transp);
		syslog(LOG_ERR, "bad svc_sendreply");
	}
}
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: sprayd.c,v 1.9 2004/06/02 02:21:15 brad Exp $*/
@


1.9
log
@IPv6 support.

From NetBSD

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sprayd.c,v 1.8 2003/07/06 21:57:27 deraadt Exp $*/
a32 4

#ifndef lint
static char rcsid[] = "$OpenBSD: sprayd.c,v 1.8 2003/07/06 21:57:27 deraadt Exp $";
#endif /* not lint */
@


1.8
log
@bring protos into scope
@
text
@d1 1
a1 1
/*	$OpenBSD: sprayd.c,v 1.7 2002/09/06 19:43:54 deraadt Exp $*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: sprayd.c,v 1.7 2002/09/06 19:43:54 deraadt Exp $";
d74 1
a74 1
	struct sockaddr_in from;
@


1.7
log
@use socklen_t more; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: sprayd.c,v 1.6 2002/06/29 07:30:01 deraadt Exp $*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: sprayd.c,v 1.6 2002/06/29 07:30:01 deraadt Exp $";
d55 1
a55 1
void
d62 1
a62 1
void
@


1.6
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: sprayd.c,v 1.5 2002/02/16 21:27:31 millert Exp $*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: sprayd.c,v 1.5 2002/02/16 21:27:31 millert Exp $";
d75 1
a75 1
	int fromlen;
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: sprayd.c,v 1.4 2001/07/08 21:18:11 deraadt Exp $*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: sprayd.c,v 1.4 2001/07/08 21:18:11 deraadt Exp $";
d56 1
a56 1
cleanup()
d63 1
a63 1
die()
d69 1
a69 3
main(argc, argv)
	int argc;
	char *argv[];
d121 1
a121 3
spray_service(rqstp, transp)
	struct svc_req *rqstp;
	SVCXPRT *transp;
d123 1
a124 1
	static struct timeval clear, get;
@


1.4
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: sprayd.c,v 1.3 2001/01/28 19:34:32 niklas Exp $*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: sprayd.c,v 1.3 2001/01/28 19:34:32 niklas Exp $";
d49 1
a49 1
static void spray_service __P((struct svc_req *, SVCXPRT *));
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: sprayd.c,v 1.2 2001/01/17 19:23:28 deraadt Exp $*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: sprayd.c,v 1.2 2001/01/17 19:23:28 deraadt Exp $";
d38 3
d42 1
d44 2
a46 2
#include <sys/time.h>
#include <syslog.h>
@


1.2
log
@use _exit() in signal handlers, and flag that the pmap_unset() calls are unsafe
@
text
@d1 2
a31 1
 *	$Id: sprayd.c,v 1.1.1.1 1995/10/18 08:43:22 deraadt Exp $
d35 1
a35 1
static char rcsid[] = "$Id: sprayd.c,v 1.1.1.1 1995/10/18 08:43:22 deraadt Exp $";
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *	$Id: sprayd.c,v 1.7 1995/03/26 23:36:44 mycroft Exp $
d34 1
a34 1
static char rcsid[] = "$Id: sprayd.c,v 1.7 1995/03/26 23:36:44 mycroft Exp $";
d53 2
a54 2
	(void) pmap_unset(SPRAYPROG, SPRAYVERS);
	exit(0);
d60 1
a60 1
	exit(0);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
