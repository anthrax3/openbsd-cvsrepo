head	1.35;
access;
symbols
	OPENBSD_6_2_BASE:1.35
	OPENBSD_6_1:1.35.0.8
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.34.0.4
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.33.0.2
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.32.0.22
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.32.0.20
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.32.0.16
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.32.0.14
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.32.0.12
	OPENBSD_5_2_BASE:1.32
	OPENBSD_5_1_BASE:1.32
	OPENBSD_5_1:1.32.0.10
	OPENBSD_5_0:1.32.0.8
	OPENBSD_5_0_BASE:1.32
	OPENBSD_4_9:1.32.0.6
	OPENBSD_4_9_BASE:1.32
	OPENBSD_4_8:1.32.0.4
	OPENBSD_4_8_BASE:1.32
	OPENBSD_4_7:1.32.0.2
	OPENBSD_4_7_BASE:1.32
	OPENBSD_4_6:1.31.0.8
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.31.0.4
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.31.0.2
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.30.0.8
	OPENBSD_4_3_BASE:1.30
	OPENBSD_4_2:1.30.0.6
	OPENBSD_4_2_BASE:1.30
	OPENBSD_4_1:1.30.0.4
	OPENBSD_4_1_BASE:1.30
	OPENBSD_4_0:1.30.0.2
	OPENBSD_4_0_BASE:1.30
	OPENBSD_3_9:1.28.0.2
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.27.0.2
	OPENBSD_3_8_BASE:1.27
	OPENBSD_3_7:1.26.0.4
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.26.0.2
	OPENBSD_3_6_BASE:1.26
	OPENBSD_3_5:1.25.0.4
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.24.0.4
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.24.0.2
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.22.0.4
	OPENBSD_3_1_BASE:1.22
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9:1.20.0.6
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_8:1.20.0.4
	OPENBSD_2_8_BASE:1.20
	OPENBSD_2_7:1.20.0.2
	OPENBSD_2_7_BASE:1.20
	OPENBSD_2_6:1.19.0.6
	OPENBSD_2_6_BASE:1.19
	OPENBSD_2_5:1.19.0.4
	OPENBSD_2_5_BASE:1.19
	OPENBSD_2_4:1.19.0.2
	OPENBSD_2_4_BASE:1.19
	OPENBSD_2_3:1.17.0.4
	OPENBSD_2_3_BASE:1.17
	OPENBSD_2_2:1.17.0.2
	OPENBSD_2_2_BASE:1.17
	OPENBSD_2_1:1.15.0.2
	OPENBSD_2_1_BASE:1.15
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.35
date	2015.12.12.20.09.28;	author mmcc;	state Exp;
branches;
next	1.34;
commitid	TosXyFD66Z0p2ETT;

1.34
date	2015.07.06.15.02.51;	author millert;	state Exp;
branches;
next	1.33;
commitid	HbpWtkDY1jgpyqRb;

1.33
date	2015.01.16.06.39.50;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	Uu5nFG3wCl0LACBb;

1.32
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2008.05.26.09.22.03;	author sobrado;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.13.04.17.07;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2006.04.01.22.48.57;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.02.16.22.46;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2005.05.29.02.11.49;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2004.08.08.19.32.45;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2002.07.03.23.39.03;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2002.06.02.01.27.16;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2001.08.18.21.37.38;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2001.07.09.07.04.42;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2000.04.21.21.50.00;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	98.08.15.21.04.34;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	98.05.18.09.58.03;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	97.08.13.21.09.27;	author dm;	state Exp;
branches;
next	1.16;

1.16
date	97.07.25.19.41.18;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	97.04.04.18.41.27;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.03.29.02.59.56;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	97.03.28.02.16.40;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	97.02.12.15.12.27;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.01.17.07.12.03;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	97.01.15.23.41.01;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	96.12.24.19.42.03;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.10.16.06.30.56;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.08.30.12.04.13;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.08.29.07.21.58;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.08.29.04.19.34;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.27.20.33.41;	author dm;	state Exp;
branches;
next	1.3;

1.3
date	96.08.27.03.18.00;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	96.07.19.07.35.18;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Remove NULL-checks before free(). ok tb@@
@
text
@/*	$OpenBSD: mail.local.c,v 1.34 2015/07/06 15:02:51 millert Exp $	*/

/*-
 * Copyright (c) 1996-1998 Theo de Raadt <deraadt@@theos.com>
 * Copyright (c) 1996-1998 David Mazieres <dm@@lcs.mit.edu>
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <syslog.h>
#include <fcntl.h>
#include <netdb.h>
#include <pwd.h>
#include <time.h>
#include <unistd.h>
#include <limits.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "pathnames.h"
#include "mail.local.h"

int
main(int argc, char *argv[])
{
	struct passwd *pw;
	int ch, fd, eval, lockfile=1, holdme=0;
	uid_t uid;
	char *from;

	openlog("mail.local", LOG_PERROR, LOG_MAIL);

	from = NULL;
	while ((ch = getopt(argc, argv, "lLdf:r:H")) != -1)
		switch (ch) {
		case 'd':		/* backward compatible */
			break;
		case 'f':
		case 'r':		/* backward compatible */
			if (from)
				merr(FATAL, "multiple -f options");
			from = optarg;
			break;
		case 'l':
			lockfile=1;
			break;
		case 'L':
			lockfile=0;
			break;
		case 'H':
			holdme=1;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	/* Support -H flag for backwards compat */
	if (holdme) {
		execl(_PATH_LOCKSPOOL, "lockspool", (char *)NULL);
		merr(FATAL, "execl: lockspool: %s", strerror(errno));
	} else {
		if (!*argv)
			usage();
		if (geteuid() != 0)
			merr(FATAL, "may only be run by the superuser");
	}

	/*
	 * If from not specified, use the name from getlogin() if the
	 * uid matches, otherwise, use the name from the password file
	 * corresponding to the uid.
	 */
	uid = getuid();
	if (!from && (!(from = getlogin()) ||
	    !(pw = getpwnam(from)) || pw->pw_uid != uid))
		from = (pw = getpwuid(uid)) ? pw->pw_name : "???";

	fd = storemail(from);
	for (eval = 0; *argv; ++argv)
		eval |= deliver(fd, *argv, lockfile);
	exit(eval);
}

int
storemail(char *from)
{
	FILE *fp = NULL;
	time_t tval;
	int fd, eline;
	size_t len;
	char *line, *tbuf;

	if ((tbuf = strdup(_PATH_LOCTMP)) == NULL)
		merr(FATAL, "unable to allocate memory");
	if ((fd = mkstemp(tbuf)) == -1 || !(fp = fdopen(fd, "w+")))
		merr(FATAL, "unable to open temporary file");
	(void)unlink(tbuf);
	free(tbuf);

	(void)time(&tval);
	(void)fprintf(fp, "From %s %s", from, ctime(&tval));

	for (eline = 1, tbuf = NULL; (line = fgetln(stdin, &len));) {
		/* We have to NUL-terminate the line since fgetln does not */
		if (line[len - 1] == '\n')
			line[len - 1] = '\0';
		else {
			/* No trailing newline, so alloc space and copy */
			if ((tbuf = malloc(len + 1)) == NULL)
				merr(FATAL, "unable to allocate memory");
			memcpy(tbuf, line, len);
			tbuf[len] = '\0';
			line = tbuf;
		}
		if (line[0] == '\0')
			eline = 1;
		else {
			if (eline && line[0] == 'F' && len > 5 &&
			    !memcmp(line, "From ", 5))
				(void)putc('>', fp);
			eline = 0;
		}
		(void)fprintf(fp, "%s\n", line);
		if (ferror(fp))
			break;
	}
	free(tbuf);

	/* Output a newline; note, empty messages are allowed. */
	(void)putc('\n', fp);
	(void)fflush(fp);
	if (ferror(fp))
		merr(FATAL, "temporary file write error");
	return(fd);
}

int
deliver(int fd, char *name, int lockfile)
{
	struct stat sb, fsb;
	struct passwd *pw;
	int mbfd=-1, rval=1, lfd=-1;
	char biffmsg[100], buf[8*1024], path[PATH_MAX];
	off_t curoff;
	size_t off;
	ssize_t nr, nw;

	/*
	 * Disallow delivery to unknown names -- special mailboxes can be
	 * handled in the sendmail aliases file.
	 */
	if (!(pw = getpwnam(name))) {
		merr(NOTFATAL, "unknown name: %s", name);
		return(1);
	}

	(void)snprintf(path, sizeof path, "%s/%s", _PATH_MAILDIR, name);

	if (lockfile) {
		lfd = getlock(name, pw);
		if (lfd == -1)
			return (1);
	}

	/* after this point, always exit via bad to remove lockfile */
retry:
	if (lstat(path, &sb)) {
		if (errno != ENOENT) {
			merr(NOTFATAL, "%s: %s", path, strerror(errno));
			goto bad;
		}
		if ((mbfd = open(path, O_APPEND|O_CREAT|O_EXCL|O_WRONLY|O_EXLOCK,
		    S_IRUSR|S_IWUSR)) < 0) {
			if (errno == EEXIST) {
				/* file appeared since lstat */
				goto retry;
			} else {
				merr(NOTFATAL, "%s: %s", path, strerror(errno));
				goto bad;
			}
		}
		/*
		 * Set the owner and group.  Historically, binmail repeated
		 * this at each mail delivery.  We no longer do this, assuming
		 * that if the ownership or permissions were changed there
		 * was a reason for doing so.
		 */
		if (fchown(mbfd, pw->pw_uid, pw->pw_gid) < 0) {
			merr(NOTFATAL, "chown %u:%u: %s",
			    pw->pw_uid, pw->pw_gid, name);
			goto bad;
		}
	} else {
		if (sb.st_nlink != 1 || !S_ISREG(sb.st_mode)) {
			merr(NOTFATAL, "%s: linked or special file", path);
			goto bad;
		}
		if ((mbfd = open(path, O_APPEND|O_WRONLY|O_EXLOCK,
		    S_IRUSR|S_IWUSR)) < 0) {
			merr(NOTFATAL, "%s: %s", path, strerror(errno));
			goto bad;
		}
		if (fstat(mbfd, &fsb)) {
			/* relating error to path may be bad style */
			merr(NOTFATAL, "%s: %s", path, strerror(errno));
			goto bad;
		}
		if (sb.st_dev != fsb.st_dev || sb.st_ino != fsb.st_ino) {
			merr(NOTFATAL, "%s: changed after open", path);
			goto bad;
		}
		/* paranoia? */
		if (fsb.st_nlink != 1 || !S_ISREG(fsb.st_mode)) {
			merr(NOTFATAL, "%s: linked or special file", path);
			goto bad;
		}
	}

	curoff = lseek(mbfd, 0, SEEK_END);
	(void)snprintf(biffmsg, sizeof biffmsg, "%s@@%lld\n", name, curoff);
	if (lseek(fd, 0, SEEK_SET) == (off_t)-1) {
		merr(NOTFATAL, "temporary file: %s", strerror(errno));
		goto bad;
	}

	while ((nr = read(fd, buf, sizeof(buf))) > 0)
		for (off = 0; off < nr;  off += nw)
			if ((nw = write(mbfd, buf + off, nr - off)) < 0) {
				merr(NOTFATAL, "%s: %s", path, strerror(errno));
				(void)ftruncate(mbfd, curoff);
				goto bad;
			}

	if (nr == 0) {
		rval = 0;
	} else {
		(void)ftruncate(mbfd, curoff);
		merr(FATAL, "temporary file: %s", strerror(errno));
	}

bad:
	if (lfd != -1) {
		rellock();
		close(lfd);
	}

	if (mbfd != -1) {
		(void)fsync(mbfd);		/* Don't wait for update. */
		(void)close(mbfd);		/* Implicit unlock. */
	}

	if (!rval)
		notifybiff(biffmsg);
	return(rval);
}

void
notifybiff(char *msg)
{
	static struct addrinfo *res0;
	struct addrinfo hints, *res;
	static int f = -1;
	size_t len;
	int error;

	if (res0 == NULL) {
		memset(&hints, 0, sizeof(hints));
		hints.ai_family = PF_UNSPEC;
		hints.ai_socktype = SOCK_DGRAM;

		error = getaddrinfo("localhost", "biff", &hints, &res0);
		if (error) {
			/* Be silent if biff service not available. */
			if (error != EAI_SERVICE) {
				merr(NOTFATAL, "localhost: %s",
				    gai_strerror(error));
			}
			return;
		}
	}

	if (f == -1) {
		for (res = res0; res != NULL; res = res->ai_next) {
			f = socket(res->ai_family, res->ai_socktype,
			    res->ai_protocol);
			if (f != -1)
				break;
		}
	}
	if (f == -1) {
		merr(NOTFATAL, "socket: %s", strerror(errno));
		return;
	}

	len = strlen(msg) + 1;	/* XXX */
	if (sendto(f, msg, len, 0, res->ai_addr, res->ai_addrlen) != len)
		merr(NOTFATAL, "sendto biff: %s", strerror(errno));
}

void
usage(void)
{
	merr(FATAL, "usage: mail.local [-Ll] [-f from] user ...");
}
@


1.34
log
@Add support for IPv6 by using getaddrinfo().  Our inetd.conf ships
with an IPv6 comsat example but it would never get used.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.33 2015/01/16 06:39:50 deraadt Exp $	*/
d158 1
a158 2
	if (tbuf)
		free(tbuf);
@


1.33
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.32 2009/10/27 23:59:31 deraadt Exp $	*/
d252 1
a252 1
	(void)snprintf(biffmsg, sizeof biffmsg, "%s@@%qd\n", name, curoff);
d292 2
a293 1
	static struct sockaddr_in addr;
a294 2
	struct hostent *hp;
	struct servent *sp;
d296 1
d298 12
a309 6
	if (!addr.sin_family) {
		/* Be silent if biff service not available. */
		if (!(sp = getservbyname("biff", "udp")))
			return;
		if (!(hp = gethostbyname("localhost"))) {
			merr(NOTFATAL, "localhost: %s", strerror(errno));
a311 4
		addr.sin_len = sizeof(struct sockaddr_in);
		addr.sin_family = hp->h_addrtype;
		addr.sin_port = sp->s_port;
		bcopy(hp->h_addr, &addr.sin_addr, (size_t)hp->h_length);
d313 10
a322 1
	if (f < 0 && (f = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
d326 3
a328 3
	len = strlen(msg) + 1;
	if (sendto(f, msg, len, 0, (struct sockaddr *)&addr, sizeof(addr))
	    != len)
@


1.32
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.31 2008/05/26 09:22:03 sobrado Exp $	*/
d34 1
a34 1
#include <sys/param.h>
d44 1
d175 1
a175 1
	char biffmsg[100], buf[8*1024], path[MAXPATHLEN];
@


1.31
log
@sort flags on both the synopsis and usage.

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.30 2006/05/13 04:17:07 deraadt Exp $	*/
a32 14

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1990 The Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "from: @@(#)mail.local.c	5.6 (Berkeley) 6/19/91";
#else
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.30 2006/05/13 04:17:07 deraadt Exp $";
#endif
#endif /* not lint */
@


1.30
log
@delete case for ?; cdp_xe@@gmx.net
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.29 2006/04/01 22:48:57 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.29 2006/04/01 22:48:57 deraadt Exp $";
d337 1
a337 1
	merr(FATAL, "usage: mail.local [-lL] [-f from] user ...");
@


1.29
log
@minor lint cleaning; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.28 2006/01/02 16:22:46 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.28 2006/01/02 16:22:46 millert Exp $";
a94 1
		case '?':
@


1.28
log
@#include <sys/signal.h> not needed
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.27 2005/05/29 02:11:49 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.27 2005/05/29 02:11:49 millert Exp $";
d123 1
a123 1
	fd = store(from);
d130 1
a130 1
store(char *from)
d188 1
a188 1
	int mbfd=-1, nr, nw, off, rval=1, lfd=-1;
d191 2
d310 1
a310 1
	int len;
d323 1
a323 1
		bcopy(hp->h_addr, &addr.sin_addr, hp->h_length);
@


1.27
log
@Fix case where input file lacks newline before EOF; Andrey Matveev
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.26 2004/08/08 19:32:45 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.26 2004/08/08 19:32:45 deraadt Exp $";
a51 1
#include <sys/signal.h>
@


1.26
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.25 2003/06/02 19:38:24 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.25 2003/06/02 19:38:24 millert Exp $";
d158 1
a158 1
			tbuf[len++] = '\0';
@


1.25
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.24 2002/07/03 23:39:03 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.24 2002/07/03 23:39:03 deraadt Exp $";
d218 1
a218 1
		     S_IRUSR|S_IWUSR)) < 0) {
@


1.24
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.23 2002/06/02 01:27:16 deraadt Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.23 2002/06/02 01:27:16 deraadt Exp $";
@


1.23
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.22 2001/08/18 21:37:38 deraadt Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.22 2001/08/18 21:37:38 deraadt Exp $";
d71 1
a71 3
main(argc, argv)
	int argc;
	char **argv;
d135 1
a135 2
store(from)
	char *from;
d189 1
a189 4
deliver(fd, name, lockfile)
	int fd;
	char *name;
	int lockfile;
d307 1
a307 2
notifybiff(msg)
	char *msg;
d339 1
a339 1
usage()
@


1.22
log
@err() -> merr(), and reorder some bugs noted by giannici@@neomedia.it; millert helped
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.21 2001/07/09 07:04:42 deraadt Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.21 2001/07/09 07:04:42 deraadt Exp $";
d84 1
a84 1
		switch(ch) {
@


1.21
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.20 2000/04/21 21:50:00 millert Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.20 2000/04/21 21:50:00 millert Exp $";
d90 1
a90 1
			    err(FATAL, "multiple -f options");
d112 1
a112 1
		err(FATAL, "execl: lockspool: %s", strerror(errno));
d117 1
a117 1
			err(FATAL, "may only be run by the superuser");
d140 1
a140 1
	FILE *fp;
d147 1
a147 1
		err(FATAL, "unable to allocate memory");
d149 1
a149 1
		err(FATAL, "unable to open temporary file");
d163 1
a163 1
				err(FATAL, "unable to allocate memory");
d187 1
a187 1
		err(FATAL, "temporary file write error");
d208 1
a208 1
		err(NOTFATAL, "unknown name: %s", name);
d224 1
a224 1
			err(NOTFATAL, "%s: %s", path, strerror(errno));
d233 1
a233 1
				err(NOTFATAL, "%s: %s", path, strerror(errno));
d244 1
a244 1
			err(NOTFATAL, "chown %u:%u: %s",
d250 1
a250 1
			err(NOTFATAL, "%s: linked or special file", path);
d255 1
a255 1
			err(NOTFATAL, "%s: %s", path, strerror(errno));
d260 1
a260 1
			err(NOTFATAL, "%s: %s", path, strerror(errno));
d264 1
a264 1
			err(NOTFATAL, "%s: changed after open", path);
d269 1
a269 1
			err(NOTFATAL, "%s: linked or special file", path);
d277 1
a277 1
		err(FATAL, "temporary file: %s", strerror(errno));
d284 1
a284 1
				err(NOTFATAL, "%s: %s", path, strerror(errno));
a291 1
		err(FATAL, "temporary file: %s", strerror(errno));
d293 1
d327 1
a327 1
			err(NOTFATAL, "localhost: %s", strerror(errno));
d336 1
a336 1
		err(NOTFATAL, "socket: %s", strerror(errno));
d342 1
a342 1
		err(NOTFATAL, "sendto biff: %s", strerror(errno));
d348 1
a348 1
	err(FATAL, "usage: mail.local [-lL] [-f from] user ...");
@


1.20
log
@Use fgetln(3) instead of fgets(3) when reading in the message.  This
way the From line escaping gets done correctly even for really long
lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.local.c,v 1.19 1998/08/15 21:04:34 millert Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.19 1998/08/15 21:04:34 millert Exp $";
d111 1
a111 1
		execl(_PATH_LOCKSPOOL, "lockspool", NULL);
@


1.19
log
@Break out locking code into its own file so it can be shared with lockspool.
Call lockspool when invoked with -H flag for backward compatibility.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.18 1998/05/18 09:58:03 deraadt Exp $";
d143 2
a144 1
	char *tn, line[2048];
d146 1
a146 1
	if ((tn = strdup(_PATH_LOCTMP)) == NULL)
d148 1
a148 1
	if ((fd = mkstemp(tn)) == -1 || !(fp = fdopen(fd, "w+")))
d150 2
a151 2
	(void)unlink(tn);
	free(tn);
d156 13
a168 3
	line[0] = '\0';
	for (eline = 1; fgets(line, sizeof(line), stdin);) {
		if (line[0] == '\n')
d171 2
a172 1
			if (eline && line[0] == 'F' && !bcmp(line, "From ", 5))
d176 1
a176 1
		(void)fprintf(fp, "%s", line);
d180 2
a182 3
	/* If message not newline terminated, need an extra. */
	if (!strchr(line, '\n'))
		(void)putc('\n', fp);
a184 1

@


1.18
log
@readlink(path, buf, sizeof buf-1).  Never forget that -1.
@
text
@d1 2
d4 2
d45 5
a49 2
/*static char sccsid[] = "from: @@(#)mail.local.c	5.6 (Berkeley) 6/19/91";*/
static char rcsid[] = "$Id: mail.local.c,v 1.17 1997/08/13 21:09:27 dm Exp $";
d68 1
a68 12

#define	FATAL		1
#define	NOTFATAL	0

int	deliver __P((int, char *, int));
void	err __P((int, const char *, ...));
void	notifybiff __P((char *));
int	store __P((char *));
void	usage __P((void));
int	dohold __P((void));
int	getlock __P((char *, struct passwd *));
void	rellock __P((void));
a74 2
	extern int optind;
	extern char *optarg;
d109 10
a118 5
	if (!*argv && !holdme)
		usage();

	if (holdme)
		exit(dohold());
a135 44
void
unhold()
{
	rellock();
	exit(0);
}

int
dohold()
{
	struct passwd *pw;
	char *from, c;
	int holdfd;

	signal(SIGTERM, unhold);
	signal(SIGINT, unhold);
	signal(SIGHUP, unhold);

	from = getlogin();
	if (from) {
		pw = getpwnam(from);
		if (pw == NULL)
			return (1);
	} else {
		pw = getpwuid(getuid());
		if (pw)
			from = pw->pw_name;
		else
			return (1);
	}

	holdfd = getlock(from, pw);
	if (holdfd == -1) {
		write(STDOUT_FILENO, "0\n", 2);
		return (1);
	}
	write(STDOUT_FILENO, "1\n", 2);

	while (read(0, &c, 1) == -1 && errno == EINTR)
		;
	rellock();
	return (0);
}

a180 112
void
baditem(path)
	char *path;
{
	char npath[MAXPATHLEN];

	if (unlink(path) == 0)
		return;
	snprintf(npath, sizeof npath, "%s/mailXXXXXXXXXX", _PATH_MAILDIR);
	if (mktemp(npath) == NULL)
		return;
	if (rename(path, npath) != -1)
		err(NOTFATAL, "nasty spool item %s renamed to %s",
		    path, npath);
	/* XXX if we fail to rename, another attempt will happen later */
}

char lpath[MAXPATHLEN];

void
rellock()
{
	if (lpath[0])
		unlink(lpath);
}

int
getlock(name, pw)
	char *name;
	struct passwd *pw;
{
	struct stat sb, fsb;
	int lfd=-1;
	char buf[8*1024];
	int tries = 0;

	(void)snprintf(lpath, sizeof lpath, "%s/%s.lock",
	    _PATH_MAILDIR, name);

	if (stat(_PATH_MAILDIR, &sb) != -1 &&
	    (sb.st_mode & S_IWOTH) == S_IWOTH) {
		/*
		 * We have a writeable spool, deal with it as
		 * securely as possible.
		 */
		time_t ctim = -1;

		seteuid(pw->pw_uid);
		if (lstat(lpath, &sb) != -1)
			ctim = sb.st_ctime;
		while (1) {
			/*
			 * Deal with existing user.lock files
			 * or directories or symbolic links that
			 * should not be here.
			 */
			if (readlink(lpath, buf, sizeof buf-1) != -1) {
				if (lstat(lpath, &sb) != -1 &&
				    S_ISLNK(fsb.st_mode)) {
					seteuid(sb.st_uid);
					unlink(lpath);
					seteuid(pw->pw_uid);
				}
				goto again;
			}
			if ((lfd = open(lpath, O_CREAT|O_WRONLY|O_EXCL|O_EXLOCK,
			    S_IRUSR|S_IWUSR)) != -1)
				break;
again:
			if (tries > 10) {
				err(NOTFATAL, "%s: %s", lpath,
				    strerror(errno));
				seteuid(0);
				return(-1);
			}
			if (tries > 9 &&
			    (lfd = open(lpath, O_WRONLY|O_EXLOCK, 0)) != -1) {
				if (fstat(lfd, &fsb) != -1 &&
				    lstat(lpath, &sb) != -1) {
					if (fsb.st_dev == sb.st_dev &&
					    fsb.st_ino == sb.st_ino &&
					    ctim == fsb.st_ctime ) {
						seteuid(fsb.st_uid);
						baditem(lpath);
						seteuid(pw->pw_uid);
					}
				}
			}
			sleep(1 << tries);
			tries++;
			continue;
		}
		seteuid(0);
	} else {
		/*
		 * Only root can write the spool directory.
		 */
		while (1) {
			if ((lfd = open(lpath, O_CREAT|O_WRONLY|O_EXCL,
			    S_IRUSR|S_IWUSR)) != -1)
				break;
			if (tries > 9) {
				err(NOTFATAL, "%s: %s", lpath, strerror(errno));
				return(-1);
			}
			sleep(1 << tries);
			tries++;
		}
	}
	return (lfd);
}

d338 1
a338 29
	err(FATAL, "usage: mail.local [-lLH] [-f from] user ...");
}

#ifdef __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

void
#ifdef __STDC__
err(int isfatal, const char *fmt, ...)
#else
err(isfatal, fmt)
	int isfatal;
	char *fmt;
	va_dcl
#endif
{
	va_list ap;
#ifdef __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	vsyslog(LOG_ERR, fmt, ap);
	va_end(ap);
	if (isfatal)
		exit(1);
@


1.17
log
@a little extra paranoia
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.16 1997/07/25 19:41:18 mickey Exp $";
d282 1
a282 1
			if (readlink(lpath, buf, sizeof buf) != -1) {
@


1.16
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.15 1997/04/04 18:41:27 deraadt Exp $";
d396 2
a397 2
		if (sb.st_nlink != 1 || S_ISLNK(sb.st_mode)) {
			err(NOTFATAL, "%s: linked file", path);
d415 2
a416 2
		if (fsb.st_nlink != 1 || S_ISLNK(fsb.st_mode)) {
			err(NOTFATAL, "%s: linked file", path);
@


1.15
log
@when mktemp() is hard to fix, use 10 X
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.14 1997/03/29 02:59:56 millert Exp $";
d498 1
a498 1
#if __STDC__
d505 1
a505 1
#if __STDC__
d515 1
a515 1
#if __STDC__
@


1.14
log
@Make ``mail.local -H'' explicately indicate when the lock fails or succeeds.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.13 1997/03/28 02:16:40 millert Exp $";
d234 1
a234 1
	snprintf(npath, sizeof npath, "%s/XXXXXXXXX", _PATH_MAILDIR);
@


1.13
log
@"mail.local -H" is valid usage.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.12 1997/02/12 15:12:27 deraadt Exp $";
d169 2
a170 1
	if (holdfd == -1)
d172 2
d323 10
a332 4
 		if ((lfd = open(lpath, O_CREAT|O_WRONLY|O_EXCL,
 		    S_IRUSR|S_IWUSR)) < 0) {
 			err(NOTFATAL, "%s: %s", lpath, strerror(errno));
 			return(-1);
a336 2


@


1.12
log
@fix option argument parsing, nirva@@ishiboo.com
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.11 1997/01/17 07:12:03 millert Exp $";
d115 1
a115 1
	if (!*argv)
@


1.11
log
@r?index -> strr?chr
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.10 1997/01/15 23:41:01 millert Exp $";
d89 1
a89 1
	while ((ch = getopt(argc, argv, "lLdf:r:")) != -1)
d488 1
a488 1
	err(FATAL, "usage: mail.local [-f from] user ...");
@


1.10
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.9 1996/12/24 19:42:03 deraadt Exp $";
d212 1
a212 1
	if (!index(line, '\n'))
@


1.9
log
@comment on why this mktemp use is safe
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.8 1996/10/16 06:30:56 millert Exp $";
d89 1
a89 1
	while ((ch = getopt(argc, argv, "lLdf:r:")) != EOF)
@


1.8
log
@check malloc ret val
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.7 1996/08/30 12:04:13 deraadt Exp $";
d237 1
@


1.7
log
@use S_IWOTH
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.6 1996/08/29 07:21:58 deraadt Exp $";
d187 2
a188 1
	tn = strdup(_PATH_LOCTMP);
@


1.6
log
@first cut at -H; to be used mailers to grab locks in 755 spool direectories
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.5 1996/08/29 04:19:34 deraadt Exp $";
d261 1
a261 1
	    (sb.st_mode & 7) == 7) {
@


1.5
log
@buf oflows, deal with 1777 spool, general DOS attack protection; help from david mazieres
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.4 1996/08/27 20:33:41 dm Exp $";
d49 1
d70 3
d82 1
a82 1
	int ch, fd, eval, lockfile=1;
d105 3
d118 3
d137 41
d238 91
d338 1
a338 1
	char biffmsg[100], buf[8*1024], path[MAXPATHLEN], lpath[MAXPATHLEN];
d353 3
a355 71
		int tries = 0;

		(void)snprintf(lpath, sizeof lpath, "%s/%s.lock",
		    _PATH_MAILDIR, name);

		if (stat(_PATH_MAILDIR, &sb) != -1 &&
		    (sb.st_mode & 7) == 7) {
			/*
			 * We have a writeable spool, deal with it as
			 * securely as possible.
			 */
			time_t ctim = -1;

			seteuid(pw->pw_uid);
			if (lstat(lpath, &sb) != -1)
				ctim = sb.st_ctime;
			while (1) {
				/*
				 * Deal with existing user.lock files
				 * or directories or symbolic links that
				 * should not be here.
				 */
				if (readlink(lpath, buf, sizeof buf) != -1) {
					if (lstat(lpath, &sb) != -1 &&
					    S_ISLNK(fsb.st_mode)) {
						seteuid(sb.st_uid);
						unlink(lpath);
						seteuid(pw->pw_uid);
					}
					goto again;
				}
				if ((lfd = open(lpath,
				    O_CREAT|O_WRONLY|O_EXCL|O_EXLOCK,
				    S_IRUSR|S_IWUSR)) != -1)
					break;
again:
				if (tries > 10) {
					err(NOTFATAL, "%s: %s", lpath,
					    strerror(errno));
					seteuid(0);
					return(1);
				}
				if (tries > 9 &&
				    (lfd = open(lpath, O_WRONLY|O_EXLOCK,
					    0)) != -1) {
					if (fstat(lfd, &fsb) != -1 &&
					    lstat(lpath, &sb) != -1) {
						if (fsb.st_dev == sb.st_dev &&
						    fsb.st_ino == sb.st_ino &&
						    ctim == fsb.st_ctime ) {
							seteuid(fsb.st_uid);
							baditem(lpath);
							seteuid(pw->pw_uid);
						}
					}
				}
				sleep(1 << tries);
				tries++;
				continue;
			}
			seteuid(0);
		} else {
			/*
			 * Only root can write the spool directory.
			 */
	 		if ((lfd = open(lpath, O_CREAT|O_WRONLY|O_EXCL,
	 		    S_IRUSR|S_IWUSR)) < 0) {
	 			err(NOTFATAL, "%s: %s", lpath, strerror(errno));
	 			return(1);
			}
		}
d436 1
a436 1
		unlink(lpath);
@


1.4
log
@Fix race condition.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.3 1996/08/27 03:18:00 dm Exp $";
d70 1
d171 16
d208 1
a208 1
	(void)sprintf(path, "%s/%s", _PATH_MAILDIR, name);
d211 1
a211 1
		(void)sprintf(lpath, "%s/%s.lock", _PATH_MAILDIR, name);
d213 68
a280 4
		if ((lfd = open(lpath, O_CREAT|O_WRONLY|O_EXCL,
		    S_IRUSR|S_IWUSR)) < 0) {
			err(NOTFATAL, "%s: %s", lpath, strerror(errno));
			return(1);
d339 1
a339 1
	(void)sprintf(biffmsg, "%s@@%qd\n", name, curoff);
@


1.3
log
@Use lockfiles by default, rather than fcntl.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.2 1996/07/19 07:35:18 deraadt Exp $";
d210 1
a210 1
		if ((mbfd = open(path, O_APPEND|O_CREAT|O_WRONLY|O_EXLOCK,
@


1.2
log
@race thee no more; fix from travis@@evtech.com with some additional stuff from me
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.1.1.1 1995/10/18 08:43:19 deraadt Exp $";
d77 1
a77 1
	int ch, fd, eval, lockfile=0;
d84 1
a84 1
	while ((ch = getopt(argc, argv, "ldf:r:")) != EOF)
d95 4
a98 1
			lockfile++;
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: mail.local.c,v 1.9 1995/06/03 22:47:20 mycroft Exp $";
d123 1
d167 1
d173 1
a173 1
	struct stat sb;
d175 1
a175 1
	int created, mbfd, nr, nw, off, rval=0, lfd=-1;
d190 1
a190 1
	if(lockfile) {
d193 1
a193 1
		if((lfd = open(lpath, O_CREAT|O_WRONLY|O_EXCL,
d200 7
a206 7
	if (!(created = lstat(path, &sb)) &&
	    (sb.st_nlink != 1 || S_ISLNK(sb.st_mode))) {
		err(NOTFATAL, "%s: linked file", path);
		return(1);
	}
	if((mbfd = open(path, O_APPEND|O_WRONLY|O_EXLOCK,
	    S_IRUSR|S_IWUSR)) < 0) {
d208 26
d235 17
a251 3
		err(NOTFATAL, "%s: %s", path, strerror(errno));
		return(1);
	}
a257 1
		rval = 1;
d265 2
a266 1
				goto trunc;
d268 4
a271 1
	if (nr < 0) {
d273 1
a273 2
trunc:		(void)ftruncate(mbfd, curoff);
		rval = 1;
a275 6
	/*
	 * Set the owner and group.  Historically, binmail repeated this at
	 * each mail delivery.  We no longer do this, assuming that if the
	 * ownership or permissions were changed there was a reason for doing
	 * so.
	 */
d277 3
a279 5
	if(lockfile) {
		if(lfd >= 0) {
			unlink(lpath);
			close(lfd);
		}
a280 2
	if (created) 
		(void)fchown(mbfd, pw->pw_uid, pw->pw_gid);
d282 4
a285 2
	(void)fsync(mbfd);		/* Don't wait for update. */
	(void)close(mbfd);		/* Implicit unlock. */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
