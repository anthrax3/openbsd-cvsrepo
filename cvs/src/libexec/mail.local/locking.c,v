head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2015.01.16.06.39.50;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	Uu5nFG3wCl0LACBb;

1.11
date	2014.01.17.21.42.47;	author tobias;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.10.21.00.50;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.01.22.48.57;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.10.00.04.28;	author david;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.03.23.39.03;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.19.19.39.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.23.16.09;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.18.21.37.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.08.15.23.11.30;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.08.15.21.04.33;	author millert;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: locking.c,v 1.11 2014/01/17 21:42:47 tobias Exp $	*/

/*
 * Copyright (c) 1996-1998 Theo de Raadt <deraadt@@theos.com>
 * Copyright (c) 1996-1998 David Mazieres <dm@@lcs.mit.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <pwd.h>
#include <syslog.h>
#include <time.h>
#include <unistd.h>
#include <limits.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "pathnames.h"
#include "mail.local.h"

static char lpath[PATH_MAX];

void
rellock(void)
{

	if (lpath[0])
		unlink(lpath);
}

int
getlock(char *name, struct passwd *pw)
{
	struct stat sb, fsb;
	int lfd=-1;
	char buf[8*1024];
	int tries = 0;

	(void)snprintf(lpath, sizeof lpath, "%s/%s.lock",
	    _PATH_MAILDIR, name);

	if (stat(_PATH_MAILDIR, &sb) != -1 &&
	    (sb.st_mode & S_IWOTH) == S_IWOTH) {
		/*
		 * We have a writeable spool, deal with it as
		 * securely as possible.
		 */
		time_t ctim = -1;

		seteuid(pw->pw_uid);
		if (lstat(lpath, &sb) != -1)
			ctim = sb.st_ctime;
		while (1) {
			/*
			 * Deal with existing user.lock files
			 * or directories or symbolic links that
			 * should not be here.
			 */
			if (readlink(lpath, buf, sizeof buf-1) != -1) {
				if (lstat(lpath, &sb) != -1 &&
				    S_ISLNK(sb.st_mode)) {
					seteuid(sb.st_uid);
					unlink(lpath);
					seteuid(pw->pw_uid);
				}
				goto again;
			}
			if ((lfd = open(lpath, O_CREAT|O_WRONLY|O_EXCL|O_EXLOCK,
			    S_IRUSR|S_IWUSR)) != -1)
				break;
again:
			if (tries > 10) {
				merr(NOTFATAL, "%s: %s", lpath,
				    strerror(errno));
				seteuid(0);
				return(-1);
			}
			if (tries > 9 &&
			    (lfd = open(lpath, O_WRONLY|O_EXLOCK, 0)) != -1) {
				if (fstat(lfd, &fsb) != -1 &&
				    lstat(lpath, &sb) != -1) {
					if (fsb.st_dev == sb.st_dev &&
					    fsb.st_ino == sb.st_ino &&
					    ctim == fsb.st_ctime ) {
						seteuid(fsb.st_uid);
						baditem(lpath);
						seteuid(pw->pw_uid);
					}
				}
				close(lfd);
			}
			sleep(1U << tries);
			tries++;
			continue;
		}
		seteuid(0);
	} else {
		/*
		 * Only root can write the spool directory.
		 */
		while (1) {
			if ((lfd = open(lpath, O_CREAT|O_WRONLY|O_EXCL,
			    S_IRUSR|S_IWUSR)) != -1)
				break;
			if (tries > 9) {
				merr(NOTFATAL, "%s: %s", lpath, strerror(errno));
				return(-1);
			}
			sleep(1U << tries);
			tries++;
		}
	}
	return(lfd);
}

void
baditem(char *path)
{
	char npath[PATH_MAX];
	int fd;

	if (unlink(path) == 0)
		return;
	snprintf(npath, sizeof npath, "%s/mailXXXXXXXXXX", _PATH_MAILDIR);
	if ((fd = mkstemp(npath)) == -1)
		return;
	close(fd);
	if (rename(path, npath) == -1)
		unlink(npath);
	else
		merr(NOTFATAL, "nasty spool item %s renamed to %s",
		    path, npath);
	/* XXX if we fail to rename, another attempt will happen later */
}

void
merr(int isfatal, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vsyslog(LOG_ERR, fmt, ap);
	va_end(ap);
	if (isfatal)
		exit(1);
}
@


1.11
log
@Close file descriptor before next try getting a good one.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.10 2011/01/10 21:00:50 millert Exp $	*/
d31 1
a31 1
#include <sys/param.h>
d38 1
d47 1
a47 1
static char lpath[MAXPATHLEN];
d145 1
a145 1
	char npath[MAXPATHLEN];
@


1.10
log
@Back out rev 1.2 and use mkstemp(), not mktemp().  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.9 2009/10/27 23:59:31 deraadt Exp $	*/
d115 1
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.8 2006/04/01 22:48:57 deraadt Exp $	*/
d144 1
d149 1
a149 1
	if (mktemp(npath) == NULL)
d151 1
@


1.8
log
@minor lint cleaning; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.7 2003/07/10 00:04:28 david Exp $	*/
a29 4

#ifndef lint
static char rcsid[] = "$OpenBSD: locking.c,v 1.7 2003/07/10 00:04:28 david Exp $";
#endif /* not lint */
@


1.7
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.6 2002/07/03 23:39:03 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: locking.c,v 1.6 2002/07/03 23:39:03 deraadt Exp $";
d120 1
a120 1
			sleep(1 << tries);
d137 1
a137 1
			sleep(1 << tries);
@


1.6
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.5 2002/02/19 19:39:38 millert Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: locking.c,v 1.5 2002/02/19 19:39:38 millert Exp $";
d44 1
@


1.5
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.4 2002/02/17 23:16:09 millert Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: locking.c,v 1.4 2002/02/17 23:16:09 millert Exp $";
d52 1
a52 1
rellock()
d60 1
a60 3
getlock(name, pw)
	char *name;
	struct passwd *pw;
d144 1
a144 2
baditem(path)
	char *path;
@


1.4
log
@Call S_ISLNK with correct variable; Peter Philipp
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.3 2001/08/18 21:37:38 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: locking.c,v 1.3 2001/08/18 21:37:38 deraadt Exp $";
d45 1
a163 6
#ifdef __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

a164 1
#ifdef __STDC__
a165 6
#else
merr(isfatal, fmt)
	int isfatal;
	char *fmt;
	va_dcl
#endif
d168 1
a168 1
#ifdef __STDC__
a169 3
#else
	va_start(ap);
#endif
@


1.3
log
@err() -> merr(), and reorder some bugs noted by giannici@@neomedia.it; millert helped
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.2 1998/08/15 23:11:30 millert Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: locking.c,v 1.2 1998/08/15 23:11:30 millert Exp $";
d90 1
a90 1
				    S_ISLNK(fsb.st_mode)) {
@


1.2
log
@go back to using mktemp, not mkstemp in baditem(); theo
@
text
@d1 1
a1 1
/*	$OpenBSD: locking.c,v 1.1 1998/08/15 21:04:33 millert Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: locking.c,v 1.1 1998/08/15 21:04:33 millert Exp $";
d102 1
a102 1
				err(NOTFATAL, "%s: %s", lpath,
d134 1
a134 1
				err(NOTFATAL, "%s: %s", lpath, strerror(errno));
d158 1
a158 1
		err(NOTFATAL, "nasty spool item %s renamed to %s",
d171 1
a171 1
err(int isfatal, const char *fmt, ...)
d173 1
a173 1
err(isfatal, fmt)
@


1.1
log
@Break out locking code into its own file so it can be shared with lockspool.
Call lockspool when invoked with -H flag for backward compatibility.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD$";
a148 1
	int fd;
d153 1
a153 1
	if ((fd = mkstemp(npath)) == -1)
a154 1
	(void)close(fd);
@

