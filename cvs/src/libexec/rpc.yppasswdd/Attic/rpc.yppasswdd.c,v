head	1.22;
access;
symbols
	OPENBSD_5_8:1.21.0.26
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.18
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.22
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.20
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.16
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.14
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.12
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.10
	OPENBSD_5_0:1.21.0.8
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.6
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.4
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.20.0.8
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.4
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.2
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.19.0.8
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.6
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.4
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.18.0.6
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.4
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.18
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.16
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.14
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.12
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.10
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.8
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.22
date	2015.11.26.19.13.14;	author deraadt;	state dead;
branches;
next	1.21;
commitid	fyLCxlWCeyOgaZvC;

1.21
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2008.05.17.23.31.52;	author sobrado;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.02.01.29.29;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2004.09.14.23.50.25;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2004.05.09.03.22.57;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.06.21.57.27;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.26.07.53.26;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.25.21.17.52;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.21.08.26;	author maja;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.20.03.43.41;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.09.14.58.30;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.27.01.02.48;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.08.19.07.00.51;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.08.05.02.26.50;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.08.04.19.25.11;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.07.21.19.22.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.06.17.10.13.13;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.04.23.09.33.43;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.22.11.26;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	95.11.01.17.40.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.23.07.44.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@rpc.yppasswdd goes to the bitbucket.

(The story is that some people do use YP still as a libc -> non-file
lookup mechanism; some of them with standard ypbind/ypserv, but more
of them with ypbind/ypldap.  That however does not justify these cruddy
tools dealing with passwords, which are more likely to contain problems)
@
text
@/*	$OpenBSD: rpc.yppasswdd.c,v 1.21 2009/10/27 23:59:31 deraadt Exp $	*/

/*
 * Copyright (c) 1994 Mats O Jansson <moj@@stacken.kth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>

#include <signal.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <pwd.h>
#include <util.h>
#include <syslog.h>

#include <rpc/rpc.h>
#include <rpc/pmap_clnt.h>

#include "yppasswd.h"

static void yppasswddprog_1(struct svc_req *, SVCXPRT *);
void    sig_child(int);

int     noshell, nogecos, nopw, domake;
char    make_arg[1024] = "make";
char   *dir;

static void
usage(void)
{
	fprintf(stderr,
	    "usage: rpc.yppasswdd [-nogecos] [-nopw] [-noshell] [-d directory] "
	    "[-m arg ...]\n");
	exit(1);
}

int
main(int argc, char *argv[])
{
	SVCXPRT *transp;
	int     i = 1;

	while (i < argc) {
		if (argv[i][0] == '-') {
			if (strcmp("-noshell", argv[i]) == 0) {
				noshell = 1;
			} else if (strcmp("-nogecos", argv[i]) == 0) {
				nogecos = 1;
			} else if (strcmp("-nopw", argv[i]) == 0) {
				nopw = 1;
			} else if (strcmp("-m", argv[i]) == 0) {
				domake = 1;
				while (i < argc) {
					if (strlcat(make_arg, " ",
					    sizeof(make_arg)) >=
					    sizeof(make_arg) ||
					    strlcat(make_arg, argv[i],
					    sizeof(make_arg)) >=
					    sizeof(make_arg)) {
						(void) fprintf(stderr,
						    "-m argument too long.\n");
						exit(1);
					}
					i++;
				}
			} else if (strcmp("-d", argv[i]) == 0 &&
			    i < argc + 1) {
				i++;
				dir = argv[i];
			} else
				usage();
			i++;
		} else
			usage();
	}

	(void) daemon(0, 0);
	chdir("/etc");

	(void) pmap_unset(YPPASSWDPROG, YPPASSWDVERS);

	(void) signal(SIGCHLD, sig_child);

	transp = svcudp_create(RPC_ANYSOCK);
	if (transp == NULL) {
		syslog(LOG_ERR, "cannot create udp service");
		exit(1);
	}
	if (!svc_register(transp, YPPASSWDPROG, YPPASSWDVERS, yppasswddprog_1,
	    IPPROTO_UDP)) {
		syslog(LOG_ERR, "unable to register YPPASSWDPROG, YPPASSWDVERS, udp");
		exit(1);
	}
	transp = svctcp_create(RPC_ANYSOCK, 0, 0);
	if (transp == NULL) {
		syslog(LOG_ERR, "cannot create tcp service");
		exit(1);
	}
	if (!svc_register(transp, YPPASSWDPROG, YPPASSWDVERS, yppasswddprog_1,
	    IPPROTO_TCP)) {
		syslog(LOG_ERR, "unable to register YPPASSWDPROG, YPPASSWDVERS, tcp");
		exit(1);
	}
	svc_run();
	syslog(LOG_ERR, "svc_run returned");
	exit(1);
}

static void
yppasswddprog_1(struct svc_req *rqstp, SVCXPRT *transp)
{
	union {
		yppasswd yppasswdproc_update_1_arg;
	} argument;
	bool_t (*xdr_argument)(XDR *, yppasswd *);
	char   *(*local)(yppasswd *, struct svc_req *, SVCXPRT *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply(transp, xdr_void, (char *) NULL);
		return;
	case YPPASSWDPROC_UPDATE:
		xdr_argument = xdr_yppasswd;
		local = (char *(*)(yppasswd *, struct svc_req *,
		    SVCXPRT *)) yppasswdproc_update_1_svc;
		break;
	default:
		svcerr_noproc(transp);
		return;
	}
	bzero((char *) &argument, sizeof(argument));
	if (!svc_getargs(transp, xdr_argument, (caddr_t) & argument)) {
		svcerr_decode(transp);
		return;
	}
	(*local)(&argument.yppasswdproc_update_1_arg, rqstp, transp);
}

/* ARGSUSED */
void
sig_child(int signo)
{
	int save_errno = errno;

	while (wait3((int *) NULL, WNOHANG, (struct rusage *) NULL) > 0)
		;
	errno = save_errno;
}
@


1.21
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.20 2008/05/17 23:31:52 sobrado Exp $	*/
@


1.20
log
@documentation tweaks.

ok (some time ago) jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.19 2006/04/02 01:29:29 deraadt Exp $	*/
a27 4

#ifndef lint
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.19 2006/04/02 01:29:29 deraadt Exp $";
#endif
@


1.19
log
@#ifdef lint not LINT
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.18 2004/09/14 23:50:25 deraadt Exp $	*/
d30 1
a30 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.18 2004/09/14 23:50:25 deraadt Exp $";
d62 2
a63 2
	    "usage: rpc.yppasswdd [-d dir] [-noshell] [-nogecos] [-nopw]\n"
	    "       [-m arg1 arg2 ... ]\n");
@


1.18
log
@remove unused variables galore
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.17 2004/05/09 03:22:57 deraadt Exp $	*/
d29 2
a30 2
#ifndef LINT
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.17 2004/05/09 03:22:57 deraadt Exp $";
@


1.17
log
@de-lint
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.16 2003/07/06 21:57:27 deraadt Exp $	*/
d30 1
a30 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.16 2003/07/06 21:57:27 deraadt Exp $";
a55 1
char   *tempname;
a144 1
	char   *result;
a145 1
	bool_t (*xdr_result)(XDR *, int *);
a153 1
		xdr_result = xdr_int;
d166 1
a166 2
	result = (*local) (&argument.yppasswdproc_update_1_arg,
	    rqstp, transp);
d169 1
@


1.16
log
@bring protos into scope
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.15 2003/06/26 07:53:26 deraadt Exp $	*/
d30 1
a30 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.15 2003/06/26 07:53:26 deraadt Exp $";
a55 1
char   *progname = "yppasswdd";
@


1.15
log
@simple protos
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.14 2003/06/25 21:17:52 deraadt Exp $	*/
d30 1
a30 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.14 2003/06/25 21:17:52 deraadt Exp $";
d60 1
a60 1
void
@


1.14
log
@proto repair (ugly with rpc programs)
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.13 2003/06/02 21:08:26 maja Exp $	*/
d30 1
a30 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.13 2003/06/02 21:08:26 maja Exp $";
d159 2
a160 1
		local = (char *(*) ()) yppasswdproc_update_1_svc;
@


1.13
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.12 2002/06/20 03:43:41 deraadt Exp $	*/
d30 1
a30 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.12 2002/06/20 03:43:41 deraadt Exp $";
d51 2
a52 2
static void yppasswddprog_1();
void    sig_child();
d146 1
a146 1
	}       argument;
d148 3
a150 2
	bool_t(*xdr_argument) (), (*xdr_result) ();
	char   *(*local) ();
d170 2
a171 1
	result = (*local) (&argument, rqstp, transp);
d175 1
a175 1
sig_child(void)
@


1.12
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.11 2001/12/09 14:58:30 miod Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d30 1
a30 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.11 2001/12/09 14:58:30 miod Exp $";
@


1.11
log
@Do not use stdio functions after a successfull call to daemon(), use
syslog() instead.
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.10 2001/11/27 01:02:48 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.10 2001/11/27 01:02:48 millert Exp $";
d66 1
a66 1
usage()
d68 3
a70 4
	fprintf(stderr, "%s%s%s",
	    "usage: rpc.yppasswdd ",
	    "[-d dir] [-noshell] [-nogecos] [-nopw]\n",
	    "                     [-m arg1 arg2 ... ]\n");
d75 1
a75 3
main(argc, argv)
	int     argc;
	char   *argv[];
d103 2
a104 2
			} else if (strcmp("-d", argv[i]) == 0
			    && i < argc + 1) {
d147 1
a147 3
yppasswddprog_1(rqstp, transp)
	struct svc_req *rqstp;
	SVCXPRT *transp;
d178 1
a178 1
sig_child()
@


1.10
log
@Use strlcat() when adding to 'make_arg' via the -m flag to avoid
overflowing.  Closes PR 2201.
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc.yppasswdd.c,v 1.9 1997/08/19 07:00:51 niklas Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.9 1997/08/19 07:00:51 niklas Exp $";
d49 1
a119 5
/*
	freopen("/dev/null", "r", stdin);
	freopen("/var/yp/stderr", "w", stderr);
	freopen("/var/yp/stdout", "w", stdout);
*/
d126 1
a126 1
		(void) fprintf(stderr, "cannot create udp service.\n");
d131 1
a131 1
		fprintf(stderr, "unable to register YPPASSWDPROG, YPPASSWDVERS, udp\n");
d136 1
a136 1
		(void) fprintf(stderr, "cannot create tcp service.\n");
d141 1
a141 1
		fprintf(stderr, "unable to register YPPASSWDPROG, YPPASSWDVERS, tcp\n");
d145 1
a145 1
	(void) fprintf(stderr, "svc_run returned\n");
@


1.9
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: rpc.yppasswdd.c,v 1.8 1997/08/05 02:26:50 deraadt Exp $";
d93 10
a102 2
					strcat(make_arg, " ");
					strcat(make_arg, argv[i]);
@


1.8
log
@pull errno.h in
@
text
@d1 2
d35 1
a35 1
static char rcsid[] = "$Id: rpc.yppasswdd.c,v 1.7 1997/08/04 19:25:11 deraadt Exp $";
@


1.7
log
@save errno in sigchld handlers
@
text
@d33 1
a33 1
static char rcsid[] = "$Id: rpc.yppasswdd.c,v 1.6 1997/07/21 19:22:56 deraadt Exp $";
d43 1
@


1.6
log
@Wall
@
text
@d33 1
a33 1
static char rcsid[] = "$Id: rpc.yppasswdd.c,v 1.5 1997/06/17 10:13:13 niklas Exp $";
d178 2
d182 1
@


1.5
log
@Add a -d flag which takes the directory where the YP password files are.
This change makes it possible to separate the host's passwords from the ones
served to YP clients.
@
text
@d33 1
a33 1
static char rcsid[] = "$Id: rpc.yppasswdd.c,v 1.4 1997/04/23 09:33:43 deraadt Exp $";
d36 4
a40 5
#include <rpc/rpc.h>
#include <rpc/pmap_clnt.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/types.h>
d42 1
d45 4
@


1.4
log
@use daemon()
@
text
@d33 1
a33 1
static char rcsid[] = "$Id: rpc.yppasswdd.c,v 1.3 1996/06/26 22:11:26 maja Exp $";
d44 1
d55 1
d60 1
a60 1
	fprintf(stderr, "%s%s",
d62 2
a63 1
	    "[-noshell] [-nogecos] [-nopw] [-m arg1 arg2 ... ]\n");
d90 4
@


1.3
log
@Copyright fixes and cleaned up after move to use of libutil. /moj
@
text
@d33 1
a33 1
static char rcsid[] = "$Id: rpc.yppasswdd.c,v 1.2 1995/11/01 17:40:34 deraadt Exp $";
d94 1
a94 11
	switch (fork()) {
	case 0:
		break;
	case -1:
		perror("fork");
		exit(1);
	default:
		exit(0);
	}

	setsid();
@


1.2
log
@+ from moj
@
text
@d13 5
a17 3
 * 3. The name of the author may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
d33 1
a33 1
static char rcsid[] = "$Id: rpc.yppasswdd.c,v 1.3 1995/06/10 22:46:52 moj Exp root $";
@


1.1
log
@add ypserv
@
text
@d31 1
a31 1
static char rcsid[] = "$Id: rpc.yppasswdd.c,v 1.2 1994/05/29 10:19:00 moj Exp root $";
a35 1
#include <rpcsvc/yppasswd.h>
d42 3
a44 1
#include "yplog.h"
d46 1
a46 1
void sig_child();
d48 13
a60 7
int	 noshell = FALSE;
int	 nogecos = FALSE;
int	 nopw = FALSE;
int	 make = FALSE;
char	 make_arg[1024] = "make";
char	*progname = "yppasswdd";
char	*tempname;
d63 3
a65 3
main(argc,argv)
int argc;
char *argv[];
d68 1
a68 2
	int	 i = 1;
	int	 usage = FALSE;
d71 19
a89 48
	  
	  if (argv[i][0] == '-') {
	    
	    if (strcmp("-noshell",argv[i]) == 0) {
	      noshell = TRUE;
	      i++;
	      continue;
	    }

	    if (strcmp("-nogecos",argv[i]) == 0) {
	      nogecos = TRUE;
	      i++;
	      continue;
	    }

	    if (strcmp("-nopw",argv[i]) == 0) {
	      nopw = TRUE;
	      i++;
	      continue;
	    }

	    if (strcmp("-m",argv[i]) == 0) {
	      make = TRUE;
	      i++;
	      while (i < argc) {
		strcat(make_arg," ");
		strcat(make_arg,argv[i]);
		i++;
	      }
	      continue;
	    }

	    usage = TRUE;
	    i++;

	  } else {
	    usage = TRUE;
	    i++;
	  }
	  
	};

	if (usage == TRUE) {
	  fprintf(stderr,
		  "%s%s",
		  "usage: rpc.yppasswdd ",
		  "[-noshell] [-nogecos] [-nopw] [-m arg1 arg2 ... ]\n");
	  exit(1);
d92 1
a92 2
#ifdef DAEMON
	switch(fork()) {
d101 1
d103 1
a103 1
#endif
a104 5
	yplog_init(progname);

	chdir("/etc");
	
	/* std* must exists */
d109 2
a110 2
*/	
	(void)pmap_unset(YPPASSWDPROG, YPPASSWDVERS);
d112 1
a112 1
	(void)signal(SIGCHLD, sig_child);
d116 1
a116 1
		(void)fprintf(stderr, "cannot create udp service.\n");
d119 3
a121 2
	if (!svc_register(transp, YPPASSWDPROG, YPPASSWDVERS, yppasswddprog_1, IPPROTO_UDP)) {
		(void)fprintf(stderr, "unable to register (YPPASSWDPROG, YPPASSWDVERS, udp).\n");
a123 1

d126 1
a126 1
		(void)fprintf(stderr, "cannot create tcp service.\n");
d129 3
a131 2
	if (!svc_register(transp, YPPASSWDPROG, YPPASSWDVERS, yppasswddprog_1, IPPROTO_TCP)) {
		(void)fprintf(stderr, "unable to register (YPPASSWDPROG, YPPASSWDVERS, tcp).\n");
d135 1
a135 1
	(void)fprintf(stderr, "svc_run returned\n");
d146 4
a149 4
	} argument;
	char *result;
	bool_t (*xdr_argument)(), (*xdr_result)();
	char *(*local)();
d153 1
a153 1
		(void)svc_sendreply(transp, xdr_void, (char *)NULL);
a154 1

d158 1
a158 1
		local = (char *(*)()) yppasswdproc_update_1;
a159 1

d164 2
a165 2
	bzero((char *)&argument, sizeof(argument));
	if (!svc_getargs(transp, xdr_argument, &argument)) {
d169 1
a169 2
	result = (*local)(&argument, rqstp, transp);

d175 2
a176 1
	while (wait3((int *)NULL, WNOHANG, (struct rusage *)NULL) > 0);
@
