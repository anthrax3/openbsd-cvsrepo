head	1.17;
access;
symbols
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.16
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.12
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.10
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.8
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.14
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.12
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2011.09.19.06.47.52;	author okan;	state dead;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.17.23.53.52;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.21.19.57.42;	author jasper;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.03.17.49.17;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.06.00.45.12;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.03.23.39.03;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.22.06.35.43;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.29;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.07.18.45.32;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	98.05.17.06.33.11;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.11.13.04.15.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.11.13.03.56.53;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.12.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.15.23.40.59;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Obsoleted after the makewhatis(8) re-write in 2000.

ok espie schwarze deraadt.
@
text
@/*	$OpenBSD: getNAME.c,v 1.16 2009/10/27 23:59:31 deraadt Exp $	*/
/*	$NetBSD: getNAME.c,v 1.7.2.1 1997/11/10 19:54:46 thorpej Exp $	*/

/*-
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Get name sections from manual pages.
 *	-t	for building toc
 *	-i	for building intro entries
 *	-w	for querying type of manual source
 *	other	apropos database
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>

int tocrc;
int intro;
int typeflag;

void doname(char *);
void dorefname(char *);
void getfrom(char *);
void split(char *, char *);
void trimln(char *);
__dead void usage(void);
int main(int, char *[]);

int
main(int argc, char *argv[])
{
	int ch;

	while ((ch = getopt(argc, argv, "itw")) != -1)
		switch (ch) {
		case 'i':
			intro = 1;
			break;
		case 't':
			tocrc = 1;
			break;
		case 'w':
			typeflag = 1;
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (!*argv)
		usage();

	for (; *argv; ++argv)
		getfrom(*argv);
	exit(0);
}

void
getfrom(char *pathname)
{
	int i = 0;
	char *name, *loc, *s, *t;
	char headbuf[BUFSIZ];
	char linbuf[BUFSIZ];
	char savebuf[BUFSIZ];

	if (freopen(pathname, "r", stdin) == 0) {
		perror(pathname);
		return;
	}
	name = basename(pathname);
	for (;;) {
		if (fgets(headbuf, sizeof(headbuf), stdin) == NULL) {
			if (typeflag)
				printf("%-60s	UNKNOWN\n", pathname);
			return;
		}
		if (headbuf[0] != '.')
			continue;
		if ((headbuf[1] == 'T' && headbuf[2] == 'H') ||
		    (headbuf[1] == 't' && headbuf[2] == 'h'))
			break;
		if (headbuf[1] == 'D' && headbuf[2] == 't')
			goto newman;
	}
	if (typeflag) {
		printf("%-60s	OLD\n", pathname);
		return;
	}
	for (;;) {
		if (fgets(linbuf, sizeof(linbuf), stdin) == NULL)
			return;
		if (linbuf[0] != '.')
			continue;
		if (linbuf[1] == 'S' && linbuf[2] == 'H')
			break;
		if (linbuf[1] == 's' && linbuf[2] == 'h')
			break;
	}
	trimln(headbuf);
	if (tocrc)
		doname(name);
	linbuf[0] = '\0';
	for (;;) {
		if (fgets(headbuf, sizeof(headbuf), stdin) == NULL)
			break;
		if (headbuf[0] == '.') {
			if (headbuf[1] == 'S' && headbuf[2] == 'H')
				break;
			if (headbuf[1] == 's' && headbuf[2] == 'h')
				break;
		}
		if (i != 0)
			strlcat(linbuf, " ", sizeof(linbuf));
		i++;
		trimln(headbuf);
		strlcat(linbuf, headbuf, sizeof(linbuf));
		/* change the \- into (N) - */
		if ((s = strstr(linbuf, "\\-")) != NULL) {
			strlcpy(savebuf, s+1, sizeof savebuf);
			if ((t = strchr(name, '.')) != NULL) {
				t++;
				*s++ = '(';
				while (*t)
					*s++ = *t++;
				*s++ = ')';
				*s++ = ' ';
				*s++ = '\0';
			}
			strlcat(linbuf, savebuf, sizeof(linbuf));
		}
	}
	if (intro)
		split(linbuf, name);
	else
		printf("%s\n", linbuf);
	return;

newman:
	if (typeflag) {
		printf("%-60s	NEW\n", pathname);
		return;
	}
	for (;;) {
		if (fgets(linbuf, sizeof(linbuf), stdin) == NULL)
			return;
		if (linbuf[0] != '.')
			continue;
		if (linbuf[1] == 'S' && linbuf[2] == 'h')
			break;
	}
	trimln(headbuf);
	if (tocrc)
		doname(name);
	linbuf[0] = '\0';
	for (;;) {
		if (fgets(headbuf, sizeof(headbuf), stdin) == NULL)
			break;
		if (headbuf[0] == '.') {
			if (headbuf[1] == 'S' && headbuf[2] == 'h')
				break;
		}
		if (i != 0)
			strlcat(linbuf, " ", sizeof(linbuf));
		i++;
		trimln(headbuf);
		for (loc = strchr(headbuf, ' '); loc; loc = strchr(loc, ' '))
			if (loc[1] == ',')
				memmove(loc, &loc[1], strlen(&loc[1])+1);
			else
				loc++;
		if (headbuf[0] != '.') {
			strlcat(linbuf, headbuf, sizeof(linbuf));
		} else {
			/*
			 * Get rid of quotes in macros.
			 */
			for (loc = strchr(&headbuf[4], '"'); loc; ) {
				memmove(loc, &loc[1], strlen(&loc[1])+1);
				loc = strchr(loc, '"');
			}
			/*
			 * Handle cross references
			 */
			if (headbuf[1] == 'X' && headbuf[2] == 'r') {
				for (loc = &headbuf[4]; *loc != ' '; loc++)
					continue;
				loc[0] = '(';
				loc[2] = ')';
				loc[3] = '\0';
			}

			/*
			 * Put dash between names and description.
			 * Put section and dash between names and description.
			 */
			if (headbuf[1] == 'N' && headbuf[2] == 'd') {
				if ((t = strchr(name, '.')) != NULL) {
					char *str;

					if (asprintf(&str, "(%s)", t+1) == -1)
						return;
					strlcat(linbuf, str, sizeof(linbuf));
					free(str);
				}
				strlcat(linbuf, "- ", sizeof(linbuf));
			}
			/*
			 * Skip over macro names.
			 */
			strlcat(linbuf, &headbuf[4], sizeof(linbuf));
		}
	}
	if (intro)
		split(linbuf, name);
	else
		printf("%s\n", linbuf);
}

void
trimln(char *cp)
{

	while (*cp)
		cp++;
	if (*--cp == '\n')
		*cp = 0;
}

void
doname(char *name)
{
	char *dp = name, *ep;

again:
	while (*dp && *dp != '.')
		putchar(*dp++);
	if (*dp)
		for (ep = dp+1; *ep; ep++)
			if (*ep == '.') {
				putchar(*dp++);
				goto again;
			}
	putchar('(');
	if (*dp)
		dp++;
	while (*dp)
		putchar(*dp++);
	putchar(')');
	putchar(' ');
}

void
split(char *line, char *name)
{
	char *cp, *dp;
	char *sp, *sep;

	cp = strchr(line, '-');
	if (cp == 0)
		return;
	sp = cp + 1;
	for (--cp; *cp == ' ' || *cp == '\t' || *cp == '\\'; cp--)
		;
	*++cp = '\0';
	while (*sp && (*sp == ' ' || *sp == '\t'))
		sp++;
	for (sep = "", dp = line; dp && *dp; dp = cp, sep = "\n") {
		cp = strchr(dp, ',');
		if (cp) {
			char *tp;

			for (tp = cp - 1; *tp == ' ' || *tp == '\t'; tp--)
				;
			*++tp = '\0';
			for (++cp; *cp == ' ' || *cp == '\t'; cp++)
				;
		}
		printf("%s%s\t", sep, dp);
		dorefname(name);
		printf("\t%s", sp);
	}
}

void
dorefname(char *name)
{
	char *dp = name, *ep;

again:
	while (*dp && *dp != '.')
		putchar(*dp++);
	if (*dp)
		for (ep = dp+1; *ep; ep++)
			if (*ep == '.') {
				putchar(*dp++);
				goto again;
			}
	putchar('.');
	if (*dp)
		dp++;
	while (*dp)
		putchar(*dp++);
}

void
usage(void)
{
	extern char *__progname;
	(void)fprintf(stderr, "usage: %s [-itw] file ...\n", __progname);
	exit(1);
}
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.15 2006/08/17 23:53:52 ray Exp $	*/
@


1.15
log
@Instead of doing all this pointer and buffer arithmetic, generate string
using asprintf and strlcat it.

Declare usage __dead instead of void in the prototype but static void in
the definition.

OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.14 2006/06/21 19:57:42 jasper Exp $	*/
a31 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1980, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)getNAME.c	8.1 (Berkeley) 6/30/93";
#else
static const char rcsid[] = "$OpenBSD: getNAME.c,v 1.14 2006/06/21 19:57:42 jasper Exp $";
#endif
#endif /* not lint */
@


1.14
log
@minimal KNF and spacing
ok millert@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.13 2003/07/03 17:49:17 avsm Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: getNAME.c,v 1.13 2003/07/03 17:49:17 avsm Exp $";
d68 1
a68 1
void usage(void);
d243 6
a248 3
					size_t len = strlen(linbuf);
					snprintf(linbuf+len, sizeof(linbuf)-len,
					    "(%s)", t+1);
d350 1
a350 1
static void
@


1.13
log
@clean up strn{cpy,cat}->strl{cpy,cat}
ok tdeval@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.12 2003/06/02 19:38:24 millert Exp $	*/
d34 1
a34 1
static char copyright[] =
d43 1
a43 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.12 2003/06/02 19:38:24 millert Exp $";
d289 1
a289 1
		putchar (*dp++);
d344 1
a344 1
		putchar (*dp++);
d347 1
a347 1
void
d350 2
a351 1
	(void)fprintf(stderr, "usage: getNAME [-itw] file ...\n");
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.11 2003/04/06 00:45:12 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.11 2003/04/06 00:45:12 deraadt Exp $";
d158 1
a158 2
			strncat(linbuf, " ", sizeof(linbuf) - strlen(linbuf)
			    - 1);
d161 1
a161 1
		strncat(linbuf, headbuf, sizeof(linbuf) - strlen(linbuf) - 1);
d174 1
a174 2
			strncat(linbuf, savebuf, sizeof(linbuf) -
			    strlen(linbuf) - 1);
d208 1
a208 2
			strncat(linbuf, " ", sizeof(linbuf) - strlen(linbuf)
			    - 1);
d217 1
a217 2
			strncat(linbuf, headbuf, sizeof(linbuf) -
			    strlen(linbuf) - 1);
d243 3
a245 6
					strncat(linbuf, "(", sizeof(linbuf) -
					    strlen(linbuf) - 1);
					strncat(linbuf, t+1, sizeof(linbuf) -
					    strlen(linbuf) - 1);
					strncat(linbuf, ") ", sizeof(linbuf) -
					    strlen(linbuf) - 1);
d247 1
a247 2
				strncat(linbuf, "- ", sizeof(linbuf) -
				    strlen(linbuf) - 1);
d252 1
a252 2
			strncat(linbuf, &headbuf[4], sizeof(linbuf) -
			    strlen(linbuf) - 1);
@


1.11
log
@string handling; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.10 2002/07/03 23:39:03 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.10 2002/07/03 23:39:03 deraadt Exp $";
@


1.10
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.9 2002/05/22 06:35:43 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.9 2002/05/22 06:35:43 deraadt Exp $";
d220 1
a220 1
				strcpy(loc, &loc[1]);
d231 1
a231 1
				strcpy(loc, &loc[1]);
@


1.9
log
@a bunch more strcpy -> strlcpy and sprintf -> snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.8 2002/02/16 21:27:29 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.8 2002/02/16 21:27:29 millert Exp $";
d76 1
a76 3
main(argc, argv)
	int argc;
	char *argv[];
d107 1
a107 2
getfrom(pathname)
	char *pathname;
d275 1
a275 2
trimln(cp)
	char *cp;
d285 1
a285 2
doname(name)
	char *name;
d308 1
a308 2
split(line, name)
	char *line, *name;
d340 1
a340 2
dorefname(name)
	char *name;
d361 1
a361 1
usage()
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.7 2001/12/07 18:45:32 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.7 2001/12/07 18:45:32 mpech Exp $";
d172 1
a172 1
			strcpy(savebuf, s+1);
@


1.7
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.6 1998/05/17 06:33:11 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.6 1998/05/17 06:33:11 millert Exp $";
d67 7
a73 7
void doname __P((char *));
void dorefname __P((char *));
void getfrom __P((char *));
void split __P((char *, char *));
void trimln __P((char *));
void usage __P((void));
int main __P((int, char *[]));
@


1.6
log
@Fix strncat() usage; Some from cstone@@pobox.com
It would be better to detect impending oflow, log, and abort though.
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.5 1997/11/13 04:15:25 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.5 1997/11/13 04:15:25 millert Exp $";
d279 1
a279 1
	register char *cp;
d292 1
a292 1
	register char *dp = name, *ep;
d316 1
a316 1
	register char *cp, *dp;
d331 1
a331 1
			register char *tp;
d349 1
a349 1
	register char *dp = name, *ep;
@


1.5
log
@Changes from NetBSD (mrg):
    add a manual for getNAME.  also, change the `default' output to be in
    a form much more useful for an apropos(1) database.  this will be used
    by makewhatis(1) to generate the whatis.db file's now...

OpenBSD changes:
    use basename(3) instead of doing a half-hearted job inline.
    use strncat(3) because I am anal.
@
text
@d1 1
a1 1
/*	$OpenBSD: getNAME.c,v 1.4 1997/11/13 03:56:53 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: getNAME.c,v 1.4 1997/11/13 03:56:53 millert Exp $";
d165 2
a166 1
			strncat(linbuf, " ", sizeof(linbuf) - 1);
d169 1
a169 1
		strncat(linbuf, headbuf, sizeof(linbuf) - 1);
d182 2
a183 1
			strncat(linbuf, savebuf, sizeof(linbuf) - strlen(savebuf) - 1);
d217 2
a218 1
			strncat(linbuf, " ", sizeof(linbuf) - 1);
d227 2
a228 1
			strncat(linbuf, headbuf, sizeof(linbuf) - 1);
d254 6
a259 3
					strncat(linbuf, "(", sizeof(linbuf)-1);
					strncat(linbuf, t+1, sizeof(linbuf)-1);
					strncat(linbuf, ") ", sizeof(linbuf)-1);
d261 2
a262 1
				strncat(linbuf, "- ", sizeof(linbuf) - 1);
d267 2
a268 1
			strncat(linbuf, &headbuf[4], sizeof(linbuf) - 1);
@


1.4
log
@4.4BSD lite version.  Adds -w flag for whatis entries.
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD$";
d55 1
d61 1
d73 1
a79 1
	extern int optind;
d83 1
a83 1
		switch(ch) {
d113 1
a113 1
	char *name, *loc;
d116 1
d122 1
a122 4
	if (name = strrchr(pathname, '/'))
		name++;
	else
		name = pathname;
d124 1
a124 1
		if (fgets(headbuf, sizeof headbuf, stdin) == NULL) {
d134 1
a134 5
		if (headbuf[1] == 'D' && headbuf[2] == 't') {
			if (typeflag) {
				printf("%-60s	NEW\n", pathname);
				return;
			}
a135 1
		}
d142 1
a142 1
		if (fgets(linbuf, sizeof linbuf, stdin) == NULL)
a153 2
	if (!tocrc && !intro)
		printf("%s\t", headbuf);
d156 1
a156 1
		if (fgets(headbuf, sizeof headbuf, stdin) == NULL)
d165 1
a165 1
			strcat(linbuf, " ");
d168 15
a182 1
		strcat(linbuf, headbuf);
d191 4
d196 1
a196 1
		if (fgets(linbuf, sizeof linbuf, stdin) == NULL)
a205 2
	if (!tocrc && !intro)
		printf(".TH%s\t", &headbuf[3]);
d208 1
a208 1
		if (fgets(headbuf, sizeof headbuf, stdin) == NULL)
d215 1
a215 1
			strcat(linbuf, " ");
d224 1
a224 1
			strcat(linbuf, headbuf);
d243 1
d246 1
d248 8
a255 2
			if (headbuf[1] == 'N' && headbuf[2] == 'd')
				strcat(linbuf, "\\- ");
d259 1
a259 1
			strcat(linbuf, &headbuf[4]);
d361 1
a361 1
	(void)fprintf(stderr, "usage: getNAME [-it] file ...\n");
@


1.3
log
@r?index -> strr?chr
@
text
@d1 2
d4 2
a5 2
 * Copyright (c) 1980 The Regents of the University of California.
 * All rights reserved.
d37 3
a39 3
char copyright[] =
"@@(#) Copyright (c) 1980 The Regents of the University of California.\n\
 All rights reserved.\n";
d43 5
a47 2
/*static char sccsid[] = "from: @@(#)getNAME.c	5.4 (Berkeley) 1/20/91";*/
static char rcsid[] = "$Id: getNAME.c,v 1.2 1997/01/15 23:40:59 millert Exp $";
d57 1
d62 8
d71 1
d74 1
a74 1
	char **argv;
d79 1
a79 1
	while ((ch = getopt(argc, argv, "it")) != -1)
d87 3
d105 3
a107 2
getfrom(name)
	char *name;
d110 1
d114 2
a115 2
	if (freopen(name, "r", stdin) == 0) {
		perror(name);
d118 4
d123 3
a125 1
		if (fgets(headbuf, sizeof headbuf, stdin) == NULL)
d127 1
d130 2
a131 3
		if (headbuf[1] == 'T' && headbuf[2] == 'H')
			break;
		if (headbuf[1] == 't' && headbuf[2] == 'h')
d133 11
d158 1
a158 1
	if (!intro)
d160 1
d162 1
a162 1
		if (fgets(linbuf, sizeof linbuf, stdin) == NULL)
d164 2
a165 2
		if (linbuf[0] == '.') {
			if (linbuf[1] == 'S' && linbuf[2] == 'H')
d167 1
a167 1
			if (linbuf[1] == 's' && linbuf[2] == 'h')
d170 17
a186 3
		trimln(linbuf);
		if (intro) {
			split(linbuf, name);
d188 15
d205 1
a205 1
			printf(" ");
d207 36
a242 1
		printf("%s", linbuf);
d244 4
a247 1
	printf("\n");
d250 1
d261 1
d285 1
d318 1
d340 1
@


1.2
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: getNAME.c,v 1.1.1.1 1995/10/18 08:43:16 deraadt Exp $";
d184 1
a184 1
	cp = index(line, '-');
d194 1
a194 1
		cp = index(dp, ',');
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: getNAME.c,v 1.2 1993/08/01 18:30:33 mycroft Exp $";
d64 1
a64 1
	while ((ch = getopt(argc, argv, "it")) != EOF)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
