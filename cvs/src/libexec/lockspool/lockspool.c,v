head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.16.0.26
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.18
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.22
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.20
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.16
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.14
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.10
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.6
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.2
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2015.11.24.00.19.29;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	wEGKvKFkQLWpsaLe;

1.17
date	2015.10.13.15.14.26;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	JAxhLTCvqTAyLd5L;

1.16
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.10.01.20.32.44;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2008.10.01.20.26.28;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.31.00.37.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.02.16.23.26;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.13.02.33.09;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.10.00.04.28;	author david;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.05.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.03.23.39.03;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.30;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.05.18.53.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.04.22.19.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.18.21.37.38;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.17.19.22.20;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.09.27.20.23.02;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.08.15.21.02.23;	author millert;	state Exp;
branches;
next	;


desc
@@


1.18
log
@missing pledge "getpw"
@
text
@/*	$OpenBSD: lockspool.c,v 1.17 2015/10/13 15:14:26 deraadt Exp $	*/

/*
 * Copyright (c) 1998 Theo de Raadt <deraadt@@theos.com>
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <signal.h>
#include <pwd.h>
#include <syslog.h>
#include <unistd.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <poll.h>
#include <err.h>

#include "mail.local.h"

void unhold(int);
void usage(void);

extern char *__progname;

int
main(int argc, char *argv[])
{
	struct passwd *pw;
	struct pollfd pfd;
	ssize_t nread;
	char *from, c;
	int holdfd;

	if (pledge("stdio rpath wpath getpw cpath fattr", NULL) == -1)
		err(1, "pledge");

	openlog(__progname, LOG_PERROR, LOG_MAIL);

	if (argc != 1 && argc != 2)
		usage();
	if (argc == 2 && getuid() != 0)
		merr(FATAL, "you must be root to lock someone else's spool");

	signal(SIGTERM, unhold);
	signal(SIGINT, unhold);
	signal(SIGHUP, unhold);
	signal(SIGPIPE, unhold);

	if (argc == 2)
		pw = getpwnam(argv[1]);
	else
		pw = getpwuid(getuid());
	if (pw == NULL)
		exit (1);
	from = pw->pw_name;

	holdfd = getlock(from, pw);
	if (holdfd == -1) {
		write(STDOUT_FILENO, "0\n", 2);
		exit (1);
	}
	write(STDOUT_FILENO, "1\n", 2);

	/* wait for the other end of the pipe to close, then release the lock */
	pfd.fd = STDIN_FILENO;
	pfd.events = POLLIN;
	do {
		if (poll(&pfd, 1, INFTIM) == -1) {
			if (errno != EINTR)
				break;
		}
		do {
			nread = read(STDIN_FILENO, &c, 1);
		} while (nread == 1 || (nread == -1 && errno == EINTR));
	} while (nread == -1 && errno == EAGAIN);
	rellock();
	exit (0);
}

/*ARGSUSED*/
void
unhold(int signo)
{

	rellock();
	_exit(0);
}

void
usage(void)
{

	merr(FATAL, "usage: %s [username]", __progname);
}
@


1.17
log
@pledge "stdio rpath wpath cpath fattr"; fattr due to locking code borrowed
from mail.local
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.16 2009/10/27 23:59:31 deraadt Exp $	*/
d55 1
a55 1
	if (pledge("stdio rpath wpath cpath fattr", NULL) == -1)
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.15 2008/10/01 20:32:44 millert Exp $	*/
d37 2
d54 3
@


1.15
log
@Use poll() to determine when stdin is readable and throw away input
until we hit EOF.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.13 2006/03/31 00:37:26 deraadt Exp $	*/
a27 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.13 2006/03/31 00:37:26 deraadt Exp $";
#endif /* not lint */
@


1.14
log
@Use the real uid instead of getlogin() to determine the identity
of the invoking user.  OK deraadt@@
@
text
@d40 1
d52 2
d84 12
a95 2
	while (read(STDIN_FILENO, &c, 1) == -1 && errno == EINTR)
		;
@


1.13
log
@ARGSUSED for signal handlers
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.12 2006/01/02 16:23:26 millert Exp $	*/
d30 1
a30 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.12 2006/01/02 16:23:26 millert Exp $";
d67 1
a67 1
		from = argv[1];
a68 7
		from = getlogin();

	if (from) {
		pw = getpwnam(from);
		if (pw == NULL)
			exit (1);
	} else {
d70 3
a72 5
		if (pw)
			from = pw->pw_name;
		else
			exit (1);
	}
@


1.12
log
@#include <signal.h>, not <sys/signal.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.11 2005/04/13 02:33:09 deraadt Exp $	*/
d30 1
a30 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.11 2005/04/13 02:33:09 deraadt Exp $";
d96 1
@


1.11
log
@use STD{IN,OUT,ERR}_FILENO
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.10 2003/07/10 00:04:28 david Exp $	*/
d30 1
a30 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.10 2003/07/10 00:04:28 david Exp $";
d33 1
a33 1
#include <sys/signal.h>
@


1.10
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.9 2003/06/03 02:05:13 millert Exp $	*/
d30 1
a30 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.9 2003/06/03 02:05:13 millert Exp $";
d90 1
a90 1
	while (read(0, &c, 1) == -1 && errno == EINTR)
@


1.9
log
@Remove promotion clause; OK w/ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.8 2002/07/03 23:39:03 deraadt Exp $	*/
d30 1
a30 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.8 2002/07/03 23:39:03 deraadt Exp $";
d39 1
@


1.8
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.7 2002/02/16 21:27:30 millert Exp $	*/
a15 2
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d30 1
a30 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.7 2002/02/16 21:27:30 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.6 2001/09/05 18:53:26 millert Exp $	*/
d32 1
a32 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.6 2001/09/05 18:53:26 millert Exp $";
d49 1
a49 3
main(argc, argv)
	int argc;
	char **argv;
d98 1
a98 2
unhold(sig)
	int sig;
d106 1
a106 1
usage()
@


1.6
log
@Add SIGPIPE to the list of signals we catch and unlock/exit on.
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.5 2001/09/04 22:19:23 millert Exp $	*/
d32 1
a32 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.5 2001/09/04 22:19:23 millert Exp $";
d43 2
a44 2
void unhold __P((int));
void usage __P((void));
@


1.5
log
@Use merr() not err() since due to function name change in mail.local/locking.c
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.4 2001/08/18 21:37:38 deraadt Exp $	*/
d32 1
a32 1
static const char rcsid[] = "$OpenBSD: lockspool.c,v 1.4 2001/08/18 21:37:38 deraadt Exp $";
d67 1
@


1.4
log
@err() -> merr(), and reorder some bugs noted by giannici@@neomedia.it; millert helped
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.3 2001/01/17 19:22:20 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: lockspool.c,v 1.3 2001/01/17 19:22:20 deraadt Exp $";
d62 1
a62 1
		err(1, "you must be root to lock someone else's spool");
d111 1
a111 1
	err(1, "usage: %s [username]", __progname);
@


1.3
log
@use _exit() in signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.2 1998/09/27 20:23:02 millert Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: lockspool.c,v 1.2 1998/09/27 20:23:02 millert Exp $";
d111 1
a111 1
	err(FATAL, "usage: %s [username]", __progname);
@


1.2
log
@superuser may now specify another user's spool to lock.
@
text
@d1 1
a1 1
/*	$OpenBSD: lockspool.c,v 1.1 1998/08/15 21:02:23 millert Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: lockspool.c,v 1.1 1998/08/15 21:02:23 millert Exp $";
d104 1
a104 1
	exit(0);
@


1.1
log
@Move the spool locking functionality of "mail.local -H" into its own
program so we can take the setuid bit off of mail.local.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: mail.local.c,v 1.18 1998/05/18 09:58:03 deraadt Exp $";
d59 1
a59 1
	if (argc != 1)
d61 2
d68 5
a72 1
	from = getlogin();
d111 1
a111 1
	err(FATAL, "usage: %s", __progname);
@

