head	1.17;
access;
symbols
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.12.0.6
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.4
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.8.0.10
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.8
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2005.05.25.05.35.22;	author deraadt;	state dead;
branches;
next	1.16;

1.16
date	2003.06.02.19.38.25;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.14.17.41.55;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.12.07.23.08.23;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.12.07.23.01.44;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.29.21.30.55;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.23.19.44.32;	author hin;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.25.10.25.22;	author hin;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.16.19.00.19;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.07.28.20.18.19;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	98.07.23.17.55.50;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.05.08.19.37.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.03.25.18.43.44;	author art;	state Exp;
branches;
next	1.4;

1.4
date	98.03.12.04.53.10;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.07.14.01.40.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.03.28.23.21.56;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@bye bye
@
text
@/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ext.h	8.2 (Berkeley) 12/15/93
 */

/* $KTH: ext.h,v 1.22 2001/04/24 23:12:11 assar Exp $ */

#ifndef __EXT_H__
#define __EXT_H__

#include <arpa/telnet.h>

/*
 * Telnet server variable declarations
 */
extern char	options[256];
extern char	do_dont_resp[256];
extern char	will_wont_resp[256];
extern int	flowmode;	/* current flow control state */
extern int	restartany;	/* restart output on any character state */
#ifdef DIAGNOSTICS
extern int	diagnostic;	/* telnet diagnostic capabilities */
#endif /* DIAGNOSTICS */
extern int	require_otp;
#ifdef AUTHENTICATION
extern int	auth_level;
#endif
extern char *new_login;

extern slcfun	slctab[NSLC + 1];	/* slc mapping table */

extern char	terminaltype[41];

/*
 * I/O data buffers, pointers, and counters.
 */
extern char	ptyobuf[BUFSIZ+NETSLOP], *pfrontp, *pbackp;

extern char	netibuf[BUFSIZ], *netip;

extern char	netobuf[BUFSIZ+NETSLOP], *nfrontp, *nbackp;
extern char	*neturg;		/* one past last bye of urgent data */

extern int	pcc, ncc;

extern int	ourpty, net;
extern char	*line;
extern int	SYNCHing;		/* we are in TELNET SYNCH mode */

int telnet_net_write (unsigned char *str, int len);
void net_encrypt (void);
int telnet_spin (void);
char *telnet_getenv (const char *val);
char *telnet_gets (char *prompt, char *result, int length, int echo);
void get_slc_defaults (void);
void telrcv (void);
void send_do (int option, int init);
void willoption (int option);
void send_dont (int option, int init);
void wontoption (int option);
void send_will (int option, int init);
void dooption (int option);
void send_wont (int option, int init);
void dontoption (int option);
void suboption (void);
void doclientstat (void);
void send_status (void);
void init_termbuf (void);
void set_termbuf (void);
int spcset (int func, cc_t *valp, cc_t **valpp);
void set_utid (void);
int getpty (int *ptynum);
int tty_isecho (void);
int tty_flowmode (void);
int tty_restartany (void);
void tty_setecho (int on);
int tty_israw (void);
void tty_binaryin (int on);
void tty_binaryout (int on);
int tty_isbinaryin (void);
int tty_isbinaryout (void);
int tty_issofttab (void);
void tty_setsofttab (int on);
int tty_islitecho (void);
void tty_setlitecho (int on);
int tty_iscrnl (void);
void tty_tspeed (int val);
void tty_rspeed (int val);
void getptyslave (void);
int cleanopen (char *line);
void startslave (const char *host, const char *, int autologin, char *autoname);
void init_env (void);
void start_login (const char *host, int autologin, char *name);
void cleanup (int sig);
int main (int argc, char **argv);
int getterminaltype (char *name, size_t);
void _gettermname (void);
int terminaltypeok (char *s);
void my_telnet (int f, int p, const char*, const char *, int, char*);
void interrupt (void);
void sendbrk (void);
void sendsusp (void);
void recv_ayt (void);
void doeof (void);
void flowstat (void);
void clientstat (int code, int parm1, int parm2);
int ttloop (void);
int stilloob (int s);
void ptyflush (void);
char *nextitem (char *current);
void netclear (void);
void netflush (void);
void writenet (unsigned char *ptr, int len);
void fatal (int f, char *msg);
void fatalperror (int f, const char *msg);
void fatalperror_errno (int f, const char *msg, int error);
void edithost (char *pat, char *host);
void putstr (char *s);
void putchr (int cc);
void putf (char *cp, char *where);
void printoption (char *fmt, int option);
void printsub (int direction, unsigned char *pointer, int length);
void printdata (char *tag, char *ptr, int cnt);
int login_tty(int t);

#ifdef ENCRYPTION
extern void	(*encrypt_output) (unsigned char *, int);
extern int	(*decrypt_input) (int);
extern char	*nclearto;
#endif


/*
 * The following are some clocks used to decide how to interpret
 * the relationship between various variables.
 */

struct clocks_t{
    int
	system,			/* what the current time is */
	echotoggle,		/* last time user entered echo character */
	modenegotiated,		/* last time operating mode negotiated */
	didnetreceive,		/* last time we read data from network */
	ttypesubopt,		/* ttype subopt is received */
	tspeedsubopt,		/* tspeed subopt is received */
	environsubopt,		/* environ subopt is received */
	oenvironsubopt,		/* old environ subopt is received */
	xdisplocsubopt,		/* xdisploc subopt is received */
	baseline,		/* time started to do timed action */
	gotDM;			/* when did we last see a data mark */
};
extern struct clocks_t clocks;

extern int log_unauth;
extern int no_warn;

#ifdef STREAMSPTY
extern int really_stream;
#endif

#ifndef USE_IM
# ifdef CRAY
#  define USE_IM "Cray UNICOS (%h) (%t)"
# endif
# ifdef _AIX
#  define USE_IM "%s %v.%r (%h) (%t)"
# endif
# ifndef USE_IM
#  define USE_IM "%s %r (%h) (%t)"
# endif
#endif

#define DEFAULT_IM "\r\n\r\n" USE_IM "\r\n\r\n\r\n"

#endif /* __EXT_H__ */
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@@


1.15
log
@Change terminalname from a pointer to an array.  Why people hide
the actual storage array as a static inside a function is beyond
me.  By exposing the real array we can use sizeof on it for strlcpy.
deraadt@@ OK
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@Backout unrelated changes in last commit
@
text
@d62 1
a62 1
extern char	*terminaltype;
@


1.13
log
@Kill '-a otp' flag.  Our login(5) doesn't support this option and on OpenBSD
you should use login.conf(5) for this kind of thing.  Closes PR 2967.
@
text
@d54 1
d121 1
a121 1
void startslave (const char *host, int channel[2]);
d129 1
a129 1
void my_telnet (int f, int p, const char *, const char *, int, char *, char *, FILE *);
@


1.12
log
@Add back gettytab reading but use cget* instead of the obsolescent gtget*
@
text
@a53 1
extern int	require_otp;
d120 1
a120 1
void startslave (const char *host, const char *, int autologin, char *autoname);
d128 1
a128 1
void my_telnet (int f, int p, const char*, const char *, int, char*);
@


1.11
log
@Replace our telnetd with the one from heimdal-0.3f, with the following changes:
- obvious buildsystem tweakes
- our way to filter out bad environment variables
@
text
@d58 1
a58 1
extern const char *new_login;
@


1.10
log
@KerberosV support from Heimdal.
@
text
@a0 3
/*	$OpenBSD: ext.h,v 1.9 2000/11/16 19:00:19 millert Exp $	*/
/*	$NetBSD: ext.h,v 1.6 1996/02/28 20:38:13 thorpej Exp $	*/

d33 1
a33 1
 *	from: @@(#)ext.h	8.2 (Berkeley) 12/15/93
d36 7
a48 10
extern int	linemode;	/* linemode on/off */
#ifdef	LINEMODE
extern int	uselinemode;	/* what linemode to use (on/off) */
extern int	editmode;	/* edit modes in use */
extern int	useeditmode;	/* edit modes to use */
extern int	alwayslinemode;	/* command line option */
# ifdef	KLUDGELINEMODE
extern int	lmodetype;	/* Client support for linemode */
# endif	/* KLUDGELINEMODE */
#endif	/* LINEMODE */
d54 2
a55 4
#ifdef BFTPDAEMON
extern int	bftpd;		/* behave as bftp daemon */
#endif /* BFTPDAEMON */
#if	defined(AUTHENTICATION)
d58 1
d62 1
a62 1
char	*terminaltype;
d72 1
a72 1
extern char	*neturg;		/* one past last byte of urgent data */
d76 2
a77 7
#if defined(CRAY2) && defined(UNICOS5)
extern int unpcc;  /* characters left unprocessed by CRAY-2 terminal routine */
extern char *unptyip;  /* pointer to remaining characters in buffer */
#endif

extern int	pty, net;
extern char	line[16];
d80 75
a154 2
#include <sys/cdefs.h>
#define P __P
d156 4
a159 29
extern void
	_termstat P((void)),
	add_slc P((int, int, int)),
	check_slc P((void)),
	change_slc P((int, int, int)),
	cleanup P((int)),
	clientstat P((int, int, int)),
	copy_termbuf P((char *, int)),
	deferslc P((void)),
	defer_terminit P((void)),
	do_opt_slc P((unsigned char *, int)),
	doeof P((void)),
	dooption P((int)),
	dontoption P((int)),
	edithost P((char *, char *)),
	fatal P((int, char *)),
	fatalperror P((int, char *)),
	get_slc_defaults P((void)),
	init_env P((void)),
	init_termbuf P((void)),
	interrupt P((void)),
	localstat P((void)),
	flowstat P((void)),
	netclear P((void)),
	netflush P((void)),
#ifdef DIAGNOSTICS
	printoption P((char *, int)),
	printdata P((char *, char *, int)),
	printsub P((int, unsigned char *, int)),
a160 68
	ptyflush P((void)),
	putchr P((int)),
	putf P((char *, char *)),
	recv_ayt P((void)),
	send_do P((int, int)),
	send_dont P((int, int)),
	send_slc P((void)),
	send_status P((void)),
	send_will P((int, int)),
	send_wont P((int, int)),
	sendbrk P((void)),
	sendsusp P((void)),
	set_termbuf P((void)),
	start_login P((char *, int, char *)),
	start_slc P((int)),
#if	defined(AUTHENTICATION)
	start_slave P((char *)),
#else
	start_slave P((char *, int, char *)),
#endif
	suboption P((void)),
	telrcv P((void)),
	ttloop P((void)),
	tty_binaryin P((int)),
	tty_binaryout P((int));

extern char*
	gtgetstr P((char  *, char **));

extern int
	end_slc P((unsigned char **)),
	gtgetent P((char *, char *)),
	getnpty P((void)),
#ifndef convex
	getpty P((int *)),
#endif
	login_tty P((int)),
	output_data P((const char *, ...)),
	spcset P((int, cc_t *, cc_t **)),
	stilloob P((int)),
	terminit P((void)),
	termstat P((void)),
	tty_flowmode P((void)),
	tty_restartany P((void)),
	tty_isbinaryin P((void)),
	tty_isbinaryout P((void)),
	tty_iscrnl P((void)),
	tty_isecho P((void)),
	tty_isediting P((void)),
	tty_islitecho P((void)),
	tty_isnewmap P((void)),
	tty_israw P((void)),
	tty_issofttab P((void)),
	tty_istrapsig P((void)),
	tty_linemode P((void));

extern void
	tty_rspeed P((int)),
	tty_setecho P((int)),
	tty_setedit P((int)),
	tty_setlinemode P((int)),
	tty_setlitecho P((int)),
	tty_setsig P((int)),
	tty_setsofttab P((int)),
	tty_tspeed P((int)),
	willoption P((int)),
	wontoption P((int)),
	writenet P((unsigned char *, int));
a161 5
#ifdef ENCRYPTION
extern void     (*encrypt_output) (unsigned char *, int);
extern int      (*decrypt_input) (int);
extern char     *nclearto;
#endif
d168 1
a168 1
extern struct {
d181 2
a182 1
} clocks;
d184 2
d187 2
a188 2
#if	defined(CRAY2) && defined(UNICOS5)
extern int	needtermstat;
d191 1
a191 1
#ifndef	DEFAULT_IM
d193 7
a199 11
#  define DEFAULT_IM	"\r\n\r\nCray UNICOS (%h) (%t)\r\n\r\r\n\r"
# else
#  ifdef sun
#   define DEFAULT_IM	"\r\n\r\nSunOS UNIX (%h) (%t)\r\n\r\r\n\r"
#  else
#   ifdef ultrix
#    define DEFAULT_IM	"\r\n\r\nULTRIX (%h) (%t)\r\n\r\r\n\r"
#   else
#    define DEFAULT_IM	"\r\n\r\n4.4 BSD UNIX (%h) (%t)\r\n\r\r\n\r"
#   endif
#  endif
d202 4
@


1.9
log
@Don't use sizeof() a pointer as a length parameter.  This change makes
'line' from sys_term.c from a char * into a char array.  There's no
need to explicitly initialize the contents to 0 since that happens
for globals anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext.h,v 1.8 1998/07/28 20:18:19 marc Exp $	*/
d123 1
a123 1
	printsub P((char, unsigned char *, int)),
@


1.8
log
@change getent/getstr to gtgettent/gtgetstr, the names now used

in libtelnet; add prototypes for both functions to ext.h
@
text
@d1 1
a1 1
/*	$OpenBSD: ext.h,v 1.7 1998/07/23 17:55:50 deraadt Exp $	*/
d89 1
a89 1
extern char	*line;
@


1.7
log
@delete SecurID hacks
@
text
@d1 1
a1 1
/*	$OpenBSD: ext.h,v 1.6 1998/05/08 19:37:45 deraadt Exp $	*/
d151 3
d156 1
a156 1
	getent P((char *, char *)),
@


1.6
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: ext.h,v 1.5 1998/03/25 18:43:44 art Exp $	*/
a62 3
#if	defined(SecurID)
extern int	require_SecurID;
#endif
@


1.5
log
@cleanup and please -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: ext.h,v 1.4 1998/03/12 04:53:10 art Exp $	*/
d82 1
a82 1
extern char	*neturg;		/* one past last bye of urgent data */
@


1.4
log
@Encryption from kth-krb 0.9.8 (only for those with kerberos)
@
text
@d1 1
a1 1
/*	$OpenBSD: ext.h,v 1.3 1997/07/14 01:40:38 millert Exp $	*/
d162 1
@


1.3
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: ext.h,v 1.2 1996/03/28 23:21:56 niklas Exp $	*/
d126 1
a126 1
	printsub P((int, unsigned char *, int)),
d193 5
a197 1

@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d156 1
@


1.1
log
@Initial revision
@
text
@d1 3
d36 1
a36 2
 *	from: @@(#)ext.h	8.1 (Berkeley) 6/4/93
 *	$Id: ext.h,v 1.4 1994/02/25 03:20:47 cgd Exp $
d95 2
a96 7
#ifndef	P
# ifdef	__STDC__
#  define P(x)	x
# else
#  define P(x)	()
# endif
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

