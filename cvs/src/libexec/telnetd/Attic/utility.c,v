head	1.21;
access;
symbols
	OPENBSD_3_7:1.20.0.8
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.6
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.4
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.19.0.4
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.18.0.4
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.15.0.12
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.15.0.10
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.15.0.8
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.15.0.6
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.15.0.4
	OPENBSD_2_5_BASE:1.15
	OPENBSD_2_4:1.15.0.2
	OPENBSD_2_4_BASE:1.15
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2005.05.25.05.35.22;	author deraadt;	state dead;
branches;
next	1.20;

1.20
date	2003.06.02.19.38.25;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.06.09.00.41.26;	author hin;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.02.14.16.02;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.23.19.44.33;	author hin;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.11.15.18.53;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	98.07.10.08.06.24;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	98.05.08.19.43.44;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	98.05.08.19.32.35;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	98.04.25.04.43.05;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.03.25.18.43.50;	author art;	state Exp;
branches;
next	1.10;

1.10
date	98.03.12.04.53.17;	author art;	state Exp;
branches;
next	1.9;

1.9
date	98.02.16.04.57.55;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	97.07.23.20.36.36;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.07.14.01.40.39;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.12.23.13.10.10;	author robin;	state Exp;
branches;
next	1.5;

1.5
date	96.12.06.15.33.31;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.12.06.15.26.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.09.27.02.48.52;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.28.23.22.06;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@bye bye
@
text
@/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#define PRINTOPTIONS
#include "telnetd.h"

/* RCSID("$KTH: utility.c,v 1.25 2001/05/17 00:34:42 assar Exp $"); */

/*
 * utility functions performing io related tasks
 */

/*
 * ttloop
 *
 * A small subroutine to flush the network output buffer, get some
 * data from the network, and pass it through the telnet state
 * machine.  We also flush the pty input buffer (by dropping its data)
 * if it becomes too full.
 *
 * return 0 if OK or 1 if interrupted by a signal.
 */

int
ttloop(void)
{
    void netflush(void);
    
    DIAG(TD_REPORT, {
	output_data("td: ttloop\r\n");
    });
    if (nfrontp-nbackp)
	netflush();
    ncc = read(net, netibuf, sizeof netibuf);
    if (ncc < 0) {
	if (errno == EINTR)
	    return 1;
	syslog(LOG_INFO, "ttloop:  read: %m");
	exit(1);
    } else if (ncc == 0) {
	syslog(LOG_INFO, "ttloop:  peer died");
	exit(1);
    }
    DIAG(TD_REPORT, {
	output_data("td: ttloop read %d chars\r\n", ncc);
    });
    netip = netibuf;
    telrcv();			/* state machine */
    if (ncc > 0) {
	pfrontp = pbackp = ptyobuf;
	telrcv();
    }
    return 0;
}  /* end of ttloop */

/*
 * Check a descriptor to see if out of band data exists on it.
 */
int
stilloob(int s)
{
    static struct timeval timeout = { 0 };
    fd_set	excepts;
    int value;

    if (s >= FD_SETSIZE)
	fatal(ourpty, "fd too large");

    do {
	FD_ZERO(&excepts);
	FD_SET(s, &excepts);
	value = select(s+1, 0, 0, &excepts, &timeout);
    } while ((value == -1) && (errno == EINTR));

    if (value < 0) {
	fatalperror(ourpty, "select");
    }
    if (FD_ISSET(s, &excepts)) {
	return 1;
    } else {
	return 0;
    }
}

void
ptyflush(void)
{
    int n;

    if ((n = pfrontp - pbackp) > 0) {
	DIAG((TD_REPORT | TD_PTYDATA), { 
	    output_data("td: ptyflush %d chars\r\n", n);
	});
	DIAG(TD_PTYDATA, printdata("pd", pbackp, n));
	n = write(ourpty, pbackp, n);
    }
    if (n < 0) {
	if (errno == EWOULDBLOCK || errno == EINTR)
	    return;
	cleanup(0);
    }
    pbackp += n;
    if (pbackp == pfrontp)
	pbackp = pfrontp = ptyobuf;
}

/*
 * nextitem()
 *
 *	Return the address of the next "item" in the TELNET data
 * stream.  This will be the address of the next character if
 * the current address is a user data character, or it will
 * be the address of the character following the TELNET command
 * if the current address is a TELNET IAC ("I Am a Command")
 * character.
 */
char *
nextitem(char *current)
{
    if ((*current&0xff) != IAC) {
	return current+1;
    }
    switch (*(current+1)&0xff) {
    case DO:
    case DONT:
    case WILL:
    case WONT:
	return current+3;
    case SB:{
	/* loop forever looking for the SE */
	char *look = current+2;

	for (;;) {
	    if ((*look++&0xff) == IAC) {
		if ((*look++&0xff) == SE) {
		    return look;
		}
	    }
	}
    }
    default:
	return current+2;
    }
}


/*
 * netclear()
 *
 *	We are about to do a TELNET SYNCH operation.  Clear
 * the path to the network.
 *
 *	Things are a bit tricky since we may have sent the first
 * byte or so of a previous TELNET command into the network.
 * So, we have to scan the network buffer from the beginning
 * until we are up to where we want to be.
 *
 *	A side effect of what we do, just to keep things
 * simple, is to clear the urgent data pointer.  The principal
 * caller should be setting the urgent data pointer AFTER calling
 * us in any case.
 */
void
netclear(void)
{
    char *thisitem, *next;
    char *good;
#define	wewant(p)	((nfrontp > p) && ((*p&0xff) == IAC) && \
			 ((*(p+1)&0xff) != EC) && ((*(p+1)&0xff) != EL))

#ifdef ENCRYPTION
	thisitem = nclearto > netobuf ? nclearto : netobuf;
#else
	thisitem = netobuf;
#endif

	while ((next = nextitem(thisitem)) <= nbackp) {
	    thisitem = next;
	}

	/* Now, thisitem is first before/at boundary. */

#ifdef ENCRYPTION
	good = nclearto > netobuf ? nclearto : netobuf;
#else
	good = netobuf;	/* where the good bytes go */
#endif

	while (nfrontp > thisitem) {
	    if (wewant(thisitem)) {
		int length;

		next = thisitem;
		do {
		    next = nextitem(next);
		} while (wewant(next) && (nfrontp > next));
		length = next-thisitem;
		memmove(good, thisitem, length);
		good += length;
		thisitem = next;
	    } else {
		thisitem = nextitem(thisitem);
	    }
	}

	nbackp = netobuf;
	nfrontp = good;		/* next byte to be sent */
	neturg = 0;
}  /* end of netclear */

/*
 *  netflush
 *		Send as much data as possible to the network,
 *	handling requests for urgent data.
 */
void
netflush(void)
{
    int n;
    extern int not42;

    if ((n = nfrontp - nbackp) > 0) {
	DIAG(TD_REPORT,
	     { n += output_data("td: netflush %d chars\r\n", n);
	     });
#ifdef ENCRYPTION
	if (encrypt_output) {
	    char *s = nclearto ? nclearto : nbackp;
	    if (nfrontp - s > 0) {
		(*encrypt_output)((unsigned char *)s, nfrontp-s);
		nclearto = nfrontp;
	    }
	}
#endif
	/*
	 * if no urgent data, or if the other side appears to be an
	 * old 4.2 client (and thus unable to survive TCP urgent data),
	 * write the entire buffer in non-OOB mode.
	 */
#if 1 /* remove this to make it work between solaris 2.6 and linux */
	if ((neturg == 0) || (not42 == 0)) {
#endif
	    n = write(net, nbackp, n);	/* normal write */
#if 1 /* remove this to make it work between solaris 2.6 and linux */
	} else {
	    n = neturg - nbackp;
	    /*
	     * In 4.2 (and 4.3) systems, there is some question about
	     * what byte in a sendOOB operation is the "OOB" data.
	     * To make ourselves compatible, we only send ONE byte
	     * out of band, the one WE THINK should be OOB (though
	     * we really have more the TCP philosophy of urgent data
	     * rather than the Unix philosophy of OOB data).
	     */
	    if (n > 1) {
		n = send(net, nbackp, n-1, 0);	/* send URGENT all by itself */
	    } else {
		n = send(net, nbackp, n, MSG_OOB);	/* URGENT data */
	    }
	}
#endif
    }
    if (n < 0) {
	if (errno == EWOULDBLOCK || errno == EINTR)
	    return;
	cleanup(0);
    }
    nbackp += n;
#ifdef ENCRYPTION
    if (nbackp > nclearto)
	nclearto = 0;
#endif
    if (nbackp >= neturg) {
	neturg = 0;
    }
    if (nbackp == nfrontp) {
	nbackp = nfrontp = netobuf;
#ifdef ENCRYPTION
	nclearto = 0;
#endif
    }
    return;
}


/*
 * writenet
 *
 * Just a handy little function to write a bit of raw data to the net.
 * It will force a transmit of the buffer if necessary
 *
 * arguments
 *    ptr - A pointer to a character string to write
 *    len - How many bytes to write
 */
void
writenet(unsigned char *ptr, int len)
{
    /* flush buffer if no room for new data) */
    while ((&netobuf[BUFSIZ] - nfrontp) < len) {
	/* if this fails, don't worry, buffer is a little big */
	netflush();
    }

    memmove(nfrontp, ptr, len);
    nfrontp += len;
}


/*
 * miscellaneous functions doing a variety of little jobs follow ...
 */


void fatal(int f, char *msg)
{
    char buf[BUFSIZ];

    snprintf(buf, sizeof(buf), "telnetd: %s.\r\n", msg);
#ifdef ENCRYPTION
    if (encrypt_output) {
	/*
	 * Better turn off encryption first....
	 * Hope it flushes...
	 */
	encrypt_send_end();
	netflush();
    }
#endif
    write(f, buf, (int)strlen(buf));
    sleep(1);	/*XXX*/
    exit(1);
}

void
fatalperror_errno(int f, const char *msg, int error)
{
    char buf[BUFSIZ];
    
    snprintf(buf, sizeof(buf), "%s: %s", msg, strerror(error));
    fatal(f, buf);
}

void
fatalperror(int f, const char *msg)
{
    fatalperror_errno(f, msg, errno);
}

char editedhost[32];

void edithost(char *pat, char *host)
{
    char *res = editedhost;

    if (!pat)
	pat = "";
    while (*pat) {
	switch (*pat) {

	case '#':
	    if (*host)
		host++;
	    break;

	case '@@':
	    if (*host)
		*res++ = *host++;
	    break;

	default:
	    *res++ = *pat;
	    break;
	}
	if (res == &editedhost[sizeof editedhost - 1]) {
	    *res = '\0';
	    return;
	}
	pat++;
    }
    if (*host)
	strlcpy (res, host,
			 sizeof editedhost - (res - editedhost));
    else
	*res = '\0';
    editedhost[sizeof editedhost - 1] = '\0';
}

static char *putlocation;

void
putstr(char *s)
{

    while (*s)
	putchr(*s++);
}

void
putchr(int cc)
{
    *putlocation++ = cc;
}

/*
 * This is split on two lines so that SCCS will not see the M
 * between two % signs and expand it...
 */
static char fmtstr[] = { "%l:%M" "%P on %A, %d %B %Y" };

void putf(char *cp, char *where)
{
#ifdef HAVE_UNAME
    struct utsname name;
#endif
    char *slash;
    time_t t;
    char db[100];

    /* if we don't have uname, set these to sensible values */
    char *sysname = "Unix", 
	*machine = "", 
	*release = "",
	*version = ""; 

#ifdef HAVE_UNAME
    uname(&name);
    sysname=name.sysname;
    machine=name.machine;
    release=name.release;
    version=name.version;
#endif

    putlocation = where;

    while (*cp) {
	if (*cp != '%') {
	    putchr(*cp++);
	    continue;
	}
	switch (*++cp) {

	case 't':
#ifdef	STREAMSPTY
	    /* names are like /dev/pts/2 -- we want pts/2 */
	    slash = strchr(line+1, '/');
#else
	    slash = strrchr(line, '/');
#endif
	    if (slash == (char *) 0)
		putstr(line);
	    else
		putstr(&slash[1]);
	    break;

	case 'h':
	    putstr(editedhost);
	    break;

	case 's':
	    putstr(sysname);
	    break;

	case 'm':
	    putstr(machine);
	    break;

	case 'r':
	    putstr(release);
	    break;

	case 'v':
	    putstr(version);
	    break;

	case 'd':
	    time(&t);
	    strftime(db, sizeof(db), fmtstr, localtime(&t));
	    putstr(db);
	    break;

	case '%':
	    putchr('%');
	    break;
	}
	cp++;
    }
}

#ifdef DIAGNOSTICS
/*
 * Print telnet options and commands in plain text, if possible.
 */
void
printoption(char *fmt, int option)
{
    if (TELOPT_OK(option))
	output_data("%s %s\r\n",
		    fmt,
		    TELOPT(option));
    else if (TELCMD_OK(option))
	output_data("%s %s\r\n",
		    fmt,
		    TELCMD(option));
    else
	output_data("%s %d\r\n",
		    fmt,
		    option);
    return;
}

void
printsub(int direction, unsigned char *pointer, int length)
        		          	/* '<' or '>' */
                 	         	/* where suboption data sits */
       			       		/* length of suboption data */
{
    int i = 0;
#ifdef AUTHENTICATION
    unsigned char buf[512];
#endif

    if (!(diagnostic & TD_OPTIONS))
	return;

    if (direction) {
	output_data("td: %s suboption ",
		    direction == '<' ? "recv" : "send");
	if (length >= 3) {
	    int j;

	    i = pointer[length-2];
	    j = pointer[length-1];

	    if (i != IAC || j != SE) {
		output_data("(terminated by ");
		if (TELOPT_OK(i))
		    output_data("%s ",
				TELOPT(i));
		else if (TELCMD_OK(i))
		    output_data("%s ",
				TELCMD(i));
		else
		    output_data("%d ",
				i);
		if (TELOPT_OK(j))
		    output_data("%s",
				TELOPT(j));
		else if (TELCMD_OK(j))
		    output_data("%s",
				TELCMD(j));
		else
		    output_data("%d",
				j);
		output_data(", not IAC SE!) ");
	    }
	}
	length -= 2;
    }
    if (length < 1) {
	output_data("(Empty suboption??\?)");
	return;
    }
    switch (pointer[0]) {
    case TELOPT_TTYPE:
	output_data("TERMINAL-TYPE ");
	switch (pointer[1]) {
	case TELQUAL_IS:
	    output_data("IS \"%.*s\"",
			length-2,
			(char *)pointer+2);
	    break;
	case TELQUAL_SEND:
	    output_data("SEND");
	    break;
	default:
	    output_data("- unknown qualifier %d (0x%x).",
			pointer[1], pointer[1]);
	}
	break;
    case TELOPT_TSPEED:
	output_data("TERMINAL-SPEED");
	if (length < 2) {
	    output_data(" (empty suboption??\?)");
	    break;
	}
	switch (pointer[1]) {
	case TELQUAL_IS:
	    output_data(" IS %.*s", length-2, (char *)pointer+2);
	    break;
	default:
	    if (pointer[1] == 1)
		output_data(" SEND");
	    else
		output_data(" %d (unknown)", pointer[1]);
	    for (i = 2; i < length; i++) {
		output_data(" ?%d?", pointer[i]);
	    }
	    break;
	}
	break;

    case TELOPT_LFLOW:
	output_data("TOGGLE-FLOW-CONTROL");
	if (length < 2) {
	    output_data(" (empty suboption??\?)");
	    break;
	}
	switch (pointer[1]) {
	case LFLOW_OFF:
	    output_data(" OFF");
	    break;
	case LFLOW_ON:
	    output_data(" ON");
	    break;
	case LFLOW_RESTART_ANY:
	    output_data(" RESTART-ANY");
	    break;
	case LFLOW_RESTART_XON:
	    output_data(" RESTART-XON");
	    break;
	default:
	    output_data(" %d (unknown)",
			pointer[1]);
	}
	for (i = 2; i < length; i++) {
	    output_data(" ?%d?",
			pointer[i]);
	}
	break;

    case TELOPT_NAWS:
	output_data("NAWS");
	if (length < 2) {
	    output_data(" (empty suboption??\?)");
	    break;
	}
	if (length == 2) {
	    output_data(" ?%d?",
			pointer[1]);
	    break;
	}
	output_data(" %u %u(%u)",
		    pointer[1],
		    pointer[2],
		    (((unsigned int)pointer[1])<<8) + pointer[2]);
	if (length == 4) {
	    output_data(" ?%d?",
			pointer[3]);
	    break;
	}
	output_data(" %u %u(%u)",
		    pointer[3],
		    pointer[4],
		    (((unsigned int)pointer[3])<<8) + pointer[4]);
	for (i = 5; i < length; i++) {
	    output_data(" ?%d?",
			pointer[i]);
	}
	break;

    case TELOPT_LINEMODE:
	output_data("LINEMODE ");
	if (length < 2) {
	    output_data(" (empty suboption??\?)");
	    break;
	}
	switch (pointer[1]) {
	case WILL:
	    output_data("WILL ");
	    goto common;
	case WONT:
	    output_data("WONT ");
	    goto common;
	case DO:
	    output_data("DO ");
	    goto common;
	case DONT:
	    output_data("DONT ");
	common:
	    if (length < 3) {
		output_data("(no option??\?)");
		break;
	    }
	    switch (pointer[2]) {
	    case LM_FORWARDMASK:
		output_data("Forward Mask");
		for (i = 3; i < length; i++) {
		    output_data(" %x", pointer[i]);
		}
		break;
	    default:
		output_data("%d (unknown)",
			    pointer[2]);
		for (i = 3; i < length; i++) {
		    output_data(" %d",
				pointer[i]);
		}
		break;
	    }
	    break;

	case LM_SLC:
	    output_data("SLC");
	    for (i = 2; i < length - 2; i += 3) {
		if (SLC_NAME_OK(pointer[i+SLC_FUNC]))
		    output_data(" %s",
				SLC_NAME(pointer[i+SLC_FUNC]));
		else
		    output_data(" %d",
				pointer[i+SLC_FUNC]);
		switch (pointer[i+SLC_FLAGS]&SLC_LEVELBITS) {
		case SLC_NOSUPPORT:
		    output_data(" NOSUPPORT");
		    break;
		case SLC_CANTCHANGE:
		    output_data(" CANTCHANGE");
		    break;
		case SLC_VARIABLE:
		    output_data(" VARIABLE");
		    break;
		case SLC_DEFAULT:
		    output_data(" DEFAULT");
		    break;
		}
		output_data("%s%s%s",
			    pointer[i+SLC_FLAGS]&SLC_ACK ? "|ACK" : "",
			    pointer[i+SLC_FLAGS]&SLC_FLUSHIN ? "|FLUSHIN" : "",
			    pointer[i+SLC_FLAGS]&SLC_FLUSHOUT ? "|FLUSHOUT" : "");
		if (pointer[i+SLC_FLAGS]& ~(SLC_ACK|SLC_FLUSHIN|
					    SLC_FLUSHOUT| SLC_LEVELBITS)) {
		    output_data("(0x%x)",
				pointer[i+SLC_FLAGS]);
		}
		output_data(" %d;",
			    pointer[i+SLC_VALUE]);
		if ((pointer[i+SLC_VALUE] == IAC) &&
		    (pointer[i+SLC_VALUE+1] == IAC))
		    i++;
	    }
	    for (; i < length; i++) {
		output_data(" ?%d?",
			    pointer[i]);
	    }
	    break;

	case LM_MODE:
	    output_data("MODE ");
	    if (length < 3) {
		output_data("(no mode??\?)");
		break;
	    }
	    {
		char tbuf[32];
		snprintf(tbuf,
			 sizeof(tbuf),
			 "%s%s%s%s%s",
			 pointer[2]&MODE_EDIT ? "|EDIT" : "",
			 pointer[2]&MODE_TRAPSIG ? "|TRAPSIG" : "",
			 pointer[2]&MODE_SOFT_TAB ? "|SOFT_TAB" : "",
			 pointer[2]&MODE_LIT_ECHO ? "|LIT_ECHO" : "",
			 pointer[2]&MODE_ACK ? "|ACK" : "");
		output_data("%s",
			    tbuf[1] ? &tbuf[1] : "0");
	    }
	    if (pointer[2]&~(MODE_EDIT|MODE_TRAPSIG|MODE_ACK)) {
		output_data(" (0x%x)",
			    pointer[2]);
	    }
	    for (i = 3; i < length; i++) {
		output_data(" ?0x%x?",
			 pointer[i]);
	    }
	    break;
	default:
	    output_data("%d (unknown)",
			pointer[1]);
	    for (i = 2; i < length; i++) {
		output_data(" %d", pointer[i]);
	    }
	}
	break;

    case TELOPT_STATUS: {
	char *cp;
	int j, k;

	output_data("STATUS");

	switch (pointer[1]) {
	default:
	    if (pointer[1] == TELQUAL_SEND)
		output_data(" SEND");
	    else
		output_data(" %d (unknown)",
			    pointer[1]);
	    for (i = 2; i < length; i++) {
		output_data(" ?%d?",
			    pointer[i]);
	    }
	    break;
	case TELQUAL_IS:
	    output_data(" IS\r\n");

	    for (i = 2; i < length; i++) {
		switch(pointer[i]) {
		case DO:	cp = "DO"; goto common2;
		case DONT:	cp = "DONT"; goto common2;
		case WILL:	cp = "WILL"; goto common2;
		case WONT:	cp = "WONT"; goto common2;
		common2:
		i++;
		if (TELOPT_OK(pointer[i]))
		    output_data(" %s %s",
				cp,
				TELOPT(pointer[i]));
		else
		    output_data(" %s %d",
				cp,
				pointer[i]);

		output_data("\r\n");
		break;

		case SB:
		    output_data(" SB ");
		    i++;
		    j = k = i;
		    while (j < length) {
			if (pointer[j] == SE) {
			    if (j+1 == length)
				break;
			    if (pointer[j+1] == SE)
				j++;
			    else
				break;
			}
			pointer[k++] = pointer[j++];
		    }
		    printsub(0, &pointer[i], k - i);
		    if (i < length) {
			output_data(" SE");
			i = j;
		    } else
			i = j - 1;

		    output_data("\r\n");

		    break;

		default:
		    output_data(" %d",
				pointer[i]);
		    break;
		}
	    }
	    break;
	}
	break;
    }

    case TELOPT_XDISPLOC:
	output_data("X-DISPLAY-LOCATION ");
	switch (pointer[1]) {
	case TELQUAL_IS:
	    output_data("IS \"%.*s\"",
			length-2,
			(char *)pointer+2);
	    break;
	case TELQUAL_SEND:
	    output_data("SEND");
	    break;
	default:
	    output_data("- unknown qualifier %d (0x%x).",
			pointer[1], pointer[1]);
	}
	break;

    case TELOPT_NEW_ENVIRON:
	output_data("NEW-ENVIRON ");
	goto env_common1;
    case TELOPT_OLD_ENVIRON:
	output_data("OLD-ENVIRON");
    env_common1:
	switch (pointer[1]) {
	case TELQUAL_IS:
	    output_data("IS ");
	    goto env_common;
	case TELQUAL_SEND:
	    output_data("SEND ");
	    goto env_common;
	case TELQUAL_INFO:
	    output_data("INFO ");
	env_common:
	    {
		int noquote = 2;
		for (i = 2; i < length; i++ ) {
		    switch (pointer[i]) {
		    case NEW_ENV_VAR:
			output_data("\" VAR " + noquote);
			noquote = 2;
			break;

		    case NEW_ENV_VALUE:
			output_data("\" VALUE " + noquote);
			noquote = 2;
			break;

		    case ENV_ESC:
			output_data("\" ESC " + noquote);
			noquote = 2;
			break;

		    case ENV_USERVAR:
			output_data("\" USERVAR " + noquote);
			noquote = 2;
			break;

		    default:
			if (isprint(pointer[i]) && pointer[i] != '"') {
			    if (noquote) {
				output_data ("\"");
				noquote = 0;
			    }
			    output_data ("%c", pointer[i]);
			} else {
			    output_data("\" %03o " + noquote,
					pointer[i]);
			    noquote = 2;
			}
			break;
		    }
		}
		if (!noquote)
		    output_data ("\"");
		break;
	    }
	}
	break;

#ifdef AUTHENTICATION
    case TELOPT_AUTHENTICATION:
	output_data("AUTHENTICATION");

	if (length < 2) {
	    output_data(" (empty suboption??\?)");
	    break;
	}
	switch (pointer[1]) {
	case TELQUAL_REPLY:
	case TELQUAL_IS:
	    output_data(" %s ",
			(pointer[1] == TELQUAL_IS) ?
			"IS" : "REPLY");
	    if (AUTHTYPE_NAME_OK(pointer[2]))
		output_data("%s ",
			    AUTHTYPE_NAME(pointer[2]));
	    else
		output_data("%d ",
			    pointer[2]);
	    if (length < 3) {
		output_data("(partial suboption??\?)");
		break;
	    }
	    output_data("%s|%s",
			((pointer[3] & AUTH_WHO_MASK) == AUTH_WHO_CLIENT) ?
			"CLIENT" : "SERVER",
			((pointer[3] & AUTH_HOW_MASK) == AUTH_HOW_MUTUAL) ?
			"MUTUAL" : "ONE-WAY");

	    auth_printsub(&pointer[1], length - 1, buf, sizeof(buf));
	    output_data("%s",
			buf);
	    break;

	case TELQUAL_SEND:
	    i = 2;
	    output_data(" SEND ");
	    while (i < length) {
		if (AUTHTYPE_NAME_OK(pointer[i]))
		    output_data("%s ",
				AUTHTYPE_NAME(pointer[i]));
		else
		    output_data("%d ",
				pointer[i]);
		if (++i >= length) {
		    output_data("(partial suboption??\?)");
		    break;
		}
		output_data("%s|%s ",
			    ((pointer[i] & AUTH_WHO_MASK) == AUTH_WHO_CLIENT) ?
			    "CLIENT" : "SERVER",
			    ((pointer[i] & AUTH_HOW_MASK) == AUTH_HOW_MUTUAL) ?
			    "MUTUAL" : "ONE-WAY");
		++i;
	    }
	    break;

	case TELQUAL_NAME:
	    i = 2;
	    output_data(" NAME \"%.*s\"",
			length - 2,
			pointer);
	    break;

	default:
	    for (i = 2; i < length; i++) {
		output_data(" ?%d?",
			    pointer[i]);
	    }
	    break;
	}
	break;
#endif

#ifdef ENCRYPTION
    case TELOPT_ENCRYPT:
	output_data("ENCRYPT");
	if (length < 2) {
	    output_data(" (empty suboption?)");
	    break;
	}
	switch (pointer[1]) {
	case ENCRYPT_START:
	    output_data(" START");
	    break;

	case ENCRYPT_END:
	    output_data(" END");
	    break;

	case ENCRYPT_REQSTART:
	    output_data(" REQUEST-START");
	    break;

	case ENCRYPT_REQEND:
	    output_data(" REQUEST-END");
	    break;

	case ENCRYPT_IS:
	case ENCRYPT_REPLY:
	    output_data(" %s ",
			(pointer[1] == ENCRYPT_IS) ?
			"IS" : "REPLY");
	    if (length < 3) {
		output_data(" (partial suboption?)");
		break;
	    }
	    if (ENCTYPE_NAME_OK(pointer[2]))
		output_data("%s ",
			    ENCTYPE_NAME(pointer[2]));
	    else
		output_data(" %d (unknown)",
			    pointer[2]);

	    encrypt_printsub(&pointer[1], length - 1, buf, sizeof(buf));
	    output_data("%s",
			buf);
	    break;

	case ENCRYPT_SUPPORT:
	    i = 2;
	    output_data(" SUPPORT ");
	    while (i < length) {
		if (ENCTYPE_NAME_OK(pointer[i]))
		    output_data("%s ",
				ENCTYPE_NAME(pointer[i]));
		else
		    output_data("%d ",
				pointer[i]);
		i++;
	    }
	    break;

	case ENCRYPT_ENC_KEYID:
	    output_data(" ENC_KEYID %d", pointer[1]);
	    goto encommon;

	case ENCRYPT_DEC_KEYID:
	    output_data(" DEC_KEYID %d", pointer[1]);
	    goto encommon;

	default:
	    output_data(" %d (unknown)", pointer[1]);
	encommon:
	    for (i = 2; i < length; i++) {
		output_data(" %d", pointer[i]);
	    }
	    break;
	}
	break;
#endif

    default:
	if (TELOPT_OK(pointer[0]))
	    output_data("%s (unknown)",
			TELOPT(pointer[0]));
	else
	    output_data("%d (unknown)",
			pointer[i]);
	for (i = 1; i < length; i++) {
	    output_data(" %d", pointer[i]);
	}
	break;
    }
    output_data("\r\n");
}

/*
 * Dump a data buffer in hex and ascii to the output data stream.
 */
void
printdata(char *tag, char *ptr, int cnt)
{
    int i;
    char xbuf[30];

    while (cnt) {
	/* flush net output buffer if no room for new data) */
	if ((&netobuf[BUFSIZ] - nfrontp) < 80) {
	    netflush();
	}

	/* add a line of output */
	output_data("%s: ", tag);
	for (i = 0; i < 20 && cnt; i++) {
	    output_data("%02x", *ptr);
	    if (isprint(*ptr)) {
		xbuf[i] = *ptr;
	    } else {
		xbuf[i] = '.';
	    }
	    if (i % 2) {
		output_data(" ");
	    }
	    cnt--;
	    ptr++;
	}
	xbuf[i] = '\0';
	output_data(" %s\r\n", xbuf);
    }
}
#endif /* DIAGNOSTICS */
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@@


1.19
log
@no \n for syslog()
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.18
log
@Allows building w/o kerb support
@
text
@d68 1
a68 1
	syslog(LOG_INFO, "ttloop:  read: %m\n");
d71 1
a71 1
	syslog(LOG_INFO, "ttloop:  peer died\n");
@


1.17
log
@Replace our telnetd with the one from heimdal-0.3f, with the following changes:
- obvious buildsystem tweakes
- our way to filter out bad environment variables
@
text
@d549 1
d551 1
@


1.16
log
@strncpy vs strlcpy, some strlen missuse.
some other related minor cleanups, and spaces.
millert@@ ok
@
text
@a0 3
/*	$OpenBSD: utility.c,v 1.15 1998/07/10 08:06:24 deraadt Exp $	*/
/*	$NetBSD: utility.c,v 1.9 1996/02/28 20:38:29 thorpej Exp $	*/

a33 10
#ifndef lint
#if 0
static char sccsid[] = "@@(#)utility.c	8.4 (Berkeley) 5/30/95";
static char rcsid[] = "$NetBSD: utility.c,v 1.9 1996/02/28 20:38:29 thorpej Exp $";
#else
static char rcsid[] = "$OpenBSD: utility.c,v 1.15 1998/07/10 08:06:24 deraadt Exp $";
#endif
#endif /* not lint */

#include <sys/utsname.h>
d36 2
a37 6
#if defined(AUTHENTICATION)
#include <libtelnet/auth.h>
#endif
#if defined(ENCRYPTION)
#include <libtelnet/encrypt.h>
#endif
d46 6
a51 4
 *	A small subroutine to flush the network output buffer, get some data
 * from the network, and pass it through the telnet state machine.  We
 * also flush the pty input buffer (by dropping its data) if it becomes
 * too full.
d54 2
a55 2
    void
ttloop()
d57 6
a62 5
    void netflush();

    DIAG(TD_REPORT, {sprintf(nfrontp, "td: ttloop\r\n");
		     nfrontp += strlen(nfrontp);});
    if (nfrontp-nbackp) {
a63 1
    }
d66 3
a68 1
	syslog(LOG_INFO, "ttloop:  read: %m");
d71 1
a71 1
	syslog(LOG_INFO, "ttloop:  peer died: %m");
d74 3
a76 2
    DIAG(TD_REPORT, {sprintf(nfrontp, "td: ttloop read %d chars\r\n", ncc);
		     nfrontp += strlen(nfrontp);});
d83 1
d89 2
a90 3
    int
stilloob(s)
    int	s;		/* socket number */
d92 1
a92 1
    struct timeval timeout;
d96 3
d102 1
a102 2
	memset((void *)&timeout, 0, sizeof timeout);
	value = select(s+1, (fd_set *)0, (fd_set *)0, &excepts, &timeout);
d106 1
a106 1
	fatalperror(pty, "select");
d115 2
a116 2
	void
ptyflush()
d118 1
a118 1
	int n;
d120 15
a134 15
	if ((n = pfrontp - pbackp) > 0) {
		DIAG((TD_REPORT | TD_PTYDATA),
			{ sprintf(nfrontp, "td: ptyflush %d chars\r\n", n);
			  nfrontp += strlen(nfrontp); });
		DIAG(TD_PTYDATA, printdata("pd", pbackp, n));
		n = write(pty, pbackp, n);
	}
	if (n < 0) {
		if (errno == EWOULDBLOCK || errno == EINTR)
			return;
		cleanup(0);
	}
	pbackp += n;
	if (pbackp == pfrontp)
		pbackp = pfrontp = ptyobuf;
d147 2
a148 3
    char *
nextitem(current)
    char	*current;
d159 8
a166 9
    case SB:		/* loop forever looking for the SE */
	{
	    register char *look = current+2;

	    for (;;) {
		if ((*look++&0xff) == IAC) {
		    if ((*look++&0xff) == SE) {
			return look;
		    }
d170 1
d174 1
a174 1
}  /* end of nextitem */
d193 2
a194 2
    void
netclear()
d196 1
a196 1
    register char *thisitem, *next;
d199 2
a200 1
				((*(p+1)&0xff) != EC) && ((*(p+1)&0xff) != EL))
d202 1
a202 1
    thisitem = nclearto > netobuf ? nclearto : netobuf;
d204 1
a204 1
    thisitem = netobuf;
d207 3
a209 3
    while ((next = nextitem(thisitem)) <= nbackp) {
	thisitem = next;
    }
d211 1
a211 1
    /* Now, thisitem is first before/at boundary. */
d214 1
a214 1
    good = nclearto > netobuf ? nclearto : netobuf;
d216 1
a216 1
    good = netobuf;	/* where the good bytes go */
d219 15
a233 14
    while (nfrontp > thisitem) {
	if (wewant(thisitem)) {
	    int length;

	    next = thisitem;
	    do {
		next = nextitem(next);
	    } while (wewant(next) && (nfrontp > next));
	    length = next-thisitem;
	    memmove((void *)good, (void *)thisitem, length);
	    good += length;
	    thisitem = next;
	} else {
	    thisitem = nextitem(thisitem);
a234 1
    }
d236 3
a238 3
    nbackp = netobuf;
    nfrontp = good;		/* next byte to be sent */
    neturg = 0;
d246 2
a247 2
    void
netflush()
d254 2
a255 4
	    { sprintf(nfrontp, "td: netflush %d chars\r\n", n);
	      n += strlen(nfrontp);  /* get count first */
	      nfrontp += strlen(nfrontp);  /* then move pointer */
	    });
d270 1
d272 1
d274 1
d291 1
d295 1
a295 1
		return;
d313 1
a313 1
}  /* end of netflush */
d326 2
a327 4
	void
writenet(ptr, len)
	register unsigned char *ptr;
	register int len;
d329 5
a333 5
	/* flush buffer if no room for new data) */
	if ((&netobuf[BUFSIZ] - nfrontp) < len) {
		/* if this fails, don't worry, buffer is a little big */
		netflush();
	}
d335 3
a337 4
	memmove((void *)nfrontp, (void *)ptr, len);
	nfrontp += len;

}  /* end of writenet */
d345 1
a345 4
	void
fatal(f, msg)
	int f;
	char *msg;
d347 1
a347 1
	char buf[BUFSIZ];
d349 1
a349 1
	snprintf(buf, sizeof(buf), "telnetd: %s.\r\n", msg);
d351 8
a358 8
	if (encrypt_output) {
		/*
		 * Better turn off encryption first....
		 * Hope it flushes...
		 */
		encrypt_send_end();
		netflush();
	}
d360 4
a363 1
	write(f, buf, (int)strlen(buf));
d365 7
a371 2
	sleep(1);	/*XXX*/
	exit(1);
d374 2
a375 4
	void
fatalperror(f, msg)
	int f;
	char *msg;
d377 1
a377 4
	char buf[BUFSIZ], *strerror();

	(void) snprintf(buf, sizeof buf, "%s: %s", msg, strerror(errno));
	fatal(f, buf);
d380 1
a380 1
char editedhost[48];
d382 1
a382 4
	void
edithost(pat, host)
	register char *pat;
	register char *host;
d384 1
a384 1
	register char *res = editedhost;
d386 9
a394 9
	if (!pat)
		pat = "";
	while (*pat) {
		switch (*pat) {

		case '#':
			if (*host)
				host++;
			break;
d396 4
a399 4
		case '@@':
			if (*host)
				*res++ = *host++;
			break;
d401 7
a407 9
		default:
			*res++ = *pat;
			break;
		}
		if (res == &editedhost[sizeof editedhost - 1]) {
			*res = '\0';
			return;
		}
		pat++;
d409 8
a416 4
	if (*host)
		strlcpy(res, host, sizeof editedhost - (res - editedhost));
	else
		*res = '\0';
d421 2
a422 3
	void
putstr(s)
	register char *s;
d425 2
a426 2
	while (*s)
		putchr(*s++);
d429 2
a430 3
	void
putchr(cc)
	int cc;
d432 1
a432 1
	*putlocation++ = cc;
d439 1
a439 2
static char fmtstr[] = { "%l:%M\
%p on %A, %d %B %Y" };
d441 1
a441 4
	void
putf(cp, where)
	register char *cp;
	char *where;
d443 19
a461 8
	char *slash;
	time_t t;
	char db[100];
	struct utsname utsinfo;
#ifdef	STREAMSPTY
	extern char *strchr();
#else
	extern char *strrchr();
d464 1
a464 1
	uname(&utsinfo);
d466 6
a471 1
	putlocation = where;
d473 1
a473 8
	while (*cp) {
		if (*cp != '%') {
			putchr(*cp++);
			continue;
		}
		switch (*++cp) {

		case 't':
d475 2
a476 2
			/* names are like /dev/pts/2 -- we want pts/2 */
			slash = strchr(line+1, '/');
d478 1
a478 1
			slash = strrchr(line, '/');
d480 5
a484 5
			if (slash == (char *) 0)
				putstr(line);
			else
				putstr(&slash[1]);
			break;
d486 3
a488 3
		case 'h':
			putstr(editedhost);
			break;
d490 3
a492 5
		case 'd':
			(void)time(&t);
			(void)strftime(db, sizeof(db), fmtstr, localtime(&t));
			putstr(db);
			break;
d494 3
a496 3
		case '%':
			putchr('%');
			break;
d498 3
a500 3
		case 's':
			putstr(utsinfo.sysname);
			break;
d502 3
a504 3
		case 'm':
			putstr(utsinfo.machine);
			break;
d506 5
a510 3
		case 'r':
			putstr(utsinfo.release);
			break;
d512 3
a514 5
		case 'v':
			puts(utsinfo.version);
			break;
		}
		cp++;
d516 2
d524 2
a525 4
	void
printoption(fmt, option)
	register char *fmt;
	register int option;
d527 13
a539 8
	if (TELOPT_OK(option))
		sprintf(nfrontp, "%s %s\r\n", fmt, TELOPT(option));
	else if (TELCMD_OK(option))
		sprintf(nfrontp, "%s %s\r\n", fmt, TELCMD(option));
	else
		sprintf(nfrontp, "%s %d\r\n", fmt, option);
	nfrontp += strlen(nfrontp);
	return;
d542 5
a546 5
    void
printsub(direction, pointer, length)
    char		direction;	/* '<' or '>' */
    unsigned char	*pointer;	/* where suboption data sits */
    int			length;		/* length of suboption data */
d548 2
a549 2
    register int i = 0;
    char buf[512];
d551 2
a552 2
	if (!(diagnostic & TD_OPTIONS))
		return;
d554 30
a583 30
	if (direction) {
	    sprintf(nfrontp, "td: %s suboption ",
					direction == '<' ? "recv" : "send");
	    nfrontp += strlen(nfrontp);
	    if (length >= 3) {
		register int j;

		i = pointer[length-2];
		j = pointer[length-1];

		if (i != IAC || j != SE) {
		    sprintf(nfrontp, "(terminated by ");
		    nfrontp += strlen(nfrontp);
		    if (TELOPT_OK(i))
			sprintf(nfrontp, "%s ", TELOPT(i));
		    else if (TELCMD_OK(i))
			sprintf(nfrontp, "%s ", TELCMD(i));
		    else
			sprintf(nfrontp, "%d ", i);
		    nfrontp += strlen(nfrontp);
		    if (TELOPT_OK(j))
			sprintf(nfrontp, "%s", TELOPT(j));
		    else if (TELCMD_OK(j))
			sprintf(nfrontp, "%s", TELCMD(j));
		    else
			sprintf(nfrontp, "%d", j);
		    nfrontp += strlen(nfrontp);
		    sprintf(nfrontp, ", not IAC SE!) ");
		    nfrontp += strlen(nfrontp);
		}
a584 1
	    length -= 2;
d586 28
a613 4
	if (length < 1) {
	    sprintf(nfrontp, "(Empty suboption??\?)");
	    nfrontp += strlen(nfrontp);
	    return;
d615 11
a625 25
	switch (pointer[0]) {
	case TELOPT_TTYPE:
	    sprintf(nfrontp, "TERMINAL-TYPE ");
	    nfrontp += strlen(nfrontp);
	    switch (pointer[1]) {
	    case TELQUAL_IS:
		sprintf(nfrontp, "IS \"%.*s\"", length-2, (char *)pointer+2);
		break;
	    case TELQUAL_SEND:
		sprintf(nfrontp, "SEND");
		break;
	    default:
		sprintf(nfrontp,
				"- unknown qualifier %d (0x%x).",
				pointer[1], pointer[1]);
	    }
	    nfrontp += strlen(nfrontp);
	    break;
	case TELOPT_TSPEED:
	    sprintf(nfrontp, "TERMINAL-SPEED");
	    nfrontp += strlen(nfrontp);
	    if (length < 2) {
		sprintf(nfrontp, " (empty suboption??\?)");
		nfrontp += strlen(nfrontp);
		break;
d627 92
a718 4
	    switch (pointer[1]) {
	    case TELQUAL_IS:
		sprintf(nfrontp, " IS %.*s", length-2, (char *)pointer+2);
		nfrontp += strlen(nfrontp);
d721 5
a725 8
		if (pointer[1] == 1)
		    sprintf(nfrontp, " SEND");
		else
		    sprintf(nfrontp, " %d (unknown)", pointer[1]);
		nfrontp += strlen(nfrontp);
		for (i = 2; i < length; i++) {
		    sprintf(nfrontp, " ?%d?", pointer[i]);
		    nfrontp += strlen(nfrontp);
d731 37
a767 19
	case TELOPT_LFLOW:
	    sprintf(nfrontp, "TOGGLE-FLOW-CONTROL");
	    nfrontp += strlen(nfrontp);
	    if (length < 2) {
		sprintf(nfrontp, " (empty suboption??\?)");
		nfrontp += strlen(nfrontp);
		break;
	    }
	    switch (pointer[1]) {
	    case LFLOW_OFF:
		sprintf(nfrontp, " OFF"); break;
	    case LFLOW_ON:
		sprintf(nfrontp, " ON"); break;
	    case LFLOW_RESTART_ANY:
		sprintf(nfrontp, " RESTART-ANY"); break;
	    case LFLOW_RESTART_XON:
		sprintf(nfrontp, " RESTART-XON"); break;
	    default:
		sprintf(nfrontp, " %d (unknown)", pointer[1]);
d769 3
a771 4
	    nfrontp += strlen(nfrontp);
	    for (i = 2; i < length; i++) {
		sprintf(nfrontp, " ?%d?", pointer[i]);
		nfrontp += strlen(nfrontp);
d775 18
a792 7
	case TELOPT_NAWS:
	    sprintf(nfrontp, "NAWS");
	    nfrontp += strlen(nfrontp);
	    if (length < 2) {
		sprintf(nfrontp, " (empty suboption??\?)");
		nfrontp += strlen(nfrontp);
		break;
d794 7
a800 4
	    if (length == 2) {
		sprintf(nfrontp, " ?%d?", pointer[1]);
		nfrontp += strlen(nfrontp);
		break;
d802 6
a807 8
	    sprintf(nfrontp, " %d %d (%d)",
		pointer[1], pointer[2],
		(int)((((unsigned int)pointer[1])<<8)|((unsigned int)pointer[2])));
	    nfrontp += strlen(nfrontp);
	    if (length == 4) {
		sprintf(nfrontp, " ?%d?", pointer[3]);
		nfrontp += strlen(nfrontp);
		break;
d809 2
a810 9
	    sprintf(nfrontp, " %d %d (%d)",
		pointer[3], pointer[4],
		(int)((((unsigned int)pointer[3])<<8)|((unsigned int)pointer[4])));
	    nfrontp += strlen(nfrontp);
	    for (i = 5; i < length; i++) {
		sprintf(nfrontp, " ?%d?", pointer[i]);
		nfrontp += strlen(nfrontp);
	    }
	    break;
d812 3
a814 46
	case TELOPT_LINEMODE:
	    sprintf(nfrontp, "LINEMODE ");
	    nfrontp += strlen(nfrontp);
	    if (length < 2) {
		sprintf(nfrontp, " (empty suboption??\?)");
		nfrontp += strlen(nfrontp);
		break;
	    }
	    switch (pointer[1]) {
	    case WILL:
		sprintf(nfrontp, "WILL ");
		goto common;
	    case WONT:
		sprintf(nfrontp, "WONT ");
		goto common;
	    case DO:
		sprintf(nfrontp, "DO ");
		goto common;
	    case DONT:
		sprintf(nfrontp, "DONT ");
	    common:
		nfrontp += strlen(nfrontp);
		if (length < 3) {
		    sprintf(nfrontp, "(no option??\?)");
		    nfrontp += strlen(nfrontp);
		    break;
		}
		switch (pointer[2]) {
		case LM_FORWARDMASK:
		    sprintf(nfrontp, "Forward Mask");
		    nfrontp += strlen(nfrontp);
		    for (i = 3; i < length; i++) {
			sprintf(nfrontp, " %x", pointer[i]);
			nfrontp += strlen(nfrontp);
		    }
		    break;
		default:
		    sprintf(nfrontp, "%d (unknown)", pointer[2]);
		    nfrontp += strlen(nfrontp);
		    for (i = 3; i < length; i++) {
			sprintf(nfrontp, " %d", pointer[i]);
			nfrontp += strlen(nfrontp);
		    }
		    break;
		}
		break;
d816 1
a816 41
	    case LM_SLC:
		sprintf(nfrontp, "SLC");
		nfrontp += strlen(nfrontp);
		for (i = 2; i < length - 2; i += 3) {
		    if (SLC_NAME_OK(pointer[i+SLC_FUNC]))
			sprintf(nfrontp, " %s", SLC_NAME(pointer[i+SLC_FUNC]));
		    else
			sprintf(nfrontp, " %d", pointer[i+SLC_FUNC]);
		    nfrontp += strlen(nfrontp);
		    switch (pointer[i+SLC_FLAGS]&SLC_LEVELBITS) {
		    case SLC_NOSUPPORT:
			sprintf(nfrontp, " NOSUPPORT"); break;
		    case SLC_CANTCHANGE:
			sprintf(nfrontp, " CANTCHANGE"); break;
		    case SLC_VARIABLE:
			sprintf(nfrontp, " VARIABLE"); break;
		    case SLC_DEFAULT:
			sprintf(nfrontp, " DEFAULT"); break;
		    }
		    nfrontp += strlen(nfrontp);
		    sprintf(nfrontp, "%s%s%s",
			pointer[i+SLC_FLAGS]&SLC_ACK ? "|ACK" : "",
			pointer[i+SLC_FLAGS]&SLC_FLUSHIN ? "|FLUSHIN" : "",
			pointer[i+SLC_FLAGS]&SLC_FLUSHOUT ? "|FLUSHOUT" : "");
		    nfrontp += strlen(nfrontp);
		    if (pointer[i+SLC_FLAGS]& ~(SLC_ACK|SLC_FLUSHIN|
						SLC_FLUSHOUT| SLC_LEVELBITS)) {
			sprintf(nfrontp, "(0x%x)", pointer[i+SLC_FLAGS]);
			nfrontp += strlen(nfrontp);
		    }
		    sprintf(nfrontp, " %d;", pointer[i+SLC_VALUE]);
		    nfrontp += strlen(nfrontp);
		    if ((pointer[i+SLC_VALUE] == IAC) &&
			(pointer[i+SLC_VALUE+1] == IAC))
				i++;
		}
		for (; i < length; i++) {
		    sprintf(nfrontp, " ?%d?", pointer[i]);
		    nfrontp += strlen(nfrontp);
		}
		break;
d818 10
a827 35
	    case LM_MODE:
		sprintf(nfrontp, "MODE ");
		nfrontp += strlen(nfrontp);
		if (length < 3) {
		    sprintf(nfrontp, "(no mode??\?)");
		    nfrontp += strlen(nfrontp);
		    break;
		}
		{
		    char tbuf[32];
		    sprintf(tbuf, "%s%s%s%s%s",
			pointer[2]&MODE_EDIT ? "|EDIT" : "",
			pointer[2]&MODE_TRAPSIG ? "|TRAPSIG" : "",
			pointer[2]&MODE_SOFT_TAB ? "|SOFT_TAB" : "",
			pointer[2]&MODE_LIT_ECHO ? "|LIT_ECHO" : "",
			pointer[2]&MODE_ACK ? "|ACK" : "");
		    sprintf(nfrontp, "%s", tbuf[1] ? &tbuf[1] : "0");
		    nfrontp += strlen(nfrontp);
		}
		if (pointer[2]&~(MODE_EDIT|MODE_TRAPSIG|MODE_ACK)) {
		    sprintf(nfrontp, " (0x%x)", pointer[2]);
		    nfrontp += strlen(nfrontp);
		}
		for (i = 3; i < length; i++) {
		    sprintf(nfrontp, " ?0x%x?", pointer[i]);
		    nfrontp += strlen(nfrontp);
		}
		break;
	    default:
		sprintf(nfrontp, "%d (unknown)", pointer[1]);
		nfrontp += strlen(nfrontp);
		for (i = 2; i < length; i++) {
		    sprintf(nfrontp, " %d", pointer[i]);
		    nfrontp += strlen(nfrontp);
		}
d830 2
d833 16
a848 6
	case TELOPT_STATUS: {
	    register char *cp;
	    register int j, k;

	    sprintf(nfrontp, "STATUS");
	    nfrontp += strlen(nfrontp);
d850 1
a850 11
	    switch (pointer[1]) {
	    default:
		if (pointer[1] == TELQUAL_SEND)
		    sprintf(nfrontp, " SEND");
		else
		    sprintf(nfrontp, " %d (unknown)", pointer[1]);
		nfrontp += strlen(nfrontp);
		for (i = 2; i < length; i++) {
		    sprintf(nfrontp, " ?%d?", pointer[i]);
		    nfrontp += strlen(nfrontp);
		}
a851 17
	    case TELQUAL_IS:
		sprintf(nfrontp, " IS\r\n");
		nfrontp += strlen(nfrontp);

		for (i = 2; i < length; i++) {
		    switch(pointer[i]) {
		    case DO:	cp = "DO"; goto common2;
		    case DONT:	cp = "DONT"; goto common2;
		    case WILL:	cp = "WILL"; goto common2;
		    case WONT:	cp = "WONT"; goto common2;
		    common2:
			i++;
			if (TELOPT_OK(pointer[i]))
			    sprintf(nfrontp, " %s %s", cp, TELOPT(pointer[i]));
			else
			    sprintf(nfrontp, " %s %d", cp, pointer[i]);
			nfrontp += strlen(nfrontp);
d853 12
a864 19
			sprintf(nfrontp, "\r\n");
			nfrontp += strlen(nfrontp);
			break;

		    case SB:
			sprintf(nfrontp, " SB ");
			nfrontp += strlen(nfrontp);
			i++;
			j = k = i;
			while (j < length) {
			    if (pointer[j] == SE) {
				if (j+1 == length)
				    break;
				if (pointer[j+1] == SE)
				    j++;
				else
				    break;
			    }
			    pointer[k++] = pointer[j++];
d866 8
a873 7
			printsub(0, &pointer[i], k - i);
			if (i < length) {
			    sprintf(nfrontp, " SE");
			    nfrontp += strlen(nfrontp);
			    i = j;
			} else
			    i = j - 1;
d875 1
a875 2
			sprintf(nfrontp, "\r\n");
			nfrontp += strlen(nfrontp);
d877 1
a877 1
			break;
d879 4
a882 5
		    default:
			sprintf(nfrontp, " %d", pointer[i]);
			nfrontp += strlen(nfrontp);
			break;
		    }
a883 1
		break;
d886 3
a888 1
	  }
d890 10
a899 15
	case TELOPT_XDISPLOC:
	    sprintf(nfrontp, "X-DISPLAY-LOCATION ");
	    nfrontp += strlen(nfrontp);
	    switch (pointer[1]) {
	    case TELQUAL_IS:
		sprintf(nfrontp, "IS \"%.*s\"", length-2, (char *)pointer+2);
		break;
	    case TELQUAL_SEND:
		sprintf(nfrontp, "SEND");
		break;
	    default:
		sprintf(nfrontp, "- unknown qualifier %d (0x%x).",
				pointer[1], pointer[1]);
	    }
	    nfrontp += strlen(nfrontp);
d901 5
d907 24
a930 27
	case TELOPT_NEW_ENVIRON:
	    sprintf(nfrontp, "NEW-ENVIRON ");
	    goto env_common1;
	case TELOPT_OLD_ENVIRON:
	    sprintf(nfrontp, "OLD-ENVIRON");
	env_common1:
	    nfrontp += strlen(nfrontp);
	    switch (pointer[1]) {
	    case TELQUAL_IS:
		sprintf(nfrontp, "IS ");
		goto env_common;
	    case TELQUAL_SEND:
		sprintf(nfrontp, "SEND ");
		goto env_common;
	    case TELQUAL_INFO:
		sprintf(nfrontp, "INFO ");
	    env_common:
		nfrontp += strlen(nfrontp);
		{
		    register int noquote = 2;
		    for (i = 2; i < length; i++ ) {
			switch (pointer[i]) {
			case NEW_ENV_VAR:
			    sprintf(nfrontp, "\" VAR " + noquote);
			    nfrontp += strlen(nfrontp);
			    noquote = 2;
			    break;
d932 4
a935 5
			case NEW_ENV_VALUE:
			    sprintf(nfrontp, "\" VALUE " + noquote);
			    nfrontp += strlen(nfrontp);
			    noquote = 2;
			    break;
d937 4
a940 5
			case ENV_ESC:
			    sprintf(nfrontp, "\" ESC " + noquote);
			    nfrontp += strlen(nfrontp);
			    noquote = 2;
			    break;
d942 4
a945 5
			case ENV_USERVAR:
			    sprintf(nfrontp, "\" USERVAR " + noquote);
			    nfrontp += strlen(nfrontp);
			    noquote = 2;
			    break;
d947 5
a951 12
			default:
			    if (isprint(pointer[i]) && pointer[i] != '"') {
				if (noquote) {
				    *nfrontp++ = '"';
				    noquote = 0;
				}
				*nfrontp++ = pointer[i];
			    } else {
				sprintf(nfrontp, "\" %03o " + noquote,
							pointer[i]);
				nfrontp += strlen(nfrontp);
				noquote = 2;
d953 5
a957 1
			    break;
d959 1
a960 3
		    if (!noquote)
			*nfrontp++ = '"';
		    break;
d962 3
d966 9
d976 15
a990 9

#if	defined(AUTHENTICATION)
	case TELOPT_AUTHENTICATION:
	    sprintf(nfrontp, "AUTHENTICATION");
	    nfrontp += strlen(nfrontp);

	    if (length < 2) {
		sprintf(nfrontp, " (empty suboption??\?)");
		nfrontp += strlen(nfrontp);
d993 1
a993 17
	    switch (pointer[1]) {
	    case TELQUAL_REPLY:
	    case TELQUAL_IS:
		sprintf(nfrontp, " %s ", (pointer[1] == TELQUAL_IS) ?
							"IS" : "REPLY");
		nfrontp += strlen(nfrontp);
		if (AUTHTYPE_NAME_OK(pointer[2]))
		    sprintf(nfrontp, "%s ", AUTHTYPE_NAME(pointer[2]));
		else
		    sprintf(nfrontp, "%d ", pointer[2]);
		nfrontp += strlen(nfrontp);
		if (length < 3) {
		    sprintf(nfrontp, "(partial suboption??\?)");
		    nfrontp += strlen(nfrontp);
		    break;
		}
		sprintf(nfrontp, "%s|%s",
a997 1
		nfrontp += strlen(nfrontp);
d999 4
a1002 4
		auth_printsub(&pointer[1], length - 1, buf, sizeof(buf));
		sprintf(nfrontp, "%s", buf);
		nfrontp += strlen(nfrontp);
		break;
d1004 13
a1016 22
	    case TELQUAL_SEND:
		i = 2;
		sprintf(nfrontp, " SEND ");
		nfrontp += strlen(nfrontp);
		while (i < length) {
		    if (AUTHTYPE_NAME_OK(pointer[i]))
			sprintf(nfrontp, "%s ", AUTHTYPE_NAME(pointer[i]));
		    else
			sprintf(nfrontp, "%d ", pointer[i]);
		    nfrontp += strlen(nfrontp);
		    if (++i >= length) {
			sprintf(nfrontp, "(partial suboption??\?)");
			nfrontp += strlen(nfrontp);
			break;
		    }
		    sprintf(nfrontp, "%s|%s ",
			((pointer[i] & AUTH_WHO_MASK) == AUTH_WHO_CLIENT) ?
							"CLIENT" : "SERVER",
			((pointer[i] & AUTH_HOW_MASK) == AUTH_HOW_MUTUAL) ?
							"MUTUAL" : "ONE-WAY");
		    nfrontp += strlen(nfrontp);
		    ++i;
d1018 8
a1025 1
		break;
d1027 6
a1032 8
	    case TELQUAL_NAME:
		i = 2;
		sprintf(nfrontp, " NAME \"");
		nfrontp += strlen(nfrontp);
		while (i < length)
		    *nfrontp += pointer[i++];
		*nfrontp += '"';
		break;
d1034 4
a1037 6
	    default:
		    for (i = 2; i < length; i++) {
			sprintf(nfrontp, " ?%d?", pointer[i]);
			nfrontp += strlen(nfrontp);
		    }
		    break;
d1040 2
d1045 30
a1074 4
	case TELOPT_ENCRYPT:
	    output_data("ENCRYPT");
	    if (length < 2) {
		output_data(" (empty suboption?)");
d1077 11
a1087 12
	    switch (pointer[1]) {
	    case ENCRYPT_START:
		output_data(" START");
		break;
		
	    case ENCRYPT_END:
		output_data(" END");
		break;
		
	    case ENCRYPT_REQSTART:
		output_data(" REQUEST-START");
		break;
d1089 5
a1093 14
	    case ENCRYPT_REQEND:
		output_data(" REQUEST-END");
		break;
		
	    case ENCRYPT_IS:
	    case ENCRYPT_REPLY:
		output_data(" %s ",
			    (pointer[1] == ENCRYPT_IS) ?
			    "IS" : "REPLY");
		if (length < 3) {
		    output_data(" (partial suboption?)");
		    break;
		}
		if (ENCTYPE_NAME_OK(pointer[2]))
d1095 1
a1095 1
				ENCTYPE_NAME(pointer[2]));
d1097 3
a1099 37
		    output_data(" %d (unknown)",
				pointer[2]);
		
		encrypt_printsub(&pointer[1], length - 1, buf, sizeof(buf));
		output_data("%s",
			    buf);
		break;
		
	    case ENCRYPT_SUPPORT:
		i = 2;
		output_data(" SUPPORT ");
		while (i < length) {
		    if (ENCTYPE_NAME_OK(pointer[i]))
			output_data("%s ",
				    ENCTYPE_NAME(pointer[i]));
		    else
			output_data("%d ",
				    pointer[i]);
		    i++;
		}
		break;
		
	    case ENCRYPT_ENC_KEYID:
		output_data(" ENC_KEYID %d", pointer[1]);
		goto encommon;
		
	    case ENCRYPT_DEC_KEYID:
		output_data(" DEC_KEYID %d", pointer[1]);
		goto encommon;
		
	    default:
		output_data(" %d (unknown)", pointer[1]);
	    encommon:
		for (i = 2; i < length; i++) {
               output_data(" %d", pointer[i]);
		}
		break;
d1102 8
a1109 1
#endif /* ENCRYPTION */
d1112 4
a1115 8
	    if (TELOPT_OK(pointer[0]))
		sprintf(nfrontp, "%s (unknown)", TELOPT(pointer[0]));
	    else
		sprintf(nfrontp, "%d (unknown)", pointer[i]);
	    nfrontp += strlen(nfrontp);
	    for (i = 1; i < length; i++) {
		sprintf(nfrontp, " %d", pointer[i]);
		nfrontp += strlen(nfrontp);
d1119 16
a1134 2
	sprintf(nfrontp, "\r\n");
	nfrontp += strlen(nfrontp);
d1140 2
a1141 5
	void
printdata(tag, ptr, cnt)
	register char *tag;
	register char *ptr;
	register int cnt;
d1143 2
a1144 2
	register int i;
	char xbuf[30];
d1146 5
a1150 5
	while (cnt) {
		/* flush net output buffer if no room for new data) */
		if ((&netobuf[BUFSIZ] - nfrontp) < 80) {
			netflush();
		}
d1152 14
a1165 21
		/* add a line of output */
		sprintf(nfrontp, "%s: ", tag);
		nfrontp += strlen(nfrontp);
		for (i = 0; i < 20 && cnt; i++) {
			sprintf(nfrontp, "%02x", *ptr);
			nfrontp += strlen(nfrontp);
			if (isprint(*ptr)) {
				xbuf[i] = *ptr;
			} else {
				xbuf[i] = '.';
			}
			if (i % 2) {
				*nfrontp = ' ';
				nfrontp++;
			}
			cnt--;
			ptr++;
		}
		xbuf[i] = '\0';
		sprintf(nfrontp, " %s\r\n", xbuf );
		nfrontp += strlen(nfrontp);
d1167 3
@


1.15
log
@do not syslog() with "\n"; skipped smtpd/named/ipmon; 12 minutes of dabbling
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.14 1998/05/08 19:43:44 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.14 1998/05/08 19:43:44 deraadt Exp $";
a398 1
	char *strncpy();
d426 1
a426 2
		(void) strncpy(res, host,
				sizeof editedhost - (res - editedhost) -1);
a428 1
	editedhost[sizeof editedhost - 1] = '\0';
@


1.14
log
@minor indent
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.13 1998/05/08 19:32:35 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.13 1998/05/08 19:32:35 deraadt Exp $";
d81 1
a81 1
	syslog(LOG_INFO, "ttloop:  read: %m\n");
d84 1
a84 1
	syslog(LOG_INFO, "ttloop:  peer died: %m\n");
@


1.13
log
@sprintf removals
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.12 1998/04/25 04:43:05 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.12 1998/04/25 04:43:05 millert Exp $";
d372 1
a372 1
		}
@


1.12
log
@Fix casts in args to mem*.  Boy am I anal.
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.11 1998/03/25 18:43:50 art Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.11 1998/03/25 18:43:50 art Exp $";
d387 1
a387 1
	(void) sprintf(buf, "%s: %s", msg, strerror(errno));
@


1.11
log
@cleanup and please -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.10 1998/03/12 04:53:17 art Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.10 1998/03/12 04:53:17 art Exp $";
d111 1
a111 1
	memset((char *)&timeout, 0, sizeof timeout);
d238 1
a238 1
	    memmove(good, thisitem, length);
d345 1
a345 1
	memmove(nfrontp, ptr, len);
@


1.10
log
@Encryption from kth-krb 0.9.8 (only for those with kerberos)
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.9 1998/02/16 04:57:55 jason Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.9 1998/02/16 04:57:55 jason Exp $";
d49 6
d557 1
a557 1
    register int i;
@


1.9
log
@fixes to compile against netbsd domestic libtelnet
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.8 1997/07/23 20:36:36 kstailey Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.8 1997/07/23 20:36:36 kstailey Exp $";
d205 3
a207 1

d209 1
d217 3
d221 1
d262 9
d301 4
d310 3
d357 13
a369 2
	(void) sprintf(buf, "telnetd: %s.\r\n", msg);
	(void) write(f, buf, (int)strlen(buf));
d1075 77
@


1.8
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.7 1997/07/14 01:40:39 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.7 1997/07/14 01:40:39 millert Exp $";
d518 1
@


1.7
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.6 1996/12/23 13:10:10 robin Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.6 1996/12/23 13:10:10 robin Exp $";
d486 1
a486 1
                        break;
@


1.6
log
@Remove redundant/incorrect switch case label: `def_case'
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.5 1996/12/06 15:33:31 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.5 1996/12/06 15:33:31 deraadt Exp $";
a517 1
    char buf[512];
@


1.5
log
@memset
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.4 1996/12/06 15:26:28 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.4 1996/12/06 15:26:28 deraadt Exp $";
a936 1
			def_case:
@


1.4
log
@please linux people (why am i doing this?? i need a life)
@
text
@d1 1
a1 1
/*	$OpenBSD: utility.c,v 1.2 1996/03/28 23:22:06 niklas Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: utility.c,v 1.2 1996/03/28 23:22:06 niklas Exp $";
d105 1
a105 1
	bzero(&timeout, sizeof timeout);
@


1.3
log
@permit 48 char hostname
@
text
@d98 1
a98 1
    static struct timeval timeout = { 0 };
d105 1
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD$";
d350 1
a350 1
char editedhost[32];
@


1.1
log
@Initial revision
@
text
@d1 3
d38 6
a43 2
/* from: static char sccsid[] = "@@(#)utility.c	8.2 (Berkeley) 12/15/93"; */
static char *rcsid = "$Id: utility.c,v 1.7 1994/06/05 14:27:12 cgd Exp $";
d224 1
a224 1
	    bcopy(thisitem, good, length);
d315 1
a315 1
	bcopy(ptr, nfrontp, len);
d346 1
a346 1
	(void) sprintf(buf, "%s: %s\r\n", msg, strerror(errno));
d416 1
a416 1
%P on %A, %d %B %Y" };
d428 1
a428 1
	extern char *index();
d430 1
a430 1
	extern char *rindex();
d447 1
a447 1
			slash = index(line+1, '/');
d449 1
a449 1
			slash = rindex(line, '/');
d519 1
a519 1
        if (!(diagnostic & TD_OPTIONS))
d710 1
a710 1
		
d860 1
a860 1
				
d963 1
a963 1
	
d1044 1
a1044 1
	        sprintf(nfrontp, "%s (unknown)", TELOPT(pointer[0]));
d1046 1
a1046 1
	        sprintf(nfrontp, "%d (unknown)", pointer[i]);
d1081 1
a1081 1
			nfrontp += strlen(nfrontp); 
d1087 1
a1087 1
			if (i % 2) { 
d1097 1
a1097 1
	} 
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

