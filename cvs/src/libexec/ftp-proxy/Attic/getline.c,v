head	1.18;
access;
symbols
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.16.0.2
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.18
date	2005.11.24.17.12.50;	author deraadt;	state dead;
branches;
next	1.17;

1.17
date	2005.08.17.07.55.24;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2004.09.16.04.50.51;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.28.01.04.57;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.02.19.38.24;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.26.19.29.45;	author couderc;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.19.18.19.10;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.19.01.29.03;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.19.01.27.56;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.09.01.03.12;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.23.10.22.14;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.07.18.45.32;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.06.02.11.47;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.06.01.28.59;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.03.19.53.07;	author dhartmei;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.28.19.35.04;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.19.13.43.09;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.04.11.12;	author beck;	state Exp;
branches;
next	;


desc
@@


1.18
log
@code is not being used; toss into Attic
@
text
@/*	$OpenBSD: getline.c,v 1.17 2005/08/17 07:55:24 espie Exp $ */

/*
 * Copyright (c) 1985, 1988 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *  @@(#)ftpcmd.y    5.24 (Berkeley) 2/25/91
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <arpa/telnet.h>

#include <errno.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sysexits.h>
#include <syslog.h>
#include <unistd.h>

#include "util.h"

int		refill_buffer(struct csiob *iobp);

/*
 * Refill the io buffer if we KNOW that data is available
 *
 * Returns 1 if any new data was obtained, 0 otherwise.
 */

int
refill_buffer(struct csiob *iobp)
{
	int rqlen, rlen;

	if (!(iobp->data_available))
		return(0);

	if (iobp->got_eof)
		return(0);

	/*
	 * The buffer has been entirely consumed if next_byte == io_buffer_len.
	 * Otherwise, there is some still-to-be-used data in io_buffer.
	 * Shuffle it to the start of the buffer.
	 * Note that next_byte will never exceed io_buffer_len.
	 * Also, note that we MUST use bcopy because the two regions could
	 * overlap (memcpy isn't defined to work properly with overlapping
	 * regions).
	 */
	if (iobp->next_byte < iobp->io_buffer_len) {
		int dst_ix = 0;
		int src_ix = iobp->next_byte;
		int amount = iobp->io_buffer_len - iobp->next_byte;

		bcopy(&iobp->io_buffer[src_ix], &iobp->io_buffer[dst_ix],
		    amount);
		iobp->io_buffer_len = amount;
	} else if (iobp->next_byte == iobp->io_buffer_len)
		iobp->io_buffer_len = 0;
	else {
		syslog(LOG_ERR, "next_byte(%d) > io_buffer_len(%d)",
		    iobp->next_byte, iobp->io_buffer_len);
		exit(EX_OSERR);
	}

	iobp->next_byte = 0;

	/* don't do tiny reads, grow first if we need to */
	rqlen = iobp->io_buffer_size - iobp->io_buffer_len;
	if (rqlen <= 128) {
		unsigned char *tmp;

		iobp->io_buffer_size += 128;
		tmp = realloc(iobp->io_buffer, iobp->io_buffer_size);
		if (tmp == NULL) {
			syslog(LOG_INFO, "Insufficient memory");
			exit(EX_UNAVAILABLE);
		}
		iobp->io_buffer = tmp;
		rqlen = iobp->io_buffer_size - iobp->io_buffer_len;
	}

	/*
	 * Always leave an unused byte at the end of the buffer
	 * because the debug output uses that byte from time to time
	 * to ensure that something that is being printed is \0 terminated.
	 */
	rqlen -= 1;

 doread:
	rlen = read(iobp->fd, &iobp->io_buffer[iobp->io_buffer_len], rqlen);
	iobp->data_available = 0;
	switch (rlen) {
	case -1:
		if (errno == EAGAIN || errno == EINTR)
			goto doread;
		if (errno != ECONNRESET) {
			syslog(LOG_INFO, "read() failed on socket from %s (%m)",
			    iobp->who);
			exit(EX_DATAERR);
		}
		/* fall through to EOF case */
	case 0:
		iobp->got_eof = 1;
		return(0);
		break;
	default:
		iobp->io_buffer_len += rlen;
		break;
	}
	return(1);
}

/*
 * telnet_getline - a hacked up version of fgets to ignore TELNET escape codes.
 *
 * This code is derived from the getline routine found in the UC Berkeley
 * ftpd code.
 *
 */

int
telnet_getline(struct csiob *iobp, struct csiob *telnet_passthrough)
{
	unsigned char ch;
	int ix;
	unsigned char tbuf[100];

	iobp->line_buffer[0] = '\0';

	/*
	 * If the buffer is empty then refill it right away.
	 */
	if (iobp->next_byte == iobp->io_buffer_len)
		if (!refill_buffer(iobp))
			return(0);

	/*
	 * Is there a telnet command in the buffer?
	 */
	ch = iobp->io_buffer[iobp->next_byte];
	if (ch == IAC) {
		/*
		 * Yes - buffer must have at least three bytes in it
		 */
		if (iobp->io_buffer_len - iobp->next_byte < 3) {
			if (!refill_buffer(iobp))
				return(0);
			if (iobp->io_buffer_len - iobp->next_byte < 3)
				return(0);
		}

		iobp->next_byte++;
		ch = iobp->io_buffer[iobp->next_byte++];

		switch (ch) {
		case WILL:
		case WONT:
		case DO:
		case DONT:
		case IP:
			tbuf[0] = IAC;
			tbuf[1] = ch;
			tbuf[2] = iobp->io_buffer[iobp->next_byte++];
			(void)send(telnet_passthrough->fd, tbuf, 3,
			    telnet_passthrough->send_oob_flags);
			break;
		case IAC:
			break;
		default:
			break;
		}
		return(1);
	} else {
		int clen;

		/*
		 * Is there a newline in the buffer?
		 */
		for (ix = iobp->next_byte; ix < iobp->io_buffer_len;
		    ix += 1) {
			if (iobp->io_buffer[ix] == '\n')
				break;
			if (iobp->io_buffer[ix] == '\0') {
				syslog(LOG_INFO,
				    "got NUL byte from %s - bye!",
				    iobp->who);
				exit(EX_DATAERR);
			}
		}

		if (ix == iobp->io_buffer_len) {
			if (!refill_buffer(iobp))
				return(0);
			/*
			 * Empty line returned
			 * will try again soon!
			 */
			return(1);
		}

		/*
		 * Expand the line buffer if it isn't big enough.  We
		 * use a fudge factor of 5 rather than trying to
		 * figure out exactly how to account for the '\0 \r\n' and
		 * such.  The correct fudge factor is 0, 1 or 2 but
		 * anything higher also works. We also grow it by a
		 * bunch to avoid having to do this often. Yes this is
		 * nasty.
		 */
		if (ix - iobp->next_byte > iobp->line_buffer_size - 5) {
			unsigned char *tmp;

			iobp->line_buffer_size = 256 + ix - iobp->next_byte;
			tmp = realloc(iobp->line_buffer,
			    iobp->line_buffer_size);
			if (tmp == NULL) {
				syslog(LOG_INFO, "Insufficient memory");
				exit(EX_UNAVAILABLE);
			}
			iobp->line_buffer = tmp;
		}

		/* +1 is for the newline */
		clen = (ix+1) - iobp->next_byte;
		memcpy(iobp->line_buffer, &iobp->io_buffer[iobp->next_byte],
		    clen);
		iobp->next_byte += clen;
		iobp->line_buffer[clen] = '\0';
		return(1);
	}
}
@


1.17
log
@let IAP/IP/IAC thru. This lets the server receive an ABORT command with
the attached urgent data. And so ftp ^C works.

okay beck@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.16 2004/09/16 04:50:51 deraadt Exp $ */
@


1.16
log
@more unsigned char
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.15 2003/06/28 01:04:57 deraadt Exp $ */
d189 1
@


1.15
log
@missing protos
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.14 2003/06/02 19:38:24 millert Exp $ */
d99 1
a99 1
		char *tmp;
d155 1
a155 1
	char tbuf[100];
d239 1
a239 1
			char *tmp;
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.13 2003/01/26 19:29:45 couderc Exp $ */
d49 2
@


1.13
log
@Removing leading spaces can result in a failure with multiline commands. Ok millert.
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.12 2002/12/19 18:19:10 deraadt Exp $ */
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by the University of
 *  California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.12
log
@various tweaks.  someone mailed in a huge diff that was so wrong in so
many ways, and i wasted 2 hours finding the gems in it...
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.10 2002/12/19 01:27:56 deraadt Exp $ */
a43 1
#include <ctype.h>
a254 4
		while (clen > 0 && isspace(iobp->io_buffer[iobp->next_byte])) {
			iobp->next_byte++;
			clen--;
		}
@


1.11
log
@accidental commit
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.9 2002/06/09 01:03:12 beck Exp $ */
d129 1
a129 1
			syslog(LOG_INFO, "read failed on socket from %s (%m)",
d216 1
a216 1
				    "got null byte from %s - bye!",
@


1.10
log
@missing .Pp
@
text
@d129 1
a129 1
			syslog(LOG_INFO, "read() failed on socket from %s (%m)",
d216 1
a216 1
				    "got NUL byte from %s - bye!",
@


1.9
log
@no newlines in syslog
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.8 2002/05/23 10:22:14 deraadt Exp $ */
d129 1
a129 1
			syslog(LOG_INFO, "read failed on socket from %s (%m)",
d216 1
a216 1
				    "got null byte from %s - bye!",
@


1.8
log
@KNF during an audit; found an improperly initialized sockaddr
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.7 2001/12/07 18:45:32 mpech Exp $ */
d92 1
a92 1
		syslog(LOG_ERR, "next_byte(%d) > io_buffer_len(%d)\n",
d216 1
a216 1
				    "got null byte from %s - bye!\n",
@


1.7
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.6 2001/12/06 02:11:47 beck Exp $ */
d65 2
a66 2
	
	if (!(iobp->data_available)) 
d68 1
a68 2
	
	
d71 1
a71 1
	
a80 1
	
d82 3
a84 5
		int dst_ix, src_ix;
		int amount;
		dst_ix = 0;
		src_ix = iobp->next_byte;
		amount = iobp->io_buffer_len - iobp->next_byte;
d96 1
a96 1
	
d98 1
a98 1
	
d102 1
a102 1
		char * tmp;
d110 1
a110 1
		iobp->io_buffer = tmp;		
d113 1
a113 1
	
a124 1
		
a133 1
		
a137 1
		
d140 1
a140 1
		
d159 1
a159 1
	
d161 1
a161 1
	
a164 1
	
d168 1
a168 1
	
a171 1
	
a173 1
		
a176 1
		
d183 1
a183 1
		
d186 1
a186 1
		
d195 1
a195 1
			(void)send(telnet_passthrough->fd,tbuf,3, 
a197 1
			
a199 1
			
a203 1
		
d206 1
a206 1
		
d210 1
a210 2
		
		for (ix = iobp->next_byte; ix < iobp->io_buffer_len; 
a219 1
			
d221 1
a221 1
		
d225 2
a226 2
			/* 
			 * Empty line returned 
d229 1
a229 1
			return(1);		
d231 1
a231 1
		
d239 1
a239 1
		 * nasty. 
a240 1
		
d242 1
a242 1
			char * tmp;
d245 1
a245 1
			tmp = realloc(iobp->line_buffer, 
d253 1
a253 1
		
a263 1
		
a264 1

a265 1
	
@


1.6
log
@comment typo, and $OpenBSD$ (thanks pval)
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d62 1
a62 1
refill_buffer(register struct csiob *iobp)
d84 2
a85 2
		register int dst_ix, src_ix;
		register int amount;
d161 1
a161 1
telnet_getline(register struct csiob *iobp, struct csiob *telnet_passthrough)
d164 1
a164 1
	register int ix;
@


1.5
log
@Fix realloc in getline so we exit on failure - in this context it's silly
to try to continue and hold on to the same memory if we can't get memory
to hold a control command. log and fail instead. (absurdity spotted by theo)
@
text
@d1 2
a157 1
 * thie 
@


1.4
log
@Ignore leading whitespace in commands. From Frank Denis. Closes PR 2226.
@
text
@d108 4
a111 2
		if (tmp == NULL) 
			return(0);
d155 2
d263 4
a266 2
			if (tmp == NULL)
				return(0);
@


1.3
log
@oh, some cleanups etc etc
@
text
@d42 1
d266 4
@


1.2
log
@1564 lines of cleanup
@
text
@a35 5
/*
 * RCS information:
 * $Id: getline.c,v 1.1 2001/08/19 04:11:12 beck Exp $
 */

d266 1
a266 1
		   clen);
@


1.1
log
@transparent ftp proxy, based on Obtuse Systems juniper stuff with much
modernizing and cleanup. still needs looking at.

Currently supports PORT PASV EPRT data connections with only a pf rdr to
capture the control connection. (I.E. you don't need ip forwarding
or other NAT stuff). Runs from inetd.

Supports all passive (EPSV PASV) when using -n flag, where the proxy
ignores passive mode data connections (and assumes nat will get them
through).

Todo yet:
	More audit
	IpV6
	Handle EPSV in proxy (with an rdr added then removed)
	Option to Daemonize and bind only to the loopback
	More Content/Login filtering, etc. etc. and more bloat
@
text
@d38 1
a38 1
 * $Id: telnet_getline.c,v 1.1.1.1 1998/12/19 07:46:25 danny Exp $
d98 2
a99 2
		syslog(LOG_ERR,"next_byte(%d) > io_buffer_len(%d)\n",
		    iobp->next_byte,iobp->io_buffer_len);
@

