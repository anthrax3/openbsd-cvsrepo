head	1.20;
access;
symbols
	OPENBSD_3_8:1.19.0.6
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.4
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.2
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.18.0.2
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.20
date	2005.11.24.17.12.51;	author deraadt;	state dead;
branches;
next	1.19;

1.19
date	2004.07.06.19.49.11;	author dhartmei;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.22.16.10.30;	author beck;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.22.21.53.40;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.28.01.04.57;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.27.12.47.03;	author tdeval;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.23.23.15.16;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2002.12.19.18.19.10;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.19.01.29.03;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.19.01.27.56;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.24.08.42.52;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.09.01.03.12;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.23.10.22.14;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.15.12.40.59;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.15.03.54.40;	author frantzen;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.05.20.40.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.05.12.42.31;	author dhartmei;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.28.19.35.04;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.19.13.43.09;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.04.11.12;	author beck;	state Exp;
branches;
next	;


desc
@@


1.20
log
@code is not being used; toss into Attic
@
text
@/*	$OpenBSD: util.c,v 1.19 2004/07/06 19:49:11 dhartmei Exp $ */

/*
 * Copyright (c) 1996-2001
 *	Obtuse Systems Corporation.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Obtuse Systems nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OBTUSE SYSTEMS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL OBTUSE
 * SYSTEMS CORPORATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <net/if.h>
#include <net/pfvar.h>

#include <arpa/inet.h>

#include <ctype.h>
#include <errno.h>
#include <netdb.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <sysexits.h>
#include <syslog.h>
#include <unistd.h>

#include "util.h"

extern int ReverseMode;

int Debug_Level;
int Use_Rdns;
in_addr_t Bind_Addr = INADDR_NONE;

void		debuglog(int debug_level, const char *fmt, ...);

void
debuglog(int debug_level, const char *fmt, ...)
{
	va_list ap;
	va_start(ap, fmt);

	if (Debug_Level >= debug_level)
		vsyslog(LOG_DEBUG, fmt, ap);
	va_end(ap);
}

int
get_proxy_env(int connected_fd, struct sockaddr_in *real_server_sa_ptr,
    struct sockaddr_in *client_sa_ptr, struct sockaddr_in *proxy_sa_ptr)
{
	struct pfioc_natlook natlook;
	socklen_t slen;
	int fd;

	slen = sizeof(*proxy_sa_ptr);
	if (getsockname(connected_fd, (struct sockaddr *)proxy_sa_ptr,
	    &slen) != 0) {
		syslog(LOG_ERR, "getsockname() failed (%m)");
		return(-1);
	}
	slen = sizeof(*client_sa_ptr);
	if (getpeername(connected_fd, (struct sockaddr *)client_sa_ptr,
	    &slen) != 0) {
		syslog(LOG_ERR, "getpeername() failed (%m)");
		return(-1);
	}

	if (ReverseMode)
		return(0);

	/*
	 * Build up the pf natlook structure.
	 * Just for IPv4 right now
	 */
	memset((void *)&natlook, 0, sizeof(natlook));
	natlook.af = AF_INET;
	natlook.saddr.addr32[0] = client_sa_ptr->sin_addr.s_addr;
	natlook.daddr.addr32[0] = proxy_sa_ptr->sin_addr.s_addr;
	natlook.proto = IPPROTO_TCP;
	natlook.sport = client_sa_ptr->sin_port;
	natlook.dport = proxy_sa_ptr->sin_port;
	natlook.direction = PF_OUT;

	/*
	 * Open the pf device and lookup the mapping pair to find
	 * the original address we were supposed to connect to.
	 */
	fd = open("/dev/pf", O_RDWR);
	if (fd == -1) {
		syslog(LOG_ERR, "cannot open /dev/pf (%m)");
		exit(EX_UNAVAILABLE);
	}

	if (ioctl(fd, DIOCNATLOOK, &natlook) == -1) {
		syslog(LOG_INFO,
		    "pf nat lookup failed %s:%hu (%m)",
		    inet_ntoa(client_sa_ptr->sin_addr),
		    ntohs(client_sa_ptr->sin_port));
		close(fd);
		return(-1);
	}
	close(fd);

	/*
	 * Now jam the original address and port back into the into
	 * destination sockaddr_in for the proxy to deal with.
	 */
	memset((void *)real_server_sa_ptr, 0, sizeof(struct sockaddr_in));
	real_server_sa_ptr->sin_port = natlook.rdport;
	real_server_sa_ptr->sin_addr.s_addr = natlook.rdaddr.addr32[0];
	real_server_sa_ptr->sin_len = sizeof(struct sockaddr_in);
	real_server_sa_ptr->sin_family = AF_INET;
	return(0);
}


/*
 * Transfer one unit of data across a pair of sockets
 *
 * A unit of data is as much as we get with a single read(2) call.
 */
int
xfer_data(const char *what_read,int from_fd, int to_fd, struct in_addr from,
    struct in_addr to)
{
	int rlen, offset, xerrno, mark, flags = 0;
	char tbuf[4096];

	/*
	 * Are we at the OOB mark?
	 */
	if (ioctl(from_fd, SIOCATMARK, &mark) < 0) {
		xerrno = errno;
		syslog(LOG_ERR, "cannot ioctl(SIOCATMARK) socket from %s (%m)",
		    what_read);
		errno = xerrno;
		return(-1);
	}
	if (mark)
		flags = MSG_OOB;	/* Yes - at the OOB mark */

snarf:
	rlen = recv(from_fd, tbuf, sizeof(tbuf), flags);
	if (rlen == -1 && flags == MSG_OOB && errno == EINVAL) {
		/* OOB didn't work */
		flags = 0;
		rlen = recv(from_fd, tbuf, sizeof(tbuf), flags);
	}
	if (rlen == 0) {
		debuglog(3, "EOF on read socket");
		return(0);
	} else if (rlen == -1) {
		if (errno == EAGAIN || errno == EINTR)
			goto snarf;
		xerrno = errno;
		syslog(LOG_ERR, "xfer_data (%s): failed (%m) with flags 0%o",
		    what_read, flags);
		errno = xerrno;
		return(-1);
	} else {
		offset = 0;
		debuglog(3, "got %d bytes from socket", rlen);

		while (offset < rlen) {
			int wlen;
		fling:
			wlen = send(to_fd, &tbuf[offset], rlen - offset,
			    flags);
			if (wlen == 0) {
				debuglog(3, "zero-length write");
				goto fling;
			} else if (wlen == -1) {
				if (errno == EAGAIN || errno == EINTR)
					goto fling;
				xerrno = errno;
				syslog(LOG_INFO, "write failed (%m)");
				errno = xerrno;
				return(-1);
			} else {
				debuglog(3, "wrote %d bytes to socket",wlen);
				offset += wlen;
			}
		}
		return(offset);
	}
}

/*
 * get_backchannel_socket gets us a socket bound somewhere in a
 * particular range of ports
 */
int
get_backchannel_socket(int type, int min_port, int max_port, int start_port,
    int direction, struct sockaddr_in *sap)
{
	int count;

	/*
	 * Make sure that direction is 'defined' and that min_port is not
	 * greater than max_port.
	 */
	if (direction != -1)
		direction = 1;

	/* by default we go up by one port until we find one */
	if (min_port > max_port) {
		errno = EINVAL;
		return(-1);
	}

	count = 1 + max_port - min_port;

	/*
	 * Pick a port we can bind to from within the range we want.
	 * If the caller specifies -1 as the starting port number then
	 * we pick one somewhere in the range to try.
	 * This is an optimization intended to speedup port selection and
	 * has NOTHING to do with security.
	 */
	if (start_port == -1)
		start_port = (arc4random() % count) + min_port;

	if (start_port < min_port || start_port > max_port) {
		errno = EINVAL;
		return(-1);
	}

	while (count-- > 0) {
		struct sockaddr_in sa;
		int one, fd;

		fd = socket(AF_INET, type, 0);

		bzero(&sa, sizeof sa);
		sa.sin_family = AF_INET;
		if (Bind_Addr == INADDR_NONE)
			if (sap == NULL)
				sa.sin_addr.s_addr = INADDR_ANY;
			else
				sa.sin_addr.s_addr = sap->sin_addr.s_addr;
		else
			sa.sin_addr.s_addr = Bind_Addr;

		/*
		 * Indicate that we want to reuse a port if it happens that the
		 * port in question was a listen port recently.
		 */
		one = 1;
		if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &one,
		    sizeof(one))  == -1)
			return(-1);

		sa.sin_port = htons(start_port);

		if (bind(fd, (struct sockaddr *)&sa, sizeof(sa)) == 0) {
			if (sap != NULL)
				*sap = sa;
			return(fd);
		}

		if (errno != EADDRINUSE)
			return(-1);

		/* if it's in use, try the next port */
		close(fd);

		start_port += direction;
		if (start_port < min_port)
			start_port = max_port;
		else if (start_port > max_port)
			start_port = min_port;
	}
	errno = EAGAIN;
	return(-1);
}
@


1.19
log
@The 'reverse ftp-proxy' mode adds a command line option -R to
ftp-proxy which proxies connection from external ftp clients to
an internal ftp server, supporting client passive mode (where
server listens on a random port for data connections, and the
client connects to the server for data connections).

This is the reverse mode to normal operation, where ftp-proxy
proxies connections from local clients to external servers,
supporting client active mode.

ok beck@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.18 2004/01/22 16:10:30 beck Exp $ */
@


1.18
log
@Add a -a address option to set the address which the proxy will use
to bind the local end of outgoing connections, and some man page
cleanup. Based on diff provided in pr 3538 by Karl O. Pinc <kop@@meme.com>
Closes pr 3538. ok dhartmei@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.17 2003/12/22 21:53:40 deraadt Exp $ */
d59 2
d80 1
a80 1
    struct sockaddr_in *client_sa_ptr)
d86 2
a87 2
	slen = sizeof(*real_server_sa_ptr);
	if (getsockname(connected_fd, (struct sockaddr *)real_server_sa_ptr,
d99 3
d109 1
a109 1
	natlook.daddr.addr32[0] = real_server_sa_ptr->sin_addr.s_addr;
d112 1
a112 1
	natlook.dport = real_server_sa_ptr->sin_port;
@


1.17
log
@use socklen_t; andrushock@@korovino.net
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.16 2003/06/28 01:04:57 deraadt Exp $ */
d61 1
d262 5
a266 2
		if (sap == NULL)
			sa.sin_addr.s_addr = INADDR_ANY;
d268 1
a268 1
			sa.sin_addr.s_addr = sap->sin_addr.s_addr;
@


1.16
log
@missing protos
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.15 2003/04/27 12:47:03 tdeval Exp $ */
d80 2
a81 1
	int slen, fd;
@


1.15
log
@Duplicate include.  Pointed out by andrushock at korovino dot net
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.14 2003/01/23 23:15:16 djm Exp $ */
d61 2
@


1.14
log
@Honour TCP_WRAPPERS mk.conf setting; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.13 2002/12/19 18:19:10 deraadt Exp $ */
a37 1
#include <netinet/in.h>
@


1.13
log
@various tweaks.  someone mailed in a huge diff that was so wrong in so
many ways, and i wasted 2 hours finding the gems in it...
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.11 2002/12/19 01:27:56 deraadt Exp $ */
a55 1
#include <tcpd.h>
@


1.12
log
@accidental commit
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.10 2002/07/24 08:42:52 deraadt Exp $ */
d85 1
a85 1
		syslog(LOG_ERR, "getsockname failed (%m)");
d91 1
a91 1
		syslog(LOG_ERR, "getpeername failed (%m)");
d114 1
a114 1
		syslog(LOG_ERR, "Can't open /dev/pf (%m)");
d120 1
a120 1
		    "pf nat lookup failed (%m), connection from %s:%hu",
d158 1
a158 1
		syslog(LOG_ERR,"can't ioctl(SIOCATMARK) socket from %s (%m)",
d174 1
a174 1
		debuglog(3, "xfer_data - eof on read socket");
d180 1
a180 1
		syslog(LOG_ERR, "(xfer_data:%s) - failed (%m) with flags 0%o",
d186 1
a186 1
		debuglog(3, "xfer got %d bytes from socket", rlen);
d194 1
a194 1
				debuglog(3, "zero length write");
@


1.11
log
@missing .Pp
@
text
@d85 1
a85 1
		syslog(LOG_ERR, "getsockname() failed (%m)");
d91 1
a91 1
		syslog(LOG_ERR, "getpeername() failed (%m)");
d114 1
a114 1
		syslog(LOG_ERR, "cannot open /dev/pf (%m)");
d120 1
a120 1
		    "pf nat lookup failed %s:%hu (%m)",
d158 1
a158 1
		syslog(LOG_ERR, "cannot ioctl(SIOCATMARK) socket from %s (%m)",
d174 1
a174 1
		debuglog(3, "EOF on read socket");
d180 1
a180 1
		syslog(LOG_ERR, "xfer_data (%s): failed (%m) with flags 0%o",
d186 1
a186 1
		debuglog(3, "got %d bytes from socket", rlen);
d194 1
a194 1
				debuglog(3, "zero-length write");
@


1.10
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.9 2002/06/09 01:03:12 beck Exp $ */
d85 1
a85 1
		syslog(LOG_ERR, "getsockname failed (%m)");
d91 1
a91 1
		syslog(LOG_ERR, "getpeername failed (%m)");
d114 1
a114 1
		syslog(LOG_ERR, "Can't open /dev/pf (%m)");
d120 1
a120 1
		    "pf nat lookup failed (%m), connection from %s:%hu",
d158 1
a158 1
		syslog(LOG_ERR,"can't ioctl(SIOCATMARK) socket from %s (%m)",
d174 1
a174 1
		debuglog(3, "xfer_data - eof on read socket");
d180 1
a180 1
		syslog(LOG_ERR, "(xfer_data:%s) - failed (%m) with flags 0%o",
d186 1
a186 1
		debuglog(3, "xfer got %d bytes from socket", rlen);
d194 1
a194 1
				debuglog(3, "zero length write");
@


1.9
log
@no newlines in syslog
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.8 2002/05/23 10:22:14 deraadt Exp $ */
d159 1
a159 1
		       what_read);
@


1.8
log
@KNF during an audit; found an improperly initialized sockaddr
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.7 2002/02/15 12:40:59 mpech Exp $ */
d186 1
a186 1
		debuglog(3, "xfer got %d bytes from socket\n", rlen);
d204 1
a204 1
				debuglog(3, "wrote %d bytes to socket\n",wlen);
@


1.7
log
@Fix memory leak in get_proxy_env().

deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.6 2001/09/15 03:54:40 frantzen Exp $ */
a144 1
 *
d171 1
a171 1
		rlen = recv(from_fd,tbuf,sizeof(tbuf), flags);
d238 1
a238 1
	 * pick a port we can bind to from within the range we want.
d253 1
a254 1
		struct sockaddr_in sa;
d258 1
@


1.6
log
@IPv6 support from Ryan McBride (mcbride@@countersiege.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.5 2001/09/05 20:40:10 beck Exp $ */
a79 1
	char *client;
a111 6
	client = strdup(inet_ntoa(client_sa_ptr->sin_addr));
	if (client == NULL) {
		errno = ENOMEM;
		return(-1);
	}

d121 2
a122 1
		    client, ntohs(client_sa_ptr->sin_port));
@


1.5
log
@-Make ftp-proxy drop privs to user "proxy" by default.
   *WARNING* this means that it will die when it can't find user proxy
   if you are not running with a passwd database generated from current
- Speling cleanup and missing va_end() noticed by  <d.doroshenko@@omnitel.net>
- fix logging of getpwnam|getgrnam failures.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.4 2001/09/05 12:42:31 dhartmei Exp $ */
d98 1
d101 3
a103 2
	natlook.saddr = client_sa_ptr->sin_addr.s_addr;
	natlook.daddr = real_server_sa_ptr->sin_addr.s_addr;
d140 1
a140 1
	real_server_sa_ptr->sin_addr.s_addr = natlook.rdaddr;
@


1.4
log
@s/pf_natlook/pfioc_natlook (ioctl parameter struct)
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.3 2001/08/28 19:35:04 deraadt Exp $ */
d72 1
@


1.3
log
@oh, some cleanups etc etc
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.2 2001/08/19 13:43:09 deraadt Exp $ */
d78 1
a78 1
	struct pf_natlook natlook;
@


1.2
log
@1564 lines of cleanup
@
text
@d1 1
a1 1
/* $OpenBSD: util.c,v 1.1 2001/08/19 04:11:12 beck Exp $ */ 
d68 1
a68 1
	va_start(ap,fmt);
d75 1
a75 1
get_proxy_env(int connected_fd, struct sockaddr_in *real_server_sa_ptr,	
d78 1
a78 1
	struct pf_natlook natlook, *natlookp;
d85 1
a85 1
		syslog(LOG_ERR,"getsockname failed (%m)");
d91 1
a91 1
		syslog(LOG_ERR,"getpeername failed (%m)");
d122 1
a122 2
	natlookp = &natlook;
	if (ioctl(fd, DIOCNATLOOK, natlookp) == -1) {
d136 2
a137 2
	real_server_sa_ptr->sin_port = natlookp->rdport;
	real_server_sa_ptr->sin_addr.s_addr = natlookp->rdaddr;
d171 1
a171 1
	rlen = recv(from_fd,tbuf,sizeof(tbuf), flags);
d184 1
a184 1
		syslog(LOG_ERR,"(xfer_data:%s) - failed (%m) with flags 0%o",
d198 1
a198 1
				debuglog(3,"zero length write");
d204 1
a204 1
				syslog(LOG_INFO,"write failed (%m)");
d208 1
a208 1
				debuglog(3,"wrote %d bytes to socket\n",wlen);
@


1.1
log
@transparent ftp proxy, based on Obtuse Systems juniper stuff with much
modernizing and cleanup. still needs looking at.

Currently supports PORT PASV EPRT data connections with only a pf rdr to
capture the control connection. (I.E. you don't need ip forwarding
or other NAT stuff). Runs from inetd.

Supports all passive (EPSV PASV) when using -n flag, where the proxy
ignores passive mode data connections (and assumes nat will get them
through).

Todo yet:
	More audit
	IpV6
	Handle EPSV in proxy (with an rdr added then removed)
	Option to Daemonize and bind only to the loopback
	More Content/Login filtering, etc. etc. and more bloat
@
text
@d1 2
a2 1
/* $OpenBSD$ */ 
a33 1

a35 1
#include <netinet/in.h>
d39 1
d67 2
a68 2
    va_list ap;
    va_start(ap,fmt);
d70 2
a71 3
    if (Debug_Level >= debug_level)  {
	vsyslog(LOG_DEBUG, fmt, ap);
    }
a73 1

d78 2
a79 3
	struct pf_natlook  natlook;
	struct pf_natlook  *natlookp;
	char * client;
d81 1
a81 2
	
	
d94 1
a94 2
	
	
a97 1
	
d105 1
a105 1
	
d108 1
a108 1
	 * the original address we were supposed to connect to. 
a109 1
	
d115 1
a115 1
	
d121 1
a121 1
		
d125 1
a125 1
		    "pf nat lookup failed (%m), connection from %s:%hu", 
d131 1
a131 1
	
d133 2
a134 2
	 * Now jam the original address and port back into the into 
	 * destination sockaddr_in for the proxy to deal with. 
a135 1
	
a150 1

d155 1
d157 1
a157 3
	int rlen, offset, xerrno;
	int mark, flags;
	
a160 1
	
d168 1
a168 2
	
	if (mark) 
a169 2
	else
		flags = 0;
d179 1
a179 1
		debuglog(3, "xfer_data - eof on read socket"); 
d191 2
a192 2
		debuglog(3, "xfer got %d bytes from socket\n",rlen);
		
d217 1
a217 2

/* 
a220 1

d226 1
a226 1
	
d231 3
a233 1
	
a234 3
	if (direction != -1)
		direction = 1; 
	
d239 1
a239 1
	
d241 1
a241 1
	
d243 1
a243 1
	 * pick a port we can bind to from within the range we want. 
d247 1
a247 1
	 * has NOTHING to do with security. 
a248 1
	
d251 1
a251 1
	
d256 1
a256 1
	
d258 1
a258 2
		int one;
		int fd;
d260 1
a260 1
		
d262 1
a262 1
		
d264 1
a264 1
		if (sap == NULL) 
d268 1
a268 1
		
a272 1
		
d274 1
a274 1
		if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &one, 
d279 1
a279 1
		
d281 1
a281 1
			if (sap != NULL) 
d286 1
a286 1
		if (errno != EADDRINUSE) 
d288 1
a288 1
		
a289 1
		
d293 1
a293 1
		if (start_port < min_port) 
d295 1
a295 1
		else if (start_port > max_port) 
a296 1
		
@

