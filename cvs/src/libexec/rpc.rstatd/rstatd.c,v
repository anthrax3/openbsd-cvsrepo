head	1.29;
access;
symbols
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.23.0.22
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.20
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.16
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.14
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.12
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.10
	OPENBSD_5_0:1.23.0.8
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.6
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.23.0.4
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.22.0.4
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.21.0.14
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.12
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.10
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.8
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.6
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.4
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.2
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.20.0.4
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2015.12.01.20.25.16;	author tim;	state Exp;
branches;
next	1.28;
commitid	iwbM4b7PHORhyKYl;

1.28
date	2015.10.05.15.50.01;	author millert;	state Exp;
branches;
next	1.27;
commitid	3YPGXqeYQ7XzfLYs;

1.27
date	2015.04.18.18.28.37;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	6b2lLILbgCR1fvia;

1.26
date	2015.03.13.03.24.27;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	IGVdT2By1RDS4qf6;

1.25
date	2014.11.18.20.51.00;	author krw;	state Exp;
branches;
next	1.24;
commitid	G35ycnLxaVis5TX9;

1.24
date	2014.10.11.03.44.02;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	iuIUIZb4w5UHIZo3;

1.23
date	2009.10.27.23.59.31;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2009.05.20.20.37.43;	author thib;	state Exp;
branches;
next	1.21;

1.21
date	2005.09.16.23.50.33;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2004.09.16.10.53.03;	author otto;	state Exp;
branches;
next	1.19;

1.19
date	2004.09.15.19.05.35;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2004.06.02.02.21.15;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.07.21.12.24;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.12.05.25.06;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.05.17.02.36;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.20.19.51.36;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.06.19.43.54;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.15.23.47.57;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.28.22.59.20;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.28.22.40.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.24.04.39.38;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.31;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.18.23.45.39;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.08.21.18.10;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.28.19.34.31;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.17.19.23.26;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.36.32;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.03.19.03.09;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Remove superfluous check; "Of course" deraadt@@
@
text
@/*	$OpenBSD: rstatd.c,v 1.28 2015/10/05 15:50:01 millert Exp $	*/

/*-
 * Copyright (c) 1993, John Brezak
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <signal.h>
#include <pwd.h>
#include <syslog.h>
#include <errno.h>
#include <rpc/rpc.h>
#include <rpcsvc/rstat.h>

extern void rstat_service(struct svc_req *, SVCXPRT *);

void my_svc_run(void);

int from_inetd = 1;	/* started from inetd ? */
int closedown = 20;	/* how long to wait before going dormant */

volatile sig_atomic_t gotsig;

/* ARGSUSED */
static void
getsig(int signo)
{
	gotsig = 1;
}


int
main(int argc, char *argv[])
{
	int sock = 0, proto = 0;
	socklen_t fromlen;
	struct passwd *pw;
	struct sockaddr_storage from;
	SVCXPRT *transp;

	openlog("rpc.rstatd", LOG_NDELAY|LOG_CONS|LOG_PID, LOG_DAEMON);

	if ((pw = getpwnam("_rstatd")) == NULL) {
		syslog(LOG_ERR, "no such user _rstatd");
		exit(1);
	}
	if (chroot("/var/empty") == -1) {
		syslog(LOG_ERR, "cannot chdir to /var/empty.");
		exit(1);
	}
	chdir("/");

	setgroups(1, &pw->pw_gid);
	setegid(pw->pw_gid);
	setgid(pw->pw_gid);
	seteuid(pw->pw_uid);
	setuid(pw->pw_uid);

	if (argc == 2)
		closedown = strtonum(argv[1], 1, INT_MAX, NULL);
	if (closedown == 0)
		closedown = 20;

	/*
	 * See if inetd started us
	 */
	fromlen = sizeof(from);
	if (getsockname(0, (struct sockaddr *)&from, &fromlen) < 0) {
		from_inetd = 0;
		sock = RPC_ANYSOCK;
		proto = IPPROTO_UDP;
	}

	if (!from_inetd) {
		daemon(0, 0);

		(void)pmap_unset(RSTATPROG, RSTATVERS_TIME);
		(void)pmap_unset(RSTATPROG, RSTATVERS_SWTCH);
		(void)pmap_unset(RSTATPROG, RSTATVERS_ORIG);

		(void) signal(SIGINT, getsig);
		(void) signal(SIGTERM, getsig);
		(void) signal(SIGHUP, getsig);
	}

	transp = svcudp_create(sock);
	if (transp == NULL) {
		syslog(LOG_ERR, "cannot create udp service.");
		exit(1);
	}
	if (!svc_register(transp, RSTATPROG, RSTATVERS_TIME, rstat_service, proto)) {
		syslog(LOG_ERR, "unable to register (RSTATPROG, RSTATVERS_TIME, udp).");
		exit(1);
	}
	if (!svc_register(transp, RSTATPROG, RSTATVERS_SWTCH, rstat_service, proto)) {
		syslog(LOG_ERR, "unable to register (RSTATPROG, RSTATVERS_SWTCH, udp).");
		exit(1);
	}
	if (!svc_register(transp, RSTATPROG, RSTATVERS_ORIG, rstat_service, proto)) {
		syslog(LOG_ERR, "unable to register (RSTATPROG, RSTATVERS_ORIG, udp).");
		exit(1);
	}

	my_svc_run();
	syslog(LOG_ERR, "svc_run returned");
	exit(1);
}

void
my_svc_run(void)
{
	extern volatile sig_atomic_t wantupdatestat;
	extern void updatestat(void);
	struct pollfd *pfd = NULL, *newp;
	int nready, saved_max_pollfd = 0;

	for (;;) {
		if (wantupdatestat) {
			wantupdatestat = 0;
			updatestat();
		}
		if (gotsig) {
			(void) pmap_unset(RSTATPROG, RSTATVERS_TIME);
			(void) pmap_unset(RSTATPROG, RSTATVERS_SWTCH);
			(void) pmap_unset(RSTATPROG, RSTATVERS_ORIG);
			exit(0);
		}
		if (svc_max_pollfd > saved_max_pollfd) {
			newp = reallocarray(pfd, svc_max_pollfd, sizeof(*pfd));
			if (newp == NULL) {
				free(pfd);
				perror("svc_run: - realloc failed");
				return;
			}
			pfd = newp;
			saved_max_pollfd = svc_max_pollfd;
		}
		memcpy(pfd, svc_pollfd, svc_max_pollfd * sizeof(*pfd));

		nready = poll(pfd, svc_max_pollfd, INFTIM);
		switch (nready) {
		case -1:
			if (errno == EINTR)
				continue;
			perror("svc_run: - poll failed");
			free(pfd);
			return;
		case 0:
			continue;
		default:
			svc_getreq_poll(pfd, nready);
		}
	}
}
@


1.28
log
@Remove unused errstr variable.
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.27 2015/04/18 18:28:37 deraadt Exp $	*/
d83 5
a87 7
	if (pw) {
		setgroups(1, &pw->pw_gid);
		setegid(pw->pw_gid);
		setgid(pw->pw_gid);
		seteuid(pw->pw_uid);
		setuid(pw->pw_uid);
	}
@


1.27
log
@Convert many atoi() calls to strtonum(), adding range checks and failure
handling along the way.
Reviews by Brendan MacDonell, Jeremy Devenport, florian, doug, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.26 2015/03/13 03:24:27 deraadt Exp $	*/
a68 1
	const char *errstr;
@


1.26
log
@delete some rpc fd_set related externs which are not used
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.25 2014/11/18 20:51:00 krw Exp $	*/
d37 1
d69 1
d93 2
a94 2
		closedown = atoi(argv[1]);
	if (closedown <= 0)
@


1.25
log
@Nuke some obvious #include duplications.

ok espie@@ deraadt@@ millert@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.24 2014/10/11 03:44:02 deraadt Exp $	*/
a43 3
extern int __svc_fdsetsize;
extern fd_set *__svc_fdset;
extern void svc_getreqset2(fd_set *, int);
@


1.24
log
@obvious reallocarray
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.23 2009/10/27 23:59:31 deraadt Exp $	*/
a40 1
#include <stdlib.h>
@


1.23
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.22 2009/05/20 20:37:43 thib Exp $	*/
d164 1
a164 1
			newp = realloc(pfd, sizeof(*pfd) * svc_max_pollfd);
d173 1
a173 1
		memcpy(pfd, svc_pollfd, sizeof(*pfd) * svc_max_pollfd);
@


1.22
log
@Do not fall back to using nobody if _user is missing, but
error out.

Add a new user _rwalld for rpc.rwalld, and use that instead
of nobody, also unconditionally drop to _rwalld not only
if rpc.rwalld was started with euid 0 (as root).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.20 2004/09/16 10:53:03 otto Exp $	*/
a29 4

#ifndef lint
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.20 2004/09/16 10:53:03 otto Exp $";
#endif /* not lint */
@


1.21
log
@use poll() instead of select(), pr4502, alexander.farber@@gmail.com
@
text
@d80 4
a83 3
	pw = getpwnam("_rstatd");
	if (!pw)
		pw = getpwnam("nobody");
@


1.20
log
@more signal flag races; ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.19 2004/09/15 19:05:35 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.19 2004/09/15 19:05:35 deraadt Exp $";
d56 1
a56 1
int from_inetd = 1;     /* started from inetd ? */
d152 2
a153 1
	fd_set *fds;
d166 11
d178 2
a179 8
		if (__svc_fdset) {
			int bytes = howmany(__svc_fdsetsize, NFDBITS) *
			    sizeof(fd_mask);
			fds = (fd_set *)malloc(bytes);  /* XXX */
			memcpy(fds, __svc_fdset, bytes);
		} else
			fds = NULL;
		switch (select(svc_maxfd+1, fds, 0, 0, (struct timeval *)0)) {
d181 1
a181 3
			if (errno == EINTR) {
				if (fds)
					free(fds);
d183 2
a184 4
			}
			perror("svc_run: - select failed");
			if (fds)
				free(fds);
a186 2
			if (fds)
				free(fds);
d189 1
a189 2
			svc_getreqset2(fds, svc_maxfd+1);
			free(fds);
@


1.19
log
@ARGSUSED signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.18 2004/06/02 02:21:15 brad Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.18 2004/06/02 02:21:15 brad Exp $";
d156 1
a157 1
			wantupdatestat = 0;
@


1.18
log
@IPv6 support.

From NetBSD

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.17 2004/01/07 21:12:24 millert Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.17 2004/01/07 21:12:24 millert Exp $";
d61 1
@


1.17
log
@Inline the cleanup() routine since it is no longer a signal handler
and is only called in one place.  It now does a proper exit() instead
of _exit().  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.16 2003/12/12 05:25:06 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.16 2003/12/12 05:25:06 deraadt Exp $";
d74 1
a74 1
	struct sockaddr_in from;
@


1.16
log
@term 3 cleanup, ok from brezak
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.15 2003/07/05 17:02:36 deraadt Exp $	*/
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.15 2003/07/05 17:02:36 deraadt Exp $";
a67 9
static void
cleanup(void)
{
	(void) pmap_unset(RSTATPROG, RSTATVERS_TIME);	/* XXX signal races */
	(void) pmap_unset(RSTATPROG, RSTATVERS_SWTCH);
	(void) pmap_unset(RSTATPROG, RSTATVERS_ORIG);
	_exit(0);
}

d158 6
a163 2
		if (gotsig)
			cleanup();
@


1.15
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.14 2003/01/20 19:51:36 deraadt Exp $	*/
d15 2
a16 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d32 1
a32 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.14 2003/01/20 19:51:36 deraadt Exp $";
@


1.14
log
@use LOG_NDELAY in chroot() using daemons
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.13 2002/09/06 19:43:54 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.13 2002/09/06 19:43:54 deraadt Exp $";
d66 1
a66 1
void
d73 1
a73 1
void
@


1.13
log
@use socklen_t more; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.12 2002/07/15 23:47:57 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.12 2002/07/15 23:47:57 deraadt Exp $";
d91 2
a135 2

	openlog("rpc.rstatd", LOG_CONS|LOG_PID, LOG_DAEMON);
@


1.12
log
@5 new uid/gid sets; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.11 2002/06/28 22:59:20 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.11 2002/06/28 22:59:20 deraadt Exp $";
d85 2
a86 1
	int sock = 0, proto = 0, fromlen;
@


1.11
log
@correct uid handling; markus
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.10 2002/06/28 22:40:33 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.10 2002/06/28 22:40:33 deraadt Exp $";
d90 3
a92 1
	pw = getpwnam("nobody");
@


1.10
log
@go back to running these as root from inetd.  however once rpc.{rusersd,rstatd}
starts, do a chroot to /var/empty and change to user nobody.
hi mom, i'm in jail!
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.9 2002/03/24 04:39:38 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.9 2002/03/24 04:39:38 deraadt Exp $";
d102 1
a102 1
		setegid(pw->pw_uid);
@


1.9
log
@string.h
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.8 2002/02/16 21:27:31 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.8 2002/02/16 21:27:31 millert Exp $";
d47 1
d64 9
d74 1
a74 1
cleanup()
d83 1
a83 3
main(argc, argv)
	int argc;
	char *argv[];
d86 1
d90 15
d127 3
a129 3
		(void) signal(SIGINT, cleanup);
		(void) signal(SIGTERM, cleanup);
		(void) signal(SIGHUP, cleanup);
d158 1
a158 1
my_svc_run()
d169 2
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.7 2001/11/18 23:45:39 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.7 2001/11/18 23:45:39 deraadt Exp $";
d44 1
@


1.7
log
@create own svc_run(), which can do updating outside of a signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.6 2001/07/08 21:18:10 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.6 2001/07/08 21:18:10 deraadt Exp $";
d54 1
a54 1
extern void svc_getreqset2 __P((fd_set *, int));
@


1.6
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: rstatd.c,v 1.5 2001/01/28 19:34:31 niklas Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.5 2001/01/28 19:34:31 niklas Exp $";
d43 2
a44 1
#include <rpc/rpc.h>
d47 1
d49 1
d52 6
a57 1
extern void rstat_service();
d76 2
a78 4
	int sock = 0;
	int proto = 0;
	struct sockaddr_in from;
	int fromlen;
d127 1
a127 1
	svc_run();
d130 42
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rstatd.c,v 1.4 2001/01/17 19:23:26 deraadt Exp $";
d40 2
d46 1
d63 1
@


1.4
log
@use _exit() in signal handlers, and flag that the pmap_unset() calls are unsafe
@
text
@d1 2
d37 1
a37 1
static char rcsid[] = "$Id: rstatd.c,v 1.3 1997/07/23 20:36:32 kstailey Exp $";
@


1.3
log
@tabify
@
text
@d35 1
a35 1
static char rcsid[] = "$Id: rstatd.c,v 1.2 1997/04/03 19:03:09 kstailey Exp $";
d52 1
a52 1
	(void) pmap_unset(RSTATPROG, RSTATVERS_TIME);
d55 1
a55 1
	exit(0);
@


1.2
log
@tabify
@
text
@d35 1
a35 1
static char rcsid[] = "$Id: rstatd.c,v 1.1.1.1 1995/10/18 08:43:21 deraadt Exp $";
d52 4
a55 4
        (void) pmap_unset(RSTATPROG, RSTATVERS_TIME);
        (void) pmap_unset(RSTATPROG, RSTATVERS_SWTCH);
        (void) pmap_unset(RSTATPROG, RSTATVERS_ORIG);
        exit(0);
d59 2
a60 2
        int argc;
        char *argv[];
d63 2
a64 2
        int sock = 0;
        int proto = 0;
d67 9
a75 9
        
        if (argc == 2)
                closedown = atoi(argv[1]);
        if (closedown <= 0)
                closedown = 20;

        /*
         * See if inetd started us
         */
d77 12
a88 12
        if (getsockname(0, (struct sockaddr *)&from, &fromlen) < 0) {
                from_inetd = 0;
                sock = RPC_ANYSOCK;
                proto = IPPROTO_UDP;
        }

        if (!from_inetd) {
                daemon(0, 0);

                (void)pmap_unset(RSTATPROG, RSTATVERS_TIME);
                (void)pmap_unset(RSTATPROG, RSTATVERS_SWTCH);
                (void)pmap_unset(RSTATPROG, RSTATVERS_ORIG);
d93 3
a95 3
        }
        
        openlog("rpc.rstatd", LOG_CONS|LOG_PID, LOG_DAEMON);
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
static char rcsid[] = "$Id: rstatd.c,v 1.6 1995/01/13 06:14:31 mycroft Exp $";
d115 1
a115 1
        svc_run();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
