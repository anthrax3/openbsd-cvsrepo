head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.10
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.26
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.24
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.16
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.14
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.12
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2016.09.03.10.51.26;	author gsoares;	state Exp;
branches;
next	1.15;
commitid	1fAp0AhXMfgbBXbr;

1.15
date	2016.08.16.04.44.38;	author tedu;	state Exp;
branches;
next	1.14;
commitid	lwsnf8drFDMgS8ET;

1.14
date	2016.04.26.20.30.00;	author mestre;	state Exp;
branches;
next	1.13;
commitid	zdvTome6dlE5NFdD;

1.13
date	2015.11.19.18.37.01;	author millert;	state Exp;
branches;
next	1.12;
commitid	qC16TiBA67bibMKz;

1.12
date	2015.10.22.12.55.23;	author tedu;	state Exp;
branches;
next	1.11;
commitid	qECQZR8hDqHxkoar;

1.11
date	2015.10.14.17.06.58;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	2k2wCSf829qSW3Ek;

1.10
date	2014.11.03.16.50.20;	author tedu;	state Exp;
branches;
next	1.9;
commitid	RUYIs6r4LjGs5EPx;

1.9
date	2012.12.04.02.24.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.02.04.14.49;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.09.19.14.10;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.06.18.45.07;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.28.01.14.37;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.02.01.27.15;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.06.05.37.04;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.13.06.35;	author mpech;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.12.02.34.43;	author millert;	state Exp;
branches;
next	;


desc
@@


1.16
log
@convert to use readpassphrase() instead of DEPRECATED/getpass()
OK millert@@
@
text
@/*	$OpenBSD: login_reject.c,v 1.15 2016/08/16 04:44:38 tedu Exp $	*/

/*-
 * Copyright (c) 1995 Berkeley Software Design, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Berkeley Software Design,
 *      Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI $From: login_reject.c,v 1.5 1996/08/22 20:43:11 prb Exp $
 */
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/file.h>
#include <sys/wait.h>

#include <err.h>
#include <errno.h>
#include <login_cap.h>
#include <pwd.h>
#include <readpassphrase.h>
#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	struct rlimit rl;
	FILE *back;
	char passbuf[1];
	int mode = 0, c;

	rl.rlim_cur = 0;
	rl.rlim_max = 0;
	(void)setrlimit(RLIMIT_CORE, &rl);

	(void)setpriority(PRIO_PROCESS, 0, 0);

	if (pledge("stdio rpath tty", NULL) == -1) {
		syslog(LOG_AUTH|LOG_ERR, "pledge: %m");
		exit(1);
	}

	openlog("login", LOG_ODELAY, LOG_AUTH);

	while ((c = getopt(argc, argv, "v:s:")) != -1)
		switch (c) {
		case 'v':
			break;
		case 's':	/* service */
			if (strcmp(optarg, "login") == 0)
				mode = 0;
			else if (strcmp(optarg, "challenge") == 0)
				mode = 1;
			else if (strcmp(optarg, "response") == 0)
				mode = 2;
			else {
				syslog(LOG_ERR, "%s: invalid service", optarg);
				exit(1);
			}
			break;
		default:
			syslog(LOG_ERR, "usage error");
			exit(1);
		}

	switch (argc - optind) {
	case 2:
	case 1:
		break;
	default:
		syslog(LOG_ERR, "usage error");
		exit(1);
	}

	if (!(back = fdopen(3, "r+")))  {
		syslog(LOG_ERR, "reopening back channel: %m");
		exit(1);
	}
	if (mode == 1) {
		fprintf(back, BI_SILENT "\n");
		exit(0);
	}

	if (mode == 2) {
		mode = 0;
		c = -1;
		while (read(3, passbuf, 1) == 1) {
			if (passbuf[0] == '\0' && ++mode == 2)
				break;
		}
		if (mode < 2) {
			syslog(LOG_ERR, "protocol error on back channel");
			exit(1);
		}
	} else
		readpassphrase("Password:", passbuf, sizeof(passbuf), 0);

	crypt_checkpass("password", NULL);

	fprintf(back, BI_REJECT "\n");
	exit(1);
}
@


1.15
log
@remove unneeded casts
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.14 2016/04/26 20:30:00 mestre Exp $	*/
d46 1
d127 1
a127 1
		getpass("Password:");
@


1.14
log
@Add missing "tty" promise to the pledge(2) call

This is needed since getpass(3) calls readpassphrase(3) which in turn tries
to open(2) a tty in O_RDWR mode

Problem reported by Kevin Chadwick <m8il1ists ! gmail.com>

Cluebat stick provided by deraadt@@, OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.13 2015/11/19 18:37:01 millert Exp $	*/
d117 1
a117 1
		while (read(3, passbuf, (size_t)1) == 1) {
@


1.13
log
@Call syslog() if login_* pledge fails; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.12 2015/10/22 12:55:23 tedu Exp $	*/
d68 1
a68 1
	if (pledge("stdio rpath", NULL) == -1) {
@


1.12
log
@use crypt_checkpass("password", NULL) to fake a login instead of bcrypt
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.11 2015/10/14 17:06:58 deraadt Exp $	*/
d68 4
a71 2
	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");
@


1.11
log
@pledge "stdio rpath" is good enough for these mainline BSD auth login
programs.
(I am very surprised pledge ended up working for programs like this)
ok semarie millert
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.10 2014/11/03 16:50:20 tedu Exp $	*/
d59 1
a59 1
	char passbuf[1], hash[_PASSWORD_LEN + 1];
d126 1
a126 1
	bcrypt_newhash("password", 8, hash, sizeof(hash));
@


1.10
log
@reduce dependency on passwd. just call bcrypt_newhash to do the dummy work.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.9 2012/12/04 02:24:47 deraadt Exp $	*/
d67 3
@


1.9
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.8 2006/04/02 04:14:49 deraadt Exp $	*/
a53 2
extern int	pwd_gensalt(char *, int, login_cap_t *, char);

a57 1
	login_cap_t *lc;
d59 1
a59 1
	char passbuf[1], salt[_PASSWORD_LEN + 1];
d123 1
a123 4
	if ((lc = login_getclass(NULL)) == NULL ||
	    pwd_gensalt(salt, sizeof(salt), lc, 'l') == 0)
		strlcpy(salt, "xx", sizeof(salt));
	crypt("password", salt);
@


1.8
log
@some extern and goo
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.7 2006/03/09 19:14:10 millert Exp $	*/
a35 1
#include <sys/param.h>
@


1.7
log
@Foil potential timing attacks by using the correct password hash
instead of "xx".  In practice this means bcrypt() will be used for
non-existent users instead of DES crypt().
Adapted from a patch by Peter Philipp.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.6 2002/09/06 18:45:07 deraadt Exp $	*/
d55 2
d116 1
a116 1
		while (read(3, passbuf, 1) == 1) {
@


1.6
log
@ansi; ok millert pvalchev
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.5 2002/06/28 01:14:37 deraadt Exp $	*/
d58 2
d61 1
a61 2
	char passbuf[1];
	struct rlimit rl;
d125 5
a129 1
	crypt("password", "xx");
@


1.5
log
@minor indent cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.4 2002/06/02 01:27:15 deraadt Exp $	*/
d56 1
a56 3
main(argc, argv)
	int argc;
	char *argv[];
a59 1
	int c;
d61 1
a61 1
	int mode = 0;
a122 1

@


1.4
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.3 2001/12/06 05:37:04 millert Exp $	*/
d62 1
a62 1
    	int c;
d74 1
a74 1
    	while ((c = getopt(argc, argv, "v:s:")) != -1)
@


1.3
log
@Do not set handler for SIGINT and SIGQUIT to SIG_IGN since it prevents
getpass()/readpassphrase() from being able to restore the tty mode
on keyboard interrupt.  Along with the recent readpassphrase.c commit
this means that if you ^C things that use login scripts (like su(1))
with a non-CBREAK shell your tty mode will be restored nicely.

TODO:
The various login scripts need to install handlers to avoid leaving
turd files or otherwise ending in a bad state.  It would also be
nice to send BI_REJECT to the back channel.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.2 2001/10/24 13:06:35 mpech Exp $	*/
d75 1
a75 1
		switch(c) {
d95 1
a95 1
	switch(argc - optind) {
@


1.2
log
@getopt(3) returns -1 when out of args, not EOF.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: login_reject.c,v 1.1 2000/12/12 02:34:43 millert Exp $	*/
a69 2
	(void)signal(SIGQUIT, SIG_IGN);
	(void)signal(SIGINT, SIG_IGN);
@


1.1
log
@reject login script; rejects attempted authentication
will be used when BSD authentication is enabled
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 1
a76 1
    	while ((c = getopt(argc, argv, "v:s:")) != EOF)
@

