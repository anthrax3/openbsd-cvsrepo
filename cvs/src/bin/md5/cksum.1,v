head	1.39;
access;
symbols
	OPENBSD_6_2:1.39.0.2
	OPENBSD_6_2_BASE:1.39
	OPENBSD_6_1:1.39.0.4
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.38.0.10
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.6
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.38.0.8
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.38.0.2
	OPENBSD_5_7_BASE:1.38
	OPENBSD_5_6:1.38.0.4
	OPENBSD_5_6_BASE:1.38
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.23.0.10
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.8
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.6
	OPENBSD_5_0:1.23.0.4
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.22.0.2
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.6
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@.\" @;


1.39
date	2016.09.03.17.01.01;	author tedu;	state Exp;
branches;
next	1.38;
commitid	kjEgOA8VDME59FHg;

1.38
date	2014.03.20.22.06.21;	author tedu;	state Exp;
branches;
next	1.37;

1.37
date	2014.03.20.22.03.56;	author tedu;	state Exp;
branches;
next	1.36;

1.36
date	2014.03.20.20.32.42;	author naddy;	state Exp;
branches;
next	1.35;

1.35
date	2014.03.17.14.21.08;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2014.03.07.04.10.55;	author lteo;	state Exp;
branches;
next	1.33;

1.33
date	2014.01.30.05.12.29;	author lteo;	state Exp;
branches;
next	1.32;

1.32
date	2014.01.24.23.18.34;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2014.01.20.21.27.39;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2014.01.20.21.10.05;	author schwarze;	state Exp;
branches;
next	1.29;

1.29
date	2014.01.15.16.07.27;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2014.01.10.20.14.08;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2014.01.08.16.12.44;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2014.01.08.14.15.54;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2013.12.29.21.19.11;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2013.04.15.15.54.17;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2010.11.07.08.05.55;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2010.07.12.23.16.55;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2009.08.16.09.41.08;	author sobrado;	state Exp;
branches;
next	1.19;

1.19
date	2009.02.08.17.15.09;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.29.18.24.31;	author sobrado;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.31.19.19.15;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.30.06.45.55;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.13.13.57.01;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.27.13.12.41;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2007.03.20.12.06.48;	author thib;	state Exp;
branches;
next	1.12;

1.12
date	2007.02.27.21.41.58;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.19.17.09.15;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.17.21.19.12;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.17.21.16.54;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.17.21.13.16;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.17.16.02.18;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.16.23.53.41;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.07.23.41.53;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.25.10.32.06;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.29.17.32.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.04.18.32.51;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.02.17.53.29;	author millert;	state Exp;
branches;
next	;


desc
@@


1.39
log
@add sha512/256 support to check that the libc code is right :)
@
text
@.\"	$OpenBSD: cksum.1,v 1.38 2014/03/20 22:06:21 tedu Exp $
.\"
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)cksum.1	8.2 (Berkeley) 4/28/95
.\"
.Dd $Mdocdate: March 20 2014 $
.Dt CKSUM 1
.Os
.Sh NAME
.Nm cksum
.Nd display file checksums and block counts
.Sh SYNOPSIS
.Nm cksum
.Bk -words
.Op Fl bcpqrtx
.Op Fl a Ar algorithms
.Op Fl C Ar checklist
.Op Fl h Ar hashfile
.Op Fl s Ar string
.Op Ar
.Ek
.Sh DESCRIPTION
The
.Nm cksum
utility writes to the standard output a single line for each input file.
The format of this line varies with the algorithm being used as follows:
.Bl -tag -width allxothers
.It cksum
The output line consists of three whitespace separated fields:
a CRC checksum, the number of octets in the input,
and name of the file or string.
If no file name is specified, the standard input is used and no file name
is written.
.It all others
The output line consists of four whitespace separated fields:
the name of the algorithm used, the name of the file or string in
parentheses, an equals sign, and the cryptographic hash of the input.
If no file name is specified, the standard input is used and only
the cryptographic hash is output.
.El
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl a Ar algorithms
Use the specified algorithm(s) instead of the default (cksum).
Supported algorithms include cksum, md5, rmd160, sha1,
sha224, sha256, sha384, sha512/256, and sha512.
Multiple algorithms may be specified, separated by a comma or whitespace.
Additionally, multiple
.Fl a
options may be specified on the command line.
Case is ignored when matching algorithms.
The output format may be specified on a per-algorithm basis
by using a single-character suffix, e.g.\&
.Dq sha256b .
If the algorithm has a
.Sq b
suffix, the checksum will be output in base64 format.
If the algorithm has an
.Sq x
suffix, the checksum will be output in hex format.
If an algorithm with the same output format is repeated,
only the first instance is used.
Note that output format suffixes are not supported
for the cksum algorithm.
.It Fl b
Output checksums in base64 notation, not hexadecimal by
default.
A
.Sq b
or
.Sq x
suffix on the algorithm will override this default.
This option is ignored for the cksum algorithm.
.It Fl C Ar checklist
Compare the checksum of each
.Ar file
against the checksums in the
.Ar checklist .
Any specified
.Ar file
that is not listed in the
.Ar checklist
will generate an error.
.It Fl c
If this option is specified, the
.Ar file
options become checklists.
Each checklist should contain hash results in the normal format,
which will be verified against the specified paths.
Output consists of the digest used, the file name,
and an OK, FAILED, or MISSING for the result of the comparison.
This will validate any of the supported checksums.
If no file is given, stdin is used.
The
.Fl c
option may not be used in conjunction with more than a single
.Fl a
option.
.It Fl h Ar hashfile
Place the checksum into
.Ar hashfile
instead of stdout.
.It Fl p
Echoes stdin to stdout and appends the
checksum to stdout.
.It Fl q
Only print the checksum (quiet mode) or if used in conjunction with the
.Fl c
flag, only print the failed cases.
.It Fl r
Reverse the format of the hash algorithm output, making
it match the checksum output format.
.It Fl s Ar string
Prints a checksum of the given
.Ar string .
.It Fl t
Runs a built-in time trial.
Specifying
.Fl t
multiple times results in the number of rounds being multiplied
by 10 for each additional flag.
.It Fl x
Runs a built-in test script.
.El
.Pp
The default CRC used is based on the polynomial used for CRC error checking
in the networking standard
ISO/IEC 8802-3:1996.
The other available algorithms are described in their respective
man pages in section 3 of the manual.
.Sh EXIT STATUS
.Ex -std cksum
.Sh SEE ALSO
.Xr md5 1
.Pp
The default calculation is identical to that given in pseudo-code
in the following ACM article:
.Rs
.%T "Computation of Cyclic Redundancy Checks Via Table Lookup"
.%A Dilip V. Sarwate
.%J "Communications of the ACM"
.%D "August 1988"
.Re
.Sh STANDARDS
The
.Nm
utility is compliant with the
.St -p1003.1-2008
specification.
.Pp
All the flags are extensions to that specification.
.Sh HISTORY
The
.Nm cksum
utility appeared in
.Bx 4.4 .
.Sh CAVEATS
Do not use the cksum or md5 algorithms to verify file integrity.
An attacker can trivially produce modified payload that
has the same checksum as the original version.
Use a cryptographic checksum instead.
@


1.38
log
@missed a turd
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.37 2014/03/20 22:03:56 tedu Exp $
d76 1
a76 1
sha224, sha256, sha384, and sha512.
@


1.37
log
@purge sum and sysvsum code. ok deraadt jmc lteo millert
a few initial leftovers spotted by naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.36 2014/03/20 20:32:42 naddy Exp $
a50 8
.Nm sum
.Op Fl bcpqrtx
.Op Fl a Ar algorithms
.Op Fl C Ar checklist
.Op Fl h Ar hashfile
.Op Fl o Cm 1 | 2
.Op Fl s Ar string
.Op Ar
@


1.36
log
@remove insecure MD4 checksum algorithm; ok tedu@@, man page ok jmc@@

"A collision attack published in 2007 can find collisions for full
MD4 in less than two hash operations."
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.35 2014/03/17 14:21:08 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: March 17 2014 $
d39 1
a39 2
.Nm cksum ,
.Nm sum
a47 1
.Op Fl o Cm 1 | 2
d64 1
a64 1
.Bl -tag -width sysvsum
a70 12
.It sum
The output line consists of three whitespace separated fields:
a CRC checksum, the number of kilobytes in the input,
and name of the file or string.
If no file name is specified, the standard input is used and no file name
is written.
.It sysvsum
The output line consists of three whitespace separated fields:
a CRC checksum, the number of 512-byte blocks in the input,
and name of the file or string.
If no file name is specified, the standard input is used and no file name
is written.
a78 8
The
.Nm sum
utility is identical to the
.Nm cksum
utility, except that it defaults to using historic algorithm 1, as
described below.
It is provided for compatibility only.
.Pp
d84 1
a84 1
sha224, sha256, sha384, sha512, sum, and sysvsum.
d102 1
a102 1
for the cksum, sum and sysvsum algorithms.
d111 1
a111 2
This option is ignored for the cksum, sum and sysvsum
algorithms, which do not use hexadecimal output.
a140 3
.It Fl o Cm 1 | 2
Use historic algorithms instead of the (superior) default one
(see below).
a163 35
Algorithm 1 (aka sum)
is the algorithm used by historic
.Bx
systems as the
.Nm sum
algorithm and by historic
.At V
systems as the
.Nm sum
algorithm when using the
.Fl r
option.
This is a 16-bit checksum, with a right rotation before each addition;
overflow is discarded.
.Pp
Algorithm 2 (aka sysvsum) is the algorithm used by historic
.At V
systems as the
default
.Nm sum
algorithm.
This is a 32-bit checksum, and is defined as follows:
.Bd -unfilled -offset indent
s = sum of all bytes;
r = s % 2^16 + (s % 2^32) / 2^16;
cksum = (r % 2^16) + r / 2^16;
.Ed
.Pp
Both algorithm 1 and 2 write to the standard output the same fields as
the default algorithm, except that the size of the file in bytes is
replaced with the size of the file in blocks.
For historic reasons, the block size is 1024 for algorithm 1 and 512
for algorithm 2.
Partial blocks are rounded up.
.Pp
a166 32
The CRC checksum encoding is defined by the generating polynomial:
.Bd -unfilled -offset indent
G(x) = x^32 + x^26 + x^23 + x^22 + x^16 + x^12 +
     x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
.Ed
.Pp
Mathematically, the CRC value corresponding to a given file is defined by
the following procedure:
.Bd -filled -offset indent
The
.Ar n
bits to be evaluated are considered to be the coefficients of a mod 2
polynomial M(x) of degree
.Ar n Ns \-1 .
These
.Ar n
bits are the bits from the file, with the most significant bit being the most
significant bit of the first octet of the file and the last bit being the least
significant bit of the last octet, padded with zero bits (if necessary) to
achieve an integral number of octets, followed by one or more octets
representing the length of the file as a binary value, least significant octet
first.
The smallest number of octets capable of representing this integer are used.
.Pp
M(x) is multiplied by x^32 (i.e., shifted left 32 bits) and divided by
G(x) using mod 2 division, producing a remainder R(x) of degree \*(Lt= 31.
.Pp
The coefficients of R(x) are considered to be a 32-bit sequence.
.Pp
The bit sequence is complemented and the result is the CRC.
.Ed
.Pp
d170 1
a170 1
.Ex -std cksum sum
a190 4
A
.Nm sum
command appeared in
.At v2 .
d196 1
a196 2
Do not use the cksum, md5, sum, or sysvsum
algorithms to verify file integrity.
@


1.35
log
@use Ex;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.34 2014/03/07 04:10:55 lteo Exp $
d35 1
a35 1
.Dd $Mdocdate: March 7 2014 $
d105 1
a105 1
Supported algorithms include cksum, md4, md5, rmd160, sha1,
d293 1
a293 1
Do not use the cksum, md4, md5, sum, or sysvsum
@


1.34
log
@When using the -C option, exit with an exit status of 1 if any of the
files specified on the command line do not exist in the checklist.

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.33 2014/01/30 05:12:29 lteo Exp $
d35 1
a35 1
.Dd $Mdocdate: January 30 2014 $
d263 1
a263 6
The
.Nm cksum
and
.Nm sum
utilities exit 0 on success,
and >0 if an error occurs.
@


1.33
log
@Add MISSING to the list of possible results of a checklist comparison
(md5.1 already has this).
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.32 2014/01/24 23:18:34 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: January 24 2014 $
d144 1
a144 1
is ignored.
@


1.32
log
@bump the year for ISO/IEC 8802:3 from 1989 to 1996;
ingo recommends not defining a new St macro for every revision here

ok sobrado schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.31 2014/01/20 21:27:39 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: January 20 2014 $
d152 1
a152 1
and an OK or FAILED for the result of the comparison.
@


1.31
log
@Do not use .Ar for fixed strings, it is intended for argument placeholders.
We could switch to .Cm, but jmc@@ thinks that just removing the markup
from the algorith names is better in this case.  Otherwise, the
total amount of markup could be considered excessive.
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.30 2014/01/20 21:10:05 schwarze Exp $
d227 1
a227 1
.St -iso8802-3 .
@


1.30
log
@The strings "1" and "2" are not placeholders for arguments,
but have to be given verbatim on the command line, so use .Cm.
Found while testing mandocdb(8), ok jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.29 2014/01/15 16:07:27 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: January 15 2014 $
d66 1
a66 1
.Bl -tag -width Ds
d105 2
a106 13
Supported algorithms include
.Ar cksum ,
.Ar md4 ,
.Ar md5 ,
.Ar rmd160 ,
.Ar sha1 ,
.Ar sha224 ,
.Ar sha256 ,
.Ar sha384 ,
.Ar sha512 ,
.Ar sum ,
and
.Ar sysvsum .
d124 1
a124 6
for the
.Ar cksum ,
.Ar sum
and
.Ar sysvsum
algorithms.
d133 1
a133 5
This option is ignored for the
.Ar cksum ,
.Ar sum
and
.Ar sysvsum
d190 1
a190 2
Algorithm 1 (aka
.Ar sum )
d205 1
a205 3
Algorithm 2 (aka
.Ar sysvsum )
is the algorithm used by historic
d298 1
a298 7
Do not use the
.Ar cksum ,
.Ar md4 ,
.Ar md5 ,
.Ar sum ,
or
.Ar sysvsum
@


1.29
log
@add -C to the man page, and adjust usage();
ok lteo
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.28 2014/01/10 20:14:08 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: January 10 2014 $
d49 1
a49 1
.Op Fl o Ar 1 | 2
d58 1
a58 1
.Op Fl o Ar 1 | 2
d184 1
a184 1
.It Fl o Ar 1 | 2
@


1.28
log
@catch up to the fact that md5/sha* got merged, and document -c consistently;
some style and cleanup tweaks while here

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.27 2014/01/08 16:12:44 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: January 8 2014 $
d47 1
d56 1
d155 10
@


1.27
log
@sort options;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.26 2014/01/08 14:15:54 deraadt Exp $
d45 1
a45 1
.Op Fl bpqrtx
a46 1
.Op Fl c Op Ar checklist ...
d53 1
a53 1
.Op Fl bpqrtx
a54 1
.Op Fl c Op Ar checklist ...
d153 6
a158 4
.It Fl c Op Ar checklist ...
Compares all checksums contained in the file
.Ar checklist
with newly computed checksums for the corresponding files.
d281 1
a281 3
.Xr md5 1 ,
.Xr sha1 1 ,
.Xr sha256 1
@


1.26
log
@Add support for -h hashfile.  This is very useful with with -p, in a pipeline,
to deliver the hash output to a different location.
ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.25 2013/12/29 21:19:11 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: December 29 2013 $
d48 1
a49 1
.Op Fl h Ar hashfile
d57 1
a58 1
.Op Fl h Ar hashfile
d168 4
a184 4
.It Fl h Ar hashfile
Place the checksum into
.Ar hashfile
instead of stdout.
@


1.25
log
@update sha256(1) to better reflect that it documents sha512 now too.
that led me to whack some unneccessary mark up and quoting (and phrasing),
and the changes to the other pages are really just to unify the newer
text layout;

tedu provided feedback and answers (thanks);
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.24 2013/04/15 15:54:17 millert Exp $
d35 1
a35 1
.Dd $Mdocdate: April 15 2013 $
d49 1
d58 1
d181 4
@


1.24
log
@SHA-224 is to SHA-256 as SHA-384 is to SHA-512.  It was added in a
later revision of FIPS-180.  OK miod@@ jmc@@ guenther@@ djm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.23 2010/11/07 08:05:55 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: November 7 2010 $
d272 2
a273 1
utilities exit 0 on success or \*(Gt0 if an error occurred.
@


1.23
log
@more EXIT STATUS bits; from Daniel Dickman
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.22 2010/07/12 23:16:55 tedu Exp $
d35 1
a35 1
.Dd $Mdocdate: July 12 2010 $
d109 1
@


1.22
log
@replace rmd160 links with sha256.  it's way more popular and more better, too.
too many oks to enumerate.
while here, add Xr to the relevant libc functions in each page.
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.21 2010/03/26 19:30:40 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: March 26 2010 $
d266 1
a266 1
.Pp
@


1.21
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.20 2009/08/16 09:41:08 sobrado Exp $
d35 1
a35 1
.Dd $Mdocdate: August 16 2009 $
d274 2
a275 2
.Xr rmd160 1 ,
.Xr sha1 1
@


1.20
log
@replace ".Ar file ..." with ".Ar" whenever possible.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.19 2009/02/08 17:15:09 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: February 8 2009 $
d282 1
a282 1
.%J "Communications of the \\*(tNACM\\*(sP"
@


1.19
log
@bump the posix reference in STANDARDS to IEEE Std 1003.1-2008, with a few
updates to follow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.18 2008/07/29 18:24:31 sobrado Exp $
d35 1
a35 1
.Dd $Mdocdate: July 29 2008 $
d50 1
a50 1
.Op Ar file ...
d58 1
a58 1
.Op Ar file ...
@


1.18
log
@md5(1), sha1(1), rmd160(1), cksum(1) and sum(1) have different options;
while here, some KNF improvements.

based on a diff for compress(1) written by millert@@,
fixes from guenther@@ and pyr@@.

ok millert@@, pyr@@; (for the manual page tweaks) jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.17 2007/05/31 19:19:15 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 31 2007 $
d289 1
a289 1
.St -p1003.1-2004
@


1.17
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.16 2007/05/30 06:45:55 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate$
d53 5
@


1.16
log
@some i missed...
- consistent text for STANDARDS
- note which options are extensions to POSIX
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.15 2007/04/13 13:57:01 tedu Exp $
d35 1
a35 1
.Dd April 30, 2004
@


1.15
log
@allow multiple -t to increase the test count.  cpus are getting too fast.
ok grunk. with manpage from grunk and jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.14 2007/03/27 13:12:41 millert Exp $
d282 1
a282 1
.Nm cksum
d284 1
a284 1
.St -p1003.2-92
d286 2
@


1.14
log
@Add base64 support to cksum and friends.  Output encoding can
be set globally or on a per-algorithm basis when using multiple
hash functions.  OK espie@@ simon@@ deraadt@@; man help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.13 2007/03/20 12:06:48 thib Exp $
d178 4
@


1.13
log
@augment the -q option, now if specifed with -c (checklist)
it will only print out the failed cases.

OK millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.12 2007/02/27 21:41:58 millert Exp $
d45 1
a45 1
.Op Fl pqrtx
a113 1
If an algorithm is repeated, only the first instance is used.
d115 32
@


1.12
log
@Add md5 to the list of unsecure checksums.  Adapted from a diff by
Tamas TEVESZ.
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.11 2006/11/19 17:09:15 jmc Exp $
d136 3
a138 1
Only print the checksum (quiet mode).
@


1.11
log
@WARNING/BUGS -> CAVEATS; ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.10 2006/11/17 21:19:12 jmc Exp $
d262 1
d266 3
a268 3
algorithms to detect hostile binary modifications.
An attacker can trivially produce backdoored daemons which have the same
checksum as the standard versions.
@


1.10
log
@`<' -> \*(Lt
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.9 2006/11/17 21:16:54 jmc Exp $
d258 1
a258 1
.Sh WARNING
@


1.9
log
@discourage .Tn;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.8 2006/11/17 21:13:16 jmc Exp $
d215 1
a215 1
G(x) using mod 2 division, producing a remainder R(x) of degree <= 31.
@


1.8
log
@.Ex these pages; ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.7 2006/11/17 16:02:18 jmc Exp $
d61 2
a62 3
The output line consists of three whitespace separated fields: a
.Tn CRC
checksum, the number of octets in the input,
d67 2
a68 3
The output line consists of three whitespace separated fields: a
.Tn CRC
checksum, the number of kilobytes in the input,
d73 2
a74 3
The output line consists of three whitespace separated fields: a
.Tn CRC
checksum, the number of 512-byte blocks in the input,
d187 1
a187 5
The default
.Tn CRC
used is based on the polynomial used for
.Tn CRC
error checking
d190 1
a190 3
The
.Tn CRC
checksum encoding is defined by the generating polynomial:
d196 1
a196 3
Mathematically, the
.Tn CRC
value corresponding to a given file is defined by
d236 1
a236 3
in the following
.Tn ACM
article:
@


1.7
log
@simplify synopsis and usage(); ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.6 2006/11/16 23:53:41 millert Exp $
d235 1
a235 1
.Sh DIAGNOSTICS
d240 1
a240 1
utilities exit 0 on success or >0 if an error occurred.
@


1.6
log
@Add -r and -q options similar to what is supported by FreeBSD's md5
OK deraadt@@ ckuethe@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.5 2005/03/07 23:41:53 jmc Exp $
d45 1
a45 6
.Oo
.Fl p | t | x |
.Fl c Oo Ar checklist ... Oc |
.Fl s Ar string |
.Ar file ...
.Oc
d47 1
d49 2
a50 1
.Op Fl q | r
d135 3
a142 3
.It Fl p
Echoes stdin to stdout and appends the
checksum to stdout.
@


1.5
log
@more macro simplification;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.4 2005/02/25 10:32:06 jmc Exp $
d53 1
d138 5
@


1.4
log
@avoid specifying which hash to use;
this after some discussion w/ otto;

started by pr #4120, from andy isaacson;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.3 2004/12/29 17:32:44 millert Exp $
d121 1
a121 4
.It Xo
.Fl c
.Oo Ar checklist ... Oc
.Xc
@


1.3
log
@Add support for multiple using algorithms.  OK'd by several people
a while ago so get this out of my tree...
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.2 2004/05/04 18:32:51 jmc Exp $
d281 1
a281 1
Use a cryptographic-strength checksum (such as MD5) instead.
@


1.2
log
@- simplify synopses
- correct macros
- various grammatical fixes

ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.1 2004/05/02 17:53:29 millert Exp $
d51 1
a51 1
.Op Fl a Ar algorithm
d101 2
a102 2
.It Fl a Ar algorithm
Use the specified algorithm instead of the default (cksum).
d115 2
a116 1
Algorithms specified by the
d118 3
a120 1
option are case-insensitive.
d132 5
@


1.1
log
@Add support for cksum (3 varieties), md4, sha256, sha384, and sha512.
Consequently, cksum moves becomes a link to md5 and moves to /bin.
The cksum man page could use some polishing.
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.16 2003/06/10 09:12:09 jmc Exp $
d44 1
a44 8
.Oo Xo
.Fl a Ar cksum | Ar md4 |
.Ar md5 | Ar rmd160 | Ar sha1 |
.Ar sha256 | Ar sha384 | Ar sha512 |
.Ar sum | Ar sysvsum
.Xc
.Oc
.Op Fl o Ar \&1 | Ar \&2
d46 2
a47 1
.Fl p | Fl t | Fl x |
a48 1
.Fl c Ar [ checklist ... ] |
d51 3
d59 1
a59 1
utility writes to the standard output a single line each input file.
d65 1
a65 1
checksum, the number of octets in the input
d72 1
a72 1
checksum, the number of kilobytes in the input
d79 1
a79 1
checksum, the number of 512-byte blocks in the input
d86 1
a86 1
parenthesis, an equal sign and the cryptographic hash of the input.
d104 9
a112 9
.Em cksum ,
.Em md4 ,
.Em md5 ,
.Em rmd160 ,
.Em sha1 ,
.Em sha256 ,
.Em sha384 ,
.Em sha512 ,
.Em sum
d114 1
a114 1
.Em sysvsum .
d118 4
a121 7
.It Fl o Ar \&1 No \&| Ar \&2
Use historic algorithms instead of the (superior) default one
(see below).
.It Fl s Ar string
Prints a checksum of the given
.Ar string .
.It Fl c Ar [ checklist ... ]
d127 1
a127 2
This will validate any of the supported checksums (see
.Xr cksum 1 ).
d129 3
d135 3
d145 1
a145 1
.Em sum )
d161 1
a161 1
.Em sysvsum )
d176 1
a176 1
the default algorithm except that the size of the file in bytes is
d188 1
a188 1
.St -iso8802-3
a191 1
.Pp
d241 1
a241 1
article.
d265 3
a267 3
.Em cksum ,
.Em md4 ,
.Em sum ,
d269 1
a269 1
.Em sysvsum
@

