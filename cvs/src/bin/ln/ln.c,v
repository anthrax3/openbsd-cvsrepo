head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.8
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.4
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.2
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2016.05.10.20.20.43;	author tim;	state Exp;
branches;
next	1.23;
commitid	tPNfYLf4GDMuBJQ2;

1.23
date	2015.10.10.22.36.46;	author doug;	state Exp;
branches;
next	1.22;
commitid	acdTdci5LP6290Ci;

1.22
date	2015.01.16.06.39.32;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	Uu5nFG3wCl0LACBb;

1.21
date	2014.05.23.04.38.57;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2014.05.07.12.37.04;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.12.06.00.05;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2008.05.28.19.31.38;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.16.18.13.57;	author sobrado;	state Exp;
branches;
next	1.15;

1.15
date	2007.07.31.03.03.12;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.25.04.38.26;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.02.20.36.56;	author cloder;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.15.00.51.57;	author uwe;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.17.00.36.07;	author jaredy;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.04.12.44.17;	author nino;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.04.04.26.40;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.07;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.09.03.33.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.09.00.03.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.12.14.12.18.01;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.12.40.56;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Fix operator precedence error; OK guenther@@ millert@@
@
text
@/*	$OpenBSD: ln.c,v 1.23 2015/10/10 22:36:46 doug Exp $	*/
/*	$NetBSD: ln.c,v 1.10 1995/03/21 09:06:10 cgd Exp $	*/

/*
 * Copyright (c) 1987, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

int	fflag;				/* Unlink existing files. */
int	hflag;				/* Check new name for symlink first. */
int	Pflag;				/* Hard link to symlink. */
int	sflag;				/* Symbolic, not hard, link. */

int	linkit(char *, char *, int);
void	usage(void) __dead;

int
main(int argc, char *argv[])
{
	struct stat sb;
	int ch, exitval;
	char *sourcedir;

	if (pledge("stdio rpath cpath", NULL) == -1)
		err(1, "pledge");

	while ((ch = getopt(argc, argv, "fhLnPs")) != -1)
		switch (ch) {
		case 'f':
			fflag = 1;
			break;
		case 'h':
		case 'n':
			hflag = 1;
			break;
		case 'L':
			Pflag = 0;
			break;
		case 'P':
			Pflag = 1;
			break;
		case 's':
			sflag = 1;
			break;
		default:
			usage();
		}

	argv += optind;
	argc -= optind;

	switch(argc) {
	case 0:
		usage();
	case 1:				/* ln target */
		exit(linkit(argv[0], ".", 1));
	case 2:				/* ln target source */
		exit(linkit(argv[0], argv[1], 0));
	}
					/* ln target1 target2 directory */
	sourcedir = argv[argc - 1];
	if (stat(sourcedir, &sb))
		err(1, "%s", sourcedir);
	if (!S_ISDIR(sb.st_mode))
		usage();
	for (exitval = 0; *argv != sourcedir; ++argv)
		exitval |= linkit(*argv, sourcedir, 1);
	exit(exitval);
}

 /*
  * Nomenclature warning!
  *
  * In this source "target" and "source" are used the opposite way they
  * are used in the ln(1) manual.  Here "target" is the existing file and
  * "source" specifies the to-be-created link to "target".
  */
int
linkit(char *target, char *source, int isdir)
{
	struct stat sb;
	char *p, path[PATH_MAX];
	int (*statf)(const char *, struct stat *);
	int exists, n;

	if (!sflag) {
		/* If target doesn't exist, quit now. */
		if ((Pflag ? lstat : stat)(target, &sb)) {
			warn("%s", target);
			return (1);
		}
		/* Only symbolic links to directories. */
		if (S_ISDIR(sb.st_mode)) {
			warnc(EISDIR, "%s", target);
			return (1);
		}
	}

	statf = hflag ? lstat : stat;

	/* If the source is a directory, append the target's name. */
	if (isdir || (!statf(source, &sb) && S_ISDIR(sb.st_mode))) {
		if ((p = basename(target)) == NULL) {
			warn("%s", target);
			return (1);
		}
		n = snprintf(path, sizeof(path), "%s/%s", source, p);
		if (n < 0 || n >= sizeof(path)) {
			warnc(ENAMETOOLONG, "%s/%s", source, p);
			return (1);
		}
		source = path;
	}

	exists = (lstat(source, &sb) == 0);
	/*
	 * If doing hard links and the source (destination) exists and it
	 * actually is the same file like the target (existing file), we
	 * complain that the files are identical.  If -f is specified, we
	 * accept the job as already done and return with success.
	 */
	if (exists && !sflag) {
		struct stat tsb;

		if ((Pflag ? lstat : stat)(target, &tsb)) {
			warn("%s: disappeared", target);
			return (1);
		}

		if (tsb.st_dev == sb.st_dev && tsb.st_ino == sb.st_ino) {
			if (fflag)
				return (0);
			else {
				warnx("%s and %s are identical (nothing done).",
				    target, source);
				return (1);
			}
		}
	}
	/*
	 * If the file exists, and -f was specified, unlink it.
	 * Attempt the link.
	 */
	if ((fflag && unlink(source) < 0 && errno != ENOENT) ||
	    (sflag ? symlink(target, source) :
	    linkat(AT_FDCWD, target, AT_FDCWD, source,
	    Pflag ? 0 : AT_SYMLINK_FOLLOW))) {
		warn("%s", source);
		return (1);
	}

	return (0);
}

void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr,
	    "usage: %s [-fhLnPs] source [target]\n"
	    "       %s [-fLPs] source ... [directory]\n",
	    __progname, __progname);
	exit(1);
}
@


1.23
log
@Pledge that ln only needs "stdio rpath cpath".

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.22 2015/01/16 06:39:32 deraadt Exp $	*/
d182 1
a182 1
	    sflag ? symlink(target, source) :
d184 1
a184 1
	    Pflag ? 0 : AT_SYMLINK_FOLLOW)) {
@


1.22
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.21 2014/05/23 04:38:57 guenther Exp $	*/
d60 3
@


1.21
log
@Use errc/warnc to simplify code.

ok jca@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.20 2014/05/07 12:37:04 schwarze Exp $	*/
d33 1
a33 1
#include <sys/param.h>
d44 1
d116 1
a116 1
	char *p, path[MAXPATHLEN];
@


1.20
log
@Remove the undocumented and ineffective -F option (force hard link
to directory).  This doesn't reduce functionality but merely results
in a better error message when trying to use the option,
and it simplifies the code.

The -f option first appeared in AT&T Version 7 UNIX (1979), and Keith
Bostic renamed it to -F for 4.3BSD-Reno in 1990 because it conflicted
with System V and POSIX.  Meanwhile, NetBSD, FreeBSD, and DragonFly
removed it, too.

From Tristan Le Guern <tleguern at bouledef dot eu>.
OK guenther@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.19 2013/03/12 06:00:05 guenther Exp $	*/
d127 1
a127 2
			errno = EISDIR;
			warn("%s", target);
d142 1
a142 2
			errno = ENAMETOOLONG;
			warn("%s/%s", source, p);
@


1.19
log
@Add support for the -L and -P options.

Based on a patch from Kent R. Spillner (kspillner (at) acm.org)
ok jmc@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.18 2009/10/27 23:59:21 deraadt Exp $	*/
a44 1
int	dirflag;			/* Undocumented directory flag. */
d60 1
a60 1
	while ((ch = getopt(argc, argv, "FfhLnPs")) != -1)
a61 3
		case 'F':
			dirflag = 1;	/* XXX: deliberately undocumented. */
			break;
d125 2
a126 2
		/* Only symbolic links to directories, unless -F option used. */
		if (!dirflag && S_ISDIR(sb.st_mode)) {
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.17 2008/05/28 19:31:38 millert Exp $	*/
d38 1
d48 1
a49 2
					/* System link call. */
int (*linkf)(const char *, const char *);
d61 1
a61 1
	while ((ch = getopt(argc, argv, "Ffhns")) != -1)
d73 6
a88 2
	linkf = sflag ? symlink : link;

d125 1
a125 1
		if (stat(target, &sb)) {
d164 1
a164 1
		if (stat(target, &tsb) != 0) {
d184 3
a186 1
	    (*linkf)(target, source)) {
d200 2
a201 2
	    "usage: %s [-fhns] source [target]\n"
	    "       %s [-fs] source ... [directory]\n",
@


1.17
log
@In -f mode, don't print a warning if source and target already point
to the same inode.  This is consistent with other implementations.
OK deraadt@@ miod@@ ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.16 2007/09/16 18:13:57 sobrado Exp $	*/
a31 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1987, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)ln.c	8.2 (Berkeley) 3/31/94";
#else
static const char rcsid[] = "$OpenBSD: ln.c,v 1.16 2007/09/16 18:13:57 sobrado Exp $";
#endif
#endif /* not lint */
@


1.16
log
@"source" and "target" can be either files or directories;
cp(1) and ln(1) must have a synopsis consistent with mkdir(1),
mv(1), rmdir(1) and others

ok jmc@@, millert@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.15 2007/07/31 03:03:12 ray Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.15 2007/07/31 03:03:12 ray Exp $";
a179 2
			warnx("%s and %s are identical (nothing done).",
			    target, source);
d182 3
a184 1
			else
d186 1
@


1.15
log
@Adapted from DragonflyBSD revisions 1.10 and 1.11: warn when source
and target are identical.  When -f is specified, don't delete source.

OK sobrado, feedback from paesco, kettenis, and tedu.
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.14 2006/04/25 04:38:26 deraadt Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.14 2006/04/25 04:38:26 deraadt Exp $";
d207 2
a208 2
	    "usage: %s [-fhns] sourcefile [targetfile]\n"
	    "       %s [-fs] sourcefile ... [targetdir]\n",
@


1.14
log
@mark usage() __dead
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.13 2005/12/02 20:36:56 cloder Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.13 2005/12/02 20:36:56 cloder Exp $";
d118 7
d131 1
a131 1
	int n;
d164 24
@


1.13
log
@Make usage() and manual match. OK jmc, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.12 2005/04/15 00:51:57 uwe Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.12 2005/04/15 00:51:57 uwe Exp $";
d66 1
a66 1
void	usage(void);
@


1.12
log
@check snprintf return value and abort if the concatenated path is too
long instead of using the truncated path.  also, use the strerror()
database instead of repeating the text here.
ok krw@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.11 2004/12/17 00:36:07 jaredy Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.11 2004/12/17 00:36:07 jaredy Exp $";
d176 2
a177 2
	    "usage: %s [-fhns] file1 file2\n"
	    "       %s [-fs] file ... directory\n",
@


1.11
log
@sync usage

manpage:
- indent examples
- document exit status

ok jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.10 2003/06/02 23:32:08 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.10 2003/06/02 23:32:08 millert Exp $";
d124 1
d134 2
a135 1
			warnx("%s: is a directory", target);
d148 6
a153 1
		(void)snprintf(path, sizeof(path), "%s/%s", source, p);
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.9 2003/05/04 12:44:17 nino Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.9 2003/05/04 12:44:17 nino Exp $";
d169 3
a171 2
	    "usage: %s [-fhns] file1 file2\n\tln [-fs] file ... directory\n",
	    __progname);
@


1.9
log
@The custom logic used for determining the basename of source file
was flawed in that it did not account for trailing slashes. Use
basename(3) instead. Fixes invocations where target is a directory
and source has a trailing slash (e.g. ln -s /tmp/ .).

Ok millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.8 2002/07/04 04:26:40 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.8 2002/07/04 04:26:40 deraadt Exp $";
@


1.8
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.7 2002/02/16 21:27:07 millert Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.7 2002/02/16 21:27:07 millert Exp $";
d56 1
d146 4
a149 4
		if ((p = strrchr(target, '/')) == NULL)
			p = target;
		else
			++p;
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.6 2001/08/09 03:33:17 millert Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.6 2001/08/09 03:33:17 millert Exp $";
d72 1
a72 3
main(argc, argv)
	int argc;
	char *argv[];
d122 1
a122 3
linkit(target, source, isdir)
	char *target, *source;
	int isdir;
d167 1
a167 1
usage()
@


1.6
log
@Actually use the statf function pointer which I missed while hand-patching.
Also, don't mention the -h and -n flags for the 2nd usage line since they
are no-ops in that case.
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.5 2001/08/09 00:03:12 millert Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.5 2001/08/09 00:03:12 millert Exp $";
d66 1
a66 1
int (*linkf) __P((const char *, const char *));
d68 2
a69 2
int	linkit __P((char *, char *, int));
void	usage __P((void));
d130 1
a130 1
	int (*statf) __P((const char *, struct stat *));
@


1.5
log
@Add -h flag to prevent following a symlink to a dir as the dest.
Also add -n as an alias for -h for compat with GNU ln.
Patch from Phil.Pennock@@globnix.org with minor changes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.4 1996/12/14 12:18:01 mickey Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: ln.c,v 1.4 1996/12/14 12:18:01 mickey Exp $";
d148 1
a148 1
	if (isdir || (!stat(source, &sb) && S_ISDIR(sb.st_mode))) {
d176 1
a176 1
	    "usage: %s [-fhns] file1 file2\n\tln [-fhns] file ... directory\n",
@


1.4
log
@-Wall'ing.
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.3 1996/08/02 12:40:56 deraadt Exp $	*/
d38 1
a38 1
static char copyright[] =
d45 1
a45 1
static char sccsid[] = "@@(#)ln.c	8.2 (Berkeley) 3/31/94";
d47 1
a47 1
static char rcsid[] = "$OpenBSD: ln.c,v 1.3 1996/08/02 12:40:56 deraadt Exp $";
d63 1
d80 1
a80 1
	while ((ch = getopt(argc, argv, "Ffs")) != -1)
d88 4
d130 1
d145 2
d173 1
d176 2
a177 1
	    "usage:\tln [-fs] file1 file2\n\tln [-fs] file ... directory\n");
@


1.3
log
@zap getopt() case of -?, come on, it is the default!
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.2 1996/06/23 14:20:16 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: ln.c,v 1.2 1996/06/23 14:20:16 deraadt Exp $";
d140 1
a140 1
	if (isdir || !stat(source, &sb) && S_ISDIR(sb.st_mode)) {
d153 1
a153 1
	if (fflag && unlink(source) < 0 && errno != ENOENT ||
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: ln.c,v 1.10 1995/03/21 09:06:10 cgd Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: ln.c,v 1.10 1995/03/21 09:06:10 cgd Exp $";
a89 1
		case '?':
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: ln.c,v 1.10 1995/03/21 09:06:10 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
