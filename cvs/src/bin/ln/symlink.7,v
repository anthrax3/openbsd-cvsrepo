head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.10
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.8
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.4
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.16
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.14
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.16
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.14
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.10
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.12
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.8
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.16
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.14
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.6
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.4
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.11.0.6
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.4
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.19
date	2014.12.13.21.00.19;	author guenther;	state Exp;
branches;
next	1.18;
commitid	VKuDFBpiTmOtkRdR;

1.18
date	2011.07.26.20.41.46;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.31.19.19.14;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.13.11.09.56;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.13.14.00.15;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.04.22.35.28;	author pjanzen;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.10.18.42.43;	author hugh;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.24.03.28.37;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.23.21.10.22;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.07.09.13.35.58;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.07.04.18.59.37;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.07.04.11.53.50;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.06.03.09.50.33;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	97.01.26.23.34.54;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.01.22.21.36.31;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.20.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.04.08.49.48;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Add .Xr to chflagsat(2)
@
text
@.\"	$OpenBSD: symlink.7,v 1.18 2011/07/26 20:41:46 matthew Exp $
.\"	$NetBSD: symlink.7,v 1.4 1996/04/25 15:44:56 mycroft Exp $
.\"
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)symlink.7	8.3 (Berkeley) 3/31/94
.\"
.Dd $Mdocdate: July 26 2011 $
.Dt SYMLINK 7
.Os
.Sh NAME
.Nm symlink
.Nd symbolic link handling
.Sh DESCRIPTION
Symbolic links are files that act as pointers to other files.
To understand their behavior, it is necessary to understand how hard links
work.
A hard link to a file is indistinguishable from the original file because
it is a reference to the object underlying the original file name.
Changes to a file are independent of the name used to reference the
file.
Hard links may not refer to directories and may not reference files
on different file systems.
A symbolic link contains the name of the file to which it is linked;
i.e., it is a pointer to a name, and not to an underlying object.
For this reason, symbolic links may reference directories and may span
file systems.
.Pp
Because a symbolic link and its referenced object coexist in the filesystem
name space, confusion can arise in distinguishing between the link itself
and the referenced object.
Historically, commands and system calls have adopted their own
link-following conventions in a somewhat ad hoc fashion.
Rules for a more uniform approach, as they are implemented in this system,
are outlined here.
It is important that local applications conform to these rules, too,
so that the user interface can be as consistent as possible.
.Pp
Symbolic links are handled either by operating on the link itself,
or by operating on the object referenced by the link.
In the latter case,
an application or system call is said to
.Dq follow
the link.
Symbolic links may reference other symbolic links,
in which case the links are dereferenced until an object that is
not a symbolic link is found,
a symbolic link which references a file which doesn't exist is found,
or a loop is detected.
(Loop detection is done by placing an upper limit on the number of
links that may be followed, with an error resulting if this limit is
exceeded.)
.Pp
There are three separate areas that need to be discussed.
They are as follows:
.Pp
.Bl -enum -compact -offset indent
.It
Symbolic links used as file name arguments for system calls.
.It
Symbolic links specified as command-line arguments to utilities that
are not traversing a file tree.
.It
Symbolic links encountered by utilities that are traversing a file tree
(either specified on the command line or encountered as part of the
file hierarchy walk).
.El
.Ss System calls
The first area is symbolic links used as file name arguments for
system calls.
.Pp
Except as noted below, all system calls follow symbolic links.
For example, if there were a symbolic link
.Dq Li slink
which pointed to a file named
.Dq Li afile ,
the system call
.Dq Li open("slink" ...)
would return a file descriptor to the file
.Dq afile .
.Pp
There are at least five system calls that do not follow links, and which
operate on the symbolic link itself.
They are:
.Xr lchown 2 ,
.Xr lstat 2 ,
.Xr readlink 2 ,
.Xr rename 2 ,
and
.Xr unlink 2 .
Because
.Xr remove 3
is an alias for
.Xr unlink 2 ,
it also does not follow symbolic links.
.Pp
Additionally, the following system calls accept a
.Fa flag
argument to control whether or not to follow symbolic links:
.Xr chflagsat 2 ,
.Xr fchmodat 2 ,
.Xr fchownat 2 ,
.Xr fstatat 2 ,
.Xr linkat 2 ,
and
.Xr utimensat 2 .
.Pp
The
.Bx 4.4
system differs from historical 4BSD systems in that the system call
.Xr chown 2
has been changed to follow symbolic links.
The
.Xr lchown 2
system call was added later when the limitations of the new
.Xr chown 2
became apparent.
.Ss Commands not traversing a file tree
The second area is symbolic links, specified as command-line file
name arguments, to commands which are not traversing a file tree.
.Pp
Except as noted below, commands follow symbolic links named as
command-line arguments.
For example, if there were a symbolic link
.Dq Li slink
which pointed to a file named
.Dq Li afile ,
the command
.Dq Li cat slink
would display the contents of the file
.Dq Li afile .
.Pp
It is important to realize that this rule includes commands which may
optionally traverse file trees, e.g., the command
.Dq Li "chown owner file"
is included in this rule, while the command
.Dq Li "chown -R owner file"
is not.
(The latter is described in the third area, below.)
.Pp
If it is explicitly intended that the command operate on the symbolic
link instead of following the symbolic link -- e.g., it is desired that
.Dq Li "chown owner slink"
change the ownership of
.Dq Li slink ,
not of what it points to -- the
.Fl h
option should be used.
In the above example,
.Dq Li "chown owner slink"
would change the owner of
.Dq Li afile
to
.Dq Li owner ,
while
.Dq Li "chown -h owner slink"
would change the ownership of
.Dq Li slink .
.Pp
There are several exceptions to this rule.
The
.Xr mv 1
and
.Xr rm 1
commands do not follow symbolic links named as arguments,
but respectively attempt to rename and delete them.
(Note that if the symbolic link references a file via a relative path,
moving it to another directory may very well cause it to stop working,
since the path may no longer be correct.)
.Pp
The
.Xr ls 1
command is also an exception to this rule.
For compatibility with historic systems (when
.Nm ls
is not doing a tree walk, i.e., the
.Fl R
option is not specified),
the
.Nm ls
command follows symbolic links named as arguments if the
.Fl L
option is specified,
or if the
.Fl F ,
.Fl d ,
or
.Fl l
options are not specified.
(If the
.Fl L
option is specified,
.Nm ls
always follows symbolic links.
The
.Fl L
option affects its behavior even though it is not doing a walk of
a file tree.)
.Pp
The
.Xr file 1
command behaves as
.Xr ls 1
in that the
.Fl L
option makes it follow a symbolic link.
By default,
.Dq Li "file slink"
will report that
.Dq Li slink
is a symbolic link.
This behavior is different from
.Xr file 1
on some other systems, where the
.Fl h
convention is followed.
.Pp
The
.Bx 4.4
system differs from historical 4BSD systems in that the
.Xr chown 8 ,
.Xr chgrp 1 ,
and
.Xr file 1
commands follow symbolic links specified on the command line
(unless the
.Fl h
option is used).
.Ss Commands traversing a file tree
The following commands either optionally or always traverse file trees:
.Xr chflags 1 ,
.Xr chgrp 1 ,
.Xr chmod 1 ,
.Xr cp 1 ,
.Xr du 1 ,
.Xr find 1 ,
.Xr ls 1 ,
.Xr pax 1 ,
.Xr rm 1 ,
.Xr tar 1 ,
and
.Xr chown 8 .
.Pp
It is important to realize that the following rules apply equally to
symbolic links encountered during the file tree traversal and symbolic
links listed as command-line arguments.
.Pp
The first rule applies to symbolic links that reference files that are
not of type directory.
Operations that apply to symbolic links are performed on the links
themselves, but otherwise the links are ignored.
.Pp
For example, the command
.Dq Li "chown -R user slink directory"
will ignore
.Dq Li slink ,
because the
.Fl h
option was not given.
Any symbolic links encountered during the tree traversal will also be
ignored.
The command
.Dq Li "rm -r slink directory"
will remove
.Dq Li slink ,
as well as any symbolic links encountered in the tree traversal of
.Dq Li directory ,
because symbolic links may be removed.
In no case will either
.Xr chown 8
or
.Xr rm 1
follow the symlink to affect the file which
.Dq Li slink
references.
.Pp
The second rule applies to symbolic links that reference files of type
directory.
Symbolic links which reference files of type directory are never
.Dq followed
by default.
This is often referred to as a
.Dq physical
walk, as opposed to a
.Dq logical
walk (where symbolic links referencing directories are followed).
.Pp
As consistently as possible, it is possible to make commands doing a file tree
walk follow any symbolic links named on the command line, regardless
of the type of file they reference, by specifying the
.Fl H
(for
.Dq half\-logical )
flag.
This flag is intended to make the command-line name space look
like the logical name space.
(Note:
for commands that do not always do file tree traversals, the
.Fl H
flag will be ignored if the
.Fl R
flag is not also specified.)
.Pp
For example, the command
.Dq Li "chown -HR user slink"
will traverse the file hierarchy rooted in the file pointed to by
.Dq Li slink .
The
.Fl H
is not the same as the previously discussed
.Fl h
flag.
The
.Fl H
flag causes symbolic links specified on the command line to be
dereferenced both for the purposes of the action to be performed
and the tree walk, and it is as if the user had specified the
name of the file to which the symbolic link pointed.
.Pp
As consistently as possible, it is possible to make commands doing a file tree
walk follow any symbolic links named on the command line, as well as
any symbolic links encountered during the traversal, regardless of
the type of file they reference, by specifying the
.Fl L
(for
.Dq logical )
flag.
This flag is intended to make the entire name space look like
the logical name space.
(Note:
for commands that do not always do file tree traversals, the
.Fl L
flag will be ignored if the
.Fl R
flag is not also specified.)
.Pp
For example, the command
.Dq Li "chown -LR user slink"
will change the owner of the file referenced by
.Dq Li slink .
If
.Dq Li slink
references a directory,
.Nm chown
will traverse the file hierarchy rooted in the directory that it
references.
In addition, if any symbolic links are encountered in any file tree that
.Nm chown
traverses, they will be treated in the same fashion as
.Dq Li slink .
.Pp
As consistently as possible, it is possible to specify the default behavior by
specifying the
.Fl P
(for
.Dq physical )
flag.
This flag is intended to make the entire name space look like the
physical name space.
.Pp
For commands that do not by default do file tree traversals, the
.Fl H ,
.Fl L ,
and
.Fl P
flags are ignored if the
.Fl R
flag is not also specified.
In addition, the
.Fl H ,
.Fl L ,
and
.Fl P
options may be specified more than once;
the last one specified determines the command's behavior.
This is intended to permit aliasing commands to behave one way
or the other, and then override that behavior on the command line.
.Pp
The
.Xr ls 1
and
.Xr rm 1
commands have exceptions to these rules.
The
.Nm rm
command operates on the symbolic link, and not the file it references,
and therefore never follows a symbolic link.
The
.Nm rm
command does not support the
.Fl H ,
.Fl L ,
or
.Fl P
options.
.Pp
To maintain compatibility with historic systems,
the
.Nm ls
command never follows symbolic links unless the
.Fl L
flag is specified.
If the
.Fl L
flag is specified,
.Nm ls
follows all symbolic links,
regardless of their type,
whether specified on the command line or encountered in the tree walk.
The
.Nm ls
command does not support the
.Fl H
or
.Fl P
options.
.Sh SEE ALSO
.Xr chflags 1 ,
.Xr chgrp 1 ,
.Xr chmod 1 ,
.Xr cp 1 ,
.Xr du 1 ,
.Xr find 1 ,
.Xr ln 1 ,
.Xr ls 1 ,
.Xr mv 1 ,
.Xr pax 1 ,
.Xr rm 1 ,
.Xr tar 1 ,
.Xr lchown 2 ,
.Xr lstat 2 ,
.Xr readlink 2 ,
.Xr rename 2 ,
.Xr symlink 2 ,
.Xr unlink 2 ,
.Xr fts 3 ,
.Xr remove 3 ,
.Xr chown 8
@


1.18
log
@Document system calls that optionally traverse symlinks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.17 2007/05/31 19:19:14 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d125 1
@


1.17
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.16 2003/06/02 23:32:08 millert Exp $
d33 1
a33 1
.Dd $Mdocdate$
d121 10
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.15 2003/04/13 11:09:56 jmc Exp $
d33 1
a33 1
.Dd January 25, 1997
@


1.15
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.14 2001/11/13 14:00:15 mpech Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@o) start new sentence on a new line;
o) don't use .Pp before/after .Ss;
o) wrap long lines;
o) fix bogus .Xr usage;

millert@@ ok;
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.13 2001/10/04 22:35:28 pjanzen Exp $
d45 1
a45 1
To understand their behavior, you must first understand how hard links
d62 2
a63 2
link-following conventions in a somewhat ad-hoc fashion.
Rules for more a uniform approach, as they are implemented in this system,
d239 2
a240 2
.Nm chown ,
.Nm chgrp ,
d242 1
a242 1
.Nm file
d288 1
a288 1
.Nm chown
d290 1
a290 1
.Nm rm
d306 1
a306 1
As consistently as possible, you can make commands doing a file tree
d338 1
a338 1
As consistently as possible, you can make commands doing a file tree
d370 1
a370 1
As consistently as possible, you can specify the default behavior by
d387 1
a387 1
In addition, you may specify the
d392 3
a394 3
options more than once; the last one specified determines the
command's behavior.
This is intended to permit you to alias commands to behave one way
@


1.13
log
@Grammar; also, document the true behaviour of the examples.
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.12 2001/08/10 18:42:43 hugh Exp $
d224 2
a225 1
option makes it follow a symbolic link.  By default,
@


1.12
log
@Address PR 1993. This rewording has been deemed satisfactory by the
submitter's reportedly pedantic boss.
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.11 2000/03/24 03:28:37 aaron Exp $
d53 2
a54 2
A symbolic link contains the name of the file to which it is linked,
i.e., it is a pointer to another name, and not to an underlying object.
d61 2
a62 2
Historically, commands and system calls have adopted their own link
following conventions in a somewhat ad-hoc fashion.
d80 1
a80 1
links that may be followed, and an error results if this limit is
d153 1
a153 1
.Dq Li "chown file"
d155 1
a155 1
.Dq Li "chown -R file"
d160 5
a164 5
link instead of following the symbolic link, e.g., it is desired that
.Dq Li "file slink"
display the type of file that
.Dq Li slink
is, whether it is a symbolic link or not, the
d168 5
a172 3
.Dq Li "file slink"
would report the type of the file referenced by
.Dq Li slink ,
d174 3
a176 4
.Dq Li "file -h slink"
would report that
.Dq Li slink
was a symbolic link.
d178 1
a178 1
There are three exceptions to this rule.
d185 1
a185 1
(Note, if the symbolic link references a file via a relative path,
d213 1
a213 2
.Nm ls
is the only command where the
d219 17
d242 4
a245 1
commands follow symbolic links specified on the command line.
d314 2
a315 1
(Note, for commands that do not always do file tree traversals, the
d325 1
a325 1
Note, the
d347 2
a348 1
(Note, for commands that do not always do file tree traversals, the
@


1.11
log
@All man pages should have a DESCRIPTION section. Fix some formatting nits
while we're here.
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.10 2000/03/23 21:10:22 aaron Exp $
d270 1
a270 1
affect the file which
d272 1
a272 1
references in any way.
@


1.10
log
@Fix some formatting problems I missed before.
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.9 1999/07/09 13:35:58 aaron Exp $
d43 1
a43 1
.Sh SYMBOLIC LINK HANDLING
d97 1
a97 1
.Ss System calls.
d136 1
a136 1
.Ss Commands not traversing a file tree.
d203 1
a203 1
.Fl d
d222 1
a222 1
.Nm chgrp
d226 1
a226 1
.Ss Commands traversing a file tree.
d237 1
a237 1
.Xr tar 1
d358 1
a358 1
.Fl L
d366 1
a366 1
.Fl L
d387 1
a387 1
.Fl L
@


1.9
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.8 1999/07/04 18:59:37 aaron Exp $
d130 2
a131 1
has been changed to follow symbolic links.  The
@


1.8
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.7 1999/07/04 11:53:50 aaron Exp $
d141 1
a141 1
For example, if there were a symbolic link 
d287 1
a287 1
.Fl H 
@


1.7
log
@correct use of .Nm; some other formatting nits
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.6 1999/06/03 09:50:33 aaron Exp $
d85 1
a85 1
.sp
@


1.6
log
@use the hyphenated form "command-line" in the case of a compound adjective;
pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.5 1997/01/26 23:34:54 downsj Exp $
d54 1
a54 1
i.e. it is a pointer to another name, and not to an underlying object.
d192 1
a192 1
is not doing a tree walk, i.e. the
d211 1
a211 1
.Nm Ls
@


1.5
log
@We don't follow old 4.4BSD symlink semantics anylonger.
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.4 1997/01/22 21:36:31 kstailey Exp $
d90 1
a90 1
Symbolic links specified as command line arguments to utilities that
d136 1
a136 1
The second area is symbolic links, specified as command line file
d139 2
a140 2
Except as noted below, commands follow symbolic links named as command
line arguments.
d151 1
a151 1
optionally traverse file trees, e.g. the command
d242 1
a242 1
links listed as command line arguments.
d291 1
a291 1
This flag is intended to make the command line name space look
@


1.4
log
@xref manual pages via SEE ALSO
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.3 1996/06/23 14:20:16 deraadt Exp $
d37 1
a37 1
.Dd March 31, 1994
d39 1
a39 1
.Os BSD 4
d111 2
a112 2
There are four system calls that do not follow links, and which operate
on the symbolic link itself.
d114 1
d130 5
a134 1
has been changed to follow symbolic links.
d253 3
a255 1
because symbolic links in this system do not have owners.
d424 1
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: symlink.7,v 1.4 1996/04/25 15:44:56 mycroft Exp $
d420 1
@


1.2
log
@old 4.4 symlink behaviour no long valid
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: symlink.7,v 1.3 1995/03/21 09:06:13 cgd Exp $
a122 12
.Pp
Unlike other filesystem objects, symbolic links do not have an owner,
group, permissions, access and modification times, etc.
The only attributes returned from an
.Xr lstat 2
that refer to the symbolic link itself are the file type (S_IFLNK),
size, blocks, and link count (always 1).
The other attributes are filled in from the directory that contains
the link.
For portability reasons, you should be aware that other implementations
(including historic implementations of 4BSD), implement symbolic links
such that they have the same attributes as any other file.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
