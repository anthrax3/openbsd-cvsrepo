head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.10
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.14.0.18
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.16
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.14
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.12
	OPENBSD_5_0:1.14.0.10
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.8
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.20
date	2014.11.20.05.51.20;	author jsg;	state Exp;
branches;
next	1.19;
commitid	3Z7yItGpFsmshk0c;

1.19
date	2014.11.16.19.07.50;	author bluhm;	state Exp;
branches;
next	1.18;
commitid	ohVlnYugDUFcNu2w;

1.18
date	2014.11.14.03.20.36;	author doug;	state Exp;
branches;
next	1.17;
commitid	M08zdkdK3z1pxKwF;

1.17
date	2014.05.18.16.36.41;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2013.11.25.12.51.10;	author benno;	state Exp;
branches;
next	1.15;

1.15
date	2013.11.12.04.36.01;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.31.21.03.48;	author tobias;	state Exp;
branches;
next	1.13;

1.13
date	2008.02.27.16.07.20;	author mpf;	state Exp;
branches;
next	1.12;

1.12
date	2008.02.26.10.09.58;	author mpf;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.12.23.59.40;	author mpf;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.16.20.01.23;	author mpf;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.16.06.06.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.13.16.35.16;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.11.14.39.15;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.11.23.06.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.11.22.16.15;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.01.06.48.34;	author cnst;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.29.01.41.27;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.29.01.34.36;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.29.01.21.38;	author beck;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Don't allow embedded nul characters in strings.
Fixes a pfctl crash with an anchor name containing
an embedded nul found with the afl fuzzer.

pfctl parse.y patch from and ok deraadt@@
@
text
@/*	$OpenBSD: parse.y,v 1.19 2014/11/16 19:07:50 bluhm Exp $ */

/*
 * Copyright (c) 2006 Bob Beck <beck@@openbsd.org>
 * Copyright (c) 2002-2006 Henning Brauer <henning@@openbsd.org>
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 * Copyright (c) 2001 Daniel Hartmeier.  All rights reserved.
 * Copyright (c) 2001 Theo de Raadt.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

%{
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/queue.h>

#include <ctype.h>
#include <err.h>
#include <libgen.h>
#include <limits.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

TAILQ_HEAD(files, file)		 files = TAILQ_HEAD_INITIALIZER(files);
static struct file {
	TAILQ_ENTRY(file)	 entry;
	FILE			*stream;
	char			*name;
	int			 lineno;
	int			 errors;
} *file, *topfile;
struct file	*pushfile(const char *);
int		 popfile(void);
int		 yyparse(void);
int		 yylex(void);
int		 yyerror(const char *, ...)
    __attribute__((__format__ (printf, 1, 2)))
    __attribute__((__nonnull__ (1)));
int		 kw_cmp(const void *, const void *);
int		 lookup(char *);
int		 lgetc(int);
int		 lungetc(int);
int		 findeol(void);
char		*parse_tapedev(const char *, const char *, int);
struct changer	*new_changer(char *);

struct changer {
	TAILQ_ENTRY(changer)	  entry;
	char			 *name;
	char			**drives;
	u_int			  drivecnt;
};
TAILQ_HEAD(changers, changer)	 changers;
struct changer			*curchanger;

typedef struct {
	union {
		int64_t			 number;
		char			*string;
	} v;
	int lineno;
} YYSTYPE;

%}

%token	CHANGER
%token	DRIVE
%token	ERROR
%token	<v.string>		STRING
%token	<v.number>		NUMBER
%%

grammar		: /* empty */
		| grammar '\n'
		| grammar main '\n'
		| grammar error '\n'		{ file->errors++; }
		;

optnl		: '\n' optnl
		|
		;

nl		: '\n' optnl
		;

main		: CHANGER STRING optnl '{' optnl {
			curchanger = new_changer($2);
		}
		    changeropts_l '}' {
			TAILQ_INSERT_TAIL(&changers, curchanger, entry);
			curchanger = NULL;
		}
		;

changeropts_l	: changeropts_l changeroptsl
		| changeroptsl
		;

changeroptsl	: changeropts nl
		| error nl
		;

changeropts	: DRIVE STRING	{
			void *newp;

			if ((newp = reallocarray(curchanger->drives,
			    curchanger->drivecnt + 1,
			    sizeof(curchanger->drives))) == NULL)
				err(1, NULL);
			curchanger->drives = newp;
			if ((curchanger->drives[curchanger->drivecnt] =
			    strdup($2)) == NULL)
				err(1, NULL);
			curchanger->drivecnt++;
			free($2);
		}
		;

%%

struct keywords {
	const char	*k_name;
	int		 k_val;
};

int
yyerror(const char *fmt, ...)
{
	va_list		 ap;
	char		*msg;

	file->errors++;
	va_start(ap, fmt);
	if (vasprintf(&msg, fmt, ap) == -1)
		err(1, "yyerror vasprintf");
	va_end(ap);
	err(1, "%s:%d: %s", file->name, yylval.lineno, msg);
	free(msg);
	return (0);
}

int
kw_cmp(const void *k, const void *e)
{
	return (strcmp(k, ((const struct keywords *)e)->k_name));
}

int
lookup(char *s)
{
	/* this has to be sorted always */
	static const struct keywords keywords[] = {
		{ "changer",		CHANGER},
		{ "drive",		DRIVE}
	};
	const struct keywords	*p;

	p = bsearch(s, keywords, sizeof(keywords)/sizeof(keywords[0]),
	    sizeof(keywords[0]), kw_cmp);

	if (p)
		return (p->k_val);
	else
		return (STRING);
}

#define MAXPUSHBACK	128

u_char	*parsebuf;
int	 parseindex;
u_char	 pushback_buffer[MAXPUSHBACK];
int	 pushback_index = 0;

int
lgetc(int quotec)
{
	int		c, next;

	if (parsebuf) {
		/* Read character from the parsebuffer instead of input. */
		if (parseindex >= 0) {
			c = parsebuf[parseindex++];
			if (c != '\0')
				return (c);
			parsebuf = NULL;
		} else
			parseindex++;
	}

	if (pushback_index)
		return (pushback_buffer[--pushback_index]);

	if (quotec) {
		if ((c = getc(file->stream)) == EOF) {
			yyerror("reached end of file while parsing "
			    "quoted string");
			if (file == topfile || popfile() == EOF)
				return (EOF);
			return (quotec);
		}
		return (c);
	}

	while ((c = getc(file->stream)) == '\\') {
		next = getc(file->stream);
		if (next != '\n') {
			c = next;
			break;
		}
		yylval.lineno = file->lineno;
		file->lineno++;
	}

	while (c == EOF) {
		if (file == topfile || popfile() == EOF)
			return (EOF);
		c = getc(file->stream);
	}
	return (c);
}

int
lungetc(int c)
{
	if (c == EOF)
		return (EOF);
	if (parsebuf) {
		parseindex--;
		if (parseindex >= 0)
			return (c);
	}
	if (pushback_index < MAXPUSHBACK-1)
		return (pushback_buffer[pushback_index++] = c);
	else
		return (EOF);
}

int
findeol(void)
{
	int	c;

	parsebuf = NULL;
	pushback_index = 0;

	/* skip to either EOF or the first real EOL */
	while (1) {
		c = lgetc(0);
		if (c == '\n') {
			file->lineno++;
			break;
		}
		if (c == EOF)
			break;
	}
	return (ERROR);
}

int
yylex(void)
{
	u_char	 buf[8096];
	u_char	*p;
	int	 quotec, next, c;
	int	 token;

	p = buf;
	while ((c = lgetc(0)) == ' ' || c == '\t')
		; /* nothing */

	yylval.lineno = file->lineno;
	if (c == '#')
		while ((c = lgetc(0)) != '\n' && c != EOF)
			; /* nothing */

	switch (c) {
	case '\'':
	case '"':
		quotec = c;
		while (1) {
			if ((c = lgetc(quotec)) == EOF)
				return (0);
			if (c == '\n') {
				file->lineno++;
				continue;
			} else if (c == '\\') {
				if ((next = lgetc(quotec)) == EOF)
					return (0);
				if (next == quotec || c == ' ' || c == '\t')
					c = next;
				else if (next == '\n')
					continue;
				else
					lungetc(next);
			} else if (c == quotec) {
				*p = '\0';
				break;
			} else if (c == '\0') {
				yyerror("syntax error");
				return (findeol());
			}
			if (p + 1 >= buf + sizeof(buf) - 1) {
				yyerror("string too long");
				return (findeol());
			}
			*p++ = c;
		}
		yylval.v.string = strdup(buf);
		if (yylval.v.string == NULL)
			err(1, "yylex: strdup");
		return (STRING);
	}

#define allowed_to_end_number(x) \
	(isspace(x) || x == ')' || x ==',' || x == '/' || x == '}' || x == '=')

	if (c == '-' || isdigit(c)) {
		do {
			*p++ = c;
			if ((unsigned)(p-buf) >= sizeof(buf)) {
				yyerror("string too long");
				return (findeol());
			}
		} while ((c = lgetc(0)) != EOF && isdigit(c));
		lungetc(c);
		if (p == buf + 1 && buf[0] == '-')
			goto nodigits;
		if (c == EOF || allowed_to_end_number(c)) {
			const char *errstr = NULL;

			*p = '\0';
			yylval.v.number = strtonum(buf, LLONG_MIN,
			    LLONG_MAX, &errstr);
			if (errstr) {
				yyerror("\"%s\" invalid number: %s",
				    buf, errstr);
				return (findeol());
			}
			return (NUMBER);
		} else {
nodigits:
			while (p > buf + 1)
				lungetc(*--p);
			c = *--p;
			if (c == '-')
				return (c);
		}
	}

#define allowed_in_string(x) \
	(isalnum(x) || (ispunct(x) && x != '(' && x != ')' && \
	x != '{' && x != '}' && x != '<' && x != '>' && \
	x != '!' && x != '=' && x != '/' && x != '#' && \
	x != ','))

	if (isalnum(c) || c == ':' || c == '_' || c == '*') {
		do {
			*p++ = c;
			if ((unsigned)(p-buf) >= sizeof(buf)) {
				yyerror("string too long");
				return (findeol());
			}
		} while ((c = lgetc(0)) != EOF && (allowed_in_string(c)));
		lungetc(c);
		*p = '\0';
		if ((token = lookup(buf)) == STRING)
			if ((yylval.v.string = strdup(buf)) == NULL)
				err(1, "yylex: strdup");
		return (token);
	}
	if (c == '\n') {
		yylval.lineno = file->lineno;
		file->lineno++;
	}
	if (c == EOF)
		return (0);
	return (c);
}

struct file *
pushfile(const char *name)
{
	struct file	*nfile;

	if ((nfile = calloc(1, sizeof(struct file))) == NULL)
		return (NULL);
	if ((nfile->name = strdup(name)) == NULL) {
		free(nfile);
		return (NULL);
	}
	if ((nfile->stream = fopen(nfile->name, "r")) == NULL) {
		free(nfile->name);
		free(nfile);
		return (NULL);
	}
	nfile->lineno = 1;
	TAILQ_INSERT_TAIL(&files, nfile, entry);
	return (nfile);
}

int
popfile(void)
{
	struct file	*prev;

	if ((prev = TAILQ_PREV(file, files, entry)) != NULL)
		prev->errors += file->errors;

	TAILQ_REMOVE(&files, file, entry);
	fclose(file->stream);
	free(file->name);
	free(file);
	file = prev;
	return (file ? 0 : EOF);
}

char *
parse_tapedev(const char *filename, const char *changer, int drive)
{
	struct changer	*p;
	char		*tapedev = NULL;
	int		 errors = 0;

	TAILQ_INIT(&changers);

	if ((file = pushfile(filename)) == NULL) {
		warnx("cannot open the main config file!");
		goto guess;
	}
	topfile = file;

	yyparse();
	errors = file->errors;
	popfile();

	TAILQ_FOREACH(p, &changers, entry) {
		if (strcmp(basename(changer), p->name) == 0) {
			if (drive >= 0 && drive < p->drivecnt) {
				if (asprintf(&tapedev, "/dev/%s",
				     p->drives[drive]) == -1)
					errx(1, "malloc failed");
			} else
				tapedev = NULL;
		}
	}

guess:
	/* if no device found, do the default of /dev/rstX */
	if (tapedev == NULL)
		if (asprintf(&tapedev, "/dev/rst%d", drive) == -1)
			errx(1, "malloc failed");
	return (tapedev);
}

struct changer *
new_changer(char *name)
{
	struct changer	*p;

	if ((p = calloc(1, sizeof(*p))) == NULL)
		err(1, NULL);

	if ((p->name = strdup(name)) == NULL)
		err(1, NULL);

	return (p);
}


@


1.19
log
@Convert the logic in yyerror().  Instead of creating a temporary
format string, create a temporary message.
OK doug@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.18 2014/11/14 03:20:36 doug Exp $ */
d310 3
@


1.18
log
@Add gcc printf format attributes to yyerror() in parse.y files.
No yyerror() calls needed to be changed.

ok bluhm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.17 2014/05/18 16:36:41 espie Exp $ */
d142 1
a142 1
	char		*nfmt;
d146 2
a147 3
	if (asprintf(&nfmt, "%s:%d: %s", file->name, yylval.lineno, fmt) == -1)
		err(1, "yyerror asprintf");
	err(1, nfmt, ap);
d149 2
a150 1
	free(nfmt);
@


1.17
log
@use reallocarray
okay miod@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.16 2013/11/25 12:51:10 benno Exp $ */
d48 3
a50 1
int		 yyerror(const char *, ...);
@


1.16
log
@use u_char for buffers in yylex, for ctype calls
found by millert@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.15 2013/11/12 04:36:01 deraadt Exp $ */
d116 2
a117 2
			if ((newp = realloc(curchanger->drives,
			    (curchanger->drivecnt + 1) *
@


1.15
log
@add a variety of missing prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.14 2009/03/31 21:03:48 tobias Exp $ */
d179 1
a179 1
char	*parsebuf;
d181 1
a181 1
char	 pushback_buffer[MAXPUSHBACK];
d272 2
a273 2
	char	 buf[8096];
	char	*p;
d313 1
a313 1
			*p++ = (char)c;
@


1.14
log
@Fixed memory leaks which would occur if the second of two memory
allocations fails.

looks right deraadt, krw
ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.13 2008/02/27 16:07:20 mpf Exp $ */
d54 2
@


1.13
log
@Unbreak parser by initializing topfile correctly.
I got fooled by patch(1). Sorry.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.12 2008/02/26 10:09:58 mpf Exp $ */
d390 1
a390 2
	if ((nfile = calloc(1, sizeof(struct file))) == NULL ||
	    (nfile->name = strdup(name)) == NULL)
d392 4
@


1.12
log
@Have popfile() also close the main config file,
but only do the final popfile call after yyparse() is done.
This also fixes config reload on SIGHUP for some daemons.

Spotted by otto@@. OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.11 2007/11/12 23:59:40 mpf Exp $ */
d432 1
a447 1
	topfile = file;
@


1.11
log
@Remove space/tab compression function from lgetc() and replace
it with a simple filter in the yylex() loop.
The compression in lgetc() didn't happen for quoted strings,
thus creating a regression when tabs were used in variables.
Some testing by todd@@ and pyr@@
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.10 2007/10/16 20:01:23 mpf Exp $ */
d43 1
a43 1
} *file;
d203 3
a205 2
			yyerror("reached end of file while parsing quoted string");
			if (popfile() == EOF)
d223 1
a223 1
		if (popfile() == EOF)
d408 1
a408 1
	if ((prev = TAILQ_PREV(file, files, entry)) != NULL) {
d410 7
a416 8
		TAILQ_REMOVE(&files, file, entry);
		fclose(file->stream);
		free(file->name);
		free(file);
		file = prev;
		return (0);
	}
	return (EOF);
d447 1
@


1.10
log
@Allow '=' to end a number in all lexers.
Requested and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.9 2007/10/16 06:06:47 deraadt Exp $ */
a219 8
	if (c == '\t' || c == ' ') {
		/* Compress blanks to a single space. */
		do {
			c = getc(file->stream);
		} while (c == '\t' || c == ' ');
		ungetc(c, file->stream);
		c = ' ';
	}
d275 1
a275 1
	while ((c = lgetc(0)) == ' ')
@


1.9
log
@in the lex... even inside quotes, a \ followed by space or tab should
expand to space or tab, and a \ followed by newline should be ignored
(as a line continuation).  compatible with the needs of hoststated
(which has the most strict quoted string requirements), and ifstated
(where one commonly does line continuations in strings).
pointed out by mpf, discussed with pyr
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.8 2007/10/13 16:35:16 deraadt Exp $ */
d327 1
a327 1
	(isspace(x) || x == ')' || x ==',' || x == '/' || x == '}')
@


1.8
log
@in all these programs using the same pfctl-derived parse.y, re-unify the
yylex implementation and the code which interacts with yylex.  this also
brings the future potential for include support to all of the parsers.
in the future please do not silly modifications to one of these files
without checking if you are de-unifying the code.
checked by developers in all these areas.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.6 2007/09/11 23:06:37 deraadt Exp $ */
d304 1
a304 1
				if (next == quotec)
d306 2
@


1.7
log
@next step in the yylex unification: handle quoted strings in a nicer fashion
as found in hoststated, and make all the code diff as clean as possible. a
few issues remain mostly surrounding include support, which will likely be
added to more of the grammers soon.
ok norby pyr, others
@
text
@d36 19
a63 14
static FILE			*fin = NULL;
static int			 lineno = 1;
static int			 errors = 0;
const char			*infile;

int	 yyerror(const char *, ...);
int	 yyparse(void);
int	 kw_cmp(const void *, const void *);
int	 lookup(char *);
int	 lgetc(int);
int	 lungetc(int);
int	 findeol(void);
int	 yylex(void);

d83 2
a84 2
		| grammar changer '\n'
		| grammar error '\n'		{ errors++; }
d94 1
a94 1
changer		: CHANGER STRING optnl '{' optnl {
d140 1
a140 1
	errors = 1;
d142 1
a142 1
	if (asprintf(&nfmt, "%s:%d: %s", infile, yylval.lineno, fmt) == -1)
d183 1
a183 1
lgetc(int inquot)
d185 1
a185 2
	int	c, next;
	FILE *f = fin;
d201 7
a207 2
	if (inquot) {
		c = getc(f);
d211 2
a212 2
	while ((c = getc(f)) == '\\') {
		next = getc(f);
d217 2
a218 2
		yylval.lineno = lineno;
		lineno++;
d223 1
a223 1
			c = getc(f);
d225 1
a225 1
		ungetc(c, f);
d229 5
d265 1
a265 1
			lineno++;
d279 1
a279 1
	int	 endc, next, c;
d286 1
a286 1
	yylval.lineno = lineno;
d294 1
a294 1
		endc = c;
d296 1
a296 1
			if ((c = lgetc(1)) == EOF)
d299 1
a299 1
				lineno++;
d302 1
a302 1
				if ((next = lgetc(1)) == EOF)
d304 1
a304 1
				if (next == endc)
d308 1
a308 1
			} else if (c == endc) {
d382 2
a383 2
		yylval.lineno = lineno;
		lineno++;
d390 35
d429 2
a430 1
	char *tapedev = NULL;
a431 2
	lineno = 1;
	errors = 0;
d434 2
a435 1
	if ((fin = fopen(filename, "r")) == NULL)
d437 1
a437 2

	infile = filename;
d440 2
a441 2

	fclose(fin);
@


1.6
log
@macro argument unused, using local instead; spotted by mpf
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.5 2007/09/11 22:16:15 deraadt Exp $ */
d54 1
a54 1
int	 lgetc(FILE *);
d178 1
a178 1
lgetc(FILE *f)
d181 1
d197 5
d249 1
a249 1
		c = lgetc(fin);
d265 1
a265 1
	int	 endc, c;
d269 1
a269 1
	while ((c = lgetc(fin)) == ' ')
d274 1
a274 1
		while ((c = lgetc(fin)) != '\n' && c != EOF)
d282 1
a282 1
			if ((c = lgetc(fin)) == EOF)
a283 4
			if (c == endc) {
				*p = '\0';
				break;
			}
d287 10
d320 1
a320 1
		} while ((c = lgetc(fin)) != EOF && isdigit(c));
d359 1
a359 1
		} while ((c = lgetc(fin)) != EOF && (allowed_in_string(c)));
@


1.5
log
@extend lex to spot numbers in the stream, without impacting the parsing
of ip addresses and such.  this change is being pushed into all the pfctl
derived parsers, starting with the easy ones.  chio does not yet use
the NUMBER token, but may one day.  ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.4 2007/06/01 06:48:34 cnst Exp $ */
d299 1
a299 1
	(isspace(x) || c == ')' || c ==',' || c == '/' || c == '}')
@


1.4
log
@fix -Wall 'implicit declaration' of err & errx: s/errno.h/err.h/;  ok deraadt, henning
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.3 2006/05/29 01:41:27 henning Exp $ */
d61 1
a61 1
		u_int32_t		 number;
d73 1
d296 36
@


1.3
log
@oups, left one strdup unchecked, and some more error handling smallies
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.2 2006/05/29 01:34:36 henning Exp $ */
d29 1
a29 1
#include <errno.h>
@


1.2
log
@de-beckify (KNF)
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.1 2006/05/29 01:21:38 beck Exp $ */
d113 3
a115 2
			curchanger->drives[curchanger->drivecnt] =
			    strdup($2);
@


1.1
log
@Make chio have a connection between st(4) devices and "drives" in a
changer - chio will then attempt to open the /dev/rstX device when doing
a move from a source of drive X, and will attempt to unload the tape.
this avoids issues where pickers madly attempt to grab a busy tape on
completely decoupled libraries, or fail to grab an unloaded tape
on tightly coupled libraries, the extra unload being harmless if the
media has already been ejected.

The mapping between st(4) devices and ch drives is by default a
simple mapping between picker drive X being mapped to /dev/rstX, however
for non-obvious or complicated configurations, we support a /etc/chio.conf
file in which the drives for a changer may have their corresponding
st(4) devices defined individually. chio will use the default
mapping if the /etc/chio.conf file is not present, or does not define
a st(4) device for a changer drive.

(example chio.conf and man page changes to come)
yacc parser for chio.conf written by henning@@,

ok henning@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d340 1
a340 1
	
d349 1
a349 1
				     p->drives[drive]) == -1)	
d351 1
a351 2
			}
			else
d361 1
a361 2
	return(tapedev);
		
@

