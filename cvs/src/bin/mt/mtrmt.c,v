head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.14
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.16
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.12
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.8
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.10
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.4
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.2
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.16
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.12
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.10
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.8
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.6
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.4
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.2
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.7.0.18
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.16
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.14
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.21
date	2013.11.21.15.54.45;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2012.12.04.02.38.51;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2012.12.04.02.34.05;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.22;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.11.15.06.48;	author ray;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.23.23.03.07;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2004.09.16.08.35.49;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.11.23.42.12;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.27.20.28.31;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.16.44.24;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.19.19.39.35;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.07;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.14.20.52.39;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.09.12.04.01.37;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.06.18.19.23.29;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	96.09.15.20.14.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.09.02.05.37.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.09.01.15.29.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.09.03.11.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.03.08.23.34.22;	author niklas;	state Exp;
branches;
next	;


desc
@mt(1) source file
@


1.21
log
@add unsigned char casts for specific calls to ctype.h macros.
ok guenther step
@
text
@/*	$OpenBSD: mtrmt.c,v 1.20 2012/12/04 02:38:51 deraadt Exp $	*/
/*	$NetBSD: mtrmt.c,v 1.2 1996/03/06 06:22:07 scottr Exp $	*/

/*-
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/mtio.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <ufs/ufs/dinode.h>

#include <netinet/in.h>
#include <netinet/tcp.h>

#include <protocols/dumprestore.h>

#include <ctype.h>
#include <err.h>
#include <netdb.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "pathnames.h"
#include "mt.h"

#define	TS_CLOSED	0
#define	TS_OPEN		1

static	int rmtstate = TS_CLOSED;
static	int rmtape;
static	char *rmtpeer;

static	int okname(char *);
static	int rmtcall(char *, char *);
static	void rmtconnaborted(void);
static	void sigrmtconnaborted(int);
static	int rmtgetb(void);
static	void rmtgetconn(void);
static	void rmtgets(char *, int);
static	int rmtreply(char *);

int
rmthost(char *host)
{
	if ((rmtpeer = strdup(host)) == NULL)
		err(1, "strdup");
	signal(SIGPIPE, sigrmtconnaborted);
	rmtgetconn();
	if (rmtape < 0)
		return (0);
	return (1);
}

/* ARGSUSED */
static void
sigrmtconnaborted(int signo)
{

	warnx("Lost connection to remote host.");
	_exit(1);
}

static void
rmtconnaborted(void)
{

	errx(1, "Lost connection to remote host.");
}

void
rmtgetconn(void)
{
	char *cp;
	static struct servent *sp = NULL;
	static struct passwd *pwd = NULL;
#ifdef notdef
	static int on = 1;
#endif
	char *tuser;
	int size;
	int maxseg;

	if (sp == NULL) {
		sp = getservbyname("shell", "tcp");
		if (sp == NULL)
			errx(1, "shell/tcp: unknown service");
		pwd = getpwuid(getuid());
		if (pwd == NULL)
			errx(1, "who are you?");
	}
	if ((cp = strchr(rmtpeer, '@@')) != NULL) {
		tuser = rmtpeer;
		*cp = '\0';
		if (!okname(tuser))
			exit(1);
		rmtpeer = ++cp;
	} else
		tuser = pwd->pw_name;

	rmtape = rcmd(&rmtpeer, (u_short)sp->s_port, pwd->pw_name, tuser,
	    _PATH_RMT, NULL);
	if (rmtape == -1)
		exit(1);		/* rcmd already printed error message */

	size = TP_BSIZE;
	if (size > 60 * 1024)		/* XXX */
		size = 60 * 1024;
	/* Leave some space for rmt request/response protocol */
	size += 2 * 1024;

	while (size > TP_BSIZE &&
	    setsockopt(rmtape, SOL_SOCKET, SO_SNDBUF, &size, sizeof (size)) < 0)
		    size -= TP_BSIZE;
	(void)setsockopt(rmtape, SOL_SOCKET, SO_RCVBUF, &size, sizeof (size));

	maxseg = 1024;
	(void)setsockopt(rmtape, IPPROTO_TCP, TCP_MAXSEG, &maxseg,
		sizeof (maxseg));

#ifdef notdef
	if (setsockopt(rmtape, IPPROTO_TCP, TCP_NODELAY, &on, sizeof (on)) < 0)
		perror("TCP_NODELAY setsockopt");
#endif
}

static int
okname(char *cp0)
{
	unsigned char *cp;
	int c;

	for (cp = cp0; *cp; cp++) {
		c = (unsigned char)*cp;
		if (!isascii(c) || !(isalnum(c) || c == '_' || c == '-')) {
			warnx("invalid user name: %s", cp0);
			return (0);
		}
	}
	return (1);
}

int
rmtopen(char *tape, int mode)
{
	char buf[256];

	(void)snprintf(buf, sizeof (buf), "O%s\n%d\n", tape, mode);
	rmtstate = TS_OPEN;
	return (rmtcall(tape, buf));
}

void
rmtclose(void)
{

	if (rmtstate != TS_OPEN)
		return;
	rmtcall("close", "C\n");
	rmtstate = TS_CLOSED;
}

struct	mtget mts;

struct mtget *
rmtstatus(void)
{
	int i;
	char *cp;

	if (rmtstate != TS_OPEN)
		return (NULL);
	rmtcall("status", "S\n");
	for (i = 0, cp = (char *)&mts; i < sizeof(mts); i++)
		*cp++ = rmtgetb();
	return (&mts);
}

int
rmtioctl(int cmd, int count)
{
	char buf[256];

	if (count < 0)
		return (-1);
	(void)snprintf(buf, sizeof (buf), "I%d\n%d\n", cmd, count);
	return (rmtcall("ioctl", buf));
}

static int
rmtcall(char *cmd, char *buf)
{

	if (write(rmtape, buf, strlen(buf)) != strlen(buf))
		rmtconnaborted();
	return (rmtreply(cmd));
}

static int
rmtreply(char *cmd)
{
	char *cp;
	char code[30], emsg[BUFSIZ];

	rmtgets(code, sizeof (code));
	if (*code == 'E' || *code == 'F') {
		rmtgets(emsg, sizeof (emsg));
		warnx("%s: %s", cmd, emsg);
		if (*code == 'F') {
			rmtstate = TS_CLOSED;
			return (-1);
		}
		return (-1);
	}
	if (*code != 'A') {
		/* Kill trailing newline */
		cp = code + strlen(code);
		if (cp > code && *--cp == '\n')
			*cp = '\0';

		warnx("Protocol to remote tape server botched (code \"%s\").",
		    code);
		rmtconnaborted();
	}
	return (atoi(code + 1));
}

int
rmtgetb(void)
{
	char c;

	if (read(rmtape, &c, 1) != 1)
		rmtconnaborted();
	return (c);
}

/* Get a line (guaranteed to have a trailing newline). */
void
rmtgets(char *line, int len)
{
	char *cp = line;

	while (len > 1) {
		*cp = rmtgetb();
		if (*cp == '\n') {
			cp[1] = '\0';
			return;
		}
		cp++;
		len--;
	}
	*cp = '\0';
	warnx("Protocol to remote tape server botched.");
	warnx("(rmtgets got \"%s\").", line);
	rmtconnaborted();
}
@


1.20
log
@replace sys/param.h with sys/types.h (and sometimes add limits.h if needed)
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.19 2012/12/04 02:34:05 deraadt Exp $	*/
d161 1
a161 1
	char *cp;
d165 1
a165 1
		c = *cp;
@


1.19
log
@remove sunos backwards compat
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.18 2009/10/27 23:59:22 deraadt Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.17 2006/04/11 15:06:48 ray Exp $	*/
a37 5
#ifdef sunos
#include <sys/vnode.h>

#include <ufs/inode.h>
#else
a38 1
#endif
@


1.17
log
@Check for strdup() failure.

OK jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.16 2006/03/23 23:03:07 deraadt Exp $	*/
a30 7
 */

/*
 * This was unceremoniously ripped out of usr.sbin/dump/dumprmt.c:
 *
 * static char sccsid[] = "@@(#)dumprmt.c	8.1 (Berkeley) 6/5/93";
 *
@


1.16
log
@use strdup() instead; adobriyan@@gmail
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.15 2004/09/16 08:35:49 deraadt Exp $	*/
d90 2
a91 3
	rmtpeer = strdup(host);
	if (!rmtpeer)
		rmtpeer = host;
@


1.15
log
@ARGSUSED on signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.14 2003/06/11 23:42:12 deraadt Exp $	*/
d90 2
a91 6
	int len = strlen(host) + 1;

	rmtpeer = malloc(len);
	if (rmtpeer)
		strlcpy(rmtpeer, host, len);
	else
@


1.14
log
@ansification, art ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.13 2003/06/02 23:32:08 millert Exp $	*/
d104 1
d106 1
a106 1
sigrmtconnaborted(int sig)
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.12 2002/05/27 20:28:31 deraadt Exp $	*/
d88 1
a88 2
rmthost(host)
	char *host;
d120 1
a120 1
rmtgetconn()
d176 1
a176 2
okname(cp0)
	char *cp0;
d192 1
a192 3
rmtopen(tape, mode)
	char *tape;
	int mode;
d202 1
a202 1
rmtclose()
d214 1
a214 1
rmtstatus()
d228 1
a228 2
rmtioctl(cmd, count)
	int cmd, count;
d239 1
a239 2
rmtcall(cmd, buf)
	char *cmd, *buf;
d248 1
a248 2
rmtreply(cmd)
	char *cmd;
d277 1
a277 1
rmtgetb()
d288 1
a288 3
rmtgets(line, len)
	char *line;
	int len;
@


1.12
log
@strlcpy
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.11 2002/03/14 16:44:24 mpech Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.10 2002/02/19 19:39:35 millert Exp $	*/
d95 1
d97 1
a97 1
	rmtpeer = malloc(strlen(host) + 1);
d99 1
a99 1
		strcpy(rmtpeer, host);
@


1.10
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.9 2002/02/16 21:27:07 millert Exp $	*/
d126 1
a126 1
	register char *cp;
d183 2
a184 2
	register char *cp;
	register int c;
d223 2
a224 2
	register int i;
	register char *cp;
d260 1
a260 1
	register char *cp;
d302 1
a302 1
	register char *cp = line;
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.8 2001/11/14 20:52:39 deraadt Exp $	*/
a67 1
#ifdef __STDC__
a70 1
#endif
@


1.8
log
@in a signal handler, change errx() to warnx() + _exit; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.7 1997/09/12 04:01:37 millert Exp $	*/
d84 8
a91 8
static	int okname __P((char *));
static	int rmtcall __P((char *, char *));
static	void rmtconnaborted __P((void));
static	void sigrmtconnaborted __P((int));
static	int rmtgetb __P((void));
static	void rmtgetconn __P((void));
static	void rmtgets __P((char *, int));
static	int rmtreply __P((char *));
@


1.7
log
@Don't put newline's in warnx()
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.6 1997/06/18 19:23:29 kstailey Exp $	*/
d86 2
a87 1
static	void rmtconnaborted __P((/* int, int */));
d103 1
a103 1
	signal(SIGPIPE, rmtconnaborted);
d111 9
a119 1
rmtconnaborted()
@


1.6
log
@(foo *)0 -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.5 1996/09/15 20:14:18 millert Exp $	*/
d272 1
a272 1
		warnx("Protocol to remote tape server botched (code \"%s\").\n",
d307 2
a308 2
	warnx("Protocol to remote tape server botched.\n");
	warnx("(rmtgets got \"%s\").\n", line);
@


1.5
log
@Don't complain if setsockopt() fails.  It will fail if we used rcmdsh()
instead of rcmd() and there's no easy way to detect which we used now.
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.4 1996/09/02 05:37:11 deraadt Exp $	*/
d147 1
a147 1
	    _PATH_RMT, (int *)0);
@


1.4
log
@not setuid, silence TCP_MAXSEG for non-root
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.3 1996/09/01 15:29:21 millert Exp $	*/
d163 2
a164 3
	if (getuid() == 0 && setsockopt(rmtape, IPPROTO_TCP, TCP_MAXSEG,
	    &maxseg, sizeof (maxseg)) < 0)
		perror("TCP_MAXSEG setsockopt");
d196 1
a196 1
	(void)snprintf(buf, sizeof(buf), "O%s\n%d\n", tape, mode);
d235 1
a235 1
	(void)snprintf(buf, sizeof(buf), "I%d\n%d\n", cmd, count);
@


1.3
log
@check rcmd() return val and exit nicely.
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.2 1996/08/09 03:11:53 millert Exp $	*/
a83 3
extern	int uid;
extern	int euid;

a145 1
	(void) seteuid(euid);
a147 1
	(void) setuid(uid); /* Just to be Really Really Safe */
d163 1
a163 1
	if (setsockopt(rmtape, IPPROTO_TCP, TCP_MAXSEG,
@


1.2
log
@sprintf -> snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: mtrmt.c,v 1.1 1996/03/08 23:34:22 niklas Exp $	*/
d153 2
@


1.1
log
@From NetBSD:
Add remote tape capabilities.
Since we're setuid, let's be paranoid.
Picked up a little lint in the dryer.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d200 1
a200 1
	(void)sprintf(buf, "O%s\n%d\n", tape, mode);
d239 1
a239 1
	(void)sprintf(buf, "I%d\n%d\n", cmd, count);
@
