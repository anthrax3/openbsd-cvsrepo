head	1.28;
access;
symbols
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.4
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.24.0.10
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.8
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.4
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.2
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.23.0.4
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.22.0.22
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.20
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.18
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.14
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.16
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.12
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.10
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.8
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.6
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.22.0.4
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.2
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11;
locks; strict;
comment	@ * @;


1.28
date	2016.04.25.19.09.25;	author tedu;	state dead;
branches;
next	1.27;
commitid	Ne4KgWE1uInoydsl;

1.27
date	2016.03.01.16.26.06;	author naddy;	state Exp;
branches;
next	1.26;
commitid	xolw6dPbpLrdT9Jj;

1.26
date	2015.06.24.03.38.51;	author guenther;	state Exp;
branches;
next	1.25;
commitid	ywc2GGaXXY48hnTw;

1.25
date	2015.01.16.00.19.12;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	9JSDzKTCgxU6o5el;

1.24
date	2012.12.04.02.24.47;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.18.23.24.14;	author matthew;	state Exp;
branches;
next	1.22;

1.22
date	2006.08.14.07.24.55;	author ray;	state Exp;
branches;
next	1.21;

1.21
date	2006.07.02.12.34.15;	author sturm;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.10.07.19.13;	author sturm;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.03.21.10.29;	author sturm;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.25.10.39.10;	author sturm;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.12.20.56.10;	author sturm;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.19.11.48.58;	author sturm;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.16.06.36.40;	author itojun;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.17.03.09.59;	author sturm;	state Exp;
branches;
next	1.13;

1.13
date	2002.11.16.14.27.17;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.16.14.43.33;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.05.14.49.27;	author provos;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.05.14.26.07;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.01.20.16.45;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.30.06.07.06;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.19.14.38.58;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.16.14.28.17;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.16.14.24.59;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.14.22.34.55;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.13.08.54.10;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.12.12.26.29;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.11.12.57.41;	author provos;	state Exp;
branches;
next	;


desc
@@


1.28
log
@boom goes the dynamite
@
text
@/*	$OpenBSD: register.c,v 1.27 2016/03/01 16:26:06 naddy Exp $	*/
/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/tree.h>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>
#include <stdio.h>
#include <err.h>

#include "intercept.h"
#include "systrace.h"

#define X(x)	if ((x) == -1) \
	err(1, "%s:%d: intercept failed", __func__, __LINE__)

void
systrace_initcb(void)
{
	struct systrace_alias *alias;
	struct intercept_translate *tl;

	X(intercept_init());

	X(intercept_register_gencb(gen_cb, NULL));
	X(intercept_register_sccb("native", "open", trans_cb, NULL));
	tl = intercept_register_transfn("native", "open", 0);
	intercept_register_translation("native", "open", 1, &ic_oflags);
	alias = systrace_new_alias("native", "open", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "sendmsg", trans_cb, NULL));
	intercept_register_translation("native", "sendmsg", 1,
	    &ic_translate_sendmsg);
	X(intercept_register_sccb("native", "connect", trans_cb, NULL));
	intercept_register_translation("native", "connect", 1,
	    &ic_translate_connect);
	X(intercept_register_sccb("native", "sendto", trans_cb, NULL));
	intercept_register_translation("native", "sendto", 4,
	    &ic_translate_connect);
	X(intercept_register_sccb("native", "bind", trans_cb, NULL));
	intercept_register_translation("native", "bind", 1,
	    &ic_translate_connect);
	X(intercept_register_sccb("native", "execve", trans_cb, NULL));
	intercept_register_transfn("native", "execve", 0);
	intercept_register_translation("native", "execve", 1, &ic_trargv);
	X(intercept_register_sccb("native", "stat", trans_cb, NULL));
	tl = intercept_register_transfn("native", "stat", 0);
	alias = systrace_new_alias("native", "stat", "native", "fsread");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "lstat", trans_cb, NULL));
	tl = intercept_register_translation("native", "lstat", 0,
	    &ic_translate_unlinkname);
	alias = systrace_new_alias("native", "lstat", "native", "fsread");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "unlink", trans_cb, NULL));
	tl = intercept_register_translation("native", "unlink", 0,
	    &ic_translate_unlinkname);
	alias = systrace_new_alias("native", "unlink", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("native", "truncate", trans_cb, NULL));
	tl = intercept_register_transfn("native", "truncate", 0);
	alias = systrace_new_alias("native", "truncate", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "mkfifo", trans_cb, NULL));
	tl = intercept_register_transfn("native", "mkfifo", 0);
	intercept_register_translation("native", "mkfifo", 1, &ic_modeflags);
	alias = systrace_new_alias("native", "mkfifo", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("native", "mknod", trans_cb, NULL));
	intercept_register_transfn("native", "mknod", 0);
	intercept_register_translation("native", "mknod", 1, &ic_modeflags);

	X(intercept_register_sccb("native", "chown", trans_cb, NULL));
	intercept_register_transfn("native", "chown", 0);
	intercept_register_translation("native", "chown", 1, &ic_uidt);
	intercept_register_translation("native", "chown", 2, &ic_gidt);
	X(intercept_register_sccb("native", "fchown", trans_cb, NULL));
	intercept_register_translation("native", "fchown", 0, &ic_fdt);
	intercept_register_translation("native", "fchown", 1, &ic_uidt);
	intercept_register_translation("native", "fchown", 2, &ic_gidt);
	X(intercept_register_sccb("native", "lchown", trans_cb, NULL));
	intercept_register_translation("native", "lchown", 0,
	    &ic_translate_unlinkname);
	intercept_register_translation("native", "lchown", 1, &ic_uidt);
	intercept_register_translation("native", "lchown", 2, &ic_gidt);
	X(intercept_register_sccb("native", "chmod", trans_cb, NULL));
	intercept_register_transfn("native", "chmod", 0);
	intercept_register_translation("native", "chmod", 1, &ic_modeflags);
	X(intercept_register_sccb("native", "fchmod", trans_cb, NULL));
	intercept_register_translation("native", "fchmod", 0, &ic_fdt);
	intercept_register_translation("native", "fchmod", 1, &ic_modeflags);
	X(intercept_register_sccb("native", "chflags", trans_cb, NULL));
	intercept_register_transfn("native", "chflags", 0);
	intercept_register_translation("native", "chflags", 1, &ic_fileflags);
	X(intercept_register_sccb("native", "readlink", trans_cb, NULL));
	tl = intercept_register_translation("native", "readlink", 0,
	    &ic_translate_unlinkname);
	alias = systrace_new_alias("native", "readlink", "native", "fsread");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "chdir", trans_cb, NULL));
	intercept_register_transfn("native", "chdir", 0);
	X(intercept_register_sccb("native", "chroot", trans_cb, NULL));
	intercept_register_transfn("native", "chroot", 0);
	X(intercept_register_sccb("native", "access", trans_cb, NULL));
	tl = intercept_register_transfn("native", "access", 0);
	alias = systrace_new_alias("native", "access", "native", "fsread");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "mkdir", trans_cb, NULL));
	tl = intercept_register_translation("native", "mkdir", 0,
	    &ic_translate_unlinkname);
	alias = systrace_new_alias("native", "mkdir", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("native", "rmdir", trans_cb, NULL));
	tl = intercept_register_transfn("native", "rmdir", 0);
	alias = systrace_new_alias("native", "rmdir", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "rename", trans_cb, NULL));
	intercept_register_translation("native", "rename", 0,
	    &ic_translate_unlinkname);
	intercept_register_translation("native", "rename", 1,
	    &ic_translate_unlinkname);
	X(intercept_register_sccb("native", "symlink", trans_cb, NULL));
	intercept_register_transstring("native", "symlink", 0);
	intercept_register_translation("native", "symlink", 1,
	    &ic_translate_unlinkname);
	X(intercept_register_sccb("native", "link", trans_cb, NULL));
	intercept_register_transfn("native", "link", 0);
	intercept_register_transfn("native", "link", 1);

	X(intercept_register_sccb("native", "setuid", trans_cb, NULL));
	intercept_register_translation("native", "setuid", 0, &ic_uidt);
	intercept_register_translation("native", "setuid", 0, &ic_uname);
	X(intercept_register_sccb("native", "seteuid", trans_cb, NULL));
	intercept_register_translation("native", "seteuid", 0, &ic_uidt);
	intercept_register_translation("native", "seteuid", 0, &ic_uname);
	X(intercept_register_sccb("native", "setgid", trans_cb, NULL));
	intercept_register_translation("native", "setgid", 0, &ic_gidt);
	X(intercept_register_sccb("native", "setegid", trans_cb, NULL));
	intercept_register_translation("native", "setegid", 0, &ic_gidt);

	X(intercept_register_sccb("native", "socket", trans_cb, NULL));
	intercept_register_translation("native", "socket", 0, &ic_sockdom);
	intercept_register_translation("native", "socket", 1, &ic_socktype);
	X(intercept_register_sccb("native", "kill", trans_cb, NULL));
	intercept_register_translation("native", "kill", 0, &ic_pidname);
	intercept_register_translation("native", "kill", 1, &ic_signame);
	X(intercept_register_sccb("native", "fcntl", trans_cb, NULL));
	intercept_register_translation("native", "fcntl", 1, &ic_fcntlcmd);

	X(intercept_register_sccb("native", "mmap", trans_cb, NULL));
	intercept_register_translation("native", "mmap", 2, &ic_memprot);
	X(intercept_register_sccb("native", "mprotect", trans_cb, NULL));
	intercept_register_translation("native", "mprotect", 2, &ic_memprot);

	X(intercept_register_sccb("native", "openat", trans_cb, NULL));
	tl = intercept_register_translation("native", "openat", 1,
	    &ic_translate_filenameat);
	intercept_register_translation("native", "openat", 2, &ic_oflags);
	alias = systrace_new_alias("native", "openat", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "mkdirat", trans_cb, NULL));
	tl = intercept_register_translation("native", "mkdirat", 1,
	    &ic_translate_unlinknameat);
	alias = systrace_new_alias("native", "mkdirat", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "mkfifoat", trans_cb, NULL));
	tl = intercept_register_translation("native", "mkfifoat", 1,
	    &ic_translate_unlinknameat);
	intercept_register_translation("native", "mkfifoat", 2, &ic_modeflags);
	alias = systrace_new_alias("native", "mkfifoat", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "mknodat", trans_cb, NULL));
	intercept_register_translation("native", "mknodat", 1,
	    &ic_translate_unlinknameat);
	intercept_register_translation("native", "mknodat", 2, &ic_modeflags);

	X(intercept_register_sccb("native", "symlinkat", trans_cb, NULL));
	intercept_register_transstring("native", "symlinkat", 0);
	intercept_register_translation("native", "symlinkat", 2,
	    &ic_translate_unlinknameat);

	X(intercept_register_sccb("native", "faccessat", trans_cb, NULL));
	tl = intercept_register_translation("native", "faccessat", 1,
	    &ic_translate_filenameat);
	alias = systrace_new_alias("native", "faccessat", "native", "fsread");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "unlinkat", trans_cb, NULL));
	tl = intercept_register_translation("native", "unlinkat", 1,
	    &ic_translate_unlinknameat);
	alias = systrace_new_alias("native", "unlinkat", "native", "fswrite");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "readlinkat", trans_cb, NULL));
	tl = intercept_register_translation("native", "readlinkat", 1,
	    &ic_translate_unlinknameat);
	alias = systrace_new_alias("native", "readlinkat", "native", "fsread");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "renameat", trans_cb, NULL));
	intercept_register_translation("native", "renameat", 1,
	    &ic_translate_unlinknameat);
	intercept_register_translation("native", "renameat", 3,
	    &ic_translate_unlinknameat);

	X(intercept_register_sccb("native", "fchownat", trans_cb, NULL));
	intercept_register_translation("native", "fchownat", 1,
	    &ic_translate_filenameatflag);
	intercept_register_translation("native", "fchownat", 2, &ic_uidt);
	intercept_register_translation("native", "fchownat", 3, &ic_gidt);
	X(intercept_register_sccb("native", "fchmodat", trans_cb, NULL));
	intercept_register_translation("native", "fchmodat", 1,
	    &ic_translate_filenameatflag);
	intercept_register_translation("native", "fchmodat", 2, &ic_modeflags);
	X(intercept_register_sccb("native", "fstatat", trans_cb, NULL));
	tl = intercept_register_translation("native", "fstatat", 1,
	    &ic_translate_filenameatflag);
	alias = systrace_new_alias("native", "fstatat", "native", "fsread");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("native", "chflagsat", trans_cb, NULL));
	intercept_register_translation("native", "chflagsat", 1,
	    &ic_translate_filenameatflag);
	intercept_register_translation("native", "chflagsat", 2, &ic_fileflags);

	X(intercept_register_sccb("native", "linkat", trans_cb, NULL));
	intercept_register_translation("native", "linkat", 1,
	    &ic_translate_unlinknameatflag);
	intercept_register_translation("native", "linkat", 3,
	    &ic_translate_unlinknameat);

	X(intercept_register_execcb(execres_cb, NULL));
	X(intercept_register_pfreecb(policyfree_cb, NULL));
}
@


1.27
log
@drop Linux emulation support; ok sthen@@ visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.26 2015/06/24 03:38:51 guenther Exp $	*/
@


1.26
log
@Apply normal handling to atfd+path args to chflagsat(2)

Problem noted by patrick keshishian (sidster (at) boxsoft.com)
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.25 2015/01/16 00:19:12 deraadt Exp $	*/
a41 1
#include "linux-translate.h"
a269 66

	X(intercept_register_sccb("linux", "open", trans_cb, NULL));
	tl = intercept_register_translink("linux", "open", 0);
	intercept_register_translation("linux", "open", 1, &ic_linux_oflags);
	alias = systrace_new_alias("linux", "open", "linux", "fswrite");
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("linux", "stat", trans_cb, NULL));
	tl = intercept_register_translink("linux", "stat", 0);
	alias = systrace_new_alias("linux", "stat", "linux", "fsread");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("linux", "lstat", trans_cb, NULL));
	tl = intercept_register_translink("linux", "lstat", 0);
	alias = systrace_new_alias("linux", "lstat", "linux", "fsread");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("linux", "execve", trans_cb, NULL));
	intercept_register_translink("linux", "execve", 0);
	X(intercept_register_sccb("linux", "access", trans_cb, NULL));
	tl = intercept_register_translink("linux", "access", 0);
	alias = systrace_new_alias("linux", "access", "linux", "fsread");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("linux", "symlink", trans_cb, NULL));
	intercept_register_transstring("linux", "symlink", 0);
	intercept_register_translink("linux", "symlink", 1);
	X(intercept_register_sccb("linux", "link", trans_cb, NULL));
	intercept_register_translink("linux", "link", 0);
	intercept_register_translink("linux", "link", 1);
	X(intercept_register_sccb("linux", "readlink", trans_cb, NULL));
	tl = intercept_register_translink("linux", "readlink", 0);
	alias = systrace_new_alias("linux", "readlink", "linux", "fsread");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("linux", "rename", trans_cb, NULL));
	intercept_register_translink("linux", "rename", 0);
	intercept_register_translink("linux", "rename", 1);
	X(intercept_register_sccb("linux", "mkdir", trans_cb, NULL));
	tl = intercept_register_translink("linux", "mkdir", 0);
	alias = systrace_new_alias("linux", "mkdir", "linux", "fswrite");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("linux", "rmdir", trans_cb, NULL));
	tl = intercept_register_translink("linux", "rmdir", 0);
	alias = systrace_new_alias("linux", "rmdir", "linux", "fswrite");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("linux", "unlink", trans_cb, NULL));
	tl = intercept_register_translink("linux", "unlink", 0);
	alias = systrace_new_alias("linux", "unlink", "linux", "fswrite");
	systrace_alias_add_trans(alias, tl);
	X(intercept_register_sccb("linux", "chmod", trans_cb, NULL));
	intercept_register_translink("linux", "chmod", 0);
	intercept_register_translation("linux", "chmod", 1, &ic_modeflags);

	X(intercept_register_sccb("linux", "socketcall", trans_cb, NULL));
	alias = systrace_new_alias("linux", "socketcall", "linux", "_socketcall");
	tl = intercept_register_translation("linux", "socketcall", 1, &ic_linux_socket_sockdom);
	systrace_alias_add_trans(alias, tl);
	tl = intercept_register_translation("linux", "socketcall", 1, &ic_linux_socket_socktype);
	systrace_alias_add_trans(alias, tl);
	tl = intercept_register_translation("linux", "socketcall", 1, &ic_linux_connect_sockaddr);
	systrace_alias_add_trans(alias, tl);
	tl = intercept_register_translation("linux", "socketcall", 1, &ic_linux_bind_sockaddr);
	systrace_alias_add_trans(alias, tl);
	tl = intercept_register_translation("linux", "socketcall", 0, &ic_linux_socketcall_catchall);
	systrace_alias_add_trans(alias, tl);

	X(intercept_register_sccb("linux", "kill", trans_cb, NULL));
	intercept_register_translation("linux", "kill", 0, &ic_pidname);
	intercept_register_translation("linux", "kill", 1, &ic_signame);
@


1.25
log
@move to PATH_MAX, etc; normalize includes for life in the <limits.h> universe
ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.24 2012/12/04 02:24:47 deraadt Exp $	*/
d260 5
@


1.24
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.23 2011/09/18 23:24:14 matthew Exp $	*/
d36 1
@


1.23
log
@Add support for *at(2) system calls to systrace(1).

ok deraadt@@, sthen@@, jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.22 2006/08/14 07:24:55 ray Exp $	*/
a32 1
#include <sys/param.h>
@


1.22
log
@Adapt revision 1.18 change for symlink(2):

only resolve symlinks in the dirname of rename()'s arguments,
but not in the filename

``looks sane to me'' sturm@@, fixes espie@@'s problem,
``Seems reasonable.'' provos@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.22 2006/08/14 07:16:10 ray Exp $	*/
d191 75
@


1.21
log
@sync with systrace 1.6d, keeping local changes

tests and feedback by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.20 2006/06/10 07:19:13 sturm Exp $	*/
d161 2
a162 1
	intercept_register_transfn("native", "symlink", 1);
@


1.20
log
@add a translation for sendmsg()

from provos, with feedback from ray and pat
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.19 2006/04/03 21:10:29 sturm Exp $	*/
d42 1
d239 17
@


1.19
log
@add translation for mknod

ok provos
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.18 2006/03/25 10:39:10 sturm Exp $	*/
d61 3
@


1.18
log
@only resolve symlinks in the dirname of rename()'s arguments,
but not in the filename

ok provos, no objections from tedu (who doesn't use systrace)
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.17 2006/03/12 20:56:10 sturm Exp $	*/
d99 3
@


1.17
log
@add a few new translations, partly from NetBSD

ok provos@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.16 2003/07/19 11:48:58 sturm Exp $	*/
d150 2
a151 1
	intercept_register_transfn("native", "rename", 1);
@


1.16
log
@- sync with NetBSD or Niels' tarball where appropriate
- keeps local changes
- fixes a bug in profile feedback optimization and avoids symbol
  conflicts with errno
- new feature: "ask" action

itojun@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.15 2003/06/16 06:36:40 itojun Exp $	*/
d89 10
d108 5
d119 3
d175 7
@


1.15
log
@- limited number of processes per systrace
- escape fixes for special characters
markus, sturm ok.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.14 2003/05/17 03:09:59 sturm Exp $	*/
d154 3
@


1.14
log
@pull in a bugfix from systrace-current to let systrace deal with creating
directories correctly

OK itojun@@, thanks to niels for the help
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.13 2002/11/16 14:27:17 itojun Exp $	*/
d205 1
@


1.13
log
@rename translation tables.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.12 2002/10/16 14:43:33 itojun Exp $	*/
d120 2
a121 1
	tl = intercept_register_transfn("native", "mkdir", 0);
d130 2
a131 1
	intercept_register_transfn("native", "rename", 0);
@


1.12
log
@translation for socket system call
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.11 2002/08/05 14:49:27 provos Exp $	*/
d57 1
a57 1
	intercept_register_translation("native", "open", 1, &oflags);
d72 1
a72 1
	intercept_register_translation("native", "execve", 1, &trargv);
d92 2
a93 2
	intercept_register_translation("native", "chown", 1, &uidt);
	intercept_register_translation("native", "chown", 2, &gidt);
d95 3
a97 3
	intercept_register_translation("native", "fchown", 0, &fdt);
	intercept_register_translation("native", "fchown", 1, &uidt);
	intercept_register_translation("native", "fchown", 2, &gidt);
d100 1
a100 1
	intercept_register_translation("native", "chmod", 1, &modeflags);
d102 2
a103 2
	intercept_register_translation("native", "fchmod", 0, &fdt);
	intercept_register_translation("native", "fchmod", 1, &modeflags);
d139 2
a140 2
	intercept_register_translation("native", "setuid", 0, &uidt);
	intercept_register_translation("native", "setuid", 0, &uname);
d142 2
a143 2
	intercept_register_translation("native", "seteuid", 0, &uidt);
	intercept_register_translation("native", "seteuid", 0, &uname);
d145 1
a145 1
	intercept_register_translation("native", "setgid", 0, &gidt);
d147 1
a147 1
	intercept_register_translation("native", "setegid", 0, &gidt);
d150 2
a151 2
	intercept_register_translation("native", "socket", 0, &sockdom);
	intercept_register_translation("native", "socket", 1, &socktype);
d155 1
a155 1
	intercept_register_translation("linux", "open", 1, &linux_oflags);
d200 1
a200 1
	intercept_register_translation("linux", "chmod", 1, &modeflags);
@


1.11
log
@increase buffer size for getstring, useful for execve arguments.
intercept_filename deals better with symlinked last component lookups.
change some translations to use unlinkname.
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.10 2002/08/05 14:26:07 provos Exp $	*/
d148 4
@


1.10
log
@different translation for lstat
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.9 2002/08/01 20:16:45 provos Exp $	*/
d105 2
a106 1
	tl = intercept_register_translink("native", "readlink", 0);
d133 1
a133 1
	intercept_register_translink("native", "symlink", 1);
@


1.9
log
@the last component in a filename for unlink may be a symlink
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.8 2002/07/30 06:07:06 itojun Exp $	*/
d79 2
a80 1
	tl = intercept_register_translink("native", "lstat", 0);
@


1.8
log
@avoid using same variable name for global and auto variable.
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.7 2002/07/19 14:38:58 itojun Exp $	*/
d84 2
a85 1
	tl = intercept_register_transfn("native", "unlink", 0);
@


1.7
log
@constify, have missing prototypes, use pedantic compilation options.
niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.6 2002/07/16 14:28:17 provos Exp $	*/
d72 1
a72 1
	intercept_register_translation("native", "execve", 1, &argv);
@


1.6
log
@link translation for linux emulation, too.
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.5 2002/07/16 14:24:59 provos Exp $	*/
a44 6

extern short trans_cb(int, pid_t, int, char *, int, char *, void *, int,
    struct intercept_tlq *, void *);
extern short gen_cb(int, pid_t, int, char *, int, char *, void *, int,
    void *);
extern void execres_cb(int, pid_t, int, char *, char *, void *);
@


1.5
log
@translation for link system call
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.4 2002/07/14 22:34:55 provos Exp $	*/
d175 3
@


1.4
log
@argv translation for exeve
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.3 2002/07/13 08:54:10 provos Exp $	*/
d137 3
@


1.3
log
@uname translation
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.2 2002/07/12 12:26:29 provos Exp $	*/
d78 1
@


1.2
log
@some clean up.  install argument replacements only if we are going to
permit the system call.  translate some set[e]{g,u}id calls
@
text
@d1 1
a1 1
/*	$OpenBSD: register.c,v 1.1 2002/07/11 12:57:41 provos Exp $	*/
d114 2
d139 1
d142 1
@


1.1
log
@cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.c,v 1.24 2002/07/10 07:05:38 provos Exp $	*/
d134 9
@

