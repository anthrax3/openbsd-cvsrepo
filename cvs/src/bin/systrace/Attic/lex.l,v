head	1.21;
access;
symbols
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.36
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.34
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.30
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.28
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.26
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.24
	OPENBSD_5_0:1.18.0.22
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.20
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.18
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.14
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.16
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.12
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.10
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.8
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.6
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.4
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.17.0.10
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.8
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.6
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9;
locks; strict;
comment	@ * @;


1.21
date	2016.04.25.19.09.25;	author tedu;	state dead;
branches;
next	1.20;
commitid	Ne4KgWE1uInoydsl;

1.20
date	2015.04.18.18.28.37;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	6b2lLILbgCR1fvia;

1.19
date	2015.01.16.00.19.12;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	9JSDzKTCgxU6o5el;

1.18
date	2006.07.02.12.34.15;	author sturm;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.27.17.39.08;	author sturm;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.23.15.18.59;	author sturm;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.19.11.48.58;	author sturm;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.16.06.36.40;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.29.00.39.12;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.09.07.24.56;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.16.15.01.08;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.09.03.52.10;	author itojun;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.04.04.15.50;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.30.05.39.31;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.19.14.38.58;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.05.17.34.56;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.05.17.22.38;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.05.16.09.20;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.04.19.15.54;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.04.17.28.45;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.17.20.29;	author provos;	state Exp;
branches;
next	;


desc
@@


1.21
log
@boom goes the dynamite
@
text
@/*	$OpenBSD: lex.l,v 1.20 2015/04/18 18:28:37 deraadt Exp $	*/

/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%x quote

%{
#include <sys/types.h>
#include <sys/tree.h>

#include <sys/time.h>

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <err.h>
#include <stdarg.h>
#include <string.h>

#include "intercept.h"
#include "systrace.h"
#include "y.tab.h"

extern int yyerror(const char *fmt, ...);
int yylex(void);

char *mystring;
int myoff;

char quotestr[8192];
int quoteescape;

#define YY_INPUT(buf,result,max_size) \
{ \
	int len = strlen(mystring + myoff); \
	if (max_size < len) \
		len = max_size; \
	if (len == 0) \
		result = YY_NULL; \
	else { \
		memcpy(buf, mystring + myoff, len); \
		myoff += len; \
		result = len; \
	} \
}
%}

%%
ask		{ return ASK; }
deny		{ return DENY; }
permit		{ return PERMIT; }
and		{ return AND; }
or		{ return OR; }
not		{ return NOT; }
match		{ return MATCH; }
then		{ return THEN; }
eq		{ return EQ; }
neq		{ return NEQ; }
sub		{ return SUB; }
nsub		{ return NSUB; }
inpath		{ return INPATH; }
re		{ return RE; }
log		{ return LOG; }
true		{ return TRUE; }
"->"		{ return THEN; }
\(		{ return LBRACE; }
\)		{ return RBRACE; }
if		{ return IF; }
user		{ return USER; }
group		{ return GROUP; }
as		{ return AS; }
":"		{ return COLON; }
","		{ return COMMA; }
"="		{ return EQUAL; }
"!="		{ return NEQUAL; }
"<"		{ return LESSER; }
">"		{ return GREATER; }
[\_\$A-Za-z][\.\(\)\/A-Za-z_\-0-9]*\$? { yylval.string = strdup(yytext); return STRING; }
[0-9]+		{
		  const char *errstr;
		  yylval.number = strtonum(yytext, 0, INT_MAX, &errstr);
		  if (errstr) {
			yyerror("number %s: %s", yytext, errstr);
		  }
		  return NUMBER;
		}
\"		{ BEGIN(quote);
		  *quotestr = '\0';
		  quoteescape = 0;
		}
<quote>[^\\\"]+	{
		  if (quoteescape) {
			  switch (yytext[0]) {
			  case 'n':
				  yytext[0] = '\n';
				  break;
			  case 'r':
				  yytext[0] = '\r';
				  break;
			  default:
				  break;
			  }
		  }
		  strlcat(quotestr, yytext, sizeof(quotestr));
		  quoteescape = 0;
		}
<quote>\\	{
		  if (!quoteescape)
		     quoteescape = 1;
		  else {
		     strlcat(quotestr, "\\", sizeof(quotestr));
		     quoteescape = 0;
		  }
		}
<quote>\"	{
		  if (!quoteescape) {
			BEGIN(INITIAL);
			yylval.string = strdup(quotestr);
			return CMDSTRING;
		  } else {
			strlcat(quotestr, "\"", sizeof(quotestr));
			quoteescape = 0;
		  }
		}
\[		{ return LSQBRACE; }
\]		{ return RSQBRACE; }
\ 		{ ; }
\n		{ ; }
\t		{ ; }
"#".*\n		{ ; }
.		{ yyerror("illegal token"); }
%%
#ifndef yywrap
int yywrap() { return 1; }
#endif
@


1.20
log
@Convert many atoi() calls to strtonum(), adding range checks and failure
handling along the way.
Reviews by Brendan MacDonell, Jeremy Devenport, florian, doug, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.19 2015/01/16 00:19:12 deraadt Exp $	*/
@


1.19
log
@move to PATH_MAX, etc; normalize includes for life in the <limits.h> universe
ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.18 2006/07/02 12:34:15 sturm Exp $	*/
d106 8
a113 1
[0-9]+		{ yylval.number = atoi(yytext); return NUMBER; }
@


1.18
log
@sync with systrace 1.6d, keeping local changes

tests and feedback by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.17 2003/11/27 17:39:08 sturm Exp $	*/
d42 1
@


1.17
log
@permit trailing '$' in usernames, from Tom Cosgrove

ok provos@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.16 2003/11/23 15:18:59 sturm Exp $	*/
d140 2
a141 2
		        strlcat(quotestr, "\"", sizeof(quotestr));
		        quoteescape = 0;
@


1.16
log
@allow underscore in usernames, from Niels/NetBSD

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.15 2003/07/19 11:48:58 sturm Exp $	*/
d104 1
a104 1
[\_\$A-Za-z][\.\(\)\/A-Za-z_\-0-9]* { yylval.string = strdup(yytext); return STRING; }
@


1.15
log
@- sync with NetBSD or Niels' tarball where appropriate
- keeps local changes
- fixes a bug in profile feedback optimization and avoids symbol
  conflicts with errno
- new feature: "ask" action

itojun@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.14 2003/06/16 06:36:40 itojun Exp $	*/
d104 1
a104 1
[\$A-Za-z][\.\(\)\/A-Za-z_\-0-9]* { yylval.string = strdup(yytext); return STRING; }
@


1.14
log
@- limited number of processes per systrace
- escape fixes for special characters
markus, sturm ok.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.13 2003/05/29 00:39:12 itojun Exp $	*/
d75 1
@


1.13
log
@>permit numberic values for uid and gid;  allow "<" and ">" for less and
>greate; requested by dugsong@@,
strum ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.12 2002/12/09 07:24:56 itojun Exp $	*/
d32 1
a32 1
%x incl
d56 3
d105 38
a142 5
\"[^\"]*\" { char line[1024];
	 strlcpy(line, yytext + 1, sizeof(line));
	 line[strlen(line)-1] = '\0';
	 yylval.string = strdup(line);
	 return CMDSTRING; }
@


1.12
log
@add support for regular expressions and pidname translations.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.11 2002/10/16 15:01:08 itojun Exp $	*/
d98 2
@


1.11
log
@support for privilege elevation.

with privilege elevation no suid or sgid binaries are necessary any
longer.  Applications can be executed completely
unprivileged. Systrace raises the privileges for a single system call
depending on the configured policy.

Idea from discussions with Perry Metzger, Dug Song and Marcus Watts.

from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.10 2002/10/09 03:52:10 itojun Exp $	*/
d84 1
d100 1
a100 1
\"[^\"]+\" { char line[1024];
@


1.10
log
@predicates are part of the grammar now; in non-root case, predicates are
evaluated only once; in root case, predicates and variable expansion are
dynamic.
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.9 2002/08/04 04:15:50 provos Exp $	*/
d92 2
@


1.9
log
@keep track of ppid and allow matching rules to be logged via syslog.
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.8 2002/07/30 05:39:31 itojun Exp $	*/
d89 6
@


1.8
log
@sync prototype for yyerror().
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.7 2002/07/19 14:38:58 itojun Exp $	*/
d84 1
@


1.7
log
@constify, have missing prototypes, use pedantic compilation options.
niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.6 2002/06/05 17:34:56 mickey Exp $	*/
d50 1
a50 1
int yyerror(char *fmt, ...);
@


1.6
log
@proper handling for .y and .l such that dependancies get generated
@
text
@d1 1
a1 1
/*	$OpenBSD: lex.l,v 1.5 2002/06/05 17:22:38 mickey Exp $	*/
d51 1
@


1.5
log
@rcsids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 1
a48 1
#include "parse.h"
@


1.4
log
@inpath logic, for example, filename inpath "$CWD"
@
text
@d1 2
@


1.3
log
@KNF
@
text
@d80 1
@


1.2
log
@make it compile.
@
text
@d93 5
a97 5
\        { ; }
\n       { ;}
\t       { ; }
"#".*\n { ; }
.        { yyerror("illegal token"); }
@


1.1
log
@lexer and parser
@
text
@a35 3
#include "config.h"

#ifdef HAVE_SYS_TIME_H
a36 1
#endif
@

