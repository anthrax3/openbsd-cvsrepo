head	1.29;
access;
symbols
	OPENBSD_5_9:1.27.0.38
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.40
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.32
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.27.0.36
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.27.0.34
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.27.0.30
	OPENBSD_5_4_BASE:1.27
	OPENBSD_5_3:1.27.0.28
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.26
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.24
	OPENBSD_5_0:1.27.0.22
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.20
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.18
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.14
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.16
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.12
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.10
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.8
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.6
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.4
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.2
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.25.0.10
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.8
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.25.0.6
	OPENBSD_3_7_BASE:1.25
	OPENBSD_3_6:1.25.0.4
	OPENBSD_3_6_BASE:1.25
	OPENBSD_3_5:1.25.0.2
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.23.0.2
	OPENBSD_3_4_BASE:1.23
	OPENBSD_3_3:1.20.0.2
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15;
locks; strict;
comment	@ * @;


1.29
date	2016.04.25.19.09.25;	author tedu;	state dead;
branches;
next	1.28;
commitid	Ne4KgWE1uInoydsl;

1.28
date	2016.03.01.16.26.06;	author naddy;	state Exp;
branches;
next	1.27;
commitid	xolw6dPbpLrdT9Jj;

1.27
date	2006.07.02.12.34.15;	author sturm;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.12.20.56.10;	author sturm;	state Exp;
branches;
next	1.25;

1.25
date	2004.01.23.20.51.18;	author sturm;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.08.16.32.44;	author sturm;	state Exp;
branches;
next	1.23;

1.23
date	2003.07.19.11.48.58;	author sturm;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.16.06.36.40;	author itojun;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.29.00.39.12;	author itojun;	state Exp;
branches;
next	1.20;

1.20
date	2002.12.09.07.24.56;	author itojun;	state Exp;
branches;
next	1.19;

1.19
date	2002.11.16.14.27.17;	author itojun;	state Exp;
branches;
next	1.18;

1.18
date	2002.10.16.15.01.08;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	2002.10.16.14.43.33;	author itojun;	state Exp;
branches;
next	1.16;

1.16
date	2002.10.09.03.52.10;	author itojun;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.23.04.41.02;	author itojun;	state Exp;
branches;
next	1.14;

1.14
date	2002.08.05.23.27.53;	author provos;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.04.04.15.50;	author provos;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.30.06.07.06;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.19.14.38.58;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.16.01.22.48;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.14.22.34.55;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.13.08.54.10;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.11.12.57.41;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.09.15.22.27;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.07.18.05.20;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.04.22.45.25;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.04.19.43.35;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.04.19.15.54;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.17.20.04;	author provos;	state Exp;
branches;
next	;


desc
@@


1.29
log
@boom goes the dynamite
@
text
@/*	$OpenBSD: systrace.h,v 1.28 2016/03/01 16:26:06 naddy Exp $	*/
/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SYSTRACE_H_
#define _SYSTRACE_H_
#include <sys/queue.h>

#define _PATH_XSYSTRACE	"/usr/X11R6/bin/xsystrace"

enum logicop { LOGIC_AND, LOGIC_OR, LOGIC_NOT, LOGIC_SINGLE };

struct logic {
	enum logicop op;
	struct logic *left;
	struct logic *right;
	char *type;
	int typeoff;
	int flags;
	void *filterdata;
	size_t filterlen;
	int (*filter_match)(struct intercept_translate *, struct logic *);
	void *filterarg;
};

#define LOGIC_NEEDEXPAND	0x01

struct filter {
	TAILQ_ENTRY(filter) next;
	TAILQ_ENTRY(filter) policy_next;

	char *rule;
	char name[32];
	char emulation[16];
	struct logic *logicroot;
	short match_action;
	int match_error;
	int match_flags;
	int match_count;	/* Number of times this filter matched */

	struct predicate {
#define PREDIC_UID	0x01
#define PREDIC_GID	0x02
#define PREDIC_NEGATIVE	0x10
#define PREDIC_LESSER	0x20
#define PREDIC_GREATER	0x30
#define PREDIC_MASK	0x30
		int p_flags;
		uid_t p_uid;
		gid_t p_gid;
	} match_predicate;

	struct elevate elevate;
};

TAILQ_HEAD(filterq, filter);

struct policy_syscall {
	SPLAY_ENTRY(policy_syscall) node;

	char name[64];
	char emulation[16];

	struct filterq flq;
};

struct policy {
	SPLAY_ENTRY(policy) node;
	SPLAY_ENTRY(policy) nrnode;

	const char *name;
	char emulation[16];

	struct timespec ts_last;	/* last time we read the file */

	SPLAY_HEAD(syscalltree, policy_syscall) pflqs;

	int policynr;			/* in-kernel policy number */
	short kerneltable[INTERCEPT_MAXSYSCALLNR];
	int flags;

	struct filterq filters;
	int nfilters;			/* nr of installed policy statements */
	struct filterq prefilters;	/* filters we need to install*/
};

struct template {
	TAILQ_ENTRY(template) next;

	char *filename;
	char *name;
	char *description;

	char *emulation;
};

TAILQ_HEAD(tmplqueue, template);

#define POLICY_PATH		"/etc/systrace"

#define POLICY_UNSUPERVISED	0x01	/* Auto-Pilot */
#define POLICY_DETACHED		0x02	/* Ignore this program */
#define POLICY_CHANGED		0x04

#define PROCESS_INHERIT_POLICY	0x01	/* Process inherits policy */
#define PROCESS_DETACH		0x02	/* Process gets detached */
#define SYSCALL_LOG		0x04	/* Log this system call */
#define PROCESS_PROMPT		0x08	/* Prompt but nothing else */

#define SYSTRACE_UPDATETIME	30	/* update policies every 30 seconds */

void systrace_parameters(void);
int systrace_initpolicy(char *, char *);
void systrace_setupdir(char *);
struct template *systrace_readtemplate(char *, struct policy *,
    struct template *);
void systrace_initcb(void);
struct policy *systrace_newpolicy(const char *, const char *);
void systrace_cleanpolicy(struct policy *);
void systrace_freepolicy(struct policy *);
int systrace_newpolicynr(int, struct policy *);
int systrace_modifypolicy(int, int, const char *, short);
struct policy *systrace_findpolicy(const char *);
struct policy *systrace_findpolicy_wildcard(const char *);
struct policy *systrace_findpolnr(int);
int systrace_dumppolicies(int);
int systrace_updatepolicies(int);
struct policy *systrace_readpolicy(const char *);
int systrace_addpolicy(const char *);
int systrace_updatepolicy(int fd, struct policy *policy);
struct filterq *systrace_policyflq(struct policy *, const char *, const char *);
char *systrace_getpolicyname(const char *);

int systrace_error_translate(char *);

#define SYSTRACE_MAXALIAS	10

struct systrace_alias {
	SPLAY_ENTRY(systrace_alias) node;
	TAILQ_ENTRY(systrace_alias) next;

	char name[64];
	char emulation[16];

	char aname[64];
	char aemul[16];

	struct intercept_translate *arguments[SYSTRACE_MAXALIAS];
	int nargs;

	struct systrace_revalias *reverse;
};

int systrace_initalias(void);
struct systrace_alias *systrace_new_alias(const char *, const char *, char *, char *);
void systrace_switch_alias(const char *, const char *, char *, char *);
struct systrace_alias *systrace_find_alias(const char *, const char *);
void systrace_alias_add_trans(struct systrace_alias *,
    struct intercept_translate *);

struct systrace_revalias {
	SPLAY_ENTRY(systrace_revalias) node;

	char name[64];
	char emulation[16];

	TAILQ_HEAD(revaliasq, systrace_alias) revl;
};

struct systrace_revalias *systrace_reverse(const char *, const char *);
struct systrace_revalias *systrace_find_reverse(const char *, const char *);

short filter_evaluate(struct intercept_tlq *, struct filterq *,
    struct intercept_pid *);
short filter_ask(int, struct intercept_tlq *, struct filterq *, int,
    const char *, const char *, char *, short *, struct intercept_pid *);
void filter_free(struct filter *);
void filter_modifypolicy(int, int, const char *, const char *, short);

int filter_predicate(struct intercept_pid *, struct predicate *);
int filter_parse_simple(char *, short *, short *);
int filter_parse(char *, struct filter **);
int filter_prepolicy(int, struct policy *);
char *filter_expand(char *);
char *filter_dynamicexpand(struct intercept_pid *, char *);
int filter_needexpand(char *);

void cradle_start(char *, char *, char *);

int parse_filter(char *, struct filter **);

char *uid_to_name(uid_t);

char *strrpl(char *, size_t, char *, char *);

void make_output(char *, size_t, const char *, pid_t, pid_t, int,
    const char *, int, const char *, const char *, int, struct intercept_tlq *,
    struct intercept_replace *);
short trans_cb(int, pid_t, int, const char *, int, const char *, void *,
    int, struct intercept_replace *, struct intercept_tlq *, void *);
short gen_cb(int, pid_t, int, const char *, int, const char *, void *,
    int, void *);
void execres_cb(int, pid_t, int, const char *, const char *, void *);
void policyfree_cb(int, void *);

extern struct intercept_translate ic_oflags;
extern struct intercept_translate ic_modeflags;
extern struct intercept_translate ic_fdt;
extern struct intercept_translate ic_uidt;
extern struct intercept_translate ic_uname;
extern struct intercept_translate ic_gidt;
extern struct intercept_translate ic_trargv;
extern struct intercept_translate ic_sockdom;
extern struct intercept_translate ic_socktype;
extern struct intercept_translate ic_pidname;
extern struct intercept_translate ic_signame;
extern struct intercept_translate ic_fcntlcmd;
extern struct intercept_translate ic_memprot;
extern struct intercept_translate ic_fileflags;

int requestor_start(char *, int);

#endif /* _SYSTRACE_H_ */
@


1.28
log
@drop Linux emulation support; ok sthen@@ visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.27 2006/07/02 12:34:15 sturm Exp $	*/
@


1.27
log
@sync with systrace 1.6d, keeping local changes

tests and feedback by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.26 2006/03/12 20:56:10 sturm Exp $	*/
a245 1
extern struct intercept_translate ic_linux_memprot;
a246 2

extern struct intercept_translate ic_linux_oflags;
@


1.26
log
@add a few new translations, partly from NetBSD

ok provos@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.25 2004/01/23 20:51:18 sturm Exp $	*/
d101 2
d105 2
a106 1
	int policynr;
d110 2
a111 2
	int nfilters;
	struct filterq prefilters;
d137 2
d146 1
d151 1
d153 3
a155 2
int systrace_dumppolicy(void);
int systrace_readpolicy(char *);
d157 1
d159 1
d163 1
a163 1
#define SYSTRACE_MAXALIAS	5
d246 1
@


1.25
log
@support for cradle mode by marius at monkey.org; cradle mode allows the
systrace UI to be attached and re-attached, it also multiplexes across
systrace process so that one UI can function as central notification

from provos@@, ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.24 2003/10/08 16:32:44 sturm Exp $	*/
d234 3
@


1.24
log
@originally from cb@@openbsd.org, adapted by provos

itojun@@ ok

fix a race condition between path resolution in userland
and the subsequent namei(): inform the kernel portion of
valid filenames and then disallow symlink lookups for
those filenames by means of a hook in namei().
with suggestions from provos@@

also, add (currently unused) seqnr field to struct
systrace_replace, from provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.23 2003/07/19 11:48:58 sturm Exp $	*/
d205 2
d236 2
@


1.23
log
@- sync with NetBSD or Niels' tarball where appropriate
- keeps local changes
- fixes a bug in profile feedback optimization and avoids symbol
  conflicts with errno
- new feature: "ask" action

itojun@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.22 2003/06/16 06:36:40 itojun Exp $	*/
d215 1
a215 1
    int, struct intercept_tlq *, void *);
@


1.22
log
@- limited number of processes per systrace
- escape fixes for special characters
markus, sturm ok.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.21 2003/05/29 00:39:12 itojun Exp $	*/
d132 1
@


1.21
log
@>permit numberic values for uid and gid;  allow "<" and ">" for less and
>greate; requested by dugsong@@,
strum ok
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.20 2002/12/09 07:24:56 itojun Exp $	*/
d140 1
d218 1
@


1.20
log
@add support for regular expressions and pidname translations.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.19 2002/11/16 14:27:17 itojun Exp $	*/
d72 3
@


1.19
log
@rename translation tables.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.18 2002/10/16 15:01:08 itojun Exp $	*/
d50 1
d224 2
@


1.18
log
@support for privilege elevation.

with privilege elevation no suid or sgid binaries are necessary any
longer.  Applications can be executed completely
unprivileged. Systrace raises the privileges for a single system call
depending on the configured policy.

Idea from discussions with Perry Metzger, Dug Song and Marcus Watts.

from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.17 2002/10/16 14:43:33 itojun Exp $	*/
d214 9
a222 9
extern struct intercept_translate oflags;
extern struct intercept_translate modeflags;
extern struct intercept_translate fdt;
extern struct intercept_translate uidt;
extern struct intercept_translate uname;
extern struct intercept_translate gidt;
extern struct intercept_translate trargv;
extern struct intercept_translate sockdom;
extern struct intercept_translate socktype;
d224 1
a224 1
extern struct intercept_translate linux_oflags;
@


1.17
log
@translation for socket system call
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.16 2002/10/09 03:52:10 itojun Exp $	*/
d75 2
@


1.16
log
@predicates are part of the grammar now; in non-root case, predicates are
evaluated only once; in root case, predicates and variable expansion are
dynamic.
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.15 2002/09/23 04:41:02 itojun Exp $	*/
d219 2
@


1.15
log
@support for templates.  they allow fast generation of new policies. an
appropriate template can be inserted during initial policy generation.
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.14 2002/08/05 23:27:53 provos Exp $	*/
d46 1
d52 2
d66 9
d127 1
d182 2
a183 1
short filter_evaluate(struct intercept_tlq *, struct filterq *, int *);
d185 1
a185 1
    const char *, const char *, char *, short *, int *);
d189 1
d193 3
a195 1
char *filter_expand(char *data);
@


1.14
log
@allow to specify an alternate directory for policy loading and writing
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.13 2002/08/04 04:15:50 provos Exp $	*/
d93 12
d117 2
d170 2
a171 2
short filter_ask(struct intercept_tlq *, struct filterq *, int, const char *,
    const char *, char *, short *, int *);
@


1.13
log
@keep track of ppid and allow matching rules to be logged via syslog.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.12 2002/07/30 06:07:06 itojun Exp $	*/
d103 2
a104 1
int systrace_initpolicy(char *);
@


1.12
log
@avoid using same variable name for global and auto variable.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.11 2002/07/19 14:38:58 itojun Exp $	*/
d101 1
d171 1
a171 1
void make_output(char *, size_t, const char *, pid_t, int,
@


1.11
log
@constify, have missing prototypes, use pedantic compilation options.
niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.10 2002/07/16 01:22:48 provos Exp $	*/
d185 1
a185 1
extern struct intercept_translate argv;
@


1.10
log
@internal uid/gid tracking.  permit can not detach systrace, useful for
sshd.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.9 2002/07/14 22:34:55 provos Exp $	*/
d80 1
a80 1
	char *name;
d104 1
a104 1
struct policy *systrace_newpolicy(char *, char *);
d106 2
a107 2
int systrace_modifypolicy(int, int, char *, short);
struct policy *systrace_findpolicy(char *);
d111 2
a112 2
int systrace_addpolicy(char *);
struct filterq *systrace_policyflq(struct policy *, char *, char *);
d135 3
a137 3
struct systrace_alias *systrace_new_alias(char *, char *, char *, char *);
void systrace_switch_alias(char *, char *, char *, char *);
struct systrace_alias *systrace_find_alias(char *, char *);
d150 2
a151 2
struct systrace_revalias *systrace_reverse(char *, char *);
struct systrace_revalias *systrace_find_reverse(char *, char *);
d154 2
a155 2
short filter_ask(struct intercept_tlq *, struct filterq *, int, char *,
    char *, char *, short *, int *);
d157 1
a157 1
void filter_modifypolicy(int, int, char *, char *, short);
d170 9
d188 1
@


1.9
log
@argv translation for exeve
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.8 2002/07/13 08:54:10 provos Exp $	*/
d100 1
@


1.8
log
@uname translation
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.7 2002/07/11 12:57:41 provos Exp $	*/
d175 1
@


1.7
log
@cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.6 2002/07/09 15:22:27 provos Exp $	*/
d173 1
@


1.6
log
@support for system call aliasing.  stat/fstat/readlink/access etc... gets
grouped into fsread, unlink/rmdir/mkdir goes to fswrite.  open switches
back between fsread and fswrite depending on oflags parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.5 2002/06/07 18:05:20 provos Exp $	*/
d102 1
@


1.5
log
@use profiling to order filter lists more optimally.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.4 2002/06/04 22:45:25 provos Exp $	*/
d114 37
d155 1
@


1.4
log
@log offending syscalls to syslog in automatic mode. dugsong@@
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.3 2002/06/04 19:43:35 provos Exp $	*/
d62 1
@


1.3
log
@explicit path for notification tool xsystrace.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.2 2002/06/04 19:15:54 deraadt Exp $	*/
d124 2
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace.h,v 1.1 2002/06/04 17:20:04 provos Exp $	*/
d35 2
@


1.1
log
@initial import of systrace.  don't touch this, more stuff coming in a while
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d81 1
a81 1
	
d90 1
a90 1
#define POLICY_PATH		"/etc/systrace"	
@

