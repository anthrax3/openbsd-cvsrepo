head	1.28;
access;
symbols
	OPENBSD_5_9:1.27.0.4
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.6
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.26.0.10
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.8
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.4
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.2
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.25.0.4
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.2
	OPENBSD_5_0:1.24.0.22
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.20
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.18
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.14
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.16
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.12
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.10
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.8
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.6
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.4
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.21.0.8
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.6
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.4
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.2
	OPENBSD_3_6_BASE:1.21
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11;
locks; strict;
comment	@ * @;


1.28
date	2016.04.25.19.09.25;	author tedu;	state dead;
branches;
next	1.27;
commitid	Ne4KgWE1uInoydsl;

1.27
date	2015.01.16.00.19.12;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	9JSDzKTCgxU6o5el;

1.26
date	2012.08.23.00.08.36;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2011.09.18.23.24.14;	author matthew;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.02.12.34.15;	author sturm;	state Exp;
branches;
next	1.23;

1.23
date	2006.06.10.07.19.13;	author sturm;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.02.19.49.05;	author sturm;	state Exp;
branches;
next	1.21;

1.21
date	2004.07.07.07.31.40;	author marius;	state Exp;
branches;
next	1.20;

1.20
date	2004.06.23.05.16.35;	author marius;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.08.16.32.44;	author sturm;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.04.18.15.11;	author sturm;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.16.06.36.40;	author itojun;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.20.22.03.31;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2002.12.09.07.22.53;	author itojun;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.26.03.48.07;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.16.15.01.08;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.09.03.52.10;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.04.04.15.50;	author provos;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.01.20.16.45;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.22.04.02.39;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.19.14.38.57;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.16.01.22.48;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.12.12.26.29;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.09.20.46.18;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.09.15.22.27;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.21.15.26.06;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.10.19.16.26;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.17.20.04;	author provos;	state Exp;
branches;
next	;


desc
@@


1.28
log
@boom goes the dynamite
@
text
@/*	$OpenBSD: intercept.h,v 1.27 2015/01/16 00:19:12 deraadt Exp $	*/
/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _INTERCEPT_H_
#define _INTERCEPT_H_
#include <sys/types.h>
#include <sys/queue.h>

struct intercept_pid;
struct intercept_replace;
struct elevate;

struct intercept_system {
	char *name;
	int (*init)(void);
	int (*open)(void);
	int (*attach)(int, pid_t);
	int (*detach)(int, pid_t);
	int (*report)(int, pid_t);
	int (*read)(int);
	int (*getsyscallnumber)(const char *, const char *);
	int (*setcwd)(int, pid_t, int);
	int (*restcwd)(int);
	int (*io)(int, pid_t, int, void *, u_char *, size_t);
	int (*getarg)(int, void *, int, void **);
	int (*answer)(int, pid_t, u_int16_t, short, int, short,
	    struct elevate *);
	int (*newpolicy)(int);
	int (*assignpolicy)(int, pid_t, int);
	int (*policy)(int, int, int, short);
	int (*replace)(int, pid_t, u_int16_t, struct intercept_replace *);
	void (*clonepid)(struct intercept_pid *, struct intercept_pid *);
	void (*freepid)(struct intercept_pid *);
	int (*scriptname)(int, pid_t, char *);
};

#define INTERCEPT_READ	1
#define INTERCEPT_WRITE	2

#define ICPOLICY_ASK	0
#define ICPOLICY_PERMIT	-1
#define ICPOLICY_KILL	-2
#define ICPOLICY_NEVER	1	/* overloaded with errno values > 1 */

#define ICLINK_NONE	0	/* do not resolve symlinks */
#define ICLINK_ALL	1	/* resolve all symlinks */
#define ICLINK_NOLAST	2	/* do not resolve last component */

#define ICFLAGS_RESULT	1

#define	ICTRANS_NOLINKS	1	/* translation should have no symlinks */

/* Privilege elevation */
struct elevate {
#define ELEVATE_UID	0x01
#define ELEVATE_GID	0x02
	int e_flags;
	uid_t e_uid;
	gid_t e_gid;
};

struct intercept_pid {
	SPLAY_ENTRY(intercept_pid) next;
	pid_t pid;
	pid_t ppid;		/* parent pid */

	int policynr;
	int execve_code;
	short execve_policy;
	char *name;		/* name of current process image */
	char *newname;		/* image name to be committed by execve */

	uid_t uid;		/* current uid */
	gid_t gid;		/* current gid */

	char username[LOGIN_NAME_MAX];
	char home[PATH_MAX];	/* current home dir for uid */

	void *data;

	int uflags;	/* Flags that can be used by external application */
	struct elevate *elevate;	/* privilege elevation request */
};

#define INTERCEPT_MAXSYSCALLNR		512
#define INTERCEPT_MAXSYSCALLARGS	10

struct intercept_translate {
	char *name;
	int (*translate)(struct intercept_translate *, int, pid_t, void *);
	int (*print)(char *, size_t, struct intercept_translate *);
	int off2;
	int offend;
	int off;
	u_char trans_valid;
	void *trans_addr;
	void *trans_addr2;
	void *trans_addrend;
	void *trans_data;
	size_t trans_size;
	char *trans_print;
	u_int trans_flags;
	void *user;
	TAILQ_ENTRY(intercept_translate) next;
};

struct intercept_replace {
	int num;
	int ind[INTERCEPT_MAXSYSCALLARGS];
	u_char *address[INTERCEPT_MAXSYSCALLARGS];
	size_t len[INTERCEPT_MAXSYSCALLARGS];
	u_int flags[INTERCEPT_MAXSYSCALLARGS];
};

TAILQ_HEAD(intercept_tlq, intercept_translate);

int intercept_init(void);
pid_t intercept_run(int, int *, uid_t, gid_t, char *, char * const *);
int intercept_open(void);
int intercept_attach(int, pid_t);
int intercept_attachpid(int, pid_t, char *);
int intercept_detach(int, pid_t);
int intercept_read(int);
int intercept_newpolicy(int);
int intercept_assignpolicy(int, pid_t, int);
int intercept_modifypolicy(int, int, const char *, const char *, short);
int intercept_modifypolicy_nr(int, int, int, short);
void intercept_child_info(pid_t, pid_t);
void intercept_policy_free(int);

int intercept_replace_init(struct intercept_replace *);
int intercept_replace_add(struct intercept_replace *, int, u_char *, size_t, u_int);
int intercept_replace(int, pid_t, u_int16_t, struct intercept_replace *);

int intercept_register_sccb(char *, char *,
    short (*)(int, pid_t, int, const char *, int, const char *, void *, int,
	struct intercept_replace *, struct intercept_tlq *, void *),
    void *);
void *intercept_sccb_cbarg(char *, char *);

int intercept_register_gencb(short (*)(int, pid_t, int, const char *, int, const char *, void *, int, void *), void *);
int intercept_register_execcb(void (*)(int, pid_t, int, const char *, const char *, void *), void *);
int intercept_register_pfreecb(void (*)(int, void *), void *);

struct intercept_translate *intercept_register_translation(char *, char *,
    int, struct intercept_translate *);
int intercept_translate(struct intercept_translate *, int, pid_t, int, void *, int);
char *intercept_translate_print(struct intercept_translate *);

#define intercept_register_transstring(x,y,z)	\
	intercept_register_translation(x, y, z, &ic_translate_string)
#define intercept_register_transfn(x,y,z)	\
	intercept_register_translation(x, y, z, &ic_translate_filename)
#define intercept_register_translink(x,y,z)	\
	intercept_register_translation(x, y, z, &ic_translate_linkname)

extern struct intercept_translate ic_translate_string;
extern struct intercept_translate ic_translate_filename;
extern struct intercept_translate ic_translate_linkname;
extern struct intercept_translate ic_translate_unlinkname;
extern struct intercept_translate ic_translate_filenameat;
extern struct intercept_translate ic_translate_unlinknameat;
extern struct intercept_translate ic_translate_filenameatflag;
extern struct intercept_translate ic_translate_unlinknameatflag;
extern struct intercept_translate ic_translate_connect;
extern struct intercept_translate ic_translate_sendmsg;

void intercept_freepid(pid_t);
struct intercept_pid *intercept_findpid(pid_t);
struct intercept_pid *intercept_getpid(pid_t);
int intercept_existpids(void);

char *intercept_get_string(int, pid_t, void *);
char *normalize_filename(int, pid_t, char *, int);
char *normalize_filenameat(int, pid_t, int, char *, int);
char *intercept_filename(int, pid_t, void *, int, char *);
char *intercept_filenameat(int, pid_t, int, void *, int, char *);
void intercept_syscall(int, pid_t, u_int16_t, int, const char *, int,
    const char *, void *, int);
void intercept_syscall_result(int, pid_t, u_int16_t, int, const char *, int,
    const char *, void *, int, int, void *);
void intercept_newimage(int, pid_t, int,
    const char *, char *, struct intercept_pid *);
void intercept_ugid(struct intercept_pid *, uid_t, gid_t);
void intercept_setpid(struct intercept_pid *, uid_t, gid_t);

int intercept_getsyscallnumber(const char *, const char *);
int intercept_isvalidsystemcall(const char *, const char *);

#endif /* _INTERCEPT_H_ */
@


1.27
log
@move to PATH_MAX, etc; normalize includes for life in the <limits.h> universe
ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.26 2012/08/23 00:08:36 guenther Exp $	*/
@


1.26
log
@Reopen the systrace file in the process that will actually attach to the
target process(es), so that systrace files can be made unsharable.

ok djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.25 2011/09/18 23:24:14 matthew Exp $	*/
d34 1
a34 1
#include <sys/param.h>
d105 1
a105 1
	char home[MAXPATHLEN];	/* current home dir for uid */
@


1.25
log
@Add support for *at(2) system calls to systrace(1).

ok deraadt@@, sthen@@, jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.24 2006/07/02 12:34:15 sturm Exp $	*/
d146 1
a146 1
pid_t intercept_run(int, int, uid_t, gid_t, char *, char * const *);
@


1.24
log
@sync with systrace 1.6d, keeping local changes

tests and feedback by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.23 2006/06/10 07:19:13 sturm Exp $	*/
d50 1
a50 1
	int (*setcwd)(int, pid_t);
d121 1
d126 1
d189 4
d203 1
d205 1
@


1.23
log
@add a translation for sendmsg()

from provos, with feedback from ray and pat
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.22 2006/05/02 19:49:05 sturm Exp $	*/
d104 1
a104 1
	char username[MAXLOGNAME];
d113 1
d129 1
d153 1
d202 2
a205 2
void intercept_newimage(int, pid_t, int,
    const char *, char *, struct intercept_pid *);
d207 2
a208 1
int intercept_isvalidsystemcall(char *, char *);
@


1.22
log
@some type cleanup

with feedback from kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.21 2004/07/07 07:31:40 marius Exp $	*/
d185 1
@


1.21
log
@fix an issue when scripts are exec'd under systrace where
the argv[0] would be normalized, and hence break scripts
that depend on how they were called.

this fixes an issue in the ports builds.

ok provos@@ deraadt@@; lots of testing during hackathon sturm@@ naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.20 2004/06/23 05:16:35 marius Exp $	*/
d54 1
a54 1
	int (*answer)(int, pid_t, u_int32_t, short, int, short,
d95 1
a95 1
	short policynr;
@


1.20
log
@a few fixes to systrace

- add an exec message so that whenever a set-uid/gid process
  exec's a new image which we may control, the exec does not
  go by unnoticed.

- take special care to check for P_SUGIDEXEC as well as
  P_SUGID, corresponding to the same changes that were made in
  the ptrace code a while ago

ok niels@@, sturm@@; thanks to naddy for testing
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.19 2003/10/08 16:32:44 sturm Exp $	*/
d62 1
d193 1
a193 1
char *intercept_filename(int, pid_t, void *, int);
@


1.19
log
@originally from cb@@openbsd.org, adapted by provos

itojun@@ ok

fix a race condition between path resolution in userland
and the subsequent namei(): inform the kernel portion of
valid filenames and then disallow symlink lookups for
those filenames by means of a hook in namei().
with suggestions from provos@@

also, add (currently unused) seqnr field to struct
systrace_replace, from provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.18 2003/08/04 18:15:11 sturm Exp $	*/
d199 2
@


1.18
log
@several diffs from Niels as applied to NetBSD

monkey.org/NetBSD commit messages:
- get rid of retarded CWD handling.  CWD is fixed to the CWD of the systrace
that started everything.
- normalize file name function
- normalize CWD for cases where CWD has a symlink in it.  should solve
problems where CWD policies would not match.
- avoid warning due to name collision.
- fixed contrived race condition during attachment; from marius@@monkey.org

itojun@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.17 2003/06/16 06:36:40 itojun Exp $	*/
d59 1
a59 1
	int (*replace)(int, pid_t, struct intercept_replace *);
d78 2
d126 1
d135 1
d154 2
a155 2
int intercept_replace_add(struct intercept_replace *, int, u_char *, size_t);
int intercept_replace(int, pid_t, struct intercept_replace *);
d159 1
a159 1
	struct intercept_tlq *, void *),
@


1.17
log
@- limited number of processes per systrace
- escape fixes for special characters
markus, sturm ok.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.16 2003/02/20 22:03:31 art Exp $	*/
a102 1
	char cwd[MAXPATHLEN];	/* current working directory */
d187 1
@


1.16
log
@Fix a crash in the systrace found by form@@
One is a kernel fix that changes the lockin and one is a userland fix that
prevents dereferencing a freed pointer.
From provos
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.15 2002/12/09 07:22:53 itojun Exp $	*/
d148 1
d162 1
@


1.15
log
@prevent the use of permit for aliases.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.14 2002/11/26 03:48:07 itojun Exp $	*/
d181 1
@


1.14
log
@performance improvement by omitting a redundant getcwd.
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.13 2002/10/16 15:01:08 itojun Exp $	*/
d192 2
@


1.13
log
@support for privilege elevation.

with privilege elevation no suid or sgid binaries are necessary any
longer.  Applications can be executed completely
unprivileged. Systrace raises the privileges for a single system call
depending on the configured policy.

Idea from discussions with Perry Metzger, Dug Song and Marcus Watts.

from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.12 2002/10/09 03:52:10 itojun Exp $	*/
d50 1
a50 1
	char *(*getcwd)(int, pid_t, char *, size_t);
@


1.12
log
@predicates are part of the grammar now; in non-root case, predicates are
evaluated only once; in root case, predicates and variable expansion are
dynamic.
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.11 2002/08/04 04:15:50 provos Exp $	*/
d39 1
d54 2
a55 1
	int (*answer)(int, pid_t, u_int32_t, short, int, short);
d78 9
d108 1
d138 1
a138 1
pid_t intercept_run(int, int, char *, char * const *);
d191 1
a191 1
void intercept_setpid(struct intercept_pid *);
@


1.11
log
@keep track of ppid and allow matching rules to be logged via syslog.
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.10 2002/08/01 20:16:45 provos Exp $	*/
d34 1
a86 4
#define ICFLAGS_UIDKNOWN	0x01
#define ICFLAGS_GIDKNOWN	0x02
	int flags;

d90 4
d178 2
@


1.10
log
@the last component in a filename for unlink may be a symlink
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.9 2002/07/22 04:02:39 provos Exp $	*/
d78 1
@


1.9
log
@add seqnr to message from kernel, userland needs to quote correct seqnr.
avoids problems where tsleep has been interrupted by a signal.
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.8 2002/07/19 14:38:57 itojun Exp $	*/
d69 4
d163 1
@


1.8
log
@constify, have missing prototypes, use pedantic compilation options.
niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.7 2002/07/16 01:22:48 provos Exp $	*/
d52 1
a52 1
	int (*answer)(int, pid_t, short, int, short);
d167 4
a170 4
void intercept_syscall(int, pid_t, int, const char *, int, const char *,
    void *, int);
void intercept_syscall_result(int, pid_t, int, const char *, int, const char *,
    void *, int, int, void *);
@


1.7
log
@internal uid/gid tracking.  permit can not detach systrace, useful for
sshd.
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.6 2002/07/12 12:26:29 provos Exp $	*/
d47 1
a47 1
	int (*getsyscallnumber)(char *, char *);
d128 2
a129 1
int intercept_modifypolicy(int, int, char *, char *, short);
d136 1
a136 1
    short (*)(int, pid_t, int, char *, int, char *, void *, int,
d141 2
a142 2
int intercept_register_gencb(short (*)(int, pid_t, int, char *, int, char *, void *, int, void *), void *);
int intercept_register_execcb(void (*)(int, pid_t, int, char *, char *, void *), void *);
d167 4
@


1.6
log
@some clean up.  install argument replacements only if we are going to
permit the system call.  translate some set[e]{g,u}id calls
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.5 2002/07/09 20:46:18 provos Exp $	*/
d78 9
a86 2
	char *name;
	char *newname;
@


1.5
log
@allow systrace to run in the background if possible so that the executed
process gets the terminal correctly and exit status reporting works;
based on a diff from atatat@@atatdot.net from netbsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.4 2002/07/09 15:22:27 provos Exp $	*/
d67 1
a67 1
#define ICPOLICY_NEVER	1
@


1.4
log
@support for system call aliasing.  stat/fstat/readlink/access etc... gets
grouped into fsread, unlink/rmdir/mkdir goes to fswrite.  open switches
back between fsread and fswrite depending on oflags parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.3 2002/06/21 15:26:06 provos Exp $	*/
d113 1
a113 1
pid_t intercept_run(int, char *, char * const *);
@


1.3
log
@rewrite all system call arguments in the permit case.  use realpath
when we still have the root and we of the monitored process.  this
eliminates almost all race coniditions.
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.3 2002/06/21 15:22:04 provos Exp $	*/
d136 2
a137 2
int intercept_register_translation(char *, char *, int,
    struct intercept_translate *);
@


1.2
log
@support attaching to a running process; some code by fries@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intercept.h,v 1.1 2002/06/04 17:20:04 provos Exp $	*/
d37 1
d49 1
d56 1
d103 7
d123 4
d158 1
a158 1
char *intercept_filename(int, pid_t, void *);
@


1.1
log
@initial import of systrace.  don't touch this, more stuff coming in a while
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
d106 1
@

