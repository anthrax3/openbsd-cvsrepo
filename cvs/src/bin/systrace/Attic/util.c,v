head	1.14;
access;
symbols
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.30
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.28
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.26
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.24
	OPENBSD_5_0:1.11.0.22
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.20
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.18
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.14
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8;
locks; strict;
comment	@ * @;


1.14
date	2016.04.25.19.09.25;	author tedu;	state dead;
branches;
next	1.13;
commitid	Ne4KgWE1uInoydsl;

1.13
date	2015.09.29.20.11.36;	author tedu;	state Exp;
branches;
next	1.12;
commitid	kFS77pS3UQvogJGw;

1.12
date	2013.11.21.15.54.46;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.26.20.19.25;	author sturm;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.16.06.36.40;	author itojun;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.09.03.52.10;	author itojun;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.19.14.38.58;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.22.09.03.57;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.18.01.54.31;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.09.05.27.50;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.04.22.45.25;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.04.19.20.54;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.04.19.15.54;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.17.20.04;	author provos;	state Exp;
branches;
next	;


desc
@@


1.14
log
@boom goes the dynamite
@
text
@/*	$OpenBSD: util.c,v 1.13 2015/09/29 20:11:36 tedu Exp $	*/
/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <string.h>
#include <ctype.h>
#include <stdio.h>
#include <err.h>

#include "util.h"

char *
strescape(char *str)
{
	static char escape[8192];
	int i, p;

	for (p = i = 0; i < strlen(str) && p < sizeof(escape) - 1; i++) {
		char a = str[i];
		switch (a) {
		case '\r':
			a = 'r';
			goto doescape;
		case '\n':
			a = 'n';
			goto doescape;
		case '\\':
		case '\"':
		doescape:
			escape[p++] = '\\';
			if (p >= sizeof(escape) - 1)
				errx(1, "%s: string too long: %s",
				    __func__, str);
			/* FALLTHROUGH */
		default:
			escape[p++] = a;
		}
	}

	escape[p] = '\0';
	return (escape);
}

char *
strrpl(char *str, size_t size, char *match, char *value)
{
	char *p, *e;
	int len, rlen;

	p = str;
	e = p + strlen(p);
	len = strlen(match);

	/* Try to match against the variable */
	while ((p = strchr(p, match[0])) != NULL) {
		if (!strncmp(p, match, len) && !isalnum((unsigned char)p[len]))
			break;
		p += len;

		if (p >= e)
			return (NULL);
	}

	if (p == NULL)
		return (NULL);

	rlen = strlen(value);

	if (strlen(str) - len + rlen > size)
		return (NULL);

	memmove(p + rlen, p + len, strlen(p + len) + 1);
	memcpy(p, value, rlen);

	return (p);
}

/* simplify_path is from pdksh and apparently in the public domain */

/* ISABSPATH() means path is fully and completely specified,
 * ISROOTEDPATH() means a .. as the first component is a no-op,
 * ISRELPATH() means $PWD can be tacked on to get an absolute path.
 *
 * OS		Path		ISABSPATH	ISROOTEDPATH	ISRELPATH
 * unix		/foo		yes		yes		no
 * unix		foo		no		no		yes
 * unix		../foo		no		no		yes
 * os2+cyg	a:/foo		yes		yes		no
 * os2+cyg	a:foo		no		no		no
 * os2+cyg	/foo		no		yes		no
 * os2+cyg	foo		no		no		yes
 * os2+cyg	../foo		no		no		yes
 * cyg 		//foo		yes		yes		no
 */
# define PATHSEP	':'
# define DIRSEP		'/'
# define DIRSEPSTR	"/"
# define ISDIRSEP(c)    ((c) == '/')
# define ISABSPATH(s)	ISDIRSEP((s)[0])
# define ISRELPATH(s)	(!ISABSPATH(s))
# define ISROOTEDPATH(s) ISABSPATH(s)
# define FILECHCONV(c)	c
# define FILECMP(s1, s2) strcmp(s1, s2)
# define FILENCMP(s1, s2, n) strncmp(s1, s2, n)
# define ksh_strchr_dirsep(p)   strchr(p, DIRSEP)
# define ksh_strrchr_dirsep(p)  strrchr(p, DIRSEP)

/* simplify_path is from pdksh */

/*
 * Simplify pathnames containing "." and ".." entries.
 * ie, simplify_path("/a/b/c/./../d/..") returns "/a/b"
 */
void
simplify_path(path)
	char	*path;
{
	char	*cur;
	char	*t;
	int	isrooted;
	char	*very_start = path;
	char	*start;

	if (!*path)
		return;

	if ((isrooted = ISROOTEDPATH(path)))
		very_start++;

	/* Before			After
	 *  /foo/			/foo
	 *  /foo/../../bar		/bar
	 *  /foo/./blah/..		/foo
	 *  .				.
	 *  ..				..
	 *  ./foo			foo
	 *  foo/../../../bar		../../bar
	 * OS2 and CYGWIN:
	 *  a:/foo/../..		a:/
	 *  a:.				a:
	 *  a:..			a:..
	 *  a:foo/../../blah		a:../blah
	 */


	for (cur = t = start = very_start; ; ) {
		/* treat multiple '/'s as one '/' */
		while (ISDIRSEP(*t))
			t++;

		if (*t == '\0') {
			if (cur == path)
				/* convert empty path to dot */
				*cur++ = '.';
			*cur = '\0';
			break;
		}

		if (t[0] == '.') {
			if (!t[1] || ISDIRSEP(t[1])) {
				t += 1;
				continue;
			} else if (t[1] == '.' && (!t[2] || ISDIRSEP(t[2]))) {
				if (!isrooted && cur == start) {
					if (cur != very_start)
						*cur++ = DIRSEP;
					*cur++ = '.';
					*cur++ = '.';
					start = cur;
				} else if (cur != start)
					while (--cur > start && !ISDIRSEP(*cur))
						;
				t += 2;
				continue;
			}
		}

		if (cur != very_start)
			*cur++ = DIRSEP;

		/* find/copy next component of pathname */
		while (*t && !ISDIRSEP(*t))
			*cur++ = *t++;
	}
}
@


1.13
log
@unifdef support for other operating systems. sorry OS/2 cultists.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.12 2013/11/21 15:54:46 deraadt Exp $	*/
@


1.12
log
@add unsigned char casts for specific calls to ctype.h macros.
ok guenther step
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.11 2006/04/26 20:19:25 sturm Exp $	*/
a122 16
#ifdef OS2
# define PATHSEP	';'
# define DIRSEP		'/'	/* even though \ is native */
# define DIRSEPSTR	"\\"
# define ISDIRSEP(c)    ((c) == '\\' || (c) == '/')
# define ISABSPATH(s)	(((s)[0] && (s)[1] == ':' && ISDIRSEP((s)[2])))
# define ISROOTEDPATH(s) (ISDIRSEP((s)[0]) || ISABSPATH(s))
# define ISRELPATH(s)	(!(s)[0] || ((s)[1] != ':' && !ISDIRSEP((s)[0])))
# define FILECHCONV(c)	(isascii(c) && isupper(c) ? tolower(c) : c)
# define FILECMP(s1, s2) stricmp(s1, s2)
# define FILENCMP(s1, s2, n) strnicmp(s1, s2, n)
extern char *ksh_strchr_dirsep(const char *path);
extern char *ksh_strrchr_dirsep(const char *path);
# define chdir		_chdir2
# define getcwd		_getcwd2
#else
a126 5
#ifdef __CYGWIN__
#  define ISABSPATH(s) \
	(((s)[0] && (s)[1] == ':' && ISDIRSEP((s)[2])) || ISDIRSEP((s)[0]))
#  define ISRELPATH(s) (!(s)[0] || ((s)[1] != ':' && !ISDIRSEP((s)[0])))
#else /* __CYGWIN__ */
a128 1
#endif /* __CYGWIN__ */
a134 1
#endif
a156 4
#if defined (OS2) || defined (__CYGWIN__)
	if (path[0] && path[1] == ':')	/* skip a: */
		very_start += 2;
#endif /* OS2 || __CYGWIN__ */
a172 5
#ifdef __CYGWIN__
	/* preserve leading double-slash on pathnames (for UNC paths) */
	if (path[0] && ISDIRSEP(path[0]) && path[1] && ISDIRSEP(path[1]))
		very_start++;
#endif /* __CYGWIN__ */
@


1.11
log
@ARGSUSED and a FALLTHROUGH to please lint

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.10 2003/06/16 06:36:40 itojun Exp $	*/
d84 1
a84 1
		if (!strncmp(p, match, len) && !isalnum(p[len]))
@


1.10
log
@- limited number of processes per systrace
- escape fixes for special characters
markus, sturm ok.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.9 2002/10/09 03:52:10 itojun Exp $	*/
d62 1
@


1.9
log
@predicates are part of the grammar now; in non-root case, predicates are
evaluated only once; in root case, predicates and variable expansion are
dynamic.
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.8 2002/07/19 14:38:58 itojun Exp $	*/
d36 1
d39 31
@


1.8
log
@constify, have missing prototypes, use pedantic compilation options.
niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.7 2002/06/22 09:03:57 deraadt Exp $	*/
a35 1
#include <pwd.h>
a71 15

char *
uid_to_name(uid_t uid)
{
	static char buf[128];
	struct passwd *pw;

	if ((pw = getpwuid(uid)) == NULL)
		snprintf(buf, sizeof(buf), "uid %u", uid);
	else
		snprintf(buf, sizeof(buf), "%s", pw->pw_name);

	return (buf);
}

@


1.7
log
@uid are unsigned outside of germany
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.6 2002/06/18 01:54:31 deraadt Exp $	*/
d37 2
@


1.6
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.5 2002/06/09 05:27:50 todd Exp $	*/
d79 1
a79 1
		snprintf(buf, sizeof(buf), "uid %d", uid);
@


1.5
log
@some knf.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.4 2002/06/04 22:45:25 provos Exp $	*/
d77 1
a77 1
   
@


1.4
log
@log offending syscalls to syslog in automatic mode. dugsong@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.3 2002/06/04 19:20:54 provos Exp $	*/
d77 1
a77 1
       
@


1.3
log
@document origin of simplify_path
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.2 2002/06/04 19:15:54 deraadt Exp $	*/
d35 2
d71 15
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.1 2002/06/04 17:20:04 provos Exp $	*/
d69 2
@


1.1
log
@initial import of systrace.  don't touch this, more stuff coming in a while
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a53 1
		    
d86 3
a88 3
# define PATHSEP        ';'
# define DIRSEP         '/'	/* even though \ is native */
# define DIRSEPSTR      "\\"
d98 2
a99 2
# define chdir          _chdir2
# define getcwd         _getcwd2
d101 3
a103 3
# define PATHSEP        ':'
# define DIRSEP         '/'
# define DIRSEPSTR      "/"
d107 1
a107 1
       (((s)[0] && (s)[1] == ':' && ISDIRSEP((s)[2])) || ISDIRSEP((s)[0]))
d163 3
a165 3
       /* preserve leading double-slash on pathnames (for UNC paths) */
       if (path[0] && ISDIRSEP(path[0]) && path[1] && ISDIRSEP(path[1]))
               very_start++;
@

