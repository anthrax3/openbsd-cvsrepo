head	1.20;
access;
symbols
	OPENBSD_5_9:1.19.0.4
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.22
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.20
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.16
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.16.0.16
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.12
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.10
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.8
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9;
locks; strict;
comment	@ * @;


1.20
date	2016.04.25.19.09.25;	author tedu;	state dead;
branches;
next	1.19;
commitid	Ne4KgWE1uInoydsl;

1.19
date	2015.01.16.00.19.12;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	9JSDzKTCgxU6o5el;

1.18
date	2009.11.12.20.07.46;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2009.11.12.19.46.31;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.18.19.03.23;	author robert;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.19.11.48.58;	author sturm;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.29.00.39.12;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2002.12.09.07.24.56;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.26.03.47.08;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.16.15.01.08;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.09.03.52.10;	author itojun;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.04.04.15.50;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.30.05.37.21;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.30.05.33.39;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.19.14.38.58;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.16.01.22.48;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.05.17.22.38;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.05.16.09.20;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.04.17.28.45;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.17.20.29;	author provos;	state Exp;
branches;
next	;


desc
@@


1.20
log
@boom goes the dynamite
@
text
@/*	$OpenBSD: parse.y,v 1.19 2015/01/16 00:19:12 deraadt Exp $	*/

/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%{
#include <sys/types.h>

#include <sys/time.h>
#include <sys/tree.h>

#include <stdio.h>
#include <stdlib.h>
#include <err.h>
#include <stdarg.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <pwd.h>
#include <grp.h>
#include <regex.h>

#include "intercept.h"
#include "systrace.h"
#include "systrace-errno.h"
#include "filter.h"

void yyrestart(FILE *);

struct logic *parse_newsymbol(char *, int, char *);

int yylex(void);
int yyparse(void);
int yyerror(const char *, ...);

int errors = 0;
struct filter *myfilter;
extern char *mystring;
extern int myoff;
extern int iamroot;

%}

%token	AND OR NOT LBRACE RBRACE LSQBRACE RSQBRACE THEN MATCH PERMIT DENY ASK
%token	EQ NEQ TRUE SUB NSUB INPATH LOG COMMA IF USER GROUP EQUAL NEQUAL AS
%token	COLON RE LESSER GREATER
%token	<string> STRING
%token	<string> CMDSTRING
%token	<number> NUMBER
%type	<logic> expression
%type	<logic> symbol
%type	<action> action
%type	<number> typeoff
%type	<number> logcode
%type	<uid> uid
%type	<gid> gid
%type	<string> errorcode
%type	<predicate> predicate
%type	<elevate> elevate;
%union {
	int number;
	char *string;
	short action;
	struct logic *logic;
	struct predicate predicate;
	struct elevate elevate;
	uid_t uid;
	gid_t gid;
}
%%

fullexpression	: expression THEN action errorcode logcode elevate predicate
	{
		int flags = 0, errorcode = SYSTRACE_EPERM;

		switch ($3) {
		case ICPOLICY_NEVER:
			if ($4 == NULL)
				break;
			errorcode = systrace_error_translate($4);
			if (errorcode == -1)
				yyerror("Unknown error code: %s", $4);
			break;
		case ICPOLICY_PERMIT:
			if ($4 == NULL)
				break;
			if (!strcasecmp($4, "inherit"))
				flags = PROCESS_INHERIT_POLICY;
			else if (!strcasecmp($4, "detach"))
				flags = PROCESS_DETACH;
			else
				yyerror("Unknown flag: %s", $4);
			break;
		}

		if ($5)
			flags |= SYSCALL_LOG;

		/* Special policy that allows only yes or no */
		if ($3 == ICPOLICY_ASK)
			flags |= PROCESS_PROMPT;

		if ($4 != NULL)
			free($4);

		myfilter = calloc(1, sizeof(struct filter));
		if (myfilter == NULL) {
			yyerror("calloc");
			break;
		}
		myfilter->logicroot = $1;
		myfilter->match_action = $3;
		myfilter->match_error = errorcode;
		myfilter->match_flags = flags;
		myfilter->match_predicate = $7;
		myfilter->elevate = $6;
	}
;

errorcode	: /* Empty */
{
	$$ = NULL;
}
		| LSQBRACE STRING RSQBRACE
{
	$$ = $2;
}
;

logcode	: /* Empty */
{
	$$ = 0;
}
		| LOG
{
	$$ = 1;
}
;


uid		: NUMBER
{
	$$ = $1;
} 
		| STRING
{
	struct passwd *pw;
	if ((pw = getpwnam($1)) == NULL) {
		yyerror("Unknown user %s", $1);
		break;
	}

	$$ = pw->pw_uid;
}

gid		: NUMBER
{
	$$ = $1;
}
		| STRING
{
	struct group *gr;
	if ((gr = getgrnam($1)) == NULL) {
		yyerror("Unknown group %s", $1);
		break;
	}

	$$ = gr->gr_gid;
}

elevate: /* Empty */
{
	memset(&$$, 0, sizeof($$));
}
		| AS uid
{
	if (!iamroot) {
		yyerror("Privilege elevation not allowed.");
		break;
	}

	$$.e_flags = ELEVATE_UID;
	$$.e_uid = $2;
}
		| AS uid COLON gid
{
	if (!iamroot) {
		yyerror("Privilege elevation not allowed.");
		break;
	}

	$$.e_flags = ELEVATE_UID|ELEVATE_GID;
	$$.e_uid = $2;
	$$.e_gid = $4;
}
		| AS COLON gid
{
	if (!iamroot) {
		yyerror("Privilege elevation not allowed.");
		break;
	}

	$$.e_flags = ELEVATE_GID;
	$$.e_gid = $3;
}

predicate : /* Empty */
{
	memset(&$$, 0, sizeof($$));
}
		| COMMA IF USER EQUAL uid
{
	memset(&$$, 0, sizeof($$));
	$$.p_uid = $5;
	$$.p_flags = PREDIC_UID;
}
		| COMMA IF USER NEQUAL uid
{
	memset(&$$, 0, sizeof($$));
	$$.p_uid = $5;
	$$.p_flags = PREDIC_UID | PREDIC_NEGATIVE;
}
		| COMMA IF USER LESSER uid
{
	memset(&$$, 0, sizeof($$));
	$$.p_uid = $5;
	$$.p_flags = PREDIC_UID | PREDIC_LESSER;
}
		| COMMA IF USER GREATER uid
{
	memset(&$$, 0, sizeof($$));
	$$.p_uid = $5;
	$$.p_flags = PREDIC_UID | PREDIC_GREATER;
}
		| COMMA IF GROUP EQUAL gid
{
	memset(&$$, 0, sizeof($$));
	$$.p_gid = $5;
	$$.p_flags = PREDIC_GID;
}
		| COMMA IF GROUP NEQUAL gid
{
	memset(&$$, 0, sizeof($$));
	$$.p_gid = $5;
	$$.p_flags = PREDIC_GID | PREDIC_NEGATIVE;
}
		| COMMA IF GROUP LESSER gid
{
	memset(&$$, 0, sizeof($$));
	$$.p_gid = $5;
	$$.p_flags = PREDIC_GID | PREDIC_LESSER;
}
		| COMMA IF GROUP GREATER gid
{
	memset(&$$, 0, sizeof($$));
	$$.p_gid = $5;
	$$.p_flags = PREDIC_GID | PREDIC_GREATER;
}

expression	: symbol
{
	$$ = $1;
}
		| NOT expression
{
	struct logic *node;
	node = calloc(1, sizeof(struct logic));
	if (node == NULL) {
		yyerror("calloc");
		break;
	}
	node->op = LOGIC_NOT;
	node->left = $2;
	$$ = node;
}
		| LBRACE expression RBRACE
{
	$$ = $2;
}
		| expression AND expression
{
	struct logic *node;
	node = calloc(1, sizeof(struct logic));
	if (node == NULL) {
		yyerror("calloc");
		break;
	}
	node->op = LOGIC_AND;
	node->left = $1;
	node->right = $3;
	$$ = node;
}
		| expression OR expression
{
	struct logic *node;
	node = calloc(1, sizeof(struct logic));
	if (node == NULL) {
		yyerror("calloc");
		break;
	}
	node->op = LOGIC_OR;
	node->left = $1;
	node->right = $3;
	$$ = node;
}
;

symbol		: STRING typeoff MATCH CMDSTRING
{
	struct logic *node;

	if ((node = parse_newsymbol($1, $2, $4)) == NULL)
		break;

	node->filter_match = filter_fnmatch;
	$$ = node;
}
		| STRING typeoff EQ CMDSTRING
{
	struct logic *node;

	if ((node = parse_newsymbol($1, $2, $4)) == NULL)
		break;

	node->filter_match = filter_stringmatch;
	$$ = node;
}
		| STRING typeoff NEQ CMDSTRING
{
	struct logic *node;

	if ((node = parse_newsymbol($1, $2, $4)) == NULL)
		break;

	node->filter_match = filter_negstringmatch;
	$$ = node;
}
		| STRING typeoff SUB CMDSTRING
{
	struct logic *node;

	if ((node = parse_newsymbol($1, $2, $4)) == NULL)
		break;

	node->filter_match = filter_substrmatch;
	$$ = node;
}
		| STRING typeoff NSUB CMDSTRING
{
	struct logic *node;

	if ((node = parse_newsymbol($1, $2, $4)) == NULL)
		break;

	node->filter_match = filter_negsubstrmatch;
	$$ = node;
}
		| STRING typeoff INPATH CMDSTRING
{
	struct logic *node;

	if ((node = parse_newsymbol($1, $2, $4)) == NULL)
		break;

	node->filter_match = filter_inpath;
	$$ = node;
}
		| STRING typeoff RE CMDSTRING
{
	struct logic *node;
	regex_t re;

	if ((node = parse_newsymbol($1, $2, $4)) == NULL)
		break;

	/* Precompute regexp here, otherwise we need to compute it
	 * on the fly which is fairly expensive.
	 */
	if (!(node->flags & LOGIC_NEEDEXPAND)) {
		if (regcomp(&re, node->filterdata,
			REG_EXTENDED | REG_NOSUB) != 0) {
			yyerror("Invalid regular expression: %s",
			    node->filterdata);
			break;
		}
		if ((node->filterarg = malloc(sizeof(re))) == NULL) {
			yyerror("malloc");
			break;
		}
		memcpy(node->filterarg, &re, sizeof(re));
	} else
		node->filterarg = NULL;

	node->filter_match = filter_regex;
	$$ = node;
}
		| TRUE
{
	struct logic *node;

	if ((node = parse_newsymbol(NULL, -1, NULL)) == NULL)
		break;

	node->filter_match = filter_true;
	$$ = node;
}
;

typeoff		: /* empty */
{
	$$ = -1;
}
		| LSQBRACE NUMBER RSQBRACE
{
	if ($2 < 0 || $2 >= INTERCEPT_MAXSYSCALLARGS) {
		yyerror("Bad offset: %d", $2);
		break;
	}
	$$ = $2;
}
;
action		: PERMIT
{
	$$ = ICPOLICY_PERMIT;
}
		| ASK
{
	$$ = ICPOLICY_ASK;
}
		| DENY
{
	$$ = ICPOLICY_NEVER;
}
%%

int
yyerror(const char *fmt, ...)
{
	va_list ap;
	errors = 1;

	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	fprintf(stderr, "\n");
	va_end(ap);
	return (0);
}

struct logic *
parse_newsymbol(char *type, int typeoff, char *data)
{
	struct logic *node;

	node = calloc(1, sizeof(struct logic));

	if (node == NULL) {
		yyerror("calloc");
		return (NULL);
	}
	node->op = LOGIC_SINGLE;
	node->type = type;
	node->typeoff = typeoff;
	if (data) {
		/* For the root user, variable expansion may change */
		if (iamroot) {
			node->filterdata = data;
			if (filter_needexpand(data))
				node->flags |= LOGIC_NEEDEXPAND;
		} else {
			node->filterdata = strdup(filter_expand(data));
			free(data);
		}
		if (node->filterdata == NULL) {
			yyerror("strdup");
			free(node);
			return (NULL);
		}
		node->filterlen = strlen(node->filterdata) + 1;
	}

	return (node);
}

int
parse_filter(char *name, struct filter **pfilter)
{

	errors = 0;

	myfilter = NULL;
	mystring = name;
	myoff = 0;

	yyparse();
	yyrestart(NULL);
	*pfilter = myfilter;
	return (errors ? -1 : 0);
}
@


1.19
log
@move to PATH_MAX, etc; normalize includes for life in the <limits.h> universe
ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.18 2009/11/12 20:07:46 millert Exp $	*/
@


1.18
log
@Only allocate memory for the regex after we've validated it instead
of allocating and later freeing if we didn't use it.  OK deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.16 2006/03/18 19:03:23 robert Exp $	*/
d44 1
@


1.17
log
@memory leak if regex fails, found by parfait; ok miod
@
text
@d396 1
a396 1
	regex_t *re;
a400 5
	if ((re = calloc(1, sizeof (regex_t))) == NULL) {
		yyerror("calloc");
		break;
	}

d405 1
a405 1
		if (regcomp(re, node->filterdata,
a408 1
			free(re);
d411 6
a416 3
		node->filterarg = re;
	} else {
		free(re);
a417 1
	}
@


1.16
log
@fix problems found by Coverity via NetBSD:
- systrace.c: Don't try to dereference pw when it's NULL.
Coverity CID 900
- parse.y: free allocated space on failure Coverity CID 1661
- policy.c: Change a return to "goto out" so that fclose will be called.
Coverity CID 1881

ok sturm@@, ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.15 2003/07/19 11:48:58 sturm Exp $	*/
d414 1
d418 2
a419 1
	} else
d421 1
@


1.15
log
@- sync with NetBSD or Niels' tarball where appropriate
- keeps local changes
- fixes a bug in profile feedback optimization and avoids symbol
  conflicts with errno
- new feature: "ask" action

itojun@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.14 2003/05/29 00:39:12 itojun Exp $	*/
d501 1
@


1.14
log
@>permit numberic values for uid and gid;  allow "<" and ">" for less and
>greate; requested by dugsong@@,
strum ok
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.13 2002/12/09 07:24:56 itojun Exp $	*/
d69 1
a69 1
%token	AND OR NOT LBRACE RBRACE LSQBRACE RSQBRACE THEN MATCH PERMIT DENY
d124 4
d451 4
@


1.13
log
@add support for regular expressions and pidname translations.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.12 2002/11/26 03:47:08 itojun Exp $	*/
d71 1
a71 1
%token	COLON RE
d162 5
a166 1
uid: STRING
d177 5
a181 1
gid: STRING
d244 12
d267 12
@


1.12
log
@error should go to stderr.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.11 2002/10/16 15:01:08 itojun Exp $	*/
d46 1
d71 1
a71 1
%token	COLON
d355 30
@


1.11
log
@support for privilege elevation.

with privilege elevation no suid or sgid binaries are necessary any
longer.  Applications can be executed completely
unprivileged. Systrace raises the privileges for a single system call
depending on the configured policy.

Idea from discussions with Perry Metzger, Dug Song and Marcus Watts.

from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.10 2002/10/09 03:52:10 itojun Exp $	*/
d398 2
a399 2
	vfprintf(stdout, fmt, ap);
	fprintf(stdout, "\n");
@


1.10
log
@predicates are part of the grammar now; in non-root case, predicates are
evaluated only once; in root case, predicates and variable expansion are
dynamic.
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.9 2002/08/04 04:15:50 provos Exp $	*/
d64 1
d69 2
a70 1
%token	EQ NEQ TRUE SUB NSUB INPATH LOG COMMA IF USER GROUP EQUAL NEQUAL
d79 2
d83 1
d90 3
d96 1
a96 1
fullexpression	: expression THEN action errorcode logcode predicate
d135 2
a136 1
		myfilter->match_predicate = $6;
d160 2
a161 1
predicate : /* Empty */
d163 7
a169 1
	memset(&$$, 0, sizeof($$));
d171 2
a172 1
		| COMMA IF USER EQUAL STRING
d174 8
a181 1
	struct passwd *pw;
d183 2
d186 5
a190 2
	if ((pw = getpwnam($5)) == NULL) {
		yyerror("Unknown user %s", $5);
d193 3
a195 2
	$$.p_uid = pw->pw_uid;
	$$.p_flags = PREDIC_UID;
d197 1
a197 1
		| COMMA IF USER NEQUAL STRING
d199 4
a202 1
	struct passwd *pw;
d204 8
a211 3
	memset(&$$, 0, sizeof($$));
	if ((pw = getpwnam($5)) == NULL) {
		yyerror("Unknown user %s", $5);
d214 19
a232 1
	$$.p_uid = pw->pw_uid;
d235 1
a235 1
		| COMMA IF GROUP EQUAL STRING
a236 2
	struct group *gr;

d238 1
a238 5
	if ((gr = getgrnam($5)) == NULL) {
		yyerror("Unknown group %s", $5);
		break;
	}
	$$.p_gid = gr->gr_gid;
d241 1
a241 1
		| COMMA IF GROUP NEQUAL STRING
a242 2
	struct group *gr;

d244 1
a244 5
	if ((gr = getgrnam($5)) == NULL) {
		yyerror("Unknown group %s", $5);
		break;
	}
	$$.p_gid = gr->gr_gid;
a407 1
	int iamroot = getuid() == 0;
@


1.9
log
@keep track of ppid and allow matching rules to be logged via syslog.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.8 2002/07/30 05:37:21 itojun Exp $	*/
d43 3
d68 1
a68 1
%token	EQ NEQ TRUE SUB NSUB INPATH LOG
d78 1
d84 1
d88 1
a88 1
fullexpression	: expression THEN action errorcode logcode
d127 1
d151 53
d364 2
d376 9
a384 2
		node->filterdata = strdup(filter_expand(data));
		free(data);
@


1.8
log
@include filter.h, dont' duplicate prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.7 2002/07/30 05:33:39 itojun Exp $	*/
d65 1
a65 1
%token	EQ NEQ TRUE SUB NSUB INPATH
d73 1
d83 1
a83 4
filter		: fullexpression
		;

fullexpression	: expression THEN action errorcode
d107 3
d132 10
@


1.7
log
@extern decls should be outside of function.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.6 2002/07/19 14:38:58 itojun Exp $	*/
d47 1
a49 8

int filter_fnmatch(struct intercept_translate *, struct logic *);
int filter_stringmatch(struct intercept_translate *, struct logic *);
int filter_negstringmatch(struct intercept_translate *, struct logic *);
int filter_substrmatch(struct intercept_translate *, struct logic *);
int filter_negsubstrmatch(struct intercept_translate *, struct logic *);
int filter_inpath(struct intercept_translate *, struct logic *);
int filter_true(struct intercept_translate *, struct logic *);
@


1.6
log
@constify, have missing prototypes, use pedantic compilation options.
niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.5 2002/07/16 01:22:48 provos Exp $	*/
d62 1
d66 2
a283 2
int yyerror(char *, ...);

d285 1
a285 1
yyerror(char *fmt, ...)
a325 3
	extern char *mystring;
	extern int myoff;
	extern struct filter *myfilter;
@


1.5
log
@internal uid/gid tracking.  permit can not detach systrace, useful for
sshd.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.4 2002/06/05 17:22:38 mickey Exp $	*/
d280 2
@


1.4
log
@rcsids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d106 4
@


1.3
log
@inpath logic, for example, filename inpath "$CWD"
@
text
@d1 2
@


1.2
log
@make it compile.
@
text
@d53 1
d67 1
a67 1
%token	EQ NEQ TRUE SUB NSUB
d228 10
@


1.1
log
@lexer and parser
@
text
@a32 3
#include "config.h"

#ifdef HAVE_SYS_TIME_H
a33 1
#endif
@

