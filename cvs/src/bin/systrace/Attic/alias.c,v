head	1.8;
access;
symbols
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.42
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.40
	OPENBSD_5_0:1.5.0.38
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.36
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.34
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.30
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.32
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.28
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5;
locks; strict;
comment	@ * @;


1.8
date	2016.04.25.19.09.24;	author tedu;	state dead;
branches;
next	1.7;
commitid	Ne4KgWE1uInoydsl;

1.7
date	2014.11.16.22.09.21;	author guenther;	state Exp;
branches;
next	1.6;
commitid	AOHIInPUqSURrOY5;

1.6
date	2012.12.04.02.24.47;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.06.22.56.21;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.30.05.55.08;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.30.05.52.50;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.19.14.38.57;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.09.15.22.27;	author provos;	state Exp;
branches;
next	;


desc
@@


1.8
log
@boom goes the dynamite
@
text
@/*	$OpenBSD: alias.c,v 1.7 2014/11/16 22:09:21 guenther Exp $	*/
/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/tree.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <grp.h>
#include <stdio.h>
#include <fcntl.h>
#include <ctype.h>
#include <err.h>

#include "intercept.h"
#include "systrace.h"

static SPLAY_HEAD(alitr, systrace_alias) aliasroot;
static SPLAY_HEAD(revtr, systrace_revalias) revroot;

static int aliascompare(struct systrace_alias *, struct systrace_alias *);
static int revcompare(struct systrace_revalias *, struct systrace_revalias *);

static int
aliascompare(struct systrace_alias *a, struct systrace_alias *b)
{
	int diff;

	diff = strcmp(a->emulation, b->emulation);
	if (diff)
		return (diff);
	return (strcmp(a->name, b->name));
}

static int
revcompare(struct systrace_revalias *a, struct systrace_revalias *b)
{
	int diff;

	diff = strcmp(a->emulation, b->emulation);
	if (diff)
		return (diff);
	return (strcmp(a->name, b->name));
}

SPLAY_PROTOTYPE(alitr, systrace_alias, node, aliascompare)
SPLAY_GENERATE(alitr, systrace_alias, node, aliascompare)

SPLAY_PROTOTYPE(revtr, systrace_revalias, node, revcompare)
SPLAY_GENERATE(revtr, systrace_revalias, node, revcompare)

int
systrace_initalias(void)
{
	SPLAY_INIT(&aliasroot);
	SPLAY_INIT(&revroot);

	return (0);
}

struct systrace_alias *
systrace_find_alias(const char *emulation, const char *name)
{
	struct systrace_alias tmp;

	strlcpy(tmp.emulation, emulation, sizeof(tmp.emulation));
	strlcpy(tmp.name, name, sizeof(tmp.name));

	return (SPLAY_FIND(alitr, &aliasroot, &tmp));
}

struct systrace_revalias *
systrace_find_reverse(const char *emulation, const char *name)
{
	struct systrace_revalias tmp;

	strlcpy(tmp.emulation, emulation, sizeof(tmp.emulation));
	strlcpy(tmp.name, name, sizeof(tmp.name));

	return (SPLAY_FIND(revtr, &revroot, &tmp));
}

struct systrace_revalias *
systrace_reverse(const char *emulation, const char *name)
{
	struct systrace_revalias tmp, *reverse;

	strlcpy(tmp.emulation, emulation, sizeof(tmp.emulation));
	strlcpy(tmp.name, name, sizeof(tmp.name));

	reverse = SPLAY_FIND(revtr, &revroot, &tmp);
	if (reverse != NULL)
		return (reverse);

	reverse = calloc(1, sizeof(*reverse));
	if (reverse == NULL)
		err(1, "%s: %s-%s: malloc", __func__, emulation, name);

	strlcpy(reverse->emulation, emulation, sizeof(reverse->emulation));
	strlcpy(reverse->name, name, sizeof(reverse->name));

	TAILQ_INIT(&reverse->revl);

	if (SPLAY_INSERT(revtr, &revroot, reverse) != NULL)
		errx(1, "%s: %s-%s: double revalias",
		    __func__, emulation, name);

	return (reverse);
}

struct systrace_alias *
systrace_new_alias(const char *emulation, const char *name,
    char *aemul, char *aname)
{
	struct systrace_alias *alias;
	struct systrace_revalias *reverse;

	alias = malloc(sizeof(*alias));
	if (alias == NULL)
		err(1, "%s: %s-%s: malloc", __func__, emulation, name);

	strlcpy(alias->emulation, emulation, sizeof(alias->emulation));
	strlcpy(alias->name, name, sizeof(alias->name));
	strlcpy(alias->aemul, aemul, sizeof(alias->aemul));
	strlcpy(alias->aname, aname, sizeof(alias->aname));
	alias->nargs = 0;

	if (SPLAY_INSERT(alitr, &aliasroot, alias) != NULL)
		errx(1, "%s: %s-%s: double alias", __func__, emulation, name);

	reverse = systrace_reverse(aemul, aname);
	alias->reverse = reverse;
	TAILQ_INSERT_TAIL(&reverse->revl, alias, next);

	return (alias);
}

void
systrace_switch_alias(const char *emulation, const char *name,
    char *aemul, char *aname)
{
	struct systrace_alias *alias;
	struct systrace_revalias *reverse;

	if ((alias = systrace_find_alias(emulation, name)) == NULL)
		errx(1, "%s: unknown alias %s-%s", __func__, emulation, name);

	/* Switch to a different alias */
	reverse = alias->reverse;
	TAILQ_REMOVE(&reverse->revl, alias, next);

	strlcpy(alias->aemul, aemul, sizeof(alias->aemul));
	strlcpy(alias->aname, aname, sizeof(alias->aname));

	reverse = systrace_reverse(aemul, aname);
	alias->reverse = reverse;
	TAILQ_INSERT_TAIL(&reverse->revl, alias, next);
}

/* Add an already translated argument to this alias */

void
systrace_alias_add_trans(struct systrace_alias *alias,
    struct intercept_translate *tl)
{
	if (alias->nargs >= SYSTRACE_MAXALIAS)
		errx(1, "%s: too many arguments", __func__);

	alias->arguments[alias->nargs++] = tl;
}
@


1.7
log
@Correct an allocation size (was too large) by using sizeof(*ptr)
instead of sizeof(type).

diff from Nicolas Bedos (nicolas.bedos (at) gmail.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: alias.c,v 1.6 2012/12/04 02:24:47 deraadt Exp $	*/
@


1.6
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: alias.c,v 1.5 2002/09/06 22:56:21 deraadt Exp $	*/
d125 1
a125 1
	reverse = calloc(1, sizeof(struct systrace_alias));
d148 1
a148 1
	alias = malloc(sizeof(struct systrace_alias));
@


1.5
log
@standalone ; at top scope is illegal in ansi c
@
text
@d1 1
a1 1
/*	$OpenBSD: alias.c,v 1.4 2002/07/30 05:55:08 itojun Exp $	*/
a32 1
#include <sys/param.h>
@


1.4
log
@oops, i've been looking at older tree.h
@
text
@d1 1
a1 1
/*	$OpenBSD: alias.c,v 1.2 2002/07/19 14:38:57 itojun Exp $	*/
d77 2
a78 2
SPLAY_PROTOTYPE(alitr, systrace_alias, node, aliascompare);
SPLAY_GENERATE(alitr, systrace_alias, node, aliascompare);
d80 2
a81 2
SPLAY_PROTOTYPE(revtr, systrace_revalias, node, revcompare);
SPLAY_GENERATE(revtr, systrace_revalias, node, revcompare);
@


1.3
log
@SPLAY_INSERT is a void function
@
text
@d135 3
a137 1
	SPLAY_INSERT(revtr, &revroot, reverse);
d159 2
a160 1
	SPLAY_INSERT(alitr, &aliasroot, alias);
@


1.2
log
@constify, have missing prototypes, use pedantic compilation options.
niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: alias.c,v 1.1 2002/07/09 15:22:27 provos Exp $	*/
d135 1
a135 3
	if (SPLAY_INSERT(revtr, &revroot, reverse) != NULL)
		errx(1, "%s: %s-%s: double revalias",
		    __func__, emulation, name);
d157 1
a157 2
	if (SPLAY_INSERT(alitr, &aliasroot, alias) != NULL)
		errx(1, "%s: %s-%s: double alias", __func__, emulation, name);
@


1.1
log
@support for system call aliasing.  stat/fstat/readlink/access etc... gets
grouped into fsread, unlink/rmdir/mkdir goes to fswrite.  open switches
back between fsread and fswrite depending on oflags parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: policy.c,v 1.12 2002/07/07 23:14:43 provos Exp $	*/
d52 4
a55 1
int
d66 1
a66 1
int
d93 1
a93 1
systrace_find_alias(char *emulation, char *name)
d104 1
a104 1
systrace_find_reverse(char *emulation, char *name)
d115 1
a115 1
systrace_reverse(char *emulation, char *name)
d143 2
a144 1
systrace_new_alias(char *emulation, char *name, char *aemul, char *aname)
d170 2
a171 1
systrace_switch_alias(char *emulation, char *name, char *aemul, char *aname)
@

