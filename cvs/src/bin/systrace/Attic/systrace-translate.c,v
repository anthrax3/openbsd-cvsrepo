head	1.27;
access;
symbols
	OPENBSD_5_9:1.25.0.4
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.6
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.22.0.32
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.30
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.26
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.24
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.22
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.20
	OPENBSD_5_0:1.22.0.18
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.16
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.14
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.10
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.12
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.8
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.6
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.4
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.2
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.21.0.4
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.2
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.18.0.4
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11;
locks; strict;
comment	@ * @;


1.27
date	2016.04.25.19.09.25;	author tedu;	state dead;
branches;
next	1.26;
commitid	Ne4KgWE1uInoydsl;

1.26
date	2016.03.01.16.26.06;	author naddy;	state Exp;
branches;
next	1.25;
commitid	xolw6dPbpLrdT9Jj;

1.25
date	2015.01.16.00.19.12;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	9JSDzKTCgxU6o5el;

1.24
date	2014.08.10.04.57.33;	author guenther;	state Exp;
branches;
next	1.23;
commitid	eN1HiqeMJLCAsCxx;

1.23
date	2014.08.10.00.21.49;	author guenther;	state Exp;
branches;
next	1.22;
commitid	hzf3bg2OpPTcQOzu;

1.22
date	2007.06.06.15.14.49;	author henning;	state Exp;
branches;
next	1.21;

1.21
date	2006.07.02.12.34.15;	author sturm;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.02.19.49.05;	author sturm;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.12.20.56.10;	author sturm;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.03.18.03.26;	author sturm;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.19.11.48.58;	author sturm;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.14.02.13.30;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.06.23.57.51;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.12.09.07.24.56;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2002.11.16.14.27.17;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.16.14.43.33;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.30.03.45.39;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.01.20.50.17;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.30.06.07.06;	author itojun;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.20.04.19.53;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.19.22.22.54;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.19.14.38.58;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.14.22.34.55;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.13.08.54.10;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.09.15.22.27;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.04.19.09.45;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.17.20.04;	author provos;	state Exp;
branches;
next	;


desc
@@


1.27
log
@boom goes the dynamite
@
text
@/*	$OpenBSD: systrace-translate.c,v 1.26 2016/03/01 16:26:06 naddy Exp $	*/
/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>
#include <sys/tree.h>
#include <sys/socket.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/signal.h>
#include <stdint.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>
#include <pwd.h>
#include <err.h>

#include "intercept.h"
#include "systrace.h"

#define FL(w,c)	do { \
	if (flags & (w) && p < str + sizeof str - 1) \
		*p++ = (c); \
} while (0)

static int print_oflags(char *, size_t, struct intercept_translate *);
static int print_modeflags(char *, size_t, struct intercept_translate *);
static int print_number(char *, size_t, struct intercept_translate *);
static int print_uname(char *, size_t, struct intercept_translate *);
static int print_pidname(char *, size_t, struct intercept_translate *);
static int print_signame(char *, size_t, struct intercept_translate *);
static int print_fcntlcmd(char *, size_t, struct intercept_translate *);
static int print_memprot(char *, size_t, struct intercept_translate *);
static int print_fileflags(char *, size_t, struct intercept_translate *);
static int get_argv(struct intercept_translate *, int, pid_t, void *);
static int print_argv(char *, size_t, struct intercept_translate *);

static int
print_oflags(char *buf, size_t buflen, struct intercept_translate *tl)
{
	char str[32], *p;
	int flags = (intptr_t)tl->trans_addr;
	int isread = 0;

	p = str;
	switch (flags & O_ACCMODE) {
	case O_RDONLY:
		strlcpy(p, "ro", str + sizeof str - p);
		isread = 1;
		break;
	case O_WRONLY:
		strlcpy(p, "wo", str + sizeof str - p);
		break;
	case O_RDWR:
		strlcpy(p, "rw", str + sizeof str - p);
		break;
	default:
		strlcpy(p, "--", str + sizeof str - p);
		break;
	}

	/* XXX - Open handling of alias */
	if (isread)
		systrace_switch_alias("native", "open", "native", "fsread");
	else
		systrace_switch_alias("native", "open", "native", "fswrite");

	p += 2;

	FL(O_NONBLOCK, 'n');
	FL(O_APPEND, 'a');
	FL(O_CREAT, 'c');
	FL(O_TRUNC, 't');

	*p = '\0';

	strlcpy(buf, str, buflen);

	return (0);
}

static int
print_modeflags(char *buf, size_t buflen, struct intercept_translate *tl)
{
	int mode = (intptr_t)tl->trans_addr;

	mode &= 00007777;
	snprintf(buf, buflen, "%o", mode);

	return (0);
}

static int
print_number(char *buf, size_t buflen, struct intercept_translate *tl)
{
	int number = (intptr_t)tl->trans_addr;

	snprintf(buf, buflen, "%d", number);

	return (0);
}

static int
print_sockdom(char *buf, size_t buflen, struct intercept_translate *tl)
{
	int domain = (intptr_t)tl->trans_addr;
	char *what = NULL;

	switch (domain) {
	case AF_UNIX:
		what = "AF_UNIX";
		break;
	case AF_INET:
		what = "AF_INET";
		break;
	case AF_INET6:
		what = "AF_INET6";
		break;
	case AF_IMPLINK:
		what = "AF_IMPLINK";
		break;
	default:
		snprintf(buf, buflen, "AF_UNKNOWN(%d)", domain);
		break;
	}

	if (what != NULL)
		strlcpy(buf, what, buflen);

	return (0);
}

static int
print_socktype(char *buf, size_t buflen, struct intercept_translate *tl)
{
	int type = (intptr_t)tl->trans_addr;
	char *what = NULL;

	switch (type) {
	case SOCK_STREAM:
		what = "SOCK_STREAM";
		break;
	case SOCK_DGRAM:
		what = "SOCK_DGRAM";
		break;
	case SOCK_RAW:
		what = "SOCK_RAW";
		break;
	case SOCK_SEQPACKET:
		what = "SOCK_SEQPACKET";
		break;
	case SOCK_RDM:
		what = "SOCK_RDM";
		break;
	default:
		snprintf(buf, buflen, "SOCK_UNKNOWN(%d)", type);
		break;
	}

	if (what != NULL)
		strlcpy(buf, what, buflen);

	return (0);
}

static int
print_uname(char *buf, size_t buflen, struct intercept_translate *tl)
{
	struct passwd *pw;
	uid_t uid = (intptr_t)tl->trans_addr;

	pw = getpwuid(uid);
	strlcpy(buf, pw != NULL ? pw->pw_name : "<unknown>", buflen);

	return (0);
}

static int
print_pidname(char *buf, size_t buflen, struct intercept_translate *tl)
{
	struct intercept_pid *icpid;
	pid_t pid = (intptr_t)tl->trans_addr;

	if (pid > 0) {
		icpid = intercept_findpid(pid);
		strlcpy(buf, icpid != NULL ? icpid->name : "<unknown>", buflen);
	} else if (pid == 0) {
		strlcpy(buf, "<own process group>", buflen);
	} else if (pid == -1) {
		strlcpy(buf, "<every process: -1>", buflen);
	} else {
		/* pid is negative but not -1 - trying to signal pgroup */
		pid = -pid;
		icpid = intercept_findpid(pid);
		strlcpy(buf, "pg:", buflen);
		strlcat(buf, icpid != NULL ? icpid->name : "unknown", buflen);
	}

	return (0);
}

static int
print_signame(char *buf, size_t buflen, struct intercept_translate *tl)
{
	int sig = (intptr_t)tl->trans_addr;
	char *name;

	switch (sig) {
	case SIGHUP: 
		name = "SIGHUP"; 
		break;
	case SIGINT: 
		name = "SIGINT"; 
		break;
	case SIGQUIT: 
		name = "SIGQUIT"; 
		break;
	case SIGILL: 
		name = "SIGILL"; 
		break;
	case SIGABRT: 
		name = "SIGABRT"; 
		break;
	case SIGFPE: 
		name = "SIGFPE"; 
		break;
	case SIGKILL: 
		name = "SIGKILL"; 
		break;
	case SIGBUS: 
		name = "SIGBUS"; 
		break;
	case SIGSEGV: 
		name = "SIGSEGV"; 
		break;
	case SIGSYS: 
		name = "SIGSYS"; 
		break;
	case SIGPIPE: 
		name = "SIGPIPE"; 
		break;
	case SIGALRM: 
		name = "SIGALRM"; 
		break;
	case SIGTERM: 
		name = "SIGTERM"; 
		break;
	case SIGURG: 
		name = "SIGURG"; 
		break;
	case SIGSTOP: 
		name = "SIGSTOP"; 
		break;
	case SIGTSTP: 
		name = "SIGTSTP"; 
		break;
	case SIGCONT: 
		name = "SIGCONT"; 
		break;
	case SIGCHLD: 
		name = "SIGCHLD"; 
		break;
	case SIGTTIN: 
		name = "SIGTTIN"; 
		break;
	case SIGTTOU: 
		name = "SIGTTOU"; 
		break;
	case SIGIO: 
		name = "SIGIO"; 
		break;
	case SIGPROF: 
		name = "SIGPROF"; 
		break;
	case SIGWINCH: 
		name = "SIGWINCH"; 
		break;
	case SIGINFO: 
		name = "SIGINFO"; 
		break;
	case SIGUSR1: 
		name = "SIGUSR1"; 
		break;
	case SIGUSR2: 
		name = "SIGUSR2"; 
		break;
	default:
		snprintf(buf, buflen, "<unknown>: %d", sig);
		return (0);
	}

	strlcpy(buf, name, buflen);
	return (0);
}

static int
print_fcntlcmd(char *buf, size_t buflen, struct intercept_translate *tl)
{
	int cmd = (intptr_t)tl->trans_addr;
	char *name;

	switch (cmd) {
	case F_DUPFD:
		name = "F_DUPFD";
		break;
	case F_DUPFD_CLOEXEC:
		name = "F_DUPFD_CLOEXEC";
		break;
	case F_GETFD:
		name = "F_GETFD";
		break;
	case F_SETFD:
		name = "F_SETFD";
		break;
	case F_GETFL:
		name = "F_GETFL";
		break;
	case F_SETFL:
		name = "F_SETFL";
		break;
	case F_GETOWN:
		name = "F_GETOWN";
		break;
	case F_SETOWN:
		name = "F_SETOWN";
		break;
	case F_GETLK:
		name = "F_GETLK";
		break;
	case F_SETLK:
		name = "F_SETLK";
		break;
	case F_SETLKW:
		name = "F_SETLKW";
		break;
	default:
		snprintf(buf, buflen, "<unknown>: %d", cmd);
		return (0);
	}

	snprintf(buf, buflen, "%s", name);
	return (0);
}

static int
print_memprot(char *buf, size_t buflen, struct intercept_translate *tl)
{
	int prot = (intptr_t)tl->trans_addr;
	char lbuf[64];

	if (prot == PROT_NONE) {
		strlcpy(buf, "PROT_NONE", buflen);
		return (0);
	} else
		*buf = '\0';

	while (prot) {
		if (*buf)
			strlcat(buf, "|", buflen);

		if (prot & PROT_READ) {
			strlcat(buf, "PROT_READ", buflen);
			prot &= ~PROT_READ;
			continue;
		}

		if (prot & PROT_WRITE) {
			strlcat(buf, "PROT_WRITE", buflen);
			prot &= ~PROT_WRITE;
			continue;
		}

		if (prot & PROT_EXEC) {
			strlcat(buf, "PROT_EXEC", buflen);
			prot &= ~PROT_EXEC;
			continue;
		}

		if (prot) {
			snprintf(lbuf, sizeof(lbuf), "<unknown:0x%x>", prot);
			strlcat(buf, lbuf, buflen);
			prot = 0;
			continue;
		}
	}

	return (0);
}

static int
print_fileflags(char *buf, size_t buflen, struct intercept_translate *tl)
{
	unsigned int flags = (intptr_t)tl->trans_addr;
	char lbuf[64];

	*buf = '\0';

	while (flags) {
		if (*buf)
			strlcat(buf, "|", buflen);

		if (flags & UF_NODUMP) {
			strlcat(buf, "UF_NODUMP", buflen);
			flags &= ~UF_NODUMP;
			continue;
		}

		if (flags & UF_IMMUTABLE) {
			strlcat(buf, "UF_IMMUTABLE", buflen);
			flags &= ~UF_IMMUTABLE;
			continue;
		}

		if (flags & UF_APPEND) {
			strlcat(buf, "UF_APPEND", buflen);
			flags &= ~UF_APPEND;
			continue;
		}

		if (flags & UF_OPAQUE) {
			strlcat(buf, "UF_OPAQUE", buflen);
			flags &= ~UF_OPAQUE;
			continue;
		}

		if (flags & SF_ARCHIVED) {
			strlcat(buf, "SF_ARCHIVED", buflen);
			flags &= ~SF_ARCHIVED;
			continue;
		}

		if (flags & SF_IMMUTABLE) {
			strlcat(buf, "SF_IMMUTABLE", buflen);
			flags &= ~SF_IMMUTABLE;
			continue;
		}

		if (flags & SF_APPEND) {
			strlcat(buf, "SF_APPEND", buflen);
			flags &= ~SF_APPEND;
			continue;
		}

		if (flags) {
			snprintf(lbuf, sizeof(lbuf), "<unknown:0x%x>", flags);
			strlcat(buf, lbuf, buflen);
			flags = 0;
			continue;
		}
	}

	return (0);
}

static int
get_argv(struct intercept_translate *trans, int fd, pid_t pid, void *addr)
{
	char *arg;
	char buf[_POSIX2_LINE_MAX], *p;
	int i, off = 0;
	size_t len;
	extern struct intercept_system intercept;

	i = 0;
	buf[0] = '\0';
	while (1) {
		if (intercept.io(fd, pid, INTERCEPT_READ, (char *)addr + off,
			(void *)&arg, sizeof(char *)) == -1) {
			warn("%s: ioctl", __func__);
			return (-1);
		}
		if (arg == NULL)
			break;

		p = intercept_get_string(fd, pid, arg);
		if (p == NULL)
			return (-1);

		if (i > 0)
			strlcat(buf, " ", sizeof(buf));
		strlcat(buf, p, sizeof(buf));

		off += sizeof(char *);
		i++;
	}
	
	len = strlen(buf) + 1;
	trans->trans_data = malloc(len);
	if (trans->trans_data == NULL)
		return (-1);

	/* XXX - No argument replacement */
	trans->trans_size = 0;
	memcpy(trans->trans_data, buf, len);

	return (0);
}

static int
print_argv(char *buf, size_t buflen, struct intercept_translate *tl)
{
	strlcpy(buf, (char *)tl->trans_data, buflen);

	return (0);
}

struct intercept_translate ic_trargv = {
	"argv",
	get_argv, print_argv,
};

struct intercept_translate ic_oflags = {
	"oflags",
	NULL, print_oflags,
};

struct intercept_translate ic_modeflags = {
	"mode",
	NULL, print_modeflags,
};

struct intercept_translate ic_uidt = {
	"uid",
	NULL, print_number,
};

struct intercept_translate ic_uname = {
	"uname",
	NULL, print_uname,
};

struct intercept_translate ic_gidt = {
	"gid",
	NULL, print_number,
};

struct intercept_translate ic_fdt = {
	"fd",
	NULL, print_number,
};

struct intercept_translate ic_sockdom = {
	"sockdom",
	NULL, print_sockdom,
};

struct intercept_translate ic_socktype = {
	"socktype",
	NULL, print_socktype,
};

struct intercept_translate ic_pidname = {
	"pidname",
	NULL, print_pidname,
};

struct intercept_translate ic_signame = {
	"signame",
	NULL, print_signame,
};

struct intercept_translate ic_fcntlcmd = {
	"cmd",
	NULL, print_fcntlcmd,
};

struct intercept_translate ic_memprot = {
	"prot",
	NULL, print_memprot,
};

struct intercept_translate ic_fileflags = {
	"flags",
	NULL, print_fileflags,
};
@


1.26
log
@drop Linux emulation support; ok sthen@@ visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.25 2015/01/16 00:19:12 deraadt Exp $	*/
@


1.25
log
@move to PATH_MAX, etc; normalize includes for life in the <limits.h> universe
ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.24 2014/08/10 04:57:33 guenther Exp $	*/
a48 3
#include "../../sys/compat/linux/linux_types.h"
#include "../../sys/compat/linux/linux_fcntl.h"

a57 1
static int linux_print_oflags(char *, size_t, struct intercept_translate *);
a113 43
linux_print_oflags(char *buf, size_t buflen, struct intercept_translate *tl)
{
	char str[32], *p;
	int flags = (intptr_t)tl->trans_addr;
	int isread = 0;

	p = str;
	switch (flags & LINUX_O_ACCMODE) {
	case LINUX_O_RDONLY:
		strlcpy(p, "ro", str + sizeof str - p);
		isread = 1;
		break;
	case LINUX_O_WRONLY:
		strlcpy(p, "wo", str + sizeof str - p);
		break;
	case LINUX_O_RDWR:
		strlcpy(p, "rw", str + sizeof str - p);
		break;
	default:
		strlcpy(p, "--", str + sizeof str - p);
		break;
	}

	/* XXX - Open handling of alias */
	if (isread)
		systrace_switch_alias("linux", "open", "linux", "fsread");
	else
		systrace_switch_alias("linux", "open", "linux", "fswrite");

	p += 2;

	FL(LINUX_O_APPEND, 'a');
	FL(LINUX_O_CREAT, 'c');
	FL(LINUX_O_TRUNC, 't');

	*p = '\0';

	strlcpy(buf, str, buflen);

	return (0);
}

static int
a308 1
#ifndef __linux__
a311 1
#endif /* !__linux__ */
a375 26
struct linux_i386_mmap_arg_struct {
	unsigned long addr;
	unsigned long len;
	unsigned long prot;
	unsigned long flags;
	unsigned long fd;
	unsigned long offset;
};

static int
get_linux_memprot(struct intercept_translate *trans, int fd, pid_t pid,
    void *addr)
{
	struct linux_i386_mmap_arg_struct arg;
	size_t len = sizeof(arg);
	extern struct intercept_system intercept;

	if (intercept.io(fd, pid, INTERCEPT_READ, addr,
	    (void *)&arg, len) == -1)
		return (-1);

	trans->trans_addr = (void *)arg.prot;

	return (0);
}

a547 5
struct intercept_translate ic_linux_oflags = {
	"oflags",
	NULL, linux_print_oflags,
};

a600 5
};

struct intercept_translate ic_linux_memprot = {
	"prot",
	get_linux_memprot, print_memprot,
@


1.24
log
@Only need <stdint.h> and not all of <inttypes.h> here
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.23 2014/08/10 00:21:49 guenther Exp $	*/
d38 1
@


1.23
log
@Add F_DUPFD_CLOEXEC handling
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.22 2007/06/06 15:14:49 henning Exp $	*/
d38 1
a38 1
#include <inttypes.h>
@


1.22
log
@don;t try to handle obsolete protocols, print functions so cosmetics only
ok otto ray
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.21 2006/07/02 12:34:15 sturm Exp $	*/
d384 3
@


1.21
log
@sync with systrace 1.6d, keeping local changes

tests and feedback by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.20 2006/05/02 19:49:05 sturm Exp $	*/
a194 9
		break;
	case AF_IPX:
		what = "AF_IPX";
		break;
	case AF_ISO:
		what = "AF_ISO";
		break;
	case AF_NS:
		what = "AF_NS";
@


1.20
log
@some type cleanup

with feedback from kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.19 2006/03/12 20:56:10 sturm Exp $	*/
d196 3
a204 3
	case AF_IPX:
		what = "AF_IPX";
		break;
d270 4
a273 7
	if (pid != 0) {
		icpid = intercept_getpid(pid);
		strlcpy(buf, icpid->name != NULL ? icpid->name : "<unknown>",
		    buflen);
		if (icpid->name == NULL)
			intercept_freepid(pid);
	} else
d275 9
d430 26
d686 5
@


1.19
log
@add a few new translations, partly from NetBSD

ok provos@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.18 2005/05/03 18:03:26 sturm Exp $	*/
d539 2
a540 1
	int i, off = 0, len;
@


1.18
log
@some snprintf() -> strlcpy to improve readibility (and speed?)

from rohee@@, ok millert@@ before 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.17 2003/07/19 11:48:58 sturm Exp $	*/
d36 2
d66 3
d379 156
d643 15
@


1.17
log
@- sync with NetBSD or Niels' tarball where appropriate
- keeps local changes
- fixes a bug in profile feedback optimization and avoids symbol
  conflicts with errno
- new feature: "ask" action

itojun@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.16 2003/04/14 02:13:30 deraadt Exp $	*/
d254 1
a254 1
	snprintf(buf, buflen, "%s", pw != NULL ? pw->pw_name : "<unknown>");
d267 2
a268 2
		snprintf(buf, buflen, "%s",
		    icpid->name != NULL ? icpid->name : "<unknown>");
d369 1
a369 1
	snprintf(buf, buflen, "%s", name);
d419 1
a419 1
	snprintf(buf, buflen, "%s", (char *)tl->trans_data);
@


1.16
log
@room for NUL; tdeval
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.15 2003/04/06 23:57:51 deraadt Exp $	*/
d265 8
a272 6
	icpid = intercept_getpid(pid);
	snprintf(buf, buflen, "%s",
	    icpid->name != NULL ? icpid->name : "<unknown>");

	if (icpid->name == NULL)
		intercept_freepid(pid);
@


1.15
log
@strlcpy; tedu ok
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.14 2002/12/09 07:24:56 itojun Exp $	*/
d53 1
a53 1
	if (flags & (w) && p < str + sizeof str) \
@


1.14
log
@add support for regular expressions and pidname translations.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.13 2002/11/16 14:27:17 itojun Exp $	*/
d53 1
a53 1
	if (flags & (w)) \
d77 1
a77 1
		strcpy(p, "ro");
d81 1
a81 1
		strcpy(p, "wo");
d84 1
a84 1
		strcpy(p, "rw");
d87 1
a87 1
		strcpy(p, "--");
d121 1
a121 1
		strcpy(p, "ro");
d125 1
a125 1
		strcpy(p, "wo");
d128 1
a128 1
		strcpy(p, "rw");
d131 1
a131 1
		strcpy(p, "--");
@


1.13
log
@rename translation tables.  from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.12 2002/10/16 14:43:33 itojun Exp $	*/
d62 2
a63 1
static int print_uname(char *, size_t, struct intercept_translate *);
d260 112
d470 10
@


1.12
log
@translation for socket system call
from provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.11 2002/09/30 03:45:39 itojun Exp $	*/
d309 1
a309 1
struct intercept_translate trargv = {
d314 1
a314 1
struct intercept_translate oflags = {
d319 1
a319 1
struct intercept_translate linux_oflags = {
d324 1
a324 1
struct intercept_translate modeflags = {
d329 1
a329 1
struct intercept_translate uidt = {
d334 1
a334 1
struct intercept_translate uname = {
d339 1
a339 1
struct intercept_translate gidt = {
d344 1
a344 1
struct intercept_translate fdt = {
d349 1
a349 1
struct intercept_translate sockdom = {
d354 1
a354 1
struct intercept_translate socktype = {
@


1.11
log
@fix return value; from marius@@umich.edu via provos
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.10 2002/08/01 20:50:17 provos Exp $	*/
d35 1
d175 72
d347 10
@


1.10
log
@correctly separate execve argv arguments.  increase buffer size for
get_string
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.9 2002/07/30 06:07:06 itojun Exp $	*/
d199 1
a199 1
			return (NULL);
@


1.9
log
@avoid using same variable name for global and auto variable.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.8 2002/07/20 04:19:53 provos Exp $	*/
d193 1
d213 1
@


1.8
log
@compile on sparc64
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.7 2002/07/19 22:22:54 itojun Exp $	*/
d234 1
a234 1
struct intercept_translate argv = {
@


1.7
log
@you can't always cast pointer to int; use intptr_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.6 2002/07/19 14:38:58 itojun Exp $	*/
d177 1
a177 1
	uid_t uid = (uid_t)tl->trans_addr;
@


1.6
log
@constify, have missing prototypes, use pedantic compilation options.
niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.5 2002/07/14 22:34:55 provos Exp $	*/
d35 1
d69 1
a69 1
	int flags = (int)tl->trans_addr;
d113 1
a113 1
	int flags = (int)tl->trans_addr;
d155 1
a155 1
	int mode = (int)tl->trans_addr;
d166 1
a166 1
	int number = (int)tl->trans_addr;
@


1.5
log
@argv translation for exeve
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.4 2002/07/13 08:54:10 provos Exp $	*/
d55 10
a64 1
int
d108 1
a108 1
int
d151 1
a151 1
int
d162 1
a162 1
int
d172 1
a172 1
int
d184 1
a184 1
int
d194 1
a194 1
		if (intercept.io(fd, pid, INTERCEPT_READ, addr + off,
d225 1
a225 1
int
@


1.4
log
@uname translation
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.3 2002/07/09 15:22:27 provos Exp $	*/
d35 1
d174 54
@


1.3
log
@support for system call aliasing.  stat/fstat/readlink/access etc... gets
grouped into fsread, unlink/rmdir/mkdir goes to fswrite.  open switches
back between fsread and fswrite depending on oflags parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.2 2002/06/04 19:09:45 provos Exp $	*/
d40 1
d162 12
d192 5
@


1.2
log
@no absolute includes, changed to relatives; from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: systrace-translate.c,v 1.1 2002/06/04 17:20:04 provos Exp $	*/
d58 1
d64 1
d77 6
d102 1
d108 1
d120 6
@


1.1
log
@initial import of systrace.  don't touch this, more stuff coming in a while
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 2
a43 2
#include "/sys/compat/linux/linux_types.h"
#include "/sys/compat/linux/linux_fcntl.h"
@

