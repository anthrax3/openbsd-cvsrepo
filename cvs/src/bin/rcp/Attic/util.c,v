head	1.21;
access;
symbols
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.10
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.4
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2014.03.19.14.44.17;	author tedu;	state dead;
branches;
next	1.20;

1.20
date	2013.11.20.20.53.55;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.27.23.59.22;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2007.11.29.07.39.09;	author chl;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.17.20.10.44;	author chl;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.12.01.51.15;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2004.09.14.22.06.19;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.26.00.48.44;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.28.06.05.35;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.32.09;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.04.04.26.40;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.29.20.44.03;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.09.07.04.27;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.15.19.54.56;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.15.19.32.13;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.08.15.20.14.08;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.09.01.18.30.24;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.12.22.02.57.52;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.09.03.09.35.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Thulsa Doom says "Infidel Defilers. They shall all drown in lakes of blood."
@
text
@/*	$OpenBSD: util.c,v 1.20 2013/11/20 20:53:55 deraadt Exp $	*/
/*	$NetBSD: util.c,v 1.2 1995/03/21 08:19:08 cgd Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/stat.h>
#include <sys/wait.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <paths.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdarg.h>

#include "extern.h"

static pid_t do_cmd_pid = -1; /* PID of subprocess during do_local_cmd() */

char *
colon(char *cp)
{
	for (; *cp; ++cp) {
		if (*cp == ':')
			return (cp);
		if (*cp == '/')
			return (0);
	}
	return (0);
}

void
verifydir(char *cp)
{
	struct stat stb;

	if (!stat(cp, &stb)) {
		if (S_ISDIR(stb.st_mode))
			return;
		errno = ENOTDIR;
	}
	run_err("%s: %s", cp, strerror(errno));
	exit(1);
}

int
okname(char *cp0)
{
	int c;
	char *cp;

	cp = cp0;
	do {
		c = *cp;
		if (c & 0200)
			goto bad;
		if (!isalpha((unsigned char)c) &&
		    !isdigit((unsigned char)c) && c != '_' && c != '-')
			goto bad;
	} while (*++cp);
	return (1);

bad:	warnx("%s: invalid user name", cp0);
	return (0);
}

BUF *
allocbuf(BUF *bp, int fd, int blksize)
{
	struct stat stb;
	size_t size;
	char *p;

	if (fstat(fd, &stb) < 0) {
		run_err("fstat: %s", strerror(errno));
		return (0);
	}
	size = roundup(stb.st_blksize, blksize);
	if (size == 0)
		size = blksize;
	if (bp->cnt >= size)
		return (bp);
	if ((p = realloc(bp->buf, size)) == NULL) {
		free(bp->buf);
		bp->buf = NULL;
		bp->cnt = 0;
		run_err("%s", strerror(errno));
		return (0);
	}
	memset(p, 0, size);
	bp->buf = p;
	bp->cnt = size;
	return (bp);
}

/* ARGSUSED */
void
lostconn(int signo)
{
	extern char *__progname;
	char buf[1024];

	if (!iamremote) {
		strlcpy(buf, __progname, sizeof buf);
		strlcat(buf, ": lost connection\n", sizeof buf);
		write(STDERR_FILENO, buf, strlen(buf));
	}
	_exit(1);
}


static void
killchild(int signo)
{
	if (do_cmd_pid > 1) {
		kill(do_cmd_pid, signo ? signo : SIGTERM);
		waitpid(do_cmd_pid, NULL, 0);
	}

	if (signo)
		_exit(1);
	exit(1);
}

int
do_local_cmd(arglist *a, uid_t userid, gid_t groupid)
{
	int status;
	pid_t pid;

	if (a->num == 0)
		errx(1, "do_local_cmd: no arguments");

	if ((pid = fork()) == -1)
		err(1, "do_local_cmd: fork");

	if (pid == 0) {
		setresgid(groupid, groupid, groupid);
		setgroups(1, &groupid);
		setresuid(userid, userid, userid);
		execvp(a->list[0], a->list);
		perror(a->list[0]);
		exit(1);
	}

	do_cmd_pid = pid;
	signal(SIGTERM, killchild);
	signal(SIGINT, killchild);
	signal(SIGHUP, killchild);

	while (waitpid(pid, &status, 0) == -1)
		if (errno != EINTR)
			err(1, "do_local_cmd: waitpid");

	do_cmd_pid = -1;

	if (!WIFEXITED(status) || WEXITSTATUS(status) != 0)
		return (-1);

	signal(SIGTERM, SIG_DFL);
	signal(SIGINT, SIG_DFL);
	signal(SIGHUP, SIG_DFL);

	return (0);
}

/* function to assist building execv() arguments */
void
addargs(arglist *args, char *fmt, ...)
{
	va_list ap;
	char *cp;
	u_int nalloc;
	int r;

	va_start(ap, fmt);
	r = vasprintf(&cp, fmt, ap);
	va_end(ap);
	if (r == -1)
		errx(1, "addargs: argument too long");

	nalloc = args->nalloc;
	if (args->list == NULL) {
		nalloc = 32;
		args->num = 0;
	} else if (args->num+2 >= nalloc)
		nalloc *= 2;

	if ((args->list = realloc(args->list, nalloc * sizeof(char *))) == NULL)
		errx(1, "addargs: realloc failed");
	args->nalloc = nalloc;
	args->list[args->num++] = cp;
	args->list[args->num] = NULL;
}

void
freeargs(arglist *args)
{
	u_int i;

	if (args->list != NULL) {
		for (i = 0; i < args->num; i++)
			free(args->list[i]);
		free(args->list);
		args->nalloc = args->num = 0;
		args->list = NULL;
	}
}
@


1.20
log
@unsigned casts for ctype macros where neccessary
ok guenther millert markus
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.19 2009/10/27 23:59:22 deraadt Exp $	*/
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.18 2007/11/29 07:39:09 chl Exp $	*/
d89 2
a90 1
		if (!isalpha(c) && !isdigit(c) && c != '_' && c != '-')
@


1.18
log
@remove unused function

from tobias@@

ok millert@@ tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.17 2007/10/17 20:10:44 chl Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)util.c	8.2 (Berkeley) 4/2/94";
#else
static const char rcsid[] = "$OpenBSD: util.c,v 1.17 2007/10/17 20:10:44 chl Exp $";
#endif
#endif /* not lint */
@


1.17
log
@remove "unused variable" warnings

tested by deraadt@@ on a gcc2 arch

looks ok ray@@ ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.16 2006/03/12 01:51:15 djm Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: util.c,v 1.16 2006/03/12 01:51:15 djm Exp $";
a232 20
}

void
replacearg(arglist *args, u_int which, char *fmt, ...)
{
	va_list ap;
	char *cp;
	int r;

	va_start(ap, fmt);
	r = vasprintf(&cp, fmt, ap);
	va_end(ap);
	if (r == -1)
		errx(1, "replacearg: argument too long");

	if (which >= args->num)
		errx(1, "replacearg: tried to replace invalid arg %d >= %d",
		    which, args->num);
	free(args->list[which]);
	args->list[which] = cp;
@


1.16
log
@fix double shell expansion issue found in scp in rcp too; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.15 2004/09/14 22:06:19 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: util.c,v 1.15 2004/09/14 22:06:19 deraadt Exp $";
a166 1
	u_int i;
@


1.15
log
@ARGSUSED before signal handler with unused signo
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.14 2003/09/26 00:48:44 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: util.c,v 1.14 2003/09/26 00:48:44 deraadt Exp $";
d54 1
d58 2
a105 27
int
susystem(char *s, int userid)
{
	sig_t istat, qstat;
	int status;
	pid_t pid;

	pid = vfork();
	switch (pid) {
	case -1:
		return (127);

	case 0:
		(void)seteuid(userid);
		(void)setuid(userid);
		execl(_PATH_BSHELL, "sh", "-c", s, (char *)NULL);
		_exit(127);
	}
	istat = signal(SIGINT, SIG_IGN);
	qstat = signal(SIGQUIT, SIG_IGN);
	if (waitpid(pid, &status, 0) < 0)
		status = -1;
	(void)signal(SIGINT, istat);
	(void)signal(SIGQUIT, qstat);
	return (status);
}

d148 120
@


1.14
log
@free(NULL) is valid
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.13 2003/07/28 06:05:35 tedu Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: util.c,v 1.13 2003/07/28 06:05:35 tedu Exp $";
d159 1
@


1.13
log
@rcsid should say openbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.12 2003/06/02 23:32:09 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: util.c,v 1.12 2003/06/02 23:32:09 millert Exp $";
d147 1
a147 2
		if (bp->buf)
			free(bp->buf);
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.11 2002/07/04 04:26:40 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: util.c,v 1.11 2002/07/04 04:26:40 deraadt Exp $";
@


1.11
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.10 2001/08/29 20:44:03 markus Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: util.c,v 1.10 2001/08/29 20:44:03 markus Exp $";
@


1.10
log
@clear the malloc'd buffer, otherwise source() will leak malloc'd memory; ok theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.9 2001/07/09 07:04:27 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.9 2001/07/09 07:04:27 deraadt Exp $";
d62 1
a62 2
colon(cp)
	char *cp;
d74 1
a74 2
verifydir(cp)
	char *cp;
d88 1
a88 2
okname(cp0)
	char *cp0;
d108 1
a108 3
susystem(s, userid)
	int userid;
	char *s;
d135 1
a135 3
allocbuf(bp, fd, blksize)
	BUF *bp;
	int fd, blksize;
d165 1
a165 2
lostconn(signo)
	int signo;
@


1.9
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.8 2001/01/15 19:54:56 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.8 2001/01/15 19:54:56 deraadt Exp $";
d165 1
@


1.8
log
@avoid using warnx() in a signal handler, suggestion from aaron
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.7 2001/01/15 19:32:13 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.7 2001/01/15 19:32:13 deraadt Exp $";
d127 1
a127 1
		execl(_PATH_BSHELL, "sh", "-c", s, NULL);
@


1.7
log
@use _exit() in signal handler, still a race because of warnx()...
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.6 1998/08/15 20:14:08 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.6 1998/08/15 20:14:08 deraadt Exp $";
d174 8
a181 2
	if (!iamremote)
		warnx("lost connection");
@


1.6
log
@fix realloc
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.5 1997/09/01 18:30:24 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.5 1997/09/01 18:30:24 deraadt Exp $";
d176 1
a176 1
	exit(1);
@


1.5
log
@i am bored enough to fix terminal space/tab uglies
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.4 1996/12/22 02:57:52 tholo Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.4 1996/12/22 02:57:52 tholo Exp $";
d146 1
d157 4
a160 1
	if ((bp->buf = realloc(bp->buf, size)) == NULL) {
d165 1
@


1.4
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.3 1996/09/03 09:35:31 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.3 1996/09/03 09:35:31 deraadt Exp $";
d123 1
a123 1
	
@


1.3
log
@kill useless code
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.2 1996/06/23 14:20:57 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.2 1996/06/23 14:20:57 deraadt Exp $";
d125 1
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.2 1995/03/21 08:19:08 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: util.c,v 1.2 1995/03/21 08:19:08 cgd Exp $";
a64 3
	if (*cp == ':')		/* Leading colon is part of file name. */
		return (0);

d116 1
a116 1
	int status, w;
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: util.c,v 1.2 1995/03/21 08:19:08 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
