head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.22
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.20
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.18
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.16
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.14
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.12
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	pdksh-527:1.1.1.1
	pdksh:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2015.09.14.09.42.33;	author nicm;	state Exp;
branches;
next	1.7;
commitid	HNyoYgRIsBj18EIi;

1.7
date	2013.11.28.10.33.37;	author sobrado;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.18.20.55.52;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.07.14.13.37.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.06.25.19.01.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.01.02.05.30;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.20.08.44;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.08.14.06.19.10;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.14.06.19.10;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Apply the ancient art of tedu to ksh_limval.h. ok guenther
@
text
@$OpenBSD: PROJECTS,v 1.7 2013/11/28 10:33:37 sobrado Exp $

Things to be done in pdksh (see also the NOTES file):

    * builtin utilities:
      pdksh has most if not all POSIX/at&t ksh builtins, but they need to
      be checked that they conform to POSIX/at&t manual.  Part of the
      process is changing the builtins to use the ksh_getopt() routine.

      The following builtins, which are defined by POSIX, haven't been
      examined:
	eval

      The first pass has been done on the following commands:
	. : alias bg break cd continue echo exec exit export false fc fg
	getopts jobs kill pwd read readonly return set shift time trap true
	umask unalias unset wait

      The second pass (ie, believed to be completely POSIX) has been done on
      the following commands:
	test

      (ulimit also needs to be examined to check that it fits the posix style)

    * test suite
      Ideally, as the builtin utilities are being POSIXized, short tests
      should be written to be used in regression testing.  The tests
      directory contains some tests, but many more need to be written.

    * internationalization
      Need to handle with the LANG and LC_* environment variables.  This
      involves changes to ensure <ctype.h> macros are being used (currently
      uses its own macros in many places), figuring out how to deal with
      bases (for integer arithmetic, eg, 12#1A), and (the nasty one) doing
      string look ups for error messages, etc..  It probably isn't worth
      translating strings to other languages yet as the code is likely
      to change a lot in the near future, but it would be good to have the
      code set up so string tables can be used.

    * trap code
	* add the DEBUG trap.
	* fix up signal handling code.  In particular, fatal vs tty signals,
	  have signal routine to call to check for pending/fatal traps, etc.

    * parsing
	* the time keyword needs to be hacked to accept options (!) since
	  POSIX says it shall accept the -p option and must skip a -- argument
	  (end of options).  Yuck.

    * lexing
      the lexing may need a re-write since it currently doesn't parse $( .. ),
      $(( .. )), (( ... )) properly.
	* need to ignore contents of quoted strings (and escaped chars?)
	  inside $( .. ) and $(( .. )) when counting parentheses.
	* need to put bounds check on states[] array (if it still exists after
	  the re-write)

    * variables
	* The "struct tbl" that is currently used for variables needs work since
	  more information (eg, array stuff, fields) are needed for variables
	  but not for the other things that use "struct tbl".
	* Arrays need to be implemented differently: currently does a linear
	  search of a linked list to find element i; the linked list is not
	  freed when a variable is unset.

    * functions
      finish the differences between function x and x(): trap EXIT, traps
      in general, treatment of OPTIND/OPTARG,

    * history
      There are two versions of the history code, COMPLEX_HISTORY and
      EASY_HISTORY, which need to be merged.  COMPLEX does at&t style history
      where the history file is written after each command and checked when
      ever looking through the history (in case another shell has added
      something).  EASY simply reads the history file at startup and writes
      it before exiting.
	* re-write the COMPLEX_HISTORY code so mmap() not needed (currently
	  can't be used on machines without mmap()).
	* Add multiline knowledge to COMPLEX_HISTORY (see EASY_HISTORY
	  stuff).
	* change COMPLEX_HISTORY code so concurrent history files are
	  controlled by an option (set -o history-concurrent?).  Delete
	  the EASY_HISTORY code.
	* bring history code up to POSIX standards (see POSIX description
	  of fc, etc.).

    * documentation
      Some sort of tutorial with examples would be good.  Texinfo is probably
      the best medium for this.  Also, the man page could be converted to
      texinfo (if the tutorial and man page  are put in the same texinfo
      page, they should be somewhat distinct - i.e., the tutorial should
      be a separate thread - but there should be cross references between the
      two).

    * miscellaneous
	* POSIX specifies what happens when various kinds of errors occur
	  in special built-ins commands vs regular commands (builtin or
	  otherwise) (see POSIX.2:3.8.1).  Some of this has been taken
	  care of, but more needs doing.

	* remove static limits created by fixed sized arrays
	  (eg, ident[], heres[], PATH, buffer size in emacs/vi code)

	* merge the emacs and vi code (should reduce the size of the shell and
	  make maintenance easier); handle SIGWINCH while editing a line.
	  [John Rochester is working on the merge]

	* add POSIX globbing (eg, [[:alnum:]]), see POSIX.2:2.8.3.2.

	* teach shf_vfprintf() about long long's (%lld); also make %p use
	  long longs if appropriate.
@


1.7
log
@remove trailing whitespaces; use tabs instead of spaces where appropriate;
no binary changes.
@
text
@d1 1
a1 1
$OpenBSD: PROJECTS,v 1.6 2004/12/18 20:55:52 millert Exp $
a111 3

	* decide wether to keep currently disabled FP stuff in shf.c; if
	  not, eliminate ksh_limval.h (moving BITS to var.c).
@


1.6
log
@Remove unused OS dependent #ifdef blocks, #defines and macro abstraction.
First step in making the ksh code easier to read.  From Matthias Kilian
@
text
@d1 1
a1 1
$OpenBSD: PROJECTS,v 1.5 1999/07/14 13:37:23 millert Exp $
d5 1
a5 1
    * builtin utilities: 
d60 1
a60 1
          more information (eg, array stuff, fields) are needed for variables
d68 1
a68 1
      in general, treatment of OPTIND/OPTARG, 
@


1.5
log
@pdksh-5.2.14
@
text
@d1 1
a1 1
$OpenBSD: PROJECTS,v 1.4 1998/06/25 19:01:38 millert Exp $
d112 3
@


1.4
log
@pdksh-5.2.13 + local changes
@
text
@d1 1
a1 1
$OpenBSD: PROJECTS,v 1.3 1996/10/01 02:05:30 downsj Exp $
d12 1
a12 1
	eval time
d16 2
a17 2
	getopts jobs kill pwd read readonly return set shift trap true umask
	unalias unset wait
d23 1
a23 1
      (ulimit also needs to be examined to check it fits the posix style)
@


1.3
log
@Integrate pdksh 5.2.9.
@
text
@d1 1
a1 1
$OpenBSD: PROJECTS,v 1.2 1996/08/19 20:08:44 downsj Exp $
d102 1
a102 2
	  (eg, getsc_(line[]), ident[], heres[], PATH, states(lex.c),
	  buffer size in emacs/vi code)
@


1.2
log
@update to pdksh-5.2.8
@
text
@d1 1
a1 1
$OpenBSD: PROJECTS,v 1.1.1.1 1996/08/14 06:19:10 downsj Exp $
a112 4

	* add \[...\] parsing to prompt printing (don't count width of chars
	  inside the \[..\] - used to keep escape sequences in prompts from
	  messing up command-line-editor's idea of where the cursor is)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d43 1
a43 1
	  have single routine to call to check for pending/fatal traps, etc.
d67 2
a68 6
      POSIX and at&t ksh functions are different in that POSIX functions
      don't change disable/restore traps and option parsing (OPTIND/OPTARG
      plus internal state) isn't saved/restored.  The suggestion made in
      POSIX.2 rationale is to have x() { .. } do the POSIX thing, and have
      function x { ..} do the at&t ksh thing.  So, should have two types of
      functions.
a100 3
	* POSIX says if an exec fails, the exit code should be 127 (not found)
	  or 126 (not executable)...

d106 1
a106 1
	  make maintenance easier).
a110 4
	* catch SIGWINCH and update the COLUMNS and LINES parameters (also,
	  need to let the command line editor know of change - ideally this
	  would work even if the editor was currently reading commands).

a116 5

	* file(command) completion list in vi/emacs: change so a number-prefix
	  picks one of the possibilities (eg, if in vi: foo^[= lists fooa, foob
	  and fooc as possible completions, ^[2= would choose the second
	  possibility (foob)).
@


1.1.1.1
log
@Import pdksh 5.2.7.
@
text
@@
