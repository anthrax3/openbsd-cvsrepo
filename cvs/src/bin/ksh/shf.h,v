head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.42
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.34
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.38
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.36
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.32
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.30
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.28
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.26
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.24
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.22
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.20
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.18
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.16
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.14
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	pdksh-527:1.1.1.1
	pdksh:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.14.06.09.43;	author mmcc;	state Exp;
branches;
next	1.7;
commitid	X7XrxRgHwWl96WEl;

1.7
date	2015.10.21.15.47.41;	author mmcc;	state Exp;
branches;
next	1.6;
commitid	CvcKXIcgVXd3fSOy;

1.6
date	2005.12.11.18.53.51;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.30.17.16.37;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.20.11.34.26;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.18.20.55.52;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.01.08.20.25.02;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.14.06.19.11;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.14.06.19.11;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove a superfluous macro. No binary change. ok tb@@
@
text
@/*	$OpenBSD: shf.h,v 1.7 2015/10/21 15:47:41 mmcc Exp $	*/

#ifndef SHF_H
# define SHF_H

/*
 * Shell file I/O routines
 */

#define SHF_BSIZE	512

#define shf_getc(shf) ((shf)->rnleft > 0 ? (shf)->rnleft--, *(shf)->rp++ : \
			shf_getchar(shf))
#define shf_putc(c, shf)	((shf)->wnleft == 0 ? shf_putchar((c), (shf)) : \
				    ((shf)->wnleft--, *(shf)->wp++ = (c)))
#define shf_eof(shf)		((shf)->flags & SHF_EOF)
#define shf_error(shf)		((shf)->flags & SHF_ERROR)
#define shf_clearerr(shf)	((shf)->flags &= ~(SHF_EOF | SHF_ERROR))

/* Flags passed to shf_*open() */
#define SHF_RD		0x0001
#define SHF_WR		0x0002
#define SHF_RDWR	  (SHF_RD|SHF_WR)
#define SHF_ACCMODE	  0x0003	/* mask */
#define SHF_GETFL	0x0004		/* use fcntl() to figure RD/WR flags */
#define SHF_UNBUF	0x0008		/* unbuffered I/O */
#define SHF_CLEXEC	0x0010		/* set close on exec flag */
#define SHF_MAPHI	0x0020		/* make fd > FDBASE (and close orig)
					 * (shf_open() only) */
#define SHF_DYNAMIC	0x0040		/* string: increase buffer as needed */
#define SHF_INTERRUPT	0x0080		/* EINTR in read/write causes error */
/* Flags used internally */
#define SHF_STRING	0x0100		/* a string, not a file */
#define SHF_ALLOCS	0x0200		/* shf and shf->buf were alloc()ed */
#define SHF_ALLOCB	0x0400		/* shf->buf was alloc()ed */
#define SHF_ERROR	0x0800		/* read()/write() error */
#define SHF_EOF		0x1000		/* read eof (sticky) */
#define SHF_READING	0x2000		/* currently reading: rnleft,rp valid */
#define SHF_WRITING	0x4000		/* currently writing: wnleft,wp valid */


struct shf {
	int flags;		/* see SHF_* */
	unsigned char *rp;	/* read: current position in buffer */
	int rbsize;		/* size of buffer (1 if SHF_UNBUF) */
	int rnleft;		/* read: how much data left in buffer */
	unsigned char *wp;	/* write: current position in buffer */
	int wbsize;		/* size of buffer (0 if SHF_UNBUF) */
	int wnleft;		/* write: how much space left in buffer */
	unsigned char *buf;	/* buffer */
	int fd;			/* file descriptor */
	int errno_;		/* saved value of errno after error */
	int bsize;		/* actual size of buf */
	Area *areap;		/* area shf/buf were allocated in */
};

extern struct shf shf_iob[];

struct shf *shf_open(const char *, int, int, int);
struct shf *shf_fdopen(int, int, struct shf *);
struct shf *shf_reopen(int, int, struct shf *);
struct shf *shf_sopen(char *, int, int, struct shf *);
int	    shf_close(struct shf *);
int	    shf_fdclose(struct shf *);
char	   *shf_sclose(struct shf *);
int	    shf_flush(struct shf *);
int	    shf_read(char *, int, struct shf *);
char	   *shf_getse(char *, int, struct shf *);
int	    shf_getchar(struct shf *s);
int	    shf_ungetc(int, struct shf *);
int	    shf_putchar(int, struct shf *);
int	    shf_puts(const char *, struct shf *);
int	    shf_write(const char *, int, struct shf *);
int	    shf_fprintf(struct shf *, const char *, ...);
int	    shf_snprintf(char *, int, const char *, ...);
char	    *shf_smprintf(const char *, ...);
int	    shf_vfprintf(struct shf *, const char *, va_list);

#endif /* SHF_H */
@


1.7
log
@Remove a couple of unhelpful defines.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shf.h,v 1.6 2005/12/11 18:53:51 deraadt Exp $	*/
a17 1
#define shf_errno(shf)		((shf)->errno_)
@


1.6
log
@remove unused variables and functions
@
text
@d1 1
a1 1
/*	$OpenBSD: shf.h,v 1.5 2005/03/30 17:16:37 deraadt Exp $	*/
a11 2
#define shf_fileno(shf)	((shf)->fd)
#define shf_setfileno(shf,nfd)	((shf)->fd = (nfd))
@


1.5
log
@lots of indentation cleanup, now ksh is readable like our other code.
double checked to make sure no binaries change, and eyed by niallo
@
text
@d1 1
a1 1
/*	$OpenBSD: shf.h,v 1.4 2004/12/20 11:34:26 otto Exp $	*/
a68 1
int	    shf_finish(struct shf *);
a69 1
int	    shf_seek(struct shf *, off_t, int);
@


1.4
log
@Ansification plus some minor knf. No binary change on i386 and
sparc64, binary change in lex.o on macppc due to introduction of
dopprompt() prototype. ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shf.h,v 1.3 2004/12/18 20:55:52 millert Exp $	*/
d16 2
a17 2
#define shf_putc(c, shf)	((shf)->wnleft == 0 ? shf_putchar((c), (shf)) \
					: ((shf)->wnleft--, *(shf)->wp++ = (c)))
@


1.3
log
@Remove unused OS dependent #ifdef blocks, #defines and macro abstraction.
First step in making the ksh code easier to read.  From Matthias Kilian
@
text
@d1 1
a1 1
/*	$OpenBSD: shf.h,v 1.2 1999/01/08 20:25:02 millert Exp $	*/
d62 21
a82 21
struct shf *shf_open(const char *name, int oflags, int mode, int sflags);
struct shf *shf_fdopen(int fd, int sflags, struct shf *shf);
struct shf *shf_reopen(int fd, int sflags, struct shf *shf);
struct shf *shf_sopen(char *buf, int bsize, int sflags, struct shf *shf);
int	    shf_close(struct shf *shf);
int	    shf_fdclose(struct shf *shf);
char	   *shf_sclose(struct shf *shf);
int	    shf_finish(struct shf *shf);
int	    shf_flush(struct shf *shf);
int	    shf_seek(struct shf *shf, off_t where, int from);
int	    shf_read(char *buf, int bsize, struct shf *shf);
char	   *shf_getse(char *buf, int bsize, struct shf *shf);
int	    shf_getchar(struct shf *shf);
int	    shf_ungetc(int c, struct shf *shf);
int	    shf_putchar(int c, struct shf *shf);
int	    shf_puts(const char *s, struct shf *shf);
int	    shf_write(const char *buf, int nbytes, struct shf *shf);
int	    shf_fprintf(struct shf *shf, const char *fmt, ...);
int	    shf_snprintf(char *buf, int bsize, const char *fmt, ...);
char	    *shf_smprintf(const char *fmt, ...);
int	    shf_vfprintf(struct shf *, const char *fmt, va_list args);
@


1.2
log
@bug fixes from pdksh-unstable-5.2.13.5; some of which we already had.
@
text
@d1 1
a1 1
/*	$OpenBSD: shf.h,v 1.1.1.1 1996/08/14 06:19:11 downsj Exp $	*/
d62 21
a82 23
struct shf *shf_open	ARGS((const char *name, int oflags, int mode,
			      int sflags));
struct shf *shf_fdopen	ARGS((int fd, int sflags, struct shf *shf));
struct shf *shf_reopen  ARGS((int fd, int sflags, struct shf *shf));
struct shf *shf_sopen	ARGS((char *buf, int bsize, int sflags,
			      struct shf *shf));
int	    shf_close	ARGS((struct shf *shf));
int	    shf_fdclose	ARGS((struct shf *shf));
char	   *shf_sclose	ARGS((struct shf *shf));
int	    shf_finish	ARGS((struct shf *shf));
int	    shf_flush	ARGS((struct shf *shf));
int	    shf_seek	ARGS((struct shf *shf, off_t where, int from));
int	    shf_read	ARGS((char *buf, int bsize, struct shf *shf));
char	   *shf_getse	ARGS((char *buf, int bsize, struct shf *shf));
int	    shf_getchar	ARGS((struct shf *shf));
int	    shf_ungetc	ARGS((int c, struct shf *shf));
int	    shf_putchar	ARGS((int c, struct shf *shf));
int	    shf_puts	ARGS((const char *s, struct shf *shf));
int	    shf_write	ARGS((const char *buf, int nbytes, struct shf *shf));
int	    shf_fprintf ARGS((struct shf *shf, const char *fmt, ...));
int	    shf_snprintf ARGS((char *buf, int bsize, const char *fmt, ...));
char	    *shf_smprintf ARGS((const char *fmt, ...));
int	    shf_vfprintf ARGS((struct shf *, const char *fmt, va_list args));
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$OpenBSD$	*/
d85 2
@


1.1.1.1
log
@Import pdksh 5.2.7.
@
text
@@
