head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.32
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.30
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.28
	OPENBSD_5_0:1.15.0.26
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.24
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.22
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.18
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.20
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.16
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.14
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.12
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.10
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.9.0.22
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.20
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.18
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.16
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.14
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.12
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.10
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.8
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.6
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	pdksh-527:1.1.1.1
	pdksh:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.10.19.14.42.16;	author mmcc;	state Exp;
branches;
next	1.21;
commitid	C4W85jmosThChWA2;

1.21
date	2015.10.19.02.15.45;	author mmcc;	state Exp;
branches;
next	1.20;
commitid	16HUr75moyUNtKR8;

1.20
date	2015.10.09.19.36.27;	author tedu;	state Exp;
branches;
next	1.19;
commitid	BqXaWldwtvsixcay;

1.19
date	2015.09.17.14.21.33;	author nicm;	state Exp;
branches;
next	1.18;
commitid	v5QjoxUgKU2iUTFz;

1.18
date	2015.09.01.13.12.31;	author tedu;	state Exp;
branches;
next	1.17;
commitid	sKGEDet4KOfGjsIb;

1.17
date	2013.11.28.10.33.37;	author sobrado;	state Exp;
branches;
next	1.16;

1.16
date	2013.04.16.22.13.14;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.30.17.16.37;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.22.17.14.34;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.20.11.34.26;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.18.21.25.44;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.18.21.04.52;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.18.20.55.52;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	99.06.15.01.18.35;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.01.10.17.55.03;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.06.25.19.02.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.11.16.12.07.28;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.06.19.13.58.44;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.06.18.22.42.39;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	97.01.02.17.37.27;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.20.08.55;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.08.14.06.19.11;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.14.06.19.11;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Move string.h include from sh.h to the files that use it.

ok nicm@@
@
text
@/*	$OpenBSD: mail.c,v 1.21 2015/10/19 02:15:45 mmcc Exp $	*/

/*
 * Mailbox checking code by Robert J. Gibson, adapted for PD ksh by
 * John R. MacMillan
 */

#include <sys/stat.h>

#include <string.h>
#include <time.h>

#include "config.h"
#include "sh.h"

#define MBMESSAGE	"you have mail in $_"

typedef struct mbox {
	struct mbox    *mb_next;	/* next mbox in list */
	char	       *mb_path;	/* path to mail file */
	char	       *mb_msg;		/* to announce arrival of new mail */
	time_t		mb_mtime;	/* mtime of mail file */
} mbox_t;

/*
 * $MAILPATH is a linked list of mboxes.  $MAIL is a treated as a
 * special case of $MAILPATH, where the list has only one node.  The
 * same list is used for both since they are exclusive.
 */

static mbox_t	*mplist;
static mbox_t	mbox;
static time_t	mlastchkd;	/* when mail was last checked */
static time_t	mailcheck_interval;

static void	munset(mbox_t *); /* free mlist and mval */
static mbox_t * mballoc(char *, char *); /* allocate a new mbox */
static void	mprintit(mbox_t *);

void
mcheck(void)
{
	mbox_t		*mbp;
	time_t		 now;
	struct tbl	*vp;
	struct stat	 stbuf;

	now = time(NULL);
	if (mlastchkd == 0)
		mlastchkd = now;
	if (now - mlastchkd >= mailcheck_interval) {
		mlastchkd = now;

		if (mplist)
			mbp = mplist;
		else if ((vp = global("MAIL")) && (vp->flag & ISSET))
			mbp = &mbox;
		else
			mbp = NULL;

		while (mbp) {
			if (mbp->mb_path && stat(mbp->mb_path, &stbuf) == 0 &&
			    S_ISREG(stbuf.st_mode)) {
				if (stbuf.st_size &&
				    mbp->mb_mtime != stbuf.st_mtime &&
				    stbuf.st_atime <= stbuf.st_mtime)
					mprintit(mbp);
				mbp->mb_mtime = stbuf.st_mtime;
			} else {
				/*
				 * Some mail readers remove the mail
				 * file if all mail is read.  If file
				 * does not exist, assume this is the
				 * case and set mtime to zero.
				 */
				mbp->mb_mtime = 0;
			}
			mbp = mbp->mb_next;
		}
	}
}

void
mcset(long int interval)
{
	mailcheck_interval = interval;
}

void
mbset(char *p)
{
	struct stat	stbuf;

	afree(mbox.mb_msg, APERM);
	afree(mbox.mb_path, APERM);
	/* Save a copy to protect from export (which munges the string) */
	mbox.mb_path = str_save(p, APERM);
	mbox.mb_msg = NULL;
	if (p && stat(p, &stbuf) == 0 && S_ISREG(stbuf.st_mode))
		mbox.mb_mtime = stbuf.st_mtime;
	else
		mbox.mb_mtime = 0;
}

void
mpset(char *mptoparse)
{
	mbox_t	*mbp;
	char	*mpath, *mmsg, *mval;
	char *p;

	munset( mplist );
	mplist = NULL;
	mval = str_save(mptoparse, APERM);
	while (mval) {
		mpath = mval;
		if ((mval = strchr(mval, ':')) != NULL) {
			*mval = '\0';
			mval++;
		}
		/* POSIX/bourne-shell say file%message */
		for (p = mpath; (mmsg = strchr(p, '%')); ) {
			/* a literal percent? (POSIXism) */
			if (mmsg[-1] == '\\') {
				/* use memmove() to avoid overlap problems */
				memmove(mmsg - 1, mmsg, strlen(mmsg) + 1);
				p = mmsg + 1;
				continue;
			}
			break;
		}
		/* at&t ksh says file?message */
		if (!mmsg && !Flag(FPOSIX))
			mmsg = strchr(mpath, '?');
		if (mmsg) {
			*mmsg = '\0';
			mmsg++;
		}
		mbp = mballoc(mpath, mmsg);
		mbp->mb_next = mplist;
		mplist = mbp;
	}
}

static void
munset(mbox_t *mlist)
{
	mbox_t	*mbp;

	while (mlist != NULL) {
		mbp = mlist;
		mlist = mbp->mb_next;
		if (!mlist)
			afree(mbp->mb_path, APERM);
		afree(mbp, APERM);
	}
}

static mbox_t *
mballoc(char *p, char *m)
{
	struct stat	stbuf;
	mbox_t	*mbp;

	mbp = alloc(sizeof(mbox_t), APERM);
	mbp->mb_next = NULL;
	mbp->mb_path = p;
	mbp->mb_msg = m;
	if (stat(mbp->mb_path, &stbuf) == 0 && S_ISREG(stbuf.st_mode))
		mbp->mb_mtime = stbuf.st_mtime;
	else
		mbp->mb_mtime = 0;
	return(mbp);
}

static void
mprintit(mbox_t *mbp)
{
	struct tbl	*vp;

#if 0
	/*
	 * I doubt this $_ overloading is bad in /bin/sh mode.  Anyhow, we
	 * crash as the code looks now if we do not set vp.  Now, this is
	 * easy to fix too, but I'd like to see what POSIX says before doing
	 * a change like that.
	 */
	if (!Flag(FSH))
#endif
		/* Ignore setstr errors here (arbitrary) */
		setstr((vp = local("_", false)), mbp->mb_path, KSH_RETURN_ERROR);

	shellf("%s\n", substitute(mbp->mb_msg ? mbp->mb_msg : MBMESSAGE, 0));

	unset(vp, 0);
}
@


1.21
log
@Apply style(9) to header includes.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.20 2015/10/09 19:36:27 tedu Exp $	*/
d10 1
@


1.20
log
@remove null check before afree. from Michael McConville
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.19 2015/09/17 14:21:33 nicm Exp $	*/
d8 4
a12 1

a13 2
#include <sys/stat.h>
#include <time.h>
@


1.19
log
@Remove unnecessary casts, from Michael McConville. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.18 2015/09/01 13:12:31 tedu Exp $	*/
d92 2
a93 4
	if (mbox.mb_msg)
		afree(mbox.mb_msg, APERM);
	if (mbox.mb_path)
		afree(mbox.mb_path, APERM);
@


1.18
log
@remove casts and null checks before free. from Michael McConville
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.17 2013/11/28 10:33:37 sobrado Exp $	*/
d165 1
a165 1
	mbp = (mbox_t *)alloc(sizeof(mbox_t), APERM);
@


1.17
log
@remove trailing whitespaces; use tabs instead of spaces where appropriate;
no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.16 2013/04/16 22:13:14 deraadt Exp $	*/
d93 1
a93 1
		afree((void *)mbox.mb_msg, APERM);
d95 1
a95 1
		afree((void *)mbox.mb_path, APERM);
d154 2
a155 2
			afree((void *)mbp->mb_path, APERM);
		afree((void *)mbp, APERM);
@


1.16
log
@remove unneccessary time_t * cast
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.15 2005/03/30 17:16:37 deraadt Exp $	*/
d34 1
a34 1
static void     munset(mbox_t *); /* free mlist and mval */
d36 1
a36 1
static void     mprintit(mbox_t *);
@


1.15
log
@lots of indentation cleanup, now ksh is readable like our other code.
double checked to make sure no binaries change, and eyed by niallo
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.14 2004/12/22 17:14:34 millert Exp $	*/
d46 1
a46 1
	now = time((time_t *) 0);
@


1.14
log
@Use stdbool.h instead of rolling our own bools.
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.13 2004/12/20 11:34:26 otto Exp $	*/
d60 5
a64 6
			if (mbp->mb_path && stat(mbp->mb_path, &stbuf) == 0
			    && S_ISREG(stbuf.st_mode))
			{
				if (stbuf.st_size
				    && mbp->mb_mtime != stbuf.st_mtime
				    && stbuf.st_atime <= stbuf.st_mtime)
d118 2
a119 1
			*mval = '\0', mval++;
@


1.13
log
@Ansification plus some minor knf. No binary change on i386 and
sparc64, binary change in lex.o on macppc due to introduction of
dopprompt() prototype. ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.12 2004/12/18 21:25:44 millert Exp $	*/
d191 1
a191 1
		setstr((vp = local("_", FALSE)), mbp->mb_path, KSH_RETURN_ERROR);
@


1.12
log
@deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.11 2004/12/18 21:04:52 millert Exp $	*/
d34 3
a36 3
static void     munset(mbox_t *mlist); /* free mlist and mval */
static mbox_t * mballoc(char *p, char *m); /* allocate a new mbox */
static void     mprintit(mbox_t *mbp);
d39 1
a39 1
mcheck()
d83 1
a83 2
mcset(interval)
	long interval;
d89 1
a89 2
mbset(p)
	char	*p;
d107 1
a107 2
mpset(mptoparse)
	char	*mptoparse;
d146 1
a146 2
munset(mlist)
mbox_t	*mlist;
d160 1
a160 3
mballoc(p, m)
	char	*p;
	char	*m;
d177 1
a177 2
mprintit( mbp )
mbox_t	*mbp;
@


1.11
log
@Get rid of #ifdef KSH since we don't care about building a V7 style sh and
the #ifdef KSH code is required to make a POSIX sh.  From Matthias Kilian
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.10 2004/12/18 20:55:52 millert Exp $	*/
d41 1
a41 1
	register mbox_t	*mbp;
d91 1
a91 1
	register char	*p;
d110 1
a110 1
	register char	*mptoparse;
d112 2
a113 2
	register mbox_t	*mbp;
	register char	*mpath, *mmsg, *mval;
d150 1
a150 1
register mbox_t	*mlist;
d152 1
a152 1
	register mbox_t	*mbp;
d169 1
a169 1
	register mbox_t	*mbp;
@


1.10
log
@Remove unused OS dependent #ifdef blocks, #defines and macro abstraction.
First step in making the ksh code easier to read.  From Matthias Kilian
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.9 1999/06/15 01:18:35 millert Exp $	*/
a9 1
#ifdef KSH
a203 1
#endif /* KSH */
@


1.9
log
@patches from pdksh 5.2.13.11
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.8 1999/01/10 17:55:03 millert Exp $	*/
d12 2
a13 2
#include "ksh_stat.h"
#include "ksh_time.h"
d35 3
a37 3
static void     munset      ARGS((mbox_t *mlist)); /* free mlist and mval */
static mbox_t * mballoc     ARGS((char *p, char *m)); /* allocate a new mbox */
static void     mprintit    ARGS((mbox_t *mbp));
d122 1
a122 1
		if ((mval = strchr(mval, PATHSEP)) != NULL) {
@


1.8
log
@sync with pdksh-unstable-5.2.13.6
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.7 1998/06/25 19:02:09 millert Exp $	*/
d30 2
a31 2
static mbox_t  *mplist;
static mbox_t  mbox;
d33 1
a43 1
	long		 mailcheck;
a46 3
	if (getint(global("MAILCHECK"), &mailcheck) < 0)
		return;

d50 1
a50 1
	if (now - mlastchkd >= mailcheck) {
d53 1
a53 2
		vp = global("MAILPATH");
		if (vp && (vp->flag & ISSET))
d84 7
d198 2
a199 2
		/* SETSTR: ignore fail (arbitrary; havn't checked at&t) */
		setstr((vp = local("_", FALSE)), mbp->mb_path);
@


1.7
log
@pdksh-5.2.13 + local changes
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.6 1997/11/16 12:07:28 niklas Exp $	*/
d195 1
@


1.6
log
@Revert one of the $_ changes made 970102, as it makes sh crash when mail
arrives and mailchecking is on.  I doubt this case was meant to be altered
at that time judging from the documentation fix it went along with.
However to be really sure I would like to see what POSIX has to say about
the mail notification message format.  Is $_ meant to be expanded to the
mailbox path?  If so, this revertion is correct, otherwise, another fix ought
to be made.  I have no POSIX spec though.
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.5 1997/06/19 13:58:44 kstailey Exp $	*/
d95 4
a98 1
	mbox.mb_path = p;
d100 1
a100 1
	if (p && stat(p,&stbuf) == 0 && S_ISREG(stbuf.st_mode))
@


1.5
log
@back out
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.3 1997/01/02 17:37:27 downsj Exp $	*/
d183 7
d191 1
@


1.4
log
@(foo *)0 -> NULL
@
text
@d50 1
a50 1
	now = time(NULL);
@


1.3
log
@After discussing $_ with the maintainer, revert ksh behaviour and completely
eliminate it from sh.
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.2 1996/08/19 20:08:55 downsj Exp $	*/
d50 1
a50 1
	now = time((time_t *) 0);
@


1.2
log
@update to pdksh-5.2.8
@
text
@d1 1
a1 1
/*	$OpenBSD: mail.c,v 1.1.1.1 1996/08/14 06:19:11 downsj Exp $	*/
d183 2
a184 1
	setstr((vp = local("_", FALSE)), mbp->mb_path);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d8 3
d189 1
@


1.1.1.1
log
@Import pdksh 5.2.7.
@
text
@@
