head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.20
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.12
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.16
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.24
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.22
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.18
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.20
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.16
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	pdksh-527:1.1.1.1
	pdksh:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.01.26.17.39.31;	author mmcc;	state Exp;
branches;
next	1.10;
commitid	1eQJzyXllsiUFmYD;

1.10
date	2015.09.26.23.49.37;	author nicm;	state Exp;
branches;
next	1.9;
commitid	HAZfQz431RuGJ9EZ;

1.9
date	2011.05.30.17.14.35;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.28.21.28.22;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.22.17.14.34;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.20.11.34.26;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.19.04.14.20;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.18.20.55.52;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.11.14.22.04.02;	author d;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.20.08.48;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.08.14.06.19.10;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.14.06.19.10;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove a useless macro

ok nicm@@
@
text
@/*	$OpenBSD: edit.h,v 1.10 2015/09/26 23:49:37 nicm Exp $	*/

/* NAME:
 *      edit.h - globals for edit modes
 *
 * DESCRIPTION:
 *      This header defines various global edit objects.
 *
 * SEE ALSO:
 *
 *
 * RCSid:
 *      $From: edit.h,v 1.2 1994/05/19 18:32:40 michael Exp michael $
 *
 */

#define	BEL		0x07

/* tty driver characters we are interested in */
typedef struct {
	int erase;
	int kill;
	int werase;
	int intr;
	int quit;
	int eof;
} X_chars;

extern X_chars edchars;

/* x_cf_glob() flags */
#define XCF_COMMAND	BIT(0)	/* Do command completion */
#define XCF_FILE	BIT(1)	/* Do file completion */
#define XCF_FULLPATH	BIT(2)	/* command completion: store full path */
#define XCF_COMMAND_FILE (XCF_COMMAND|XCF_FILE)

/* edit.c */
int	x_getc(void);
void	x_flush(void);
void	x_putc(int);
void	x_puts(const char *);
bool	x_mode(bool);
int	promptlen(const char *, const char **);
int	x_do_comment(char *, int, int *);
void	x_print_expansions(int, char *const *, int);
int	x_cf_glob(int, const char *, int, int, int *, int *, char ***, int *);
int	x_longest_prefix(int , char *const *);
int	x_basename(const char *, const char *);
void	x_free_words(int, char **);
int	x_escape(const char *, size_t, int (*)(const char *, size_t));
/* emacs.c */
int	x_emacs(char *, size_t);
void	x_init_emacs(void);
void	x_emacs_keys(X_chars *);
/* vi.c */
int	x_vi(char *, size_t);
@


1.10
log
@Remove EXTERN from edit.[ch], from Michael McConville.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.9 2011/05/30 17:14:35 martynas Exp $	*/
a56 7


#ifdef DEBUG
# define D__(x) x
#else
# define D__(x)
#endif
@


1.9
log
@typo;  Alexander Polakov
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.8 2005/03/28 21:28:22 deraadt Exp $	*/
a16 9
/* some useful #defines */
#ifdef EXTERN
# define I__(i) = i
#else
# define I__(i)
# define EXTERN extern
# define EXTERN_DEFINED
#endif

d29 1
a29 1
EXTERN X_chars edchars;
a63 14

/* This lot goes at the END */
/* be sure not to interfere with anyone else's idea about EXTERN */
#ifdef EXTERN_DEFINED
# undef EXTERN_DEFINED
# undef EXTERN
#endif
#undef I__
/*
 * Local Variables:
 * version-control:t
 * comment-column:40
 * End:
 */
@


1.8
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.7 2004/12/22 17:14:34 millert Exp $	*/
d40 1
a40 1
/* x_fc_glob() flags */
@


1.7
log
@Use stdbool.h instead of rolling our own bools.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.6 2004/12/20 11:34:26 otto Exp $	*/
d47 6
a52 6
int 	x_getc(void);
void 	x_flush(void);
void 	x_putc(int);
void 	x_puts(const char *);
bool 	x_mode(bool);
int 	promptlen(const char *, const char **);
d61 2
a62 2
int 	x_emacs(char *, size_t);
void 	x_init_emacs(void);
d65 1
a65 1
int 	x_vi(char *, size_t);
@


1.6
log
@Ansification plus some minor knf. No binary change on i386 and
sparc64, binary change in lex.o on macppc due to introduction of
dopprompt() prototype. ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.5 2004/12/19 04:14:20 deraadt Exp $	*/
d51 1
a51 1
bool_t 	x_mode(bool_t);
@


1.5
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.4 2004/12/18 20:55:52 millert Exp $	*/
d49 11
a59 12
void 	x_putc(int c);
void 	x_puts(const char *s);
bool_t 	x_mode(bool_t onoff);
int 	promptlen(const char *cp, const char **spp);
int	x_do_comment(char *buf, int bsize, int *lenp);
void	x_print_expansions(int nwords, char *const *words, int is_command);
int	x_cf_glob(int flags, const char *buf, int buflen, int pos, int *startp,
			  int *endp, char ***wordsp, int *is_commandp);
int	x_longest_prefix(int nwords, char *const *words);
int	x_basename(const char *s, const char *se);
void	x_free_words(int nwords, char **words);
int	x_escape(const char *, size_t, int (*)(const char *s, size_t len));
d61 1
a61 1
int 	x_emacs(char *buf, size_t len);
d63 1
a63 1
void	x_emacs_keys(X_chars *ec);
d65 1
a65 1
int 	x_vi(char *buf, size_t len);
@


1.4
log
@Remove unused OS dependent #ifdef blocks, #defines and macro abstraction.
First step in making the ksh code easier to read.  From Matthias Kilian
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.3 1999/11/14 22:04:02 d Exp $	*/
d10 1
a10 1
 *      
@


1.3
log
@quote metachars when completing filenames from jdolecek@@netbsd. ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.2 1996/08/19 20:08:48 downsj Exp $	*/
d47 14
a60 14
int 	x_getc		ARGS((void));
void 	x_flush		ARGS((void));
void 	x_putc		ARGS((int c));
void 	x_puts		ARGS((const char *s));
bool_t 	x_mode		ARGS((bool_t onoff));
int 	promptlen	ARGS((const char *cp, const char **spp));
int	x_do_comment	ARGS((char *buf, int bsize, int *lenp));
void	x_print_expansions ARGS((int nwords, char *const *words, int is_command));
int	x_cf_glob ARGS((int flags, const char *buf, int buflen, int pos, int *startp,
			  int *endp, char ***wordsp, int *is_commandp));
int	x_longest_prefix ARGS((int nwords, char *const *words));
int	x_basename ARGS((const char *s, const char *se));
void	x_free_words ARGS((int nwords, char **words));
int	x_escape ARGS((const char *, size_t, int (*)(const char *s, size_t len)));
d62 3
a64 3
int 	x_emacs		ARGS((char *buf, size_t len));
void 	x_init_emacs	ARGS((void));
void	x_emacs_keys	ARGS((X_chars *ec));
d66 1
a66 1
int 	x_vi		ARGS((char *buf, size_t len));
@


1.2
log
@update to pdksh-5.2.8
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.h,v 1.1.1.1 1996/08/14 06:19:10 downsj Exp $	*/
d60 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 1
int	x_complete_word ARGS((const char *str, int slen, int is_command, int *multiple, char **ret));
a54 1
int	x_locate_word ARGS((const char *buf, int buflen, int pos, int *startp, int *is_command));
a56 2
int	x_file_glob ARGS((int flags, const char *str, int slen, char ***wordsp));
int	x_command_glob ARGS((int flags, const char *str, int slen, char ***wordsp));
@


1.1.1.1
log
@Import pdksh 5.2.7.
@
text
@@
