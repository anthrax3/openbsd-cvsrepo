head	1.143;
access;
symbols
	OPENBSD_6_2:1.143.0.4
	OPENBSD_6_2_BASE:1.143
	OPENBSD_6_1:1.141.0.4
	OPENBSD_6_1_BASE:1.141
	OPENBSD_6_0:1.134.0.2
	OPENBSD_6_0_BASE:1.134
	OPENBSD_5_9:1.130.0.2
	OPENBSD_5_9_BASE:1.130
	OPENBSD_5_8:1.128.0.4
	OPENBSD_5_8_BASE:1.128
	OPENBSD_5_7:1.100.0.2
	OPENBSD_5_7_BASE:1.100
	OPENBSD_5_6:1.96.0.6
	OPENBSD_5_6_BASE:1.96
	OPENBSD_5_5:1.96.0.4
	OPENBSD_5_5_BASE:1.96
	OPENBSD_5_4:1.94.0.2
	OPENBSD_5_4_BASE:1.94
	OPENBSD_5_3:1.93.0.2
	OPENBSD_5_3_BASE:1.93
	OPENBSD_5_2:1.92.0.2
	OPENBSD_5_2_BASE:1.92
	OPENBSD_5_1_BASE:1.91
	OPENBSD_5_1:1.91.0.2
	OPENBSD_5_0:1.90.0.2
	OPENBSD_5_0_BASE:1.90
	OPENBSD_4_9:1.89.0.2
	OPENBSD_4_9_BASE:1.89
	OPENBSD_4_8:1.87.0.2
	OPENBSD_4_8_BASE:1.87
	OPENBSD_4_7:1.83.0.2
	OPENBSD_4_7_BASE:1.83
	OPENBSD_4_6:1.82.0.4
	OPENBSD_4_6_BASE:1.82
	OPENBSD_4_5:1.79.0.2
	OPENBSD_4_5_BASE:1.79
	OPENBSD_4_4:1.76.0.2
	OPENBSD_4_4_BASE:1.76
	OPENBSD_4_3:1.75.0.4
	OPENBSD_4_3_BASE:1.75
	OPENBSD_4_2:1.75.0.2
	OPENBSD_4_2_BASE:1.75
	OPENBSD_4_1:1.73.0.4
	OPENBSD_4_1_BASE:1.73
	OPENBSD_4_0:1.73.0.2
	OPENBSD_4_0_BASE:1.73
	OPENBSD_3_9:1.71.0.2
	OPENBSD_3_9_BASE:1.71
	OPENBSD_3_8:1.68.0.2
	OPENBSD_3_8_BASE:1.68
	OPENBSD_3_7:1.65.0.2
	OPENBSD_3_7_BASE:1.65;
locks; strict;
comment	@# @;


1.143
date	2017.06.01.20.37.38;	author tb;	state Exp;
branches;
next	1.142;
commitid	DAZ5SlrpsMmO6Oh2;

1.142
date	2017.05.26.11.45.57;	author jmc;	state Exp;
branches;
next	1.141;
commitid	z6t8nMFJVL1Hihsz;

1.141
date	2017.03.16.20.06.37;	author jmc;	state Exp;
branches;
next	1.140;
commitid	DtdpzLqiIzTSd1Vu;

1.140
date	2017.03.16.19.59.15;	author jmc;	state Exp;
branches;
next	1.139;
commitid	rsL0ENnkN9UPD83O;

1.139
date	2017.03.16.19.15.19;	author jmc;	state Exp;
branches;
next	1.138;
commitid	AkJJu3VEqpVd6WsP;

1.138
date	2016.11.14.09.21.35;	author tb;	state Exp;
branches;
next	1.137;
commitid	GjwDdVnOmyJL75jy;

1.137
date	2016.11.12.22.37.41;	author tb;	state Exp;
branches;
next	1.136;
commitid	YCZscajFEv5zXNj0;

1.136
date	2016.08.12.06.16.19;	author jmc;	state Exp;
branches;
next	1.135;
commitid	v03rYRuC87j6P9OQ;

1.135
date	2016.07.28.16.36.02;	author jmc;	state Exp;
branches;
next	1.134;
commitid	oSm8ZVM7W71wvsfj;

1.134
date	2016.07.18.18.24.21;	author jmc;	state Exp;
branches;
next	1.133;
commitid	ZiAXh597XHyYSu1R;

1.133
date	2016.05.04.08.31.00;	author schwarze;	state Exp;
branches;
next	1.132;
commitid	bW8LBnALMtdRNpXK;

1.132
date	2016.05.04.06.20.42;	author jmc;	state Exp;
branches;
next	1.131;
commitid	SqEQ3BduX7X1V751;

1.131
date	2016.03.21.13.35.00;	author tb;	state Exp;
branches;
next	1.130;
commitid	FT9Onh1aajCRmf70;

1.130
date	2015.10.12.12.34.42;	author jmc;	state Exp;
branches;
next	1.129;
commitid	3A1FzOj0WQ6T8ntC;

1.129
date	2015.09.14.20.06.58;	author schwarze;	state Exp;
branches;
next	1.128;
commitid	r87YNrjEWwl7OkJ0;

1.128
date	2015.05.04.19.34.13;	author jmc;	state Exp;
branches;
next	1.127;
commitid	r9I8yRKhUWzqlqfc;

1.127
date	2015.04.30.20.19.04;	author jmc;	state Exp;
branches;
next	1.126;
commitid	jikjahPwPA8yqFtG;

1.126
date	2015.03.31.21.23.34;	author jmc;	state Exp;
branches;
next	1.125;
commitid	XlsNtgYNhy6xix2g;

1.125
date	2015.03.30.19.17.06;	author jmc;	state Exp;
branches;
next	1.124;
commitid	WdyaZhs5Zfnfsa1D;

1.124
date	2015.03.27.14.22.59;	author jmc;	state Exp;
branches;
next	1.123;
commitid	nC7hEzt1QA9RScU9;

1.123
date	2015.03.26.20.10.22;	author jmc;	state Exp;
branches;
next	1.122;
commitid	ky425fg5SNEC3a4h;

1.122
date	2015.03.26.20.08.58;	author jmc;	state Exp;
branches;
next	1.121;
commitid	879LcGlQtWvyMEiE;

1.121
date	2015.03.26.10.51.15;	author jmc;	state Exp;
branches;
next	1.120;
commitid	VsxzUcpyN1NwQb6T;

1.120
date	2015.03.26.10.36.59;	author jmc;	state Exp;
branches;
next	1.119;
commitid	6zANhq1ze2BCjbMU;

1.119
date	2015.03.26.09.59.23;	author jmc;	state Exp;
branches;
next	1.118;
commitid	LFOs1rgVWEzNEnA4;

1.118
date	2015.03.19.22.38.28;	author zhuk;	state Exp;
branches;
next	1.117;
commitid	4XD0CZK42VolnqCj;

1.117
date	2015.03.19.22.34.59;	author zhuk;	state Exp;
branches;
next	1.116;
commitid	Hd6OkX9YZAD1ng1p;

1.116
date	2015.03.18.22.18.19;	author jmc;	state Exp;
branches;
next	1.115;
commitid	auC6dUq814bpVmvX;

1.115
date	2015.03.18.22.11.21;	author jmc;	state Exp;
branches;
next	1.114;
commitid	yG98LGmf9B0apI9I;

1.114
date	2015.03.18.22.09.22;	author jmc;	state Exp;
branches;
next	1.113;
commitid	T3X1Mo7FjEqRmeZA;

1.113
date	2015.03.18.16.20.05;	author jmc;	state Exp;
branches;
next	1.112;
commitid	jRR2cxUJ9yOZPrzW;

1.112
date	2015.03.17.14.30.35;	author jmc;	state Exp;
branches;
next	1.111;
commitid	vCWJAUtCSeiT5PiK;

1.111
date	2015.03.17.10.01.16;	author bentley;	state Exp;
branches;
next	1.110;
commitid	cmnuYFtcTjOMgS8n;

1.110
date	2015.03.17.07.02.48;	author jmc;	state Exp;
branches;
next	1.109;
commitid	9SQ16IqRkVA2osQO;

1.109
date	2015.03.17.06.59.48;	author jmc;	state Exp;
branches;
next	1.108;
commitid	VMjjEpnhq0sA5cHR;

1.108
date	2015.03.16.13.18.20;	author jmc;	state Exp;
branches;
next	1.107;
commitid	s0lVtszXEFfSKNl1;

1.107
date	2015.03.15.23.09.10;	author jmc;	state Exp;
branches;
next	1.106;
commitid	M1rCMmSRzk6b1vya;

1.106
date	2015.03.15.23.03.26;	author jmc;	state Exp;
branches;
next	1.105;
commitid	SYO1dZvWEhmXo913;

1.105
date	2015.03.15.15.54.35;	author jmc;	state Exp;
branches;
next	1.104;
commitid	IFkUy8xRiwwVlm0u;

1.104
date	2015.03.15.11.45.07;	author jmc;	state Exp;
branches;
next	1.103;
commitid	6ULUnAaJXbTgfLk0;

1.103
date	2015.03.15.11.15.55;	author jmc;	state Exp;
branches;
next	1.102;
commitid	8rHl6zNnM6IRVzHn;

1.102
date	2015.03.14.18.54.50;	author jmc;	state Exp;
branches;
next	1.101;
commitid	ux32vaEESbOQbqIN;

1.101
date	2015.03.14.08.13.52;	author jmc;	state Exp;
branches;
next	1.100;
commitid	jBJapUIzDyWwyhJ2;

1.100
date	2015.01.16.15.32.32;	author schwarze;	state Exp;
branches;
next	1.99;
commitid	M7wtkv0ddhakV1aj;

1.99
date	2014.12.09.15.37.13;	author schwarze;	state Exp;
branches;
next	1.98;
commitid	tNzoEq4pb5PMsxy6;

1.98
date	2014.12.09.14.39.37;	author jmc;	state Exp;
branches;
next	1.97;
commitid	TCQvmwwDbfRJCZSU;

1.97
date	2014.08.17.07.15.41;	author jmc;	state Exp;
branches;
next	1.96;
commitid	jatybjiXk34udFsw;

1.96
date	2014.02.12.16.28.13;	author schwarze;	state Exp;
branches;
next	1.95;

1.95
date	2014.01.28.14.16.59;	author jmc;	state Exp;
branches;
next	1.94;

1.94
date	2013.06.13.19.43.09;	author millert;	state Exp;
branches;
next	1.93;

1.93
date	2013.01.17.21.20.25;	author jmc;	state Exp;
branches;
next	1.92;

1.92
date	2012.06.19.16.41.00;	author jmc;	state Exp;
branches;
next	1.91;

1.91
date	2011.09.03.22.59.08;	author jmc;	state Exp;
branches;
next	1.90;

1.90
date	2011.04.23.10.14.59;	author sobrado;	state Exp;
branches;
next	1.89;

1.89
date	2010.09.20.07.41.17;	author jmc;	state Exp;
branches;
next	1.88;

1.88
date	2010.09.18.19.25.05;	author jmc;	state Exp;
branches;
next	1.87;

1.87
date	2010.07.15.20.04.35;	author schwarze;	state Exp;
branches;
next	1.86;

1.86
date	2010.07.12.16.26.45;	author jmc;	state Exp;
branches;
next	1.85;

1.85
date	2010.05.10.21.04.54;	author jmc;	state Exp;
branches;
next	1.84;

1.84
date	2010.05.10.18.28.21;	author kili;	state Exp;
branches;
next	1.83;

1.83
date	2010.02.25.13.45.54;	author schwarze;	state Exp;
branches;
next	1.82;

1.82
date	2009.03.06.12.28.36;	author jmc;	state Exp;
branches;
next	1.81;

1.81
date	2009.03.05.15.13.30;	author millert;	state Exp;
branches;
next	1.80;

1.80
date	2009.03.03.20.01.01;	author millert;	state Exp;
branches;
next	1.79;

1.79
date	2009.02.07.23.15.28;	author jmc;	state Exp;
branches;
next	1.78;

1.78
date	2009.02.07.07.24.37;	author guenther;	state Exp;
branches;
next	1.77;

1.77
date	2009.01.29.23.27.26;	author jaredy;	state Exp;
branches;
next	1.76;

1.76
date	2008.03.21.12.51.19;	author millert;	state Exp;
branches;
next	1.75;

1.75
date	2007.05.31.20.47.44;	author otto;	state Exp;
branches;
next	1.74;

1.74
date	2007.05.31.19.19.14;	author jmc;	state Exp;
branches;
next	1.73;

1.73
date	2006.07.26.10.13.25;	author jmc;	state Exp;
branches;
next	1.72;

1.72
date	2006.03.07.09.31.01;	author jmc;	state Exp;
branches;
next	1.71;

1.71
date	2005.10.07.09.17.38;	author jmc;	state Exp;
branches;
next	1.70;

1.70
date	2005.10.06.06.39.36;	author otto;	state Exp;
branches;
next	1.69;

1.69
date	2005.09.07.07.38.51;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2005.08.21.17.40.42;	author millert;	state Exp;
branches;
next	1.67;

1.67
date	2005.06.01.03.32.05;	author jaredy;	state Exp;
branches;
next	1.66;

1.66
date	2005.05.12.09.18.24;	author jmc;	state Exp;
branches;
next	1.65;

1.65
date	2005.02.18.09.01.49;	author jmc;	state Exp;
branches;
next	1.64;

1.64
date	2005.02.08.17.39.32;	author jmc;	state Exp;
branches;
next	1.63;

1.63
date	2005.02.08.17.28.52;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2005.02.05.12.36.21;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2005.02.02.07.53.01;	author otto;	state Exp;
branches;
next	1.60;

1.60
date	2005.01.21.15.15.55;	author otto;	state Exp;
branches;
next	1.59;

1.59
date	2005.01.17.09.59.02;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2005.01.10.11.06.50;	author jmc;	state Exp;
branches;
next	1.57;

1.57
date	2004.12.22.18.58.44;	author millert;	state Exp;
branches;
next	1.56;

1.56
date	2004.12.22.18.48.56;	author millert;	state Exp;
branches;
next	1.55;

1.55
date	2004.12.12.17.37.45;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2004.12.12.06.53.13;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2004.12.10.01.56.56;	author jaredy;	state Exp;
branches;
next	1.52;

1.52
date	2004.11.09.21.56.54;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2004.11.05.14.56.31;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2004.10.28.04.55.52;	author jaredy;	state Exp;
branches;
next	1.49;

1.49
date	2004.08.07.16.46.58;	author millert;	state Exp;
branches;
next	1.48;

1.48
date	2004.08.04.20.01.44;	author jaredy;	state Exp;
branches;
next	1.47;

1.47
date	2004.03.15.08.56.56;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2004.03.15.08.52.12;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2004.02.19.22.20.05;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2004.01.23.23.08.45;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2004.01.15.22.08.45;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2003.12.27.20.52.22;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2003.12.27.20.35.12;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2003.12.22.11.54.02;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2003.12.12.22.35.08;	author naddy;	state Exp;
branches;
next	1.38;

1.38
date	2003.10.28.15.20.32;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2003.10.22.19.57.32;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2003.09.04.14.21.43;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.09.02.18.09.43;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2003.07.07.14.11.58;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2003.04.28.06.27.36;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2003.03.14.11.05.55;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2002.09.18.07.33.47;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2002.05.04.22.21.21;	author krw;	state Exp;
branches;
next	1.28;

1.28
date	2001.09.02.14.05.58;	author aaron;	state Exp;
branches;
next	1.27;

1.27
date	2001.08.25.21.26.29;	author heko;	state Exp;
branches;
next	1.26;

1.26
date	2001.08.23.05.21.51;	author pvalchev;	state Exp;
branches;
next	1.25;

1.25
date	2001.08.03.19.19.01;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	2001.07.31.10.35.10;	author hugh;	state Exp;
branches;
next	1.23;

1.23
date	2001.06.23.14.42.13;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2001.05.28.15.36.08;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	2001.04.12.02.51.10;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	2000.10.19.18.29.28;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2000.03.21.14.06.55;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2000.03.17.18.48.43;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.17.18.15.16;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.07.05.19.50.53;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.07.01.17.48.29;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.06.15.01.18.35;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	99.06.14.03.13.59;	author pjanzen;	state Exp;
branches;
next	1.12;

1.12
date	99.06.03.09.50.32;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.05.30.17.44.56;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.05.28.12.23.06;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.03.02.23.46.54;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.01.19.20.41.55;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.10.29.04.09.21;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.07.24.20.50.04;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.06.25.19.02.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.03.18.03.04.56;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	97.08.05.21.49.56;	author grr;	state Exp;
branches;
next	1.2;

1.2
date	97.01.02.17.41.47;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.11.30.23.54.37;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.143
log
@The fact is simple: Subshells have the same PPID as the current shell.
What is not so simple is squinting hard enough to conclude that POSIX
actually says that. I'm still not sure how to do that.
Problem with the shell manual pointed out by "Choose a display name".

ok otto, halex, jmc
@
text
@.\"	$OpenBSD: sh.1,v 1.142 2017/05/26 11:45:57 jmc Exp $
.\"
.\" Copyright (c) 2015 Jason McIntyre <jmc@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 26 2017 $
.Dt SH 1
.Os
.Sh NAME
.Nm sh
.Nd command language interpreter
.Sh SYNOPSIS
.Nm sh
.Op Fl abCefhimnuvx
.Op Fl o Ar option
.Op Fl c Ar string | Fl s | Ar file
.Sh DESCRIPTION
The
.Nm
utility is a
.Em command language interpreter :
it reads one or more commands,
either from the command line or from a file
(a shell script),
and then sets about executing those commands.
Thus it is the
main interface between the user and the operating system.
.Pp
This version of
.Nm
is actually
.Nm ksh
in disguise.
As such, it also supports the features described in
.Xr ksh 1 .
This manual page describes only the parts
relevant to a POSIX compliant
.Nm .
If portability is a concern,
use only those features described in this page.
.Pp
The shell receives input as follows:
.Pp
.Bl -tag -width "-c stringXXX" -offset indent -compact
.It Fl c Ar string
Read commands from
.Ar string .
.It Fl s
Read commands from standard input
(the default).
.It Ar file
Read commands from
.Ar file .
.El
.Pp
The options below can be specified with a
.Sq Cm +
rather than
.Sq Fl ,
meaning to unset the option.
They can also be set or unset using the
.Ic set
command.
Some options have equivalent long names,
indicated at the start of the description,
which can be used with the
.Fl o
option.
.Bl -tag -width Ds
.It Fl a
Allexport.
Variable assignments are exported to all child processes
of the running shell.
If the assignment precedes a command it does not persist
after that command has finished running,
unless the command is a special builtin
or one of the builtins
.Ic getopts
or
.Ic read
makes the assignment.
.It Fl b
Notify.
The user is given notice asynchronously when background jobs complete.
.It Fl C
Noclobber.
Do not permit the redirection operator
.Pq Sq >
to clobber (overwrite) existing files.
.It Fl e
Errexit.
Exit the shell immediately should an error occur or a command fail.
For pipelines and
.Cm &&
and
.Cm ||
constructs, only exit if the last component fails.
Errexit is ignored for
.Ic while ,
.Ic until ,
.Ic if ,
and
.Ic elif
lists and pipelines beginning
.Sq !\& .
.It Fl f
Noglob.
Do not expand file name patterns.
.It Fl h
When a utility is first executed,
hash (record) its location
so that future invocations do not need to search for it.
.It Fl i
Enable behaviour convenient for an interactive shell.
This option is set by default
if the session is attached to a terminal.
.It Fl m
Monitor.
Fully enable job control:
enable the
.Ic bg
and
.Ic fg
builtins;
report completion status when jobs finish;
report when a foreground process stops;
and report when a job changes status.
The processes of a job share their own process group.
This option is set by default for interactive shells.
.It Fl n
Noexec.
Read commands but do not execute them \(en
useful for checking syntax errors in scripts.
This option is ignored for interactive shells.
.It Fl o Ar option
Specify an option by its long name.
Those described below have no equivalent option letter:
.Pp
.Bl -tag -width "ignoreeof" -offset 3n -compact
.It ignoreeof
Ignore an end-of-file
.Pq Sq ^D .
EOF normally logs a user out,
so setting this can prevent accidental logouts
(the user will need to explicitly use the
.Ic exit
command).
.It nolog
Do not enter function definitions into command history.
.It posix
Enable POSIX mode
(see
.Sx STANDARDS ) .
.It vi
Enable
.Xr vi 1
command line editing.
.El
.It Fl u
Nounset.
If a command references an unset parameter,
write an error to standard output instead of executing the command.
This option is ignored for the special parameters
.Sq *
and
.Sq @@ .
If the shell is not interactive,
immediately exit.
.It Fl v
Verbose.
Write input to standard error after reading it.
.It Fl x
Xtrace.
Write a trace for each command to standard error after expanding it,
and before executing it.
.El
.Sh BUILTINS
The shell has a number of
.Em built-ins
available:
utilities that are included as part of the shell.
The shell does not need to search for them
and can execute them directly.
.Pp
A number of built-ins are special in that
a syntax error can cause a running shell to abort,
and, after the built-in completes,
variable assignments remain in the current environment.
The following built-ins are special:
.Ic .\& , :\& , break , continue ,
.Ic eval , exec , exit , export ,
.Ic readonly , return , set , shift ,
.Ic times , trap ,
and
.Ic unset .
.Pp
The built-ins available to
.Nm
are listed below.
Unless otherwise indicated,
they exit 0 on success,
and >0 if an error occurs.
.Bl -tag -width 2n
.It Ic .\& Ar file
Execute the commands in
.Ar file ,
in the current environment.
The actual file need not be executable,
and its location is determined by searching
.Ev PATH
if there are no slashes in the filename.
The exit status is that of the last command returned,
or zero if no commands were executed.
If no readable file can be found,
a non-interactive shell will abort;
an interactive shell writes an error message
and returns a non-zero exit status.
.It Ic :\& Op Ar arg ...
The
.Ic :\&
command does nothing \(en
it is a placeholder for when a command is required.
Its exit status is always zero.
.It Ic alias Op Ar name Ns Oo = Ns Ar value Oc Ar ...
Define an alias
.Ar name
to
.Ar value ;
when the shell encounters a command name that is an alias,
its value is substituted.
If
.Ar value
ends in a blank,
the next word is checked for alias substitution too.
If only a
.Ar name
is specified,
display the value of that alias;
if no arguments are given,
list all aliases and their values.
Aliases are visible in the current environment and that of subshells,
but not by the parent process of the current shell
or by utilities invoked by it.
.It Ic bg Op Ar id ...
Select a job by
.Ar id
(see the
.Ic jobs
command, below)
to run in the background.
The default job is
.Qq %+ .
.It Ic break Op Ar n
Exit from the innermost
.Ic for , while ,
or
.Ic until
loop,
or from loop level
.Ar n .
.It Ic cd Oo Fl L | P Oc Op Ar dir
Change the current working directory to
.Ar dir ,
or
.Ev $HOME
by default.
If
.Ar dir
is set to
.Sq - ,
change to the previous working directory and
print the (now current) working directory.
If
.Ar dir
does not begin with a slash or dot,
.Ev CDPATH
is searched for the directory.
.Pp
The options to the
.Ic cd
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl L
Do not resolve symbolic links before processing
.Qq ..
components.
.It Fl P
Resolve symbolic links before processing
.Qq ..
components.
.El
.It Ic command Oo Fl p | V | v Oc Ar command Op Ar arg ...
Invoke
.Ar command
(and any optional arguments),
overriding any functions with the same name,
and without any of the properties that special built-ins have.
.Pp
The options to
.Ic command
are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl p
Use a default value for
.Ev PATH
to search for the command.
.It Fl V
Do not invoke
.Ar command ,
but identify how the shell will interpret it
(such as a function or special built-in).
.It Fl v
Do not invoke
.Ar command ,
but identify the pathname the shell will use to run it.
For aliases, a command to define that alias is printed.
For shell reserved words, shell functions, and built-in utilities,
just the name is printed.
.El
.Pp
The exit status is that of
.Ar command ,
or 126 if
.Ar command
could not be invoked,
or 127 if an error occurred in
.Ic command
itself or
.Ar command
could not be found.
If the options
.Fl V
or
.Fl v
are given,
the exit status is 0 on success,
or >0 if an error occurs.
.It Ic continue Op Ar n
Go directly to the next iteration of the innermost
.Ic for , while ,
or
.Ic until
loop,
or from loop level
.Ar n .
.It Ic eval Op Ar arg ...
Concatenate the arguments given
and interpret them as a command.
The exit status is that of the resulting command,
zero if no arguments are given,
or >0 if the resulting command could not be correctly parsed.
.It Ic exec Op Ar command Op Ar arg ...
Replace the shell with
.Ar command
(and any optional arguments),
without creating a new process.
The exit status is that of
.Ar command ,
or 126 if
.Ar command
could not be invoked,
or 127 if
.Ar command
could not be found.
If no command is given but a redirection happens,
the exit status is 1\(en125;
otherwise
.Ic exec
returns 0.
.It Ic exit Op Ar n
Exit the shell with exit status
.Ar n ,
or that of the last command executed.
.It Ic export Oo Fl p Oc Ar name Ns Oo = Ns Ar value Oc Ar ...
Make the variable
.Ar name
visible to subsequently run commands,
optionally setting it to
.Ar value .
.Pp
The options to the
.Ic export
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl p
List all exported variables in a manner that can be reinput to the shell.
.El
.It Ic false
Return a false (non-zero) value.
.It Xo
.Ic fc
.Op Fl lnr
.Op Fl e Ar editor
.Op Fl s Op Ar old Ns = Ns Ar new
.Op Ar first Op Ar last
.Xc
Edit commands from command history using
.Xr ed 1 .
After editing,
the new commands are executed by the shell.
.Pp
The options to the
.Ic fc
command are as follows:
.Pp
.Bl -tag -width "-s [old=new]" -offset 3n -compact
.It Fl e Ar editor
Edit commands using
.Ar editor .
See also
.Ev FCEDIT .
.It Fl l
List the command history.
.It Fl ln
List the command history without command numbers.
.It Fl r
Edit or list
.Pq Fl lr
commands in reverse order.
.It Fl s Op Ar old Ns = Ns Ar new
Reexecute a single command
without invoking an editor.
The first occurrence of the string
.Ar old
in the command is replaced by
.Ar new .
.El
.Pp
A range of commands can be specified,
.Ar first
to
.Ar last .
Their format can be numerical,
to select by command number;
.Sq - Ns Ar n ,
to select a command executed that number of commands previous;
or a string which matches the beginning of the command.
If no range is given,
the last command in command history is edited,
or reexecuted
.Pq Fl s ,
or the previous 16 commands in command history are listed
.Pq Fl l .
If
.Ar first
is newer than
.Ar last ,
commands are processed in reverse order
(as if
.Fl r
had been given);
if either are out of range,
the oldest or newest values are used.
.It Ic fg Op Ar id ...
Select a job by
.Ar id
(see the
.Ic jobs
command, below)
to run in the foreground.
The default job is
.Qq %+ .
.It Ic getopts Ar optstring name Op Ar arg ...
When invoked,
.Ic getopts
processes the positional parameters
(or any
.Ar arg
passed to it)
as a list of options and option arguments.
.Ic getopts
sets the variable
.Ar name
to the option found,
.Ev OPTARG
to its argument,
and
.Ev OPTIND
to the index of the next variable to be processed.
.Pp
The string
.Ar optstring
contains a list of acceptable options;
a colon following an option indicates it may take an argument.
If an option not recognised by
.Ar optstring
is found,
.Ar name
is set to
.Sq ?\& ;
if the first character of
.Ar optstring
is a colon,
.Ev OPTARG
is set to the unsupported option,
otherwise an error message is displayed.
.It Ic hash Op Fl r | Ar utility
Add
.Ar utility
to the hash list
or remove
.Pq Fl r
all utilities from the hash list.
Without arguments, show the utilities currently hashed.
.It Ic jobs Oo Fl l | p Oc Op Ar id ...
Display the status of all jobs in the current shell environment,
or those selected by
.Ar id .
.Pp
The options to the
.Ic jobs
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl l
Additionally display the process group ID.
.It Fl p
Display only the process group ID.
.El
.Pp
Job
.Ar id
can be selected in one of the following ways:
.Pp
.Bl -tag -width "%?string" -offset 3n -compact
.It %%
The current job.
.It %+
The current job.
.It %-
The previous job.
.It % Ns Ar n
Job number
.Ar n .
.It % Ns Ar string
Job with command matching
.Ar string .
.It %? Ns Ar string
Job with command containing
.Ar string .
.El
.It Xo
.Ic kill
.Op Fl l Op Ar signal
.Op Fl s Ar signal
.Oo Fl Ar signal Oc Ar pid ...
.Xc
Send a signal,
by default
.Dv SIGTERM ,
to the process with ID
.Ar pid .
.Pp
The options to the
.Ic kill
command are as follows:
.Pp
.Bl -tag -width "-l [signal]" -offset 3n -compact
.It Fl l Op Ar signal
List all supported signals,
or the signal name corresponding to
.Ar signal
number or the exit status of a command killed by a signal.
.It Fl s Ar signal
Send the process
.Ar signal
name.
.It Fl Ar signal
Send the process
.Ar signal
name or number.
.It Ar pid
A process ID,
process group ID,
or a job ID (see
.Ic jobs ,
above).
The process ID 0 signals all processes in the current process group.
.El
.Pp
The supported signal numbers are:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It " 0"
Do not signal a process,
but determine whether an ID exists.
.It " 1"
.Dv SIGHUP :
Terminal line hangup.
.It " 2"
.Dv SIGINT :
Interrupt a program.
.It " 3"
.Dv SIGQUIT :
Quit a program.
.It " 6"
.Dv SIGABRT :
Call
.Xr abort 3 .
.It " 9"
.Dv SIGKILL :
Kill a program.
Cannot be caught or ignored.
.It "14"
.Dv SIGALRM :
Real-time timer expired.
.It "15"
.Dv SIGTERM :
Software termination signal.
.El
.It Ic pwd Op Fl L | P
Print the current working directory.
.Pp
The options to the
.Ic pwd
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl L
Print the logical path to the current working directory
i.e. display symbolic links followed.
.It Fl P
Print the physical path to the current working directory
i.e. display symbolic links resolved.
.El
.Pp
If both options are given,
the last specified is used;
if none are given,
the default is
.Fl L .
.It Ic read Oo Fl r Oc Ar name ...
Read a line from standard input.
The line is split into fields,
with each field assigned to a variable,
.Ar name ,
in turn
(first field assigned to first variable, and so on).
If there are more fields than variables,
the last variable will contain all the remaining fields.
If there are more variables than fields,
the remaining variables are set to empty strings.
A backslash in the input line causes the shell to prompt for further input.
.Pp
The options to the
.Ic read
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl r
Ignore backslash sequences.
.El
.It Ic readonly Oo Fl p Oc Ar name Ns Op = Ns Ar value
Mark variable
.Ar name
as readonly,
and optionally set it to
.Ar value .
Readonly variables cannot be later assigned values or unset.
.Pp
The options to the
.Ic readonly
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl p
Display the names and values of all readonly variables
in a manner which can be reinput to the shell.
.El
.It Ic return Op Ar n
Exit the current function or
.Ic .\&
script with exit status
.Ar n ,
or that of the last command executed.
.It Xo
.Ic set
.Op Fl abCefhmnuvx
.Op Fl o Op Ar option
.Op Ar arg ...
.Xc
Set options and positional parameters.
Without options or arguments,
display the names and values of all shell variables.
.Pp
The options are described in the options description
at the beginning of this manual.
The sequence
.Qq set -o
displays the current option settings;
the sequence
.Qq set +o
displays,
in a format suitable to be reinput to the shell,
a command suitable to achieve the current option settings.
.Pp
Any arguments are assigned to the positional parameters,
with the special parameter
.Sq #
set to the number of positional parameters.
The sequence
.Qq set --
indicates an end to option processing
(i.e. only arguments follow);
.Qq set --
by itself unsets all positional parameters
and sets
.Sq #
to zero.
.It Ic shift Op Ar n
Shift the positional parameters
.Ar n
times
(by default once).
Parameter 1 takes the value of parameter
.Sq 1+ Ns Ar n ,
parameter 2 takes
.Sq 2+ Ns Ar n ,
and so on.
Parameters
.Sq #
to
.Sq Po #\(mi Ns Ar n Pc Ns +1
and downwards are unset and
.Sq #
is updated to the new number of positional parameters.
If
.Ar n
is 0,
no change occurs.
.It Ic times
Display accumulated process times for the shell (user and system)
and all child processes (user and system).
.It Ic trap Op Ar action signal ...
Perform
.Ar action
whenever
.Ar signal
is caught.
Without arguments,
display a list of all traps and actions,
in a format suitable to be reinput to the shell.
.Pp
If
.Ar action
is
.Sq -
or an integer,
reset
.Ar signal
to its default value;
if it is empty
.Pq Qq ,
ignore
.Ar signal .
If
.Ar signal
is
.Qq EXIT
or 0,
perform
.Ar action
when the shell exits;
otherwise
.Ar signal
should be a signal name
(without the SIG prefix)
or number.
.It Ic true
Return a true (zero) value.
.It Ic type Ar command ...
For each
.Ar command ,
show how the shell would interpret it.
.It Ic ulimit Op Fl f Ar n
Limit the maximum size of a file that can be created to
.Ar n
blocks.
Without arguments,
display the current file size limit.
.It Ic umask Oo Fl S Oc Op Ar mask
Set the file mode creation mask to
.Ar mask .
The creation mask determines the default permissions
a newly created file or directory will have.
If
.Ar mask
is not specified,
display the current creation mask.
.Pp
The options to the
.Ic umask
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl S
Display symbolic output.
.El
.Pp
See
.Xr chmod 1
for the format of
.Ar mask .
.It Ic unalias Oo Fl a Oc Ar name ...
Remove the alias definition of alias
.Ar name .
.Pp
The options to the
.Ic unalias
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl a
Remove all alias definitions.
.El
.It Ic unset Oo Fl fv Oc Ar name ...
Unset variable or function
.Ar name .
.Pp
The options to the
.Ic unset
command are as follows:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It Fl f
Treat
.Ar name
as a function.
.It Fl v
Treat
.Ar name
as a variable (the default).
.El
.It Ic wait Op Ar pid ...
Wait until all the processes specified by process or job ID
.Ar pid
have terminated.
If no
.Ar pid
is specified,
wait until all processes have terminated.
The exit status is 0 on success,
1\(en126 if an error occurs,
or 127 if
.Ar pid
was unknown.
.El
.Sh COMMAND HISTORY AND COMMAND LINE EDITING
When a shell is interactive,
it keeps a record of commands run in a
.Em command history ,
either internally in memory or in a file,
as determined by
.Dv HISTFILE .
The command line and all the commands in command history
can be edited using commands similar to those of
.Xr vi 1 .
.Pp
There are two modes,
.Em interactive
and
.Em command .
The shell starts in interactive mode.
In this mode text is entered normally.
A
.Aq newline
executes the current command line.
The command line, unless empty, is entered into command history.
The
.Aq ESC
key is used to enter command mode,
where commands similar to those used by
.Xr vi 1
are available.
A Ctrl-L sequence
.Pq ^L
can be used in this mode to
redraw the current command line.
.Pp
Where noted,
some commands may be preceded by a numerical
.Ar count ,
which causes the command to be repeated that number of times.
The term
.Em word
is used to denote a sequence of letters, digits, or underscores;
.Em bigword
denotes a sequence of whitespace delineated characters.
.Pp
The commands for command mode:
.Bl -tag -width "<newline>"
.It Ic =
Display the possible shell word expansion.
.It Ic \e
Perform pathname expansion on the current word,
matching the largest possible unique expansion,
then enter insert mode.
.It Ic *
Perform pathname expansion on the current word,
substituting every possible expansion,
then enter insert mode.
.It Ic @@ Ns Ar c
Perform the commands defined by the alias
.No _ Ns Ar c ,
where
.Ar c
is a single letter alphabetical character.
.It Oo Ar count Oc Ns Ic ~
Convert the character from lowercase to upper or vice versa.
.It Oo Ar count Oc Ns Ic .\&
Repeat the most recent non-motion command.
If no
.Ar count
is given, use that of the repeated command,
if any.
.It Oo Ar n Oc Ns Ic v
Use
.Xr vi 1
to edit command number
.Ar n
in command history,
or the current command if none given.
.It Xo
.Oo Ar count Oc Ns Ic l ,
.Oo Ar count Oc Ns Aq space
.Xc
Move right.
.It Oo Ar count Oc Ns Ic h
Move left.
.It Oo Ar count Oc Ns Ic w
Move to the start of the next word.
.It Oo Ar count Oc Ns Ic W
Move to the start of the next big word.
.It Oo Ar count Oc Ns Ic e
Move to the end of the current word,
or the end of the next word if the cursor is currently
at the end of a word.
.It Oo Ar count Oc Ns Ic E
Move to the end of the current bigword,
or the end of the next bigword if the cursor is currently
at the end of a bigword.
.It Oo Ar count Oc Ns Ic b
Move to the start of the current word,
or the start of the next word if the cursor is currently
at the start of a word.
.It Oo Ar count Oc Ns Ic B
Move to the start of the current bigword,
or the start of the next bigword if the cursor is currently
at the start of a bigword.
.It Ic ^
Move to the first non-blank character.
.It Ic $
Move to the end of the current line.
.It Ic 0
Move to the beginning of the current line.
.It Oo Ar count Oc Ns Ic |\&
Move to the beginning of the current line
or the character position specified by
.Ar count .
.It Oo Ar count Oc Ns Ic f Ns Ar c
Move to the next instance of the
character
.Ar c .
.It Oo Ar count Oc Ns Ic F Ns Ar c
Move to the last instance of the
character
.Ar c .
.It Oo Ar count Oc Ns Ic t Ns Ar c
Move to the character before the next instance of the
character
.Ar c .
.It Oo Ar count Oc Ns Ic T Ns Ar c
Move to the character after the last instance of the
character
.Ar c .
.It Oo Ar count Oc Ns Ic ;\&
Repeat the last
.Ic f , F , t ,
or
.Ic T
command.
Ignore any
.Ar count
specified with the last command.
.It Oo Ar count Oc Ns Ic ,\&
Repeat the last
.Ic f , F , t ,
or
.Ic T
command,
but in the opposite direction.
Ignore any
.Ar count
specified with the last command.
.It Ic a
Enter insert mode after the current cursor position.
.It Ic A
Enter insert mode after the end of the current line.
.It Ic i
Enter insert mode at the current cursor position.
.It Ic I
Enter insert mode at the beginning of the current line.
.It Ic R
Enter insert mode at the current cursor position,
replacing any characters thereafter.
.It Oo Ar count Oc Ns Ic c Ns Ar motion
Delete the characters between the cursor and the motion command specified,
then enter insert mode.
A special motion command,
.Ic c ,
may be used to delete the entire line.
The
.Ar count
argument is ignored for the commands
.Ic 0 , ^ , $ ,
and
.Ic c .
If the motion moves towards the beginning of the line
the character under the cursor is not deleted;
if it moves towards the end of the line
it is deleted.
.It Ic C
Delete the characters between the cursor and the line end,
then enter insert mode.
.It Ic S
Clear the entire line,
then enter insert mode.
.It Oo Ar count Oc Ns Ic r
Replace the character under the cursor with the next typed character.
With a
.Ar count ,
replace the current character
and the corresponding number of following characters.
.It Oo Ar count Oc Ns Ic _
After the cursor,
append a
.Aq space
and the
.Ar count Ns th
bigword (by default the last entered)
from the previous input line,
then enter insert mode.
.It Oo Ar count Oc Ns Ic x
Delete the character under the cursor,
placing it in the save buffer.
.It Oo Ar count Oc Ns Ic X
Delete the character before the cursor,
placing it in the save buffer.
.It Oo Ar count Oc Ns Ic d Ns Ar motion
Delete the characters between the cursor and the motion command specified,
placing them in the save buffer.
A special motion command,
.Ic d ,
may be used to delete the entire line.
If the motion moves towards the beginning of the line
the character under the cursor is not deleted.
.It Oo Ar count Oc Ns Ic D
Delete the characters between the cursor and the line end,
placing them in the save buffer.
.It Oo Ar count Oc Ns Ic y Ns Ar motion
Yank (copy) the characters between the cursor and the motion command specified,
placing them in the save buffer.
A special motion command,
.Ic y ,
may be used to yank the entire line.
If the motion moves towards the beginning of the line
the character under the cursor is not yanked.
.It Oo Ar count Oc Ns Ic Y
Yank (copy) the characters between the cursor and the line end,
placing them in the save buffer.
.It Oo Ar count Oc Ns Ic p
Paste the contents of the save buffer after the cursor.
.It Oo Ar count Oc Ns Ic P
Paste the contents of the save buffer before the cursor.
.It Oo Ar count Oc Ns Ic u
Undo the last change to the edit line.
.It Oo Ar count Oc Ns Ic U
Undo all changes to the edit line.
.It Xo
.Oo Ar count Oc Ns Ic k ,
.Oo Ar count Oc Ns Ic -\&
.Xc
Replace the current command line with the previous entry in history.
.It Xo
.Oo Ar count Oc Ns Ic j ,
.Oo Ar count Oc Ns Ic +\&
.Xc
Replace the current command line with the next entry in history.
.It Oo Ar n Oc Ns Ic G
Replace the current command line with command number
.Ar n
in command history,
or the oldest command if none given.
.It / Ns Ar pattern
Moving backwards through history,
replace the current command line with the first that matches
.Ar pattern .
A
.Sq ^
at the beginning of the pattern searches only for entries beginning with
.Ar pattern .
An empty pattern matches the last search.
.It ? Ns Ar pattern
As above,
but searching forwards.
.It Ic n
Repeat the most recent pattern search.
.It Ic N
Repeat the most recent pattern search,
but in the opposite direction.
.El
.Sh SHELL GRAMMAR
The shell reads its input as described above.
After that it follows a fairly simple chain of operations
to parse that input:
.Bl -dash
.It
The shell breaks the input into
.Em words
and
.Em operators .
Words are the command text the user wishes run;
operators are special characters which describe
how the shell should interact with the commands.
.It
The shell
.Em expands
the command text according to the rules of expansion.
.It
Words are subject to
.Em field splitting ,
where the command text is separated into commands
and arguments to commands.
.It
The shell performs any
.Em redirection .
.It
The shell runs the commands.
Argument names are assigned to
.Em positional parameters ,
with the command name itself assigned parameter 0.
.It
If the command is not being run in the background,
the shell waits for it to complete
and collects its exit status.
.El
.Ss Quoting
Some characters have special meaning to the shell and need
.Em quoting
if the user wants to indicate to the shell not to interpret them as such.
The following characters need quoting if their literal meaning is desired:
.Bd -literal -offset indent
| & ; < > ( ) $ \` \e " \(aq <space> <tab> <newline>
* ?  [ # ~ = %
.Ed
.Pp
A backslash
.Pq \e
can be used to quote any character except a newline.
If a newline follows a backslash the shell removes them both,
effectively making the following line part of the current one.
.Pp
A group of characters can be enclosed within single quotes
.Pq \(aq
to quote every character within the quotes.
.Pp
A group of characters can be enclosed within double quotes
.Pq \&"
to quote every character within the quotes
except a backquote
.Pq \`
or a dollar sign
.Pq $ ,
both of which retain their special meaning.
A backslash
.Pq \e
within double quotes retains its special meaning,
but only when followed by a backquote, dollar sign,
double quote, or another backslash.
An at sign
.Pq @@
within double quotes has a special meaning
(see
.Sx SPECIAL PARAMETERS ,
below).
.Pp
Similarly command words need to be quoted
if they are not to be interpreted as such.
.Ss Expansion
Shell
.Em variables
are arbitrary names assigned values using the
.Sq =
operator;
the values can be retrieved using the syntax
.No $ Ns Ar variable .
Shell
.Em parameters
are variable names,
numbers,
or any of the characters listed in
.Sx SPECIAL PARAMETERS .
.Pp
The shell is able to
.Em expand
certain elements of its syntax,
allowing for a more concise notation
and providing a convenience to the user.
.Pp
Firstly, tilde expansion occurs on words beginning with the
.Sq ~
character.
Any characters following the tilde,
up to the next colon, slash, or blank,
are taken as a login name
and substituted with that user's home directory,
as defined in
.Xr passwd 5 .
A tilde by itself is expanded to the contents of the variable
.Ev HOME .
This notation can be used in variable assignments,
in the assignment half,
immediately after the equals sign or a colon,
up to the next slash or colon, if any.
.Pp
.Dl PATH=~alice:~bob/jobs
.Pp
Parameter expansion happens after tildes have been expanded,
with the value of the parameter being substituted.
The basic format is:
.Pp
.D1 $ Ns Brq Ar parameter
.Pp
The braces are optional
except for positional parameters 10 and higher,
or where the parameter name is followed by other characters
that would prevent it from being expanded.
If parameter expansion occurs within double quotes,
neither pathname expansion nor field splitting happens afterwards.
.Pp
Some special forms of parameter expansion are available.
In the formats below,
.Ar word
itself is subject to expansion,
and, if omitted,
the empty string is used.
If the colon is omitted,
.Ar word
is substituted only if
.Ar parameter
is unset (not if it is empty).
.Bl -tag -width Ds
.It $ Ns Brq Ar parameter Ns :- Ns Op Ar word
Substitute
.Ar parameter .
If
.Ar parameter
is unset or empty,
substitute
.Ar word .
.It $ Ns Brq Ar parameter Ns := Ns Op Ar word
Substitute
.Ar parameter .
If
.Ar parameter
is unset or empty,
first assign the value of
.Ar word
to
.Ar parameter .
.It $ Ns Brq Ar parameter Ns :? Ns Op Ar word
Substitute
.Ar parameter .
If
.Ar parameter
is unset or empty,
the result of the expansion of
.Ar word
is written to standard error
and the shell exits with a non-zero exit status.
If
.Ar word
is omitted,
the string
.Qq parameter null or not set
is used.
.It $ Ns Brq Ar parameter Ns :+ Ns Op Ar word
Substitute
.Ar word .
If
.Ar parameter
is unset or empty,
substitute the empty string.
.It $ Ns Brq # Ns Ar parameter
The length, in characters, of
.Ar parameter .
.It $ Ns Brq Ar parameter Ns % Ns Op Ar word
Substitute
.Ar parameter ,
deleting the smallest possible suffix matching
.Ar word .
.It $ Ns Brq Ar parameter Ns %% Ns Op Ar word
Substitute
.Ar parameter ,
deleting the largest possible suffix matching
.Ar word .
.It $ Ns Brq Ar parameter Ns # Ns Op Ar word
Substitute
.Ar parameter ,
deleting the smallest possible prefix matching
.Ar word .
.It $ Ns Brq Ar parameter Ns ## Ns Op Ar word
Substitute
.Ar parameter ,
deleting the largest possible prefix matching
.Ar word .
.El
.Pp
Command expansion has a command executed in a subshell
and the results output in its place.
The basic format is:
.Pp
.D1 $ Ns Pq Ar command
or
.D1 \` Ns Ar command Ns \`
.Pp
The results are subject to field splitting and pathname expansion;
no other form of expansion happens.
If
.Ar command
is contained within double quotes,
field splitting does not happen either.
Within backquotes,
a backslash is treated literally unless it follows
a dollar sign, backquote, or another backslash.
Commands can be nested,
though the backquoted version requires backslashes before the backquotes.
If
.Ar command
is run in a subshell in the bracketed version,
the syntax is identical to that of arithmetic expansion.
In that case the shell attempts arithmetic expansion first,
then attempts command substitution if that fails.
Or a non-ambiguous version can be used:
.Pp
.D1 "$( (" Ns Ar command Ns ") )"
.Pp
Arithmetic expansion works similarly,
with an arithmetic expression being evaluated and substituted.
The format is:
.Pp
.D1 $ Ns Pq Pq Ar expression
.Pp
Where
.Ar expression
is an integer, parameter name, or array reference,
optionally combined with any of the operators described below,
listed and grouped according to precedence:
.Bl -tag -width Ds
.It ()\&
Operators within brackets have highest precedence.
Compare 3+2*4, which is 11,
since multiplication has higher precedence than addition,
and (3+2)*4, which is 20.
.It + - ~ !\&
Unary plus
(indicates a positive value; integers are positive by default),
unary minus (indicates a negative value),
bitwise NOT,
and logical NOT
(the result is 1 if the argument is zero, or 0 otherwise), respectively.
.It * / %
Multiplication, division, and modulus (remainder), respectively.
.It + -
Addition and subtraction, respectively.
.It << >>
Shift left or right, respectively.
.It < <= > >=
Less than, less than or equal to,
greater than, and greater than or equal to, respectively.
The result is 1 if true, or 0 otherwise.
.It == !=
Equal (the result is 1 if both arguments are equal, and 0 otherwise)
and not equal (the result is 0 if both arguments are equal, and 1 otherwise),
respectively.
.It &
Bitwise AND.
.It ^
Bitwise exclusive OR.
.It |
Bitwise inclusive OR.
.It &&
Logical AND.
The result is 1 if both arguments are non-zero, or 0 otherwise.
.It ||
Logical OR.
The result is 1 if either argument is non-zero, or 0 otherwise.
.It Ar expression ? Ns Ar expr1 : Ns Ar expr2
The result is
.Ar expr1
if
.Ar expression
is non-zero,
or
.Ar expr2
otherwise.
.It = *= /= %= += -= <<= >>= &= ^= |=
Assignment.
The notation
.Ar var Ns *= Ns Ar expression
is equivalent to
.Ar var Ns = Ns Ar var Ns * Ns Ar expression .
.El
.Pp
After the various types of expansion listed above have been carried out,
the shell subjects everything that did not occur in double quotes to
.Em field splitting ,
where words are broken up according to the value of the
.Ev IFS
variable.
Each character of
.Ev IFS
is used to split fields;
any
.Ev IFS
characters at the beginning and end of input are ignored.
If
.Ev IFS
is unset, the default value consisting of
.Aq space ,
.Aq tab
and
.Aq newline
is used; if the value of
.Ev IFS
is empty, no field splitting is performed.
.Pp
After field splitting,
the shell matches filename patterns.
.Bl -tag -width Ds
.It ?
A question mark matches any single character.
.It *
An asterisk matches multiple characters.
.It [..]
Matches any character enclosed in the brackets.
The sense is negated if the first character is
.Sq !\& .
A closing bracket can be included in the list of characters to match
by listing it as the first character after the opening bracket
or by quoting it.
Similarly a
.Sq -
should be specified last or quoted so that the shell does not think
it is a character range (see below).
.It [[: Ns Ar class Ns :]]
Matches any character in the following character classes:
.Bd -literal -offset indent
alnum	alpha	blank	cntrl
digit	graph	lower	print
punct	space	upper	xdigit
.Ed
.It Bq Ar x Ns - Ns Ar y
Matches any character in the range between
.Ar x
and
.Ar y ,
inclusive.
.El
.Pp
Slashes and full stops do not match the patterns above
because of their use as path and filename characters.
.Ss Redirection
Redirection is used to open, close, or otherwise manipulate files,
using redirection operators in combination with numerical
.Em file descriptors .
A minimum of ten (0\-9) descriptors are supported;
by convention
standard input is file descriptor 0,
standard output file descriptor 1,
and standard error file descriptor 2.
In the examples given below,
.Ar n
represents a numerical file descriptor.
The target for redirection is
.Ar file
and it is subject to all forms of expansion as listed above,
except pathname expansion.
If any part of the file descriptor or redirection operator is quoted,
they are not recognised.
.Bl -tag -width Ds
.It Oo Ar n Oc Ns < Ns Ar file
Open
.Ar file
for reading on file descriptor
.Ar n ,
by default standard input.
.It Oo Ar n Oc Ns > Ns Ar file
Write to
.Ar file
with file descriptor
.Ar n ,
by default standard output.
If
.Ar file
does not exist,
create it;
if it does exist,
truncate it to be empty before beginning to write to it.
.It Oo Ar n Oc Ns >| Ns Ar file
As above, but forces clobbering
(see the
.Fl C
option).
.It Oo Ar n Oc Ns >> Ns Ar file
Append to
.Ar file
with file descriptor
.Ar n ,
by default standard output.
If
.Ar file
does not exist,
create it.
.It Oo Ar n Oc Ns <<
This form of redirection,
called a
.Em here document ,
is used to copy a block of lines
to a temporary file until a line matching
.Ar delimiter
is read.
When the command is executed, standard input is redirected from the
temporary file to file descriptor
.Ar n ,
or standard input by default.
The basic format is:
.Bd -unfilled -offset indent
.Oo Ar n Oc Ns << Ns Ar delimiter
text
text
\&...
.Ar delimiter
.Ed
.Pp
Provided
.Ar delimiter
doesn't contain any quoted characters,
parameter, command, and arithmetic expansions are performed on
the text block,
and backslashes escape the special meaning of
.Sq $ ,
.Sq \` ,
and
.Sq \e .
If multiple here documents are used on the same command line,
they are saved and processed in order.
.It Oo Ar n Oc Ns <<-
Same as
.Ic << ,
except leading tabs are stripped from lines in
.Ar block .
.It Oo Ar n Oc Ns <& Ns Ar file
Make file descriptor
.Ar n ,
by default standard input,
a copy of the file descriptor denoted by
.Ar file .
If
.Ar file
is
.Sq - ,
close file descriptor
.Ar n
or standard input.
.It Oo Ar n Oc Ns >& Ns Ar file
Make file descriptor
.Ar n ,
by default standard output,
a copy of the file descriptor denoted by
.Ar file .
If
.Ar file
is
.Sq - ,
close file descriptor
.Ar n
or standard output.
.It Oo Ar n Oc Ns <> Ns Ar file
Open
.Ar file
for reading and writing on file descriptor
.Ar n ,
by default standard input.
If
.Ar file
does not exist,
create it.
.El
.Sh COMMANDS
The shell first expands
any words that are not variable assignments or redirections,
with the first field being the command name
and any successive fields arguments to that command.
It sets up redirections, if any,
and then expands variable assignments, if any.
It then attempts to run the command.
.Pp
Firstly, it determines whether the command name contains any slashes.
If it does not, and the shell implements the command as a special built-in,
it then invokes the built-in.
If not, but it is a non POSIX standard command,
implemented as a shell function,
it then invokes that.
If not, but it is one of the commands
.Ic alias , bg , cd , command ,
.Ic false , fc , fg , getopts ,
.Ic jobs , kill , newgrp , pwd ,
.Ic read , true , umask , unalias ,
or
.Ic wait ,
it then invokes that.
.Pp
Failing that, the value of
.Ev PATH
is used to search for the command.
If it finds a match,
and it is a POSIX standard command,
implemented as a built-in or function,
it then invokes it.
Otherwise
it attempts to execute the command in an environment separate from the shell.
If it is unable to execute the command,
it tries to run it as a shell script.
.Pp
Finally, if the command name does contain a slash,
and it finds a match in
.Ev PATH ,
it attempts to execute the command in an environment separate from the shell.
If it is unable to execute the command,
it tries to run it as a shell script.
.Pp
A series of one or more commands separated by
.Sq ;\&
constitute a
.Em sequential list ,
where commands are executed in the order given.
The exit status of a sequential list is that of the last command executed.
The format for a sequential list is:
.Pp
.D1 Ar command No \&; Op Ar command ...
.Pp
A series of one or more commands separated by
.Sq &
constitute an
.Em asynchronous list ,
where the shell executes the command in a subshell
and runs the next command without waiting for the previous one to finish.
The exit status of an asynchronous list is always zero.
The format for an asynchronous list is:
.Pp
.D1 Ar command No & Op Ar command ...
.Pp
A series of commands separated by
.Sq |
constitute a
.Em pipeline ,
where the output of one command
is used as input for the next command.
The exit status of a pipeline is that of the last command;
if a pipeline begins
.Sq !\&
the exit status is inverted.
The format for a pipeline is:
.Pp
.D1 Oo !\& Oc Ar command | command Op | Ar ...
.Pp
A series of commands separated by
.Sq &&
constitute an
.Em AND list ,
where a command is only executed if the exit status of the previous command was
zero.
The exit status of an AND list is that of the last command.
The format for an AND list is:
.Pp
.D1 Ar command No && Ar command Op && Ar ...
.Pp
A series of commands separated by
.Sq ||
constitute an
.Em OR list ,
where a command is only executed if the exit status of the previous command was
non-zero.
The exit status of an OR list is that of the last command.
The format for an OR list is:
.Pp
.D1 Ar command No || Ar command Op || Ar ...
.Pp
A series of commands separated by
.Sq &&
and
.Sq ||
constitute an
.Em AND-OR list ,
where
.Sq &&
and
.Sq ||
have equal precedence and are evaluated in the order they are given.
The AND-OR list can be terminated with
.Sq ;\&
or
.Sq &
to have them execute sequentially or asynchronously, respectively.
.Pp
Command lists,
as described above,
can be enclosed within
.Sq ()
to have them executed in a subshell,
or within
.Sq {}
to have them executed in the current environment:
.Pp
.D1 Pq Ar command ...
.D1 Brq Ar \ \&command ... Ns ;\&
.Pp
Any redirections specified after the closing bracket apply to all commands
within the brackets.
An operator such as
.Sq ;\&
or a newline are needed to terminate a command list within curly braces.
.Pp
The shell has grammatical constructs
which allow it to work its way (loop) through lists
or evaluate things conditionally.
.Pp
A
.Em for loop
executes a series of commands for each item in a list.
Its format is:
.Bd -unfilled -offset indent
.No for Ar name Op in Ar word ...
do
.No "   " Ar command
.No "   " Ar ...
done
.Ed
.Pp
Firstly
.Ar word ...
is expanded to generate a list of items.
The variable
.Ar name
is set to each item, in turn,
and the commands are executed for each item.
The construct
.Qq in word ...
can be omitted,
which is equivalent to: in \&"$@@\&".
The exit status is zero if there are no items
or otherwise the exit status of the last command executed.
.Pp
A
.Em while loop
continuously executes a set of commands
as long as the command or command list being tested in
.Ar condition
has a zero exit status.
Its format is:
.Bd -unfilled -offset indent
.No while Ar condition
do
.No "   " Ar command
.No "   " Ar ...
done
.Ed
.Pp
Multiple commands may be given by grouping them in lists,
as described above,
or by separating them with newlines.
The exit status is zero if the commands after
.Qq do
were never executed
or otherwise the exit status of the last command executed.
.Pp
An
.Em until loop
continuously executes a set of commands
as long as the command or command list being tested in
.Ar condition
has a non-zero exit status.
Its format is:
.Bd -unfilled -offset indent
.No until Ar condition
do
.No "   " Ar command
.No "   " Ar ...
done
.Ed
.Pp
Multiple commands may be given by grouping them in lists,
as described above,
or by separating them with newlines.
The exit status is zero if the commands after
.Qq do
were never executed
or otherwise the exit status is that of the last command executed.
.Pp
A
.Em case conditional
is used to run commands whenever a pattern is matched.
Its format is:
.Bd -unfilled -offset indent
.No case Ar word No in
.No "   " Po Ar pattern Oo | Ar pattern ... Oc Pc Ar command Ns ;;
.No "   " Ar ...
esac
.Ed
.Pp
In this case
.Ar pattern
is matched against the string resulting from the expansion of
.Ar word .
Multiple commands may be given by grouping them in lists,
as described above,
or by separating them with newlines.
The initial
.Sq (\&
is optional,
as is the terminating
.Sq ;;
for the final command.
The exit status is zero if no patterns are matched
or otherwise the exit status of the last command executed.
.Pp
An
.Em if conditional
is used to execute commands depending on the exit status of the command or
command list being tested.
Its format is:
.Bd -unfilled -offset indent
.No if Ar conditional
then
.No "   " Ar command
.No "   " Ar ...
.No elif Ar conditional
then
.No "   " Ar command
.No "   " Ar ...
.No else
.No "   " Ar command
.No "   " Ar ...
fi
.Ed
.Pp
Firstly the command(s) following
.Qq if
is executed;
if its exit status is zero,
the commands in the
.Qq then
block are executed and the conditional completes.
Otherwise the commands in the
.Qq elif
block are executed;
if the exit status is zero,
the commands in the
.Qq then
block are executed and the conditional completes.
Otherwise the next
.Qq elif
block, if any, is tried.
If nothing from an
.Qq if
or
.Qq elif
block returns zero,
the commands in the
.Qq else
block are run and the conditional completes.
The
.Qq elif
and
.Qq else
blocks are optional.
.Pp
Multiple commands may be given by grouping them in lists,
as described above,
or by separating them with newlines.
The exit status is zero if nothing is executed from an
.Qq if
or
.Qq elif
block
or otherwise the exit status of the last command executed.
.Pp
Functions allow the user to define a group of commands,
executed whenever the function is invoked.
Its format is:
.Bd -unfilled -offset indent
.Ar function Ns () Ar command-list
.Ed
.Pp
The above simply defines a function;
nothing is executed until the function is invoked.
Commands may specify redirections
and positional parameters are changed,
for the duration of the function,
to those passed to it.
The special parameter
.Sq #
is temporarily changed too,
though
.Sq 0
is not.
After the function finishes,
the positional parameters and
.Sq #
are restored to their original values.
The exit status of a function definition is 0 if successful
or >0 otherwise.
The exit status of a function is that of the last command
executed by the function.
.Sh SPECIAL PARAMETERS
Some parameters have special meaning to the shell
and are listed below.
.Bl -tag -width Ds
.It 0
The name of the shell or shell script.
.It 1 ... n
The
.Em positional parameters .
These parameters are set when a shell, shell script,
or shell function is invoked.
Each argument passed to a shell or shell script
is assigned a positional parameter,
starting at 1,
and assigned sequentially.
When a shell function is invoked,
any arguments passed to it are temporarily reassigned to the
positional parameters;
when the function completes,
the values are restored.
Positional parameters 10 and above should be enclosed in {}.
Positional parameters can be reassigned using the
.Ic set
command.
.It @@
All positional parameters.
Within double quotes,
each parameter is output as a separate field.
The resulting list completely matches what was passed to the shell.
So "1 2" "3" is output as two parameters, "1 2" and "3".
.It *
All positional parameters.
Within double quotes,
all parameters are output as one field,
separated by the first character of
.Ev IFS
(by default a space).
The resulting list of words is amalgamated,
losing the sense of how they were passed to the shell.
So "1 2" "3" is output as one parameter, "1 2 3".
.It #
The number of positional parameters.
.It ?
The exit status of the most recent command.
.It -
The current shell options.
.It $
The process ID of the current shell.
Subshells have the same PID as the current shell.
.It !
The process ID of the most recent background command.
.El
.Sh ENVIRONMENT
The following environment variables affect the execution of
.Nm :
.Bl -tag -width "POSIXLY_CORRECT"
.It Ev CDPATH
Colon separated list of directories used by the
.Ic cd
command.
If unset or empty,
the current working directory is used.
.It Ev ENV
Pathname to a file containing commands to be executed
when an interactive shell is started.
.It Ev FCEDIT
Editor for the
.Ic fc
builtin.
The default is
.Xr ed 1 .
.It Ev HISTFILE
Pathname to a file to be used to record command history.
The default is to not write command history to a file.
.It Ev HISTSIZE
The maximum number of commands stored in history.
The default is 500.
.It Ev HOME
Pathname to a user's home directory.
.It Ev IFS
A list of characters to be used for field splitting.
.It Ev LINENO
The current line number in a script or function,
starting at 1.
This variable should not be set by users.
.It Ev MAIL
Pathname to a user's mailbox file.
If set,
.Nm
reports the arrival of new mail
(ascertained by checking a file's modification time)
every
.Ev MAILCHECK
seconds.
.Ev MAIL
is overridden by
.Ev MAILPATH .
.It Ev MAILCHECK
How often,
in seconds,
to check for new mail in either
.Ev MAIL
or
.Ev MAILPATH .
The default is 600 (10 minutes).
If set to 0,
check before issuing each prompt.
.It Ev MAILPATH
Pathname to a colon separated list of mailboxes.
If set,
.Nm
reports the arrival of new mail
(ascertained by checking a file's modification time)
every
.Ev MAILCHECK
seconds.
The default notification message
.Pq Qq you have mail in $_
can be changed per mailbox by appending
.No % Ns Ar message
to a pathname.
.Ev MAILPATH
overrides
.Ev MAIL .
.It Ev OLDPWD
Pathname to the previous working directory.
.It Ev OPTARG
An option argument for the
.Ic getopts
command.
.It Ev OPTIND
An index to the next option for the
.Ic getopts
command.
.It Ev PATH
Pathname to a colon separated list of directories
used to search for the location of executable files.
A pathname of
.Sq .\&
represents the current working directory.
The default value of
.Ev PATH
on
.Ox
is:
.Bd -literal -offset 2n
/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11R6/bin:/usr/local/bin
.Ed
.It Ev POSIXLY_CORRECT
Enable POSIX mode
(see
.Sx STANDARDS ) .
.It Ev PPID
The shell's parent process ID.
Subshells have the same
.Ev PPID
as the current shell.
.It Ev PS1
User prompt displayed every time an interactive shell
is ready to read a command.
A
.Sq !\&
in the prompt is expanded to the number of the next command in history
to be typed.
The default value is
.Sq $\ \&
for normal users and
.Sq #\ \&
for root.
.It Ev PS2
Newline prompt displayed in an interactive shell
when a newline has been entered
before the command line completes.
The default value is
.Sq >\ \& .
.It Ev PS4
Trace prompt displayed in an interactive shell
before each command is traced
(see the
.Fl x
option).
The default is
.Sq +\ \& .
.It PWD
The absolute pathname to the current working directory.
Assignments to this variable are ignored.
.El
.Sh ASYNCHRONOUS EVENTS
The following signals affect the execution of
.Nm :
.Bl -tag -width "SIGQUITXXX"
.It Dv SIGINT
If a shell is interactive
and in command line editing mode,
editing is terminated on the current line
and the command being edited is not entered into command history.
Otherwise the signal is caught
but no action is taken.
.It Dv SIGQUIT
Ignored if a shell is interactive.
.It Dv SIGTERM
Ignored if a shell is interactive.
.It Dv SIGTSTP
Ignored if a shell is interactive
and the
.Ic monitor
option
.Pq Fl m
is set.
.It Dv SIGTTIN
Ignored if a shell is interactive
and the
.Ic monitor
option
.Pq Fl m
is set.
.It Dv SIGTTOU
Ignored if a shell is interactive
and the
.Ic monitor
option
.Pq Fl m
is set.
.El
.Sh EXIT STATUS
The
.Nm
utility exits with one of:
.Bl -tag -width "1-125"
.It 0
The script being executed contained only blank lines or comments.
.It 1\(en125
A non-interactive shell detected an error other than
.Ar file
not found.
.It 126
A command was found but was not executable.
.It 127
A non-interactive shell returned
.Ar file
not found.
.El
.Pp
Otherwise
.Nm
returns the exit status of the last command it invoked.
.Sh SEE ALSO
.Xr csh 1 ,
.Xr ed 1 ,
.Xr ksh 1 ,
.Xr vi 1 ,
.Xr script 7
.Sh STANDARDS
The
.Nm
utility is compliant with the
.St -p1003.1-2008
specification,
except where noted below:
.Bl -dash
.It
The flag
.Op Fl h
is documented by POSIX as hashing
.Qq utilities invoked by functions as those functions are defined ;
this implementation hashes utilities after first invocation
(and functions be damned).
.It
POSIX says mail notifications via
.Ev MAIL
and
.Ev MAILPATH
should happen if a file is created,
as well as if its modification time changes.
This implementation of
.Nm
does not provide notification when these files are created.
.It
The built-in
.Ic newgrp
is unsupported.
.It
The
.Ic break
and
.Ic continue
built-ins should exit/return from the outermost loop if the argument
.Ar n
is greater than the level of loops.
.El
.Pp
Enabling POSIX mode changes some behaviour to make
.Nm
adhere more strictly to the
.St -p1003.1-2008
specification.
@


1.142
log
@document behaviour when CDPATH unset;
requested by a mail on misc, via otto;

ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.141 2017/03/16 20:06:37 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 16 2017 $
d2096 1
a2096 1
as the parent of the current shell.
@


1.141
log
@document the "type" built-in, marked as xsi by posix;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.140 2017/03/16 19:59:15 jmc Exp $
d2000 2
@


1.140
log
@document the ulimit built-in, which is now marked xsi by posix;
noted by scott cheloha
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.139 2017/03/16 19:15:19 jmc Exp $
d785 4
@


1.139
log
@document the "hash" built-in, moved to (posix) base in issue 7;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.138 2016/11/14 09:21:35 tb Exp $
d17 1
a17 1
.Dd $Mdocdate: November 14 2016 $
d785 6
@


1.138
log
@Remove an escaped blank space and insert an No macro to keep \&; at a
distance from 'Ar command'.

This is schwarze's correct version of an initial incorrect diff from me.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.137 2016/11/12 22:37:41 tb Exp $
d17 1
a17 1
.Dd $Mdocdate: November 12 2016 $
a123 2
Builtins are not hashed, regardless of whether this option is set or not.
This option is set by default for non-interactive shells.
d511 8
@


1.137
log
@Fix lexicographic order of shell built-ins: trap comes before true.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.136 2016/08/12 06:16:19 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 12 2016 $
d1649 1
a1649 1
.D1 Ar command\ \& ; Op Ar command ...
@


1.136
log
@rework initial text a little, to read better;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.135 2016/07/28 16:36:02 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 28 2016 $
a741 2
.It Ic true
Return a true (zero) value.
d777 2
@


1.135
log
@remove note about command substitution and double quotes: it is probable
that i misunderstood something when i wrote it;

found by guenther and naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.134 2016/07/18 18:24:21 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 18 2016 $
d45 1
a45 1
As such, it will also accept options documented in
d47 1
a47 1
This manual page describes only features
@


1.134
log
@rework the first sentence of this page;
with help from otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.133 2016/05/04 08:31:00 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: May 4 2016 $
a2198 3
.It
Command substitution occurring within double quotes
is subject to pathname expansion but should not be.
@


1.133
log
@Correct the description of the != operator in arithmetic expansion;
from Andras Farkas <deepbluemistake at gmail dot com>.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.132 2016/05/04 06:20:42 jmc Exp $
d33 6
a38 7
it reads its input,
breaks it down into parts,
and then executes those parts.
Its chief uses are in interfacing between the user and the operating system,
reading commands on the command line,
and in chaining together groups of commands in a very flexible manner,
through a shell script.
@


1.132
log
@line editing correction; from andras farkas
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.131 2016/03/21 13:35:00 tb Exp $
d17 1
a17 1
.Dd $Mdocdate: March 21 2016 $
d1383 1
a1383 1
and not equal (the result is 1 if both arguments are non-zero, and 0 otherwise),
@


1.131
log
@More ksh POSIX compliance fixes by Martijn Dekker:

This simple patch makes the 'command' builtin POSIX-compliant and
consistent with other current shells. It fixes two things:

   a) 'command -v' does not find shell reserved words (a.k.a. keywords).
For instance, 'command -v select' outputs nothing but should output
'select'.

   b) 'command -pv' always outputs the path of an external command, even
if 'command -p' would execute a builtin. For instance, 'command -p kill'
executes the 'kill' builtin, as expected, but 'command -pv kill' outputs
'/bin/kill'. The '-v' option is supposed to reflect what would actually
be executed, so 'command -pv kill' should output 'kill'. The -p option
sets the PATH to a default system value before doing the search, but
that has no bearing on the fact that builtins take precedence over
external commands.

The patch fixes both issues for 'command' without affecting the
behaviour of the ksh-specific builtin 'whence', which is handled by the
same C function.

Regression test added to obsd-regress.t.

Issues found and fixed by Martijn Dekker, ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.130 2015/10/12 12:34:42 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 12 2015 $
d945 1
a945 1
.It Oo Ar count Oc Ns Ic b
@


1.130
log
@indent the builtin text a little, for naddy;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.129 2015/09/14 20:06:58 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: September 14 2015 $
d332 3
@


1.129
log
@Avoid .Ns right after .Pf, it's pointless.
In some cases, do additional cleanup in the immediate vicinity.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.128 2015/05/04 19:34:13 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 4 2015 $
d217 1
a217 1
.Bl -ohang
@


1.128
log
@lightly document the posix option and POSIXLY_CORRECT; will sketch out
in more detail once i get my head round them...
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.127 2015/04/30 20:19:04 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 30 2015 $
d1342 1
a1342 1
.D1 $( Pf ( Ar command Ns Pf ) \ \&)
@


1.127
log
@reapply the rules of english to the option keywords: i was persuaded to undo it
because the option names are case sensitive, but it just looks awful. so
expect just a little more from the reader...
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.126 2015/03/31 21:23:34 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 31 2015 $
d164 4
d1977 1
a1977 1
.Bl -tag -width "MAILCHECKXXX"
d2068 4
d2213 6
@


1.126
log
@both rpe and zhuk pointed out some problems with my if/elf template.
zhuk suggested using "condition" rather than command, and this commit
reworks the loop/conditional section to do that;

ok zhuk rpe
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.125 2015/03/30 19:17:06 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 30 2015 $
d83 1
a83 1
allexport.
d95 1
a95 1
notify.
d98 1
a98 1
noclobber.
d103 1
a103 1
errexit.
d110 1
a110 1
errexit is ignored for
d119 1
a119 1
noglob.
d132 1
a132 1
monitor.
d145 1
a145 1
noexec.
d170 1
a170 1
nounset.
d180 1
a180 1
verbose.
d183 1
a183 1
xtrace.
@


1.125
log
@on zhuk's advice, don;t talk about null: posix uses null and empty
interchangeably, but we've stuck with empty;

while here, sneak in an otherwsie -> otherwise
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.124 2015/03/27 14:22:59 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 27 2015 $
d1760 3
a1762 1
as long as the command has a zero exit status.
d1765 1
a1765 1
.No while Ar command
d1783 3
a1785 1
as long as the command has a non-zero exit status.
d1788 1
a1788 1
.No until Ar command
d1832 2
a1833 1
is used to execute commands depending on the exit status of other commands.
d1836 1
a1836 1
.No if Ar command
d1839 2
a1840 2
.Pp
.No elif Ar command
d1843 4
a1846 3
.Ar ...
.Pp
.No else Ar command
d1850 1
a1850 3
Firstly the
.Ar command
following
d1880 1
@


1.124
log
@clarity fix from zhuk;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.123 2015/03/26 20:10:22 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 26 2015 $
d756 1
a756 1
if it is null
d1243 1
a1243 1
is unset (not if it is null).
d1250 1
a1250 1
is unset or null,
d1258 1
a1258 1
is unset or null,
d1268 1
a1268 1
is unset or null,
d1284 2
a1285 2
is unset or null,
substitute null.
d1376 1
a1376 1
and not equal (the result is 1 if both arguments are non-zero, and 0 otherwsie),
d1428 1
a1428 1
is null, no field splitting is performed.
@


1.123
log
@a little wording tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.122 2015/03/26 20:08:58 jmc Exp $
d1887 1
a1887 1
executed whenever the function name is invoked.
d1894 1
a1894 1
nothing is executed until the function name is invoked.
@


1.122
log
@various fixes from rpe;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.121 2015/03/26 10:51:15 jmc Exp $
d77 1
a77 1
where indicated,
@


1.121
log
@from zhuk: in the for loop, show "in word ..." as optional;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.120 2015/03/26 10:36:59 jmc Exp $
d110 1
a110 1
Errexit is ignored for
d700 1
a700 1
with the variable
d777 1
a777 1
a newly created file will have.
d1206 1
a1206 1
up to the next colon or slash, if any,
d1956 1
a1956 1
The exit status of the most recent pipeline.
@


1.120
log
@from zhuk: sequential and asynchronous lists may take only one item;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.119 2015/03/26 09:59:23 jmc Exp $
d1736 1
a1736 1
.No for Ar name No in Ar word ...
@


1.119
log
@rework the section on when different types of command are processed;
zhuk pointed out the flaws in my original text, and has found many more since;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.118 2015/03/19 22:38:28 zhuk Exp $
d17 1
a17 1
.Dd $Mdocdate: March 19 2015 $
d1635 1
a1635 1
A series of commands separated by
d1643 1
a1643 1
.D1 Ar command ; Ar command Op ; Ar ...
d1645 1
a1645 1
A series of commands separated by
d1654 1
a1654 1
.D1 Ar command No & Ar command Op & Ar ...
@


1.118
log
@Fix IFS description. May be polished further when all consequences of
following "null is the same as empty" from POSIX are investigated.

okay jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.117 2015/03/19 22:34:59 zhuk Exp $
d1601 5
a1605 3
Firstly, if the command is a special built-in
it invokes the built-in.
If not, but it is a shell function,
d1607 7
a1613 1
If not, but it is a regular built-in,
d1615 2
a1616 1
Failing that, it uses the value of
d1618 13
a1630 4
to search for the command.
If it finds a match which is a regular built-in or function it invokes it.
Otherwise if it finds a match,
or if the command name contains a slash,
@


1.117
log
@Make it clear that it's the line who shouldn't be empty, and not the
command history.

This version comes from jmc@@ together with his okay.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.116 2015/03/18 22:18:19 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 18 2015 $
d1419 8
a1426 1
If the value of
@


1.116
log
@remove ambiguity from the COMMANDS section, after discussion with zhuk;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.115 2015/03/18 22:11:21 jmc Exp $
d860 1
a860 2
The command line is entered into command history,
providing it is not empty.
@


1.115
log
@from zhuk: a little more info on <>
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.114 2015/03/18 22:09:22 jmc Exp $
d1595 1
a1595 1
Next, if the command is a special built-in
d1597 1
a1597 1
If it is a shell function
d1599 1
a1599 1
If it is a regular built-in
d1601 1
a1601 1
Finally it uses the value of
@


1.114
log
@improve the description of here documents; prompted by zhuk
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.113 2015/03/18 16:20:05 jmc Exp $
d1581 4
@


1.113
log
@rework the redirection text after some feedback from zhuk;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.112 2015/03/17 14:30:35 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 17 2015 $
d1515 1
a1515 2
is used to copy the lines from
.Ar block
d1526 3
a1528 3
.Ar block
.Ar block
.Ar ...
d1536 1
a1536 1
.Ar block ,
@


1.112
log
@revert a previous word change - the original seems more accurate;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.111 2015/03/17 10:01:16 bentley Exp $
d1460 2
a1461 3
Redirection is used to open and close files.
Open files are represented by numbers,
referred to as
d1463 3
a1465 1
Standard input is usually file descriptor 0,
a1470 2
If it is quoted,
it is not recognised as a file descriptor.
d1472 2
a1473 2
.Ar file ;
it is subject to all forms of expansion as listed above,
d1475 2
a1476 2
If any part of the redirection operator is quoted,
it is also not recognised.
@


1.111
log
@Escape certain characters for slightly more correct (and prettier) output.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.110 2015/03/17 07:02:48 jmc Exp $
d1138 1
a1138 1
and notes its exit status.
@


1.110
log
@from zhuk: provide some Sx
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.109 2015/03/17 06:59:48 jmc Exp $
d146 1
a146 1
Read commands but do not execute them \-
d375 1
a375 1
the exit status is 1\-125;
d725 1
a725 1
.Sq Po #- Ns Ar n Pc Ns +1
d835 1
a835 1
1\-126 if an error occurs,
d1146 1
a1146 1
| & ; < > ( ) $ ` \e " ' <space> <tab> <newline>
d1157 1
a1157 1
.Pq '
d1164 1
a1164 1
.Pq `
d1318 1
a1318 1
.D1 ` Ns Ar command Ns `
d1541 1
a1541 1
.Sq ` ,
d1617 1
a1617 1
.D1 Ar command No ; Ar command Op ; Ar ...
d2109 1
a2109 1
.Bl -tag -width "1\-125"
d2112 1
a2112 1
.It 1\-125
@


1.109
log
@from zhuk: shell does not wait for command to complete if job run in background
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.108 2015/03/16 13:18:20 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 16 2015 $
d1175 4
a1178 2
within double quotes has a special meaning,
described below.
@


1.108
log
@from zhuk: be clear that "#" is a variable
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.107 2015/03/15 23:09:10 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 15 2015 $
d1136 3
a1138 2
The shell waits for the command to complete
and collects its exit status.
@


1.107
log
@from zhuk: two grammar fixes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.106 2015/03/15 23:03:26 jmc Exp $
d700 1
a700 1
with
@


1.106
log
@from zhuk: clarify "set --";
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.105 2015/03/15 15:54:35 jmc Exp $
d732 1
a732 1
not change occurs.
d1533 1
a1533 1
doesn't contains any quoted characters,
@


1.105
log
@from zhuk: remove ambiguity around the false/true description;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.104 2015/03/15 11:45:07 jmc Exp $
d704 3
a706 2
.Qq set\ --
can be used to delimit arguments;
@


1.104
log
@from zhuk: remove ambiguity in the description of "continue";
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.103 2015/03/15 11:15:55 jmc Exp $
d399 1
a399 1
Exit with a non-zero status.
d736 1
a736 1
Exit with a zero status.
@


1.103
log
@from zhuk: the dash part of "cd -" is not a flag, so don;t show it as such;
posix actually uses a separate synopsis to show this form, but i've chosen
to show it as a special form of "dir";
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.102 2015/03/14 18:54:50 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 14 2015 $
d348 1
a348 1
Return to the top of the innermost
@


1.102
log
@from zhuk: be clearer about not all options having long name equivalents and
lowercase the first letter of these names since that is the form accepted;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.101 2015/03/14 08:13:52 jmc Exp $
d271 1
a271 1
.It Ic cd Oo Fl | L | P Oc Op Ar dir
d279 6
a301 3
.It Fl
Change to the previous working directory and
print the (now current) working directory.
@


1.101
log
@rewrite of sh(1). this page tries to confine itself to document features
supported by posix compliant shells (obviously ksh(1) still documents the
works).

still needs work, so please do mail me diffs or feedback;
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d76 2
a77 2
The first word used in the options description below
is its long name,
d83 1
a83 1
Allexport.
d95 1
a95 1
Notify.
d98 1
a98 1
Noclobber.
d103 1
a103 1
Errexit.
d119 1
a119 1
Noglob.
d132 1
a132 1
Monitor.
d145 1
a145 1
Noexec.
d170 1
a170 1
Nounset.
d180 1
a180 1
Verbose.
d183 1
a183 1
Xtrace.
@


1.100
log
@remove useless escaping; mandoc warned about some of this
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.99 2014/12/09 15:37:13 schwarze Exp $
d3 1
a3 1
.\"	Public Domain
d5 13
a17 1
.Dd $Mdocdate: December 9 2014 $
d22 1
a22 1
.Nd public domain Bourne shell
d25 3
a27 5
.Bk -words
.Op Fl +abCefhiklmnpruvXx
.Op Fl +o Ar option
.Op Fl c Ar string \*(Ba Fl s \*(Ba Ar file Op Ar argument ...
.Ek
d29 13
d43 10
a52 2
is a reimplementation of the Bourne shell, a command interpreter for both
interactive and script use.
d54 3
a56 2
The options are as follows:
.Bl -tag -width Ds
d58 1
a58 2
.Nm
will execute the command(s) contained in
a59 99
.It Fl i
Interactive shell.
A shell is
.Dq interactive
if this
option is used or if both standard input and standard error are attached
to a
.Xr tty 4 .
An interactive shell has job control enabled, ignores the
.Dv SIGINT ,
.Dv SIGQUIT ,
and
.Dv SIGTERM
signals, and prints prompts before reading input (see the
.Ev PS1
and
.Ev PS2
parameters).
For non-interactive shells, the
.Ic trackall
option is on by default (see the
.Ic set
command below).
.It Fl l
Login shell.
If the basename the shell is called with (i.e. argv[0])
starts with
.Ql -
or if this option is used,
the shell is assumed to be a login shell and the shell reads and executes
the contents of
.Pa /etc/profile
and
.Pa $HOME/.profile
if they exist and are readable.
.It Fl p
Privileged shell.
A shell is
.Dq privileged
if this option is used
or if the real user ID or group ID does not match the
effective user ID or group ID (see
.Xr getuid 2
and
.Xr getgid 2 ) .
A privileged shell does not process
.Pa $HOME/.profile
nor the
.Ev ENV
parameter (see below).
Instead, the file
.Pa /etc/suid_profile
is processed.
Clearing the privileged option causes the shell to set
its effective user ID (group ID) to its real user ID (group ID).
.It Fl r
Restricted shell.
A shell is
.Dq restricted
if this
option is used;
if the basename the shell was invoked with was
.Dq rsh ;
or if the
.Ev SHELL
parameter is set to
.Dq rsh .
The following restrictions come into effect after the shell processes any
profile and
.Ev ENV
files:
.Pp
.Bl -bullet -compact
.It
The
.Ic cd
command is disabled.
.It
The
.Ev SHELL ,
.Ev ENV ,
and
.Ev PATH
parameters cannot be changed.
.It
Command names can't be specified with absolute or relative paths.
.It
The
.Fl p
option of the built-in command
.Ic command
can't be used.
.It
Redirections that create files can't be used (i.e.\&
.Ql \*(Gt ,
.Ql \*(Gt\*(Ba ,
.Ql \*(Gt\*(Gt ,
.Ql \*(Lt\*(Gt ) .
.El
d61 5
a65 2
The shell reads commands from standard input; all non-option arguments
are positional parameters.
d68 6
a73 1
In addition to the above, the options described in the
d75 61
a135 3
built-in command can also be used on the command line:
both
.Op Fl +abCefhkmnuvXx
d137 15
a151 2
.Op Fl +o Ar option
can be used for single letter or long options, respectively.
d153 51
a203 97
If neither the
.Fl c
nor the
.Fl s
option is specified, the first non-option argument specifies the name
of a file the shell reads commands from.
If there are no non-option
arguments, the shell reads commands from the standard input.
The name of the shell (i.e. the contents of $0)
is determined as follows: if the
.Fl c
option is used and there is a non-option argument, it is used as the name;
if commands are being read from a file, the file is used as the name;
otherwise, the basename the shell was called with (i.e. argv[0]) is used.
.Pp
If the
.Ev ENV
parameter is set when an interactive shell starts (or,
in the case of login shells,
after any profiles are processed), its value is subjected to parameter,
command, arithmetic, and tilde
.Pq Sq ~
substitution and the resulting file
(if any) is read and executed.
.Pp
The exit status of the shell is 127 if the command file specified on the
command line could not be opened, or non-zero if a fatal syntax error
occurred during the execution of a script.
In the absence of fatal errors,
the exit status is that of the last command executed, or zero, if no
command is executed.
.Ss Command syntax
The shell begins parsing its input by breaking it into
.Em words .
Words, which are sequences of characters, are delimited by unquoted whitespace
characters (space, tab, and newline) or meta-characters
.Po
.Ql \*(Lt ,
.Ql \*(Gt ,
.Ql \*(Ba ,
.Ql \&; ,
.Ql \&( ,
.Ql \&) ,
and
.Ql &
.Pc .
Aside from delimiting words, spaces and tabs are ignored, while newlines
usually delimit commands.
The meta-characters are used in building the following
.Em tokens :
.Ql \*(Lt ,
.Ql \*(Lt& ,
.Ql \*(Lt\*(Lt ,
.Ql \*(Gt ,
.Ql \*(Gt& ,
.Ql \*(Gt\*(Gt ,
etc. are used to specify redirections (see
.Sx Input/output redirection
below);
.Ql \*(Ba
is used to create pipelines;
.Ql \&;
is used to separate commands;
.Ql &
is used to create asynchronous pipelines;
.Ql &&
and
.Ql ||
are used to specify conditional execution;
.Ql ;;
is used in
.Ic case
statements;
and lastly,
.Ql \&( .. )\&
is used to create subshells.
.Pp
Whitespace and meta-characters can be quoted individually using a backslash
.Pq Sq \e ,
or in groups using double
.Pq Sq \&"
or single
.Pq Sq '
quotes.
Note that the following characters are also treated specially by the
shell and must be quoted if they are to represent themselves:
.Ql \e ,
.Ql \&" ,
.Ql ' ,
.Ql # ,
.Ql $ ,
.Ql ` ,
.Ql ~ ,
.Ql { ,
.Ql } ,
.Ql * ,
.Ql \&? ,
d205 1
a205 40
.Ql \&[ .
The first three of these are the above mentioned quoting characters (see
.Sx Quoting
below);
.Ql # ,
if used at the beginning of a word, introduces a comment \(em everything after
the
.Ql #
up to the nearest newline is ignored;
.Ql $
is used to introduce parameter, command, and arithmetic substitutions (see
.Sx Substitution
below);
.Ql `
introduces an old-style command substitution (see
.Sx Substitution
below);
.Ql ~
begins a directory expansion (see
.Sx Tilde expansion
below);
and finally,
.Ql * ,
.Ql \&? ,
and
.Ql \&[
are used in file name generation (see
.Sx File name patterns
below).
.Pp
As words and tokens are parsed, the shell builds commands, of which there
are two basic types:
.Em simple-commands ,
typically programs that are executed, and
.Em compound-commands ,
such as
.Ic for
and
.Ic if
statements, grouping constructs, and function definitions.
d207 13
a219 14
A simple-command consists of some combination of parameter assignments
(see
.Sx Parameters
below),
input/output redirections (see
.Sx Input/output redirections
below),
and command words; the only restriction is that parameter assignments come
before any command words.
The command words, if any, define the command
that is to be executed and its arguments.
The command may be a shell built-in command, a function,
or an external command
(i.e. a separate executable file that is located using the
d221 53
a273 94
parameter; see
.Sx Command execution
below).
Note that all command constructs have an exit status: for external commands,
this is related to the status returned by
.Xr wait 2
(if the command could not be found, the exit status is 127; if it could not
be executed, the exit status is 126); the exit status of other command
constructs (built-in commands, functions, compound-commands, pipelines, lists,
etc.) are all well-defined and are described where the construct is
described.
The exit status of a command consisting only of parameter
assignments is that of the last command substitution performed during the
parameter assignment or 0 if there were no command substitutions.
.Pp
Commands can be chained together using the
.Ql |
token to form pipelines, in which the standard output of each command but the
last is piped (see
.Xr pipe 2 )
to the standard input of the following command.
The exit status of a pipeline is that of its last command.
A pipeline may be prefixed by the
.Ql \&!
reserved word, which causes the exit status of the pipeline to be logically
complemented: if the original status was 0, the complemented status will be 1;
if the original status was not 0, the complemented status will be 0.
.Pp
.Em Lists
of commands can be created by separating pipelines by any of the following
tokens:
.Ql && ,
.Ql || ,
.Ql & ,
.Ql |& ,
and
.Ql \&; .
The first two are for conditional execution:
.Dq Ar cmd1 No && Ar cmd2
executes
.Ar cmd2
only if the exit status of
.Ar cmd1
is zero;
.Ql ||
is the opposite \(em
.Ar cmd2
is executed only if the exit status of
.Ar cmd1
is non-zero.
.Ql &&
and
.Ql ||
have equal precedence which is higher than that of
.Ql & ,
.Ql |& ,
and
.Ql \&; ,
which also have equal precedence.
Note that the
.Ql &&
and
.Ql ||
operators are
.Qq left-associative .
For example, both of these commands will print only
.Qq bar :
.Bd -literal -offset indent
$ false && echo foo || echo bar
$ true || echo foo && echo bar
.Ed
.Pp
The
.Ql &
token causes the preceding command to be executed asynchronously; that is,
the shell starts the command but does not wait for it to complete (the shell
does keep track of the status of asynchronous commands; see
.Sx Job control
below).
When an asynchronous command is started when job control is disabled
(i.e. in most scripts), the command is started with signals
.Dv SIGINT
and
.Dv SIGQUIT
ignored and with input redirected from
.Pa /dev/null
(however, redirections specified in the asynchronous command have precedence).
Note that a command must follow the
.Ql &&
and
.Ql ||
operators, while it need not follow
.Ql & ,
.Ql |& ,
d275 7
a281 16
.Ql \&; .
The exit status of a list is that of the last command executed, with the
exception of asynchronous lists, for which the exit status is 0.
.Pp
Compound commands are created using the following reserved words.
These words
are only recognized if they are unquoted and if they are used as the first
word of a command (i.e. they can't be preceded by parameter assignments or
redirections):
.Bd -literal -offset indent
case   esac       in       while   ]]
do     fi         name     !       {
done   for        select   (       }
elif   function   then     )
else   if         until    [[
.Ed
d283 3
a285 170
.Sy Note :
Some shells (but not this one) execute control structure commands in a
subshell when one or more of their file descriptors are redirected, so any
environment changes inside them may fail.
To be portable, the
.Ic exec
statement should be used instead to redirect file descriptors before the
control structure.
.Pp
In the following compound command descriptions, command lists (denoted as
.Em list )
that are followed by reserved words must end with a semicolon, a newline, or
a (syntactically correct) reserved word.
For example, the following are all valid:
.Bd -literal -offset indent
$ { echo foo; echo bar; }
$ { echo foo; echo bar\*(Ltnewline\*(Gt }
$ { { echo foo; echo bar; } }
.Ed
.Pp
This is not valid:
.Pp
.Dl $ { echo foo; echo bar }
.Bl -tag -width Ds
.It Pq Ar list
Execute
.Ar list
in a subshell.
There is no implicit way to pass environment changes from a
subshell back to its parent.
.It { Ar list ; No }
Compound construct;
.Ar list
is executed, but not in a subshell.
Note that
.Ql {
and
.Ql }
are reserved words, not meta-characters.
.It Xo case Ar word No in
.Oo Op \&(
.Ar pattern
.Op | Ar pattern
.No ... )
.Ar list No ;;\ \& Oc ... esac
.Xc
The
.Ic case
statement attempts to match
.Ar word
against a specified
.Ar pattern ;
the
.Ar list
associated with the first successfully matched pattern is executed.
Patterns used in
.Ic case
statements are the same as those used for file name patterns except that the
restrictions regarding
.Ql \&.
and
.Ql /
are dropped.
Note that any unquoted space before and after a pattern is
stripped; any space within a pattern must be quoted.
Both the word and the
patterns are subject to parameter, command, and arithmetic substitution, as
well as tilde substitution.
For historical reasons, open and close braces may be used instead of
.Ic in
and
.Ic esac
e.g.\&
.Ic case $foo { *) echo bar; } .
The exit status of a
.Ic case
statement is that of the executed
.Ar list ;
if no
.Ar list
is executed, the exit status is zero.
.It Xo for Ar name
.Oo in Ar word No ... Oc ;
.No do Ar list ; No done
.Xc
For each
.Ar word
in the specified word list, the parameter
.Ar name
is set to the word and
.Ar list
is executed.
If
.Ic in
is not used to specify a word list, the positional parameters
($1, $2, etc.)\&
are used instead.
For historical reasons, open and close braces may be used instead of
.Ic do
and
.Ic done
e.g.\&
.Ic for i; { echo $i; } .
The exit status of a
.Ic for
statement is the last exit status of
.Ar list ;
if
.Ar list
is never executed, the exit status is zero.
.It Xo if Ar list ;
.No then Ar list ;
.Oo elif Ar list ;
.No then Ar list ; Oc
.No ...
.Oo else Ar list ; Oc
.No fi
.Xc
If the exit status of the first
.Ar list
is zero, the second
.Ar list
is executed; otherwise, the
.Ar list
following the
.Ic elif ,
if any, is executed with similar consequences.
If all the lists following the
.Ic if
and
.Ic elif Ns s
fail (i.e. exit with non-zero status), the
.Ar list
following the
.Ic else
is executed.
The exit status of an
.Ic if
statement is that of non-conditional
.Ar list
that is executed; if no non-conditional
.Ar list
is executed, the exit status is zero.
.It Xo select Ar name
.Oo in Ar word No ... Oc ;
.No do Ar list ; No done
.Xc
The
.Ic select
statement provides an automatic method of presenting the user with a menu and
selecting from it.
An enumerated list of the specified
.Ar word Ns (s)
is printed on standard error, followed by a prompt
.Po
.Ev PS3: normally
.Sq #?\ \&
.Pc .
A number corresponding to one of the enumerated words is then read from
standard input,
.Ar name
is set to the selected word (or unset if the selection is not valid),
.Ev REPLY
is set to what was read (leading/trailing space is stripped), and
.Ar list
is executed.
If a blank line (i.e. zero or more
.Ev IFS
characters) is entered, the menu is reprinted without executing
.Ar list .
d287 12
a298 132
When
.Ar list
completes, the enumerated list is printed if
.Ev REPLY
is
.Dv NULL ,
the prompt is printed, and so on.
This process continues until an end-of-file
is read, an interrupt is received, or a
.Ic break
statement is executed inside the loop.
If
.Dq in word ...
is omitted, the positional parameters are used
(i.e. $1, $2, etc.).
For historical reasons, open and close braces may be used instead of
.Ic do
and
.Ic done
e.g.\&
.Ic select i; { echo $i; } .
The exit status of a
.Ic select
statement is zero if a
.Ic break
statement is used to exit the loop, non-zero otherwise.
.It Xo until Ar list ;
.No do Ar list ;
.No done
.Xc
This works like
.Ic while ,
except that the body is executed only while the exit status of the first
.Ar list
is non-zero.
.It Xo while Ar list ;
.No do Ar list ;
.No done
.Xc
A
.Ic while
is a pre-checked loop.
Its body is executed as often as the exit status of the first
.Ar list
is zero.
The exit status of a
.Ic while
statement is the last exit status of the
.Ar list
in the body of the loop; if the body is not executed, the exit status is zero.
.It Xo function Ar name
.No { Ar list ; No }
.Xc
Defines the function
.Ar name
(see
.Sx Functions
below).
Note that redirections specified after a function definition are
performed whenever the function is executed, not when the function definition
is executed.
.It Ar name Ns () Ar command
Mostly the same as
.Ic function
(see
.Sx Functions
below).
.It Bq Bq Ar \ \&expression\ \&
Similar to the
.Ic test
and
.Ic \&[ ... \&]
commands (described later), with the following exceptions:
.Bl -bullet -offset indent
.It
Field splitting and file name generation are not performed on arguments.
.It
The
.Fl a
.Pq AND
and
.Fl o
.Pq OR
operators are replaced with
.Ql &&
and
.Ql || ,
respectively.
.It
Operators (e.g.\&
.Sq Fl f ,
.Sq = ,
.Sq \&! )
must be unquoted.
.It
The second operand of the
.Sq !=
and
.Sq =
expressions are patterns (e.g. the comparison
.Ic [[ foobar = f*r ]]
succeeds).
.It
There are two additional binary operators,
.Ql \*(Lt
and
.Ql \*(Gt ,
which return true if their first string operand is less than, or greater than,
their second string operand, respectively.
.It
The single argument form of
.Ic test ,
which tests if the argument has a non-zero length, is not valid; explicit
operators must always be used e.g. instead of
.No \&[ Ar str No \&]
use
.No \&[[ -n Ar str No \&]] .
.It
Parameter, command, and arithmetic substitutions are performed as expressions
are evaluated and lazy expression evaluation is used for the
.Ql &&
and
.Ql ||
operators.
This means that in the following statement,
.Ic $(\*(Lt foo)
is evaluated if and only if the file
.Pa foo
exists and is readable:
.Bd -literal -offset indent
$ [[ -r foo && $(\*(Lt foo) = b*r ]]
.Ed
d300 6
a305 42
.El
.Ss Quoting
Quoting is used to prevent the shell from treating characters or words
specially.
There are three methods of quoting.
First,
.Ql \e
quotes the following character, unless it is at the end of a line, in which
case both the
.Ql \e
and the newline are stripped.
Second, a single quote
.Pq Sq '
quotes everything up to the next single quote (this may span lines).
Third, a double quote
.Pq Sq \&"
quotes all characters, except
.Ql $ ,
.Ql `
and
.Ql \e ,
up to the next unquoted double quote.
.Ql $
and
.Ql `
inside double quotes have their usual meaning (i.e. parameter, command, or
arithmetic substitution) except no field splitting is carried out on the
results of double-quoted substitutions.
If a
.Ql \e
inside a double-quoted string is followed by
.Ql \e ,
.Ql $ ,
.Ql ` ,
or
.Ql \&" ,
it is replaced by the second character; if it is followed by a newline, both
the
.Ql \e
and the newline are stripped; otherwise, both the
.Ql \e
and the character following are unchanged.
d307 3
a309 17
.Sy Note :
See
.Sx POSIX mode
below for a special rule regarding
differences in quoting when the shell is in POSIX mode.
.Ss Aliases
There are two types of aliases: normal command aliases and tracked aliases.
Command aliases are normally used as a short hand for a long or often used
command.
The shell expands command aliases (i.e. substitutes the alias name
for its value) when it reads the first word of a command.
An expanded alias is re-processed to check for more aliases.
If a command alias ends in a
space or tab, the following word is also checked for alias expansion.
The alias expansion process stops when a word that is not an alias is found,
when a quoted word is found, or when an alias word that is currently being
expanded is found.
d311 3
a313 16
The following command aliases are defined automatically by the shell:
.Bd -literal -offset indent
hash='alias -t'
type='whence -v'
.Ed
.Pp
Tracked aliases allow the shell to remember where it found a particular
command.
The first time the shell does a path search for a command that is
marked as a tracked alias, it saves the full path of the command.
The next
time the command is executed, the shell checks the saved path to see that it
is still valid, and if so, avoids repeating the path search.
Tracked aliases can be listed and created using
.Ic alias -t .
Note that changing the
d315 11
a325 71
parameter clears the saved paths for all tracked aliases.
If the
.Ic trackall
option is set (i.e.\&
.Ic set -o Ic trackall
or
.Ic set -h ) ,
the shell tracks all commands.
This option is set automatically for non-interactive shells.
For interactive shells, only the following commands are
automatically tracked:
.Xr cat 1 ,
.Xr cc 1 ,
.Xr chmod 1 ,
.Xr cp 1 ,
.Xr date 1 ,
.Xr ed 1 ,
.Xr emacs 1 ,
.Xr grep 1 ,
.Xr ls 1 ,
.Xr mail 1 ,
.Xr make 1 ,
.Xr mv 1 ,
.Xr pr 1 ,
.Xr rm 1 ,
.Xr sed 1 ,
.Xr vi 1 ,
and
.Xr who 1 .
.Ss Substitution
The first step the shell takes in executing a simple-command is to perform
substitutions on the words of the command.
There are three kinds of
substitution: parameter, command, and arithmetic.
Parameter substitutions,
which are described in detail in the next section, take the form
.Pf $ Ns Ar name
or
.Pf ${ Ns Ar ... Ns } ;
command substitutions take the form
.Pf $( Ns Ar command Ns \&)
or
.Pf ` Ns Ar command Ns ` ;
and arithmetic substitutions take the form
.Pf $(( Ns Ar expression Ns )) .
.Pp
If a substitution appears outside of double quotes, the results of the
substitution are generally subject to word or field splitting according to
the current value of the
.Ev IFS
parameter.
The
.Ev IFS
parameter specifies a list of characters which are used to break a string up
into several words; any characters from the set space, tab, and newline that
appear in the
.Ev IFS
characters are called
.Dq IFS whitespace .
Sequences of one or more
.Ev IFS
whitespace characters, in combination with zero or one
.Pf non- Ev IFS
whitespace
characters, delimit a field.
As a special case, leading and trailing
.Ev IFS
whitespace is stripped (i.e. no leading or trailing empty field is created by
it); leading
.Pf non- Ev IFS
whitespace does create an empty field.
d327 8
a334 50
Example: If
.Ev IFS
is set to
.Dq \*(Ltspace\*(Gt: ,
and VAR is set to
.Dq \*(Ltspace\*(GtA\*(Ltspace\*(Gt:\*(Ltspace\*(Gt\*(Ltspace\*(GtB::D ,
the substitution for $VAR results in four fields:
.Sq A ,
.Sq B ,
.Sq
(an empty field),
and
.Sq D .
Note that if the
.Ev IFS
parameter is set to the
.Dv NULL
string, no field splitting is done; if the parameter is unset, the default
value of space, tab, and newline is used.
.Pp
Also, note that the field splitting applies only to the immediate result of
the substitution.
Using the previous example, the substitution for $VAR:E
results in the fields:
.Sq A ,
.Sq B ,
.Sq ,
and
.Sq D:E ,
not
.Sq A ,
.Sq B ,
.Sq ,
.Sq D ,
and
.Sq E .
This behavior is POSIX compliant, but incompatible with some other shell
implementations which do field splitting on the word which contained the
substitution or use
.Dv IFS
as a general whitespace delimiter.
.Pp
The results of substitution are, unless otherwise specified, also subject to
file name expansion (see the relevant section below).
.Pp
A command substitution is replaced by the output generated by the specified
command, which is run in a subshell.
For
.Pf $( Ns Ar command Ns \&)
substitutions, normal quoting rules are used when
d336 3
a338 7
is parsed; however, for the
.Pf ` Ns Ar command Ns `
form, a
.Ql \e
followed by any of
.Ql $ ,
.Ql ` ,
d340 46
a385 103
.Ql \e
is stripped (a
.Ql \e
followed by any other character is unchanged).
As a special case in command substitutions, a command of the form
.Pf \*(Lt Ar file
is interpreted to mean substitute the contents of
.Ar file .
Note that
.Ic $(\*(Lt foo)
has the same effect as
.Ic $(cat foo) ,
but it is carried out more efficiently because no process is started.
.Pp
.Sy Note :
.Pf $( Ns Ar command Ns \&)
expressions are currently parsed by finding the matching parenthesis,
regardless of quoting.
This should be fixed soon.
.Pp
Arithmetic substitutions are replaced by the value of the specified expression.
For example, the command
.Ic echo $((2+3*4))
prints 14.
See
.Sx Arithmetic expressions
for a description of an expression.
.Ss Parameters
Parameters are shell variables; they can be assigned values and their values
can be accessed using a parameter substitution.
A parameter name is either one
of the special single punctuation or digit character parameters described
below, or a letter followed by zero or more letters or digits
.Po
.Ql _
counts as a letter
.Pc .
Parameter substitutions take the form
.Pf $ Ns Ar name ,
.Pf ${ Ns Ar name Ns } ,
or
.Sm off
.Pf ${ Ar name Oo Ar expr Oc }
.Sm on
where
.Ar name
is a parameter name.
If substitution is performed on a parameter
that is not set, a null string is substituted unless the
.Ic nounset
option
.Po
.Ic set Fl o Ic nounset
or
.Ic set Fl u
.Pc
is set, in which case an error occurs.
.Pp
Parameters can be assigned values in a number of ways.
First, the shell implicitly sets some parameters like
.Ql # ,
.Ql PWD ,
and
.Ql $ ;
this is the only way the special single character parameters are set.
Second, parameters are imported from the shell's environment at startup.
Third, parameters can be assigned values on the command line: for example,
.Ic FOO=bar
sets the parameter
.Dq FOO
to
.Dq bar ;
multiple parameter assignments can be given on a single command line and they
can be followed by a simple-command, in which case the assignments are in
effect only for the duration of the command (such assignments are also
exported; see below for the implications of this).
Note that both the parameter name and the
.Ql =
must be unquoted for the shell to recognize a parameter assignment.
The fourth way of setting a parameter is with the
.Ic export ,
.Ic readonly ,
and
.Ic typeset
commands; see their descriptions in the
.Sx Command execution
section.
Fifth,
.Ic for
loops set parameters as well as the
.Ic getopts ,
.Ic read ,
and
.Ic set -A
commands.
Lastly, parameters can be assigned values using assignment operators
inside arithmetic expressions (see
.Sx Arithmetic expressions
below) or using the
.Sm off
.Pf ${ Ar name No = Ar value No }
.Sm on
form of the parameter substitution (see below).
d387 1
a387 1
Parameters with the export attribute (set using the
d389 5
a393 69
or
.Ic typeset Fl x
commands, or by parameter assignments followed by simple commands) are put in
the environment (see
.Xr environ 7 )
of commands run by the shell as
.Ar name Ns = Ns Ar value
pairs.
The order in which parameters appear in the environment of a command is
unspecified.
When the shell starts up, it extracts parameters and their values
from its environment and automatically sets the export attribute for those
parameters.
.Pp
Modifiers can be applied to the
.Pf ${ Ns Ar name Ns }
form of parameter substitution:
.Bl -tag -width Ds
.Sm off
.It ${ Ar name No :- Ar word No }
.Sm on
If
.Ar name
is set and not
.Dv NULL ,
it is substituted; otherwise,
.Ar word
is substituted.
.Sm off
.It ${ Ar name No :+ Ar word No }
.Sm on
If
.Ar name
is set and not
.Dv NULL ,
.Ar word
is substituted; otherwise, nothing is substituted.
.Sm off
.It ${ Ar name No := Ar word No }
.Sm on
If
.Ar name
is set and not
.Dv NULL ,
it is substituted; otherwise, it is assigned
.Ar word
and the resulting value of
.Ar name
is substituted.
.Sm off
.It ${ Ar name No :? Ar word No }
.Sm on
If
.Ar name
is set and not
.Dv NULL ,
it is substituted; otherwise,
.Ar word
is printed on standard error (preceded by
.Ar name : )
and an error occurs (normally causing termination of a shell script, function,
or script sourced using the
.Sq \&.
built-in).
If
.Ar word
is omitted, the string
.Dq parameter null or not set
is used instead.
d395 13
d409 3
a411 12
In the above modifiers, the
.Ql \&:
can be omitted, in which case the conditions only depend on
.Ar name
being set (as opposed to set and not
.Dv NULL ) .
If
.Ar word
is needed, parameter, command, arithmetic, and tilde substitution are performed
on it; if
.Ar word
is not needed, it is not evaluated.
d413 22
a434 1
The following forms of parameter substitution can also be used:
d436 44
a479 3
.Bl -tag -width Ds -compact
.It Pf ${# Ns Ar name Ns \&}
The number of positional parameters if
d481 6
a486 5
is
.Ql * ,
.Ql @@ ,
or not specified; otherwise the length of the string value of parameter
.Ar name .
d488 20
a507 4
.It Pf ${# Ns Ar name Ns [*]}
.It Pf ${# Ns Ar name Ns [@@]}
The number of elements in the array
.Ar name .
d509 3
a511 19
.Sm off
.It Xo
.Pf ${ Ar name
.Pf # Ar pattern No }
.Xc
.It Xo
.Pf ${ Ar name
.Pf ## Ar pattern No }
.Xc
.Sm on
If
.Ar pattern
matches the beginning of the value of parameter
.Ar name ,
the matched text is deleted from the result of substitution.
A single
.Ql #
results in the shortest match, and two
of them result in the longest match.
d513 5
a517 11
.Sm off
.It Xo
.Pf ${ Ar name
.Pf % Ar pattern No }
.Xc
.It Xo
.Pf ${ Ar name
.Pf %% Ar pattern No }
.Xc
.Sm on
Like ${..#..} substitution, but it deletes from the end of the value.
d520 20
a539 68
The following special parameters are implicitly set by the shell and cannot be
set directly using assignments:
.Bl -tag -width "1 ... 9"
.It Ev \&!
Process ID of the last background process started.
If no background processes have been started, the parameter is not set.
.It Ev \&#
The number of positional parameters ($1, $2, etc.).
.It Ev \&$
The PID of the shell, or the PID of the original shell if it is a subshell.
Do
.Em NOT
use this mechanism for generating temporary file names; see
.Xr mktemp 1
instead.
.It Ev -
The concatenation of the current single letter options (see the
.Ic set
command below for a list of options).
.It Ev \&?
The exit status of the last non-asynchronous command executed.
If the last command was killed by a signal,
.Ic $?\&
is set to 128 plus the signal number.
.It Ev 0
The name of the shell, determined as follows:
the first argument to
.Nm
if it was invoked with the
.Fl c
option and arguments were given; otherwise the
.Ar file
argument, if it was supplied;
or else the basename the shell was invoked with (i.e.\&
.Li argv[0] ) .
.Ev $0
is also set to the name of the current script or
the name of the current function, if it was defined with the
.Ic function
keyword (i.e. a Korn shell style function).
.It Ev 1 No ... Ev 9
The first nine positional parameters that were supplied to the shell, function,
or script sourced using the
.Sq \&.
built-in.
Further positional parameters may be accessed using
.Pf ${ Ar number Ns } .
.It Ev *
All positional parameters (except parameter 0) i.e. $1, $2, $3, ...
If used
outside of double quotes, parameters are separate words (which are subjected
to word splitting); if used within double quotes, parameters are separated
by the first character of the
.Ev IFS
parameter (or the empty string if
.Ev IFS
is
.Dv NULL ) .
.It Ev @@
Same as
.Ic $* ,
unless it is used inside double quotes, in which case a separate word is
generated for each positional parameter.
If there are no positional parameters, no word is generated.
.Ic $@@
can be used to access arguments, verbatim, without losing
.Dv NULL
arguments or splitting arguments with spaces.
d541 11
d553 3
a555 81
The following parameters are set and/or used by the shell:
.Bl -tag -width "EXECSHELL"
.It Ev CDPATH
Search path for the
.Ic cd
built-in command.
It works the same way as
.Ev PATH
for those directories not beginning with
.Ql /
in
.Ic cd
commands.
Note that if
.Ev CDPATH
is set and does not contain
.Sq \&.
or contains an empty path, the current directory is not searched.
Also, the
.Ic cd
built-in command will display the resulting directory when a match is found
in any search path other than the empty path.
.It Ev COLUMNS
Set to the number of columns on the terminal or window.
Currently set to the
.Dq cols
value as reported by
.Xr stty 1
if that value is non-zero.
This parameter is used by the
.Ic set -o
and
.Ic kill -l
commands to format information columns.
.It Ev ENV
If this parameter is found to be set after any profile files are executed, the
expanded value is used as a shell startup file.
It typically contains function and alias definitions.
.It Ev ERRNO
Integer value of the shell's
.Va errno
variable.
It indicates the reason the last system call failed.
Not yet implemented.
.It Ev EXECSHELL
If set, this parameter is assumed to contain the shell that is to be used to
execute commands that
.Xr execve 2
fails to execute and which do not start with a
.Dq #! Ns Ar shell
sequence.
.It Ev FCEDIT
The editor used by the
.Ic fc
command (see below).
.It Ev FPATH
Like
.Ev PATH ,
but used when an undefined function is executed to locate the file defining the
function.
It is also searched when a command can't be found using
.Ev PATH .
See
.Sx Functions
below for more information.
.It Ev HOME
The default directory for the
.Ic cd
command and the value substituted for an unqualified
.Ic ~
(see
.Sx Tilde expansion
below).
.It Ev IFS
Internal field separator, used during substitution and by the
.Ic read
command, to split values into distinct arguments; normally set to space, tab,
and newline.
See
.Sx Substitution
above for details.
d557 22
a578 128
.Sy Note :
This parameter is not imported from the environment when the shell is
started.
.It Ev SH_VERSION
The version of shell and the date the version was created (read-only).
.It Ev LINENO
The line number of the function or shell script that is currently being
executed.
.It Ev LINES
Set to the number of lines on the terminal or window.
.It Ev OLDPWD
The previous working directory.
Unset if
.Ic cd
has not successfully changed directories since the shell started, or if the
shell doesn't know where it is.
.It Ev OPTARG
When using
.Ic getopts ,
it contains the argument for a parsed option, if it requires one.
.It Ev OPTIND
The index of the next argument to be processed when using
.Ic getopts .
Assigning 1 to this parameter causes
.Ic getopts
to process arguments from the beginning the next time it is invoked.
.It Ev PATH
A colon separated list of directories that are searched when looking for
commands and files sourced using the
.Sq \&.
command (see below).
An empty string resulting from a leading or trailing
colon, or two adjacent colons, is treated as a
.Sq \&.
(the current directory).
.It Ev POSIXLY_CORRECT
If set, this parameter causes the
.Ic posix
option to be enabled.
See
.Sx POSIX mode
below.
.It Ev PPID
The process ID of the shell's parent (read-only).
.It Ev PS1
The primary prompt for interactive shells.
Parameter, command, and arithmetic
substitutions are performed.
.Ql \&!
is replaced with the current command number (see the
.Ic fc
command below).
A literal
.Ql \&!
can be put in the prompt by placing
.Ql !!
in
.Ev PS1 .
The default is
.Sq $\ \&
for non-root users,
.Sq #\ \&
for root.
.It Ev PS2
Secondary prompt string, by default
.Sq \*(Gt\ \& ,
used when more input is needed to complete a command.
.It Ev PS4
Used to prefix commands that are printed during execution tracing (see the
.Ic set Fl x
command below).
Parameter, command, and arithmetic substitutions are performed
before it is printed.
The default is
.Sq +\ \& .
.It Ev PWD
The current working directory.
May be unset or
.Dv NULL
if the shell doesn't know where it is.
.It Ev REPLY
Default parameter for the
.Ic read
command if no names are given.
.It Ev TMPDIR
The directory temporary shell files are created in.
If this parameter is not
set, or does not contain the absolute path of a writable directory, temporary
files are created in
.Pa /tmp .
.El
.Ss Tilde expansion
Tilde expansion, which is done in parallel with parameter substitution, is done
on words starting with an unquoted
.Ql ~ .
The characters following the tilde, up to the first
.Ql / ,
if any, are assumed to be a login name.
If the login name is empty,
.Ql + ,
or
.Ql - ,
the value of the
.Ev HOME ,
.Ev PWD ,
or
.Ev OLDPWD
parameter is substituted, respectively.
Otherwise, the password file is
searched for the login name, and the tilde expression is substituted with the
user's home directory.
If the login name is not found in the password file or
if any quoting or parameter substitution occurs in the login name, no
substitution is performed.
.Pp
In parameter assignments
(such as those preceding a simple-command or those occurring
in the arguments of
.Ic alias ,
.Ic export ,
.Ic readonly ,
and
.Ic typeset ) ,
tilde expansion is done after any assignment
(i.e. after the equals sign)
or after an unquoted colon
.Pq Sq \&: ;
login names are also delimited by colons.
d580 1
a580 60
The home directory of previously expanded login names are cached and re-used.
The
.Ic alias -d
command may be used to list, change, and add to this cache (e.g.\&
.Ic alias -d fac=/usr/local/facilities; cd ~fac/bin ) .
.Ss File name patterns
A file name pattern is a word containing one or more unquoted
.Ql \&? ,
.Ql * ,
.Ql + ,
.Ql @@ ,
or
.Ql \&!
characters or
.Dq [..]
sequences.
The shell replaces file
name patterns with the sorted names of all the files that match the pattern
(if no files match, the word is left unchanged).
The pattern elements have the following meaning:
.Bl -tag -width Ds
.It \&?
Matches any single character.
.It \&*
Matches any sequence of characters.
.It [..]
Matches any of the characters inside the brackets.
Ranges of characters can be
specified by separating two characters by a
.Ql -
(e.g.\&
.Dq [a0-9]
matches the letter
.Sq a
or any digit).
In order to represent itself, a
.Ql -
must either be quoted or the first or last character in the character list.
Similarly, a
.Ql \&]
must be quoted or the first character in the list if it is to represent itself
instead of the end of the list.
Also, a
.Ql \&!
appearing at the start of the list has special meaning (see below), so to
represent itself it must be quoted or appear later in the list.
.Pp
Within a bracket expression, the name of a
.Em character class
enclosed in
.Sq [:
and
.Sq :]
stands for the list of all characters belonging to that class.
Supported character classes:
.Bd -literal -offset indent
alnum	cntrl	lower	space
alpha	digit	print	upper
blank	graph	punct	xdigit
.Ed
d582 27
a608 70
These match characters using the macros specified in
.Xr isalnum 3 ,
.Xr isalpha 3 ,
and so on.
A character class may not be used as an endpoint of a range.
.It [!..]
Like [..],
except it matches any character not inside the brackets.
.Sm off
.It *( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches any string of characters that matches zero or more occurrences of the
specified patterns.
Example: The pattern
.Ic *(foo|bar)
matches the strings
.Dq ,
.Dq foo ,
.Dq bar ,
.Dq foobarfoo ,
etc.
.Sm off
.It +( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches any string of characters that matches one or more occurrences of the
specified patterns.
Example: The pattern
.Ic +(foo|bar)
matches the strings
.Dq foo ,
.Dq bar ,
.Dq foobar ,
etc.
.Sm off
.It ?( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches the empty string or a string that matches one of the specified
patterns.
Example: The pattern
.Ic ?(foo|bar)
only matches the strings
.Dq ,
.Dq foo ,
and
.Dq bar .
.Sm off
.It @@( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches a string that matches one of the specified patterns.
Example: The pattern
.Ic @@(foo|bar)
only matches the strings
.Dq foo
and
.Dq bar .
.Sm off
.It !( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches any string that does not match one of the specified patterns.
Examples: The pattern
.Ic !(foo|bar)
matches all strings except
.Dq foo
and
.Dq bar ;
the pattern
.Ic !(*)
matches no strings; the pattern
.Ic !(?)*\&
matches all strings (think about it).
d610 2
d613 11
a623 121
Note that
.Nm pdksh
currently never matches
.Sq \&.
and
.Sq .. ,
but the original
.Nm ksh ,
Bourne
.Nm sh ,
and bash do, so this may have to change (too bad).
.Pp
Note that none of the above pattern elements match either a period
.Pq Sq \&.
at the start of a file name or a slash
.Pq Sq / ,
even if they are explicitly used in a [..] sequence; also, the names
.Sq \&.
and
.Sq ..
are never matched, even by the pattern
.Sq .* .
.Pp
If the
.Ic markdirs
option is set, any directories that result from file name generation are marked
with a trailing
.Ql / .
.Ss Input/output redirection
When a command is executed, its standard input, standard output, and standard
error (file descriptors 0, 1, and 2, respectively) are normally inherited from
the shell.
Three exceptions to this are commands in pipelines, for which
standard input and/or standard output are those set up by the pipeline,
asynchronous commands created when job control is disabled, for which standard
input is initially set to be from
.Pa /dev/null ,
and commands for which any of the following redirections have been specified:
.Bl -tag -width Ds
.It \*(Gt Ar file
Standard output is redirected to
.Ar file .
If
.Ar file
does not exist, it is created; if it does exist, is a regular file, and the
.Ic noclobber
option is set, an error occurs; otherwise, the file is truncated.
Note that this means the command
.Ic cmd \*(Lt foo \*(Gt foo
will open
.Ar foo
for reading and then truncate it when it opens it for writing, before
.Ar cmd
gets a chance to actually read
.Ar foo .
.It \*(Gt\*(Ba Ar file
Same as
.Ic \*(Gt ,
except the file is truncated, even if the
.Ic noclobber
option is set.
.It \*(Gt\*(Gt Ar file
Same as
.Ic \*(Gt ,
except if
.Ar file
exists it is appended to instead of being truncated.
Also, the file is opened
in append mode, so writes always go to the end of the file (see
.Xr open 2 ) .
.It \*(Lt Ar file
Standard input is redirected from
.Ar file ,
which is opened for reading.
.It \*(Lt\*(Gt Ar file
Same as
.Ic \*(Lt ,
except the file is opened for reading and writing.
.It \*(Lt\*(Lt Ar marker
After reading the command line containing this kind of redirection (called a
.Dq here document ) ,
the shell copies lines from the command source into a temporary file until a
line matching
.Ar marker
is read.
When the command is executed, standard input is redirected from the
temporary file.
If
.Ar marker
contains no quoted characters, the contents of the temporary file are processed
as if enclosed in double quotes each time the command is executed, so
parameter, command, and arithmetic substitutions are performed, along with
backslash
.Pq Sq \e
escapes for
.Ql $ ,
.Ql ` ,
.Ql \e ,
and
.Ql \enewline .
If multiple here documents are used on the same command line, they are saved in
order.
.It \*(Lt\*(Lt- Ar marker
Same as
.Ic \*(Lt\*(Lt ,
except leading tabs are stripped from lines in the here document.
.It \*(Lt& Ar fd
Standard input is duplicated from file descriptor
.Ar fd .
.Ar fd
can be a single digit, indicating the number of an existing file descriptor;
the letter
.Ql p ,
indicating the file descriptor associated with the output of the current
co-process; or the character
.Ql - ,
indicating standard input is to be closed.
.It \*(Gt& Ar fd
Same as
.Ic \*(Lt& ,
except the operation is done on standard output.
d626 17
a642 42
In any of the above redirections, the file descriptor that is redirected
(i.e. standard input or standard output)
can be explicitly given by preceding the
redirection with a single digit.
Parameter, command, and arithmetic
substitutions, tilde substitutions, and (if the shell is interactive)
file name generation are all performed on the
.Ar file ,
.Ar marker ,
and
.Ar fd
arguments of redirections.
Note, however, that the results of any file name
generation are only used if a single file is matched; if multiple files match,
the word with the expanded file name generation characters is used.
Note
that in restricted shells, redirections which can create files cannot be used.
.Pp
For simple-commands, redirections may appear anywhere in the command; for
compound-commands
.Po
.Ic if
statements, etc.
.Pc ,
any redirections must appear at the end.
Redirections are processed after
pipelines are created and in the order they are given, so the following
will print an error with a line number prepended to it:
.Pp
.D1 $ cat /foo/bar 2\*(Gt&1 \*(Gt /dev/null \*(Ba cat -n
.Ss Arithmetic expressions
Integer arithmetic expressions can be used with the
.Ic let
command, inside $((..)) expressions, inside array references (e.g.\&
.Ar name Ns Bq Ar expr ) ,
as numeric arguments to the
.Ic test
command, and as the value of an assignment to an integer parameter.
.Pp
Expressions may contain alpha-numeric parameter identifiers, array references,
and integer constants and may be combined with the following C operators
(listed and grouped in increasing order of precedence):
d644 3
a646 4
Unary operators:
.Bd -literal -offset indent
+ - ! ~ ++ --
.Ed
d648 3
a650 270
Binary operators:
.Bd -literal -offset indent
,
= *= /= %= += -= \*(Lt\*(Lt= \*(Gt\*(Gt= &= ^= \*(Ba=
\*(Ba\*(Ba
&&
\*(Ba
^
&
== !=
\*(Lt \*(Lt= \*(Gt= \*(Gt
\*(Lt\*(Lt \*(Gt\*(Gt
+ -
* / %
.Ed
.Pp
Ternary operators:
.Bd -literal -offset indent
?: (precedence is immediately higher than assignment)
.Ed
.Pp
Grouping operators:
.Bd -literal -offset indent
( )
.Ed
.Pp
A parameter that is NULL or unset evaluates to 0.
Integer constants may be specified with arbitrary bases using the notation
.Ar base Ns # Ns Ar number ,
where
.Ar base
is a decimal integer specifying the base, and
.Ar number
is a number in the specified base.
Additionally,
integers may be prefixed with
.Sq 0X
or
.Sq 0x
(specifying base 16)
or
.Sq 0
(base 8)
in all forms of arithmetic expressions,
except as numeric arguments to the
.Ic test
command.
.Pp
The operators are evaluated as follows:
.Bl -tag -width Ds -offset indent
.It unary +
Result is the argument (included for completeness).
.It unary -
Negation.
.It \&!
Logical NOT;
the result is 1 if argument is zero, 0 if not.
.It ~
Arithmetic (bit-wise) NOT.
.It ++
Increment; must be applied to a parameter (not a literal or other expression).
The parameter is incremented by 1.
When used as a prefix operator, the result
is the incremented value of the parameter; when used as a postfix operator, the
result is the original value of the parameter.
.It --
Similar to
.Ic ++ ,
except the parameter is decremented by 1.
.It \&,
Separates two arithmetic expressions; the left-hand side is evaluated first,
then the right.
The result is the value of the expression on the right-hand side.
.It =
Assignment; the variable on the left is set to the value on the right.
.It Xo
.No *= /= += -= \*(Lt\*(Lt=
.No \*(Gt\*(Gt= &= ^= \*(Ba=
.Xc
Assignment operators.
.Sm off
.Ao Ar var Ac Xo
.Aq Ar op
.No = Aq Ar expr
.Xc
.Sm on
is the same as
.Sm off
.Ao Ar var Ac Xo
.No = Aq Ar var
.Aq Ar op
.Aq Ar expr ,
.Xc
.Sm on
with any operator precedence in
.Aq Ar expr
preserved.
For example,
.Dq var1 *= 5 + 3
is the same as specifying
.Dq var1 = var1 * (5 + 3) .
.It \*(Ba\*(Ba
Logical OR;
the result is 1 if either argument is non-zero, 0 if not.
The right argument is evaluated only if the left argument is zero.
.It &&
Logical AND;
the result is 1 if both arguments are non-zero, 0 if not.
The right argument is evaluated only if the left argument is non-zero.
.It \*(Ba
Arithmetic (bit-wise) OR.
.It ^
Arithmetic (bit-wise) XOR
(exclusive-OR).
.It &
Arithmetic (bit-wise) AND.
.It ==
Equal; the result is 1 if both arguments are equal, 0 if not.
.It !=
Not equal; the result is 0 if both arguments are equal, 1 if not.
.It \*(Lt
Less than; the result is 1 if the left argument is less than the right, 0 if
not.
.It \*(Lt= \*(Gt= \*(Gt
Less than or equal, greater than or equal, greater than.
See
.Ic \*(Lt .
.It \*(Lt\*(Lt \*(Gt\*(Gt
Shift left (right); the result is the left argument with its bits shifted left
(right) by the amount given in the right argument.
.It + - * /
Addition, subtraction, multiplication, and division.
.It %
Remainder; the result is the remainder of the division of the left argument by
the right.
The sign of the result is unspecified if either argument is negative.
.It Xo
.Sm off
.Aq Ar arg1 ?
.Aq Ar arg2 :
.Aq Ar arg3
.Sm on
.Xc
If
.Aq Ar arg1
is non-zero, the result is
.Aq Ar arg2 ;
otherwise the result is
.Aq Ar arg3 .
.El
.Ss Functions
Functions are defined using either Korn shell
.Ic function Ar function-name
syntax or the Bourne/POSIX shell
.Ar function-name Ns ()
syntax (see below for the difference between the two forms).
Functions are like
.Li .-scripts
(i.e. scripts sourced using the
.Sq \&.
built-in)
in that they are executed in the current environment.
However, unlike
.Li .-scripts ,
shell arguments (i.e. positional parameters $1, $2, etc.)\&
are never visible inside them.
When the shell is determining the location of a command, functions
are searched after special built-in commands, before regular and
non-regular built-ins, and before the
.Ev PATH
is searched.
.Pp
An existing function may be deleted using
.Ic unset Fl f Ar function-name .
A list of functions can be obtained using
.Ic typeset +f
and the function definitions can be listed using
.Ic typeset -f .
The
.Ic autoload
command (which is an alias for
.Ic typeset -fu )
may be used to create undefined functions: when an undefined function is
executed, the shell searches the path specified in the
.Ev FPATH
parameter for a file with the same name as the function, which, if found, is
read and executed.
If after executing the file the named function is found to
be defined, the function is executed; otherwise, the normal command search is
continued (i.e. the shell searches the regular built-in command table and
.Ev PATH ) .
Note that if a command is not found using
.Ev PATH ,
an attempt is made to autoload a function using
.Ev FPATH
(this is an undocumented feature of the original Korn shell).
.Pp
Functions can have two attributes,
.Dq trace
and
.Dq export ,
which can be set with
.Ic typeset -ft
and
.Ic typeset -fx ,
respectively.
When a traced function is executed, the shell's
.Ic xtrace
option is turned on for the function's duration; otherwise, the
.Ic xtrace
option is turned off.
The
.Dq export
attribute of functions is currently not used.
In the original Korn shell,
exported functions are visible to shell scripts that are executed.
.Pp
Since functions are executed in the current shell environment, parameter
assignments made inside functions are visible after the function completes.
If this is not the desired effect, the
.Ic typeset
command can be used inside a function to create a local parameter.
Note that special parameters (e.g.\&
.Ic \&$$ , $! )
can't be scoped in this way.
.Pp
The exit status of a function is that of the last command executed in the
function.
A function can be made to finish immediately using the
.Ic return
command; this may also be used to explicitly specify the exit status.
.Pp
Functions defined with the
.Ic function
reserved word are treated differently in the following ways from functions
defined with the
.Ic ()
notation:
.Bl -bullet
.It
The $0 parameter is set to the name of the function
(Bourne-style functions leave $0 untouched).
.It
Parameter assignments preceding function calls are not kept in the shell
environment (executing Bourne-style functions will keep assignments).
.It
.Ev OPTIND
is saved/reset and restored on entry and exit from the function so
.Ic getopts
can be used properly both inside and outside the function (Bourne-style
functions leave
.Ev OPTIND
untouched, so using
.Ic getopts
inside a function interferes with using
.Ic getopts
outside the function).
.El
.Pp
In the future, the following differences will also be added:
.Bl -bullet
.It
A separate trap/signal environment will be used during the execution of
functions.
This will mean that traps set inside a function will not affect the
shell's traps and signals that are not ignored in the shell (but may be
trapped) will have their default effect in a function.
.It
The EXIT trap, if set in a function, will be executed after the function
returns.
d652 2
a653 270
.Ss POSIX mode
The shell is intended to be POSIX compliant;
however, in some cases, POSIX behaviour is contrary either to
the original Korn shell behaviour or to user convenience.
How the shell behaves in these cases is determined by the state of the
.Ic posix
option
.Pq Ic set -o posix .
If it is on, the POSIX behaviour is followed; otherwise, it is not.
The
.Ic posix
option is set automatically when the shell starts up if the environment
contains the
.Ev POSIXLY_CORRECT
parameter.
The shell can also be compiled so that it is in POSIX mode by default;
however, this is usually not desirable.
.Pp
The following is a list of things that are affected by the state of the
.Ic posix
option:
.Bl -bullet
.It
Reading of
.Ev $ENV :
if not in
.Ic posix
mode, the
.Ev ENV
parameter is not expanded and included when the shell starts.
.It
Occurrences of
.Ic \e\&"
inside double quoted
.Ic `..`
command substitutions.
In POSIX mode, the
.Ic \e\&"
is interpreted when the command is interpreted;
in non-POSIX mode,
the backslash is stripped before the command substitution is interpreted.
For example,
.Ic echo \&"`echo \e\&"hi\e\&"`\&"
produces
.Dq \&"hi\&"
in POSIX mode,
.Dq hi
in non-POSIX mode.
To avoid problems, use the
.Ic $(...)\&
form of command substitution.
.It
.Ic kill -l
output.
In POSIX mode, only signal names are listed (in a single line);
in non-POSIX mode,
signal numbers, names, and descriptions are printed (in columns).
In the future, a new option
.Pq Fl v No perhaps
will be added to distinguish the two behaviours.
.It
.Ic echo
options.
In POSIX mode,
.Fl e
and
.Fl E
are not treated as options, but printed like other arguments;
in non-POSIX mode, these options control the interpretation
of backslash sequences.
.It
.Ic fg
exit status.
In POSIX mode, the exit status is 0 if no errors occur;
in non-POSIX mode, the exit status is that of the last foregrounded job.
.It
.Ic getopts .
In POSIX mode, options must start with a
.Ql - ;
in non-POSIX mode, options can start with either
.Ql -
or
.Ql + .
.It
.Ic set - .
In POSIX mode, this does not clear the
.Ic verbose
or
.Ic xtrace
options; in non-POSIX mode, it does.
.It
.Ic set
exit status.
In POSIX mode, the exit status of
.Ic set
is 0 if there are no errors;
in non-POSIX mode, the exit status is that of any
command substitutions performed in generating the
.Ic set
command.
For example,
.Ic set -- `false`; echo $?\&
prints 0 in POSIX mode, 1 in non-POSIX mode.
This construct is used in most shell scripts that use the old
.Xr getopt 1
command.
.It
Argument expansion of the
.Ic alias ,
.Ic export ,
.Ic readonly ,
and
.Ic typeset
commands.
In POSIX mode, normal argument expansion is done; in non-POSIX mode,
field splitting, file globbing, and (normal) tilde expansion
are turned off, while assignment tilde expansion is turned on.
.It
Signal specification.
In POSIX mode, signals can be specified as digits, only
if signal numbers match POSIX values
(i.e. HUP=1, INT=2, QUIT=3, ABRT=6, KILL=9, ALRM=14, and TERM=15);
in non-POSIX mode, signals can always be digits.
.It
Alias expansion.
In POSIX mode, alias expansion is only carried out when reading command words;
in non-POSIX mode, alias expansion is carried out on any
word following an alias that ended in a space.
For example, the following
.Ic for
loop uses parameter
.Sq i
in POSIX mode and
.Sq j
in non-POSIX mode:
.Bd -literal -offset indent
alias a='for ' i='j'
a i in 1 2; do echo i=$i j=$j; done
.Ed
.It
.Ic test .
In POSIX mode, the expression
.Sq Fl t
(preceded by some number of
.Sq \&!
arguments) is always true as it is a non-zero length string;
in non-POSIX mode, it tests if file descriptor 1 is a
.Xr tty 4
(i.e. the
.Ar fd
argument to the
.Fl t
test may be left out and defaults to 1).
.El
.Ss Command execution
After evaluation of command-line arguments, redirections, and parameter
assignments, the type of command is determined: a special built-in, a
function, a regular built-in, or the name of a file to execute found using the
.Ev PATH
parameter.
The checks are made in the above order.
Special built-in commands differ from other commands in that the
.Ev PATH
parameter is not used to find them, an error during their execution can
cause a non-interactive shell to exit, and parameter assignments that are
specified before the command are kept after the command completes.
Just to confuse things, if the
.Ic posix
option is turned off (see the
.Ic set
command below), some special commands are very special in that no field
splitting, file globbing, nor tilde expansion is performed
on arguments that look like assignments.
Regular built-in commands are different only in that the
.Ev PATH
parameter is not used to find them.
.Pp
The original
.Nm ksh
and POSIX differ somewhat in which commands are considered
special or regular:
.Pp
POSIX special commands
.Pp
.Ic \&. , \&: , break , continue ,
.Ic eval , exec , exit , export ,
.Ic readonly , return , set , shift ,
.Ic times , trap , unset
.Pp
Additional
.Nm
special commands
.Pp
.Ic builtin , typeset
.Pp
Very special commands
.Pq when POSIX mode is off
.Pp
.Ic alias , readonly , set , typeset
.Pp
POSIX regular commands
.Pp
.Ic alias , bg , cd , command ,
.Ic false , fc , fg , getopts ,
.Ic jobs , kill , pwd , read ,
.Ic true , umask , unalias , wait
.Pp
Additional
.Nm
regular commands
.Pp
.Ic \&[ , echo , let , print ,
.Ic pwd , test , ulimit , whence
.Pp
In the future, the additional
.Nm
special and regular commands may be treated
differently from the POSIX special and regular commands.
.Pp
Once the type of command has been determined, any command-line parameter
assignments are performed and exported for the duration of the command.
.Pp
The following describes the special and regular built-in commands:
.Pp
.Bl -tag -width Ds -compact
.It Ic \&. Ar file Op Ar arg ...
Execute the commands in
.Ar file
in the current environment.
The file is searched for in the directories of
.Ev PATH .
If arguments are given, the positional parameters may be used to access them
while
.Ar file
is being executed.
If no arguments are given, the positional parameters are
those of the environment the command is used in.
.Pp
.It Ic \&: Op Ar ...
The null command.
Exit status is set to zero.
.Pp
.It Xo Ic alias
.Oo Fl d \*(Ba t Oo Fl r Oc \*(Ba
.Cm +-x Oc
.Op Fl p
.Op Cm +
.Oo Ar name
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
Without arguments,
.Ic alias
lists all aliases.
For any name without a value, the existing alias is listed.
Any name with a value defines an alias (see
.Sx Aliases
above).
.Pp
When listing aliases, one of two formats is used.
Normally, aliases are listed as
.Ar name Ns = Ns Ar value ,
where
.Ar value
is quoted.
If options were preceded with
.Ql + ,
or a lone
.Ql +
is given on the command line, only
d655 4
a658 1
is printed.
d660 3
a662 51
The
.Fl d
option causes directory aliases, which are used in tilde expansion, to be
listed or set (see
.Sx Tilde expansion
above).
.Pp
If the
.Fl p
option is used, each alias is prefixed with the string
.Dq alias\ \& .
.Pp
The
.Fl t
option indicates that tracked aliases are to be listed/set (values specified on
the command line are ignored for tracked aliases).
The
.Fl r
option indicates that all tracked aliases are to be reset.
.Pp
The
.Fl x
option sets
.Pq Ic +x No clears
the export attribute of an alias, or, if no names are given, lists the aliases
with the export attribute (exporting an alias has no effect).
.Pp
.It Ic bg Op Ar job ...
Resume the specified stopped job(s) in the background.
If no jobs are specified,
.Ic %+
is assumed.
See
.Sx Job control
below for more information.
.Pp
.It Ic break Op Ar level
Exit the
.Ar level Ns th
inner-most
.Ic for ,
.Ic until ,
or
.Ic while
loop.
.Ar level
defaults to 1.
.Pp
.It Ic builtin Ar command Op Ar arg ...
Execute the built-in command
.Ar command .
d664 11
a675 38
.Ic cd
.Op Fl LP
.Op Ar dir
.Xc
Set the working directory to
.Ar dir .
If the parameter
.Ev CDPATH
is set, it lists the search path for the directory containing
.Ar dir .
A
.Dv NULL
path means the current directory.
If
.Ar dir
is found in any component of the
.Ev CDPATH
search path other than the
.Dv NULL
path, the name of the new working directory will be written to standard output.
If
.Ar dir
is missing, the home directory
.Ev HOME
is used.
If
.Ar dir
is
.Ql - ,
the previous working directory is used (see the
.Ev OLDPWD
parameter).
.Pp
If the
.Fl L
option (logical path) is used or if the
.Ic physical
option isn't set (see the
d677 2
a678 35
command below), references to
.Sq ..
in
.Ar dir
are relative to the path used to get to the directory.
If the
.Fl P
option (physical path) is used or if the
.Ic physical
option is set,
.Sq ..
is relative to the filesystem directory tree.
The
.Ev PWD
and
.Ev OLDPWD
parameters are updated to reflect the current and old working directory,
respectively.
.Pp
.It Xo
.Ic cd
.Op Fl LP
.Ar old new
.Xc
The string
.Ar new
is substituted for
.Ar old
in the current directory, and the shell attempts to change to the new
directory.
.Pp
.It Xo
.Ic command
.Op Fl p
.Ar cmd
d681 14
a694 30
.Ar cmd
is executed exactly as if
.Ic command
had not been specified, with two exceptions:
firstly,
.Ar cmd
cannot be a shell function;
and secondly, special built-in commands lose their specialness
(i.e. redirection and utility errors do not cause the shell to
exit, and command assignments are not permanent).
.Pp
If the
.Fl p
option is given, a default search path is used instead of the current value of
.Ev PATH
(the actual value of the default path is system dependent: on
POSIX-ish systems, it is the value returned by
.Ic getconf CS_PATH ) .
.Pp
.It Ic continue Op Ar level
Jumps to the beginning of the
.Ar level Ns th
inner-most
.Ic for ,
.Ic until ,
or
.Ic while
loop.
.Ar level
defaults to 1.
d696 47
a742 33
.It Xo
.Ic echo
.Op Fl Een
.Op Ar arg ...
.Xc
Prints its arguments (separated by spaces) followed by a newline, to the
standard output.
The newline is suppressed if any of the arguments contain the
backslash sequence
.Ql \ec .
See the
.Ic print
command below for a list of other backslash sequences that are recognized.
.Pp
The options are provided for compatibility with
.Bx
shell scripts.
The
.Fl n
option suppresses the trailing newline,
.Fl e
enables backslash interpretation (a no-op, since this is normally done), and
.Fl E
suppresses backslash interpretation.
If the
.Ic posix
option is set, only the first argument is treated as an option, and only
if it is exactly
.Dq -n .
.Pp
.It Ic eval Ar command ...
The arguments are concatenated (with spaces between them) to form a single
string which the shell then parses and executes in the current environment.
a743 16
.It Xo
.Ic exec
.Op Ar command Op Ar arg ...
.Xc
The command is executed without forking, replacing the shell process.
.Pp
If no command is given except for I/O redirection, the I/O redirection is
permanent and the shell is
not replaced.
Any file descriptors which are opened or
.Xr dup 2 Ns 'd
in this way are made available to other executed commands (note that the Korn
shell differs here: it does not pass on file descriptors greater than 2).
.Pp
.It Ic exit Op Ar status
The shell exits with the specified exit status.
d745 11
a755 36
.Ar status
is not specified, the exit status is the current value of the
.Ic $?\&
parameter.
.Pp
.It Xo
.Ic export
.Op Fl p
.Op Ar parameter Ns Op = Ns Ar value
.Xc
Sets the export attribute of the named parameters.
Exported parameters are passed in the environment to executed commands.
If values are specified, the named parameters are also assigned.
.Pp
If no parameters are specified, the names of all parameters with the export
attribute are printed one per line, unless the
.Fl p
option is used, in which case
.Ic export
commands defining all exported parameters, including their values, are printed.
.Pp
.It Ic false
A command that exits with a non-zero status.
.Pp
.It Xo
.Ic fc
.Cm -e - \*(Ba Fl s
.Op Fl g
.Op Ar old Ns = Ns Ar new
.Op Ar prefix
.Xc
Re-execute the selected command (the previous command by default) after
performing the optional substitution of
.Ar old
with
.Ar new .
d757 21
a777 21
.Fl g
is specified, all occurrences of
.Ar old
are replaced with
.Ar new .
The meaning of
.Cm -e -
and
.Fl s
is identical: re-execute the selected command without invoking an editor.
This command is usually accessed with the predefined
.Ic alias r='fc -e -' .
.Pp
.It Ic fg Op Ar job ...
Resume the specified job(s) in the foreground.
If no jobs are specified,
.Ic %+
is assumed.
See
.Sx Job control
below for more information.
d779 3
a781 18
.It Xo
.Ic getopts
.Ar optstring name
.Op Ar arg ...
.Xc
Used by shell procedures to parse the specified arguments (or positional
parameters, if no arguments are given) and to check for legal options.
.Ar optstring
contains the option letters that
.Ic getopts
is to recognize.
If a letter is followed by a colon, the option is expected to
have an argument.
Options that do not take arguments may be grouped in a single argument.
If an option takes an argument and the option character is not the
last character of the argument it is found in, the remainder of the argument is
taken to be the option's argument; otherwise, the next argument is the option's
argument.
d783 4
a786 18
Each time
.Ic getopts
is invoked, it places the next option in the shell parameter
.Ar name
and the index of the argument to be processed by the next call to
.Ic getopts
in the shell parameter
.Ev OPTIND .
If the option was introduced with a
.Ql + ,
the option placed in
.Ar name
is prefixed with a
.Ql + .
When an option requires an argument,
.Ic getopts
places it in the shell parameter
.Ev OPTARG .
a787 66
When an illegal option or a missing option argument is encountered, a question
mark or a colon is placed in
.Ar name
(indicating an illegal option or missing argument, respectively) and
.Ev OPTARG
is set to the option character that caused the problem.
Furthermore, if
.Ar optstring
does not begin with a colon, a question mark is placed in
.Ar name ,
.Ev OPTARG
is unset, and an error message is printed to standard error.
.Pp
When the end of the options is encountered,
.Ic getopts
exits with a non-zero exit status.
Options end at the first (non-option
argument) argument that does not start with a
.Ql - ,
or when a
.Ql --
argument is encountered.
.Pp
Option parsing can be reset by setting
.Ev OPTIND
to 1 (this is done automatically whenever the shell or a shell procedure is
invoked).
.Pp
Warning: Changing the value of the shell parameter
.Ev OPTIND
to a value other than 1, or parsing different sets of arguments without
resetting
.Ev OPTIND ,
may lead to unexpected results.
.Pp
.It Xo
.Ic hash
.Op Fl r
.Op Ar name ...
.Xc
Without arguments, any hashed executable command pathnames are listed.
The
.Fl r
option causes all hashed commands to be removed from the hash table.
Each
.Ar name
is searched as if it were a command name and added to the hash table if it is
an executable command.
.Pp
.It Xo
.Ic jobs
.Op Fl lnp
.Op Ar job ...
.Xc
Display information about the specified job(s); if no jobs are specified, all
jobs are displayed.
The
.Fl n
option causes information to be displayed only for jobs that have changed
state since the last notification.
If the
.Fl l
option is used, the process ID of each process in a job is also listed.
The
.Fl p
option causes only the process group of each job to be printed.
d789 6
a794 4
.Sx Job control
below for the format of
.Ar job
and the displayed job.
d796 3
a798 422
.It Xo
.Ic kill
.Oo Fl s Ar signame \*(Ba
.No - Ns Ar signum \*(Ba
.No - Ns Ar signame Oc
.No { Ar job \*(Ba pid \*(Ba pgrp No }
.Ar ...
.Xc
Send the specified signal to the specified jobs, process IDs, or process
groups.
If no signal is specified, the
.Dv TERM
signal is sent.
If a job is specified, the signal is sent to the job's process group.
See
.Sx Job control
below for the format of
.Ar job .
.Pp
.It Xo
.Ic kill
.Fl l
.Op Ar exit-status ...
.Xc
Print the signal name corresponding to
.Ar exit-status .
If no arguments are specified, a list of all the signals, their numbers, and
a short description of them are printed.
.Pp
.It Xo
.Ic print
.Oo
.Fl nrsu Ns Oo Ar n Oc \*(Ba
.Fl R Op Fl en
.Oc
.Op Ar argument ...
.Xc
.Ic print
prints its arguments on the standard output, separated by spaces and
terminated with a newline.
The
.Fl n
option suppresses the newline.
By default, certain C escapes are translated.
These include
.Ql \eb ,
.Ql \ef ,
.Ql \en ,
.Ql \er ,
.Ql \et ,
.Ql \ev ,
and
.Ql \e0###
.Po
.Ql #
is an octal digit, of which there may be 0 to 3
.Pc .
.Ql \ec
is equivalent to using the
.Fl n
option.
.Ql \e
expansion may be inhibited with the
.Fl r
option.
The
.Fl s
option prints to the history file instead of standard output; and the
.Fl u
option prints to file descriptor
.Ar n
.Po
.Ar n
defaults to 1 if omitted
.Pc .
.Pp
The
.Fl R
option is used to emulate, to some degree, the
.Bx
.Xr echo 1
command, which does not process
.Ql \e
sequences unless the
.Fl e
option is given.
As above, the
.Fl n
option suppresses the trailing newline.
.Pp
.It Ic pwd Op Fl LP
Print the present working directory.
If the
.Fl L
option is used or if the
.Ic physical
option isn't set (see the
.Ic set
command below), the logical path is printed (i.e. the path used to
.Ic cd
to the current directory).
If the
.Fl P
option (physical path) is used or if the
.Ic physical
option is set, the path determined from the filesystem (by following
.Sq ..
directories to the root directory) is printed.
.Pp
.It Xo
.Ic read
.Op Fl rsu Ns Op Ar n
.Op Ar parameter ...
.Xc
Reads a line of input from the standard input, separates the line into fields
using the
.Ev IFS
parameter (see
.Sx Substitution
above), and assigns each field to the specified parameters.
If there are more parameters than fields, the extra parameters are set to
.Dv NULL ,
or alternatively, if there are more fields than parameters, the last parameter
is assigned the remaining fields (inclusive of any separating spaces).
If no parameters are specified, the
.Ev REPLY
parameter is used.
If the input line ends in a backslash and the
.Fl r
option was not used, the backslash and the newline are stripped and more input
is read.
If no input is read,
.Ic read
exits with a non-zero status.
.Pp
The first parameter may have a question mark and a string appended to it, in
which case the string is used as a prompt (printed to standard error before
any input is read) if the input is a
.Xr tty 4
(e.g.\&
.Ic read nfoo?'number of foos: ' ) .
.Pp
The
.Fl u Ns Ar n
option causes input to be read from file descriptor
.Ar n
.Pf ( Ar n
defaults to 0 if omitted).
If the
.Fl s
option is used, input is saved to the history file.
.Pp
.It Xo
.Ic readonly
.Op Fl p
.Oo Ar parameter
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
Sets the read-only attribute of the named parameters.
If values are given,
parameters are set to them before setting the attribute.
Once a parameter is
made read-only, it cannot be unset and its value cannot be changed.
.Pp
If no parameters are specified, the names of all parameters with the read-only
attribute are printed one per line, unless the
.Fl p
option is used, in which case
.Ic readonly
commands defining all read-only parameters, including their values, are
printed.
.Pp
.It Ic return Op Ar status
Returns from a function or
.Ic .\&
script, with exit status
.Ar status .
If no
.Ar status
is given, the exit status of the last executed command is used.
If used outside of a function or
.Ic .\&
script, it has the same effect as
.Ic exit .
Note that
.Nm pdksh
treats both profile and
.Ev ENV
files as
.Ic .\&
scripts, while the original Korn shell only treats profiles as
.Ic .\&
scripts.
.Pp
.It Xo
.Ic set Op Ic +-abCefhkmnpsuvXx
.Op Ic +-o Ar option
.Op Ic +-A Ar name
.Op Fl -
.Op Ar arg ...
.Xc
The
.Ic set
command can be used to set
.Pq Ic -
or clear
.Pq Ic +
shell options, set the positional parameters, or set an array parameter.
Options can be changed using the
.Cm +-o Ar option
syntax, where
.Ar option
is the long name of an option, or using the
.Cm +- Ns Ar letter
syntax, where
.Ar letter
is the option's single letter name (not all options have a single letter name).
The following table lists both option letters (if they exist) and long names
along with a description of what the option does:
.Bl -tag -width 15n
.It Fl A Ar name
Sets the elements of the array parameter
.Ar name
to
.Ar arg ...
If
.Fl A
is used, the array is reset (i.e. emptied) first; if
.Ic +A
is used, the first N elements are set (where N is the number of arguments);
the rest are left untouched.
.It Fl a \*(Ba Ic allexport
All new parameters are created with the export attribute.
.It Fl b \*(Ba Ic notify
Print job notification messages asynchronously, instead of just before the
prompt.
Only used if job control is enabled
.Pq Fl m .
.It Fl C \*(Ba Ic noclobber
Prevent \*(Gt redirection from overwriting existing files.
Instead, \*(Gt\*(Ba must be used to force an overwrite.
.It Fl e \*(Ba Ic errexit
Exit (after executing the
.Dv ERR
trap) as soon as an error occurs or a command fails (i.e. exits with a
non-zero status).
This does not apply to commands whose exit status is
explicitly tested by a shell construct such as
.Ic if ,
.Ic until ,
.Ic while ,
or
.Ic !\&
statements.
For
.Ic &&
or
.Ic || ,
only the status of the last command is tested.
.It Fl f \*(Ba Ic noglob
Do not expand file name patterns.
.It Fl h \*(Ba Ic trackall
Create tracked aliases for all executed commands (see
.Sx Aliases
above).
Enabled by default for non-interactive shells.
.It Fl k \*(Ba Ic keyword
Parameter assignments are recognized anywhere in a command.
.It Fl m \*(Ba Ic monitor
Enable job control (default for interactive shells).
.It Fl n \*(Ba Ic noexec
Do not execute any commands.
Useful for checking the syntax of scripts
(ignored if interactive).
.It Fl p \*(Ba Ic privileged
The shell is a privileged shell.
It is set automatically if, when the shell starts,
the real UID or GID does not match
the effective UID (EUID) or GID (EGID), respectively.
See above for a description of what this means.
.It Fl s \*(Ba Ic stdin
If used when the shell is invoked, commands are read from standard input.
Set automatically if the shell is invoked with no arguments.
.Pp
When
.Fl s
is used with the
.Ic set
command it causes the specified arguments to be sorted before assigning them to
the positional parameters (or to array
.Ar name ,
if
.Fl A
is used).
.It Fl u \*(Ba Ic nounset
Referencing of an unset parameter is treated as an error, unless one of the
.Ql - ,
.Ql + ,
or
.Ql =
modifiers is used.
.It Fl v \*(Ba Ic verbose
Write shell input to standard error as it is read.
.It Fl X \*(Ba Ic markdirs
Mark directories with a trailing
.Ql /
during file name generation.
.It Fl x \*(Ba Ic xtrace
Print commands and parameter assignments when they are executed, preceded by
the value of
.Ev PS4 .
.It Ic bgnice
Background jobs are run with lower priority.
.It Ic ignoreeof
The shell will not exit when end-of-file is read;
.Ic exit
must be used.
.It Ic interactive
The shell is an interactive shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
.It Ic login
The shell is a login shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
.It Ic nohup
Do not kill running jobs with a
.Dv SIGHUP
signal when a login shell exits.
Currently set by default, but this will
change in the future to be compatible with the original Korn shell (which
doesn't have this option, but does send the
.Dv SIGHUP
signal).
.It Ic nolog
No effect.
In the original Korn shell, this prevents function definitions from
being stored in the history file.
.It Ic physical
Causes the
.Ic cd
and
.Ic pwd
commands to use
.Dq physical
(i.e. the filesystem's)
.Sq ..
directories instead of
.Dq logical
directories (i.e. the shell handles
.Sq .. ,
which allows the user to be oblivious of symbolic links to directories).
Clear by default.
Note that setting this option does not affect the current value of the
.Ev PWD
parameter; only the
.Ic cd
command changes
.Ev PWD .
See the
.Ic cd
and
.Ic pwd
commands above for more details.
.It Ic posix
Enable POSIX mode.
See
.Sx POSIX mode
above.
.It Ic restricted
The shell is a restricted shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
.It Ic vi
Enable
.Xr vi 1 Ns -like
command-line editing (interactive shells only).
.It Ic vi-esccomplete
In vi command-line editing, do command and file name completion when escape
(^[) is entered in command mode.
.It Ic vi-show8
Prefix characters with the eighth bit set with
.Sq M- .
If this option is not set, characters in the range 128\-160 are printed as is,
which may cause problems.
.It Ic vi-tabcomplete
In vi command-line editing, do command and file name completion when tab (^I)
is entered in insert mode.
.It Ic viraw
No effect.
In the original Korn shell, unless
.Ic viraw
was set, the vi command-line mode would let the
.Xr tty 4
driver do the work until ESC (^[) was entered.
.Nm pdksh
is always in viraw mode.
.El
.Pp
These options can also be used upon invocation of the shell.
The current set of
options (with single letter names) can be found in the parameter
.Sq $- .
.Ic set Fl o
with no option name will list all the options and whether each is on or off;
.Ic set +o
will print the long names of all options that are currently on.
.Pp
Remaining arguments, if any, are positional parameters and are assigned, in
order, to the positional parameters (i.e. $1, $2, etc.).
If options end with
.Ql --
and there are no remaining arguments, all positional parameters are cleared.
If no options or arguments are given, the values of all names are printed.
For unknown historical reasons, a lone
.Ql -
option is treated specially \- it clears both the
.Fl x
and
.Fl v
options.
d800 7
a806 29
.It Ic shift Op Ar number
The positional parameters
.Ar number Ns +1 ,
.Ar number Ns +2 ,
etc. are renamed to
.Sq 1 ,
.Sq 2 ,
etc.
.Ar number
defaults to 1.
.Pp
.It Ic test Ar expression
.It Ic \&[ Ar expression Ic \&]
.Ic test
evaluates the
.Ar expression
and returns zero status if true, 1 if false, or greater than 1 if there
was an error.
It is normally used as the condition command of
.Ic if
and
.Ic while
statements.
Symbolic links are followed for all
.Ar file
expressions except
.Fl h
and
.Fl L .
d808 3
a810 136
The following basic expressions are available:
.Bl -tag -width 17n
.It Fl a Ar file
.Ar file
exists.
.It Fl b Ar file
.Ar file
is a block special device.
.It Fl c Ar file
.Ar file
is a character special device.
.It Fl d Ar file
.Ar file
is a directory.
.It Fl e Ar file
.Ar file
exists.
.It Fl f Ar file
.Ar file
is a regular file.
.It Fl G Ar file
.Ar file Ns 's
group is the shell's effective group ID.
.It Fl g Ar file
.Ar file Ns 's
mode has the setgid bit set.
.It Fl h Ar file
.Ar file
is a symbolic link.
.It Fl k Ar file
.Ar file Ns 's
mode has the
.Xr sticky 8
bit set.
.It Fl L Ar file
.Ar file
is a symbolic link.
.It Fl O Ar file
.Ar file Ns 's
owner is the shell's effective user ID.
.It Fl o Ar option
Shell
.Ar option
is set (see the
.Ic set
command above for a list of options).
As a non-standard extension, if the option starts with a
.Ql \&! ,
the test is negated; the test always fails if
.Ar option
doesn't exist (so [ -o foo -o -o !foo ] returns true if and only if option
.Ar foo
exists).
.It Fl p Ar file
.Ar file
is a named pipe.
.It Fl r Ar file
.Ar file
exists and is readable.
.It Fl S Ar file
.Ar file
is a
.Xr unix 4 Ns -domain
socket.
.It Fl s Ar file
.Ar file
is not empty.
.It Fl t Op Ar fd
File descriptor
.Ar fd
is a
.Xr tty 4
device.
If the
.Ic posix
option is not set,
.Ar fd
may be left out, in which case it is taken to be 1 (the behaviour differs due
to the special POSIX rules described above).
.It Fl u Ar file
.Ar file Ns 's
mode has the setuid bit set.
.It Fl w Ar file
.Ar file
exists and is writable.
.It Fl x Ar file
.Ar file
exists and is executable.
.It Ar file1 Fl nt Ar file2
.Ar file1
is newer than
.Ar file2 .
.It Ar file1 Fl ot Ar file2
.Ar file1
is older than
.Ar file2 .
.It Ar file1 Fl ef Ar file2
.Ar file1
is the same file as
.Ar file2 .
.It Ar string
.Ar string
has non-zero length.
.It Fl n Ar string
.Ar string
is not empty.
.It Fl z Ar string
.Ar string
is empty.
.It Ar string No = Ar string
Strings are equal.
.It Ar string No != Ar string
Strings are not equal.
.It Ar number Fl eq Ar number
Numbers compare equal.
.It Ar number Fl ne Ar number
Numbers compare not equal.
.It Ar number Fl ge Ar number
Numbers compare greater than or equal.
.It Ar number Fl gt Ar number
Numbers compare greater than.
.It Ar number Fl le Ar number
Numbers compare less than or equal.
.It Ar number Fl \&lt Ar number
Numbers compare less than.
.El
.Pp
The above basic expressions, in which unary operators have precedence over
binary operators, may be combined with the following operators (listed in
increasing order of precedence):
.Bd -literal -offset indent
expr -o expr		Logical OR.
expr -a expr		Logical AND.
! expr			Logical NOT.
( expr )		Grouping.
.Ed
d812 97
a908 3
On operating systems not supporting
.Pa /dev/fd/ Ns Ar n
devices (where
d910 58
a967 12
is a file descriptor number), the
.Ic test
command will attempt to fake it for all tests that operate on files (except the
.Fl e
test).
For example,
[ -w /dev/fd/2 ] tests if file descriptor 2 is writable.
.Pp
Note that some special rules are applied (courtesy of POSIX)
if the number of
arguments to
.Ic test
d969 171
a1139 33
.Ic \&[ ... \&]
is less than five: if leading
.Ql \&!
arguments can be stripped such that only one argument remains then a string
length test is performed (again, even if the argument is a unary operator); if
leading
.Ql \&!
arguments can be stripped such that three arguments remain and the second
argument is a binary operator, then the binary operation is performed (even
if the first argument is a unary operator, including an unstripped
.Ql \&! ) .
.Pp
.Sy Note :
A common mistake is to use
.Dq if \&[ $foo = bar \&] ,
which fails if parameter
.Dq foo
is
.Dv NULL
or unset, if it has embedded spaces (i.e.\&
.Ev IFS
characters), or if it is a unary operator like
.Sq \&!
or
.Sq Fl n .
Use tests like
.Dq if \&[ \&"X$foo\&" = Xbar \&]
instead.
.Pp
.It Ic times
Print the accumulated user and system times used both by the shell
and by processes that the shell started which have exited.
The format of the output is:
d1141 2
a1142 2
0m0.00s 0m0.00s
0m0.00s 0m0.00s
d1145 81
a1225 60
.It Ic trap Op Ar handler signal ...
Sets a trap handler that is to be executed when any of the specified signals are
received.
.Ar handler
is either a
.Dv NULL
string, indicating the signals are to be ignored, a minus sign
.Pq Sq - ,
indicating that the default action is to be taken for the signals (see
.Xr signal 3 ) ,
or a string containing shell commands to be evaluated and executed at the first
opportunity (i.e. when the current command completes, or before printing the
next
.Ev PS1
prompt) after receipt of one of the signals.
.Ar signal
is the name of a signal (e.g.\&
.Dv PIPE
or
.Dv ALRM )
or the number of the signal (see the
.Ic kill -l
command above).
.Pp
There are two special signals:
.Dv EXIT
(also known as 0), which is executed when the shell is about to exit, and
.Dv ERR ,
which is executed after an error occurs (an error is something that would cause
the shell to exit if the
.Fl e
or
.Ic errexit
option were set \- see the
.Ic set
command above).
.Dv EXIT
handlers are executed in the environment of the last executed command.
Note
that for non-interactive shells, the trap handler cannot be changed for signals
that were ignored when the shell started.
.Pp
With no arguments,
.Ic trap
lists, as a series of
.Ic trap
commands, the current state of the traps that have been set since the shell
started.
Note that the output of
.Ic trap
cannot be usefully piped to another process (an artifact of the fact that
traps are cleared when subprocesses are created).
.Pp
The original Korn shell's
.Dv DEBUG
trap and the handling of
.Dv ERR
and
.Dv EXIT
traps in functions are not yet implemented.
d1227 81
a1307 2
.It Ic true
A command that exits with a zero value.
d1309 3
a1311 28
.It Xo
.Ic typeset
.Oo
.Op Ic +-lprtUux
.Op Fl L Ns Op Ar n
.Op Fl R Ns Op Ar n
.Op Fl Z Ns Op Ar n
.Op Fl i Ns Op Ar n
.No \&| Fl f Op Fl tux
.Oc
.Oo
.Ar name
.Op Ns = Ns Ar value
.Ar ...
.Oc
.Xc
Display or set parameter attributes.
With no
.Ar name
arguments, parameter attributes are displayed; if no options are used, the
current attributes of all parameters are printed as
.Ic typeset
commands; if an option is given (or
.Ql -
with no option letter), all parameters and their values with the specified
attributes are printed; if options are introduced with
.Ql + ,
parameter values are not printed.
d1313 2
d1316 8
a1323 6
.Ar name
arguments are given, the attributes of the named parameters are set
.Pq Ic -
or cleared
.Pq Ic + .
Values for parameters may optionally be specified.
d1325 94
a1418 16
.Ic typeset
is used inside a function, any newly created parameters are local to the
function.
.Pp
When
.Fl f
is used,
.Ic typeset
operates on the attributes of functions.
As with parameters, if no
.Ar name
arguments are given,
functions are listed with their values (i.e. definitions) unless
options are introduced with
.Ql + ,
in which case only the function names are reported.
d1420 41
a1460 5
.It Fl f
Function mode.
Display or set functions and their attributes, instead of parameters.
.It Fl i Ns Op Ar n
Integer attribute.
d1462 88
a1549 8
specifies the base to use when displaying the integer (if not specified, the
base given in the first assignment is used).
Parameters with this attribute may
be assigned values containing arithmetic expressions.
.It Fl L Ns Op Ar n
Left justify attribute.
.Ar n
specifies the field width.
d1551 4
d1556 7
a1562 25
is not specified, the current width of a parameter (or the width of its first
assigned value) is used.
Leading whitespace (and zeros, if used with the
.Fl Z
option) is stripped.
If necessary, values are either truncated or space padded
to fit the field width.
.It Fl l
Lower case attribute.
All upper case characters in values are converted to lower case.
(In the original Korn shell, this parameter meant
.Dq long integer
when used with the
.Fl i
option.)
.It Fl p
Print complete
.Ic typeset
commands that can be used to re-create the attributes (but not the values) of
parameters.
This is the default action (option exists for ksh93 compatibility).
.It Fl R Ns Op Ar n
Right justify attribute.
.Ar n
specifies the field width.
d1564 4
d1569 140
a1708 59
is not specified, the current width of a parameter (or the width of its first
assigned value) is used.
Trailing whitespace is stripped.
If necessary, values are either stripped of leading characters or space
padded to make them fit the field width.
.It Fl r
Read-only attribute.
Parameters with this attribute may not be assigned to or unset.
Once this attribute is set, it cannot be turned off.
.It Fl t
Tag attribute.
Has no meaning to the shell; provided for application use.
.Pp
For functions,
.Fl t
is the trace attribute.
When functions with the trace attribute are executed, the
.Ic xtrace
.Pq Fl x
shell option is temporarily turned on.
.It Fl U
Unsigned integer attribute.
Integers are printed as unsigned values (only
useful when combined with the
.Fl i
option).
This option is not in the original Korn shell.
.It Fl u
Upper case attribute.
All lower case characters in values are converted to upper case.
(In the original Korn shell, this parameter meant
.Dq unsigned integer
when used with the
.Fl i
option, which meant upper case letters would never be used for bases greater
than 10.
See the
.Fl U
option.)
.Pp
For functions,
.Fl u
is the undefined attribute.
See
.Sx Functions
above for the implications of this.
.It Fl x
Export attribute.
Parameters (or functions) are placed in the environment of
any executed commands.
Exported functions are not yet implemented.
.It Fl Z Ns Op Ar n
Zero fill attribute.
If not combined with
.Fl L ,
this is the same as
.Fl R ,
except zero padding is used instead of space padding.
.El
d1710 13
a1722 66
.It Xo
.Ic ulimit
.Op Fl acdfHlmnpSst Op Ar value
.Ar ...
.Xc
Display or set process limits.
If no options are used, the file size limit
.Pq Fl f
is assumed.
.Ar value ,
if specified, may be either an arithmetic expression starting with a
number or the word
.Dq unlimited .
The limits affect the shell and any processes created by the shell after a
limit is imposed; limits may not be increased once they are set.
.Bl -tag -width 5n
.It Fl a
Display all limits; unless
.Fl H
is used, soft limits are displayed.
.It Fl c Ar n
Impose a size limit of
.Ar n
blocks on the size of core dumps.
.It Fl d Ar n
Impose a size limit of
.Ar n
kilobytes on the size of the data area.
.It Fl f Ar n
Impose a size limit of
.Ar n
blocks on files written by the shell and its child processes (files of any
size may be read).
.It Fl H
Set the hard limit only (the default is to set both hard and soft limits).
.It Fl l Ar n
Impose a limit of
.Ar n
kilobytes on the amount of locked (wired) physical memory.
.It Fl m Ar n
Impose a limit of
.Ar n
kilobytes on the amount of physical memory used.
.It Fl n Ar n
Impose a limit of
.Ar n
file descriptors that can be open at once.
.It Fl p Ar n
Impose a limit of
.Ar n
processes that can be run by the user at any one time.
.It Fl S
Set the soft limit only (the default is to set both hard and soft limits).
.It Fl s Ar n
Impose a size limit of
.Ar n
kilobytes on the size of the stack area.
.It Fl t Ar n
Impose a time limit of
.Ar n
CPU seconds spent in user mode to be used by each process.
.\".It Fl v Ar n
.\"Impose a limit of
.\".Ar n
.\"kilobytes on the amount of virtual memory used.
.El
d1724 12
a1735 3
As far as
.Ic ulimit
is concerned, a block is 512 bytes.
d1737 20
a1756 22
.It Xo
.Ic umask
.Op Fl S
.Op Ar mask
.Xc
Display or set the file permission creation mask, or umask (see
.Xr umask 2 ) .
If the
.Fl S
option is used, the mask displayed or set is symbolic; otherwise, it is an
octal number.
.Pp
Symbolic masks are like those used by
.Xr chmod 1 .
When used, they describe what permissions may be made available (as opposed to
octal masks in which a set bit means the corresponding bit is to be cleared).
For example,
.Dq ug=rwx,o=
sets the mask so files will not be readable, writable, or executable by
.Dq others ,
and is equivalent (on most systems) to the octal mask
.Dq 007 .
d1758 7
a1764 15
.It Xo
.Ic unalias
.Op Fl adt
.Op Ar name ...
.Xc
The aliases for the given names are removed.
If the
.Fl a
option is used, all aliases are removed.
If the
.Fl t
or
.Fl d
options are used, the indicated operations are carried out on tracked or
directory aliases, respectively.
d1766 10
a1775 37
.It Xo
.Ic unset
.Op Fl fv
.Ar parameter ...
.Xc
Unset the named parameters
.Po
.Fl v ,
the default
.Pc
or functions
.Pq Fl f .
The exit status is non-zero if any of the parameters have the read-only
attribute set, zero otherwise.
.Pp
.It Ic wait Op Ar job ...
Wait for the specified job(s) to finish.
The exit status of
.Ic wait
is that of the last specified job; if the last job is killed by a signal, the
exit status is 128 + the number of the signal (see
.Ic kill -l Ar exit-status
above); if the last specified job can't be found (because it never existed, or
had already finished), the exit status of
.Ic wait
is 127.
See
.Sx Job control
below for the format of
.Ar job .
.Ic wait
will return if a signal for which a trap has been set is received, or if a
.Dv SIGHUP ,
.Dv SIGINT ,
or
.Dv SIGQUIT
signal is received.
d1777 29
a1805 6
If no jobs are specified,
.Ic wait
waits for all currently running jobs (if any) to finish and exits with a zero
status.
If job monitoring is enabled, the completion status of jobs is printed
(this is not the case when jobs are explicitly specified).
d1807 3
a1809 60
.It Xo
.Ic whence
.Op Fl pv
.Op Ar name ...
.Xc
For each
.Ar name ,
the type of command is listed (reserved word, built-in, alias,
function, tracked alias, or executable).
If the
.Fl p
option is used, a path search is performed even if
.Ar name
is a reserved word, alias, etc.
Without the
.Fl v
option,
.Ic whence
is similar to
.Ic command Fl v
except that
.Ic whence
will find reserved words and won't print aliases as alias commands.
With the
.Fl v
option,
.Ic whence
is the same as
.Ic command Fl V .
Note that for
.Ic whence ,
the
.Fl p
option does not affect the search path used, as it does for
.Ic command .
If the type of one or more of the names could not be determined, the exit
status is non-zero.
.El
.Ss Job control
Job control refers to the shell's ability to monitor and control jobs, which
are processes or groups of processes created for commands or pipelines.
At a minimum, the shell keeps track of the status of the background (i.e.\&
asynchronous) jobs that currently exist; this information can be displayed
using the
.Ic jobs
commands.
If job control is fully enabled (using
.Ic set -m
or
.Ic set -o monitor ) ,
as it is for interactive shells, the processes of a job are placed in their
own process group.
Foreground jobs can be stopped by typing the suspend
character from the terminal (normally ^Z), jobs can be restarted in either the
foreground or background using the
.Ic fg
and
.Ic bg
commands, and the state of the terminal is saved or restored when a foreground
job is stopped or restarted, respectively.
d1811 48
a1858 5
Note that only commands that create processes (e.g. asynchronous commands,
subshell commands, and non-built-in, non-function commands) can be stopped;
commands like
.Ic read
cannot be.
d1860 239
a2098 79
When a job is created, it is assigned a job number.
For interactive shells, this number is printed inside
.Dq [..] ,
followed by the process IDs of the processes in the job when an asynchronous
command is run.
A job may be referred to in the
.Ic bg ,
.Ic fg ,
.Ic jobs ,
.Ic kill ,
and
.Ic wait
commands either by the process ID of the last process in the command pipeline
(as stored in the
.Ic $!\&
parameter) or by prefixing the job number with a percent
sign
.Pq Sq % .
Other percent sequences can also be used to refer to jobs:
.Bl -tag -width "%+ | %% | %XX"
.It %+ \*(Ba %% \*(Ba %
The most recently stopped job, or, if there are no stopped jobs, the oldest
running job.
.It %-
The job that would be the
.Ic %+
job if the latter did not exist.
.It % Ns Ar n
The job with job number
.Ar n .
.It %? Ns Ar string
The job with its command containing the string
.Ar string
(an error occurs if multiple jobs are matched).
.It % Ns Ar string
The job with its command starting with the string
.Ar string
(an error occurs if multiple jobs are matched).
.El
.Pp
When a job changes state (e.g. a background job finishes or foreground job is
stopped), the shell prints the following status information:
.Pp
.D1 [ Ns Ar number ] Ar flag status command
.Pp
where...
.Bl -tag -width "command"
.It Ar number
is the job number of the job;
.It Ar flag
is the
.Ql +
or
.Ql -
character if the job is the
.Ic %+
or
.Ic %-
job, respectively, or space if it is neither;
.It Ar status
indicates the current state of the job and can be:
.Bl -tag -width "RunningXX"
.It Done Op Ar number
The job exited.
.Ar number
is the exit status of the job, which is omitted if the status is zero.
.It Running
The job has neither stopped nor exited (note that running does not necessarily
mean consuming CPU time \-
the process could be blocked waiting for some event).
.It Stopped Op Ar signal
The job was stopped by the indicated
.Ar signal
(if no signal is given, the job was stopped by
.Dv SIGTSTP ) .
.It Ar signal-description Op Dq core dumped
The job was killed by a signal (e.g. memory fault, hangup); use
.Ic kill -l
for a list of signal descriptions.
d2100 15
a2114 37
.Dq core dumped
message indicates the process created a core file.
.El
.It Ar command
is the command that created the process.
If there are multiple processes in
the job, each process will have a line showing its
.Ar command
and possibly its
.Ar status ,
if it is different from the status of the previous process.
.El
.Pp
When an attempt is made to exit the shell while there are jobs in the stopped
state, the shell warns the user that there are stopped jobs and does not exit.
If another attempt is immediately made to exit the shell, the stopped jobs are
sent a
.Dv SIGHUP
signal and the shell exits.
Similarly, if the
.Ic nohup
option is not set and there are running jobs when an attempt is made to exit
a login shell, the shell warns the user and does not exit.
If another attempt
is immediately made to exit the shell, the running jobs are sent a
.Dv SIGHUP
signal and the shell exits.
.Sh FILES
.Bl -tag -width "/etc/suid_profileXX" -compact
.It Pa ~/.profile
User's login profile.
.It Pa /etc/profile
System login profile.
.It Pa /etc/suid_profile
Privileged shell profile.
.It Pa /etc/shells
Shell database.
d2116 4
a2123 2
.Xr mg 1 ,
.Xr stty 1 ,
a2124 2
.Xr shells 5 ,
.Xr environ 7 ,
d2126 2
a2127 24
.Rs
.%A Morris Bolsky
.%A David Korn
.%B The KornShell Command and Programming Language, 2nd Edition
.%D 1995
.%I Prentice Hall
.%O ISBN 0131827006
.Re
.Rs
.%A Stephen G. Kochan
.%A Patrick H. Wood
.%B UNIX Shell Programming, 3rd Edition
.%D 2003
.%I Sams
.%O ISBN 0672324903
.Re
.Rs
.%A IEEE Inc.
.%D 1993
.%O ISBN 1-55937-266-9
.%T IEEE Standard for Information Technology \- Portable Operating \
    System Interface (POSIX) \- Part 2: Shell and Utilities
.Re
.Sh NOTES
d2129 20
a2148 3
is implemented as a run-time option of
.Nm pdksh ,
with only those
d2150 11
a2160 24
features whose syntax or semantics are incompatible with a traditional Bourne
shell disabled.
Since this leaves some
.Nm
extensions exposed, caution should be used where backwards compatibility with
traditional Bourne or POSIX compliant shells is an issue.
.Sh AUTHORS
.An -nosplit
This shell is based on the public domain 7th edition Bourne shell clone by
.An Charles Forsyth
and parts of the BRL shell by
.An Doug A. Gwyn ,
.An Doug Kingston ,
.An Ron Natalie ,
.An Arnold Robbins ,
.An Lou Salkind ,
and others.
The first release of
.Nm pdksh
was created by
.An Eric Gisin ,
and it was subsequently maintained by
.An John R. MacMillan Aq Mt change!john@@sq.sq.com ,
.An Simon J. Gerraty Aq Mt sjg@@zen.void.oz.au ,
d2162 5
a2166 37
.An Michael Rendell Aq Mt michael@@cs.mun.ca .
The
.Pa CONTRIBUTORS
file in the source distribution contains a more complete list of people and
their part in the shell's development.
.\" .Sh BUGS
.\" Any bugs in
.\" .Nm pdksh
.\" should be reported to pdksh@@cs.mun.ca.
.\" Please include the version of
.\" .Nm pdksh
.\" .Po
.\" .Ic echo $KSH_VERSION
.\" shows it
.\" .Pc ,
.\" the machine, operating system, and compiler you are using and a description of
.\" how to repeat the bug (a small shell script that demonstrates the bug is best).
.\" The following, if relevant (if you are not sure, include them), can also be
.\" helpful: options you are using (both
.\" .Pa options.h
.\" and
.\" .Ic set Fl o Ic options )
.\" and a copy of your
.\" .Pa config.h
.\" (the file generated by the
.\" .Pa configure
.\" script).
.\" New versions of
.\" .Nm pdksh
.\" can be obtained from ftp://ftp.cs.mun.ca/pub/pdksh.
.\" .Pp
.\" BTW, the most frequently reported bug is:
.\" .Bd -literal -offset indent
.\" $ echo hi | read a; echo $a   # Does not print hi
.\" .Ed
.\" .Pp
.\" I'm aware of this and there is no need to report it.
@


1.99
log
@put back some information what the character classes actually mean;
while here, remove the lie that regex(3) character classes would
depend on the locale;
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.98 2014/12/09 14:39:37 jmc Exp $
d449 3
a451 3
.Ar \ pattern
.Op \*(Ba Ar pattern
.No ... No )
d3387 1
a3387 1
.No \*(Ba Fl f Op Fl tux
@


1.98
log
@no more ctype(3);
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.97 2014/08/17 07:15:41 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: August 17 2014 $
d1503 4
@


1.97
log
@update the built-ins list:
- "times" is both promoted to posix and special (ooh!)
- "pwd" is promoted to posix, but not special (aah!)

while here, jiggle the text somewhat to clarify that "non-POSIX"
actually meant when posix mode is off, not mandated by posix

joint work with guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.96 2014/02/12 16:28:13 schwarze Exp $
d5 1
a5 1
.Dd $Mdocdate: February 12 2014 $
a1502 2
These match characters using the macros specified in
.Xr ctype 3 .
@


1.96
log
@missing .An macros, based on a patch from Jan Stary <hans at stare dot cz>
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.95 2014/01/28 14:16:59 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: January 28 2014 $
d2202 1
a2202 1
.Ic trap , unset
d2208 1
a2208 1
.Ic builtin , times , typeset
d2211 1
a2211 1
.Pq non-POSIX
d2219 2
a2220 2
.Ic jobs , kill , read , true ,
.Ic umask , unalias , wait
@


1.95
log
@update book references;
From: Jan Stary
tweaked a bit by myself
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.94 2013/06/13 19:43:09 millert Exp $
d5 1
a5 1
.Dd $Mdocdate: June 13 2013 $
d3920 1
d3922 8
a3929 2
Charles Forsyth and parts of the BRL shell by Doug A. Gwyn, Doug Kingston,
Ron Natalie, Arnold Robbins, Lou Salkind, and others.
d3932 7
a3938 3
was created by Eric Gisin, and it was subsequently maintained by John R.\&
MacMillan (change!john@@sq.sq.com), Simon J. Gerraty (sjg@@zen.void.oz.au),
and Michael Rendell (michael@@cs.mun.ca).
@


1.94
log
@Document correct interaction of -e flag with && and ||.  OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.93 2013/01/17 21:20:25 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: January 17 2013 $
d3887 4
a3890 3
.%T "The KornShell Command and Programming Language"
.%D 1983
.%O "ISBN 0-13-516972-0"
d3895 4
a3898 2
.%T "UNIX Shell Programming"
.%O "Hayden"
d3901 1
a3901 3
.%A "IEEE Inc."
.%T "IEEE Standard for Information Technology \- Portable Operating " \
    "System Interface (POSIX) \- Part 2: Shell and Utilities"
d3903 3
a3905 1
.%O "ISBN 1-55937-266-9"
@


1.93
log
@remove some uesless Pp;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.92 2012/06/19 16:41:00 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: June 19 2012 $
a2919 2
.Ic && ,
.Ic || ,
d2923 5
@


1.92
log
@for arithmetic expressions, note that:
+A parameter that is NULL or unset evaluates to 0.

original diff from robert peichaer
this version from naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.91 2011/09/03 22:59:08 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: September 3 2011 $
a2153 1
.Pp
@


1.91
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.90 2011/04/23 10:14:59 sobrado Exp $
d5 1
a5 1
.Dd $Mdocdate: April 23 2011 $
d1770 1
@


1.90
log
@improve line breaking in SYNOPSIS now that semantics of the .Bk macro
has changed to conform with modern groff releases.

diff for route6d(8) written mostly by schwarze@@, with lots of useful
advice from jmc@@.

ok jmc@@, schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.89 2010/09/20 07:41:17 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: September 20 2010 $
d1497 5
a1501 5
.Bl -column "xdigit" "xdigit" "xdigit" -offset indent
.It Li "alnum" Ta "cntrl" Ta "lower" Ta "space"
.It Li "alpha" Ta "digit" Ta "print" Ta "upper"
.It Li "blank" Ta "graph" Ta "punct" Ta "xdigit"
.El
@


1.89
log
@according to ingo, it isn;t a problem to have empty [BDS]q macros, so
revert that part of yesterday's diffs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.88 2010/09/18 19:25:05 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: September 18 2010 $
d16 1
a16 6
.Oo
.Fl c Ar string \*(Ba
.Fl s \*(Ba
.Ar file
.Op Ar argument ...
.Oc
@


1.88
log
@some macro cleanup:
- remove some old groff workarounds in SYNOPSIS
- avoid "Op ... Oc" constructions
- avoid empty Sq/Dq
- change some incorrect Xr
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.87 2010/07/15 20:04:35 schwarze Exp $
d5 1
a5 1
.Dd $Mdocdate: July 15 2010 $
d876 1
a876 1
\(oq\(cq
d893 1
a893 1
\(oq\(cq,
d899 1
a899 1
\(oq\(cq,
d1522 1
a1522 1
\(lq\(rq,
d1547 1
a1547 1
\(lq\(rq,
@


1.87
log
@When the first argument or arguments of a macro are opening delimiters
(parentheses and/or square brackets), both modern groff and mandoc first
output those leading delimiters as plain text, then start the macro scope
after these opening delimiters.  This is similar to printing trailing
punctuation and trailing closing delimiters on a macro line outside and
after the macro scope.  For example, ".Sq ( text )" is "(`text')",
not "`(text)'".  Thus, we now need to quote leading opening delimiters
when we want them inside the macro scope.
These are the cases in src/bin.

"makes sense" jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.86 2010/07/12 16:26:45 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: July 12 2010 $
d16 6
a21 3
.Oo Fl c Ar string \*(Ba Fl s \*(Ba
.Ar \ file\ \&
.Op Ar argument ... Oc
d876 1
a876 1
.Sq
d893 1
a893 1
.Sq ,
d899 1
a899 1
.Sq ,
d1522 1
a1522 1
.Dq ,
d1547 1
a1547 1
.Dq ,
d1585 1
a1585 1
.Xr ksh ,
d1587 1
a1587 1
.Xr sh ,
d2704 4
a2707 2
.Oo Fl nrsu Ns Oo Ar n Oc \*(Ba
.Fl R Op Fl en Oc
d3381 2
a3382 1
.Oo Op Ic +-lprtUux
d3387 4
a3390 2
.No \*(Ba Fl f Op Fl tux Oc
.Oo Ar name
d3392 2
a3393 1
.Ar ... Oc
@


1.86
log
@ksh.1: add ((, )), ]], and `name' to the list of reserved words for compounds
sh.1: add ]] and `name' to the list; additionally document the commands
`select' (requested by Ross L Richardson) and [[

ok millert sobrado
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.85 2010/05/10 21:04:54 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: May 10 2010 $
d185 1
a185 1
.Ql ( ,
d242 1
a242 1
.Ql [ .
d267 1
a267 1
.Ql [
d450 1
a450 1
.Oo Op (
@


1.85
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.84 2010/05/10 18:28:21 kili Exp $
d403 5
a407 4
case     else     function     then      !
do       esac     if           time      [[
done     fi       in           until     {
elif     for      select       while     }
d553 54
d648 66
@


1.84
log
@unset doesn't fail except for read-only variables and functions

ok guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.83 2010/02/25 13:45:54 schwarze Exp $
d5 1
a5 1
.Dd $Mdocdate: February 25 2010 $
d3528 1
a3528 1
The exit status is non-zero if any of the parameters has the read-only
@


1.83
log
@get rid of overlapping blocks discouraged by mdoc.samples(7);
found by and unbreaking the build with mandoc(1);
"fine" jmc@@ sobrado@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.82 2009/03/06 12:28:36 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: March 6 2009 $
d3528 2
a3529 2
The exit status is non-zero if any of the parameters were already unset, zero
otherwise.
@


1.82
log
@after some discussion with millert, pull in the character class info
from glob(7) to the shell pages - they have their own glob stuff,
and pointing to glob(7) is just not helpful.

ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.81 2009/03/05 15:13:30 millert Exp $
d5 1
a5 1
.Dd $Mdocdate: March 5 2009 $
d1705 1
a1705 1
.Aq Xo Ar var
d1712 1
a1712 1
.Aq Xo Ar var
@


1.81
log
@Add glob(7) and refer to it.  OK jmc@@ sobrado@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.80 2009/03/03 20:01:01 millert Exp $
d5 1
a5 1
.Dd $Mdocdate: March 3 2009 $
d1369 18
a3754 1
.Xr glob 7 ,
@


1.80
log
@Add POSIX character class support ([:alpha:] and friends) to ksh globbing.
OK deraadt@@ krw@@ jmc@@ sobrado@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.79 2009/02/07 23:15:28 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: February 7 2009 $
d3737 1
a3737 1
.Xr re_format 7 ,
@


1.79
log
@some tweaks for previous that got missed;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.78 2009/02/07 07:24:37 guenther Exp $
d5 1
a5 1
.Dd $Mdocdate: Febuary 7 2009 $
a1463 4
.Pp
The POSIX character classes (i.e.\&
.Pf [: Ns Ar class-name Ns :]
inside a [..] expression) are not yet implemented.
d3737 1
@


1.78
log
@Make built-in echo behave according to POSIX when set -o posix is in effect:
the only option is -n, and only one of those is parsed.

diff from Ingo Schwarze
ok otto@@ kili@@; manpage changes ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.77 2009/01/29 23:27:26 jaredy Exp $
d5 1
a5 1
.Dd $Mdocdate: January 29 2009 $
d1948 1
a1948 1
will not be treated as options, but printed like other arguments;
d2342 2
a2343 1
if it is exactly ``-n''.
@


1.77
log
@pass "xerrok" status across the execution call stack to more closely
match what both POSIX and ksh.1 already describe in regards to set
-e/errexit's behavior in determining when to exit from nonzero return
values.

specifically, the truth values tested as operands to `&&' and `||', as
well as the resulting compound expression itself, along with the truth
value resulting from a negated command (i.e. a pipeline prefixed `!'),
should not make the shell exit when -e is in effect.

issue reported by matthieu.
testing matthieu, naddy.
ok miod (earlier version), otto.
man page ok jmc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.76 2008/03/21 12:51:19 millert Exp $
d5 1
a5 1
.Dd $Mdocdate: March 21 2008 $
d1942 10
d2339 4
@


1.76
log
@Make ulimit able to get and set multiple limits in a single invocation
like bash and zsh do.  Requested by espie@@, OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.75 2007/05/31 20:47:44 otto Exp $
d5 1
a5 1
.Dd $Mdocdate: May 31 2007 $
d2771 1
d2773 1
a2773 1
.Ic ||
@


1.75
log
@Only process ENV when in interactive mode as SU says. Started by
tedu to fix make -j, SU thing spotted by naddy@@; ok millert@@ @@tedu
jmc@@ for the man page bit.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.74 2007/05/31 19:19:14 jmc Exp $
d3378 2
a3379 2
.Op Fl acdfHlmnpSst
.Op Ar value
d3386 2
a3387 1
if specified, may be either an arithmetic expression or the word
d3390 1
a3390 7
limit is imposed.
Note that some systems may not allow limits to be increased
once they are set.
Also note that the types of limits available are system
dependent \- some systems have only the
.Fl f
limit.
@


1.74
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.73 2006/07/26 10:13:25 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate$
d161 2
a162 1
parameter is set when the shell starts (or, in the case of login shells,
@


1.73
log
@clarifications for OPTIND:

hunk #1 from tamas tevesz;
hunk #2 from otto;

ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.72 2006/03/07 09:31:01 jmc Exp $
d5 1
a5 1
.Dd August 19, 1996
@


1.72
log
@simplify the description of what a restricted shell is:
sh.1 does not need to talk about rksh;
ksh.1 does not need to talk about rsh;
also references to rpdksh are not really helpful;

from tamas tevesz;
ok jaredy
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.71 2005/10/07 09:17:38 jmc Exp $
d1214 1
a1214 1
The index of the last argument processed when using
d2432 3
a2434 1
and the index of the next argument to be processed in the shell parameter
@


1.71
log
@remove mknod documentation - although /bin/sh supports it, this page
documents a posix shell (as far as possible);

ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.70 2005/10/06 06:39:36 otto Exp $
d91 4
a94 2
option is used or if either the basename the shell was invoked
with or the
d96 2
a97 6
parameter match the pattern
.Dq *r*sh
(e.g.\&
.Nm rsh ,
.Nm rksh ,
.Nm rpdksh ) .
@


1.70
log
@Introducing mknod as a built-in. It might be against the unix
philosophy, but in this case it's worth it. ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.69 2005/09/07 07:38:51 jmc Exp $
a2546 17
.Pp
.It Xo
.Ic mknod
.Op Fl m Ar mode
.Ar name
.Op Cm c | Cm b
.Ar major minor
.Xc
.It Xo
.Ic mknod
.Op Fl m Ar mode
.Ar name
.Cm p
.Xc
Equivalent to the
.Xr mknod 8
command.
@


1.69
log
@LINES and \\ in PS1 prompt are implemented, so remove information
which says they are not;

from matthias kilian (pr #4476);
ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.68 2005/08/21 17:40:42 millert Exp $
d2547 17
@


1.68
log
@Comment out description for 'ulimit -v' since we don't support
RLIMIT_VMEM / RLIMIT_AS at the moment.  Support for those may
go in post-3.8.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.67 2005/06/01 03:32:05 jaredy Exp $
a1204 1
Not yet implemented.
@


1.67
log
@add missing detail from IFS example

Originally from TAKAHASHI Tamotsu <ttakah@@lapis.plala.or.jp>
from PR 4220

reminded by jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.66 2005/05/12 09:18:24 jmc Exp $
d3378 1
a3378 1
.Op Fl acdfHlmnpSstv
d3442 4
a3445 4
.It Fl v Ar n
Impose a limit of
.Ar n
kilobytes on the amount of virtual memory used.
@


1.66
log
@.Xr script 7
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.65 2005/02/18 09:01:49 jmc Exp $
d777 1
@


1.65
log
@sort options to echo builtin;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.64 2005/02/08 17:39:32 jmc Exp $
d3728 2
a3729 1
.Xr environ 7
@


1.64
log
@use command prompts and literal for commands;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1,v 1.63 2005/02/08 17:28:52 jmc Exp $
d2308 1
a2308 1
.Op Fl nEe
@


1.63
log
@big overhaul of these pages, to make them clearer to read;
various other issues fixed along the way;

lots of stuff from jaredy@@ in here too..
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d367 2
a368 2
false && echo foo || echo bar
true || echo foo && echo bar
d425 3
a427 3
{ echo foo; echo bar; }
{ echo foo; echo bar\*(Ltnewline\*(Gt }
{ { echo foo; echo bar; } }
d432 1
a432 1
.Dl { echo foo; echo bar }
@


1.62
log
@note that symlinks in test file are followed, except -h and -L
(just like test(1) does);

from paul de weerd;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.61 2005/02/02 07:53:01 otto Exp $
d13 2
a14 1
.Op Fl +abCefhiklmnprsuvxX
d16 3
a18 6
.Xo
.Bk -words
.Oo Oo Fl c Ar command-string
.Op Ar command-name
.Li \&| Fl s
.Li \&| Ar file Oc
a19 2
.Op Ar argument ... Oc
.Xc
d24 2
a25 2
.Ss Shell startup
The following options can be specified only on the command line:
d27 1
a27 1
.It Fl c Ar command-string
d30 1
a30 1
.Ar command-string .
d32 1
a32 33
Interactive mode; see below.
.It Fl l
Login shell; see below.
.It Fl s
The shell reads commands from standard input; all non-option arguments
are positional parameters.
.It Fl r
Restricted mode; see below.
.El
.Pp
In addition to the above, the options described in the
.Ic set
built-in command can also be used on the command line.
.Pp
If neither the
.Fl c
nor the
.Fl s
option is specified, the first non-option argument specifies the name
of a file the shell reads commands from.
If there are no non-option
arguments, the shell reads commands from the standard input.
The name of
the shell (i.e., the contents of
.Ic $0 )
is determined as follows: if the
.Fl c
option is used and there is a non-option argument, it is used as the name;
if commands are being read from a file, the file is used as the name;
otherwise, the name the shell was called with (i.e.,
.Li argv[0] )
is used.
.Pp
d35 1
a35 2
if the
.Fl i
d39 1
a39 1
An interactive shell has job control enabled (if available), ignores the
d44 1
a44 1
signals, and prints prompts before reading input (see
d54 34
a87 1
.Pp
d90 2
a91 3
if the
.Fl r
option is used or if either the basename of the name the shell was invoked
d95 5
a99 6
.Dq \&*r\&*sh
(e.g.,
.Dq rsh ,
.Dq rksh ,
.Dq rpdksh ,
etc.).
d126 9
a134 5
Redirections that create files can't be used (i.e.,
.Ql > ,
.Ql >| ,
.Ql >> ,
.Ql <> ) .
d137 5
a141 7
A shell is
.Dq privileged
if the
.Fl p
option is used or if the real user ID or group ID does not match the
effective user ID or group ID (see
.Xr getuid 2
d143 5
a147 3
.Xr getgid 2 ) .
A privileged shell does not process
.Pa $HOME/.profile
d149 11
a159 21
.Ev ENV
parameter (see below).
Instead, the file
.Pa /etc/suid_profile
is processed.
Clearing the privileged option causes the shell to set
its effective user ID (group ID) to its real user ID (group ID).
.Pp
If the basename of the name the shell is called with (i.e.,
.Li argv[0] )
starts with
.Ql -
or if the
.Fl l
option is used,
the shell is assumed to be a login shell and the shell reads and executes
the contents of
.Pa /etc/profile
and
.Pa $HOME/.profile
if they exist and are readable.
d166 1
a166 1
.Pq Sq \&~
a168 10
If the
.Ev ENV
parameter is not set (and not
.Dv NULL )
and
.Nm pdksh
was compiled with the
.Dv DEFAULT_ENV
macro defined, the file named in that macro is included (after the above
mentioned substitutions have been performed).
d182 3
a184 3
.Ql < ,
.Ql > ,
.Ql | ,
d187 1
d189 1
a189 1
.Ql \&)
d193 8
a200 7
The meta-characters are used in building the following tokens:
.Ql < ,
.Ql <& ,
.Ql << ,
.Ql > ,
.Ql >& ,
.Ql >> ,
d204 1
a204 1
.Ql |
d214 1
a214 1
.Ql \&;\&;
d219 1
a219 1
.Ql \&( .. \&)
d227 1
a227 1
.Pq Sq \&'
a263 8
.Ql {
and
.Ql }
delimit
.Xr csh 1
style alterations (see
.Sx Brace expansion
below);
d295 3
a297 3
The command may be a shell built-in
command, a function or an external command (i.e., a separate executable file
that is located using the
d299 1
a299 1
parameter (see
d301 1
a301 1
below)).
d375 1
a375 1
does keep track of the status of asynchronous commands, see
d379 1
a379 1
(i.e., in most scripts), the command is started with signals
d401 1
a401 1
word of a command (i.e., they can't be preceded by parameter assignments or
d403 5
a407 7
.Bd -unfilled -offset center
.Bf Sy
case    else    function        !
do      esac    if      time    [[
done    fi      in      until   {
elif    for     then    while   }
.Ef
d409 2
a410 1
.Sy Note:
d423 5
a427 5
For example,
.Bd -unfilled -offset indent
.Ic { echo foo; echo bar; }
.Ic { echo foo; echo bar<newline> }
.Ic { { echo foo; echo bar; } }
d430 1
a430 4
are all valid, but
.Bd -unfilled -offset indent
.Ic { echo foo; echo bar }
.Ed
d432 1
a432 1
is not.
d434 1
a434 1
.It Ic \&( Ar list Ic \&)
d440 1
a440 1
.It Ic \&{ Ar list Ic \&}
d445 1
a445 1
.Ic \&{
d447 1
a447 1
.Ic \&}
d449 6
a454 6
.It Xo Ic case Ar word Ic in [
.Ns [ Ic \&( ] Ar pattern [
.Ns Ic \&| Ar pattern ] ... Ic \&)
.Ar list Ic \&;\&;
.Ns ] Ar ...
.Ic esac
d460 2
a461 2
against the specified
.Ar pattern Ns s ;
d482 2
a483 2
(e.g.,
.Ic case $foo { *) echo bar; } ) .
d491 3
a493 3
.It Xo Ic for Ar name No [
.Ic in Ar word ... term Ns ]
.Ic do Ar list Ic done
d505 1
a505 4
.Po
.Ic $1 , $2 ,
etc.\&
.Pc
d511 2
a512 2
(e.g.,
.Ic for i\&; { echo $i; } ) .
d520 7
a526 7
.Ar term
is either a newline or a
.Ql \&; .
.It Xo Ic if Ar list Ic then
.Ar list [ Ic elif Ar list Ic then
.Ar list ] Ar ... [ Ic else
.Ar list ] Ic fi
d541 1
a541 1
fail (i.e., exit with non-zero status), the
d553 3
a555 2
.It Xo Ic until Ar list Ic do Ar list
.Ic done
d562 3
a564 2
.It Xo Ic while Ar list Ic do Ar list
.Ic done
d577 2
a578 2
.It Xo Ic function Ar name Ic \&{
.Ar list Ic \&}
d588 1
a588 1
.It Ar name Ic () Ar command
d619 1
a619 1
inside double quotes have their usual meaning (i.e., parameter, command or
d637 1
a637 1
.Sy Note:
d640 2
a641 2
below for a special rule regarding sequences of the form
.Ic \&"...`...\e\&"...`..\&" .
d646 1
a646 1
The shell expands command aliases (i.e., substitutes the alias name
d652 1
a652 1
when a quoted word is found or when an alias word that is currently being
d656 4
a659 7
.Pp
.Bl -item -offset indent -compact
.It
.Ic hash='alias -t'
.It
.Ic type='whence -v'
.El
d675 2
a676 2
option is set (i.e.,
.Ic set Fl o Ic trackall
d678 1
a678 1
.Ic set Fl h ) ,
d683 16
a698 5
.Ic cat , cc , chmod , cp ,
.Ic date , ed , emacs , grep ,
.Ic ls , mail , make , mv ,
.Ic pr , rm , sed , sh ,
.Ic vi ,
d700 1
a700 1
.Ic who .
d708 1
a708 1
.Ic $ Ns Ar name
d710 1
a710 1
.Ic ${ Ns Ar ... Ns Ic \&} ;
d712 1
a712 1
.Ic $( Ns Ar command Ns Ic \&)
d714 1
a714 1
.Ic ` Ns Ar command Ns Ic ` ;
d716 1
a716 1
.Ic $(( Ns Ar expression Ns Ic )) .
d739 1
a739 1
whitespace is stripped (i.e., no leading or trailing empty field is created by
d747 1
a747 1
.Dq <space>: ,
d749 1
a749 1
.Dq <space>A<space>:<space><space>B::D ,
d786 1
a786 1
brace expansion and file name expansion (see the relevant sections below).
d791 1
a791 1
.Ic $( Ns Ar command Ns Ic \&)
d795 1
a795 1
.Ic ` Ns Ar command Ns Ic `
d807 1
a807 1
.Ic \&< Ar file
d809 3
a811 3
.Ar file
(note that
.Ic $(< foo)
d814 1
a814 1
but it is carried out more efficiently because no process is started).
d816 2
a817 2
.Sy Note:
.Ic $( Ns Ar command Ns Ic \&)
d840 2
a841 1
.Ic $ Ns Ar name
d843 3
a845 1
.Ic ${ Ns Ar name Ns Ic \&} ,
d862 5
a866 2
.Ic # , PWD ,
etc.; this is the only way the special single character parameters are set.
d868 1
a868 1
Third, parameters can be assigned values on the command line, for example,
d871 1
a871 1
.Ev FOO
d877 1
a877 1
exported, see below for implications of this).
d883 1
a883 1
.Ic readonly
d893 1
a893 1
.Ic read
d895 1
a895 1
.Ic set Fl A
d901 3
a903 3
.Xo Ic ${ Ns Ar name Ns =
.Ns Ar value Ns Ic \&}
.Xc
d923 1
a923 1
.Ic ${ Ns Ar name Ns Ic \&}
d926 3
a928 3
.It Xo Ic ${ Ns Ar name Ns
.Ic \&:\&- Ns Ar word Ns Ic \&}
.Xc
d936 3
a938 3
.It Xo Ic ${ Ns Ar name Ns
.Ic \&:\&+ Ns Ar word Ns Ic \&}
.Xc
d945 3
a947 3
.It Xo Ic ${ Ns Ar name Ns
.Ic \&:\&= Ns Ar word Ns Ic \&}
.Xc
d957 3
a959 3
.It Xo Ic ${ Ns Ar name Ns
.Ic \&:\&? Ns Ar word Ns Ic \&}
.Xc
d967 8
a974 4
.Ar name Ns \&: )
and an error occurs (normally causing termination of a shell script, function
or .-script).
If word is omitted the string
d993 3
a995 2
.Bl -tag -width Ds
.It Ic ${# Ns Ar name Ns Ic \&}
d1001 1
a1001 1
not specified, or the length of the string value of parameter
d1003 3
a1005 3
.It Xo Ic ${# Ns Ar name Ns
.Ic [*\&]} , ${# Ns Ar name Ns Ic [@@\&]}
.Xc
d1008 1
d1011 6
a1016 5
.Ic ${ Ar name Ic # Ar pattern
.Sm on
.Ic } ,
.Sm off
.Ic ${ Ar name Ic ## Ar pattern Ic \&}
d1028 1
d1031 6
a1036 5
.Ic ${ Ar name Ic % Ar pattern
.Sm on
.Ic } ,
.Sm off
.Ic ${ Ar name Ic %% Ar pattern Ic }
d1039 1
a1039 3
Like
.Ic ${..#..}
substitution, but it deletes from the end of the value.
d1049 1
a1049 3
The number of positional parameters (i.e.,
.Ic $1 , $2 ,
etc.).
d1051 1
a1051 3
The process ID of the shell, or the
.Tn PID
of the original shell if it is a subshell.
d1057 1
a1057 1
.It Ev \&-
d1064 1
a1064 1
.Ic \&$?\&
d1067 3
a1069 4
The name the shell was invoked with (i.e.,
.Li argv[0] ) ,
or the
.Ar command-name
d1072 1
a1072 3
option and the
.Ar command-name
was supplied, or the
d1074 13
a1086 9
argument, if it was supplied.
If the
.Ic posix
option is not set,
.Ic \&$0
is the name of the current function or script.
.It Ev 1 ... Ev 9
The first nine positional parameters that were supplied to the shell, function
or .-script.
d1088 3
a1090 5
.Ic ${ Ns Ar number Ns Ic \&} .
.It Ev \&*
All positional parameters (except parameter 0); i.e.,
.Ic $1 , $2 , $3 ,
\&...
d1100 1
a1100 1
.It Ev \&@@
d1102 1
a1102 1
.Ic \&$\&* ,
d1106 1
a1106 1
.Ic \&$\&@@
d1118 1
a1118 1
Works the same way as
d1128 1
a1128 1
.Dq \&.
d1142 1
a1142 1
.Ic set Fl o
d1144 1
a1144 1
.Ic kill Fl l
d1161 1
a1161 1
.Dq \&#\&! Ns Ar shell
d1188 1
a1188 1
command, to split values into distinct arguments; normally set to space, tab
d1194 1
a1194 1
.Sy Note:
d1223 3
a1225 1
commands and .'d files.
d1228 2
a1229 2
.Dq \&. ,
the current directory.
d1254 1
a1254 1
.Dq \&$\ \&
d1256 1
a1256 1
.Dq \&#\ \&
d1260 1
a1260 1
.Dq \&>\ \& ,
d1266 4
a1269 3
The prompt is printed verbatim (i.e., no substitutions are done).
Default is
.Dq \&+\ \& .
d1280 1
a1280 1
The directory shell temporary files are created in.
d1294 1
a1294 1
.Ql +
d1310 2
a1311 1
In parameter assignments (those preceding a simple-command or those occurring
d1318 5
a1322 3
tilde expansion is done after any unquoted colon
.Pq Sq \&: ,
and login names are also delimited by colons.
d1327 1
a1327 1
command may be used to list, change, and add to this cache (e.g.,
d1331 4
a1334 1
.Ql \&?
d1336 1
a1336 1
.Ql *
d1340 1
a1340 1
Once brace expansion has been performed, the shell replaces file
d1345 1
a1345 1
.It Ic \&?
d1347 1
a1347 1
.It Ic \&*
d1349 1
a1349 1
.It Ic \&[ Ns .. Ns Ic \&]
d1354 1
a1354 1
(e.g.,
d1357 1
a1357 1
.Dq a
d1370 2
a1371 3
.It Ic \&[\&! Ns .. Ns Ic \&]
Like
.Ic \&[ Ns .. Ns Ic \&] ,
d1374 1
a1374 3
.It Xo Ic \&*( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
d1379 1
a1379 1
.Ic \&*(foo\&|bar)
d1387 1
a1387 3
.It Xo Ic \&+( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
d1392 1
a1392 1
.Ic \&+(foo\&|bar)
d1399 1
a1399 3
.It Xo Ic \&?( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
d1404 1
a1404 1
.Ic \&?(foo\&|bar)
d1407 1
a1407 1
.Dq foo
d1411 1
a1411 3
.It Xo Ic \&@@( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
d1415 1
a1415 1
.Ic \&@@(foo\&|bar)
d1421 1
a1421 3
.It Xo Ic \&!( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
d1425 1
a1425 1
.Ic \&!(foo\&|bar)
d1431 1
a1431 1
.Ic \&!(\&*)
d1433 1
a1433 1
.Ic \&!(\&?)\&*
d1440 1
a1440 1
.Dq \&.
d1442 1
a1442 1
.Dq \&.\&. ,
d1447 1
a1447 3
and
.Xr bash
do, so this may have to change (too bad).
d1453 2
a1454 4
even if they are explicitly used in a
.Ic \&[ Ns .. Ns Ic \&]
sequence; also, the names
.Dq \&.
d1456 1
a1456 1
.Dq \&.\&.
d1458 1
a1458 1
.Dq \&.\&* .
d1466 3
a1468 7
The
.Tn POSIX
character classes (i.e.,
.Ic \&[\&: Ns Ar class-name Ns Ic \&:\&]
inside a
.Ic \&[ Ns .. Ns Ic \&]
expression) are not yet implemented.
d1480 1
a1480 1
.It Ic \&> Ar file
d1485 1
a1485 1
does not exist, it is created; if it does exist, is a regular file and the
d1489 1
a1489 1
.Ic cmd < foo > foo
d1496 1
a1496 1
.It Ic \&>\&| Ar file
d1498 1
a1498 1
.Ic \&> ,
d1502 1
a1502 1
.It Ic \&>\&> Ar file
d1504 1
a1504 1
.Ic \&> ,
d1511 1
a1511 1
.It Ic \&< Ar file
d1515 1
a1515 1
.It Ic \&<\&> Ar file
d1517 1
a1517 1
.Ic \&< ,
d1519 1
a1519 1
.It Ic \&<\&< Ar marker
d1543 1
a1543 1
.It Ic \&<\&<\&- Ar marker
d1545 1
a1545 1
.Ic \&<\&< ,
d1547 1
a1547 1
.It Ic \&<\&& Ar fd
d1558 1
a1558 1
.It Ic \&>\&& Ar fd
d1560 1
a1560 1
.Ic \&<\&& ,
d1564 3
a1566 2
In any of the above redirections, the file descriptor that is redirected (i.e.,
standard input or standard output) can be explicitly given by preceding the
d1590 2
a1591 1
pipelines are created and in the order they are given, so
d1593 1
a1593 3
.Dl Ic cat /foo/bar 2\*(Gt&1 \*(Gt /dev/null \&| cat -n
.Pp
will print an error with a line number prepended to it.
d1597 2
a1598 6
command, inside
.Ic $(( Ns .. Ns Ic ))
expressions, inside array references (e.g.,
.Sm off
.Ar name Ic \&[ Ar expr Ic \&] ) ,
.Sm on
d1608 3
a1610 4
.Bl -item -offset indent -compact
.It
.Ic \&+ \&- \&! \&~ \&+\&+ \&-\&-
.El
d1613 14
a1626 27
.Bl -item -offset indent -compact
.It
.Ic \&,
.It
.Ic = \&*= /= %= \&+= \&-= \&<\&<=
.Ic \&>\&>= \&&= ^= \&|=
.It
.Ic \&|\&|
.It
.Ic \&&\&&
.It
.Ic \&|
.It
.Ic ^
.It
.Ic \&&
.It
.Ic == \&!=
.It
.Ic \&< \&<= \&>= \&>
.It
.Ic \&<\&< \&>\&>
.It
.Ic \&+ \&-
.It
.Ic \&* / %
.El
d1629 3
a1631 5
.Bl -item -offset indent -compact
.It
.Ic \&?\&:
(precedence is immediately higher than assignment)
.El
d1634 3
a1636 4
.Bl -item -offset indent -compact
.It
.Ic \&( \&)
.El
d1639 1
a1639 1
.Ar base Ns Ic \&# Ns Ar number ,
d1661 1
a1661 1
.It unary Ic \&+
d1663 1
a1663 1
.It unary Ic \&-
d1665 2
a1666 3
.It Ic \&!
Logical
.Tn NOT ;
d1668 3
a1670 4
.It Ic \&~
Arithmetic (bit-wise)
.Tn NOT .
.It Ic \&+\&+
d1676 1
a1676 1
.It Ic \&-\&-
d1678 1
a1678 1
.Ic \&+\&+ ,
d1680 1
a1680 1
.It Ic \&,
d1684 5
a1688 4
.It Ic =
Assignment; variable on the left is set to the value on the right.
.It Xo Ic \&*= /= \&+= \&-= \&<\&<=
.Ic \&>\&>= \&&= ^= \&|=
d1691 6
a1696 3
.Ao Ar var Ac
.Ao Ar op Ac =
.Ao Ar expr Ac
d1698 16
a1713 9
.Ao Ar var Ac =
.Ao Ar var Ac
.Ao Ar op Ac
.Ic \&(
.Ao Ar expr Ac
.Ic \&) .
.It Ic \&|\&|
Logical
.Tn OR ;
d1716 2
a1717 3
.It Ic \&&\&&
Logical
.Tn AND ;
d1720 4
a1723 6
.It Ic \&|
Arithmetic (bit-wise)
.Tn OR .
.It Ic ^
Arithmetic (bit-wise)
.Tn XOR
d1725 3
a1727 4
.It Ic \&&
Arithmetic (bit-wise)
.Tn AND .
.It Ic ==
d1729 1
a1729 1
.It Ic \&!=
d1731 1
a1731 1
.It Ic \&<
d1734 1
a1734 1
.It Ic \&<= \&>= \&>
d1737 2
a1738 2
.Ic \&< .
.It Ic \&<\&< \&>\&>
d1741 1
a1741 1
.It Ic \&+ \&- \&* /
d1743 1
a1743 1
.It Ic %
d1747 6
a1752 2
.It Xo Ao Ar arg1 Ac Ic \ \&?
.Ao Ar arg2 Ac Ic \ \&: Ao Ar arg3 Ac
d1755 1
a1755 1
.Ao Ar arg1 Ac
d1757 3
a1759 3
.Ao Ar arg2 Ac ,
otherwise
.Ao Ar arg3 Ac .
d1763 1
a1763 1
.Ic function Ar name
d1765 1
a1765 1
.Fn name
d1769 3
d1775 2
a1776 4
shell arguments (i.e., positional parameters
.Ic $1 , $2 ,
etc.) are never visible
inside them.
d1786 1
a1786 1
.Ic typeset \&+f
d1788 1
a1788 1
.Ic typeset \&-f .
d1792 2
a1793 2
.Ic typeset \&-fu )
may be used to create undefined functions; when an undefined function is
d1800 1
a1800 1
continued (i.e., the shell searches the regular built-in command table and
d1813 1
a1813 1
.Ic typeset \&-ft
d1815 1
a1815 1
.Ic typeset \&-fx ,
d1833 2
a1834 2
Note that special parameters (e.g.,
.Ic \&$$ , $\&! )
d1847 1
a1847 1
.Ic \&(\&)
d1851 2
a1852 6
The
.Ic $0
parameter is set to the name of the function (Bourne-style functions
leave
.Ic $0
untouched).
d1862 1
a1862 1
.Dv OPTIND
d1868 2
d1871 1
a1871 1
.Bl -bullet -offset indent
a1881 1
.El
d1883 3
a1885 6
The shell is intended to be
.Tn POSIX
compliant; however, in some cases,
.Tn POSIX
behaviour is contrary either to the original Korn shell behaviour or to user
convenience.
d1889 2
a1890 4
.Pq Ic set Fl o Ic posix .
If it is on, the
.Tn POSIX
behaviour is followed; otherwise, it is not.
d1895 4
a1898 4
.Dv POSIXLY_CORRECT
parameter. (The shell can also be compiled so that it is in
.Tn POSIX
mode by default; however, this is usually not desirable).
d1906 2
a1907 2
.Ev $ENV .
If not in
d1916 1
a1916 1
.Ic `\&.\&.`
d1918 1
a1918 3
In
.Tn POSIX
mode, the
d1920 3
a1922 4
is interpreted when the command is interpreted; in
.Pf non- Tn POSIX
mode, the
backslash is stripped before the command substitution is interpreted.
d1927 1
a1927 3
in
.Tn POSIX
mode,
d1929 1
a1929 3
in
.Pf non- Tn POSIX
mode.
d1936 3
a1938 6
In
.Tn POSIX
mode, signal names are listed one per line; in
.Pf non- Tn POSIX
mode,
signal numbers, names, and descriptions are printed in columns.
d1940 1
a1940 3
.Po Fl v
\ perhaps
.Pc
d1945 2
a1946 5
In
.Tn POSIX
mode, the exit status is 0 if no errors occur; in
.Pf non- Tn POSIX
mode, the exit status is that of the last foregrounded job.
d1949 1
a1949 3
In
.Tn POSIX
mode, options must start with a
d1951 1
a1951 3
in
.Pf non- Tn POSIX
mode, options can start with either
d1956 2
a1957 19
Brace expansion (also known as alternation).
In
.Tn POSIX
mode, brace expansion is
disabled; in
.Pf non- Tn POSIX
mode, brace expansion is enabled.
Note that
.Ic set Fl o Ic posix
(or setting the
.Ev POSIXLY_CORRECT
parameter) automatically turns the
.Ic braceexpand
option off; however, it can be explicitly turned on later.
.It
.Ic set \&- .
In
.Tn POSIX
mode, this does not clear the
d1961 1
a1961 3
options; in
.Pf non- Tn POSIX
mode, it does.
d1965 1
a1965 3
In
.Tn POSIX
mode, the exit status of
d1967 2
a1968 3
is 0 if there are no errors; in
.Pf non- Tn POSIX
mode, the exit status is that of any
d1973 2
a1974 6
.Ic set \&-\&- `false`; echo $?\&
prints 0 in
.Tn POSIX
mode, 1 in
.Pf non- Tn POSIX
mode.
d1986 2
a1987 6
In
.Tn POSIX
mode, normal argument expansion is done; in
.Pf non- Tn POSIX
mode,
field splitting, file globbing, brace expansion, and (normal) tilde expansion
d1991 4
a1994 9
In
.Tn POSIX
mode, signals can be specified as digits, only
if signal numbers match
.Tn POSIX
values (i.e., HUP=1, INT=2, QUIT=3, ABRT=6,
KILL=9, ALRM=14, and TERM=15); in
.Pf non- Tn POSIX
mode, signals can always be digits.
d1997 2
a1998 6
In
.Tn POSIX
mode, alias expansion is only carried out when
reading command words; in
.Pf non- Tn POSIX
mode, alias expansion is carried out on any
d2002 9
a2010 11
loop
.Pp
.Bl -item -offset indent -compact
.It
.Ic alias a='for ' i='j'
.It
.Xo
.Ic a i in 1 2; do echo i=$i j=$j;
.Ic done
.Xc
.El
a2011 9
uses parameter
.Ic i
in
.Tn POSIX
mode,
.Ic j
in
.Pf non- Tn POSIX
mode.
d2013 2
a2014 4
Test.
In
.Tn POSIX
mode, the expression
d2017 3
a2019 4
.Sq Ic \&!
arguments) is always true as it is a non-zero length string; in
.Pf non- Tn POSIX
mode, it tests if file descriptor 1 is a
d2021 1
a2021 1
(i.e., the
d2036 2
a2037 2
parameter is not used to find them, and an error during their execution can
cause a non-interactive shell to exit and parameter assignments that are
d2044 1
a2044 1
splitting, file globbing, brace expansion, nor tilde expansion is performed
d2052 1
a2052 3
and
.Tn POSIX
differ somewhat in which commands are considered
d2055 1
a2055 2
.Tn POSIX
special commands
d2069 1
a2069 1
.Pq Pf non- Tn POSIX
d2073 1
a2073 2
.Tn POSIX
regular commands
d2090 1
a2090 3
differently from the
.Tn POSIX
special and regular commands.
d2092 1
a2092 1
Once the type of the command has been determined, any command-line parameter
d2096 3
a2098 2
.Bl -tag -width Ds
.It Ic \&. Ar file Op Ar arg1 ...
d2110 1
d2114 1
d2116 4
a2119 3
.Op Fl d | Ic +-t Op Fl r
.Op Ic +-px
.Op Ic +-
d2145 9
a2153 1
In addition, if the
a2158 9
.Fl x
option sets
.Po Ic \&+x
\ clears
.Pc
the export attribute of an alias, or, if no names are given, lists the aliases
with the export attribute (exporting an alias has no effect).
.Pp
The
d2167 6
a2172 5
.Fl d
option causes directory aliases, which are used in tilde expansion, to be
listed or set (see
.Sx Tilde expansion
above).
d2176 1
a2176 1
.Ic %\&+
d2178 1
a2178 1
This command is only available on systems which support job control (see
d2180 2
a2181 1
below for more information).
d2193 2
a2194 1
.It Ic builtin Ar command Op Ar arg1 ...
d2197 4
a2200 1
.It Xo Ic cd Op Fl LP
d2228 1
a2228 1
the previous working directory is used (see
d2231 1
d2236 1
a2236 1
option (see the
d2238 2
a2239 2
command below) isn't set, references to
.Dq \&.\&.
d2248 1
a2248 1
.Dq \&.\&.
d2256 4
a2259 1
.It Xo Ic cd Op Fl LP
d2268 6
a2273 2
.It Xo Ic command Op Fl p
.Ar cmd Op Ar arg1 ...
d2278 2
a2279 2
had not been specified, with two exceptions.
First,
d2281 3
a2283 2
cannot be a shell function, and second, special built-in commands lose their
specialness (i.e., redirection and utility errors do not cause the shell to
d2285 1
d2291 1
a2291 2
.Tn POSIX Ns ish
systems, it is the value returned by
d2293 1
d2305 4
a2308 1
.It Xo Ic echo Op Fl neE
d2330 1
d2334 3
a2336 1
.It Xo Ic exec
d2348 1
d2356 5
a2360 2
.It Xo Ic export Op Fl p
.Op Ar parameter Ns Op \&= Ns Ar value
d2372 1
d2375 4
a2378 2
.It Xo Ic fc
.Oo Fl e No \&- \&| Fl s Oc
d2394 5
d2401 1
d2405 1
a2405 1
.Ic %\&+
d2407 1
a2407 1
This command is only available on systems which support job control (see
d2409 5
a2413 2
below for more information).
.It Xo Ic getopts Ar optstring name
d2446 1
d2453 1
a2453 1
If
d2458 1
a2458 1
is unset and an error message is printed to standard error.
d2479 1
a2479 1
.Ev OPTIND
d2481 4
a2484 1
.It Xo Ic hash Op Fl r
d2495 4
a2498 1
.It Xo Ic jobs Op Fl lpn
d2518 3
a2520 1
.It Xo Ic kill
d2522 4
a2525 4
.Fl Ar signum | Fl Ar signame Oc {
.Ar job |
.Ar pid |
.Ar pgrp No } Ar ...
d2537 9
a2545 5
.It Ic kill -l Op Ar exit-status ...
Print the name of the signal that killed a process which exited with the
specified
.Ar exit-status Ns es.
If no arguments are specified, a list of all the signals, their numbers and
d2547 4
a2550 2
.It Xo Ic print
.Oo Fl nprsu Ns Ar n \*(Ba
d2584 1
a2584 1
option prints to the history file instead of standard output, the
d2591 1
a2591 6
.Pc ,
and the
.Fl p
option prints to the co-process (see
.Sx Co-processes
above).
d2606 1
d2613 1
a2613 1
option (see the
d2615 1
a2615 1
command below) isn't set, the logical path is printed (i.e., the path used to
d2623 1
a2623 1
.Dq \&.\&.
d2625 5
a2629 2
.It Xo Ic read Oo Fl prsu Ns Ar n
.Oc Op Ar parameter ...
d2656 1
a2656 1
(e.g.,
d2661 1
a2661 3
and
.Fl p
options cause input to be read from file descriptor
d2663 2
a2664 3
or the current co-process (see
.Sx Co-processes
above for comments on this), respectively.
d2668 4
a2671 1
.It Xo Ic readonly Op Fl p
d2689 1
d2711 3
a2713 1
.It Xo Ic set Op Ic +-abCefhkmnpsuvxX
d2716 1
a2716 1
.Op Fl \&-
d2722 1
a2722 1
.Pq Ic \&-
d2724 1
a2724 1
.Pq Ic \&+
d2727 1
a2727 1
.Ic \&+ Ns Fl o Ar option
d2731 1
a2731 1
.Ic \&+\&- Ns Ar letter
d2738 1
a2738 1
.It Fl A
d2742 1
a2742 1
.Ar arg ... .
d2745 3
a2747 4
is used, the array is reset (i.e., emptied) first; if
.Ic \&+A
is used, the first N elements are set (where N is the number of
.Ar arg Ns s ) ,
d2749 1
a2749 1
.It Fl a Ic allexport
d2751 1
a2751 1
.It Fl b Ic notify
d2756 4
a2759 15
.It Ic csh-history
Enables a subset of
.Xr csh 1 Ns -style
history editing using the
.Ql !\&
character.
.It Fl C Ic noclobber
Prevent
.Ic \&>
redirection from overwriting existing files
.Po
.Ic \&>\&|
must be used to force an overwrite
.Pc .
.It Fl e Ic errexit
d2762 1
a2762 1
trap) as soon as an error occurs or a command fails (i.e., exits with a
d2769 1
a2769 1
.Ic \&&\&& ,
d2771 1
a2771 1
.Ic \&|\&|
d2773 1
a2773 1
.It Fl f Ic noglob
d2775 1
a2775 1
.It Fl h Ic trackall
d2780 1
a2780 4
.It Fl i Ic interactive
Enable interactive mode.
This can only be set/unset when the shell is invoked.
.It Fl k Ic keyword
d2782 1
a2782 6
.It Fl l Ic login
The shell is a login shell.
This can only be set/unset when the shell is invoked (see
.Sx Shell startup
above).
.It Fl m Ic monitor
d2784 1
a2784 1
.It Fl n Ic noexec
d2788 4
a2791 2
.It Fl p Ic privileged
Set automatically if, when the shell starts, the read UID or GID does not match
d2793 3
a2795 11
See
.Sx Shell startup
above for a description of what this means.
.It Fl r Ic restricted
Enable restricted mode.
This option can only be used when the shell is invoked.
See
.Sx Shell startup
above for a description of what this means.
.It Fl s Ic stdin
If used where the shell is invoked, commands are read from standard input.
d2808 1
a2808 1
.It Fl u Ic nounset
d2811 1
a2811 1
.Ql +
d2815 1
a2815 1
.It Fl v Ic verbose
d2817 5
a2821 1
.It Fl x Ic xtrace
a2824 4
.It Fl X Ic markdirs
Mark directories with a trailing
.Ql /
during file name generation.
d2831 8
d2842 1
a2842 1
signal when a login shell exists.
d2859 2
a2860 2
(i.e., the filesystem's)
.Dq \&.\&.
d2863 2
a2864 2
directories (i.e., the shell handles
.Dq \&.\&. ,
d2879 1
a2879 3
Enable
.Tn POSIX
mode.
d2883 4
d2888 3
a2890 12
Enable vi-like command-line editing (interactive shells only).
.It Ic viraw
No effect.
In the original Korn shell, unless
.Ic viraw
was set, the vi command-line mode would let the
.Xr tty 4
driver do the work until
.Tn ESC
(^[) was entered.
.Nm pdksh
is always in viraw mode.
d2896 1
a2896 1
.Dq M\&- .
d2902 9
d2916 1
a2916 1
.Dv \&- .
d2923 1
a2923 3
order, to the positional parameters (i.e.,
.Ic $1 , $2 ,
etc.).
d2930 1
a2930 1
option is treated specially \(em it clears both the
d2935 1
d2941 2
a2942 2
.Dq 1 ,
.Dq 2 ,
d2946 1
d2968 1
a2968 1
.It Fl r Ar file
d2970 2
a2971 2
exists and is readable.
.It Fl w Ar file
d2973 2
a2974 2
exists and is writable.
.It Fl x Ar file
d2976 2
a2977 2
exists and is executable.
.It Fl a Ar file
d2979 1
a2979 1
exists.
d2986 1
a2986 13
.It Fl d Ar file
.Ar file
is a directory.
.It Fl c Ar file
.Ar file
is a character special device.
.It Fl b Ar file
.Ar file
is a block special device.
.It Fl p Ar file
.Ar file
is a named pipe.
.It Fl u Ar file
d2988 1
a2988 1
mode has setuid bit set.
d2991 4
a2994 1
mode has setgid bit set.
d2997 4
a3000 2
mode has sticky bit set.
.It Fl s Ar file
d3002 1
a3002 1
is not empty.
a3005 15
.It Fl G Ar file
.Ar file Ns 's
group is the shell's effective group ID.
.It Fl h Ar file
.Ar file
is a symbolic link.
.It Fl H Ar file
.Ar file
is a context dependent directory (only useful on HP-UX).
.It Fl L Ar file
.Ar file
is a symbolic link.
.It Fl S Ar file
.Ar file
is a socket.
d3016 1
a3016 4
doesn't exist (thus
.Ic \&[ -o Ar foo
.Ic -o -o \&! Ns Ar foo Ic \&]
returns true if and only if option
d3019 35
a3065 14
.It Fl t Op Ar fd
File descriptor
.Ar fd
is a
.Xr tty 4
device.
If the
.Ic posix
option is not set,
.Ar fd
may be left out, in which case it is taken to be 1 (the behaviour differs due
to the special
.Tn POSIX
rules described below).
d3069 1
a3069 1
Note that there is the potential for problems if
d3071 1
a3071 9
turns out to be an operator (e.g.,
.Fl r ) .
It is generally better to use a test like
.Sm off
.Ic \&[\ X\&" Ar string Ic \&" Ic \ \&]
.Sm on
instead (double quotes are used in case
.Ar string
contains spaces or file globbing characters).
a3074 3
.It Fl n Ar string
.Ar string
is not empty.
d3077 1
a3077 1
.It Ar string No \&!= Ar string
d3096 6
a3101 14
.Pp
.Bl -tag -width "expr -o expr" -compact
.It Ar expr Fl o Ar expr
Logical
.Tn OR .
.It Ar expr Fl a Ar expr
Logical
.Tn AND .
.It Ic \&! Ar expr
Logical
.Tn NOT .
.It Ic \&( Ar expr Ic \&)
Grouping.
.El
d3113 1
a3113 2
.Ic \&[ -w /dev/fd/2 \&]
tests if file descriptor 2 is writable.
d3115 1
a3115 2
Note that some special rules are applied (courtesy of
.Tn POSIX )
d3121 1
a3121 1
is less than five; if leading
d3132 1
a3132 1
.Sy Note:
d3134 1
a3134 1
.Ic if \&[ $foo = bar \&]
d3136 1
a3136 1
.Ic foo
d3139 1
a3139 1
or unset, if it has embedded spaces (i.e.,
d3142 1
a3142 1
.Sq Ic \&!
d3146 1
a3146 1
.Ic if \&[ \&"X$foo\&" = Xbar \&]
d3148 1
d3157 1
d3165 1
a3165 1
.Pq Sq \&- ,
d3169 1
a3169 1
opportunity (i.e., when the current command completes, or before printing the
d3174 1
a3174 1
is the name of a signal (e.g.,
d3179 1
a3179 1
.Ic kill Fl l
d3181 1
d3191 1
a3191 1
option were see \(em see the
d3218 1
d3221 4
a3224 2
.It Xo Ic typeset
.Oo Op Ic +-Ulprtux
d3229 1
a3229 1
.No \&| Fl f Op Fl tux Oc
d3250 1
a3250 1
.Pq Ic \&-
d3252 1
a3252 1
.Pq Ic \&+ .
d3265 3
a3267 2
.Ar name Ns s
are given, functions are listed with their values (i.e., definitions) unless
d3271 12
a3282 2
.Bl -tag -width 3n
.It Fl L Ns Ar n
a3294 35
.It Fl R Ns Ar n
Right justify attribute.
.Ar n
specifies the field width.
If
.Ar n
is not specified, the current width of a parameter (or the width of its first
assigned value) is used.
Trailing whitespace is stripped.
If necessary, values are either stripped of leading characters or space
padded to make them fit the field width.
.It Fl Z Ns Ar n
Zero fill attribute.
If not combined with
.Fl L ,
this is the same as
.Fl R ,
except zero padding is used instead of space padding.
.It Fl i Ns Ar n
Integer attribute.
.Ar n
specifies the base to use when displaying the integer (if not specified, the
base given in the first assignment is used).
Parameters with this attribute may
be assigned values containing arithmetic expressions.
.It Fl U
Unsigned integer attribute.
Integers are printed as unsigned values (only
useful when combined with the
.Fl i
option).
This option is not in the original Korn shell.
.It Fl f
Function mode.
Display or set functions and their attributes, instead of parameters.
d3309 11
d3335 7
d3366 7
d3374 4
a3377 1
.It Xo Ic ulimit Op Fl acdfHlmnpsStv
d3392 1
a3392 1
dependent \(em some systems have only the
d3397 1
a3397 1
Displays all limits; unless
a3399 4
.It Fl H
Set the hard limit only (default is to set both hard and soft limits).
.It Fl S
Set the soft limit only (default is to set both hard and soft limits).
d3413 2
d3431 2
d3440 1
a3440 2
.Tn CPU
seconds to be used by each process.
d3450 4
a3453 1
.It Xo Ic umask Op Fl S
d3469 1
a3469 1
sets the mask so files will not be readable, writable or executable by
d3473 5
a3477 2
.It Xo Ic unalias Op Fl adt
.Op Ar name1 ...
d3489 4
a3492 1
.It Xo Ic unset Op Fl fv
d3504 1
d3534 4
a3537 1
.It Xo Ic whence Op Fl pv
d3576 1
a3576 1
At a minimum, the shell keeps track of the status of the background (i.e.,
d3582 1
a3582 1
.Ic set Fl m
d3584 1
a3584 1
.Ic set Fl o Ic monitor ) ,
d3596 1
a3596 1
Note that only commands that create processes (e.g., asynchronous commands,
d3604 1
a3604 1
.Dq \&[..\&] ,
d3621 2
a3622 2
.Bl -tag -width 10n
.It Ic %\&+
d3625 1
a3625 4
.It Ic %% , %
Same as
.Ic %\&+ .
.It Ic %\&-
d3627 1
a3627 1
.Ic %\&+
d3629 1
a3629 1
.It Ic % Ns Ar n
d3632 2
a3633 2
.It Ic %\&? Ns Ar string
The job containing the string
d3636 2
a3637 2
.It Ic % Ns Ar string
The job starting with string
d3642 1
a3642 1
When a job changes state (e.g., a background job finishes or foreground job is
a3643 3
.Bd -unfilled -offset indent
.Ic \&[ Ar number Ic \&] Ar flag status command
.Ed
d3645 4
a3648 2
where
.Bl -tag -width "status"
d3650 1
a3650 1
is the job number of the job.
d3657 4
a3660 3
.Ic %\&+ or
.Ic %\&-
job, respectively, or space if it is neither.
d3663 2
a3664 8
.Bl -tag -width "Running"
.It Cm Running
The job has neither stopped nor exited (note that running does not necessarily
mean consuming
.Tn CPU
time \(em the process could be blocked waiting for some
event).
.It Cm Done Op Ar number
d3668 5
a3672 1
.It Cm Stopped Op Ar signal
d3678 1
a3678 1
The job was killed by a signal (e.g., memory fault, hangup, etc.; use
d3680 1
a3680 1
for a list of signal descriptions).
d3710 1
a3710 1
.Bl -tag -width "/etc/suid_profile" -compact
d3712 1
d3714 1
d3716 3
a3720 1
.Xr awk 1 ,
a3722 2
.Xr getconf 1 ,
.Xr getopt 1 ,
d3724 1
a3724 1
.Xr sed 1 ,
d3727 1
a3727 12
.Xr dup 2 ,
.Xr execve 2 ,
.Xr getgid 2 ,
.Xr getuid 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr wait 2 ,
.Xr getopt 3 ,
.Xr rand 3 ,
.Xr signal 3 ,
.Xr system 3 ,
.Xr tty 4 ,
a3728 1
.Pp
d3744 2
a3745 1
.%T "IEEE Standard for Information Technology - Portable Operating System Interface (POSIX) - Part 2: Shell and Utilities"
d3760 1
a3760 3
traditional Bourne or
.Tn POSIX
compliant shells is an issue.
d3768 2
a3769 2
MacMillan (change!john@@sq.sq.com) and Simon J. Gerraty (sjg@@zen.void.oz.au).
The current maintainer is Michael Rendell (michael@@cs.mun.ca).
d3774 32
a3805 32
.Sh BUGS
Any bugs in
.Nm pdksh
should be reported to pdksh@@cs.mun.ca.
Please include the version of
.Nm pdksh
.Po
.Ic echo $KSH_VERSION
shows it
.Pc ,
the machine, operating system, and compiler you are using and a description of
how to repeat the bug (a small shell script that demonstrates the bug is best).
The following, if relevant (if you are not sure, include them), can also be
helpful: options you are using (both
.Pa options.h
and
.Ic set Fl o Ic options )
and a copy of your
.Pa config.h
(the file generated by the
.Pa configure
script).
New versions of
.Nm pdksh
can be obtained from ftp://ftp.cs.mun.ca/pub/pdksh.
.Pp
BTW, the most frequently reported bug is:
.Bd -literal -offset indent
$ echo hi | read a; echo $a   # Does not print hi
.Ed
.Pp
I'm aware of this and there is no need to report it.
@


1.61
log
@Introduce POSIX hex and octal (0x... and 0...) constants in arithmetic
expressions.  Work by Matthias Kilian, based on an old diff by myself.
Note: MAKEDEV should be updated. Tested by many, thanks.

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.60 2005/01/21 15:15:55 otto Exp $
d3041 7
@


1.60
log
@fix missing list item: *(...); spotted by Frank Sander frksndr at
gmx dot de. ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.59 2005/01/17 09:59:02 jmc Exp $
d1693 13
@


1.59
log
@typo;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.58 2005/01/10 11:06:50 jmc Exp $
d1382 4
@


1.58
log
@typo;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.57 2004/12/22 18:58:44 millert Exp $
d2853 1
a2853 1
.It Fl n lc noexec
@


1.57
log
@These man pages are not derived from UCB and are actually public domain.
Verified with aaron@@ who did the conversion from man -> mdoc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.56 2004/12/22 18:48:56 millert Exp $
d340 1
a340 1
parameter assignment or 0 is there were no command substitutions.
@


1.56
log
@Our times(3) just calls getrusage(2) and gettimeofday(2), converting seconds
to ticks.  Since ksh needs things in seconds it then converted them back.
Avoid the silliness and use the getrusage(2) and gettimeofday(2) directly.
With man page help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.55 2004/12/12 17:37:45 jmc Exp $
d3 1
a3 28
.\" Copyright (c) 1980, 1990, 1993
.\"     The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)ksh.1tbl      8.2 (Berkeley) 8/19/96
@


1.55
log
@escape punctuation;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.54 2004/12/12 06:53:13 deraadt Exp $
d3259 7
a3265 2
Print the accumulated user and system times used by the shell and by processes
which have exited that the shell started.
@


1.54
log
@csh-style ! history completion, which can be activated by using
	set -o csh-history (off by default)
this is not feature complete, and likely never will be.  no ^
and ! has some oddities ... ksh's internal history stuff has got
some very odd behaviours that are rather nasty
ok various developers
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.53 2004/12/10 01:56:56 jaredy Exp $
d2837 1
a2837 1
.Ql !
@


1.53
log
@flurry of updates:
- be more consistent w.r.t. variables in macros with `.Ic'
  instead of `.Va'
- document changes in IFS parsing
- minimize diffs between ksh.1tbl and sh.1tbl w.r.t. `.Nm'
  macros and in other places
- sort recognized keywords and remove dependency on tbl(1)
- indent example displays
- kill `bind'
- collapse `test' display, it has two entries for `str',
  and use different args for file time tests
- grammar, punctuation, and mdoc fixes
- tidy display of `alias' and `kill'

ok and bits from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.52 2004/11/09 21:56:54 jmc Exp $
d2833 6
@


1.52
log
@/bin/sh supports PS1 expansion;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.51 2004/11/05 14:56:31 jmc Exp $
d59 1
a59 1
.Nm sh
d87 1
a87 1
.Va $0 )
d101 2
a102 1
to a tty.
d226 1
a226 1
The shells begins parsing its input by breaking it into
d295 1
a295 1
if used at the beginning of a word, introduces a comment -- everything after
d399 1
a399 1
is the opposite --
d458 2
a459 4
.Pp
.TS
center;
lfB lfB lfB lfB lfB .
d461 5
a465 5
do      esac    if      until   [[
done    fi      in      while   {
elif    for     time    then    }
.TE
.Pp
d480 1
a480 1
.Bd -unfilled -offset -indent
d487 1
a487 1
.Bd -unfilled -offset -indent
d565 1
a565 1
.Va $1 , $2 ,
d792 1
a792 1
it); leading or trailing
d898 2
a899 2
If substitution is performed on a parameter that is not set, a
null string is substituted unless the
d1089 1
a1089 1
.Va $1 , $2 ,
d1107 1
a1107 1
.Va \&$?\&
d1133 1
a1133 1
.Va $1 , $2 , $3 ,
d1488 1
a1488 1
.Xr sh
d1621 1
a1621 1
.Ar marker
d1641 1
a1641 1
.Ic cat /foo/bar 2\&>&1 \&> /dev/null \&| cat -n
d1822 1
a1822 1
.Va $1 , $2 ,
d1881 3
a1883 1
Note that special parameters (e.g., $$, $\&!) can't be scoped in this way.
d1899 6
a1904 2
The $0 parameter is set to the name of the function (Bourne-style functions
leave $0 untouched).
d2005 1
a2005 1
In future, a new option
d2147 3
a2149 1
mode, it tests if file descriptor 1 is a tty (i.e., the
d2193 3
a2195 1
Additional ksh special commands
d2212 3
a2214 1
Additional ksh regular commands
d2219 3
a2221 1
In the future, the additional ksh special and regular commands may be treated
d2252 1
a2252 2
.Ar ...
.Oc
a2310 9
.It Xo
.Ic bind Op Fl m
.Oo Ar key
.Op Ns = Ns Ar editing-command
.Ar ... Oc
.Xc
Set or view the current emacs command editing key bindings/macros (see
.Sx Emacs interactive input line editing
below for a complete description).
d2462 1
a2462 1
.Ic ?\&
d2605 4
a2608 4
.Oo Fl s Ar signame No \&|
.Fl signum No \&| Fl signame Oc {
.Ar job No \&|
.Ar pid No \&|
d2628 1
a2628 1
.Oo Fl nprsu Ns Ar n No \&|
d2680 1
a2680 1
.Xr echo
d2733 3
a2735 1
any input is read) if the input is a tty (e.g.,
d2979 3
a2981 1
was set, the vi command-line mode would let the tty driver do the work until
d3010 1
a3010 1
.Va $1 , $2 ,
d3018 1
a3018 1
option is treated specially -- it clears both the
a3046 14
.It Ar str
.Ar str
has non-zero length.
Note that there is the potential for problems if
.Ar str
turns out to be an operator (e.g.,
.Fl r ) .
It is generally better to use a test like
.Sm off
.Ic \&[\ X\&" Ar str Ic \&" Ic \ \&]
.Sm on
instead (double quotes are used in case
.Ar str
contains spaces or file globbing characters).
d3123 12
a3134 15
.It Ar file Fl nt Ar file
first
.Ar file
is newer than second
.Ar file .
.It Ar file Fl ot Ar file
first
.Ar file
is older than second
.Ar file .
.It Ar file Fl ef Ar file
first
.Ar file
is the same file as second
.Ar file .
d3138 3
a3140 1
is a tty device.
d3151 12
a3162 1
is not empty.
d3256 1
a3256 1
Sets trap handler that is to be executed when any of the specified signals are
d3302 4
d3429 1
a3429 1
Once this attribute is set, it can not be turned off.
d3481 1
a3481 1
dependent -- some systems have only the
d3692 3
a3694 1
(as stored in the $! parameter) or by prefixing the job number with a percent
d3724 1
a3724 1
.Pp
d3726 1
d3748 1
a3748 1
time -- the process could be blocked waiting for some
d3818 1
d3845 1
a3845 1
.Nm ksh
d3849 1
a3849 1
.Nm ksh
@


1.51
log
@incorrect markup was messing the description of IFS. i've rearranged it
slightly so that no one (me, most likely) falls for it again.

also, make sh(1)'s IFS description a little more consistent.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.50 2004/10/28 04:55:52 jaredy Exp $
d1283 14
a1296 2
The prompt is printed verbatim (i.e., no substitutions are done).
Default is
@


1.50
log
@fix spacing after period at EOL.  from ray@@cyth.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.49 2004/08/07 16:46:58 millert Exp $
d806 2
a807 1
.Sq ,\&
d821 3
a823 3
.Dq A ,
.Dq B ,
.Dq ,
d825 1
a825 1
.Dq D:E ,
d827 3
a829 3
.Dq A ,
.Dq B ,
.Dq ,
d831 1
a831 1
.Dq E .
@


1.49
log
@Document ulimit -v; mickey@@ OK
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.48 2004/08/04 20:01:44 jaredy Exp $
d3836 1
a3836 1
was created by Eric Gisin, and it was subsequently maintained by John R.
@


1.48
log
@- mdoc and macro fixes and simplification
- punctuation and grammar fixes
- show prompts for example shell commands

help and ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.47 2004/03/15 08:56:56 jmc Exp $
d3511 4
@


1.47
log
@missing commas;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.46 2004/03/15 08:52:12 jmc Exp $
d42 8
a49 3
.Oo [ Fl c Ar command-string [
.Xo Ar command-name ] No \&| Fl s No \&|
.Ar file No ]\ 
a50 1
.Op Ar argument ... Oc
d86 3
a88 1
the shell (i.e., the contents of $0) is determined as follows: if the
d92 3
a94 1
otherwise, the name the shell was called with (i.e., argv[0]) is used.
d114 1
a114 1
option is on by default (see
d185 2
a186 1
If the basename of the name the shell is called with (i.e., argv[0])
d552 1
a552 1
.Ic in Ar word Ar ... term Ns ]
d564 5
a568 1
is not used to specify a word list, the positional parameters ($1, $2, etc.\&)
d1088 3
a1090 1
The number of positional parameters (i.e., $1, $2, etc.).
d1101 1
a1101 1
The concatenation of the current single letter options (see
d1103 1
a1103 1
command below for list of options).
d1107 1
a1107 1
.Ic \&$?\&
d1111 1
a1111 1
.Ic argv[0] ) ,
d1132 3
a1134 1
All positional parameters (except parameter 0), i.e., $1, $2, $3...
d1185 1
a1185 1
This parameter is used by
d1188 1
a1188 1
.Ic kill -l
d1293 1
a1293 1
Used to prefix commands that are printed during execution tracing (see
d1809 3
a1811 1
shell arguments (i.e., positional parameters $1, $2, etc.) are never visible
d1976 1
a1976 1
.Ic $(...)
d2062 1
a2062 1
Argument expansion of
d2149 1
a2149 1
option is turned off (see
d2286 2
a2287 1
.It Xo Ic bind Op Fl m
d2290 1
a2290 2
.Ar ...
.Oc
d2344 1
a2344 1
option (see
d2679 1
a2679 1
option (see
d2777 3
a2779 1
The set command can be used to set
d2972 1
a2972 1
If this option is not set, characters in the range 128-160 are printed as is,
d2989 3
a2991 1
order, to the positional parameters (i.e., $1, $2, etc.).
d3104 1
a3104 1
is set (see
d3259 2
a3260 2
or the number of the signal (see
.Ic kill -l
d3271 1
a3271 1
option were see -- see
d3660 1
a3660 1
A job may be referred to in
d3867 1
a3867 1
echo hi | read a; echo $a\ \ \ # Does not print hi
@


1.46
log
@reversed word -> reserved word;
from Karl O. Pinc
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.45 2004/02/19 22:20:05 jmc Exp $
d368 2
a369 2
reserved word which causes the exit status of the pipeline to be logically
complemented: if the original status was 0 the complemented status will be 1;
@


1.45
log
@escape full stops where necessary to kill erroneous double spaces;
softly, softly, catchy monkey...
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.44 2004/01/23 23:08:45 jmc Exp $
d368 1
a368 1
reversed word which causes the exit status of the pipeline to be logically
@


1.44
log
@`Ns' implies `No', so `Ns No' -> `Ns'; (even simpler in adduser(8))
discussed with todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.43 2004/01/15 22:08:45 jmc Exp $
d555 1
a555 1
is not used to specify a word list, the positional parameters ($1, $2, etc.)
@


1.43
log
@escape full stops properly to avoid double spaces;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.42 2003/12/27 20:52:22 jmc Exp $
d543 1
a543 1
.Ic in Ar word Ar ... term Ns No ]
d934 1
a934 1
.Xo Ic ${ Ns Ar name Ns No =
d947 1
a947 1
.Ar name Ns No = Ns Ar value
d1000 1
a1000 1
.Ar name Ns No \&: )
d1355 1
a1355 1
.It Ic \&[ Ns No .. Ns Ic \&]
d1376 1
a1376 1
.It Ic \&[\&! Ns No .. Ns Ic \&]
d1378 1
a1378 1
.Ic \&[ Ns No .. Ns Ic \&] ,
d1469 1
a1469 1
.Ic \&[ Ns No .. Ns Ic \&]
d1488 1
a1488 1
.Ic \&[ Ns No .. Ns Ic \&]
d1619 1
a1619 1
.Ic $(( Ns No .. Ns Ic ))
d2220 1
a2220 1
.Ar name Ns No = Ns Ar value ,
d2419 1
a2419 1
.Xr dup 2 Ns No 'd
d2447 1
a2447 1
.Op Ar old Ns No = Ns Ar new
@


1.42
log
@this page documents `sh', not `ksh';
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.41 2003/12/27 20:35:12 jmc Exp $
d2733 1
a2733 1
.Ic \&.
d2740 1
a2740 1
.Ic \&.
d2748 1
a2748 1
.Ic \&.
d2750 1
a2750 1
.Ic \&.
@


1.41
log
@- revert a typo introduced when this page was mdoc'ed
- use .Sq rather than .Dq for single letters
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.40 2003/12/22 11:54:02 jmc Exp $
d33 1
a33 1
.Dt KSH 1
d55 1
a55 1
.Nm ksh
@


1.40
log
@note that `&&' and `||' are left-associative;
from vax at carolina dot rr com (NetBSD PR 23814);

agreed (in principal) millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.39 2003/12/12 22:35:08 naddy Exp $
d773 1
a773 1
whitespace characters, in combination with zero or no
d791 3
a793 3
.Dq A ,
.Dq B ,
.Dq ,
d795 1
a795 1
.Dq D .
@


1.39
log
@typo; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.38 2003/10/28 15:20:32 jmc Exp $
d403 13
@


1.38
log
@standard section order;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.37 2003/10/22 19:57:32 jmc Exp $
d2148 1
a2148 1
.Ic alias , readonly , set , typset
@


1.37
log
@macros with too many args;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.36 2003/09/04 14:21:43 jmc Exp $
d3790 13
a3834 13
.Sh AUTHORS
This shell is based on the public domain 7th edition Bourne shell clone by
Charles Forsyth and parts of the BRL shell by Doug A. Gwyn, Doug Kingston,
Ron Natalie, Arnold Robbins, Lou Salkind, and others.
The first release of
.Nm pdksh
was created by Eric Gisin, and it was subsequently maintained by John R.
MacMillan (change!john@@sq.sq.com) and Simon J. Gerraty (sjg@@zen.void.oz.au).
The current maintainer is Michael Rendell (michael@@cs.mun.ca).
The
.Pa CONTRIBUTORS
file in the source distribution contains a more complete list of people and
their part in the shell's development.
@


1.36
log
@escapes in the wrong place;
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.35 2003/09/02 18:09:43 jmc Exp $
d2072 4
a2075 1
.Ic a i in 1 2; do echo i=$i j=$j; done
@


1.35
log
@escape punctuation;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.34 2003/07/07 14:11:58 jmc Exp $
d1079 1
a1079 1
.Ic \&$\&?
d2020 1
a2020 1
.Ic set \&-\&- `false`; echo $?
d2411 1
a2411 1
.Ic \&?
@


1.34
log
@- convert some lists to displays
- .Ql -> .Sq where necessary
- remove some .Pp's before lists
- add missing .El
- remove some wrong macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.33 2003/06/02 23:32:08 millert Exp $
d278 1
a278 1
.Ql ? ,
d311 1
a311 1
.Ql ? ,
d367 1
a367 1
.Ql !
d1327 1
a1327 1
.Ql ?
d1360 1
a1360 1
.Ql !
d3069 1
a3069 1
.Ql ! ,
d3171 1
a3171 1
.Ql !
d3175 1
a3175 1
.Ql !
d3179 1
a3179 1
.Ql ! ) .
@


1.33
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.32 2003/04/28 06:27:36 jmc Exp $
d459 5
a463 6
.Pp
.Bl -inset -indent -compact
.It Ic { echo foo; echo bar; }
.It Ic { echo foo; echo bar<newline> }
.It Ic { { echo foo; echo bar; } }
.El
d466 3
a468 4
.Pp
.Bl -inset -indent -compact
.It Ic { echo foo; echo bar }
.El
a1675 1
.Pp
d2089 1
a2089 1
.Ql Fl t
d2091 1
a2091 1
.Ql Ic \&!
d2578 1
a2578 1
.Fl R No Op Fl en Oc
d3191 1
a3191 1
.Ql Ic \&!
d3193 1
a3193 1
.Ql Fl n .
@


1.32
log
@typos;

suggestions, corrections and ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.31 2003/03/14 11:05:55 jmc Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"     This product includes software developed by the University of
.\"     California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.31
log
@better document how getopts handles options;
plus typos;
from J.A. Neitzel;

Fixes PR 3141;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.30 2002/09/18 07:33:47 deraadt Exp $
d1179 1
a1179 1
.Fn execve 2
d1340 1
a1340 1
name patterns with the sorted named of all the files that match the pattern
d1524 1
a1524 1
.Fn open 2 ) .
d2211 1
a2211 1
.Ar name Ns No = Ar value ,
d2397 1
a2397 1
which suppresses backslash interpretation.
d2986 1
a2986 1
and returns zero status if true, 1 status if false, or greater than 1 if there
d3371 1
a3371 1
commands that can be used to re-create the attributes (but not the values) or
@


1.30
log
@fix Xr refs; frisco@@blackant.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.29 2002/05/04 22:21:21 krw Exp $
d518 1
a518 1
stripped; any space with a pattern must be quoted.
d2487 1
a2487 1
the option places in
d2499 1
a2499 1
.Ev OPTAG
d2501 1
a2501 1
An error message is also printed to standard error if
d2503 4
a2506 1
does not being with a colon.
@


1.29
log
@Clean up the logic in install_url():

a) Eliminate extraneous cat invocations that are piped to
   grep by simply calling grep with the file name.
b) Eliminate the only use of isnumeric() by using a ksh'ism
   left exposed in sh: '+([0-9])'. Eliminate isnumeric().
c) Test for a http/ftp list index of '0' and treat as an out
   of range error rather than an IP address.
d) Reorganize to make smaller and more clear.

Add documentation to sh(1) for ksh patterns that are available.

ok millert@@, miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.28 2001/09/02 14:05:58 aaron Exp $
d938 1
a938 1
.Xr environ 5 )
d3756 1
a3756 1
.Xr environ 5
@


1.28
log
@Typo; addresses pr/2038 from tim@@robbins.dropbear.id.au
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.27 2001/08/25 21:26:29 heko Exp $
d1373 68
@


1.27
log
@OpenBSD doesn't have RLIMIT_VMEM or RLIMIT_SWAP, so we don't
have ulimit -v or -w either.
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.25 2001/08/03 19:19:01 aaron Exp $
d2385 1
a2385 1
.Ic alias r='fx -e -' .
@


1.26
log
@fix a typo; tim@@robbins.dropbear.id.au
@
text
@d3343 1
a3343 1
.It Xo Ic ulimit Op Fl acdfHlmnpsStvw
a3407 9
.It Fl v Ar n
Impose a limit of
.Ar n
kbytes on the amount of virtual memory used; on some systems this is the
maximum allowable virtual address (in bytes, not kbytes).
.It Fl w Ar n
Impose a limit of
.Ar n
kbytes on the amount of swap space used.
@


1.25
log
@Typo; heko@@iki.fi
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.24 2001/07/31 10:35:10 hugh Exp $
d3438 1
a3438 1
sets the mask so files with not be readable, writable or executable by
@


1.24
log
@Documentation fixes per PR 1979 by Kaspar Toomik.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.23 2001/06/23 14:42:13 deraadt Exp $
d2107 1
a2107 1
The following described the special and regular built-in commands:
@


1.23
log
@more .%A handling; bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.22 2001/05/28 15:36:08 aaron Exp $
d889 1
a889 1
Parameters can be assigned valued in a number of ways.
@


1.22
log
@Various fixes; mpech@@prosoft.org.lv
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.21 2001/04/12 02:51:10 aaron Exp $
d3700 2
a3701 1
.%A Morris Bolsky and David Korn
d3707 2
a3708 1
.%A Stephen G. Kochan and Patrick H. Wood
@


1.21
log
@Insert some missing commas.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.20 2000/10/19 18:29:28 aaron Exp $
d52 1
a52 1
.Nm sh
d3717 1
a3717 1
.Nm sh
@


1.20
log
@Where we talk about $$, also say mention that PIDs are not safe to use for
generating temporary file names, and point people to mktemp(1) instead.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.19 2000/03/21 14:06:55 aaron Exp $
d331 1
a331 1
statements, grouping constructs and function definitions.
d403 1
a403 1
.Ql |&
d428 1
a428 1
.Ql |&
d1329 1
a1329 1
command may be used to list, change and add to this cache (e.g.,
d1893 1
a1893 1
signal numbers, names and descriptions are printed in columns.
d2040 1
a2040 1
After evaluation of command-line arguments, redirections and parameter
d3740 1
a3740 1
the machine, operating system and compiler you are using and a description of
@


1.19
log
@Sometimes it is confusing when a sentence begins with lowercase; d@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.18 2000/03/17 18:48:43 aaron Exp $
d1072 6
a1077 2
of the original shell if it is a
subshell.
@


1.18
log
@Try to synchronize the ksh(1) and sh(1) man pages somewhat.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.17 2000/03/17 18:15:16 aaron Exp $
d1728 1
d1730 1
a1730 1
(which is an alias for
@


1.17
log
@Remove hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.16 1999/07/05 19:50:53 aaron Exp $
d1025 1
a1025 1
.Ic \&[\&*\&]\&} , ${# Ns Ar name Ns Ic \&[\&@@\&]\&}
d1031 5
a1035 2
.Ic ${ Ar name Ic \&# Ar pattern Ic \&},\ \&
.Ic ${ Ar name Ic \&#\&# Ar pattern Ic \&}
d1049 5
a1053 2
.Ic ${ Ar name Ic \&% Ar pattern Ic \&},\ \&
.Ic ${ Ar name Ic \&%\&% Ar pattern Ic \&}
d2064 2
a2065 1
POSIX special commands
d2076 2
a2077 1
Very special commands (non-POSIX mode)
d2081 2
a2082 1
POSIX regular commands
d2288 2
a2289 1
(the actual value of the default path is system dependent: on POSIXish
d2805 1
a2805 1
.Dv HUP
d2810 1
a2810 1
.Dv HUP
d3176 1
a3176 1
commands, the current start of the traps that have been set since the shell
d3261 2
a3262 1
Zero fill attribute. If not combined with
d3401 2
a3402 1
CPU seconds to be used by each process.
d3479 2
a3480 2
.Dv HUP ,
.Dv INT
d3482 1
a3482 1
.Dv QUIT
d3620 3
a3622 1
mean consuming CPU time -- the process could be blocked waiting for some
d3655 1
a3655 1
.Dv HUP
d3663 1
a3663 1
.Dv HUP
@


1.16
log
@mdoc'ify syntax of the more complicated commands; when I converted this man
page originally, I didn't know how to do such funky things
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.15 1999/07/01 17:48:29 aaron Exp $
d82 4
a85 2
of a file the shell reads commands from. If there are no non-option
arguments, the shell reads commands from the standard input. The name of
d97 2
a98 2
to a tty. An interactive shell has job control enabled (if available),
ignores the
d174 2
a175 1
parameter (see below). Instead, the file
d177 2
a178 1
is processed. Clearing the privileged option causes the shell to set
d201 2
a202 1
(if any) is read and executed. If the
d215 2
a216 1
occurred during the execution of a script. In the absence of fatal errors,
d234 2
a235 2
usually delimit commands. The meta-characters are used in building the
following tokens:
d269 2
a270 1
quotes. Note that the following characters are also treated specially by the
d341 4
a344 2
before any command words. The command words, if any, define the command
that is to be executed and its arguments. The command may be a shell built-in
d358 2
a359 1
described. The exit status of a command consisting only of parameter
d368 3
a370 2
to the standard input of the following command. The exit status of a pipeline
is that of its last command. A pipeline may be prefixed by the
d401 1
a401 1
have equal precedence which is higher that that of
d406 2
a407 1
which also have equal precedence. The
d413 2
a414 1
below). When an asynchronous command is started when job control is disabled
d434 2
a435 1
Compound commands are created using the following reserved words. These words
d452 2
a453 1
environment changes inside them may fail. To be portable, the
d461 2
a462 1
a (syntactically correct) reserved word. For example,
d481 2
a482 1
in a subshell. There is no implicit way to pass environment changes from a
d487 2
a488 1
is executed, but not in a subshell. Note that
d508 2
a509 2
associated with the first successfully matched pattern is executed. Patterns
used in
d516 4
a519 2
are dropped. Note that any unquoted space before and after a pattern is
stripped; any space with a pattern must be quoted. Both the word and the
d521 2
a522 2
well as tilde substitution. For historical reasons, open and close braces
may be used instead of
d545 2
a546 1
is executed. If
d549 2
a550 2
are used instead. For historical reasons, open and close braces may be used
instead of
d579 2
a580 2
if any, is executed with similar consequences. If all the lists following
the
d588 2
a589 1
is executed. The exit status of an
d609 2
a610 2
is a pre-checked loop. Its body is executed as often as the exit status of
the first
d612 2
a613 1
is zero. The exit status of a
d625 2
a626 1
below). Note that redirections specified after a function definition are
d638 3
a640 1
specially. There are three methods of quoting. First,
d645 2
a646 1
and the newline are stripped. Second, a single quote
d648 2
a649 2
quotes everything up to the next single quote (this may span lines). Third,
a double quote
d662 2
a663 1
results of double-quoted substitutions. If a
d686 9
a694 7
command. The shell expands command aliases (i.e., substitutes the alias name
for its value) when it reads the first word of a command. An expanded alias
is re-processed to check for more aliases. If a command alias ends in a
space or tab, the following word is also checked for alias expansion. The
alias expansion process stops when a word that is not an alias is found, when
a quoted word is found or when an alias word that is currently being expanded
is found.
d706 4
a709 2
command. The first time the shell does a path search for a command that is
marked as a tracked alias, it saves the full path of the command. The next
d711 2
a712 2
is still valid, and if so, avoids repeating the path search. Tracked aliases
can be listed and created using
d716 2
a717 1
parameter clears the saved paths for all tracked aliases. If the
d723 3
a725 2
the shell tracks all commands. This option is set automatically for
non-interactive shells. For interactive shells, only the following commands are
d736 4
a739 2
substitutions on the words of the command. There are three kinds of
substitution: parameter, command, and arithmetic. Parameter substitutions,
d741 1
a741 1
.Ic $name
d743 1
a743 1
.Ic ${...} ;
d745 1
a745 1
.Ic $( Ns Ar command Ns Ic )
d755 2
a756 1
parameter. The
d769 2
a770 1
characters, delimit a field. As a special case, leading and trailing
d797 2
a798 1
the substitution. Using the previous example, the substitution for $VAR:E
d821 3
a823 2
command, which is run in a subshell. For
.Ic $( Ns Ar command Ns Ic )
d837 2
a838 2
followed by any other character is unchanged). As a special case in command
substitutions, a command of the form
d851 2
a852 1
regardless of quoting. This should be fixed soon.
d857 2
a858 1
prints 14. See
d863 2
a864 1
can be accessed using a parameter substitution. A parameter name is either one
d877 3
a879 4
is a parameter name. If substitution is performed on a parameter that is not
set, a
.Dv NULL
string is substituted unless the
d889 2
a890 2
Parameters can be assigned valued in a number of ways. First, the shell
implicitly sets some parameters like
d893 2
a894 2
Second, parameters are imported from the shell's environment at startup. Third,
parameters can be assigned values on the command line, for example,
d903 2
a904 2
exported, see below for implications of this). Note that both the parameter
name and the
d906 2
a907 2
must be unquoted for the shell to recognize a parameter assignment. The fourth
way of setting a parameter is with the
d914 2
a915 1
section. Fifth,
d922 2
a923 1
commands. Lastly, parameters can be assigned values using assignment operators
d941 4
a944 2
pairs. The order in which parameters appear in the environment of a command is
unspecified. When the shell starts up, it extracts parameters and their values
d995 2
a996 1
or .-script). If word is omitted the string
d1039 2
a1040 1
the matched text is deleted from the result of substitution. A single
d1059 2
a1060 2
Process ID of the last background process started. If no background processes
have been started, the parameter is not set.
d1073 2
a1074 2
The exit status of the last non-asynchronous command executed. If the last
command was killed by a signal,
d1088 2
a1089 1
argument, if it was supplied. If the
d1096 2
a1097 1
or .-script. Further positional parameters may be accessed using
d1100 2
a1101 1
All positional parameters (except parameter 0), i.e., $1, $2, $3... If used
d1114 2
a1115 2
generated for each positional parameter. If there are no positional parameters,
no word is generated.
d1127 2
a1128 1
built-in command. Works the same way as
d1134 2
a1135 1
commands. Note that if
d1139 2
a1140 1
or contains an empty path, the current directory is not searched. Also, the
d1145 2
a1146 1
Set to the number of columns on the terminal or window. Currently set to the
d1150 2
a1151 1
if that value is non-zero. This parameter is used by
d1158 2
a1159 2
expanded value is used as a shell startup file. It typically contains function
and alias definitions.
d1163 3
a1165 2
variable. It indicates the reason the last system call failed. Not yet
implemented.
d1181 2
a1182 1
function. It is also searched when a command can't be found using
d1199 2
a1200 1
and newline. See
d1213 2
a1214 1
Set to the number of lines on the terminal or window. Not yet implemented.
d1216 2
a1217 1
The previous working directory. Unset if
d1233 2
a1234 1
commands and .'d files. An empty string resulting from a leading or trailing
d1241 2
a1242 1
option to be enabled. See
d1261 3
a1263 2
command below). The prompt is printed verbatim (i.e., no substitutions are
done). Default is
d1266 2
a1267 1
The current working directory. May be unset or
d1275 2
a1276 1
The directory shell temporary files are created in. If this parameter is not
d1287 2
a1288 1
if any, are assumed to be a login name. If the login name is empty,
d1297 2
a1298 1
parameter is substituted, respectively. Otherwise, the password file is
d1300 2
a1301 1
user's home directory. If the login name is not found in the password file or
d1328 2
a1329 1
sequences. Once brace expansion has been performed, the shell replaces file
d1331 2
a1332 2
(if no files match, the word is left unchanged). The pattern elements have the
following meaning:
d1339 2
a1340 1
Matches any of the characters inside the brackets. Ranges of characters can be
d1347 2
a1348 1
or any digit). In order to represent itself, a
d1354 2
a1355 1
instead of the end of the list. Also, a
d1408 2
a1409 1
the shell. Three exceptions to this are commands in pipelines, for which
d1423 2
a1424 2
option is set, an error occurs; otherwise, the file is truncated. Note that this
means the command
d1443 2
a1444 1
exists it is appended to instead of being truncated. Also, the file is opened
d1461 4
a1464 2
is read. When the command is executed, standard input is redirected from the
temporary file. If
d1476 1
a1476 1
.Dq \enewline .
d1502 2
a1503 1
redirection with a single digit. Parameter, command, and arithmetic
d1510 2
a1511 1
arguments of redirections. Note, however, that the results of any file name
d1513 2
a1514 1
the word with the expanded file name generation characters is used. Note
d1523 2
a1524 1
any redirections must appear at the end. Redirections are processed after
d1619 2
a1620 1
The parameter is incremented by 1. When used as a prefix operator, the result
d1629 2
a1630 2
then the right. The result is the value of the expression on the right-hand
side.
d1650 2
a1651 2
the result is 1 if either argument is non-zero, 0 if not. The right
argument is evaluated only if the left argument is zero.
d1655 2
a1656 2
the result is 1 if both arguments are non-zero, 0 if not. The
right argument is evaluated only if the left argument is non-zero.
d1675 2
a1676 1
Less than or equal, greater than or equal, greater than. See
d1685 2
a1686 2
the right. The sign of the result is unspecified if either argument is
negative.
d1702 2
a1703 1
syntax (see below for the difference between the two forms). Functions are like
d1705 2
a1706 1
in that they are executed in the current environment. However, unlike
d1709 2
a1710 1
inside them. When the shell is determining the location of a command, functions
d1729 2
a1730 1
read and executed. If after executing the file the named function is found to
d1748 2
a1749 1
respectively. When a traced function is executed, the shell's
d1753 2
a1754 1
option is turned off. The
d1756 2
a1757 1
attribute of functions is currently not used. In the original Korn shell,
d1764 2
a1765 2
command can be used inside a function to create a local parameter. Note that
special parameters (e.g., $$, $\&!) can't be scoped in this way.
d1768 2
a1769 1
function. A function can be made to finish immediately using the
d1797 2
a1798 2
outside the function). In the future, the following differences will also be
added:
d1802 2
a1803 1
functions. This will mean that traps set inside a function will not affect the
d1817 2
a1818 2
convenience. How the shell behaves in these cases is determined by the state
of the
d1824 2
a1825 1
behaviour is followed; otherwise, it is not. The
d1851 2
a1852 1
command substitutions. In
d1859 2
a1860 2
backslash is stripped before the command substitution is interpreted. For
example,
d1870 2
a1871 1
mode. To avoid problems, use the
d1876 2
a1877 1
output. In
d1882 2
a1883 2
signal numbers, names and descriptions are printed in columns. In future, a new
option
d1890 2
a1891 1
exit status. In
d1909 2
a1910 1
Brace expansion (also known as alternation). In
d1915 2
a1916 1
mode, brace expansion is enabled. Note that
d1922 1
a1922 1
option off, although it can be explicitly turned on later.
d1936 2
a1937 1
exit status. In
d1946 2
a1947 1
command. For example,
d1953 2
a1954 1
mode. This construct is used in most shell scripts that use the old
d1964 2
a1965 1
commands. In
d1973 2
a1974 1
Signal specification. In
d1984 2
a1985 1
Alias expansion. In
d1991 2
a1992 1
word following an alias that ended in a space. For example, the following
d2013 2
a2014 1
Test. In
d2030 1
a2030 1
assignments, the type of command is determined:  a special built-in, a
d2033 3
a2035 2
parameter. The checks are made in the above order. Special built-in commands
differ from other commands in that the
d2039 2
a2040 2
specified before the command are kept after the command completes. Just to
confuse things, if the
d2046 2
a2047 2
on arguments that look like assignments. Regular built-in commands are
different only in that the
d2051 3
a2053 1
The original ksh and
d2098 2
a2099 1
in the current environment. The file is searched for in the directories of
d2104 2
a2105 1
is being executed. If no arguments are given, the positional parameters are
d2108 2
a2109 1
The null command. Exit status is set to zero.
d2121 2
a2122 1
lists all aliases. For any name without a value, the existing alias is listed.
d2127 2
a2128 2
When listing aliases, one of two formats is used. Normally, aliases are listed
as
d2132 2
a2133 1
is quoted. If options were preceded with
d2135 3
a2137 1
or a lone \&+ is given on the command line, only
d2139 2
a2140 1
is printed. In addition, if the
d2157 2
a2158 1
the command line are ignored for tracked aliases). The
d2169 2
a2170 2
Resume the specified stopped job(s) in the background. If no jobs are
specified,
d2172 2
a2173 2
is assumed. This command is only available on systems which support job
control (see
d2210 2
a2211 1
path means the current directory. If
d2222 2
a2223 1
is used. If
d2229 2
a2230 1
parameter). If the
d2240 2
a2241 1
are relative to the path used to get to the directory. If the
d2247 2
a2248 1
is relative to the filesystem directory tree. The
d2269 2
a2270 1
had not been specified, with two exceptions. First,
d2274 2
a2275 1
exit, and command assignments are not permanent). If the
d2279 1
a2279 1
(the actual value of the default path is system dependent:  on POSIXish
d2297 2
a2298 1
standard output. The newline is suppressed if any of the arguments contain the
d2307 2
a2308 1
shell scripts. The
d2325 2
a2326 1
not replaced. Any file descriptors which are opened or
d2331 2
a2332 1
The shell exits with the specified exit status. If
d2340 3
a2342 3
Sets the export attribute of the named parameters. Exported parameters are
passed in the environment to executed commands. If values are specified, the
named parameters are also assigned.
d2372 2
a2373 1
Resume the specified job(s) in the foreground. If no jobs are specified,
d2375 2
a2376 2
is assumed. This command is only available on systems which support job
control (see
d2387 5
a2391 3
is to recognize. If a letter is followed by a colon, the option is expected to
have an argument. Options that do not take arguments may be grouped in a single
argument. If an option takes an argument and the option character is not the
d2417 2
a2418 2
is set to the option character that caused the problem. An error message is
also printed to standard error if
d2424 2
a2425 1
exits with a non-zero exit status. Options end at the first (non-option
d2446 2
a2447 1
Without arguments, any hashed executable command pathnames are listed. The
d2449 2
a2450 1
option causes all hashed commands to be removed from the hash table. Each
d2458 2
a2459 1
jobs are displayed. The
d2462 2
a2463 1
state since the last notification. If the
d2465 2
a2466 1
option is used, the process ID of each process in a job is also listed. The
d2468 2
a2469 1
option causes only the process group of each job to be printed. See
d2482 2
a2483 1
groups. If no signal is specified, the
d2485 3
a2487 2
signal is sent. If a job is specified, the signal is sent to the job's
process group. See
d2504 2
a2505 1
terminated with a newline. The
d2507 2
a2508 1
option suppresses the newline. By default, certain C escapes are translated.
d2529 2
a2530 1
option. The
d2555 2
a2556 1
option is given. As above, the
d2560 2
a2561 1
Print the present working directory. If the
d2569 2
a2570 1
to the current directory). If the
d2585 2
a2586 2
above), and assigns each field to the specified parameters. If there are more
parameters than fields, the extra parameters are set to
d2589 2
a2590 2
is assigned the remaining fields (inclusive of any separating spaces). If no
parameters are specified, the
d2592 2
a2593 1
parameter is used. If the input line ends in a backslash and the
d2596 2
a2597 1
is read. If no input is read,
d2614 2
a2615 1
above for comments on this), respectively. If the
d2623 4
a2626 2
Sets the read-only attribute of the named parameters. If values are given,
parameters are set to them before setting the attribute. Once a parameter is
d2643 2
a2644 2
is given, the exit status of the last executed command is used. If used
outside of a function or
d2696 2
a2697 1
prompt. Only used if job control is enabled
d2711 2
a2712 1
non-zero status). This does not apply to commands whose exit status is
d2726 2
a2727 1
above). Enabled by default for non-interactive shells.
d2729 2
a2730 1
Enable interactive mode. This can only be set/unset when the shell is invoked.
d2734 2
a2735 2
The shell is a login shell. This can only be set/unset when the shell is
invoked (see
d2741 2
a2742 1
Do not execute any commands. Useful for checking the syntax of scripts
d2746 2
a2747 1
the effective UID (EUID) or GID (EGID), respectively. See
d2751 2
a2752 1
Enable restricted mode. This option can only be used when the shell is invoked.
d2757 2
a2758 2
If used where the shell is invoked, commands are read from standard input. Set
automatically if the shell is invoked with no arguments.
d2796 2
a2797 1
signal when a login shell exists. Currently set by default, but this will
d2803 2
a2804 1
No effect. In the original Korn shell, this prevents function definitions from
d2819 3
a2821 3
which allows the user to be oblivious of symbolic links to directories). Clear
by default. Note that setting this option does not affect the current value of
the
d2835 2
a2836 1
mode. See
d2842 2
a2843 1
No effect. In the original Korn shell, unless
d2863 2
a2864 1
These options can also be used upon invocation of the shell. The current set of
d2873 2
a2874 1
order, to the positional parameters (i.e., $1, $2, etc.). If options end with
d2876 3
a2878 3
and there are no remaining arguments, all positional parameters are cleared. If
no options or arguments are given, the values of all names are printed. For
unknown historical reasons, a lone
d2901 2
a2902 1
was an error. It is normally used as the condition command of
d2906 2
a2907 1
statements. The following basic expressions are available:
d2911 2
a2912 1
has non-zero length. Note that there is the potential for problems if
d2988 2
a2989 2
command above for a list of options). As a non-standard extension, if the
option starts with a
d3017 2
a3018 1
is a tty device. If the
d3079 2
a3080 1
test). For example,
d3143 2
a3144 1
command above). There are two special signals:
d3157 2
a3158 1
handlers are executed in the environment of the last executed command. Note
d3189 2
a3190 1
Display or set parameter attributes. With no
d3208 2
a3209 1
Values for parameters may optionally be specified. If
d3218 2
a3219 1
operates on the attributes of functions. As with parameters, if no
d3229 2
a3230 1
specifies the field width. If
d3233 2
a3234 1
assigned value) is used. Leading whitespace (and zeros, if used with the
d3236 2
a3237 1
option) is stripped. If necessary, values are either truncated or space padded
d3242 2
a3243 1
specifies the field width. If
d3246 4
a3249 3
assigned value) is used. Trailing whitespace is stripped. If necessary, values
are either stripped of leading characters or space padded to make them fit the
field width.
d3260 2
a3261 1
base given in the first assignment is used). Parameters with this attribute may
d3264 2
a3265 1
Unsigned integer attribute. Integers are printed as unsigned values (only
d3268 2
a3269 1
option). This option is not in the original Korn shell.
d3271 2
a3272 2
Function mode. Display or set functions and their attributes, instead of
parameters.
d3274 3
a3276 2
Lower case attribute. All upper case characters in values are converted to
lower case. (In the original Korn shell, this parameter meant
d3285 2
a3286 1
parameters. This is the default action (option exists for ksh93 compatibility).
d3288 3
a3290 2
Read-only attribute. Parameters with this attribute may not be assigned to or
unset. Once this attribute is set, it can not be turned off.
d3292 2
a3293 1
Tag attribute. Has no meaning to the shell; provided for application use.
d3297 2
a3298 2
is the trace attribute. When functions with the trace attribute are executed,
the
d3303 3
a3305 2
Upper case attribute. All lower case characters in values are converted to
upper case. (In the original Korn shell, this parameter meant
d3310 2
a3311 1
than 10. See the
d3317 2
a3318 1
is the undefined attribute. See
d3322 4
a3325 2
Export attribute. Parameters (or functions) are placed in the environment of
any executed commands. Exported functions are not yet implemented.
d3330 2
a3331 1
Display or set process limits. If no options are used, the file size limit
d3338 4
a3341 2
limit is imposed. Note that some systems may not allow limits to be increased
once they are set. Also note that the types of limits available are system
d3428 2
a3429 1
The aliases for the given names are removed. If the
d3431 2
a3432 1
option is used, all aliases are removed. If the
d3451 2
a3452 1
Wait for the specified job(s) to finish. The exit status of
d3460 2
a3461 1
is 127. See
d3476 2
a3477 1
status. If job monitoring is enabled, the completion status of jobs is printed
d3485 2
a3486 1
function, tracked alias, or executable). If the
d3490 2
a3491 1
is a reserved word, alias, etc. Without the
d3499 2
a3500 1
will find reserved words and won't print aliases as alias commands. With the
d3517 2
a3518 2
are processes or groups of processes created for commands or pipelines. At a
minimum, the shell keeps track of the status of the background (i.e.,
d3522 2
a3523 1
commands. If job control is fully enabled (using
d3528 2
a3529 1
own process group. Foreground jobs can be stopped by typing the suspend
d3544 2
a3545 2
When a job is created, it is assigned a job number. For interactive shells,
this number is printed inside
d3548 2
a3549 1
command is run. A job may be referred to in
d3622 2
a3623 1
for a list of signal descriptions). The
d3628 2
a3629 1
is the command that created the process. If there are multiple processes in
d3642 2
a3643 1
signal and the shell exits. Similarly, if the
d3646 2
a3647 1
a login shell, the shell warns the user and does not exit. If another attempt
d3704 2
a3705 1
shell disabled. Since this leaves some
d3714 2
a3715 1
should be reported to pdksh@@cs.mun.ca. Please include the version of
d3732 2
a3733 1
script). New version of
d3746 2
a3747 1
Ron Natalie, Arnold Robbins, Lou Salkind, and others. The first release of
d3751 2
a3752 1
The current maintainer is Michael Rendell (michael@@cs.mun.ca). The
@


1.15
log
@remove trailing spaces; missed from a previous commit
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.14 1999/06/15 01:18:35 millert Exp $
d38 1
a38 1
.Os BSD 4
d44 1
a44 1
.Op Fl +abCefhikmnprsuvxX
d139 1
a139 1
.Ev ENV
d515 2
a516 2
.It Xo Ic for Ar name \&[
.Ic in Ar word Ar ... Ar term \&]
d1226 2
a1227 1
.Ev HOME , PWD
d1997 8
a2004 4
.It Xo Ic alias No [\ -d\ |\ +-t\ [-r]\ ]\ [+-px]\ [+-]
.Sm off
.Op Ar name1 No [= Ar value1 No \&]\ \&.\&.\&.
.Sm on
d2057 5
a2061 3
.It Xo Ic bind [ \&-m ]
.Sm off
.Oo Ar key No [= Ar editing-command No ]\ ... Oc
a2062 1
.Sm on
d2222 4
a2225 1
.It Xo Ic fc No [-e\ -\ |\ -s]\ [-g]\ [old=new]\&
d2334 6
a2339 2
.It Xo Ic kill No [-s\ signame\ |\ -signum\ |\ -signame\ ]\ {\ job\ |\ pid\ |
.No -pgrp\ }\ \&.\&.\&.
d2355 4
a2358 2
.It Xo Ic print Oo Fl nprsu Ns Ar n
.Li | Fl R No [-en] Oc [argument\ ...]
d2468 3
a2470 3
.Sm off
.Oo Ar parameter Op = Ar value Oc \ ...
.Sm on
d2504 4
a2507 1
.It Xo Ic set No [+-abCefhkmnpsuvxX]\ [+-o\ [option]]\ [+-A\ name]\ [--]\&
d3005 10
a3014 2
.It Xo Ic typeset No [[+-Ulprtux]\ [-L[n]]\ [-R[n]]\ [-Z[n]]\ [-i[n]]\ |\ -f\&
.Li [-tux]]\ [name[=value]\ ...]
@


1.14
log
@patches from pdksh 5.2.13.11
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.13 1999/06/14 03:13:59 pjanzen Exp $
d388 1
a388 1
and 
@


1.13
log
@Fixed a bunch of typos, grammar errors, and unclear wording in the sh
man page, and the corresponding problems in the ksh page.
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.12 1999/06/03 09:50:32 aaron Exp $
d1152 1
a1152 1
executed. Not yet implemented.
d3496 7
@


1.12
log
@use the hyphenated form "command-line" in the case of a compound adjective;
pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.11 1999/05/30 17:44:56 aaron Exp $
d81 1
a81 1
options are specified, the first non-option argument specifies the name
d88 1
a88 1
otherwise the name the shell was called with (i.e., argv[0]) is used.
d97 2
a98 2
.Dv INT ,
.Dv QUIT ,
d100 1
a100 1
.Dv TERM
d228 1
a228 1
usually delimit commands. The meta-charcters are used in building the
d287 1
a287 1
is used to introduce parameter, command and arithmetic substitutions (see
d403 1
a403 1
.Dv INT
d405 1
a405 1
.Dv QUIT
d445 1
a445 1
that are followed by reserved words must end with a semi-colon, a newline or
d500 1
a500 1
patterns are subject to parameter, command and arithmetic substitution as
d528 1
a528 1
are used instead. For historical reasons, open and clase braces may be used
d554 1
a554 1
is executed; otherwise the
d703 1
a703 1
substitution: parameter, command and arithmetic. Parameter substitutions,
d722 1
a722 1
into several words; any characters from the set space, tab and newline that
d732 1
a732 1
characters delimit a field. As a special case, leading and trailing
d756 1
a756 1
value of space, tab and newline is used.
d759 1
a759 1
the substituion. Using the previous example, the substitution for $VAR:E
d774 1
a774 1
substituion or use
d786 1
a786 1
is parsed, however, for the
d811 1
a811 1
regardless of quoting. This will hopefully be fixed soon.
d913 1
a913 1
it is substituted, otherwise
d924 1
a924 1
is substituted, otherwise nothing is substituted.
d932 1
a932 1
it is substituted, otherwise it is assigned
d944 1
a944 1
it is substituted, otherwise
d956 1
a956 1
can be omitted, in which case the conditions only depand on
d994 2
a995 2
results in the shortest match, two
of them results in the longest match.
d1016 3
a1018 1
The process ID of the shell, or the PID of the original shell if it is a
d1185 1
a1185 1
The prompt is printed verbatim (i.e., no substituions are done).
d1324 3
a1326 1
The POSIX character classes (i.e.,
d1332 2
a1333 2
When a command is executed, its standard input, standard output and standard
error (file descriptors 0, 1 and 2, respectively) are normally inherited from
d1348 1
a1348 1
option is set, an error occurs, otherwise the file is truncated. Note that this
d1382 1
a1382 1
the shell copies lines from the command source into a termpoary file until a
d1390 1
a1390 1
parameter, command and arithmetic substitutions are performed, along with
d1424 2
a1425 2
redirection with a single digit. Parameter, command and arithmetic
substitutions, tilde substitutions and (if the shell is interative)
d1436 2
a1437 2
For simple-commands, redirections may appear anywhere in the command, for
compund-commands
d1529 3
a1531 1
Logical NOT; the result is 1 if argument is zero, 0 if not.
d1533 2
a1534 1
Arithmetic (bit-wise) NOT.
d1565 3
a1567 1
Logical OR; the result is 1 if either argument is non-zero, 0 if not. The right
d1570 3
a1572 1
Logical AND; the result is 1 if both arguments are non-zero, 0 if not. The
d1575 2
a1576 1
Arithmetic (bit-wise) OR.
d1578 3
a1580 1
Arithmetic (bit-wise) XOR (exclusive-OR).
d1582 2
a1583 1
Arithmetic (bit-wise) AND.
d1620 1
a1620 1
in that they are executed in the current environment. Howeer, unlike
d1624 1
a1624 1
are searched after special built-in commands, and before regular and
d1719 4
a1722 1
The shell is intended to be POSIX compliant, however, in some cases, POSIX
d1729 3
a1731 1
If it is on, the POSIX behaviour is followed, otherwise it is not. The
d1736 3
a1738 2
parameter. (The shell can also be compiled so that it is in POSIX mode by
default, however this is usually not desirable).
d1757 3
a1759 1
command substitutions. In POSIX mode, the
d1761 3
a1763 1
is interpreted when the command is interpreted; in non-POSIX mode, the
d1769 3
a1771 1
in POSIX mode,
d1773 3
a1775 1
in non-POSIX mode. To avoid problems, use the
d1780 5
a1784 1
output. In POSIX mode, signal names are listed one per line; in non-POSIX mode,
d1793 5
a1797 2
exit status. In POSIX mode, the exit status is 0 if no errors occur; in
non-POSIX mode, the exit status is that of the last foregrounded job.
d1800 3
a1802 1
In POSIX mode, options must start with a
d1804 3
a1806 1
in non-POSIX mode, options can start with either
d1811 6
a1816 2
Brace expansion (also known as alternation). In POSIX mode, brace expansion is
disabled; in non-POSIX mode, brace expansion is enabled. Note that
d1822 1
a1822 1
option off, however, it can be explicitly turned on later.
d1825 3
a1827 1
In POSIX mode, this does not clear the
d1831 3
a1833 1
options; in non-POSIX mode, it does.
d1836 3
a1838 1
exit status. In POSIX mode, the exit status of
d1840 3
a1842 1
is 0 if there are no errors; in non-POSIX mode, the exit status is that of any
d1847 5
a1851 2
prints 0 in POSIX mode, 1 in non-POSIX mode. This construct is used in most
shell scripts that use the old
d1861 5
a1865 1
commands. In POSIX mode, normal argument expansion is done; in non-POSIX mode,
d1869 16
a1884 6
Signal specification. In POSIX mode, signals can be specified as digits, only
if signal numbers match POSIX values (i.e., HUP=1, INT=2, QUIT=3, ABRT=6,
KILL=9, ALRM=14, and TERM=15); in non-POSIX mode, signals can always be digits.
.It
Alias expansion. In POSIX mode, alias expansion is only carried out when
reading command words; in non-POSIX mode, alias expansion is carried out on any
d1898 3
a1900 1
in POSIX mode,
d1902 3
a1904 1
in non-POSIX mode.
d1906 3
a1908 1
Test. In POSIX mode, the expression
d1912 3
a1914 2
arguments) is always true as it is a non-zero length string; in non-POSIX mode,
it tests if file descriptor 1 is a tty (i.e., the
d1922 2
a1923 2
assignments, the type of command is determined; a special built-in, a function,
a regular built-in, or the name of a file to execute found using the
d1942 3
a1944 1
The original ksh and POSIX differ somewhat in which commands are considered
d1975 3
a1977 1
differently from the POSIX special and regular commands.
d2137 1
a2137 1
is executed exactly as if the
d2147 2
a2148 2
(the actual value of the default path is system dependent; on POSIXish systems,
it is the value returned by
d2189 2
a2190 1
If no arguments are given, and I/O redirection is permanent and the shell is
d2248 1
a2248 1
ahve an argument. Options that do not take arguments may be grouped in a single
d2251 1
a2251 1
taken to be the option's argument, otherwise, the next argument is the option's
d2346 1
a2346 1
prints its arguments on the standard output, separated by spaces, and
d2653 3
a2655 1
Enable POSIX mode. See
d2716 1
a2716 1
and returns zero status if true, 1 status if fase, and greater than 1 if there
d2780 1
a2780 1
owned is the shell's effective user ID.
d2835 3
a2837 1
to the special POSIX rules described below).
d2871 2
a2872 1
Logical OR.
d2874 2
a2875 1
Logical AND.
d2877 2
a2878 1
Logical NOT.
d2895 3
a2897 1
Note that some special rules are applied (courtesy of POSIX) if the number of
d3190 1
a3190 1
option is used, the mask displayed or set is symbolic, otherwise it is an
d3470 3
a3472 1
traditional Bourne or POSIX compliant shells is an issue.
@


1.11
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.10 1999/05/28 12:23:06 aaron Exp $
d1845 1
a1845 1
After evaluation of command line arguments, redirections and parameter
d1899 1
a1899 1
Once the type of the command has been determined, any command line parameter
d2576 1
a2576 1
Enable vi-like command line editing (interactive shells only).
d2580 1
a2580 1
was set, the vi command line mode would let the tty driver do the work until
d2586 1
a2586 1
In vi command line editing, do command and file name completion when escape
d2594 1
a2594 1
In vi command line editing, do command and file name completion when tab (^I)
@


1.10
log
@be more conservative with the .Dq macro; in particular, use .Sq macros most of
the time instead when quoting 1-2 characters (makes it much easier to read);
based on a patch received awhile ago from d@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: sh.1tbl,v 1.9 1999/03/02 23:46:54 aaron Exp $
d153 4
a156 4
.Sq > ,
.Sq >| ,
.Sq >> ,
.Sq <> ) .
d179 1
a179 1
.Sq \&-
d219 5
a223 5
.Sq \&< ,
.Sq \&> ,
.Sq \&| ,
.Sq \&; ,
.Sq \&( ,
d225 1
a225 1
.Sq \&)
d230 6
a235 6
.Sq \&< ,
.Sq \&<\&& ,
.Sq \&<\&< ,
.Sq \&> ,
.Sq \&>\&& ,
.Sq \&>\&> ,
d239 1
a239 1
.Sq \&|
d241 1
a241 1
.Sq \&;
d243 1
a243 1
.Sq \&&
d245 1
a245 1
.Sq \&&\&&
d247 1
a247 1
.Sq \&|\&|
d249 1
a249 1
.Sq \&;\&;
d254 1
a254 1
.Sq \&( .. \&)
d265 11
a275 11
.Sq \e ,
.Sq \&" ,
.Sq \&' ,
.Sq \&# ,
.Sq \&$ ,
.Sq \&` ,
.Sq \&~ ,
.Sq \&{ ,
.Sq \&} ,
.Sq \&* ,
.Sq \&? ,
d277 1
a277 1
.Sq \&[ .
d281 1
a281 1
.Sq \&# ,
d284 1
a284 1
.Sq \&#
d286 1
a286 1
.Sq \&$
d290 1
a290 1
.Sq \&`
d294 1
a294 1
.Sq \&~
d298 1
a298 1
.Sq \&{
d300 1
a300 1
.Sq \&}
d307 2
a308 2
.Sq \&* ,
.Sq \&? ,
d310 1
a310 1
.Sq \&[
d354 1
a354 1
.Sq \&|
d360 1
a360 1
.Sq \&!
d368 4
a371 4
.Sq \&&\&& ,
.Sq \&|\&| ,
.Sq \&& ,
.Sq \&|\&& ,
d373 1
a373 1
.Sq \&; .
d381 1
a381 1
.Sq \&|\&|
d387 1
a387 1
.Sq \&&\&&
d389 1
a389 1
.Sq \&|\&|
d391 2
a392 2
.Sq \&& ,
.Sq \&|\&&
d394 1
a394 1
.Sq \&; ,
d396 1
a396 1
.Sq \&&
d410 1
a410 1
.Sq \&&\&&
d412 1
a412 1
.Sq \&|\&|
d414 2
a415 2
.Sq \&& ,
.Sq \&|\&&
d417 1
a417 1
.Sq \&; .
d435 2
a436 1
NOTE: Some shells (but not this one) execute control structure commands in a
d495 1
a495 1
.Sq \&.
d497 1
a497 1
.Sq \&/
d544 1
a544 1
.Sq \&; .
d615 1
a615 1
.Sq \e
d618 1
a618 1
.Sq \e
d625 2
a626 2
.Sq \&$ ,
.Sq \&`
d628 1
a628 1
.Sq \e ,
d630 1
a630 1
.Sq $
d632 1
a632 1
.Sq `
d636 1
a636 1
.Sq \e
d638 3
a640 3
.Sq \e ,
.Sq $ ,
.Sq ` ,
d642 1
a642 1
.Sq \&" ,
d645 1
a645 1
.Sq \e
d647 1
a647 1
.Sq \e
d650 2
a651 1
NOTE: See
d729 3
a731 1
whitespace characters, in combination with zero or none non-IFS whitespace
d735 3
a737 1
it); leading or trailing non-IFS whitespace does create an empty field.
d789 1
a789 1
.Sq \e
d791 2
a792 2
.Sq $ ,
.Sq ` ,
d794 1
a794 1
.Sq \e
d796 1
a796 1
.Sq \e
d808 1
a808 1
NOTE:
d825 1
a825 1
.Sq _
d863 1
a863 1
.Sq =
d955 1
a955 1
.Sq \&:
d973 2
a974 2
.Sq \&* ,
.Sq \&@@ ,
d993 1
a993 1
.Sq \&#
d1077 1
a1077 1
.Sq \&/
d1143 2
a1144 1
NOTE: This parameter is not imported from the environment when the shell is
d1216 1
a1216 1
.Sq ~ .
d1218 1
a1218 1
.Sq / ,
d1220 1
a1220 1
.Sq \&+
d1222 1
a1222 1
.Sq \&- ,
d1251 1
a1251 1
.Sq \&?
d1253 1
a1253 1
.Sq \&*
d1268 1
a1268 1
.Sq \&-
d1274 1
a1274 1
.Sq \&-
d1277 1
a1277 1
.Sq \&]
d1280 1
a1280 1
.Sq \&!
d1320 1
a1320 1
.Sq / .
d1390 3
a1392 3
.Sq \&$ ,
.Sq ` ,
.Sq \e ,
d1407 1
a1407 1
.Sq p ,
d1410 1
a1410 1
.Sq \&- ,
d1765 1
a1765 1
.Sq \&- ;
d1767 1
a1767 1
.Sq \&-
d1769 1
a1769 1
.Sq \&+ .
d1834 1
a1834 1
.Sq Fl t
d1836 1
a1836 1
.Sq Ic \&!
d1934 1
a1934 1
.Sq \&+ ,
d2019 1
a2019 1
.Sq \&- ,
d2087 1
a2087 1
.Sq \ec .
d2180 1
a2180 1
.Sq \&+ ,
d2184 1
a2184 1
.Sq \&+ .
d2203 1
a2203 1
.Sq \&- ,
d2205 1
a2205 1
.Sq \&-\&-
d2270 6
a2275 6
.Sq \eb ,
.Sq \ef ,
.Sq \en ,
.Sq \er ,
.Sq \et ,
.Sq \ev ,
d2277 1
a2277 1
.Sq \e0###
d2279 1
a2279 1
.Sq #
d2282 1
a2282 1
.Sq \ec
d2286 1
a2286 1
.Sq \e
d2311 1
a2311 1
.Sq \e
d2513 2
a2514 2
.Sq \&- ,
.Sq \&+
d2516 1
a2516 1
.Sq =
d2526 1
a2526 1
.Sq /
d2581 2
a2582 1
ESC (^[) was entered.
d2608 1
a2608 1
.Sq \&-\&-
d2612 1
a2612 1
.Sq \&-
d2720 1
a2720 1
.Sq \&! ,
d2813 1
a2813 1
.Sq \&!
d2817 1
a2817 1
.Sq \&!
d2821 1
a2821 1
.Sq \&! ) .
d2823 2
a2824 1
NOTE: A common mistake is to use
d2833 1
a2833 1
.Sq Ic \&!
d2835 1
a2835 1
.Sq Fl n .
d2906 1
a2906 1
.Sq \&-
d2909 1
a2909 1
.Sq \&+ ,
d2931 1
a2931 1
.Sq \&+ ,
d3273 1
a3273 1
.Sq \&+
d3275 1
a3275 1
.Sq \&-
@


1.9
log
@Finally, new and improved mandoc ksh/sh man pages. This took hours, and hours,
and hours... Someone please read it and find any typos I may have missed.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d153 4
a156 4
.Dq > ,
.Dq >| ,
.Dq >> ,
.Dq <> ) .
d179 1
a179 1
.Dq \&-
d219 5
a223 5
.Dq \&< ,
.Dq \&> ,
.Dq \&| ,
.Dq \&; ,
.Dq \&( ,
d225 1
a225 1
.Dq \&)
d230 6
a235 6
.Dq \&< ,
.Dq \&<\&& ,
.Dq \&<\&< ,
.Dq \&> ,
.Dq \&>\&& ,
.Dq \&>\&> ,
d239 1
a239 1
.Dq \&|
d241 1
a241 1
.Dq \&;
d243 1
a243 1
.Dq \&&
d245 1
a245 1
.Dq \&&\&&
d247 1
a247 1
.Dq \&|\&|
d249 1
a249 1
.Dq \&;\&;
d254 2
a255 2
.Dq \&( .. \&)
are used to create subshells.
d265 11
a275 11
.Dq \e ,
.Dq \&" ,
.Dq \&' ,
.Dq \&# ,
.Dq \&$ ,
.Dq \&` ,
.Dq \&~ ,
.Dq \&{ ,
.Dq \&} ,
.Dq \&* ,
.Dq \&? ,
d277 1
a277 1
.Dq \&[ .
d281 1
a281 1
.Dq \&# ,
d284 1
a284 1
.Dq \&#
d286 1
a286 1
.Dq \&$
d290 1
a290 1
.Dq \&`
d294 1
a294 1
.Dq \&~
d298 1
a298 1
.Dq \&{
d300 1
a300 1
.Dq \&}
d306 3
a308 3
and, finally,
.Dq \&* ,
.Dq \&? ,
d310 1
a310 1
.Dq \&[
d354 1
a354 1
.Dq \&|
d360 1
a360 1
.Dq \&!
d368 4
a371 4
.Dq \&&\&& ,
.Dq \&|\&| ,
.Dq \&& ,
.Dq \&|\&& ,
d373 1
a373 1
.Dq \&; .
d381 1
a381 1
.Dq \&|\&|
d387 1
a387 1
.Dq \&&\&&
d389 1
a389 1
.Dq \&|\&|
d391 2
a392 2
.Dq \&& ,
.Dq \&|\&&
d394 1
a394 1
.Dq \&; ,
d396 1
a396 1
.Dq \&&
d410 1
a410 1
.Dq \&&\&&
d412 1
a412 1
.Dq \&|\&|
d414 2
a415 2
.Dq \&& ,
.Dq \&|\&&
d417 1
a417 1
.Dq \&; .
d494 1
a494 1
.Dq \&.
d496 1
a496 1
.Dq \&/
d543 1
a543 1
.Dq \&; .
d614 1
a614 1
.Dq \e
d617 1
a617 1
.Dq \e
d624 2
a625 2
.Dq \&$ ,
.Dq \&`
d627 1
a627 1
.Dq \e ,
d629 1
a629 1
.Dq $
d631 1
a631 1
.Dq `
d635 1
a635 1
.Dq \e
d637 3
a639 3
.Dq \e ,
.Dq $ ,
.Dq ` ,
d641 1
a641 1
.Dq \&" ,
d644 1
a644 1
.Dq \e
d646 1
a646 1
.Dq \e
d783 1
a783 1
.Dq \e
d785 2
a786 2
.Dq $ ,
.Dq ` ,
d788 1
a788 1
.Dq \e
d790 1
a790 1
.Dq \e
d819 1
a819 1
.Dq _
d857 1
a857 1
.Dq =
d949 1
a949 1
.Dq \&:
d967 2
a968 2
.Dq \&* ,
.Dq \&@@ ,
d987 1
a987 1
.Dq \&#
d1071 1
a1071 1
.Dq \&/
d1209 1
a1209 1
.Dq ~ .
d1211 1
a1211 1
.Dq / ,
d1213 1
a1213 1
.Dq \&+
d1215 1
a1215 1
.Dq \&- ,
d1244 1
a1244 1
.Dq \&?
d1246 1
a1246 1
.Dq \&*
d1261 1
a1261 1
.Dq \&-
d1267 1
a1267 1
.Dq \&-
d1270 1
a1270 1
.Dq \&]
d1273 1
a1273 1
.Dq \&!
d1313 1
a1313 1
.Dq / .
d1383 3
a1385 3
.Dq \&$ ,
.Dq ` ,
.Dq \e ,
d1400 1
a1400 1
.Dq p ,
d1403 1
a1403 1
.Dq \&- ,
d1758 1
a1758 1
.Dq \&- ;
d1760 1
a1760 1
.Dq \&-
d1762 1
a1762 1
.Dq \&+ .
d1827 1
a1827 1
.Dq Fl t
d1829 1
a1829 1
.Dq Ic \&!
d1927 1
a1927 1
.Dq \&+ ,
d2012 1
a2012 1
.Dq \&- ,
d2080 1
a2080 1
.Dq \ec .
d2173 1
a2173 1
.Dq \&+ ,
d2177 1
a2177 1
.Dq \&+ .
d2196 1
a2196 1
.Dq \&- ,
d2198 1
a2198 1
.Dq \&-\&-
d2263 6
a2268 6
.Dq \eb ,
.Dq \ef ,
.Dq \en ,
.Dq \er ,
.Dq \et ,
.Dq \ev ,
d2270 1
a2270 1
.Dq \e0###
d2272 1
a2272 1
.Dq #
d2275 1
a2275 1
.Dq \ec
d2279 1
a2279 1
.Dq \e
d2304 1
a2304 1
.Dq \e
d2506 2
a2507 2
.Dq \&- ,
.Dq \&+
d2509 1
a2509 1
.Dq =
d2519 1
a2519 1
.Dq /
d2600 1
a2600 1
.Dq \&-\&-
d2604 1
a2604 1
.Dq \&-
d2712 1
a2712 1
.Dq \&! ,
d2805 1
a2805 1
.Dq \&!
d2809 1
a2809 1
.Dq \&!
d2813 1
a2813 1
.Dq \&! ) .
d2824 1
a2824 1
.Dq Ic \&!
d2826 1
a2826 1
.Dq Fl n .
d2897 1
a2897 1
.Dq \&-
d2900 1
a2900 1
.Dq \&+ ,
d2922 1
a2922 1
.Dq \&+ ,
d3264 1
a3264 1
.Dq \&+
d3266 1
a3266 1
.Dq \&-
@


1.8
log
@Updates from pdksh-unstable-5.2.13.7.  Most notable change is:
    trap: exit traps now executed in subshells (without explicit exit call).
See the Changelog for a full list of changes.
@
text
@d1 55
a55 39
'\" t
.\"	$OpenBSD: sh.1tbl,v 1.7 1998/10/29 04:09:21 millert Exp $
.\"{{{}}}
.\"{{{  Notes about man page
.\"     - use the pseudo-macros .sh( and .sh) to begin and end sh-specific
.\"       text and .ksh( and .ksh) for ksh specific text.
.\"     - put i.e., e.g. and etc. in italics
.\"}}}
.\"{{{  To do
.\" todo: Things not covered that should be:
.\"	- distinguish (POSIX) special built-in's, (POSIX) regular built-in's,
.\"	  and sh/ksh weirdo built-in's (put S,R,X superscripts after command
.\"	  name in built-in commands section?)
.\"	- need to be consistent about notation for `See section-name', `
.\"	  See description of foobar command', `See section section-name', etc.
.\"	- need to use the term `external command' meaning `a command that is 
.\"       executed using execve(2)' (as opposed to a built-in command or 
.\"       function) for more clear description.
.\"}}}
.\"{{{  Title
.TH SH 1 "August 19, 1996" "" "User commands"
.\"}}}
.\"{{{  Name
.SH NAME
sh \- Public domain Bourne shell
.\"}}}
.\"{{{  Synopsis
.SH SYNOPSIS
.ad l
\fBsh\fP
[\fB\(+-abCefhikmnprsuvxX\fP] [\fB\(+-o\fP \fIoption\fP] [ [ \fB\-c\fP \fIcommand-string\fP [\fIcommand-name\fP] | \fB\-s\fP | \fIfile\fP ] [\fIargument\fP ...] ]
.ad b
.\"}}}
.\"{{{  Description
.SH DESCRIPTION
\fBsh\fP is a reimplementation of the Bourne shell, a command
interpreter for both interactive and script use.
.\"{{{  Shell Startup
.SS "Shell Startup"
d57 196
a252 98
.IP "\fB\-c\fP \fIcommand-string\fP"
the shell executes the command(s) contained in \fIcommand-string\fP
.IP \fB\-i\fP
interactive mode \(em see below
.IP \fB\-l\fP
login shell \(em see below
interactive mode \(em see below
.IP \fB\-s\fP
the shell reads commands from standard input; all non-option arguments
are positional parameters
.IP \fB\-r\fP
restricted mode \(em see below
.PP
In addition to the above, the options described in the \fBset\fP built-in
command can also be used on the command line.
.PP
If neither the \fB\-c\fP nor the \fB\-s\fP options are specified, the
first non-option argument specifies the name of a file the shell reads
commands from; if there are no non-option arguments, the shell reads
commands from standard input.
The name of the shell (\fIi.e.\fP, the contents of the \fB$0\fP) parameter
is determined as follows: if the \fB\-c\fP option is used and there is
a non-option argument, it is used as the name; if commands are being
read from a file, the file is used as the name; otherwise the name
the shell was called with (\fIi.e.\fP, argv[0]) is used.
.PP
A shell is \fBinteractive\fP if the \fB\-i\fP option is used or
if both standard input and standard error are attached to a tty.
An interactive shell has job control enabled (if available),
ignores the INT, QUIT and TERM signals, and prints prompts before
reading input (see \fBPS1\fP and \fBPS2\fP parameters).
For non-interactive shells, the \fBtrackall\fP option is on by default
(see \fBset\fP command below).
.PP
A shell is \fBrestricted\fP if the \fB\-r\fP option is used or if either
the basename of the name the shell is invoked with or the \fBSHELL\fP
parameter match the pattern *r*sh (\fIe.g.\fP, rsh, rksh, rpdksh, \fIetc.\fP).
The following restrictions come into effect after the shell processes
any profile and \fB$ENV\fP files:
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
the \fBcd\fP command is disabled
.IP \ \ \(bu
the \fBSHELL\fP, \fBENV\fP and \fBPATH\fP parameters can't be changed
.IP \ \ \(bu
command names can't be specified with absolute or relative paths
.IP \ \ \(bu
the \fB\-p\fP option of the \fBcommand\fP built-in can't be used
.IP \ \ \(bu
redirections that create files can't be used (\fIi.e.\fP, \fB>\fP,
\fB>|\fP, \fB>>\fP, \fB<>\fP)
.nr PD \n(P2
.PP
A shell is \fBprivileged\fP if the \fB\-p\fP option is used or if
the real user-id or group-id does not match the effective user-id
or group-id (see \fIgetuid\fP(2), \fIgetgid\fP(2)).
A privileged shell does not process $HOME/.profile nor the \fBENV\fP
parameter (see below), instead the file /etc/suid_profile is processed.
Clearing the privileged option causes the shell to set its effective
user-id (group-id) to its real user-id (group-id).
.PP
If the basename of the name the shell is called with (\fIi.e.\fP, argv[0])
starts with \fB\-\fP or if the \fB\-l\fP option is used, the shell is assumed
to be a login shell and the shell reads and executes the contents of
\fB/etc/profile\fP and \fB$HOME/.profile\fP if they exist and are readable.
.PP
If the \fBENV\fP parameter is set when the shell starts (or, in the
case of login shells, after any profiles are processed), its value
is subjected to parameter, command, arithmetic and tilde substitution and
the resulting file (if any) is read and executed.
If \fBENV\fP parameter is not set (and not null) and pdksh was compiled
with the \fBDEFAULT_ENV\fP macro defined, the file named in that macro
is included (after the above mentioned substitutions have been performed).
.PP
The exit status of the shell is 127 if the command file specified
on the command line could not be opened, or non-zero if a fatal syntax
error occurred during the execution of a script.
In the absence of fatal errors, the exit status is that of the last
command executed, or zero, if no command is executed.
.\"}}}
.\"{{{  Command Syntax
.SS "Command Syntax"
.\"{{{  words and tokens
The shell begins parsing its input by breaking it into \fIword\fPs.
Words, which are sequences of characters, are delimited by unquoted
\fIwhite-space\fP characters (space, tab and newline) or \fImeta-characters\fP
(\fB<\fP, \fB>\fP, \fB|\fP, \fB;\fP, \fB&\fP, \fB(\fP and \fB)\fP).
Aside from delimiting words, spaces and tabs are ignored, while
newlines usually delimit commands.
The meta-characters are used in building the following tokens:
\fB<\fP, \fB<&\fP, \fB<<\fP, \fB>\fP, \fB>&\fP, \fB>>\fP, \fIetc.\fP are
used to specify redirections (see Input/Output Redirection below);
\fB|\fP is used to create pipelines;
\fB;\fP is used to separate commands;
\fB&\fP is used to create asynchronous pipelines;
\fB&&\fP and \fB||\fP are used to specify conditional execution;
\fB;;\fP is used in \fBcase\fP statements;
d254 154
a407 80
\fB(\fP .. \fB)\fP are used to create subshells.
.PP
White-space and meta-characters can be quoted individually using
backslash (\fB\e\fP), or in groups using double (\fB"\fP) or single (\fB'\fP)
quotes.
Note that the following characters are also treated specially by the shell and
must be quoted if they are to represent themselves:
\fB\e\fP, \fB"\fP, \fB'\fP, \fB#\fP, \fB$\fP, \fB`\fP, \fB~\fP, \fB{\fP,
\fB}\fP, \fB*\fP, \fB?\fP and \fB[\fP.
The first three of these are the above mentioned quoting characters
(see Quoting below);
\fB#\fP, if used at the beginning of a word, introduces a comment \(em everything
after the \fB#\fP up to the nearest newline is ignored;
\fB$\fP is used to introduce parameter, command and arithmetic substitutions
(see Substitution below);
\fB`\fP introduces an old-style command substitution
(see Substitution below);
\fB~\fP begins a directory expansion (see Tilde Expansion below);
\fB{\fP and \fB}\fP delimit \fIcsh\fP(1) style alternations
(see Brace Expansion below);
and, finally, \fB*\fP, \fB?\fP and \fB[\fP are used in file name generation
(see File Name Patterns below).
.\"}}}
.\"{{{  simple-command
.PP
As words and tokens are parsed, the shell builds commands, of which
there are two basic types: \fIsimple-commands\fP, typically programs
that are executed, and \fIcompound-commands\fP, such as \fBfor\fP and
\fBif\fP statements, grouping constructs and function definitions.
.PP
A simple-command consists of some combination of parameter assignments (see
Parameters below), input/output redirections (see Input/Output Redirections
below), and command words; the only restriction is that parameter assignments
come before any command words.
The command words, if any, define the command that is to be executed and its
arguments.
The command may be a shell built-in command, a function or an \fIexternal
command\fP, \fIi.e.\fP, a separate executable file that is located using the
\fBPATH\fP parameter (see Command Execution below).
Note that all command constructs have an \fIexit status\fP: for external
commands, this is related to the status returned by \fIwait\fP(2) (if the
command could not be found, the exit status is 127, if it could not be
executed, the exit status is 126);
the exit status of other command constructs (built-in commands, functions,
compound-commands, pipelines, lists, \fIetc.\fP) are all well defined and are
described where the construct is described.
The exit status of a command consisting only of parameter assignments is that
of the last command substitution performed during the parameter assignment
or zero if there were no command substitutions.
.\"}}}
.\"{{{  pipeline
.PP
Commands can be chained together using the \fB|\fP token to
form \fIpipelines\fP, in which the standard output of each command but
the last is piped (see \fIpipe\fP(2)) to the standard input of the following
command.
The exit status of a pipeline is that of its last command.
A pipeline may be prefixed by the \fB!\fP reserved word which
causes the exit status of the pipeline to be logically
complemented: if the original status was 0 the complemented status will
be 1, and if the original status was not 0, then the complemented
status will be 0.
.\"}}}
.\"{{{  lists
.PP
\fILists\fP of commands can be created by separating pipelines by
any of the following tokens: \fB&&\fP, \fB||\fP, \fB&\fP, \fB|&\fP and \fB;\fP.
The first two are for conditional execution: \fIcmd1\fP \fB&&\fP \fIcmd2\fP
executes \fIcmd2\fP only if the exit status of \fIcmd1\fP is zero;
\fB||\fP is the opposite \(em \fIcmd2\fP is executed only if the exit status
of \fIcmd1\fP is non-zero.
\fB&&\fP and \fB||\fP have equal precedence which is higher than that of
\fB&\fP, \fB|&\fP and \fB;\fP, which also have equal precedence.
The \fB&\fP token causes the preceding command to be executed asynchronously,
that is, the shell starts the command, but does not wait for it to complete
(the shell does keep track of the status of asynchronous commands \(em see
Job Control below).
When an asynchronous command is started when job control is disabled
(\fIi.e.\fP, in most scripts), the command is started with signals INT
and QUIT ignored and with input redirected from /dev/null
d409 9
a417 2
Note that a command must follow the \fB&&\fP and \fB||\fP operators, while
a command need not follow \fB&\fP, \fB|&\fP and \fB;\fP.
d420 6
a425 7
.\"}}}
.\"{{{  compound-commands
.PP
Compound commands are created using the following reserved words \(em these
words are only recognized if they are unquoted and if they are used as
the first word of a command (\fIi.e.\fP, they can't be preceded by parameter
assignments or redirections):
d429 4
a432 4
case	else	function	then	!
do	esac	if	time	[[
done	fi	in	until	{
elif	for	select	while	}
d434 8
a441 6
\fBNote:\fP Some shells (but not this one) execute control structure commands
in a subshell when one or more of their file descriptors are redirected, so
any environment changes inside them may fail.
To be portable, the \fBexec\fP statement should be used instead to redirect
file descriptors before the control structure.
.PP
d443 10
a452 10
\fIlist\fP) that are followed by reserved words must end with a
semi-colon, a newline or a (syntactically correct) reserved word.
For example,
.RS
\fB{ echo foo; echo bar; }\fP
.br
\fB{ echo foo; echo bar<newline>}\fP
.br
\fB{ { echo foo; echo bar; } }\fP
.RE
d454 5
a458 3
.RS
\fB{ echo foo; echo bar }\fP
.RE
d460 152
a611 84
.\"{{{  ( list )
.IP "\fB(\fP \fIlist\fP \fB)\fP"
Execute \fIlist\fP in a subshell.  There is no implicit way to pass
environment changes from a subshell back to its parent.
.\"}}}
.\"{{{  { list }
.IP "\fB{\fP \fIlist\fP \fB}\fP"
Compound construct; \fIlist\fP is executed, but not in a subshell.
Note that \fB{\fP and \fB}\fP are reserved words, not meta-characters.
.\"}}}
.\"{{{  case word in [ [ ( ] pattern [ | pattern ] ... ) list ;; ] ... esac
.IP "\fBcase\fP \fIword\fP \fBin\fP [ [\fB(\fP] \fIpattern\fP [\fB|\fP \fIpattern\fP] ... \fB)\fP \fIlist\fP \fB;;\fP ] ... \fBesac\fP"
The \fBcase\fP statement attempts to match \fIword\fP against the specified
\fIpattern\fPs; the \fIlist\fP associated with the first successfully matched
pattern is executed.  Patterns used in \fBcase\fP statements are the same as
those used for file name patterns except that the restrictions regarding
\fB\&.\fP and \fB/\fP are dropped.  Note that any unquoted space before and
after a pattern is stripped; any space with a pattern must be quoted.  Both the
word and the patterns are subject to parameter, command, and arithmetic
substitution as well as tilde substitution.
For historical reasons, open and close braces may be used instead
of \fBin\fP and \fBesac\fP (\fIe.g.\fP, \fBcase $foo { *) echo bar; }\fP).
The exit status of a \fBcase\fP statement is that of the executed \fIlist\fP;
if no \fIlist\fP is executed, the exit status is zero.
.\"}}}
.\"{{{  for name [ in word ... term ] do list done
.IP "\fBfor\fP \fIname\fP [ \fBin\fP \fIword\fP ... \fIterm\fP ] \fBdo\fP \fIlist\fP \fBdone\fP"
where \fIterm\fP is either a newline or a \fB;\fP.
For each \fIword\fP in the specified word list, the parameter \fIname\fP is
set to the word and \fIlist\fP is executed.  If \fBin\fP is not used to
specify a word list, the positional parameters (\fB"$1"\fP, \fB"$2"\fP,
\fIetc.\fP) are used instead.
For historical reasons, open and close braces may be used instead
of \fBdo\fP and \fBdone\fP (\fIe.g.\fP, \fBfor i; { echo $i; }\fP).
The exit status of a \fBfor\fP statement is the last exit status
of \fIlist\fP; if \fIlist\fP is never executed, the exit status is zero.
.\"}}}
.\"{{{  if list then list [ elif list then list ] ... [ else list ] fi
.IP "\fBif\fP \fIlist\fP \fBthen\fP \fIlist\fP [\fBelif\fP \fIlist\fP \fBthen\fP \fIlist\fP] ... [\fBelse\fP \fIlist\fP] \fBfi\fP"
If the exit status of the first \fIlist\fP is zero, the second \fIlist\fP
is executed; otherwise the \fIlist\fP following the \fBelif\fP, if any, is
executed with similar consequences.  If all the lists following the \fBif\fP
and \fBelif\fPs fail (\fIi.e.\fP, exit with non-zero status), the \fIlist\fP
following the \fBelse\fP is executed.
The exit status of an \fBif\fP statement is that
of non-conditional \fIlist\fP that is executed; if no non-conditional
\fIlist\fP is executed, the exit status is zero.
.\"}}}
.\"{{{  select name [ in word ... ] do list done
.\"}}}
.\"{{{  until list do list done
.IP "\fBuntil\fP \fIlist\fP \fBdo\fP \fIlist\fP \fBdone\fP"
This works like \fBwhile\fP, except that the body is executed only while the
exit status of the first \fIlist\fP is non-zero.
.\"}}}
.\"{{{  while list do list done
.IP "\fBwhile\fP \fIlist\fP \fBdo\fP \fIlist\fP \fBdone\fP"
A \fBwhile\fP is a prechecked loop.  Its body is executed as often
as the exit status of the first \fIlist\fP is zero.
The exit status of a \fBwhile\fP statement is the last exit status
of the \fIlist\fP in the body of the loop; if the body is not executed,
the exit status is zero.
.\"}}}
.\"{{{  function name { list }
.IP "\fBfunction\fP \fIname\fP \fB{\fP \fIlist\fP \fB}\fP"
Defines the function \fIname\fP.
See Functions below.
Note that redirections specified after a function definition are
performed whenever the function is executed, not when the function
definition is executed.
.\"}}}
.\"{{{  name () command
.IP "\fIname\fP \fB()\fP \fIcommand\fP"
Mostly the same as \fBfunction\fP.
See Functions below.
.\"}}}
.\"{{{  (( expression ))
.\"}}}
.\"{{{  [[ expression ]]
.\"}}}
.\"}}}
.\"}}}
.\"{{{  Quoting
.SS Quoting
d613 51
a663 31
specially.
There are three methods of quoting: First, \fB\e\fP quotes
the following character, unless it is at the end of a line, in which
case both the \fB\e\fP and the newline are stripped.
Second, a single quote (\fB'\fP) quotes everything up to the next single
quote (this may span lines).
Third, a double quote (\fB"\fP) quotes all characters,
except \fB$\fP, \fB`\fP and \fB\e\fP, up to the next unquoted double quote.
\fB$\fP and \fB`\fP inside double quotes have their usual meaning (\fIi.e.\fP,
parameter, command or arithmetic substitution) except no field splitting
is carried out on the results of double-quoted substitutions.
If a \fB\e\fP inside a double-quoted string is followed by \fB\e\fP, \fB$\fP,
\fB`\fP or \fB"\fP, it is replaced by the second character; if it is
followed by a newline, both the \fB\e\fP and the newline are stripped;
otherwise, both the \fB\e\fP and the character following are unchanged.
.PP
Note: see POSIX Mode below for a special rule regarding sequences
of the form \fB"\fP...\fB`\fP...\fB\e"\fP...\fB`\fP..\fB"\fP.
.\"}}}
.\"{{{  Aliases
.SS "Aliases"
There are two types of aliases: normal command aliases and tracked
aliases.  Command aliases are normally used as a short hand for a long
or often used command.  The shell expands command aliases (\fIi.e.\fP,
substitutes the alias name for its value) when it reads the first word
of a command.  An expanded alias is re-processed to check for more
aliases.  If a command alias ends in a space or tab, the following word
is also checked for alias expansion.  The alias expansion process stops
when a word that is not an alias is found, when a quoted word is found
or when an alias word that is currently being expanded is found.
.PP
d665 8
a672 8
.ft B
.RS
hash='alias \-t'
.br
type='whence \-v'
.RE
.ft P
.PP
d674 39
a712 24
command.  The first time the shell does a path search for a command that
is marked as a tracked alias, it saves the full path of the command.
The next time the command is executed, the shell checks the saved path
to see that it is still valid, and if so, avoids repeating the path
search.  Tracked aliases can be listed and created using \fBalias
\-t\fP.  Note that changing the \fBPATH\fP parameter clears the saved
paths for all tracked aliases.  If the \fBtrackall\fP option is set (\fIi.e.\fP,
\fBset \-o trackall\fP or \fBset \-h\fP), the shell tracks all
commands.  This option is set automatically for non-interactive shells.
For interactive shells, only the following commands are automatically
tracked: \fBcat\fP, \fBcc\fP, \fBchmod\fP, \fBcp\fP, \fBdate\fP, \fBed\fP,
\fBemacs\fP, \fBgrep\fP, \fBls\fP, \fBmail\fP, \fBmake\fP, \fBmv\fP,
\fBpr\fP, \fBrm\fP, \fBsed\fP, \fBsh\fP, \fBvi\fP and \fBwho\fP.
.\"}}}
.\"{{{  Substitution
.SS "Substitution"
The first step the shell takes in executing a simple-command is to
perform substitutions on the words of the command.
There are three kinds of substitution: parameter, command and arithmetic.
Parameter substitutions, which are described in detail in the next section,
take the form \fB$name\fP or \fB${\fP...\fB}\fP; command substitutions take
the form \fB$(\fP\fIcommand\fP\fB)\fP or \fB`\fP\fIcommand\fP\fB`\fP;
and arithmetic substitutions take the form \fB$((\fP\fIexpression\fP\fB))\fP.
.PP
d715 51
a765 21
the current value of the \fBIFS\fP parameter.
The \fBIFS\fP parameter specifies a list of characters which 
are used to break a string up into several words;
any characters from the set space, tab and newline that appear in the
IFS characters are called \fIIFS white space\fP.
Sequences of one or more IFS white space characters, in combination with
zero or one non-IFS white space characters delimit a field.
As a special case, leading and trailing IFS white space is stripped (\fIi.e.\fP,
no leading or trailing empty field is created by it); leading or trailing
non-IFS white space does create an empty field.
.PP
Example: if \fBIFS\fP is set to `<space>:', and VAR is set to 
`<space>A<space>:<space><space>B::D', the substitution for $VAR results
in four fields: `A', `B', `' and `D'.
Note that if the \fBIFS\fP parameter is set to the null string, no
field splitting is done; if the parameter is unset, the default value
of space, tab and newline is used.
.PP
Also, note that the field splitting applies only to immediate result of
the substitution.  Using the previous example, the substitution for $VAR:E
results in the fields: `A', `B', `' and `D:E', not `A', `B', `', `D' and `E'.
d768 7
a774 6
substitution or use \fBIFS\fP\ as a general whitespace delimiter.
.PP
The results of substitution are, unless otherwise specified, also subject
to brace expansion and file name expansion (see the relevant sections
below).
.PP
d776 185
a960 94
command, which is run in a subshell.
For \fB$(\fP\fIcommand\fP\fB)\fP substitutions, normal quoting rules
are used when \fIcommand\fP is parsed, however, for the
\fB`\fP\fIcommand\fP\fB`\fP form, a \fB\e\fP followed by any of
\fB$\fP, \fB`\fP or \fB\e\fP is stripped (a \fB\e\fP followed by any other
character is unchanged).
As a special case in command substitutions, a command of the form
\fB<\fP \fIfile\fP is interpreted to mean substitute the contents
of \fIfile\fP ($(< foo) has the same effect as $(cat foo), but it
is carried out more efficiently because no process is started).
.br
.\"todo: fix this( $(..) parenthesis counting).
NOTE: \fB$(\fP\fIcommand\fP\fB)\fP expressions are currently parsed by
finding the matching parenthesis, regardless of quoting.  This will hopefully
be fixed soon.
.PP
Arithmetic substitutions are replaced by the value of the specified
expression.
For example, the command \fBecho $((2+3*4))\fP prints 14.
See Arithmetic Expressions for a description of an \fIexpression\fP.
.\"}}}
.\"{{{  Parameters
.SS "Parameters"
Parameters are shell variables; they can be assigned values and
their values can be accessed using a parameter substitution.
A parameter name is either one of the special single punctuation or digit
character parameters described below, or a letter followed by zero or more
letters or digits (`_' counts as a letter).
Parameter substitutions take the form \fB$\fP\fIname\fP or
\fB${\fP\fIname\fP\fB}\fP, where \fIname\fP is a parameter name.
If substitution is performed on a parameter that is not set, a null
string is substituted unless the \fBnounset\fP option (\fBset \-o nounset\fP
or \fBset \-u\fP) is set, in which case an error occurs.
.PP
.\"{{{  parameter assignment
Parameters can be assigned values in a number of ways.
First, the shell implicitly sets some parameters like \fB#\fP, \fBPWD\fP,
etc.; this is the only way the special single character parameters are
set.
Second, parameters are imported from the shell's environment at startup.
Third, parameters can be assigned values on the command line, for example,
`\fBFOO=bar\fP' sets the parameter FOO to bar; multiple parameter
assignments can be given on a single command line and they can
be followed by a simple-command, in which case the assignments are
in effect only for the duration of the command (such assignments are
also exported, see below for implications of this).
Note that both the parameter name and the \fB=\fP must be unquoted for
the shell to recognize a parameter assignment.
The fourth way of setting a parameter is with the \fBexport\fP, \fBreadonly\fP
and \fBtypeset\fP commands; see their descriptions in the Command Execution
section.
Fifth, \fBfor\fP and \fBselect\fP loops set parameters as well as
the \fBgetopts\fP, \fBread\fP and \fBset \-A\fP commands.
Lastly, parameters can be assigned values using assignment operators
inside arithmetic expressions (see Arithmetic Expressions below) or
using the \fB${\fP\fIname\fP\fB=\fP\fIvalue\fP\fB}\fP form
of parameter substitution (see below).
.\"}}}
.PP
.\"{{{  environment
Parameters with the export attribute (set using the \fBexport\fP or
\fBtypeset \-x\fP commands, or by parameter assignments followed by simple
commands) are put in the environment (see \fIenviron\fP(5)) of commands
run by the shell as \fIname\fP\fB=\fP\fIvalue\fP pairs.
The order in which parameters appear in the environment of a command
is unspecified.
When the shell starts up, it extracts parameters and their values from its
environment and automatically sets the export attribute for those parameters.
.\"}}}
.\"{{{  ${name[:][-+=?]word}
.PP
Modifiers can be applied to the \fB${\fP\fIname\fP\fB}\fP form of parameter
substitution:
.IP \fB${\fP\fIname\fP\fB:-\fP\fIword\fP\fB}\fP
if \fIname\fP is set and not null, it is substituted, otherwise \fIword\fP is
substituted.
.IP \fB${\fP\fIname\fP\fB:+\fP\fIword\fP\fB}\fP
if \fIname\fP is set and not null, \fIword\fP is substituted, otherwise nothing is substituted.
.IP \fB${\fP\fIname\fP\fB:=\fP\fIword\fP\fB}\fP
if \fIname\fP is set and not null, it is substituted, otherwise it is
assigned \fIword\fP and the resulting value of \fIname\fP is substituted.
.IP \fB${\fP\fIname\fP\fB:?\fP\fIword\fP\fB}\fP
if \fIname\fP is set and not null, it is substituted, otherwise \fIword\fP
is printed on standard error (preceded by \fIname\fP:) and an error occurs
(normally causing termination of a shell script, function or \&.-script).
If word is omitted the string `parameter null or not set' is used instead.
.PP
In the above modifiers, the \fB:\fP can be omitted, in which case the
conditions only depend on \fIname\fP being set (as opposed to set and
not null).
If \fIword\fP is needed, parameter, command, arithmetic and tilde substitution
are performed on it; if \fIword\fP is not needed, it is not evaluated.
.\"}}}
.PP
d962 39
a1000 24
.\"{{{  ${#name}
.IP \fB${#\fP\fIname\fP\fB}\fP
The number of positional parameters if \fIname\fP is \fB*\fP, \fB@@\fP or
is not specified,
or the length of the string value of parameter \fIname\fP.
.\"}}}
.\"{{{  ${#name[*]}, ${#name[@@]}
.IP "\fB${#\fP\fIname\fP\fB[*]}\fP, \fB${#\fP\fIname\fP\fB[@@]}\fP"
The number of elements in the array \fIname\fP.
.\"}}}
.\"{{{  ${name#pattern}, ${name##pattern}
.IP "\fB${\fP\fIname\fP\fB#\fP\fIpattern\fP\fB}\fP, \fB${\fP\fIname\fP\fB##\fP\fIpattern\fP\fB}\fP"
If \fIpattern\fP matches the beginning of the value of parameter \fIname\fP,
the matched text is deleted from the result of substitution.  A single
\fB#\fP results in the shortest match, two \fB#\fP's results in the
longest match.
.\"}}}
.\"{{{  ${name%pattern}, ${name%%pattern}
.IP "\fB${\fP\fIname\fP\fB%\fP\fIpattern\fP\fB}\fP, \fB${\fP\fIname\fP\fB%%\fP\fIpattern\fP\fB}\fP"
Like \fB${\fP..\fB#\fP..\fB}\fP substitution, but it deletes from the end of the
value.
.\"}}}
.\"{{{  special shell parameters
.PP
d1003 60
a1062 62
.\"{{{  !
.IP \fB!\fP
Process id of the last background process started.  If no background
processes have been started, the parameter is not set.
.\"}}}
.\"{{{  #
.IP \fB#\fP
The number of positional parameters (\fIi.e.\fP, \fB$1\fP, \fB$2\fP,
\fIetc.\fP).
.\"}}}
.\"{{{  $
.IP \fB$\fP
The process ID of the shell, or the PID of the original shell if
it is a subshell.
.\"}}}
.\"{{{  -
.IP \fB\-\fP
The concatenation of the current single letter options
(see \fBset\fP command below for list of options).
.\"}}}
.\"{{{  ?
.IP \fB?\fP
The exit status of the last non-asynchronous command executed.
If the last command was killed by a signal, \fB$?\fP is set to 128 plus
the signal number.
.\"}}}
.\"{{{  0
.IP "\fB0\fP"
The name the shell was invoked with (\fIi.e.\fP, \fBargv[0]\fP), or the
\fBcommand-name\fP if it was invoked with the \fB\-c\fP option and the
\fBcommand-name\fP was supplied, or the \fIfile\fP argument, if it was
supplied.
If the \fBposix\fP option is not set, \fB$0\fP is the name of the current
function or script.
.\"}}}
.\"{{{  1-9
.IP "\fB1\fP ... \fB9\fP"
The first nine positional parameters that were supplied to the shell,
function or \fB.\fP-script.
Further positional parameters may be accessed using
\fB${\fP\fInumber\fP\fB}\fP.
.\"}}}
.\"{{{  *
.IP \fB*\fP
All positional parameters (except parameter 0), 
\fIi.e.\fP, \fB$1 $2 $3\fP....
If used outside of double quotes, parameters are separate words
(which are subjected to word splitting); if used within double quotes,
parameters are separated by the first character of the \fBIFS\fP parameter
(or the empty string if \fBIFS\fP is null).
.\"}}}
.\"{{{  @@
.IP \fB@@\fP
Same as \fB$*\fP, unless it is used inside double quotes, in which case
a separate word is generated for each positional parameter \- if there
are no positional parameters, no word is generated ("$@@" can be used
to access arguments, verbatim, without loosing null arguments or
splitting arguments with spaces).
.\"}}}
.\"}}}
.\"{{{  general shell parameters
.PP
d1064 78
a1141 78
.\"{{{  CDPATH
.IP \fBCDPATH\fP
Search path for the \fBcd\fP built-in command.  Works the same way as
\fBPATH\fP for those directories not beginning with \fB/\fP in \fBcd\fP
commands.
Note that if CDPATH is set and does not contain \fB.\fP nor an empty path,
the current directory is not searched.  Also, the \fBcd\fP built-in command
will display the resulting directory when a match is found in any search path
other than the than the empty path.
.\"}}}
.\"{{{  COLUMNS
.IP \fBCOLUMNS\fP
Set to the number of columns on the terminal or window.
Currently set to the \fBcols\fP value as reported by \fIstty\fP(1) if that
value is non-zero.
This parameter is used by the interactive line editing modes, and by
\fBselect\fP, \fBset \-o\fP and \fBkill \-l\fP commands
to format information in columns.
.\"}}}
.\"{{{  EDITOR
.\"}}}
.\"{{{  ENV
.IP \fBENV\fP
If this parameter is found to be set after any profile files are
executed, the expanded value is used as a shell start-up file.  It
typically contains function and alias definitions.
.\"}}}
.\"{{{  ERRNO
.IP \fBERRNO\fP
Integer value of the shell's errno variable \(em indicates the reason
the last system call failed.
.\" todo: ERRNO variable
.sp
Not implemented yet.
.\"}}}
.\"{{{  EXECSHELL
.IP \fBEXECSHELL\fP
If set, this parameter is assumed to contain the shell that is to be
used to execute commands that \fIexecve\fP(2) fails to execute and
which do not start with a `\fB#!\fP \fIshell\fP' sequence.
.\"}}}
.\"{{{  FCEDIT
.IP \fBFCEDIT\fP
The editor used by the \fBfc\fP command (see below).
.\"}}}
.\"{{{  FPATH
.IP \fBFPATH\fP
Like \fBPATH\fP, but used when an undefined function is executed to locate
the file defining the function.
It is also searched when a command can't be found using \fBPATH\fP.
See Functions below for more information.
.\"}}}
.\"{{{  HISTFILE
.\"}}}
.\"{{{  HISTSIZE
.\"}}}
.\"{{{  HOME
.IP \fBHOME\fP
The default directory for the \fBcd\fP command and the value
substituted for an unqualified \fB~\fP (see Tilde Expansion below).
.\"}}}
.\"{{{  IFS
.IP \fBIFS\fP
Internal field separator, used during substitution and by the \fBread\fP
command, to split values into distinct arguments; normally set to
space, tab and newline.  See Substitution above for details.
.br
\fBNote:\fP this parameter is not imported from the environment
when the shell is started.
.\"}}}
.\"{{{  KSH_VERSION
.\"}}}
.\"{{{  SH_VERSION
.IP \fBSH_VERSION\fP
The version of shell and the date the version was created (readonly).
.\"}}}
.\"{{{  LINENO
.IP \fBLINENO\fP
d1143 131
a1273 145
executed.
.\" todo: LINENO variable
.sp
Not implemented yet.
.\"}}}
.\"{{{  LINES
.IP \fBLINES\fP
Set to the number of lines on the terminal or window.
.\"Currently set to the \fBrows\fP value as reported by \fIstty\fP(1) if that
.\"value is non-zero.
.\" todo: LINES variable
.sp
Not implemented yet.
.\"}}}
.\"{{{  MAIL
.\"}}}
.\"{{{  MAILCHECK
.\"}}}
.\"{{{  MAILPATH
.\"}}}
.\"{{{  OLDPWD
.IP \fBOLDPWD\fP
The previous working directory.
Unset if \fBcd\fP has not successfully changed directories since the
shell started, or if the shell doesn't know where it is.
.\"}}}
.\"{{{  OPTARG
.IP \fBOPTARG\fP
When using \fBgetopts\fP, it contains the argument for a parsed option,
if it requires one.
.\"}}}
.\"{{{  OPTIND
.IP \fBOPTIND\fP
The index of the last argument processed when using \fBgetopts\fP.
Assigning 1 to this parameter causes \fBgetopts\fP to
process arguments from the beginning the next time it is invoked.
.\"}}}
.\"{{{  PATH
.IP \fBPATH\fP
A colon separated list of directories that are searched when looking
for commands and \fB.\fP'd files.
An empty string resulting from a leading or trailing colon, or two adjacent
colons is treated as a `.', the current directory.
.\"}}}
.\"{{{  POSIXLY_CORRECT
.IP \fBPOSIXLY_CORRECT\fP
If set, this parameter causes the \fBposix\fP option to be enabled.
See POSIX Mode below.
.\"}}}
.\"{{{  PPID
.IP \fBPPID\fP
The process ID of the shell's parent (readonly).
.\"}}}
.\"{{{  PS1
.IP \fBPS1\fP
\fBPS1\fP is the primary prompt for interactive shells.
The prompt is printed verbatim (\fIi.e.\fP, no substitutions are done).
Default is `\fB$\ \fP' for non-root users, `\fB#\ \fP' for root..
.\"}}}
.\"{{{  PS2
.IP \fBPS2\fP
Secondary prompt string, by default `\fB>\fP ', used when more input is
needed to complete a command.
.\"}}}
.\"{{{  PS3
.\"}}}
.\"{{{  PS4
.IP \fBPS4\fP
Used to prefix commands that are printed during execution tracing
(see \fBset \-x\fP command below).
The prompt is printed verbatim (\fIi.e.\fP, no substitutions are done).
Default is `\fB+\ \fP'.
.\"}}}
.\"{{{  PWD
.IP \fBPWD\fP
The current working directory.  Maybe unset or null if shell doesn't
know where it is.
.\"}}}
.\"{{{  RANDOM
.\"}}}
.\"{{{  REPLY
.IP \fBREPLY\fP
Default parameter for the \fBread\fP command if no names are given.
Also used in \fBselect\fP loops to store the value that is read from
standard input.
.\"}}}
.\"{{{  SECONDS
.\"}}}
.\"{{{  TMOUT
.\"}}}
.\"{{{  TMPDIR
.IP \fBTMPDIR\fP
The directory shell temporary files are created in.  If this parameter
is not set, or does not contain the absolute path of a writable
directory, temporary files are created in \fB/tmp\fP.
.\"}}}
.\"{{{  VISUAL
.\"}}}
.\"}}}
.\"}}}
.\"{{{  Tilde Expansion
.SS "Tilde Expansion"
Tilde expansion, which is done in parallel with parameter substitution,
is done on words starting with an unquoted \fB~\fP.  The characters
following the tilde, up to the first \fB/\fP, if any, are assumed to be
a login name.  If the login name is empty, \fB+\fP or \fB\-\fP, the
value of the \fBHOME\fP, \fBPWD\fP, or \fBOLDPWD\fP parameter is
substituted, respectively.  Otherwise, the password file is searched for
the login name, and the tilde expression is substituted with the
user's home directory.  If the login name is not found in the password
file or if any quoting or parameter substitution occurs in the login name,
no substitution is performed.
.PP
In parameter assignments (those preceding a simple-command or those
occurring in the arguments of \fBalias\fP, \fBexport\fP, \fBreadonly\fP,
and \fBtypeset\fP), tilde expansion is done after any unquoted colon
(\fB:\fP), and login names are also delimited by colons.
.PP
The home directory of previously expanded login names are cached and
re-used.  The \fBalias \-d\fP command may be used to list, change and
add to this cache (\fIe.g.\fP, `alias \-d fac=/usr/local/facilities; cd
~fac/bin').
.\"}}}
.\"{{{  Brace Expansion
.\"}}}
.\"{{{  File Name Patterns
.SS "File Name Patterns"
.PP
A file name pattern is a word containing one or more unquoted \fB?\fP or
\fB*\fP characters or \fB[\fP..\fB]\fP sequences.  Once brace expansion has
been performed, the shell replaces file name patterns with the sorted names
of all the files that match the pattern (if no files match, the word is
left unchanged).  The pattern elements have the following meaning:
.IP \fB?\fP
matches any single character.
.IP \fB*\fP
matches any sequence of characters.
.IP \fB[\fP..\fB]\fP
matches any of the characters inside the brackets.  Ranges of characters
can be specified by separating two characters by a \fB\-\fP, \fIe.g.\fP,
\fB[a0\-9]\fP matches the letter \fBa\fP or any digit.
In order to represent itself, a
\fB\-\fP must either be quoted or the first or last character in the character
list.  Similarly, a \fB]\fP must be quoted or the first character in the list
if it is represent itself instead of the end of the list.  Also, a \fB!\fP
d1276 75
a1350 38
.IP \fB[!\fP..\fB]\fP
like \fB[\fP..\fB]\fP, except it matches any character not inside the brackets.
.PP
Note that pdksh currently never matches \fB.\fP and \fB..\fP, but the original
ksh, Bourne sh and bash do, so this may have to change (too bad).
.PP
Note that none of the above pattern elements match either a period (\fB.\fP)
at the start of a file name or a slash (\fB/\fP), even if they are explicitly
used in a \fB[\fP..\fB]\fP sequence; also, the names \fB.\fP and \fB..\fP
are never matched, even by the pattern \fB.*\fP.
.PP
If the \fBmarkdirs\fP option is set, any directories that result from
file name generation are marked with a trailing \fB/\fP.
.PP
.\" todo: implement this ([[:alpha:]], \fIetc.\fP)
The POSIX character classes (\fIi.e.\fP,
\fB[:\fP\fIclass-name\fP\fB:]\fP inside a \fB[\fP..\fB]\fP expression)
are not yet implemented.
.\"}}}
.\"{{{  Input/Output Redirection
.SS "Input/Output Redirection"
When a command is executed, its standard input, standard output and
standard error (file descriptors 0, 1 and 2, respectively) are normally
inherited from the shell.
Three exceptions to this are commands in pipelines, for which standard input
and/or standard output are those set up by the pipeline, asynchronous commands
created when job control is disabled, for which standard input is initially
set to be from \fB/dev/null\fP, and commands for which any of the following
redirections have been specified:
.IP "\fB>\fP \fIfile\fP"
standard output is redirected to \fIfile\fP.  If \fIfile\fP does not exist,
it is created; if it does exist, is a regular file and the \fBnoclobber\fP
option is set, an error occurs, otherwise the file is truncated.
Note that this means the command \fIcmd < foo > foo\fP will open
\fIfoo\fP for reading and then truncate it when it opens it for writing,
before \fIcmd\fP gets a chance to actually read \fIfoo\fP.
.IP "\fB>|\fP \fIfile\fP"
same as \fB>\fP, except the file is truncated, even if the \fBnoclobber\fP
d1352 73
a1424 45
.IP "\fB>>\fP \fIfile\fP"
same as \fB>\fP, except the file an existing file is appended to instead
of being truncated.  Also, the file is opened in append mode, so writes
always go to the end of the file (see \fIopen\fP(2)).
.IP "\fB<\fP \fIfile\fP"
standard input is redirected from \fIfile\fP, which is opened for reading.
.IP "\fB<>\fP \fIfile\fP"
same as \fB<\fP, except the file is opened for reading and writing.
.IP "\fB<<\fP \fImarker\fP"
after reading the command line containing this kind of redirection (called a
here document), the shell copies lines from the command source into a temporary
file until a line matching \fImarker\fP is read.
When the command is executed, standard input is redirected from the temporary
file.
If \fImarker\fP contains no quoted characters, the contents of the
temporary file are processed as if enclosed in double quotes each time
the command is executed, so parameter, command and arithmetic substitutions
are performed, along with backslash (\fB\e\fP) escapes for
\fB$\fP, \fB`\fP, \fB\e\fP and \fB\enewline\fP.
If multiple here documents are used on the same command line, they are
saved in order.
.IP "\fB<<-\fP \fImarker\fP"
same as \fB<<\fP, except leading tabs are stripped from lines in the
here document.
.IP "\fB<&\fP \fIfd\fP"
standard input is duplicated from file descriptor \fIfd\fP.
\fIfd\fP can be a single digit, indicating the number of an existing
file descriptor, the letter \fBp\fP, indicating the file descriptor
associated with the output of the current co-process, or
the character \fB\-\fP, indicating standard input is to be closed.
.IP "\fB>&\fP \fIfd\fP"
same as \fB<&\fP, except the operation is done on standard output.
.PP
In any of the above redirections, the file descriptor that is redirected
(\fIi.e.\fP, standard input or standard output) can be explicitly given by
preceding the redirection with a single digit.
Parameter, command and arithmetic substitutions, tilde substitutions and
(if the shell is interactive) file name generation are all performed
on the \fIfile\fP, \fImarker\fP and \fIfd\fP arguments of redirections.
Note however, that the results of any file name generation are only used
if a single file is matched; if multiple files match, the word with the
unexpanded file name generation characters is used.
Note that in restricted shells, redirections which can create files cannot
be used.
.PP
d1426 10
a1435 7
compound-commands (\fBif\fP statements, \fIetc.\fP), any redirections must
appear at the end.
Redirections are processed after pipelines are created and in the order they
are given, so
.RS
\fBcat /foo/bar 2>&1 > /dev/null | cat \-n\fP
.RE
d1437 17
a1453 13
.\"}}}
.\"{{{  Arithmetic Expressions
.SS "Arithmetic Expressions"
Integer arithmetic expressions can be used
inside \fB$((\fP..\fB))\fP expressions,
inside array references (\fIe.g.\fP, \fIname\fP\fB[\fP\fIexpr\fP\fB]\fP),
as numeric arguments to the \fBtest\fP command,
and as the value of an assignment to an integer parameter.
.PP
Expression may contain alpha-numeric parameter identifiers, array
references, and integer constants and may be combined with the
following C operators (listed and grouped in increasing order of precedence).
.TP
d1455 5
a1459 2
\fB+ \- ! ~ ++ --\fP
.TP
d1461 35
a1495 27
\fB,\fP
.br
\fB= *= /= %= += \-= <<= >>= &= ^= |=\fP
.br
\fB||\fP
.br
\fB&&\fP
.br
\fB|\fP
.br
\fB^\fP
.br
\fB&\fP
.br
\fB== !=\fP
.br
\fB< <= >= >\fP
.br
\fB<< >>\fP
.br
\fB+ \-\fP
.br
\fB* / %\fP
.TP
Ternary operator:
\fB?:\fP (precedence is immediately higher than assignment)
.TP
d1497 5
a1501 2
\fB( )\fP
.PP
d1503 7
a1509 3
\fIbase\fP\fB#\fP\fInumber\fP, where \fIbase\fP is a decimal integer specifying
the base, and \fInumber\fP is a number in the specified base.
.LP
d1511 136
a1646 97
.RS
.IP "unary \fB+\fP"
result is the argument (included for completeness).
.IP "unary \fB\-\fP"
negation.
.IP "\fB!\fP"
logical not; the result is 1 if argument is zero, 0 if not.
.IP "\fB~\fP"
arithmetic (bit-wise) not.
.IP "\fB++\fP"
increment; must be applied to a parameter (not a literal or other
expression) - the parameter is incremented by 1.
When used as a prefix operator, the result is the incremented value of
the parameter, when used as a postfix operator, the result is the
original value of the parameter.
.IP "\fB++\fP"
similar to \fB++\fP, except the paramter is decremented by 1.
.IP "\fB,\fP"
separates two arithmetic expressions; the left hand side is evaluated first,
then the right.  The result is value of the expression on the right hand side.
.IP "\fB=\fP"
assignment; variable on the left is set to the value on the right.
.IP "\fB*= /= %= += \-= <<= >>= &= ^= |=\fP"
assignment operators; \fI<var> <op>\fP\fB=\fP \fI<expr>\fP is the same as
\fI<var>\fP \fB=\fP \fI<var> <op>\fP \fB(\fP \fI<expr>\fP \fB)\fP.
.IP "\fB||\fP"
logical or; the result is 1 if either argument is non-zero, 0 if not.
The right argument is evaluated only if the left argument is zero.
.IP "\fB&&\fP"
logical and; the result is 1 if both arguments are non-zero, 0 if not.
The right argument is evaluated only if the left argument is non-zero.
.IP "\fB|\fP"
arithmetic (bit-wise) or.
.IP "\fB^\fP"
arithmetic (bit-wise) exclusive-or.
.IP "\fB&\fP"
arithmetic (bit-wise) and.
.IP "\fB==\fP"
equal; the result is 1 if both arguments are equal, 0 if not.
.IP "\fB!=\fP"
not equal; the result is 0 if both arguments are equal, 1 if not.
.IP "\fB<\fP"
less than; the result is 1 if the left argument is less than the right,
0 if not.
.IP "\fB<= >= >\fP"
less than or equal, greater than or equal, greater than.  See <.
.IP "\fB<< >>\fP"
shift left (right); the result is the left argument with its bits shifted
left (right) by the amount given in the right argument.
.IP "\fB+ - * /\fP"
addition, subtraction, multiplication, and division.
.IP "\fB%\fP"
remainder; the result is the remainder of the division of the left argument
by the right.  The sign of the result is unspecified if either argument
is negative.
.IP "\fI<arg1>\fP \fB?\fP \fI<arg2>\fP \fB:\fP \fI<arg3>\fP"
if \fI<arg1>\fP is non-zero, the result is \fI<arg2>\fP,
otherwise \fI<arg3>\fP.
.RE
.\"}}}
.\"{{{  Co-Processes
.\"}}}
.\"{{{  Functions
.SS "Functions"
Functions are defined using either Korn shell \fBfunction\fP \fIname\fP
syntax or the Bourne/POSIX shell \fIname\fP\fB()\fP syntax
(see below for the difference between the two forms).
Functions are like \fB.\fP-scripts in that they are executed in
the current environment, however, unlike \fB.\fP-scripts, shell arguments
(\fIi.e.\fP, positional parameters, \fB$1\fP, \fIetc.\fP) are never visible
inside them.
When the shell is determining the location of a command, functions are
searched after special built-in commands, and before regular and non-regular
built-ins, and before the \fBPATH\fP is searched.
.PP
An existing function may be deleted using \fBunset \-f\fP \fIfunction-name\fP.
A list of functions can be obtained using \fBtypeset +f\fP and the
function definitions can be listed using \fBtypeset \-f\fP.
\fBautoload\fP (which is an alias for \fBtypeset \-fu\fP) may be used to
create undefined functions; when an undefined function is executed, the
shell searches the path specified in the \fBFPATH\fP parameter for a file
with the same name as the function, which, if found is read and executed.
If after executing the file, the named function is found to be defined, the
function is executed, otherwise, the normal command search is continued
(\fIi.e.\fP, the shell searches the regular built-in command table
and \fBPATH\fP).
Note that if a command is not found using \fBPATH\fP, an attempt is
made to autoload a function using \fBFPATH\fP (this is an undocumented
feature of the original Korn shell).
.PP
Functions can have two attributes, trace and export, which can be set
with \fBtypeset \-ft\fP and \fBtypeset \-fx\fP, respectively.
When a traced function is executed, the shell's \fBxtrace\fP option is turned
on for the functions duration, otherwise the \fBxtrace\fP option is turned off.
The export attribute of functions is currently not used.  In the original
Korn shell, exported functions are visible to shell scripts that are executed.
.PP
d1649 38
a1686 32
If this is not the desired effect, the \fBtypeset\fP command can be used
inside a function to create a local parameter.
Note that special parameters (\fIe.g.\fP, \fB$$\fP, \fB$!\fP) can't be
scoped in this way.
.PP
The exit status of a function is that of the last command executed in
the function.
A function can be made to finish immediately using the \fBreturn\fP command;
this may also be used to explicitly specify the exit status.
.PP
Functions defined with the \fBfunction\fP reserved word are
treated differently in the following ways from functions defined with
the \fB()\fP notation:
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
the \fB$0\fP parameter is set to the name of the function
(Bourne-style functions leave \fB$0\fP untouched).
.IP \ \ \(bu
parameter assignments preceeding function calls are not kept in
the shell environment
(executing Bourne-style functions will keep assignments).
.IP \ \ \(bu
\fBOPTIND\fP is saved/reset and restored on entry and exit from the function
so \fBgetopts\fP can be used properly both inside and outside the function
(Bourne-style functions leave \fBOPTIND\fP untouched, so using \fBgetopts\fP
inside a function interferes with using \fBgetopts\fP outside the function).
.nr PD \n(P2
In the future, the following differences will also be added:
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
d1688 4
a1691 5
functions.
This will mean that traps set inside a function will not affect the shell's
traps and signals that are not ignored in the shell (but may be trapped) will
have their default effect in a function.
.IP \ \ \(bu
d1694 3
a1696 4
.nr PD \n(P2
.\"}}}
.\"{{{  POSIX mode
.SS "POSIX Mode"
d1698 43
a1740 23
behaviour is contrary either to the original Korn shell behaviour or to
user convenience.
How the shell behaves in these cases is determined by the state of
the posix option (\fBset \-o posix\fP) \(em if it is on, the POSIX behaviour
is followed, otherwise it is not.
The \fBposix\fP option is set automatically when the shell starts up
if the environment contains the \fBPOSIXLY_CORRECT\fP parameter.
(The shell can also be compiled so that it is in POSIX mode by default,
however this is usually not desirable).
.PP
The following is a list of things that are affected by the state of
the \fBposix\fP option:
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
reading of \fB$ENV\fP: if not in posix mode, the \fBENV\fP parameter
is not expanded and included when the shell starts.
.IP \ \ \(bu
\fB\e"\fP inside double quoted \fB`\fP..\fB`\fP command substitutions:
in posix mode, the \fB\e"\fP is interpreted when the command is interpreted;
in non-posix mode, the backslash is stripped before the command substitution
is interpreted.  For example, \fBecho "`echo \e"hi\e"`"\fP produces `"hi"' in
posix mode, `hi' in non-posix mode.  To avoid problems, use the \fB$(...\fP)
d1742 96
a1837 60
.IP \ \ \(bu
\fBkill \-l\fP output: in posix mode, signal names are listed one a single line;
in non-posix mode, signal numbers, names and descriptions are printed in
columns.
In future, a new option (\fB\-v\fP perhaps) will be added to distinguish
the two behaviours.
.IP \ \ \(bu
\fBfg\fP exit status: in posix mode, the exit status is 0 if no errors occur;
in non-posix mode, the exit status is that of the last foregrounded job.
.IP \ \ \(bu
\fBgetopts\fP: in posix mode, options must start with a \fB\-\fP; in non-posix
mode, options can start with either \fB\-\fP or \fB+\fP.
.IP \ \ \(bu
brace expansion (also known as alternation): in posix mode, brace expansion
is disabled; in non-posix mode, brace expansion enabled.
Note that \fBset \-o posix\fP (or setting the \fBPOSIXLY_CORRECT\fP parameter)
automatically turns the \fBbraceexpand\fP option off, however it can be
explicitly turned on later.
.IP \ \ \(bu
\fBset \-\fP: in posix mode, this does not clear the \fBverbose\fP or
\fBxtrace\fP options; in non-posix mode, it does.
.IP \ \ \(bu
\fBset\fP exit status: in posix mode, the exit status of set is 0
if there are no errors; in non-posix mode, the exit status is that of
any command substitutions performed in generating the set command.
For example, `\fBset \-\- `false`; echo $?\fP' prints 0 in posix mode,
1 in non-posix mode.  This construct is used in most shell scripts that
use the old \fIgetopt\fP(1) command.
.IP \ \ \(bu
argument expansion of \fBalias\fP, \fBexport\fP, \fBreadonly\fP, and
\fBtypeset\fP commands: in posix mode, normal argument expansion done;
in non-posix mode, field splitting, file globing, brace expansion and
(normal) tilde expansion are turned off, and assignment tilde expansion
is turned on.
.IP \ \ \(bu
signal specification: in posix mode, signals can be specified as digits only
if signal numbers match POSIX values (\fIi.e.\fP, HUP=1, INT=2, QUIT=3, ABRT=6,
KILL=9, ALRM=14, and TERM=15); in non-posix mode, signals can be always digits.
.IP \ \ \(bu
alias expansion: in posix mode, alias expansion is only carried out when
reading command words; in non-posix mode, alias expansion is carried out
on any word following an alias that ended in a space.
For example, the following for loop
.RS
.ft B
alias a='for ' i='j'
.br
a i in 1 2; do echo i=$i j=$j; done
.ft P
.RE
uses parameter \fBi\fP in posix mode, \fBj\fP in non-posix mode.
.IP \ \ \(bu
test: in posix mode, the expression "\fB-t\fP" (preceded by
some number of "\fB!\fP" arguments) is always true as it is a non-zero length
string; in non-posix mode, it tests if file descriptor 1 is a tty (\fIi.e.\fP,
the \fIfd\fP argument to the \fB-t\fP test may be left out and defaults to 1).
.nr PD \n(P2
.\"}}}
.\"{{{  Command Execution (built-in commands)
.SS "Command Execution"
d1839 18
a1856 14
assignments, the type of command is determined: a special built-in,
a function, a regular built-in or the name of a file to execute found
using the \fBPATH\fP parameter.
The checks are made in the above order.
Special built-in commands differ from other commands in that 
the \fBPATH\fP parameter is not used to find them, an error
during their execution can cause a non-interactive shell to exit and
parameter assignments that are specified before the command are
kept after the command completes.
Just to confuse things, if the posix option is turned off (see \fBset\fP
command below) some special commands are very special in that
no field splitting, file globing, brace expansion nor tilde expansion
is preformed on arguments that look like assignments.
Regular built-in commands are different only in that the \fBPATH\fP
d1858 1
a1858 1
.PP
d1861 31
a1891 34
.IP "POSIX special commands"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
\&.	continue	exit	return	trap
:	eval	export	set	unset
break	exec	readonly	shift
.TE
.IP "Additional ksh special commands"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
builtin	times	typeset		
.TE
.IP "Very special commands (non-posix mode)"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
alias	readonly	set	typeset	
.TE
.IP "POSIX regular commands"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
alias	command	fg	kill	umask
bg	false	getopts	read	unalias
cd	fc	jobs	true	wait
.TE
.IP "Additional ksh regular commands"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
[	let	pwd	ulimit	
echo	print	test	whence	
.TE
.PP
In the future, the additional ksh special and regular commands may
be treated differently from the POSIX special and regular commands.
.PP
d1894 87
a1980 60
.PP
The following describes the special and regular built-in commands:
.\"{{{  . file [ arg1 ... ]
.IP "\fB\&.\fP \fIfile\fP [\fIarg1\fP ...]"
Execute the commands in \fIfile\fP in the current environment.
The file is searched for in the directories of \fBPATH\fP.
If arguments are given, the positional parameters may be used to
access them while \fIfile\fP is being executed.
If no arguments are given, the positional parameters are those of the
environment the command is used in.
.\"}}}
.\"{{{  : [ ... ]
.IP "\fB:\fP [ ... ]"
The null command.
Exit status is set to zero.
.\"}}}
.\"{{{  alias [ -d | +-t [ -r ] ] [+-px] [+-] [name1[=value1] ...]
.IP "\fBalias\fP [ \fB\-d\fP | \fB\(+-t\fP [\fB\-r\fP] ] [\fB\(+-px\fP] [\fB\(+-\fP] [\fIname1\fP[\fB=\fP\fIvalue1\fP] ...]"
Without arguments, \fBalias\fP lists all aliases.
For any name without a value, the existing alias is listed.
Any name with a value defines an alias (see Aliases above).
.sp
When listing aliases, one of two formats is used: 
normally, aliases are listed as \fIname\fP\fB=\fP\fIvalue\fP, where
\fIvalue\fP is quoted; if options were preceded with \fB+\fP 
or a lone \fB+\fP is given on the command line, only \fIname\fP
is printed.
In addition, if the \fB\-p\fP option is used, each alias
is prefixed with the string "\fBalias\fP\ ".
.sp
The \fB\-x\fP option sets (\fB+x\fP clears) the export attribute of an alias,
or, if no names are given, lists the aliases with the export attribute
(exporting an alias has no affect).
.sp
The \fB\-x\fP option sets the export attribute of an alias, or, if no
names are given, lists the aliases with the export attribute
(exporting an alias currently has no affect).
.sp
The \fB\-t\fP option indicates that tracked aliases are to be listed/set
(values specified on the command line are ignored for tracked aliases).
The \fB\-r\fP option indicates that all tracked aliases are to be reset.
.sp
The \fB\-d\fP causes directory aliases, which are used in tilde expansion,
to be listed or set (see Tilde Expansion above).
.\"}}}
.\"{{{  bg [job ...]
.IP "\fBbg\fP [\fIjob\fP ...]"
Resume the specified stopped job(s) in the background.
If no jobs are specified, \fB%+\fP is assumed.
This command is only available on systems which support job control.
See Job Control below for more information.
.\"}}}
.\"{{{  bind [-l] [-m] [key[=editing-command] ...]
.IP "\fBbind\fP [\fB\-m\fP] [\fIkey\fP[\fB=\fP\fIediting-command\fP] ...]"
Set or view the current emacs command editing key bindings/macros.
See Emacs Interactive Input Line Editing below for a complete description.
.\"}}}
.\"{{{  break [level]
.IP "\fBbreak\fP [\fIlevel\fP]"
\fBbreak\fP exits the \fIlevel\fPth inner most for, select, until, or while
d1982 118
a2099 74
\fIlevel\fP defaults to 1.
.\"}}}
.\"{{{  builtin command [arg1 ...]
.IP "\fBbuiltin\fP \fIcommand\fP [\fIarg1\fP ...]"
Execute the built-in command \fIcommand\fP.
.\"}}}
.\"{{{  cd [-LP] [dir]
.IP "\fBcd\fP [\fB\-LP\fP] [\fIdir\fP]"
Set the working directory to \fIdir\fP.  If the parameter \fBCDPATH\fP
is set, it lists directories to search in for \fIdir\fP.
\fIdir\fP.  An empty entry in the \fBCDPATH\fP entry means the current
directory.  If a non-empty directory from \fBCDPATH\fP is used, the resulting
full path is printed to standard output.  If \fIdir\fP is found in any
component of the \fBCDPATH\fP search path other than the null path the name
of the new working directory will be written to standard output. If
\fIdir\fP is missing, the home directory \fB$HOME\fP is used.  If \fIdir\fP
is \fB\-\fP, the previous working directory is used (see OLDPWD parameter).
If \fB\-L\fP option (logical path) is used or if the \fBphysical\fP option
(see \fBset\fP command below) isn't set, references to \fB..\fP in \fIdir\fP
are relative to the path used get to the directory.
If \fB\-P\fP option (physical path) is used or if the \fBphysical\fP option
is set, \fB..\fP is relative to the filesystem directory tree.
The \fBPWD\fP and \fBOLDPWD\fP parameters are updated to reflect the
current and old wording directory, respectively.
.\"}}}
.\"{{{  cd [-LP] old new
.IP "\fBcd\fP [\fB\-LP\fP] \fIold new\fP"
The string \fInew\fP is substituted for \fIold\fP in the current
directory, and the shell attempts to change to the new directory.
.\"}}}
.\"{{{  command [ -pvV ] cmd [arg1 ...]
.IP "\fBcommand\fP [\fB\-p\fP] \fIcmd\fP [\fIarg1\fP ...]"
\fIcmd\fP
is executed exactly as if the \fBcommand\fP had not been specified,
with two exceptions: first, \fIcmd\fP cannot be a shell function, and
second, special built-in commands lose their specialness (\fIi.e.\fP,
redirection and utility errors do not cause the shell to exit, and command
assignments are not permanent).
If the \fB\-p\fP option is given, a default search path is used instead of
the current value of \fBPATH\fP (the actual value of the default path is
system dependent: on POSIXish systems, it is the value returned by
.ce
\fBgetconf CS_PATH\fP
).
.sp
.\"}}}
.\"{{{  continue [levels]
.IP "\fBcontinue\fP [\fIlevels\fP]"
\fBcontinue\fP jumps to the beginning of the \fIlevel\fPth inner most for,
select, until, or while loop.
\fIlevel\fP defaults to 1.
.\"}}}
.\"{{{  echo [-neE] [arg ...]
.IP "\fBecho\fP [\fB\-neE\fP] [\fIarg\fP ...]"
Prints its arguments (separated by spaces) followed by a newline, to
standard out.
The newline is suppressed if any of the arguments contain the backslash
sequence \fB\ec\fP.
See \fBprint\fP command below for a list of other backslash sequences
that are recognized.
.sp
The options are provided for compatibility with BSD shell scripts:
\fB\-n\fP suppresses the trailing newline, \fB\-e\fP enables backslash
interpretation (a no-op, since this is normally done), and \fB\-E\fP which
suppresses backslash interpretation.
.\"}}}
.\"{{{  eval command ...
.IP "\fBeval\fP \fIcommand ...\fP"
The arguments are concatenated (with spaces between them) to form
a single string which the shell then parses and executes
in the current environment.
.\"}}}
.\"{{{  exec [command [arg ...]]
.IP "\fBexec\fP [\fIcommand\fP [\fIarg\fP ...]]"
d2101 19
a2119 20
.sp
If no arguments are given, any IO redirection is permanent and the shell
is not replaced.
Any file descriptors which are opened or \fIdup\fP(2)-ed
in this way are made available to other executed commands
(note that the Korn shell differs here: it does not pass on
file descriptors greater than 2).
.\"}}}
.\"{{{  exit [status]
.IP "\fBexit\fP [\fIstatus\fP]"
The shell exits with the specified exit status.
If \fIstatus\fP is not specified, the exit status is the current
value of the \fB?\fP parameter.
.\"}}}
.\"{{{  export [-p] [parameter[=value] ...]
.IP "\fBexport\fP [\fB\-p\fP] [\fIparameter\fP[\fB=\fP\fIvalue\fP]] ..."
Sets the export attribute of the named parameters.
Exported parameters are passed in the environment to executed commands.
If values are specified, the named parameters also assigned.
.sp
d2121 6
a2126 6
attribute are printed one per line, unless the \fB\-p\fP option is used,
in which case \fBexport\fP commands defining all exported
parameters, including their values, are printed.
.\"}}}
.\"{{{  false
.IP "\fBfalse\fP"
d2128 3
a2130 5
.\"}}}
.\"{{{  fc [-e editor | -l [-n]] [-r] [first [ last ]]
.\"}}}
.\"{{{  fc [-e - | -s] [-g] [old=new] [prefix]
.IP "\fBfc\fP [\fB\-e \-\fP | \fB\-s\fP] [\fB\-g\fP] [\fIold\fP\fB=\fP\fInew\fP] [\fIprefix\fP]"
d2132 120
a2251 82
performing the optional substitution of \fIold\fP with \fInew\fP.  If
\fB\-g\fP is specified, all occurrences of \fIold\fP are replaced with
\fInew\fP.  This command is usually accessed with the predefined alias
\fBr='fc \-e \-'\fP.
.\"}}}
.\"{{{  fg [job ...]
.IP "\fBfg\fP [\fIjob\fP ...]"
Resume the specified job(s) in the foreground.
If no jobs are specified, \fB%+\fP is assumed.
This command is only available on systems which support job control.
See Job Control below for more information.
.\"}}}
.\"{{{  getopts optstring name [arg ...]
.IP "\fBgetopts\fP \fIoptstring\fP \fIname\fP [\fIarg\fP ...]"
\fBgetopts\fP is used by shell procedures to parse the specified arguments
(or positional parameters, if no arguments are given) and to check for legal
options.
\fIoptstring\fP contains the option letters that
\fBgetopts\fP is to recognize.  If a letter is followed by a colon, the
option is expected to have an argument.
Options that do not take arguments may be grouped in a single argument.
If an option takes an argument and the option character is not the last
character of the argument it is found in, the remainder of the argument
is taken to be the option's argument, otherwise, the next argument is
the option's argument.
.sp
Each time \fBgetopts\fP is invoked, it places the next option in
the shell parameter \fIname\fP and the index of the next argument to be
processed in the shell parameter \fBOPTIND\fP.
If the option was introduced with a \fB+\fP, the option placed in
\fIname\fP is prefixed with a \fB+\fP.
When an option requires an argument, \fBgetopts\fP places it in the
shell parameter \fBOPTARG\fP.
When an illegal option or a missing option argument is
encountered a question mark or a colon is placed in \fIname\fP
(indicating an illegal option or missing argument, respectively)
and \fBOPTARG\fP is set to the option character that caused the problem.
An error message is also printed to standard error if \fIoptstring\fP
does not begin with a colon.
.sp
When the end of the options is encountered, \fBgetopts\fP exits with a
non-zero exit status.
Options end at the first (non-option argument) argument that does not
start with a \-, or when a \fB\-\-\fP argument is encountered.
.sp
Option parsing can be reset by setting \fBOPTIND\fP to 1 (this is done
automatically whenever the shell or a shell procedure is invoked).
.sp
Warning: Changing the value of the shell parameter \fBOPTIND\fP to
a value other than 1, or parsing different sets of arguments without
resetting \fBOPTIND\fP may lead to unexpected results.
.\"}}}
.\"{{{  hash [-r] [name ...]
.IP "\fBhash\fP [\fB\-r\fP] [\fIname ...\fP]"
Without arguments, any hashed executable command pathnames are listed.
The \fB\-r\fP option causes all hashed commands to be removed
from the hash table.
Each \fIname\fP is searched as if it where a command name and added to the
hash table if it is an executable command.
.\"}}}
.\"{{{  jobs [-lpn] [job ...]
.IP "\fBjobs\fP [\fB\-lpn\fP] [\fIjob\fP ...]"
Display information about the specified jobs; if no jobs are specified,
all jobs are displayed.
The \fB\-n\fP option causes information to be displayed only for jobs
that have changed state since the last notification.
If the \fB\-l\fP option is used, the process-id of each process in a job
is also listed.
The \fB\-p\fP option causes only the process group of each job to be printed.
See Job Control below for the format of \fIjob\fP and the displayed job.
.\"}}}
.\"{{{  kill [-s signame | -signum | -signame] { job | pid | -pgrp } ...
.IP "\fBkill\fP [\fB\-s\fP \fIsigname\fP | \fB\-signum\fP | \fB\-signame\fP ] { \fIjob\fP | \fIpid\fP | \fB\-\fP\fIpgrp\fP } ..."
Send the specified signal to the specified jobs, process ids, or process groups.
If no signal is specified, the signal TERM is sent.
If a job is specified, the signal is sent to the job's process group.
See Job Control below for the format of \fIjob\fP.
.\"}}}
.\"{{{  kill -l [exit-status ...]
.IP "\fBkill \-l\fP [\fIexit-status\fP ...]"
Print the name of the signal that killed a process which exited with
the specified \fIexit-status\fPes.
d2254 71
a2324 30
.\"}}}
.\"{{{  let [expression ...]
.\"}}}
.\"{{{  print [-nprsun | -R [-en]] [argument ...]
.IP "\fBprint\fP [\fB\-nprsu\fP\fIn\fP | \fB\-R\fP [\fB\-en\fP]] [\fIargument ...\fP]"
\fBPrint\fP prints its arguments on the standard output, separated by
spaces, and terminated with a newline.  The \fB\-n\fP option suppresses
the newline.  By default, certain C escapes are translated.  These
include \eb, \ef, \en, \er, \et, \ev, and \e0### (# is an octal digit, of
which there may be 0 to 3).
\ec is equivalent to using the \fB\-n\fP option.  \e expansion may be
inhibited with the \fB\-r\fP option.
The \fB\-s\fP option prints to the history file instead of standard output,
the \fB\-u\fP option prints to file descriptor \fIn\fP (\fIn\fP
defaults to 1 if omitted), and the \fB\-p\fP option prints to the co-process
(see Co-Processes above).
.sp
The \fB\-R\fP option is used to emulate, to some degree, the BSD echo
command, which does not process \e sequences unless the \fB\-e\fP option
is given.
As above, the \fB\-n\fP option suppresses the trailing newline.
.\"}}}
.\"{{{  pwd [-LP]
.IP "\fBpwd\fP [\fB\-LP\fP]"
Print the present working directory.
If \fB\-L\fP option is used or if the \fBphysical\fP option
(see \fBset\fP command below) isn't set, the logical path is printed
(\fIi.e.\fP, the path used to \fBcd\fP to the current directory).
If \fB\-P\fP option (physical path) is used or if the \fBphysical\fP option
is set, the path determined from the filesystem (by following \fB..\fP
d2326 11
a2336 7
.\"}}}
.\"{{{  read [-prsun] [parameter ...]
.IP "\fBread\fP [\fB\-prsu\fP\fIn\fP] [\fIparameter ...\fP]"
Reads a line of input from standard input, separate the line into fields using
the \fBIFS\fP parameter (see Substitution above), and assign each field to the
specified parameters.
If there are more parameters than fields, the extra parameters are set to null,
d2338 10
a2347 6
is assigned the remaining fields (inclusive of any separating spaces).
If no parameters are specified, the \fBREPLY\fP parameter is used.
If the input line ends in a backslash and the \fB\-r\fP option was not used, the
backslash and newline are stripped and more input is read.
If no input is read, \fBread\fP exits with a non-zero status.
.sp
d2350 68
a2417 38
any input is read) if the input is a tty
(\fIe.g.\fP, \fBread nfoo?'number of foos: '\fP).
.sp
The \fB\-u\fP\fIn\fP and \fB\-p\fP options cause input to be read
from file descriptor \fIn\fP or the current co-process (see Co-Processes above
for comments on this), respectively.
If the \fB\-s\fP option is used, input is saved to the history file.
.\"}}}
.\"{{{  readonly [-p] [parameter[=value] ...]
.IP "\fBreadonly\fP [\fB\-p\fP] [\fIparameter\fP[\fB=\fP\fIvalue\fP]] ..."
Sets the readonly attribute of the named parameters.  If values are given,
parameters are set to them before setting the attribute.
Once a parameter is made readonly, it cannot be unset and its value cannot
be changed.
.sp
If no parameters are specified, the names of all parameters with the readonly
attribute are printed one per line, unless the \fB\-p\fP option is used,
in which case \fBreadonly\fP commands defining all readonly
parameters, including their values, are printed.
.\"}}}
.\"{{{  return [status]
.IP "\fBreturn\fP [\fIstatus\fP]"
Returns from a function or \fB.\fP script, with exit status \fIstatus\fP.
If no \fIstatus\fP is given, the exit status of the last executed command
is used.
If used outside of a function or \fB.\fP script, it has the same effect
as \fBexit\fP.
Note that pdksh treats both profile and \fB$ENV\fP files as \fB.\fP scripts,
while the original Korn shell only treats profiles as \fB.\fP scripts.
.\"}}}
.\"{{{  set [+-abCefhkmnpsuvxX] [+-o [option]] [+-A name] [--] [arg ...]
.IP "\fBset\fP [\fB\(+-abCefhkmnpsuvxX\fP] [\fB\(+-o\fP [\fIoption\fP]] [\fB\(+-A\fP \fIname\fP] [\fB\-\-\fP] [\fIarg\fP ...]"
The set command can be used to set (\fB\-\fP) or clear (\fB+\fP) shell options,
set the positional parameters, or set an array parameter.
Options can be changed using the \fB\(+-o\fP \fIoption\fP syntax,
where \fIoption\fP is the long name of an option, or using
the \fB\(+-\fP\fIletter\fP syntax, where \fIletter\fP is the
option's single letter name (not all options have a single letter name).
d2419 17
a2435 15
along with a description of what the option does.
.sp
.TS
expand;
afB lfB lw(3i).
\-A		T{
Sets the elements of the array parameter \fIname\fP to \fIarg\fP ...;
If \fB\-A\fP is used, the array is reset (\fIi.e.\fP, emptied) first;
if \fB+A\fP is used, the first N elements are set (where N is the number
of \fIarg\fPs), the rest are left untouched.
T}
\-a	allexport	T{
all new parameters are created with the export attribute
T}
\-b	notify	T{
d2437 24
a2460 15
prompt.
Only used if job control is enabled (\fB\-m\fP).
T}
\-C	noclobber	T{
Prevent \fB>\fP redirection from overwriting existing files (\fB>|\fP must
be used to force an overwrite).
T}
\-e	errexit	T{
Exit (after executing the \fBERR\fP trap) as soon as an error occurs or
a command fails (\fIi.e.\fP, exits with a non-zero status).
This does not apply to commands whose exit status is explicitly tested by a
shell construct such as \fBif\fP, \fBuntil\fP, \fBwhile\fP, \fB&&\fP or
\fB||\fP statements.
T}
\-f	noglob	T{
d2462 7
a2468 10
T}
\-h	trackall	T{
Create tracked aliases for all executed commands (see Aliases above).
On by default for non-interactive shells.
T}
\-i	interactive	T{
Enable interactive mode \- this can only be set/unset when the shell is
invoked.
T}
\-k	keyword	T{
d2470 6
a2475 6
T}
\-l	login	T{
The shell is a login shell \- this can only be set/unset when the shell is
invoked (see Shell Startup above).
T}
\-m	monitor	T{
d2477 2
a2478 3
T}
\-n	noexec	T{
Do not execute any commands \- useful for checking the syntax of scripts
d2480 32
a2511 25
T}
\-p	privileged	T{
Set automatically if, when the shell starts, the read uid or gid does not
match the effective uid or gid, respectively.
See Shell Startup above for a description of what this
means.
T}
-r	restricted	T{
Enable restricted mode \(em this option can only be used when the shell is
invoked.  See Shell Startup above for a description of what this
means.
T}
\-s	stdin	T{
If used when the shell is invoked, commands are read from standard input.
Set automatically if the shell is invoked with no arguments.
.sp
When \fB\-s\fP is used in the \fBset\fP command, it causes the specified
arguments to be sorted before assigning them to the positional parameters
(or to array \fIname\fP, if \fB\-A\fP is used).
T}
\-u	nounset	T{
Referencing of an unset parameter is treated as an error, unless
one of the \fB\-\fP, \fB+\fP or \fB=\fP modifiers is used.
T}
\-v	verbose	T{
d2513 9
a2521 9
T}
\-x	xtrace	T{
Print commands and parameter assignments when they are executed,
preceded by the value of \fBPS4\fP.
T}
\-X	markdirs	T{
Mark directories with a trailing \fB/\fP during file name generation.
T}
	bgnice	T{
d2523 46
a2568 28
T}
	ignoreeof	T{
The shell will not exit on when end-of-file is read, \fBexit\fP must be used.
T}
	nohup	T{
Do not kill running jobs with a \fBHUP\fP signal when a login shell exists.
Currently set by default, but this will change in the future to be compatible
with the original Korn shell (which doesn't have this option, but does
send the \fBHUP\fP signal).
T}
	nolog	T{
No effect \- in the original Korn shell, this prevents function definitions
from being stored in the history file.
T}
	physical	T{
Causes the \fBcd\fP and \fBpwd\fP commands to use `physical'
(\fIi.e.\fP, the filesystem's) \fB..\fP directories instead of `logical'
directories (\fIi.e.\fP,  the shell handles \fB..\fP, which allows the user
to be obliveous of symlink links to directories).
Clear by default.  Note that setting
this option does not effect the current value of the \fBPWD\fP parameter;
only the \fBcd\fP command changes \fBPWD\fP.
See the \fBcd\fP and \fBpwd\fP commands above for more details.
T}
	posix	T{
Enable posix mode.  See POSIX Mode above.
T}
	vi	T{
d2570 202
a2771 183
T}
	viraw	T{
No effect \- in the original Korn shell, unless viraw was set, the vi command
line mode would let the tty driver do the work until ESC (^[) was entered.
pdksh is always in viraw mode.
T}
	vi-esccomplete	T{
In vi command line editing, do command / file name completion when
escape (^[) is entered in command mode.
T}
	vi-show8	T{
Prefix characters with the eighth bit set with `M-'.
If this option is not set, characters in the range
128-160 are printed as is, which may cause problems.
T}
	vi-tabcomplete	T{
In vi command line editing, do command / file name completion when
tab (^I) is entered in insert mode.
T}
.TE
.sp
These options can also be used upon invocation of the shell.  The current
set of options (with single letter names) can be found in the
parameter \fB\-\fP.
\fBset -o\fP with no option name will list all the options and whether each
is on or off; \fBset +o\fP will print the long names of all options that
are currently on.
.sp
Remaining arguments, if any, are positional parameters and are assigned,
in order, to the
positional parameters (\fIi.e.\fP, \fB1\fP, \fB2\fP, \fIetc.\fP).
If options are ended with \fB\-\-\fP and there are no remaining arguments,
all positional parameters are cleared.
If no options or arguments are given, then the values of all names are printed.
For unknown historical reasons, a lone \fB\-\fP option is treated specially:
it clears both the \fB\-x\fP and \fB\-v\fP options.
.\"}}}
.\"{{{  shift [number]
.IP "\fBshift\fP [\fInumber\fP]"
The positional parameters \fInumber\fP+1, \fInumber\fP+2 \fIetc.\fP\& are
renamed to \fB1\fP, \fB2\fP, \fIetc.\fP
\fInumber\fP defaults to 1.
.\"}}}
.\"{{{  test expression, [ expression ]
.IP "\fBtest\fP \fIexpression\fP"
.IP "\fB[\fP \fIexpression\fP \fB]\fP"
\fBtest\fP evaluates the \fIexpression\fP and returns zero status if
true, and 1 status if false and greater than 1 if there was an error.
It is normally used as the
condition command of \fBif\fP and \fBwhile\fP statements.
The following basic expressions are available:
.sp
.TS
afB ltw(2.8i).
\fIstr\fP	T{
\fIstr\fP has non-zero length.  Note that there is the potential
for problems if \fIstr\fP turns out to be an operator (\fIe.g.\fP, \fB-r\fP)
- it is generally better to use a test like
.RS
\fB[ X"\fP\fIstr\fP\fB" != X ]\fP
.RE
instead (double quotes are used in case \fIstr\fP contains spaces or file
globing characters).
T}
\-r \fIfile\fP	T{
\fIfile\fP exists and is readable
T}
\-w \fIfile\fP	T{
\fIfile\fP exists and is writable
T}
\-x \fIfile\fP	T{
\fIfile\fP exists and is executable
T}
\-a \fIfile\fP	T{
\fIfile\fP exists
T}
\-e \fIfile\fP	T{
\fIfile\fP exists
T}
\-f \fIfile\fP	T{
\fIfile\fP is a regular file
T}
\-d \fIfile\fP	T{
\fIfile\fP is a directory
T}
\-c \fIfile\fP	T{
\fIfile\fP is a character special device
T}
\-b \fIfile\fP	T{
\fIfile\fP is a block special device
T}
\-p \fIfile\fP	T{
\fIfile\fP is a named pipe
T}
\-u \fIfile\fP	T{
\fIfile\fP's mode has setuid bit set
T}
\-g \fIfile\fP	T{
\fIfile\fP's mode has setgid bit set
T}
\-k \fIfile\fP	T{
\fIfile\fP's mode has sticky bit set
T}
\-s \fIfile\fP	T{
\fIfile\fP is not empty
T}
\-O \fIfile\fP	T{
\fIfile\fP's owner is the shell's effective user-ID
T}
\-G \fIfile\fP	T{
\fIfile\fP's group is the shell's effective group-ID
T}
\-h \fIfile\fP	T{
\fIfile\fP is a symbolic link
T}
\-H \fIfile\fP	T{
\fIfile\fP is a context dependent directory (only useful on HP-UX)
T}
\-L \fIfile\fP	T{
\fIfile\fP is a symbolic link
T}
\-S \fIfile\fP	T{
\fIfile\fP is a socket
T}
\-o \fIoption\fP	T{
shell \fIoption\fP is set (see \fBset\fP command above for list of options).
As a non-standard extension, if the option starts with a \fB!\fP, the test
is negated; the test always fails if option doesn't exist (thus
.RS
\fB[ -o \fP\fIfoo\fP \fB-o -o !\fP\fIfoo\fP \fB]\fP
.RE
returns true if and only if option \fIfoo\fP exists).
T}
\fIfile\fP \-nt \fIfile\fP	T{
first \fIfile\fP is newer than second \fIfile\fP
T}
\fIfile\fP \-ot \fIfile\fP	T{
first \fIfile\fP is older than second \fIfile\fP
T}
\fIfile\fP \-ef \fIfile\fP	T{
first \fIfile\fP is the same file as second \fIfile\fP
T}
\-t\ [\fIfd\fP]	T{
file descriptor is a tty device.
If the posix option (\fBset \-o posix\fP, see POSIX Mode above) is not
set, \fIfd\fP may be left out, in which case it is taken to be 1
(the behaviour differs due to the special POSIX rules described below).
T}
\fIstring\fP	T{
\fIstring\fP is not empty
T}
\-z\ \fIstring\fP	T{
\fIstring\fP is empty
T}
\-n\ \fIstring\fP	T{
\fIstring\fP is not empty
T}
\fIstring\fP\ =\ \fIstring\fP	T{
strings are equal
T}
\fIstring\fP\ !=\ \fIstring\fP	T{
strings are not equal
T}
\fInumber\fP\ \-eq\ \fInumber\fP	T{
numbers compare equal
T}
\fInumber\fP\ \-ne\ \fInumber\fP	T{
numbers compare not equal
T}
\fInumber\fP\ \-ge\ \fInumber\fP	T{
numbers compare greater than or equal
T}
\fInumber\fP\ \-gt\ \fInumber\fP	T{
numbers compare greater than
T}
\fInumber\fP\ \-le\ \fInumber\fP	T{
numbers compare less than or equal
T}
\fInumber\fP\ \-lt\ \fInumber\fP	T{
numbers compare less than
T}
.TE
.sp
d2773 74
a2846 46
binary operators, may be combined with the following operators
(listed in increasing order of precedence):
.sp
.TS
afB l.
\fIexpr\fP \-o \fIexpr\fP	logical or
\fIexpr\fP \-a \fIexpr\fP	logical and
! \fIexpr\fP	logical not
( \fIexpr\fP )	grouping
.TE
.sp
On operating systems not supporting \fB/dev/fd/\fP\fIn\fP devices
(where \fIn\fP is a file descriptor number),
the \fBtest\fP command will attempt to fake it for all tests that
operate on files (except the \fB-e\fP test).
I.e., \fB[ -w /dev/fd/2 ]\fP tests if file descriptor 2 is writable.
.sp
Note that some special rules are applied (courtesy of POSIX) if the
number of arguments to \fBtest\fP or \fB[\fP \&... \fB]\fP is less than
five: if leading \fB!\fP arguments can be stripped such that only one
argument remains then a string length test is performed (again, even if
the argument is a unary operator);
if leading \fB!\fP arguments can be stripped such that three
arguments remain and the second argument is a binary operator, then the
binary operation is performed (even if first argument is a unary
operator, including an unstripped \fB!\fP).
.sp
\fBNote:\fP A common mistake is to use \fBif [ $foo = bar ]\fP which
fails if parameter \fBfoo\fP is null or unset, if it has embedded spaces
(\fIi.e.\fP, \fBIFS\fP characters), or if it is a unary operator like \fB!\fP or
\fB\-n\fP.  Use tests like \fBif [ "X$foo" = Xbar ]\fP instead.
.\"}}}
.\"{{{  times
.IP \fBtimes\fP
Print the accumulated user and system times used by the shell and by
processes which have exited that the shell started.
.\"}}}
.\"{{{  trap [handler signal ...]
.IP "\fBtrap\fP [\fIhandler\fP \fIsignal ...\fP]"
Sets trap handler that is to be executed when any of the specified signals
are received.
\fBHandler\fP is either a null string, indicating the signals are to
be ignored, a minus (\fB\-\fP), indicating that the default action is to
be taken for the signals (see signal(2 or 3)), or a string containing shell
commands to be evaluated and executed at the first opportunity (\fIi.e.\fP,
when the current command completes, or before printing the next \fBPS1\fP
d2848 39
a2886 21
\fBSignal\fP is the name of a signal (\fIe.g.\fP, PIPE or ALRM) or the number
of the signal (see \fBkill \-l\fP command above).
There are two special signals: \fBEXIT\fP (also known as \fB0\fP), which
is executed when the shell is about to exit, and \fBERR\fP which is
executed after an error occurs (an error is something that would cause
the shell to exit if the \fB\-e\fP or \fBerrexit\fP option were set \(em
see \fBset\fP command above).
\fBEXIT\fP handlers are executed in the environment of the last executed
command.
Note that for non-interactive shells, the trap handler cannot be changed for
signals that were ignored when the shell started.
.sp
With no arguments, \fBtrap\fP lists, as a series of \fBtrap\fP commands,
the current state of the traps that have been set since the shell started.
.sp
.\" todo: add these features (trap DEBUG, trap ERR/EXIT in function)
The original Korn shell's \fBDEBUG\fP trap and the handling of \fBERR\fP and
\fBEXIT\fP traps in functions are not yet implemented.
.\"}}}
.\"{{{  true
.IP \fBtrue\fP
d2888 55
a2942 30
.\"}}}
.\"{{{  typeset [[+-Ulprtux] [-L[n]] [-R[n]] [-Z[n]] [-i[n]] | -f [-tux]] [name[=value] ...]
.IP "\fBtypeset\fP [[\(+-Ulprtux] [\fB\-L\fP[\fIn\fP]] [\fB\-R\fP[\fIn\fP]] [\fB\-Z\fP[\fIn\fP]] [\fB\-i\fP[\fIn\fP]] | \fB\-f\fP [\fB\-tux\fP]] [\fIname\fP[\fB=\fP\fIvalue\fP] ...]"
Display or set parameter attributes.
With no \fIname\fP arguments, parameter attributes are displayed: if no options
arg used, the current attributes of all parameters are printed as typeset
commands; if an option is given (or \fB\-\fP with no option letter)
all parameters and their values with the specified attributes are printed;
if options are introduced with \fB+\fP, parameter values are not printed.
.sp
If \fIname\fP arguments are given, the attributes of the named parameters
are set (\fB\-\fP) or cleared (\fB+\fP).
Values for parameters may optionally be specified.
If typeset is used inside a function, any newly created parameters are local
to the function.
.sp
When \fB\-f\fP is used, typeset operates on the attributes of functions.
As with parameters, if no \fIname\fPs are given, functions are listed
with their values (\fIi.e.\fP, definitions) unless options are introduced with
\fB+\fP, in which case only the function names are reported.
.sp
.TS
expand;
afB lw(4.5i).
\-L\fIn\fP	T{
Left justify attribute: \fIn\fP specifies the field width.
If \fIn\fP is not specified, the current width of a parameter (or the
width of its first assigned value) is used.
Leading white space (and zeros, if used with the \fB\-Z\fP option) is stripped.
If necessary, values are either truncated or space padded to fit the
d2944 19
a2962 27
T}
\-R\fIn\fP	T{
Right justify attribute: \fIn\fP specifies the field width.
If \fIn\fP is not specified, the current width of a parameter (or the
width of its first assigned value) is used.
Trailing white space are stripped.
If necessary, values are either stripped of leading characters
or space padded to make them fit the field width.
T}
\-Z\fIn\fP	T{
Zero fill attribute: if not combined with \fB\-L\fP, this is the
same as \fB\-R\fP, except zero padding is used instead of space padding.
T}
\-i\fIn\fP	T{
integer attribute:
\fIn\fP specifies the base to use when displaying the integer
(if not specified, the base given in the first assignment is used).
Parameters with this attribute may be assigned values containing
arithmetic expressions.
T}
\-U	T{
unsigned integer attribute: integers are printed as unsigned values
(only useful when combined with the \fB\-i\fP option).
This option is not in the original Korn shell.
T}
\-f	T{
Function mode: display or set functions and their attributes, instead of
d2964 66
a3029 55
T}
\-l	T{
Lower case attribute: all  upper case characters in values are converted to
lower case.
(In the original Korn shell, this parameter meant `long integer' when used
with the \fB\-i\fP option).
T}
\-p	T{
Print complete typeset commands that can be used to re-create the
attributes (but not the values) of parameters.
This is the default action (option exists for ksh93 compatability).
T}
\-r	T{
Readonly attribute: parameters with the this attribute may not be assigned to
or unset.
Once this attribute is set, it can not be turned off.
T}
\-t	T{
Tag attribute: has no meaning to the shell; provided for application use.
.sp
For functions, \fB\-t\fP is the trace attribute.
When functions with the trace attribute are executed, the \fBxtrace\fP (\fB\-x\fP) shell option is temporarily turned on.
T}
\-u	T{
Upper case attribute: all lower case characters in values are converted to
upper case.
(In the original Korn shell, this parameter meant `unsigned integer' when used
with the \fB\-i\fP option, which meant upper case letters would never be used
for bases greater than 10.  See the \fB\-U\fP option).
.sp
For functions, \fB\-u\fP is the undefined attribute.  See Functions above
for the implications of this.
T}
\-x	T{
Export attribute: parameters (or functions) are placed in the environment of
any executed commands.  Exported functions are not implemented yet.
T}
.TE
.\"}}}
.\"{{{  ulimit [-acdfHlmnpsStvw] [value]
.IP "\fBulimit\fP [\fB\-acdfHlmnpsStvw\fP] [\fIvalue\fP]"
Display or set process limits.
If no options are used, the file size limit (\fB\-f\fP) is assumed.
\fBvalue\fP, if specified, may be either be an arithmetic expression or the
word \fBunlimited\fP.
The limits affect the shell and any processes created by the shell after
a limit is imposed.
Note that some systems may not allow limits to be increased once they
are set.
Also note that the types of limits available are system dependent \- some
systems have only the \fB\-f\fP limit.
.RS
.IP \fB\-a\fP
Displays all limits; unless \fB\-H\fP is used, soft limits are displayed.
.IP \fB\-H\fP
d3031 1
a3031 1
.IP \fB\-S\fP
d3033 172
a3204 146
.IP \fB\-c\fP
Impose a size limit of \fIn\fP blocks on the size of core dumps.
.IP \fB\-d\fP
Impose a size limit of \fIn\fP kbytes on the size of the data area.
.IP \fB\-f\fP
Impose a size limit of \fIn\fP blocks on files written by the shell and
its child processes (files of any size may be read).
.IP \fB\-l\fP
Impose a limit of \fIn\fP kbytes on the amount of locked (wired) physical
memory.
.IP \fB\-m\fP
Impose a limit of \fIn\fP kbytes on the amount of physical memory used.
.IP \fB\-n\fP
Impose a limit of \fIn\fP file descriptors that can be open at once.
.IP \fB\-p\fP
Impose a limit of \fIn\fP processes that can be run by the user at any one
time.
.IP \fB\-s\fP
Impose a size limit of \fIn\fP kbytes on the size of the stack area.
.IP \fB\-t\fP
Impose a time limit of \fIn\fP cpu seconds to be used by each process.
.IP \fB\-v\fP
Impose a limit of \fIn\fP kbytes on the amount of virtual memory used;
on some systems this is the maximum allowable virtual address (in bytes,
not kbytes).
.IP \fB\-w\fP
Impose a limit of \fIn\fP kbytes on the amount of swap space used.
.PP
As far as \fBulimit\fP is concerned, a block is 512 bytes.
.RE
.\"}}}
.\"{{{  umask [-S] [mask]
.IP "\fBumask\fP [\fB\-S\fP] [\fImask\fP]"
.RS
Display or set the file permission creation mask, or umask (see \fIumask\fP(2)).
If the \fB\-S\fP option is used, the mask displayed or set is symbolic,
otherwise it is an octal number.
.sp
Symbolic masks are like those used by \fIchmod\fP(1):
.RS
[\fBugoa\fP]{{\fB=+-\fP}{\fBrwx\fP}*}+[\fB,\fP...]
.RE
in which the first group of characters is the \fIwho\fP part, the second
group is the \fIop\fP part, and the last group is the \fIperm\fP part.
The \fIwho\fP part specifies which part of the umask is to be modified.
The letters mean:
.RS
.IP \fBu\fP
the user permissions
.IP \fBg\fP
the group permissions
.IP \fBo\fP
the other permissions (non-user, non-group)
.IP \fBa\fP
all permissions (user, group and other)
.RE
.sp
The \fIop\fP part indicates how the \fIwho\fP permissions are to be modified:
.RS
.IP \fB=\fP
set
.IP \fB+\fP
added to
.IP \fB\-\fP
removed from
.RE
.sp
The \fIperm\fP part specifies which permissions are to be set, added or removed:
.RS
.IP \fBr\fP
read permission
.IP \fBw\fP
write permission
.IP \fBx\fP
execute permission
.RE
.sp
When symbolic masks are used, they describe what permissions may
be made available (as opposed to octal masks in which a set bit means
the corresponding bit is to be cleared).
Example: `ug=rwx,o=' sets the mask so files will not be readable, writable
or executable by `others', and is equivalent (on most systems) to the octal
mask `07'.
.RE
.\"}}}
.\"{{{  unalias [-adt] name ...
.IP "\fBunalias\fP [\fB\-adt\fP] [\fIname1\fP ...]"
The aliases for the given names are removed.
If the \fB\-a\fP option is used, all aliases are removed.
If the \fB\-t\fP or \fB\-d\fP options are used, the indicated operations
are carried out on tracked or directory aliases, respectively.
.\"}}}
.\"{{{  unset [-fv] parameter ...
.IP "\fBunset\fP [\fB\-fv\fP] \fIparameter\fP ..."
Unset the named parameters (\fB\-v\fP, the default) or functions (\fB\-f\fP).
The exit status is non-zero if any of the parameters were already unset,
zero otherwise.
.\"}}}
.\"{{{  wait [job]
.IP "\fBwait\fP [\fIjob\fP]"
Wait for the specified job(s) to finish.
The exit status of wait is that of the last specified job:
if the last job is killed by a signal, the exit status is 128 + the
number of the signal (see \fBkill \-l\fP \fIexit-status\fP above); if the last
specified job can't be found (because it never existed, or had already
finished), the exit status of wait is 127.
See Job Control below for the format of \fIjob\fP.
\fBWait\fP will return if a signal for which a trap has been set is received,
or if a HUP, INT or QUIT signal is received.
.sp
If no jobs are specified, \fBwait\fP waits for all currently running jobs
(if any) to finish and exits with a zero status.
If job monitoring is enabled, the completion status of jobs is
printed (this is not the case when jobs are explicitly specified).
.\"}}}
.\"{{{  whence [-pv] [name ...]
.IP "\fBwhence\fP [\fB\-pv\fP] [name ...]"
For each name, the type of command is listed (reserved word, built-in, alias,
function, tracked alias or executable).
If the \fB\-p\fP option is used, a path search done even if \fIname\fP
is a reserved word, alias, \fIetc.\fP
Without the \fB\-v\fP option, \fBwhence\fP is similar to \fBcommand \-v\fP
except that \fBwhence\fP will find reserved words and won't print aliases
as alias commands;
with the \fB\-v\fP option, \fBwhence\fP is the same as \fBcommand \-V\fP.
Note that for \fBwhence\fP, the \fB\-p\fP option does not affect the search
path used, as it does for \fBcommand\fP.
If the type of one or more of the names could not be determined, the
exit status is non-zero.
.\"}}}
.\"}}}
.\"{{{  job control (and its built-in commands)
.SS "Job Control"
Job control refers to the shell's ability to monitor and control \fBjobs\fP,
which are processes or groups of processes created for commands or pipelines.
At a minimum, the shell keeps track of the status of the background
(\fIi.e.\fP, asynchronous) jobs that currently exist; this information can be
displayed using the \fBjobs\fP command.
If job control is fully enabled (using \fBset \-m\fP or
\fBset \-o monitor\fP), as it is for interactive shells,
the processes of a job are placed in their own process group,
foreground jobs can be stopped by typing the suspend character from the
terminal (normally ^Z),
jobs can be restarted in either the foreground
or background, using the \fBfg\fP and \fBbg\fP commands, respectively,
and the state of the terminal is saved or restored when a foreground
d3206 22
a3227 13
.sp
Note that only commands that create processes (\fIe.g.\fP,
asynchronous commands, subshell commands, and non-built-in,
non-function commands) can be stopped; commands like \fBread\fP cannot be.
.sp
When a job is created, it is assigned a job-number.
For interactive shells, this number is printed inside \fB[\fP..\fB]\fP,
followed by the process-ids of the processes in the job when an asynchronous
command is run.
A job may be referred to in \fBbg\fP, \fBfg\fP, \fBjobs\fP, \fBkill\fP and
\fBwait\fP commands either by the process id of the last process in the
command pipeline (as stored in the \fB$!\fP parameter) or by prefixing the
job-number with a percent sign (\fB%\fP).
d3229 2
a3230 5
.sp
.TS
expand;
afB lw(4.5i).
%+	T{
d3233 25
a3257 25
T}
%%\fR, \fP%	T{
Same as \fB%+\fP.
T}
%\-	T{
The job that would be the \fB%+\fP job, if the later did not exist.
T}
%\fIn\fP	T{
The job with job-number \fIn\fP.
T}
%?\fIstring\fP	T{
The job containing the string \fIstring\fP (an error occurs if multiple jobs
are matched).
T}
%\fIstring\fP	T{
The job starting with string \fIstring\fP (an error occurs if multiple jobs
are matched).
T}
.TE
.sp
When a job changes state (\fIe.g.\fP, a background job finishes or foreground
job is stopped), the shell prints the following status information:
.RS
\fB[\fP\fInumber\fP\fB]\fP \fIflag status command\fP
.RE
d3259 41
a3299 28
.IP "\ \fInumber\fP"
is the job-number of the job.
.IP "\ \fIflag\fP"
is \fB+\fP or \fB-\fP if the job is the \fB%+\fP or \fB%-\fP job,
respectively, or space if it is neither.
.IP "\ \fIstatus\fP"
indicates the current state of the job and can be
.RS
.IP "\fBRunning\fP"
the job has neither stopped or exited (note that running does not
necessarily mean consuming CPU time \(em the process could be blocked waiting
for some event).
.IP "\fBDone\fP [\fB(\fP\fInumber\fP\fB)\fP]"
the job exited. \fInumber\fP is the exit status of the job, which is
omitted if the status is zero.
.IP "\fBStopped\fP [\fB(\fP\fIsignal\fP\fB)\fP]"
the job was stopped by the indicated \fIsignal\fP (if no signal is given,
the job was stopped by SIGTSTP).
.IP "\fIsignal-description\fP [\fB(core dumped)\fP]"
the job was killed by a signal (\fIe.g.\fP, Memory\ fault,
Hangup, \fIetc.\fP \(em use
\fBkill \-l\fP for a list of signal descriptions).
The \fB(core\ dumped)\fP message indicates the process created a core file.
.RE
.IP "\ \fIcommand\fP"
is the command that created the process.
If there are multiple processes in the job, then each process will
have a line showing its \fIcommand\fP and possibly its \fIstatus\fP,
d3301 95
a3395 47
.PP
When an attempt is made to exit the shell while there are jobs in
the stopped state, the shell warns the user that there are stopped jobs
and does not exit.
If another attempt is immediately made to exit the shell, the stopped
jobs are sent a \fBHUP\fP signal and the shell exits.
Similarly, if the \fBnohup\fP option is not set and there are running
jobs when an attempt is made to exit a login shell, the shell warns the
user and does not exit.
If another attempt is immediately made to exit the shell, the running
jobs are sent a \fBHUP\fP signal and the shell exits.
.\"}}}
.\"{{{  Emacs Interactive Input Line Editing
.\"}}}
.\"{{{  Vi Interactive Input Line Editing
.\"}}}
.\"}}}
.\"{{{  Files
.SH FILES
~/.profile
.br
/etc/profile
.br
/etc/suid_profile
.\"}}}
.\"{{{  Notes
.SH NOTES
Sh is implemented as a runtime option of pdksh, with only those ksh features
whose syntax or semantics are incompatible with a traditional Bourne
shell disabled.  Since this leaves some ksh extensions exposed, caution
should be used where backwards compatibility with traditional Bourne or
POSIX compliant shells is an issue.
.\"}}}
.\"{{{  Bugs
.SH BUGS
Any bugs in pdksh should be reported to pdksh@@cs.mun.ca.  Please
include the version of pdksh (echo $KSH_VERSION shows it), the machine,
operating system and compiler you are using and a description of how to
repeat the bug (a small shell script that demonstrates the bug is
best).  The following, if relevant (if you are not sure, include them),
can also helpful: options you are using (both options.h options and set
\-o options) and a copy of your config.h (the file generated by the
configure script).  New versions of pdksh can be obtained from
ftp://ftp.cs.mun.ca/pub/pdksh/.
.\"}}}
.\"{{{  Authors
.SH AUTHORS
d3397 9
a3405 28
Charles Forsyth and parts of the BRL shell by Doug A.\& Gwyn, Doug Kingston,
Ron Natalie, Arnold Robbins, Lou Salkind and others.  The first release
of pdksh was created by Eric Gisin, and it was subsequently maintained by
John R.\& MacMillan (chance!john@@sq.sq.com), and
Simon J.\& Gerraty (sjg@@zen.void.oz.au).  The current maintainer is
Michael Rendell (michael@@cs.mun.ca).
The CONTRIBUTORS file in the source distribution contains a more complete
list of people and their part in the shell's development.
.\"}}}
.\"{{{  See also
.SH "SEE ALSO"
awk(1), 
ksh(1),
csh(1), ed(1), getconf(1), getopt(1), sed(1), stty(1), vi(1),
dup(2), execve(2), getgid(2), getuid(2), open(2), pipe(2), wait(2),
getopt(3), rand(3), signal(3), system(3),
environ(5)
.PP
.IR "The KornShell Command and Programming Language" ,
Morris Bolsky and David Korn, 1989, ISBN 0-13-516972-0.
.PP
.\" XXX ISBN missing
.IR "UNIX Shell Programming" ,
Stephen G.\& Kochan, Patrick H.\& Wood, Hayden.
.PP
.IR "IEEE Standard for information Technology \- Portable Operating System Interface (POSIX) \- Part 2: Shell and Utilities" ,
IEEE Inc, 1993, ISBN 1-55937-255-9.
.\"}}}
@


1.7
log
@Bug fixes from pdksh-unstable-5.2.13.4, including "official" versions of
some that we had already fixed locally.
 o typeset -f FUNC doesn't print follows command (and expression) substitutions.
 o when re-allocating memory, too much may be copied from old memory.
 o set -o printed some options sans names.
 o emacs mode: <esc>. in very fist command causes core dump.
 o pdksh dumps core after a cd command.
 o typeset -i reports on array elements that have no value
   (at&t ksh reports on array base name - no index).
 o ulimit -ctn unlimittttted kills shell (resource exceeded).
 o ". /dev/null" says access denied.
 o flag field in aliases incorrectly changed (all flags set instead of
   clearing ISSET) in exec.c(flushcom).
 o ${#array[*]} prints largest index instead of number of (set) elements
   in an array (ksh88 does the former).
 o sys_siglist[] doesn't always have NSIG non-null entries...
@
text
@d2 1
a2 1
.\"	$OpenBSD: sh.1tbl,v 1.6 1998/07/24 20:50:04 deraadt Exp $
d930 2
a931 2
file name generation are all performed on the \fIfile\fP, \fImarker\fP and
\fIfd\fP arguments of redirections.
@


1.6
log
@fix spelling of separate; aaron@@ug.cs.dal.ca
@
text
@d2 1
a2 1
.\"	$OpenBSD: sh.1tbl,v 1.5 1998/06/25 19:02:17 millert Exp $
d1352 4
a1355 2
is set, it lists the search path for the directory containing \fIdir\fP.  A
null path means the current directory. If \fIdir\fP is found in any
d2377 1
a2377 1
ftp.cs.mun.ca:pub/pdksh/.
@


1.5
log
@pdksh-5.2.13 + local changes
@
text
@d2 1
a2 1
.\"	$OpenBSD: sh.1tbl,v 1.4 1998/03/18 03:04:56 marc Exp $
d1017 1
a1017 1
seperates two arithmetic expressions; the left hand side is evaluated first,
@


1.4
log
@Document what sh/ksh does when the cd command matches a non empty path
in the CDPATH environment variable.
@
text
@d2 1
a2 1
.\"	$OpenBSD: sh.1tbl,v 1.3 1997/08/05 21:49:56 grr Exp $
d1120 5
d1218 5
d1298 17
a1314 5
.\"{{{  alias [ -d | -t [ -r ] ] [-x] [name1[=value1] ...]
.IP "\fBalias\fP [ \fB\-d\fP | \fB\-t\fP [\fB\-r\fP] ] [\fB\-x\fP] [\fIname1\fP[\fB=\fP\fIvalue1\fP] ...]"
Without arguments, \fBalias\fP lists all aliases and their values.  For
any name without a value, its value is listed.  Any name with a value
defines an alias (see Aliases above).
d1419 4
d1470 1
a1470 3
Arguments containing options must all start with either a \fB\-\fP or
a \fB+\fP, options that do not take arguments may be grouped in a single
argument.
d1881 1
a1881 1
\-t [\fIfd\fP]	T{
d1883 3
a1885 1
Default value of \fIfd\fP is 1.
d1890 1
a1890 1
\-z \fIstring\fP	T{
d1893 1
a1893 1
\-n \fIstring\fP	T{
d1896 1
a1896 1
\fIstring\fP = \fIstring\fP	T{
d1899 1
a1899 1
\fIstring\fP != \fIstring\fP	T{
d1902 1
a1902 1
\fInumber\fP \-eq \fInumber\fP	T{
d1905 1
a1905 1
\fInumber\fP \-ne \fInumber\fP	T{
d1908 1
a1908 1
\fInumber\fP \-ge \fInumber\fP	T{
d1911 1
a1911 1
\fInumber\fP \-gt \fInumber\fP	T{
d1914 1
a1914 1
\fInumber\fP \-le \fInumber\fP	T{
d1917 1
a1917 1
\fInumber\fP \-lt \fInumber\fP	T{
d1993 2
a1994 2
.\"{{{  typeset [[+-Ulrtux] [-L[n]] [-R[n]] [-Z[n]] [-i[n]] | -f [-tux]] [name[=value] ...]
.IP "\fBtypeset\fP [[\(+-Ulrtux] [\fB\-L\fP[\fIn\fP]] [\fB\-R\fP[\fIn\fP]] [\fB\-Z\fP[\fIn\fP]] [\fB\-i\fP[\fIn\fP]] | \fB\-f\fP [\fB\-tux\fP]] [\fIname\fP[\fB=\fP\fIvalue\fP] ...]"
d2058 5
d2382 1
a2382 1
was created by Eric Gisin, and it was subsequently maintained by
@


1.3
log
@Fixes for a variety of pdksh problems:

1) pkksh in sh mode closed fd's other than [012] on exec'ing a command.
	this is a ksh'ism and POSIX sates that open files are part of the
	environment to be passed to the new process.

2) pdksh in sh mode interpets (( as meaning the start of arithmetic
	"quoting", which is incompatible with it's usage as a nested
	sub-shell invocation.  The $(( form for arithmetic substitution
	is stil valid, however.
	PR user/59 millert@@openbsd.org (Todd C. Miller)

3) pdksh sh.1 manpage isn't explicit about the range of input text
	that is subject to field splitting after a substitution.
	PR user/236 Mathieu.Herrb@@mipnet.fr (Mathiew Herrb)
@
text
@d2 1
a2 1
.\"	$OpenBSD: sh.1tbl,v 1.2 1997/01/02 17:41:47 downsj Exp $
d634 3
a636 1
the current directory is not searched.
d1330 6
a1335 4
is set, it lists the search path for the directory containing
\fIdir\fP.  A null path means the current directory.  If \fIdir\fP is
missing, the home directory \fB$HOME\fP is used.  If \fIdir\fP is
\fB\-\fP, the previous working directory is used (see OLDPWD parameter).
@


1.2
log
@Don't mention $_.
@
text
@d2 1
a2 1
.\"	$OpenBSD: sh.1tbl,v 1.1 1996/11/30 23:54:37 downsj Exp $
d424 4
a427 2
Example: if \fBIFS\fP is set to `<space>:', the sequence of characters
`<space>A<space>:<space><space>B::D' contains four fields: `A', `B', `' and `D'.
d432 7
a1392 3
Any file descriptors greater than 2 which are opened or \fIdup\fP(2)-ed
in this way are not made available to other executed commands (\fIi.e.\fP,
commands that are not built-in to the shell).
d2321 8
@


1.1
log
@Install ksh as sh too.
@
text
@d2 1
a2 1
.\"	$OpenBSD$
a618 6
.\"{{{  _
.IP "\fB_\fP \fI(underscore)\fP"
In interactive use, this parameter is set to the last word of the
previous command.  When a command is executed, this parameter is set to
the full path of the command and is placed in the command's environment.
.\"}}}
@

