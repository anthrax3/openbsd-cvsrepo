head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.4
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.8.0.16
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.12
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.10
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.6
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.26
	OPENBSD_5_0:1.7.0.24
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.22
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.20
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.16
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.22
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.20
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.18
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.16
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.14
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.12
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	pdksh-527:1.1.1.1
	pdksh:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2017.08.30.17.08.45;	author jca;	state Exp;
branches;
next	1.11;
commitid	DWdXJvJqVZz6aoxS;

1.11
date	2015.10.10.07.35.16;	author nicm;	state Exp;
branches;
next	1.10;
commitid	jWSsmii0w84yWEKn;

1.10
date	2015.10.05.23.26.58;	author nicm;	state Exp;
branches;
next	1.9;
commitid	oq5rpqwKzYLQ6xxa;

1.9
date	2015.09.14.16.08.50;	author nicm;	state Exp;
branches;
next	1.8;
commitid	ahedYHs8fav8xOPq;

1.8
date	2012.02.19.07.52.30;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.11.20.31.21;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.18.20.55.52;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.06.15.01.18.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.06.25.19.02.22;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.11.21.07.59.35;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.08.19.20.09.00;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.08.14.06.19.12;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.14.06.19.12;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Implement HISTCONTROL ignoredups & ignorespace features

ignoredups: don't save the current line if it is identical to the last
history line.
ignorespace: don't save the current line if it starts with a space

ok anton@@ millert@@
@
text
@/*	$OpenBSD: table.h,v 1.11 2015/10/10 07:35:16 nicm Exp $	*/

/* $From: table.h,v 1.3 1994/05/31 13:34:34 michael Exp $ */

/*
 * generic hashed associative table for commands and variables.
 */

struct table {
	Area   *areap;		/* area to allocate entries */
	int	size, nfree;	/* hash size (always 2^^n), free entries */
	struct	tbl **tbls;	/* hashed table items */
};

struct tbl {			/* table item */
	int	flag;		/* flags */
	int	type;		/* command type (see below), base (if INTEGER),
				 * or offset from val.s of value (if EXPORT) */
	Area	*areap;		/* area to allocate from */
	union {
		char *s;	/* string */
		long i;		/* integer */
		int (*f)(char **);	/* int function */
		struct op *t;	/* "function" tree */
	} val;			/* value */
	int	index;		/* index for an array */
	union {
	    int	field;		/* field with for -L/-R/-Z */
	    int errno_;		/* CEXEC/CTALIAS */
	} u2;
	union {
		struct tbl *array;	/* array values */
		char *fpath;		/* temporary path to undef function */
	} u;
	char	name[4];	/* name -- variable length */
};

/* common flag bits */
#define	ALLOC		BIT(0)	/* val.s has been allocated */
#define	DEFINED		BIT(1)	/* is defined in block */
#define	ISSET		BIT(2)	/* has value, vp->val.[si] */
#define	EXPORT		BIT(3)	/* exported variable/function */
#define	TRACE		BIT(4)	/* var: user flagged, func: execution tracing */
/* (start non-common flags at 8) */
/* flag bits used for variables */
#define	SPECIAL		BIT(8)	/* PATH, IFS, SECONDS, etc */
#define	INTEGER		BIT(9)	/* val.i contains integer value */
#define	RDONLY		BIT(10)	/* read-only variable */
#define	LOCAL		BIT(11)	/* for local typeset() */
#define ARRAY		BIT(13)	/* array */
#define LJUST		BIT(14)	/* left justify */
#define RJUST		BIT(15)	/* right justify */
#define ZEROFIL		BIT(16)	/* 0 filled if RJUSTIFY, strip 0s if LJUSTIFY */
#define LCASEV		BIT(17)	/* convert to lower case */
#define UCASEV_AL	BIT(18)/* convert to upper case / autoload function */
#define INT_U		BIT(19)	/* unsigned integer */
#define INT_L		BIT(20)	/* long integer (no-op) */
#define IMPORT		BIT(21)	/* flag to typeset(): no arrays, must have = */
#define LOCAL_COPY	BIT(22)	/* with LOCAL - copy attrs from existing var */
#define EXPRINEVAL	BIT(23)	/* contents currently being evaluated */
#define EXPRLVALUE	BIT(24)	/* useable as lvalue (temp flag) */
/* flag bits used for taliases/builtins/aliases/keywords/functions */
#define KEEPASN		BIT(8)	/* keep command assignments (eg, var=x cmd) */
#define FINUSE		BIT(9)	/* function being executed */
#define FDELETE		BIT(10)	/* function deleted while it was executing */
#define FKSH		BIT(11)	/* function defined with function x (vs x()) */
#define SPEC_BI		BIT(12)	/* a POSIX special builtin */
#define REG_BI		BIT(13)	/* a POSIX regular builtin */
/* Attributes that can be set by the user (used to decide if an unset param
 * should be repoted by set/typeset).  Does not include ARRAY or LOCAL.
 */
#define USERATTRIB	(EXPORT|INTEGER|RDONLY|LJUST|RJUST|ZEROFIL\
			 |LCASEV|UCASEV_AL|INT_U|INT_L)

/* command types */
#define	CNONE	0		/* undefined */
#define	CSHELL	1		/* built-in */
#define	CFUNC	2		/* function */
#define	CEXEC	4		/* executable command */
#define	CALIAS	5		/* alias */
#define	CKEYWD	6		/* keyword */
#define CTALIAS	7		/* tracked alias */

/* Flags for findcom()/comexec() */
#define FC_SPECBI	BIT(0)	/* special builtin */
#define FC_FUNC		BIT(1)	/* function builtin */
#define FC_REGBI	BIT(2)	/* regular builtin */
#define FC_UNREGBI	BIT(3)	/* un-regular builtin (!special,!regular) */
#define FC_BI		(FC_SPECBI|FC_REGBI|FC_UNREGBI)
#define FC_PATH		BIT(4)	/* do path search */
#define FC_DEFPATH	BIT(5)	/* use default path in path search */


#define AF_ARGV_ALLOC	0x1	/* argv[] array allocated */
#define AF_ARGS_ALLOCED	0x2	/* argument strings allocated */
#define AI_ARGV(a, i)	((i) == 0 ? (a).argv[0] : (a).argv[(i) - (a).skip])
#define AI_ARGC(a)	((a).argc_ - (a).skip)

/* Argument info.  Used for $#, $* for shell, functions, includes, etc. */
struct arg_info {
	int flags;	/* AF_* */
	char **argv;
	int argc_;
	int skip;	/* first arg is argv[0], second is argv[1 + skip] */
};

/*
 * activation record for function blocks
 */
struct block {
	Area	area;		/* area to allocate things */
	/*struct arg_info argi;*/
	char	**argv;
	int	argc;
	int	flags;		/* see BF_* */
	struct	table vars;	/* local variables */
	struct	table funs;	/* local functions */
	Getopt	getopts_state;
#if 1
	char *	error;		/* error handler */
	char *	exit;		/* exit handler */
#else
	Trap	error, exit;
#endif
	struct	block *next;	/* enclosing block */
};

/* Values for struct block.flags */
#define BF_DOGETOPTS	BIT(0)	/* save/restore getopts state */

/*
 * Used by ktwalk() and ktnext() routines.
 */
struct tstate {
	int left;
	struct tbl **next;
};

extern	struct table taliases;	/* tracked aliases */
extern	struct table builtins;	/* built-in commands */
extern	struct table aliases;	/* aliases */
extern	struct table keywords;	/* keywords */
extern	struct table homedirs;	/* homedir() cache */

struct builtin {
	const char   *name;
	int  (*func)(char **);
};

/* these really are externs! Look in table.c for them */
extern const struct builtin shbuiltins [], kshbuiltins [];

/* var spec values */
#define	V_NONE			0
#define	V_PATH			1
#define	V_IFS			2
#define	V_SECONDS		3
#define	V_OPTIND		4
#define	V_MAIL			5
#define	V_MAILPATH		6
#define	V_MAILCHECK		7
#define	V_RANDOM		8
#define	V_HISTCONTROL		9
#define	V_HISTSIZE		10
#define	V_HISTFILE		11
#define	V_VISUAL		12
#define	V_EDITOR		13
#define	V_COLUMNS		14
#define	V_POSIXLY_CORRECT	15
#define	V_TMOUT			16
#define	V_TMPDIR		17
#define	V_LINENO		18

/* values for set_prompt() */
#define PS1	0		/* command */
#define PS2	1		/* command continuation */

extern char *path;		/* copy of either PATH or def_path */
extern const char *def_path;	/* path to use if PATH not set */
extern char *tmpdir;		/* TMPDIR value */
extern const char *prompt;
extern int cur_prompt;		/* PS1 or PS2 */
extern int current_lineno;	/* LINENO value */

unsigned int	hash(const char *);
void		ktinit(struct table *, Area *, int);
struct tbl *	ktsearch(struct table *, const char *, unsigned int);
struct tbl *	ktenter(struct table *, const char *, unsigned int);
void		ktdelete(struct tbl *);
void		ktwalk(struct tstate *, struct table *);
struct tbl *	ktnext(struct tstate *);
struct tbl **	ktsort(struct table *);
@


1.11
log
@Move more declarations out of proto.h into better headers, from Michael
McConville. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.10 2015/10/05 23:26:58 nicm Exp $	*/
d163 10
a172 9
#define V_HISTSIZE		9
#define V_HISTFILE		10
#define V_VISUAL		11
#define V_EDITOR		12
#define V_COLUMNS		13
#define V_POSIXLY_CORRECT	14
#define V_TMOUT			15
#define V_TMPDIR		16
#define V_LINENO		17
@


1.10
log
@Remove EXTERN from table.h and put the definitions in table.c, from
Michael McConville.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.9 2015/09/14 16:08:50 nicm Exp $	*/
d183 9
@


1.9
log
@Replace Tflag typedef with just int; ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.8 2012/02/19 07:52:30 otto Exp $	*/
d139 5
a143 6

EXTERN	struct table taliases;	/* tracked aliases */
EXTERN	struct table builtins;	/* built-in commands */
EXTERN	struct table aliases;	/* aliases */
EXTERN	struct table keywords;	/* keywords */
EXTERN	struct table homedirs;	/* homedir() cache */
d177 6
a182 6
EXTERN char *path;		/* copy of either PATH or def_path */
EXTERN const char *def_path;	/* path to use if PATH not set */
EXTERN char *tmpdir;		/* TMPDIR value */
EXTERN const char *prompt;
EXTERN int cur_prompt;		/* PS1 or PS2 */
EXTERN int current_lineno;	/* LINENO value */
@


1.8
log
@Allow for more vars in hash table, improve hash function, increase
hash table size sooner. Based on suggestion from Michael Niedermayer.
ok krw@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.7 2005/12/11 20:31:21 otto Exp $	*/
d16 1
a16 1
	Tflag	flag;		/* flags */
@


1.7
log
@fix a few name clashes with libc; found by lint. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.6 2004/12/18 20:55:52 millert Exp $	*/
d11 1
a11 1
	short	size, nfree;	/* hash size (always 2^^n), free entries */
@


1.6
log
@Remove unused OS dependent #ifdef blocks, #defines and macro abstraction.
First step in making the ksh code easier to read.  From Matthias Kilian
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.5 1999/06/15 01:18:36 millert Exp $	*/
d132 1
a132 1
 * Used by twalk() and tnext() routines.
@


1.5
log
@patches from pdksh 5.2.13.11
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.4 1998/06/25 19:02:22 millert Exp $	*/
d23 1
a23 1
		int (*f) ARGS((char **));	/* int function */
d148 1
a148 1
	int  (*func) ARGS((char **));
@


1.4
log
@pdksh-5.2.13 + local changes
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.3 1996/11/21 07:59:35 downsj Exp $	*/
d172 1
d183 1
@


1.3
log
@Update to 5.2.12.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.2 1996/08/19 20:09:00 downsj Exp $	*/
d115 1
d118 1
d128 3
d177 5
a181 5
EXTERN	const char   *path;	/* PATH value */
EXTERN	const char   *def_path;	/* path to use if PATH not set */
EXTERN	char   *tmpdir;		/* TMPDIR value */
EXTERN	const char   *prompt;
EXTERN	int	cur_prompt;	/* PS1 or PS2 */
@


1.2
log
@update to pdksh-5.2.8
@
text
@d1 1
a1 1
/*	$OpenBSD: table.h,v 1.1.1.1 1996/08/14 06:19:12 downsj Exp $	*/
d69 5
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 1
a16 1
	INT32	flag;		/* flags */
d27 4
a30 1
	int	field;		/* field with for -L/-R/-Z */
d60 2
d66 3
a68 2
#define SPEC_BI		BIT(11)	/* a POSIX special builtin */
#define REG_BI		BIT(12)	/* a POSIX regular builtin */
@


1.1.1.1
log
@Import pdksh 5.2.7.
@
text
@@
