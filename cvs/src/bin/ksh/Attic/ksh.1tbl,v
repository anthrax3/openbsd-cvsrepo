head	1.91;
access;
symbols
	OPENBSD_3_6:1.72.0.2
	OPENBSD_3_6_BASE:1.72
	OPENBSD_3_5:1.68.0.2
	OPENBSD_3_5_BASE:1.68
	OPENBSD_3_4:1.58.0.2
	OPENBSD_3_4_BASE:1.58
	OPENBSD_3_3:1.50.0.2
	OPENBSD_3_3_BASE:1.50
	OPENBSD_3_2:1.48.0.2
	OPENBSD_3_2_BASE:1.48
	OPENBSD_3_1:1.47.0.4
	OPENBSD_3_1_BASE:1.47
	OPENBSD_3_0:1.47.0.2
	OPENBSD_3_0_BASE:1.47
	OPENBSD_2_9:1.39.0.2
	OPENBSD_2_9_BASE:1.39
	OPENBSD_2_8:1.36.0.2
	OPENBSD_2_8_BASE:1.36
	OPENBSD_2_7:1.33.0.2
	OPENBSD_2_7_BASE:1.33
	OPENBSD_2_6:1.28.0.2
	OPENBSD_2_6_BASE:1.28
	OPENBSD_2_5:1.16.0.2
	OPENBSD_2_5_BASE:1.16
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6;
locks; strict;
comment	@# @;


1.91
date	2005.02.08.14.17.50;	author millert;	state dead;
branches;
next	1.90;

1.90
date	2005.02.05.12.36.21;	author jmc;	state Exp;
branches;
next	1.89;

1.89
date	2005.02.02.07.53.01;	author otto;	state Exp;
branches;
next	1.88;

1.88
date	2005.01.19.19.32.02;	author jmc;	state Exp;
branches;
next	1.87;

1.87
date	2005.01.19.17.15.19;	author jmc;	state Exp;
branches;
next	1.86;

1.86
date	2005.01.17.09.59.02;	author jmc;	state Exp;
branches;
next	1.85;

1.85
date	2005.01.10.11.06.50;	author jmc;	state Exp;
branches;
next	1.84;

1.84
date	2004.12.22.18.58.44;	author millert;	state Exp;
branches;
next	1.83;

1.83
date	2004.12.22.18.48.56;	author millert;	state Exp;
branches;
next	1.82;

1.82
date	2004.12.16.02.10.59;	author jaredy;	state Exp;
branches;
next	1.81;

1.81
date	2004.12.12.17.37.46;	author jmc;	state Exp;
branches;
next	1.80;

1.80
date	2004.12.12.06.53.13;	author deraadt;	state Exp;
branches;
next	1.79;

1.79
date	2004.12.04.07.05.13;	author jaredy;	state Exp;
branches;
next	1.78;

1.78
date	2004.11.08.23.42.02;	author jmc;	state Exp;
branches;
next	1.77;

1.77
date	2004.11.06.01.07.41;	author jmc;	state Exp;
branches;
next	1.76;

1.76
date	2004.11.05.23.40.51;	author jmc;	state Exp;
branches;
next	1.75;

1.75
date	2004.11.05.14.56.31;	author jmc;	state Exp;
branches;
next	1.74;

1.74
date	2004.11.03.19.19.39;	author jaredy;	state Exp;
branches;
next	1.73;

1.73
date	2004.10.28.04.55.51;	author jaredy;	state Exp;
branches;
next	1.72;

1.72
date	2004.08.07.16.46.58;	author millert;	state Exp;
branches;
next	1.71;

1.71
date	2004.08.04.20.01.44;	author jaredy;	state Exp;
branches;
next	1.70;

1.70
date	2004.05.09.06.07.42;	author otto;	state Exp;
branches;
next	1.69;

1.69
date	2004.04.30.06.57.17;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2004.03.15.08.56.56;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2004.03.15.08.52.12;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2004.02.19.22.20.05;	author jmc;	state Exp;
branches;
next	1.65;

1.65
date	2004.01.23.23.08.45;	author jmc;	state Exp;
branches;
next	1.64;

1.64
date	2004.01.15.22.08.45;	author jmc;	state Exp;
branches;
next	1.63;

1.63
date	2003.12.27.20.35.12;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2003.12.22.11.54.02;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2003.12.12.22.35.07;	author naddy;	state Exp;
branches;
next	1.60;

1.60
date	2003.10.28.15.20.32;	author jmc;	state Exp;
branches;
next	1.59;

1.59
date	2003.10.22.19.57.32;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2003.09.04.14.21.43;	author jmc;	state Exp;
branches;
next	1.57;

1.57
date	2003.09.02.18.09.43;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2003.09.01.15.47.40;	author naddy;	state Exp;
branches;
next	1.55;

1.55
date	2003.07.19.08.07.35;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2003.07.07.14.11.58;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2003.06.06.10.05.52;	author jmc;	state Exp;
branches;
next	1.52;

1.52
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.51;

1.51
date	2003.04.28.06.27.36;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2003.03.20.07.30.37;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2003.03.14.11.05.55;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2002.09.18.07.33.47;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2001.09.24.19.15.11;	author camield;	state Exp;
branches;
next	1.46;

1.46
date	2001.09.02.14.05.58;	author aaron;	state Exp;
branches;
next	1.45;

1.45
date	2001.08.25.21.26.29;	author heko;	state Exp;
branches;
next	1.44;

1.44
date	2001.08.23.05.21.51;	author pvalchev;	state Exp;
branches;
next	1.43;

1.43
date	2001.08.03.19.19.01;	author aaron;	state Exp;
branches;
next	1.42;

1.42
date	2001.07.31.10.35.09;	author hugh;	state Exp;
branches;
next	1.41;

1.41
date	2001.06.23.14.42.13;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2001.05.28.15.36.08;	author aaron;	state Exp;
branches;
next	1.39;

1.39
date	2001.04.12.02.51.09;	author aaron;	state Exp;
branches;
next	1.38;

1.38
date	2001.02.20.05.47.14;	author aaron;	state Exp;
branches;
next	1.37;

1.37
date	2001.01.16.14.18.39;	author aaron;	state Exp;
branches;
next	1.36;

1.36
date	2000.10.19.18.29.27;	author aaron;	state Exp;
branches;
next	1.35;

1.35
date	2000.07.06.05.42.41;	author aaron;	state Exp;
branches;
next	1.34;

1.34
date	2000.07.06.05.36.51;	author aaron;	state Exp;
branches;
next	1.33;

1.33
date	2000.03.21.14.06.54;	author aaron;	state Exp;
branches;
next	1.32;

1.32
date	2000.03.17.18.48.43;	author aaron;	state Exp;
branches;
next	1.31;

1.31
date	2000.03.17.18.15.16;	author aaron;	state Exp;
branches;
next	1.30;

1.30
date	2000.03.14.20.25.46;	author aaron;	state Exp;
branches;
next	1.29;

1.29
date	99.11.20.07.58.02;	author dugsong;	state Exp;
branches;
next	1.28;

1.28
date	99.10.17.19.42.25;	author aaron;	state Exp;
branches;
next	1.27;

1.27
date	99.10.16.20.31.33;	author aaron;	state Exp;
branches;
next	1.26;

1.26
date	99.09.23.23.25.10;	author aaron;	state Exp;
branches;
next	1.25;

1.25
date	99.08.04.19.11.14;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	99.07.14.15.18.49;	author aaron;	state Exp;
branches;
next	1.23;

1.23
date	99.07.05.19.50.53;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	99.07.01.17.48.29;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	99.06.15.01.18.34;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	99.06.14.03.13.58;	author pjanzen;	state Exp;
branches;
next	1.19;

1.19
date	99.06.03.09.50.31;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.05.30.17.44.56;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.05.28.12.23.06;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.03.18.11.07.07;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.03.02.23.46.53;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.03.01.06.05.35;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.01.19.20.41.53;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	98.10.29.04.09.20;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.09.27.02.49.24;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	98.09.07.16.44.32;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	98.09.01.16.38.15;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.07.24.20.50.02;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.06.25.19.02.03;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.03.27.20.20.41;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.03.18.03.04.54;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	98.01.17.18.53.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.11.21.08.18.19;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.11.21.07.59.30;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.10.01.09.05.21;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.91
log
@Move sh.1tbl -> sh.1 and ksh.1tbl -> ksh.1
@
text
@.\"	$OpenBSD: ksh.1tbl,v 1.90 2005/02/05 12:36:21 jmc Exp $
.\"
.\"	Public Domain
.\"
.Dd August 19, 1996
.Dt KSH 1
.Os
.Sh NAME
.Nm ksh
.Nd public domain Korn shell
.Sh SYNOPSIS
.Nm ksh
.Op Fl +abCefhiklmnprsuvxX
.Op Fl +o Ar option
.Xo
.Bk -words
.Oo Oo Fl c Ar command-string
.Op Ar command-name
.Li \&| Fl s
.Li \&| Ar file Oc
.Ek
.Op Ar argument ... Oc
.Xc
.Sh DESCRIPTION
.Nm
is a command interpreter intended for both interactive and shell
script use.
Its command language is a superset of the
.Xr sh 1
shell language.
.Ss Shell startup
The following options can be specified only on the command line:
.Bl -tag -width Ds
.It Fl c Ar command-string
.Nm
will execute the command(s) contained in
.Ar command-string .
.It Fl i
Interactive mode; see below.
.It Fl l
Login shell; see below.
.It Fl s
The shell reads commands from standard input; all non-option arguments
are positional parameters.
.It Fl r
Restricted mode; see below.
.El
.Pp
In addition to the above, the options described in the
.Ic set
built-in command can also be used on the command line.
.Pp
If neither the
.Fl c
nor the
.Fl s
option is specified, the first non-option argument specifies the name
of a file the shell reads commands from.
If there are no non-option
arguments, the shell reads commands from the standard input.
The name of
the shell (i.e., the contents of
.Ic $0 )
is determined as follows: if the
.Fl c
option is used and there is a non-option argument, it is used as the name;
if commands are being read from a file, the file is used as the name;
otherwise, the name the shell was called with (i.e.,
.Li argv[0] )
is used.
.Pp
A shell is
.Dq interactive
if the
.Fl i
option is used or if both standard input and standard error are attached
to a
.Xr tty 4 .
An interactive shell has job control enabled (if available), ignores the
.Dv SIGINT ,
.Dv SIGQUIT ,
and
.Dv SIGTERM
signals, and prints prompts before reading input (see
.Ev PS1
and
.Ev PS2
parameters).
For non-interactive shells, the
.Ic trackall
option is on by default (see the
.Ic set
command below).
.Pp
A shell is
.Dq restricted
if the
.Fl r
option is used or if either the basename of the name the shell was invoked
with or the
.Ev SHELL
parameter match the pattern
.Dq \&*r\&*sh
(e.g.,
.Dq rsh ,
.Dq rksh ,
.Dq rpdksh ,
etc.).
The following restrictions come into effect after the shell processes any
profile and
.Ev ENV
files:
.Pp
.Bl -bullet -compact
.It
The
.Ic cd
command is disabled.
.It
The
.Ev SHELL ,
.Ev ENV ,
and
.Ev PATH
parameters cannot be changed.
.It
Command names can't be specified with absolute or relative paths.
.It
The
.Fl p
option of the built-in command
.Ic command
can't be used.
.It
Redirections that create files can't be used (i.e.,
.Ql > ,
.Ql >| ,
.Ql >> ,
.Ql <> ) .
.El
.Pp
A shell is
.Dq privileged
if the
.Fl p
option is used or if the real user ID or group ID does not match the
effective user ID or group ID (see
.Xr getuid 2
and
.Xr getgid 2 ) .
A privileged shell does not process
.Pa $HOME/.profile
nor the
.Ev ENV
parameter (see below).
Instead, the file
.Pa /etc/suid_profile
is processed.
Clearing the privileged option causes the shell to set
its effective user ID (group ID) to its real user ID (group ID).
.Pp
If the basename of the name the shell is called with (i.e.,
.Li argv[0] )
starts with
.Ql -
or if the
.Fl l
option is used,
the shell is assumed to be a login shell and the shell reads and executes
the contents of
.Pa /etc/profile
and
.Pa $HOME/.profile
if they exist and are readable.
.Pp
If the
.Ev ENV
parameter is set when the shell starts (or, in the case of login shells,
after any profiles are processed), its value is subjected to parameter,
command, arithmetic, and tilde
.Pq Sq \&~
substitution and the resulting file
(if any) is read and executed.
If the
.Ev ENV
parameter is not set (and not
.Dv NULL )
and
.Nm pdksh
was compiled with the
.Dv DEFAULT_ENV
macro defined, the file named in that macro is included (after the above
mentioned substitutions have been performed).
.Pp
The exit status of the shell is 127 if the command file specified on the
command line could not be opened, or non-zero if a fatal syntax error
occurred during the execution of a script.
In the absence of fatal errors,
the exit status is that of the last command executed, or zero, if no
command is executed.
.Ss Command syntax
The shell begins parsing its input by breaking it into
.Em words .
Words, which are sequences of characters, are delimited by unquoted whitespace
characters (space, tab, and newline) or meta-characters
.Po
.Ql < ,
.Ql > ,
.Ql | ,
.Ql \&; ,
.Ql ( ,
and
.Ql \&)
.Pc .
Aside from delimiting words, spaces and tabs are ignored, while newlines
usually delimit commands.
The meta-characters are used in building the following tokens:
.Ql < ,
.Ql <& ,
.Ql << ,
.Ql > ,
.Ql >& ,
.Ql >> ,
etc. are used to specify redirections (see
.Sx Input/output redirection
below);
.Ql |
is used to create pipelines;
.Ql |&
is used to create co-processes (see
.Sx Co-processes
below);
.Ql \&;
is used to separate commands;
.Ql &
is used to create asynchronous pipelines;
.Ql &&
and
.Ql ||
are used to specify conditional execution;
.Ql \&;\&;
is used in
.Ic case
statements;
.Ql \&(\&( .. \&)\&)
is used in arithmetic expressions;
and lastly,
.Ql \&( .. \&)
is used to create subshells.
.Pp
Whitespace and meta-characters can be quoted individually using a backslash
.Pq Sq \e ,
or in groups using double
.Pq Sq \&"
or single
.Pq Sq \&'
quotes.
Note that the following characters are also treated specially by the
shell and must be quoted if they are to represent themselves:
.Ql \e ,
.Ql \&" ,
.Ql ' ,
.Ql # ,
.Ql $ ,
.Ql ` ,
.Ql ~ ,
.Ql { ,
.Ql } ,
.Ql * ,
.Ql \&? ,
and
.Ql [ .
The first three of these are the above mentioned quoting characters (see
.Sx Quoting
below);
.Ql # ,
if used at the beginning of a word, introduces a comment \(em everything after
the
.Ql #
up to the nearest newline is ignored;
.Ql $
is used to introduce parameter, command, and arithmetic substitutions (see
.Sx Substitution
below);
.Ql `
introduces an old-style command substitution (see
.Sx Substitution
below);
.Ql ~
begins a directory expansion (see
.Sx Tilde expansion
below);
.Ql {
and
.Ql }
delimit
.Xr csh 1
style alterations (see
.Sx Brace expansion
below);
and finally,
.Ql * ,
.Ql \&? ,
and
.Ql [
are used in file name generation (see
.Sx File name patterns
below).
.Pp
As words and tokens are parsed, the shell builds commands, of which there
are two basic types:
.Em simple-commands ,
typically programs that are executed, and
.Em compound-commands ,
such as
.Ic for
and
.Ic if
statements, grouping constructs, and function definitions.
.Pp
A simple-command consists of some combination of parameter assignments
(see
.Sx Parameters
below),
input/output redirections (see
.Sx Input/output redirections
below),
and command words; the only restriction is that parameter assignments come
before any command words.
The command words, if any, define the command
that is to be executed and its arguments.
The command may be a shell built-in
command, a function or an external command (i.e., a separate executable file
that is located using the
.Ev PATH
parameter (see
.Sx Command execution
below)).
Note that all command constructs have an exit status: for external commands,
this is related to the status returned by
.Xr wait 2
(if the command could not be found, the exit status is 127; if it could not
be executed, the exit status is 126); the exit status of other command
constructs (built-in commands, functions, compound-commands, pipelines, lists,
etc.) are all well-defined and are described where the construct is
described.
The exit status of a command consisting only of parameter
assignments is that of the last command substitution performed during the
parameter assignment or 0 if there were no command substitutions.
.Pp
Commands can be chained together using the
.Ql |
token to form pipelines, in which the standard output of each command but the
last is piped (see
.Xr pipe 2 )
to the standard input of the following command.
The exit status of a pipeline is that of its last command.
A pipeline may be prefixed by the
.Ql \&!
reserved word, which causes the exit status of the pipeline to be logically
complemented: if the original status was 0, the complemented status will be 1;
if the original status was not 0, the complemented status will be 0.
.Pp
.Em Lists
of commands can be created by separating pipelines by any of the following
tokens:
.Ql && ,
.Ql || ,
.Ql & ,
.Ql |& ,
and
.Ql \&; .
The first two are for conditional execution:
.Dq Ar cmd1 No && Ar cmd2
executes
.Ar cmd2
only if the exit status of
.Ar cmd1
is zero;
.Ql ||
is the opposite \(em
.Ar cmd2
is executed only if the exit status of
.Ar cmd1
is non-zero.
.Ql &&
and
.Ql ||
have equal precedence which is higher than that of
.Ql & ,
.Ql |& ,
and
.Ql \&; ,
which also have equal precedence.
Note that the
.Ql &&
and
.Ql ||
operators are
.Qq left-associative .
For example, both of these commands will print only
.Qq bar :
.Bd -literal -offset indent
false && echo foo || echo bar
true || echo foo && echo bar
.Ed
.Pp
The
.Ql &
token causes the preceding command to be executed asynchronously; that is,
the shell starts the command but does not wait for it to complete (the shell
does keep track of the status of asynchronous commands, see
.Sx Job control
below).
When an asynchronous command is started when job control is disabled
(i.e., in most scripts), the command is started with signals
.Dv SIGINT
and
.Dv SIGQUIT
ignored and with input redirected from
.Pa /dev/null
(however, redirections specified in the asynchronous command have precedence).
The
.Ql |&
operator starts a co-process which is a special kind of asynchronous process
(see
.Sx Co-processes
below).
Note that a command must follow the
.Ql &&
and
.Ql ||
operators, while it need not follow
.Ql & ,
.Ql |& ,
or
.Ql \&; .
The exit status of a list is that of the last command executed, with the
exception of asynchronous lists, for which the exit status is 0.
.Pp
Compound commands are created using the following reserved words.
These words
are only recognized if they are unquoted and if they are used as the first
word of a command (i.e., they can't be preceded by parameter assignments or
redirections):
.Bd -literal -offset center
case     else     function then     !
do       esac     if       time     [[
done     fi       in       until    {
elif     for      select   while    }
.Ed
.Pp
.Sy Note:
Some shells (but not this one) execute control structure commands in a
subshell when one or more of their file descriptors are redirected, so any
environment changes inside them may fail.
To be portable, the
.Ic exec
statement should be used instead to redirect file descriptors before the
control structure.
.Pp
In the following compound command descriptions, command lists (denoted as
.Em list )
that are followed by reserved words must end with a semicolon, a newline, or
a (syntactically correct) reserved word.
For example,
.Bd -unfilled -offset indent
.Ic { echo foo; echo bar; }
.Ic { echo foo; echo bar<newline> }
.Ic { { echo foo; echo bar; } }
.Ed
.Pp
are all valid, but
.Bd -unfilled -offset indent
.Ic { echo foo; echo bar }
.Ed
.Pp
is not.
.Bl -tag -width Ds
.It Ic \&( Ar list Ic \&)
Execute
.Ar list
in a subshell.
There is no implicit way to pass environment changes from a
subshell back to its parent.
.It Ic \&{ Ar list Ic \&}
Compound construct;
.Ar list
is executed, but not in a subshell.
Note that
.Ic \&{
and
.Ic \&}
are reserved words, not meta-characters.
.It Xo Ic case Ar word Ic in [
.Ns [ Ic \&( ] Ar pattern [
.Ns Ic \&| Ar pattern ] ... Ic \&)
.Ar list Ic \&;\&;
.Ns ] Ar ...
.Ic esac
.Xc
The
.Ic case
statement attempts to match
.Ar word
against the specified
.Ar pattern Ns s ;
the
.Ar list
associated with the first successfully matched pattern is executed.
Patterns used in
.Ic case
statements are the same as those used for file name patterns except that the
restrictions regarding
.Ql \&.
and
.Ql /
are dropped.
Note that any unquoted space before and after a pattern is
stripped; any space within a pattern must be quoted.
Both the word and the
patterns are subject to parameter, command, and arithmetic substitution, as
well as tilde substitution.
For historical reasons, open and close braces may be used instead of
.Ic in
and
.Ic esac
(e.g.,
.Ic case $foo { *) echo bar; } ) .
The exit status of a
.Ic case
statement is that of the executed
.Ar list ;
if no
.Ar list
is executed, the exit status is zero.
.It Xo Ic for Ar name No [
.Ic in Ar word ... term Ns ]
.Ic do Ar list Ic done
.Xc
For each
.Ar word
in the specified word list, the parameter
.Ar name
is set to the word and
.Ar list
is executed.
If
.Ic in
is not used to specify a word list, the positional parameters
.Po
.Ic $1 , $2 ,
etc.\&
.Pc
are used instead.
For historical reasons, open and close braces may be used instead of
.Ic do
and
.Ic done
(e.g.,
.Ic for i\&; { echo $i; } ) .
The exit status of a
.Ic for
statement is the last exit status of
.Ar list ;
if
.Ar list
is never executed, the exit status is zero.
.Ar term
is either a newline or a
.Ql \&; .
.It Xo Ic if Ar list Ic then
.Ar list [ Ic elif Ar list Ic then
.Ar list ] Ar ... [ Ic else
.Ar list ] Ic fi
.Xc
If the exit status of the first
.Ar list
is zero, the second
.Ar list
is executed; otherwise, the
.Ar list
following the
.Ic elif ,
if any, is executed with similar consequences.
If all the lists following the
.Ic if
and
.Ic elif Ns s
fail (i.e., exit with non-zero status), the
.Ar list
following the
.Ic else
is executed.
The exit status of an
.Ic if
statement is that of non-conditional
.Ar list
that is executed; if no non-conditional
.Ar list
is executed, the exit status is zero.
.It Xo Ic select Ar name No [
.Ic in Ar word ... term Ns ]
.Ic do Ar list Ic done
.Xc
The
.Ic select
statement provides an automatic method of presenting the user with a menu and
selecting from it.
An enumerated list of the specified
.Ar word Ns s
is printed on standard error, followed by a prompt
.Po
.Ev PS3, normally
.Dq #?\ \&
.Pc .
A number corresponding to one of the enumerated words is then read from
standard input,
.Ar name
is set to the selected word (or unset if the selection is not valid),
.Ev REPLY
is set to what was read (leading/trailing space is stripped), and
.Ar list
is executed.
If a blank line (i.e., zero or more
.Ev IFS
characters) is entered, the menu is reprinted without executing
.Ar list .
When
.Ar list
completes, the enumerated list is printed if
.Ev REPLY
is
.Dv NULL ,
the prompt is printed and so on.
This process continues until an end-of-file
is read, an interrupt is received, or a
.Ic break
statement is executed inside the loop.
If
.Ic in Ar word ...\&
is omitted, the positional parameters are used (i.e.,
.Ic $1 , $2 ,
etc.).
For historical reasons, open and close braces may be used instead of
.Ic do
and
.Ic done
(e.g.,
.Ic select i; { echo $i; } ) .
The exit status of a
.Ic select
statement is zero if a
.Ic break
statement is used to exit the loop, non-zero otherwise.
.It Xo Ic until Ar list Ic do Ar list
.Ic done
.Xc
This works like
.Ic while ,
except that the body is executed only while the exit status of the first
.Ar list
is non-zero.
.It Xo Ic while Ar list Ic do Ar list
.Ic done
.Xc
A
.Ic while
is a pre-checked loop.
Its body is executed as often as the exit status of the first
.Ar list
is zero.
The exit status of a
.Ic while
statement is the last exit status of the
.Ar list
in the body of the loop; if the body is not executed, the exit status is zero.
.It Xo Ic function Ar name Ic \&{
.Ar list Ic \&}
.Xc
Defines the function
.Ar name
(see
.Sx Functions
below).
Note that redirections specified after a function definition are
performed whenever the function is executed, not when the function definition
is executed.
.It Ar name Ic () Ar command
Mostly the same as
.Ic function
(see
.Sx Functions
below).
.It Xo Ic time Op Fl p
.Op Ar pipeline
.Xc
The
.Ic time
reserved word is described in the
.Sx Command execution
section.
.It Ic (( Ar expression Ic ))
The arithmetic expression
.Ar expression
is evaluated; equivalent to
.Ic let Ar expression
(see
.Sx Arithmetic expressions
and the
.Ic let
command below).
.It Ic [[ Ar expression Ic ]]
Similar to the
.Ic test
and
.Ic \&[ Ar ... Ic \&]
commands (described later), with the following exceptions:
.Bl -bullet -offset indent
.It
Field splitting and file name generation are not performed on arguments.
.It
The
.Fl a
.Pq Tn AND
and
.Fl o
.Pq Tn OR
operators are replaced with
.Ql &&
and
.Ql || ,
respectively.
.It
Operators (e.g.,
.Sq Fl f ,
.Sq = ,
.Sq \&! ,
etc.) must be unquoted.
.It
The second operand of the
.Sq !=
and
.Sq =
expressions are patterns (e.g., the comparison
.Ic [[ foobar = f*r ]]
succeeds).
.It
There are two additional binary operators:
.Ql <
and
.Ql >
which return true if their first string operand is less than, or greater than,
their second string operand, respectively.
.It
The single argument form of
.Ic test ,
which tests if the argument has a non-zero length, is not valid; explicit
operators must always be used (e.g., instead of
.Ic \&[ Ar str Ic \&]
use
.Ic \&[[ Fl n Ar str Ic \&]] ) .
.It
Parameter, command, and arithmetic substitutions are performed as expressions
are evaluated and lazy expression evaluation is used for the
.Ql &&
and
.Ql ||
operators.
This means that in the statement
.Pp
.Dl Ic "[[ -r foo && $(< foo) = b*r ]]"
.Pp
the
.Ic $(< foo)
is evaluated if and only if the file
.Pa foo
exists and is readable.
.El
.El
.Ss Quoting
Quoting is used to prevent the shell from treating characters or words
specially.
There are three methods of quoting.
First,
.Ql \e
quotes the following character, unless it is at the end of a line, in which
case both the
.Ql \e
and the newline are stripped.
Second, a single quote
.Pq Sq '
quotes everything up to the next single quote (this may span lines).
Third, a double quote
.Pq Sq \&"
quotes all characters, except
.Ql $ ,
.Ql `
and
.Ql \e ,
up to the next unquoted double quote.
.Ql $
and
.Ql `
inside double quotes have their usual meaning (i.e., parameter, command or
arithmetic substitution) except no field splitting is carried out on the
results of double-quoted substitutions.
If a
.Ql \e
inside a double-quoted string is followed by
.Ql \e ,
.Ql $ ,
.Ql ` ,
or
.Ql \&" ,
it is replaced by the second character; if it is followed by a newline, both
the
.Ql \e
and the newline are stripped; otherwise, both the
.Ql \e
and the character following are unchanged.
.Pp
.Sy Note:
See
.Sx POSIX mode
below for a special rule regarding sequences of the form
.Ic \&"...`...\e\&"...`..\&" .
.Ss Aliases
There are two types of aliases: normal command aliases and tracked aliases.
Command aliases are normally used as a short hand for a long or often used
command.
The shell expands command aliases (i.e., substitutes the alias name
for its value) when it reads the first word of a command.
An expanded alias is re-processed to check for more aliases.
If a command alias ends in a
space or tab, the following word is also checked for alias expansion.
The alias expansion process stops when a word that is not an alias is found,
when a quoted word is found or when an alias word that is currently being
expanded is found.
.Pp
The following command aliases are defined automatically by the shell:
.Pp
.Bl -item -offset indent -compact
.It
.Ic autoload='typeset -fu'
.It
.Ic functions='typeset -f'
.It
.Ic hash='alias -t'
.It
.Ic history='fc -l'
.It
.Ic integer='typeset -i'
.It
.Ic local='typeset'
.It
.Ic login='exec login'
.It
.Ic nohup='nohup '
.It
.Ic r='fc -e -'
.It
.Ic stop='kill -STOP'
.It
.Ic suspend='kill -STOP $$'
.It
.Ic type='whence -v'
.El
.Pp
Tracked aliases allow the shell to remember where it found a particular
command.
The first time the shell does a path search for a command that is
marked as a tracked alias, it saves the full path of the command.
The next
time the command is executed, the shell checks the saved path to see that it
is still valid, and if so, avoids repeating the path search.
Tracked aliases can be listed and created using
.Ic alias -t .
Note that changing the
.Ev PATH
parameter clears the saved paths for all tracked aliases.
If the
.Ic trackall
option is set (i.e.,
.Ic set Fl o Ic trackall
or
.Ic set Fl h ) ,
the shell tracks all commands.
This option is set automatically for non-interactive shells.
For interactive shells, only the following commands are
automatically tracked:
.Ic cat , cc , chmod , cp ,
.Ic date , ed , emacs , grep ,
.Ic ls , mail , make , mv ,
.Ic pr , rm , sed , sh ,
.Ic vi ,
and
.Ic who .
.Ss Substitution
The first step the shell takes in executing a simple-command is to perform
substitutions on the words of the command.
There are three kinds of
substitution: parameter, command, and arithmetic.
Parameter substitutions,
which are described in detail in the next section, take the form
.Ic $ Ns Ar name
or
.Ic ${ Ns Ar ... Ns Ic \&} ;
command substitutions take the form
.Ic $( Ns Ar command Ns Ic \&)
or
.Ic ` Ns Ar command Ns Ic ` ;
and arithmetic substitutions take the form
.Ic $(( Ns Ar expression Ns Ic )) .
.Pp
If a substitution appears outside of double quotes, the results of the
substitution are generally subject to word or field splitting according to
the current value of the
.Ev IFS
parameter.
The
.Ev IFS
parameter specifies a list of characters which are used to break a string up
into several words; any characters from the set space, tab, and newline that
appear in the
.Ev IFS
characters are called
.Dq IFS whitespace .
Sequences of one or more
.Ev IFS
whitespace characters, in combination with zero or one
.Pf non- Ev IFS
whitespace
characters, delimit a field.
As a special case, leading and trailing
.Ev IFS
whitespace is stripped (i.e., no leading or trailing empty field is created by
it); leading
.Pf non- Ev IFS
whitespace does create an empty field.
.Pp
Example: If
.Ev IFS
is set to
.Dq <space>: ,
the sequence of characters
.Dq <space>A<space>:<space><space>B::D
contains four fields:
.Sq A ,
.Sq B ,
.Sq
(an empty field),
and
.Sq D .
Note that if the
.Ev IFS
parameter is set to the
.Dv NULL
string, no field splitting is done; if the parameter is unset, the default
value of space, tab, and newline is used.
.Pp
The results of substitution are, unless otherwise specified, also subject to
brace expansion and file name expansion (see the relevant sections below).
.Pp
A command substitution is replaced by the output generated by the specified
command, which is run in a subshell.
For
.Ic $( Ns Ar command Ns Ic \&)
substitutions, normal quoting rules are used when
.Ar command
is parsed; however, for the
.Ic ` Ns Ar command Ns Ic `
form, a
.Ql \e
followed by any of
.Ql $ ,
.Ql ` ,
or
.Ql \e
is stripped (a
.Ql \e
followed by any other character is unchanged).
As a special case in command substitutions, a command of the form
.Ic \&< Ar file
is interpreted to mean substitute the contents of
.Ar file
(note that
.Ic $(< foo)
has the same effect as
.Ic $(cat foo) ,
but it is carried out more efficiently because no process is started).
.Pp
.Sy Note:
.Ic $( Ns Ar command Ns Ic \&)
expressions are currently parsed by finding the matching parenthesis,
regardless of quoting.
This should be fixed soon.
.Pp
Arithmetic substitutions are replaced by the value of the specified expression.
For example, the command
.Ic echo $((2+3*4))
prints 14.
See
.Sx Arithmetic expressions
for a description of an expression.
.Ss Parameters
Parameters are shell variables; they can be assigned values and their values
can be accessed using a parameter substitution.
A parameter name is either one
of the special single punctuation or digit character parameters described
below, or a letter followed by zero or more letters or digits
.Po
.Ql _
counts as a letter
.Pc .
The latter form can be treated as arrays by appending an array index of the
form
.Op Ar expr
where
.Ar expr
is an arithmetic expression.
Array indices are currently limited to the range 0 through 1023, inclusive.
Parameter substitutions take the form
.Ic $ Ns Ar name ,
.Ic ${ Ns Ar name Ns Ic \&} ,
or
.Sm off
.Xo
.Ic ${ Ar name Oo Ar expr Oc
.Ic \&} ,
.Xc
.Sm on
where
.Ar name
is a parameter name.
If substitution is performed on a parameter
(or an array parameter element)
that is not set, a null string is substituted unless the
.Ic nounset
option
.Po
.Ic set Fl o Ic nounset
or
.Ic set Fl u
.Pc
is set, in which case an error occurs.
.Pp
Parameters can be assigned values in a number of ways.
First, the shell implicitly sets some parameters like
.Ic # , PWD ,
etc.; this is the only way the special single character parameters are set.
Second, parameters are imported from the shell's environment at startup.
Third, parameters can be assigned values on the command line, for example,
.Ic FOO=bar
sets the parameter
.Ev FOO
to
.Dq bar ;
multiple parameter assignments can be given on a single command line and they
can be followed by a simple-command, in which case the assignments are in
effect only for the duration of the command (such assignments are also
exported, see below for implications of this).
Note that both the parameter name and the
.Ql =
must be unquoted for the shell to recognize a parameter assignment.
The fourth way of setting a parameter is with the
.Ic export ,
.Ic readonly
and
.Ic typeset
commands; see their descriptions in the
.Sx Command execution
section.
Fifth,
.Ic for
and
.Ic select
loops set parameters as well as the
.Ic getopts ,
.Ic read
and
.Ic set Fl A
commands.
Lastly, parameters can be assigned values using assignment operators
inside arithmetic expressions (see
.Sx Arithmetic expressions
below) or using the
.Xo Ic ${ Ns Ar name Ns =
.Ns Ar value Ns Ic \&}
.Xc
form of the parameter substitution (see below).
.Pp
Parameters with the export attribute (set using the
.Ic export
or
.Ic typeset Fl x
commands, or by parameter assignments followed by simple commands) are put in
the environment (see
.Xr environ 7 )
of commands run by the shell as
.Ar name Ns = Ns Ar value
pairs.
The order in which parameters appear in the environment of a command is
unspecified.
When the shell starts up, it extracts parameters and their values
from its environment and automatically sets the export attribute for those
parameters.
.Pp
Modifiers can be applied to the
.Ic ${ Ns Ar name Ns Ic \&}
form of parameter substitution:
.Bl -tag -width Ds
.It Xo Ic ${ Ns Ar name Ns
.Ic \&:\&- Ns Ar word Ns Ic \&}
.Xc
If
.Ar name
is set and not
.Dv NULL ,
it is substituted; otherwise,
.Ar word
is substituted.
.It Xo Ic ${ Ns Ar name Ns
.Ic \&:\&+ Ns Ar word Ns Ic \&}
.Xc
If
.Ar name
is set and not
.Dv NULL ,
.Ar word
is substituted; otherwise, nothing is substituted.
.It Xo Ic ${ Ns Ar name Ns
.Ic \&:\&= Ns Ar word Ns Ic \&}
.Xc
If
.Ar name
is set and not
.Dv NULL ,
it is substituted; otherwise, it is assigned
.Ar word
and the resulting value of
.Ar name
is substituted.
.It Xo Ic ${ Ns Ar name Ns
.Ic \&:\&? Ns Ar word Ns Ic \&}
.Xc
If
.Ar name
is set and not
.Dv NULL ,
it is substituted; otherwise,
.Ar word
is printed on standard error (preceded by
.Ar name Ns \&: )
and an error occurs (normally causing termination of a shell script, function
or .-script).
If word is omitted the string
.Dq parameter null or not set
is used instead.
.El
.Pp
In the above modifiers, the
.Ql \&:
can be omitted, in which case the conditions only depend on
.Ar name
being set (as opposed to set and not
.Dv NULL ) .
If
.Ar word
is needed, parameter, command, arithmetic, and tilde substitution are performed
on it; if
.Ar word
is not needed, it is not evaluated.
.Pp
The following forms of parameter substitution can also be used:
.Bl -tag -width Ds
.It Ic ${# Ns Ar name Ns Ic \&}
The number of positional parameters if
.Ar name
is
.Ql * ,
.Ql @@ ,
not specified, or the length of the string value of parameter
.Ar name .
.It Xo Ic ${# Ns Ar name Ns
.Ic [*\&]} , ${# Ns Ar name Ns Ic [@@\&]}
.Xc
The number of elements in the array
.Ar name .
.Sm off
.It Xo
.Ic ${ Ar name Ic # Ar pattern
.Sm on
.Ic } ,
.Sm off
.Ic ${ Ar name Ic ## Ar pattern Ic \&}
.Xc
.Sm on
If
.Ar pattern
matches the beginning of the value of parameter
.Ar name ,
the matched text is deleted from the result of substitution.
A single
.Ql #
results in the shortest match, and two
of them result in the longest match.
.Sm off
.It Xo
.Ic ${ Ar name Ic % Ar pattern
.Sm on
.Ic } ,
.Sm off
.Ic ${ Ar name Ic %% Ar pattern Ic }
.Xc
.Sm on
Like
.Ic ${..#..}
substitution, but it deletes from the end of the value.
.El
.Pp
The following special parameters are implicitly set by the shell and cannot be
set directly using assignments:
.Bl -tag -width "1 ... 9"
.It Ev \&!
Process ID of the last background process started.
If no background processes have been started, the parameter is not set.
.It Ev \&#
The number of positional parameters (i.e.,
.Ic $1 , $2 ,
etc.).
.It Ev \&$
The process ID of the shell, or the
.Tn PID
of the original shell if it is a subshell.
Do
.Em NOT
use this mechanism for generating temporary file names; see
.Xr mktemp 1
instead.
.It Ev \&-
The concatenation of the current single letter options (see the
.Ic set
command below for a list of options).
.It Ev \&?
The exit status of the last non-asynchronous command executed.
If the last command was killed by a signal,
.Ic \&$?\&
is set to 128 plus the signal number.
.It Ev 0
The name the shell was invoked with (i.e.,
.Li argv[0] ) ,
or the
.Ar command-name
if it was invoked with the
.Fl c
option and the
.Ar command-name
was supplied, or the
.Ar file
argument, if it was supplied.
If the
.Ic posix
option is not set,
.Ic \&$0
is the name of the current function or script.
.It Ev 1 ... Ev 9
The first nine positional parameters that were supplied to the shell, function
or .-script.
Further positional parameters may be accessed using
.Ic ${ Ns Ar number Ns Ic \&} .
.It Ev \&*
All positional parameters (except parameter 0); i.e.,
.Ic $1 , $2 , $3 ,
\&...
If used
outside of double quotes, parameters are separate words (which are subjected
to word splitting); if used within double quotes, parameters are separated
by the first character of the
.Ev IFS
parameter (or the empty string if
.Ev IFS
is
.Dv NULL ) .
.It Ev \&@@
Same as
.Ic \&$\&* ,
unless it is used inside double quotes, in which case a separate word is
generated for each positional parameter.
If there are no positional parameters, no word is generated.
.Ic \&$\&@@
can be used to access arguments, verbatim, without losing
.Dv NULL
arguments or splitting arguments with spaces.
.El
.Pp
The following parameters are set and/or used by the shell:
.Bl -tag -width "EXECSHELL"
.It Ev \&_ No (underscore)
When an external command is executed by the shell, this parameter is set in the
environment of the new process to the path of the executed command.
In interactive use, this parameter is also set in the parent shell to the last
word of the previous command.
When
.Ev MAILPATH
messages are evaluated, this parameter contains the name of the file that
changed (see
.Ev MAILPATH
parameter below).
.It Ev CDPATH
Search path for the
.Ic cd
built-in command.
Works the same way as
.Ev PATH
for those directories not beginning with
.Ql /
in
.Ic cd
commands.
Note that if
.Ev CDPATH
is set and does not contain
.Dq \&.
or contains an empty path, the current directory is not searched.
Also, the
.Ic cd
built-in command will display the resulting directory when a match is found
in any search path other than the empty path.
.It Ev COLUMNS
Set to the number of columns on the terminal or window.
Currently set to the
.Dq cols
value as reported by
.Xr stty 1
if that value is non-zero.
This parameter is used by the interactive line editing modes, and by the
.Ic select ,
.Ic set Fl o ,
and
.Ic kill Fl l
commands to format information columns.
.It Ev EDITOR
If the
.Ev VISUAL
parameter is not set, this parameter controls the command-line editing mode for
interactive shells.
See
.Ev VISUAL
parameter below for how this works.
.It Ev ENV
If this parameter is found to be set after any profile files are executed, the
expanded value is used as a shell startup file.
It typically contains function and alias definitions.
.It Ev ERRNO
Integer value of the shell's
.Va errno
variable.
It indicates the reason the last system call failed.
Not yet implemented.
.It Ev EXECSHELL
If set, this parameter is assumed to contain the shell that is to be used to
execute commands that
.Xr execve 2
fails to execute and which do not start with a
.Dq \&#\&! Ns Ar shell
sequence.
.It Ev FCEDIT
The editor used by the
.Ic fc
command (see below).
.It Ev FPATH
Like
.Ev PATH ,
but used when an undefined function is executed to locate the file defining the
function.
It is also searched when a command can't be found using
.Ev PATH .
See
.Sx Functions
below for more information.
.It Ev HISTFILE
The name of the file used to store command history.
When assigned to, history is loaded from the specified file.
Also, several invocations of the shell
running on the same machine will share history if their
.Ev HISTFILE
parameters all point to the same file.
.Pp
.Sy Note:
If
.Ev HISTFILE
isn't set, no history file is used.
This is different from the original Korn shell, which uses
.Pa $HOME/.sh_history ;
in the future,
.Nm pdksh
may also use a default history file.
.It Ev HISTSIZE
The number of commands normally stored for history.
The default is 500.
.It Ev HOME
The default directory for the
.Ic cd
command and the value substituted for an unqualified
.Ic ~
(see
.Sx Tilde expansion
below).
.It Ev IFS
Internal field separator, used during substitution and by the
.Ic read
command, to split values into distinct arguments; normally set to space, tab
and newline.
See
.Sx Substitution
above for details.
.Pp
.Sy Note:
This parameter is not imported from the environment when the shell is
started.
.It Ev KSH_VERSION
The version of the shell and the date the version was created (read-only).
See also the version commands in
.Sx Emacs editing mode
and
.Sx Vi editing mode
sections, below.
.It Ev LINENO
The line number of the function or shell script that is currently being
executed.
.It Ev LINES
Set to the number of lines on the terminal or window.
Not yet implemented.
.It Ev MAIL
If set, the user will be informed of the arrival of mail in the named file.
This parameter is ignored if the
.Ev MAILPATH
parameter is set.
.It Ev MAILCHECK
How often, in seconds, the shell will check for mail in the file(s) specified
by
.Ev MAIL
or
.Ev MAILPATH .
If set to 0, the shell checks before each prompt.
The default is 600 (10 minutes).
.It Ev MAILPATH
A list of files to be checked for mail.
The list is colon separated, and each file may be followed by a
.Ql \&?
and a message to be printed if new mail has arrived.
Command, parameter and
arithmetic substitution is performed on the message, and, during substitution,
the parameter
.Ic $_
contains the name of the file.
The default message is
.Dq you have mail in $_ .
.It Ev OLDPWD
The previous working directory.
Unset if
.Ic cd
has not successfully changed directories since the shell started, or if the
shell doesn't know where it is.
.It Ev OPTARG
When using
.Ic getopts ,
it contains the argument for a parsed option, if it requires one.
.It Ev OPTIND
The index of the last argument processed when using
.Ic getopts .
Assigning 1 to this parameter causes
.Ic getopts
to process arguments from the beginning the next time it is invoked.
.It Ev PATH
A colon separated list of directories that are searched when looking for
commands and .'d files.
An empty string resulting from a leading or trailing
colon, or two adjacent colons, is treated as a
.Dq \&. ,
the current directory.
.It Ev POSIXLY_CORRECT
If set, this parameter causes the
.Ic posix
option to be enabled.
See
.Sx POSIX mode
below.
.It Ev PPID
The process ID of the shell's parent (read-only).
.It Ev PS1
The primary prompt for interactive shells.
Parameter, command, and arithmetic
substitutions are performed,
and the prompt string can be customised using
backslash-escaped special characters (see below).
.Ql \&!
is replaced with the current command number (see the
.Ic fc
command below).
A literal
.Ql \&!
can be put in the prompt by placing
.Ql !!
in
.Ev PS1 .
.Pp
Note that since the command-line editors try to figure out how long the prompt
is (so they know how far it is to the edge of the screen), escape codes in
the prompt tend to mess things up.
You can tell the shell not to count certain
sequences (such as escape codes) by using the
.Li \e[ Ns Ar ... Ns Li \e]
substitution (see below) or by prefixing your prompt with a non-printing
character (such as control-A) followed by a carriage return and then delimiting
the escape codes with this non-printing character.
By the way, don't blame me for
this hack; it's in the original
.Xr ksh .
The default is
.Dq \&$\ \&
for non-root users,
.Dq \&#\ \&
for root.
.Pp
The following backslash-escaped special characters can be used
to customise the prompt:
.Pp
.Bl -tag -width "\eD{format}XX" -compact
.It Li \ea
Insert an ASCII bell character.
.It Li \ed
The current date, in the format
.Dq Day Month Date
for example
.Dq Wed Nov 03 .
.It Li \eD{ Ns Ar format Ns Li }
The current date, with
.Ar format
converted by
.Xr strftime 3 .
The braces must be specified.
.It Li \ee
Insert an ASCII escape character.
.It Li \eh
The hostname, minus domain name.
.It Li \eH
The full hostname, including domain name.
.It Li \ej
Current number of jobs running
(see
.Sx Job control ,
below).
.It Li \el
The controlling terminal.
.It Li \en
Insert a newline character.
.It Li \er
Insert a carriage return character.
.It Li \es
The name of the shell.
.It Li \et
The current time, in 24-hour HH:MM:SS format.
.It Li \eT
The current time, in 12-hour HH:MM:SS format.
.It Li \e@@
The current time, in 12-hour HH:MM:SS AM/PM format.
.It Li \eA
The current time, in 24-hour HH:MM format.
.It Li \eu
The current user's username.
.It Li \ev
The current version of
.Nm .
.It Li \eV
Like \ev, but more verbose.
.It Li \ew
The current working directory.
.It Li \eW
The basename of
the current working directory.
.It Li \e!
The current history number
(see
.Li \e# ,
below).
Note: this sequence is not yet implemented.
.It Li \e#
The current command number.
This could be different to the current history number,
if
.Ev HISTFILE
contains a history list from a previous session.
.It Li \e$
The default prompt i.e.\&
.Dq # \&
if the effective UID is 0,
otherwise
.Dq $ \& .
Note: this sequence is not yet implemented.
.It Li \e Ns Ar nnn
The octal character
.Ar nnn .
.It Li \e\e
Insert a single backslash character.
Note: this sequence is not yet implemented.
.It Li \e[
Normally the shell keeps track of the number of characters in the prompt.
Use of this sequence turns off that count.
.It Li \e]
Use of this sequence turns the count back on.
.El
.Pp
Note that the backslash itself may be interpreted by the shell.
Hence, to set
.Ev PS1
either escape the backslash itself,
or use double quotes.
The latter is more practical:
.Bd -literal -offset indent
PS1="\eu "
.Ed
.Pp
This is a more complex example,
which does not rely on the above backslash-escaped sequences.
It embeds the current working directory,
in reverse video,
in the prompt string:
.Bd -literal -offset indent
x=$(print \e\e001)
PS1="$x$(print \e\er)$x$(tput so)$x\e$PWD$x$(tput se)$x> "
.Ed
.It Ev PS2
Secondary prompt string, by default
.Dq \&>\ \& ,
used when more input is needed to complete a command.
.It Ev PS3
Prompt used by the
.Ic select
statement when reading a menu selection.
Default is
.Dq \&#\&?\ \& .
.It Ev PS4
Used to prefix commands that are printed during execution tracing (see the
.Ic set Fl x
command below).
Parameter, command, and arithmetic substitutions are performed
before it is printed.
Default is
.Dq \&+\ \& .
.It Ev PWD
The current working directory.
May be unset or
.Dv NULL
if the shell doesn't know where it is.
.It Ev RANDOM
A random number generator.
Every time
.Ev RANDOM
is referenced, it is assigned the next random number in the range
0\-32767.
By default,
.Xr arc4random 3
is used to produce values.
If the variable
.Ev RANDOM
is assigned a value, the value is used as seed to
.Xr srand 3
and subsequent references of
.Ev RANDOM
will use
.Xr rand 3
to produce values, resulting in a predictable sequence.
.It Ev REPLY
Default parameter for the
.Ic read
command if no names are given.
Also used in
.Ic select
loops to store the value that is read from standard input.
.It Ev SECONDS
The number of seconds since the shell started or, if the parameter has been
assigned an integer value, the number of seconds since the assignment plus the
value that was assigned.
.It Ev TMOUT
If set to a positive integer in an interactive shell, it specifies the maximum
number of seconds the shell will wait for input after printing the primary
prompt
.Pq Ev PS1 .
If the time is exceeded, the shell exits.
.It Ev TMPDIR
The directory shell temporary files are created in.
If this parameter is not
set, or does not contain the absolute path of a writable directory, temporary
files are created in
.Pa /tmp .
.It Ev VISUAL
If set, this parameter controls the command-line editing mode for interactive
shells.
If the last component of the path specified in this parameter contains
the string
.Dq vi ,
.Dq emacs
or
.Dq gmacs ,
the
.Xr vi ,
.Xr emacs
or
.Xr gmacs
(Gosling emacs) editing mode is enabled, respectively.
.El
.Ss Tilde expansion
Tilde expansion, which is done in parallel with parameter substitution, is done
on words starting with an unquoted
.Ql ~ .
The characters following the tilde, up to the first
.Ql / ,
if any, are assumed to be a login name.
If the login name is empty,
.Ql +
or
.Ql - ,
the value of the
.Ev HOME ,
.Ev PWD ,
or
.Ev OLDPWD
parameter is substituted, respectively.
Otherwise, the password file is
searched for the login name, and the tilde expression is substituted with the
user's home directory.
If the login name is not found in the password file or
if any quoting or parameter substitution occurs in the login name, no
substitution is performed.
.Pp
In parameter assignments (those preceding a simple-command or those occurring
in the arguments of
.Ic alias ,
.Ic export ,
.Ic readonly ,
and
.Ic typeset ) ,
tilde expansion is done after any unquoted colon
.Pq Sq \&: ,
and login names are also delimited by colons.
.Pp
The home directory of previously expanded login names are cached and re-used.
The
.Ic alias -d
command may be used to list, change, and add to this cache (e.g.,
.Ic alias -d fac=/usr/local/facilities; cd ~fac/bin ) .
.Ss Brace expansion (alteration)
Brace expressions, which take the form
.Bd -unfilled -offset indent
.Sm off
.Xo Ar prefix Ic { Ar str No 1,...,
.Ar str No N Ic } Ar suffix
.Xc
.Sm on
.Ed
.Pp
are expanded to N words, each of which is the concatenation of
.Ar prefix ,
.Ar str Ns i
and
.Ar suffix
(e.g.,
.Dq a{c,b{X,Y},d}e
expands to four words:
.Dq ace ,
.Dq abXe ,
.Dq abYe ,
and
.Dq ade ) .
As noted in the example, brace expressions can be nested and the resulting
words are not sorted.
Brace expressions must contain an unquoted comma
.Pq Sq \&,
for expansion to occur (i.e.,
.Ic {}
and
.Ic {foo}
are not expanded).
Brace expansion is carried out after parameter substitution
and before file name generation.
.Ss File name patterns
A file name pattern is a word containing one or more unquoted
.Ql \&?
or
.Ql *
characters or
.Dq [..]
sequences.
Once brace expansion has been performed, the shell replaces file
name patterns with the sorted names of all the files that match the pattern
(if no files match, the word is left unchanged).
The pattern elements have the following meaning:
.Bl -tag -width Ds
.It Ic \&?
Matches any single character.
.It Ic \&*
Matches any sequence of characters.
.It Ic \&[ Ns .. Ns Ic \&]
Matches any of the characters inside the brackets.
Ranges of characters can be
specified by separating two characters by a
.Ql -
(e.g.,
.Dq [a0-9]
matches the letter
.Dq a
or any digit).
In order to represent itself, a
.Ql -
must either be quoted or the first or last character in the character list.
Similarly, a
.Ql \&]
must be quoted or the first character in the list if it is to represent itself
instead of the end of the list.
Also, a
.Ql \&!
appearing at the start of the list has special meaning (see below), so to
represent itself it must be quoted or appear later in the list.
.It Ic \&[\&! Ns .. Ns Ic \&]
Like
.Ic \&[ Ns .. Ns Ic \&] ,
except it matches any character not inside the brackets.
.Sm off
.It Xo Ic \&*( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
.Sm on
Matches any string of characters that matches zero or more occurrences of the
specified patterns.
Example: The pattern
.Ic \&*(foo\&|bar)
matches the strings
.Dq ,
.Dq foo ,
.Dq bar ,
.Dq foobarfoo ,
etc.
.Sm off
.It Xo Ic \&+( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
.Sm on
Matches any string of characters that matches one or more occurrences of the
specified patterns.
Example: The pattern
.Ic \&+(foo\&|bar)
matches the strings
.Dq foo ,
.Dq bar ,
.Dq foobar ,
etc.
.Sm off
.It Xo Ic \&?( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
.Sm on
Matches the empty string or a string that matches one of the specified
patterns.
Example: The pattern
.Ic \&?(foo\&|bar)
only matches the strings
.Dq ,
.Dq foo
and
.Dq bar .
.Sm off
.It Xo Ic \&@@( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
.Sm on
Matches a string that matches one of the specified patterns.
Example: The pattern
.Ic \&@@(foo\&|bar)
only matches the strings
.Dq foo
and
.Dq bar .
.Sm off
.It Xo Ic \&!( Ar pattern Ic \&| No \ ...\ 
.Ic \&| Ar pattern Ic \&)
.Xc
.Sm on
Matches any string that does not match one of the specified patterns.
Examples: The pattern
.Ic \&!(foo\&|bar)
matches all strings except
.Dq foo
and
.Dq bar ;
the pattern
.Ic \&!(\&*)
matches no strings; the pattern
.Ic \&!(\&?)\&*
matches all strings (think about it).
.El
.Pp
Note that
.Nm pdksh
currently never matches
.Dq \&.
and
.Dq \&.\&. ,
but the original
.Xr ksh ,
Bourne
.Xr sh ,
and
.Xr bash
do, so this may have to change (too bad).
.Pp
Note that none of the above pattern elements match either a period
.Pq Sq \&.
at the start of a file name or a slash
.Pq Sq / ,
even if they are explicitly used in a
.Ic \&[ Ns .. Ns Ic \&]
sequence; also, the names
.Dq \&.
and
.Dq \&.\&.
are never matched, even by the pattern
.Dq \&.\&* .
.Pp
If the
.Ic markdirs
option is set, any directories that result from file name generation are marked
with a trailing
.Ql / .
.Pp
The
.Tn POSIX
character classes (i.e.,
.Ic \&[\&: Ns Ar class-name Ns Ic \&:\&]
inside a
.Ic \&[ Ns .. Ns Ic \&]
expression) are not yet implemented.
.Ss Input/output redirection
When a command is executed, its standard input, standard output, and standard
error (file descriptors 0, 1, and 2, respectively) are normally inherited from
the shell.
Three exceptions to this are commands in pipelines, for which
standard input and/or standard output are those set up by the pipeline,
asynchronous commands created when job control is disabled, for which standard
input is initially set to be from
.Pa /dev/null ,
and commands for which any of the following redirections have been specified:
.Bl -tag -width Ds
.It Ic \&> Ar file
Standard output is redirected to
.Ar file .
If
.Ar file
does not exist, it is created; if it does exist, is a regular file and the
.Ic noclobber
option is set, an error occurs; otherwise, the file is truncated.
Note that this means the command
.Ic cmd < foo > foo
will open
.Ar foo
for reading and then truncate it when it opens it for writing, before
.Ar cmd
gets a chance to actually read
.Ar foo .
.It Ic \&>\&| Ar file
Same as
.Ic \&> ,
except the file is truncated, even if the
.Ic noclobber
option is set.
.It Ic \&>\&> Ar file
Same as
.Ic \&> ,
except if
.Ar file
exists it is appended to instead of being truncated.
Also, the file is opened
in append mode, so writes always go to the end of the file (see
.Xr open 2 ) .
.It Ic \&< Ar file
Standard input is redirected from
.Ar file ,
which is opened for reading.
.It Ic \&<\&> Ar file
Same as
.Ic \&< ,
except the file is opened for reading and writing.
.It Ic \&<\&< Ar marker
After reading the command line containing this kind of redirection (called a
.Dq here document ) ,
the shell copies lines from the command source into a temporary file until a
line matching
.Ar marker
is read.
When the command is executed, standard input is redirected from the
temporary file.
If
.Ar marker
contains no quoted characters, the contents of the temporary file are processed
as if enclosed in double quotes each time the command is executed, so
parameter, command, and arithmetic substitutions are performed, along with
backslash
.Pq Sq \e
escapes for
.Ql $ ,
.Ql ` ,
.Ql \e ,
and
.Ql \enewline .
If multiple here documents are used on the same command line, they are saved in
order.
.It Ic \&<\&<\&- Ar marker
Same as
.Ic \&<\&< ,
except leading tabs are stripped from lines in the here document.
.It Ic \&<\&& Ar fd
Standard input is duplicated from file descriptor
.Ar fd .
.Ar fd
can be a single digit, indicating the number of an existing file descriptor;
the letter
.Ql p ,
indicating the file descriptor associated with the output of the current
co-process; or the character
.Ql - ,
indicating standard input is to be closed.
.It Ic \&>\&& Ar fd
Same as
.Ic \&<\&& ,
except the operation is done on standard output.
.El
.Pp
In any of the above redirections, the file descriptor that is redirected (i.e.,
standard input or standard output) can be explicitly given by preceding the
redirection with a single digit.
Parameter, command, and arithmetic
substitutions, tilde substitutions, and (if the shell is interactive)
file name generation are all performed on the
.Ar file ,
.Ar marker ,
and
.Ar fd
arguments of redirections.
Note, however, that the results of any file name
generation are only used if a single file is matched; if multiple files match,
the word with the expanded file name generation characters is used.
Note
that in restricted shells, redirections which can create files cannot be used.
.Pp
For simple-commands, redirections may appear anywhere in the command; for
compound-commands
.Po
.Ic if
statements, etc.
.Pc ,
any redirections must appear at the end.
Redirections are processed after
pipelines are created and in the order they are given, so
.Pp
.Dl Ic cat /foo/bar 2\*(Gt&1 \*(Gt /dev/null \&| cat -n
.Pp
will print an error with a line number prepended to it.
.Ss Arithmetic expressions
Integer arithmetic expressions can be used with the
.Ic let
command, inside
.Ic $(( Ns .. Ns Ic ))
expressions, inside array references (e.g.,
.Sm off
.Ar name Ic \&[ Ar expr Ic \&] ) ,
.Sm on
as numeric arguments to the
.Ic test
command, and as the value of an assignment to an integer parameter.
.Pp
Expressions may contain alpha-numeric parameter identifiers, array references,
and integer constants and may be combined with the following C operators
(listed and grouped in increasing order of precedence):
.Pp
Unary operators:
.Bl -item -offset indent -compact
.It
.Ic \&+ \&- \&! \&~ \&+\&+ \&-\&-
.El
.Pp
Binary operators:
.Bl -item -offset indent -compact
.It
.Ic \&,
.It
.Ic = \&*= /= %= \&+= \&-= \&<\&<=
.Ic \&>\&>= \&&= ^= \&|=
.It
.Ic \&|\&|
.It
.Ic \&&\&&
.It
.Ic \&|
.It
.Ic ^
.It
.Ic \&&
.It
.Ic == \&!=
.It
.Ic \&< \&<= \&>= \&>
.It
.Ic \&<\&< \&>\&>
.It
.Ic \&+ \&-
.It
.Ic \&* / %
.El
.Pp
Ternary operators:
.Bl -item -offset indent -compact
.It
.Ic \&?\&:
(precedence is immediately higher than assignment)
.El
.Pp
Grouping operators:
.Bl -item -offset indent -compact
.It
.Ic \&( \&)
.El
.Pp
Integer constants may be specified with arbitrary bases using the notation
.Ar base Ns Ic \&# Ns Ar number ,
where
.Ar base
is a decimal integer specifying the base, and
.Ar number
is a number in the specified base.
Additionally,
integers may be prefixed with
.Sq 0X
or
.Sq 0x
(specifying base 16)
or
.Sq 0
(base 8)
in all forms of arithmetic expressions,
except as numeric arguments to the
.Ic test
command.
.Pp
The operators are evaluated as follows:
.Bl -tag -width Ds -offset indent
.It unary Ic \&+
Result is the argument (included for completeness).
.It unary Ic \&-
Negation.
.It Ic \&!
Logical
.Tn NOT ;
the result is 1 if argument is zero, 0 if not.
.It Ic \&~
Arithmetic (bit-wise)
.Tn NOT .
.It Ic \&+\&+
Increment; must be applied to a parameter (not a literal or other expression).
The parameter is incremented by 1.
When used as a prefix operator, the result
is the incremented value of the parameter; when used as a postfix operator, the
result is the original value of the parameter.
.It Ic \&-\&-
Similar to
.Ic \&+\&+ ,
except the parameter is decremented by 1.
.It Ic \&,
Separates two arithmetic expressions; the left-hand side is evaluated first,
then the right.
The result is the value of the expression on the right-hand side.
.It Ic =
Assignment; variable on the left is set to the value on the right.
.It Xo Ic \&*= /= \&+= \&-= \&<\&<=
.Ic \&>\&>= \&&= ^= \&|=
.Xc
Assignment operators.
.Ao Ar var Ac
.Ao Ar op Ac =
.Ao Ar expr Ac
is the same as
.Ao Ar var Ac =
.Ao Ar var Ac
.Ao Ar op Ac
.Ic \&(
.Ao Ar expr Ac
.Ic \&) .
.It Ic \&|\&|
Logical
.Tn OR ;
the result is 1 if either argument is non-zero, 0 if not.
The right argument is evaluated only if the left argument is zero.
.It Ic \&&\&&
Logical
.Tn AND ;
the result is 1 if both arguments are non-zero, 0 if not.
The right argument is evaluated only if the left argument is non-zero.
.It Ic \&|
Arithmetic (bit-wise)
.Tn OR .
.It Ic ^
Arithmetic (bit-wise)
.Tn XOR
(exclusive-OR).
.It Ic \&&
Arithmetic (bit-wise)
.Tn AND .
.It Ic ==
Equal; the result is 1 if both arguments are equal, 0 if not.
.It Ic \&!=
Not equal; the result is 0 if both arguments are equal, 1 if not.
.It Ic \&<
Less than; the result is 1 if the left argument is less than the right, 0 if
not.
.It Ic \&<= \&>= \&>
Less than or equal, greater than or equal, greater than.
See
.Ic \&< .
.It Ic \&<\&< \&>\&>
Shift left (right); the result is the left argument with its bits shifted left
(right) by the amount given in the right argument.
.It Ic \&+ \&- \&* /
Addition, subtraction, multiplication, and division.
.It Ic %
Remainder; the result is the remainder of the division of the left argument by
the right.
The sign of the result is unspecified if either argument is negative.
.It Xo Ao Ar arg1 Ac Ic \ \&?
.Ao Ar arg2 Ac Ic \ \&: Ao Ar arg3 Ac
.Xc
.No If Ao Ar arg1 Ac
is non-zero, the result is
.Ao Ar arg2 Ac ,
otherwise
.Ao Ar arg3 Ac .
.El
.Ss Co-processes
A co-process, which is a pipeline created with the
.Ic \&|\&&
operator, is an asynchronous process that the shell can both write to (using
.Ic print -p )
and read from (using
.Ic read -p ) .
The input and output of the co-process can also be manipulated using
.Ic \&>\&&p
and
.Ic \&<\&&p
redirections, respectively.
Once a co-process has been started, another can't
be started until the co-process exits, or until the co-process's input has been
redirected using an
.Ic exec Ar n Ns Ic \&>\&&p
redirection.
If a co-process's input is redirected in this way, the next
co-process to be started will share the output with the first co-process,
unless the output of the initial co-process has been redirected using an
.Ic exec Ar n Ns Ic \&<\&&p
redirection.
.Pp
Some notes concerning co-processes:
.Bl -bullet
.It
The only way to close the co-process's input (so the co-process reads an
end-of-file) is to redirect the input to a numbered file descriptor and then
close that file descriptor (e.g.,
.Ic exec 3\&>\&&p\&; exec 3\&>\&&\&- ) .
.It
In order for co-processes to share a common output, the shell must keep the
write portion of the output pipe open.
This means that end-of-file will not be
detected until all co-processes sharing the co-process's output have exited
(when they all exit, the shell closes its copy of the pipe).
This can be
avoided by redirecting the output to a numbered file descriptor (as this also
causes the shell to close its copy).
Note that this behaviour is slightly
different from the original Korn shell which closes its copy of the write
portion of the co-process output when the most recently started co-process
(instead of when all sharing co-processes) exits.
.It
.Ic print -p
will ignore
.Dv SIGPIPE
signals during writes if the signal is not being trapped or ignored; the same
is true if the co-process input has been duplicated to another file descriptor
and
.Ic print -u Ns Ar n
is used.
.El
.Ss Functions
Functions are defined using either Korn shell
.Ic function Ar name
syntax or the Bourne/POSIX shell
.Fn name
syntax (see below for the difference between the two forms).
Functions are like
.Li .-scripts
in that they are executed in the current environment.
However, unlike
.Li .-scripts ,
shell arguments (i.e., positional parameters
.Ic $1 , $2 ,
etc.) are never visible
inside them.
When the shell is determining the location of a command, functions
are searched after special built-in commands, before regular and
non-regular built-ins, and before the
.Ev PATH
is searched.
.Pp
An existing function may be deleted using
.Ic unset Fl f Ar function-name .
A list of functions can be obtained using
.Ic typeset \&+f
and the function definitions can be listed using
.Ic typeset \&-f .
The
.Ic autoload
command (which is an alias for
.Ic typeset \&-fu )
may be used to create undefined functions; when an undefined function is
executed, the shell searches the path specified in the
.Ev FPATH
parameter for a file with the same name as the function, which, if found, is
read and executed.
If after executing the file the named function is found to
be defined, the function is executed; otherwise, the normal command search is
continued (i.e., the shell searches the regular built-in command table and
.Ev PATH ) .
Note that if a command is not found using
.Ev PATH ,
an attempt is made to autoload a function using
.Ev FPATH
(this is an undocumented feature of the original Korn shell).
.Pp
Functions can have two attributes,
.Dq trace
and
.Dq export ,
which can be set with
.Ic typeset \&-ft
and
.Ic typeset \&-fx ,
respectively.
When a traced function is executed, the shell's
.Ic xtrace
option is turned on for the function's duration; otherwise, the
.Ic xtrace
option is turned off.
The
.Dq export
attribute of functions is currently not used.
In the original Korn shell,
exported functions are visible to shell scripts that are executed.
.Pp
Since functions are executed in the current shell environment, parameter
assignments made inside functions are visible after the function completes.
If this is not the desired effect, the
.Ic typeset
command can be used inside a function to create a local parameter.
Note that special parameters (e.g.,
.Ic \&$$ , $\&! )
can't be scoped in this way.
.Pp
The exit status of a function is that of the last command executed in the
function.
A function can be made to finish immediately using the
.Ic return
command; this may also be used to explicitly specify the exit status.
.Pp
Functions defined with the
.Ic function
reserved word are treated differently in the following ways from functions
defined with the
.Ic \&(\&)
notation:
.Bl -bullet
.It
The
.Ic $0
parameter is set to the name of the function (Bourne-style functions
leave
.Ic $0
untouched).
.It
Parameter assignments preceding function calls are not kept in the shell
environment (executing Bourne-style functions will keep assignments).
.It
.Ev OPTIND
is saved/reset and restored on entry and exit from the function so
.Ic getopts
can be used properly both inside and outside the function (Bourne-style
functions leave
.Dv OPTIND
untouched, so using
.Ic getopts
inside a function interferes with using
.Ic getopts
outside the function).
In the future, the following differences will also be added:
.Bl -bullet -offset indent
.It
A separate trap/signal environment will be used during the execution of
functions.
This will mean that traps set inside a function will not affect the
shell's traps and signals that are not ignored in the shell (but may be
trapped) will have their default effect in a function.
.It
The EXIT trap, if set in a function, will be executed after the function
returns.
.El
.El
.Ss POSIX mode
The shell is intended to be
.Tn POSIX
compliant; however, in some cases,
.Tn POSIX
behaviour is contrary either to the original Korn shell behaviour or to user
convenience.
How the shell behaves in these cases is determined by the state of the
.Ic posix
option
.Pq Ic set Fl o Ic posix .
If it is on, the
.Tn POSIX
behaviour is followed; otherwise, it is not.
The
.Ic posix
option is set automatically when the shell starts up if the environment
contains the
.Dv POSIXLY_CORRECT
parameter. (The shell can also be compiled so that it is in
.Tn POSIX
mode by default; however, this is usually not desirable).
.Pp
The following is a list of things that are affected by the state of the
.Ic posix
option:
.Bl -bullet
.It
Occurrences of
.Ic \e\&"
inside double quoted
.Ic `\&.\&.`
command substitutions.
In
.Tn POSIX
mode, the
.Ic \e\&"
is interpreted when the command is interpreted; in
.Pf non- Tn POSIX
mode, the
backslash is stripped before the command substitution is interpreted.
For example,
.Ic echo \&"`echo \e\&"hi\e\&"`\&"
produces
.Dq \&"hi\&"
in
.Tn POSIX
mode,
.Dq hi
in
.Pf non- Tn POSIX
mode.
To avoid problems, use the
.Ic $(...)\&
form of command substitution.
.It
.Ic kill -l
output.
In
.Tn POSIX
mode, signal names are listed one per line; in
.Pf non- Tn POSIX
mode,
signal numbers, names, and descriptions are printed in columns.
In the future, a new option
.Pq Fl v No perhaps
will be added to distinguish the two behaviours.
.It
.Ic fg
exit status.
In
.Tn POSIX
mode, the exit status is 0 if no errors occur; in
.Pf non- Tn POSIX
mode, the exit status is that of the last foregrounded job.
.It
.Ic eval
exit status.
If
.Ic eval
gets to see an empty command (i.e.,
.Ic eval "`false`" ) ,
its exit status in
.Tn POSIX
mode will be 0.
In
.Pf non- Tn POSIX
mode, it will be the exit status of the last command substitution that was
done in the processing of the arguments to
.Ic eval
(or 0 if there were no command substitutions).
.It
.Ic getopts .
In
.Tn POSIX
mode, options must start with a
.Ql - ;
in
.Pf non- Tn POSIX
mode, options can start with either
.Ql -
or
.Ql + .
.It
Brace expansion (also known as alternation).
In
.Tn POSIX
mode, brace expansion is
disabled; in
.Pf non- Tn POSIX
mode, brace expansion is enabled.
Note that
.Ic set Fl o Ic posix
(or setting the
.Ev POSIXLY_CORRECT
parameter) automatically turns the
.Ic braceexpand
option off; however, it can be explicitly turned on later.
.It
.Ic set \&- .
In
.Tn POSIX
mode, this does not clear the
.Ic verbose
or
.Ic xtrace
options; in
.Pf non- Tn POSIX
mode, it does.
.It
.Ic set
exit status.
In
.Tn POSIX
mode, the exit status of
.Ic set
is 0 if there are no errors; in
.Pf non- Tn POSIX
mode, the exit status is that of any
command substitutions performed in generating the
.Ic set
command.
For example,
.Ic set \&-\&- `false`; echo $?\&
prints 0 in
.Tn POSIX
mode, 1 in
.Pf non- Tn POSIX
mode.
This construct is used in most shell scripts that use the old
.Xr getopt 1
command.
.It
Argument expansion of the
.Ic alias ,
.Ic export ,
.Ic readonly ,
and
.Ic typeset
commands.
In
.Tn POSIX
mode, normal argument expansion is done; in
.Pf non- Tn POSIX
mode,
field splitting, file globbing, brace expansion, and (normal) tilde expansion
are turned off, while assignment tilde expansion is turned on.
.It
Signal specification.
In
.Tn POSIX
mode, signals can be specified as digits, only
if signal numbers match
.Tn POSIX
values (i.e., HUP=1, INT=2, QUIT=3, ABRT=6,
KILL=9, ALRM=14, and TERM=15); in
.Pf non- Tn POSIX
mode, signals can always be digits.
.It
Alias expansion.
In
.Tn POSIX
mode, alias expansion is only carried out when
reading command words; in
.Pf non- Tn POSIX
mode, alias expansion is carried out on any
word following an alias that ended in a space.
For example, the following
.Ic for
loop
.Pp
.Bl -item -offset indent -compact
.It
.Ic alias a='for ' i='j'
.It
.Xo
.Ic a i in 1 2; do echo i=$i j=$j;
.Ic done
.Xc
.El
.Pp
uses parameter
.Ic i
in
.Tn POSIX
mode,
.Ic j
in
.Pf non- Tn POSIX
mode.
.It
Test.
In
.Tn POSIX
mode, the expression
.Sq Fl t
(preceded by some number of
.Sq Ic \&!
arguments) is always true as it is a non-zero length string; in
.Pf non- Tn POSIX
mode, it tests if file descriptor 1 is a
.Xr tty 4
(i.e., the
.Ar fd
argument to the
.Fl t
test may be left out and defaults to 1).
.El
.Ss Strict Bourne shell mode
When the
.Ic sh
option is enabled (see the
.Ic set
command),
.Nm
will behave like
.Xr sh 1
in the following ways:
.Bl -bullet
.It
The parameter
.Ic $_
is not set to
.Bl -dash
.It
the expanded alias' full program path after entering commands
that are tracked aliases,
.It
the last argument on the command line after entering external
commands, or
.It
the file that changed when
.Ev MAILPATH
is set to monitor a mailbox.
.El
.It
File descriptors are left untouched when executing
.Ic exec
with no arguments.
.It
Backslash-escaped special characters are not substituted in
.Ev PS1 .
.It
Sequences of
.Sq Li (( Ns Ar ... Ns Li ))
are not interpreted as arithmetic expressions.
.El
.Ss Command execution
After evaluation of command-line arguments, redirections, and parameter
assignments, the type of command is determined: a special built-in, a
function, a regular built-in, or the name of a file to execute found using the
.Ev PATH
parameter.
The checks are made in the above order.
Special built-in commands differ from other commands in that the
.Ev PATH
parameter is not used to find them, and an error during their execution can
cause a non-interactive shell to exit and parameter assignments that are
specified before the command are kept after the command completes.
Just to confuse things, if the
.Ic posix
option is turned off (see the
.Ic set
command below), some special commands are very special in that no field
splitting, file globbing, brace expansion, nor tilde expansion is performed
on arguments that look like assignments.
Regular built-in commands are different only in that the
.Ev PATH
parameter is not used to find them.
.Pp
The original
.Nm ksh
and
.Tn POSIX
differ somewhat in which commands are considered
special or regular:
.Pp
.Tn POSIX
special commands
.Pp
.Ic \&. , \&: , break , continue ,
.Ic eval , exec , exit , export ,
.Ic readonly , return , set , shift ,
.Ic trap , unset
.Pp
Additional
.Nm
special commands
.Pp
.Ic builtin , times , typeset
.Pp
Very special commands
.Pq Pf non- Tn POSIX
.Pp
.Ic alias , readonly , set , typeset
.Pp
.Tn POSIX
regular commands
.Pp
.Ic alias , bg , cd , command ,
.Ic false , fc , fg , getopts ,
.Ic jobs , kill , read , true ,
.Ic umask , unalias , wait
.Pp
Additional
.Nm
regular commands
.Pp
.Ic \&[ , echo , let , print ,
.Ic pwd , test , ulimit , whence
.Pp
In the future, the additional
.Nm
special and regular commands may be treated
differently from the
.Tn POSIX
special and regular commands.
.Pp
Once the type of the command has been determined, any command-line parameter
assignments are performed and exported for the duration of the command.
.Pp
The following describes the special and regular built-in commands:
.Bl -tag -width Ds
.It Ic \&. Ar file Op Ar arg1 ...
Execute the commands in
.Ar file
in the current environment.
The file is searched for in the directories of
.Ev PATH .
If arguments are given, the positional parameters may be used to access them
while
.Ar file
is being executed.
If no arguments are given, the positional parameters are
those of the environment the command is used in.
.It Ic \&: Op Ar ...
The null command.
Exit status is set to zero.
.It Xo Ic alias
.Op Fl d | Ic +-t Op Fl r
.Op Ic +-px
.Op Ic +-
.Oo Ar name
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
Without arguments,
.Ic alias
lists all aliases.
For any name without a value, the existing alias is listed.
Any name with a value defines an alias (see
.Sx Aliases
above).
.Pp
When listing aliases, one of two formats is used.
Normally, aliases are listed as
.Ar name Ns = Ns Ar value ,
where
.Ar value
is quoted.
If options were preceded with
.Ql + ,
or a lone
.Ql +
is given on the command line, only
.Ar name
is printed.
In addition, if the
.Fl p
option is used, each alias is prefixed with the string
.Dq alias\ \& .
.Pp
The
.Fl x
option sets
.Po Ic \&+x
\ clears
.Pc
the export attribute of an alias, or, if no names are given, lists the aliases
with the export attribute (exporting an alias has no effect).
.Pp
The
.Fl t
option indicates that tracked aliases are to be listed/set (values specified on
the command line are ignored for tracked aliases).
The
.Fl r
option indicates that all tracked aliases are to be reset.
.Pp
The
.Fl d
option causes directory aliases, which are used in tilde expansion, to be
listed or set (see
.Sx Tilde expansion
above).
.It Ic bg Op Ar job ...
Resume the specified stopped job(s) in the background.
If no jobs are specified,
.Ic %\&+
is assumed.
This command is only available on systems which support job control (see
.Sx Job control
below for more information).
.It Ic bind Op Fl l
The current bindings are listed.
If the
.Fl l
flag is given,
.Ic bind
instead lists the names of the functions to which keys may be bound.
See
.Sx Emacs editing mode
for more information.
.It Xo Ic bind Op Fl m
.Ar string Ns = Ns Op Ar substitute
.Ar ...
.Xc
.It Xo Ic bind
.Ar string Ns = Ns Op Ar editing-command
.Ar ...
.Xc
The specified editing command is bound to the given
.Ar string ,
which should consist of a control character (which may be written using caret
notation, i.e., ^X), optionally preceded by one of the two prefix characters.
If the
.Fl m
flag is given, the specified input
.Ar string
will afterwards be immediately replaced by the given
.Ar substitute
string, which may contain editing commands.
.Pp
Future input of the
.Ar string
will cause the editing command to be immediately invoked.
Note that although only two prefix characters (usually
.Tn ESC
and ^X) are supported, some
multi-character sequences can be supported.
The following binds the arrow keys on an
.Tn ANSI
terminal, or
.Xr xterm 1
(these are in the default bindings).
Of course some escape sequences won't work out quite this nicely.
.Pp
.Bl -item -compact
.It
.Ic bind '^[['=prefix-2
.It
.Ic bind '^XA'=up-history
.It
.Ic bind '^XB'=down-history
.It
.Ic bind '^XC'=forward-char
.It
.Ic bind '^XD'=backward-char
.El
.It Ic break Op Ar level
Exit the
.Ar level Ns th
inner-most
.Ic for ,
.Ic select ,
.Ic until ,
or
.Ic while
loop.
.Ar level
defaults to 1.
.It Ic builtin Ar command Op Ar arg1 ...
Execute the built-in command
.Ar command .
.It Xo Ic cd Op Fl LP
.Op Ar dir
.Xc
Set the working directory to
.Ar dir .
If the parameter
.Ev CDPATH
is set, it lists the search path for the directory containing
.Ar dir .
A
.Dv NULL
path means the current directory.
If
.Ar dir
is found in any component of the
.Ev CDPATH
search path other than the
.Dv NULL
path, the name of the new working directory will be written to standard output.
If
.Ar dir
is missing, the home directory
.Ev HOME
is used.
If
.Ar dir
is
.Ql - ,
the previous working directory is used (see
.Ev OLDPWD
parameter).
If the
.Fl L
option (logical path) is used or if the
.Ic physical
option (see the
.Ic set
command below) isn't set, references to
.Dq \&.\&.
in
.Ar dir
are relative to the path used to get to the directory.
If the
.Fl P
option (physical path) is used or if the
.Ic physical
option is set,
.Dq \&.\&.
is relative to the filesystem directory tree.
The
.Ev PWD
and
.Ev OLDPWD
parameters are updated to reflect the current and old working directory,
respectively.
.It Xo Ic cd Op Fl LP
.Ar old new
.Xc
The string
.Ar new
is substituted for
.Ar old
in the current directory, and the shell attempts to change to the new
directory.
.It Xo Ic command Op Fl pvV
.Ar cmd Op Ar arg1 ...
.Xc
If neither the
.Fl v
nor
.Fl V
option is given,
.Ar cmd
is executed exactly as if
.Ic command
had not been specified, with two exceptions.
First,
.Ar cmd
cannot be a shell function, and second, special built-in commands lose their
specialness (i.e., redirection and utility errors do not cause the shell to
exit, and command assignments are not permanent).
If the
.Fl p
option is given, a default search path is used instead of the current value of
.Ev PATH
(the actual value of the default path is system dependent: on
.Tn POSIX Ns ish
systems, it is the value returned by
.Ic getconf CS_PATH ) .
.Pp
If the
.Fl v
option is given, instead of executing
.Ar cmd ,
information about what would be executed is given (and the same is done for
.Ar arg1 ... ) .
For special and regular built-in commands and functions, their names are simply
printed; for aliases, a command that defines them is printed; and for commands
found by searching the
.Ev PATH
parameter, the full path of the command is printed.
If no command is found
(i.e., the path search fails), nothing is printed and
.Ic command
exits with a non-zero status.
The
.Fl V
option is like the
.Fl v
option, except it is more verbose.
.It Ic continue Op Ar level
Jumps to the beginning of the
.Ar level Ns th
inner-most
.Ic for ,
.Ic select ,
.Ic until ,
or
.Ic while
loop.
.Ar level
defaults to 1.
.It Xo Ic echo Op Fl neE
.Op Ar arg ...
.Xc
Prints its arguments (separated by spaces) followed by a newline, to the
standard output.
The newline is suppressed if any of the arguments contain the
backslash sequence
.Ql \ec .
See the
.Ic print
command below for a list of other backslash sequences that are recognized.
.Pp
The options are provided for compatibility with
.Bx
shell scripts.
The
.Fl n
option suppresses the trailing newline,
.Fl e
enables backslash interpretation (a no-op, since this is normally done), and
.Fl E
suppresses backslash interpretation.
.It Ic eval Ar command ...
The arguments are concatenated (with spaces between them) to form a single
string which the shell then parses and executes in the current environment.
.It Xo Ic exec
.Op Ar command Op Ar arg ...
.Xc
The command is executed without forking, replacing the shell process.
.Pp
If no command is given except for I/O redirection, the I/O redirection is
permanent and the shell is
not replaced.
Any file descriptors greater than 2 which are opened or
.Xr dup 2 Ns 'd
in this way are not made available to other executed commands (i.e., commands
that are not built-in to the shell).
Note that the Bourne shell differs here;
it does pass these file descriptors on.
.It Ic exit Op Ar status
The shell exits with the specified exit status.
If
.Ar status
is not specified, the exit status is the current value of the
.Ic $?\&
parameter.
.It Xo Ic export Op Fl p
.Op Ar parameter Ns Op \&= Ns Ar value
.Xc
Sets the export attribute of the named parameters.
Exported parameters are passed in the environment to executed commands.
If values are specified, the named parameters are also assigned.
.Pp
If no parameters are specified, the names of all parameters with the export
attribute are printed one per line, unless the
.Fl p
option is used, in which case
.Ic export
commands defining all exported parameters, including their values, are printed.
.It Ic false
A command that exits with a non-zero status.
.It Xo Ic fc
.Oo Fl e Ar editor \*(Ba
.Fl l Op Fl n Oc
.Op Fl r
.Op Ar first Op Ar last
.Xc
.Ar first
and
.Ar last
select commands from the history.
Commands can be selected by history number
or a string specifying the most recent command starting with that string.
The
.Fl l
option lists the command on stdout, and
.Fl n
inhibits the default command numbers.
The
.Fl r
option reverses the order of the list.
Without
.Fl l ,
the selected commands are edited by the editor specified with the
.Fl e
option, or if no
.Fl e
is specified, the editor specified by the
.Ev FCEDIT
parameter (if this parameter is not set,
.Pa /bin/ed
is used), and then executed by the shell.
.It Xo Ic fc
.Oo Fl e No \&- \&| Fl s Oc
.Op Fl g
.Op Ar old Ns = Ns Ar new
.Op Ar prefix
.Xc
Re-execute the selected command (the previous command by default) after
performing the optional substitution of
.Ar old
with
.Ar new .
If
.Fl g
is specified, all occurrences of
.Ar old
are replaced with
.Ar new .
This command is usually accessed with the predefined
.Ic alias r='fc -e -' .
.It Ic fg Op Ar job ...
Resume the specified job(s) in the foreground.
If no jobs are specified,
.Ic %\&+
is assumed.
This command is only available on systems which support job control (see
.Sx Job control
below for more information).
.It Xo Ic getopts Ar optstring name
.Op Ar arg ...
.Xc
Used by shell procedures to parse the specified arguments (or positional
parameters, if no arguments are given) and to check for legal options.
.Ar optstring
contains the option letters that
.Ic getopts
is to recognize.
If a letter is followed by a colon, the option is expected to
have an argument.
Options that do not take arguments may be grouped in a single argument.
If an option takes an argument and the option character is not the
last character of the argument it is found in, the remainder of the argument is
taken to be the option's argument; otherwise, the next argument is the option's
argument.
.Pp
Each time
.Ic getopts
is invoked, it places the next option in the shell parameter
.Ar name
and the index of the next argument to be processed in the shell parameter
.Ev OPTIND .
If the option was introduced with a
.Ql + ,
the option placed in
.Ar name
is prefixed with a
.Ql + .
When an option requires an argument,
.Ic getopts
places it in the shell parameter
.Ev OPTARG .
When an illegal option or a missing option argument is encountered, a question
mark or a colon is placed in
.Ar name
(indicating an illegal option or missing argument, respectively) and
.Ev OPTARG
is set to the option character that caused the problem.
If
.Ar optstring
does not begin with a colon, a question mark is placed in
.Ar name ,
.Ev OPTARG
is unset and an error message is printed to standard error.
.Pp
When the end of the options is encountered,
.Ic getopts
exits with a non-zero exit status.
Options end at the first (non-option
argument) argument that does not start with a
.Ql - ,
or when a
.Ql --
argument is encountered.
.Pp
Option parsing can be reset by setting
.Ev OPTIND
to 1 (this is done automatically whenever the shell or a shell procedure is
invoked).
.Pp
Warning: Changing the value of the shell parameter
.Ev OPTIND
to a value other than 1, or parsing different sets of arguments without
resetting
.Ev OPTIND
may lead to unexpected results.
.It Xo Ic hash Op Fl r
.Op Ar name ...
.Xc
Without arguments, any hashed executable command pathnames are listed.
The
.Fl r
option causes all hashed commands to be removed from the hash table.
Each
.Ar name
is searched as if it were a command name and added to the hash table if it is
an executable command.
.It Xo Ic jobs Op Fl lpn
.Op Ar job ...
.Xc
Display information about the specified job(s); if no jobs are specified, all
jobs are displayed.
The
.Fl n
option causes information to be displayed only for jobs that have changed
state since the last notification.
If the
.Fl l
option is used, the process ID of each process in a job is also listed.
The
.Fl p
option causes only the process group of each job to be printed.
See
.Sx Job control
below for the format of
.Ar job
and the displayed job.
.It Xo Ic kill
.Oo Fl s Ar signame \*(Ba
.Fl Ar signum | Fl Ar signame Oc {
.Ar job |
.Ar pid |
.Ar pgrp No } Ar ...
.Xc
Send the specified signal to the specified jobs, process IDs, or process
groups.
If no signal is specified, the
.Dv TERM
signal is sent.
If a job is specified, the signal is sent to the job's process group.
See
.Sx Job control
below for the format of
.Ar job .
.It Ic kill -l Op Ar exit-status ...
Print the name of the signal that killed a process which exited with the
specified
.Ar exit-status Ns es.
If no arguments are specified, a list of all the signals, their numbers and
a short description of them are printed.
.It Ic let Op Ar expression ...
Each expression is evaluated (see
.Sx Arithmetic expressions
above).
If all expressions are successfully evaluated, the exit status is 0 (1)
if the last expression evaluated to non-zero (zero).
If an error occurs during
the parsing or evaluation of an expression, the exit status is greater than 1.
Since expressions may need to be quoted,
.Ic (( Ar expr Ic ))
is syntactic sugar for
.Ic let \&" Ns Ar expr Ns Ic \&" .
.It Xo Ic print
.Oo Fl nprsu Ns Ar n \*(Ba
.Fl R Op Fl en Oc
.Op Ar argument ...
.Xc
.Ic print
prints its arguments on the standard output, separated by spaces and
terminated with a newline.
The
.Fl n
option suppresses the newline.
By default, certain C escapes are translated.
These include
.Ql \eb ,
.Ql \ef ,
.Ql \en ,
.Ql \er ,
.Ql \et ,
.Ql \ev ,
and
.Ql \e0###
.Po
.Ql #
is an octal digit, of which there may be 0 to 3
.Pc .
.Ql \ec
is equivalent to using the
.Fl n
option.
.Ql \e
expansion may be inhibited with the
.Fl r
option.
The
.Fl s
option prints to the history file instead of standard output, the
.Fl u
option prints to file descriptor
.Ar n
.Po
.Ar n
defaults to 1 if omitted
.Pc ,
and the
.Fl p
option prints to the co-process (see
.Sx Co-processes
above).
.Pp
The
.Fl R
option is used to emulate, to some degree, the
.Bx
.Xr echo 1
command, which does not process
.Ql \e
sequences unless the
.Fl e
option is given.
As above, the
.Fl n
option suppresses the trailing newline.
.It Ic pwd Op Fl LP
Print the present working directory.
If the
.Fl L
option is used or if the
.Ic physical
option (see the
.Ic set
command below) isn't set, the logical path is printed (i.e., the path used to
.Ic cd
to the current directory).
If the
.Fl P
option (physical path) is used or if the
.Ic physical
option is set, the path determined from the filesystem (by following
.Dq \&.\&.
directories to the root directory) is printed.
.It Xo Ic read Oo Fl prsu Ns Ar n
.Oc Op Ar parameter ...
.Xc
Reads a line of input from the standard input, separates the line into fields
using the
.Ev IFS
parameter (see
.Sx Substitution
above), and assigns each field to the specified parameters.
If there are more parameters than fields, the extra parameters are set to
.Dv NULL ,
or alternatively, if there are more fields than parameters, the last parameter
is assigned the remaining fields (inclusive of any separating spaces).
If no parameters are specified, the
.Ev REPLY
parameter is used.
If the input line ends in a backslash and the
.Fl r
option was not used, the backslash and the newline are stripped and more input
is read.
If no input is read,
.Ic read
exits with a non-zero status.
.Pp
The first parameter may have a question mark and a string appended to it, in
which case the string is used as a prompt (printed to standard error before
any input is read) if the input is a
.Xr tty 4
(e.g.,
.Ic read nfoo?'number of foos: ' ) .
.Pp
The
.Fl u Ns Ar n
and
.Fl p
options cause input to be read from file descriptor
.Ar n
or the current co-process (see
.Sx Co-processes
above for comments on this), respectively.
If the
.Fl s
option is used, input is saved to the history file.
.It Xo Ic readonly Op Fl p
.Oo Ar parameter
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
Sets the read-only attribute of the named parameters.
If values are given,
parameters are set to them before setting the attribute.
Once a parameter is
made read-only, it cannot be unset and its value cannot be changed.
.Pp
If no parameters are specified, the names of all parameters with the read-only
attribute are printed one per line, unless the
.Fl p
option is used, in which case
.Ic readonly
commands defining all read-only parameters, including their values, are
printed.
.It Ic return Op Ar status
Returns from a function or
.Ic .\&
script, with exit status
.Ar status .
If no
.Ar status
is given, the exit status of the last executed command is used.
If used outside of a function or
.Ic .\&
script, it has the same effect as
.Ic exit .
Note that
.Nm pdksh
treats both profile and
.Ev ENV
files as
.Ic .\&
scripts, while the original Korn shell only treats profiles as
.Ic .\&
scripts.
.It Xo Ic set Op Ic +-abCefhkmnpsuvxX
.Op Ic +-o Ar option
.Op Ic +-A Ar name
.Op Fl \&-
.Op Ar arg ...
.Xc
The
.Ic set
command can be used to set
.Pq Ic \&-
or clear
.Pq Ic \&+
shell options, set the positional parameters, or set an array parameter.
Options can be changed using the
.Ic \&+ Ns Fl o Ar option
syntax, where
.Ar option
is the long name of an option, or using the
.Ic \&+\&- Ns Ar letter
syntax, where
.Ar letter
is the option's single letter name (not all options have a single letter name).
The following table lists both option letters (if they exist) and long names
along with a description of what the option does:
.Bl -tag -width 15n
.It Fl A
Sets the elements of the array parameter
.Ar name
to
.Ar arg ... .
If
.Fl A
is used, the array is reset (i.e., emptied) first; if
.Ic \&+A
is used, the first N elements are set (where N is the number of
.Ar arg Ns s ) ,
the rest are left untouched.
.It Fl a Ic allexport
All new parameters are created with the export attribute.
.It Fl b Ic notify
Print job notification messages asynchronously, instead of just before the
prompt.
Only used if job control is enabled
.Pq Fl m .
.It Ic csh-history
Enables a subset of
.Xr csh 1 Ns -style
history editing using the
.Ql !\&
character.
.It Fl C Ic noclobber
Prevent
.Ic \&>
redirection from overwriting existing files
.Po
.Ic \&>\&|
must be used to force an overwrite
.Pc .
.It Fl e Ic errexit
Exit (after executing the
.Dv ERR
trap) as soon as an error occurs or a command fails (i.e., exits with a
non-zero status).
This does not apply to commands whose exit status is
explicitly tested by a shell construct such as
.Ic if ,
.Ic until ,
.Ic while ,
.Ic \&&\&& ,
or
.Ic \&|\&|
statements.
.It Fl f Ic noglob
Do not expand file name patterns.
.It Fl h Ic trackall
Create tracked aliases for all executed commands (see
.Sx Aliases
above).
Enabled by default for non-interactive shells.
.It Fl i Ic interactive
Enable interactive mode.
This can only be set/unset when the shell is invoked.
.It Fl k Ic keyword
Parameter assignments are recognized anywhere in a command.
.It Fl l Ic login
The shell is a login shell.
This can only be set/unset when the shell is invoked (see
.Sx Shell startup
above).
.It Fl m Ic monitor
Enable job control (default for interactive shells).
.It Fl n Ic noexec
Do not execute any commands.
Useful for checking the syntax of scripts
(ignored if interactive).
.It Fl p Ic privileged
Set automatically if, when the shell starts, the read UID or GID does not match
the effective UID (EUID) or GID (EGID), respectively.
See
.Sx Shell startup
above for a description of what this means.
.It Fl r Ic restricted
Enable restricted mode.
This option can only be used when the shell is invoked.
See
.Sx Shell startup
above for a description of what this means.
.It Fl s Ic stdin
If used where the shell is invoked, commands are read from standard input.
Set automatically if the shell is invoked with no arguments.
.Pp
When
.Fl s
is used with the
.Ic set
command it causes the specified arguments to be sorted before assigning them to
the positional parameters (or to array
.Ar name ,
if
.Fl A
is used).
.It Fl u Ic nounset
Referencing of an unset parameter is treated as an error, unless one of the
.Ql - ,
.Ql +
or
.Ql =
modifiers is used.
.It Fl v Ic verbose
Write shell input to standard error as it is read.
.It Fl x Ic xtrace
Print commands and parameter assignments when they are executed, preceded by
the value of
.Ev PS4 .
.It Fl X Ic markdirs
Mark directories with a trailing
.Ql /
during file name generation.
.It Ic bgnice
Background jobs are run with lower priority.
.It Ic braceexpand
Enable brace expansion (a.k.a., alternation).
.It Ic emacs
Enable BRL emacs-like command-line editing (interactive shells only); see
.Sx Emacs editing mode .
.It Ic emacs-usemeta
In emacs command-line editing, use the 8th bit as meta (^[) prefix.
This is the default.
.It Ic gmacs
Enable gmacs-like command-line editing (interactive shells only).
Currently identical to emacs editing except that transpose (^T) acts slightly
differently.
.It Ic ignoreeof
The shell will not (easily) exit when end-of-file is read;
.Ic exit
must be used.
To avoid infinite loops, the shell will exit if
.Dv EOF
is read 13 times in a row.
.It Ic nohup
Do not kill running jobs with a
.Dv SIGHUP
signal when a login shell exists.
Currently set by default, but this will
change in the future to be compatible with the original Korn shell (which
doesn't have this option, but does send the
.Dv SIGHUP
signal).
.It Ic nolog
No effect.
In the original Korn shell, this prevents function definitions from
being stored in the history file.
.It Ic physical
Causes the
.Ic cd
and
.Ic pwd
commands to use
.Dq physical
(i.e., the filesystem's)
.Dq \&.\&.
directories instead of
.Dq logical
directories (i.e., the shell handles
.Dq \&.\&. ,
which allows the user to be oblivious of symbolic links to directories).
Clear by default.
Note that setting this option does not affect the current value of the
.Ev PWD
parameter; only the
.Ic cd
command changes
.Ev PWD .
See the
.Ic cd
and
.Ic pwd
commands above for more details.
.It Ic posix
Enable
.Tn POSIX
mode.
See
.Sx POSIX mode
above.
.It Ic sh
Enable strict Bourne shell mode (see
.Sx Strict Bourne shell mode ) .
.It Ic vi
Enable
.Xr vi 1 Ns -like
command-line editing (interactive shells only).
.It Ic viraw
No effect.
In the original Korn shell, unless
.Ic viraw
was set, the vi command-line mode would let the
.Xr tty 4
driver do the work until
.Tn ESC
(^[) was entered.
.Nm pdksh
is always in viraw mode.
.It Ic vi-esccomplete
In vi command-line editing, do command and file name completion when escape
(^[) is entered in command mode.
.It Ic vi-show8
Prefix characters with the eighth bit set with
.Dq M\&- .
If this option is not set, characters in the range 128\-160 are printed as is,
which may cause problems.
.It Ic vi-tabcomplete
In vi command-line editing, do command and file name completion when tab (^I)
is entered in insert mode.
This is the default.
.El
.Pp
These options can also be used upon invocation of the shell.
The current set of
options (with single letter names) can be found in the parameter
.Dv \&- .
.Ic set Fl o
with no option name will list all the options and whether each is on or off;
.Ic set +o
will print the long names of all options that are currently on.
.Pp
Remaining arguments, if any, are positional parameters and are assigned, in
order, to the positional parameters (i.e.,
.Ic $1 , $2 ,
etc.).
If options end with
.Ql --
and there are no remaining arguments, all positional parameters are cleared.
If no options or arguments are given, the values of all names are printed.
For unknown historical reasons, a lone
.Ql -
option is treated specially \(em it clears both the
.Fl x
and
.Fl v
options.
.It Ic shift Op Ar number
The positional parameters
.Ar number Ns +1 ,
.Ar number Ns +2 ,
etc. are renamed to
.Dq 1 ,
.Dq 2 ,
etc.
.Ar number
defaults to 1.
.It Ic test Ar expression
.It Ic \&[ Ar expression Ic \&]
.Ic test
evaluates the
.Ar expression
and returns zero status if true, 1 if false, or greater than 1 if there
was an error.
It is normally used as the condition command of
.Ic if
and
.Ic while
statements.
Symbolic links are followed for all
.Ar file
expressions except
.Fl h
and
.Fl L .
.Pp
The following basic expressions are available:
.Bl -tag -width 17n
.It Fl r Ar file
.Ar file
exists and is readable.
.It Fl w Ar file
.Ar file
exists and is writable.
.It Fl x Ar file
.Ar file
exists and is executable.
.It Fl a Ar file
.Ar file
exists.
.It Fl e Ar file
.Ar file
exists.
.It Fl f Ar file
.Ar file
is a regular file.
.It Fl d Ar file
.Ar file
is a directory.
.It Fl c Ar file
.Ar file
is a character special device.
.It Fl b Ar file
.Ar file
is a block special device.
.It Fl p Ar file
.Ar file
is a named pipe.
.It Fl u Ar file
.Ar file Ns 's
mode has setuid bit set.
.It Fl g Ar file
.Ar file Ns 's
mode has setgid bit set.
.It Fl k Ar file
.Ar file Ns 's
mode has sticky bit set.
.It Fl s Ar file
.Ar file
is not empty.
.It Fl O Ar file
.Ar file Ns 's
owner is the shell's effective user ID.
.It Fl G Ar file
.Ar file Ns 's
group is the shell's effective group ID.
.It Fl h Ar file
.Ar file
is a symbolic link.
.It Fl H Ar file
.Ar file
is a context dependent directory (only useful on HP-UX).
.It Fl L Ar file
.Ar file
is a symbolic link.
.It Fl S Ar file
.Ar file
is a socket.
.It Fl o Ar option
Shell
.Ar option
is set (see the
.Ic set
command above for a list of options).
As a non-standard extension, if the option starts with a
.Ql \&! ,
the test is negated; the test always fails if
.Ar option
doesn't exist (thus
.Ic \&[ -o Ar foo
.Ic -o -o \&! Ns Ar foo Ic \&]
returns true if and only if option
.Ar foo
exists).
.It Ar file1 Fl nt Ar file2
.Ar file1
is newer than
.Ar file2
or
.Ar file1
exists and
.Ar file2
does not.
.It Ar file1 Fl ot Ar file2
.Ar file1
is older than
.Ar file2
or
.Ar file2
exists and
.Ar file1
does not.
.It Ar file1 Fl ef Ar file2
.Ar file1
is the same file as
.Ar file2 .
.It Fl t Op Ar fd
File descriptor
.Ar fd
is a
.Xr tty 4
device.
If the
.Ic posix
option is not set,
.Ar fd
may be left out, in which case it is taken to be 1 (the behaviour differs due
to the special
.Tn POSIX
rules described below).
.It Ar string
.Ar string
has non-zero length.
Note that there is the potential for problems if
.Ar string
turns out to be an operator (e.g.,
.Fl r ) .
It is generally better to use a test like
.Sm off
.Ic \&[\ X\&" Ar string Ic \&" Ic \ \&]
.Sm on
instead (double quotes are used in case
.Ar string
contains spaces or file globbing characters).
.It Fl z Ar string
.Ar string
is empty.
.It Fl n Ar string
.Ar string
is not empty.
.It Ar string No = Ar string
Strings are equal.
.It Ar string No == Ar string
Strings are equal.
.It Ar string No \&!= Ar string
Strings are not equal.
.It Ar number Fl eq Ar number
Numbers compare equal.
.It Ar number Fl ne Ar number
Numbers compare not equal.
.It Ar number Fl ge Ar number
Numbers compare greater than or equal.
.It Ar number Fl gt Ar number
Numbers compare greater than.
.It Ar number Fl le Ar number
Numbers compare less than or equal.
.It Ar number Fl \&lt Ar number
Numbers compare less than.
.El
.Pp
The above basic expressions, in which unary operators have precedence over
binary operators, may be combined with the following operators (listed in
increasing order of precedence):
.Pp
.Bl -tag -width "expr -o expr" -compact
.It Ar expr Fl o Ar expr
Logical
.Tn OR .
.It Ar expr Fl a Ar expr
Logical
.Tn AND .
.It Ic \&! Ar expr
Logical
.Tn NOT .
.It Ic \&( Ar expr Ic \&)
Grouping.
.El
.Pp
On operating systems not supporting
.Pa /dev/fd/ Ns Ar n
devices (where
.Ar n
is a file descriptor number), the
.Ic test
command will attempt to fake it for all tests that operate on files (except the
.Fl e
test).
For example,
.Ic \&[ -w /dev/fd/2 \&]
tests if file descriptor 2 is writable.
.Pp
Note that some special rules are applied (courtesy of
.Tn POSIX )
if the number of
arguments to
.Ic test
or
.Ic \&[ ... \&]
is less than five; if leading
.Ql \&!
arguments can be stripped such that only one argument remains then a string
length test is performed (again, even if the argument is a unary operator); if
leading
.Ql \&!
arguments can be stripped such that three arguments remain and the second
argument is a binary operator, then the binary operation is performed (even
if the first argument is a unary operator, including an unstripped
.Ql \&! ) .
.Pp
.Sy Note:
A common mistake is to use
.Ic if \&[ $foo = bar \&]
which fails if parameter
.Ic foo
is
.Dv NULL
or unset, if it has embedded spaces (i.e.,
.Ev IFS
characters), or if it is a unary operator like
.Sq Ic \&!
or
.Sq Fl n .
Use tests like
.Ic if \&[ \&"X$foo\&" = Xbar \&]
instead.
.It Xo Ic time Op Fl p
.Op Ar pipeline
.Xc
If a
.Ar pipeline
is given, the times used to execute the pipeline are reported.
If no pipeline
is given, then the user and system time used by the shell itself, and all the
commands it has run since it was started, are reported.
The times reported are the real time (elapsed time from start to finish),
the user CPU time (time spent running in user mode), and the system CPU time
(time spent running in kernel mode).
Times are reported to standard error; the format of the output is:
.Pp
.Dl "0m0.00s real     0m0.00s user     0m0.00s system"
.Pp
If the
.Fl p
option is given the output is slightly longer:
.Bd -literal -offset indent
real     0.00
user     0.00
sys      0.00
.Ed
.Pp
It is an error to specify the
.Fl p
option unless
.Ar pipeline
is a simple command.
.Pp
Simple redirections of standard error do not effect the output of the
.Ic time
command:
.Pp
.Dl time sleep 1 2> afile
.Dl { time sleep 1; } 2> afile
.Pp
Times for the first command do not go to
.Dq afile ,
but those of the second command do.
.It Ic times
Print the accumulated user and system times used both by the shell
and by processes that the shell started which have exited.
The format of the output is:
.Bd -literal -offset indent
0m0.00s 0m0.00s
0m0.00s 0m0.00s
.Ed
.It Ic trap Op Ar handler signal ...
Sets a trap handler that is to be executed when any of the specified signals are
received.
.Ar handler
is either a
.Dv NULL
string, indicating the signals are to be ignored, a minus sign
.Pq Sq \&- ,
indicating that the default action is to be taken for the signals (see
.Xr signal 3 ) ,
or a string containing shell commands to be evaluated and executed at the first
opportunity (i.e., when the current command completes, or before printing the
next
.Ev PS1
prompt) after receipt of one of the signals.
.Ar signal
is the name of a signal (e.g.,
.Dv PIPE
or
.Dv ALRM )
or the number of the signal (see the
.Ic kill Fl l
command above).
There are two special signals:
.Dv EXIT
(also known as 0), which is executed when the shell is about to exit, and
.Dv ERR ,
which is executed after an error occurs (an error is something that would cause
the shell to exit if the
.Fl e
or
.Ic errexit
option were see \(em see the
.Ic set
command above).
.Dv EXIT
handlers are executed in the environment of the last executed command.
Note
that for non-interactive shells, the trap handler cannot be changed for signals
that were ignored when the shell started.
.Pp
With no arguments,
.Ic trap
lists, as a series of
.Ic trap
commands, the current state of the traps that have been set since the shell
started.
Note that the output of
.Ic trap
cannot be usefully piped to another process (an artifact of the fact that
traps are cleared when subprocesses are created).
.Pp
The original Korn shell's
.Dv DEBUG
trap and the handling of
.Dv ERR
and
.Dv EXIT
traps in functions are not yet implemented.
.It Ic true
A command that exits with a zero value.
.It Xo Ic typeset
.Oo Op Ic +-Ulprtux
.Op Fl L Ns Op Ar n
.Op Fl R Ns Op Ar n
.Op Fl Z Ns Op Ar n
.Op Fl i Ns Op Ar n
.No \&| Fl f Op Fl tux Oc
.Oo Ar name
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
Display or set parameter attributes.
With no
.Ar name
arguments, parameter attributes are displayed; if no options are used, the
current attributes of all parameters are printed as
.Ic typeset
commands; if an option is given (or
.Ql -
with no option letter), all parameters and their values with the specified
attributes are printed; if options are introduced with
.Ql + ,
parameter values are not printed.
.Pp
If
.Ar name
arguments are given, the attributes of the named parameters are set
.Pq Ic \&-
or cleared
.Pq Ic \&+ .
Values for parameters may optionally be specified.
If
.Ic typeset
is used inside a function, any newly created parameters are local to the
function.
.Pp
When
.Fl f
is used,
.Ic typeset
operates on the attributes of functions.
As with parameters, if no
.Ar name Ns s
are given, functions are listed with their values (i.e., definitions) unless
options are introduced with
.Ql + ,
in which case only the function names are reported.
.Bl -tag -width 3n
.It Fl L Ns Ar n
Left justify attribute.
.Ar n
specifies the field width.
If
.Ar n
is not specified, the current width of a parameter (or the width of its first
assigned value) is used.
Leading whitespace (and zeros, if used with the
.Fl Z
option) is stripped.
If necessary, values are either truncated or space padded
to fit the field width.
.It Fl R Ns Ar n
Right justify attribute.
.Ar n
specifies the field width.
If
.Ar n
is not specified, the current width of a parameter (or the width of its first
assigned value) is used.
Trailing whitespace is stripped.
If necessary, values are either stripped of leading characters or space
padded to make them fit the field width.
.It Fl Z Ns Ar n
Zero fill attribute.
If not combined with
.Fl L ,
this is the same as
.Fl R ,
except zero padding is used instead of space padding.
.It Fl i Ns Ar n
Integer attribute.
.Ar n
specifies the base to use when displaying the integer (if not specified, the
base given in the first assignment is used).
Parameters with this attribute may
be assigned values containing arithmetic expressions.
.It Fl U
Unsigned integer attribute.
Integers are printed as unsigned values (only
useful when combined with the
.Fl i
option).
This option is not in the original Korn shell.
.It Fl f
Function mode.
Display or set functions and their attributes, instead of parameters.
.It Fl l
Lower case attribute.
All upper case characters in values are converted to lower case.
(In the original Korn shell, this parameter meant
.Dq long integer
when used with the
.Fl i
option.)
.It Fl p
Print complete
.Ic typeset
commands that can be used to re-create the attributes (but not the values) of
parameters.
This is the default action (option exists for ksh93 compatibility).
.It Fl r
Read-only attribute.
Parameters with this attribute may not be assigned to or unset.
Once this attribute is set, it cannot be turned off.
.It Fl t
Tag attribute.
Has no meaning to the shell; provided for application use.
.Pp
For functions,
.Fl t
is the trace attribute.
When functions with the trace attribute are executed, the
.Ic xtrace
.Pq Fl x
shell option is temporarily turned on.
.It Fl u
Upper case attribute.
All lower case characters in values are converted to upper case.
(In the original Korn shell, this parameter meant
.Dq unsigned integer
when used with the
.Fl i
option, which meant upper case letters would never be used for bases greater
than 10.
See the
.Fl U
option.)
.Pp
For functions,
.Fl u
is the undefined attribute.
See
.Sx Functions
above for the implications of this.
.It Fl x
Export attribute.
Parameters (or functions) are placed in the environment of
any executed commands.
Exported functions are not yet implemented.
.El
.It Xo Ic ulimit Op Fl acdfHlmnpsStv
.Op Ar value
.Xc
Display or set process limits.
If no options are used, the file size limit
.Pq Fl f
is assumed.
.Ar value ,
if specified, may be either an arithmetic expression or the word
.Dq unlimited .
The limits affect the shell and any processes created by the shell after a
limit is imposed.
Note that some systems may not allow limits to be increased
once they are set.
Also note that the types of limits available are system
dependent \(em some systems have only the
.Fl f
limit.
.Bl -tag -width 5n
.It Fl a
Displays all limits; unless
.Fl H
is used, soft limits are displayed.
.It Fl H
Set the hard limit only (default is to set both hard and soft limits).
.It Fl S
Set the soft limit only (default is to set both hard and soft limits).
.It Fl c Ar n
Impose a size limit of
.Ar n
blocks on the size of core dumps.
.It Fl d Ar n
Impose a size limit of
.Ar n
kilobytes on the size of the data area.
.It Fl f Ar n
Impose a size limit of
.Ar n
blocks on files written by the shell and its child processes (files of any
size may be read).
.It Fl l Ar n
Impose a limit of
.Ar n
kilobytes on the amount of locked (wired) physical memory.
.It Fl m Ar n
Impose a limit of
.Ar n
kilobytes on the amount of physical memory used.
.It Fl n Ar n
Impose a limit of
.Ar n
file descriptors that can be open at once.
.It Fl p Ar n
Impose a limit of
.Ar n
processes that can be run by the user at any one time.
.It Fl s Ar n
Impose a size limit of
.Ar n
kilobytes on the size of the stack area.
.It Fl t Ar n
Impose a time limit of
.Ar n
.Tn CPU
seconds to be used by each process.
.It Fl v Ar n
Impose a limit of
.Ar n
kilobytes on the amount of virtual memory used.
.El
.Pp
As far as
.Ic ulimit
is concerned, a block is 512 bytes.
.It Xo Ic umask Op Fl S
.Op Ar mask
.Xc
Display or set the file permission creation mask, or umask (see
.Xr umask 2 ) .
If the
.Fl S
option is used, the mask displayed or set is symbolic; otherwise, it is an
octal number.
.Pp
Symbolic masks are like those used by
.Xr chmod 1 .
When used, they describe what permissions may be made available (as opposed to
octal masks in which a set bit means the corresponding bit is to be cleared).
For example,
.Dq ug=rwx,o=
sets the mask so files will not be readable, writable or executable by
.Dq others ,
and is equivalent (on most systems) to the octal mask
.Dq 007 .
.It Xo Ic unalias Op Fl adt
.Op Ar name1 ...
.Xc
The aliases for the given names are removed.
If the
.Fl a
option is used, all aliases are removed.
If the
.Fl t
or
.Fl d
options are used, the indicated operations are carried out on tracked or
directory aliases, respectively.
.It Xo Ic unset Op Fl fv
.Ar parameter ...
.Xc
Unset the named parameters
.Po
.Fl v ,
the default
.Pc
or functions
.Pq Fl f .
The exit status is non-zero if any of the parameters were already unset, zero
otherwise.
.It Ic wait Op Ar job ...
Wait for the specified job(s) to finish.
The exit status of
.Ic wait
is that of the last specified job; if the last job is killed by a signal, the
exit status is 128 + the number of the signal (see
.Ic kill -l Ar exit-status
above); if the last specified job can't be found (because it never existed, or
had already finished), the exit status of
.Ic wait
is 127.
See
.Sx Job control
below for the format of
.Ar job .
.Ic wait
will return if a signal for which a trap has been set is received, or if a
.Dv SIGHUP ,
.Dv SIGINT ,
or
.Dv SIGQUIT
signal is received.
.Pp
If no jobs are specified,
.Ic wait
waits for all currently running jobs (if any) to finish and exits with a zero
status.
If job monitoring is enabled, the completion status of jobs is printed
(this is not the case when jobs are explicitly specified).
.It Xo Ic whence Op Fl pv
.Op Ar name ...
.Xc
For each
.Ar name ,
the type of command is listed (reserved word, built-in, alias,
function, tracked alias, or executable).
If the
.Fl p
option is used, a path search is performed even if
.Ar name
is a reserved word, alias, etc.
Without the
.Fl v
option,
.Ic whence
is similar to
.Ic command Fl v
except that
.Ic whence
will find reserved words and won't print aliases as alias commands.
With the
.Fl v
option,
.Ic whence
is the same as
.Ic command Fl V .
Note that for
.Ic whence ,
the
.Fl p
option does not affect the search path used, as it does for
.Ic command .
If the type of one or more of the names could not be determined, the exit
status is non-zero.
.El
.Ss Job control
Job control refers to the shell's ability to monitor and control jobs, which
are processes or groups of processes created for commands or pipelines.
At a minimum, the shell keeps track of the status of the background (i.e.,
asynchronous) jobs that currently exist; this information can be displayed
using the
.Ic jobs
commands.
If job control is fully enabled (using
.Ic set Fl m
or
.Ic set Fl o Ic monitor ) ,
as it is for interactive shells, the processes of a job are placed in their
own process group.
Foreground jobs can be stopped by typing the suspend
character from the terminal (normally ^Z), jobs can be restarted in either the
foreground or background using the
.Ic fg
and
.Ic bg
commands, and the state of the terminal is saved or restored when a foreground
job is stopped or restarted, respectively.
.Pp
Note that only commands that create processes (e.g., asynchronous commands,
subshell commands, and non-built-in, non-function commands) can be stopped;
commands like
.Ic read
cannot be.
.Pp
When a job is created, it is assigned a job number.
For interactive shells, this number is printed inside
.Dq \&[..\&] ,
followed by the process IDs of the processes in the job when an asynchronous
command is run.
A job may be referred to in the
.Ic bg ,
.Ic fg ,
.Ic jobs ,
.Ic kill ,
and
.Ic wait
commands either by the process ID of the last process in the command pipeline
(as stored in the
.Ic $!\&
parameter) or by prefixing the job number with a percent
sign
.Pq Sq % .
Other percent sequences can also be used to refer to jobs:
.Bl -tag -width 10n
.It Ic %\&+
The most recently stopped job, or, if there are no stopped jobs, the oldest
running job.
.It Ic %% , %
Same as
.Ic %\&+ .
.It Ic %\&-
The job that would be the
.Ic %\&+
job if the latter did not exist.
.It Ic % Ns Ar n
The job with job number
.Ar n .
.It Ic %\&? Ns Ar string
The job containing the string
.Ar string
(an error occurs if multiple jobs are matched).
.It Ic % Ns Ar string
The job starting with string
.Ar string
(an error occurs if multiple jobs are matched).
.El
.Pp
When a job changes state (e.g., a background job finishes or foreground job is
stopped), the shell prints the following status information:
.Bd -unfilled -offset indent
.Ic \&[ Ar number Ic \&] Ar flag status command
.Ed
.Pp
where
.Bl -tag -width "status"
.It Ar number
is the job number of the job.
.It Ar flag
is the
.Ql +
or
.Ql -
character if the job is the
.Ic %\&+ or
.Ic %\&-
job, respectively, or space if it is neither.
.It Ar status
indicates the current state of the job and can be:
.Bl -tag -width "Running"
.It Cm Running
The job has neither stopped nor exited (note that running does not necessarily
mean consuming
.Tn CPU
time \(em the process could be blocked waiting for some
event).
.It Cm Done Op Ar number
The job exited.
.Ar number
is the exit status of the job, which is omitted if the status is zero.
.It Cm Stopped Op Ar signal
The job was stopped by the indicated
.Ar signal
(if no signal is given, the job was stopped by
.Dv SIGTSTP ) .
.It Ar signal-description Op Dq core dumped
The job was killed by a signal (e.g., memory fault, hangup, etc.; use
.Ic kill -l
for a list of signal descriptions).
The
.Dq core dumped
message indicates the process created a core file.
.El
.It Ar command
is the command that created the process.
If there are multiple processes in
the job, each process will have a line showing its
.Ar command
and possibly its
.Ar status ,
if it is different from the status of the previous process.
.El
.Pp
When an attempt is made to exit the shell while there are jobs in the stopped
state, the shell warns the user that there are stopped jobs and does not exit.
If another attempt is immediately made to exit the shell, the stopped jobs are
sent a
.Dv SIGHUP
signal and the shell exits.
Similarly, if the
.Ic nohup
option is not set and there are running jobs when an attempt is made to exit
a login shell, the shell warns the user and does not exit.
If another attempt
is immediately made to exit the shell, the running jobs are sent a
.Dv SIGHUP
signal and the shell exits.
.Ss Interactive input line editing
The shell supports three modes of reading command lines from a
.Xr tty 4
in an
interactive session, which is controlled by the
.Ic emacs ,
.Ic gmacs ,
and
.Ic vi
options (at most one of these can be set at once).
If none of these options are enabled, the shell simply reads lines using the
normal
.Xr tty 4
driver.
If the
.Ic emacs
or
.Ic gmacs
option is set, the shell allows emacs-like editing of the command; similarly,
if the
.Ic vi
option is set, the shell allows vi-like editing of the command.
These modes are described in detail in the following sections.
.Pp
In these editing modes, if a line is longer than the screen width (see
.Ev COLUMNS
parameter),
a
.Ql > ,
.Ql + ,
or
.Ql <
character is displayed in the last column indicating that there are more
characters after, before and after, or before the current position,
respectively.
The line is scrolled horizontally as necessary.
.Ss Emacs editing mode
When the
.Ic emacs
option is set, interactive input line editing is enabled.
Warning: This mode is
slightly different from the emacs mode in the original Korn shell.
In this mode, various editing commands
(typically bound to one or more control characters) cause immediate actions
without waiting for a newline.
Several editing commands are bound to particular
control characters when the shell is invoked; these bindings can be changed
using the
.Ic bind
command.
.Pp
The following is a list of available editing commands.
Each description starts with the name of the command, an
.Ar n
(if the command can be prefixed with a count), and any keys the command is
bound to by default (written using caret notation, i.e.,
.Tn "ASCII ESC"
character is
written as ^[).
A count prefix for a command is entered using the sequence
.Ic ^\&[ Ns Ar n ,
where
.Ar n
is a sequence of 1 or more digits; unless otherwise specified, if a count is
omitted, it defaults to 1.
Note that editing command names are used only with the
.Ic bind
command.
Furthermore, many editing commands are useful only on terminals with
a visible cursor.
The default bindings were chosen to resemble corresponding
Emacs key bindings.
The users'
.Xr tty 4
characters (e.g.,
.Dv ERASE )
are bound to
reasonable substitutes and override the default bindings.
.Bl -tag -width Ds
.It Ic abort ^G
Useful as a response to a request for a
.Ic search-history
pattern in order to abort the search.
.It Ic auto-insert Ar n
Simply causes the character to appear as literal input.
Most ordinary characters are bound to this.
.It Ic backward-char Ar n Ic ^B
Moves the cursor backward
.Ar n
characters.
.It Ic backward-word Ar n Ic ^[B
Moves the cursor backward to the beginning of the word; words consist of
alphanumerics, underscore
.Pq Sq _
and dollar sign
.Pq Sq $
characters.
.It Ic beginning-of-history ^[<
Moves to the beginning of the history.
.It Ic beginning-of-line ^A
Moves the cursor to the beginning of the edited input line.
.It Ic capitalize-word Ar n Ic ^[c , ^[C
Uppercase the first character in the next
.Ar n
words, leaving the cursor past the end of the last word.
.It Ic comment ^[#
If the current line does not begin with a comment character, one is added at
the beginning of the line and the line is entered (as if return had been
pressed); otherwise, the existing comment characters are removed and the cursor
is placed at the beginning of the line.
.It Ic complete ^[^[
.It Ic complete ^I
Automatically completes as much as is unique of the command name or the file
name containing the cursor.
If the entire remaining command or file name is
unique, a space is printed after its completion, unless it is a directory name
in which case
.Ql /
is appended.
If there is no command or file name with the current partial word
as its prefix, a bell character is output (usually causing a beep to be
sounded).
.It Ic complete-command ^X^[
Automatically completes as much as is unique of the command name having the
partial word up to the cursor as its prefix, as in the
.Ic complete
command above.
.It Ic complete-file ^[^X
Automatically completes as much as is unique of the file name having the
partial word up to the cursor as its prefix, as in the
.Ic complete
command described above.
.It Ic complete-list ^[=
List the possible completions for the current word.
.It Xo Ic delete-char-backward Ar n Ic ERASE ,
.Ic ^? , ^H
.Xc
Deletes
.Ar n
characters before the cursor.
.It Ic delete-char-forward Ar n
Deletes
.Ar n
characters after the cursor.
.It Xo Ic delete-word-backward Ar n Ic ^[ERASE ,
.Ic ^[^? , ^[^H , ^[h
.Xc
Deletes
.Ar n
words before the cursor.
.It Ic delete-word-forward Ar n Ic ^[d
Deletes characters after the cursor up to the end of
.Ar n
words.
.It Ic down-history Ar n Ic ^N
Scrolls the history buffer forward
.Ar n
lines (later).
Each input line originally starts just after the last entry
in the history buffer, so
.Ic down-history
is not useful until either
.Ic search-history
or
.Ic up-history
has been performed.
.It Ic downcase-word Ar n Ic ^[L , ^[l
Lowercases the next
.Ar n
words.
.It Ic end-of-history ^[>
Moves to the end of the history.
.It Ic end-of-line ^E
Moves the cursor to the end of the input line.
.It Ic eot ^_
Acts as an end-of-file; this is useful because edit-mode input disables
normal terminal input canonicalization.
.It Ic eot-or-delete Ar n Ic ^D
Acts as
.Ic eot
if alone on a line; otherwise acts as
.Ic delete-char-forward .
.It Ic error
Error (ring the bell).
.It Ic exchange-point-and-mark ^X^X
Places the cursor where the mark is and sets the mark to where the cursor was.
.It Ic expand-file ^[\&*
Appends a
.Ql *
to the current word and replaces the word with the result of performing file
globbing on the word.
If no files match the pattern, the bell is rung.
.It Ic forward-char Ar n Ic ^F
Moves the cursor forward
.Ar n
characters.
.It Ic forward-word Ar n Ic ^[f
Moves the cursor forward to the end of the
.Ar n Ns th
word.
.It Ic goto-history Ar n Ic ^[g
Goes to history number
.Ar n .
.It Ic kill-line KILL
Deletes the entire input line.
.It Ic kill-region ^W
Deletes the input between the cursor and the mark.
.It Ic kill-to-eol Ar n Ic ^K
Deletes the input from the cursor to the end of the line if
.Ar n
is not specified; otherwise deletes characters between the cursor and column
.Ar n .
.It Ic list ^[?
Prints a sorted, columnated list of command named or file names (if any) that
can complete the partial word containing the cursor.
Directory names have
.Ql /
appended to them.
.It Ic list-command ^X?
Prints a sorted, columnated list of command names (if any) that can complete
the partial word containing the cursor.
.It Ic list-file ^X^Y
Prints a sorted, columnated list of file names (if any) that can complete the
partial word containing the cursor.
File type indicators are appended as described under
.Ic list
above.
.It Ic newline ^J , ^M
Causes the current input line to be processed by the shell.
The current cursor position may be anywhere on the line.
.It Ic newline-and-next ^O
Causes the current input line to be processed by the shell, and the next line
from history becomes the current line.
This is only useful after an
.Ic up-history
or
.Ic search-history .
.It Ic no-op QUIT
This does nothing.
.It Ic prefix-1 ^[
Introduces a 2-character command sequence.
.It Ic prefix-2 ^X
.It Ic prefix-2 ^[[
Introduces a 2-character command sequence.
.It Ic prev-hist-word Ar n Ic ^[\&. , ^[_
The last
.Pq Ar n Ns th
word of the previous command is inserted at the cursor.
.It Ic quote ^^
The following character is taken literally rather than as an editing command.
.It Ic redraw ^L
Reprints the prompt string and the current input line.
.It Ic search-character-backward Ar n Ic ^[^]
Search backward in the current line for the
.Ar n Ns th
occurrence of the next character typed.
.It Ic search-character-forward Ar n Ic ^]
Search forward in the current line for the
.Ar n Ns th
occurrence of the next character typed.
.It Ic search-history ^R
Enter incremental search mode.
The internal history list is searched
backwards for commands matching the input.
An initial
.Ql ^
in the search string anchors the search.
The abort key will leave search mode.
Other commands will be executed after leaving search mode.
Successive
.Ic search-history
commands continue searching backward to the next previous occurrence of the
pattern.
The history buffer retains only a finite number of lines; the oldest
are discarded as necessary.
.It Ic set-mark-command ^[ Ns <space>
Set the mark at the cursor position.
.It Ic stuff
On systems supporting it, pushes the bound character back onto the terminal
input where it may receive special processing by the terminal handler.
This is useful for the BRL ^T mini-systat feature, for example.
.It Ic stuff-reset
Acts like
.Ic stuff ,
then aborts input the same as an interrupt.
.It Ic transpose-chars ^T
If at the end of line, or if the
.Ic gmacs
option is set, this exchanges the two previous characters; otherwise, it
exchanges the previous and current characters and moves the cursor one
character to the right.
.It Ic up-history Ar n Ic ^P
Scrolls the history buffer backward
.Ar n
lines (earlier).
.It Ic upcase-word Ar n Ic ^[U , ^[u
Uppercase the next
.Ar n
words.
.It Ic version ^V
Display the version of
.Nm .
The current edit buffer is restored as soon as any
key is pressed (the key is then processed, unless it is a space).
.It Ic yank ^Y
Inserts the most recently killed text string at the current cursor position.
.It Ic yank-pop ^[y
Immediately after a
.Ic yank ,
replaces the inserted text string with the next previously killed text string.
.El
.Ss Vi editing mode
The vi command-line editor in
.Nm
has basically the same commands as the vi
editor (see
.Xr vi 1 ) ,
with the following exceptions:
.Bl -bullet
.It
You start out in insert mode.
.It
There are file name and command completion commands
.Po
.Ic = , \e , \&* , ^X ,
.Ic ^E , ^F ,
and, optionally,
.Ic <tab>
.Pc .
.It
The
.Ic _
command is different (in
.Nm
it is the last argument command, in vi it goes to
the start of the current line).
.It
The
.Ic /
and
.Ic G
commands move in the opposite direction as the
.Ic j
command.
.It
Commands which don't make sense in a single line editor are not available
(e.g., screen movement commands,
.Xr ex 1 Ns -style
colon
.Pq Ic \&:
commands, etc.).
.El
.Pp
Note that the ^X stands for control-X; also <esc>, <space> and <tab> are used
for escape, space, and tab, respectively (no kidding).
.Pp
Like vi, there are two modes \(em
.Dq insert
mode and
.Dq command
mode.
In insert mode, most characters are simply put in the buffer at the
current cursor position as they are typed; however, some characters are
treated specially.
In particular, the following characters are taken from
current tty settings (see
.Xr tty 1 )
and have their usual meaning (normal values are in parentheses): kill (^U),
erase (^?), werase (^W), eof (^D), intr (^C), and quit (^\e).
In addition to
the above, the following characters are also treated specially in insert mode:
.Bl -tag -width 10n
.It Ic ^H
Erases previous character.
.It Ic ^V
Literal next.
The next character typed is not treated specially (can be used
to insert the characters being described here).
.It Ic ^J ^M
End of line.
The current line is read, parsed, and executed by the shell.
.It Ic <esc>
Puts the editor in command mode (see below).
.It Ic ^E
Command and file name enumeration (see below).
.It Ic ^F
Command and file name completion (see below).
If used twice in a row, the
list of possible completions is displayed; if used a third time, the completion
is undone.
.It Ic ^X
Command and file name expansion (see below).
.It Ic <tab>
Optional file name and command completion (see
.Ic ^F
above), enabled with
.Ic set Fl o Ic vi-tabcomplete .
.El
.Pp
In command mode, each character is interpreted as a command.
Characters that
don't correspond to commands, are illegal combinations of commands, or are
commands that can't be carried out all cause beeps.
In the following command descriptions, an
.Ar n
indicates the command may be prefixed by a number (e.g.,
.Ic 10l
moves right 10 characters); if no number prefix is used,
.Ar n
is assumed to be 1 unless otherwise specified.
The term
.Dq current position
refers to the position between the cursor and the character preceding the
cursor.
A
.Dq word
is a sequence of letters, digits, and underscore characters or a sequence of
non-letter, non-digit, non-underscore, non-whitespace characters (e.g.,
.Dq ab2\&*\&&^
contains two words) and a
.Dq big-word
is a sequence of non-whitespace characters.
.Pp
Special
.Nm
vi commands
.Pp
The following commands are not in, or are different from, the normal vi file
editor:
.Bl -tag -width 10n
.It Ar n Ns _
Insert a space followed by the
.Ar n Ns th
big-word from the last command in the history at the current position and enter
insert mode; if
.Ar n
is not specified, the last word is inserted.
.It Ic \&#
Insert the comment character
.Pq Sq #
at the start of the current line and return the line to the shell (equivalent
to
.Ic \&I#^J ) .
.It Ar n Ns Ic g
Like
.Ic G ,
except if
.Ar n
is not specified, it goes to the most recent remembered line.
.It Ar n Ns Ic v
Edit line
.Ar n
using the vi editor; if
.Ar n
is not specified, the current line is edited.
The actual command executed is
.Ic fc Fl e Ic ${VISUAL;-${EDITOR:-vi}} Ar n .
.It Ic \&* No and Ic ^X
Command or file name expansion is applied to the current big-word (with an
appended
.Ql * ,
if the word contains no file globbing characters) \(em the big-word is replaced
with the resulting words.
If the current big-word is the first on the line (or
follows one of the following characters:
.Ql \&; ,
.Ql | ,
.Ql & ,
.Ql ( ,
or
.Ql \&) )
and does not contain a slash
.Pq Sq /
then the command expansion is done; otherwise file name expansion is done.
Command expansion will match the big-word against all aliases, functions and
built-in commands as well as any executable files found by searching the
directories in the
.Ev PATH
parameter.
File name expansion matches the big-word against the files in the
current directory.
After expansion, the cursor is placed just past the last
word and the editor is in insert mode.
.It Xo
.Ar n Ns Ic \e Ns ,
.Ar n Ns Ic ^F ,
.Ar n Ns Ic <tab> ,
.No and
.Ar n Ns Ic <esc>
.Xc
Command/file name completion.
Replace the current big-word with the
longest unique match obtained after performing command and file name expansion.
.Ic <tab>
is only recognized if the
.Ic vi-tabcomplete
option is set, while
.Ic <esc>
is only recognized if the
.Ic vi-esccomplete
option is set (see
.Ic set Fl o ) .
If
.Ar n
is specified, the
.Ar n Ns th
possible completion is selected (as reported by the command/file name
enumeration command).
.It Ic \&= No and Ic ^E
Command/file name enumeration.
List all the commands or files that match the current big-word.
.It Ic ^V
Display the version of
.Nm pdksh ;
it is displayed until another key is pressed (this key is ignored).
.It Ic @@ Ns Ar c
Macro expansion.
Execute the commands found in the alias
.Ar c .
.El
.Pp
Intra-line movement commands:
.Bl -tag -width Ds
.It Xo Ar n Ns Ic h No and
.Ar n Ns Ic ^H
.Xc
Move left
.Ar n
characters.
.It Xo Ar n Ns Ic l No and
.Ar n Ns Ic <space>
.Xc
Move right
.Ar n
characters.
.It Ic \&0
Move to column 0.
.It Ic ^
Move to the first non-whitespace character.
.It Ar n Ns Ic \&|
Move to column
.Ar n .
.It Ic $
Move to the last character.
.It Ar n Ns Ic b
Move back
.Ar n
words.
.It Ar n Ns Ic B
Move back
.Ar n
big-words.
.It Ar n Ns Ic e
Move forward to the end of the word,
.Ar n
times.
.It Ar n Ns Ic E
Move forward to the end of the big-word,
.Ar n
times.
.It Ar n Ns Ic w
Move forward
.Ar n
words.
.It Ar n Ns Ic W
Move forward
.Ar n
big-words.
.It Ic %
Find match.
The editor looks forward for the nearest parenthesis, bracket, or
brace and then moves the cursor to the matching parenthesis, bracket, or brace.
.It Ar n Ns Ic f Ns Ar c
Move forward to the
.Ar n Ns th
occurrence of the character
.Ar c .
.It Ar n Ns Ic F Ns Ar c
Move backward to the
.Ar n Ns th
occurrence of the character
.Ar c .
.It Ar n Ns Ic t Ns Ar c
Move forward to just before the
.Ar n Ns th
occurrence of the character
.Ar c .
.It Ar n Ns Ic T Ns Ar c
Move backward to just before the
.Ar n Ns th
occurrence of the character
.Ar c .
.It Ar n Ns Ic \&;
Repeats the last
.Ic f , F , t ,
or
.Ic T
command.
.It Ar n Ns Ic \&,
Repeats the last
.Ic f , F , t ,
or
.Ic T
command, but moves in the opposite direction.
.El
.Pp
Inter-line movement commands:
.Bl -tag -width Ds
.It Xo
.Ar n Ns Ic j ,
.Ar n Ns Ic + ,
.No and
.Ar n Ns Ic ^N
.Xc
Move to the
.Ar n Ns th
next line in the history.
.It Xo
.Ar n Ns Ic k ,
.Ar n Ns Ic - ,
.No and
.Ar n Ns Ic ^P
.Xc
Move to the
.Ar n Ns th
previous line in the history.
.It Ar n Ns Ic G
Move to line
.Ar n
in the history; if
.Ar n
is not specified, the number of the first remembered line is used.
.It Ar n Ns Ic g
Like
.Ic G ,
except if
.Ar n
is not specified, it goes to the most recent remembered line.
.It Ar n Ns Ic / Ns Ar string
Search backward through the history for the
.Ar n Ns th
line containing
.Ar string ;
if
.Ar string
starts with
.Ql ^ ,
the remainder of the string must appear at the start of the history line for
it to match.
.It Ar n Ns Ic \&? Ns Ar string
Same as
.Ic / ,
except it searches forward through the history.
.It Ar n Ns Ic n
Search for the
.Ar n Ns th
occurrence of the last search string; the directory of the search is the same
as the last search.
.It Ar n Ns Ic N
Search for the
.Ar n Ns th
occurrence of the last search string; the directory of the search is the
opposite of the last search.
.El
.Pp
Edit commands
.Bl -tag -width Ds
.It Ar n Ns Ic a
Append text
.Ar n
times; goes into insert mode just after the current position.
The append is
only replicated if command mode is re-entered (i.e., <esc> is used).
.It Ar n Ns Ic A
Same as
.Ic a ,
except it appends at the end of the line.
.It Ar n Ns Ic i
Insert text
.Ar n
times; goes into insert mode at the current position.
The insertion is only
replicated if command mode is re-entered (i.e., <esc> is used).
.It Ar n Ns Ic I
Same as
.Ic i ,
except the insertion is done just before the first non-blank character.
.It Ar n Ns Ic s
Substitute the next
.Ar n
characters (i.e., delete the characters and go into insert mode).
.It Ic S
Substitute whole line.
All characters from the first non-blank character to the
end of the line are deleted and insert mode is entered.
.It Ar n Ns Ic c Ns Ar move-cmd
Change from the current position to the position resulting from
.Ar n move-cmd Ns s
(i.e., delete the indicated region and go into insert mode); if
.Ar move-cmd
is
.Ic c ,
the line starting from the first non-blank character is changed.
.It Ic C
Change from the current position to the end of the line (i.e., delete to the
end of the line and go into insert mode).
.It Ar n Ns Ic x
Delete the next
.Ar n
characters.
.It Ar n Ns Ic X
Delete the previous
.Ar n
characters.
.It Ic D
Delete to the end of the line.
.It Ar n Ns Ic d Ns Ar move-cmd
Delete from the current position to the position resulting from
.Ar n move-cmd Ns s ;
.Ar move-cmd
is a movement command (see above) or
.Ic d ,
in which case the current line is deleted.
.It Ar n Ns Ic r Ns Ar c
Replace the next
.Ar n
characters with the character
.Ar c .
.It Ar n Ns Ic R
Replace.
Enter insert mode but overwrite existing characters instead of
inserting before existing characters.
The replacement is repeated
.Ar n
times.
.It Ar n Ns Ic \&~
Change the case of the next
.Ar n
characters.
.It Ar n Ns Ic y Ns Ar move-cmd
Yank from the current position to the position resulting from
.Ar n move-cmd Ns s
into the yank buffer; if
.Ar move-cmd
is
.Ic y ,
the whole line is yanked.
.It Ic Y
Yank from the current position to the end of the line.
.It Ar n Ns Ic p
Paste the contents of the yank buffer just after the current position,
.Ar n
times.
.It Ar n Ns Ic P
Same as
.Ic p ,
except the buffer is pasted at the current position.
.El
.Pp
Miscellaneous vi commands
.Bl -tag -width Ds
.It Ic ^J No and Ic ^M
The current line is read, parsed, and executed by the shell.
.It Ic ^L No and Ic ^R
Redraw the current line.
.It Ar n Ns Ic \&.
Redo the last edit command
.Ar n
times.
.It Ic u
Undo the last edit command.
.It Ic U
Undo all changes that have been made to the current line.
.It Ar intr No and Ar quit
The interrupt and quit terminal characters cause the current line to be
deleted and a new prompt to be printed.
.El
.Sh FILES
.Bl -tag -width "/etc/suid_profile" -compact
.It Pa ~/.profile
.It Pa /etc/profile
.It Pa /etc/suid_profile
.El
.Sh SEE ALSO
.Xr awk 1 ,
.Xr csh 1 ,
.Xr ed 1 ,
.Xr getconf 1 ,
.Xr getopt 1 ,
.Xr sed 1 ,
.Xr sh 1 ,
.Xr stty 1 ,
.Xr vi 1 ,
.Xr dup 2 ,
.Xr execve 2 ,
.Xr getgid 2 ,
.Xr getuid 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr wait 2 ,
.Xr getopt 3 ,
.Xr rand 3 ,
.Xr signal 3 ,
.Xr strftime 3 ,
.Xr system 3 ,
.Xr tty 4 ,
.Xr environ 7
.Pp
.Rs
.%A Morris Bolsky
.%A David Korn
.%T "The KornShell Command and Programming Language"
.%D 1983
.%O "ISBN 0-13-516972-0"
.Re
.Rs
.%A Stephen G. Kochan
.%A Patrick H. Wood
.%T "UNIX Shell Programming"
.%O "Hayden"
.Re
.Rs
.%A "IEEE Inc."
.%T "IEEE Standard for Information Technology - Portable Operating System Interface (POSIX) - Part 2: Shell and Utilities"
.%D 1993
.%O "ISBN 1-55937-266-9"
.Re
.Sh VERSION
This page documents version @@(#)PD KSH v5.2.14 99/07/13.2 of the public
domain Korn shell.
.Sh AUTHORS
This shell is based on the public domain 7th edition Bourne shell clone by
Charles Forsyth and parts of the BRL shell by Doug A. Gwyn, Doug Kingston,
Ron Natalie, Arnold Robbins, Lou Salkind, and others.
The first release of
.Nm pdksh
was created by Eric Gisin, and it was subsequently maintained by John R.\&
MacMillan (change!john@@sq.sq.com) and Simon J. Gerraty (sjg@@zen.void.oz.au).
The current maintainer is Michael Rendell (michael@@cs.mun.ca).
The
.Pa CONTRIBUTORS
file in the source distribution contains a more complete list of people and
their part in the shell's development.
.Sh BUGS
Any bugs in
.Nm pdksh
should be reported to pdksh@@cs.mun.ca.
Please include the version of
.Nm pdksh
.Po
.Ic echo $KSH_VERSION
shows it
.Pc ,
the machine, operating system, and compiler you are using and a description of
how to repeat the bug (a small shell script that demonstrates the bug is best).
The following, if relevant (if you are not sure, include them), can also be
helpful: options you are using (both
.Pa options.h
and
.Ic set Fl o Ic options )
and a copy of your
.Pa config.h
(the file generated by the
.Pa configure
script).
New versions of
.Nm pdksh
can be obtained from ftp://ftp.cs.mun.ca/pub/pdksh.
.Pp
BTW, the most frequently reported bug is:
.Bd -literal -offset indent
$ echo hi | read a; echo $a   # Does not print hi
.Ed
.Pp
I'm aware of this and there is no need to report it.
@


1.90
log
@note that symlinks in test file are followed, except -h and -L
(just like test(1) does);

from paul de weerd;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.89 2005/02/02 07:53:01 otto Exp $
@


1.89
log
@Introduce POSIX hex and octal (0x... and 0...) constants in arithmetic
expressions.  Work by Matthias Kilian, based on an old diff by myself.
Note: MAKEDEV should be updated. Tested by many, thanks.

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.88 2005/01/19 19:32:02 jmc Exp $
d3736 7
@


1.88
log
@typo;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.87 2005/01/19 17:15:19 jmc Exp $
d2141 13
@


1.87
log
@although the description for the `comment' bind was in the page,
the bind itself (^[#) was missing;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.86 2005/01/17 09:59:02 jmc Exp $
d4771 1
a4771 1
.It Ic prev-hist-word Ar n Ic ^[\&. , ^{_
@


1.86
log
@typo;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.85 2005/01/10 11:06:50 jmc Exp $
d4632 1
a4632 1
.Pp
@


1.85
log
@typo;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.84 2004/12/22 18:58:44 millert Exp $
d3531 1
a3531 1
.It Fl n lc noexec
@


1.84
log
@These man pages are not derived from UCB and are actually public domain.
Verified with aaron@@ who did the conversion from man -> mdoc.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.83 2004/12/22 18:48:56 millert Exp $
d349 1
a349 1
parameter assignment or 0 is there were no command substitutions.
@


1.83
log
@Our times(3) just calls getrusage(2) and gettimeofday(2), converting seconds
to ticks.  Since ksh needs things in seconds it then converted them back.
Avoid the silliness and use the getrusage(2) and gettimeofday(2) directly.
With man page help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.82 2004/12/16 02:10:59 jaredy Exp $
d3 1
a3 28
.\" Copyright (c) 1980, 1990, 1993
.\"     The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)ksh.1tbl      8.2 (Berkeley) 8/19/96
@


1.82
log
@- document IFS behavior changes
- grammar, punctuation, xref, mdoc tweaks
- sort keywords
- indent example displays
- minimize against diffing between sh.1tbl
- document set -o sh
- tweak the displays of some editing and builtin commands
- rework some operator descriptions

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.81 2004/12/12 17:37:46 jmc Exp $
d3983 1
a3983 1
.Dl 0.00s real    0.00s user    0.00s system
d3985 10
a3994 1
unless the
d3996 1
a3996 1
option is given (only possible if
d3998 1
a3998 1
is a simple command), in which case the output is slightly longer:
d4000 1
a4000 7
.Dl real   0.00
.Dl user   0.00
.Dl sys    0.00
.Pp
(the number of digits after the decimal may vary from system to system).
Note
that simple redirections of standard error do not effect the output of the
d4011 7
a4017 2
Print the accumulated user and system times used by the shell and by processes
which have exited that the shell started.
@


1.81
log
@escape punctuation;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.80 2004/12/12 06:53:13 deraadt Exp $
d90 1
a90 1
.Va $0 )
d104 2
a105 1
to a tty.
d229 1
a229 1
The shells begins parsing its input by breaking it into
d304 1
a304 1
if used at the beginning of a word, introduces a comment -- everything after
d408 1
a408 1
is the opposite --
d473 6
a478 15
.Pp
.TS
center;
lfB lfB lfB lfB lfB .
case    else    function        then    !
do      esac    if      time    [[
done    fi      in      until   {
elif    for     select  while   }
.TE
.\"
.\".Ic case , do , done , elif ,
.\".Ic else , esac , fi , for ,
.\".Ic function , if , in , select ,
.\".Ic then , time , until , while ,
.\".Ic \&! , \&[\&[ , \&{ , \&}
d501 1
a501 1
.Bd -unfilled -offset -indent
d579 1
a579 1
.Va $1 , $2 ,
d670 1
a670 1
.Va $1 , $2 ,
d799 1
a799 1
.Ic \&[[ -r foo && $(< foo) = b*r ]]
d965 1
a965 1
it); leading or trailing
d1043 1
a1043 1
The later form can be treated as arrays by appending an array index of the
d1063 2
a1064 1
If substitution is performed on a parameter (or an array parameter element)
d1257 1
a1257 1
.Va $1 , $2 ,
d1301 1
a1301 1
.Va $1 , $2 , $3 ,
d1423 1
a1423 1
in future,
d1483 1
a1483 1
.Ev $_
d1649 1
a1649 1
$ PS1="\eu "
d1658 2
a1659 2
$ x=$(print \e\e001)
$ PS1="$x$(print \e\er)$x$(tput so)$x\e$PWD$x$(tput se)$x> "
d1783 1
a1783 1
.Pp
d1785 1
a1785 1
.D1 Xo Ar prefix Ic { Ar str No 1,...,
d1789 1
d1940 1
a1940 1
.Xr sh
d2093 1
a2093 1
.Ic cat /foo/bar 2\&>&1 \&> /dev/null \&| cat -n
d2255 1
a2255 2
If
.Ao Ar arg1 Ac
d2325 3
a2327 1
shell arguments (i.e., positional parameters $1, $2, etc.) are never visible
d2385 3
a2387 1
Note that special parameters (e.g., $$, $\&!) can't be scoped in this way.
d2403 6
a2408 2
The $0 parameter is set to the name of the function (Bourne-style functions
leave $0 untouched).
d2501 2
a2502 4
In future, a new option
.Po Fl v
\ perhaps
.Pc
d2657 3
a2659 1
mode, it tests if file descriptor 1 is a tty (i.e., the
d2665 39
d2742 3
a2744 1
Additional ksh special commands
d2761 3
a2763 1
Additional ksh regular commands
d2768 3
a2770 1
In the future, the additional ksh special and regular commands may be treated
d2801 1
a2801 2
.Ar ...
.Oc
d2860 17
a2876 5
.It Xo
.Ic bind Op Fl m
.Oo Ar key
.Op Ns = Ns Ar editing-command
.Ar ... Oc
d2878 38
a2915 3
Set or view the current emacs command editing key bindings/macros (see
.Sx Emacs editing mode
below for a complete description).
d2958 1
a2958 1
.Dq - ,
d3002 1
a3002 1
options are given,
d3018 1
a3018 2
systems,
it is the value returned by
d3097 1
a3097 1
.Ic ?\&
d3115 1
a3115 1
.Oo Fl e Ar editor No \&|
d3271 4
a3274 4
.Oo Fl s Ar signame No \&|
.Fl signum No \&| Fl signame Oc {
.Ar job No \&|
.Ar pid No \&|
d3306 1
a3306 1
.Oo Fl nprsu Ns Ar n No \&|
d3358 1
a3358 1
.Xr echo
d3411 3
a3413 1
any input is read) if the input is a tty (e.g.,
d3672 3
d3676 3
a3678 1
Enable vi-like command-line editing (interactive shells only).
d3683 3
a3685 1
was set, the vi command-line mode would let the tty driver do the work until
d3714 3
a3716 1
order, to the positional parameters (i.e., $1, $2, etc.).
d3723 1
a3723 1
option is treated specially -- it clears both the
a3751 14
.It Ar str
.Ar str
has non-zero length.
Note that there is the potential for problems if
.Ar str
turns out to be an operator (e.g.,
.Fl r ) .
It is generally better to use a test like
.Sm off
.Ic \&[\ X\&" Ar str Ic \&" Ic \ \&]
.Sm on
instead (double quotes are used in case
.Ar str
contains spaces or file globbing characters).
d3828 8
a3835 9
.It Ar file Fl nt Ar file
first
.Ar file
is newer than second
.Ar file
or first
.Ar file
exists and the second
.Ar file
d3837 8
a3844 9
.It Ar file Fl ot Ar file
first
.Ar file
is older than second
.Ar file
or second
.Ar file
exists and the first
.Ar file
d3846 4
a3849 5
.It Ar file Fl ef Ar file
first
.Ar file
is the same file as second
.Ar file .
d3853 3
a3855 1
is a tty device.
d3866 12
a3877 1
is not empty.
d3997 2
a3998 1
that simple redirections of standard error do not effect the output of the time
d4011 1
a4011 1
Sets trap handler that is to be executed when any of the specified signals are
d4059 1
a4059 1
can not be usefully piped to another process (an artifact of the fact that
d4184 1
a4184 1
Once this attribute is set, it can not be turned off.
d4236 1
a4236 1
dependent -- some systems have only the
d4447 3
a4449 1
(as stored in the $! parameter) or by prefixing the job number with a percent
d4479 1
a4479 1
.Pp
d4481 1
d4503 1
a4503 1
time -- the process could be blocked waiting for some
d4547 3
a4549 1
The shell supports three modes of reading command lines from a tty in an
d4557 3
a4559 1
normal tty driver.
d4592 4
a4595 49
control characters when the shell is invoked; these binding can be changed
using the following commands:
.Bl -tag -width Ds
.It Ic bind
The current bindings are listed.
.It Xo Ic bind
.Ar string Ns = Ns Op Ar editing-command
.Xc
The specified editing command is bound to the given
.Ar string ,
which should consist of a control character (which may be written using caret
notation, i.e., ^X), optionally preceded by one of the two prefix characters.
Future input of the
.Ar string
will cause the editing command to be immediately invoked.
Note that although only two prefix characters (usually
.Tn ESC
and ^X) are supported, some
multi-character sequences can be supported.
The following binds the arrow keys on an
.Tn ANSI
terminal, or xterm (these are in the default bindings).
Of course some escape sequences won't work out quite this nicely.
.Pp
.Bl -item -compact
.It
.Ic bind '^[['=prefix-2
.It
.Ic bind '^XA'=up-history
.It
.Ic bind '^XB'=down-history
.It
.Ic bind '^XC'=forward-char
.It
.Ic bind '^XD'=backward-char
.El
.It Ic bind Fl l
Lists the names of the functions to which keys may be bound.
.It Xo Ic bind Fl m
.Sm off
.Ar string No = Op Ar substitute
.Sm on
.Xc
The specified input
.Ar string
will afterwards be immediately replaced by the given
.Ar substitute
string, which may contain editing commands.
.El
d4618 3
a4620 1
The users' tty characters (e.g.,
d4652 1
a4652 1
If the current line does not being with a comment character, one is added at
d4846 2
a4847 1
Display the version of ksh.
d4858 3
a4860 1
The vi command-line editor in ksh has basically the same commands as the vi
d4878 3
a4880 1
command is different (in ksh it is the last argument command, in vi it goes to
d4969 3
a4971 1
Special ksh vi commands
d5007 1
a5007 1
if the word contains no file globbing characters) -- the big-word is replaced
d5029 7
a5035 1
.It n\e,\ n^F,\ n<tab>,\ and\ n<esc>
d5116 2
a5117 2
The editor looks forward for the nearest parenthesis, bracket or
brace and then moves the cursor to the matching parenthesis, bracket or brace.
d5140 1
a5140 1
.Ic f , F , t
d5146 1
a5146 1
.Ic f , F , t
d5154 6
a5159 1
.It nj,\ n+\ and\ n^N
d5163 6
a5168 1
.It nk,\ n-\ and\ n^P
d5351 1
@


1.80
log
@csh-style ! history completion, which can be activated by using
	set -o csh-history (off by default)
this is not feature complete, and likely never will be.  no ^
and ! has some oddities ... ksh's internal history stuff has got
some very odd behaviours that are rather nasty
ok various developers
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.79 2004/12/04 07:05:13 jaredy Exp $
d3422 1
a3422 1
.Ql !
@


1.79
log
@minor tweaks; ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.78 2004/11/08 23:42:02 jmc Exp $
d3418 6
@


1.78
log
@add a more complex PS1 example, which does not use the new backslash
sequences;

from naddy@@, via deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.77 2004/11/06 01:07:41 jmc Exp $
d1542 1
d1547 3
a1549 1
sequences (such as escape codes) by prefixing your prompt with a non-printing
a1551 1
If you don't have any non-printing characters, you're out of luck.
d1631 1
a1631 1
.Sq #
d1634 1
a1634 1
.Sq $ .
d1656 1
a1656 1
$ export PS1="\eu "
d1673 1
a1673 1
Prompt used by
d5257 1
@


1.77
log
@correct my description of \[ and \]
found by (and ok) deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.76 2004/11/05 23:40:51 jmc Exp $
d1655 10
@


1.76
log
@document PS1 expansions;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.75 2004/11/05 14:56:31 jmc Exp $
d1641 2
a1642 1
Begin a sequence of non-printing characters.
d1644 1
a1644 1
End a sequence of non-printing characters.
@


1.75
log
@incorrect markup was messing the description of IFS. i've rearranged it
slightly so that no one (me, most likely) falls for it again.

also, make sh(1)'s IFS description a little more consistent.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.74 2004/11/03 19:19:39 jaredy Exp $
d1529 3
a1531 1
substitutions are performed, and
d1553 1
a1553 1
Default is
d1558 97
@


1.74
log
@HISTSIZE cranked to 500
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.73 2004/10/28 04:55:51 jaredy Exp $
d986 2
a987 1
.Sq ,\&
@


1.73
log
@fix spacing after period at EOL.  from ray@@cyth.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.72 2004/08/07 16:46:58 millert Exp $
d1434 1
a1434 1
The default is 128.
@


1.72
log
@Document ulimit -v; mickey@@ OK
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.71 2004/08/04 20:01:44 jaredy Exp $
d5175 1
a5175 1
was created by Eric Gisin, and it was subsequently maintained by John R.
@


1.71
log
@- mdoc and macro fixes and simplification
- punctuation and grammar fixes
- show prompts for example shell commands

help and ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.70 2004/05/09 06:07:42 otto Exp $
d4003 1
a4003 1
.It Xo Ic ulimit Op Fl acdfHlmnpsSt
d4068 4
@


1.70
log
@Document new behavior of $RANDOM. ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.69 2004/04/30 06:57:17 jmc Exp $
d42 8
a49 3
.Oo [ Fl c Ar command-string [
.Xo Ar command-name ] No \&| Fl s No \&|
.Ar file No ]\ 
a50 1
.Op Ar argument ... Oc
d89 3
a91 1
the shell (i.e., the contents of $0) is determined as follows: if the
d95 3
a97 1
otherwise, the name the shell was called with (i.e., argv[0]) is used.
d117 1
a117 1
option is on by default (see
d188 2
a189 1
If the basename of the name the shell is called with (i.e., argv[0])
d573 1
a573 1
.Ic in Ar word Ar ... term Ns ]
d585 5
a589 1
is not used to specify a word list, the positional parameters ($1, $2, etc.\&)
d638 1
a638 1
.Ic in Ar word Ar ... term Ns ]
d676 4
a679 2
.Ic in Ar word Ar ...
is omitted, the positional parameters are used (i.e., $1, $2, etc.).
d1262 3
a1264 1
The number of positional parameters (i.e., $1, $2, etc.).
d1275 1
a1275 1
The concatenation of the current single letter options (see
d1277 1
a1277 1
command below for list of options).
d1285 1
a1285 1
.Ic argv[0] ) ,
d1306 3
a1308 1
All positional parameters (except parameter 0), i.e., $1, $2, $3...
d1370 1
a1370 1
This parameter is used by the interactive line editing modes, and by
d1374 1
a1374 1
.Ic kill -l
d1530 1
a1530 1
is replaced with the current command number (see
d1566 1
a1566 1
Used to prefix commands that are printed during execution tracing (see
d2376 1
a2376 1
.Ic $(...)
d2478 1
a2478 1
Argument expansion of
d2565 1
a2565 1
option is turned off (see
d2702 2
a2703 1
.It Xo Ic bind Op Fl m
d2706 1
a2706 2
.Ar ...
.Oc
d2761 1
a2761 1
option (see
d3169 1
a3169 1
option (see
d3267 3
a3269 1
The set command can be used to set
d3477 1
a3477 1
If this option is not set, characters in the range 128-160 are printed as is,
d3608 1
a3608 1
is set (see
d3812 2
a3813 2
or the number of the signal (see
.Ic kill -l
d3824 1
a3824 1
option were see -- see
d4217 1
a4217 1
A job may be referred to in
d4701 4
a4704 2
(e.g., screen movement command, ex-style
.Ic \&:
d4711 1
a4711 1
Like vi, there are two modes --
d5206 1
a5206 1
echo hi | read a; echo $a\ \ \ # Does not print hi
@


1.69
log
@typo;
from ray at cyth dot net (PR 3762);
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.68 2004/03/15 08:56:56 jmc Exp $
d1560 1
a1560 1
A simple random number generator.
d1563 6
a1568 2
is referenced, it is assigned the next number in a random number series.
The point in the series can be set by assigning a number to
d1570 7
a1576 2
(see
.Xr rand 3 ) .
@


1.68
log
@missing commas;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.67 2004/03/15 08:52:12 jmc Exp $
d3230 1
a3230 1
cripts, while the original Korn shell only treats profiles as
@


1.67
log
@reversed word -> reserved word;
from Karl O. Pinc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.66 2004/02/19 22:20:05 jmc Exp $
d377 2
a378 2
reserved word which causes the exit status of the pipeline to be logically
complemented: if the original status was 0 the complemented status will be 1;
@


1.66
log
@escape full stops where necessary to kill erroneous double spaces;
softly, softly, catchy monkey...
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.65 2004/01/23 23:08:45 jmc Exp $
d377 1
a377 1
reversed word which causes the exit status of the pipeline to be logically
@


1.65
log
@`Ns' implies `No', so `Ns No' -> `Ns'; (even simpler in adduser(8))
discussed with todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.64 2004/01/15 22:08:45 jmc Exp $
d576 1
a576 1
is not used to specify a word list, the positional parameters ($1, $2, etc.)
@


1.64
log
@escape full stops properly to avoid double spaces;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.63 2003/12/27 20:35:12 jmc Exp $
d564 1
a564 1
.Ic in Ar word Ar ... term Ns No ]
d625 1
a625 1
.Ic in Ar word Ar ... term Ns No ]
d1106 1
a1106 1
.Xo Ic ${ Ns Ar name Ns No =
d1119 1
a1119 1
.Ar name Ns No = Ns Ar value
d1172 1
a1172 1
.Ar name Ns No \&: )
d1697 1
a1697 1
.It Ic \&[ Ns No .. Ns Ic \&]
d1718 1
a1718 1
.It Ic \&[\&! Ns No .. Ns Ic \&]
d1720 1
a1720 1
.Ic \&[ Ns No .. Ns Ic \&] ,
d1815 1
a1815 1
.Ic \&[ Ns No .. Ns Ic \&]
d1834 1
a1834 1
.Ic \&[ Ns No .. Ns Ic \&]
d1965 1
a1965 1
.Ic $(( Ns No .. Ns Ic ))
d2627 1
a2627 1
.Ar name Ns No = Ns Ar value ,
d2916 1
a2916 1
.Op Ar old Ns No = Ns Ar new
d4605 1
a4605 1
.It Ic set-mark-command ^[ Ns No <space>
@


1.63
log
@- revert a typo introduced when this page was mdoc'ed
- use .Sq rather than .Dq for single letters
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.62 2003/12/22 11:54:02 jmc Exp $
d3214 1
a3214 1
.Ic \&.
d3221 1
a3221 1
.Ic \&.
d3229 3
a3231 3
.Ic \&.
scripts, while the original Korn shell only treats profiles as
.Ic \&.
@


1.62
log
@note that `&&' and `||' are left-associative;
from vax at carolina dot rr com (NetBSD PR 23814);

agreed (in principal) millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.61 2003/12/12 22:35:07 naddy Exp $
d951 1
a951 1
whitespace characters, in combination with zero or no
d969 3
a971 3
.Dq A ,
.Dq B ,
.Dq ,
d973 1
a973 1
.Dq D .
@


1.61
log
@typo; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.60 2003/10/28 15:20:32 jmc Exp $
d412 13
@


1.60
log
@standard section order;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.59 2003/10/22 19:57:32 jmc Exp $
d2555 1
a2555 1
.Ic alias , readonly , set , typset
@


1.59
log
@macros with too many args;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.58 2003/09/04 14:21:43 jmc Exp $
d5117 16
a5164 16
.Sh VERSION
This page documents version @@(#)PD KSH v5.2.14 99/07/13.2 of the public
domain Korn shell.
.Sh AUTHORS
This shell is based on the public domain 7th edition Bourne shell clone by
Charles Forsyth and parts of the BRL shell by Doug A. Gwyn, Doug Kingston,
Ron Natalie, Arnold Robbins, Lou Salkind, and others.
The first release of
.Nm pdksh
was created by Eric Gisin, and it was subsequently maintained by John R.
MacMillan (change!john@@sq.sq.com) and Simon J. Gerraty (sjg@@zen.void.oz.au).
The current maintainer is Michael Rendell (michael@@cs.mun.ca).
The
.Pa CONTRIBUTORS
file in the source distribution contains a more complete list of people and
their part in the shell's development.
@


1.58
log
@escapes in the wrong place;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.57 2003/09/02 18:09:43 jmc Exp $
d1034 4
a1037 1
.Ic ${ Ar name Oo Ar expr Oc Ic \&} ,
d2479 4
a2482 1
.Ic a i in 1 2; do echo i=$i j=$j; done
@


1.57
log
@escape punctuation;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.56 2003/09/01 15:47:40 naddy Exp $
d1248 1
a1248 1
.Ic \&$\&?
d2424 1
a2424 1
.Ic set \&-\&- `false`; echo $?
d2846 1
a2846 1
.Ic \&?
@


1.56
log
@In emacs editing mode, ksh by default interprets a set 8th bit as
meta prefix, i.e. all characters with the top bit set (>= 0x80) are
taken as commands and cannot be entered literally.

Introduce a new shell option, emacs-usemeta, that allows to toggle
this behavior.  The default is the traditional behavior; to enter
8-bit characters use "set +o emacs-usemeta".

ok fgsch@@, henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.55 2003/07/19 08:07:35 jmc Exp $
d287 1
a287 1
.Ql ? ,
d320 1
a320 1
.Ql ? ,
d376 1
a376 1
.Ql !
d1449 1
a1449 1
.Ql ?
d1494 1
a1494 1
.Ql !
d1499 1
a1499 1
.Ql !
d1666 1
a1666 1
.Ql ?
d1699 1
a1699 1
.Ql !
d3563 1
a3563 1
.Ql ! ,
d3677 1
a3677 1
.Ql !
d3681 1
a3681 1
.Ql !
d3685 1
a3685 1
.Ql ! ) .
@


1.55
log
@redrew -> redraw;
from Andrey Matveev.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.54 2003/07/07 14:11:58 jmc Exp $
d3351 3
d4309 1
a4309 2
slightly different from the emacs mode in the original Korn shell and the 8th
bit is stripped in emacs mode.
@


1.54
log
@- convert some lists to displays
- .Ql -> .Sq where necessary
- remove some .Pp's before lists
- add missing .El
- remove some wrong macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.53 2003/06/06 10:05:52 jmc Exp $
d4559 1
a4559 1
.It Ic redrew ^L
@


1.53
log
@liternal -> literal;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.52 2003/06/02 23:32:08 millert Exp $
d480 5
a484 6
.Pp
.Bl -inset -indent -compact
.It Ic { echo foo; echo bar; }
.It Ic { echo foo; echo bar<newline> }
.It Ic { { echo foo; echo bar; } }
.El
d487 3
a489 4
.Pp
.Bl -inset -indent -compact
.It Ic { echo foo; echo bar }
.El
a725 1
.Pp
d743 3
a745 3
.Ql Fl f ,
.Ql = ,
.Ql ! ,
d749 1
a749 1
.Ql !=
d751 1
a751 1
.Ql =
a2018 1
.Pp
d2493 1
a2493 1
.Ql Fl t
d2495 1
a2495 1
.Ql Ic \&!
d3056 1
a3056 1
.Fl R No Op Fl en Oc
d3694 1
a3694 1
.Ql Ic \&!
d3696 1
a3696 1
.Ql Fl n .
d4749 1
a4749 1
.It Ic Ar n Ns Ic v
a5043 1
.Pp
d5060 1
@


1.52
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.51 2003/04/28 06:27:36 jmc Exp $
d4681 1
a4681 1
Liternal next.
@


1.51
log
@typos;

suggestions, corrections and ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.50 2003/03/20 07:30:37 jmc Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"     This product includes software developed by the University of
.\"     California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.50
log
@typos;

from NetBSD (Soren Jacobsen)
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.49 2003/03/14 11:05:55 jmc Exp $
d1369 1
a1369 1
.Fn execve 2
d1680 1
a1680 1
name patterns with the sorted named of all the files that match the pattern
d1868 1
a1868 1
.Fn open 2 ) .
d2616 1
a2616 1
.Ar name Ns No = Ar value ,
d2831 1
a2831 1
which suppresses backslash interpretation.
d3358 1
a3358 1
.Sx Emacs editing mode.
d3478 1
a3478 1
and returns zero status if true, 1 status if false, or greater than 1 if there
d3916 1
a3916 1
commands that can be used to re-create the attributes (but not the values) or
d4284 1
a4284 1
options (at most one of these can be set an once).
d4539 1
a4539 1
Prints a sorted, comunated list of file names (if any) that can complete the
d4789 1
a4789 1
After expansion, the cursor is places just past the last
@


1.49
log
@better document how getopts handles options;
plus typos;
from J.A. Neitzel;

Fixes PR 3141;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.48 2002/09/18 07:33:47 deraadt Exp $
d1035 1
a1035 1
Array indicies are currently limited to the range 0 through 1023, inclusive.
d2153 1
a2153 1
detected until all co-processes sharing the co-process output have exited
@


1.48
log
@fix Xr refs; frisco@@blackant.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.47 2001/09/24 19:15:11 camield Exp $
d539 1
a539 1
stripped; any space with a pattern must be quoted.
d2954 1
a2954 1
the option places in
d2966 1
a2966 1
.Ev OPTAG
d2968 1
a2968 1
An error message is also printed to standard error if
d2970 4
a2973 1
does not being with a colon.
@


1.47
log
@The 'newgrp' alias is explicitly disabled in our ksh, so do not mention
it in the manpage.

ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.46 2001/09/02 14:05:58 aaron Exp $
d1108 1
a1108 1
.Xr environ 5 )
d5093 1
a5093 1
.Xr environ 5
@


1.46
log
@Typo; addresses pr/2038 from tim@@robbins.dropbear.id.au
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.45 2001/08/25 21:26:29 heko Exp $
a871 2
.It
.Ic newgrp='exec newgrp'
@


1.45
log
@OpenBSD doesn't have RLIMIT_VMEM or RLIMIT_SWAP, so we don't
have ulimit -v or -w either.
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.43 2001/08/03 19:19:01 aaron Exp $
d2922 1
a2922 1
.Ic alias r='fx -e -' .
@


1.44
log
@fix a typo; tim@@robbins.dropbear.id.au
@
text
@d3958 1
a3958 1
.It Xo Ic ulimit Op Fl acdfHlmnpsStvw
a4022 9
.It Fl v Ar n
Impose a limit of
.Ar n
kbytes on the amount of virtual memory used; on some systems this is the
maximum allowable virtual address (in bytes, not kbytes).
.It Fl w Ar n
Impose a limit of
.Ar n
kbytes on the amount of swap space used.
@


1.43
log
@Typo; heko@@iki.fi
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.42 2001/07/31 10:35:09 hugh Exp $
d4053 1
a4053 1
sets the mask so files with not be readable, writable or executable by
@


1.42
log
@Documentation fixes per PR 1979 by Kaspar Toomik.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.41 2001/06/23 14:42:13 deraadt Exp $
d2582 1
a2582 1
The following described the special and regular built-in commands:
@


1.41
log
@more .%A handling; bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.40 2001/05/28 15:36:08 aaron Exp $
d1059 1
a1059 1
Parameters can be assigned valued in a number of ways.
@


1.40
log
@Various fixes; mpech@@prosoft.org.lv
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.39 2001/04/12 02:51:09 aaron Exp $
d5107 2
a5108 1
.%A Morris Bolsky and David Korn
d5114 2
a5115 1
.%A Stephen G. Kochan and Patrick H. Wood
@


1.39
log
@Insert some missing commas.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.38 2001/02/20 05:47:14 aaron Exp $
d52 1
a52 1
.Nm ksh
d62 1
a62 1
.Nm ksh
d1574 1
a1574 1
number of seconds the shell will wait for input after priting the primary
d4444 1
a4444 1
If there is no command or file name with the current partialword
d4540 1
a4540 1
Directoary names have
d4545 1
a4545 1
the partial word containg the cursor.
d4603 1
a4603 1
On systems supporting it, puhses the bound character back onto the terminal
@


1.38
log
@Typo (introduced by me in mdoc conversion of Rev 1.15); d@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.37 2001/01/16 14:18:39 aaron Exp $
d340 1
a340 1
statements, grouping constructs and function definitions.
d412 1
a412 1
.Ql |&
d443 1
a443 1
.Ql |&
d1638 1
a1638 1
command may be used to list, change and add to this cache (e.g.,
d1931 1
a1931 1
.Ar marker
d2352 1
a2352 1
signal numbers, names and descriptions are printed in columns.
d2515 1
a2515 1
After evaluation of command-line arguments, redirections and parameter
d4698 1
a4698 1
The current line is read, parsed and executed by the shell.
d4734 1
a4734 1
is a sequence of letters, digits and underscore characters or a sequence of
d5063 1
a5063 1
The current line is read, parsed and executed by the shell.
d5133 1
a5133 1
the machine, operating system and compiler you are using and a description of
@


1.37
log
@typo; bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.36 2000/10/19 18:29:27 aaron Exp $
d2150 1
a2150 1
.Ic exec 3\&>\&&p\&; exec 3>\&>\&&\&- ) .
@


1.36
log
@Where we talk about $$, also say mention that PIDs are not safe to use for
generating temporary file names, and point people to mktemp(1) instead.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.35 2000/07/06 05:42:41 aaron Exp $
d4407 1
a4407 1
pattern in order to about the search.
@


1.35
log
@fix another, similar typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.34 2000/07/06 05:36:51 aaron Exp $
d1244 6
a1249 2
of the original shell if it is a
subshell.
@


1.34
log
@typo
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.33 2000/03/21 14:06:54 aaron Exp $
d4660 1
a4660 1
.it
@


1.33
log
@Sometimes it is confusing when a sentence begins with lowercase; d@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.32 2000/03/17 18:48:43 aaron Exp $
d4557 1
a4557 1
.ic search-history .
@


1.32
log
@Try to synchronize the ksh(1) and sh(1) man pages somewhat.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.31 2000/03/17 18:15:16 aaron Exp $
d2195 1
d2197 1
a2197 1
(which is an alias for
@


1.31
log
@Remove hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.30 2000/03/14 20:25:46 aaron Exp $
d241 1
d905 1
a905 2
This option is set automatically for
non-interactive shells.
d957 1
d1630 1
d2498 1
a2498 1
.Dq Fl t
d2500 1
a2500 1
.Dq Ic \&!
d2757 1
a2757 1
is executed exactly as if the
d3294 1
a3294 2
This can only be set/unset when the shell is
invoked (see
d3366 1
a3366 1
.Dv HUP
d3371 1
a3371 1
.Dv HUP
d3789 1
a3789 1
Note that the ouput of
d3873 2
a3874 3
If necessary, values
are either stripped of leading characters or space padded to make them fit the
field width.
d4095 1
a4095 1
.Dv SIGINT
@


1.30
log
@Better mdoc formatting.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.29 1999/11/20 07:58:02 dugsong Exp $
d54 2
a55 1
script use. Its command language is a superset of the
d85 4
a88 2
of a file the shell reads commands from. If there are no non-option
arguments, the shell reads commands from the standard input. The name of
d100 2
a101 2
to a tty. An interactive shell has job control enabled (if available),
ignores the
d177 2
a178 1
parameter (see below). Instead, the file
d180 2
a181 1
is processed. Clearing the privileged option causes the shell to set
d204 2
a205 1
(if any) is read and executed. If the
d218 2
a219 1
occurred during the execution of a script. In the absence of fatal errors,
d237 2
a238 2
usually delimit commands. The meta-characters are used in building the
following tokens:
d277 2
a278 1
quotes. Note that the following characters are also treated specially by the
d349 4
a352 2
before any command words. The command words, if any, define the command
that is to be executed and its arguments. The command may be a shell built-in
d366 2
a367 1
described. The exit status of a command consisting only of parameter
d376 3
a378 2
to the standard input of the following command. The exit status of a pipeline
is that of its last command. A pipeline may be prefixed by the
d414 2
a415 1
which also have equal precedence. The
d421 2
a422 1
below). When an asynchronous command is started when job control is disabled
d435 2
a436 1
below). Note that a command must follow the
d448 2
a449 1
Compound commands are created using the following reserved words. These words
d472 2
a473 1
environment changes inside them may fail. To be portable, the
d481 2
a482 1
a (syntactically correct) reserved word. For example,
d501 2
a502 1
in a subshell. There is no implicit way to pass environment changes from a
d507 2
a508 1
is executed, but not in a subshell. Note that
d528 2
a529 2
associated with the first successfully matched pattern is executed. Patterns
used in
d536 7
a542 5
are dropped. Note that any unquoted space before and after a pattern is
stripped; any space with a pattern must be quoted. Both the word and the
patterns are subject to parameter, command, and arithmetic substitution as
well as tilde substitution. For historical reasons, open and close braces
may be used instead of
d565 2
a566 1
is executed. If
d569 2
a570 2
are used instead. For historical reasons, open and close braces may be used
instead of
d599 2
a600 2
if any, is executed with similar consequences. If all the lists following
the
d608 2
a609 1
is executed. The exit status of an
d623 2
a624 1
selecting from it. An enumerated list of the specified
d649 2
a650 1
the prompt is printed and so on. This process continues until an end-of-file
d653 2
a654 1
statement is executed inside the loop. If
d656 2
a657 2
is omitted, the positional parameters are used (i.e., $1, $2, etc.). For
historical reasons, open and close braces may be used instead of
d681 2
a682 2
is a pre-checked loop. Its body is executed as often as the exit status of
the first
d684 2
a685 1
is zero. The exit status of a
d697 2
a698 1
below). Note that redirections specified after a function definition are
d782 2
a783 1
operators. This means that in the statement
d796 3
a798 1
specially. There are three methods of quoting. First,
d803 2
a804 1
and the newline are stripped. Second, a single quote
d806 2
a807 2
quotes everything up to the next single quote (this may span lines). Third,
a double quote
d820 2
a821 1
results of double-quoted substitutions. If a
d844 9
a852 7
command. The shell expands command aliases (i.e., substitutes the alias name
for its value) when it reads the first word of a command. An expanded alias
is re-processed to check for more aliases. If a command alias ends in a
space or tab, the following word is also checked for alias expansion. The
alias expansion process stops when a word that is not an alias is found, when
a quoted word is found or when an alias word that is currently being expanded
is found.
d886 4
a889 2
command. The first time the shell does a path search for a command that is
marked as a tracked alias, it saves the full path of the command. The next
d891 2
a892 2
is still valid, and if so, avoids repeating the path search. Tracked aliases
can be listed and created using
d896 2
a897 1
parameter clears the saved paths for all tracked aliases. If the
d903 4
a906 2
the shell tracks all commands. This option is set automatically for
non-interactive shells. For interactive shells, only the following commands are
d917 4
a920 2
substitutions on the words of the command. There are three kinds of
substitution: parameter, command, and arithmetic. Parameter substitutions,
d936 2
a937 1
parameter. The
d950 2
a951 1
characters, delimit a field. As a special case, leading and trailing
d980 2
a981 1
command, which is run in a subshell. For
d996 2
a997 2
followed by any other character is unchanged). As a special case in command
substitutions, a command of the form
d1010 2
a1011 1
regardless of quoting. This should be fixed soon.
d1016 2
a1017 1
prints 14. See
d1022 2
a1023 1
can be accessed using a parameter substitution. A parameter name is either one
d1058 2
a1059 2
Parameters can be assigned valued in a number of ways. First, the shell
implicitly sets some parameters like
d1062 2
a1063 2
Second, parameters are imported from the shell's environment at startup. Third,
parameters can be assigned values on the command line, for example,
d1072 2
a1073 2
exported, see below for implications of this). Note that both the parameter
name and the
d1075 2
a1076 2
must be unquoted for the shell to recognize a parameter assignment. The fourth
way of setting a parameter is with the
d1083 2
a1084 1
section. Fifth,
d1093 2
a1094 1
commands. Lastly, parameters can be assigned values using assignment operators
d1112 4
a1115 2
pairs. The order in which parameters appear in the environment of a command is
unspecified. When the shell starts up, it extracts parameters and their values
d1166 2
a1167 1
or .-script). If word is omitted the string
d1213 2
a1214 1
the matched text is deleted from the result of substitution. A single
d1236 2
a1237 2
Process ID of the last background process started. If no background processes
have been started, the parameter is not set.
d1250 2
a1251 2
The exit status of the last non-asynchronous command executed. If the last
command was killed by a signal,
d1265 2
a1266 1
argument, if it was supplied. If the
d1273 2
a1274 1
or .-script. Further positional parameters may be accessed using
d1277 2
a1278 1
All positional parameters (except parameter 0), i.e., $1, $2, $3... If used
d1291 2
a1292 2
generated for each positional parameter. If there are no positional parameters,
no word is generated.
d1303 4
a1306 3
environment of the new process to the path of the executed command. In
interactive use, this parameter is also set in the parent shell to the last
word of the previous command. When
d1315 2
a1316 1
built-in command. Works the same way as
d1322 2
a1323 1
commands. Note that if
d1327 2
a1328 1
or contains an empty path, the current directory is not searched. Also, the
d1333 2
a1334 1
Set to the number of columns on the terminal or window. Currently set to the
d1338 2
a1339 2
if that value is non-zero. This parameter is used by the interactive line
editing modes, and by
d1349 2
a1350 1
interactive shells. See
d1355 2
a1356 2
expanded value is used as a shell startup file. It typically contains function
and alias definitions.
d1360 3
a1362 2
variable. It indicates the reason the last system call failed. Not yet
implemented.
d1378 2
a1379 1
function. It is also searched when a command can't be found using
d1385 3
a1387 2
The name of the file used to store command history. When assigned to, history
is loaded from the specified file. Also, several invocations of the shell
d1395 2
a1396 2
isn't set, no history file is used. This is different from the original Korn
shell, which uses
d1402 2
a1403 1
The number of commands normally stored for history. The default is 128.
d1416 2
a1417 1
and newline. See
d1435 2
a1436 1
Set to the number of lines on the terminal or window. Not yet implemented.
d1448 2
a1449 2
If set to 0, the shell checks before each prompt. The default is 600 (10
minutes).
d1451 2
a1452 2
A list of files to be checked for mail. The list is colon separated, and each
file may be followed by a
d1454 2
a1455 1
and a message to be printed if new mail has arrived. Command, parameter and
d1459 2
a1460 1
contains the name of the file. The default message is
d1463 2
a1464 1
The previous working directory. Unset if
d1480 2
a1481 1
commands and .'d files. An empty string resulting from a leading or trailing
d1488 2
a1489 1
option to be enabled. See
d1495 2
a1496 1
The primary prompt for interactive shells. Parameter, command, and arithmetic
d1501 2
a1502 1
command below). A literal
d1510 2
a1511 1
the prompt tend to mess things up. You can tell the shell not to count certain
d1514 3
a1516 2
the escape codes with this non-printing character. If you don't have any
non-printing characters, you're out of luck. By the way, don't blame me for
d1531 2
a1532 1
statement when reading a menu selection. Default is
d1537 4
a1540 2
command below). Parameter, command, and arithmetic substitutions are performed
before it is printed. Default is
d1543 2
a1544 1
The current working directory. May be unset or
d1548 2
a1549 1
A simple random number generator. Every time
d1551 2
a1552 2
is referenced, it is assigned the next number in a random number series. The
point in the series can be set by assigning a number to
d1559 2
a1560 1
command if no names are given. Also used in
d1574 2
a1575 1
The directory shell temporary files are created in. If this parameter is not
d1581 2
a1582 1
shells. If the last component of the path specified in this parameter contains
d1601 2
a1602 1
if any, are assumed to be a login name. If the login name is empty,
d1611 2
a1612 1
parameter is substituted, respectively. Otherwise, the password file is
d1614 2
a1615 1
user's home directory. If the login name is not found in the password file or
d1657 2
a1658 1
words are not sorted. Brace expressions must contain an unquoted comma
d1664 2
a1665 1
are not expanded). Brace expansion is carried out after parameter substitution
d1674 2
a1675 1
sequences. Once brace expansion has been performed, the shell replaces file
d1677 2
a1678 2
(if no files match, the word is left unchanged). The pattern elements have the
following meaning:
d1685 2
a1686 1
Matches any of the characters inside the brackets. Ranges of characters can be
d1693 2
a1694 1
or any digit). In order to represent itself, a
d1700 2
a1701 1
instead of the end of the list. Also, a
d1715 2
a1716 1
specified patterns. Example: The pattern
d1730 2
a1731 1
specified patterns. Example: The pattern
d1744 2
a1745 1
patterns. Example: The pattern
d1757 2
a1758 2
Matches a string that matches one of the specified patterns. Example: The
pattern
d1769 2
a1770 2
Matches any string that does not match one of the specified patterns. Examples:
The pattern
d1826 2
a1827 1
the shell. Three exceptions to this are commands in pipelines, for which
d1841 2
a1842 2
option is set, an error occurs; otherwise, the file is truncated. Note that
this means the command
d1861 2
a1862 1
exists it is appended to instead of being truncated. Also, the file is opened
d1879 4
a1882 2
is read. When the command is executed, standard input is redirected from the
temporary file. If
d1920 2
a1921 1
redirection with a single digit. Parameter, command, and arithmetic
d1928 2
a1929 1
arguments of redirections. Note, however, that the results of any file name
d1931 2
a1932 1
the word with the expanded file name generation characters is used. Note
d1941 2
a1942 1
any redirections must appear at the end. Redirections are processed after
d2037 2
a2038 1
The parameter is incremented by 1. When used as a prefix operator, the result
d2047 2
a2048 2
then the right. The result is the value of the expression on the right-hand
side.
d2068 2
a2069 2
the result is 1 if either argument is non-zero, 0 if not. The right
argument is evaluated only if the left argument is zero.
d2073 2
a2074 2
the result is 1 if both arguments are non-zero, 0 if not. The
right argument is evaluated only if the left argument is non-zero.
d2093 2
a2094 1
Less than or equal, greater than or equal, greater than. See
d2103 2
a2104 2
the right. The sign of the result is unspecified if either argument is
negative.
d2126 2
a2127 1
redirections, respectively. Once a co-process has been started, another can't
d2131 2
a2132 1
redirection. If a co-process's input is redirected in this way, the next
d2147 2
a2148 1
write portion of the output pipe open. This means that end-of-file will not be
d2150 2
a2151 1
(when they all exit, the shell closes its copy of the pipe). This can be
d2153 2
a2154 1
causes the shell to close its copy). Note that this behaviour is slightly
d2173 2
a2174 1
syntax (see below for the difference between the two forms). Functions are like
d2176 2
a2177 1
in that they are executed in the current environment. However, unlike
d2180 2
a2181 1
inside them. When the shell is determining the location of a command, functions
d2200 2
a2201 1
read and executed. If after executing the file the named function is found to
d2219 2
a2220 1
respectively. When a traced function is executed, the shell's
d2224 2
a2225 1
option is turned off. The
d2227 2
a2228 1
attribute of functions is currently not used. In the original Korn shell,
d2235 2
a2236 2
command can be used inside a function to create a local parameter. Note that
special parameters (e.g., $$, $\&!) can't be scoped in this way.
d2239 2
a2240 1
function. A function can be made to finish immediately using the
d2268 2
a2269 2
outside the function). In the future, the following differences will also be
added:
d2273 2
a2274 1
functions. This will mean that traps set inside a function will not affect the
d2288 2
a2289 2
convenience. How the shell behaves in these cases is determined by the state
of the
d2295 2
a2296 1
behaviour is followed; otherwise, it is not. The
d2303 1
a2303 2
mode by
default; however, this is usually not desirable).
d2314 2
a2315 1
command substitutions. In
d2322 2
a2323 2
backslash is stripped before the command substitution is interpreted. For
example,
d2333 2
a2334 1
mode. To avoid problems, use the
d2339 2
a2340 1
output. In
d2345 2
a2346 2
signal numbers, names and descriptions are printed in columns. In future, a new
option
d2353 2
a2354 1
exit status. In
d2361 2
a2362 1
exit status. If
d2368 2
a2369 1
mode will be 0. In
d2388 2
a2389 1
Brace expansion (also known as alternation). In
d2394 2
a2395 1
mode, brace expansion is enabled. Note that
d2415 2
a2416 1
exit status. In
d2425 2
a2426 1
command. For example,
d2432 2
a2433 2
mode. This construct is used in most
shell scripts that use the old
d2443 2
a2444 1
commands. In
d2452 2
a2453 1
Signal specification. In
d2463 2
a2464 1
Alias expansion. In
d2470 2
a2471 1
word following an alias that ended in a space. For example, the following
d2492 2
a2493 1
Test. In
d2501 1
a2501 2
mode,
it tests if file descriptor 1 is a tty (i.e., the
d2509 1
a2509 1
assignments, the type of command is determined:  a special built-in, a
d2512 3
a2514 2
parameter. The checks are made in the above order. Special built-in commands
differ from other commands in that the
d2518 2
a2519 2
specified before the command are kept after the command completes. Just to
confuse things, if the
d2525 2
a2526 2
on arguments that look like assignments. Regular built-in commands are
different only in that the
d2531 1
a2531 1
.Nm
d2580 2
a2581 1
in the current environment. The file is searched for in the directories of
d2586 2
a2587 1
is being executed. If no arguments are given, the positional parameters are
d2590 2
a2591 1
The null command. Exit status is set to zero.
d2603 2
a2604 1
lists all aliases. For any name without a value, the existing alias is listed.
d2609 2
a2610 2
When listing aliases, one of two formats is used. Normally, aliases are listed
as
d2614 2
a2615 1
is quoted. If options were preceded with
d2621 2
a2622 1
is printed. In addition, if the
d2639 2
a2640 1
the command line are ignored for tracked aliases). The
d2651 2
a2652 2
Resume the specified stopped job(s) in the background. If no jobs are
specified,
d2654 2
a2655 2
is assumed. This command is only available on systems which support job
control (see
d2693 2
a2694 1
path means the current directory. If
d2705 2
a2706 1
is used. If
d2712 2
a2713 1
parameter). If the
d2723 2
a2724 1
are relative to the path used to get to the directory. If the
d2730 2
a2731 1
is relative to the filesystem directory tree. The
d2757 2
a2758 1
had not been specified, with two exceptions. First,
d2762 2
a2763 1
exit, and command assignments are not permanent). If the
d2783 2
a2784 1
parameter, the full path of the command is printed. If no command is found
d2787 2
a2788 1
exits with a non-zero status. The
d2809 2
a2810 1
standard output. The newline is suppressed if any of the arguments contain the
d2819 2
a2820 1
shell scripts. The
d2837 2
a2838 1
not replaced. Any file descriptors greater than 2 which are opened or
d2841 2
a2842 1
that are not built-in to the shell). Note that the Bourne shell differs here;
d2845 2
a2846 1
The shell exits with the specified exit status. If
d2854 3
a2856 3
Sets the export attribute of the named parameters. Exported parameters are
passed in the environment to executed commands. If values are specified, the
named parameters are also assigned.
d2875 4
a2878 2
select commands from the history. Commands can be selected by history number
or a string specifying the most recent command starting with that string. The
d2882 2
a2883 1
inhibits the default command numbers. The
d2885 2
a2886 1
option reverses the order of the list. Without
d2917 2
a2918 1
Resume the specified job(s) in the foreground. If no jobs are specified,
d2920 2
a2921 2
is assumed. This command is only available on systems which support job
control (see
d2932 5
a2936 3
is to recognize. If a letter is followed by a colon, the option is expected to
have an argument. Options that do not take arguments may be grouped in a single
argument. If an option takes an argument and the option character is not the
d2962 2
a2963 2
is set to the option character that caused the problem. An error message is
also printed to standard error if
d2969 2
a2970 1
exits with a non-zero exit status. Options end at the first (non-option
d2991 2
a2992 1
Without arguments, any hashed executable command pathnames are listed. The
d2994 2
a2995 1
option causes all hashed commands to be removed from the hash table. Each
d3003 2
a3004 1
jobs are displayed. The
d3007 2
a3008 1
state since the last notification. If the
d3010 2
a3011 1
option is used, the process ID of each process in a job is also listed. The
d3013 2
a3014 1
option causes only the process group of each job to be printed. See
d3027 2
a3028 1
groups. If no signal is specified, the
d3030 3
a3032 2
signal is sent. If a job is specified, the signal is sent to the job's
process group. See
d3045 4
a3048 2
above). If all expressions are successfully evaluated, the exit status is 0 (1)
if the last expression evaluated to non-zero (zero). If an error occurs during
d3061 2
a3062 1
terminated with a newline. The
d3064 2
a3065 1
option suppresses the newline. By default, certain C escapes are translated.
d3086 2
a3087 1
option. The
d3112 2
a3113 1
option is given. As above, the
d3117 2
a3118 1
Print the present working directory. If the
d3126 2
a3127 1
to the current directory). If the
d3142 2
a3143 2
above), and assigns each field to the specified parameters. If there are more
parameters than fields, the extra parameters are set to
d3146 2
a3147 2
is assigned the remaining fields (inclusive of any separating spaces). If no
parameters are specified, the
d3149 2
a3150 1
parameter is used. If the input line ends in a backslash and the
d3153 2
a3154 1
is read. If no input is read,
d3171 2
a3172 1
above for comments on this), respectively. If the
d3180 4
a3183 2
Sets the read-only attribute of the named parameters. If values are given,
parameters are set to them before setting the attribute. Once a parameter is
d3200 2
a3201 2
is given, the exit status of the last executed command is used. If used
outside of a function or
d3253 2
a3254 1
prompt. Only used if job control is enabled
d3268 2
a3269 1
non-zero status). This does not apply to commands whose exit status is
d3283 2
a3284 1
above). Enabled by default for non-interactive shells.
d3286 2
a3287 1
Enable interactive mode. This can only be set/unset when the shell is invoked.
d3291 2
a3292 1
The shell is a login shell. This can only be set/unset when the shell is
d3299 2
a3300 1
Do not execute any commands. Useful for checking the syntax of scripts
d3304 2
a3305 1
the effective UID (EUID) or GID (EGID), respectively. See
d3309 2
a3310 1
Enable restricted mode. This option can only be used when the shell is invoked.
d3315 2
a3316 2
If used where the shell is invoked, commands are read from standard input. Set
automatically if the shell is invoked with no arguments.
d3353 2
a3354 2
Enable gmacs-like command-line editing (interactive shells only). Currently
identical to emacs editing except that transpose (^T) acts slightly
d3366 2
a3367 1
signal when a login shell exists. Currently set by default, but this will
d3373 2
a3374 1
No effect. In the original Korn shell, this prevents function definitions from
d3389 3
a3391 3
which allows the user to be oblivious of symbolic links to directories). Clear
by default. Note that setting this option does not affect the current value of
the
d3405 2
a3406 1
mode. See
d3412 2
a3413 1
No effect. In the original Korn shell, unless
d3430 2
a3431 1
is entered in insert mode.  This is the default.
d3434 2
a3435 1
These options can also be used upon invocation of the shell. The current set of
d3444 2
a3445 1
order, to the positional parameters (i.e., $1, $2, etc.). If options end with
d3447 3
a3449 3
and there are no remaining arguments, all positional parameters are cleared. If
no options or arguments are given, the values of all names are printed. For
unknown historical reasons, a lone
d3472 2
a3473 1
was an error. It is normally used as the condition command of
d3477 2
a3478 1
statements. The following basic expressions are available:
d3482 2
a3483 1
has non-zero length. Note that there is the potential for problems if
d3559 2
a3560 2
command above for a list of options). As a non-standard extension, if the
option starts with a
d3598 2
a3599 1
is a tty device. If the
d3662 2
a3663 1
test). For example,
d3706 2
a3707 1
is given, the times used to execute the pipeline are reported. If no pipeline
d3727 2
a3728 1
(the number of digits after the decimal may vary from system to system). Note
d3763 2
a3764 1
command above). There are two special signals:
d3777 2
a3778 1
handlers are executed in the environment of the last executed command. Note
d3813 2
a3814 1
Display or set parameter attributes. With no
d3832 2
a3833 1
Values for parameters may optionally be specified. If
d3842 2
a3843 1
operates on the attributes of functions. As with parameters, if no
d3853 2
a3854 1
specifies the field width. If
d3857 2
a3858 1
assigned value) is used. Leading whitespace (and zeros, if used with the
d3860 2
a3861 1
option) is stripped. If necessary, values are either truncated or space padded
d3866 2
a3867 1
specifies the field width. If
d3870 3
a3872 1
assigned value) is used. Trailing whitespace is stripped. If necessary, values
d3876 2
a3877 1
Zero fill attribute. If not combined with
d3886 2
a3887 1
base given in the first assignment is used). Parameters with this attribute may
d3890 2
a3891 1
Unsigned integer attribute. Integers are printed as unsigned values (only
d3894 2
a3895 1
option). This option is not in the original Korn shell.
d3897 2
a3898 2
Function mode. Display or set functions and their attributes, instead of
parameters.
d3900 3
a3902 2
Lower case attribute. All upper case characters in values are converted to
lower case. (In the original Korn shell, this parameter meant
d3911 2
a3912 1
parameters. This is the default action (option exists for ksh93 compatibility).
d3914 3
a3916 2
Read-only attribute. Parameters with this attribute may not be assigned to or
unset. Once this attribute is set, it can not be turned off.
d3918 2
a3919 1
Tag attribute. Has no meaning to the shell; provided for application use.
d3923 2
a3924 2
is the trace attribute. When functions with the trace attribute are executed,
the
d3929 3
a3931 2
Upper case attribute. All lower case characters in values are converted to
upper case. (In the original Korn shell, this parameter meant
d3936 2
a3937 1
than 10. See the
d3943 2
a3944 1
is the undefined attribute. See
d3948 4
a3951 2
Export attribute. Parameters (or functions) are placed in the environment of
any executed commands. Exported functions are not yet implemented.
d3956 2
a3957 1
Display or set process limits. If no options are used, the file size limit
d3964 4
a3967 2
limit is imposed. Note that some systems may not allow limits to be increased
once they are set. Also note that the types of limits available are system
d4055 2
a4056 1
The aliases for the given names are removed. If the
d4058 2
a4059 1
option is used, all aliases are removed. If the
d4078 2
a4079 1
Wait for the specified job(s) to finish. The exit status of
d4087 2
a4088 1
is 127. See
d4103 2
a4104 1
status. If job monitoring is enabled, the completion status of jobs is printed
d4112 2
a4113 1
function, tracked alias, or executable). If the
d4117 2
a4118 1
is a reserved word, alias, etc. Without the
d4126 2
a4127 1
will find reserved words and won't print aliases as alias commands. With the
d4144 2
a4145 2
are processes or groups of processes created for commands or pipelines. At a
minimum, the shell keeps track of the status of the background (i.e.,
d4149 2
a4150 1
commands. If job control is fully enabled (using
d4155 2
a4156 1
own process group. Foreground jobs can be stopped by typing the suspend
d4171 2
a4172 2
When a job is created, it is assigned a job number. For interactive shells,
this number is printed inside
d4175 2
a4176 1
command is run. A job may be referred to in
d4251 2
a4252 1
for a list of signal descriptions). The
d4257 2
a4258 1
is the command that created the process. If there are multiple processes in
d4271 2
a4272 1
signal and the shell exits. Similarly, if the
d4275 2
a4276 1
a login shell, the shell warns the user and does not exit. If another attempt
d4315 2
a4316 1
option is set, interactive input line editing is enabled. Warning: This mode is
d4318 2
a4319 1
bit is stripped in emacs mode. In this mode, various editing commands
d4321 2
a4322 1
without waiting for a newline. Several editing commands are bound to particular
d4337 2
a4338 2
will cause the editing command to be immediately invoked. Note that although
only two prefix characters (usually
d4341 2
a4342 2
multi-character sequences can be supported. The following binds the arrow keys
on an
d4344 2
a4345 2
terminal, or xterm (these are in the default bindings). Of course
some escape sequences won't work out quite this nicely.
d4373 2
a4374 2
The following is a list of available editing commands. Each description starts
with the name of the command, an
d4380 2
a4381 1
written as ^[). A count prefix for a command is entered using the sequence
d4386 2
a4387 2
omitted, it defaults to 1. Note that editing command names are used only with
the
d4389 6
a4394 3
command. Furthermore, many editing commands are useful only on terminals with
a visible cursor. The default bindings were chosen to resemble corresponding
Emacs key bindings. The users' tty characters (e.g.,
d4404 2
a4405 2
Simply causes the character to appear as literal input. Most ordinary
characters are bound to this.
d4433 2
a4434 1
name containing the cursor. If the entire remaining command or file name is
d4438 2
a4439 1
is appended. If there is no command or file name with the current partialword
d4477 2
a4478 1
lines (later). Each input line originally starts just after the last entry
d4510 2
a4511 1
globbing on the word. If no files match the pattern, the bell is rung.
d4534 2
a4535 1
can complete the partial word containing the cursor. Directoary names have
d4543 2
a4544 2
partial word containing the cursor. File type indicators are appended as
described under
d4548 2
a4549 2
Causes the current input line to be processed by the shell. The current cursor
position may be anywhere on the line.
d4552 2
a4553 1
from history becomes the current line. This is only useful after an
d4581 4
a4584 2
Enter incremental search mode. The internal history list is searched
backwards for commands matching the input. An initial
d4586 4
a4589 2
in the search string anchors the search. The abort key will leave search mode.
Other commands will be executed after leaving search mode. Successive
d4592 2
a4593 1
pattern. The history buffer retains only a finite number of lines; the oldest
d4599 2
a4600 2
input where it may receive special processing by the terminal handler. This
is useful for the BRL ^T mini-systat feature, for example.
d4620 2
a4621 1
Display the version of ksh. The current edit buffer is restored as soon as any
d4673 2
a4674 1
mode. In insert mode, most characters are simply put in the buffer at the
d4676 2
a4677 1
treated specially. In particular, the following characters are taken from
d4681 2
a4682 1
erase (^?), werase (^W), eof (^D), intr (^C), and quit (^\e). In addition to
d4688 2
a4689 1
Liternal next. The next character typed is not treated specially (can be used
d4692 2
a4693 1
End of line. The current line is read, parsed and executed by the shell.
d4699 2
a4700 1
Command and file name completion (see below). If used twice in a row, the
d4712 2
a4713 1
In command mode, each character is interpreted as a command. Characters that
d4715 2
a4716 2
commands that can't be carried out all cause beeps. In the following command
descriptions, an
d4722 2
a4723 1
is assumed to be 1 unless otherwise specified. The term
d4726 2
a4727 1
cursor. A
d4765 2
a4766 1
is not specified, the current line is edited. The actual command executed is
d4773 2
a4774 1
with the resulting words. If the current big-word is the first on the line (or
d4789 4
a4792 2
parameter. File name expansion matches the big-word against the files in the
current directory. After expansion, the cursor is places just past the last
d4795 2
a4796 1
Command/file name completion. Replace the current big-word with the
d4814 2
a4815 2
Command/file name enumeration. List all the commands or files that match the
current big-word.
d4821 2
a4822 1
Macro expansion. Execute the commands found in the alias
d4874 2
a4875 1
Find match. The editor looks forward for the nearest parenthesis, bracket or
d4965 2
a4966 1
times; goes into insert mode just after the current position. The append is
d4975 2
a4976 1
times; goes into insert mode at the current position. The insertion is only
d4987 2
a4988 1
Substitute whole line. All characters from the first non-blank character to the
d5024 4
a5027 2
Replace. Enter insert mode but overwrite existing characters instead of
inserting before existing characters. The replacement is repeated
d5121 2
a5122 1
should be reported to pdksh@@cs.mun.ca. Please include the version of
d5139 2
a5140 1
script). New version of
d5156 2
a5157 1
Ron Natalie, Arnold Robbins, Lou Salkind, and others. The first release of
d5161 2
a5162 1
The current maintainer is Michael Rendell (michael@@cs.mun.ca). The
@


1.29
log
@'braceexapnd' -> 'braceexpand'
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.28 1999/10/17 19:42:25 aaron Exp $
d1142 1
a1142 1
.Ic \&[\&*\&]\&} , ${# Ns Ar name Ns Ic \&[\&@@\&]\&}
d1148 5
a1152 2
.Ic ${ Ar name Ic \&# Ar pattern Ic \&},\ \&
.Ic ${ Ar name Ic \&#\&# Ar pattern Ic \&}
d1165 5
a1169 2
.Ic ${ Ar name Ic \&% Ar pattern Ic \&},\ \&
.Ic ${ Ar name Ic \&%\&% Ar pattern Ic \&}
@


1.28
log
@Minor formatting nits.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.27 1999/10/16 20:31:33 aaron Exp $
d3145 1
a3145 1
.It Ic braceexapnd
@


1.27
log
@Formatting fix.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.26 1999/09/23 23:25:10 aaron Exp $
d883 1
a883 1
.Ic $( Ns Ar command Ns Ic )
d936 1
a936 1
.Ic $( Ns Ar command Ns Ic )
@


1.26
log
@cetain -> certain; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.25 1999/08/04 19:11:14 millert Exp $
d638 3
a640 2
statement is zero if a break statement is used to exit the loop, non-zero
otherwise.
@


1.25
log
@Turn <tab> completion on by default for people used to bash, tcsh, etc...
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.24 1999/07/14 15:18:49 aaron Exp $
d1426 1
a1426 1
the prompt tend to mess things up. You can tell the shell not to count cetain
@


1.24
log
@update man page to pdksh v5.2.14
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.23 1999/07/05 19:50:53 aaron Exp $
d3223 1
a3223 1
is entered in insert mode.
d4165 1
@


1.23
log
@mdoc'ify syntax of the more complicated commands; when I converted this man
page originally, I didn't know how to do such funky things
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.22 1999/07/01 17:48:29 aaron Exp $
d677 8
d878 1
a878 1
.Ic $name
d880 1
a880 1
.Ic ${...} ;
d980 7
d988 2
a989 1
.Ic $ Ns Ar name
d991 3
a993 1
.Ic ${ Ns Ar name Ns Ic \&} ,
d996 3
a998 4
is a parameter name. If substitution is performed on a parameter that is not
set, a
.Dv NULL
string is substituted unless the
d1351 1
a1351 1
.Sx Emacs interactive input line editing
d1353 2
a1354 2
.Sx Vi interactive input line editing ,
below.
d2224 15
a2238 1
mode,the exit status is that of the last foregrounded job.
d2513 1
a2513 1
.Sx Emacs interactive input line editing
d3148 1
a3148 2
.Sx Emacs interactive input line editing
below.
d3154 1
a3154 1
The shell will not exit when end-of-file is read;
d3157 3
d3361 6
a3366 1
.Ar file .
d3371 6
a3376 1
.Ar file .
d3486 35
d3567 1
a3567 1
commands, the current start of the traps that have been set since the shell
d3569 4
d4021 33
a4053 1
.Ss Emacs interactive input line editing
d4351 1
a4351 1
.Ss Vi interactive input line editing
a4426 11
If a line is longer than the screen width (see
.Dv COLUMNS
parameter), a
.Ql > ,
.Ql +
or
.Ql <
character is displayed in the last column indicating that there are more
characters after, before and after, or before the current position,
respectively. The line is scrolled horizontally as necessary.
.Pp
d4848 3
@


1.22
log
@remove trailing spaces; missed from a previous commit
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.21 1999/06/15 01:18:34 millert Exp $
d38 1
a38 1
.Os BSD 4
d44 1
a44 1
.Op Fl +abCefhikmnprsuvxX
d141 1
a141 1
.Ev ENV
d533 2
a534 2
.It Xo Ic for Ar name \&[
.Ic in Ar word Ar ... Ar term \&]
d592 2
a593 2
.It Xo Ic select Ar name \&[
.Ic in Ar word Ar ... Ar term \&]
d700 2
a701 1
(and) and
d703 2
a704 1
(or) operators are replaced with
d1254 1
a1254 1
.Ic set Fl o
d1495 2
a1496 1
.Ev HOME , PWD
d2413 8
a2420 4
.It Xo Ic alias No [\ -d\ |\ +-t\ [-r]\ ]\ [+-px]\ [+-]
.Sm off
.Op Ar name1 No [= Ar value1 No \&]\ \&.\&.\&.
.Sm on
d2475 5
a2479 3
.It Xo Ic bind [ \&-m ]
.Sm off
.Oo Ar key No [= Ar editing-command No ]\ ... Oc
a2480 1
.Sm on
d2669 4
a2672 1
.It Xo Ic fc No [-e\ editor\ |\ -l\ [-n]]\ [-r]
d2696 4
a2699 1
.It Xo Ic fc No [-e\ -\ |\ -s]\ [-g]\ [old=new]\&
d2808 6
a2813 2
.It Xo Ic kill No [-s\ signame\ |\ -signum\ |\ -signame\ ]\ {\ job\ |\ pid\ |
.No -pgrp\ }\ \&.\&.\&.
d2839 4
a2842 2
.It Xo Ic print Oo Fl nprsu Ns Ar n
.Li | Fl R No [-en] Oc [argument\ ...]
d2952 3
a2954 3
.Sm off
.Oo Ar parameter Op = Ar value Oc \ ...
.Sm on
d2988 4
a2991 1
.It Xo Ic set No [+-abCefhkmnpsuvxX]\ [+-o\ [option]]\ [+-A\ name]\ [--]\&
d3501 10
a3510 2
.It Xo Ic typeset No [[+-Ulprtux]\ [-L[n]]\ [-R[n]]\ [-Z[n]]\ [-i[n]]\ |\ -f\&
.Li [-tux]]\ [name[=value]\ ...]
d4014 3
a4016 1
Emacs key bindings. The users' tty characters (e.g., ERASE) are bound to
@


1.21
log
@patches from pdksh 5.2.13.11
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.20 1999/06/14 03:13:58 pjanzen Exp $
d395 1
a395 1
and 
d681 1
a681 1
.Ic let Ar expression 
d812 1
a812 1
.It 
d3943 1
a3943 1
.It 
d4282 1
a4282 1
parameter), a 
@


1.20
log
@Fixed a bunch of typos, grammar errors, and unclear wording in the sh
man page, and the corresponding problems in the ksh page.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.19 1999/06/03 09:50:31 aaron Exp $
d1338 1
a1338 1
executed. Not yet implemented.
d4705 7
@


1.19
log
@use the hyphenated form "command-line" in the case of a compound adjective;
pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.18 1999/05/30 17:44:56 aaron Exp $
d83 1
a83 1
options are specified, the first non-option argument specifies the name
d90 1
a90 1
otherwise the name the shell was called with (i.e., argv[0]) is used.
d230 1
a230 1
usually delimit commands. The meta-charcters are used in building the
d294 1
a294 1
is used to introduce parameter, command and arithmetic substitutions (see
d463 1
a463 1
that are followed by reserved words must end with a semi-colon, a newline or
d518 1
a518 1
patterns are subject to parameter, command and arithmetic substitution as
d546 1
a546 1
are used instead. For historical reasons, open and clase braces may be used
d572 1
a572 1
is executed; otherwise the
d737 1
a737 1
Parameter, command and arithmetic substitutions are performed as expressions
d804 1
a804 1
a quoted word is found or when an alias word that iscurrently being expanded
d866 1
a866 1
substitution: parameter, command and arithmetic. Parameter substitutions,
d885 1
a885 1
into several words; any characters from the set space, tab and newline that
d895 1
a895 1
characters delimit a field. As a special case, leading and trailing
d918 1
a918 1
value of space, tab and newline is used.
d928 1
a928 1
is parsed, however, for the
d953 1
a953 1
regardless of quoting. This will hopefully be fixed soon.
d1057 1
a1057 1
it is substituted, otherwise
d1068 1
a1068 1
is substituted, otherwise nothing is substituted.
d1076 1
a1076 1
it is substituted, otherwise it is assigned
d1088 1
a1088 1
it is substituted, otherwise
d1100 1
a1100 1
can be omitted, in which case the conditions only depand on
d1138 2
a1139 2
results in the shortest match, two
of them results in the longest match.
d1394 1
a1394 1
The primary prompt for interactive shells. Parameter, command and arithmetic
d1431 1
a1431 1
command below). Parameter, command and arithmetic substitutions are performed
d1698 2
a1699 2
When a command is executed, its standard input, standard output and standard
error (file descriptors 0, 1 and 2, respectively) are normally inherited from
d1714 2
a1715 2
option is set, an error occurs, otherwise the file is truncated. Note that this
means the command
d1748 1
a1748 1
the shell copies lines from the command source into a termpoary file until a
d1756 1
a1756 1
parameter, command and arithmetic substitutions are performed, along with
d1790 2
a1791 2
redirection with a single digit. Parameter, command and arithmetic
substitutions, tilde substitutions and (if the shell is interative)
d1802 2
a1803 2
For simple-commands, redirections may appear anywhere in the command, for
compund-commands
d1895 3
a1897 1
Logical NOT; the result is 1 if argument is zero, 0 if not.
d1899 2
a1900 1
Arithmetic (bit-wise) NOT.
d1931 3
a1933 1
Logical OR; the result is 1 if either argument is non-zero, 0 if not. The right
d1936 3
a1938 1
Logical AND; the result is 1 if both arguments are non-zero, 0 if not. The
d1941 2
a1942 1
Arithmetic (bit-wise) OR.
d1944 3
a1946 1
Arithmetic (bit-wise) XOR (exclusive-OR).
d1948 2
a1949 1
Arithmetic (bit-wise) AND.
d2034 1
a2034 1
in that they are executed in the current environment. Howeer, unlike
d2038 1
a2038 1
are searched after special built-in commands, and before regular and
d2135 1
a2135 1
compliant, however, in some cases,
d2145 1
a2145 1
behaviour is followed, otherwise it is not. The
d2153 1
a2153 1
default, however this is usually not desirable).
d2229 1
a2229 1
option off, however, it can be explicitly turned on later.
d2331 2
a2332 2
assignments, the type of command is determined; a special built-in, a function,
a regular built-in, or the name of a file to execute found using the
d2569 1
a2569 1
(the actual value of the default path is system dependent; on
d2633 2
a2634 1
If no arguments are given, and I/O redirection is permanent and the shell is
d2717 1
a2717 1
ahve an argument. Options that do not take arguments may be grouped in a single
d2720 1
a2720 1
taken to be the option's argument, otherwise, the next argument is the option's
d2825 1
a2825 1
prints its arguments on the standard output, separated by spaces, and
d3205 1
a3205 1
and returns zero status if true, 1 status if fase, and greater than 1 if there
d3269 1
a3269 1
owned is the shell's effective user ID.
d3362 2
a3363 1
Logical OR.
d3365 2
a3366 1
Logical AND.
d3368 2
a3369 1
Logical NOT.
d3682 1
a3682 1
option is used, the mask displayed or set is symbolic, otherwise it is an
d4015 1
a4015 1
pressed), otherwise the existing comment characters are removed and the cursor
d4248 1
a4248 1
current cursor position as they are typed, however, some characters are
@


1.18
log
@repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.17 1999/05/28 12:23:06 aaron Exp $
d1259 1
a1259 1
parameter is not set, this parameter controls the command line editing mode for
d1405 1
a1405 1
Note that since the command line editors try to figure out how long the prompt
d1468 1
a1468 1
If set, this parameter controls the command line editing mode for interactive
d2319 1
a2319 1
After evaluation of command line arguments, redirections and parameter
d2382 1
a2382 1
Once the type of the command has been determined, any command line parameter
d3081 1
a3081 1
Enable BRL emacs-like command line editing (interactive shells only); see
d3085 1
a3085 1
Enable gmacs-like command line editing (interactive shells only). Currently
d3136 1
a3136 1
Enable vi-like command line editing (interactive shells only).
d3140 1
a3140 1
was set, the vi command line mode would let the tty driver do the work until
d3146 1
a3146 1
In vi command line editing, do command and file name completion when escape
d3154 1
a3154 1
In vi command line editing, do command and file name completion when tab (^I)
d4190 1
a4190 1
The vi command line editor in ksh has basically the same commands as the vi
@


1.17
log
@be more conservative with the .Dq macro; in particular, use .Sq macros most of
the time instead when quoting 1-2 characters (makes it much easier to read);
based on a patch received awhile ago from d@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.16 1999/03/18 11:07:07 aaron Exp $
d99 2
a100 2
.Dv INT ,
.Dv QUIT ,
d102 1
a102 1
.Dv TERM
d155 4
a158 4
.Sq > ,
.Sq >| ,
.Sq >> ,
.Sq <> ) .
d181 1
a181 1
.Sq \&-
d221 5
a225 5
.Sq \&< ,
.Sq \&> ,
.Sq \&| ,
.Sq \&; ,
.Sq \&( ,
d227 1
a227 1
.Sq \&)
d232 5
a236 5
.Sq \&< ,
.Sq \&<\&& ,
.Sq \&> ,
.Sq \&>\&& ,
.Sq \&>\&> ,
d240 1
a240 1
.Sq \&|
d242 1
a242 1
.Sq \&|\&&
d246 1
a246 1
.Sq \&;
d248 1
a248 1
.Sq \&&
d250 1
a250 1
.Sq \&&\&&
d252 1
a252 1
.Sq \&|\&|
d254 1
a254 1
.Sq \&;\&;
d258 1
a258 1
.Sq \&(\&( .. \&)\&)
d261 1
a261 1
.Sq \&( .. \&)
d272 11
a282 11
.Sq \e ,
.Sq \&" ,
.Sq \&' ,
.Sq \&# ,
.Sq \&$ ,
.Sq \&` ,
.Sq \&~ ,
.Sq \&{ ,
.Sq \&} ,
.Sq \&* ,
.Sq \&? ,
d284 1
a284 1
.Sq \&[ .
d288 1
a288 1
.Sq \&# ,
d291 1
a291 1
.Sq \&#
d293 1
a293 1
.Sq \&$
d297 1
a297 1
.Sq \&`
d301 1
a301 1
.Sq \&~
d305 1
a305 1
.Sq \&{
d307 1
a307 1
.Sq \&}
d314 2
a315 2
.Sq \&* ,
.Sq \&? ,
d317 1
a317 1
.Sq \&[
d361 1
a361 1
.Sq \&|
d367 1
a367 1
.Sq \&!
d375 4
a378 4
.Sq \&&\&& ,
.Sq \&|\&| ,
.Sq \&& ,
.Sq \&|\&& ,
d380 1
a380 1
.Sq \&; .
d388 1
a388 1
.Sq \&|\&|
d394 1
a394 1
.Sq \&&\&&
d396 1
a396 1
.Sq \&|\&|
d398 2
a399 2
.Sq \&& ,
.Sq \&|\&&
d401 1
a401 1
.Sq \&; ,
d403 1
a403 1
.Sq \&&
d410 1
a410 1
.Dv INT
d412 1
a412 1
.Dv QUIT
d417 1
a417 1
.Sq \&|\&&
d422 1
a422 1
.Sq \&&\&&
d424 1
a424 1
.Sq \&|\&|
d426 2
a427 2
.Sq \&& ,
.Sq \&|\&&
d429 1
a429 1
.Sq \&; .
d453 2
a454 1
NOTE: Some shells (but not this one) execute control structure commands in a
d513 1
a513 1
.Sq \&.
d515 1
a515 1
.Sq \&/
d562 1
a562 1
.Sq \&; .
d703 1
a703 1
.Sq \&&\&&
d705 1
a705 1
.Sq \&|\&| ,
d709 3
a711 3
.Sq Fl f ,
.Sq = ,
.Sq \&! ,
d715 1
a715 1
.Sq \&!=
d717 1
a717 1
.Sq =
d723 1
a723 1
.Sq \&<
d725 1
a725 1
.Sq \&>
d739 1
a739 1
.Sq \&&\&&
d741 1
a741 1
.Sq \&|\&|
d756 1
a756 1
.Sq \e
d759 1
a759 1
.Sq \e
d766 2
a767 2
.Sq \&$ ,
.Sq \&`
d769 1
a769 1
.Sq \e ,
d771 1
a771 1
.Sq $
d773 1
a773 1
.Sq `
d777 1
a777 1
.Sq \e
d779 3
a781 3
.Sq \e ,
.Sq $ ,
.Sq ` ,
d783 1
a783 1
.Sq \&" ,
d786 1
a786 1
.Sq \e
d788 1
a788 1
.Sq \e
d791 2
a792 1
NOTE: See
d892 3
a894 1
whitespace characters, in combination with zero or none non-IFS whitespace
d898 3
a900 1
it); leading or trailing non-IFS whitespace does create an empty field.
d931 1
a931 1
.Sq \e
d933 2
a934 2
.Sq $ ,
.Sq ` ,
d936 1
a936 1
.Sq \e
d938 1
a938 1
.Sq \e
d950 1
a950 1
NOTE:
d967 1
a967 1
.Sq _
d1005 1
a1005 1
.Sq =
d1099 1
a1099 1
.Sq \&:
d1117 2
a1118 2
.Sq \&* ,
.Sq \&@@ ,
d1137 1
a1137 1
.Sq \&#
d1160 3
a1162 1
The process ID of the shell, or the PID of the original shell if it is a
d1233 1
a1233 1
.Sq \&/
d1299 2
a1300 1
NOTE: If
d1326 2
a1327 1
NOTE: This parameter is not imported from the environment when the shell is
d1357 1
a1357 1
.Sq \&?
d1396 1
a1396 1
.Sq \&!
d1400 1
a1400 1
.Sq \&!
d1402 1
a1402 1
.Sq \&!\&!
d1485 1
a1485 1
.Sq ~ .
d1487 1
a1487 1
.Sq / ,
d1489 1
a1489 1
.Sq \&+
d1491 1
a1491 1
.Sq \&- ,
d1550 1
a1550 1
.Sq \&?
d1552 1
a1552 1
.Sq \&*
d1567 1
a1567 1
.Sq \&-
d1573 1
a1573 1
.Sq \&-
d1576 1
a1576 1
.Sq \&]
d1579 1
a1579 1
.Sq \&!
d1688 1
a1688 1
.Sq / .
d1690 3
a1692 1
The POSIX character classes (i.e.,
d1760 3
a1762 3
.Sq \&$ ,
.Sq ` ,
.Sq \e ,
d1764 1
a1764 1
.Sq \enewline .
d1777 1
a1777 1
.Sq p ,
d1780 1
a1780 1
.Sq \&- ,
d2122 4
a2125 1
The shell is intended to be POSIX compliant, however, in some cases, POSIX
d2132 3
a2134 1
If it is on, the POSIX behaviour is followed, otherwise it is not. The
d2139 3
a2141 1
parameter. (The shell can also be compiled so that it is in POSIX mode by
d2153 3
a2155 1
command substitutions. In POSIX mode, the
d2157 3
a2159 1
is interpreted when the command is interpreted; in non-POSIX mode, the
d2165 3
a2167 1
in POSIX mode,
d2169 3
a2171 1
in non-POSIX mode. To avoid problems, use the
d2176 5
a2180 1
output. In POSIX mode, signal names are listed one per line; in non-POSIX mode,
d2189 5
a2193 2
exit status. In POSIX mode, the exit status is 0 if no errors occur; in
non-POSIX mode, the exit status is that of the last foregrounded job.
d2196 8
a2203 4
In POSIX mode, options must start with a
.Sq \&- ;
in non-POSIX mode, options can start with either
.Sq \&-
d2205 1
a2205 1
.Sq \&+ .
d2207 6
a2212 2
Brace expansion (also known as alternation). In POSIX mode, brace expansion is
disabled; in non-POSIX mode, brace expansion is enabled. Note that
d2221 3
a2223 1
In POSIX mode, this does not clear the
d2227 3
a2229 1
options; in non-POSIX mode, it does.
d2232 3
a2234 1
exit status. In POSIX mode, the exit status of
d2236 3
a2238 1
is 0 if there are no errors; in non-POSIX mode, the exit status is that of any
d2243 5
a2247 1
prints 0 in POSIX mode, 1 in non-POSIX mode. This construct is used in most
d2258 5
a2262 1
commands. In POSIX mode, normal argument expansion is done; in non-POSIX mode,
d2266 16
a2281 6
Signal specification. In POSIX mode, signals can be specified as digits, only
if signal numbers match POSIX values (i.e., HUP=1, INT=2, QUIT=3, ABRT=6,
KILL=9, ALRM=14, and TERM=15); in non-POSIX mode, signals can always be digits.
.It
Alias expansion. In POSIX mode, alias expansion is only carried out when
reading command words; in non-POSIX mode, alias expansion is carried out on any
d2295 3
a2297 1
in POSIX mode,
d2299 3
a2301 1
in non-POSIX mode.
d2303 3
a2305 1
Test. In POSIX mode, the expression
d2309 3
a2311 1
arguments) is always true as it is a non-zero length string; in non-POSIX mode,
d2340 5
a2344 1
The original ksh and POSIX differ somewhat in which commands are considered
d2347 2
a2348 1
POSIX special commands
d2359 2
a2360 1
Very special commands (non-POSIX mode)
d2364 2
a2365 1
POSIX regular commands
d2378 3
a2380 1
differently from the POSIX special and regular commands.
d2417 1
a2417 1
.Sq \&+ ,
d2419 1
a2419 1
.Sq \&+
d2505 1
a2505 1
.Dq \&- ,
d2558 3
a2560 1
(the actual value of the default path is system dependent; on POSIXish systems,
d2600 1
a2600 1
.Sq \ec .
d2718 1
a2718 1
.Sq \&+ ,
d2722 1
a2722 1
.Sq \&+ .
d2741 1
a2741 1
.Sq \&- ,
d2743 1
a2743 1
.Sq \&-\&-
d2818 6
a2823 6
.Sq \eb ,
.Sq \ef ,
.Sq \en ,
.Sq \er ,
.Sq \et ,
.Sq \ev ,
d2825 1
a2825 1
.Sq \e0###
d2827 1
a2827 1
.Sq #
d2830 1
a2830 1
.Sq \ec
d2834 1
a2834 1
.Sq \e
d2859 1
a2859 1
.Sq \e
d3061 2
a3062 2
.Sq \&- ,
.Sq \&+
d3064 1
a3064 1
.Sq =
d3074 1
a3074 1
.Sq /
d3130 3
a3132 1
Enable POSIX mode. See
d3141 2
a3142 1
ESC (^[) was entered.
d3168 1
a3168 1
.Sq \&-\&-
d3172 1
a3172 1
.Sq \&-
d3280 1
a3280 1
.Sq \&! ,
d3312 3
a3314 1
to the special POSIX rules described below).
d3371 3
a3373 1
Note that some special rules are applied (courtesy of POSIX) if the number of
d3379 1
a3379 1
.Sq \&!
d3383 1
a3383 1
.Sq \&!
d3387 1
a3387 1
.Sq \&! ) .
d3389 2
a3390 1
NOTE: A common mistake is to use
d3399 1
a3399 1
.Sq Ic \&!
d3401 1
a3401 1
.Sq Fl n .
d3472 1
a3472 1
.Sq \&-
d3475 1
a3475 1
.Sq \&+ ,
d3497 1
a3497 1
.Sq \&+ ,
d3644 2
a3645 1
CPU seconds to be used by each process.
d3718 2
a3719 2
.Dv HUP ,
.Dv INT
d3721 1
a3721 1
.Dv QUIT
d3840 1
a3840 1
.Sq \&+
d3842 1
a3842 1
.Sq \&-
d3852 3
a3854 1
mean consuming CPU time -- the process could be blocked waiting for some
d3885 1
a3885 1
.Dv HUP
d3891 1
a3891 1
.Dv HUP
d3916 3
a3918 1
only two prefix characters (usually ESC and ^X) are supported, some
d3920 3
a3922 1
on an ANSI terminal, or xterm (these are in the default bindings). Of course
d3955 3
a3957 1
bound to by default (written using caret notation, i.e., ASCII ESC character is
d4007 1
a4007 1
.Sq /
d4076 1
a4076 1
.Sq \&*
d4102 1
a4102 1
.Sq /
d4148 1
a4148 1
.Sq ^
d4268 2
a4269 2
.Sq \&> ,
.Sq \&+
d4271 1
a4271 1
.Sq \&<
d4331 1
a4331 1
.Sq \&* ,
d4335 4
a4338 4
.Sq \&; ,
.Sq \&| ,
.Sq \&& ,
.Sq \&( ,
d4340 1
a4340 1
.Sq \&) )
d4495 1
a4495 1
.Sq ^ ,
@


1.16
log
@``that that'' -> ``than that''; nash@@mcs.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: ksh.1tbl,v 1.15 1999/03/02 23:46:53 aaron Exp $
d155 4
a158 4
.Dq > ,
.Dq >| ,
.Dq >> ,
.Dq <> ) .
d181 1
a181 1
.Dq \&-
d221 5
a225 5
.Dq \&< ,
.Dq \&> ,
.Dq \&| ,
.Dq \&; ,
.Dq \&( ,
d227 1
a227 1
.Dq \&)
d232 5
a236 6
.Dq \&< ,
.Dq \&<\&& ,
.Dq \&<\&< ,
.Dq \&> ,
.Dq \&>\&& ,
.Dq \&>\&> ,
d240 1
a240 1
.Dq \&|
d242 1
a242 1
.Dq \&|\&&
d246 1
a246 1
.Dq \&;
d248 1
a248 1
.Dq \&&
d250 1
a250 1
.Dq \&&\&&
d252 1
a252 1
.Dq \&|\&|
d254 1
a254 1
.Dq \&;\&;
d258 2
a259 2
.Dq \&(\&( .. \&)\&)
are used in arithmetic expressions;
d261 2
a262 2
.Dq \&( .. \&)
are used to create subshells.
d272 11
a282 11
.Dq \e ,
.Dq \&" ,
.Dq \&' ,
.Dq \&# ,
.Dq \&$ ,
.Dq \&` ,
.Dq \&~ ,
.Dq \&{ ,
.Dq \&} ,
.Dq \&* ,
.Dq \&? ,
d284 1
a284 1
.Dq \&[ .
d288 1
a288 1
.Dq \&# ,
d291 1
a291 1
.Dq \&#
d293 1
a293 1
.Dq \&$
d297 1
a297 1
.Dq \&`
d301 1
a301 1
.Dq \&~
d305 1
a305 1
.Dq \&{
d307 1
a307 1
.Dq \&}
d313 3
a315 3
and, finally,
.Dq \&* ,
.Dq \&? ,
d317 1
a317 1
.Dq \&[
d361 1
a361 1
.Dq \&|
d367 1
a367 1
.Dq \&!
d375 4
a378 4
.Dq \&&\&& ,
.Dq \&|\&| ,
.Dq \&& ,
.Dq \&|\&& ,
d380 1
a380 1
.Dq \&; .
d388 1
a388 1
.Dq \&|\&|
d394 1
a394 1
.Dq \&&\&&
d396 1
a396 1
.Dq \&|\&|
d398 2
a399 2
.Dq \&& ,
.Dq \&|\&&
d401 1
a401 1
.Dq \&; ,
d403 1
a403 1
.Dq \&&
d417 1
a417 1
.Dq \&|\&&
d422 1
a422 1
.Dq \&&\&&
d424 1
a424 1
.Dq \&|\&|
d426 2
a427 2
.Dq \&& ,
.Dq \&|\&&
d429 1
a429 1
.Dq \&; .
d512 1
a512 1
.Dq \&.
d514 1
a514 1
.Dq \&/
d561 1
a561 1
.Dq \&; .
d702 1
a702 1
.Dq \&&\&&
d704 1
a704 1
.Dq \&|\&| ,
d708 3
a710 3
.Dq Fl f ,
.Dq = ,
.Dq \&! ,
d714 1
a714 1
.Dq \&!=
d716 1
a716 1
.Dq =
d722 1
a722 1
.Dq \&<
d724 1
a724 1
.Dq \&>
d738 1
a738 1
.Dq \&&\&&
d740 1
a740 1
.Dq \&|\&|
d755 1
a755 1
.Dq \e
d758 1
a758 1
.Dq \e
d765 2
a766 2
.Dq \&$ ,
.Dq \&`
d768 1
a768 1
.Dq \e ,
d770 1
a770 1
.Dq $
d772 1
a772 1
.Dq `
d776 1
a776 1
.Dq \e
d778 3
a780 3
.Dq \e ,
.Dq $ ,
.Dq ` ,
d782 1
a782 1
.Dq \&" ,
d785 1
a785 1
.Dq \e
d787 1
a787 1
.Dq \e
d925 1
a925 1
.Dq \e
d927 2
a928 2
.Dq $ ,
.Dq ` ,
d930 1
a930 1
.Dq \e
d932 1
a932 1
.Dq \e
d961 1
a961 1
.Dq _
d999 1
a999 1
.Dq =
d1093 1
a1093 1
.Dq \&:
d1111 2
a1112 2
.Dq \&* ,
.Dq \&@@ ,
d1131 1
a1131 1
.Dq \&#
d1225 1
a1225 1
.Dq \&/
d1347 1
a1347 1
.Dq \&?
d1386 1
a1386 1
.Dq \&!
d1390 1
a1390 1
.Dq \&!
d1392 1
a1392 1
.Dq \&!\&!
d1475 1
a1475 1
.Dq ~ .
d1477 1
a1477 1
.Dq / ,
d1479 1
a1479 1
.Dq \&+
d1481 1
a1481 1
.Dq \&- ,
d1540 1
a1540 1
.Dq \&?
d1542 1
a1542 1
.Dq \&*
d1557 1
a1557 1
.Dq \&-
d1563 1
a1563 1
.Dq \&-
d1566 1
a1566 1
.Dq \&]
d1569 1
a1569 1
.Dq \&!
d1678 1
a1678 1
.Dq / .
d1748 3
a1750 3
.Dq \&$ ,
.Dq ` ,
.Dq \e ,
d1752 1
a1752 1
.Dq \enewline .
d1765 1
a1765 1
.Dq p ,
d1768 1
a1768 1
.Dq \&- ,
d2163 1
a2163 1
.Dq \&- ;
d2165 1
a2165 1
.Dq \&-
d2167 1
a2167 1
.Dq \&+ .
d2332 4
a2335 2
.Dq \&+ ,
or a lone \&+ is given on the command line, only
d2513 1
a2513 1
.Dq \ec .
d2631 1
a2631 1
.Dq \&+ ,
d2635 1
a2635 1
.Dq \&+ .
d2654 1
a2654 1
.Dq \&- ,
d2656 1
a2656 1
.Dq \&-\&-
d2731 6
a2736 6
.Dq \eb ,
.Dq \ef ,
.Dq \en ,
.Dq \er ,
.Dq \et ,
.Dq \ev ,
d2738 1
a2738 1
.Dq \e0###
d2740 1
a2740 1
.Dq #
d2743 1
a2743 1
.Dq \ec
d2747 1
a2747 1
.Dq \e
d2772 1
a2772 1
.Dq \e
d2974 2
a2975 2
.Dq \&- ,
.Dq \&+
d2977 1
a2977 1
.Dq =
d2987 1
a2987 1
.Dq /
d3078 1
a3078 1
.Dq \&-\&-
d3082 1
a3082 1
.Dq \&-
d3190 1
a3190 1
.Dq \&! ,
d3285 1
a3285 1
.Dq \&!
d3289 1
a3289 1
.Dq \&!
d3293 1
a3293 1
.Dq \&! ) .
d3304 1
a3304 1
.Dq Ic \&!
d3306 1
a3306 1
.Dq Fl n .
d3377 1
a3377 1
.Dq \&-
d3380 1
a3380 1
.Dq \&+ ,
d3402 1
a3402 1
.Dq \&+ ,
d3744 1
a3744 1
.Dq \&+
d3746 1
a3746 1
.Dq \&-
d3903 1
a3903 1
.Dq /
d3972 1
a3972 1
.Dq \&*
d3998 1
a3998 1
.Dq /
d4044 1
a4044 1
.Dq ^
d4164 2
a4165 2
.Dq \&> ,
.Dq \&+
d4167 1
a4167 1
.Dq \&<
d4227 1
a4227 1
.Dq \&* ,
d4231 4
a4234 4
.Dq \&; ,
.Dq \&| ,
.Dq \&& ,
.Dq \&( ,
d4236 1
a4236 1
.Dq \&) )
d4391 1
a4391 1
.Dq ^ ,
@


1.15
log
@Finally, new and improved mandoc ksh/sh man pages. This took hours, and hours,
and hours... Someone please read it and find any typos I may have missed.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d398 1
a398 1
have equal precedence which is higher that that of
@


1.14
log
@obliveous -> oblivious; d@@
@
text
@d1 57
a57 40
'\" t
.\"	$OpenBSD: ksh.1tbl,v 1.13 1999/01/19 20:41:53 millert Exp $
.\"{{{}}}
.\"{{{  Notes about man page
.\"     - use the pseudo-macros .sh( and .sh) to begin and end sh-specific
.\"       text and .ksh( and .ksh) for ksh specific text.
.\"     - put i.e., e.g. and etc. in italics
.\"}}}
.\"{{{  To do
.\" todo: Things not covered that should be:
.\"	- distinguish (POSIX) special built-in's, (POSIX) regular built-in's,
.\"	  and sh/ksh weirdo built-in's (put S,R,X superscripts after command
.\"	  name in built-in commands section?)
.\"	- need to be consistent about notation for `See section-name', `
.\"	  See description of foobar command', `See section section-name', etc.
.\"	- need to use the term `external command' meaning `a command that is 
.\"       executed using execve(2)' (as opposed to a built-in command or 
.\"       function) for more clear description.
.\"}}}
.\"{{{  Title
.TH KSH 1 "August 19, 1996" "" "User commands"
.\"}}}
.\"{{{  Name
.SH NAME
ksh \- Public domain Korn shell
.\"}}}
.\"{{{  Synopsis
.SH SYNOPSIS
.ad l
\fBksh\fP
[\fB\(+-abCefhikmnprsuvxX\fP] [\fB\(+-o\fP \fIoption\fP] [ [ \fB\-c\fP \fIcommand-string\fP [\fIcommand-name\fP] | \fB\-s\fP | \fIfile\fP ] [\fIargument\fP ...] ]
.ad b
.\"}}}
.\"{{{  Description
.SH DESCRIPTION
\fBksh\fP is a command interpreter that is intended for both 
interactive and shell script use.  Its command language is a superset
of the \fIsh\fP(1) shell language.
.\"{{{  Shell Startup
.SS "Shell Startup"
d59 202
a260 100
.IP "\fB\-c\fP \fIcommand-string\fP"
the shell executes the command(s) contained in \fIcommand-string\fP
.IP \fB\-i\fP
interactive mode \(em see below
.IP \fB\-l\fP
login shell \(em see below
interactive mode \(em see below
.IP \fB\-s\fP
the shell reads commands from standard input; all non-option arguments
are positional parameters
.IP \fB\-r\fP
restricted mode \(em see below
.PP
In addition to the above, the options described in the \fBset\fP built-in
command can also be used on the command line.
.PP
If neither the \fB\-c\fP nor the \fB\-s\fP options are specified, the
first non-option argument specifies the name of a file the shell reads
commands from; if there are no non-option arguments, the shell reads
commands from standard input.
The name of the shell (\fIi.e.\fP, the contents of the \fB$0\fP) parameter
is determined as follows: if the \fB\-c\fP option is used and there is
a non-option argument, it is used as the name; if commands are being
read from a file, the file is used as the name; otherwise the name
the shell was called with (\fIi.e.\fP, argv[0]) is used.
.PP
A shell is \fBinteractive\fP if the \fB\-i\fP option is used or
if both standard input and standard error are attached to a tty.
An interactive shell has job control enabled (if available),
ignores the INT, QUIT and TERM signals, and prints prompts before
reading input (see \fBPS1\fP and \fBPS2\fP parameters).
For non-interactive shells, the \fBtrackall\fP option is on by default
(see \fBset\fP command below).
.PP
A shell is \fBrestricted\fP if the \fB\-r\fP option is used or if either
the basename of the name the shell is invoked with or the \fBSHELL\fP
parameter match the pattern *r*sh (\fIe.g.\fP, rsh, rksh, rpdksh, \fIetc.\fP).
The following restrictions come into effect after the shell processes
any profile and \fB$ENV\fP files:
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
the \fBcd\fP command is disabled
.IP \ \ \(bu
the \fBSHELL\fP, \fBENV\fP and \fBPATH\fP parameters can't be changed
.IP \ \ \(bu
command names can't be specified with absolute or relative paths
.IP \ \ \(bu
the \fB\-p\fP option of the \fBcommand\fP built-in can't be used
.IP \ \ \(bu
redirections that create files can't be used (\fIi.e.\fP, \fB>\fP,
\fB>|\fP, \fB>>\fP, \fB<>\fP)
.nr PD \n(P2
.PP
A shell is \fBprivileged\fP if the \fB\-p\fP option is used or if
the real user-id or group-id does not match the effective user-id
or group-id (see \fIgetuid\fP(2), \fIgetgid\fP(2)).
A privileged shell does not process $HOME/.profile nor the \fBENV\fP
parameter (see below), instead the file /etc/suid_profile is processed.
Clearing the privileged option causes the shell to set its effective
user-id (group-id) to its real user-id (group-id).
.PP
If the basename of the name the shell is called with (\fIi.e.\fP, argv[0])
starts with \fB\-\fP or if the \fB\-l\fP option is used, the shell is assumed
to be a login shell and the shell reads and executes the contents of
\fB/etc/profile\fP and \fB$HOME/.profile\fP if they exist and are readable.
.PP
If the \fBENV\fP parameter is set when the shell starts (or, in the
case of login shells, after any profiles are processed), its value
is subjected to parameter, command, arithmetic and tilde substitution and
the resulting file (if any) is read and executed.
If \fBENV\fP parameter is not set (and not null) and pdksh was compiled
with the \fBDEFAULT_ENV\fP macro defined, the file named in that macro
is included (after the above mentioned substitutions have been performed).
.PP
The exit status of the shell is 127 if the command file specified
on the command line could not be opened, or non-zero if a fatal syntax
error occurred during the execution of a script.
In the absence of fatal errors, the exit status is that of the last
command executed, or zero, if no command is executed.
.\"}}}
.\"{{{  Command Syntax
.SS "Command Syntax"
.\"{{{  words and tokens
The shell begins parsing its input by breaking it into \fIword\fPs.
Words, which are sequences of characters, are delimited by unquoted
\fIwhite-space\fP characters (space, tab and newline) or \fImeta-characters\fP
(\fB<\fP, \fB>\fP, \fB|\fP, \fB;\fP, \fB&\fP, \fB(\fP and \fB)\fP).
Aside from delimiting words, spaces and tabs are ignored, while
newlines usually delimit commands.
The meta-characters are used in building the following tokens:
\fB<\fP, \fB<&\fP, \fB<<\fP, \fB>\fP, \fB>&\fP, \fB>>\fP, \fIetc.\fP are
used to specify redirections (see Input/Output Redirection below);
\fB|\fP is used to create pipelines;
\fB|&\fP is used to create co-processes (see Co-Processes below);
\fB;\fP is used to separate commands;
\fB&\fP is used to create asynchronous pipelines;
\fB&&\fP and \fB||\fP are used to specify conditional execution;
\fB;;\fP is used in \fBcase\fP statements;
\fB((\fP .. \fB))\fP are used in arithmetic expressions;
d262 154
a415 80
\fB(\fP .. \fB)\fP are used to create subshells.
.PP
White-space and meta-characters can be quoted individually using
backslash (\fB\e\fP), or in groups using double (\fB"\fP) or single (\fB'\fP)
quotes.
Note that the following characters are also treated specially by the shell and
must be quoted if they are to represent themselves:
\fB\e\fP, \fB"\fP, \fB'\fP, \fB#\fP, \fB$\fP, \fB`\fP, \fB~\fP, \fB{\fP,
\fB}\fP, \fB*\fP, \fB?\fP and \fB[\fP.
The first three of these are the above mentioned quoting characters
(see Quoting below);
\fB#\fP, if used at the beginning of a word, introduces a comment \(em everything
after the \fB#\fP up to the nearest newline is ignored;
\fB$\fP is used to introduce parameter, command and arithmetic substitutions
(see Substitution below);
\fB`\fP introduces an old-style command substitution
(see Substitution below);
\fB~\fP begins a directory expansion (see Tilde Expansion below);
\fB{\fP and \fB}\fP delimit \fIcsh\fP(1) style alternations
(see Brace Expansion below);
and, finally, \fB*\fP, \fB?\fP and \fB[\fP are used in file name generation
(see File Name Patterns below).
.\"}}}
.\"{{{  simple-command
.PP
As words and tokens are parsed, the shell builds commands, of which
there are two basic types: \fIsimple-commands\fP, typically programs
that are executed, and \fIcompound-commands\fP, such as \fBfor\fP and
\fBif\fP statements, grouping constructs and function definitions.
.PP
A simple-command consists of some combination of parameter assignments (see
Parameters below), input/output redirections (see Input/Output Redirections
below), and command words; the only restriction is that parameter assignments
come before any command words.
The command words, if any, define the command that is to be executed and its
arguments.
The command may be a shell built-in command, a function or an \fIexternal
command\fP, \fIi.e.\fP, a separate executable file that is located using the
\fBPATH\fP parameter (see Command Execution below).
Note that all command constructs have an \fIexit status\fP: for external
commands, this is related to the status returned by \fIwait\fP(2) (if the
command could not be found, the exit status is 127, if it could not be
executed, the exit status is 126);
the exit status of other command constructs (built-in commands, functions,
compound-commands, pipelines, lists, \fIetc.\fP) are all well defined and are
described where the construct is described.
The exit status of a command consisting only of parameter assignments is that
of the last command substitution performed during the parameter assignment
or zero if there were no command substitutions.
.\"}}}
.\"{{{  pipeline
.PP
Commands can be chained together using the \fB|\fP token to
form \fIpipelines\fP, in which the standard output of each command but
the last is piped (see \fIpipe\fP(2)) to the standard input of the following
command.
The exit status of a pipeline is that of its last command.
A pipeline may be prefixed by the \fB!\fP reserved word which
causes the exit status of the pipeline to be logically
complemented: if the original status was 0 the complemented status will
be 1, and if the original status was not 0, then the complemented
status will be 0.
.\"}}}
.\"{{{  lists
.PP
\fILists\fP of commands can be created by separating pipelines by
any of the following tokens: \fB&&\fP, \fB||\fP, \fB&\fP, \fB|&\fP and \fB;\fP.
The first two are for conditional execution: \fIcmd1\fP \fB&&\fP \fIcmd2\fP
executes \fIcmd2\fP only if the exit status of \fIcmd1\fP is zero;
\fB||\fP is the opposite \(em \fIcmd2\fP is executed only if the exit status
of \fIcmd1\fP is non-zero.
\fB&&\fP and \fB||\fP have equal precedence which is higher than that of
\fB&\fP, \fB|&\fP and \fB;\fP, which also have equal precedence.
The \fB&\fP token causes the preceding command to be executed asynchronously,
that is, the shell starts the command, but does not wait for it to complete
(the shell does keep track of the status of asynchronous commands \(em see
Job Control below).
When an asynchronous command is started when job control is disabled
(\fIi.e.\fP, in most scripts), the command is started with signals INT
and QUIT ignored and with input redirected from /dev/null
d417 14
a430 4
The \fB|&\fP operator starts a \fIco-process\fP which is special kind of
asynchronous process (see Co-Processes below).
Note that a command must follow the \fB&&\fP and \fB||\fP operators, while
a command need not follow \fB&\fP, \fB|&\fP and \fB;\fP.
d433 6
a438 7
.\"}}}
.\"{{{  compound-commands
.PP
Compound commands are created using the following reserved words \(em these
words are only recognized if they are unquoted and if they are used as
the first word of a command (\fIi.e.\fP, they can't be preceded by parameter
assignments or redirections):
d442 4
a445 4
case	else	function	then	!
do	esac	if	time	[[
done	fi	in	until	{
elif	for	select	while	}
d447 14
a460 6
\fBNote:\fP Some shells (but not this one) execute control structure commands
in a subshell when one or more of their file descriptors are redirected, so
any environment changes inside them may fail.
To be portable, the \fBexec\fP statement should be used instead to redirect
file descriptors before the control structure.
.PP
d462 10
a471 10
\fIlist\fP) that are followed by reserved words must end with a
semi-colon, a newline or a (syntactically correct) reserved word.
For example,
.RS
\fB{ echo foo; echo bar; }\fP
.br
\fB{ echo foo; echo bar<newline>}\fP
.br
\fB{ { echo foo; echo bar; } }\fP
.RE
d473 5
a477 3
.RS
\fB{ echo foo; echo bar }\fP
.RE
d479 241
a719 125
.\"{{{  ( list )
.IP "\fB(\fP \fIlist\fP \fB)\fP"
Execute \fIlist\fP in a subshell.  There is no implicit way to pass
environment changes from a subshell back to its parent.
.\"}}}
.\"{{{  { list }
.IP "\fB{\fP \fIlist\fP \fB}\fP"
Compound construct; \fIlist\fP is executed, but not in a subshell.
Note that \fB{\fP and \fB}\fP are reserved words, not meta-characters.
.\"}}}
.\"{{{  case word in [ [ ( ] pattern [ | pattern ] ... ) list ;; ] ... esac
.IP "\fBcase\fP \fIword\fP \fBin\fP [ [\fB(\fP] \fIpattern\fP [\fB|\fP \fIpattern\fP] ... \fB)\fP \fIlist\fP \fB;;\fP ] ... \fBesac\fP"
The \fBcase\fP statement attempts to match \fIword\fP against the specified
\fIpattern\fPs; the \fIlist\fP associated with the first successfully matched
pattern is executed.  Patterns used in \fBcase\fP statements are the same as
those used for file name patterns except that the restrictions regarding
\fB\&.\fP and \fB/\fP are dropped.  Note that any unquoted space before and
after a pattern is stripped; any space with a pattern must be quoted.  Both the
word and the patterns are subject to parameter, command, and arithmetic
substitution as well as tilde substitution.
For historical reasons, open and close braces may be used instead
of \fBin\fP and \fBesac\fP (\fIe.g.\fP, \fBcase $foo { *) echo bar; }\fP).
The exit status of a \fBcase\fP statement is that of the executed \fIlist\fP;
if no \fIlist\fP is executed, the exit status is zero.
.\"}}}
.\"{{{  for name [ in word ... term ] do list done
.IP "\fBfor\fP \fIname\fP [ \fBin\fP \fIword\fP ... \fIterm\fP ] \fBdo\fP \fIlist\fP \fBdone\fP"
where \fIterm\fP is either a newline or a \fB;\fP.
For each \fIword\fP in the specified word list, the parameter \fIname\fP is
set to the word and \fIlist\fP is executed.  If \fBin\fP is not used to
specify a word list, the positional parameters (\fB"$1"\fP, \fB"$2"\fP,
\fIetc.\fP) are used instead.
For historical reasons, open and close braces may be used instead
of \fBdo\fP and \fBdone\fP (\fIe.g.\fP, \fBfor i; { echo $i; }\fP).
The exit status of a \fBfor\fP statement is the last exit status
of \fIlist\fP; if \fIlist\fP is never executed, the exit status is zero.
.\"}}}
.\"{{{  if list then list [ elif list then list ] ... [ else list ] fi
.IP "\fBif\fP \fIlist\fP \fBthen\fP \fIlist\fP [\fBelif\fP \fIlist\fP \fBthen\fP \fIlist\fP] ... [\fBelse\fP \fIlist\fP] \fBfi\fP"
If the exit status of the first \fIlist\fP is zero, the second \fIlist\fP
is executed; otherwise the \fIlist\fP following the \fBelif\fP, if any, is
executed with similar consequences.  If all the lists following the \fBif\fP
and \fBelif\fPs fail (\fIi.e.\fP, exit with non-zero status), the \fIlist\fP
following the \fBelse\fP is executed.
The exit status of an \fBif\fP statement is that
of non-conditional \fIlist\fP that is executed; if no non-conditional
\fIlist\fP is executed, the exit status is zero.
.\"}}}
.\"{{{  select name [ in word ... ] do list done
.IP "\fBselect\fP \fIname\fP [ \fBin\fP \fIword\fP ... \fIterm\fP ] \fBdo\fP \fIlist\fP \fBdone\fP"
where \fIterm\fP is either a newline or a \fB;\fP.
The \fBselect\fP statement provides an automatic method of presenting
the user with a menu and selecting from it.
An enumerated list of the specified \fIwords\fP is printed on standard
error, followed by a prompt (\fBPS3\fP, normally `\fB#? \fP').
A number corresponding to one of the enumerated words is then read
from standard input, \fIname\fP is set to the selected word (or is
unset if the selection is not valid), \fBREPLY\fP
is set to what was read (leading/trailing space is stripped),
and \fIlist\fP is executed.
If a blank line (\fIi.e.\fP, zero or more \fBIFS\fP characters) is entered,
the menu is re-printed without executing \fIlist\fP.
When \fIlist\fP completes, the enumerated list is printed if \fBREPLY\fP
is null, the prompt is printed and so on.
This process is continues until an end-of-file is read, an interrupt is
received or a break statement is executed inside the loop.
If \fBin\fP \fIword\fP \fB\&...\fP is omitted, the positional parameters
are used (\fIi.e.\fP, \fB"$1"\fP, \fB"$2"\fP, \fIetc.\fP).
For historical reasons, open and close braces may be used instead
of \fBdo\fP and \fBdone\fP (\fIe.g.\fP, \fBselect i; { echo $i; }\fP).
The exit status of a \fBselect\fP statement is zero if a break statement
is used to exit the loop, non-zero otherwise.
.\"}}}
.\"{{{  until list do list done
.IP "\fBuntil\fP \fIlist\fP \fBdo\fP \fIlist\fP \fBdone\fP"
This works like \fBwhile\fP, except that the body is executed only while the
exit status of the first \fIlist\fP is non-zero.
.\"}}}
.\"{{{  while list do list done
.IP "\fBwhile\fP \fIlist\fP \fBdo\fP \fIlist\fP \fBdone\fP"
A \fBwhile\fP is a prechecked loop.  Its body is executed as often
as the exit status of the first \fIlist\fP is zero.
The exit status of a \fBwhile\fP statement is the last exit status
of the \fIlist\fP in the body of the loop; if the body is not executed,
the exit status is zero.
.\"}}}
.\"{{{  function name { list }
.IP "\fBfunction\fP \fIname\fP \fB{\fP \fIlist\fP \fB}\fP"
Defines the function \fIname\fP.
See Functions below.
Note that redirections specified after a function definition are
performed whenever the function is executed, not when the function
definition is executed.
.\"}}}
.\"{{{  name () command
.IP "\fIname\fP \fB()\fP \fIcommand\fP"
Mostly the same as \fBfunction\fP.
See Functions below.
.\"}}}
.\"{{{  (( expression ))
.IP "\fB((\fP \fIexpression\fP \fB))\fP"
The arithmetic expression \fIexpression\fP is evaluated;
equivalent to \fBlet "\fP\fIexpression\fP\fB"\fP.
See Arithmetic Expressions and the \fBlet\fP command below.
.\"}}}
.\"{{{  [[ expression ]]
.IP "\fB[[\fP \fIexpression\fP \fB]]\fP"
Similar to the \fBtest\fP and \fB[\fP \&... \fB]\fP commands (described later),
with the following exceptions:
.RS
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
Field splitting and file name generation are not performed on
arguments.
.IP \ \ \(bu
The \fB\-a\fP (and) and \fB\-o\fP (or) operators are replaced with
\fB&&\fP and \fB||\fP, respectively.
.IP \ \ \(bu
Operators (\fIe.g.\fP, \fB\-f\fP, \fB=\fP, \fB!\fP, \fIetc.\fP) must be unquoted.
.IP \ \ \(bu
The second operand of \fB!=\fP and \fB=\fP
expressions are patterns (\fIe.g.\fP, the comparison in
.ce
\fB[[ foobar = f*r ]]\fP
d721 13
a733 10
.IP \ \ \(bu
There are two additional binary operators: \fB<\fP and \fB>\fP
which return true if their first string operand is less than,
or greater than, their second string operand, respectively.
.IP \ \ \(bu
The single argument form
of \fBtest\fP, which tests if the argument has non-zero length, is not valid
- explicit operators must be always be used, \fIe.g.\fP, instead of
.ce
\fB[\fP \fIstr\fP \fB]\fP
d735 19
a753 18
.ce
\fB[[ \-n \fP\fIstr\fP\fB ]]\fP
.IP \ \ \(bu
Parameter, command and arithmetic substitutions are performed as
expressions are evaluated and lazy expression evaluation is used for
the \fB&&\fP and \fB||\fP operators.
This means that in the statement
.ce
\fB[[ -r foo && $(< foo) = b*r ]]\fP
the \fB$(< foo)\fP is evaluated if and only if the file \fBfoo\fP exists
and is readable.
.nr PD \n(P2
.RE
.\"}}}
.\"}}}
.\"}}}
.\"{{{  Quoting
.SS Quoting
d755 51
a805 31
specially.
There are three methods of quoting: First, \fB\e\fP quotes
the following character, unless it is at the end of a line, in which
case both the \fB\e\fP and the newline are stripped.
Second, a single quote (\fB'\fP) quotes everything up to the next single
quote (this may span lines).
Third, a double quote (\fB"\fP) quotes all characters,
except \fB$\fP, \fB`\fP and \fB\e\fP, up to the next unquoted double quote.
\fB$\fP and \fB`\fP inside double quotes have their usual meaning (\fIi.e.\fP,
parameter, command or arithmetic substitution) except no field splitting
is carried out on the results of double-quoted substitutions.
If a \fB\e\fP inside a double-quoted string is followed by \fB\e\fP, \fB$\fP,
\fB`\fP or \fB"\fP, it is replaced by the second character; if it is
followed by a newline, both the \fB\e\fP and the newline are stripped;
otherwise, both the \fB\e\fP and the character following are unchanged.
.PP
Note: see POSIX Mode below for a special rule regarding sequences
of the form \fB"\fP...\fB`\fP...\fB\e"\fP...\fB`\fP..\fB"\fP.
.\"}}}
.\"{{{  Aliases
.SS "Aliases"
There are two types of aliases: normal command aliases and tracked
aliases.  Command aliases are normally used as a short hand for a long
or often used command.  The shell expands command aliases (\fIi.e.\fP,
substitutes the alias name for its value) when it reads the first word
of a command.  An expanded alias is re-processed to check for more
aliases.  If a command alias ends in a space or tab, the following word
is also checked for alias expansion.  The alias expansion process stops
when a word that is not an alias is found, when a quoted word is found
or when an alias word that is currently being expanded is found.
.PP
d807 30
a836 30
.ft B
.RS
autoload='typeset \-fu'
.br
functions='typeset \-f'
.br
hash='alias \-t'
.br
history='fc \-l'
.br
integer='typeset \-i'
.br
local='typeset'
.br
login='exec login'
.br
newgrp='exec newgrp'
.br
nohup='nohup '
.br
r='fc \-e \-'
.br
stop='kill \-STOP'
.br
suspend='kill \-STOP $$'
.br
type='whence \-v'
.RE
.ft P
.PP
d838 39
a876 24
command.  The first time the shell does a path search for a command that
is marked as a tracked alias, it saves the full path of the command.
The next time the command is executed, the shell checks the saved path
to see that it is still valid, and if so, avoids repeating the path
search.  Tracked aliases can be listed and created using \fBalias
\-t\fP.  Note that changing the \fBPATH\fP parameter clears the saved
paths for all tracked aliases.  If the \fBtrackall\fP option is set (\fIi.e.\fP,
\fBset \-o trackall\fP or \fBset \-h\fP), the shell tracks all
commands.  This option is set automatically for non-interactive shells.
For interactive shells, only the following commands are automatically
tracked: \fBcat\fP, \fBcc\fP, \fBchmod\fP, \fBcp\fP, \fBdate\fP, \fBed\fP,
\fBemacs\fP, \fBgrep\fP, \fBls\fP, \fBmail\fP, \fBmake\fP, \fBmv\fP,
\fBpr\fP, \fBrm\fP, \fBsed\fP, \fBsh\fP, \fBvi\fP and \fBwho\fP.
.\"}}}
.\"{{{  Substitution
.SS "Substitution"
The first step the shell takes in executing a simple-command is to
perform substitutions on the words of the command.
There are three kinds of substitution: parameter, command and arithmetic.
Parameter substitutions, which are described in detail in the next section,
take the form \fB$name\fP or \fB${\fP...\fB}\fP; command substitutions take
the form \fB$(\fP\fIcommand\fP\fB)\fP or \fB`\fP\fIcommand\fP\fB`\fP;
and arithmetic substitutions take the form \fB$((\fP\fIexpression\fP\fB))\fP.
.PP
d879 39
a917 20
the current value of the \fBIFS\fP parameter.
The \fBIFS\fP parameter specifies a list of characters which 
are used to break a string up into several words;
any characters from the set space, tab and newline that appear in the
IFS characters are called \fIIFS white space\fP.
Sequences of one or more IFS white space characters, in combination with
zero or one non-IFS white space characters delimit a field.
As a special case, leading and trailing IFS white space is stripped (\fIi.e.\fP,
no leading or trailing empty field is created by it); leading or trailing
non-IFS white space does create an empty field.
Example: if \fBIFS\fP is set to `<space>:', the sequence of characters
`<space>A<space>:<space><space>B::D' contains four fields: `A', `B', `' and `D'.
Note that if the \fBIFS\fP parameter is set to the null string, no
field splitting is done; if the parameter is unset, the default value
of space, tab and newline is used.
.PP
The results of substitution are, unless otherwise specified, also subject
to brace expansion and file name expansion (see the relevant sections
below).
.PP
d919 187
a1105 94
command, which is run in a subshell.
For \fB$(\fP\fIcommand\fP\fB)\fP substitutions, normal quoting rules
are used when \fIcommand\fP is parsed, however, for the
\fB`\fP\fIcommand\fP\fB`\fP form, a \fB\e\fP followed by any of
\fB$\fP, \fB`\fP or \fB\e\fP is stripped (a \fB\e\fP followed by any other
character is unchanged).
As a special case in command substitutions, a command of the form
\fB<\fP \fIfile\fP is interpreted to mean substitute the contents
of \fIfile\fP ($(< foo) has the same effect as $(cat foo), but it
is carried out more efficiently because no process is started).
.br
.\"todo: fix this( $(..) parenthesis counting).
NOTE: \fB$(\fP\fIcommand\fP\fB)\fP expressions are currently parsed by
finding the matching parenthesis, regardless of quoting.  This will hopefully
be fixed soon.
.PP
Arithmetic substitutions are replaced by the value of the specified
expression.
For example, the command \fBecho $((2+3*4))\fP prints 14.
See Arithmetic Expressions for a description of an \fIexpression\fP.
.\"}}}
.\"{{{  Parameters
.SS "Parameters"
Parameters are shell variables; they can be assigned values and
their values can be accessed using a parameter substitution.
A parameter name is either one of the special single punctuation or digit
character parameters described below, or a letter followed by zero or more
letters or digits (`_' counts as a letter).
Parameter substitutions take the form \fB$\fP\fIname\fP or
\fB${\fP\fIname\fP\fB}\fP, where \fIname\fP is a parameter name.
If substitution is performed on a parameter that is not set, a null
string is substituted unless the \fBnounset\fP option (\fBset \-o nounset\fP
or \fBset \-u\fP) is set, in which case an error occurs.
.PP
.\"{{{  parameter assignment
Parameters can be assigned values in a number of ways.
First, the shell implicitly sets some parameters like \fB#\fP, \fBPWD\fP,
etc.; this is the only way the special single character parameters are
set.
Second, parameters are imported from the shell's environment at startup.
Third, parameters can be assigned values on the command line, for example,
`\fBFOO=bar\fP' sets the parameter FOO to bar; multiple parameter
assignments can be given on a single command line and they can
be followed by a simple-command, in which case the assignments are
in effect only for the duration of the command (such assignments are
also exported, see below for implications of this).
Note that both the parameter name and the \fB=\fP must be unquoted for
the shell to recognize a parameter assignment.
The fourth way of setting a parameter is with the \fBexport\fP, \fBreadonly\fP
and \fBtypeset\fP commands; see their descriptions in the Command Execution
section.
Fifth, \fBfor\fP and \fBselect\fP loops set parameters as well as
the \fBgetopts\fP, \fBread\fP and \fBset \-A\fP commands.
Lastly, parameters can be assigned values using assignment operators
inside arithmetic expressions (see Arithmetic Expressions below) or
using the \fB${\fP\fIname\fP\fB=\fP\fIvalue\fP\fB}\fP form
of parameter substitution (see below).
.\"}}}
.PP
.\"{{{  environment
Parameters with the export attribute (set using the \fBexport\fP or
\fBtypeset \-x\fP commands, or by parameter assignments followed by simple
commands) are put in the environment (see \fIenviron\fP(5)) of commands
run by the shell as \fIname\fP\fB=\fP\fIvalue\fP pairs.
The order in which parameters appear in the environment of a command
is unspecified.
When the shell starts up, it extracts parameters and their values from its
environment and automatically sets the export attribute for those parameters.
.\"}}}
.\"{{{  ${name[:][-+=?]word}
.PP
Modifiers can be applied to the \fB${\fP\fIname\fP\fB}\fP form of parameter
substitution:
.IP \fB${\fP\fIname\fP\fB:-\fP\fIword\fP\fB}\fP
if \fIname\fP is set and not null, it is substituted, otherwise \fIword\fP is
substituted.
.IP \fB${\fP\fIname\fP\fB:+\fP\fIword\fP\fB}\fP
if \fIname\fP is set and not null, \fIword\fP is substituted, otherwise nothing is substituted.
.IP \fB${\fP\fIname\fP\fB:=\fP\fIword\fP\fB}\fP
if \fIname\fP is set and not null, it is substituted, otherwise it is
assigned \fIword\fP and the resulting value of \fIname\fP is substituted.
.IP \fB${\fP\fIname\fP\fB:?\fP\fIword\fP\fB}\fP
if \fIname\fP is set and not null, it is substituted, otherwise \fIword\fP
is printed on standard error (preceded by \fIname\fP:) and an error occurs
(normally causing termination of a shell script, function or \&.-script).
If word is omitted the string `parameter null or not set' is used instead.
.PP
In the above modifiers, the \fB:\fP can be omitted, in which case the
conditions only depend on \fIname\fP being set (as opposed to set and
not null).
If \fIword\fP is needed, parameter, command, arithmetic and tilde substitution
are performed on it; if \fIword\fP is not needed, it is not evaluated.
.\"}}}
.PP
d1107 39
a1145 24
.\"{{{  ${#name}
.IP \fB${#\fP\fIname\fP\fB}\fP
The number of positional parameters if \fIname\fP is \fB*\fP, \fB@@\fP or
is not specified,
or the length of the string value of parameter \fIname\fP.
.\"}}}
.\"{{{  ${#name[*]}, ${#name[@@]}
.IP "\fB${#\fP\fIname\fP\fB[*]}\fP, \fB${#\fP\fIname\fP\fB[@@]}\fP"
The number of elements in the array \fIname\fP.
.\"}}}
.\"{{{  ${name#pattern}, ${name##pattern}
.IP "\fB${\fP\fIname\fP\fB#\fP\fIpattern\fP\fB}\fP, \fB${\fP\fIname\fP\fB##\fP\fIpattern\fP\fB}\fP"
If \fIpattern\fP matches the beginning of the value of parameter \fIname\fP,
the matched text is deleted from the result of substitution.  A single
\fB#\fP results in the shortest match, two \fB#\fP's results in the
longest match.
.\"}}}
.\"{{{  ${name%pattern}, ${name%%pattern}
.IP "\fB${\fP\fIname\fP\fB%\fP\fIpattern\fP\fB}\fP, \fB${\fP\fIname\fP\fB%%\fP\fIpattern\fP\fB}\fP"
Like \fB${\fP..\fB#\fP..\fB}\fP substitution, but it deletes from the end of the
value.
.\"}}}
.\"{{{  special shell parameters
.PP
d1148 60
a1207 62
.\"{{{  !
.IP \fB!\fP
Process id of the last background process started.  If no background
processes have been started, the parameter is not set.
.\"}}}
.\"{{{  #
.IP \fB#\fP
The number of positional parameters (\fIi.e.\fP, \fB$1\fP, \fB$2\fP,
\fIetc.\fP).
.\"}}}
.\"{{{  $
.IP \fB$\fP
The process ID of the shell, or the PID of the original shell if
it is a subshell.
.\"}}}
.\"{{{  -
.IP \fB\-\fP
The concatenation of the current single letter options
(see \fBset\fP command below for list of options).
.\"}}}
.\"{{{  ?
.IP \fB?\fP
The exit status of the last non-asynchronous command executed.
If the last command was killed by a signal, \fB$?\fP is set to 128 plus
the signal number.
.\"}}}
.\"{{{  0
.IP "\fB0\fP"
The name the shell was invoked with (\fIi.e.\fP, \fBargv[0]\fP), or the
\fBcommand-name\fP if it was invoked with the \fB\-c\fP option and the
\fBcommand-name\fP was supplied, or the \fIfile\fP argument, if it was
supplied.
If the \fBposix\fP option is not set, \fB$0\fP is the name of the current
function or script.
.\"}}}
.\"{{{  1-9
.IP "\fB1\fP ... \fB9\fP"
The first nine positional parameters that were supplied to the shell,
function or \fB.\fP-script.
Further positional parameters may be accessed using
\fB${\fP\fInumber\fP\fB}\fP.
.\"}}}
.\"{{{  *
.IP \fB*\fP
All positional parameters (except parameter 0), 
\fIi.e.\fP, \fB$1 $2 $3\fP....
If used outside of double quotes, parameters are separate words
(which are subjected to word splitting); if used within double quotes,
parameters are separated by the first character of the \fBIFS\fP parameter
(or the empty string if \fBIFS\fP is null).
.\"}}}
.\"{{{  @@
.IP \fB@@\fP
Same as \fB$*\fP, unless it is used inside double quotes, in which case
a separate word is generated for each positional parameter \- if there
are no positional parameters, no word is generated ("$@@" can be used
to access arguments, verbatim, without loosing null arguments or
splitting arguments with spaces).
.\"}}}
.\"}}}
.\"{{{  general shell parameters
.PP
d1209 119
a1327 106
.\"{{{  _
.IP "\fB_\fP \fI(underscore)\fP"
When an external command is executed by the shell, this parameter is
set in the environment of the new process to the path of the executed
command.
In interactive use, this parameter is also set in the parent shell to
the last word of the previous command.
When \fBMAILPATH\fP messages are evaluated, this parameter contains
the name of the file that changed (see \fBMAILPATH\fP parameter below).
.\"}}}
.\"{{{  CDPATH
.IP \fBCDPATH\fP
Search path for the \fBcd\fP built-in command.  Works the same way as
\fBPATH\fP for those directories not beginning with \fB/\fP in \fBcd\fP
commands.
Note that if CDPATH is set and does not contain \fB.\fP nor an empty path,
the current directory is not searched.   Also, the \fBcd\fP built-in command
will display the resulting directory when a match is found in any search path
other than the than the empty path.
.\"}}}
.\"{{{  COLUMNS
.IP \fBCOLUMNS\fP
Set to the number of columns on the terminal or window.
Currently set to the \fBcols\fP value as reported by \fIstty\fP(1) if that
value is non-zero.
This parameter is used by the interactive line editing modes, and by
\fBselect\fP, \fBset \-o\fP and \fBkill \-l\fP commands
to format information in columns.
.\"}}}
.\"{{{  EDITOR
.IP \fBEDITOR\fP
If the \fBVISUAL\fP parameter is not set, this parameter controls the
command line editing mode for interactive shells.
See \fBVISUAL\fP parameter below for how this works.
.\"}}}
.\"{{{  ENV
.IP \fBENV\fP
If this parameter is found to be set after any profile files are
executed, the expanded value is used as a shell start-up file.  It
typically contains function and alias definitions.
.\"}}}
.\"{{{  ERRNO
.IP \fBERRNO\fP
Integer value of the shell's errno variable \(em indicates the reason
the last system call failed.
.\" todo: ERRNO variable
.sp
Not implemented yet.
.\"}}}
.\"{{{  EXECSHELL
.IP \fBEXECSHELL\fP
If set, this parameter is assumed to contain the shell that is to be
used to execute commands that \fIexecve\fP(2) fails to execute and
which do not start with a `\fB#!\fP \fIshell\fP' sequence.
.\"}}}
.\"{{{  FCEDIT
.IP \fBFCEDIT\fP
The editor used by the \fBfc\fP command (see below).
.\"}}}
.\"{{{  FPATH
.IP \fBFPATH\fP
Like \fBPATH\fP, but used when an undefined function is executed to locate
the file defining the function.
It is also searched when a command can't be found using \fBPATH\fP.
See Functions below for more information.
.\"}}}
.\"{{{  HISTFILE
.IP \fBHISTFILE\fP
The name of the file used to store history.
When assigned to, history is loaded from the specified file.
Also, several invocations of the
shell running on the same machine will share history if their
\fBHISTFILE\fP parameters all point at the same file.
.br
NOTE: if HISTFILE isn't set, no history file is used.  This is
different from the original Korn shell, which uses \fB$HOME/.sh_history\fP;
in future, pdksh may also use a default history file.
.\"}}}
.\"{{{  HISTSIZE
.IP \fBHISTSIZE\fP
The number of commands normally stored for history, default 128.
.\"}}}
.\"{{{  HOME
.IP \fBHOME\fP
The default directory for the \fBcd\fP command and the value
substituted for an unqualified \fB~\fP (see Tilde Expansion below).
.\"}}}
.\"{{{  IFS
.IP \fBIFS\fP
Internal field separator, used during substitution and by the \fBread\fP
command, to split values into distinct arguments; normally set to
space, tab and newline.  See Substitution above for details.
.br
\fBNote:\fP this parameter is not imported from the environment
when the shell is started.
.\"}}}
.\"{{{  KSH_VERSION
.IP \fBKSH_VERSION\fP
The version of shell and the date the version was created (readonly).
See also the version commands in Emacs Interactive Input Line Editing
and Vi Interactive Input Line Editing, below.
.\"}}}
.\"{{{  SH_VERSION
.\"}}}
.\"{{{  LINENO
.IP \fBLINENO\fP
d1329 115
a1443 122
executed.
.\" todo: LINENO variable
.sp
Not implemented yet.
.\"}}}
.\"{{{  LINES
.IP \fBLINES\fP
Set to the number of lines on the terminal or window.
.\"Currently set to the \fBrows\fP value as reported by \fIstty\fP(1) if that
.\"value is non-zero.
.\" todo: LINES variable
.sp
Not implemented yet.
.\"}}}
.\"{{{  MAIL
.IP \fBMAIL\fP
If set, the user will be informed of the arrival of mail in the named
file.  This parameter is ignored if the \fBMAILPATH\fP parameter is set.
.\"}}}
.\"{{{  MAILCHECK
.IP \fBMAILCHECK\fP
How often, in seconds, the shell will check for mail in the file(s)
specified by \fBMAIL\fP or \fBMAILPATH\fP.  If 0, the shell checks
before each prompt.  The default is 600 (10 minutes).
.\"}}}
.\"{{{  MAILPATH
.IP \fBMAILPATH\fP
A list of files to be checked for mail.  The list is colon separated,
and each file may be followed by a \fB?\fP and a message to be printed
if new mail has arrived.  Command, parameter and arithmetic substitution is
performed on the message, and, during substitution, the parameter \fB$_\fP
contains the name of the file.
The default message is \fByou have mail in $_\fP.
.\"}}}
.\"{{{  OLDPWD
.IP \fBOLDPWD\fP
The previous working directory.
Unset if \fBcd\fP has not successfully changed directories since the
shell started, or if the shell doesn't know where it is.
.\"}}}
.\"{{{  OPTARG
.IP \fBOPTARG\fP
When using \fBgetopts\fP, it contains the argument for a parsed option,
if it requires one.
.\"}}}
.\"{{{  OPTIND
.IP \fBOPTIND\fP
The index of the last argument processed when using \fBgetopts\fP.
Assigning 1 to this parameter causes \fBgetopts\fP to
process arguments from the beginning the next time it is invoked.
.\"}}}
.\"{{{  PATH
.IP \fBPATH\fP
A colon separated list of directories that are searched when looking
for commands and \fB.\fP'd files.
An empty string resulting from a leading or trailing colon, or two adjacent
colons is treated as a `.', the current directory.
.\"}}}
.\"{{{  POSIXLY_CORRECT
.IP \fBPOSIXLY_CORRECT\fP
If set, this parameter causes the \fBposix\fP option to be enabled.
See POSIX Mode below.
.\"}}}
.\"{{{  PPID
.IP \fBPPID\fP
The process ID of the shell's parent (readonly).
.\"}}}
.\"{{{  PS1
.IP \fBPS1\fP
\fBPS1\fP is the primary prompt for interactive shells.
Parameter, command and arithmetic substitutions are performed, and
\fB!\fP is replaced with the current command number (see \fBfc\fP
command below).  A literal ! can be put in the prompt by placing !! in PS1.
Note that since the command line editors try to figure out how long the
prompt is (so they know how far it is to edge of the screen),
escape codes in the prompt tend to mess things up.
You can tell the shell not to count certain sequences (such as escape codes)
by prefixing your prompt with a non-printing character (such as control-A)
followed by a carriage return and then delimiting the escape codes with
this non-printing character.
If you don't have any non-printing characters, you're out of luck...
BTW, don't blame me for this hack; it's in the original ksh.
Default is `\fB$\ \fP' for non-root users, `\fB#\ \fP' for root..
.\"}}}
.\"{{{  PS2
.IP \fBPS2\fP
Secondary prompt string, by default `\fB>\fP ', used when more input is
needed to complete a command.
.\"}}}
.\"{{{  PS3
.IP \fBPS3\fP
Prompt used by \fBselect\fP statement when reading a menu selection.
Default is `\fB#?\ \fP'.
.\"}}}
.\"{{{  PS4
.IP \fBPS4\fP
Used to prefix commands that are printed during execution tracing
(see \fBset \-x\fP command below).
Parameter, command and arithmetic substitutions are performed
before it is printed.
Default is `\fB+\ \fP'.
.\"}}}
.\"{{{  PWD
.IP \fBPWD\fP
The current working directory.  Maybe unset or null if shell doesn't
know where it is.
.\"}}}
.\"{{{  RANDOM
.IP \fBRANDOM\fP
A simple random number generator.  Every time \fBRANDOM\fP is
referenced, it is assigned the next number in a random number series.
The point in the series can be set by assigning a number to
\fBRANDOM\fP (see \fIrand\fP(3)).
.\"}}}
.\"{{{  REPLY
.IP \fBREPLY\fP
Default parameter for the \fBread\fP command if no names are given.
Also used in \fBselect\fP loops to store the value that is read from
standard input.
.\"}}}
.\"{{{  SECONDS
.IP \fBSECONDS\fP
d1445 64
a1508 50
assigned an integer value, the number of seconds since the assignment plus
the value that was assigned.
.\"}}}
.\"{{{  TMOUT
.IP \fBTMOUT\fP
If set to a positive integer in an interactive shell, it specifies
the maximum number of seconds the shell will wait for input after
printing the primary prompt (\fBPS1\fP).  If the time is exceeded, the
shell exits.
.\"}}}
.\"{{{  TMPDIR
.IP \fBTMPDIR\fP
The directory shell temporary files are created in.  If this parameter
is not set, or does not contain the absolute path of a writable
directory, temporary files are created in \fB/tmp\fP.
.\"}}}
.\"{{{  VISUAL
.IP \fBVISUAL\fP
If set, this parameter controls the command line editing mode for
interactive shells.  If the last component of the path specified in this
parameter contains the string \fBvi\fP, \fBemacs\fP or \fBgmacs\fP, the
vi, emacs or gmacs (Gosling emacs) editing mode is enabled, respectively.
.\"}}}
.\"}}}
.\"}}}
.\"{{{  Tilde Expansion
.SS "Tilde Expansion"
Tilde expansion, which is done in parallel with parameter substitution,
is done on words starting with an unquoted \fB~\fP.  The characters
following the tilde, up to the first \fB/\fP, if any, are assumed to be
a login name.  If the login name is empty, \fB+\fP or \fB\-\fP, the
value of the \fBHOME\fP, \fBPWD\fP, or \fBOLDPWD\fP parameter is
substituted, respectively.  Otherwise, the password file is searched for
the login name, and the tilde expression is substituted with the
user's home directory.  If the login name is not found in the password
file or if any quoting or parameter substitution occurs in the login name,
no substitution is performed.
.PP
In parameter assignments (those preceding a simple-command or those
occurring in the arguments of \fBalias\fP, \fBexport\fP, \fBreadonly\fP,
and \fBtypeset\fP), tilde expansion is done after any unquoted colon
(\fB:\fP), and login names are also delimited by colons.
.PP
The home directory of previously expanded login names are cached and
re-used.  The \fBalias \-d\fP command may be used to list, change and
add to this cache (\fIe.g.\fP, `alias \-d fac=/usr/local/facilities; cd
~fac/bin').
.\"}}}
.\"{{{  Brace Expansion
.SS "Brace Expansion (alternation)"
d1510 7
a1516 3
.RS
\fIprefix\fP\fB{\fP\fIstr\fP1\fB,\fP...\fB,\fP\fIstr\fPN\fB}\fP\fIsuffix\fP
.RE
d1518 12
a1529 2
\fIprefix\fP, \fIstr\fPi and \fIsuffix\fP
(\fIe.g.\fP, `a{c,b{X,Y},d}e' expands to four word: ace, abXe, abYe, and ade).
d1531 40
a1570 26
words are not sorted.
Brace expressions must contain an unquoted comma (\fB,\fP) for expansion
to occur (\fIi.e.\fP, \fB{}\fP and \fB{foo}\fP are not expanded).
Brace expansion is carried out after parameter substitution and before
file name generation.
.\"}}}
.\"{{{  File Name Patterns
.SS "File Name Patterns"
.PP
A file name pattern is a word containing one or more unquoted \fB?\fP or
\fB*\fP characters or \fB[\fP..\fB]\fP sequences.  Once brace expansion has
been performed, the shell replaces file name patterns with the sorted names
of all the files that match the pattern (if no files match, the word is
left unchanged).  The pattern elements have the following meaning:
.IP \fB?\fP
matches any single character.
.IP \fB*\fP
matches any sequence of characters.
.IP \fB[\fP..\fB]\fP
matches any of the characters inside the brackets.  Ranges of characters
can be specified by separating two characters by a \fB\-\fP, \fIe.g.\fP,
\fB[a0\-9]\fP matches the letter \fBa\fP or any digit.
In order to represent itself, a
\fB\-\fP must either be quoted or the first or last character in the character
list.  Similarly, a \fB]\fP must be quoted or the first character in the list
if it is represent itself instead of the end of the list.  Also, a \fB!\fP
d1573 144
a1716 64
.IP \fB[!\fP..\fB]\fP
like \fB[\fP..\fB]\fP, except it matches any character not inside the brackets.
.IP "\fB*(\fP\fIpattern\fP\fB|\fP ... \fP|\fP\fIpattern\fP\fB)\fP"
matches any string of characters that matches zero or more occurances
of the specified patterns.
Example: the pattern \fB*(foo|bar)\fP matches the strings
`', `foo', `bar', `foobarfoo', \fIetc.\fP.
.IP "\fB+(\fP\fIpattern\fP\fB|\fP ... \fP|\fP\fIpattern\fP\fB)\fP"
matches any string of characters that matches one or more occurances
of the specified patterns.
Example: the pattern \fB+(foo|bar)\fP matches the strings
`foo', `bar', `foobarfoo', \fIetc.\fP.
.IP "\fB?(\fP\fIpattern\fP\fB|\fP ... \fP|\fP\fIpattern\fP\fB)\fP"
matches the empty string or a string that matches one of the
specified patterns.
Example: the pattern \fB?(foo|bar)\fP only matches the strings
`', `foo' and `bar'.
.IP "\fB@@(\fP\fIpattern\fP\fB|\fP ... \fP|\fP\fIpattern\fP\fB)\fP"
matches a string that matches one of the
specified patterns.
Example: the pattern \fB@@(foo|bar)\fP only matches the strings
`foo' and `bar'.
.IP "\fB!(\fP\fIpattern\fP\fB|\fP ... \fP|\fP\fIpattern\fP\fB)\fP"
matches any string that does not match one of the specified
patterns.
Examples: the pattern \fB!(foo|bar)\fP matches all strings except
`foo' and `bar'; the pattern \fB!(*)\fP matches no strings;
the pattern \fB!(?)*\fP matches all strings (think about it).
.PP
Note that pdksh currently never matches \fB.\fP and \fB..\fP, but the original
ksh, Bourne sh and bash do, so this may have to change (too bad).
.PP
Note that none of the above pattern elements match either a period (\fB.\fP)
at the start of a file name or a slash (\fB/\fP), even if they are explicitly
used in a \fB[\fP..\fB]\fP sequence; also, the names \fB.\fP and \fB..\fP
are never matched, even by the pattern \fB.*\fP.
.PP
If the \fBmarkdirs\fP option is set, any directories that result from
file name generation are marked with a trailing \fB/\fP.
.PP
.\" todo: implement this ([[:alpha:]], \fIetc.\fP)
The POSIX character classes (\fIi.e.\fP,
\fB[:\fP\fIclass-name\fP\fB:]\fP inside a \fB[\fP..\fB]\fP expression)
are not yet implemented.
.\"}}}
.\"{{{  Input/Output Redirection
.SS "Input/Output Redirection"
When a command is executed, its standard input, standard output and
standard error (file descriptors 0, 1 and 2, respectively) are normally
inherited from the shell.
Three exceptions to this are commands in pipelines, for which standard input
and/or standard output are those set up by the pipeline, asynchronous commands
created when job control is disabled, for which standard input is initially
set to be from \fB/dev/null\fP, and commands for which any of the following
redirections have been specified:
.IP "\fB>\fP \fIfile\fP"
standard output is redirected to \fIfile\fP.  If \fIfile\fP does not exist,
it is created; if it does exist, is a regular file and the \fBnoclobber\fP
option is set, an error occurs, otherwise the file is truncated.
Note that this means the command \fIcmd < foo > foo\fP will open
\fIfoo\fP for reading and then truncate it when it opens it for writing,
before \fIcmd\fP gets a chance to actually read \fIfoo\fP.
.IP "\fB>|\fP \fIfile\fP"
same as \fB>\fP, except the file is truncated, even if the \fBnoclobber\fP
d1718 73
a1790 45
.IP "\fB>>\fP \fIfile\fP"
same as \fB>\fP, except the file an existing file is appended to instead
of being truncated.  Also, the file is opened in append mode, so writes
always go to the end of the file (see \fIopen\fP(2)).
.IP "\fB<\fP \fIfile\fP"
standard input is redirected from \fIfile\fP, which is opened for reading.
.IP "\fB<>\fP \fIfile\fP"
same as \fB<\fP, except the file is opened for reading and writing.
.IP "\fB<<\fP \fImarker\fP"
after reading the command line containing this kind of redirection (called a
here document), the shell copies lines from the command source into a temporary
file until a line matching \fImarker\fP is read.
When the command is executed, standard input is redirected from the temporary
file.
If \fImarker\fP contains no quoted characters, the contents of the
temporary file are processed as if enclosed in double quotes each time
the command is executed, so parameter, command and arithmetic substitutions
are performed, along with backslash (\fB\e\fP) escapes for
\fB$\fP, \fB`\fP, \fB\e\fP and \fB\enewline\fP.
If multiple here documents are used on the same command line, they are
saved in order.
.IP "\fB<<-\fP \fImarker\fP"
same as \fB<<\fP, except leading tabs are stripped from lines in the
here document.
.IP "\fB<&\fP \fIfd\fP"
standard input is duplicated from file descriptor \fIfd\fP.
\fIfd\fP can be a single digit, indicating the number of an existing
file descriptor, the letter \fBp\fP, indicating the file descriptor
associated with the output of the current co-process, or
the character \fB\-\fP, indicating standard input is to be closed.
.IP "\fB>&\fP \fIfd\fP"
same as \fB<&\fP, except the operation is done on standard output.
.PP
In any of the above redirections, the file descriptor that is redirected
(\fIi.e.\fP, standard input or standard output) can be explicitly given by
preceding the redirection with a single digit.
Parameter, command and arithmetic substitutions, tilde substitutions and
(if the shell is interactive) file name generation are all performed
on the \fIfile\fP, \fImarker\fP and \fIfd\fP arguments of redirections.
Note however, that the results of any file name generation are only used
if a single file is matched; if multiple files match, the word with the
unexpanded file name generation characters is used.
Note that in restricted shells, redirections which can create files cannot
be used.
.PP
d1792 10
a1801 7
compound-commands (\fBif\fP statements, \fIetc.\fP), any redirections must
appear at the end.
Redirections are processed after pipelines are created and in the order they
are given, so
.RS
\fBcat /foo/bar 2>&1 > /dev/null | cat \-n\fP
.RE
d1803 17
a1819 14
.\"}}}
.\"{{{  Arithmetic Expressions
.SS "Arithmetic Expressions"
Integer arithmetic expressions can be used
with the \fBlet\fP command,
inside \fB$((\fP..\fB))\fP expressions,
inside array references (\fIe.g.\fP, \fIname\fP\fB[\fP\fIexpr\fP\fB]\fP),
as numeric arguments to the \fBtest\fP command,
and as the value of an assignment to an integer parameter.
.PP
Expression may contain alpha-numeric parameter identifiers, array
references, and integer constants and may be combined with the
following C operators (listed and grouped in increasing order of precedence).
.TP
d1821 5
a1825 2
\fB+ \- ! ~ ++ --\fP
.TP
d1827 35
a1861 27
\fB,\fP
.br
\fB= *= /= %= += \-= <<= >>= &= ^= |=\fP
.br
\fB||\fP
.br
\fB&&\fP
.br
\fB|\fP
.br
\fB^\fP
.br
\fB&\fP
.br
\fB== !=\fP
.br
\fB< <= >= >\fP
.br
\fB<< >>\fP
.br
\fB+ \-\fP
.br
\fB* / %\fP
.TP
Ternary operator:
\fB?:\fP (precedence is immediately higher than assignment)
.TP
d1863 5
a1867 2
\fB( )\fP
.PP
d1869 7
a1875 3
\fIbase\fP\fB#\fP\fInumber\fP, where \fIbase\fP is a decimal integer specifying
the base, and \fInumber\fP is a number in the specified base.
.LP
d1877 96
a1972 71
.RS
.IP "unary \fB+\fP"
result is the argument (included for completeness).
.IP "unary \fB\-\fP"
negation.
.IP "\fB!\fP"
logical not; the result is 1 if argument is zero, 0 if not.
.IP "\fB~\fP"
arithmetic (bit-wise) not.
.IP "\fB++\fP"
increment; must be applied to a parameter (not a literal or other
expression) - the parameter is incremented by 1.
When used as a prefix operator, the result is the incremented value of
the parameter, when used as a postfix operator, the result is the
original value of the parameter.
.IP "\fB++\fP"
similar to \fB++\fP, except the paramter is decremented by 1.
.IP "\fB,\fP"
separates two arithmetic expressions; the left hand side is evaluated first,
then the right.  The result is value of the expression on the right hand side.
.IP "\fB=\fP"
assignment; variable on the left is set to the value on the right.
.IP "\fB*= /= %= += \-= <<= >>= &= ^= |=\fP"
assignment operators; \fI<var> <op>\fP\fB=\fP \fI<expr>\fP is the same as
\fI<var>\fP \fB=\fP \fI<var> <op>\fP \fB(\fP \fI<expr>\fP \fB)\fP.
.IP "\fB||\fP"
logical or; the result is 1 if either argument is non-zero, 0 if not.
The right argument is evaluated only if the left argument is zero.
.IP "\fB&&\fP"
logical and; the result is 1 if both arguments are non-zero, 0 if not.
The right argument is evaluated only if the left argument is non-zero.
.IP "\fB|\fP"
arithmetic (bit-wise) or.
.IP "\fB^\fP"
arithmetic (bit-wise) exclusive-or.
.IP "\fB&\fP"
arithmetic (bit-wise) and.
.IP "\fB==\fP"
equal; the result is 1 if both arguments are equal, 0 if not.
.IP "\fB!=\fP"
not equal; the result is 0 if both arguments are equal, 1 if not.
.IP "\fB<\fP"
less than; the result is 1 if the left argument is less than the right,
0 if not.
.IP "\fB<= >= >\fP"
less than or equal, greater than or equal, greater than.  See <.
.IP "\fB<< >>\fP"
shift left (right); the result is the left argument with its bits shifted
left (right) by the amount given in the right argument.
.IP "\fB+ - * /\fP"
addition, subtraction, multiplication, and division.
.IP "\fB%\fP"
remainder; the result is the remainder of the division of the left argument
by the right.  The sign of the result is unspecified if either argument
is negative.
.IP "\fI<arg1>\fP \fB?\fP \fI<arg2>\fP \fB:\fP \fI<arg3>\fP"
if \fI<arg1>\fP is non-zero, the result is \fI<arg2>\fP,
otherwise \fI<arg3>\fP.
.RE
.\"}}}
.\"{{{  Co-Processes
.SS "Co-Processes"
A co-process, which is a pipeline created with the \fB|&\fP operator,
is an asynchronous process that the shell can both write to
(using \fBprint \-p\fP) and read from (using \fBread \-p\fP).
The input and output of the co-process can also be manipulated
using \fB>&p\fP and \fB<&p\fP redirections, respectively.
Once a co-process has been started, another can't be started until
the co-process exits, or until the co-process input has been redirected using
an \fBexec \fP\fIn\fP\fB>&p\fP redirection.
If a co-process's input is redirected in this way, the next 
d1975 3
a1977 2
\fBexec \fP\fIn\fP\fB<&p\fP redirection.
.PP
d1979 82
a2060 60
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
the only way to close the co-process input (so the co-process reads
an end-of-file) is to redirect the input to a numbered file descriptor
and then close that file descriptor (\fIe.g.\fP, \fBexec 3>&p;exec 3>&-\fP).
.IP \ \ \(bu
in order for co-processes to share a common output, the shell must keep
the write portion of the output pipe open.
This means that end of file will not be detected until all co-processes
sharing the co-process output have exited (when they all exit, the shell
closes its copy of the pipe).
This can be avoided by redirecting the output to a numbered
file descriptor (as this also causes the shell to close its copy).
Note that this behaviour is slightly different from the original Korn shell
which closes its copy of the write portion of the co-process output when the
most recently started co-process (instead of when all sharing co-processes)
exits.
.IP \ \ \(bu
\fBprint \-p\fP will ignore SIGPIPE signals during writes
if the signal is not being trapped or ignored; the same is not true if
the co-process input has been duplicated to another file descriptor and
\fBprint \-u\fP\fIn\fP is used.
.nr PD \n(P2
.\"}}}
.\"{{{  Functions
.SS "Functions"
Functions are defined using either Korn shell \fBfunction\fP \fIname\fP
syntax or the Bourne/POSIX shell \fIname\fP\fB()\fP syntax
(see below for the difference between the two forms).
Functions are like \fB.\fP-scripts in that they are executed in
the current environment, however, unlike \fB.\fP-scripts, shell arguments
(\fIi.e.\fP, positional parameters, \fB$1\fP, \fIetc.\fP) are never visible
inside them.
When the shell is determining the location of a command, functions are
searched after special built-in commands, and before regular and non-regular
built-ins, and before the \fBPATH\fP is searched.
.PP
An existing function may be deleted using \fBunset \-f\fP \fIfunction-name\fP.
A list of functions can be obtained using \fBtypeset +f\fP and the
function definitions can be listed using \fBtypeset \-f\fP.
\fBautoload\fP (which is an alias for \fBtypeset \-fu\fP) may be used to
create undefined functions; when an undefined function is executed, the
shell searches the path specified in the \fBFPATH\fP parameter for a file
with the same name as the function, which, if found is read and executed.
If after executing the file, the named function is found to be defined, the
function is executed, otherwise, the normal command search is continued
(\fIi.e.\fP, the shell searches the regular built-in command table
and \fBPATH\fP).
Note that if a command is not found using \fBPATH\fP, an attempt is
made to autoload a function using \fBFPATH\fP (this is an undocumented
feature of the original Korn shell).
.PP
Functions can have two attributes, trace and export, which can be set
with \fBtypeset \-ft\fP and \fBtypeset \-fx\fP, respectively.
When a traced function is executed, the shell's \fBxtrace\fP option is turned
on for the functions duration, otherwise the \fBxtrace\fP option is turned off.
The export attribute of functions is currently not used.  In the original
Korn shell, exported functions are visible to shell scripts that are executed.
.PP
d2063 38
a2100 32
If this is not the desired effect, the \fBtypeset\fP command can be used
inside a function to create a local parameter.
Note that special parameters (\fIe.g.\fP, \fB$$\fP, \fB$!\fP) can't be
scoped in this way.
.PP
The exit status of a function is that of the last command executed in
the function.
A function can be made to finish immediately using the \fBreturn\fP command;
this may also be used to explicitly specify the exit status.
.PP
Functions defined with the \fBfunction\fP reserved word are
treated differently in the following ways from functions defined with
the \fB()\fP notation:
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
the \fB$0\fP parameter is set to the name of the function
(Bourne-style functions leave \fB$0\fP untouched).
.IP \ \ \(bu
parameter assignments preceding function calls are not kept in
the shell environment
(executing Bourne-style functions will keep assignments).
.IP \ \ \(bu
\fBOPTIND\fP is saved/reset and restored on entry and exit from the function
so \fBgetopts\fP can be used properly both inside and outside the function
(Bourne-style functions leave \fBOPTIND\fP untouched, so using \fBgetopts\fP
inside a function interferes with using \fBgetopts\fP outside the function).
.nr PD \n(P2
In the future, the following differences will also be added:
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
d2102 4
a2105 5
functions.
This will mean that traps set inside a function will not affect the shell's
traps and signals that are not ignored in the shell (but may be trapped) will
have their default effect in a function.
.IP \ \ \(bu
d2108 3
a2110 4
.nr PD \n(P2
.\"}}}
.\"{{{  POSIX mode
.SS "POSIX Mode"
d2112 35
a2146 20
behaviour is contrary either to the original Korn shell behaviour or to
user convenience.
How the shell behaves in these cases is determined by the state of
the posix option (\fBset \-o posix\fP) \(em if it is on, the POSIX behaviour
is followed, otherwise it is not.
The \fBposix\fP option is set automatically when the shell starts up
if the environment contains the \fBPOSIXLY_CORRECT\fP parameter.
(The shell can also be compiled so that it is in POSIX mode by default,
however this is usually not desirable).
.PP
The following is a list of things that are affected by the state of
the \fBposix\fP option:
.nr P2 \n(PD
.nr PD 0
.IP \ \ \(bu
\fB\e"\fP inside double quoted \fB`\fP..\fB`\fP command substitutions:
in posix mode, the \fB\e"\fP is interpreted when the command is interpreted;
in non-posix mode, the backslash is stripped before the command substitution
is interpreted.  For example, \fBecho "`echo \e"hi\e"`"\fP produces `"hi"' in
posix mode, `hi' in non-posix mode.  To avoid problems, use the \fB$(...\fP)
d2148 96
a2243 60
.IP \ \ \(bu
\fBkill \-l\fP output: in posix mode, signal names are listed one a single line;
in non-posix mode, signal numbers, names and descriptions are printed in
columns.
In future, a new option (\fB\-v\fP perhaps) will be added to distinguish
the two behaviours.
.IP \ \ \(bu
\fBfg\fP exit status: in posix mode, the exit status is 0 if no errors occur;
in non-posix mode, the exit status is that of the last foregrounded job.
.IP \ \ \(bu
\fBgetopts\fP: in posix mode, options must start with a \fB\-\fP; in non-posix
mode, options can start with either \fB\-\fP or \fB+\fP.
.IP \ \ \(bu
brace expansion (also known as alternation): in posix mode, brace expansion
is disabled; in non-posix mode, brace expansion enabled.
Note that \fBset \-o posix\fP (or setting the \fBPOSIXLY_CORRECT\fP parameter)
automatically turns the \fBbraceexpand\fP option off, however it can be
explicitly turned on later.
.IP \ \ \(bu
\fBset \-\fP: in posix mode, this does not clear the \fBverbose\fP or
\fBxtrace\fP options; in non-posix mode, it does.
.IP \ \ \(bu
\fBset\fP exit status: in posix mode, the exit status of set is 0
if there are no errors; in non-posix mode, the exit status is that of
any command substitutions performed in generating the set command.
For example, `\fBset \-\- `false`; echo $?\fP' prints 0 in posix mode,
1 in non-posix mode.  This construct is used in most shell scripts that
use the old \fIgetopt\fP(1) command.
.IP \ \ \(bu
argument expansion of \fBalias\fP, \fBexport\fP, \fBreadonly\fP, and
\fBtypeset\fP commands: in posix mode, normal argument expansion done;
in non-posix mode, field splitting, file globing, brace expansion and
(normal) tilde expansion are turned off, and assignment tilde expansion
is turned on.
.IP \ \ \(bu
signal specification: in posix mode, signals can be specified as digits only
if signal numbers match POSIX values (\fIi.e.\fP, HUP=1, INT=2, QUIT=3, ABRT=6,
KILL=9, ALRM=14, and TERM=15); in non-posix mode, signals can be always digits.
.IP \ \ \(bu
alias expansion: in posix mode, alias expansion is only carried out when
reading command words; in non-posix mode, alias expansion is carried out
on any word following an alias that ended in a space.
For example, the following for loop
.RS
.ft B
alias a='for ' i='j'
.br
a i in 1 2; do echo i=$i j=$j; done
.ft P
.RE
uses parameter \fBi\fP in posix mode, \fBj\fP in non-posix mode.
.IP \ \ \(bu
test: in posix mode, the expression "\fB-t\fP" (preceded by
some number of "\fB!\fP" arguments) is always true as it is a non-zero length
string; in non-posix mode, it tests if file descriptor 1 is a tty (\fIi.e.\fP,
the \fIfd\fP argument to the \fB-t\fP test may be left out and defaults to 1).
.nr PD \n(P2
.\"}}}
.\"{{{  Command Execution (built-in commands)
.SS "Command Execution"
d2245 18
a2262 14
assignments, the type of command is determined: a special built-in,
a function, a regular built-in or the name of a file to execute found
using the \fBPATH\fP parameter.
The checks are made in the above order.
Special built-in commands differ from other commands in that 
the \fBPATH\fP parameter is not used to find them, an error
during their execution can cause a non-interactive shell to exit and
parameter assignments that are specified before the command are
kept after the command completes.
Just to confuse things, if the posix option is turned off (see \fBset\fP
command below) some special commands are very special in that
no field splitting, file globing, brace expansion nor tilde expansion
is preformed on arguments that look like assignments.
Regular built-in commands are different only in that the \fBPATH\fP
d2264 1
a2264 1
.PP
d2267 31
a2297 34
.IP "POSIX special commands"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
\&.	continue	exit	return	trap
:	eval	export	set	unset
break	exec	readonly	shift
.TE
.IP "Additional ksh special commands"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
builtin	times	typeset		
.TE
.IP "Very special commands (non-posix mode)"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
alias	readonly	set	typeset	
.TE
.IP "POSIX regular commands"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
alias	command	fg	kill	umask
bg	false	getopts	read	unalias
cd	fc	jobs	true	wait
.TE
.IP "Additional ksh regular commands"
.TS
lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB lw(8m)fB .
[	let	pwd	ulimit	
echo	print	test	whence	
.TE
.PP
In the future, the additional ksh special and regular commands may
be treated differently from the POSIX special and regular commands.
.PP
d2300 203
a2502 60
.PP
The following describes the special and regular built-in commands:
.\"{{{  . file [ arg1 ... ]
.IP "\fB\&.\fP \fIfile\fP [\fIarg1\fP ...]"
Execute the commands in \fIfile\fP in the current environment.
The file is searched for in the directories of \fBPATH\fP.
If arguments are given, the positional parameters may be used to
access them while \fIfile\fP is being executed.
If no arguments are given, the positional parameters are those of the
environment the command is used in.
.\"}}}
.\"{{{  : [ ... ]
.IP "\fB:\fP [ ... ]"
The null command.
Exit status is set to zero.
.\"}}}
.\"{{{  alias [ -d | +-t [ -r ] ] [+-px] [+-] [name1[=value1] ...]
.IP "\fBalias\fP [ \fB\-d\fP | \fB\(+-t\fP [\fB\-r\fP] ] [\fB\(+-px\fP] [\fB\(+-\fP] [\fIname1\fP[\fB=\fP\fIvalue1\fP] ...]"
Without arguments, \fBalias\fP lists all aliases.
For any name without a value, the existing alias is listed.
Any name with a value defines an alias (see Aliases above).
.sp
When listing aliases, one of two formats is used: 
normally, aliases are listed as \fIname\fP\fB=\fP\fIvalue\fP, where
\fIvalue\fP is quoted; if options were preceded with \fB+\fP 
or a lone \fB+\fP is given on the command line, only \fIname\fP
is printed.
In addition, if the \fB\-p\fP option is used, each alias
is prefixed with the string "\fBalias\fP\ ".
.sp
The \fB\-x\fP option sets (\fB+x\fP clears) the export attribute of an alias,
or, if no names are given, lists the aliases with the export attribute
(exporting an alias has no effect).
.sp
The \fB\-x\fP option sets the export attribute of an alias, or, if no
names are given, lists the aliases with the export attribute
(exporting an alias currently has no effect).
.sp
The \fB\-t\fP option indicates that tracked aliases are to be listed/set
(values specified on the command line are ignored for tracked aliases).
The \fB\-r\fP option indicates that all tracked aliases are to be reset.
.sp
The \fB\-d\fP causes directory aliases, which are used in tilde expansion,
to be listed or set (see Tilde Expansion above).
.\"}}}
.\"{{{  bg [job ...]
.IP "\fBbg\fP [\fIjob\fP ...]"
Resume the specified stopped job(s) in the background.
If no jobs are specified, \fB%+\fP is assumed.
This command is only available on systems which support job control.
See Job Control below for more information.
.\"}}}
.\"{{{  bind [-l] [-m] [key[=editing-command] ...]
.IP "\fBbind\fP [\fB\-m\fP] [\fIkey\fP[\fB=\fP\fIediting-command\fP] ...]"
Set or view the current emacs command editing key bindings/macros.
See Emacs Interactive Input Line Editing below for a complete description.
.\"}}}
.\"{{{  break [level]
.IP "\fBbreak\fP [\fIlevel\fP]"
\fBbreak\fP exits the \fIlevel\fPth inner most for, select, until, or while
d2504 28
a2531 86
\fIlevel\fP defaults to 1.
.\"}}}
.\"{{{  builtin command [arg1 ...]
.IP "\fBbuiltin\fP \fIcommand\fP [\fIarg1\fP ...]"
Execute the built-in command \fIcommand\fP.
.\"}}}
.\"{{{  cd [-LP] [dir]
.IP "\fBcd\fP [\fB\-LP\fP] [\fIdir\fP]"
Set the working directory to \fIdir\fP.  If the parameter \fBCDPATH\fP
is set, it lists directories to search in for \fIdir\fP.
\fIdir\fP.  An empty entry in the \fBCDPATH\fP entry means the current
directory.  If a non-empty directory from \fBCDPATH\fP is used, the resulting
full path is printed to standard output.  If \fIdir\fP is found in any
component of the \fBCDPATH\fP search path other than the null path the name
of the new working directory will be written to standard output. If
\fIdir\fP is missing, the home directory \fB$HOME\fP is used.  If \fIdir\fP
is \fB\-\fP, the previous working directory is used (see OLDPWD parameter).
If \fB\-L\fP option (logical path) is used or if the \fBphysical\fP option
(see \fBset\fP command below) isn't set, references to \fB..\fP in \fIdir\fP
are relative to the path used get to the directory.
If \fB\-P\fP option (physical path) is used or if the \fBphysical\fP option
is set, \fB..\fP is relative to the filesystem directory tree.
The \fBPWD\fP and \fBOLDPWD\fP parameters are updated to reflect the
current and old wording directory, respectively.
.\"}}}
.\"{{{  cd [-LP] old new
.IP "\fBcd\fP [\fB\-LP\fP] \fIold new\fP"
The string \fInew\fP is substituted for \fIold\fP in the current
directory, and the shell attempts to change to the new directory.
.\"}}}
.\"{{{  command [ -pvV ] cmd [arg1 ...]
.IP "\fBcommand\fP [\fB\-pvV\fP] \fIcmd\fP [\fIarg1\fP ...]"
If neither the \fB\-v\fP nor \fB\-V\fP options are given,
\fIcmd\fP
is executed exactly as if the \fBcommand\fP had not been specified,
with two exceptions: first, \fIcmd\fP cannot be a shell function, and
second, special built-in commands lose their specialness (\fIi.e.\fP,
redirection and utility errors do not cause the shell to exit, and command
assignments are not permanent).
If the \fB\-p\fP option is given, a default search path is used instead of
the current value of \fBPATH\fP (the actual value of the default path is
system dependent: on POSIXish systems, it is the value returned by
.ce
\fBgetconf CS_PATH\fP
).
.sp
If the \fB\-v\fP option is given, instead of executing \fIcmd\fP, information
about what would be executed is given (and the same is done for
\fIarg1\fP ...):
for special and regular built-in commands and functions,
their names are simply printed,
for aliases, a command that defines them is printed,
and for commands found by searching the \fBPATH\fP parameter,
the full path of the command is printed.
If no command is be found, (\fIi.e.\fP, the path search fails), nothing
is printed and \fBcommand\fP exits with a non-zero status.
The \fB\-V\fP option is like the \fB\-v\fP option, except it is more verbose.
.\"}}}
.\"{{{  continue [levels]
.IP "\fBcontinue\fP [\fIlevels\fP]"
\fBcontinue\fP jumps to the beginning of the \fIlevel\fPth inner most for,
select, until, or while loop.
\fIlevel\fP defaults to 1.
.\"}}}
.\"{{{  echo [-neE] [arg ...]
.IP "\fBecho\fP [\fB\-neE\fP] [\fIarg\fP ...]"
Prints its arguments (separated by spaces) followed by a newline, to
standard out.
The newline is suppressed if any of the arguments contain the backslash
sequence \fB\ec\fP.
See \fBprint\fP command below for a list of other backslash sequences
that are recognized.
.sp
The options are provided for compatibility with BSD shell scripts:
\fB\-n\fP suppresses the trailing newline, \fB\-e\fP enables backslash
interpretation (a no-op, since this is normally done), and \fB\-E\fP which
suppresses backslash interpretation.
.\"}}}
.\"{{{  eval command ...
.IP "\fBeval\fP \fIcommand ...\fP"
The arguments are concatenated (with spaces between them) to form
a single string which the shell then parses and executes
in the current environment.
.\"}}}
.\"{{{  exec [command [arg ...]]
.IP "\fBexec\fP [\fIcommand\fP [\fIarg\fP ...]]"
d2533 20
a2552 22
.sp
If no arguments are given, any IO redirection is permanent and the shell
is not replaced.
Any file descriptors greater than 2 which are opened or \fIdup\fP(2)-ed
in this way are not
made available to other executed commands (\fIi.e.\fP,
commands that are not built-in to the shell).
Note that the Bourne shell differs here: it does pass these
file descriptors on.
.\"}}}
.\"{{{  exit [status]
.IP "\fBexit\fP [\fIstatus\fP]"
The shell exits with the specified exit status.
If \fIstatus\fP is not specified, the exit status is the current
value of the \fB?\fP parameter.
.\"}}}
.\"{{{  export [-p] [parameter[=value] ...]
.IP "\fBexport\fP [\fB\-p\fP] [\fIparameter\fP[\fB=\fP\fIvalue\fP]] ..."
Sets the export attribute of the named parameters.
Exported parameters are passed in the environment to executed commands.
If values are specified, the named parameters also assigned.
.sp
d2554 6
a2559 6
attribute are printed one per line, unless the \fB\-p\fP option is used,
in which case \fBexport\fP commands defining all exported
parameters, including their values, are printed.
.\"}}}
.\"{{{  false
.IP "\fBfalse\fP"
d2561 27
a2587 16
.\"}}}
.\"{{{  fc [-e editor | -l [-n]] [-r] [first [ last ]]
.IP "\fBfc\fP [\fB\-e\fP \fIeditor\fP | \fB\-l\fP [\fB\-n\fP]] [\fB\-r\fP] [\fIfirst\fP [\fIlast\fP]]"
\fIfirst\fP and \fIlast\fP select commands from the history.
Commands can be selected by
history number, or a string specifying the most recent command starting
with that string.  The \fB\-l\fP option lists the command on stdout,
and \fB\-n\fP inhibits the default command numbers.  The \fB\-r\fP
option reverses the order of the list.  Without \fB\-l\fP, the selected
commands are edited by the editor specified with the \fB\-e\fP
option, or if no \fB\-e\fP is specified, the editor specified by the
\fBFCEDIT\fP parameter (if this parameter is not set, \fB/bin/ed\fP is used),
and then executed by the shell.
.\"}}}
.\"{{{  fc [-e - | -s] [-g] [old=new] [prefix]
.IP "\fBfc\fP [\fB\-e \-\fP | \fB\-s\fP] [\fB\-g\fP] [\fIold\fP\fB=\fP\fInew\fP] [\fIprefix\fP]"
d2589 120
a2708 82
performing the optional substitution of \fIold\fP with \fInew\fP.  If
\fB\-g\fP is specified, all occurrences of \fIold\fP are replaced with
\fInew\fP.  This command is usually accessed with the predefined alias
\fBr='fc \-e \-'\fP.
.\"}}}
.\"{{{  fg [job ...]
.IP "\fBfg\fP [\fIjob\fP ...]"
Resume the specified job(s) in the foreground.
If no jobs are specified, \fB%+\fP is assumed.
This command is only available on systems which support job control.
See Job Control below for more information.
.\"}}}
.\"{{{  getopts optstring name [arg ...]
.IP "\fBgetopts\fP \fIoptstring\fP \fIname\fP [\fIarg\fP ...]"
\fBgetopts\fP is used by shell procedures to parse the specified arguments
(or positional parameters, if no arguments are given) and to check for legal
options.
\fIoptstring\fP contains the option letters that
\fBgetopts\fP is to recognize.  If a letter is followed by a colon, the
option is expected to have an argument.
Options that do not take arguments may be grouped in a single argument.
If an option takes an argument and the option character is not the last
character of the argument it is found in, the remainder of the argument
is taken to be the option's argument, otherwise, the next argument is
the option's argument.
.sp
Each time \fBgetopts\fP is invoked, it places the next option in
the shell parameter \fIname\fP and the index of the next argument to be
processed in the shell parameter \fBOPTIND\fP.
If the option was introduced with a \fB+\fP, the option placed in
\fIname\fP is prefixed with a \fB+\fP.
When an option requires an argument, \fBgetopts\fP places it in the
shell parameter \fBOPTARG\fP.
When an illegal option or a missing option argument is
encountered a question mark or a colon is placed in \fIname\fP
(indicating an illegal option or missing argument, respectively)
and \fBOPTARG\fP is set to the option character that caused the problem.
An error message is also printed to standard error if \fIoptstring\fP
does not begin with a colon.
.sp
When the end of the options is encountered, \fBgetopts\fP exits with a
non-zero exit status.
Options end at the first (non-option argument) argument that does not
start with a \-, or when a \fB\-\-\fP argument is encountered.
.sp
Option parsing can be reset by setting \fBOPTIND\fP to 1 (this is done
automatically whenever the shell or a shell procedure is invoked).
.sp
Warning: Changing the value of the shell parameter \fBOPTIND\fP to
a value other than 1, or parsing different sets of arguments without
resetting \fBOPTIND\fP may lead to unexpected results.
.\"}}}
.\"{{{  hash [-r] [name ...]
.IP "\fBhash\fP [\fB\-r\fP] [\fIname ...\fP]"
Without arguments, any hashed executable command pathnames are listed.
The \fB\-r\fP option causes all hashed commands to be removed
from the hash table.
Each \fIname\fP is searched as if it where a command name and added to the
hash table if it is an executable command.
.\"}}}
.\"{{{  jobs [-lpn] [job ...]
.IP "\fBjobs\fP [\fB\-lpn\fP] [\fIjob\fP ...]"
Display information about the specified jobs; if no jobs are specified,
all jobs are displayed.
The \fB\-n\fP option causes information to be displayed only for jobs
that have changed state since the last notification.
If the \fB\-l\fP option is used, the process-id of each process in a job
is also listed.
The \fB\-p\fP option causes only the process group of each job to be printed.
See Job Control below for the format of \fIjob\fP and the displayed job.
.\"}}}
.\"{{{  kill [-s signame | -signum | -signame] { job | pid | -pgrp } ...
.IP "\fBkill\fP [\fB\-s\fP \fIsigname\fP | \fB\-signum\fP | \fB\-signame\fP ] { \fIjob\fP | \fIpid\fP | \fB\-\fP\fIpgrp\fP } ..."
Send the specified signal to the specified jobs, process ids, or process groups.
If no signal is specified, the signal TERM is sent.
If a job is specified, the signal is sent to the job's process group.
See Job Control below for the format of \fIjob\fP.
.\"}}}
.\"{{{  kill -l [exit-status ...]
.IP "\fBkill \-l\fP [\fIexit-status\fP ...]"
Print the name of the signal that killed a process which exited with
the specified \fIexit-status\fPes.
d2711 81
a2791 39
.\"}}}
.\"{{{  let [expression ...]
.IP "\fBlet\fP [\fIexpression\fP ...]"
Each expression is evaluated, see Arithmetic Expressions above.
If all expressions are successfully evaluated, the exit status
is 0 (1) if the last expression evaluated to non-zero (zero).
If an error occurs during the parsing or evaluation of an expression,
the exit status is greater than 1.
Since expressions may need to be
quoted, \fB((\fP \fIexpr\fP \fB))\fP is syntactic sugar for \fBlet
"\fP\fIexpr\fP\fB"\fP.
.\"}}}
.\"{{{  print [-nprsun | -R [-en]] [argument ...]
.IP "\fBprint\fP [\fB\-nprsu\fP\fIn\fP | \fB\-R\fP [\fB\-en\fP]] [\fIargument ...\fP]"
\fBPrint\fP prints its arguments on the standard output, separated by
spaces, and terminated with a newline.  The \fB\-n\fP option suppresses
the newline.  By default, certain C escapes are translated.  These
include \eb, \ef, \en, \er, \et, \ev, and \e0### (# is an octal digit, of
which there may be 0 to 3).
\ec is equivalent to using the \fB\-n\fP option.  \e expansion may be
inhibited with the \fB\-r\fP option.
The \fB\-s\fP option prints to the history file instead of standard output,
the \fB\-u\fP option prints to file descriptor \fIn\fP (\fIn\fP
defaults to 1 if omitted), and the \fB\-p\fP option prints to the co-process
(see Co-Processes above).
.sp
The \fB\-R\fP option is used to emulate, to some degree, the BSD echo
command, which does not process \e sequences unless the \fB\-e\fP option
is given.
As above, the \fB\-n\fP option suppresses the trailing newline.
.\"}}}
.\"{{{  pwd [-LP]
.IP "\fBpwd\fP [\fB\-LP\fP]"
Print the present working directory.
If \fB\-L\fP option is used or if the \fBphysical\fP option
(see \fBset\fP command below) isn't set, the logical path is printed
(\fIi.e.\fP, the path used to \fBcd\fP to the current directory).
If \fB\-P\fP option (physical path) is used or if the \fBphysical\fP option
is set, the path determined from the filesystem (by following \fB..\fP
d2793 11
a2803 7
.\"}}}
.\"{{{  read [-prsun] [parameter ...]
.IP "\fBread\fP [\fB\-prsu\fP\fIn\fP] [\fIparameter ...\fP]"
Reads a line of input from standard input, separate the line into fields using
the \fBIFS\fP parameter (see Substitution above), and assign each field to the
specified parameters.
If there are more parameters than fields, the extra parameters are set to null,
d2805 10
a2814 6
is assigned the remaining fields (inclusive of any separating spaces).
If no parameters are specified, the \fBREPLY\fP parameter is used.
If the input line ends in a backslash and the \fB\-r\fP option was not used, the
backslash and newline are stripped and more input is read.
If no input is read, \fBread\fP exits with a non-zero status.
.sp
d2817 68
a2884 38
any input is read) if the input is a tty
(\fIe.g.\fP, \fBread nfoo?'number of foos: '\fP).
.sp
The \fB\-u\fP\fIn\fP and \fB\-p\fP options cause input to be read
from file descriptor \fIn\fP or the current co-process (see Co-Processes above
for comments on this), respectively.
If the \fB\-s\fP option is used, input is saved to the history file.
.\"}}}
.\"{{{  readonly [-p] [parameter[=value] ...]
.IP "\fBreadonly\fP [\fB\-p\fP] [\fIparameter\fP[\fB=\fP\fIvalue\fP]] ..."
Sets the readonly attribute of the named parameters.  If values are given,
parameters are set to them before setting the attribute.
Once a parameter is made readonly, it cannot be unset and its value cannot
be changed.
.sp
If no parameters are specified, the names of all parameters with the readonly
attribute are printed one per line, unless the \fB\-p\fP option is used,
in which case \fBreadonly\fP commands defining all readonly
parameters, including their values, are printed.
.\"}}}
.\"{{{  return [status]
.IP "\fBreturn\fP [\fIstatus\fP]"
Returns from a function or \fB.\fP script, with exit status \fIstatus\fP.
If no \fIstatus\fP is given, the exit status of the last executed command
is used.
If used outside of a function or \fB.\fP script, it has the same effect
as \fBexit\fP.
Note that pdksh treats both profile and \fB$ENV\fP files as \fB.\fP scripts,
while the original Korn shell only treats profiles as \fB.\fP scripts.
.\"}}}
.\"{{{  set [+-abCefhkmnpsuvxX] [+-o [option]] [+-A name] [--] [arg ...]
.IP "\fBset\fP [\fB\(+-abCefhkmnpsuvxX\fP] [\fB\(+-o\fP [\fIoption\fP]] [\fB\(+-A\fP \fIname\fP] [\fB\-\-\fP] [\fIarg\fP ...]"
The set command can be used to set (\fB\-\fP) or clear (\fB+\fP) shell options,
set the positional parameters, or set an array parameter.
Options can be changed using the \fB\(+-o\fP \fIoption\fP syntax,
where \fIoption\fP is the long name of an option, or using
the \fB\(+-\fP\fIletter\fP syntax, where \fIletter\fP is the
option's single letter name (not all options have a single letter name).
d2886 17
a2902 15
along with a description of what the option does.
.sp
.TS
expand;
afB lfB lw(3i).
\-A		T{
Sets the elements of the array parameter \fIname\fP to \fIarg\fP ...;
If \fB\-A\fP is used, the array is reset (\fIi.e.\fP, emptied) first;
if \fB+A\fP is used, the first N elements are set (where N is the number
of \fIarg\fPs), the rest are left untouched.
T}
\-a	allexport	T{
all new parameters are created with the export attribute
T}
\-b	notify	T{
d2904 24
a2927 15
prompt.
Only used if job control is enabled (\fB\-m\fP).
T}
\-C	noclobber	T{
Prevent \fB>\fP redirection from overwriting existing files (\fB>|\fP must
be used to force an overwrite).
T}
\-e	errexit	T{
Exit (after executing the \fBERR\fP trap) as soon as an error occurs or
a command fails (\fIi.e.\fP, exits with a non-zero status).
This does not apply to commands whose exit status is explicitly tested by a
shell construct such as \fBif\fP, \fBuntil\fP, \fBwhile\fP, \fB&&\fP or
\fB||\fP statements.
T}
\-f	noglob	T{
d2929 7
a2935 10
T}
\-h	trackall	T{
Create tracked aliases for all executed commands (see Aliases above).
On by default for non-interactive shells.
T}
\-i	interactive	T{
Enable interactive mode \- this can only be set/unset when the shell is
invoked.
T}
\-k	keyword	T{
d2937 6
a2942 6
T}
\-l	login	T{
The shell is a login shell \- this can only be set/unset when the shell is
invoked (see Shell Startup above).
T}
\-m	monitor	T{
d2944 2
a2945 3
T}
\-n	noexec	T{
Do not execute any commands \- useful for checking the syntax of scripts
d2947 32
a2978 25
T}
\-p	privileged	T{
Set automatically if, when the shell starts, the read uid or gid does not
match the effective uid or gid, respectively.
See Shell Startup above for a description of what this
means.
T}
-r	restricted	T{
Enable restricted mode \(em this option can only be used when the shell is
invoked.  See Shell Startup above for a description of what this
means.
T}
\-s	stdin	T{
If used when the shell is invoked, commands are read from standard input.
Set automatically if the shell is invoked with no arguments.
.sp
When \fB\-s\fP is used in the \fBset\fP command, it causes the specified
arguments to be sorted before assigning them to the positional parameters
(or to array \fIname\fP, if \fB\-A\fP is used).
T}
\-u	nounset	T{
Referencing of an unset parameter is treated as an error, unless
one of the \fB\-\fP, \fB+\fP or \fB=\fP modifiers is used.
T}
\-v	verbose	T{
d2980 9
a2988 9
T}
\-x	xtrace	T{
Print commands and parameter assignments when they are executed,
preceded by the value of \fBPS4\fP.
T}
\-X	markdirs	T{
Mark directories with a trailing \fB/\fP during file name generation.
T}
	bgnice	T{
d2990 56
a3045 41
T}
	braceexpand	T{
Enable brace expansion (aka, alternation).
T}
	emacs	T{
Enable BRL emacs-like command line editing (interactive shells only);
see Emacs Interactive Input Line Editing.
T}
	gmacs	T{
Enable gmacs-like (Gosling emacs) command line editing (interactive shells
only);
currently identical to emacs editing except that transpose (^T) acts
slightly differently.
T}
	ignoreeof	T{
The shell will not exit on when end-of-file is read, \fBexit\fP must be used.
T}
	nohup	T{
Do not kill running jobs with a \fBHUP\fP signal when a login shell exists.
Currently set by default, but this will change in the future to be compatible
with the original Korn shell (which doesn't have this option, but does
send the \fBHUP\fP signal).
T}
	nolog	T{
No effect \- in the original Korn shell, this prevents function definitions
from being stored in the history file.
T}
	physical	T{
Causes the \fBcd\fP and \fBpwd\fP commands to use `physical'
(\fIi.e.\fP, the filesystem's) \fB..\fP directories instead of `logical'
directories (\fIi.e.\fP,  the shell handles \fB..\fP, which allows the user
to be oblivious of symlink links to directories).
Clear by default.  Note that setting
this option does not effect the current value of the \fBPWD\fP parameter;
only the \fBcd\fP command changes \fBPWD\fP.
See the \fBcd\fP and \fBpwd\fP commands above for more details.
T}
	posix	T{
Enable posix mode.  See POSIX Mode above.
T}
	vi	T{
d3047 204
a3250 184
T}
	viraw	T{
No effect \- in the original Korn shell, unless viraw was set, the vi command
line mode would let the tty driver do the work until ESC (^[) was entered.
pdksh is always in viraw mode.
T}
	vi-esccomplete	T{
In vi command line editing, do command / file name completion when
escape (^[) is entered in command mode.
T}
	vi-show8	T{
Prefix characters with the eighth bit set with `M-'.
If this option is not set, characters in the range
128-160 are printed as is, which may cause problems.
T}
	vi-tabcomplete	T{
In vi command line editing, do command / file name completion when
tab (^I) is entered in insert mode.
T}
.TE
.sp
These options can also be used upon invocation of the shell.  The current
set of options (with single letter names) can be found in the
parameter \fB\-\fP.
\fBset -o\fP with no option name will list all the options and whether each
is on or off; \fBset +o\fP will print the long names of all options that
are currently on.
.sp
Remaining arguments, if any, are positional parameters and are assigned,
in order, to the
positional parameters (\fIi.e.\fP, \fB1\fP, \fB2\fP, \fIetc.\fP).
If options are ended with \fB\-\-\fP and there are no remaining arguments,
all positional parameters are cleared.
If no options or arguments are given, then the values of all names are printed.
For unknown historical reasons, a lone \fB\-\fP option is treated specially:
it clears both the \fB\-x\fP and \fB\-v\fP options.
.\"}}}
.\"{{{  shift [number]
.IP "\fBshift\fP [\fInumber\fP]"
The positional parameters \fInumber\fP+1, \fInumber\fP+2 \fIetc.\fP\& are
renamed to \fB1\fP, \fB2\fP, \fIetc.\fP
\fInumber\fP defaults to 1.
.\"}}}
.\"{{{  test expression, [ expression ]
.IP "\fBtest\fP \fIexpression\fP"
.IP "\fB[\fP \fIexpression\fP \fB]\fP"
\fBtest\fP evaluates the \fIexpression\fP and returns zero status if
true, and 1 status if false and greater than 1 if there was an error.
It is normally used as the
condition command of \fBif\fP and \fBwhile\fP statements.
The following basic expressions are available:
.sp
.TS
afB ltw(2.8i).
\fIstr\fP	T{
\fIstr\fP has non-zero length.  Note that there is the potential
for problems if \fIstr\fP turns out to be an operator (\fIe.g.\fP, \fB-r\fP)
- it is generally better to use a test like
\fB[ X"\fP\fIstr\fP\fB" != X ]\fP
instead (double quotes are used in case \fIstr\fP contains spaces or file
globing characters).
T}
\-r \fIfile\fP	T{
\fIfile\fP exists and is readable
T}
\-w \fIfile\fP	T{
\fIfile\fP exists and is writable
T}
\-x \fIfile\fP	T{
\fIfile\fP exists and is executable
T}
\-a \fIfile\fP	T{
\fIfile\fP exists
T}
\-e \fIfile\fP	T{
\fIfile\fP exists
T}
\-f \fIfile\fP	T{
\fIfile\fP is a regular file
T}
\-d \fIfile\fP	T{
\fIfile\fP is a directory
T}
\-c \fIfile\fP	T{
\fIfile\fP is a character special device
T}
\-b \fIfile\fP	T{
\fIfile\fP is a block special device
T}
\-p \fIfile\fP	T{
\fIfile\fP is a named pipe
T}
\-u \fIfile\fP	T{
\fIfile\fP's mode has setuid bit set
T}
\-g \fIfile\fP	T{
\fIfile\fP's mode has setgid bit set
T}
\-k \fIfile\fP	T{
\fIfile\fP's mode has sticky bit set
T}
\-s \fIfile\fP	T{
\fIfile\fP is not empty
T}
\-O \fIfile\fP	T{
\fIfile\fP's owner is the shell's effective user-ID
T}
\-G \fIfile\fP	T{
\fIfile\fP's group is the shell's effective group-ID
T}
\-h \fIfile\fP	T{
\fIfile\fP is a symbolic link
T}
\-H \fIfile\fP	T{
\fIfile\fP is a context dependent directory (only useful on HP-UX)
T}
\-L \fIfile\fP	T{
\fIfile\fP is a symbolic link
T}
\-S \fIfile\fP	T{
\fIfile\fP is a socket
T}
\-o \fIoption\fP	T{
shell \fIoption\fP is set (see \fBset\fP command above for list of options).
As a non-standard extension, if the option starts with a \fB!\fP, the test
is negated; the test always fails if option doesn't exist (thus
.RS
\fB[ -o \fP\fIfoo\fP \fB-o -o !\fP\fIfoo\fP \fB]\fP
.RE
returns true if and only if option \fIfoo\fP exists).
T}
\fIfile\fP \-nt \fIfile\fP	T{
first \fIfile\fP is newer than second \fIfile\fP
T}
\fIfile\fP \-ot \fIfile\fP	T{
first \fIfile\fP is older than second \fIfile\fP
T}
\fIfile\fP \-ef \fIfile\fP	T{
first \fIfile\fP is the same file as second \fIfile\fP
T}
\-t\ [\fIfd\fP]	T{
file descriptor is a tty device.
If the posix option (\fBset \-o posix\fP, see POSIX Mode above) is not
set, \fIfd\fP may be left out, in which case it is taken to be 1
(the behaviour differs due to the special POSIX rules described below).
T}
\fIstring\fP	T{
\fIstring\fP is not empty
T}
\-z\ \fIstring\fP	T{
\fIstring\fP is empty
T}
\-n\ \fIstring\fP	T{
\fIstring\fP is not empty
T}
\fIstring\fP\ =\ \fIstring\fP	T{
strings are equal
T}
\fIstring\fP\ ==\ \fIstring\fP	T{
strings are equal
T}
\fIstring\fP\ !=\ \fIstring\fP	T{
strings are not equal
T}
\fInumber\fP\ \-eq\ \fInumber\fP	T{
numbers compare equal
T}
\fInumber\fP\ \-ne\ \fInumber\fP	T{
numbers compare not equal
T}
\fInumber\fP\ \-ge\ \fInumber\fP	T{
numbers compare greater than or equal
T}
\fInumber\fP\ \-gt\ \fInumber\fP	T{
numbers compare greater than
T}
\fInumber\fP\ \-le\ \fInumber\fP	T{
numbers compare less than or equal
T}
\fInumber\fP\ \-lt\ \fInumber\fP	T{
numbers compare less than
T}
.TE
.sp
d3252 74
a3325 46
binary operators, may be combined with the following operators
(listed in increasing order of precedence):
.sp
.TS
afB l.
\fIexpr\fP \-o \fIexpr\fP	logical or
\fIexpr\fP \-a \fIexpr\fP	logical and
! \fIexpr\fP	logical not
( \fIexpr\fP )	grouping
.TE
.sp
On operating systems not supporting \fB/dev/fd/\fP\fIn\fP devices
(where \fIn\fP is a file descriptor number),
the \fBtest\fP command will attempt to fake it for all tests that
operate on files (except the \fB-e\fP test).
I.e., \fB[ -w /dev/fd/2 ]\fP tests if file descriptor 2 is writable.
.sp
Note that some special rules are applied (courtesy of POSIX) if the
number of arguments to \fBtest\fP or \fB[\fP \&... \fB]\fP is less than
five: if leading \fB!\fP arguments can be stripped such that only one
argument remains then a string length test is performed (again, even if
the argument is a unary operator);
if leading \fB!\fP arguments can be stripped such that three
arguments remain and the second argument is a binary operator, then the
binary operation is performed (even if first argument is a unary
operator, including an unstripped \fB!\fP).
.sp
\fBNote:\fP A common mistake is to use \fBif [ $foo = bar ]\fP which
fails if parameter \fBfoo\fP is null or unset, if it has embedded spaces
(\fIi.e.\fP, \fBIFS\fP characters), or if it is a unary operator like \fB!\fP or
\fB\-n\fP.  Use tests like \fBif [ "X$foo" = Xbar ]\fP instead.
.\"}}}
.\"{{{  times
.IP \fBtimes\fP
Print the accumulated user and system times used by the shell and by
processes which have exited that the shell started.
.\"}}}
.\"{{{  trap [handler signal ...]
.IP "\fBtrap\fP [\fIhandler\fP \fIsignal ...\fP]"
Sets trap handler that is to be executed when any of the specified signals
are received.
\fBHandler\fP is either a null string, indicating the signals are to
be ignored, a minus (\fB\-\fP), indicating that the default action is to
be taken for the signals (see signal(2 or 3)), or a string containing shell
commands to be evaluated and executed at the first opportunity (\fIi.e.\fP,
when the current command completes, or before printing the next \fBPS1\fP
d3327 39
a3365 21
\fBSignal\fP is the name of a signal (\fIe.g.\fP, PIPE or ALRM) or the number
of the signal (see \fBkill \-l\fP command above).
There are two special signals: \fBEXIT\fP (also known as \fB0\fP), which
is executed when the shell is about to exit, and \fBERR\fP which is
executed after an error occurs (an error is something that would cause
the shell to exit if the \fB\-e\fP or \fBerrexit\fP option were set \(em
see \fBset\fP command above).
\fBEXIT\fP handlers are executed in the environment of the last executed
command.
Note that for non-interactive shells, the trap handler cannot be changed for
signals that were ignored when the shell started.
.sp
With no arguments, \fBtrap\fP lists, as a series of \fBtrap\fP commands,
the current state of the traps that have been set since the shell started.
.sp
.\" todo: add these features (trap DEBUG, trap ERR/EXIT in function)
The original Korn shell's \fBDEBUG\fP trap and the handling of \fBERR\fP and
\fBEXIT\fP traps in functions are not yet implemented.
.\"}}}
.\"{{{  true
.IP \fBtrue\fP
d3367 55
a3421 30
.\"}}}
.\"{{{  typeset [[+-Ulprtux] [-L[n]] [-R[n]] [-Z[n]] [-i[n]] | -f [-tux]] [name[=value] ...]
.IP "\fBtypeset\fP [[\(+-Ulprtux] [\fB\-L\fP[\fIn\fP]] [\fB\-R\fP[\fIn\fP]] [\fB\-Z\fP[\fIn\fP]] [\fB\-i\fP[\fIn\fP]] | \fB\-f\fP [\fB\-tux\fP]] [\fIname\fP[\fB=\fP\fIvalue\fP] ...]"
Display or set parameter attributes.
With no \fIname\fP arguments, parameter attributes are displayed: if no options
arg used, the current attributes of all parameters are printed as typeset
commands; if an option is given (or \fB\-\fP with no option letter)
all parameters and their values with the specified attributes are printed;
if options are introduced with \fB+\fP, parameter values are not printed.
.sp
If \fIname\fP arguments are given, the attributes of the named parameters
are set (\fB\-\fP) or cleared (\fB+\fP).
Values for parameters may optionally be specified.
If typeset is used inside a function, any newly created parameters are local
to the function.
.sp
When \fB\-f\fP is used, typeset operates on the attributes of functions.
As with parameters, if no \fIname\fPs are given, functions are listed
with their values (\fIi.e.\fP, definitions) unless options are introduced with
\fB+\fP, in which case only the function names are reported.
.sp
.TS
expand;
afB lw(4.5i).
\-L\fIn\fP	T{
Left justify attribute: \fIn\fP specifies the field width.
If \fIn\fP is not specified, the current width of a parameter (or the
width of its first assigned value) is used.
Leading white space (and zeros, if used with the \fB\-Z\fP option) is stripped.
If necessary, values are either truncated or space padded to fit the
d3423 19
a3441 27
T}
\-R\fIn\fP	T{
Right justify attribute: \fIn\fP specifies the field width.
If \fIn\fP is not specified, the current width of a parameter (or the
width of its first assigned value) is used.
Trailing white space are stripped.
If necessary, values are either stripped of leading characters
or space padded to make them fit the field width.
T}
\-Z\fIn\fP	T{
Zero fill attribute: if not combined with \fB\-L\fP, this is the
same as \fB\-R\fP, except zero padding is used instead of space padding.
T}
\-i\fIn\fP	T{
integer attribute:
\fIn\fP specifies the base to use when displaying the integer
(if not specified, the base given in the first assignment is used).
Parameters with this attribute may be assigned values containing
arithmetic expressions.
T}
\-U	T{
unsigned integer attribute: integers are printed as unsigned values
(only useful when combined with the \fB\-i\fP option).
This option is not in the original Korn shell.
T}
\-f	T{
Function mode: display or set functions and their attributes, instead of
d3443 66
a3508 55
T}
\-l	T{
Lower case attribute: all  upper case characters in values are converted to
lower case.
(In the original Korn shell, this parameter meant `long integer' when used
with the \fB\-i\fP option).
T}
\-p	T{
Print complete typeset commands that can be used to re-create the
attributes (but not the values) of parameters.
This is the default action (option exists for ksh93 compatability).
T}
\-r	T{
Readonly attribute: parameters with the this attribute may not be assigned to
or unset.
Once this attribute is set, it can not be turned off.
T}
\-t	T{
Tag attribute: has no meaning to the shell; provided for application use.
.sp
For functions, \fB\-t\fP is the trace attribute.
When functions with the trace attribute are executed, the \fBxtrace\fP (\fB\-x\fP) shell option is temporarily turned on.
T}
\-u	T{
Upper case attribute: all lower case characters in values are converted to
upper case.
(In the original Korn shell, this parameter meant `unsigned integer' when used
with the \fB\-i\fP option, which meant upper case letters would never be used
for bases greater than 10.  See the \fB\-U\fP option).
.sp
For functions, \fB\-u\fP is the undefined attribute.  See Functions above
for the implications of this.
T}
\-x	T{
Export attribute: parameters (or functions) are placed in the environment of
any executed commands.  Exported functions are not implemented yet.
T}
.TE
.\"}}}
.\"{{{  ulimit [-acdfHlmnpsSt] [value]
.IP "\fBulimit\fP [\fB\-acdfHlmnpsStvw\fP] [\fIvalue\fP]"
Display or set process limits.
If no options are used, the file size limit (\fB\-f\fP) is assumed.
\fBvalue\fP, if specified, may be either be an arithmetic expression or the
word \fBunlimited\fP.
The limits affect the shell and any processes created by the shell after
a limit is imposed.
Note that some systems may not allow limits to be increased once they
are set.
Also note that the types of limits available are system dependent \- some
systems have only the \fB\-f\fP limit.
.RS
.IP \fB\-a\fP
Displays all limits; unless \fB\-H\fP is used, soft limits are displayed.
.IP \fB\-H\fP
d3510 1
a3510 1
.IP \fB\-S\fP
d3512 172
a3683 140
.IP \fB\-c\fP
Impose a size limit of \fIn\fP blocks on the size of core dumps.
.IP \fB\-d\fP
Impose a size limit of \fIn\fP kbytes on the size of the data area.
.IP \fB\-f\fP
Impose a size limit of \fIn\fP blocks on files written by the shell and
its child processes (files of any size may be read).
.IP \fB\-l\fP
Impose a limit of \fIn\fP kbytes on the amount of locked (wired) physical
memory.
.IP \fB\-m\fP
Impose a limit of \fIn\fP kbytes on the amount of physical memory used.
.IP \fB\-n\fP
Impose a limit of \fIn\fP file descriptors that can be open at once.
.IP \fB\-p\fP
Impose a limit of \fIn\fP processes that can be run by the user at any one
time.
.IP \fB\-s\fP
Impose a size limit of \fIn\fP kbytes on the size of the stack area.
.IP \fB\-t\fP
Impose a time limit of \fIn\fP cpu seconds to be used by each process.
.PP
As far as \fBulimit\fP is concerned, a block is 512 bytes.
.RE
.\"}}}
.\"{{{  umask [-S] [mask]
.IP "\fBumask\fP [\fB\-S\fP] [\fImask\fP]"
.RS
Display or set the file permission creation mask, or umask (see \fIumask\fP(2)).
If the \fB\-S\fP option is used, the mask displayed or set is symbolic,
otherwise it is an octal number.
.sp
Symbolic masks are like those used by \fIchmod\fP(1):
.RS
[\fBugoa\fP]{{\fB=+-\fP}{\fBrwx\fP}*}+[\fB,\fP...]
.RE
in which the first group of characters is the \fIwho\fP part, the second
group is the \fIop\fP part, and the last group is the \fIperm\fP part.
The \fIwho\fP part specifies which part of the umask is to be modified.
The letters mean:
.RS
.IP \fBu\fP
the user permissions
.IP \fBg\fP
the group permissions
.IP \fBo\fP
the other permissions (non-user, non-group)
.IP \fBa\fP
all permissions (user, group and other)
.RE
.sp
The \fIop\fP part indicates how the \fIwho\fP permissions are to be modified:
.RS
.IP \fB=\fP
set
.IP \fB+\fP
added to
.IP \fB\-\fP
removed from
.RE
.sp
The \fIperm\fP part specifies which permissions are to be set, added or removed:
.RS
.IP \fBr\fP
read permission
.IP \fBw\fP
write permission
.IP \fBx\fP
execute permission
.RE
.sp
When symbolic masks are used, they describe what permissions may
be made available (as opposed to octal masks in which a set bit means
the corresponding bit is to be cleared).
Example: `ug=rwx,o=' sets the mask so files will not be readable, writable
or executable by `others', and is equivalent (on most systems) to the octal
mask `07'.
.RE
.\"}}}
.\"{{{  unalias [-adt] name ...
.IP "\fBunalias\fP [\fB\-adt\fP] [\fIname1\fP ...]"
The aliases for the given names are removed.
If the \fB\-a\fP option is used, all aliases are removed.
If the \fB\-t\fP or \fB\-d\fP options are used, the indicated operations
are carried out on tracked or directory aliases, respectively.
.\"}}}
.\"{{{  unset [-fv] parameter ...
.IP "\fBunset\fP [\fB\-fv\fP] \fIparameter\fP ..."
Unset the named parameters (\fB\-v\fP, the default) or functions (\fB\-f\fP).
The exit status is non-zero if any of the parameters were already unset,
zero otherwise.
.\"}}}
.\"{{{  wait [job]
.IP "\fBwait\fP [\fIjob\fP]"
Wait for the specified job(s) to finish.
The exit status of wait is that of the last specified job:
if the last job is killed by a signal, the exit status is 128 + the
number of the signal (see \fBkill \-l\fP \fIexit-status\fP above); if the last
specified job can't be found (because it never existed, or had already
finished), the exit status of wait is 127.
See Job Control below for the format of \fIjob\fP.
\fBWait\fP will return if a signal for which a trap has been set is received,
or if a HUP, INT or QUIT signal is received.
.sp
If no jobs are specified, \fBwait\fP waits for all currently running jobs
(if any) to finish and exits with a zero status.
If job monitoring is enabled, the completion status of jobs is
printed (this is not the case when jobs are explicitly specified).
.\"}}}
.\"{{{  whence [-pv] [name ...]
.IP "\fBwhence\fP [\fB\-pv\fP] [name ...]"
For each name, the type of command is listed (reserved word, built-in, alias,
function, tracked alias or executable).
If the \fB\-p\fP option is used, a path search done even if \fIname\fP
is a reserved word, alias, \fIetc.\fP
Without the \fB\-v\fP option, \fBwhence\fP is similar to \fBcommand \-v\fP
except that \fBwhence\fP will find reserved words and won't print aliases
as alias commands;
with the \fB\-v\fP option, \fBwhence\fP is the same as \fBcommand \-V\fP.
Note that for \fBwhence\fP, the \fB\-p\fP option does not affect the search
path used, as it does for \fBcommand\fP.
If the type of one or more of the names could not be determined, the
exit status is non-zero.
.\"}}}
.\"}}}
.\"{{{  job control (and its built-in commands)
.SS "Job Control"
Job control refers to the shell's ability to monitor and control \fBjobs\fP,
which are processes or groups of processes created for commands or pipelines.
At a minimum, the shell keeps track of the status of the background
(\fIi.e.\fP, asynchronous) jobs that currently exist; this information can be
displayed using the \fBjobs\fP command.
If job control is fully enabled (using \fBset \-m\fP or
\fBset \-o monitor\fP), as it is for interactive shells,
the processes of a job are placed in their own process group,
foreground jobs can be stopped by typing the suspend character from the
terminal (normally ^Z),
jobs can be restarted in either the foreground
or background, using the \fBfg\fP and \fBbg\fP commands, respectively,
and the state of the terminal is saved or restored when a foreground
d3685 22
a3706 13
.sp
Note that only commands that create processes (\fIe.g.\fP,
asynchronous commands, subshell commands, and non-built-in,
non-function commands) can be stopped; commands like \fBread\fP cannot be.
.sp
When a job is created, it is assigned a job-number.
For interactive shells, this number is printed inside \fB[\fP..\fB]\fP,
followed by the process-ids of the processes in the job when an asynchronous
command is run.
A job may be referred to in \fBbg\fP, \fBfg\fP, \fBjobs\fP, \fBkill\fP and
\fBwait\fP commands either by the process id of the last process in the
command pipeline (as stored in the \fB$!\fP parameter) or by prefixing the
job-number with a percent sign (\fB%\fP).
d3708 2
a3709 5
.sp
.TS
expand;
afB lw(4.5i).
%+	T{
d3712 25
a3736 25
T}
%%\fR, \fP%	T{
Same as \fB%+\fP.
T}
%\-	T{
The job that would be the \fB%+\fP job, if the later did not exist.
T}
%\fIn\fP	T{
The job with job-number \fIn\fP.
T}
%?\fIstring\fP	T{
The job containing the string \fIstring\fP (an error occurs if multiple jobs
are matched).
T}
%\fIstring\fP	T{
The job starting with string \fIstring\fP (an error occurs if multiple jobs
are matched).
T}
.TE
.sp
When a job changes state (\fIe.g.\fP, a background job finishes or foreground
job is stopped), the shell prints the following status information:
.RS
\fB[\fP\fInumber\fP\fB]\fP \fIflag status command\fP
.RE
d3738 41
a3778 28
.IP "\ \fInumber\fP"
is the job-number of the job.
.IP "\ \fIflag\fP"
is \fB+\fP or \fB-\fP if the job is the \fB%+\fP or \fB%-\fP job,
respectively, or space if it is neither.
.IP "\ \fIstatus\fP"
indicates the current state of the job and can be
.RS
.IP "\fBRunning\fP"
the job has neither stopped or exited (note that running does not
necessarily mean consuming CPU time \(em the process could be blocked waiting
for some event).
.IP "\fBDone\fP [\fB(\fP\fInumber\fP\fB)\fP]"
the job exited. \fInumber\fP is the exit status of the job, which is
omitted if the status is zero.
.IP "\fBStopped\fP [\fB(\fP\fIsignal\fP\fB)\fP]"
the job was stopped by the indicated \fIsignal\fP (if no signal is given,
the job was stopped by SIGTSTP).
.IP "\fIsignal-description\fP [\fB(core dumped)\fP]"
the job was killed by a signal (\fIe.g.\fP, Memory\ fault,
Hangup, \fIetc.\fP \(em use
\fBkill \-l\fP for a list of signal descriptions).
The \fB(core\ dumped)\fP message indicates the process created a core file.
.RE
.IP "\ \fIcommand\fP"
is the command that created the process.
If there are multiple processes in the job, then each process will
have a line showing its \fIcommand\fP and possibly its \fIstatus\fP,
d3780 23
a3802 21
.PP
When an attempt is made to exit the shell while there are jobs in
the stopped state, the shell warns the user that there are stopped jobs
and does not exit.
If another attempt is immediately made to exit the shell, the stopped
jobs are sent a \fBHUP\fP signal and the shell exits.
Similarly, if the \fBnohup\fP option is not set and there are running
jobs when an attempt is made to exit a login shell, the shell warns the
user and does not exit.
If another attempt is immediately made to exit the shell, the running
jobs are sent a \fBHUP\fP signal and the shell exits.
.\"}}}
.\"{{{  Emacs Interactive Input Line Editing
.SS "Emacs Interactive Input Line Editing"
When the \fBemacs\fP option is set, interactive input line editing is
enabled.  \fBWarning\fP: This mode is slightly different from the emacs
mode in the original Korn shell and the 8th bit is stripped in emacs mode.
In this mode various editing commands (typically bound to one or more
control characters) cause immediate actions without waiting for a
new-line.  Several editing commands are bound to particular control
characters when the shell is invoked; these bindings can be changed
d3804 2
a3805 2
.\"{{{  bind
.IP \fBbind\fP
d3807 28
a3834 27
.\"}}}
.\"{{{  bind string=[editing-command]
.IP "\fBbind\fP \fIstring\fP\fB=\fP[\fIediting-command\fP]"
The specified editing command is bound to the given \fBstring\fP, which
should consist of a control character (which may be written using caret
notation \fB^\fP\fIX\fP), optionally preceded by one of the two prefix
characters.  Future input of the \fIstring\fP will cause the editing
command to be immediately invoked.  Note that although only two prefix
characters (usually ESC and ^X) are supported, some multi-character
sequences can be supported.  The following binds the arrow keys on
an ANSI terminal, or xterm (these are in the default bindings).  Of course
some escape sequences won't work out quite this nicely:
.sp
.RS
\fBbind '^[['=prefix\-2
.br
bind '^XA'=up\-history
.br
bind '^XB'=down\-history
.br
bind '^XC'=forward\-char
.br
bind '^XD'=backward\-char\fP
.RE
.\"}}}
.\"{{{  bind -l
.IP "\fBbind \-l\fP"
d3836 28
a3863 21
.\"}}}
.\"{{{  bind -m string=[substitute]
.IP "\fBbind \-m\fP \fIstring\fP\fB=\fP[\fIsubstitute\fP]"
The specified input \fIstring\fP will afterwards be immediately
replaced by the given \fIsubstitute\fP string, which may contain
editing commands.
.\"}}}
.PP
The following is a list of editing commands available.
Each description starts with the name of the command,
a \fIn\fP, if the command can be prefixed with a count,
and any keys the command is bound to by default (written using
caret notation, \fIe.g.\fP, ASCII ESC character is written as ^[).
A count prefix for a command is entered using the sequence
\fB^[\fP\fIn\fP, where \fIn\fP is a sequence of 1 or more digits;
unless otherwise specified, if a count is omitted, it defaults to 1.
Note that editing command names are
used only with the \fBbind\fP command.  Furthermore, many editing
commands are useful only on terminals with a visible cursor.  The
default bindings were chosen to resemble corresponding EMACS key
bindings.  The users tty characters (\fIe.g.\fP, ERASE) are bound to
d3865 7
a3871 8
.\"{{{  abort ^G
.IP "\fBabort ^G\fP"
Useful as a response to a request for a \fBsearch-history\fP pattern in
order to abort the search.
.\"}}}
.\"{{{  auto-insert n
.IP "\fBauto-insert\fP \fIn\fP"
Simply causes the character to appear as literal input.  Most ordinary
d3873 12
a3884 12
.\"}}}
.\"{{{  backward-char	n ^B
.IP "\fBbackward-char\fP  \fIn\fP \fB^B\fP"
Moves the cursor backward \fIn\fP characters.
.\"}}}
.\"{{{  backward-word  n ^[B
.IP "\fBbackward-word\fP  \fIn\fP \fB^[B\fP"
Moves the cursor backward to the beginning of a word; words consist
of alphanumerics, underscore (_) and dollar ($).
.\"}}}
.\"{{{  beginning-of-history ^[<
.IP "\fBbeginning-of-history ^[<\fP"
d3886 1
a3886 3
.\"}}}
.\"{{{  beginning-of-line ^A
.IP "\fBbeginning-of-line ^A\fP"
d3888 29
a3916 35
.\"}}}
.\"{{{  capitalize-word n ^[c, ^[C
.IP "\fBcapitalize-word\fP \fIn\fP \fB^[c\fP, \fB^[C\fP"
Uppercase the first character in the next \fIn\fP words,
leaving the cursor past the end of the last word.
.\"}}}
.\"{{{  comment ^[#
If the current line does not begin with a comment character, one
is added at the beginning of the line and the line is entered (as if
return had been pressed), otherwise the existing comment characters
are removed and the cursor is placed at the beginning of the line.
.\"}}}
.\"{{{  complete ^[^[
.IP "\fBcomplete ^[^[\fP"
Automatically completes as much as is unique of the command name
or the file name containing the cursor.  If the entire remaining command
or file name is unique a space is printed after its completion, unless
it is a directory name in which case \fB/\fP is appended.  If there is
no command or file name with the current partial word as its
prefix, a bell character is output (usually causing a audio beep).
.\"}}}
.\"{{{  complete-command ^X^[
.IP "\fBcomplete-command ^X^[\fP"
Automatically completes as much as is unique of the command name
having the partial word up to the cursor as its prefix, as in the
\fBcomplete\fP command described above.
.\"}}}
.\"{{{  complete-file ^[^X
.IP "\fBcomplete-file ^[^X\fP"
Automatically completes as much as is unique of the file name having
the partial word up to the cursor as its prefix, as in the
\fBcomplete\fP command described above.
.\"}}}
.\"{{{  complete-list ^[=
.IP "\fBcomplete-list ^[=\fP"
d3918 36
a3953 30
.\"}}}
.\"{{{  delete-char-backward n ERASE, ^?, ^H
.IP "\fBdelete-char-backward\fP \fIn\fP \fBERASE\fP, \fB^?\fP, \fB^H\fP"
Deletes \fIn\fP characters before the cursor.
.\"}}}
.\"{{{  delete-char-forward n
.IP "\fBdelete-char-forward\fP \fIn\fP"
Deletes \fIn\fP characters after the cursor.
.\"}}}
.\"{{{  delete-word-backward n ^[ERASE, ^[^?, ^[^H, ^[h
.IP "\fBdelete-word-backward\fP \fIn\fP \fB^[ERASE\fP, \fB^[^?\fP, \fB^[^H\fP, \fB^[h\fP"
Deletes \fIn\fP words before the cursor.
.\"}}}
.\"{{{  delete-word-forward n ^[d
.IP "\fBdelete-word-forward\fP \fIn\fP \fB^[d\fP"
Deletes characters after the cursor up to the end of \fIn\fP words.
.\"}}}
.\"{{{  down-history n ^N
.IP "\fBdown-history\fP \fIn\fP \fB^N\fP"
Scrolls the history buffer forward \fIn\fP lines (later).  Each input line
originally starts just after the last entry in the history buffer, so
\fBdown-history\fP is not useful until either \fBsearch-history\fP or
\fBup-history\fP has been performed.
.\"}}}
.\"{{{  downcase-word n ^[L, ^[l
.IP "\fBdowncase-word\fP \fIn\fP \fB^[L\fP, \fB^[l\fP"
Lowercases the next \fIn\fP words.
.\"}}}
.\"{{{  end-of-history ^[>
.IP "\fBend-of-history ^[>\fP"
d3955 1
a3955 3
.\"}}}
.\"{{{  end-of-line ^E
.IP "\fBend-of-line ^E\fP"
d3957 1
a3957 3
.\"}}}
.\"{{{  eot ^_
.IP "\fBeot ^_\fP"
d3960 6
a3965 7
.\"}}}
.\"{{{  eot-or-delete n ^D
.IP "\fBeot-or-delete\fP \fIn\fP \fB^D\fP"
Acts as eot if alone on a line; otherwise acts as delete-char-forward.
.\"}}}
.\"{{{  error
.IP "\fBerror\fP"
d3967 19
a3985 26
.\"}}}
.\"{{{  exchange-point-and-mark ^X^X
.IP "\fBexchange-point-and-mark ^X^X\fP"
Places the cursor where the mark is, and sets the mark to where the
cursor was.
.\"}}}
.\"{{{  expand-file ^[*
.IP "\fBexpand-file ^[*\fP"
Appends a * to the current word and replaces the word with
the result of performing file globbing on the word.
If no files match the pattern, the bell is rung.
.\"}}}
.\"{{{  forward-char n ^F
.IP "\fBforward-char\fP \fIn\fP \fB^F\fP"
Moves the cursor forward \fIn\fP characters.
.\"}}}
.\"{{{  forward-word n ^[f
.IP "\fBforward-word\fP \fIn\fP \fB^[f\fP"
Moves the cursor forward to the end of the \fIn\fPth word.
.\"}}}
.\"{{{  goto-history n ^[g
.IP "\fBgoto-history\fP \fIn\fP \fB^[g\fP"
Goes to history number \fIn\fP.
.\"}}}
.\"{{{  kill-line KILL
.IP "\fBkill-line KILL\fP"
d3987 1
a3987 3
.\"}}}
.\"{{{  kill-region ^W
.IP "\fBkill-region ^W\fP"
d3989 29
a4017 37
.\"}}}
.\"{{{  kill-to-eol n ^K
.IP "\fBkill-to-eol\fP \fIn\fP \fB^K\fP"
Deletes the input from the cursor to the end of the line if \fIn\fP is
not specified, otherwise deletes characters between the cursor and
column \fIn\fP.
.\"}}}
.\"{{{  list ^[?
.IP "\fBlist ^[?\fP"
Prints a sorted, columnated list of command names or file names
(if any) that can complete the partial word containing the cursor.
Directory names have \fB/\fP appended to them.
.\"}}}
.\"{{{  list-command ^X?
.IP "\fBlist-command ^X?\fP"
Prints a sorted, columnated list of command names (if any) that
can complete the partial word containing the cursor.
.\"}}}
.\"{{{  list-file ^X^Y
.IP "\fBlist-file ^X^Y\fP"
Prints a sorted, columnated list of file names (if any) that can
complete the partial word containing the cursor.  File type indicators
are appended as described under \fBlist\fP above.
.\"}}}
.\"{{{  newline ^J and ^M
.IP "\fBnewline ^J\fP, \fB^M\fP"
Causes the current input line to be processed by the shell.  The
current cursor position may be anywhere on the line.
.\"}}}
.\"{{{  newline-and-next ^O
.IP "\fBnewline-and-next ^O\fP"
Causes the current input line to be processed by the shell, and
the next line from history becomes the current line.  This is
only useful after an up-history or search-history.
.\"}}}
.\"{{{  no-op QUIT
.IP "\fBno-op QUIT\fP"
d4019 1
a4019 3
.\"}}}
.\"{{{  prefix-1 ^[
.IP "\fBprefix-1 ^[\fP"
d4021 2
a4022 4
.\"}}}
.\"{{{  prefix-2 ^X and ^[[
.IP "\fBprefix-2 ^X\fP"
.IP "\fBprefix-2 ^[[\fP"
d4024 7
a4030 12
.\"}}}
.\"{{{  prev-hist-word ^[. ^[_
.IP "\fBprev-hist-word\fP \fIn\fP \fB^[.\fP, \fB^[_\fP"
The last (\fIn\fPth) word of the previous command is inserted at the cursor.
.\"}}}
.\"{{{  quote ^^
.IP "\fBquote ^^\fP"
The following character is taken literally rather than as an editing
command.
.\"}}}
.\"{{{  redraw ^L
.IP "\fBredraw ^L\fP"
d4032 19
a4050 23
.\"}}}
.\"{{{  search-character-backward n ^[^]
.IP "\fBsearch-character-backward\fP \fIn\fP \fB^[^]\fP"
Search backward in the current line for the \fIn\fPth occurance of the
next character typed.
.\"}}}
.\"{{{  search-character-forward n ^]
.IP "\fBsearch-character-forward\fP \fIn\fP \fB^]\fP"
Search forward in the current line for the \fIn\fPth occurance of the
next character typed.
.\"}}}
.\"{{{  search-history ^R
.IP "\fBsearch-history ^R\fP"
Enter incremental search mode.  The internal history list is searched
backwards for commands matching the input.  An initial \fB^\fP in the
search string anchors the search.  The abort key will leave search mode.
Other commands will be executed after leaving search mode.  Successive
\fBsearch-history\fP commands continue searching backward to the next
previous occurrence of the pattern.  The history buffer retains only a
finite number of lines; the oldest are discarded as necessary.
.\"}}}
.\"{{{  set-mark-command ^[<space>
.IP "\fBset-mark-command ^[\fP<space>"
d4052 26
a4077 34
.\"}}}
.\"{{{  stuff
.IP "\fBstuff\fP"
On systems supporting it, pushes the bound character back onto the
terminal input where it may receive special processing by the terminal
handler.  This is useful for the BRL \fB^T\fP mini-systat feature, for
example.
.\"}}}
.\"{{{  stuff-reset
.IP "\fBstuff-reset\fP"
Acts like \fBstuff\fP, then aborts input the same as an interrupt.
.\"}}}
.\"{{{  transport-chars ^T
.IP "\fBtranspose-chars ^T\fP"
If at the end of line, or if the \fBgmacs\fP option is set, 
this exchanges the two previous characters; otherwise, it
exchanges the previous and current characters and moves the cursor
one character to the right.
.\"}}}
.\"{{{  up-history n ^P
.IP "\fBup-history\fP \fIn\fP \fB^P\fP"
Scrolls the history buffer backward \fIn\fP lines (earlier).
.\"}}}
.\"{{{  upcase-word n ^[U, ^[u
.IP "\fBupcase-word\fP \fIn\fP \fB^[U\fP, \fB^[u\fP"
Uppercases the next \fIn\fP words.
.\"}}}
.\"{{{  version ^V
.IP "\fBversion ^V\fP"
Display the version of ksh.  The current edit buffer is restored as soon
as any key is pressed (the key is then processed, unless it is a space).
.\"}}}
.\"{{{  yank ^Y
.IP "\fByank ^Y\fP"
d4079 115
a4193 104
.\"}}}
.\"{{{  yank-pop ^[y
.IP "\fByank-pop ^[y\fP"
Immediately after a \fByank\fP, replaces the inserted text string with
the next previous killed text string.
.\"}}}
.\"}}}
.\"{{{  Vi Interactive Input Line Editing
.\"{{{  introduction
.SS "Vi Interactive Input Line Editing"
The vi command line editor in ksh has basically the same commands as the
vi editor (see \fIvi\fP(1)), with the following exceptions:
.nr P2 \n(PD
.IP \ \ \(bu
you start out in insert mode,
.IP \ \ \(bu
there are file name and command completion commands
(\fB=\fP, \fB\e\fP, \fB*\fP, \fB^X\fP, \fB^E\fP, \fB^F\fP and,
optionally, \fB<tab>\fP),
.IP \ \ \(bu
the \fB_\fP command is different (in ksh it is the last argument command,
in vi it goes to the start of the current line),
.IP \ \ \(bu
the \fB/\fP and \fBG\fP commands move in the opposite direction as the \fBj\fP
command
.IP \ \ \(bu
and commands which don't make sense in a single line editor are not available
(\fIe.g.\fP, screen movement commands, ex \fB:\fP commands, \fIetc.\fP).
.nr PD \n(P2
.LP
Note that the \fB^X\fP stands for control-X; also \fB<esc>\fP, \fB<space>\fP
and \fB<tab>\fP are used for escape, space and tab, respectively (no kidding).
.\"}}}
.\"{{{  modes
.PP
Like vi, there are two modes: insert mode and command mode.
In insert mode, most characters are simply put in the buffer at the
current cursor position as they are typed, however, some characters
are treated specially.
In particular, the following characters are taken from current tty settings
(see \fIstty\fP(1)) and have their usual meaning (normal values are in
parentheses):
kill (\fB^U\fP), erase (\fB^?\fP), werase (\fB^W\fP), eof (\fB^D\fP),
intr (\fB^C\fP) and quit (\fB^\e\fP).
In addition to the above, the following characters are also treated
specially in insert mode:
.TS
expand;
afB lw(4.5i).
^H	T{
erases previous character
T}
^V	T{
literal next: the next character typed is not treated specially (can be
used to insert the characters being described here)
T}
^J ^M	T{
end of line: the current line is read, parsed and executed by the shell
T}
<esc>	T{
puts the editor in command mode (see below)
T}
^E	T{
command and file name enumeration (see below)
T}
^F	T{
command and file name completion (see below).
If used twice in a row, the list of possible completions is displayed;
if used a third time, the completion is undone.
T}
^X	T{
command and file name expansion (see below)
T}
<tab>	T{
optional file name and command completion (see \fB^F\fP above), enabled with
\fBset \-o vi-tabcomplete\fP
T}
.TE
.\"}}}
.\"{{{  display
.PP
If a line is longer that the screen width (see \fBCOLUMNS\fP parameter),
a \fB>\fP, \fB+\fP or \fB<\fP character is displayed in the last column
indicating that there are more characters after, before and after, or
before the current position, respectively.
The line is scrolled horizontally as necessary.
.\"}}}
.\"{{{  command mode
.PP
In command mode, each character is interpreted as a command.
Characters that don't correspond to commands, are illegal combinations of
commands or are commands that can't be carried out all cause beeps.
In the following command descriptions, a \fIn\fP indicates the
command may be prefixed by a number (\fIe.g.\fP, \fB10l\fP moves right 10
characters); if no number prefix is used, \fIn\fP is assumed to be 1
unless otherwise specified.
The term `current position' refers to the position between the cursor
and the character preceding the cursor.
A `word' is a sequence of letters, digits and underscore characters or a
sequence of non-letter, non-digit, non-underscore, non-white-space characters
(\fIe.g.\fP, ab2*&^ contains two words) and a `big-word' is a sequence of
non-white-space characters.
.\"{{{  Special ksh vi commands
.IP "Special ksh vi commands"
d4196 312
a4507 173
.RS
.IP "\fIn\fP\fB_\fP"
insert a space followed by the \fIn\fPth big-word from the last command in the
history at the current position and enter insert mode; if \fIn\fP is not
specified, the last word is inserted.
.IP "\fB#\fP"
insert the comment character (\fB#\fP) at the start of the current line and
return the line to the shell (equivalent to \fBI#^J\fP).
.IP "\fIn\fP\fBg\fP"
like \fBG\fP, except if \fIn\fP is not specified, it goes to the most recent 
remembered line.
.IP "\fIn\fP\fBv\fP"
edit line \fIn\fP using the vi editor; 
if \fIn\fP is not specified, the current line is edited.
The actual command executed is
`\fBfc \-e ${VISUAL:-${EDITOR:-vi}}\fP \fIn\fP'.
.IP "\fB*\fP and \fB^X\fP"
command or file name expansion is applied to the current big-word
(with an appended *, if the word contains no file globing characters) - the
big-word is replaced with the resulting words.
If the current big-word is the first on the line (or follows one
of the following characters: \fB;\fP, \fB|\fP, \fB&\fP, \fB(\fP, \fB)\fP)
and does not contain a slash (\fB/\fP) then command expansion is done,
otherwise file name expansion is done.
Command expansion will match the big-word against all aliases, functions
and built-in commands as well as any executable files found by searching
the directories in the \fBPATH\fP parameter.
File name expansion matches the big-word against the files in the
current directory.
After expansion, the cursor is placed just past the last word and the editor
is in insert mode.
.IP "\fIn\fP\fB\e\fP, \fIn\fP\fB^F\fP, \fIn\fP\fB<tab>\fP and \fIn\fP\fB<esc>\fP"
command/file name completion: 
replace the current big-word with the longest unique
match obtained after performing command/file name expansion.
\fB<tab>\fP is only recognized if the \fBvi-tabcomplete\fP option is set,
while \fB<esc>\fP is only recognized if the \fBvi-esccomplete\fP option
is set (see \fBset \-o\fP).
If \fIn\fP is specified, the \fIn\fPth possible
completion is selected (as reported by the command/file name enumeration
command).
.IP "\fB=\fP and \fB^E\fP"
command/file name enumeration: list all the commands or files that match
the current big-word.
.IP "\fB^V\fP"
display the version of pdksh; it is displayed until another key is pressed
(this key is ignored).
.IP "\fB@@\fP\fIc\fP"
macro expansion: execute the commands found in the alias _\fIc\fP.
.RE
.\"}}}
.\"{{{  Intra-line movement commands
.IP "Intra-line movement commands"
.RS
.IP "\fIn\fP\fBh\fP and \fIn\fP\fB^H\fP"
move left \fIn\fP characters.
.IP "\fIn\fP\fBl\fP and \fIn\fP\fB<space>\fP"
move right \fIn\fP characters.
.IP "\fB0\fP"
move to column 0.
.IP "\fB^\fP"
move to the first non white-space character.
.IP "\fIn\fP\fB|\fP"
move to column \fIn\fP.
.IP "\fB$\fP"
move to the last character.
.IP "\fIn\fP\fBb\fP"
move back \fIn\fP words.
.IP "\fIn\fP\fBB\fP"
move back \fIn\fP big-words.
.IP "\fIn\fP\fBe\fP"
move forward to the end the word, \fIn\fP times.
.IP "\fIn\fP\fBE\fP"
move forward to the end the big-word, \fIn\fP times.
.IP "\fIn\fP\fBw\fP"
move forward \fIn\fP words.
.IP "\fIn\fP\fBW\fP"
move forward \fIn\fP big-words.
.IP "\fB%\fP"
find match: the editor looks forward for the nearest parenthesis,
bracket or brace and then moves the to the matching parenthesis, bracket or
brace.
.IP "\fIn\fP\fBf\fP\fIc\fP"
move forward to the \fIn\fPth occurrence of the character \fIc\fP.
.IP "\fIn\fP\fBF\fP\fIc\fP"
move backward to the \fIn\fPth occurrence of the character \fIc\fP.
.IP "\fIn\fP\fBt\fP\fIc\fP"
move forward to just before the \fIn\fPth occurrence of the character \fIc\fP.
.IP "\fIn\fP\fBT\fP\fIc\fP"
move backward to just before the \fIn\fPth occurrence of the character \fIc\fP.
.IP "\fIn\fP\fB;\fP"
repeats the last \fBf\fP, \fBF\fP, \fBt\fP or \fBT\fP command.
.IP "\fIn\fP\fB,\fP"
repeats the last \fBf\fP, \fBF\fP, \fBt\fP or \fBT\fP command, but moves
in the opposite direction.
.RE
.\"}}}
.\"{{{  Inter-line movement commands
.IP "Inter-line movement commands"
.RS
.IP "\fIn\fP\fBj\fP and \fIn\fP\fB+\fP and \fIn\fP\fB^N\fP"
move to the \fIn\fPth next line in the history.
.IP "\fIn\fP\fBk\fP and \fIn\fP\fB-\fP and \fIn\fP\fB^P\fP"
move to the \fIn\fPth previous line in the history.
.IP "\fIn\fP\fBG\fP"
move to line \fIn\fP in the history; if \fIn\fP is not specified, the
number first remembered line is used.
.IP "\fIn\fP\fBg\fP"
like \fBG\fP, except if \fIn\fP is not specified, it goes to the most recent 
remembered line.
.IP "\fIn\fP\fB/\fP\fIstring\fP"
search backward through the history for the \fIn\fPth line containing
\fIstring\fP; if \fIstring\fP starts with \fB^\fP, the remainder of the
string must appear at the start of the history line for it to match.
.IP "\fIn\fP\fB?\fP\fIstring\fP"
same as \fB/\fP, except it searches forward through the history.
.IP "\fIn\fP\fBn\fP"
search for the \fIn\fPth occurrence of the last search string; the
direction of the search is the same as the last search.
.IP "\fIn\fP\fBN\fP"
search for the \fIn\fPth occurrence of the last search string; the
direction of the search is the opposite of the last search.
.RE
.\"}}}
.\"{{{  Edit commands
.IP "Edit commands"
.RS
.IP "\fIn\fP\fBa\fP"
append text \fIn\fP times: goes into insert mode just after the current
position.
The append is only replicated if command mode is re-entered (\fIi.e.\fP,
<esc> is used).
.IP "\fIn\fP\fBA\fP"
same as \fBa\fP, except it appends at the end of the line.
.IP "\fIn\fP\fBi\fP"
insert text \fIn\fP times: goes into insert mode at the current
position.
The insertion is only replicated if command mode is re-entered (\fIi.e.\fP,
<esc> is used).
.IP "\fIn\fP\fBI\fP"
same as \fBi\fP, except the insertion is done just before the first non-blank
character.
.IP "\fIn\fP\fBs\fP"
substitute the next \fIn\fP characters (\fIi.e.\fP, delete the characters
and go into insert mode).
.IP "\fBS\fP"
substitute whole line: all characters from the first non-blank character
to the end of line are deleted and insert mode is entered.
.IP "\fIn\fP\fBc\fP\fImove-cmd\fP"
change from the current position to the position resulting from \fIn\fP
\fImove-cmd\fPs (\fIi.e.\fP, delete the indicated region and go into insert
mode);
if \fImove-cmd\fP is \fBc\fP, the line starting from the first non-blank
character is changed.
.IP "\fBC\fP"
change from the current position to the end of the line (\fIi.e.\fP, delete to
the end of the line and go into insert mode).
.IP "\fIn\fP\fBx\fP"
delete the next \fIn\fP characters.
.IP "\fIn\fP\fBX\fP"
delete the previous \fIn\fP characters.
.IP "\fBD\fP"
delete to the end of the line.
.IP "\fIn\fP\fBd\fP\fImove-cmd\fP"
delete from the current position to the position resulting from
\fIn\fP \fImove-cmd\fPs;
\fImove-cmd\fP is a movement command (see above) or \fBd\fP, in which case
the current line is deleted.
.IP "\fIn\fP\fBr\fP\fIc\fP"
replace the next \fIn\fP characters with the character \fIc\fP.
.IP "\fIn\fP\fBR\fP"
replace: enter insert mode but overwrite existing characters instead of
inserting before existing characters.  The replacement is repeated \fIn\fP
d4509 77
a4585 67
.IP "\fIn\fP\fB~\fP"
change the case of the next \fIn\fP characters.
.IP "\fIn\fP\fBy\fP\fImove-cmd\fP"
yank from the current position to the position resulting from \fIn\fP
\fImove-cmd\fPs into the yank buffer; if \fImove-cmd\fP is \fBy\fP, the
whole line is yanked.
.IP "\fBY\fP"
yank from the current position to the end of the line.
.IP "\fIn\fP\fBp\fP"
paste the contents of the yank buffer just after the current position,
\fIn\fP times.
.IP "\fIn\fP\fBP\fP"
same as \fBp\fP, except the buffer is pasted at the current position.
.RE
.\"}}}
.\"{{{  Miscellaneous vi commands
.IP "Miscellaneous vi commands"
.RS
.IP "\fB^J\fP and \fB^M\fP"
the current line is read, parsed and executed by the shell.
.IP "\fB^L\fP and \fB^R\fP"
redraw the current line.
.IP "\fIn\fP\fB.\fP"
redo the last edit command \fIn\fP times.
.IP "\fBu\fP"
undo the last edit command.
.IP "\fBU\fP"
undo all changes that have been made to the current line.
.IP "\fIintr\fP and \fIquit\fP"
the interrupt and quit terminal characters cause the current line to
be deleted and a new prompt to be printed.
.RE
.\"Has all vi commands except:
.\"    movement: { } [[ ]] ^E ^Y ^U ^D ^F ^B H L M ()
.\"    tag commands: ^T ^]
.\"    mark commands: m ` ' 
.\"    named-buffer commands: " @@
.\"    file/shell/ex-commands: Q ZZ ^^ : ! &
.\"    multi-line change commands: o O J
.\"    shift commands: << >>
.\"    status command: ^G
.\"}}}
.\"}}}
.\"}}}
.\"}}}
.\"{{{  Files
.SH FILES
~/.profile
.br
/etc/profile
.br
/etc/suid_profile
.\"}}}
.\"{{{  Bugs
.SH BUGS
Any bugs in pdksh should be reported to pdksh@@cs.mun.ca.  Please
include the version of pdksh (echo $KSH_VERSION shows it), the machine,
operating system and compiler you are using and a description of how to
repeat the bug (a small shell script that demonstrates the bug is
best).  The following, if relevant (if you are not sure, include them),
can also helpful: options you are using (both options.h options and set
\-o options) and a copy of your config.h (the file generated by the
configure script).  New versions of pdksh can be obtained from
ftp://ftp.cs.mun.ca/pub/pdksh/.
.\"}}}
.\"{{{  Authors
.SH AUTHORS
d4587 9
a4595 28
Charles Forsyth and parts of the BRL shell by Doug A.\& Gwyn, Doug Kingston,
Ron Natalie, Arnold Robbins, Lou Salkind and others.  The first release
of pdksh was created by Eric Gisin, and it was subsequently maintained by
John R.\& MacMillan (chance!john@@sq.sq.com), and
Simon J.\& Gerraty (sjg@@zen.void.oz.au).  The current maintainer is
Michael Rendell (michael@@cs.mun.ca).
The CONTRIBUTORS file in the source distribution contains a more complete
list of people and their part in the shell's development.
.\"}}}
.\"{{{  See also
.SH "SEE ALSO"
awk(1), 
sh(1),
csh(1), ed(1), getconf(1), getopt(1), sed(1), stty(1), vi(1),
dup(2), execve(2), getgid(2), getuid(2), open(2), pipe(2), wait(2),
getopt(3), rand(3), signal(3), system(3),
environ(5)
.PP
.IR "The KornShell Command and Programming Language" ,
Morris Bolsky and David Korn, 1989, ISBN 0-13-516972-0.
.PP
.\" XXX ISBN missing
.IR "UNIX Shell Programming" ,
Stephen G.\& Kochan, Patrick H.\& Wood, Hayden.
.PP
.IR "IEEE Standard for information Technology \- Portable Operating System Interface (POSIX) \- Part 2: Shell and Utilities" ,
IEEE Inc, 1993, ISBN 1-55937-255-9.
.\"}}}
@


1.13
log
@Updates from pdksh-unstable-5.2.13.7.  Most notable change is:
    trap: exit traps now executed in subshells (without explicit exit call).
See the Changelog for a full list of changes.
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.12 1998/10/29 04:09:20 millert Exp $
d2019 1
a2019 1
to be obliveous of symlink links to directories).
@


1.12
log
@Bug fixes from pdksh-unstable-5.2.13.4, including "official" versions of
some that we had already fixed locally.
 o typeset -f FUNC doesn't print follows command (and expression) substitutions.
 o when re-allocating memory, too much may be copied from old memory.
 o set -o printed some options sans names.
 o emacs mode: <esc>. in very fist command causes core dump.
 o pdksh dumps core after a cd command.
 o typeset -i reports on array elements that have no value
   (at&t ksh reports on array base name - no index).
 o ulimit -ctn unlimittttted kills shell (resource exceeded).
 o ". /dev/null" says access denied.
 o flag field in aliases incorrectly changed (all flags set instead of
   clearing ISSET) in exec.c(flushcom).
 o ${#array[*]} prints largest index instead of number of (set) elements
   in an array (ksh88 does the former).
 o sys_siglist[] doesn't always have NSIG non-null entries...
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.11 1998/09/27 02:49:24 aaron Exp $
d1135 2
a1136 2
file name generation are all performed on the \fIfile\fP, \fImarker\fP and
\fIfd\fP arguments of redirections.
@


1.11
log
@preceeding -> preceding
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.10 1998/09/07 16:44:32 aaron Exp $
d1594 4
a1597 2
is set, it lists the search path for the directory containing \fIdir\fP.  A
null path means the current directory.  If \fIdir\fP is found in any
d3296 1
a3296 1
ftp.cs.mun.ca:pub/pdksh/.
@


1.10
log
@More man page fixes. Particularly fix uses of it's/its, affect/effect,
then/than and such. Other miscellaneous problems fixed across these source
files.
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.9 1998/09/01 16:38:15 deraadt Exp $
d1362 1
a1362 1
parameter assignments preceeding function calls are not kept in
@


1.9
log
@more man page fixes; aaron@@ug.cs.dal.ca
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.8 1998/07/24 20:50:02 deraadt Exp $
d1556 1
a1556 1
(exporting an alias has no affect).
d1560 1
a1560 1
(exporting an alias currently has no affect).
@


1.8
log
@fix spelling of separate; aaron@@ug.cs.dal.ca
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.7 1998/06/25 19:02:03 millert Exp $
d1296 1
a1296 1
which closes its copy of the write portion of the co-processs output when the
@


1.7
log
@pdksh-5.2.13 + local changes
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.6 1998/03/27 20:20:41 deraadt Exp $
d1223 1
a1223 1
seperates two arithmetic expressions; the left hand side is evaluated first,
@


1.6
log
@do not nest RS/RE
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.5 1998/03/18 03:04:54 marc Exp $
d719 5
a723 3
In interactive use, this parameter is set to the last word of the
previous command.  When a command is executed, this parameter is set to
the full path of the command and is placed in the command's environment.
d1365 5
d1460 5
d1540 17
a1556 5
.\"{{{  alias [ -d | -t [ -r ] ] [-x] [name1[=value1] ...]
.IP "\fBalias\fP [ \fB\-d\fP | \fB\-t\fP [\fB\-r\fP] ] [\fB\-x\fP] [\fIname1\fP[\fB=\fP\fIvalue1\fP] ...]"
Without arguments, \fBalias\fP lists all aliases and their values.  For
any name without a value, its value is listed.  Any name with a value
defines an alias (see Aliases above).
d1674 2
a1675 1
in this way are not made available to other executed commands (\fIi.e.\fP,
d1677 2
d1737 1
a1737 3
Arguments containing options must all start with either a \fB\-\fP or
a \fB+\fP, options that do not take arguments may be grouped in a single
argument.
d2168 1
a2168 1
\-t [\fIfd\fP]	T{
d2170 3
a2172 1
Default value of \fIfd\fP is 1.
d2177 1
a2177 1
\-z \fIstring\fP	T{
d2180 1
a2180 1
\-n \fIstring\fP	T{
d2183 1
a2183 1
\fIstring\fP = \fIstring\fP	T{
d2186 1
a2186 1
\fIstring\fP == \fIstring\fP	T{
d2189 1
a2189 1
\fIstring\fP != \fIstring\fP	T{
d2192 1
a2192 1
\fInumber\fP \-eq \fInumber\fP	T{
d2195 1
a2195 1
\fInumber\fP \-ne \fInumber\fP	T{
d2198 1
a2198 1
\fInumber\fP \-ge \fInumber\fP	T{
d2201 1
a2201 1
\fInumber\fP \-gt \fInumber\fP	T{
d2204 1
a2204 1
\fInumber\fP \-le \fInumber\fP	T{
d2207 1
a2207 1
\fInumber\fP \-lt \fInumber\fP	T{
d2283 2
a2284 2
.\"{{{  typeset [[+-Ulrtux] [-L[n]] [-R[n]] [-Z[n]] [-i[n]] | -f [-tux]] [name[=value] ...]
.IP "\fBtypeset\fP [[\(+-Ulrtux] [\fB\-L\fP[\fIn\fP]] [\fB\-R\fP[\fIn\fP]] [\fB\-Z\fP[\fIn\fP]] [\fB\-i\fP[\fIn\fP]] | \fB\-f\fP [\fB\-tux\fP]] [\fIname\fP[\fB=\fP\fIvalue\fP] ...]"
d2348 5
d3301 1
a3301 1
was created by Eric Gisin, and it was subsequently maintained by
@


1.5
log
@Document what sh/ksh does when the cd command matches a non empty path
in the CDPATH environment variable.
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.4 1998/01/17 18:53:46 millert Exp $
a2060 1
.RS
a2061 1
.RE
@


1.4
log
@Don't document ulimit flags that don't exist
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.3 1996/11/21 08:18:19 downsj Exp $
d731 3
a733 1
the current directory is not searched.
d1570 6
a1575 4
is set, it lists the search path for the directory containing
\fIdir\fP.  A null path means the current directory.  If \fIdir\fP is
missing, the home directory \fB$HOME\fP is used.  If \fIdir\fP is
\fB\-\fP, the previous working directory is used (see OLDPWD parameter).
@


1.3
log
@sync
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.2 1996/11/21 07:59:30 downsj Exp $
d2346 1
a2346 1
.\"{{{  ulimit [-acdfHlmnpsStvw] [value]
a2385 6
.IP \fB\-v\fP
Impose a limit of \fIn\fP kbytes on the amount of virtual memory used;
on some systems this is the maximum allowable virtual address (in bytes,
not kbytes).
.IP \fB\-w\fP
Impose a limit of \fIn\fP kbytes on the amount of swap space used.
@


1.2
log
@Update to 5.2.12.
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1tbl,v 1.1 1996/10/01 09:05:21 downsj Exp $
d21 1
a21 1
.TH KSH 1 "August 19, 1995" "" "User commands"
d1151 2
a1152 1
Integer arithmetic expressions can be used with the \fBlet\fP command,
@


1.1
log
@Move ksh.1 to ksh.1tbl, fixing all of it's problems in one massive paradigm
shift.

Or something like that.
@
text
@d2 1
a2 1
.\"	$OpenBSD: ksh.1,v 1.3 1996/10/01 02:05:37 downsj Exp $
d1825 4
a1828 3
A prompt, which is printed to standard error before any input is read, may be
specified by appending and question mark and the prompt to the
first parameter (\fIe.g.\fP, \fBread nfoo?'number of foos: '\fP).
@

