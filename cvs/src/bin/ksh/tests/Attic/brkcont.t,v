head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.0.70
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.68
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.66
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.64
	OPENBSD_5_0:1.1.0.62
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.60
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.58
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.54
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.56
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.52
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.50
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.48
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.46
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.44
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.42
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.40
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.38
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.36
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.34
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.32
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.30
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.28
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.26
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.24
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.22
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.20
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.18
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.16
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.12.02.20.41.01;	author millert;	state dead;
branches;
next	1.1;

1.1
date	96.08.14.08.05.14;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Move ksh test files into regressMove ksh test files into regressMove ksh test files into regress.
@
text
@name: break-1
description:
	See if break breaks out of loops
stdin:
	for i in a b c; do echo $i; break; echo bad-$i; done
	echo end-1
	for i in a b c; do echo $i; break 1; echo bad-$i; done
	echo end-2
	for i in a b c; do
	    for j in x y z; do
		echo $i:$j
		break
		echo bad-$i
	    done
	    echo end-$i
	done
	echo end-3
expected-stdout:
	a
	end-1
	a
	end-2
	a:x
	end-a
	b:x
	end-b
	c:x
	end-c
	end-3
---

name: break-2
description:
	See if break breaks out of nested loops
stdin:
	for i in a b c; do
	    for j in x y z; do
		echo $i:$j
		break 2
		echo bad-$i
	    done
	    echo end-$i
	done
	echo end
expected-stdout:
	a:x
	end
---


name: break-3
description:
	What if break used outside of any loops
	(ksh88,ksh93 don't print error messages here)
stdin:
	break
expected-stderr-pattern:
	/.*break.*/
---


name: break-4
description:
	What if break N used when only N-1 loops
	(ksh88,ksh93 don't print error messages here)
stdin:
	for i in a b c; do echo $i; break 2; echo bad-$i; done
	echo end
expected-stdout:
	a
	end
expected-stderr-pattern:
	/.*break.*/
---


name: break-5
description:
	Error if break argument isn't a number
stdin:
	for i in a b c; do echo $i; break abc; echo more-$i; done
	echo end
expected-stdout:
	a
expected-exit: e != 0
expected-stderr-pattern:
	/.*break.*/
---


name: continue-1
description:
	See if continue continues loops
stdin:
	for i in a b c; do echo $i; continue; echo bad-$i ; done
	echo end-1
	for i in a b c; do echo $i; continue 1; echo bad-$i; done
	echo end-2
	for i in a b c; do
	    for j in x y z; do
		echo $i:$j
		continue
		echo bad-$i-$j
	    done
	    echo end-$i
	done
	echo end-3
expected-stdout:
	a
	b
	c
	end-1
	a
	b
	c
	end-2
	a:x
	a:y
	a:z
	end-a
	b:x
	b:y
	b:z
	end-b
	c:x
	c:y
	c:z
	end-c
	end-3
---


name: continue-2
description:
	See if continue breaks out of nested loops
stdin:
	for i in a b c; do
	    for j in x y z; do
		echo $i:$j
		continue 2
		echo bad-$i-$j
	    done
	    echo end-$i
	done
	echo end
expected-stdout:
	a:x
	b:x
	c:x
	end
---


name: continue-3
description:
	What if continue used outside of any loops
	(ksh88,ksh93 don't print error messages here)
stdin:
	continue
expected-stderr-pattern:
	/.*continue.*/
---


name: continue-4
description:
	What if continue N used when only N-1 loops
	(ksh88,ksh93 don't print error messages here)
stdin:
	for i in a b c; do echo $i; continue 2; echo bad-$i; done
	echo end
expected-stdout:
	a
	b
	c
	end
expected-stderr-pattern:
	/.*continue.*/
---


name: continue-5
description:
	Error if continue argument isn't a number
stdin:
	for i in a b c; do echo $i; continue abc; echo more-$i; done
	echo end
expected-stdout:
	a
expected-exit: e != 0
expected-stderr-pattern:
	/.*continue.*/
---


@


1.1
log
@Add these to the repository, but don't do anything with them; they
need perl (at least for now).
@
text
@@

