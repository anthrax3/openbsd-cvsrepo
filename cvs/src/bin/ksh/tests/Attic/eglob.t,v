head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.62
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.60
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.58
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.56
	OPENBSD_5_0:1.2.0.54
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.52
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.50
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.46
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.48
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.44
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.42
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.40
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.38
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.36
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.34
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.32
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.30
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.28
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.26
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.24
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.22
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.20
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.18
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.16
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.12.02.20.41.01;	author millert;	state dead;
branches;
next	1.2;

1.2
date	98.06.25.19.02.35;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.14.08.05.17;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Move ksh test files into regressMove ksh test files into regressMove ksh test files into regress.
@
text
@name: eglob-bad-1
description:
	Check that globbing isn't done when glob has syntax error
file-setup: file 644 "abcx"
file-setup: file 644 "abcz"
file-setup: file 644 "bbc"
stdin:
	echo !([*)*
	echo +(a|b[)*
expected-stdout:
	!([*)*
	+(a|b[)*
---

name: eglob-bad-2
description:
	Check that globbing isn't done when glob has syntax error
	(at&t ksh fails this test)
file-setup: file 644 "abcx"
file-setup: file 644 "abcz"
file-setup: file 644 "bbc"
stdin:
	echo [a*(]*)z
expected-stdout:
	[a*(]*)z
---

name: eglob-infinite-plus
description:
	Check that shell doesn't go into infinite loop expanding +(...)
	expressions.
file-setup: file 644 "abc"
time-limit: 3
stdin:
	echo +()c
	echo +()x
	echo +(*)c
	echo +(*)x
expected-stdout:
	+()c
	+()x
	abc
	+(*)x
---

name: eglob-subst-1
description:
	Check that eglobbing isn't done on substitution results
file-setup: file 644 "abc"
stdin:
	x='@@(*)'
	echo $x
expected-stdout:
	@@(*)
---

name: eglob-nomatch-1
description:
	Check that the pattern doesn't match
stdin:
	echo 1: no-file+(a|b)stuff
	echo 2: no-file+(a*(c)|b)stuff
	echo 3: no-file+((((c)))|b)stuff
expected-stdout:
	1: no-file+(a|b)stuff
	2: no-file+(a*(c)|b)stuff
	3: no-file+((((c)))|b)stuff
---

name: eglob-match-1
description:
	Check that the pattern matches correctly
file-setup: file 644 "abd"
file-setup: file 644 "acd"
file-setup: file 644 "abac"
stdin:
	echo 1: a+(b|c)d
	echo 2: a!(@@(b|B))d
	echo 3: *(a(b|c))		# (...|...) can be used within X(..)
	echo 4: a[b*(foo|bar)]d		# patterns not special inside [...]
expected-stdout:
	1: abd acd
	2: acd
	3: abac
	4: abd
---

name: eglob-case-1
description:
	Simple negation tests
stdin:
	case foo in !(foo|bar)) echo yes;; *) echo no;; esac
	case bar in !(foo|bar)) echo yes;; *) echo no;; esac
expected-stdout:
	no
	no
---

name: eglob-case-2
description:
	Simple kleene tests
stdin:
	case foo in *(a|b[)) echo yes;; *) echo no;; esac
	case foo in *(a|b[)|f*) echo yes;; *) echo no;; esac
	case '*(a|b[)' in *(a|b[)) echo yes;; *) echo no;; esac
expected-stdout:
	no
	yes
	yes
---

name: eglob-trim-1
description:
	Eglobing in trim expressions...
	(at&t ksh fails this - docs say # matches shortest string, ## matches
	longest...)
stdin:
	x=abcdef
	echo 1: ${x#a|abc}
	echo 2: ${x##a|abc}
	echo 3: ${x%def|f}
	echo 4: ${x%%f|def}
expected-stdout:
	1: bcdef
	2: def
	3: abcde
	4: abc
---

name: eglob-trim-2
description:
	Check eglobing works in trims...
stdin:
	x=abcdef
	echo 1: ${x#*(a|b)cd}
	echo 2: "${x#*(a|b)cd}"
	echo 3: ${x#"*(a|b)cd"}
	echo 4: ${x#a(b|c)}
expected-stdout:
	1: ef
	2: ef
	3: abcdef
	4: cdef
---

@


1.2
log
@pdksh-5.2.13 + local changes
@
text
@@


1.1
log
@Add these to the repository, but don't do anything with them; they
need perl (at least for now).
@
text
@d4 3
a6 2
perl-setup:
	&touch("abcx", "abcz", "bbc");
d19 3
a21 2
perl-setup:
	&touch("abcx", "abcz", "bbc");
d32 1
a32 2
perl-setup:
	&touch("abc");
d49 1
a49 2
perl-setup:
	&touch("abc");
d61 7
a67 5
	echo no-file+(a|b)stuff
	echo no-file+(a*(c)|b)stuff
expected-stdout:
	no-file+(a|b)stuff
	no-file+(a*(c)|b)stuff
d73 13
a85 10
perl-setup:
	&touch("abd", "acd");
stdin:
	echo a+(b|c)d
	echo a!(@@(b|B))d
	echo a[b*(foo|bar)]d
expected-stdout:
	abd acd
	acd
	abd
d135 9
a143 7
	echo ${x#*(a|b)cd}
	echo "${x#*(a|b)cd}"
	echo ${x#"*(a|b)cd"}
expected-stdout:
	ef
	ef
	abcdef
@

