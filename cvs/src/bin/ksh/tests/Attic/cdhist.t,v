head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.60
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.58
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.56
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.54
	OPENBSD_5_0:1.2.0.52
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.50
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.48
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.44
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.46
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.42
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.40
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.38
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.36
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.34
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.32
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.30
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.28
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.26
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.24
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.22
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.20
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.18
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.16
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.14
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.12.02.20.41.01;	author millert;	state dead;
branches;
next	1.2;

1.2
date	99.01.19.20.41.58;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.14.08.05.16;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Move ksh test files into regressMove ksh test files into regressMove ksh test files into regress.
@
text
@name: cd-history
description:
	Test someone's CD history package (uses arrays)
# Fails on OS/2, since directory names are prepended with drive letter.
category: !os:os2
stdin:
	# go to known place before doing anything
	cd /
	
	alias cd=_cd
	function _cd
	{
		typeset -i cdlen i
		typeset t
	
		if [ $# -eq 0 ]
		then
			set -- $HOME
		fi
	
		if [ "$CDHISTFILE" -a -r "$CDHISTFILE" ] # if directory history exists
		then
			typeset CDHIST
			i=-1
			while read -r t			# read directory history file
			do
				CDHIST[i=i+1]=$t
			done <$CDHISTFILE
		fi
	
		if [ "${CDHIST[0]}" != "$PWD" -a "$PWD" != "" ]
		then
			_cdins				# insert $PWD into cd history
		fi
	
		cdlen=${#CDHIST[*]}			# number of elements in history
	
		case "$@@" in
		-)					# cd to new dir
			if [ "$OLDPWD" = "" ] && ((cdlen>1))
			then
				'print' ${CDHIST[1]}
				'cd' ${CDHIST[1]}
				_pwd
			else
				'cd' $@@
				_pwd
			fi
			;;
		-l)					# print directory list
			typeset -R3 num
			((i=cdlen))
			while (((i=i-1)>=0))
			do
				num=$i
				'print' "$num ${CDHIST[i]}"
			done
			return
			;;
		-[0-9]|-[0-9][0-9])			# cd to dir in list
			if (((i=${1#-})<cdlen))
			then
				'print' ${CDHIST[i]}
				'cd' ${CDHIST[i]}
				_pwd
			else
				'cd' $@@
				_pwd
			fi
			;;
		-*)					# cd to matched dir in list
			t=${1#-}
			i=1
			while ((i<cdlen))
			do
				case ${CDHIST[i]} in
				*$t*)
					'print' ${CDHIST[i]}
					'cd' ${CDHIST[i]}
					_pwd
					break
					;;
				esac
				((i=i+1))
			done
			if ((i>=cdlen))
			then
				'cd' $@@
				_pwd
			fi
			;;
		*)					# cd to new dir
			'cd' $@@
			_pwd
			;;
		esac
	
		_cdins					# insert $PWD into cd history
	
		if [ "$CDHISTFILE" ]
		then
			cdlen=${#CDHIST[*]}		# number of elements in history
	
			i=0
			while ((i<cdlen))
			do
				'print' -r ${CDHIST[i]}	# update directory history
				((i=i+1))
			done >$CDHISTFILE
		fi
	}
	
	function _cdins					# insert $PWD into cd history
	{						# meant to be called only by _cd
		typeset -i i
	
		((i=0))
		while ((i<${#CDHIST[*]}))		# see if dir is already in list
		do
			if [ "${CDHIST[$i]}" = "$PWD" ]
			then
				break
			fi
			((i=i+1))
		done
	
		if ((i>22))				# limit max size of list
		then
			i=22
		fi
	
		while (((i=i-1)>=0))			# bump old dirs in list
		do
			CDHIST[i+1]=${CDHIST[i]}
		done
	
		CDHIST[0]=$PWD				# insert new directory in list
	}
	
	
	function _pwd
	{
		if [ -n "$ECD" ]
		then
			pwd 1>&6
		fi
	}
	# Start of test
	cd /tmp
	cd /bin
	cd /etc
	cd -
	cd -2
	cd -l
expected-stdout:
	/bin
	/tmp
	  3 /
	  2 /etc
	  1 /bin
	  0 /tmp
---
@


1.2
log
@Updates from pdksh-unstable-5.2.13.7.  Most notable change is:
    trap: exit traps now executed in subshells (without explicit exit call).
See the Changelog for a full list of changes.
@
text
@@


1.1
log
@Add these to the repository, but don't do anything with them; they
need perl (at least for now).
@
text
@d4 2
@

