head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.60
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.58
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.56
	OPENBSD_5_0:1.2.0.54
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.52
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.50
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.46
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.48
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.44
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.42
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.40
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.38
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.36
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.34
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.32
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.30
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.28
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.26
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.24
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.22
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.20
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.18
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.16
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.12.02.20.41.01;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2013.03.03.19.11.34;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	98.06.25.19.02.43;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.14.08.05.25;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Move ksh test files into regressMove ksh test files into regressMove ksh test files into regress.
@
text
@name: xxx-subsitution-eval-order
description:
	Check order of evaluation of expressions
stdin:
	i=1 x= y=
	set -A A abc def GHI j G k
	echo ${A[x=(i+=1)]#${A[y=(i+=2)]}}
	echo $x $y
expected-stdout:
	HI
	2 4
---

name: xxx-set-option-1
description:
	Check option parsing in set
stdin:
	set -vsA foo -- A 1 3 2
	echo ${foo[*]}
expected-stderr:
	echo ${foo[*]}
expected-stdout:
	1 2 3 A
---

name: xxx-exec-1
description:
	Check that exec exits for built-ins
arguments: !-i!
stdin:
	exec print hi
	echo still herre
expected-stdout:
	hi
expected-stderr-pattern: /.*/
---

name: xxx-while-1
description:
	Check the return value of while loops
	XXX need to do same for for/select/until loops
stdin:
	i=x
	while [ $i != xxx ] ; do
	    i=x$i
	    if [ $i = xxx ] ; then
		false
		continue
	    fi
	done
	echo loop1=$?
	
	i=x
	while [ $i != xxx ] ; do
	    i=x$i
	    if [ $i = xxx ] ; then
		false
		break
	    fi
	done
	echo loop2=$?
	
	i=x
	while [ $i != xxx ] ; do
	    i=x$i
	    false
	done
	echo loop3=$?
expected-stdout:
	loop1=0
	loop2=0
	loop3=1
---

name: xxx-status-1
description:
	Check that blank lines don't clear $?
arguments: !-i!
stdin:
	(exit 1)
	echo $?
	(exit 1)
	
	echo $?
	true
expected-stdout:
	1
	1
expected-stderr-pattern: /.*/
---

name: xxx-status-2
description:
	Check that $? is preserved in subshells, includes, traps.
stdin:
	(exit 1)
	
	echo blank: $?
	
	(exit 2)
	(echo subshell: $?)
	
	echo 'echo include: $?' > foo
	(exit 3)
	. ./foo
	
	trap 'echo trap: $?' ERR
	(exit 4)
	echo exit: $?
expected-stdout:
	blank: 1
	subshell: 2
	include: 3
	trap: 4
	exit: 4
---

name: xxx-clean-chars-1
description:
	Check MAGIC character is stuffed correctly
stdin:
	echo `echo [£`
expected-stdout:
	[£
---

name: xxx-param-subst-qmark-1
description:
	Check suppresion of error message with null string.  According to
	POSIX, it shouldn't print the error as `word' isn't ommitted.
stdin:
	unset foo
	x=
	echo x${foo?$x}
expected-exit: 1
expected-fail: yes
expected-stderr-pattern: !/not set/
---

name: xxx-param-_-1
description:
	Check c flag is set.
arguments: !-c!echo "[$-]"!
expected-stdout-pattern: /^\[.*c.*\]$/
---

name: env-prompt
description:
	Check that prompt not printed when processing ENV
env-setup: !ENV=./foo!
file-setup: file 644 "foo"
	XXX=_
	PS1=X
	false && echo hmmm
arguments: !-i!
stdin:
	echo hi${XXX}there
expected-stdout:
	hi_there
expected-stderr: !
	XX
---

name: single-quotes-in-braces
description:
	Check that single quotes inside unquoted {} are treated as quotes
stdin:
	foo=1
	echo ${foo:+'blah  $foo'}
expected-stdout:
	blah  $foo
---

name: single-quotes-in-quoted-braces
description:
	Check that single quotes inside quoted {} are treated as
	normal char
stdin:
	foo=1
	echo "${foo:+'blah  $foo'}"
expected-stdout:
	'blah  1'
---

name: single-quotes-in-braces-nested
description:
	Check that single quotes inside unquoted {} are treated as quotes,
	even if that's inside a double-quoted command expansion
stdin:
	foo=1
	echo "$( echo ${foo:+'blah  $foo'})"
expected-stdout:
	blah  $foo
---

name: single-quotes-in-brace-pattern
description:
	Check that single quotes inside {} pattern are treated as quotes
stdin:
	foo=1234
	echo ${foo%'2'*} "${foo%'2'*}" ${foo%2'*'} "${foo%2'*'}"
expected-stdout:
	1 1 1234 1234
---

name: single-quotes-in-heredoc-braces
description:
	Check that single quotes inside {} in heredoc are treated
	as normal char
stdin:
	foo=1
	cat <<EOM
	${foo:+'blah  $foo'}
	EOM
expected-stdout:
	'blah  1'
---

name: single-quotes-in-nested-braces
description:
	Check that single quotes inside nested unquoted {} are
	treated as quotes
stdin:
	foo=1
	echo ${foo:+${foo:+'blah  $foo'}}
expected-stdout:
	blah  $foo
---

name: single-quotes-in-nested-quoted-braces
description:
	Check that single quotes inside nested quoted {} are treated
	as normal char
stdin:
	foo=1
	echo "${foo:+${foo:+'blah  $foo'}}"
expected-stdout:
	'blah  1'
---

name: single-quotes-in-nested-braces-nested
description:
	Check that single quotes inside nested unquoted {} are treated
	as quotes, even if that's inside a double-quoted command expansion
stdin:
	foo=1
	echo "$( echo ${foo:+${foo:+'blah  $foo'}})"
expected-stdout:
	blah  $foo
---

name: single-quotes-in-nested-brace-pattern
description:
	Check that single quotes inside nested {} pattern are treated as quotes
stdin:
	foo=1234
	echo ${foo:+${foo%'2'*}} "${foo:+${foo%'2'*}}" ${foo:+${foo%2'*'}} "${foo:+${foo%2'*'}}"
expected-stdout:
	1 1 1234 1234
---

name: single-quotes-in-heredoc-nested-braces
description:
	Check that single quotes inside nested {} in heredoc are treated
	as normal char
stdin:
	foo=1
	cat <<EOM
	${foo:+${foo:+'blah  $foo'}}
	EOM
expected-stdout:
	'blah  1'
---
@


1.3
log
@Fix quoting in word part of ${var+word} (and similar) when entire thing
is quoted or in a here-doc.

Patch from Alexander Polakov (plhk (at) sdf.org).
ok mpi@@ jung@@
@
text
@@


1.2
log
@pdksh-5.2.13 + local changes
@
text
@d164 110
@


1.1
log
@Add these to the repository, but don't do anything with them; they
need perl (at least for now).
@
text
@d18 2
a19 2
	set -A -vs A 1 3 2
	echo ${A[*]}
d21 1
a21 1
	echo ${A[*]}
d23 1
a23 1
	1 2 3
d151 3
a153 4
perl-setup:
	system("cat > foo << EOF
	XXX=12
	PS1='X '
a154 2
	EOF
	");
d159 1
a159 1
	hi12there
d161 1
a161 1
	X X 
@

