head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.0.70
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.68
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.66
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.64
	OPENBSD_5_0:1.1.0.62
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.60
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.58
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.54
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.56
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.52
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.50
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.48
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.46
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.44
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.42
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.40
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.38
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.36
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.34
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.32
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.30
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.28
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.26
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.24
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.22
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.20
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.18
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.16
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.12.02.20.41.01;	author millert;	state dead;
branches;
next	1.1;

1.1
date	96.08.19.20.09.07;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Move ksh test files into regressMove ksh test files into regressMove ksh test files into regress.
@
text
@name: arith-lazy-1
description:
	Check that only one side of ternary operator is evaluated
stdin:
	x=i+=2
	y=j+=2
	typeset -i i=1 j=1
	echo $((1 ? 20 : (x+=2)))
	echo $i,$x
	echo $((0 ? (y+=2) : 30))
	echo $j,$y
expected-stdout:
	20
	1,i+=2
	30
	1,j+=2
---

name: arith-lazy-2
description:
	Check that assignments not done on non-evaluated side of ternary
	operator
stdin:
	x=i+=2
	y=j+=2
	typeset -i i=1 j=1
	echo $((1 ? 20 : (x+=2)))
	echo $i,$x
	echo $((0 ? (y+=2) : 30))
	echo $i,$y
expected-stdout:
	20
	1,i+=2
	30
	1,j+=2
---

name: arith-ternary-prec-1
description:
	Check precidance of ternary operator vs assignment
stdin:
	typeset -i x=2
	y=$((1 ? 20 : x+=2))
expected-exit: e != 0
expected-stderr-pattern:
	/.*:.*1 \? 20 : x\+=2.*lvalue.*\n$/
---

name: arith-ternary-prec-2
description:
	Check precidance of ternary operator vs assignment
stdin:
	typeset -i x=2
	echo $((0 ? x+=2 : 20))
expected-stdout:
	20
---

name: arith-div-assoc-1
description:
	Check associativity of division operator
stdin:
	echo $((20 / 2 / 2))
expected-stdout:
	5
---

name: arith-assop-assoc-1
description:
	Check associativity of assignment-operator operator
stdin:
	typeset -i i=1 j=2 k=3
	echo $((i += j += k))
	echo $i,$j,$k
expected-stdout:
	6
	6,5,3
---

@


1.1
log
@update to pdksh-5.2.8
@
text
@@

