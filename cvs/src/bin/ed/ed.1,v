head	1.69;
access;
symbols
	OPENBSD_6_2:1.69.0.4
	OPENBSD_6_2_BASE:1.69
	OPENBSD_6_1:1.68.0.4
	OPENBSD_6_1_BASE:1.68
	OPENBSD_6_0:1.67.0.4
	OPENBSD_6_0_BASE:1.67
	OPENBSD_5_9:1.67.0.2
	OPENBSD_5_9_BASE:1.67
	OPENBSD_5_8:1.64.0.4
	OPENBSD_5_8_BASE:1.64
	OPENBSD_5_7:1.63.0.2
	OPENBSD_5_7_BASE:1.63
	OPENBSD_5_6:1.61.0.4
	OPENBSD_5_6_BASE:1.61
	OPENBSD_5_5:1.58.0.4
	OPENBSD_5_5_BASE:1.58
	OPENBSD_5_4:1.57.0.12
	OPENBSD_5_4_BASE:1.57
	OPENBSD_5_3:1.57.0.10
	OPENBSD_5_3_BASE:1.57
	OPENBSD_5_2:1.57.0.8
	OPENBSD_5_2_BASE:1.57
	OPENBSD_5_1_BASE:1.57
	OPENBSD_5_1:1.57.0.6
	OPENBSD_5_0:1.57.0.4
	OPENBSD_5_0_BASE:1.57
	OPENBSD_4_9:1.57.0.2
	OPENBSD_4_9_BASE:1.57
	OPENBSD_4_8:1.56.0.2
	OPENBSD_4_8_BASE:1.56
	OPENBSD_4_7:1.54.0.2
	OPENBSD_4_7_BASE:1.54
	OPENBSD_4_6:1.53.0.6
	OPENBSD_4_6_BASE:1.53
	OPENBSD_4_5:1.53.0.2
	OPENBSD_4_5_BASE:1.53
	OPENBSD_4_4:1.51.0.6
	OPENBSD_4_4_BASE:1.51
	OPENBSD_4_3:1.51.0.4
	OPENBSD_4_3_BASE:1.51
	OPENBSD_4_2:1.51.0.2
	OPENBSD_4_2_BASE:1.51
	OPENBSD_4_1:1.49.0.10
	OPENBSD_4_1_BASE:1.49
	OPENBSD_4_0:1.49.0.8
	OPENBSD_4_0_BASE:1.49
	OPENBSD_3_9:1.49.0.6
	OPENBSD_3_9_BASE:1.49
	OPENBSD_3_8:1.49.0.4
	OPENBSD_3_8_BASE:1.49
	OPENBSD_3_7:1.49.0.2
	OPENBSD_3_7_BASE:1.49
	OPENBSD_3_6:1.48.0.2
	OPENBSD_3_6_BASE:1.48
	OPENBSD_3_5:1.47.0.2
	OPENBSD_3_5_BASE:1.47
	OPENBSD_3_4:1.43.0.2
	OPENBSD_3_4_BASE:1.43
	OPENBSD_3_3:1.39.0.2
	OPENBSD_3_3_BASE:1.39
	OPENBSD_3_2:1.37.0.2
	OPENBSD_3_2_BASE:1.37
	OPENBSD_3_1:1.36.0.2
	OPENBSD_3_1_BASE:1.36
	OPENBSD_3_0:1.33.0.2
	OPENBSD_3_0_BASE:1.33
	OPENBSD_2_9:1.29.0.2
	OPENBSD_2_9_BASE:1.29
	OPENBSD_2_8:1.27.0.2
	OPENBSD_2_8_BASE:1.27
	OPENBSD_2_7:1.25.0.2
	OPENBSD_2_7_BASE:1.25
	OPENBSD_2_6:1.20.0.2
	OPENBSD_2_6_BASE:1.20
	OPENBSD_2_5:1.17.0.2
	OPENBSD_2_5_BASE:1.17
	OPENBSD_2_4:1.13.0.2
	OPENBSD_2_4_BASE:1.13
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.69
date	2017.07.05.12.23.46;	author schwarze;	state Exp;
branches;
next	1.68;
commitid	6Uf34f1vswX7Dip7;

1.68
date	2016.09.23.06.17.43;	author jmc;	state Exp;
branches;
next	1.67;
commitid	fH8sbrmZxxpy6XVW;

1.67
date	2015.11.20.20.13.32;	author tb;	state Exp;
branches;
next	1.66;
commitid	LTFArVnz8ah33l6G;

1.66
date	2015.11.20.08.53.28;	author tb;	state Exp;
branches;
next	1.65;
commitid	1QcVlhpVnahoxjiN;

1.65
date	2015.09.14.20.06.58;	author schwarze;	state Exp;
branches;
next	1.64;
commitid	r87YNrjEWwl7OkJ0;

1.64
date	2015.06.22.14.46.59;	author jmc;	state Exp;
branches;
next	1.63;
commitid	UFaOBEhLD0nLucee;

1.63
date	2014.12.04.08.36.32;	author daniel;	state Exp;
branches;
next	1.62;
commitid	CXo4lvmNKkAMuDmh;

1.62
date	2014.11.26.08.21.51;	author jmc;	state Exp;
branches;
next	1.61;
commitid	J1o56IgKkvKn0HES;

1.61
date	2014.04.14.23.19.51;	author jmc;	state Exp;
branches;
next	1.60;

1.60
date	2014.04.14.22.12.01;	author tedu;	state Exp;
branches;
next	1.59;

1.59
date	2014.03.06.17.37.43;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2014.02.22.14.24.43;	author jmc;	state Exp;
branches;
next	1.57;

1.57
date	2010.09.03.09.53.20;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2010.07.27.09.27.35;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2010.07.22.08.09.29;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2010.01.10.10.53.33;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2009.02.08.17.15.09;	author jmc;	state Exp;
branches;
next	1.52;

1.52
date	2008.10.01.09.03.27;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2007.05.31.19.19.14;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2007.05.29.15.04.59;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2004.10.04.21.24.54;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2004.04.19.10.01.53;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2004.02.12.20.46.18;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2004.01.31.13.00.57;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2003.12.13.23.52.01;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2003.09.25.14.08.56;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2003.09.02.18.09.43;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2003.07.27.13.25.43;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2003.05.29.19.09.35;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2003.04.28.06.27.36;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2003.02.18.07.57.49;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2002.10.04.02.15.15;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2002.08.31.21.44.29;	author mpech;	state Exp;
branches;
next	1.36;

1.36
date	2002.02.17.23.56.04;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	2001.12.21.11.41.49;	author mpech;	state Exp;
branches;
next	1.34;

1.34
date	2001.11.13.14.00.15;	author mpech;	state Exp;
branches;
next	1.33;

1.33
date	2001.07.20.18.07.11;	author mpech;	state Exp;
branches;
next	1.32;

1.32
date	2001.06.23.05.57.02;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2001.06.23.02.33.21;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2001.05.28.15.36.08;	author aaron;	state Exp;
branches;
next	1.29;

1.29
date	2000.11.09.23.58.55;	author aaron;	state Exp;
branches;
next	1.28;

1.28
date	2000.11.09.23.47.16;	author aaron;	state Exp;
branches;
next	1.27;

1.27
date	2000.10.06.02.43.36;	author aaron;	state Exp;
branches;
next	1.26;

1.26
date	2000.10.06.02.14.13;	author aaron;	state Exp;
branches;
next	1.25;

1.25
date	2000.04.23.21.42.40;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	2000.04.21.15.38.17;	author aaron;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.15.02.15.10;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	2000.03.21.14.40.14;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	2000.03.17.18.15.13;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	99.07.04.18.59.37;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	99.06.04.02.45.13;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.05.23.14.10.47;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.03.01.05.39.02;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	98.12.15.01.20.20;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	98.11.28.03.20.33;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	98.11.06.00.34.08;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	98.09.23.00.13.48;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	98.09.14.22.13.46;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	98.09.01.16.38.14;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.07.21.08.10.22;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.01.02.04.31.16;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.08.30.17.20.50;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.08.04.03.17.36;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.08.04.03.16.31;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.08.03.10.51.31;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.08.03.10.44.32;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.12.10.09.05.56;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.69
log
@nits about trailing punctuation found with mandoc -Tlint
@
text
@.\"	$OpenBSD: ed.1,v 1.68 2016/09/23 06:17:43 jmc Exp $
.\"
.\" Copyright (c) 1993 Andrew Moore, Talke Studio.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: September 23 2016 $
.Dt ED 1
.Os
.Sh NAME
.Nm ed
.Nd text editor
.Sh SYNOPSIS
.Nm ed
.Op Fl
.Op Fl s
.Op Fl p Ar string
.Op Ar file
.Sh DESCRIPTION
.Nm
is a line-oriented text editor.
It is used to create, display, modify, and otherwise manipulate text files.
If invoked with a
.Ar file
argument, then a copy of
.Ar file
is read into the editor's buffer.
Changes are made to this copy and not directly to
.Ar file
itself.
Upon quitting
.Nm ed ,
any changes not explicitly saved with a
.Ic w
command are lost.
.Pp
Editing is done in two distinct modes:
.Em command
and
.Em input .
When first invoked,
.Nm
is in command mode.
In this mode, commands are read from the standard input and
executed to manipulate the contents of the editor buffer.
.Pp
A typical command might look like:
.Pp
.Dl ,s/old/new/g
.Pp
which replaces all occurrences of the string
.Qq old
with
.Qq new .
.Pp
When an input command, such as
.Ic a
.Pq append ,
.Ic i
.Pq insert ,
or
.Ic c
.Pq change
is given,
.Nm
enters input mode.
This is the primary means of adding text to a file.
In this mode, no commands are available;
instead, the standard input is written directly to the editor buffer.
Lines consist of text up to and including a newline character.
Input mode is terminated by entering a single period
.Pq Ql \&.
on a line.
.Pp
All
.Nm
commands operate on whole lines or ranges of lines; e.g.,
the
.Ic d
command deletes lines; the
.Ic m
command moves lines, and so on.
It is possible to modify only a portion of a line by means of replacement,
as in the example above.
However, even here, the
.Ic s
command is applied to whole lines at a time.
.Pp
In general,
.Nm
commands consist of zero or more line addresses, followed by a single
character command and possibly additional parameters; i.e.,
commands have the structure:
.Pp
.Dl [address [,address]]command[parameters]
.Pp
The address(es) indicate the line or range of lines to be affected by the
command.
If fewer addresses are given than the command accepts, then
default addresses are supplied.
.Pp
Many
.Nm
commands and line addresses support basic regular expressions
.Pq BREs .
See
.Xr re_format 7
for more information on regular expressions.
.Pp
The options are as follows:
.Bl -tag -width "-p string"
.It Fl
Same as the
.Fl s
option
.Pq deprecated .
.It Fl p Ar string
Specifies a command prompt.
This may be toggled on and off with the
.Ic P
command.
.It Fl s
Suppress diagnostics.
This should be used if
.Nm
standard input is from a script.
.It Ar file
Specifies the name of a file to read.
If
.Ar file
is prefixed with a
bang
.Pq Ql \&! ,
then it is interpreted as a shell command.
In this case, what is read is the standard output of
.Ar file
executed via
.Xr sh 1 .
To read a file whose name begins with a bang, prefix the
name with a backslash
.Pq Ql \e .
The default filename is set to
.Ar file
only if it is not prefixed with a bang.
.El
.Ss LINE ADDRESSING
An address represents the number of a line in the buffer.
.Nm
maintains a
.Em current address
which is typically supplied to commands as the default address
when none is specified.
When a file is first read, the current address is set to the last line
of the file.
In general, the current address is set to the last line affected by a command.
.Pp
A line address is
constructed from one of the bases in the list below, optionally followed
by a numeric offset.
The offset may include any combination of digits, operators (e.g.,
.Ql + ,
.Ql - ,
and
.Ql ^ ) ,
and whitespace.
Addresses are read from left to right, and their values are computed
relative to the current address.
.Pp
One exception to the rule that addresses represent line numbers is the
address
.Ad 0
.Pq zero .
This means
.Dq before the first line ,
and is legal wherever it makes sense.
.Pp
An address range is two addresses separated either by a comma or semi-colon.
The value of the first address in a range cannot exceed the
value of the second.
If only one address is given in a range,
then the second address is set to the given address.
If an
.Ar n Ns -tuple
of addresses is given where
.Ar n
\*(Gt 2,
then the corresponding range is determined by the last two addresses in the
.Ar n Ns -tuple .
If only one address is expected, then the last address is used.
.Pp
Each address in a comma-delimited range is interpreted relative to the
current address.
In a semi-colon-delimited range, the first address is
used to set the current address, and the second address is interpreted
relative to the first.
.Pp
The following address symbols are recognized:
.Bl -tag -width Ds
.It \&.
The current line
.Pq address
in the buffer.
.It $
The last line in the buffer.
.It Ar n
The
.Ar n Ns th
line in the buffer, where
.Ar n
is a number in the range
.Ad [0,$] .
.It - or ^
The previous line.
This is equivalent to
.Ad \-1
and may be repeated with cumulative effect.
.It Xo
.Pf - Ar n No or\ \&
.Pf ^ Ar n
.Xc
The
.Ar n Ns th
previous line, where
.Ar n
is a non-negative number.
.It +
The next line.
This is equivalent to
.Ad +1
and may be repeated with cumulative effect.
.It + Ns Ar n
The
.Ar n Ns th
next line, where
.Ar n
is a non-negative number.
.It \&, or %
The first through last lines in the buffer.
This is equivalent to the address range
.Ad 1,$ .
.It \&;
The current through last lines in the buffer.
This is equivalent to the address range
.Ad .,$ .
.It / Ns Ar re Ns /
The next line containing the regular expression
.Ar re .
The search wraps to the beginning of the buffer and continues down to the
current line, if necessary.
.Qq //
repeats the last search.
.It Pf ? Ar re ?
The previous line containing the regular expression
.Ar re .
The search wraps to the end of the buffer and continues up to the
current line, if necessary.
.Qq ??
repeats the last search.
.It \&' Ns Ar lc
The line previously marked by a
.Ic k
.Pq mark
command, where
.Ar lc
is a lower case letter.
.El
.Ss COMMANDS
All
.Nm
commands are single characters, though some require additional parameters.
If a command's parameters extend over several lines, then
each line except for the last must be terminated with a backslash
.Pq Ql \e .
.Pp
In general, at most one command is allowed per line.
However, most commands accept a print suffix, which is any of
.Ic p
.Pq print ,
.Ic l
.Pq list ,
or
.Ic n
.Pq enumerate ,
to print the last line affected by the command.
.Pp
.Nm
recognizes the following commands.
The commands are shown together with
the default address or address range supplied if none is specified
.Pq in parentheses ,
and other possible arguments on the right.
.Bl -tag -width Dxxs
.It (.) Ns Ic a
Appends text to the buffer after the addressed line.
Text is entered in input mode.
The current address is set to last line entered.
.It (.,.) Ns Ic c
Changes lines in the buffer.
The addressed lines are deleted from the buffer,
and text is appended in their place.
Text is entered in input mode.
The current address is set to last line entered.
.It (.,.) Ns Ic d
Deletes the addressed lines from the buffer.
If there is a line after the deleted range, then the current address is set
to this line.
Otherwise the current address is set to the line before the deleted range.
.It Ic e Ar file
Edits
.Ar file ,
and sets the default filename.
If
.Ar file
is not specified, then the default filename is used.
Any lines in the buffer are deleted before the new file is read.
The current address is set to the last line read.
.It Ic e No \&! Ns Ar command
Edits the standard output of
.No \&! Ns Ar command ,
(see
.Ic \&! Ns Ar command
below).
The default filename is unchanged.
Any lines in the buffer are deleted before the output of
.Ar command
is read.
The current address is set to the last line read.
.It Ic E Ar file
Edits
.Ar file
unconditionally.
This is similar to the
.Ic e
command, except that unwritten changes are discarded without warning.
The current address is set to the last line read.
.It Ic f Ar file
Sets the default filename to
.Ar file .
If
.Ar file
is not specified, then the default unescaped filename is printed.
.Sm off
.It Xo
.Pf (1,$) Ic g No /
.Ar re No / Ar command-list
.Xc
.Sm on
Applies
.Ar command-list
to each of the addressed lines matching a regular expression
.Ar re .
The current address is set to the line currently matched before
command-list is executed.
At the end of the
.Ic g
command, the current address is set to the last line affected by command-list.
If no lines were matched,
the current line number remains unchanged.
.Pp
Each command in
.Ar command-list
must be on a separate line,
and every line except for the last must be terminated by a backslash
.Pq Sq \e .
Any commands are allowed, except for
.Ic g ,
.Ic G ,
.Ic v ,
and
.Ic V .
A newline alone in command-list is equivalent to a
.Ic p
command.
.Sm off
.It (1,$) Ic G No / Ar re No /
.Sm on
Interactively edits the addressed lines matching a regular expression
.Ar re .
For each matching line, the line is printed, the current address is set,
and the user is prompted to enter a
.Ar command-list .
At the end of the
.Ic G
command, the current address is set to the last line affected by
.Pq the last
command-list.
If no lines were matched,
the current line number remains unchanged.
.Pp
The format of
.Ar command-list
is the same as that of the
.Ic g
command.
A newline alone acts as a null command list.
A single
.Sq &
repeats the last non-null command list.
.It Ic H
Toggles the printing of error explanations.
By default, explanations are not printed.
It is recommended that
.Nm
scripts begin with this command to aid in debugging.
.It Ic h
Prints an explanation of the last error.
.It (.) Ns Ic i
Inserts text in the buffer before the current line.
Text is entered in input mode.
The current address is set to the last line entered.
.It (.,.+1) Ns Ic j
Joins the addressed lines.
The addressed lines are deleted from the buffer and replaced by a single
line containing their joined text.
The current address is set to the resultant line.
.It (.) Ns Ic k Ns Ar lc
Marks a line with a lower case letter
.Ar lc .
The line can then be addressed as
.Ic ' Ns Ar lc
(i.e., a single quote followed by
.Ar lc )
in subsequent commands.
The mark is not cleared until the line is deleted or otherwise modified.
.It (.,.) Ns Ic l
Prints the addressed lines unambiguously.
The current address is set to the last line printed.
.It (.,.) Ns Ic m Ns (.)
Moves lines in the buffer.
The addressed lines are moved to after the
right-hand destination address, which may be the address
.Ad 0
.Pq zero .
The current address is set to the last line moved.
.It (.,.) Ns Ic n
Prints the addressed lines along with their line numbers.
The current address is set to the last line printed.
.It (.,.) Ns Ic p
Prints the addressed lines.
The current address is set to the last line printed.
.It Ic P
Toggles the command prompt on and off.
Unless a prompt was specified with the command-line option
.Fl p Ar string ,
the command prompt is by default turned off.
.It Ic q
Quits
.Nm ed .
.It Ic Q
Quits
.Nm
unconditionally.
This is similar to the
.Ic q
command, except that unwritten changes are discarded without warning.
.It ($) Ns Ic r Ar file
Reads
.Ar file
to after the addressed line.
If
.Ar file
is not specified, then the default filename is used.
If there was no default filename prior to the command,
then the default filename is set to
.Ar file .
Otherwise, the default filename is unchanged.
The current address is set to the last line read.
.It ($) Ns Ic r No \&! Ns Ar command
Reads to after the addressed line the standard output of
.No \&! Ns Ar command ,
(see
.Ic \&! Ns Ar command
below).
The default filename is unchanged.
The current address is set to the last line read.
.Sm off
.It Xo
.Pf (.,.) Ic s No / Ar re
.No / Ar replacement No /\ \&
.Pf (.,.) Ic s No / Ar re
.No / Ar replacement No / Ic g\ \&
.No (.,.) Ic s No / Ar re
.No / Ar replacement No / Ar n
.Xc
.Sm on
Replaces text in the addressed lines matching a regular expression
.Ar re
with
.Ar replacement .
By default, only the first match in each line is replaced.
If the
.Ic g
.Pq global
suffix is given, then every match is replaced.
The
.Ar n
suffix, where
.Ar n
is a positive number, causes only the
.Ar n Ns th
match to be replaced.
It is an error if no substitutions are performed on any of the addressed
lines.
The current address is set the last line affected.
.Pp
.Ar re
and
.Ar replacement
may be delimited by any character other than space and newline
(see the
.Ic s
command below).
If one or two of the last delimiters is omitted, then the last line
affected is printed as though the print suffix
.Ic p
were specified.
.Pp
An unescaped
.Ql &
in
.Ar replacement
is replaced by the currently matched text.
The character sequence
.Pf \e Ar m ,
where
.Ar m
is a number in the range [1,9], is replaced by the
.Ar m Ns th
backreference expression of the matched text.
If
.Ar replacement
consists of a single
.Ql % ,
then
.Ar replacement
from the last substitution is used.
Newlines may be embedded in
.Ar replacement
if they are escaped with a backslash
.Pq Ql \e .
.It (.,.) Ns Ic s
Repeats the last substitution.
This form of the
.Ic s
command accepts a count suffix
.Ar n ,
or any combination of the characters
.Ic r ,
.Ic g ,
and
.Ic p .
If a count suffix
.Ar n
is given, then only the
.Ar n Ns th
match is replaced.
The
.Ic r
suffix causes the regular expression of the last search to be used
instead of that of the last substitution.
The
.Ic g
suffix toggles the global suffix of the last substitution.
The
.Ic p
suffix toggles the print suffix of the last substitution.
The current address is set to the last line affected.
.It (.,.) Ns Ic t Ns (.)
Copies
.Pq i.e., transfers
the addressed lines to after the right-hand destination address,
which may be the address
.Ad 0
.Pq zero .
The current address is set to the last line copied.
.It Ic u
Undoes the last command and restores the current address
to what it was before the command.
The global commands
.Ic g ,
.Ic G ,
.Ic v ,
and
.Ic V
are treated as a single command by undo.
.Ic u
is its own inverse.
.Sm off
.It Xo
.Pf (1,$) Ic v No / Ar re
.Pf / Ar command-list
.Xc
.Sm on
Applies
.Ar command-list
to each of the addressed lines not matching a regular expression
.Ar re .
This is similar to the
.Ic g
command.
.Sm off
.It Xo
.Pf (1,$) Ic V No /
.Ar re No /
.Xc
.Sm on
Interactively edits the addressed lines not matching a regular expression
.Ar re .
This is similar to the
.Ic G
command.
.It (1,$) Ns Ic w Ar file
Writes the addressed lines to
.Ar file .
Any previous contents of
.Ar file
are lost without warning.
If there is no default filename, then the default filename is set to
.Ar file ,
otherwise it is unchanged.
If no filename is specified, then the default filename is used.
The current address is unchanged.
.It (1,$) Ns Ic wq Ar file
Writes the addressed lines to
.Ar file ,
and then executes a
.Ic q
command.
.It (1,$) Ns Ic w No \&! Ns Ar command
Writes the addressed lines to the standard input of
.No \&! Ns Ar command ,
(see
.Ic \&! Ns Ar command
below).
The default filename and current address are unchanged.
.It (1,$) Ns Ic W Ar file
Appends the addressed lines to the end of
.Ar file .
This is similar to the
.Ic w
command, except that the previous contents of file are not clobbered.
The current address is unchanged.
.It (.+1) Ns Ic z Ns Ar n
Scrolls
.Ar n
lines at a time starting at addressed line.
If
.Ar n
is not specified, then the current window size is used.
The current address is set to the last line printed.
.It ($) Ns Ic =
Prints the line number of the addressed line.
.It (.+1) Ns newline
Prints the addressed line, and sets the current address to that line.
.It Ic \&! Ns Ar command
Executes
.Ar command
via
.Xr sh 1 .
If the first character of
.Ar command
is
.Sq !\& ,
then it is replaced by text of the previous
.Ic \&! Ns Ar command .
.Nm
does not process
.Ar command
for
.Sq \e
.Pq backslash
escapes.
However, an unescaped
.Sq %
is replaced by the default filename.
When the shell returns from execution, a
.Sq \&!
is printed to the standard output.
The current line is unchanged.
.El
.Sh ASYNCHRONOUS EVENTS
.Bl -tag -width "SIGWINCH"
.It Dv SIGHUP
If the current buffer has changed since it was last written,
.Nm
attempts to write the buffer to the file
.Pa ed.hup .
Nothing is written to the currently remembered file, and
.Nm
exits.
.It Dv SIGINT
When an interrupt occurs,
.Nm
prints
.Sq ?\en
and returns to command mode.
If interrupted during text input,
the text already input is written to the current buffer,
as if text input had been normally terminated.
.It Dv SIGQUIT
This signal is ignored.
.It Dv SIGWINCH
The screen is resized.
.El
.Sh FILES
.Bl -tag -width /tmp/ed.* -compact
.It Pa /tmp/ed.*
buffer file
.It Pa ed.hup
where
.Nm
attempts to write the buffer if the terminal hangs up
.El
.Sh EXIT STATUS
.Ex -std ed
.Sh DIAGNOSTICS
When an error occurs,
.Nm
prints a
.Sq \&?
and either returns to command mode or exits if its input is from a script.
An explanation of the last error can be printed with the
.Ic h
.Pq help
command.
.Pp
Since the
.Ic g
.Pq global
command masks any errors from failed searches and substitutions,
it can be used to perform conditional operations in scripts; e.g.,
.Pp
.Dl g/old/s//new/
.Pp
replaces any occurrences of
.Qq old
with
.Qq new .
.Pp
If the
.Ic u
.Pq undo
command occurs in a global command list,
then the command list is executed only once.
.Pp
If diagnostics are not disabled, attempting to quit
.Nm
or edit another file before writing a modified buffer results in an error.
If the command is entered a second time, it succeeds,
but any changes to the buffer are lost.
.Sh SEE ALSO
.Xr sed 1 ,
.Xr sh 1 ,
.Xr vi 1 ,
.Xr re_format 7
.Rs
.%A B. W. Kernighan
.%A P. J. Plauger
.%B Software Tools in Pascal
.%O Addison-Wesley
.%D 1981
.Re
.Sh STANDARDS
The
.Nm
utility is compliant with the
.St -p1003.1-2008
specification.
.Pp
The commands
.Cm s
(to repeat the last substitution),
.Cm W ,
.Cm wq ,
and
.Cm z
as well as the address specifier
.Sq %
are extensions to that specification.
.Pp
The
.St -p1003.1-2008
specification says the
.Sq ^
address specifier is neither required nor prohibited;
additionally, it says behaviour for the
.Fl
option is
.Dq unspecified .
.Pp
The
.St -p1003.1-2008
specification says the
.Ic l
command should mark the ends of lines with a
.Sq $
character,
and that
.Sq $
characters
within the text should be output preceded by a backslash;
this implementation does not support that.
.Sh HISTORY
An
.Nm
command appeared in
.At v1 .
.Sh CAVEATS
.Nm
processes
.Ar file
arguments for backslash escapes, i.e., in a filename,
any characters preceded by a backslash
.Pq Ql \e
are interpreted literally.
.Pp
If a text
.Pq non-binary
file is not terminated by a newline character,
then
.Nm
appends one on reading/writing it.
In the case of a binary file,
.Nm
does not append a newline on reading/writing.
@


1.68
log
@remove the note about the list command (l) displaying a --More--
prompt for huge lines (according to otto this happens only when
BACKWARDS is not defined);

ok otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.67 2015/11/20 20:13:32 tb Exp $
d27 1
a27 1
.Dd $Mdocdate: November 20 2015 $
d272 1
a272 1
.It ? Ns Ar re Ns ?
@


1.67
log
@honestly i think you should just zap that paragraph - it doesn;t make
sense to document that posix more or less says something should happen,
and that it does.

jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.66 2015/11/20 08:53:28 tb Exp $
a446 6
If a single line fills more than one screen (as might be the case
when viewing a binary file, for instance), a
.Dq --More--
prompt is printed on the last line.
.Nm
waits until the RETURN key is pressed before displaying the next screen.
@


1.66
log
@make ed restore the user defined prompt (specified with -p) when it was turned
off and then on again with 'P'.

ok daniel@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.65 2015/09/14 20:06:58 schwarze Exp $
d27 1
a27 1
.Dd $Mdocdate: September 14 2015 $
a828 11
.Pp
The
.St -p1003.1-2008
specification suggests,
but does not say explicitly,
that the result of a user defined prompt
.Pq Fl p
being turned off then on again with the
.Ic P
command should restore the user defined prompt;
this implementation currently restores the user defined prompt.
@


1.65
log
@Avoid .Ns right after .Pf, it's pointless.
In some cases, do additional cleanup in the immediate vicinity.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.64 2015/06/22 14:46:59 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: June 22 2015 $
d839 1
a839 2
this implementation currently restores the default prompt
.Pq * .
@


1.64
log
@theo buehler points out that posix specifies a prompt defined using -p
be reinstated when toggled off then on again; this seems to make sense,
but posix is not explicit.

we know that gnu ed and freebsd do reinstate the user defined prompt, but
we do not. no one has yet stepped up to change this, so i'm adding a note
to this effect until such a time as we do/

i have not tweaked the text for -p or "P" to allow for an easy back out
if behaviour does change;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.63 2014/12/04 08:36:32 daniel Exp $
d27 1
a27 1
.Dd $Mdocdate: December 4 2014 $
d238 2
a239 2
.Pf - Ns Ar n No or\ \&
.Pf ^ Ns Ar n
d550 1
a550 1
.Pf \e Ns Ar m ,
@


1.63
log
@document some more commands that are POSIX extensions. ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.62 2014/11/26 08:21:51 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: November 26 2014 $
d829 12
@


1.62
log
@document in STANDARDS that we do not mark eols with $;
originally reported by ezequiel garz?n
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.61 2014/04/14 23:19:51 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: April 14 2014 $
d797 4
a800 1
.Cm W
d803 1
a803 1
and the address specifier
@


1.61
log
@more x removal;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.60 2014/04/14 22:12:01 tedu Exp $
d813 13
@


1.60
log
@remove nonstandard DES support because DES. ok beck deraadt miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.59 2014/03/06 17:37:43 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: March 6 2014 $
d36 1
a36 1
.Op Fl sx
a777 1
.Xr bdes 1 ,
d796 2
a797 5
The flag
.Op Fl x ,
the commands
.Cm W ,
.Cm x ,
d799 1
a799 1
.Cm z ,
@


1.59
log
@add an ASYNCHRONOUS EVENTS section for signals, as per vi;
ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.58 2014/02/22 14:24:43 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: February 22 2014 $
a146 5
.It Fl x
Prompt for an encryption key to be used in subsequent reads and writes
(see the
.Ic x
command).
a668 7
.It Ic x
Prompts for an encryption key which is used in subsequent reads and writes.
If a newline alone is entered as the key, then encryption is turned off.
Otherwise, echoing is disabled while a key is read.
Encryption/decryption is done using the
.Xr bdes 1
algorithm.
@


1.58
log
@STANDARDS:
- `%' is an extension
- `^' is neither required nor prohibited by posix
- the deprecated `-' option is "behaviour unspecified"

ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.57 2010/09/03 09:53:20 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: September 3 2010 $
a310 5
An interrupt
.Pq typically ^C
has the effect of aborting the current command
and returning the editor to command mode.
.Pp
d718 24
@


1.57
log
@add an EXIT STATUS section for /bin;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.56 2010/07/27 09:27:35 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: July 27 2010 $
d791 2
a792 2
.Op Fl x
as well as the commands
d796 3
a798 1
.Cm z
d800 10
@


1.56
log
@properly escape some "!"; reported by kristaps
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.55 2010/07/22 08:09:29 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: July 22 2010 $
a170 2
.Pp
.Ex -std ed
d733 2
@


1.55
log
@move exit returns blurb out of DIAGNOSTICS; from daniel dickman
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.54 2010/01/10 10:53:33 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: January 10 2010 $
d349 1
a349 1
.It Ic e No ! Ns Ar command
d351 1
a351 1
.No ! Ns Ar command ,
d506 1
a506 1
.It ($) Ns Ic r No ! Ns Ar command
d508 1
a508 1
.Pf ! Ns Ar command ,
d667 1
a667 1
.It (1,$) Ns Ic w No ! Ns Ar command
d669 1
a669 1
.Pf ! Ns Ar command ,
@


1.54
log
@remove references to docs we no longer install;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.53 2009/02/08 17:15:09 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: February 8 2009 $
d171 2
@


1.53
log
@bump the posix reference in STANDARDS to IEEE Std 1003.1-2008, with a few
updates to follow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.52 2008/10/01 09:03:27 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: October 1 2008 $
a773 6
.Pp
"A Tutorial Introduction to the UNIX Text Editor",
.Pa /usr/share/doc/usd/09.edtut/ .
.Pp
"Advanced Editing on UNIX",
.Pa /usr/share/doc/usd/10.edadv/ .
@


1.52
log
@for the `g' and `G' commands, document that if no lines match
the regular expression then the current line number remains unchanged;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.51 2007/05/31 19:19:14 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate: May 31 2007 $
d791 1
a791 1
.St -p1003.1-2004
@


1.51
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.50 2007/05/29 15:04:59 jmc Exp $
d27 1
a27 1
.Dd $Mdocdate$
d387 2
d417 2
@


1.50
log
@- consistent STANDARDS blurb
- note which options are extensions to POSIX

discussed w/ deraadt otto millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.49 2004/10/04 21:24:54 jmc Exp $
d27 1
a27 1
.Dd May 2, 1993
@


1.49
log
@remove the section on regular expressions - instead point people
to re_format.7 (which is where the list of BREs went);

also, rename LIMITATIONS to CAVEATS, as this is a standard mdoc thing,
and shuffle it to the end of the page;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.48 2004/04/19 10:01:53 jmc Exp $
d783 15
@


1.48
log
@correct path to usd docs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.47 2004/02/12 20:46:18 jmc Exp $
d122 8
a291 183
.Ss REGULAR EXPRESSIONS
Regular expressions are patterns used in selecting text.
For example, the
.Nm
command
.Pp
.Dl g/string/
.Pp
prints all lines containing
.Qq string .
Regular expressions are also used by the
.Ic s
command for selecting old text to be replaced with new.
.Pp
In addition to specifying string literals, regular expressions can
represent classes of strings.
Strings thus represented are said to be matched by the
corresponding regular expression.
If it is possible for a regular expression to match several strings in
a line, then the leftmost longest match is the one selected.
.Pp
The following symbols are used in constructing regular expressions:
.Bl -tag -width Dsasdfsd
.It Ar c
Any character
.Ar c
not listed below, including
.Sq { ,
.Sq } ,
.Sq \&( ,
.Sq \&) ,
.Sq \*(Lt ,
and
.Sq \*(Gt
matches itself.
.It \e Ns Ar c
Any backslash-escaped character
.Ar c ,
except for
.Sq { ,
.Sq } ,
.Sq \&( ,
.Sq \&) ,
.Sq \*(Lt ,
and
.Sq \*(Gt
matches itself.
.It \&.
Matches any single character.
.It Bq Ar char-class
Matches any single character in
.Ar char-class .
To include a
.Ql \&]
in
.Ar char-class ,
it must be the first character.
A range of characters may be specified by separating the end characters
of the range with a
.Ql - ;
e.g.,
.Ar a-z
specifies the lower case characters.
The following literal expressions can also be used in
.Ar char-class
to specify sets of characters:
.Bd -unfilled -offset indent
[:alnum:] [:cntrl:] [:lower:] [:space:]
[:alpha:] [:digit:] [:print:] [:upper:]
[:blank:] [:graph:] [:punct:] [:xdigit:]
.Ed
.Pp
If
.Ql -
appears as the first or last character of
.Ar char-class ,
then it matches itself.
All other characters in
.Ar char-class
match themselves.
.Pp
Patterns in
.Ar char-class
of the form
.Eo [.
.Ar col-elm
.Ec .]\&
or
.Eo [=
.Ar col-elm
.Ec =]\&
where
.Ar col-elm
is a collating element are interpreted according to
.Xr setlocale 3
.Pq not currently supported .
See
.Xr regex 3
for an explanation of these constructs.
.It Bq ^ Ns Ar char-class
Matches any single character, other than newline, not in
.Ar char-class .
.Ar char-class
is defined as above.
.It ^
If
.Sq ^
is the first character of a regular expression, then it
anchors the regular expression to the beginning of a line.
Otherwise, it matches itself.
.It $
If
.Sq $
is the last character of a regular expression,
it anchors the regular expression to the end of a line.
Otherwise, it matches itself.
.It \e\*(Lt
Anchors the single character regular expression or subexpression
immediately following it to the beginning of a word.
.Pq This may not be available.
.It \e\*(Gt
Anchors the single character regular expression or subexpression
immediately following it to the end of a word.
.Pq This may not be available.
.It \e( Ns Ar re Ns \e)
Defines a subexpression
.Ar re .
Subexpressions may be nested.
A subsequent backreference of the form
.Pf \e Ns Ar n ,
where
.Ar n
is a number in the range [1,9], expands to the text matched by the
.Ar n Ns th
subexpression.
For example, the regular expression
.Ar \e(.*\e)\e1
matches any string consisting of identical adjacent substrings.
Subexpressions are ordered relative to their left delimiter.
.It *
Matches the single character regular expression or subexpression
immediately preceding it zero or more times.
If
.Sq *
is the first character of a regular expression or subexpression,
then it matches itself.
The
.Sq *
operator sometimes yields unexpected results.
For example, the regular expression
.Ar b*
matches the beginning of the string
.Qq abbb
(as opposed to the substring
.Qq bbb ) ,
since a null match is the only leftmost match.
.Sm off
.It Xo
.Pf \e{ Ar n , m No \e}\ \&
.Pf \e{ Ar n , No \e}\ \&
.Pf \e{ Ar n No \e}
.Xc
.Sm on
Matches the single character regular expression or subexpression
immediately preceding it at least
.Ar n
and at most
.Ar m
times.
If
.Ar m
is omitted, then it matches at least
.Ar n
times.
If the comma is also omitted, then it matches exactly
.Ar n
times.
.El
.Pp
Additional regular expression operators may be defined depending on the
particular
.Xr regex 3
implementation.
a719 18
.Sh LIMITATIONS
.Nm
processes
.Ar file
arguments for backslash escapes, i.e., in a filename,
any characters preceded by a backslash
.Pq Ql \e
are interpreted literally.
.Pp
If a text
.Pq non-binary
file is not terminated by a newline character,
then
.Nm
appends one on reading/writing it.
In the case of a binary file,
.Nm
does not append a newline on reading/writing.
d769 1
a769 1
.Xr regex 3
d788 18
@


1.47
log
@some typos and macro simplification;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.46 2004/01/31 13:00:57 jmc Exp $
d965 1
a965 1
.Pa /usr/share/doc/09.edtut/ .
d968 1
a968 1
.Pa /usr/share/doc/10.edadv/ .
@


1.46
log
@make references to USD docs clearer;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.45 2003/12/13 23:52:01 jmc Exp $
d333 1
a333 1
.It [ Ns Ar char-class Ns ]
d383 1
a383 1
.It [^ Ns Ar char-class Ns ]
d586 1
a586 1
.Ic g
d650 1
a650 1
Unless a prompt was specified by with command-line option
d726 1
a726 1
.Ql \e
@


1.45
log
@sort options, and adjust -width of options' list;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.44 2003/09/25 14:08:56 jmc Exp $
d964 5
a968 1
USD:09\-10
@


1.44
log
@replace .Em with more appropriate macros. some other cleanup;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.42 2003/07/27 13:25:43 jmc Exp $
d123 1
a123 1
.Bl -tag -width Ds
d129 5
a143 5
.It Fl p Ar string
Specifies a command prompt.
This may be toggled on and off with the
.Ic P
command.
@


1.43
log
@escape punctuation;
ok deraadt@@
@
text
@d54 1
a54 1
.Em w
d68 2
a69 3
.Bd -literal -offset indent
,s/old/new/g
.Ed
d72 1
a72 1
.Pa old
d74 1
a74 1
.Pa new .
d77 4
a80 4
.Em a
(append),
.Em i
(insert),
d82 3
a84 2
.Em c
(change) is given,
d99 1
a99 1
.Em d
d101 1
a101 1
.Em m
d106 1
a106 1
.Em s
d114 2
a115 3
.Bd -literal -offset indent
[address [,address]]command[parameters]
.Ed
d127 2
a128 1
option (deprecated).
d137 1
a137 1
.Em x
d142 1
a142 1
.Em P
d177 3
a179 3
The offset may include any combination of digits, operators (i.e.,
.Em + ,
.Em - ,
d181 1
a181 1
.Em ^ ) ,
d188 2
a189 2
.Em 0
(zero).
d200 1
a200 1
.Em n Ns No -tuple
d202 2
a203 1
.Em n > 2 ,
d205 1
a205 1
.Em n Ns No -tuple.
d216 5
a220 3
.It Em \&.
The current line (address) in the buffer.
.It Em $
d222 1
a222 1
.It Em n
d224 3
a226 3
.Em n Ns No th
line in the buffer where
.Em n
d228 2
a229 2
.Em [0,$] .
.It Em - No or Em ^
d232 1
a232 1
.Em -1
d234 4
a237 1
.It Em -n No or Em ^n
d239 1
a239 1
.Em n Ns No th
d241 1
a241 1
.Em n
d243 1
a243 1
.It Em +
d246 1
a246 1
.Em +1
d248 1
a248 1
.It Em +n
d250 1
a250 1
.Em n Ns No th
d252 1
a252 1
.Em n
d254 1
a254 1
.It Em \&, No or Em %
d257 2
a258 2
.Em 1,$ .
.It Em \&;
d261 2
a262 2
.Em .,$ .
.It Em / Ns No re Ns Em /
d264 1
a264 1
.Em re .
d267 1
a267 1
.Em //
d269 1
a269 1
.It Em \&? Ns No re Ns Em \&?
d271 1
a271 1
.Em re .
d274 1
a274 1
.Em ??\&
d276 1
a276 1
.It Em \&\' Ns No lc
d278 4
a281 3
.Em k
(mark) command, where
.Em lc
d289 2
a290 3
.Bd -literal -offset indent
g/string/
.Ed
d293 1
a293 1
.Em string .
d295 1
a295 1
.Em s
d307 1
a307 1
.It Em c
d309 1
a309 1
.Em c
d311 5
a315 5
.Em { Ns No ,
.Em } Ns No ,
.Em \&( Ns No ,
.Em \&) Ns No ,
.Em < Ns No ,
d317 1
a317 1
.Em >
d319 1
a319 1
.It Em \ec
d321 1
a321 1
.Em c Ns No ,
d323 7
a329 6
.Em { Ns No ,
.Em } Ns No ,
.Em \&( Ns No ,
.Em \&) Ns No ,
.Em < Ns No , and
.Em >
d331 1
a331 1
.It Em \&.
d333 1
a333 1
.It Em [char-class]
d335 1
a335 1
.Em char-class .
d339 1
a339 1
.Em char-class Ns No ,
d345 1
a345 1
.Em a-z
d348 1
a348 1
.Em char-class
d350 5
a354 4
.Pp
.Em \ \ [:alnum:]\ \ [:cntrl:]\ \ [:lower:]\ \ [:space:]
.Em \ \ [:alpha:]\ \ [:digit:]\ \ [:print:]\ \ [:upper:]
.Em \ \ [:blank:]\ \ [:graph:]\ \ [:punct:]\ \ [:xdigit:]
d359 1
a359 1
.Em char-class Ns No ,
d362 1
a362 1
.Em char-class
d366 1
a366 1
.Em char-class
d368 7
a374 1
.Em [.col-elm.] No or Em [=col-elm=]
d376 1
a376 1
.Em col-elm
d378 2
a379 2
.Xr locale 5
(not currently supported).
d383 1
a383 1
.It Em [^char-class]
d385 2
a386 2
.Em char-class Ns No .
.Em char-class
d388 1
a388 1
.It Em ^
d390 1
a390 1
.Em ^
d394 1
a394 1
.It Em $
d396 1
a396 1
.Em $
d400 1
a400 1
.It Em \e<
d403 2
a404 2
(This may not be available.)
.It Em \e>
d407 2
a408 2
(This may not be available.)
.It Em \e( Ns No re Ns Em \e)
d410 1
a410 1
.Em re .
d413 1
a413 1
.Em \en Ns No ,
d415 1
a415 1
.Em n
d417 1
a417 1
.Em n Ns No th
d420 1
a420 1
.Em \e(.*\e)\e1
d423 1
a423 1
.It Em *
d427 1
a427 1
.Em *
d431 1
a431 1
.Em *
d434 1
a434 1
.Em b*
d436 1
a436 1
.Em abbb
d438 1
a438 1
.Em bbb ) ,
d441 4
a444 3
.It Xo Em \e{ No n,m
.Em \e}\ \e{ No n, Em \e}\ \&
.Em \e{ No n Em \e}
d449 1
a449 1
.Em n
d451 1
a451 1
.Em m
d454 1
a454 1
.Em m
d456 1
a456 1
.Em n
d459 1
a459 1
.Em n
d477 4
a480 2
.Em p No (print),
.Em l No (list),
d482 2
a483 1
.Em n No (enumerate),
d486 3
a488 1
An interrupt (typically ^C) has the effect of aborting the current command
d494 3
a496 2
the default address or address range supplied if none is
specified (in parentheses), and other possible arguments on the right.
d498 1
a498 1
.It (.) Ns Em a
d502 1
a502 1
.It (.,.) Ns Em c
d508 1
a508 1
.It (.,.) Ns Em d
d513 1
a513 1
.It Em e No file
d515 1
a515 1
.Em file Ns No ,
d518 1
a518 1
.Em file
d522 1
a522 1
.It Em e No !command
d524 1
a524 1
.Em !command Ns No ,
d526 2
a527 2
.Em !\&
command below).
d530 1
a530 1
.Em command
d533 1
a533 1
.It Em E No file
d535 1
a535 1
.Em file
d538 1
a538 1
.Em e
d541 1
a541 1
.It Em f No file
d543 1
a543 1
.Em file Ns No .
d545 1
a545 1
.Em file
d547 6
a552 1
.It (1,$) Ns Em g Ns No /re/command-list
d554 1
a554 1
.Em command-list
d556 1
a556 1
.Em re Ns No .
d558 1
a558 2
.Em command-list
is executed.
d560 2
a561 3
.Em g
command, the current address is set to the last line affected by
.Em command-list Ns No .
d564 1
a564 1
.Em command-list
d566 2
a567 2
and every line except for the last must be terminated by
.Em \e No (backslash).
d569 3
a571 3
.Em g Ns No ,
.Em G Ns No ,
.Em v Ns No ,
d573 3
a575 5
.Em V Ns No .
A newline alone in
.Em command-list
is equivalent to a
.Em p
d577 3
a579 1
.It (1,$) Ns Em G Ns No /re/
d581 1
a581 1
.Em re Ns No .
d584 1
a584 1
.Em command-list Ns No .
d586 4
a589 3
.Em g
command, the current address is set to the last line affected by (the last)
.Em command-list Ns No .
d592 1
a592 1
.Em command-list
d594 1
a594 1
.Em g
d598 1
a598 1
.Em &
d600 1
a600 1
.It Em H
d606 1
a606 1
.It Em h
d608 1
a608 1
.It (.) Ns Em i
d612 1
a612 1
.It (.,.+1) Ns Em j
d617 1
a617 1
.It (.) Ns Em klc
d619 1
a619 1
.Em lc Ns No \&.
d621 1
a621 1
.Em \&'lc
d623 1
a623 1
.Em lc Ns No )
d626 1
a626 1
.It (.,.) Ns Em l
d635 1
a635 1
.It (.,.) Ns Em m Ns No (.)
d639 2
a640 2
.Em 0
(zero).
d642 1
a642 1
.It (.,.) Ns Em n
d645 1
a645 1
.It (.,.) Ns Em p
d648 1
a648 1
.It Em P
d651 1
a651 1
.Fl p Ar string Ns No ,
d653 1
a653 1
.It Em q
d656 1
a656 1
.It Em Q
d661 1
a661 1
.Em q
d663 1
a663 1
.It ($) Ns Em r No file
d665 1
a665 1
.Em file
d668 1
a668 1
.Em file
d672 1
a672 1
.Em file Ns No .
d675 1
a675 1
.It ($) Ns Em r No !command
d677 4
a680 4
.Em !command Ns No ,
(see the
.Em !\&
command below).
d684 7
a690 3
.It Xo (.,.) Em s No /re/replacement/ , \ (.,.)
.Em s No /re/replacement/ Em g , No \ (.,.)
.Em s No /re/replacement/ Em n
d694 1
a694 1
.Em re
d696 1
a696 1
.Em replacement Ns No .
d699 3
a701 2
.Em g
(global) suffix is given, then every match to be replaced.
d703 1
a703 1
.Em n
d705 1
a705 1
.Em n
d707 1
a707 1
.Em n Ns No th
d713 1
a713 1
.Em re
d715 1
a715 1
.Em replacement
d718 1
a718 1
.Em s
d722 1
a722 1
.Em p
d728 1
a728 1
.Em replacement
d731 1
a731 1
.Em \em Ns No ,
d733 1
a733 1
.Em m
d735 1
a735 1
.Em m Ns No th
d738 1
a738 1
.Em replacement
d742 1
a742 1
.Em replacement
d745 1
a745 1
.Em replacement
d748 1
a748 1
.It (.,.) Ns Em s
d751 1
a751 1
.Em s
d753 1
a753 1
.Em n Ns No ,
d755 2
a756 2
.Em r Ns No ,
.Em g Ns No ,
d758 1
a758 1
.Em p Ns No .
d760 1
a760 1
.Em n
d762 1
a762 1
.Em n Ns No th
d765 3
a767 4
.Em r
suffix causes
the regular expression of the last search to be used instead of
that of the last substitution.
d769 1
a769 1
.Em g
d772 1
a772 1
.Em p
d775 7
a781 5
.It (.,.) Ns Em t Ns No (.)
Copies (i.e., transfers) the addressed lines to after the right-hand
destination address, which may be the address
.Em 0
(zero).
d783 1
a783 1
.It Em u
d787 3
a789 3
.Em g Ns No ,
.Em G Ns No ,
.Em v Ns No ,
d791 1
a791 1
.Em V
d793 1
a793 1
.Em u
d795 6
a800 1
.It (1,$) Ns Em v Ns No /re/command-list
d802 1
a802 1
.Em command-list
d804 1
a804 1
.Em re Ns No .
d806 1
a806 1
.Em g
d808 6
a813 1
.It (1,$) Ns Em V Ns No /re/
d815 1
a815 1
.Em re Ns No .
d817 1
a817 1
.Em G
d819 1
a819 1
.It (1,$) Ns Em w No file
d821 1
a821 1
.Em file Ns No .
d823 1
a823 1
.Em file
d826 1
a826 1
.Em file Ns No ,
d830 1
a830 1
.It (1,$) Ns Em wq No file
d832 1
a832 1
.Em file Ns No ,
d834 1
a834 1
.Em q
d836 1
a836 1
.It (1,$) Ns Em w No !command
d838 4
a841 4
.Em !command Ns No ,
(see the
.Em !\&
command below).
d843 1
a843 1
.It (1,$) Ns Em W No file
d845 1
a845 1
.Em file Ns No .
d847 1
a847 1
.Em w
d850 1
a850 1
.It Em x
d857 1
a857 1
.It (.+1) Ns Em z Ns No n
d859 1
a859 1
.Em n
d862 1
a862 1
.Em n
d865 1
a865 1
.It ($) Ns Em =
d867 1
a867 1
.It (.+1) Ns Em newline
d869 1
a869 1
.It Em \&! Ns No command
d871 1
a871 1
.Em command
d875 1
a875 1
.Em command
d877 1
a877 1
.Em \&! Ns No ,
d879 1
a879 1
.Em !command Ns No .
d882 1
a882 1
.Em command
d884 3
a886 2
.Em \e
(backslash) escapes.
d888 1
a888 1
.Em %
d891 1
a891 1
.Em !\&
d898 1
a898 1
.Em file
d904 3
a906 1
If a text (non-binary) file is not terminated by a newline character,
d926 1
a926 1
.Dq \&?
d929 3
a931 2
.Em h
(help) command.
d934 3
a936 2
.Em g
(global) command masks any errors from failed searches and substitutions,
d938 2
a939 3
.Bd -literal -offset indent
g/old/s//new/
.Ed
d942 1
a942 1
.Em old
d944 1
a944 1
.Em new Ns No .
d947 4
a950 3
.Em u
(undo) command occurs in a global command list, then
the command list is executed only once.
d964 1
a964 1
USD:09-10
@


1.42
log
@USD docs for ed are 9-10, not 12,13;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.41 2003/05/29 19:09:35 jmc Exp $
d263 1
a263 1
.It Em ? Ns No re Ns Em ?
d268 1
a268 1
.Em ??
d505 2
a506 2
.Em ! No command
below).
d654 1
a654 1
.Em !
d799 1
a799 1
.Em !
d828 1
a828 1
.It Em ! Ns No command
d836 1
a836 1
.Em ! Ns No ,
d849 1
a849 1
.Em !
d882 1
a882 1
.Dq ?
@


1.41
log
@- section reorder
- correct macro
- escape some whitespace
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.40 2003/04/28 06:27:36 jmc Exp $
d918 1
a918 1
USD:12-13
@


1.40
log
@typos;

suggestions, corrections and ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.39 2003/02/18 07:57:49 jmc Exp $
d424 1
a424 1
.Em bbb Ns No ),
d428 1
a428 1
.Em \e}\ \e{ No n, Em \e}\ 
d869 9
a910 9
.Sh FILES
.Bl -tag -width /tmp/ed.* -compact
.It Pa /tmp/ed.*
buffer file
.It Pa ed.hup
where
.Nm
attempts to write the buffer if the terminal hangs up
.El
@


1.39
log
@copyrights added;

ed(1): Andrew Moore
patch(1): Larry Wall (thanks espie@@ for help with this one)
units(1): Adrian Mariano
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.38 2002/10/04 02:15:15 deraadt Exp $
a133 2
.Fl s
flag.
d292 1
a292 1
In addition to a specifying string literals, regular expressions can
d737 1
a737 1
the regular expression of the last search to be used instead of the
d744 1
a744 1
suffix toggles the print suffix of the last substitution
d760 1
a760 1
.Em V Ns No .
d783 1
a783 1
is lost without warning.
d807 1
a807 1
command, expect that the previous contents of file is not clobbered.
@


1.38
log
@wrong word; cjeker@@diehard.n-r-g.com
@
text
@d1 25
a25 1
.\"	$OpenBSD: ed.1,v 1.37 2002/08/31 21:44:29 mpech Exp $
@


1.37
log
@Unbreak. We have situations where last space in the line is required.
From dfa@@openbsd.ru
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.36 2002/02/17 23:56:04 millert Exp $
d65 1
a65 1
instead, the standard input is written directory to the editor buffer.
@


1.36
log
@Mention deprecated '-' flag (same as -s) since it is listed in the
SYNOPSIS.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.35 2001/12/21 11:41:49 mpech Exp $
d406 1
a406 1
.Em \e}\ \e{ No n, Em \e}\
@


1.35
log
@Initial patch for a new mdoc issue.
Powered by @@mantoya:
o) kill extra line in the end of file;
o) kill extra space in the end of line;
o) replace blank lines with .Pp;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.34 2001/11/13 14:00:15 mpech Exp $
d101 4
d110 2
@


1.34
log
@o) start new sentence on a new line;
o) don't use .Pp before/after .Ss;
o) wrap long lines;
o) fix bogus .Xr usage;

millert@@ ok;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.33 2001/07/20 18:07:11 mpech Exp $
d400 1
a400 1
.Em \e}\ \e{ No n, Em \e}\ 
@


1.33
log
@we don't like:
o) .Pp before/after .Sh;
o) .Pp before/after .Rs/.Re;
o) .Nm without argument in SYNOPSIS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.32 2001/06/23 05:57:02 deraadt Exp $
a134 1
.Pp
a248 1
.Pp
@


1.32
log
@ok, tmac is now fixed
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.31 2001/06/23 02:33:21 deraadt Exp $
a892 1
.Pp
@


1.31
log
@join .%A entries; most by bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.30 2001/05/28 15:36:08 aaron Exp $
d895 2
a896 1
.%A B. W. Kernighan and P. J. Plauger
@


1.30
log
@Various fixes; mpech@@prosoft.org.lv
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.29 2000/11/09 23:58:55 aaron Exp $
d895 1
a895 2
.%A B. W. Kernighan
.%A P. J. Plauger
@


1.29
log
@- Some section shuffling: conform to the standard order documented in mdoc(7)
- .Sh AUTHOR -> .Sh AUTHORS
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.28 2000/11/09 23:47:16 aaron Exp $
d650 1
a650 1
is a postive number, causes only the
@


1.28
log
@Insert some missing commas.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.27 2000/10/06 02:43:36 aaron Exp $
a826 25
.Sh FILES
.Bl -tag -width /tmp/ed.* -compact
.It Pa /tmp/ed.*
buffer file
.It Pa ed.hup
where
.Nm
attempts to write the buffer if the terminal hangs up
.El
.Sh SEE ALSO
.Xr bdes 1 ,
.Xr sed 1 ,
.Xr sh 1 ,
.Xr vi 1 ,
.Xr regex 3
.Pp
USD:12-13
.Pp
.Rs
.%A B. W. Kernighan
.%A P. J. Plauger
.%B Software Tools in Pascal
.%O Addison-Wesley
.%D 1981
.Re
d876 25
@


1.27
log
@- Get rid of more short lines.
- Fix a formatting error I missed in the last commit.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.26 2000/10/06 02:14:13 aaron Exp $
d18 1
a18 1
It is used to create, display, modify and otherwise manipulate text files.
@


1.26
log
@- Fix numerous formatting glitches.
- Convert plain reference to an mdoc macro'd reference.
- Get rid of some annoying short lines, which make the man src hard to read.
- parenthesis -> parentheses
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.25 2000/04/23 21:42:40 aaron Exp $
d141 2
a142 2
which is
typically supplied to commands as the default address when none is specified.
d145 1
a145 2
In general, the current address is set to the last line
affected by a command.
d167 1
a167 2
An address range is two addresses separated either by a comma or
semi-colon.
d170 2
a171 2
If only one address is given in a range, then
the second address is set to the given address.
d176 1
a176 2
then the corresponding range is determined by the last two addresses in
the
d211 1
a211 2
The
next line.
d226 1
a226 2
The
current through last lines in the buffer.
d230 1
a230 2
The
next line containing the regular expression
d237 1
a237 2
The
previous line containing the regular expression
d243 2
a244 3
.It Em \&\'lc
The
line previously marked by a
d337 1
a337 3
is a
collating element
are interpreted according to
d347 1
a347 2
is defined
as above.
d357 2
a358 2
is the last character of a regular expression, it
anchors the regular expression to the end of a line.
d381 2
a382 4
matches any string
consisting of identical adjacent substrings.
Subexpressions are ordered relative to
their left delimiter.
d388 2
a389 3
is the first
character of a regular expression or subexpression, then it matches
itself.
d395 1
a395 2
matches the beginning of
the string
d399 1
a399 2
since a null match
is the only leftmost match.
d457 2
a458 2
The addressed lines are deleted
from the buffer, and text is appended in their place.
d465 1
a465 2
Otherwise the current address is set to the line
before the deleted range.
d473 1
a473 2
Any lines in the buffer are deleted before
the new file is read.
d492 1
a492 2
command,
except that unwritten changes are discarded without warning.
d505 1
a505 2
The current address is set to the
line currently matched before
d532 1
a532 3
For each matching line,
the line is printed,
the current address is set,
d537 1
a537 2
command, the current address
is set to the last line affected by (the last)
d554 1
a554 2
scripts begin with this command to
aid in debugging.
d563 1
a563 2
The addressed lines are
deleted from the buffer and replaced by a single
d582 2
a583 4
waits until the RETURN key is pressed
before displaying the next screen.
The current address is set to the last line
printed.
d590 1
a590 2
The current address is set to the
last line moved.
d592 1
a592 2
Prints the addressed lines along with
their line numbers.
d611 1
a611 2
command,
except that unwritten changes are discarded without warning.
d618 1
a618 2
is not specified, then the default
filename is used.
d625 1
a625 3
Reads
to after the addressed line
the standard output of
d725 1
a725 2
The current address is set to the last line
copied.
d761 1
a761 2
If no filename is specified, then the default
filename is used.
d784 2
a785 4
Prompts for an encryption key which is used in subsequent reads and
writes.
If a newline alone is entered as the key, then encryption is
turned off.
d801 1
a801 2
Prints the addressed line, and sets the current address to
that line.
d859 1
a859 2
are
interpreted literally.
d873 2
a874 4
and either returns to command mode
or exits if its input is from a script.
An explanation of the last error can be
printed with the
d898 1
a898 2
or edit another file before writing a modified buffer
results in an error.
@


1.25
log
@Some fixups.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.24 2000/04/21 15:38:17 aaron Exp $
d18 1
a18 2
It is used to create, display, modify and otherwise manipulate text
files.
d270 1
a270 2
Regular expressions are also
used by the
d275 5
a279 7
represent
classes of strings.
Strings thus represented are said to be matched
by the corresponding regular expression.
If it is possible for a regular expression
to match several strings in a line, then the leftmost longest match is
the one selected.
d416 6
a421 1
.It Em \e{n,m\e} \e{n,\e} \e{n\e}
d447 1
a447 2
each line except for the last
must be terminated with a backslash
d465 1
a465 1
specified (in parenthesis), and other possible arguments on the right.
d519 1
a519 1
.It (1,$) Ns Em g/re/command-list
d549 1
a549 1
.It (1,$) Ns Em G/re/
d665 7
a671 5
.It (.,.) Ns Em s Ns No /re/replacement/
.It (.,.) Ns Em s Ns No /re/replacement/ Ns Em g
.It (.,.) Ns Em s Ns No /re/replacement/ Ns Em n
Replaces text in the addressed lines
matching a regular expression
d725 1
a725 1
.It Em (.,.) Ns Em s
d870 1
a870 1
file to which
d883 7
a889 3
B. W. Kernighan and P. J. Plauger,
.Em Software Tools in Pascal Ns No ,
Addison-Wesley, 1981.
@


1.24
log
@Don't hyphenate the words {left|right}most.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.23 2000/04/15 02:15:10 aaron Exp $
d58 2
a59 1
(insert) or
d61 1
a61 1
(change), is given,
d66 3
a68 7
instead, the standard input is written
directly to the editor buffer.
Lines consist of text up to and including a
.Em newline
character.
Input mode is terminated by
entering a single period
d100 1
a100 1
.Ss OPTIONS
d103 1
a103 1
Suppresses diagnostics.
d108 1
a108 1
Prompts for an encryption key to be used in subsequent reads and writes
d153 2
a154 3
.Em +
,
.Em -
d156 1
a156 1
.Em ^ )
d165 2
a166 1
This means "before the first line,"
d178 1
a178 1
.Em n > 2,
d198 2
a199 4
.Em n
th,
line in the buffer
where
d202 1
a202 1
.Em [0,$].
d229 1
a229 1
.Em 1,$.
d234 1
a234 1
.Em .,$.
d316 1
a316 1
.Em ]
d322 1
a322 1
.Em -
d335 1
a335 1
.Em -
d346 1
a346 1
.Em [.col-elm.] No or, Em [=col-elm=]
d378 1
a378 1
(This may not be available)
d382 1
a382 1
(This may not be available)
d701 1
a701 1
.Em \e
d715 1
a715 1
.Em % Ns No ,
d721 2
a722 3
if they are escaped with a
.Em \e
(backslash).
d870 1
a870 1
attempts to write the buffer if the terminal hangs uo
@


1.23
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.22 2000/03/21 14:40:14 aaron Exp $
d287 1
a287 1
to match several strings in a line, then the left-most longest match is
d424 1
a424 1
is the only left-most match.
@


1.22
log
@Add HISTORY sections; from FreeBSD. Information originally obtained from
"A Quarter Centry of UNIX, Peter H. Salus, Page 41".
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.21 2000/03/17 18:15:13 aaron Exp $
d160 1
a160 2
.Em ^
)
@


1.21
log
@Remove hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.20 1999/07/04 18:59:37 aaron Exp $
d944 5
@


1.20
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.19 1999/06/04 02:45:13 aaron Exp $
d62 2
a63 2
enters input mode.  This is the primary means
of adding text to a file.
d66 2
a67 2
directly to the editor buffer.  Lines consist of text up to and
including a
d84 2
a85 1
as in the example above.  However, even here, the
d99 2
a100 1
command.  If fewer addresses are given than the command accepts, then
d106 2
a107 1
Suppresses diagnostics. This should be used if
d116 2
a117 1
Specifies a command prompt.  This may be toggled on and off with the
d121 2
a122 1
Specifies the name of a file to read.  If
d127 2
a128 3
then it is interpreted as a shell command.  In this case,
what is read is
the standard output of
d148 2
a149 1
of the file.  In general, the current address is set to the last line
d154 2
a155 2
by a numeric offset.  The offset may include any combination
of digits, operators (i.e.,
d174 6
a179 3
semi-colon. The value of the first address in a range cannot exceed the
value of the second.  If only one address is given in a range, then
the second address is set to the given address.  If an
d189 2
a190 1
current address.  In a semi-colon-delimited range, the first address is
d233 2
a234 2
The first through last lines in the buffer.  This is equivalent to
the address range
d238 2
a239 2
current through last lines in the buffer.  This is equivalent to
the address range
d284 2
a285 1
classes of strings.  Strings thus represented are said to be matched
d408 2
a409 1
immediately preceding it zero or more times.  If
d413 2
a414 1
itself.  The
d468 2
a469 1
recognizes the following commands.  The commands are shown together with
d478 2
a479 1
Changes lines in the buffer.  The addressed lines are deleted
d486 2
a487 1
to this line. Otherwise the current address is set to the line
d573 2
a574 1
command.  A newline alone acts as a null command list.
d592 2
a593 1
Joins the addressed lines.  The addressed lines are
d618 2
a619 1
Moves lines in the buffer.  The addressed lines are moved to after the
d627 2
a628 2
their line numbers.  The current address is set to the last line
printed.
d630 2
a631 2
Prints the addressed lines. The current address is set to the last line
printed.
d651 2
a652 1
to after the addressed line.  If
d655 2
a656 1
filename is used.  If there was no default filename prior to the command,
d799 2
a800 1
otherwise it is unchanged.  If no filename is specified, then the default
d825 4
a828 2
writes.  If a newline alone is entered as the key, then encryption is
turned off.  Otherwise, echoing is disabled while a key is read.
d835 2
a836 1
lines at a time starting at addressed line.  If
d904 2
a905 1
appends one on reading/writing it.  In the case of a binary file,
@


1.19
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.18 1999/05/23 14:10:47 aaron Exp $
d325 1
a325 1
.sp
a326 1
.PD 0
a327 1
.PD 0
d329 1
a329 1
.sp
@


1.18
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.17 1999/03/01 05:39:02 aaron Exp $
d539 1
a539 1
is equivalent to a 
d548 1
a548 1
and the user is prompted to enter a 
d596 1
a596 1
prompt is printed on the last line. 
d599 1
a599 1
before displaying the next screen. 
d897 1
a897 1
Since the 
@


1.17
log
@fix a command sequence description; d@@, also some misc cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.16 1998/12/15 01:20:20 aaron Exp $
d5 1
a5 1
.Os BSD 4
@


1.16
log
@always give .Nm macros an argument in SYNOPSIS sections; krw@@tcn.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.15 1998/11/28 03:20:33 aaron Exp $
d205 1
a205 1
.It Em -n No or Em ^
d207 1
a207 1
.Em n No th
d219 1
a219 1
.Em n No th
@


1.15
log
@start killing redundant .Nm macro arguments (mandoc ``remembers'' the first one
it's given)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.14 1998/11/06 00:34:08 aaron Exp $
d10 1
a10 1
.Nm
@


1.14
log
@use .Dq/.Sq macros instead of `` ''s and ` 's (think typesetting and future
processing); kill redundant .Pp macros; other misc fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.13 1998/09/23 00:13:48 aaron Exp $
d10 1
a10 1
.Nm ed
@


1.13
log
@alphabetize SEE ALSO entries and numerically order according to section
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.12 1998/09/14 22:13:46 aaron Exp $
d185 1
a185 2
The following address symbols are recognized.
.Pp
d593 3
a595 2
If a single line fills for than one screen (as might be the case
when viewing a binary file, for instance), a `--More--' 
d888 3
a890 1
prints a `?' and either returns to command mode
@


1.12
log
@First complete sweep of man pages, bin/. Command/function names previously
(incorrectly) capatilized are fixed. Comma splices, hyphenations, SYNOPSIS
cleanups, other miscellaneous typos.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.11 1998/09/01 16:38:14 deraadt Exp $
d858 3
d862 1
a862 4
.Xr sed 1 ,
.Xr regex 3 ,
.Xr bdes 1 ,
.Xr sh 1
@


1.11
log
@more man page fixes; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.10 1998/07/21 08:10:22 deraadt Exp $
d3 1
a3 1
.Dd May 2 1993
d35 1
a35 1
.Pa command
d37 1
a37 1
.Pa input No .
d41 1
a41 1
In this mode commands are read from the standard input and
d52 1
a52 1
.Pa new No .
d59 1
a59 1
.em c
d72 1
a72 1
.No ( Em \&. Ns No )
d84 1
a84 1
as in the example above.  However even here, the
d120 3
a122 1
bang (!), then it is interpreted as a shell command.  In this case,
d129 2
a130 3
name with a
.Em \e
(backslash).
d444 2
a445 3
must be terminated with a
.Em \e
(backslash).
d568 3
a570 1
It is recommended that ed scripts begin with this command to
d622 2
a623 1
Quits ed.
d625 3
a627 1
Quits ed unconditionally.
d849 1
a849 1
.Bl -tag -width /etc/passwd -compact
d851 1
a851 1
Buffer file
d853 1
a853 1
The file to which
d855 1
a855 1
attempts to write the buffer if the terminal hangs up.
d862 1
a862 1
.Xr sh 1 .
d874 3
a876 1
any characters preceded by a backslash (\\) are
@


1.10
log
@fix +n description; jkoshy@@freebsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.9 1998/01/02 04:31:16 deraadt Exp $
d49 1
a49 1
which replaces all occurences of the string
@


1.9
log
@man page error; helbig
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.8 1997/08/30 17:20:50 deraadt Exp $
d139 1
a139 1
.I current address
d217 1
a217 1
.It Em +n No or whitespace Ns Em n
a222 5
Whitespace
followed by a number
.Em n
is interpreted as
.Em +n No .
@


1.8
log
@minor errors; josh@@quick.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.7 1997/08/04 03:17:36 deraadt Exp $
d759 1
a759 1
.It (1,$) Ns Em v Ns No /pat/command-list
@


1.7
log
@bad Ns
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.6 1997/08/04 03:16:31 deraadt Exp $
d445 1
a445 1
commands are single characters, though some require additonal parameters.
@


1.6
log
@more Ns
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.5 1997/08/03 10:51:31 deraadt Exp $
d503 1
a503 1
.It Em E Ns No file
@


1.5
log
@oops. ok, why does my footer not show up yet??
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.4 1997/08/03 10:44:32 deraadt Exp $
d653 3
a655 3
.It (.,.) Em s Ns No /re/replacement/
.It (.,.) Em s Ns No /re/replacement/ Ns Em g
.It (.,.) Em s Ns No /re/replacement/ Ns Em n
@


1.4
log
@roughly 3 hours of slaving results in a much more beautiful mdoc man page.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.3 1996/12/10 09:05:56 deraadt Exp $
d5 1
d440 1
a440 1
.IR regex (3)
@


1.3
log
@"the the" purge
@
text
@d1 1
a1 2
.\"	$OpenBSD: ed.1,v 1.2 1996/06/23 14:20:00 deraadt Exp $
.\"	$NetBSD: ed.1,v 1.13 1995/03/21 09:04:38 cgd Exp $
d3 13
a15 10
.TH ED 1 "21 May 1993"
.SH NAME
.\" ed, red \- text editor
ed \- text editor
.SH SYNOPSIS
ed [-] [-sx] [-p \fIstring\fR] [\fIfile\fR]
.\" .LP
.\" red [-] [-sx] [-p \fIstring\fR] [\fIfile\fR]
.SH DESCRIPTION
.B ed
a18 6
.\" .B red
.\" is a restricted
.\" .BR ed :
.\" it can only edit files in the current
.\" directory and cannot execute shell commands.

d20 1
a20 1
.I file
d22 1
a22 1
.I file
d25 1
a25 1
.I file
d28 3
a30 3
.BR ed ,
any changes not explicitly saved  with a
.I `w'
d32 1
a32 1

d34 1
a34 1
.I command
d36 1
a36 1
.IR input .
d38 1
a38 1
.B ed
d42 1
d44 4
a47 5
.sp
.RS
,s/\fIold\fR/\fInew\fR/g
.RE
.sp
d49 1
a49 1
.I old
d51 2
a52 2
.IR new .

d54 1
a54 1
.I `a'
d56 1
a56 1
.I `i'
d58 1
a58 1
.I `c'
d60 1
a60 1
.B ed
d67 1
a67 1
.IR newline
d70 4
a73 2
entering a single period  (\fI.\fR) on a line.

d75 1
a75 1
.B ed
d78 1
a78 1
.I `d'
d80 1
a80 1
.I `m'
d84 1
a84 1
.I `s'
d86 1
a86 1

d88 1
a88 1
.B ed
d92 4
a95 5
.sp
.RS
.I [address [,address]]command[parameters]
.RE
.sp
d99 4
a102 4

.SS OPTIONS
.TP 8
-s
d104 1
a104 1
.BR ed 's
d106 1
a106 3

.TP 8
-x
d109 1
a109 1
.I `x'
d111 1
a111 3

.TP 8
.RI \-p \ string
d113 1
a113 1
.I `P'
d115 1
a115 3

.TP 8
.I file
d117 1
a117 1
.I file
d122 1
a122 1
.I file
d124 1
a124 1
.IR sh (1).
d126 3
a128 1
name with a backslash (\\).
d130 1
a130 1
.I file
d132 3
a134 2

.SS LINE ADDRESSING
d136 1
a136 1
.B ed
d141 1
a141 1
When a file is first read,  the current address is set to the last line
d144 1
a144 1

d149 3
a151 2
.IR + ,
.I -
d153 2
a154 1
.IR ^ )
d158 1
a158 1

d161 1
a161 1
.I 0
d165 1
a165 1

d170 1
a170 1
.IR n- tuple
d172 1
a172 1
.I n > 2,
d175 1
a175 1
.IR n- tuple.
d177 1
a177 1

d182 1
a182 2


d184 3
a186 3

.TP 8
\&.
d188 1
a188 3

.TP 8
$
d190 1
a190 3

.TP 8
n
d192 2
a193 1
.IR n th,
d196 1
a196 1
.I n
d198 2
a199 4
.I [0,$].

.TP 8
- or ^
d202 1
a202 1
.I -1
d204 1
a204 3

.TP 8
-\fIn\fR or ^\fIn\fR
d206 1
a206 1
.IR n th
d208 1
a208 1
.I n
d210 1
a210 3

.TP 8
+
d214 1
a214 1
.I +1
d216 1
a216 3

.TP 8
+\fIn\fR or whitespace\fIn\fR
d218 1
a218 1
.IR n th
d220 1
a220 1
.I n
d222 1
a222 1
.I whitespace
d224 1
a224 1
.I n
d226 2
a227 4
.IR +n .

.TP 8
, \fRor\fB %
d230 2
a231 4
.I 1,$.

.TP 8
;
d235 2
a236 4
.I .,$.

.TP 8
.RI / re/
d239 1
a239 1
.IR re .
d242 3
a244 4
// repeats the last search.

.TP 8
.RI ? re?
d247 1
a247 1
.IR re .
d250 3
a252 4
?? repeats the last search.

.TP 8
.RI \' lc
d255 1
a255 1
.I `k'
d257 1
a257 1
.I lc
d259 3
a261 2

.SS REGULAR EXPRESSIONS
d264 1
a264 1
.B ed
d266 4
a269 5
.sp
.RS
g/\fIstring\fR/
.RE
.sp
d271 1
a271 1
.IR string .
d274 1
a274 1
.I `s'
d276 1
a276 1

d284 1
a284 1

d286 2
a287 3

.TP 8
c
d289 9
a297 2
.I c
not listed below, including `{', '}', `(', `)', `<' and `>',
d299 1
a299 3

.TP 8
\fR\e\fIc\fR
d301 8
a308 2
.IR c ,
except for `{', '}', `(', `)', `<' and `>',
d310 1
a310 3

.TP 8
\fR.\fR
d312 1
a312 3

.TP 8
.I [char-class]
d314 3
a316 2
.IR char-class .
To include a  `]'
d318 1
a318 1
.IR char-class ,
d321 5
a325 1
of the range with a `-', e.g., `a-z' specifies the lower case characters.
d327 1
a327 1
.I char-class
d330 1
a330 1
\ \ [:alnum:]\ \ [:cntrl:]\ \ [:lower:]\ \ [:space:]
d332 1
a332 1
\ \ [:alpha:]\ \ [:digit:]\ \ [:print:]\ \ [:upper:]
d334 1
a334 1
\ \ [:blank:]\ \ [:graph:]\ \ [:punct:]\ \ [:xdigit:]
d336 4
a339 3
If `-' appears as the first or last
character of
.IR char-class ,
d342 1
a342 1
.I char-class
d344 1
a344 1
.sp
d346 3
a348 7
.I char-class
of the form:
.sp
\ \ [.\fIcol-elm\fR.] or,
.PD 0
\ \ [=\fIcol-elm\fR=]
.sp
d350 1
a350 1
.I col-elm
d352 1
a352 1
.I collating element
d354 1
a354 1
.IR locale (5)
d357 1
a357 1
.IR regex (3)
d359 1
a359 3

.TP 8
[^\fIchar-class\fR]
d361 2
a362 2
.IR char-class .
.IR char-class
d365 4
a368 4

.TP 8
^
If `^' is the first character of a regular expression, then it
d371 4
a374 4

.TP 8
$
If `$' is the last character of a regular expression, it
d377 1
a377 3

.TP 8
\fR\e<\fR
d381 1
a381 3

.TP 8
\fR\e>\fR
d385 1
a385 3

.TP 8
\fR\e(\fIre\fR\e)\fR
d387 1
a387 1
.IR re .
d389 4
a392 2
A subsequent backreference of the form \fI`\en'\fR, where
.I n
d394 1
a394 1
.IR n th
d396 3
a398 1
For example, the regular expression `\e(.*\e)\e1' matches any string
d402 1
a402 3

.TP 8
*
d404 3
a406 1
immediately preceding it zero or more times.  If '*' is the first
d408 11
a418 3
itself.  The `*' operator sometimes yields unexpected results.
For example, the regular expression `b*' matches the beginning of
the string `abbb' (as opposed to the substring `bbb'), since a null match
d420 1
a420 3

.TP 8
\fR\e{\fIn,m\fR\e}\fR or \fR\e{\fIn,\fR\e}\fR or \fR\e{\fIn\fR\e}\fR
d423 1
a423 1
.I n
d425 1
a425 1
.I m
d428 1
a428 1
.I m
d430 1
a430 1
.I n
d433 1
a433 1
.I n
d435 2
a436 2

.LP
d441 1
a441 2

.SS COMMANDS
d443 1
a443 1
.B ed
d447 4
a450 2
must be terminated with a backslash (\\).

d453 2
a454 4
.I `p'
(print),
.I `l'
(list) ,
d456 1
a456 2
.I `n'
(enumerate),
d458 1
a458 1

d461 2
a462 2

.B ed
d465 3
a467 4
specified (in parenthesis).

.TP 8
(.)a
d471 1
a471 3

.TP 8
(.,.)c
d476 1
a476 3

.TP 8
(.,.)d
d481 1
a481 3

.TP 8
.RI e \ file
d483 1
a483 1
.IR file ,
d486 2
a487 2
.I file
is not specified, then the  default filename is used.
d491 1
a491 3

.TP 8
.RI e \ !command
d493 1
a493 1
.IR `!command' ,
d495 1
a495 1
.RI ! command
d499 1
a499 1
.I command
d502 1
a502 3

.TP 8
.RI E \ file
d504 1
a504 1
.I file
d507 1
a507 1
.I e
d511 1
a511 3

.TP 8
.RI f \ file
d513 1
a513 1
.IR file .
d515 1
a515 1
.I file
d517 1
a517 3

.TP 8
.RI (1,$)g /re/command-list
d519 1
a519 1
.I command-list
d521 1
a521 1
.IR re .
d524 1
a524 1
.I command-list
d527 1
a527 1
.I `g'
d529 2
a530 2
.IR command-list .

d532 1
a532 1
.I command-list
d534 2
a535 2
and every line except for the last must be terminated by a backslash
(\\).
d537 3
a539 3
.IR `g' ,
.IR `G' ,
.IR `v' ,
d541 1
a541 1
.IR `V' .
d543 1
a543 1
.I command-list
d545 1
a545 1
.I `p'
d547 1
a547 3

.TP 8
.RI (1,$)G /re/
d549 1
a549 1
.IR re.
d554 1
a554 1
.IR command-list .
d556 1
a556 1
.I `G'
d559 2
a560 2
.IR command-list .

d562 1
a562 1
.I command-list
d564 1
a564 1
.I `g'
d566 4
a569 4
A single `&' repeats the last non-null command list.

.TP 8
H
d574 1
a574 3

.TP 8
h
d576 1
a576 3

.TP 8
(.)i
d580 1
a580 3

.TP 8
(.,.+1)j
d585 1
a585 3

.TP 8
.RI (.)k lc
d587 3
a589 3
.IR lc .
The  line can then be addressed as
.I 'lc
d591 4
a594 6
.I lc
) in subsequent commands.  The mark is not cleared until the line is
deleted or otherwise modified.

.TP 8
(.,.)l
d599 1
a599 1
.B ed
d604 1
a604 3

.TP 8
(.,.)m(.)
d607 1
a607 1
.IR 0
d611 1
a611 3

.TP 8
(.,.)n
d615 1
a615 3

.TP 8
(.,.)p
d618 1
a618 3

.TP 8
P
d621 3
a623 4
\fI-p string\fR, the command prompt is by default turned off.

.TP 8
q
d625 1
a625 3

.TP 8
Q
d628 1
a628 1
.I q
d631 1
a631 3

.TP 8
.RI ($)r \ file
d633 1
a633 1
.I file
d635 1
a635 1
.I file
d639 1
a639 1
.IR file .
d642 1
a642 3

.TP 8
.RI ($)r \ !command
d646 1
a646 1
.IR `!command' ,
d648 2
a649 2
.RI ! command
below).
d652 3
a654 9

.HP
.RI (.,.)s /re/replacement/
.PD 0
.HP
.RI (.,.)s  /re/replacement/\fRg\fR
.HP
.RI (.,.)s  /re/replacement/n
.br
d657 1
a657 1
.I re
d659 1
a659 1
.IR replacement .
d662 1
a662 1
.I `g'
d665 1
a665 1
.I `n'
d667 1
a667 1
.I n
d669 1
a669 1
.IR n th
d674 2
a675 2

.I re
d677 1
a677 1
.I replacement
d680 1
a680 1
.I `s'
d684 1
a684 1
.I `p'
d686 5
a690 4


An unescaped `&' in
.I replacement
d693 1
a693 1
\fI`\em'\fR,
d695 1
a695 1
.I m
d697 1
a697 1
.IR m th
d700 5
a704 3
.I replacement
consists of a single `%', then
.I replacement
d707 5
a711 5
.I replacement
if they are escaped with a backslash (\\).

.TP 8
(.,.)s
d714 1
a714 1
.I `s'
d716 1
a716 1
.IR `n' ,
d718 2
a719 2
.IR `r' ,
.IR `g' ,
d721 1
a721 1
.IR `p' .
d723 1
a723 1
.I `n'
d725 1
a725 1
.IR n th
d728 1
a728 1
.I `r'
d733 1
a733 1
.I `g'
d736 1
a736 1
.I `p'
d739 1
a739 3

.TP 8
(.,.)t(.)
d742 1
a742 1
.IR 0
d746 1
a746 3

.TP 8
u
d750 3
a752 3
.IR `g' ,
.IR `G' ,
.IR `v' ,
d754 1
a754 1
.IR `V' .
d756 1
a756 1
.I `u'
d758 1
a758 3

.TP 8
.RI (1,$)v /pat/command-list
d760 1
a760 1
.I command-list
d762 1
a762 1
.IR re .
d764 1
a764 1
.I `g'
d766 1
a766 3

.TP 8
.RI (1,$)V /re/
d768 1
a768 1
.IR re.
d770 1
a770 1
.I `G'
d772 1
a772 3

.TP 8
.RI (1,$)w \ file
d774 1
a774 1
.IR file .
d776 1
a776 1
.I file
d779 1
a779 1
.IR file,
d783 1
a783 3

.TP 8
.RI (1,$)wq \ file
d785 1
a785 1
.IR file ,
d787 1
a787 1
.I `q'
d789 1
a789 3

.TP 8
.RI (1,$)w \ !command
d791 1
a791 1
.IR `!command' ,
d793 2
a794 2
.RI ! command
below).
d796 1
a796 3

.TP 8
.RI (1,$)W \ file
d798 1
a798 1
.IR file .
d800 1
a800 1
.I `w'
d803 1
a803 3

.TP 8
x
d807 4
a810 4
Encryption/decryption is done using the bdes(1) algorithm.

.TP 8
.RI (.+1)z n
d812 1
a812 1
.I n
d814 1
a814 1
.I n
d817 6
a822 3

.TP 8
.RI ! command
d824 1
a824 1
.I command
d826 1
a826 1
.IR sh (1).
d828 6
a833 5
.I command
is `!', then it is replaced by text of the
previous
.IR `!command' .
.B ed
d835 4
a838 2
.I command
for backslash (\\) escapes.
d840 1
a840 1
.I `%'
d842 2
a843 1
When the shell returns from execution, a `!'
d846 4
a849 13

.TP 8
($)=
Prints the line number of the addressed line.

.TP 8
(.+1)newline
Prints the addressed line, and sets the current address to
that line.

.SH FILES
.TP 20
/tmp/ed.*
d851 1
a851 3
.PD 0
.TP 20
ed.hup
d853 10
a862 11
.B ed
attempts to write the  buffer if the terminal hangs up.

.SH SEE ALSO

.IR vi (1),
.IR sed (1),
.IR regex (3),
.IR bdes (1),
.IR sh (1).

d864 1
a864 1

d866 1
a866 1
.I Software Tools in Pascal ,
d868 2
a869 3

.SH LIMITATIONS
.B ed
d871 2
a872 2
.I file
arguments for backslash escapes, i.e.,  in a filename,
d875 1
a875 1

d878 1
a878 1
.B ed
d880 1
a880 1
.B ed
d882 1
a882 4

per line overhead: 4 ints

.SH DIAGNOSTICS
d884 1
a884 1
.B ed
d889 1
a889 1
.I `h'
d891 1
a891 1

d893 2
a894 2
.I `g'
(global) command  masks any errors from failed searches and substitutions,
d896 4
a899 5
.sp
.RS
g/\fIold\fR/s//\fInew\fR/
.RE
.sp
d901 1
a901 1
.I old
d903 2
a904 1
.IR new .
d906 1
a906 1
.I `u'
d909 1
a909 1

d911 1
a911 1
.B ed
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: ed.1,v 1.13 1995/03/21 09:04:38 cgd Exp $
d172 1
a172 1
value of the the second.  If only one address is given in a range, then
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
