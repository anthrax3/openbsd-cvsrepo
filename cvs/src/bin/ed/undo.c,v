head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.6
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.8
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.03.22.17.58.28;	author mmcc;	state Exp;
branches;
next	1.13;
commitid	dG9FDzJpMhZLrmQQ;

1.13
date	2015.10.09.19.47.02;	author millert;	state Exp;
branches;
next	1.12;
commitid	z8ymRwVMvCsHkr2w;

1.12
date	2014.05.18.16.36.42;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2012.12.04.02.40.48;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.02.15.19.07;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.11.23.42.12;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.18.13.14.43;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.24.22.17.04;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.16.03.04.46;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.10.12.19.38.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.22.25.58;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@header cleanup

from Edgar Pettijohn, correction from deraadt@@
@
text
@/*	$OpenBSD: undo.c,v 1.13 2015/10/09 19:47:02 millert Exp $	*/
/*	$NetBSD: undo.c,v 1.2 1995/03/21 09:04:52 cgd Exp $	*/

/* undo.c: This file contains the undo routines for the ed line editor */
/*-
 * Copyright (c) 1993 Andrew Moore, Talke Studio.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <regex.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>

#include "ed.h"

#define USIZE 100				/* undo stack size */
static undo_t *ustack = NULL;			/* undo stack */
static int usize = 0;				/* stack size variable */
static int u_p = 0;				/* undo stack pointer */

/* push_undo_stack: return pointer to initialized undo node */
undo_t *
push_undo_stack(int type, int from, int to)
{
	undo_t *t;

	t = ustack;
	if (u_p < usize ||
	    (t = reallocarray(ustack, (usize += USIZE), sizeof(undo_t))) != NULL) {
		ustack = t;
		ustack[u_p].type = type;
		ustack[u_p].t = get_addressed_line_node(to);
		ustack[u_p].h = get_addressed_line_node(from);
		return ustack + u_p++;
	}
	/* out of memory - release undo stack */
	perror(NULL);
	seterrmsg("out of memory");
	clear_undo_stack();
	free(ustack);
	ustack = NULL;
	usize = 0;
	return NULL;
}


/* USWAP: swap undo nodes */
#define USWAP(x,y) { \
	undo_t utmp; \
	utmp = x, x = y, y = utmp; \
}


int u_current_addr = -1;	/* if >= 0, undo enabled */
int u_addr_last = -1;		/* if >= 0, undo enabled */

/* pop_undo_stack: undo last change to the editor buffer */
int
pop_undo_stack(void)
{
	int n;
	int o_current_addr = current_addr;
	int o_addr_last = addr_last;

	if (u_current_addr == -1 || u_addr_last == -1) {
		seterrmsg("nothing to undo");
		return ERR;
	} else if (u_p)
		modified = 1;
	get_addressed_line_node(0);	/* this get_addressed_line_node last! */
	SPL1();
	for (n = u_p; n-- > 0;) {
		switch(ustack[n].type) {
		case UADD:
			REQUE(ustack[n].h->q_back, ustack[n].t->q_forw);
			break;
		case UDEL:
			REQUE(ustack[n].h->q_back, ustack[n].h);
			REQUE(ustack[n].t, ustack[n].t->q_forw);
			break;
		case UMOV:
		case VMOV:
			REQUE(ustack[n - 1].h, ustack[n].h->q_forw);
			REQUE(ustack[n].t->q_back, ustack[n - 1].t);
			REQUE(ustack[n].h, ustack[n].t);
			n--;
			break;
		default:
			/*NOTREACHED*/
			;
		}
		ustack[n].type ^= 1;
	}
	/* reverse undo stack order */
	for (n = u_p; n-- > (u_p + 1)/ 2;)
		USWAP(ustack[n], ustack[u_p - 1 - n]);
	if (isglobal)
		clear_active_list();
	current_addr = u_current_addr, u_current_addr = o_current_addr;
	addr_last = u_addr_last, u_addr_last = o_addr_last;
	SPL0();
	return 0;
}


/* clear_undo_stack: clear the undo stack */
void
clear_undo_stack(void)
{
	line_t *lp, *ep, *tl;

	while (u_p--)
		if (ustack[u_p].type == UDEL) {
			ep = ustack[u_p].t->q_forw;
			for (lp = ustack[u_p].h; lp != ep; lp = tl) {
				unmark_line_node(lp);
				tl = lp->q_forw;
				free(lp);
			}
		}
	u_p = 0;
	u_current_addr = current_addr;
	u_addr_last = addr_last;
}
@


1.13
log
@Mark static globals that are only used in their respective .c files.
Also make stdin unbuffered since that is the same as using a
single-byte buffer.  OK tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.12 2014/05/18 16:36:42 espie Exp $	*/
d31 5
a36 1

@


1.12
log
@use reallocarray
okay miod@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.11 2012/12/04 02:40:48 deraadt Exp $	*/
d35 3
a37 3
undo_t *ustack = NULL;				/* undo stack */
int usize = 0;					/* stack size variable */
int u_p = 0;					/* undo stack pointer */
@


1.11
log
@remove sunos backwards compat
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.10 2009/10/27 23:59:21 deraadt Exp $	*/
d47 1
a47 1
	    (t = (undo_t *) realloc(ustack, (usize += USIZE) * sizeof(undo_t))) != NULL) {
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.9 2007/09/02 15:19:07 deraadt Exp $	*/
a44 8
#if defined(sun) || defined(NO_REALLOC_NULL)
	if (ustack == NULL &&
	    (ustack = (undo_t *) calloc((usize = USIZE), sizeof(undo_t))) == NULL) {
		perror(NULL);
		seterrmsg("out of memory");
		return NULL;
	}
#endif
@


1.9
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.8 2003/06/11 23:42:12 deraadt Exp $	*/
a29 8

#ifndef lint
#if 0
static char *rcsid = "@@(#)undo.c,v 1.1 1994/02/01 00:34:44 alm Exp";
#else
static char rcsid[] = "$OpenBSD: undo.c,v 1.8 2003/06/11 23:42:12 deraadt Exp $";
#endif
#endif /* not lint */
@


1.8
log
@ansification, art ok
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.7 2003/02/18 13:14:43 jmc Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: undo.c,v 1.7 2003/02/18 13:14:43 jmc Exp $";
d55 1
a55 1
	    (ustack = (undo_t *) malloc((usize = USIZE) * sizeof(undo_t))) == NULL) {
@


1.7
log
@intial -> initial;

the great intial witch hunt, as prompted by tdeval@@

os-aix-dso.c: ok henning@@
ab.C: ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.6 2002/03/24 22:17:04 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: undo.c,v 1.6 2002/03/24 22:17:04 millert Exp $";
d49 1
a49 4
push_undo_stack(type, from, to)
	int type;
	int from;
	int to;
d93 1
a93 1
pop_undo_stack()
d142 1
a142 1
clear_undo_stack()
@


1.6
log
@Kill unneeded longs; fixes some minor 64 bit issues.  deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.5 2001/01/16 03:04:46 deraadt Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: undo.c,v 1.5 2001/01/16 03:04:46 deraadt Exp $";
d47 1
a47 1
/* push_undo_stack: return pointer to intialized undo node */
@


1.5
log
@cleanup strcpy, strncpy, signal races, etc
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.4 1996/10/12 19:38:43 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: undo.c,v 1.4 1996/10/12 19:38:43 millert Exp $";
d44 2
a45 2
long usize = 0;					/* stack size variable */
long u_p = 0;					/* undo stack pointer */
d51 2
a52 2
	long from;
	long to;
d91 2
a92 2
long u_current_addr = -1;	/* if >= 0, undo enabled */
long u_addr_last = -1;		/* if >= 0, undo enabled */
d98 3
a100 3
	long n;
	long o_current_addr = current_addr;
	long o_addr_last = addr_last;
@


1.4
log
@Back out my sprintf -> snprintf changes where they don't make sense and
use good ole strcpy() instead.  Also use perror() instead of fprintf()
where it makes sense.
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.3 1996/09/15 22:25:58 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: undo.c,v 1.3 1996/09/15 22:25:58 millert Exp $";
d60 1
a60 1
		strcpy(errmsg, "out of memory");
d75 1
a75 1
	strcpy(errmsg, "out of memory");
d103 1
a103 1
		strcpy(errmsg, "nothing to undo");
@


1.3
log
@sprintf -> snprintf paranoia
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.2 1996/06/23 14:20:04 deraadt Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: undo.c,v 1.2 1996/06/23 14:20:04 deraadt Exp $";
d59 2
a60 2
		fprintf(stderr, "%s\n", strerror(errno));
		snprintf(errmsg, sizeof(errmsg), "out of memory");
d74 2
a75 2
	fprintf(stderr, "%s\n", strerror(errno));
	snprintf(errmsg, sizeof(errmsg), "out of memory");
d103 1
a103 1
		snprintf(errmsg, sizeof(errmsg), "nothing to undo");
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: undo.c,v 1.2 1995/03/21 09:04:52 cgd Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: undo.c,v 1.2 1995/03/21 09:04:52 cgd Exp $";
d60 1
a60 1
		sprintf(errmsg, "out of memory");
d75 1
a75 1
	sprintf(errmsg, "out of memory");
d103 1
a103 1
		sprintf(errmsg, "nothing to undo");
@


1.1
log
@Initial revision
@
text
@d1 1
d35 1
a35 1
static char rcsid[] = "$NetBSD: undo.c,v 1.2 1995/03/21 09:04:52 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
