head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.10
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.8
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.03.22.17.58.28;	author mmcc;	state Exp;
branches;
next	1.17;
commitid	dG9FDzJpMhZLrmQQ;

1.17
date	2015.10.09.20.27.28;	author tobias;	state Exp;
branches;
next	1.16;
commitid	75UxTlTgsWoFG3EU;

1.16
date	2015.10.09.19.47.02;	author millert;	state Exp;
branches;
next	1.15;
commitid	z8ymRwVMvCsHkr2w;

1.15
date	2015.10.04.15.23.24;	author millert;	state Exp;
branches;
next	1.14;
commitid	DzhpkCptJKskzdTA;

1.14
date	2014.05.18.16.36.42;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2012.12.04.02.40.48;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.03.14.26.54;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.11.23.42.12;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.24.22.17.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.16.03.04.45;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.04.30.05.55.05;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.09.01.18.29.28;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.12.14.12.17.53;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.10.12.19.38.34;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.22.25.55;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.01;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@header cleanup

from Edgar Pettijohn, correction from deraadt@@
@
text
@/*	$OpenBSD: glbl.c,v 1.17 2015/10/09 20:27:28 tobias Exp $	*/
/*	$NetBSD: glbl.c,v 1.2 1995/03/21 09:04:41 cgd Exp $	*/

/* glob.c: This file contains the global command routines for the ed line
   editor */
/*-
 * Copyright (c) 1993 Andrew Moore, Talke Studio.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/ioctl.h>
#include <sys/wait.h>

#include <regex.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ed.h"

static int set_active_node(line_t *);
static line_t *next_active_node(void);

/* build_active_list:  add line matching a pattern to the global-active list */
int
build_active_list(int isgcmd)
{
	regex_t *pat;
	line_t *lp;
	int n;
	char *s;
	char delimiter;

	if ((delimiter = *ibufp) == ' ' || delimiter == '\n') {
		seterrmsg("invalid pattern delimiter");
		return ERR;
	} else if ((pat = get_compiled_pattern()) == NULL)
		return ERR;
	else if (*ibufp == delimiter)
		ibufp++;
	clear_active_list();
	lp = get_addressed_line_node(first_addr);
	for (n = first_addr; n <= second_addr; n++, lp = lp->q_forw) {
		if ((s = get_sbuf_line(lp)) == NULL)
			return ERR;
		if (isbinary)
			NUL_TO_NEWLINE(s, lp->len);
		if (!regexec(pat, s, 0, NULL, 0) == isgcmd &&
		    set_active_node(lp) < 0)
			return ERR;
	}
	return 0;
}


/* exec_global: apply command list in the command buffer to the active
   lines in a range; return command status */
int
exec_global(int interact, int gflag)
{
	static char *ocmd = NULL;
	static int ocmdsz = 0;

	line_t *lp = NULL;
	int status;
	int n;
	char *cmd = NULL;

#ifdef BACKWARDS
	if (!interact) {
		if (!strcmp(ibufp, "\n"))
			cmd = "p\n";		/* null cmd-list == `p' */
		else if ((cmd = get_extended_line(&n, 0)) == NULL)
			return ERR;
	}
#else
	if (!interact && (cmd = get_extended_line(&n, 0)) == NULL)
		return ERR;
#endif
	clear_undo_stack();
	while ((lp = next_active_node()) != NULL) {
		if ((current_addr = get_line_node_addr(lp)) < 0)
			return ERR;
		if (interact) {
			/* print current_addr; get a command in global syntax */
			if (display_lines(current_addr, current_addr, gflag) < 0)
				return ERR;
			while ((n = get_tty_line()) > 0 &&
			    ibuf[n - 1] != '\n')
				clearerr(stdin);
			if (n < 0)
				return ERR;
			else if (n == 0) {
				seterrmsg("unexpected end-of-file");
				return ERR;
			} else if (n == 1 && !strcmp(ibuf, "\n"))
				continue;
			else if (n == 2 && !strcmp(ibuf, "&\n")) {
				if (cmd == NULL) {
					seterrmsg("no previous command");
					return ERR;
				} else cmd = ocmd;
			} else if ((cmd = get_extended_line(&n, 0)) == NULL)
				return ERR;
			else {
				REALLOC(ocmd, ocmdsz, n + 1, ERR);
				memcpy(ocmd, cmd, n + 1);
				cmd = ocmd;
			}

		}
		ibufp = cmd;
		for (; *ibufp;)
			if ((status = extract_addr_range()) < 0 ||
			    (status = exec_command()) < 0 ||
			    (status > 0 && (status = display_lines(
			    current_addr, current_addr, status)) < 0))
				return status;
	}
	return 0;
}


static line_t **active_list;	/* list of lines active in a global command */
static int active_last;		/* index of last active line in active_list */
static int active_size;		/* size of active_list */
static int active_ptr;		/* active_list index (non-decreasing) */
static int active_ndx;		/* active_list index (modulo active_last) */

/* set_active_node: add a line node to the global-active list */
static int
set_active_node(line_t *lp)
{
	if (active_last + 1 > active_size) {
		int ti = active_size;
		line_t **ts;
		SPL1();
		if ((ts = reallocarray(active_list,
		    (ti += MINBUFSZ), sizeof(line_t **))) == NULL) {
			perror(NULL);
			seterrmsg("out of memory");
			SPL0();
			return ERR;
		}
		active_size = ti;
		active_list = ts;
		SPL0();
	}
	active_list[active_last++] = lp;
	return 0;
}


/* unset_active_nodes: remove a range of lines from the global-active list */
void
unset_active_nodes(line_t *np, line_t *mp)
{
	line_t *lp;
	int i;

	for (lp = np; lp != mp; lp = lp->q_forw)
		for (i = 0; i < active_last; i++)
			if (active_list[active_ndx] == lp) {
				active_list[active_ndx] = NULL;
				active_ndx = INC_MOD(active_ndx, active_last - 1);
				break;
			} else	active_ndx = INC_MOD(active_ndx, active_last - 1);
}


/* next_active_node: return the next global-active line node */
static line_t *
next_active_node(void)
{
	while (active_ptr < active_last && active_list[active_ptr] == NULL)
		active_ptr++;
	return (active_ptr < active_last) ? active_list[active_ptr++] : NULL;
}


/* clear_active_list: clear the global-active list */
void
clear_active_list(void)
{
	SPL1();
	active_size = active_last = active_ptr = active_ndx = 0;
	free(active_list);
	active_list = NULL;
	SPL0();
}
@


1.17
log
@Define functions as static when they are not used outside their own c-files.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.16 2015/10/09 19:47:02 millert Exp $	*/
d34 6
@


1.16
log
@Mark static globals that are only used in their respective .c files.
Also make stdin unbuffered since that is the same as using a
single-byte buffer.  OK tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.15 2015/10/04 15:23:24 millert Exp $	*/
d37 2
d147 1
a147 1
int
d188 1
a188 1
line_t *
@


1.15
log
@Remove useless pattern_t typedef, POSIX regex is here to stay so
just use regex_t directly.
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.14 2014/05/18 16:36:42 espie Exp $	*/
d138 5
a142 5
line_t **active_list;		/* list of lines active in a global command */
int active_last;		/* index of last active line in active_list */
int active_size;		/* size of active_list */
int active_ptr;			/* active_list index (non-decreasing) */
int active_ndx;			/* active_list index (modulo active_last) */
@


1.14
log
@use reallocarray
okay miod@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.13 2012/12/04 02:40:48 deraadt Exp $	*/
d42 1
a42 1
	pattern_t *pat;
@


1.13
log
@remove sunos backwards compat
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.12 2009/10/27 23:59:21 deraadt Exp $	*/
d152 2
a153 2
		if ((ts = (line_t **) realloc(active_list,
		    (ti += MINBUFSZ) * sizeof(line_t **))) == NULL) {
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.11 2007/09/03 14:26:54 deraadt Exp $	*/
d152 6
a157 19
#if defined(sun) || defined(NO_REALLOC_NULL)
		if (active_list != NULL) {
#endif
			if ((ts = (line_t **) realloc(active_list,
			    (ti += MINBUFSZ) * sizeof(line_t **))) == NULL) {
				perror(NULL);
				seterrmsg("out of memory");
				SPL0();
				return ERR;
			}
#if defined(sun) || defined(NO_REALLOC_NULL)
		} else {
			if ((ts = (line_t **) calloc(ti += MINBUFSZ,
			    sizeof(line_t **))) == NULL) {
				perror(NULL);
				seterrmsg("out of memory");
				SPL0();
				return ERR;
			}
a158 1
#endif
@


1.11
log
@malloc(n * m) -> calloc(n, m); ok espie
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.10 2003/06/11 23:42:12 deraadt Exp $	*/
a30 8

#ifndef lint
#if 0
static char *rcsid = "@@(#)glob.c,v 1.1 1994/02/01 00:34:40 alm Exp";
#else
static char rcsid[] = "$OpenBSD: glbl.c,v 1.10 2003/06/11 23:42:12 deraadt Exp $";
#endif
#endif /* not lint */
@


1.10
log
@ansification, art ok
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.9 2002/03/24 22:17:04 millert Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.9 2002/03/24 22:17:04 millert Exp $";
d172 1
a172 1
			if ((ts = (line_t **) malloc((ti += MINBUFSZ) *
@


1.9
log
@Kill unneeded longs; fixes some minor 64 bit issues.  deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.8 2001/01/16 03:04:45 deraadt Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.8 2001/01/16 03:04:45 deraadt Exp $";
d48 1
a48 2
build_active_list(isgcmd)
	int isgcmd;
d81 1
a81 3
exec_global(interact, gflag)
	int interact;
	int gflag;
d154 1
a154 2
set_active_node(lp)
	line_t *lp;
d192 1
a192 2
unset_active_nodes(np, mp)
	line_t *np, *mp;
d209 1
a209 1
next_active_node()
d219 1
a219 1
clear_active_list()
@


1.8
log
@cleanup strcpy, strncpy, signal races, etc
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.7 1998/04/30 05:55:05 deraadt Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.7 1998/04/30 05:55:05 deraadt Exp $";
d53 1
a53 1
	long n;
d81 1
a81 1
long
d150 4
a153 4
long active_last;		/* index of last active line in active_list */
long active_size;		/* size of active_list */
long active_ptr;		/* active_list index (non-decreasing) */
long active_ndx;		/* active_list index (modulo active_last) */
d200 1
a200 1
	long i;
@


1.7
log
@Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.6 1997/09/01 18:29:28 deraadt Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.6 1997/09/01 18:29:28 deraadt Exp $";
d58 1
a58 1
		strcpy(errmsg, "invalid pattern delimiter");
d119 1
a119 1
				strcpy(errmsg, "unexpected end-of-file");
d125 1
a125 1
					strcpy(errmsg, "no previous command");
d170 1
a170 1
				strcpy(errmsg, "out of memory");
d179 1
a179 1
				strcpy(errmsg, "out of memory");
@


1.6
log
@i am bored enough to fix terminal space/tab uglies
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.5 1996/12/14 12:17:53 mickey Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.5 1996/12/14 12:17:53 mickey Exp $";
d95 1
a95 1
	if (!interact)
d100 1
@


1.5
log
@-Wall'ing.
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.4 1996/10/12 19:38:34 millert Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.4 1996/10/12 19:38:34 millert Exp $";
d166 1
a166 1
			if ((ts = (line_t **) realloc(active_list, 
d175 1
a175 1
			if ((ts = (line_t **) malloc((ti += MINBUFSZ) * 
@


1.4
log
@Back out my sprintf -> snprintf changes where they don't make sense and
use good ole strcpy() instead.  Also use perror() instead of fprintf()
where it makes sense.
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.3 1996/09/15 22:25:55 millert Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.3 1996/09/15 22:25:55 millert Exp $";
d140 2
a141 2
			    status > 0 && (status = display_lines(
			    current_addr, current_addr, status)) < 0)
@


1.3
log
@sprintf -> snprintf paranoia
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.2 1996/06/23 14:20:01 deraadt Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.2 1996/06/23 14:20:01 deraadt Exp $";
d58 1
a58 1
		snprintf(errmsg, sizeof(errmsg), "invalid pattern delimiter");
d118 1
a118 2
				snprintf(errmsg, sizeof(errmsg),
					 "unexpected end-of-file");
d124 1
a124 2
					snprintf(errmsg, sizeof(errmsg),
						 "no previous command");
d168 2
a169 2
				fprintf(stderr, "%s\n", strerror(errno));
				snprintf(errmsg, sizeof(errmsg), "out of memory");
d177 2
a178 2
				fprintf(stderr, "%s\n", strerror(errno));
				snprintf(errmsg, sizeof(errmsg), "out of memory");
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.2 1995/03/21 09:04:41 cgd Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: glbl.c,v 1.2 1995/03/21 09:04:41 cgd Exp $";
d58 1
a58 1
		sprintf(errmsg, "invalid pattern delimiter");
d118 2
a119 1
				sprintf(errmsg, "unexpected end-of-file");
d125 2
a126 1
					sprintf(errmsg, "no previous command");
d171 1
a171 1
				sprintf(errmsg, "out of memory");
d180 1
a180 1
				sprintf(errmsg, "out of memory");
@


1.1
log
@Initial revision
@
text
@d1 1
d36 1
a36 1
static char rcsid[] = "$NetBSD: glbl.c,v 1.2 1995/03/21 09:04:41 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
