head	1.17;
access;
symbols
	OPENBSD_5_5:1.16.0.20
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.16
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.14
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.10
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.8
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.6
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2014.04.14.22.12.01;	author tedu;	state dead;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.08.13.58.10;	author tobias;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.25.15.41.07;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.08.07.05.19;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.18.19.15.43;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.11.23.42.12;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.18.13.14.43;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.06.18.17.53;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.16.18.44.21;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.16.03.04.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.06.18.19.22.35;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.10.12.19.38.31;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.15.22.25.54;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.19.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@remove nonstandard DES support because DES. ok beck deraadt miod
@
text
@/*	$OpenBSD: cbc.c,v 1.16 2009/10/27 23:59:21 deraadt Exp $	*/
/*	$NetBSD: cbc.c,v 1.9 1995/03/21 09:04:36 cgd Exp $	*/

/* cbc.c: This file contains the encryption routines for the ed line editor */
/*-
 * Copyright (c) 1993 The Regents of the University of California.
 * All rights reserved.
 *
 * Copyright (c) 1993 Andrew Moore, Talke Studio.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)bdes.c	5.5 (Berkeley) 6/27/91
 */

#include <sys/types.h>
#include <ctype.h>
#include <errno.h>
#include <pwd.h>

#include "ed.h"


/*
 * BSD and System V systems offer special library calls that do
 * block move_liness and fills, so if possible we take advantage of them
 */
#define	MEMCPY(dest,src,len)	memcpy((dest),(src),(len))
#define	MEMZERO(dest,len)	memset((dest), 0, (len))

/* Hide the calls to the primitive encryption routines. */
#define	DES_KEY(buf) \
	if (des_setkey(buf)) \
		des_error("des_setkey");
#define	DES_XFORM(buf) \
	if (des_cipher(buf, buf, 0L, (inverse ? -1 : 1))) \
		des_error("des_cipher");

/*
 * read/write - no error checking
 */
#define	READ(buf, n, fp)	fread(buf, sizeof(char), n, fp)
#define WRITE(buf, n, fp)	fwrite(buf, sizeof(char), n, fp)

/*
 * some things to make references easier
 */
typedef char Desbuf[8];
#define	CHAR(x,i)	(x[i])
#define	UCHAR(x,i)	(x[i])
#define	BUFFER(x)	(x)
#define	UBUFFER(x)	(x)

/*
 * global variables and related macros
 */

Desbuf ivec;				/* initialization vector */
Desbuf pvec;				/* padding vector */
char bits[] = {				/* used to extract bits from a char */
	'\200', '\100', '\040', '\020', '\010', '\004', '\002', '\001'
};
int pflag;				/* 1 to preserve parity bits */

unsigned char des_buf[8];	/* shared buffer for get_des_char/put_des_char */
int des_ct = 0;			/* count for get_des_char/put_des_char */
int des_n = 0;			/* index for put_des_char/get_des_char */


/* init_des_cipher: initialize DES */
void
init_des_cipher(void)
{
#ifdef DES
	int i;

	des_ct = des_n = 0;

	/* initialize the initialization vector */
	MEMZERO(ivec, 8);

	for (i = 0; i < 8; i++)
		CHAR(pvec, i) = (char) arc4random();
#endif
}


/* get_des_char: return next char in an encrypted file */
int
get_des_char(FILE *fp)
{
#ifdef DES
	if (des_n >= des_ct) {
		des_n = 0;
		des_ct = cbc_decode((char *)des_buf, fp);
	}
	return (des_ct > 0) ? des_buf[des_n++] : EOF;
#endif
}


/* put_des_char: write a char to an encrypted file; return char written */
int
put_des_char(int c, FILE *fp)
{
#ifdef DES
	if (des_n == sizeof des_buf) {
		des_ct = cbc_encode((char *)des_buf, des_n, fp);
		des_n = 0;
	}
	return (des_ct >= 0) ? (des_buf[des_n++] = c) : EOF;
#endif
}


/* flush_des_file: flush an encrypted file's output; return status */
int
flush_des_file(FILE *fp)
{
#ifdef DES
	if (des_n == sizeof des_buf) {
		des_ct = cbc_encode((char *)des_buf, des_n, fp);
		des_n = 0;
	}
	return (des_ct >= 0 && cbc_encode((char *)des_buf, des_n, fp) >= 0) ? 0 : EOF;
#endif
}

#ifdef DES
/*
 * get keyword from tty or stdin
 */
int
get_keyword(void)
{
	char *p;			/* used to obtain the key */
	Desbuf msgbuf;			/* I/O buffer */

	/*
	 * get the key
	 */
	if ((p = getpass("Enter key: ")) != NULL && *p != '\0') {

		/*
		 * copy it, nul-padded, into the key area
		 */
		expand_des_key(BUFFER(msgbuf), p);
		MEMZERO(p, _PASSWORD_LEN);
		set_des_key(msgbuf);
		MEMZERO(msgbuf, sizeof msgbuf);
		return 1;
	}
	return 0;
}


/*
 * print a warning message and, possibly, terminate
 */
void
des_error(char *s)
{
	seterrmsg(s ? s : strerror(errno));
}

/*
 * map a hex character to an integer
 */
int
hex_to_binary(int c, int radix)
{
	switch(c) {
	case '0':		return(0x0);
	case '1':		return(0x1);
	case '2':		return(radix > 2 ? 0x2 : -1);
	case '3':		return(radix > 3 ? 0x3 : -1);
	case '4':		return(radix > 4 ? 0x4 : -1);
	case '5':		return(radix > 5 ? 0x5 : -1);
	case '6':		return(radix > 6 ? 0x6 : -1);
	case '7':		return(radix > 7 ? 0x7 : -1);
	case '8':		return(radix > 8 ? 0x8 : -1);
	case '9':		return(radix > 9 ? 0x9 : -1);
	case 'A': case 'a':	return(radix > 10 ? 0xa : -1);
	case 'B': case 'b':	return(radix > 11 ? 0xb : -1);
	case 'C': case 'c':	return(radix > 12 ? 0xc : -1);
	case 'D': case 'd':	return(radix > 13 ? 0xd : -1);
	case 'E': case 'e':	return(radix > 14 ? 0xe : -1);
	case 'F': case 'f':	return(radix > 15 ? 0xf : -1);
	}
	/*
	 * invalid character
	 */
	return(-1);
}

/*
 * convert the key to a bit pattern
 */
void
expand_des_key(char *obuf, char *ibuf)
{
	int i, j;			/* counter in a for loop */
	int nbuf[64];			/* used for hex/key translation */

	/*
	 * leading '0x' or '0X' == hex key
	 */
	if (ibuf[0] == '0' && (ibuf[1] == 'x' || ibuf[1] == 'X')) {
		ibuf = &ibuf[2];
		/*
		 * now translate it, bombing on any illegal hex digit
		 */
		for (i = 0; ibuf[i] && i < 16; i++)
			if ((nbuf[i] = hex_to_binary((int) ibuf[i], 16)) == -1)
				des_error("bad hex digit in key");
		while (i < 16)
			nbuf[i++] = 0;
		for (i = 0; i < 8; i++)
			obuf[i] =
			    ((nbuf[2*i]&0xf)<<4) | (nbuf[2*i+1]&0xf);
		/* preserve parity bits */
		pflag = 1;
		return;
	}
	/*
	 * leading '0b' or '0B' == binary key
	 */
	if (ibuf[0] == '0' && (ibuf[1] == 'b' || ibuf[1] == 'B')) {
		ibuf = &ibuf[2];
		/*
		 * now translate it, bombing on any illegal binary digit
		 */
		for (i = 0; ibuf[i] && i < 16; i++)
			if ((nbuf[i] = hex_to_binary((int) ibuf[i], 2)) == -1)
				des_error("bad binary digit in key");
		while (i < 64)
			nbuf[i++] = 0;
		for (i = 0; i < 8; i++)
			for (j = 0; j < 8; j++)
				obuf[i] = (obuf[i]<<1)|nbuf[8*i+j];
		/* preserve parity bits */
		pflag = 1;
		return;
	}
	/*
	 * no special leader -- ASCII
	 */
	strncpy(obuf, ibuf, 8);		/* XXX ? */
}

/*****************
 * DES FUNCTIONS *
 *****************/
/*
 * This sets the DES key and (if you're using the deszip version)
 * the direction of the transformation.  This uses the Sun
 * to map the 64-bit key onto the 56 bits that the key schedule
 * generation routines use: the old way, which just uses the user-
 * supplied 64 bits as is, and the new way, which resets the parity
 * bit to be the same as the low-order bit in each character.  The
 * new way generates a greater variety of key schedules, since many
 * systems set the parity (high) bit of each character to 0, and the
 * DES ignores the low order bit of each character.
 */
void
set_des_key(Desbuf buf)
{
	int i, j;				/* counter in a for loop */
	int par;				/* parity counter */

	/*
	 * if the parity is not preserved, flip it
	 */
	if (!pflag) {
		for (i = 0; i < 8; i++) {
			par = 0;
			for (j = 1; j < 8; j++)
				if ((bits[j]&UCHAR(buf, i)) != 0)
					par++;
			if ((par&01) == 01)
				UCHAR(buf, i) = UCHAR(buf, i)&0177;
			else
				UCHAR(buf, i) = (UCHAR(buf, i)&0177)|0200;
		}
	}

	DES_KEY(UBUFFER(buf));
}


/*
 * This encrypts using the Cipher Block Chaining mode of DES
 */
int
cbc_encode(char *msgbuf, int n, FILE *fp)
{
	int inverse = 0;	/* 0 to encrypt, 1 to decrypt */

	/*
	 * do the transformation
	 */
	if (n == 8) {
		for (n = 0; n < 8; n++)
			CHAR(msgbuf, n) ^= CHAR(ivec, n);
		DES_XFORM(UBUFFER(msgbuf));
		MEMCPY(BUFFER(ivec), BUFFER(msgbuf), 8);
		return WRITE(BUFFER(msgbuf), 8, fp);
	}
	/*
	 * at EOF or last block -- in either case, the last byte contains
	 * the character representation of the number of bytes in it
	 */
/*
	MEMZERO(msgbuf +  n, 8 - n);
*/
	/*
	 *  Pad the last block randomly
	 */
	(void)MEMCPY(BUFFER(msgbuf + n), BUFFER(pvec), 8 - n);
	CHAR(msgbuf, 7) = n;
	for (n = 0; n < 8; n++)
		CHAR(msgbuf, n) ^= CHAR(ivec, n);
	DES_XFORM(UBUFFER(msgbuf));
	return WRITE(BUFFER(msgbuf), 8, fp);
}

/*
 * This decrypts using the Cipher Block Chaining mode of DES
 */
int
cbc_decode(char *msgbuf, FILE *fp)
{
	Desbuf ibuf;		/* temp buffer for initialization vector */
	int n;			/* number of bytes actually read */
	int c;			/* used to test for EOF */
	int inverse = 1;	/* 0 to encrypt, 1 to decrypt */

	if ((n = READ(BUFFER(msgbuf), 8, fp)) == 8) {
		/*
		 * do the transformation
		 */
		MEMCPY(BUFFER(ibuf), BUFFER(msgbuf), 8);
		DES_XFORM(UBUFFER(msgbuf));
		for (c = 0; c < 8; c++)
			UCHAR(msgbuf, c) ^= UCHAR(ivec, c);
		MEMCPY(BUFFER(ivec), BUFFER(ibuf), 8);
		/*
		 * if the last one, handle it specially
		 */
		if ((c = fgetc(fp)) == EOF) {
			n = CHAR(msgbuf, 7);
			if (n < 0 || n > 7) {
				des_error("decryption failed (block corrupted)");
				return EOF;
			}
		} else
			(void)ungetc(c, fp);
		return n;
	}
	if (n > 0)
		des_error("decryption failed (incomplete block)");
	else if (n < 0)
		des_error("cannot read file");
	return EOF;
}
#endif	/* DES */
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.15 2008/06/08 13:58:10 tobias Exp $	*/
@


1.15
log
@Prevent a segmentation fault when ed receives a signal while being in
getpass().

With input by and ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.14 2006/04/25 15:41:07 deraadt Exp $	*/
a37 8

#ifndef lint
#if 0
static char *rcsid = "@@(#)cbc.c,v 1.2 1994/02/01 00:34:36 alm Exp";
#else
static char rcsid[] = "$OpenBSD: cbc.c,v 1.14 2006/04/25 15:41:07 deraadt Exp $";
#endif
#endif /* not lint */
@


1.14
log
@various small lint cleanups; ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.13 2004/05/08 07:05:19 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.13 2004/05/08 07:05:19 deraadt Exp $";
d173 1
a173 1
	if (*(p = getpass("Enter key: "))) {
@


1.13
log
@use arc4random() instead of crappy rand(); otto ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.12 2003/10/18 19:15:43 jmc Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.12 2003/10/18 19:15:43 jmc Exp $";
a87 4

enum { 					/* encrypt, decrypt, authenticate */
	MODE_ENCRYPT, MODE_DECRYPT, MODE_AUTHENTICATE
} mode = MODE_ENCRYPT;
@


1.12
log
@typos in comments;
from Jared Yanovich
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.11 2003/06/11 23:42:12 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.11 2003/06/11 23:42:12 deraadt Exp $";
a55 6
 * Define a divisor for rand() that yields a uniform distribution in the
 * range 0-255.
 */
#define	RAND_DIV (((unsigned) RAND_MAX + 1) >> 8)

/*
a116 2
	/* initialize the padding vector */
	srand((unsigned) time(NULL));
d118 1
a118 1
		CHAR(pvec, i) = (char) (rand()/RAND_DIV);
@


1.11
log
@ansification, art ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.10 2003/06/02 23:32:08 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.10 2003/06/02 23:32:08 millert Exp $";
d120 1
a120 1
	/* initialize the initialization vctor */
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.9 2003/02/18 13:14:43 jmc Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.9 2003/02/18 13:14:43 jmc Exp $";
d113 1
a113 1
init_des_cipher()
d133 1
a133 2
get_des_char(fp)
	FILE *fp;
d147 1
a147 3
put_des_char(c, fp)
	int c;
	FILE *fp;
d161 1
a161 2
flush_des_file(fp)
	FILE *fp;
d177 1
a177 1
get_keyword()
d204 1
a204 2
des_error(s)
	char *s;		/* the message */
d213 1
a213 3
hex_to_binary(c, radix)
	int c;			/* char to be converted */
	int radix;		/* base (2 to 16) */
d243 1
a243 3
expand_des_key(obuf, ibuf)
	char *obuf;			/* bit pattern */
	char *ibuf;			/* the key itself */
d309 1
a309 2
set_des_key(buf)
	Desbuf buf;				/* key block */
d338 1
a338 4
cbc_encode(msgbuf, n, fp)
	char *msgbuf;
	int n;
	FILE *fp;
d374 1
a374 3
cbc_decode(msgbuf, fp)
	char *msgbuf;		/* I/O buffer */
	FILE *fp;			/* input file descriptor */
@


1.9
log
@intial -> initial;

the great intial witch hunt, as prompted by tdeval@@

os-aix-dso.c: ok henning@@
ab.C: ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.8 2002/09/06 18:17:53 deraadt Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.8 2002/09/06 18:17:53 deraadt Exp $";
@


1.8
log
@cast nicely, for cbc_decode() and cbc_encode()
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.7 2002/01/16 18:44:21 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.7 2002/01/16 18:44:21 mpech Exp $";
d127 1
a127 1
	/* intialize the padding vector */
@


1.7
log
@missed some registers, kill'em!

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.6 2001/01/16 03:04:45 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.6 2001/01/16 03:04:45 deraadt Exp $";
d143 1
a143 1
		des_ct = cbc_decode(des_buf, fp);
d158 1
a158 1
		des_ct = cbc_encode(des_buf, des_n, fp);
d173 1
a173 1
		des_ct = cbc_encode(des_buf, des_n, fp);
d176 1
a176 1
	return (des_ct >= 0 && cbc_encode(des_buf, des_n, fp) >= 0) ? 0 : EOF;
@


1.6
log
@cleanup strcpy, strncpy, signal races, etc
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.5 1997/06/18 19:22:35 kstailey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.5 1997/06/18 19:22:35 kstailey Exp $";
d187 1
a187 1
	register char *p;		/* used to obtain the key */
d258 1
a258 1
	register int i, j;		/* counter in a for loop */
d325 2
a326 2
	register int i, j;			/* counter in a for loop */
	register int par;			/* parity counter */
d395 3
a397 3
	Desbuf ibuf;	/* temp buffer for initialization vector */
	register int n;		/* number of bytes actually read */
	register int c;		/* used to test for EOF */
@


1.5
log
@(foo *)0 -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.4 1996/10/12 19:38:31 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.4 1996/10/12 19:38:31 millert Exp $";
d215 1
a215 1
	strcpy(errmsg, s ? s : strerror(errno));
d304 1
a304 1
	strncpy(obuf, ibuf, 8);
@


1.4
log
@Back out my sprintf -> snprintf changes where they don't make sense and
use good ole strcpy() instead.  Also use perror() instead of fprintf()
where it makes sense.
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.3 1996/09/15 22:25:54 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.3 1996/09/15 22:25:54 millert Exp $";
d128 1
a128 1
	srand((unsigned) time((time_t *) 0));
@


1.3
log
@sprintf -> snprintf paranoia
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.2 1996/06/23 14:19:59 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.2 1996/06/23 14:19:59 deraadt Exp $";
d215 1
a215 1
	(void)snprintf(errmsg, sizeof(errmsg), "%s", s ? s : strerror(errno));
d304 1
a304 1
	(void)strncpy(obuf, ibuf, 8);
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: cbc.c,v 1.9 1995/03/21 09:04:36 cgd Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cbc.c,v 1.9 1995/03/21 09:04:36 cgd Exp $";
d215 1
a215 1
	(void)sprintf(errmsg, "%s", s ? s : strerror(errno));
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: cbc.c,v 1.9 1995/03/21 09:04:36 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
