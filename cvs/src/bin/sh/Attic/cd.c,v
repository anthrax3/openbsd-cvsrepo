head	1.12;
access;
symbols
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1
	netbsd_1_1:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	97.08.20.23.43.52;	author deraadt;	state dead;
branches;
next	1.11;

1.11
date	97.06.18.20.15.45;	author kstailey;	state Exp;
branches;
next	1.10;

1.10
date	97.06.18.19.15.48;	author kstailey;	state Exp;
branches;
next	1.9;

1.9
date	96.11.03.23.16.09;	author bitblt;	state Exp;
branches;
next	1.8;

1.8
date	96.10.20.00.54.44;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.08.22.00.35.24;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.06.23.14.21.09;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.03.03.12.33.51;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	95.12.17.13.15.41;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.12.14.01.22.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.22.10.32.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@this has not been used for a while
@
text
@/*	$OpenBSD: cd.c,v 1.11 1997/06/18 20:15:45 kstailey Exp $	*/
/*	$NetBSD: cd.c,v 1.15 1996/03/01 01:58:58 jtc Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Kenneth Almquist.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)cd.c	8.2 (Berkeley) 5/4/95";
#else
static char rcsid[] = "$OpenBSD: cd.c,v 1.11 1997/06/18 20:15:45 kstailey Exp $";
#endif
#endif /* not lint */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>


/*
 * The cd and pwd commands.
 */

#include "shell.h"
#include "var.h"
#include "nodes.h"	/* for jobs.h */
#include "jobs.h"
#include "options.h"
#include "output.h"
#include "memalloc.h"
#include "error.h"
#include "exec.h"
#include "redir.h"
#include "mystring.h"
#include "show.h"
#include "cd.h"

STATIC int docd __P((char *, int));
STATIC char *getcomponent __P((void));
STATIC void updatepwd __P((char *));

char *curdir = NULL;		/* current working directory */
char *prevdir;			/* previous working directory */
STATIC char *cdcomppath;

int
cdcmd(argc, argv)
	int argc;
	char **argv; 
{
	char *dest;
	char *path;
	char *p;
	struct stat statb;
	int print = 0;

	nextopt(nullstr);
	if ((dest = *argptr) == NULL && (dest = bltinlookup("HOME", 1)) == NULL)
		error("HOME not set");
	if (*dest == '\0')
		dest = ".";
	if (dest[0] == '-' && dest[1] == '\0') {
		dest = prevdir ? prevdir : curdir;
		print = 1;
		if (!dest)
			dest = ".";
	}
	if (*dest == '/' || (path = bltinlookup("CDPATH", 1)) == NULL)
		path = nullstr;
	while ((p = padvance(&path, dest)) != NULL) {
		if (stat(p, &statb) >= 0 && S_ISDIR(statb.st_mode)) {
			if (!print) {
				/*
				 * XXX - rethink
				 */
				if (p[0] == '.' && p[1] == '/')
					p += 2;
				print = strcmp(p, dest);
			}
			if (docd(p, print) >= 0)
				return 0;

		}
	}
	error("can't cd to %s", dest);
	/*NOTREACHED*/
	return 0;
}


/*
 * Actually do the chdir.  In an interactive shell, print the
 * directory name if "print" is nonzero.
 */

STATIC int
docd(dest, print)
	char *dest;
	int print;
{

	TRACE(("docd(\"%s\", %d) called\n", dest, print));
	INTOFF;
	if (chdir(dest) < 0) {
		INTON;
		return -1;
	}
	updatepwd(dest);
	INTON;
	if (print && iflag)
		out1fmt("%s\n", stackblock());
	return 0;
}


/*
 * Get the next component of the path name pointed to by cdcomppath.
 * This routine overwrites the string pointed to by cdcomppath.
 */

STATIC char *
getcomponent() {
	register char *p;
	char *start;

	if ((p = cdcomppath) == NULL)
		return NULL;
	start = cdcomppath;
	while (*p != '/' && *p != '\0')
		p++;
	if (*p == '\0') {
		cdcomppath = NULL;
	} else {
		*p++ = '\0';
		cdcomppath = p;
	}
	return start;
}



/*
 * Update curdir (the name of the current directory) in response to a
 * cd command.  We also call hashcd to let the routines in exec.c know
 * that the current directory has changed.
 */

void hashcd();

STATIC void
updatepwd(dir)
	char *dir;
	{
	char *new;
	char *p;

	hashcd();				/* update command hash table */
	cdcomppath = stalloc(strlen(dir) + 1);
	scopy(dir, cdcomppath);
	STARTSTACKSTR(new);
	if (*dir != '/') {
		if (curdir == NULL)
			return;
		p = curdir;
		while (*p)
			STPUTC(*p++, new);
		if (p[-1] == '/')
			STUNPUTC(new);
	}
	while ((p = getcomponent()) != NULL) {
		if (equal(p, "..")) {
			while (new > stackblock() && (STUNPUTC(new), *new) != '/');
		} else if (*p != '\0' && ! equal(p, ".")) {
			STPUTC('/', new);
			while (*p)
				STPUTC(*p++, new);
		}
	}
	if (new == stackblock())
		STPUTC('/', new);
	STACKSTRNUL(new);
	INTOFF;
	if (prevdir)
		ckfree(prevdir);
	prevdir = curdir;
	curdir = savestr(stackblock());
	INTON;
}



int
pwdcmd(argc, argv)
	int argc;
	char **argv; 
{
	getpwd();
	out1str(curdir);
	out1c('\n');
	return 0;
}




#define MAXPWD MAXPATHLEN

/*
 * Find out what the current directory is. If we already know the current
 * directory, this routine returns immediately.
 */
void
getpwd()
{
	char buf[MAXPWD];

	if (curdir)
		return;
	/*
	 * Things are a bit complicated here; we could have just used
	 * getcwd, but traditionally getcwd is implemented using popen
	 * to /bin/pwd. This creates a problem for us, since we cannot
	 * keep track of the job if it is being ran behind our backs.
	 * So we re-implement getcwd(), and we suppress interrupts
	 * throughout the process. This is not completely safe, since
	 * the user can still break out of it by killing the pwd program.
	 * We still try to use getcwd for systems that we know have a
	 * c implementation of getcwd, that does not open a pipe to
	 * /bin/pwd.
	 */
#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__svr4__)
	if (getcwd(buf, sizeof(buf)) == NULL)
		error("getcwd() failed: %s", strerror(errno));
	curdir = savestr(buf);
#else
	{
		char *p;
		int i;
		int status;
		struct job *jp;
		int pip[2];

		INTOFF;
		if (pipe(pip) < 0)
			error("Pipe call failed");
		jp = makejob(NULL, 1);
		if (forkshell(jp, NULL, FORK_NOJOB) == 0) {
			(void) close(pip[0]);
			if (pip[1] != 1) {
				close(1);
				copyfd(pip[1], 1);
				close(pip[1]);
			}
			(void) execl("/bin/pwd", "pwd", NULL);
			error("Cannot exec /bin/pwd");
		}
		(void) close(pip[1]);
		pip[1] = -1;
		p = buf;
		while ((i = read(pip[0], p, buf + MAXPWD - p)) > 0
		     || (i == -1 && errno == EINTR)) {
			if (i > 0)
				p += i;
		}
		(void) close(pip[0]);
		pip[0] = -1;
		status = waitforjob(jp);
		if (status != 0)
			error(NULL);
		if (i < 0 || p == buf || p[-1] != '\n')
			error("pwd command failed");
		p[-1] = '\0';
	}
	curdir = savestr(buf);
	INTON;
#endif
}
@


1.11
log
@(foo *)0 -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.c,v 1.10 1997/06/18 19:15:48 kstailey Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: cd.c,v 1.10 1997/06/18 19:15:48 kstailey Exp $";
@


1.10
log
@(foo *)NULL -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.c,v 1.9 1996/11/03 23:16:09 bitblt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: cd.c,v 1.9 1996/11/03 23:16:09 bitblt Exp $";
d291 1
a291 1
			(void) execl("/bin/pwd", "pwd", (char *)0);
d306 1
a306 1
			error((char *)0);
@


1.9
log
@sh can now be started in a directory whose fully qualified pathname
is between 255 and MAXPATHLEN-1 characters.
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.c,v 1.7 1996/08/22 00:35:24 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: cd.c,v 1.7 1996/08/22 00:35:24 deraadt Exp $";
d283 2
a284 2
		jp = makejob((union node *)NULL, 1);
		if (forkshell(jp, (union node *)NULL, FORK_NOJOB) == 0) {
@


1.8
log
@Sync with NetBSD.  Adds better POSIX compliance amongst others.
@
text
@d50 1
d56 1
d243 1
a243 1
#define MAXPWD 256
@


1.7
log
@__OpenBSD__
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.c,v 1.6 1996/06/23 14:21:09 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: cd.c,v 1.6 1996/06/23 14:21:09 deraadt Exp $";
d51 1
d67 1
a89 1
	char *padvance();
d95 2
d100 2
d134 1
d268 1
a268 1
		error("getcwd() failed");
@


1.6
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: cd.c,v 1.15 1996/03/01 01:58:58 jtc Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: cd.c,v 1.15 1996/03/01 01:58:58 jtc Exp $";
d260 1
a260 1
#if defined(__NetBSD__) || defined(__svr4__)
@


1.5
log
@From NetBSD:
Changed so that INTOFF/INTON are paired in getpwd().  From Matthias
Pfaller <leo@@marco.de>.  Fixes PR #2130.
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: cd.c,v 1.15 1996/03/01 01:58:58 jtc Exp $";
@


1.4
log
@do not treat symbolic links special; from cgd@@netbsd.org; netbsd pr#1776
@
text
@d1 1
a1 1
/*	$NetBSD: cd.c,v 1.14 1995/11/19 23:27:37 christos Exp $	*/
d43 1
a43 1
static char rcsid[] = "$NetBSD: cd.c,v 1.14 1995/11/19 23:27:37 christos Exp $";
d262 1
a301 1
#endif
d304 1
@


1.3
log
@update from netbsd, including:
Fix PR/1760, where 'cd -' before any other command could cause a reference
to an uninitialized pointer. Use getcwd() to get the current working directory,
instead of forking /bin/pwd [per Scott's suggestion]
@
text
@d121 2
a122 7
 * Actually do the chdir.  If the name refers to symbolic links, we
 * compute the actual directory name before doing the cd.  In an
 * interactive shell, print the directory name if "print" is nonzero
 * or if the name refers to a symbolic link.  We also print the name
 * if "/u/logname" was expanded in it, since this is similar to a
 * symbolic link.  (The check for this breaks if the user gives the
 * cd command some additional, unused arguments.)
a124 1
#if SYMLINKS == 0
d128 3
a130 1
	{
a141 93

#else



STATIC int
docd(dest, print)
	char *dest;
	int print;
{
	register char *p;
	register char *q;
	char *symlink;
	char *component;
	struct stat statb;
	int first;
	int i;

	TRACE(("docd(\"%s\", %d) called\n", dest, print));

top:
	cdcomppath = dest;
	STARTSTACKSTR(p);
	if (*dest == '/') {
		STPUTC('/', p);
		cdcomppath++;
	}
	first = 1;
	while ((q = getcomponent()) != NULL) {
		if (q[0] == '\0' || (q[0] == '.' && q[1] == '\0'))
			continue;
		if (! first)
			STPUTC('/', p);
		first = 0;
		component = q;
		while (*q)
			STPUTC(*q++, p);
		if (equal(component, ".."))
			continue;
		STACKSTRNUL(p);
		if (lstat(stackblock(), &statb) < 0)
			error("lstat %s failed", stackblock());
		if (!S_ISLNK(statb.st_mode))
			continue;

		/* Hit a symbolic link.  We have to start all over again. */
		print = 1;
		STPUTC('\0', p);
		symlink = grabstackstr(p);
		i = (int)statb.st_size + 2;		/* 2 for '/' and '\0' */
		if (cdcomppath != NULL)
			i += strlen(cdcomppath);
		p = stalloc(i);
		if (readlink(symlink, p, (int)statb.st_size) < 0) {
			error("readlink %s failed", stackblock());
		}
		if (cdcomppath != NULL) {
			p[(int)statb.st_size] = '/';
			scopy(cdcomppath, p + (int)statb.st_size + 1);
		} else {
			p[(int)statb.st_size] = '\0';
		}
		if (p[0] != '/') {	/* relative path name */
			char *r;
			q = r = symlink;
			while (*q) {
				if (*q++ == '/')
					r = q;
			}
			*r = '\0';
			dest = stalloc(strlen(symlink) + strlen(p) + 1);
			scopy(symlink, dest);
			strcat(dest, p);
		} else {
			dest = p;
		}
		goto top;
	}
	STPUTC('\0', p);
	p = grabstackstr(p);
	INTOFF;
	if (chdir(p) < 0) {
		INTON;
		return -1;
	}
	updatepwd(p);
	INTON;
	if (print && iflag)
		out1fmt("%s\n", p);
	return 0;
}
#endif /* SYMLINKS */

@


1.2
log
@handle "cd -" causing crash if used as first sh command; from scottr@@Plexus.COM; netbsd pr#1760
@
text
@d1 1
a1 1
/*	$NetBSD: cd.c,v 1.13 1995/05/11 21:28:49 christos Exp $	*/
d43 1
a43 1
static char rcsid[] = "$NetBSD: cd.c,v 1.13 1995/05/11 21:28:49 christos Exp $";
d68 1
a72 1
STATIC void getpwd __P((void));
d74 1
a74 1
char *curdir;			/* current working directory */
a329 4
/*
 * If we already know the current directory, this routine returns
 * immediately.
 */
d333 7
a339 2
STATIC void
getpwd() {
a340 5
	char *p;
	int i;
	int status;
	struct job *jp;
	int pip[2];
d344 13
d359 40
d400 1
@


1.1
log
@Initial revision
@
text
@d331 2
a332 4
 * Run /bin/pwd to find out what the current directory is.  We suppress
 * interrupts throughout most of this, but the user can still break out
 * of it by killing the pwd program.  If we already know the current
 * directory, this routine returns immediately.
d348 2
a349 30
	INTOFF;
	if (pipe(pip) < 0)
		error("Pipe call failed");
	jp = makejob((union node *)NULL, 1);
	if (forkshell(jp, (union node *)NULL, FORK_NOJOB) == 0) {
		close(pip[0]);
		if (pip[1] != 1) {
			close(1);
			copyfd(pip[1], 1);
			close(pip[1]);
		}
		execl("/bin/pwd", "pwd", (char *)0);
		error("Cannot exec /bin/pwd");
	}
	close(pip[1]);
	pip[1] = -1;
	p = buf;
	while ((i = read(pip[0], p, buf + MAXPWD - p)) > 0
	     || (i == -1 && errno == EINTR)) {
		if (i > 0)
			p += i;
	}
	close(pip[0]);
	pip[0] = -1;
	status = waitforjob(jp);
	if (status != 0)
		error((char *)0);
	if (i < 0 || p == buf || p[-1] != '\n')
		error("pwd command failed");
	p[-1] = '\0';
a350 1
	INTON;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
