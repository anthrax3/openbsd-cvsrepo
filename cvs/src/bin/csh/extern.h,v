head	1.25;
access;
symbols
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.16.0.10
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.8
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.28
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.26
	OPENBSD_5_0:1.15.0.24
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.22
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.20
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.16
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.18
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.14
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.12
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.10
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.8
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.6
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.4
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.10
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.20
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2015.12.26.13.48.38;	author mestre;	state Exp;
branches;
next	1.24;
commitid	jZMsEASvreUUSdqp;

1.24
date	2015.10.26.21.57.42;	author naddy;	state Exp;
branches;
next	1.23;
commitid	czPxwIHp6VIIfGKO;

1.23
date	2015.10.26.16.31.09;	author naddy;	state Exp;
branches;
next	1.22;
commitid	n73n1wzdFRm9vCM1;

1.22
date	2015.10.26.15.01.15;	author naddy;	state Exp;
branches;
next	1.21;
commitid	gs7LRmKw8OfepnU6;

1.21
date	2015.06.17.03.48.21;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	oHdhnDXEPqwM6LiV;

1.20
date	2015.02.08.06.01.25;	author tedu;	state Exp;
branches;
next	1.19;
commitid	tnCfmqNIkMr95MJy;

1.19
date	2014.10.17.06.17.37;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	J4HY4fK4K8r0E4fh;

1.18
date	2014.10.16.19.43.31;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	jIHreojPTUQy0Zyb;

1.17
date	2014.10.16.18.23.26;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	boajS7faBMNVqeR6;

1.16
date	2012.12.04.02.24.46;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.11.02.41.01;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.25.21.12.39;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.23.16.42.15;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.32.07;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.12.21.42.01;	author jsyn;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.12.20.54.49;	author jsyn;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.12.20.48.41;	author jsyn;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.15.01.17.33;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.08.01.46.53;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.08.06.54.16;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.17.19.42.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.06;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.11.02.01.00.32;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.19.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Replace handrolled xfree() function by directly using free(3)

OK mmcc@@
@
text
@/*	$OpenBSD: extern.h,v 1.24 2015/10/26 21:57:42 naddy Exp $	*/
/*	$NetBSD: extern.h,v 1.8 1996/10/31 23:50:54 christos Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)extern.h	8.1 (Berkeley) 5/31/93
 */

/*
 * csh.c
 */
int	gethdir(Char *, int);
void	dosource(Char **, struct command *);
void	exitstat(void);
void	goodbye(void);
void	importpath(Char *);
void	initdesc(void);
void	pintr(int);
void	pintr1(bool);
void	printprompt(void);
void	process(bool);
void	rechist(void);
void	untty(void);
int	vis_fputc(int, FILE *);
void	xexit(int);

/*
 * dir.c
 */
void	 dinit(Char *);
void	 dodirs(Char **, struct command *);
Char	*dcanon(Char *, Char *);
void	 dtildepr(Char *, Char *);
void	 dtilde(void);
void	 dochngd(Char **, struct command *);
Char	*dnormalize(Char *);
void	 dopushd(Char **, struct command *);
void	 dopopd(Char **, struct command *);
struct directory;
void	 dfree(struct directory *);

/*
 * dol.c
 */
void	 Dfix(struct command *);
Char	*Dfix1(Char *);
void	 heredoc(Char *);

/*
 * err.c
 */
void	seterror(int, ...);
void	stderror(int, ...);

/*
 * exec.c
 */
void	doexec(Char **, struct command *);
void	dohash(Char **, struct command *);
void	dounhash(Char **, struct command *);
void	dowhich(Char **, struct command *);
void	execash(Char **, struct command *);
void	hashstat(Char **, struct command *);
void	xechoit(Char **);

/*
 * exp.c
 */
int	expr(Char ***);
int	exp0(Char ***, bool);

/*
 * file.c
 */
int	tenex(Char *, int);

/*
 * func.c
 */
void	Setenv(Char *, Char *);
void	doalias(Char **, struct command *);
void	dobreak(Char **, struct command *);
void	docontin(Char **, struct command *);
void	doecho(Char **, struct command *);
void	doelse(Char **, struct command *);
void	doend(Char **, struct command *);
void	doeval(Char **, struct command *);
void	doexit(Char **, struct command *);
void	doforeach(Char **, struct command *);
void	doglob(Char **, struct command *);
void	dogoto(Char **, struct command *);
void	doif(Char **, struct command *);
void	dolimit(Char **, struct command *);
void	dologin(Char **, struct command *);
void	dologout(Char **, struct command *);
void	donohup(Char **, struct command *);
void	doonintr(Char **, struct command *);
void	dorepeat(Char **, struct command *);
void	dosetenv(Char **, struct command *);
void	dosuspend(Char **, struct command *);
void	doswbrk(Char **, struct command *);
void	doswitch(Char **, struct command *);
void	doumask(Char **, struct command *);
void	dounlimit(Char **, struct command *);
void	dounsetenv(Char **, struct command *);
void	dowhile(Char **, struct command *);
void	dozip(Char **, struct command *);
void	func(struct command *, struct biltins *);
struct	biltins *
	isbfunc(struct command *);
void	prvars(void);
void	gotolab(Char *);
int	srchx(Char *);
void	unalias(Char **, struct command *);
void	wfree(void);

/*
 * glob.c
 */
Char	**dobackp(Char *, bool);
void	  Gcat(Char *, Char *);
Char	 *globone(Char *, int);
int	  Gmatch(Char *, Char *);
void	  ginit(void);
Char	**globall(Char **);
void	  rscan(Char **, void (*)(int));
void	  tglob(Char **);
void	  trim(Char **);
int	  sortscmp(const void *, const void *);

/*
 * hist.c
 */
void	dohist(Char **, struct command *);
struct Hist *
	enthist(int, struct wordent *, bool);
void	savehist(struct wordent *);

/*
 * lex.c
 */
void	 addla(Char *);
void	 bseek(struct Ain *);
void	 btell(struct Ain *);
void	 btoeof(void);
void	 copylex(struct wordent *, struct wordent *);
Char	*domod(Char *, int);
void	 freelex(struct wordent *);
int	 lex(struct wordent *);
void	 prlex(FILE *, struct wordent *);
int	 readc(bool);
void	 settell(void);
void	 unreadc(int);

/*
 * misc.c
 */
int	  any(char *, int);
Char	**blkcat(Char **, Char **);
Char	**blkcpy(Char **, Char **);
Char	**blkend(Char **);
void	  blkfree(Char **);
int	  blklen(Char **);
void	  blkpr(FILE *, Char **);
Char	**blkspl(Char **, Char **);
void	  closem(void);
Char	**copyblk(Char **);
int	  dcopy(int, int);
int	  dmove(int, int);
void	  donefds(void);
Char	  lastchr(Char *);
void	  lshift(Char **, int);
int	  number(Char *);
int	  prefix(Char *, Char *);
Char	**saveblk(Char **);
Char	 *strip(Char *);
Char	 *quote(Char *);
char	 *strsave(char *);
char	 *strspl(char *, char *);
void	  udvar(Char *);

/*
 * parse.c
 */
void	alias(struct wordent *);
void	freesyn(struct command *);
struct command *
	syntax(struct wordent *, struct wordent *, int);

/*
 * proc.c
 */
void	dobg(Char **, struct command *);
void	dobg1(Char **, struct command *);
void	dofg(Char **, struct command *);
void	dofg1(Char **, struct command *);
void	dojobs(Char **, struct command *);
void	dokill(Char **, struct command *);
void	donotify(Char **, struct command *);
void	dostop(Char **, struct command *);
void	dowait(Char **, struct command *);
void	palloc(int, struct command *);
void	panystop(bool);
void	pchild(int);
void	pendjob(void);
struct process *
	pfind(Char *);
int	pfork(struct command *, int);
void	pgetty(int, int);
void	pjwait(struct process *);
void	pnote(void);
void	prestjob(void);
void	psavejob(void);
void	pstart(struct process *, int);
void	pwait(void);

/*
 * sem.c
 */
void	execute(struct command *, int, int *, int *);
void	mypipe(int *);

/*
 * set.c
 */
struct	varent
	*adrof1(Char *, struct varent *);
void	 doset(Char **, struct command *);
void	 dolet(Char **, struct command *);
Char	*putn(int);
int	 getn(Char *);
Char	*value1(Char *, struct varent *);
void	 set(Char *, Char *);
void	 set1(Char *, Char **, struct varent *);
void	 setq(Char *, Char **, struct varent *);
void	 unset(Char **, struct command *);
void	 unset1(Char *[], struct varent *);
void	 unsetv(Char *);
void	 setNS(Char *);
void	 shift(Char **, struct command *);
void	 plist(struct varent *);

/*
 * time.c
 */
void	donice(Char **, struct command *);
void	dotime(Char **, struct command *);
void	prusage(struct rusage *, struct rusage *,
	    struct timeval *, struct timeval *);
void	ruadd(struct rusage *, struct rusage *);
void	settimes(void);
void	pcsecs(long);
void	psecs(long);

/*
 * alloc.c
 */
void *	Malloc(size_t);
void *	Reallocarray(void *, size_t, size_t);
void *	Calloc(size_t, size_t);

/*
 * str.c:
 */
size_t	  Strlcpy(Char *, const Char *, size_t);
size_t	  Strlcat(Char *, const Char *, size_t);
Char	 *Strchr(Char *, int);
Char	 *Strrchr(Char *, int);
Char	 *Strspl(Char *, Char *);
size_t	  Strlen(Char *);
int	  Strcmp(Char *, Char *);
int	  Strncmp(Char *, Char *, size_t);
Char	 *Strsave(Char *);
Char	 *Strend(Char *);
Char	 *Strstr(Char *, Char *);
Char	 *str2short(char *);
Char	**blk2short(char **);
char	 *short2str(Char *);
char	**short2blk(Char **);
char	 *short2qstr(Char *);
char	 *vis_str(Char *);
@


1.24
log
@remove the profiling and debugging ifdefs; ok zhuk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.23 2015/10/26 16:31:09 naddy Exp $	*/
a283 1
void	Free(void *);
@


1.23
log
@Remove the #define Strfoo() s_strfoo() redirection and move everything
directly to Strfoo().  Purely mechanical.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.22 2015/10/26 15:01:15 naddy Exp $	*/
d51 1
a51 6

#ifdef PROF
void done(int);
#else
void xexit(int);
#endif
@


1.22
log
@unifdef BUILTIN (unused), NLS (always set), SHORT_STRINGS (always set)
and remove a few unused defines; no binary changes; ok tedu@@ zhuk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.21 2015/06/17 03:48:21 deraadt Exp $	*/
d297 11
a307 11
size_t	  s_strlcpy(Char *, const Char *, size_t);
size_t	  s_strlcat(Char *, const Char *, size_t);
Char	 *s_strchr(Char *, int);
Char	 *s_strrchr(Char *, int);
Char	 *s_strspl(Char *, Char *);
size_t	  s_strlen(Char *);
int	  s_strcmp(Char *, Char *);
int	  s_strncmp(Char *, Char *, size_t);
Char	 *s_strsave(Char *);
Char	 *s_strend(Char *);
Char	 *s_strstr(Char *, Char *);
@


1.21
log
@remove -DFILEC; code does not compile for the -UFILEC case, and anyways,
who wants csh without FILEC??
from Peter Brottveit Bock, but redone using unifdef
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.20 2015/02/08 06:01:25 tedu Exp $	*/
a212 4
#ifndef	SHORT_STRINGS
char	 *strend(char *);
#endif

a296 1
#ifdef SHORT_STRINGS
a311 1
#endif /* SHORT_STRINGS */
@


1.20
log
@remove ptr_t typedef. void * is good enough for csh.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.19 2014/10/17 06:17:37 deraadt Exp $	*/
a105 1
#ifdef FILEC
a106 1
#endif
a159 1
#ifdef FILEC
a160 1
#endif /* FILEC */
@


1.19
log
@no need for realloc() front ends anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.18 2014/10/16 19:43:31 deraadt Exp $	*/
d163 1
a163 1
int	  sortscmp(const ptr_t, const ptr_t);
d297 4
a300 4
void	Free(ptr_t);
ptr_t	Malloc(size_t);
ptr_t	Reallocarray(ptr_t, size_t, size_t);
ptr_t	Calloc(size_t, size_t);
@


1.18
log
@Use reallocarray() and remove a few archaic memory allocation practices.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.17 2014/10/16 18:23:26 deraadt Exp $	*/
a298 1
ptr_t	Realloc(ptr_t, size_t);
@


1.17
log
@Kill the alloc command, which tried to measure behaviour based on sbrk.
Discussed with guenther.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.16 2012/12/04 02:24:46 deraadt Exp $	*/
d300 1
@


1.16
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.15 2005/12/11 02:41:01 deraadt Exp $	*/
a300 1
void	showall(Char **, struct command *);
@


1.15
log
@unused code and variables
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.14 2003/06/25 21:12:39 deraadt Exp $	*/
a33 2

#include <sys/cdefs.h>
@


1.14
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.13 2003/06/23 16:42:15 deraadt Exp $	*/
a212 1
void	  setzero(char *, int);
@


1.13
log
@kill printf builtin.  no reason to be a builtin, but furthermore, the
handling of format strings is quite non-compliant.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.12 2003/06/02 23:32:07 millert Exp $	*/
d161 1
a161 1
void	  rscan(Char **, void (*)());
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.11 2003/05/12 21:42:01 jsyn Exp $	*/
a132 1
void	doprintf(Char **, struct command *);
@


1.11
log
@add s_strl{cat,cpy} prototypes; ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.10 2003/05/12 20:54:49 jsyn Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@s_strn{cpy,cat} are no longer used; remove them.  also, kill NOTUSED.
ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.9 2003/05/12 20:48:41 jsyn Exp $	*/
d315 2
@


1.9
log
@strstr() prototype shouldn't be here; kill NOTUSED and an extra newline;
ok tdeval@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.8 2003/04/15 01:17:33 deraadt Exp $	*/
a316 4
#ifdef NOTUSED
Char	 *s_strncat(Char *, Char *, size_t);
#endif
Char	 *s_strncpy(Char *, Char *, size_t);
d328 1
a328 1
#endif
@


1.8
log
@remove final call to Strcpy/s_strcpy; some help from tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.7 2003/04/08 01:46:53 deraadt Exp $	*/
a225 3
# ifdef NOTUSED
char	 *strstr(const char *, const char *);
# endif /* NOTUSED */
a235 1

@


1.7
log
@Strcat/s_strcat is unused
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.6 2003/01/08 06:54:16 deraadt Exp $	*/
a323 1
Char	 *s_strcpy(Char *, Char *);
@


1.6
log
@bring in strlcpy and strlcat-like things for dealing with Char types,
this fixes at least 15 buffer overflows; some help from dhartmei.
Anyone want to go do the same in ksh, and help with some of the while
(*s++ = *p++) loops in here?
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.5 2002/02/17 19:42:18 millert Exp $	*/
a320 1
Char	 *s_strcat(Char *, Char *);
@


1.5
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.4 2002/02/16 21:27:06 millert Exp $	*/
d44 1
a44 1
int	gethdir(Char *);
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.3 1996/11/02 01:00:32 millert Exp $	*/
d166 1
a166 1
void	  rscan __P((Char **, void (*)()));
d299 2
a300 2
void	prusage __P((struct rusage *, struct rusage *,
	    struct timeval *, struct timeval *));
@


1.3
log
@Update from NetBSD (christos)
Quote all imported environment variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.2 1996/06/23 14:19:21 deraadt Exp $	*/
d44 13
a56 13
int	gethdir __P((Char *));
void	dosource __P((Char **, struct command *));
void	exitstat __P((void));
void	goodbye __P((void));
void	importpath __P((Char *));
void	initdesc __P((void));
void	pintr __P((int));
void	pintr1 __P((bool));
void	printprompt __P((void));
void	process __P((bool));
void	rechist __P((void));
void	untty __P((void));
int	vis_fputc __P((int, FILE *));
d59 1
a59 1
void done __P((int));
d61 1
a61 1
void xexit __P((int));
d67 9
a75 9
void	 dinit __P((Char *));
void	 dodirs __P((Char **, struct command *));
Char	*dcanon __P((Char *, Char *));
void	 dtildepr __P((Char *, Char *));
void	 dtilde __P((void));
void	 dochngd __P((Char **, struct command *));
Char	*dnormalize __P((Char *));
void	 dopushd __P((Char **, struct command *));
void	 dopopd __P((Char **, struct command *));
d77 1
a77 1
void	 dfree __P((struct directory *));
d82 3
a84 3
void	 Dfix __P((struct command *));
Char	*Dfix1 __P((Char *));
void	 heredoc __P((Char *));
d89 2
a90 2
void	seterror __P((int, ...));
void	stderror __P((int, ...));
d95 7
a101 7
void	doexec __P((Char **, struct command *));
void	dohash __P((Char **, struct command *));
void	dounhash __P((Char **, struct command *));
void	dowhich __P((Char **, struct command *));
void	execash __P((Char **, struct command *));
void	hashstat __P((Char **, struct command *));
void	xechoit __P((Char **));
d106 2
a107 2
int	expr __P((Char ***));
int	exp0 __P((Char ***, bool));
d113 1
a113 1
int	tenex __P((Char *, int));
d119 30
a148 30
void	Setenv __P((Char *, Char *));
void	doalias __P((Char **, struct command *));
void	dobreak __P((Char **, struct command *));
void	docontin __P((Char **, struct command *));
void	doecho __P((Char **, struct command *));
void	doelse __P((Char **, struct command *));
void	doend __P((Char **, struct command *));
void	doeval __P((Char **, struct command *));
void	doexit __P((Char **, struct command *));
void	doforeach __P((Char **, struct command *));
void	doglob __P((Char **, struct command *));
void	dogoto __P((Char **, struct command *));
void	doif __P((Char **, struct command *));
void	dolimit __P((Char **, struct command *));
void	dologin __P((Char **, struct command *));
void	dologout __P((Char **, struct command *));
void	donohup __P((Char **, struct command *));
void	doonintr __P((Char **, struct command *));
void	doprintf __P((Char **, struct command *));
void	dorepeat __P((Char **, struct command *));
void	dosetenv __P((Char **, struct command *));
void	dosuspend __P((Char **, struct command *));
void	doswbrk __P((Char **, struct command *));
void	doswitch __P((Char **, struct command *));
void	doumask __P((Char **, struct command *));
void	dounlimit __P((Char **, struct command *));
void	dounsetenv __P((Char **, struct command *));
void	dowhile __P((Char **, struct command *));
void	dozip __P((Char **, struct command *));
void	func __P((struct command *, struct biltins *));
d150 6
a155 6
	isbfunc __P((struct command *));
void	prvars __P((void));
void	gotolab __P((Char *));
int	srchx __P((Char *));
void	unalias __P((Char **, struct command *));
void	wfree __P((void));
d160 6
a165 6
Char	**dobackp __P((Char *, bool));
void	  Gcat __P((Char *, Char *));
Char	 *globone __P((Char *, int));
int	  Gmatch __P((Char *, Char *));
void	  ginit __P((void));
Char	**globall __P((Char **));
d167 2
a168 2
void	  tglob __P((Char **));
void	  trim __P((Char **));
d170 1
a170 1
int	  sortscmp __P((const ptr_t, const ptr_t));
d176 1
a176 1
void	dohist __P((Char **, struct command *));
d178 2
a179 2
	enthist __P((int, struct wordent *, bool));
void	savehist __P((struct wordent *));
d184 12
a195 12
void	 addla __P((Char *));
void	 bseek __P((struct Ain *));
void	 btell __P((struct Ain *));
void	 btoeof __P((void));
void	 copylex __P((struct wordent *, struct wordent *));
Char	*domod __P((Char *, int));
void	 freelex __P((struct wordent *));
int	 lex __P((struct wordent *));
void	 prlex __P((FILE *, struct wordent *));
int	 readc __P((bool));
void	 settell __P((void));
void	 unreadc __P((int));
d200 24
a223 24
int	  any __P((char *, int));
Char	**blkcat __P((Char **, Char **));
Char	**blkcpy __P((Char **, Char **));
Char	**blkend __P((Char **));
void	  blkfree __P((Char **));
int	  blklen __P((Char **));
void	  blkpr __P((FILE *, Char **));
Char	**blkspl __P((Char **, Char **));
void	  closem __P((void));
Char	**copyblk __P((Char **));
int	  dcopy __P((int, int));
int	  dmove __P((int, int));
void	  donefds __P((void));
Char	  lastchr __P((Char *));
void	  lshift __P((Char **, int));
int	  number __P((Char *));
int	  prefix __P((Char *, Char *));
Char	**saveblk __P((Char **));
void	  setzero __P((char *, int));
Char	 *strip __P((Char *));
Char	 *quote __P((Char *));
char	 *strsave __P((char *));
char	 *strspl __P((char *, char *));
void	  udvar __P((Char *));
d227 1
a227 1
char	 *strstr __P((const char *, const char *));
d229 1
a229 1
char	 *strend __P((char *));
d235 2
a236 2
void	alias __P((struct wordent *));
void	freesyn __P((struct command *));
d238 1
a238 1
	syntax __P((struct wordent *, struct wordent *, int));
d244 13
a256 13
void	dobg __P((Char **, struct command *));
void	dobg1 __P((Char **, struct command *));
void	dofg __P((Char **, struct command *));
void	dofg1 __P((Char **, struct command *));
void	dojobs __P((Char **, struct command *));
void	dokill __P((Char **, struct command *));
void	donotify __P((Char **, struct command *));
void	dostop __P((Char **, struct command *));
void	dowait __P((Char **, struct command *));
void	palloc __P((int, struct command *));
void	panystop __P((bool));
void	pchild __P((int));
void	pendjob __P((void));
d258 9
a266 9
	pfind __P((Char *));
int	pfork __P((struct command *, int));
void	pgetty __P((int, int));
void	pjwait __P((struct process *));
void	pnote __P((void));
void	prestjob __P((void));
void	psavejob __P((void));
void	pstart __P((struct process *, int));
void	pwait __P((void));
d271 2
a272 2
void	execute __P((struct command *, int, int *, int *));
void	mypipe __P((int *));
d278 15
a292 15
	*adrof1 __P((Char *, struct varent *));
void	 doset __P((Char **, struct command *));
void	 dolet __P((Char **, struct command *));
Char	*putn __P((int));
int	 getn __P((Char *));
Char	*value1 __P((Char *, struct varent *));
void	 set __P((Char *, Char *));
void	 set1 __P((Char *, Char **, struct varent *));
void	 setq __P((Char *, Char **, struct varent *));
void	 unset __P((Char **, struct command *));
void	 unset1 __P((Char *[], struct varent *));
void	 unsetv __P((Char *));
void	 setNS __P((Char *));
void	 shift __P((Char **, struct command *));
void	 plist __P((struct varent *));
d297 2
a298 2
void	donice __P((Char **, struct command *));
void	dotime __P((Char **, struct command *));
d301 4
a304 4
void	ruadd __P((struct rusage *, struct rusage *));
void	settimes __P((void));
void	pcsecs __P((long));
void	psecs __P((long));
d309 5
a313 5
void	Free __P((ptr_t));
ptr_t	Malloc __P((size_t));
ptr_t	Realloc __P((ptr_t, size_t));
ptr_t	Calloc __P((size_t, size_t));
void	showall __P((Char **, struct command *));
d319 3
a321 3
Char	 *s_strchr __P((Char *, int));
Char	 *s_strrchr __P((Char *, int));
Char	 *s_strcat __P((Char *, Char *));
d323 1
a323 1
Char	 *s_strncat __P((Char *, Char *, size_t));
d325 13
a337 13
Char	 *s_strcpy __P((Char *, Char *));
Char	 *s_strncpy __P((Char *, Char *, size_t));
Char	 *s_strspl __P((Char *, Char *));
size_t	  s_strlen __P((Char *));
int	  s_strcmp __P((Char *, Char *));
int	  s_strncmp __P((Char *, Char *, size_t));
Char	 *s_strsave __P((Char *));
Char	 *s_strend __P((Char *));
Char	 *s_strstr __P((Char *, Char *));
Char	 *str2short __P((char *));
Char	**blk2short __P((char **));
char	 *short2str __P((Char *));
char	**short2blk __P((Char **));
d339 2
a340 2
char	 *short2qstr __P((Char *));
char	 *vis_str    __P((Char *));
@


1.2
log
@update rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: extern.h,v 1.7 1995/03/21 14:51:58 mycroft Exp $	*/
/*	$NetBSD: extern.h,v 1.7 1995/03/21 14:51:58 mycroft Exp $	*/
d220 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
