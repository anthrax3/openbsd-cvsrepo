head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.2
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.18
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.14
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.18
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.08.14.19.45.24;	author guenther;	state Exp;
branches;
next	1.18;
commitid	nvDtxeb9vAZ7aKSk;

1.18
date	2015.12.26.13.48.38;	author mestre;	state Exp;
branches;
next	1.17;
commitid	jZMsEASvreUUSdqp;

1.17
date	2015.10.26.22.03.06;	author naddy;	state Exp;
branches;
next	1.16;
commitid	jREL04iPW8d08lKc;

1.16
date	2015.10.26.15.01.15;	author naddy;	state Exp;
branches;
next	1.15;
commitid	gs7LRmKw8OfepnU6;

1.15
date	2015.02.08.06.09.50;	author tedu;	state Exp;
branches;
next	1.14;
commitid	i1nyRcSvJDMCYw84;

1.14
date	2015.02.08.05.51.37;	author tedu;	state Exp;
branches;
next	1.13;
commitid	L3WalZJ5Trtg0ORm;

1.13
date	2014.10.16.19.43.31;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	jIHreojPTUQy0Zyb;

1.12
date	2012.12.04.02.24.46;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.11.02.41.01;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.11.21.09.50;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.32.07;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.19.19.39.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.06;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.25.18.58.13;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.11.02.01.00.34;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.29.19.10.00;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.19.26;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.04;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Don't call sysconf() in a loop conditional when the loop won't affect it

ok natano@@ tedu@@
@
text
@/*	$OpenBSD: misc.c,v 1.18 2015/12/26 13:48:38 mestre Exp $	*/
/*	$NetBSD: misc.c,v 1.6 1995/03/21 09:03:09 cgd Exp $	*/

/*-
 * Copyright (c) 1980, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdarg.h>

#include "csh.h"
#include "extern.h"

static int	renum(int, int);

int
any(char *s, int c)
{
    if (!s)
	return (0);		/* Check for nil pointer */
    while (*s)
	if (*s++ == c)
	    return (1);
    return (0);
}

char   *
strsave(char *s)
{
    char   *n;
    char *p;

    if (s == NULL)
	s = "";
    for (p = s; *p++;)
	continue;
    n = p = xreallocarray(NULL, (p - s), sizeof(char));
    while ((*p++ = *s++) != '\0')
	continue;
    return (n);
}

Char  **
blkend(Char **up)
{

    while (*up)
	up++;
    return (up);
}


void
blkpr(FILE *fp, Char **av)
{

    for (; *av; av++) {
	(void) fprintf(fp, "%s", vis_str(*av));
	if (av[1])
	    (void) fprintf(fp, " ");
    }
}

int
blklen(Char **av)
{
    int i = 0;

    while (*av++)
	i++;
    return (i);
}

Char  **
blkcpy(Char **oav, Char **bv)
{
    Char **av = oav;

    while ((*av++ = *bv++) != NULL)
	continue;
    return (oav);
}

Char  **
blkcat(Char **up, Char **vp)
{

    (void) blkcpy(blkend(up), vp);
    return (up);
}

void
blkfree(Char **av0)
{
    Char **av = av0;

    if (!av0)
	return;
    for (; *av; av++)
	free(* av);
    free(av0);
}

Char  **
saveblk(Char **v)
{
    Char **newv = xcalloc((size_t) (blklen(v) + 1), sizeof(Char **));
    Char  **onewv = newv;

    while (*v)
	*newv++ = Strsave(*v++);
    return (onewv);
}

Char  **
blkspl(Char **up, Char **vp)
{
    Char **wp = xcalloc((size_t) (blklen(up) + blklen(vp) + 1),
		      sizeof(Char **));

    (void) blkcpy(wp, up);
    return (blkcat(wp, vp));
}

Char
lastchr(Char *cp)
{

    if (!cp)
	return (0);
    if (!*cp)
	return (0);
    while (cp[1])
	cp++;
    return (*cp);
}

/*
 * This routine is called after an error to close up
 * any units which may have been left open accidentally.
 */
void
closem(void)
{
    int f;
    int max = sysconf(_SC_OPEN_MAX);

    for (f = 0; f < max; f++)
	if (f != SHIN && f != SHOUT && f != SHERR && f != OLDSTD &&
	    f != FSHTTY)
	    (void) close(f);
}

void
donefds(void)
{
    (void) close(0);
    (void) close(1);
    (void) close(2);

    didfds = 0;
}

/*
 * Move descriptor i to j.
 * If j is -1 then we just want to get i to a safe place,
 * i.e. to a unit > 2.  This also happens in dcopy.
 */
int
dmove(int i, int j)
{

    if (i == j || i < 0)
	return (i);
    if (j >= 0) {
	(void) dup2(i, j);
	if (j != i)
	    (void) close(i);
	return (j);
    }
    j = dcopy(i, j);
    if (j != i)
	(void) close(i);
    return (j);
}

int
dcopy(int i, int j)
{

    if (i == j || i < 0 || (j < 0 && i > 2))
	return (i);
    if (j >= 0) {
	(void) dup2(i, j);
	return (j);
    }
    (void) close(j);
    return (renum(i, j));
}

static int
renum(int i, int j)
{
    int k = dup(i);

    if (k < 0)
	return (-1);
    if (j == -1 && k > 2)
	return (k);
    if (k != j) {
	j = renum(k, j);
	(void) close(k);
	return (j);
    }
    return (k);
}

/*
 * Left shift a command argument list, discarding
 * the first c arguments.  Used in "shift" commands
 * as well as by commands like "repeat".
 */
void
lshift(Char **v, int c)
{
    Char **u;

    for (u = v; *u && --c >= 0; u++)
	free(*u);
    (void) blkcpy(v, u);
}

int
number(Char *cp)
{
    if (!cp)
	return(0);
    if (*cp == '-') {
	cp++;
	if (!Isdigit(*cp))
	    return (0);
	cp++;
    }
    while (*cp && Isdigit(*cp))
	cp++;
    return (*cp == 0);
}

Char  **
copyblk(Char **v)
{
    Char  **nv = xcalloc((size_t) (blklen(v) + 1), sizeof(Char **));

    return (blkcpy(nv, v));
}

Char   *
strip(Char *cp)
{
    Char *dp = cp;

    if (!cp)
	return (cp);
    while ((*dp++ &= TRIM) != '\0')
	continue;
    return (cp);
}

Char   *
quote(Char *cp)
{
    Char *dp = cp;

    if (!cp)
	return (cp);
    while (*dp != '\0')
	*dp++ |= QUOTE;
    return (cp);
}

void
udvar(Char *name)
{

    setname(vis_str(name));
    stderror(ERR_NAME | ERR_UNDVAR);
}

int
prefix(Char *sub, Char *str)
{

    for (;;) {
	if (*sub == 0)
	    return (1);
	if (*str == 0)
	    return (0);
	if (*sub++ != *str++)
	    return (0);
    }
}
@


1.18
log
@Replace handrolled xfree() function by directly using free(3)

OK mmcc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.17 2015/10/26 22:03:06 naddy Exp $	*/
d173 1
d175 1
a175 1
    for (f = 0; f < sysconf(_SC_OPEN_MAX); f++)
@


1.17
log
@miscellaneous cruft:
* remove lint
* unifdef S_IFLNK, S_ISFIFO, S_ISLNK, S_ISSOCK, O_APPEND
* remove 0, NOTUSED, notdef -- untouched since original import
* remove IIASA
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.16 2015/10/26 15:01:15 naddy Exp $	*/
d127 2
a128 2
	xfree(* av);
    xfree(av0);
d255 1
a255 1
	xfree(*u);
@


1.16
log
@unifdef BUILTIN (unused), NLS (always set), SHORT_STRINGS (always set)
and remove a few unused defines; no binary changes; ok tedu@@ zhuk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.15 2015/02/08 06:09:50 tedu Exp $	*/
a140 18

#ifdef NOTUSED
char   *
strstr(char *s, char *t)
{
    do {
	char *ss = s;
	char *tt = t;

	do
	    if (*tt == '\0')
		return (s);
	while (*ss++ == *tt++);
    } while (*s++ != '\0');
    return (NULL);
}

#endif /* NOTUSED */
@


1.15
log
@delete tons more casts
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.14 2015/02/08 05:51:37 tedu Exp $	*/
a159 25
#ifndef SHORT_STRINGS
char   *
strspl(char *cp, char *dp)
{
    char   *ep;
    char *p, *q;

    if (!cp)
	cp = "";
    if (!dp)
	dp = "";
    for (p = cp; *p++;)
	continue;
    for (q = dp; *q++;)
	continue;
    ep = xreallocarray(NULL, ((p - cp) + (q - dp) - 1), sizeof(char));
    for (p = ep, q = cp; *p++ = *q++;)
	continue;
    for (p--, q = dp; *p++ = *q++;)
	continue;
    return (ep);
}

#endif

a299 13

#ifndef SHORT_STRINGS
char   *
strend(char *cp)
{
    if (!cp)
	return (cp);
    while (*cp)
	cp++;
    return (cp);
}

#endif /* SHORT_STRINGS */
@


1.14
log
@delete many more ptr_t casts
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.13 2014/10/16 19:43:31 deraadt Exp $	*/
d134 1
a134 2
    Char **newv =
    (Char **) xcalloc((size_t) (blklen(v) + 1), sizeof(Char **));
d188 1
a188 2
    Char **wp =
    (Char **) xcalloc((size_t) (blklen(up) + blklen(vp) + 1),
d321 1
a321 1
    Char  **nv = (Char **) xcalloc((size_t) (blklen(v) + 1), sizeof(Char **));
@


1.13
log
@Use reallocarray() and remove a few archaic memory allocation practices.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.12 2012/12/04 02:24:46 deraadt Exp $	*/
d127 2
a128 2
	xfree((ptr_t) * av);
    xfree((ptr_t) av0);
d300 1
a300 1
	xfree((ptr_t) *u);
@


1.12
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.11 2009/10/27 23:59:21 deraadt Exp $	*/
d64 1
a64 1
    n = p = (char *) xmalloc((size_t) ((p - s) * sizeof(char)));
d176 1
a176 1
    ep = (char *) xmalloc((size_t) (((p - cp) + (q - dp) - 1) * sizeof(char)));
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.10 2005/12/11 02:41:01 deraadt Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.10
log
@unused code and variables
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.9 2003/06/11 21:09:50 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)misc.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: misc.c,v 1.9 2003/06/11 21:09:50 deraadt Exp $";
#endif
#endif /* not lint */
@


1.9
log
@de-register and ansify functions
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.8 2003/06/02 23:32:07 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.8 2003/06/02 23:32:07 millert Exp $";
a59 9
}

void
setzero(char *cp, int i)
{
    if (i != 0)
	do
	    *cp++ = 0;
	while (--i);
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.7 2002/02/19 19:39:35 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.7 2002/02/19 19:39:35 millert Exp $";
d52 1
a52 3
any(s, c)
    register char *s;
    register int c;
d63 1
a63 3
setzero(cp, i)
    char   *cp;
    int     i;
d72 1
a72 2
strsave(s)
    register char *s;
d75 1
a75 1
    register char *p;
d88 1
a88 2
blkend(up)
    register Char **up;
d98 1
a98 3
blkpr(fp, av)
    FILE *fp;
    register Char **av;
d109 1
a109 2
blklen(av)
    register Char **av;
d111 1
a111 1
    register int i = 0;
d119 1
a119 3
blkcpy(oav, bv)
    Char  **oav;
    register Char **bv;
d121 1
a121 1
    register Char **av = oav;
d129 1
a129 2
blkcat(up, vp)
    Char  **up, **vp;
d137 1
a137 2
blkfree(av0)
    Char  **av0;
d139 1
a139 1
    register Char **av = av0;
d149 1
a149 2
saveblk(v)
    register Char **v;
d151 1
a151 1
    register Char **newv =
d162 1
a162 2
strstr(s, t)
    register char *s, *t;
d165 2
a166 2
	register char *ss = s;
	register char *tt = t;
d180 1
a180 2
strspl(cp, dp)
    char   *cp, *dp;
d183 1
a183 1
    register char *p, *q;
d204 1
a204 2
blkspl(up, vp)
    register Char **up, **vp;
d206 1
a206 1
    register Char **wp =
d215 1
a215 2
lastchr(cp)
    register Char *cp;
d232 1
a232 1
closem()
d234 1
a234 1
    register int f;
d243 1
a243 1
donefds()
d258 1
a258 2
dmove(i, j)
    register int i, j;
d276 1
a276 2
dcopy(i, j)
    register int i, j;
d290 1
a290 2
renum(i, j)
    register int i, j;
d292 1
a292 1
    register int k = dup(i);
d312 1
a312 3
lshift(v, c)
    register Char **v;
    register int c;
d314 1
a314 1
    register Char **u;
d322 1
a322 2
number(cp)
    Char   *cp;
d338 1
a338 2
copyblk(v)
    register Char **v;
d347 1
a347 2
strend(cp)
    register char *cp;
d359 1
a359 2
strip(cp)
    Char   *cp;
d361 1
a361 1
    register Char *dp = cp;
d371 1
a371 2
quote(cp)
    Char   *cp;
d373 1
a373 1
    register Char *dp = cp;
d383 1
a383 2
udvar(name)
    Char   *name;
d391 1
a391 2
prefix(sub, str)
    register Char *sub, *str;
@


1.7
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.6 2002/02/16 21:27:06 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.6 2002/02/16 21:27:06 millert Exp $";
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.5 1997/07/25 18:58:13 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.5 1997/07/25 18:58:13 mickey Exp $";
d48 1
a48 5
#ifdef __STDC__
# include <stdarg.h>
#else
# include <varargs.h>
#endif
@


1.5
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.4 1996/11/02 01:00:34 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.4 1996/11/02 01:00:34 millert Exp $";
d57 1
a57 1
static int	renum __P((int, int));
@


1.4
log
@Update from NetBSD (christos)
Quote all imported environment variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.3 1996/06/29 19:10:00 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.3 1996/06/29 19:10:00 deraadt Exp $";
d48 1
a48 1
#if __STDC__
@


1.3
log
@s/NOFILE/sysconf(_SC_OPEN_MAX)/
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.2 1996/06/23 14:19:26 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.2 1996/06/23 14:19:26 deraadt Exp $";
d402 13
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.6 1995/03/21 09:03:09 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.6 1995/03/21 09:03:09 cgd Exp $";
d262 1
a262 1
    for (f = 0; f < NOFILE; f++)
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: misc.c,v 1.6 1995/03/21 09:03:09 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
