head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.2
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.14.0.16
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.8
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.22
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.18
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.16
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.14
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.12
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.10
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.8
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.5.0.16
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.14
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2017.07.22.09.37.21;	author anton;	state Exp;
branches;
next	1.14;
commitid	XZlbShykG9jPc9YC;

1.14
date	2013.08.22.04.43.40;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.16.22.13.30;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.02.25.16.07.10;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.11.21.09.51;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.32.07;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.19.19.39.35;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.06;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.14.22.13.33;	author nordin;	state Exp;
branches;
next	1.5;

1.5
date	97.11.15.21.51.31;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	97.07.25.18.58.19;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.14.12.17.44;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.19.31;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.04;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Use monotonic clock for the time command in csh and ksh.

From Scott Cheloha
ok tb@@
@
text
@/*	$OpenBSD: time.c,v 1.14 2013/08/22 04:43:40 guenther Exp $	*/
/*	$NetBSD: time.c,v 1.7 1995/03/21 13:55:25 mycroft Exp $	*/

/*-
 * Copyright (c) 1980, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdarg.h>

#include "csh.h"
#include "extern.h"

/*
 * C Shell - routines handling process timing and niceing
 */
static void	pdeltat(struct timeval *, struct timeval *);

void
settimes(void)
{
    struct rusage ruch;

    (void) clock_gettime(CLOCK_MONOTONIC, &time0);
    (void) getrusage(RUSAGE_SELF, &ru0);
    (void) getrusage(RUSAGE_CHILDREN, &ruch);
    ruadd(&ru0, &ruch);
}

/*
 * dotime is only called if it is truly a builtin function and not a
 * prefix to another command
 */
void
/*ARGSUSED*/
dotime(Char **v, struct command *t)
{
    struct timespec timedol;
    struct rusage ru1, ruch;

    (void) getrusage(RUSAGE_SELF, &ru1);
    (void) getrusage(RUSAGE_CHILDREN, &ruch);
    ruadd(&ru1, &ruch);
    (void) clock_gettime(CLOCK_MONOTONIC, &timedol);
    prusage(&ru0, &ru1, &timedol, &time0);
}

/*
 * donice is only called when it on the line by itself or with a +- value
 */
void
/*ARGSUSED*/
donice(Char **v, struct command *t)
{
    Char *cp;
    int     nval = 0;

    v++, cp = *v++;
    if (cp == 0)
	nval = 4;
    else if (*v == 0 && any("+-", cp[0]))
	nval = getn(cp);
    (void) setpriority(PRIO_PROCESS, 0, nval);
}

void
ruadd(struct rusage *ru, struct rusage *ru2)
{
    timeradd(&ru->ru_utime, &ru2->ru_utime, &ru->ru_utime);
    timeradd(&ru->ru_stime, &ru2->ru_stime, &ru->ru_stime);
    if (ru2->ru_maxrss > ru->ru_maxrss)
	ru->ru_maxrss = ru2->ru_maxrss;

    ru->ru_ixrss += ru2->ru_ixrss;
    ru->ru_idrss += ru2->ru_idrss;
    ru->ru_isrss += ru2->ru_isrss;
    ru->ru_minflt += ru2->ru_minflt;
    ru->ru_majflt += ru2->ru_majflt;
    ru->ru_nswap += ru2->ru_nswap;
    ru->ru_inblock += ru2->ru_inblock;
    ru->ru_oublock += ru2->ru_oublock;
    ru->ru_msgsnd += ru2->ru_msgsnd;
    ru->ru_msgrcv += ru2->ru_msgrcv;
    ru->ru_nsignals += ru2->ru_nsignals;
    ru->ru_nvcsw += ru2->ru_nvcsw;
    ru->ru_nivcsw += ru2->ru_nivcsw;
}

void
prusage(struct rusage *r0, struct rusage *r1, struct timespec *e,
    struct timespec *b)
{
    time_t t =
    (r1->ru_utime.tv_sec - r0->ru_utime.tv_sec) * 100 +
    (r1->ru_utime.tv_usec - r0->ru_utime.tv_usec) / 10000 +
    (r1->ru_stime.tv_sec - r0->ru_stime.tv_sec) * 100 +
    (r1->ru_stime.tv_usec - r0->ru_stime.tv_usec) / 10000;
    char *cp;
    long i;
    struct varent *vp = adrof(STRtime);

    int     ms =
    (e->tv_sec - b->tv_sec) * 100 + (e->tv_nsec - b->tv_nsec) / 10000000;

    cp = "%Uu %Ss %E %P %X+%Dk %I+%Oio %Fpf+%Ww";

    if (vp && vp->vec[0] && vp->vec[1])
	cp = short2str(vp->vec[1]);

    for (; *cp; cp++)
	if (*cp != '%')
	    (void) fputc(*cp, cshout);
	else if (cp[1])
	    switch (*++cp) {

	    case 'U':		/* user CPU time used */
		pdeltat(&r1->ru_utime, &r0->ru_utime);
		break;

	    case 'S':		/* system CPU time used */
		pdeltat(&r1->ru_stime, &r0->ru_stime);
		break;

	    case 'E':		/* elapsed (wall-clock) time */
		pcsecs((long) ms);
		break;

	    case 'P':		/* percent time spent running */
		/* check if it did not run at all */
		i = (ms == 0) ? 0 : ((long long)t * 1000 / ms);
		/* nn.n% */
		(void) fprintf(cshout, "%ld.%01ld%%", i / 10, i % 10);
		break;

	    case 'W':		/* number of swaps */
		i = r1->ru_nswap - r0->ru_nswap;
		(void) fprintf(cshout, "%ld", i);
		break;

	    case 'X':		/* (average) shared text size */
		(void) fprintf(cshout, "%ld", t == 0 ? 0L :
			       (long)((r1->ru_ixrss - r0->ru_ixrss) / t));
		break;

	    case 'D':		/* (average) unshared data size */
		(void) fprintf(cshout, "%ld", t == 0 ? 0L :
			(long)((r1->ru_idrss + r1->ru_isrss -
			       (r0->ru_idrss + r0->ru_isrss)) / t));
		break;

	    case 'K':		/* (average) total data memory used  */
		(void) fprintf(cshout, "%ld", t == 0 ? 0L :
			(long)(((r1->ru_ixrss + r1->ru_isrss + r1->ru_idrss)
			      - (r0->ru_ixrss + r0->ru_idrss + r0->ru_isrss))
			      / t));
		break;

	    case 'M':		/* max. Resident Set Size */
		(void) fprintf(cshout, "%ld", r1->ru_maxrss / 2L);
		break;

	    case 'F':		/* page faults */
		(void) fprintf(cshout, "%ld", r1->ru_majflt - r0->ru_majflt);
		break;

	    case 'R':		/* page reclaims */
		(void) fprintf(cshout, "%ld", r1->ru_minflt - r0->ru_minflt);
		break;

	    case 'I':		/* FS blocks in */
		(void) fprintf(cshout, "%ld", r1->ru_inblock - r0->ru_inblock);
		break;

	    case 'O':		/* FS blocks out */
		(void) fprintf(cshout, "%ld", r1->ru_oublock - r0->ru_oublock);
		break;

	    case 'r':		/* socket messages received */
		(void) fprintf(cshout, "%ld", r1->ru_msgrcv - r0->ru_msgrcv);
		break;

	    case 's':		/* socket messages sent */
		(void) fprintf(cshout, "%ld", r1->ru_msgsnd - r0->ru_msgsnd);
		break;

	    case 'k':		/* number of signals received */
		(void) fprintf(cshout, "%ld", r1->ru_nsignals-r0->ru_nsignals);
		break;

	    case 'w':		/* num. voluntary context switches (waits) */
		(void) fprintf(cshout, "%ld", r1->ru_nvcsw - r0->ru_nvcsw);
		break;

	    case 'c':		/* num. involuntary context switches */
		(void) fprintf(cshout, "%ld", r1->ru_nivcsw - r0->ru_nivcsw);
		break;
	    }
    (void) fputc('\n', cshout);
}

static void
pdeltat(struct timeval *t1, struct timeval *t0)
{
    struct timeval td;

    timersub(t1, t0, &td);
    (void) fprintf(cshout, "%lld.%01ld", (long long)td.tv_sec,
	td.tv_usec / 100000);
}

#define  P2DIG(i) (void) fprintf(cshout, "%d%d", (i) / 10, (i) % 10)

void
psecs(long l)
{
    int i;

    i = l / 3600;
    if (i) {
	(void) fprintf(cshout, "%d:", i);
	i = l % 3600;
	P2DIG(i / 60);
	goto minsec;
    }
    i = l;
    (void) fprintf(cshout, "%d", i / 60);
minsec:
    i %= 60;
    (void) fputc(':', cshout);
    P2DIG(i);
}

void
pcsecs(long l)			/* PWP: print mm:ss.dd, l is in sec*100 */
{
    int i;

    i = l / 360000;
    if (i) {
	(void) fprintf(cshout, "%d:", i);
	i = (l % 360000) / 100;
	P2DIG(i / 60);
	goto minsec;
    }
    i = l / 100;
    (void) fprintf(cshout, "%d", i / 60);
minsec:
    i %= 60;
    (void) fputc(':', cshout);
    P2DIG(i);
    (void) fputc('.', cshout);
    P2DIG((int) (l % 100));
}
@


1.14
log
@Correct format string mismatches turned up by -Wformat=2

suggestions and ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.13 2013/04/16 22:13:30 deraadt Exp $	*/
d49 1
a49 1
    (void) gettimeofday(&time0, NULL);
d63 1
a63 1
    struct timeval timedol;
d69 1
a69 1
    (void) gettimeofday(&timedol, NULL);
d115 2
a116 2
prusage(struct rusage *r0, struct rusage *r1, struct timeval *e,
    struct timeval *b)
d128 1
a128 1
    (e->tv_sec - b->tv_sec) * 100 + (e->tv_usec - b->tv_usec) / 10000;
@


1.13
log
@handle larger time_t types
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.12 2009/10/27 23:59:21 deraadt Exp $	*/
d167 1
a167 1
			       (r1->ru_ixrss - r0->ru_ixrss) / t);
d172 2
a173 2
			(r1->ru_idrss + r1->ru_isrss -
			 (r0->ru_idrss + r0->ru_isrss)) / t);
d178 3
a180 2
			((r1->ru_ixrss + r1->ru_isrss + r1->ru_idrss) -
			 (r0->ru_ixrss + r0->ru_idrss + r0->ru_isrss)) / t);
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.11 2005/02/25 16:07:10 deraadt Exp $	*/
d231 2
a232 1
    (void) fprintf(cshout, "%ld.%01ld", td.tv_sec, td.tv_usec / 100000);
@


1.11
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.10 2003/06/11 21:09:51 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)time.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: time.c,v 1.10 2003/06/11 21:09:51 deraadt Exp $";
#endif
#endif /* not lint */
@


1.10
log
@de-register and ansify functions
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.9 2003/06/02 23:32:07 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: time.c,v 1.9 2003/06/02 23:32:07 millert Exp $";
d174 1
a174 1
		(void) fprintf(cshout, "%ld", t == 0 ? 0L : 
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.8 2002/02/19 19:39:35 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: time.c,v 1.8 2002/02/19 19:39:35 millert Exp $";
d53 1
a53 1
settimes()
d69 1
a69 3
dotime(v, t)
    Char **v;
    struct command *t;
d86 1
a86 3
donice(v, t)
    Char **v;
    struct command *t;
d88 1
a88 1
    register Char *cp;
d100 1
a100 2
ruadd(ru, ru2)
    register struct rusage *ru, *ru2;
d123 2
a124 3
prusage(r0, r1, e, b)
    register struct rusage *r0, *r1;
    struct timeval *e, *b;
d126 1
a126 1
    register time_t t =
d131 3
a133 3
    register char *cp;
    register long i;
    register struct varent *vp = adrof(STRtime);
d234 1
a234 2
pdeltat(t1, t0)
    struct timeval *t1, *t0;
d245 1
a245 2
psecs(l)
    long    l;
d247 1
a247 1
    register int i;
d265 1
a265 2
pcsecs(l)			/* PWP: print mm:ss.dd, l is in sec*100 */
    long    l;
d267 1
a267 1
    register int i;
@


1.8
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.7 2002/02/16 21:27:06 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: time.c,v 1.7 2002/02/16 21:27:06 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.6 2002/02/14 22:13:33 nordin Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: time.c,v 1.6 2002/02/14 22:13:33 nordin Exp $";
d46 1
a46 5
#ifdef __STDC__
# include <stdarg.h>
#else
# include <varargs.h>
#endif
@


1.6
log
@Avoid overflow in usage percent calculation. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.5 1997/11/15 21:51:31 todd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: time.c,v 1.5 1997/11/15 21:51:31 todd Exp $";
d58 1
a58 1
static void	pdeltat __P((struct timeval *, struct timeval *));
@


1.5
log
@spelling
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.4 1997/07/25 18:58:19 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: time.c,v 1.4 1997/07/25 18:58:19 mickey Exp $";
d177 1
a177 1
		i = (ms == 0) ? 0 : (t * 1000 / ms);
@


1.4
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.3 1996/12/14 12:17:44 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: time.c,v 1.3 1996/12/14 12:17:44 mickey Exp $";
d224 1
a224 1
	    case 'r':		/* socket messages recieved */
d232 1
a232 1
	    case 'k':		/* number of signals recieved */
@


1.3
log
@-Wall'ing.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.2 1996/06/23 14:19:31 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: time.c,v 1.2 1996/06/23 14:19:31 deraadt Exp $";
d46 1
a46 1
#if __STDC__
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.7 1995/03/21 13:55:25 mycroft Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: time.c,v 1.7 1995/03/21 13:55:25 mycroft Exp $";
d254 1
a254 1
    (void) fprintf(cshout, "%d.%01d", td.tv_sec, td.tv_usec / 100000);
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: time.c,v 1.7 1995/03/21 13:55:25 mycroft Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
