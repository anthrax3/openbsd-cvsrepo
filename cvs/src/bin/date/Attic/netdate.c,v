head	1.19;
access;
symbols
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.6
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.2
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.16.0.10
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.8
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.10.0.16
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.14
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.12
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.10
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.8
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.6
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2011.07.07.21.00.59;	author deraadt;	state dead;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2008.10.01.08.46.58;	author otto;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.25.15.41.07;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.23.32.07;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.04.04.26.39;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.05.22.32.35;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.26.14.35.29;	author lebel;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.26.14.33.25;	author lebel;	state Exp;
branches;
next	1.10;

1.10
date	97.09.01.18.29.22;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.06.30.07.08.44;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.06.18.19.21.39;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.06.11.17.15.25;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.03.26.19.08.06;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.12.14.12.17.45;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.08.26.23.31.26;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.04.15.45.26;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.19.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.05;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@timed's time is up.  use ntpd(8).  Even our own fossil developers
switched a while back.
ok miod, kettenis
@
text
@/*	$OpenBSD: netdate.c,v 1.18 2009/10/27 23:59:21 deraadt Exp $	*/
/*	$NetBSD: netdate.c,v 1.10 1995/09/07 06:21:06 jtc Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netdb.h>
#define TSPTYPES
#include <protocols/timed.h>

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <rpc/rpc.h>		/* bindresvport() proto */

#include "extern.h"

#define	WAITACK		2	/* seconds */
#define	WAITDATEACK	5	/* seconds */

extern int retval;

/*
 * Set the date in the machines controlled by timedaemons by communicating the
 * new date to the local timedaemon.  If the timedaemon is in the master state,
 * it performs the correction on all slaves.  If it is in the slave state, it
 * notifies the master that a correction is needed.
 * Returns 0 on success.  Returns > 0 on failure, setting retval to 2;
 */
int
netsettime(time_t tval)
{
	struct timeval tout;
	struct servent *sp;
	struct tsp msg;
	struct sockaddr_in sin, dest, from;
	int fdsn;
	fd_set *fdsp = NULL;
	long waittime;
	int s, timed_ack, found, error;
	socklen_t length;
	char hostname[MAXHOSTNAMELEN];

	if ((sp = getservbyname("timed", "udp")) == NULL) {
		warnx("udp/timed: unknown service");
		return (retval = 2);
	}

	memset(&dest, 0, sizeof(dest));
	dest.sin_len = sizeof(struct sockaddr_in);
	dest.sin_family = AF_INET;
	dest.sin_port = sp->s_port;
	dest.sin_addr.s_addr = htonl(INADDR_ANY);
	s = socket(AF_INET, SOCK_DGRAM, 0);
	if (s < 0) {
		if (errno != EPROTONOSUPPORT)
			warn("timed");
		return (retval = 2);
	}

	memset(&sin, 0, sizeof(sin));
	sin.sin_len = sizeof(struct sockaddr_in);
	sin.sin_family = AF_INET;
	if (bindresvport(s, &sin) < 0) {
		warn("bindresvport");
		goto bad;
	}
	msg.tsp_type = TSP_SETDATE;
	msg.tsp_vers = TSPVERSION;
	if (gethostname(hostname, sizeof(hostname))) {
		warn("gethostname");
		goto bad;
	}
	(void)strlcpy(msg.tsp_name, hostname, sizeof(msg.tsp_name));
	msg.tsp_seq = htons((u_short)0);
	msg.tsp_time.tv_sec = htonl((u_long)tval);
	msg.tsp_time.tv_usec = htonl((u_long)0);
	length = sizeof(struct sockaddr_in);
	if (connect(s, (struct sockaddr *)&dest, length) < 0) {
		warn("connect");
		goto bad;
	}
	if (send(s, &msg, sizeof(struct tsp), 0) < 0) {
		if (errno != ECONNREFUSED)
			warn("send");
		goto bad;
	}

	timed_ack = -1;
	waittime = WAITACK;

	fdsn = howmany(s+1, NFDBITS) * sizeof(fd_mask);
	if ((fdsp = malloc(fdsn)) == NULL)
		err(1, "malloc");
loop:
	tout.tv_sec = waittime;
	tout.tv_usec = 0;

	memset(fdsp, 0, fdsn);
	FD_SET(s, fdsp);
	found = select(s+1, fdsp, NULL, NULL, &tout);

	length = sizeof(error);
	if (!getsockopt(s,
	    SOL_SOCKET, SO_ERROR, &error, &length) && error) {
		if (error != ECONNREFUSED)
			warn("send (delayed error)");
		goto bad;
	}

	if (found > 0 && FD_ISSET(s, fdsp)) {
		length = sizeof(struct sockaddr_in);
		if (recvfrom(s, &msg, sizeof(struct tsp), 0,
		    (struct sockaddr *)&from, &length) < 0) {
			if (errno != ECONNREFUSED)
				warn("recvfrom");
			goto bad;
		}
		msg.tsp_seq = ntohs(msg.tsp_seq);
		msg.tsp_time.tv_sec = ntohl(msg.tsp_time.tv_sec);
		msg.tsp_time.tv_usec = ntohl(msg.tsp_time.tv_usec);
		switch (msg.tsp_type) {
		case TSP_ACK:
			timed_ack = TSP_ACK;
			waittime = WAITDATEACK;
			goto loop;
		case TSP_DATEACK:
			(void)close(s);
			free(fdsp);
			return (0);
		default:
			warnx("wrong ack received from timed: %s",
			    tsptype[msg.tsp_type]);
			timed_ack = -1;
			break;
		}
	}
	if (timed_ack == -1)
		warnx("can't reach time daemon, time set locally");

bad:
	if (fdsp)
		free(fdsp);
	(void)close(s);
	return (retval = 2);
}
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.17 2008/10/01 08:46:58 otto Exp $	*/
@


1.17
log
@give a less confusing error message on bindresvport() failure; ok
matthieu@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.16 2006/04/25 15:41:07 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)netdate.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: netdate.c,v 1.16 2006/04/25 15:41:07 deraadt Exp $";
#endif
#endif /* not lint */
@


1.16
log
@various small lint cleanups; ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.15 2003/06/02 23:32:07 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.15 2003/06/02 23:32:07 millert Exp $";
d107 1
a107 1
		warnx("all ports in use");
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.14 2002/07/04 04:26:39 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.14 2002/07/04 04:26:39 deraadt Exp $";
d125 1
a125 1
	if (send(s, (char *)&msg, sizeof(struct tsp), 0) < 0) {
d135 1
a135 1
	if ((fdsp = (fd_set *)malloc(fdsn)) == NULL)
d147 1
a147 1
	    SOL_SOCKET, SO_ERROR, (char *)&error, &length) && error) {
@


1.14
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.13 2001/07/05 22:32:35 espie Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.13 2001/07/05 22:32:35 espie Exp $";
@


1.13
log
@Fix length type.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.12 2001/06/26 14:35:29 lebel Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.12 2001/06/26 14:35:29 lebel Exp $";
d77 1
a77 2
netsettime(tval)
	time_t tval;
@


1.12
log
@really use strlcpy vs strncpy+a[len-1]='\0'
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.11 2001/06/26 14:33:25 lebel Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.11 2001/06/26 14:33:25 lebel Exp $";
d87 2
a88 1
	int s, length, timed_ack, found, error;
@


1.11
log
@use strlcpy vs strncpy+a[len-1]='\0'
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.10 1997/09/01 18:29:22 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.10 1997/09/01 18:29:22 deraadt Exp $";
d120 1
a120 1
	(void)strncpy(msg.tsp_name, hostname, sizeof(msg.tsp_name));
@


1.10
log
@i am bored enough to fix terminal space/tab uglies
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.9 1997/06/30 07:08:44 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.9 1997/06/30 07:08:44 deraadt Exp $";
d120 1
a120 2
	(void)strncpy(msg.tsp_name, hostname, sizeof(msg.tsp_name)-1);
	msg.tsp_name[sizeof(msg.tsp_name)-1] = '\0';
@


1.9
log
@stdlib.h
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.8 1997/06/18 19:21:39 kstailey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.8 1997/06/18 19:21:39 kstailey Exp $";
d179 1
a179 1
			warnx("wrong ack received from timed: %s", 
@


1.8
log
@(foo *)0 -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.7 1997/06/11 17:15:25 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.7 1997/06/11 17:15:25 deraadt Exp $";
d59 1
@


1.7
log
@dynamic fd_set (please check, todd)
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.6 1997/03/26 19:08:06 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.6 1997/03/26 19:08:06 deraadt Exp $";
d147 1
a147 1
	found = select(s+1, fdsp, (fd_set *)0, (fd_set *)0, &tout);
@


1.6
log
@more careful strncpy
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.5 1996/12/14 12:17:45 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.5 1996/12/14 12:17:45 mickey Exp $";
d83 2
a84 1
	fd_set ready;
d86 1
a86 1
	int s, length, timed_ack, found, err;
d137 4
d145 3
a147 3
	FD_ZERO(&ready);
	FD_SET(s, &ready);
	found = select(FD_SETSIZE, &ready, (fd_set *)0, (fd_set *)0, &tout);
d149 1
a149 1
	length = sizeof(err);
d151 2
a152 2
	    SOL_SOCKET, SO_ERROR, (char *)&err, &length) && err) {
		if (err != ECONNREFUSED)
d157 1
a157 1
	if (found > 0 && FD_ISSET(s, &ready)) {
d175 1
d188 2
@


1.5
log
@-Wall'ing.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.4 1996/08/26 23:31:26 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.4 1996/08/26 23:31:26 deraadt Exp $";
d118 1
a118 1
	(void)strncpy(msg.tsp_name, hostname, sizeof(msg.tsp_name));
@


1.4
log
@strncpy careful
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.3 1996/08/04 15:45:26 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.3 1996/08/04 15:45:26 deraadt Exp $";
d59 1
@


1.3
log
@use bindresvport
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.2 1996/06/23 14:19:43 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.2 1996/06/23 14:19:43 deraadt Exp $";
d117 2
a118 1
	(void)strncpy(msg.tsp_name, hostname, sizeof(hostname));
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: netdate.c,v 1.10 1995/09/07 06:21:06 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netdate.c,v 1.10 1995/09/07 06:21:06 jtc Exp $";
d84 1
a84 1
	int s, length, port, timed_ack, found, err;
d107 1
a107 11
	for (port = IPPORT_RESERVED - 1; port > IPPORT_RESERVED / 2; port--) {
		sin.sin_port = htons((u_short)port);
		if (bind(s, (struct sockaddr *)&sin, sizeof(sin)) >= 0)
			break;
		if (errno == EADDRINUSE)
			continue;
		if (errno != EADDRNOTAVAIL)
			warn("bind");
		goto bad;
	}
	if (port == IPPORT_RESERVED / 2) {
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: netdate.c,v 1.10 1995/09/07 06:21:06 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
