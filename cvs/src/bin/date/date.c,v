head	1.50;
access;
symbols
	OPENBSD_6_0:1.49.0.4
	OPENBSD_6_0_BASE:1.49
	OPENBSD_5_9:1.49.0.2
	OPENBSD_5_9_BASE:1.49
	OPENBSD_5_8:1.47.0.4
	OPENBSD_5_8_BASE:1.47
	OPENBSD_5_7:1.44.0.2
	OPENBSD_5_7_BASE:1.44
	OPENBSD_5_6:1.43.0.6
	OPENBSD_5_6_BASE:1.43
	OPENBSD_5_5:1.43.0.4
	OPENBSD_5_5_BASE:1.43
	OPENBSD_5_4:1.38.0.4
	OPENBSD_5_4_BASE:1.38
	OPENBSD_5_3:1.38.0.2
	OPENBSD_5_3_BASE:1.38
	OPENBSD_5_2:1.37.0.6
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.4
	OPENBSD_5_0:1.37.0.2
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.33.0.4
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.33.0.2
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.32.0.2
	OPENBSD_4_7_BASE:1.32
	OPENBSD_4_6:1.31.0.10
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.31.0.6
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.31.0.4
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.31.0.2
	OPENBSD_4_3_BASE:1.31
	OPENBSD_4_2:1.29.0.2
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.27.0.6
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.4
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.27.0.2
	OPENBSD_3_9_BASE:1.27
	OPENBSD_3_8:1.26.0.8
	OPENBSD_3_8_BASE:1.26
	OPENBSD_3_7:1.26.0.6
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.26.0.4
	OPENBSD_3_6_BASE:1.26
	OPENBSD_3_5:1.26.0.2
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.23.0.4
	OPENBSD_3_3_BASE:1.23
	OPENBSD_3_2:1.23.0.2
	OPENBSD_3_2_BASE:1.23
	OPENBSD_3_1:1.21.0.2
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.17.0.2
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.13.0.4
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.50
date	2016.10.19.18.20.25;	author schwarze;	state Exp;
branches;
next	1.49;
commitid	0nfxWLL3tqkKYGhB;

1.49
date	2015.10.09.01.37.06;	author deraadt;	state Exp;
branches;
next	1.48;
commitid	sbrB3Q5CNxcwZpfU;

1.48
date	2015.10.07.05.59.36;	author deraadt;	state Exp;
branches;
next	1.47;
commitid	BEIrdKVNxDVPoOTi;

1.47
date	2015.04.17.16.47.47;	author deraadt;	state Exp;
branches;
next	1.46;
commitid	oPRgxbmXjZ32qxiN;

1.46
date	2015.03.17.19.31.30;	author millert;	state Exp;
branches;
next	1.45;
commitid	0y5bUkEOUrNvvJEO;

1.45
date	2015.03.15.00.41.27;	author millert;	state Exp;
branches;
next	1.44;
commitid	IbVxlqGw2UipKdDr;

1.44
date	2015.02.07.02.09.13;	author deraadt;	state Exp;
branches;
next	1.43;
commitid	pzd3OPiuZ6mCFBtc;

1.43
date	2014.01.21.09.09.15;	author otto;	state Exp;
branches;
next	1.42;

1.42
date	2014.01.05.05.27.44;	author schwarze;	state Exp;
branches;
next	1.41;

1.41
date	2013.11.27.13.32.02;	author okan;	state Exp;
branches;
next	1.40;

1.40
date	2013.11.21.15.54.44;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2013.10.20.03.07.35;	author guenther;	state Exp;
branches;
next	1.38;

1.38
date	2012.12.04.02.38.50;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2011.07.08.18.07.16;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2011.07.07.21.00.59;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2011.03.11.18.22.49;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2011.03.11.17.11.15;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2010.03.31.17.51.21;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2007.12.28.19.17.28;	author chl;	state Exp;
branches;
next	1.30;

1.30
date	2007.10.16.20.19.26;	author sobrado;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.25.20.18.00;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2007.04.12.16.27.47;	author naddy;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.29.19.07.46;	author dhartmei;	state Exp;
branches;
next	1.26;

1.26
date	2003.10.15.15.58.22;	author mpech;	state Exp;
branches;
next	1.25;

1.25
date	2003.07.29.00.24.15;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.02.23.32.07;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2002.07.04.04.26.39;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.17.03.54.30;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.16.21.27.06;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2002.01.16.18.44.21;	author mpech;	state Exp;
branches;
next	1.19;

1.19
date	2001.12.02.02.02.25;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.06.13.29.08;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.26.15.22.16;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2000.11.09.23.31.56;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.09.15.07.13.43;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2000.01.22.20.24.48;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	99.02.01.07.52.09;	author d;	state Exp;
branches;
next	1.12;

1.12
date	99.01.02.08.24.51;	author weingart;	state Exp;
branches;
next	1.11;

1.11
date	98.09.01.04.57.27;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	97.09.17.23.23.03;	author bri;	state Exp;
branches;
next	1.9;

1.9
date	97.09.16.13.40.14;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.08.21.05.46.55;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.07.23.14.39.13;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	97.06.23.19.37.06;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.06.23.19.34.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.16.20.58.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.04.04.08.59.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.19.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.05;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Delete useless setlocale(3) in src/bin/.
Minor cleanup while here: return from main, static void __dead usage, etc.
Based on a patch from Jan Stary <hans at stare dot cz>.
Feedback and OK tb@@, OK millert@@.
@
text
@/*	$OpenBSD: date.c,v 1.49 2015/10/09 01:37:06 deraadt Exp $	*/
/*	$NetBSD: date.c,v 1.11 1995/09/07 06:21:05 jtc Exp $	*/

/*
 * Copyright (c) 1985, 1987, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/time.h>

#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <time.h>
#include <unistd.h>
#include <util.h>

extern	char *__progname;

time_t tval;
int jflag;
int slidetime;

static void setthetime(char *);
static void badformat(void);
static void __dead usage(void);

int
main(int argc, char *argv[])
{
	struct timezone tz;
	const char *errstr;
	struct tm *tp;
	int ch, rflag;
	char *format, buf[1024], *outzone = NULL;

	tz.tz_dsttime = tz.tz_minuteswest = 0;
	rflag = 0;
	while ((ch = getopt(argc, argv, "ad:jr:ut:z:")) != -1)
		switch(ch) {
		case 'd':		/* daylight saving time */
			tz.tz_dsttime = atoi(optarg) ? 1 : 0;
			break;
		case 'a':
			slidetime = 1;
			break;
		case 'j':		/* don't set */
			jflag = 1;
			break;
		case 'r':		/* user specified seconds */
			rflag = 1;
			tval = atoll(optarg);
			break;
		case 'u':		/* do everything in UTC */
			if (setenv("TZ", "UTC", 1) == -1)
				err(1, "cannot unsetenv TZ");
			break;
		case 't':		/* minutes west of GMT */
			tz.tz_minuteswest = strtonum(optarg, 0, 24*60-1, &errstr);
			if (errstr)
				errx(1, "-t %s: %s", optarg, errstr);
			break;
		case 'z':
			outzone = optarg;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	/*
	 * If -d or -t, set the timezone or daylight saving time; this
	 * doesn't belong here, the kernel should not know about either.
	 */
	if ((tz.tz_minuteswest || tz.tz_dsttime) &&
	    settimeofday(NULL, &tz))
		err(1, "settimeofday");

	if (!rflag && time(&tval) == -1)
		err(1, "time");

	format = "%a %b %e %H:%M:%S %Z %Y";

	/* allow the operands in any order */
	if (*argv && **argv == '+') {
		format = *argv + 1;
		argv++;
		argc--;
	}

	if (*argv) {
		setthetime(*argv);
		argv++;
		argc--;
	}

	if (pledge("stdio rpath wpath", NULL) == -1)
		err(1, "pledge");

	if (*argv && **argv == '+') {
		format = *argv + 1;
		argc--;
	}

	if (argc > 0)
		errx(1, "too many arguments");

	if (outzone)
		setenv("TZ", outzone, 1);

	tp = localtime(&tval);
	if (tp == NULL)
		errx(1, "conversion error");
	(void)strftime(buf, sizeof(buf), format, tp);
	(void)printf("%s\n", buf);
	return 0;
}

#define	ATOI2(ar)	((ar) += 2, ((ar)[-2] - '0') * 10 + ((ar)[-1] - '0'))
void
setthetime(char *p)
{
	struct tm *lt;
	struct timeval tv;
	char *dot, *t;
	int yearset = 0;

	for (t = p, dot = NULL; *t; ++t) {
		if (isdigit((unsigned char)*t))
			continue;
		if (*t == '.' && dot == NULL) {
			dot = t;
			continue;
		}
		badformat();
	}

	lt = localtime(&tval);

	lt->tm_isdst = -1;			/* correct for DST */

	if (dot != NULL) {			/* .SS */
		*dot++ = '\0';
		if (strlen(dot) != 2)
			badformat();
		lt->tm_sec = ATOI2(dot);
		if (lt->tm_sec > 61)
			badformat();
	} else
		lt->tm_sec = 0;

	switch (strlen(p)) {
	case 12:				/* cc */
		lt->tm_year = (ATOI2(p) * 100) - 1900;
		yearset = 1;
		/* FALLTHROUGH */
	case 10:				/* yy */
		if (!yearset) {
			/* mask out current year, leaving only century */
			lt->tm_year = ((lt->tm_year / 100) * 100);
		}
		lt->tm_year += ATOI2(p);
		/* FALLTHROUGH */
	case 8:					/* mm */
		lt->tm_mon = ATOI2(p);
		if ((lt->tm_mon > 12) || !lt->tm_mon)
			badformat();
		--lt->tm_mon;			/* time struct is 0 - 11 */
		/* FALLTHROUGH */
	case 6:					/* dd */
		lt->tm_mday = ATOI2(p);
		if ((lt->tm_mday > 31) || !lt->tm_mday)
			badformat();
		/* FALLTHROUGH */
	case 4:					/* HH */
		lt->tm_hour = ATOI2(p);
		if (lt->tm_hour > 23)
			badformat();
		/* FALLTHROUGH */
	case 2:					/* MM */
		lt->tm_min = ATOI2(p);
		if (lt->tm_min > 59)
			badformat();
		break;
	default:
		badformat();
	}

	/* convert broken-down time to UTC clock time */
	if ((tval = mktime(lt)) < 0)
		errx(1, "specified date is outside allowed range");

	if (jflag)
		return;

	/* set the time */
	if (slidetime) {
		struct timeval tv_current;

		if (gettimeofday(&tv_current, NULL) == -1)
			err(1, "Could not get local time of day");

		tv.tv_sec = tval - tv_current.tv_sec;
		tv.tv_usec = 0;
		if (adjtime(&tv, NULL) == -1)
			errx(1, "adjtime");
	} else {
#ifndef SMALL
		logwtmp("|", "date", "");
#endif
		tv.tv_sec = tval;
		tv.tv_usec = 0;
		if (settimeofday(&tv, NULL))
			err(1, "settimeofday");
#ifndef SMALL
		logwtmp("{", "date", "");
#endif
	}

	if ((p = getlogin()) == NULL)
		p = "???";
	syslog(LOG_AUTH | LOG_NOTICE, "date set by %s", p);
}

static void
badformat(void)
{
	warnx("illegal time format");
	usage();
}

static void __dead
usage(void)
{
	(void)fprintf(stderr,
	    "usage: %s [-aju] [-d dst] [-r seconds] [-t minutes_west] [-z output_zone]\n",
	     __progname);
	(void)fprintf(stderr,
	    "%-*s[+format] [[[[[[cc]yy]mm]dd]HH]MM[.SS]]\n", (int)strlen(__progname) + 8, "");
	exit(1);
}
@


1.49
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.48 2015/10/07 05:59:36 deraadt Exp $	*/
a41 1
#include <locale.h>
d55 1
a55 1
static void usage(void);
a65 2
	setlocale(LC_ALL, "");

d146 1
a146 1
	exit(0);
d262 1
a262 1
static void
@


1.48
log
@tame "stdio rpath wpath".  rpath is for localtime() and mktime(),
while wpath is for logwtmp(), a bit pessimistically since it is not clear
what could happen.
This is done AFTER the time is potentially set, since settimeofday() is
not available to us.  Improvements and tests would be welcome.
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.47 2015/04/17 16:47:47 deraadt Exp $	*/
d130 2
a131 2
	if (tame("stdio rpath wpath", NULL) == -1)
		err(1, "tame");
@


1.47
log
@FALLTHROUGH in getopt is incorrect.  While here use strtonum
to parse tz_minuteswest.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.46 2015/03/17 19:31:30 millert Exp $	*/
d129 3
@


1.46
log
@Eliminate use of TM_YEAR_BASE.  OK guenther@@ deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.45 2015/03/15 00:41:27 millert Exp $	*/
d62 1
d91 4
a94 6
					/* error check; don't allow "PST" */
			if (isdigit((unsigned char)*optarg)) {
				tz.tz_minuteswest = atoi(optarg);
				break;
			}
			/* FALLTHROUGH */
@


1.45
log
@tzfile.h is an internal header that should never have been installed.
What's worse, the tzfile.h that gets installed is over 20 years old
and doesn't match the real tzfile.h in libc/time.  This makes the
tree safe for /usr/include/tzfile.h removal.  The TM_YEAR_BASE
define has been moved to time.h temporarily until its usage is
replaced by 1900 in the tree.  Actual removal of tzfile.h is pending
a ports build.  Based on a diff from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.44 2015/02/07 02:09:13 deraadt Exp $	*/
d185 1
a185 1
		lt->tm_year = ATOI2(p) * 100 - TM_YEAR_BASE;
@


1.44
log
@When getopt processing flags, many should be flag=1 instead of flag++
ok tedu miod
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.43 2014/01/21 09:09:15 otto Exp $	*/
a44 1
#include <tzfile.h>
@


1.43
log
@localtime(3) can return NULL; seen by Rod Whitworth; ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.42 2014/01/05 05:27:44 schwarze Exp $	*/
d77 1
a77 1
			slidetime++;
@


1.42
log
@garbage collect unused global variable retval,
forgotten in rev. 1.36 when removing timed(8) support;
proofed by sobrado@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.41 2013/11/27 13:32:02 okan Exp $	*/
d63 1
d143 4
a146 1
	(void)strftime(buf, sizeof(buf), format, localtime(&tval));
@


1.41
log
@remove erroneous char cast to switch expression processing getopt(3);
not used in any cases.

ok deraadt@@, guenther@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.40 2013/11/21 15:54:44 deraadt Exp $	*/
d52 1
a52 1
int retval, jflag;
d144 1
a144 1
	exit(retval);
@


1.40
log
@add unsigned char casts for specific calls to ctype.h macros.
ok guenther step
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.39 2013/10/20 03:07:35 guenther Exp $	*/
d71 1
a71 1
		switch((char)ch) {
@


1.39
log
@Parse the argument the -r option with atoll() to support dates past 2038

from J Drivdal (xjd (at) rivu.net)
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.38 2012/12/04 02:38:50 deraadt Exp $	*/
d91 1
a91 1
			if (isdigit(*optarg)) {
d157 1
a157 1
		if (isdigit(*t))
@


1.38
log
@replace sys/param.h with sys/types.h (and sometimes add limits.h if needed)
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.37 2011/07/08 18:07:16 deraadt Exp $	*/
d83 1
a83 1
			tval = atol(optarg);
@


1.37
log
@extern.h no longer needed
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.36 2011/07/07 21:00:59 deraadt Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.36
log
@timed's time is up.  use ntpd(8).  Even our own fossil developers
switched a while back.
ok miod, kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.35 2011/03/11 18:22:49 deraadt Exp $	*/
a47 2

#include "extern.h"
@


1.35
log
@Add a non-standard option that affects the output TZ only.  The input (for
parsing) TZ is unaffected.  This makes it it easier to convert timestamps
from any timezone to any other timezone -- no need for $() gymnastics
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.33 2010/03/31 17:51:21 deraadt Exp $	*/
d54 1
a54 1
int retval, jflag, nflag;
d72 1
a72 1
	while ((ch = getopt(argc, argv, "ad:jnr:ut:z:")) != -1)
a82 3
		case 'n':		/* don't set network */
			nflag = 1;
			break;
d227 11
a237 12
	if (nflag || netsettime(tval)) {
		if (slidetime) {
			struct timeval tv_current;

			if (gettimeofday(&tv_current, NULL) == -1)
				err(1, "Could not get local time of day");

			tv.tv_sec = tval - tv_current.tv_sec;
			tv.tv_usec = 0;
			if (adjtime(&tv, NULL) == -1)
				errx(1, "adjtime");
		} else {
d239 1
a239 1
			logwtmp("|", "date", "");
d241 4
a244 4
			tv.tv_sec = tval;
			tv.tv_usec = 0;
			if (settimeofday(&tv, NULL))
				err(1, "settimeofday");
d246 1
a246 1
			logwtmp("{", "date", "");
a247 1
		}
a254 8
#ifdef SMALL
int
netsettime(tval)
{
	return (2);
}
#endif

d266 1
a266 1
	    "usage: %s [-ajnu] [-d dst] [-r seconds] [-t minutes_west] [-z output_zone]\n",
@


1.34
log
@Check that date(1) is not passed any extra arguments.
ok millert
@
text
@d66 1
a66 1
	char *format, buf[1024];
d72 1
a72 1
	while ((ch = getopt(argc, argv, "ad:jnr:ut:")) != -1)
d101 3
d144 3
d279 1
a279 1
	    "usage: %s [-ajnu] [-d dst] [-r seconds] [-t minutes_west] [+format]\n",
d282 1
a282 1
	    "%-*s[[[[[[cc]yy]mm]dd]HH]MM[.SS]]\n", (int)strlen(__progname) + 8, "");
@


1.33
log
@Make a -DSMALL version of date(1) for the media
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.32 2009/10/27 23:59:21 deraadt Exp $	*/
d123 2
a124 1
		++argv;
d129 2
a130 1
		++argv;
d133 1
a133 1
	if (*argv && **argv == '+')
d135 5
@


1.32
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.31 2007/12/28 19:17:28 chl Exp $	*/
d229 1
d231 1
d236 1
d238 1
d246 8
@


1.31
log
@printf field widths are always int, so add a cast to remove
"warning: field width is not type int"

"looks good" otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.30 2007/10/16 20:19:26 sobrado Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1985, 1987, 1988, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)date.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: date.c,v 1.30 2007/10/16 20:19:26 sobrado Exp $";
#endif
#endif /* not lint */
@


1.30
log
@sync the synopsis and usage of commands

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.29 2007/05/25 20:18:00 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: date.c,v 1.29 2007/05/25 20:18:00 millert Exp $";
d271 1
a271 1
	    "%-*s[[[[[[cc]yy]mm]dd]HH]MM[.SS]]\n", strlen(__progname) + 8, "");
@


1.29
log
@Remove y2k hack.  If no century is specified, use the current one.
OK otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.28 2007/04/12 16:27:47 naddy Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: date.c,v 1.28 2007/04/12 16:27:47 naddy Exp $";
d268 1
a268 1
	    "usage: %s [-ajnu] [-d dst] [-r seconds] [-t west] [+format]\n",
@


1.28
log
@use UTC instead of GMT0 for -u; from Jared R.R.Spiegel <jrrs@@ice-nine.org>
ok millert@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.27 2005/11/29 19:07:46 dhartmei Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: date.c,v 1.27 2005/11/29 19:07:46 dhartmei Exp $";
d153 1
a153 1
#define	ATOI2(ar)	((ar)[0] - '0') * 10 + ((ar)[1] - '0'); (ar) += 2;
a159 1
	int bigyear;
d188 1
a188 2
		bigyear = ATOI2(p);
		lt->tm_year = bigyear * 100 - TM_YEAR_BASE;
d192 3
a194 8
		if (yearset) {
			lt->tm_year += ATOI2(p);
		} else {
			lt->tm_year = ATOI2(p);
			if (lt->tm_year < 69)		/* hack for 2000 ;-} */
				lt->tm_year += (2000 - TM_YEAR_BASE);
			else
				lt->tm_year += (1900 - TM_YEAR_BASE);
d196 1
@


1.27
log
@add an option -j which suppresses setting the clock, but parses the date
argument. useful to convert string-to-epoch (with +%s) or just to check
whether the argument is parsed correctly before really setting the clock.
ok millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.26 2003/10/15 15:58:22 mpech Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: date.c,v 1.26 2003/10/15 15:58:22 mpech Exp $";
d105 1
a105 1
			if (setenv("TZ", "GMT0", 1) == -1)
@


1.26
log
@errx -> err. From form.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.25 2003/07/29 00:24:15 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: date.c,v 1.25 2003/07/29 00:24:15 deraadt Exp $";
d68 1
a68 1
int retval, nflag;
d86 1
a86 1
	while ((ch = getopt(argc, argv, "ad:nr:ut:")) != -1)
d94 3
d233 3
d274 1
a274 1
	    "usage: %s [-anu] [-d dst] [-r seconds] [-t west] [+format]\n",
@


1.25
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.24 2003/06/02 23:32:07 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: date.c,v 1.24 2003/06/02 23:32:07 millert Exp $";
d247 1
a247 1
				errx(1, "settimeofday");
@


1.24
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.23 2002/07/04 04:26:39 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: date.c,v 1.23 2002/07/04 04:26:39 deraadt Exp $";
d269 1
a269 1
             __progname);
@


1.23
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.22 2002/04/17 03:54:30 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: date.c,v 1.22 2002/04/17 03:54:30 deraadt Exp $";
@


1.22
log
@getopt idiot
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.21 2002/02/16 21:27:06 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.21 2002/02/16 21:27:06 millert Exp $";
d80 1
a80 3
main(argc, argv)
	int argc;
	char **argv;
d156 1
a156 2
setthetime(p)
	char *p;
d262 1
a262 1
badformat()
d269 1
a269 1
usage()
@


1.21
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.20 2002/01/16 18:44:21 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.20 2002/01/16 18:44:21 mpech Exp $";
d92 1
a92 1
	while ((ch = getopt(argc, argv, "d:nr:ut:")) != -1)
@


1.20
log
@missed some registers, kill'em!

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.19 2001/12/02 02:02:25 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.19 2001/12/02 02:02:25 deraadt Exp $";
d75 3
a77 3
static void setthetime __P((char *));
static void badformat __P((void));
static void usage __P((void));
@


1.19
log
@add -a to use adjtime(), like rdate(1) does
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.18 2001/09/06 13:29:08 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.18 2001/09/06 13:29:08 mpech Exp $";
d159 1
a159 1
	register char *p;
d161 1
a161 1
	register struct tm *lt;
@


1.18
log
@o) __progname aria;

millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.17 2001/03/26 15:22:16 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.17 2001/03/26 15:22:16 millert Exp $";
d73 1
d97 3
d239 18
a256 6
		logwtmp("|", "date", "");
		tv.tv_sec = tval;
		tv.tv_usec = 0;
		if (settimeofday(&tv, NULL))
			errx(1, "settimeofday");
		logwtmp("{", "date", "");
d275 1
a275 1
	    "usage: %s [-nu] [-d dst] [-r seconds] [-t west] [+format]\n",
@


1.17
log
@Fix comments, it is "daylight saving time", not "daylight savings time"
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.16 2000/11/09 23:31:56 aaron Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.16 2000/11/09 23:31:56 aaron Exp $";
d69 2
d259 4
a262 2
	    "usage: date [-nu] [-d dst] [-r seconds] [-t west] [+format]\n");
	(void)fprintf(stderr, "            [[[[[[cc]yy]mm]dd]HH]MM[.SS]]\n");
@


1.16
log
@Fix an off-by-one-hour error that would occur when changing the time across
DST (Daylight Saving Time); from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.15 2000/09/15 07:13:43 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.15 2000/09/15 07:13:43 deraadt Exp $";
d91 1
a91 1
		case 'd':		/* daylight savings time */
d119 1
a119 1
	 * If -d or -t, set the timezone or daylight savings time; this
@


1.15
log
@check return value for setenv(3) for failure, and deal appropriately
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.14 2000/01/22 20:24:48 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.14 2000/01/22 20:24:48 deraadt Exp $";
d172 2
@


1.14
log
@remove extra externs not needed because of unistd.h (rest of tree will be done later.. contact me if you want to help)
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.13 1999/02/01 07:52:09 d Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.13 1999/02/01 07:52:09 d Exp $";
d102 2
a103 1
			(void)setenv("TZ", "GMT0", 1);
@


1.13
log
@GMT -> UTC in comments; make y2k hack easier to read
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.12 1999/01/02 08:24:51 weingart Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.12 1999/01/02 08:24:51 weingart Exp $";
a80 2
	extern int optind;
	extern char *optarg;
@


1.12
log
@Clean up some -Wall stuff, and a potential problem if TM_TIME_BASE was not
1900.
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.11 1998/09/01 04:57:27 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.11 1998/09/01 04:57:27 pjanzen Exp $";
d103 1
a103 1
		case 'u':		/* do everything in GMT */
d185 1
a185 1
	case 12:				/* yyyy */
a194 1
			lt->tm_year += (1900 - TM_YEAR_BASE);
d196 3
a198 1
				lt->tm_year += 100;
d226 1
a226 1
	/* convert broken-down time to GMT clock time */
@


1.11
log
@Clear up an overeager Y2K fix; be a little stricter with allowable times
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.10 1997/09/17 23:23:03 bri Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.10 1997/09/17 23:23:03 bri Exp $";
d194 2
a195 1
			lt->tm_year = ATOI2(p) + 1900 - TM_YEAR_BASE;
@


1.10
log
@Cosmetic:
  Correct usage message.
  Capitalize hours, minutes and seconds so that minutes are
  distinguisable from months and so that things are in line
  with strftime(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.9 1997/09/16 13:40:14 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.9 1997/09/16 13:40:14 deraadt Exp $";
d62 2
d159 2
a160 1
	int bigyear = 0;
d187 2
a188 1
		bigyear = bigyear * 100 - 1900;
d191 6
a196 7
		lt->tm_year = bigyear;
		lt->tm_year += ATOI2(p);
		if (lt->tm_year < 69)		/* hack for 2000 ;-} */
			lt->tm_year += 100;
		if (lt->tm_year > (2037-1900))  {
			warnx("year too large (overflows 32 bit value)");
			exit(1);
d201 1
a201 1
		if (lt->tm_mon > 12)
d207 1
a207 1
		if (lt->tm_mday > 31)
d225 2
a226 2
	if ((tval = mktime(lt)) == -1)
		badformat();
d233 2
a234 4
		if (settimeofday(&tv, NULL)) {
			perror("date: settimeofday");
			exit(1);
		}
@


1.9
log
@nicer spacing in usage
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.8 1997/08/21 05:46:55 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.8 1997/08/21 05:46:55 deraadt Exp $";
d171 1
a171 1
	if (dot != NULL) {			/* .ss */
d207 1
a207 1
	case 4:					/* hh */
d212 1
a212 1
	case 2:					/* mm */
d254 1
a254 1
	(void)fprintf(stderr, "            [[[yy]yy[mm[dd[hh]]]]mm[.ss]]\n");
@


1.8
log
@correct [yy]yy stuff in manpages and usage
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.7 1997/07/23 14:39:13 kstailey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.7 1997/07/23 14:39:13 kstailey Exp $";
d254 1
a254 1
	(void)fprintf(stderr, "		   [[[yy]yy[mm[dd[hh]]]]mm[.ss]]\n");
@


1.7
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.6 1997/06/23 19:37:06 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.6 1997/06/23 19:37:06 deraadt Exp $";
d254 1
a254 1
	(void)fprintf(stderr, "		   [yy[mm[dd[hh]]]]mm[.ss]]\n");
@


1.6
log
@duh, my mind is not crisp
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.5 1997/06/23 19:34:57 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.5 1997/06/23 19:34:57 deraadt Exp $";
d254 1
a254 1
	(void)fprintf(stderr, "            [yy[mm[dd[hh]]]]mm[.ss]]\n");
@


1.5
log
@yyyy specification code; m4@@nts.umn.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.4 1997/04/16 20:58:09 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.4 1997/04/16 20:58:09 deraadt Exp $";
d157 1
@


1.4
log
@cleanup from danny@@freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.3 1997/04/04 08:59:38 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.3 1997/04/04 08:59:38 deraadt Exp $";
d181 4
d186 2
a187 1
		lt->tm_year = ATOI2(p);
d190 4
@


1.3
log
@wtmp repairs; netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.2 1996/06/23 14:19:42 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.2 1996/06/23 14:19:42 deraadt Exp $";
d119 1
a119 1
	 * doesn't belong here, there kernel should not know about either.
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: date.c,v 1.11 1995/09/07 06:21:05 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: date.c,v 1.11 1995/09/07 06:21:05 jtc Exp $";
d63 1
a72 2

int logwtmp __P((char *, char *, char *));
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: date.c,v 1.11 1995/09/07 06:21:05 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
