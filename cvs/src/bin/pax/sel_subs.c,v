head	1.26;
access;
symbols
	OPENBSD_6_2:1.26.0.6
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.4
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.25.0.8
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.4
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.6
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.21.0.4
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.20.0.12
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.10
	OPENBSD_5_0:1.20.0.8
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.6
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.4
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.18.0.24
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.20
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.18
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.16
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.14
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.12
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.10
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.8
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.6
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.4
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.16
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.14
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2016.08.26.04.20.38;	author guenther;	state Exp;
branches;
next	1.25;
commitid	oYhyWletzAVyarAc;

1.25
date	2014.11.23.05.47.49;	author guenther;	state Exp;
branches;
next	1.24;
commitid	w4xa2bVVPTvKFp4j;

1.24
date	2014.05.24.18.51.00;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2014.01.08.06.43.34;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2013.11.21.15.54.45;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2012.12.04.02.24.45;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2009.11.12.20.17.03;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.27.23.59.22;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.16.22.50.23;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.20.06.22.27;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.23.32.09;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.10.16.19.20.02;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.10.16.18.40.30;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.16.17.43.10;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.16.15.56.42;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.15.21.25.31;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.19.19.39.35;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.07;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.26.00.32.21;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.08.17.23.05.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.25.18.58.36;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.07.23.19.15.59;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.06.18.18.48.27;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.20.41;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.11.06.41.54;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@sel_subs.h is only used by sel_subs.c; merge it into the .c file
<sys/time.h> and <unistd.h> are unnecessary, but <time.h> is; sort #includes
@
text
@/*	$OpenBSD: sel_subs.c,v 1.25 2014/11/23 05:47:49 guenther Exp $	*/
/*	$NetBSD: sel_subs.c,v 1.5 1995/03/21 09:07:42 cgd Exp $	*/

/*-
 * Copyright (c) 1992 Keith Muller.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Keith Muller of the University of California, San Diego.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <ctype.h>
#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "pax.h"
#include "extern.h"

/*
 * data structure for storing uid/grp selects (-U, -G non standard options)
 */

#define USR_TB_SZ	317		/* user selection table size */
#define GRP_TB_SZ	317		/* user selection table size */

typedef struct usrt {
	uid_t uid;
	struct usrt *fow;		/* next uid */
} USRT;

typedef struct grpt {
	gid_t gid;
	struct grpt *fow;		/* next gid */
} GRPT;

/*
 * data structure for storing user supplied time ranges (-T option)
 */

#define ATOI2(ar)	((ar)[0] - '0') * 10 + ((ar)[1] - '0'); (ar) += 2;

typedef struct time_rng {
	time_t		low_time;	/* lower inclusive time limit */
	time_t		high_time;	/* higher inclusive time limit */
	int		flgs;		/* option flags */
#define	HASLOW		0x01		/* has lower time limit */
#define HASHIGH		0x02		/* has higher time limit */
#define CMPMTME		0x04		/* compare file modification time */
#define CMPCTME		0x08		/* compare inode change time */
#define CMPBOTH	(CMPMTME|CMPCTME)	/* compare inode and mod time */
	struct time_rng	*fow;		/* next pattern */
} TIME_RNG;

static int str_sec(const char *, time_t *);
static int usr_match(ARCHD *);
static int grp_match(ARCHD *);
static int trng_match(ARCHD *);

static TIME_RNG *trhead = NULL;		/* time range list head */
static TIME_RNG *trtail = NULL;		/* time range list tail */
static USRT **usrtb = NULL;		/* user selection table */
static GRPT **grptb = NULL;		/* group selection table */

/*
 * Routines for selection of archive members
 */

/*
 * sel_chk()
 *	check if this file matches a specified uid, gid or time range
 * Return:
 *	0 if this archive member should be processed, 1 if it should be skipped
 */

int
sel_chk(ARCHD *arcn)
{
	if (((usrtb != NULL) && usr_match(arcn)) ||
	    ((grptb != NULL) && grp_match(arcn)) ||
	    ((trhead != NULL) && trng_match(arcn)))
		return(1);
	return(0);
}

/*
 * User/group selection routines
 *
 * Routines to handle user selection of files based on the file uid/gid. To
 * add an entry, the user supplies either the name or the uid/gid starting with
 * a # on the command line. A \# will escape the #.
 */

/*
 * usr_add()
 *	add a user match to the user match hash table
 * Return:
 *	0 if added ok, -1 otherwise;
 */

int
usr_add(char *str)
{
	u_int indx;
	USRT *pt;
	struct passwd *pw;
	uid_t uid;

	/*
	 * create the table if it doesn't exist
	 */
	if ((str == NULL) || (*str == '\0'))
		return(-1);
	if ((usrtb == NULL) &&
	    ((usrtb = calloc(USR_TB_SZ, sizeof(USRT *))) == NULL)) {
		paxwarn(1, "Unable to allocate memory for user selection table");
		return(-1);
	}

	/*
	 * figure out user spec
	 */
	if (str[0] != '#') {
		/*
		 * it is a user name, \# escapes # as first char in user name
		 */
		if ((str[0] == '\\') && (str[1] == '#'))
			++str;
		if ((pw = getpwnam(str)) == NULL) {
			paxwarn(1, "Unable to find uid for user: %s", str);
			return(-1);
		}
		uid = (uid_t)pw->pw_uid;
	} else
		uid = (uid_t)strtoul(str+1, NULL, 10);
	endpwent();

	/*
	 * hash it and go down the hash chain (if any) looking for it
	 */
	indx = ((unsigned)uid) % USR_TB_SZ;
	if ((pt = usrtb[indx]) != NULL) {
		while (pt != NULL) {
			if (pt->uid == uid)
				return(0);
			pt = pt->fow;
		}
	}

	/*
	 * uid is not yet in the table, add it to the front of the chain
	 */
	if ((pt = malloc(sizeof(USRT))) != NULL) {
		pt->uid = uid;
		pt->fow = usrtb[indx];
		usrtb[indx] = pt;
		return(0);
	}
	paxwarn(1, "User selection table out of memory");
	return(-1);
}

/*
 * usr_match()
 *	check if this files uid matches a selected uid.
 * Return:
 *	0 if this archive member should be processed, 1 if it should be skipped
 */

static int
usr_match(ARCHD *arcn)
{
	USRT *pt;

	/*
	 * hash and look for it in the table
	 */
	pt = usrtb[((unsigned)arcn->sb.st_uid) % USR_TB_SZ];
	while (pt != NULL) {
		if (pt->uid == arcn->sb.st_uid)
			return(0);
		pt = pt->fow;
	}

	/*
	 * not found
	 */
	return(1);
}

/*
 * grp_add()
 *	add a group match to the group match hash table
 * Return:
 *	0 if added ok, -1 otherwise;
 */

int
grp_add(char *str)
{
	u_int indx;
	GRPT *pt;
	struct group *gr;
	gid_t gid;

	/*
	 * create the table if it doesn't exist
	 */
	if ((str == NULL) || (*str == '\0'))
		return(-1);
	if ((grptb == NULL) &&
	    ((grptb = calloc(GRP_TB_SZ, sizeof(GRPT *))) == NULL)) {
		paxwarn(1, "Unable to allocate memory fo group selection table");
		return(-1);
	}

	/*
	 * figure out user spec
	 */
	if (str[0] != '#') {
		/*
		 * it is a group name, \# escapes # as first char in group name
		 */
		if ((str[0] == '\\') && (str[1] == '#'))
			++str;
		if ((gr = getgrnam(str)) == NULL) {
			paxwarn(1,"Cannot determine gid for group name: %s", str);
			return(-1);
		}
		gid = (gid_t)gr->gr_gid;
	} else
		gid = (gid_t)strtoul(str+1, NULL, 10);
	endgrent();

	/*
	 * hash it and go down the hash chain (if any) looking for it
	 */
	indx = ((unsigned)gid) % GRP_TB_SZ;
	if ((pt = grptb[indx]) != NULL) {
		while (pt != NULL) {
			if (pt->gid == gid)
				return(0);
			pt = pt->fow;
		}
	}

	/*
	 * gid not in the table, add it to the front of the chain
	 */
	if ((pt = malloc(sizeof(GRPT))) != NULL) {
		pt->gid = gid;
		pt->fow = grptb[indx];
		grptb[indx] = pt;
		return(0);
	}
	paxwarn(1, "Group selection table out of memory");
	return(-1);
}

/*
 * grp_match()
 *	check if this files gid matches a selected gid.
 * Return:
 *	0 if this archive member should be processed, 1 if it should be skipped
 */

static int
grp_match(ARCHD *arcn)
{
	GRPT *pt;

	/*
	 * hash and look for it in the table
	 */
	pt = grptb[((unsigned)arcn->sb.st_gid) % GRP_TB_SZ];
	while (pt != NULL) {
		if (pt->gid == arcn->sb.st_gid)
			return(0);
		pt = pt->fow;
	}

	/*
	 * not found
	 */
	return(1);
}

/*
 * Time range selection routines
 *
 * Routines to handle user selection of files based on the modification and/or
 * inode change time falling within a specified time range (the non-standard
 * -T flag). The user may specify any number of different file time ranges.
 * Time ranges are checked one at a time until a match is found (if at all).
 * If the file has a mtime (and/or ctime) which lies within one of the time
 * ranges, the file is selected. Time ranges may have a lower and/or a upper
 * value. These ranges are inclusive. When no time ranges are supplied to pax
 * with the -T option, all members in the archive will be selected by the time
 * range routines. When only a lower range is supplied, only files with a
 * mtime (and/or ctime) equal to or younger are selected. When only a upper
 * range is supplied, only files with a mtime (and/or ctime) equal to or older
 * are selected. When the lower time range is equal to the upper time range,
 * only files with a mtime (or ctime) of exactly that time are selected.
 */

/*
 * trng_add()
 *	add a time range match to the time range list.
 *	This is a non-standard pax option. Lower and upper ranges are in the
 *	format: [[[[[cc]yy]mm]dd]HH]MM[.SS] and are comma separated.
 *	Time ranges are based on current time, so 1234 would specify a time of
 *	12:34 today.
 * Return:
 *	0 if the time range was added to the list, -1 otherwise
 */

int
trng_add(char *str)
{
	TIME_RNG *pt;
	char *up_pt = NULL;
	char *stpt;
	char *flgpt;
	int dot = 0;

	/*
	 * throw out the badly formed time ranges
	 */
	if ((str == NULL) || (*str == '\0')) {
		paxwarn(1, "Empty time range string");
		return(-1);
	}

	/*
	 * locate optional flags suffix /{cm}.
	 */
	if ((flgpt = strrchr(str, '/')) != NULL)
		*flgpt++ = '\0';

	for (stpt = str; *stpt != '\0'; ++stpt) {
		if ((*stpt >= '0') && (*stpt <= '9'))
			continue;
		if ((*stpt == ',') && (up_pt == NULL)) {
			*stpt = '\0';
			up_pt = stpt + 1;
			dot = 0;
			continue;
		}

		/*
		 * allow only one dot per range (secs)
		 */
		if ((*stpt == '.') && (!dot)) {
			++dot;
			continue;
		}
		paxwarn(1, "Improperly specified time range: %s", str);
		goto out;
	}

	/*
	 * allocate space for the time range and store the limits
	 */
	if ((pt = malloc(sizeof(TIME_RNG))) == NULL) {
		paxwarn(1, "Unable to allocate memory for time range");
		return(-1);
	}

	/*
	 * by default we only will check file mtime, but user can specify
	 * mtime, ctime (inode change time) or both.
	 */
	if ((flgpt == NULL) || (*flgpt == '\0'))
		pt->flgs = CMPMTME;
	else {
		pt->flgs = 0;
		while (*flgpt != '\0') {
			switch (*flgpt) {
			case 'M':
			case 'm':
				pt->flgs |= CMPMTME;
				break;
			case 'C':
			case 'c':
				pt->flgs |= CMPCTME;
				break;
			default:
				paxwarn(1, "Bad option %c with time range %s",
				    *flgpt, str);
				free(pt);
				goto out;
			}
			++flgpt;
		}
	}

	/*
	 * start off with the current time
	 */
	pt->low_time = pt->high_time = time(NULL);
	if (*str != '\0') {
		/*
		 * add lower limit
		 */
		if (str_sec(str, &(pt->low_time)) < 0) {
			paxwarn(1, "Illegal lower time range %s", str);
			free(pt);
			goto out;
		}
		pt->flgs |= HASLOW;
	}

	if ((up_pt != NULL) && (*up_pt != '\0')) {
		/*
		 * add upper limit
		 */
		if (str_sec(up_pt, &(pt->high_time)) < 0) {
			paxwarn(1, "Illegal upper time range %s", up_pt);
			free(pt);
			goto out;
		}
		pt->flgs |= HASHIGH;

		/*
		 * check that the upper and lower do not overlap
		 */
		if (pt->flgs & HASLOW) {
			if (pt->low_time > pt->high_time) {
				paxwarn(1, "Upper %s and lower %s time overlap",
					up_pt, str);
				free(pt);
				return(-1);
			}
		}
	}

	pt->fow = NULL;
	if (trhead == NULL) {
		trtail = trhead = pt;
		return(0);
	}
	trtail->fow = pt;
	trtail = pt;
	return(0);

    out:
	paxwarn(1, "Time range format is: [[[[[cc]yy]mm]dd]HH]MM[.SS][/[c][m]]");
	return(-1);
}

/*
 * trng_match()
 *	check if this files mtime/ctime falls within any supplied time range.
 * Return:
 *	0 if this archive member should be processed, 1 if it should be skipped
 */

static int
trng_match(ARCHD *arcn)
{
	TIME_RNG *pt;

	/*
	 * have to search down the list one at a time looking for a match.
	 * remember time range limits are inclusive.
	 */
	pt = trhead;
	while (pt != NULL) {
		switch (pt->flgs & CMPBOTH) {
		case CMPBOTH:
			/*
			 * user wants both mtime and ctime checked for this
			 * time range
			 */
			if (((pt->flgs & HASLOW) &&
			    (arcn->sb.st_mtime < pt->low_time) &&
			    (arcn->sb.st_ctime < pt->low_time)) ||
			    ((pt->flgs & HASHIGH) &&
			    (arcn->sb.st_mtime > pt->high_time) &&
			    (arcn->sb.st_ctime > pt->high_time))) {
				pt = pt->fow;
				continue;
			}
			break;
		case CMPCTME:
			/*
			 * user wants only ctime checked for this time range
			 */
			if (((pt->flgs & HASLOW) &&
			    (arcn->sb.st_ctime < pt->low_time)) ||
			    ((pt->flgs & HASHIGH) &&
			    (arcn->sb.st_ctime > pt->high_time))) {
				pt = pt->fow;
				continue;
			}
			break;
		case CMPMTME:
		default:
			/*
			 * user wants only mtime checked for this time range
			 */
			if (((pt->flgs & HASLOW) &&
			    (arcn->sb.st_mtime < pt->low_time)) ||
			    ((pt->flgs & HASHIGH) &&
			    (arcn->sb.st_mtime > pt->high_time))) {
				pt = pt->fow;
				continue;
			}
			break;
		}
		break;
	}

	if (pt == NULL)
		return(1);
	return(0);
}

/*
 * str_sec()
 *	Convert a time string in the format of [[[[[cc]yy]mm]dd]HH]MM[.SS] to
 *	seconds UTC. Tval already has current time loaded into it at entry.
 * Return:
 *	0 if converted ok, -1 otherwise
 */

static int
str_sec(const char *p, time_t *tval)
{
	struct tm *lt;
	const char *dot, *t;
	size_t len;
	int bigyear;
	int yearset;

	yearset = 0;
	len = strlen(p);

	for (t = p, dot = NULL; *t; ++t) {
		if (isdigit((unsigned char)*t))
			continue;
		if (*t == '.' && dot == NULL) {
			dot = t;
			continue;
		}
		return(-1);
	}

	lt = localtime(tval);

	if (dot != NULL) {			/* .SS */
		if (strlen(++dot) != 2)
			return(-1);
		lt->tm_sec = ATOI2(dot);
		if (lt->tm_sec > 61)
			return(-1);
		len -= 3;
	} else
		lt->tm_sec = 0;

	switch (len) {
	case 12:				/* cc */
		bigyear = ATOI2(p);
		lt->tm_year = (bigyear * 100) - 1900;
		yearset = 1;
		/* FALLTHROUGH */
	case 10:				/* yy */
		if (yearset) {
			lt->tm_year += ATOI2(p);
		} else {
			lt->tm_year = ATOI2(p);
			if (lt->tm_year < 69)		/* hack for 2000 ;-} */
				lt->tm_year += (2000 - 1900);
		}
		/* FALLTHROUGH */
	case 8:					/* mm */
		lt->tm_mon = ATOI2(p);
		if ((lt->tm_mon > 12) || !lt->tm_mon)
			return(-1);
		--lt->tm_mon;			/* time struct is 0 - 11 */
		/* FALLTHROUGH */
	case 6:					/* dd */
		lt->tm_mday = ATOI2(p);
		if ((lt->tm_mday > 31) || !lt->tm_mday)
			return(-1);
		/* FALLTHROUGH */
	case 4:					/* HH */
		lt->tm_hour = ATOI2(p);
		if (lt->tm_hour > 23)
			return(-1);
		/* FALLTHROUGH */
	case 2:					/* MM */
		lt->tm_min = ATOI2(p);
		if (lt->tm_min > 59)
			return(-1);
		break;
	default:
		return(-1);
	}

	/* convert broken-down time to UTC clock time seconds */
	if ((*tval = mktime(lt)) == -1)
		return(-1);
	return(0);
}
@


1.25
log
@Don't pull in <tzfile.h> just for a number that's hardcoded in the C standard
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.24 2014/05/24 18:51:00 guenther Exp $	*/
a37 1
#include <sys/time.h>
d45 2
a46 1
#include <unistd.h>
a47 1
#include "sel_subs.h"
d49 35
@


1.24
log
@Delete pointless casts: free() return value to (void), free()'s
argument to (char *), and malloc/calloc's return value to the type
of the variable it's being assigned to.
Convert the one calloc() where the zeroing isn't needed to a reallocarray().

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.23 2014/01/08 06:43:34 deraadt Exp $	*/
a45 1
#include <tzfile.h>
d560 1
a560 1
		lt->tm_year = (bigyear * 100) - TM_YEAR_BASE;
d569 1
a569 3
				lt->tm_year += (2000 - TM_YEAR_BASE);
			else
				lt->tm_year += (1900 - TM_YEAR_BASE);
@


1.23
log
@Zap leading whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.22 2013/11/21 15:54:45 deraadt Exp $	*/
d112 1
a112 1
	    ((usrtb = (USRT **)calloc(USR_TB_SZ, sizeof(USRT *))) == NULL)) {
d150 1
a150 1
	if ((pt = (USRT *)malloc(sizeof(USRT))) != NULL) {
d209 1
a209 1
	    ((grptb = (GRPT **)calloc(GRP_TB_SZ, sizeof(GRPT *))) == NULL)) {
d247 1
a247 1
	if ((pt = (GRPT *)malloc(sizeof(GRPT))) != NULL) {
d361 1
a361 1
	if ((pt = (TIME_RNG *)malloc(sizeof(TIME_RNG))) == NULL) {
d387 1
a387 1
				(void)free((char *)pt);
d404 1
a404 1
			(void)free((char *)pt);
d416 1
a416 1
			(void)free((char *)pt);
d428 1
a428 1
				(void)free((char *)pt);
@


1.22
log
@add unsigned char casts for specific calls to ctype.h macros.
ok guenther step
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.21 2012/12/04 02:24:45 deraadt Exp $	*/
d112 1
a112 1
 	    ((usrtb = (USRT **)calloc(USR_TB_SZ, sizeof(USRT *))) == NULL)) {
d209 1
a209 1
 	    ((grptb = (GRPT **)calloc(GRP_TB_SZ, sizeof(GRPT *))) == NULL)) {
@


1.21
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.20 2009/11/12 20:17:03 deraadt Exp $	*/
d537 1
a537 1
		if (isdigit(*t))
@


1.20
log
@memory leak in one more case, found by parfait; ok jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.19 2009/10/27 23:59:22 deraadt Exp $	*/
a39 1
#include <sys/param.h>
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.18 2004/04/16 22:50:23 deraadt Exp $	*/
d388 1
@


1.18
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.17 2003/10/20 06:22:27 jmc Exp $	*/
a35 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)sel_subs.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: sel_subs.c,v 1.17 2003/10/20 06:22:27 jmc Exp $";
#endif
#endif /* not lint */
@


1.17
log
@typos from Jared Yanovich;
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.16 2003/06/02 23:32:09 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: sel_subs.c,v 1.16 2003/06/02 23:32:09 millert Exp $";
d384 1
a384 1
			switch(*flgpt) {
d474 1
a474 1
		switch(pt->flgs & CMPBOTH) {
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.15 2002/10/16 19:20:02 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: sel_subs.c,v 1.15 2002/10/16 19:20:02 millert Exp $";
d77 1
a77 1
 *	check if this file matches a specfied uid, gid or time range
@


1.15
log
@sprinkle const; mostly from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.14 2002/10/16 18:40:30 millert Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: sel_subs.c,v 1.14 2002/10/16 18:40:30 millert Exp $";
@


1.14
log
@Fix comment typos; most from NetBSD and FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.13 2002/10/16 17:43:10 millert Exp $	*/
d43 1
a43 1
static char sccsid[] = "@@(#)sel_subs.c	8.1 (Berkeley) 5/31/93";
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.13 2002/10/16 17:43:10 millert Exp $";
d65 1
a65 1
static int str_sec(char *, time_t *);
d537 1
a537 1
str_sec(char *p, time_t *tval)
d540 2
a541 1
	char *dot, *t;
d543 4
a546 1
	int yearset = 0;
d561 1
a561 2
		*dot++ = '\0';
		if (strlen(dot) != 2)
d566 1
d570 1
a570 1
	switch (strlen(p)) {
@


1.13
log
@kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.12 2002/10/16 15:56:42 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.12 2002/10/16 15:56:42 millert Exp $";
d100 2
a101 2
 * add an entry, the user supplies either then name or the uid/gid starting with
 * a # on the command line. A \# will eascape the #.
d531 1
a531 1
 *	UTC seconds. Tval already has current time loaded into it at entry.
@


1.12
log
@Sync date parsing code with that in date(1) (which is obviously what pax's
date code was based on).  It is now possible to specify 4 digit years.
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.11 2002/10/15 21:25:31 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.11 2002/10/15 21:25:31 millert Exp $";
d65 4
a68 4
static int str_sec(register char *, time_t *);
static int usr_match(register ARCHD *);
static int grp_match(register ARCHD *);
static int trng_match(register ARCHD *);
d87 1
a87 1
sel_chk(register ARCHD *arcn)
d112 1
a112 1
usr_add(register char *str)
d114 4
a117 4
	register u_int indx;
	register USRT *pt;
	register struct passwd *pw;
	register uid_t uid;
d181 1
a181 1
usr_match(register ARCHD *arcn)
d183 1
a183 1
	register USRT *pt;
d209 1
a209 1
grp_add(register char *str)
d211 4
a214 4
	register u_int indx;
	register GRPT *pt;
	register struct group *gr;
	register gid_t gid;
d278 1
a278 1
grp_match(register ARCHD *arcn)
d280 1
a280 1
	register GRPT *pt;
d328 1
a328 1
trng_add(register char *str)
d330 5
a334 5
	register TIME_RNG *pt;
	register char *up_pt = NULL;
	register char *stpt;
	register char *flgpt;
	register int dot = 0;
d468 1
a468 1
trng_match(register ARCHD *arcn)
d470 1
a470 1
	register TIME_RNG *pt;
d537 1
a537 1
str_sec(register char *p, time_t *tval)
d539 2
a540 2
	register struct tm *lt;
	register char *dot, *t;
@


1.11
log
@Time ranges were documented incorrectly; Christian von Roques
We should probably add support for specifying the century too...
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.10 2002/02/19 19:39:35 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.10 2002/02/19 19:39:35 millert Exp $";
d53 2
a55 1
#include <grp.h>
d57 1
d59 1
a60 1
#include <stdlib.h>
d320 1
a320 1
 *	format: [[[[yy]mm]dd]hh]mm[.ss] and are comma separated.
d456 1
a456 1
	paxwarn(1, "Time range format is: [[[[yy]mm]dd]hh]mm[.ss][/[c][m]]");
d530 2
a531 2
 *	Convert a time string in the format of [[[[yy]mm]dd]hh]mm[.ss] to gmt
 *	seconds. Tval already has current time loaded into it at entry.
d537 1
a537 1
str_sec(register char *str, time_t *tval)
d540 13
a552 1
	register char *dot = NULL;
d555 2
a556 4
	if ((dot = strchr(str, '.')) != NULL) {
		/*
		 * seconds (.ss)
		 */
d560 2
a561 1
		if ((lt->tm_sec = ATOI2(dot)) > 61)
d566 16
a581 9
	switch (strlen(str)) {
	case 10:
		/*
		 * year (yy)
		 * watch out for year 2000
		 */
		if ((lt->tm_year = ATOI2(str)) < 69)
			lt->tm_year += 100;
		str += 2;
d583 3
a585 6
	case 8:
		/*
		 * month (mm)
		 * watch out months are from 0 - 11 internally
		 */
		if ((lt->tm_mon = ATOI2(str)) > 12)
d587 1
a587 2
		--lt->tm_mon;
		str += 2;
d589 3
a591 5
	case 6:
		/*
		 * day (dd)
		 */
		if ((lt->tm_mday = ATOI2(str)) > 31)
a592 1
		str += 2;
d594 3
a596 5
	case 4:
		/*
		 * hour (hh)
		 */
		if ((lt->tm_hour = ATOI2(str)) > 23)
a597 1
		str += 2;
d599 3
a601 5
	case 2:
		/*
		 * minute (mm)
		 */
		if ((lt->tm_min = ATOI2(str)) > 59)
d607 2
a608 3
	/*
	 * convert broken-down time to GMT clock time seconds
	 */
@


1.10
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.9 2002/02/16 21:27:07 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.9 2002/02/16 21:27:07 millert Exp $";
d318 1
a318 1
 *	format: [yy[mm[dd[hh]]]]mm[.ss] and are comma separated.
d378 1
a378 1
	 * by default we only will check file mtime, but usee can specify
d454 1
a454 1
	paxwarn(1, "Time range format is: [yy[mm[dd[hh]]]]mm[.ss][/[c][m]]");
d528 1
a528 1
 *	Convert a time string in the format of [yy[mm[dd[hh]]]]mm[.ss] to gmt
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.8 2001/05/26 00:32:21 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.8 2001/05/26 00:32:21 millert Exp $";
a83 1
#ifdef __STDC__
a85 5
#else
int
sel_chk(arcn)
	register ARCHD *arcn;
#endif
a108 1
#ifdef __STDC__
a110 5
#else
int
usr_add(str)
	register char *str;
#endif
a177 1
#ifdef __STDC__
a179 5
#else
static int
usr_match(arcn)
	register ARCHD *arcn;
#endif
a205 1
#ifdef __STDC__
a207 5
#else
int
grp_add(str)
	register char *str;
#endif
a274 1
#ifdef __STDC__
a276 5
#else
static int
grp_match(arcn)
	register ARCHD *arcn;
#endif
a324 1
#ifdef __STDC__
a326 5
#else
int
trng_add(str)
	register char *str;
#endif
a464 1
#ifdef __STDC__
a466 5
#else
static int
trng_match(arcn)
	register ARCHD *arcn;
#endif
a533 1
#ifdef __STDC__
a535 6
#else
static int
str_sec(str, tval)
	register char *str;
	time_t *tval;
#endif
@


1.8
log
@Get rid of NET2_FTS and NET2_REGEX #ifdefs since they are useless.
Change NET2_STAT into LONG_OFF_T for portability to systems with
a 32bit off_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.7 1997/08/17 23:05:09 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.7 1997/08/17 23:05:09 millert Exp $";
d63 4
a66 4
static int str_sec __P((register char *, time_t *));
static int usr_match __P((register ARCHD *));
static int grp_match __P((register ARCHD *));
static int trng_match __P((register ARCHD *));
@


1.7
log
@Don't include both strings.h and string.h -- just use string.h
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.6 1997/07/25 18:58:36 mickey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.6 1997/07/25 18:58:36 mickey Exp $";
a154 3
#		ifdef NET2_STAT
		uid = (uid_t)atoi(str+1);
#		else
a155 1
#		endif
a263 3
#		ifdef NET2_STAT
		gid = (gid_t)atoi(str+1);
#		else
a264 1
#		endif
@


1.6
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.5 1997/07/23 19:15:59 kstailey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.5 1997/07/23 19:15:59 kstailey Exp $";
a56 1
#include <strings.h>
@


1.5
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.4 1997/06/18 18:48:27 kstailey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.4 1997/06/18 18:48:27 kstailey Exp $";
d85 1
a85 1
#if __STDC__
d116 1
a116 1
#if __STDC__
d195 1
a195 1
#if __STDC__
d229 1
a229 1
#if __STDC__
d308 1
a308 1
#if __STDC__
d364 1
a364 1
#if __STDC__
d510 1
a510 1
#if __STDC__
d585 1
a585 1
#if __STDC__
@


1.4
log
@(foo *)NULL -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.3 1996/06/23 14:20:41 deraadt Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.3 1996/06/23 14:20:41 deraadt Exp $";
d137 2
a138 2
                paxwarn(1, "Unable to allocate memory for user selection table");
                return(-1);
d151 2
a152 2
                	paxwarn(1, "Unable to find uid for user: %s", str);
                	return(-1);
d155 1
a155 1
        } else
d168 2
a169 2
                while (pt != NULL) {
                        if (pt->uid == uid)
d171 2
a172 2
                        pt = pt->fow;
                }
d184 2
a185 2
        paxwarn(1, "User selection table out of memory");
        return(-1);
d250 2
a251 2
                paxwarn(1, "Unable to allocate memory fo group selection table");
                return(-1);
d264 2
a265 2
                	paxwarn(1,"Cannot determine gid for group name: %s", str);
                	return(-1);
d268 1
a268 1
        } else
d281 2
a282 2
                while (pt != NULL) {
                        if (pt->gid == gid)
d284 2
a285 2
                        pt = pt->fow;
                }
d297 2
a298 2
        paxwarn(1, "Group selection table out of memory");
        return(-1);
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: sel_subs.c,v 1.5 1995/03/21 09:07:42 cgd Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: sel_subs.c,v 1.5 1995/03/21 09:07:42 cgd Exp $";
d159 1
a159 1
		uid = (uid_t)strtoul(str+1, (char **)NULL, 10);
d272 1
a272 1
		gid = (gid_t)strtoul(str+1, (char **)NULL, 10);
d452 1
a452 1
	pt->low_time = pt->high_time = time((time_t *)NULL);
@


1.2
log
@Correct compile warnings
Rename warn() to paxwarn() so <err.h> can be included

Remove #include <ctype.h> when not needed; from FreeBSD
@
text
@d1 1
d45 1
a45 1
static char rcsid[] = "$NetBSD: sel_subs.c,v 1.5 1995/03/21 09:07:42 cgd Exp $";
@


1.1
log
@Initial revision
@
text
@a54 1
#include <ctype.h>
d136 1
a136 1
                warn(1, "Unable to allocate memory for user selection table");
d150 1
a150 1
                	warn(1, "Unable to find uid for user: %s", str);
d183 1
a183 1
        warn(1, "User selection table out of memory");
d249 1
a249 1
                warn(1, "Unable to allocate memory fo group selection table");
d263 1
a263 1
                	warn(1,"Cannot determine gid for group name: %s", str);
d296 1
a296 1
        warn(1, "Group selection table out of memory");
d382 1
a382 1
		warn(1, "Empty time range string");
d409 1
a409 1
		warn(1, "Improperly specified time range: %s", str);
d417 1
a417 1
		warn(1, "Unable to allocate memory for time range");
d440 1
a440 1
				warn(1, "Bad option %c with time range %s",
d457 1
a457 1
			warn(1, "Illegal lower time range %s", str);
d469 1
a469 1
			warn(1, "Illegal upper time range %s", up_pt);
d480 1
a480 1
				warn(1, "Upper %s and lower %s time overlap",
d498 1
a498 1
	warn(1, "Time range format is: [yy[mm[dd[hh]]]]mm[.ss][/[c][m]]");
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
