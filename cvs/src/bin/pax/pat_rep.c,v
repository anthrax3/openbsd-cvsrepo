head	1.41;
access;
symbols
	OPENBSD_6_1:1.41.0.4
	OPENBSD_6_1_BASE:1.41
	OPENBSD_6_0:1.40.0.4
	OPENBSD_6_0_BASE:1.40
	OPENBSD_5_9:1.40.0.2
	OPENBSD_5_9_BASE:1.40
	OPENBSD_5_8:1.39.0.4
	OPENBSD_5_8_BASE:1.39
	OPENBSD_5_7:1.37.0.2
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.34.0.4
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.32.0.4
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.32.0.2
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.31.0.12
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.10
	OPENBSD_5_0:1.31.0.8
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.31.0.6
	OPENBSD_4_9_BASE:1.31
	OPENBSD_4_8:1.31.0.4
	OPENBSD_4_8_BASE:1.31
	OPENBSD_4_7:1.31.0.2
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.30.0.20
	OPENBSD_4_6_BASE:1.30
	OPENBSD_4_5:1.30.0.16
	OPENBSD_4_5_BASE:1.30
	OPENBSD_4_4:1.30.0.14
	OPENBSD_4_4_BASE:1.30
	OPENBSD_4_3:1.30.0.12
	OPENBSD_4_3_BASE:1.30
	OPENBSD_4_2:1.30.0.10
	OPENBSD_4_2_BASE:1.30
	OPENBSD_4_1:1.30.0.8
	OPENBSD_4_1_BASE:1.30
	OPENBSD_4_0:1.30.0.6
	OPENBSD_4_0_BASE:1.30
	OPENBSD_3_9:1.30.0.4
	OPENBSD_3_9_BASE:1.30
	OPENBSD_3_8:1.30.0.2
	OPENBSD_3_8_BASE:1.30
	OPENBSD_3_7:1.28.0.4
	OPENBSD_3_7_BASE:1.28
	OPENBSD_3_6:1.28.0.2
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.25.0.4
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	OPENBSD_3_3:1.24.0.2
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.11.0.16
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.14
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.12
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.11.0.10
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.8
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.6
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.4
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.41
date	2016.08.26.04.19.28;	author guenther;	state Exp;
branches;
next	1.40;
commitid	sZf4KvR3fwHl3HXD;

1.40
date	2015.11.17.19.01.34;	author mmcc;	state Exp;
branches;
next	1.39;
commitid	RNKGm937BDNb5LTK;

1.39
date	2015.03.17.03.23.17;	author guenther;	state Exp;
branches;
next	1.38;
commitid	gv8qhyah1XKC6RDB;

1.38
date	2015.03.09.04.23.29;	author guenther;	state Exp;
branches;
next	1.37;
commitid	JMkpovMhu0rmLvCn;

1.37
date	2015.02.21.22.48.23;	author guenther;	state Exp;
branches
	1.37.2.1;
next	1.36;
commitid	AdteqX8nU06lUYnQ;

1.36
date	2015.02.12.23.44.57;	author guenther;	state Exp;
branches;
next	1.35;
commitid	lkvsxr9r9MdXqaQN;

1.35
date	2015.02.12.23.01.58;	author guenther;	state Exp;
branches;
next	1.34;
commitid	uwdbevnmMXPXCEVw;

1.34
date	2014.05.24.18.51.00;	author guenther;	state Exp;
branches
	1.34.4.1;
next	1.33;

1.33
date	2014.01.08.04.42.24;	author guenther;	state Exp;
branches;
next	1.32;

1.32
date	2012.12.04.02.24.45;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2009.10.27.23.59.22;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2005.08.05.08.30.10;	author djm;	state Exp;
branches;
next	1.29;

1.29
date	2005.04.21.21.47.18;	author beck;	state Exp;
branches;
next	1.28;

1.28
date	2004.06.11.03.10.43;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2004.06.11.03.05.01;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2004.04.16.22.50.23;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.03.09.06.43;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2002.11.29.20.15.43;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2002.10.16.19.20.02;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2002.10.16.17.43.10;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2002.07.17.18.33.27;	author naddy;	state Exp;
branches;
next	1.19;

1.19
date	2002.06.09.18.39.48;	author itojun;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.09.02.35.27;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.19.19.39.35;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.16.21.27.07;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.07.04.22.34.17;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.04.21.59.53;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.26.00.32.21;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.16.03.04.57;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	97.09.01.18.29.56;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.07.25.18.58.34;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.06.04.00.15.17;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.04.05.22.36.15;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.03.30.08.28.10;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.02.27.23.32.59;	author michaels;	state Exp;
branches;
next	1.5;

1.5
date	96.10.27.06.45.12;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.08.27.03.53.16;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.20.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.11.06.41.52;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.17;	author deraadt;	state Exp;
branches;
next	;

1.34.4.1
date	2015.04.30.19.30.57;	author guenther;	state Exp;
branches;
next	;
commitid	tPD1f2vGi43RT0WC;

1.37.2.1
date	2015.04.30.19.28.46;	author guenther;	state Exp;
branches;
next	;
commitid	pbBButXFqiIh89mX;


desc
@@


1.41
log
@pat_rep.h is only used by pat_rep.c; merge it into the .c file
<sys/time.h>, <errno.h> and <unistd.h> are unnecessary; sort #includes
@
text
@/*	$OpenBSD: pat_rep.c,v 1.40 2015/11/17 19:01:34 mmcc Exp $	*/
/*	$NetBSD: pat_rep.c,v 1.4 1995/03/21 09:07:33 cgd Exp $	*/

/*-
 * Copyright (c) 1992 Keith Muller.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Keith Muller of the University of California, San Diego.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "pax.h"
#include "extern.h"

/*
 * data structure for storing user supplied replacement strings (-s)
 */
typedef struct replace {
	char		*nstr;	/* the new string we will substitute with */
	regex_t		rcmp;	/* compiled regular expression used to match */
	int		flgs;	/* print conversions? global in operation?  */
#define	PRNT		0x1
#define	GLOB		0x2
	struct replace	*fow;	/* pointer to next pattern */
} REPLACE;

/*
 * routines to handle pattern matching, name modification (regular expression
 * substitution and interactive renames), and destination name modification for
 * copy (-rw). Both file name and link names are adjusted as required in these
 * routines.
 */

#define MAXSUBEXP	10		/* max subexpressions, DO NOT CHANGE */
static PATTERN *pathead = NULL;		/* file pattern match list head */
static PATTERN *pattail = NULL;		/* file pattern match list tail */
static REPLACE *rephead = NULL;		/* replacement string list head */
static REPLACE *reptail = NULL;		/* replacement string list tail */

static int rep_name(char *, size_t, int *, int);
static int tty_rename(ARCHD *);
static int fix_path(char *, int *, char *, int);
static int fn_match(char *, char *, char **);
static char * range_match(char *, int);
static int resub(regex_t *, regmatch_t *, char *, char *, char *, char *);

/*
 * rep_add()
 *	parses the -s replacement string; compiles the regular expression
 *	and stores the compiled value and it's replacement string together in
 *	replacement string list. Input to this function is of the form:
 *		/old/new/pg
 *	The first char in the string specifies the delimiter used by this
 *	replacement string. "Old" is a regular expression in "ed" format which
 *	is compiled by regcomp() and is applied to filenames. "new" is the
 *	substitution string; p and g are options flags for printing and global
 *	replacement (over the single filename)
 * Return:
 *	0 if a proper replacement string and regular expression was added to
 *	the list of replacement patterns; -1 otherwise.
 */

int
rep_add(char *str)
{
	char *pt1;
	char *pt2;
	REPLACE *rep;
	int res;
	char rebuf[BUFSIZ];

	/*
	 * throw out the bad parameters
	 */
	if ((str == NULL) || (*str == '\0')) {
		paxwarn(1, "Empty replacement string");
		return(-1);
	}

	/*
	 * first character in the string specifies what the delimiter is for
	 * this expression
	 */
	for (pt1 = str+1; *pt1; pt1++) {
		if (*pt1 == '\\') {
			pt1++;
			continue;
		}
		if (*pt1 == *str)
			break;
	}
	if (*pt1 == '\0') {
		paxwarn(1, "Invalid replacement string %s", str);
		return(-1);
	}

	/*
	 * allocate space for the node that handles this replacement pattern
	 * and split out the regular expression and try to compile it
	 */
	if ((rep = malloc(sizeof(REPLACE))) == NULL) {
		paxwarn(1, "Unable to allocate memory for replacement string");
		return(-1);
	}

	*pt1 = '\0';
	if ((res = regcomp(&(rep->rcmp), str+1, 0)) != 0) {
		regerror(res, &(rep->rcmp), rebuf, sizeof(rebuf));
		paxwarn(1, "%s while compiling regular expression %s", rebuf, str);
		free(rep);
		return(-1);
	}

	/*
	 * put the delimiter back in case we need an error message and
	 * locate the delimiter at the end of the replacement string
	 * we then point the node at the new substitution string
	 */
	*pt1++ = *str;
	for (pt2 = pt1; *pt2; pt2++) {
		if (*pt2 == '\\') {
			pt2++;
			continue;
		}
		if (*pt2 == *str)
			break;
	}
	if (*pt2 == '\0') {
		regfree(&(rep->rcmp));
		free(rep);
		paxwarn(1, "Invalid replacement string %s", str);
		return(-1);
	}

	*pt2 = '\0';
	rep->nstr = pt1;
	pt1 = pt2++;
	rep->flgs = 0;

	/*
	 * set the options if any
	 */
	while (*pt2 != '\0') {
		switch (*pt2) {
		case 'g':
		case 'G':
			rep->flgs  |= GLOB;
			break;
		case 'p':
		case 'P':
			rep->flgs  |= PRNT;
			break;
		default:
			regfree(&(rep->rcmp));
			free(rep);
			*pt1 = *str;
			paxwarn(1, "Invalid replacement string option %s", str);
			return(-1);
		}
		++pt2;
	}

	/*
	 * all done, link it in at the end
	 */
	rep->fow = NULL;
	if (rephead == NULL) {
		reptail = rephead = rep;
		return(0);
	}
	reptail->fow = rep;
	reptail = rep;
	return(0);
}

/*
 * pat_add()
 *	add a pattern match to the pattern match list. Pattern matches are used
 *	to select which archive members are extracted. (They appear as
 *	arguments to pax in the list and read modes). If no patterns are
 *	supplied to pax, all members in the archive will be selected (and the
 *	pattern match list is empty).
 * Return:
 *	0 if the pattern was added to the list, -1 otherwise
 */

int
pat_add(char *str, char *chdirname)
{
	PATTERN *pt;

	/*
	 * throw out the junk
	 */
	if ((str == NULL) || (*str == '\0')) {
		paxwarn(1, "Empty pattern string");
		return(-1);
	}

	/*
	 * allocate space for the pattern and store the pattern. the pattern is
	 * part of argv so do not bother to copy it, just point at it. Add the
	 * node to the end of the pattern list
	 */
	if ((pt = malloc(sizeof(PATTERN))) == NULL) {
		paxwarn(1, "Unable to allocate memory for pattern string");
		return(-1);
	}

	pt->pstr = str;
	pt->pend = NULL;
	pt->plen = strlen(str);
	pt->fow = NULL;
	pt->flgs = 0;
	pt->chdname = chdirname;

	if (pathead == NULL) {
		pattail = pathead = pt;
		return(0);
	}
	pattail->fow = pt;
	pattail = pt;
	return(0);
}

/*
 * pat_chk()
 *	complain if any the user supplied pattern did not result in a match to
 *	a selected archive member.
 */

void
pat_chk(void)
{
	PATTERN *pt;
	int wban = 0;

	/*
	 * walk down the list checking the flags to make sure MTCH was set,
	 * if not complain
	 */
	for (pt = pathead; pt != NULL; pt = pt->fow) {
		if (pt->flgs & MTCH)
			continue;
		if (!wban) {
			paxwarn(1, "WARNING! These patterns were not matched:");
			++wban;
		}
		(void)fprintf(stderr, "%s\n", pt->pstr);
	}
}

/*
 * pat_sel()
 *	the archive member which matches a pattern was selected. Mark the
 *	pattern as having selected an archive member. arcn->pat points at the
 *	pattern that was matched. arcn->pat is set in pat_match()
 *
 *	NOTE: When the -c option is used, we are called when there was no match
 *	by pat_match() (that means we did match before the inverted sense of
 *	the logic). Now this seems really strange at first, but with -c we
 *	need to keep track of those patterns that cause an archive member to NOT
 *	be selected (it found an archive member with a specified pattern)
 * Return:
 *	0 if the pattern pointed at by arcn->pat was tagged as creating a
 *	match, -1 otherwise.
 */

int
pat_sel(ARCHD *arcn)
{
	PATTERN *pt;
	PATTERN **ppt;
	size_t len;

	/*
	 * if no patterns just return
	 */
	if ((pathead == NULL) || ((pt = arcn->pat) == NULL))
		return(0);

	/*
	 * when we are NOT limited to a single match per pattern mark the
	 * pattern and return
	 */
	if (!nflag) {
		pt->flgs |= MTCH;
		return(0);
	}

	/*
	 * we reach this point only when we allow a single selected match per
	 * pattern, if the pattern matches a directory and we do not have -d
	 * (dflag) we are done with this pattern. We may also be handed a file
	 * in the subtree of a directory. in that case when we are operating
	 * with -d, this pattern was already selected and we are done
	 */
	if (pt->flgs & DIR_MTCH)
		return(0);

	if (!dflag && ((pt->pend != NULL) || (arcn->type == PAX_DIR))) {
		/*
		 * ok we matched a directory and we are allowing
		 * subtree matches but because of the -n only its children will
		 * match. This is tagged as a DIR_MTCH type.
		 * WATCH IT, the code assumes that pt->pend points
		 * into arcn->name and arcn->name has not been modified.
		 * If not we will have a big mess. Yup this is another kludge
		 */

		/*
		 * if this was a prefix match, remove trailing part of path
		 * so we can copy it. Future matches will be exact prefix match
		 */
		if (pt->pend != NULL)
			*pt->pend = '\0';

		if ((pt->pstr = strdup(arcn->name)) == NULL) {
			paxwarn(1, "Pattern select out of memory");
			if (pt->pend != NULL)
				*pt->pend = '/';
			pt->pend = NULL;
			return(-1);
		}

		/*
		 * put the trailing / back in the source string
		 */
		if (pt->pend != NULL) {
			*pt->pend = '/';
			pt->pend = NULL;
		}
		pt->plen = strlen(pt->pstr);

		/*
		 * strip off any trailing /, this should really never happen
		 */
		len = pt->plen - 1;
		if (*(pt->pstr + len) == '/') {
			*(pt->pstr + len) = '\0';
			pt->plen = len;
		}
		pt->flgs = DIR_MTCH | MTCH;
		arcn->pat = pt;
		return(0);
	}

	/*
	 * we are then done with this pattern, so we delete it from the list
	 * because it can never be used for another match.
	 * Seems kind of strange to do for a -c, but the pax spec is really
	 * vague on the interaction of -c, -n and -d. We assume that when -c
	 * and the pattern rejects a member (i.e. it matched it) it is done.
	 * In effect we place the order of the flags as having -c last.
	 */
	pt = pathead;
	ppt = &pathead;
	while ((pt != NULL) && (pt != arcn->pat)) {
		ppt = &(pt->fow);
		pt = pt->fow;
	}

	if (pt == NULL) {
		/*
		 * should never happen....
		 */
		paxwarn(1, "Pattern list inconsistent");
		return(-1);
	}
	*ppt = pt->fow;
	free(pt);
	arcn->pat = NULL;
	return(0);
}

/*
 * pat_match()
 *	see if this archive member matches any supplied pattern, if a match
 *	is found, arcn->pat is set to point at the potential pattern. Later if
 *	this archive member is "selected" we process and mark the pattern as
 *	one which matched a selected archive member (see pat_sel())
 * Return:
 *	0 if this archive member should be processed, 1 if it should be
 *	skipped and -1 if we are done with all patterns (and pax should quit
 *	looking for more members)
 */

int
pat_match(ARCHD *arcn)
{
	PATTERN *pt;

	arcn->pat = NULL;

	/*
	 * if there are no more patterns and we have -n (and not -c) we are
	 * done. otherwise with no patterns to match, matches all
	 */
	if (pathead == NULL) {
		if (nflag && !cflag)
			return(-1);
		return(0);
	}

	/*
	 * have to search down the list one at a time looking for a match.
	 */
	pt = pathead;
	while (pt != NULL) {
		/*
		 * check for a file name match unless we have DIR_MTCH set in
		 * this pattern then we want a prefix match
		 */
		if (pt->flgs & DIR_MTCH) {
			/*
			 * this pattern was matched before to a directory
			 * as we must have -n set for this (but not -d). We can
			 * only match CHILDREN of that directory so we must use
			 * an exact prefix match (no wildcards).
			 */
			if ((arcn->name[pt->plen] == '/') &&
			    (strncmp(pt->pstr, arcn->name, pt->plen) == 0))
				break;
		} else if (fn_match(pt->pstr, arcn->name, &pt->pend) == 0)
			break;
		pt = pt->fow;
	}

	/*
	 * return the result, remember that cflag (-c) inverts the sense of a
	 * match
	 */
	if (pt == NULL)
		return(cflag ? 0 : 1);

	/*
	 * we had a match, now when we invert the sense (-c) we reject this
	 * member. However we have to tag the pattern a being successful, (in a
	 * match, not in selecting a archive member) so we call pat_sel() here.
	 */
	arcn->pat = pt;
	if (!cflag)
		return(0);

	if (pat_sel(arcn) < 0)
		return(-1);
	arcn->pat = NULL;
	return(1);
}

/*
 * fn_match()
 * Return:
 *	0 if this archive member should be processed, 1 if it should be
 *	skipped and -1 if we are done with all patterns (and pax should quit
 *	looking for more members)
 *	Note: *pend may be changed to show where the prefix ends.
 */

static int
fn_match(char *pattern, char *string, char **pend)
{
	char c;
	char test;

	*pend = NULL;
	for (;;) {
		switch (c = *pattern++) {
		case '\0':
			/*
			 * Ok we found an exact match
			 */
			if (*string == '\0')
				return(0);

			/*
			 * Check if it is a prefix match
			 */
			if ((dflag == 1) || (*string != '/'))
				return(-1);

			/*
			 * It is a prefix match, remember where the trailing
			 * / is located
			 */
			*pend = string;
			return(0);
		case '?':
			if ((test = *string++) == '\0')
				return (-1);
			break;
		case '*':
			c = *pattern;
			/*
			 * Collapse multiple *'s.
			 */
			while (c == '*')
				c = *++pattern;

			/*
			 * Optimized hack for pattern with a * at the end
			 */
			if (c == '\0')
				return (0);

			/*
			 * General case, use recursion.
			 */
			while ((test = *string) != '\0') {
				if (!fn_match(pattern, string, pend))
					return (0);
				++string;
			}
			return (-1);
		case '[':
			/*
			 * range match
			 */
			if (((test = *string++) == '\0') ||
			    ((pattern = range_match(pattern, test)) == NULL))
				return (-1);
			break;
		case '\\':
		default:
			if (c != *string++)
				return (-1);
			break;
		}
	}
	/* NOTREACHED */
}

static char *
range_match(char *pattern, int test)
{
	char c;
	char c2;
	int negate;
	int ok = 0;

	if ((negate = (*pattern == '!')) != 0)
		++pattern;

	while ((c = *pattern++) != ']') {
		/*
		 * Illegal pattern
		 */
		if (c == '\0')
			return (NULL);

		if ((*pattern == '-') && ((c2 = pattern[1]) != '\0') &&
		    (c2 != ']')) {
			if ((c <= test) && (test <= c2))
				ok = 1;
			pattern += 2;
		} else if (c == test)
			ok = 1;
	}
	return (ok == negate ? NULL : pattern);
}

/*
 * has_dotdot()
 *	Returns true iff the supplied path contains a ".." component.
 */

int
has_dotdot(const char *path)
{
	const char *p = path;

	while ((p = strstr(p, "..")) != NULL) {
		if ((p == path || p[-1] == '/') &&
		    (p[2] == '/' || p[2] == '\0'))
			return (1);
		p += 2;
	}
	return (0);
}

/*
 * mod_name()
 *	modify a selected file name. first attempt to apply replacement string
 *	expressions, then apply interactive file rename. We apply replacement
 *	string expressions to both filenames and file links (if we didn't the
 *	links would point to the wrong place, and we could never be able to
 *	move an archive that has a file link in it). When we rename files
 *	interactively, we store that mapping (old name to user input name) so
 *	if we spot any file links to the old file name in the future, we will
 *	know exactly how to fix the file link.
 * Return:
 *	0 continue to  process file, 1 skip this file, -1 pax is finished
 */

int
mod_name(ARCHD *arcn)
{
	int res = 0;

	/*
	 * Strip off leading '/' if appropriate.
	 * Currently, this option is only set for the tar format.
	 */
	while (rmleadslash && arcn->name[0] == '/') {
		if (arcn->name[1] == '\0') {
			arcn->name[0] = '.';
		} else {
			(void)memmove(arcn->name, &arcn->name[1],
			    strlen(arcn->name));
			arcn->nlen--;
		}
		if (rmleadslash < 2) {
			rmleadslash = 2;
			paxwarn(0, "Removing leading / from absolute path names in the archive");
		}
	}
	while (rmleadslash && arcn->ln_name[0] == '/' &&
	    PAX_IS_HARDLINK(arcn->type)) {
		if (arcn->ln_name[1] == '\0') {
			arcn->ln_name[0] = '.';
		} else {
			(void)memmove(arcn->ln_name, &arcn->ln_name[1],
			    strlen(arcn->ln_name));
			arcn->ln_nlen--;
		}
		if (rmleadslash < 2) {
			rmleadslash = 2;
			paxwarn(0, "Removing leading / from absolute path names in the archive");
		}
	}
	if (rmleadslash) {
		const char *last = NULL;
		const char *p = arcn->name;

		while ((p = strstr(p, "..")) != NULL) {
			if ((p == arcn->name || p[-1] == '/') &&
			    (p[2] == '/' || p[2] == '\0'))
				last = p + 2;
			p += 2;
		}
		if (last != NULL) {
			last++;
			paxwarn(1, "Removing leading \"%.*s\"",
			    (int)(last - arcn->name), arcn->name);
			arcn->nlen = strlen(last);
			if (arcn->nlen > 0)
				memmove(arcn->name, last, arcn->nlen + 1);
			else {
				arcn->name[0] = '.';
				arcn->name[1] = '\0';
				arcn->nlen = 1;
			}
		}
	}

	/*
	 * IMPORTANT: We have a problem. what do we do with symlinks?
	 * Modifying a hard link name makes sense, as we know the file it
	 * points at should have been seen already in the archive (and if it
	 * wasn't seen because of a read error or a bad archive, we lose
	 * anyway). But there are no such requirements for symlinks. On one
	 * hand the symlink that refers to a file in the archive will have to
	 * be modified to so it will still work at its new location in the
	 * file system. On the other hand a symlink that points elsewhere (and
	 * should continue to do so) should not be modified. There is clearly
	 * no perfect solution here. So we handle them like hardlinks. Clearly
	 * a replacement made by the interactive rename mapping is very likely
	 * to be correct since it applies to a single file and is an exact
	 * match. The regular expression replacements are a little harder to
	 * justify though. We claim that the symlink name is only likely
	 * to be replaced when it points within the file tree being moved and
	 * in that case it should be modified. what we really need to do is to
	 * call an oracle here. :)
	 */
	if (rephead != NULL) {
		/*
		 * we have replacement strings, modify the name and the link
		 * name if any.
		 */
		if ((res = rep_name(arcn->name, sizeof(arcn->name), &(arcn->nlen), 1)) != 0)
			return(res);

		if (PAX_IS_LINK(arcn->type)) {
			if ((res = rep_name(arcn->ln_name,
			    sizeof(arcn->ln_name), &(arcn->ln_nlen), 0)) != 0)
				return(res);
		}
	}

	if (iflag) {
		/*
		 * perform interactive file rename, then map the link if any
		 */
		if ((res = tty_rename(arcn)) != 0)
			return(res);
		if (PAX_IS_LINK(arcn->type))
			sub_name(arcn->ln_name, &(arcn->ln_nlen),
			    sizeof(arcn->ln_name));
	}
	return(res);
}

/*
 * tty_rename()
 *	Prompt the user for a replacement file name. A "." keeps the old name,
 *	a empty line skips the file, and an EOF on reading the tty, will cause
 *	pax to stop processing and exit. Otherwise the file name input, replaces
 *	the old one.
 * Return:
 *	0 process this file, 1 skip this file, -1 we need to exit pax
 */

static int
tty_rename(ARCHD *arcn)
{
	char tmpname[PAXPATHLEN+2];
	int res;

	/*
	 * prompt user for the replacement name for a file, keep trying until
	 * we get some reasonable input. Archives may have more than one file
	 * on them with the same name (from updates etc). We print verbose info
	 * on the file so the user knows what is up.
	 */
	tty_prnt("\nATTENTION: %s interactive file rename operation.\n", argv0);

	for (;;) {
		ls_tty(arcn);
		tty_prnt("Input new name, or a \".\" to keep the old name, ");
		tty_prnt("or a \"return\" to skip this file.\n");
		tty_prnt("Input > ");
		if (tty_read(tmpname, sizeof(tmpname)) < 0)
			return(-1);
		if (strcmp(tmpname, "..") == 0) {
			tty_prnt("Try again, illegal file name: ..\n");
			continue;
		}
		if (strlen(tmpname) > PAXPATHLEN) {
			tty_prnt("Try again, file name too long\n");
			continue;
		}
		break;
	}

	/*
	 * empty file name, skips this file. a "." leaves it alone
	 */
	if (tmpname[0] == '\0') {
		tty_prnt("Skipping file.\n");
		return(1);
	}
	if ((tmpname[0] == '.') && (tmpname[1] == '\0')) {
		tty_prnt("Processing continues, name unchanged.\n");
		return(0);
	}

	/*
	 * ok the name changed. We may run into links that point at this
	 * file later. we have to remember where the user sent the file
	 * in order to repair any links.
	 */
	tty_prnt("Processing continues, name changed to: %s\n", tmpname);
	res = add_name(arcn->name, arcn->nlen, tmpname);
	arcn->nlen = strlcpy(arcn->name, tmpname, sizeof(arcn->name));
	if (arcn->nlen >= sizeof(arcn->name))
		arcn->nlen = sizeof(arcn->name) - 1; /* XXX truncate? */
	if (res < 0)
		return(-1);
	return(0);
}

/*
 * set_dest()
 *	fix up the file name and the link name (if any) so this file will land
 *	in the destination directory (used during copy() -rw).
 * Return:
 *	0 if ok, -1 if failure (name too long)
 */

int
set_dest(ARCHD *arcn, char *dest_dir, int dir_len)
{
	if (fix_path(arcn->name, &(arcn->nlen), dest_dir, dir_len) < 0)
		return(-1);

	/*
	 * It is really hard to deal with symlinks here, we cannot be sure
	 * if the name they point was moved (or will be moved). It is best to
	 * leave them alone.
	 */
	if (!PAX_IS_HARDLINK(arcn->type))
		return(0);

	if (fix_path(arcn->ln_name, &(arcn->ln_nlen), dest_dir, dir_len) < 0)
		return(-1);
	return(0);
}

/*
 * fix_path
 *	concatenate dir_name and or_name and store the result in or_name (if
 *	it fits). This is one ugly function.
 * Return:
 *	0 if ok, -1 if the final name is too long
 */

static int
fix_path(char *or_name, int *or_len, char *dir_name, int dir_len)
{
	char *src;
	char *dest;
	char *start;
	int len;

	/*
	 * we shift the or_name to the right enough to tack in the dir_name
	 * at the front. We make sure we have enough space for it all before
	 * we start. since dest always ends in a slash, we skip of or_name
	 * if it also starts with one.
	 */
	start = or_name;
	src = start + *or_len;
	dest = src + dir_len;
	if (*start == '/') {
		++start;
		--dest;
	}
	if ((len = dest - or_name) > PAXPATHLEN) {
		paxwarn(1, "File name %s/%s, too long", dir_name, start);
		return(-1);
	}
	*or_len = len;

	/*
	 * enough space, shift
	 */
	while (src >= start)
		*dest-- = *src--;
	src = dir_name + dir_len - 1;

	/*
	 * splice in the destination directory name
	 */
	while (src >= dir_name)
		*dest-- = *src--;

	*(or_name + len) = '\0';
	return(0);
}

/*
 * rep_name()
 *	walk down the list of replacement strings applying each one in order.
 *	when we find one with a successful substitution, we modify the name
 *	as specified. if required, we print the results. if the resulting name
 *	is empty, we will skip this archive member. We use the regexp(3)
 *	routines (regexp() ought to win a prize as having the most cryptic
 *	library function manual page).
 *	--Parameters--
 *	name is the file name we are going to apply the regular expressions to
 *	(and may be modified)
 *	nsize is the size of the name buffer.
 *	nlen is the length of this name (and is modified to hold the length of
 *	the final string).
 *	prnt is a flag that says whether to print the final result.
 * Return:
 *	0 if substitution was successful, 1 if we are to skip the file (the name
 *	ended up empty)
 */

static int
rep_name(char *name, size_t nsize, int *nlen, int prnt)
{
	REPLACE *pt;
	char *inpt;
	char *outpt;
	char *endpt;
	char *rpt;
	int found = 0;
	int res;
	regmatch_t pm[MAXSUBEXP];
	char nname[PAXPATHLEN+1];	/* final result of all replacements */
	char buf1[PAXPATHLEN+1];	/* where we work on the name */

	/*
	 * copy the name into buf1, where we will work on it. We need to keep
	 * the orig string around so we can print out the result of the final
	 * replacement. We build up the final result in nname. inpt points at
	 * the string we apply the regular expression to. prnt is used to
	 * suppress printing when we handle replacements on the link field
	 * (the user already saw that substitution go by)
	 */
	pt = rephead;
	(void)strlcpy(buf1, name, sizeof(buf1));
	inpt = buf1;
	outpt = nname;
	endpt = outpt + PAXPATHLEN;

	/*
	 * try each replacement string in order
	 */
	while (pt != NULL) {
		do {
			char *oinpt = inpt;
			/*
			 * check for a successful substitution, if not go to
			 * the next pattern, or cleanup if we were global
			 */
			if (regexec(&(pt->rcmp), inpt, MAXSUBEXP, pm, 0) != 0)
				break;

			/*
			 * ok we found one. We have three parts, the prefix
			 * which did not match, the section that did and the
			 * tail (that also did not match). Copy the prefix to
			 * the final output buffer (watching to make sure we
			 * do not create a string too long).
			 */
			found = 1;
			rpt = inpt + pm[0].rm_so;

			while ((inpt < rpt) && (outpt < endpt))
				*outpt++ = *inpt++;
			if (outpt == endpt)
				break;

			/*
			 * for the second part (which matched the regular
			 * expression) apply the substitution using the
			 * replacement string and place it the prefix in the
			 * final output. If we have problems, skip it.
			 */
			if ((res = resub(&(pt->rcmp),pm,pt->nstr,oinpt,outpt,endpt))
			    < 0) {
				if (prnt)
					paxwarn(1, "Replacement name error %s",
					    name);
				return(1);
			}
			outpt += res;

			/*
			 * we set up to look again starting at the first
			 * character in the tail (of the input string right
			 * after the last character matched by the regular
			 * expression (inpt always points at the first char in
			 * the string to process). If we are not doing a global
			 * substitution, we will use inpt to copy the tail to
			 * the final result. Make sure we do not overrun the
			 * output buffer
			 */
			inpt += pm[0].rm_eo - pm[0].rm_so;

			if ((outpt == endpt) || (*inpt == '\0'))
				break;

			/*
			 * if the user wants global we keep trying to
			 * substitute until it fails, then we are done.
			 */
		} while (pt->flgs & GLOB);

		if (found)
			break;

		/*
		 * a successful substitution did NOT occur, try the next one
		 */
		pt = pt->fow;
	}

	if (found) {
		/*
		 * we had a substitution, copy the last tail piece (if there is
		 * room) to the final result
		 */
		while ((outpt < endpt) && (*inpt != '\0'))
			*outpt++ = *inpt++;

		*outpt = '\0';
		if ((outpt == endpt) && (*inpt != '\0')) {
			if (prnt)
				paxwarn(1,"Replacement name too long %s >> %s",
				    name, nname);
			return(1);
		}

		/*
		 * inform the user of the result if wanted
		 */
		if (prnt && (pt->flgs & PRNT)) {
			if (*nname == '\0')
				(void)fprintf(stderr,"%s >> <empty string>\n",
				    name);
			else
				(void)fprintf(stderr,"%s >> %s\n", name, nname);
		}

		/*
		 * if empty inform the caller this file is to be skipped
		 * otherwise copy the new name over the orig name and return
		 */
		if (*nname == '\0')
			return(1);
		*nlen = strlcpy(name, nname, nsize);
	}
	return(0);
}

/*
 * resub()
 *	apply the replacement to the matched expression. expand out the old
 *	style ed(1) subexpression expansion.
 * Return:
 *	-1 if error, or the number of characters added to the destination.
 */

static int
resub(regex_t *rp, regmatch_t *pm, char *src, char *inpt, char *dest,
	char *destend)
{
	char *spt;
	char *dpt;
	char c;
	regmatch_t *pmpt;
	int len;
	int subexcnt;

	spt =  src;
	dpt = dest;
	subexcnt = rp->re_nsub;
	while ((dpt < destend) && ((c = *spt++) != '\0')) {
		/*
		 * see if we just have an ordinary replacement character
		 * or we refer to a subexpression.
		 */
		if (c == '&') {
			pmpt = pm;
		} else if ((c == '\\') && (*spt >= '0') && (*spt <= '9')) {
			/*
			 * make sure there is a subexpression as specified
			 */
			if ((len = *spt++ - '0') > subexcnt)
				return(-1);
			pmpt = pm + len;
		} else {
			/*
			 * Ordinary character, just copy it
			 */
			if ((c == '\\') && (*spt != '\0'))
				c = *spt++;
			*dpt++ = c;
			continue;
		}

		/*
		 * continue if the subexpression is bogus
		 */
		if ((pmpt->rm_so < 0) || (pmpt->rm_eo < 0) ||
		    ((len = pmpt->rm_eo - pmpt->rm_so) <= 0))
			continue;

		/*
		 * copy the subexpression to the destination.
		 * fail if we run out of space or the match string is damaged
		 */
		if (len > (destend - dpt))
			return (-1);
		strncpy(dpt, inpt + pmpt->rm_so, len);
		dpt += len;
	}
	return(dpt - dest);
}
@


1.40
log
@int -> size_t for a len field

ok guenther@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.39 2015/03/17 03:23:17 guenther Exp $	*/
a37 1
#include <sys/time.h>
d39 1
d41 1
d43 1
a43 4
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <regex.h>
a44 1
#include "pat_rep.h"
d46 12
@


1.39
log
@Add PAX_IS_{REG,HARDLINK,LINK} macros to simply many file type tests

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.38 2015/03/09 04:23:29 guenther Exp $	*/
d297 1
a297 1
	int len;
@


1.38
log
@Unrevert post-unlock:
* Prevent an archive from esacaping the current directory by itself:
  when extracting a symlink whose value is absolute or contains ".."
  components, just create a zero-length normal file (with additional
  tracking of the mode and hardlinks to the symlink) until everything
  else is extracted, then go back and replace it with the requested
  link (if it's still that zero-length placeholder).

* For tar without -P, if a path in the archive has any ".." components
  then strip everything up to and including the last of them (if
  it ends in ".." then it becomes ".")
  This mostly follows GNU tar's behavior, except for 'tar tf' and
  'tar xvf' we report the modified path that would be/was actually
  created instead of the raw path from the archive

  Above two fixes prompted by a report from Daniel Cegielka
  (daniel.cegielka (at) gmail.com)

* For directories whose times or mode will be fixed up in the
  clean-up pass, record their dev+ino and then use
  open(O_DIRECTORY)+fstat() to verify that we're updating the correct
  directory before using futimens() and fchmod().

* Correct buffer overflow in handling of pax extension headers,
  caught by the memcpy() overlap check.


previously ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.36 2015/02/12 23:44:57 guenther Exp $	*/
d641 1
a641 1
	    (arcn->type == PAX_HLK || arcn->type == PAX_HRG)) {
d706 5
a710 4
		if (((arcn->type == PAX_SLK) || (arcn->type == PAX_HLK) ||
		    (arcn->type == PAX_HRG)) &&
		    ((res = rep_name(arcn->ln_name, sizeof(arcn->ln_name), &(arcn->ln_nlen), 0)) != 0))
			return(res);
d719 3
a721 3
		if ((arcn->type == PAX_SLK) || (arcn->type == PAX_HLK) ||
		    (arcn->type == PAX_HRG))
			sub_name(arcn->ln_name, &(arcn->ln_nlen), sizeof(arcn->ln_name));
d814 1
a814 1
	if ((arcn->type != PAX_HLK) && (arcn->type != PAX_HRG))
@


1.37
log
@Recent changes haven't been completely stable, so revert for the 5.7 release

requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.34 2014/05/24 18:51:00 guenther Exp $	*/
d586 19
d652 24
@


1.37.2.1
log
@Backport trunk commit of 2015/03/09 04:23:29:
tar/pax/cpio had multiple issues:
 * extracting a malicious archive could create files outside of the
   current directory without using pre-existing symlinks to 'escape',
   and could change the timestamps and modes on preexisting files
 * tar without -P would permit extraction of paths with ".." components
 * there was a buffer overflow in the handling of pax extension headers
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.37 2015/02/21 22:48:23 guenther Exp $	*/
a585 19
 * has_dotdot()
 *	Returns true iff the supplied path contains a ".." component.
 */

int
has_dotdot(const char *path)
{
	const char *p = path;

	while ((p = strstr(p, "..")) != NULL) {
		if ((p == path || p[-1] == '/') &&
		    (p[2] == '/' || p[2] == '\0'))
			return (1);
		p += 2;
	}
	return (0);
}

/*
a632 24
		}
	}
	if (rmleadslash) {
		const char *last = NULL;
		const char *p = arcn->name;

		while ((p = strstr(p, "..")) != NULL) {
			if ((p == arcn->name || p[-1] == '/') &&
			    (p[2] == '/' || p[2] == '\0'))
				last = p + 2;
			p += 2;
		}
		if (last != NULL) {
			last++;
			paxwarn(1, "Removing leading \"%.*s\"",
			    (int)(last - arcn->name), arcn->name);
			arcn->nlen = strlen(last);
			if (arcn->nlen > 0)
				memmove(arcn->name, last, arcn->nlen + 1);
			else {
				arcn->name[0] = '.';
				arcn->name[1] = '\0';
				arcn->nlen = 1;
			}
@


1.36
log
@Prevent an archive from esacaping the current directory by itself:
when extracting a symlink whose value is absolute or contains ".."
components, just create a zero-length normal file (with additional
tracking of the mode and hardlinks to the symlink) until everything
else is extracted, then go back and replace it with the requested
link (if its still that zero-length placeholder).

This and previous symlink and ".." path fixes prompted by a report
from Daniel Cegielka (daniel.cegielka (at) gmail.com)

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.35 2015/02/12 23:01:58 guenther Exp $	*/
a585 19
 * has_dotdot()
 *	Returns true iff the supplied path contains a ".." component.
 */

int
has_dotdot(const char *path)
{
	const char *p = path;

	while ((p = strstr(p, "..")) != NULL) {
		if ((p == path || p[-1] == '/') &&
		    (p[2] == '/' || p[2] == '\0'))
			return (1);
		p += 2;
	}
	return (0);
}

/*
a632 24
		}
	}
	if (rmleadslash) {
		const char *last = NULL;
		const char *p = arcn->name;

		while ((p = strstr(p, "..")) != NULL) {
			if ((p == arcn->name || p[-1] == '/') &&
			    (p[2] == '/' || p[2] == '\0'))
				last = p + 2;
			p += 2;
		}
		if (last != NULL) {
			last++;
			paxwarn(1, "Removing leading \"%.*s\"",
			    (int)(last - arcn->name), arcn->name);
			arcn->nlen = strlen(last);
			if (arcn->nlen > 0)
				memmove(arcn->name, last, arcn->nlen + 1);
			else {
				arcn->name[0] = '.';
				arcn->name[1] = '\0';
				arcn->nlen = 1;
			}
@


1.35
log
@For tar without -P, if a path in the archive has any ".." components then
strip everything up to and including the last of them (if it ends in ".."
then it becomes ".")
This mostly follows GNU tar's behavior, except for 'tar tf' and 'tar xvf'
we report the modified path that was actually created instead of the raw
path from the archive

ok w/tweak millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.34 2014/05/24 18:51:00 guenther Exp $	*/
d583 19
@


1.34
log
@Delete pointless casts: free() return value to (void), free()'s
argument to (char *), and malloc/calloc's return value to the type
of the variable it's being assigned to.
Convert the one calloc() where the zeroing isn't needed to a reallocarray().

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.33 2014/01/08 04:42:24 guenther Exp $	*/
d633 24
@


1.34.4.1
log
@Backport trunk commit of 2015/03/09 04:23:29:
tar/pax/cpio had multiple issues:
 * extracting a malicious archive could create files outside of the
   current directory without using pre-existing symlinks to 'escape',
   and could change the timestamps and modes on preexisting files
 * tar without -P would permit extraction of paths with ".." components
 * there was a buffer overflow in the handling of pax extension headers
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.34 2014/05/24 18:51:00 guenther Exp $	*/
a585 19
 * has_dotdot()
 *	Returns true iff the supplied path contains a ".." component.
 */

int
has_dotdot(const char *path)
{
	const char *p = path;

	while ((p = strstr(p, "..")) != NULL) {
		if ((p == path || p[-1] == '/') &&
		    (p[2] == '/' || p[2] == '\0'))
			return (1);
		p += 2;
	}
	return (0);
}

/*
a632 24
		}
	}
	if (rmleadslash) {
		const char *last = NULL;
		const char *p = arcn->name;

		while ((p = strstr(p, "..")) != NULL) {
			if ((p == arcn->name || p[-1] == '/') &&
			    (p[2] == '/' || p[2] == '\0'))
				last = p + 2;
			p += 2;
		}
		if (last != NULL) {
			last++;
			paxwarn(1, "Removing leading \"%.*s\"",
			    (int)(last - arcn->name), arcn->name);
			arcn->nlen = strlen(last);
			if (arcn->nlen > 0)
				memmove(arcn->name, last, arcn->nlen + 1);
			else {
				arcn->name[0] = '.';
				arcn->name[1] = '\0';
				arcn->nlen = 1;
			}
@


1.33
log
@Rename arguments to avoid shadowing global variables

ok fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.32 2012/12/04 02:24:45 deraadt Exp $	*/
d124 1
a124 1
	if ((rep = (REPLACE *)malloc(sizeof(REPLACE))) == NULL) {
d133 1
a133 1
		(void)free((char *)rep);
d153 1
a153 1
		(void)free((char *)rep);
d178 1
a178 1
			(void)free((char *)rep);
d228 1
a228 1
	if ((pt = (PATTERN *)malloc(sizeof(PATTERN))) == NULL) {
d394 1
a394 1
	(void)free((char *)pt);
@


1.32
log
@remove some unnecessary sys/param.h inclusions
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.31 2009/10/27 23:59:22 deraadt Exp $	*/
d211 1
a211 1
pat_add(char *str, char *chdname)
d238 1
a238 1
	pt->chdname = chdname;
@


1.31
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.30 2005/08/05 08:30:10 djm Exp $	*/
a39 1
#include <sys/param.h>
@


1.30
log
@strip multiple leading slashes from absolute paths; ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.29 2005/04/21 21:47:18 beck Exp $	*/
a35 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)pat_rep.c	8.2 (Berkeley) 4/18/94";
#else
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.29 2005/04/21 21:47:18 beck Exp $";
#endif
#endif /* not lint */
@


1.29
log
@fix strlcpy abuse in pax - this commit turns potential overflows into
potential non-spec compliance - the use of these fields as strings needs
to be revisited more thouroughly.
ok millert@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.28 2004/06/11 03:10:43 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.28 2004/06/11 03:10:43 millert Exp $";
d617 1
a617 1
	if (rmleadslash && arcn->name[0] == '/') {
d630 1
a630 1
	if (rmleadslash && arcn->ln_name[0] == '/' &&
@


1.28
log
@Correct the code that identifies bogus regexps; Jared Yanovich
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.27 2004/06/11 03:05:01 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.27 2004/06/11 03:05:01 millert Exp $";
d753 2
@


1.27
log
@Fix backref substitution in -s mode.  Problem found and fix verified
by Jared Yanovich.
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.26 2004/04/16 22:50:23 deraadt Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.26 2004/04/16 22:50:23 deraadt Exp $";
d124 1
a124 1
	if (pt1 == NULL) {
d160 1
a160 1
	if (pt2 == NULL) {
@


1.26
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.25 2003/06/02 23:32:08 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.25 2003/06/02 23:32:08 millert Exp $";
d890 1
d919 1
a919 1
			if ((res = resub(&(pt->rcmp),pm,pt->nstr,inpt,outpt,endpt))
@


1.25
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.24 2003/02/03 09:06:43 jmc Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.24 2003/02/03 09:06:43 jmc Exp $";
d176 1
a176 1
		switch(*pt2) {
@


1.24
log
@typos;
from netbsd(svs+pr@@grep.ru)
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.23 2002/11/29 20:15:43 deraadt Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.23 2002/11/29 20:15:43 deraadt Exp $";
@


1.23
log
@inconsistant spelling; torh@@bogus.net
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.22 2002/10/16 19:20:02 millert Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.22 2002/10/16 19:20:02 millert Exp $";
d297 2
a298 2
 *	the logic). Now this seems really strange at first, but with -c  we
 *	need to keep track of those patterns that cause a archive member to NOT
d388 1
a388 1
	 * vague on the interaction of -c -n and -d. We assume that when -c
@


1.22
log
@sprinkle const; mostly from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.21 2002/10/16 17:43:10 millert Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: pat_rep.c,v 1.21 2002/10/16 17:43:10 millert Exp $";
d403 1
a403 1
		paxwarn(1, "Pattern list inconsistant");
@


1.21
log
@kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.20 2002/07/17 18:33:27 naddy Exp $	*/
d43 1
a43 1
static char sccsid[] = "@@(#)pat_rep.c	8.2 (Berkeley) 4/18/94";
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.20 2002/07/17 18:33:27 naddy Exp $";
@


1.20
log
@Pass the size of the name buffer to rep_name() for use with strlcpy().
Fixes truncation of replacement string.
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.19 2002/06/09 18:39:48 itojun Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.19 2002/06/09 18:39:48 itojun Exp $";
d77 1
a77 1
static int tty_rename(register ARCHD *);
d79 2
a80 2
static int fn_match(register char *, register char *, char **);
static char * range_match(register char *, register int);
d100 1
a100 1
rep_add(register char *str)
d102 4
a105 4
	register char *pt1;
	register char *pt2;
	register REPLACE *rep;
	register int res;
d226 1
a226 1
	register PATTERN *pt;
d271 2
a272 2
	register PATTERN *pt;
	register int wban = 0;
d306 1
a306 1
pat_sel(register ARCHD *arcn)
d308 3
a310 3
	register PATTERN *pt;
	register PATTERN **ppt;
	register int len;
d425 1
a425 1
pat_match(register ARCHD *arcn)
d427 1
a427 1
	register PATTERN *pt;
d497 1
a497 1
fn_match(register char *pattern, register char *string, char **pend)
d499 1
a499 1
	register char c;
d570 1
a570 1
range_match(register char *pattern, register int test)
d572 2
a573 2
	register char c;
	register char c2;
d613 1
a613 1
mod_name(register ARCHD *arcn)
d615 1
a615 1
	register int res = 0;
d706 1
a706 1
tty_rename(register ARCHD *arcn)
d771 1
a771 1
set_dest(register ARCHD *arcn, char *dest_dir, int dir_len)
d798 1
a798 1
fix_path( char *or_name, int *or_len, char *dir_name, int dir_len)
d800 3
a802 3
	register char *src;
	register char *dest;
	register char *start;
d864 7
a870 7
	register REPLACE *pt;
	register char *inpt;
	register char *outpt;
	register char *endpt;
	register char *rpt;
	register int found = 0;
	register int res;
d1008 2
a1009 2
resub(regex_t *rp, register regmatch_t *pm, char *src, char *inpt, char *dest,
	register char *destend)
d1011 5
a1015 5
	register char *spt;
	register char *dpt;
	register char c;
	register regmatch_t *pmpt;
	register int len;
@


1.19
log
@revert one of wrong strlcpy() change
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.18 2002/06/09 02:35:27 itojun Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.18 2002/06/09 02:35:27 itojun Exp $";
d76 1
a76 1
static int rep_name(char *, int *, int);
d673 1
a673 1
		if ((res = rep_name(arcn->name, &(arcn->nlen), 1)) != 0)
d678 1
a678 1
		    ((res = rep_name(arcn->ln_name, &(arcn->ln_nlen), 0)) != 0))
d852 1
d862 1
a862 1
rep_name(char *name, int *nlen, int prnt)
d994 1
a994 1
		*nlen = strlcpy(name, nname, *nlen);
@


1.18
log
@strlcpy fix, PR 2727
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.17 2002/02/19 19:39:35 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.17 2002/02/19 19:39:35 millert Exp $";
d993 1
a993 1
		*nlen = strlcpy(name, nname, sizeof(name));
@


1.17
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.16 2002/02/16 21:27:07 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.16 2002/02/16 21:27:07 millert Exp $";
d883 1
a883 1
	(void)strcpy(buf1, name);
d993 1
a993 1
		*nlen = strlcpy(name, nname, sizeof(nname));
@


1.16
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.15 2001/07/04 22:34:17 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.15 2001/07/04 22:34:17 millert Exp $";
a98 1
#ifdef __STDC__
a100 5
#else
int
rep_add(str)
	register char *str;
#endif
a222 1
#ifdef __STDC__
a224 6
#else
int
pat_add(str, chdname)
	char *str;
	char *chdname;
#endif
a267 1
#ifdef __STDC__
a269 4
#else
void
pat_chk()
#endif
a304 1
#ifdef __STDC__
a306 5
#else
int
pat_sel(arcn)
	register ARCHD *arcn;
#endif
a423 1
#ifdef __STDC__
a425 5
#else
int
pat_match(arcn)
	register ARCHD *arcn;
#endif
a495 1
#ifdef __STDC__
a497 7
#else
static int
fn_match(pattern, string, pend)
	register char *pattern;
	register char *string;
	char **pend;
#endif
a568 1
#ifdef __STDC__
a570 6
#else
static char *
range_match(pattern, test)
	register char *pattern;
	register int test;
#endif
a611 1
#ifdef __STDC__
a613 5
#else
int
mod_name(arcn)
	register ARCHD *arcn;
#endif
a704 1
#ifdef __STDC__
a706 5
#else
static int
tty_rename(arcn)
	register ARCHD *arcn;
#endif
a769 1
#ifdef __STDC__
a771 7
#else
int
set_dest(arcn, dest_dir, dir_len)
	register ARCHD *arcn;
	char *dest_dir;
	int dir_len;
#endif
a796 1
#ifdef __STDC__
a798 8
#else
static int
fix_path(or_name, or_len, dir_name, dir_len)
	char *or_name;
	int *or_len;
	char *dir_name;
	int dir_len;
#endif
a859 1
#ifdef __STDC__
a861 7
#else
static int
rep_name(name, nlen, prnt)
	char *name;
	int *nlen;
	int prnt;
#endif
a1005 1
#ifdef __STDC__
a1008 10
#else
static int
resub(rp, pm, src, inpt, dest, destend)
	regex_t *rp;
	register regmatch_t *pm;
	char *src;
	char *inpt;
	char *dest;
	register char *destend;
#endif
@


1.15
log
@Eat backslashes in regex's so things like:
-s '/\/bin\/cat/\/bin\/dog/'
work.  This means we have to be a bit more clever in finding the pattern
delimeters (ie: not strchr).
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.13 2001/05/26 00:32:21 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.13 2001/05/26 00:32:21 millert Exp $";
d76 6
a81 6
static int rep_name __P((char *, int *, int));
static int tty_rename __P((register ARCHD *));
static int fix_path __P((char *, int *, char *, int));
static int fn_match __P((register char *, register char *, char **));
static char * range_match __P((register char *, register int));
static int resub __P((regex_t *, regmatch_t *, char *, char *, char *, char *));
@


1.14
log
@Fix -s option, which never worked.  We need to pass in the input string
to resub() so we can copy the non-matching portion of the string to the
destination.  Closes PR #1889
@
text
@d126 9
a134 1
	if ((pt1 = strchr(str+1, *str)) == NULL) {
d162 9
a170 1
	if ((pt2 = strchr(pt1, *str)) == NULL) {
d1131 1
a1131 1
			if ((c == '\\') && ((*spt == '\\') || (*spt == '&')))
@


1.13
log
@Get rid of NET2_FTS and NET2_REGEX #ifdefs since they are useless.
Change NET2_STAT into LONG_OFF_T for portability to systems with
a 32bit off_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.12 2001/05/16 03:04:57 mickey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.12 2001/05/16 03:04:57 mickey Exp $";
d81 1
a81 1
static int resub __P((regex_t *, regmatch_t *, char *, char *, char *));
d987 1
a987 1
			if ((res = resub(&(pt->rcmp),pm,pt->nstr,outpt,endpt))
d1074 1
a1074 1
resub(regex_t *rp, register regmatch_t *pm, char *src, char *dest,
d1078 1
a1078 1
resub(rp, pm, src, dest, destend)
d1082 1
d1134 1
a1134 1
		strncpy(dpt, src + pmpt->rm_so, len);
@


1.12
log
@use proper str*cpy functions instead of home grown one, spaces; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.11 1997/09/01 18:29:56 deraadt Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.11 1997/09/01 18:29:56 deraadt Exp $";
a57 3
#ifdef NET2_REGEX
#include <regexp.h>
#else
a58 1
#endif
a80 3
#ifdef NET2_REGEX
static int resub __P((regexp *, char *, char *, register char *));
#else
a81 1
#endif
a110 1
#	ifndef NET2_REGEX
a112 1
#	endif
a140 3
#	ifdef NET2_REGEX
	if ((rep->rcmp = regcomp(str+1)) == NULL) {
#	else
a143 1
#	endif
a154 3
#		ifdef NET2_REGEX
		(void)free((char *)rep->rcmp);
#		else
a155 1
#		endif
a179 3
#			ifdef NET2_REGEX
			(void)free((char *)rep->rcmp);
#			else
a180 1
#			endif
a935 1
#	ifndef NET2_REGEX
a936 1
#	endif
a962 3
#			ifdef NET2_REGEX
			if (regexec(pt->rcmp, inpt) == 0)
#			else
a963 1
#			endif
a973 3
#			ifdef NET2_REGEX
			rpt = pt->rcmp->startp[0];
#			else
a974 1
#			endif
a986 3
#			ifdef NET2_REGEX
			if ((res = resub(pt->rcmp,pt->nstr,outpt,endpt)) < 0) {
#			else
a988 1
#			endif
a1005 3
#			ifdef NET2_REGEX
			inpt = pt->rcmp->endp[0];
#			else
a1006 1
#			endif
a1063 58
#ifdef NET2_REGEX
/*
 * resub()
 *	apply the replacement to the matched expression. expand out the old
 *	style ed(1) subexpression expansion.
 * Return:
 *	-1 if error, or the number of characters added to the destination.
 */

#ifdef __STDC__
static int
resub(regexp *prog, char *src, char *dest, register char *destend)
#else
static int
resub(prog, src, dest, destend)
	regexp *prog;
	char *src;
	char *dest;
	register char *destend;
#endif
{
	register char *spt;
	register char *dpt;
	register char c;
	register int no;
	register int len;

	spt = src;
	dpt = dest;
	while ((dpt < destend) && ((c = *spt++) != '\0')) {
		if (c == '&')
			no = 0;
		else if ((c == '\\') && (*spt >= '0') && (*spt <= '9'))
			no = *spt++ - '0';
		else {
			if ((c == '\\') && ((*spt == '\\') || (*spt == '&')))
				c = *spt++;
			*dpt++ = c;
			continue;
		}
		if ((prog->startp[no] == NULL) || (prog->endp[no] == NULL) ||
		    ((len = prog->endp[no] - prog->startp[no]) <= 0))
			continue;

		/*
		 * copy the subexpression to the destination.
		 * fail if we run out of space or the match string is damaged
		 */
		if (len > (destend - dpt))
			return (-1);
		strncpy(dpt, prog->startp[no], len);
		dpt += len;
	}
	return(dpt - dest);
}

#else

a1137 1
#endif
@


1.11
log
@i am bored enough to fix terminal space/tab uglies
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.10 1997/07/25 18:58:34 mickey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.10 1997/07/25 18:58:34 mickey Exp $";
d96 1
a96 1
 *		/old/new/pg 
d359 1
a359 1
	 * pattern, if the pattern matches a directory and we do not have -d 
d449 1
a449 1
 *	0 if this archive member should be processed, 1 if it should be 
d526 1
a526 1
 *	0 if this archive member should be processed, 1 if it should be 
d575 1
a575 1
			 * Collapse multiple *'s. 
d660 1
a660 1
 *	0 continue to  process file, 1 skip this file, -1 pax is finished 
d819 1
a819 2
	arcn->nlen = l_strncpy(arcn->name, tmpname, sizeof(arcn->name) - 1);
	arcn->name[arcn->nlen] = '\0';
d905 1
a905 1
	 * enough space, shift 
d1099 1
a1099 2
		*nlen = l_strncpy(name, nname, PAXPATHLEN + 1);
		name[PAXPATHLEN] = '\0';
d1108 1
a1108 1
 * 	style ed(1) subexpression expansion.
d1139 3
a1141 3
 			if ((c == '\\') && ((*spt == '\\') || (*spt == '&')))
 				c = *spt++;
 			*dpt++ = c;
d1144 1
a1144 1
 		if ((prog->startp[no] == NULL) || (prog->endp[no] == NULL) ||
d1153 2
a1154 3
			len = destend - dpt;
		if (l_strncpy(dpt, prog->startp[no], len) != len)
			return(-1);
d1165 1
a1165 1
 * 	style ed(1) subexpression expansion.
d1209 1
a1209 1
 			/*
d1212 3
a1214 3
 			if ((c == '\\') && ((*spt == '\\') || (*spt == '&')))
 				c = *spt++;
 			*dpt++ = c;
d1230 2
a1231 3
			len = destend - dpt;
		if (l_strncpy(dpt, src + pmpt->rm_so, len) != len)
			return(-1);
@


1.10
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.9 1997/06/04 00:15:17 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.9 1997/06/04 00:15:17 millert Exp $";
d383 1
a383 1
			
d408 1
a408 1
		} 
d1058 1
a1058 1
		if (found) 
d1081 1
a1081 1
		} 
d1090 1
a1090 1
			else 
d1098 1
a1098 1
		if (*nname == '\0') 
@


1.9
log
@Fix usage of l_strncpy() (noticed by Theo) and make l_strncpy()
pad with NULL's like strncpy(3).  This eliminates the need for
zf_strncpy(); ocurrences of zf_strncpy() have been changed to l_strncpy().
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.8 1997/04/05 22:36:15 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.8 1997/04/05 22:36:15 millert Exp $";
d107 1
a107 1
#if __STDC__
d235 1
a235 1
#if __STDC__
d287 1
a287 1
#if __STDC__
d329 1
a329 1
#if __STDC__
d454 1
a454 1
#if __STDC__
d532 1
a532 1
#if __STDC__
d663 1
a663 1
#if __STDC__
d762 1
a762 1
#if __STDC__
d834 1
a834 1
#if __STDC__
d869 1
a869 1
#if __STDC__
d941 1
a941 1
#if __STDC__
d1115 1
a1115 1
#if __STDC__
d1173 1
a1173 1
#if __STDC__
@


1.8
log
@Strip leading '/' of pathnames (only in tar mode).  -S option turns
this off like GNU tar.
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.7 1997/03/30 08:28:10 millert Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.7 1997/03/30 08:28:10 millert Exp $";
d747 1
a747 1
			sub_name(arcn->ln_name, &(arcn->ln_nlen));
d819 2
a820 2
	arcn->nlen = l_strncpy(arcn->name, tmpname, PAXPATHLEN+1);
	arcn->name[PAXPATHLEN] = '\0';
@


1.7
log
@Adjust the input string by the right amount if the pattern wasn't at the
beginning.  From NetBSD (mycroft).
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.6 1997/02/27 23:32:59 michaels Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.6 1997/02/27 23:32:59 michaels Exp $";
d673 32
@


1.6
log
@fix pr system/124, reported by Janjaap van Velthooven (janjaap@@stack.nl).
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.4 1996/08/27 03:53:16 tholo Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.4 1996/08/27 03:53:16 tholo Exp $";
d1014 1
a1014 1
			inpt += pm[0].rm_eo;
@


1.5
log
@Initial cut -C support in paxtar.  Exceeds GNU tar by quite a bit.
General pax still seems to work ok.
@
text
@d237 1
a237 1
pat_add(char *str, char *chdnam)
d240 1
a240 1
pat_add(str, chdnam)
d242 1
a242 1
	char *chdnam;
d270 2
a271 9
	if (chdnam != (char *)NULL) {
		pt->chdnam = strdup(chdnam);
		if (pt->chdnam == (char *)NULL) {
			paxwarn(1,
			    "Unable to allocate memory for pattern string");
			return(-1);
		}
	} else
		pt->chdnam = (char *)NULL;
a436 2
	if (pt->chdnam != (char *)NULL)
		(void)free(pt->chdnam);
@


1.4
log
@Fix uses of strncpy
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.3 1996/06/23 14:20:38 deraadt Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.3 1996/06/23 14:20:38 deraadt Exp $";
d57 1
d237 1
a237 1
pat_add(char *str)
d240 1
a240 1
pat_add(str)
d242 1
d270 9
d444 2
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: pat_rep.c,v 1.4 1995/03/21 09:07:33 cgd Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pat_rep.c,v 1.4 1995/03/21 09:07:33 cgd Exp $";
d784 1
d1065 1
@


1.2
log
@Correct compile warnings
Rename warn() to paxwarn() so <err.h> can be included

Remove #include <ctype.h> when not needed; from FreeBSD
@
text
@d1 1
d45 1
a45 1
static char rcsid[] = "$NetBSD: pat_rep.c,v 1.4 1995/03/21 09:07:33 cgd Exp $";
@


1.1
log
@Initial revision
@
text
@a52 1
#include <ctype.h>
d126 1
a126 1
		warn(1, "Empty replacement string");
d135 1
a135 1
		warn(1, "Invalid replacement string %s", str);
d144 1
a144 1
		warn(1, "Unable to allocate memory for replacement string");
d154 1
a154 1
		warn(1, "%s while compiling regular expression %s", rebuf, str);
d173 1
a173 1
		warn(1, "Invalid replacement string %s", str);
d203 1
a203 1
			warn(1, "Invalid replacement string option %s", str);
d248 1
a248 1
		warn(1, "Empty pattern string");
d258 1
a258 1
		warn(1, "Unable to allocate memory for pattern string");
d301 1
a301 1
			warn(1, "WARNING! These patterns were not matched:");
d380 1
a380 1
			warn(1, "Pattern select out of memory");
d428 1
a428 1
		warn(1, "Pattern list inconsistant");
d623 1
a623 1
	if (negate = (*pattern == '!'))
d862 1
a862 1
		warn(1, "File name %s/%s, too long", dir_name, start);
d989 1
a989 1
					warn(1, "Replacement name error %s",
d1040 1
a1040 1
				warn(1,"Replacement name too long %s >> %s",
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
