head	1.24;
access;
symbols
	OPENBSD_6_2:1.24.0.4
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.23.0.12
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.8
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.4
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.12
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.10
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.8
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.6
	OPENBSD_5_0:1.21.0.4
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.18.0.4
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.6
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.14.0.14
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.12
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.10
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.4
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.6
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.24
date	2017.08.16.20.10.58;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	9G8QnNtN10tt2CUq;

1.23
date	2015.01.16.15.30.10;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	Kb303Wy5QnBPy5q8;

1.22
date	2014.02.23.18.13.27;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2010.09.03.10.00.40;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2010.09.03.09.53.20;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2010.07.22.08.09.29;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.08.17.15.09;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2009.01.22.17.52.19;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.31.19.19.14;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.29.15.04.59;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.22.12.01.41;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.12.20.12.35;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.14.02.57.27;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.13.14.00.15;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.18.06.55.08;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.17.18.15.13;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.09.23.10.43.07;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.04.02.45.13;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.12.15.01.20.21;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.11.28.03.20.33;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.09.14.22.13.47;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	97.08.19.06.36.30;	author denny;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.09;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.13;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Explicitly say that expr(1) handles decimal integers only, as mandated
by POSIX and as implemented in our utility; triggered by a question from
Alessandro DE LAURENZIS <just22 at atlantide dot t28 dot net> on misc@@.
OK millert@@
@
text
@.\"	$OpenBSD: expr.1,v 1.23 2015/01/16 15:30:10 schwarze Exp $
.\"	$NetBSD: expr.1,v 1.9 1995/04/28 23:27:13 jtc Exp $
.\"
.\" Written by J.T. Conklin <jtc@@netbsd.org>.
.\" Public domain.
.\"
.Dd $Mdocdate: January 16 2015 $
.Dt EXPR 1
.Os
.Sh NAME
.Nm expr
.Nd evaluate expression
.Sh SYNOPSIS
.Nm expr
.Ar expression
.Sh DESCRIPTION
The
.Nm
utility evaluates
.Ar expression
and writes the result on standard output.
All operators are separate arguments to the
.Nm
utility.
Characters special to the command interpreter must be escaped.
.Pp
Operators are listed below in order of increasing precedence.
Operators with equal precedence are grouped within { } symbols.
.Bl -tag -width indent
.It Ar expr1 | expr2
Returns the evaluation of
.Ar expr1
if it is neither an empty string nor zero;
otherwise, returns the evaluation of
.Ar expr2 .
.It Ar expr1 Li & Ar expr2
Returns the evaluation of
.Ar expr1
if neither expression evaluates to an empty string or zero;
otherwise, returns zero.
.It Ar expr1 Li "{=, >, >=, <, <=, !=}" Ar expr2
Returns the results of integer comparison if both arguments are
decimal integers; otherwise, returns the results of string comparison
using the locale-specific collation sequence.
The result of each comparison is 1 if the specified relation is true,
or 0 if the relation is false.
.It Ar expr1 Li "{+, -}" Ar expr2
Returns the results of addition or subtraction of decimal integer-valued
arguments.
.It Ar expr1 Li "{*, /, %}" Ar expr2
Returns the results of multiplication, integer division, or remainder of
decimal integer-valued arguments.
.It Ar expr1 Li \&: Ar expr2
The
.Ql \&:
operator matches
.Ar expr1
against
.Ar expr2 ,
which must be a basic regular expression.
The regular expression is anchored
to the beginning of the string with an implicit
.Ql ^ .
.Pp
If the match succeeds and the pattern contains at least one regular
expression subexpression
.Dq "\e(...\e)" ,
the string corresponding to
.Dq "\e1"
is returned;
otherwise, the matching operator returns the number of characters matched.
If the match fails and the pattern contains a regular expression subexpression
the null string is returned;
otherwise, returns 0.
.Pp
Note: the empty string cannot be matched using
.Bd -literal -offset indent
expr '' : '$'
.Ed
.Pp
This is because the returned number of matched characters
.Pq zero
is indistinguishable from a failed match, so
.Nm
returns failure
.Pq 0 .
To match the empty string, use a structure such as:
.Bd -literal -offset indent
expr X'' : 'X$'
.Ed
.El
.Pp
Parentheses are used for grouping in the usual manner.
.Sh EXIT STATUS
The
.Nm
utility exits with one of the following values:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It 0
The expression is neither an empty string nor 0.
.It 1
The expression is an empty string or 0.
.It 2
The expression is invalid.
.It \*(Gt2
An error occurred (such as memory allocation failure).
.El
.Sh EXAMPLES
Add 1 to the variable
.Va a :
.Bd -literal -offset indent
$ a=`expr $a + 1`
.Ed
.Pp
Return the filename portion of a pathname stored
in variable
.Va a .
The
.Ql //
characters act to eliminate ambiguity with the division operator:
.Bd -literal -offset indent
$ expr "//$a" \&: '.*/\e(.*\e)'
.Ed
.Pp
Return the number of characters in variable
.Va a :
.Bd -literal -offset indent
$ expr $a \&: '.*'
.Ed
.Sh SEE ALSO
.Xr test 1 ,
.Xr re_format 7
.Sh STANDARDS
The
.Nm
utility is compliant with the
.St -p1003.1-2008
specification.
.Sh HISTORY
The
.Nm
utility first appeared in the Programmer's Workbench (PWB/UNIX)
and has supported regular expressions since
.At v7 .
It was rewritten from scratch for
.Bx 386 0.1
and again for
.Nx 1.1 .
.Sh AUTHORS
.An -nosplit
The first free version was written by
.An Pace Willisson
in 1992.
This version was written by
.An John T. Conklin
in 1994.
@


1.23
log
@Properly escape punctuation when given as an argument to a macro;
this was the only mandoc warning in src/bin.
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.22 2014/02/23 18:13:27 schwarze Exp $
d7 1
a7 1
.Dd $Mdocdate: February 23 2014 $
d42 3
a44 3
Returns the results of integer comparison if both arguments are integers;
otherwise, returns the results of string comparison using the locale-specific
collation sequence.
d48 2
a49 1
Returns the results of addition or subtraction of integer-valued arguments.
d52 1
a52 1
integer-valued arguments.
@


1.22
log
@add HISTORY and AUTHORS;
my research triggered by a question from Adam Moskowitz via Kirk McKusick;
feedback and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.21 2010/09/03 10:00:40 jmc Exp $
d7 1
a7 1
.Dd $Mdocdate: September 3 2010 $
d52 1
a52 1
.It Ar expr1 Li : Ar expr2
@


1.21
log
@remove some unneccessary macros and put EXAMPLES in a more standard format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.20 2010/09/03 09:53:20 jmc Exp $
d139 18
@


1.20
log
@add an EXIT STATUS section for /bin;
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.19 2010/07/22 08:09:29 jmc Exp $
d7 1
a7 1
.Dd $Mdocdate: July 22 2010 $
d30 1
a30 1
.It Ar expr1 Li | Ar expr2
a108 2
.Li $ a=`expr $a + 1`
.Pp
d110 4
a113 3
.Va a .
.Pp
.Li $ expr "//$a" \&: '.*/\e(.*\e)'
d120 4
a123 3
characters act to eliminate ambiguity with the division operator.
.Pp
.Li $ expr $a \&: '.*'
d126 4
a129 1
.Va a .
@


1.19
log
@move exit returns blurb out of DIAGNOSTICS; from daniel dickman
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.18 2009/02/08 17:15:09 jmc Exp $
d7 1
a7 1
.Dd $Mdocdate: February 8 2009 $
d93 1
a93 1
.Pp
d98 1
a98 1
.Bl -tag -width Ds -compact
@


1.18
log
@bump the posix reference in STANDARDS to IEEE Std 1003.1-2008, with a few
updates to follow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.17 2009/01/22 17:52:19 espie Exp $
d7 1
a7 1
.Dd $Mdocdate: January 22 2009 $
d93 15
a126 15
.Sh DIAGNOSTICS
The
.Nm
utility exits with one of the following values:
.Pp
.Bl -tag -width Ds -compact
.It 0
The expression is neither an empty string nor 0.
.It 1
The expression is an empty string or 0.
.It 2
The expression is invalid.
.It >2
An error occurred (such as memory allocation failure).
.El
@


1.17
log
@document regexp support
okay millert@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.16 2007/05/31 19:19:14 jmc Exp $
d7 1
a7 1
.Dd $Mdocdate: May 31 2007 $
d134 1
a134 1
.St -p1003.1-2004
@


1.16
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.15 2007/05/29 15:04:59 jmc Exp $
d7 1
a7 1
.Dd $Mdocdate$
d59 1
a59 1
which must be a regular expression.
d128 2
a129 1
.Xr test 1
@


1.15
log
@- consistent STANDARDS blurb
- note which options are extensions to POSIX

discussed w/ deraadt otto millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.14 2003/12/22 12:01:41 jmc Exp $
d7 1
a7 1
.Dd July 3, 1993
@


1.14
log
@document matching the empty string;
started by vax at carolina dot rr dot com (NetBSD PR 23810),
resolved by jdolecek@@netbsd (rev. 1.24);

ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.13 2003/03/12 20:12:35 deraadt Exp $
d132 3
a134 2
utility conforms to
.St -p1003.2 .
@


1.13
log
@more .Li
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.12 2002/11/14 02:57:27 deraadt Exp $
d74 16
@


1.12
log
@use $ or # before commands in examples
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.11 2001/11/13 14:00:15 mpech Exp $
d78 1
a78 1
.Cm $ a=`expr $a + 1`
d83 1
a83 1
.Cm $ expr "//$a" \&: '.*/\e(.*\e)'
d92 1
a92 1
.Cm $ expr $a \&: '.*'
@


1.11
log
@o) start new sentence on a new line;
o) don't use .Pp before/after .Ss;
o) wrap long lines;
o) fix bogus .Xr usage;

millert@@ ok;
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.10 2000/10/18 06:55:08 aaron Exp $
d78 1
a78 1
.Cm a=`expr $a + 1`
d83 1
a83 1
.Cm expr "//$a" \&: '.*/\e(.*\e)'
d92 1
a92 1
.Cm expr $a \&: '.*'
@


1.10
log
@Add some rudimentary EXAMPLES sections and standardize the way we display
existing EXAMPLES sections.
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.9 2000/03/17 18:15:13 aaron Exp $
d50 2
a51 1
Returns the results of multiplication, integer division, or remainder of integer-valued arguments.
@


1.9
log
@Remove hard sentence breaks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.8 1999/09/23 10:43:07 aaron Exp $
d77 2
d80 1
a80 1
.Va a :
d82 1
a82 1
.Dl a=`expr $a + 1`
d91 1
a91 1
.Dl expr "//$a" Li : '.*/\e(.*\e)'
d94 1
a94 4
.Va a :
.Pp
.Dl expr $a Li : '.*'
.Pp
@


1.8
log
@Formatting fixes. Also, add a SEE ALSO section and Xr test(1).
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.7 1999/06/04 02:45:13 aaron Exp $
d58 2
a59 1
which must be a regular expression.  The regular expression is anchored
@


1.7
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.6 1998/12/15 01:20:21 aaron Exp $
a21 1
.Pp
d53 1
a53 1
.Dq \:
d60 1
a60 1
.Dq ^ .
d68 1
a68 1
otherwise the matching operator returns the number of characters matched.
d71 1
a71 1
otherwise 0.
d76 3
a78 3
.Bl -enum
.It
The following example adds one to the variable a.
d80 8
a87 4
.It
The following example returns the filename portion of a pathname stored
in variable a.  The // characters act to eliminate ambiguity with the
division operator.
d89 4
a92 2
.It
The following example returns the number of characters in variable a.
d94 1
a94 1
.El
d110 2
@


1.6
log
@always give .Nm macros an argument in SYNOPSIS sections; krw@@tcn.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.5 1998/11/28 03:20:33 aaron Exp $
d19 1
a19 1
utility evaluates 
d32 2
a33 2
Returns the evaluation of 
.Ar expr1 
d43 1
a43 1
Returns the results of integer comparison if both arguments are integers; 
d53 1
a53 1
The 
d55 3
a57 3
operator matches 
.Ar expr1 
against 
d60 1
a60 1
to the beginning of the string with an implicit 
d64 3
a66 3
expression subexpression 
.Dq "\e(...\e)" , 
the string corresponding to 
d69 1
a69 1
otherwise the matching operator returns the number of characters matched. 
d78 1
a78 1
.It 
@


1.5
log
@start killing redundant .Nm macro arguments (mandoc ``remembers'' the first one
it's given)
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.4 1998/09/14 22:13:47 aaron Exp $
d14 1
a14 1
.Nm
@


1.4
log
@First complete sweep of man pages, bin/. Command/function names previously
(incorrectly) capatilized are fixed. Comma splices, hyphenations, SYNOPSIS
cleanups, other miscellaneous typos.
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.3 1997/08/19 06:36:30 denny Exp $
d14 1
a14 1
.Nm expr
d18 1
a18 1
.Nm expr
d24 1
a24 1
.Nm expr
d92 1
a92 1
.Nm expr 
d107 1
a107 1
.Nm expr
@


1.3
log
@Note return code >2 if malloc fails (POSIX spec behavior).
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.2 1996/06/23 14:20:09 deraadt Exp $
d60 1
a60 1
to the beginning of  the string with an implicit 
d94 1
d97 1
a97 1
the expression is neither an empty string nor 0.
d99 1
a99 1
the expression is an empty string or 0.
d101 1
a101 1
the expression is invalid.
d103 1
a103 1
an error occurred (such as memory allocation failure).
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: expr.1,v 1.9 1995/04/28 23:27:13 jtc Exp $
d101 2
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
