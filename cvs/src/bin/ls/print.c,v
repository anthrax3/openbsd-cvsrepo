head	1.37;
access;
symbols
	OPENBSD_6_2:1.37.0.2
	OPENBSD_6_2_BASE:1.37
	OPENBSD_6_1:1.37.0.4
	OPENBSD_6_1_BASE:1.37
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.34.0.4
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.33.0.2
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.32.0.4
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.31.0.4
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.30.0.2
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.28.0.4
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.2
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.6
	OPENBSD_5_0:1.27.0.4
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.2
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.26.0.4
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.25.0.12
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.8
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.6
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.4
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.2
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.24.0.8
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.6
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.24.0.4
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.24.0.2
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.23.0.2
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.22.0.4
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.15.0.8
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.15.0.6
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.15.0.4
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.15.0.2
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.37
date	2016.08.16.16.09.24;	author krw;	state Exp;
branches;
next	1.36;
commitid	GvVhwA30AwBzznd8;

1.36
date	2016.08.15.16.57.53;	author krw;	state Exp;
branches;
next	1.35;
commitid	hMf3GfB74nxxbKdv;

1.35
date	2015.12.01.18.36.13;	author schwarze;	state Exp;
branches;
next	1.34;
commitid	JYEMpgNqkF0UVWhk;

1.34
date	2015.03.15.00.41.27;	author millert;	state Exp;
branches;
next	1.33;
commitid	IbVxlqGw2UipKdDr;

1.33
date	2015.01.16.06.39.32;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	Uu5nFG3wCl0LACBb;

1.32
date	2014.05.06.20.55.10;	author tedu;	state Exp;
branches;
next	1.31;

1.31
date	2014.01.09.03.07.52;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2013.05.30.16.34.32;	author guenther;	state Exp;
branches;
next	1.29;

1.29
date	2013.04.23.18.08.40;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2012.07.12.09.41.09;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2010.09.12.20.16.29;	author sobrado;	state Exp;
branches;
next	1.26;

1.26
date	2009.10.27.23.59.21;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.07.18.39.28;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2005.06.15.17.47.17;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2005.01.10.20.16.15;	author otto;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.26.00.48.44;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.24.20.36.36;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2003.08.06.19.09.09;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.11.23.42.12;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.08.01.21.49.57;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.16.21.27.07;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2000.01.06.21.32.40;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2000.01.05.16.02.11;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2000.01.05.16.00.19;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.05.15.58.27;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	99.05.01.23.54.48;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.02.20.18.59.25;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.08.15.20.23.20;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.05.18.20.36.31;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.09.01.18.29.36;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.03.22.36.08;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.12.17.18.52.52;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.12.14.12.18.04;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.11.45.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.15;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.37
log
@Bring types of variables used with struct stat into the modern world.

Replace a couple of u_long paramaters with int as they were only passed int
values and the function re-cast them to (int) anyway. Weird.

ok tedu@@
@
text
@/*	$OpenBSD: print.c,v 1.36 2016/08/15 16:57:53 krw Exp $	*/
/*	$NetBSD: print.c,v 1.15 1996/12/11 03:25:39 thorpej Exp $	*/

/*
 * Copyright (c) 1989, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Michael Fischbein.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <err.h>
#include <errno.h>
#include <fts.h>
#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <limits.h>
#include <util.h>

#include "ls.h"
#include "extern.h"

static int	printaname(FTSENT *, int, int);
static void	printlink(FTSENT *);
static void	printsize(int, off_t);
static void	printtime(time_t);
static int	printtype(mode_t);
static int	compute_columns(DISPLAY *, int *);

#define	IS_NOPRINT(p)	((p)->fts_number == NO_PRINT)

#define	DATELEN		64

#define	SECSPERDAY	(24 * 60 * 60)
#define	SIXMONTHS	(SECSPERDAY * 365 / 2)

void
printscol(DISPLAY *dp)
{
	FTSENT *p;

	for (p = dp->list; p; p = p->fts_link) {
		if (IS_NOPRINT(p))
			continue;
		(void)printaname(p, dp->s_inode, dp->s_block);
		(void)putchar('\n');
	}
}

void
printlong(DISPLAY *dp)
{
	struct stat *sp;
	FTSENT *p;
	NAMES *np;
	char buf[20];

	if (dp->list->fts_level != FTS_ROOTLEVEL && (f_longform || f_size))
		(void)printf("total %llu\n", howmany(dp->btotal, blocksize));

	for (p = dp->list; p; p = p->fts_link) {
		if (IS_NOPRINT(p))
			continue;
		sp = p->fts_statp;
		if (f_inode)
			(void)printf("%*llu ", dp->s_inode,
			    (unsigned long long)sp->st_ino);
		if (f_size)
			(void)printf("%*lld ", dp->s_block,
			    howmany((long long)sp->st_blocks, blocksize));
		(void)strmode(sp->st_mode, buf);
		np = p->fts_pointer;
		(void)printf("%s %*u ", buf, dp->s_nlink, sp->st_nlink);
		if (!f_grouponly)
			(void)printf("%-*s  ", dp->s_user, np->user);
		(void)printf("%-*s  ", dp->s_group, np->group);
		if (f_flags)
			(void)printf("%-*s ", dp->s_flags, np->flags);
		if (S_ISCHR(sp->st_mode) || S_ISBLK(sp->st_mode))
			(void)printf("%3d, %3d ",
			    major(sp->st_rdev), minor(sp->st_rdev));
		else if (dp->bcfile)
			(void)printf("%*s%*lld ",
			    8 - dp->s_size, "", dp->s_size,
			    (long long)sp->st_size);
		else
			printsize(dp->s_size, sp->st_size);
		if (f_accesstime)
			printtime(sp->st_atime);
		else if (f_statustime)
			printtime(sp->st_ctime);
		else
			printtime(sp->st_mtime);
		(void)mbsprint(p->fts_name, 1);
		if (f_type || (f_typedir && S_ISDIR(sp->st_mode)))
			(void)printtype(sp->st_mode);
		if (S_ISLNK(sp->st_mode))
			printlink(p);
		(void)putchar('\n');
	}
}

static int
compute_columns(DISPLAY *dp, int *pnum)
{
	int colwidth;
	extern int termwidth;
	int mywidth;

	colwidth = dp->maxlen;
	if (f_inode)
		colwidth += dp->s_inode + 1;
	if (f_size)
		colwidth += dp->s_block + 1;
	if (f_type || f_typedir)
		colwidth += 1;

	colwidth += 1;
	mywidth = termwidth + 1;	/* no extra space for last column */

	if (mywidth < 2 * colwidth) {
		printscol(dp);
		return (0);
	}

	*pnum = mywidth / colwidth;
	return (mywidth / *pnum);		/* spread out if possible */
}

void
printcol(DISPLAY *dp)
{
	static FTSENT **array;
	static int lastentries = -1;
	FTSENT *p;
	int base, chcnt, col, colwidth, num;
	int numcols, numrows, row;

	if ((colwidth = compute_columns(dp, &numcols)) == 0)
		return;
	/*
	 * Have to do random access in the linked list -- build a table
	 * of pointers.
	 */
	if (dp->entries > lastentries) {
		FTSENT **a;

		if ((a = reallocarray(array, dp->entries, sizeof(FTSENT *))) ==
		    NULL) {
			free(array);
			array = NULL;
			dp->entries = 0;
			lastentries = -1;
			warn(NULL);
			printscol(dp);
			return;
		}
		lastentries = dp->entries;
		array = a;
	}
	for (p = dp->list, num = 0; p; p = p->fts_link)
		if (p->fts_number != NO_PRINT)
			array[num++] = p;

	numrows = num / numcols;
	if (num % numcols)
		++numrows;

	if (dp->list->fts_level != FTS_ROOTLEVEL && (f_longform || f_size))
		(void)printf("total %llu\n", howmany(dp->btotal, blocksize));
	for (row = 0; row < numrows; ++row) {
		for (base = row, col = 0;;) {
			chcnt = printaname(array[base], dp->s_inode, dp->s_block);
			if ((base += numrows) >= num)
				break;
			if (++col == numcols)
				break;
			while (chcnt++ < colwidth)
				putchar(' ');
		}
		(void)putchar('\n');
	}
}

/*
 * print [inode] [size] name
 * return # of characters printed, no trailing characters.
 */
static int
printaname(FTSENT *p, int inodefield, int sizefield)
{
	struct stat *sp;
	int chcnt;

	sp = p->fts_statp;
	chcnt = 0;
	if (f_inode)
		chcnt += printf("%*llu ", inodefield,
		    (unsigned long long)sp->st_ino);
	if (f_size)
		chcnt += printf("%*lld ", sizefield,
		    howmany((long long)sp->st_blocks, blocksize));
	chcnt += mbsprint(p->fts_name, 1);
	if (f_type || (f_typedir && S_ISDIR(sp->st_mode)))
		chcnt += printtype(sp->st_mode);
	return (chcnt);
}

static void
printtime(time_t ftime)
{
	char f_date[DATELEN];
	static time_t now;
	static int now_set = 0;

	if (! now_set) {
		now = time(NULL);
		now_set = 1;
	}

	/*
	 * convert time to string, and print
	 */
	if (strftime(f_date, sizeof(f_date), f_sectime ? "%b %e %H:%M:%S %Y" :
	    (ftime <= now - SIXMONTHS || ftime > now) ? "%b %e  %Y" :
	    "%b %e %H:%M", localtime(&ftime)) == 0)
		f_date[0] = '\0';

	printf("%s ", f_date);
}

void
printacol(DISPLAY *dp)
{
	FTSENT *p;
	int chcnt, col, colwidth;
	int numcols;

	if ( (colwidth = compute_columns(dp, &numcols)) == 0)
		return;

	if (dp->list->fts_level != FTS_ROOTLEVEL && (f_longform || f_size))
		(void)printf("total %llu\n", howmany(dp->btotal, blocksize));
	col = 0;
	for (p = dp->list; p; p = p->fts_link) {
		if (IS_NOPRINT(p))
			continue;
		if (col >= numcols) {
			col = 0;
			(void)putchar('\n');
		}
		chcnt = printaname(p, dp->s_inode, dp->s_block);
		col++;
		if (col < numcols)
			while (chcnt++ < colwidth)
				(void)putchar(' ');
	}
	(void)putchar('\n');
}

void
printstream(DISPLAY *dp)
{
	extern int termwidth;
	FTSENT *p;
	int col;
	int extwidth;

	extwidth = 0;
	if (f_inode)
		extwidth += dp->s_inode + 1;
	if (f_size)
		extwidth += dp->s_block + 1;
	if (f_type)
		extwidth += 1;

	for (col = 0, p = dp->list; p != NULL; p = p->fts_link) {
		if (IS_NOPRINT(p))
			continue;
		if (col > 0) {
			(void)putchar(','), col++;
			if (col + 1 + extwidth + mbsprint(p->fts_name, 0) >=
			    termwidth)
				(void)putchar('\n'), col = 0;
			else
				(void)putchar(' '), col++;
		}
		col += printaname(p, dp->s_inode, dp->s_block);
	}
	(void)putchar('\n');
}

static int
printtype(mode_t mode)
{
	switch (mode & S_IFMT) {
	case S_IFDIR:
		(void)putchar('/');
		return (1);
	case S_IFIFO:
		(void)putchar('|');
		return (1);
	case S_IFLNK:
		(void)putchar('@@');
		return (1);
	case S_IFSOCK:
		(void)putchar('=');
		return (1);
	}
	if (mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {
		(void)putchar('*');
		return (1);
	}
	return (0);
}

static void
printlink(FTSENT *p)
{
	int lnklen;
	char name[PATH_MAX], path[PATH_MAX];

	if (p->fts_level == FTS_ROOTLEVEL)
		(void)snprintf(name, sizeof(name), "%s", p->fts_name);
	else
		(void)snprintf(name, sizeof(name),
		    "%s/%s", p->fts_parent->fts_accpath, p->fts_name);
	if ((lnklen = readlink(name, path, sizeof(path) - 1)) == -1) {
		(void)fprintf(stderr, "\nls: %s: %s\n", name, strerror(errno));
		return;
	}
	path[lnklen] = '\0';
	(void)printf(" -> ");
	(void)mbsprint(path, 1);
}

static void
printsize(int width, off_t bytes)
{
	char ret[FMT_SCALED_STRSIZE];

	if ((f_humanval) && (fmt_scaled(bytes, ret) != -1)) {
		(void)printf("%*s ", width, ret);
		return;
	}
	(void)printf("%*lld ", width, (long long)bytes);
}
@


1.36
log
@%*qd -> %*lld + (long long) for off_t.

Avoid some casts by changing printsize() to take an int (the only
type actually passed via that parameter) instead of size_t.

Tweaks & ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.35 2015/12/01 18:36:13 schwarze Exp $	*/
d55 1
a55 1
static int	printaname(FTSENT *, u_long, u_long);
d59 1
a59 1
static int	printtype(u_int);
d222 1
a222 1
printaname(FTSENT *p, u_long inodefield, u_long sizefield)
d230 1
a230 1
		chcnt += printf("%*llu ", (int)inodefield,
d233 1
a233 1
		chcnt += printf("%*lld ", (int)sizefield,
d326 1
a326 1
printtype(u_int mode)
@


1.35
log
@Support UTF-8: use wcwidth(3) for column adjustment and replace
non-printable Unicode codepoints and invalid bytes with ASCII
question marks.  No change for the SMALL version.

Using ideas developed by tedu@@, phessler@@, bentley@@ and feedback from many.
OK yasuoka@@ czarkoff@@ sthen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.34 2015/03/15 00:41:27 millert Exp $	*/
d57 1
a57 1
static void	printsize(size_t, off_t);
d101 2
a102 2
			(void)printf("%*qd ",
			    dp->s_block, howmany(sp->st_blocks, blocksize));
d115 3
a117 2
			(void)printf("%*s%*qd ",
			    8 - dp->s_size, "", dp->s_size, sp->st_size);
d233 2
a234 2
		chcnt += printf("%*qd ",
		    (int)sizefield, howmany(sp->st_blocks, blocksize));
d370 1
a370 1
printsize(size_t width, off_t bytes)
d375 1
a375 1
		(void)printf("%*s ", (u_int)width, ret);
d378 1
a378 1
	(void)printf("%*qd ", (u_int)width, bytes);
@


1.34
log
@tzfile.h is an internal header that should never have been installed.
What's worse, the tzfile.h that gets installed is over 20 years old
and doesn't match the real tzfile.h in libc/time.  This makes the
tree safe for /usr/include/tzfile.h removal.  The TM_YEAR_BASE
define has been moved to time.h temporarily until its usage is
replaced by 1900 in the tree.  Actual removal of tzfile.h is pending
a ports build.  Based on a diff from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.33 2015/01/16 06:39:32 deraadt Exp $	*/
d125 1
a125 1
		(void)putname(p->fts_name);
d234 1
a234 1
	chcnt += putname(p->fts_name);
d313 2
a314 1
			if (col + 1 + extwidth + p->fts_namelen >= termwidth)
d365 1
a365 1
	(void)putname(path);
@


1.33
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.32 2014/05/06 20:55:10 tedu Exp $	*/
a47 1
#include <tzfile.h>
d65 3
a67 1
#define	SIXMONTHS	((DAYSPERNYEAR / 2) * SECSPERDAY)
@


1.32
log
@reallocarray
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.31 2014/01/09 03:07:52 guenther Exp $	*/
d36 1
a36 1
#include <sys/param.h>
d50 1
d350 1
a350 1
	char name[MAXPATHLEN], path[MAXPATHLEN];
@


1.31
log
@Per POSIX, times in the future should be reported with the year
like files more than six months old.  Use strftime() directly instead
of breaking down the ctime() output on character positions.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.30 2013/05/30 16:34:32 guenther Exp $	*/
d177 1
a177 1
		if ((a = realloc(array, dp->entries * sizeof(FTSENT *))) ==
@


1.30
log
@Fix column padding of inode numbers and block counts >2^32, as well as
display of directory block totals >2^32

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.29 2013/04/23 18:08:40 deraadt Exp $	*/
d64 3
d241 8
a248 4
	int i;
	char *longstring;
	static time_t six_months_ago;
	static int sma_set = 0;
d250 9
a258 21
#define	SIXMONTHS	((DAYSPERNYEAR / 2) * SECSPERDAY)
	if (! sma_set) {
		six_months_ago = time(NULL) - SIXMONTHS;
		sma_set = 1;
	}
	longstring = ctime(&ftime);
	for (i = 4; i < 11; ++i)
		(void)putchar(longstring[i]);

	if (f_sectime)
		for (i = 11; i < 24; i++)
			(void)putchar(longstring[i]);
	else if (ftime > six_months_ago)
		for (i = 11; i < 16; ++i)
			(void)putchar(longstring[i]);
	else {
		(void)putchar(' ');
		for (i = 20; i < 24; ++i)
			(void)putchar(longstring[i]);
	}
	(void)putchar(' ');
@


1.29
log
@handle large ino_t; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.28 2012/07/12 09:41:09 guenther Exp $	*/
d86 1
a86 1
		(void)printf("total %lu\n", howmany(dp->btotal, blocksize));
d196 1
a196 1
		(void)printf("total %lu\n", howmany(dp->btotal, blocksize));
d277 1
a277 1
		(void)printf("total %lu\n", howmany(dp->btotal, blocksize));
@


1.28
log
@With the -l option, only call time() once per run instead of once per file

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.27 2010/09/12 20:16:29 sobrado Exp $	*/
d93 2
a94 1
			(void)printf("%*u ", dp->s_inode, sp->st_ino);
d224 2
a225 1
		chcnt += printf("%*u ", (int)inodefield, sp->st_ino);
@


1.27
log
@remove trailing spaces and tabs from source code; no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.26 2009/10/27 23:59:21 deraadt Exp $	*/
d238 2
d241 5
a249 1
#define	SIXMONTHS	((DAYSPERNYEAR / 2) * SECSPERDAY)
d253 1
a253 1
	else if (ftime + SIXMONTHS > time(NULL))
@


1.26
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.25 2007/05/07 18:39:28 millert Exp $	*/
d99 1
a99 1
                (void)printf("%s %*u ", buf, dp->s_nlink, sp->st_nlink);
d112 1
a112 1
			printsize(dp->s_size, sp->st_size);	
@


1.25
log
@Change the -g flag from a no-op to be POSIX conforming.  We allow the
-l flag to override -g regardless of its position on the command line
for backwards compat with 4.3BSD.  From NetBSD.
OK jmc@@, tom@@, sobrado@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.24 2005/06/15 17:47:17 millert Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)print.c	8.5 (Berkeley) 7/28/94";
#else
static char rcsid[] = "$OpenBSD: print.c,v 1.24 2005/06/15 17:47:17 millert Exp $";
#endif
#endif /* not lint */
@


1.24
log
@remove whiteout support
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.23 2005/01/10 20:16:15 otto Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: print.c,v 1.23 2005/01/10 20:16:15 otto Exp $";
d107 4
a110 3
		(void)printf("%s %*u %-*s  %-*s  ", buf, dp->s_nlink,
		    sp->st_nlink, dp->s_user, np->user, dp->s_group,
		    np->group);
@


1.23
log
@Remove unneccesary cast to long long and %llu format; print using %lu.
Spotted by tom@@, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.22 2003/09/26 00:48:44 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: print.c,v 1.22 2003/09/26 00:48:44 deraadt Exp $";
a339 3
		return (1);
	case S_IFWHT:
		(void)putchar('%');
@


1.22
log
@free(NULL) is valid
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.21 2003/09/24 20:36:36 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: print.c,v 1.21 2003/09/24 20:36:36 deraadt Exp $";
d276 1
a276 2
		(void)printf("total %llu\n",
		    (long long)(howmany(dp->btotal, blocksize)));
@


1.21
log
@realloc fixes: unallocate for next use if realloc fixes; do not incr size;
do not p = realloc(p, ...; ok from ho, cloder
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.21 2003/09/24 20:27:07 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: print.c,v 1.21 2003/09/24 20:27:07 deraadt Exp $";
d182 1
a182 2
			if (array)
				free(array);
@


1.20
log
@-h, human readable sizes.  from a jonathon gray mail to tech@@
ok ian@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.19 2003/06/11 23:42:12 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: print.c,v 1.19 2003/06/11 23:42:12 deraadt Exp $";
d171 1
a171 1
	if ( (colwidth = compute_columns(dp, &numcols)) == 0)
d180 7
a186 2
		if ((a =
		    realloc(array, dp->entries * sizeof(FTSENT *))) == NULL) {
d189 1
a189 1
			return;			
@


1.19
log
@ansification, art ok
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.18 2003/06/02 23:32:08 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: print.c,v 1.18 2003/06/02 23:32:08 millert Exp $";
d58 1
d65 1
d119 1
a119 1
			(void)printf("%*qd ", dp->s_size, sp->st_size);
d367 12
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.17 2002/08/01 21:49:57 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: print.c,v 1.17 2002/08/01 21:49:57 deraadt Exp $";
d71 1
a71 2
printscol(dp)
	DISPLAY *dp;
d84 1
a84 2
printlong(dp)
	DISPLAY *dp;
d134 1
a134 3
compute_columns(dp, pnum)
	DISPLAY *dp;
	int	*pnum;
d161 1
a161 2
printcol(dp)
	DISPLAY *dp;
d216 1
a216 3
printaname(p, inodefield, sizefield)
	FTSENT *p;
	u_long sizefield, inodefield;
d235 1
a235 2
printtime(ftime)
	time_t ftime;
d260 1
a260 2
printacol(dp)
	DISPLAY *dp;
d290 1
a290 2
printstream(dp)
	DISPLAY *dp;
d321 1
a321 2
printtype(mode)
	u_int mode;
d348 1
a348 2
printlink(p)
	FTSENT *p;
@


1.17
log
@utmp.h not needed
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.16 2002/02/16 21:27:07 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: print.c,v 1.16 2002/02/16 21:27:07 millert Exp $";
@


1.16
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.15 2000/01/06 21:32:40 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.15 2000/01/06 21:32:40 espie Exp $";
a61 1
#include <utmp.h>
@


1.15
log
@In multi-column output, don't bother filling up last column before '\n'.
As a result, we gain one extra position to format multi-column output,
since there is no added space at the end of the last column. For instance,
26 long filenames now print in 3 columns instead of 2.

At first, both millert@@ and I thought that ending the line on the last
column might trigger trouble on some terminals, but then I realized that
current ls may already fill the last column with a space, with no apparent
grief anywhere, and Todd agreed.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.11 1999/05/01 23:54:48 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.11 1999/05/01 23:54:48 deraadt Exp $";
d67 5
a71 5
static int	printaname __P((FTSENT *, u_long, u_long));
static void	printlink __P((FTSENT *));
static void	printtime __P((time_t));
static int	printtype __P((u_int));
static int	compute_columns __P((DISPLAY *, int *));
@


1.14
log
@Remove bogus chcnt assignments.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.13 2000/01/05 16:00:19 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.13 2000/01/05 16:00:19 espie Exp $";
d147 1
d158 1
d160 1
a160 1
	if (termwidth < 2 * colwidth) {
d165 2
a166 2
	*pnum = termwidth / colwidth;
	return (termwidth / *pnum);		/* spread out if possible */
a180 1

d208 1
a208 1
		for (base = row, col = 0; col < numcols; ++col) {
d212 2
d291 1
a291 1
			chcnt = col = 0;
a294 2
		while (chcnt++ < colwidth)
			(void)putchar(' ');
d296 3
@


1.13
log
@Perform colwidth computation sooner, as there's no need for random
access if we end up doing one column output.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.12 2000/01/05 15:58:27 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.12 2000/01/05 15:58:27 espie Exp $";
d207 1
a207 1
		for (base = row, chcnt = col = 0; col < numcols; ++col) {
d283 1
a283 1
	chcnt = col = 0;
@


1.12
log
@Factor column width computation out.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.11 1999/05/01 23:54:48 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.11 1999/05/01 23:54:48 deraadt Exp $";
d177 3
a198 3

	if ( (colwidth = compute_columns(dp, &numcols)) == 0)
		return;
@


1.11
log
@defer conversion of unprintable filenames till final display, permitting
badly named symbolic links to be handled; bug noted by dm@@ fixed by d@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.10 1999/02/20 18:59:25 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.10 1999/02/20 18:59:25 deraadt Exp $";
d71 1
d140 27
a170 1
	extern int termwidth;
d197 1
a197 12
	colwidth = dp->maxlen;
	if (f_inode)
		colwidth += dp->s_inode + 1;
	if (f_size)
		colwidth += dp->s_block + 1;
	if (f_type || f_typedir)
		colwidth += 1;

	colwidth += 1;

	if (termwidth < 2 * colwidth) {
		printscol(dp);
a198 1
	}
a199 2
	numcols = termwidth / colwidth;
	colwidth = termwidth / numcols;		/* spread out if possible */
a272 1
	extern int termwidth;
d277 1
a277 12
	colwidth = dp->maxlen;
	if (f_inode)
		colwidth += dp->s_inode + 1;
	if (f_size)
		colwidth += dp->s_block + 1;
	if (f_type || f_typedir)
		colwidth += 1;

	colwidth += 1;

	if (termwidth < 2 * colwidth) {
		printscol(dp);
a278 4
	}

	numcols = termwidth / colwidth;
	colwidth = termwidth / numcols;		/* spread out if possible */
@


1.10
log
@add -x, -p, and -m options, based on netbsd work
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.9 1998/08/15 20:23:20 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.9 1998/08/15 20:23:20 deraadt Exp $";
d130 1
a130 1
		(void)printf("%s", p->fts_name);
d224 1
a224 1
	chcnt += printf("%s", p->fts_name);
d379 2
a380 1
	(void)printf(" -> %s", path);
@


1.9
log
@realloc bug fix and two other bugs found at the same time
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.8 1998/05/18 20:36:31 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.8 1998/05/18 20:36:31 deraadt Exp $";
d131 1
a131 1
		if (f_type)
d175 1
a175 1
	if (f_type)
d225 1
a225 1
	if (f_type)
d254 78
@


1.8
log
@MAXPATHLEN not MAXPATHLEN+1
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.7 1997/09/01 18:29:36 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.7 1997/09/01 18:29:36 deraadt Exp $";
d155 3
a157 2
		lastentries = dp->entries;
		if ((array =
d161 1
d163 2
@


1.7
log
@i am bored enough to fix terminal space/tab uglies
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.6 1997/01/03 22:36:08 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.6 1997/01/03 22:36:08 millert Exp $";
d285 1
a285 1
	char name[MAXPATHLEN + 1], path[MAXPATHLEN + 1];
@


1.6
log
@From NetBSD:
    - Correct sorting behaviour.
    - Do multicolumn output in a way that's a more likely to line up evenly.
      From D'Arcy J.M. Cain <darcy@@druid.com>, NetBSD PR #2965.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.5 1996/12/17 18:52:52 tholo Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.15 1996/12/11 03:25:39 thorpej Exp $";
d289 1
a289 1
	else 
@


1.5
log
@Get TAB expansion right
@
text
@d1 2
a2 2
/*	$OpenBSD: print.c,v 1.4 1996/12/14 12:18:04 mickey Exp $	*/
/*	$NetBSD: print.c,v 1.14 1995/09/07 06:43:00 jtc Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.4 1996/12/14 12:18:04 mickey Exp $";
d62 1
a138 2
#define	TAB	8

d147 2
a148 2
	int base, chcnt, cnt, col, colwidth, num;
	int endcol, numcols, numrows, row;
d174 2
a175 1
	colwidth = (colwidth + TAB) & ~(TAB - 1);
d182 1
a189 1
		endcol = colwidth;
d191 1
a191 2
			chcnt += printaname(array[base], dp->s_inode,
			    dp->s_block);
d194 2
a195 5
			while ((cnt = ((chcnt + TAB) & ~(TAB - 1))) <= endcol) {
				(void)putchar('\t');
				chcnt = cnt;
			}
			endcol += colwidth;
@


1.4
log
@-Wall'ing.
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.3 1996/08/02 11:45:01 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.3 1996/08/02 11:45:01 deraadt Exp $";
d195 1
a195 1
			while ((cnt = (chcnt + (TAB & ~(TAB - 1)))) <= endcol) {
@


1.3
log
@extra utmp.h goes away; tom@@haven.uniserve.com in freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.2 1996/06/23 14:20:20 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.2 1996/06/23 14:20:20 deraadt Exp $";
d104 1
a104 1
			(void)printf("%*lu ", dp->s_inode, sp->st_ino);
d195 1
a195 1
			while ((cnt = (chcnt + TAB & ~(TAB - 1))) <= endcol) {
d220 1
a220 1
		chcnt += printf("%*lu ", (int)inodefield, sp->st_ino);
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.14 1995/09/07 06:43:00 jtc Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: print.c,v 1.14 1995/09/07 06:43:00 jtc Exp $";
a61 1
#include <utmp.h>
@


1.1
log
@Initial revision
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: print.c,v 1.14 1995/09/07 06:43:00 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
