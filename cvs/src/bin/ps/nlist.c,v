head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.2
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.8
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.4
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.14
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.12
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.8
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.6
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.4
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.2
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.12
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.10
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.8
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2017.01.24.22.40.09;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	DUPaNwLEn6fhN1Qr;

1.19
date	2015.01.16.06.39.32;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	Uu5nFG3wCl0LACBb;

1.18
date	2011.12.11.00.16.49;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.22;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2008.02.10.16.56.13;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.07.20.41.13;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.11.23.42.12;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.32.09;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.19.05.15.39;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.21.15.56.55;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.20.18.20.22;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.08.22.41.46;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.05.02.23.59;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.03.04.18.22;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.03.04.07.59;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	99.08.16.18.18.34;	author art;	state Exp;
branches;
next	1.4;

1.4
date	98.04.26.10.26.45;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.08.04.05.37.04;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.50;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@do not need sys/proc.h
@
text
@/*	$OpenBSD: nlist.c,v 1.19 2015/01/16 06:39:32 deraadt Exp $	*/
/*	$NetBSD: nlist.c,v 1.11 1995/03/21 09:08:03 cgd Exp $	*/

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* MAXCOMLEN */
#include <sys/time.h>
#include <sys/signal.h>
#include <sys/resource.h>
#include <sys/sysctl.h>

#include <err.h>
#include <errno.h>
#include <kvm.h>
#include <nlist.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "ps.h"

struct	nlist psnl[] = {
	{"_fscale"},
#define	X_FSCALE	0
	{"_ccpu"},
#define	X_CCPU		1
	{"_physmem"},
#define	X_PHYSMEM	2
	{"_maxslp"},
#define X_MAXSLP	3
	{NULL}
};

fixpt_t	ccpu;				/* kernel _ccpu variable */
int	nlistread;			/* if nlist already read. */
u_int	mempages;			/* number of pages of phys. memory */
int	fscale;				/* kernel _fscale variable */
int	maxslp;

extern kvm_t *kd;

#define kread(x, v) \
	kvm_read(kd, psnl[x].n_value, &v, sizeof v) != sizeof(v)

int
donlist(void)
{
	int64_t physmem;
	int rval, mib[2];
	size_t siz;

	rval = 0;
	nlistread = 1;

	if (kd != NULL && !kvm_sysctl_only) {
		if (kvm_nlist(kd, psnl)) {
			nlisterr(psnl);
			eval = 1;
			return (1);
		}
		if (kread(X_FSCALE, fscale)) {
			warnx("fscale: %s", kvm_geterr(kd));
			eval = rval = 1;
		}
		if (kread(X_PHYSMEM, mempages)) {
			warnx("physmem: %s", kvm_geterr(kd));
			eval = rval = 1;
		}
		if (kread(X_CCPU, ccpu)) {
			warnx("ccpu: %s", kvm_geterr(kd));
			eval = rval = 1;
		}
		if (kread(X_MAXSLP, maxslp)) {
			warnx("maxslp: %s", kvm_geterr(kd));
			eval = rval = 1;
		}
	} else {
		siz = sizeof (fscale);
		mib[0] = CTL_KERN;
		mib[1] = KERN_FSCALE;
		if (sysctl(mib, 2, &fscale, &siz, NULL, 0) < 0) {
			warnx("fscale: failed to get kern.fscale");
			eval = rval = 1;
		}
		siz = sizeof (physmem);
		mib[0] = CTL_HW;
		mib[1] = HW_PHYSMEM64;
		if (sysctl(mib, 2, &physmem, &siz, NULL, 0) < 0) {
			warnx("physmem: failed to get hw.physmem");
			eval = rval = 1;
		}
		/* translate bytes into page count */
		mempages = physmem / getpagesize();
		siz = sizeof (ccpu);
		mib[0] = CTL_KERN;
		mib[1] = KERN_CCPU;
		if (sysctl(mib, 2, &ccpu, &siz, NULL, 0) < 0) {
			warnx("ccpu: failed to get kern.ccpu");
			eval = rval = 1;
		}
		siz = sizeof (maxslp);
		mib[0] = CTL_VM;
		mib[1] = VM_MAXSLP;
		if (sysctl(mib, 2, &maxslp, &siz, NULL, 0) < 0) {
			warnx("maxslp: failed to get vm.maxslp");
			eval = rval = 1;
		}
	}
	return (rval);
}

void
nlisterr(struct nlist nl[])
{
	int i;

	(void)fprintf(stderr, "ps: nlist: can't find following symbols:");
	for (i = 0; nl[i].n_name != NULL; i++)
		if (nl[i].n_value == 0)
			(void)fprintf(stderr, " %s", nl[i].n_name);
	(void)fprintf(stderr, "\n");
}
@


1.19
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.18 2011/12/11 00:16:49 nicm Exp $	*/
a35 1
#include <sys/proc.h>
@


1.18
log
@Make ps understand -o cwd using the new KERN_PROC_CWD sysctl. Some help
and suggestions from guenther.

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.17 2009/10/27 23:59:22 deraadt Exp $	*/
d33 1
a33 1
#include <sys/param.h>
d35 1
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.16 2008/02/10 16:56:13 kettenis Exp $	*/
a67 1
extern int kvm_sysctl_only;
@


1.16
log
@Use HW_PHYSMEM64.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.15 2005/01/07 20:41:13 otto Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)nlist.c	8.4 (Berkeley) 4/2/94";
#else
static char rcsid[] = "$OpenBSD: nlist.c,v 1.15 2005/01/07 20:41:13 otto Exp $";
#endif
#endif /* not lint */
@


1.15
log
@avoid negative memory sizes, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.14 2003/06/11 23:42:12 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.14 2003/06/11 23:42:12 deraadt Exp $";
d84 1
d121 1
a121 1
		siz = sizeof (mempages);
d123 2
a124 2
		mib[1] = HW_PHYSMEM;
		if (sysctl(mib, 2, &mempages, &siz, NULL, 0) < 0) {
d128 2
a129 1
		mempages /= getpagesize(); /* translate bytes into page count */
@


1.14
log
@ansification, art ok
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.13 2003/06/02 23:32:09 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.13 2003/06/02 23:32:09 millert Exp $";
d71 1
a71 1
int	mempages;			/* number of pages of phys. memory */
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.12 2003/05/19 05:15:39 art Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.12 2003/05/19 05:15:39 art Exp $";
d82 1
a82 1
donlist()
d112 1
a112 2
	}
	else {
d147 1
a147 2
nlisterr(nl)
	struct nlist nl[];
@


1.12
log
@Fix warnx message to reflect reality.
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.11 2003/03/21 15:56:55 drahn Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.11 2003/03/21 15:56:55 drahn Exp $";
@


1.11
log
@Fix %mem output in ps, sysctl method of getting mempages returns number
of bytes of memory, not number of pages of memory. Divide the result
by pagesize. PR 3164  ok david@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.10 2002/08/20 18:20:22 jason Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.10 2002/08/20 18:20:22 jason Exp $";
d129 1
a129 1
			warnx("avail_start: failed to get hw.physmem");
@


1.10
log
@Fix error string
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.9 2002/06/08 22:41:46 art Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.9 2002/06/08 22:41:46 art Exp $";
d132 1
@


1.9
log
@Use KVM_NO_FILES and remove the setgid.
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.8 2001/12/05 02:23:59 art Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.8 2001/12/05 02:23:59 art Exp $";
d105 1
a105 1
			warnx("avail_start: %s", kvm_geterr(kd));
@


1.8
log
@Get MAXSLP from kvm/sysctl. It's patchable in the kernel now.
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.7 2001/06/03 04:18:22 angelos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.7 2001/06/03 04:18:22 angelos Exp $";
d80 1
d94 1
a94 1
	if (kd != NULL) {
@


1.7
log
@Style.
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.6 2001/06/03 04:07:59 angelos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.6 2001/06/03 04:07:59 angelos Exp $";
d68 2
d77 1
d111 4
d135 8
a142 1
			warnx("avail_ccpu: failed to get kern.ccpu");
@


1.6
log
@Use sysctl() to get fscale, ccpu, and physmem if we haven't
initialized kvm (won't happen for a while).
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.5 1999/08/16 18:18:34 art Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.5 1999/08/16 18:18:34 art Exp $";
d109 1
a109 2
	else
	{
@


1.5
log
@don't cast third argument to kvm_read to char *. (it's void *)
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.4 1998/04/26 10:26:45 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.4 1998/04/26 10:26:45 deraadt Exp $";
d49 1
d84 2
a85 1
	int rval;
d89 19
a107 12
	if (kvm_nlist(kd, psnl)) {
		nlisterr(psnl);
		eval = 1;
		return (1);
	}
	if (kread(X_FSCALE, fscale)) {
		warnx("fscale: %s", kvm_geterr(kd));
		eval = rval = 1;
	}
	if (kread(X_PHYSMEM, mempages)) {
		warnx("avail_start: %s", kvm_geterr(kd));
		eval = rval = 1;
d109 23
a131 3
	if (kread(X_CCPU, ccpu)) {
		warnx("ccpu: %s", kvm_geterr(kd));
		eval = rval = 1;
@


1.4
log
@Use the physmem variable to get at the physical memory size (instead of the
avail_end - avail_start difference which is only correct on machines with
contiguous memory); is@@netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.3 1997/08/04 05:37:04 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.3 1997/08/04 05:37:04 deraadt Exp $";
d78 1
a78 1
	kvm_read(kd, psnl[x].n_value, (char *)&v, sizeof v) != sizeof(v)
@


1.3
log
@toast non-NEWVM code; freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.2 1996/06/23 14:20:50 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.2 1996/06/23 14:20:50 deraadt Exp $";
d65 2
a66 4
	{"_avail_start"},
#define	X_AVAILSTART	2
	{"_avail_end"},
#define	X_AVAILEND	3
a83 1
	int tmp;
d96 1
a96 1
	if (kread(X_AVAILEND, mempages)) {
a99 6
	if (kread(X_AVAILSTART, tmp)) {
		warnx("avail_end: %s", kvm_geterr(kd));
		eval = rval = 1;
	}
	mempages -= tmp;
	mempages /= getpagesize();
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: nlist.c,v 1.11 1995/03/21 09:08:03 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: nlist.c,v 1.11 1995/03/21 09:08:03 cgd Exp $";
a59 4
#ifdef P_PPWAIT
#define NEWVM
#endif

a64 1
#ifdef NEWVM
a68 4
#else
	{"_ecmx"},
#define	X_ECMX		2
#endif
a85 1
#ifdef NEWVM
a86 1
#endif
a98 1
#ifdef NEWVM
a108 6
#else
	if (kread(X_ECMX, mempages)) {
		warnx("ecmx: %s", kvm_geterr(kd));
		eval = rval = 1;
	}
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: nlist.c,v 1.11 1995/03/21 09:08:03 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
