head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.42
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.40
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.36
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.34
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.32
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.30
	OPENBSD_5_0:1.11.0.28
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.26
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.24
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.20
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.22
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.18
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.16
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.14
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.12
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.10
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.8
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.16
date	2016.03.01.17.57.49;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	9K8BRTDgcV56IVFL;

1.15
date	2016.02.08.16.23.54;	author mmcc;	state Exp;
branches;
next	1.14;
commitid	iyb7TGlGquuwT1tz;

1.14
date	2015.11.27.13.49.41;	author millert;	state Exp;
branches;
next	1.13;
commitid	eGUSoJGcuVTd83CX;

1.13
date	2015.03.01.20.59.05;	author tobias;	state Exp;
branches;
next	1.12;
commitid	7J6yHgr2ppLPGZVh;

1.12
date	2015.01.16.06.39.31;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	Uu5nFG3wCl0LACBb;

1.11
date	2004.09.14.22.46.04;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.32.07;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.04.04.26.39;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.11.18.40.46;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.28.23.04.55;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.26.23.25.33;	author jasoni;	state Exp;
branches;
next	1.4;

1.4
date	99.05.31.17.34.40;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.14.41.03;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.06.30.07.15.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.06.16.04.37.50;	author denny;	state Exp;
branches;
next	;


desc
@@


1.16
log
@remove unneeded includes

from Michal Mazurek, ok tb@@
@
text
@/*	$OpenBSD: ext2fs_df.c,v 1.15 2016/02/08 16:23:54 mmcc Exp $	*/

/*
 * This file is substantially derived from src/sys/ufs/ext2fs/ext2fs_vfsops.c:e2fs_statfs().
 * That file's copyright is applied here.
 */

/* Modified for EXT2FS on NetBSD by Manuel Bouyer, April 1997 */

/*
 * Copyright (c) 1989, 1991, 1993, 1994
 *      The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *      may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ffs_vfsops.c	8.14 (Berkeley) 11/28/94
 */

#include <sys/types.h>
#include <sys/mount.h>
#include <ufs/ext2fs/ext2fs.h>
#include <ufs/ext2fs/ext2fs_dinode.h>
#include <string.h>

int		e2fs_df(int, char *, struct statfs *);

extern int	bread(int, off_t, void *, int);
extern char	*getmntpt(char *);

static union {
	struct ext2fs ie_fs;
	char dummy[SBSIZE];
} sb;
#define sblock sb.ie_fs

int
e2fs_df(int rfd, char *file, struct statfs *sfsp)
{
	char *mntpt;
	u_int32_t overhead, overhead_per_group;
	int32_t	ncg, ngdb, ipb, itpg;

	if (bread(rfd, (off_t)SBOFF, &sblock, SBSIZE) == 0) {
		return (-1);
	}
	if ((sblock.e2fs_magic != E2FS_MAGIC) ||
	    (sblock.e2fs_rev != E2FS_REV0 && sblock.e2fs_rev != E2FS_REV1)) {
		return (-1);
	}
	sfsp->f_flags = 0;	/* The fs is not mapped, so no flags */
	sfsp->f_bsize = 1024 << sblock.e2fs_log_bsize;
	sfsp->f_iosize = 1024 << sblock.e2fs_log_bsize;

	if ((ipb = sfsp->f_bsize / sizeof(struct ext2fs_dinode)) == 0)
		return (-1);
	itpg = sblock.e2fs_ipg / ipb;

	ncg = howmany(sblock.e2fs_bcount - sblock.e2fs_first_dblock,
		sblock.e2fs_bpg);
	ngdb = howmany(ncg, sfsp->f_bsize / sizeof(struct ext2_gd));
	overhead_per_group = 1 /* super block */ +
					ngdb +
					1 /* block bitmap */ +
					1 /* inode bitmap */ +
					itpg;
	overhead = sblock.e2fs_first_dblock + ncg * overhead_per_group;

	sfsp->f_blocks = sblock.e2fs_bcount - overhead;
	sfsp->f_bfree = sblock.e2fs_fbcount;
	sfsp->f_bavail = sfsp->f_bfree - sblock.e2fs_rbcount;
	sfsp->f_files = sblock.e2fs_icount;
	sfsp->f_ffree = sblock.e2fs_ficount;
	sfsp->f_fsid.val[0] = 0;
	sfsp->f_fsid.val[1] = 0;
	if ((mntpt = getmntpt(file)) == 0)
		mntpt = "";
	strlcpy(sfsp->f_mntonname, mntpt, sizeof(sfsp->f_mntonname));
	strlcpy(sfsp->f_mntfromname, file, sizeof(sfsp->f_mntfromname));
	strlcpy(sfsp->f_fstypename, MOUNT_EXT2FS, sizeof(sfsp->f_fstypename));
	return (0);
}
@


1.15
log
@remove needless headers

ok tb@@, from Michal Mazurek
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.14 2015/11/27 13:49:41 millert Exp $	*/
a44 2
#include <unistd.h>
#include <stdlib.h>
@


1.14
log
@Use strlcpy to copy strings in struct mount, not memmove.  Avoids
reading past the end of a buffer.  Problem found and OK jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.13 2015/03/01 20:59:05 tobias Exp $	*/
a47 2
#include <fcntl.h>
#include <fstab.h>
@


1.13
log
@Avoid SIGFPE when parsing an invalid ext2fs through a raw device operation.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.12 2015/01/16 06:39:31 deraadt Exp $	*/
d103 3
a105 3
	memmove(&sfsp->f_mntonname[0], mntpt, MNAMELEN);
	memmove(&sfsp->f_mntfromname[0], file, MNAMELEN);
	strlcpy(sfsp->f_fstypename, MOUNT_EXT2FS, MFSNAMELEN);
@


1.12
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.11 2004/09/14 22:46:04 deraadt Exp $	*/
d80 3
a82 2
	ipb = sfsp->f_bsize / sizeof(struct ext2fs_dinode);
	itpg = sblock.e2fs_ipg/ipb;
@


1.11
log
@do not alias unions between files (lint hates it)
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.10 2003/06/02 23:32:07 millert Exp $	*/
d41 1
a41 1
#include <sys/param.h>
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.9 2002/07/04 04:26:39 deraadt Exp $	*/
d56 1
a56 1
union {
@


1.9
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.8 2002/02/16 21:27:06 millert Exp $	*/
d22 1
a22 5
 * 3. All advertising materials mentioning features or use of this software
 *      must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.7 2001/05/11 18:40:46 mickey Exp $	*/
d67 1
a67 4
e2fs_df(rfd, file, sfsp)
	int rfd;
	char *file;
	struct statfs *sfsp;
@


1.7
log
@use strlcpy instead of strncpy+a[len-1]='\0'
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_df.c,v 1.6 2001/01/28 23:04:55 niklas Exp $	*/
d55 1
a55 1
int		e2fs_df __P((int, char *, struct statfs *));
d57 2
a58 2
extern int	bread __P((int, off_t, void *, int));
extern char	*getmntpt __P((char *));
@


1.6
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d111 1
a111 2
	strncpy(sfsp->f_fstypename, MOUNT_EXT2FS, MFSNAMELEN-1);
	sfsp->f_fstypename[MFSNAMELEN-1] = '\0';
@


1.5
log
@Support for ext2fs rev. 1
@
text
@d1 2
@


1.4
log
@New struct statfs with mount options.  NOTE: this replaces statfs(2),
fstatfs(2), and getfsstat(2) so you will need to build a new kernel
before doing a "make build" or you will get "unimplemented syscall" errors.

The new struct statfs has the following featuires:
o Has a u_int32_t flags field--now softdep can have a real flag.

o Uses u_int32_t instead of longs (nicer on the alpha).  Note: the man
page used to lie about setting invalid/unused fields to -1.  SunOS does
that but our code never has.

o Gets rid of f_type completely.  It hasn't been used since NetBSD 0.9
and having it there but always 0 is confusing.  It is conceivable
that this may cause some old code to not compile but that is better
than silently breaking.

o Adds a mount_info union that contains the FSTYPE_args struct.  This
means that "mount" can now tell you all the options a filesystem was
mounted with.  This is especially nice for NFS.

Other changes:
o The linux statfs emulation didn't convert between BSD fs names
  and linux f_type numbers.  Now it does, since the BSD f_type
  number is useless to linux apps (and has been removed anyway)

o FreeBSD's struct statfs is different from our (both old and new)
and thus needs conversion.  Previously, the OpenBSD syscalls
were used without any real translation.

o mount(8) will now show extra info when invoked with no arguments.
However, to see *everything* you need to use the -v (verbose) flag.
@
text
@d78 1
a78 1
			(sblock.e2fs_rev != E2FS_REV)) {
@


1.3
log
@tabify
@
text
@a80 1
	sfsp->f_type = 0;	/* Unused field, set to 0 */
@


1.2
log
@Wall
@
text
@d40 1
a40 1
 *      @@(#)ffs_vfsops.c        8.14 (Berkeley) 11/28/94
d92 1
a92 1
        overhead_per_group = 1 /* super block */ +
@


1.1
log
@Better support for unmounted filesystems (i.e. df /dev/rsd0a):
- interpret the superblock of lfs, ext2fs, and ffs filesystems.
- never mount() an offline filesystem, always read its superblock.
- use the same algorithm as statfs() for ffs, get the same answers.

  Even so, now I'm really unsure this code should remain in df.
  Similar functionality should be added to dumpfs or fsck instead.
@
text
@a42 2
#include <unistd.h>
#include <fcntl.h>
a44 1
#include <fstab.h>
d47 5
@
