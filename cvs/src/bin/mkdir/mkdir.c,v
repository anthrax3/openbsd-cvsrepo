head	1.30;
access;
symbols
	OPENBSD_6_1:1.30.0.2
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.25.0.12
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.4
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.8
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.24.0.14
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.12
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.10
	OPENBSD_5_0:1.24.0.8
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.6
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.23.0.6
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.2
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.21.0.4
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.2
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.19.0.2
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.18.0.4
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.17.0.8
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.6
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.4
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2016.10.19.18.20.25;	author schwarze;	state Exp;
branches;
next	1.29;
commitid	0nfxWLL3tqkKYGhB;

1.29
date	2015.10.23.01.00.16;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	flHuA0iRXFShzI7w;

1.28
date	2015.10.10.20.18.30;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	QjQod45GFoW0lZGP;

1.27
date	2015.10.09.01.37.06;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	sbrB3Q5CNxcwZpfU;

1.26
date	2015.10.07.14.17.18;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	PQ5GfxRlFxCrf4fO;

1.25
date	2013.04.02.20.26.17;	author naddy;	state Exp;
branches;
next	1.24;

1.24
date	2009.10.27.23.59.22;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2008.09.30.23.25.31;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.30.16.01.56;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2008.02.13.14.50.51;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2008.01.02.09.27.02;	author chl;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.06.19.16.05;	author sobrado;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.24.04.17.26;	author ray;	state Exp;
branches;
next	1.17;

1.17
date	2004.07.01.18.25.47;	author otto;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.29.00.24.15;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.23.32.08;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.04.04.26.40;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.09.05.34.26;	author todd;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.27.07;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.16.18.44.21;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.06.13.29.08;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.02.05.09.01;	author ericj;	state Exp;
branches;
next	1.8;

1.8
date	98.09.26.09.04.43;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.01.25.21.54.49;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.09.01.18.29.39;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.07.23.14.45.15;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.08.14.03.49.14;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.12.40.58;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.20.24;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.15;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Delete useless setlocale(3) in src/bin/.
Minor cleanup while here: return from main, static void __dead usage, etc.
Based on a patch from Jan Stary <hans at stare dot cz>.
Feedback and OK tb@@, OK millert@@.
@
text
@/*	$OpenBSD: mkdir.c,v 1.29 2015/10/23 01:00:16 deraadt Exp $	*/
/*	$NetBSD: mkdir.c,v 1.14 1995/06/25 21:59:21 mycroft Exp $	*/

/*
 * Copyright (c) 1983, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

extern char *__progname;

int	mkpath(char *, mode_t, mode_t);
static void __dead usage(void);

int
main(int argc, char *argv[])
{
	int ch, rv, exitval, pflag;
	void *set;
	mode_t mode, dir_mode;

	/*
	 * The default file mode is a=rwx (0777) with selected permissions
	 * removed in accordance with the file mode creation mask.  For
	 * intermediate path name components, the mode is the default modified
	 * by u+wx so that the subdirectories can always be created.
	 */
	mode = 0777 & ~umask(0);
	dir_mode = mode | S_IWUSR | S_IXUSR;

	pflag = 0;
	while ((ch = getopt(argc, argv, "m:p")) != -1)
		switch(ch) {
		case 'p':
			pflag = 1;
			break;
		case 'm':
			if ((set = setmode(optarg)) == NULL)
				errx(1, "invalid file mode: %s", optarg);
			mode = getmode(set, S_IRWXU | S_IRWXG | S_IRWXO);
			free(set);
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if ((mode & (S_ISUID | S_ISGID | S_ISTXT)) == 0) {
		if (pledge("stdio rpath cpath fattr", NULL) == -1)
			err(1, "pledge");
	}

	if (*argv == NULL)
		usage();

	for (exitval = 0; *argv != NULL; ++argv) {
		char *slash;

		/* Remove trailing slashes, per POSIX. */
		slash = strrchr(*argv, '\0');
		while (--slash > *argv && *slash == '/')
			*slash = '\0';

		if (pflag) {
			rv = mkpath(*argv, mode, dir_mode);
		} else {
			rv = mkdir(*argv, mode);
			/*
			 * The mkdir() and umask() calls both honor only the
			 * low nine bits, so if you try to set a mode including
			 * the sticky, setuid, setgid bits you lose them. Don't
			 * do this unless the user has specifically requested
			 * a mode as chmod will (obviously) ignore the umask.
			 */
			if (rv == 0 && mode > 0777)
				rv = chmod(*argv, mode);
		}
		if (rv < 0) {
			warn("%s", *argv);
			exitval = 1;
		}
	}
	return exitval;
}

/*
 * mkpath -- create directories.
 *	path     - path
 *	mode     - file mode of terminal directory
 *	dir_mode - file mode of intermediate directories
 */
int
mkpath(char *path, mode_t mode, mode_t dir_mode)
{
	struct stat sb;
	char *slash;
	int done;

	slash = path;

	for (;;) {
		slash += strspn(slash, "/");
		slash += strcspn(slash, "/");

		done = (*slash == '\0');
		*slash = '\0';

		if (mkdir(path, done ? mode : dir_mode) == 0) {
			if (mode > 0777 && chmod(path, mode) < 0)
				return (-1);
		} else {
			int mkdir_errno = errno;

			if (stat(path, &sb)) {
				/* Not there; use mkdir()s errno */
				errno = mkdir_errno;
				return (-1);
			}
			if (!S_ISDIR(sb.st_mode)) {
				/* Is there, but isn't a directory */
				errno = ENOTDIR;
				return (-1);
			}
		}

		if (done)
			break;

		*slash = '/';
	}

	return (0);
}

static void __dead
usage(void)
{
	(void)fprintf(stderr, "usage: %s [-p] [-m mode] directory ...\n",
	    __progname);
	exit(1);
}
@


1.29
log
@correct precedence; from Ilya Kaliman
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.28 2015/10/10 20:18:30 deraadt Exp $	*/
a37 1
#include <locale.h>
d46 1
a46 1
void	usage(void);
a54 2
	setlocale(LC_ALL, "");

d117 1
a117 1
	exit(exitval);
d169 1
a169 1
void
@


1.28
log
@normalize the ordering of tame requests (particularily, "rpath wpath cpath",
which i have put in that order). this is not important, but helps look
for outliers which might be strange.  it hints that "ioctl" should be
reassessed in a few places, to see if "tty" is better; that "unix" may
be used in some places where "route" could now work.
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.27 2015/10/09 01:37:06 deraadt Exp $	*/
d85 1
a85 1
	if (mode & (S_ISUID | S_ISGID | S_ISTXT) == 0) {
@


1.27
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.26 2015/10/07 14:17:18 deraadt Exp $	*/
d86 1
a86 1
		if (pledge("stdio cpath rpath fattr", NULL) == -1)
@


1.26
log
@tame "stdio cpath rpath fattr", unless mkdir -m is passed a mode which
has setuid/setgid/sticky bits.
ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.25 2013/04/02 20:26:17 naddy Exp $	*/
d86 2
a87 2
		if (tame("stdio cpath rpath fattr", NULL) == -1)
			err(1, "tame");
@


1.25
log
@Revert rev 1.21 to fix a race condition where multiple mkdir -p's trying
to create overlapping paths in parallel could error out.  ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.24 2009/10/27 23:59:22 deraadt Exp $	*/
d84 5
@


1.24
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.23 2008/09/30 23:25:31 millert Exp $	*/
d129 1
a129 1
	int done, exists;
a139 7
		/* skip existing path components */
		exists = !stat(path, &sb);
		if (!done && exists && S_ISDIR(sb.st_mode)) {
			*slash = '/';
			continue;
		}

d144 5
a148 2
			if (!exists) {
				/* Not there */
@


1.23
log
@Fix a problem in the last commit.  Upon closer reading of POSIX, in
-p mode we only want to change the mode on directories we actually created.
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.22 2008/09/30 16:01:56 millert Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1992, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)mkdir.c	8.2 (Berkeley) 1/25/94";
#else
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.22 2008/09/30 16:01:56 millert Exp $";
#endif
#endif /* not lint */
@


1.22
log
@Fix "-m mode" in conjunction with the -p flag.  Also simplify the error
handling.  Closes PR 5908.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.21 2008/02/13 14:50:51 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.21 2008/02/13 14:50:51 millert Exp $";
d161 4
a164 1
		if (mkdir(path, done ? mode : dir_mode) < 0) {
d174 1
a174 5
			if (mode != (sb.st_mode & ALLPERMS))
				/* Is there, but mode is wrong */
				if (chmod(path, mode) < 0)
					return (-1);
			}
@


1.21
log
@Rework the fix in 1.20.  The original fix causes problems for systrace
policies since mkdir(2) will be called for each directory in the path,
even things like / or /usr.  We now use a hybrid approach uses stat(2)
until either we find something missing or we reach that last component.
Then we switch to calling mkdir().  Tested by bernd@@ and chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.20 2008/01/02 09:27:02 chl Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.20 2008/01/02 09:27:02 chl Exp $";
d66 1
a66 1
	int ch, exitval, pflag;
d111 1
a111 2
			if (mkpath(*argv, mode, dir_mode) < 0)
				exitval = 1;
d113 14
a126 16
			if (mkdir(*argv, mode) < 0) {
				warn("%s", *argv);
				exitval = 1;
			} else {
				/*
				 * The mkdir() and umask() calls both honor only the low
				 * nine bits, so if you try to set a mode including the
				 * sticky, setuid, setgid bits you lose them.  Don't do
				 * this unless the user has specifically requested a mode
				 * as chmod will (obviously) ignore the umask.
				 */
				if (mode > 0777 && chmod(*argv, mode) == -1) {
					warn("%s", *argv);
					exitval = 1;
				}
			}
a163 1
				warn("%s", path);
a168 1
				warn("%s", path);
d171 5
a175 1
		}
@


1.20
log
@fix PR 5141:
race condition in mkdir -p that may lead to an erroneous successful exit status.

reported by Ralf Wildenhues <Ralf.Wildenhues at gmx.de>

fix based on a suggested patch by Bruno Carnazzi <bcarnazzi at gmail.com>,
largely inspired by NetBSD mkdir()s implementation

looks OK otto@@ OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.19 2007/08/06 19:16:05 sobrado Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.19 2007/08/06 19:16:05 sobrado Exp $";
d146 1
a146 1
	int done;
d157 7
d165 2
a166 5
			int mkdir_errno = errno;

			if (stat(path, &sb)) {
				/* Not there; use mkdir()s errno */
				errno = mkdir_errno;
@


1.19
log
@the ellipsis is not an optional argument; while here, sync the usage
and synopsis of commands

lots of good ideas by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.18 2006/03/24 04:17:26 ray Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.18 2006/03/24 04:17:26 ray Exp $";
d157 12
a168 4
		if (stat(path, &sb)) {
			if (errno != ENOENT ||
			    (mkdir(path, done ? mode : dir_mode) &&
			    errno != EEXIST)) {
a171 3
		} else if (!S_ISDIR(sb.st_mode)) {
			warnx("%s: %s", path, strerror(ENOTDIR));
			return (-1);
@


1.18
log
@Make sure `path' variable is always NUL-terminated.

Totally different diff (but functionally equivalent) by Loic Tortay
and okayed by tedu@@.

``Looks sane to me'' moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.17 2004/07/01 18:25:47 otto Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.17 2004/07/01 18:25:47 otto Exp $";
d181 2
a182 1
	(void)fprintf(stderr, "usage: %s [-p] [-m mode] dirname ...\n", __progname);
@


1.17
log
@setmode(3) returns void *, not mode_t *.  ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.16 2003/07/29 00:24:15 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.16 2003/07/29 00:24:15 deraadt Exp $";
d146 1
a146 1
	int done = 0;
d150 1
a150 1
	while (!done) {
d168 3
@


1.16
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.15 2003/06/02 23:32:08 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.15 2003/06/02 23:32:08 millert Exp $";
d67 1
a67 1
	mode_t *set;
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.14 2002/07/04 04:26:40 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.14 2002/07/04 04:26:40 deraadt Exp $";
d117 8
a124 8
		 	} else {
                       		/*
                 		 * The mkdir() and umask() calls both honor only the low
                 		 * nine bits, so if you try to set a mode including the
                 		 * sticky, setuid, setgid bits you lose them.  Don't do
                 		 * this unless the user has specifically requested a mode
                 		 * as chmod will (obviously) ignore the umask.
                 		 */
d129 1
a129 1
			}	
@


1.14
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.13 2002/06/09 05:34:26 todd Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.13 2002/06/09 05:34:26 todd Exp $";
@


1.13
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.12 2002/02/16 21:27:07 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.12 2002/02/16 21:27:07 millert Exp $";
d68 1
a68 3
main(argc, argv)
	int argc;
	char *argv[];
d146 1
a146 4
mkpath(path, mode, dir_mode)
	char *path;
	mode_t mode;
	mode_t dir_mode;
d180 1
a180 1
usage()
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.11 2002/01/16 18:44:21 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.11 2002/01/16 18:44:21 mpech Exp $";
d142 1
a142 1
 * mkpath -- create directories.  
@


1.11
log
@missed some registers, kill'em!

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.10 2001/09/06 13:29:08 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.10 2001/09/06 13:29:08 mpech Exp $";
d64 2
a65 2
int	mkpath __P((char *, mode_t, mode_t));
void	usage __P((void));
@


1.10
log
@o) __progname aria;

millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.9 2000/02/02 05:09:01 ericj Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.9 2000/02/02 05:09:01 ericj Exp $";
d109 1
a109 1
		register char *slash;
d154 1
a154 1
	register char *slash;
@


1.9
log
@
Make mkdir -m 1777 foo and the like work. From how Netbsd/Freebsd do it.
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.8 1998/09/26 09:04:43 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.8 1998/09/26 09:04:43 deraadt Exp $";
d62 2
d187 1
a187 2

	(void)fprintf(stderr, "usage: mkdir [-p] [-m mode] dirname ...\n");
@


1.8
log
@more setmode() leaks -- kill 'em all
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.7 1998/01/25 21:54:49 niklas Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.7 1998/01/25 21:54:49 niklas Exp $";
d121 13
a133 1
			}
@


1.7
log
@Fix a race where a dir might have been created after a stat call, but before
our mkdir
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.6 1997/09/01 18:29:39 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.6 1997/09/01 18:29:39 deraadt Exp $";
d95 1
@


1.6
log
@i am bored enough to fix terminal space/tab uglies
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.5 1997/07/23 14:45:15 kstailey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.5 1997/07/23 14:45:15 kstailey Exp $";
d152 3
a154 1
			if (errno != ENOENT || mkdir(path, done ? mode : dir_mode)) {
@


1.5
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.4 1996/08/14 03:49:14 tholo Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.4 1996/08/14 03:49:14 tholo Exp $";
d104 1
a104 1
	
d160 1
a160 1
		    
@


1.4
log
@Get mode of last directory right when doing mkdir -p; NetBSD PR #2686
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.3 1996/08/02 12:40:58 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.3 1996/08/02 12:40:58 deraadt Exp $";
d157 1
a157 1
		        warnx("%s: %s", path, strerror(ENOTDIR));
@


1.3
log
@zap getopt() case of -?, come on, it is the default!
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.2 1996/06/23 14:20:24 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.2 1996/06/23 14:20:24 deraadt Exp $";
d152 1
a152 1
			if (errno != ENOENT || mkdir(path, dir_mode)) {
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: mkdir.c,v 1.14 1995/06/25 21:59:21 mycroft Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mkdir.c,v 1.14 1995/06/25 21:59:21 mycroft Exp $";
a95 1
		case '?':
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: mkdir.c,v 1.14 1995/06/25 21:59:21 mycroft Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
