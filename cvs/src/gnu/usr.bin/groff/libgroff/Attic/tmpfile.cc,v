head	1.3;
access;
symbols
	OPENBSD_4_9:1.2.0.46
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.44
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.40
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.42
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.38
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.36
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.34
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.32
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.30
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.28
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.26
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.24
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.22
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.20
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.18
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.16
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	groff_1_15:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	groff_1_11a:1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	groff_1_10:1.1.1.1
	gnu:1.1.1;
locks; strict;
comment	@// @;


1.3
date	2011.03.12.19.04.00;	author schwarze;	state dead;
branches;
next	1.2;

1.2
date	2000.04.09.08.25.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.09.14.19.00.52;	author etheisen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.14.19.00.52;	author etheisen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Replaced by mandoc(1) for base and xenocara purposes,
and comes with 4.9 ports.
ok deraadt@@
@
text
@// -*- C++ -*-
/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.
     Written by James Clark (jjc@@jclark.com)

This file is part of groff.

groff is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

groff is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with groff; see the file COPYING.  If not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */

#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>

#include "posix.h"
#include "lib.h"
#include "errarg.h"
#include "error.h"

extern "C" {
  // Sun's stdlib.h fails to declare this.
  char *mktemp(char *);
  int mkstemp(char *);
}

// If this is set, create temporary files there
#define GROFF_TMPDIR_ENVVAR "GROFF_TMPDIR"
// otherwise if this is set, create temporary files there
#define TMPDIR_ENVVAR "TMPDIR"
// otherwise create temporary files here.
#define DEFAULT_TMPDIR "/tmp"
// Use this as the prefix for temporary filenames.
#define TMPFILE_PREFIX  "groff"

// Open a temporary file with fatal error on failure.

FILE *xtmpfile()
{
  const char *dir = getenv(GROFF_TMPDIR_ENVVAR);
  if (!dir) {
    dir = getenv(TMPDIR_ENVVAR);
    if (!dir)
      dir = DEFAULT_TMPDIR;
  }
  
  const char *p = strrchr(dir, '/');
  int needs_slash = (!p || p[1]);
  char *templ = new char[strlen(dir) + needs_slash
			    + sizeof(TMPFILE_PREFIX) - 1 + 6 + 1];
  strcpy(templ, dir);
  if (needs_slash)
    strcat(templ, "/");
  strcat(templ, TMPFILE_PREFIX);
  strcat(templ, "XXXXXX");

#ifdef HAVE_MKSTEMP
  errno = 0;
  int fd = mkstemp(templ);
  if (fd < 0)
    fatal("cannot create temporary file: %1", strerror(errno));
#else /* not HAVE_MKSTEMP */
  if (!mktemp(templ) || !templ[0])
    fatal("cannot create file name for temporary file");
  errno = 0;
  int fd = open(templ, O_CREAT|O_EXCL|O_RDWR, S_IRUSR|S_IWUSR);
  if (fd < 0)
    fatal("cannot open `%1': %2", templ, strerror(errno));
#endif /* not HAVE_MKSTEMP */
  errno = 0;
  FILE *fp = fdopen(fd, "w+");
  if (!fp)
    fatal("fdopen: %1", strerror(errno));
  if (unlink(templ) < 0)
    error("cannot unlink `%1': %2", templ, strerror(errno));
  a_delete templ;
  return fp;
}

#if 0
// If you're not running Unix, the following will do:
FILE *xtmpfile()
{
  FILE *fp = tmpfile();
  if (!fp)
    fatal("couldn't create temporary file");
  return fp;
}
#endif
@


1.2
log
@groff 1.15 plus local changes (insomnia strikes):
o moved *.man to *.$section_in and generate *.$section not *.n for bsd.man.mk
o modified groff Makefiles to not install man pages (we do it ourselves)
o use mkstemp everywhere
o don't install groff versions on mdoc macros, we want our own ones
@
text
@@


1.1
log
@Initial revision
@
text
@a71 4
  errno = 0;
  FILE *fp = fdopen(fd, "w+");
  if (!fp)
    fatal("fdopen: %1", strerror(errno));
d76 2
a77 2
  FILE *fp = fopen(templ, "w+");
  if (!fp)
d80 4
@


1.1.1.1
log
@Third time because import sucks.
@
text
@@
