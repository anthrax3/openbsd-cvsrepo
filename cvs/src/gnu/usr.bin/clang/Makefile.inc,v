head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.4
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4;
locks; strict;
comment	@# @;


1.5
date	2017.04.17.15.53.21;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	CwS5CiKF5Bc2ksoZ;

1.4
date	2017.02.16.02.08.42;	author jsg;	state Exp;
branches;
next	1.3;
commitid	yiyzivvBxyKSBUhi;

1.3
date	2016.12.20.07.32.18;	author patrick;	state Exp;
branches;
next	1.2;
commitid	MwsOdXsvW2KW0H7Q;

1.2
date	2016.09.18.22.26.03;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	C8yHyXFMNyiK9cq4;

1.1
date	2016.09.05.10.56.48;	author pascal;	state Exp;
branches;
next	;
commitid	p5QyrbFA5GyiOio3;


desc
@@


1.5
log
@Change build infrastructure to allow building both gcc and clang.  This
doesn't actually flip the switch yet, so aarch64 continues to be the only
architecture for which we build clang.

ok jsg@@, deraadt@@
@
text
@# $OpenBSD: Makefile.inc,v 1.4 2017/02/16 02:08:42 jsg Exp $

LLVM_SRCS?=	${.CURDIR}/../../../llvm

.if ${COMPILER_VERSION:L} != "clang"
CC=		clang
CXX=		clang++
.endif

BOOTSTRAP_CLANG?=no
.if ${BOOTSTRAP_CLANG} == "yes"
CC=		egcc
CXX=		eg++
.endif

DEBUG=
NOPIE=

CLANG_INCLUDES=	-I${LLVM_SRCS}/tools/clang/include
CPPFLAGS+=	-I${LLVM_SRCS}/include -I${.CURDIR}/../include -I${.OBJDIR} \
		-I${.OBJDIR}/../include
CPPFLAGS+=	-DNDEBUG
CPPFLAGS+=	-D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS \
		-D__STDC_FORMAT_MACROS

.if ${MACHINE_ARCH} == "arm"
TRIPLE=		armv7-unknown-openbsd${OSREV}-gnueabi
.else
TRIPLE=		${MACHINE_ARCH}-unknown-openbsd${OSREV}
.endif
CPPFLAGS+=	-DLLVM_DEFAULT_TARGET_TRIPLE=\"${TRIPLE}\"
CPPFLAGS+=	-DLLVM_HOST_TRIPLE=\"${TRIPLE}\"
CPPFLAGS+=	-DLLVM_PREFIX=\"/usr\"
.include "Makefile.arch"
CPPFLAGS+=-DLLVM_NATIVE_ARCH=\"${LLVM_ARCH}\"
CPPFLAGS+=-DLLVM_NATIVE_ASMPARSER=LLVMInitialize${LLVM_ARCH}AsmParser
CPPFLAGS+=-DLLVM_NATIVE_ASMPRINTER=LLVMInitialize${LLVM_ARCH}AsmPrinter
CPPFLAGS+=-DLLVM_NATIVE_DISASSEMBLER=LLVMInitialize${LLVM_ARCH}Disassembler
CPPFLAGS+=-DLLVM_NATIVE_TARGET=LLVMInitialize${LLVM_ARCH}Target
CPPFLAGS+=-DLLVM_NATIVE_TARGETINFO=LLVMInitialize${LLVM_ARCH}TargetInfo
CPPFLAGS+=-DLLVM_NATIVE_TARGETMC=LLVMInitialize${LLVM_ARCH}TargetMC

# upstream defaults
CFLAGS+=	-ffunction-sections
.if ${MACHINE_ARCH} != "powerpc"
# XXX
CFLAGS+=        -fdata-sections
.endif
CXXFLAGS+=	-std=c++11
CXXFLAGS+=	-fvisibility-inlines-hidden
CXXFLAGS+=	-fno-exceptions -fno-rtti
# warnings (from upstream)
CXXFLAGS+=	-Wall -W -Wno-unused-parameter -Wwrite-strings -Wcast-qual \
		-Wno-missing-field-initializers -pedantic -Wno-long-long \
		-Wdelete-non-virtual-dtor -Wno-comment

.for lib in ${LLVM_LIBDEPS}
DPADD+=	${.OBJDIR}/../lib${lib}/lib${lib}.a
LDADD+=	${.OBJDIR}/../lib${lib}/lib${lib}.a
.endfor
@


1.4
log
@clang is installed as cc and c++ there is no need to set CC and CXX to
clang and clang++.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.3 2016/12/20 07:32:18 patrick Exp $
d4 5
@


1.3
log
@Compile clang with clang by default instead of egcc.  This allows our
build system to selfhost itself after the initial clang bootstrap
without relying on an external compiler.  Setting BOOTSTRAP_CLANG
allows bootstrapping clang with egcc.

ok kettenis@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.2 2016/09/18 22:26:03 kettenis Exp $
a8 3
.else
CC=		clang
CXX=		clang++
@


1.2
log
@On arm, set the "triple" to armv7-unknown-openbsdX.Y-gnueabi.  This makes the
compiler generate code for armv7 by default (giving us proper atomic
operations) and selects the right default ABI.

ok patrick@@, tom@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.1 2016/09/05 10:56:48 pascal Exp $
d5 2
d9 4
@


1.1
log
@LLVM/Clang build system.  This only builds the bare minimum of what is needed
to get a working "clang" binary.

Note that you need GCC from ports to bootstrap clang.

looks good to patrick@@, ok jsg@@ kettenis@@
@
text
@d1 1
a1 1
# $OpenBSD$
d18 3
d22 1
@

