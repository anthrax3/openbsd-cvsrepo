head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.6.0.66
	OPENBSD_6_1_BASE:1.1.1.6
	OPENBSD_6_0:1.1.1.6.0.62
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.58
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.60
	OPENBSD_5_8_BASE:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.52
	OPENBSD_5_7_BASE:1.1.1.6
	OPENBSD_5_6:1.1.1.6.0.56
	OPENBSD_5_6_BASE:1.1.1.6
	OPENBSD_5_5:1.1.1.6.0.54
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.50
	OPENBSD_5_4_BASE:1.1.1.6
	OPENBSD_5_3:1.1.1.6.0.48
	OPENBSD_5_3_BASE:1.1.1.6
	OPENBSD_5_2:1.1.1.6.0.46
	OPENBSD_5_2_BASE:1.1.1.6
	OPENBSD_5_1_BASE:1.1.1.6
	OPENBSD_5_1:1.1.1.6.0.44
	OPENBSD_5_0:1.1.1.6.0.42
	OPENBSD_5_0_BASE:1.1.1.6
	OPENBSD_4_9:1.1.1.6.0.40
	OPENBSD_4_9_BASE:1.1.1.6
	OPENBSD_4_8:1.1.1.6.0.38
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.34
	OPENBSD_4_7_BASE:1.1.1.6
	OPENBSD_4_6:1.1.1.6.0.36
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.32
	OPENBSD_4_5_BASE:1.1.1.6
	OPENBSD_4_4:1.1.1.6.0.30
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.28
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.26
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.24
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.22
	OPENBSD_4_0_BASE:1.1.1.6
	OPENBSD_3_9:1.1.1.6.0.20
	OPENBSD_3_9_BASE:1.1.1.6
	OPENBSD_3_8:1.1.1.6.0.18
	OPENBSD_3_8_BASE:1.1.1.6
	OPENBSD_3_7:1.1.1.6.0.16
	OPENBSD_3_7_BASE:1.1.1.6
	OPENBSD_3_6:1.1.1.6.0.14
	OPENBSD_3_6_BASE:1.1.1.6
	OPENBSD_3_5:1.1.1.6.0.12
	OPENBSD_3_5_BASE:1.1.1.6
	OPENBSD_3_4:1.1.1.6.0.10
	OPENBSD_3_4_BASE:1.1.1.6
	OPENBSD_3_3:1.1.1.6.0.8
	OPENBSD_3_3_BASE:1.1.1.6
	OPENBSD_3_2:1.1.1.6.0.6
	OPENBSD_3_2_BASE:1.1.1.6
	OPENBSD_3_1:1.1.1.6.0.4
	OPENBSD_3_1_BASE:1.1.1.6
	OPENBSD_3_0:1.1.1.6.0.2
	OPENBSD_3_0_BASE:1.1.1.6
	cvs-1-11-1p1:1.1.1.6
	OPENBSD_2_9:1.1.1.5.0.10
	OPENBSD_2_9_BASE:1.1.1.5
	cvs-1-11:1.1.1.5
	OPENBSD_2_8:1.1.1.5.0.8
	OPENBSD_2_8_BASE:1.1.1.5
	OPENBSD_2_7:1.1.1.5.0.6
	OPENBSD_2_7_BASE:1.1.1.5
	OPENBSD_2_6:1.1.1.5.0.4
	OPENBSD_2_6_BASE:1.1.1.5
	cvs-1-10-7:1.1.1.5
	OPENBSD_2_5:1.1.1.5.0.2
	OPENBSD_2_5_BASE:1.1.1.5
	cvs-1-10-5:1.1.1.5
	OPENBSD_2_4:1.1.1.4.0.4
	OPENBSD_2_4_BASE:1.1.1.4
	cvs-1-10:1.1.1.4
	cvs-1-9-28:1.1.1.4
	OPENBSD_2_3:1.1.1.4.0.2
	OPENBSD_2_3_BASE:1.1.1.4
	cvs-1-9-26:1.1.1.4
	cvs-1-9-24:1.1.1.4
	OPENBSD_2_2:1.1.1.3.0.2
	OPENBSD_2_2_BASE:1.1.1.3
	cvs-1-9-10:1.1.1.3
	OPENBSD_2_1:1.1.1.2.0.4
	OPENBSD_2_1_BASE:1.1.1.2
	cvs-1-9-8:1.1.1.2
	cvs-1-9-6:1.1.1.2
	cvs-1-9-4:1.1.1.2
	cvs-1-9-2:1.1.1.2
	cvs-1-9:1.1.1.2
	OPENBSD_2_0:1.1.1.2.0.2
	OPENBSD_2_0_BASE:1.1.1.2
	cvs-1-8-1:1.1.1.2
	cvs-1-8:1.1.1.2
	cvs-1-7-2:1.1.1.2
	cvs-1-7-1:1.1.1.1
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	95.12.19.09.21.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.44;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.04.27.19.43.16;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.06.28.03.29.39;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	98.02.22.08.22.24;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.02.28.21.34.38;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2001.09.28.22.45.42;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * win32.c
 * - utility functions for cvs under win32
 *
 */

#include <ctype.h>

#define WIN32_LEAN_AND_MEAN
#include <windows.h>

#include <config.h>

unsigned sleep(unsigned seconds)
{
	Sleep(1000*seconds);
	return 0;
}

#if 0
/* This is available from the WinSock library.  */
int gethostname(char* name, int namelen)
{
	DWORD dw = namelen;
	BOOL ret = GetComputerName(name, &dw);
	namelen = dw;
	return (ret) ? 0 : -1;
}
#endif

char* win32getlogin()
{
	static char name[256];
	DWORD dw = 256;
	GetUserName(name, &dw);
	return name;
}


pid_t
getpid ()
{
    return (pid_t) GetCurrentProcessId();
}
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@a7 2
#include <stdio.h>
#include <conio.h>
a43 19
}

char *
getpass (const char *prompt)
{
    static char pwd_buf[128];
    size_t i;

    fputs (prompt, stderr);
    fflush (stderr);
    for (i = 0; i < sizeof (pwd_buf) - 1; ++i)
    {
	pwd_buf[i] = _getch ();
	if (pwd_buf[i] == '\r')
	    break;
    }
    pwd_buf[i] = '\0';
    fputs ("\n", stderr);
    return pwd_buf;
@


1.1.1.3
log
@Latest version from Cyclic Software
@
text
@a15 12
void
init_winsock ()
{
    WSADATA data;

    if (WSAStartup (MAKEWORD (1, 1), &data))
    {
	fprintf (stderr, "cvs: unable to initialize winsock\n");
	exit (1);
    }
}

@


1.1.1.4
log
@Latest version from Cyclic
@
text
@a14 2
#include <winsock.h>
#include <stdlib.h>
d45 1
a45 1
char *win32getlogin()
d47 3
a49 6
    static char name[256];
    DWORD dw = 256;
    GetUserName (name, &dw);
    if (name[0] == '\0')
	return NULL;
    else
@


1.1.1.5
log
@Latest version from Cyclic
@
text
@a17 2
#include "cvs.h"

a29 19
void
wnt_cleanup (void)
{
    if (WSACleanup ())
    {
#ifdef SERVER_ACTIVE
	if (server_active || error_use_protocol)
	    /* FIXME: how are we supposed to report errors?  As of now
	       (Sep 98), error() can in turn call us (if it is out of
	       memory) and in general is built on top of lots of
	       stuff.  */
	    ;
	else
#endif
	    fprintf (stderr, "cvs: cannot WSACleanup: %s\n",
		     sock_strerror (WSAGetLastError ()));
    }
}

d37 1
a37 9

/* WinSock has a gethostname.  But note that WinSock gethostname may
   want to talk to the network, which is kind of bogus in the
   non-client/server case.  I'm not sure I can think of any obvious
   solution.  Most of the ways I can think of to figure out whether
   to call gethostname or GetComputerName seem kind of kludgey, and/or
   might result in picking the name in a potentially confusing way
   (I'm not sure exactly how the name(s) are set).  */

@


1.1.1.6
log
@Latest from Cyclic Software
@
text
@a56 10
/*
 * Sleep at least useconds microseconds.
 */
int usleep(unsigned long useconds)
{
    /* Not very accurate, but it gets the job done */
    Sleep(useconds/1000 + (useconds%1000 ? 1 : 0));
    return 0;
}

@


