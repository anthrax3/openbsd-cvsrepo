head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.64
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.60
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.62
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.54
	OPENBSD_5_7_BASE:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.58
	OPENBSD_5_6_BASE:1.1.1.5
	OPENBSD_5_5:1.1.1.5.0.56
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.52
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.50
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.48
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.46
	OPENBSD_5_0:1.1.1.5.0.44
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.42
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.40
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.36
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.38
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.34
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.32
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.30
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.28
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.26
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.24
	OPENBSD_4_0_BASE:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.22
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.20
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.18
	OPENBSD_3_7_BASE:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.16
	OPENBSD_3_6_BASE:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.14
	OPENBSD_3_5_BASE:1.1.1.5
	OPENBSD_3_4:1.1.1.5.0.12
	OPENBSD_3_4_BASE:1.1.1.5
	OPENBSD_3_3:1.1.1.5.0.10
	OPENBSD_3_3_BASE:1.1.1.5
	OPENBSD_3_2:1.1.1.5.0.8
	OPENBSD_3_2_BASE:1.1.1.5
	OPENBSD_3_1:1.1.1.5.0.6
	OPENBSD_3_1_BASE:1.1.1.5
	OPENBSD_3_0:1.1.1.5.0.4
	OPENBSD_3_0_BASE:1.1.1.5
	cvs-1-11-1p1:1.1.1.5
	OPENBSD_2_9:1.1.1.5.0.2
	OPENBSD_2_9_BASE:1.1.1.5
	cvs-1-11:1.1.1.5
	OPENBSD_2_8:1.1.1.4.0.12
	OPENBSD_2_8_BASE:1.1.1.4
	OPENBSD_2_7:1.1.1.4.0.10
	OPENBSD_2_7_BASE:1.1.1.4
	OPENBSD_2_6:1.1.1.4.0.8
	OPENBSD_2_6_BASE:1.1.1.4
	cvs-1-10-7:1.1.1.4
	OPENBSD_2_5:1.1.1.4.0.6
	OPENBSD_2_5_BASE:1.1.1.4
	cvs-1-10-5:1.1.1.4
	OPENBSD_2_4:1.1.1.4.0.4
	OPENBSD_2_4_BASE:1.1.1.4
	cvs-1-10:1.1.1.4
	cvs-1-9-28:1.1.1.4
	OPENBSD_2_3:1.1.1.4.0.2
	OPENBSD_2_3_BASE:1.1.1.4
	cvs-1-9-26:1.1.1.4
	cvs-1-9-24:1.1.1.4
	OPENBSD_2_2:1.1.1.3.0.2
	OPENBSD_2_2_BASE:1.1.1.3
	cvs-1-9-10:1.1.1.3
	OPENBSD_2_1:1.1.1.2.0.2
	OPENBSD_2_1_BASE:1.1.1.2
	cvs-1-9-8:1.1.1.2
	cvs-1-9-6:1.1.1.2
	cvs-1-9-4:1.1.1.2
	cvs-1-9-2:1.1.1.2
	cvs-1-9:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	cvs-1-8-1:1.1.1.1
	cvs-1-8:1.1.1.1
	cvs-1-7-2:1.1.1.1
	cvs-1-7-1:1.1.1.1
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	95.12.19.09.21.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.44;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.02.21.06.38.34;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.06.28.03.29.37;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	98.02.22.08.22.21;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2001.02.10.18.57.58;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*  pwd.c - Try to approximate UN*X's getuser...() functions under MS-DOS.
    Copyright (C) 1990 by Thorsten Ohl, td12@@ddagsi3.bitnet

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 1, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

    $Header: /u/src/master/ccvs/windows-NT/pwd.c,v 1.2 1995/08/30 20:44:05 jimb Exp $
*/

/* This 'implementation' is conjectured from the use of this functions in
   the RCS and BASH distributions.  Of course these functions don't do too
   much useful things under MS-DOS, but using them avoids many "#ifdef
   MSDOS" in ported UN*X code ...  */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pwd.h>

char* win32getlogin();
static char *lookup_env (char **);

/* where people might scribble their name into the environment ... */

static char *login_strings[] =
{
  "LOGIN", "USER", "MAILNAME", (char *) 0
};

static char *group_strings[] =
{
  "GROUP", (char *) 0
};


static char *anonymous = "anonymous";	/* if all else fails ... */

static char *home_dir = ".";	/* we feel (no|every)where at home */
static char *login_shell = "not command.com!";

static char *login = (char *) 0;/* cache the names here	*/
static char *group = (char *) 0;

static struct passwd pw;	/* should we return a malloc()'d structure   */
static struct group gr;		/* instead of pointers to static structures? */

/* return something like a username in a (butchered!) passwd structure. */
struct passwd *
getpwuid (int uid)
{
  pw.pw_name = getlogin ();
  pw.pw_dir = home_dir;
  pw.pw_shell = login_shell;
  pw.pw_uid = 0;

  return &pw;
}

struct passwd *
getpwnam (char *name)
{
  return (struct passwd *) 0;
}

/* return something like a groupname in a (butchered!) group structure. */
struct group *
getgrgid (int uid)
{
  gr.gr_name = getgr_name ();
  gr.gr_gid = 0;

  return &gr;
}

struct group *
getgrnam (char *name)
{
  return (struct group *) 0;
}

/* return something like a username. */
char *
getlogin ()
{
  if (!login)
     login = win32getlogin();

  if (!login)			/* have we been called before? */
    login = lookup_env (login_strings);

  if (!login)			/* have we been successful? */
    login = anonymous;

  return login;
}

/* return something like a group.  */
char *
getgr_name ()
{
  if (!group)			/* have we been called before? */
    group = lookup_env (group_strings);

  if (!group)			/* have we been successful? */
    group = anonymous;

  return group;
}

/* return something like a uid.  */
int
getuid ()
{
  return 0;			/* every user is a super user ... */
}

int
getgid ()
{
  return 0;
}

int
geteuid ()
{
  return 0;
}

int
getegid ()
{
  return 0;
}

struct passwd *
getpwent ()
{
  return (struct passwd *) 0;
}

void
setpwent ()
{
}

void
endpwent ()
{
}

void
endgrent ()
{
}

/* return groups.  */
int
getgroups (int ngroups, int *groups)
{
  *groups = 0;
  return 1;
}

/* lookup environment.  */
static char *
lookup_env (char *table[])
{
  char *ptr;
  char *entry;
  size_t len;

  while (*table && !(ptr = getenv (*table++))) ;	/* scan table */

  if (!ptr)
    return (char *) 0;

  len = strcspn (ptr, " \n\t\n\r");	/* any WS? 	  */
  if (!(entry = malloc (len + 1)))
    {
      fprintf (stderr, "Out of memory.\nStop.");
      exit (-1);
    }

  strncpy (entry, ptr, len);
  entry[len] = '\0';

  return entry;

}

/*
 * Local Variables:
 * mode:C
 * ChangeLog:ChangeLog
 * compile-command:make
 * End:
 */
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@New release from Cyclic Software
@
text
@d14 5
a18 1
    $Header: /u/src/master/ccvs/windows-NT/pwd.c,v 1.3 1997/01/02 19:02:56 kingdon Exp $
@


1.1.1.3
log
@Latest version from Cyclic Software
@
text
@d14 1
a14 1
    $Header: /home2/cvsroot/ccvs/windows-NT/pwd.c,v 1.3 1997/01/02 19:02:56 kingdon Exp $
@


1.1.1.4
log
@Latest version from Cyclic
@
text
@d12 4
a15 1
    GNU General Public License for more details.  */
@


1.1.1.5
log
@Latest from Cyclic Software
@
text
@a89 1
  /* This is how a windows user would override their login name. */
d91 3
d96 1
a96 6
  /* In the absence of user override, ask the operating system. */
  if (!login)
     login = win32getlogin();

  /* If all else fails, fall back on Old Faithful. */
  if (!login)
@


