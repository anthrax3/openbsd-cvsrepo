head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.18.0.64
	OPENBSD_6_1_BASE:1.1.1.18
	OPENBSD_6_0:1.1.1.18.0.62
	OPENBSD_6_0_BASE:1.1.1.18
	OPENBSD_5_9:1.1.1.18.0.58
	OPENBSD_5_9_BASE:1.1.1.18
	OPENBSD_5_8:1.1.1.18.0.60
	OPENBSD_5_8_BASE:1.1.1.18
	OPENBSD_5_7:1.1.1.18.0.52
	OPENBSD_5_7_BASE:1.1.1.18
	OPENBSD_5_6:1.1.1.18.0.56
	OPENBSD_5_6_BASE:1.1.1.18
	OPENBSD_5_5:1.1.1.18.0.54
	OPENBSD_5_5_BASE:1.1.1.18
	OPENBSD_5_4:1.1.1.18.0.50
	OPENBSD_5_4_BASE:1.1.1.18
	OPENBSD_5_3:1.1.1.18.0.48
	OPENBSD_5_3_BASE:1.1.1.18
	OPENBSD_5_2:1.1.1.18.0.46
	OPENBSD_5_2_BASE:1.1.1.18
	OPENBSD_5_1_BASE:1.1.1.18
	OPENBSD_5_1:1.1.1.18.0.44
	OPENBSD_5_0:1.1.1.18.0.42
	OPENBSD_5_0_BASE:1.1.1.18
	OPENBSD_4_9:1.1.1.18.0.40
	OPENBSD_4_9_BASE:1.1.1.18
	OPENBSD_4_8:1.1.1.18.0.38
	OPENBSD_4_8_BASE:1.1.1.18
	OPENBSD_4_7:1.1.1.18.0.34
	OPENBSD_4_7_BASE:1.1.1.18
	OPENBSD_4_6:1.1.1.18.0.36
	OPENBSD_4_6_BASE:1.1.1.18
	OPENBSD_4_5:1.1.1.18.0.32
	OPENBSD_4_5_BASE:1.1.1.18
	OPENBSD_4_4:1.1.1.18.0.30
	OPENBSD_4_4_BASE:1.1.1.18
	OPENBSD_4_3:1.1.1.18.0.28
	OPENBSD_4_3_BASE:1.1.1.18
	OPENBSD_4_2:1.1.1.18.0.26
	OPENBSD_4_2_BASE:1.1.1.18
	OPENBSD_4_1:1.1.1.18.0.24
	OPENBSD_4_1_BASE:1.1.1.18
	OPENBSD_4_0:1.1.1.18.0.22
	OPENBSD_4_0_BASE:1.1.1.18
	OPENBSD_3_9:1.1.1.18.0.20
	OPENBSD_3_9_BASE:1.1.1.18
	OPENBSD_3_8:1.1.1.18.0.18
	OPENBSD_3_8_BASE:1.1.1.18
	OPENBSD_3_7:1.1.1.18.0.16
	OPENBSD_3_7_BASE:1.1.1.18
	OPENBSD_3_6:1.1.1.18.0.14
	OPENBSD_3_6_BASE:1.1.1.18
	OPENBSD_3_5:1.1.1.18.0.12
	OPENBSD_3_5_BASE:1.1.1.18
	OPENBSD_3_4:1.1.1.18.0.10
	OPENBSD_3_4_BASE:1.1.1.18
	OPENBSD_3_3:1.1.1.18.0.8
	OPENBSD_3_3_BASE:1.1.1.18
	OPENBSD_3_2:1.1.1.18.0.6
	OPENBSD_3_2_BASE:1.1.1.18
	OPENBSD_3_1:1.1.1.18.0.4
	OPENBSD_3_1_BASE:1.1.1.18
	OPENBSD_3_0:1.1.1.18.0.2
	OPENBSD_3_0_BASE:1.1.1.18
	cvs-1-11-1p1:1.1.1.18
	OPENBSD_2_9:1.1.1.17.0.2
	OPENBSD_2_9_BASE:1.1.1.17
	cvs-1-11:1.1.1.17
	OPENBSD_2_8:1.1.1.16.0.6
	OPENBSD_2_8_BASE:1.1.1.16
	OPENBSD_2_7:1.1.1.16.0.4
	OPENBSD_2_7_BASE:1.1.1.16
	OPENBSD_2_6:1.1.1.16.0.2
	OPENBSD_2_6_BASE:1.1.1.16
	cvs-1-10-7:1.1.1.16
	OPENBSD_2_5:1.1.1.15.0.2
	OPENBSD_2_5_BASE:1.1.1.15
	cvs-1-10-5:1.1.1.15
	OPENBSD_2_4:1.1.1.14.0.2
	OPENBSD_2_4_BASE:1.1.1.14
	cvs-1-10:1.1.1.14
	cvs-1-9-28:1.1.1.13
	OPENBSD_2_3:1.1.1.12.0.2
	OPENBSD_2_3_BASE:1.1.1.12
	cvs-1-9-26:1.1.1.12
	cvs-1-9-24:1.1.1.11
	OPENBSD_2_2:1.1.1.10.0.2
	OPENBSD_2_2_BASE:1.1.1.10
	cvs-1-9-10:1.1.1.10
	OPENBSD_2_1:1.1.1.9.0.2
	OPENBSD_2_1_BASE:1.1.1.9
	cvs-1-9-8:1.1.1.9
	cvs-1-9-6:1.1.1.8
	cvs-1-9-4:1.1.1.7
	cvs-1-9-2:1.1.1.6
	cvs-1-9:1.1.1.5
	OPENBSD_2_0:1.1.1.4.0.2
	OPENBSD_2_0_BASE:1.1.1.4
	cvs-1-8-1:1.1.1.4
	cvs-1-8:1.1.1.4
	cvs-1-7-2:1.1.1.3
	cvs-1-7-1:1.1.1.2
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.12.19.09.21.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.38;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.01.30.00.41.23;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.04.27.20.02.37;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.05.06.22.27.09;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	96.10.18.03.41.35;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.02.21.06.47.19;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	97.03.18.02.05.50;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	97.03.29.04.45.52;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	97.04.21.04.34.04;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	97.06.28.03.35.10;	author tholo;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	98.02.22.08.30.39;	author tholo;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	98.03.12.07.05.46;	author tholo;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	98.07.13.04.04.37;	author tholo;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	98.08.22.20.57.24;	author tholo;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	99.02.28.21.39.55;	author tholo;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	99.09.10.05.14.48;	author tholo;	state Exp;
branches;
next	1.1.1.17;

1.1.1.17
date	2001.02.10.19.03.11;	author tholo;	state Exp;
branches;
next	1.1.1.18;

1.1.1.18
date	2001.09.28.22.48.51;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@This is Info file cvsclient.info, produced by Makeinfo-1.55 from the
input file ./cvsclient.texi.


File: cvsclient.info,  Node: Top,  Next: Goals,  Prev: (DIR),  Up: (DIR)

CVS Client/Server
*****************

* Menu:

* Goals::             Basic design decisions, requirements, scope, etc.
* Notes::             Notes on the current implementation
* How To::            How to remote your favorite CVS command
* Protocol Notes::    Possible enhancements, limitations, etc. of the protocol
* Protocol::          Complete description of the protocol


File: cvsclient.info,  Node: Goals,  Next: Notes,  Prev: Top,  Up: Top

Goals
*****

   * Do not assume any access to the repository other than via this
     protocol.  It does not depend on NFS, rdist, etc.

   * Providing a reliable transport is outside this protocol.  It is
     expected that it runs over TCP, UUCP, etc.

   * Security and authentication are handled outside this protocol (but
     see below about `cvs kserver').

   * This might be a first step towards adding transactions to CVS
     (i.e. a set of operations is either executed atomically or none of
     them is executed), improving the locking, or other features.  The
     current server implementation is a long way from being able to do
     any of these things.  The protocol, however, is not known to
     contain any defects which would preclude them.

   * The server never has to have any CVS locks in place while it is
     waiting for communication with the client.  This makes things
     robust in the face of flaky networks.

   * Data is transferred in large chunks, which is necessary for good
     performance.  In fact, currently the client uploads all the data
     (without waiting for server responses), and then waits for one
     server response (which consists of a massive download of all the
     data).  There may be cases in which it is better to have a richer
     interraction, but the need for the server to release all locks
     whenever it waits for the client makes it complicated.


File: cvsclient.info,  Node: Notes,  Next: How To,  Prev: Goals,  Up: Top

Notes on the Current Implementation
***********************************

   The client is built in to the normal `cvs' program, triggered by a
`CVSROOT' variable containing a colon, for example
`cygnus.com:/rel/cvsfiles'.

   The client stores what is stored in checked-out directories
(including `CVS').  The way these are stored is totally compatible with
standard CVS.  The server requires no storage other than the repository,
which also is totally compatible with standard CVS.

   The server is started by `cvs server'.  There is no particularly
compelling reason for this rather than making it a separate program
which shares a lot of sources with cvs.

   The server can also be started by `cvs kserver', in which case it
does an initial Kerberos authentication on stdin.  If the authentication
succeeds, it subsequently runs identically to `cvs server'.

   The current server implementation can use up huge amounts of memory
when transmitting a lot of data.  Avoiding this would be a bit tricky
because it is not acceptable to have the server block on the network
(which may be very slow) when it has locks open.  The buffer code has
been rewritten so that this does not appear to be a serious problem in
practice.  However, if it is seen to be a problem several solutions are
possible.  The two-pass design would involve first noting what versions
of everything we need (with locks in place) and then sending the data,
blocking on the network, with no locks needed.  The lather-rinse-repeat
design would involve doing things as it does now until a certain amount
of server memory is being used (10M?), then releasing locks, and trying
the whole update again (some of it is presumably already done).  One
problem with this is getting merges to work right.


File: cvsclient.info,  Node: How To,  Next: Protocol Notes,  Prev: Notes,  Up: Top

How to add more remote commands
*******************************

   It's the usual simple twelve step process.  Let's say you're making
the existing `cvs fix' command work remotely.

   * Add a declaration for the `fix' function, which already implements
     the `cvs fix' command, to `server.c'.

   * Now, the client side.  Add a function `client_fix' to `client.c',
     which calls `parse_cvsroot' and then calls the usual `fix'
     function.

   * Add a declaration for `client_fix' to `client.h'.

   * Add `client_fix' to the "fix" entry in the table of commands in
     `main.c'.

   * Now for the server side.  Add the `serve_fix' routine to
     `server.c'; make it do:
          static void
          serve_fix (arg)
              char *arg;
          {
              do_cvs_command (fix);
          }

   * Add the server command `"fix"' to the table of requests in
     `server.c'.

   * The `fix' function can now be entered in three different
     situations: local (the old situation), client, and server.  On the
     server side it probably will not need any changes to cope.  Modify
     the `fix' function so that if it is run when the variable
     `client_active' is set, it starts the server, sends over parsed
     arguments and possibly files, sends a "fix" command to the server,
     and handles responses from the server.  Sample code:
              if (!client_active) {
                  /* Do whatever you used to do */
              } else {
                  /* We're the local client.  Fire up the remote server.  */
                  start_server ();
          
                  if (local)
                      if (fprintf (to_server, "Argument -l\n") == EOF)
                          error (1, errno, "writing to server");
                  send_option_string (options);
          
                  send_files (argc, argv, local);
          
                  if (fprintf (to_server, "fix\n") == EOF)
                      error (1, errno, "writing to server");
                  err = get_responses_and_close ();
              }

   * Build it locally.  Copy the new version into somewhere on the
     remote system, in your path so that `rsh host cvs' finds it.  Now
     you can test it.

   * You may want to set the environment variable `CVS_CLIENT_PORT' to
     -1 to prevent the client from contacting the server via a direct
     TCP link.  That will force the client to fall back to using `rsh',
     which will run your new binary.

   * Set the environment variable `CVS_CLIENT_LOG' to a filename prefix
     such as `/tmp/cvslog'.  Whenever you run a remote CVS command, the
     commands and responses sent across the client/server connection
     will be logged in `/tmp/cvslog.in' and `/tmp/cvslog.out'.  Examine
     them for problems while you're testing.

   This should produce a good first cut at a working remote `cvs fix'
command.  You may have to change exactly how arguments are passed,
whether files or just their names are sent, and how some of the deeper
infrastructure of your command copes with remoteness.


File: cvsclient.info,  Node: Protocol Notes,  Next: Protocol,  Prev: How To,  Up: Top

Notes on the Protocol
*********************

   A number of enhancements are possible:

   * The `Modified' request could be speeded up by sending diffs rather
     than entire files.  The client would need some way to keep the
     version of the file which was originally checked out, which would
     double client disk space requirements or require coordination with
     editors (e.g. maybe it could use emacs numbered backups).  This
     would also allow local operation of `cvs diff' without arguments.

   * Have the client keep a copy of some part of the repository.  This
     allows all of `cvs diff' and large parts of `cvs update' and `cvs
     ci' to be local.  The local copy could be made consistent with the
     master copy at night (but if the master copy has been updated since
     the latest nightly re-sync, then it would read what it needs to
     from the master).

   * Provide encryption using kerberos.

   * The current procedure for `cvs update' is highly sub-optimal if
     there are many modified files.  One possible alternative would be
     to have the client send a first request without the contents of
     every modified file, then have the server tell it what files it
     needs.  Note the server needs to do the what-needs-to-be-updated
     check twice (or more, if changes in the repository mean it has to
     ask the client for more files), because it can't keep locks open
     while waiting for the network.  Perhaps this whole thing is
     irrelevant if client-side repositories are implemented, and the
     rcsmerge is done by the client.


File: cvsclient.info,  Node: Protocol,  Prev: Protocol Notes,  Up: Top

The CVS client/server protocol
******************************

* Menu:

* Entries Lines::
* Modes::
* Requests::
* Responses::
* Example::


File: cvsclient.info,  Node: Entries Lines,  Next: Modes,  Up: Protocol

Entries Lines
=============

   Entries lines are transmitted as:

     / NAME / VERSION / CONFLICT / OPTIONS / TAG_OR_DATE

   TAG_OR_DATE is either `T' TAG or `D' DATE or empty.  If it is
followed by a slash, anything after the slash shall be silently ignored.

   VERSION can be empty, or start with `0' or `-', for no user file,
new user file, or user file to be removed, respectively.

   CONFLICT, if it starts with `+', indicates that the file had
conflicts in it.  The rest of CONFLICT is `=' if the timestamp matches
the file, or anything else if it doesn't.  If CONFLICT does not start
with a `+', it is silently ignored.


File: cvsclient.info,  Node: Modes,  Next: Requests,  Prev: Entries Lines,  Up: Protocol

Modes
=====

   A mode is any number of repetitions of

     MODE-TYPE = DATA

   separated by `,'.

   MODE-TYPE is an identifier composed of alphanumeric characters.
Currently specified: `u' for user, `g' for group, `o' for other, as
specified in POSIX.  If at all possible, give these their POSIX meaning
and use other mode-types for other behaviors.  For example, on VMS it
shouldn't be hard to make the groups behave like POSIX, but you would
need to use ACLs for some cases.

   DATA consists of any data not containing `,', `\0' or `\n'.  For
`u', `g', and `o' mode types, data consists of alphanumeric characters,
where `r' means read, `w' means write, `x' means execute, and
unrecognized letters are silently ignored.


File: cvsclient.info,  Node: Requests,  Next: Responses,  Prev: Modes,  Up: Protocol

Requests
========

   File contents (noted below as FILE TRANSMISSION) can be sent in one
of two forms.  The simpler form is a number of bytes, followed by a
newline, followed by the specified number of bytes of file contents.
These are the entire contents of the specified file.  Second, if both
client and server support `gzip-file-contents', a `z' may precede the
length, and the `file contents' sent are actually compressed with
`gzip'.  The length specified is that of the compressed version of the
file.

   In neither case are the file content followed by any additional data.
The transmission of a file will end with a newline iff that file (or its
compressed form) ends with a newline.

`Root PATHNAME \n'
     Response expected: no.  Tell the server which `CVSROOT' to use.

`Valid-responses REQUEST-LIST \n'
     Response expected: no.  Tell the server what responses the client
     will accept.  request-list is a space separated list of tokens.

`valid-requests \n'
     Response expected: yes.  Ask the server to send back a
     `Valid-requests' response.

`Repository REPOSITORY \n'
     Response expected: no.  Tell the server what repository to use.
     This should be a directory name from a previous server response.
     Note that this both gives a default for `Entry ' and `Modified '
     and also for `ci' and the other commands; normal usage is to send a
     `Repository ' for each directory in which there will be an `Entry
     ' or `Modified ', and then a final `Repository ' for the original
     directory, then the command.

`Directory LOCAL-DIRECTORY \n'
     Additional data: REPOSITORY \n.  This is like `Repository', but
     the local name of the directory may differ from the repository
     name.  If the client uses this request, it affects the way the
     server returns pathnames; see *Note Responses::.  LOCAL-DIRECTORY
     is relative to the top level at which the command is occurring
     (i.e. the last `Directory' or `Repository' which is sent before
     the command).

`Max-dotdot LEVEL \n'
     Tell the server that LEVEL levels of directories above the
     directory which `Directory' requests are relative to will be
     needed.  For example, if the client is planning to use a
     `Directory' request for `../../foo', it must send a `Max-dotdot'
     request with a LEVEL of at least 2.  `Max-dotdot' must be sent
     before the first `Directory' request.

`Static-directory \n'
     Response expected: no.  Tell the server that the directory most
     recently specified with `Repository' or `Directory' should not have
     additional files checked out unless explicitly requested.  The
     client sends this if the `Entries.Static' flag is set, which is
     controlled by the `Set-static-directory' and
     `Clear-static-directory' responses.

`Sticky TAGSPEC \n'
     Response expected: no.  Tell the server that the directory most
     recently specified with `Repository' has a sticky tag or date
     TAGSPEC.  The first character of TAGSPEC is `T' for a tag, or `D'
     for a date.  The remainder of TAGSPEC contains the actual tag or
     date.

`Checkin-prog PROGRAM \n'
     Response expected: no.  Tell the server that the directory most
     recently specified with `Directory' has a checkin program PROGRAM.
     Such a program would have been previously set with the
     `Set-checkin-prog' response.

`Update-prog PROGRAM \n'
     Response expected: no.  Tell the server that the directory most
     recently specified with `Directory' has an update program PROGRAM.
     Such a program would have been previously set with the
     `Set-update-prog' response.

`Entry ENTRY-LINE \n'
     Response expected: no.  Tell the server what version of a file is
     on the local machine.  The name in ENTRY-LINE is a name relative
     to the directory most recently specified with `Repository'.  If
     the user is operating on only some files in a directory, `Entry'
     requests for only those files need be included.  If an `Entry'
     request is sent without `Modified', `Unchanged', or `Lost' for that
     file the meaning depends on whether `UseUnchanged' has been sent;
     if it has been it means the file is lost, if not it means the file
     is unchanged.

`Modified FILENAME \n'
     Response expected: no.  Additional data: mode, \n, file
     transmission.  Send the server a copy of one locally modified
     file.  FILENAME is relative to the most recent repository sent
     with `Repository'.  If the user is operating on only some files in
     a directory, only those files need to be included.  This can also
     be sent without `Entry', if there is no entry for the file.

`Lost FILENAME \n'
     Response expected: no.  Tell the server that FILENAME no longer
     exists.  The name is relative to the most recent repository sent
     with `Repository'.  This is used for any case in which `Entry' is
     being sent but the file no longer exists.  If the client has
     issued the `UseUnchanged' request, then this request is not used.

`Unchanged FILENAME \n'
     Response expected: no.  Tell the server that FILENAME has not been
     modified in the checked out directory.  The name is relative to
     the most recent repository sent with `Repository'.  This request
     can only be issued if `UseUnchanged' has been sent.

`UseUnchanged \n'
     Response expected: no.  Tell the server that the client will be
     indicating unmodified files with `Unchanged', and that files for
     which no information is sent are nonexistent on the client side,
     not unchanged.  This is necessary for correct behavior since only
     the server knows what possible files may exist, and thus what
     files are nonexistent.

`Argument TEXT \n'
     Response expected: no.  Save argument for use in a subsequent
     command.  Arguments accumulate until an argument-using command is
     given, at which point they are forgotten.

`Argumentx TEXT \n'
     Response expected: no.  Append \n followed by text to the current
     argument being saved.

`Global_option OPTION \n'
     Transmit one of the global options `-q', `-Q', `-l', `-t', `-r',
     or `-n'.  OPTION must be one of those strings, no variations (such
     as combining of options) are allowed.  For graceful handling of
     `valid-requests', it is probably better to make new global options
     separate requests, rather than trying to add them to this request.

`expand-modules \n'
     Response expected: yes.  Expand the modules which are specified in
     the arguments.  Returns the data in `Module-expansion' responses.
     Note that the server can assume that this is checkout or export,
     not rtag or rdiff; the latter do not access the working directory
     and thus have no need to expand modules on the client side.

`co \n'
`update \n'
`ci \n'
`diff \n'
`tag \n'
`status \n'
`log \n'
`add \n'
`remove \n'
`rdiff \n'
`rtag \n'
`import \n'
`admin \n'
`export \n'
`history \n'
`release \n'
     Response expected: yes.  Actually do a cvs command.  This uses any
     previous `Argument', `Repository', `Entry', `Modified', or `Lost'
     requests, if they have been sent.  The last `Repository' sent
     specifies the working directory at the time of the operation.  No
     provision is made for any input from the user.  This means that
     `ci' must use a `-m' argument if it wants to specify a log message.

`update-patches \n'
     This request does not actually do anything.  It is used as a
     signal that the server is able to generate patches when given an
     `update' request.  The client must issue the `-u' argument to
     `update' in order to receive patches.

`gzip-file-contents LEVEL \n'
     This request asks the server to filter files it sends to the client
     through the `gzip' program, using the specified level of
     compression.  If this request is not made, the server must not do
     any compression.

     This is only a hint to the server.  It may still decide (for
     example, in the case of very small files, or files that already
     appear to be compressed) not to do the compression.  Compression
     is indicated by a `z' preceding the file length.

     Availability of this request in the server indicates to the client
     that it may compress files sent to the server, regardless of
     whether the client actually uses this request.

`OTHER-REQUEST TEXT \n'
     Response expected: yes.  Any unrecognized request expects a
     response, and does not contain any additional data.  The response
     will normally be something like `error  unrecognized request', but
     it could be a different error if a previous command which doesn't
     expect a response produced an error.

   When the client is done, it drops the connection.


File: cvsclient.info,  Node: Responses,  Next: Example,  Prev: Requests,  Up: Protocol

Responses
=========

   After a command which expects a response, the server sends however
many of the following responses are appropriate.  Pathnames are of the
actual files operated on (i.e. they do not contain `,v' endings), and
are suitable for use in a subsequent `Repository' request.  However, if
the client has used the `Directory' request, then it is instead a local
directory name relative to the directory in which the command was given
(i.e. the last `Directory' before the command).  Then a newline and a
repository name (the pathname which is sent if `Directory' is not
used).  Then the slash and the filename.  For example, for a file
`i386.mh' which is in the local directory `gas.clean/config' and for
which the repository is `/rel/cvsfiles/devo/gas/config':

     gas.clean/config/
     /rel/cvsfiles/devo/gas/config/i386.mh

   Any response always ends with `error' or `ok'.  This indicates that
the response is over.

`Valid-requests REQUEST-LIST \n'
     Indicate what requests the server will accept.  REQUEST-LIST is a
     space separated list of tokens.  If the server supports sending
     patches, it will include `update-patches' in this list.  The
     `update-patches' request does not actually do anything.

`Checked-in PATHNAME \n'
     Additional data: New Entries line, \n.  This means a file PATHNAME
     has been successfully operated on (checked in, added, etc.).  name
     in the Entries line is the same as the last component of PATHNAME.

`New-entry PATHNAME \n'
     Additional data: New Entries line, \n.  Like `Checked-in', but the
     file is not up to date.

`Updated PATHNAME \n'
     Additional data: New Entries line, \n, mode, \n, file
     transmission.  A new copy of the file is enclosed.  This is used
     for a new revision of an existing file, or for a new file, or for
     any other case in which the local (client-side) copy of the file
     needs to be updated, and after being updated it will be up to
     date.  If any directory in pathname does not exist, create it.

`Merged PATHNAME \n'
     This is just like `Updated' and takes the same additional data,
     with the one difference that after the new copy of the file is
     enclosed, it will still not be up to date.  Used for the results
     of a merge, with or without conflicts.

`Patched PATHNAME \n'
     This is just like `Updated' and takes the same additional data,
     with the one difference that instead of sending a new copy of the
     file, the server sends a patch produced by `diff -u'.  This client
     must apply this patch, using the `patch' program, to the existing
     file.  This will only be used when the client has an exact copy of
     an earlier revision of a file.  This response is only used if the
     `update' command is given the `-u' argument.

`Checksum CHECKSUM\n'
     The CHECKSUM applies to the next file sent over via `Updated',
     `Merged', or `Patched'.  In the case of `Patched', the checksum
     applies to the file after being patched, not to the patch itself.
     The client should compute the checksum itself, after receiving the
     file or patch, and signal an error if the checksums do not match.
     The checksum is the 128 bit MD5 checksum represented as 32 hex
     digits.  This response is optional, and is only used if the client
     supports it (as judged by the `Valid-responses' request).

`Copy-file PATHNAME \n'
     Additional data: NEWNAME \n.  Copy file PATHNAME to NEWNAME in the
     same directory where it already is.  This does not affect
     `CVS/Entries'.

`Removed PATHNAME \n'
     The file has been removed from the repository (this is the case
     where cvs prints `file foobar.c is no longer pertinent').

`Remove-entry PATHNAME \n'
     The file needs its entry removed from `CVS/Entries', but the file
     itself is already gone (this happens in response to a `ci' request
     which involves committing the removal of a file).

`Set-static-directory PATHNAME \n'
     This instructs the client to set the `Entries.Static' flag, which
     it should then send back to the server in a `Static-directory'
     request whenever the directory is operated on.  PATHNAME ends in a
     slash; its purpose is to specify a directory, not a file within a
     directory.

`Clear-static-directory PATHNAME \n'
     Like `Set-static-directory', but clear, not set, the flag.

`Set-sticky PATHNAME \n'
     Additional data: TAGSPEC \n.  Tell the client to set a sticky tag
     or date, which should be supplied with the `Sticky' request for
     future operations.  PATHNAME ends in a slash; its purpose is to
     specify a directory, not a file within a directory.  The first
     character of TAGSPEC is `T' for a tag, or `D' for a date.  The
     remainder of TAGSPEC contains the actual tag or date.

`Clear-sticky PATHNAME \n'
     Clear any sticky tag or date set by `Set-sticky'.

`Set-checkin-prog DIR \n'
     Additional data: PROG \n.  Tell the client to set a checkin
     program, which should be supplied with the `Checkin-prog' request
     for future operations.

`Set-update-prog DIR \n'
     Additional data: PROG \n.  Tell the client to set an update
     program, which should be supplied with the `Update-prog' request
     for future operations.

`Module-expansion PATHNAME \n'
     Return a file or directory which is included in a particular
     module.  PATHNAME is relative to cvsroot, unlike most pathnames in
     responses.

`M TEXT \n'
     A one-line message for the user.

`E TEXT \n'
     Same as `M' but send to stderr not stdout.

`error ERRNO-CODE ` ' TEXT \n'
     The command completed with an error.  ERRNO-CODE is a symbolic
     error code (e.g. `ENOENT'); if the server doesn't support this
     feature, or if it's not appropriate for this particular message,
     it just omits the errno-code (in that case there are two spaces
     after `error').  Text is an error message such as that provided by
     strerror(), or any other message the server wants to use.

`ok \n'
     The command completed successfully.


File: cvsclient.info,  Node: Example,  Prev: Responses,  Up: Protocol

Example
=======

   Lines beginning with `c>' are sent by the client; lines beginning
with `s>' are sent by the server; lines beginning with `#' are not part
of the actual exchange.

     c> Root /rel/cvsfiles
     # In actual practice the lists of valid responses and requests would
     # be longer
     c> Valid-responses Updated Checked-in M ok error
     c> valid-requests
     s> Valid-requests Root co Modified Entry Repository ci Argument Argumentx
     s> ok
     # cvs co devo/foo
     c> Argument devo/foo
     c> co
     s> Updated /rel/cvsfiles/devo/foo/foo.c
     s> /foo.c/1.4/Mon Apr 19 15:36:47 1993 Mon Apr 19 15:36:47 1993//
     s> 26
     s> int mein () { abort (); }
     s> Updated /rel/cvsfiles/devo/foo/Makefile
     s> /Makefile/1.2/Mon Apr 19 15:36:47 1993 Mon Apr 19 15:36:47 1993//
     s> 28
     s> foo: foo.c
     s>         $(CC) -o foo $<
     s> ok
     # In actual practice the next part would be a separate connection.
     # Here it is shown as part of the same one.
     c> Repository /rel/cvsfiles/devo/foo
     # foo.c relative to devo/foo just set as Repository.
     c> Entry /foo.c/1.4/Mon Apr 19 15:36:47 1993 Mon Apr 19 15:36:47 1993//
     c> Entry /Makefile/1.2/Mon Apr 19 15:36:47 1993 Mon Apr 19 15:36:47 1993//
     c> Modified foo.c
     c> 26
     c> int main () { abort (); }
     # cvs ci -m <log message> foo.c
     c> Argument -m
     c> Argument Well, you see, it took me hours and hours to find this typo and I
     c> Argumentx searched and searched and eventually had to ask John for help.
     c> Argument foo.c
     c> ci
     s> Checked-in /rel/cvsfiles/devo/foo/foo.c
     s> /foo.c/1.5/ Mon Apr 19 15:54:22 CDT 1993//
     s> M Checking in foo.c;
     s> M /cygint/rel/cvsfiles/devo/foo/foo.c,v  <--  foo.c
     s> M new revision: 1.5; previous revision: 1.4
     s> M done
     s> ok



Tag Table:
Node: Top99
Node: Goals552
Node: Notes2049
Node: How To3893
Node: Protocol Notes7058
Node: Protocol8741
Node: Entries Lines8955
Node: Modes9663
Node: Requests10483
Node: Responses19350
Node: Example25504

End Tag Table
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Missed files from 1.7.1 import
@
text
@a9 4
   This manual describes the client/server protocol used by CVS.  It
does not describe how to use or administer client/server CVS; see the
regular CVS manual for that.

d14 1
d53 1
a53 1
File: cvsclient.info,  Node: Notes,  Next: Protocol Notes,  Prev: Goals,  Up: Top
d76 90
a165 4
when transmitting a lot of data over a slow link (i.e. the network is
slower than the server can generate the data).  There is some
experimental code (see `SERVER_FLOWCONTROL' in options.h) which should
help significantly.
d168 1
a168 1
File: cvsclient.info,  Node: Protocol Notes,  Next: Protocol,  Prev: Notes,  Up: Top
a207 3
   In the following, `\n' refers to a linefeed and `\t' refers to a
horizontal tab.

d250 5
a254 3
Currently specified: `u' for user, `g' for group, `o' for other (see
below for discussion of whether these have their POSIX meaning or are
more loose).  Unrecognized values of MODE-TYPE are silently ignored.
a260 13
   The two most obvious ways in which the mode matters are: (1) is it
writeable?  This is used by the developer communication features, and
is implemented even on OS/2 (and could be implemented on DOS), whose
notion of mode is limited to a readonly bit. (2) is it executable?
Unix CVS users need CVS to store this setting (for shell scripts and
the like).  The current CVS implementation on unix does a little bit
more than just maintain these two settings, but it doesn't really have
a nice general facility to store or version control the mode, even on
unix, much less across operating systems with diverse protection
features.  So all the ins and outs of what the mode means across
operating systems haven't really been worked out (e.g. should the VMS
port use ACLs to get POSIX semantics for groups?).

a383 21
`Notify FILENAME \n'
     Tell the server that a `edit' or `unedit' command has taken place.
     The server needs to send a `Notified' response, but such response
     is deferred until the next time that the server is sending
     responses.  Response expected: no.  Additional data:
          NOTIFICATION-TYPE \t TIME \t CLIENTHOST \t
          WORKING-DIR \t WATCHES \n
     where NOTIFICATION-TYPE is `E' for edit or `U' for unedit, TIME is
     the time at which the edit or unedit took place, CLIENTHOST is the
     name of the host on which the edit or unedit took place, and
     WORKING-DIR is the pathname of the working directory where the
     edit or unedit took place.  WATCHES are the temporary watches to
     set; if it is followed by \t then the tab and the rest of the line
     are ignored.

`Questionable FILENAME \n'
     Response expected: no.  Additional data: no.  Tell the server to
     check whether FILENAME should be ignored, and if not, next time the
     server sends responses, send (in a `M' response) `?' followed by
     the directory and filename.

d408 1
d418 1
d422 1
a422 2
`watchers \n'
`editors \n'
a429 41
`update \n'
     Response expected: yes.  Actually do a `cvs update' command.  This
     uses any previous `Argument', `Repository', `Entry', `Modified',
     or `Lost' requests, if they have been sent.  The last `Repository'
     sent specifies the working directory at the time of the operation.
     The `-I' option is not used-files which the client can decide
     whether to ignore are not mentioned and the client sends the
     `Questionable' request for others.

`import \n'
     Response expected: yes.  Actually do a `cvs import' command.  This
     uses any previous `Argument', `Repository', `Entry', `Modified',
     or `Lost' requests, if they have been sent.  The last `Repository'
     sent specifies the working directory at the time of the operation.
     The files to be imported are sent in `Modified' requests (files
     which the client knows should be ignored are not sent; the server
     must still process the CVSROOT/cvsignore file unless -I ! is
     sent).  A log message must have been specified with a `-m'
     argument.

`watch-on \n'
`watch-off \n'
`watch-add \n'
`watch-remove \n'
     Response expected: yes.  Actually do the `cvs watch on', `cvs
     watch off', `cvs watch add', and `cvs watch remove' commands,
     respectively.  This uses any previous `Argument', `Repository',
     `Entry', `Modified', or `Lost' requests, if they have been sent.
     The last `Repository' sent specifies the working directory at the
     time of the operation.

`release \n'
     Response expected: yes.  Note that a `cvs release' command has
     taken place and update the history file accordingly.

`noop \n'
     Response expected: yes.  This request is a null command in the
     sense that it doesn't do anything, but merely (as with any other
     requests expecting a response) sends back any responses pertaining
     to pending errors, pending `Notified' responses, etc.

a521 5
`Mode MODE \n'
     This MODE applies to the next file mentioned in `Checked-in'.  It
     does not apply to any request which follows a `Checked-in',
     `New-entry', `Updated', `Merged', or `Patched' response.

d577 4
a580 15
`Notified PATHNAME \n'
     Indicate to the client that the notification for PATHNAME has been
     done.  There should be one such response for every `Notify'
     request; if there are several `Notify' requests for a single file,
     the requests should be processed in order; the first `Notified'
     response pertains to the first `Notify' request, etc.

`Module-expansion PATHNAME \n Return a file or directory'
     which is included in a particular module.  PATHNAME is relative to
     cvsroot, unlike most pathnames in responses.  PATHNAME should be
     used to look and see whether some or all of the module exists on
     the client side; it is not necessarily suitable for passing as an
     argument to a `co' request (for example, if the modules file
     contains the `-d' option, it will be the directory specified with
     `-d', not the name of the module).
d656 10
a665 9
Node: Goals659
Node: Notes2156
Node: Protocol Notes3400
Node: Protocol5082
Node: Entries Lines5381
Node: Modes6089
Node: Requests7611
Node: Responses19467
Node: Example26529
@


1.1.1.3
log
@Some files missed by initial import
@
text
@d2 1
a2 1
input file ../../ccvs/doc/cvsclient.texi.
a131 1
* Filenames::                       Conventions regarding filenames
a134 1
* Requirements::
d158 1
a158 1
File: cvsclient.info,  Node: Modes,  Next: Filenames,  Prev: Entries Lines,  Up: Protocol
d193 1
a193 17
File: cvsclient.info,  Node: Filenames,  Next: Requests,  Prev: Modes,  Up: Protocol

Conventions regarding transmission of file names
================================================

   In most contexts, `/' is used to separate directory and file names
in filenames, and any use of other conventions (for example, that the
user might type on the command line) is converted to that form.  The
only exceptions might be a few cases in which the server provides a
magic cookie which the client then repeats verbatim, but as the server
has not yet been ported beyond unix, the two rules provide the same
answer (and what to do if future server ports are operating on a
repository like e:/foo or CVS_ROOT:[FOO.BAR] has not been carefully
thought out).


File: cvsclient.info,  Node: Requests,  Next: Responses,  Prev: Filenames,  Up: Protocol
a351 3
`Set VARIABLE=VALUE \n'
     Set a user variable VARIABLE to VALUE.

d608 1
a608 1
File: cvsclient.info,  Node: Example,  Next: Requirements,  Prev: Responses,  Up: Protocol
a659 22

File: cvsclient.info,  Node: Requirements,  Prev: Example,  Up: Protocol

Required versus optional parts of the protocol
==============================================

   The following are part of every known implementation of the CVS
protocol and it is considered reasonable behavior to completely fail to
work if you are connected with an implementation which attempts to not
support them.  Requests: Root, Valid-responses, valid-requests,
Repository, Entry, Modified, Argument, Argumentx, ci, co, update.
Responses: ok, error, Valid-requests, Checked-in, Updated, Merged,
Removed, M, E.

   Failure to support the Directory, UseUnchanged, and Unchanged
requests is deprecated.  CVS 1.5 and later have supported these
requests and in the future it will be considered reasonable behavior to
completely fail to work with an implementation which attempts to not
support them.  Support for the Repository and Lost requests is
deprecated; CVS clients 1.5 and later will not use them if
communicating with a server which supports Directory and UseUnchanged.

d663 10
a672 12
Node: Top112
Node: Goals672
Node: Notes2169
Node: Protocol Notes3413
Node: Protocol5095
Node: Entries Lines5479
Node: Modes6187
Node: Filenames7710
Node: Requests8461
Node: Responses20390
Node: Example27452
Node: Requirements29398
@


1.1.1.4
log
@Files missed by previous import
@
text
@d1 2
a2 2
This is Info file cvsclient.info, produced by Makeinfo-1.63 from the
input file ./cvsclient.texi.
d5 1
a5 1
File: cvsclient.info,  Node: Top,  Next: Introduction,  Up: (dir)
d10 1
a10 1
   This document describes the client/server protocol used by CVS.  It
d12 1
a12 3
regular CVS manual for that.  This is version 1.8.1 of the protocol
specification--*Note Introduction:: for more on what this version number
means.
a15 1
* Introduction::      What is CVS and what is the client/server protocol for?
a18 1
* Connection and Authentication::  Various ways to connect to the server
d22 1
a22 48
File: cvsclient.info,  Node: Introduction,  Next: Goals,  Prev: Top,  Up: Top

Introduction
************

   CVS is a version control system (with some additional configuration
management functionality).  It maintains a central "repository" which
stores files (often source code), including past versions, information
about who modified them and when, and so on.  People who wish to look
at or modify those files, known as "developers", use CVS to "check out"
a "working directory" from the repository, to "check in" new versions
of files to the repository, and other operations such as viewing the
modification history of a file.  If developers are connected to the
repository by a network, particularly a slow or flaky one, the most
efficient way to use the network is with the CVS-specific protocol
described in this document.

   Developers, using the machine on which they store their working
directory, run the CVS "client" program.  To perform operations which
cannot be done locally, it connects to the CVS "server" program, which
maintains the repository.  For more information on how to connect see
*Note Connection and Authentication::.

   This document describes the CVS protocol.  Unfortunately, it does not
yet completely document one aspect of the protocol--the detailed
operation of each CVS command and option--and one must look at the CVS
user documentation, `cvs.texinfo', for that information.  The protocol
is non-proprietary (anyone who wants to is encouraged to implement it)
and an implementation, known as CVS, is available under the GNU Public
License.  The CVS distribution, containing this implementation,
`cvs.texinfo', and a copy (possibly more or less up to date than what
you are reading now) of this document, `cvsclient.texi', can be found
at the usual GNU FTP sites, with a filename such as
`cvs-VERSION.tar.gz'.

   This is version 1.8.1 of the protocol specification.  This version
number is intended only to aid in distinguishing different versions of
this specification.  Although the specification is currently maintained
in conjunction with the CVS implementation, and carries the same
version number, it also intends to document what is involved with
interoperating with other implementations (such as other versions of
CVS); see *Note Requirements::.  This version number should not be used
by clients or servers to determine what variant of the protocol to
speak; they should instead use the `valid-requests' and
`Valid-responses' mechanism (*note Protocol::.), which is more flexible.


File: cvsclient.info,  Node: Goals,  Next: Notes,  Prev: Introduction,  Up: Top
d85 1
a85 1
File: cvsclient.info,  Node: Protocol Notes,  Next: Connection and Authentication,  Prev: Notes,  Up: Top
d120 1
a120 50
File: cvsclient.info,  Node: Connection and Authentication,  Next: Protocol,  Prev: Protocol Notes,  Up: Top

How to Connect to and Authenticate Oneself to the CVS server
************************************************************

   Connection and authentication occurs before the CVS protocol itself
is started.  There are several ways to connect.

rsh
     If the client has a way to execute commands on the server, and
     provide input to the commands and output from them, then it can
     connect that way.  This could be the usual rsh (port 514)
     protocol, Kerberos rsh, SSH, or any similar mechanism.  The client
     may allow the user to specify the name of the server program; the
     default is `cvs'.  It is invoked with one argument, `server'.
     Once it invokes the server, the client proceeds to start the cvs
     protocol.

kserver
     The kerberized server listens on a port (in the current
     implementation, by having inetd call "cvs kserver") which defaults
     to 1999.  The client connects, sends the usual kerberos
     authentication information, and then starts the cvs protocol.
     Note: port 1999 is officially registered for another use, and in
     any event one cannot register more than one port for CVS, so the
     kerberized client and server should be changed to use port 2401
     (see below), and send a different string in place of `BEGIN AUTH
     REQUEST' to identify the authentication method in use.  However,
     noone has yet gotten around to implementing this.

pserver
     The password authenticated server listens on a port (in the current
     implementation, by having inetd call "cvs pserver") which defaults
     to 2401 (this port is officially registered).  The client
     connects, sends the string `BEGIN AUTH REQUEST', a linefeed, the
     cvs root, a linefeed, the username, a linefeed, the password
     trivially encoded (see scramble.c in the cvs sources), a linefeed,
     the string `END AUTH REQUEST', and a linefeed.  The server
     responds with `I LOVE YOU' and a linefeed if the authentication is
     successful or `I HATE YOU' and a linefeed if the authentication
     fails.  After receiving `I LOVE YOU', the client proceeds with the
     cvs protocol.  If the client wishes to merely authenticate without
     starting the cvs protocol, the procedure is the same, except
     `BEGIN AUTH REQUEST' is replaced with `BEGIN VERIFICATION
     REQUEST', `END AUTH REQUEST' is replaced with `END VERIFICATION
     REQUEST', and upon receipt of `I LOVE YOU' the connection is
     closed rather than continuing.


File: cvsclient.info,  Node: Protocol,  Prev: Connection and Authentication,  Up: Top
a230 5
     PATHNAME must already exist; if creating a new root, use the
     `init' request, not `Root'.  PATHNAME does not include the
     hostname of the server, how to access the server, etc.; by the time
     the CVS protocol is in use, connection, authentication, etc., are
     already taken care of.
a353 7
`Case \n'
     Tell the server that filenames should be matched against ignore
     patterns in a case-insensitive fashion.  Note that this does not
     apply to other comparisons--for example the filenames given in
     `Entry' and `Modified' requests for the same file must match in
     case regardless of whether the `Case' request is sent.

a394 1
`annotate \n'
a401 5
`init ROOT-NAME \n'
     Response expected: yes.  If it doesn't already exist, create a CVS
     repository ROOT-NAME.  The `Root' request need not have been
     previously sent.

a584 8
`Template PATHNAME \n'
     Additional data: file transmission (note: compressed file
     transmissions are not supported).  PATHNAME ends in a slash; its
     purpose is to specify a directory, not a file within a directory.
     Tell the client to store the file transmission as the template log
     message, and then use that template in the future when prompting
     the user for a log message.

d706 12
a717 14
Node: Top99
Node: Introduction924
Node: Goals3458
Node: Notes4964
Node: Protocol Notes6208
Node: Connection and Authentication7911
Node: Protocol10514
Node: Entries Lines10913
Node: Modes11621
Node: Filenames13144
Node: Requests13895
Node: Responses26668
Node: Example34133
Node: Requirements36079
@


1.1.1.5
log
@Missing files from import
@
text
@d1 1
a1 1
This is Info file cvsclient.info, produced by Makeinfo-1.55 from the
d5 1
a5 1
File: cvsclient.info,  Node: Top,  Next: Introduction,  Prev: (DIR),  Up: (DIR)
d12 1
a12 1
regular CVS manual for that.  This is version 1.9 of the protocol
d61 1
a61 1
   This is version 1.9 of the protocol specification.  This version
d85 1
a85 1
     see below about `cvs kserver' and `cvs pserver').
d113 2
a114 2
specially-formatted `CVSROOT' variable, for example
`:server:cygnus.com:/rel/cvsfiles'.
d121 8
d145 4
a148 5
     version of the file which was originally checked out; probably
     requiring the use of "cvs edit" in this case is the most sensible
     course (the "cvs edit" could be handled by a package like VC for
     emacs).  This would also allow local operation of `cvs diff'
     without arguments.
d157 2
d179 1
a179 1
server
a315 6
   By convention, requests which begin with a capital letter do not
elicit a response from the server, while all others do - save one.  The
exception is `gzip-file-contents'.  Unrecognized requests will always
elicit a response from the server, even if that request begins with a
capital letter.

d322 2
a323 2
`gzip' (RFC1952/1951) compression.  The length specified is that of the
compressed version of the file.
d331 5
a335 6
     Note that PATHNAME is a local directory and *not* a fully
     qualified `CVSROOT' variable.  PATHNAME must already exist; if
     creating a new root, use the `init' request, not `Root'.  PATHNAME
     does not include the hostname of the server, how to access the
     server, etc.; by the time the CVS protocol is in use, connection,
     authentication, etc., are already taken care of.
d355 7
a361 8
     Additional data: REPOSITORY \n.  Response expected: no.  This is
     like `Repository', but the local name of the directory may differ
     from the repository name.  If the client uses this request, it
     affects the way the server returns pathnames; see *Note
     Responses::.  LOCAL-DIRECTORY is relative to the top level at
     which the command is occurring (i.e. the last `Directory' or
     `Repository' which is sent before the command); to indicate that
     top level, `.' should be send for LOCAL-DIRECTORY.
d364 6
a369 6
     Response expected: no.  Tell the server that LEVEL levels of
     directories above the directory which `Directory' requests are
     relative to will be needed.  For example, if the client is
     planning to use a `Directory' request for `../../foo', it must
     send a `Max-dotdot' request with a LEVEL of at least 2.
     `Max-dotdot' must be sent before the first `Directory' request.
d439 4
a442 5
     Response expected: no.  Tell the server that a `edit' or `unedit'
     command has taken place.  The server needs to send a `Notified'
     response, but such response is deferred until the next time that
     the server is sending responses.  Response expected: no.
     Additional data:
d457 1
a457 3
     the directory and filename.  FILENAME must not contain `/'; it
     needs to be a file in the directory named by the most recent
     `Directory' request.
d460 5
a464 6
     Response expected: no.  Tell the server that filenames should be
     matched against ignore patterns in a case-insensitive fashion.
     Note that this does not apply to other comparisons--for example
     the filenames given in `Entry' and `Modified' requests for the
     same file must match in case regardless of whether the `Case'
     request is sent.
d476 5
a480 26
     Response expected: no.  Transmit one of the global options `-q',
     `-Q', `-l', `-t', `-r', or `-n'.  OPTION must be one of those
     strings, no variations (such as combining of options) are allowed.
     For graceful handling of `valid-requests', it is probably better
     to make new global options separate requests, rather than trying
     to add them to this request.

`Gzip-stream LEVEL \n'
     Response expected: no.  Use zlib (RFC 1950/1951) compression to
     compress all further communication between the client and the
     server.  After this request is sent, all further communication
     must be compressed.  All further data received from the server
     will also be compressed.  The LEVEL argument suggests to the
     server the level of compression that it should apply; it should be
     an integer between 1 and 9, inclusive, where a higher number
     indicates more compression.

`Kerberos-encrypt \n'
     Response expected: no.  Use Kerberos encryption to encrypt all
     further communication between the client and the server.  This
     will only work if the connection was made over Kerberos in the
     first place.  If both the `Gzip-stream' and the `Kerberos-encrypt'
     requests are used, the `Kerberos-encrypt' request should be used
     first.  This will make the client and server encrypt the
     compressed data, as opposed to compressing the encrypted data.
     Encrypted data is generally incompressible.
d483 1
a483 1
     Response expected: no.  Set a user variable VARIABLE to VALUE.
d517 2
a518 3
     repository ROOT-NAME.  Note that ROOT-NAME is a local directory
     and *not* a fully qualified `CVSROOT' variable.  The `Root'
     request need not have been previously sent.
d562 4
a565 4
     Response expected: yes.  This request does not actually do
     anything.  It is used as a signal that the server is able to
     generate patches when given an `update' request.  The client must
     issue the `-u' argument to `update' in order to receive patches.
d568 4
a571 9
     Response expected: no.  Note that this request does not follow the
     response convention stated above.  `Gzip-stream' is suggested
     instead of `gzip-file-contents' as it gives better compression; the
     only reason to implement the latter is to provide compression with
     CVS 1.8 and earlier.  The `gzip-file-contents' request asks the
     server to compress files it sends to the client using `gzip'
     (RFC1952/1951) compression, using the specified level of
     compression.  If this request is not made, the server must not
     compress files.
d598 10
a607 15
many of the following responses are appropriate.  The server should not
send data at other times (the current implementation may violate this
principle in a few minor places, where the server is printing an error
message and exiting--this should be investigated further).

   Pathnames are of the actual files operated on (i.e. they do not
contain `,v' endings), and are suitable for use in a subsequent
`Repository' request.  However, if the client has used the `Directory'
request, then it is instead a local directory name relative to the
directory in which the command was given (i.e. the last `Directory'
before the command).  Then a newline and a repository name (the
pathname which is sent if `Directory' is not used).  Then the slash and
the filename.  For example, for a file `i386.mh' which is in the local
directory `gas.clean/config' and for which the repository is
`/rel/cvsfiles/devo/gas/config':
a636 21
     This response is not used if `Created' and `Update-existing' are
     supported.

`Created PATHNAME \n'
     This is just like `Updated' and takes the same additional data, but
     is used only if no `Entry', `Modified', or `Unchanged' request has
     been sent for the file in question.  The distinction between
     `Created' and `Update-existing' is so that the client can give an
     error message in several cases: (1) there is a file in the working
     directory, but not one for which `Entry', `Modified', or
     `Unchanged' was sent (for example, a file which was ignored, or a
     file for which `Questionable' was sent), (2) there is a file in
     the working directory whose name differs from the one mentioned in
     `Created' in ways that the client is unable to use to distinguish
     files.  For example, the client is case-insensitive and the names
     differ only in case.

`Update-existing PATHNAME \n'
     This is just like `Updated' and takes the same additional data, but
     is used only if a `Entry', `Modified', or `Unchanged' request has
     been sent for the file in question.
d647 5
a651 8
     file, the server sends a patch.  This patch is produced by `diff
     -c' for CVS 1.6 and later (see POSIX.2 for a description of this
     format), or `diff -u' for previous versions of CVS; clients are
     encouraged to accept either format.  The client must apply this
     patch to the existing file.  This will only be used when the
     client has an exact copy of an earlier revision of a file.  This
     response is only used if the `update' command is given the `-u'
     argument.
a742 5
`F \n'
     Flush stderr.  That is, make it possible for the user to see what
     has been written to stderr (it is up to the implementation to
     decide exactly how far it should go to ensure this).

d784 2
a785 3
     # The current implementation would break the connection here and make a
     # new connection for the next command.  However, the protocol allows it
     # to keep the connection open and continue, which is what we show here.
d833 13
a845 13
Node: Introduction936
Node: Goals3468
Node: Notes4992
Node: Protocol Notes5865
Node: Connection and Authentication7543
Node: Protocol10149
Node: Entries Lines10548
Node: Modes11256
Node: Filenames12779
Node: Requests13530
Node: Responses28620
Node: Example37798
Node: Requirements39854
@


1.1.1.6
log
@Missed files from new release from Cyclic Software
@
text
@d1 2
a2 2
This is Info file cvsclient.info, produced by Makeinfo-1.64 from the
input file ../../work/ccvs/doc/cvsclient.texi.
d5 1
a5 1
File: cvsclient.info,  Node: Top,  Next: Introduction,  Up: (dir)
d12 3
a14 3
regular CVS manual for that.  This is version 1.9.2 of the protocol
specification--*Note Introduction::, for more on what this version
number means.
d20 1
d61 1
a61 1
   This is version 1.9.2 of the protocol specification.  This version
d73 1
a73 1
File: cvsclient.info,  Node: Goals,  Next: Protocol Notes,  Prev: Introduction,  Up: Top
d87 39
a125 21
   * The protocol makes it possible for updates to be atomic with
     respect to checkins; that is if someone commits changes to several
     files in one cvs command, then an update by someone else would
     either get all the changes, or none of them.  The current CVS
     server can't do this, but that isn't the protocol's fault.

   * The protocol is, with a few exceptions, transaction-based.  That
     is, the client sends all its requests (without waiting for server
     responses), and then waits for the server to send back all
     responses (without waiting for further client requests).  This has
     the advantage of minimizing network turnarounds and the
     disadvantage of sometimes transferring more data than would be
     necessary if there were a richer interaction.  Another, more
     subtle, advantage is that there is no need for the protocol to
     provide locking for features such as making checkins atomic with
     respect to updates.  Any such locking can be handled entirely by
     the server.  A good server implementation (such as the current CVS
     server) will make sure that it does not have any such locks in
     place whenever it is waiting for communication with the client;
     this prevents one client on a slow or flaky network from
     interfering with the work of others.
d128 1
a128 1
File: cvsclient.info,  Node: Protocol Notes,  Next: Connection and Authentication,  Prev: Goals,  Up: Top
d199 10
a208 13
     the string `END AUTH REQUEST', and a linefeed.  The client must
     sent the identical string for cvs root here, as it sends later, in
     the `Root' request of the cvs protocol itself.  Servers are
     encouraged to enforce this restriction.  The server responds with
     `I LOVE YOU' and a linefeed if the authentication is successful or
     `I HATE YOU' and a linefeed if the authentication fails.  After
     receiving `I LOVE YOU', the client proceeds with the cvs protocol.
     If the client wishes to merely authenticate without starting the
     cvs protocol, the procedure is the same, except `BEGIN AUTH
     REQUEST' is replaced with `BEGIN VERIFICATION REQUEST', `END AUTH
     REQUEST' is replaced with `END VERIFICATION REQUEST', and upon
     receipt of `I LOVE YOU' the connection is closed rather than
     continuing.
a227 1
* Obsolete::                        Former protocol features
d343 9
d353 8
a360 12
     Additional data: REPOSITORY \n.  Response expected: no.  Tell the
     server what directory to use.  The REPOSITORY should be a
     directory name from a previous server response.  Note that this
     both gives a default for `Entry' and `Modified' and also for `ci'
     and the other commands; normal usage is to send `Directory' for
     each directory in which there will be an `Entry' or `Modified',
     and then a final `Directory' for the original directory, then the
     command.  If the client uses this request, it affects the way the
     server returns pathnames; see *Note Responses::.  LOCAL-DIRECTORY
     is relative to the top level at which the command is occurring
     (i.e. the last `Directory' which is sent before the command); to
     indicate that top level, `.' should be send for LOCAL-DIRECTORY.
d372 5
a376 4
     recently specified with `Directory' should not have additional
     files checked out unless explicitly requested.  The client sends
     this if the `Entries.Static' flag is set, which is controlled by
     the `Set-static-directory' and `Clear-static-directory' responses.
d380 1
a380 1
     recently specified with `Directory' has a sticky tag or date
d400 2
a401 2
     to the directory most recently specified with `Directory'.  If the
     user is operating on only some files in a directory, `Entry'
d403 4
a406 2
     request is sent without `Modified' or `Unchanged', it means the
     file is lost (does not exist in the working directory).
d412 1
a412 1
     with `Directory'.  If the user is operating on only some files in
d416 7
d426 2
a427 1
     the most recent repository sent with `Directory'.
d430 6
a435 3
     Response expected: no.  To specify the version of the protocol
     described in this document, servers must support this request
     (although it need not do anything) and clients must issue it.
d533 5
a537 5
     previous `Argument', `Directory', `Entry', or `Modified' requests,
     if they have been sent.  The last `Directory' sent specifies the
     working directory at the time of the operation.  No provision is
     made for any input from the user.  This means that `ci' must use a
     `-m' argument if it wants to specify a log message.
d547 5
a551 5
     uses any previous `Argument', `Directory', `Entry', or `Modified'
     requests, if they have been sent.  The last `Directory' sent
     specifies the working directory at the time of the operation.  The
     `-I' option is not used-files which the client can decide whether
     to ignore are not mentioned and the client sends the
d556 8
a563 7
     uses any previous `Argument', `Directory', `Entry', or `Modified'
     requests, if they have been sent.  The last `Directory' sent
     specifies the working directory at the time of the operation.  The
     files to be imported are sent in `Modified' requests (files which
     the client knows should be ignored are not sent; the server must
     still process the CVSROOT/cvsignore file unless -I ! is sent).  A
     log message must have been specified with a `-m' argument.
d571 4
a574 4
     respectively.  This uses any previous `Argument', `Directory',
     `Entry', or `Modified' requests, if they have been sent.  The last
     `Directory' sent specifies the working directory at the time of
     the operation.
d633 9
a641 6
   In the following, PATHNAME actually indicates a pair of pathnames.
First, a local directory name relative to the directory in which the
command was given (i.e. the last `Directory' before the command).  Then
a newline and a repository name.  Then a slash and the filename
(without a `,v' ending).  For example, for a file `i386.mh' which is in
the local directory `gas.clean/config' and for which the repository is
d824 47
a870 106
   Here is an example; lines are prefixed by `C: ' to indicate the
client sends them or `S: ' to indicate the server sends them.

   The client starts by connecting, sending the root, and completing the
protocol negotiation.  In actual practice the lists of valid responses
and requests would be longer.

     C: Root /home/kingdon/testing/cvsroot
     C: Valid-responses ok error Checked-in M E
     C: valid-requests
     S: Valid-requests Root Directory Entry Modified Argument Argumentx ci co
     S: ok
     C: UseUnchanged

   The client wants to check out the `supermunger' module into a fresh
working directory.  Therefore it first expands the `supermunger'
module; this step would be omitted if the client was operating on a
directory rather than a module.

     C: Argument supermunger
     C: Directory .
     C: /home/kingdon/testing/cvsroot
     C: expand-modules

   The server replies that the `supermunger' module expands to the
directory `supermunger' (the simplest case):

     S: Module-expansion supermunger
     S: ok

   The client then proceeds to check out the directory.  The fact that
it sends only a single `Directory' request which specifies `.' for the
working directory means that there is not already a `supermunger'
directory on the client.

     C: Argument -N
     C: Argument supermunger
     C: Directory .
     C: /home/kingdon/testing/cvsroot
     C: co

   The server replies with the requested files.  In this example, there
is only one, `mungeall.c'.  The `Clear-sticky' and
`Clear-static-directory' requests are sent by the current
implementation but they have no effect because the default is for those
settings to be clear when a directory is newly created.

     S: Clear-sticky supermunger/
     S: /home/kingdon/testing/cvsroot/supermunger/
     S: Clear-static-directory supermunger/
     S: /home/kingdon/testing/cvsroot/supermunger/
     S: E cvs server: Updating supermunger
     S: M U supermunger/mungeall.c
     S: Created supermunger/
     S: /home/kingdon/testing/cvsroot/supermunger/mungeall.c
     S: /mungeall.c/1.1///
     S: u=rw,g=r,o=r
     S: 26
     S: int mein () { abort (); }
     S: ok

   The current client implementation would break the connection here
and make a new connection for the next command.  However, the protocol
allows it to keep the connection open and continue, which is what we
show here.

   After the user modifies the file and instructs the client to check it
back in.  The client sends arguments to specify the log message and file
to check in:

     C: Argument -m
     C: Argument Well, you see, it took me hours and hours to find this typo and I
     C: Argumentx searched and searched and eventually had to ask John for help.
     C: Argument mungeall.c

   It also sends information about the contents of the working
directory, including the new contents of the modified file.  Note that
the user has changed into the `supermunger' directory before executing
this command; the top level directory is a user-visible concept because
the server should print filenames in `M' and `E' responses relative to
that directory.

     C: Directory .
     C: /home/kingdon/testing/cvsroot/supermunger
     C: Entry /mungeall.c/1.1///
     C: Modified mungeall.c
     C: u=rw,g=r,o=r
     C: 26
     C: int main () { abort (); }

   And finally, the client issues the checkin command (which makes use
of the data just sent):

     C: ci

   And the server tells the client that the checkin succeeded:

     S: M Checking in mungeall.c;
     S: E /home/kingdon/testing/cvsroot/supermunger/mungeall.c,v  <--  mungeall.c
     S: E new revision: 1.2; previous revision: 1.1
     S: E done
     S: Mode u=rw,g=r,o=r
     S: Checked-in ./
     S: /home/kingdon/testing/cvsroot/supermunger/mungeall.c
     S: /mungeall.c/1.2///
     S: ok
d873 1
a873 1
File: cvsclient.info,  Node: Requirements,  Next: Obsolete,  Prev: Example,  Up: Protocol
d879 14
a892 30
protocol (except obsolete, pre-1.5, versions of CVS) and it is
considered reasonable behavior to completely fail to work if you are
connected with an implementation which attempts to not support them.
Requests: `Root', `Valid-responses', `valid-requests', `Directory',
`Entry', `Modified', `Unchanged', `Argument', `Argumentx', `ci', `co',
`update'.  Responses: `ok', `error', `Valid-requests', `Checked-in',
`Updated', `Merged', `Removed', `M', `E'.

   A server need not implement `Repository', but in order to
interoperate with CVS 1.5 through 1.9 it must claim to implement it (in
`Valid-requests').  The client will not actually send the request.


File: cvsclient.info,  Node: Obsolete,  Prev: Requirements,  Up: Protocol

Obsolete protocol elements
==========================

   This section briefly describes protocol elements which are obsolete.
There is no attempt to document them in full detail.

   There was a `Repository' request which was like `Directory' except
it only provided REPOSITORY, and the local directory was assumed to be
similarly named.

   If the `UseUnchanged' request was not sent, there was a `Lost'
request which was sent to indicate that a file did not exist in the
working directory, and the meaning of sending `Entries' without `Lost'
or `Modified' was different.  All current clients (CVS 1.5 and later)
will send `UseUnchanged' if it is supported.
d897 14
a910 14
Node: Top117
Node: Introduction885
Node: Goals3419
Node: Protocol Notes5226
Node: Connection and Authentication6904
Node: Protocol9708
Node: Entries Lines10168
Node: Modes10876
Node: Filenames12399
Node: Requests13150
Node: Responses27275
Node: Example36266
Node: Requirements40193
Node: Obsolete41101
@


1.1.1.7
log
@Files missed from previous import
@
text
@d12 1
a12 1
regular CVS manual for that.  This is version 1.9.4 of the protocol
d60 1
a60 1
   This is version 1.9.4 of the protocol specification.  This version
d181 12
a192 11
     send the identical string for cvs root both here and later in the
     `Root' request of the cvs protocol itself.  Servers are encouraged
     to enforce this restriction.  The server responds with `I LOVE
     YOU' and a linefeed if the authentication is successful or `I HATE
     YOU' and a linefeed if the authentication fails.  After receiving
     `I LOVE YOU', the client proceeds with the cvs protocol.  If the
     client wishes to merely authenticate without starting the cvs
     protocol, the procedure is the same, except `BEGIN AUTH REQUEST' is
     replaced with `BEGIN VERIFICATION REQUEST', `END AUTH REQUEST' is
     replaced with `END VERIFICATION REQUEST', and upon receipt of `I
     LOVE YOU' the connection is closed rather than continuing.
d939 9
a947 9
Node: Protocol9699
Node: Entries Lines10159
Node: Modes10867
Node: Filenames12390
Node: Requests13141
Node: Responses27266
Node: Example36257
Node: Requirements40184
Node: Obsolete41092
@


1.1.1.8
log
@Latest release from Cyclic Software
@
text
@d12 1
a12 1
regular CVS manual for that.  This is version 1.9.6 of the protocol
d60 1
a60 1
   This is version 1.9.6 of the protocol specification.  This version
d428 5
a432 14
     matched in a case-insensitive fashion.  Note that this is not the
     primary mechanism for achieving case-insensitivity; for the most
     part the client keeps track of the case which the server wants to
     use and takes care to always use that case regardless of what the
     user specifies.  For example the filenames given in `Entry' and
     `Modified' requests for the same file must match in case
     regardless of whether the `Case' request is sent.  The latter
     mechanism is more general (it could also be used for 8.3
     filenames, VMS filenames with more than one `.', and any other
     situation in which there is a predictable mapping between
     filenames in the working directory and filenames in the protocol),
     but there are some situations it cannot handle (ignore patterns, or
     situations where the user specifies a filename and the client does
     not know about that file).
d716 3
a718 5
     specify a directory, not a file within a directory.  The client
     should store TAGSPEC and pass it back to the server as-is, to
     allow for future expansion.  The first character of TAGSPEC is `T'
     for a tag, `D' for a date, or something else for future expansion.
     The remainder of TAGSPEC contains the actual tag or date.
d943 4
a946 4
Node: Responses27895
Node: Example37034
Node: Requirements40961
Node: Obsolete41869
@


1.1.1.9
log
@Missing files from import
@
text
@d12 1
a12 1
regular CVS manual for that.  This is version 1.9.8 of the protocol
d60 1
a60 1
   This is version 1.9.8 of the protocol specification.  This version
d80 2
a81 11
   * Providing a reliable transport is outside this protocol.  The
     protocol expects a reliable transport that is transparent (that
     is, there is no translation of characters, including characters
     such as such as linefeeds or carriage returns), and can transmit
     all 256 octets (for example for proper handling of binary files,
     compression, and encryption).  The encoding of characters
     specified by the protocol (the names of requests and so on) is the
     invariant ISO 646 character set (a subset of most popular
     character sets including ASCII and others).  For more details on
     running the protocol over the TCP reliable transport, see *Note
     Connection and Authentication::.
a206 2
* File transmissions::              How file contents are transmitted
* Strings::                         Strings in various requests and responses
d270 1
a270 1
File: cvsclient.info,  Node: Filenames,  Next: File transmissions,  Prev: Modes,  Up: Protocol
a284 9
   Characters outside the invariant ISO 646 character set should be
avoided in filenames.  This restriction may need to be relaxed to allow
for characters such as `[' and `]' (see above about non-unix servers);
this has not been carefully considered (and currently implementations
probably use whatever character sets that the operating systems they
are running on allow, and/or that users specify).  Of course the most
portable practice is to restrict oneself further, to the POSIX portable
filename character set as specified in POSIX.1.

d286 1
a286 1
File: cvsclient.info,  Node: File transmissions,  Next: Strings,  Prev: Filenames,  Up: Protocol
d288 8
a295 2
File transmissions
==================
d299 1
a299 1
linefeed, followed by the specified number of bytes of file contents.
d307 2
a308 42
The transmission of a file will end with a linefeed iff that file (or
its compressed form) ends with a linefeed.

   The encoding of file contents depends on the value for the `-k'
option.  If the file is binary (as specified by the `-kb' option in the
appropriate place), then it is just a certain number of octets, and the
protocol contributes nothing towards determining the encoding (using
the file name is one widespread, if not universally popular, mechanism).
If the file is text (not binary), then the file is sent as a series of
lines, separated by linefeeds.  If the keyword expansion is set to
something other than `-ko', then it is expected that the file conform
to the RCS expectations regarding keyword expansion--in particular,
that it is in a character set such as ASCII in which 0x24 is a dollar
sign (`$').


File: cvsclient.info,  Node: Strings,  Next: Requests,  Prev: File transmissions,  Up: Protocol

Strings
=======

   In various contexts, for example the `Argument' request and the `M'
response, one transmits what is essentially an arbitrary string.  Often
this will have been supplied by the user (for example, the `-m' option
to the `ci' request).  The protocol has no mechanism to specify the
character set of such strings; it would be fairly safe to stick to the
invariant ISO 646 character set but the existing practice is probably
to just transmit whatever the user specifies, and hope that everyone
involved agrees which character set is in use, or sticks to a common
subset.


File: cvsclient.info,  Node: Requests,  Next: Responses,  Prev: Strings,  Up: Protocol

Requests
========

   By convention, requests which begin with a capital letter do not
elicit a response from the server, while all others do - save one.  The
exception is `gzip-file-contents'.  Unrecognized requests will always
elicit a response from the server, even if that request begins with a
capital letter.
a340 52
     Here is an example of where a client gets REPOSITORY and
     LOCAL-DIRECTORY.  Suppose that there is a module defined by

          moddir 1dir

     That is, one can check out `moddir' and it will take `1dir' in the
     repository and check it out to `moddir' in the working directory.
     Then an initial check out could proceed like this:

          C: Root /home/kingdon/zwork/cvsroot
          . . .
          C: Argument moddir
          C: Directory .
          C: /home/kingdon/zwork/cvsroot
          C: co
          S: Clear-sticky moddir/
          S: /home/kingdon/zwork/cvsroot/1dir/
          . . .
          S: ok

     In this example the response shown is `Clear-sticky', but it could
     be another response instead.  Note that it returns two pathnames.
     The first one, `moddir/', indicates the working directory to check
     out into.  The second one, ending in `1dir/', indicates the
     directory to pass back to the server in a subsequent `Directory'
     request.  For example, a subsequent `update' request might look
     like:

          C: Directory moddir
          C: /home/kingdon/zwork/cvsroot/1dir
          . . .
          C: update

     For a given LOCAL-DIRECTORY, the repository will be the same for
     each of the responses, so one can use the repository from whichever
     response is most convenient.  Typically a client will store the
     repository along with the sources for each LOCAL-DIRECTORY, use
     that same setting whenever operating on that LOCAL-DIRECTORY, and
     not update the setting as long as the LOCAL-DIRECTORY exists.

     A client is free to rename a LOCAL-DIRECTORY at any time (for
     example, in response to an explicit user request).  While it is
     true that the server supplies a LOCAL-DIRECTORY to the client, as
     noted above, this is only the default place to put the directory.
     Of course, the various `Directory' requests for a single command
     (for example, `update' or `ci' request) should name a particular
     directory with the same LOCAL-DIRECTORY.

     Each `Directory' request specifies a brand-new LOCAL-DIRECTORY and
     REPOSITORY; that is, LOCAL-DIRECTORY and REPOSITORY are never
     relative to paths specified in any previous `Directory' request.

d381 2
a382 6
     request is sent without `Modified', `Is-modified', or `Unchanged',
     it means the file is lost (does not exist in the working
     directory).  If both `Entry' and one of `Modified', `Is-modified',
     or `Unchanged' are sent for the same file, `Entry' must be sent
     first.  For a given file, one can send `Modified', `Is-modified',
     or `Unchanged', but not more than one of these three.
a391 32
`Is-modified FILENAME \n'
     Response expected: no.  Additional data: none.  Like `Modified',
     but used if the server only needs to know whether the file is
     modified, not the contents.

     The commands which can take `Is-modified' instead of `Modified'
     with no known change in behavior are: `admin', `diff' (if and only
     if two `-r' or `-D' options are specified), `watch-on',
     `watch-off', `watch-add', `watch-remove', `watchers', `editors',
     `log', and `annotate'.

     For the `status' command, one can send `Is-modified' but if the
     client is using imperfect mechanisms such a timestamps to determine
     whether to consider a file modified, then the behavior will be
     different.  That is, if one sends `Modified', then the server will
     actually compare the contents of the file sent and the one it
     derives from to determine whether the file is genuinely modified.
     But if one sends `Is-modified', then the server takes the client's
     word for it.  A similar situation exists for `tag', if the `-c'
     option is specified.

     Commands for which `Modified' is necessary are `co', `ci',
     `update', and `import'.

     Commands which do not need to inform the server about a working
     directory, and thus should not be sending either `Modified' or
     `Is-modified': `rdiff', `rtag', `history', `init', and `release'.

     Commands for which further investigation is warranted are:
     `remove', `add', and `export'.  Pending such investigation, the
     more conservative course of action is to stick to `Modified'.

d410 7
a416 20
     where NOTIFICATION-TYPE is `E' for edit, `U' for unedit, undefined
     behavior if `C', and all other letters should be silently ignored
     for future expansion.  TIME is the time at which the edit or
     unedit took place, in a user-readable format of the client's
     choice (the server should treat the time as an opaque string
     rather than interpreting it).  CLIENTHOST is the name of the host
     on which the edit or unedit took place, and WORKING-DIR is the
     pathname of the working directory where the edit or unedit took
     place.  WATCHES are the temporary watches to set.  If WATCHES is
     followed by \t then the \t and the rest of the line should be
     ignored, for future expansion.

     Note that a client may be capable of performing an `edit' or
     `unedit' operation without connecting to the server at that time,
     and instead connecting to the server when it is convenient (for
     example, when a laptop is on the net again) to send the `Notify'
     requests.  Even if a client is capable of deferring notifications,
     it should attempt to send them immediately (one can send `Notify'
     requests together with a `noop' request, for example), unless
     perhaps if it can know that a connection would be impossible.
d490 1
a490 36
     Expand may not be the best word for what this request does.  It
     does not necessarily tell you all the files contained in a module,
     for example.  Basically it is a way of telling you which working
     directories the server needs to know about in order to handle a
     checkout of the specified modules.

     For example, suppose that the server has a module defined by

          aliasmodule -a 1dir

     That is, one can check out `aliasmodule' and it will take `1dir'
     in the repository and check it out to `1dir' in the working
     directory.  Now suppose the client already has this module checked
     out and is planning on using the `co' request to update it.
     Without using `expand-modules', the client would have two bad
     choices: it could either send information about *all* working
     directories under the current directory, which could be
     unnecessarily slow, or it could be ignorant of the fact that
     `aliasmodule' stands for `1dir', and neglect to send information
     for `1dir', which would lead to incorrect operation.

     With `expand-modules', the client would first ask for the module to
     be expanded:

          C: Root /home/kingdon/zwork/cvsroot
          . . .
          C: Argument aliasmodule
          C: Directory .
          C: /home/kingdon/zwork/cvsroot
          C: expand-modules
          S: Module-expansion 1dir
          S: ok

     and then it knows to check the `1dir' directory and send requests
     such as `Entry' and `Modified' for the files in that directory.

d498 2
a512 17
`co \n'
     Response expected: yes.  Get files from the repository.  This uses
     any previous `Argument', `Directory', `Entry', or `Modified'
     requests, if they have been sent.  Arguments to this command are
     module names; the client cannot know what directories they
     correspond to except by (1) just sending the `co' request, and then
     seeing what directory names the server sends back in its
     responses, and (2) the `expand-modules' request.

`rdiff \n'
`rtag \n'
     Response expected: yes.  Actually do a cvs command.  This uses any
     previous `Argument' requests, if they have been sent.  The client
     should not send `Directory', `Entry', or `Modified' requests for
     this command; they are not used.  Arguments to these commands are
     module names, as described for `co'.

d609 1
a609 1
a linefeed and a repository name.  Then a slash and the filename
a616 20
   If the server wants to tell the client to create a directory, then it
merely uses the directory in any response, as described above, and the
client should create the directory if it does not exist.  Note that this
should only be done one directory at a time, in order to permit the
client to correctly store the repository for each directory.  Servers
can use requests such as `Clear-sticky', `Clear-static-directory', or
any other requests, to create directories.

   Some server implementations may poorly distinguish between a
directory which should not exist and a directory which contains no
files; in order to refrain from creating empty directories a client
should both send the `-P' option to `update' or `co', and should also
detect the case in which the server asks to create a directory but not
any files within it (in that case the client should remove the
directory or refrain from creating it in the first place).  Note that
servers could clean this up greatly by only telling the client to
create directories if the directory in question should exist, but until
servers do this, clients will need to offer the `-P' behavior described
above.

a663 7
     This response, or `Merged', indicates that the server has
     determined that it is OK to overwrite the previous contents of the
     file specified by PATHNAME.  Provided that the client has correctly
     sent `Modified' or `Is-modified' requests for a modified file, and
     the file was not modified while CVS was running, the server can
     ensure that a user's modifications are not lost.

a669 10
     It is useful to preserve an copy of what the file looked like
     before the merge.  This is basically handled by the server; before
     sending `Merged' it will send a `Copy-file' response.  For
     example, if the file is `aa' and it derives from revision 1.3, the
     `Copy-file' response will tell the client to copy `aa' to
     `.#aa.1.3'.  It is up to the client to decide how long to keep this
     file around; traditionally clients have left it around forever,
     thus letting the user clean it up as desired.  But another answer,
     such as until the next commit, might be preferable.

d947 11
a957 13
Node: Protocol Notes5829
Node: Connection and Authentication7507
Node: Protocol10302
Node: Entries Lines10910
Node: Modes11618
Node: Filenames13141
Node: File transmissions14443
Node: Strings16001
Node: Requests16687
Node: Responses38060
Node: Example49374
Node: Requirements53301
Node: Obsolete54209
@


1.1.1.10
log
@Missing files from initial import
@
text
@d12 1
a12 1
regular CVS manual for that.  This is version 1.9.10 of the protocol
d60 1
a60 1
   This is version 1.9.10 of the protocol specification.  This version
a139 9
     It isn't clear exactly how this should relate to a more general
     multisite feature (in which one can modify the local copy even if
     the network is down between the local and the master, and then
     they get reconciled by a potentially manual process).  Another
     variant of a multisite feature would be where version history is
     cached to speed up operations such as `cvs diff', but in which
     checkins still must be checked in to all sites, or to a master
     site.

a150 31
   * The fact that `pserver' requires an extra network turnaround in
     order to perform authentication would be nice to avoid.  This
     relates to the issue of reporting errors; probably the clean
     solution is to defer the error until the client has issued a
     request which expects a response.  To some extent this might
     relate to the next item (in terms of how easy it is to skip a
     whole bunch of requests until we get to one that expects a
     response).  I know that the kerberos code doesn't wait in this
     fashion, but that probably can cause network deadlocks and perhaps
     future problems running over a transport which is more transaction
     oriented than TCP.  On the other hand I'm not sure it is wise to
     make the client conduct a lengthy upload only to find there is an
     authentication failure.

   * The protocol uses an extra network turnaround for protocol
     negotiation (`valid-requests').  It might be nice to avoid this by
     having the client be able to send requests and tell the server to
     ignore them if they are unrecognized (different requests could
     produce a fatal error if unrecognized).  To do this there should
     be a standard syntax for requests.  For example, perhaps all
     future requests should be a single line, with mechanisms analogous
     to `Argumentx', or several requests working together, to provide
     greater amounts of information.  Or there might be a standard
     mechanism for counted data (analogous to that used by `Modified')
     or continuation lines (like a generalized `Argumentx').  It would
     be useful to compare what HTTP is planning in this area; last I
     looked they were contemplating something called Protocol Extension
     Protocol but I haven't looked at the relevant IETF documents in
     any detail.  Obviously, we want something as simple as possible
     (but no simpler).

a201 12
future possibilities
     There are a nearly unlimited number of ways to connect and
     authenticate.  One might want to allow access based on IP address
     (similar to the usual rsh protocol but with different/no
     restrictions on ports < 1024), to adopt mechanisms such as the
     General Security Service (GSS) API or Pluggable Authentication
     Modules (PAM), to allow users to run their own servers under their
     own usernames without root access, or any number of other
     possibilities.  The way to add future mechanisms, for the most
     part, should be to continue to use port 2401, but to use different
     strings in place of `BEGIN AUTH REQUEST'.

a468 6
     The server should remember `Static-directory' and `Sticky'
     requests for a particular directory; the client need not resend
     them each time it sends a `Directory' request for a given
     directory.  However, the server is not obliged to remember them
     beyond the context of a single command.

d514 8
a521 8
     client is using imperfect mechanisms such as timestamps to
     determine whether to consider a file modified, then the behavior
     will be different.  That is, if one sends `Modified', then the
     server will actually compare the contents of the file sent and the
     one it derives from to determine whether the file is genuinely
     modified.  But if one sends `Is-modified', then the server takes
     the client's word for it.  A similar situation exists for `tag',
     if the `-c' option is specified.
d686 1
a742 67
`add \n'
     Response expected: yes.  Add a file or directory.  This uses any
     previous `Argument', `Directory', `Entry', or `Modified' requests,
     if they have been sent.  The last `Directory' sent specifies the
     working directory at the time of the operation.

     To add a directory, send the directory to be added using
     `Directory' and `Argument' requests.  For example:

          C: Root /u/cvsroot
          . . .
          C: Argument nsdir
          C: Directory nsdir
          C: /u/cvsroot/1dir/nsdir
          C: Directory .
          C: /u/cvsroot/1dir
          C: add
          S: M Directory /u/cvsroot/1dir/nsdir added to the repository
          S: ok

     You will notice that the server does not signal to the client in
     any particular way that the directory has been successfully added.
     The client is supposed to just assume that the directory has been
     added and update its records accordingly.  Note also that adding a
     directory is immediate; it does not wait until a `ci' request as
     files do.

     To add a file, send the file to be added using a `Modified'
     request.  For example:

          C: Argument nfile
          C: Directory .
          C: /u/cvsroot/1dir
          C: Modified nfile
          C: u=rw,g=r,o=r
          C: 6
          C: hello
          C: add
          S: E cvs server: scheduling file `nfile' for addition
          S: Mode u=rw,g=r,o=r
          S: Checked-in ./
          S: /u/cvsroot/1dir/nfile
          S: /nfile/0///
          S: E cvs server: use 'cvs commit' to add this file permanently
          S: ok

     Note that the file has not been added to the repository; the only
     effect of a successful `add' request, for a file, is to supply the
     client with a new entries line containing `0' to indicate an added
     file.  In fact, the client probably could perform this operation
     without contacting the server, although using `add' does cause the
     server to perform a few more checks.

     The client sends a subsequent `ci' to actually add the file to the
     repository.

     Another quirk of the `add' request is that a pathname specified in
     an `Argument' request cannot contain `/'.  There is no good reason
     for this restriction, and it could be eliminated if someone took
     the effort to rewrite the `add' code in the CVS server to not have
     it.  But in the meantime, the way to comply with it is to ensure
     that all `Directory' requests for `add' (except those used to add
     directories, as described above), use `.' for LOCAL-DIRECTORY.
     Specifying another string for LOCAL-DIRECTORY may not get an
     error, but it will get you strange `Checked-in' responses, until
     servers are fixed to send the correct responses.

d912 1
a912 1
`Rcs-diff PATHNAME \n'
d915 8
a922 19
     file, the server sends an RCS change text.  This change text is
     produced by `diff -n' (the GNU diff `-a' option may also be used).
     The client must apply this change text to the existing file.
     This will only be used when the client has an exact copy of an
     earlier revision of a file.  This response is only used if the
     `update' command is given the `-u' argument.

`Patched PATHNAME \n'
     This is just like `Rcs-diff' and takes the same additional data,
     except that it sends a standard patch rather than an RCS change
     text.  The patch is produced by `diff -c' for CVS 1.6 and later
     (see POSIX.2 for a description of this format), or `diff -u' for
     previous versions of CVS; clients are encouraged to accept either
     format.  Like `Rcs-diff', this response is only used if the
     `update' command is given the `-u' argument.

     The `Patched' response is deprecated in favor of the `Rcs-diff'
     response.  However, older clients (CVS 1.9 and earlier) only
     support `Patched'.
a928 16
`Mod-time TIME \n'
     Set the modification time of the next file sent to TIME.  Next
     file sent means sent by `Checked-in', `Created', etc.  The TIME is
     in the format specified by RFC822 as modified by RFC1123.  The
     server may specify any timezone it chooses; clients will want to
     convert that to their own timezone as appropriate.  An example of
     this format is:

          26 May 1997 13:01:40 -0400

     There is no requirement that the client and server clocks be
     synchronized.  The server just sends its recommendation for a
     timestamp (based on its own clock, presumably), and the client
     should just believe it (this means that the time might be in the
     future, for example).

a943 6
     This can optionally be implemented as a rename instead of a copy.
     The only use for it which currently has been identified is prior
     to a `Merged' response as described under `Merged'.  Clients can
     probably assume that is how it is being used, if they want to worry
     about things like how long to keep the NEWNAME file around.

d1045 1
a1045 1
     C: Root /u/cvsroot
d1059 1
a1059 1
     C: /u/cvsroot
d1076 1
a1076 1
     C: /u/cvsroot
d1080 1
a1080 1
is only one file, `mungeall.c'.  The `Clear-sticky' and
d1086 1
a1086 1
     S: /u/cvsroot/supermunger/
d1088 1
a1088 1
     S: /u/cvsroot/supermunger/
d1092 1
a1092 1
     S: /u/cvsroot/supermunger/mungeall.c
d1109 2
a1110 3
     C: Argument Well, you see, it took me hours and hours to find
     C: Argumentx this typo and I searched and searched and eventually
     C: Argumentx had to ask John for help.
d1121 1
a1121 1
     C: /u/cvsroot/supermunger
d1136 1
a1136 1
     S: E /u/cvsroot/supermunger/mungeall.c,v  <--  mungeall.c
d1141 1
a1141 1
     S: /u/cvsroot/supermunger/mungeall.c
d1187 15
a1201 15
Node: Introduction886
Node: Goals3421
Node: Protocol Notes5831
Node: Connection and Authentication9916
Node: Protocol13388
Node: Entries Lines13996
Node: Modes14704
Node: Filenames16227
Node: File transmissions17529
Node: Strings19087
Node: Requests19773
Node: Responses44240
Node: Example57174
Node: Requirements60953
Node: Obsolete61861
@


1.1.1.11
log
@Latest version from Cyclic; files missed in first run
@
text
@d5 1337
a1341 3
Indirect:
cvsclient.info-1: 117
cvsclient.info-2: 50052
a1343 1
(Indirect)
d1345 15
a1359 20
Node: Introduction938
Node: Goals3473
Node: Connection and Authentication6397
Node: Password scrambling12355
Node: Protocol14222
Node: Entries Lines16255
Node: File Modes17358
Node: Filenames18896
Node: File transmissions20203
Node: Strings21761
Node: Request intro22452
Node: Requests22872
Node: Response intro50052
Node: Response pathnames51419
Node: Responses53330
Node: Text tags68213
Node: Example69462
Node: Requirements73241
Node: Obsolete74149
Node: Protocol Notes74887
@


1.1.1.12
log
@Latest version from Cyclic; files missed in first run
@
text
@d1 2
a2 2
This is Info file cvsclient.info, produced by Makeinfo version 1.67
from the input file ../../work/ccvs/doc/cvsclient.texi.
d6 2
a7 2
cvsclient.info-1: 125
cvsclient.info-2: 50060
d11 21
a31 21
Node: Top125
Node: Introduction946
Node: Goals3481
Node: Connection and Authentication6405
Node: Password scrambling12363
Node: Protocol14230
Node: Entries Lines16263
Node: File Modes17366
Node: Filenames18904
Node: File transmissions20211
Node: Strings21769
Node: Request intro22460
Node: Requests22880
Node: Response intro50060
Node: Response pathnames51427
Node: Responses53338
Node: Text tags68221
Node: Example69470
Node: Requirements73249
Node: Obsolete74157
Node: Protocol Notes74895
@


1.1.1.13
log
@Latest version from Cyclic; skipped files
@
text
@d7 1
a7 2
cvsclient.info-2: 23866
cvsclient.info-3: 70456
d17 15
a31 16
Node: Entries Lines16315
Node: File Modes17418
Node: Filenames18956
Node: File transmissions20263
Node: Strings21821
Node: Dates22504
Node: Request intro23448
Node: Requests23866
Node: Response intro51046
Node: Response pathnames52413
Node: Responses54324
Node: Text tags69207
Node: Example70456
Node: Requirements74235
Node: Obsolete75143
Node: Protocol Notes75881
@


1.1.1.14
log
@Latest version from Cyclic; skipped files
@
text
@d2 1
a2 1
from the input file ./cvsclient.texi.
d6 3
a8 3
cvsclient.info-1: 107
cvsclient.info-2: 23844
cvsclient.info-3: 71202
d12 22
a33 22
Node: Top107
Node: Introduction926
Node: Goals3459
Node: Connection and Authentication6383
Node: Password scrambling12341
Node: Protocol14208
Node: Entries Lines16293
Node: File Modes17396
Node: Filenames18934
Node: File transmissions20241
Node: Strings21799
Node: Dates22482
Node: Request intro23426
Node: Requests23844
Node: Response intro51792
Node: Response pathnames53159
Node: Responses55070
Node: Text tags69953
Node: Example71202
Node: Requirements74981
Node: Obsolete75889
Node: Protocol Notes76627
@


1.1.1.15
log
@Latest version from Cyclic; skipped files
@
text
@d2 1
a2 1
from the input file ../../work/ccvs/doc/cvsclient.texi.
d6 3
a8 3
cvsclient.info-1: 125
cvsclient.info-2: 23954
cvsclient.info-3: 59872
d12 22
a33 22
Node: Top125
Node: Introduction946
Node: Goals3481
Node: Connection and Authentication6405
Node: Password scrambling12363
Node: Protocol14230
Node: Entries Lines16315
Node: File Modes17418
Node: Filenames18956
Node: File transmissions20263
Node: Strings21821
Node: Dates22504
Node: Request intro23536
Node: Requests23954
Node: Response intro56594
Node: Response pathnames57961
Node: Responses59872
Node: Text tags75005
Node: Example76719
Node: Requirements80498
Node: Obsolete81406
Node: Protocol Notes82144
@


1.1.1.16
log
@Latest version from Cyclic; skipped files
@
text
@d1 2
a2 2
This is cvsclient.info, produced by Makeinfo version 3.12f from
./cvsclient.texi.
d6 3
a8 3
cvsclient.info-1: 83
cvsclient.info-2: 24794
cvsclient.info-3: 61415
d12 22
a33 22
Node: Top83
Node: Introduction904
Node: Goals3439
Node: Connection and Authentication6363
Node: Password scrambling12601
Node: Protocol14468
Node: Entries Lines16553
Node: File Modes17656
Node: Filenames19194
Node: File transmissions20501
Node: Strings22059
Node: Dates22742
Node: Request intro23774
Node: Requests24794
Node: Response intro58137
Node: Response pathnames59504
Node: Responses61415
Node: Text tags77433
Node: Example79147
Node: Requirements82926
Node: Obsolete83834
Node: Protocol Notes84572
@


1.1.1.17
log
@Latest from Cyclic Software
@
text
@d1 1
a1 1
This is cvsclient.info, produced by makeinfo version 4.0 from
a3 5
INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* cvsclient: (cvsclient).      The CVS client/server protocol.
END-INFO-DIR-ENTRY

d6 3
a8 3
cvsclient.info-1: 214
cvsclient.info-2: 24926
cvsclient.info-3: 64193
d12 22
a33 22
Node: Top214
Node: Introduction1033
Node: Goals3565
Node: Connection and Authentication6489
Node: Password scrambling12727
Node: Protocol14594
Node: Entries Lines16679
Node: File Modes17781
Node: Filenames19319
Node: File transmissions20626
Node: Strings22184
Node: Dates22867
Node: Request intro23906
Node: Requests24926
Node: Response intro60915
Node: Response pathnames62282
Node: Responses64193
Node: Text tags80211
Node: Example81925
Node: Requirements85704
Node: Obsolete86612
Node: Protocol Notes87350
@


1.1.1.18
log
@Latest from Cyclic Software
@
text
@d2 1
a2 1
cvsclient.texi.
d11 3
a13 3
cvsclient.info-1: 212
cvsclient.info-2: 24957
cvsclient.info-3: 64251
d17 22
a38 22
Node: Top212
Node: Introduction1035
Node: Goals3571
Node: Connection and Authentication6495
Node: Password scrambling12733
Node: Protocol14600
Node: Entries Lines16685
Node: File Modes17787
Node: Filenames19325
Node: File transmissions20632
Node: Strings22190
Node: Dates22873
Node: Request intro23937
Node: Requests24957
Node: Response intro60973
Node: Response pathnames62340
Node: Responses64251
Node: Text tags80269
Node: Example81983
Node: Requirements85762
Node: Obsolete86670
Node: Protocol Notes87408
@


