head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.11.0.62
	OPENBSD_6_0_BASE:1.1.1.11
	OPENBSD_5_9:1.1.1.11.0.58
	OPENBSD_5_9_BASE:1.1.1.11
	OPENBSD_5_8:1.1.1.11.0.60
	OPENBSD_5_8_BASE:1.1.1.11
	OPENBSD_5_7:1.1.1.11.0.52
	OPENBSD_5_7_BASE:1.1.1.11
	OPENBSD_5_6:1.1.1.11.0.56
	OPENBSD_5_6_BASE:1.1.1.11
	OPENBSD_5_5:1.1.1.11.0.54
	OPENBSD_5_5_BASE:1.1.1.11
	OPENBSD_5_4:1.1.1.11.0.50
	OPENBSD_5_4_BASE:1.1.1.11
	OPENBSD_5_3:1.1.1.11.0.48
	OPENBSD_5_3_BASE:1.1.1.11
	OPENBSD_5_2:1.1.1.11.0.46
	OPENBSD_5_2_BASE:1.1.1.11
	OPENBSD_5_1_BASE:1.1.1.11
	OPENBSD_5_1:1.1.1.11.0.44
	OPENBSD_5_0:1.1.1.11.0.42
	OPENBSD_5_0_BASE:1.1.1.11
	OPENBSD_4_9:1.1.1.11.0.40
	OPENBSD_4_9_BASE:1.1.1.11
	OPENBSD_4_8:1.1.1.11.0.38
	OPENBSD_4_8_BASE:1.1.1.11
	OPENBSD_4_7:1.1.1.11.0.34
	OPENBSD_4_7_BASE:1.1.1.11
	OPENBSD_4_6:1.1.1.11.0.36
	OPENBSD_4_6_BASE:1.1.1.11
	OPENBSD_4_5:1.1.1.11.0.32
	OPENBSD_4_5_BASE:1.1.1.11
	OPENBSD_4_4:1.1.1.11.0.30
	OPENBSD_4_4_BASE:1.1.1.11
	OPENBSD_4_3:1.1.1.11.0.28
	OPENBSD_4_3_BASE:1.1.1.11
	OPENBSD_4_2:1.1.1.11.0.26
	OPENBSD_4_2_BASE:1.1.1.11
	OPENBSD_4_1:1.1.1.11.0.24
	OPENBSD_4_1_BASE:1.1.1.11
	OPENBSD_4_0:1.1.1.11.0.22
	OPENBSD_4_0_BASE:1.1.1.11
	OPENBSD_3_9:1.1.1.11.0.20
	OPENBSD_3_9_BASE:1.1.1.11
	OPENBSD_3_8:1.1.1.11.0.18
	OPENBSD_3_8_BASE:1.1.1.11
	OPENBSD_3_7:1.1.1.11.0.16
	OPENBSD_3_7_BASE:1.1.1.11
	OPENBSD_3_6:1.1.1.11.0.14
	OPENBSD_3_6_BASE:1.1.1.11
	OPENBSD_3_5:1.1.1.11.0.12
	OPENBSD_3_5_BASE:1.1.1.11
	OPENBSD_3_4:1.1.1.11.0.10
	OPENBSD_3_4_BASE:1.1.1.11
	OPENBSD_3_3:1.1.1.11.0.8
	OPENBSD_3_3_BASE:1.1.1.11
	OPENBSD_3_2:1.1.1.11.0.6
	OPENBSD_3_2_BASE:1.1.1.11
	OPENBSD_3_1:1.1.1.11.0.4
	OPENBSD_3_1_BASE:1.1.1.11
	OPENBSD_3_0:1.1.1.11.0.2
	OPENBSD_3_0_BASE:1.1.1.11
	cvs-1-11-1p1:1.1.1.11
	OPENBSD_2_9:1.1.1.10.0.2
	OPENBSD_2_9_BASE:1.1.1.10
	cvs-1-11:1.1.1.10
	OPENBSD_2_8:1.1.1.9.0.6
	OPENBSD_2_8_BASE:1.1.1.9
	OPENBSD_2_7:1.1.1.9.0.4
	OPENBSD_2_7_BASE:1.1.1.9
	OPENBSD_2_6:1.1.1.9.0.2
	OPENBSD_2_6_BASE:1.1.1.9
	cvs-1-10-7:1.1.1.9
	OPENBSD_2_5:1.1.1.8.0.2
	OPENBSD_2_5_BASE:1.1.1.8
	cvs-1-10-5:1.1.1.8
	OPENBSD_2_4:1.1.1.7.0.2
	OPENBSD_2_4_BASE:1.1.1.7
	cvs-1-10:1.1.1.7
	cvs-1-9-28:1.1.1.6
	OPENBSD_2_3:1.1.1.5.0.2
	OPENBSD_2_3_BASE:1.1.1.5
	cvs-1-9-26:1.1.1.5
	cvs-1-9-24:1.1.1.4
	OPENBSD_2_2:1.1.1.3.0.2
	OPENBSD_2_2_BASE:1.1.1.3
	cvs-1-9-10:1.1.1.3
	OPENBSD_2_1:1.1.1.2.0.2
	OPENBSD_2_1_BASE:1.1.1.2
	cvs-1-9-8:1.1.1.2
	cvs-1-9-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.03.29.04.46.11;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.29.04.46.11;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.04.21.04.34.21;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.06.28.03.35.21;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	98.02.22.08.31.01;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	98.03.12.07.06.04;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	98.07.13.04.05.01;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	98.08.22.20.57.49;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.02.28.21.40.16;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.09.10.05.14.51;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2001.02.10.19.03.20;	author tholo;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2001.09.28.22.48.51;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@This is Info file cvs.info, produced by Makeinfo-1.64 from the input
file ../../work/ccvs/doc/cvs.texinfo.

   Copyright (C) 1992, 1993 Signum Support AB Copyright (C) 1993, 1994
Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the section entitled "GNU General Public License" is included
exactly as in the original, and provided that the entire resulting
derived work is distributed under the terms of a permission notice
identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the section entitled "GNU General Public License"
and this permission notice may be included in translations approved by
the Free Software Foundation instead of in the original English.


File: cvs.info,  Node: Index,  Prev: Copying,  Up: Top

Index
*****

* Menu:

* -j (merging branches):                Merging a branch.
* -k (RCS kflags):                      Substitution modes.
* .# files:                             update output.
* .bashrc, setting CVSROOT in:          Specifying a repository.
* .cshrc, setting CVSROOT in:           Specifying a repository.
* .cvsrc file:                          ~/.cvsrc.
* .profile, setting CVSROOT in:         Specifying a repository.
* .tcshrc, setting CVSROOT in:          Specifying a repository.
* /usr/local/cvsroot, as example repository: Repository.
* :ext::                                Connecting via rsh.
* :kserver::                            Kerberos authenticated.
* :local::                              Repository.
* :pserver::                            Password authentication client.
* :server::                             Connecting via rsh.
* <<<<<<<:                              Conflicts example.
* =======:                              Conflicts example.
* >>>>>>>:                              Conflicts example.
* __ files (VMS):                       update output.
* A sample session:                     A sample session.
* abandoning work:                      Editing files.
* About this manual:                    Preface.
* add (subcommand):                     Adding files.
* Adding a tag:                         Tags.
* Adding files:                         Adding files.
* Admin (subcommand):                   admin.
* Administrative files (intro):         Intro administrative files.
* Administrative files (reference):     Administrative files.
* Administrative files, editing them:   Intro administrative files.
* ALL in commitinfo:                    commitinfo.
* annotate (subcommand):                annotate.
* Atomic transactions, lack of:         Concurrency.
* authenticated client, using:          Password authentication client.
* authenticating server, setting up:    Password authentication server.
* Author keyword:                       Keyword list.
* Automatically ignored files:          cvsignore.
* Avoiding editor invocation:           Common options.
* bill of materials:                    Builds.
* Binary files:                         Binary files.
* Branch merge example:                 Merging a branch.
* Branch number:                        Revision numbers.
* Branch numbers:                       Creating a branch.
* Branch, creating a:                   Creating a branch.
* Branch, vendor-:                      Tracking sources.
* Branches:                             Revisions and branches.
* Branches motivation:                  Branches motivation.
* Branches, copying changes between:    Merging.
* Branches, sticky:                     Sticky tags.
* Bringing a file up to date:           Updating a file.
* Bugs, known in this manual:           BUGS.
* Bugs, reporting (CVS):                What is CVS?.
* Bugs, reporting (manual):             BUGS.
* builds:                               Builds.
* Changes, copying between branches:    Merging.
* Changing a log message:               admin options.
* checked out copy, keeping:            Keeping a checked out copy.
* Checkin program:                      modules.
* Checking commits:                     commitinfo.
* Checking out source:                  Getting the source.
* Checkout (subcommand):                checkout.
* Checkout program:                     modules.
* checkout, as term for getting ready to edit: Editing files.
* Checkout, example:                    Getting the source.
* choosing, reserved or unreserved checkouts: Choosing a model.
* Cleaning up:                          Cleaning up.
* Client/Server Operation:              Remote repositories.
* Co (subcommand):                      checkout.
* Command reference:                    Invoking CVS.
* Command structure:                    Structure.
* Comment leader:                       admin examples.
* Commit (subcommand):                  commit.
* Commit files:                         commit files.
* Commit, when to:                      When to commit.
* Commitinfo:                           commitinfo.
* Committing changes:                   Committing your changes.
* Common options:                       Common options.
* Common syntax of info files:          syntax.
* compatibility, between CVS versions:  Compatibility.
* COMSPEC:                              Environment variables.
* Conflict markers:                     Conflicts example.
* Conflict resolution:                  Conflicts example.
* Conflicts (merge example):            Conflicts example.
* Contributors (CVS program):           What is CVS?.
* Contributors (manual):                Credits.
* Copying changes:                      Merging.
* Correcting a log message:             admin options.
* Creating a branch:                    Creating a branch.
* Creating a project:                   Starting a new project.
* Creating a repository:                Creating a repository.
* Credits (CVS program):                What is CVS?.
* Credits (manual):                     Credits.
* CVS 1.6, and watches:                 Watches Compatibility.
* CVS command structure:                Structure.
* CVS passwd file:                      Password authentication server.
* CVS, history of:                      What is CVS?.
* CVS, introduction to:                 What is CVS?.
* CVS, versions of:                     Compatibility.
* CVS_CLIENT_LOG:                       Environment variables.
* CVS_CLIENT_PORT:                      Kerberos authenticated.
* CVS_IGNORE_REMOTE_ROOT:               Environment variables.
* CVS_PASSFILE, environment variable:   Password authentication client.
* CVS_RCMD_PORT:                        Environment variables.
* CVS_RSH:                              Environment variables.
* CVS_SERVER:                           Connecting via rsh.
* CVS_SERVER_SLEEP:                     Environment variables.
* CVSEDITOR:                            Environment variables.
* CVSEDITOR, environment variable:      Committing your changes.
* CVSIGNORE:                            Environment variables.
* cvsignore (admin file), global:       cvsignore.
* CVSREAD:                              Environment variables.
* CVSREAD, overriding:                  Global options.
* CVSROOT:                              Environment variables.
* cvsroot:                              Repository.
* CVSROOT (file):                       Administrative files.
* CVSROOT, environment variable:        Specifying a repository.
* CVSROOT, module name:                 Intro administrative files.
* CVSROOT, multiple repositories:       Multiple repositories.
* CVSROOT, overriding:                  Global options.
* CVSUMASK:                             File permissions.
* CVSWRAPPERS:                          Environment variables.
* cvswrappers (admin file):             Wrappers.
* CVSWRAPPERS, environment variable:    Wrappers.
* Date keyword:                         Keyword list.
* Dates:                                Common options.
* Decimal revision number:              Revision numbers.
* DEFAULT in commitinfo:                commitinfo.
* DEFAULT in editinfo:                  editinfo.
* DEFAULT in verifymsg:                 verifymsg.
* Defining a module:                    Defining the module.
* Defining modules (intro):             Intro administrative files.
* Defining modules (reference manual):  modules.
* Deleting files:                       Removing files.
* Deleting revisions:                   admin options.
* Deleting sticky tags:                 Sticky tags.
* Descending directories:               Recursive behavior.
* Diff:                                 Viewing differences.
* Diff (subcommand):                    diff.
* Differences, merging:                 Merging two revisions.
* Directories, moving:                  Moving directories.
* directories, removing:                Removing directories.
* Directory, descending:                Recursive behavior.
* Disjoint repositories:                Multiple repositories.
* Distributing log messages:            loginfo.
* driver.c (merge example):             Conflicts example.
* edit (subcommand):                    Editing files.
* editinfo (admin file):                editinfo.
* Editing administrative files:         Intro administrative files.
* Editing the modules file:             Defining the module.
* EDITOR:                               Environment variables.
* Editor, avoiding invocation of:       Common options.
* EDITOR, environment variable:         Committing your changes.
* EDITOR, overriding:                   Global options.
* Editor, specifying per module:        editinfo.
* editors (subcommand):                 Watch information.
* emerge:                               Conflicts example.
* Environment variables:                Environment variables.
* Errors, reporting (CVS):              What is CVS?.
* Errors, reporting (manual):           BUGS.
* Example of a work-session:            A sample session.
* Example of merge:                     Conflicts example.
* Example, branch merge:                Merging a branch.
* Export (subcommand):                  export.
* Export program:                       modules.
* Fetching source:                      Getting the source.
* File had conflicts on merge:          File status.
* File locking:                         Multiple developers.
* File permissions:                     File permissions.
* File status:                          File status.
* Files, moving:                        Moving files.
* Files, reference manual:              Administrative files.
* Fixing a log message:                 admin options.
* Forcing a tag match:                  Common options.
* Form for log message:                 rcsinfo.
* Format of CVS commands:               Structure.
* Getting started:                      A sample session.
* Getting the source:                   Getting the source.
* Global cvsignore:                     cvsignore.
* Global options:                       Global options.
* Group:                                File permissions.
* Header keyword:                       Keyword list.
* History (subcommand):                 history.
* History browsing:                     History browsing.
* History file:                         history file.
* History files:                        Repository files.
* History of CVS:                       What is CVS?.
* HOME:                                 Environment variables.
* HOMEPATH:                             Environment variables.
* Id keyword:                           Keyword list.
* Ident (shell command):                Using keywords.
* Identifying files:                    Keyword substitution.
* Ignored files:                        cvsignore.
* Ignoring files:                       cvsignore.
* Import (subcommand):                  import.
* Importing files:                      From files.
* Importing files, from other version control systesm: From other version control systems.
* Importing modules:                    First import.
* Index:                                Index.
* Info files (syntax):                  syntax.
* Informing others:                     Informing others.
* init (subcommand):                    Creating a repository.
* Introduction to CVS:                  What is CVS?.
* Invoking CVS:                         Invoking CVS.
* Isolation:                            History browsing.
* Join:                                 Merging a branch.
* keeping a checked out copy:           Keeping a checked out copy.
* kerberos:                             Kerberos authenticated.
* Keyword expansion:                    Keyword substitution.
* Keyword substitution:                 Keyword substitution.
* Kflag:                                Substitution modes.
* kinit:                                Kerberos authenticated.
* Known bugs in this manual:            BUGS.
* Layout of repository:                 Repository.
* Left-hand options:                    Global options.
* Linear development:                   Revision numbers.
* link, symbolic, importing:            import output.
* List, mailing list:                   What is CVS?.
* Locally Added:                        File status.
* Locally Modified:                     File status.
* Locally Removed:                      File status.
* Locker keyword:                       Keyword list.
* Locking files:                        Multiple developers.
* locks, cvs:                           Concurrency.
* Log (subcommand):                     log.
* Log information, saving:              history file.
* Log keyword:                          Keyword list.
* Log keyword, selecting comment leader: admin examples.
* Log message entry:                    Committing your changes.
* Log message template:                 rcsinfo.
* Log message, correcting:              admin options.
* log message, verifying:               verifymsg.
* Log messages:                         loginfo.
* Log messages, editing:                editinfo.
* Login (subcommand):                   Password authentication client.
* loginfo (admin file):                 loginfo.
* LOGNAME:                              Environment variables.
* Logout (subcommand):                  Password authentication client.
* Mail, automatic mail on commit:       Informing others.
* Mailing list:                         What is CVS?.
* Mailing log messages:                 loginfo.
* Main trunk (intro):                   Revision numbers.
* Main trunk and branches:              Revisions and branches.
* make:                                 Builds.
* Many repositories:                    Multiple repositories.
* Markers, conflict:                    Conflicts example.
* Merge, an example:                    Conflicts example.
* Merge, branch example:                Merging a branch.
* Merging:                              Merging.
* Merging a branch:                     Merging a branch.
* Merging a file:                       Updating a file.
* Merging two revisions:                Merging two revisions.
* Modifications, copying between branches: Merging.
* Module status:                        modules.
* Module, defining:                     Defining the module.
* Modules (admin file):                 modules.
* Modules file:                         Intro administrative files.
* Modules file, changing:               Defining the module.
* Motivation for branches:              Branches motivation.
* Moving directories:                   Moving directories.
* Moving files:                         Moving files.
* Multiple developers:                  Multiple developers.
* Multiple repositories:                Multiple repositories.
* Name keyword:                         Keyword list.
* Name, symbolic (tag):                 Tags.
* Needs Checkout:                       File status.
* Needs Merge:                          File status.
* Needs Patch:                          File status.
* Newsgroups:                           What is CVS?.
* notify (admin file):                  Getting Notified.
* Nroff (selecting comment leader):     admin examples.
* Number, branch:                       Revision numbers.
* Number, revision-:                    Revision numbers.
* option defaults:                      ~/.cvsrc.
* Options, global:                      Global options.
* Outdating revisions:                  admin options.
* Overlap:                              Updating a file.
* Overriding CVSREAD:                   Global options.
* Overriding CVSROOT:                   Global options.
* Overriding EDITOR:                    Global options.
* Overriding RCSBIN:                    Global options.
* Overriding TMPDIR:                    Global options.
* Parallel repositories:                Multiple repositories.
* passwd (admin file):                  Password authentication server.
* password client, using:               Password authentication client.
* password server, setting up:          Password authentication server.
* PATH:                                 Environment variables.
* Per-module editor:                    editinfo.
* Policy:                               When to commit.
* Precommit checking:                   commitinfo.
* Preface:                              Preface.
* Pserver (subcommand):                 Password authentication server.
* RCS history files:                    Repository files.
* RCS keywords:                         Keyword list.
* RCS revision numbers:                 Tags.
* RCS, importing files from:            From other version control systems.
* RCS-style locking:                    Multiple developers.
* RCSBIN:                               Environment variables.
* RCSBIN, overriding:                   Global options.
* RCSfile keyword:                      Keyword list.
* rcsinfo (admin file):                 rcsinfo.
* RCSINIT:                              Environment variables.
* Rdiff (subcommand):                   rdiff.
* read-only files, and -r:              Global options.
* read-only files, and CVSREAD:         Environment variables.
* read-only files, and watches:         Setting a watch.
* read-only files, in repository:       File permissions.
* Read-only mode:                       Global options.
* read-only repository access:          Read-only access.
* readers (admin file):                 Read-only access.
* Recursive (directory descending):     Recursive behavior.
* Reference manual (files):             Administrative files.
* Reference manual for variables:       Environment variables.
* Reference, commands:                  Invoking CVS.
* regular expression syntax:            syntax.
* Release (subcommand):                 release.
* Releases, revisions and versions:     Versions revisions releases.
* Releasing your working copy:          Cleaning up.
* Remote repositories:                  Remote repositories.
* Remove (subcommand):                  Removing files.
* Removing a change:                    Merging two revisions.
* removing directories:                 Removing directories.
* Removing files:                       Removing files.
* Removing your working copy:           Cleaning up.
* Renaming directories:                 Moving directories.
* Renaming files:                       Moving files.
* Replacing a log message:              admin options.
* Reporting bugs (CVS):                 What is CVS?.
* Reporting bugs (manual):              BUGS.
* Repositories, multiple:               Multiple repositories.
* Repositories, remote:                 Remote repositories.
* Repository (intro):                   Repository.
* Repository, example:                  Repository.
* Repository, how data is stored:       Repository storage.
* Repository, setting up:               Creating a repository.
* reserved checkouts:                   Multiple developers.
* Resetting sticky tags:                Sticky tags.
* Resolving a conflict:                 Conflicts example.
* Restoring old version of removed file: Sticky tags.
* Resurrecting old version of dead file: Sticky tags.
* Retrieving an old revision using tags: Tags.
* reverting to repository version:      Editing files.
* Revision keyword:                     Keyword list.
* Revision management:                  Revision management.
* Revision numbers:                     Revision numbers.
* Revision tree:                        Revision numbers.
* Revision tree, making branches:       Revisions and branches.
* Revisions, merging differences between: Merging two revisions.
* Revisions, versions and releases:     Versions revisions releases.
* Right-hand options:                   Common options.
* rsh:                                  Connecting via rsh.
* Rtag (subcommand):                    rtag.
* rtag, creating a branch using:        Creating a branch.
* Saving space:                         admin options.
* SCCS, importing files from:           From other version control systems.
* Security:                             File permissions.
* server, CVS:                          Remote repositories.
* setgid:                               File permissions.
* Setting up a repository:              Creating a repository.
* setuid:                               File permissions.
* Signum Support:                       Preface.
* Source keyword:                       Keyword list.
* Source, getting CVS source:           What is CVS?.
* Source, getting from CVS:             Getting the source.
* Specifying dates:                     Common options.
* Spreading information:                Informing others.
* Starting a project with CVS:          Starting a new project.
* State keyword:                        Keyword list.
* Status (subcommand):                  status.
* Status of a file:                     File status.
* Status of a module:                   modules.
* sticky date:                          Sticky tags.
* Sticky tags:                          Sticky tags.
* Sticky tags, resetting:               Sticky tags.
* Storing log messages:                 loginfo.
* Structure:                            Structure.
* Subdirectories:                       Recursive behavior.
* Support, getting CVS support:         Preface.
* symbolic link, importing:             import output.
* Symbolic name (tag):                  Tags.
* Syntax of info files:                 syntax.
* Tag (subcommand):                     tag.
* Tag program:                          modules.
* tag, command, introduction:           Tags.
* tag, example:                         Tags.
* Tag, retrieving old revisions:        Tags.
* Tag, symbolic name:                   Tags.
* taginfo:                              user-defined logging.
* Tags:                                 Tags.
* Tags, sticky:                         Sticky tags.
* tc, Trivial Compiler (example):       A sample session.
* Team of developers:                   Multiple developers.
* TEMP:                                 Environment variables.
* Template for log message:             rcsinfo.
* temporary files, location of:         Environment variables.
* Third-party sources:                  Tracking sources.
* Time:                                 Common options.
* timezone, in input:                   Common options.
* timezone, in output:                  log.
* TMP:                                  Environment variables.
* TMPDIR:                               Environment variables.
* TMPDIR, overriding:                   Global options.
* Trace:                                Global options.
* Traceability:                         History browsing.
* Tracking sources:                     Tracking sources.
* Transactions, atomic, lack of:        Concurrency.
* Trivial Compiler (example):           A sample session.
* Typical repository:                   Repository.
* umask, for repository files:          File permissions.
* Undoing a change:                     Merging two revisions.
* unedit (subcommand):                  Editing files.
* Unknown:                              File status.
* unreserved checkouts:                 Multiple developers.
* Up-to-date:                           File status.
* Update (subcommand):                  update.
* Update program:                       modules.
* update, introduction:                 Updating a file.
* Updating a file:                      Updating a file.
* USER:                                 Environment variables.
* user aliases:                         Password authentication server.
* users (admin file):                   Getting Notified.
* Vendor:                               Tracking sources.
* Vendor branch:                        Tracking sources.
* verifymsg (admin file):               verifymsg.
* versions, of CVS:                     Compatibility.
* Versions, revisions and releases:     Versions revisions releases.
* Viewing differences:                  Viewing differences.
* watch add (subcommand):               Getting Notified.
* watch off (subcommand):               Setting a watch.
* watch on (subcommand):                Setting a watch.
* watch remove (subcommand):            Getting Notified.
* watchers (subcommand):                Watch information.
* Watches:                              Watches.
* Wdiff (import example):               First import.
* web pages, maintaining with CVS:      Keeping a checked out copy.
* What (shell command):                 Using keywords.
* What branches are good for:           Branches motivation.
* What is CVS?:                         What is CVS?.
* When to commit:                       When to commit.
* Work-session, example of:             A sample session.
* Working copy:                         Multiple developers.
* Working copy, removing:               Cleaning up.
* Wrappers:                             Wrappers.
* writers (admin file):                 Read-only access.
* zone, time, in input:                 Common options.
* zone, time, in output:                log.


@


1.1.1.1
log
@Latest release from Cyclic Software
@
text
@@


1.1.1.2
log
@Missing files from import
@
text
@a62 1
* attic:                                Attic.
a67 1
* Base directory, in CVS directory:     Working directory storage.
a87 1
* Checkin.prog file, in CVS directory:  Working directory storage.
a127 13
* CVS/Base directory:                   Working directory storage.
* CVS/Checkin.prog file:                Working directory storage.
* CVS/Entries file:                     Working directory storage.
* CVS/Entries.Backup file:              Working directory storage.
* CVS/Entries.Log file:                 Working directory storage.
* CVS/Entries.Static file:              Working directory storage.
* CVS/Notify file:                      Working directory storage.
* CVS/Notify.tmp file:                  Working directory storage.
* CVS/Repository file:                  Working directory storage.
* CVS/Root file:                        Specifying a repository.
* CVS/Tag file:                         Working directory storage.
* CVS/Template file:                    Working directory storage.
* CVS/Update.prog file:                 Working directory storage.
a154 1
* dead state:                           Attic.
a185 4
* Entries file, in CVS directory:       Working directory storage.
* Entries.Backup file, in CVS directory: Working directory storage.
* Entries.Log file, in CVS directory:   Working directory storage.
* Entries.Static file, in CVS directory: Working directory storage.
d270 1
a280 1
* mkmodules:                            Error messages.
a298 2
* Notify file, in CVS directory:        Working directory storage.
* Notify.tmp file, in CVS directory:    Working directory storage.
a315 1
* Per-directory sticky tags/dates:      Working directory storage.
a360 1
* Repository file, in CVS directory:    Working directory storage.
a378 1
* Root file, in CVS directory:          Specifying a repository.
a402 1
* Sticky tags/dates, per-directory:     Working directory storage.
a410 1
* Tag file, in CVS directory:           Working directory storage.
a421 1
* Template file, in CVS directory:      Working directory storage.
a445 1
* Update.prog file, in CVS directory:   Working directory storage.
@


1.1.1.3
log
@Missing files from initial import
@
text
@d33 1
a33 1
* -k (keyword substitution):            Substitution modes.
a68 1
* Backing up, repository:               Backing up.
d82 3
a84 2
* Bugs in this manual or CVS:           BUGS.
* Bugs, reporting:                      BUGS.
a117 1
* copying a repository:                 Moving a repository.
a168 1
* Cyclic Software:                      BUGS.
d208 2
a209 1
* Errors, reporting:                    BUGS.
a212 5
* exit status, of commitinfo:           commitinfo.
* exit status, of CVS:                  Exit status.
* exit status, of editor:               Error messages.
* exit status, of taginfo:              user-defined logging.
* exit status, of verifymsg:            verifymsg.
d246 1
a246 1
* Importing files, from other version control systems: From other version control systems.
d262 1
a262 1
* Known bugs in this manual or CVS:     BUGS.
a308 1
* moving a repository:                  Moving a repository.
a310 1
* moving tags:                          tag options.
a378 1
* renaming tags:                        tag options.
d380 2
a381 1
* Reporting bugs:                       BUGS.
a385 1
* Repository, backing up:               Backing up.
a387 1
* repository, moving:                   Moving a repository.
a411 1
* server, temporary directories:        Server temporary directory.
d415 1
a415 1
* Signum Support:                       BUGS.
d423 1
d433 1
a433 1
* Support, getting CVS support:         BUGS.
a445 1
* tags, renaming:                       tag options.
a451 1
* temporary directories, and server:    Server temporary directory.
a474 1
* update, to display file status:       File status.
@


1.1.1.4
log
@Latest version from Cyclic; files missed in first run
@
text
@d25 1
a25 1
File: cvs.info,  Node: BUGS,  Next: Copying,  Prev: Credits,  Up: Top
d27 2
a28 2
Dealing with bugs in CVS or this manual
***************************************
d30 1
a30 6
   Neither CVS nor this manual is perfect, and they probably never will
be.  If you are having trouble using CVS, or think you have found a
bug, there are a number of things you can do about it.  Note that if
the manual is unclear, that can be considered a bug in the manual, so
these problems are often worth doing something about as well as
problems with CVS itself.
d32 486
a517 3
   * If you want someone to help you and fix bugs that you report,
     there are companies which will do that for a fee.  Two such
     companies are:
a518 427
          Signum Support AB
          Box 2044
          S-580 02  Linkoping
          Sweden
          Email: info@@signum.se
          Phone: +46 (0)13 - 21 46 00
          Fax:   +46 (0)13 - 21 47 00
          http://www.signum.se/
          
          Cyclic Software
          United States of America
          http://www.cyclic.com/
          info@@cyclic.com

   * If you got CVS through a distributor, such as an operating system
     vendor or a vendor of freeware CD-ROMs, you may wish to see
     whether the distributor provides support.  Often, they will provide
     no support or minimal support, but this may vary from distributor
     to distributor.

   * If you have the skills and time to do so, you may wish to fix the
     bug yourself.  If you wish to submit your fix for inclusion in
     future releases of CVS, see the file HACKING in the CVS source
     distribution.  It contains much more information on the process of
     submitting fixes.

   * There may be resources on the net which can help.  Two good places
     to start are:

          http://www.cyclic.com
          http://www.loria.fr/~molli/cvs-index.html

     If you are so inspired, increasing the information available on
     the net is likely to be appreciated.  For example, before the
     standard CVS distribution worked on Windows 95, there was a web
     page with some explanation and patches for running CVS on Windows
     95, and various people helped out by mentioning this page on
     mailing lists or newsgroups when the subject came up.

   * It is also possible to report bugs to `bug-cvs'.  Note that
     someone may or may not want to do anything with your bug
     report--if you need a solution consider one of the options
     mentioned above.  People probably do want to hear about bugs which
     are particularly severe in consequences and/or easy to fix,
     however.  You can also increase your odds by being as clear as
     possible about the exact nature of the bug and any other relevant
     information.  The way to report bugs is to send email to
     `bug-cvs@@gnu.org'.  Note that submissions to `bug-cvs' may be
     distributed under the terms of the GNU Public License, so if you
     don't like this, don't submit them.  There is usually no
     justification for sending mail directly to one of the CVS
     maintainers rather than to `bug-cvs'; those maintainers who want
     to hear about such bug reports read `bug-cvs'.  Also note that
     sending a bug report to other mailing lists or newsgroups is *not*
     a substitute for sending it to `bug-cvs'.  It is fine to discuss
     CVS bugs on whatever forum you prefer, but there are not
     necessarily any maintainers reading bug reports sent anywhere
     except `bug-cvs'.

   People often ask if there is a list of known bugs or whether a
particular bug is a known one.  The file BUGS in the CVS source
distribution is one list of known bugs, but it doesn't necessarily try
to be comprehensive.  Perhaps there will never be a comprehensive,
detailed list of known bugs.


File: cvs.info,  Node: Copying,  Next: Index,  Prev: BUGS,  Up: Top

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs
=============================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.
@


1.1.1.5
log
@Latest version from Cyclic; files missed in first run
@
text
@d1 2
a2 2
This is Info file cvs.info, produced by Makeinfo version 1.67 from the
input file ../../work/ccvs/doc/cvs.texinfo.
a22 330


File: cvs.info,  Node: Error messages,  Next: Connection,  Up: Troubleshooting

Partial list of error messages
==============================

   Here is a partial list of error messages that you may see from CVS.
It is not a complete list--CVS is capable of printing many, many error
messages, often with parts of them supplied by the operating system,
but the intention is to list the common and/or potentially confusing
error messages.

   The messages are alphabetical, but introductory text such as `cvs
update: ' is not considered in ordering them.

   In some cases the list includes messages printed by old versions of
CVS (partly because users may not be sure which version of CVS they are
using at any particular moment).

`cvs COMMAND: authorization failed: server HOST rejected access'
     This is a generic response when trying to connect to a pserver
     server which chooses not to provide a specific reason for denying
     authorization.  Check that the username and password specified are
     correct and that the CVSROOT specified is allowed by -allow-root
     in inetd.conf.  See *Note Password authenticated::.

`FILE:LINE: Assertion 'TEXT' failed'
     The exact format of this message may vary depending on your
     system.  It indicates a bug in CVS, which can be handled as
     described in *Note BUGS::.

`cannot change permissions on temporary directory'
          Operation not permitted
     This message has been happening in a non-reproducible, occasional
     way when we run the client/server testsuite, both on Red Hat Linux
     3.0.3 and 4.1.  We haven't been able to figure out what causes it,
     nor is it known whether it is specific to linux (or even to this
     particular machine!).  If the problem does occur on other unices,
     `Operation not permitted' would be likely to read `Not owner' or
     whatever the system in question uses for the unix `EPERM' error.
     If you have any information to add, please let us know as
     described in *Note BUGS::.  If you experience this error while
     using CVS, retrying the operation which produced it should work
     fine.

`cannot open CVS/Entries for reading: No such file or directory'
     This generally indicates a CVS internal error, and can be handled
     as with other CVS bugs (*note BUGS::.).  Usually there is a
     workaround--the exact nature of which would depend on the
     situation but which hopefully could be figured out.

`cvs [init aborted]: cannot open CVS/Root: No such file or directory'
     This message is harmless.  Provided it is not accompanied by other
     errors, the operation has completed successfully.  This message
     should not occur with current versions of CVS, but it is documented
     here for the benefit of CVS 1.9 and older.

`cvs [checkout aborted]: cannot rename file FILE to CVS/,,FILE: Invalid argument'
     This message has been reported as intermittently happening with
     CVS 1.9 on Solaris 2.5.  The cause is unknown; if you know more
     about what causes it, let us know as described in *Note BUGS::.

`cvs [COMMAND aborted]: cannot start server via rcmd'
     This, unfortunately, is a rather nonspecific error message which
     CVS 1.9 will print if you are running the CVS client and it is
     having trouble connecting to the server.  Current versions of CVS
     should print a much more specific error message.  If you get this
     message when you didn't mean to run the client at all, you
     probably forgot to specify `:local:', as described in *Note
     Repository::.

`ci: FILE,v: bad diff output line: Binary files - and /tmp/T2a22651 differ'
     CVS 1.9 and older will print this message when trying to check in
     a binary file if RCS is not correctly installed.  Re-read the
     instructions that came with your RCS distribution and the INSTALL
     file in the CVS distribution.  Alternately, upgrade to a current
     version of CVS, which checks in files itself rather than via RCS.

`cvs checkout: could not check out FILE'
     With CVS 1.9, this can mean that the `co' program (part of RCS)
     returned a failure.  It should be preceded by another error
     message, however it has been observed without another error
     message and the cause is not well-understood.  With the current
     version of CVS, which does not run `co', if this message occurs
     without another error message, it is definitely a CVS bug (*note
     BUGS::.).

`cvs [login aborted]: could not find out home directory'
     This means that you need to set the environment variables that CVS
     uses to locate your home directory.  See the discussion of HOME,
     HOMEDRIVE, and HOMEPATH in *Note Environment variables::.

`cvs update: could not merge revision REV of FILE: No such file or directory'
     CVS 1.9 and older will print this message if there was a problem
     finding the `rcsmerge' program.  Make sure that it is in your
     `PATH', or upgrade to a current version of CVS, which does not
     require an external `rcsmerge' program.

`cvs [update aborted]: could not patch FILE: No such file or directory'
     This means that there was a problem finding the `patch' program.
     Make sure that it is in your `PATH'.  Note that despite
     appearances the message is *not* referring to whether it can find
     FILE.  If both the client and the server are running a current
     version of CVS, then there is no need for an external patch
     program and you should not see this message.  But if either client
     or server is running CVS 1.9, then you need `patch'.

`cvs update: could not patch FILE; will refetch'
     This means that for whatever reason the client was unable to apply
     a patch that the server sent.  The message is nothing to be
     concerned about, because inability to apply the patch only slows
     things down and has no effect on what CVS does.

`dying gasps from SERVER unexpected'
     There is a known bug in the server for CVS 1.9.18 and older which
     can cause this.  For me, this was reproducible if I used the `-t'
     global option.  It was fixed by Andy Piper's 14 Nov 1997 change to
     src/filesubr.c, if anyone is curious.  If you see the message, you
     probably can just retry the operation which failed, or if you have
     discovered information concerning its cause, please let us know as
     described in *Note BUGS::.

`end of file from server (consult above messages if any)'
     The most common cause for this message is if you are using an
     external `rsh' program and it exited with an error.  In this case
     the `rsh' program should have printed a message, which will appear
     before the above message.  For more information on setting up a
     CVS client and server, see *Note Remote repositories::.

`cvs commit: Executing 'mkmodules''
     This means that your repository is set up for a version of CVS
     prior to CVS 1.8.  When using CVS 1.8 or later, the above message
     will be preceded by

          cvs commit: Rebuilding administrative file database

     If you see both messages, the database is being rebuilt twice,
     which is unnecessary but harmless.  If you wish to avoid the
     duplication, and you have no versions of CVS 1.7 or earlier in
     use, remove `-i mkmodules' every place it appears in your `modules'
     file.  For more information on the `modules' file, see *Note
     modules::.

`missing author'
     Typically this can happen if you created an RCS file with your
     username set to empty.  CVS will, bogusly, create an illegal RCS
     file with no value for the author field.  The solution is to make
     sure your username is set to a non-empty value and re-create the
     RCS file.

`*PANIC* administration files missing'
     This typically means that there is a directory named CVS but it
     does not contain the administrative files which CVS puts in a CVS
     directory.  If the problem is that you created a CVS directory via
     some mechanism other than CVS, then the answer is simple, use a
     name other than CVS.  If not, it indicates a CVS bug (*note
     BUGS::.).

`rcs error: Unknown option: -x,v/'
     This message will be followed by a usage message for RCS.  It
     means that you have an old version of RCS (probably supplied with
     your operating system).  CVS only works with RCS version 5 and
     later.

`cvs [server aborted]: received broken pipe signal'
     This message seems to be caused by a hard-to-track-down bug in CVS
     or the systems it runs on (we don't know--we haven't tracked it
     down yet!).  It seems to happen only after a CVS command has
     completed, and you should be able to just ignore the message.
     However, if you have discovered information concerning its cause,
     please let us know as described in *Note BUGS::.

`Too many arguments!'
     This message is typically printed by the `log.pl' script which is
     in the `contrib' directory in the CVS source distribution.  In
     some versions of CVS, `log.pl' has been part of the default CVS
     installation.  The `log.pl' script gets called from the `loginfo'
     administrative file.  Check that the arguments passed in `loginfo'
     match what your version of `log.pl' expects.  In particular, the
     `log.pl' from CVS 1.3 and older expects the logfile as an argument
     whereas the `log.pl' from CVS 1.5 and newer expects the logfile to
     be specified with a `-f' option.  Of course, if you don't need
     `log.pl' you can just comment it out of `loginfo'.

`cvs commit: Up-to-date check failed for `FILE''
     This means that someone else has committed a change to that file
     since the last time that you did a `cvs update'.  So before
     proceeding with your `cvs commit' you need to `cvs update'.  CVS
     will merge the changes that you made and the changes that the
     other person made.  If it does not detect any conflicts it will
     report `M cacErrCodes.h' and you are ready to `cvs commit'.  If it
     detects conflicts it will print a message saying so, will report
     `C cacErrCodes.h', and you need to manually resolve the conflict.
     For more details on this process see *Note Conflicts example::.

`Usage:	diff3 [-exEX3 [-i | -m] [-L label1 -L label3]] file1 file2 file3'
          Only one of [exEX3] allowed
     This indicates a problem with the installation of `diff3' and
     `rcsmerge'.  Specifically `rcsmerge' was compiled to look for GNU
     diff3, but it is finding unix diff3 instead.  The exact text of
     the message will vary depending on the system.  The simplest
     solution is to upgrade to a current version of CVS, which does not
     rely on external `rcsmerge' or `diff3' programs.

`warning: unrecognized response `TEXT' from cvs server'
     If TEXT contains a valid response (such as `ok') followed by an
     extra carriage return character (on many systems this will cause
     the second part of the message to overwrite the first part), then
     it probably means that you are using the `:ext:' access method
     with a version of rsh, such as most non-unix rsh versions, which
     does not by default provide a transparent data stream.  In such
     cases you probably want to try `:server:' instead of `:ext:'.  If
     TEXT is something else, this may signify a problem with your CVS
     server.  Double-check your installation against the instructions
     for setting up the CVS server.

`cvs commit: warning: editor session failed'
     This means that the editor which CVS is using exits with a nonzero
     exit status.  Some versions of vi will do this even when there was
     not a problem editing the file.  If so, point the CVSEDITOR
     environment variable to a small script such as:

          #!/bin/sh
          vi $*
          exit 0


File: cvs.info,  Node: Connection,  Next: Other problems,  Prev: Error messages,  Up: Troubleshooting

Trouble making a connection to a CVS server
===========================================

   This section concerns what to do if you are having trouble making a
connection to a CVS server.  If you are running the CVS command line
client running on Windows, first upgrade the client to CVS 1.9.12 or
later.  The error reporting in earlier versions provided much less
information about what the problem was.  If the client is non-Windows,
CVS 1.9 should be fine.

   If the error messages are not sufficient to track down the problem,
the next steps depend largely on which access method you are using.

`:ext:'
     Try running the rsh program from the command line.  For example:
     "rsh servername cvs -v" should print CVS version information.  If
     this doesn't work, you need to fix it before you can worry about
     CVS problems.

`:server:'
     You don't need a command line rsh program to use this access
     method, but if you have an rsh program around, it may be useful as
     a debugging tool.  Follow the directions given for :ext:.

`:pserver:'
     One good debugging tool is to "telnet servername 2401".  After
     connecting, send any text (for example "foo" followed by return).
     If CVS is working correctly, it will respond with

          cvs [pserver aborted]: bad auth protocol start: foo

     If this fails to work, then make sure inetd is working right.
     Change the invocation in inetd.conf to run the echo program
     instead of cvs.  For example:

          2401  stream  tcp  nowait  root /bin/echo echo hello

     After making that change and instructing inetd to re-read its
     configuration file, "telnet servername 2401" should show you the
     text hello and then the server should close the connection.  If
     this doesn't work, you need to fix it before you can worry about
     CVS problems.

     On AIX systems, the system will often have its own program trying
     to use port 2401.  This is AIX's problem in the sense that port
     2401 is registered for use with CVS.  I hear that there is an AIX
     patch available to address this problem.


File: cvs.info,  Node: Other problems,  Prev: Connection,  Up: Troubleshooting

Other common problems
=====================

   Here is a list of problems which do not fit into the above
categories.  They are in no particular order.

   * If you are running CVS 1.9.18 or older, and `cvs update' finds a
     conflict and tries to merge, as described in *Note Conflicts
     example::, but doesn't tell you there were conflicts, then you may
     have an old version of RCS.  The easiest solution probably is to
     upgrade to a current version of CVS, which does not rely on
     external RCS programs.


File: cvs.info,  Node: Credits,  Next: BUGS,  Prev: Troubleshooting,  Up: Top

Credits
*******

   Roland Pesch, then of Cygnus Support <roland@@wrs.com> wrote the
manual pages which were distributed with CVS 1.3.  Much of their text
was copied into this manual.  He also read an early draft of this
manual and contributed many ideas and corrections.

   The mailing-list `info-cvs' is sometimes informative. I have
included information from postings made by the following persons: David
G. Grubbs <dgg@@think.com>.

   Some text has been extracted from the man pages for RCS.

   The CVS FAQ by David G. Grubbs has provided useful material.  The
FAQ is no longer maintained, however, and this manual is about the
closest thing there is to a successor (with respect to documenting how
to use CVS, at least).

   In addition, the following persons have helped by telling me about
mistakes I've made:

     Roxanne Brunskill <rbrunski@@datap.ca>,
     Kathy Dyer <dyer@@phoenix.ocf.llnl.gov>,
     Karl Pingle <pingle@@acuson.com>,
     Thomas A Peterson <tap@@src.honeywell.com>,
     Inge Wallin <ingwa@@signum.se>,
     Dirk Koschuetzki <koschuet@@fmi.uni-passau.de>
     and Michael Brown <brown@@wi.extrel.com>.

   The list of contributors here is not comprehensive; for a more
complete list of who has contributed to this manual see the file
`doc/ChangeLog' in the CVS source distribution.
@


1.1.1.6
log
@Latest version from Cyclic; skipped files
@
text
@a3 4
START-INFO-DIR-ENTRY
* CVS: (cvs).          Concurrent Versions System
END-INFO-DIR-ENTRY

d13 4
a16 2
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.
d20 3
a22 2
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
a54 8
`cvs COMMAND: conflict: removed FILE was modified by second party'
     This message indicates that you removed a file, and someone else
     modified it.  To resolve the conflict, first run `cvs add FILE'.
     If desired, look at the other party's modification to decide
     whether you still want to remove it.  If you don't want to remove
     it, stop here.  If you do want to remove it, proceed with `cvs
     remove FILE' and commit your removal.

d355 1
a355 1
File: cvs.info,  Node: BUGS,  Next: Index,  Prev: Credits,  Up: Top
d435 363
@


1.1.1.7
log
@Latest version from Cyclic; skipped files
@
text
@d2 1
a2 1
input file ./cvs.texinfo.
@


1.1.1.8
log
@Latest version from Cyclic; skipped files
@
text
@d2 1
a2 1
input file ../../work/ccvs/doc/cvs.texinfo.
a25 284
File: cvs.info,  Node: Variables,  Next: config,  Prev: history file,  Up: Administrative files

Expansions in administrative files
==================================

   Sometimes in writing an administrative file, you might want the file
to be able to know various things based on environment CVS is running
in.  There are several mechanisms to do that.

   To find the home directory of the user running CVS (from the `HOME'
environment variable), use `~' followed by `/' or the end of the line.
Likewise for the home directory of USER, use `~USER'.  These variables
are expanded on the server machine, and don't get any reasonable
expansion if pserver (*note Password authenticated::.) is in use;
therefore user variables (see below) may be a better choice to
customize behavior based on the user running CVS.

   One may want to know about various pieces of information internal to
CVS.  A CVS internal variable has the syntax `${VARIABLE}', where
VARIABLE starts with a letter and consists of alphanumeric characters
and `_'.  If the character following VARIABLE is a non-alphanumeric
character other than `_', the `{' and `}' can be omitted.  The CVS
internal variables are:

`CVSROOT'
     This is the value of the CVS root in use.  *Note Repository::, for
     a description of the various ways to specify this.

`RCSBIN'
     In CVS 1.9.18 and older, this specified the directory where CVS
     was looking for RCS programs.  Because CVS no longer runs RCS
     programs, specifying this internal variable is now an error.

`CVSEDITOR'
`VISUAL'
`EDITOR'
     These all expand to the same value, which is the editor that CVS
     is using.  *Note Global options::, for how to specify this.

`USER'
     Username of the user running CVS (on the CVS server machine).

   If you want to pass a value to the administrative files which the
user who is running CVS can specify, use a user variable.  To expand a
user variable, the administrative file contains `${=VARIABLE}'.  To set
a user variable, specify the global option `-s' to CVS, with argument
`VARIABLE=VALUE'.  It may be particularly useful to specify this option
via `.cvsrc' (*note ~/.cvsrc::.).

   For example, if you want the administrative file to refer to a test
directory you might create a user variable `TESTDIR'.  Then if CVS is
invoked as

     cvs -s TESTDIR=/work/local/tests

and the administrative file contains `sh ${=TESTDIR}/runtests', then
that string is expanded to `sh /work/local/tests/runtests'.

   All other strings containing `$' are reserved; there is no way to
quote a `$' character so that `$' represents itself.


File: cvs.info,  Node: config,  Prev: Variables,  Up: Administrative files

The CVSROOT/config configuration file
=====================================

   The administrative file `config' contains various miscellaneous
settings which affect the behavior of CVS.  The syntax is slightly
different from the other administrative files.  Variables are not
expanded.  Lines which start with `#' are considered comments.  Other
lines consist of a keyword, `=', and a value.  Note that this syntax is
very strict.  Extraneous spaces or tabs are not permitted.

   Currently defined keywords are:

`RCSBIN=BINDIR'
     For CVS 1.9.12 through 1.9.18, this setting told CVS to look for
     RCS programs in the BINDIR directory.  Current versions of CVS do
     not run RCS programs; for compatibility this setting is accepted,
     but it does nothing.

`SystemAuth=VALUE'
     If VALUE is `yes', then pserver should check for users in the
     system's user database if not found in `CVSROOT/passwd'.  If it is
     `no', then all pserver users must exist in `CVSROOT/passwd'.  The
     default is `yes'.  For more on pserver, see *Note Password
     authenticated::.

`PreservePermissions=VALUE'
     Enable support for saving special device files, symbolic links,
     file permissions and ownerships in the repository.  The default
     value is `no'.  *Note Special Files:: for the full implications of
     using this keyword.

`TopLevelAdmin=VALUE'
     Modify the `checkout' command to create a `CVS' directory at the
     top level of the new working directory, in addition to `CVS'
     directories created within checked-out directories.  The default
     value is `no'.

     This option is useful if you find yourself performing many
     commands at the top level of your working directory, rather than
     in one of the checked out subdirectories.  The `CVS' directory
     created there will mean you don't have to specify `CVSROOT' for
     each command.  It also provides a place for the `CVS/Template'
     file (*note Working directory storage::.).

`LockDir=DIRECTORY'
     Put CVS lock files in DIRECTORY rather than directly in the
     repository.  This is useful if you want to let users read from the
     repository while giving them write access only to DIRECTORY, not
     to the repository.  You need to create DIRECTORY, but CVS will
     create subdirectories of DIRECTORY as it needs them.  For
     information on CVS locks, see *Note Concurrency::.

     Before enabling the LockDir option, make sure that you have
     tracked down and removed any copies of CVS 1.9 or older.  Such
     versions neither support LockDir, nor will give an error
     indicating that they don't support it.  The result, if this is
     allowed to happen, is that some CVS users will put the locks one
     place, and others will put them another place, and therefore the
     repository could become corrupted.  CVS 1.10 does not support
     LockDir but it will print a warning if run on a repository with
     LockDir enabled.


File: cvs.info,  Node: Environment variables,  Next: Compatibility,  Prev: Administrative files,  Up: Top

All environment variables which affect CVS
******************************************

   This is a complete list of all environment variables that affect CVS.

`$CVSIGNORE'
     A whitespace-separated list of file name patterns that CVS should
     ignore. *Note cvsignore::.

`$CVSWRAPPERS'
     A whitespace-separated list of file name patterns that CVS should
     treat as wrappers. *Note Wrappers::.

`$CVSREAD'
     If this is set, `checkout' and `update' will try hard to make the
     files in your working directory read-only.  When this is not set,
     the default behavior is to permit modification of your working
     files.

`$CVSUMASK'
     Controls permissions of files in the repository.  See *Note File
     permissions::.

`$CVSROOT'
     Should contain the full pathname to the root of the CVS source
     repository (where the RCS files are kept).  This information must
     be available to CVS for most commands to execute; if `$CVSROOT' is
     not set, or if you wish to override it for one invocation, you can
     supply it on the command line: `cvs -d cvsroot cvs_command...'
     Once you have checked out a working directory, CVS stores the
     appropriate root (in the file `CVS/Root'), so normally you only
     need to worry about this when initially checking out a working
     directory.

`$EDITOR'
`$CVSEDITOR'
`$VISUAL'
     Specifies the program to use for recording log messages during
     commit.  `$CVSEDITOR' overrides `$EDITOR'.  See *Note Committing
     your changes::.

`$PATH'
     If `$RCSBIN' is not set, and no path is compiled into CVS, it will
     use `$PATH' to try to find all programs it uses.

`$HOME'
`$HOMEPATH'
`$HOMEDRIVE'
     Used to locate the directory where the `.cvsrc' file, and other
     such files, are searched.  On Unix, CVS just checks for HOME.  On
     Windows NT, the system will set HOMEDRIVE, for example to `d:' and
     HOMEPATH, for example to `\joe'.  On Windows 95, you'll probably
     need to set HOMEDRIVE and HOMEPATH yourself.

`$CVS_RSH'
     Specifies the external program which CVS connects with, when
     `:ext:' access method is specified.  *note Connecting via rsh::..

`$CVS_SERVER'
     Used in client-server mode when accessing a remote repository
     using RSH.  It specifies the name of the program to start on the
     server side when accessing a remote repository using RSH.  The
     default value is `cvs'.  *note Connecting via rsh::.

`$CVS_PASSFILE'
     Used in client-server mode when accessing the `cvs login server'.
     Default value is `$HOME/.cvspass'.  *note Password authentication
     client::.

`$CVS_CLIENT_PORT'
     Used in client-server mode when accessing the server via Kerberos.
     *note Kerberos authenticated::.

`$CVS_RCMD_PORT'
     Used in client-server mode.  If set, specifies the port number to
     be used when accessing the RCMD demon on the server side.
     (Currently not used for Unix clients).

`$CVS_CLIENT_LOG'
     Used for debugging only in client-server mode.  If set, everything
     send to the server is logged into ``$CVS_CLIENT_LOG'.in' and
     everything send from the server is logged into
     ``$CVS_CLIENT_LOG'.out'.

`$CVS_SERVER_SLEEP'
     Used only for debugging the server side in client-server mode.  If
     set, delays the start of the server child process the specified
     amount of seconds so that you can attach to it with a debugger.

`$CVS_IGNORE_REMOTE_ROOT'
     For CVS 1.10 and older, setting this variable prevents CVS from
     overwriting the `CVS/Root' file when the `-d' global option is
     specified.  Later versions of CVS do not rewrite `CVS/Root', so
     CVS_IGNORE_REMOTE_ROOT has no effect.

`$COMSPEC'
     Used under OS/2 only.  It specifies the name of the command
     interpreter and defaults to CMD.EXE.

`$TMPDIR'
`$TMP'
`$TEMP'
     Directory in which temporary files are located.  The CVS server
     uses `TMPDIR'.  *Note Global options::, for a description of how
     to specify this.  Some parts of CVS will always use `/tmp' (via
     the `tmpnam' function provided by the system).

     On Windows NT, `TMP' is used (via the `_tempnam' function provided
     by the system).

     The `patch' program which is used by the CVS client uses `TMPDIR',
     and if it is not set, uses `/tmp' (at least with GNU patch 2.1).
     Note that if your server and client are both running CVS 1.9.10 or
     later, CVS will not invoke an external `patch' program.


File: cvs.info,  Node: Compatibility,  Next: Troubleshooting,  Prev: Environment variables,  Up: Top

Compatibility between CVS Versions
**********************************

   The repository format is compatible going back to CVS 1.3.  But see
*Note Watches Compatibility::, if you have copies of CVS 1.6 or older
and you want to use the optional developer communication features.

   The working directory format is compatible going back to CVS 1.5.
It did change between CVS 1.3 and CVS 1.5.  If you run CVS 1.5 or newer
on a working directory checked out with CVS 1.3, CVS will convert it,
but to go back to CVS 1.3 you need to check out a new working directory
with CVS 1.3.

   The remote protocol is interoperable going back to CVS 1.5, but no
further (1.5 was the first official release with the remote protocol,
but some older versions might still be floating around).  In many cases
you need to upgrade both the client and the server to take advantage of
new features and bugfixes, however.


File: cvs.info,  Node: Troubleshooting,  Next: Credits,  Prev: Compatibility,  Up: Top

Troubleshooting
***************

   If you are having trouble with CVS, this appendix may help.  If
there is a particular error message which you are seeing, then you can
look up the message alphabetically.  If not, you can look through the
section on other problems to see if your problem is mentioned there.

* Menu:

* Error messages::              Partial list of CVS errors
* Connection::                  Trouble making a connection to a CVS server
* Other problems::              Problems not readily listed by error message


a216 8
`cvs [login aborted]: unrecognized auth response from SERVER'
     This message typically means that the server is not set up
     properly.  For example, if `inetd.conf' points to a nonexistent
     cvs executable.  To debug it further, find the log file which
     inetd writes (`/var/log/messages' or whatever inetd uses on your
     system).  For details, see *Note Connection::, and *Note Password
     authentication server::.

a247 4

`cvs commit: [TIME] waiting for USER's lock in DIRECTORY'
     This is a normal message, not an error.  See *Note Concurrency::,
     for more details.
@


1.1.1.9
log
@Latest version from Cyclic; skipped files
@
text
@d1 2
a2 1
This is cvs.info, produced by Makeinfo version 3.12f from ./cvs.texinfo.
a25 54
File: cvs.info,  Node: checkoutlist,  Next: history file,  Prev: cvsignore,  Up: Administrative files

The checkoutlist file
=====================

   It may be helpful to use CVS to maintain your own files in the
`CVSROOT' directory.  For example, suppose that you have a script
`logcommit.pl' which you run by including the following line in the
`commitinfo' administrative file:

     ALL   $CVSROOT/CVSROOT/logcommit.pl

   To maintain `logcommit.pl' with CVS you would add the following line
to the `checkoutlist' administrative file:

     logcommit.pl

   The format of `checkoutlist' is one line for each file that you want
to maintain using CVS, giving the name of the file.

   After setting up `checkoutlist' in this fashion, the files listed
there will function just like CVS's built-in administrative files.  For
example, when checking in one of the files you should get a message
such as:

     cvs commit: Rebuilding administrative file database

   and the checked out copy in the `CVSROOT' directory should be
updated.

   Note that listing `passwd' (*note Password authentication server::.)
in `checkoutlist' is not recommended for security reasons.

   For information about keeping a checkout out copy in a more general
context than the one provided by `checkoutlist', see *Note Keeping a
checked out copy::.


File: cvs.info,  Node: history file,  Next: Variables,  Prev: checkoutlist,  Up: Administrative files

The history file
================

   The file `$CVSROOT/CVSROOT/history' is used to log information for
the `history' command (*note history::.).  This file must be created to
turn on logging.  This is done automatically if the `cvs init' command
is used to set up the repository (*note Creating a repository::.).

   The file format of the `history' file is documented only in comments
in the CVS source code, but generally programs should use the `cvs
history' command to access it anyway, in case the format changes with
future releases of CVS.


d39 1
a39 1
expansion if pserver (*note Password authenticated::.)  is in use;
d118 2
a119 2
     value is `no'.  *Note Special Files::, for the full implications
     of using this keyword.
a200 1

a201 1

a361 12
`cvs [server aborted]: Cannot check out files into the repository itself'
     The obvious cause for this message (especially for
     non-client/server CVS) is that the CVS root is, for example,
     `/usr/local/cvsroot' and you try to check out files when you are
     in a subdirectory, such as `/usr/local/cvsroot/test'.  However,
     there is a more subtle cause, which is that the temporary
     directory on the server is set to a subdirectory of the root
     (which is also not allowed).  If this is the problem, set the
     temporary directory to somewhere else, for example `/var/tmp'; see
     `TMPDIR' in *Note Environment variables::, for how to set the
     temporary directory.

d418 1
a418 1
     appearances the message is _not_ referring to whether it can find
a445 13
`cvs [update aborted]: EOF in key in RCS file FILE,v'
`cvs [checkout aborted]: EOF while looking for end of string in RCS file FILE,v'
     This means that there is a syntax error in the given RCS file.
     Note that this might be true even if RCS can read the file OK; CVS
     does more error checking of errors in the RCS file.  That is why
     you may see this message when upgrading from CVS 1.9 to CVS 1.10.
     The likely cause for the original corruption is hardware, the
     operating system, or the like.  Of course, if you find a case in
     which CVS seems to corrupting the file, by all means report it,
     (*note BUGS::.).  There are quite a few variations of this error
     message, depending on exactly where in the RCS file CVS finds the
     syntax error.

a466 12
`cvs [checkout aborted]: no such tag TAG'
     This message means that CVS isn't familiar with the tag TAG.
     Usually this means that you have mistyped a tag name; however
     there are (relatively obscure) cases in which CVS will require you
     to try a few other CVS commands involving that tag, before you
     find one which will cause CVS to update the `val-tags' file; see
     discussion of val-tags in *Note File permissions::.  You only need
     to worry about this once for a given tag; when a tag is listed in
     `val-tags', it stays there.  Note that using `-f' to not require
     tag matches does not override this check; see *Note Common
     options::.

a500 3
`cvs [update aborted]: unexpected EOF reading FILE,v'
     See `EOF in key in RCS file'.

a605 3
     Another good debugging tool is the `-d' (debugging) option to
     inetd.  Consult your system documentation for more information.

a614 6
   * On Windows, if there is a 30 second or so delay when you run a CVS
     command, it may mean that you have your home directory set to
     `C:/', for example (see `HOMEDRIVE' and `HOMEPATH' in *Note
     Environment variables::).  CVS expects the home directory to not
     end in a slash, for example `C:' or `C:\cvs'.

d729 1
a729 1
     sending a bug report to other mailing lists or newsgroups is _not_
@


1.1.1.10
log
@Latest from Cyclic Software
@
text
@d1 1
a1 1
This is cvs.info, produced by makeinfo version 4.0 from ./cvs.texinfo.
a24 72
File: cvs.info,  Node: cvsignore,  Next: checkoutlist,  Prev: rcsinfo,  Up: Administrative files

Ignoring files via cvsignore
============================

   There are certain file names that frequently occur inside your
working copy, but that you don't want to put under CVS control.
Examples are all the object files that you get while you compile your
sources.  Normally, when you run `cvs update', it prints a line for
each file it encounters that it doesn't know about (*note update
output::).

   CVS has a list of files (or sh(1) file name patterns) that it should
ignore while running `update', `import' and `release'.  This list is
constructed in the following way.

   * The list is initialized to include certain file name patterns:
     names associated with CVS administration, or with other common
     source control systems; common names for patch files, object files,
     archive files, and editor backup files; and other names that are
     usually artifacts of assorted utilities.  Currently, the default
     list of ignored file name patterns is:

              RCS     SCCS    CVS     CVS.adm
              RCSLOG  cvslog.*
              tags    TAGS
              .make.state     .nse_depinfo
              *~      #*      .#*     ,*      _$*     *$
              *.old   *.bak   *.BAK   *.orig  *.rej   .del-*
              *.a     *.olb   *.o     *.obj   *.so    *.exe
              *.Z     *.elc   *.ln
              core

   * The per-repository list in `$CVSROOT/CVSROOT/cvsignore' is
     appended to the list, if that file exists.

   * The per-user list in `.cvsignore' in your home directory is
     appended to the list, if it exists.

   * Any entries in the environment variable `$CVSIGNORE' is appended
     to the list.

   * Any `-I' options given to CVS is appended.

   * As CVS traverses through your directories, the contents of any
     `.cvsignore' will be appended to the list.  The patterns found in
     `.cvsignore' are only valid for the directory that contains them,
     not for any sub-directories.

   In any of the 5 places listed above, a single exclamation mark (`!')
clears the ignore list.  This can be used if you want to store any file
which normally is ignored by CVS.

   Specifying `-I !' to `cvs import' will import everything, which is
generally what you want to do if you are importing files from a
pristine distribution or any other source which is known to not contain
any extraneous files.  However, looking at the rules above you will see
there is a fly in the ointment; if the distribution contains any
`.cvsignore' files, then the patterns from those files will be
processed even if `-I !' is specified.  The only workaround is to
remove the `.cvsignore' files in order to do the import.  Because this
is awkward, in the future `-I !' might be modified to override
`.cvsignore' files in each directory.

   Note that the syntax of the ignore files consists of a series of
lines, each of which contains a space separated list of filenames.
This offers no clean way to specify filenames which contain spaces, but
you can use a workaround like `foo?bar' to match a file named `foo bar'
(it also matches `fooxbar' and the like).  Also note that there is
currently no way to specify comments.


d55 1
a55 1
   Note that listing `passwd' (*note Password authentication server::)
d69 1
a69 1
the `history' command (*note history::).  This file must be created to
d71 1
a71 1
is used to set up the repository (*note Creating a repository::).
d92 1
a92 1
expansion if pserver (*note Password authenticated::) is in use;
a119 3
     When using pserver, this is the user specified in the repository
     specification which need not be the same as the username the
     server is running as (*note Password authentication server::).
d126 1
a126 1
via `.cvsrc' (*note ~/.cvsrc::).
d168 6
d185 1
a185 1
     file (*note Working directory storage::).
a204 6
`LogHistory=VALUE'
     Control what is logged to the `CVSROOT/history' file.  Default of
     `TOFEWGCMAR' (or simply `all') will log all transactions.  Any
     subset of the default is legal.  (For example, to only log
     transactions that modify the `*,v' files, use `LogHistory=TMAR'.)

d259 4
a262 4
     such files, are searched.  On Unix, CVS just checks for `HOME'.
     On Windows NT, the system will set `HOMEDRIVE', for example to
     `d:' and `HOMEPATH', for example to `\joe'.  On Windows 95, you'll
     probably need to set `HOMEDRIVE' and `HOMEPATH' yourself.
d266 1
a266 1
     `:ext:' access method is specified.  *note Connecting via rsh::.
d272 1
a272 1
     default value is `cvs'.  *note Connecting via rsh::
d277 1
a277 1
     client::
d281 1
a281 1
     *note Kerberos authenticated::
d290 2
a291 2
     sent to the server is logged into ``$CVS_CLIENT_LOG'.in' and
     everything sent from the server is logged into
d303 1
a303 1
     `CVS_IGNORE_REMOTE_ROOT' has no effect.
d387 2
a388 3
     correct and that the `CVSROOT' specified is allowed by
     `--allow-root' in `inetd.conf'.  See *Note Password
     authenticated::.
d431 1
a431 1
     as with other CVS bugs (*note BUGS::).  Usually there is a
d469 1
a469 1
     BUGS::).
d473 2
a474 2
     uses to locate your home directory.  See the discussion of `HOME',
     `HOMEDRIVE', and `HOMEPATH' in *Note Environment variables::.
d522 1
a522 1
     (*note BUGS::).  There are quite a few variations of this error
d565 1
a565 1
     BUGS::).
d570 2
a571 3
     your operating system), as well as an old version of CVS.  CVS
     1.9.18 and earlier only work with RCS version 5 and later; current
     versions of CVS do not run RCS programs.
a603 4
`cvs server: cannot open /root/.cvsignore: Permission denied'
`cvs [server aborted]: can't chdir(/root): Permission denied'
     See *Note Connection::.

d610 4
a613 4
     report `M FILE' and you are ready to `cvs commit'.  If it detects
     conflicts it will print a message saying so, will report `C FILE',
     and you need to manually resolve the conflict.  For more details
     on this process see *Note Conflicts example::.
d643 1
a643 1
     not a problem editing the file.  If so, point the `CVSEDITOR'
d685 1
a685 1
     Change the invocation in `inetd.conf' to run the echo program
a703 20
     If you seem to be connecting but get errors like:

          cvs server: cannot open /root/.cvsignore: Permission denied
          cvs [server aborted]: can't chdir(/root): Permission denied

     then either you haven't specified `-f' in `inetd.conf' or your
     system is setting the `HOME' environment variable for programs
     being run by inetd.  In the latter case, you can either have inetd
     run a shell script that unsets `HOME' and then runs CVS, or you
     can use `env' to run CVS with a pristine environment.

     If you can connect successfully for a while but then can't, you've
     probably hit inetd's rate limit.  (If inetd receives too many
     requests for the same service in a short period of time, it
     assumes that something is wrong and temporarily disables the
     service.)  Check your inetd documentation to find out how to
     adjust the rate limit (some versions of inetd have a single rate
     limit, others allow you to set the limit for each service
     separately.)

d788 5
d809 1
a809 1
          http://www.cvshome.org
@


1.1.1.11
log
@Latest from Cyclic Software
@
text
@d1 1
a1 1
This is cvs.info, produced by makeinfo version 4.0 from cvs.texinfo.
a214 9
   Environment variables passed to administrative files are:

`CVS_USER'
     The CVS-specific username provided by the user, if it can be
     provided (currently just for the pserver access method), and to
     the empty string otherwise.  (CVS_USER and USER may differ when
     `$CVSROOT/CVSROOT/passwd' is used to map cvs usernames to system
     usernames.)

d355 2
a356 3
     Used in client-server mode when accessing the server via Kerberos,
     GSSAPI, or CVS's password authentication if the port is not
     specified in $CVSROOT.  *note Remote repositories::
a758 12
     Errors along the lines of "connection refused" typically indicate
     that inetd isn't even listening for connections on port 2401
     whereas errors like "connection reset by peer" or "recv() from
     server: EOF" typically indicate that inetd is listening for
     connections but is unable to start CVS (this is frequently caused
     by having an incorrect path in `inetd.conf').  "unrecognized auth
     response" errors are caused by a bad command line in `inetd.conf',
     typically an invalid option or forgetting to put the `pserver'
     command at the end of the line.  Another less common problem is
     invisible control characters that your editor "helpfully" added
     without you noticing.

d765 1
a765 22
     If instead you get:

          Usage: cvs [cvs-options] command [command-options-and-arguments]
          ...

     then you're missing the `pserver' command at the end of the line
     in `inetd.conf'; check to make sure that the entire command is on
     one line and that it's complete.

     Likewise, if you get something like:

          Unknown command: `pserved'
          
          CVS commands are:
                  add          Add a new file/directory to the repository
          ...

     then you've misspelled `pserver' in some way.  If it isn't
     obvious, check for invisible control characters (particularly
     carriage returns) in `inetd.conf'.

     If it fails to work at all, then make sure inetd is working right.
d790 5
a794 1
     then you probably haven't specified `-f' in `inetd.conf'.
d878 2
a879 2
     there are companies which will do that for a fee.  One such
     company is:
@


