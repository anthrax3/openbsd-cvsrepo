head	1.32;
access;
symbols
	OPENBSD_6_2:1.32.0.8
	OPENBSD_6_2_BASE:1.32
	OPENBSD_6_1:1.32.0.6
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.32.0.2
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.30.0.6
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.29.0.6
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.4
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.28.0.12
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.28.0.10
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.8
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.6
	OPENBSD_5_0:1.28.0.4
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.2
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.27.0.30
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.26
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.28
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.24
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.22
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.20
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.18
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.16
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.14
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.27.0.12
	OPENBSD_3_9_BASE:1.27
	OPENBSD_3_8:1.27.0.10
	OPENBSD_3_8_BASE:1.27
	OPENBSD_3_7:1.27.0.8
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.27.0.6
	OPENBSD_3_6_BASE:1.27
	OPENBSD_3_5:1.27.0.4
	OPENBSD_3_5_BASE:1.27
	OPENBSD_3_4:1.27.0.2
	OPENBSD_3_4_BASE:1.27
	OPENBSD_3_3:1.25.0.4
	OPENBSD_3_3_BASE:1.25
	OPENBSD_3_2:1.25.0.2
	OPENBSD_3_2_BASE:1.25
	OPENBSD_3_1:1.24.0.4
	OPENBSD_3_1_BASE:1.24
	OPENBSD_3_0:1.24.0.2
	OPENBSD_3_0_BASE:1.24
	cvs-1-11-1p1:1.1.1.17
	OPENBSD_2_9:1.18.0.2
	OPENBSD_2_9_BASE:1.18
	cvs-1-11:1.1.1.16
	OPENBSD_2_8:1.17.0.6
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.17.0.4
	OPENBSD_2_7_BASE:1.17
	OPENBSD_2_6:1.17.0.2
	OPENBSD_2_6_BASE:1.17
	cvs-1-10-7:1.1.1.15
	OPENBSD_2_5:1.16.0.2
	OPENBSD_2_5_BASE:1.16
	cvs-1-10-5:1.1.1.14
	OPENBSD_2_4:1.15.0.2
	OPENBSD_2_4_BASE:1.15
	cvs-1-10:1.1.1.13
	cvs-1-9-28:1.1.1.12
	OPENBSD_2_3:1.12.0.2
	OPENBSD_2_3_BASE:1.12
	cvs-1-9-26:1.1.1.11
	cvs-1-9-24:1.1.1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	cvs-1-9-10:1.1.1.9
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	cvs-1-9-8:1.1.1.8
	cvs-1-9-6:1.1.1.8
	cvs-1-9-4:1.1.1.7
	cvs-1-9-2:1.1.1.6
	cvs-1-9:1.1.1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	cvs-1-8-1:1.1.1.4
	cvs-1-8:1.1.1.4
	cvs-1-7-2:1.1.1.3
	cvs-1-7-1:1.1.1.2
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@# @;


1.32
date	2016.03.07.17.12.33;	author tb;	state Exp;
branches;
next	1.31;
commitid	RvotyuoBNVy9kXJz;

1.31
date	2015.11.20.12.16.42;	author jca;	state Exp;
branches;
next	1.30;
commitid	LnFVm7DjQjmLann3;

1.30
date	2015.02.05.12.56.22;	author millert;	state Exp;
branches;
next	1.29;
commitid	1roxmeXK6uPJhA12;

1.29
date	2013.12.03.01.32.49;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2010.10.15.10.18.42;	author jsg;	state Exp;
branches;
next	1.27;

1.27
date	2003.07.20.20.26.33;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2003.05.16.20.15.16;	author hin;	state Exp;
branches;
next	1.25;

1.25
date	2002.05.15.08.59.50;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2001.09.29.00.00.39;	author tholo;	state Exp;
branches;
next	1.23;

1.23
date	2001.09.28.23.26.33;	author tholo;	state Exp;
branches;
next	1.22;

1.22
date	2001.07.19.11.03.23;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2001.07.19.10.43.17;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2001.07.01.22.26.55;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2001.05.25.23.13.46;	author ho;	state Exp;
branches;
next	1.18;

1.18
date	2001.02.10.19.31.28;	author tholo;	state Exp;
branches;
next	1.17;

1.17
date	99.09.10.05.21.30;	author tholo;	state Exp;
branches;
next	1.16;

1.16
date	99.02.28.21.57.22;	author tholo;	state Exp;
branches;
next	1.15;

1.15
date	98.08.22.21.04.18;	author tholo;	state Exp;
branches;
next	1.14;

1.14
date	98.08.12.22.57.19;	author tholo;	state Exp;
branches;
next	1.13;

1.13
date	98.07.13.04.16.54;	author tholo;	state Exp;
branches;
next	1.12;

1.12
date	98.03.12.07.22.19;	author tholo;	state Exp;
branches;
next	1.11;

1.11
date	98.02.22.08.55.38;	author tholo;	state Exp;
branches;
next	1.10;

1.10
date	97.06.28.03.45.21;	author tholo;	state Exp;
branches;
next	1.9;

1.9
date	97.05.12.22.36.52;	author tholo;	state Exp;
branches;
next	1.8;

1.8
date	97.03.29.04.49.44;	author tholo;	state Exp;
branches;
next	1.7;

1.7
date	97.03.18.02.09.42;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	97.02.21.06.54.42;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	96.10.18.04.18.52;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.05.06.22.50.13;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.04.27.20.26.04;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.02.01.23.57.14;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.19.09.21.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.27;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.01.30.00.17.12;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.04.27.19.40.57;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.05.06.22.18.23;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	96.10.18.03.34.41;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.02.21.06.36.15;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	97.03.18.01.55.07;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	97.03.29.04.37.23;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	97.06.28.03.27.58;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	98.02.22.08.20.08;	author tholo;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	98.03.12.06.57.28;	author tholo;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	98.07.13.03.52.32;	author tholo;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	98.08.22.20.50.36;	author tholo;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	99.02.28.21.30.49;	author tholo;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	99.09.10.05.06.05;	author tholo;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2001.02.10.18.57.21;	author tholo;	state Exp;
branches;
next	1.1.1.17;

1.1.1.17
date	2001.09.28.22.45.35;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.32
log
@There is a mknod(2) call hidden deep in the guts of cvs(1) that
could in principle be called at any point during runtime.

Instead of adding "dpath" to the relevant pledges, disable the
code path itself. Now instead of hitting a brutal abort(3), you
will just get an error message.

autoconf handholding + ok jca@@
@
text
@dnl configure.in for cvs
AC_INIT(src/cvs.h)
AM_INIT_AUTOMAKE(cvs, 1.11.1p1)
AC_PREREQ(2.13)
AC_PREFIX_PROGRAM(cvs)
AM_CONFIG_HEADER(config.h src/options.h)

AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
# Automake's more advanced version of AC_PROG_RANLIB
AC_PROG_RANLIB
AC_PROG_YACC
AC_PROG_LN_S

AC_PATH_PROG(PERL, perl, no)
AC_PATH_PROG(CSH, csh, no)
AC_PATH_PROG(PR, pr, no)
# For diff/util.c
if test x"$PR" != xno; then
	AC_DEFINE_UNQUOTED([PR_PROGRAM], ["$PR"], [Path to the pr utility])
fi

dnl FIXME This is truly gross.
missing_dir=`cd $ac_aux_dir && pwd`
dnl FIXME I pulled this default list from sanity.sh.  Perhaps these lists
dnl can be stored in one location?
glocs="$PATH:/usr/local/bin:/usr/contrib/bin:/usr/gnu/bin:/local/bin:/local/gnu/bin:/gnu/bin"
AC_PATH_PROGS(ROFF, groff roff, $missing_dir/missing roff, $glocs)
AC_PATH_PROG(PS2PDF, ps2pdf, $missing_dir/missing ps2pdf)
AC_PATH_PROG(TEXI2DVI, texi2dvi, $missing_dir/missing texi2dvi)

AC_SYS_INTERPRETER
if test X"$ac_cv_sys_interpreter" != X"yes" ; then
  # silly trick to avoid problems in AC macros...
  ac_msg='perl scripts using #! may not be invoked properly'
  AC_MSG_WARN($ac_msg)
fi

# BSD's logo is a devil for a reason, hey?
AC_CACHE_CHECK(for BSD VPATH bug in make, ccvs_cv_bsd_make_vpath_bug,
[if test ! -d ac_test_dir ; then
	AC_TRY_COMMAND([mkdir ac_test_dir])
fi
cat >conftestmake <<EOF
VPATH = ac_test_dir
ac_test_target: ac_test_dep
	echo BSD VPATH bug present >&2
ac_test_dep: ac_test_dep_dep
EOF
touch ac_test_dir/ac_test_dep_dep
touch ac_test_dir/ac_test_dep
touch ac_test_target
# Don't know why, but the following test doesn't work under FreeBSD 4.2
# without this sleep command
sleep 1
if AC_TRY_COMMAND([make -f conftestmake 2>&1 >/dev/null |grep ^BSD\ VPATH\ bug\ present\$ >/dev/null]) ; then
	ccvs_cv_bsd_make_vpath_bug=yes
else
	ccvs_cv_bsd_make_vpath_bug=no
fi
AC_TRY_COMMAND([rm -rf ac_test_dir ac_test_target conftestmake])])
# We also don't need to worry about the bug when $srcdir = $builddir
AM_CONDITIONAL(MAKE_TARGETS_IN_VPATH, \
		test $ccvs_cv_bsd_make_vpath_bug = no \
		|| test $srcdir = .)

AC_AIX
AC_MINIX
AC_ISC_POSIX
if test "$ISC" = yes; then
CFLAGS="$CFLAGS -D_SYSV3"
LIBS="-lcrypt $LIBS"
fi

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(errno.h unistd.h string.h memory.h utime.h fcntl.h ndbm.h \
		 limits.h stdint.h sys/file.h \
                 sys/param.h sys/select.h sys/time.h \
                 io.h direct.h sys/bsdtypes.h sys/resource.h syslog.h)
AC_HEADER_STAT
AC_HEADER_TIME

AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

AC_STRUCT_ST_BLKSIZE
AC_STRUCT_ST_RDEV
AC_REPLACE_FUNCS(mkdir rename strstr dup2 strerror valloc waitpid memmove strtoul)
AC_CHECK_FUNCS(\
	fchdir \
	fchmod \
	fsync \
	ftime \
	ftruncate \
	getgroups \
	getpagesize \
	getpassphrase \
	gettimeofday \
	initgroups \
	mkstemp \
	mktemp \
	putenv \
	readlink \
	sigaction \
	sigblock \
	sigprocmask \
	sigsetmask \
	sigvec \
	tempnam \
	timezone \
	tzset \
	vprintf \
	wait3 \
)
# we only need one of the following
AC_CHECK_FUNCS([\
	nanosleep \
	usleep \
	select \
], [break])

dnl
dnl The CVS coding standard (as specified in HACKING) is that if it exists
dnl in SunOS4 and ANSI, we use it.  CVS itself, of course, therefore doesn't
dnl need HAVE_* defines for such functions, but diff wants them.
dnl
AC_DEFINE(HAVE_STRCHR)
AC_DEFINE(HAVE_MEMCHR)

dnl
dnl Force lib/regex.c to use malloc instead of messing around with alloca
dnl and define the old re_comp routines that we use.
dnl
AC_DEFINE(REGEX_MALLOC)
AC_DEFINE(_REGEX_RE_COMP)
dnl
dnl AC_FUNC_VFORK is rather baroque.  It seems to be rather more picky
dnl than, say, the Single Unix Specification (version 2), which simplifies
dnl a lot of cases by saying that the child process can't set any variables
dnl (thus avoiding problems with register allocation) or call any functions
dnl (thus avoiding problems with whether file descriptors are shared).
dnl It would be nice if we could just write to the Single Unix Specification.
dnl I think the only way to do redirection this way is by doing it in the
dnl parent, and then undoing it afterwards (analogous to windows-NT/run.c).
dnl That would appear to have a race condition if the user hits ^C (or
dnl some other signal) at the wrong time, as main_cleanup will try to use
dnl stdout/stderr.  So maybe we are stuck with AC_FUNC_VFORK.
dnl
AC_FUNC_VFORK
AC_FUNC_CLOSEDIR_VOID

dnl
dnl Check for shadow password support.
dnl
dnl We used to try to determine whether shadow passwords were actually in
dnl use or not, but the code has been changed to work right reguardless,
dnl so we can go back to a simple check.
AC_SEARCH_LIBS(getspnam, sec gen, AC_DEFINE(HAVE_GETSPNAM))

dnl
dnl Check for a system libz.
dnl
AC_CHECK_LIB(z, zlibVersion, ZLIB=-lz ZLIB_DEPEND=/usr/lib/libz.a, ZLIBSUBDIRS=zlib ZLIB=$srcdir/zlib/libz.a ZLIB_DEPEND=$srcdir/zlib/libz.a ZLIB_INCLUDES=-I$srcdir/zlib)
AC_SUBST(ZLIB)
AC_SUBST(ZLIBSUBDIRS)
AC_SUBST(ZLIB_INCLUDES)
AC_SUBST(ZLIB_DEPEND)

dnl We always use CVS's regular expression matcher.
dnl This is because:
dnl (1) If memory serves, the syntax of the regular expressions
dnl handled by re_exec is not consistent from system to system, which
dnl is a Bad Thing because CVS passes this syntax out to the user.
dnl We might have better luck with the POSIX interface, if we really
dnl want to look for a system-supplied matcher.
dnl (2) It is necessary to make _sure_ that we get a regex.h and regex.c
dnl that match each other.  In particular, rx and the CVS/emacs
dnl regex.c have a different "struct re_pattern_buffer" and so using
dnl the system regex.h and our regex.c, or vice versa, will tend to
dnl cause a core dump.
dnl (3) Just as a random data point, CVS uses re_exec (a BSD interface);
dnl libdiff uses re_compile_pattern (a GNU interface, I think).  Diff
dnl should probably be fixed to have the caller (CVS) supply the regexp
dnl matching.
dnl
dnl AC_CHECK_FUNC(re_exec, :, LIBOBJS="$LIBOBJS regex.o")
AC_FUNC_UTIME_NULL
AC_SYS_LONG_FILE_NAMES

AC_FUNC_FNMATCH
if test "$ac_cv_func_fnmatch_works" = no; then
  LIBOBJS="$LIBOBJS fnmatch.o"
fi

# Try to find connect and gethostbyname.
AC_CHECK_LIB(nsl, main,
  AC_SEARCH_LIBS(connect, xnet socket inet, AC_DEFINE(HAVE_CONNECT),, -lnsl),
  AC_SEARCH_LIBS(connect, xnet socket inet, AC_DEFINE(HAVE_CONNECT)))
AC_SEARCH_LIBS(gethostbyname, netinet nsl)

dnl
dnl set $(KRB4) from --with-krb4=value -- WITH_KRB4
dnl
dnl If you change this, keep in mind that some systems have a bogus
dnl libkrb in the system libraries, so --with-krb4=value needs to
dnl override the system -lkrb.
dnl
KRB4=/usr/kerberos
define(WITH_KRB4,[
AC_ARG_WITH([krb4],
  [  --with-krb4=value       set default \$(KRB4) from value],
  [KRB4=$withval],
)dnl
echo "default place for krb4 is $KRB4"
AC_SUBST(KRB4)])dnl
WITH_KRB4

krb_h=
AC_MSG_CHECKING([for krb.h])
if test "$cross_compiling" != yes && test -r $KRB4/include/krb.h; then
   hold_cflags=$CFLAGS
   CFLAGS="$CFLAGS -I$KRB4/include"
   AC_TRY_LINK([#include <krb.h>],[int i;],
          [krb_h=yes krb_incdir=$KRB4/include],
          [CFLAGS=$hold_cflags
           AC_TRY_LINK([#include <krb.h>],[int i;],
             [krb_h=yes krb_incdir=])])
   CFLAGS=$hold_cflags
else
   AC_TRY_LINK([#include <krb.h>],[int i;],
             [krb_h=yes krb_incdir=])
fi
if test -z "$krb_h"; then
  AC_TRY_LINK([#include <krb.h>],[int i;],
    [krb_h=yes krb_incdir=],
    [if test "$cross_compiling" != yes && test -r $KRB4/include/kerberosIV/krb.h; then
       hold_cflags=$CFLAGS
       CFLAGS="$CFLAGS -I$KRB4/include/kerberosIV"
       AC_TRY_LINK([#include <krb.h>],[int i;],
	 [krb_h=yes krb_incdir=$KRB4/include/kerberosIV])
       CFLAGS=$hold_cflags
     fi])
fi
AC_MSG_RESULT($krb_h)

includeopt=
AC_SUBST(includeopt)
if test -n "$krb_h"; then
  krb_lib=
  if test "$cross_compiling" != yes && test -r $KRB4/lib/libkrb.a; then
       hold_ldflags=$LDFLAGS
       LDFLAGS="-L${KRB4}/lib $LDFLAGS"
       AC_CHECK_LIB(krb,printf,[krb_lib=yes krb_libdir=${KRB4}/lib],
           [LDFLAGS=$hold_ldflags
            # Using open here instead of printf so we don't
            # get confused by the cached value for printf from above.
            AC_CHECK_LIB(krb,open,[krb_lib=yes krb_libdir=])])
       LDFLAGS=$hold_ldflags
  else
       AC_CHECK_LIB(krb,printf,[krb_lib=yes krb_libdir=])
  fi
fi

dnl
dnl Use --with-gssapi=DIR to enable GSSAPI support.
dnl
GSSAPI=/usr/cygnus/kerbnet
define(WITH_GSSAPI,[
AC_ARG_WITH([gssapi],
  [  --with-gssapi=value     GSSAPI directory],
  [GSSAPI=$withval],
)dnl
echo "default place for GSSAPI is $GSSAPI"
AC_SUBST(GSSAPI)])dnl
WITH_GSSAPI

hold_cppflags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS -I$GSSAPI/include/kerberosV "
AC_CHECK_HEADERS(krb5.h gssapi.h gssapi/gssapi.h gssapi/gssapi_generic.h)
CPPFLAGS=$hold_cppflags

if test "$ac_cv_header_krb5_h" = "yes" && 
   (test "$ac_cv_header_gssapi_h" = "yes" ||
    test "$ac_cv_header_gssapi_gssapi_h" = "yes"); then
  AC_DEFINE(HAVE_GSSAPI)
  includeopt="${includeopt} -I$GSSAPI/include/kerberosV"
  # FIXME: This is ugly, but these things don't seem to be standardized.
  if test "$ac_cv_header_gssapi_h" = "yes"; then
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb5 -lcrypto"
  else
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb5 -lcrypto -lcom_err"
  fi
  save_CPPFLAGS=$CPPFLAGS
  CPPFLAGS="-I$GSSAPI/include/kerberosV $CPPFLAGS"
  if test "$ac_cv_header_gssapi_h" = "yes"; then
    AC_EGREP_HEADER(GSS_C_NT_HOSTBASED_SERVICE, gssapi.h, AC_DEFINE(HAVE_GSS_C_NT_HOSTBASED_SERVICE))
  else
    AC_EGREP_HEADER(GSS_C_NT_HOSTBASED_SERVICE, gssapi/gssapi.h, AC_DEFINE(HAVE_GSS_C_NT_HOSTBASED_SERVICE))
  fi
  CPPFLAGS=$save_CPPFLAGS
  # This is necessary on Irix 5.3, in order to link against libkrb5 --
  # there, an_to_ln.o refers to things defined only in -lgen.
  AC_CHECK_LIB(gen, compile)
fi

if test -n "$krb_h"; then
  if test -n "$krb_lib"; then
    AC_DEFINE(HAVE_KERBEROS)
    test -n "${krb_libdir}" && LIBS="${LIBS} -L${krb_libdir}"
    LIBS="${LIBS} -lkrb"
    # Put -L${krb_libdir} in LDFLAGS temporarily so that it appears before
    # -ldes in the command line.  Don't do it permanently so that we honor
    # the user's setting for LDFLAGS
    hold_ldflags=$LDFLAGS
    test -n "${krb_libdir}" && LDFLAGS="$LDFLAGS -L${krb_libdir}"
    AC_CHECK_LIB(des,printf,[LIBS="${LIBS} -ldes"])
    LDFLAGS=$hold_ldflags
    if test -n "$krb_incdir"; then
      includeopt="${includeopt} -I$krb_incdir"
    fi
  fi
fi
AC_CHECK_FUNCS(krb_get_err_text)

dnl
dnl Use --with-encryption to turn on encryption support
dnl
AC_ARG_ENABLE(encryption,
  [  --enable-encryption     enable encryption support],
  [case "${enableval}" in
    yes) encryption=true ;;
    no) encryption=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for encryption option) ;;
   esac],
  [encryption=false])
if test "$encryption" = "true"; then
  AC_DEFINE(ENCRYPTION)
fi

AC_CHECK_FUNC(gethostname, :, LIBOBJS="$LIBOBJS hostname.o")

# Check for options requesting client and server feature. If none are
# given and we have connect(), we want the full client & server arrangement.
AC_ARG_ENABLE(client,
[  --enable-client         include code for running as a remote client (default)
  --disable-client        don't include remote client code],
[if test "$enable_client" = yes; then
  AC_DEFINE(CLIENT_SUPPORT)
fi],
[if test "$ac_cv_search_connect" != no; then
  AC_DEFINE(CLIENT_SUPPORT)
fi])
AC_ARG_ENABLE(server,
[  --enable-server         include code for running as a server (default)
  --disable-server        don't include server code],
[if test "$enable_server" = yes; then
  AC_DEFINE(SERVER_SUPPORT)
fi],
[if test "$ac_cv_search_connect" != no; then
  AC_DEFINE(SERVER_SUPPORT)
  enable_server=yes
fi])

dnl For the moment we will assume that all systems which have
dnl the unixyness to run configure are unixy enough to do the
dnl PreservePermissions stuff.  I have this sinking feeling that
dnl things won't be that simple, before long.
dnl AC_DEFINE(PRESERVE_PERMISSIONS_SUPPORT)

dnl On cygwin32, we configure like a Unix system, but we use the
dnl Windows support code in lib/fncase.c to handle the case
dnl insensitive file system.  We also need some support libraries.  We
dnl do this at the end so that the new libraries are added at the end
dnl of LIBS.
AC_CACHE_CHECK(for cygwin32, ccvs_cv_sys_cygwin32,
[AC_TRY_COMPILE([], [return __CYGWIN32__;],
ccvs_cv_sys_cygwin32=yes, ccvs_cv_sys_cygwin32=no)])
if test $ccvs_cv_sys_cygwin32 = yes; then
  LIBOBJS="$LIBOBJS fncase.o"
  LIBS="$LIBS -ladvapi32"

  dnl On Windows you can only change file times if you can write to
  dnl the file.  cygwin32 should really handle this for us, but as of
  dnl January 1998 it doesn't.
  AC_DEFINE(UTIME_EXPECTS_WRITABLE)

  dnl On Windows we must use setmode to change between binary and text
  dnl mode.
  AC_DEFINE(USE_SETMODE_STDOUT)
  AC_DEFINE(HAVE_SETMODE)
fi

test -f src/options.h && (
  AC_MSG_WARN(saving ./src/options.h in ./src/options.h-SAVED)
  AC_MSG_WARN(You may wish to check that local options have not been lost.)
  AC_MSG_WARN(Do not re-run ./configure or ./config.status until you have....)
  cp ./src/options.h ./src/options.h-SAVED
)

AC_OUTPUT([Makefile \
	  contrib/Makefile \
	  contrib/clmerge \
	  contrib/cln_hist \
	  contrib/commit_prep \
	  contrib/cvs_acls \
	  contrib/log \
	  contrib/log_accum \
	  contrib/mfpipe \
	  contrib/rcslock \
	  contrib/sccs2rcs \
	  diff/Makefile \
	  doc/Makefile \
	  emx/Makefile \
	  lib/Makefile \
	  man/Makefile \
	  os2/Makefile \
	  src/Makefile \
	  src/cvsbug \
	  tools/Makefile \
	  vms/Makefile \
	  windows-NT/Makefile \
	  windows-NT/SCC/Makefile \
	  zlib/Makefile],
	  [chmod -f +x \
	  contrib/clmerge \
	  contrib/cln_hist \
	  contrib/commit_prep \
	  contrib/cvs_acls \
	  contrib/log \
	  contrib/log_accum \
	  contrib/mfpipe \
	  contrib/rcslock \
	  contrib/sccs2rcs \
	  src/cvsbug])
@


1.31
log
@Server-side pserver support is broken, and we don't plan to support it.

ok sthen@@ semarie@@
@
text
@a107 1
	mknod \
@


1.30
log
@Add missing check for stdint.h, needed for SIZE_MAX in xsize.h.
OK deraadt@@
@
text
@a372 26
### The auth server needs to be able to check passwords against passwd
### file entries, so we only #define AUTH_SERVER_SUPPORT if we can
### find the crypt function. 
###
### We used to test for crypt in libc first, and only add -lcrypt if
### we couldn't find it, but that interacts badly with the cache
### variables, the 'unset' command isn't portable, and I'm not sure
### there's any harm in just testing for -lcrypt first.
###
### XXX OpenBSD has crypt in libc, but don't carry libcrypt.  However
### XXX it used to have libcrypt which means old systems that hasn't
### XXX explicitly removed libcrypt will establish dependencies on the
### XXX obsolete library.

if test "$enable_server" = yes; then
AC_CHECK_FUNCS(crypt)
if test "$ac_cv_func_crypt" = no; then
AC_CHECK_LIB(crypt, crypt)
AC_CHECK_FUNCS(crypt)
fi

if test "$ac_cv_func_crypt" = yes; then
  AC_DEFINE(AUTH_SERVER_SUPPORT)
fi
fi # enable_server

@


1.29
log
@Kill usage of timeb.h for upcoming removal of libcompat.  OK deraadt@@
@
text
@d81 1
a81 1
		 limits.h sys/file.h \
@


1.28
log
@Switch the remaining users of libdes in src to libcrypto,
telnet portion partially from the latest heimdal.

ok mikeb@@
@
text
@d82 1
a82 1
                 sys/param.h sys/select.h sys/time.h sys/timeb.h \
@


1.27
log
@No need to link with -lasn1 or -lcom_err anymore.
@
text
@d298 1
a298 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb5 -lcrypto -ldes"
d300 1
a300 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb5 -lcrypto -ldes -lcom_err"
@


1.26
log
@Don't link with -lkrb -lkafs.

ok jakob@@
@
text
@d298 1
a298 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb5 -lasn1 -lcrypto -ldes -lcom_err"
@


1.25
log
@use -ldes
@
text
@d298 1
a298 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb -lkrb5 -lasn1 -lcrypto -ldes -lcom_err -lkafs"
d300 1
a300 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb -lkrb5 -lcrypto -ldes -lcom_err -lkafs"
@


1.24
log
@Merge remaining local changes, correct build issues
@
text
@d298 1
a298 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb -lkrb5 -lasn1 -lcrypto -lcom_err -lkafs"
d300 1
a300 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb -lkrb5 -lcrypto -lcom_err -lkafs"
@


1.23
log
@Merge local changes; work in progress
@
text
@d172 1
a172 1
AC_CHECK_LIB(z, zlibVersion, ZLIB=-lz , ZLIBSUBDIRS=zlib ZLIB=$srcdir/zlib/libz.a ZLIB_INCLUDES=-I$srcdir/zlib)
d176 1
a270 15
  if test -n "$krb_lib"; then
    AC_DEFINE(HAVE_KERBEROS)
    test -n "${krb_libdir}" && LIBS="${LIBS} -L${krb_libdir}"
    LIBS="${LIBS} -lkrb"
    # Put -L${krb_libdir} in LDFLAGS temporarily so that it appears before
    # -ldes in the command line.  Don't do it permanently so that we honor
    # the user's setting for LDFLAGS
    hold_ldflags=$LDFLAGS
    test -n "${krb_libdir}" && LDFLAGS="$LDFLAGS -L${krb_libdir}"
    AC_CHECK_LIB(des,printf,[LIBS="${LIBS} -ldes"])
    LDFLAGS=$hold_ldflags
    if test -n "$krb_incdir"; then
      includeopt="${includeopt} -I$krb_incdir"
    fi
  fi
a271 1
AC_CHECK_FUNCS(krb_get_err_text)
d298 1
a298 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb lkrb5 -lasn1 -lcrypto -lcom_err -lkafs"
d314 19
@


1.22
log
@even worse:  link against nearly any kerberos library, and you need all of
them.   these swedes are insane!
@
text
@d3 1
d6 1
a6 1
AC_CONFIG_HEADER(config.h src/options.h)
d12 1
d15 1
d17 16
a32 2
AC_PATH_PROG(perl_path, perl, no)
AC_PATH_PROG(csh_path, csh, no)
d41 28
d83 1
a83 1
                 io.h direct.h sys/bsdtypes.h sys/resource.h)
d97 33
a129 1
AC_CHECK_FUNCS(fchmod fsync ftime mktemp putenv vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tempnam tzset readlink wait3 mknod getpassphrase)
d431 1
a431 2
AC_OUTPUT(Makefile lib/Makefile src/Makefile zlib/Makefile diff/Makefile doc/Makefile \
	  man/Makefile tools/Makefile \
d433 33
a465 3
	  windows-NT/Makefile windows-NT/SCC/Makefile \
	  os2/Makefile emx/Makefile vms/Makefile \
	  stamp-h)
@


1.21
log
@well, with the most recent reorganization, it now turns out that any
program which links -lkrb5 also must link -lkafs as well!  someone please
mail hin@@ an alpha or a powerpc, so that he can become aware of how
binutils ("the other linker we use") works.
@
text
@d236 1
a236 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb5 -lasn1 -lcrypto -lcom_err -lkafs"
d238 1
a238 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb5 -lcrypto -lcom_err -lkafs"
@


1.20
log
@when you support kerberosV, you apparently need to also link in the 12
other libraries that it's tentacles lead to.  This is just disgusting, and
are going to pressure the KTH people to fix this.  It's unmaintainable.
kerberosV and kerberosIV even have cross dependencies.  It's insane.
patch developed at the same time by drahn and I
@
text
@d236 1
a236 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb5 -lasn1 -lcrypto -lcom_err"
d238 1
a238 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb5 -lcrypto -lcom_err"
@


1.19
log
@Support KERBEROS5 / gssapi. (hin@@ ok)
@
text
@d236 1
a236 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb5 -lasn1 -ldes"
@


1.18
log
@Integrate local changes
@
text
@d225 1
a225 1
CPPFLAGS="$CPPFLAGS -I$GSSAPI/include "
d233 1
a233 1
  includeopt="${includeopt} -I$GSSAPI/include"
d236 1
a236 1
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb5 -lasn1 -ldes -lroken"
d241 1
a241 1
  CPPFLAGS="-I$GSSAPI/include $CPPFLAGS"
@


1.17
log
@Integrate local changes
@
text
@d3 2
a4 12
dnl
AC_PREREQ(2.4)dnl Required Autoconf version.
dnl Do not use autoconf 2.12; it produces a configure script which produces
dnl a "internal 2K buffer" error on HPUX when run with /bin/sh.
dnl autoconf 2.10 seems like a good choice.
dnl
dnl It is possible that we should just change the above required version
dnl to 2.10; it seems like everyone is using 2.10 anyway, and there is
dnl at least some sentiment that we should be using a version which has
dnl --bindir (and correspondingly, using @@bindir@@ and friends in our
dnl Makefile.in files.  Rumor has it that autoconf 2.7
dnl introduced --bindir but the point is that 2.10 has it.
d7 1
a8 18

AC_AIX
AC_MINIX
AC_ISC_POSIX
if test "$ISC" = yes; then
CFLAGS="$CFLAGS -D_SYSV3"
LIBS="-lcrypt $LIBS"
fi

AC_PREFIX_PROGRAM(cvs)

dnl FIXME: AC_C_CROSS is considered obsolete by autoconf 2.12, and is
dnl pretty ugly to start with.  But it isn't obvious to me how we should
dnl be handling the uses of cross_compiling below.
AC_C_CROSS

AC_C_CONST

d10 1
a12 1
AC_PROG_MAKE_SET
d24 9
d34 1
a38 1
AC_HEADER_SYS_WAIT
d41 2
a42 2
AC_HEADER_DIRENT
AC_TYPE_SIGNAL
d45 1
d47 2
a48 1
AC_TYPE_PID_T
d50 1
d52 1
a52 1
AC_CHECK_FUNCS(fchmod fsync ftime mktemp putenv vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tempnam tzset readlink wait3)
d63 6
d90 1
a90 2
AC_CHECK_LIB(sec, getspnam)
AC_CHECK_FUNCS(getspnam)
d121 2
a122 15
AC_MSG_CHECKING([for working fnmatch function])
AC_CACHE_VAL(ccvs_cv_sys_working_fnmatch,
[AC_TRY_RUN([
#include <fnmatch.h>
int
main ()
{
  exit ((fnmatch ("a", "a", FNM_PATHNAME) == 0
	 && fnmatch ("a", "b", FNM_PATHNAME) == FNM_NOMATCH)
	? 0 : 1);
}],
ccvs_cv_sys_working_fnmatch=yes,
ccvs_cv_sys_working_fnmatch=no,
ccvs_cv_sys_working_fnmatch=no)])
if test $ccvs_cv_sys_working_fnmatch = no; then
a124 1
AC_MSG_RESULT($ccvs_cv_sys_working_fnmatch)
d126 5
a130 28
# If we can't find connect, try looking in -lsocket, -lnsl, and -linet.
# The Irix 5 libc.so has connect and gethostbyname, but Irix 5 also has
# libsocket.so which has a bad implementation of gethostbyname (it
# only looks in /etc/hosts), so we only look for -lsocket if we need
# it.
AC_CHECK_FUNC(connect, :, 
[case "$LIBS" in
*-lnsl*) ;;
*) AC_CHECK_LIB(nsl_s, printf) ;;
esac
case "$LIBS" in
*-lnsl*) ;;
*) AC_CHECK_LIB(nsl, printf) ;;
esac
case "$LIBS" in
*-lsocket*) ;;
*) AC_CHECK_LIB(socket, connect) ;;
esac
case "$LIBS" in
*-linet*) ;;
*) AC_CHECK_LIB(inet, connect) ;;
esac
dnl We can't just call AC_CHECK_FUNCS(connect) here, because the value
dnl has been cached.
if test "$ac_cv_lib_socket_connect" = "yes" || test "$ac_cv_lib_inet_connect" = "yes"; then
  ac_cv_func_connect=yes
  AC_DEFINE(HAVE_CONNECT)
fi])
d278 1
a278 1
[if test "$ac_cv_func_connect" = yes; then
d287 1
a287 1
[if test "$ac_cv_func_connect" = yes; then
d322 1
a322 1
AC_DEFINE(PRESERVE_PERMISSIONS_SUPPORT)
@


1.16
log
@Integrate local changes
@
text
@d405 1
a405 1
	  os2/Makefile emx/Makefile macintosh/Makefile vms/Makefile \
@


1.15
log
@Integrate local changes
@
text
@d66 1
a66 1
AC_REPLACE_FUNCS(mkdir rename strstr dup2 strerror valloc waitpid memmove vasprintf strtoul)
d273 1
a273 1
AC_CHECK_HEADERS(gssapi.h gssapi/gssapi.h gssapi/gssapi_generic.h)
d276 3
a278 1
if test "$ac_cv_header_gssapi_h" = "yes" || test "$ac_cv_header_gssapi_gssapi_h" = "yes"; then
d402 2
a403 2
	  man/Makefile tools/Makefile tools/pcl-cvs/Makefile \
	  contrib/Makefile contrib/elib/Makefile \
@


1.14
log
@Use system zlib if present and of recent enough vintage
@
text
@a270 1
AC_MSG_CHECKING([for gssapi.h])
d273 1
a273 7
AC_CHECK_HEADER(gssapi/gssapi.h,
  [AC_DEFINE(HAVE_GSSAPI)
   LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb5 -lcrypto -lcom_err"
   includeopt="${includeopt} -I$GSSAPI/include"
   # This is necessary on Irix 5.3, in order to link against libkrb5 --
   # there, an_to_ln.o refers to things defined only in -lgen.
   AC_CHECK_LIB(gen, compile)])
d275 22
@


1.13
log
@Integrate local changes
@
text
@d102 8
@


1.12
log
@Integrate local changes
@
text
@d94 1
a94 3
dnl Look for shadow password files before we go ahead and set getspnam.
dnl On some systems (Linux), the C library has getspnam but shadow
dnl passwords might not be in use.
d96 5
a100 14
dnl We used to check for the existence of the /etc/security directory
dnl here, but that's incorrect, since it's possible to have PAM installed
dnl without using shadow passwords.
dnl
AC_MSG_CHECKING([for evidence of shadow passwords])
if test -f /etc/shadow \
   || test -f /etc/security/passwd.adjunct ; then
  found="yes"
  AC_CHECK_LIB(sec, getspnam)
  AC_CHECK_FUNCS(getspnam)
else
  found="no"
fi
AC_MSG_RESULT([$found])
@


1.11
log
@Integrate local changes
@
text
@d66 1
a66 1
AC_REPLACE_FUNCS(mkdir rename strstr dup2 strerror valloc waitpid vasprintf strtoul)
d350 6
@


1.10
log
@Integrate local changes
@
text
@d13 2
a14 2
dnl Makefile.in files.  I'm not sure exactly what version of autoconf
dnl introduced --bindir but I know 2.10 has it.
d53 1
d65 27
a91 2
AC_REPLACE_FUNCS(getwd mkdir rename strdup strstr dup2 strerror valloc waitpid vasprintf strtoul)
AC_CHECK_FUNCS(fchmod fsync ftime mktemp putenv vfork vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tempnam tzset readlink wait3)
d113 18
a130 1
AC_CHECK_FUNC(re_exec, :, LIBOBJS="$LIBOBJS regex.o")
d185 4
d201 13
a213 9
AC_TRY_LINK([#include <krb.h>],[int i;],
  [krb_h=yes krb_incdir=],
  [if test "$cross_compiling" != yes && test -r $KRB4/include/krb.h; then
     hold_cflags=$CFLAGS
     CFLAGS="$CFLAGS -I$KRB4/include"
     AC_TRY_LINK([#include <krb.h>],[int i;],
       [krb_h=yes krb_incdir=$KRB4/include])
     CFLAGS=$hold_cflags
   fi])
d227 2
d231 12
a242 4
  AC_CHECK_LIB(krb,printf,[krb_lib=yes krb_libdir=],
    [if test "$cross_compiling" != yes && test -r $KRB4/lib/libkrb.a; then
       krb_lib=yes krb_libdir=$KRB4/lib
     fi])
a255 1
      AC_SUBST(includeopt)
d262 25
d351 23
d381 1
a381 1
AC_OUTPUT(Makefile lib/Makefile src/Makefile zlib/Makefile doc/Makefile \
@


1.9
log
@Don't link with -lcrypt unless needed [stopgap measure for now]
@
text
@d9 6
d65 1
a65 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv vfork vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tzset readlink wait3)
d277 1
a277 1
	  os2/Makefile macintosh/Makefile vms/Makefile \
@


1.8
log
@Integrate local changes
@
text
@d242 5
d249 2
d253 1
@


1.7
log
@Integrate local changes
@
text
@d73 1
a73 1
  echo "yup"
d77 1
a77 1
  echo "nope"
d79 1
@


1.6
log
@Integrate local changes
@
text
@d3 1
d5 4
d23 3
d59 1
a59 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv setvbuf vfork vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tzset readlink)
a144 3
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)

d261 2
a262 1
	  windows-NT/Makefile os2/Makefile macintosh/Makefile vms/Makefile \
@


1.5
log
@Integrate local changes
@
text
@a1 1
dnl "$CVSid$"
d51 1
a51 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv setvbuf vfork vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock)
d58 4
d64 1
a64 2
   || test -f /etc/security/passwd.adjunct \
   || test -d /etc/security ; then
d95 29
d204 1
a204 25
# If we can't find connect, try looking in -lsocket, -lnsl, and -linet.
# The Irix 5 libc.so has connect and gethostbyname, but Irix 5 also has
# libsocket.so which has a bad implementation of gethostbyname (it
# only looks in /etc/hosts), so we only look for -lsocket if we need
# it.
unset ac_cv_func_connect
AC_CHECK_FUNC(connect, :, 
[case "$LIBS" in
*-lnsl*) ;;
*) AC_CHECK_LIB(nsl_s, printf) ;;
esac
case "$LIBS" in
*-lnsl*) ;;
*) AC_CHECK_LIB(nsl, printf) ;;
esac
case "$LIBS" in
*-lsocket*) ;;
*) AC_CHECK_LIB(socket, connect) ;;
esac
case "$LIBS" in
*-linet*) ;;
*) AC_CHECK_LIB(inet, connect) ;;
esac
unset ac_cv_func_connect
AC_CHECK_FUNCS(connect)])
d206 34
a239 1
AC_CHECK_FUNC(gethostname, :, LIBOBJS="$LIBOBJS hostname.o")
d241 1
a241 14
# If we have connect(), we want the full client & server arrangement.
if test "$ac_cv_func_connect" = yes; then
AC_DEFINE(CLIENT_SUPPORT)
AC_DEFINE(SERVER_SUPPORT)
# Define AUTH_SERVER_SUPPORT only if we could locate the crypt() function
unset ac_cv_func_crypt
AC_CHECK_FUNC(crypt, :,
[case "$LIBS" in
*-lcrypt*) ;;
*) AC_CHECK_LIB(crypt, crypt) ;;
esac
unset ac_cv_func_crypt
AC_CHECK_FUNCS(crypt)])
  if test "$ac_cv_func_crypt" = yes; then
a242 1
  fi
d244 1
@


1.4
log
@Integrate local changes to CVS; remove files no longer part of the CVS
distribution
@
text
@d14 1
a21 2
AC_C_CHAR_UNSIGNED
AC_C_INLINE
d51 1
a51 1
AC_REPLACE_FUNCS(getwd mkdir rename strdup strstr dup2 strerror valloc waitpid memmove vasprintf strtoul)
d53 17
d143 5
d149 1
d157 16
d226 1
a226 1
AC_OUTPUT(Makefile lib/Makefile src/Makefile doc/Makefile \
d229 2
a230 1
	  windows-NT/Makefile os2/Makefile macintosh/Makefile stamp-h)
@


1.3
log
@Integrate local changes to CVS
@
text
@d53 1
a53 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv setvbuf vfork vprintf ftruncate timezone getpagesize fchdir sigaction sigprocmask sigvec sigsetmask sigblock)
d65 2
a66 2
  exit ((fnmatch ("a", "a", FNM_FILE_NAME) == 0
	 && fnmatch ("a", "b", FNM_FILE_NAME) == FNM_NOMATCH)
d119 1
a119 1
  AC_CHECK_LIB(krb,main,[krb_lib=yes krb_libdir=],
d127 1
a127 1
    AC_CHECK_LIB(des,main,[LIBS="${LIBS} -ldes"])
d144 1
a144 1
*) AC_CHECK_LIB(nsl_s, main) ;;
d148 1
a148 1
*) AC_CHECK_LIB(nsl, main) ;;
d167 12
a178 2
# As far as I know this works on all machines which use configure (i.e. unix)
AC_DEFINE(AUTH_SERVER_SUPPORT)
d189 3
a191 3
	  man/Makefile contrib/Makefile contrib/pcl-cvs/Makefile \
	  examples/Makefile windows-NT/Makefile os2/Makefile \
	  macintosh/Makefile stamp-h)
@


1.2
log
@$(KRB4) -> \$KRB4 so our /bin/sh won't spit out an error message while
configuring.
@
text
@d52 1
a52 1
AC_REPLACE_FUNCS(getwd mkdir rename strdup strstr dup2 strerror valloc waitpid memmove)
a55 1
AC_FUNC_ALLOCA
d78 1
a78 1
dnl set $KRB4 from --with-krb4=value -- WITH_KRB4
d83 1
a83 1
  [  --with-krb4=value       set default \$KRB4 from value],
d167 2
@


1.1
log
@Initial revision
@
text
@d2 1
d4 1
a4 1
AC_PREREQ(2.1)dnl Required Autoconf version.
d7 1
a7 1
AC_DEFINE(CVS_SUPPORT)
a8 1
AC_PROG_CC
d16 4
a38 42
AC_PATH_PROGS(gdiff_path, gnudiff diff, diff)
AC_MSG_CHECKING(to see if $gdiff_path supports -a)
if $gdiff_path -a /dev/null /dev/null > /dev/null 2>&1 ; then
  AC_MSG_RESULT(yes; appending -a to $gdiff_path)
  gdiff_path="$gdiff_path -a"
fi
AC_DEFINE_UNQUOTED(DIFF, "$gdiff_path")

AC_PATH_PROGS(ggrep_path, ggrep gnugrep grep, grep)
AC_MSG_CHECKING(to see if $ggrep_path supports -s)
[echo foostring | $ggrep_path -s foostring > conftest.out 2>/dev/null]
dnl
dnl FIXME: We use a work-around for SunOS users with /usr/5bin first in their
dnl FIXME: path but we should really iterate through all the possible grep's
dnl FIXME: for one that works the way we want it to.
dnl FIXME: On the other hand, we should handle the failure to find a "working"
dnl FIXME: -s option by doing the old fashioned ">/dev/null".....
dnl
if test $? -ne 0 ; then
  AC_MSG_WARN($ggrep_path does not support -s, used when checking for merge conflicts)
else
  AC_MSG_RESULT(yes)
  AC_MSG_CHECKING(to see if $ggrep_path -s means to work silently)
  if test -s conftest.out ; then
    AC_MSG_RESULT(no)
    if test "$ggrep_path" != /usr/bin/grep ; then
      AC_MSG_CHECKING(to see if /usr/bin/grep has the right -s)
      [echo foostring | /usr/bin/grep -s foostring > conftest.out 2>/dev/null]
      if test $? -eq 0 -a ! -s foostring ; then
	AC_MSG_RESULT(yes; using /usr/bin/grep)
	ggrep_path=/usr/bin/grep
      else
	AC_MSG_RESULT(no)
      fi
    fi
  else
    AC_MSG_RESULT(yes)
  fi
fi
AC_DEFINE_UNQUOTED(GREP, "$ggrep_path")
rm -f conftest*

d42 1
a42 1
                 io.h direct.h sys/bsdtypes.h)
d53 1
a53 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv setvbuf vfork vprintf ftruncate timezone getpagesize fchdir)
d79 1
a79 1
dnl set $(KRB4) from --with-krb4=value -- WITH_KRB4
d81 1
d83 3
a85 3
AC_WITH([krb4],
KRB4=$withval,
KRB4=/usr/kerberos
a93 1
AC_REQUIRE([AC_CROSS_CHECK])
d95 2
a96 1
AC_COMPILE_CHECK(krb.h,[#include <krb.h>],[int i;],
d101 1
a101 2
     AC_COMPILE_CHECK(krb.h in $KRB4/include,
       [#include <krb.h>],[int i;],
d105 13
d120 1
a120 1
  AC_HAVE_LIBRARY(-lkrb,[krb_lib=yes krb_libdir=],
d128 1
a128 1
    AC_HAVE_LIBRARY(-ldes,[LIBS="${LIBS} -ldes"])
d143 1
a143 1
[case $LIBS in
d147 1
a147 1
case $LIBS in
d151 1
a151 1
case $LIBS in
d155 1
a155 1
case $LIBS in
d179 2
a180 1
	  examples/Makefile windows-NT/Makefile stamp-h)
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Upgrade to 1.7.1 snapshot
@
text
@a1 1
dnl "$CVSid$"
d3 1
a3 1
AC_PREREQ(2.4)dnl Required Autoconf version.
d6 2
a8 1

a15 4
AC_PREFIX_PROGRAM(cvs)

AC_C_CROSS

d35 42
d80 1
a80 1
                 io.h direct.h sys/bsdtypes.h sys/resource.h)
d91 1
a91 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv setvbuf vfork vprintf ftruncate timezone getpagesize fchdir sigaction sigprocmask sigvec sigsetmask sigblock)
d119 3
a122 4
define(WITH_KRB4,[
AC_ARG_WITH([krb4],
  [  --with-krb4=value       set default $(KRB4) from value],
  [KRB4=$withval],
d131 1
d133 1
a133 2
AC_MSG_CHECKING([for krb.h])
AC_TRY_LINK([#include <krb.h>],[int i;],
d138 2
a139 1
     AC_TRY_LINK([#include <krb.h>],[int i;],
a142 13
if test -z "$krb_h"; then
  AC_TRY_LINK([#include <krb.h>],[int i;],
    [krb_h=yes krb_incdir=],
    [if test "$cross_compiling" != yes && test -r $KRB4/include/kerberosIV/krb.h; then
       hold_cflags=$CFLAGS
       CFLAGS="$CFLAGS -I$KRB4/include/kerberosIV"
       AC_TRY_LINK([#include <krb.h>],[int i;],
	 [krb_h=yes krb_incdir=$KRB4/include/kerberosIV])
       CFLAGS=$hold_cflags
     fi])
fi
AC_MSG_RESULT($krb_h)

d145 1
a145 1
  AC_CHECK_LIB(krb,main,[krb_lib=yes krb_libdir=],
d153 1
a153 1
    AC_CHECK_LIB(des,main,[LIBS="${LIBS} -ldes"])
d168 1
a168 1
[case "$LIBS" in
d172 1
a172 1
case "$LIBS" in
d176 1
a176 1
case "$LIBS" in
d180 1
a180 1
case "$LIBS" in
d204 1
a204 2
	  examples/Makefile windows-NT/Makefile os2/Makefile \
	  macintosh/Makefile stamp-h)
@


1.1.1.3
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d52 1
a52 1
AC_REPLACE_FUNCS(getwd mkdir rename strdup strstr dup2 strerror valloc waitpid memmove vasprintf strtoul)
d56 1
d84 1
a84 1
  [  --with-krb4=value       set default \$(KRB4) from value],
a167 2
# As far as I know this works on all machines which use configure (i.e. unix)
AC_DEFINE(AUTH_SERVER_SUPPORT)
@


1.1.1.4
log
@New CVS release from Cyclic Software
@
text
@d53 1
a53 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv setvbuf vfork vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock)
d65 2
a66 2
  exit ((fnmatch ("a", "a", FNM_PATHNAME) == 0
	 && fnmatch ("a", "b", FNM_PATHNAME) == FNM_NOMATCH)
d119 1
a119 1
  AC_CHECK_LIB(krb,printf,[krb_lib=yes krb_libdir=],
d127 1
a127 1
    AC_CHECK_LIB(des,printf,[LIBS="${LIBS} -ldes"])
d144 1
a144 1
*) AC_CHECK_LIB(nsl_s, printf) ;;
d148 1
a148 1
*) AC_CHECK_LIB(nsl, printf) ;;
d167 2
a168 12
# Define AUTH_SERVER_SUPPORT only if we could locate the crypt() function
unset ac_cv_func_crypt
AC_CHECK_FUNC(crypt, :,
[case "$LIBS" in
*-lcrypt*) ;;
*) AC_CHECK_LIB(crypt, crypt) ;;
esac
unset ac_cv_func_crypt
AC_CHECK_FUNCS(crypt)])
  if test "$ac_cv_func_crypt" = yes; then
  AC_DEFINE(AUTH_SERVER_SUPPORT)
  fi
d179 3
a181 3
	  man/Makefile tools/Makefile tools/pcl-cvs/Makefile \
	  contrib/Makefile contrib/elib/Makefile \
	  windows-NT/Makefile os2/Makefile macintosh/Makefile stamp-h)
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@a13 1
LIBS="-lcrypt $LIBS"
d21 2
d52 1
a52 1
AC_REPLACE_FUNCS(getwd mkdir rename strdup strstr dup2 strerror valloc waitpid vasprintf strtoul)
a53 17

dnl
dnl Look for shadow password files before we go ahead and set getspnam.
dnl On some systems (Linux), the C library has getspnam but shadow
dnl passwords might not be in use.
dnl
AC_MSG_CHECKING([for evidence of shadow passwords])
if test -f /etc/shadow \
   || test -f /etc/security/passwd.adjunct \
   || test -d /etc/security ; then
  echo "yup"
  AC_CHECK_LIB(sec, getspnam)
  AC_CHECK_FUNCS(getspnam)
else
  echo "nope"
fi

a126 5
    # Put -L${krb_libdir} in LDFLAGS temporarily so that it appears before
    # -ldes in the command line.  Don't do it permanently so that we honor
    # the user's setting for LDFLAGS
    hold_ldflags=$LDFLAGS
    test -n "${krb_libdir}" && LDFLAGS="$LDFLAGS -L${krb_libdir}"
a127 1
    LDFLAGS=$hold_ldflags
a134 16

dnl
dnl Use --with-encryption to turn on encryption support
dnl
AC_ARG_ENABLE(encryption,
  [  --enable-encryption     enable encryption support],
  [case "${enableval}" in
    yes) encryption=true ;;
    no) encryption=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for encryption option) ;;
   esac],
  [encryption=false])
if test "$encryption" = "true"; then
  AC_DEFINE(ENCRYPTION)
fi

d188 1
a188 1
AC_OUTPUT(Makefile lib/Makefile src/Makefile zlib/Makefile doc/Makefile \
d191 1
a191 2
	  windows-NT/Makefile os2/Makefile macintosh/Makefile vms/Makefile \
	  stamp-h)
@


1.1.1.6
log
@New release from Cyclic Software
@
text
@d2 1
d52 1
a52 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv setvbuf vfork vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tzset readlink)
a58 4
dnl We used to check for the existence of the /etc/security directory
dnl here, but that's incorrect, since it's possible to have PAM installed
dnl without using shadow passwords.
dnl
d61 2
a62 1
   || test -f /etc/security/passwd.adjunct ; then
a92 29
# If we can't find connect, try looking in -lsocket, -lnsl, and -linet.
# The Irix 5 libc.so has connect and gethostbyname, but Irix 5 also has
# libsocket.so which has a bad implementation of gethostbyname (it
# only looks in /etc/hosts), so we only look for -lsocket if we need
# it.
AC_CHECK_FUNC(connect, :, 
[case "$LIBS" in
*-lnsl*) ;;
*) AC_CHECK_LIB(nsl_s, printf) ;;
esac
case "$LIBS" in
*-lnsl*) ;;
*) AC_CHECK_LIB(nsl, printf) ;;
esac
case "$LIBS" in
*-lsocket*) ;;
*) AC_CHECK_LIB(socket, connect) ;;
esac
case "$LIBS" in
*-linet*) ;;
*) AC_CHECK_LIB(inet, connect) ;;
esac
dnl We can't just call AC_CHECK_FUNCS(connect) here, because the value
dnl has been cached.
if test "$ac_cv_lib_socket_connect" = "yes" || test "$ac_cv_lib_inet_connect" = "yes"; then
  ac_cv_func_connect=yes
  AC_DEFINE(HAVE_CONNECT)
fi])

d173 26
d201 14
a214 36
# Check for options requesting client and server feature. If none are
# given and we have connect(), we want the full client & server arrangement.
AC_ARG_ENABLE(client,
[  --enable-client         include code for running as a remote client (default)
  --disable-client        don't include remote client code],
[if test "$enable_client" = yes; then
  AC_DEFINE(CLIENT_SUPPORT)
fi],
[if test "$ac_cv_func_connect" = yes; then
  AC_DEFINE(CLIENT_SUPPORT)
fi])
AC_ARG_ENABLE(server,
[  --enable-server         include code for running as a server (default)
  --disable-server        don't include server code],
[if test "$enable_server" = yes; then
  AC_DEFINE(SERVER_SUPPORT)
fi],
[if test "$ac_cv_func_connect" = yes; then
  AC_DEFINE(SERVER_SUPPORT)
  enable_server=yes
fi])

### The auth server needs to be able to check passwords against passwd
### file entries, so we only #define AUTH_SERVER_SUPPORT if we can
### find the crypt function. 
###
### We used to test for crypt in libc first, and only add -lcrypt if
### we couldn't find it, but that interacts badly with the cache
### variables, the 'unset' command isn't portable, and I'm not sure
### there's any harm in just testing for -lcrypt first.

if test "$enable_server" = yes; then
AC_CHECK_LIB(crypt, crypt)
AC_CHECK_FUNCS(crypt)

if test "$ac_cv_func_crypt" = yes; then
d216 1
a217 1
fi # enable_server
@


1.1.1.7
log
@New release from Cyclic Software
@
text
@a2 1
dnl
a3 4
dnl Do not use autoconf 2.12; it produces a configure script which produces
dnl a "internal 2K buffer" error on HPUX when run with /bin/sh.
dnl autoconf 2.10 seems like a good choice.
dnl
a17 3
dnl FIXME: AC_C_CROSS is considered obsolete by autoconf 2.12, and is
dnl pretty ugly to start with.  But it isn't obvious to me how we should
dnl be handling the uses of cross_compiling below.
d51 1
a51 1
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv vfork vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tzset readlink wait3)
d137 3
d256 1
a256 2
	  windows-NT/Makefile windows-NT/SCC/Makefile \
	  os2/Makefile macintosh/Makefile vms/Makefile \
@


1.1.1.8
log
@Latest release from Cyclic Software
@
text
@d73 1
a73 1
  found="yes"
d77 1
a77 1
  found="no"
a78 1
AC_MSG_RESULT([$found])
@


1.1.1.9
log
@Latest version from Cyclic Software
@
text
@a8 6
dnl It is possible that we should just change the above required version
dnl to 2.10; it seems like everyone is using 2.10 anyway, and there is
dnl at least some sentiment that we should be using a version which has
dnl --bindir (and correspondingly, using @@bindir@@ and friends in our
dnl Makefile.in files.  I'm not sure exactly what version of autoconf
dnl introduced --bindir but I know 2.10 has it.
d59 1
a59 1
AC_CHECK_FUNCS(fchmod fsync ftime mktemp putenv vfork vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tempnam tzset readlink wait3)
d263 1
a263 1
	  os2/Makefile emx/Makefile macintosh/Makefile vms/Makefile \
@


1.1.1.10
log
@Latest version from Cyclic
@
text
@d13 2
a14 2
dnl Makefile.in files.  Rumor has it that autoconf 2.7
dnl introduced --bindir but the point is that 2.10 has it.
a52 1
		 limits.h sys/file.h \
d64 2
a65 27
AC_STRUCT_ST_BLKSIZE
AC_REPLACE_FUNCS(mkdir rename strstr dup2 strerror valloc waitpid vasprintf strtoul)
AC_CHECK_FUNCS(fchmod fsync ftime mktemp putenv vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tempnam tzset readlink wait3)

dnl
dnl The CVS coding standard (as specified in HACKING) is that if it exists
dnl in SunOS4 and ANSI, we use it.  CVS itself, of course, therefore doesn't
dnl need HAVE_* defines for such functions, but diff wants them.
dnl
AC_DEFINE(HAVE_STRCHR)
AC_DEFINE(HAVE_MEMCHR)

dnl
dnl AC_FUNC_VFORK is rather baroque.  It seems to be rather more picky
dnl than, say, the Single Unix Specification (version 2), which simplifies
dnl a lot of cases by saying that the child process can't set any variables
dnl (thus avoiding problems with register allocation) or call any functions
dnl (thus avoiding problems with whether file descriptors are shared).
dnl It would be nice if we could just write to the Single Unix Specification.
dnl I think the only way to do redirection this way is by doing it in the
dnl parent, and then undoing it afterwards (analogous to windows-NT/run.c).
dnl That would appear to have a race condition if the user hits ^C (or
dnl some other signal) at the wrong time, as main_cleanup will try to use
dnl stdout/stderr.  So maybe we are stuck with AC_FUNC_VFORK.
dnl
AC_FUNC_VFORK
AC_FUNC_CLOSEDIR_VOID
d87 1
a87 18
dnl We always use CVS's regular expression matcher.
dnl This is because:
dnl (1) If memory serves, the syntax of the regular expressions
dnl handled by re_exec is not consistent from system to system, which
dnl is a Bad Thing because CVS passes this syntax out to the user.
dnl We might have better luck with the POSIX interface, if we really
dnl want to look for a system-supplied matcher.
dnl (2) It is necessary to make _sure_ that we get a regex.h and regex.c
dnl that match each other.  In particular, rx and the CVS/emacs
dnl regex.c have a different "struct re_pattern_buffer" and so using
dnl the system regex.h and our regex.c, or vice versa, will tend to
dnl cause a core dump.
dnl (3) Just as a random data point, CVS uses re_exec (a BSD interface);
dnl libdiff uses re_compile_pattern (a GNU interface, I think).  Diff
dnl should probably be fixed to have the caller (CVS) supply the regexp
dnl matching.
dnl
dnl AC_CHECK_FUNC(re_exec, :, LIBOBJS="$LIBOBJS regex.o")
a141 4
dnl If you change this, keep in mind that some systems have a bogus
dnl libkrb in the system libraries, so --with-krb4=value needs to
dnl override the system -lkrb.
dnl
d154 9
a162 13
if test "$cross_compiling" != yes && test -r $KRB4/include/krb.h; then
   hold_cflags=$CFLAGS
   CFLAGS="$CFLAGS -I$KRB4/include"
   AC_TRY_LINK([#include <krb.h>],[int i;],
          [krb_h=yes krb_incdir=$KRB4/include],
          [CFLAGS=$hold_cflags
           AC_TRY_LINK([#include <krb.h>],[int i;],
             [krb_h=yes krb_incdir=])])
   CFLAGS=$hold_cflags
else
   AC_TRY_LINK([#include <krb.h>],[int i;],
             [krb_h=yes krb_incdir=])
fi
a175 2
includeopt=
AC_SUBST(includeopt)
d178 4
a181 12
  if test "$cross_compiling" != yes && test -r $KRB4/lib/libkrb.a; then
       hold_ldflags=$LDFLAGS
       LDFLAGS="-L${KRB4}/lib $LDFLAGS"
       AC_CHECK_LIB(krb,printf,[krb_lib=yes krb_libdir=${KRB4}/lib],
           [LDFLAGS=$hold_ldflags
            # Using open here instead of printf so we don't
            # get confused by the cached value for printf from above.
            AC_CHECK_LIB(krb,open,[krb_lib=yes krb_libdir=])])
       LDFLAGS=$hold_ldflags
  else
       AC_CHECK_LIB(krb,printf,[krb_lib=yes krb_libdir=])
  fi
d195 1
a201 25
dnl Use --with-gssapi=DIR to enable GSSAPI support.
dnl
GSSAPI=/usr/cygnus/kerbnet
define(WITH_GSSAPI,[
AC_ARG_WITH([gssapi],
  [  --with-gssapi=value     GSSAPI directory],
  [GSSAPI=$withval],
)dnl
echo "default place for GSSAPI is $GSSAPI"
AC_SUBST(GSSAPI)])dnl
WITH_GSSAPI

AC_MSG_CHECKING([for gssapi.h])
hold_cppflags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS -I$GSSAPI/include "
AC_CHECK_HEADER(gssapi/gssapi.h,
  [AC_DEFINE(HAVE_GSSAPI)
   LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb5 -lcrypto -lcom_err"
   includeopt="${includeopt} -I$GSSAPI/include"
   # This is necessary on Irix 5.3, in order to link against libkrb5 --
   # there, an_to_ln.o refers to things defined only in -lgen.
   AC_CHECK_LIB(gen, compile)])
CPPFLAGS=$hold_cppflags

dnl
a257 23
dnl On cygwin32, we configure like a Unix system, but we use the
dnl Windows support code in lib/fncase.c to handle the case
dnl insensitive file system.  We also need some support libraries.  We
dnl do this at the end so that the new libraries are added at the end
dnl of LIBS.
AC_CACHE_CHECK(for cygwin32, ccvs_cv_sys_cygwin32,
[AC_TRY_COMPILE([], [return __CYGWIN32__;],
ccvs_cv_sys_cygwin32=yes, ccvs_cv_sys_cygwin32=no)])
if test $ccvs_cv_sys_cygwin32 = yes; then
  LIBOBJS="$LIBOBJS fncase.o"
  LIBS="$LIBS -ladvapi32"

  dnl On Windows you can only change file times if you can write to
  dnl the file.  cygwin32 should really handle this for us, but as of
  dnl January 1998 it doesn't.
  AC_DEFINE(UTIME_EXPECTS_WRITABLE)

  dnl On Windows we must use setmode to change between binary and text
  dnl mode.
  AC_DEFINE(USE_SETMODE_STDOUT)
  AC_DEFINE(HAVE_SETMODE)
fi

d265 1
a265 1
AC_OUTPUT(Makefile lib/Makefile src/Makefile zlib/Makefile diff/Makefile doc/Makefile \
@


1.1.1.11
log
@Latest version from Cyclic
@
text
@d66 1
a66 1
AC_REPLACE_FUNCS(mkdir rename strstr dup2 strerror valloc waitpid memmove vasprintf strtoul)
a341 6

dnl For the moment we will assume that all systems which have
dnl the unixyness to run configure are unixy enough to do the
dnl PreservePermissions stuff.  I have this sinking feeling that
dnl things won't be that simple, before long.
AC_DEFINE(PRESERVE_PERMISSIONS_SUPPORT)
@


1.1.1.12
log
@Latest version from Cyclic
@
text
@d94 3
a96 1
dnl Check for shadow password support.
d98 14
a111 5
dnl We used to try to determine whether shadow passwords were actually in
dnl use or not, but the code has been changed to work right reguardless,
dnl so we can go back to a simple check.
AC_CHECK_LIB(sec, getspnam)
AC_CHECK_FUNCS(getspnam)
@


1.1.1.13
log
@Latest version from Cyclic
@
text
@d263 1
d266 7
a272 1
AC_CHECK_HEADERS(gssapi.h gssapi/gssapi.h gssapi/gssapi_generic.h)
a273 22

if test "$ac_cv_header_gssapi_h" = "yes" || test "$ac_cv_header_gssapi_gssapi_h" = "yes"; then
  AC_DEFINE(HAVE_GSSAPI)
  includeopt="${includeopt} -I$GSSAPI/include"
  # FIXME: This is ugly, but these things don't seem to be standardized.
  if test "$ac_cv_header_gssapi_h" = "yes"; then
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi -lkrb5 -lasn1 -ldes -lroken"
  else
    LIBS="$LIBS -L$GSSAPI/lib -lgssapi_krb5 -lkrb5 -lcrypto -lcom_err"
  fi
  save_CPPFLAGS=$CPPFLAGS
  CPPFLAGS="-I$GSSAPI/include $CPPFLAGS"
  if test "$ac_cv_header_gssapi_h" = "yes"; then
    AC_EGREP_HEADER(GSS_C_NT_HOSTBASED_SERVICE, gssapi.h, AC_DEFINE(HAVE_GSS_C_NT_HOSTBASED_SERVICE))
  else
    AC_EGREP_HEADER(GSS_C_NT_HOSTBASED_SERVICE, gssapi/gssapi.h, AC_DEFINE(HAVE_GSS_C_NT_HOSTBASED_SERVICE))
  fi
  CPPFLAGS=$save_CPPFLAGS
  # This is necessary on Irix 5.3, in order to link against libkrb5 --
  # there, an_to_ln.o refers to things defined only in -lgen.
  AC_CHECK_LIB(gen, compile)
fi
@


1.1.1.14
log
@Latest version from Cyclic
@
text
@d66 1
a66 1
AC_REPLACE_FUNCS(mkdir rename strstr dup2 strerror valloc waitpid memmove strtoul)
d265 1
a265 1
AC_CHECK_HEADERS(krb5.h gssapi.h gssapi/gssapi.h gssapi/gssapi_generic.h)
d268 1
a268 3
if test "$ac_cv_header_krb5_h" = "yes" && 
   (test "$ac_cv_header_gssapi_h" = "yes" ||
    test "$ac_cv_header_gssapi_gssapi_h" = "yes"); then
d384 2
a385 2
	  man/Makefile tools/Makefile \
	  contrib/Makefile \
@


1.1.1.15
log
@Latest version from Cyclic
@
text
@d389 1
a389 1
	  os2/Makefile emx/Makefile vms/Makefile \
@


1.1.1.16
log
@Latest from Cyclic Software
@
text
@d3 12
a14 2
AC_PREREQ(2.13)
AC_PREFIX_PROGRAM(cvs)
a16 1
AC_PROG_AWK
d18 18
a36 1
AC_PROG_MAKE_SET
d39 1
a50 9
AC_AIX
AC_MINIX
AC_ISC_POSIX
if test "$ISC" = yes; then
CFLAGS="$CFLAGS -D_SYSV3"
LIBS="-lcrypt $LIBS"
fi

AC_HEADER_DIRENT
a51 1
AC_HEADER_SYS_WAIT
d56 1
d59 2
a60 2

AC_C_CONST
d63 1
a64 3
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

a65 1
AC_STRUCT_ST_RDEV
d67 1
a67 1
AC_CHECK_FUNCS(fchmod fsync ftime mktemp putenv vprintf ftruncate timezone getpagesize initgroups fchdir sigaction sigprocmask sigvec sigsetmask sigblock tempnam tzset readlink wait3 mknod getpassphrase)
a77 6
dnl Force lib/regex.c to use malloc instead of messing around with alloca
dnl and define the old re_comp routines that we use.
dnl
AC_DEFINE(REGEX_MALLOC)
AC_DEFINE(_REGEX_RE_COMP)
dnl
d99 2
a100 1
AC_SEARCH_LIBS(getspnam, sec gen, AC_DEFINE(HAVE_GETSPNAM))
d102 18
d123 15
a137 2
AC_FUNC_FNMATCH
if test "$ac_cv_func_fnmatch_works" = no; then
d140 1
d142 28
a169 5
# Try to find connect and gethostbyname.
AC_CHECK_LIB(nsl, main,
  AC_SEARCH_LIBS(connect, xnet socket inet, AC_DEFINE(HAVE_CONNECT),, -lnsl),
  AC_SEARCH_LIBS(connect, xnet socket inet, AC_DEFINE(HAVE_CONNECT)))
AC_SEARCH_LIBS(gethostbyname, netinet nsl)
d317 1
a317 1
[if test "$ac_cv_search_connect" != no; then
d326 1
a326 1
[if test "$ac_cv_search_connect" != no; then
d331 8
a338 3
dnl The auth server needs to be able to check passwords against passwd
dnl file entries, so we only #define AUTH_SERVER_SUPPORT if we can
dnl find the crypt function. 
d341 6
a346 1
AC_SEARCH_LIBS(crypt, crypt, AC_DEFINE(HAVE_CRYPT) AC_DEFINE(AUTH_SERVER_SUPPORT))
d353 1
a353 1
dnl AC_DEFINE(PRESERVE_PERMISSIONS_SUPPORT)
@


1.1.1.17
log
@Latest from Cyclic Software
@
text
@a2 1
AM_INIT_AUTOMAKE(cvs, 1.11.1p1)
d5 1
a5 1
AM_CONFIG_HEADER(config.h src/options.h)
a10 1
# Automake's more advanced version of AC_PROG_RANLIB
a12 1
AC_PROG_LN_S
d14 2
a15 16
AC_PATH_PROG(PERL, perl, no)
AC_PATH_PROG(CSH, csh, no)
AC_PATH_PROG(PR, pr, no)
# For diff/util.c
if test x"$PR" != xno; then
	AC_DEFINE_UNQUOTED([PR_PROGRAM], ["$PR"], [Path to the pr utility])
fi

dnl FIXME This is truly gross.
missing_dir=`cd $ac_aux_dir && pwd`
dnl FIXME I pulled this default list from sanity.sh.  Perhaps these lists
dnl can be stored in one location?
glocs="$PATH:/usr/local/bin:/usr/contrib/bin:/usr/gnu/bin:/local/bin:/local/gnu/bin:/gnu/bin"
AC_PATH_PROGS(ROFF, groff roff, $missing_dir/missing roff, $glocs)
AC_PATH_PROG(PS2PDF, ps2pdf, $missing_dir/missing ps2pdf)
AC_PATH_PROG(TEXI2DVI, texi2dvi, $missing_dir/missing texi2dvi)
a23 28
# BSD's logo is a devil for a reason, hey?
AC_CACHE_CHECK(for BSD VPATH bug in make, ccvs_cv_bsd_make_vpath_bug,
[if test ! -d ac_test_dir ; then
	AC_TRY_COMMAND([mkdir ac_test_dir])
fi
cat >conftestmake <<EOF
VPATH = ac_test_dir
ac_test_target: ac_test_dep
	echo BSD VPATH bug present >&2
ac_test_dep: ac_test_dep_dep
EOF
touch ac_test_dir/ac_test_dep_dep
touch ac_test_dir/ac_test_dep
touch ac_test_target
# Don't know why, but the following test doesn't work under FreeBSD 4.2
# without this sleep command
sleep 1
if AC_TRY_COMMAND([make -f conftestmake 2>&1 >/dev/null |grep ^BSD\ VPATH\ bug\ present\$ >/dev/null]) ; then
	ccvs_cv_bsd_make_vpath_bug=yes
else
	ccvs_cv_bsd_make_vpath_bug=no
fi
AC_TRY_COMMAND([rm -rf ac_test_dir ac_test_target conftestmake])])
# We also don't need to worry about the bug when $srcdir = $builddir
AM_CONDITIONAL(MAKE_TARGETS_IN_VPATH, \
		test $ccvs_cv_bsd_make_vpath_bug = no \
		|| test $srcdir = .)

d38 1
a38 1
                 io.h direct.h sys/bsdtypes.h sys/resource.h syslog.h)
d52 1
a52 33
AC_CHECK_FUNCS(\
	fchdir \
	fchmod \
	fsync \
	ftime \
	ftruncate \
	getgroups \
	getpagesize \
	getpassphrase \
	gettimeofday \
	initgroups \
	mknod \
	mkstemp \
	mktemp \
	putenv \
	readlink \
	sigaction \
	sigblock \
	sigprocmask \
	sigsetmask \
	sigvec \
	tempnam \
	timezone \
	tzset \
	vprintf \
	wait3 \
)
# we only need one of the following
AC_CHECK_FUNCS([\
	nanosleep \
	usleep \
	select \
], [break])
d185 41
a225 1
ACX_WITH_GSSAPI
d310 2
a311 1
AC_OUTPUT([Makefile \
d313 3
a315 33
	  contrib/clmerge \
	  contrib/cln_hist \
	  contrib/commit_prep \
	  contrib/cvs_acls \
	  contrib/log \
	  contrib/log_accum \
	  contrib/mfpipe \
	  contrib/rcslock \
	  contrib/sccs2rcs \
	  diff/Makefile \
	  doc/Makefile \
	  emx/Makefile \
	  lib/Makefile \
	  man/Makefile \
	  os2/Makefile \
	  src/Makefile \
	  src/cvsbug \
	  tools/Makefile \
	  vms/Makefile \
	  windows-NT/Makefile \
	  windows-NT/SCC/Makefile \
	  zlib/Makefile],
	  [chmod -f +x \
	  contrib/clmerge \
	  contrib/cln_hist \
	  contrib/commit_prep \
	  contrib/cvs_acls \
	  contrib/log \
	  contrib/log_accum \
	  contrib/mfpipe \
	  contrib/rcslock \
	  contrib/sccs2rcs \
	  src/cvsbug])
@


