head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.76
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.72
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.74
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.66
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.70
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.68
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.64
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.62
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.60
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.58
	OPENBSD_5_0:1.1.1.2.0.56
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.54
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.52
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.48
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.50
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.46
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.44
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.42
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.40
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.38
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.36
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.34
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.32
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.30
	OPENBSD_3_7_BASE:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.28
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.26
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.24
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.22
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.20
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.18
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.16
	OPENBSD_3_0_BASE:1.1.1.2
	cvs-1-11-1p1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.14
	OPENBSD_2_9_BASE:1.1.1.2
	cvs-1-11:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.12
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.10
	OPENBSD_2_7_BASE:1.1.1.2
	OPENBSD_2_6:1.1.1.2.0.8
	OPENBSD_2_6_BASE:1.1.1.2
	cvs-1-10-7:1.1.1.2
	OPENBSD_2_5:1.1.1.2.0.6
	OPENBSD_2_5_BASE:1.1.1.2
	cvs-1-10-5:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.4
	OPENBSD_2_4_BASE:1.1.1.2
	cvs-1-10:1.1.1.2
	cvs-1-9-28:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.2
	OPENBSD_2_3_BASE:1.1.1.2
	cvs-1-9-26:1.1.1.2
	cvs-1-9-24:1.1.1.2
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	cvs-1-9-10:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.06.28.03.29.52;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.06.28.03.29.52;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.02.22.08.22.41;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
CVS for OS/2
based on EMX 0.9c (patch 02)


This port works well in local mode.  It fully respects the OS/2
filename conventions, but only works on HPFS or other filesystem types
which support long filenames (like ext2fs or Netware FS with OS/2
namespace).  It does _not_ work on FAT partitions or any other fs which
does not support long filenames.  The port also works in client mode.

This port requires EMX 0.9c (patch 02) and the BSD libraries.  It should
work in local mode, in client mode and also in server mode.  nServer mode
will only work if the client uses the :server: method, because the CRLF
handling of IBM's RSHD.EXE is not "compatible" with CVS.  (If you find a
better rshd for OS/2, please let us know!)

To compile CVS for OS/2, you must install the following packages:

 - EMX 0.9c (patch 02) and the GNU-C-Compiler

      EMXDEV1.ZIP
      EMXDEV2.ZIP
      EMXRT.ZIP
      GNUDEV1.ZIP
      GNUDEV2.ZIP
      BSDDEV.ZIP
      EMXFIX02.ZIP

 - GNU make for OS/2

      GNUMAKE.ZIP

 - ufc.a (ufc-crypt) as a replacement for crypt (this may be something
   different if you live inside the USA).  You don't need this one currently,
   because the port of the server to OS/2 isn't done yet, but I'm mentioning
   in case it is useful for future reference (we're probably better off
   using a different password hash instead, as noted in item #184 of ../TODO).

      GNUUFC.ZIP

All packages can be found on ftp://ftp.leo.org/pub/comp/os/os2/leo/gnu
(You may also try http://www.leo.org/pub/comp/os/os2/leo/gnu).

Change to the `emx' directory, do "make" and get emx\cvs.exe.  Assuming
you have edited the `install_dir' variable in the Makefile, you may type
"make install-cvs" to put cvs.exe in the right place.  You may also "make
clean-cvs" to clean up object and library files.

The cvs.exe generated will require emx.dll to run.  You can try
compiling with -Zomf -Zsys to generate a cvs.exe without this
requirement, but that almost surely will require significant changes
to make it work.  For the client, the big known problem would be that
EMX 0.9c doesn't have sockets with -Zsys (according to the
documentation).  That seems like it would be hard to get around.  For
local, the big known problem is that -Zsys doesn't have fork().  This
one isn't as bad--using os2/run.c or something similar instead of
src/run.c should solve this problem.

You will get warnings in lib/getdate.c.  These are yacc's fault; ignore
them.

You will get about 5 warnings in lib/regex.c concerning "unused variable
destination".  Ignore them.

Report bugs to tepting@@swol.de and bug-cvs@@prep.ai.mit.edu.
@


1.1.1.1
log
@Latest version from Cyclic Software
@
text
@@


1.1.1.2
log
@Latest version from Cyclic
@
text
@d45 4
a48 8
Change to the `emx' directory, do "make" and get emx\cvs.exe.  I had
to comment out the "Makefile" rule in emx/Makefile to avoid a
complaint about ../config.status not existing.  You also might need to
edit srcdir to be "." and top_srcdir to be "..".

Assuming you have edited the `install_dir' variable in the Makefile,
you may type "make install-cvs" to put cvs.exe in the right place.
You may also "make clean-cvs" to clean up object and library files.
d66 1
a66 1
Report bugs to tepting@@swol.de and bug-cvs@@gnu.org.
@

