head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.80
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.78
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.74
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.70
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.72
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.64
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.68
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.66
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.62
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.60
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.58
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.56
	OPENBSD_5_0:1.1.1.2.0.54
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.52
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.50
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.46
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.48
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.44
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.42
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.40
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.38
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.36
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.34
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.32
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.30
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.28
	OPENBSD_3_7_BASE:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.26
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.24
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.22
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.20
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.18
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.16
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.14
	OPENBSD_3_0_BASE:1.1.1.2
	cvs-1-11-1p1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.12
	OPENBSD_2_9_BASE:1.1.1.2
	cvs-1-11:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.10
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.8
	OPENBSD_2_7_BASE:1.1.1.2
	OPENBSD_2_6:1.1.1.2.0.6
	OPENBSD_2_6_BASE:1.1.1.2
	cvs-1-10-7:1.1.1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	cvs-1-10-5:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	cvs-1-10:1.1.1.2
	cvs-1-9-28:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	cvs-1-9-26:1.1.1.1
	cvs-1-9-24:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	cvs-1-9-10:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	cvs-1-9-8:1.1.1.1
	cvs-1-9-6:1.1.1.1
	cvs-1-9-4:1.1.1.1
	cvs-1-9-2:1.1.1.1
	cvs-1-9:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	96.10.18.03.37.10;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.18.03.37.10;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.13.03.56.14;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <stdio.h>
#include <curses.h>

char *
getpass (char *prompt)
{
    /* FIXME: arbitrary limit; I think we need to ditch getstr to fix it.  */
    static char buf[2048];

    /* This clears the screen, which is *not* what we want.  But until I
       get some real VMS documentation....  */
    initscr ();

    printw ("%s", prompt);
    refresh ();
    noecho ();
    getstr (buf);
    endwin ();
    printf ("\n");
    return buf;
}

#if 0
int
main ()
{
    printf ("thank you for saying \"%s\"\n", getpass ("What'll it be? "));
    return 0;
}
#endif
@


1.1.1.1
log
@New release from Cyclic Software
@
text
@@


1.1.1.2
log
@Latest version from Cyclic
@
text
@a0 12
/* This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.  */

#undef TEST

d2 1
a2 11
#include <iodef.h>
#include <descrip.h>
#include <starlet.h>
#include <string.h>

#ifdef TEST
#include <stdlib.h>
static void error (int, int, char *);
#else
#  include "cvs.h"
#endif
d7 1
a7 7
    int status;
    unsigned short chan;
    static $DESCRIPTOR (sys_command, "SYS$COMMAND");
    unsigned short iosb[4];
    /* Arbitrary limit.  It doesn't seem worth going through multiple
       SYS$QIOW calls and who knows what to get rid of it, I don't
       think.  */
d10 9
a18 19
    /* Try to ensure that we avoid stepping on whatever output has
       been sent to stdout.  */
    printf ("\n");
    fflush (stdout);

    status = sys$assign (&sys_command, &chan, 0, 0);
    if (!(status & 1))
	error (1, 0, "sys$assign failed in getpass");
    status = sys$qiow (0, chan, IO$_READPROMPT | IO$M_NOECHO, &iosb, 0, 0,
		       buf, sizeof (buf) - 1, 0, 0, prompt, strlen (prompt));
    if (!(status & 1))
	error (1, 0, "sys$qiow failed in getpass");
    if (!(iosb[0] & 1))
	error (1, 0, "sys$qiow (iosb) failed in getpass");
    buf[iosb[1]] = '\0';
    status = sys$dassgn (chan);
    if (!(status & 1))
	error (0, 0, "sys$dassgn failed in getpass");
    /* Since there is no echo, we better go to the next line ourselves.  */
d23 1
a23 1
#ifdef TEST
a28 7
}

static void error (int x, int y, char *msg)
{
    printf ("error: %s\n", msg);
    if (x)
        exit (EXIT_FAILURE);
@


