head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.15.0.64
	OPENBSD_6_2_BASE:1.1.1.15
	OPENBSD_6_1:1.1.1.15.0.66
	OPENBSD_6_1_BASE:1.1.1.15
	OPENBSD_6_0:1.1.1.15.0.62
	OPENBSD_6_0_BASE:1.1.1.15
	OPENBSD_5_9:1.1.1.15.0.58
	OPENBSD_5_9_BASE:1.1.1.15
	OPENBSD_5_8:1.1.1.15.0.60
	OPENBSD_5_8_BASE:1.1.1.15
	OPENBSD_5_7:1.1.1.15.0.52
	OPENBSD_5_7_BASE:1.1.1.15
	OPENBSD_5_6:1.1.1.15.0.56
	OPENBSD_5_6_BASE:1.1.1.15
	OPENBSD_5_5:1.1.1.15.0.54
	OPENBSD_5_5_BASE:1.1.1.15
	OPENBSD_5_4:1.1.1.15.0.50
	OPENBSD_5_4_BASE:1.1.1.15
	OPENBSD_5_3:1.1.1.15.0.48
	OPENBSD_5_3_BASE:1.1.1.15
	OPENBSD_5_2:1.1.1.15.0.46
	OPENBSD_5_2_BASE:1.1.1.15
	OPENBSD_5_1_BASE:1.1.1.15
	OPENBSD_5_1:1.1.1.15.0.44
	OPENBSD_5_0:1.1.1.15.0.42
	OPENBSD_5_0_BASE:1.1.1.15
	OPENBSD_4_9:1.1.1.15.0.40
	OPENBSD_4_9_BASE:1.1.1.15
	OPENBSD_4_8:1.1.1.15.0.38
	OPENBSD_4_8_BASE:1.1.1.15
	OPENBSD_4_7:1.1.1.15.0.34
	OPENBSD_4_7_BASE:1.1.1.15
	OPENBSD_4_6:1.1.1.15.0.36
	OPENBSD_4_6_BASE:1.1.1.15
	OPENBSD_4_5:1.1.1.15.0.32
	OPENBSD_4_5_BASE:1.1.1.15
	OPENBSD_4_4:1.1.1.15.0.30
	OPENBSD_4_4_BASE:1.1.1.15
	OPENBSD_4_3:1.1.1.15.0.28
	OPENBSD_4_3_BASE:1.1.1.15
	OPENBSD_4_2:1.1.1.15.0.26
	OPENBSD_4_2_BASE:1.1.1.15
	OPENBSD_4_1:1.1.1.15.0.24
	OPENBSD_4_1_BASE:1.1.1.15
	OPENBSD_4_0:1.1.1.15.0.22
	OPENBSD_4_0_BASE:1.1.1.15
	OPENBSD_3_9:1.1.1.15.0.20
	OPENBSD_3_9_BASE:1.1.1.15
	OPENBSD_3_8:1.1.1.15.0.18
	OPENBSD_3_8_BASE:1.1.1.15
	OPENBSD_3_7:1.1.1.15.0.16
	OPENBSD_3_7_BASE:1.1.1.15
	OPENBSD_3_6:1.1.1.15.0.14
	OPENBSD_3_6_BASE:1.1.1.15
	OPENBSD_3_5:1.1.1.15.0.12
	OPENBSD_3_5_BASE:1.1.1.15
	OPENBSD_3_4:1.1.1.15.0.10
	OPENBSD_3_4_BASE:1.1.1.15
	OPENBSD_3_3:1.1.1.15.0.8
	OPENBSD_3_3_BASE:1.1.1.15
	OPENBSD_3_2:1.1.1.15.0.6
	OPENBSD_3_2_BASE:1.1.1.15
	OPENBSD_3_1:1.1.1.15.0.4
	OPENBSD_3_1_BASE:1.1.1.15
	OPENBSD_3_0:1.1.1.15.0.2
	OPENBSD_3_0_BASE:1.1.1.15
	cvs-1-11-1p1:1.1.1.15
	OPENBSD_2_9:1.1.1.14.0.2
	OPENBSD_2_9_BASE:1.1.1.14
	cvs-1-11:1.1.1.14
	OPENBSD_2_8:1.1.1.13.0.8
	OPENBSD_2_8_BASE:1.1.1.13
	OPENBSD_2_7:1.1.1.13.0.6
	OPENBSD_2_7_BASE:1.1.1.13
	OPENBSD_2_6:1.1.1.13.0.4
	OPENBSD_2_6_BASE:1.1.1.13
	cvs-1-10-7:1.1.1.13
	OPENBSD_2_5:1.1.1.13.0.2
	OPENBSD_2_5_BASE:1.1.1.13
	cvs-1-10-5:1.1.1.13
	OPENBSD_2_4:1.1.1.12.0.2
	OPENBSD_2_4_BASE:1.1.1.12
	cvs-1-10:1.1.1.12
	cvs-1-9-28:1.1.1.12
	OPENBSD_2_3:1.1.1.11.0.2
	OPENBSD_2_3_BASE:1.1.1.11
	cvs-1-9-26:1.1.1.11
	cvs-1-9-24:1.1.1.10
	OPENBSD_2_2:1.1.1.9.0.2
	OPENBSD_2_2_BASE:1.1.1.9
	cvs-1-9-10:1.1.1.9
	OPENBSD_2_1:1.1.1.8.0.2
	OPENBSD_2_1_BASE:1.1.1.8
	cvs-1-9-8:1.1.1.8
	cvs-1-9-6:1.1.1.7
	cvs-1-9-4:1.1.1.6
	cvs-1-9-2:1.1.1.6
	cvs-1-9:1.1.1.5
	OPENBSD_2_0:1.1.1.4.0.2
	OPENBSD_2_0_BASE:1.1.1.4
	cvs-1-8-1:1.1.1.4
	cvs-1-8:1.1.1.4
	cvs-1-7-2:1.1.1.3
	cvs-1-7-1:1.1.1.2
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	95.12.19.09.21.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.31;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.01.30.00.17.49;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.04.27.19.41.29;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.05.06.22.19.07;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	96.10.18.03.35.15;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.02.21.06.37.10;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	97.03.29.04.38.02;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	97.04.21.04.26.43;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	97.06.28.03.28.28;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	98.02.22.08.20.54;	author tholo;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	98.03.12.06.58.16;	author tholo;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	98.07.13.03.53.29;	author tholo;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	99.02.28.21.32.27;	author tholo;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2001.02.10.18.57.36;	author tholo;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2001.09.28.22.45.39;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $CVSid: @@(#)rcs.h 1.18 94/09/23 $	 */

/*
 * Copyright (c) 1992, Brian Berliner and Jeff Polk
 * Copyright (c) 1989-1992, Brian Berliner
 * 
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS 1.4 kit.
 * 
 * RCS source control definitions needed by rcs.c and friends
 */

#define	RCS		"rcs"
#define	RCS_CI		"ci"
#define	RCS_CO		"co"
#define	RCS_RLOG	"rlog"
#define	RCS_DIFF	"rcsdiff"
#define	RCS_MERGE	"merge"
#define	RCS_RCSMERGE	"rcsmerge"
#define	RCS_MERGE_PAT	"^>>>>>>> "	/* runs "grep" with this pattern */
#define	RCSEXT		",v"
#define RCSPAT		"*,v"
#define	RCSHEAD		"head"
#define	RCSBRANCH	"branch"
#define	RCSSYMBOLS	"symbols"
#define	RCSDATE		"date"
#define	RCSDESC		"desc"
#define RCSDEAD		"dead"
#define	DATEFORM	"%02d.%02d.%02d.%02d.%02d.%02d"
#define	SDATEFORM	"%d.%d.%d.%d.%d.%d"

/*
 * Opaque structure definitions used by RCS specific lookup routines
 */
#define VALID	0x1			/* flags field contains valid data */
#define	INATTIC	0x2			/* RCS file is located in the Attic */
#define PARTIAL 0x4			/* RCS file not completly parsed */

struct rcsnode
{
    int refcount;
    int flags;
    char *path;
    char *head;
    char *branch;
    char *symbols_data;
    List *symbols;
    List *versions;
    List *dates;
};

typedef struct rcsnode RCSNode;

struct rcsversnode
{
    char *version;
    char *date;
    char *next;
    int dead;
    List *branches;
};
typedef struct rcsversnode RCSVers;

/*
 * CVS reserves all even-numbered branches for its own use.  "magic" branches
 * (see rcs.c) are contained as virtual revision numbers (within symbolic
 * tags only) off the RCS_MAGIC_BRANCH, which is 0.  CVS also reserves the
 * ".1" branch for vendor revisions.  So, if you do your own branching, you
 * should limit your use to odd branch numbers starting at 3.
 */
#define	RCS_MAGIC_BRANCH	0

/*
 * exported interfaces
 */
List *RCS_parsefiles PROTO((List * files, char *xrepos));
RCSNode *RCS_parse PROTO((const char *file, const char *repos));
RCSNode *RCS_parsercsfile PROTO((char *rcsfile));
char *RCS_check_kflag PROTO((const char *arg));
char *RCS_getdate PROTO((RCSNode * rcs, char *date, int force_tag_match));
char *RCS_gettag PROTO((RCSNode * rcs, char *tag, int force_tag_match));
char *RCS_getversion PROTO((RCSNode * rcs, char *tag, char *date,
		      int force_tag_match));
char *RCS_magicrev PROTO((RCSNode *rcs, char *rev));
int RCS_isbranch PROTO((char *file, char *rev, List *srcfiles));
int RCS_nodeisbranch PROTO((char *rev, RCSNode *rcs));
char *RCS_whatbranch PROTO((char *file, char *tag, List *srcfiles));
char *RCS_head PROTO((RCSNode * rcs));
int RCS_datecmp PROTO((char *date1, char *date2));
time_t RCS_getrevtime PROTO((RCSNode * rcs, char *rev, char *date, int fudge));
List *RCS_symbols PROTO((RCSNode *rcs));
void RCS_check_tag PROTO((const char *tag));
void freercsnode PROTO((RCSNode ** rnodep));
void RCS_addnode PROTO((const char *file, RCSNode *rcs, List *list));
char *RCS_getbranch PROTO((RCSNode * rcs, char *tag, int force_tag_match));

#ifdef DEATH_SUPPORT
int RCS_isdead PROTO((RCSNode *, const char *));
#endif
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Upgrade to 1.7.1 snapshot
@
text
@a27 5
#define RCSEXPAND	"expand"

/* Used by the version of death support which results if you define
   DEATH_SUPPORT and not DEATH_STATE.  Requires a hacked up RCS.  Considered
   obsolete.  */
a28 1

a46 1
    char *expand;
d81 1
a81 2
char *RCS_gettag PROTO((RCSNode * rcs, char *symtag, int force_tag_match,
			int return_both));
d83 1
a83 1
		      int force_tag_match, int return_both));
@


1.1.1.3
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d18 1
d30 3
a32 4
/* Used by the version of death support which resulted from old
   versions of CVS (e.g. 1.5 if you define DEATH_SUPPORT and not
   DEATH_STATE).  Only a hacked up RCS (used by those old versions of
   CVS) will put this into RCS files.  Considered obsolete.  */
d56 1
d105 1
d107 1
@


1.1.1.4
log
@New CVS release from Cyclic Software
@
text
@a63 1
    char *author;
d82 1
d92 3
a94 3
int RCS_isbranch PROTO((RCSNode *rcs, const char *rev));
int RCS_nodeisbranch PROTO((RCSNode *rcs, const char *tag));
char *RCS_whatbranch PROTO((RCSNode *rcs, const char *tag));
d101 1
a104 1
char *RCS_getexpand PROTO ((RCSNode *));
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@d16 1
a43 1
#define NODELTA 0x8			/* delta_pos no longer valid */
a55 2
    long delta_pos;
    List *other;
a67 1
    List *other;
a84 1
void RCS_fully_parse PROTO((RCSNode *));
d88 1
a88 1
			int *simple_tag));
d90 1
a90 1
		      int force_tag_match, int *simple_tag));
a104 6
int RCS_checkout PROTO ((RCSNode *, char *, char *, char *, char *, char *));
int RCS_settag PROTO ((RCSNode *, const char *, const char *));
int RCS_deltag PROTO ((RCSNode *, const char *, int));
int RCS_setbranch PROTO((RCSNode *, const char *));
int RCS_lock PROTO ((RCSNode *, const char *, int));
int RCS_unlock PROTO ((RCSNode *, const char *, int));
@


1.1.1.6
log
@New release from Cyclic Software
@
text
@d1 2
d18 1
a18 4

/* String which indicates a conflict if it occurs at the start of a line.  */
#define	RCS_MERGE_PAT ">>>>>>> "

@


1.1.1.7
log
@Latest release from Cyclic Software
@
text
@a49 5

    /* File name of the RCS file.  This is not necessarily the name
       as specified by the user, but it is a name which can be passed to
       system calls and a name which is OK to print in error messages
       (the various names might differ in case).  */
a50 1

@


1.1.1.8
log
@Latest release from Cyclic Software
@
text
@d13 1
a73 1
    char *state;
a89 3
/* The type of a function passed to RCS_checkout.  */
typedef void (*RCSCHECKOUTPROC) PROTO ((void *, const char *, size_t));

d116 1
a116 3
int RCS_checkout PROTO ((RCSNode *, char *, char *, char *, char *, char *,
			 RCSCHECKOUTPROC, void *));
int RCS_cmp_file PROTO ((RCSNode *, char *, char *, const char *));
@


1.1.1.9
log
@Latest version from Cyclic Software
@
text
@a126 6
int rcs_change_text PROTO ((const char *, char *, size_t, const char *,
			    size_t, char **, size_t *));

/* From import.c.  */
extern int add_rcs_file PROTO ((char *, char *, char *, char *,
				char *, char *, int, char **, FILE *));
@


1.1.1.10
log
@Latest version from Cyclic
@
text
@d6 1
a6 1
 * specified in the README file that comes with the CVS source distribution.
d11 5
d43 1
a43 5

/* All the "char *" fields in RCSNode, Deltatext, and RCSVers are
   '\0'-terminated (except "text" in Deltatext).  This means that we
   can't deal with fields containing '\0', which is a limitation that
   RCS does not have.  Would be nice to fix this some day.  */
a46 4
    /* Reference count for this structure.  Used to deal with the
       fact that there might be a pointer from the Vers_TS or might
       not.  Callers who increment this field are responsible for
       calling freercsnode when they are done with their reference.  */
a47 2

    /* Flags (INATTIC, PARTIAL, &c), see above.  */
a55 1
    /* Value for head keyword from RCS header, or NULL if empty.  */
a56 2

    /* Value for branch keyword from RCS header, or NULL if omitted.  */
a57 3

    /* Raw data on symbolic revisions.  The first time that RCS_symbols is
       called, we parse these into ->symbols, and free ->symbols_data.  */
a58 2

    /* Value for expand keyword from RCS header, or NULL if omitted.  */
a59 3

    /* List of nodes, the key of which is the symbolic name and the data
       of which is the numeric revision that it corresponds to (malloc'd).  */
a60 3

    /* List of nodes (type RCSVERS), the key of which the numeric revision
       number, and the data of which is an RCSVers * for the revision.  */
a61 25

    /* Value for access keyword from RCS header, or NULL if empty.
       FIXME: RCS_delaccess would also seem to use "" for empty.  We
       should pick one or the other.  */
    char *access;

    /* Raw data on locked revisions.  The first time that RCS_getlocks is
       called, we parse these into ->locks, and free ->locks_data.  */
    char *locks_data;

    /* List of nodes, the key of which is the numeric revision and the
       data of which is the user that it corresponds to (malloc'd).  */
    List *locks;

    /* Set for the strict keyword from the RCS header.  */
    int strict_locks;

    /* Value for the comment keyword from RCS header (comment leader), or
       NULL if omitted.  */
    char *comment;

    /* Value for the desc field in the RCS file, or NULL if empty.  */
    char *desc;

    /* File offset of the first deltatext node, so we can seek there.  */
a62 4

    /* Newphrases from the RCS header.  List of nodes, the key of which
       is the "id" which introduces the newphrase, and the value of which
       is the value from the newphrase.  */
a67 21
struct deltatext {
    char *version;

    /* Log message, or NULL if we do not intend to change the log message
       (that is, RCS_copydeltas should just use the log message from the
       file).  */
    char *log;

    /* Change text, or NULL if we do not intend to change the change text
       (that is, RCS_copydeltas should just use the change text from the
       file).  Note that it is perfectly legal to have log be NULL and
       text non-NULL, or vice-versa.  */
    char *text;
    size_t len;

    /* Newphrase fields from deltatext nodes.  FIXME: duplicates the
       other field in the rcsversnode, I think.  */
    List *other;
};
typedef struct deltatext Deltatext;

a69 1
    /* Duplicate of the key by which this structure is indexed.  */
a70 1

a75 2
    int outdated;
    Deltatext *text;
a76 4
    /* Newphrase fields from deltatext nodes.  Also contains ";add" and
       ";delete" magic fields (see rcs.c, log.c).  I think this is
       only used by log.c (where it looks up "log").  Duplicates the
       other field in struct deltatext, I think.  */
a77 2
    /* Newphrase fields from delta nodes.  */
    List *other_delta;
a98 2
void RCS_reparsercsfile PROTO((RCSNode *, FILE **));

a113 1
List *RCS_getlocks PROTO((RCSNode *rcs));
a120 2
int RCS_checkin PROTO ((RCSNode *rcs, char *workfile, char *message,
			char *rev, int flags));
d123 1
a123 1
int RCS_deltag PROTO ((RCSNode *, const char *));
a126 5
int RCS_delete_revs PROTO ((RCSNode *, char *, char *, int));
void RCS_addaccess PROTO ((RCSNode *, char *));
void RCS_delaccess PROTO ((RCSNode *, char *));
char *RCS_getaccess PROTO ((RCSNode *));
void RCS_rewrite PROTO ((RCSNode *, Deltatext *, char *));
a128 1
char *make_file_label PROTO ((char *, char *, RCSNode *));
d131 2
a132 3
extern int add_rcs_file PROTO ((char *, char *, char *, char *, char *,
				char *, char *, int, char **,
				char *, size_t, FILE *));
@


1.1.1.11
log
@Latest version from Cyclic
@
text
@a171 4
#ifdef __STDC__
struct rcsbuffer;
#endif

d178 1
a178 1
void RCS_reparsercsfile PROTO((RCSNode *, FILE **, struct rcsbuffer *));
a218 2

extern int preserve_perms;
@


1.1.1.12
log
@Latest version from Cyclic
@
text
@a156 4
#ifdef PRESERVE_PERMISSIONS_SUPPORT
    /* Hard link information for each revision. */
    List *hardlinks;
#endif
a187 3
int RCS_exist_rev PROTO((RCSNode *rcs, char *rev));
int RCS_exist_tag PROTO((RCSNode *rcs, char *tag));
char *RCS_tag2rev PROTO((RCSNode *rcs, char *tag));
a198 1
int RCS_valid_rev PROTO ((char *rev));
a201 1
char *RCS_branch_head PROTO ((RCSNode *rcs, char *rev));
@


1.1.1.13
log
@Latest version from Cyclic
@
text
@a186 1
extern int RCS_setattic PROTO ((RCSNode *, int));
a213 1
void RCS_setexpand PROTO ((RCSNode *, char *));
@


1.1.1.14
log
@Latest from Cyclic Software
@
text
@d11 2
a12 4
/* Strings which indicate a conflict if they occur at the start of a line.  */
#define	RCS_MERGE_PAT_1 "<<<<<<< "
#define	RCS_MERGE_PAT_2 "=======\n"
#define	RCS_MERGE_PAT_3 ">>>>>>> "
a229 1
RETSIGTYPE rcs_cleanup PROTO ((void));
a230 1
void RCS_abandon PROTO ((RCSNode *));
@


1.1.1.15
log
@Latest from Cyclic Software
@
text
@a181 3
/* What RCS_deltas is supposed to do.  */
enum rcs_delta_op {RCS_ANNOTATE, RCS_FETCH};

d226 2
a227 2
int RCS_lock PROTO ((RCSNode *, char *, int));
int RCS_unlock PROTO ((RCSNode *, char *, int));
a236 3
void RCS_deltas PROTO ((RCSNode *, FILE *, struct rcsbuffer *, char *,
			enum rcs_delta_op, char **, size_t *,
			char **, size_t *));
@


