head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.10.0.66
	OPENBSD_6_1_BASE:1.1.1.10
	OPENBSD_6_0:1.1.1.10.0.64
	OPENBSD_6_0_BASE:1.1.1.10
	OPENBSD_5_9:1.1.1.10.0.60
	OPENBSD_5_9_BASE:1.1.1.10
	OPENBSD_5_8:1.1.1.10.0.62
	OPENBSD_5_8_BASE:1.1.1.10
	OPENBSD_5_7:1.1.1.10.0.54
	OPENBSD_5_7_BASE:1.1.1.10
	OPENBSD_5_6:1.1.1.10.0.58
	OPENBSD_5_6_BASE:1.1.1.10
	OPENBSD_5_5:1.1.1.10.0.56
	OPENBSD_5_5_BASE:1.1.1.10
	OPENBSD_5_4:1.1.1.10.0.52
	OPENBSD_5_4_BASE:1.1.1.10
	OPENBSD_5_3:1.1.1.10.0.50
	OPENBSD_5_3_BASE:1.1.1.10
	OPENBSD_5_2:1.1.1.10.0.48
	OPENBSD_5_2_BASE:1.1.1.10
	OPENBSD_5_1_BASE:1.1.1.10
	OPENBSD_5_1:1.1.1.10.0.46
	OPENBSD_5_0:1.1.1.10.0.44
	OPENBSD_5_0_BASE:1.1.1.10
	OPENBSD_4_9:1.1.1.10.0.42
	OPENBSD_4_9_BASE:1.1.1.10
	OPENBSD_4_8:1.1.1.10.0.40
	OPENBSD_4_8_BASE:1.1.1.10
	OPENBSD_4_7:1.1.1.10.0.36
	OPENBSD_4_7_BASE:1.1.1.10
	OPENBSD_4_6:1.1.1.10.0.38
	OPENBSD_4_6_BASE:1.1.1.10
	OPENBSD_4_5:1.1.1.10.0.34
	OPENBSD_4_5_BASE:1.1.1.10
	OPENBSD_4_4:1.1.1.10.0.32
	OPENBSD_4_4_BASE:1.1.1.10
	OPENBSD_4_3:1.1.1.10.0.30
	OPENBSD_4_3_BASE:1.1.1.10
	OPENBSD_4_2:1.1.1.10.0.28
	OPENBSD_4_2_BASE:1.1.1.10
	OPENBSD_4_1:1.1.1.10.0.26
	OPENBSD_4_1_BASE:1.1.1.10
	OPENBSD_4_0:1.1.1.10.0.24
	OPENBSD_4_0_BASE:1.1.1.10
	OPENBSD_3_9:1.1.1.10.0.22
	OPENBSD_3_9_BASE:1.1.1.10
	OPENBSD_3_8:1.1.1.10.0.20
	OPENBSD_3_8_BASE:1.1.1.10
	OPENBSD_3_7:1.1.1.10.0.18
	OPENBSD_3_7_BASE:1.1.1.10
	OPENBSD_3_6:1.1.1.10.0.16
	OPENBSD_3_6_BASE:1.1.1.10
	OPENBSD_3_5:1.1.1.10.0.14
	OPENBSD_3_5_BASE:1.1.1.10
	OPENBSD_3_4:1.1.1.10.0.12
	OPENBSD_3_4_BASE:1.1.1.10
	OPENBSD_3_3:1.1.1.10.0.10
	OPENBSD_3_3_BASE:1.1.1.10
	OPENBSD_3_2:1.1.1.10.0.8
	OPENBSD_3_2_BASE:1.1.1.10
	OPENBSD_3_1:1.1.1.10.0.6
	OPENBSD_3_1_BASE:1.1.1.10
	OPENBSD_3_0:1.1.1.10.0.4
	OPENBSD_3_0_BASE:1.1.1.10
	cvs-1-11-1p1:1.1.1.10
	OPENBSD_2_9:1.1.1.10.0.2
	OPENBSD_2_9_BASE:1.1.1.10
	cvs-1-11:1.1.1.10
	OPENBSD_2_8:1.1.1.9.0.8
	OPENBSD_2_8_BASE:1.1.1.9
	OPENBSD_2_7:1.1.1.9.0.6
	OPENBSD_2_7_BASE:1.1.1.9
	OPENBSD_2_6:1.1.1.9.0.4
	OPENBSD_2_6_BASE:1.1.1.9
	cvs-1-10-7:1.1.1.9
	OPENBSD_2_5:1.1.1.9.0.2
	OPENBSD_2_5_BASE:1.1.1.9
	cvs-1-10-5:1.1.1.9
	OPENBSD_2_4:1.1.1.8.0.4
	OPENBSD_2_4_BASE:1.1.1.8
	cvs-1-10:1.1.1.8
	cvs-1-9-28:1.1.1.8
	OPENBSD_2_3:1.1.1.8.0.2
	OPENBSD_2_3_BASE:1.1.1.8
	cvs-1-9-26:1.1.1.8
	cvs-1-9-24:1.1.1.7
	OPENBSD_2_2:1.1.1.6.0.4
	OPENBSD_2_2_BASE:1.1.1.6
	cvs-1-9-10:1.1.1.6
	OPENBSD_2_1:1.1.1.6.0.2
	OPENBSD_2_1_BASE:1.1.1.6
	cvs-1-9-8:1.1.1.6
	cvs-1-9-6:1.1.1.6
	cvs-1-9-4:1.1.1.6
	cvs-1-9-2:1.1.1.5
	cvs-1-9:1.1.1.4
	OPENBSD_2_0:1.1.1.3.0.2
	OPENBSD_2_0_BASE:1.1.1.3
	cvs-1-8-1:1.1.1.3
	cvs-1-8:1.1.1.3
	cvs-1-7-2:1.1.1.3
	cvs-1-7-1:1.1.1.2
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	95.12.19.09.21.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.33;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.01.30.00.18.17;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.04.27.19.42.04;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.10.18.03.35.43;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.02.21.06.37.41;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.03.18.01.56.16;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	98.02.22.08.21.23;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	98.03.12.06.58.57;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.02.28.21.33.12;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2001.02.10.18.57.44;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 1992, Brian Berliner
 * 
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS 1.4 kit.
 * 
 * A simple ndbm-emulator for CVS.  It parses a text file of the format:
 * 
 * key	value
 * 
 * at dbm_open time, and loads the entire file into memory.  As such, it is
 * probably only good for fairly small modules files.  Ours is about 30K in
 * size, and this code works fine.
 */

#include "cvs.h"

#ifdef MY_NDBM

#ifndef lint
static const char rcsid[] = "$CVSid: @@(#)myndbm.c 1.7 94/09/23 $";
USE(rcsid);
#endif

static void mydbm_load_file ();

/* ARGSUSED */
DBM *
mydbm_open (file, flags, mode)
    char *file;
    int flags;
    int mode;
{
    FILE *fp;
    DBM *db;

    if ((fp = fopen (file, "r")) == NULL)
	return ((DBM *) 0);

    db = (DBM *) xmalloc (sizeof (*db));
    db->dbm_list = getlist ();

    mydbm_load_file (fp, db->dbm_list);
    (void) fclose (fp);
    return (db);
}

void
mydbm_close (db)
    DBM *db;
{
    dellist (&db->dbm_list);
    free ((char *) db);
}

datum
mydbm_fetch (db, key)
    DBM *db;
    datum key;
{
    Node *p;
    char *s;
    datum val;

    /* make sure it's null-terminated */
    s = xmalloc (key.dsize + 1);
    (void) strncpy (s, key.dptr, key.dsize);
    s[key.dsize] = '\0';

    p = findnode (db->dbm_list, s);
    if (p)
    {
	val.dptr = p->data;
	val.dsize = strlen (p->data);
    }
    else
    {
	val.dptr = (char *) NULL;
	val.dsize = 0;
    }
    free (s);
    return (val);
}

datum
mydbm_firstkey (db)
    DBM *db;
{
    Node *head, *p;
    datum key;

    head = db->dbm_list->list;
    p = head->next;
    if (p != head)
    {
	key.dptr = p->key;
	key.dsize = strlen (p->key);
    }
    else
    {
	key.dptr = (char *) NULL;
	key.dsize = 0;
    }
    db->dbm_next = p->next;
    return (key);
}

datum
mydbm_nextkey (db)
    DBM *db;
{
    Node *head, *p;
    datum key;

    head = db->dbm_list->list;
    p = db->dbm_next;
    if (p != head)
    {
	key.dptr = p->key;
	key.dsize = strlen (p->key);
    }
    else
    {
	key.dptr = (char *) NULL;
	key.dsize = 0;
    }
    db->dbm_next = p->next;
    return (key);
}

static void
mydbm_load_file (fp, list)
    FILE *fp;
    List *list;
{
    char line[MAXLINELEN], value[MAXLINELEN];
    char *cp, *vp;
    int len, cont;

    for (cont = 0; fgets (line, sizeof (line), fp) != NULL;)
    {
	if ((cp = strrchr (line, '\n')) != NULL)
	    *cp = '\0';			/* strip the newline */

	/*
	 * Add the line to the value, at the end if this is a continuation
	 * line; otherwise at the beginning, but only after any trailing
	 * backslash is removed.
	 */
	vp = value;
	if (cont)
	    vp += strlen (value);

	/*
	 * See if the line we read is a continuation line, and strip the
	 * backslash if so.
	 */
	len = strlen (line);
	if (len > 0)
	    cp = &line[len - 1];
	else
	    cp = line;
	if (*cp == '\\')
	{
	    cont = 1;
	    *cp = '\0';
	}
	else
	{
	    cont = 0;
	}
	(void) strcpy (vp, line);
	if (value[0] == '#')
	    continue;			/* comment line */
	vp = value;
	while (*vp && isspace (*vp))
	    vp++;
	if (*vp == '\0')
	    continue;			/* empty line */

	/*
	 * If this was not a continuation line, add the entry to the database
	 */
	if (!cont)
	{
	    Node *p = getnode ();
	    char *kp;

	    kp = vp;
	    while (*vp && !isspace (*vp))
		vp++;
	    *vp++ = '\0';		/* NULL terminate the key */
	    p->type = NDBMNODE;
	    p->key = xstrdup (kp);
	    while (*vp && isspace (*vp))
		vp++;			/* skip whitespace to value */
	    if (*vp == '\0')
	    {
		error (0, 0, "warning: NULL value for key `%s'", p->key);
		freenode (p);
		continue;
	    }
	    p->data = xstrdup (vp);
	    if (addnode (list, p) == -1)
	    {
		error (0, 0, "duplicate key found for `%s'", p->key);
		freenode (p);
	    }
	}
    }
}

#endif				/* MY_NDBM */
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Upgrade to 1.7.1 snapshot
@
text
@a15 1
#include <assert.h>
a16 1
#include "getline.h"
d37 1
a37 2
    fp = fopen (file, "r");
    if (fp == NULL && !(existence_error (errno) && (flags & O_CREAT)))
a41 2
    db->modified = 0;
    db->name = xstrdup (file);
d43 2
a44 6
    if (fp != NULL)
    {
	mydbm_load_file (fp, db->dbm_list);
	if (fclose (fp) < 0)
	    error (0, errno, "cannot close %s", file);
    }
a47 15
static int write_item PROTO ((Node *, void *));

static int
write_item (node, data)
    Node *node;
    void *data;
{
    FILE *fp = (FILE *)data;
    fputs (node->key, fp);
    fputs (" ", fp);
    fputs (node->data, fp);
    fputs ("\n", fp);
    return 0;
}

a51 11
    if (db->modified)
    {
	FILE *fp;
	fp = fopen (db->name, "w");
	if (fp == NULL)
	    error (1, errno, "cannot write %s", db->name);
	walklist (db->dbm_list, write_item, (void *)fp);
	if (fclose (fp) < 0)
	    error (0, errno, "cannot close %s", db->name);
    }
    free (db->name);
a130 34
/* Note: only updates the in-memory copy, which is written out at
   mydbm_close time.  Note: Also differs from DBM in that on duplication,
   it gives a warning, rather than either DBM_INSERT or DBM_REPLACE
   behavior.  */
int
mydbm_store (db, key, value, flags)
    DBM *db;
    datum key;
    datum value;
    int flags;
{
    Node *node;

    node = getnode ();
    node->type = NDBMNODE;

    node->key = xmalloc (key.dsize + 1);
    strncpy (node->key, key.dptr, key.dsize);
    node->key[key.dsize] = '\0';

    node->data = xmalloc (value.dsize + 1);
    strncpy (node->data, value.dptr, value.dsize);
    node->data[value.dsize] = '\0';

    db->modified = 1;
    if (addnode (db->dbm_list, node) == -1)
    {
	error (0, 0, "attempt to insert duplicate key `%s'", node->key);
	freenode (node);
	return 0;
    }
    return 0;
}

d136 1
a136 4
    char *line = NULL;
    size_t line_len;
    /* FIXME: arbitrary limit.  */
    char value[MAXLINELEN];
d140 1
a140 1
    for (cont = 0; getline (&line, &line_len, fp) >= 0;)
a210 1
    free (line);
@


1.1.1.3
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d22 5
d39 1
a39 1
    fp = fopen (file, FOPEN_BINARY_READ);
d68 1
a68 1
    fputs ("\012", fp);
d79 1
a79 1
	fp = fopen (db->name, FOPEN_BINARY_WRITE);
d214 1
a214 1
	if ((cp = strrchr (line, '\012')) != NULL)
a215 7
	cp = line + strlen (line);
	if (cp > line && cp[-1] == '\015')
	    /* If the file (e.g. modules) was written on an NT box, it will
	       contain CRLF at the ends of lines.  Strip them (we can't do
	       this by opening the file in text mode because we might be
	       running on unix).  */
	    cp[-1] = '\0';	    
@


1.1.1.4
log
@New release from Cyclic Software
@
text
@d34 1
a34 1
    fp = CVS_FOPEN (file, FOPEN_BINARY_READ);
d74 1
a74 1
	fp = CVS_FOPEN (db->name, FOPEN_BINARY_WRITE);
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@d22 1
a22 1
static void mydbm_load_file PROTO ((FILE *, List *));
@


1.1.1.6
log
@New release from Cyclic Software
@
text
@d202 2
a203 2
    char *value;
    size_t value_allocated;
a206 3
    value_allocated = 1;
    value = xmalloc (value_allocated);

d224 3
a226 2
	if (!cont)
	    value[0] = '\0';
d246 1
a246 5
	expand_string (&value,
		       &value_allocated,
		       strlen (value) + strlen (line) + 5);
	strcat (value, line);

a285 1
    free (value);
@


1.1.1.7
log
@Latest version from Cyclic
@
text
@d5 1
a5 1
 * specified in the README file that comes with the CVS source distribution.
a23 2
/* Returns NULL on error in which case errno has been set to indicate
   the error.  Can also call error() itself.  */
a205 1
    int line_length;
d210 1
a210 1
    for (cont = 0; (line_length = getline (&line, &line_len, fp)) >= 0;)
a290 4
    if (line_length < 0 && !feof (fp))
	/* FIXME: should give the name of the file.  */
	error (0, errno, "cannot read file in mydbm_load_file");

@


1.1.1.8
log
@Latest version from Cyclic
@
text
@d203 1
a203 1
    size_t line_size;
d207 1
a207 1
    int cont;
d213 1
a213 2
    cont = 0;
    while ((line_length = getstr (&line, &line_size, fp, '\012', 0)) >= 0)
d215 4
a218 8
	if (line_length > 0 && line[line_length - 1] == '\012')
	{
	    /* Strip the newline.  */
	    --line_length;
	    line[line_length] = '\0';
	}
	if (line_length > 0 && line[line_length - 1] == '\015')
	{
d223 1
a223 3
	    --line_length;
	    line[line_length] = '\0';
	}
d237 3
a239 2
	if (line_length > 0)
	    cp = &line[line_length - 1];
a245 1
	    --line_length;
d253 1
a253 1
		       strlen (value) + line_length + 5);
@


1.1.1.9
log
@Latest version from Cyclic
@
text
@d266 1
a266 1
	while (*vp && isspace ((unsigned char) *vp))
d280 1
a280 1
	    while (*vp && !isspace ((unsigned char) *vp))
d285 1
a285 1
	    while (*vp && isspace ((unsigned char) *vp))
@


1.1.1.10
log
@Latest from Cyclic Software
@
text
@d214 1
a214 2
    while ((line_length = 
            getstr (&line, &line_size, fp, '\012', 0, GETLINE_NO_LIMIT)) >= 0)
@


