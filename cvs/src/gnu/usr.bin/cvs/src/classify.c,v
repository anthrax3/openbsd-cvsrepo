head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.10.0.62
	OPENBSD_6_0_BASE:1.1.1.10
	OPENBSD_5_9:1.1.1.10.0.58
	OPENBSD_5_9_BASE:1.1.1.10
	OPENBSD_5_8:1.1.1.10.0.60
	OPENBSD_5_8_BASE:1.1.1.10
	OPENBSD_5_7:1.1.1.10.0.52
	OPENBSD_5_7_BASE:1.1.1.10
	OPENBSD_5_6:1.1.1.10.0.56
	OPENBSD_5_6_BASE:1.1.1.10
	OPENBSD_5_5:1.1.1.10.0.54
	OPENBSD_5_5_BASE:1.1.1.10
	OPENBSD_5_4:1.1.1.10.0.50
	OPENBSD_5_4_BASE:1.1.1.10
	OPENBSD_5_3:1.1.1.10.0.48
	OPENBSD_5_3_BASE:1.1.1.10
	OPENBSD_5_2:1.1.1.10.0.46
	OPENBSD_5_2_BASE:1.1.1.10
	OPENBSD_5_1_BASE:1.1.1.10
	OPENBSD_5_1:1.1.1.10.0.44
	OPENBSD_5_0:1.1.1.10.0.42
	OPENBSD_5_0_BASE:1.1.1.10
	OPENBSD_4_9:1.1.1.10.0.40
	OPENBSD_4_9_BASE:1.1.1.10
	OPENBSD_4_8:1.1.1.10.0.38
	OPENBSD_4_8_BASE:1.1.1.10
	OPENBSD_4_7:1.1.1.10.0.34
	OPENBSD_4_7_BASE:1.1.1.10
	OPENBSD_4_6:1.1.1.10.0.36
	OPENBSD_4_6_BASE:1.1.1.10
	OPENBSD_4_5:1.1.1.10.0.32
	OPENBSD_4_5_BASE:1.1.1.10
	OPENBSD_4_4:1.1.1.10.0.30
	OPENBSD_4_4_BASE:1.1.1.10
	OPENBSD_4_3:1.1.1.10.0.28
	OPENBSD_4_3_BASE:1.1.1.10
	OPENBSD_4_2:1.1.1.10.0.26
	OPENBSD_4_2_BASE:1.1.1.10
	OPENBSD_4_1:1.1.1.10.0.24
	OPENBSD_4_1_BASE:1.1.1.10
	OPENBSD_4_0:1.1.1.10.0.22
	OPENBSD_4_0_BASE:1.1.1.10
	OPENBSD_3_9:1.1.1.10.0.20
	OPENBSD_3_9_BASE:1.1.1.10
	OPENBSD_3_8:1.1.1.10.0.18
	OPENBSD_3_8_BASE:1.1.1.10
	OPENBSD_3_7:1.1.1.10.0.16
	OPENBSD_3_7_BASE:1.1.1.10
	OPENBSD_3_6:1.1.1.10.0.14
	OPENBSD_3_6_BASE:1.1.1.10
	OPENBSD_3_5:1.1.1.10.0.12
	OPENBSD_3_5_BASE:1.1.1.10
	OPENBSD_3_4:1.1.1.10.0.10
	OPENBSD_3_4_BASE:1.1.1.10
	OPENBSD_3_3:1.1.1.10.0.8
	OPENBSD_3_3_BASE:1.1.1.10
	OPENBSD_3_2:1.1.1.10.0.6
	OPENBSD_3_2_BASE:1.1.1.10
	OPENBSD_3_1:1.1.1.10.0.4
	OPENBSD_3_1_BASE:1.1.1.10
	OPENBSD_3_0:1.1.1.10.0.2
	OPENBSD_3_0_BASE:1.1.1.10
	cvs-1-11-1p1:1.1.1.10
	OPENBSD_2_9:1.1.1.9.0.12
	OPENBSD_2_9_BASE:1.1.1.9
	cvs-1-11:1.1.1.9
	OPENBSD_2_8:1.1.1.9.0.10
	OPENBSD_2_8_BASE:1.1.1.9
	OPENBSD_2_7:1.1.1.9.0.8
	OPENBSD_2_7_BASE:1.1.1.9
	OPENBSD_2_6:1.1.1.9.0.6
	OPENBSD_2_6_BASE:1.1.1.9
	cvs-1-10-7:1.1.1.9
	OPENBSD_2_5:1.1.1.9.0.4
	OPENBSD_2_5_BASE:1.1.1.9
	cvs-1-10-5:1.1.1.9
	OPENBSD_2_4:1.1.1.9.0.2
	OPENBSD_2_4_BASE:1.1.1.9
	cvs-1-10:1.1.1.9
	cvs-1-9-28:1.1.1.9
	OPENBSD_2_3:1.1.1.8.0.2
	OPENBSD_2_3_BASE:1.1.1.8
	cvs-1-9-26:1.1.1.8
	cvs-1-9-24:1.1.1.7
	OPENBSD_2_2:1.1.1.6.0.4
	OPENBSD_2_2_BASE:1.1.1.6
	cvs-1-9-10:1.1.1.6
	OPENBSD_2_1:1.1.1.6.0.2
	OPENBSD_2_1_BASE:1.1.1.6
	cvs-1-9-8:1.1.1.6
	cvs-1-9-6:1.1.1.6
	cvs-1-9-4:1.1.1.5
	cvs-1-9-2:1.1.1.5
	cvs-1-9:1.1.1.4
	OPENBSD_2_0:1.1.1.3.0.2
	OPENBSD_2_0_BASE:1.1.1.3
	cvs-1-8-1:1.1.1.3
	cvs-1-8:1.1.1.3
	cvs-1-7-2:1.1.1.2
	cvs-1-7-1:1.1.1.1
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	95.12.19.09.21.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.31;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.04.27.19.41.40;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.05.06.22.19.19;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.10.18.03.35.24;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.02.21.06.37.20;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.03.29.04.38.07;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	98.02.22.08.21.03;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	98.03.12.06.58.31;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	98.07.13.03.53.43;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2001.09.28.22.45.37;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 1992, Brian Berliner and Jeff Polk
 * Copyright (c) 1989-1992, Brian Berliner
 * 
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS 1.4 kit.
 * 
 */

#include "cvs.h"

#ifndef lint
static const char rcsid[] = "$CVSid: @@(#)classify.c 1.17 94/10/07 $";
USE(rcsid);
#endif

#ifdef SERVER_SUPPORT
static void sticky_ck PROTO((char *file, int aflag, Vers_TS * vers,
			     List * entries,
			     char *repository, char *update_dir));
#else
static void sticky_ck PROTO((char *file, int aflag, Vers_TS * vers, List * entries));
#endif

/*
 * Classify the state of a file
 */
Ctype
Classify_File (file, tag, date, options, force_tag_match, aflag, repository,
	       entries, srcfiles, versp, update_dir, pipeout)
    char *file;
    char *tag;
    char *date;
    char *options;
    int force_tag_match;
    int aflag;
    char *repository;
    List *entries;
    List *srcfiles;
    Vers_TS **versp;
    char *update_dir;
    int pipeout;
{
    Vers_TS *vers;
    Ctype ret;
    char *fullname;

    fullname = xmalloc (strlen (update_dir) + strlen (file) + 10);
    if (update_dir[0] == '\0')
	strcpy (fullname, file);
    else
	sprintf (fullname, "%s/%s", update_dir, file);

    /* get all kinds of good data about the file */
    vers = Version_TS (repository, options, tag, date, file,
		       force_tag_match, 0, entries, srcfiles);

    if (vers->vn_user == NULL)
    {
	/* No entry available, ts_rcs is invalid */
	if (vers->vn_rcs == NULL)
	{
	    /* there is no RCS file either */
	    if (vers->ts_user == NULL)
	    {
		/* there is no user file */
		if (!force_tag_match || !(vers->tag || vers->date))
		    if (!really_quiet)
			error (0, 0, "nothing known about %s", fullname);
		ret = T_UNKNOWN;
	    }
	    else
	    {
		/* there is a user file */
		if (!force_tag_match || !(vers->tag || vers->date))
		    if (!really_quiet)
			error (0, 0, "use `cvs add' to create an entry for %s",
			       fullname);
		ret = T_UNKNOWN;
	    }
	}
#ifdef DEATH_SUPPORT
	else if (RCS_isdead (vers->srcfile, vers->vn_rcs))
	{
	    if (vers->ts_user == NULL)
		/*
		 * Logically seems to me this should be T_UPTODATE.
		 * But the joining code in update.c seems to expect
		 * T_CHECKOUT, and that is what has traditionally been
		 * returned for this case.
		 */
		ret = T_CHECKOUT;
	    else
	    {
		error (0, 0, "use `cvs add' to create an entry for %s",
		       fullname);
		ret = T_UNKNOWN;
	    }
	}
#endif
	else
	{
	    /* there is an rcs file */

	    if (vers->ts_user == NULL)
	    {
		/* There is no user file; needs checkout */
		ret = T_CHECKOUT;
	    }
	    else
	    {
		if (pipeout)
		{
		    /*
		     * The user file doesn't necessarily have anything
		     * to do with this.
		     */
		    ret = T_CHECKOUT;
		}
		/*
		 * There is a user file; print a warning and add it to the
		 * conflict list, only if it is indeed different from what we
		 * plan to extract
		 */
		else if (No_Difference (file, vers, entries,
					repository, update_dir))
		{
		    /* the files were different so it is a conflict */
		    if (!really_quiet)
			error (0, 0, "move away %s; it is in the way",
			       fullname);
		    ret = T_CONFLICT;
		}
		else
		    /* since there was no difference, still needs checkout */
		    ret = T_CHECKOUT;
	    }
	}
    }
    else if (strcmp (vers->vn_user, "0") == 0)
    {
	/* An entry for a new-born file; ts_rcs is dummy */

	if (vers->ts_user == NULL)
	{
	    /*
	     * There is no user file, but there should be one; remove the
	     * entry
	     */
	    if (!really_quiet)
		error (0, 0, "warning: new-born %s has disappeared", fullname);
	    ret = T_REMOVE_ENTRY;
	}
	else
	{
	    /* There is a user file */

	    if (vers->vn_rcs == NULL)
		/* There is no RCS file, added file */
		ret = T_ADDED;
#ifdef DEATH_SUPPORT
	    else if (RCS_isdead (vers->srcfile, vers->vn_rcs))
		/* we are resurrecting. */
		ret = T_ADDED;
#endif /* DEATH_SUPPORT */
	    else
	    {
#ifdef DEATH_SUPPORT
		 if (vers->srcfile->flags & INATTIC
		     && vers->srcfile->flags & VALID)
		 {
		     /* This file has been added on some branch other than
			the one we are looking at.  In the branch we are
			looking at, the file was already valid.  */
		     if (!really_quiet)
			 error (0, 0,
				"conflict: %s has been added, but already exists",
				fullname);
		 }
		 else
		 {
#endif /* DEATH_SUPPORT */
		/*
		 * There is an RCS file, so someone else must have checked
		 * one in behind our back; conflict
		 */
		if (!really_quiet)
		    error (0, 0,
			"conflict: %s created independently by second party",
			   fullname);
#ifdef DEATH_SUPPORT
		 }
#endif
		ret = T_CONFLICT;
	    }
	}
    }
    else if (vers->vn_user[0] == '-')
    {
	/* An entry for a removed file, ts_rcs is invalid */

	if (vers->ts_user == NULL)
	{
	    char tmp[PATH_MAX];

	    /* There is no user file (as it should be) */

	    (void) sprintf (tmp, "-%s", vers->vn_rcs ? vers->vn_rcs : "");

	    if (vers->vn_rcs == NULL)
	    {

		/*
		 * There is no RCS file; this is all-right, but it has been
		 * removed independently by a second party; remove the entry
		 */
		ret = T_REMOVE_ENTRY;
	    }
	    else if (strcmp (tmp, vers->vn_user) == 0)

		/*
		 * The RCS file is the same version as the user file was, and
		 * that's OK; remove it
		 */
		ret = T_REMOVED;
	    else
	    {

		/*
		 * The RCS file is a newer version than the removed user file
		 * and this is definitely not OK; make it a conflict.
		 */
		if (!really_quiet)
		    error (0, 0,
			   "conflict: removed %s was modified by second party",
			   fullname);
		ret = T_CONFLICT;
	    }
	}
	else
	{
	    /* The user file shouldn't be there */
	    if (!really_quiet)
		error (0, 0, "%s should be removed and is still there",
		       fullname);
	    ret = T_REMOVED;
	}
    }
    else
    {
	/* A normal entry, TS_Rcs is valid */
	if (vers->vn_rcs == NULL)
	{
	    /* There is no RCS file */

	    if (vers->ts_user == NULL)
	    {
		/* There is no user file, so just remove the entry */
		if (!really_quiet)
		    error (0, 0, "warning: %s is not (any longer) pertinent",
			   fullname);
		ret = T_REMOVE_ENTRY;
	    }
	    else if (strcmp (vers->ts_user, vers->ts_rcs) == 0)
	    {

		/*
		 * The user file is still unmodified, so just remove it from
		 * the entry list
		 */
		if (!really_quiet)
		    error (0, 0, "%s is no longer in the repository",
			   fullname);
		ret = T_REMOVE_ENTRY;
	    }
	    else
	    {
		/*
		 * The user file has been modified and since it is no longer
		 * in the repository, a conflict is raised
		 */
		if (No_Difference (file, vers, entries,
				   repository, update_dir))
		{
		    /* they are different -> conflict */
		    if (!really_quiet)
			error (0, 0,
	       "conflict: %s is modified but no longer in the repository",
			   fullname);
		    ret = T_CONFLICT;
		}
		else
		{
		    /* they weren't really different */
		    if (!really_quiet)
			error (0, 0,
			       "warning: %s is not (any longer) pertinent",
			       fullname);
		    ret = T_REMOVE_ENTRY;
		}
	    }
	}
	else if (strcmp (vers->vn_rcs, vers->vn_user) == 0)
	{
	    /* The RCS file is the same version as the user file */

	    if (vers->ts_user == NULL)
	    {

		/*
		 * There is no user file, so note that it was lost and
		 * extract a new version
		 */
		if (strcmp (command_name, "update") == 0)
		    if (!really_quiet)
			error (0, 0, "warning: %s was lost", fullname);
		ret = T_CHECKOUT;
	    }
	    else if (strcmp (vers->ts_user, vers->ts_rcs) == 0)
	    {

		/*
		 * The user file is still unmodified, so nothing special at
		 * all to do -- no lists updated, unless the sticky -k option
		 * has changed.  If the sticky tag has changed, we just need
		 * to re-register the entry
		 */
		if (vers->entdata->options &&
		    strcmp (vers->entdata->options, vers->options) != 0)
		    ret = T_CHECKOUT;
		else
		{
#ifdef SERVER_SUPPORT
		    sticky_ck (file, aflag, vers, entries,
			       repository, update_dir);
#else
		    sticky_ck (file, aflag, vers, entries);
#endif
		    ret = T_UPTODATE;
		}
	    }
	    else
	    {

		/*
		 * The user file appears to have been modified, but we call
		 * No_Difference to verify that it really has been modified
		 */
		if (No_Difference (file, vers, entries,
				   repository, update_dir))
		{

		    /*
		     * they really are different; modified if we aren't
		     * changing any sticky -k options, else needs merge
		     */
#ifdef XXX_FIXME_WHEN_RCSMERGE_IS_FIXED
		    if (strcmp (vers->entdata->options ?
			   vers->entdata->options : "", vers->options) == 0)
			ret = T_MODIFIED;
		    else
			ret = T_NEEDS_MERGE;
#else
		    ret = T_MODIFIED;
#ifdef SERVER_SUPPORT
		    sticky_ck (file, aflag, vers, entries,
			       repository, update_dir);
#else
		    sticky_ck (file, aflag, vers, entries);
#endif /* SERVER_SUPPORT */
#endif
		}
		else
		{
		    /* file has not changed; check out if -k changed */
		    if (strcmp (vers->entdata->options ?
			   vers->entdata->options : "", vers->options) != 0)
		    {
			ret = T_CHECKOUT;
		    }
		    else
		    {

			/*
			 * else -> note that No_Difference will Register the
			 * file already for us, using the new tag/date. This
			 * is the desired behaviour
			 */
			ret = T_UPTODATE;
		    }
		}
	    }
	}
	else
	{
	    /* The RCS file is a newer version than the user file */

	    if (vers->ts_user == NULL)
	    {
		/* There is no user file, so just get it */

		if (strcmp (command_name, "update") == 0)
		    if (!really_quiet)
			error (0, 0, "warning: %s was lost", fullname);
		ret = T_CHECKOUT;
	    }
	    else if (strcmp (vers->ts_user, vers->ts_rcs) == 0)
	    {

		/*
		 * The user file is still unmodified, so just get it as well
		 */
#ifdef SERVER_SUPPORT
	        if (strcmp (vers->entdata->options ?
			    vers->entdata->options : "", vers->options) != 0
		    || (vers->srcfile != NULL
			&& (vers->srcfile->flags & INATTIC) != 0))
		    ret = T_CHECKOUT;
		else
		    ret = T_PATCH;
#else
		ret = T_CHECKOUT;
#endif
	    }
	    else
	    {
		if (No_Difference (file, vers, entries,
				   repository, update_dir))
		    /* really modified, needs to merge */
		    ret = T_NEEDS_MERGE;
#ifdef SERVER_SUPPORT
	        else if ((strcmp (vers->entdata->options ?
				  vers->entdata->options : "", vers->options)
			  != 0)
			 || (vers->srcfile != NULL
			     && (vers->srcfile->flags & INATTIC) != 0))
		    /* not really modified, check it out */
		    ret = T_CHECKOUT;
		else
		    ret = T_PATCH;
#else
		else
		    /* not really modified, check it out */
		    ret = T_CHECKOUT;
#endif
	    }
	}
    }

    /* free up the vers struct, or just return it */
    if (versp != (Vers_TS **) NULL)
	*versp = vers;
    else
	freevers_ts (&vers);

    free (fullname);

    /* return the status of the file */
    return (ret);
}

static void
#ifdef SERVER_SUPPORT
sticky_ck (file, aflag, vers, entries, repository, update_dir)
#else
sticky_ck (file, aflag, vers, entries)
#endif
    char *file;
    int aflag;
    Vers_TS *vers;
    List *entries;
#ifdef SERVER_SUPPORT
    char *repository;
    char *update_dir;
#endif
{
    if (aflag || vers->tag || vers->date)
    {
	char *enttag = vers->entdata->tag;
	char *entdate = vers->entdata->date;

	if ((enttag && vers->tag && strcmp (enttag, vers->tag)) ||
	    ((enttag && !vers->tag) || (!enttag && vers->tag)) ||
	    (entdate && vers->date && strcmp (entdate, vers->date)) ||
	    ((entdate && !vers->date) || (!entdate && vers->date)))
	{
	    Register (entries, file, vers->vn_user, vers->ts_rcs,
		      vers->options, vers->tag, vers->date, vers->ts_conflict);

#ifdef SERVER_SUPPORT
	    if (server_active)
	    {
		/* We need to update the entries line on the client side.
		   It is possible we will later update it again via
		   server_updated or some such, but that is OK.  */
		server_update_entries
		  (file, update_dir, repository,
		   strcmp (vers->ts_rcs, vers->ts_user) == 0 ?
		   SERVER_UPDATED : SERVER_MERGED);
	    }
#endif
	}
    }
}
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d12 5
d82 1
d100 1
d161 1
d165 1
d168 26
a193 24
		if (vers->srcfile->flags & INATTIC
		    && vers->srcfile->flags & VALID)
		{
		    /* This file has been added on some branch other than
		       the one we are looking at.  In the branch we are
		       looking at, the file was already valid.  */
		    if (!really_quiet)
			error (0, 0,
			       "\
conflict: %s has been added, but already exists",
			       fullname);
		}
		else
		{
		    /*
		     * There is an RCS file, so someone else must have checked
		     * one in behind our back; conflict
		     */
		    if (!really_quiet)
			error (0, 0,
			       "\
conflict: %s created independently by second party",
			       fullname);
		}
@


1.1.1.3
log
@New CVS release from Cyclic Software
@
text
@d25 1
a25 1
	       entries, rcsnode, versp, update_dir, pipeout)
d34 1
a34 1
    RCSNode *rcsnode;
d51 1
a51 1
		       force_tag_match, 0, entries, rcsnode);
@


1.1.1.4
log
@New release from Cyclic Software
@
text
@d24 3
a26 3
Classify_File (finfo, tag, date, options, force_tag_match, aflag, versp,
	       pipeout)
    struct file_info *finfo;
d32 3
d36 1
d41 7
d50 2
a51 2
    vers = Version_TS (finfo, options, tag, date,
		       force_tag_match, 0);
d64 1
a64 1
			error (0, 0, "nothing known about %s", finfo->fullname);
d73 1
a73 1
			       finfo->fullname);
d80 7
a86 1
		ret = T_UPTODATE;
d90 1
a90 1
		       finfo->fullname);
d118 2
a119 1
		else if (No_Difference (finfo, vers))
d124 1
a124 1
			       finfo->fullname);
d144 1
a144 1
		error (0, 0, "warning: new-born %s has disappeared", finfo->fullname);
d169 1
a169 1
			       finfo->fullname);
d181 1
a181 1
			       finfo->fullname);
d199 1
a199 2
	    if (vers->vn_rcs == NULL
		|| RCS_isdead (vers->srcfile, vers->vn_rcs))
d225 1
a225 1
			   finfo->fullname);
d234 1
a234 1
		       finfo->fullname);
d250 1
a250 1
			   finfo->fullname);
d262 1
a262 1
			   finfo->fullname);
d271 2
a272 1
		if (No_Difference (finfo, vers))
d278 1
a278 1
			   finfo->fullname);
d287 1
a287 1
			       finfo->fullname);
d305 1
a305 1
			error (0, 0, "warning: %s was lost", finfo->fullname);
d323 2
a324 2
		    sticky_ck (finfo->file, aflag, vers, finfo->entries,
			       finfo->repository, finfo->update_dir);
d326 1
a326 1
		    sticky_ck (finfo->file, aflag, vers, finfo->entries);
d338 2
a339 1
		if (No_Difference (finfo, vers))
d355 2
a356 2
		    sticky_ck (finfo->file, aflag, vers, finfo->entries,
			       finfo->repository, finfo->update_dir);
d358 1
a358 1
		    sticky_ck (finfo->file, aflag, vers, finfo->entries);
d393 1
a393 1
			error (0, 0, "warning: %s was lost", finfo->fullname);
d416 2
a417 1
		if (No_Difference (finfo, vers))
d444 2
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@d175 2
d179 2
d191 2
a192 3
	    else if (vers->vn_rcs == NULL
		     ? vers->vn_user[1] == '\0'
		     : strcmp (vers->vn_rcs, vers->vn_user + 1) == 0)
@


1.1.1.6
log
@Latest release from Cyclic Software
@
text
@a50 5
		/* FIXME: Why do we skip this message if vers->tag or
		   vers->date is set?  It causes "cvs update -r tag98 foo"
		   to silently do nothing, which is seriously confusing
		   behavior.  "cvs update foo" gives this message, which
		   is what I would expect.  */
a58 5
		/* FIXME: Why do we skip this message if vers->tag or
		   vers->date is set?  It causes "cvs update -r tag98 foo"
		   to silently do nothing, which is seriously confusing
		   behavior.  "cvs update foo" gives this message, which
		   is what I would expect.  */
@


1.1.1.7
log
@Latest version from Cyclic
@
text
@d6 1
a6 1
 * specified in the README file that comes with the CVS source distribution.
d12 7
a18 2
static void sticky_ck PROTO ((struct file_info *finfo, int aflag,
			      Vers_TS * vers));
a28 3

    /* Keyword expansion options.  Can be either NULL or "" to
       indicate none are specified here.  */
a29 1

d71 2
a72 2
			error (0, 0, "use `%s add' to create an entry for %s",
			       program_name, finfo->fullname);
d82 2
a83 2
		error (0, 0, "use `%s add' to create an entry for %s",
		       program_name, finfo->fullname);
d311 6
a316 1
		    sticky_ck (finfo, aflag, vers);
d342 6
a347 1
		    sticky_ck (finfo, aflag, vers);
d437 6
a442 2
sticky_ck (finfo, aflag, vers)
    struct file_info *finfo;
d445 5
d461 1
a461 1
	    Register (finfo->entries, finfo->file, vers->vn_user, vers->ts_rcs,
d471 1
a471 1
		  (finfo->file, finfo->update_dir, finfo->repository,
@


1.1.1.8
log
@Latest version from Cyclic
@
text
@a304 2
		/* TODO: decide whether we need to check file permissions
		   for a mismatch, and return T_CONFLICT if so. */
d380 1
a380 1
		if (strcmp (vers->entdata->options ?
@


1.1.1.9
log
@Latest version from Cyclic
@
text
@a290 8
		/* Comparing the command_name against "update", in
		   addition to being an ugly way to operate, means
		   that this message does not get printed by the
		   server.  That might be considered just a straight
		   bug, although there is one subtlety: that case also
		   gets hit when a patch fails and the client fetches
		   a file.  I'm not sure there is currently any way
		   for the server to distinguish those two cases.  */
a369 2
		/* See comment at other "update" compare, for more
		   thoughts on this comparison.  */
@


1.1.1.10
log
@Latest from Cyclic Software
@
text
@a76 1
	    /* there is an RCS file, but it's dead */
d86 1
a86 1
	else if (!pipeout && vers->ts_user && No_Difference (finfo, vers))
d88 34
a121 5
	    /* the files were different so it is a conflict */
	    if (!really_quiet)
		error (0, 0, "move away %s; it is in the way",
		       finfo->fullname);
	    ret = T_CONFLICT;
a122 3
	else
	    /* no user file or no difference, just checkout */
	    ret = T_CHECKOUT;
a137 4
	else if (vers->vn_rcs == NULL ||
		 RCS_isdead (vers->srcfile, vers->vn_rcs))
	    /* No RCS file or RCS file revision is dead  */
	    ret = T_ADDED;
d140 8
a147 11
	    if (vers->srcfile->flags & INATTIC
		&& vers->srcfile->flags & VALID)
	    {
		/* This file has been added on some branch other than
		   the one we are looking at.  In the branch we are
		   looking at, the file was already valid.  */
		if (!really_quiet)
		    error (0, 0,
			   "conflict: %s has been added, but already exists",
			   finfo->fullname);
	    }
d150 25
a174 8
		/*
		 * There is an RCS file, so someone else must have checked
		 * one in behind our back; conflict
		 */
		if (!really_quiet)
		    error (0, 0,
			   "conflict: %s created independently by second party",
			   finfo->fullname);
a175 1
	    ret = T_CONFLICT;
d196 3
a198 1
	    else if (strcmp (vers->vn_rcs, vers->vn_user + 1) == 0)
a203 6
	    else if (pipeout)
		/*
		 * The RCS file doesn't match the user's file, but it doesn't
		 * matter in this case
		 */
		ret = T_NEEDS_MERGE;
d230 1
a230 1
	if (vers->vn_rcs == NULL || RCS_isdead (vers->srcfile, vers->vn_rcs))
d254 1
a254 1
	    else if (No_Difference (finfo, vers))
d256 9
a264 3
		/* they are different -> conflict */
		if (!really_quiet)
		    error (0, 0,
d267 11
a277 10
		ret = T_CONFLICT;
	    }
	    else
	    {
		/* they weren't really different */
		if (!really_quiet)
		    error (0, 0,
			   "warning: %s is not (any longer) pertinent",
			   finfo->fullname);
		ret = T_REMOVE_ENTRY;
d324 1
a324 1
	    else if (No_Difference (finfo, vers))
d328 2
a329 2
		 * they really are different; modified if we aren't
		 * changing any sticky -k options, else needs merge
d331 7
d339 6
a344 2
		if (strcmp (vers->entdata->options ?
		       vers->entdata->options : "", vers->options) == 0)
d346 3
d350 18
a367 21
		    ret = T_NEEDS_MERGE;
#else
		ret = T_MODIFIED;
		sticky_ck (finfo, aflag, vers);
#endif
	    }
	    else if (strcmp (vers->entdata->options ?
		       vers->entdata->options : "", vers->options) != 0)
	    {
		/* file has not changed; check out if -k changed */
		ret = T_CHECKOUT;
	    }
	    else
	    {

		/*
		 * else -> note that No_Difference will Register the
		 * file already for us, using the new tag/date. This
		 * is the desired behaviour
		 */
		ret = T_UPTODATE;
d391 1
d399 3
a402 10
	    else if (No_Difference (finfo, vers))
		/* really modified, needs to merge */
		ret = T_NEEDS_MERGE;
	    else if ((strcmp (vers->entdata->options ?
			      vers->entdata->options : "", vers->options)
		      != 0)
		     || (vers->srcfile != NULL
		         && (vers->srcfile->flags & INATTIC) != 0))
		/* not really modified, check it out */
		ret = T_CHECKOUT;
d404 20
a423 1
		ret = T_PATCH;
@


