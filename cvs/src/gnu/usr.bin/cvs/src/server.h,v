head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.56
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.52
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.54
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.46
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.50
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.48
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.44
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.42
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.40
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.38
	OPENBSD_5_0:1.2.0.36
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.34
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.32
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.28
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.30
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.26
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.24
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.22
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.20
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.18
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.16
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.14
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.12
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.10
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.1.10.0.16
	OPENBSD_3_2_BASE:1.1.1.10
	OPENBSD_3_1:1.1.1.10.0.14
	OPENBSD_3_1_BASE:1.1.1.10
	OPENBSD_3_0:1.1.1.10.0.12
	OPENBSD_3_0_BASE:1.1.1.10
	cvs-1-11-1p1:1.1.1.10
	OPENBSD_2_9:1.1.1.10.0.10
	OPENBSD_2_9_BASE:1.1.1.10
	cvs-1-11:1.1.1.10
	OPENBSD_2_8:1.1.1.10.0.8
	OPENBSD_2_8_BASE:1.1.1.10
	OPENBSD_2_7:1.1.1.10.0.6
	OPENBSD_2_7_BASE:1.1.1.10
	OPENBSD_2_6:1.1.1.10.0.4
	OPENBSD_2_6_BASE:1.1.1.10
	cvs-1-10-7:1.1.1.10
	OPENBSD_2_5:1.1.1.10.0.2
	OPENBSD_2_5_BASE:1.1.1.10
	cvs-1-10-5:1.1.1.10
	OPENBSD_2_4:1.1.1.9.0.4
	OPENBSD_2_4_BASE:1.1.1.9
	cvs-1-10:1.1.1.9
	cvs-1-9-28:1.1.1.9
	OPENBSD_2_3:1.1.1.9.0.2
	OPENBSD_2_3_BASE:1.1.1.9
	cvs-1-9-26:1.1.1.9
	cvs-1-9-24:1.1.1.8
	OPENBSD_2_2:1.1.1.7.0.2
	OPENBSD_2_2_BASE:1.1.1.7
	cvs-1-9-10:1.1.1.7
	OPENBSD_2_1:1.1.1.6.0.2
	OPENBSD_2_1_BASE:1.1.1.6
	cvs-1-9-8:1.1.1.6
	cvs-1-9-6:1.1.1.5
	cvs-1-9-4:1.1.1.5
	cvs-1-9-2:1.1.1.5
	cvs-1-9:1.1.1.4
	OPENBSD_2_0:1.1.1.3.0.2
	OPENBSD_2_0_BASE:1.1.1.3
	cvs-1-8-1:1.1.1.3
	cvs-1-8:1.1.1.3
	cvs-1-7-2:1.1.1.2
	cvs-1-7-1:1.1.1.2
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.23.20.00.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.12.19.09.21.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.31;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.01.30.00.17.52;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.05.06.22.19.09;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.10.18.03.35.17;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.02.21.06.37.13;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.04.21.04.26.45;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	97.06.28.03.28.30;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	98.02.22.08.20.56;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	98.03.12.06.58.20;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.02.28.21.32.30;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add a "DisableXProg" option to CVSROOT/config that can be used to
disable support for Update-prog and Checkin-prog.  This is a good
idea for anonymouse cvs servers or anyone who doesn't need this
feature.  From Stefan Esser.
@
text
@/* Interface between the server and the rest of CVS.  */

/* Miscellaneous stuff which isn't actually particularly server-specific.  */
#ifndef STDIN_FILENO
#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2
#endif


/*
 * Expand to `S', ` ', or the empty string.  Used in `%s-> ...' trace printfs.
 */
#ifdef SERVER_SUPPORT
# define CLIENT_SERVER_STR ((server_active) ? "S" : " ")
#else
# define CLIENT_SERVER_STR ""
#endif

#ifdef SERVER_SUPPORT

/*
 * Nonzero if we are using the server.  Used by various places to call
 * server-specific functions.
 */
extern int server_active;
extern int server_expanding;

/* Server functions exported to the rest of CVS.  */

/* Run the server.  */
extern int server PROTO((int argc, char **argv));

/* See server.c for description.  */
extern void server_pathname_check PROTO ((char *));

/* We have a new Entries line for a file.  TAG or DATE can be NULL.  */
extern void server_register
    PROTO((char *name, char *version, char *timestamp,
	     char *options, char *tag, char *date, char *conflict));

/* Set the modification time of the next file sent.  This must be
   followed by a call to server_updated on the same file.  */
extern void server_modtime PROTO ((struct file_info *finfo,
				   Vers_TS *vers_ts));

/*
 * We want to nuke the Entries line for a file, and (unless
 * server_scratch_entry_only is subsequently called) the file itself.
 */
extern void server_scratch PROTO((char *name));

/*
 * The file which just had server_scratch called on it needs to have only
 * the Entries line removed, not the file itself.
 */
extern void server_scratch_entry_only PROTO((void));

/*
 * We just successfully checked in FILE (which is just the bare
 * filename, with no directory).  REPOSITORY is the directory for the
 * repository.
 */
extern void server_checked_in
    PROTO((char *file, char *update_dir, char *repository));

extern void server_copy_file
    PROTO((char *file, char *update_dir, char *repository, char *newfile));

/* Send the appropriate responses for a file described by FINFO and
   VERS.  This is called after server_register or server_scratch.  In
   the latter case the file is to be removed (and VERS can be NULL).
   In the former case, VERS must be non-NULL, and UPDATED indicates
   whether the file is now up to date (SERVER_UPDATED, yes,
   SERVER_MERGED, no, SERVER_PATCHED, yes, but file is a diff from
   user version to repository version, SERVER_RCS_DIFF, yes, like
   SERVER_PATCHED but with an RCS style diff).  MODE is the mode the
   file should get, or (mode_t) -1 if this should be obtained from the
   file itself.  CHECKSUM is the MD5 checksum of the file, or NULL if
   this need not be sent.  If FILEBUF is not NULL, it holds the
   contents of the file, in which case the file itself may not exist.
   If FILEBUF is not NULL, server_updated will free it.  */
enum server_updated_arg4
{
    SERVER_UPDATED,
    SERVER_MERGED,
    SERVER_PATCHED,
    SERVER_RCS_DIFF
};
#ifdef __STDC__
struct buffer;
#endif

extern void server_updated
    PROTO((struct file_info *finfo, Vers_TS *vers,
	   enum server_updated_arg4 updated, mode_t mode,
	   unsigned char *checksum, struct buffer *filebuf));

/* Whether we should send RCS format patches.  */
extern int server_use_rcs_diff PROTO((void));

/* Set the Entries.Static flag.  */
extern void server_set_entstat PROTO((char *update_dir, char *repository));
/* Clear it.  */
extern void server_clear_entstat PROTO((char *update_dir, char *repository));

/* Set or clear a per-directory sticky tag or date.  */
extern void server_set_sticky PROTO((char *update_dir, char *repository,
				     char *tag, char *date, int nonbranch));
/* Send Template response.  */
extern void server_template PROTO ((char *, char *));

extern void server_update_entries
    PROTO((char *file, char *update_dir, char *repository,
	   enum server_updated_arg4 updated));

/* Pointer to a malloc'd string which is the directory which
   the server should prepend to the pathnames which it sends
   to the client.  */
extern char *server_dir;

enum progs {PROG_CHECKIN, PROG_UPDATE};
extern void server_prog PROTO((char *, char *, enum progs));
extern void server_cleanup PROTO((int sig));

#ifdef SERVER_FLOWCONTROL
/* Pause if it's convenient to avoid memory blowout */
extern void server_pause_check PROTO((void));
#endif /* SERVER_FLOWCONTROL */

#ifdef AUTH_SERVER_SUPPORT
extern char *CVS_Username;
extern int system_auth;
extern int disable_x_prog;
#endif /* AUTH_SERVER_SUPPORT */

#endif /* SERVER_SUPPORT */

/* Stuff shared with the client.  */
struct request
{
  /* Name of the request.  */
  char *name;

#ifdef SERVER_SUPPORT
  /*
   * Function to carry out the request.  ARGS is the text of the command
   * after name and, if present, a single space, have been stripped off.
   */
  void (*func) PROTO((char *args));
#endif

  /* One or more of the RQ_* flags described below.  */
  int flags;

  /* If set, failure to implement this request can imply a fatal
     error.  This should be set only for commands which were in the
     original version of the protocol; it should not be set for new
     commands.  */
#define RQ_ESSENTIAL 1

  /* Set by the client if the server we are talking to supports it.  */
#define RQ_SUPPORTED 2

  /* If set, and client and server both support the request, the
     client should tell the server by making the request.  */
#define RQ_ENABLEME 4

  /* The server may accept this request before "Root".  */
#define RQ_ROOTLESS 8
};

/* Table of requests ending with an entry with a NULL name.  */
extern struct request requests[];

/* Gzip library, see zlib.c.  */
extern int gunzip_and_write PROTO ((int, char *, unsigned char *, size_t));
extern int read_and_gzip PROTO ((int, char *, unsigned char **, size_t *,
				 size_t *, int));
@


1.1
log
@Initial revision
@
text
@d10 10
d34 3
d42 5
d70 24
a93 9
/*
 * We just successfully updated FILE (bare filename, no directory).
 * REPOSITORY is the directory for the repository.  This is called
 * after server_register or server_scratch, in the latter case the
 * file is to be removed.  UPDATED indicates whether the file is now
 * up to date (SERVER_UPDATED, yes, SERVER_MERGED, no, SERVER_PATCHED,
 * yes, but file is a diff from user version to repository version).
 */
enum server_updated_arg4 {SERVER_UPDATED, SERVER_MERGED, SERVER_PATCHED};
d95 6
a100 3
    PROTO((char *file, char *update_dir, char *repository,
	     enum server_updated_arg4 updated, struct stat *,
	     unsigned char *checksum));
d109 3
a111 2
				       char *tag,
				       char *date));
d115 6
a120 1
	     enum server_updated_arg4 updated));
d124 12
d153 18
a170 26
  /* Stuff for use by the client.  */
  enum {
      /*
       * Failure to implement this request can imply a fatal
       * error.  This should be set only for commands which were in the
       * original version of the protocol; it should not be set for new
       * commands.
       */
      rq_essential,

      /* Some servers might lack this request.  */
      rq_optional,

      /*
       * Set by the client to one of the following based on what this
       * server actually supports.
       */
      rq_supported,
      rq_not_supported,

      /*
       * If the server supports this request, and we do too, tell the
       * server by making the request.
       */
      rq_enableme
      } status;
d176 4
a179 1
extern int use_unchanged;
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Upgrade to 1.7.1 snapshot
@
text
@a81 6
extern void server_cleanup PROTO((int sig));

#ifdef SERVER_FLOWCONTROL
/* Pause if it's convenient to avoid memory blowout */
extern void server_check_pause PROTO((void));
#endif /* SERVER_FLOWCONTROL */
@


1.1.1.3
log
@New CVS release from Cyclic Software
@
text
@a74 2
/* Send Template response.  */
extern void server_template PROTO ((char *, char *));
d86 1
a86 1
extern void server_pause_check PROTO((void));
@


1.1.1.4
log
@New release from Cyclic Software
@
text
@d52 8
a59 9
/* Send the appropriate responses for a file described by FILE,
   UPDATE_DIR, REPOSITORY, and VERS.  FILE_INFO is the result of
   statting the file, or NULL if it hasn't been statted yet.  This is
   called after server_register or server_scratch.  In the latter case
   the file is to be removed (and vers can be NULL).  In the former
   case, vers must be non-NULL, and UPDATED indicates whether the file
   is now up to date (SERVER_UPDATED, yes, SERVER_MERGED, no,
   SERVER_PATCHED, yes, but file is a diff from user version to
   repository version).  */
d62 3
a64 3
    PROTO((struct file_info *finfo, Vers_TS *vers,
	   enum server_updated_arg4 updated, struct stat *,
	   unsigned char *checksum));
d80 1
a80 1
	   enum server_updated_arg4 updated));
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@a82 5
/* Pointer to a malloc'd string which is the directory which
   the server should prepend to the pathnames which it sends
   to the client.  */
extern char *server_dir;

d138 2
@


1.1.1.6
log
@Latest release from Cyclic Software
@
text
@d74 2
a75 1
				     char *tag, char *date, int nonbranch));
@


1.1.1.7
log
@Latest version from Cyclic Software
@
text
@a23 3
/* See server.c for description.  */
extern void server_pathname_check PROTO ((char *));

a28 5
/* Set the modification time of the next file sent.  This must be
   followed by a call to server_updated on the same file.  */
extern void server_modtime PROTO ((struct file_info *finfo,
				   Vers_TS *vers_ts));

d60 2
a61 9
   repository version, SERVER_RCS_DIFF, yes, like SERVER_PATCHED but
   with an RCS style diff).  */
enum server_updated_arg4
{
    SERVER_UPDATED,
    SERVER_MERGED,
    SERVER_PATCHED,
    SERVER_RCS_DIFF
};
a66 3
/* Whether we should send RCS format patches.  */
extern int server_use_rcs_diff PROTO((void));

a94 4

#ifdef AUTH_SERVER_SUPPORT
extern char *CVS_Username;
#endif /* AUTH_SERVER_SUPPORT */
@


1.1.1.8
log
@Latest version from Cyclic
@
text
@a115 1
extern int system_auth;
a163 5

/* Gzip library, see zlib.c.  */
extern void gunzip_and_write PROTO ((int, char *, unsigned char *, size_t));
extern void read_and_gzip PROTO ((int, char *, unsigned char **, size_t *,
				  size_t *, int));
@


1.1.1.9
log
@Latest version from Cyclic
@
text
@d60 10
a69 13
/* Send the appropriate responses for a file described by FINFO and
   VERS.  This is called after server_register or server_scratch.  In
   the latter case the file is to be removed (and VERS can be NULL).
   In the former case, VERS must be non-NULL, and UPDATED indicates
   whether the file is now up to date (SERVER_UPDATED, yes,
   SERVER_MERGED, no, SERVER_PATCHED, yes, but file is a diff from
   user version to repository version, SERVER_RCS_DIFF, yes, like
   SERVER_PATCHED but with an RCS style diff).  MODE is the mode the
   file should get, or (mode_t) -1 if this should be obtained from the
   file itself.  CHECKSUM is the MD5 checksum of the file, or NULL if
   this need not be sent.  If FILEBUF is not NULL, it holds the
   contents of the file, in which case the file itself may not exist.
   If FILEBUF is not NULL, server_updated will free it.  */
a76 4
#ifdef __STDC__
struct buffer;
#endif

d79 2
a80 2
	   enum server_updated_arg4 updated, mode_t mode,
	   unsigned char *checksum, struct buffer *filebuf));
@


1.1.1.10
log
@Latest version from Cyclic
@
text
@a9 10

/*
 * Expand to `S', ` ', or the empty string.  Used in `%s-> ...' trace printfs.
 */
#ifdef SERVER_SUPPORT
# define CLIENT_SERVER_STR ((server_active) ? "S" : " ")
#else
# define CLIENT_SERVER_STR ""
#endif

d142 26
a167 18
  /* One or more of the RQ_* flags described below.  */
  int flags;

  /* If set, failure to implement this request can imply a fatal
     error.  This should be set only for commands which were in the
     original version of the protocol; it should not be set for new
     commands.  */
#define RQ_ESSENTIAL 1

  /* Set by the client if the server we are talking to supports it.  */
#define RQ_SUPPORTED 2

  /* If set, and client and server both support the request, the
     client should tell the server by making the request.  */
#define RQ_ENABLEME 4

  /* The server may accept this request before "Root".  */
#define RQ_ROOTLESS 8
d174 3
a176 3
extern int gunzip_and_write PROTO ((int, char *, unsigned char *, size_t));
extern int read_and_gzip PROTO ((int, char *, unsigned char **, size_t *,
				 size_t *, int));
@


