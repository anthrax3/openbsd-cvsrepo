head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.12.0.66
	OPENBSD_6_1_BASE:1.1.1.12
	OPENBSD_6_0:1.1.1.12.0.62
	OPENBSD_6_0_BASE:1.1.1.12
	OPENBSD_5_9:1.1.1.12.0.58
	OPENBSD_5_9_BASE:1.1.1.12
	OPENBSD_5_8:1.1.1.12.0.60
	OPENBSD_5_8_BASE:1.1.1.12
	OPENBSD_5_7:1.1.1.12.0.52
	OPENBSD_5_7_BASE:1.1.1.12
	OPENBSD_5_6:1.1.1.12.0.56
	OPENBSD_5_6_BASE:1.1.1.12
	OPENBSD_5_5:1.1.1.12.0.54
	OPENBSD_5_5_BASE:1.1.1.12
	OPENBSD_5_4:1.1.1.12.0.50
	OPENBSD_5_4_BASE:1.1.1.12
	OPENBSD_5_3:1.1.1.12.0.48
	OPENBSD_5_3_BASE:1.1.1.12
	OPENBSD_5_2:1.1.1.12.0.46
	OPENBSD_5_2_BASE:1.1.1.12
	OPENBSD_5_1_BASE:1.1.1.12
	OPENBSD_5_1:1.1.1.12.0.44
	OPENBSD_5_0:1.1.1.12.0.42
	OPENBSD_5_0_BASE:1.1.1.12
	OPENBSD_4_9:1.1.1.12.0.40
	OPENBSD_4_9_BASE:1.1.1.12
	OPENBSD_4_8:1.1.1.12.0.38
	OPENBSD_4_8_BASE:1.1.1.12
	OPENBSD_4_7:1.1.1.12.0.34
	OPENBSD_4_7_BASE:1.1.1.12
	OPENBSD_4_6:1.1.1.12.0.36
	OPENBSD_4_6_BASE:1.1.1.12
	OPENBSD_4_5:1.1.1.12.0.32
	OPENBSD_4_5_BASE:1.1.1.12
	OPENBSD_4_4:1.1.1.12.0.30
	OPENBSD_4_4_BASE:1.1.1.12
	OPENBSD_4_3:1.1.1.12.0.28
	OPENBSD_4_3_BASE:1.1.1.12
	OPENBSD_4_2:1.1.1.12.0.26
	OPENBSD_4_2_BASE:1.1.1.12
	OPENBSD_4_1:1.1.1.12.0.24
	OPENBSD_4_1_BASE:1.1.1.12
	OPENBSD_4_0:1.1.1.12.0.22
	OPENBSD_4_0_BASE:1.1.1.12
	OPENBSD_3_9:1.1.1.12.0.20
	OPENBSD_3_9_BASE:1.1.1.12
	OPENBSD_3_8:1.1.1.12.0.18
	OPENBSD_3_8_BASE:1.1.1.12
	OPENBSD_3_7:1.1.1.12.0.16
	OPENBSD_3_7_BASE:1.1.1.12
	OPENBSD_3_6:1.1.1.12.0.14
	OPENBSD_3_6_BASE:1.1.1.12
	OPENBSD_3_5:1.1.1.12.0.12
	OPENBSD_3_5_BASE:1.1.1.12
	OPENBSD_3_4:1.1.1.12.0.10
	OPENBSD_3_4_BASE:1.1.1.12
	OPENBSD_3_3:1.1.1.12.0.8
	OPENBSD_3_3_BASE:1.1.1.12
	OPENBSD_3_2:1.1.1.12.0.6
	OPENBSD_3_2_BASE:1.1.1.12
	OPENBSD_3_1:1.1.1.12.0.4
	OPENBSD_3_1_BASE:1.1.1.12
	OPENBSD_3_0:1.1.1.12.0.2
	OPENBSD_3_0_BASE:1.1.1.12
	cvs-1-11-1p1:1.1.1.12
	OPENBSD_2_9:1.1.1.11.0.2
	OPENBSD_2_9_BASE:1.1.1.11
	cvs-1-11:1.1.1.11
	OPENBSD_2_8:1.1.1.10.0.8
	OPENBSD_2_8_BASE:1.1.1.10
	OPENBSD_2_7:1.1.1.10.0.6
	OPENBSD_2_7_BASE:1.1.1.10
	OPENBSD_2_6:1.1.1.10.0.4
	OPENBSD_2_6_BASE:1.1.1.10
	cvs-1-10-7:1.1.1.10
	OPENBSD_2_5:1.1.1.10.0.2
	OPENBSD_2_5_BASE:1.1.1.10
	cvs-1-10-5:1.1.1.10
	OPENBSD_2_4:1.1.1.9.0.2
	OPENBSD_2_4_BASE:1.1.1.9
	cvs-1-10:1.1.1.9
	cvs-1-9-28:1.1.1.9
	OPENBSD_2_3:1.1.1.8.0.2
	OPENBSD_2_3_BASE:1.1.1.8
	cvs-1-9-26:1.1.1.8
	cvs-1-9-24:1.1.1.8
	OPENBSD_2_2:1.1.1.7.0.4
	OPENBSD_2_2_BASE:1.1.1.7
	cvs-1-9-10:1.1.1.7
	OPENBSD_2_1:1.1.1.7.0.2
	OPENBSD_2_1_BASE:1.1.1.7
	cvs-1-9-8:1.1.1.7
	cvs-1-9-6:1.1.1.6
	cvs-1-9-4:1.1.1.6
	cvs-1-9-2:1.1.1.5
	cvs-1-9:1.1.1.4
	OPENBSD_2_0:1.1.1.3.0.2
	OPENBSD_2_0_BASE:1.1.1.3
	cvs-1-8-1:1.1.1.3
	cvs-1-8:1.1.1.3
	cvs-1-7-2:1.1.1.2
	cvs-1-7-1:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	96.01.30.00.18.06;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.30.00.18.06;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.04.27.19.41.49;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.05.06.22.19.30;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.10.18.03.35.31;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.02.21.06.37.29;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.03.18.01.56.03;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	97.04.21.04.27.14;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	98.02.22.08.21.10;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	98.07.13.03.53.55;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.02.28.21.32.52;	author tholo;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2001.02.10.18.57.39;	author tholo;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2001.09.28.22.45.37;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* error.c -- error handler for noninteractive utilities
   Copyright (C) 1990-1992 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* David MacKenzie */
/* Brian Berliner added support for CVS */

#include "cvs.h"

#ifndef lint
static const char rcsid[] = "$CVSid: @@(#)error.c 1.13 94/09/30 $";
USE(rcsid);
#endif /* not lint */

#include <stdio.h>

/* If non-zero, error will use the CVS protocol to stdout to report error
   messages.  This will only be set in the CVS server parent process;
   most other code is run via do_cvs_command, which forks off a child
   process and packages up its stderr in the protocol.  */
int error_use_protocol; 

#ifdef HAVE_VPRINTF

#if __STDC__
#include <stdarg.h>
#define VA_START(args, lastarg) va_start(args, lastarg)
#else /* ! __STDC__ */
#include <varargs.h>
#define VA_START(args, lastarg) va_start(args)
#endif /* __STDC__ */

#else /* ! HAVE_VPRINTF */ 

#ifdef HAVE_DOPRNT
#define va_alist args
#define va_dcl int args;
#else /* ! HAVE_DOPRNT */
#define va_alist a1, a2, a3, a4, a5, a6, a7, a8
#define va_dcl char *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8;
#endif /* HAVE_DOPRNT */

#endif /* HAVE_VPRINTF */ 

#if STDC_HEADERS
#include <stdlib.h>
#include <string.h>
#else /* ! STDC_HEADERS */
#if __STDC__
void exit(int status);
#else /* ! __STDC__ */
void exit ();
#endif /* __STDC__ */
#endif /* STDC_HEADERS */

extern char *strerror ();

typedef void (*fn_returning_void) PROTO((void));

/* Function to call before exiting.  */
static fn_returning_void cleanup_fn;

fn_returning_void
error_set_cleanup (arg)
     fn_returning_void arg;
{
  fn_returning_void retval = cleanup_fn;
  cleanup_fn = arg;
  return retval;
}

/* Print the program name and error message MESSAGE, which is a printf-style
   format string with optional args.
   If ERRNUM is nonzero, print its corresponding system error message.
   Exit with status STATUS if it is nonzero. */
/* VARARGS */
void
#if defined (HAVE_VPRINTF) && __STDC__
error (int status, int errnum, const char *message, ...)
#else
error (status, errnum, message, va_alist)
     int status;
     int errnum;
     const char *message;
     va_dcl
#endif
{
  FILE *out = stderr;
  extern char *program_name;
  extern char *command_name;
#ifdef HAVE_VPRINTF
  va_list args;
#endif

  if (error_use_protocol)
    {
      out = stdout;
      printf ("E ");
    }

  if (command_name && *command_name)
    if (status)
      fprintf (out, "%s [%s aborted]: ", program_name, command_name);
    else
      fprintf (out, "%s %s: ", program_name, command_name);
  else
    fprintf (out, "%s: ", program_name);
#ifdef HAVE_VPRINTF
  VA_START (args, message);
  vfprintf (out, message, args);
  va_end (args);
#else
#ifdef HAVE_DOPRNT
  _doprnt (message, &args, out);
#else
  fprintf (out, message, a1, a2, a3, a4, a5, a6, a7, a8);
#endif
#endif
  if (errnum)
    fprintf (out, ": %s", strerror (errnum));
  putc ('\n', out);
  fflush (out);
  if (status)
    {
      if (cleanup_fn)
	(*cleanup_fn) ();
      exit (status);
    }
}

/* Print the program name and error message MESSAGE, which is a printf-style
   format string with optional args to the file specified by FP.
   If ERRNUM is nonzero, print its corresponding system error message.
   Exit with status STATUS if it is nonzero. */
/* VARARGS */
void
#if defined (HAVE_VPRINTF) && __STDC__
fperror (FILE *fp, int status, int errnum, char *message, ...)
#else
fperror (fp, status, errnum, message, va_alist)
     FILE *fp;
     int status;
     int errnum;
     char *message;
     va_dcl
#endif
{
  extern char *program_name;
#ifdef HAVE_VPRINTF
  va_list args;
#endif

  fprintf (fp, "%s: ", program_name);
#ifdef HAVE_VPRINTF
  VA_START (args, message);
  vfprintf (fp, message, args);
  va_end (args);
#else
#ifdef HAVE_DOPRNT
  _doprnt (message, &args, fp);
#else
  fprintf (fp, message, a1, a2, a3, a4, a5, a6, a7, a8);
#endif
#endif
  if (errnum)
    fprintf (fp, ": %s", strerror (errnum));
  putc ('\n', fp);
  fflush (fp);
  if (status)
    {
      if (cleanup_fn)
	(*cleanup_fn) ();
      exit (status);
    }
}
@


1.1.1.1
log
@Upgrade to 1.7.1 snapshot
@
text
@@


1.1.1.2
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d23 5
a70 2
extern int vasprintf ();

d80 3
a82 3
    fn_returning_void retval = cleanup_fn;
    cleanup_fn = arg;
    return retval;
d95 4
a98 4
    int status;
    int errnum;
    const char *message;
    va_dcl
d101 3
a103 1
    FILE *out = stderr;
d105 1
a105 1
    va_list args;
d108 1
a108 1
    if (error_use_protocol)
d110 2
a111 2
	out = stdout;
	printf ("E ");
d114 3
a116 70
#ifdef HAVE_VPRINTF
    {
	char *mess = NULL;
	char *entire;
	size_t len;

	VA_START (args, message);
	vasprintf (&mess, message, args);
	va_end (args);

	if (mess == NULL)
	{
	    entire = NULL;
	    status = 1;
	}
	else
	{
	    len = strlen (mess) + strlen (program_name) + 80;
	    if (command_name != NULL)
		len += strlen (command_name);
	    if (errnum != 0)
		len += strlen (strerror (errnum));
	    entire = malloc (len);
	    if (entire == NULL)
	    {
		free (mess);
		status = 1;
	    }
	    else
	    {
		strcpy (entire, program_name);
		if (command_name != NULL && command_name[0] != '\0')
		{
		    strcat (entire, " ");
		    if (status != 0)
			strcat (entire, "[");
		    strcat (entire, command_name);
		    if (status != 0)
			strcat (entire, " aborted]");
		}
		strcat (entire, ": ");
		strcat (entire, mess);
		if (errnum != 0)
		{
		    strcat (entire, ": ");
		    strcat (entire, strerror (errnum));
		}
		strcat (entire, "\n");
		free (mess);
	    }
	}
	if (error_use_protocol)
	    fputs (entire ? entire : "out of memory", out);
	else
	    cvs_outerr (entire ? entire : "out of memory", 0);
	if (entire != NULL)
	    free (entire);
    }

#else /* No HAVE_VPRINTF */
    /* I think that all relevant systems have vprintf these days.  But
       just in case, I'm leaving this code here.  */

    if (command_name && *command_name)
    {
	if (status)
	    fprintf (out, "%s [%s aborted]: ", program_name, command_name);
	else
	    fprintf (out, "%s %s: ", program_name, command_name);
    }
d118 7
a124 6
	fprintf (out, "%s: ", program_name);

#ifdef HAVE_VPRINTF
    VA_START (args, message);
    vfprintf (out, message, args);
    va_end (args);
d127 1
a127 1
    _doprnt (message, &args, out);
d129 1
a129 1
    fprintf (out, message, a1, a2, a3, a4, a5, a6, a7, a8);
d132 5
a136 13
    if (errnum)
	fprintf (out, ": %s", strerror (errnum));
    putc ('\n', out);

#endif /* No HAVE_VPRINTF */

    /* In the error_use_protocol case, this probably does something useful.
       In most other cases, I suspect it is a noop (either stderr is line
       buffered or we haven't written anything to stderr) or unnecessary
       (if stderr is not line buffered, maybe there is a reason....).  */
    fflush (out);

    if (status)
d138 3
a140 3
	if (cleanup_fn)
	    (*cleanup_fn) ();
	exit (status);
d154 5
a158 5
    FILE *fp;
    int status;
    int errnum;
    char *message;
    va_dcl
d161 1
d163 1
a163 1
    va_list args;
d166 1
a166 1
    fprintf (fp, "%s: ", program_name);
d168 3
a170 3
    VA_START (args, message);
    vfprintf (fp, message, args);
    va_end (args);
d173 1
a173 1
    _doprnt (message, &args, fp);
d175 1
a175 1
    fprintf (fp, message, a1, a2, a3, a4, a5, a6, a7, a8);
d178 5
a182 5
    if (errnum)
	fprintf (fp, ": %s", strerror (errnum));
    putc ('\n', fp);
    fflush (fp);
    if (status)
d184 3
a186 3
	if (cleanup_fn)
	    (*cleanup_fn) ();
	exit (status);
@


1.1.1.3
log
@New CVS release from Cyclic Software
@
text
@d85 1
a85 1
   Exit with status EXIT_FAILURE if STATUS is nonzero.  */
d209 1
a209 1
	exit (EXIT_FAILURE);
d216 1
a216 1
   Exit with status EXIT_FAILURE if STATUS is nonzero.  */
d254 1
a254 1
	exit (EXIT_FAILURE);
@


1.1.1.4
log
@New release from Cyclic Software
@
text
@a63 1
#ifndef strerror
a64 1
#endif
d98 11
a110 1
	va_list args;
d160 4
a163 1
	cvs_outerr (entire ? entire : "out of memory", 0);
d172 1
d174 2
a175 15
	FILE *out = stderr;

	if (error_use_protocol)
	{
	    out = stdout;
	    printf ("E ");
	}

	if (command_name && *command_name)
	{
	    if (status)
		fprintf (out, "%s [%s aborted]: ", program_name, command_name);
	    else
		fprintf (out, "%s %s: ", program_name, command_name);
	}
d177 4
a180 1
	    fprintf (out, "%s: ", program_name);
d183 3
a185 3
	VA_START (args, message);
	vfprintf (out, message, args);
	va_end (args);
d188 1
a188 1
	_doprnt (message, &args, out);
d190 1
a190 1
	fprintf (out, message, a1, a2, a3, a4, a5, a6, a7, a8);
d193 3
a195 11
	if (errnum)
	    fprintf (out, ": %s", strerror (errnum));
	putc ('\n', out);

	/* In the error_use_protocol case, this probably does
	   something useful.  In most other cases, I suspect it is a
	   noop (either stderr is line buffered or we haven't written
	   anything to stderr) or unnecessary (if stderr is not line
	   buffered, maybe there is a reason....).  */
	fflush (out);
    }
d199 6
d219 1
a219 1
#if defined (HAVE_VPRINTF) && ((__STDC__ - 0) > 0)
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@d12 5
a16 1
   GNU General Public License for more details.  */
d70 8
a77 2
void
error_exit PROTO ((void))
d79 3
a81 11
    Lock_Cleanup();
#ifdef SERVER_SUPPORT
    if (server_active)
	server_cleanup (0);
#endif
#ifdef SYSTEM_CLEANUP
    /* Hook for OS-specific behavior, for example socket subsystems on
       NT and OS2 or dealing with windows and arguments on Mac.  */
    SYSTEM_CLEANUP ();
#endif
    exit (EXIT_FAILURE);
d87 1
a87 2
   Exit with status EXIT_FAILURE if STATUS is nonzero.  If MESSAGE is "",
   no need to print a message.  */
a100 1
    if (message[0] != '\0')
a160 1
    if (message[0] != '\0')
d206 5
a210 1
	error_exit ();
d251 5
a255 1
	error_exit ();
@


1.1.1.6
log
@New release from Cyclic Software
@
text
@d152 1
a152 1
	cvs_outerr (entire ? entire : "out of memory\n", 0);
@


1.1.1.7
log
@Latest release from Cyclic Software
@
text
@d29 1
a29 1
#ifdef __STDC__
d53 1
a53 1
#ifdef __STDC__
d89 1
a89 1
#if defined (HAVE_VPRINTF) && defined (__STDC__)
d216 1
a216 1
#if defined (HAVE_VPRINTF) && defined (__STDC__)
@


1.1.1.8
log
@Latest version from Cyclic
@
text
@d86 1
a86 7
   no need to print a message.

   I think this is largely cleaned up to the point where it does the right
   thing for the server, whether the normal server_active (child process)
   case or the error_use_protocol (parent process) case.  The one exception
   is that STATUS nonzero for error_use_protocol probably doesn't work yet;
   in that case still need to use the pending_error machinery in server.c.  */
@


1.1.1.9
log
@Latest version from Cyclic
@
text
@d92 1
a92 9
   in that case still need to use the pending_error machinery in server.c.

   error() does not molest errno; some code (e.g. Entries_Open) depends
   on being able to say something like:
      error (0, 0, "foo");
      error (0, errno, "bar");

   */

a104 3
    /* Prevent strtoul (via int_vasprintf) from clobbering it.  */
    int save_errno = errno;

a213 1
    errno = save_errno;
@


1.1.1.10
log
@Latest version from Cyclic
@
text
@d64 2
d83 1
a83 4
   format string with optional args.  This is a very limited printf subset:
   %s, %d, %c, %x and %% only (without anything between the % and the s,
   d, &c).  Callers who want something fancier can use sprintf.

d103 1
a103 1
#if defined (__STDC__)
d113 1
d116 1
d120 7
a126 7
	const char *p;
	char *q;
	char *str;
	int num;
	unsigned int unum;
	int ch;
	unsigned char buf[100];
d128 1
a128 2
	cvs_outerr (program_name, 0);
	if (command_name && *command_name)
d130 2
a131 6
	    cvs_outerr (" ", 1);
	    if (status != 0)
		cvs_outerr ("[", 1);
	    cvs_outerr (command_name, 0);
	    if (status != 0)
		cvs_outerr (" aborted]", 0);
d133 1
a133 5
	cvs_outerr (": ", 2);

	VA_START (args, message);
	p = message;
	while ((q = strchr (p, '%')) != NULL)
d135 12
a146 6
	    static const char msg[] =
		"\ninternal error: bad % in error()\n";
	    if (q - p > 0)
		cvs_outerr (p, q - p);

	    switch (q[1])
d148 19
a166 27
	    case 's':
		str = va_arg (args, char *);
		cvs_outerr (str, strlen (str));
		break;
	    case 'd':
		num = va_arg (args, int);
		sprintf (buf, "%d", num);
		cvs_outerr (buf, strlen (buf));
		break;
	    case 'x':
		unum = va_arg (args, unsigned int);
		sprintf (buf, "%x", unum);
		cvs_outerr (buf, strlen (buf));
		break;
	    case 'c':
		ch = va_arg (args, int);
		buf[0] = ch;
		cvs_outerr (buf, 1);
		break;
	    case '%':
		cvs_outerr ("%", 1);
		break;
	    default:
		cvs_outerr (msg, sizeof (msg) - 1);
		/* Don't just keep going, because q + 1 might point to the
		   terminating '\0'.  */
		goto out;
a167 1
	    p = q + 2;
d169 18
a186 3
	cvs_outerr (p, strlen (p));
    out:
	va_end (args);
d188 1
a188 1
	if (errnum != 0)
d190 4
a193 2
	    cvs_outerr (": ", 2);
	    cvs_outerr (strerror (errnum), 0);
d195 24
a218 1
	cvs_outerr ("\n", 1);
d220 2
@


1.1.1.11
log
@Latest from Cyclic Software
@
text
@d67 1
a67 2
    rcs_cleanup ();
    Lock_Cleanup ();
d125 1
a125 1
	char buf[100];
d204 1
a204 1
fperrmsg (FILE *fp, int status, int errnum, char *message, ...)
d206 1
a206 1
fperrmsg (fp, status, errnum, message, va_alist)
@


1.1.1.12
log
@Latest from Cyclic Software
@
text
@a123 1
	long lnum;
a124 1
	unsigned long ulnum;
a159 15
	    case 'l':
		if (q[2] == 'd')
		{
		    lnum = va_arg (args, long);
		    sprintf (buf, "%ld", lnum);
		}
		else if (q[2] == 'u')
		{
		    ulnum = va_arg (args, unsigned long);
		    sprintf (buf, "%lu", ulnum);
		}
		else goto bad;
		cvs_outerr (buf, strlen (buf));
		q++;
		break;
a173 1
	    bad:
@


