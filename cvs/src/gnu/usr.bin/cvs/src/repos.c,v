head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.22
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.14
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.8
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.9
	OPENBSD_5_1:1.1.1.9.0.44
	OPENBSD_5_0:1.1.1.9.0.42
	OPENBSD_5_0_BASE:1.1.1.9
	OPENBSD_4_9:1.1.1.9.0.40
	OPENBSD_4_9_BASE:1.1.1.9
	OPENBSD_4_8:1.1.1.9.0.38
	OPENBSD_4_8_BASE:1.1.1.9
	OPENBSD_4_7:1.1.1.9.0.34
	OPENBSD_4_7_BASE:1.1.1.9
	OPENBSD_4_6:1.1.1.9.0.36
	OPENBSD_4_6_BASE:1.1.1.9
	OPENBSD_4_5:1.1.1.9.0.32
	OPENBSD_4_5_BASE:1.1.1.9
	OPENBSD_4_4:1.1.1.9.0.30
	OPENBSD_4_4_BASE:1.1.1.9
	OPENBSD_4_3:1.1.1.9.0.28
	OPENBSD_4_3_BASE:1.1.1.9
	OPENBSD_4_2:1.1.1.9.0.26
	OPENBSD_4_2_BASE:1.1.1.9
	OPENBSD_4_1:1.1.1.9.0.24
	OPENBSD_4_1_BASE:1.1.1.9
	OPENBSD_4_0:1.1.1.9.0.22
	OPENBSD_4_0_BASE:1.1.1.9
	OPENBSD_3_9:1.1.1.9.0.20
	OPENBSD_3_9_BASE:1.1.1.9
	OPENBSD_3_8:1.1.1.9.0.18
	OPENBSD_3_8_BASE:1.1.1.9
	OPENBSD_3_7:1.1.1.9.0.16
	OPENBSD_3_7_BASE:1.1.1.9
	OPENBSD_3_6:1.1.1.9.0.14
	OPENBSD_3_6_BASE:1.1.1.9
	OPENBSD_3_5:1.1.1.9.0.12
	OPENBSD_3_5_BASE:1.1.1.9
	OPENBSD_3_4:1.1.1.9.0.10
	OPENBSD_3_4_BASE:1.1.1.9
	OPENBSD_3_3:1.1.1.9.0.8
	OPENBSD_3_3_BASE:1.1.1.9
	OPENBSD_3_2:1.1.1.9.0.6
	OPENBSD_3_2_BASE:1.1.1.9
	OPENBSD_3_1:1.1.1.9.0.4
	OPENBSD_3_1_BASE:1.1.1.9
	OPENBSD_3_0:1.1.1.9.0.2
	OPENBSD_3_0_BASE:1.1.1.9
	cvs-1-11-1p1:1.1.1.9
	OPENBSD_2_9:1.1.1.8.0.2
	OPENBSD_2_9_BASE:1.1.1.8
	cvs-1-11:1.1.1.8
	OPENBSD_2_8:1.1.1.7.0.12
	OPENBSD_2_8_BASE:1.1.1.7
	OPENBSD_2_7:1.1.1.7.0.10
	OPENBSD_2_7_BASE:1.1.1.7
	OPENBSD_2_6:1.1.1.7.0.8
	OPENBSD_2_6_BASE:1.1.1.7
	cvs-1-10-7:1.1.1.7
	OPENBSD_2_5:1.1.1.7.0.6
	OPENBSD_2_5_BASE:1.1.1.7
	cvs-1-10-5:1.1.1.7
	OPENBSD_2_4:1.1.1.7.0.4
	OPENBSD_2_4_BASE:1.1.1.7
	cvs-1-10:1.1.1.7
	cvs-1-9-28:1.1.1.7
	OPENBSD_2_3:1.1.1.7.0.2
	OPENBSD_2_3_BASE:1.1.1.7
	cvs-1-9-26:1.1.1.7
	cvs-1-9-24:1.1.1.7
	OPENBSD_2_2:1.1.1.6.0.4
	OPENBSD_2_2_BASE:1.1.1.6
	cvs-1-9-10:1.1.1.6
	OPENBSD_2_1:1.1.1.6.0.2
	OPENBSD_2_1_BASE:1.1.1.6
	cvs-1-9-8:1.1.1.6
	cvs-1-9-6:1.1.1.6
	cvs-1-9-4:1.1.1.6
	cvs-1-9-2:1.1.1.5
	cvs-1-9:1.1.1.4
	OPENBSD_2_0:1.1.1.3.0.2
	OPENBSD_2_0_BASE:1.1.1.3
	cvs-1-8-1:1.1.1.3
	cvs-1-8:1.1.1.3
	cvs-1-7-2:1.1.1.2
	cvs-1-7-1:1.1.1.1
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.03.04.04.05.15;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	95.12.19.09.21.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.33;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.04.27.19.42.13;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.05.06.22.19.56;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.10.18.03.35.50;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.02.21.06.37.47;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.03.18.01.56.23;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	98.02.22.08.21.30;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2001.02.10.18.57.46;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2001.09.28.22.45.38;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.2
log
@In preparation for getline and getdelim additions to libc, rename getline()
occurrences to get_line().
Based on a diff from Jan Klemkow <j-dot-klemkow-at-wemelug-dot-de> to tech.
@
text
@/*
 * Copyright (c) 1992, Brian Berliner and Jeff Polk
 * Copyright (c) 1989-1992, Brian Berliner
 * 
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS source distribution.
 */

#include <assert.h>
#include "cvs.h"
#include "getline.h"

/* Determine the name of the RCS repository for directory DIR in the
   current working directory, or for the current working directory
   itself if DIR is NULL.  Returns the name in a newly-malloc'd
   string.  On error, gives a fatal error and does not return.
   UPDATE_DIR is the path from where cvs was invoked (for use in error
   messages), and should contain DIR as its last component.
   UPDATE_DIR can be NULL to signify the directory in which cvs was
   invoked.  */

char *
Name_Repository (dir, update_dir)
    char *dir;
    char *update_dir;
{
    FILE *fpin;
    char *xupdate_dir;
    char *repos = NULL;
    size_t repos_allocated = 0;
    char *tmp;
    char *cp;

    if (update_dir && *update_dir)
	xupdate_dir = update_dir;
    else
	xupdate_dir = ".";

    if (dir != NULL)
    {
	tmp = xmalloc (strlen (dir) + sizeof (CVSADM_REP) + 10);
	(void) sprintf (tmp, "%s/%s", dir, CVSADM_REP);
    }
    else
	tmp = xstrdup (CVSADM_REP);

    /*
     * The assumption here is that the repository is always contained in the
     * first line of the "Repository" file.
     */
    fpin = CVS_FOPEN (tmp, "r");

    if (fpin == NULL)
    {
	int save_errno = errno;
	char *cvsadm;

	if (dir != NULL)
	{
	    cvsadm = xmalloc (strlen (dir) + sizeof (CVSADM) + 10);
	    (void) sprintf (cvsadm, "%s/%s", dir, CVSADM);
	}
	else
	    cvsadm = xstrdup (CVSADM);

	if (!isdir (cvsadm))
	{
	    error (0, 0, "in directory %s:", xupdate_dir);
	    error (1, 0, "there is no version here; do '%s checkout' first",
		   program_name);
	}
	free (cvsadm);

	if (existence_error (save_errno))
	{
	    /* FIXME: This is a very poorly worded error message.  It
	       occurs at least in the case where the user manually
	       creates a directory named CVS, so the error message
	       should be more along the lines of "CVS directory found
	       without administrative files; use CVS to create the CVS
	       directory, or rename it to something else if the
	       intention is to store something besides CVS
	       administrative files".  */
	    error (0, 0, "in directory %s:", xupdate_dir);
	    error (1, 0, "*PANIC* administration files missing");
	}

	error (1, save_errno, "cannot open %s", tmp);
    }

    if (get_line (&repos, &repos_allocated, fpin) < 0)
    {
	/* FIXME: should be checking for end of file separately.  */
	error (0, 0, "in directory %s:", xupdate_dir);
	error (1, errno, "cannot read %s", CVSADM_REP);
    }
    if (fclose (fpin) < 0)
	error (0, errno, "cannot close %s", tmp);
    free (tmp);

    if ((cp = strrchr (repos, '\n')) != NULL)
	*cp = '\0';			/* strip the newline */

    /*
     * If this is a relative repository pathname, turn it into an absolute
     * one by tacking on the CVSROOT environment variable. If the CVSROOT
     * environment variable is not set, die now.
     */
    if (! isabsolute(repos))
    {
	char *newrepos;

	if (current_parsed_root == NULL)
	{
	    error (0, 0, "in directory %s:", xupdate_dir);
	    error (0, 0, "must set the CVSROOT environment variable\n");
	    error (0, 0, "or specify the '-d' option to %s.", program_name);
	    error (1, 0, "illegal repository setting");
	}
	if (pathname_levels (repos) > 0)
	{
	    error (0, 0, "in directory %s:", xupdate_dir);
	    error (0, 0, "`..'-relative repositories are not supported.");
	    error (1, 0, "illegal source repository");
	}
	newrepos = xmalloc (strlen (current_parsed_root->directory) + strlen (repos) + 2);
	(void) sprintf (newrepos, "%s/%s", current_parsed_root->directory, repos);
	free (repos);
	repos = newrepos;
    }

    Sanitize_Repository_Name (repos);

    return repos;
}

/*
 * Return a pointer to the repository name relative to CVSROOT from a
 * possibly fully qualified repository
 */
char *
Short_Repository (repository)
    char *repository;
{
    if (repository == NULL)
	return (NULL);

    /* If repository matches CVSroot at the beginning, strip off CVSroot */
    /* And skip leading '/' in rep, in case CVSroot ended with '/'. */
    if (strncmp (current_parsed_root->directory, repository,
		 strlen (current_parsed_root->directory)) == 0)
    {
	char *rep = repository + strlen (current_parsed_root->directory);
	return (*rep == '/') ? rep+1 : rep;
    }
    else
	return (repository);
}

/* Sanitize the repository name (in place) by removing trailing
 * slashes and a trailing "." if present.  It should be safe for
 * callers to use strcat and friends to create repository names.
 * Without this check, names like "/path/to/repos/./foo" and
 * "/path/to/repos//foo" would be created.  For example, one
 * significant case is the CVSROOT-detection code in commit.c.  It
 * decides whether or not it needs to rebuild the administrative file
 * database by doing a string compare.  If we've done a `cvs co .' to
 * get the CVSROOT files, "/path/to/repos/./CVSROOT" and
 * "/path/to/repos/CVSROOT" are the arguments that are compared!
 *
 * This function ends up being called from the same places as
 * strip_path, though what it does is much more conservative.  Many
 * comments about this operation (which was scattered around in
 * several places in the source code) ran thus:
 *
 *    ``repository ends with "/."; omit it.  This sort of thing used
 *    to be taken care of by strip_path.  Now we try to be more
 *    selective.  I suspect that it would be even better to push it
 *    back further someday, so that the trailing "/." doesn't get into
 *    repository in the first place, but we haven't taken things that
 *    far yet.''        --Jim Kingdon (recurse.c, 07-Sep-97)
 *
 * Ahh, all too true.  The major consideration is RELATIVE_REPOS.  If
 * the "/." doesn't end up in the repository while RELATIVE_REPOS is
 * defined, there will be nothing in the CVS/Repository file.  I
 * haven't verified that the remote protocol will handle that
 * correctly yet, so I've not made that change. */

void
Sanitize_Repository_Name (repository)
    char *repository;
{
    size_t len;

    assert (repository != NULL);

    strip_trailing_slashes (repository);

    len = strlen (repository);
    if (len >= 2
	&& repository[len - 1] == '.'
	&& ISDIRSEP (repository[len - 2]))
    {
	repository[len - 2] = '\0';
    }
}
@


1.1
log
@Initial revision
@
text
@d6 1
a6 5
 * specified in the README file that comes with the CVS 1.4 kit.
 * 
 * Name of Repository
 * 
 * Determine the name of the RCS repository and sets "Repository" accordingly.
d9 1
d11 1
d13 8
a20 4
#ifndef lint
static const char rcsid[] = "$CVSid: @@(#)repos.c 1.32 94/09/23 $";
USE(rcsid);
#endif
d28 4
a31 5
    char *ret, *xupdate_dir;
    char repos[PATH_MAX];
    char path[PATH_MAX];
    char tmp[PATH_MAX];
    char cvsadm[PATH_MAX];
d40 4
a43 1
	(void) sprintf (cvsadm, "%s/%s", dir, CVSADM);
d45 7
a51 1
	(void) strcpy (cvsadm, CVSADM);
d53 1
a53 2
    /* sanity checks */
    if (!isdir (cvsadm))
d55 2
a56 4
	error (0, 0, "in directory %s:", xupdate_dir);
	error (1, 0, "there is no version here; do '%s checkout' first",
	       program_name);
    }
d58 7
a64 4
    if (dir != NULL)
	(void) sprintf (tmp, "%s/%s", dir, CVSADM_ENT);
    else
	(void) strcpy (tmp, CVSADM_ENT);
d66 7
a72 5
    if (!isreadable (tmp))
    {
	error (0, 0, "in directory %s:", xupdate_dir);
	error (1, 0, "*PANIC* administration files missing");
    }
d74 13
a86 4
    if (dir != NULL)
	(void) sprintf (tmp, "%s/%s", dir, CVSADM_REP);
    else
	(void) strcpy (tmp, CVSADM_REP);
d88 1
a88 4
    if (!isreadable (tmp))
    {
	error (0, 0, "in directory %s:", xupdate_dir);
	error (1, 0, "*PANIC* administration files missing");
d91 1
a91 7
    /*
     * The assumption here is that the repository is always contained in the
     * first line of the "Repository" file.
     */
    fpin = open_file (tmp, "r");

    if (fgets (repos, PATH_MAX, fpin) == NULL)
d93 1
d97 4
a100 1
    (void) fclose (fpin);
a108 6
    if (strcmp (repos, "..") == 0 || strncmp (repos, "../", 3) == 0)
    {
	error (0, 0, "in directory %s:", xupdate_dir);
	error (0, 0, "`..'-relative repositories are not supported.");
	error (1, 0, "illegal source repository");
    }
d111 3
a113 1
	if (CVSroot == NULL)
d120 10
a129 11
	(void) strcpy (path, repos);
	(void) sprintf (repos, "%s/%s", CVSroot, path);
    }
#ifdef CLIENT_SUPPORT
    if (!client_active && !isdir (repos))
#else
    if (!isdir (repos))
#endif
    {
	error (0, 0, "in directory %s:", xupdate_dir);
	error (1, 0, "there is no repository %s", repos);
d132 3
a134 4
    /* allocate space to return and fill it in */
    strip_path (repos);
    ret = xstrdup (repos);
    return (ret);
d150 2
a151 1
    if (strncmp (CVSroot, repository, strlen (CVSroot)) == 0)
d153 1
a153 1
	char *rep = repository + strlen (CVSroot);
d158 48
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d15 5
@


1.1.1.3
log
@New CVS release from Cyclic Software
@
text
@d7 4
a13 9

/* Determine the name of the RCS repository for directory DIR in the
   current working directory, or for the current working directory
   itself if DIR is NULL.  Returns the name in a newly-malloc'd
   string.  On error, gives a fatal error and does not return.
   UPDATE_DIR is the path from where cvs was invoked (for use in error
   messages), and should contain DIR as its last component.
   UPDATE_DIR can be NULL to signify the directory in which cvs was
   invoked.  */
@


1.1.1.4
log
@New release from Cyclic Software
@
text
@d30 1
d39 24
d67 6
d77 1
a77 27
    fpin = CVS_FOPEN (tmp, "r");

    if (fpin == NULL)
    {
	int save_errno = errno;
	char cvsadm[PATH_MAX];

	if (dir != NULL)
	    (void) sprintf (cvsadm, "%s/%s", dir, CVSADM);
	else
	    (void) strcpy (cvsadm, CVSADM);

	if (!isdir (cvsadm))
	{
	    error (0, 0, "in directory %s:", xupdate_dir);
	    error (1, 0, "there is no version here; do '%s checkout' first",
		   program_name);
	}

	if (existence_error (save_errno))
	{
	    error (0, 0, "in directory %s:", xupdate_dir);
	    error (1, 0, "*PANIC* administration files missing");
	}

	error (1, save_errno, "cannot open %s", tmp);
    }
d101 1
a101 1
	if (CVSroot_original == NULL)
d109 10
a118 1
	(void) sprintf (repos, "%s/%s", CVSroot_directory, path);
d140 1
a140 2
    if (strncmp (CVSroot_directory, repository,
		 strlen (CVSroot_directory)) == 0)
d142 1
a142 1
	char *rep = repository + strlen (CVSroot_directory);
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@a66 8
	    /* FIXME: This is a very poorly worded error message.  It
	       occurs at least in the case where the user manually
	       creates a directory named CVS, so the error message
	       should be more along the lines of "CVS directory found
	       without administrative files; use CVS to create the CVS
	       directory, or rename it to something else if the
	       intention is to store something besides CVS
	       administrative files".  */
d108 1
a108 1
    strip_trailing_slashes (repos);
@


1.1.1.6
log
@New release from Cyclic Software
@
text
@a9 1
#include "getline.h"
d26 4
a29 4
    char *xupdate_dir;
    char *repos = NULL;
    size_t repos_allocated = 0;
    char *tmp;
a37 2
    {
	tmp = xmalloc (strlen (dir) + sizeof (CVSADM_REP) + 10);
a38 1
    }
d40 1
a40 1
	tmp = xstrdup (CVSADM_REP);
d51 1
a51 1
	char *cvsadm;
a53 2
	{
	    cvsadm = xmalloc (strlen (dir) + sizeof (CVSADM) + 10);
a54 1
	}
d56 1
a56 1
	    cvsadm = xstrdup (CVSADM);
a63 1
	free (cvsadm);
a80 1
    free (tmp);
d82 1
a82 1
    if (getline (&repos, &repos_allocated, fpin) < 0)
a83 1
	/* FIXME: should be checking for end of file separately.  */
a103 2
	char *newrepos;

d111 2
a112 4
	newrepos = xmalloc (strlen (CVSroot_directory) + strlen (repos) + 10);
	(void) sprintf (newrepos, "%s/%s", CVSroot_directory, repos);
	free (repos);
	repos = newrepos;
d115 1
d117 2
a118 1
    return repos;
@


1.1.1.7
log
@Latest version from Cyclic
@
text
@d6 1
a6 1
 * specified in the README file that comes with the CVS source distribution.
a8 1
#include <assert.h>
d89 1
d97 1
a97 4
    if (fclose (fpin) < 0)
	error (0, errno, "cannot close %s", tmp);
    free (tmp);

d129 1
a129 2
    Sanitize_Repository_Name (repos);

a153 48
}

/* Sanitize the repository name (in place) by removing trailing
 * slashes and a trailing "." if present.  It should be safe for
 * callers to use strcat and friends to create repository names.
 * Without this check, names like "/path/to/repos/./foo" and
 * "/path/to/repos//foo" would be created.  For example, one
 * significant case is the CVSROOT-detection code in commit.c.  It
 * decides whether or not it needs to rebuild the administrative file
 * database by doing a string compare.  If we've done a `cvs co .' to
 * get the CVSROOT files, "/path/to/repos/./CVSROOT" and
 * "/path/to/repos/CVSROOT" are the arguments that are compared!
 *
 * This function ends up being called from the same places as
 * strip_path, though what it does is much more conservative.  Many
 * comments about this operation (which was scattered around in
 * several places in the source code) ran thus:
 *
 *    ``repository ends with "/."; omit it.  This sort of thing used
 *    to be taken care of by strip_path.  Now we try to be more
 *    selective.  I suspect that it would be even better to push it
 *    back further someday, so that the trailing "/." doesn't get into
 *    repository in the first place, but we haven't taken things that
 *    far yet.''        --Jim Kingdon (recurse.c, 07-Sep-97)
 *
 * Ahh, all too true.  The major consideration is RELATIVE_REPOS.  If
 * the "/." doesn't end up in the repository while RELATIVE_REPOS is
 * defined, there will be nothing in the CVS/Repository file.  I
 * haven't verified that the remote protocol will handle that
 * correctly yet, so I've not made that change. */

void
Sanitize_Repository_Name (repository)
    char *repository;
{
    size_t len;

    assert (repository != NULL);

    strip_trailing_slashes (repository);

    len = strlen (repository);
    if (len >= 2
	&& repository[len - 1] == '.'
	&& ISDIRSEP (repository[len - 2]))
    {
	repository[len - 2] = '\0';
    }
@


1.1.1.8
log
@Latest from Cyclic Software
@
text
@d109 6
a124 6
	}
	if (pathname_levels (repos) > 0)
	{
	    error (0, 0, "in directory %s:", xupdate_dir);
	    error (0, 0, "`..'-relative repositories are not supported.");
	    error (1, 0, "illegal source repository");
@


1.1.1.9
log
@Latest from Cyclic Software
@
text
@d113 1
a113 1
	if (current_parsed_root == NULL)
d126 2
a127 2
	newrepos = xmalloc (strlen (current_parsed_root->directory) + strlen (repos) + 2);
	(void) sprintf (newrepos, "%s/%s", current_parsed_root->directory, repos);
d150 2
a151 2
    if (strncmp (current_parsed_root->directory, repository,
		 strlen (current_parsed_root->directory)) == 0)
d153 1
a153 1
	char *rep = repository + strlen (current_parsed_root->directory);
@


