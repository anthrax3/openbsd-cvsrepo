head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.15
	OPENBSD_6_0:1.1.1.15.0.62
	OPENBSD_6_0_BASE:1.1.1.15
	OPENBSD_5_9:1.1.1.15.0.58
	OPENBSD_5_9_BASE:1.1.1.15
	OPENBSD_5_8:1.1.1.15.0.60
	OPENBSD_5_8_BASE:1.1.1.15
	OPENBSD_5_7:1.1.1.15.0.52
	OPENBSD_5_7_BASE:1.1.1.15
	OPENBSD_5_6:1.1.1.15.0.56
	OPENBSD_5_6_BASE:1.1.1.15
	OPENBSD_5_5:1.1.1.15.0.54
	OPENBSD_5_5_BASE:1.1.1.15
	OPENBSD_5_4:1.1.1.15.0.50
	OPENBSD_5_4_BASE:1.1.1.15
	OPENBSD_5_3:1.1.1.15.0.48
	OPENBSD_5_3_BASE:1.1.1.15
	OPENBSD_5_2:1.1.1.15.0.46
	OPENBSD_5_2_BASE:1.1.1.15
	OPENBSD_5_1_BASE:1.1.1.15
	OPENBSD_5_1:1.1.1.15.0.44
	OPENBSD_5_0:1.1.1.15.0.42
	OPENBSD_5_0_BASE:1.1.1.15
	OPENBSD_4_9:1.1.1.15.0.40
	OPENBSD_4_9_BASE:1.1.1.15
	OPENBSD_4_8:1.1.1.15.0.38
	OPENBSD_4_8_BASE:1.1.1.15
	OPENBSD_4_7:1.1.1.15.0.34
	OPENBSD_4_7_BASE:1.1.1.15
	OPENBSD_4_6:1.1.1.15.0.36
	OPENBSD_4_6_BASE:1.1.1.15
	OPENBSD_4_5:1.1.1.15.0.32
	OPENBSD_4_5_BASE:1.1.1.15
	OPENBSD_4_4:1.1.1.15.0.30
	OPENBSD_4_4_BASE:1.1.1.15
	OPENBSD_4_3:1.1.1.15.0.28
	OPENBSD_4_3_BASE:1.1.1.15
	OPENBSD_4_2:1.1.1.15.0.26
	OPENBSD_4_2_BASE:1.1.1.15
	OPENBSD_4_1:1.1.1.15.0.24
	OPENBSD_4_1_BASE:1.1.1.15
	OPENBSD_4_0:1.1.1.15.0.22
	OPENBSD_4_0_BASE:1.1.1.15
	OPENBSD_3_9:1.1.1.15.0.20
	OPENBSD_3_9_BASE:1.1.1.15
	OPENBSD_3_8:1.1.1.15.0.18
	OPENBSD_3_8_BASE:1.1.1.15
	OPENBSD_3_7:1.1.1.15.0.16
	OPENBSD_3_7_BASE:1.1.1.15
	OPENBSD_3_6:1.1.1.15.0.14
	OPENBSD_3_6_BASE:1.1.1.15
	OPENBSD_3_5:1.1.1.15.0.12
	OPENBSD_3_5_BASE:1.1.1.15
	OPENBSD_3_4:1.1.1.15.0.10
	OPENBSD_3_4_BASE:1.1.1.15
	OPENBSD_3_3:1.1.1.15.0.8
	OPENBSD_3_3_BASE:1.1.1.15
	OPENBSD_3_2:1.1.1.15.0.6
	OPENBSD_3_2_BASE:1.1.1.15
	OPENBSD_3_1:1.1.1.15.0.4
	OPENBSD_3_1_BASE:1.1.1.15
	OPENBSD_3_0:1.1.1.15.0.2
	OPENBSD_3_0_BASE:1.1.1.15
	cvs-1-11-1p1:1.1.1.15
	OPENBSD_2_9:1.1.1.14.0.2
	OPENBSD_2_9_BASE:1.1.1.14
	cvs-1-11:1.1.1.14
	OPENBSD_2_8:1.1.1.13.0.6
	OPENBSD_2_8_BASE:1.1.1.13
	OPENBSD_2_7:1.1.1.13.0.4
	OPENBSD_2_7_BASE:1.1.1.13
	OPENBSD_2_6:1.1.1.13.0.2
	OPENBSD_2_6_BASE:1.1.1.13
	cvs-1-10-7:1.1.1.13
	OPENBSD_2_5:1.1.1.12.0.2
	OPENBSD_2_5_BASE:1.1.1.12
	cvs-1-10-5:1.1.1.12
	OPENBSD_2_4:1.1.1.11.0.2
	OPENBSD_2_4_BASE:1.1.1.11
	cvs-1-10:1.1.1.11
	cvs-1-9-28:1.1.1.10
	OPENBSD_2_3:1.1.1.10.0.2
	OPENBSD_2_3_BASE:1.1.1.10
	cvs-1-9-26:1.1.1.10
	cvs-1-9-24:1.1.1.10
	OPENBSD_2_2:1.1.1.9.0.2
	OPENBSD_2_2_BASE:1.1.1.9
	cvs-1-9-10:1.1.1.9
	OPENBSD_2_1:1.1.1.8.0.2
	OPENBSD_2_1_BASE:1.1.1.8
	cvs-1-9-8:1.1.1.8
	cvs-1-9-6:1.1.1.7
	cvs-1-9-4:1.1.1.7
	cvs-1-9-2:1.1.1.6
	cvs-1-9:1.1.1.5
	OPENBSD_2_0:1.1.1.4.0.2
	OPENBSD_2_0_BASE:1.1.1.4
	cvs-1-8-1:1.1.1.4
	cvs-1-8:1.1.1.4
	cvs-1-7-2:1.1.1.3
	cvs-1-7-1:1.1.1.2
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	95.12.19.09.21.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.34;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.01.30.00.18.33;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.04.27.19.42.22;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.05.06.22.20.08;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	96.10.18.03.35.57;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.02.21.06.37.55;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	97.03.18.01.56.30;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	97.04.21.04.28.00;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	97.06.28.03.29.03;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	98.02.22.08.21.40;	author tholo;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	98.08.22.20.54.04;	author tholo;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	99.02.28.21.33.40;	author tholo;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	99.09.10.05.06.28;	author tholo;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2001.02.10.18.57.48;	author tholo;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2001.09.28.22.45.38;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 1992, Brian Berliner and Jeff Polk
 * Copyright (c) 1989-1992, Brian Berliner
 * 
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS 1.4 kit.
 * 
 * Tag
 * 
 * Add or delete a symbolic name to an RCS file, or a collection of RCS files.
 * Uses the checked out revision in the current directory.
 */

#include "cvs.h"

#ifndef lint
static const char rcsid[] = "$CVSid: @@(#)tag.c 1.60 94/09/30 $";
USE(rcsid);
#endif

static int check_fileproc PROTO((char *file, char *update_dir,
     			 char *repository, List * entries,
			 List * srcfiles));
static int check_filesdoneproc PROTO((int err, char *repos, char *update_dir));
static int pretag_proc PROTO((char *repository, char *filter));
static void masterlist_delproc PROTO((Node *p));
static void tag_delproc PROTO((Node *p));
static int pretag_list_proc PROTO((Node *p, void *closure));

static Dtype tag_dirproc PROTO((char *dir, char *repos, char *update_dir));
static int tag_fileproc PROTO((char *file, char *update_dir,
			 char *repository, List * entries,
			 List * srcfiles));

static char *numtag;
static char *date = NULL;
static char *symtag;
static int delete;			/* adding a tag by default */
static int branch_mode;			/* make an automagic "branch" tag */
static int local;			/* recursive by default */
static int force_tag_match = 1;         /* force tag to match by default */
static int force_tag_move;		/* don't force tag to move by default */

struct tag_info
{
    Ctype status;
    char *rev;
    char *tag;
    char *options;
};

struct master_lists
{
    List *tlist;
};

static List *mtlist;
static List *tlist;

static const char *const tag_usage[] =
{
    "Usage: %s %s [-lRF] [-b] [-d] tag [files...]\n",
    "\t-l\tLocal directory only, not recursive.\n",
    "\t-R\tProcess directories recursively.\n",
    "\t-d\tDelete the given Tag.\n",
    "\t-[rD]\tExisting tag or date.\n",
    "\t-f\tForce a head revision if tag etc not found.\n",
    "\t-b\tMake the tag a \"branch\" tag, allowing concurrent development.\n",
    "\t-F\tMove tag if it already exists\n",
    NULL
};

int
tag (argc, argv)
    int argc;
    char **argv;
{
    int c;
    int err = 0;

    if (argc == -1)
	usage (tag_usage);

    optind = 1;
    while ((c = getopt (argc, argv, "FQqlRdr:D:bf")) != -1)
    {
	switch (c)
	{
	    case 'Q':
	    case 'q':
#ifdef SERVER_SUPPORT
		/* The CVS 1.5 client sends these options (in addition to
		   Global_option requests), so we must ignore them.  */
		if (!server_active)
#endif
		    error (1, 0,
			   "-q or -Q must be specified before \"%s\"",
			   command_name);
		break;
	    case 'l':
		local = 1;
		break;
	    case 'R':
		local = 0;
		break;
	    case 'd':
		delete = 1;
		break;
            case 'r':
                numtag = optarg;
                break;
            case 'D':
                if (date)
                    free (date);
                date = Make_Date (optarg);
                break;
	    case 'f':
		force_tag_match = 0;
		break;
	    case 'b':
		branch_mode = 1;
		break;
            case 'F':
		force_tag_move = 1;
		break;
	    case '?':
	    default:
		usage (tag_usage);
		break;
	}
    }
    argc -= optind;
    argv += optind;

    if (argc == 0)
	usage (tag_usage);
    symtag = argv[0];
    argc--;
    argv++;

    if (delete && branch_mode)
	error (0, 0, "warning: -b ignored with -d options");
    RCS_check_tag (symtag);

#ifdef CLIENT_SUPPORT
    if (client_active)
    {
	/* We're the client side.  Fire up the remote server.  */
	start_server ();
	
	ign_setup ();

	if (local)
	    send_arg("-l");
	if (delete)
	    send_arg("-d");
	if (branch_mode)
	    send_arg("-b");
	if (force_tag_move)
	    send_arg("-F");

	send_arg (symtag);

#if 0
	/* FIXME:  We shouldn't have to send current files, but I'm not sure
	   whether it works.  So send the files --
	   it's slower but it works.  */
	send_file_names (argc, argv);
#else
	send_files (argc, argv, local, 0);
#endif
	if (fprintf (to_server, "tag\n") < 0)
	    error (1, errno, "writing to server");
        return get_responses_and_close ();
    }
#endif

    /* check to make sure they are authorized to tag all the 
       specified files in the repository */

    mtlist = getlist();
    err = start_recursion (check_fileproc, check_filesdoneproc,
                           (Dtype (*) ()) NULL, (int (*) ()) NULL,
                           argc, argv, local, W_LOCAL, 0, 1,
                           (char *) NULL, 1, 0);
    
    if (err)
    {
       error (1, 0, "correct the above errors first!");
    }
     
    /* start the recursion processor */
    err = start_recursion (tag_fileproc, (int (*) ()) NULL, tag_dirproc,
			   (int (*) ()) NULL, argc, argv, local,
			   W_LOCAL, 0, 1, (char *) NULL, 1, 0);
    dellist(&mtlist);
    return (err);
}

/* check file that is to be tagged */
/* All we do here is add it to our list */

static int
check_fileproc(file, update_dir, repository, entries, srcfiles)
    char *file;
    char *update_dir;
    char *repository;
    List * entries;
    List * srcfiles;
{
    char *xdir;
    Node *p;
    Vers_TS *vers;
    
    if (update_dir[0] == '\0')
	xdir = ".";
    else
	xdir = update_dir;
    if ((p = findnode (mtlist, xdir)) != NULL)
    {
	tlist = ((struct master_lists *) p->data)->tlist;
    }
    else
    {
	struct master_lists *ml;
        
	tlist = getlist ();
	p = getnode ();
	p->key = xstrdup (xdir);
	p->type = UPDATE;
	ml = (struct master_lists *)
	    xmalloc (sizeof (struct master_lists));
	ml->tlist = tlist;
	p->data = (char *) ml;
	p->delproc = masterlist_delproc;
	(void) addnode (mtlist, p);
    }
    /* do tlist */
    p = getnode ();
    p->key = xstrdup (file);
    p->type = UPDATE;
    p->delproc = tag_delproc;
    vers = Version_TS (repository, (char *) NULL, (char *) NULL, (char *) NULL,
		       file, 0, 0, entries, srcfiles);
    p->data = RCS_getversion(vers->srcfile, numtag, date, force_tag_match);
    if (p->data != NULL)
    {
        int addit = 1;
        char *oversion;
        
        oversion = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1);
        if (oversion == NULL) 
        {
            if (delete)
            {
                addit = 0;
            }
        }
        else if (strcmp(oversion, p->data) == 0)
        {
            addit = 0;
        }
        else if (!force_tag_move)
        {
            addit = 0;
        }
        if (oversion != NULL)
        {
            free(oversion);
        }
        if (!addit)
        {
            free(p->data);
            p->data = NULL;
        }
    }
    freevers_ts(&vers);
    (void) addnode (tlist, p);
    return (0);
}
                         
static int
check_filesdoneproc(err, repos, update_dir)
    int err;
    char *repos;
    char *update_dir;
{
    int n;
    Node *p;

    p = findnode(mtlist, update_dir);
    if (p != NULL)
    {
        tlist = ((struct master_lists *) p->data)->tlist;
    }
    else
    {
        tlist = (List *) NULL;
    }
    if ((tlist == NULL) || (tlist->list->next == tlist->list))
    {
        return (err);
    }
    if ((n = Parse_Info(CVSROOTADM_TAGINFO, repos, pretag_proc, 1)) > 0)
    {
        error (0, 0, "Pre-tag check failed");
        err += n;
    }
    return (err);
}

static int
pretag_proc(repository, filter)
    char *repository;
    char *filter;
{
    if (filter[0] == '/')
    {
        char *s, *cp;

        s = xstrdup(filter);
        for (cp=s; *cp; cp++)
        {
            if (isspace(*cp))
            {
                *cp = '\0';
                break;
            }
        }
        if (!isfile(s))
        {
            error (0, errno, "cannot find pre-tag filter '%s'", s);
            free(s);
            return (1);
        }
        free(s);
    }
    run_setup("%s %s %s %s",
              filter,
              symtag,
              delete ? "del" : force_tag_move ? "mov" : "add",
              repository);
    walklist(tlist, pretag_list_proc, NULL);
    return (run_exec(RUN_TTY, RUN_TTY, RUN_TTY, RUN_NORMAL|RUN_REALLY));
}

static void
masterlist_delproc(p)
    Node *p;
{
    struct master_lists *ml;

    ml = (struct master_lists *)p->data;
    dellist(&ml->tlist);
    free(ml);
    return;
}

static void
tag_delproc(p)
    Node *p;
{
    if (p->data != NULL)
    {
        free(p->data);
        p->data = NULL;
    }
    return;
}

static int
pretag_list_proc(p, closure)
    Node *p;
    void *closure;
{
    if (p->data != NULL)
    {
        run_arg(p->key);
        run_arg(p->data);
    }
    return (0);
}


/*
 * Called to tag a particular file (the currently checked out version is
 * tagged with the specified tag - or the specified tag is deleted).
 */
/* ARGSUSED */
static int
tag_fileproc (file, update_dir, repository, entries, srcfiles)
    char *file;
    char *update_dir;
    char *repository;
    List *entries;
    List *srcfiles;
{
    char *version, *oversion;
    char *nversion = NULL;
    char *rev;
    Vers_TS *vers;
    int retcode = 0;

    vers = Version_TS (repository, (char *) NULL, (char *) NULL, (char *) NULL,
		       file, 0, 0, entries, srcfiles);

    if ((numtag != NULL) || (date != NULL))
    {
        nversion = RCS_getversion(vers->srcfile,
                                  numtag,
                                  date,
                                  force_tag_match);
        if (nversion == NULL)
        {
	    freevers_ts (&vers);
            return (0);
        }
    }
    if (delete)
    {

	/*
	 * If -d is specified, "force_tag_match" is set, so that this call to
	 * Version_Number() will return a NULL version string if the symbolic
	 * tag does not exist in the RCS file.
	 * 
	 * This is done here because it's MUCH faster than just blindly calling
	 * "rcs" to remove the tag... trust me.
	 */

	version = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1);
	if (version == NULL || vers->srcfile == NULL)
	{
	    freevers_ts (&vers);
	    return (0);
	}
	free (version);

	if ((retcode = RCS_deltag(vers->srcfile->path, symtag, 1)) != 0) 
	{
	    if (!quiet)
		error (0, retcode == -1 ? errno : 0,
		       "failed to remove tag %s from %s", symtag,
		       vers->srcfile->path);
	    freevers_ts (&vers);
	    return (1);
	}

	/* warm fuzzies */
	if (!really_quiet)
	{
	    if (update_dir[0])
		(void) printf ("D %s/%s\n", update_dir, file);
	    else
		(void) printf ("D %s\n", file);
	}

	freevers_ts (&vers);
	return (0);
    }

    /*
     * If we are adding a tag, we need to know which version we have checked
     * out and we'll tag that version.
     */
    if (nversion == NULL)
    {
        version = vers->vn_user;
    }
    else
    {
        version = nversion;
    }
    if (version == NULL)
    {
	freevers_ts (&vers);
	return (0);
    }
    else if (strcmp (version, "0") == 0)
    {
	if (!quiet)
	    error (0, 0, "couldn't tag added but un-commited file `%s'", file);
	freevers_ts (&vers);
	return (0);
    }
    else if (version[0] == '-')
    {
	if (!quiet)
	    error (0, 0, "skipping removed but un-commited file `%s'", file);
	freevers_ts (&vers);
	return (0);
    }
    else if (vers->srcfile == NULL)
    {
	if (!quiet)
	    error (0, 0, "cannot find revision control file for `%s'", file);
	freevers_ts (&vers);
	return (0);
    }

    /*
     * As an enhancement for the case where a tag is being re-applied to a
     * large number of files, make one extra call to Version_Number to see if
     * the tag is already set in the RCS file.  If so, check to see if it
     * needs to be moved.  If not, do nothing.  This will likely save a lot of
     * time when simply moving the tag to the "current" head revisions of a
     * module -- which I have found to be a typical tagging operation.
     */
    rev = branch_mode ? RCS_magicrev (vers->srcfile, version) : version;
    oversion = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1);
    if (oversion != NULL)
    {
       int isbranch = RCS_isbranch (file, symtag, srcfiles);

       /*
	* if versions the same and neither old or new are branches don't have 
	* to do anything
	*/
       if (strcmp (version, oversion) == 0 && !branch_mode && !isbranch)
       {
	  free (oversion);
	  freevers_ts (&vers);
	  return (0);
       }
       
       if (!force_tag_move) {		/* we're NOT going to move the tag */
	  if (update_dir[0])
	     (void) printf ("W %s/%s", update_dir, file);
	  else
	     (void) printf ("W %s", file);

	  (void) printf (" : %s already exists on %s %s", 
			 symtag, isbranch ? "branch" : "version", oversion);
	  (void) printf (" : NOT MOVING tag to %s %s\n", 
			 branch_mode ? "branch" : "version", rev);
	  free (oversion);
	  freevers_ts (&vers);
	  return (0);
       }
       free (oversion);
    }

    if ((retcode = RCS_settag(vers->srcfile->path, symtag, rev)) != 0)
    {
	error (1, retcode == -1 ? errno : 0,
	       "failed to set tag %s to revision %s in %s",
	       symtag, rev, vers->srcfile->path);
	freevers_ts (&vers);
	return (1);
    }

    /* more warm fuzzies */
    if (!really_quiet)
    {
	if (update_dir[0])
	    (void) printf ("T %s/%s\n", update_dir, file);
	else
	    (void) printf ("T %s\n", file);
    }

    freevers_ts (&vers);
    if (nversion != NULL)
    {
        free(nversion);
    }
    return (0);
}

/*
 * Print a warm fuzzy message
 */
/* ARGSUSED */
static Dtype
tag_dirproc (dir, repos, update_dir)
    char *dir;
    char *repos;
    char *update_dir;
{
    if (!quiet)
	error (0, 0, "%s %s", delete ? "Untagging" : "Tagging", update_dir);
    return (R_PROCESS);
}
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Upgrade to 1.7.1 snapshot
@
text
@a14 1
#include "save-cwd.h"
d62 1
a62 1
    "Usage: %s %s [-lRF] [-b] [-d] [-r tag|-D date] tag [files...]\n",
a140 2
    if (date && numtag)
	error (1, 0, "-r and -D options are mutually exclusive");
a161 5
	if (numtag)
	    option_with_arg ("-r", numtag);
	if (date)
	    client_senddate (date);

d164 1
a164 1
	send_file_names (argc, argv);
d168 2
d171 3
a173 1
	send_to_server ("tag\012", 0);
a177 3
    if (numtag != NULL)
	tag_check_valid (numtag, argc, argv, local, 0, "");

d183 1
a183 1
                           (DIRENTPROC) NULL, (DIRLEAVEPROC) NULL,
d193 2
a194 2
    err = start_recursion (tag_fileproc, (FILESDONEPROC) NULL, tag_dirproc,
			   (DIRLEAVEPROC) NULL, argc, argv, local,
d245 1
a245 1
    p->data = RCS_getversion(vers->srcfile, numtag, date, force_tag_match, 0);
d251 1
a251 1
        oversion = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1, 0);
d412 1
a412 1
                                  force_tag_match, 0);
d431 1
a431 1
	version = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1, 0);
d510 1
a510 1
    oversion = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1, 0);
a581 212
}

/* Code relating to the val-tags file.  Note that this file has no way
   of knowing when a tag has been deleted.  The problem is that there
   is no way of knowing whether a tag still exists somewhere, when we
   delete it some places.  Using per-directory val-tags files (in
   CVSREP) might be better, but that might slow down the process of
   verifying that a tag is correct (maybe not, for the likely cases,
   if carefully done), and/or be harder to implement correctly.  */

struct val_args {
    char *name;
    int found;
};

/* Pass as a static until we get around to fixing start_recursion to pass along
   a void * where we can stash it.  */
static struct val_args *val_args_static;

static int val_fileproc PROTO ((char *, char *, char *, List *, List *));

static int
val_fileproc (file, update_dir, repository, entries, srcfiles)
    char *file;
    char *update_dir;
    char *repository;
    List *entries;
    List *srcfiles;
{
    RCSNode *rcsdata;
    Node *node;
    struct val_args *args = val_args_static;

    node = findnode (srcfiles, file);
    if (node == NULL)
	/* Not sure this can happen, after all we passed only
	   W_REPOS | W_ATTIC.  */
	return 0;
    rcsdata = (RCSNode *) node->data;
    if (RCS_gettag (rcsdata, args->name, 1, 0) != NULL)
    {
	/* FIXME: should find out a way to stop the search at this point.  */
	args->found = 1;
    }
    return 0;
}

static Dtype val_direntproc PROTO ((char *, char *, char *));

static Dtype
val_direntproc (dir, repository, update_dir)
    char *dir;
    char *repository;
    char *update_dir;
{
    /* This is not quite right--it doesn't get right the case of "cvs
       update -d -r foobar" where foobar is a tag which exists only in
       files in a directory which does not exist yet, but which is
       about to be created.  */
    if (isdir (dir))
	return 0;
    return R_SKIP_ALL;
}

/* Check to see whether NAME is a valid tag.  If so, return.  If not
   print an error message and exit.  ARGC, ARGV, LOCAL, and AFLAG specify
   which files we will be operating on.

   REPOSITORY is the repository if we need to cd into it, or NULL if
   we are already there, or "" if we should do a W_LOCAL recursion.
   Sorry for three cases, but the "" case is needed in case the
   working directories come from diverse parts of the repository, the
   NULL case avoids an unneccesary chdir, and the non-NULL, non-""
   case is needed for checkout, where we don't want to chdir if the
   tag is found in CVSROOTADM_VALTAGS, but there is not (yet) any
   local directory.  */
void
tag_check_valid (name, argc, argv, local, aflag, repository)
    char *name;
    int argc;
    char **argv;
    int local;
    int aflag;
    char *repository;
{
    DBM *db;
    char *valtags_filename;
    int err;
    datum mytag;
    struct val_args the_val_args;
    struct saved_cwd cwd;
    int which;

    /* Numeric tags require only a syntactic check.  */
    if (isdigit (name[0]))
    {
	char *p;
	for (p = name; *p != '\0'; ++p)
	{
	    if (!(isdigit (*p) || *p == '.'))
		error (1, 0, "\
Numeric tag %s contains characters other than digits and '.'", name);
	}
	return;
    }

    mytag.dptr = name;
    mytag.dsize = strlen (name);

    valtags_filename = xmalloc (strlen (CVSroot) + sizeof CVSROOTADM
				+ sizeof CVSROOTADM_HISTORY + 20);
    strcpy (valtags_filename, CVSroot);
    strcat (valtags_filename, "/");
    strcat (valtags_filename, CVSROOTADM);
    strcat (valtags_filename, "/");
    strcat (valtags_filename, CVSROOTADM_VALTAGS);
    db = dbm_open (valtags_filename, O_RDWR, 0666);
    if (db == NULL)
    {
	if (!existence_error (errno))
	    error (1, errno, "cannot read %s", valtags_filename);

	/* If the file merely fails to exist, we just keep going and create
	   it later if need be.  */
    }
    else
    {
	datum val;

	val = dbm_fetch (db, mytag);
	if (val.dptr != NULL)
	{
	    /* Found.  The tag is valid.  */
	    dbm_close (db);
	    free (valtags_filename);
	    return;
	}
	/* FIXME: should check errors somehow (add dbm_error to myndbm.c?).  */
    }

    /* We didn't find the tag in val-tags, so look through all the RCS files
       to see whether it exists there.  Yes, this is expensive, but there
       is no other way to cope with a tag which might have been created
       by an old version of CVS, from before val-tags was invented.  */

    the_val_args.name = name;
    the_val_args.found = 0;
    val_args_static = &the_val_args;

    which = W_REPOS | W_ATTIC;

    if (repository != NULL)
    {
	if (repository[0] == '\0')
	    which |= W_LOCAL;
	else
	{
	    if (save_cwd (&cwd))
		exit (1);
	    if (chdir (repository) < 0)
		error (1, errno, "cannot change to %s directory", repository);
	}
    }

    err = start_recursion (val_fileproc, (FILESDONEPROC) NULL,
			   val_direntproc, (DIRLEAVEPROC) NULL,
			   argc, argv, local, which, aflag,
			   1, NULL, 1, 0);
    if (repository != NULL && repository[0] != '\0')
    {
	if (restore_cwd (&cwd, NULL))
	    exit (1);
	free_cwd (&cwd);
    }

    if (!the_val_args.found)
	error (1, 0, "no such tag %s", name);
    else
    {
	/* The tags is valid but not mentioned in val-tags.  Add it.  */
	datum value;

	if (noexec)
	{
	    if (db != NULL)
		dbm_close (db);
	    free (valtags_filename);
	    return;
	}

	if (db == NULL)
	{
	    mode_t omask;
	    omask = umask (cvsumask);
	    db = dbm_open (valtags_filename, O_RDWR | O_CREAT | O_TRUNC, 0666);
	    (void) umask (omask);

	    if (db == NULL)
	    {
		error (0, errno, "cannot create %s", valtags_filename);
		free (valtags_filename);
		return;
	    }
	}
	value.dptr = "y";
	value.dsize = 1;
	if (dbm_store (db, mytag, value, DBM_REPLACE) < 0)
	    error (0, errno, "cannot store %s into %s", name,
		   valtags_filename);
	dbm_close (db);
    }
    free (valtags_filename);
@


1.1.1.3
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d15 1
a15 1
#include "savecwd.h"
d17 8
a24 1
static int check_fileproc PROTO((struct file_info *finfo));
d32 3
a34 1
static int tag_fileproc PROTO((struct file_info *finfo));
d39 1
a39 1
static int delete_flag;			/* adding a tag by default */
d108 1
a108 1
		delete_flag = 1;
d144 1
a144 1
    if (delete_flag && branch_mode)
d158 1
a158 1
	if (delete_flag)
d211 6
a216 2
check_fileproc (finfo)
    struct file_info *finfo;
d222 1
a222 1
    if (finfo->update_dir[0] == '\0')
d225 1
a225 1
	xdir = finfo->update_dir;
d247 1
a247 1
    p->key = xstrdup (finfo->file);
d250 2
a251 2
    vers = Version_TS (finfo->repository, (char *) NULL, (char *) NULL, (char *) NULL,
		       finfo->file, 0, 0, finfo->entries, finfo->srcfiles);
d261 1
a261 1
            if (delete_flag)
d348 1
a348 1
              delete_flag ? "del" : force_tag_move ? "mov" : "add",
d398 6
a403 2
tag_fileproc (finfo)
    struct file_info *finfo;
d411 2
a412 2
    vers = Version_TS (finfo->repository, (char *) NULL, (char *) NULL, (char *) NULL,
		       finfo->file, 0, 0, finfo->entries, finfo->srcfiles);
d426 1
a426 1
    if (delete_flag)
d431 1
a431 1
	 * RCS_getversion() will return a NULL version string if the symbolic
d459 2
a460 2
	    if (finfo->update_dir[0])
		(void) printf ("D %s/%s\n", finfo->update_dir, finfo->file);
d462 1
a462 1
		(void) printf ("D %s\n", finfo->file);
d489 1
a489 1
	    error (0, 0, "couldn't tag added but un-commited file `%s'", finfo->file);
d496 1
a496 1
	    error (0, 0, "skipping removed but un-commited file `%s'", finfo->file);
d503 1
a503 1
	    error (0, 0, "cannot find revision control file for `%s'", finfo->file);
d510 2
a511 2
     * large number of files, make one extra call to RCS_getversion to see
     * if the tag is already set in the RCS file.  If so, check to see if it
d520 1
a520 1
       int isbranch = RCS_isbranch (finfo->file, symtag, finfo->srcfiles);
d534 2
a535 2
	  if (finfo->update_dir[0])
	     (void) printf ("W %s/%s", finfo->update_dir, finfo->file);
d537 1
a537 1
	     (void) printf ("W %s", finfo->file);
d562 2
a563 2
	if (finfo->update_dir[0])
	    (void) printf ("T %s/%s\n", finfo->update_dir, finfo->file);
d565 1
a565 1
	    (void) printf ("T %s\n", finfo->file);
d568 1
a572 1
    freevers_ts (&vers);
d587 1
a587 1
	error (0, 0, "%s %s", delete_flag ? "Untagging" : "Tagging", update_dir);
d608 1
a608 1
static int val_fileproc PROTO ((struct file_info *finfo));
d611 6
a616 2
val_fileproc (finfo)
    struct file_info *finfo;
a620 1
    char *tag;
d622 1
a622 1
    node = findnode (finfo->srcfiles, finfo->file);
d628 1
a628 3

    tag = RCS_gettag (rcsdata, args->name, 1, 0);
    if (tag != NULL)
a631 1
	free (tag);
@


1.1.1.4
log
@New CVS release from Cyclic Software
@
text
@d163 1
a163 1
	send_file_names (argc, argv, SEND_EXPAND_WILD);
d237 2
a238 9
    vers = Version_TS (finfo->repository, (char *) NULL, (char *) NULL,
		       (char *) NULL, finfo->file, 0, 0,
		       finfo->entries, finfo->rcs);
    if (vers->srcfile == NULL)
    {
        if (!really_quiet)
	    error (0, 0, "nothing known about %s", finfo->file);
	return (1);
    }
d395 1
a395 1
		       finfo->file, 0, 0, finfo->entries, finfo->rcs);
d442 4
a445 1
	    (void) printf ("D %s\n", finfo->fullname);
d503 1
a503 1
	int isbranch = RCS_isbranch (finfo->rcs, symtag);
d505 26
a530 25
	/*
	 * if versions the same and neither old or new are branches don't have 
	 * to do anything
	 */
	if (strcmp (version, oversion) == 0 && !branch_mode && !isbranch)
	{
	    free (oversion);
	    freevers_ts (&vers);
	    return (0);
	}

	if (!force_tag_move)
	{
	    /* we're NOT going to move the tag */
	    (void) printf ("W %s", finfo->fullname);

	    (void) printf (" : %s already exists on %s %s", 
			   symtag, isbranch ? "branch" : "version", oversion);
	    (void) printf (" : NOT MOVING tag to %s %s\n", 
			   branch_mode ? "branch" : "version", rev);
	    free (oversion);
	    freevers_ts (&vers);
	    return (0);
	}
	free (oversion);
d545 4
a548 1
	(void) printf ("T %s\n", finfo->fullname);
d553 1
a553 1
        free (nversion);
d598 1
d602 2
a603 1
    if ((rcsdata = finfo->rcs) == NULL)
d607 1
d730 1
a730 1
		exit (EXIT_FAILURE);
d743 1
a743 1
	    exit (EXIT_FAILURE);
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@d17 2
a18 4
static int check_fileproc PROTO ((void *callerdat, struct file_info *finfo));
static int check_filesdoneproc PROTO ((void *callerdat, int err,
				       char *repos, char *update_dir,
				       List *entries));
d24 2
a25 7
static Dtype tag_dirproc PROTO ((void *callerdat, char *dir,
				 char *repos, char *update_dir,
				 List *entries));
static int tag_fileproc PROTO ((void *callerdat, struct file_info *finfo));
static int tag_filesdoneproc PROTO ((void *callerdat, int err,
				     char *repos, char *update_dir,
				     List *entries));
a34 1
static int check_uptodate;		/* no uptodate-check by default */
d54 1
a54 1
    "Usage: %s %s [-lRF] [-b] [-d] [-c] [-r tag|-D date] tag [files...]\n",
d57 1
a57 1
    "\t-d\tDelete the given tag.\n",
d59 1
a59 1
    "\t-f\tForce a head revision if specified tag not found.\n",
d61 1
a61 2
    "\t-F\tMove tag if it already exists.\n",
    "\t-c\tCheck that working files are unmodified.\n",
d77 1
a77 1
    while ((c = getopt (argc, argv, "FQqlRcdr:D:bf")) != -1)
a100 3
	    case 'c':
		check_uptodate = 1;
		break;
a150 2
	if (check_uptodate)
	    send_arg("-c");
d181 1
a181 1
                           (DIRENTPROC) NULL, (DIRLEAVEPROC) NULL, NULL,
d183 1
a183 1
                           (char *) NULL, 1);
d191 3
a193 3
    err = start_recursion (tag_fileproc, tag_filesdoneproc, tag_dirproc,
			   (DIRLEAVEPROC) NULL, NULL, argc, argv, local,
			   W_LOCAL, 0, 0, (char *) NULL, 1);
d202 1
a202 2
check_fileproc (callerdat, finfo)
    void *callerdat;
a208 11
    if (check_uptodate) 
    {
	Ctype status = Classify_File (finfo, (char *) NULL, (char *) NULL,
				      (char *) NULL, 1, 0, &vers, 0);
	if ((status != T_UPTODATE) && (status != T_CHECKOUT))
	{
	    error (0, 0, "%s is locally modified", finfo->fullname);
	    return (1);
	}
    }
    
d237 3
a239 1
    vers = Version_TS (finfo, NULL, NULL, NULL, 0, 0);
d246 1
a246 2
    p->data = RCS_getversion(vers->srcfile, numtag, date, force_tag_match,
			     (int *) NULL);
d252 1
a252 2
        oversion = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1,
				   (int *) NULL);
d284 1
a284 2
check_filesdoneproc (callerdat, err, repos, update_dir, entries)
    void *callerdat;
a287 1
    List *entries;
d392 1
a392 2
tag_fileproc (callerdat, finfo)
    void *callerdat;
d401 2
a402 6
    /* Lock the directory if it is not already locked.  We can't rely
       on tag_dirproc because it won't handle the case where the user
       specifies a list of files on the command line.  */
    tag_lockdir (finfo->repository);

    vers = Version_TS (finfo, NULL, NULL, NULL, 0, 0);
d409 1
a409 2
                                  force_tag_match,
				  (int *) NULL);
d428 1
a428 2
	version = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1,
				  (int *) NULL);
d436 1
a436 1
	if ((retcode = RCS_deltag(vers->srcfile, symtag, 1)) != 0) 
d504 1
a504 2
    oversion = RCS_getversion (vers->srcfile, symtag, (char *) NULL, 1,
			       (int *) NULL);
d536 1
a536 1
    if ((retcode = RCS_settag(vers->srcfile, symtag, rev)) != 0)
a558 15
/* Clear any lock we may hold on the current directory.  */

static int
tag_filesdoneproc (callerdat, err, repos, update_dir, entries)
    void *callerdat;
    int err;
    char *repos;
    char *update_dir;
    List *entries;
{
    tag_unlockdir ();

    return (err);
}

d564 1
a564 2
tag_dirproc (callerdat, dir, repos, update_dir, entries)
    void *callerdat;
a567 1
    List *entries;
a573 60
/* We do not need to acquire a full write lock for the tag operation:
   the revisions are obtained from the working directory, so we do not
   require consistency across the entire repository.  However, we do
   need to prevent simultaneous tag operations from interfering with
   each other.  Therefore, we write lock each directory as we enter
   it, and unlock it as we leave it.

   In the rtag case, it would be nice to provide consistency with
   respect to commits; however CVS lacks the infrastructure to do that
   (see Concurrency in cvs.texinfo and comment in do_recursion).  We
   can and will prevent simultaneous tag operations from interfering
   with each other, by write locking each directory as we enter it,
   and unlocking it as we leave it.  */
static char *locked_dir;
static List *locked_list;

/*
 * Lock the directory for a tag operation.  This is also called by the
 * rtag code.
 */
void
tag_lockdir (repository)
     char *repository;
{
    if (repository != NULL
	&& (locked_dir == NULL
	    || strcmp (locked_dir, repository) != 0))
    {
        Node *node;

	if (locked_dir != NULL)
	    tag_unlockdir ();

	locked_dir = xstrdup (repository);
	locked_list = getlist ();
	node = getnode ();
	node->type = LOCK;
	node->key = xstrdup (repository);
	(void) addnode (locked_list, node);
	Writer_Lock (locked_list);
    }
}

/*
 * Unlock the directory for a tag operation.  This is also called by
 * the rtag code.
 */
void
tag_unlockdir ()
{
    if (locked_dir != NULL)
    {
        Lock_Cleanup ();
	dellist (&locked_list);
	free (locked_dir);
	locked_dir = NULL;
	locked_list = NULL;
    }
}

d587 5
a591 1
static int val_fileproc PROTO ((void *callerdat, struct file_info *finfo));
d594 1
a594 2
val_fileproc (callerdat, finfo)
    void *callerdat;
d598 1
a598 1
    struct val_args *args = (struct val_args *)callerdat;
d606 1
a606 1
    tag = RCS_gettag (rcsdata, args->name, 1, (int *) NULL);
d616 1
a616 1
static Dtype val_direntproc PROTO ((void *, char *, char *, char *, List *));
d619 1
a619 2
val_direntproc (callerdat, dir, repository, update_dir, entries)
    void *callerdat;
a622 1
    List *entries;
a674 5
    /* Special tags are always valid.  */
    if (strcmp (name, TAG_BASE) == 0
	|| strcmp (name, TAG_HEAD) == 0)
	return;

d678 3
a680 4
    valtags_filename = xmalloc (strlen (CVSroot_directory)
				+ sizeof CVSROOTADM
				+ sizeof CVSROOTADM_VALTAGS + 20);
    strcpy (valtags_filename, CVSroot_directory);
d712 1
a712 6
       by an old version of CVS, from before val-tags was invented.

       Since we need this code anyway, we also use it to create
       entries in val-tags in general (that is, the val-tags entry
       will get created the first time the tag is used, not when the
       tag is created).  */
d716 1
d728 1
a728 1
	    if ( CVS_CHDIR (repository) < 0)
a734 1
			   (void *)&the_val_args,
d736 1
a736 1
			   1, NULL, 1);
a780 33
}

/*
 * Check whether a join tag is valid.  This is just like
 * tag_check_valid, but we must stop before the colon if there is one.
 */

void
tag_check_valid_join (join_tag, argc, argv, local, aflag, repository)
     char *join_tag;
     int argc;
     char **argv;
     int local;
     int aflag;
     char *repository;
{
    char *c, *s;

    c = xstrdup (join_tag);
    s = strchr (c, ':');
    if (s != NULL)
    {
        if (isdigit (join_tag[0]))
	    error (1, 0,
		   "Numeric join tag %s may not contain a date specifier",
		   join_tag);

        *s = '\0';
    }

    tag_check_valid (c, argc, argv, local, aflag, repository);

    free (c);
@


1.1.1.6
log
@New release from Cyclic Software
@
text
@d75 1
a75 1
cvstag (argc, argv)
d181 1
a181 1
	send_files (argc, argv, local, 0, 0);
d433 1
a433 7
    /* We do not need to acquire a full write lock for the tag operation:
       the revisions are obtained from the working directory, so we do not
       require consistency across the entire repository.  However, we do
       need to prevent simultaneous tag operations from interfering with
       each other.  Therefore, we write lock each directory as we enter
       it, and unlock it as we leave it.  */
    lock_dir_for_write (finfo->repository);
d484 1
a484 3
	    cvs_output ("D ", 2);
	    cvs_output (finfo->fullname, 0);
	    cvs_output ("\n", 1);
d559 6
a564 13
	    cvs_output ("W ", 2);
	    cvs_output (finfo->fullname, 0);
	    cvs_output (" : ", 0);
	    cvs_output (symtag, 0);
	    cvs_output (" already exists on ", 0);
	    cvs_output (isbranch ? "branch" : "version", 0);
	    cvs_output (" ", 0);
	    cvs_output (oversion, 0);
	    cvs_output (" : NOT MOVING tag to ", 0);
	    cvs_output (branch_mode ? "branch" : "version", 0);
	    cvs_output (" ", 0);
	    cvs_output (rev, 0);
	    cvs_output ("\n", 1);
d584 1
a584 3
	cvs_output ("T ", 2);
	cvs_output (finfo->fullname, 0);
	cvs_output ("\n", 1);
d605 1
a605 1
    Lock_Cleanup ();
d627 60
d849 1
a849 1
		error_exit ();
@


1.1.1.7
log
@New release from Cyclic Software
@
text
@a158 2
	if (!force_tag_match)
	    send_arg ("-f");
d181 1
a181 1
	send_files (argc, argv, local, 0, 0, 0);
@


1.1.1.8
log
@Latest release from Cyclic Software
@
text
@d86 1
a86 1
    while ((c = getopt (argc, argv, "+FQqlRcdr:D:bf")) != -1)
d180 4
a183 8

	/* SEND_NO_CONTENTS has a mildly bizarre interaction with
	   check_uptodate; if the timestamp is modified but the file
	   is unmodified, the check will fail, only to have "cvs diff"
	   show no differences (and one must do "update" or something to
	   reset the client's notion of the timestamp).  */

	send_files (argc, argv, local, 0, SEND_NO_CONTENTS);
@


1.1.1.9
log
@Latest version from Cyclic Software
@
text
@d85 1
a85 1
    optind = 0;
@


1.1.1.10
log
@Latest version from Cyclic
@
text
@d6 1
a6 1
 * specified in the README file that comes with the CVS source distribution.
d66 1
a66 2
    "\t-r rev\tExisting revision/tag.\n",
    "\t-D\tExisting date.\n",
a70 1
    "(Specify the --help global option for a list of other help options)\n",
d373 5
a377 4
    run_setup (filter);
    run_arg (symtag);
    run_arg (delete_flag ? "del" : force_tag_move ? "mov" : "add");
    run_arg (repository);
d483 1
a483 1
	if ((retcode = RCS_deltag(vers->srcfile, symtag)) != 0) 
a491 1
	RCS_rewrite (vers->srcfile, NULL, NULL);
d557 1
a557 1
	int isbranch = RCS_nodeisbranch (finfo->rcs, symtag);
a600 1
    RCS_rewrite (vers->srcfile, NULL, NULL);
a753 5

    /* FIXME: This routine doesn't seem to do any locking whatsoever
       (and it is called from places which don't have locks in place).
       If two processes try to write val-tags at the same time, it would
       seem like we are in trouble.  */
@


1.1.1.11
log
@Latest version from Cyclic
@
text
@d278 2
a279 11

    /* Here we duplicate the calculation in tag_fileproc about which
       version we are going to tag.  There probably are some subtle races
       (e.g. numtag is "foo" which gets moved between here and
       tag_fileproc).  */
    if (numtag == NULL && date == NULL)
	p->data = xstrdup (vers->vn_user);
    else
	p->data = RCS_getversion (vers->srcfile, numtag, date,
				  force_tag_match, NULL);

d380 1
a380 1
    return (run_exec (RUN_TTY, RUN_TTY, RUN_TTY, RUN_NORMAL));
@


1.1.1.12
log
@Latest version from Cyclic
@
text
@d62 1
a62 1
    "Usage: %s %s [-lRF] [-b] [-d] [-c] [-r rev|-D date] tag [files...]\n",
d181 7
a187 1
	send_files (argc, argv, local, 0,
d189 1
a189 5
		    /* I think the -c case is like "cvs status", in
		       which we really better be correct rather than
		       being fast; it is just too confusing otherwise.  */
		    check_uptodate ? 0 : SEND_NO_CONTENTS);
	send_file_names (argc, argv, SEND_EXPAND_WILD);
a299 2
		/* Deleting a tag which did not exist is a noop and
		   should not be logged.  */
a302 5
	else if (delete_flag)
	{
	    free (p->data);
	    p->data = xstrdup (oversion);
	}
d370 1
a370 1
            if (isspace ((unsigned char) *cp))
d750 1
a750 1
    if (isdigit ((unsigned char) name[0]))
d755 1
a755 1
	    if (!(isdigit ((unsigned char) *p) || *p == '.'))
d906 1
a906 1
        if (isdigit ((unsigned char) join_tag[0]))
@


1.1.1.13
log
@Latest version from Cyclic
@
text
@a916 7
	/* hmmm...  I think it makes sense to allow -j:<date>, but
	 * for now this fixes a bug where CVS just spins and spins (I
	 * think in the RCS code) looking for a zero length tag.
	 */
	if (!*c)
	    error (1, 0,
		   "argument to join may not contain a date specifier without a tag");
@


1.1.1.14
log
@Latest from Cyclic Software
@
text
@a236 1
	    freevers_ts (&vers);
a239 2
    else
	vers = Version_TS (finfo, NULL, NULL, NULL, 0, 0);
d269 1
a273 2
	freevers_ts (&vers);
	freenode (p);
a581 2
	    if (branch_mode)
		free (rev);
a602 2
	    if (branch_mode)
		free (rev);
a613 2
	if (branch_mode)
	    free (rev);
a616 2
    if (branch_mode)
	free (rev);
d721 1
a721 1
	return R_PROCESS;
@


1.1.1.15
log
@Latest from Cyclic Software
@
text
@d8 1
a8 1
 * Tag and Rtag
d11 1
a11 2
 * Tag uses the checked out revision in the current directory, rtag uses
 * the modules database, if necessary.
a16 3
static int rtag_proc PROTO((int argc, char **argv, char *xwhere,
		      char *mwhere, char *mfile, int shorten,
		      int local_specified, char *mname, char *msg));
a28 2
static int rtag_fileproc PROTO ((void *callerdat, struct file_info *finfo));
static int rtag_delete PROTO((RCSNode *rcsfile));
d30 3
d34 1
a34 2
static char *numtag;			/* specific revision to tag */
static int numtag_validated = 0;
d36 1
a36 1
static char *symtag;			/* tag to add or delete */
d40 1
a40 1
static int force_tag_match = 1;		/* force tag to match by default */
a42 2
static int attic_too;			/* remove tag from Attic files */
static int is_rtag;
d60 1
a60 2
static const char rtag_opts[] = "+abdFflnQqRr:D:";
static const char *const rtag_usage[] =
d62 1
a62 6
    "Usage: %s %s [-abdFflnR] [-r rev|-D date] tag modules...\n",
    "\t-a\tClear tag from removed files that would not otherwise be tagged.\n",
    "\t-b\tMake the tag a \"branch\" tag, allowing concurrent development.\n",
    "\t-d\tDelete the given tag.\n",
    "\t-F\tMove tag if it already exists.\n",
    "\t-f\tForce a head revision match if tag/date not found.\n",
a63 1
    "\t-n\tNo execution of 'tag program'.\n",
d65 1
d68 1
a68 8
    "(Specify the --help global option for a list of other help options)\n",
    NULL
};

static const char tag_opts[] = "+bcdFflQqRr:D:";
static const char *const tag_usage[] =
{
    "Usage: %s %s [-bcdFflR] [-r rev|-D date] tag [files...]\n",
d70 1
a71 7
    "\t-d\tDelete the given tag.\n",
    "\t-F\tMove tag if it already exists.\n",
    "\t-f\tForce a head revision match if tag/date not found.\n",
    "\t-l\tLocal directory only, not recursive.\n",
    "\t-R\tProcess directories recursively.\n",
    "\t-r rev\tExisting revision/tag.\n",
    "\t-D\tExisting date.\n",
a82 1
    int run_module_prog = 1;
a83 2
    is_rtag = (strcmp (command_name, "rtag") == 0);
    
d85 1
a85 1
	usage (is_rtag ? rtag_usage : tag_usage);
d88 1
a88 1
    while ((c = getopt (argc, argv, is_rtag ? rtag_opts : tag_opts)) != -1)
a91 24
	    case 'a':
		attic_too = 1;
		break;
	    case 'b':
		branch_mode = 1;
		break;
	    case 'c':
		check_uptodate = 1;
		break;
	    case 'd':
		delete_flag = 1;
		break;
            case 'F':
		force_tag_move = 1;
		break;
	    case 'f':
		force_tag_match = 0;
		break;
	    case 'l':
		local = 1;
		break;
	    case 'n':
		run_module_prog = 0;
		break;
d103 3
d109 6
d123 9
d134 1
a134 1
		usage (is_rtag ? rtag_usage : tag_usage);
d141 2
a142 2
    if (argc < (is_rtag ? 2 : 1))
	usage (is_rtag ? rtag_usage : tag_usage);
d154 1
a154 1
    if (current_parsed_root->isremote)
d161 8
a168 2
	if (attic_too)
	    send_arg("-a");
a170 4
	if (check_uptodate)
	    send_arg("-c");
	if (delete_flag)
	    send_arg("-d");
a172 6
	if (!force_tag_match)
	    send_arg ("-f");
	if (local)
	    send_arg("-l");
	if (!run_module_prog)
	    send_arg("-n");
d181 1
a181 11
	if (is_rtag)
	{
	    int i;
	    for (i = 0; i < argc; ++i)
		send_arg (argv[i]);
	    send_to_server ("rtag\012", 0);
	}
	else
	{

	    send_files (argc, argv, local, 0,
d186 3
a188 5
			check_uptodate ? 0 : SEND_NO_CONTENTS);
	    send_file_names (argc, argv, SEND_EXPAND_WILD);
	    send_to_server ("tag\012", 0);
	}

d193 2
a194 125
    if (is_rtag)
    {
	DBM *db;
	int i;
	db = open_module ();
	for (i = 0; i < argc; i++)
	{
	    /* XXX last arg should be repository, but doesn't make sense here */
	    history_write ('T', (delete_flag ? "D" : (numtag ? numtag : 
			   (date ? date : "A"))), symtag, argv[i], "");
	    err += do_module (db, argv[i], TAG,
			      delete_flag ? "Untagging" : "Tagging",
			      rtag_proc, (char *) NULL, 0, 0, run_module_prog,
			      0, symtag);
	}
	close_module (db);
    }
    else
    {
	err = rtag_proc (argc + 1, argv - 1, NULL, NULL, NULL, 0, 0, NULL,
			 NULL);
    }

    return (err);
}

/*
 * callback proc for doing the real work of tagging
 */
/* ARGSUSED */
static int
rtag_proc (argc, argv, xwhere, mwhere, mfile, shorten, local_specified,
	   mname, msg)
    int argc;
    char **argv;
    char *xwhere;
    char *mwhere;
    char *mfile;
    int shorten;
    int local_specified;
    char *mname;
    char *msg;
{
    /* Begin section which is identical to patch_proc--should this
       be abstracted out somehow?  */
    char *myargv[2];
    int err = 0;
    int which;
    char *repository;
    char *where;

    if (is_rtag)
    {
	repository = xmalloc (strlen (current_parsed_root->directory) + strlen (argv[0])
			      + (mfile == NULL ? 0 : strlen (mfile) + 1) + 2);
	(void) sprintf (repository, "%s/%s", current_parsed_root->directory, argv[0]);
	where = xmalloc (strlen (argv[0]) + (mfile == NULL ? 0 : strlen (mfile) + 1)
			 + 1);
	(void) strcpy (where, argv[0]);

	/* if mfile isn't null, we need to set up to do only part of the module */
	if (mfile != NULL)
	{
	    char *cp;
	    char *path;

	    /* if the portion of the module is a path, put the dir part on repos */
	    if ((cp = strrchr (mfile, '/')) != NULL)
	    {
		*cp = '\0';
		(void) strcat (repository, "/");
		(void) strcat (repository, mfile);
		(void) strcat (where, "/");
		(void) strcat (where, mfile);
		mfile = cp + 1;
	    }

	    /* take care of the rest */
	    path = xmalloc (strlen (repository) + strlen (mfile) + 5);
	    (void) sprintf (path, "%s/%s", repository, mfile);
	    if (isdir (path))
	    {
		/* directory means repository gets the dir tacked on */
		(void) strcpy (repository, path);
		(void) strcat (where, "/");
		(void) strcat (where, mfile);
	    }
	    else
	    {
		myargv[0] = argv[0];
		myargv[1] = mfile;
		argc = 2;
		argv = myargv;
	    }
	    free (path);
	}

	/* cd to the starting repository */
	if ( CVS_CHDIR (repository) < 0)
	{
	    error (0, errno, "cannot chdir to %s", repository);
	    free (repository);
	    return (1);
	}
	free (repository);
	/* End section which is identical to patch_proc.  */

	if (delete_flag || attic_too || (force_tag_match && numtag))
	    which = W_REPOS | W_ATTIC;
	else
	    which = W_REPOS;
	repository = NULL;
    }
    else
    {
        where = NULL;
        which = W_LOCAL;
        repository = "";
    }

    if (numtag != NULL && !numtag_validated)
    {
	tag_check_valid (numtag, argc - 1, argv + 1, local, 0, repository);
	numtag_validated = 1;
    }
d202 2
a203 2
                           argc - 1, argv + 1, local, which, 0, 1,
                           where, 1);
a209 9
    /* It would be nice to provide consistency with respect to
       commits; however CVS lacks the infrastructure to do that (see
       Concurrency in cvs.texinfo and comment in do_recursion).  We
       do need to ensure that the RCS file info that gets read and
       cached in do_recursion isn't stale by the time we get around
       to using it to rewrite the RCS file in the callback, and this
       is the easiest way to accomplish that.  */
    lock_tree_for_write (argc - 1, argv + 1, local, which, 0);

d211 4
a214 8
    err = start_recursion (is_rtag ? rtag_fileproc : tag_fileproc,
			   (FILESDONEPROC) NULL, tag_dirproc,
			   (DIRLEAVEPROC) NULL, NULL, argc - 1, argv + 1,
			   local, which, 0, 0, where, 1);
    Lock_Cleanup ();
    dellist (&mtlist);
    if (where != NULL)
	free (where);
d234 1
a234 2
	if ((status != T_UPTODATE) && (status != T_CHECKOUT) &&
	    (status != T_PATCH))
d285 1
a285 1
    if (!is_rtag && numtag == NULL && date == NULL)
d330 1
a330 1
    freevers_ts (&vers);
a439 186
 * Called to rtag a particular file, as appropriate with the options that were
 * set above.
 */
/* ARGSUSED */
static int
rtag_fileproc (callerdat, finfo)
    void *callerdat;
    struct file_info *finfo;
{
    RCSNode *rcsfile;
    char *version, *rev;
    int retcode = 0;

    /* find the parsed RCS data */
    if ((rcsfile = finfo->rcs) == NULL)
	return (1);

    /*
     * For tagging an RCS file which is a symbolic link, you'd best be
     * running with RCS 5.6, since it knows how to handle symbolic links
     * correctly without breaking your link!
     */

    if (delete_flag)
	return (rtag_delete (rcsfile));

    /*
     * If we get here, we are adding a tag.  But, if -a was specified, we
     * need to check to see if a -r or -D option was specified.  If neither
     * was specified and the file is in the Attic, remove the tag.
     */
    if (attic_too && (!numtag && !date))
    {
	if ((rcsfile->flags & VALID) && (rcsfile->flags & INATTIC))
	    return (rtag_delete (rcsfile));
    }

    version = RCS_getversion (rcsfile, numtag, date, force_tag_match,
			      (int *) NULL);
    if (version == NULL)
    {
	/* If -a specified, clean up any old tags */
	if (attic_too)
	    (void) rtag_delete (rcsfile);

	if (!quiet && !force_tag_match)
	{
	    error (0, 0, "cannot find tag `%s' in `%s'",
		   numtag ? numtag : "head", rcsfile->path);
	    return (1);
	}
	return (0);
    }
    if (numtag
	&& isdigit ((unsigned char) *numtag)
	&& strcmp (numtag, version) != 0)
    {

	/*
	 * We didn't find a match for the numeric tag that was specified, but
	 * that's OK.  just pass the numeric tag on to rcs, to be tagged as
	 * specified.  Could get here if one tried to tag "1.1.1" and there
	 * was a 1.1.1 branch with some head revision.  In this case, we want
	 * the tag to reference "1.1.1" and not the revision at the head of
	 * the branch.  Use a symbolic tag for that.
	 */
	rev = branch_mode ? RCS_magicrev (rcsfile, version) : numtag;
	retcode = RCS_settag(rcsfile, symtag, numtag);
	if (retcode == 0)
	    RCS_rewrite (rcsfile, NULL, NULL);
    }
    else
    {
	char *oversion;
       
	/*
	 * As an enhancement for the case where a tag is being re-applied to
	 * a large body of a module, make one extra call to RCS_getversion to
	 * see if the tag is already set in the RCS file.  If so, check to
	 * see if it needs to be moved.  If not, do nothing.  This will
	 * likely save a lot of time when simply moving the tag to the
	 * "current" head revisions of a module -- which I have found to be a
	 * typical tagging operation.
	 */
	rev = branch_mode ? RCS_magicrev (rcsfile, version) : version;
	oversion = RCS_getversion (rcsfile, symtag, (char *) NULL, 1,
				   (int *) NULL);
	if (oversion != NULL)
	{
	    int isbranch = RCS_nodeisbranch (finfo->rcs, symtag);

	    /*
	     * if versions the same and neither old or new are branches don't
	     * have to do anything
	     */
	    if (strcmp (version, oversion) == 0 && !branch_mode && !isbranch)
	    {
		free (oversion);
		free (version);
		return (0);
	    }
	  
	    if (!force_tag_move)
	    {
		/* we're NOT going to move the tag */
		(void) printf ("W %s", finfo->fullname);

		(void) printf (" : %s already exists on %s %s", 
			       symtag, isbranch ? "branch" : "version",
			       oversion);
		(void) printf (" : NOT MOVING tag to %s %s\n", 
			       branch_mode ? "branch" : "version", rev);
		free (oversion);
		free (version);
		return (0);
	    }
	    free (oversion);
	}
	retcode = RCS_settag(rcsfile, symtag, rev);
	if (retcode == 0)
	    RCS_rewrite (rcsfile, NULL, NULL);
    }

    if (retcode != 0)
    {
	error (1, retcode == -1 ? errno : 0,
	       "failed to set tag `%s' to revision `%s' in `%s'",
	       symtag, rev, rcsfile->path);
        if (branch_mode)
	    free (rev);
        free (version);
        return (1);
    }
    if (branch_mode)
	free (rev);
    free (version);
    return (0);
}

/*
 * If -d is specified, "force_tag_match" is set, so that this call to
 * RCS_getversion() will return a NULL version string if the symbolic
 * tag does not exist in the RCS file.
 * 
 * If the -r flag was used, numtag is set, and we only delete the
 * symtag from files that have numtag.
 * 
 * This is done here because it's MUCH faster than just blindly calling
 * "rcs" to remove the tag... trust me.
 */
static int
rtag_delete (rcsfile)
    RCSNode *rcsfile;
{
    char *version;
    int retcode;

    if (numtag)
    {
	version = RCS_getversion (rcsfile, numtag, (char *) NULL, 1,
				  (int *) NULL);
	if (version == NULL)
	    return (0);
	free (version);
    }

    version = RCS_getversion (rcsfile, symtag, (char *) NULL, 1,
			      (int *) NULL);
    if (version == NULL)
	return (0);
    free (version);

    if ((retcode = RCS_deltag(rcsfile, symtag)) != 0)
    {
	if (!quiet)
	    error (0, retcode == -1 ? errno : 0,
		   "failed to remove tag `%s' from `%s'", symtag,
		   rcsfile->path);
	return (1);
    }
    RCS_rewrite (rcsfile, NULL, NULL);
    return (0);
}


/*
d455 11
d647 15
a673 9

    if (ignore_directory (update_dir))
    {
	/* print the warm fuzzy message */
	if (!quiet)
	  error (0, 0, "Ignoring %s", update_dir);
        return R_SKIP_ALL;
    }

a760 1
    int nowrite = 0;
d792 1
a792 1
    valtags_filename = xmalloc (strlen (current_parsed_root->directory)
d794 6
a799 3
				+ sizeof CVSROOTADM_VALTAGS + 3);
    sprintf (valtags_filename, "%s/%s/%s", current_parsed_root->directory,
					   CVSROOTADM, CVSROOTADM_VALTAGS);
d804 2
a805 9
	{
	    error (0, errno, "warning: cannot open %s read/write",
		   valtags_filename);
	    db = dbm_open (valtags_filename, O_RDONLY, 0666);
	    if (db != NULL)
		nowrite = 1;
	    else if (!existence_error (errno))
		error (1, errno, "cannot read %s", valtags_filename);
	}
d809 1
a809 1
    if (db != NULL)
d871 1
a871 1
	if (noexec || nowrite)
d888 1
a888 1
		error (0, errno, "warning: cannot create %s", valtags_filename);
@


