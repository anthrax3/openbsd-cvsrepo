head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.7.0.78
	OPENBSD_6_2_BASE:1.1.1.7
	OPENBSD_6_1:1.1.1.7.0.76
	OPENBSD_6_1_BASE:1.1.1.7
	OPENBSD_6_0:1.1.1.7.0.72
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.68
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.70
	OPENBSD_5_8_BASE:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.62
	OPENBSD_5_7_BASE:1.1.1.7
	OPENBSD_5_6:1.1.1.7.0.66
	OPENBSD_5_6_BASE:1.1.1.7
	OPENBSD_5_5:1.1.1.7.0.64
	OPENBSD_5_5_BASE:1.1.1.7
	OPENBSD_5_4:1.1.1.7.0.60
	OPENBSD_5_4_BASE:1.1.1.7
	OPENBSD_5_3:1.1.1.7.0.58
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.56
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.54
	OPENBSD_5_0:1.1.1.7.0.52
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.50
	OPENBSD_4_9_BASE:1.1.1.7
	OPENBSD_4_8:1.1.1.7.0.48
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.44
	OPENBSD_4_7_BASE:1.1.1.7
	OPENBSD_4_6:1.1.1.7.0.46
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.42
	OPENBSD_4_5_BASE:1.1.1.7
	OPENBSD_4_4:1.1.1.7.0.40
	OPENBSD_4_4_BASE:1.1.1.7
	OPENBSD_4_3:1.1.1.7.0.38
	OPENBSD_4_3_BASE:1.1.1.7
	OPENBSD_4_2:1.1.1.7.0.36
	OPENBSD_4_2_BASE:1.1.1.7
	OPENBSD_4_1:1.1.1.7.0.34
	OPENBSD_4_1_BASE:1.1.1.7
	OPENBSD_4_0:1.1.1.7.0.32
	OPENBSD_4_0_BASE:1.1.1.7
	OPENBSD_3_9:1.1.1.7.0.30
	OPENBSD_3_9_BASE:1.1.1.7
	OPENBSD_3_8:1.1.1.7.0.28
	OPENBSD_3_8_BASE:1.1.1.7
	OPENBSD_3_7:1.1.1.7.0.26
	OPENBSD_3_7_BASE:1.1.1.7
	OPENBSD_3_6:1.1.1.7.0.24
	OPENBSD_3_6_BASE:1.1.1.7
	OPENBSD_3_5:1.1.1.7.0.22
	OPENBSD_3_5_BASE:1.1.1.7
	OPENBSD_3_4:1.1.1.7.0.20
	OPENBSD_3_4_BASE:1.1.1.7
	OPENBSD_3_3:1.1.1.7.0.18
	OPENBSD_3_3_BASE:1.1.1.7
	OPENBSD_3_2:1.1.1.7.0.16
	OPENBSD_3_2_BASE:1.1.1.7
	OPENBSD_3_1:1.1.1.7.0.14
	OPENBSD_3_1_BASE:1.1.1.7
	OPENBSD_3_0:1.1.1.7.0.12
	OPENBSD_3_0_BASE:1.1.1.7
	cvs-1-11-1p1:1.1.1.7
	OPENBSD_2_9:1.1.1.7.0.10
	OPENBSD_2_9_BASE:1.1.1.7
	cvs-1-11:1.1.1.7
	OPENBSD_2_8:1.1.1.7.0.8
	OPENBSD_2_8_BASE:1.1.1.7
	OPENBSD_2_7:1.1.1.7.0.6
	OPENBSD_2_7_BASE:1.1.1.7
	OPENBSD_2_6:1.1.1.7.0.4
	OPENBSD_2_6_BASE:1.1.1.7
	cvs-1-10-7:1.1.1.7
	OPENBSD_2_5:1.1.1.7.0.2
	OPENBSD_2_5_BASE:1.1.1.7
	cvs-1-10-5:1.1.1.7
	OPENBSD_2_4:1.1.1.6.0.4
	OPENBSD_2_4_BASE:1.1.1.6
	cvs-1-10:1.1.1.6
	cvs-1-9-28:1.1.1.6
	OPENBSD_2_3:1.1.1.6.0.2
	OPENBSD_2_3_BASE:1.1.1.6
	cvs-1-9-26:1.1.1.6
	cvs-1-9-24:1.1.1.5
	OPENBSD_2_2:1.1.1.4.0.4
	OPENBSD_2_2_BASE:1.1.1.4
	cvs-1-9-10:1.1.1.4
	OPENBSD_2_1:1.1.1.4.0.2
	OPENBSD_2_1_BASE:1.1.1.4
	cvs-1-9-8:1.1.1.4
	cvs-1-9-6:1.1.1.3
	cvs-1-9-4:1.1.1.3
	cvs-1-9-2:1.1.1.3
	cvs-1-9:1.1.1.3
	OPENBSD_2_0:1.1.1.2.0.2
	OPENBSD_2_0_BASE:1.1.1.2
	cvs-1-8-1:1.1.1.2
	cvs-1-8:1.1.1.2
	cvs-1-7-2:1.1.1.2
	cvs-1-7-1:1.1.1.1
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	95.12.19.09.21.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.33;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.04.27.19.42.05;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.10.18.03.35.44;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.04.21.04.27.32;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	98.02.22.08.21.24;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	98.03.12.06.58.59;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.02.28.21.33.13;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 1992, Brian Berliner and Jeff Polk
 * Copyright (c) 1989-1992, Brian Berliner
 * 
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS 1.4 kit.
 * 
 * No Difference
 * 
 * The user file looks modified judging from its time stamp; however it needn't
 * be.  No_difference() finds out whether it is or not. If it is not, it
 * updates the administration.
 * 
 * returns 0 if no differences are found and non-zero otherwise
 */

#include "cvs.h"

#ifndef lint
static const char rcsid[] = "$CVSid: @@(#)no_diff.c 1.39 94/10/07 $";
USE(rcsid);
#endif

int
No_Difference (file, vers, entries, repository, update_dir)
    char *file;
    Vers_TS *vers;
    List *entries;
    char *repository;
    char *update_dir;
{
    Node *p;
    char tmp[L_tmpnam+1];
    int ret;
    char *ts, *options;
    int retcode = 0;
    char *tocvsPath;

    if (!vers->srcfile || !vers->srcfile->path)
	return (-1);			/* different since we couldn't tell */

    if (vers->entdata && vers->entdata->options)
	options = xstrdup (vers->entdata->options);
    else
	options = xstrdup ("");

    run_setup ("%s%s -p -q -r%s %s", Rcsbin, RCS_CO,
	       vers->vn_user ? vers->vn_user : "", options);
    run_arg (vers->srcfile->path);
    if ((retcode = run_exec (RUN_TTY, tmpnam (tmp), RUN_TTY, RUN_REALLY)) == 0)
    {
#if 0
	/* Why would we want to munge the modes?  And only if the timestamps
	   are different?  And even for commands like "cvs status"????  */
	if (!iswritable (file))		/* fix the modes as a side effect */
	    xchmod (file, 1);
#endif

	tocvsPath = wrap_tocvs_process_file (file);

	/* do the byte by byte compare */
	if (xcmp (tocvsPath == NULL ? file : tocvsPath, tmp) == 0)
	{
#if 0
	    /* Why would we want to munge the modes?  And only if the
	       timestamps are different?  And even for commands like
	       "cvs status"????  */
	    if (cvswrite == FALSE)	/* fix the modes as a side effect */
		xchmod (file, 0);
#endif

	    /* no difference was found, so fix the entries file */
	    ts = time_stamp (file);
	    Register (entries, file,
		      vers->vn_user ? vers->vn_user : vers->vn_rcs, ts,
		      options, vers->tag, vers->date, (char *) 0);
#ifdef SERVER_SUPPORT
	    if (server_active)
	    {
		/* We need to update the entries line on the client side.  */
		server_update_entries
		  (file, update_dir, repository, SERVER_UPDATED);
	    }
#endif
	    free (ts);

	    /* update the entdata pointer in the vers_ts structure */
	    p = findnode (entries, file);
	    vers->entdata = (Entnode *) p->data;

	    ret = 0;
	}
	else
	    ret = 1;			/* files were really different */
        if (tocvsPath)
	{
	    /* Need to call unlink myself because the noexec variable
	     * has been set to 1.  */
	    if (trace)
		(void) fprintf (stderr, "%c-> unlink (%s)\n",
#ifdef SERVER_SUPPORT
				(server_active) ? 'S' : ' ',
#else
				' ',
#endif
				tocvsPath);
	    if (unlink (tocvsPath) < 0)
		error (0, errno, "could not remove %s", tocvsPath);
	}
    }
    else
    {
	if (update_dir[0] == '\0')
	    error (0, retcode == -1 ? errno : 0,
		   "could not check out revision %s of %s",
		   vers->vn_user, file);
	else
	    error (0, retcode == -1 ? errno : 0,
		   "could not check out revision %s of %s/%s",
		   vers->vn_user, update_dir, file);
	ret = -1;			/* different since we couldn't tell */
    }

    if (trace)
#ifdef SERVER_SUPPORT
	(void) fprintf (stderr, "%c-> unlink2 (%s)\n",
			(server_active) ? 'S' : ' ', tmp);
#else
	(void) fprintf (stderr, "-> unlink (%s)\n", tmp);
#endif
    if (unlink (tmp) < 0)
	error (0, errno, "could not remove %s", tmp);
    free (options);
    return (ret);
}
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d19 5
d47 4
a50 3
    retcode = RCS_checkout (vers->srcfile->path, NULL, vers->vn_user, options,
                            tmpnam (tmp), 0, 0);
    if (retcode == 0)
@


1.1.1.3
log
@New release from Cyclic Software
@
text
@d20 2
a21 2
No_Difference (finfo, vers)
    struct file_info *finfo;
d23 3
d28 1
a28 1
    char *tmp;
d42 2
a43 3
    tmp = cvs_temp_name ();
    retcode = RCS_checkout (vers->srcfile, (char *) NULL, vers->vn_user,
			    (char *) NULL, options, tmp);
d49 2
a50 2
	if (!iswritable (finfo->file))		/* fix the modes as a side effect */
	    xchmod (finfo->file, 1);
d53 1
a53 1
	tocvsPath = wrap_tocvs_process_file (finfo->file);
d56 1
a56 1
	if (xcmp (tocvsPath == NULL ? finfo->file : tocvsPath, tmp) == 0)
d63 1
a63 1
		xchmod (finfo->file, 0);
d67 2
a68 2
	    ts = time_stamp (finfo->file);
	    Register (finfo->entries, finfo->file,
d76 1
a76 1
		  (finfo->file, finfo->update_dir, finfo->repository, SERVER_UPDATED);
d82 1
a82 1
	    p = findnode (finfo->entries, finfo->file);
d101 1
a101 1
	    if ( CVS_UNLINK (tocvsPath) < 0)
d107 8
a114 3
	error (0, retcode == -1 ? errno : 0,
	       "could not check out revision %s of %s",
	       vers->vn_user, finfo->fullname);
d125 1
a125 1
    if (CVS_UNLINK (tmp) < 0)
a126 1
    free (tmp);
@


1.1.1.4
log
@Latest release from Cyclic Software
@
text
@d25 1
a30 6
    /* If ts_user is "Is-modified", we can only conclude the files are
       different (since we don't have the file's contents).  */
    if (vers->ts_user != NULL
	&& strcmp (vers->ts_user, "Is-modified") == 0)
	return -1;

d39 3
a41 3
    tocvsPath = wrap_tocvs_process_file (finfo->file);
    retcode = RCS_cmp_file (vers->srcfile, vers->vn_user, options,
			    tocvsPath == NULL ? finfo->file : tocvsPath);
d44 25
a68 5
	/* no difference was found, so fix the entries file */
	ts = time_stamp (finfo->file);
	Register (finfo->entries, finfo->file,
		  vers->vn_user ? vers->vn_user : vers->vn_rcs, ts,
		  options, vers->tag, vers->date, (char *) 0);
d70 6
a75 6
	if (server_active)
	{
	    /* We need to update the entries line on the client side.  */
	    server_update_entries
	      (finfo->file, finfo->update_dir, finfo->repository, SERVER_UPDATED);
	}
d77 1
a77 1
	free (ts);
d79 3
a81 3
	/* update the entdata pointer in the vers_ts structure */
	p = findnode (finfo->entries, finfo->file);
	vers->entdata = (Entnode *) p->data;
d83 19
a101 1
	ret = 0;
d104 6
a109 1
	ret = 1;			/* files were really different */
d111 1
a111 6
    if (tocvsPath)
    {
	/* Need to call unlink myself because the noexec variable
	 * has been set to 1.  */
	if (trace)
	    (void) fprintf (stderr, "%c-> unlink (%s)\n",
d113 2
a114 1
			    (server_active) ? 'S' : ' ',
d116 1
a116 1
			    ' ',
d118 3
a120 5
			    tocvsPath);
	if ( CVS_UNLINK (tocvsPath) < 0)
	    error (0, errno, "could not remove %s", tocvsPath);
    }

@


1.1.1.5
log
@Latest version from Cyclic
@
text
@d6 1
a6 1
 * specified in the README file that comes with the CVS source distribution.
@


1.1.1.6
log
@Latest version from Cyclic
@
text
@a38 7
#ifdef PRESERVE_PERMISSIONS_SUPPORT
    /* If special files are in use, then any mismatch of file metadata
       information also means that the files should be considered different. */
    if (preserve_perms && special_file_mismatch (finfo, vers->vn_user, NULL))
	return 1;
#endif

@


1.1.1.7
log
@Latest version from Cyclic
@
text
@d85 7
a91 2
	    (void) fprintf (stderr, "%s-> unlink (%s)\n",
			    CLIENT_SERVER_STR, tocvsPath);
@


