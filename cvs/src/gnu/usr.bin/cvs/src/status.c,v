head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.14
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.10
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.14.0.48
	OPENBSD_5_3_BASE:1.1.1.14
	OPENBSD_5_2:1.1.1.14.0.46
	OPENBSD_5_2_BASE:1.1.1.14
	OPENBSD_5_1_BASE:1.1.1.14
	OPENBSD_5_1:1.1.1.14.0.44
	OPENBSD_5_0:1.1.1.14.0.42
	OPENBSD_5_0_BASE:1.1.1.14
	OPENBSD_4_9:1.1.1.14.0.40
	OPENBSD_4_9_BASE:1.1.1.14
	OPENBSD_4_8:1.1.1.14.0.38
	OPENBSD_4_8_BASE:1.1.1.14
	OPENBSD_4_7:1.1.1.14.0.34
	OPENBSD_4_7_BASE:1.1.1.14
	OPENBSD_4_6:1.1.1.14.0.36
	OPENBSD_4_6_BASE:1.1.1.14
	OPENBSD_4_5:1.1.1.14.0.32
	OPENBSD_4_5_BASE:1.1.1.14
	OPENBSD_4_4:1.1.1.14.0.30
	OPENBSD_4_4_BASE:1.1.1.14
	OPENBSD_4_3:1.1.1.14.0.28
	OPENBSD_4_3_BASE:1.1.1.14
	OPENBSD_4_2:1.1.1.14.0.26
	OPENBSD_4_2_BASE:1.1.1.14
	OPENBSD_4_1:1.1.1.14.0.24
	OPENBSD_4_1_BASE:1.1.1.14
	OPENBSD_4_0:1.1.1.14.0.22
	OPENBSD_4_0_BASE:1.1.1.14
	OPENBSD_3_9:1.1.1.14.0.20
	OPENBSD_3_9_BASE:1.1.1.14
	OPENBSD_3_8:1.1.1.14.0.18
	OPENBSD_3_8_BASE:1.1.1.14
	OPENBSD_3_7:1.1.1.14.0.16
	OPENBSD_3_7_BASE:1.1.1.14
	OPENBSD_3_6:1.1.1.14.0.14
	OPENBSD_3_6_BASE:1.1.1.14
	OPENBSD_3_5:1.1.1.14.0.12
	OPENBSD_3_5_BASE:1.1.1.14
	OPENBSD_3_4:1.1.1.14.0.10
	OPENBSD_3_4_BASE:1.1.1.14
	OPENBSD_3_3:1.1.1.14.0.8
	OPENBSD_3_3_BASE:1.1.1.14
	OPENBSD_3_2:1.1.1.14.0.6
	OPENBSD_3_2_BASE:1.1.1.14
	OPENBSD_3_1:1.1.1.14.0.4
	OPENBSD_3_1_BASE:1.1.1.14
	OPENBSD_3_0:1.1.1.14.0.2
	OPENBSD_3_0_BASE:1.1.1.14
	cvs-1-11-1p1:1.1.1.14
	OPENBSD_2_9:1.1.1.13.0.8
	OPENBSD_2_9_BASE:1.1.1.13
	cvs-1-11:1.1.1.13
	OPENBSD_2_8:1.1.1.13.0.6
	OPENBSD_2_8_BASE:1.1.1.13
	OPENBSD_2_7:1.1.1.13.0.4
	OPENBSD_2_7_BASE:1.1.1.13
	OPENBSD_2_6:1.1.1.13.0.2
	OPENBSD_2_6_BASE:1.1.1.13
	cvs-1-10-7:1.1.1.13
	OPENBSD_2_5:1.1.1.12.0.2
	OPENBSD_2_5_BASE:1.1.1.12
	cvs-1-10-5:1.1.1.12
	OPENBSD_2_4:1.1.1.11.0.2
	OPENBSD_2_4_BASE:1.1.1.11
	cvs-1-10:1.1.1.11
	cvs-1-9-28:1.1.1.11
	OPENBSD_2_3:1.1.1.10.0.2
	OPENBSD_2_3_BASE:1.1.1.10
	cvs-1-9-26:1.1.1.10
	cvs-1-9-24:1.1.1.10
	OPENBSD_2_2:1.1.1.9.0.2
	OPENBSD_2_2_BASE:1.1.1.9
	cvs-1-9-10:1.1.1.9
	OPENBSD_2_1:1.1.1.8.0.2
	OPENBSD_2_1_BASE:1.1.1.8
	cvs-1-9-8:1.1.1.8
	cvs-1-9-6:1.1.1.7
	cvs-1-9-4:1.1.1.7
	cvs-1-9-2:1.1.1.6
	cvs-1-9:1.1.1.5
	OPENBSD_2_0:1.1.1.4.0.2
	OPENBSD_2_0_BASE:1.1.1.4
	cvs-1-8-1:1.1.1.4
	cvs-1-8:1.1.1.4
	cvs-1-7-2:1.1.1.3
	cvs-1-7-1:1.1.1.2
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.06.03.17.02.36;	author jcs;	state Exp;
branches;
next	1.1;

1.1
date	95.12.19.09.21.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.34;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.01.30.00.18.29;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.04.27.19.42.18;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.05.06.22.20.04;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	96.10.18.03.35.55;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.02.21.06.37.53;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	97.03.18.01.56.28;	author tholo;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	97.04.21.04.27.56;	author tholo;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	97.06.28.03.29.00;	author tholo;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	98.02.22.08.21.36;	author tholo;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	98.07.13.03.54.27;	author tholo;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	99.02.28.21.33.37;	author tholo;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	99.09.10.05.06.28;	author tholo;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2001.09.28.22.45.38;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.2
log
@backport commitid support from newer CVS (with a different random id
generator)

writing a commitid is currently disabled

ok deraadt
@
text
@/*
 * Copyright (c) 1992, Brian Berliner and Jeff Polk
 * Copyright (c) 1989-1992, Brian Berliner
 * 
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS source distribution.
 * 
 * Status Information
 */

#include "cvs.h"

static Dtype status_dirproc PROTO ((void *callerdat, char *dir,
				    char *repos, char *update_dir,
				    List *entries));
static int status_fileproc PROTO ((void *callerdat, struct file_info *finfo));
static int tag_list_proc PROTO((Node * p, void *closure));

static int local = 0;
static int long_format = 0;
static RCSNode *xrcsnode;

static const char *const status_usage[] =
{
    "Usage: %s %s [-vlR] [files...]\n",
    "\t-v\tVerbose format; includes tag information for the file\n",
    "\t-l\tProcess this directory only (not recursive).\n",
    "\t-R\tProcess directories recursively.\n",
    "(Specify the --help global option for a list of other help options)\n",
    NULL
};

int
cvsstatus (argc, argv)
    int argc;
    char **argv;
{
    int c;
    int err = 0;

    if (argc == -1)
	usage (status_usage);

    optind = 0;
    while ((c = getopt (argc, argv, "+vlR")) != -1)
    {
	switch (c)
	{
	    case 'v':
		long_format = 1;
		break;
	    case 'l':
		local = 1;
		break;
	    case 'R':
		local = 0;
		break;
	    case '?':
	    default:
		usage (status_usage);
		break;
	}
    }
    argc -= optind;
    argv += optind;

    wrap_setup ();

#ifdef CLIENT_SUPPORT
    if (current_parsed_root->isremote)
    {
	start_server ();

	ign_setup ();

	if (long_format)
	    send_arg("-v");
	if (local)
	    send_arg("-l");

	/* For a while, we tried setting SEND_NO_CONTENTS here so this
	   could be a fast operation.  That prevents the
	   server from updating our timestamp if the timestamp is
	   changed but the file is unmodified.  Worse, it is user-visible
	   (shows "locally modified" instead of "up to date" if
	   timestamp is changed but file is not).  And there is no good
	   workaround (you might not want to run "cvs update"; "cvs -n
	   update" doesn't update CVS/Entries; "cvs diff --brief" or
	   something perhaps could be made to work but somehow that
	   seems nonintuitive to me even if so).  Given that timestamps
	   seem to have the potential to get munged for any number of
	   reasons, it seems better to not rely too much on them.  */

	send_files (argc, argv, local, 0, 0);

	send_file_names (argc, argv, SEND_EXPAND_WILD);

	send_to_server ("status\012", 0);
	err = get_responses_and_close ();

	return err;
    }
#endif

    /* start the recursion processor */
    err = start_recursion (status_fileproc, (FILESDONEPROC) NULL,
			   status_dirproc, (DIRLEAVEPROC) NULL, NULL,
			   argc, argv, local,
			   W_LOCAL, 0, 1, (char *) NULL, 1);

    return (err);
}

/*
 * display the status of a file
 */
/* ARGSUSED */
static int
status_fileproc (callerdat, finfo)
    void *callerdat;
    struct file_info *finfo;
{
    Ctype status;
    char *sstat;
    Vers_TS *vers;
    Node *node;

    status = Classify_File (finfo, (char *) NULL, (char *) NULL, (char *) NULL,
			    1, 0, &vers, 0);
    sstat = "Classify Error";
    switch (status)
    {
	case T_UNKNOWN:
	    sstat = "Unknown";
	    break;
	case T_CHECKOUT:
	    sstat = "Needs Checkout";
	    break;
	case T_PATCH:
	    sstat = "Needs Patch";
	    break;
	case T_CONFLICT:
	    /* I _think_ that "unresolved" is correct; that if it has
	       been resolved then the status will change.  But I'm not
	       sure about that.  */
	    sstat = "Unresolved Conflict";
	    break;
	case T_ADDED:
	    sstat = "Locally Added";
	    break;
	case T_REMOVED:
	    sstat = "Locally Removed";
	    break;
	case T_MODIFIED:
	    if (vers->ts_conflict)
		sstat = "File had conflicts on merge";
	    else
		sstat = "Locally Modified";
	    break;
	case T_REMOVE_ENTRY:
	    sstat = "Entry Invalid";
	    break;
	case T_UPTODATE:
	    sstat = "Up-to-date";
	    break;
	case T_NEEDS_MERGE:
	    sstat = "Needs Merge";
	    break;
	case T_TITLE:
	    /* I don't think this case can occur here.  Just print
	       "Classify Error".  */
	    break;
    }

    cvs_output ("\
===================================================================\n", 0);
    if (vers->ts_user == NULL)
    {
	cvs_output ("File: no file ", 0);
	cvs_output (finfo->file, 0);
	cvs_output ("\t\tStatus: ", 0);
	cvs_output (sstat, 0);
	cvs_output ("\n\n", 0);
    }
    else
    {
	char *buf;
	buf = xmalloc (strlen (finfo->file) + strlen (sstat) + 80);
	sprintf (buf, "File: %-17s\tStatus: %s\n\n", finfo->file, sstat);
	cvs_output (buf, 0);
	free (buf);
    }

    if (vers->vn_user == NULL)
    {
	cvs_output ("   Working revision:\tNo entry for ", 0);
	cvs_output (finfo->file, 0);
	cvs_output ("\n", 0);
    }
    else if (vers->vn_user[0] == '0' && vers->vn_user[1] == '\0')
	cvs_output ("   Working revision:\tNew file!\n", 0);
#ifdef SERVER_SUPPORT
    else if (server_active)
    {
	cvs_output ("   Working revision:\t", 0);
	cvs_output (vers->vn_user, 0);
	cvs_output ("\n", 0);
    }
#endif
    else
    {
	cvs_output ("   Working revision:\t", 0);
	cvs_output (vers->vn_user, 0);
	cvs_output ("\t", 0);
	cvs_output (vers->ts_rcs, 0);
	cvs_output ("\n", 0);
    }

    if (vers->vn_rcs == NULL)
	cvs_output ("   Repository revision:\tNo revision control file\n", 0);
    else
    {
	cvs_output ("   Repository revision:\t", 0);
	cvs_output (vers->vn_rcs, 0);
	cvs_output ("\t", 0);
	cvs_output (vers->srcfile->path, 0);
	cvs_output ("\n", 0);

	node = findnode(vers->srcfile->versions,vers->vn_rcs);
	if (node)
	{
	    RCSVers *v;
	    v=(RCSVers*)node->data;
	    node = findnode(v->other_delta,"commitid");
	    cvs_output("   Commit Identifier:\t", 0);
	    if(node && node->data)
		cvs_output(node->data, 0);
	    else
		cvs_output("(none)",0);
	    cvs_output("\n",0);
	}
    }

    if (vers->entdata)
    {
	Entnode *edata;

	edata = vers->entdata;
	if (edata->tag)
	{
	    if (vers->vn_rcs == NULL)
	    {
		cvs_output ("   Sticky Tag:\t\t", 0);
		cvs_output (edata->tag, 0);
		cvs_output (" - MISSING from RCS file!\n", 0);
	    }
	    else
	    {
		if (isdigit ((unsigned char) edata->tag[0]))
		{
		    cvs_output ("   Sticky Tag:\t\t", 0);
		    cvs_output (edata->tag, 0);
		    cvs_output ("\n", 0);
		}
		else
		{
		    char *branch = NULL;

		    if (RCS_nodeisbranch (finfo->rcs, edata->tag))
			branch = RCS_whatbranch(finfo->rcs, edata->tag);

		    cvs_output ("   Sticky Tag:\t\t", 0);
		    cvs_output (edata->tag, 0);
		    cvs_output (" (", 0);
		    cvs_output (branch ? "branch" : "revision", 0);
		    cvs_output (": ", 0);
		    cvs_output (branch ? branch : vers->vn_rcs, 0);
		    cvs_output (")\n", 0);

		    if (branch)
			free (branch);
		}
	    }
	}
	else if (!really_quiet)
	    cvs_output ("   Sticky Tag:\t\t(none)\n", 0);

	if (edata->date)
	{
	    cvs_output ("   Sticky Date:\t\t", 0);
	    cvs_output (edata->date, 0);
	    cvs_output ("\n", 0);
	}
	else if (!really_quiet)
	    cvs_output ("   Sticky Date:\t\t(none)\n", 0);

	if (edata->options && edata->options[0])
	{
	    cvs_output ("   Sticky Options:\t", 0);
	    cvs_output (edata->options, 0);
	    cvs_output ("\n", 0);
	}
	else if (!really_quiet)
	    cvs_output ("   Sticky Options:\t(none)\n", 0);
    }

    if (long_format && vers->srcfile)
    {
	List *symbols = RCS_symbols(vers->srcfile);

	cvs_output ("\n   Existing Tags:\n", 0);
	if (symbols)
	{
	    xrcsnode = finfo->rcs;
	    (void) walklist (symbols, tag_list_proc, NULL);
	}
	else
	    cvs_output ("\tNo Tags Exist\n", 0);
    }

    cvs_output ("\n", 0);
    freevers_ts (&vers);
    return (0);
}

/*
 * Print a warm fuzzy message
 */
/* ARGSUSED */
static Dtype
status_dirproc (callerdat, dir, repos, update_dir, entries)
    void *callerdat;
    char *dir;
    char *repos;
    char *update_dir;
    List *entries;
{
    if (!quiet)
	error (0, 0, "Examining %s", update_dir);
    return (R_PROCESS);
}

/*
 * Print out a tag and its type
 */
static int
tag_list_proc (p, closure)
    Node *p;
    void *closure;
{
    char *branch = NULL;
    char *buf;

    if (RCS_nodeisbranch (xrcsnode, p->key))
	branch = RCS_whatbranch(xrcsnode, p->key) ;

    buf = xmalloc (80 + strlen (p->key)
		   + (branch ? strlen (branch) : strlen (p->data)));
    sprintf (buf, "\t%-25s\t(%s: %s)\n", p->key,
	     branch ? "branch" : "revision",
	     branch ? branch : p->data);
    cvs_output (buf, 0);
    free (buf);

    if (branch)
	free (branch);

    return (0);
}
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
 * specified in the README file that comes with the CVS 1.4 kit.
d13 4
a16 9
#ifndef lint
static const char rcsid[] = "$CVSid: @@(#)status.c 1.56 94/10/07 $";
USE(rcsid);
#endif

static Dtype status_dirproc PROTO((char *dir, char *repos, char *update_dir));
static int status_fileproc PROTO((char *file, char *update_dir,
			    char *repository, List * entries,
			    List * srcfiles));
d21 1
a21 2
static char *xfile;
static List *xsrcfiles;
d29 1
d34 1
a34 1
status (argc, argv)
d44 2
a45 2
    optind = 1;
    while ((c = getopt (argc, argv, "vlR")) != -1)
d70 3
a72 2
    if (client_active) {
      start_server ();
d74 1
a74 1
      ign_setup ();
d76 17
a92 4
      if (long_format)
	send_arg("-v");
      if (local)
	send_arg("-l");
d94 1
a94 3
      /* XXX This should only need to send file info; the file
	 contents themselves will not be examined.  */
      send_files (argc, argv, local, 0);
d96 1
a96 3
      if (fprintf (to_server, "status\n") < 0)
	error (1, errno, "writing to server");
      err = get_responses_and_close ();
d98 4
a101 1
      return err;
d106 4
a109 3
    err = start_recursion (status_fileproc, (int (*) ()) NULL, status_dirproc,
			   (int (*) ()) NULL, argc, argv, local,
			   W_LOCAL, 0, 1, (char *) NULL, 1, 0);
d119 3
a121 6
status_fileproc (file, update_dir, repository, entries, srcfiles)
    char *file;
    char *update_dir;
    char *repository;
    List *entries;
    List *srcfiles;
d126 1
d128 3
a130 3
    status = Classify_File (file, (char *) NULL, (char *) NULL, (char *) NULL,
			    1, 0, repository, entries, srcfiles, &vers,
			    update_dir, 0);
a138 1
#ifdef SERVER_SUPPORT
a141 1
#endif
d143 3
d156 1
a156 1
		sstat = "Unresolved Conflict";
d169 3
a171 2
	default:
	    sstat = "Classify Error";
d175 2
a176 1
    (void) printf ("===================================================================\n");
d178 7
a184 1
	(void) printf ("File: no file %s\t\tStatus: %s\n\n", file, sstat);
d186 7
a192 1
	(void) printf ("File: %-17s\tStatus: %s\n\n", file, sstat);
d195 5
a199 1
	(void) printf ("   Working revision:\tNo entry for %s\n", file);
d201 1
a201 1
	(void) printf ("   Working revision:\tNew file!\n");
d204 5
a208 1
	(void) printf ("   Working revision:\t%s\n", vers->vn_user);
d211 7
a217 2
	(void) printf ("   Working revision:\t%s\t%s\n", vers->vn_user,
		       vers->ts_rcs);
d220 1
a220 1
	(void) printf ("   Repository revision:\tNo revision control file\n");
d222 21
a242 2
	(void) printf ("   Repository revision:\t%s\t%s\n", vers->vn_rcs,
		       vers->srcfile->path);
d252 5
a256 3
		(void) printf (
			 "   Sticky Tag:\t\t%s - MISSING from RCS file!\n",
			 edata->tag);
d259 6
a264 2
		if (isdigit (edata->tag[0]))
		    (void) printf ("   Sticky Tag:\t\t%s\n", edata->tag);
d267 4
a270 1
		    int isbranch = RCS_isbranch (file, edata->tag, srcfiles);
d272 10
a281 6
		    (void) printf ("   Sticky Tag:\t\t%s (%s: %s)\n",
				   edata->tag,
				   isbranch ? "branch" : "revision",
				   isbranch ?
				   RCS_whatbranch(file, edata->tag, srcfiles) :
				   vers->vn_rcs);
d286 1
a286 1
	    (void) printf ("   Sticky Tag:\t\t(none)\n");
d289 5
a293 1
	    (void) printf ("   Sticky Date:\t\t%s\n", edata->date);
d295 1
a295 1
	    (void) printf ("   Sticky Date:\t\t(none)\n");
d298 5
a302 1
	    (void) printf ("   Sticky Options:\t%s\n", edata->options);
d304 6
a309 1
	    (void) printf ("   Sticky Options:\t(none)\n");
d311 2
a312 1
	if (long_format && vers->srcfile)
d314 2
a315 11
	    List *symbols = RCS_symbols(vers->srcfile);

	    (void) printf ("\n   Existing Tags:\n");
	    if (symbols)
	    {
		xfile = file;
		xsrcfiles = srcfiles;
		(void) walklist (symbols, tag_list_proc, NULL);
	    }
	    else
		(void) printf ("\tNo Tags Exist\n");
d317 2
d321 1
a321 1
    (void) printf ("\n");
d331 2
a332 1
status_dirproc (dir, repos, update_dir)
d336 1
d351 16
a366 1
    int isbranch = RCS_isbranch (xfile, p->key, xsrcfiles);
a367 4
    (void) printf ("\t%-25.25s\t(%s: %s)\n", p->key,
		   isbranch ? "branch" : "revision",
		   isbranch ? RCS_whatbranch(xfile, p->key, xsrcfiles) :
		   p->data);
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Upgrade to 1.7.1 snapshot
@
text
@a84 1
      send_file_names (argc, argv);
d89 2
a90 1
      send_to_server ("status\012", 0);
d98 2
a99 2
    err = start_recursion (status_fileproc, (FILESDONEPROC) NULL, status_dirproc,
			   (DIRLEAVEPROC) NULL, argc, argv, local,
@


1.1.1.3
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d13 5
d19 3
a21 1
static int status_fileproc PROTO((struct file_info *finfo));
d110 6
a115 2
status_fileproc (finfo)
    struct file_info *finfo;
d121 3
a123 3
    status = Classify_File (finfo->file, (char *) NULL, (char *) NULL, (char *) NULL,
			    1, 0, finfo->repository, finfo->entries, finfo->srcfiles, &vers,
			    finfo->update_dir, 0);
d168 1
a168 1
	(void) printf ("File: no file %s\t\tStatus: %s\n\n", finfo->file, sstat);
d170 1
a170 1
	(void) printf ("File: %-17s\tStatus: %s\n\n", finfo->file, sstat);
d173 1
a173 1
	(void) printf ("   Working revision:\tNo entry for %s\n", finfo->file);
d207 1
a207 4
		    char *branch = NULL;
	
		    if (RCS_isbranch (finfo->file, edata->tag, finfo->srcfiles))
			branch = RCS_whatbranch(finfo->file, edata->tag, finfo->srcfiles);
d211 4
a214 5
				   branch ? "branch" : "revision",
				   branch ? branch : vers->vn_rcs);

		    if (branch)
			free (branch);
d238 2
a239 2
		xfile = finfo->file;
		xsrcfiles = finfo->srcfiles;
d275 1
a275 4
    char *branch = NULL;

    if (RCS_isbranch (xfile, p->key, xsrcfiles))
	branch = RCS_whatbranch(xfile, p->key, xsrcfiles) ;
d278 3
a280 6
		   branch ? "branch" : "revision",
		   branch ? branch : p->data);

    if (branch)
	free (branch);

@


1.1.1.4
log
@New CVS release from Cyclic Software
@
text
@d19 2
a20 1
static RCSNode *xrcsnode;
d78 1
a78 1
      send_file_names (argc, argv, SEND_EXPAND_WILD);
d111 1
a111 1
			    1, 0, finfo->repository, finfo->entries, finfo->rcs, &vers,
d198 2
a199 2
		    if (RCS_isbranch (finfo->rcs, edata->tag))
			branch = RCS_whatbranch(finfo->rcs, edata->tag);
d231 2
a232 1
		xrcsnode = finfo->rcs;
d270 2
a271 2
    if (RCS_isbranch (xrcsnode, p->key))
	branch = RCS_whatbranch(xrcsnode, p->key) ;
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@d13 2
a14 4
static Dtype status_dirproc PROTO ((void *callerdat, char *dir,
				    char *repos, char *update_dir,
				    List *entries));
static int status_fileproc PROTO ((void *callerdat, struct file_info *finfo));
d90 3
a92 4
    err = start_recursion (status_fileproc, (FILESDONEPROC) NULL,
			   status_dirproc, (DIRLEAVEPROC) NULL, NULL,
			   argc, argv, local,
			   W_LOCAL, 0, 1, (char *) NULL, 1);
d102 1
a102 2
status_fileproc (callerdat, finfo)
    void *callerdat;
d109 3
a111 3
    status = Classify_File (finfo, (char *) NULL, (char *) NULL, (char *) NULL,
			    1, 0, &vers, 0);
    sstat = "Classify Error";
d149 2
a150 3
	case T_TITLE:
	    /* I don't think this case can occur here.  Just print
	       "Classify Error".  */
d154 1
a154 2
    cvs_output ("\
===================================================================\n", 0);
d156 1
a156 7
    {
	cvs_output ("File: no file ", 0);
	cvs_output (finfo->file, 0);
	cvs_output ("\t\tStatus: ", 0);
	cvs_output (sstat, 0);
	cvs_output ("\n\n", 0);
    }
d158 1
a158 7
    {
	char *buf;
	buf = xmalloc (strlen (finfo->file) + strlen (sstat) + 80);
	sprintf (buf, "File: %-17s\tStatus: %s\n\n", finfo->file, sstat);
	cvs_output (buf, 0);
	free (buf);
    }
d161 1
a161 5
    {
	cvs_output ("   Working revision:\tNo entry for ", 0);
	cvs_output (finfo->file, 0);
	cvs_output ("\n", 0);
    }
d163 1
a163 1
	cvs_output ("   Working revision:\tNew file!\n", 0);
d166 1
a166 5
    {
	cvs_output ("   Working revision:\t", 0);
	cvs_output (vers->vn_user, 0);
	cvs_output ("\n", 0);
    }
d169 2
a170 7
    {
	cvs_output ("   Working revision:\t", 0);
	cvs_output (vers->vn_user, 0);
	cvs_output ("\t", 0);
	cvs_output (vers->ts_rcs, 0);
	cvs_output ("\n", 0);
    }
d173 1
a173 1
	cvs_output ("   Repository revision:\tNo revision control file\n", 0);
d175 2
a176 7
    {
	cvs_output ("   Repository revision:\t", 0);
	cvs_output (vers->vn_rcs, 0);
	cvs_output ("\t", 0);
	cvs_output (vers->srcfile->path, 0);
	cvs_output ("\n", 0);
    }
d186 3
a188 5
	    {
		cvs_output ("   Sticky Tag:\t\t", 0);
		cvs_output (edata->tag, 0);
		cvs_output (" - MISSING from RCS file!\n", 0);
	    }
d192 1
a192 5
		{
		    cvs_output ("   Sticky Tag:\t\t", 0);
		    cvs_output (edata->tag, 0);
		    cvs_output ("\n", 0);
		}
d196 1
a196 1

d200 4
a203 7
		    cvs_output ("   Sticky Tag:\t\t", 0);
		    cvs_output (edata->tag, 0);
		    cvs_output (" (", 0);
		    cvs_output (branch ? "branch" : "revision", 0);
		    cvs_output (": ", 0);
		    cvs_output (branch ? branch : vers->vn_rcs, 0);
		    cvs_output (")\n", 0);
d211 1
a211 1
	    cvs_output ("   Sticky Tag:\t\t(none)\n", 0);
d214 1
a214 5
	{
	    cvs_output ("   Sticky Date:\t\t", 0);
	    cvs_output (edata->date, 0);
	    cvs_output ("\n", 0);
	}
d216 1
a216 1
	    cvs_output ("   Sticky Date:\t\t(none)\n", 0);
d219 1
a219 5
	{
	    cvs_output ("   Sticky Options:\t", 0);
	    cvs_output (edata->options, 0);
	    cvs_output ("\n", 0);
	}
d221 1
a221 1
	    cvs_output ("   Sticky Options:\t(none)\n", 0);
d227 1
a227 1
	    cvs_output ("\n   Existing Tags:\n", 0);
d234 1
a234 1
		cvs_output ("\tNo Tags Exist\n", 0);
d238 1
a238 1
    cvs_output ("\n", 0);
d248 1
a248 2
status_dirproc (callerdat, dir, repos, update_dir, entries)
    void *callerdat;
a251 1
    List *entries;
a266 1
    char *buf;
d271 3
a273 7
    buf = xmalloc (80 + strlen (p->key)
		   + (branch ? strlen (branch) : strlen (p->data)));
    sprintf (buf, "\t%-25.25s\t(%s: %s)\n", p->key,
	     branch ? "branch" : "revision",
	     branch ? branch : p->data);
    cvs_output (buf, 0);
    free (buf);
@


1.1.1.6
log
@New release from Cyclic Software
@
text
@d82 1
a82 1
      send_files (argc, argv, local, 0, 0);
d329 1
a329 1
    sprintf (buf, "\t%-25s\t(%s: %s)\n", p->key,
@


1.1.1.7
log
@New release from Cyclic Software
@
text
@d82 1
a82 1
      send_files (argc, argv, local, 0, 0, 0);
a129 3
	    /* I _think_ that "unresolved" is correct; that if it has
	       been resolved then the status will change.  But I'm not
	       sure about that.  */
d140 1
a140 1
		sstat = "File had conflicts on merge";
@


1.1.1.8
log
@Latest release from Cyclic Software
@
text
@d44 1
a44 1
    while ((c = getopt (argc, argv, "+vlR")) != -1)
d80 3
a82 7
      /* Note that by setting SEND_NO_CONTENTS, we do prevent the
	 server from updating our timestamp if the timestamp is
	 unchanged and the file is unmodified.  And I think it is a
	 user-visible thing in that case (shows "locally modified"
	 instead of "up to date" I would think).  But the speed seems
	 to be worth it.  */
      send_files (argc, argv, local, 0, SEND_NO_CONTENTS);
@


1.1.1.9
log
@Latest version from Cyclic Software
@
text
@d43 1
a43 1
    optind = 0;
@


1.1.1.10
log
@Latest version from Cyclic
@
text
@d6 1
a6 1
 * specified in the README file that comes with the CVS source distribution.
a28 1
    "(Specify the --help global option for a list of other help options)\n",
d80 1
a80 3

      /* For a while, we tried setting SEND_NO_CONTENTS here so this
	 could be a fast operation.  That prevents the
d82 5
a86 11
	 changed but the file is unmodified.  Worse, it is user-visible
	 (shows "locally modified" instead of "up to date" if
	 timestamp is changed but file is not).  And there is no good
	 workaround (you might not want to run "cvs update"; "cvs -n
	 update" doesn't update CVS/Entries; "cvs diff --brief" or
	 something perhaps could be made to work but somehow that
	 seems nonintuitive to me even if so).  Given that timestamps
	 seem to have the potential to get munged for any number of
	 reasons, it seems better to not rely too much on them.  */

      send_files (argc, argv, local, 0, 0);
d246 1
a246 1
		    if (RCS_nodeisbranch (finfo->rcs, edata->tag))
d331 1
a331 1
    if (RCS_nodeisbranch (xrcsnode, p->key))
@


1.1.1.11
log
@Latest version from Cyclic
@
text
@d34 1
a34 1
cvsstatus (argc, argv)
@


1.1.1.12
log
@Latest version from Cyclic
@
text
@d80 2
a96 2
      send_file_names (argc, argv, SEND_EXPAND_WILD);

d245 1
a245 1
		if (isdigit ((unsigned char) edata->tag[0]))
@


1.1.1.13
log
@Latest version from Cyclic
@
text
@d70 2
a71 3
    if (client_active)
    {
	start_server ();
d73 1
a73 1
	ign_setup ();
d75 17
a91 17
	if (long_format)
	    send_arg("-v");
	if (local)
	    send_arg("-l");

	/* For a while, we tried setting SEND_NO_CONTENTS here so this
	   could be a fast operation.  That prevents the
	   server from updating our timestamp if the timestamp is
	   changed but the file is unmodified.  Worse, it is user-visible
	   (shows "locally modified" instead of "up to date" if
	   timestamp is changed but file is not).  And there is no good
	   workaround (you might not want to run "cvs update"; "cvs -n
	   update" doesn't update CVS/Entries; "cvs diff --brief" or
	   something perhaps could be made to work but somehow that
	   seems nonintuitive to me even if so).  Given that timestamps
	   seem to have the potential to get munged for any number of
	   reasons, it seems better to not rely too much on them.  */
d93 1
a93 1
	send_files (argc, argv, local, 0, 0);
d95 1
a95 1
	send_file_names (argc, argv, SEND_EXPAND_WILD);
d97 2
a98 2
	send_to_server ("status\012", 0);
	err = get_responses_and_close ();
d100 1
a100 1
	return err;
a290 1
    }
d292 3
a294 3
    if (long_format && vers->srcfile)
    {
	List *symbols = RCS_symbols(vers->srcfile);
d296 8
a303 5
	cvs_output ("\n   Existing Tags:\n", 0);
	if (symbols)
	{
	    xrcsnode = finfo->rcs;
	    (void) walklist (symbols, tag_list_proc, NULL);
a304 2
	else
	    cvs_output ("\tNo Tags Exist\n", 0);
@


1.1.1.14
log
@Latest from Cyclic Software
@
text
@d70 1
a70 1
    if (current_parsed_root->isremote)
d138 1
d142 1
@


