head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.7.0.72
	OPENBSD_6_1_BASE:1.1.1.7
	OPENBSD_6_0:1.1.1.7.0.70
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.66
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.68
	OPENBSD_5_8_BASE:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.60
	OPENBSD_5_7_BASE:1.1.1.7
	OPENBSD_5_6:1.1.1.7.0.64
	OPENBSD_5_6_BASE:1.1.1.7
	OPENBSD_5_5:1.1.1.7.0.62
	OPENBSD_5_5_BASE:1.1.1.7
	OPENBSD_5_4:1.1.1.7.0.58
	OPENBSD_5_4_BASE:1.1.1.7
	OPENBSD_5_3:1.1.1.7.0.56
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.54
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.52
	OPENBSD_5_0:1.1.1.7.0.50
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.48
	OPENBSD_4_9_BASE:1.1.1.7
	OPENBSD_4_8:1.1.1.7.0.46
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.42
	OPENBSD_4_7_BASE:1.1.1.7
	OPENBSD_4_6:1.1.1.7.0.44
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.40
	OPENBSD_4_5_BASE:1.1.1.7
	OPENBSD_4_4:1.1.1.7.0.38
	OPENBSD_4_4_BASE:1.1.1.7
	OPENBSD_4_3:1.1.1.7.0.36
	OPENBSD_4_3_BASE:1.1.1.7
	OPENBSD_4_2:1.1.1.7.0.34
	OPENBSD_4_2_BASE:1.1.1.7
	OPENBSD_4_1:1.1.1.7.0.32
	OPENBSD_4_1_BASE:1.1.1.7
	OPENBSD_4_0:1.1.1.7.0.30
	OPENBSD_4_0_BASE:1.1.1.7
	OPENBSD_3_9:1.1.1.7.0.28
	OPENBSD_3_9_BASE:1.1.1.7
	OPENBSD_3_8:1.1.1.7.0.26
	OPENBSD_3_8_BASE:1.1.1.7
	OPENBSD_3_7:1.1.1.7.0.24
	OPENBSD_3_7_BASE:1.1.1.7
	OPENBSD_3_6:1.1.1.7.0.22
	OPENBSD_3_6_BASE:1.1.1.7
	OPENBSD_3_5:1.1.1.7.0.20
	OPENBSD_3_5_BASE:1.1.1.7
	OPENBSD_3_4:1.1.1.7.0.18
	OPENBSD_3_4_BASE:1.1.1.7
	OPENBSD_3_3:1.1.1.7.0.16
	OPENBSD_3_3_BASE:1.1.1.7
	OPENBSD_3_2:1.1.1.7.0.14
	OPENBSD_3_2_BASE:1.1.1.7
	OPENBSD_3_1:1.1.1.7.0.12
	OPENBSD_3_1_BASE:1.1.1.7
	OPENBSD_3_0:1.1.1.7.0.10
	OPENBSD_3_0_BASE:1.1.1.7
	cvs-1-11-1p1:1.1.1.7
	OPENBSD_2_9:1.1.1.7.0.8
	OPENBSD_2_9_BASE:1.1.1.7
	cvs-1-11:1.1.1.7
	OPENBSD_2_8:1.1.1.7.0.6
	OPENBSD_2_8_BASE:1.1.1.7
	OPENBSD_2_7:1.1.1.7.0.4
	OPENBSD_2_7_BASE:1.1.1.7
	OPENBSD_2_6:1.1.1.7.0.2
	OPENBSD_2_6_BASE:1.1.1.7
	cvs-1-10-7:1.1.1.7
	OPENBSD_2_5:1.1.1.6.0.6
	OPENBSD_2_5_BASE:1.1.1.6
	cvs-1-10-5:1.1.1.6
	OPENBSD_2_4:1.1.1.6.0.4
	OPENBSD_2_4_BASE:1.1.1.6
	cvs-1-10:1.1.1.6
	cvs-1-9-28:1.1.1.6
	OPENBSD_2_3:1.1.1.6.0.2
	OPENBSD_2_3_BASE:1.1.1.6
	cvs-1-9-26:1.1.1.6
	cvs-1-9-24:1.1.1.6
	OPENBSD_2_2:1.1.1.5.0.4
	OPENBSD_2_2_BASE:1.1.1.5
	cvs-1-9-10:1.1.1.5
	OPENBSD_2_1:1.1.1.5.0.2
	OPENBSD_2_1_BASE:1.1.1.5
	cvs-1-9-8:1.1.1.5
	cvs-1-9-6:1.1.1.5
	cvs-1-9-4:1.1.1.5
	cvs-1-9-2:1.1.1.4
	cvs-1-9:1.1.1.3
	OPENBSD_2_0:1.1.1.2.0.2
	OPENBSD_2_0_BASE:1.1.1.2
	cvs-1-8-1:1.1.1.2
	cvs-1-8:1.1.1.2
	cvs-1-7-2:1.1.1.2
	cvs-1-7-1:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	96.01.30.00.17.53;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.30.00.17.53;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.04.27.19.41.33;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.10.18.03.35.19;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.02.21.06.37.15;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.03.18.01.55.52;	author tholo;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	98.02.22.08.20.57;	author tholo;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.09.10.05.06.20;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Declarations for file attribute munging features.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

#ifndef FILEATTR_H

/* File containing per-file attributes.  Format is a series of entries:

   ENT-TYPE FILENAME <tab> ATTRNAME = ATTRVAL
     {; ATTRNAME = ATTRVAL} <linefeed>

   ENT-TYPE is 'F' for a file, in which case the entry specifies the
   attributes for that file.

   ENT-TYPE is 'D', and FILENAME empty, to specify default attributes
   to be used for newly added files.

   There is currently no way of quoting tabs or linefeeds in the
   filename, '=' in ATTRNAME, ';' in ATTRVAL, etc.  I'm not sure
   whether I think we need one.  Note: the current implementation also
   doesn't handle '\0' in any of the fields.

   By convention, ATTRNAME starting with '_' is for an attribute given
   special meaning by CVS; other ATTRNAMEs are for user-defined attributes
   (or will be, once we add commands to manipulate user-defined attributes).

   Builtin attributes:

   _watched: Present means the file is watched and should be checked out
   read-only.

   _watchers: Users with watches for this file.  Value is
   WATCHER > TYPE { , WATCHER > TYPE }
   where WATCHER is a username, and TYPE is edit,unedit,commit separated by
   + (or nothing if none; there is no "none" or "all" keyword).

   _editors: Users editing this file.  Value is
   EDITOR > VAL { , EDITOR > VAL }
   where EDITOR is a username, and VAL is TIME+HOSTNAME+PATHNAME, where
   TIME is when the "cvs edit" command happened,
   and HOSTNAME and PATHNAME are for the working directory.  */

#define CVSREP_FILEATTR "CVS/fileattr"

/* Prepare for a new directory with repository REPOS.  If REPOS is NULL,
   then prepare for a "non-directory"; the caller can call fileattr_write
   and fileattr_free, but must not call fileattr_get or fileattr_set.  */
extern void fileattr_startdir PROTO ((char *repos));

/* Get the attribute ATTRNAME for file FILENAME.  The return value
   points into memory managed by the fileattr_* routines, should not
   be altered by the caller, and is only good until the next call to
   fileattr_clear or fileattr_set.  It points to the value, terminated
   by '\0' or ';'.  Return NULL if said file lacks said attribute.  */
extern char *fileattr_get PROTO ((char *filename, char *attrname));

/* Like fileattr_get, but return a pointer to a newly malloc'd string
   terminated by '\0' (or NULL if said file lacks said attribute).  */
extern char *fileattr_get0 PROTO ((char *filename, char *attrname));

/* This is just a string manipulation function; it does not manipulate
   file attributes as such.  

   LIST is in the format

   ATTRNAME NAMEVALSEP ATTRVAL {ENTSEP ATTRNAME NAMEVALSEP ATTRVAL}

   And we want to put in an attribute with name NAME and value VAL,
   replacing the already-present attribute with name NAME if there is
   one.  Or if VAL is NULL remove attribute NAME.  Return a new
   malloc'd list; don't muck with the one passed in.  If we are removing
   the last attribute return NULL.  LIST can be NULL to mean that we
   started out without any attributes.

   Examples:

   fileattr_modify ("abc=def", "xxx", "val", '=', ';')) => "abc=def;xxx=val"
   fileattr_modify ("abc=def", "abc", "val", '=', ';')) => "abc=val"
   fileattr_modify ("abc=v1;def=v2", "abc", "val", '=', ';'))
     => "abc=val;def=v2"
   fileattr_modify ("abc=v1;def=v2", "def", "val", '=', ';'))
     => "abc=v1;def=val"
   fileattr_modify ("abc=v1;def=v2", "xxx", "val"))
     => "abc=v1;def=v2;xxx=val"
   fileattr_modify ("abc=v1;def=v2;ghi=v3", "def", "val", '=', ';'))
     => "abc=v1;def=val;ghi=v3"
*/

extern char *fileattr_modify PROTO ((char *list, char *attrname,
				     char *attrval, int namevalsep,
				     int entsep));

/* Set attribute ATTRNAME for file FILENAME to ATTRVAL.  If ATTRVAL is NULL,
   the attribute is removed.  Changes are not written to disk until the
   next call to fileattr_write.  If FILENAME is NULL, set attributes for
   files created in the future.  If ATTRVAL is NULL, remove that attribute.  */
extern void fileattr_set PROTO ((char *filename, char *attrname,
				 char *attrval));

/* Set the attributes for file FILENAME in whatever manner is appropriate
   for a newly created file.  */
extern void fileattr_newfile PROTO ((char *filename));

/* Write out all modified attributes.  */
extern void fileattr_write PROTO ((void));

/* Free all memory allocated by fileattr_*.  */
extern void fileattr_free PROTO ((void));

#define FILEATTR_H 1
#endif /* fileattr.h */
@


1.1.1.1
log
@Upgrade to 1.7.1 snapshot
@
text
@@


1.1.1.2
log
@Latest public release from Cyclic; fixes numerous memory leaks and have
some performance improvements
@
text
@d66 1
a66 3
   by '\0' or ';'.  Return NULL if said file lacks said attribute.
   If FILENAME is NULL, return default attributes (attributes for
   files created in the future).  */
@


1.1.1.3
log
@New release from Cyclic Software
@
text
@d69 1
a69 1
extern char *fileattr_get PROTO ((const char *filename, const char *attrname));
d73 1
a73 2
extern char *fileattr_get0 PROTO ((const char *filename,
				   const char *attrname));
d103 2
a104 2
extern char *fileattr_modify PROTO ((char *list, const char *attrname,
				     const char *attrval, int namevalsep,
d111 2
a112 2
extern void fileattr_set PROTO ((const char *filename, const char *attrname,
				 const char *attrval));
d116 1
a116 1
extern void fileattr_newfile PROTO ((const char *filename));
@


1.1.1.4
log
@New release from Cyclic Software
@
text
@d11 5
a15 1
   GNU General Public License for more details.  */
@


1.1.1.5
log
@New release from Cyclic Software
@
text
@a25 7
   Other ENT-TYPE are reserved for future expansion.  CVS 1.9 and older
   will delete them any time it writes file attributes.  Current versions
   of CVS will preserve them.

   Note that the order of the line is not significant; CVS is free to
   rearrange them at its convenience.

d94 1
a94 1
   fileattr_modify ("abc=v1;def=v2", "xxx", "val", '=', ';'))
@


1.1.1.6
log
@Latest version from Cyclic
@
text
@a117 11
/* Get all the attributes for file FILENAME.  They are returned as malloc'd
   data in an unspecified format which is guaranteed only to be good for
   passing to fileattr_setall, or NULL if no attributes.  If FILENAME is
   NULL, get default attributes.  */
extern char *fileattr_getall PROTO ((const char *filename));

/* Set the attributes for file FILENAME to ATTRS, overwriting all previous
   attributes for that file.  ATTRS was obtained from a previous call to
   fileattr_getall (malloc'd data or NULL).  */
extern void fileattr_setall PROTO ((const char *filename, const char *attrs));

@


1.1.1.7
log
@Latest version from Cyclic
@
text
@d15 1
a15 3
/* File containing per-file attributes.  The format of this file is in
   cvs.texinfo but here is a quick summary.  The file contains a
   series of entries:
d20 2
a21 1
   ENT-TYPE is 'F' for a file.
d23 2
a24 1
   ENT-TYPE is 'D', and FILENAME empty, for default attributes.
d26 3
a28 1
   Other ENT-TYPE are reserved for future expansion.
d33 4
a36 2
   FIXME: this implementation doesn't handle '\0' in any of the
   fields.  We are encouraged to fix this (by cvs.texinfo).
@


