head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.74
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.72
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.68
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.70
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.62
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.66
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.64
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.60
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.58
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.56
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.54
	OPENBSD_5_0:1.1.1.2.0.52
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.50
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.48
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.44
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.46
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.42
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.40
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.38
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.36
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.34
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.32
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.30
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.28
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.26
	OPENBSD_3_7_BASE:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.24
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.22
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.20
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.18
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.16
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.14
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.12
	OPENBSD_3_0_BASE:1.1.1.2
	cvs-1-11-1p1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.10
	OPENBSD_2_9_BASE:1.1.1.2
	cvs-1-11:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.8
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.6
	OPENBSD_2_7_BASE:1.1.1.2
	OPENBSD_2_6:1.1.1.2.0.4
	OPENBSD_2_6_BASE:1.1.1.2
	cvs-1-10-7:1.1.1.2
	OPENBSD_2_5:1.1.1.2.0.2
	OPENBSD_2_5_BASE:1.1.1.2
	cvs-1-10-5:1.1.1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	cvs-1-10:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	98.08.22.20.52.08;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.08.22.20.52.08;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.02.28.21.31.57;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Interface header file for GNU DIFF library.
   Copyright (C) 1998 Free Software Foundation, Inc.

This file is part of GNU DIFF.

GNU DIFF is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU DIFF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU DIFF; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

#ifndef DIFFRUN_H
#define DIFFRUN_H

/* This header file defines the interfaces used by the diff library.
   It should be included by programs which use the diff library.  */

#include <sys/types.h>

#if defined __STDC__ && __STDC__
#define DIFFPARAMS(args) args
#else
#define DIFFPARAMS(args) ()
#endif

/* The diff_callbacks structure is used to handle callbacks from the
   diff library.  All output goes through these callbacks.  When a
   pointer to this structure is passed in, it may be NULL.  Also, any
   of the individual callbacks may be NULL.  This means that the
   default action should be taken.  */

struct diff_callbacks
{
  /* Write output.  This function just writes a string of a given
     length to the output file.  The default is to fwrite to OUTFILE.
     If this callback is defined, flush_output must also be defined.  */
  void (*write_output) DIFFPARAMS((char const *, size_t));
  /* Flush output.  The default is to fflush OUTFILE.  If this
     callback is defined, write_output must also be defined.  */
  void (*flush_output) DIFFPARAMS((void));
  /* Write to stdout.  This is called for version and help messages.  */
  void (*write_stdout) DIFFPARAMS((char const *));
  /* Print an error message.  The first argument is a printf format,
     and the next two are parameters.  The default is to print a
     message on stderr.  */
  void (*error) DIFFPARAMS((char const *, char const *, char const *));
};

/* Run a diff.  */

extern int diff_run DIFFPARAMS((int, char **, char *,
				const struct diff_callbacks *));

/* Run a diff3.  */

extern int diff3_run DIFFPARAMS((int, char **, char *,
				 const struct diff_callbacks *));

#undef DIFFPARAMS

#endif /* DIFFRUN_H */
@


1.1.1.1
log
@Latest version from Cyclic
@
text
@@


1.1.1.2
log
@Latest version from Cyclic
@
text
@d16 3
a18 1
*/
d44 1
a44 2
     If this callback is defined, flush_output must also be defined.
     If the length is zero, output zero bytes.  */
d49 1
a49 2
  /* Write a '\0'-terminated string to stdout.
     This is called for version and help messages.  */
@

