head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.3.0.10
	OPENBSD_2_5_BASE:1.1.1.3
	cvs-1-10-5:1.1.1.3
	OPENBSD_2_4:1.1.1.3.0.8
	OPENBSD_2_4_BASE:1.1.1.3
	cvs-1-10:1.1.1.3
	cvs-1-9-28:1.1.1.3
	OPENBSD_2_3:1.1.1.3.0.6
	OPENBSD_2_3_BASE:1.1.1.3
	cvs-1-9-26:1.1.1.3
	cvs-1-9-24:1.1.1.3
	OPENBSD_2_2:1.1.1.3.0.4
	OPENBSD_2_2_BASE:1.1.1.3
	cvs-1-9-10:1.1.1.3
	OPENBSD_2_1:1.1.1.3.0.2
	OPENBSD_2_1_BASE:1.1.1.3
	cvs-1-9-8:1.1.1.3
	cvs-1-9-6:1.1.1.3
	cvs-1-9-4:1.1.1.3
	cvs-1-9-2:1.1.1.3
	cvs-1-9:1.1.1.3
	OPENBSD_2_0:1.1.1.2.0.2
	OPENBSD_2_0_BASE:1.1.1.2
	cvs-1-8-1:1.1.1.2
	cvs-1-8:1.1.1.2
	cvs-1-7-2:1.1.1.1
	cvs-1-7-1:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.09.10.05.21.32;	author tholo;	state dead;
branches;
next	1.1;

1.1
date	96.01.30.00.19.39;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.30.00.19.39;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.05.06.22.21.21;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.10.18.03.37.04;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Integrate local changes
@
text
@/*
 * server_if.c
 * Open connection to the CVS server under MacOS
 *
 * Michael Ladwig <mike@@twinpeaks.prc.com> --- November 1995
 */

#include "cvs.h"

#include <GUSI.h>
#include <sys/socket.h>

static int read_fd, write_fd;
    
void
macos_start_server (int *tofd, int *fromfd,
		  char *client_user,
		  char *server_user,
		  char *server_host,
		  char *server_cvsroot)
{
    char *cvs_server;
    char *command;
    struct servent *s;
    unsigned short port;

    if (! (cvs_server = getenv ("CVS_SERVER")))
        cvs_server = "cvs";
    command = alloca (strlen (cvs_server)
    		      + strlen (server_cvsroot)
		      + 50);
    sprintf (command, "%s -d %s server", cvs_server, server_cvsroot);

    if ((s = getservbyname("shell", "tcp")) == NULL)
    error (1, errno, "cannot getservbyname for shell, tcp");

    else
        port = s->s_port;

    read_fd = rcmd (&server_host,
    	            port,
    	            client_user,
	            (server_user ? server_user : client_user),
	            command,
	            0);
    if (read_fd < 0)
	error (1, errno, "cannot start server via rcmd");
    
    /* Split the socket into a reading and a writing half.  */
    if ((write_fd = dup (read_fd)) < 0)
        error (1, errno, "duplicating server connection");
    
    *tofd = write_fd;
    *fromfd = read_fd;
}


void
macos_shutdown_server (int to_server)
{
	if( close (read_fd) != 0 ) perror( "close on read_fd");
	if( close (write_fd) != 0 ) perror( "close on write_fd");
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Upgrade to 1.7.1 snapshot
@
text
@@


1.1.1.2
log
@New CVS release from Cyclic Software
@
text
@d24 1
a24 2
    char *portenv;
    struct servent *sptr;
d29 3
a31 3
    command = xmalloc (strlen (cvs_server)
		       + strlen (server_cvsroot)
		       + 50);
d34 3
a36 5
    portenv = getenv("CVS_RCMD_PORT");
    if (portenv)
	port = atoi(portenv);
    else if ((sptr = getservbyname("shell", "tcp")) != NULL)
	port = sptr->s_port;
d38 1
a38 1
	error (1, errno, "cannot getservbyname for shell, tcp");
a54 1
    free (command);
@


1.1.1.3
log
@New release from Cyclic Software
@
text
@a7 1
#include "mac_config.h"
d41 1
a41 5
	/* This is the normal case.  Macs will generally lack a /etc/services
	   file (causing getservbyname to fail), and getenv is only something
	   that we provide via our own AppleEvents stuff, not a standard
	   Mac feature.  */
	port = 514;
@

