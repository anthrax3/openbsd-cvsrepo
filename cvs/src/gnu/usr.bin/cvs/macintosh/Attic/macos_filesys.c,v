head	1.2;
access;
symbols
	OPENBSD_2_5:1.1.1.2.0.10
	OPENBSD_2_5_BASE:1.1.1.2
	cvs-1-10-5:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.8
	OPENBSD_2_4_BASE:1.1.1.2
	cvs-1-10:1.1.1.2
	cvs-1-9-28:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.6
	OPENBSD_2_3_BASE:1.1.1.2
	cvs-1-9-26:1.1.1.2
	cvs-1-9-24:1.1.1.2
	OPENBSD_2_2:1.1.1.2.0.4
	OPENBSD_2_2_BASE:1.1.1.2
	cvs-1-9-10:1.1.1.2
	OPENBSD_2_1:1.1.1.2.0.2
	OPENBSD_2_1_BASE:1.1.1.2
	cvs-1-9-8:1.1.1.2
	cvs-1-9-6:1.1.1.2
	cvs-1-9-4:1.1.1.2
	cvs-1-9-2:1.1.1.2
	cvs-1-9:1.1.1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	cvs-1-8-1:1.1.1.1
	cvs-1-8:1.1.1.1
	cvs-1-7-2:1.1.1.1
	cvs-1-7-1:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.09.10.05.21.31;	author tholo;	state dead;
branches;
next	1.1;

1.1
date	96.01.30.00.19.39;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.30.00.19.39;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.10.18.03.37.00;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Integrate local changes
@
text
@/*
 * macos_filesys.c
 * Filesystem handling stuff for macos
 *
 * Some of this stuff is not "regular", but there are a number of weird
 * conditions that a plain filepath translation didn't seem to handle.
 * For now, this seems to work.
 *
 * Michael Ladwig <mike@@twinpeaks.prc.com> --- November 1995
 */

#include <cvs.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static char *macos_fixpath (const char *path);
static char scratchPath[1024];

int
macos_mkdir( const char *path, int oflag )
{
	char macPath[1024], *sepCh;

	strcpy( macPath, ":" );
	strcat( macPath, path );
	while( (sepCh = strchr(macPath, '/')) != NULL )
		*sepCh = ':';
	
	return mkdir(macPath);
}

int
macos_open( const char *path, int oflag, ... )
{
	char macPath[1024], *sepCh;
	
	strcpy( macPath, ":" );
	strcat( macPath, path );
	while( (sepCh = strchr(macPath, '/')) != NULL )
		*sepCh = ':';

	return open(macPath, oflag);
}

int
macos_chmod( const char *path, mode_t mode )
{
	char macPath[1024], *sepCh;
	
	strcpy( macPath, ":" );
	strcat( macPath, path );
	while( (sepCh = strchr(macPath, '/')) != NULL )
		*sepCh = ':';

	return chmod(macPath, mode);
}

int
macos_creat( const char *path, mode_t mode )
{
	char macPath[1024], *sepCh;
	
	strcpy( macPath, ":" );
	strcat( macPath, path );
	while( (sepCh = strchr(macPath, '/')) != NULL )
		*sepCh = ':';

	return creat(macPath);
}

FILE *
macos_fopen( const char *path, const char *mode )
{
	FILE	*fp;
	char	macPath[1024], *sepCh;
	
	strcpy( macPath, ":" );
	strcat( macPath, path );
	while( (sepCh = strchr(macPath, '/')) != NULL )
		*sepCh = ':';
		
	fp = fopen(macPath, mode);
	
	/* Don't know why I'm getting ENOTDIR, but it should be ENOENT */
	
	if( (fp == NULL) && (errno == ENOTDIR) ) errno = ENOENT;
	
	return fp;
}

int
macos_chdir( const char *path )
{
	char	macPath[1024], *sepCh;
	int	r;
	
	strcpy( macPath, ":" );
	strcat( macPath, path );
	while( (sepCh = strchr(macPath, '/')) != NULL )
		*sepCh = ':';

	r = chdir(macPath+1);
	if( r < 0 )
		return chdir(macPath);

	return r;
}

int
macos_access(const char *path, int amode)
{	
	return access( macos_fixpath(path), amode );
}

DIR *
macos_opendir(const char *path)
{
	FILE	*fp;
	char	macPath[1024], *sepCh;

	strcpy( macPath, ":" );
	
	if( strcmp(path, ".") != 0 )
		strcat( macPath, path );
	while( (sepCh = strchr(macPath, '/')) != NULL )
		*sepCh = ':';

	return opendir( macPath );
}

int
macos_stat (const char *path, struct stat *ststr)
{
	return stat( macos_fixpath(path), ststr );
}

int
macos_rename (const char *path, const char *newpath)
{
	char	macPath_from[1024], macPath_to[1024];

	strcpy( macPath_from, macos_fixpath(path) );
	strcpy( macPath_to, macos_fixpath(newpath) );

	return rename( macPath_from, macPath_to );
}

int
macos_unlink (const char *path)
{
	return unlink( macos_fixpath(path) );
}

char *
macos_fixpath (const char *path)
{
	char		*sepCh;
	
	strcpy( scratchPath, ":" );
	
	if( (*path == '.') && (*(path+1) == '/') )
		strcat( scratchPath, path+2 );
	else
		strcat( scratchPath, path );
	while( (sepCh = strchr(scratchPath, '/')) != NULL )
		*sepCh = ':';
		
	return scratchPath;
}

/* Shamelessly stolen from the OS2 port.  Oddly, only the fopen calls
	seem to respect the binary-text distinction, so I have rewritten
	the code to use fopen, fread, fwrite, and fclose instead of open.	*/
	
void
convert_file (char *infile,  int inflags,
	      char *outfile, int outflags)
{
    FILE *infd, *outfd;
    char buf[8192];
    int len;
    char iflags[10], oflags[10];
    
    if( inflags & OPEN_BINARY )
    	strcpy( iflags, "rb" );
    else
    	strcpy( iflags, "r" );
    	
    if( outflags & OPEN_BINARY )
    	strcpy( oflags, "wb" );
    else
    	strcpy( oflags, "w" );
    	
    if ((infd = CVS_FOPEN (infile, iflags)) == NULL)
        error (1, errno, "couldn't read %s", infile);
    if ((outfd = CVS_FOPEN (outfile, oflags)) == NULL)
        error (1, errno, "couldn't write %s", outfile);

    while ((len = fread (buf, sizeof (char), sizeof (buf), infd)) > 0)
        if (fwrite (buf, sizeof (char), len, outfd) < 0)
	    error (1, errno, "error writing %s", outfile);
    if (len < 0)
        error (1, errno, "error reading %s", infile);

    if (fclose (outfd) < 0)
        error (0, errno, "warning: couldn't close %s", outfile);
    if (fclose (infd) < 0)
        error (0, errno, "warning: couldn't close %s", infile);
}@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Upgrade to 1.7.1 snapshot
@
text
@@


1.1.1.2
log
@New release from Cyclic Software
@
text
@d5 5
a9 3
 * Michael Ladwig <mike@@twinpeaks.prc.com> --- November 1995 (Initial version)
 *														 --- May 1996 (Handled relative paths better)
 *														 --- June 1996 (Have open look absolute and relative)
d12 1
a12 9
#include "mac_config.h"
#include <config.h>
#include <system.h>

#ifdef MSL_LIBRARY
#include <errno.h>
#else
#include <sys/errno.h>
#endif
a13 1
#include <fcntl.h>
d18 2
a19 2
char *macos_fixpath (const char *path);
char scratchPath[1024];
d24 8
a31 1
	return mkdir( macos_fixpath(path) );
d37 1
a37 2
	int	r;
	char	*macPath;
d39 4
a42 4
	macPath = macos_fixpath(path);

	r = open( macPath, oflag );
	if( r < 0 ) return open( macPath+1, oflag );
d44 1
a44 1
	return r;
d50 8
a57 1
	return chmod(macos_fixpath(path), mode);
d63 8
a70 1
	return creat( macos_fixpath(path) );
d77 6
d84 1
a84 1
	fp = fopen(macos_fixpath(path), mode);
d86 1
a86 1
	/* I'm getting ENOTDIR, CVS expects ENOENT */
d96 1
a97 1
	char	*macPath;
d99 4
a102 1
	macPath = macos_fixpath(path);
d105 2
a106 1
	if( r < 0 ) return chdir(macPath);
d120 11
a130 1
	return opendir( macos_fixpath(path) );
a150 6
macos_rmdir (const char *path)
{
	return rmdir( macos_fixpath(path) );
}

int
d166 1
a166 4
	{
		if( strcmp(path, ".") != 0 )
			strcat( scratchPath, path );
	}
a169 3
	//fprintf(stderr,"MacOS fixpath <%s>", path);
	//fprintf(stderr," -> <%s>\n", scratchPath);
		
d173 3
a175 6
/*
 * I intended to shamelessly steal from the OS2 port.  Oddly, only the
 * fopen calls seem to respect the binary-text distinction, so I have
 * rewritten the code to use fopen, fread, fwrite, and fclose instead of
 * open, read, write, and close
 */
d185 1
a185 1

d195 1
a195 1

d211 1
a211 2
}

@

