head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.5.0.68
	OPENBSD_6_2_BASE:1.1.1.5
	OPENBSD_6_1:1.1.1.5.0.66
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.62
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.58
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.60
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.52
	OPENBSD_5_7_BASE:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.56
	OPENBSD_5_6_BASE:1.1.1.5
	OPENBSD_5_5:1.1.1.5.0.54
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.50
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.48
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.46
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.44
	OPENBSD_5_0:1.1.1.5.0.42
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.40
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.38
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.34
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.36
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.32
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.30
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.28
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.26
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.24
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.22
	OPENBSD_4_0_BASE:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.20
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.18
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.16
	OPENBSD_3_7_BASE:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.14
	OPENBSD_3_6_BASE:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.12
	OPENBSD_3_5_BASE:1.1.1.5
	OPENBSD_3_4:1.1.1.5.0.10
	OPENBSD_3_4_BASE:1.1.1.5
	OPENBSD_3_3:1.1.1.5.0.8
	OPENBSD_3_3_BASE:1.1.1.5
	OPENBSD_3_2:1.1.1.5.0.6
	OPENBSD_3_2_BASE:1.1.1.5
	OPENBSD_3_1:1.1.1.5.0.4
	OPENBSD_3_1_BASE:1.1.1.5
	OPENBSD_3_0:1.1.1.5.0.2
	OPENBSD_3_0_BASE:1.1.1.5
	cvs-1-11-1p1:1.1.1.5
	OPENBSD_2_9:1.1.1.4.0.8
	OPENBSD_2_9_BASE:1.1.1.4
	cvs-1-11:1.1.1.4
	OPENBSD_2_8:1.1.1.4.0.6
	OPENBSD_2_8_BASE:1.1.1.4
	OPENBSD_2_7:1.1.1.4.0.4
	OPENBSD_2_7_BASE:1.1.1.4
	OPENBSD_2_6:1.1.1.4.0.2
	OPENBSD_2_6_BASE:1.1.1.4
	cvs-1-10-7:1.1.1.4
	OPENBSD_2_5:1.1.1.3.0.10
	OPENBSD_2_5_BASE:1.1.1.3
	cvs-1-10-5:1.1.1.3
	OPENBSD_2_4:1.1.1.3.0.8
	OPENBSD_2_4_BASE:1.1.1.3
	cvs-1-10:1.1.1.3
	cvs-1-9-28:1.1.1.3
	OPENBSD_2_3:1.1.1.3.0.6
	OPENBSD_2_3_BASE:1.1.1.3
	cvs-1-9-26:1.1.1.3
	cvs-1-9-24:1.1.1.3
	OPENBSD_2_2:1.1.1.3.0.4
	OPENBSD_2_2_BASE:1.1.1.3
	cvs-1-9-10:1.1.1.3
	OPENBSD_2_1:1.1.1.3.0.2
	OPENBSD_2_1_BASE:1.1.1.3
	cvs-1-9-8:1.1.1.3
	cvs-1-9-6:1.1.1.3
	cvs-1-9-4:1.1.1.2
	cvs-1-9-2:1.1.1.2
	cvs-1-9:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@# @;


1.1
date	96.10.18.03.35.03;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.18.03.35.03;	author tholo;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.02.21.06.36.48;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.03.29.04.37.41;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.09.10.05.06.10;	author tholo;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2001.09.28.22.45.40;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# Makefile for zlib
# Copyright (C) 1995-1996 Jean-loup Gailly.
# For conditions of distribution and use, see copyright notice in zlib.h 

srcdir     = @@srcdir@@
top_srcdir = @@top_srcdir@@
VPATH      = @@srcdir@@

# To compile and test, type:
#   ./configure; make test
# The call of configure is optional if you don't have special requirements

# To install /usr/local/lib/libz.* and /usr/local/include/zlib.h, type:
#    make install
# To install in $HOME instead of /usr/local, use:
#    make install prefix=$HOME

CC=cc

CFLAGS=-O
#CFLAGS=-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7
#CFLAGS=-g -DDEBUG
#CFLAGS=-O3 -Wall -Wwrite-strings -Wpointer-arith -Wconversion \
#           -Wstrict-prototypes -Wmissing-prototypes

LDFLAGS=-L. -lz
LDSHARED=$(CC)

VER=1.0.4
LIBS=libz.a

# For CVS, separate AR and ARFLAGS.
AR=ar
RANLIB=ranlib
TAR=tar

prefix=/usr/local
exec_prefix = $(prefix)

OBJS = adler32.o compress.o crc32.o gzio.o uncompr.o deflate.o trees.o \
       zutil.o inflate.o infblock.o inftrees.o infcodes.o infutil.o inffast.o

TEST_OBJS = example.o minigzip.o

# build_zlib.com added for CVS
DISTFILES = README INDEX ChangeLog configure Make*[a-z0-9] descrip.mms \
	    zlib.def zlib.rc algorithm.doc  *.[ch] \
	    build_zlib.com

# For CVS, just build libz.a
all: libz.a

test: all
	./example
	echo hello world | ./minigzip | ./minigzip -d 

# For CVS, use an explict rc after $(AR).
libz.a: $(OBJS)
	$(AR) rc $@@ $(OBJS)
	-@@ ($(RANLIB) $@@ || true) 2>/dev/null

libz.so.$(VER): $(OBJS)
	$(LDSHARED) -o $@@ $(OBJS)
	rm -f libz.so; ln -s $@@ libz.so

example: example.o $(LIBS)
	$(CC) $(CFLAGS) -o $@@ example.o $(LDFLAGS)

minigzip: minigzip.o $(LIBS)
	$(CC) $(CFLAGS) -o $@@ minigzip.o $(LDFLAGS)

# For CVS, remove the install and uninstall targets.
install:
uninstall:
.PHONY: install uninstall

installdirs:
.PHONY: installdirs

# mostlyclean added for CVS.
clean mostlyclean:
	rm -f *.o *~ example minigzip libz.a libz.so* foo.gz

# distclean and realclean added for CVS.
distclean realclean: clean
	rm -f Makefile
.PHONY: distclean realclean

# dist-dir added for CVS.
dist-dir:
	mkdir ${DISTDIR}
	for i in `cd $(srcdir); echo ${DISTFILES}`; do \
	  ln $(srcdir)/$${i} ${DISTDIR}; \
	done
.PHONY: dist-dir

# ls added for CVS.
ls:
	@@echo $(DISTFILES)
.PHONY: ls

zip:
	mv Makefile Makefile~; cp -p Makefile.in Makefile
	v=`sed -n -e 's/\.//g' -e '/VERSION "/s/.*"\(.*\)".*/\1/p' < zlib.h`;\
	zip -ul9 zlib$$v $(DISTFILES)
	mv Makefile~ Makefile

dist:
	mv Makefile Makefile~; cp -p Makefile.in Makefile
	d=zlib-`sed -n '/VERSION "/s/.*"\(.*\)".*/\1/p' < zlib.h`;\
	rm -f $$d.tar.gz; \
	if test ! -d ../$$d; then rm -f ../$$d; ln -s `pwd` ../$$d; fi; \
	files=""; \
	for f in $(DISTFILES); do files="$$files $$d/$$f"; done; \
	cd ..; \
	GZIP=-9 $(TAR) chofz $$d/$$d.tar.gz $$files; \
	if test ! -d $$d; then rm -f $$d; fi
	mv Makefile~ Makefile

tags:	
	etags *.[ch]

# Makefile target added for CVS.
subdir = zlib
Makefile: ../config.status Makefile.in
	cd .. && CONFIG_FILES=$(subdir)/$@@ CONFIG_HEADERS= ./config.status

depend:
	makedepend -- $(CFLAGS) -- *.[ch]

# DO NOT DELETE THIS LINE -- make depend depends on it.

adler32.o: zlib.h zconf.h
compress.o: zlib.h zconf.h
crc32.o: zlib.h zconf.h
deflate.o: deflate.h zutil.h zlib.h zconf.h
example.o: zlib.h zconf.h
gzio.o: zutil.h zlib.h zconf.h
infblock.o: infblock.h inftrees.h infcodes.h infutil.h zutil.h zlib.h zconf.h
infcodes.o: zutil.h zlib.h zconf.h
infcodes.o: inftrees.h infblock.h infcodes.h infutil.h inffast.h
inffast.o: zutil.h zlib.h zconf.h inftrees.h
inffast.o: infblock.h infcodes.h infutil.h inffast.h
inflate.o: zutil.h zlib.h zconf.h infblock.h
inftrees.o: zutil.h zlib.h zconf.h inftrees.h
infutil.o: zutil.h zlib.h zconf.h infblock.h inftrees.h infcodes.h infutil.h
minigzip.o:  zlib.h zconf.h 
trees.o: deflate.h zutil.h zlib.h zconf.h 
uncompr.o: zlib.h zconf.h
zutil.o: zutil.h zlib.h zconf.h  
@


1.1.1.1
log
@New release from Cyclic Software
@
text
@@


1.1.1.2
log
@New release from Cyclic Software
@
text
@d18 1
a18 1
CC=@@CC@@
d20 1
a20 1
CFLAGS=@@CFLAGS@@
d26 1
a26 1
LDFLAGS=@@LDFLAGS@@
d37 1
a37 1
prefix=@@prefix@@
d67 1
a67 1
	$(CC) $(CFLAGS) -o $@@ example.o $(LDFLAGS) $(LIBS)
d70 1
a70 1
	$(CC) $(CFLAGS) -o $@@ minigzip.o $(LDFLAGS) $(LIBS)
@


1.1.1.3
log
@Latest release from Cyclic Software
@
text
@d46 2
a47 2
DISTFILES = README INDEX ChangeLog configure Makefile.*[a-z0-9] Make_vms.com \
	    descrip.mms zlib.def zlib.rc algorithm.doc *.[ch] \
@


1.1.1.4
log
@Latest version from Cyclic
@
text
@d48 1
a48 1
	    build_zlib.com zlib.dsp .cvsignore
@


1.1.1.5
log
@Latest from Cyclic Software
@
text
@d2 1
a2 1
# Copyright (C) 1995-1998 Jean-loup Gailly.
a11 1
# If you wish to build zlib as a shared library, use: ./configure -s
a27 1
CPP=$(CC) -E
d29 1
a29 1
VER=1.1.3
a30 1
SHAREDLIB=libz.so
d34 2
a35 3
RANLIB=@@RANLIB@@
AMTAR=@@AMTAR@@
SHELL=/bin/sh
a38 2
libdir = ${exec_prefix}/lib
includedir = ${prefix}/include
a42 3
OBJA =
# to use the asm code: make OBJA=match.o

d45 4
a48 14
DISTFILES = README FAQ INDEX ChangeLog configure Makefile.* *.[ch] *.mms \
  algorithm.txt zlib.3 msdos/Make*[a-z0-9] msdos/zlib.def msdos/zlib.rc \
  nt/Make*[a-z0-9] nt/zlib.dnt amiga/Make*.??? os2/M*.os2 os2/zlib.def \
  contrib/RE*.contrib contrib/*.txt contrib/asm386/*.asm contrib/asm386/*.c \
  contrib/asm386/*.bat contrib/asm386/zlibvc.d?? contrib/asm[56]86/*.?86 \
  contrib/asm[56]86/*.S contrib/iostream/*.cpp \
  contrib/iostream/*.h  contrib/iostream2/*.h contrib/iostream2/*.cpp \
  contrib/untgz/Makefile contrib/untgz/*.c contrib/untgz/*.w32 \
  contrib/minizip/[CM]*[pe] contrib/minizip/*.[ch] contrib/minizip/*.[td]?? \
  contrib/delphi*/*.??? \
  Make_vms.com .cvsignore

# for CVS's distdir & Makefile targets
subdir = zlib
d53 3
a55 12
# To reenable make test
all-original: all minigzip example

check test: all-original
	@@LD_LIBRARY_PATH=.:$(LD_LIBRARY_PATH) ; export LD_LIBRARY_PATH; \
	echo hello world | ./minigzip | ./minigzip -d || \
	  echo '		*** minigzip test FAILED ***' ; \
	if ./example; then \
	  echo '		*** zlib test OK ***'; \
	else \
	  echo '		*** zlib test FAILED ***'; \
	fi
d58 3
a60 9
libz.a: $(OBJS) $(OBJA)
	$(AR) rc $@@ $(OBJS) $(OBJA)
	-@@ ($(RANLIB) $@@ || true) >/dev/null 2>&1

match.o: match.S
	$(CPP) match.S > _match.s
	$(CC) -c _match.s
	mv _match.o match.o
	rm -f _match.s
d62 1
a62 1
$(SHAREDLIB).$(VER): $(OBJS)
d64 1
a64 3
	rm -f $(SHAREDLIB) $(SHAREDLIB).1
	ln -s $@@ $(SHAREDLIB)
	ln -s $@@ $(SHAREDLIB).1
d72 2
a73 2
# For CVS, make install dependant on all and remove the uninstall target.
install: all
a76 34
# Remove targets for CVS
info:
installcheck:
.PHONY: info installcheck

#install: $(LIBS)
#	-@@if [ ! -d $(includedir)  ]; then mkdir $(includedir); fi
#	-@@if [ ! -d $(libdir) ]; then mkdir $(libdir); fi
#	cp zlib.h zconf.h $(includedir)
#	chmod 644 $(includedir)/zlib.h $(includedir)/zconf.h
#	cp $(LIBS) $(libdir)
#	cd $(libdir); chmod 755 $(LIBS)
#	-@@(cd $(libdir); $(RANLIB) libz.a || true) >/dev/null 2>&1
#	cd $(libdir); if test -f $(SHAREDLIB).$(VER); then \
#	  rm -f $(SHAREDLIB) $(SHAREDLIB).1; \
#	  ln -s $(SHAREDLIB).$(VER) $(SHAREDLIB); \
#	  ln -s $(SHAREDLIB).$(VER) $(SHAREDLIB).1; \
#	  (ldconfig || true)  >/dev/null 2>&1; \
#	fi
# The ranlib in install is needed on NeXTSTEP which checks file times
# ldconfig is for Linux

#uninstall:
#	cd $(includedir); \
#	v=$(VER); \
#	if test -f zlib.h; then \
#	  v=`sed -n '/VERSION "/s/.*"\(.*\)".*/\1/p' < zlib.h`; \
#          rm -f zlib.h zconf.h; \
#	fi; \
#	cd $(libdir); rm -f libz.a; \
#	if test -f $(SHAREDLIB).$$v; then \
#	  rm -f $(SHAREDLIB).$$v $(SHAREDLIB) $(SHAREDLIB).1; \
#	fi

a79 24
# distdir added for CVS.
top_builddir = ..
PACKAGE = @@PACKAGE@@
VERSION = @@VERSION@@
distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)
distdir:
	@@d=$(srcdir); \
	for file in `cd $$d; echo $(DISTFILES)`; do \
	  if test -d $(distdir)/`dirname $$file`; then \
	    :; \
	  else \
	    mkdir $(distdir)/`dirname $$file`; \
	  fi; \
	  if test -d $$d/$$file; then \
	    cp -pR $$d/$$file $(distdir) \
	    || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
.PHONY: distdir

d81 2
a82 4
mostlyclean clean:
	rm -f *.o *~ example minigzip libz.a libz.so* foo.gz so_locations \
	   _match.s maketree
.PHONY: mostlyclean clean
d84 2
a85 2
# distclean and realclean and maintainer-clean added for CVS.
distclean realclean maintainer-clean:	clean
d87 14
a100 1
.PHONY: distclean realclean maintainer-clean
a103 1
	rm -f test.c ztest*.c contrib/minizip/test.zip
a109 1
	rm -f test.c ztest*.c contrib/minizip/test.zip
d116 1
a116 1
	GZIP=-9 $(AMTAR) chofz $$d/$$d.tar.gz $$files; \
d120 2
a121 14
.PHONY: tags
tags: TAGS

TAGS:
	tags=; \
	here=`pwd`; \
	list=`(echo *.[ch] && cd $(srcdir) && echo *.[ch]) |sort |uniq`; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || etags $(ETAGS_ARGS) $$tags $$unique $(LISP)
d124 3
a126 3
Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@@ CONFIG_HEADERS= $(SHELL) ./config.status
d148 1
a148 1
trees.o: deflate.h zutil.h zlib.h zconf.h trees.h
@


