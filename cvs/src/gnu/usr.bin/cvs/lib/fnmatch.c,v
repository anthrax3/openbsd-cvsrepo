head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.4.0.78
	OPENBSD_6_2_BASE:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.76
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.72
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.68
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.70
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.62
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.66
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.64
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.60
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.58
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.56
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.54
	OPENBSD_5_0:1.1.1.4.0.52
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.50
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.48
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.44
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.46
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.42
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.40
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.38
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.36
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.34
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.32
	OPENBSD_4_0_BASE:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.30
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.28
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.26
	OPENBSD_3_7_BASE:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.24
	OPENBSD_3_6_BASE:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.22
	OPENBSD_3_5_BASE:1.1.1.4
	OPENBSD_3_4:1.1.1.4.0.20
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.18
	OPENBSD_3_3_BASE:1.1.1.4
	OPENBSD_3_2:1.1.1.4.0.16
	OPENBSD_3_2_BASE:1.1.1.4
	OPENBSD_3_1:1.1.1.4.0.14
	OPENBSD_3_1_BASE:1.1.1.4
	OPENBSD_3_0:1.1.1.4.0.12
	OPENBSD_3_0_BASE:1.1.1.4
	cvs-1-11-1p1:1.1.1.4
	OPENBSD_2_9:1.1.1.4.0.10
	OPENBSD_2_9_BASE:1.1.1.4
	cvs-1-11:1.1.1.4
	OPENBSD_2_8:1.1.1.4.0.8
	OPENBSD_2_8_BASE:1.1.1.4
	OPENBSD_2_7:1.1.1.4.0.6
	OPENBSD_2_7_BASE:1.1.1.4
	OPENBSD_2_6:1.1.1.4.0.4
	OPENBSD_2_6_BASE:1.1.1.4
	cvs-1-10-7:1.1.1.4
	OPENBSD_2_5:1.1.1.4.0.2
	OPENBSD_2_5_BASE:1.1.1.4
	cvs-1-10-5:1.1.1.4
	OPENBSD_2_4:1.1.1.3.0.8
	OPENBSD_2_4_BASE:1.1.1.3
	cvs-1-10:1.1.1.3
	cvs-1-9-28:1.1.1.3
	OPENBSD_2_3:1.1.1.3.0.6
	OPENBSD_2_3_BASE:1.1.1.3
	cvs-1-9-26:1.1.1.3
	cvs-1-9-24:1.1.1.3
	OPENBSD_2_2:1.1.1.3.0.4
	OPENBSD_2_2_BASE:1.1.1.3
	cvs-1-9-10:1.1.1.3
	OPENBSD_2_1:1.1.1.3.0.2
	OPENBSD_2_1_BASE:1.1.1.3
	cvs-1-9-8:1.1.1.3
	cvs-1-9-6:1.1.1.3
	cvs-1-9-4:1.1.1.3
	cvs-1-9-2:1.1.1.3
	cvs-1-9:1.1.1.2
	OPENBSD_2_0:1.1.1.2.0.2
	OPENBSD_2_0_BASE:1.1.1.2
	cvs-1-8-1:1.1.1.2
	cvs-1-8:1.1.1.2
	cvs-1-7-2:1.1.1.2
	cvs-1-7-1:1.1.1.2
	cvs-1-6:1.1.1.1
	cyclic:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	95.12.19.09.21.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.19.09.21.28;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.01.30.00.17.23;	author tholo;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.02.21.06.36.25;	author tholo;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.02.28.21.31.00;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Copyright (C) 1992 Free Software Foundation, Inc.
This file is part of the GNU C Library.

The GNU C Library is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The GNU C Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with the GNU C Library; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 675 Mass Ave,
Cambridge, MA 02139, USA.  */

/* Modified slightly by Brian Berliner <berliner@@sun.com> and
   Jim Blandy <jimb@@cyclic.com> for CVS use */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

/* Some file systems are case-insensitive.  If FOLD_FN_CHAR is #defined, it maps
   the character C onto its "canonical" form.  In a case-insensitive system,
   it would map all alphanumeric characters to lower case.  Under Windows NT,
   / and \ are both path component separators, so FOLD_FN_CHAR would map them both
   to /.  */
#ifndef FOLD_FN_CHAR
#define FOLD_FN_CHAR(c) (c)
#endif

/* IGNORE(@@ */
/* #include <ansidecl.h> */
/* @@) */
#include <errno.h>
#include <fnmatch.h>

#if !defined(__GNU_LIBRARY__) && !defined(STDC_HEADERS)
extern int errno;
#endif

/* Match STRING against the filename pattern PATTERN, returning zero if
   it matches, nonzero if not.  */
int
#if __STDC__
fnmatch (const char *pattern, const char *string, int flags)
#else
fnmatch (pattern, string, flags)
    char *pattern;
    char *string;
    int flags;
#endif
{
  register const char *p = pattern, *n = string;
  register char c;

  if ((flags & ~__FNM_FLAGS) != 0)
    {
      errno = EINVAL;
      return -1;
    }

  while ((c = *p++) != '\0')
    {
      switch (c)
	{
	case '?':
	  if (*n == '\0')
	    return FNM_NOMATCH;
	  else if ((flags & FNM_PATHNAME) && *n == '/')
	    return FNM_NOMATCH;
	  else if ((flags & FNM_PERIOD) && *n == '.' &&
		   (n == string || ((flags & FNM_PATHNAME) && n[-1] == '/')))
	    return FNM_NOMATCH;
	  break;
	  
	case '\\':
	  if (!(flags & FNM_NOESCAPE))
	    c = *p++;
	  if (*n != c)
	    return FNM_NOMATCH;
	  break;
	  
	case '*':
	  if ((flags & FNM_PERIOD) && *n == '.' &&
	      (n == string || ((flags & FNM_PATHNAME) && n[-1] == '/')))
	    return FNM_NOMATCH;
	  
	  for (c = *p++; c == '?' || c == '*'; c = *p++, ++n)
	    if (((flags & FNM_PATHNAME) && *n == '/') ||
		(c == '?' && *n == '\0'))
	      return FNM_NOMATCH;
	  
	  if (c == '\0')
	    return 0;
	  
	  {
	    char c1 = (!(flags & FNM_NOESCAPE) && c == '\\') ? *p : c;
	    for (--p; *n != '\0'; ++n)
	      if ((c == '[' || *n == c1) &&
		  fnmatch(p, n, flags & ~FNM_PERIOD) == 0)
		return 0;
	    return FNM_NOMATCH;
	  }
	  
	case '[':
	  {
	    /* Nonzero if the sense of the character class is inverted.  */
	    register int not;
	    
	    if (*n == '\0')
	      return FNM_NOMATCH;
	    
	    if ((flags & FNM_PERIOD) && *n == '.' &&
		(n == string || ((flags & FNM_PATHNAME) && n[-1] == '/')))
	      return FNM_NOMATCH;
	    
	    not = (*p == '!' || *p == '^');
	    if (not)
	      ++p;
	    
	    c = *p++;
	    for (;;)
	      {
		register char cstart = c, cend = c;
		
		if (!(flags & FNM_NOESCAPE) && c == '\\')
		  cstart = cend = *p++;
		
		if (c == '\0')
		  /* [ (unterminated) loses.  */
		  return FNM_NOMATCH;
		
		c = *p++;
		
		if ((flags & FNM_PATHNAME) && c == '/')
		  /* [/] can never match.  */
		  return FNM_NOMATCH;
		
		if (c == '-' && *p != ']')
		  {
		    cend = *p++;
		    if (!(flags & FNM_NOESCAPE) && cend == '\\')
		      cend = *p++;
		    if (cend == '\0')
		      return FNM_NOMATCH;
		    c = *p++;
		  }
		
		if (*n >= cstart && *n <= cend)
		  goto matched;
		
		if (c == ']')
		  break;
	      }
	    if (!not)
	      return FNM_NOMATCH;
	    break;
	    
	  matched:;
	    /* Skip the rest of the [...] that already matched.  */
	    while (c != ']')
	      {
		if (c == '\0')
		  /* [... (unterminated) loses.  */
		  return FNM_NOMATCH;
		
		c = *p++;
		if (!(flags & FNM_NOESCAPE) && c == '\\')
		  /* 1003.2d11 is unclear if this is right.  %%% */
		  ++p;
	      }
	    if (not)
	      return FNM_NOMATCH;
	  }
	  break;
	  
	default:
	  if (FOLD_FN_CHAR (c) != FOLD_FN_CHAR (*n))
	    return FNM_NOMATCH;
	}
      
      ++n;
    }

  if (*n == '\0')
    return 0;

  return FNM_NOMATCH;
}
@


1.1.1.1
log
@raw import of cvs-1.6
@
text
@@


1.1.1.2
log
@Upgrade to 1.7.1 snapshot
@
text
@d26 5
a30 5
/* Some file systems are case-insensitive.  If FOLD_FN_CHAR is
   #defined, it maps the character C onto its "canonical" form.  In a
   case-insensitive system, it would map all alphanumeric characters
   to lower case.  Under Windows NT, / and \ are both path component
   separators, so FOLD_FN_CHAR would map them both to /.  */
@


1.1.1.3
log
@New release from Cyclic Software
@
text
@d12 6
a17 1
Library General Public License for more details.  */
@


1.1.1.4
log
@Latest version from Cyclic
@
text
@d21 8
a28 1
#include "system.h"
d78 1
a78 1
	  if (FOLD_FN_CHAR (*n) != FOLD_FN_CHAR (c))
d98 1
a98 1
	      if ((c == '[' || FOLD_FN_CHAR (*n) == FOLD_FN_CHAR (c1)) &&
@


