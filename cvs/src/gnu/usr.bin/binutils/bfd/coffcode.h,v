head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.10
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.38
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.42
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.40
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.36
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.34
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.32
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.30
	OPENBSD_5_0:1.9.0.28
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.26
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.24
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.20
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.22
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.18
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.16
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.14
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.12
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	BINUTILS_2_15:1.1.1.10
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	BINUTILS-2_14:1.1.1.9
	OPENBSD_3_5:1.7.0.8
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	binutils-2_11_2:1.1.1.8
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	BINUTILS-2_10_1:1.1.1.7
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	new-binutils:1.4.0.14
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.04.06.18.29.27;	author kettenis;	state Exp;
branches;
next	1.9;
commitid	DQNigUiY2QvUNxoT;

1.9
date	2004.11.02.20.45.05;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.17.21.54.20;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.13.17.07.29;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.09.22.29.25;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.12.19.11.09;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.03.32.49;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.18.59.50;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.44.01;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.34;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.34;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.05.11;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.37.20;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.11.19.14.12.09;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.18.23;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.45.29;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2001.06.09.22.06.37;	author espie;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2002.05.13.13.21.41;	author fgsch;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.05.17.20.42.12;	author drahn;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2004.11.02.20.22.16;	author miod;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Add support for an efi-app-x86_64 target.  Needed for UEFI bootloader work.

ok mlarkin@@
@
text
@/* Support for the generic parts of most COFF variants, for BFD.
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
   Written by Cygnus Support.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/*
Most of this hacked by  Steve Chamberlain,
			sac@@cygnus.com
*/
/*

SECTION
	coff backends

	BFD supports a number of different flavours of coff format.
	The major differences between formats are the sizes and
	alignments of fields in structures on disk, and the occasional
	extra field.

	Coff in all its varieties is implemented with a few common
	files and a number of implementation specific files. For
	example, The 88k bcs coff format is implemented in the file
	@@file{coff-m88k.c}. This file @@code{#include}s
	@@file{coff/m88k.h} which defines the external structure of the
	coff format for the 88k, and @@file{coff/internal.h} which
	defines the internal structure. @@file{coff-m88k.c} also
	defines the relocations used by the 88k format
	@@xref{Relocations}.

	The Intel i960 processor version of coff is implemented in
	@@file{coff-i960.c}. This file has the same structure as
	@@file{coff-m88k.c}, except that it includes @@file{coff/i960.h}
	rather than @@file{coff-m88k.h}.

SUBSECTION
	Porting to a new version of coff

	The recommended method is to select from the existing
	implementations the version of coff which is most like the one
	you want to use.  For example, we'll say that i386 coff is
	the one you select, and that your coff flavour is called foo.
	Copy @@file{i386coff.c} to @@file{foocoff.c}, copy
	@@file{../include/coff/i386.h} to @@file{../include/coff/foo.h},
	and add the lines to @@file{targets.c} and @@file{Makefile.in}
	so that your new back end is used. Alter the shapes of the
	structures in @@file{../include/coff/foo.h} so that they match
	what you need. You will probably also have to add
	@@code{#ifdef}s to the code in @@file{coff/internal.h} and
	@@file{coffcode.h} if your version of coff is too wild.

	You can verify that your new BFD backend works quite simply by
	building @@file{objdump} from the @@file{binutils} directory,
	and making sure that its version of what's going on and your
	host system's idea (assuming it has the pretty standard coff
	dump utility, usually called @@code{att-dump} or just
	@@code{dump}) are the same.  Then clean up your code, and send
	what you've done to Cygnus. Then your stuff will be in the
	next release, and you won't have to keep integrating it.

SUBSECTION
	How the coff backend works

SUBSUBSECTION
	File layout

	The Coff backend is split into generic routines that are
	applicable to any Coff target and routines that are specific
	to a particular target.  The target-specific routines are
	further split into ones which are basically the same for all
	Coff targets except that they use the external symbol format
	or use different values for certain constants.

	The generic routines are in @@file{coffgen.c}.  These routines
	work for any Coff target.  They use some hooks into the target
	specific code; the hooks are in a @@code{bfd_coff_backend_data}
	structure, one of which exists for each target.

	The essentially similar target-specific routines are in
	@@file{coffcode.h}.  This header file includes executable C code.
	The various Coff targets first include the appropriate Coff
	header file, make any special defines that are needed, and
	then include @@file{coffcode.h}.

	Some of the Coff targets then also have additional routines in
	the target source file itself.

	For example, @@file{coff-i960.c} includes
	@@file{coff/internal.h} and @@file{coff/i960.h}.  It then
	defines a few constants, such as @@code{I960}, and includes
	@@file{coffcode.h}.  Since the i960 has complex relocation
	types, @@file{coff-i960.c} also includes some code to
	manipulate the i960 relocs.  This code is not in
	@@file{coffcode.h} because it would not be used by any other
	target.

SUBSUBSECTION
	Bit twiddling

	Each flavour of coff supported in BFD has its own header file
	describing the external layout of the structures. There is also
	an internal description of the coff layout, in
	@@file{coff/internal.h}. A major function of the
	coff backend is swapping the bytes and twiddling the bits to
	translate the external form of the structures into the normal
	internal form. This is all performed in the
	@@code{bfd_swap}_@@i{thing}_@@i{direction} routines. Some
	elements are different sizes between different versions of
	coff; it is the duty of the coff version specific include file
	to override the definitions of various packing routines in
	@@file{coffcode.h}. E.g., the size of line number entry in coff is
	sometimes 16 bits, and sometimes 32 bits. @@code{#define}ing
	@@code{PUT_LNSZ_LNNO} and @@code{GET_LNSZ_LNNO} will select the
	correct one. No doubt, some day someone will find a version of
	coff which has a varying field size not catered to at the
	moment. To port BFD, that person will have to add more @@code{#defines}.
	Three of the bit twiddling routines are exported to
	@@code{gdb}; @@code{coff_swap_aux_in}, @@code{coff_swap_sym_in}
	and @@code{coff_swap_lineno_in}. @@code{GDB} reads the symbol
	table on its own, but uses BFD to fix things up.  More of the
	bit twiddlers are exported for @@code{gas};
	@@code{coff_swap_aux_out}, @@code{coff_swap_sym_out},
	@@code{coff_swap_lineno_out}, @@code{coff_swap_reloc_out},
	@@code{coff_swap_filehdr_out}, @@code{coff_swap_aouthdr_out},
	@@code{coff_swap_scnhdr_out}. @@code{Gas} currently keeps track
	of all the symbol table and reloc drudgery itself, thereby
	saving the internal BFD overhead, but uses BFD to swap things
	on the way out, making cross ports much safer.  Doing so also
	allows BFD (and thus the linker) to use the same header files
	as @@code{gas}, which makes one avenue to disaster disappear.

SUBSUBSECTION
	Symbol reading

	The simple canonical form for symbols used by BFD is not rich
	enough to keep all the information available in a coff symbol
	table. The back end gets around this problem by keeping the original
	symbol table around, "behind the scenes".

	When a symbol table is requested (through a call to
	@@code{bfd_canonicalize_symtab}), a request gets through to
	@@code{coff_get_normalized_symtab}. This reads the symbol table from
	the coff file and swaps all the structures inside into the
	internal form. It also fixes up all the pointers in the table
	(represented in the file by offsets from the first symbol in
	the table) into physical pointers to elements in the new
	internal table. This involves some work since the meanings of
	fields change depending upon context: a field that is a
	pointer to another structure in the symbol table at one moment
	may be the size in bytes of a structure at the next.  Another
	pass is made over the table. All symbols which mark file names
	(<<C_FILE>> symbols) are modified so that the internal
	string points to the value in the auxent (the real filename)
	rather than the normal text associated with the symbol
	(@@code{".file"}).

	At this time the symbol names are moved around. Coff stores
	all symbols less than nine characters long physically
	within the symbol table; longer strings are kept at the end of
	the file in the string 	table. This pass moves all strings
	into memory and replaces them with pointers to the strings.

	The symbol table is massaged once again, this time to create
	the canonical table used by the BFD application. Each symbol
	is inspected in turn, and a decision made (using the
	@@code{sclass} field) about the various flags to set in the
	@@code{asymbol}.  @@xref{Symbols}. The generated canonical table
	shares strings with the hidden internal symbol table.

	Any linenumbers are read from the coff file too, and attached
	to the symbols which own the functions the linenumbers belong to.

SUBSUBSECTION
	Symbol writing

	Writing a symbol to a coff file which didn't come from a coff
	file will lose any debugging information. The @@code{asymbol}
	structure remembers the BFD from which the symbol was taken, and on
	output the back end makes sure that the same destination target as
	source target is present.

	When the symbols have come from a coff file then all the
	debugging information is preserved.

	Symbol tables are provided for writing to the back end in a
	vector of pointers to pointers. This allows applications like
	the linker to accumulate and output large symbol tables
	without having to do too much byte copying.

	This function runs through the provided symbol table and
	patches each symbol marked as a file place holder
	(@@code{C_FILE}) to point to the next file place holder in the
	list. It also marks each @@code{offset} field in the list with
	the offset from the first symbol of the current symbol.

	Another function of this procedure is to turn the canonical
	value form of BFD into the form used by coff. Internally, BFD
	expects symbol values to be offsets from a section base; so a
	symbol physically at 0x120, but in a section starting at
	0x100, would have the value 0x20. Coff expects symbols to
	contain their final value, so symbols have their values
	changed at this point to reflect their sum with their owning
	section.  This transformation uses the
	<<output_section>> field of the @@code{asymbol}'s
	@@code{asection} @@xref{Sections}.

	o <<coff_mangle_symbols>>

	This routine runs though the provided symbol table and uses
	the offsets generated by the previous pass and the pointers
	generated when the symbol table was read in to create the
	structured hierarchy required by coff. It changes each pointer
	to a symbol into the index into the symbol table of the asymbol.

	o <<coff_write_symbols>>

	This routine runs through the symbol table and patches up the
	symbols from their internal form into the coff way, calls the
	bit twiddlers, and writes out the table to the file.

*/

/*
INTERNAL_DEFINITION
	coff_symbol_type

DESCRIPTION
	The hidden information for an <<asymbol>> is described in a
	<<combined_entry_type>>:

CODE_FRAGMENT
.
.typedef struct coff_ptr_struct
.{
.  {* Remembers the offset from the first symbol in the file for
.     this symbol. Generated by coff_renumber_symbols. *}
.  unsigned int offset;
.
.  {* Should the value of this symbol be renumbered.  Used for
.     XCOFF C_BSTAT symbols.  Set by coff_slurp_symbol_table.  *}
.  unsigned int fix_value : 1;
.
.  {* Should the tag field of this symbol be renumbered.
.     Created by coff_pointerize_aux. *}
.  unsigned int fix_tag : 1;
.
.  {* Should the endidx field of this symbol be renumbered.
.     Created by coff_pointerize_aux. *}
.  unsigned int fix_end : 1;
.
.  {* Should the x_csect.x_scnlen field be renumbered.
.     Created by coff_pointerize_aux. *}
.  unsigned int fix_scnlen : 1;
.
.  {* Fix up an XCOFF C_BINCL/C_EINCL symbol.  The value is the
.     index into the line number entries.  Set by coff_slurp_symbol_table.  *}
.  unsigned int fix_line : 1;
.
.  {* The container for the symbol structure as read and translated
.     from the file. *}
.  union
.  {
.    union internal_auxent auxent;
.    struct internal_syment syment;
.  } u;
.} combined_entry_type;
.
.
.{* Each canonical asymbol really looks like this: *}
.
.typedef struct coff_symbol_struct
.{
.  {* The actual symbol which the rest of BFD works with *}
.  asymbol symbol;
.
.  {* A pointer to the hidden information for this symbol *}
.  combined_entry_type *native;
.
.  {* A pointer to the linenumber information for this symbol *}
.  struct lineno_cache_entry *lineno;
.
.  {* Have the line numbers been relocated yet ? *}
.  bfd_boolean done_lineno;
.} coff_symbol_type;

*/

#ifdef COFF_WITH_PE
#include "peicode.h"
#else
#include "coffswap.h"
#endif

#define STRING_SIZE_SIZE (4)

static long sec_to_styp_flags
  PARAMS ((const char *, flagword));
static bfd_boolean styp_to_sec_flags
  PARAMS ((bfd *, PTR, const char *, asection *, flagword *));
static bfd_boolean coff_bad_format_hook
  PARAMS ((bfd *, PTR));
static void coff_set_custom_section_alignment
  PARAMS ((bfd *, asection *, const struct coff_section_alignment_entry *,
	   const unsigned int));
static bfd_boolean coff_new_section_hook
  PARAMS ((bfd *, asection *));
static bfd_boolean coff_set_arch_mach_hook
  PARAMS ((bfd *, PTR));
static bfd_boolean coff_write_relocs
  PARAMS ((bfd *, int));
static bfd_boolean coff_set_flags
  PARAMS ((bfd *, unsigned int *, unsigned short *));
static bfd_boolean coff_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long)) ATTRIBUTE_UNUSED;
static bfd_boolean coff_compute_section_file_positions
  PARAMS ((bfd *));
static bfd_boolean coff_write_object_contents
  PARAMS ((bfd *)) ATTRIBUTE_UNUSED;
static bfd_boolean coff_set_section_contents
  PARAMS ((bfd *, asection *, const PTR, file_ptr, bfd_size_type));
static PTR buy_and_read
  PARAMS ((bfd *, file_ptr, bfd_size_type));
static bfd_boolean coff_slurp_line_table
  PARAMS ((bfd *, asection *));
static bfd_boolean coff_slurp_symbol_table
  PARAMS ((bfd *));
static enum coff_symbol_classification coff_classify_symbol
  PARAMS ((bfd *, struct internal_syment *));
static bfd_boolean coff_slurp_reloc_table
  PARAMS ((bfd *, asection *, asymbol **));
static long coff_canonicalize_reloc
  PARAMS ((bfd *, asection *, arelent **, asymbol **));
#ifndef coff_mkobject_hook
static PTR coff_mkobject_hook
  PARAMS ((bfd *, PTR,  PTR));
#endif
#ifdef COFF_WITH_PE
static flagword handle_COMDAT
  PARAMS ((bfd *, flagword, PTR, const char *, asection *));
#endif
#ifdef COFF_IMAGE_WITH_PE
static bfd_boolean coff_read_word
  PARAMS ((bfd *, unsigned int *));
static unsigned int coff_compute_checksum
  PARAMS ((bfd *));
static bfd_boolean coff_apply_checksum
  PARAMS ((bfd *));
#endif
#ifdef TICOFF
static bfd_boolean ticoff0_bad_format_hook
    PARAMS ((bfd *, PTR ));
static bfd_boolean ticoff1_bad_format_hook
    PARAMS ((bfd *, PTR ));
#endif

/* void warning(); */

/* Return a word with STYP_* (scnhdr.s_flags) flags set to represent
   the incoming SEC_* flags.  The inverse of this function is
   styp_to_sec_flags().  NOTE: If you add to/change this routine, you
   should probably mirror the changes in styp_to_sec_flags().  */

#ifndef COFF_WITH_PE

/* Macros for setting debugging flags.  */
#ifdef STYP_DEBUG
#define STYP_XCOFF_DEBUG STYP_DEBUG
#else
#define STYP_XCOFF_DEBUG STYP_INFO
#endif

#ifdef COFF_ALIGN_IN_S_FLAGS
#define STYP_DEBUG_INFO STYP_DSECT
#else
#define STYP_DEBUG_INFO STYP_INFO
#endif

static long
sec_to_styp_flags (sec_name, sec_flags)
     const char *sec_name;
     flagword sec_flags;
{
  long styp_flags = 0;

  if (!strcmp (sec_name, _TEXT))
    {
      styp_flags = STYP_TEXT;
    }
  else if (!strcmp (sec_name, _DATA))
    {
      styp_flags = STYP_DATA;
    }
  else if (!strcmp (sec_name, _BSS))
    {
      styp_flags = STYP_BSS;
#ifdef _COMMENT
    }
  else if (!strcmp (sec_name, _COMMENT))
    {
      styp_flags = STYP_INFO;
#endif /* _COMMENT */
#ifdef _LIB
    }
  else if (!strcmp (sec_name, _LIB))
    {
      styp_flags = STYP_LIB;
#endif /* _LIB */
#ifdef _LIT
    }
  else if (!strcmp (sec_name, _LIT))
    {
      styp_flags = STYP_LIT;
#endif /* _LIT */
    }
  else if (!strncmp (sec_name, ".debug", 6))
    {
      /* Handle the XCOFF debug section and DWARF2 debug sections.  */
      if (!sec_name[6])
        styp_flags = STYP_XCOFF_DEBUG;
      else
        styp_flags = STYP_DEBUG_INFO;
    }
  else if (!strncmp (sec_name, ".stab", 5))
    {
      styp_flags = STYP_DEBUG_INFO;
    }
#ifdef COFF_LONG_SECTION_NAMES
  else if (!strncmp (sec_name, ".gnu.linkonce.wi.", 17))
    {
      styp_flags = STYP_DEBUG_INFO;
    }
#endif
#ifdef RS6000COFF_C
  else if (!strcmp (sec_name, _PAD))
    {
      styp_flags = STYP_PAD;
    }
  else if (!strcmp (sec_name, _LOADER))
    {
      styp_flags = STYP_LOADER;
    }
  else if (!strcmp (sec_name, _EXCEPT))
    {
      styp_flags = STYP_EXCEPT;
    }
  else if (!strcmp (sec_name, _TYPCHK))
    {
      styp_flags = STYP_TYPCHK;
    }
#endif
  /* Try and figure out what it should be */
  else if (sec_flags & SEC_CODE)
    {
      styp_flags = STYP_TEXT;
    }
  else if (sec_flags & SEC_DATA)
    {
      styp_flags = STYP_DATA;
    }
  else if (sec_flags & SEC_READONLY)
    {
#ifdef STYP_LIT			/* 29k readonly text/data section */
      styp_flags = STYP_LIT;
#else
      styp_flags = STYP_TEXT;
#endif /* STYP_LIT */
    }
  else if (sec_flags & SEC_LOAD)
    {
      styp_flags = STYP_TEXT;
    }
  else if (sec_flags & SEC_ALLOC)
    {
      styp_flags = STYP_BSS;
    }

#ifdef STYP_CLINK
  if (sec_flags & SEC_CLINK)
    styp_flags |= STYP_CLINK;
#endif

#ifdef STYP_BLOCK
  if (sec_flags & SEC_BLOCK)
    styp_flags |= STYP_BLOCK;
#endif

#ifdef STYP_NOLOAD
  if ((sec_flags & (SEC_NEVER_LOAD | SEC_COFF_SHARED_LIBRARY)) != 0)
    styp_flags |= STYP_NOLOAD;
#endif

  return styp_flags;
}

#else /* COFF_WITH_PE */

/* The PE version; see above for the general comments.  The non-PE
   case seems to be more guessing, and breaks PE format; specifically,
   .rdata is readonly, but it sure ain't text.  Really, all this
   should be set up properly in gas (or whatever assembler is in use),
   and honor whatever objcopy/strip, etc. sent us as input.  */

static long
sec_to_styp_flags (sec_name, sec_flags)
     const char *sec_name ATTRIBUTE_UNUSED;
     flagword sec_flags;
{
  long styp_flags = 0;

  /* caution: there are at least three groups of symbols that have
     very similar bits and meanings: IMAGE_SCN*, SEC_*, and STYP_*.
     SEC_* are the BFD internal flags, used for generic BFD
     information.  STYP_* are the COFF section flags which appear in
     COFF files.  IMAGE_SCN_* are the PE section flags which appear in
     PE files.  The STYP_* flags and the IMAGE_SCN_* flags overlap,
     but there are more IMAGE_SCN_* flags.  */

  /* skip LOAD */
  /* READONLY later */
  /* skip RELOC */
  if ((sec_flags & SEC_CODE) != 0)
    styp_flags |= IMAGE_SCN_CNT_CODE;
  if ((sec_flags & SEC_DATA) != 0)
    styp_flags |= IMAGE_SCN_CNT_INITIALIZED_DATA;
  if ((sec_flags & SEC_ALLOC) != 0 && (sec_flags & SEC_LOAD) == 0)
    styp_flags |= IMAGE_SCN_CNT_UNINITIALIZED_DATA;  /* ==STYP_BSS */
  /* skip ROM */
  /* skip constRUCTOR */
  /* skip CONTENTS */
#ifdef STYP_NOLOAD
  if ((sec_flags & (SEC_NEVER_LOAD | SEC_COFF_SHARED_LIBRARY)) != 0)
    styp_flags |= STYP_NOLOAD;
#endif
  if ((sec_flags & SEC_IS_COMMON) != 0)
    styp_flags |= IMAGE_SCN_LNK_COMDAT;
  if ((sec_flags & SEC_DEBUGGING) != 0)
    styp_flags |= IMAGE_SCN_MEM_DISCARDABLE;
  if ((sec_flags & SEC_EXCLUDE) != 0)
    styp_flags |= IMAGE_SCN_LNK_REMOVE;
  if ((sec_flags & SEC_NEVER_LOAD) != 0)
    styp_flags |= IMAGE_SCN_LNK_REMOVE;
  /* skip IN_MEMORY */
  /* skip SORT */
  if (sec_flags & SEC_LINK_ONCE)
    styp_flags |= IMAGE_SCN_LNK_COMDAT;
  /* skip LINK_DUPLICATES */
  /* skip LINKER_CREATED */

  /* For now, the read/write bits are mapped onto SEC_READONLY, even
     though the semantics don't quite match.  The bits from the input
     are retained in pei_section_data(abfd, section)->pe_flags.  */

  styp_flags |= IMAGE_SCN_MEM_READ;       /* Always readable.  */
  if ((sec_flags & SEC_READONLY) == 0)
    styp_flags |= IMAGE_SCN_MEM_WRITE;    /* Invert READONLY for write.  */
  if (sec_flags & SEC_CODE)
    styp_flags |= IMAGE_SCN_MEM_EXECUTE;  /* CODE->EXECUTE.  */
  if (sec_flags & SEC_SHARED)
    styp_flags |= IMAGE_SCN_MEM_SHARED;   /* Shared remains meaningful.  */

  return styp_flags;
}

#endif /* COFF_WITH_PE */

/* Return a word with SEC_* flags set to represent the incoming STYP_*
   flags (from scnhdr.s_flags).  The inverse of this function is
   sec_to_styp_flags().  NOTE: If you add to/change this routine, you
   should probably mirror the changes in sec_to_styp_flags().  */

#ifndef COFF_WITH_PE

static bfd_boolean
styp_to_sec_flags (abfd, hdr, name, section, flags_ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     PTR hdr;
     const char *name;
     asection *section ATTRIBUTE_UNUSED;
     flagword *flags_ptr;
{
  struct internal_scnhdr *internal_s = (struct internal_scnhdr *) hdr;
  long styp_flags = internal_s->s_flags;
  flagword sec_flags = 0;

#ifdef STYP_BLOCK
  if (styp_flags & STYP_BLOCK)
    sec_flags |= SEC_BLOCK;
#endif

#ifdef STYP_CLINK
  if (styp_flags & STYP_CLINK)
    sec_flags |= SEC_CLINK;
#endif

#ifdef STYP_NOLOAD
  if (styp_flags & STYP_NOLOAD)
    sec_flags |= SEC_NEVER_LOAD;
#endif /* STYP_NOLOAD */

  /* For 386 COFF, at least, an unloadable text or data section is
     actually a shared library section.  */
  if (styp_flags & STYP_TEXT)
    {
      if (sec_flags & SEC_NEVER_LOAD)
	sec_flags |= SEC_CODE | SEC_COFF_SHARED_LIBRARY;
      else
	sec_flags |= SEC_CODE | SEC_LOAD | SEC_ALLOC;
    }
  else if (styp_flags & STYP_DATA)
    {
      if (sec_flags & SEC_NEVER_LOAD)
	sec_flags |= SEC_DATA | SEC_COFF_SHARED_LIBRARY;
      else
	sec_flags |= SEC_DATA | SEC_LOAD | SEC_ALLOC;
    }
  else if (styp_flags & STYP_BSS)
    {
#ifdef BSS_NOLOAD_IS_SHARED_LIBRARY
      if (sec_flags & SEC_NEVER_LOAD)
	sec_flags |= SEC_ALLOC | SEC_COFF_SHARED_LIBRARY;
      else
#endif
	sec_flags |= SEC_ALLOC;
    }
  else if (styp_flags & STYP_INFO)
    {
      /* We mark these as SEC_DEBUGGING, but only if COFF_PAGE_SIZE is
	 defined.  coff_compute_section_file_positions uses
	 COFF_PAGE_SIZE to ensure that the low order bits of the
	 section VMA and the file offset match.  If we don't know
	 COFF_PAGE_SIZE, we can't ensure the correct correspondence,
	 and demand page loading of the file will fail.  */
#if defined (COFF_PAGE_SIZE) && !defined (COFF_ALIGN_IN_S_FLAGS)
      sec_flags |= SEC_DEBUGGING;
#endif
    }
  else if (styp_flags & STYP_PAD)
    sec_flags = 0;
  else if (strcmp (name, _TEXT) == 0)
    {
      if (sec_flags & SEC_NEVER_LOAD)
	sec_flags |= SEC_CODE | SEC_COFF_SHARED_LIBRARY;
      else
	sec_flags |= SEC_CODE | SEC_LOAD | SEC_ALLOC;
    }
  else if (strcmp (name, _DATA) == 0)
    {
      if (sec_flags & SEC_NEVER_LOAD)
	sec_flags |= SEC_DATA | SEC_COFF_SHARED_LIBRARY;
      else
	sec_flags |= SEC_DATA | SEC_LOAD | SEC_ALLOC;
    }
  else if (strcmp (name, _BSS) == 0)
    {
#ifdef BSS_NOLOAD_IS_SHARED_LIBRARY
      if (sec_flags & SEC_NEVER_LOAD)
	sec_flags |= SEC_ALLOC | SEC_COFF_SHARED_LIBRARY;
      else
#endif
	sec_flags |= SEC_ALLOC;
    }
  else if (strncmp (name, ".debug", 6) == 0
#ifdef _COMMENT
	   || strcmp (name, _COMMENT) == 0
#endif
#ifdef COFF_LONG_SECTION_NAMES
	   || strncmp (name, ".gnu.linkonce.wi.", 17) == 0
#endif
	   || strncmp (name, ".stab", 5) == 0)
    {
#ifdef COFF_PAGE_SIZE
      sec_flags |= SEC_DEBUGGING;
#endif
    }
#ifdef _LIB
  else if (strcmp (name, _LIB) == 0)
    ;
#endif
#ifdef _LIT
  else if (strcmp (name, _LIT) == 0)
    sec_flags = SEC_LOAD | SEC_ALLOC | SEC_READONLY;
#endif
  else
    sec_flags |= SEC_ALLOC | SEC_LOAD;

#ifdef STYP_LIT			/* A29k readonly text/data section type.  */
  if ((styp_flags & STYP_LIT) == STYP_LIT)
    sec_flags = (SEC_LOAD | SEC_ALLOC | SEC_READONLY);
#endif /* STYP_LIT */

#ifdef STYP_OTHER_LOAD		/* Other loaded sections.  */
  if (styp_flags & STYP_OTHER_LOAD)
    sec_flags = (SEC_LOAD | SEC_ALLOC);
#endif /* STYP_SDATA */

#if defined (COFF_LONG_SECTION_NAMES) && defined (COFF_SUPPORT_GNU_LINKONCE)
  /* As a GNU extension, if the name begins with .gnu.linkonce, we
     only link a single copy of the section.  This is used to support
     g++.  g++ will emit each template expansion in its own section.
     The symbols will be defined as weak, so that multiple definitions
     are permitted.  The GNU linker extension is to actually discard
     all but one of the sections.  */
  if (strncmp (name, ".gnu.linkonce", sizeof ".gnu.linkonce" - 1) == 0)
    sec_flags |= SEC_LINK_ONCE | SEC_LINK_DUPLICATES_DISCARD;
#endif

  if (flags_ptr == NULL)
    return FALSE;

  * flags_ptr = sec_flags;
  return TRUE;
}

#else /* COFF_WITH_PE */

static flagword
handle_COMDAT (abfd, sec_flags, hdr, name, section)
     bfd * abfd;
     flagword sec_flags;
     PTR hdr;
     const char *name;
     asection *section;
{
  struct internal_scnhdr *internal_s = (struct internal_scnhdr *) hdr;
  bfd_byte *esymstart, *esym, *esymend;
  int seen_state = 0;
  char *target_name = NULL;

  sec_flags |= SEC_LINK_ONCE;

  /* Unfortunately, the PE format stores essential information in
     the symbol table, of all places.  We need to extract that
     information now, so that objdump and the linker will know how
     to handle the section without worrying about the symbols.  We
     can't call slurp_symtab, because the linker doesn't want the
     swapped symbols.  */

  /* COMDAT sections are special.  The first symbol is the section
     symbol, which tells what kind of COMDAT section it is.  The
     second symbol is the "comdat symbol" - the one with the
     unique name.  GNU uses the section symbol for the unique
     name; MS uses ".text" for every comdat section.  Sigh.  - DJ */

  /* This is not mirrored in sec_to_styp_flags(), but there
     doesn't seem to be a need to, either, and it would at best be
     rather messy.  */

  if (! _bfd_coff_get_external_symbols (abfd))
    return sec_flags;

  esymstart = esym = (bfd_byte *) obj_coff_external_syms (abfd);
  esymend = esym + obj_raw_syment_count (abfd) * bfd_coff_symesz (abfd);

  while (esym < esymend)
    {
      struct internal_syment isym;
      char buf[SYMNMLEN + 1];
      const char *symname;

      bfd_coff_swap_sym_in (abfd, (PTR) esym, (PTR) &isym);

      if (sizeof (internal_s->s_name) > SYMNMLEN)
	{
	  /* This case implies that the matching
	     symbol name will be in the string table.  */
	  abort ();
	}

      if (isym.n_scnum == section->target_index)
	{
	  /* According to the MSVC documentation, the first
	     TWO entries with the section # are both of
	     interest to us.  The first one is the "section
	     symbol" (section name).  The second is the comdat
	     symbol name.  Here, we've found the first
	     qualifying entry; we distinguish it from the
	     second with a state flag.

	     In the case of gas-generated (at least until that
	     is fixed) .o files, it isn't necessarily the
	     second one.  It may be some other later symbol.

	     Since gas also doesn't follow MS conventions and
	     emits the section similar to .text$<name>, where
	     <something> is the name we're looking for, we
	     distinguish the two as follows:

	     If the section name is simply a section name (no
	     $) we presume it's MS-generated, and look at
	     precisely the second symbol for the comdat name.
	     If the section name has a $, we assume it's
	     gas-generated, and look for <something> (whatever
	     follows the $) as the comdat symbol.  */

	  /* All 3 branches use this.  */
	  symname = _bfd_coff_internal_syment_name (abfd, &isym, buf);

	  if (symname == NULL)
	    abort ();

	  switch (seen_state)
	    {
	    case 0:
	      {
		/* The first time we've seen the symbol.  */
		union internal_auxent aux;

		seen_state = 1;

		/* If it isn't the stuff we're expecting, die;
		   The MS documentation is vague, but it
		   appears that the second entry serves BOTH
		   as the comdat symbol and the defining
		   symbol record (either C_STAT or C_EXT,
		   possibly with an aux entry with debug
		   information if it's a function.)  It
		   appears the only way to find the second one
		   is to count.  (On Intel, they appear to be
		   adjacent, but on Alpha, they have been
		   found separated.)

		   Here, we think we've found the first one,
		   but there's some checking we can do to be
		   sure.  */

		if (! (isym.n_sclass == C_STAT
		       && isym.n_type == T_NULL
		       && isym.n_value == 0))
		  abort ();

		/* FIXME LATER: MSVC generates section names
		   like .text for comdats.  Gas generates
		   names like .text$foo__Fv (in the case of a
		   function).  See comment above for more.  */

		if (strcmp (name, symname) != 0)
		  abort ();

		/* This is the section symbol.  */
		bfd_coff_swap_aux_in (abfd, (PTR) (esym + bfd_coff_symesz (abfd)),
				      isym.n_type, isym.n_sclass,
				      0, isym.n_numaux, (PTR) &aux);

		target_name = strchr (name, '$');
		if (target_name != NULL)
		  {
		    /* Gas mode.  */
		    seen_state = 2;
		    /* Skip the `$'.  */
		    target_name += 1;
		  }

		/* FIXME: Microsoft uses NODUPLICATES and
		   ASSOCIATIVE, but gnu uses ANY and
		   SAME_SIZE.  Unfortunately, gnu doesn't do
		   the comdat symbols right.  So, until we can
		   fix it to do the right thing, we are
		   temporarily disabling comdats for the MS
		   types (they're used in DLLs and C++, but we
		   don't support *their* C++ libraries anyway
		   - DJ.  */

		/* Cygwin does not follow the MS style, and
		   uses ANY and SAME_SIZE where NODUPLICATES
		   and ASSOCIATIVE should be used.  For
		   Interix, we just do the right thing up
		   front.  */

		switch (aux.x_scn.x_comdat)
		  {
		  case IMAGE_COMDAT_SELECT_NODUPLICATES:
#ifdef STRICT_PE_FORMAT
		    sec_flags |= SEC_LINK_DUPLICATES_ONE_ONLY;
#else
		    sec_flags &= ~SEC_LINK_ONCE;
#endif
		    break;

		  case IMAGE_COMDAT_SELECT_ANY:
		    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
		    break;

		  case IMAGE_COMDAT_SELECT_SAME_SIZE:
		    sec_flags |= SEC_LINK_DUPLICATES_SAME_SIZE;
		    break;

		  case IMAGE_COMDAT_SELECT_EXACT_MATCH:
		    /* Not yet fully implemented ??? */
		    sec_flags |= SEC_LINK_DUPLICATES_SAME_CONTENTS;
		    break;

		    /* debug$S gets this case; other
		       implications ??? */

		    /* There may be no symbol... we'll search
		       the whole table... Is this the right
		       place to play this game? Or should we do
		       it when reading it in.  */
		  case IMAGE_COMDAT_SELECT_ASSOCIATIVE:
#ifdef STRICT_PE_FORMAT
		    /* FIXME: This is not currently implemented.  */
		    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
#else
		    sec_flags &= ~SEC_LINK_ONCE;
#endif
		    break;

		  default:  /* 0 means "no symbol" */
		    /* debug$F gets this case; other
		       implications ??? */
		    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
		    break;
		  }
	      }
	      break;

	    case 2:
	      /* Gas mode: the first matching on partial name.  */

#ifndef TARGET_UNDERSCORE
#define TARGET_UNDERSCORE 0
#endif
	      /* Is this the name we're looking for ?  */
	      if (strcmp (target_name,
			  symname + (TARGET_UNDERSCORE ? 1 : 0)) != 0)
		{
		  /* Not the name we're looking for */
		  esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd);
		  continue;
		}
	      /* Fall through.  */
	    case 1:
	      /* MSVC mode: the lexically second symbol (or
		 drop through from the above).  */
	      {
		char *newname;
		bfd_size_type amt;

		/* This must the second symbol with the
		   section #.  It is the actual symbol name.
		   Intel puts the two adjacent, but Alpha (at
		   least) spreads them out.  */

		amt = sizeof (struct bfd_comdat_info);
		section->comdat = bfd_alloc (abfd, amt);
		if (section->comdat == NULL)
		  abort ();

		section->comdat->symbol =
		  (esym - esymstart) / bfd_coff_symesz (abfd);

		amt = strlen (symname) + 1;
		newname = bfd_alloc (abfd, amt);
		if (newname == NULL)
		  abort ();

		strcpy (newname, symname);
		section->comdat->name = newname;
	      }

	      goto breakloop;
	    }
	}

      esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd);
    }

 breakloop:
  return sec_flags;
}


/* The PE version; see above for the general comments.

   Since to set the SEC_LINK_ONCE and associated flags, we have to
   look at the symbol table anyway, we return the symbol table index
   of the symbol being used as the COMDAT symbol.  This is admittedly
   ugly, but there's really nowhere else that we have access to the
   required information.  FIXME: Is the COMDAT symbol index used for
   any purpose other than objdump?  */

static bfd_boolean
styp_to_sec_flags (abfd, hdr, name, section, flags_ptr)
     bfd *abfd;
     PTR hdr;
     const char *name;
     asection *section;
     flagword *flags_ptr;
{
  struct internal_scnhdr *internal_s = (struct internal_scnhdr *) hdr;
  long styp_flags = internal_s->s_flags;
  flagword sec_flags;
  bfd_boolean result = TRUE;

  /* Assume read only unless IMAGE_SCN_MEM_WRITE is specified.  */
  sec_flags = SEC_READONLY;

  /* Process each flag bit in styp_flags in turn.  */
  while (styp_flags)
    {
      long flag = styp_flags & - styp_flags;
      char * unhandled = NULL;

      styp_flags &= ~ flag;

      /* We infer from the distinct read/write/execute bits the settings
	 of some of the bfd flags; the actual values, should we need them,
	 are also in pei_section_data (abfd, section)->pe_flags.  */

      switch (flag)
	{
	case STYP_DSECT:
	  unhandled = "STYP_DSECT";
	  break;
	case STYP_GROUP:
	  unhandled = "STYP_GROUP";
	  break;
	case STYP_COPY:
	  unhandled = "STYP_COPY";
	  break;
	case STYP_OVER:
	  unhandled = "STYP_OVER";
	  break;
#ifdef SEC_NEVER_LOAD
	case STYP_NOLOAD:
	  sec_flags |= SEC_NEVER_LOAD;
	  break;
#endif
	case IMAGE_SCN_MEM_READ:
	  /* Ignored, assume it always to be true.  */
	  break;
	case IMAGE_SCN_TYPE_NO_PAD:
	  /* Skip.  */
	  break;
	case IMAGE_SCN_LNK_OTHER:
	  unhandled = "IMAGE_SCN_LNK_OTHER";
	  break;
	case IMAGE_SCN_MEM_NOT_CACHED:
	  unhandled = "IMAGE_SCN_MEM_NOT_CACHED";
	  break;
	case IMAGE_SCN_MEM_NOT_PAGED:
	  unhandled = "IMAGE_SCN_MEM_NOT_PAGED";
	  break;
	case IMAGE_SCN_MEM_EXECUTE:
	  sec_flags |= SEC_CODE;
	  break;
	case IMAGE_SCN_MEM_WRITE:
	  sec_flags &= ~ SEC_READONLY;
	  break;
	case IMAGE_SCN_MEM_DISCARDABLE:
	  /* The MS PE spec sets the DISCARDABLE flag on .reloc sections
	     but we do not want them to be labelled as debug section, since
	     then strip would remove them.  */
	  if (strncmp (name, ".reloc", sizeof ".reloc" - 1) != 0)
	    sec_flags |= SEC_DEBUGGING;
	  break;
	case IMAGE_SCN_MEM_SHARED:
	  sec_flags |= SEC_SHARED;
	  break;
	case IMAGE_SCN_LNK_REMOVE:
	  sec_flags |= SEC_EXCLUDE;
	  break;
	case IMAGE_SCN_CNT_CODE:
	  sec_flags |= SEC_CODE | SEC_ALLOC | SEC_LOAD;
	  break;
	case IMAGE_SCN_CNT_INITIALIZED_DATA:
	  sec_flags |= SEC_DATA | SEC_ALLOC | SEC_LOAD;
	  break;
	case IMAGE_SCN_CNT_UNINITIALIZED_DATA:
	  sec_flags |= SEC_ALLOC;
	  break;
	case IMAGE_SCN_LNK_INFO:
	  /* We mark these as SEC_DEBUGGING, but only if COFF_PAGE_SIZE is
	     defined.  coff_compute_section_file_positions uses
	     COFF_PAGE_SIZE to ensure that the low order bits of the
	     section VMA and the file offset match.  If we don't know
	     COFF_PAGE_SIZE, we can't ensure the correct correspondence,
	     and demand page loading of the file will fail.  */
#ifdef COFF_PAGE_SIZE
	  sec_flags |= SEC_DEBUGGING;
#endif
	  break;
	case IMAGE_SCN_LNK_COMDAT:
	  /* COMDAT gets very special treatment.  */
	  sec_flags = handle_COMDAT (abfd, sec_flags, hdr, name, section);
	  break;
	default:
	  /* Silently ignore for now.  */
	  break;
	}

      /* If the section flag was not handled, report it here.  */
      if (unhandled != NULL)
	{
	  (*_bfd_error_handler)
	    (_("%s (%s): Section flag %s (0x%x) ignored"),
	     bfd_archive_filename (abfd), name, unhandled, flag);
	  result = FALSE;
	}
    }

#if defined (COFF_LONG_SECTION_NAMES) && defined (COFF_SUPPORT_GNU_LINKONCE)
  /* As a GNU extension, if the name begins with .gnu.linkonce, we
     only link a single copy of the section.  This is used to support
     g++.  g++ will emit each template expansion in its own section.
     The symbols will be defined as weak, so that multiple definitions
     are permitted.  The GNU linker extension is to actually discard
     all but one of the sections.  */
  if (strncmp (name, ".gnu.linkonce", sizeof ".gnu.linkonce" - 1) == 0)
    sec_flags |= SEC_LINK_ONCE | SEC_LINK_DUPLICATES_DISCARD;
#endif

  if (flags_ptr)
    * flags_ptr = sec_flags;

  return result;
}

#endif /* COFF_WITH_PE */

#define	get_index(symbol)	((symbol)->udata.i)

/*
INTERNAL_DEFINITION
	bfd_coff_backend_data

CODE_FRAGMENT

.{* COFF symbol classifications.  *}
.
.enum coff_symbol_classification
.{
.  {* Global symbol.  *}
.  COFF_SYMBOL_GLOBAL,
.  {* Common symbol.  *}
.  COFF_SYMBOL_COMMON,
.  {* Undefined symbol.  *}
.  COFF_SYMBOL_UNDEFINED,
.  {* Local symbol.  *}
.  COFF_SYMBOL_LOCAL,
.  {* PE section symbol.  *}
.  COFF_SYMBOL_PE_SECTION
.};
.
Special entry points for gdb to swap in coff symbol table parts:
.typedef struct
.{
.  void (*_bfd_coff_swap_aux_in)
.    PARAMS ((bfd *, PTR, int, int, int, int, PTR));
.
.  void (*_bfd_coff_swap_sym_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  void (*_bfd_coff_swap_lineno_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_aux_out)
.    PARAMS ((bfd *, PTR, int, int, int, int, PTR));
.
.  unsigned int (*_bfd_coff_swap_sym_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_lineno_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_reloc_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_filehdr_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_aouthdr_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_scnhdr_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int _bfd_filhsz;
.  unsigned int _bfd_aoutsz;
.  unsigned int _bfd_scnhsz;
.  unsigned int _bfd_symesz;
.  unsigned int _bfd_auxesz;
.  unsigned int _bfd_relsz;
.  unsigned int _bfd_linesz;
.  unsigned int _bfd_filnmlen;
.  bfd_boolean _bfd_coff_long_filenames;
.  bfd_boolean _bfd_coff_long_section_names;
.  unsigned int _bfd_coff_default_section_alignment_power;
.  bfd_boolean _bfd_coff_force_symnames_in_strings;
.  unsigned int _bfd_coff_debug_string_prefix_length;
.
.  void (*_bfd_coff_swap_filehdr_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  void (*_bfd_coff_swap_aouthdr_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  void (*_bfd_coff_swap_scnhdr_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  void (*_bfd_coff_swap_reloc_in)
.    PARAMS ((bfd *abfd, PTR, PTR));
.
.  bfd_boolean (*_bfd_coff_bad_format_hook)
.    PARAMS ((bfd *, PTR));
.
.  bfd_boolean (*_bfd_coff_set_arch_mach_hook)
.    PARAMS ((bfd *, PTR));
.
.  PTR (*_bfd_coff_mkobject_hook)
.    PARAMS ((bfd *, PTR, PTR));
.
.  bfd_boolean (*_bfd_styp_to_sec_flags_hook)
.    PARAMS ((bfd *, PTR, const char *, asection *, flagword *));
.
.  void (*_bfd_set_alignment_hook)
.    PARAMS ((bfd *, asection *, PTR));
.
.  bfd_boolean (*_bfd_coff_slurp_symbol_table)
.    PARAMS ((bfd *));
.
.  bfd_boolean (*_bfd_coff_symname_in_debug)
.    PARAMS ((bfd *, struct internal_syment *));
.
.  bfd_boolean (*_bfd_coff_pointerize_aux_hook)
.    PARAMS ((bfd *, combined_entry_type *, combined_entry_type *,
.	     unsigned int, combined_entry_type *));
.
.  bfd_boolean (*_bfd_coff_print_aux)
.    PARAMS ((bfd *, FILE *, combined_entry_type *, combined_entry_type *,
.	     combined_entry_type *, unsigned int));
.
.  void (*_bfd_coff_reloc16_extra_cases)
.    PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *,
.	    bfd_byte *, unsigned int *, unsigned int *));
.
.  int (*_bfd_coff_reloc16_estimate)
.    PARAMS ((bfd *, asection *, arelent *, unsigned int,
.	     struct bfd_link_info *));
.
.  enum coff_symbol_classification (*_bfd_coff_classify_symbol)
.    PARAMS ((bfd *, struct internal_syment *));
.
.  bfd_boolean (*_bfd_coff_compute_section_file_positions)
.    PARAMS ((bfd *));
.
.  bfd_boolean (*_bfd_coff_start_final_link)
.    PARAMS ((bfd *, struct bfd_link_info *));
.
.  bfd_boolean (*_bfd_coff_relocate_section)
.    PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
.	     struct internal_reloc *, struct internal_syment *, asection **));
.
.  reloc_howto_type *(*_bfd_coff_rtype_to_howto)
.    PARAMS ((bfd *, asection *, struct internal_reloc *,
.	     struct coff_link_hash_entry *, struct internal_syment *,
.	     bfd_vma *));
.
.  bfd_boolean (*_bfd_coff_adjust_symndx)
.    PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *,
.	     struct internal_reloc *, bfd_boolean *));
.
.  bfd_boolean (*_bfd_coff_link_add_one_symbol)
.    PARAMS ((struct bfd_link_info *, bfd *, const char *, flagword,
.	     asection *, bfd_vma, const char *, bfd_boolean, bfd_boolean,
.	     struct bfd_link_hash_entry **));
.
.  bfd_boolean (*_bfd_coff_link_output_has_begun)
.    PARAMS ((bfd *, struct coff_final_link_info *));
.
.  bfd_boolean (*_bfd_coff_final_link_postscript)
.    PARAMS ((bfd *, struct coff_final_link_info *));
.
.} bfd_coff_backend_data;
.
.#define coff_backend_info(abfd) \
.  ((bfd_coff_backend_data *) (abfd)->xvec->backend_data)
.
.#define bfd_coff_swap_aux_in(a,e,t,c,ind,num,i) \
.  ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,ind,num,i))
.
.#define bfd_coff_swap_sym_in(a,e,i) \
.  ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))
.
.#define bfd_coff_swap_lineno_in(a,e,i) \
.  ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))
.
.#define bfd_coff_swap_reloc_out(abfd, i, o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))
.
.#define bfd_coff_swap_lineno_out(abfd, i, o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))
.
.#define bfd_coff_swap_aux_out(a,i,t,c,ind,num,o) \
.  ((coff_backend_info (a)->_bfd_coff_swap_aux_out) (a,i,t,c,ind,num,o))
.
.#define bfd_coff_swap_sym_out(abfd, i,o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))
.
.#define bfd_coff_swap_scnhdr_out(abfd, i,o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))
.
.#define bfd_coff_swap_filehdr_out(abfd, i,o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))
.
.#define bfd_coff_swap_aouthdr_out(abfd, i,o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))
.
.#define bfd_coff_filhsz(abfd) (coff_backend_info (abfd)->_bfd_filhsz)
.#define bfd_coff_aoutsz(abfd) (coff_backend_info (abfd)->_bfd_aoutsz)
.#define bfd_coff_scnhsz(abfd) (coff_backend_info (abfd)->_bfd_scnhsz)
.#define bfd_coff_symesz(abfd) (coff_backend_info (abfd)->_bfd_symesz)
.#define bfd_coff_auxesz(abfd) (coff_backend_info (abfd)->_bfd_auxesz)
.#define bfd_coff_relsz(abfd)  (coff_backend_info (abfd)->_bfd_relsz)
.#define bfd_coff_linesz(abfd) (coff_backend_info (abfd)->_bfd_linesz)
.#define bfd_coff_filnmlen(abfd) (coff_backend_info (abfd)->_bfd_filnmlen)
.#define bfd_coff_long_filenames(abfd) \
.  (coff_backend_info (abfd)->_bfd_coff_long_filenames)
.#define bfd_coff_long_section_names(abfd) \
.  (coff_backend_info (abfd)->_bfd_coff_long_section_names)
.#define bfd_coff_default_section_alignment_power(abfd) \
.  (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
.#define bfd_coff_swap_filehdr_in(abfd, i,o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))
.
.#define bfd_coff_swap_aouthdr_in(abfd, i,o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))
.
.#define bfd_coff_swap_scnhdr_in(abfd, i,o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))
.
.#define bfd_coff_swap_reloc_in(abfd, i, o) \
.  ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_in) (abfd, i, o))
.
.#define bfd_coff_bad_format_hook(abfd, filehdr) \
.  ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))
.
.#define bfd_coff_set_arch_mach_hook(abfd, filehdr)\
.  ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
.#define bfd_coff_mkobject_hook(abfd, filehdr, aouthdr)\
.  ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook)\
.   (abfd, filehdr, aouthdr))
.
.#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name, section, flags_ptr)\
.  ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook)\
.   (abfd, scnhdr, name, section, flags_ptr))
.
.#define bfd_coff_set_alignment_hook(abfd, sec, scnhdr)\
.  ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))
.
.#define bfd_coff_slurp_symbol_table(abfd)\
.  ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))
.
.#define bfd_coff_symname_in_debug(abfd, sym)\
.  ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))
.
.#define bfd_coff_force_symnames_in_strings(abfd)\
.  (coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)
.
.#define bfd_coff_debug_string_prefix_length(abfd)\
.  (coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)
.
.#define bfd_coff_print_aux(abfd, file, base, symbol, aux, indaux)\
.  ((coff_backend_info (abfd)->_bfd_coff_print_aux)\
.   (abfd, file, base, symbol, aux, indaux))
.
.#define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order,\
.                                     reloc, data, src_ptr, dst_ptr)\
.  ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
.   (abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr))
.
.#define bfd_coff_reloc16_estimate(abfd, section, reloc, shrink, link_info)\
.  ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
.   (abfd, section, reloc, shrink, link_info))
.
.#define bfd_coff_classify_symbol(abfd, sym)\
.  ((coff_backend_info (abfd)->_bfd_coff_classify_symbol)\
.   (abfd, sym))
.
.#define bfd_coff_compute_section_file_positions(abfd)\
.  ((coff_backend_info (abfd)->_bfd_coff_compute_section_file_positions)\
.   (abfd))
.
.#define bfd_coff_start_final_link(obfd, info)\
.  ((coff_backend_info (obfd)->_bfd_coff_start_final_link)\
.   (obfd, info))
.#define bfd_coff_relocate_section(obfd,info,ibfd,o,con,rel,isyms,secs)\
.  ((coff_backend_info (ibfd)->_bfd_coff_relocate_section)\
.   (obfd, info, ibfd, o, con, rel, isyms, secs))
.#define bfd_coff_rtype_to_howto(abfd, sec, rel, h, sym, addendp)\
.  ((coff_backend_info (abfd)->_bfd_coff_rtype_to_howto)\
.   (abfd, sec, rel, h, sym, addendp))
.#define bfd_coff_adjust_symndx(obfd, info, ibfd, sec, rel, adjustedp)\
.  ((coff_backend_info (abfd)->_bfd_coff_adjust_symndx)\
.   (obfd, info, ibfd, sec, rel, adjustedp))
.#define bfd_coff_link_add_one_symbol(info, abfd, name, flags, section,\
.                                     value, string, cp, coll, hashp)\
.  ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
.   (info, abfd, name, flags, section, value, string, cp, coll, hashp))
.
.#define bfd_coff_link_output_has_begun(a,p) \
.  ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a,p))
.#define bfd_coff_final_link_postscript(a,p) \
.  ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a,p))
.
*/

/* See whether the magic number matches.  */

static bfd_boolean
coff_bad_format_hook (abfd, filehdr)
     bfd * abfd ATTRIBUTE_UNUSED;
     PTR filehdr;
{
  struct internal_filehdr *internal_f = (struct internal_filehdr *) filehdr;

  if (BADMAG (*internal_f))
    return FALSE;

  /* If the optional header is NULL or not the correct size then
     quit; the only difference I can see between m88k dgux headers (MC88DMAGIC)
     and Intel 960 readwrite headers (I960WRMAGIC) is that the
     optional header is of a different size.

     But the mips keeps extra stuff in it's opthdr, so dont check
     when doing that.  */

#if defined(M88) || defined(I960)
  if (internal_f->f_opthdr != 0 && bfd_coff_aoutsz (abfd) != internal_f->f_opthdr)
    return FALSE;
#endif

  return TRUE;
}

#ifdef TICOFF
static bfd_boolean
ticoff0_bad_format_hook (abfd, filehdr)
     bfd *abfd ATTRIBUTE_UNUSED;
     PTR filehdr;
{
  struct internal_filehdr *internal_f = (struct internal_filehdr *) filehdr;

  if (COFF0_BADMAG (*internal_f))
    return FALSE;

  return TRUE;
}
#endif

#ifdef TICOFF
static bfd_boolean
ticoff1_bad_format_hook (abfd, filehdr)
     bfd *abfd ATTRIBUTE_UNUSED;
     PTR filehdr;
{
  struct internal_filehdr *internal_f = (struct internal_filehdr *) filehdr;

  if (COFF1_BADMAG (*internal_f))
    return FALSE;

  return TRUE;
}
#endif

/* Check whether this section uses an alignment other than the
   default.  */

static void
coff_set_custom_section_alignment (abfd, section, alignment_table, table_size)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section;
     const struct coff_section_alignment_entry *alignment_table;
     const unsigned int table_size;
{
  const unsigned int default_alignment = COFF_DEFAULT_SECTION_ALIGNMENT_POWER;
  unsigned int i;

  for (i = 0; i < table_size; ++i)
    {
      const char *secname = bfd_get_section_name (abfd, section);

      if (alignment_table[i].comparison_length == (unsigned int) -1
	  ? strcmp (alignment_table[i].name, secname) == 0
	  : strncmp (alignment_table[i].name, secname,
		     alignment_table[i].comparison_length) == 0)
	break;
    }
  if (i >= table_size)
    return;

  if (alignment_table[i].default_alignment_min != COFF_ALIGNMENT_FIELD_EMPTY
      && default_alignment < alignment_table[i].default_alignment_min)
    return;

  if (alignment_table[i].default_alignment_max != COFF_ALIGNMENT_FIELD_EMPTY
#if COFF_DEFAULT_SECTION_ALIGNMENT_POWER != 0
      && default_alignment > alignment_table[i].default_alignment_max
#endif
      )
    return;

  section->alignment_power = alignment_table[i].alignment_power;
}

/* Custom section alignment records.  */

static const struct coff_section_alignment_entry
coff_section_alignment_table[] =
{
#ifdef COFF_SECTION_ALIGNMENT_ENTRIES
  COFF_SECTION_ALIGNMENT_ENTRIES,
#endif
  /* There must not be any gaps between .stabstr sections.  */
  { COFF_SECTION_NAME_PARTIAL_MATCH (".stabstr"),
    1, COFF_ALIGNMENT_FIELD_EMPTY, 0 },
  /* The .stab section must be aligned to 2**2 at most, to avoid gaps.  */
  { COFF_SECTION_NAME_PARTIAL_MATCH (".stab"),
    3, COFF_ALIGNMENT_FIELD_EMPTY, 2 },
  /* Similarly for the .ctors and .dtors sections.  */
  { COFF_SECTION_NAME_EXACT_MATCH (".ctors"),
    3, COFF_ALIGNMENT_FIELD_EMPTY, 2 },
  { COFF_SECTION_NAME_EXACT_MATCH (".dtors"),
    3, COFF_ALIGNMENT_FIELD_EMPTY, 2 }
};

static const unsigned int coff_section_alignment_table_size =
  sizeof coff_section_alignment_table / sizeof coff_section_alignment_table[0];

/* Initialize a section structure with information peculiar to this
   particular implementation of COFF.  */

static bfd_boolean
coff_new_section_hook (abfd, section)
     bfd * abfd;
     asection * section;
{
  combined_entry_type *native;
  bfd_size_type amt;

  section->alignment_power = COFF_DEFAULT_SECTION_ALIGNMENT_POWER;

#ifdef RS6000COFF_C
  if (bfd_xcoff_text_align_power (abfd) != 0
      && strcmp (bfd_get_section_name (abfd, section), ".text") == 0)
    section->alignment_power = bfd_xcoff_text_align_power (abfd);
  if (bfd_xcoff_data_align_power (abfd) != 0
      && strcmp (bfd_get_section_name (abfd, section), ".data") == 0)
    section->alignment_power = bfd_xcoff_data_align_power (abfd);
#endif

  /* Allocate aux records for section symbols, to store size and
     related info.

     @@@@ The 10 is a guess at a plausible maximum number of aux entries
     (but shouldn't be a constant).  */
  amt = sizeof (combined_entry_type) * 10;
  native = (combined_entry_type *) bfd_zalloc (abfd, amt);
  if (native == NULL)
    return FALSE;

  /* We don't need to set up n_name, n_value, or n_scnum in the native
     symbol information, since they'll be overridden by the BFD symbol
     anyhow.  However, we do need to set the type and storage class,
     in case this symbol winds up getting written out.  The value 0
     for n_numaux is already correct.  */

  native->u.syment.n_type = T_NULL;
  native->u.syment.n_sclass = C_STAT;

  coffsymbol (section->symbol)->native = native;

  coff_set_custom_section_alignment (abfd, section,
				     coff_section_alignment_table,
				     coff_section_alignment_table_size);

  return TRUE;
}

#ifdef COFF_ALIGN_IN_SECTION_HEADER

/* Set the alignment of a BFD section.  */

static void coff_set_alignment_hook PARAMS ((bfd *, asection *, PTR));

static void
coff_set_alignment_hook (abfd, section, scnhdr)
     bfd * abfd ATTRIBUTE_UNUSED;
     asection * section;
     PTR scnhdr;
{
  struct internal_scnhdr *hdr = (struct internal_scnhdr *) scnhdr;
  unsigned int i;

#ifdef I960
  /* Extract ALIGN from 2**ALIGN stored in section header.  */
  for (i = 0; i < 32; i++)
    if ((1 << i) >= hdr->s_align)
      break;
#endif
#ifdef TIC80COFF
  /* TI tools puts the alignment power in bits 8-11.  */
  i = (hdr->s_flags >> 8) & 0xF ;
#endif
#ifdef COFF_DECODE_ALIGNMENT
  i = COFF_DECODE_ALIGNMENT(hdr->s_flags);
#endif
  section->alignment_power = i;

#ifdef coff_set_section_load_page
  coff_set_section_load_page (section, hdr->s_page);
#endif
}

#else /* ! COFF_ALIGN_IN_SECTION_HEADER */
#ifdef COFF_WITH_PE

/* A couple of macros to help setting the alignment power field.  */
#define ALIGN_SET(field,x,y) \
  if (((field) & IMAGE_SCN_ALIGN_64BYTES) == x )\
  {\
     section->alignment_power = y;\
  }

#define ELIFALIGN_SET(field,x,y) \
  else if (( (field) & IMAGE_SCN_ALIGN_64BYTES) == x ) \
  {\
     section->alignment_power = y;\
  }

static void coff_set_alignment_hook PARAMS ((bfd *, asection *, PTR));

static void
coff_set_alignment_hook (abfd, section, scnhdr)
     bfd * abfd ATTRIBUTE_UNUSED;
     asection * section;
     PTR scnhdr;
{
  struct internal_scnhdr *hdr = (struct internal_scnhdr *) scnhdr;
  bfd_size_type amt;

  ALIGN_SET     (hdr->s_flags, IMAGE_SCN_ALIGN_64BYTES, 6)
  ELIFALIGN_SET (hdr->s_flags, IMAGE_SCN_ALIGN_32BYTES, 5)
  ELIFALIGN_SET (hdr->s_flags, IMAGE_SCN_ALIGN_16BYTES, 4)
  ELIFALIGN_SET (hdr->s_flags, IMAGE_SCN_ALIGN_8BYTES,  3)
  ELIFALIGN_SET (hdr->s_flags, IMAGE_SCN_ALIGN_4BYTES,  2)
  ELIFALIGN_SET (hdr->s_flags, IMAGE_SCN_ALIGN_2BYTES,  1)
  ELIFALIGN_SET (hdr->s_flags, IMAGE_SCN_ALIGN_1BYTES,  0)

  /* In a PE image file, the s_paddr field holds the virtual size of a
     section, while the s_size field holds the raw size.  We also keep
     the original section flag value, since not every bit can be
     mapped onto a generic BFD section bit.  */
  if (coff_section_data (abfd, section) == NULL)
    {
      amt = sizeof (struct coff_section_tdata);
      section->used_by_bfd = (PTR) bfd_zalloc (abfd, amt);
      if (section->used_by_bfd == NULL)
	{
	  /* FIXME: Return error.  */
	  abort ();
	}
    }
  if (pei_section_data (abfd, section) == NULL)
    {
      amt = sizeof (struct pei_section_tdata);
      coff_section_data (abfd, section)->tdata = (PTR) bfd_zalloc (abfd, amt);
      if (coff_section_data (abfd, section)->tdata == NULL)
	{
	  /* FIXME: Return error.  */
	  abort ();
	}
    }
  pei_section_data (abfd, section)->virt_size = hdr->s_paddr;
  pei_section_data (abfd, section)->pe_flags = hdr->s_flags;

  section->lma = hdr->s_vaddr;

  /* Check for extended relocs.  */
  if (hdr->s_flags & IMAGE_SCN_LNK_NRELOC_OVFL)
    {
      struct external_reloc dst;
      struct internal_reloc n;
      file_ptr oldpos = bfd_tell (abfd);
      bfd_size_type relsz = bfd_coff_relsz (abfd);
      
      bfd_seek (abfd, (file_ptr) hdr->s_relptr, 0);
      if (bfd_bread ((PTR) &dst, relsz, abfd) != relsz)
	return;

      coff_swap_reloc_in (abfd, &dst, &n);
      bfd_seek (abfd, oldpos, 0);
      section->reloc_count = hdr->s_nreloc = n.r_vaddr - 1;
      section->rel_filepos += relsz;
    }
  else if (hdr->s_nreloc == 0xffff)
    (*_bfd_error_handler)
      ("%s: warning: claims to have 0xffff relocs, without overflow",
       bfd_get_filename (abfd));
}
#undef ALIGN_SET
#undef ELIFALIGN_SET

#else /* ! COFF_WITH_PE */
#ifdef RS6000COFF_C

/* We grossly abuse this function to handle XCOFF overflow headers.
   When we see one, we correct the reloc and line number counts in the
   real header, and remove the section we just created.  */

static void coff_set_alignment_hook PARAMS ((bfd *, asection *, PTR));

static void
coff_set_alignment_hook (abfd, section, scnhdr)
     bfd *abfd;
     asection *section;
     PTR scnhdr;
{
  struct internal_scnhdr *hdr = (struct internal_scnhdr *) scnhdr;
  asection *real_sec;
  asection **ps;

  if ((hdr->s_flags & STYP_OVRFLO) == 0)
    return;

  real_sec = coff_section_from_bfd_index (abfd, (int) hdr->s_nreloc);
  if (real_sec == NULL)
    return;

  real_sec->reloc_count = hdr->s_paddr;
  real_sec->lineno_count = hdr->s_vaddr;

  for (ps = &abfd->sections; *ps != NULL; ps = &(*ps)->next)
    {
      if (*ps == section)
	{
	  bfd_section_list_remove (abfd, ps);
	  --abfd->section_count;
	  break;
	}
    }
}

#else /* ! RS6000COFF_C */

#define coff_set_alignment_hook \
  ((void (*) PARAMS ((bfd *, asection *, PTR))) bfd_void)

#endif /* ! RS6000COFF_C */
#endif /* ! COFF_WITH_PE */
#endif /* ! COFF_ALIGN_IN_SECTION_HEADER */

#ifndef coff_mkobject

static bfd_boolean coff_mkobject PARAMS ((bfd *));

static bfd_boolean
coff_mkobject (abfd)
     bfd * abfd;
{
  coff_data_type *coff;
  bfd_size_type amt = sizeof (coff_data_type);

  abfd->tdata.coff_obj_data = (struct coff_tdata *) bfd_zalloc (abfd, amt);
  if (abfd->tdata.coff_obj_data == 0)
    return FALSE;
  coff = coff_data (abfd);
  coff->symbols = (coff_symbol_type *) NULL;
  coff->conversion_table = (unsigned int *) NULL;
  coff->raw_syments = (struct coff_ptr_struct *) NULL;
  coff->relocbase = 0;
  coff->local_toc_sym_map = 0;

/*  make_abs_section(abfd);*/

  return TRUE;
}
#endif

/* Create the COFF backend specific information.  */

#ifndef coff_mkobject_hook
static PTR
coff_mkobject_hook (abfd, filehdr, aouthdr)
     bfd * abfd;
     PTR filehdr;
     PTR aouthdr ATTRIBUTE_UNUSED;
{
  struct internal_filehdr *internal_f = (struct internal_filehdr *) filehdr;
  coff_data_type *coff;

  if (! coff_mkobject (abfd))
    return NULL;

  coff = coff_data (abfd);

  coff->sym_filepos = internal_f->f_symptr;

  /* These members communicate important constants about the symbol
     table to GDB's symbol-reading code.  These `constants'
     unfortunately vary among coff implementations...  */
  coff->local_n_btmask = N_BTMASK;
  coff->local_n_btshft = N_BTSHFT;
  coff->local_n_tmask = N_TMASK;
  coff->local_n_tshift = N_TSHIFT;
  coff->local_symesz = bfd_coff_symesz (abfd);
  coff->local_auxesz = bfd_coff_auxesz (abfd);
  coff->local_linesz = bfd_coff_linesz (abfd);

  coff->timestamp = internal_f->f_timdat;

  obj_raw_syment_count (abfd) =
    obj_conv_table_size (abfd) =
      internal_f->f_nsyms;

#ifdef RS6000COFF_C
  if ((internal_f->f_flags & F_SHROBJ) != 0)
    abfd->flags |= DYNAMIC;
  if (aouthdr != NULL && internal_f->f_opthdr >= bfd_coff_aoutsz (abfd))
    {
      struct internal_aouthdr *internal_a =
	(struct internal_aouthdr *) aouthdr;
      struct xcoff_tdata *xcoff;

      xcoff = xcoff_data (abfd);
# ifdef U803XTOCMAGIC
      xcoff->xcoff64 = internal_f->f_magic == U803XTOCMAGIC;
# else
      xcoff->xcoff64 = 0;
# endif
      xcoff->full_aouthdr = TRUE;
      xcoff->toc = internal_a->o_toc;
      xcoff->sntoc = internal_a->o_sntoc;
      xcoff->snentry = internal_a->o_snentry;
      bfd_xcoff_text_align_power (abfd) = internal_a->o_algntext;
      bfd_xcoff_data_align_power (abfd) = internal_a->o_algndata;
      xcoff->modtype = internal_a->o_modtype;
      xcoff->cputype = internal_a->o_cputype;
      xcoff->maxdata = internal_a->o_maxdata;
      xcoff->maxstack = internal_a->o_maxstack;
    }
#endif

#ifdef ARM
  /* Set the flags field from the COFF header read in.  */
  if (! _bfd_coff_arm_set_private_flags (abfd, internal_f->f_flags))
    coff->flags = 0;
#endif

#ifdef COFF_WITH_PE
  /* FIXME: I'm not sure this is ever executed, since peicode.h
     defines coff_mkobject_hook.  */
  if ((internal_f->f_flags & IMAGE_FILE_DEBUG_STRIPPED) == 0)
    abfd->flags |= HAS_DEBUG;
#endif

  return (PTR) coff;
}
#endif

/* Determine the machine architecture and type.  FIXME: This is target
   dependent because the magic numbers are defined in the target
   dependent header files.  But there is no particular need for this.
   If the magic numbers were moved to a separate file, this function
   would be target independent and would also be much more successful
   at linking together COFF files for different architectures.  */

static bfd_boolean
coff_set_arch_mach_hook (abfd, filehdr)
     bfd *abfd;
     PTR filehdr;
{
  unsigned long machine;
  enum bfd_architecture arch;
  struct internal_filehdr *internal_f = (struct internal_filehdr *) filehdr;

  /* Zero selects the default machine for an arch.  */
  machine = 0;
  switch (internal_f->f_magic)
    {
#ifdef OR32_MAGIC_BIG
    case OR32_MAGIC_BIG:
    case OR32_MAGIC_LITTLE:
      arch = bfd_arch_or32;
      break;
#endif
#ifdef PPCMAGIC
    case PPCMAGIC:
      arch = bfd_arch_powerpc;
      break;
#endif
#ifdef I386MAGIC
    case I386MAGIC:
    case I386PTXMAGIC:
    case I386AIXMAGIC:		/* Danbury PS/2 AIX C Compiler */
    case LYNXCOFFMAGIC:	/* shadows the m68k Lynx number below, sigh */
      arch = bfd_arch_i386;
      break;
#endif
#ifdef AMD64MAGIC
    case AMD64MAGIC:
      arch = bfd_arch_i386;
      machine = bfd_mach_x86_64;
      break;
#endif
#ifdef IA64MAGIC
    case IA64MAGIC:
      arch = bfd_arch_ia64;
      break;
#endif
#ifdef A29K_MAGIC_BIG
    case A29K_MAGIC_BIG:
    case A29K_MAGIC_LITTLE:
      arch = bfd_arch_a29k;
      break;
#endif
#ifdef ARMMAGIC
    case ARMMAGIC:
    case ARMPEMAGIC:
    case THUMBPEMAGIC:
      arch = bfd_arch_arm;
      machine = bfd_arm_get_mach_from_notes (abfd, ARM_NOTE_SECTION);
      if (machine == bfd_mach_arm_unknown)
	{
	  switch (internal_f->f_flags & F_ARM_ARCHITECTURE_MASK)
	    {
	    case F_ARM_2:  machine = bfd_mach_arm_2;  break;
	    case F_ARM_2a: machine = bfd_mach_arm_2a; break;
	    case F_ARM_3:  machine = bfd_mach_arm_3;  break;
	    default:
	    case F_ARM_3M: machine = bfd_mach_arm_3M; break;
	    case F_ARM_4:  machine = bfd_mach_arm_4;  break;
	    case F_ARM_4T: machine = bfd_mach_arm_4T; break;
	      /* The COFF header does not have enough bits available
		 to cover all the different ARM architectures.  So
		 we interpret F_ARM_5, the highest flag value to mean
		 "the highest ARM architecture known to BFD" which is
		 currently the XScale.  */
	    case F_ARM_5:  machine = bfd_mach_arm_XScale;  break;
	    }
	}
      break;
#endif
#ifdef MC68MAGIC
    case MC68MAGIC:
    case M68MAGIC:
#ifdef MC68KBCSMAGIC
    case MC68KBCSMAGIC:
#endif
#ifdef APOLLOM68KMAGIC
    case APOLLOM68KMAGIC:
#endif
#ifdef LYNXCOFFMAGIC
    case LYNXCOFFMAGIC:
#endif
      arch = bfd_arch_m68k;
      machine = bfd_mach_m68020;
      break;
#endif
#ifdef MC88MAGIC
    case MC88MAGIC:
    case MC88DMAGIC:
    case MC88OMAGIC:
      arch = bfd_arch_m88k;
      machine = 88100;
      break;
#endif
#ifdef Z8KMAGIC
    case Z8KMAGIC:
      arch = bfd_arch_z8k;
      switch (internal_f->f_flags & F_MACHMASK)
	{
	case F_Z8001:
	  machine = bfd_mach_z8001;
	  break;
	case F_Z8002:
	  machine = bfd_mach_z8002;
	  break;
	default:
	  return FALSE;
	}
      break;
#endif
#ifdef I860
    case I860MAGIC:
      arch = bfd_arch_i860;
      break;
#endif
#ifdef I960
#ifdef I960ROMAGIC
    case I960ROMAGIC:
    case I960RWMAGIC:
      arch = bfd_arch_i960;
      switch (F_I960TYPE & internal_f->f_flags)
	{
	default:
	case F_I960CORE:
	  machine = bfd_mach_i960_core;
	  break;
	case F_I960KB:
	  machine = bfd_mach_i960_kb_sb;
	  break;
	case F_I960MC:
	  machine = bfd_mach_i960_mc;
	  break;
	case F_I960XA:
	  machine = bfd_mach_i960_xa;
	  break;
	case F_I960CA:
	  machine = bfd_mach_i960_ca;
	  break;
	case F_I960KA:
	  machine = bfd_mach_i960_ka_sa;
	  break;
	case F_I960JX:
	  machine = bfd_mach_i960_jx;
	  break;
	case F_I960HX:
	  machine = bfd_mach_i960_hx;
	  break;
	}
      break;
#endif
#endif

#ifdef RS6000COFF_C
#ifdef XCOFF64
    case U64_TOCMAGIC:
    case U803XTOCMAGIC:
#else
    case U802ROMAGIC:
    case U802WRMAGIC:
    case U802TOCMAGIC:
#endif
      {
	int cputype;

	if (xcoff_data (abfd)->cputype != -1)
	  cputype = xcoff_data (abfd)->cputype & 0xff;
	else
	  {
	    /* We did not get a value from the a.out header.  If the
	       file has not been stripped, we may be able to get the
	       architecture information from the first symbol, if it
	       is a .file symbol.  */
	    if (obj_raw_syment_count (abfd) == 0)
	      cputype = 0;
	    else
	      {
		bfd_byte *buf;
		struct internal_syment sym;
		bfd_size_type amt = bfd_coff_symesz (abfd);

		buf = (bfd_byte *) bfd_malloc (amt);
		if (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0
		    || bfd_bread (buf, amt, abfd) != amt)
		  {
		    free (buf);
		    return FALSE;
		  }
		bfd_coff_swap_sym_in (abfd, (PTR) buf, (PTR) &sym);
		if (sym.n_sclass == C_FILE)
		  cputype = sym.n_type & 0xff;
		else
		  cputype = 0;
		free (buf);
	      }
	  }

	/* FIXME: We don't handle all cases here.  */
	switch (cputype)
	  {
	  default:
	  case 0:
	    arch = bfd_xcoff_architecture (abfd);
	    machine = bfd_xcoff_machine (abfd);
	    break;

	  case 1:
	    arch = bfd_arch_powerpc;
	    machine = bfd_mach_ppc_601;
	    break;
	  case 2: /* 64 bit PowerPC */
	    arch = bfd_arch_powerpc;
	    machine = bfd_mach_ppc_620;
	    break;
	  case 3:
	    arch = bfd_arch_powerpc;
	    machine = bfd_mach_ppc;
	    break;
	  case 4:
	    arch = bfd_arch_rs6000;
	    machine = bfd_mach_rs6k;
	    break;
	  }
      }
      break;
#endif

#ifdef WE32KMAGIC
    case WE32KMAGIC:
      arch = bfd_arch_we32k;
      break;
#endif

#ifdef H8300MAGIC
    case H8300MAGIC:
      arch = bfd_arch_h8300;
      machine = bfd_mach_h8300;
      /* !! FIXME this probably isn't the right place for this.  */
      abfd->flags |= BFD_IS_RELAXABLE;
      break;
#endif

#ifdef H8300HMAGIC
    case H8300HMAGIC:
      arch = bfd_arch_h8300;
      machine = bfd_mach_h8300h;
      /* !! FIXME this probably isn't the right place for this.  */
      abfd->flags |= BFD_IS_RELAXABLE;
      break;
#endif

#ifdef H8300SMAGIC
    case H8300SMAGIC:
      arch = bfd_arch_h8300;
      machine = bfd_mach_h8300s;
      /* !! FIXME this probably isn't the right place for this.  */
      abfd->flags |= BFD_IS_RELAXABLE;
      break;
#endif

#ifdef H8300HNMAGIC
    case H8300HNMAGIC:
      arch = bfd_arch_h8300;
      machine = bfd_mach_h8300hn;
      /* !! FIXME this probably isn't the right place for this.  */
      abfd->flags |= BFD_IS_RELAXABLE;
      break;
#endif

#ifdef H8300SNMAGIC
    case H8300SNMAGIC:
      arch = bfd_arch_h8300;
      machine = bfd_mach_h8300sn;
      /* !! FIXME this probably isn't the right place for this.  */
      abfd->flags |= BFD_IS_RELAXABLE;
      break;
#endif

#ifdef SH_ARCH_MAGIC_BIG
    case SH_ARCH_MAGIC_BIG:
    case SH_ARCH_MAGIC_LITTLE:
#ifdef COFF_WITH_PE
    case SH_ARCH_MAGIC_WINCE:
#endif
      arch = bfd_arch_sh;
      break;
#endif

#ifdef MIPS_ARCH_MAGIC_WINCE
    case MIPS_ARCH_MAGIC_WINCE:
      arch = bfd_arch_mips;
      break;
#endif

#ifdef H8500MAGIC
    case H8500MAGIC:
      arch = bfd_arch_h8500;
      break;
#endif

#ifdef SPARCMAGIC
    case SPARCMAGIC:
#ifdef LYNXCOFFMAGIC
    case LYNXCOFFMAGIC:
#endif
      arch = bfd_arch_sparc;
      break;
#endif

#ifdef TIC30MAGIC
    case TIC30MAGIC:
      arch = bfd_arch_tic30;
      break;
#endif

#ifdef TICOFF0MAGIC
#ifdef TICOFF_TARGET_ARCH
      /* This TI COFF section should be used by all new TI COFF v0 targets.  */
    case TICOFF0MAGIC:
      arch = TICOFF_TARGET_ARCH;
      machine = TICOFF_TARGET_MACHINE_GET (internal_f->f_flags);
      break;
#endif
#endif

#ifdef TICOFF1MAGIC
      /* This TI COFF section should be used by all new TI COFF v1/2 targets.  */
      /* TI COFF1 and COFF2 use the target_id field to specify which arch.  */
    case TICOFF1MAGIC:
    case TICOFF2MAGIC:
      switch (internal_f->f_target_id)
        {
#ifdef TI_TARGET_ID
        case TI_TARGET_ID:
          arch = TICOFF_TARGET_ARCH;
	  machine = TICOFF_TARGET_MACHINE_GET (internal_f->f_flags);
          break;
#endif
        default:
          arch = bfd_arch_obscure;
          (*_bfd_error_handler)
            (_("Unrecognized TI COFF target id '0x%x'"),
             internal_f->f_target_id);
          break;
        }
      break;
#endif

#ifdef TIC80_ARCH_MAGIC
    case TIC80_ARCH_MAGIC:
      arch = bfd_arch_tic80;
      break;
#endif

#ifdef MCOREMAGIC
    case MCOREMAGIC:
      arch = bfd_arch_mcore;
      break;
#endif

#ifdef W65MAGIC
    case W65MAGIC:
      arch = bfd_arch_w65;
      break;
#endif

    default:			/* Unreadable input file type.  */
      arch = bfd_arch_obscure;
      break;
    }

  bfd_default_set_arch_mach (abfd, arch, machine);
  return TRUE;
}

#ifdef SYMNAME_IN_DEBUG

static bfd_boolean symname_in_debug_hook
  PARAMS ((bfd *, struct internal_syment *));

static bfd_boolean
symname_in_debug_hook (abfd, sym)
     bfd * abfd ATTRIBUTE_UNUSED;
     struct internal_syment *sym;
{
  return SYMNAME_IN_DEBUG (sym) != 0;
}

#else

#define symname_in_debug_hook \
  (bfd_boolean (*) PARAMS ((bfd *, struct internal_syment *))) bfd_false

#endif

#ifdef RS6000COFF_C

#ifdef XCOFF64
#define FORCE_SYMNAMES_IN_STRINGS
#endif

/* Handle the csect auxent of a C_EXT or C_HIDEXT symbol.  */

static bfd_boolean coff_pointerize_aux_hook
  PARAMS ((bfd *, combined_entry_type *, combined_entry_type *,
	   unsigned int, combined_entry_type *));

static bfd_boolean
coff_pointerize_aux_hook (abfd, table_base, symbol, indaux, aux)
     bfd *abfd ATTRIBUTE_UNUSED;
     combined_entry_type *table_base;
     combined_entry_type *symbol;
     unsigned int indaux;
     combined_entry_type *aux;
{
  int class = symbol->u.syment.n_sclass;

  if ((class == C_EXT || class == C_HIDEXT)
      && indaux + 1 == symbol->u.syment.n_numaux)
    {
      if (SMTYP_SMTYP (aux->u.auxent.x_csect.x_smtyp) == XTY_LD)
	{
	  aux->u.auxent.x_csect.x_scnlen.p =
	    table_base + aux->u.auxent.x_csect.x_scnlen.l;
	  aux->fix_scnlen = 1;
	}

      /* Return TRUE to indicate that the caller should not do any
         further work on this auxent.  */
      return TRUE;
    }

  /* Return FALSE to indicate that this auxent should be handled by
     the caller.  */
  return FALSE;
}

#else
#ifdef I960

/* We don't want to pointerize bal entries.  */

static bfd_boolean coff_pointerize_aux_hook
  PARAMS ((bfd *, combined_entry_type *, combined_entry_type *,
	   unsigned int, combined_entry_type *));

static bfd_boolean
coff_pointerize_aux_hook (abfd, table_base, symbol, indaux, aux)
     bfd *abfd ATTRIBUTE_UNUSED;
     combined_entry_type *table_base ATTRIBUTE_UNUSED;
     combined_entry_type *symbol;
     unsigned int indaux;
     combined_entry_type *aux ATTRIBUTE_UNUSED;
{
  /* Return TRUE if we don't want to pointerize this aux entry, which
     is the case for the lastfirst aux entry for a C_LEAFPROC symbol.  */
  return (indaux == 1
	  && (symbol->u.syment.n_sclass == C_LEAFPROC
	      || symbol->u.syment.n_sclass == C_LEAFSTAT
	      || symbol->u.syment.n_sclass == C_LEAFEXT));
}

#else /* ! I960 */

#define coff_pointerize_aux_hook 0

#endif /* ! I960 */
#endif /* ! RS6000COFF_C */

/* Print an aux entry.  This returns TRUE if it has printed it.  */

static bfd_boolean coff_print_aux
  PARAMS ((bfd *, FILE *, combined_entry_type *, combined_entry_type *,
	   combined_entry_type *, unsigned int));

static bfd_boolean
coff_print_aux (abfd, file, table_base, symbol, aux, indaux)
     bfd *abfd ATTRIBUTE_UNUSED;
     FILE *file ATTRIBUTE_UNUSED;
     combined_entry_type *table_base ATTRIBUTE_UNUSED;
     combined_entry_type *symbol ATTRIBUTE_UNUSED;
     combined_entry_type *aux ATTRIBUTE_UNUSED;
     unsigned int indaux ATTRIBUTE_UNUSED;
{
#ifdef RS6000COFF_C
  if ((symbol->u.syment.n_sclass == C_EXT
       || symbol->u.syment.n_sclass == C_HIDEXT)
      && indaux + 1 == symbol->u.syment.n_numaux)
    {
      /* This is a csect entry.  */
      fprintf (file, "AUX ");
      if (SMTYP_SMTYP (aux->u.auxent.x_csect.x_smtyp) != XTY_LD)
	{
	  BFD_ASSERT (! aux->fix_scnlen);
#ifdef XCOFF64
	  fprintf (file, "val %5lld", aux->u.auxent.x_csect.x_scnlen.l);
#else
	  fprintf (file, "val %5ld", (long) aux->u.auxent.x_csect.x_scnlen.l);
#endif
	}
      else
	{
	  fprintf (file, "indx ");
	  if (! aux->fix_scnlen)
#ifdef XCOFF64
	    fprintf (file, "%4lld", aux->u.auxent.x_csect.x_scnlen.l);
#else
	    fprintf (file, "%4ld", (long) aux->u.auxent.x_csect.x_scnlen.l);
#endif
	  else
	    fprintf (file, "%4ld",
		     (long) (aux->u.auxent.x_csect.x_scnlen.p - table_base));
	}
      fprintf (file,
	       " prmhsh %ld snhsh %u typ %d algn %d clss %u stb %ld snstb %u",
	       aux->u.auxent.x_csect.x_parmhash,
	       (unsigned int) aux->u.auxent.x_csect.x_snhash,
	       SMTYP_SMTYP (aux->u.auxent.x_csect.x_smtyp),
	       SMTYP_ALIGN (aux->u.auxent.x_csect.x_smtyp),
	       (unsigned int) aux->u.auxent.x_csect.x_smclas,
	       aux->u.auxent.x_csect.x_stab,
	       (unsigned int) aux->u.auxent.x_csect.x_snstab);
      return TRUE;
    }
#endif

  /* Return FALSE to indicate that no special action was taken.  */
  return FALSE;
}

/*
SUBSUBSECTION
	Writing relocations

	To write relocations, the back end steps though the
	canonical relocation table and create an
	@@code{internal_reloc}. The symbol index to use is removed from
	the @@code{offset} field in the symbol table supplied.  The
	address comes directly from the sum of the section base
	address and the relocation offset; the type is dug directly
	from the howto field.  Then the @@code{internal_reloc} is
	swapped into the shape of an @@code{external_reloc} and written
	out to disk.

*/

#ifdef TARG_AUX

static int compare_arelent_ptr PARAMS ((const PTR, const PTR));

/* AUX's ld wants relocations to be sorted.  */
static int
compare_arelent_ptr (x, y)
     const PTR x;
     const PTR y;
{
  const arelent **a = (const arelent **) x;
  const arelent **b = (const arelent **) y;
  bfd_size_type aadr = (*a)->address;
  bfd_size_type badr = (*b)->address;

  return (aadr < badr ? -1 : badr < aadr ? 1 : 0);
}

#endif /* TARG_AUX */

static bfd_boolean
coff_write_relocs (abfd, first_undef)
     bfd * abfd;
     int first_undef;
{
  asection *s;

  for (s = abfd->sections; s != (asection *) NULL; s = s->next)
    {
      unsigned int i;
      struct external_reloc dst;
      arelent **p;

#ifndef TARG_AUX
      p = s->orelocation;
#else
      {
	/* Sort relocations before we write them out.  */
	bfd_size_type amt;

	amt = s->reloc_count;
	amt *= sizeof (arelent *);
	p = (arelent **) bfd_malloc (amt);
	if (p == NULL && s->reloc_count > 0)
	  return FALSE;
	memcpy (p, s->orelocation, (size_t) amt);
	qsort (p, s->reloc_count, sizeof (arelent *), compare_arelent_ptr);
      }
#endif

      if (bfd_seek (abfd, s->rel_filepos, SEEK_SET) != 0)
	return FALSE;

#ifdef COFF_WITH_PE
      if (obj_pe (abfd) && s->reloc_count >= 0xffff)
	{
	  /* Encode real count here as first reloc.  */
	  struct internal_reloc n;

	  memset ((PTR) & n, 0, sizeof (n));
	  /* Add one to count *this* reloc (grr).  */
	  n.r_vaddr = s->reloc_count + 1;
	  coff_swap_reloc_out (abfd, &n, &dst);
	  if (bfd_bwrite ((PTR) & dst, (bfd_size_type) bfd_coff_relsz (abfd),
			 abfd) != bfd_coff_relsz (abfd))
	    return FALSE;
	}
#endif

      for (i = 0; i < s->reloc_count; i++)
	{
	  struct internal_reloc n;
	  arelent *q = p[i];

	  memset ((PTR) & n, 0, sizeof (n));

	  /* Now we've renumbered the symbols we know where the
	     undefined symbols live in the table.  Check the reloc
	     entries for symbols who's output bfd isn't the right one.
	     This is because the symbol was undefined (which means
	     that all the pointers are never made to point to the same
	     place). This is a bad thing,'cause the symbols attached
	     to the output bfd are indexed, so that the relocation
	     entries know which symbol index they point to.  So we
	     have to look up the output symbol here.  */

	  if (q->sym_ptr_ptr[0]->the_bfd != abfd)
	    {
	      int j;
	      const char *sname = q->sym_ptr_ptr[0]->name;
	      asymbol **outsyms = abfd->outsymbols;

	      for (j = first_undef; outsyms[j]; j++)
		{
		  const char *intable = outsyms[j]->name;

		  if (strcmp (intable, sname) == 0) {
		    /* Got a hit, so repoint the reloc.  */
		    q->sym_ptr_ptr = outsyms + j;
		    break;
		  }
		}
	    }

	  n.r_vaddr = q->address + s->vma;

#ifdef R_IHCONST
	  /* The 29k const/consth reloc pair is a real kludge.  The consth
	     part doesn't have a symbol; it has an offset.  So rebuilt
	     that here.  */
	  if (q->howto->type == R_IHCONST)
	    n.r_symndx = q->addend;
	  else
#endif
	    if (q->sym_ptr_ptr)
	      {
#ifdef SECTION_RELATIVE_ABSOLUTE_SYMBOL_P
                if (SECTION_RELATIVE_ABSOLUTE_SYMBOL_P (q,s))
#else
		if ((*q->sym_ptr_ptr)->section == bfd_abs_section_ptr
		    && ((*q->sym_ptr_ptr)->flags & BSF_SECTION_SYM) != 0)
#endif
		  /* This is a relocation relative to the absolute symbol.  */
		  n.r_symndx = -1;
		else
		  {
		    n.r_symndx = get_index ((*(q->sym_ptr_ptr)));
		    /* Take notice if the symbol reloc points to a symbol
		       we don't have in our symbol table.  What should we
		       do for this??  */
		    if (n.r_symndx > obj_conv_table_size (abfd))
		      abort ();
		  }
	      }

#ifdef SWAP_OUT_RELOC_OFFSET
	  n.r_offset = q->addend;
#endif

#ifdef SELECT_RELOC
	  /* Work out reloc type from what is required.  */
	  SELECT_RELOC (n, q->howto);
#else
	  n.r_type = q->howto->type;
#endif
	  coff_swap_reloc_out (abfd, &n, &dst);

	  if (bfd_bwrite ((PTR) & dst, (bfd_size_type) bfd_coff_relsz (abfd),
			 abfd) != bfd_coff_relsz (abfd))
	    return FALSE;
	}

#ifdef TARG_AUX
      if (p != NULL)
	free (p);
#endif
    }

  return TRUE;
}

/* Set flags and magic number of a coff file from architecture and machine
   type.  Result is TRUE if we can represent the arch&type, FALSE if not.  */

static bfd_boolean
coff_set_flags (abfd, magicp, flagsp)
     bfd * abfd;
     unsigned int *magicp ATTRIBUTE_UNUSED;
     unsigned short *flagsp ATTRIBUTE_UNUSED;
{
  switch (bfd_get_arch (abfd))
    {
#ifdef Z8KMAGIC
    case bfd_arch_z8k:
      *magicp = Z8KMAGIC;
      switch (bfd_get_mach (abfd))
	{
	case bfd_mach_z8001:
	  *flagsp = F_Z8001;
	  break;
	case bfd_mach_z8002:
	  *flagsp = F_Z8002;
	  break;
	default:
	  return FALSE;
	}
      return TRUE;
#endif
#ifdef I960ROMAGIC

    case bfd_arch_i960:

      {
	unsigned flags;
	*magicp = I960ROMAGIC;
	/*
	  ((bfd_get_file_flags(abfd) & WP_TEXT) ? I960ROMAGIC :
	  I960RWMAGIC);   FIXME???
	  */
	switch (bfd_get_mach (abfd))
	  {
	  case bfd_mach_i960_core:
	    flags = F_I960CORE;
	    break;
	  case bfd_mach_i960_kb_sb:
	    flags = F_I960KB;
	    break;
	  case bfd_mach_i960_mc:
	    flags = F_I960MC;
	    break;
	  case bfd_mach_i960_xa:
	    flags = F_I960XA;
	    break;
	  case bfd_mach_i960_ca:
	    flags = F_I960CA;
	    break;
	  case bfd_mach_i960_ka_sa:
	    flags = F_I960KA;
	    break;
	  case bfd_mach_i960_jx:
	    flags = F_I960JX;
	    break;
	  case bfd_mach_i960_hx:
	    flags = F_I960HX;
	    break;
	  default:
	    return FALSE;
	  }
	*flagsp = flags;
	return TRUE;
      }
      break;
#endif

#ifdef TIC30MAGIC
    case bfd_arch_tic30:
      *magicp = TIC30MAGIC;
      return TRUE;
#endif

#ifdef TICOFF_DEFAULT_MAGIC
    case TICOFF_TARGET_ARCH:
      /* If there's no indication of which version we want, use the default.  */
      if (!abfd->xvec )
        *magicp = TICOFF_DEFAULT_MAGIC;
      else
        {
          /* We may want to output in a different COFF version.  */
          switch (abfd->xvec->name[4])
            {
            case '0':
              *magicp = TICOFF0MAGIC;
              break;
            case '1':
              *magicp = TICOFF1MAGIC;
              break;
            case '2':
              *magicp = TICOFF2MAGIC;
              break;
            default:
              return FALSE;
            }
        }
      TICOFF_TARGET_MACHINE_SET (flagsp, bfd_get_mach (abfd));
      return TRUE;
#endif

#ifdef TIC80_ARCH_MAGIC
    case bfd_arch_tic80:
      *magicp = TIC80_ARCH_MAGIC;
      return TRUE;
#endif
#ifdef ARMMAGIC
    case bfd_arch_arm:
#ifdef ARM_WINCE
      * magicp = ARMPEMAGIC;
#else
      * magicp = ARMMAGIC;
#endif
      * flagsp = 0;
      if (APCS_SET (abfd))
	{
	  if (APCS_26_FLAG (abfd))
	    * flagsp |= F_APCS26;

	  if (APCS_FLOAT_FLAG (abfd))
	    * flagsp |= F_APCS_FLOAT;

	  if (PIC_FLAG (abfd))
	    * flagsp |= F_PIC;
	}
      if (INTERWORK_SET (abfd) && INTERWORK_FLAG (abfd))
	* flagsp |= F_INTERWORK;
      switch (bfd_get_mach (abfd))
	{
	case bfd_mach_arm_2:  * flagsp |= F_ARM_2;  break;
	case bfd_mach_arm_2a: * flagsp |= F_ARM_2a; break;
	case bfd_mach_arm_3:  * flagsp |= F_ARM_3;  break;
	case bfd_mach_arm_3M: * flagsp |= F_ARM_3M; break;
	case bfd_mach_arm_4:  * flagsp |= F_ARM_4;  break;
	case bfd_mach_arm_4T: * flagsp |= F_ARM_4T; break;
	case bfd_mach_arm_5:  * flagsp |= F_ARM_5;  break;
	  /* FIXME: we do not have F_ARM vaues greater than F_ARM_5.
	     See also the comment in coff_set_arch_mach_hook().  */
	case bfd_mach_arm_5T: * flagsp |= F_ARM_5;  break;
	case bfd_mach_arm_5TE: * flagsp |= F_ARM_5; break;
	case bfd_mach_arm_XScale: * flagsp |= F_ARM_5; break;
	}
      return TRUE;
#endif
#ifdef PPCMAGIC
    case bfd_arch_powerpc:
      *magicp = PPCMAGIC;
      return TRUE;
      break;
#endif
#if defined(I386MAGIC) || defined(AMD64MAGIC)
    case bfd_arch_i386:
#if defined(I386MAGIC)
      *magicp = I386MAGIC;
#endif
#ifdef LYNXOS
      /* Just overwrite the usual value if we're doing Lynx.  */
      *magicp = LYNXCOFFMAGIC;
#endif
#if defined AMD64MAGIC
      *magicp = AMD64MAGIC;
#endif
      return TRUE;
      break;
#endif
#ifdef I860MAGIC
    case bfd_arch_i860:
      *magicp = I860MAGIC;
      return TRUE;
      break;
#endif
#ifdef IA64MAGIC
    case bfd_arch_ia64:
      *magicp = IA64MAGIC;
      return TRUE;
      break;
#endif
#ifdef MC68MAGIC
    case bfd_arch_m68k:
#ifdef APOLLOM68KMAGIC
      *magicp = APOLLO_COFF_VERSION_NUMBER;
#else
      /* NAMES_HAVE_UNDERSCORE may be defined by coff-u68k.c.  */
#ifdef NAMES_HAVE_UNDERSCORE
      *magicp = MC68KBCSMAGIC;
#else
      *magicp = MC68MAGIC;
#endif
#endif
#ifdef LYNXOS
      /* Just overwrite the usual value if we're doing Lynx.  */
      *magicp = LYNXCOFFMAGIC;
#endif
      return TRUE;
      break;
#endif

#ifdef MC88MAGIC
    case bfd_arch_m88k:
      *magicp = MC88OMAGIC;
      return TRUE;
      break;
#endif
#ifdef H8300MAGIC
    case bfd_arch_h8300:
      switch (bfd_get_mach (abfd))
	{
	case bfd_mach_h8300:
	  *magicp = H8300MAGIC;
	  return TRUE;
	case bfd_mach_h8300h:
	  *magicp = H8300HMAGIC;
	  return TRUE;
	case bfd_mach_h8300s:
	  *magicp = H8300SMAGIC;
	  return TRUE;
	case bfd_mach_h8300hn:
	  *magicp = H8300HNMAGIC;
	  return TRUE;
	case bfd_mach_h8300sn:
	  *magicp = H8300SNMAGIC;
	  return TRUE;
	}
      break;
#endif

#ifdef SH_ARCH_MAGIC_BIG
    case bfd_arch_sh:
#ifdef COFF_IMAGE_WITH_PE
      *magicp = SH_ARCH_MAGIC_WINCE;
#else
      if (bfd_big_endian (abfd))
	*magicp = SH_ARCH_MAGIC_BIG;
      else
	*magicp = SH_ARCH_MAGIC_LITTLE;
#endif
      return TRUE;
      break;
#endif

#ifdef MIPS_ARCH_MAGIC_WINCE
    case bfd_arch_mips:
      *magicp = MIPS_ARCH_MAGIC_WINCE;
      return TRUE;
      break;
#endif

#ifdef SPARCMAGIC
    case bfd_arch_sparc:
      *magicp = SPARCMAGIC;
#ifdef LYNXOS
      /* Just overwrite the usual value if we're doing Lynx.  */
      *magicp = LYNXCOFFMAGIC;
#endif
      return TRUE;
      break;
#endif

#ifdef H8500MAGIC
    case bfd_arch_h8500:
      *magicp = H8500MAGIC;
      return TRUE;
      break;
#endif
#ifdef A29K_MAGIC_BIG
    case bfd_arch_a29k:
      if (bfd_big_endian (abfd))
	*magicp = A29K_MAGIC_BIG;
      else
	*magicp = A29K_MAGIC_LITTLE;
      return TRUE;
      break;
#endif

#ifdef WE32KMAGIC
    case bfd_arch_we32k:
      *magicp = WE32KMAGIC;
      return TRUE;
      break;
#endif

#ifdef RS6000COFF_C
    case bfd_arch_rs6000:
#ifndef PPCMAGIC
    case bfd_arch_powerpc:
#endif
      BFD_ASSERT (bfd_get_flavour (abfd) == bfd_target_xcoff_flavour);
      *magicp = bfd_xcoff_magic_number (abfd);
      return TRUE;
      break;
#endif

#ifdef MCOREMAGIC
    case bfd_arch_mcore:
      * magicp = MCOREMAGIC;
      return TRUE;
#endif

#ifdef W65MAGIC
    case bfd_arch_w65:
      *magicp = W65MAGIC;
      return TRUE;
#endif

#ifdef OR32_MAGIC_BIG
    case bfd_arch_or32:
      if (bfd_big_endian (abfd))
        * magicp = OR32_MAGIC_BIG;
      else
        * magicp = OR32_MAGIC_LITTLE;
      return TRUE;
#endif

    default:			/* Unknown architecture.  */
      /* Fall through to "return FALSE" below, to avoid
	 "statement never reached" errors on the one below.  */
      break;
    }

  return FALSE;
}

static bfd_boolean
coff_set_arch_mach (abfd, arch, machine)
     bfd * abfd;
     enum bfd_architecture arch;
     unsigned long machine;
{
  unsigned dummy1;
  unsigned short dummy2;

  if (! bfd_default_set_arch_mach (abfd, arch, machine))
    return FALSE;

  if (arch != bfd_arch_unknown
      && ! coff_set_flags (abfd, &dummy1, &dummy2))
    return FALSE;		/* We can't represent this type */

  return TRUE;			/* We're easy ...  */
}

#ifdef COFF_IMAGE_WITH_PE

/* This is used to sort sections by VMA, as required by PE image
   files.  */

static int sort_by_secaddr PARAMS ((const PTR, const PTR));

static int
sort_by_secaddr (arg1, arg2)
     const PTR arg1;
     const PTR arg2;
{
  const asection *a = *(const asection **) arg1;
  const asection *b = *(const asection **) arg2;

  if (a->vma < b->vma)
    return -1;
  else if (a->vma > b->vma)
    return 1;
  else
    return 0;
}

#endif /* COFF_IMAGE_WITH_PE */

/* Calculate the file position for each section.  */

#ifndef I960
#define ALIGN_SECTIONS_IN_FILE
#endif
#if defined(TIC80COFF) || defined(TICOFF)
#undef ALIGN_SECTIONS_IN_FILE
#endif

static bfd_boolean
coff_compute_section_file_positions (abfd)
     bfd * abfd;
{
  asection *current;
  asection *previous = (asection *) NULL;
  file_ptr sofar = bfd_coff_filhsz (abfd);
  bfd_boolean align_adjust;
#ifdef ALIGN_SECTIONS_IN_FILE
  file_ptr old_sofar;
#endif

#ifdef RS6000COFF_C
  /* On XCOFF, if we have symbols, set up the .debug section.  */
  if (bfd_get_symcount (abfd) > 0)
    {
      bfd_size_type sz;
      bfd_size_type i, symcount;
      asymbol **symp;

      sz = 0;
      symcount = bfd_get_symcount (abfd);
      for (symp = abfd->outsymbols, i = 0; i < symcount; symp++, i++)
	{
	  coff_symbol_type *cf;

	  cf = coff_symbol_from (abfd, *symp);
	  if (cf != NULL
	      && cf->native != NULL
	      && SYMNAME_IN_DEBUG (&cf->native->u.syment))
	    {
	      size_t len;

	      len = strlen (bfd_asymbol_name (*symp));
	      if (len > SYMNMLEN || bfd_coff_force_symnames_in_strings (abfd))
		sz += len + 1 + bfd_coff_debug_string_prefix_length (abfd);
	    }
	}
      if (sz > 0)
	{
	  asection *dsec;

	  dsec = bfd_make_section_old_way (abfd, ".debug");
	  if (dsec == NULL)
	    abort ();
	  dsec->_raw_size = sz;
	  dsec->flags |= SEC_HAS_CONTENTS;
	}
    }
#endif

#ifdef COFF_IMAGE_WITH_PE
  int page_size;
  if (coff_data (abfd)->link_info)
    {
      page_size = pe_data (abfd)->pe_opthdr.FileAlignment;

      /* If no file alignment has been set, default to one.
	 This repairs 'ld -r' for arm-wince-pe target.  */
      if (page_size == 0)
        page_size = 1;
    }
  else
    page_size = PE_DEF_FILE_ALIGNMENT;
#else
#ifdef COFF_PAGE_SIZE
  int page_size = COFF_PAGE_SIZE;
#endif
#endif

  if (bfd_get_start_address (abfd))
    {
      /*  A start address may have been added to the original file. In this
	  case it will need an optional header to record it.  */
      abfd->flags |= EXEC_P;
    }

  if (abfd->flags & EXEC_P)
    sofar += bfd_coff_aoutsz (abfd);
#ifdef RS6000COFF_C
  else if (xcoff_data (abfd)->full_aouthdr)
    sofar += bfd_coff_aoutsz (abfd);
  else
    sofar += SMALL_AOUTSZ;
#endif

  sofar += abfd->section_count * bfd_coff_scnhsz (abfd);

#ifdef RS6000COFF_C
  /* XCOFF handles overflows in the reloc and line number count fields
     by allocating a new section header to hold the correct counts.  */
  for (current = abfd->sections; current != NULL; current = current->next)
    if (current->reloc_count >= 0xffff || current->lineno_count >= 0xffff)
      sofar += bfd_coff_scnhsz (abfd);
#endif

#ifdef COFF_IMAGE_WITH_PE
  {
    /* PE requires the sections to be in memory order when listed in
       the section headers.  It also does not like empty loadable
       sections.  The sections apparently do not have to be in the
       right order in the image file itself, but we do need to get the
       target_index values right.  */

    unsigned int count;
    asection **section_list;
    unsigned int i;
    int target_index;
    bfd_size_type amt;

    count = 0;
    for (current = abfd->sections; current != NULL; current = current->next)
      ++count;

    /* We allocate an extra cell to simplify the final loop.  */
    amt = sizeof (struct asection *) * (count + 1);
    section_list = bfd_malloc (amt);
    if (section_list == NULL)
      return FALSE;

    i = 0;
    for (current = abfd->sections; current != NULL; current = current->next)
      {
	section_list[i] = current;
	++i;
      }
    section_list[i] = NULL;

    qsort (section_list, count, sizeof (asection *), sort_by_secaddr);

    /* Rethread the linked list into sorted order; at the same time,
       assign target_index values.  */
    target_index = 1;
    abfd->sections = section_list[0];
    for (i = 0; i < count; i++)
      {
	current = section_list[i];
	current->next = section_list[i + 1];

	/* Later, if the section has zero size, we'll be throwing it
	   away, so we don't want to number it now.  Note that having
	   a zero size and having real contents are different
	   concepts: .bss has no contents, but (usually) non-zero
	   size.  */
	if (current->_raw_size == 0)
	  {
	    /* Discard.  However, it still might have (valid) symbols
	       in it, so arbitrarily set it to section 1 (indexing is
	       1-based here; usually .text).  __end__ and other
	       contents of .endsection really have this happen.
	       FIXME: This seems somewhat dubious.  */
	    current->target_index = 1;
	  }
	else
	  current->target_index = target_index++;
      }
    abfd->section_tail = &current->next;

    free (section_list);
  }
#else /* ! COFF_IMAGE_WITH_PE */
  {
    /* Set the target_index field.  */
    int target_index;

    target_index = 1;
    for (current = abfd->sections; current != NULL; current = current->next)
      current->target_index = target_index++;
  }
#endif /* ! COFF_IMAGE_WITH_PE */

  align_adjust = FALSE;
  for (current = abfd->sections;
       current != (asection *) NULL;
       current = current->next)
    {
#ifdef COFF_IMAGE_WITH_PE
      /* With PE we have to pad each section to be a multiple of its
	 page size too, and remember both sizes.  */
      if (coff_section_data (abfd, current) == NULL)
	{
	  bfd_size_type amt = sizeof (struct coff_section_tdata);
	  current->used_by_bfd = (PTR) bfd_zalloc (abfd, amt);
	  if (current->used_by_bfd == NULL)
	    return FALSE;
	}
      if (pei_section_data (abfd, current) == NULL)
	{
	  bfd_size_type amt = sizeof (struct pei_section_tdata);
	  coff_section_data (abfd, current)->tdata
	    = (PTR) bfd_zalloc (abfd, amt);
	  if (coff_section_data (abfd, current)->tdata == NULL)
	    return FALSE;
	}
      if (pei_section_data (abfd, current)->virt_size == 0)
	pei_section_data (abfd, current)->virt_size = current->_raw_size;
#endif

      /* Only deal with sections which have contents.  */
      if (!(current->flags & SEC_HAS_CONTENTS))
	continue;

#ifdef COFF_IMAGE_WITH_PE
      /* Make sure we skip empty sections in a PE image.  */
      if (current->_raw_size == 0)
	continue;
#endif

      /* Align the sections in the file to the same boundary on
	 which they are aligned in virtual memory.  I960 doesn't
	 do this (FIXME) so we can stay in sync with Intel.  960
	 doesn't yet page from files...  */
#ifdef ALIGN_SECTIONS_IN_FILE
      if ((abfd->flags & EXEC_P) != 0)
	{
	  /* Make sure this section is aligned on the right boundary - by
	     padding the previous section up if necessary.  */

	  old_sofar = sofar;
#ifdef RS6000COFF_C
	  /* AIX loader checks the text section alignment of (vma - filepos)
	     So even though the filepos may be aligned wrt the o_algntext, for
	     AIX executables, this check fails. This shows up when a native
	     AIX executable is stripped with gnu strip because the default vma
	     of native is 0x10000150 but default for gnu is 0x10000140.  Gnu
	     stripped gnu excutable passes this check because the filepos is
	     0x0140.  This problem also show up with 64 bit shared objects. The
	     data section must also be aligned.  */
	  if (!strcmp (current->name, _TEXT)
	      || !strcmp (current->name, _DATA))
	    {
	      bfd_vma pad;
	      bfd_vma align;

	      sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);

	      align = 1 << current->alignment_power;
	      pad = abs (current->vma - sofar) % align;

	      if (pad)
		{
		  pad = align - pad;
		  sofar += pad;
		}
	    }
	  else
#else
	    {
	      sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);
	    }
#endif
	  if (previous != (asection *) NULL)
	    previous->_raw_size += sofar - old_sofar;
	}

#endif

      /* In demand paged files the low order bits of the file offset
	 must match the low order bits of the virtual address.  */
#ifdef COFF_PAGE_SIZE
      if ((abfd->flags & D_PAGED) != 0
	  && (current->flags & SEC_ALLOC) != 0)
	sofar += (current->vma - sofar) % page_size;
#endif
      current->filepos = sofar;

#ifdef COFF_IMAGE_WITH_PE
      /* Set the padded size.  */
      current->_raw_size = (current->_raw_size + page_size -1) & -page_size;
#endif

      sofar += current->_raw_size;

#ifdef ALIGN_SECTIONS_IN_FILE
      /* Make sure that this section is of the right size too.  */
      if ((abfd->flags & EXEC_P) == 0)
	{
	  bfd_size_type old_size;

	  old_size = current->_raw_size;
	  current->_raw_size = BFD_ALIGN (current->_raw_size,
					  1 << current->alignment_power);
	  align_adjust = current->_raw_size != old_size;
	  sofar += current->_raw_size - old_size;
	}
      else
	{
	  old_sofar = sofar;
	  sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);
	  align_adjust = sofar != old_sofar;
	  current->_raw_size += sofar - old_sofar;
	}
#endif

#ifdef COFF_IMAGE_WITH_PE
      /* For PE we need to make sure we pad out to the aligned
         _raw_size, in case the caller only writes out data to the
         unaligned _raw_size.  */
      if (pei_section_data (abfd, current)->virt_size < current->_raw_size)
	align_adjust = TRUE;
#endif

#ifdef _LIB
      /* Force .lib sections to start at zero.  The vma is then
	 incremented in coff_set_section_contents.  This is right for
	 SVR3.2.  */
      if (strcmp (current->name, _LIB) == 0)
	bfd_set_section_vma (abfd, current, 0);
#endif

      previous = current;
    }

  /* It is now safe to write to the output file.  If we needed an
     alignment adjustment for the last section, then make sure that
     there is a byte at offset sofar.  If there are no symbols and no
     relocs, then nothing follows the last section.  If we don't force
     the last byte out, then the file may appear to be truncated.  */
  if (align_adjust)
    {
      bfd_byte b;

      b = 0;
      if (bfd_seek (abfd, sofar - 1, SEEK_SET) != 0
	  || bfd_bwrite (&b, (bfd_size_type) 1, abfd) != 1)
	return FALSE;
    }

  /* Make sure the relocations are aligned.  We don't need to make
     sure that this byte exists, because it will only matter if there
     really are relocs.  */
  sofar = BFD_ALIGN (sofar, 1 << COFF_DEFAULT_SECTION_ALIGNMENT_POWER);

  obj_relocbase (abfd) = sofar;
  abfd->output_has_begun = TRUE;

  return TRUE;
}

#if 0

/* This can never work, because it is called too late--after the
   section positions have been set.  I can't figure out what it is
   for, so I am going to disable it--Ian Taylor 20 March 1996.  */

/* If .file, .text, .data, .bss symbols are missing, add them.  */
/* @@@@ Should we only be adding missing symbols, or overriding the aux
   values for existing section symbols?  */
static bfd_boolean
coff_add_missing_symbols (abfd)
     bfd *abfd;
{
  unsigned int nsyms = bfd_get_symcount (abfd);
  asymbol **sympp = abfd->outsymbols;
  asymbol **sympp2;
  unsigned int i;
  int need_text = 1, need_data = 1, need_bss = 1, need_file = 1;
  bfd_size_type amt;

  for (i = 0; i < nsyms; i++)
    {
      coff_symbol_type *csym = coff_symbol_from (abfd, sympp[i]);
      const char *name;

      if (csym)
	{
	  /* Only do this if there is a coff representation of the input
	     symbol.  */
	  if (csym->native && csym->native->u.syment.n_sclass == C_FILE)
	    {
	      need_file = 0;
	      continue;
	    }
	  name = csym->symbol.name;
	  if (!name)
	    continue;
	  if (!strcmp (name, _TEXT))
	    need_text = 0;
#ifdef APOLLO_M68
	  else if (!strcmp (name, ".wtext"))
	    need_text = 0;
#endif
	  else if (!strcmp (name, _DATA))
	    need_data = 0;
	  else if (!strcmp (name, _BSS))
	    need_bss = 0;
	}
    }
  /* Now i == bfd_get_symcount (abfd).  */
  /* @@@@ For now, don't deal with .file symbol.  */
  need_file = 0;

  if (!need_text && !need_data && !need_bss && !need_file)
    return TRUE;
  nsyms += need_text + need_data + need_bss + need_file;
  amt = nsyms;
  amt *= sizeof (asymbol *);
  sympp2 = (asymbol **) bfd_alloc (abfd, amt);
  if (!sympp2)
    return FALSE;
  memcpy (sympp2, sympp, i * sizeof (asymbol *));

  if (need_file)
    /* @@@@ Generate fake .file symbol, in sympp2[i], and increment i.  */
    abort ();

  if (need_text)
    sympp2[i++] = coff_section_symbol (abfd, _TEXT);
  if (need_data)
    sympp2[i++] = coff_section_symbol (abfd, _DATA);
  if (need_bss)
    sympp2[i++] = coff_section_symbol (abfd, _BSS);
  BFD_ASSERT (i == nsyms);
  bfd_set_symtab (abfd, sympp2, nsyms);
  return TRUE;
}

#endif /* 0 */

#ifdef COFF_IMAGE_WITH_PE

static unsigned int pelength;
static unsigned int peheader;

static bfd_boolean
coff_read_word (abfd, value)
  bfd *abfd;
  unsigned int *value;
{
  unsigned char b[2];
  int status;

  status = bfd_bread (b, (bfd_size_type) 2, abfd);
  if (status < 1)
    {
      *value = 0;
      return FALSE;
    }

  if (status == 1)
    *value = (unsigned int) b[0];
  else
    *value = (unsigned int) (b[0] + (b[1] << 8));

  pelength += (unsigned int) status;

  return TRUE;
}

static unsigned int
coff_compute_checksum (abfd)
  bfd *abfd;
{
  bfd_boolean more_data;
  file_ptr filepos;
  unsigned int value;
  unsigned int total;

  total = 0;
  pelength = 0;
  filepos = (file_ptr) 0;

  do
    {
      if (bfd_seek (abfd, filepos, SEEK_SET) != 0)
	return 0;

      more_data = coff_read_word (abfd, &value);
      total += value;
      total = 0xffff & (total + (total >> 0x10));
      filepos += 2;
    }
  while (more_data);

  return (0xffff & (total + (total >> 0x10)));
}

static bfd_boolean
coff_apply_checksum (abfd)
  bfd *abfd;
{
  unsigned int computed;
  unsigned int checksum = 0;

  if (bfd_seek (abfd, 0x3c, SEEK_SET) != 0)
    return FALSE;

  if (!coff_read_word (abfd, &peheader))
    return FALSE;

  if (bfd_seek (abfd, peheader + 0x58, SEEK_SET) != 0)
    return FALSE;

  checksum = 0;
  bfd_bwrite (&checksum, (bfd_size_type) 4, abfd);

  if (bfd_seek (abfd, peheader, SEEK_SET) != 0)
    return FALSE;

  computed = coff_compute_checksum (abfd);

  checksum = computed + pelength;

  if (bfd_seek (abfd, peheader + 0x58, SEEK_SET) != 0)
    return FALSE;

  bfd_bwrite (&checksum, (bfd_size_type) 4, abfd);

  return TRUE;
}

#endif /* COFF_IMAGE_WITH_PE */

/* SUPPRESS 558 */
/* SUPPRESS 529 */
static bfd_boolean
coff_write_object_contents (abfd)
     bfd * abfd;
{
  asection *current;
  bfd_boolean hasrelocs = FALSE;
  bfd_boolean haslinno = FALSE;
  bfd_boolean hasdebug = FALSE;
  file_ptr scn_base;
  file_ptr reloc_base;
  file_ptr lineno_base;
  file_ptr sym_base;
  unsigned long reloc_size = 0, reloc_count = 0;
  unsigned long lnno_size = 0;
  bfd_boolean long_section_names;
  asection *text_sec = NULL;
  asection *data_sec = NULL;
  asection *bss_sec = NULL;
  struct internal_filehdr internal_f;
  struct internal_aouthdr internal_a;
#ifdef COFF_LONG_SECTION_NAMES
  size_t string_size = STRING_SIZE_SIZE;
#endif

  bfd_set_error (bfd_error_system_call);

  /* Make a pass through the symbol table to count line number entries and
     put them into the correct asections.  */

  lnno_size = coff_count_linenumbers (abfd) * bfd_coff_linesz (abfd);

  if (! abfd->output_has_begun)
    {
      if (! coff_compute_section_file_positions (abfd))
	return FALSE;
    }

  reloc_base = obj_relocbase (abfd);

  /* Work out the size of the reloc and linno areas.  */

  for (current = abfd->sections; current != NULL; current =
       current->next)
    {
#ifdef COFF_WITH_PE
      /* We store the actual reloc count in the first reloc's addr.  */
      if (obj_pe (abfd) && current->reloc_count >= 0xffff)
	reloc_count ++;
#endif
      reloc_count += current->reloc_count;
    }

  reloc_size = reloc_count * bfd_coff_relsz (abfd);

  lineno_base = reloc_base + reloc_size;
  sym_base = lineno_base + lnno_size;

  /* Indicate in each section->line_filepos its actual file address.  */
  for (current = abfd->sections; current != NULL; current =
       current->next)
    {
      if (current->lineno_count)
	{
	  current->line_filepos = lineno_base;
	  current->moving_line_filepos = lineno_base;
	  lineno_base += current->lineno_count * bfd_coff_linesz (abfd);
	}
      else
	{
	  current->line_filepos = 0;
	}
      if (current->reloc_count)
	{
	  current->rel_filepos = reloc_base;
	  reloc_base += current->reloc_count * bfd_coff_relsz (abfd);
#ifdef COFF_WITH_PE
	  /* Extra reloc to hold real count.  */
	  if (obj_pe (abfd) && current->reloc_count >= 0xffff)
	    reloc_base += bfd_coff_relsz (abfd);
#endif
	}
      else
	{
	  current->rel_filepos = 0;
	}
    }

  /* Write section headers to the file.  */
  internal_f.f_nscns = 0;

  if ((abfd->flags & EXEC_P) != 0)
    scn_base = bfd_coff_filhsz (abfd) + bfd_coff_aoutsz (abfd);
  else
    {
      scn_base = bfd_coff_filhsz (abfd);
#ifdef RS6000COFF_C
#ifndef XCOFF64
      if (xcoff_data (abfd)->full_aouthdr)
	scn_base += bfd_coff_aoutsz (abfd);
      else
	scn_base += SMALL_AOUTSZ;
#endif
#endif
    }

  if (bfd_seek (abfd, scn_base, SEEK_SET) != 0)
    return FALSE;

  long_section_names = FALSE;
  for (current = abfd->sections;
       current != NULL;
       current = current->next)
    {
      struct internal_scnhdr section;
      bfd_boolean is_reloc_section = FALSE;

#ifdef COFF_IMAGE_WITH_PE
      if (strcmp (current->name, ".reloc") == 0)
	{
	  is_reloc_section = TRUE;
	  hasrelocs = TRUE;
	  pe_data (abfd)->has_reloc_section = 1;
	}
#endif

      internal_f.f_nscns++;

      strncpy (section.s_name, current->name, SCNNMLEN);

#ifdef COFF_LONG_SECTION_NAMES
      /* Handle long section names as in PE.  This must be compatible
         with the code in coff_write_symbols and _bfd_coff_final_link.  */
      {
	size_t len;

	len = strlen (current->name);
	if (len > SCNNMLEN)
	  {
	    memset (section.s_name, 0, SCNNMLEN);
	    sprintf (section.s_name, "/%lu", (unsigned long) string_size);
	    string_size += len + 1;
	    long_section_names = TRUE;
	  }
      }
#endif

#ifdef _LIB
      /* Always set s_vaddr of .lib to 0.  This is right for SVR3.2
	 Ian Taylor <ian@@cygnus.com>.  */
      if (strcmp (current->name, _LIB) == 0)
	section.s_vaddr = 0;
      else
#endif
      section.s_vaddr = current->vma;
      section.s_paddr = current->lma;
      section.s_size =  current->_raw_size;
#ifdef coff_get_section_load_page
      section.s_page = coff_get_section_load_page (current);
#endif

#ifdef COFF_WITH_PE
      section.s_paddr = 0;
#endif
#ifdef COFF_IMAGE_WITH_PE
      /* Reminder: s_paddr holds the virtual size of the section.  */
      if (coff_section_data (abfd, current) != NULL
	  && pei_section_data (abfd, current) != NULL)
	section.s_paddr = pei_section_data (abfd, current)->virt_size;
      else
	section.s_paddr = 0;
#endif

      /* If this section has no size or is unloadable then the scnptr
	 will be 0 too.  */
      if (current->_raw_size == 0 ||
	  (current->flags & (SEC_LOAD | SEC_HAS_CONTENTS)) == 0)
	section.s_scnptr = 0;
      else
	section.s_scnptr = current->filepos;

      section.s_relptr = current->rel_filepos;
      section.s_lnnoptr = current->line_filepos;
      section.s_nreloc = current->reloc_count;
      section.s_nlnno = current->lineno_count;
#ifndef COFF_IMAGE_WITH_PE
      /* In PEI, relocs come in the .reloc section.  */
      if (current->reloc_count != 0)
	hasrelocs = TRUE;
#endif
      if (current->lineno_count != 0)
	haslinno = TRUE;
      if ((current->flags & SEC_DEBUGGING) != 0
	  && ! is_reloc_section)
	hasdebug = TRUE;

#ifdef RS6000COFF_C
#ifndef XCOFF64
      /* Indicate the use of an XCOFF overflow section header.  */
      if (current->reloc_count >= 0xffff || current->lineno_count >= 0xffff)
	{
	  section.s_nreloc = 0xffff;
	  section.s_nlnno = 0xffff;
	}
#endif
#endif

      section.s_flags = sec_to_styp_flags (current->name, current->flags);

      if (!strcmp (current->name, _TEXT))
	text_sec = current;
      else if (!strcmp (current->name, _DATA))
	data_sec = current;
      else if (!strcmp (current->name, _BSS))
	bss_sec = current;

#ifdef I960
      section.s_align = (current->alignment_power
			 ? 1 << current->alignment_power
			 : 0);
#endif
#ifdef TIC80COFF
      /* TI COFF puts the alignment power in bits 8-11 of the flags.  */
      section.s_flags |= (current->alignment_power & 0xF) << 8;
#endif
#ifdef COFF_ENCODE_ALIGNMENT
      COFF_ENCODE_ALIGNMENT(section, current->alignment_power);
#endif

#ifdef COFF_IMAGE_WITH_PE
      /* Suppress output of the sections if they are null.  ld
	 includes the bss and data sections even if there is no size
	 assigned to them.  NT loader doesn't like it if these section
	 headers are included if the sections themselves are not
	 needed.  See also coff_compute_section_file_positions.  */
      if (section.s_size == 0)
	internal_f.f_nscns--;
      else
#endif
	{
	  SCNHDR buff;
	  bfd_size_type amt = bfd_coff_scnhsz (abfd);

	  if (coff_swap_scnhdr_out (abfd, &section, &buff) == 0
	      || bfd_bwrite ((PTR) &buff, amt, abfd) != amt)
	    return FALSE;
	}

#ifdef COFF_WITH_PE
      /* PE stores COMDAT section information in the symbol table.  If
         this section is supposed to have some COMDAT info, track down
         the symbol in the symbol table and modify it.  */
      if ((current->flags & SEC_LINK_ONCE) != 0)
	{
	  unsigned int i, count;
	  asymbol **psym;
	  coff_symbol_type *csym = NULL;
	  asymbol **psymsec;

	  psymsec = NULL;
	  count = bfd_get_symcount (abfd);
	  for (i = 0, psym = abfd->outsymbols; i < count; i++, psym++)
	    {
	      if ((*psym)->section != current)
		continue;

	      /* Remember the location of the first symbol in this
                 section.  */
	      if (psymsec == NULL)
		psymsec = psym;

	      /* See if this is the section symbol.  */
	      if (strcmp ((*psym)->name, current->name) == 0)
		{
		  csym = coff_symbol_from (abfd, *psym);
		  if (csym == NULL
		      || csym->native == NULL
		      || csym->native->u.syment.n_numaux < 1
		      || csym->native->u.syment.n_sclass != C_STAT
		      || csym->native->u.syment.n_type != T_NULL)
		    continue;

		  /* Here *PSYM is the section symbol for CURRENT.  */

		  break;
		}
	    }

	  /* Did we find it?
	     Note that we might not if we're converting the file from
	     some other object file format.  */
	  if (i < count)
	    {
	      combined_entry_type *aux;

	      /* We don't touch the x_checksum field.  The
		 x_associated field is not currently supported.  */

	      aux = csym->native + 1;
	      switch (current->flags & SEC_LINK_DUPLICATES)
		{
		case SEC_LINK_DUPLICATES_DISCARD:
		  aux->u.auxent.x_scn.x_comdat = IMAGE_COMDAT_SELECT_ANY;
		  break;

		case SEC_LINK_DUPLICATES_ONE_ONLY:
		  aux->u.auxent.x_scn.x_comdat =
		    IMAGE_COMDAT_SELECT_NODUPLICATES;
		  break;

		case SEC_LINK_DUPLICATES_SAME_SIZE:
		  aux->u.auxent.x_scn.x_comdat =
		    IMAGE_COMDAT_SELECT_SAME_SIZE;
		  break;

		case SEC_LINK_DUPLICATES_SAME_CONTENTS:
		  aux->u.auxent.x_scn.x_comdat =
		    IMAGE_COMDAT_SELECT_EXACT_MATCH;
		  break;
		}

	      /* The COMDAT symbol must be the first symbol from this
                 section in the symbol table.  In order to make this
                 work, we move the COMDAT symbol before the first
                 symbol we found in the search above.  It's OK to
                 rearrange the symbol table at this point, because
                 coff_renumber_symbols is going to rearrange it
                 further and fix up all the aux entries.  */
	      if (psym != psymsec)
		{
		  asymbol *hold;
		  asymbol **pcopy;

		  hold = *psym;
		  for (pcopy = psym; pcopy > psymsec; pcopy--)
		    pcopy[0] = pcopy[-1];
		  *psymsec = hold;
		}
	    }
	}
#endif /* COFF_WITH_PE */
    }

#ifdef RS6000COFF_C
#ifndef XCOFF64
  /* XCOFF handles overflows in the reloc and line number count fields
     by creating a new section header to hold the correct values.  */
  for (current = abfd->sections; current != NULL; current = current->next)
    {
      if (current->reloc_count >= 0xffff || current->lineno_count >= 0xffff)
	{
	  struct internal_scnhdr scnhdr;
	  SCNHDR buff;
	  bfd_size_type amt;

	  internal_f.f_nscns++;
	  strncpy (&(scnhdr.s_name[0]), current->name, 8);
	  scnhdr.s_paddr = current->reloc_count;
	  scnhdr.s_vaddr = current->lineno_count;
	  scnhdr.s_size = 0;
	  scnhdr.s_scnptr = 0;
	  scnhdr.s_relptr = current->rel_filepos;
	  scnhdr.s_lnnoptr = current->line_filepos;
	  scnhdr.s_nreloc = current->target_index;
	  scnhdr.s_nlnno = current->target_index;
	  scnhdr.s_flags = STYP_OVRFLO;
	  amt = bfd_coff_scnhsz (abfd);
	  if (coff_swap_scnhdr_out (abfd, &scnhdr, &buff) == 0
	      || bfd_bwrite ((PTR) &buff, amt, abfd) != amt)
	    return FALSE;
	}
    }
#endif
#endif

  /* OK, now set up the filehdr...  */

  /* Don't include the internal abs section in the section count */

  /* We will NOT put a fucking timestamp in the header here. Every time you
     put it back, I will come in and take it out again.  I'm sorry.  This
     field does not belong here.  We fill it with a 0 so it compares the
     same but is not a reasonable time. -- gnu@@cygnus.com  */
  internal_f.f_timdat = 0;
  internal_f.f_flags = 0;

  if (abfd->flags & EXEC_P)
    internal_f.f_opthdr = bfd_coff_aoutsz (abfd);
  else
    {
      internal_f.f_opthdr = 0;
#ifdef RS6000COFF_C
#ifndef XCOFF64
      if (xcoff_data (abfd)->full_aouthdr)
	internal_f.f_opthdr = bfd_coff_aoutsz (abfd);
      else
	internal_f.f_opthdr = SMALL_AOUTSZ;
#endif
#endif
    }

  if (!hasrelocs)
    internal_f.f_flags |= F_RELFLG;
  if (!haslinno)
    internal_f.f_flags |= F_LNNO;
  if (abfd->flags & EXEC_P)
    internal_f.f_flags |= F_EXEC;
#ifdef COFF_IMAGE_WITH_PE
  if (! hasdebug)
    internal_f.f_flags |= IMAGE_FILE_DEBUG_STRIPPED;
#endif

#ifndef COFF_WITH_pex64
#ifdef COFF_WITH_PE
  internal_f.f_flags |= IMAGE_FILE_32BIT_MACHINE;
#else
  if (bfd_little_endian (abfd))
    internal_f.f_flags |= F_AR32WR;
  else
    internal_f.f_flags |= F_AR32W;
#endif
#endif

#ifdef TI_TARGET_ID
  /* Target id is used in TI COFF v1 and later; COFF0 won't use this field,
     but it doesn't hurt to set it internally.  */
  internal_f.f_target_id = TI_TARGET_ID;
#endif
#ifdef TIC80_TARGET_ID
  internal_f.f_target_id = TIC80_TARGET_ID;
#endif

  /* FIXME, should do something about the other byte orders and
     architectures.  */

#ifdef RS6000COFF_C
  if ((abfd->flags & DYNAMIC) != 0)
    internal_f.f_flags |= F_SHROBJ;
  if (bfd_get_section_by_name (abfd, _LOADER) != NULL)
    internal_f.f_flags |= F_DYNLOAD;
#endif

  memset (&internal_a, 0, sizeof internal_a);

  /* Set up architecture-dependent stuff.  */
  {
    unsigned int magic = 0;
    unsigned short flags = 0;

    coff_set_flags (abfd, &magic, &flags);
    internal_f.f_magic = magic;
    internal_f.f_flags |= flags;
    /* ...and the "opt"hdr...  */

#ifdef A29K
#ifdef ULTRA3			/* NYU's machine */
    /* FIXME: This is a bogus check.  I really want to see if there
       is a .shbss or a .shdata section, if so then set the magic
       number to indicate a shared data executable.  */
    if (internal_f.f_nscns >= 7)
      internal_a.magic = SHMAGIC; /* Shared magic.  */
    else
#endif /* ULTRA3 */
      internal_a.magic = NMAGIC; /* Assume separate i/d.  */
#define __A_MAGIC_SET__
#endif /* A29K */
#ifdef TICOFF_AOUT_MAGIC
    internal_a.magic = TICOFF_AOUT_MAGIC;
#define __A_MAGIC_SET__
#endif
#ifdef TIC80COFF
    internal_a.magic = TIC80_ARCH_MAGIC;
#define __A_MAGIC_SET__
#endif /* TIC80 */
#ifdef I860
    /* FIXME: What are the a.out magic numbers for the i860?  */
    internal_a.magic = 0;
#define __A_MAGIC_SET__
#endif /* I860 */
#ifdef I960
    internal_a.magic = (magic == I960ROMAGIC ? NMAGIC : OMAGIC);
#define __A_MAGIC_SET__
#endif /* I960 */
#if M88
#define __A_MAGIC_SET__
    internal_a.magic = PAGEMAGICBCS;
#endif /* M88 */

#if APOLLO_M68
#define __A_MAGIC_SET__
    internal_a.magic = APOLLO_COFF_VERSION_NUMBER;
#endif

#if defined(M68) || defined(WE32K) || defined(M68K)
#define __A_MAGIC_SET__
#if defined(LYNXOS)
    internal_a.magic = LYNXCOFFMAGIC;
#else
#if defined(TARG_AUX)
    internal_a.magic = (abfd->flags & D_PAGED ? PAGEMAGICPEXECPAGED :
			abfd->flags & WP_TEXT ? PAGEMAGICPEXECSWAPPED :
			PAGEMAGICEXECSWAPPED);
#else
#if defined (PAGEMAGICPEXECPAGED)
    internal_a.magic = PAGEMAGICPEXECPAGED;
#endif
#endif /* TARG_AUX */
#endif /* LYNXOS */
#endif /* M68 || WE32K || M68K */

#if defined(ARM)
#define __A_MAGIC_SET__
    internal_a.magic = ZMAGIC;
#endif

#if defined(PPC_PE)
#define __A_MAGIC_SET__
    internal_a.magic = IMAGE_NT_OPTIONAL_HDR_MAGIC;
#endif

#if defined MCORE_PE
#define __A_MAGIC_SET__
    internal_a.magic = IMAGE_NT_OPTIONAL_HDR_MAGIC;
#endif

#if defined(I386)
#define __A_MAGIC_SET__
#if defined(LYNXOS)
    internal_a.magic = LYNXCOFFMAGIC;
#elif defined AMD64
    internal_a.magic = IMAGE_NT_OPTIONAL_HDR64_MAGIC;
#else  /* LYNXOS */
    internal_a.magic = ZMAGIC;
#endif /* LYNXOS */
#endif /* I386 */

#if defined(IA64)
#define __A_MAGIC_SET__
    internal_a.magic = ZMAGIC;
#endif /* IA64 */

#if defined(SPARC)
#define __A_MAGIC_SET__
#if defined(LYNXOS)
    internal_a.magic = LYNXCOFFMAGIC;
#endif /* LYNXOS */
#endif /* SPARC */

#ifdef RS6000COFF_C
#define __A_MAGIC_SET__
    internal_a.magic = (abfd->flags & D_PAGED) ? RS6K_AOUTHDR_ZMAGIC :
    (abfd->flags & WP_TEXT) ? RS6K_AOUTHDR_NMAGIC :
    RS6K_AOUTHDR_OMAGIC;
#endif

#if defined(SH) && defined(COFF_WITH_PE)
#define __A_MAGIC_SET__
    internal_a.magic = SH_PE_MAGIC;
#endif

#if defined(MIPS) && defined(COFF_WITH_PE)
#define __A_MAGIC_SET__
    internal_a.magic = MIPS_PE_MAGIC;
#endif

#ifdef OR32
#define __A_MAGIC_SET__
    internal_a.magic = NMAGIC; /* Assume separate i/d.  */
#endif

#ifndef __A_MAGIC_SET__
#include "Your aouthdr magic number is not being set!"
#else
#undef __A_MAGIC_SET__
#endif
  }

  /* FIXME: Does anybody ever set this to another value?  */
  internal_a.vstamp = 0;

  /* Now should write relocs, strings, syms.  */
  obj_sym_filepos (abfd) = sym_base;

  if (bfd_get_symcount (abfd) != 0)
    {
      int firstundef;
#if 0
      if (!coff_add_missing_symbols (abfd))
	return FALSE;
#endif
      if (!coff_renumber_symbols (abfd, &firstundef))
	return FALSE;
      coff_mangle_symbols (abfd);
      if (! coff_write_symbols (abfd))
	return FALSE;
      if (! coff_write_linenumbers (abfd))
	return FALSE;
      if (! coff_write_relocs (abfd, firstundef))
	return FALSE;
    }
#ifdef COFF_LONG_SECTION_NAMES
  else if (long_section_names && ! obj_coff_strings_written (abfd))
    {
      /* If we have long section names we have to write out the string
         table even if there are no symbols.  */
      if (! coff_write_symbols (abfd))
	return FALSE;
    }
#endif
#ifdef COFF_IMAGE_WITH_PE
#ifdef PPC_PE
  else if ((abfd->flags & EXEC_P) != 0)
    {
      bfd_byte b;

      /* PowerPC PE appears to require that all executable files be
         rounded up to the page size.  */
      b = 0;
      if (bfd_seek (abfd,
		    (file_ptr) BFD_ALIGN (sym_base, COFF_PAGE_SIZE) - 1,
		    SEEK_SET) != 0
	  || bfd_bwrite (&b, (bfd_size_type) 1, abfd) != 1)
	return FALSE;
    }
#endif
#endif

  /* If bfd_get_symcount (abfd) != 0, then we are not using the COFF
     backend linker, and obj_raw_syment_count is not valid until after
     coff_write_symbols is called.  */
  if (obj_raw_syment_count (abfd) != 0)
    {
      internal_f.f_symptr = sym_base;
#ifdef RS6000COFF_C
      /* AIX appears to require that F_RELFLG not be set if there are
         local symbols but no relocations.  */
      internal_f.f_flags &=~ F_RELFLG;
#endif
    }
  else
    {
      if (long_section_names)
	internal_f.f_symptr = sym_base;
      else
	internal_f.f_symptr = 0;
      internal_f.f_flags |= F_LSYMS;
    }

  if (text_sec)
    {
      internal_a.tsize = bfd_get_section_size_before_reloc (text_sec);
      internal_a.text_start = internal_a.tsize ? text_sec->vma : 0;
    }
  if (data_sec)
    {
      internal_a.dsize = bfd_get_section_size_before_reloc (data_sec);
      internal_a.data_start = internal_a.dsize ? data_sec->vma : 0;
    }
  if (bss_sec)
    {
      internal_a.bsize = bfd_get_section_size_before_reloc (bss_sec);
      if (internal_a.bsize && bss_sec->vma < internal_a.data_start)
	internal_a.data_start = bss_sec->vma;
    }

  internal_a.entry = bfd_get_start_address (abfd);
  internal_f.f_nsyms = obj_raw_syment_count (abfd);

#ifdef RS6000COFF_C
  if (xcoff_data (abfd)->full_aouthdr)
    {
      bfd_vma toc;
      asection *loader_sec;

      internal_a.vstamp = 1;

      internal_a.o_snentry = xcoff_data (abfd)->snentry;
      if (internal_a.o_snentry == 0)
	internal_a.entry = (bfd_vma) -1;

      if (text_sec != NULL)
	{
	  internal_a.o_sntext = text_sec->target_index;
	  internal_a.o_algntext = bfd_get_section_alignment (abfd, text_sec);
	}
      else
	{
	  internal_a.o_sntext = 0;
	  internal_a.o_algntext = 0;
	}
      if (data_sec != NULL)
	{
	  internal_a.o_sndata = data_sec->target_index;
	  internal_a.o_algndata = bfd_get_section_alignment (abfd, data_sec);
	}
      else
	{
	  internal_a.o_sndata = 0;
	  internal_a.o_algndata = 0;
	}
      loader_sec = bfd_get_section_by_name (abfd, ".loader");
      if (loader_sec != NULL)
	internal_a.o_snloader = loader_sec->target_index;
      else
	internal_a.o_snloader = 0;
      if (bss_sec != NULL)
	internal_a.o_snbss = bss_sec->target_index;
      else
	internal_a.o_snbss = 0;

      toc = xcoff_data (abfd)->toc;
      internal_a.o_toc = toc;
      internal_a.o_sntoc = xcoff_data (abfd)->sntoc;

      internal_a.o_modtype = xcoff_data (abfd)->modtype;
      if (xcoff_data (abfd)->cputype != -1)
	internal_a.o_cputype = xcoff_data (abfd)->cputype;
      else
	{
	  switch (bfd_get_arch (abfd))
	    {
	    case bfd_arch_rs6000:
	      internal_a.o_cputype = 4;
	      break;
	    case bfd_arch_powerpc:
	      if (bfd_get_mach (abfd) == bfd_mach_ppc)
		internal_a.o_cputype = 3;
	      else
		internal_a.o_cputype = 1;
	      break;
	    default:
	      abort ();
	    }
	}
      internal_a.o_maxstack = xcoff_data (abfd)->maxstack;
      internal_a.o_maxdata = xcoff_data (abfd)->maxdata;
    }
#endif

  /* now write them */
  if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)
    return FALSE;

  {
    char * buff;
    bfd_size_type amount = bfd_coff_filhsz (abfd);

    buff = bfd_malloc (amount);
    if (buff == NULL)
      return FALSE;

    bfd_coff_swap_filehdr_out (abfd, (PTR) &internal_f, (PTR) buff);
    amount = bfd_bwrite ((PTR) buff, amount, abfd);

    free (buff);

    if (amount != bfd_coff_filhsz (abfd))
      return FALSE;
  }

  if (abfd->flags & EXEC_P)
    {
      /* Note that peicode.h fills in a PEAOUTHDR, not an AOUTHDR.
	 include/coff/pe.h sets AOUTSZ == sizeof (PEAOUTHDR)).  */
      char * buff;
      bfd_size_type amount = bfd_coff_aoutsz (abfd);

      buff = bfd_malloc (amount);
      if (buff == NULL)
	return FALSE;

      coff_swap_aouthdr_out (abfd, (PTR) &internal_a, (PTR) buff);
      amount = bfd_bwrite ((PTR) buff, amount, abfd);

      free (buff);

      if (amount != bfd_coff_aoutsz (abfd))
	return FALSE;

#ifdef COFF_IMAGE_WITH_PE
      if (! coff_apply_checksum (abfd))
	return FALSE;
#endif
    }
#ifdef RS6000COFF_C
  else
    {
      AOUTHDR buff;
      size_t size;

      /* XCOFF seems to always write at least a small a.out header.  */
      coff_swap_aouthdr_out (abfd, (PTR) &internal_a, (PTR) &buff);
      if (xcoff_data (abfd)->full_aouthdr)
	size = bfd_coff_aoutsz (abfd);
      else
	size = SMALL_AOUTSZ;
      if (bfd_bwrite ((PTR) &buff, (bfd_size_type) size, abfd) != size)
	return FALSE;
    }
#endif

  return TRUE;
}

static bfd_boolean
coff_set_section_contents (abfd, section, location, offset, count)
     bfd * abfd;
     sec_ptr section;
     const PTR location;
     file_ptr offset;
     bfd_size_type count;
{
  if (! abfd->output_has_begun)	/* Set by bfd.c handler.  */
    {
      if (! coff_compute_section_file_positions (abfd))
	return FALSE;
    }

#if defined(_LIB) && !defined(TARG_AUX)

   /* The physical address field of a .lib section is used to hold the
      number of shared libraries in the section.  This code counts the
      number of sections being written, and increments the lma field
      with the number.

      I have found no documentation on the contents of this section.
      Experimentation indicates that the section contains zero or more
      records, each of which has the following structure:

      - a (four byte) word holding the length of this record, in words,
      - a word that always seems to be set to "2",
      - the path to a shared library, null-terminated and then padded
        to a whole word boundary.

      bfd_assert calls have been added to alert if an attempt is made
      to write a section which doesn't follow these assumptions.  The
      code has been tested on ISC 4.1 by me, and on SCO by Robert Lipe
      <robertl@@arnet.com> (Thanks!).

      Gvran Uddeborg <gvran@@uddeborg.pp.se>.  */

    if (strcmp (section->name, _LIB) == 0)
      {
	bfd_byte *rec, *recend;

	rec = (bfd_byte *) location;
	recend = rec + count;
	while (rec < recend)
	  {
	    ++section->lma;
	    rec += bfd_get_32 (abfd, rec) * 4;
	  }

	BFD_ASSERT (rec == recend);
      }

#endif

  /* Don't write out bss sections - one way to do this is to
       see if the filepos has not been set.  */
  if (section->filepos == 0)
    return TRUE;

  if (bfd_seek (abfd, section->filepos + offset, SEEK_SET) != 0)
    return FALSE;

  if (count == 0)
    return TRUE;

  return bfd_bwrite (location, count, abfd) == count;
}
#if 0
static bfd_boolean
coff_close_and_cleanup (abfd)
     bfd *abfd;
{
  if (!bfd_read_p (abfd))
    switch (abfd->format)
      {
      case bfd_archive:
	if (!_bfd_write_archive_contents (abfd))
	  return FALSE;
	break;
      case bfd_object:
	if (!coff_write_object_contents (abfd))
	  return FALSE;
	break;
      default:
	bfd_set_error (bfd_error_invalid_operation);
	return FALSE;
      }

  /* We depend on bfd_close to free all the memory on the objalloc.  */
  return TRUE;
}

#endif

static PTR
buy_and_read (abfd, where, size)
     bfd *abfd;
     file_ptr where;
     bfd_size_type size;
{
  PTR area = (PTR) bfd_alloc (abfd, size);
  if (!area)
    return (NULL);
  if (bfd_seek (abfd, where, SEEK_SET) != 0
      || bfd_bread (area, size, abfd) != size)
    return (NULL);
  return (area);
}				/* buy_and_read() */

/*
SUBSUBSECTION
	Reading linenumbers

	Creating the linenumber table is done by reading in the entire
	coff linenumber table, and creating another table for internal use.

	A coff linenumber table is structured so that each function
	is marked as having a line number of 0. Each line within the
	function is an offset from the first line in the function. The
	base of the line number information for the table is stored in
	the symbol associated with the function.

	Note: The PE format uses line number 0 for a flag indicating a
	new source file.

	The information is copied from the external to the internal
	table, and each symbol which marks a function is marked by
	pointing its...

	How does this work ?

*/

static bfd_boolean
coff_slurp_line_table (abfd, asect)
     bfd *abfd;
     asection *asect;
{
  LINENO *native_lineno;
  alent *lineno_cache;
  bfd_size_type amt;

  BFD_ASSERT (asect->lineno == (alent *) NULL);

  amt = (bfd_size_type) bfd_coff_linesz (abfd) * asect->lineno_count;
  native_lineno = (LINENO *) buy_and_read (abfd, asect->line_filepos, amt);
  if (native_lineno == NULL)
    {
      (*_bfd_error_handler)
        (_("%s: warning: line number table read failed"),
	 bfd_archive_filename (abfd));
      return FALSE;
    }
  amt = ((bfd_size_type) asect->lineno_count + 1) * sizeof (alent);
  lineno_cache = (alent *) bfd_alloc (abfd, amt);
  if (lineno_cache == NULL)
    return FALSE;
  else
    {
      unsigned int counter = 0;
      alent *cache_ptr = lineno_cache;
      LINENO *src = native_lineno;

      while (counter < asect->lineno_count)
	{
	  struct internal_lineno dst;

	  bfd_coff_swap_lineno_in (abfd, src, &dst);
	  cache_ptr->line_number = dst.l_lnno;

	  if (cache_ptr->line_number == 0)
	    {
	      bfd_boolean warned;
	      bfd_signed_vma symndx;
	      coff_symbol_type *sym;

	      warned = FALSE;
	      symndx = dst.l_addr.l_symndx;
	      if (symndx < 0
		  || (bfd_vma) symndx >= obj_raw_syment_count (abfd))
		{
		  (*_bfd_error_handler)
		    (_("%s: warning: illegal symbol index %ld in line numbers"),
		     bfd_archive_filename (abfd), dst.l_addr.l_symndx);
		  symndx = 0;
		  warned = TRUE;
		}
	      /* FIXME: We should not be casting between ints and
                 pointers like this.  */
	      sym = ((coff_symbol_type *)
		     ((symndx + obj_raw_syments (abfd))
		      ->u.syment._n._n_n._n_zeroes));
	      cache_ptr->u.sym = (asymbol *) sym;
	      if (sym->lineno != NULL && ! warned)
		{
		  (*_bfd_error_handler)
		    (_("%s: warning: duplicate line number information for `%s'"),
		     bfd_archive_filename (abfd),
		     bfd_asymbol_name (&sym->symbol));
		}
	      sym->lineno = cache_ptr;
	    }
	  else
	    {
	      cache_ptr->u.offset = dst.l_addr.l_paddr
		- bfd_section_vma (abfd, asect);
	    }			/* If no linenumber expect a symbol index */

	  cache_ptr++;
	  src++;
	  counter++;
	}
      cache_ptr->line_number = 0;

    }
  asect->lineno = lineno_cache;
  /* FIXME, free native_lineno here, or use alloca or something.  */
  return TRUE;
}

/* Slurp in the symbol table, converting it to generic form.  Note
   that if coff_relocate_section is defined, the linker will read
   symbols via coff_link_add_symbols, rather than via this routine.  */

static bfd_boolean
coff_slurp_symbol_table (abfd)
     bfd * abfd;
{
  combined_entry_type *native_symbols;
  coff_symbol_type *cached_area;
  unsigned int *table_ptr;
  bfd_size_type amt;
  unsigned int number_of_symbols = 0;

  if (obj_symbols (abfd))
    return TRUE;

  /* Read in the symbol table.  */
  if ((native_symbols = coff_get_normalized_symtab (abfd)) == NULL)
    return FALSE;

  /* Allocate enough room for all the symbols in cached form.  */
  amt = obj_raw_syment_count (abfd);
  amt *= sizeof (coff_symbol_type);
  cached_area = (coff_symbol_type *) bfd_alloc (abfd, amt);
  if (cached_area == NULL)
    return FALSE;

  amt = obj_raw_syment_count (abfd);
  amt *= sizeof (unsigned int);
  table_ptr = (unsigned int *) bfd_alloc (abfd, amt);

  if (table_ptr == NULL)
    return FALSE;
  else
    {
      coff_symbol_type *dst = cached_area;
      unsigned int last_native_index = obj_raw_syment_count (abfd);
      unsigned int this_index = 0;

      while (this_index < last_native_index)
	{
	  combined_entry_type *src = native_symbols + this_index;
	  table_ptr[this_index] = number_of_symbols;
	  dst->symbol.the_bfd = abfd;

	  dst->symbol.name = (char *) (src->u.syment._n._n_n._n_offset);
	  /* We use the native name field to point to the cached field.  */
	  src->u.syment._n._n_n._n_zeroes = (long) dst;
	  dst->symbol.section = coff_section_from_bfd_index (abfd,
						     src->u.syment.n_scnum);
	  dst->symbol.flags = 0;
	  dst->done_lineno = FALSE;

	  switch (src->u.syment.n_sclass)
	    {
#ifdef I960
	    case C_LEAFEXT:
#if 0
	      dst->symbol.value = src->u.syment.n_value - dst->symbol.section->vma;
	      dst->symbol.flags = BSF_EXPORT | BSF_GLOBAL;
	      dst->symbol.flags |= BSF_NOT_AT_END | BSF_FUNCTION;
#endif
	      /* Fall through to next case.  */
#endif

	    case C_EXT:
	    case C_WEAKEXT:
#if defined ARM
            case C_THUMBEXT:
            case C_THUMBEXTFUNC:
#endif
#ifdef RS6000COFF_C
	    case C_HIDEXT:
#endif
#ifdef C_SYSTEM
	    case C_SYSTEM:	/* System Wide variable.  */
#endif
#ifdef COFF_WITH_PE
            /* In PE, 0x68 (104) denotes a section symbol.  */
            case C_SECTION:
	    /* In PE, 0x69 (105) denotes a weak external symbol.  */
	    case C_NT_WEAK:
#endif
	      switch (coff_classify_symbol (abfd, &src->u.syment))
		{
		case COFF_SYMBOL_GLOBAL:
		  dst->symbol.flags = BSF_EXPORT | BSF_GLOBAL;
#if defined COFF_WITH_PE
		  /* PE sets the symbol to a value relative to the
                     start of the section.  */
		  dst->symbol.value = src->u.syment.n_value;
#else
		  dst->symbol.value = (src->u.syment.n_value
				       - dst->symbol.section->vma);
#endif
		  if (ISFCN ((src->u.syment.n_type)))
		    {
		      /* A function ext does not go at the end of a
			 file.  */
		      dst->symbol.flags |= BSF_NOT_AT_END | BSF_FUNCTION;
		    }
		  break;

		case COFF_SYMBOL_COMMON:
		  dst->symbol.section = bfd_com_section_ptr;
		  dst->symbol.value = src->u.syment.n_value;
		  break;

		case COFF_SYMBOL_UNDEFINED:
		  dst->symbol.section = bfd_und_section_ptr;
		  dst->symbol.value = 0;
		  break;

		case COFF_SYMBOL_PE_SECTION:
		  dst->symbol.flags |= BSF_EXPORT | BSF_SECTION_SYM;
		  dst->symbol.value = 0;
		  break;

		case COFF_SYMBOL_LOCAL:
		  dst->symbol.flags = BSF_LOCAL;
#if defined COFF_WITH_PE
		  /* PE sets the symbol to a value relative to the
                     start of the section.  */
		  dst->symbol.value = src->u.syment.n_value;
#else
		  dst->symbol.value = (src->u.syment.n_value
				       - dst->symbol.section->vma);
#endif
		  if (ISFCN ((src->u.syment.n_type)))
		    dst->symbol.flags |= BSF_NOT_AT_END | BSF_FUNCTION;
		  break;
		}

#ifdef RS6000COFF_C
	      /* A symbol with a csect entry should not go at the end.  */
	      if (src->u.syment.n_numaux > 0)
		dst->symbol.flags |= BSF_NOT_AT_END;
#endif

#ifdef COFF_WITH_PE
	      if (src->u.syment.n_sclass == C_NT_WEAK)
		dst->symbol.flags |= BSF_WEAK;

	      if (src->u.syment.n_sclass == C_SECTION
		  && src->u.syment.n_scnum > 0)
		dst->symbol.flags = BSF_LOCAL;
#endif
	      if (src->u.syment.n_sclass == C_WEAKEXT)
		dst->symbol.flags |= BSF_WEAK;

	      break;

	    case C_STAT:	 /* Static.  */
#ifdef I960
	    case C_LEAFSTAT:	 /* Static leaf procedure.  */
#endif
#if defined ARM
            case C_THUMBSTAT:    /* Thumb static.  */
            case C_THUMBLABEL:   /* Thumb label.  */
            case C_THUMBSTATFUNC:/* Thumb static function.  */
#endif
	    case C_LABEL:	 /* Label.  */
	      if (src->u.syment.n_scnum == N_DEBUG)
		dst->symbol.flags = BSF_DEBUGGING;
	      else
		dst->symbol.flags = BSF_LOCAL;

	      /* Base the value as an index from the base of the
		 section, if there is one.  */
	      if (dst->symbol.section)
		{
#if defined COFF_WITH_PE
		  /* PE sets the symbol to a value relative to the
                     start of the section.  */
		  dst->symbol.value = src->u.syment.n_value;
#else
		  dst->symbol.value = (src->u.syment.n_value
				       - dst->symbol.section->vma);
#endif
		}
	      else
		dst->symbol.value = src->u.syment.n_value;
	      break;

	    case C_MOS:		/* Member of structure.  */
	    case C_EOS:		/* End of structure.  */
#ifdef NOTDEF			/* C_AUTOARG has the same value.  */
#ifdef C_GLBLREG
	    case C_GLBLREG:	/* A29k-specific storage class.  */
#endif
#endif
	    case C_REGPARM:	/* Register parameter.  */
	    case C_REG:		/* register variable.  */
              /* C_AUTOARG conflicts with TI COFF C_UEXT.  */
#if !defined (TIC80COFF) && !defined (TICOFF)
#ifdef C_AUTOARG
	    case C_AUTOARG:	/* 960-specific storage class.  */
#endif
#endif
	    case C_TPDEF:	/* Type definition.  */
	    case C_ARG:
	    case C_AUTO:	/* Automatic variable.  */
	    case C_FIELD:	/* Bit field.  */
	    case C_ENTAG:	/* Enumeration tag.  */
	    case C_MOE:		/* Member of enumeration.  */
	    case C_MOU:		/* Member of union.  */
	    case C_UNTAG:	/* Union tag.  */
	      dst->symbol.flags = BSF_DEBUGGING;
	      dst->symbol.value = (src->u.syment.n_value);
	      break;

	    case C_FILE:	/* File name.  */
	    case C_STRTAG:	/* Structure tag.  */
#ifdef RS6000COFF_C
	    case C_GSYM:
	    case C_LSYM:
	    case C_PSYM:
	    case C_RSYM:
	    case C_RPSYM:
	    case C_STSYM:
	    case C_TCSYM:
	    case C_BCOMM:
	    case C_ECOML:
	    case C_ECOMM:
	    case C_DECL:
	    case C_ENTRY:
	    case C_FUN:
	    case C_ESTAT:
#endif
	      dst->symbol.flags = BSF_DEBUGGING;
	      dst->symbol.value = (src->u.syment.n_value);
	      break;

#ifdef RS6000COFF_C
	    case C_BINCL:	/* Beginning of include file.  */
	    case C_EINCL:	/* Ending of include file.  */
	      /* The value is actually a pointer into the line numbers
                 of the file.  We locate the line number entry, and
                 set the section to the section which contains it, and
                 the value to the index in that section.  */
	      {
		asection *sec;

		dst->symbol.flags = BSF_DEBUGGING;
		for (sec = abfd->sections; sec != NULL; sec = sec->next)
		  if (sec->line_filepos <= (file_ptr) src->u.syment.n_value
		      && ((file_ptr) (sec->line_filepos
				      + sec->lineno_count * bfd_coff_linesz (abfd))
			  > (file_ptr) src->u.syment.n_value))
		    break;
		if (sec == NULL)
		  dst->symbol.value = 0;
		else
		  {
		    dst->symbol.section = sec;
		    dst->symbol.value = ((src->u.syment.n_value
					  - sec->line_filepos)
					 / bfd_coff_linesz (abfd));
		    src->fix_line = 1;
		  }
	      }
	      break;

	    case C_BSTAT:
	      dst->symbol.flags = BSF_DEBUGGING;

	      /* The value is actually a symbol index.  Save a pointer
		 to the symbol instead of the index.  FIXME: This
		 should use a union.  */
	      src->u.syment.n_value =
		(long) (native_symbols + src->u.syment.n_value);
	      dst->symbol.value = src->u.syment.n_value;
	      src->fix_value = 1;
	      break;
#endif

	    case C_BLOCK:	/* ".bb" or ".eb".  */
	    case C_FCN:		/* ".bf" or ".ef" (or PE ".lf").  */
	    case C_EFCN:	/* Physical end of function.  */
#if defined COFF_WITH_PE
	      /* PE sets the symbol to a value relative to the start
		 of the section.  */
	      dst->symbol.value = src->u.syment.n_value;
	      if (strcmp (dst->symbol.name, ".bf") != 0)
		{
		  /* PE uses funny values for .ef and .lf; don't
                     relocate them.  */
		  dst->symbol.flags = BSF_DEBUGGING;
		}
	      else
		dst->symbol.flags = BSF_DEBUGGING | BSF_DEBUGGING_RELOC;
#else
	      /* Base the value as an index from the base of the
		 section.  */
	      dst->symbol.flags = BSF_LOCAL;
	      dst->symbol.value = (src->u.syment.n_value
				   - dst->symbol.section->vma);
#endif
	      break;

	    case C_STATLAB:	/* Static load time label.  */
              dst->symbol.value = src->u.syment.n_value;
              dst->symbol.flags = BSF_GLOBAL;
              break;

	    case C_NULL:
	      /* PE DLLs sometimes have zeroed out symbols for some
                 reason.  Just ignore them without a warning.  */
	      if (src->u.syment.n_type == 0
		  && src->u.syment.n_value == 0
		  && src->u.syment.n_scnum == 0)
		break;
	      /* Fall through.  */
	    case C_EXTDEF:	/* External definition.  */
	    case C_ULABEL:	/* Undefined label.  */
	    case C_USTATIC:	/* Undefined static.  */
#ifndef COFF_WITH_PE
            /* C_LINE in regular coff is 0x68.  NT has taken over this storage
               class to represent a section symbol.  */
	    case C_LINE:	/* line # reformatted as symbol table entry.  */
	      /* NT uses 0x67 for a weak symbol, not C_ALIAS.  */
	    case C_ALIAS:	/* Duplicate tag.  */
#endif
	      /* New storage classes for TI COFF.  */
#if defined(TIC80COFF) || defined(TICOFF)
	    case C_UEXT:	/* Tentative external definition.  */
#endif
	    case C_EXTLAB:	/* External load time label.  */
	    case C_HIDDEN:	/* Ext symbol in dmert public lib.  */
	    default:
	      (*_bfd_error_handler)
		(_("%s: Unrecognized storage class %d for %s symbol `%s'"),
		 bfd_archive_filename (abfd), src->u.syment.n_sclass,
		 dst->symbol.section->name, dst->symbol.name);
	      dst->symbol.flags = BSF_DEBUGGING;
	      dst->symbol.value = (src->u.syment.n_value);
	      break;
	    }

/*      BFD_ASSERT(dst->symbol.flags != 0);*/

	  dst->native = src;

	  dst->symbol.udata.i = 0;
	  dst->lineno = (alent *) NULL;
	  this_index += (src->u.syment.n_numaux) + 1;
	  dst++;
	  number_of_symbols++;
	}
    }

  obj_symbols (abfd) = cached_area;
  obj_raw_syments (abfd) = native_symbols;

  bfd_get_symcount (abfd) = number_of_symbols;
  obj_convert (abfd) = table_ptr;
  /* Slurp the line tables for each section too.  */
  {
    asection *p;

    p = abfd->sections;
    while (p)
      {
	coff_slurp_line_table (abfd, p);
	p = p->next;
      }
  }

  return TRUE;
}				/* coff_slurp_symbol_table() */

/* Classify a COFF symbol.  A couple of targets have globally visible
   symbols which are not class C_EXT, and this handles those.  It also
   recognizes some special PE cases.  */

static enum coff_symbol_classification
coff_classify_symbol (abfd, syment)
     bfd *abfd;
     struct internal_syment *syment;
{
  /* FIXME: This partially duplicates the switch in
     coff_slurp_symbol_table.  */
  switch (syment->n_sclass)
    {
    case C_EXT:
    case C_WEAKEXT:
#ifdef I960
    case C_LEAFEXT:
#endif
#ifdef ARM
    case C_THUMBEXT:
    case C_THUMBEXTFUNC:
#endif
#ifdef C_SYSTEM
    case C_SYSTEM:
#endif
#ifdef COFF_WITH_PE
    case C_NT_WEAK:
#endif
      if (syment->n_scnum == 0)
	{
	  if (syment->n_value == 0)
	    return COFF_SYMBOL_UNDEFINED;
	  else
	    return COFF_SYMBOL_COMMON;
	}
      return COFF_SYMBOL_GLOBAL;

    default:
      break;
    }

#ifdef COFF_WITH_PE
  if (syment->n_sclass == C_STAT)
    {
      if (syment->n_scnum == 0)
	{
	  /* The Microsoft compiler sometimes generates these if a
             small static function is inlined every time it is used.
             The function is discarded, but the symbol table entry
             remains.  */
	  return COFF_SYMBOL_LOCAL;
	}

#ifdef STRICT_PE_FORMAT
      /* This is correct for Microsoft generated objects, but it
         breaks gas generated objects.  */

      if (syment->n_value == 0)
	{
	  asection *sec;
	  char buf[SYMNMLEN + 1];

	  sec = coff_section_from_bfd_index (abfd, syment->n_scnum);
	  if (sec != NULL
	      && (strcmp (bfd_get_section_name (abfd, sec),
			  _bfd_coff_internal_syment_name (abfd, syment, buf))
		  == 0))
	    return COFF_SYMBOL_PE_SECTION;
	}
#endif

      return COFF_SYMBOL_LOCAL;
    }

  if (syment->n_sclass == C_SECTION)
    {
      /* In some cases in a DLL generated by the Microsoft linker, the
         n_value field will contain garbage.  FIXME: This should
         probably be handled by the swapping function instead.  */
      syment->n_value = 0;
      if (syment->n_scnum == 0)
	return COFF_SYMBOL_UNDEFINED;
      return COFF_SYMBOL_PE_SECTION;
    }
#endif /* COFF_WITH_PE */

  /* If it is not a global symbol, we presume it is a local symbol.  */

  if (syment->n_scnum == 0)
    {
      char buf[SYMNMLEN + 1];

      (*_bfd_error_handler)
	(_("warning: %s: local symbol `%s' has no section"),
	 bfd_archive_filename (abfd),
	 _bfd_coff_internal_syment_name (abfd, syment, buf));
    }

  return COFF_SYMBOL_LOCAL;
}

/*
SUBSUBSECTION
	Reading relocations

	Coff relocations are easily transformed into the internal BFD form
	(@@code{arelent}).

	Reading a coff relocation table is done in the following stages:

	o Read the entire coff relocation table into memory.

	o Process each relocation in turn; first swap it from the
	external to the internal form.

	o Turn the symbol referenced in the relocation's symbol index
	into a pointer into the canonical symbol table.
	This table is the same as the one returned by a call to
	@@code{bfd_canonicalize_symtab}. The back end will call that
	routine and save the result if a canonicalization hasn't been done.

	o The reloc index is turned into a pointer to a howto
	structure, in a back end specific way. For instance, the 386
	and 960 use the @@code{r_type} to directly produce an index
	into a howto table vector; the 88k subtracts a number from the
	@@code{r_type} field and creates an addend field.

*/

#ifndef CALC_ADDEND
#define CALC_ADDEND(abfd, ptr, reloc, cache_ptr)                \
  {                                                             \
    coff_symbol_type *coffsym = (coff_symbol_type *) NULL;      \
    if (ptr && bfd_asymbol_bfd (ptr) != abfd)                   \
      coffsym = (obj_symbols (abfd)                             \
                 + (cache_ptr->sym_ptr_ptr - symbols));         \
    else if (ptr)                                               \
      coffsym = coff_symbol_from (abfd, ptr);                   \
    if (coffsym != (coff_symbol_type *) NULL                    \
        && coffsym->native->u.syment.n_scnum == 0)              \
      cache_ptr->addend = 0;                                    \
    else if (ptr && bfd_asymbol_bfd (ptr) == abfd               \
             && ptr->section != (asection *) NULL)              \
      cache_ptr->addend = - (ptr->section->vma + ptr->value);   \
    else                                                        \
      cache_ptr->addend = 0;                                    \
  }
#endif

static bfd_boolean
coff_slurp_reloc_table (abfd, asect, symbols)
     bfd * abfd;
     sec_ptr asect;
     asymbol ** symbols;
{
  RELOC *native_relocs;
  arelent *reloc_cache;
  arelent *cache_ptr;
  unsigned int idx;
  bfd_size_type amt;

  if (asect->relocation)
    return TRUE;
  if (asect->reloc_count == 0)
    return TRUE;
  if (asect->flags & SEC_CONSTRUCTOR)
    return TRUE;
  if (!coff_slurp_symbol_table (abfd))
    return FALSE;
  amt = (bfd_size_type) bfd_coff_relsz (abfd) * asect->reloc_count;
  native_relocs = (RELOC *) buy_and_read (abfd, asect->rel_filepos, amt);
  amt = (bfd_size_type) asect->reloc_count * sizeof (arelent);
  reloc_cache = (arelent *) bfd_alloc (abfd, amt);

  if (reloc_cache == NULL)
    return FALSE;

  for (idx = 0; idx < asect->reloc_count; idx++)
    {
      struct internal_reloc dst;
      struct external_reloc *src;
#ifndef RELOC_PROCESSING
      asymbol *ptr;
#endif

      cache_ptr = reloc_cache + idx;
      src = native_relocs + idx;

      coff_swap_reloc_in (abfd, src, &dst);

#ifdef RELOC_PROCESSING
      RELOC_PROCESSING (cache_ptr, &dst, symbols, abfd, asect);
#else
      cache_ptr->address = dst.r_vaddr;

      if (dst.r_symndx != -1)
	{
	  if (dst.r_symndx < 0 || dst.r_symndx >= obj_conv_table_size (abfd))
	    {
	      (*_bfd_error_handler)
		(_("%s: warning: illegal symbol index %ld in relocs"),
		 bfd_archive_filename (abfd), dst.r_symndx);
	      cache_ptr->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;
	      ptr = NULL;
	    }
	  else
	    {
	      cache_ptr->sym_ptr_ptr = (symbols
					+ obj_convert (abfd)[dst.r_symndx]);
	      ptr = *(cache_ptr->sym_ptr_ptr);
	    }
	}
      else
	{
	  cache_ptr->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;
	  ptr = NULL;
	}

      /* The symbols definitions that we have read in have been
	 relocated as if their sections started at 0. But the offsets
	 refering to the symbols in the raw data have not been
	 modified, so we have to have a negative addend to compensate.

	 Note that symbols which used to be common must be left alone.  */

      /* Calculate any reloc addend by looking at the symbol.  */
      CALC_ADDEND (abfd, ptr, dst, cache_ptr);

      cache_ptr->address -= asect->vma;
/* !!     cache_ptr->section = (asection *) NULL;*/

      /* Fill in the cache_ptr->howto field from dst.r_type.  */
      RTYPE2HOWTO (cache_ptr, &dst);
#endif	/* RELOC_PROCESSING */

      if (cache_ptr->howto == NULL)
	{
	  (*_bfd_error_handler)
	    (_("%s: illegal relocation type %d at address 0x%lx"),
	     bfd_archive_filename (abfd), dst.r_type, (long) dst.r_vaddr);
	  bfd_set_error (bfd_error_bad_value);
	  return FALSE;
	}
    }

  asect->relocation = reloc_cache;
  return TRUE;
}

#ifndef coff_rtype_to_howto
#ifdef RTYPE2HOWTO

/* Get the howto structure for a reloc.  This is only used if the file
   including this one defines coff_relocate_section to be
   _bfd_coff_generic_relocate_section, so it is OK if it does not
   always work.  It is the responsibility of the including file to
   make sure it is reasonable if it is needed.  */

static reloc_howto_type *coff_rtype_to_howto
  PARAMS ((bfd *, asection *, struct internal_reloc *,
	   struct coff_link_hash_entry *, struct internal_syment *,
	   bfd_vma *));

static reloc_howto_type *
coff_rtype_to_howto (abfd, sec, rel, h, sym, addendp)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *sec ATTRIBUTE_UNUSED;
     struct internal_reloc *rel;
     struct coff_link_hash_entry *h ATTRIBUTE_UNUSED;
     struct internal_syment *sym ATTRIBUTE_UNUSED;
     bfd_vma *addendp ATTRIBUTE_UNUSED;
{
  arelent genrel;

  RTYPE2HOWTO (&genrel, rel);
  return genrel.howto;
}

#else /* ! defined (RTYPE2HOWTO) */

#define coff_rtype_to_howto NULL

#endif /* ! defined (RTYPE2HOWTO) */
#endif /* ! defined (coff_rtype_to_howto) */

/* This is stupid.  This function should be a boolean predicate.  */
static long
coff_canonicalize_reloc (abfd, section, relptr, symbols)
     bfd * abfd;
     sec_ptr section;
     arelent ** relptr;
     asymbol ** symbols;
{
  arelent *tblptr = section->relocation;
  unsigned int count = 0;

  if (section->flags & SEC_CONSTRUCTOR)
    {
      /* This section has relocs made up by us, they are not in the
	 file, so take them out of their chain and place them into
	 the data area provided.  */
      arelent_chain *chain = section->constructor_chain;

      for (count = 0; count < section->reloc_count; count++)
	{
	  *relptr++ = &chain->relent;
	  chain = chain->next;
	}
    }
  else
    {
      if (! coff_slurp_reloc_table (abfd, section, symbols))
	return -1;

      tblptr = section->relocation;

      for (; count++ < section->reloc_count;)
	*relptr++ = tblptr++;
    }
  *relptr = 0;
  return section->reloc_count;
}

#ifdef GNU960
file_ptr
coff_sym_filepos (abfd)
     bfd *abfd;
{
  return obj_sym_filepos (abfd);
}
#endif

#ifndef coff_reloc16_estimate
#define coff_reloc16_estimate dummy_reloc16_estimate

static int dummy_reloc16_estimate
  PARAMS ((bfd *, asection *, arelent *, unsigned int,
	   struct bfd_link_info *));

static int
dummy_reloc16_estimate (abfd, input_section, reloc, shrink, link_info)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *input_section ATTRIBUTE_UNUSED;
     arelent *reloc ATTRIBUTE_UNUSED;
     unsigned int shrink ATTRIBUTE_UNUSED;
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
{
  abort ();
  return 0;
}

#endif

#ifndef coff_reloc16_extra_cases

#define coff_reloc16_extra_cases dummy_reloc16_extra_cases

/* This works even if abort is not declared in any header file.  */

static void dummy_reloc16_extra_cases
  PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *,
	   bfd_byte *, unsigned int *, unsigned int *));

static void
dummy_reloc16_extra_cases (abfd, link_info, link_order, reloc, data, src_ptr,
			   dst_ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     struct bfd_link_order *link_order ATTRIBUTE_UNUSED;
     arelent *reloc ATTRIBUTE_UNUSED;
     bfd_byte *data ATTRIBUTE_UNUSED;
     unsigned int *src_ptr ATTRIBUTE_UNUSED;
     unsigned int *dst_ptr ATTRIBUTE_UNUSED;
{
  abort ();
}
#endif

#ifndef coff_bfd_link_hash_table_free
#define coff_bfd_link_hash_table_free _bfd_generic_link_hash_table_free
#endif

/* If coff_relocate_section is defined, we can use the optimized COFF
   backend linker.  Otherwise we must continue to use the old linker.  */
#ifdef coff_relocate_section
#ifndef coff_bfd_link_hash_table_create
#define coff_bfd_link_hash_table_create _bfd_coff_link_hash_table_create
#endif
#ifndef coff_bfd_link_add_symbols
#define coff_bfd_link_add_symbols _bfd_coff_link_add_symbols
#endif
#ifndef coff_bfd_final_link
#define coff_bfd_final_link _bfd_coff_final_link
#endif
#else /* ! defined (coff_relocate_section) */
#define coff_relocate_section NULL
#ifndef coff_bfd_link_hash_table_create
#define coff_bfd_link_hash_table_create _bfd_generic_link_hash_table_create
#endif
#ifndef coff_bfd_link_add_symbols
#define coff_bfd_link_add_symbols _bfd_generic_link_add_symbols
#endif
#define coff_bfd_final_link _bfd_generic_final_link
#endif /* ! defined (coff_relocate_section) */

#define coff_bfd_link_just_syms _bfd_generic_link_just_syms
#define coff_bfd_link_split_section  _bfd_generic_link_split_section

#ifndef coff_start_final_link
#define coff_start_final_link NULL
#endif

#ifndef coff_adjust_symndx
#define coff_adjust_symndx NULL
#endif

#ifndef coff_link_add_one_symbol
#define coff_link_add_one_symbol _bfd_generic_link_add_one_symbol
#endif

#ifndef coff_link_output_has_begun

static bfd_boolean coff_link_output_has_begun
  PARAMS ((bfd *, struct coff_final_link_info *));

static bfd_boolean
coff_link_output_has_begun (abfd, info)
     bfd * abfd;
     struct coff_final_link_info * info ATTRIBUTE_UNUSED;
{
  return abfd->output_has_begun;
}
#endif

#ifndef coff_final_link_postscript

static bfd_boolean coff_final_link_postscript
  PARAMS ((bfd *, struct coff_final_link_info *));

static bfd_boolean
coff_final_link_postscript (abfd, pfinfo)
     bfd * abfd ATTRIBUTE_UNUSED;
     struct coff_final_link_info * pfinfo ATTRIBUTE_UNUSED;
{
  return TRUE;
}
#endif

#ifndef coff_SWAP_aux_in
#define coff_SWAP_aux_in coff_swap_aux_in
#endif
#ifndef coff_SWAP_sym_in
#define coff_SWAP_sym_in coff_swap_sym_in
#endif
#ifndef coff_SWAP_lineno_in
#define coff_SWAP_lineno_in coff_swap_lineno_in
#endif
#ifndef coff_SWAP_aux_out
#define coff_SWAP_aux_out coff_swap_aux_out
#endif
#ifndef coff_SWAP_sym_out
#define coff_SWAP_sym_out coff_swap_sym_out
#endif
#ifndef coff_SWAP_lineno_out
#define coff_SWAP_lineno_out coff_swap_lineno_out
#endif
#ifndef coff_SWAP_reloc_out
#define coff_SWAP_reloc_out coff_swap_reloc_out
#endif
#ifndef coff_SWAP_filehdr_out
#define coff_SWAP_filehdr_out coff_swap_filehdr_out
#endif
#ifndef coff_SWAP_aouthdr_out
#define coff_SWAP_aouthdr_out coff_swap_aouthdr_out
#endif
#ifndef coff_SWAP_scnhdr_out
#define coff_SWAP_scnhdr_out coff_swap_scnhdr_out
#endif
#ifndef coff_SWAP_reloc_in
#define coff_SWAP_reloc_in coff_swap_reloc_in
#endif
#ifndef coff_SWAP_filehdr_in
#define coff_SWAP_filehdr_in coff_swap_filehdr_in
#endif
#ifndef coff_SWAP_aouthdr_in
#define coff_SWAP_aouthdr_in coff_swap_aouthdr_in
#endif
#ifndef coff_SWAP_scnhdr_in
#define coff_SWAP_scnhdr_in coff_swap_scnhdr_in
#endif

static const bfd_coff_backend_data bfd_coff_std_swap_table =
{
  coff_SWAP_aux_in, coff_SWAP_sym_in, coff_SWAP_lineno_in,
  coff_SWAP_aux_out, coff_SWAP_sym_out,
  coff_SWAP_lineno_out, coff_SWAP_reloc_out,
  coff_SWAP_filehdr_out, coff_SWAP_aouthdr_out,
  coff_SWAP_scnhdr_out,
  FILHSZ, AOUTSZ, SCNHSZ, SYMESZ, AUXESZ, RELSZ, LINESZ, FILNMLEN,
#ifdef COFF_LONG_FILENAMES
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_LONG_SECTION_NAMES
  TRUE,
#else
  FALSE,
#endif
  COFF_DEFAULT_SECTION_ALIGNMENT_POWER,
#ifdef COFF_FORCE_SYMBOLS_IN_STRINGS
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_DEBUG_STRING_WIDE_PREFIX
  4,
#else
  2,
#endif
  coff_SWAP_filehdr_in, coff_SWAP_aouthdr_in, coff_SWAP_scnhdr_in,
  coff_SWAP_reloc_in, coff_bad_format_hook, coff_set_arch_mach_hook,
  coff_mkobject_hook, styp_to_sec_flags, coff_set_alignment_hook,
  coff_slurp_symbol_table, symname_in_debug_hook, coff_pointerize_aux_hook,
  coff_print_aux, coff_reloc16_extra_cases, coff_reloc16_estimate,
  coff_classify_symbol, coff_compute_section_file_positions,
  coff_start_final_link, coff_relocate_section, coff_rtype_to_howto,
  coff_adjust_symndx, coff_link_add_one_symbol,
  coff_link_output_has_begun, coff_final_link_postscript
};

#ifdef TICOFF
/* COFF0 differs in file/section header size and relocation entry size.  */
static const bfd_coff_backend_data ticoff0_swap_table =
{
  coff_SWAP_aux_in, coff_SWAP_sym_in, coff_SWAP_lineno_in,
  coff_SWAP_aux_out, coff_SWAP_sym_out,
  coff_SWAP_lineno_out, coff_SWAP_reloc_out,
  coff_SWAP_filehdr_out, coff_SWAP_aouthdr_out,
  coff_SWAP_scnhdr_out,
  FILHSZ_V0, AOUTSZ, SCNHSZ_V01, SYMESZ, AUXESZ, RELSZ_V0, LINESZ, FILNMLEN,
#ifdef COFF_LONG_FILENAMES
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_LONG_SECTION_NAMES
  TRUE,
#else
  FALSE,
#endif
  COFF_DEFAULT_SECTION_ALIGNMENT_POWER,
#ifdef COFF_FORCE_SYMBOLS_IN_STRINGS
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_DEBUG_STRING_WIDE_PREFIX
  4,
#else
  2,
#endif
  coff_SWAP_filehdr_in, coff_SWAP_aouthdr_in, coff_SWAP_scnhdr_in,
  coff_SWAP_reloc_in, ticoff0_bad_format_hook, coff_set_arch_mach_hook,
  coff_mkobject_hook, styp_to_sec_flags, coff_set_alignment_hook,
  coff_slurp_symbol_table, symname_in_debug_hook, coff_pointerize_aux_hook,
  coff_print_aux, coff_reloc16_extra_cases, coff_reloc16_estimate,
  coff_classify_symbol, coff_compute_section_file_positions,
  coff_start_final_link, coff_relocate_section, coff_rtype_to_howto,
  coff_adjust_symndx, coff_link_add_one_symbol,
  coff_link_output_has_begun, coff_final_link_postscript
};
#endif

#ifdef TICOFF
/* COFF1 differs in section header size.  */
static const bfd_coff_backend_data ticoff1_swap_table =
{
  coff_SWAP_aux_in, coff_SWAP_sym_in, coff_SWAP_lineno_in,
  coff_SWAP_aux_out, coff_SWAP_sym_out,
  coff_SWAP_lineno_out, coff_SWAP_reloc_out,
  coff_SWAP_filehdr_out, coff_SWAP_aouthdr_out,
  coff_SWAP_scnhdr_out,
  FILHSZ, AOUTSZ, SCNHSZ_V01, SYMESZ, AUXESZ, RELSZ, LINESZ, FILNMLEN,
#ifdef COFF_LONG_FILENAMES
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_LONG_SECTION_NAMES
  TRUE,
#else
  FALSE,
#endif
  COFF_DEFAULT_SECTION_ALIGNMENT_POWER,
#ifdef COFF_FORCE_SYMBOLS_IN_STRINGS
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_DEBUG_STRING_WIDE_PREFIX
  4,
#else
  2,
#endif
  coff_SWAP_filehdr_in, coff_SWAP_aouthdr_in, coff_SWAP_scnhdr_in,
  coff_SWAP_reloc_in, ticoff1_bad_format_hook, coff_set_arch_mach_hook,
  coff_mkobject_hook, styp_to_sec_flags, coff_set_alignment_hook,
  coff_slurp_symbol_table, symname_in_debug_hook, coff_pointerize_aux_hook,
  coff_print_aux, coff_reloc16_extra_cases, coff_reloc16_estimate,
  coff_classify_symbol, coff_compute_section_file_positions,
  coff_start_final_link, coff_relocate_section, coff_rtype_to_howto,
  coff_adjust_symndx, coff_link_add_one_symbol,
  coff_link_output_has_begun, coff_final_link_postscript
};
#endif

#ifndef coff_close_and_cleanup
#define	coff_close_and_cleanup              _bfd_generic_close_and_cleanup
#endif

#ifndef coff_bfd_free_cached_info
#define coff_bfd_free_cached_info           _bfd_generic_bfd_free_cached_info
#endif

#ifndef coff_get_section_contents
#define	coff_get_section_contents           _bfd_generic_get_section_contents
#endif

#ifndef coff_bfd_copy_private_symbol_data
#define coff_bfd_copy_private_symbol_data   _bfd_generic_bfd_copy_private_symbol_data
#endif

#ifndef coff_bfd_copy_private_section_data
#define coff_bfd_copy_private_section_data  _bfd_generic_bfd_copy_private_section_data
#endif

#ifndef coff_bfd_copy_private_bfd_data
#define coff_bfd_copy_private_bfd_data      _bfd_generic_bfd_copy_private_bfd_data
#endif

#ifndef coff_bfd_merge_private_bfd_data
#define coff_bfd_merge_private_bfd_data     _bfd_generic_bfd_merge_private_bfd_data
#endif

#ifndef coff_bfd_set_private_flags
#define coff_bfd_set_private_flags          _bfd_generic_bfd_set_private_flags
#endif

#ifndef coff_bfd_print_private_bfd_data
#define coff_bfd_print_private_bfd_data     _bfd_generic_bfd_print_private_bfd_data
#endif

#ifndef coff_bfd_is_local_label_name
#define coff_bfd_is_local_label_name	    _bfd_coff_is_local_label_name
#endif

#ifndef coff_read_minisymbols
#define coff_read_minisymbols		    _bfd_generic_read_minisymbols
#endif

#ifndef coff_minisymbol_to_symbol
#define coff_minisymbol_to_symbol	    _bfd_generic_minisymbol_to_symbol
#endif

/* The reloc lookup routine must be supplied by each individual COFF
   backend.  */
#ifndef coff_bfd_reloc_type_lookup
#define coff_bfd_reloc_type_lookup	    _bfd_norelocs_bfd_reloc_type_lookup
#endif

#ifndef coff_bfd_get_relocated_section_contents
#define coff_bfd_get_relocated_section_contents \
  bfd_generic_get_relocated_section_contents
#endif

#ifndef coff_bfd_relax_section
#define coff_bfd_relax_section		    bfd_generic_relax_section
#endif

#ifndef coff_bfd_gc_sections
#define coff_bfd_gc_sections		    bfd_generic_gc_sections
#endif

#ifndef coff_bfd_merge_sections
#define coff_bfd_merge_sections		    bfd_generic_merge_sections
#endif

#ifndef coff_bfd_discard_group
#define coff_bfd_discard_group		    bfd_generic_discard_group
#endif

#define CREATE_BIG_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE, SWAP_TABLE)	\
const bfd_target VAR =							\
{									\
  NAME ,								\
  bfd_target_coff_flavour,						\
  BFD_ENDIAN_BIG,		/* data byte order is big */		\
  BFD_ENDIAN_BIG,		/* header byte order is big */		\
  /* object flags */							\
  (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG |			\
   HAS_SYMS | HAS_LOCALS | WP_TEXT | EXTRA_O_FLAGS),			\
  /* section flags */							\
  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | EXTRA_S_FLAGS),\
  UNDER,			/* leading symbol underscore */		\
  '/',				/* ar_pad_char */			\
  15,				/* ar_max_namelen */			\
  									\
  /* Data conversion functions.  */					\
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,				\
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,				\
  bfd_getb16, bfd_getb_signed_16, bfd_putb16,				\
  									\
  /* Header conversion functions.  */					\
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,				\
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,				\
  bfd_getb16, bfd_getb_signed_16, bfd_putb16,				\
									\
	/* bfd_check_format */						\
  { _bfd_dummy_target, coff_object_p, bfd_generic_archive_p,		\
    _bfd_dummy_target },						\
	/* bfd_set_format */						\
  { bfd_false, coff_mkobject, _bfd_generic_mkarchive, bfd_false },	\
	/* bfd_write_contents */					\
  { bfd_false, coff_write_object_contents, _bfd_write_archive_contents,	\
    bfd_false },							\
									\
  BFD_JUMP_TABLE_GENERIC (coff),					\
  BFD_JUMP_TABLE_COPY (coff),						\
  BFD_JUMP_TABLE_CORE (_bfd_nocore),					\
  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),				\
  BFD_JUMP_TABLE_SYMBOLS (coff),					\
  BFD_JUMP_TABLE_RELOCS (coff),						\
  BFD_JUMP_TABLE_WRITE (coff),						\
  BFD_JUMP_TABLE_LINK (coff),						\
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),				\
  									\
  ALTERNATIVE,								\
  									\
  SWAP_TABLE								\
};

#define CREATE_BIGHDR_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE, SWAP_TABLE)	\
const bfd_target VAR =							\
{									\
  NAME ,								\
  bfd_target_coff_flavour,						\
  BFD_ENDIAN_LITTLE,		/* data byte order is little */		\
  BFD_ENDIAN_BIG,		/* header byte order is big */		\
  /* object flags */							\
  (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG |			\
   HAS_SYMS | HAS_LOCALS | WP_TEXT | EXTRA_O_FLAGS),			\
  /* section flags */							\
  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | EXTRA_S_FLAGS),\
  UNDER,			/* leading symbol underscore */		\
  '/',				/* ar_pad_char */			\
  15,				/* ar_max_namelen */			\
  									\
  /* Data conversion functions.  */					\
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,				\
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,				\
  bfd_getb16, bfd_getb_signed_16, bfd_putb16,				\
  									\
  /* Header conversion functions.  */					\
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,				\
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,				\
  bfd_getb16, bfd_getb_signed_16, bfd_putb16,				\
									\
	/* bfd_check_format */						\
  { _bfd_dummy_target, coff_object_p, bfd_generic_archive_p,		\
    _bfd_dummy_target },						\
	/* bfd_set_format */						\
  { bfd_false, coff_mkobject, _bfd_generic_mkarchive, bfd_false },	\
	/* bfd_write_contents */					\
  { bfd_false, coff_write_object_contents, _bfd_write_archive_contents,	\
    bfd_false },							\
									\
  BFD_JUMP_TABLE_GENERIC (coff),					\
  BFD_JUMP_TABLE_COPY (coff),						\
  BFD_JUMP_TABLE_CORE (_bfd_nocore),					\
  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),				\
  BFD_JUMP_TABLE_SYMBOLS (coff),					\
  BFD_JUMP_TABLE_RELOCS (coff),						\
  BFD_JUMP_TABLE_WRITE (coff),						\
  BFD_JUMP_TABLE_LINK (coff),						\
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),				\
  									\
  ALTERNATIVE,								\
  									\
  SWAP_TABLE								\
};

#define CREATE_LITTLE_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE, SWAP_TABLE)	\
const bfd_target VAR =							\
{									\
  NAME ,								\
  bfd_target_coff_flavour,						\
  BFD_ENDIAN_LITTLE,		/* data byte order is little */		\
  BFD_ENDIAN_LITTLE,		/* header byte order is little */	\
	/* object flags */						\
  (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG |			\
   HAS_SYMS | HAS_LOCALS | WP_TEXT | EXTRA_O_FLAGS),			\
	/* section flags */						\
  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | EXTRA_S_FLAGS),\
  UNDER,			/* leading symbol underscore */		\
  '/',				/* ar_pad_char */			\
  15,				/* ar_max_namelen */			\
									\
  /* Data conversion functions.  */					\
  bfd_getl64, bfd_getl_signed_64, bfd_putl64,				\
  bfd_getl32, bfd_getl_signed_32, bfd_putl32,				\
  bfd_getl16, bfd_getl_signed_16, bfd_putl16,				\
  /* Header conversion functions.  */					\
  bfd_getl64, bfd_getl_signed_64, bfd_putl64,				\
  bfd_getl32, bfd_getl_signed_32, bfd_putl32,				\
  bfd_getl16, bfd_getl_signed_16, bfd_putl16,				\
	/* bfd_check_format */						\
  { _bfd_dummy_target, coff_object_p, bfd_generic_archive_p,		\
    _bfd_dummy_target },						\
       /* bfd_set_format */						\
  { bfd_false, coff_mkobject, _bfd_generic_mkarchive, bfd_false },	\
	/* bfd_write_contents */					\
  { bfd_false, coff_write_object_contents, _bfd_write_archive_contents,	\
    bfd_false },							\
									\
  BFD_JUMP_TABLE_GENERIC (coff),					\
  BFD_JUMP_TABLE_COPY (coff),						\
  BFD_JUMP_TABLE_CORE (_bfd_nocore),					\
  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),				\
  BFD_JUMP_TABLE_SYMBOLS (coff),					\
  BFD_JUMP_TABLE_RELOCS (coff),						\
  BFD_JUMP_TABLE_WRITE (coff),						\
  BFD_JUMP_TABLE_LINK (coff),						\
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),				\
									\
  ALTERNATIVE,								\
  									\
  SWAP_TABLE								\
};
@


1.9
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d1916 6
d2751 1
a2751 1
#ifdef I386MAGIC
d2753 1
d2755 1
d2760 3
d3902 1
d3911 1
d4019 2
@


1.8
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d336 1
a336 1
  PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
d365 6
d1067 5
a1071 1
	  sec_flags |= SEC_DEBUGGING;
d1452 30
d1579 1
a1579 1
     symbol information, since they'll be overriden by the BFD symbol
d1701 2
d1704 1
a1704 2
      if (bfd_bread ((PTR) &dst, (bfd_size_type) bfd_coff_relsz (abfd), abfd)
	  != bfd_coff_relsz (abfd))
d1709 2
a1710 1
      section->reloc_count = hdr->s_nreloc = n.r_vaddr;
d1712 4
d3021 5
d3891 3
a3893 1
#ifndef COFF_WITH_PE
d4283 1
a4283 1
     PTR location;
d4425 7
d4693 1
a4693 1
              /* C_AUTOARG conflictes with TI COFF C_UEXT.  */
d4720 1
d4722 1
a5133 1
/*ARGSUSED*/
d5402 86
d5563 1
a5563 1
#define CREATE_BIG_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE)	\
d5610 51
a5660 1
  COFF_SWAP_TABLE							\
d5663 1
a5663 1
#define CREATE_LITTLE_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE)	\
d5708 1
a5708 1
  COFF_SWAP_TABLE							\
@


1.7
log
@resolve conflicts.
@
text
@d3 1
a3 1
   2000, 2001
d7 1
a7 1
This file is part of BFD, the Binary File Descriptor library.
d9 13
a21 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d228 1
a228 1
	structured hierachy required by coff. It changes each pointer
d251 31
a281 33
.
.       {* Remembers the offset from the first symbol in the file for
.          this symbol. Generated by coff_renumber_symbols. *}
.unsigned int offset;
.
.       {* Should the value of this symbol be renumbered.  Used for
.          XCOFF C_BSTAT symbols.  Set by coff_slurp_symbol_table.  *}
.unsigned int fix_value : 1;
.
.       {* Should the tag field of this symbol be renumbered.
.          Created by coff_pointerize_aux. *}
.unsigned int fix_tag : 1;
.
.       {* Should the endidx field of this symbol be renumbered.
.          Created by coff_pointerize_aux. *}
.unsigned int fix_end : 1;
.
.       {* Should the x_csect.x_scnlen field be renumbered.
.          Created by coff_pointerize_aux. *}
.unsigned int fix_scnlen : 1;
.
.       {* Fix up an XCOFF C_BINCL/C_EINCL symbol.  The value is the
.          index into the line number entries.  Set by
.          coff_slurp_symbol_table.  *}
.unsigned int fix_line : 1;
.
.       {* The container for the symbol structure as read and translated
.           from the file. *}
.
.union {
.   union internal_auxent auxent;
.   struct internal_syment syment;
. } u;
d289 2
a290 2
.   {* The actual symbol which the rest of BFD works with *}
.asymbol symbol;
d292 2
a293 2
.   {* A pointer to the hidden information for this symbol *}
.combined_entry_type *native;
d295 2
a296 2
.   {* A pointer to the linenumber information for this symbol *}
.struct lineno_cache_entry *lineno;
d298 2
a299 2
.   {* Have the line numbers been relocated yet ? *}
.boolean done_lineno;
d312 6
a317 4
static long sec_to_styp_flags PARAMS ((const char *, flagword));
static flagword styp_to_sec_flags
  PARAMS ((bfd *, PTR, const char *, asection *));
static boolean coff_bad_format_hook PARAMS ((bfd *, PTR));
d321 7
a327 4
static boolean coff_new_section_hook PARAMS ((bfd *, asection *));
static boolean coff_set_arch_mach_hook PARAMS ((bfd *, PTR));
static boolean coff_write_relocs PARAMS ((bfd *, int));
static boolean coff_set_flags
d329 7
a335 5
static boolean coff_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
static boolean coff_compute_section_file_positions PARAMS ((bfd *));
static boolean coff_write_object_contents PARAMS ((bfd *));
static boolean coff_set_section_contents
d337 6
a342 3
static PTR buy_and_read PARAMS ((bfd *, file_ptr, int, size_t));
static boolean coff_slurp_line_table PARAMS ((bfd *, asection *));
static boolean coff_slurp_symbol_table PARAMS ((bfd *));
d345 2
a346 1
static boolean coff_slurp_reloc_table PARAMS ((bfd *, asection *, asymbol **));
d350 2
a351 1
static PTR coff_mkobject_hook PARAMS ((bfd *, PTR,  PTR));
d354 10
a363 1
static flagword handle_COMDAT PARAMS ((bfd *, flagword, PTR, const char *, asection *));
d390 1
a390 1
     CONST char *sec_name;
d452 8
d538 1
a538 1
  /* skip CONSTRUCTOR */
d561 1
a561 1
     are retained in pei_section_data(abfd, section)->pe_flags */
d563 1
a563 1
  styp_flags |= IMAGE_SCN_MEM_READ;       /* always readable.  */
d565 1
a565 1
    styp_flags |= IMAGE_SCN_MEM_WRITE;    /* Invert READONLY for write */
d567 1
a567 1
    styp_flags |= IMAGE_SCN_MEM_EXECUTE;  /* CODE->EXECUTE */
d569 1
a569 1
    styp_flags |= IMAGE_SCN_MEM_SHARED;   /* Shared remains meaningful */
d583 2
a584 2
static flagword
styp_to_sec_flags (abfd, hdr, name, section)
d589 1
d597 1
a597 1
      sec_flags |= SEC_BLOCK;
d602 1
a602 1
      sec_flags |= SEC_CLINK;
d607 1
a607 3
    {
      sec_flags |= SEC_NEVER_LOAD;
    }
d648 1
a648 3
    {
      sec_flags = 0;
    }
d691 1
a691 3
    {
      sec_flags = SEC_LOAD | SEC_ALLOC | SEC_READONLY;
    }
d694 1
a694 3
    {
      sec_flags |= SEC_ALLOC | SEC_LOAD;
    }
d696 1
a696 1
#ifdef STYP_LIT			/* A29k readonly text/data section type */
d698 1
a698 3
    {
      sec_flags = (SEC_LOAD | SEC_ALLOC | SEC_READONLY);
    }
d700 2
a701 1
#ifdef STYP_OTHER_LOAD		/* Other loaded sections */
d703 1
a703 3
    {
      sec_flags = (SEC_LOAD | SEC_ALLOC);
    }
d717 5
a721 1
  return sec_flags;
d760 1
a760 1
  
d805 1
a805 1
	  /* All 3 branches use this */
d933 1
a933 1
	      /* Is this the name we're looking for? */
d947 1
d949 1
a949 1
		/* This must the the second symbol with the
d954 2
a955 2
		section->comdat =
		  bfd_alloc (abfd, sizeof (struct bfd_comdat_info));
d962 2
a963 1
		newname = bfd_alloc (abfd, strlen (symname) + 1);
d992 2
a993 2
static flagword
styp_to_sec_flags (abfd, hdr, name, section)
d998 1
d1003 1
d1013 1
a1013 1
      
d1038 1
a1038 1
#endif	
d1095 1
a1095 1
	  break;	  
d1098 1
a1098 4
      /* If the section flag was not handled, report it here.  This will allow
	 users of the BFD library to report a problem but continue executing.
	 Tools which need to be aware of these problems (such as the linker)
	 can override the default bfd_error_handler to intercept these reports.  */
d1100 6
a1105 3
	(*_bfd_error_handler)
	  (_("%s (%s): Section flag %s (0x%x) ignored"),
	   bfd_get_filename (abfd), name, unhandled, flag);
d1119 4
a1122 1
  return sec_flags;
d1154 125
a1278 194
.  void (*_bfd_coff_swap_aux_in) PARAMS ((
.       bfd            *abfd,
.       PTR             ext,
.       int             type,
.       int             class,
.       int             indaux,
.       int             numaux,
.       PTR             in));
.
.  void (*_bfd_coff_swap_sym_in) PARAMS ((
.       bfd            *abfd ,
.       PTR             ext,
.       PTR             in));
.
.  void (*_bfd_coff_swap_lineno_in) PARAMS ((
.       bfd            *abfd,
.       PTR            ext,
.       PTR             in));
.

Special entry points for gas to swap out coff parts:

. unsigned int (*_bfd_coff_swap_aux_out) PARAMS ((
.       bfd   	*abfd,
.       PTR	in,
.       int    	type,
.       int    	class,
.       int     indaux,
.       int     numaux,
.       PTR    	ext));
.
. unsigned int (*_bfd_coff_swap_sym_out) PARAMS ((
.      bfd      *abfd,
.      PTR	in,
.      PTR	ext));
.
. unsigned int (*_bfd_coff_swap_lineno_out) PARAMS ((
.      	bfd   	*abfd,
.      	PTR	in,
.	PTR	ext));
.
. unsigned int (*_bfd_coff_swap_reloc_out) PARAMS ((
.      	bfd     *abfd,
.     	PTR	src,
.	PTR	dst));
.
. unsigned int (*_bfd_coff_swap_filehdr_out) PARAMS ((
.      	bfd  	*abfd,
.	PTR 	in,
.	PTR 	out));
.
. unsigned int (*_bfd_coff_swap_aouthdr_out) PARAMS ((
.      	bfd 	*abfd,
.	PTR 	in,
.	PTR	out));
.
. unsigned int (*_bfd_coff_swap_scnhdr_out) PARAMS ((
.      	bfd  	*abfd,
.      	PTR	in,
.	PTR	out));
.

Special entry points for generic COFF routines to call target
dependent COFF routines:

. unsigned int _bfd_filhsz;
. unsigned int _bfd_aoutsz;
. unsigned int _bfd_scnhsz;
. unsigned int _bfd_symesz;
. unsigned int _bfd_auxesz;
. unsigned int _bfd_relsz;
. unsigned int _bfd_linesz;
. unsigned int _bfd_filnmlen;
. boolean _bfd_coff_long_filenames;
. boolean _bfd_coff_long_section_names;
. unsigned int _bfd_coff_default_section_alignment_power;
. boolean _bfd_coff_force_symnames_in_strings;
. unsigned int _bfd_coff_debug_string_prefix_length;
. void (*_bfd_coff_swap_filehdr_in) PARAMS ((
.       bfd     *abfd,
.       PTR     ext,
.       PTR     in));
. void (*_bfd_coff_swap_aouthdr_in) PARAMS ((
.       bfd     *abfd,
.       PTR     ext,
.       PTR     in));
. void (*_bfd_coff_swap_scnhdr_in) PARAMS ((
.       bfd     *abfd,
.       PTR     ext,
.       PTR     in));
. void (*_bfd_coff_swap_reloc_in) PARAMS ((
.       bfd     *abfd,
.       PTR     ext,
.       PTR     in));
. boolean (*_bfd_coff_bad_format_hook) PARAMS ((
.       bfd     *abfd,
.       PTR     internal_filehdr));
. boolean (*_bfd_coff_set_arch_mach_hook) PARAMS ((
.       bfd     *abfd,
.       PTR     internal_filehdr));
. PTR (*_bfd_coff_mkobject_hook) PARAMS ((
.       bfd     *abfd,
.       PTR     internal_filehdr,
.       PTR     internal_aouthdr));
. flagword (*_bfd_styp_to_sec_flags_hook) PARAMS ((
.       bfd     *abfd,
.       PTR     internal_scnhdr,
.       const char *name,
.       asection *section));
. void (*_bfd_set_alignment_hook) PARAMS ((
.       bfd     *abfd,
.       asection *sec,
.       PTR     internal_scnhdr));
. boolean (*_bfd_coff_slurp_symbol_table) PARAMS ((
.       bfd     *abfd));
. boolean (*_bfd_coff_symname_in_debug) PARAMS ((
.       bfd     *abfd,
.       struct internal_syment *sym));
. boolean (*_bfd_coff_pointerize_aux_hook) PARAMS ((
.       bfd *abfd,
.       combined_entry_type *table_base,
.       combined_entry_type *symbol,
.       unsigned int indaux,
.       combined_entry_type *aux));
. boolean (*_bfd_coff_print_aux) PARAMS ((
.       bfd *abfd,
.       FILE *file,
.       combined_entry_type *table_base,
.       combined_entry_type *symbol,
.       combined_entry_type *aux,
.       unsigned int indaux));
. void (*_bfd_coff_reloc16_extra_cases) PARAMS ((
.       bfd     *abfd,
.       struct bfd_link_info *link_info,
.       struct bfd_link_order *link_order,
.       arelent *reloc,
.       bfd_byte *data,
.       unsigned int *src_ptr,
.       unsigned int *dst_ptr));
. int (*_bfd_coff_reloc16_estimate) PARAMS ((
.       bfd *abfd,
.       asection *input_section,
.       arelent *r,
.       unsigned int shrink,
.       struct bfd_link_info *link_info));
. enum coff_symbol_classification (*_bfd_coff_classify_symbol) PARAMS ((
.       bfd *abfd,
.       struct internal_syment *));
. boolean (*_bfd_coff_compute_section_file_positions) PARAMS ((
.       bfd *abfd));
. boolean (*_bfd_coff_start_final_link) PARAMS ((
.       bfd *output_bfd,
.       struct bfd_link_info *info));
. boolean (*_bfd_coff_relocate_section) PARAMS ((
.       bfd *output_bfd,
.       struct bfd_link_info *info,
.       bfd *input_bfd,
.       asection *input_section,
.       bfd_byte *contents,
.       struct internal_reloc *relocs,
.       struct internal_syment *syms,
.       asection **sections));
. reloc_howto_type *(*_bfd_coff_rtype_to_howto) PARAMS ((
.       bfd *abfd,
.       asection *sec,
.       struct internal_reloc *rel,
.       struct coff_link_hash_entry *h,
.       struct internal_syment *sym,
.       bfd_vma *addendp));
. boolean (*_bfd_coff_adjust_symndx) PARAMS ((
.       bfd *obfd,
.       struct bfd_link_info *info,
.       bfd *ibfd,
.       asection *sec,
.       struct internal_reloc *reloc,
.       boolean *adjustedp));
. boolean (*_bfd_coff_link_add_one_symbol) PARAMS ((
.       struct bfd_link_info *info,
.       bfd *abfd,
.       const char *name,
.       flagword flags,
.       asection *section,
.       bfd_vma value,
.       const char *string,
.       boolean copy,
.       boolean collect,
.       struct bfd_link_hash_entry **hashp));
.
. boolean (*_bfd_coff_link_output_has_begun) PARAMS ((
.	bfd * abfd,
.       struct coff_final_link_info * pfinfo));
. boolean (*_bfd_coff_final_link_postscript) PARAMS ((
.	bfd * abfd,
.	struct coff_final_link_info * pfinfo));
d1282 2
a1283 1
.#define coff_backend_info(abfd) ((bfd_coff_backend_data *) (abfd)->xvec->backend_data)
d1286 1
a1286 1
.        ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,ind,num,i))
d1289 1
a1289 1
.        ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))
d1292 1
a1292 1
.        ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))
d1295 1
a1295 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))
d1298 1
a1298 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))
d1301 1
a1301 1
.        ((coff_backend_info (a)->_bfd_coff_swap_aux_out) (a,i,t,c,ind,num,o))
d1304 1
a1304 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))
d1307 1
a1307 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))
d1310 1
a1310 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))
d1313 1
a1313 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))
d1323 2
a1324 1
.#define bfd_coff_long_filenames(abfd) (coff_backend_info (abfd)->_bfd_coff_long_filenames)
d1326 1
a1326 1
.        (coff_backend_info (abfd)->_bfd_coff_long_section_names)
d1328 1
a1328 1
.	 (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
d1330 1
a1330 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))
d1333 1
a1333 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))
d1336 1
a1336 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))
d1339 1
a1339 1
.        ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_in) (abfd, i, o))
d1342 1
a1342 1
.        ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))
d1345 1
a1345 1
.        ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
d1347 2
a1348 1
.        ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook) (abfd, filehdr, aouthdr))
d1350 3
a1352 3
.#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name, section)\
.        ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook)\
.         (abfd, scnhdr, name, section))
d1355 1
a1355 1
.        ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))
d1358 1
a1358 1
.        ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))
d1361 1
a1361 1
.        ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))
d1364 1
a1364 1
.    	(coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)
d1367 1
a1367 1
.    	(coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)
d1370 2
a1371 2
.        ((coff_backend_info (abfd)->_bfd_coff_print_aux)\
.         (abfd, file, base, symbol, aux, indaux))
d1373 4
a1376 3
.#define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr)\
.        ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
.         (abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr))
d1379 2
a1380 2
.        ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
.         (abfd, section, reloc, shrink, link_info))
d1383 2
a1384 2
.        ((coff_backend_info (abfd)->_bfd_coff_classify_symbol)\
.         (abfd, sym))
d1387 2
a1388 2
.        ((coff_backend_info (abfd)->_bfd_coff_compute_section_file_positions)\
.         (abfd))
d1391 2
a1392 2
.        ((coff_backend_info (obfd)->_bfd_coff_start_final_link)\
.         (obfd, info))
d1394 2
a1395 2
.        ((coff_backend_info (ibfd)->_bfd_coff_relocate_section)\
.         (obfd, info, ibfd, o, con, rel, isyms, secs))
d1397 2
a1398 2
.        ((coff_backend_info (abfd)->_bfd_coff_rtype_to_howto)\
.         (abfd, sec, rel, h, sym, addendp))
d1400 6
a1405 5
.        ((coff_backend_info (abfd)->_bfd_coff_adjust_symndx)\
.         (obfd, info, ibfd, sec, rel, adjustedp))
.#define bfd_coff_link_add_one_symbol(info,abfd,name,flags,section,value,string,cp,coll,hashp)\
.        ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
.         (info, abfd, name, flags, section, value, string, cp, coll, hashp))
d1408 1
a1408 1
.        ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a,p))
d1410 1
a1410 1
.        ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a,p))
d1416 1
a1416 1
static boolean
d1424 1
a1424 1
    return false;
d1426 1
a1426 1
  /* if the optional header is NULL or not the correct size then
d1432 1
a1432 2
     when doing that
     */
d1436 1
a1436 1
    return false;
d1439 1
a1439 1
  return true;
d1458 1
d1473 4
a1476 1
      && default_alignment > alignment_table[i].default_alignment_max)
d1509 1
a1509 1
static boolean
d1515 1
d1520 1
a1520 1
  if (xcoff_data (abfd)->text_align_power != 0
d1522 2
a1523 2
    section->alignment_power = xcoff_data (abfd)->text_align_power;
  if (xcoff_data (abfd)->data_align_power != 0
d1525 1
a1525 1
    section->alignment_power = xcoff_data (abfd)->data_align_power;
d1533 2
a1534 2
  native = ((combined_entry_type *)
	    bfd_zalloc (abfd, sizeof (combined_entry_type) * 10));
d1536 1
a1536 1
    return false;
d1553 1
a1553 1
  return true;
d1572 1
a1572 1
  /* Extract ALIGN from 2**ALIGN stored in section header */
d1578 1
a1578 1
  /* TI tools puts the alignment power in bits 8-11 */
d1594 1
a1594 1
/* a couple of macros to help setting the alignment power field */
d1616 1
d1632 2
a1633 2
      section->used_by_bfd =
	(PTR) bfd_zalloc (abfd, sizeof (struct coff_section_tdata));
d1642 2
a1643 2
      coff_section_data (abfd, section)->tdata =
	(PTR) bfd_zalloc (abfd, sizeof (struct pei_section_tdata));
d1655 1
a1655 1
  /* check for extended relocs */
d1660 3
a1662 3
      int oldpos = bfd_tell (abfd);
      bfd_seek (abfd, hdr->s_relptr, 0);
      if (bfd_read ((PTR) & dst, 1, bfd_coff_relsz (abfd), abfd)
d1668 1
a1668 2
      section->reloc_count =
	hdr->s_nreloc = n.r_vaddr;
d1696 1
a1696 1
  real_sec = coff_section_from_bfd_index (abfd, hdr->s_nreloc);
d1707 1
a1707 1
	  *ps = (*ps)->next;
d1725 1
a1725 1
static boolean coff_mkobject PARAMS ((bfd *));
d1727 1
a1727 1
static boolean
d1732 1
d1734 1
a1734 1
  abfd->tdata.coff_obj_data = (struct coff_tdata *) bfd_zalloc (abfd, sizeof (coff_data_type));
d1736 1
a1736 1
    return false;
d1746 1
a1746 1
  return true;
d1751 1
d1762 1
a1762 1
  if (coff_mkobject (abfd) == false)
d1801 1
a1801 1
      xcoff->full_aouthdr = true;
d1805 2
a1806 2
      xcoff->text_align_power = internal_a->o_algntext;
      xcoff->data_align_power = internal_a->o_algndata;
d1815 1
a1815 1
  /* Set the flags field from the COFF header read in */
d1838 1
a1838 1
static boolean
d1843 1
a1843 1
  long machine;
d1847 1
d1851 6
a1859 1
      machine = 0; /* what does this mean? (krk) */
a1867 1
      machine = 0;
a1872 1
      machine = 0;
a1878 1
      machine = 0;
d1886 2
a1887 1
      switch (internal_f->f_flags & F_ARM_ARCHITECTURE_MASK)
d1889 16
a1904 8
        case F_ARM_2:  machine = bfd_mach_arm_2;  break;
        case F_ARM_2a: machine = bfd_mach_arm_2a; break;
        case F_ARM_3:  machine = bfd_mach_arm_3;  break;
        default:
        case F_ARM_3M: machine = bfd_mach_arm_3M; break;
        case F_ARM_4:  machine = bfd_mach_arm_4;  break;
        case F_ARM_4T: machine = bfd_mach_arm_4T; break;
        case F_ARM_5:  machine = bfd_mach_arm_5;  break;
d1944 1
a1944 1
	  return false;
d1992 1
d2016 1
d2018 1
a2018 1
		buf = (bfd_byte *) bfd_malloc (bfd_coff_symesz (abfd));
d2020 1
a2020 2
		    || (bfd_read (buf, 1, bfd_coff_symesz (abfd), abfd)
			!= bfd_coff_symesz (abfd)))
d2023 1
a2023 1
		    return false;
d2039 2
a2040 15
#ifdef POWERMAC
	    /* PowerPC Macs use the same magic numbers as RS/6000
	       (because that's how they were bootstrapped originally),
	       but they are always PowerPC architecture.  */
	    arch = bfd_arch_powerpc;
	    machine = bfd_mach_ppc;
#else
#ifdef XCOFF64
	    arch = bfd_arch_powerpc;
	    machine = bfd_mach_ppc_620;
#else
	    arch = bfd_arch_rs6000;
	    machine = bfd_mach_rs6k;
#endif
#endif /* POWERMAC */
a2066 1
      machine = 0;
d2074 1
a2074 1
      /* !! FIXME this probably isn't the right place for this */
d2083 1
a2083 1
      /* !! FIXME this probably isn't the right place for this */
d2092 19
a2110 1
      /* !! FIXME this probably isn't the right place for this */
a2121 1
      machine = 0;
a2127 1
      machine = 0;
a2133 1
      machine = 0;
a2142 1
      machine = 0;
d2154 1
a2154 1
      /* this TI COFF section should be used by all new TI COFF v0 targets */
d2157 1
d2163 2
a2164 2
      /* this TI COFF section should be used by all new TI COFF v1/2 targets */
      /* TI COFF1 and COFF2 use the target_id field to specify which arch */
d2172 1
d2196 8
a2203 1
    default:			/* Unreadable input file type */
d2209 1
a2209 1
  return true;
d2214 1
a2214 1
static boolean symname_in_debug_hook
d2217 1
a2217 1
static boolean
d2222 1
a2222 1
  return SYMNAME_IN_DEBUG (sym) ? true : false;
d2228 1
a2228 1
  (boolean (*) PARAMS ((bfd *, struct internal_syment *))) bfd_false
d2240 1
a2240 1
static boolean coff_pointerize_aux_hook
d2244 1
a2244 2
/*ARGSUSED*/
static boolean
d2264 1
a2264 1
      /* Return true to indicate that the caller should not do any
d2266 1
a2266 1
      return true;
d2269 1
a2269 1
  /* Return false to indicate that this auxent should be handled by
d2271 1
a2271 1
  return false;
d2279 1
a2279 1
static boolean coff_pointerize_aux_hook
d2283 1
a2283 2
/*ARGSUSED*/
static boolean
d2291 1
a2291 1
  /* Return true if we don't want to pointerize this aux entry, which
d2306 1
a2306 1
/* Print an aux entry.  This returns true if it has printed it.  */
d2308 1
a2308 1
static boolean coff_print_aux
d2312 1
a2312 1
static boolean
d2331 5
a2335 1
	  fprintf (file, "val %5ld", aux->u.auxent.x_csect.x_scnlen.l);
d2341 5
a2345 1
	    fprintf (file, "%4ld", aux->u.auxent.x_csect.x_scnlen.l);
d2359 1
a2359 1
      return true;
d2363 2
a2364 2
  /* Return false to indicate that no special action was taken.  */
  return false;
d2387 1
a2387 1
/* AUX's ld wants relocations to be sorted */
d2403 1
a2403 1
static boolean
d2419 12
a2430 6
      /* sort relocations before we write them out */
      p = (arelent **) bfd_malloc (s->reloc_count * sizeof (arelent *));
      if (p == NULL && s->reloc_count > 0)
	return false;
      memcpy (p, s->orelocation, s->reloc_count * sizeof (arelent *));
      qsort (p, s->reloc_count, sizeof (arelent *), compare_arelent_ptr);
d2434 1
a2434 1
	return false;
d2437 1
a2437 1
      if (s->reloc_count > 0xffff)
d2439 1
a2439 1
	  /* encode real count here as first reloc */
d2441 1
d2443 1
a2443 1
	  /* add one to count *this* reloc (grr) */
d2446 3
a2448 3
	  if (bfd_write ((PTR) & dst, 1, bfd_coff_relsz (abfd), abfd)
	      != bfd_coff_relsz (abfd))
	    return false;
d2456 1
d2471 1
a2471 1
	      int i;
d2474 2
a2475 1
	      for (i = first_undef; outsyms[i]; i++)
d2477 2
a2478 1
		  const char *intable = outsyms[i]->name;
d2480 2
a2481 2
		    /* got a hit, so repoint the reloc */
		    q->sym_ptr_ptr = outsyms + i;
d2502 2
a2503 1
		if (q->sym_ptr_ptr == bfd_abs_section_ptr->symbol_ptr_ptr)
d2523 1
a2523 1
	  /* Work out reloc type from what is required */
d2529 4
a2532 3
	  if (bfd_write ((PTR) & dst, 1, bfd_coff_relsz (abfd), abfd)
	      != bfd_coff_relsz (abfd))
	    return false;
d2541 1
a2541 1
  return true;
d2545 1
a2545 1
   type.  Result is true if we can represent the arch&type, false if not.  */
d2547 1
a2547 1
static boolean
d2567 1
a2567 1
	  return false;
d2569 1
a2569 1
      return true;
d2609 1
a2609 1
	    return false;
d2612 1
a2612 1
	return true;
d2620 1
a2620 1
      return true;
d2625 1
a2625 1
      /* if there's no indication of which version we want, use the default */
d2630 1
a2630 1
          /* we may want to output in a different COFF version */
d2643 1
a2643 1
              return false;
d2646 2
a2647 1
      return true;
d2653 1
a2653 1
      return true;
d2685 2
a2686 1
	  /* FIXME: we do not have F_ARM vaues greater than F_ARM_5.  */
d2691 1
a2691 1
      return true;
d2696 1
a2696 1
      return true;
d2706 1
a2706 1
      return true;
d2712 1
a2712 1
      return true;
d2718 1
a2718 1
      return true;
d2737 1
a2737 1
      return true;
d2744 1
a2744 1
      return true;
d2753 1
a2753 1
	  return true;
d2756 1
a2756 1
	  return true;
d2759 7
a2765 1
	  return true;
d2780 1
a2780 1
      return true;
d2787 1
a2787 1
      return true;
d2798 1
a2798 1
      return true;
d2805 1
a2805 1
      return true;
d2814 1
a2814 1
      return true;
d2821 1
a2821 1
      return true;
d2830 3
a2832 9
#ifdef XCOFF64
      if (bfd_get_mach (abfd) == bfd_mach_ppc_620
	  && !strncmp (abfd->xvec->name,"aix", 3))
	*magicp = U803XTOCMAGIC;
      else
#else
    	*magicp = U802TOCMAGIC;
#endif
      return true;
d2839 1
a2839 1
      return true;
d2845 10
a2854 1
      return true;
d2858 1
a2858 1
      /* Fall through to "return false" below, to avoid
d2863 1
a2863 1
  return false;
d2866 1
a2866 1
static boolean
d2876 1
a2876 1
    return false;
d2878 3
a2880 3
  if (arch != bfd_arch_unknown &&
      coff_set_flags (abfd, &dummy1, &dummy2) != true)
    return false;		/* We can't represent this type */
d2882 1
a2882 1
  return true;			/* We're easy ...  */
d2919 1
a2919 1
static boolean
d2926 1
a2926 1
  boolean align_adjust;
d3018 1
a3018 1
    int count;
d3020 1
a3020 1
    int i;
d3022 1
d3029 2
a3030 1
    section_list = bfd_malloc (sizeof (struct asection *) * (count + 1));
d3032 1
a3032 1
      return false;
d3070 1
d3085 1
a3085 1
  align_adjust = false;
d3095 2
a3096 2
	  current->used_by_bfd =
	    (PTR) bfd_zalloc (abfd, sizeof (struct coff_section_tdata));
d3098 1
a3098 1
	    return false;
d3102 3
a3104 2
	  coff_section_data (abfd, current)->tdata =
	    (PTR) bfd_zalloc (abfd, sizeof (struct pei_section_tdata));
d3106 1
a3106 1
	    return false;
d3129 2
a3130 2
	  /* make sure this section is aligned on the right boundary - by
	     padding the previous section up if necessary */
d3133 28
a3160 2
	  sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);
	  if (previous != (asection *) NULL)
d3162 1
a3162 1
	      previous->_raw_size += sofar - old_sofar;
d3164 3
d3188 1
a3188 1
      /* make sure that this section is of the right size too */
d3213 1
a3213 1
	align_adjust = true;
d3238 2
a3239 2
	  || bfd_write (&b, 1, 1, abfd) != 1)
	return false;
d3248 1
a3248 1
  abfd->output_has_begun = true;
d3250 1
a3250 1
  return true;
d3262 1
a3262 1
static boolean
d3271 1
d3276 2
a3277 1
      CONST char *name;
d3280 2
a3281 2
	  /* only do this if there is a coff representation of the input
	   symbol */
d3307 1
a3307 1
    return true;
d3309 3
a3311 1
  sympp2 = (asymbol **) bfd_alloc (abfd, nsyms * sizeof (asymbol *));
d3313 1
a3313 1
    return false;
d3315 1
d3317 3
a3319 4
    {
      /* @@@@ Generate fake .file symbol, in sympp2[i], and increment i.  */
      abort ();
    }
d3328 1
a3328 1
  return true;
d3333 94
d3429 1
a3429 1
static boolean
d3434 3
a3436 3
  boolean hasrelocs = false;
  boolean haslinno = false;
  boolean hasdebug = false;
d3443 1
a3443 1
  boolean long_section_names;
d3456 1
a3456 1
     put them into the correct asections */
d3460 1
a3460 1
  if (abfd->output_has_begun == false)
d3463 1
a3463 1
	return false;
d3468 1
a3468 1
  /* Work out the size of the reloc and linno areas */
d3474 2
a3475 2
      /* we store the actual reloc count in the first reloc's addr */
      if (current->reloc_count > 0xffff)
d3486 1
a3486 1
  /* Indicate in each section->line_filepos its actual file address */
d3505 2
a3506 2
	  /* extra reloc to hold real count */
	  if (current->reloc_count > 0xffff)
d3525 1
d3531 1
d3535 1
a3535 1
    return false;
d3537 1
a3537 1
  long_section_names = false;
d3543 1
a3543 1
      boolean is_reloc_section = false;
d3548 2
a3549 2
	  is_reloc_section = true;
	  hasrelocs = true;
d3570 1
a3570 1
	    long_section_names = true;
d3601 2
a3602 4
      /*
	 If this section has no size or is unloadable then the scnptr
	 will be 0 too
	 */
d3605 1
a3605 3
	{
	  section.s_scnptr = 0;
	}
d3607 2
a3608 3
	{
	  section.s_scnptr = current->filepos;
	}
d3616 1
a3616 1
	hasrelocs = true;
d3619 1
a3619 1
	haslinno = true;
d3622 1
a3622 1
	hasdebug = true;
d3638 1
a3638 3
	{
	  text_sec = current;
	}
d3640 1
a3640 3
	{
	  data_sec = current;
	}
d3642 1
a3642 3
	{
	  bss_sec = current;
	}
d3650 1
a3650 1
      /* TI COFF puts the alignment power in bits 8-11 of the flags */
d3669 2
d3672 2
a3673 3
	      || bfd_write ((PTR) (&buff), 1, bfd_coff_scnhsz (abfd), abfd)
	      != bfd_coff_scnhsz (abfd))
	    return false;
d3772 1
d3781 1
d3794 1
d3796 2
a3797 3
	      || bfd_write ((PTR) &buff, 1, bfd_coff_scnhsz (abfd), abfd)
	      != bfd_coff_scnhsz (abfd))
	    return false;
d3801 1
d3807 1
a3807 2
  /*
     We will NOT put a fucking timestamp in the header here. Every time you
d3810 1
a3810 2
     same but is not a reasonable time. -- gnu@@cygnus.com
     */
a3811 1

d3820 1
d3826 1
d3848 2
a3849 2
  /* target id is used in TI COFF v1 and later; COFF0 won't use this field,
     but it doesn't hurt to set it internally */
d3856 2
a3857 4
  /*
     FIXME, should do something about the other byte orders and
     architectures.
     */
d3868 1
a3868 2
  /* Set up architecture-dependent stuff */

d3872 1
d3881 2
a3882 3
     * is a .shbss or a .shdata section, if so then set the magic
     * number to indicate a shared data executable.
     */
d3884 1
a3884 1
      internal_a.magic = SHMAGIC; /* Shared magic */
d3887 1
a3887 1
      internal_a.magic = NMAGIC; /* Assume separate i/d */
d3987 5
d4002 1
a4002 1
  /* Now should write relocs, strings, syms */
d4010 1
a4010 1
	return false;
d4013 1
a4013 1
	return false;
d4016 1
a4016 1
	return false;
d4018 1
a4018 1
	return false;
d4020 1
a4020 1
	return false;
d4028 1
a4028 1
	return false;
d4041 1
a4041 1
		    BFD_ALIGN (sym_base, COFF_PAGE_SIZE) - 1,
d4043 2
a4044 2
	  || bfd_write (&b, 1, 1, abfd) != 1)
	return false;
d4147 1
a4147 1
	      if (bfd_get_mach (abfd) == 0)
d4163 1
a4163 1
    return false;
d4167 1
a4167 1
    bfd_size_type amount;
d4169 1
a4169 1
    buff = bfd_malloc (bfd_coff_filhsz (abfd));
d4171 1
a4171 1
      return false;
d4173 2
a4174 2
    bfd_coff_swap_filehdr_out (abfd, (PTR) & internal_f, (PTR) buff);
    amount = bfd_write ((PTR) buff, 1, bfd_coff_filhsz (abfd), abfd);
d4179 1
a4179 1
      return false;
d4185 1
a4185 1
	 include/coff/pe.h sets AOUTSZ == sizeof (PEAOUTHDR)) */
d4187 1
a4187 1
      bfd_size_type amount;
d4189 1
a4189 1
      buff = bfd_malloc (bfd_coff_aoutsz (abfd));
d4191 1
a4191 1
	return false;
d4193 2
a4194 2
      coff_swap_aouthdr_out (abfd, (PTR) & internal_a, (PTR) buff);
      amount = bfd_write ((PTR) buff, 1, bfd_coff_aoutsz (abfd), abfd);
d4199 6
a4204 1
	return false;
d4218 2
a4219 2
      if (bfd_write ((PTR) &buff, 1, size, abfd) != size)
	return false;
d4223 1
a4223 1
  return true;
d4226 1
a4226 1
static boolean
d4234 1
a4234 1
  if (abfd->output_has_begun == false)	/* set by bfd.c handler */
d4237 1
a4237 1
	return false;
d4261 1
a4261 1
      Gvran Uddeborg <gvran@@uddeborg.pp.se> */
d4283 1
a4283 1
    return true;
d4285 2
a4286 2
  if (bfd_seek (abfd, (file_ptr) (section->filepos + offset), SEEK_SET) != 0)
    return false;
d4288 4
a4291 5
  if (count != 0)
    {
      return (bfd_write (location, 1, count, abfd) == count) ? true : false;
    }
  return true;
d4294 1
a4294 1
static boolean
d4303 1
a4303 1
	  return false;
d4307 1
a4307 1
	  return false;
d4311 1
a4311 1
	return false;
d4315 1
a4315 1
  return true;
d4321 1
a4321 1
buy_and_read (abfd, where, seek_direction, size)
d4324 1
a4324 2
     int seek_direction;
     size_t size;
d4329 2
a4330 2
  if (bfd_seek (abfd, where, seek_direction) != 0
      || bfd_read (area, 1, size, abfd) != size)
d4359 1
a4359 1
static boolean
d4366 1
d4370 4
a4373 7
  native_lineno = (LINENO *) buy_and_read (abfd,
					   asect->line_filepos,
					   SEEK_SET,
					   (size_t) (bfd_coff_linesz (abfd) *
						     asect->lineno_count));
  lineno_cache =
    (alent *) bfd_alloc (abfd, (size_t) ((asect->lineno_count + 1) * sizeof (alent)));
d4375 1
a4375 1
    return false;
d4385 1
d4391 2
a4392 2
	      boolean warned;
	      long symndx;
d4395 1
a4395 1
	      warned = false;
d4398 1
a4398 1
		  || (unsigned long) symndx >= obj_raw_syment_count (abfd))
d4402 1
a4402 1
		     bfd_get_filename (abfd), dst.l_addr.l_symndx);
d4404 1
a4404 1
		  warned = true;
d4416 1
a4416 1
		     bfd_get_filename (abfd),
d4436 1
a4436 1
  return true;
d4443 1
a4443 1
static boolean
d4450 1
a4450 1

d4454 1
a4454 1
    return true;
d4456 1
a4456 1
  /* Read in the symbol table */
d4458 1
a4458 3
    {
      return (false);
    }				/* on error */
d4460 6
a4465 5
  /* Allocate enough room for all the symbols in cached form */
  cached_area = ((coff_symbol_type *)
		 bfd_alloc (abfd,
			    (obj_raw_syment_count (abfd)
			     * sizeof (coff_symbol_type))));
d4467 3
a4469 6
  if (cached_area == NULL)
    return false;
  table_ptr = ((unsigned int *)
	       bfd_alloc (abfd,
			  (obj_raw_syment_count (abfd)
			   * sizeof (unsigned int))));
d4472 1
a4472 1
    return false;
d4478 1
d4491 1
a4491 1
	  dst->done_lineno = false;
d4502 1
a4502 2
	      /* Fall through to next case */

d4515 1
a4515 1
	    case C_SYSTEM:	/* System Wide variable */
d4518 1
a4518 1
            /* In PE, 0x68 (104) denotes a section symbol */
d4581 2
a4582 1
		dst->symbol.flags = BSF_WEAK;
d4585 1
a4585 3
		{
		  dst->symbol.flags = BSF_LOCAL;
		}
a4586 1

d4588 1
a4588 1
		dst->symbol.flags = BSF_WEAK;
d4592 1
a4592 1
	    case C_STAT:	/* static			 */
d4594 1
a4594 1
	    case C_LEAFSTAT:	/* static leaf procedure        */
d4597 3
a4599 3
            case C_THUMBSTAT:   /* Thumb static                  */
            case C_THUMBLABEL:  /* Thumb label                   */
            case C_THUMBSTATFUNC:/* Thumb static function        */
d4601 1
a4601 1
	    case C_LABEL:	/* label			 */
d4624 3
a4626 3
	    case C_MOS:	/* member of structure	 */
	    case C_EOS:	/* end of structure		 */
#ifdef NOTDEF			/* C_AUTOARG has the same value */
d4628 1
a4628 1
	    case C_GLBLREG:	/* A29k-specific storage class */
d4631 3
a4633 3
	    case C_REGPARM:	/* register parameter		 */
	    case C_REG:	/* register variable		 */
              /* C_AUTOARG conflictes with TI COFF C_UEXT */
d4636 1
a4636 1
	    case C_AUTOARG:	/* 960-specific storage class */
d4639 1
a4639 1
	    case C_TPDEF:	/* type definition		 */
d4641 6
a4646 6
	    case C_AUTO:	/* automatic variable */
	    case C_FIELD:	/* bit field */
	    case C_ENTAG:	/* enumeration tag		 */
	    case C_MOE:	/* member of enumeration	 */
	    case C_MOU:	/* member of union		 */
	    case C_UNTAG:	/* union tag			 */
d4651 2
a4652 2
	    case C_FILE:	/* file name			 */
	    case C_STRTAG:	/* structure tag		 */
d4672 2
a4673 2
	    case C_BINCL:	/* beginning of include file     */
	    case C_EINCL:	/* ending of include file        */
d4714 3
a4716 3
	    case C_BLOCK:	/* ".bb" or ".eb"		 */
	    case C_FCN:		/* ".bf" or ".ef" (or PE ".lf")  */
	    case C_EFCN:	/* physical end of function	 */
d4738 1
a4738 1
	    case C_STATLAB:	/* Static load time label */
d4751 3
a4753 3
	    case C_EXTDEF:	/* external definition		 */
	    case C_ULABEL:	/* undefined label		 */
	    case C_USTATIC:	/* undefined static		 */
d4756 2
a4757 2
               class to represent a section symbol */
	    case C_LINE:	/* line # reformatted as symbol table entry */
d4759 1
a4759 1
	    case C_ALIAS:	/* duplicate tag		 */
d4761 1
a4761 1
	      /* New storage classes for TI COFF */
d4763 1
a4763 1
	    case C_UEXT:	/* Tentative external definition */
d4765 2
a4766 2
	    case C_EXTLAB:	/* External load time label */
	    case C_HIDDEN:	/* ext symbol in dmert public lib */
d4770 1
a4770 1
		 bfd_get_filename (abfd), src->u.syment.n_sclass,
d4786 2
a4787 2
	}			/* walk the native symtab */
    }				/* bfdize the native symtab */
d4794 1
a4794 1
  /* Slurp the line tables for each section too */
d4797 1
d4805 2
a4806 1
  return true;
d4903 1
a4903 1
	 bfd_get_filename (abfd),
d4958 1
a4958 1
static boolean
a4966 1

d4968 1
d4971 1
a4971 1
    return true;
d4973 1
a4973 1
    return true;
d4975 1
a4975 1
    return true;
d4977 5
a4981 9
    return false;
  native_relocs =
    (RELOC *) buy_and_read (abfd,
			    asect->rel_filepos,
			    SEEK_SET,
			    (size_t) (bfd_coff_relsz (abfd) *
				      asect->reloc_count));
  reloc_cache = (arelent *)
    bfd_alloc (abfd, (size_t) (asect->reloc_count * sizeof (arelent)));
d4984 1
a4984 1
    return false;
d5010 1
a5010 1
		 bfd_get_filename (abfd), dst.r_symndx);
d5032 1
a5032 1
	 Note that symbols which used to be common must be left alone */
d5034 1
a5034 1
      /* Calculate any reloc addend by looking at the symbol */
d5040 1
a5040 1
      /* Fill in the cache_ptr->howto field from dst.r_type */
d5048 1
a5048 1
	     bfd_get_filename (abfd), dst.r_type, (long) dst.r_vaddr);
d5050 1
a5050 1
	  return false;
d5055 1
a5055 1
  return true;
d5108 3
a5110 3
      /* this section has relocs made up by us, they are not in the
       file, so take them out of their chain and place them into
       the data area provided */
d5112 1
a5117 1

d5188 4
d5215 1
d5232 1
a5232 1
static boolean coff_link_output_has_begun
d5235 1
a5235 1
static boolean
d5246 1
a5246 1
static boolean coff_final_link_postscript
d5249 1
a5249 1
static boolean
d5254 1
a5254 1
  return true;
d5310 1
a5310 1
  true,
d5312 1
a5312 1
  false,
d5315 1
a5315 1
  true,
d5317 1
a5317 1
  false,
d5321 1
a5321 1
  true,
d5323 1
a5323 1
  false,
d5406 8
@


1.6
log
@Automatic cvs merge. Dread what I will have to fix after this excuse
of a program is done...
@
text
@d2 2
a3 1
   Copyright 1990, 91, 92, 93, 94, 95, 96, 97, 98, 99, 2000
a178 1

a303 1

d343 3
d356 13
d406 1
a406 1
  else if (!strcmp (sec_name, ".debug"))
d408 5
a412 5
#ifdef STYP_DEBUG
      styp_flags = STYP_DEBUG;
#else
      styp_flags = STYP_INFO;
#endif
d416 6
a421 1
      styp_flags = STYP_INFO;
d423 1
d460 10
d527 2
a528 2
  if (sec_flags & SEC_LINK_ONCE) 
    styp_flags |= IMAGE_SCN_LNK_COMDAT; 
d536 1
a536 1
  styp_flags |= IMAGE_SCN_MEM_READ;       /* always readable. */
d544 1
a544 1
  return styp_flags; 
d567 10
d648 1
a648 1
  else if (strcmp (name, ".debug") == 0
d652 3
a704 9
/* The PE version; see above for the general comments.

   Since to set the SEC_LINK_ONCE and associated flags, we have to
   look at the symbol table anyway, we return the symbol table index
   of the symbol being used as the COMDAT symbol.  This is admittedly
   ugly, but there's really nowhere else that we have access to the
   required information.  FIXME: Is the COMDAT symbol index used for
   any purpose other than objdump?  */

d706 3
a708 2
styp_to_sec_flags (abfd, hdr, name, section)
     bfd *abfd ATTRIBUTE_UNUSED;
d714 28
a741 2
  long styp_flags = internal_s->s_flags;
  flagword sec_flags = 0;
d743 1
a743 20
  if (styp_flags & STYP_DSECT)
    abort ();  /* Don't know what to do */
#ifdef SEC_NEVER_LOAD
  if (styp_flags & STYP_NOLOAD)
    sec_flags |= SEC_NEVER_LOAD;
#endif
  if (styp_flags & STYP_GROUP)
    abort ();  /* Don't know what to do */
  /* skip IMAGE_SCN_TYPE_NO_PAD */
  if (styp_flags & STYP_COPY)
    abort ();  /* Don't know what to do */
  if (styp_flags & IMAGE_SCN_CNT_CODE)
    sec_flags |= SEC_CODE | SEC_ALLOC | SEC_LOAD;
  if (styp_flags & IMAGE_SCN_CNT_INITIALIZED_DATA)
    sec_flags |= SEC_DATA | SEC_ALLOC | SEC_LOAD;
  if (styp_flags & IMAGE_SCN_CNT_UNINITIALIZED_DATA)
    sec_flags |= SEC_ALLOC;
  if (styp_flags & IMAGE_SCN_LNK_OTHER)
    abort ();  /* Don't know what to do */
  if (styp_flags & IMAGE_SCN_LNK_INFO)
d745 41
a785 62
      /* We mark these as SEC_DEBUGGING, but only if COFF_PAGE_SIZE is
	 defined.  coff_compute_section_file_positions uses
	 COFF_PAGE_SIZE to ensure that the low order bits of the
	 section VMA and the file offset match.  If we don't know
	 COFF_PAGE_SIZE, we can't ensure the correct correspondence,
	 and demand page loading of the file will fail.  */
#ifdef COFF_PAGE_SIZE
      sec_flags |= SEC_DEBUGGING;
#endif
    }
  if (styp_flags & STYP_OVER)
    abort ();  /* Don't know what to do */
  if (styp_flags & IMAGE_SCN_LNK_REMOVE)
    sec_flags |= SEC_EXCLUDE;

  if (styp_flags & IMAGE_SCN_MEM_SHARED)
    sec_flags |= SEC_SHARED;
  /* COMDAT: see below */
  if (styp_flags & IMAGE_SCN_MEM_DISCARDABLE)
    sec_flags |= SEC_DEBUGGING;
  if (styp_flags & IMAGE_SCN_MEM_NOT_CACHED)
    abort ();/* Don't know what to do */
  if (styp_flags & IMAGE_SCN_MEM_NOT_PAGED)
    abort (); /* Don't know what to do */

  /* We infer from the distinct read/write/execute bits the settings
     of some of the bfd flags; the actual values, should we need them,
     are also in pei_section_data (abfd, section)->pe_flags.  */

  if (styp_flags & IMAGE_SCN_MEM_EXECUTE)
    sec_flags |= SEC_CODE;   /* Probably redundant */
  /* IMAGE_SCN_MEM_READ is simply ignored, assuming it always to be true. */
  if ((styp_flags & IMAGE_SCN_MEM_WRITE) == 0)
    sec_flags |= SEC_READONLY;

  /* COMDAT gets very special treatment.  */
  if (styp_flags & IMAGE_SCN_LNK_COMDAT)
    {
      sec_flags |= SEC_LINK_ONCE;

      /* Unfortunately, the PE format stores essential information in
         the symbol table, of all places.  We need to extract that
         information now, so that objdump and the linker will know how
         to handle the section without worrying about the symbols.  We
         can't call slurp_symtab, because the linker doesn't want the
         swapped symbols.  */

      /* COMDAT sections are special.  The first symbol is the section
	 symbol, which tells what kind of COMDAT section it is.  The
	 second symbol is the "comdat symbol" - the one with the
	 unique name.  GNU uses the section symbol for the unique
	 name; MS uses ".text" for every comdat section.  Sigh.  - DJ */

      /* This is not mirrored in sec_to_styp_flags(), but there
	 doesn't seem to be a need to, either, and it would at best be
	 rather messy.  */

      if (_bfd_coff_get_external_symbols (abfd))
	{
	  bfd_byte *esymstart, *esym, *esymend;
	  int seen_state = 0;
	  char *target_name = NULL;
d787 2
a788 2
	  esymstart = esym = (bfd_byte *) obj_coff_external_syms (abfd);
	  esymend = esym + obj_raw_syment_count (abfd) * bfd_coff_symesz (abfd);
d790 1
a790 1
	  while (esym < esymend)
d792 4
a795 3
	      struct internal_syment isym;
	      char buf[SYMNMLEN + 1];
	      const char *symname;
d797 1
a797 1
	      bfd_coff_swap_sym_in (abfd, (PTR) esym, (PTR) &isym);
d799 19
a817 4
	      if (sizeof (internal_s->s_name) > SYMNMLEN)
		{
		  /* This case implies that the matching symbol name
                     will be in the string table.  */
a818 1
		}
d820 4
a823 25
	      if (isym.n_scnum == section->target_index)
		{
		  /* According to the MSVC documentation, the first
		     TWO entries with the section # are both of
		     interest to us.  The first one is the "section
		     symbol" (section name).  The second is the comdat
		     symbol name.  Here, we've found the first
		     qualifying entry; we distinguish it from the
		     second with a state flag.

		     In the case of gas-generated (at least until that
		     is fixed) .o files, it isn't necessarily the
		     second one.  It may be some other later symbol.

		     Since gas also doesn't follow MS conventions and
		     emits the section similar to .text$<name>, where
		     <something> is the name we're looking for, we
		     distinguish the two as follows:

		     If the section name is simply a section name (no
		     $) we presume it's MS-generated, and look at
		     precisely the second symbol for the comdat name.
		     If the section name has a $, we assume it's
		     gas-generated, and look for <something> (whatever
		     follows the $) as the comdat symbol.  */
d825 2
a826 2
		  /* All 3 branches use this */
		  symname = _bfd_coff_internal_syment_name (abfd, &isym, buf);
d828 4
a831 2
		  if (symname == NULL)
		    abort ();
d833 8
a840 34
		  switch (seen_state)
		    {
		    case 0:
		      {
			/* The first time we've seen the symbol.  */
			union internal_auxent aux;

			seen_state = 1;

			/* If it isn't the stuff we're expecting, die;
			   The MS documentation is vague, but it
			   appears that the second entry serves BOTH
			   as the comdat symbol and the defining
			   symbol record (either C_STAT or C_EXT,
			   possibly with an aux entry with debug
			   information if it's a function.)  It
			   appears the only way to find the second one
			   is to count.  (On Intel, they appear to be
			   adjacent, but on Alpha, they have been
			   found separated.)

			   Here, we think we've found the first one,
			   but there's some checking we can do to be
			   sure.  */

			if (! (isym.n_sclass == C_STAT
			       && isym.n_type == T_NULL
			       && isym.n_value == 0))
			  abort ();

			/* FIXME LATER: MSVC generates section names
			   like .text for comdats.  Gas generates
			   names like .text$foo__Fv (in the case of a
			   function).  See comment above for more.  */
d842 15
a856 4
			if (strcmp (name, symname) != 0)
			  abort ();
  
			/* This is the section symbol.  */
d858 5
a862 34
			bfd_coff_swap_aux_in (abfd, (PTR) (esym + bfd_coff_symesz (abfd)),
					      isym.n_type, isym.n_sclass,
					      0, isym.n_numaux, (PTR) &aux);

			target_name = strchr (name, '$');
			if (target_name != NULL)
			  {
			    /* Gas mode.  */
			    seen_state = 2;
			    /* Skip the `$'.  */
			    target_name += 1;
			  }

			/* FIXME: Microsoft uses NODUPLICATES and
			   ASSOCIATIVE, but gnu uses ANY and
			   SAME_SIZE.  Unfortunately, gnu doesn't do
			   the comdat symbols right.  So, until we can
			   fix it to do the right thing, we are
			   temporarily disabling comdats for the MS
			   types (they're used in DLLs and C++, but we
			   don't support *their* C++ libraries anyway
			   - DJ.  */

			/* Cygwin does not follow the MS style, and
			   uses ANY and SAME_SIZE where NODUPLICATES
			   and ASSOCIATIVE should be used.  For
			   Interix, we just do the right thing up
			   front.  */

			switch (aux.x_scn.x_comdat)
			  {
			  case IMAGE_COMDAT_SELECT_NODUPLICATES:
#ifdef STRICT_PE_FORMAT 
			    sec_flags |= SEC_LINK_DUPLICATES_ONE_ONLY;
d864 1
a864 1
			    sec_flags &= ~SEC_LINK_ONCE;
d866 9
a874 1
			    break;
d876 13
a888 21
			  case IMAGE_COMDAT_SELECT_ANY:
			    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
			    break;

			  case IMAGE_COMDAT_SELECT_SAME_SIZE:
			    sec_flags |= SEC_LINK_DUPLICATES_SAME_SIZE;
			    break;

			  case IMAGE_COMDAT_SELECT_EXACT_MATCH:
			    /* Not yet fully implemented ??? */
			    sec_flags |= SEC_LINK_DUPLICATES_SAME_CONTENTS;
			    break;

			  /* debug$S gets this case; other
                             implications ??? */

			  /* There may be no symbol... we'll search
			     the whole table... Is this the right
			     place to play this game? Or should we do
			     it when reading it in.  */
			  case IMAGE_COMDAT_SELECT_ASSOCIATIVE:
d890 2
a891 2
			    /* FIXME: This is not currently implemented.  */
			    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
d893 1
a893 1
			    sec_flags &= ~SEC_LINK_ONCE;
d895 1
a895 1
			    break;
d897 8
a904 8
			  default:  /* 0 means "no symbol" */
			    /* debug$F gets this case; other
                               implications ??? */
			    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
			    break;
			  }
	 	      }
		      break;
d906 2
a907 2
		    case 2:
		      /* Gas mode: the first matching on partial name.  */
d912 14
a925 30
		      /* Is this the name we're looking for? */
		      if (strcmp (target_name, 
				  symname + (TARGET_UNDERSCORE ? 1 : 0)) != 0)
			{
			    /* Not the name we're looking for */
	                    esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd);
			    continue;
			}
		      /* Fall through.  */
		    case 1: 
		      /* MSVC mode: the lexically second symbol (or
			 drop through from the above).  */
		      {
		        char *newname;

			/* This must the the second symbol with the
			   section #.  It is the actual symbol name.
			   Intel puts the two adjacent, but Alpha (at
			   least) spreads them out.  */

		        section->comdat = 
			  bfd_alloc (abfd, sizeof (struct bfd_comdat_info));
		        if (section->comdat == NULL)
		          abort ();
		        section->comdat->symbol =
			  (esym - esymstart) / bfd_coff_symesz (abfd);

		        newname = bfd_alloc (abfd, strlen (symname) + 1);
		        if (newname == NULL)
		          abort ();
d927 9
a935 2
		        strcpy (newname, symname);
		        section->comdat->name = newname;
d937 2
a938 1
		      }
d940 7
a946 3
		      goto breakloop;
		    }
		}
d948 1
a948 1
	      esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd);
a949 1
	  breakloop:
d951 130
d1202 2
d1306 1
a1306 1
.       flagword flags, 
d1311 1
a1311 1
.       boolean collect, 
d1401 6
d1544 2
a1545 2
     bfd *abfd;
     asection *section;
d1610 1
a1610 1
  /* TI tools hijack bits 8-11 for the alignment */
d1613 3
d1617 4
d1685 17
d1826 5
d1844 1
a1844 1
#ifdef ARM 
d1849 1
a1849 1
  
d1884 1
a1884 1
      break; 
d1895 6
d2009 3
d2015 1
d2036 1
a2036 1
		    || (bfd_read (buf, 1, bfd_coff_symesz (abfd), abfd) 
d2042 1
a2042 1
		coff_swap_sym_in (abfd, (PTR) buf, (PTR) &sym);
d2061 5
a2065 1
	    machine = 0;
d2068 2
a2069 1
	    machine = 6000;
d2075 1
a2075 1
	    machine = 601;
d2079 1
a2079 1
	    machine = 620;
d2083 1
a2083 1
	    machine = 0;
d2087 1
a2087 1
	    machine = 6000;
d2169 31
d2242 4
d2431 16
d2461 1
a2461 1
	     have to look up the output symbol here. */
d2612 27
d2656 1
a2656 1
	  
d2659 1
a2659 1
	  
d2674 4
a2677 1
	case bfd_mach_arm_5T: * flagsp |= F_ARM_5;  break; /* XXX - we do not have an F_ARM_5T */
d2691 1
a2691 1
      /* Just overwrite the usual value if we're doing Lynx. */
d2703 6
d2722 1
a2722 1
      /* Just overwrite the usual value if we're doing Lynx. */
d2777 1
a2777 1
      /* Just overwrite the usual value if we're doing Lynx. */
d2807 1
a2807 1
#ifdef U802TOCMAGIC
d2812 8
a2819 1
      *magicp = U802TOCMAGIC;
d2829 1
a2829 1
      
d2836 3
a2838 3
    default:			/* Unknown architecture */
      /* return false;  -- fall through to "return false" below, to avoid
       "statement never reached" errors on the one below. */
a2844 1

d2861 1
a2861 1
  return true;			/* We're easy ... */
d2889 1
a2889 1
/* Calculate the file position for each section. */
d2894 1
a2894 1
#ifdef TIC80COFF
d2932 2
a2933 2
	      if (len > SYMNMLEN)
		sz += len + 3;
d2951 1
a2951 1
  if (coff_data (abfd)->link_info) 
d3100 1
a3100 1
	 doesn't yet page from files... */
d3289 1
a3289 1
  unsigned long reloc_size = 0;
d3320 10
a3329 1
    reloc_size += current->reloc_count * bfd_coff_relsz (abfd);
d3352 5
d3431 3
d3476 1
d3484 1
d3505 1
a3505 1
#else
d3507 1
d3510 2
d3528 1
a3528 1
	           != bfd_coff_scnhsz (abfd))
d3650 1
a3650 1
	           != bfd_coff_scnhsz (abfd))
d3656 1
a3656 1
  /* OK, now set up the filehdr... */
d3701 5
d3732 1
a3732 1
    /* ...and the "opt"hdr... */
d3747 4
d3794 1
a3794 1
#endif 
d3804 1
a3804 1
#endif 
d3815 5
d3875 1
a3875 1
  else if (long_section_names)
d4016 1
a4016 1
  
d4020 1
a4020 1
    
d4022 1
a4022 1
    if (buff == NULL) 
d4024 2
a4025 2
    
    coff_swap_filehdr_out (abfd, (PTR) & internal_f, (PTR) buff);
d4027 1
a4027 1
    
d4029 1
a4029 1
    
d4033 1
a4033 1
  
d4036 2
a4037 2
      /* Note that peicode.h fills in a PEAOUTHDR, not an AOUTHDR. 
	 include/coff/pe.h sets AOUTSZ == sizeof(PEAOUTHDR)) */
d4042 1
a4042 1
      if (buff == NULL) 
d4044 1
a4044 1
      
d4047 1
a4047 1
      
d4049 1
a4049 1
      
d4107 1
a4107 1
  
d4128 1
a4128 1
       see if the filepos has not been set. */
d4236 1
a4236 1
	  coff_swap_lineno_in (abfd, src, &dst);
d4285 1
a4285 1
  /* FIXME, free native_lineno here, or use alloca or something. */
d4405 1
a4405 1
		  break; 
d4452 1
a4452 1
#if defined ARM 
d4489 2
a4490 1
#ifndef TIC80COFF
d4571 1
a4571 1
	    case C_FCN:		/* ".bf" or ".ef" (or PE ".lf")	 */
d4594 5
d4617 2
a4618 2
	      /* New storage classes for TIc80 */
#ifdef TIC80COFF
a4620 1
	    case C_STATLAB:	/* Static load time label */
a4789 1

a4843 1

a4963 1

a4985 2


d5173 10
d5214 1
a5214 1
#ifndef coff_bfd_copy_private_bfd_data 
d5226 1
a5226 1
#ifndef coff_bfd_print_private_bfd_data 
@


1.5
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2585 6
@


1.4
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 2
a3 1
   Copyright 1990, 91, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d134 1
a134 1
	and @@code{coff_swap_linno_in}. @@code{GDB} reads the symbol
d314 30
d347 7
a353 6
/*
 * Return a word with STYP_* (scnhdr.s_flags) flags set to represent the
 * incoming SEC_* flags.  The inverse of this function is styp_to_sec_flags().
 * NOTE: If you add to/change this routine, you should mirror the changes
 * 	in styp_to_sec_flags().
 */
a402 6
#ifdef COFF_WITH_PE
  else if (!strcmp (sec_name, ".edata"))
    {
      styp_flags = STYP_DATA;
    }
#endif
d444 43
a486 2
#ifdef COFF_WITH_PE
  if (sec_flags & SEC_LINK_ONCE)
d488 24
a511 1
#endif
d513 1
a513 1
  return (styp_flags);
d515 10
a524 7
/*
 * Return a word with SEC_* flags set to represent the incoming
 * STYP_* flags (from scnhdr.s_flags).   The inverse of this
 * function is sec_to_styp_flags().
 * NOTE: If you add to/change this routine, you should mirror the changes
 *      in sec_to_styp_flags().
 */
d526 2
a527 2
styp_to_sec_flags (abfd, hdr, name)
     bfd *abfd;
d530 1
d576 1
a576 1
#ifdef COFF_PAGE_SIZE
d645 69
a713 1
#ifdef COFF_WITH_PE
d717 21
d749 10
d761 3
a763 1
	  bfd_byte *esym, *esymend;
d765 2
a766 2
	  esym = (bfd_byte *) obj_coff_external_syms (abfd);
	  esymend = esym + obj_raw_syment_count (abfd) * SYMESZ;
d771 2
d783 1
a783 3
	      if (isym.n_sclass == C_STAT
		  && isym.n_type == T_NULL
		  && isym.n_numaux == 1)
d785 23
a807 2
		  char buf[SYMNMLEN + 1];
		  const char *symname;
d809 1
d811 1
d815 1
a815 1
		  if (strcmp (name, symname) == 0)
d817 37
a853 1
		      union internal_auxent aux;
d855 76
a930 1
		      /* This is the section symbol.  */
d932 2
a933 3
		      bfd_coff_swap_aux_in (abfd, (PTR) (esym + SYMESZ),
					    isym.n_type, isym.n_sclass,
					    0, isym.n_numaux, (PTR) &aux);
d935 6
a940 1
		      switch (aux.x_scn.x_comdat)
d942 3
a944 21
			case IMAGE_COMDAT_SELECT_NODUPLICATES:
			  sec_flags |= SEC_LINK_DUPLICATES_ONE_ONLY;
			  break;

			default:
			case IMAGE_COMDAT_SELECT_ANY:
			  sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
			  break;

			case IMAGE_COMDAT_SELECT_SAME_SIZE:
			  sec_flags |= SEC_LINK_DUPLICATES_SAME_SIZE;
			  break;

			case IMAGE_COMDAT_SELECT_EXACT_MATCH:
			  sec_flags |= SEC_LINK_DUPLICATES_SAME_CONTENTS;
			  break;

			case IMAGE_COMDAT_SELECT_ASSOCIATIVE:
			  /* FIXME: This is not currently implemented.  */
			  sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
			  break;
d946 22
d969 6
a974 1
		      break;
d978 1
a978 1
	      esym += (isym.n_numaux + 1) * SYMESZ;
d980 1
d983 10
d995 1
a995 1
  return (sec_flags);
d998 2
d1008 16
d1099 1
d1102 1
d1132 2
a1133 1
.       const char *name));
d1170 1
a1170 1
. boolean (*_bfd_coff_sym_is_global) PARAMS ((
d1173 1
a1173 1
. void (*_bfd_coff_compute_section_file_positions) PARAMS ((
d1213 7
d1261 1
d1265 2
d1287 3
a1289 2
.#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name)\
.        ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook) (abfd, scnhdr, name))
d1312 2
a1313 2
.#define bfd_coff_sym_is_global(abfd, sym)\
.        ((coff_backend_info (abfd)->_bfd_coff_sym_is_global)\
d1336 5
d1347 1
a1347 1
     bfd * abfd;
d1365 1
a1365 1
  if (internal_f->f_opthdr != 0 && AOUTSZ != internal_f->f_opthdr)
d1372 62
a1433 4
/*
   initialize a section structure with information peculiar to this
   particular implementation of coff
*/
d1437 2
a1438 2
     bfd * abfd;
     asection * section;
d1440 2
d1458 19
a1476 20
  coffsymbol (section->symbol)->native =
    (combined_entry_type *) bfd_zalloc (abfd,
					sizeof (combined_entry_type) * 10);

  /* The .stab section must be aligned to 2**2 at most, because
     otherwise there may be gaps in the section which gdb will not
     know how to interpret.  Examining the section name is a hack, but
     that is also how gdb locates the section.
     We need to handle the .ctors and .dtors sections similarly, to
     avoid introducing null words in the tables.  */
  if (COFF_DEFAULT_SECTION_ALIGNMENT_POWER > 2
      && (strncmp (section->name, ".stab", 5) == 0
	  || strcmp (section->name, ".ctors") == 0
	  || strcmp (section->name, ".dtors") == 0))
    section->alignment_power = 2;

  /* Similarly, the .stabstr section must be aligned to 2**0 at most.  */
  if (COFF_DEFAULT_SECTION_ALIGNMENT_POWER > 0
      && strncmp (section->name, ".stabstr", 8) == 0)
    section->alignment_power = 0;
d1481 1
a1481 1
#ifdef I960
d1485 2
d1489 1
a1489 1
     bfd * abfd;
d1496 2
d1501 5
d1509 1
a1509 1
#else /* ! I960 */
d1525 2
d1529 1
a1529 1
     bfd * abfd;
a1542 32
#ifdef POWERPC_LE_PE
  if (strcmp (section->name, ".idata$2") == 0)
    {
      section->alignment_power = 0;
    }
  else if (strcmp (section->name, ".idata$3") == 0)
    {
      section->alignment_power = 0;
    }
  else if (strcmp (section->name, ".idata$4") == 0)
    {
      section->alignment_power = 2;
    }
  else if (strcmp (section->name, ".idata$5") == 0)
    {
      section->alignment_power = 2;
    }
  else if (strcmp (section->name, ".idata$6") == 0)
    {
      section->alignment_power = 1;
    }
  else if (strcmp (section->name, ".reloc") == 0)
    {
      section->alignment_power = 1;
    }
  else if (strncmp (section->name, ".stab", 5) == 0)
    {
      section->alignment_power = 2;
    }
#endif

#ifdef COFF_IMAGE_WITH_PE
d1544 4
a1547 2
     section, while the s_size field holds the raw size.  */
  if (hdr->s_paddr != 0)
d1549 3
a1551 1
      if (coff_section_data (abfd, section) == NULL)
d1553 2
a1554 7
	  section->used_by_bfd =
	    (PTR) bfd_zalloc (abfd, sizeof (struct coff_section_tdata));
	  if (section->used_by_bfd == NULL)
	    {
	      /* FIXME: Return error.  */
	      abort ();
	    }
d1556 6
a1561 1
      if (pei_section_data (abfd, section) == NULL)
d1563 2
a1564 7
	  coff_section_data (abfd, section)->tdata =
	    (PTR) bfd_zalloc (abfd, sizeof (struct pei_section_tdata));
	  if (coff_section_data (abfd, section)->tdata == NULL)
	    {
	      /* FIXME: Return error.  */
	      abort ();
	    }
a1565 1
      pei_section_data (abfd, section)->virt_size = hdr->s_paddr;
d1567 2
a1568 1
#endif
d1570 1
d1582 2
d1622 1
a1622 1
#endif /* ! I960 */
d1625 3
d1656 1
a1656 1
     PTR aouthdr;
d1675 5
a1679 3
  coff->local_symesz = SYMESZ;
  coff->local_auxesz = AUXESZ;
  coff->local_linesz = LINESZ;
d1688 1
a1688 1
  if (aouthdr != NULL && internal_f->f_opthdr >= AOUTSZ)
d1708 13
d1768 2
d1771 11
a1781 1
      machine =0;
d1797 1
a1797 1
      machine = 68020;
d1885 1
a1885 1
		bfd_byte buf[SYMESZ];
d1888 1
d1890 6
a1895 2
		    || bfd_read (buf, 1, SYMESZ, abfd) != SYMESZ)
		  return false;
d1901 1
d1980 3
d1988 7
d2012 17
d2040 3
d2045 1
a2045 1
     bfd * abfd;
d2069 1
a2069 1
     bfd *abfd;
d2109 2
a2110 2
     bfd *abfd;
     combined_entry_type *table_base;
d2113 1
a2113 1
     combined_entry_type *aux;
d2138 6
a2143 6
     bfd *abfd;
     FILE *file;
     combined_entry_type *table_base;
     combined_entry_type *symbol;
     combined_entry_type *aux;
     unsigned int indaux;
d2289 3
d2293 1
d2318 2
a2319 1
	  if (bfd_write ((PTR) & dst, 1, RELSZ, abfd) != RELSZ)
d2338 2
a2339 2
     unsigned *magicp;
     unsigned short *flagsp;
d2404 11
d2417 30
a2446 1
      *magicp = ARMMAGIC;
d2476 4
d2482 1
d2516 3
d2523 8
d2579 6
d2614 24
d2641 8
a2648 1
static void
d2654 3
a2656 3
  file_ptr sofar = FILHSZ;

#ifndef I960
a2658 1
  unsigned int count;
d2721 1
a2721 1
    sofar += AOUTSZ;
d2724 1
a2724 1
    sofar += AOUTSZ;
d2729 1
a2729 1
  sofar += abfd->section_count * SCNHSZ;
d2736 1
a2736 1
      sofar += SCNHSZ;
d2739 31
a2769 5
  for (current = abfd->sections, count = 1;
       current != (asection *) NULL;
       current = current->next, ++count)
    {
      current->target_index = count;
d2771 75
a2845 3
      /* Only deal with sections which have contents */
      if (!(current->flags & SEC_HAS_CONTENTS))
	continue;
d2851 1
a2851 1
#ifndef I960
d2877 1
a2877 26
      /* With PE we have to pad each section to be a multiple of its
	 page size too, and remember both sizes.  */

      if (coff_section_data (abfd, current) == NULL)
	{
	  current->used_by_bfd =
	    (PTR) bfd_zalloc (abfd, sizeof (struct coff_section_tdata));
	  if (current->used_by_bfd == NULL)
	    {
	      /* FIXME: Return error.  */
	      abort ();
	    }
	}
      if (pei_section_data (abfd, current) == NULL)
	{
	  coff_section_data (abfd, current)->tdata =
	    (PTR) bfd_zalloc (abfd, sizeof (struct pei_section_tdata));
	  if (coff_section_data (abfd, current)->tdata == NULL)
	    {
	      /* FIXME: Return error.  */
	      abort ();
	    }
	}
      if (pei_section_data (abfd, current)->virt_size == 0)
	pei_section_data (abfd, current)->virt_size = current->_raw_size;

d2883 1
a2883 1
#ifndef I960
d2892 1
d2899 1
d2904 8
d2923 20
d2946 1
d3003 1
a3003 1
  sympp2 = (asymbol **) bfd_alloc_by_size_t (abfd, nsyms * sizeof (asymbol *));
d3034 1
d3056 1
a3056 1
  lnno_size = coff_count_linenumbers (abfd) * LINESZ;
d3059 4
a3062 1
    coff_compute_section_file_positions (abfd);
d3070 1
a3070 1
    reloc_size += current->reloc_count * RELSZ;
d3083 1
a3083 1
	  lineno_base += current->lineno_count * LINESZ;
d3092 1
a3092 1
	  reloc_base += current->reloc_count * RELSZ;
d3104 1
a3104 1
    scn_base = FILHSZ + AOUTSZ;
d3107 1
a3107 1
      scn_base = FILHSZ;
d3110 1
a3110 1
	scn_base += AOUTSZ;
d3125 1
a3125 3

#ifdef COFF_WITH_PE
      /* If we've got a .reloc section, remember. */
d3130 2
a3135 1
#endif
d3142 1
a3142 1
         with the code in coff_write_symbols.  */
d3197 2
d3201 1
d3204 3
d3236 4
a3239 1

d3243 5
a3247 4
      /* suppress output of the sections if they are null.  ld includes
	 the bss and data sections even if there is no size assigned
	 to them.  NT loader doesn't like it if these section headers are
	 included if the sections themselves are not needed */
d3255 2
a3256 1
	      || bfd_write ((PTR) (&buff), 1, SCNHSZ, abfd) != SCNHSZ)
d3268 2
a3269 1
	  coff_symbol_type *csym;
d3271 1
d3275 2
a3276 1
	      /* Here *PSYM is the section symbol for CURRENT.  */
d3278 6
d3293 3
d3332 18
d3377 2
a3378 1
	      || bfd_write ((PTR) &buff, 1, SCNHSZ, abfd) != SCNHSZ)
d3399 1
a3399 1
    internal_f.f_opthdr = AOUTSZ;
d3405 1
a3405 1
	internal_f.f_opthdr = AOUTSZ;
d3417 4
d3422 1
a3422 1
  /* FIXME: this is wrong for PPC_PE! */
d3427 5
d3470 4
d3514 1
d3519 6
d3541 1
a3541 1
#if RS6000COFF_C
d3548 10
d3588 9
d3730 1
d3732 7
a3738 1
    char buff[FILHSZ];
d3740 5
a3744 1
    if (bfd_write ((PTR) buff, 1, FILHSZ, abfd) != FILHSZ)
d3747 1
d3752 7
a3758 1
      char buff[AOUTSZ];
d3760 5
a3764 1
      if (bfd_write ((PTR) buff, 1, AOUTSZ, abfd) != AOUTSZ)
d3776 1
a3776 1
	size = AOUTSZ;
d3796 4
a3799 1
    coff_compute_section_file_positions (abfd);
d3876 1
a3876 2
  /* We depend on bfd_close to free all the memory on the obstack.  */
  /* FIXME if bfd_release is not using obstacks! */
d3911 3
d3935 1
a3935 1
					   (size_t) (LINESZ *
d3961 2
a3962 1
	      if (symndx < 0 || symndx >= obj_raw_syment_count (abfd))
d3965 1
a3965 1
		    ("%s: warning: illegal symbol index %ld in line numbers",
d3979 1
a3979 1
		    ("%s: warning: duplicate line number information for `%s'",
d4003 4
d4074 5
d4082 3
d4086 1
a4086 1
            /* PE uses storage class 0x68 to denote a section symbol */
d4088 1
a4088 1
	    /* PE uses storage class 0x67 for a weak external symbol.  */
d4091 1
a4091 14
	      if ((src->u.syment.n_scnum) == 0)
		{
		  if ((src->u.syment.n_value) == 0)
		    {
		      dst->symbol.section = bfd_und_section_ptr;
		      dst->symbol.value = 0;
		    }
		  else
		    {
		      dst->symbol.section = bfd_com_section_ptr;
		      dst->symbol.value = (src->u.syment.n_value);
		    }
		}
	      else
d4093 1
a4093 3
		  /* Base the value as an index from the base of the
		     section */

d4095 5
d4102 1
a4102 1

d4109 30
a4141 3
	      /* A C_HIDEXT symbol is not global.  */
	      if (src->u.syment.n_sclass == C_HIDEXT)
		dst->symbol.flags = BSF_LOCAL;
d4150 5
d4157 3
d4166 5
d4172 1
a4172 1
	      if (src->u.syment.n_scnum == -2)
d4180 10
a4189 2
		dst->symbol.value = (src->u.syment.n_value
				     - dst->symbol.section->vma);
d4203 1
d4207 1
d4254 1
a4254 1
				      + sec->lineno_count * LINESZ)
d4264 1
a4264 1
					 / LINESZ);
d4284 1
a4284 1
	    case C_FCN:		/* ".bf" or ".ef"		 */
d4286 13
a4298 1
	      dst->symbol.flags = BSF_LOCAL;
d4301 1
d4304 1
d4308 7
d4325 6
d4334 1
a4334 1
		("%s: Unrecognized storage class %d for %s symbol `%s'",
d4372 3
a4374 6
/* Check whether a symbol is globally visible.  This is used by the
   COFF backend linker code in cofflink.c, since a couple of targets
   have globally visible symbols which are not class C_EXT.  This
   function need not handle the case of n_class == C_EXT.  */

#undef OTHER_GLOBAL_CLASS
d4376 11
d4388 5
a4392 1
#define OTHER_GLOBAL_CLASS C_LEAFEXT
d4394 18
d4414 27
a4440 1
#define OTHER_GLOBAL_CLASS C_SECTION
d4443 2
a4444 1
#ifdef OTHER_GLOBAL_CLASS
d4446 11
a4456 9
static boolean
coff_sym_is_global (abfd, syment)
     bfd *abfd;
     struct internal_syment *syment;
{
  if (syment->n_sclass == OTHER_GLOBAL_CLASS)
    return true;
  return false;
}
d4458 1
a4458 1
#undef OTHER_GLOBAL_CLASS
d4460 3
a4462 1
#else /* ! defined (OTHER_GLOBAL_CLASS) */
d4464 5
a4468 1
/* sym_is_global should not be defined if it has nothing to do.  */
d4470 2
a4471 3
#define coff_sym_is_global 0

#endif /* ! defined (OTHER_GLOBAL_CLASS) */
d4546 1
a4546 1
			    (size_t) (RELSZ *
a4556 1
#ifdef RELOC_PROCESSING
d4559 3
d4565 1
d4568 1
a4570 10
      struct internal_reloc dst;
      asymbol *ptr;
      struct external_reloc *src;

      cache_ptr = reloc_cache + idx;
      src = native_relocs + idx;

      coff_swap_reloc_in (abfd, src, &dst);


d4578 1
a4578 1
		("%s: warning: illegal symbol index %ld in relocs",
d4581 1
a4581 1
	      ptr = 0;
d4593 1
a4593 1
	  ptr = 0;
d4611 1
a4611 1
#endif
d4616 1
a4616 1
	    ("%s: illegal relocation type %d at address 0x%lx",
d4644 2
a4645 2
     bfd *abfd;
     asection *sec;
d4647 3
a4649 3
     struct coff_link_hash_entry *h;
     struct internal_syment *sym;
     bfd_vma *addendp;
d4717 4
d4723 5
a4727 5
     bfd *abfd;
     asection *input_section;
     arelent *reloc;
     unsigned int shrink;
     struct bfd_link_info *link_info;
d4730 1
d4736 1
d4738 1
d4740 5
d4748 7
a4754 7
     bfd *abfd;
     struct bfd_link_info *link_info;
     struct bfd_link_order *link_order;
     arelent *reloc;
     bfd_byte *data;
     unsigned int *src_ptr;
     unsigned int *dst_ptr;
d4782 1
d4797 72
a4868 1
static CONST bfd_coff_backend_data bfd_coff_std_swap_table =
d4870 6
a4875 6
  coff_swap_aux_in, coff_swap_sym_in, coff_swap_lineno_in,
  coff_swap_aux_out, coff_swap_sym_out,
  coff_swap_lineno_out, coff_swap_reloc_out,
  coff_swap_filehdr_out, coff_swap_aouthdr_out,
  coff_swap_scnhdr_out,
  FILHSZ, AOUTSZ, SCNHSZ, SYMESZ, AUXESZ, RELSZ, LINESZ,
d4886 3
a4888 2
  coff_swap_filehdr_in, coff_swap_aouthdr_in, coff_swap_scnhdr_in,
  coff_swap_reloc_in, coff_bad_format_hook, coff_set_arch_mach_hook,
d4892 1
a4892 1
  coff_sym_is_global, coff_compute_section_file_positions,
d4894 2
a4895 1
  coff_adjust_symndx, coff_link_add_one_symbol
d4898 11
a4908 3
#define	coff_close_and_cleanup _bfd_generic_close_and_cleanup
#define coff_bfd_free_cached_info _bfd_generic_bfd_free_cached_info
#define	coff_get_section_contents _bfd_generic_get_section_contents
d4911 1
a4911 1
#define coff_bfd_copy_private_symbol_data  _bfd_generic_bfd_copy_private_symbol_data
d4919 5
a4923 1
#define coff_bfd_copy_private_bfd_data _bfd_generic_bfd_copy_private_bfd_data
d4926 3
a4928 2
#define coff_bfd_merge_private_bfd_data _bfd_generic_bfd_merge_private_bfd_data
#define coff_bfd_set_private_flags _bfd_generic_bfd_set_private_flags
d4931 1
a4931 1
#define coff_bfd_print_private_bfd_data  _bfd_generic_bfd_print_private_bfd_data
d4934 2
a4935 2
#ifndef coff_bfd_is_local_label
#define coff_bfd_is_local_label bfd_generic_is_local_label
d4937 1
d4939 1
a4939 1
#define coff_read_minisymbols _bfd_generic_read_minisymbols
d4941 1
d4943 1
a4943 1
#define coff_minisymbol_to_symbol _bfd_generic_minisymbol_to_symbol
d4949 1
a4949 1
#define coff_bfd_reloc_type_lookup _bfd_norelocs_bfd_reloc_type_lookup
d4956 1
d4958 5
a4962 1
#define coff_bfd_relax_section bfd_generic_relax_section
d4964 98
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d2220 8
a2227 2
	current->_raw_size = BFD_ALIGN (current->_raw_size,
					1 << current->alignment_power);
d3147 19
a3165 3
	      coff_symbol_type *sym =
	      (coff_symbol_type *) (dst.l_addr.l_symndx
		      + obj_raw_syments (abfd))->u.syment._n._n_n._n_zeroes;
d3167 1
a3167 1
	      if (sym->lineno != NULL)
d3629 14
a3642 5
	  /* @@@@ Should never be greater than count of symbols!  */
	  if (dst.r_symndx >= obj_conv_table_size (abfd))
	    abort ();
	  cache_ptr->sym_ptr_ptr = symbols + obj_convert (abfd)[dst.r_symndx];
	  ptr = *(cache_ptr->sym_ptr_ptr);
d3667 8
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d1502 9
d1961 3
d2337 1
d2412 1
d2446 1
d2462 1
a2462 1
#ifdef COFF_OBJ_WITH_PE
d2466 1
d2842 4
a2845 1
      internal_f.f_symptr = 0;
d2989 1
a2989 1
#ifdef _LIB
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1990, 91, 92, 93, 94, 1995 Free Software Foundation, Inc.
d312 1
d418 5
d551 91
d729 1
d827 11
d881 2
d947 3
d1006 2
a1007 1
     @@@@ Shouldn't use constant multiplier here!  */
d1024 5
d1082 61
d1203 1
a1203 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }
d1262 2
a1263 10
      if (internal_a->o_sntoc == 0)
	xcoff->toc_section = NULL;
      else
	xcoff->toc_section =
	  coff_section_from_bfd_index (abfd, internal_a->o_sntoc);
      if (internal_a->o_snentry == 0)
	xcoff->entry_section = NULL;
      else
	xcoff->entry_section =
	  coff_section_from_bfd_index (abfd, internal_a->o_snentry);
d1395 6
d1612 4
a1615 1
  return indaux == 1 && symbol->u.syment.n_sclass == C_LEAFPROC;
d1694 20
d1720 1
d1725 12
a1737 1
      arelent **p = s->orelocation;
d1812 5
d1880 6
d1958 1
a1958 1
      if (abfd->xvec->byteorder_big_p)
d1985 1
a1985 1
      if (abfd->xvec->byteorder_big_p)
d2055 38
a2143 10
#ifdef COFF_WITH_PE
      /* Do not include the .junk section.  This is where we collect section
         data which we don't need.  This is mainly the MS .debug$ data which
         stores codeview debug data. */
      if (strcmp (current->name, ".junk") == 0)
        {
	  continue;
        }
#endif

d2149 4
a2152 3
      {
	/* make sure this section is aligned on the right boundary - by
	   padding the previous section up if necessary */
d2154 7
a2160 7
	old_sofar = sofar;
	sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);
	if (previous != (asection *) NULL)
	  {
	    previous->_raw_size += sofar - old_sofar;
	  }
      }
d2174 26
a2199 3
      /* With PE we have to pad each section to be a multiple of its page size
	 too, and remember both sizes. Cooked_size becomes very useful. */
      current->_cooked_size = current->_raw_size;
d2207 9
a2215 3
      old_sofar = sofar;
      sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);
      current->_raw_size += sofar - old_sofar;
d2234 5
a2238 1
#ifndef RS6000COFF_C
d2290 1
a2290 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }
d2308 1
a2308 3
#endif /* ! defined (RS6000COFF_C) */


a2327 1

d2330 3
a2405 8
      /* Do not include the .junk section.  This is where we collect section
	 data which we don't need.  This is mainly the MS .debug$ data which
	 stores codeview debug data. */
      if (strcmp (current->name, ".junk") == 0)
	{
	  continue;
	}

d2417 19
a2435 1
      strncpy (&(section.s_name[0]), current->name, 8);
d2443 1
a2443 1
      section.s_vaddr = current->lma;
d2447 9
a2455 2
#ifdef COFF_WITH_PE
      section.s_paddr = current->_cooked_size;
d2526 64
d2655 1
a2655 1
  if (!abfd->xvec->byteorder_big_p)
d2721 5
d2729 1
d2737 1
a2737 1
#if defined(PPC)
d2780 1
a2780 1
#ifndef RS6000COFF_C
d2795 1
a2795 1
#ifdef PPC
d2858 3
a2860 8
      if (xcoff_data (abfd)->entry_section != NULL)
	internal_a.o_snentry = xcoff_data (abfd)->entry_section->target_index;
      else
	{
	  internal_a.o_snentry = 0;
	  if (internal_a.entry == 0)
	    internal_a.entry = (bfd_vma) -1;
	}
d2894 1
a2894 4
      if (xcoff_data (abfd)->toc_section == NULL)
	internal_a.o_sntoc = 0;
      else
	internal_a.o_sntoc = xcoff_data (abfd)->toc_section->target_index;
d2925 3
a2927 3
    FILHDR buff;
    coff_swap_filehdr_out (abfd, (PTR) & internal_f, (PTR) & buff);
    if (bfd_write ((PTR) & buff, 1, FILHSZ, abfd) != FILHSZ)
d2932 5
a2936 3
      AOUTHDR buff;
      coff_swap_aouthdr_out (abfd, (PTR) & internal_a, (PTR) & buff);
      if (bfd_write ((PTR) & buff, 1, AOUTSZ, abfd) != AOUTSZ)
d2971 37
a3007 6
  /* If this is a .lib section, bump the vma address so that it
       winds up being the number of .lib sections output.  This is
       right for SVR3.2.  Shared libraries should probably get more
       generic support.  Ian Taylor <ian@@cygnus.com>.  */
  if (strcmp (section->name, _LIB) == 0)
    ++section->lma;
d3061 1
a3061 4
    {
      bfd_set_error (bfd_error_no_memory);
      return (NULL);
    }
d3107 1
a3107 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }
d3179 1
a3179 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }				/* on error */
d3186 1
a3186 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }
d3284 3
a3286 4
	      /*
	  Base the value as an index from the base of the section, if
	  there is one
	  */
d3288 2
a3289 2
		dst->symbol.value = (src->u.syment.n_value) -
		  dst->symbol.section->vma;
d3291 1
a3291 1
		dst->symbol.value = (src->u.syment.n_value);
d3382 1
a3382 1
	    case C_FCN:	/* ".bf" or ".ef"		 */
d3385 4
a3388 4
	      /*
	  Base the value as an index from the base of the section
	  */
	      dst->symbol.value = (src->u.syment.n_value) - dst->symbol.section->vma;
d3559 1
a3559 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }
d3758 1
d3760 2
d3763 1
d3776 4
d3793 5
d3805 1
a3805 1
  coff_adjust_symndx
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d2 1
a2 1
   Copyright 1990, 91, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
a311 1
#define STRING_SIZE_SIZE (4)
a416 5
#ifdef COFF_WITH_PE
  if (sec_flags & SEC_LINK_ONCE)
    styp_flags |= IMAGE_SCN_LNK_COMDAT;
#endif

a544 91
#ifdef COFF_WITH_PE
  if (styp_flags & IMAGE_SCN_LNK_REMOVE)
    sec_flags |= SEC_EXCLUDE;

  if (styp_flags & IMAGE_SCN_LNK_COMDAT)
    {
      sec_flags |= SEC_LINK_ONCE;

      /* Unfortunately, the PE format stores essential information in
         the symbol table, of all places.  We need to extract that
         information now, so that objdump and the linker will know how
         to handle the section without worrying about the symbols.  We
         can't call slurp_symtab, because the linker doesn't want the
         swapped symbols.  */

      if (_bfd_coff_get_external_symbols (abfd))
	{
	  bfd_byte *esym, *esymend;

	  esym = (bfd_byte *) obj_coff_external_syms (abfd);
	  esymend = esym + obj_raw_syment_count (abfd) * SYMESZ;

	  while (esym < esymend)
	    {
	      struct internal_syment isym;

	      bfd_coff_swap_sym_in (abfd, (PTR) esym, (PTR) &isym);

	      if (sizeof (internal_s->s_name) > SYMNMLEN)
		{
		  /* This case implies that the matching symbol name
                     will be in the string table.  */
		  abort ();
		}

	      if (isym.n_sclass == C_STAT
		  && isym.n_type == T_NULL
		  && isym.n_numaux == 1)
		{
		  char buf[SYMNMLEN + 1];
		  const char *symname;

		  symname = _bfd_coff_internal_syment_name (abfd, &isym, buf);
		  if (symname == NULL)
		    abort ();

		  if (strcmp (name, symname) == 0)
		    {
		      union internal_auxent aux;

		      /* This is the section symbol.  */

		      bfd_coff_swap_aux_in (abfd, (PTR) (esym + SYMESZ),
					    isym.n_type, isym.n_sclass,
					    0, isym.n_numaux, (PTR) &aux);

		      switch (aux.x_scn.x_comdat)
			{
			case IMAGE_COMDAT_SELECT_NODUPLICATES:
			  sec_flags |= SEC_LINK_DUPLICATES_ONE_ONLY;
			  break;

			default:
			case IMAGE_COMDAT_SELECT_ANY:
			  sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
			  break;

			case IMAGE_COMDAT_SELECT_SAME_SIZE:
			  sec_flags |= SEC_LINK_DUPLICATES_SAME_SIZE;
			  break;

			case IMAGE_COMDAT_SELECT_EXACT_MATCH:
			  sec_flags |= SEC_LINK_DUPLICATES_SAME_CONTENTS;
			  break;

			case IMAGE_COMDAT_SELECT_ASSOCIATIVE:
			  /* FIXME: This is not currently implemented.  */
			  sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
			  break;
			}

		      break;
		    }
		}

	      esym += (isym.n_numaux + 1) * SYMESZ;
	    }
	}
    }
#endif

a631 1
. boolean _bfd_coff_long_section_names;
a728 11
. boolean (*_bfd_coff_link_add_one_symbol) PARAMS ((
.       struct bfd_link_info *info,
.       bfd *abfd,
.       const char *name,
.       flagword flags, 
.       asection *section,
.       bfd_vma value,
.       const char *string,
.       boolean copy,
.       boolean collect, 
.       struct bfd_link_hash_entry **hashp));
a771 2
.#define bfd_coff_long_section_names(abfd) \
.        (coff_backend_info (abfd)->_bfd_coff_long_section_names)
a835 3
.#define bfd_coff_link_add_one_symbol(info,abfd,name,flags,section,value,string,cp,coll,hashp)\
.        ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
.         (info, abfd, name, flags, section, value, string, cp, coll, hashp))
d892 1
a892 2
     @@@@ The 10 is a guess at a plausible maximum number of aux entries
     (but shouldn't be a constant).  */
a908 5
  /* Similarly, the .stabstr section must be aligned to 2**0 at most.  */
  if (COFF_DEFAULT_SECTION_ALIGNMENT_POWER > 0
      && strncmp (section->name, ".stabstr", 8) == 0)
    section->alignment_power = 0;

a961 61

#ifdef POWERPC_LE_PE
  if (strcmp (section->name, ".idata$2") == 0)
    {
      section->alignment_power = 0;
    }
  else if (strcmp (section->name, ".idata$3") == 0)
    {
      section->alignment_power = 0;
    }
  else if (strcmp (section->name, ".idata$4") == 0)
    {
      section->alignment_power = 2;
    }
  else if (strcmp (section->name, ".idata$5") == 0)
    {
      section->alignment_power = 2;
    }
  else if (strcmp (section->name, ".idata$6") == 0)
    {
      section->alignment_power = 1;
    }
  else if (strcmp (section->name, ".reloc") == 0)
    {
      section->alignment_power = 1;
    }
  else if (strncmp (section->name, ".stab", 5) == 0)
    {
      section->alignment_power = 2;
    }
#endif

#ifdef COFF_IMAGE_WITH_PE
  /* In a PE image file, the s_paddr field holds the virtual size of a
     section, while the s_size field holds the raw size.  */
  if (hdr->s_paddr != 0)
    {
      if (coff_section_data (abfd, section) == NULL)
	{
	  section->used_by_bfd =
	    (PTR) bfd_zalloc (abfd, sizeof (struct coff_section_tdata));
	  if (section->used_by_bfd == NULL)
	    {
	      /* FIXME: Return error.  */
	      abort ();
	    }
	}
      if (pei_section_data (abfd, section) == NULL)
	{
	  coff_section_data (abfd, section)->tdata =
	    (PTR) bfd_zalloc (abfd, sizeof (struct pei_section_tdata));
	  if (coff_section_data (abfd, section)->tdata == NULL)
	    {
	      /* FIXME: Return error.  */
	      abort ();
	    }
	}
      pei_section_data (abfd, section)->virt_size = hdr->s_paddr;
    }
#endif

d1022 4
a1025 1
    return false;
d1084 10
a1093 2
      xcoff->sntoc = internal_a->o_sntoc;
      xcoff->snentry = internal_a->o_snentry;
a1224 6
	case F_I960JX:
	  machine = bfd_mach_i960_jx;
	  break;
	case F_I960HX:
	  machine = bfd_mach_i960_hx;
	  break;
d1436 1
a1436 4
  return (indaux == 1
	  && (symbol->u.syment.n_sclass == C_LEAFPROC
	      || symbol->u.syment.n_sclass == C_LEAFSTAT
	      || symbol->u.syment.n_sclass == C_LEAFEXT));
a1514 20
#ifdef TARG_AUX

static int compare_arelent_ptr PARAMS ((const PTR, const PTR));

/* AUX's ld wants relocations to be sorted */
static int
compare_arelent_ptr (x, y)
     const PTR x;
     const PTR y;
{
  const arelent **a = (const arelent **) x;
  const arelent **b = (const arelent **) y;
  bfd_size_type aadr = (*a)->address;
  bfd_size_type badr = (*b)->address;

  return (aadr < badr ? -1 : badr < aadr ? 1 : 0);
}

#endif /* TARG_AUX */

a1520 1

a1524 12
      arelent **p;

#ifndef TARG_AUX
      p = s->orelocation;
#else
      /* sort relocations before we write them out */
      p = (arelent **) bfd_malloc (s->reloc_count * sizeof (arelent *));
      if (p == NULL && s->reloc_count > 0)
	return false;
      memcpy (p, s->orelocation, s->reloc_count * sizeof (arelent *));
      qsort (p, s->reloc_count, sizeof (arelent *), compare_arelent_ptr);
#endif
d1526 1
a1600 5

#ifdef TARG_AUX
      if (p != NULL)
	free (p);
#endif
a1663 6
	  case bfd_mach_i960_jx:
	    flags = F_I960JX;
	    break;
	  case bfd_mach_i960_hx:
	    flags = F_I960HX;
	    break;
d1736 1
a1736 1
      if (bfd_big_endian (abfd))
d1763 1
a1763 1
      if (bfd_big_endian (abfd))
a1832 38
#ifdef RS6000COFF_C
  /* On XCOFF, if we have symbols, set up the .debug section.  */
  if (bfd_get_symcount (abfd) > 0)
    {
      bfd_size_type sz;
      bfd_size_type i, symcount;
      asymbol **symp;

      sz = 0;
      symcount = bfd_get_symcount (abfd);
      for (symp = abfd->outsymbols, i = 0; i < symcount; symp++, i++)
	{
	  coff_symbol_type *cf;

	  cf = coff_symbol_from (abfd, *symp);
	  if (cf != NULL
	      && cf->native != NULL
	      && SYMNAME_IN_DEBUG (&cf->native->u.syment))
	    {
	      size_t len;

	      len = strlen (bfd_asymbol_name (*symp));
	      if (len > SYMNMLEN)
		sz += len + 3;
	    }
	}
      if (sz > 0)
	{
	  asection *dsec;

	  dsec = bfd_make_section_old_way (abfd, ".debug");
	  if (dsec == NULL)
	    abort ();
	  dsec->_raw_size = sz;
	  dsec->flags |= SEC_HAS_CONTENTS;
	}
    }
#endif
d1884 10
d1899 3
a1901 4
      if ((abfd->flags & EXEC_P) != 0)
	{
	  /* make sure this section is aligned on the right boundary - by
	     padding the previous section up if necessary */
d1903 7
a1909 7
	  old_sofar = sofar;
	  sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);
	  if (previous != (asection *) NULL)
	    {
	      previous->_raw_size += sofar - old_sofar;
	    }
	}
d1923 3
a1925 26
      /* With PE we have to pad each section to be a multiple of its
	 page size too, and remember both sizes.  */

      if (coff_section_data (abfd, current) == NULL)
	{
	  current->used_by_bfd =
	    (PTR) bfd_zalloc (abfd, sizeof (struct coff_section_tdata));
	  if (current->used_by_bfd == NULL)
	    {
	      /* FIXME: Return error.  */
	      abort ();
	    }
	}
      if (pei_section_data (abfd, current) == NULL)
	{
	  coff_section_data (abfd, current)->tdata =
	    (PTR) bfd_zalloc (abfd, sizeof (struct pei_section_tdata));
	  if (coff_section_data (abfd, current)->tdata == NULL)
	    {
	      /* FIXME: Return error.  */
	      abort ();
	    }
	}
      if (pei_section_data (abfd, current)->virt_size == 0)
	pei_section_data (abfd, current)->virt_size = current->_raw_size;

d1933 3
a1935 9
      if ((abfd->flags & EXEC_P) == 0)
	current->_raw_size = BFD_ALIGN (current->_raw_size,
					1 << current->alignment_power);
      else
	{
	  old_sofar = sofar;
	  sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);
	  current->_raw_size += sofar - old_sofar;
	}
d1954 1
a1954 5
#if 0

/* This can never work, because it is called too late--after the
   section positions have been set.  I can't figure out what it is
   for, so I am going to disable it--Ian Taylor 20 March 1996.  */
d2006 4
a2009 1
    return false;
d2027 3
a2029 1
#endif /* 0 */
d2049 1
a2051 3
#ifdef COFF_LONG_SECTION_NAMES
  size_t string_size = STRING_SIZE_SIZE;
#endif
d2125 8
d2144 1
a2144 19

      strncpy (section.s_name, current->name, SCNNMLEN);

#ifdef COFF_LONG_SECTION_NAMES
      /* Handle long section names as in PE.  This must be compatible
         with the code in coff_write_symbols.  */
      {
	size_t len;

	len = strlen (current->name);
	if (len > SCNNMLEN)
	  {
	    memset (section.s_name, 0, SCNNMLEN);
	    sprintf (section.s_name, "/%lu", (unsigned long) string_size);
	    string_size += len + 1;
	  }
      }
#endif

d2152 1
a2152 1
      section.s_vaddr = current->vma;
d2156 2
a2157 9
#ifdef COFF_OBJ_WITH_PE
      section.s_paddr = 0;
#endif
#ifdef COFF_IMAGE_WITH_PE
      if (coff_section_data (abfd, current) != NULL
	  && pei_section_data (abfd, current) != NULL)
	section.s_paddr = pei_section_data (abfd, current)->virt_size;
      else
	section.s_paddr = 0;
a2227 64

#ifdef COFF_WITH_PE
      /* PE stores COMDAT section information in the symbol table.  If
         this section is supposed to have some COMDAT info, track down
         the symbol in the symbol table and modify it.  */
      if ((current->flags & SEC_LINK_ONCE) != 0)
	{
	  unsigned int i, count;
	  asymbol **psym;
	  coff_symbol_type *csym;

	  count = bfd_get_symcount (abfd);
	  for (i = 0, psym = abfd->outsymbols; i < count; i++, psym++)
	    {
	      /* Here *PSYM is the section symbol for CURRENT.  */

	      if (strcmp ((*psym)->name, current->name) == 0)
		{
		  csym = coff_symbol_from (abfd, *psym);
		  if (csym == NULL
		      || csym->native == NULL
		      || csym->native->u.syment.n_numaux < 1
		      || csym->native->u.syment.n_sclass != C_STAT
		      || csym->native->u.syment.n_type != T_NULL)
		    continue;
		  break;
		}
	    }

	  /* Did we find it?
	     Note that we might not if we're converting the file from
	     some other object file format.  */
	  if (i < count)
	    {
	      combined_entry_type *aux;

	      /* We don't touch the x_checksum field.  The
		 x_associated field is not currently supported.  */

	      aux = csym->native + 1;
	      switch (current->flags & SEC_LINK_DUPLICATES)
		{
		case SEC_LINK_DUPLICATES_DISCARD:
		  aux->u.auxent.x_scn.x_comdat = IMAGE_COMDAT_SELECT_ANY;
		  break;

		case SEC_LINK_DUPLICATES_ONE_ONLY:
		  aux->u.auxent.x_scn.x_comdat =
		    IMAGE_COMDAT_SELECT_NODUPLICATES;
		  break;

		case SEC_LINK_DUPLICATES_SAME_SIZE:
		  aux->u.auxent.x_scn.x_comdat =
		    IMAGE_COMDAT_SELECT_SAME_SIZE;
		  break;

		case SEC_LINK_DUPLICATES_SAME_CONTENTS:
		  aux->u.auxent.x_scn.x_comdat =
		    IMAGE_COMDAT_SELECT_EXACT_MATCH;
		  break;
		}
	    }
	}
#endif /* COFF_WITH_PE */
d2293 1
a2293 1
  if (bfd_little_endian (abfd))
a2358 5
#if defined(TARG_AUX)
    internal_a.magic = (abfd->flags & D_PAGED ? PAGEMAGICPEXECPAGED :
			abfd->flags & WP_TEXT ? PAGEMAGICPEXECSWAPPED :
			PAGEMAGICEXECSWAPPED);
#else
a2361 1
#endif /* TARG_AUX */
d2369 1
a2369 1
#if defined(PPC_PE)
d2412 1
a2412 1
#if 0
d2427 1
a2427 1
#ifdef PPC_PE
d2490 8
a2497 3
      internal_a.o_snentry = xcoff_data (abfd)->snentry;
      if (internal_a.o_snentry == 0)
	internal_a.entry = (bfd_vma) -1;
d2531 4
a2534 1
      internal_a.o_sntoc = xcoff_data (abfd)->sntoc;
d2565 3
a2567 3
    char buff[FILHSZ];
    coff_swap_filehdr_out (abfd, (PTR) & internal_f, (PTR) buff);
    if (bfd_write ((PTR) buff, 1, FILHSZ, abfd) != FILHSZ)
d2572 3
a2574 5
      /* Note that peicode.h fills in a PEAOUTHDR, not an AOUTHDR. 
	 include/coff/pe.h sets AOUTSZ == sizeof(PEAOUTHDR)) */
      char buff[AOUTSZ];
      coff_swap_aouthdr_out (abfd, (PTR) & internal_a, (PTR) buff);
      if (bfd_write ((PTR) buff, 1, AOUTSZ, abfd) != AOUTSZ)
d2609 6
a2614 37

   /* The physical address field of a .lib section is used to hold the
      number of shared libraries in the section.  This code counts the
      number of sections being written, and increments the lma field
      with the number.

      I have found no documentation on the contents of this section.
      Experimentation indicates that the section contains zero or more
      records, each of which has the following structure:

      - a (four byte) word holding the length of this record, in words,
      - a word that always seems to be set to "2",
      - the path to a shared library, null-terminated and then padded
        to a whole word boundary.

      bfd_assert calls have been added to alert if an attempt is made
      to write a section which doesn't follow these assumptions.  The
      code has been tested on ISC 4.1 by me, and on SCO by Robert Lipe
      <robertl@@arnet.com> (Thanks!).
  
      Gvran Uddeborg <gvran@@uddeborg.pp.se> */

    if (strcmp (section->name, _LIB) == 0)
      {
	bfd_byte *rec, *recend;

	rec = (bfd_byte *) location;
	recend = rec + count;
	while (rec < recend)
	  {
	    ++section->lma;
	    rec += bfd_get_32 (abfd, rec) * 4;
	  }

	BFD_ASSERT (rec == recend);
      }

d2668 4
a2671 1
    return (NULL);
d2717 4
a2720 1
    return false;
d2792 4
a2795 1
    return false;
d2802 4
a2805 1
    return false;
d2903 4
a2906 3

	      /* Base the value as an index from the base of the
		 section, if there is one.  */
d2908 2
a2909 2
		dst->symbol.value = (src->u.syment.n_value
				     - dst->symbol.section->vma);
d2911 1
a2911 1
		dst->symbol.value = src->u.syment.n_value;
d3002 1
a3002 1
	    case C_FCN:		/* ".bf" or ".ef"		 */
d3005 4
a3008 4
	      /* Base the value as an index from the base of the
		 section.  */
	      dst->symbol.value = (src->u.syment.n_value
				   - dst->symbol.section->vma);
d3179 4
a3182 1
    return false;
a3380 1
#ifndef coff_bfd_link_hash_table_create
a3381 2
#endif
#ifndef coff_bfd_link_add_symbols
a3382 1
#endif
a3394 4
#ifndef coff_link_add_one_symbol
#define coff_link_add_one_symbol _bfd_generic_link_add_one_symbol
#endif

a3407 5
#ifdef COFF_LONG_SECTION_NAMES
  true,
#else
  false,
#endif
d3415 1
a3415 1
  coff_adjust_symndx, coff_link_add_one_symbol
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@a1501 9
#ifdef H8300SMAGIC
    case H8300SMAGIC:
      arch = bfd_arch_h8300;
      machine = bfd_mach_h8300s;
      /* !! FIXME this probably isn't the right place for this */
      abfd->flags |= BFD_IS_RELAXABLE;
      break;
#endif

a1951 3
	case bfd_mach_h8300s:
	  *magicp = H8300SMAGIC;
	  return true;
a2324 1
  boolean long_section_names;
a2398 1
  long_section_names = false;
a2431 1
	    long_section_names = true;
d2447 1
a2447 1
#ifdef COFF_WITH_PE
a2450 1
      /* Reminder: s_paddr holds the virtual size of the section.  */
d2826 1
a2826 4
      if (long_section_names)
	internal_f.f_symptr = sym_base;
      else
	internal_f.f_symptr = 0;
d2970 1
a2970 1
#if defined(_LIB) && !defined(TARG_AUX)
@


1.1.1.4
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@d2220 2
a2221 8
	{
	  bfd_size_type old_size;

	  old_size = current->_raw_size;
	  current->_raw_size = BFD_ALIGN (current->_raw_size,
					  1 << current->alignment_power);
	  sofar += current->_raw_size - old_size;
	}
d3141 3
a3143 19
	      boolean warned;
	      long symndx;
	      coff_symbol_type *sym;

	      warned = false;
	      symndx = dst.l_addr.l_symndx;
	      if (symndx < 0 || symndx >= obj_raw_syment_count (abfd))
		{
		  (*_bfd_error_handler)
		    ("%s: warning: illegal symbol index %ld in line numbers",
		     bfd_get_filename (abfd), dst.l_addr.l_symndx);
		  symndx = 0;
		  warned = true;
		}
	      /* FIXME: We should not be casting between ints and
                 pointers like this.  */
	      sym = ((coff_symbol_type *)
		     ((symndx + obj_raw_syments (abfd))
		      ->u.syment._n._n_n._n_zeroes));
d3145 1
a3145 1
	      if (sym->lineno != NULL && ! warned)
d3607 5
a3611 14
	  if (dst.r_symndx < 0 || dst.r_symndx >= obj_conv_table_size (abfd))
	    {
	      (*_bfd_error_handler)
		("%s: warning: illegal symbol index %ld in relocs",
		 bfd_get_filename (abfd), dst.r_symndx);
	      cache_ptr->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;
	      ptr = 0;
	    }
	  else
	    {
	      cache_ptr->sym_ptr_ptr = (symbols
					+ obj_convert (abfd)[dst.r_symndx]);
	      ptr = *(cache_ptr->sym_ptr_ptr);
	    }
a3635 8
      if (cache_ptr->howto == NULL)
	{
	  (*_bfd_error_handler)
	    ("%s: illegal relocation type %d at address 0x%lx",
	     bfd_get_filename (abfd), dst.r_type, (long) dst.r_vaddr);
	  bfd_set_error (bfd_error_bad_value);
	  return false;
	}
@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright 1990, 91, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
a312 24

static long sec_to_styp_flags PARAMS ((const char *, flagword));
static flagword styp_to_sec_flags PARAMS ((bfd *, PTR, const char *));
static boolean coff_bad_format_hook PARAMS ((bfd *, PTR));
static boolean coff_new_section_hook PARAMS ((bfd *, asection *));
static boolean coff_set_arch_mach_hook PARAMS ((bfd *, PTR));
static boolean coff_write_relocs PARAMS ((bfd *, int));
static boolean coff_set_flags
  PARAMS ((bfd *, unsigned int *, unsigned short *));
static boolean coff_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
static boolean coff_compute_section_file_positions PARAMS ((bfd *));
static boolean coff_write_object_contents PARAMS ((bfd *));
static boolean coff_set_section_contents
  PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
static PTR buy_and_read PARAMS ((bfd *, file_ptr, int, size_t));
static boolean coff_slurp_line_table PARAMS ((bfd *, asection *));
static boolean coff_slurp_symbol_table PARAMS ((bfd *));
static boolean coff_slurp_reloc_table PARAMS ((bfd *, asection *, asymbol **));
static long coff_canonicalize_reloc
  PARAMS ((bfd *, asection *, arelent **, asymbol **));
#ifndef coff_mkobject_hook
static PTR coff_mkobject_hook PARAMS ((bfd *, PTR,  PTR));
#endif
a729 1
. unsigned int _bfd_coff_default_section_alignment_power;
d799 1
a799 1
. boolean (*_bfd_coff_compute_section_file_positions) PARAMS ((
a882 2
.#define bfd_coff_default_section_alignment_power(abfd) \
.	 (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
a1035 2
static void coff_set_alignment_hook PARAMS ((bfd *, asection *, PTR));

a1066 2
static void coff_set_alignment_hook PARAMS ((bfd *, asection *, PTR));

a1153 2
static void coff_set_alignment_hook PARAMS ((bfd *, asection *, PTR));

a1194 3

static boolean coff_mkobject PARAMS ((bfd *));

a1535 6
#ifdef TIC80_ARCH_MAGIC
    case TIC80_ARCH_MAGIC:
      arch = bfd_arch_tic80;
      break;
#endif

a1546 3
static boolean symname_in_debug_hook
  PARAMS ((bfd *, struct internal_syment *));

d1837 1
a1837 1
     unsigned int *magicp;
a1934 4
      /* NAMES_HAVE_UNDERSCORE may be defined by coff-u68k.c.  */
#ifdef NAMES_HAVE_UNDERSCORE
      *magicp = MC68KBCSMAGIC;
#else
a1936 1
#endif
d2054 1
a2054 1
static boolean
a2060 1
  boolean align_adjust;
a2145 1
  align_adjust = false;
d2194 4
a2197 1
	    return false;
d2204 4
a2207 1
	    return false;
a2225 1
	  align_adjust = current->_raw_size != old_size;
a2231 1
	  align_adjust = sofar != old_sofar;
a2246 20
  /* It is now safe to write to the output file.  If we needed an
     alignment adjustment for the last section, then make sure that
     there is a byte at offset sofar.  If there are no symbols and no
     relocs, then nothing follows the last section.  If we don't force
     the last byte out, then the file may appear to be truncated.  */
  if (align_adjust)
    {
      bfd_byte b;

      b = 0;
      if (bfd_seek (abfd, sofar - 1, SEEK_SET) != 0
	  || bfd_write (&b, 1, 1, abfd) != 1)
	return false;
    }

  /* Make sure the relocations are aligned.  We don't need to make
     sure that this byte exists, because it will only matter if there
     really are relocs.  */
  sofar = BFD_ALIGN (sofar, 1 << COFF_DEFAULT_SECTION_ALIGNMENT_POWER);

a2249 1
  return true;
d2306 1
a2306 1
  sympp2 = (asymbol **) bfd_alloc (abfd, nsyms * sizeof (asymbol *));
d2361 1
a2361 4
    {
      if (! coff_compute_section_file_positions (abfd))
	return false;
    }
a2718 4
#ifdef TIC80
    internal_a.magic = TIC80_ARCH_MAGIC;
#define __A_MAGIC_SET__
#endif /* TIC80 */
d2993 1
a2993 4
    {
      if (! coff_compute_section_file_positions (abfd))
	return false;
    }
d3070 2
a3071 1
  /* We depend on bfd_close to free all the memory on the objalloc.  */
a3500 2
static boolean coff_sym_is_global PARAMS ((bfd *, struct internal_syment *));

d3605 1
d3608 8
a3615 1
#ifndef RELOC_PROCESSING
d3617 1
a3617 1
#endif
d3624 1
a3624 3
#ifdef RELOC_PROCESSING
      RELOC_PROCESSING (cache_ptr, &dst, symbols, abfd, asect);
#else
d3635 1
a3635 1
	      ptr = NULL;
d3647 1
a3647 1
	  ptr = NULL;
d3665 1
a3665 1
#endif	/* RELOC_PROCESSING */
a3770 4
static int dummy_reloc16_estimate
  PARAMS ((bfd *, asection *, arelent *, unsigned int,
	   struct bfd_link_info *));

a3784 1

a3785 1

a3786 5

static void dummy_reloc16_extra_cases
  PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *,
	   bfd_byte *, unsigned int *, unsigned int *));

a3855 1
  COFF_DEFAULT_SECTION_ALIGNMENT_POWER,
d3889 2
a3890 2
#ifndef coff_bfd_is_local_label_name
#define coff_bfd_is_local_label_name _bfd_coff_is_local_label_name
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1990, 91, 92, 93, 94, 95, 96, 97, 98, 99, 2000
   Free Software Foundation, Inc.
d133 1
a133 1
	and @@code{coff_swap_lineno_in}. @@code{GDB} reads the symbol
d315 1
a315 2
static flagword styp_to_sec_flags
  PARAMS ((bfd *, PTR, const char *, asection *));
a316 3
static void coff_set_custom_section_alignment
  PARAMS ((bfd *, asection *, const struct coff_section_alignment_entry *,
	   const unsigned int));
a330 2
static enum coff_symbol_classification coff_classify_symbol
  PARAMS ((bfd *, struct internal_syment *));
d340 6
a345 7
/* Return a word with STYP_* (scnhdr.s_flags) flags set to represent
   the incoming SEC_* flags.  The inverse of this function is
   styp_to_sec_flags().  NOTE: If you add to/change this routine, you
   should probably mirror the changes in styp_to_sec_flags().  */

#ifndef COFF_WITH_PE

d395 6
d442 3
a444 41
  return styp_flags;
}

#else /* COFF_WITH_PE */

/* The PE version; see above for the general comments.  The non-PE
   case seems to be more guessing, and breaks PE format; specifically,
   .rdata is readonly, but it sure ain't text.  Really, all this
   should be set up properly in gas (or whatever assembler is in use),
   and honor whatever objcopy/strip, etc. sent us as input.  */

static long
sec_to_styp_flags (sec_name, sec_flags)
     const char *sec_name ATTRIBUTE_UNUSED;
     flagword sec_flags;
{
  long styp_flags = 0;

  /* caution: there are at least three groups of symbols that have
     very similar bits and meanings: IMAGE_SCN*, SEC_*, and STYP_*.
     SEC_* are the BFD internal flags, used for generic BFD
     information.  STYP_* are the COFF section flags which appear in
     COFF files.  IMAGE_SCN_* are the PE section flags which appear in
     PE files.  The STYP_* flags and the IMAGE_SCN_* flags overlap,
     but there are more IMAGE_SCN_* flags.  */

  /* skip LOAD */
  /* READONLY later */
  /* skip RELOC */
  if ((sec_flags & SEC_CODE) != 0)
    styp_flags |= IMAGE_SCN_CNT_CODE;
  if ((sec_flags & SEC_DATA) != 0)
    styp_flags |= IMAGE_SCN_CNT_INITIALIZED_DATA;
  if ((sec_flags & SEC_ALLOC) != 0 && (sec_flags & SEC_LOAD) == 0)
    styp_flags |= IMAGE_SCN_CNT_UNINITIALIZED_DATA;  /* ==STYP_BSS */
  /* skip ROM */
  /* skip CONSTRUCTOR */
  /* skip CONTENTS */
#ifdef STYP_NOLOAD
  if ((sec_flags & (SEC_NEVER_LOAD | SEC_COFF_SHARED_LIBRARY)) != 0)
    styp_flags |= STYP_NOLOAD;
a445 26
  if ((sec_flags & SEC_IS_COMMON) != 0)
    styp_flags |= IMAGE_SCN_LNK_COMDAT;
  if ((sec_flags & SEC_DEBUGGING) != 0)
    styp_flags |= IMAGE_SCN_MEM_DISCARDABLE;
  if ((sec_flags & SEC_EXCLUDE) != 0)
    styp_flags |= IMAGE_SCN_LNK_REMOVE;
  if ((sec_flags & SEC_NEVER_LOAD) != 0)
    styp_flags |= IMAGE_SCN_LNK_REMOVE;
  /* skip IN_MEMORY */
  /* skip SORT */
  if (sec_flags & SEC_LINK_ONCE) 
    styp_flags |= IMAGE_SCN_LNK_COMDAT; 
  /* skip LINK_DUPLICATES */
  /* skip LINKER_CREATED */

  /* For now, the read/write bits are mapped onto SEC_READONLY, even
     though the semantics don't quite match.  The bits from the input
     are retained in pei_section_data(abfd, section)->pe_flags */

  styp_flags |= IMAGE_SCN_MEM_READ;       /* always readable. */
  if ((sec_flags & SEC_READONLY) == 0)
    styp_flags |= IMAGE_SCN_MEM_WRITE;    /* Invert READONLY for write */
  if (sec_flags & SEC_CODE)
    styp_flags |= IMAGE_SCN_MEM_EXECUTE;  /* CODE->EXECUTE */
  if (sec_flags & SEC_SHARED)
    styp_flags |= IMAGE_SCN_MEM_SHARED;   /* Shared remains meaningful */
d447 1
a447 1
  return styp_flags; 
d449 7
a455 10

#endif /* COFF_WITH_PE */

/* Return a word with SEC_* flags set to represent the incoming STYP_*
   flags (from scnhdr.s_flags).  The inverse of this function is
   sec_to_styp_flags().  NOTE: If you add to/change this routine, you
   should probably mirror the changes in sec_to_styp_flags().  */

#ifndef COFF_WITH_PE

d457 2
a458 2
styp_to_sec_flags (abfd, hdr, name, section)
     bfd *abfd ATTRIBUTE_UNUSED;
a460 1
     asection *section ATTRIBUTE_UNUSED;
d506 1
a506 1
#if defined (COFF_PAGE_SIZE) && !defined (COFF_ALIGN_IN_S_FLAGS)
d575 1
a575 69
#if defined (COFF_LONG_SECTION_NAMES) && defined (COFF_SUPPORT_GNU_LINKONCE)
  /* As a GNU extension, if the name begins with .gnu.linkonce, we
     only link a single copy of the section.  This is used to support
     g++.  g++ will emit each template expansion in its own section.
     The symbols will be defined as weak, so that multiple definitions
     are permitted.  The GNU linker extension is to actually discard
     all but one of the sections.  */
  if (strncmp (name, ".gnu.linkonce", sizeof ".gnu.linkonce" - 1) == 0)
    sec_flags |= SEC_LINK_ONCE | SEC_LINK_DUPLICATES_DISCARD;
#endif

  return sec_flags;
}

#else /* COFF_WITH_PE */

/* The PE version; see above for the general comments.

   Since to set the SEC_LINK_ONCE and associated flags, we have to
   look at the symbol table anyway, we return the symbol table index
   of the symbol being used as the COMDAT symbol.  This is admittedly
   ugly, but there's really nowhere else that we have access to the
   required information.  FIXME: Is the COMDAT symbol index used for
   any purpose other than objdump?  */

static flagword
styp_to_sec_flags (abfd, hdr, name, section)
     bfd *abfd ATTRIBUTE_UNUSED;
     PTR hdr;
     const char *name;
     asection *section;
{
  struct internal_scnhdr *internal_s = (struct internal_scnhdr *) hdr;
  long styp_flags = internal_s->s_flags;
  flagword sec_flags = 0;

  if (styp_flags & STYP_DSECT)
    abort ();  /* Don't know what to do */
#ifdef SEC_NEVER_LOAD
  if (styp_flags & STYP_NOLOAD)
    sec_flags |= SEC_NEVER_LOAD;
#endif
  if (styp_flags & STYP_GROUP)
    abort ();  /* Don't know what to do */
  /* skip IMAGE_SCN_TYPE_NO_PAD */
  if (styp_flags & STYP_COPY)
    abort ();  /* Don't know what to do */
  if (styp_flags & IMAGE_SCN_CNT_CODE)
    sec_flags |= SEC_CODE | SEC_ALLOC | SEC_LOAD;
  if (styp_flags & IMAGE_SCN_CNT_INITIALIZED_DATA)
    sec_flags |= SEC_DATA | SEC_ALLOC | SEC_LOAD;
  if (styp_flags & IMAGE_SCN_CNT_UNINITIALIZED_DATA)
    sec_flags |= SEC_ALLOC;
  if (styp_flags & IMAGE_SCN_LNK_OTHER)
    abort ();  /* Don't know what to do */
  if (styp_flags & IMAGE_SCN_LNK_INFO)
    {
      /* We mark these as SEC_DEBUGGING, but only if COFF_PAGE_SIZE is
	 defined.  coff_compute_section_file_positions uses
	 COFF_PAGE_SIZE to ensure that the low order bits of the
	 section VMA and the file offset match.  If we don't know
	 COFF_PAGE_SIZE, we can't ensure the correct correspondence,
	 and demand page loading of the file will fail.  */
#ifdef COFF_PAGE_SIZE
      sec_flags |= SEC_DEBUGGING;
#endif
    }
  if (styp_flags & STYP_OVER)
    abort ();  /* Don't know what to do */
a578 21
  if (styp_flags & IMAGE_SCN_MEM_SHARED)
    sec_flags |= SEC_SHARED;
  /* COMDAT: see below */
  if (styp_flags & IMAGE_SCN_MEM_DISCARDABLE)
    sec_flags |= SEC_DEBUGGING;
  if (styp_flags & IMAGE_SCN_MEM_NOT_CACHED)
    abort ();/* Don't know what to do */
  if (styp_flags & IMAGE_SCN_MEM_NOT_PAGED)
    abort (); /* Don't know what to do */

  /* We infer from the distinct read/write/execute bits the settings
     of some of the bfd flags; the actual values, should we need them,
     are also in pei_section_data (abfd, section)->pe_flags.  */

  if (styp_flags & IMAGE_SCN_MEM_EXECUTE)
    sec_flags |= SEC_CODE;   /* Probably redundant */
  /* IMAGE_SCN_MEM_READ is simply ignored, assuming it always to be true. */
  if ((styp_flags & IMAGE_SCN_MEM_WRITE) == 0)
    sec_flags |= SEC_READONLY;

  /* COMDAT gets very special treatment.  */
a589 10
      /* COMDAT sections are special.  The first symbol is the section
	 symbol, which tells what kind of COMDAT section it is.  The
	 second symbol is the "comdat symbol" - the one with the
	 unique name.  GNU uses the section symbol for the unique
	 name; MS uses ".text" for every comdat section.  Sigh.  - DJ */

      /* This is not mirrored in sec_to_styp_flags(), but there
	 doesn't seem to be a need to, either, and it would at best be
	 rather messy.  */

d592 1
a592 3
	  bfd_byte *esymstart, *esym, *esymend;
	  int seen_state = 0;
	  char *target_name = NULL;
d594 2
a595 2
	  esymstart = esym = (bfd_byte *) obj_coff_external_syms (abfd);
	  esymend = esym + obj_raw_syment_count (abfd) * bfd_coff_symesz (abfd);
a599 2
	      char buf[SYMNMLEN + 1];
	      const char *symname;
d610 3
a612 1
	      if (isym.n_scnum == section->target_index)
d614 2
a615 23
		  /* According to the MSVC documentation, the first
		     TWO entries with the section # are both of
		     interest to us.  The first one is the "section
		     symbol" (section name).  The second is the comdat
		     symbol name.  Here, we've found the first
		     qualifying entry; we distinguish it from the
		     second with a state flag.

		     In the case of gas-generated (at least until that
		     is fixed) .o files, it isn't necessarily the
		     second one.  It may be some other later symbol.

		     Since gas also doesn't follow MS conventions and
		     emits the section similar to .text$<name>, where
		     <something> is the name we're looking for, we
		     distinguish the two as follows:

		     If the section name is simply a section name (no
		     $) we presume it's MS-generated, and look at
		     precisely the second symbol for the comdat name.
		     If the section name has a $, we assume it's
		     gas-generated, and look for <something> (whatever
		     follows the $) as the comdat symbol.  */
a616 1
		  /* All 3 branches use this */
a617 1

d621 1
a621 1
		  switch (seen_state)
d623 1
a623 76
		    case 0:
		      {
			/* The first time we've seen the symbol.  */
			union internal_auxent aux;

			seen_state = 1;

			/* If it isn't the stuff we're expecting, die;
			   The MS documentation is vague, but it
			   appears that the second entry serves BOTH
			   as the comdat symbol and the defining
			   symbol record (either C_STAT or C_EXT,
			   possibly with an aux entry with debug
			   information if it's a function.)  It
			   appears the only way to find the second one
			   is to count.  (On Intel, they appear to be
			   adjacent, but on Alpha, they have been
			   found separated.)

			   Here, we think we've found the first one,
			   but there's some checking we can do to be
			   sure.  */

			if (! (isym.n_sclass == C_STAT
			       && isym.n_type == T_NULL
			       && isym.n_value == 0))
			  abort ();

			/* FIXME LATER: MSVC generates section names
			   like .text for comdats.  Gas generates
			   names like .text$foo__Fv (in the case of a
			   function).  See comment above for more.  */

			if (strcmp (name, symname) != 0)
			  abort ();
  
			/* This is the section symbol.  */

			bfd_coff_swap_aux_in (abfd, (PTR) (esym + bfd_coff_symesz (abfd)),
					      isym.n_type, isym.n_sclass,
					      0, isym.n_numaux, (PTR) &aux);

			target_name = strchr (name, '$');
			if (target_name != NULL)
			  {
			    /* Gas mode.  */
			    seen_state = 2;
			    /* Skip the `$'.  */
			    target_name += 1;
			  }

			/* FIXME: Microsoft uses NODUPLICATES and
			   ASSOCIATIVE, but gnu uses ANY and
			   SAME_SIZE.  Unfortunately, gnu doesn't do
			   the comdat symbols right.  So, until we can
			   fix it to do the right thing, we are
			   temporarily disabling comdats for the MS
			   types (they're used in DLLs and C++, but we
			   don't support *their* C++ libraries anyway
			   - DJ.  */

			/* Cygwin does not follow the MS style, and
			   uses ANY and SAME_SIZE where NODUPLICATES
			   and ASSOCIATIVE should be used.  For
			   Interix, we just do the right thing up
			   front.  */

			switch (aux.x_scn.x_comdat)
			  {
			  case IMAGE_COMDAT_SELECT_NODUPLICATES:
#ifdef STRICT_PE_FORMAT 
			    sec_flags |= SEC_LINK_DUPLICATES_ONE_ONLY;
#else
			    sec_flags &= ~SEC_LINK_ONCE;
#endif
			    break;
d625 1
a625 37
			  case IMAGE_COMDAT_SELECT_ANY:
			    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
			    break;

			  case IMAGE_COMDAT_SELECT_SAME_SIZE:
			    sec_flags |= SEC_LINK_DUPLICATES_SAME_SIZE;
			    break;

			  case IMAGE_COMDAT_SELECT_EXACT_MATCH:
			    /* Not yet fully implemented ??? */
			    sec_flags |= SEC_LINK_DUPLICATES_SAME_CONTENTS;
			    break;

			  /* debug$S gets this case; other
                             implications ??? */

			  /* There may be no symbol... we'll search
			     the whole table... Is this the right
			     place to play this game? Or should we do
			     it when reading it in.  */
			  case IMAGE_COMDAT_SELECT_ASSOCIATIVE:
#ifdef STRICT_PE_FORMAT
			    /* FIXME: This is not currently implemented.  */
			    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
#else
			    sec_flags &= ~SEC_LINK_ONCE;
#endif
			    break;

			  default:  /* 0 means "no symbol" */
			    /* debug$F gets this case; other
                               implications ??? */
			    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
			    break;
			  }
	 	      }
		      break;
d627 3
a629 2
		    case 2:
		      /* Gas mode: the first matching on partial name.  */
d631 1
a631 6
#ifndef TARGET_UNDERSCORE
#define TARGET_UNDERSCORE 0
#endif
		      /* Is this the name we're looking for? */
		      if (strcmp (target_name, 
				  symname + (TARGET_UNDERSCORE ? 1 : 0)) != 0)
d633 21
a653 3
			    /* Not the name we're looking for */
	                    esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd);
			    continue;
a654 22
		      /* Fall through.  */
		    case 1: 
		      /* MSVC mode: the lexically second symbol (or
			 drop through from the above).  */
		      {
		        char *newname;

			/* This must the the second symbol with the
			   section #.  It is the actual symbol name.
			   Intel puts the two adjacent, but Alpha (at
			   least) spreads them out.  */

		        section->comdat = 
			  bfd_alloc (abfd, sizeof (struct bfd_comdat_info));
		        if (section->comdat == NULL)
		          abort ();
		        section->comdat->symbol =
			  (esym - esymstart) / bfd_coff_symesz (abfd);

		        newname = bfd_alloc (abfd, strlen (symname) + 1);
		        if (newname == NULL)
		          abort ();
d656 1
a656 6
		        strcpy (newname, symname);
		        section->comdat->name = newname;

		      }

		      goto breakloop;
d660 1
a660 1
	      esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd);
a661 1
	  breakloop:
a663 10

#if defined (COFF_LONG_SECTION_NAMES) && defined (COFF_SUPPORT_GNU_LINKONCE)
  /* As a GNU extension, if the name begins with .gnu.linkonce, we
     only link a single copy of the section.  This is used to support
     g++.  g++ will emit each template expansion in its own section.
     The symbols will be defined as weak, so that multiple definitions
     are permitted.  The GNU linker extension is to actually discard
     all but one of the sections.  */
  if (strncmp (name, ".gnu.linkonce", sizeof ".gnu.linkonce" - 1) == 0)
    sec_flags |= SEC_LINK_ONCE | SEC_LINK_DUPLICATES_DISCARD;
d666 1
a666 1
  return sec_flags;
a668 2
#endif /* COFF_WITH_PE */

a676 16
.{* COFF symbol classifications.  *}
.
.enum coff_symbol_classification
.{
.  {* Global symbol.  *}
.  COFF_SYMBOL_GLOBAL,
.  {* Common symbol.  *}
.  COFF_SYMBOL_COMMON,
.  {* Undefined symbol.  *}
.  COFF_SYMBOL_UNDEFINED,
.  {* Local symbol.  *}
.  COFF_SYMBOL_LOCAL,
.  {* PE section symbol.  *}
.  COFF_SYMBOL_PE_SECTION
.};
.
a751 1
. unsigned int _bfd_filnmlen;
d784 1
a784 2
.       const char *name,
.       asection *section));
d821 1
a821 1
. enum coff_symbol_classification (*_bfd_coff_classify_symbol) PARAMS ((
a863 7
. boolean (*_bfd_coff_link_output_has_begun) PARAMS ((
.	bfd * abfd,
.       struct coff_final_link_info * pfinfo));
. boolean (*_bfd_coff_final_link_postscript) PARAMS ((
.	bfd * abfd,
.	struct coff_final_link_info * pfinfo));
.
a904 1
.#define bfd_coff_filnmlen(abfd) (coff_backend_info (abfd)->_bfd_filnmlen)
d930 2
a931 3
.#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name, section)\
.        ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook)\
.         (abfd, scnhdr, name, section))
d954 2
a955 2
.#define bfd_coff_classify_symbol(abfd, sym)\
.        ((coff_backend_info (abfd)->_bfd_coff_classify_symbol)\
a977 5
.#define bfd_coff_link_output_has_begun(a,p) \
.        ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a,p))
.#define bfd_coff_final_link_postscript(a,p) \
.        ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a,p))
.
d984 1
a984 1
     bfd * abfd ATTRIBUTE_UNUSED;
d1002 1
a1002 1
  if (internal_f->f_opthdr != 0 && bfd_coff_aoutsz (abfd) != internal_f->f_opthdr)
d1009 4
a1012 62
/* Check whether this section uses an alignment other than the
   default.  */

static void
coff_set_custom_section_alignment (abfd, section, alignment_table, table_size)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section;
     const struct coff_section_alignment_entry *alignment_table;
     const unsigned int table_size;
{
  const unsigned int default_alignment = COFF_DEFAULT_SECTION_ALIGNMENT_POWER;
  unsigned int i;

  for (i = 0; i < table_size; ++i)
    {
      const char *secname = bfd_get_section_name (abfd, section);
      if (alignment_table[i].comparison_length == (unsigned int) -1
	  ? strcmp (alignment_table[i].name, secname) == 0
	  : strncmp (alignment_table[i].name, secname,
		     alignment_table[i].comparison_length) == 0)
	break;
    }
  if (i >= table_size)
    return;

  if (alignment_table[i].default_alignment_min != COFF_ALIGNMENT_FIELD_EMPTY
      && default_alignment < alignment_table[i].default_alignment_min)
    return;

  if (alignment_table[i].default_alignment_max != COFF_ALIGNMENT_FIELD_EMPTY
      && default_alignment > alignment_table[i].default_alignment_max)
    return;

  section->alignment_power = alignment_table[i].alignment_power;
}

/* Custom section alignment records.  */

static const struct coff_section_alignment_entry
coff_section_alignment_table[] =
{
#ifdef COFF_SECTION_ALIGNMENT_ENTRIES
  COFF_SECTION_ALIGNMENT_ENTRIES,
#endif
  /* There must not be any gaps between .stabstr sections.  */
  { COFF_SECTION_NAME_PARTIAL_MATCH (".stabstr"),
    1, COFF_ALIGNMENT_FIELD_EMPTY, 0 },
  /* The .stab section must be aligned to 2**2 at most, to avoid gaps.  */
  { COFF_SECTION_NAME_PARTIAL_MATCH (".stab"),
    3, COFF_ALIGNMENT_FIELD_EMPTY, 2 },
  /* Similarly for the .ctors and .dtors sections.  */
  { COFF_SECTION_NAME_EXACT_MATCH (".ctors"),
    3, COFF_ALIGNMENT_FIELD_EMPTY, 2 },
  { COFF_SECTION_NAME_EXACT_MATCH (".dtors"),
    3, COFF_ALIGNMENT_FIELD_EMPTY, 2 }
};

static const unsigned int coff_section_alignment_table_size =
  sizeof coff_section_alignment_table / sizeof coff_section_alignment_table[0];

/* Initialize a section structure with information peculiar to this
   particular implementation of COFF.  */
d1016 2
a1017 2
     bfd *abfd;
     asection *section;
a1018 2
  combined_entry_type *native;

d1035 20
a1054 19
  native = ((combined_entry_type *)
	    bfd_zalloc (abfd, sizeof (combined_entry_type) * 10));
  if (native == NULL)
    return false;

  /* We don't need to set up n_name, n_value, or n_scnum in the native
     symbol information, since they'll be overriden by the BFD symbol
     anyhow.  However, we do need to set the type and storage class,
     in case this symbol winds up getting written out.  The value 0
     for n_numaux is already correct.  */

  native->u.syment.n_type = T_NULL;
  native->u.syment.n_sclass = C_STAT;

  coffsymbol (section->symbol)->native = native;

  coff_set_custom_section_alignment (abfd, section,
				     coff_section_alignment_table,
				     coff_section_alignment_table_size);
d1059 1
a1059 1
#ifdef COFF_ALIGN_IN_SECTION_HEADER
d1067 1
a1067 1
     bfd * abfd ATTRIBUTE_UNUSED;
a1073 2
#ifdef I960
  /* Extract ALIGN from 2**ALIGN stored in section header */
a1076 5
#endif
#ifdef TIC80COFF
  /* TI tools hijack bits 8-11 for the alignment */
  i = (hdr->s_flags >> 8) & 0xF ;
#endif
d1080 1
a1080 1
#else /* ! COFF_ALIGN_IN_SECTION_HEADER */
d1100 1
a1100 1
     bfd * abfd ATTRIBUTE_UNUSED;
d1114 32
d1147 2
a1148 4
     section, while the s_size field holds the raw size.  We also keep
     the original section flag value, since not every bit can be
     mapped onto a generic BFD section bit.  */
  if (coff_section_data (abfd, section) == NULL)
d1150 1
a1150 3
      section->used_by_bfd =
	(PTR) bfd_zalloc (abfd, sizeof (struct coff_section_tdata));
      if (section->used_by_bfd == NULL)
d1152 7
a1158 2
	  /* FIXME: Return error.  */
	  abort ();
d1160 1
a1160 6
    }
  if (pei_section_data (abfd, section) == NULL)
    {
      coff_section_data (abfd, section)->tdata =
	(PTR) bfd_zalloc (abfd, sizeof (struct pei_section_tdata));
      if (coff_section_data (abfd, section)->tdata == NULL)
d1162 7
a1168 2
	  /* FIXME: Return error.  */
	  abort ();
d1170 1
d1172 1
a1172 2
  pei_section_data (abfd, section)->virt_size = hdr->s_paddr;
  pei_section_data (abfd, section)->pe_flags = hdr->s_flags;
a1173 1
  section->lma = hdr->s_vaddr;
d1225 1
a1225 1
#endif /* ! COFF_ALIGN_IN_SECTION_HEADER */
d1259 1
a1259 1
     PTR aouthdr ATTRIBUTE_UNUSED;
d1278 3
a1280 5
  coff->local_symesz = bfd_coff_symesz (abfd);
  coff->local_auxesz = bfd_coff_auxesz (abfd);
  coff->local_linesz = bfd_coff_linesz (abfd);

  coff->timestamp = internal_f->f_timdat;
d1289 1
a1289 1
  if (aouthdr != NULL && internal_f->f_opthdr >= bfd_coff_aoutsz (abfd))
a1308 13
#ifdef ARM 
  /* Set the flags field from the COFF header read in */
  if (! _bfd_coff_arm_set_private_flags (abfd, internal_f->f_flags))
    coff->flags = 0;
#endif
  
#ifdef COFF_WITH_PE
  /* FIXME: I'm not sure this is ever executed, since peicode.h
     defines coff_mkobject_hook.  */
  if ((internal_f->f_flags & IMAGE_FILE_DEBUG_STRIPPED) == 0)
    abfd->flags |= HAS_DEBUG;
#endif

a1355 2
    case ARMPEMAGIC:
    case THUMBPEMAGIC:
d1357 1
a1357 11
      switch (internal_f->f_flags & F_ARM_ARCHITECTURE_MASK)
	{
        case F_ARM_2:  machine = bfd_mach_arm_2;  break;
        case F_ARM_2a: machine = bfd_mach_arm_2a; break;
        case F_ARM_3:  machine = bfd_mach_arm_3;  break;
        default:
        case F_ARM_3M: machine = bfd_mach_arm_3M; break;
        case F_ARM_4:  machine = bfd_mach_arm_4;  break;
        case F_ARM_4T: machine = bfd_mach_arm_4T; break;
        case F_ARM_5:  machine = bfd_mach_arm_5;  break;
	}
d1373 1
a1373 1
      machine = bfd_mach_m68020;
d1461 1
a1461 1
		bfd_byte *buf;
a1463 1
		buf = (bfd_byte *) bfd_malloc (bfd_coff_symesz (abfd));
d1465 2
a1466 6
		    || (bfd_read (buf, 1, bfd_coff_symesz (abfd), abfd) 
			!= bfd_coff_symesz (abfd)))
		  {
		    free (buf);
		    return false;
		  }
a1471 1
		free (buf);
a1549 3
#ifdef COFF_WITH_PE
    case SH_ARCH_MAGIC_WINCE:
#endif
a1554 7
#ifdef MIPS_ARCH_MAGIC_WINCE
    case MIPS_ARCH_MAGIC_WINCE:
      arch = bfd_arch_mips;
      machine = 0;
      break;
#endif

a1571 6
#ifdef TIC30MAGIC
    case TIC30MAGIC:
      arch = bfd_arch_tic30;
      break;
#endif

a1577 5
#ifdef MCOREMAGIC
    case MCOREMAGIC:
      arch = bfd_arch_mcore;
      break;
#endif
d1594 1
a1594 1
     bfd * abfd ATTRIBUTE_UNUSED;
d1618 1
a1618 1
     bfd *abfd ATTRIBUTE_UNUSED;
d1658 2
a1659 2
     bfd *abfd ATTRIBUTE_UNUSED;
     combined_entry_type *table_base ATTRIBUTE_UNUSED;
d1662 1
a1662 1
     combined_entry_type *aux ATTRIBUTE_UNUSED;
d1687 6
a1692 6
     bfd *abfd ATTRIBUTE_UNUSED;
     FILE *file ATTRIBUTE_UNUSED;
     combined_entry_type *table_base ATTRIBUTE_UNUSED;
     combined_entry_type *symbol ATTRIBUTE_UNUSED;
     combined_entry_type *aux ATTRIBUTE_UNUSED;
     unsigned int indaux ATTRIBUTE_UNUSED;
a1837 3
#ifdef SECTION_RELATIVE_ABSOLUTE_SYMBOL_P
                if (SECTION_RELATIVE_ABSOLUTE_SYMBOL_P (q,s))
#else
a1838 1
#endif
d1863 1
a1863 2
	  if (bfd_write ((PTR) & dst, 1, bfd_coff_relsz (abfd), abfd)
	      != bfd_coff_relsz (abfd))
d1882 2
a1883 2
     unsigned int *magicp ATTRIBUTE_UNUSED;
     unsigned short *flagsp ATTRIBUTE_UNUSED;
a1947 11

#ifdef TIC30MAGIC
    case bfd_arch_tic30:
      *magicp = TIC30MAGIC;
      return true;
#endif
#ifdef TIC80_ARCH_MAGIC
    case bfd_arch_tic80:
      *magicp = TIC80_ARCH_MAGIC;
      return true;
#endif
d1950 1
a1950 30
#ifdef ARM_WINCE
      * magicp = ARMPEMAGIC;
#else
      * magicp = ARMMAGIC;
#endif
      * flagsp = 0;
      if (APCS_SET (abfd))
	{
	  if (APCS_26_FLAG (abfd))
	    * flagsp |= F_APCS26;
	  
	  if (APCS_FLOAT_FLAG (abfd))
	    * flagsp |= F_APCS_FLOAT;
	  
	  if (PIC_FLAG (abfd))
	    * flagsp |= F_PIC;
	}
      if (INTERWORK_SET (abfd) && INTERWORK_FLAG (abfd))
	* flagsp |= F_INTERWORK;
      switch (bfd_get_mach (abfd))
	{
	case bfd_mach_arm_2:  * flagsp |= F_ARM_2;  break;
	case bfd_mach_arm_2a: * flagsp |= F_ARM_2a; break;
	case bfd_mach_arm_3:  * flagsp |= F_ARM_3;  break;
	case bfd_mach_arm_3M: * flagsp |= F_ARM_3M; break;
	case bfd_mach_arm_4:  * flagsp |= F_ARM_4;  break;
	case bfd_mach_arm_4T: * flagsp |= F_ARM_4T; break;
	case bfd_mach_arm_5:  * flagsp |= F_ARM_5;  break;
	case bfd_mach_arm_5T: * flagsp |= F_ARM_5;  break; /* XXX - we do not have an F_ARM_5T */
	}
a2019 3
#ifdef COFF_IMAGE_WITH_PE
      *magicp = SH_ARCH_MAGIC_WINCE;
#else
a2023 8
#endif
      return true;
      break;
#endif

#ifdef MIPS_ARCH_MAGIC_WINCE
    case bfd_arch_mips:
      *magicp = MIPS_ARCH_MAGIC_WINCE;
a2071 6
#ifdef MCOREMAGIC
    case bfd_arch_mcore:
      * magicp = MCOREMAGIC;
      return true;
#endif
      
a2100 24
#ifdef COFF_IMAGE_WITH_PE

/* This is used to sort sections by VMA, as required by PE image
   files.  */

static int sort_by_secaddr PARAMS ((const PTR, const PTR));

static int
sort_by_secaddr (arg1, arg2)
     const PTR arg1;
     const PTR arg2;
{
  const asection *a = *(const asection **) arg1;
  const asection *b = *(const asection **) arg2;

  if (a->vma < b->vma)
    return -1;
  else if (a->vma > b->vma)
    return 1;
  else
    return 0;
}

#endif /* COFF_IMAGE_WITH_PE */
a2103 7
#ifndef I960
#define ALIGN_SECTIONS_IN_FILE
#endif
#ifdef TIC80COFF
#undef ALIGN_SECTIONS_IN_FILE
#endif

d2110 1
a2110 1
  file_ptr sofar = bfd_coff_filhsz (abfd);
d2112 2
a2113 1
#ifdef ALIGN_SECTIONS_IN_FILE
d2116 1
d2179 1
a2179 1
    sofar += bfd_coff_aoutsz (abfd);
d2182 1
a2182 1
    sofar += bfd_coff_aoutsz (abfd);
d2187 1
a2187 1
  sofar += abfd->section_count * bfd_coff_scnhsz (abfd);
d2194 1
a2194 1
      sofar += bfd_coff_scnhsz (abfd);
a2196 72
#ifdef COFF_IMAGE_WITH_PE
  {
    /* PE requires the sections to be in memory order when listed in
       the section headers.  It also does not like empty loadable
       sections.  The sections apparently do not have to be in the
       right order in the image file itself, but we do need to get the
       target_index values right.  */

    int count;
    asection **section_list;
    int i;
    int target_index;

    count = 0;
    for (current = abfd->sections; current != NULL; current = current->next)
      ++count;

    /* We allocate an extra cell to simplify the final loop.  */
    section_list = bfd_malloc (sizeof (struct asection *) * (count + 1));
    if (section_list == NULL)
      return false;

    i = 0;
    for (current = abfd->sections; current != NULL; current = current->next)
      {
	section_list[i] = current;
	++i;
      }
    section_list[i] = NULL;

    qsort (section_list, count, sizeof (asection *), sort_by_secaddr);

    /* Rethread the linked list into sorted order; at the same time,
       assign target_index values.  */
    target_index = 1;
    abfd->sections = section_list[0];
    for (i = 0; i < count; i++)
      {
	current = section_list[i];
	current->next = section_list[i + 1];

	/* Later, if the section has zero size, we'll be throwing it
	   away, so we don't want to number it now.  Note that having
	   a zero size and having real contents are different
	   concepts: .bss has no contents, but (usually) non-zero
	   size.  */
	if (current->_raw_size == 0)
	  {
	    /* Discard.  However, it still might have (valid) symbols
	       in it, so arbitrarily set it to section 1 (indexing is
	       1-based here; usually .text).  __end__ and other
	       contents of .endsection really have this happen.
	       FIXME: This seems somewhat dubious.  */
	    current->target_index = 1;
	  }
	else
	  current->target_index = target_index++;
      }

    free (section_list);
  }
#else /* ! COFF_IMAGE_WITH_PE */
  {
    /* Set the target_index field.  */
    int target_index;

    target_index = 1;
    for (current = abfd->sections; current != NULL; current = current->next)
      current->target_index = target_index++;
  }
#endif /* ! COFF_IMAGE_WITH_PE */

d2198 1
a2198 1
  for (current = abfd->sections;
d2200 1
a2200 1
       current = current->next)
d2202 1
a2202 20
#ifdef COFF_IMAGE_WITH_PE
      /* With PE we have to pad each section to be a multiple of its
	 page size too, and remember both sizes.  */
      if (coff_section_data (abfd, current) == NULL)
	{
	  current->used_by_bfd =
	    (PTR) bfd_zalloc (abfd, sizeof (struct coff_section_tdata));
	  if (current->used_by_bfd == NULL)
	    return false;
	}
      if (pei_section_data (abfd, current) == NULL)
	{
	  coff_section_data (abfd, current)->tdata =
	    (PTR) bfd_zalloc (abfd, sizeof (struct pei_section_tdata));
	  if (coff_section_data (abfd, current)->tdata == NULL)
	    return false;
	}
      if (pei_section_data (abfd, current)->virt_size == 0)
	pei_section_data (abfd, current)->virt_size = current->_raw_size;
#endif
d2204 1
a2204 1
      /* Only deal with sections which have contents.  */
a2207 6
#ifdef COFF_IMAGE_WITH_PE
      /* Make sure we skip empty sections in a PE image.  */
      if (current->_raw_size == 0)
	continue;
#endif

d2212 1
a2212 1
#ifdef ALIGN_SECTIONS_IN_FILE
d2238 20
a2257 1
      /* Set the padded size.  */
d2263 1
a2263 1
#ifdef ALIGN_SECTIONS_IN_FILE
a2283 8
#ifdef COFF_IMAGE_WITH_PE
      /* For PE we need to make sure we pad out to the aligned
         _raw_size, in case the caller only writes out data to the
         unaligned _raw_size.  */
      if (pei_section_data (abfd, current)->virt_size < current->_raw_size)
	align_adjust = true;
#endif

a2405 1
  boolean hasdebug = false;
d2427 1
a2427 1
  lnno_size = coff_count_linenumbers (abfd) * bfd_coff_linesz (abfd);
d2441 1
a2441 1
    reloc_size += current->reloc_count * bfd_coff_relsz (abfd);
d2454 1
a2454 1
	  lineno_base += current->lineno_count * bfd_coff_linesz (abfd);
d2463 1
a2463 1
	  reloc_base += current->reloc_count * bfd_coff_relsz (abfd);
d2475 1
a2475 1
    scn_base = bfd_coff_filhsz (abfd) + bfd_coff_aoutsz (abfd);
d2478 1
a2478 1
      scn_base = bfd_coff_filhsz (abfd);
d2481 1
a2481 1
	scn_base += bfd_coff_aoutsz (abfd);
d2496 3
a2498 1
      boolean is_reloc_section = false;
a2502 2
	  is_reloc_section = true;
	  hasrelocs = true;
d2507 1
d2514 1
a2514 1
         with the code in coff_write_symbols and _bfd_coff_final_link.  */
a2568 2
#ifndef COFF_IMAGE_WITH_PE
      /* In PEI, relocs come in the .reloc section.  */
a2570 1
#endif
a2572 3
      if ((current->flags & SEC_DEBUGGING) != 0
	  && ! is_reloc_section)
	hasdebug = true;
d2602 1
a2602 4
#else
#ifdef TIC80COFF
      section.s_flags |= (current->alignment_power & 0xF) << 8;
#endif
d2606 4
a2609 5
      /* Suppress output of the sections if they are null.  ld
	 includes the bss and data sections even if there is no size
	 assigned to them.  NT loader doesn't like it if these section
	 headers are included if the sections themselves are not
	 needed.  See also coff_compute_section_file_positions.  */
d2617 1
a2617 2
	      || bfd_write ((PTR) (&buff), 1, bfd_coff_scnhsz (abfd), abfd)
	           != bfd_coff_scnhsz (abfd))
d2629 1
a2629 2
	  coff_symbol_type *csym = NULL;
	  asymbol **psymsec;
a2630 1
	  psymsec = NULL;
d2634 1
a2634 7
	      if ((*psym)->section != current)
		continue;

	      /* Remember the location of the first symbol in this
                 section.  */
	      if (psymsec == NULL)
		psymsec = psym;
a2635 1
	      /* See if this is the section symbol.  */
a2644 3

		  /* Here *PSYM is the section symbol for CURRENT.  */

a2680 18

	      /* The COMDAT symbol must be the first symbol from this
                 section in the symbol table.  In order to make this
                 work, we move the COMDAT symbol before the first
                 symbol we found in the search above.  It's OK to
                 rearrange the symbol table at this point, because
                 coff_renumber_symbols is going to rearrange it
                 further and fix up all the aux entries.  */
	      if (psym != psymsec)
		{
		  asymbol *hold;
		  asymbol **pcopy;

		  hold = *psym;
		  for (pcopy = psym; pcopy > psymsec; pcopy--)
		    pcopy[0] = pcopy[-1];
		  *psymsec = hold;
		}
d2708 1
a2708 2
	      || bfd_write ((PTR) &buff, 1, bfd_coff_scnhsz (abfd), abfd)
	           != bfd_coff_scnhsz (abfd))
d2729 1
a2729 1
    internal_f.f_opthdr = bfd_coff_aoutsz (abfd);
d2735 1
a2735 1
	internal_f.f_opthdr = bfd_coff_aoutsz (abfd);
a2746 4
#ifdef COFF_IMAGE_WITH_PE
  if (! hasdebug)
    internal_f.f_flags |= IMAGE_FILE_DEBUG_STRIPPED;
#endif
d2748 1
a2748 1
#ifndef COFF_WITH_PE
a2752 5
#endif

#ifdef TIC80_TARGET_ID
  internal_f.f_target_id = TIC80_TARGET_ID;
#endif
d2791 1
a2791 1
#ifdef TIC80COFF
a2834 1

a2838 6

#if defined MCORE_PE
#define __A_MAGIC_SET__
    internal_a.magic = IMAGE_NT_OPTIONAL_HDR_MAGIC;
#endif 

d2855 1
a2855 1
#ifdef RS6000COFF_C
a2861 10
#if defined(SH) && defined(COFF_WITH_PE)
#define __A_MAGIC_SET__
    internal_a.magic = SH_PE_MAGIC;
#endif

#if defined(MIPS) && defined(COFF_WITH_PE)
#define __A_MAGIC_SET__
    internal_a.magic = MIPS_PE_MAGIC;
#endif

a2891 9
#ifdef COFF_LONG_SECTION_NAMES
  else if (long_section_names)
    {
      /* If we have long section names we have to write out the string
         table even if there are no symbols.  */
      if (! coff_write_symbols (abfd))
	return false;
    }
#endif
a3024 1
  
d3026 1
a3026 7
    char * buff;
    bfd_size_type amount;
    
    buff = bfd_malloc (bfd_coff_filhsz (abfd));
    if (buff == NULL) 
      return false;
    
d3028 1
a3028 5
    amount = bfd_write ((PTR) buff, 1, bfd_coff_filhsz (abfd), abfd);
    
    free (buff);
    
    if (amount != bfd_coff_filhsz (abfd))
a3030 1
  
d3035 1
a3035 7
      char * buff;
      bfd_size_type amount;

      buff = bfd_malloc (bfd_coff_aoutsz (abfd));
      if (buff == NULL) 
	return false;
      
d3037 1
a3037 5
      amount = bfd_write ((PTR) buff, 1, bfd_coff_aoutsz (abfd), abfd);
      
      free (buff);
      
      if (amount != bfd_coff_aoutsz (abfd))
d3049 1
a3049 1
	size = bfd_coff_aoutsz (abfd);
a3183 3
	Note: The PE format uses line number 0 for a flag indicating a
	new source file.

d3205 1
a3205 1
					   (size_t) (bfd_coff_linesz (abfd) *
d3231 1
a3231 2
	      if (symndx < 0
		  || (unsigned long) symndx >= obj_raw_syment_count (abfd))
d3234 1
a3234 1
		    (_("%s: warning: illegal symbol index %ld in line numbers"),
d3248 1
a3248 1
		    (_("%s: warning: duplicate line number information for `%s'"),
a3271 4
/* Slurp in the symbol table, converting it to generic form.  Note
   that if coff_relocate_section is defined, the linker will read
   symbols via coff_link_add_symbols, rather than via this routine.  */

a3338 5
	    case C_WEAKEXT:
#if defined ARM
            case C_THUMBEXT:
            case C_THUMBEXTFUNC:
#endif
a3341 3
#ifdef C_SYSTEM
	    case C_SYSTEM:	/* System Wide variable */
#endif
d3343 1
a3343 1
            /* In PE, 0x68 (104) denotes a section symbol */
d3345 1
a3345 1
	    /* In PE, 0x69 (105) denotes a weak external symbol.  */
d3348 14
a3361 1
	      switch (coff_classify_symbol (abfd, &src->u.syment))
d3363 3
a3365 1
		case COFF_SYMBOL_GLOBAL:
a3366 5
#if defined COFF_WITH_PE
		  /* PE sets the symbol to a value relative to the
                     start of the section.  */
		  dst->symbol.value = src->u.syment.n_value;
#else
d3369 1
a3369 1
#endif
a3375 30
		  break;

		case COFF_SYMBOL_COMMON:
		  dst->symbol.section = bfd_com_section_ptr;
		  dst->symbol.value = src->u.syment.n_value;
		  break;

		case COFF_SYMBOL_UNDEFINED:
		  dst->symbol.section = bfd_und_section_ptr;
		  dst->symbol.value = 0;
		  break; 

		case COFF_SYMBOL_PE_SECTION:
		  dst->symbol.flags |= BSF_EXPORT | BSF_SECTION_SYM;
		  dst->symbol.value = 0;
		  break;

		case COFF_SYMBOL_LOCAL:
		  dst->symbol.flags = BSF_LOCAL;
#if defined COFF_WITH_PE
		  /* PE sets the symbol to a value relative to the
                     start of the section.  */
		  dst->symbol.value = src->u.syment.n_value;
#else
		  dst->symbol.value = (src->u.syment.n_value
				       - dst->symbol.section->vma);
#endif
		  if (ISFCN ((src->u.syment.n_type)))
		    dst->symbol.flags |= BSF_NOT_AT_END | BSF_FUNCTION;
		  break;
d3379 3
a3389 5
	      if (src->u.syment.n_sclass == C_SECTION
		  && src->u.syment.n_scnum > 0)
		{
		  dst->symbol.flags = BSF_LOCAL;
		}
a3391 3
	      if (src->u.syment.n_sclass == C_WEAKEXT)
		dst->symbol.flags = BSF_WEAK;

a3397 5
#if defined ARM 
            case C_THUMBSTAT:   /* Thumb static                  */
            case C_THUMBLABEL:  /* Thumb label                   */
            case C_THUMBSTATFUNC:/* Thumb static function        */
#endif
d3399 1
a3399 1
	      if (src->u.syment.n_scnum == N_DEBUG)
d3407 2
a3408 10
		{
#if defined COFF_WITH_PE
		  /* PE sets the symbol to a value relative to the
                     start of the section.  */
		  dst->symbol.value = src->u.syment.n_value;
#else
		  dst->symbol.value = (src->u.syment.n_value
				       - dst->symbol.section->vma);
#endif
		}
a3421 1
#ifndef TIC80COFF
a3424 1
#endif
d3471 1
a3471 1
				      + sec->lineno_count * bfd_coff_linesz (abfd))
d3481 1
a3481 1
					 / bfd_coff_linesz (abfd));
d3501 1
a3501 1
	    case C_FCN:		/* ".bf" or ".ef" (or PE ".lf")	 */
d3503 1
a3503 13
#if defined COFF_WITH_PE
	      /* PE sets the symbol to a value relative to the start
		 of the section.  */
	      dst->symbol.value = src->u.syment.n_value;
	      if (strcmp (dst->symbol.name, ".bf") != 0)
		{
		  /* PE uses funny values for .ef and .lf; don't
                     relocate them.  */
		  dst->symbol.flags = BSF_DEBUGGING;
		}
	      else
		dst->symbol.flags = BSF_DEBUGGING | BSF_DEBUGGING_RELOC;
#else
a3505 1
	      dst->symbol.flags = BSF_LOCAL;
a3507 1
#endif
a3510 7
	      /* PE DLLs sometimes have zeroed out symbols for some
                 reason.  Just ignore them without a warning.  */
	      if (src->u.syment.n_type == 0
		  && src->u.syment.n_value == 0
		  && src->u.syment.n_scnum == 0)
		break;
	      /* Fall through.  */
a3520 6
	      /* New storage classes for TIc80 */
#ifdef TIC80COFF
	    case C_UEXT:	/* Tentative external definition */
#endif
	    case C_STATLAB:	/* Static load time label */
	    case C_EXTLAB:	/* External load time label */
d3524 1
a3524 1
		(_("%s: Unrecognized storage class %d for %s symbol `%s'"),
d3562 6
a3567 3
/* Classify a COFF symbol.  A couple of targets have globally visible
   symbols which are not class C_EXT, and this handles those.  It also
   recognizes some special PE cases.  */
a3568 11
static enum coff_symbol_classification
coff_classify_symbol (abfd, syment)
     bfd *abfd;
     struct internal_syment *syment;
{
  /* FIXME: This partially duplicates the switch in
     coff_slurp_symbol_table.  */
  switch (syment->n_sclass)
    {
    case C_EXT:
    case C_WEAKEXT:
d3570 1
a3570 8
    case C_LEAFEXT:
#endif
#ifdef ARM
    case C_THUMBEXT:
    case C_THUMBEXTFUNC:
#endif
#ifdef C_SYSTEM
    case C_SYSTEM:
d3572 1
d3574 1
a3574 1
    case C_NT_WEAK:
a3575 8
      if (syment->n_scnum == 0)
	{
	  if (syment->n_value == 0)
	    return COFF_SYMBOL_UNDEFINED;
	  else
	    return COFF_SYMBOL_COMMON;
	}
      return COFF_SYMBOL_GLOBAL;
d3577 1
a3577 3
    default:
      break;
    }
d3579 1
a3579 11
#ifdef COFF_WITH_PE
  if (syment->n_sclass == C_STAT)
    {
      if (syment->n_scnum == 0)
	{
	  /* The Microsoft compiler sometimes generates these if a
             small static function is inlined every time it is used.
             The function is discarded, but the symbol table entry
             remains.  */
	  return COFF_SYMBOL_LOCAL;
	}
d3581 9
a3589 3
#ifdef STRICT_PE_FORMAT
      /* This is correct for Microsoft generated objects, but it
         breaks gas generated objects.  */
d3591 1
a3591 4
      if (syment->n_value == 0)
	{
	  asection *sec;
	  char buf[SYMNMLEN + 1];
d3593 1
a3593 8
	  sec = coff_section_from_bfd_index (abfd, syment->n_scnum);
	  if (sec != NULL
	      && (strcmp (bfd_get_section_name (abfd, sec),
			  _bfd_coff_internal_syment_name (abfd, syment, buf))
		  == 0))
	    return COFF_SYMBOL_PE_SECTION;
	}
#endif
d3595 1
a3595 2
      return COFF_SYMBOL_LOCAL;
    }
d3597 1
a3597 17
  if (syment->n_sclass == C_SECTION)
    {
      /* In some cases in a DLL generated by the Microsoft linker, the
         n_value field will contain garbage.  FIXME: This should
         probably be handled by the swapping function instead.  */
      syment->n_value = 0;
      if (syment->n_scnum == 0)
	return COFF_SYMBOL_UNDEFINED;
      return COFF_SYMBOL_PE_SECTION;
    }
#endif /* COFF_WITH_PE */

  /* If it is not a global symbol, we presume it is a local symbol.  */

  if (syment->n_scnum == 0)
    {
      char buf[SYMNMLEN + 1];
d3599 1
a3599 8
      (*_bfd_error_handler)
	(_("warning: %s: local symbol `%s' has no section"),
	 bfd_get_filename (abfd),
	 _bfd_coff_internal_syment_name (abfd, syment, buf));
    }

  return COFF_SYMBOL_LOCAL;
}
d3674 1
a3674 1
			    (size_t) (bfd_coff_relsz (abfd) *
d3706 1
a3706 1
		(_("%s: warning: illegal symbol index %ld in relocs"),
d3744 1
a3744 1
	    (_("%s: illegal relocation type %d at address 0x%lx"),
d3772 2
a3773 2
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *sec ATTRIBUTE_UNUSED;
d3775 3
a3777 3
     struct coff_link_hash_entry *h ATTRIBUTE_UNUSED;
     struct internal_syment *sym ATTRIBUTE_UNUSED;
     bfd_vma *addendp ATTRIBUTE_UNUSED;
d3851 5
a3855 5
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *input_section ATTRIBUTE_UNUSED;
     arelent *reloc ATTRIBUTE_UNUSED;
     unsigned int shrink ATTRIBUTE_UNUSED;
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
a3857 1
  return 0;
d3875 7
a3881 7
     bfd *abfd ATTRIBUTE_UNUSED;
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     struct bfd_link_order *link_order ATTRIBUTE_UNUSED;
     arelent *reloc ATTRIBUTE_UNUSED;
     bfd_byte *data ATTRIBUTE_UNUSED;
     unsigned int *src_ptr ATTRIBUTE_UNUSED;
     unsigned int *dst_ptr ATTRIBUTE_UNUSED;
a3908 1

d3923 1
a3923 72
#ifndef coff_link_output_has_begun

static boolean coff_link_output_has_begun
  PARAMS ((bfd *, struct coff_final_link_info *));

static boolean
coff_link_output_has_begun (abfd, info)
     bfd * abfd;
     struct coff_final_link_info * info ATTRIBUTE_UNUSED;
{
  return abfd->output_has_begun;
}
#endif

#ifndef coff_final_link_postscript

static boolean coff_final_link_postscript
  PARAMS ((bfd *, struct coff_final_link_info *));

static boolean
coff_final_link_postscript (abfd, pfinfo)
     bfd * abfd ATTRIBUTE_UNUSED;
     struct coff_final_link_info * pfinfo ATTRIBUTE_UNUSED;
{
  return true;
}
#endif

#ifndef coff_SWAP_aux_in
#define coff_SWAP_aux_in coff_swap_aux_in
#endif
#ifndef coff_SWAP_sym_in
#define coff_SWAP_sym_in coff_swap_sym_in
#endif
#ifndef coff_SWAP_lineno_in
#define coff_SWAP_lineno_in coff_swap_lineno_in
#endif
#ifndef coff_SWAP_aux_out
#define coff_SWAP_aux_out coff_swap_aux_out
#endif
#ifndef coff_SWAP_sym_out
#define coff_SWAP_sym_out coff_swap_sym_out
#endif
#ifndef coff_SWAP_lineno_out
#define coff_SWAP_lineno_out coff_swap_lineno_out
#endif
#ifndef coff_SWAP_reloc_out
#define coff_SWAP_reloc_out coff_swap_reloc_out
#endif
#ifndef coff_SWAP_filehdr_out
#define coff_SWAP_filehdr_out coff_swap_filehdr_out
#endif
#ifndef coff_SWAP_aouthdr_out
#define coff_SWAP_aouthdr_out coff_swap_aouthdr_out
#endif
#ifndef coff_SWAP_scnhdr_out
#define coff_SWAP_scnhdr_out coff_swap_scnhdr_out
#endif
#ifndef coff_SWAP_reloc_in
#define coff_SWAP_reloc_in coff_swap_reloc_in
#endif
#ifndef coff_SWAP_filehdr_in
#define coff_SWAP_filehdr_in coff_swap_filehdr_in
#endif
#ifndef coff_SWAP_aouthdr_in
#define coff_SWAP_aouthdr_in coff_swap_aouthdr_in
#endif
#ifndef coff_SWAP_scnhdr_in
#define coff_SWAP_scnhdr_in coff_swap_scnhdr_in
#endif

static const bfd_coff_backend_data bfd_coff_std_swap_table =
d3925 6
a3930 6
  coff_SWAP_aux_in, coff_SWAP_sym_in, coff_SWAP_lineno_in,
  coff_SWAP_aux_out, coff_SWAP_sym_out,
  coff_SWAP_lineno_out, coff_SWAP_reloc_out,
  coff_SWAP_filehdr_out, coff_SWAP_aouthdr_out,
  coff_SWAP_scnhdr_out,
  FILHSZ, AOUTSZ, SCNHSZ, SYMESZ, AUXESZ, RELSZ, LINESZ, FILNMLEN,
d3942 2
a3943 2
  coff_SWAP_filehdr_in, coff_SWAP_aouthdr_in, coff_SWAP_scnhdr_in,
  coff_SWAP_reloc_in, coff_bad_format_hook, coff_set_arch_mach_hook,
d3947 1
a3947 1
  coff_classify_symbol, coff_compute_section_file_positions,
d3949 1
a3949 2
  coff_adjust_symndx, coff_link_add_one_symbol,
  coff_link_output_has_begun, coff_final_link_postscript
d3952 3
a3954 11
#ifndef coff_close_and_cleanup
#define	coff_close_and_cleanup              _bfd_generic_close_and_cleanup
#endif

#ifndef coff_bfd_free_cached_info
#define coff_bfd_free_cached_info           _bfd_generic_bfd_free_cached_info
#endif

#ifndef coff_get_section_contents
#define	coff_get_section_contents           _bfd_generic_get_section_contents
#endif
d3957 1
a3957 1
#define coff_bfd_copy_private_symbol_data   _bfd_generic_bfd_copy_private_symbol_data
d3965 1
a3965 5
#define coff_bfd_copy_private_bfd_data      _bfd_generic_bfd_copy_private_bfd_data
#endif

#ifndef coff_bfd_merge_private_bfd_data
#define coff_bfd_merge_private_bfd_data     _bfd_generic_bfd_merge_private_bfd_data
d3968 2
a3969 3
#ifndef coff_bfd_set_private_flags
#define coff_bfd_set_private_flags          _bfd_generic_bfd_set_private_flags
#endif
d3972 1
a3972 1
#define coff_bfd_print_private_bfd_data     _bfd_generic_bfd_print_private_bfd_data
d3976 1
a3976 1
#define coff_bfd_is_local_label_name	    _bfd_coff_is_local_label_name
a3977 1

d3979 1
a3979 1
#define coff_read_minisymbols		    _bfd_generic_read_minisymbols
a3980 1

d3982 1
a3982 1
#define coff_minisymbol_to_symbol	    _bfd_generic_minisymbol_to_symbol
d3988 1
a3988 1
#define coff_bfd_reloc_type_lookup	    _bfd_norelocs_bfd_reloc_type_lookup
a3994 1

d3996 1
a3996 5
#define coff_bfd_relax_section		    bfd_generic_relax_section
#endif

#ifndef coff_bfd_gc_sections
#define coff_bfd_gc_sections		    bfd_generic_gc_sections
a3997 98

#define CREATE_BIG_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE)	\
const bfd_target VAR =							\
{									\
  NAME ,								\
  bfd_target_coff_flavour,						\
  BFD_ENDIAN_BIG,		/* data byte order is big */		\
  BFD_ENDIAN_BIG,		/* header byte order is big */		\
  /* object flags */							\
  (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG |			\
   HAS_SYMS | HAS_LOCALS | WP_TEXT | EXTRA_O_FLAGS),			\
  /* section flags */							\
  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | EXTRA_S_FLAGS),\
  UNDER,			/* leading symbol underscore */		\
  '/',				/* ar_pad_char */			\
  15,				/* ar_max_namelen */			\
  									\
  /* Data conversion functions.  */					\
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,				\
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,				\
  bfd_getb16, bfd_getb_signed_16, bfd_putb16,				\
  									\
  /* Header conversion functions.  */					\
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,				\
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,				\
  bfd_getb16, bfd_getb_signed_16, bfd_putb16,				\
									\
	/* bfd_check_format */						\
  { _bfd_dummy_target, coff_object_p, bfd_generic_archive_p,		\
    _bfd_dummy_target },						\
	/* bfd_set_format */						\
  { bfd_false, coff_mkobject, _bfd_generic_mkarchive, bfd_false },	\
	/* bfd_write_contents */					\
  { bfd_false, coff_write_object_contents, _bfd_write_archive_contents,	\
    bfd_false },							\
									\
  BFD_JUMP_TABLE_GENERIC (coff),					\
  BFD_JUMP_TABLE_COPY (coff),						\
  BFD_JUMP_TABLE_CORE (_bfd_nocore),					\
  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),				\
  BFD_JUMP_TABLE_SYMBOLS (coff),					\
  BFD_JUMP_TABLE_RELOCS (coff),						\
  BFD_JUMP_TABLE_WRITE (coff),						\
  BFD_JUMP_TABLE_LINK (coff),						\
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),				\
  									\
  ALTERNATIVE,								\
  									\
  COFF_SWAP_TABLE							\
};

#define CREATE_LITTLE_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE)	\
const bfd_target VAR =							\
{									\
  NAME ,								\
  bfd_target_coff_flavour,						\
  BFD_ENDIAN_LITTLE,		/* data byte order is little */		\
  BFD_ENDIAN_LITTLE,		/* header byte order is little */	\
	/* object flags */						\
  (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG |			\
   HAS_SYMS | HAS_LOCALS | WP_TEXT | EXTRA_O_FLAGS),			\
	/* section flags */						\
  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | EXTRA_S_FLAGS),\
  UNDER,			/* leading symbol underscore */		\
  '/',				/* ar_pad_char */			\
  15,				/* ar_max_namelen */			\
									\
  /* Data conversion functions.  */					\
  bfd_getl64, bfd_getl_signed_64, bfd_putl64,				\
  bfd_getl32, bfd_getl_signed_32, bfd_putl32,				\
  bfd_getl16, bfd_getl_signed_16, bfd_putl16,				\
  /* Header conversion functions.  */					\
  bfd_getl64, bfd_getl_signed_64, bfd_putl64,				\
  bfd_getl32, bfd_getl_signed_32, bfd_putl32,				\
  bfd_getl16, bfd_getl_signed_16, bfd_putl16,				\
	/* bfd_check_format */						\
  { _bfd_dummy_target, coff_object_p, bfd_generic_archive_p,		\
    _bfd_dummy_target },						\
       /* bfd_set_format */						\
  { bfd_false, coff_mkobject, _bfd_generic_mkarchive, bfd_false },	\
	/* bfd_write_contents */					\
  { bfd_false, coff_write_object_contents, _bfd_write_archive_contents,	\
    bfd_false },							\
									\
  BFD_JUMP_TABLE_GENERIC (coff),					\
  BFD_JUMP_TABLE_COPY (coff),						\
  BFD_JUMP_TABLE_CORE (_bfd_nocore),					\
  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),				\
  BFD_JUMP_TABLE_SYMBOLS (coff),					\
  BFD_JUMP_TABLE_RELOCS (coff),						\
  BFD_JUMP_TABLE_WRITE (coff),						\
  BFD_JUMP_TABLE_LINK (coff),						\
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),				\
									\
  ALTERNATIVE,								\
  									\
  COFF_SWAP_TABLE							\
};
@


1.1.1.7
log
@Long delayed import of binutils-2.10.1. Turns out art@@ needs some alpha
bug-fixes...
@
text
@a2584 6
#ifdef W65MAGIC
    case bfd_arch_w65:
      *magicp = W65MAGIC;
      return true;
#endif

@


1.1.1.8
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001
d178 1
d304 1
a343 3
#ifdef COFF_WITH_PE
static flagword handle_COMDAT PARAMS ((bfd *, flagword, PTR, const char *, asection *));
#endif
a353 13
/* Macros for setting debugging flags.  */
#ifdef STYP_DEBUG
#define STYP_XCOFF_DEBUG STYP_DEBUG
#else
#define STYP_XCOFF_DEBUG STYP_INFO
#endif

#ifdef COFF_ALIGN_IN_S_FLAGS
#define STYP_DEBUG_INFO STYP_DSECT
#else
#define STYP_DEBUG_INFO STYP_INFO
#endif

d391 1
a391 1
  else if (!strncmp (sec_name, ".debug", 6))
d393 5
a397 5
      /* Handle the XCOFF debug section and DWARF2 debug sections.  */
      if (!sec_name[6])
        styp_flags = STYP_XCOFF_DEBUG;
      else
        styp_flags = STYP_DEBUG_INFO;
d401 1
a401 6
      styp_flags = STYP_DEBUG_INFO;
    }
#ifdef COFF_LONG_SECTION_NAMES
  else if (!strncmp (sec_name, ".gnu.linkonce.wi.", 17))
    {
      styp_flags = STYP_DEBUG_INFO;
a402 1
#endif
a438 10
#ifdef STYP_CLINK
  if (sec_flags & SEC_CLINK)
    styp_flags |= STYP_CLINK;
#endif

#ifdef STYP_BLOCK
  if (sec_flags & SEC_BLOCK)
    styp_flags |= STYP_BLOCK;
#endif

d496 2
a497 2
  if (sec_flags & SEC_LINK_ONCE)
    styp_flags |= IMAGE_SCN_LNK_COMDAT;
d505 1
a505 1
  styp_flags |= IMAGE_SCN_MEM_READ;       /* always readable.  */
d513 1
a513 1
  return styp_flags;
a535 10
#ifdef STYP_BLOCK
  if (styp_flags & STYP_BLOCK)
      sec_flags |= SEC_BLOCK;
#endif

#ifdef STYP_CLINK
  if (styp_flags & STYP_CLINK)
      sec_flags |= SEC_CLINK;
#endif

d607 1
a607 1
  else if (strncmp (name, ".debug", 6) == 0
a610 3
#ifdef COFF_LONG_SECTION_NAMES
	   || strncmp (name, ".gnu.linkonce.wi.", 17) == 0
#endif
d661 9
d671 2
a672 3
handle_COMDAT (abfd, sec_flags, hdr, name, section)
     bfd * abfd;
     flagword sec_flags;
d678 2
a679 22
  bfd_byte *esymstart, *esym, *esymend;
  int seen_state = 0;
  char *target_name = NULL;

  sec_flags |= SEC_LINK_ONCE;

  /* Unfortunately, the PE format stores essential information in
     the symbol table, of all places.  We need to extract that
     information now, so that objdump and the linker will know how
     to handle the section without worrying about the symbols.  We
     can't call slurp_symtab, because the linker doesn't want the
     swapped symbols.  */

  /* COMDAT sections are special.  The first symbol is the section
     symbol, which tells what kind of COMDAT section it is.  The
     second symbol is the "comdat symbol" - the one with the
     unique name.  GNU uses the section symbol for the unique
     name; MS uses ".text" for every comdat section.  Sigh.  - DJ */

  /* This is not mirrored in sec_to_styp_flags(), but there
     doesn't seem to be a need to, either, and it would at best be
     rather messy.  */
d681 20
a700 7
  if (! _bfd_coff_get_external_symbols (abfd))
    return sec_flags;
  
  esymstart = esym = (bfd_byte *) obj_coff_external_syms (abfd);
  esymend = esym + obj_raw_syment_count (abfd) * bfd_coff_symesz (abfd);

  while (esym < esymend)
d702 62
a763 38
      struct internal_syment isym;
      char buf[SYMNMLEN + 1];
      const char *symname;

      bfd_coff_swap_sym_in (abfd, (PTR) esym, (PTR) &isym);

      if (sizeof (internal_s->s_name) > SYMNMLEN)
	{
	  /* This case implies that the matching
	     symbol name will be in the string table.  */
	  abort ();
	}

      if (isym.n_scnum == section->target_index)
	{
	  /* According to the MSVC documentation, the first
	     TWO entries with the section # are both of
	     interest to us.  The first one is the "section
	     symbol" (section name).  The second is the comdat
	     symbol name.  Here, we've found the first
	     qualifying entry; we distinguish it from the
	     second with a state flag.

	     In the case of gas-generated (at least until that
	     is fixed) .o files, it isn't necessarily the
	     second one.  It may be some other later symbol.

	     Since gas also doesn't follow MS conventions and
	     emits the section similar to .text$<name>, where
	     <something> is the name we're looking for, we
	     distinguish the two as follows:

	     If the section name is simply a section name (no
	     $) we presume it's MS-generated, and look at
	     precisely the second symbol for the comdat name.
	     If the section name has a $, we assume it's
	     gas-generated, and look for <something> (whatever
	     follows the $) as the comdat symbol.  */
d765 2
a766 2
	  /* All 3 branches use this */
	  symname = _bfd_coff_internal_syment_name (abfd, &isym, buf);
d768 1
a768 4
	  if (symname == NULL)
	    abort ();

	  switch (seen_state)
d770 3
a772 4
	    case 0:
	      {
		/* The first time we've seen the symbol.  */
		union internal_auxent aux;
d774 1
a774 1
		seen_state = 1;
d776 4
a779 19
		/* If it isn't the stuff we're expecting, die;
		   The MS documentation is vague, but it
		   appears that the second entry serves BOTH
		   as the comdat symbol and the defining
		   symbol record (either C_STAT or C_EXT,
		   possibly with an aux entry with debug
		   information if it's a function.)  It
		   appears the only way to find the second one
		   is to count.  (On Intel, they appear to be
		   adjacent, but on Alpha, they have been
		   found separated.)

		   Here, we think we've found the first one,
		   but there's some checking we can do to be
		   sure.  */

		if (! (isym.n_sclass == C_STAT
		       && isym.n_type == T_NULL
		       && isym.n_value == 0))
d781 1
d783 25
a807 4
		/* FIXME LATER: MSVC generates section names
		   like .text for comdats.  Gas generates
		   names like .text$foo__Fv (in the case of a
		   function).  See comment above for more.  */
d809 2
a810 2
		if (strcmp (name, symname) != 0)
		  abort ();
d812 2
a813 4
		/* This is the section symbol.  */
		bfd_coff_swap_aux_in (abfd, (PTR) (esym + bfd_coff_symesz (abfd)),
				      isym.n_type, isym.n_sclass,
				      0, isym.n_numaux, (PTR) &aux);
d815 34
a848 8
		target_name = strchr (name, '$');
		if (target_name != NULL)
		  {
		    /* Gas mode.  */
		    seen_state = 2;
		    /* Skip the `$'.  */
		    target_name += 1;
		  }
d850 4
a853 15
		/* FIXME: Microsoft uses NODUPLICATES and
		   ASSOCIATIVE, but gnu uses ANY and
		   SAME_SIZE.  Unfortunately, gnu doesn't do
		   the comdat symbols right.  So, until we can
		   fix it to do the right thing, we are
		   temporarily disabling comdats for the MS
		   types (they're used in DLLs and C++, but we
		   don't support *their* C++ libraries anyway
		   - DJ.  */

		/* Cygwin does not follow the MS style, and
		   uses ANY and SAME_SIZE where NODUPLICATES
		   and ASSOCIATIVE should be used.  For
		   Interix, we just do the right thing up
		   front.  */
d855 34
a888 5
		switch (aux.x_scn.x_comdat)
		  {
		  case IMAGE_COMDAT_SELECT_NODUPLICATES:
#ifdef STRICT_PE_FORMAT
		    sec_flags |= SEC_LINK_DUPLICATES_ONE_ONLY;
d890 1
a890 1
		    sec_flags &= ~SEC_LINK_ONCE;
d892 1
a892 9
		    break;

		  case IMAGE_COMDAT_SELECT_ANY:
		    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
		    break;

		  case IMAGE_COMDAT_SELECT_SAME_SIZE:
		    sec_flags |= SEC_LINK_DUPLICATES_SAME_SIZE;
		    break;
d894 21
a914 13
		  case IMAGE_COMDAT_SELECT_EXACT_MATCH:
		    /* Not yet fully implemented ??? */
		    sec_flags |= SEC_LINK_DUPLICATES_SAME_CONTENTS;
		    break;

		    /* debug$S gets this case; other
		       implications ??? */

		    /* There may be no symbol... we'll search
		       the whole table... Is this the right
		       place to play this game? Or should we do
		       it when reading it in.  */
		  case IMAGE_COMDAT_SELECT_ASSOCIATIVE:
d916 2
a917 2
		    /* FIXME: This is not currently implemented.  */
		    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
d919 1
a919 1
		    sec_flags &= ~SEC_LINK_ONCE;
d921 1
a921 1
		    break;
d923 8
a930 8
		  default:  /* 0 means "no symbol" */
		    /* debug$F gets this case; other
		       implications ??? */
		    sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
		    break;
		  }
	      }
	      break;
d932 2
a933 2
	    case 2:
	      /* Gas mode: the first matching on partial name.  */
d938 30
a967 14
	      /* Is this the name we're looking for? */
	      if (strcmp (target_name,
			  symname + (TARGET_UNDERSCORE ? 1 : 0)) != 0)
		{
		  /* Not the name we're looking for */
		  esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd);
		  continue;
		}
	      /* Fall through.  */
	    case 1:
	      /* MSVC mode: the lexically second symbol (or
		 drop through from the above).  */
	      {
		char *newname;
d969 2
a970 9
		/* This must the the second symbol with the
		   section #.  It is the actual symbol name.
		   Intel puts the two adjacent, but Alpha (at
		   least) spreads them out.  */

		section->comdat =
		  bfd_alloc (abfd, sizeof (struct bfd_comdat_info));
		if (section->comdat == NULL)
		  abort ();
d972 1
a972 2
		section->comdat->symbol =
		  (esym - esymstart) / bfd_coff_symesz (abfd);
d974 3
a976 7
		newname = bfd_alloc (abfd, strlen (symname) + 1);
		if (newname == NULL)
		  abort ();

		strcpy (newname, symname);
		section->comdat->name = newname;
	      }
d978 1
a978 1
	      goto breakloop;
d980 1
a981 130

      esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd);
    }

 breakloop:
  return sec_flags;
}


/* The PE version; see above for the general comments.

   Since to set the SEC_LINK_ONCE and associated flags, we have to
   look at the symbol table anyway, we return the symbol table index
   of the symbol being used as the COMDAT symbol.  This is admittedly
   ugly, but there's really nowhere else that we have access to the
   required information.  FIXME: Is the COMDAT symbol index used for
   any purpose other than objdump?  */

static flagword
styp_to_sec_flags (abfd, hdr, name, section)
     bfd *abfd;
     PTR hdr;
     const char *name;
     asection *section;
{
  struct internal_scnhdr *internal_s = (struct internal_scnhdr *) hdr;
  long styp_flags = internal_s->s_flags;
  flagword sec_flags;

  /* Assume read only unless IMAGE_SCN_MEM_WRITE is specified.  */
  sec_flags = SEC_READONLY;

  /* Process each flag bit in styp_flags in turn.  */
  while (styp_flags)
    {
      long flag = styp_flags & - styp_flags;
      char * unhandled = NULL;
      
      styp_flags &= ~ flag;

      /* We infer from the distinct read/write/execute bits the settings
	 of some of the bfd flags; the actual values, should we need them,
	 are also in pei_section_data (abfd, section)->pe_flags.  */

      switch (flag)
	{
	case STYP_DSECT:
	  unhandled = "STYP_DSECT";
	  break;
	case STYP_GROUP:
	  unhandled = "STYP_GROUP";
	  break;
	case STYP_COPY:
	  unhandled = "STYP_COPY";
	  break;
	case STYP_OVER:
	  unhandled = "STYP_OVER";
	  break;
#ifdef SEC_NEVER_LOAD
	case STYP_NOLOAD:
	  sec_flags |= SEC_NEVER_LOAD;
	  break;
#endif	
	case IMAGE_SCN_MEM_READ:
	  /* Ignored, assume it always to be true.  */
	  break;
	case IMAGE_SCN_TYPE_NO_PAD:
	  /* Skip.  */
	  break;
	case IMAGE_SCN_LNK_OTHER:
	  unhandled = "IMAGE_SCN_LNK_OTHER";
	  break;
	case IMAGE_SCN_MEM_NOT_CACHED:
	  unhandled = "IMAGE_SCN_MEM_NOT_CACHED";
	  break;
	case IMAGE_SCN_MEM_NOT_PAGED:
	  unhandled = "IMAGE_SCN_MEM_NOT_PAGED";
	  break;
	case IMAGE_SCN_MEM_EXECUTE:
	  sec_flags |= SEC_CODE;
	  break;
	case IMAGE_SCN_MEM_WRITE:
	  sec_flags &= ~ SEC_READONLY;
	  break;
	case IMAGE_SCN_MEM_DISCARDABLE:
	  sec_flags |= SEC_DEBUGGING;
	  break;
	case IMAGE_SCN_MEM_SHARED:
	  sec_flags |= SEC_SHARED;
	  break;
	case IMAGE_SCN_LNK_REMOVE:
	  sec_flags |= SEC_EXCLUDE;
	  break;
	case IMAGE_SCN_CNT_CODE:
	  sec_flags |= SEC_CODE | SEC_ALLOC | SEC_LOAD;
	  break;
	case IMAGE_SCN_CNT_INITIALIZED_DATA:
	  sec_flags |= SEC_DATA | SEC_ALLOC | SEC_LOAD;
	  break;
	case IMAGE_SCN_CNT_UNINITIALIZED_DATA:
	  sec_flags |= SEC_ALLOC;
	  break;
	case IMAGE_SCN_LNK_INFO:
	  /* We mark these as SEC_DEBUGGING, but only if COFF_PAGE_SIZE is
	     defined.  coff_compute_section_file_positions uses
	     COFF_PAGE_SIZE to ensure that the low order bits of the
	     section VMA and the file offset match.  If we don't know
	     COFF_PAGE_SIZE, we can't ensure the correct correspondence,
	     and demand page loading of the file will fail.  */
#ifdef COFF_PAGE_SIZE
	  sec_flags |= SEC_DEBUGGING;
#endif
	  break;
	case IMAGE_SCN_LNK_COMDAT:
	  /* COMDAT gets very special treatment.  */
	  sec_flags = handle_COMDAT (abfd, sec_flags, hdr, name, section);
	  break;
	default:
	  /* Silently ignore for now.  */
	  break;	  
	}

      /* If the section flag was not handled, report it here.  This will allow
	 users of the BFD library to report a problem but continue executing.
	 Tools which need to be aware of these problems (such as the linker)
	 can override the default bfd_error_handler to intercept these reports.  */
      if (unhandled != NULL)
	(*_bfd_error_handler)
	  (_("%s (%s): Section flag %s (0x%x) ignored"),
	   bfd_get_filename (abfd), name, unhandled, flag);
a1102 2
. boolean _bfd_coff_force_symnames_in_strings;
. unsigned int _bfd_coff_debug_string_prefix_length;
d1205 1
a1205 1
.       flagword flags,
d1210 1
a1210 1
.       boolean collect,
a1299 6
.#define bfd_coff_force_symnames_in_strings(abfd)\
.    	(coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)
.
.#define bfd_coff_debug_string_prefix_length(abfd)\
.    	(coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)
.
d1437 2
a1438 2
     bfd * abfd;
     asection * section;
d1503 1
a1503 1
  /* TI tools puts the alignment power in bits 8-11 */
a1505 3
#ifdef COFF_DECODE_ALIGNMENT
  i = COFF_DECODE_ALIGNMENT(hdr->s_flags);
#endif
a1506 4

#ifdef coff_set_section_load_page
  coff_set_section_load_page (section, hdr->s_page);
#endif
a1570 17

  /* check for extended relocs */
  if (hdr->s_flags & IMAGE_SCN_LNK_NRELOC_OVFL)
    {
      struct external_reloc dst;
      struct internal_reloc n;
      int oldpos = bfd_tell (abfd);
      bfd_seek (abfd, hdr->s_relptr, 0);
      if (bfd_read ((PTR) & dst, 1, bfd_coff_relsz (abfd), abfd)
	  != bfd_coff_relsz (abfd))
	return;

      coff_swap_reloc_in (abfd, &dst, &n);
      bfd_seek (abfd, oldpos, 0);
      section->reloc_count =
	hdr->s_nreloc = n.r_vaddr;
    }
a1694 5
# ifdef U803XTOCMAGIC
      xcoff->xcoff64 = internal_f->f_magic == U803XTOCMAGIC;
# else
      xcoff->xcoff64 = 0;
# endif
d1708 1
a1708 1
#ifdef ARM
d1713 1
a1713 1

d1748 1
a1748 1
      break;
a1758 6
#ifdef IA64MAGIC
    case IA64MAGIC:
      arch = bfd_arch_ia64;
      machine = 0;
      break;
#endif
a1866 3
#ifdef XCOFF64
    case U803XTOCMAGIC:
#else
a1869 1
#endif
d1890 1
a1890 1
		    || (bfd_read (buf, 1, bfd_coff_symesz (abfd), abfd)
d1896 1
a1896 1
		bfd_coff_swap_sym_in (abfd, (PTR) buf, (PTR) &sym);
d1915 1
a1915 5
	    machine = bfd_mach_ppc;
#else
#ifdef XCOFF64
	    arch = bfd_arch_powerpc;
	    machine = bfd_mach_ppc_620;
d1918 1
a1918 2
	    machine = bfd_mach_rs6k;
#endif
d1924 1
a1924 1
	    machine = bfd_mach_ppc_601;
d1928 1
a1928 1
	    machine = bfd_mach_ppc_620;
d1932 1
a1932 1
	    machine = bfd_mach_ppc;
d1936 1
a1936 1
	    machine = bfd_mach_rs6k;
a2017 31
#ifdef TICOFF0MAGIC
#ifdef TICOFF_TARGET_ARCH
      /* this TI COFF section should be used by all new TI COFF v0 targets */
    case TICOFF0MAGIC:
      arch = TICOFF_TARGET_ARCH;
      break;
#endif
#endif

#ifdef TICOFF1MAGIC
      /* this TI COFF section should be used by all new TI COFF v1/2 targets */
      /* TI COFF1 and COFF2 use the target_id field to specify which arch */
    case TICOFF1MAGIC:
    case TICOFF2MAGIC:
      switch (internal_f->f_target_id)
        {
#ifdef TI_TARGET_ID
        case TI_TARGET_ID:
          arch = TICOFF_TARGET_ARCH;
          break;
#endif
        default:
          arch = bfd_arch_obscure;
          (*_bfd_error_handler)
            (_("Unrecognized TI COFF target id '0x%x'"),
             internal_f->f_target_id);
          break;
        }
      break;
#endif

a2059 4
#ifdef XCOFF64
#define FORCE_SYMNAMES_IN_STRINGS
#endif

a2244 16

#ifdef COFF_WITH_PE
      if (s->reloc_count > 0xffff)
	{
	  /* encode real count here as first reloc */
	  struct internal_reloc n;
	  memset ((PTR) & n, 0, sizeof (n));
	  /* add one to count *this* reloc (grr) */
	  n.r_vaddr = s->reloc_count + 1;
	  coff_swap_reloc_out (abfd, &n, &dst);
	  if (bfd_write ((PTR) & dst, 1, bfd_coff_relsz (abfd), abfd)
	      != bfd_coff_relsz (abfd))
	    return false;
	}
#endif

d2259 1
a2259 1
	     have to look up the output symbol here.  */
a2409 27

#ifdef TICOFF_DEFAULT_MAGIC
    case TICOFF_TARGET_ARCH:
      /* if there's no indication of which version we want, use the default */
      if (!abfd->xvec )
        *magicp = TICOFF_DEFAULT_MAGIC;
      else
        {
          /* we may want to output in a different COFF version */
          switch (abfd->xvec->name[4])
            {
            case '0':
              *magicp = TICOFF0MAGIC;
              break;
            case '1':
              *magicp = TICOFF1MAGIC;
              break;
            case '2':
              *magicp = TICOFF2MAGIC;
              break;
            default:
              return false;
            }
        }
      return true;
#endif

d2427 1
a2427 1

d2430 1
a2430 1

d2445 1
a2445 4
	  /* FIXME: we do not have F_ARM vaues greater than F_ARM_5.  */
	case bfd_mach_arm_5T: * flagsp |= F_ARM_5;  break;
	case bfd_mach_arm_5TE: * flagsp |= F_ARM_5; break;
	case bfd_mach_arm_XScale: * flagsp |= F_ARM_5; break;
d2459 1
a2459 1
      /* Just overwrite the usual value if we're doing Lynx.  */
a2470 6
#ifdef IA64MAGIC
    case bfd_arch_ia64:
      *magicp = IA64MAGIC;
      return true;
      break;
#endif
d2484 1
a2484 1
      /* Just overwrite the usual value if we're doing Lynx.  */
d2539 1
a2539 1
      /* Just overwrite the usual value if we're doing Lynx.  */
d2569 1
a2569 1
#ifdef RS6000COFF_C
d2574 1
a2574 8
#ifdef XCOFF64
      if (bfd_get_mach (abfd) == bfd_mach_ppc_620
	  && !strncmp (abfd->xvec->name,"aix", 3))
	*magicp = U803XTOCMAGIC;
      else
#else
    	*magicp = U802TOCMAGIC;
#endif
d2584 1
a2584 1

d2591 3
a2593 3
    default:			/* Unknown architecture.  */
      /* Fall through to "return false" below, to avoid
	 "statement never reached" errors on the one below.  */
d2600 1
d2617 1
a2617 1
  return true;			/* We're easy ...  */
d2645 1
a2645 1
/* Calculate the file position for each section.  */
d2650 1
a2650 1
#if defined(TIC80COFF) || defined(TICOFF)
d2688 2
a2689 2
	      if (len > SYMNMLEN || bfd_coff_force_symnames_in_strings (abfd))
		sz += len + 1 + bfd_coff_debug_string_prefix_length (abfd);
d2707 1
a2707 1
  if (coff_data (abfd)->link_info)
d2856 1
a2856 1
	 doesn't yet page from files...  */
d3045 1
a3045 1
  unsigned long reloc_size = 0, reloc_count = 0;
d3076 1
a3076 10
    {
#ifdef COFF_WITH_PE
      /* we store the actual reloc count in the first reloc's addr */
      if (current->reloc_count > 0xffff)
	reloc_count ++;
#endif
      reloc_count += current->reloc_count;
    }

  reloc_size = reloc_count * bfd_coff_relsz (abfd);
a3098 5
#ifdef COFF_WITH_PE
	  /* extra reloc to hold real count */
	  if (current->reloc_count > 0xffff)
	    reloc_base += bfd_coff_relsz (abfd);
#endif
a3172 3
#ifdef coff_get_section_load_page
      section.s_page = coff_get_section_load_page (current);
#endif
a3214 1
#ifndef XCOFF64
a3221 1
#endif
d3242 1
a3242 1
#endif
a3243 1
      /* TI COFF puts the alignment power in bits 8-11 of the flags */
a3245 2
#ifdef COFF_ENCODE_ALIGNMENT
      COFF_ENCODE_ALIGNMENT(section, current->alignment_power);
d3262 1
a3262 1
	      != bfd_coff_scnhsz (abfd))
d3384 1
a3384 1
	      != bfd_coff_scnhsz (abfd))
d3390 1
a3390 1
  /* OK, now set up the filehdr...  */
a3434 5
#ifdef TI_TARGET_ID
  /* target id is used in TI COFF v1 and later; COFF0 won't use this field,
     but it doesn't hurt to set it internally */
  internal_f.f_target_id = TI_TARGET_ID;
#endif
d3461 1
a3461 1
    /* ...and the "opt"hdr...  */
a3475 4
#ifdef TICOFF_AOUT_MAGIC
    internal_a.magic = TICOFF_AOUT_MAGIC;
#define __A_MAGIC_SET__
#endif
d3519 1
a3519 1
#endif
d3529 1
a3529 1
#endif
a3539 5
#if defined(IA64)
#define __A_MAGIC_SET__
    internal_a.magic = ZMAGIC;
#endif /* IA64 */

d3595 1
a3595 1
  else if (long_section_names && ! obj_coff_strings_written (abfd))
d3736 1
a3736 1

d3740 1
a3740 1

d3742 1
a3742 1
    if (buff == NULL)
d3744 2
a3745 2

    bfd_coff_swap_filehdr_out (abfd, (PTR) & internal_f, (PTR) buff);
d3747 1
a3747 1

d3749 1
a3749 1

d3753 1
a3753 1

d3756 2
a3757 2
      /* Note that peicode.h fills in a PEAOUTHDR, not an AOUTHDR.
	 include/coff/pe.h sets AOUTSZ == sizeof (PEAOUTHDR)) */
d3762 1
a3762 1
      if (buff == NULL)
d3764 1
a3764 1

d3767 1
a3767 1

d3769 1
a3769 1

d3827 1
a3827 1

d3848 1
a3848 1
       see if the filepos has not been set.  */
d3956 1
a3956 1
	  bfd_coff_swap_lineno_in (abfd, src, &dst);
d4005 1
a4005 1
  /* FIXME, free native_lineno here, or use alloca or something.  */
d4125 1
a4125 1
		  break;
d4172 1
a4172 1
#if defined ARM
d4209 1
a4209 2
              /* C_AUTOARG conflictes with TI COFF C_UEXT */
#if !defined (TIC80COFF) && !defined (TICOFF)
d4290 1
a4290 1
	    case C_FCN:		/* ".bf" or ".ef" (or PE ".lf")  */
a4312 5
	    case C_STATLAB:	/* Static load time label */
              dst->symbol.value = src->u.syment.n_value;
              dst->symbol.flags = BSF_GLOBAL;
              break;

d4331 2
a4332 2
	      /* New storage classes for TI COFF */
#if defined(TIC80COFF) || defined(TICOFF)
d4335 1
d4505 1
d4560 1
d4681 1
d4704 2
a4892 10
#ifdef COFF_FORCE_SYMBOLS_IN_STRINGS
  true,
#else
  false,
#endif
#ifdef COFF_DEBUG_STRING_WIDE_PREFIX
  4,
#else
  2,
#endif
d4924 1
a4924 1
#ifndef coff_bfd_copy_private_bfd_data
d4936 1
a4936 1
#ifndef coff_bfd_print_private_bfd_data
@


1.1.1.9
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003
d7 1
a7 1
   This file is part of BFD, the Binary File Descriptor library.
d9 13
a21 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d228 1
a228 1
	structured hierarchy required by coff. It changes each pointer
d251 33
a283 31
.  {* Remembers the offset from the first symbol in the file for
.     this symbol. Generated by coff_renumber_symbols. *}
.  unsigned int offset;
.
.  {* Should the value of this symbol be renumbered.  Used for
.     XCOFF C_BSTAT symbols.  Set by coff_slurp_symbol_table.  *}
.  unsigned int fix_value : 1;
.
.  {* Should the tag field of this symbol be renumbered.
.     Created by coff_pointerize_aux. *}
.  unsigned int fix_tag : 1;
.
.  {* Should the endidx field of this symbol be renumbered.
.     Created by coff_pointerize_aux. *}
.  unsigned int fix_end : 1;
.
.  {* Should the x_csect.x_scnlen field be renumbered.
.     Created by coff_pointerize_aux. *}
.  unsigned int fix_scnlen : 1;
.
.  {* Fix up an XCOFF C_BINCL/C_EINCL symbol.  The value is the
.     index into the line number entries.  Set by coff_slurp_symbol_table.  *}
.  unsigned int fix_line : 1;
.
.  {* The container for the symbol structure as read and translated
.     from the file. *}
.  union
.  {
.    union internal_auxent auxent;
.    struct internal_syment syment;
.  } u;
d291 2
a292 2
.  {* The actual symbol which the rest of BFD works with *}
.  asymbol symbol;
d294 2
a295 2
.  {* A pointer to the hidden information for this symbol *}
.  combined_entry_type *native;
d297 2
a298 2
.  {* A pointer to the linenumber information for this symbol *}
.  struct lineno_cache_entry *lineno;
d300 2
a301 2
.  {* Have the line numbers been relocated yet ? *}
.  bfd_boolean done_lineno;
d314 4
a317 6
static long sec_to_styp_flags
  PARAMS ((const char *, flagword));
static bfd_boolean styp_to_sec_flags
  PARAMS ((bfd *, PTR, const char *, asection *, flagword *));
static bfd_boolean coff_bad_format_hook
  PARAMS ((bfd *, PTR));
d321 4
a324 7
static bfd_boolean coff_new_section_hook
  PARAMS ((bfd *, asection *));
static bfd_boolean coff_set_arch_mach_hook
  PARAMS ((bfd *, PTR));
static bfd_boolean coff_write_relocs
  PARAMS ((bfd *, int));
static bfd_boolean coff_set_flags
d326 5
a330 7
static bfd_boolean coff_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long)) ATTRIBUTE_UNUSED;
static bfd_boolean coff_compute_section_file_positions
  PARAMS ((bfd *));
static bfd_boolean coff_write_object_contents
  PARAMS ((bfd *)) ATTRIBUTE_UNUSED;
static bfd_boolean coff_set_section_contents
d332 3
a334 6
static PTR buy_and_read
  PARAMS ((bfd *, file_ptr, bfd_size_type));
static bfd_boolean coff_slurp_line_table
  PARAMS ((bfd *, asection *));
static bfd_boolean coff_slurp_symbol_table
  PARAMS ((bfd *));
d337 1
a337 2
static bfd_boolean coff_slurp_reloc_table
  PARAMS ((bfd *, asection *, asymbol **));
d341 1
a341 2
static PTR coff_mkobject_hook
  PARAMS ((bfd *, PTR,  PTR));
d344 1
a344 10
static flagword handle_COMDAT
  PARAMS ((bfd *, flagword, PTR, const char *, asection *));
#endif
#ifdef COFF_IMAGE_WITH_PE
static bfd_boolean coff_read_word
  PARAMS ((bfd *, unsigned int *));
static unsigned int coff_compute_checksum
  PARAMS ((bfd *));
static bfd_boolean coff_apply_checksum
  PARAMS ((bfd *));
d371 1
a371 1
     const char *sec_name;
a432 8
  else if (!strcmp (sec_name, _EXCEPT))
    {
      styp_flags = STYP_EXCEPT;
    }
  else if (!strcmp (sec_name, _TYPCHK))
    {
      styp_flags = STYP_TYPCHK;
    }
d511 1
a511 1
  /* skip constRUCTOR */
d534 1
a534 1
     are retained in pei_section_data(abfd, section)->pe_flags.  */
d536 1
a536 1
  styp_flags |= IMAGE_SCN_MEM_READ;       /* Always readable.  */
d538 1
a538 1
    styp_flags |= IMAGE_SCN_MEM_WRITE;    /* Invert READONLY for write.  */
d540 1
a540 1
    styp_flags |= IMAGE_SCN_MEM_EXECUTE;  /* CODE->EXECUTE.  */
d542 1
a542 1
    styp_flags |= IMAGE_SCN_MEM_SHARED;   /* Shared remains meaningful.  */
d556 2
a557 2
static bfd_boolean
styp_to_sec_flags (abfd, hdr, name, section, flags_ptr)
a561 1
     flagword *flags_ptr;
d569 1
a569 1
    sec_flags |= SEC_BLOCK;
d574 1
a574 1
    sec_flags |= SEC_CLINK;
d579 3
a581 1
    sec_flags |= SEC_NEVER_LOAD;
d622 3
a624 1
    sec_flags = 0;
d667 3
a669 1
    sec_flags = SEC_LOAD | SEC_ALLOC | SEC_READONLY;
d672 3
a674 1
    sec_flags |= SEC_ALLOC | SEC_LOAD;
d676 1
a676 1
#ifdef STYP_LIT			/* A29k readonly text/data section type.  */
d678 3
a680 1
    sec_flags = (SEC_LOAD | SEC_ALLOC | SEC_READONLY);
d682 1
a682 2

#ifdef STYP_OTHER_LOAD		/* Other loaded sections.  */
d684 3
a686 1
    sec_flags = (SEC_LOAD | SEC_ALLOC);
d700 1
a700 5
  if (flags_ptr == NULL)
    return FALSE;

  * flags_ptr = sec_flags;
  return TRUE;
d739 1
a739 1

d784 1
a784 1
	  /* All 3 branches use this.  */
d912 1
a912 1
	      /* Is this the name we're looking for ?  */
a925 1
		bfd_size_type amt;
d927 1
a927 1
		/* This must the second symbol with the
d932 2
a933 2
		amt = sizeof (struct bfd_comdat_info);
		section->comdat = bfd_alloc (abfd, amt);
d940 1
a940 2
		amt = strlen (symname) + 1;
		newname = bfd_alloc (abfd, amt);
d969 2
a970 2
static bfd_boolean
styp_to_sec_flags (abfd, hdr, name, section, flags_ptr)
a974 1
     flagword *flags_ptr;
a978 1
  bfd_boolean result = TRUE;
d988 1
a988 1

d1013 1
a1013 1
#endif
d1070 1
a1070 1
	  break;
d1073 4
a1076 1
      /* If the section flag was not handled, report it here.  */
d1078 3
a1080 6
	{
	  (*_bfd_error_handler)
	    (_("%s (%s): Section flag %s (0x%x) ignored"),
	     bfd_archive_filename (abfd), name, unhandled, flag);
	  result = FALSE;
	}
d1094 1
a1094 4
  if (flags_ptr)
    * flags_ptr = sec_flags;

  return result;
d1126 194
a1319 125
.  void (*_bfd_coff_swap_aux_in)
.    PARAMS ((bfd *, PTR, int, int, int, int, PTR));
.
.  void (*_bfd_coff_swap_sym_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  void (*_bfd_coff_swap_lineno_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_aux_out)
.    PARAMS ((bfd *, PTR, int, int, int, int, PTR));
.
.  unsigned int (*_bfd_coff_swap_sym_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_lineno_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_reloc_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_filehdr_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_aouthdr_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int (*_bfd_coff_swap_scnhdr_out)
.    PARAMS ((bfd *, PTR, PTR));
.
.  unsigned int _bfd_filhsz;
.  unsigned int _bfd_aoutsz;
.  unsigned int _bfd_scnhsz;
.  unsigned int _bfd_symesz;
.  unsigned int _bfd_auxesz;
.  unsigned int _bfd_relsz;
.  unsigned int _bfd_linesz;
.  unsigned int _bfd_filnmlen;
.  bfd_boolean _bfd_coff_long_filenames;
.  bfd_boolean _bfd_coff_long_section_names;
.  unsigned int _bfd_coff_default_section_alignment_power;
.  bfd_boolean _bfd_coff_force_symnames_in_strings;
.  unsigned int _bfd_coff_debug_string_prefix_length;
.
.  void (*_bfd_coff_swap_filehdr_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  void (*_bfd_coff_swap_aouthdr_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  void (*_bfd_coff_swap_scnhdr_in)
.    PARAMS ((bfd *, PTR, PTR));
.
.  void (*_bfd_coff_swap_reloc_in)
.    PARAMS ((bfd *abfd, PTR, PTR));
.
.  bfd_boolean (*_bfd_coff_bad_format_hook)
.    PARAMS ((bfd *, PTR));
.
.  bfd_boolean (*_bfd_coff_set_arch_mach_hook)
.    PARAMS ((bfd *, PTR));
.
.  PTR (*_bfd_coff_mkobject_hook)
.    PARAMS ((bfd *, PTR, PTR));
.
.  bfd_boolean (*_bfd_styp_to_sec_flags_hook)
.    PARAMS ((bfd *, PTR, const char *, asection *, flagword *));
.
.  void (*_bfd_set_alignment_hook)
.    PARAMS ((bfd *, asection *, PTR));
.
.  bfd_boolean (*_bfd_coff_slurp_symbol_table)
.    PARAMS ((bfd *));
.
.  bfd_boolean (*_bfd_coff_symname_in_debug)
.    PARAMS ((bfd *, struct internal_syment *));
.
.  bfd_boolean (*_bfd_coff_pointerize_aux_hook)
.    PARAMS ((bfd *, combined_entry_type *, combined_entry_type *,
.	     unsigned int, combined_entry_type *));
.
.  bfd_boolean (*_bfd_coff_print_aux)
.    PARAMS ((bfd *, FILE *, combined_entry_type *, combined_entry_type *,
.	     combined_entry_type *, unsigned int));
.
.  void (*_bfd_coff_reloc16_extra_cases)
.    PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *,
.	    bfd_byte *, unsigned int *, unsigned int *));
.
.  int (*_bfd_coff_reloc16_estimate)
.    PARAMS ((bfd *, asection *, arelent *, unsigned int,
.	     struct bfd_link_info *));
.
.  enum coff_symbol_classification (*_bfd_coff_classify_symbol)
.    PARAMS ((bfd *, struct internal_syment *));
.
.  bfd_boolean (*_bfd_coff_compute_section_file_positions)
.    PARAMS ((bfd *));
.
.  bfd_boolean (*_bfd_coff_start_final_link)
.    PARAMS ((bfd *, struct bfd_link_info *));
.
.  bfd_boolean (*_bfd_coff_relocate_section)
.    PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
.	     struct internal_reloc *, struct internal_syment *, asection **));
.
.  reloc_howto_type *(*_bfd_coff_rtype_to_howto)
.    PARAMS ((bfd *, asection *, struct internal_reloc *,
.	     struct coff_link_hash_entry *, struct internal_syment *,
.	     bfd_vma *));
.
.  bfd_boolean (*_bfd_coff_adjust_symndx)
.    PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *,
.	     struct internal_reloc *, bfd_boolean *));
.
.  bfd_boolean (*_bfd_coff_link_add_one_symbol)
.    PARAMS ((struct bfd_link_info *, bfd *, const char *, flagword,
.	     asection *, bfd_vma, const char *, bfd_boolean, bfd_boolean,
.	     struct bfd_link_hash_entry **));
.
.  bfd_boolean (*_bfd_coff_link_output_has_begun)
.    PARAMS ((bfd *, struct coff_final_link_info *));
.
.  bfd_boolean (*_bfd_coff_final_link_postscript)
.    PARAMS ((bfd *, struct coff_final_link_info *));
d1323 1
a1323 2
.#define coff_backend_info(abfd) \
.  ((bfd_coff_backend_data *) (abfd)->xvec->backend_data)
d1326 1
a1326 1
.  ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,ind,num,i))
d1329 1
a1329 1
.  ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))
d1332 1
a1332 1
.  ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))
d1335 1
a1335 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))
d1338 1
a1338 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))
d1341 1
a1341 1
.  ((coff_backend_info (a)->_bfd_coff_swap_aux_out) (a,i,t,c,ind,num,o))
d1344 1
a1344 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))
d1347 1
a1347 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))
d1350 1
a1350 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))
d1353 1
a1353 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))
d1363 1
a1363 2
.#define bfd_coff_long_filenames(abfd) \
.  (coff_backend_info (abfd)->_bfd_coff_long_filenames)
d1365 1
a1365 1
.  (coff_backend_info (abfd)->_bfd_coff_long_section_names)
d1367 1
a1367 1
.  (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
d1369 1
a1369 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))
d1372 1
a1372 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))
d1375 1
a1375 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))
d1378 1
a1378 1
.  ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_in) (abfd, i, o))
d1381 1
a1381 1
.  ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))
d1384 1
a1384 1
.  ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
d1386 1
a1386 2
.  ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook)\
.   (abfd, filehdr, aouthdr))
d1388 3
a1390 3
.#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name, section, flags_ptr)\
.  ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook)\
.   (abfd, scnhdr, name, section, flags_ptr))
d1393 1
a1393 1
.  ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))
d1396 1
a1396 1
.  ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))
d1399 1
a1399 1
.  ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))
d1402 1
a1402 1
.  (coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)
d1405 1
a1405 1
.  (coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)
d1408 2
a1409 2
.  ((coff_backend_info (abfd)->_bfd_coff_print_aux)\
.   (abfd, file, base, symbol, aux, indaux))
d1411 3
a1413 4
.#define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order,\
.                                     reloc, data, src_ptr, dst_ptr)\
.  ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
.   (abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr))
d1416 2
a1417 2
.  ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
.   (abfd, section, reloc, shrink, link_info))
d1420 2
a1421 2
.  ((coff_backend_info (abfd)->_bfd_coff_classify_symbol)\
.   (abfd, sym))
d1424 2
a1425 2
.  ((coff_backend_info (abfd)->_bfd_coff_compute_section_file_positions)\
.   (abfd))
d1428 2
a1429 2
.  ((coff_backend_info (obfd)->_bfd_coff_start_final_link)\
.   (obfd, info))
d1431 2
a1432 2
.  ((coff_backend_info (ibfd)->_bfd_coff_relocate_section)\
.   (obfd, info, ibfd, o, con, rel, isyms, secs))
d1434 2
a1435 2
.  ((coff_backend_info (abfd)->_bfd_coff_rtype_to_howto)\
.   (abfd, sec, rel, h, sym, addendp))
d1437 5
a1441 6
.  ((coff_backend_info (abfd)->_bfd_coff_adjust_symndx)\
.   (obfd, info, ibfd, sec, rel, adjustedp))
.#define bfd_coff_link_add_one_symbol(info, abfd, name, flags, section,\
.                                     value, string, cp, coll, hashp)\
.  ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
.   (info, abfd, name, flags, section, value, string, cp, coll, hashp))
d1444 1
a1444 1
.  ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a,p))
d1446 1
a1446 1
.  ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a,p))
d1452 1
a1452 1
static bfd_boolean
d1460 1
a1460 1
    return FALSE;
d1462 1
a1462 1
  /* If the optional header is NULL or not the correct size then
d1468 2
a1469 1
     when doing that.  */
d1473 1
a1473 1
    return FALSE;
d1476 1
a1476 1
  return TRUE;
a1494 1

d1509 1
a1509 4
#if COFF_DEFAULT_SECTION_ALIGNMENT_POWER != 0
      && default_alignment > alignment_table[i].default_alignment_max
#endif
      )
d1542 1
a1542 1
static bfd_boolean
a1547 1
  bfd_size_type amt;
d1552 1
a1552 1
  if (bfd_xcoff_text_align_power (abfd) != 0
d1554 2
a1555 2
    section->alignment_power = bfd_xcoff_text_align_power (abfd);
  if (bfd_xcoff_data_align_power (abfd) != 0
d1557 1
a1557 1
    section->alignment_power = bfd_xcoff_data_align_power (abfd);
d1565 2
a1566 2
  amt = sizeof (combined_entry_type) * 10;
  native = (combined_entry_type *) bfd_zalloc (abfd, amt);
d1568 1
a1568 1
    return FALSE;
d1585 1
a1585 1
  return TRUE;
d1604 1
a1604 1
  /* Extract ALIGN from 2**ALIGN stored in section header.  */
d1610 1
a1610 1
  /* TI tools puts the alignment power in bits 8-11.  */
d1626 1
a1626 1
/* A couple of macros to help setting the alignment power field.  */
a1647 1
  bfd_size_type amt;
d1663 2
a1664 2
      amt = sizeof (struct coff_section_tdata);
      section->used_by_bfd = (PTR) bfd_zalloc (abfd, amt);
d1673 2
a1674 2
      amt = sizeof (struct pei_section_tdata);
      coff_section_data (abfd, section)->tdata = (PTR) bfd_zalloc (abfd, amt);
d1686 1
a1686 1
  /* Check for extended relocs.  */
d1691 3
a1693 3
      file_ptr oldpos = bfd_tell (abfd);
      bfd_seek (abfd, (file_ptr) hdr->s_relptr, 0);
      if (bfd_bread ((PTR) &dst, (bfd_size_type) bfd_coff_relsz (abfd), abfd)
d1699 2
a1700 1
      section->reloc_count = hdr->s_nreloc = n.r_vaddr;
d1728 1
a1728 1
  real_sec = coff_section_from_bfd_index (abfd, (int) hdr->s_nreloc);
d1739 1
a1739 1
	  bfd_section_list_remove (abfd, ps);
d1757 1
a1757 1
static bfd_boolean coff_mkobject PARAMS ((bfd *));
d1759 1
a1759 1
static bfd_boolean
a1763 1
  bfd_size_type amt = sizeof (coff_data_type);
d1765 1
a1765 1
  abfd->tdata.coff_obj_data = (struct coff_tdata *) bfd_zalloc (abfd, amt);
d1767 1
a1767 1
    return FALSE;
d1777 1
a1777 1
  return TRUE;
a1781 1

d1792 1
a1792 1
  if (! coff_mkobject (abfd))
d1831 1
a1831 1
      xcoff->full_aouthdr = TRUE;
d1835 2
a1836 2
      bfd_xcoff_text_align_power (abfd) = internal_a->o_algntext;
      bfd_xcoff_data_align_power (abfd) = internal_a->o_algndata;
d1845 1
a1845 1
  /* Set the flags field from the COFF header read in.  */
d1868 1
a1868 1
static bfd_boolean
d1873 1
a1873 1
  unsigned long machine;
a1876 1
  /* Zero selects the default machine for an arch.  */
a1879 6
#ifdef OR32_MAGIC_BIG
    case OR32_MAGIC_BIG:
    case OR32_MAGIC_LITTLE:
      arch = bfd_arch_or32;
      break;
#endif
d1883 1
d1892 1
d1898 1
d1905 1
d1913 1
a1913 2
      machine = bfd_arm_get_mach_from_notes (abfd, ARM_NOTE_SECTION);
      if (machine == bfd_mach_arm_unknown)
d1915 8
a1922 16
	  switch (internal_f->f_flags & F_ARM_ARCHITECTURE_MASK)
	    {
	    case F_ARM_2:  machine = bfd_mach_arm_2;  break;
	    case F_ARM_2a: machine = bfd_mach_arm_2a; break;
	    case F_ARM_3:  machine = bfd_mach_arm_3;  break;
	    default:
	    case F_ARM_3M: machine = bfd_mach_arm_3M; break;
	    case F_ARM_4:  machine = bfd_mach_arm_4;  break;
	    case F_ARM_4T: machine = bfd_mach_arm_4T; break;
	      /* The COFF header does not have enough bits available
		 to cover all the different ARM architectures.  So
		 we interpret F_ARM_5, the highest flag value to mean
		 "the highest ARM architecture known to BFD" which is
		 currently the XScale.  */
	    case F_ARM_5:  machine = bfd_mach_arm_XScale;  break;
	    }
d1962 1
a1962 1
	  return FALSE;
a2009 1
    case U64_TOCMAGIC:
a2032 1
		bfd_size_type amt = bfd_coff_symesz (abfd);
d2034 1
a2034 1
		buf = (bfd_byte *) bfd_malloc (amt);
d2036 2
a2037 1
		    || bfd_bread (buf, amt, abfd) != amt)
d2040 1
a2040 1
		    return FALSE;
d2056 15
a2070 2
	    arch = bfd_xcoff_architecture (abfd);
	    machine = bfd_xcoff_machine (abfd);
d2097 1
d2105 1
a2105 1
      /* !! FIXME this probably isn't the right place for this.  */
d2114 1
a2114 1
      /* !! FIXME this probably isn't the right place for this.  */
d2123 1
a2123 19
      /* !! FIXME this probably isn't the right place for this.  */
      abfd->flags |= BFD_IS_RELAXABLE;
      break;
#endif

#ifdef H8300HNMAGIC
    case H8300HNMAGIC:
      arch = bfd_arch_h8300;
      machine = bfd_mach_h8300hn;
      /* !! FIXME this probably isn't the right place for this.  */
      abfd->flags |= BFD_IS_RELAXABLE;
      break;
#endif

#ifdef H8300SNMAGIC
    case H8300SNMAGIC:
      arch = bfd_arch_h8300;
      machine = bfd_mach_h8300sn;
      /* !! FIXME this probably isn't the right place for this.  */
d2135 1
d2142 1
d2149 1
d2159 1
d2171 1
a2171 1
      /* This TI COFF section should be used by all new TI COFF v0 targets.  */
a2173 1
      machine = TICOFF_TARGET_MACHINE_GET (internal_f->f_flags);
d2179 2
a2180 2
      /* This TI COFF section should be used by all new TI COFF v1/2 targets.  */
      /* TI COFF1 and COFF2 use the target_id field to specify which arch.  */
a2187 1
	  machine = TICOFF_TARGET_MACHINE_GET (internal_f->f_flags);
d2211 1
a2211 8

#ifdef W65MAGIC
    case W65MAGIC:
      arch = bfd_arch_w65;
      break;
#endif

    default:			/* Unreadable input file type.  */
d2217 1
a2217 1
  return TRUE;
d2222 1
a2222 1
static bfd_boolean symname_in_debug_hook
d2225 1
a2225 1
static bfd_boolean
d2230 1
a2230 1
  return SYMNAME_IN_DEBUG (sym) != 0;
d2236 1
a2236 1
  (bfd_boolean (*) PARAMS ((bfd *, struct internal_syment *))) bfd_false
d2248 1
a2248 1
static bfd_boolean coff_pointerize_aux_hook
d2252 2
a2253 1
static bfd_boolean
d2273 1
a2273 1
      /* Return TRUE to indicate that the caller should not do any
d2275 1
a2275 1
      return TRUE;
d2278 1
a2278 1
  /* Return FALSE to indicate that this auxent should be handled by
d2280 1
a2280 1
  return FALSE;
d2288 1
a2288 1
static bfd_boolean coff_pointerize_aux_hook
d2292 2
a2293 1
static bfd_boolean
d2301 1
a2301 1
  /* Return TRUE if we don't want to pointerize this aux entry, which
d2316 1
a2316 1
/* Print an aux entry.  This returns TRUE if it has printed it.  */
d2318 1
a2318 1
static bfd_boolean coff_print_aux
d2322 1
a2322 1
static bfd_boolean
d2341 1
a2341 5
#ifdef XCOFF64
	  fprintf (file, "val %5lld", aux->u.auxent.x_csect.x_scnlen.l);
#else
	  fprintf (file, "val %5ld", (long) aux->u.auxent.x_csect.x_scnlen.l);
#endif
d2347 1
a2347 5
#ifdef XCOFF64
	    fprintf (file, "%4lld", aux->u.auxent.x_csect.x_scnlen.l);
#else
	    fprintf (file, "%4ld", (long) aux->u.auxent.x_csect.x_scnlen.l);
#endif
d2361 1
a2361 1
      return TRUE;
d2365 2
a2366 2
  /* Return FALSE to indicate that no special action was taken.  */
  return FALSE;
d2389 1
a2389 1
/* AUX's ld wants relocations to be sorted.  */
d2405 1
a2405 1
static bfd_boolean
d2421 6
a2426 12
      {
	/* Sort relocations before we write them out.  */
	bfd_size_type amt;

	amt = s->reloc_count;
	amt *= sizeof (arelent *);
	p = (arelent **) bfd_malloc (amt);
	if (p == NULL && s->reloc_count > 0)
	  return FALSE;
	memcpy (p, s->orelocation, (size_t) amt);
	qsort (p, s->reloc_count, sizeof (arelent *), compare_arelent_ptr);
      }
d2430 1
a2430 1
	return FALSE;
d2433 1
a2433 1
      if (obj_pe (abfd) && s->reloc_count >= 0xffff)
d2435 1
a2435 1
	  /* Encode real count here as first reloc.  */
a2436 1

d2438 1
a2438 1
	  /* Add one to count *this* reloc (grr).  */
d2441 3
a2443 3
	  if (bfd_bwrite ((PTR) & dst, (bfd_size_type) bfd_coff_relsz (abfd),
			 abfd) != bfd_coff_relsz (abfd))
	    return FALSE;
a2450 1

d2465 1
a2465 1
	      int j;
d2468 1
a2468 2

	      for (j = first_undef; outsyms[j]; j++)
d2470 1
a2470 2
		  const char *intable = outsyms[j]->name;

d2472 2
a2473 2
		    /* Got a hit, so repoint the reloc.  */
		    q->sym_ptr_ptr = outsyms + j;
d2494 1
a2494 2
		if ((*q->sym_ptr_ptr)->section == bfd_abs_section_ptr
		    && ((*q->sym_ptr_ptr)->flags & BSF_SECTION_SYM) != 0)
d2514 1
a2514 1
	  /* Work out reloc type from what is required.  */
d2520 3
a2522 4

	  if (bfd_bwrite ((PTR) & dst, (bfd_size_type) bfd_coff_relsz (abfd),
			 abfd) != bfd_coff_relsz (abfd))
	    return FALSE;
d2531 1
a2531 1
  return TRUE;
d2535 1
a2535 1
   type.  Result is TRUE if we can represent the arch&type, FALSE if not.  */
d2537 1
a2537 1
static bfd_boolean
d2557 1
a2557 1
	  return FALSE;
d2559 1
a2559 1
      return TRUE;
d2599 1
a2599 1
	    return FALSE;
d2602 1
a2602 1
	return TRUE;
d2610 1
a2610 1
      return TRUE;
d2615 1
a2615 1
      /* If there's no indication of which version we want, use the default.  */
d2620 1
a2620 1
          /* We may want to output in a different COFF version.  */
d2633 1
a2633 1
              return FALSE;
d2636 1
a2636 2
      TICOFF_TARGET_MACHINE_SET (flagsp, bfd_get_mach (abfd));
      return TRUE;
d2642 1
a2642 1
      return TRUE;
d2674 1
a2674 2
	  /* FIXME: we do not have F_ARM vaues greater than F_ARM_5.
	     See also the comment in coff_set_arch_mach_hook().  */
d2679 1
a2679 1
      return TRUE;
d2684 1
a2684 1
      return TRUE;
d2694 1
a2694 1
      return TRUE;
d2700 1
a2700 1
      return TRUE;
d2706 1
a2706 1
      return TRUE;
d2725 1
a2725 1
      return TRUE;
d2732 1
a2732 1
      return TRUE;
d2741 1
a2741 1
	  return TRUE;
d2744 1
a2744 1
	  return TRUE;
d2747 1
a2747 7
	  return TRUE;
	case bfd_mach_h8300hn:
	  *magicp = H8300HNMAGIC;
	  return TRUE;
	case bfd_mach_h8300sn:
	  *magicp = H8300SNMAGIC;
	  return TRUE;
d2762 1
a2762 1
      return TRUE;
d2769 1
a2769 1
      return TRUE;
d2780 1
a2780 1
      return TRUE;
d2787 1
a2787 1
      return TRUE;
d2796 1
a2796 1
      return TRUE;
d2803 1
a2803 1
      return TRUE;
d2812 9
a2820 3
      BFD_ASSERT (bfd_get_flavour (abfd) == bfd_target_xcoff_flavour);
      *magicp = bfd_xcoff_magic_number (abfd);
      return TRUE;
d2827 1
a2827 1
      return TRUE;
d2833 1
a2833 10
      return TRUE;
#endif

#ifdef OR32_MAGIC_BIG
    case bfd_arch_or32:
      if (bfd_big_endian (abfd))
        * magicp = OR32_MAGIC_BIG;
      else
        * magicp = OR32_MAGIC_LITTLE;
      return TRUE;
d2837 1
a2837 1
      /* Fall through to "return FALSE" below, to avoid
d2842 1
a2842 1
  return FALSE;
d2845 1
a2845 1
static bfd_boolean
d2855 1
a2855 1
    return FALSE;
d2857 3
a2859 3
  if (arch != bfd_arch_unknown
      && ! coff_set_flags (abfd, &dummy1, &dummy2))
    return FALSE;		/* We can't represent this type */
d2861 1
a2861 1
  return TRUE;			/* We're easy ...  */
d2898 1
a2898 1
static bfd_boolean
d2905 1
a2905 1
  bfd_boolean align_adjust;
d2997 1
a2997 1
    unsigned int count;
d2999 1
a2999 1
    unsigned int i;
a3000 1
    bfd_size_type amt;
d3007 1
a3007 2
    amt = sizeof (struct asection *) * (count + 1);
    section_list = bfd_malloc (amt);
d3009 1
a3009 1
      return FALSE;
a3046 1
    abfd->section_tail = &current->next;
d3061 1
a3061 1
  align_adjust = FALSE;
d3071 2
a3072 2
	  bfd_size_type amt = sizeof (struct coff_section_tdata);
	  current->used_by_bfd = (PTR) bfd_zalloc (abfd, amt);
d3074 1
a3074 1
	    return FALSE;
d3078 2
a3079 3
	  bfd_size_type amt = sizeof (struct pei_section_tdata);
	  coff_section_data (abfd, current)->tdata
	    = (PTR) bfd_zalloc (abfd, amt);
d3081 1
a3081 1
	    return FALSE;
d3104 2
a3105 2
	  /* Make sure this section is aligned on the right boundary - by
	     padding the previous section up if necessary.  */
d3108 2
a3109 28
#ifdef RS6000COFF_C
	  /* AIX loader checks the text section alignment of (vma - filepos)
	     So even though the filepos may be aligned wrt the o_algntext, for
	     AIX executables, this check fails. This shows up when a native
	     AIX executable is stripped with gnu strip because the default vma
	     of native is 0x10000150 but default for gnu is 0x10000140.  Gnu
	     stripped gnu excutable passes this check because the filepos is
	     0x0140.  This problem also show up with 64 bit shared objects. The
	     data section must also be aligned.  */
	  if (!strcmp (current->name, _TEXT)
	      || !strcmp (current->name, _DATA))
	    {
	      bfd_vma pad;
	      bfd_vma align;

	      sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);

	      align = 1 << current->alignment_power;
	      pad = abs (current->vma - sofar) % align;

	      if (pad)
		{
		  pad = align - pad;
		  sofar += pad;
		}
	    }
	  else
#else
d3111 1
a3111 1
	      sofar = BFD_ALIGN (sofar, 1 << current->alignment_power);
a3112 3
#endif
	  if (previous != (asection *) NULL)
	    previous->_raw_size += sofar - old_sofar;
d3134 1
a3134 1
      /* Make sure that this section is of the right size too.  */
d3159 1
a3159 1
	align_adjust = TRUE;
d3184 2
a3185 2
	  || bfd_bwrite (&b, (bfd_size_type) 1, abfd) != 1)
	return FALSE;
d3194 1
a3194 1
  abfd->output_has_begun = TRUE;
d3196 1
a3196 1
  return TRUE;
d3208 1
a3208 1
static bfd_boolean
a3216 1
  bfd_size_type amt;
d3221 1
a3221 2
      const char *name;

d3224 2
a3225 2
	  /* Only do this if there is a coff representation of the input
	     symbol.  */
d3251 1
a3251 1
    return TRUE;
d3253 1
a3253 3
  amt = nsyms;
  amt *= sizeof (asymbol *);
  sympp2 = (asymbol **) bfd_alloc (abfd, amt);
d3255 1
a3255 1
    return FALSE;
a3256 1

d3258 4
a3261 3
    /* @@@@ Generate fake .file symbol, in sympp2[i], and increment i.  */
    abort ();

d3270 1
a3270 1
  return TRUE;
a3274 94
#ifdef COFF_IMAGE_WITH_PE

static unsigned int pelength;
static unsigned int peheader;

static bfd_boolean
coff_read_word (abfd, value)
  bfd *abfd;
  unsigned int *value;
{
  unsigned char b[2];
  int status;

  status = bfd_bread (b, (bfd_size_type) 2, abfd);
  if (status < 1)
    {
      *value = 0;
      return FALSE;
    }

  if (status == 1)
    *value = (unsigned int) b[0];
  else
    *value = (unsigned int) (b[0] + (b[1] << 8));

  pelength += (unsigned int) status;

  return TRUE;
}

static unsigned int
coff_compute_checksum (abfd)
  bfd *abfd;
{
  bfd_boolean more_data;
  file_ptr filepos;
  unsigned int value;
  unsigned int total;

  total = 0;
  pelength = 0;
  filepos = (file_ptr) 0;

  do
    {
      if (bfd_seek (abfd, filepos, SEEK_SET) != 0)
	return 0;

      more_data = coff_read_word (abfd, &value);
      total += value;
      total = 0xffff & (total + (total >> 0x10));
      filepos += 2;
    }
  while (more_data);

  return (0xffff & (total + (total >> 0x10)));
}

static bfd_boolean
coff_apply_checksum (abfd)
  bfd *abfd;
{
  unsigned int computed;
  unsigned int checksum = 0;

  if (bfd_seek (abfd, 0x3c, SEEK_SET) != 0)
    return FALSE;

  if (!coff_read_word (abfd, &peheader))
    return FALSE;

  if (bfd_seek (abfd, peheader + 0x58, SEEK_SET) != 0)
    return FALSE;

  checksum = 0;
  bfd_bwrite (&checksum, (bfd_size_type) 4, abfd);

  if (bfd_seek (abfd, peheader, SEEK_SET) != 0)
    return FALSE;

  computed = coff_compute_checksum (abfd);

  checksum = computed + pelength;

  if (bfd_seek (abfd, peheader + 0x58, SEEK_SET) != 0)
    return FALSE;

  bfd_bwrite (&checksum, (bfd_size_type) 4, abfd);

  return TRUE;
}

#endif /* COFF_IMAGE_WITH_PE */

d3277 1
a3277 1
static bfd_boolean
d3282 3
a3284 3
  bfd_boolean hasrelocs = FALSE;
  bfd_boolean haslinno = FALSE;
  bfd_boolean hasdebug = FALSE;
d3291 1
a3291 1
  bfd_boolean long_section_names;
d3304 1
a3304 1
     put them into the correct asections.  */
d3308 1
a3308 1
  if (! abfd->output_has_begun)
d3311 1
a3311 1
	return FALSE;
d3316 1
a3316 1
  /* Work out the size of the reloc and linno areas.  */
d3322 2
a3323 2
      /* We store the actual reloc count in the first reloc's addr.  */
      if (obj_pe (abfd) && current->reloc_count >= 0xffff)
d3334 1
a3334 1
  /* Indicate in each section->line_filepos its actual file address.  */
d3353 2
a3354 2
	  /* Extra reloc to hold real count.  */
	  if (obj_pe (abfd) && current->reloc_count >= 0xffff)
a3372 1
#ifndef XCOFF64
a3377 1
#endif
d3381 1
a3381 1
    return FALSE;
d3383 1
a3383 1
  long_section_names = FALSE;
d3389 1
a3389 1
      bfd_boolean is_reloc_section = FALSE;
d3394 2
a3395 2
	  is_reloc_section = TRUE;
	  hasrelocs = TRUE;
d3416 1
a3416 1
	    long_section_names = TRUE;
d3447 4
a3450 2
      /* If this section has no size or is unloadable then the scnptr
	 will be 0 too.  */
d3453 3
a3455 1
	section.s_scnptr = 0;
d3457 3
a3459 2
	section.s_scnptr = current->filepos;

d3467 1
a3467 1
	hasrelocs = TRUE;
d3470 1
a3470 1
	haslinno = TRUE;
d3473 1
a3473 1
	hasdebug = TRUE;
d3489 3
a3491 1
	text_sec = current;
d3493 3
a3495 1
	data_sec = current;
d3497 3
a3499 1
	bss_sec = current;
d3507 1
a3507 1
      /* TI COFF puts the alignment power in bits 8-11 of the flags.  */
a3525 2
	  bfd_size_type amt = bfd_coff_scnhsz (abfd);

d3527 3
a3529 2
	      || bfd_bwrite ((PTR) &buff, amt, abfd) != amt)
	    return FALSE;
a3627 1
#ifndef XCOFF64
a3635 1
	  bfd_size_type amt;
a3647 1
	  amt = bfd_coff_scnhsz (abfd);
d3649 3
a3651 2
	      || bfd_bwrite ((PTR) &buff, amt, abfd) != amt)
	    return FALSE;
a3654 1
#endif
d3660 2
a3661 1
  /* We will NOT put a fucking timestamp in the header here. Every time you
d3664 2
a3665 1
     same but is not a reasonable time. -- gnu@@cygnus.com  */
d3667 1
a3675 1
#ifndef XCOFF64
a3680 1
#endif
d3702 2
a3703 2
  /* Target id is used in TI COFF v1 and later; COFF0 won't use this field,
     but it doesn't hurt to set it internally.  */
d3710 4
a3713 2
  /* FIXME, should do something about the other byte orders and
     architectures.  */
d3724 2
a3725 1
  /* Set up architecture-dependent stuff.  */
a3728 1

d3737 3
a3739 2
       is a .shbss or a .shdata section, if so then set the magic
       number to indicate a shared data executable.  */
d3741 1
a3741 1
      internal_a.magic = SHMAGIC; /* Shared magic.  */
d3744 1
a3744 1
      internal_a.magic = NMAGIC; /* Assume separate i/d.  */
a3843 5
#ifdef OR32
#define __A_MAGIC_SET__
    internal_a.magic = NMAGIC; /* Assume separate i/d.  */
#endif

d3854 1
a3854 1
  /* Now should write relocs, strings, syms.  */
d3862 1
a3862 1
	return FALSE;
d3865 1
a3865 1
	return FALSE;
d3868 1
a3868 1
	return FALSE;
d3870 1
a3870 1
	return FALSE;
d3872 1
a3872 1
	return FALSE;
d3880 1
a3880 1
	return FALSE;
d3893 1
a3893 1
		    (file_ptr) BFD_ALIGN (sym_base, COFF_PAGE_SIZE) - 1,
d3895 2
a3896 2
	  || bfd_bwrite (&b, (bfd_size_type) 1, abfd) != 1)
	return FALSE;
d3999 1
a3999 1
	      if (bfd_get_mach (abfd) == bfd_mach_ppc)
d4015 1
a4015 1
    return FALSE;
d4019 1
a4019 1
    bfd_size_type amount = bfd_coff_filhsz (abfd);
d4021 1
a4021 1
    buff = bfd_malloc (amount);
d4023 1
a4023 1
      return FALSE;
d4025 2
a4026 2
    bfd_coff_swap_filehdr_out (abfd, (PTR) &internal_f, (PTR) buff);
    amount = bfd_bwrite ((PTR) buff, amount, abfd);
d4031 1
a4031 1
      return FALSE;
d4037 1
a4037 1
	 include/coff/pe.h sets AOUTSZ == sizeof (PEAOUTHDR)).  */
d4039 1
a4039 1
      bfd_size_type amount = bfd_coff_aoutsz (abfd);
d4041 1
a4041 1
      buff = bfd_malloc (amount);
d4043 1
a4043 1
	return FALSE;
d4045 2
a4046 2
      coff_swap_aouthdr_out (abfd, (PTR) &internal_a, (PTR) buff);
      amount = bfd_bwrite ((PTR) buff, amount, abfd);
d4051 1
a4051 6
	return FALSE;

#ifdef COFF_IMAGE_WITH_PE
      if (! coff_apply_checksum (abfd))
	return FALSE;
#endif
d4065 2
a4066 2
      if (bfd_bwrite ((PTR) &buff, (bfd_size_type) size, abfd) != size)
	return FALSE;
d4070 1
a4070 1
  return TRUE;
d4073 1
a4073 1
static bfd_boolean
d4081 1
a4081 1
  if (! abfd->output_has_begun)	/* Set by bfd.c handler.  */
d4084 1
a4084 1
	return FALSE;
d4108 1
a4108 1
      Gvran Uddeborg <gvran@@uddeborg.pp.se>.  */
d4130 1
a4130 1
    return TRUE;
d4132 2
a4133 2
  if (bfd_seek (abfd, section->filepos + offset, SEEK_SET) != 0)
    return FALSE;
d4135 5
a4139 4
  if (count == 0)
    return TRUE;

  return bfd_bwrite (location, count, abfd) == count;
d4142 1
a4142 1
static bfd_boolean
d4151 1
a4151 1
	  return FALSE;
d4155 1
a4155 1
	  return FALSE;
d4159 1
a4159 1
	return FALSE;
d4163 1
a4163 1
  return TRUE;
d4169 1
a4169 1
buy_and_read (abfd, where, size)
d4172 2
a4173 1
     bfd_size_type size;
d4178 2
a4179 2
  if (bfd_seek (abfd, where, SEEK_SET) != 0
      || bfd_bread (area, size, abfd) != size)
d4208 1
a4208 1
static bfd_boolean
a4214 1
  bfd_size_type amt;
d4218 7
a4224 4
  amt = (bfd_size_type) bfd_coff_linesz (abfd) * asect->lineno_count;
  native_lineno = (LINENO *) buy_and_read (abfd, asect->line_filepos, amt);
  amt = ((bfd_size_type) asect->lineno_count + 1) * sizeof (alent);
  lineno_cache = (alent *) bfd_alloc (abfd, amt);
d4226 1
a4226 1
    return FALSE;
a4235 1

d4241 2
a4242 2
	      bfd_boolean warned;
	      bfd_signed_vma symndx;
d4245 1
a4245 1
	      warned = FALSE;
d4248 1
a4248 1
		  || (bfd_vma) symndx >= obj_raw_syment_count (abfd))
d4252 1
a4252 1
		     bfd_archive_filename (abfd), dst.l_addr.l_symndx);
d4254 1
a4254 1
		  warned = TRUE;
d4266 1
a4266 1
		     bfd_archive_filename (abfd),
d4286 1
a4286 1
  return TRUE;
d4293 1
a4293 1
static bfd_boolean
d4300 1
a4300 1
  bfd_size_type amt;
d4304 1
a4304 1
    return TRUE;
d4306 1
a4306 1
  /* Read in the symbol table.  */
d4308 9
a4316 1
    return FALSE;
a4317 4
  /* Allocate enough room for all the symbols in cached form.  */
  amt = obj_raw_syment_count (abfd);
  amt *= sizeof (coff_symbol_type);
  cached_area = (coff_symbol_type *) bfd_alloc (abfd, amt);
d4319 5
a4323 5
    return FALSE;

  amt = obj_raw_syment_count (abfd);
  amt *= sizeof (unsigned int);
  table_ptr = (unsigned int *) bfd_alloc (abfd, amt);
d4326 1
a4326 1
    return FALSE;
a4331 1

d4344 1
a4344 1
	  dst->done_lineno = FALSE;
d4355 2
a4356 1
	      /* Fall through to next case.  */
d4369 1
a4369 1
	    case C_SYSTEM:	/* System Wide variable.  */
d4372 1
a4372 1
            /* In PE, 0x68 (104) denotes a section symbol.  */
d4435 1
a4435 2
		dst->symbol.flags |= BSF_WEAK;

d4438 3
a4440 1
		dst->symbol.flags = BSF_LOCAL;
d4442 1
d4444 1
a4444 1
		dst->symbol.flags |= BSF_WEAK;
d4448 1
a4448 1
	    case C_STAT:	 /* Static.  */
d4450 1
a4450 1
	    case C_LEAFSTAT:	 /* Static leaf procedure.  */
d4453 3
a4455 3
            case C_THUMBSTAT:    /* Thumb static.  */
            case C_THUMBLABEL:   /* Thumb label.  */
            case C_THUMBSTATFUNC:/* Thumb static function.  */
d4457 1
a4457 1
	    case C_LABEL:	 /* Label.  */
d4480 3
a4482 3
	    case C_MOS:		/* Member of structure.  */
	    case C_EOS:		/* End of structure.  */
#ifdef NOTDEF			/* C_AUTOARG has the same value.  */
d4484 1
a4484 1
	    case C_GLBLREG:	/* A29k-specific storage class.  */
d4487 3
a4489 3
	    case C_REGPARM:	/* Register parameter.  */
	    case C_REG:		/* register variable.  */
              /* C_AUTOARG conflictes with TI COFF C_UEXT.  */
d4492 1
a4492 1
	    case C_AUTOARG:	/* 960-specific storage class.  */
d4495 1
a4495 1
	    case C_TPDEF:	/* Type definition.  */
d4497 6
a4502 6
	    case C_AUTO:	/* Automatic variable.  */
	    case C_FIELD:	/* Bit field.  */
	    case C_ENTAG:	/* Enumeration tag.  */
	    case C_MOE:		/* Member of enumeration.  */
	    case C_MOU:		/* Member of union.  */
	    case C_UNTAG:	/* Union tag.  */
d4507 2
a4508 2
	    case C_FILE:	/* File name.  */
	    case C_STRTAG:	/* Structure tag.  */
d4528 2
a4529 2
	    case C_BINCL:	/* Beginning of include file.  */
	    case C_EINCL:	/* Ending of include file.  */
d4570 3
a4572 3
	    case C_BLOCK:	/* ".bb" or ".eb".  */
	    case C_FCN:		/* ".bf" or ".ef" (or PE ".lf").  */
	    case C_EFCN:	/* Physical end of function.  */
d4594 1
a4594 1
	    case C_STATLAB:	/* Static load time label.  */
d4607 3
a4609 3
	    case C_EXTDEF:	/* External definition.  */
	    case C_ULABEL:	/* Undefined label.  */
	    case C_USTATIC:	/* Undefined static.  */
d4612 2
a4613 2
               class to represent a section symbol.  */
	    case C_LINE:	/* line # reformatted as symbol table entry.  */
d4615 1
a4615 1
	    case C_ALIAS:	/* Duplicate tag.  */
d4617 1
a4617 1
	      /* New storage classes for TI COFF.  */
d4619 1
a4619 1
	    case C_UEXT:	/* Tentative external definition.  */
d4621 2
a4622 2
	    case C_EXTLAB:	/* External load time label.  */
	    case C_HIDDEN:	/* Ext symbol in dmert public lib.  */
d4626 1
a4626 1
		 bfd_archive_filename (abfd), src->u.syment.n_sclass,
d4642 2
a4643 2
	}
    }
d4650 1
a4650 1
  /* Slurp the line tables for each section too.  */
a4652 1

d4660 1
a4660 2

  return TRUE;
d4757 1
a4757 1
	 bfd_archive_filename (abfd),
d4812 1
a4812 1
static bfd_boolean
d4821 1
a4822 1
  bfd_size_type amt;
d4825 1
a4825 1
    return TRUE;
d4827 1
a4827 1
    return TRUE;
d4829 1
a4829 1
    return TRUE;
d4831 9
a4839 5
    return FALSE;
  amt = (bfd_size_type) bfd_coff_relsz (abfd) * asect->reloc_count;
  native_relocs = (RELOC *) buy_and_read (abfd, asect->rel_filepos, amt);
  amt = (bfd_size_type) asect->reloc_count * sizeof (arelent);
  reloc_cache = (arelent *) bfd_alloc (abfd, amt);
d4842 1
a4842 1
    return FALSE;
d4868 1
a4868 1
		 bfd_archive_filename (abfd), dst.r_symndx);
d4890 1
a4890 1
	 Note that symbols which used to be common must be left alone.  */
d4892 1
a4892 1
      /* Calculate any reloc addend by looking at the symbol.  */
d4898 1
a4898 1
      /* Fill in the cache_ptr->howto field from dst.r_type.  */
d4906 1
a4906 1
	     bfd_archive_filename (abfd), dst.r_type, (long) dst.r_vaddr);
d4908 1
a4908 1
	  return FALSE;
d4913 1
a4913 1
  return TRUE;
d4966 3
a4968 3
      /* This section has relocs made up by us, they are not in the
	 file, so take them out of their chain and place them into
	 the data area provided.  */
a4969 1

d4975 1
a5045 4
#ifndef coff_bfd_link_hash_table_free
#define coff_bfd_link_hash_table_free _bfd_generic_link_hash_table_free
#endif

a5068 1
#define coff_bfd_link_just_syms _bfd_generic_link_just_syms
d5085 1
a5085 1
static bfd_boolean coff_link_output_has_begun
d5088 1
a5088 1
static bfd_boolean
d5099 1
a5099 1
static bfd_boolean coff_final_link_postscript
d5102 1
a5102 1
static bfd_boolean
d5107 1
a5107 1
  return TRUE;
d5163 1
a5163 1
  TRUE,
d5165 1
a5165 1
  FALSE,
d5168 1
a5168 1
  TRUE,
d5170 1
a5170 1
  FALSE,
d5174 1
a5174 1
  TRUE,
d5176 1
a5176 1
  FALSE,
a5258 8
#endif

#ifndef coff_bfd_merge_sections
#define coff_bfd_merge_sections		    bfd_generic_merge_sections
#endif

#ifndef coff_bfd_discard_group
#define coff_bfd_discard_group		    bfd_generic_discard_group
@


1.1.1.10
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d336 1
a336 1
  PARAMS ((bfd *, asection *, const PTR, file_ptr, bfd_size_type));
a364 6
#ifdef TICOFF
static bfd_boolean ticoff0_bad_format_hook
    PARAMS ((bfd *, PTR ));
static bfd_boolean ticoff1_bad_format_hook
    PARAMS ((bfd *, PTR ));
#endif
d1061 1
a1061 5
	  /* The MS PE spec sets the DISCARDABLE flag on .reloc sections
	     but we do not want them to be labelled as debug section, since
	     then strip would remove them.  */
	  if (strncmp (name, ".reloc", sizeof ".reloc" - 1) != 0)
	    sec_flags |= SEC_DEBUGGING;
a1441 30
#ifdef TICOFF
static bfd_boolean
ticoff0_bad_format_hook (abfd, filehdr)
     bfd *abfd ATTRIBUTE_UNUSED;
     PTR filehdr;
{
  struct internal_filehdr *internal_f = (struct internal_filehdr *) filehdr;

  if (COFF0_BADMAG (*internal_f))
    return FALSE;

  return TRUE;
}
#endif

#ifdef TICOFF
static bfd_boolean
ticoff1_bad_format_hook (abfd, filehdr)
     bfd *abfd ATTRIBUTE_UNUSED;
     PTR filehdr;
{
  struct internal_filehdr *internal_f = (struct internal_filehdr *) filehdr;

  if (COFF1_BADMAG (*internal_f))
    return FALSE;

  return TRUE;
}
#endif

d1539 1
a1539 1
     symbol information, since they'll be overridden by the BFD symbol
a1660 2
      bfd_size_type relsz = bfd_coff_relsz (abfd);
      
d1662 2
a1663 1
      if (bfd_bread ((PTR) &dst, relsz, abfd) != relsz)
d1668 1
a1668 2
      section->reloc_count = hdr->s_nreloc = n.r_vaddr - 1;
      section->rel_filepos += relsz;
a1669 4
  else if (hdr->s_nreloc == 0xffff)
    (*_bfd_error_handler)
      ("%s: warning: claims to have 0xffff relocs, without overflow",
       bfd_get_filename (abfd));
a2974 5

      /* If no file alignment has been set, default to one.
	 This repairs 'ld -r' for arm-wince-pe target.  */
      if (page_size == 0)
        page_size = 1;
d3840 1
a3840 3
#ifdef COFF_WITH_PE
  internal_f.f_flags |= IMAGE_FILE_32BIT_MACHINE;
#else
d4230 1
a4230 1
     const PTR location;
a4371 7
  if (native_lineno == NULL)
    {
      (*_bfd_error_handler)
        (_("%s: warning: line number table read failed"),
	 bfd_archive_filename (abfd));
      return FALSE;
    }
d4633 1
a4633 1
              /* C_AUTOARG conflicts with TI COFF C_UEXT.  */
a4659 1
	    case C_TCSYM:
a4660 1
	    case C_ECOML:
d5072 1
a5340 86
#ifdef TICOFF
/* COFF0 differs in file/section header size and relocation entry size.  */
static const bfd_coff_backend_data ticoff0_swap_table =
{
  coff_SWAP_aux_in, coff_SWAP_sym_in, coff_SWAP_lineno_in,
  coff_SWAP_aux_out, coff_SWAP_sym_out,
  coff_SWAP_lineno_out, coff_SWAP_reloc_out,
  coff_SWAP_filehdr_out, coff_SWAP_aouthdr_out,
  coff_SWAP_scnhdr_out,
  FILHSZ_V0, AOUTSZ, SCNHSZ_V01, SYMESZ, AUXESZ, RELSZ_V0, LINESZ, FILNMLEN,
#ifdef COFF_LONG_FILENAMES
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_LONG_SECTION_NAMES
  TRUE,
#else
  FALSE,
#endif
  COFF_DEFAULT_SECTION_ALIGNMENT_POWER,
#ifdef COFF_FORCE_SYMBOLS_IN_STRINGS
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_DEBUG_STRING_WIDE_PREFIX
  4,
#else
  2,
#endif
  coff_SWAP_filehdr_in, coff_SWAP_aouthdr_in, coff_SWAP_scnhdr_in,
  coff_SWAP_reloc_in, ticoff0_bad_format_hook, coff_set_arch_mach_hook,
  coff_mkobject_hook, styp_to_sec_flags, coff_set_alignment_hook,
  coff_slurp_symbol_table, symname_in_debug_hook, coff_pointerize_aux_hook,
  coff_print_aux, coff_reloc16_extra_cases, coff_reloc16_estimate,
  coff_classify_symbol, coff_compute_section_file_positions,
  coff_start_final_link, coff_relocate_section, coff_rtype_to_howto,
  coff_adjust_symndx, coff_link_add_one_symbol,
  coff_link_output_has_begun, coff_final_link_postscript
};
#endif

#ifdef TICOFF
/* COFF1 differs in section header size.  */
static const bfd_coff_backend_data ticoff1_swap_table =
{
  coff_SWAP_aux_in, coff_SWAP_sym_in, coff_SWAP_lineno_in,
  coff_SWAP_aux_out, coff_SWAP_sym_out,
  coff_SWAP_lineno_out, coff_SWAP_reloc_out,
  coff_SWAP_filehdr_out, coff_SWAP_aouthdr_out,
  coff_SWAP_scnhdr_out,
  FILHSZ, AOUTSZ, SCNHSZ_V01, SYMESZ, AUXESZ, RELSZ, LINESZ, FILNMLEN,
#ifdef COFF_LONG_FILENAMES
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_LONG_SECTION_NAMES
  TRUE,
#else
  FALSE,
#endif
  COFF_DEFAULT_SECTION_ALIGNMENT_POWER,
#ifdef COFF_FORCE_SYMBOLS_IN_STRINGS
  TRUE,
#else
  FALSE,
#endif
#ifdef COFF_DEBUG_STRING_WIDE_PREFIX
  4,
#else
  2,
#endif
  coff_SWAP_filehdr_in, coff_SWAP_aouthdr_in, coff_SWAP_scnhdr_in,
  coff_SWAP_reloc_in, ticoff1_bad_format_hook, coff_set_arch_mach_hook,
  coff_mkobject_hook, styp_to_sec_flags, coff_set_alignment_hook,
  coff_slurp_symbol_table, symname_in_debug_hook, coff_pointerize_aux_hook,
  coff_print_aux, coff_reloc16_extra_cases, coff_reloc16_estimate,
  coff_classify_symbol, coff_compute_section_file_positions,
  coff_start_final_link, coff_relocate_section, coff_rtype_to_howto,
  coff_adjust_symndx, coff_link_add_one_symbol,
  coff_link_output_has_begun, coff_final_link_postscript
};
#endif

d5416 1
a5416 1
#define CREATE_BIG_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE, SWAP_TABLE)	\
d5463 1
a5463 51
  SWAP_TABLE								\
};

#define CREATE_BIGHDR_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE, SWAP_TABLE)	\
const bfd_target VAR =							\
{									\
  NAME ,								\
  bfd_target_coff_flavour,						\
  BFD_ENDIAN_LITTLE,		/* data byte order is little */		\
  BFD_ENDIAN_BIG,		/* header byte order is big */		\
  /* object flags */							\
  (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG |			\
   HAS_SYMS | HAS_LOCALS | WP_TEXT | EXTRA_O_FLAGS),			\
  /* section flags */							\
  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | EXTRA_S_FLAGS),\
  UNDER,			/* leading symbol underscore */		\
  '/',				/* ar_pad_char */			\
  15,				/* ar_max_namelen */			\
  									\
  /* Data conversion functions.  */					\
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,				\
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,				\
  bfd_getb16, bfd_getb_signed_16, bfd_putb16,				\
  									\
  /* Header conversion functions.  */					\
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,				\
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,				\
  bfd_getb16, bfd_getb_signed_16, bfd_putb16,				\
									\
	/* bfd_check_format */						\
  { _bfd_dummy_target, coff_object_p, bfd_generic_archive_p,		\
    _bfd_dummy_target },						\
	/* bfd_set_format */						\
  { bfd_false, coff_mkobject, _bfd_generic_mkarchive, bfd_false },	\
	/* bfd_write_contents */					\
  { bfd_false, coff_write_object_contents, _bfd_write_archive_contents,	\
    bfd_false },							\
									\
  BFD_JUMP_TABLE_GENERIC (coff),					\
  BFD_JUMP_TABLE_COPY (coff),						\
  BFD_JUMP_TABLE_CORE (_bfd_nocore),					\
  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),				\
  BFD_JUMP_TABLE_SYMBOLS (coff),					\
  BFD_JUMP_TABLE_RELOCS (coff),						\
  BFD_JUMP_TABLE_WRITE (coff),						\
  BFD_JUMP_TABLE_LINK (coff),						\
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),				\
  									\
  ALTERNATIVE,								\
  									\
  SWAP_TABLE								\
d5466 1
a5466 1
#define CREATE_LITTLE_COFF_TARGET_VEC(VAR, NAME, EXTRA_O_FLAGS, EXTRA_S_FLAGS, UNDER, ALTERNATIVE, SWAP_TABLE)	\
d5511 1
a5511 1
  SWAP_TABLE								\
@


