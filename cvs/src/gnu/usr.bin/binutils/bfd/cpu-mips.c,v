head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.50
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.48
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.44
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.46
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.38
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.42
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.7
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	BINUTILS-2_14:1.1.1.6
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.11.02.20.45.05;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.21.54.21;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.29;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.11.11;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.09.04.19.00.16;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.41;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.41;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.09.04.17.37.34;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.18.42;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.45.34;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.13.22.21;	author fgsch;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.17.20.42.13;	author drahn;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.11.02.20.22.19;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* bfd back-end for mips support
   Copyright 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001,
   2002, 2003 Free Software Foundation, Inc.
   Written by Steve Chamberlain of Cygnus Support.

This file is part of BFD, the Binary File Descriptor library.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "libbfd.h"

static const bfd_arch_info_type *mips_compatible
  (const bfd_arch_info_type *, const bfd_arch_info_type *);

/* The default routine tests bits_per_word, which is wrong on mips as
   mips word size doesn't correlate with reloc size.  */

static const bfd_arch_info_type *
mips_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)
{
  if (a->arch != b->arch)
    return NULL;

  /* Machine compatibility is checked in
     _bfd_mips_elf_merge_private_bfd_data.  */

  return a;
}

#define N(BITS_WORD, BITS_ADDR, NUMBER, PRINT, DEFAULT, NEXT)		\
  {							\
    BITS_WORD, /*  bits in a word */			\
    BITS_ADDR, /* bits in an address */			\
    8,	/* 8 bits in a byte */				\
    bfd_arch_mips,					\
    NUMBER,						\
    "mips",						\
    PRINT,						\
    3,							\
    DEFAULT,						\
    mips_compatible,					\
    bfd_default_scan,					\
    NEXT,						\
  }

enum
{
  I_mips3000,
  I_mips3900,
  I_mips4000,
  I_mips4010,
  I_mips4100,
  I_mips4111,
  I_mips4120,
  I_mips4300,
  I_mips4400,
  I_mips4600,
  I_mips4650,
  I_mips5000,
  I_mips5400,
  I_mips5500,
  I_mips6000,
  I_mips7000,
  I_mips8000,
  I_mips10000,
  I_mips12000,
  I_mips16,
  I_mips5,
  I_mipsisa32,
  I_mipsisa32r2,
  I_mipsisa64,
  I_mipsisa64r2,
  I_sb1,
};

#define NN(index) (&arch_info_struct[(index) + 1])

static const bfd_arch_info_type arch_info_struct[] =
{
  N (32, 32, bfd_mach_mips3000, "mips:3000",      FALSE, NN(I_mips3000)),
  N (32, 32, bfd_mach_mips3900, "mips:3900",      FALSE, NN(I_mips3900)),
  N (64, 64, bfd_mach_mips4000, "mips:4000",      FALSE, NN(I_mips4000)),
  N (64, 64, bfd_mach_mips4010, "mips:4010",      FALSE, NN(I_mips4010)),
  N (64, 64, bfd_mach_mips4100, "mips:4100",      FALSE, NN(I_mips4100)),
  N (64, 64, bfd_mach_mips4111, "mips:4111",      FALSE, NN(I_mips4111)),
  N (64, 64, bfd_mach_mips4120, "mips:4120",      FALSE, NN(I_mips4120)),
  N (64, 64, bfd_mach_mips4300, "mips:4300",      FALSE, NN(I_mips4300)),
  N (64, 64, bfd_mach_mips4400, "mips:4400",      FALSE, NN(I_mips4400)),
  N (64, 64, bfd_mach_mips4600, "mips:4600",      FALSE, NN(I_mips4600)),
  N (64, 64, bfd_mach_mips4650, "mips:4650",      FALSE, NN(I_mips4650)),
  N (64, 64, bfd_mach_mips5000, "mips:5000",      FALSE, NN(I_mips5000)),
  N (64, 64, bfd_mach_mips5400, "mips:5400",      FALSE, NN(I_mips5400)),
  N (64, 64, bfd_mach_mips5500, "mips:5500",      FALSE, NN(I_mips5500)),
  N (32, 32, bfd_mach_mips6000, "mips:6000",      FALSE, NN(I_mips6000)),
  N (64, 64, bfd_mach_mips7000, "mips:7000",      FALSE, NN(I_mips7000)),
  N (64, 64, bfd_mach_mips8000, "mips:8000",      FALSE, NN(I_mips8000)),
  N (64, 64, bfd_mach_mips10000,"mips:10000",     FALSE, NN(I_mips10000)),
  N (64, 64, bfd_mach_mips12000,"mips:12000",     FALSE, NN(I_mips12000)),
  N (64, 64, bfd_mach_mips16,   "mips:16",        FALSE, NN(I_mips16)),
  N (64, 64, bfd_mach_mips5,    "mips:mips5",     FALSE, NN(I_mips5)),
  N (32, 32, bfd_mach_mipsisa32,  "mips:isa32",   FALSE, NN(I_mipsisa32)),
  N (32, 32, bfd_mach_mipsisa32r2,"mips:isa32r2", FALSE, NN(I_mipsisa32r2)),
  N (64, 64, bfd_mach_mipsisa64,  "mips:isa64",   FALSE, NN(I_mipsisa64)),
  N (64, 64, bfd_mach_mipsisa64r2,"mips:isa64r2", FALSE, NN(I_mipsisa64r2)),
  N (64, 64, bfd_mach_mips_sb1, "mips:sb1",       FALSE, 0),
};

/* The default architecture is mips:3000, but with a machine number of
   zero.  This lets the linker distinguish between a default setting
   of mips, and an explicit setting of mips:3000.  */

const bfd_arch_info_type bfd_mips_arch =
N (32, 32, 0, "mips", TRUE, &arch_info_struct[0]);
@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 2
a3 2
   Copyright 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002
   Free Software Foundation, Inc.
d27 1
a27 1
  PARAMS ((const bfd_arch_info_type *, const bfd_arch_info_type *));
d33 1
a33 3
mips_compatible (a, b)
     const bfd_arch_info_type *a;
     const bfd_arch_info_type *b;
d77 1
d86 1
d109 1
d118 1
@


1.4
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 2000
d26 20
d57 1
a57 1
    bfd_default_compatible, 				\
d70 1
d76 2
a82 2
  I_mips32,
  I_mips32_4k,
d84 3
a86 1
  I_mips64,
d94 24
a117 21
  N (32, 32, bfd_mach_mips3000, "mips:3000",      false, NN(I_mips3000)),
  N (32, 32, bfd_mach_mips3900, "mips:3900",      false, NN(I_mips3900)),
  N (64, 64, bfd_mach_mips4000, "mips:4000",      false, NN(I_mips4000)),
  N (64, 64, bfd_mach_mips4010, "mips:4010",      false, NN(I_mips4010)),
  N (64, 64, bfd_mach_mips4100, "mips:4100",      false, NN(I_mips4100)),
  N (64, 64, bfd_mach_mips4111, "mips:4111",      false, NN(I_mips4111)),
  N (64, 64, bfd_mach_mips4300, "mips:4300",      false, NN(I_mips4300)),
  N (64, 64, bfd_mach_mips4400, "mips:4400",      false, NN(I_mips4400)),
  N (64, 64, bfd_mach_mips4600, "mips:4600",      false, NN(I_mips4600)),
  N (64, 64, bfd_mach_mips4650, "mips:4650",      false, NN(I_mips4650)),
  N (64, 64, bfd_mach_mips5000, "mips:5000",      false, NN(I_mips5000)),
  N (32, 32, bfd_mach_mips6000, "mips:6000",      false, NN(I_mips6000)),
  N (64, 64, bfd_mach_mips8000, "mips:8000",      false, NN(I_mips8000)),
  N (64, 64, bfd_mach_mips10000,"mips:10000",     false, NN(I_mips10000)),
  N (64, 64, bfd_mach_mips12000,"mips:12000",     false, NN(I_mips12000)),
  N (64, 64, bfd_mach_mips16,   "mips:16",        false, NN(I_mips16)),
  N (32, 32, bfd_mach_mips32,   "mips:mips32",    false, NN(I_mips32)),
  N (32, 32, bfd_mach_mips32_4k,"mips:mips32-4k", false, NN(I_mips32_4k)),
  N (64, 64, bfd_mach_mips5,    "mips:mips5",     false, NN(I_mips5)),
  N (64, 64, bfd_mach_mips64,   "mips:mips64",    false, NN(I_mips64)),
  N (64, 64, bfd_mach_mips_sb1, "mips:sb1",       false, 0),
d125 1
a125 1
N (32, 32, 0, "mips", true, &arch_info_struct[0]);
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright (C) 1990, 91-97, 1998 Free Software Foundation, Inc.
d42 23
a64 16
enum {
I_mips3000, 
I_mips3900, 
I_mips4000, 
I_mips4010, 
I_mips4100, 
I_mips4111,
I_mips4300, 
I_mips4400, 
I_mips4600, 
I_mips4650, 
I_mips5000, 
I_mips6000, 
I_mips8000, 
I_mips10000,
I_mips16
d67 1
d69 1
a69 3
#define NN(index) (&arch_info_struct[(index)+1])

static const bfd_arch_info_type arch_info_struct[] = 
d71 21
a91 17
  N (32, 32, bfd_mach_mips3000, "mips:3000", false, NN(I_mips3000)),
  N (32, 32, bfd_mach_mips3900, "mips:3900", false, NN(I_mips3900)),
  N (64, 64, bfd_mach_mips4000, "mips:4000", false, NN(I_mips4000)),
  N (64, 64, bfd_mach_mips4010, "mips:4010", false, NN(I_mips4010)),
  N (64, 64, bfd_mach_mips4100, "mips:4100", false, NN(I_mips4100)),
  N (64, 64, bfd_mach_mips4111, "mips:4111", false, NN(I_mips4111)),
  N (64, 64, bfd_mach_mips4300, "mips:4300", false, NN(I_mips4300)),
  N (64, 64, bfd_mach_mips4400, "mips:4400", false, NN(I_mips4400)),
  N (64, 64, bfd_mach_mips4600, "mips:4600", false, NN(I_mips4600)),
  N (64, 64, bfd_mach_mips4650, "mips:4650", false, NN(I_mips4650)),
  N (64, 64, bfd_mach_mips5000, "mips:5000", false, NN(I_mips5000)),
  N (32, 32, bfd_mach_mips6000, "mips:6000", false, NN(I_mips6000)),
  N (64, 64, bfd_mach_mips8000, "mips:8000", false, NN(I_mips8000)),
  N (64, 64, bfd_mach_mips10000, "mips:10000", false, NN(I_mips10000)),


  N (64, 64, bfd_mach_mips16,   "mips:16",   false, 0),
@


1.2
log
@Merge the Cygnus 960904 sources
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94 Free Software Foundation, Inc.
d25 37
d64 17
a80 56
  {
    32,	/* 32 bits in a word */
    32,	/* 32 bits in an address */
    8,	/* 8 bits in a byte */
    bfd_arch_mips,
    3000,
    "mips",
    "mips:3000",
    3,
    false,
    bfd_default_compatible, 
    bfd_default_scan,
    &arch_info_struct[1],
  },
  {
    32,	/* 32 bits in a word */
    32,	/* 32 bits in an address */
    8,	/* 8 bits in a byte */
    bfd_arch_mips,
    6000,
    "mips",
    "mips:6000",
    3,
    false,
    bfd_default_compatible, 
    bfd_default_scan,
    &arch_info_struct[2],
  },
  {
    64, /* 64 bits in a word */
    64, /* 64 bits in an address */
    8,  /* 8 bits in a byte */
    bfd_arch_mips,
    4000,
    "mips",
    "mips:4000",
    3,
    false,
    bfd_default_compatible, 
    bfd_default_scan ,
    &arch_info_struct[3],
  },
  {
    64, /* 64 bits in a word */
    64, /* 64 bits in an address */
    8,  /* 8 bits in a byte */
    bfd_arch_mips,
    8000,
    "mips",
    "mips:8000",
    3,
    false,
    bfd_default_compatible, 
    bfd_default_scan ,
    0,
  }
d88 1
a88 14
{
  32,	/* 32 bits in a word */
  32,	/* 32 bits in an address */
  8,	/* 8 bits in a byte */
  bfd_arch_mips,
  0,
  "mips",
  "mips",
  3,
  true,
  bfd_default_compatible, 
  bfd_default_scan,
  &arch_info_struct[0],
};
@


1.1
log
@Initial revision
@
text
@d32 14
d53 1
a53 1
    &arch_info_struct[1],
d67 1
a67 1
    &arch_info_struct[2],
d85 4
d95 2
a96 1
  3000,
a97 1
  "mips:3000",
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@a31 14
    3000,
    "mips",
    "mips:3000",
    3,
    false,
    bfd_default_compatible, 
    bfd_default_scan,
    &arch_info_struct[1],
  },
  {
    32,	/* 32 bits in a word */
    32,	/* 32 bits in an address */
    8,	/* 8 bits in a byte */
    bfd_arch_mips,
d39 1
a39 1
    &arch_info_struct[2],
d53 1
a53 1
    &arch_info_struct[3],
a70 4
/* The default architecture is mips:3000, but with a machine number of
   zero.  This lets the linker distinguish between a default setting
   of mips, and an explicit setting of mips:3000.  */

d77 1
a77 2
  0,
  "mips",
d79 1
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
a76 14
    3,
    false,
    bfd_default_compatible, 
    bfd_default_scan ,
    &arch_info_struct[4],
  },
  {
    64, /* 64 bits in a word */
    64, /* 64 bits in an address */
    8,  /* 8 bits in a byte */
    bfd_arch_mips,
    16,
    "mips",
    "mips:16",
@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91-97, 1998 Free Software Foundation, Inc.
a24 37
#define N(BITS_WORD, BITS_ADDR, NUMBER, PRINT, DEFAULT, NEXT)		\
  {							\
    BITS_WORD, /*  bits in a word */			\
    BITS_ADDR, /* bits in an address */			\
    8,	/* 8 bits in a byte */				\
    bfd_arch_mips,					\
    NUMBER,						\
    "mips",						\
    PRINT,						\
    3,							\
    DEFAULT,						\
    bfd_default_compatible, 				\
    bfd_default_scan,					\
    NEXT,						\
  }

enum {
I_mips3000, 
I_mips3900, 
I_mips4000, 
I_mips4010, 
I_mips4100, 
I_mips4111,
I_mips4300, 
I_mips4400, 
I_mips4600, 
I_mips4650, 
I_mips5000, 
I_mips6000, 
I_mips8000, 
I_mips10000,
I_mips16
};


#define NN(index) (&arch_info_struct[(index)+1])

d27 70
a96 17
  N (32, 32, bfd_mach_mips3000, "mips:3000", false, NN(I_mips3000)),
  N (32, 32, bfd_mach_mips3900, "mips:3900", false, NN(I_mips3900)),
  N (64, 64, bfd_mach_mips4000, "mips:4000", false, NN(I_mips4000)),
  N (64, 64, bfd_mach_mips4010, "mips:4010", false, NN(I_mips4010)),
  N (64, 64, bfd_mach_mips4100, "mips:4100", false, NN(I_mips4100)),
  N (64, 64, bfd_mach_mips4111, "mips:4111", false, NN(I_mips4111)),
  N (64, 64, bfd_mach_mips4300, "mips:4300", false, NN(I_mips4300)),
  N (64, 64, bfd_mach_mips4400, "mips:4400", false, NN(I_mips4400)),
  N (64, 64, bfd_mach_mips4600, "mips:4600", false, NN(I_mips4600)),
  N (64, 64, bfd_mach_mips4650, "mips:4650", false, NN(I_mips4650)),
  N (64, 64, bfd_mach_mips5000, "mips:5000", false, NN(I_mips5000)),
  N (32, 32, bfd_mach_mips6000, "mips:6000", false, NN(I_mips6000)),
  N (64, 64, bfd_mach_mips8000, "mips:8000", false, NN(I_mips8000)),
  N (64, 64, bfd_mach_mips10000, "mips:10000", false, NN(I_mips10000)),


  N (64, 64, bfd_mach_mips16,   "mips:16",   false, 0),
d104 14
a117 1
N (32, 32, 0, "mips", true, &arch_info_struct[0]);
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 2000
   Free Software Foundation, Inc.
d41 16
a56 23
enum
{
  I_mips3000,
  I_mips3900,
  I_mips4000,
  I_mips4010,
  I_mips4100,
  I_mips4111,
  I_mips4300,
  I_mips4400,
  I_mips4600,
  I_mips4650,
  I_mips5000,
  I_mips6000,
  I_mips8000,
  I_mips10000,
  I_mips12000,
  I_mips16,
  I_mips32,
  I_mips32_4k,
  I_mips5,
  I_mips64,
  I_sb1,
a58 1
#define NN(index) (&arch_info_struct[(index) + 1])
d60 3
a62 1
static const bfd_arch_info_type arch_info_struct[] =
d64 17
a80 21
  N (32, 32, bfd_mach_mips3000, "mips:3000",      false, NN(I_mips3000)),
  N (32, 32, bfd_mach_mips3900, "mips:3900",      false, NN(I_mips3900)),
  N (64, 64, bfd_mach_mips4000, "mips:4000",      false, NN(I_mips4000)),
  N (64, 64, bfd_mach_mips4010, "mips:4010",      false, NN(I_mips4010)),
  N (64, 64, bfd_mach_mips4100, "mips:4100",      false, NN(I_mips4100)),
  N (64, 64, bfd_mach_mips4111, "mips:4111",      false, NN(I_mips4111)),
  N (64, 64, bfd_mach_mips4300, "mips:4300",      false, NN(I_mips4300)),
  N (64, 64, bfd_mach_mips4400, "mips:4400",      false, NN(I_mips4400)),
  N (64, 64, bfd_mach_mips4600, "mips:4600",      false, NN(I_mips4600)),
  N (64, 64, bfd_mach_mips4650, "mips:4650",      false, NN(I_mips4650)),
  N (64, 64, bfd_mach_mips5000, "mips:5000",      false, NN(I_mips5000)),
  N (32, 32, bfd_mach_mips6000, "mips:6000",      false, NN(I_mips6000)),
  N (64, 64, bfd_mach_mips8000, "mips:8000",      false, NN(I_mips8000)),
  N (64, 64, bfd_mach_mips10000,"mips:10000",     false, NN(I_mips10000)),
  N (64, 64, bfd_mach_mips12000,"mips:12000",     false, NN(I_mips12000)),
  N (64, 64, bfd_mach_mips16,   "mips:16",        false, NN(I_mips16)),
  N (32, 32, bfd_mach_mips32,   "mips:mips32",    false, NN(I_mips32)),
  N (32, 32, bfd_mach_mips32_4k,"mips:mips32-4k", false, NN(I_mips32_4k)),
  N (64, 64, bfd_mach_mips5,    "mips:mips5",     false, NN(I_mips5)),
  N (64, 64, bfd_mach_mips64,   "mips:mips64",    false, NN(I_mips64)),
  N (64, 64, bfd_mach_mips_sb1, "mips:sb1",       false, 0),
@


1.1.1.6
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002
a25 20
static const bfd_arch_info_type *mips_compatible
  PARAMS ((const bfd_arch_info_type *, const bfd_arch_info_type *));

/* The default routine tests bits_per_word, which is wrong on mips as
   mips word size doesn't correlate with reloc size.  */

static const bfd_arch_info_type *
mips_compatible (a, b)
     const bfd_arch_info_type *a;
     const bfd_arch_info_type *b;
{
  if (a->arch != b->arch)
    return NULL;

  /* Machine compatibility is checked in
     _bfd_mips_elf_merge_private_bfd_data.  */

  return a;
}

d37 1
a37 1
    mips_compatible,					\
a49 1
  I_mips4120,
a54 2
  I_mips5400,
  I_mips5500,
d60 2
d63 1
a63 3
  I_mipsisa32,
  I_mipsisa32r2,
  I_mipsisa64,
d71 21
a91 24
  N (32, 32, bfd_mach_mips3000, "mips:3000",      FALSE, NN(I_mips3000)),
  N (32, 32, bfd_mach_mips3900, "mips:3900",      FALSE, NN(I_mips3900)),
  N (64, 64, bfd_mach_mips4000, "mips:4000",      FALSE, NN(I_mips4000)),
  N (64, 64, bfd_mach_mips4010, "mips:4010",      FALSE, NN(I_mips4010)),
  N (64, 64, bfd_mach_mips4100, "mips:4100",      FALSE, NN(I_mips4100)),
  N (64, 64, bfd_mach_mips4111, "mips:4111",      FALSE, NN(I_mips4111)),
  N (64, 64, bfd_mach_mips4120, "mips:4120",      FALSE, NN(I_mips4120)),
  N (64, 64, bfd_mach_mips4300, "mips:4300",      FALSE, NN(I_mips4300)),
  N (64, 64, bfd_mach_mips4400, "mips:4400",      FALSE, NN(I_mips4400)),
  N (64, 64, bfd_mach_mips4600, "mips:4600",      FALSE, NN(I_mips4600)),
  N (64, 64, bfd_mach_mips4650, "mips:4650",      FALSE, NN(I_mips4650)),
  N (64, 64, bfd_mach_mips5000, "mips:5000",      FALSE, NN(I_mips5000)),
  N (64, 64, bfd_mach_mips5400, "mips:5400",      FALSE, NN(I_mips5400)),
  N (64, 64, bfd_mach_mips5500, "mips:5500",      FALSE, NN(I_mips5500)),
  N (32, 32, bfd_mach_mips6000, "mips:6000",      FALSE, NN(I_mips6000)),
  N (64, 64, bfd_mach_mips8000, "mips:8000",      FALSE, NN(I_mips8000)),
  N (64, 64, bfd_mach_mips10000,"mips:10000",     FALSE, NN(I_mips10000)),
  N (64, 64, bfd_mach_mips12000,"mips:12000",     FALSE, NN(I_mips12000)),
  N (64, 64, bfd_mach_mips16,   "mips:16",        FALSE, NN(I_mips16)),
  N (64, 64, bfd_mach_mips5,    "mips:mips5",     FALSE, NN(I_mips5)),
  N (32, 32, bfd_mach_mipsisa32,  "mips:isa32",   FALSE, NN(I_mipsisa32)),
  N (32, 32, bfd_mach_mipsisa32r2,"mips:isa32r2", FALSE, NN(I_mipsisa32r2)),
  N (64, 64, bfd_mach_mipsisa64,  "mips:isa64",   FALSE, NN(I_mipsisa64)),
  N (64, 64, bfd_mach_mips_sb1, "mips:sb1",       FALSE, 0),
d99 1
a99 1
N (32, 32, 0, "mips", TRUE, &arch_info_struct[0]);
@


1.1.1.7
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 2
a3 2
   Copyright 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001,
   2002, 2003 Free Software Foundation, Inc.
d27 1
a27 1
  (const bfd_arch_info_type *, const bfd_arch_info_type *);
d33 3
a35 1
mips_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)
a78 1
  I_mips7000,
a86 1
  I_mipsisa64r2,
a108 1
  N (64, 64, bfd_mach_mips7000, "mips:7000",      FALSE, NN(I_mips7000)),
a116 1
  N (64, 64, bfd_mach_mipsisa64r2,"mips:isa64r2", FALSE, NN(I_mipsisa64r2)),
@


