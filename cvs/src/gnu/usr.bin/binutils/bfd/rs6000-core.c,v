head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.50
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.46
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.48
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.40
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.44
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.42
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.38
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.36
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.34
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.32
	OPENBSD_5_0:1.6.0.30
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.28
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.26
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.22
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.24
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.20
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.6
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	new-binutils:1.3.0.16
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	CYGNUS-961112:1.1.1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.05.17.21.54.24;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.31;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.19.11.22;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.19.01.44;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.47.00;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.05.10;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.05.10;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.06.26;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.38.43;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.45.55;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.13.27.30;	author fgsch;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.17.20.42.20;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@/* IBM RS/6000 "XCOFF" back-end for BFD.
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000,
   2001, 2002
   Free Software Foundation, Inc.
   FIXME: Can someone provide a transliteration of this name into ASCII?
   Using the following chars caused a compiler warning on HIUX (so I replaced
   them with octal escapes), and isn't useful without an understanding of what
   character set it is.
   Written by Metin G. Ozisik, Mimi Ph\373\364ng-Th\345o V\365,
     and John Gilmore.
   Archive support from Damon A. Permezel.
   Contributed by IBM Corporation and Cygnus Support.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* This port currently only handles reading object files, except when
   compiled on an RS/6000 host.  -- no archive support, no core files.
   In all cases, it does not support writing.

   This is in a separate file from coff-rs6000.c, because it includes
   system include files that conflict with coff/rs6000.h.  */

/* Internalcoff.h and coffcode.h modify themselves based on this flag.  */
#define RS6000COFF_C 1

/* The AIX 4.1 kernel is obviously compiled with -D_LONG_LONG, so
   we have to define _LONG_LONG for older versions of gcc to get the
   proper alignments in the user structure.  */
#if defined(_AIX41) && !defined(_LONG_LONG)
#define _LONG_LONG
#endif

#include "bfd.h"
#include "sysdep.h"
#include "libbfd.h"

#ifdef AIX_CORE

/* AOUTHDR is defined by the above.  We need another defn of it, from the
   system include files.  Punt the old one and get us a new name for the
   typedef in the system include files.  */
#ifdef AOUTHDR
#undef AOUTHDR
#endif
#define	AOUTHDR	second_AOUTHDR

#undef	SCNHDR

/* ------------------------------------------------------------------------ */
/*	Support for core file stuff..					    */
/* ------------------------------------------------------------------------ */

#include <sys/user.h>
#define __LDINFO_PTRACE32__	/* for __ld_info32 */
#define __LDINFO_PTRACE64__	/* for __ld_info64 */
#include <sys/ldr.h>
#include <sys/core.h>
#include <sys/systemcfg.h>

#define	core_hdr(bfd)		((CoreHdr *) bfd->tdata.any)

/* AIX 4.1 changed the names and locations of a few items in the core file.
   AIX 4.3 defined an entirely new structure, core_dumpx, but kept support for
   the previous 4.1 structure, core_dump.

   AIX_CORE_DUMPX_CORE is defined (by configure) on AIX 4.3+, and
   CORE_VERSION_1 is defined (by AIX core.h) as 2 on AIX 4.3+ and as 1 on AIX
   4.1 and 4.2.  AIX pre-4.1 (aka 3.x) either doesn't define CORE_VERSION_1
   or else defines it as 0.  */

#if defined(CORE_VERSION_1) && !CORE_VERSION_1
# undef CORE_VERSION_1
#endif

/* The following union and macros allow this module to compile on all AIX
   versions and to handle both core_dumpx and core_dump on 4.3+.  CNEW_*()
   and COLD_*() macros respectively retrieve core_dumpx and core_dump
   values.  */

/* Union of 32-bit and 64-bit versions of ld_info.  */

typedef union {
#ifdef __ld_info32
  struct __ld_info32 l32;
  struct __ld_info64 l64;
#else
  struct ld_info l32;
  struct ld_info l64;
#endif
} LdInfo;

/* Union of old and new core dump structures.  */

typedef union {
#ifdef AIX_CORE_DUMPX_CORE
  struct core_dumpx new;	/* new AIX 4.3+ core dump */
#else
  struct core_dump new;		/* for simpler coding */
#endif
  struct core_dump old;		/* old AIX 4.2- core dump, still used on
				   4.3+ with appropriate SMIT config */
} CoreHdr;

/* Union of old and new vm_info structures.  */

#ifdef CORE_VERSION_1
typedef union {
#ifdef AIX_CORE_DUMPX_CORE
  struct vm_infox new;
#else
  struct vm_info new;
#endif
  struct vm_info old;
} VmInfo;
#endif

/* Return whether CoreHdr C is in new or old format.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CORE_NEW(c)	(!(c).old.c_entries)
#else
# define CORE_NEW(c)	0
#endif

/* Return the c_stackorg field from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_STACKORG(c)	(c).c_stackorg
#else
# define CNEW_STACKORG(c)	0
#endif

/* Return the offset to the loader region from struct core_dump C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_LOADER(c)	(c).c_loader
#else
# define CNEW_LOADER(c)	0
#endif

/* Return the offset to the loader region from struct core_dump C.  */

#define COLD_LOADER(c)	(c).c_tab

/* Return the c_lsize field from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_LSIZE(c)	(c).c_lsize
#else
# define CNEW_LSIZE(c)	0
#endif

/* Return the c_dataorg field from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_DATAORG(c)	(c).c_dataorg
#else
# define CNEW_DATAORG(c)	0
#endif

/* Return the c_datasize field from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_DATASIZE(c)	(c).c_datasize
#else
# define CNEW_DATASIZE(c)	0
#endif

/* Return the c_impl field from struct core_dumpx C.  */

#if defined (HAVE_ST_C_IMPL) || defined (AIX_5_CORE)
# define CNEW_IMPL(c)	(c).c_impl
#else
# define CNEW_IMPL(c)	0
#endif

/* Return the command string from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_COMM(c)	(c).c_u.U_proc.pi_comm
#else
# define CNEW_COMM(c)	0
#endif

/* Return the command string from struct core_dump C.  */

#ifdef CORE_VERSION_1
# define COLD_COMM(c)	(c).c_u.U_comm
#else
# define COLD_COMM(c)	(c).c_u.u_comm
#endif

/* Return the struct __context64 pointer from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_CONTEXT64(c)	(c).c_flt.hctx.r64
#else
# define CNEW_CONTEXT64(c)	c
#endif

/* Return the struct mstsave pointer from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_MSTSAVE(c)	(c).c_flt.hctx.r32
#else
# define CNEW_MSTSAVE(c)	c
#endif

/* Return the struct mstsave pointer from struct core_dump C.  */

#ifdef CORE_VERSION_1
# define COLD_MSTSAVE(c)	(c).c_mst
#else
# define COLD_MSTSAVE(c)	(c).c_u.u_save
#endif

/* Return whether struct core_dumpx is from a 64-bit process.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_PROC64(c)		IS_PROC64(&(c).c_u.U_proc)
#else
# define CNEW_PROC64(c)		0
#endif

/* Magic end-of-stack addresses for old core dumps.  This is _very_ fragile,
   but I don't see any easy way to get that info right now.  */

#ifdef CORE_VERSION_1
# define COLD_STACKEND	0x2ff23000
#else
# define COLD_STACKEND	0x2ff80000
#endif

/* Size of the leading portion that old and new core dump structures have in
   common.  */
#define CORE_COMMONSZ	((int) &((struct core_dump *) 0)->c_entries \
			 + sizeof (((struct core_dump *) 0)->c_entries))

/* Try to read into CORE the header from the core file associated with ABFD.
   Return success.  */

static bfd_boolean
read_hdr (bfd *abfd, CoreHdr *core)
{
  bfd_size_type size;

  if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)
    return FALSE;

  /* Read the leading portion that old and new core dump structures have in
     common.  */
  size = CORE_COMMONSZ;
  if (bfd_bread (core, size, abfd) != size)
    return FALSE;

  /* Read the trailing portion of the structure.  */
  if (CORE_NEW (*core))
    size = sizeof (core->new);
  else
    size = sizeof (core->old);
  size -= CORE_COMMONSZ;
  return bfd_bread ((char *) core + CORE_COMMONSZ, size, abfd) == size;
}

static asection *
make_bfd_asection (abfd, name, flags, _raw_size, vma, filepos)
     bfd *abfd;
     const char *name;
     flagword flags;
     bfd_size_type _raw_size;
     bfd_vma vma;
     file_ptr filepos;
{
  asection *asect;

  asect = bfd_make_section_anyway (abfd, name);
  if (!asect)
    return NULL;

  asect->flags = flags;
  asect->_raw_size = _raw_size;
  asect->vma = vma;
  asect->filepos = filepos;
  asect->alignment_power = 8;

  return asect;
}

/* Decide if a given bfd represents a `core' file or not. There really is no
   magic number or anything like, in rs6000coff.  */

const bfd_target *
rs6000coff_core_p (abfd)
     bfd *abfd;
{
  CoreHdr core;
  struct stat statbuf;
  bfd_size_type size;
  char *tmpptr;

  /* Values from new and old core structures.  */
  int c_flag;
  file_ptr c_stack, c_regoff, c_loader;
  bfd_size_type c_size, c_regsize, c_lsize;
  bfd_vma c_stackend;
  void *c_regptr;
  int proc64;

  if (!read_hdr (abfd, &core))
    {
      if (bfd_get_error () != bfd_error_system_call)
	bfd_set_error (bfd_error_wrong_format);
      return NULL;
    }

  /* Copy fields from new or old core structure.  */
  if (CORE_NEW (core))
    {
      c_flag = core.new.c_flag;
      c_stack = (file_ptr) core.new.c_stack;
      c_size = core.new.c_size;
      c_stackend = CNEW_STACKORG (core.new) + c_size;
      c_lsize = CNEW_LSIZE (core.new);
      c_loader = CNEW_LOADER (core.new);
      proc64 = CNEW_PROC64 (core.new);
    }
  else
    {
      c_flag = core.old.c_flag;
      c_stack = (file_ptr) core.old.c_stack;
      c_size = core.old.c_size;
      c_stackend = COLD_STACKEND;
      c_lsize = 0x7ffffff;
      c_loader = (file_ptr) COLD_LOADER (core.old);
      proc64 = 0;
    }

  if (proc64)
    {
      c_regsize = sizeof (CNEW_CONTEXT64 (core.new));
      c_regptr = &CNEW_CONTEXT64 (core.new);
    }
  else if (CORE_NEW (core))
    {
      c_regsize = sizeof (CNEW_MSTSAVE (core.new));
      c_regptr = &CNEW_MSTSAVE (core.new);
    }
  else
    {
      c_regsize = sizeof (COLD_MSTSAVE (core.old));
      c_regptr = &COLD_MSTSAVE (core.old);
    }
  c_regoff = (char *) c_regptr - (char *) &core;

  if (bfd_stat (abfd, &statbuf) < 0)
    {
      bfd_set_error (bfd_error_system_call);
      return NULL;
    }

  /* If the core file ulimit is too small, the system will first
     omit the data segment, then omit the stack, then decline to
     dump core altogether (as far as I know UBLOCK_VALID and LE_VALID
     are always set) (this is based on experimentation on AIX 3.2).
     Now, the thing is that GDB users will be surprised
     if segments just silently don't appear (well, maybe they would
     think to check "info files", I don't know).

     For the data segment, we have no choice but to keep going if it's
     not there, since the default behavior is not to dump it (regardless
     of the ulimit, it's based on SA_FULLDUMP).  But for the stack segment,
     if it's not there, we refuse to have anything to do with this core
     file.  The usefulness of a core dump without a stack segment is pretty
     limited anyway.  */

  if (!(c_flag & UBLOCK_VALID)
      || !(c_flag & LE_VALID))
    {
      bfd_set_error (bfd_error_wrong_format);
      return NULL;
    }

  if (!(c_flag & USTACK_VALID))
    {
      bfd_set_error (bfd_error_file_truncated);
      return NULL;
    }

  /* Don't check the core file size for a full core, AIX 4.1 includes
     additional shared library sections in a full core.  */
  if (!(c_flag & (FULL_CORE | CORE_TRUNC)))
    {
      /* If the size is wrong, it means we're misinterpreting something.  */
      if (c_stack + (file_ptr) c_size != statbuf.st_size)
	{
	  bfd_set_error (bfd_error_wrong_format);
	  return NULL;
	}
    }

  /* Sanity check on the c_tab field.  */
  if (!CORE_NEW (core) && (c_loader < (file_ptr) sizeof core.old ||
			   c_loader >= statbuf.st_size ||
			   c_loader >= c_stack))
    {
      bfd_set_error (bfd_error_wrong_format);
      return NULL;
    }

  /* Issue warning if the core file was truncated during writing.  */
  if (c_flag & CORE_TRUNC)
    (*_bfd_error_handler) (_("%s: warning core file truncated"),
			   bfd_get_filename (abfd));

  /* Allocate core file header.  */
  size = CORE_NEW (core) ? sizeof (core.new) : sizeof (core.old);
  tmpptr = (char *) bfd_zalloc (abfd, (bfd_size_type) size);
  if (!tmpptr)
    return NULL;

  /* Copy core file header.  */
  memcpy (tmpptr, &core, size);
  set_tdata (abfd, tmpptr);

  /* Set architecture.  */
  if (CORE_NEW (core))
    {
      enum bfd_architecture arch;
      unsigned long mach;

      switch (CNEW_IMPL (core.new))
	{
	case POWER_RS1:
	case POWER_RSC:
	case POWER_RS2:
	  arch = bfd_arch_rs6000;
	  mach = bfd_mach_rs6k;
	  break;
	default:
	  arch = bfd_arch_powerpc;
	  mach = bfd_mach_ppc;
	  break;
	}
      bfd_default_set_arch_mach (abfd, arch, mach);
    }

  /* .stack section.  */
  if (!make_bfd_asection (abfd, ".stack",
			  SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
			  c_size, c_stackend - c_size, c_stack))
    goto fail;

  /* .reg section for all registers.  */
  if (!make_bfd_asection (abfd, ".reg",
			  SEC_HAS_CONTENTS,
			  c_regsize, (bfd_vma) 0, c_regoff))
    goto fail;

  /* .ldinfo section.
     To actually find out how long this section is in this particular
     core dump would require going down the whole list of struct ld_info's.
     See if we can just fake it.  */
  if (!make_bfd_asection (abfd, ".ldinfo",
			  SEC_HAS_CONTENTS,
			  c_lsize, (bfd_vma) 0, c_loader))
    goto fail;

#ifndef CORE_VERSION_1
  /* .data section if present.
     AIX 3 dumps the complete data section and sets FULL_CORE if the
     ulimit is large enough, otherwise the data section is omitted.
     AIX 4 sets FULL_CORE even if the core file is truncated, we have
     to examine core.c_datasize below to find out the actual size of
     the .data section.  */
  if (c_flag & FULL_CORE)
    {
      if (!make_bfd_asection (abfd, ".data",
			      SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
			      (bfd_size_type) core.old.c_u.u_dsize,
			      (bfd_vma)
				CDATA_ADDR (core.old.c_u.u_dsize),
			      c_stack + c_size))
	goto fail;
    }
#endif

#ifdef CORE_VERSION_1
  /* AIX 4 adds data sections from loaded objects to the core file,
     which can be found by examining ldinfo, and anonymously mmapped
     regions.  */
  {
    LdInfo ldinfo;
    bfd_size_type ldi_datasize;
    file_ptr ldi_core;
    uint ldi_next;
    bfd_vma ldi_dataorg;

    /* Fields from new and old core structures.  */
    bfd_size_type c_datasize, c_vmregions;
    file_ptr c_data, c_vmm;

    if (CORE_NEW (core))
      {
	c_datasize = CNEW_DATASIZE (core.new);
	c_data = (file_ptr) core.new.c_data;
	c_vmregions = core.new.c_vmregions;
	c_vmm = (file_ptr) core.new.c_vmm;
      }
    else
      {
	c_datasize = core.old.c_datasize;
	c_data = (file_ptr) core.old.c_data;
	c_vmregions = core.old.c_vmregions;
	c_vmm = (file_ptr) core.old.c_vmm;
      }

    /* .data section from executable.  */
    if (c_datasize)
      {
	if (!make_bfd_asection (abfd, ".data",
				SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
				c_datasize,
				(bfd_vma) CDATA_ADDR (c_datasize),
				c_data))
	  goto fail;
      }

    /* .data sections from loaded objects.  */
    if (proc64)
      size = (int) ((LdInfo *) 0)->l64.ldinfo_filename;
    else
      size = (int) ((LdInfo *) 0)->l32.ldinfo_filename;

    while (1)
      {
	if (bfd_seek (abfd, c_loader, SEEK_SET) != 0)
	  goto fail;
	if (bfd_bread (&ldinfo, size, abfd) != size)
	  goto fail;

	if (proc64)
	  {
	    ldi_core = ldinfo.l64.ldinfo_core;
	    ldi_datasize = ldinfo.l64.ldinfo_datasize;
	    ldi_dataorg = (bfd_vma) ldinfo.l64.ldinfo_dataorg;
	    ldi_next = ldinfo.l64.ldinfo_next;
	  }
	else
	  {
	    ldi_core = ldinfo.l32.ldinfo_core;
	    ldi_datasize = ldinfo.l32.ldinfo_datasize;
	    ldi_dataorg = (bfd_vma) (long) ldinfo.l32.ldinfo_dataorg;
	    ldi_next = ldinfo.l32.ldinfo_next;
	  }

	if (ldi_core)
	  if (!make_bfd_asection (abfd, ".data",
				  SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
				  ldi_datasize, ldi_dataorg, ldi_core))
	    goto fail;

	if (ldi_next == 0)
	  break;
	c_loader += ldi_next;
      }

    /* .vmdata sections from anonymously mmapped regions.  */
    if (c_vmregions)
      {
	bfd_size_type i;

	if (bfd_seek (abfd, c_vmm, SEEK_SET) != 0)
	  goto fail;

	for (i = 0; i < c_vmregions; i++)
	  {
	    VmInfo vminfo;
	    bfd_size_type vminfo_size;
	    file_ptr vminfo_offset;
	    bfd_vma vminfo_addr;

	    size = CORE_NEW (core) ? sizeof (vminfo.new) : sizeof (vminfo.old);
	    if (bfd_bread (&vminfo, size, abfd) != size)
	      goto fail;

	    if (CORE_NEW (core))
	      {
		vminfo_addr = (bfd_vma) vminfo.new.vminfo_addr;
		vminfo_size = vminfo.new.vminfo_size;
		vminfo_offset = vminfo.new.vminfo_offset;
	      }
	    else
	      {
		vminfo_addr = (bfd_vma) (long) vminfo.old.vminfo_addr;
		vminfo_size = vminfo.old.vminfo_size;
		vminfo_offset = vminfo.old.vminfo_offset;
	      }

	    if (vminfo_offset)
	      if (!make_bfd_asection (abfd, ".vmdata",
				      SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
				      vminfo_size, vminfo_addr,
				      vminfo_offset))
		goto fail;
	  }
      }
  }
#endif

  return abfd->xvec;		/* This is garbage for now.  */

 fail:
  bfd_release (abfd, abfd->tdata.any);
  abfd->tdata.any = NULL;
  bfd_section_list_clear (abfd);
  return NULL;
}

/* Return `TRUE' if given core is from the given executable.  */

bfd_boolean
rs6000coff_core_file_matches_executable_p (core_bfd, exec_bfd)
     bfd *core_bfd;
     bfd *exec_bfd;
{
  CoreHdr core;
  bfd_size_type size;
  char *path, *s;
  size_t alloc;
  const char *str1, *str2;
  bfd_boolean ret;
  file_ptr c_loader;

  if (!read_hdr (core_bfd, &core))
    return FALSE;

  if (CORE_NEW (core))
    c_loader = CNEW_LOADER (core.new);
  else
    c_loader = (file_ptr) COLD_LOADER (core.old);

  if (CORE_NEW (core) && CNEW_PROC64 (core.new))
    size = (int) ((LdInfo *) 0)->l64.ldinfo_filename;
  else
    size = (int) ((LdInfo *) 0)->l32.ldinfo_filename;

  if (bfd_seek (core_bfd, c_loader + size, SEEK_SET) != 0)
    return FALSE;

  alloc = 100;
  path = bfd_malloc ((bfd_size_type) alloc);
  if (path == NULL)
    return FALSE;
  s = path;

  while (1)
    {
      if (bfd_bread (s, (bfd_size_type) 1, core_bfd) != 1)
	{
	  free (path);
	  return FALSE;
	}
      if (*s == '\0')
	break;
      ++s;
      if (s == path + alloc)
	{
	  char *n;

	  alloc *= 2;
	  n = bfd_realloc (path, (bfd_size_type) alloc);
	  if (n == NULL)
	    {
	      free (path);
	      return FALSE;
	    }
	  s = n + (path - s);
	  path = n;
	}
    }

  str1 = strrchr (path, '/');
  str2 = strrchr (exec_bfd->filename, '/');

  /* step over character '/' */
  str1 = str1 != NULL ? str1 + 1 : path;
  str2 = str2 != NULL ? str2 + 1 : exec_bfd->filename;

  if (strcmp (str1, str2) == 0)
    ret = TRUE;
  else
    ret = FALSE;

  free (path);

  return ret;
}

char *
rs6000coff_core_file_failing_command (abfd)
     bfd *abfd;
{
  CoreHdr *core = core_hdr (abfd);
  char *com = CORE_NEW (*core) ?
    CNEW_COMM (core->new) : COLD_COMM (core->old);

  if (*com)
    return com;
  else
    return 0;
}

int
rs6000coff_core_file_failing_signal (abfd)
     bfd *abfd;
{
  CoreHdr *core = core_hdr (abfd);
  return CORE_NEW (*core) ? core->new.c_signo : core->old.c_signo;
}

#endif /* AIX_CORE */
@


1.5
log
@resolve conflicts.
@
text
@d3 1
a3 1
   2001
d14 1
a14 1
This file is part of BFD, the Binary File Descriptor library.
d16 13
a28 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d185 1
a185 1
#ifdef AIX_CORE_DUMPX_CORE
d256 1
a256 1
static boolean
d261 2
a262 2
  if (bfd_seek (abfd, 0, SEEK_SET) != 0)
    return false;
d266 3
a268 2
  if (bfd_read (core, CORE_COMMONSZ, 1, abfd) != CORE_COMMONSZ)
    return false;
d271 6
a276 3
  size = CORE_NEW (*core) ? sizeof (core->new) : sizeof (core->old)
    - CORE_COMMONSZ;
  return bfd_read ((char *) core + CORE_COMMONSZ, size, 1, abfd) == size;
d282 1
a282 1
     CONST char *name;
d431 1
a431 1
  tmpptr = (char *) bfd_zalloc (abfd, size);
d465 1
a465 1
    return NULL;
d471 1
a471 1
    return NULL;
d480 1
a480 1
    return NULL;
d497 1
a497 1
	return NULL;
d539 1
a539 1
	  return NULL;
d551 3
a553 3
	  return NULL;
	if (bfd_read (&ldinfo, size, 1, abfd) != size)
	  return NULL;
d574 1
a574 1
	    return NULL;
d587 1
a587 1
	  return NULL;
d597 2
a598 2
	    if (bfd_read (&vminfo, size, 1, abfd) != size)
	      return NULL;
d618 1
a618 1
		return NULL;
d625 6
d633 1
a633 1
/* Return `true' if given core is from the given executable.  */
d635 1
a635 1
boolean
d645 1
a645 1
  boolean ret;
d649 1
a649 1
    return false;
d662 1
a662 1
    return false;
d665 1
a665 1
  path = bfd_malloc (alloc);
d667 1
a667 1
    return false;
d672 1
a672 1
      if (bfd_read (s, 1, 1, core_bfd) != 1)
d675 1
a675 1
	  return false;
d685 1
a685 1
	  n = bfd_realloc (path, alloc);
d689 1
a689 1
	      return false;
d704 1
a704 1
    ret = true;
d706 1
a706 1
    ret = false;
@


1.4
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright 1990, 91, 92, 93, 94, 95, 96, 97, 98, 2000
d9 1
a9 1
   Written by Metin G. Ozisik, Mimi Ph\373\364ng-Th\345o V\365, 
a33 2
   FIXMEmgo comments are left from Metin Ozisik's original port.

d35 1
a35 2
   system include files that conflict with coff/rs6000.h.
  */
a62 1

d64 1
a64 1
/*	Support for core file stuff.. 					    */
d68 2
d72 94
d167 1
d169 42
a210 27
/* Number of special purpose registers supported by gdb.  This value
   should match `tm.h' in gdb directory.  Clean this mess up and use
   the macros in sys/reg.h.  FIXMEmgo. */

#define	NUM_OF_SPEC_REGS  7

#define	core_hdr(bfd)		(((Rs6kCorData*)(bfd->tdata.any))->hdr)

/* AIX 4.1 Changed the names and locations of a few items in the core file,
   this seems to be the quickest/easiest way to deal with it. 

   Note however that encoding magic addresses (STACK_END_ADDR) is going
   to be _very_ fragile.  But I don't see any easy way to get that info
   right now.
   
   AIX 4.3 defines an entirely new structure (core_dumpx).  Yet the
   basic logic stays the same and we can still use our macro
   redefinition mechanism to effect the necessary changes.  */

#ifdef AIX_CORE_DUMPX_CORE
#define CORE_DATA_SIZE_FIELD c_dataorg
#define CORE_COMM_FIELD c_u.U_proc.pi_comm
#define SAVE_FIELD c_flt.hctx.r32
#define STACK_END_ADDR coredata.c_stackorg + coredata.c_size
#define LOADER_OFFSET_FIELD c_loader
#define LOADER_REGION_SIZE coredata.c_lsize
#define CORE_DUMP core_dumpx
d212 13
d226 3
a228 15
#define CORE_DATA_SIZE_FIELD c_u.U_dsize
#define CORE_COMM_FIELD c_u.U_comm
#define SAVE_FIELD c_mst
#define	STACK_END_ADDR 0x2ff23000
#define LOADER_OFFSET_FIELD c_tab
#define LOADER_REGION_SIZE 0x7ffffff
#define CORE_DUMP core_dump
#else
#define CORE_DATA_SIZE_FIELD c_u.u_dsize
#define CORE_COMM_FIELD c_u.u_comm
#define SAVE_FIELD c_u.u_save
#define	STACK_END_ADDR 0x2ff80000
#define LOADER_OFFSET_FIELD c_tab
#define LOADER_REGION_SIZE 0x7ffffff
#define CORE_DUMP core_dump
d230 16
d248 4
a251 4
/* These are stored in the bfd's tdata */
typedef struct {
  struct CORE_DUMP hdr;		/* core file header */
} Rs6kCorData;
d253 21
a273 2
static asection *make_bfd_asection PARAMS ((bfd *, CONST char *, flagword,
					    bfd_size_type, bfd_vma, file_ptr));
d300 1
a300 1
   magic number or anything like, in rs6000coff. */
d306 1
a306 1
  struct CORE_DUMP coredata;
d308 1
a308 1
  bfd_size_type nread;
d311 7
a317 2
  if (bfd_seek (abfd, 0, SEEK_SET) != 0)
    return NULL;
d319 1
a319 2
  nread = bfd_read (&coredata, 1, sizeof (struct CORE_DUMP), abfd);
  if (nread != sizeof (struct CORE_DUMP))
d326 39
d385 3
a387 3
     
  if (!(coredata.c_flag & UBLOCK_VALID)
      || !(coredata.c_flag & LE_VALID))
d393 1
a393 1
  if (!(coredata.c_flag & USTACK_VALID))
d401 1
a401 2
  if (!(coredata.c_flag & (FULL_CORE | CORE_TRUNC))
      && ((bfd_vma)coredata.c_stack + coredata.c_size) != statbuf.st_size)
d404 5
a408 2
      bfd_set_error (bfd_error_wrong_format);
      return NULL;
a410 9
#ifdef AIX_CORE_DUMPX_CORE
  /* For the core_dumpx format, make sure c_entries == 0  If it does
     not, the core file uses the old format */
  if (coredata.c_entries != 0)
    {
      bfd_set_error (bfd_error_wrong_format);
      return NULL;
    }
#else
d412 3
a414 3
  if ((u_long) coredata.c_tab < sizeof coredata ||
      (u_long) coredata.c_tab >= statbuf.st_size ||
      (long) coredata.c_tab >= (long)coredata.c_stack)
a418 1
#endif
d421 1
a421 1
  if (coredata.c_flag & CORE_TRUNC)
d426 2
a427 1
  tmpptr = (char*) bfd_zalloc (abfd, sizeof (Rs6kCorData));
d430 3
a432 1
      
d435 21
a455 2
  /* Copy core file header.  */
  core_hdr (abfd) = coredata;
d457 1
a457 1
  /* .stack section. */
d459 2
a460 4
  			  SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
			  (bfd_size_type) coredata.c_size,
			  (bfd_vma) (STACK_END_ADDR - coredata.c_size),
			  (file_ptr) coredata.c_stack))
d463 1
a463 1
  /* .reg section for GPRs and special registers. */
d465 2
a466 14
  			  SEC_HAS_CONTENTS,
			  (bfd_size_type) ((32 + NUM_OF_SPEC_REGS) * 4),
			  (bfd_vma) 0,
			  (file_ptr) ((char *) &coredata.SAVE_FIELD
				      - (char *) &coredata)))
    return NULL;

  /* .reg2 section for FPRs (floating point registers). */
  if (!make_bfd_asection (abfd, ".reg2",
  			  SEC_HAS_CONTENTS,
			  (bfd_size_type) 8 * 32,	/* 32 FPRs. */
			  (bfd_vma) 0,
			  (file_ptr) ((char *) &coredata.SAVE_FIELD.fpr[0]
				      - (char *) &coredata)))
d474 2
a475 4
  			  SEC_HAS_CONTENTS,
			  (bfd_size_type) LOADER_REGION_SIZE,
			  (bfd_vma) 0,
			  (file_ptr) coredata.LOADER_OFFSET_FIELD))
d483 1
a483 1
     to examine coredata.c_datasize below to find out the actual size of
d485 1
a485 1
  if (coredata.c_flag & FULL_CORE)
d489 1
a489 1
			      (bfd_size_type) coredata.CORE_DATA_SIZE_FIELD,
d491 2
a492 2
				CDATA_ADDR (coredata.CORE_DATA_SIZE_FIELD),
			      (file_ptr) coredata.c_stack + coredata.c_size))
d502 24
a525 3
    struct ld_info ldinfo;
    bfd_size_type ldinfo_size;
    file_ptr ldinfo_offset = (file_ptr) coredata.LOADER_OFFSET_FIELD;
d528 1
a528 1
    if (coredata.c_datasize)
d532 3
a534 4
				(bfd_size_type) coredata.c_datasize,
				(bfd_vma)
				  CDATA_ADDR (coredata.CORE_DATA_SIZE_FIELD),
				(file_ptr) coredata.c_data))
d539 5
a543 2
    ldinfo_size = (char *) &ldinfo.ldinfo_filename[0]
		  - (char *) &ldinfo.ldinfo_next;
d546 1
a546 1
	if (bfd_seek (abfd, ldinfo_offset, SEEK_SET) != 0)
d548 1
a548 1
	if (bfd_read (&ldinfo, ldinfo_size, 1, abfd) != ldinfo_size)
d550 2
a551 1
	if (ldinfo.ldinfo_core)
d553 11
a563 6
	    if (!make_bfd_asection (abfd, ".data",
				    SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
				    (bfd_size_type) ldinfo.ldinfo_datasize,
				    (bfd_vma) ldinfo.ldinfo_dataorg,
				    (file_ptr) ldinfo.ldinfo_core))
	      return NULL;
d565 8
a572 1
	if (ldinfo.ldinfo_next == 0)
d574 1
a574 1
	ldinfo_offset += ldinfo.ldinfo_next;
d578 1
a578 1
    if (coredata.c_vmregions)
d580 1
a580 1
	int i;
d582 1
a582 1
	if (bfd_seek (abfd, (file_ptr) coredata.c_vmm, SEEK_SET) != 0)
d585 1
a585 1
	for (i = 0; i < coredata.c_vmregions; i++)
d587 4
a590 1
	    struct vm_info vminfo;
d592 2
a593 1
	    if (bfd_read (&vminfo, sizeof (vminfo), 1, abfd) != sizeof (vminfo))
d595 8
a602 1
	    if (vminfo.vminfo_offset)
d604 3
a606 6
		if (!make_bfd_asection (abfd, ".vmdata",
					SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
					(bfd_size_type) vminfo.vminfo_size,
					(bfd_vma) vminfo.vminfo_addr,
					(file_ptr) vminfo.vminfo_offset))
		  return NULL;
d608 7
d620 1
a620 1
  return abfd->xvec;				/* this is garbage for now. */
d623 1
a624 2

/* return `true' if given core is from the given executable.. */
d630 1
a630 2
  struct CORE_DUMP coredata;
  struct ld_info ldinfo;
d636 1
d638 1
a638 2
  if (bfd_seek (core_bfd, 0, SEEK_SET) != 0
      || bfd_read (&coredata, sizeof coredata, 1, core_bfd) != sizeof coredata)
d641 9
a649 2
  if (bfd_seek (core_bfd, (long) coredata.LOADER_OFFSET_FIELD, SEEK_SET) != 0)
    return false;
d651 1
a651 2
  size = (char *) &ldinfo.ldinfo_filename[0] - (char *) &ldinfo.ldinfo_next;
  if (bfd_read (&ldinfo, size, 1, core_bfd) != size)
d685 1
a685 1
  
d707 4
a710 1
  char *com = core_hdr (abfd).CORE_COMM_FIELD;
d721 2
a722 59
  return core_hdr (abfd).c_signo;
}


boolean
rs6000coff_get_section_contents (abfd, section, location, offset, count)
     bfd *abfd;
     sec_ptr section;
     PTR location;
     file_ptr offset;
     bfd_size_type count;
{
    if (count == 0)
	return true;

    /* Reading a core file's sections will be slightly different. For the
       rest of them we can use bfd_generic_get_section_contents () I suppose. */
    /* Make sure this routine works for any bfd and any section. FIXMEmgo. */

    if (abfd->format == bfd_core && strcmp (section->name, ".reg") == 0) {

      struct mstsave mstatus;
      int    regoffset = (char*)&mstatus.gpr[0] - (char*)&mstatus;

      /* Assert that the only way this code will be executed is reading the
         whole section. */
      if (offset || count != (sizeof(mstatus.gpr) + (4 * NUM_OF_SPEC_REGS)))
        (*_bfd_error_handler)
	  (_("ERROR! in rs6000coff_get_section_contents()\n"));

      /* for `.reg' section, `filepos' is a pointer to the `mstsave' structure
         in the core file. */

      /* read GPR's into the location. */
      if ( bfd_seek(abfd, section->filepos + regoffset, SEEK_SET) == -1
	|| bfd_read(location, sizeof (mstatus.gpr), 1, abfd) != sizeof (mstatus.gpr))
	return (false); /* on error */

      /* increment location to the beginning of special registers in the section,
         reset register offset value to the beginning of first special register
	 in mstsave structure, and read special registers. */

      location = (PTR) ((char*)location + sizeof (mstatus.gpr));
      regoffset = (char*)&mstatus.iar - (char*)&mstatus;

      if ( bfd_seek(abfd, section->filepos + regoffset, SEEK_SET) == -1
	|| bfd_read(location, 4 * NUM_OF_SPEC_REGS, 1, abfd) != 
							4 * NUM_OF_SPEC_REGS)
	return (false); /* on error */
      
      /* increment location address, and read the special registers.. */
      /* FIXMEmgo */
      return (true);
    }

    /* else, use default bfd section content transfer. */
    else
      return _bfd_generic_get_section_contents 
      			(abfd, section, location, offset, count);
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d2 2
a3 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d42 7
a81 4
#define	core_datasec(bfd)	(((Rs6kCorData*)(bfd->tdata.any))->data_section)
#define	core_stacksec(bfd)	(((Rs6kCorData*)(bfd->tdata.any))->stack_section)
#define	core_regsec(bfd)	(((Rs6kCorData*)(bfd->tdata.any))->reg_section)
#define	core_reg2sec(bfd)	(((Rs6kCorData*)(bfd->tdata.any))->reg2_section)
d84 1
a84 1
   this seems to be the quickest easiet way to deal with it. 
d88 15
a102 1
   right now.  */
d108 3
d116 4
d124 1
a124 10
  struct core_dump hdr;		/* core file header */
  asection *data_section,
  	   *stack_section,
	   *reg_section,	/* section for GPRs and special registers. */
	   *reg2_section;	/* section for FPRs. */

  /* This tells us where everything is mapped (shared libraries and so on).
     GDB needs it.  */
  asection *ldinfo_section;
#define core_ldinfosec(bfd) (((Rs6kCorData *)(bfd->tdata.any))->ldinfo_section)
d127 26
d161 1
a161 2
  int fd;
  struct core_dump coredata;
d163 1
d166 2
a167 7
  /* Use bfd_xxx routines, rather than O/S primitives to read coredata. FIXMEmgo */
  fd = open (abfd->filename, O_RDONLY);
  if (fd < 0)
    {
      bfd_set_error (bfd_error_system_call);
      return NULL;
    }
d169 2
a170 1
  if (fstat (fd, &statbuf) < 0)
d172 2
a173 9
      bfd_set_error (bfd_error_system_call);
      close (fd);
      return NULL;
    }
  if (read (fd, &coredata, sizeof (struct core_dump))
      != sizeof (struct core_dump))
    {
      bfd_set_error (bfd_error_wrong_format);
      close (fd);
d177 1
a177 1
  if (close (fd) < 0)
d189 1
a189 2
     think to check "info files", I don't know), but we have no way of
     returning warnings (as opposed to errors).
d205 1
a205 2
  if ((coredata.c_flag & CORE_TRUNC)
      || !(coredata.c_flag & USTACK_VALID))
d213 1
a213 1
  if (!(coredata.c_flag & FULL_CORE)
d221 9
d238 6
d245 2
a246 2
  /* maybe you should alloc space for the whole core chunk over here!! FIXMEmgo */
  tmpptr = (char*)bfd_zalloc (abfd, sizeof (Rs6kCorData));
d256 5
a260 2
  if ((core_stacksec (abfd) = (asection*) bfd_zalloc (abfd, sizeof (asection)))
       == NULL)
a261 5
  core_stacksec (abfd)->name = ".stack";
  core_stacksec (abfd)->flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
  core_stacksec (abfd)->_raw_size = coredata.c_size;
  core_stacksec (abfd)->vma = STACK_END_ADDR - coredata.c_size;
  core_stacksec (abfd)->filepos = (int)coredata.c_stack;	/*???? */
d264 6
a269 2
  if ((core_regsec (abfd) = (asection*) bfd_zalloc (abfd, sizeof (asection)))
       == NULL)
a270 6
  core_regsec (abfd)->name = ".reg";
  core_regsec (abfd)->flags = SEC_HAS_CONTENTS;
  core_regsec (abfd)->_raw_size = (32 + NUM_OF_SPEC_REGS) * 4;
  core_regsec (abfd)->vma = 0;			/* not used?? */
  core_regsec (abfd)->filepos = 
  	(char*)&coredata.SAVE_FIELD - (char*)&coredata;
d273 6
a278 2
  if ((core_reg2sec (abfd) = (asection*) bfd_zalloc (abfd, sizeof (asection)))
       == NULL)
a279 6
  core_reg2sec (abfd)->name = ".reg2";
  core_reg2sec (abfd)->flags = SEC_HAS_CONTENTS;
  core_reg2sec (abfd)->_raw_size = 8 * 32;			/* 32 FPRs. */
  core_reg2sec (abfd)->vma = 0;			/* not used?? */
  core_reg2sec (abfd)->filepos = 
  	(char*)&coredata.SAVE_FIELD.fpr[0] - (char*)&coredata;
d281 2
a282 6
  if ((core_ldinfosec (abfd) = (asection*) bfd_zalloc (abfd, sizeof (asection)))
       == NULL)
    return NULL;
  core_ldinfosec (abfd)->name = ".ldinfo";
  core_ldinfosec (abfd)->flags = SEC_HAS_CONTENTS;
  /* To actually find out how long this section is in this particular
d285 6
a290 12
  core_ldinfosec (abfd)->_raw_size = 0x7fffffff;
  /* Not relevant for ldinfo section.  */
  core_ldinfosec (abfd)->vma = 0;
  core_ldinfosec (abfd)->filepos = (file_ptr) coredata.c_tab;

  /* set up section chain here. */
  abfd->section_count = 4;
  abfd->sections = core_stacksec (abfd);
  core_stacksec (abfd)->next = core_regsec(abfd);
  core_regsec (abfd)->next = core_reg2sec (abfd);
  core_reg2sec (abfd)->next = core_ldinfosec (abfd);
  core_ldinfosec (abfd)->next = NULL;
d292 7
d301 6
a306 2
      asection *sec = (asection *) bfd_zalloc (abfd, sizeof (asection));
      if (sec == NULL)
a307 9
      sec->name = ".data";
      sec->flags = SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS;
      sec->_raw_size = coredata.CORE_DATA_SIZE_FIELD;
      sec->vma = CDATA_ADDR (coredata.CORE_DATA_SIZE_FIELD);
      sec->filepos = (int)coredata.c_stack + coredata.c_size;

      sec->next = abfd->sections;
      abfd->sections = sec;
      ++abfd->section_count;
d309 73
d394 1
a394 1
  struct core_dump coredata;
d396 1
a396 1
  int size;
d406 1
a406 1
  if (bfd_seek (core_bfd, (long) coredata.c_tab, SEEK_SET) != 0)
d487 1
a487 1
     int count;
d505 1
a505 1
	  ("ERROR! in rs6000coff_get_section_contents()\n");
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d2 1
a2 1
   Copyright (C) 1990, 1991, 1995 Free Software Foundation, Inc.
a290 1
  FILE *fd;
d293 3
a295 1
  char pathname [1024];
d297 1
d299 42
a340 11
  /* Use bfd_xxx routines, rather than O/S primitives, do error checking!!
  								FIXMEmgo */
  /* Actually should be able to use bfd_get_section_contents now that
     we have a .ldinfo section.  */
  fd = fopen (core_bfd->filename, FOPEN_RB);

  fread (&coredata, sizeof (struct core_dump), 1, fd);
  fseek (fd, (long)coredata.c_tab, 0);
  fread (&ldinfo, (char*)&ldinfo.ldinfo_filename[0] - (char*)&ldinfo.ldinfo_next,
	 1, fd);
  fscanf (fd, "%s", pathname);
d342 1
a342 1
  str1 = strrchr (pathname, '/');
d346 9
a354 2
  str1 = str1 ? str1+1 : &pathname[0];
  str2 = str2 ? str2+1 : exec_bfd->filename;
d356 1
a356 2
  fclose (fd);
  return strcmp (str1, str2) == 0;
@


1.1
log
@Initial revision
@
text
@d204 1
a204 4
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }
d213 1
a213 3
       == NULL)  {
    bfd_set_error (bfd_error_no_memory);
    /* bfd_release (abfd, ???? ) */
a214 1
  }
d223 1
a223 3
       == NULL)  {
    bfd_set_error (bfd_error_no_memory);
    /* bfd_release (abfd, ???? ) */
a224 1
  }
d234 1
a234 3
       == NULL)  {
    bfd_set_error (bfd_error_no_memory);
    /* bfd_release (abfd, ???? ) */
a235 1
  }
d244 1
a244 3
       == NULL)  {
    bfd_set_error (bfd_error_no_memory);
    /* bfd_release (abfd, ???? ) */
a245 1
  }
d268 1
a268 4
	{
	  bfd_set_error (bfd_error_no_memory);
	  return NULL;
	}
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d204 4
a207 1
    return NULL;
d216 3
a218 1
       == NULL)
d220 1
d229 3
a231 1
       == NULL)
d233 1
d243 3
a245 1
       == NULL)
d247 1
d256 3
a258 1
       == NULL)
d260 1
d283 4
a286 1
	return NULL;
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d291 1
d294 1
a294 3
  int size;
  char *path, *s;
  size_t alloc;
a295 1
  boolean ret;
d297 11
a307 42
  if (bfd_seek (core_bfd, 0, SEEK_SET) != 0
      || bfd_read (&coredata, sizeof coredata, 1, core_bfd) != sizeof coredata)
    return false;

  if (bfd_seek (core_bfd, (long) coredata.c_tab, SEEK_SET) != 0)
    return false;

  size = (char *) &ldinfo.ldinfo_filename[0] - (char *) &ldinfo.ldinfo_next;
  if (bfd_read (&ldinfo, size, 1, core_bfd) != size)
    return false;

  alloc = 100;
  path = bfd_malloc (alloc);
  if (path == NULL)
    return false;
  s = path;

  while (1)
    {
      if (bfd_read (s, 1, 1, core_bfd) != 1)
	{
	  free (path);
	  return false;
	}
      if (*s == '\0')
	break;
      ++s;
      if (s == path + alloc)
	{
	  char *n;

	  alloc *= 2;
	  n = bfd_realloc (path, alloc);
	  if (n == NULL)
	    {
	      free (path);
	      return false;
	    }
	  s = n + (path - s);
	  path = n;
	}
    }
d309 1
a309 1
  str1 = strrchr (path, '/');
d313 2
a314 9
  str1 = str1 != NULL ? str1 + 1 : path;
  str2 = str2 != NULL ? str2 + 1 : exec_bfd->filename;

  if (strcmp (str1, str2) == 0)
    ret = true;
  else
    ret = false;

  free (path);
d316 2
a317 1
  return ret;
@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1990, 91, 92, 93, 94, 95, 96, 97, 98, 2000
   Free Software Foundation, Inc.
a40 7
/* The AIX 4.1 kernel is obviously compiled with -D_LONG_LONG, so
   we have to define _LONG_LONG for older versions of gcc to get the
   proper alignments in the user structure.  */
#if defined(_AIX41) && !defined(_LONG_LONG)
#define _LONG_LONG
#endif

d74 4
d80 1
a80 1
   this seems to be the quickest/easiest way to deal with it. 
d84 1
a84 15
   right now.
   
   AIX 4.3 defines an entirely new structure (core_dumpx).  Yet the
   basic logic stays the same and we can still use our macro
   redefinition mechanism to effect the necessary changes.  */

#ifdef AIX_CORE_DUMPX_CORE
#define CORE_DATA_SIZE_FIELD c_dataorg
#define CORE_COMM_FIELD c_u.U_proc.pi_comm
#define SAVE_FIELD c_flt.hctx.r32
#define STACK_END_ADDR coredata.c_stackorg + coredata.c_size
#define LOADER_OFFSET_FIELD c_loader
#define LOADER_REGION_SIZE coredata.c_lsize
#define CORE_DUMP core_dumpx
#else
a89 3
#define LOADER_OFFSET_FIELD c_tab
#define LOADER_REGION_SIZE 0x7ffffff
#define CORE_DUMP core_dump
a94 4
#define LOADER_OFFSET_FIELD c_tab
#define LOADER_REGION_SIZE 0x7ffffff
#define CORE_DUMP core_dump
#endif
d99 10
a108 1
  struct CORE_DUMP hdr;		/* core file header */
a110 26
static asection *make_bfd_asection PARAMS ((bfd *, CONST char *, flagword,
					    bfd_size_type, bfd_vma, file_ptr));

static asection *
make_bfd_asection (abfd, name, flags, _raw_size, vma, filepos)
     bfd *abfd;
     CONST char *name;
     flagword flags;
     bfd_size_type _raw_size;
     bfd_vma vma;
     file_ptr filepos;
{
  asection *asect;

  asect = bfd_make_section_anyway (abfd, name);
  if (!asect)
    return NULL;

  asect->flags = flags;
  asect->_raw_size = _raw_size;
  asect->vma = vma;
  asect->filepos = filepos;
  asect->alignment_power = 8;

  return asect;
}
d119 2
a120 1
  struct CORE_DUMP coredata;
a121 1
  bfd_size_type nread;
d124 7
a130 2
  if (bfd_seek (abfd, 0, SEEK_SET) != 0)
    return NULL;
d132 1
a132 2
  nread = bfd_read (&coredata, 1, sizeof (struct CORE_DUMP), abfd);
  if (nread != sizeof (struct CORE_DUMP))
d134 9
a142 2
      if (bfd_get_error () != bfd_error_system_call)
	bfd_set_error (bfd_error_wrong_format);
d146 1
a146 1
  if (bfd_stat (abfd, &statbuf) < 0)
d158 2
a159 1
     think to check "info files", I don't know).
d175 2
a176 1
  if (!(coredata.c_flag & USTACK_VALID))
d184 1
a184 1
  if (!(coredata.c_flag & (FULL_CORE | CORE_TRUNC))
a191 9
#ifdef AIX_CORE_DUMPX_CORE
  /* For the core_dumpx format, make sure c_entries == 0  If it does
     not, the core file uses the old format */
  if (coredata.c_entries != 0)
    {
      bfd_set_error (bfd_error_wrong_format);
      return NULL;
    }
#else
a199 6
#endif

  /* Issue warning if the core file was truncated during writing.  */
  if (coredata.c_flag & CORE_TRUNC)
    (*_bfd_error_handler) (_("%s: warning core file truncated"),
			   bfd_get_filename (abfd));
d201 2
a202 2
  /* Allocate core file header.  */
  tmpptr = (char*) bfd_zalloc (abfd, sizeof (Rs6kCorData));
d212 2
a213 5
  if (!make_bfd_asection (abfd, ".stack",
  			  SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
			  (bfd_size_type) coredata.c_size,
			  (bfd_vma) (STACK_END_ADDR - coredata.c_size),
			  (file_ptr) coredata.c_stack))
d215 5
d222 2
a223 6
  if (!make_bfd_asection (abfd, ".reg",
  			  SEC_HAS_CONTENTS,
			  (bfd_size_type) ((32 + NUM_OF_SPEC_REGS) * 4),
			  (bfd_vma) 0,
			  (file_ptr) ((char *) &coredata.SAVE_FIELD
				      - (char *) &coredata)))
d225 6
d233 2
a234 6
  if (!make_bfd_asection (abfd, ".reg2",
  			  SEC_HAS_CONTENTS,
			  (bfd_size_type) 8 * 32,	/* 32 FPRs. */
			  (bfd_vma) 0,
			  (file_ptr) ((char *) &coredata.SAVE_FIELD.fpr[0]
				      - (char *) &coredata)))
d236 6
d243 6
a248 2
  /* .ldinfo section.
     To actually find out how long this section is in this particular
d251 12
a262 6
  if (!make_bfd_asection (abfd, ".ldinfo",
  			  SEC_HAS_CONTENTS,
			  (bfd_size_type) LOADER_REGION_SIZE,
			  (bfd_vma) 0,
			  (file_ptr) coredata.LOADER_OFFSET_FIELD))
    return NULL;
a263 7
#ifndef CORE_VERSION_1
  /* .data section if present.
     AIX 3 dumps the complete data section and sets FULL_CORE if the
     ulimit is large enough, otherwise the data section is omitted.
     AIX 4 sets FULL_CORE even if the core file is truncated, we have
     to examine coredata.c_datasize below to find out the actual size of
     the .data section.  */
d266 2
a267 6
      if (!make_bfd_asection (abfd, ".data",
			      SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
			      (bfd_size_type) coredata.CORE_DATA_SIZE_FIELD,
			      (bfd_vma)
				CDATA_ADDR (coredata.CORE_DATA_SIZE_FIELD),
			      (file_ptr) coredata.c_stack + coredata.c_size))
d269 9
a278 73
#endif

#ifdef CORE_VERSION_1
  /* AIX 4 adds data sections from loaded objects to the core file,
     which can be found by examining ldinfo, and anonymously mmapped
     regions.  */
  {
    struct ld_info ldinfo;
    bfd_size_type ldinfo_size;
    file_ptr ldinfo_offset = (file_ptr) coredata.LOADER_OFFSET_FIELD;

    /* .data section from executable.  */
    if (coredata.c_datasize)
      {
	if (!make_bfd_asection (abfd, ".data",
				SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
				(bfd_size_type) coredata.c_datasize,
				(bfd_vma)
				  CDATA_ADDR (coredata.CORE_DATA_SIZE_FIELD),
				(file_ptr) coredata.c_data))
	  return NULL;
      }

    /* .data sections from loaded objects.  */
    ldinfo_size = (char *) &ldinfo.ldinfo_filename[0]
		  - (char *) &ldinfo.ldinfo_next;
    while (1)
      {
	if (bfd_seek (abfd, ldinfo_offset, SEEK_SET) != 0)
	  return NULL;
	if (bfd_read (&ldinfo, ldinfo_size, 1, abfd) != ldinfo_size)
	  return NULL;
	if (ldinfo.ldinfo_core)
	  {
	    if (!make_bfd_asection (abfd, ".data",
				    SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
				    (bfd_size_type) ldinfo.ldinfo_datasize,
				    (bfd_vma) ldinfo.ldinfo_dataorg,
				    (file_ptr) ldinfo.ldinfo_core))
	      return NULL;
	  }
	if (ldinfo.ldinfo_next == 0)
	  break;
	ldinfo_offset += ldinfo.ldinfo_next;
      }

    /* .vmdata sections from anonymously mmapped regions.  */
    if (coredata.c_vmregions)
      {
	int i;

	if (bfd_seek (abfd, (file_ptr) coredata.c_vmm, SEEK_SET) != 0)
	  return NULL;

	for (i = 0; i < coredata.c_vmregions; i++)
	  {
	    struct vm_info vminfo;

	    if (bfd_read (&vminfo, sizeof (vminfo), 1, abfd) != sizeof (vminfo))
	      return NULL;
	    if (vminfo.vminfo_offset)
	      {
		if (!make_bfd_asection (abfd, ".vmdata",
					SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
					(bfd_size_type) vminfo.vminfo_size,
					(bfd_vma) vminfo.vminfo_addr,
					(file_ptr) vminfo.vminfo_offset))
		  return NULL;
	      }
	  }
      }
  }
#endif
d291 1
a291 1
  struct CORE_DUMP coredata;
d293 1
a293 1
  bfd_size_type size;
d303 1
a303 1
  if (bfd_seek (core_bfd, (long) coredata.LOADER_OFFSET_FIELD, SEEK_SET) != 0)
d384 1
a384 1
     bfd_size_type count;
d402 1
a402 1
	  (_("ERROR! in rs6000coff_get_section_contents()\n"));
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000,
   2001
d8 1
a8 1
   Written by Metin G. Ozisik, Mimi Ph\373\364ng-Th\345o V\365,
d33 2
d36 2
a37 1
   system include files that conflict with coff/rs6000.h.  */
d65 1
d67 1
a67 1
/*	Support for core file stuff..					    */
a70 2
#define __LDINFO_PTRACE32__	/* for __ld_info32 */
#define __LDINFO_PTRACE64__	/* for __ld_info64 */
a72 94
#include <sys/systemcfg.h>

#define	core_hdr(bfd)		((CoreHdr *) bfd->tdata.any)

/* AIX 4.1 changed the names and locations of a few items in the core file.
   AIX 4.3 defined an entirely new structure, core_dumpx, but kept support for
   the previous 4.1 structure, core_dump.

   AIX_CORE_DUMPX_CORE is defined (by configure) on AIX 4.3+, and
   CORE_VERSION_1 is defined (by AIX core.h) as 2 on AIX 4.3+ and as 1 on AIX
   4.1 and 4.2.  AIX pre-4.1 (aka 3.x) either doesn't define CORE_VERSION_1
   or else defines it as 0.  */

#if defined(CORE_VERSION_1) && !CORE_VERSION_1
# undef CORE_VERSION_1
#endif

/* The following union and macros allow this module to compile on all AIX
   versions and to handle both core_dumpx and core_dump on 4.3+.  CNEW_*()
   and COLD_*() macros respectively retrieve core_dumpx and core_dump
   values.  */

/* Union of 32-bit and 64-bit versions of ld_info.  */

typedef union {
#ifdef __ld_info32
  struct __ld_info32 l32;
  struct __ld_info64 l64;
#else
  struct ld_info l32;
  struct ld_info l64;
#endif
} LdInfo;

/* Union of old and new core dump structures.  */

typedef union {
#ifdef AIX_CORE_DUMPX_CORE
  struct core_dumpx new;	/* new AIX 4.3+ core dump */
#else
  struct core_dump new;		/* for simpler coding */
#endif
  struct core_dump old;		/* old AIX 4.2- core dump, still used on
				   4.3+ with appropriate SMIT config */
} CoreHdr;

/* Union of old and new vm_info structures.  */

#ifdef CORE_VERSION_1
typedef union {
#ifdef AIX_CORE_DUMPX_CORE
  struct vm_infox new;
#else
  struct vm_info new;
#endif
  struct vm_info old;
} VmInfo;
#endif

/* Return whether CoreHdr C is in new or old format.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CORE_NEW(c)	(!(c).old.c_entries)
#else
# define CORE_NEW(c)	0
#endif

/* Return the c_stackorg field from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_STACKORG(c)	(c).c_stackorg
#else
# define CNEW_STACKORG(c)	0
#endif

/* Return the offset to the loader region from struct core_dump C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_LOADER(c)	(c).c_loader
#else
# define CNEW_LOADER(c)	0
#endif

/* Return the offset to the loader region from struct core_dump C.  */

#define COLD_LOADER(c)	(c).c_tab

/* Return the c_lsize field from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_LSIZE(c)	(c).c_lsize
#else
# define CNEW_LSIZE(c)	0
#endif
a73 1
/* Return the c_dataorg field from struct core_dumpx C.  */
d75 27
a101 42
#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_DATAORG(c)	(c).c_dataorg
#else
# define CNEW_DATAORG(c)	0
#endif

/* Return the c_datasize field from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_DATASIZE(c)	(c).c_datasize
#else
# define CNEW_DATASIZE(c)	0
#endif

/* Return the c_impl field from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_IMPL(c)	(c).c_impl
#else
# define CNEW_IMPL(c)	0
#endif

/* Return the command string from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_COMM(c)	(c).c_u.U_proc.pi_comm
#else
# define CNEW_COMM(c)	0
#endif

/* Return the command string from struct core_dump C.  */

#ifdef CORE_VERSION_1
# define COLD_COMM(c)	(c).c_u.U_comm
#else
# define COLD_COMM(c)	(c).c_u.u_comm
#endif

/* Return the struct __context64 pointer from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_CONTEXT64(c)	(c).c_flt.hctx.r64
a102 13
# define CNEW_CONTEXT64(c)	c
#endif

/* Return the struct mstsave pointer from struct core_dumpx C.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_MSTSAVE(c)	(c).c_flt.hctx.r32
#else
# define CNEW_MSTSAVE(c)	c
#endif

/* Return the struct mstsave pointer from struct core_dump C.  */

d104 15
a118 3
# define COLD_MSTSAVE(c)	(c).c_mst
#else
# define COLD_MSTSAVE(c)	(c).c_u.u_save
a119 16

/* Return whether struct core_dumpx is from a 64-bit process.  */

#ifdef AIX_CORE_DUMPX_CORE
# define CNEW_PROC64(c)		IS_PROC64(&(c).c_u.U_proc)
#else
# define CNEW_PROC64(c)		0
#endif

/* Magic end-of-stack addresses for old core dumps.  This is _very_ fragile,
   but I don't see any easy way to get that info right now.  */

#ifdef CORE_VERSION_1
# define COLD_STACKEND	0x2ff23000
#else
# define COLD_STACKEND	0x2ff80000
d122 4
a125 4
/* Size of the leading portion that old and new core dump structures have in
   common.  */
#define CORE_COMMONSZ	((int) &((struct core_dump *) 0)->c_entries \
			 + sizeof (((struct core_dump *) 0)->c_entries))
d127 2
a128 21
/* Try to read into CORE the header from the core file associated with ABFD.
   Return success.  */

static boolean
read_hdr (bfd *abfd, CoreHdr *core)
{
  bfd_size_type size;

  if (bfd_seek (abfd, 0, SEEK_SET) != 0)
    return false;

  /* Read the leading portion that old and new core dump structures have in
     common.  */
  if (bfd_read (core, CORE_COMMONSZ, 1, abfd) != CORE_COMMONSZ)
    return false;

  /* Read the trailing portion of the structure.  */
  size = CORE_NEW (*core) ? sizeof (core->new) : sizeof (core->old)
    - CORE_COMMONSZ;
  return bfd_read ((char *) core + CORE_COMMONSZ, size, 1, abfd) == size;
}
d155 1
a155 1
   magic number or anything like, in rs6000coff.  */
d161 1
a161 1
  CoreHdr core;
d163 1
a163 1
  bfd_size_type size;
d166 2
a167 7
  /* Values from new and old core structures.  */
  int c_flag;
  file_ptr c_stack, c_regoff, c_loader;
  bfd_size_type c_size, c_regsize, c_lsize;
  bfd_vma c_stackend;
  void *c_regptr;
  int proc64;
d169 2
a170 1
  if (!read_hdr (abfd, &core))
a176 39
  /* Copy fields from new or old core structure.  */
  if (CORE_NEW (core))
    {
      c_flag = core.new.c_flag;
      c_stack = (file_ptr) core.new.c_stack;
      c_size = core.new.c_size;
      c_stackend = CNEW_STACKORG (core.new) + c_size;
      c_lsize = CNEW_LSIZE (core.new);
      c_loader = CNEW_LOADER (core.new);
      proc64 = CNEW_PROC64 (core.new);
    }
  else
    {
      c_flag = core.old.c_flag;
      c_stack = (file_ptr) core.old.c_stack;
      c_size = core.old.c_size;
      c_stackend = COLD_STACKEND;
      c_lsize = 0x7ffffff;
      c_loader = (file_ptr) COLD_LOADER (core.old);
      proc64 = 0;
    }

  if (proc64)
    {
      c_regsize = sizeof (CNEW_CONTEXT64 (core.new));
      c_regptr = &CNEW_CONTEXT64 (core.new);
    }
  else if (CORE_NEW (core))
    {
      c_regsize = sizeof (CNEW_MSTSAVE (core.new));
      c_regptr = &CNEW_MSTSAVE (core.new);
    }
  else
    {
      c_regsize = sizeof (COLD_MSTSAVE (core.old));
      c_regptr = &COLD_MSTSAVE (core.old);
    }
  c_regoff = (char *) c_regptr - (char *) &core;

d197 3
a199 3

  if (!(c_flag & UBLOCK_VALID)
      || !(c_flag & LE_VALID))
d205 1
a205 1
  if (!(c_flag & USTACK_VALID))
d213 2
a214 1
  if (!(c_flag & (FULL_CORE | CORE_TRUNC)))
d217 2
a218 5
      if (c_stack + (file_ptr) c_size != statbuf.st_size)
	{
	  bfd_set_error (bfd_error_wrong_format);
	  return NULL;
	}
d221 9
d231 3
a233 3
  if (!CORE_NEW (core) && (c_loader < (file_ptr) sizeof core.old ||
			   c_loader >= statbuf.st_size ||
			   c_loader >= c_stack))
d238 1
d241 1
a241 1
  if (c_flag & CORE_TRUNC)
d246 1
a246 2
  size = CORE_NEW (core) ? sizeof (core.new) : sizeof (core.old);
  tmpptr = (char *) bfd_zalloc (abfd, size);
d249 2
d253 1
a253 8
  memcpy (tmpptr, &core, size);
  set_tdata (abfd, tmpptr);

  /* Set architecture.  */
  if (CORE_NEW (core))
    {
      enum bfd_architecture arch;
      unsigned long mach;
d255 1
a255 17
      switch (CNEW_IMPL (core.new))
	{
	case POWER_RS1:
	case POWER_RSC:
	case POWER_RS2:
	  arch = bfd_arch_rs6000;
	  mach = bfd_mach_rs6k;
	  break;
	default:
	  arch = bfd_arch_powerpc;
	  mach = bfd_mach_ppc;
	  break;
	}
      bfd_default_set_arch_mach (abfd, arch, mach);
    }

  /* .stack section.  */
d257 4
a260 2
			  SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
			  c_size, c_stackend - c_size, c_stack))
d263 1
a263 1
  /* .reg section for all registers.  */
d265 14
a278 2
			  SEC_HAS_CONTENTS,
			  c_regsize, (bfd_vma) 0, c_regoff))
d286 4
a289 2
			  SEC_HAS_CONTENTS,
			  c_lsize, (bfd_vma) 0, c_loader))
d297 1
a297 1
     to examine core.c_datasize below to find out the actual size of
d299 1
a299 1
  if (c_flag & FULL_CORE)
d303 1
a303 1
			      (bfd_size_type) core.old.c_u.u_dsize,
d305 2
a306 2
				CDATA_ADDR (core.old.c_u.u_dsize),
			      c_stack + c_size))
d316 3
a318 24
    LdInfo ldinfo;
    bfd_size_type ldi_datasize;
    file_ptr ldi_core;
    uint ldi_next;
    bfd_vma ldi_dataorg;

    /* Fields from new and old core structures.  */
    bfd_size_type c_datasize, c_vmregions;
    file_ptr c_data, c_vmm;

    if (CORE_NEW (core))
      {
	c_datasize = CNEW_DATASIZE (core.new);
	c_data = (file_ptr) core.new.c_data;
	c_vmregions = core.new.c_vmregions;
	c_vmm = (file_ptr) core.new.c_vmm;
      }
    else
      {
	c_datasize = core.old.c_datasize;
	c_data = (file_ptr) core.old.c_data;
	c_vmregions = core.old.c_vmregions;
	c_vmm = (file_ptr) core.old.c_vmm;
      }
d321 1
a321 1
    if (c_datasize)
d325 4
a328 3
				c_datasize,
				(bfd_vma) CDATA_ADDR (c_datasize),
				c_data))
d333 2
a334 5
    if (proc64)
      size = (int) ((LdInfo *) 0)->l64.ldinfo_filename;
    else
      size = (int) ((LdInfo *) 0)->l32.ldinfo_filename;

d337 1
a337 1
	if (bfd_seek (abfd, c_loader, SEEK_SET) != 0)
d339 1
a339 1
	if (bfd_read (&ldinfo, size, 1, abfd) != size)
d341 1
a341 2

	if (proc64)
d343 6
a348 11
	    ldi_core = ldinfo.l64.ldinfo_core;
	    ldi_datasize = ldinfo.l64.ldinfo_datasize;
	    ldi_dataorg = (bfd_vma) ldinfo.l64.ldinfo_dataorg;
	    ldi_next = ldinfo.l64.ldinfo_next;
	  }
	else
	  {
	    ldi_core = ldinfo.l32.ldinfo_core;
	    ldi_datasize = ldinfo.l32.ldinfo_datasize;
	    ldi_dataorg = (bfd_vma) (long) ldinfo.l32.ldinfo_dataorg;
	    ldi_next = ldinfo.l32.ldinfo_next;
d350 1
a350 8

	if (ldi_core)
	  if (!make_bfd_asection (abfd, ".data",
				  SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
				  ldi_datasize, ldi_dataorg, ldi_core))
	    return NULL;

	if (ldi_next == 0)
d352 1
a352 1
	c_loader += ldi_next;
d356 1
a356 1
    if (c_vmregions)
d358 1
a358 1
	bfd_size_type i;
d360 1
a360 1
	if (bfd_seek (abfd, c_vmm, SEEK_SET) != 0)
d363 1
a363 1
	for (i = 0; i < c_vmregions; i++)
d365 1
a365 4
	    VmInfo vminfo;
	    bfd_size_type vminfo_size;
	    file_ptr vminfo_offset;
	    bfd_vma vminfo_addr;
d367 1
a367 2
	    size = CORE_NEW (core) ? sizeof (vminfo.new) : sizeof (vminfo.old);
	    if (bfd_read (&vminfo, size, 1, abfd) != size)
d369 1
a369 8

	    if (CORE_NEW (core))
	      {
		vminfo_addr = (bfd_vma) vminfo.new.vminfo_addr;
		vminfo_size = vminfo.new.vminfo_size;
		vminfo_offset = vminfo.new.vminfo_offset;
	      }
	    else
d371 6
a376 3
		vminfo_addr = (bfd_vma) (long) vminfo.old.vminfo_addr;
		vminfo_size = vminfo.old.vminfo_size;
		vminfo_offset = vminfo.old.vminfo_offset;
a377 7

	    if (vminfo_offset)
	      if (!make_bfd_asection (abfd, ".vmdata",
				      SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS,
				      vminfo_size, vminfo_addr,
				      vminfo_offset))
		return NULL;
d383 1
a383 1
  return abfd->xvec;		/* This is garbage for now.  */
a385 1
/* Return `true' if given core is from the given executable.  */
d387 2
d394 2
a395 1
  CoreHdr core;
a400 1
  file_ptr c_loader;
d402 2
a403 1
  if (!read_hdr (core_bfd, &core))
d406 2
a407 9
  if (CORE_NEW (core))
    c_loader = CNEW_LOADER (core.new);
  else
    c_loader = (file_ptr) COLD_LOADER (core.old);

  if (CORE_NEW (core) && CNEW_PROC64 (core.new))
    size = (int) ((LdInfo *) 0)->l64.ldinfo_filename;
  else
    size = (int) ((LdInfo *) 0)->l32.ldinfo_filename;
d409 2
a410 1
  if (bfd_seek (core_bfd, c_loader + size, SEEK_SET) != 0)
d444 1
a444 1

d466 1
a466 4
  CoreHdr *core = core_hdr (abfd);
  char *com = CORE_NEW (*core) ?
    CNEW_COMM (core->new) : COLD_COMM (core->old);

d477 59
a535 2
  CoreHdr *core = core_hdr (abfd);
  return CORE_NEW (*core) ? core->new.c_signo : core->old.c_signo;
@


1.1.1.6
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d3 1
a3 1
   2001, 2002
d14 1
a14 1
   This file is part of BFD, the Binary File Descriptor library.
d16 13
a28 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d185 1
a185 1
#if defined (HAVE_ST_C_IMPL) || defined (AIX_5_CORE)
d256 1
a256 1
static bfd_boolean
d261 2
a262 2
  if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)
    return FALSE;
d266 2
a267 3
  size = CORE_COMMONSZ;
  if (bfd_bread (core, size, abfd) != size)
    return FALSE;
d270 3
a272 6
  if (CORE_NEW (*core))
    size = sizeof (core->new);
  else
    size = sizeof (core->old);
  size -= CORE_COMMONSZ;
  return bfd_bread ((char *) core + CORE_COMMONSZ, size, abfd) == size;
d278 1
a278 1
     const char *name;
d427 1
a427 1
  tmpptr = (char *) bfd_zalloc (abfd, (bfd_size_type) size);
d461 1
a461 1
    goto fail;
d467 1
a467 1
    goto fail;
d476 1
a476 1
    goto fail;
d493 1
a493 1
	goto fail;
d535 1
a535 1
	  goto fail;
d547 3
a549 3
	  goto fail;
	if (bfd_bread (&ldinfo, size, abfd) != size)
	  goto fail;
d570 1
a570 1
	    goto fail;
d583 1
a583 1
	  goto fail;
d593 2
a594 2
	    if (bfd_bread (&vminfo, size, abfd) != size)
	      goto fail;
d614 1
a614 1
		goto fail;
a620 6

 fail:
  bfd_release (abfd, abfd->tdata.any);
  abfd->tdata.any = NULL;
  bfd_section_list_clear (abfd);
  return NULL;
d623 1
a623 1
/* Return `TRUE' if given core is from the given executable.  */
d625 1
a625 1
bfd_boolean
d635 1
a635 1
  bfd_boolean ret;
d639 1
a639 1
    return FALSE;
d652 1
a652 1
    return FALSE;
d655 1
a655 1
  path = bfd_malloc ((bfd_size_type) alloc);
d657 1
a657 1
    return FALSE;
d662 1
a662 1
      if (bfd_bread (s, (bfd_size_type) 1, core_bfd) != 1)
d665 1
a665 1
	  return FALSE;
d675 1
a675 1
	  n = bfd_realloc (path, (bfd_size_type) alloc);
d679 1
a679 1
	      return FALSE;
d694 1
a694 1
    ret = TRUE;
d696 1
a696 1
    ret = FALSE;
@


