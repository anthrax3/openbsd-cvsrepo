head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.52
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.48
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.44
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.46
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.38
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.42
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.40
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.36
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.34
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.32
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.30
	OPENBSD_5_0:1.5.0.28
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.26
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.24
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.20
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.22
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	BINUTILS-2_10:1.1.1.2
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2004.11.02.20.45.05;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.17.21.54.21;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.13.17.07.29;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.12.19.11.10;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.39;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.39;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.45.33;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.22.17;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.13;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.22.18;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* BFD library support routines for the H8/500 architecture.
   Copyright 1993, 1995, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
   Hacked by Steve Chamberlain of Cygnus Support.

This file is part of BFD, the Binary File Descriptor library.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "libbfd.h"

static bfd_boolean scan_mach
  PARAMS ((const struct bfd_arch_info *, const char *));

#if 0
/*
Relocations for the Z8K

*/
static bfd_reloc_status_type
howto16_callback (abfd, reloc_entry, symbol_in, data,
		  ignore_input_section, ignore_bfd)
     bfd *abfd;
     arelent *reloc_entry;
     struct bfd_symbol *symbol_in;
     PTR data;
     asection *ignore_input_section;
     bfd *ignore_bfd;
{
  long relocation = 0;
  bfd_vma addr = reloc_entry->address;
  long x = bfd_get_16 (abfd, (bfd_byte *)data + addr);

  HOWTO_PREPARE(relocation, symbol_in);

  x = (x + relocation + reloc_entry->addend);

  bfd_put_16 (abfd, x, (bfd_byte *)data + addr);
  return bfd_reloc_ok;
}

static bfd_reloc_status_type
howto8_callback (abfd, reloc_entry, symbol_in, data,
		 ignore_input_section, ignore_bfd)
     bfd *abfd;
     arelent *reloc_entry;
     struct bfd_symbol *symbol_in;
     PTR data;
     asection *ignore_input_section;
     bfd *ignore_bfd;
{
  long relocation = 0;
  bfd_vma addr = reloc_entry->address;
  long x = bfd_get_8 (abfd, (bfd_byte *)data + addr);

  HOWTO_PREPARE(relocation, symbol_in);

  x = (x + relocation + reloc_entry->addend);

  bfd_put_8 (abfd, x, (bfd_byte *)data + addr);
  return bfd_reloc_ok;
}

static bfd_reloc_status_type
howto8_FFnn_callback (abfd, reloc_entry, symbol_in, data,
		      ignore_input_section, ignore_bfd)
     bfd *abfd;
     arelent *reloc_entry;
     struct bfd_symbol *symbol_in;
     PTR data;
     asection *ignore_input_section;
     bfd *ignore_bfd;
{
  long relocation = 0;
  bfd_vma addr = reloc_entry->address;

  long x = bfd_get_8 (abfd, (bfd_byte *)data + addr);
  abort ();
  HOWTO_PREPARE(relocation, symbol_in);

  x = (x + relocation + reloc_entry->addend);

  bfd_put_8 (abfd, x, (bfd_byte *)data + addr);
  return bfd_reloc_ok;
}

static bfd_reloc_status_type
howto8_pcrel_callback (abfd, reloc_entry, symbol_in, data,
		       ignore_input_section, ignore_bfd)
     bfd *abfd;
     arelent *reloc_entry;
     struct bfd_symbol *symbol_in;
     PTR data;
     asection *ignore_input_section;
     bfd *ignore_bfd;
{
  long relocation = 0;
  bfd_vma addr = reloc_entry->address;
  long x = bfd_get_8 (abfd, (bfd_byte *)data + addr);
  abort ();
  HOWTO_PREPARE(relocation, symbol_in);

  x = (x + relocation + reloc_entry->addend);

  bfd_put_8 (abfd, x, (bfd_byte *)data + addr);
  return bfd_reloc_ok;
}

static reloc_howto_type howto_16
  = NEWHOWTO (howto16_callback, "abs16", 1, FALSE, FALSE);
static reloc_howto_type howto_8
  = NEWHOWTO (howto8_callback, "abs8", 0, FALSE, FALSE);

static reloc_howto_type howto_8_FFnn
  = NEWHOWTO (howto8_FFnn_callback, "ff00+abs8", 0, FALSE, FALSE);

static reloc_howto_type howto_8_pcrel
  = NEWHOWTO (howto8_pcrel_callback, "pcrel8", 0, FALSE, TRUE);

static reloc_howto_type *
local_bfd_reloc_type_lookup (arch, code)
     const struct bfd_arch_info *arch;
     bfd_reloc_code_real_type code;
{
  switch (code) {
  case BFD_RELOC_16:
    return &howto_16;
  case BFD_RELOC_8_FFnn:
    return &howto_8_FFnn;
  case BFD_RELOC_8:
    return &howto_8;
  case BFD_RELOC_8_PCREL:
    return &howto_8_pcrel;
  }
  return (reloc_howto_type *)NULL;
}
#endif

static bfd_boolean
scan_mach (info, string)
     const struct bfd_arch_info *info ATTRIBUTE_UNUSED;
     const char *string;
{
  if (strcmp (string,"h8/500") == 0)
    return TRUE;
  if (strcmp (string,"H8/500") == 0)
    return TRUE;
  if (strcmp (string,"h8500") == 0)
    return TRUE;
  if (strcmp (string,"H8500") == 0)
    return TRUE;
  return FALSE;
}

#if 0 /* not used currently */
/* This routine is provided two arch_infos and returns whether
   they'd be compatible */

static const bfd_arch_info_type *
compatible (a,b)
     const bfd_arch_info_type *a;
     const bfd_arch_info_type *b;
{
  if (a->arch != b->arch || a->mach != b->mach)
   return NULL;
  return a;
}
#endif

const bfd_arch_info_type bfd_h8500_arch =
{
  16,				/* 16 bits in a word */
  24,				/* 24 bits in an address */
  8,				/* 8 bits in a byte */
  bfd_arch_h8500,
  0,				/* only 1 machine */
  "h8500",			/* arch_name  */
  "h8500",			/* printable name */
  1,
  TRUE,				/* the default machine */
  bfd_default_compatible,
  scan_mach,
  0,
};
@


1.4
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 2
a3 1
   Copyright 1993, 1995, 2000, 2001, 2002 Free Software Foundation, Inc.
d39 1
a39 1
     struct symbol_cache_entry *symbol_in;
d61 1
a61 1
     struct symbol_cache_entry *symbol_in;
d83 1
a83 1
     struct symbol_cache_entry *symbol_in;
d106 1
a106 1
     struct symbol_cache_entry *symbol_in;
@


1.3
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1993, 1995, 2000 Free Software Foundation, Inc.
d25 3
a28 1

d123 1
a123 1
  = NEWHOWTO(howto16_callback,"abs16",1,false,false);
d125 1
a125 1
  = NEWHOWTO(howto8_callback,"abs8",0,false,false);
d128 1
a128 1
  = NEWHOWTO(howto8_FFnn_callback,"ff00+abs8",0,false,false);
d131 1
a131 1
  = NEWHOWTO(howto8_pcrel_callback,"pcrel8",0,false,true);
d152 1
a152 3
int bfd_default_scan_num_mach();

static boolean
d157 9
a165 5
  if (strcmp(string,"h8/500") == 0) return true;
  if (strcmp(string,"H8/500") == 0) return true;
  if (strcmp(string,"h8500") == 0) return true;
  if (strcmp(string,"H8500") == 0) return true;
  return false;
d193 1
a193 1
  true,				/* the default machine */
@


1.2
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 1
a2 1
   Copyright (C) 1993, 1994, 1995, 1999 Free Software Foundation, Inc.
d27 1
a27 1
/* 
d31 1
a31 1
static bfd_reloc_status_type 
d43 1
a43 1
  long x = bfd_get_16(abfd, (bfd_byte *)data + addr);
d49 1
a49 1
  bfd_put_16(abfd, x, (bfd_byte *)data + addr);
d53 1
a53 2

static bfd_reloc_status_type 
d65 1
a65 1
  long x = bfd_get_8(abfd, (bfd_byte *)data + addr);
d71 1
a71 1
  bfd_put_8(abfd, x, (bfd_byte *)data + addr);
d75 1
a75 2

static bfd_reloc_status_type 
d88 2
a89 2
  long x = bfd_get_8(abfd, (bfd_byte *)data + addr);
  abort();
d94 1
a94 1
  bfd_put_8(abfd, x, (bfd_byte *)data + addr);
d98 1
a98 1
static bfd_reloc_status_type 
d110 2
a111 2
  long x = bfd_get_8(abfd, (bfd_byte *)data + addr);
  abort();
d116 1
a116 1
  bfd_put_8(abfd, x, (bfd_byte *)data + addr);
a119 2


a130 1

d152 1
a152 1
static boolean 
a162 1

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1993 Free Software Foundation, Inc.
d159 1
a159 1
     const struct bfd_arch_info *info;
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright (C) 1993, 1994, 1995, 1999 Free Software Foundation, Inc.
d159 1
a159 1
     const struct bfd_arch_info *info ATTRIBUTE_UNUSED;
@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1993, 1995, 2000 Free Software Foundation, Inc.
d27 1
a27 1
/*
d31 1
a31 1
static bfd_reloc_status_type
d43 1
a43 1
  long x = bfd_get_16 (abfd, (bfd_byte *)data + addr);
d49 1
a49 1
  bfd_put_16 (abfd, x, (bfd_byte *)data + addr);
d53 2
a54 1
static bfd_reloc_status_type
d66 1
a66 1
  long x = bfd_get_8 (abfd, (bfd_byte *)data + addr);
d72 1
a72 1
  bfd_put_8 (abfd, x, (bfd_byte *)data + addr);
d76 2
a77 1
static bfd_reloc_status_type
d90 2
a91 2
  long x = bfd_get_8 (abfd, (bfd_byte *)data + addr);
  abort ();
d96 1
a96 1
  bfd_put_8 (abfd, x, (bfd_byte *)data + addr);
d100 1
a100 1
static bfd_reloc_status_type
d112 2
a113 2
  long x = bfd_get_8 (abfd, (bfd_byte *)data + addr);
  abort ();
d118 1
a118 1
  bfd_put_8 (abfd, x, (bfd_byte *)data + addr);
d122 2
d135 1
d157 1
a157 1
static boolean
d168 1
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1993, 1995, 2000, 2001, 2002 Free Software Foundation, Inc.
d25 1
a25 2
static bfd_boolean scan_mach
  PARAMS ((const struct bfd_arch_info *, const char *));
a26 1
#if 0
d121 1
a121 1
  = NEWHOWTO (howto16_callback, "abs16", 1, FALSE, FALSE);
d123 1
a123 1
  = NEWHOWTO (howto8_callback, "abs8", 0, FALSE, FALSE);
d126 1
a126 1
  = NEWHOWTO (howto8_FFnn_callback, "ff00+abs8", 0, FALSE, FALSE);
d129 1
a129 1
  = NEWHOWTO (howto8_pcrel_callback, "pcrel8", 0, FALSE, TRUE);
d150 3
a152 1
static bfd_boolean
d157 5
a161 9
  if (strcmp (string,"h8/500") == 0)
    return TRUE;
  if (strcmp (string,"H8/500") == 0)
    return TRUE;
  if (strcmp (string,"h8500") == 0)
    return TRUE;
  if (strcmp (string,"H8500") == 0)
    return TRUE;
  return FALSE;
d189 1
a189 1
  TRUE,				/* the default machine */
@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 1
a2 2
   Copyright 1993, 1995, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
d38 1
a38 1
     struct bfd_symbol *symbol_in;
d60 1
a60 1
     struct bfd_symbol *symbol_in;
d82 1
a82 1
     struct bfd_symbol *symbol_in;
d105 1
a105 1
     struct bfd_symbol *symbol_in;
@


