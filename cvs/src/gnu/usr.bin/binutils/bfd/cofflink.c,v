head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.54
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.52
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.48
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.44
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.46
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.38
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.42
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.40
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.36
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.34
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.32
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.30
	OPENBSD_5_0:1.8.0.28
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.26
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.24
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.20
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	BINUTILS_2_15:1.1.1.9
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	BINUTILS-2_14:1.1.1.8
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	binutils-2_11_2:1.1.1.7
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	BINUTILS-2_10_1:1.1.1.6
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	new-binutils:1.4.0.14
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2004.11.02.20.45.05;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.17.21.54.21;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.13.17.07.29;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.12.19.11.09;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.03.32.52;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.18.59.58;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.44.09;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.35;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.35;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.05.14;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.37.23;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.11.19.14.12.12;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.18.26;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.45.30;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2002.05.13.13.21.52;	author fgsch;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.05.17.20.42.12;	author drahn;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.11.02.20.22.17;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* COFF specific linker code.
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* This file contains the COFF backend linker code.  */

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "libbfd.h"
#include "coff/internal.h"
#include "libcoff.h"
#include "safe-ctype.h"

static bfd_boolean coff_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info);
static bfd_boolean coff_link_check_archive_element (bfd *abfd, struct bfd_link_info *info, bfd_boolean *pneeded);
static bfd_boolean coff_link_add_symbols (bfd *abfd, struct bfd_link_info *info);

/* Return TRUE if SYM is a weak, external symbol.  */
#define IS_WEAK_EXTERNAL(abfd, sym)			\
  ((sym).n_sclass == C_WEAKEXT				\
   || (obj_pe (abfd) && (sym).n_sclass == C_NT_WEAK))

/* Return TRUE if SYM is an external symbol.  */
#define IS_EXTERNAL(abfd, sym)				\
  ((sym).n_sclass == C_EXT || IS_WEAK_EXTERNAL (abfd, sym))

/* Define macros so that the ISFCN, et. al., macros work correctly.
   These macros are defined in include/coff/internal.h in terms of
   N_TMASK, etc.  These definitions require a user to define local
   variables with the appropriate names, and with values from the
   coff_data (abfd) structure.  */

#define N_TMASK n_tmask
#define N_BTSHFT n_btshft
#define N_BTMASK n_btmask

/* Create an entry in a COFF linker hash table.  */

struct bfd_hash_entry *
_bfd_coff_link_hash_newfunc (struct bfd_hash_entry *entry,
			     struct bfd_hash_table *table,
			     const char *string)
{
  struct coff_link_hash_entry *ret = (struct coff_link_hash_entry *) entry;

  /* Allocate the structure if it has not already been allocated by a
     subclass.  */
  if (ret == (struct coff_link_hash_entry *) NULL)
    ret = ((struct coff_link_hash_entry *)
	   bfd_hash_allocate (table, sizeof (struct coff_link_hash_entry)));
  if (ret == (struct coff_link_hash_entry *) NULL)
    return (struct bfd_hash_entry *) ret;

  /* Call the allocation method of the superclass.  */
  ret = ((struct coff_link_hash_entry *)
	 _bfd_link_hash_newfunc ((struct bfd_hash_entry *) ret,
				 table, string));
  if (ret != (struct coff_link_hash_entry *) NULL)
    {
      /* Set local fields.  */
      ret->indx = -1;
      ret->type = T_NULL;
      ret->class = C_NULL;
      ret->numaux = 0;
      ret->auxbfd = NULL;
      ret->aux = NULL;
    }

  return (struct bfd_hash_entry *) ret;
}

/* Initialize a COFF linker hash table.  */

bfd_boolean
_bfd_coff_link_hash_table_init (struct coff_link_hash_table *table,
				bfd *abfd,
				struct bfd_hash_entry *(*newfunc) (struct bfd_hash_entry *,
								   struct bfd_hash_table *,
								   const char *))
{
  table->stab_info = NULL;
  return _bfd_link_hash_table_init (&table->root, abfd, newfunc);
}

/* Create a COFF linker hash table.  */

struct bfd_link_hash_table *
_bfd_coff_link_hash_table_create (bfd *abfd)
{
  struct coff_link_hash_table *ret;
  bfd_size_type amt = sizeof (struct coff_link_hash_table);

  ret = bfd_malloc (amt);
  if (ret == NULL)
    return NULL;

  if (! _bfd_coff_link_hash_table_init (ret, abfd,
					_bfd_coff_link_hash_newfunc))
    {
      free (ret);
      return (struct bfd_link_hash_table *) NULL;
    }
  return &ret->root;
}

/* Create an entry in a COFF debug merge hash table.  */

struct bfd_hash_entry *
_bfd_coff_debug_merge_hash_newfunc (struct bfd_hash_entry *entry,
				    struct bfd_hash_table *table,
				    const char *string)
{
  struct coff_debug_merge_hash_entry *ret =
    (struct coff_debug_merge_hash_entry *) entry;

  /* Allocate the structure if it has not already been allocated by a
     subclass.  */
  if (ret == (struct coff_debug_merge_hash_entry *) NULL)
    ret = ((struct coff_debug_merge_hash_entry *)
	   bfd_hash_allocate (table,
			      sizeof (struct coff_debug_merge_hash_entry)));
  if (ret == (struct coff_debug_merge_hash_entry *) NULL)
    return (struct bfd_hash_entry *) ret;

  /* Call the allocation method of the superclass.  */
  ret = ((struct coff_debug_merge_hash_entry *)
	 bfd_hash_newfunc ((struct bfd_hash_entry *) ret, table, string));
  if (ret != (struct coff_debug_merge_hash_entry *) NULL)
    {
      /* Set local fields.  */
      ret->types = NULL;
    }

  return (struct bfd_hash_entry *) ret;
}

/* Given a COFF BFD, add symbols to the global hash table as
   appropriate.  */

bfd_boolean
_bfd_coff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)
{
  switch (bfd_get_format (abfd))
    {
    case bfd_object:
      return coff_link_add_object_symbols (abfd, info);
    case bfd_archive:
      return _bfd_generic_link_add_archive_symbols
	(abfd, info, coff_link_check_archive_element);
    default:
      bfd_set_error (bfd_error_wrong_format);
      return FALSE;
    }
}

/* Add symbols from a COFF object file.  */

static bfd_boolean
coff_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)
{
  if (! _bfd_coff_get_external_symbols (abfd))
    return FALSE;
  if (! coff_link_add_symbols (abfd, info))
    return FALSE;

  if (! info->keep_memory
      && ! _bfd_coff_free_symbols (abfd))
    return FALSE;

  return TRUE;
}

/* Look through the symbols to see if this object file should be
   included in the link.  */

static bfd_boolean
coff_link_check_ar_symbols (bfd *abfd,
			    struct bfd_link_info *info,
			    bfd_boolean *pneeded)
{
  bfd_size_type symesz;
  bfd_byte *esym;
  bfd_byte *esym_end;

  *pneeded = FALSE;

  symesz = bfd_coff_symesz (abfd);
  esym = (bfd_byte *) obj_coff_external_syms (abfd);
  esym_end = esym + obj_raw_syment_count (abfd) * symesz;
  while (esym < esym_end)
    {
      struct internal_syment sym;
      enum coff_symbol_classification classification;

      bfd_coff_swap_sym_in (abfd, esym, &sym);

      classification = bfd_coff_classify_symbol (abfd, &sym);
      if (classification == COFF_SYMBOL_GLOBAL
	  || classification == COFF_SYMBOL_COMMON)
	{
	  const char *name;
	  char buf[SYMNMLEN + 1];
	  struct bfd_link_hash_entry *h;

	  /* This symbol is externally visible, and is defined by this
             object file.  */
	  name = _bfd_coff_internal_syment_name (abfd, &sym, buf);
	  if (name == NULL)
	    return FALSE;
	  h = bfd_link_hash_lookup (info->hash, name, FALSE, FALSE, TRUE);

	  /* Auto import.  */
	  if (!h
	      && info->pei386_auto_import
	      && !strncmp (name,"__imp_", 6))
	    h = bfd_link_hash_lookup (info->hash, name + 6, FALSE, FALSE, TRUE);

	  /* We are only interested in symbols that are currently
	     undefined.  If a symbol is currently known to be common,
	     COFF linkers do not bring in an object file which defines
	     it.  */
	  if (h != (struct bfd_link_hash_entry *) NULL
	      && h->type == bfd_link_hash_undefined)
	    {
	      if (! (*info->callbacks->add_archive_element) (info, abfd, name))
		return FALSE;
	      *pneeded = TRUE;
	      return TRUE;
	    }
	}

      esym += (sym.n_numaux + 1) * symesz;
    }

  /* We do not need this object file.  */
  return TRUE;
}

/* Check a single archive element to see if we need to include it in
   the link.  *PNEEDED is set according to whether this element is
   needed in the link or not.  This is called via
   _bfd_generic_link_add_archive_symbols.  */

static bfd_boolean
coff_link_check_archive_element (bfd *abfd,
				 struct bfd_link_info *info,
				 bfd_boolean *pneeded)
{
  if (! _bfd_coff_get_external_symbols (abfd))
    return FALSE;

  if (! coff_link_check_ar_symbols (abfd, info, pneeded))
    return FALSE;

  if (*pneeded
      && ! coff_link_add_symbols (abfd, info))
    return FALSE;

  if ((! info->keep_memory || ! *pneeded)
      && ! _bfd_coff_free_symbols (abfd))
    return FALSE;

  return TRUE;
}

/* Add all the symbols from an object file to the hash table.  */

static bfd_boolean
coff_link_add_symbols (bfd *abfd,
		       struct bfd_link_info *info)
{
  unsigned int n_tmask = coff_data (abfd)->local_n_tmask;
  unsigned int n_btshft = coff_data (abfd)->local_n_btshft;
  unsigned int n_btmask = coff_data (abfd)->local_n_btmask;
  bfd_boolean keep_syms;
  bfd_boolean default_copy;
  bfd_size_type symcount;
  struct coff_link_hash_entry **sym_hash;
  bfd_size_type symesz;
  bfd_byte *esym;
  bfd_byte *esym_end;
  bfd_size_type amt;

  /* Keep the symbols during this function, in case the linker needs
     to read the generic symbols in order to report an error message.  */
  keep_syms = obj_coff_keep_syms (abfd);
  obj_coff_keep_syms (abfd) = TRUE;

  if (info->keep_memory)
    default_copy = FALSE;
  else
    default_copy = TRUE;

  symcount = obj_raw_syment_count (abfd);

  /* We keep a list of the linker hash table entries that correspond
     to particular symbols.  */
  amt = symcount * sizeof (struct coff_link_hash_entry *);
  sym_hash = bfd_zalloc (abfd, amt);
  if (sym_hash == NULL && symcount != 0)
    goto error_return;
  obj_coff_sym_hashes (abfd) = sym_hash;

  symesz = bfd_coff_symesz (abfd);
  BFD_ASSERT (symesz == bfd_coff_auxesz (abfd));
  esym = (bfd_byte *) obj_coff_external_syms (abfd);
  esym_end = esym + symcount * symesz;
  while (esym < esym_end)
    {
      struct internal_syment sym;
      enum coff_symbol_classification classification;
      bfd_boolean copy;

      bfd_coff_swap_sym_in (abfd, esym, &sym);

      classification = bfd_coff_classify_symbol (abfd, &sym);
      if (classification != COFF_SYMBOL_LOCAL)
	{
	  const char *name;
	  char buf[SYMNMLEN + 1];
	  flagword flags;
	  asection *section;
	  bfd_vma value;
	  bfd_boolean addit;

	  /* This symbol is externally visible.  */

	  name = _bfd_coff_internal_syment_name (abfd, &sym, buf);
	  if (name == NULL)
	    goto error_return;

	  /* We must copy the name into memory if we got it from the
             syment itself, rather than the string table.  */
	  copy = default_copy;
	  if (sym._n._n_n._n_zeroes != 0
	      || sym._n._n_n._n_offset == 0)
	    copy = TRUE;

	  value = sym.n_value;

	  switch (classification)
	    {
	    default:
	      abort ();

	    case COFF_SYMBOL_GLOBAL:
	      flags = BSF_EXPORT | BSF_GLOBAL;
	      section = coff_section_from_bfd_index (abfd, sym.n_scnum);
	      if (! obj_pe (abfd))
		value -= section->vma;
	      break;

	    case COFF_SYMBOL_UNDEFINED:
	      flags = 0;
	      section = bfd_und_section_ptr;
	      break;

	    case COFF_SYMBOL_COMMON:
	      flags = BSF_GLOBAL;
	      section = bfd_com_section_ptr;
	      break;

	    case COFF_SYMBOL_PE_SECTION:
	      flags = BSF_SECTION_SYM | BSF_GLOBAL;
	      section = coff_section_from_bfd_index (abfd, sym.n_scnum);
	      break;
	    }

	  if (IS_WEAK_EXTERNAL (abfd, sym))
	    flags = BSF_WEAK;

	  addit = TRUE;

	  /* In the PE format, section symbols actually refer to the
             start of the output section.  We handle them specially
             here.  */
	  if (obj_pe (abfd) && (flags & BSF_SECTION_SYM) != 0)
	    {
	      *sym_hash = coff_link_hash_lookup (coff_hash_table (info),
						 name, FALSE, copy, FALSE);
	      if (*sym_hash != NULL)
		{
		  if (((*sym_hash)->coff_link_hash_flags
		       & COFF_LINK_HASH_PE_SECTION_SYMBOL) == 0
		      && (*sym_hash)->root.type != bfd_link_hash_undefined
		      && (*sym_hash)->root.type != bfd_link_hash_undefweak)
		    (*_bfd_error_handler)
		      ("Warning: symbol `%s' is both section and non-section",
		       name);

		  addit = FALSE;
		}
	    }

	  /* The Microsoft Visual C compiler does string pooling by
	     hashing the constants to an internal symbol name, and
	     relying on the linker comdat support to discard
	     duplicate names.  However, if one string is a literal and
	     one is a data initializer, one will end up in the .data
	     section and one will end up in the .rdata section.  The
	     Microsoft linker will combine them into the .data
	     section, which seems to be wrong since it might cause the
	     literal to change.

	     As long as there are no external references to the
	     symbols, which there shouldn't be, we can treat the .data
	     and .rdata instances as separate symbols.  The comdat
	     code in the linker will do the appropriate merging.  Here
	     we avoid getting a multiple definition error for one of
	     these special symbols.

	     FIXME: I don't think this will work in the case where
	     there are two object files which use the constants as a
	     literal and two object files which use it as a data
	     initializer.  One or the other of the second object files
	     is going to wind up with an inappropriate reference.  */
	  if (obj_pe (abfd)
	      && (classification == COFF_SYMBOL_GLOBAL
		  || classification == COFF_SYMBOL_PE_SECTION)
	      && section->comdat != NULL
	      && strncmp (name, "??_", 3) == 0
	      && strcmp (name, section->comdat->name) == 0)
	    {
	      if (*sym_hash == NULL)
		*sym_hash = coff_link_hash_lookup (coff_hash_table (info),
						   name, FALSE, copy, FALSE);
	      if (*sym_hash != NULL
		  && (*sym_hash)->root.type == bfd_link_hash_defined
		  && (*sym_hash)->root.u.def.section->comdat != NULL
		  && strcmp ((*sym_hash)->root.u.def.section->comdat->name,
			     section->comdat->name) == 0)
		addit = FALSE;
	    }

	  if (addit)
	    {
	      if (! (bfd_coff_link_add_one_symbol
		     (info, abfd, name, flags, section, value,
		      (const char *) NULL, copy, FALSE,
		      (struct bfd_link_hash_entry **) sym_hash)))
		goto error_return;
	    }

	  if (obj_pe (abfd) && (flags & BSF_SECTION_SYM) != 0)
	    (*sym_hash)->coff_link_hash_flags |=
	      COFF_LINK_HASH_PE_SECTION_SYMBOL;

	  /* Limit the alignment of a common symbol to the possible
             alignment of a section.  There is no point to permitting
             a higher alignment for a common symbol: we can not
             guarantee it, and it may cause us to allocate extra space
             in the common section.  */
	  if (section == bfd_com_section_ptr
	      && (*sym_hash)->root.type == bfd_link_hash_common
	      && ((*sym_hash)->root.u.c.p->alignment_power
		  > bfd_coff_default_section_alignment_power (abfd)))
	    (*sym_hash)->root.u.c.p->alignment_power
	      = bfd_coff_default_section_alignment_power (abfd);

	  if (info->hash->creator->flavour == bfd_get_flavour (abfd))
	    {
	      /* If we don't have any symbol information currently in
                 the hash table, or if we are looking at a symbol
                 definition, then update the symbol class and type in
                 the hash table.  */
  	      if (((*sym_hash)->class == C_NULL
  		   && (*sym_hash)->type == T_NULL)
  		  || sym.n_scnum != 0
  		  || (sym.n_value != 0
  		      && (*sym_hash)->root.type != bfd_link_hash_defined
  		      && (*sym_hash)->root.type != bfd_link_hash_defweak))
  		{
  		  (*sym_hash)->class = sym.n_sclass;
  		  if (sym.n_type != T_NULL)
  		    {
  		      /* We want to warn if the type changed, but not
  			 if it changed from an unspecified type.
  			 Testing the whole type byte may work, but the
  			 change from (e.g.) a function of unspecified
  			 type to function of known type also wants to
  			 skip the warning.  */
  		      if ((*sym_hash)->type != T_NULL
  			  && (*sym_hash)->type != sym.n_type
  		          && !(DTYPE ((*sym_hash)->type) == DTYPE (sym.n_type)
  		               && (BTYPE ((*sym_hash)->type) == T_NULL
  		                   || BTYPE (sym.n_type) == T_NULL)))
  			(*_bfd_error_handler)
  			  (_("Warning: type of symbol `%s' changed from %d to %d in %s"),
  			   name, (*sym_hash)->type, sym.n_type,
  			   bfd_archive_filename (abfd));

  		      /* We don't want to change from a meaningful
  			 base type to a null one, but if we know
  			 nothing, take what little we might now know.  */
  		      if (BTYPE (sym.n_type) != T_NULL
  			  || (*sym_hash)->type == T_NULL)
			(*sym_hash)->type = sym.n_type;
  		    }
  		  (*sym_hash)->auxbfd = abfd;
		  if (sym.n_numaux != 0)
		    {
		      union internal_auxent *alloc;
		      unsigned int i;
		      bfd_byte *eaux;
		      union internal_auxent *iaux;

		      (*sym_hash)->numaux = sym.n_numaux;
		      alloc = ((union internal_auxent *)
			       bfd_hash_allocate (&info->hash->table,
						  (sym.n_numaux
						   * sizeof (*alloc))));
		      if (alloc == NULL)
			goto error_return;
		      for (i = 0, eaux = esym + symesz, iaux = alloc;
			   i < sym.n_numaux;
			   i++, eaux += symesz, iaux++)
			bfd_coff_swap_aux_in (abfd, eaux, sym.n_type,
					      sym.n_sclass, (int) i,
					      sym.n_numaux, iaux);
		      (*sym_hash)->aux = alloc;
		    }
		}
	    }

	  if (classification == COFF_SYMBOL_PE_SECTION
	      && (*sym_hash)->numaux != 0)
	    {
	      /* Some PE sections (such as .bss) have a zero size in
                 the section header, but a non-zero size in the AUX
                 record.  Correct that here.

		 FIXME: This is not at all the right place to do this.
		 For example, it won't help objdump.  This needs to be
		 done when we swap in the section header.  */
	      BFD_ASSERT ((*sym_hash)->numaux == 1);
	      if (section->_raw_size == 0)
		section->_raw_size = (*sym_hash)->aux[0].x_scn.x_scnlen;

	      /* FIXME: We could test whether the section sizes
                 matches the size in the aux entry, but apparently
                 that sometimes fails unexpectedly.  */
	    }
	}

      esym += (sym.n_numaux + 1) * symesz;
      sym_hash += sym.n_numaux + 1;
    }

  /* If this is a non-traditional, non-relocatable link, try to
     optimize the handling of any .stab/.stabstr sections.  */
  if (! info->relocatable
      && ! info->traditional_format
      && info->hash->creator->flavour == bfd_get_flavour (abfd)
      && (info->strip != strip_all && info->strip != strip_debugger))
    {
      asection *stabstr;

      stabstr = bfd_get_section_by_name (abfd, ".stabstr");

      if (stabstr != NULL)
	{
	  bfd_size_type string_offset = 0;
	  asection *stab;
	  
	  for (stab = abfd->sections; stab; stab = stab->next)
	    if (strncmp (".stab", stab->name, 5) == 0
		&& (!stab->name[5]
		    || (stab->name[5] == '.' && ISDIGIT (stab->name[6]))))
	    {
	      struct coff_link_hash_table *table;
	      struct coff_section_tdata *secdata
		= coff_section_data (abfd, stab);
	      
	      if (secdata == NULL)
		{
		  amt = sizeof (struct coff_section_tdata);
		  stab->used_by_bfd = bfd_zalloc (abfd, amt);
		  if (stab->used_by_bfd == NULL)
		    goto error_return;
		  secdata = coff_section_data (abfd, stab);
		}

	      table = coff_hash_table (info);

	      if (! _bfd_link_section_stabs (abfd, &table->stab_info,
					     stab, stabstr,
					     &secdata->stab_info,
					     &string_offset))
		goto error_return;
	    }
	}
    }

  obj_coff_keep_syms (abfd) = keep_syms;

  return TRUE;

 error_return:
  obj_coff_keep_syms (abfd) = keep_syms;
  return FALSE;
}

/* Do the final link step.  */

bfd_boolean
_bfd_coff_final_link (bfd *abfd,
		      struct bfd_link_info *info)
{
  bfd_size_type symesz;
  struct coff_final_link_info finfo;
  bfd_boolean debug_merge_allocated;
  bfd_boolean long_section_names;
  asection *o;
  struct bfd_link_order *p;
  bfd_size_type max_sym_count;
  bfd_size_type max_lineno_count;
  bfd_size_type max_reloc_count;
  bfd_size_type max_output_reloc_count;
  bfd_size_type max_contents_size;
  file_ptr rel_filepos;
  unsigned int relsz;
  file_ptr line_filepos;
  unsigned int linesz;
  bfd *sub;
  bfd_byte *external_relocs = NULL;
  char strbuf[STRING_SIZE_SIZE];
  bfd_size_type amt;

  symesz = bfd_coff_symesz (abfd);

  finfo.info = info;
  finfo.output_bfd = abfd;
  finfo.strtab = NULL;
  finfo.section_info = NULL;
  finfo.last_file_index = -1;
  finfo.last_bf_index = -1;
  finfo.internal_syms = NULL;
  finfo.sec_ptrs = NULL;
  finfo.sym_indices = NULL;
  finfo.outsyms = NULL;
  finfo.linenos = NULL;
  finfo.contents = NULL;
  finfo.external_relocs = NULL;
  finfo.internal_relocs = NULL;
  finfo.global_to_static = FALSE;
  debug_merge_allocated = FALSE;

  coff_data (abfd)->link_info = info;

  finfo.strtab = _bfd_stringtab_init ();
  if (finfo.strtab == NULL)
    goto error_return;

  if (! coff_debug_merge_hash_table_init (&finfo.debug_merge))
    goto error_return;
  debug_merge_allocated = TRUE;

  /* Compute the file positions for all the sections.  */
  if (! abfd->output_has_begun)
    {
      if (! bfd_coff_compute_section_file_positions (abfd))
	goto error_return;
    }

  /* Count the line numbers and relocation entries required for the
     output file.  Set the file positions for the relocs.  */
  rel_filepos = obj_relocbase (abfd);
  relsz = bfd_coff_relsz (abfd);
  max_contents_size = 0;
  max_lineno_count = 0;
  max_reloc_count = 0;

  long_section_names = FALSE;
  for (o = abfd->sections; o != NULL; o = o->next)
    {
      o->reloc_count = 0;
      o->lineno_count = 0;
      for (p = o->link_order_head; p != NULL; p = p->next)
	{
	  if (p->type == bfd_indirect_link_order)
	    {
	      asection *sec;

	      sec = p->u.indirect.section;

	      /* Mark all sections which are to be included in the
		 link.  This will normally be every section.  We need
		 to do this so that we can identify any sections which
		 the linker has decided to not include.  */
	      sec->linker_mark = TRUE;

	      if (info->strip == strip_none
		  || info->strip == strip_some)
		o->lineno_count += sec->lineno_count;

	      if (info->relocatable)
		o->reloc_count += sec->reloc_count;

	      if (sec->_raw_size > max_contents_size)
		max_contents_size = sec->_raw_size;
	      if (sec->lineno_count > max_lineno_count)
		max_lineno_count = sec->lineno_count;
	      if (sec->reloc_count > max_reloc_count)
		max_reloc_count = sec->reloc_count;
	    }
	  else if (info->relocatable
		   && (p->type == bfd_section_reloc_link_order
		       || p->type == bfd_symbol_reloc_link_order))
	    ++o->reloc_count;
	}
      if (o->reloc_count == 0)
	o->rel_filepos = 0;
      else
	{
	  o->flags |= SEC_RELOC;
	  o->rel_filepos = rel_filepos;
	  rel_filepos += o->reloc_count * relsz;
	  /* In PE COFF, if there are at least 0xffff relocations an
	     extra relocation will be written out to encode the count.  */
	  if (obj_pe (abfd) && o->reloc_count >= 0xffff)
	    rel_filepos += relsz;
	}

      if (bfd_coff_long_section_names (abfd)
	  && strlen (o->name) > SCNNMLEN)
	{
	  /* This section has a long name which must go in the string
             table.  This must correspond to the code in
             coff_write_object_contents which puts the string index
             into the s_name field of the section header.  That is why
             we pass hash as FALSE.  */
	  if (_bfd_stringtab_add (finfo.strtab, o->name, FALSE, FALSE)
	      == (bfd_size_type) -1)
	    goto error_return;
	  long_section_names = TRUE;
	}
    }

  /* If doing a relocatable link, allocate space for the pointers we
     need to keep.  */
  if (info->relocatable)
    {
      unsigned int i;

      /* We use section_count + 1, rather than section_count, because
         the target_index fields are 1 based.  */
      amt = abfd->section_count + 1;
      amt *= sizeof (struct coff_link_section_info);
      finfo.section_info = bfd_malloc (amt);
      if (finfo.section_info == NULL)
	goto error_return;
      for (i = 0; i <= abfd->section_count; i++)
	{
	  finfo.section_info[i].relocs = NULL;
	  finfo.section_info[i].rel_hashes = NULL;
	}
    }

  /* We now know the size of the relocs, so we can determine the file
     positions of the line numbers.  */
  line_filepos = rel_filepos;
  linesz = bfd_coff_linesz (abfd);
  max_output_reloc_count = 0;
  for (o = abfd->sections; o != NULL; o = o->next)
    {
      if (o->lineno_count == 0)
	o->line_filepos = 0;
      else
	{
	  o->line_filepos = line_filepos;
	  line_filepos += o->lineno_count * linesz;
	}

      if (o->reloc_count != 0)
	{
	  /* We don't know the indices of global symbols until we have
             written out all the local symbols.  For each section in
             the output file, we keep an array of pointers to hash
             table entries.  Each entry in the array corresponds to a
             reloc.  When we find a reloc against a global symbol, we
             set the corresponding entry in this array so that we can
             fix up the symbol index after we have written out all the
             local symbols.

	     Because of this problem, we also keep the relocs in
	     memory until the end of the link.  This wastes memory,
	     but only when doing a relocatable link, which is not the
	     common case.  */
	  BFD_ASSERT (info->relocatable);
	  amt = o->reloc_count;
	  amt *= sizeof (struct internal_reloc);
	  finfo.section_info[o->target_index].relocs = bfd_malloc (amt);
	  amt = o->reloc_count;
	  amt *= sizeof (struct coff_link_hash_entry *);
	  finfo.section_info[o->target_index].rel_hashes = bfd_malloc (amt);
	  if (finfo.section_info[o->target_index].relocs == NULL
	      || finfo.section_info[o->target_index].rel_hashes == NULL)
	    goto error_return;

	  if (o->reloc_count > max_output_reloc_count)
	    max_output_reloc_count = o->reloc_count;
	}

      /* Reset the reloc and lineno counts, so that we can use them to
	 count the number of entries we have output so far.  */
      o->reloc_count = 0;
      o->lineno_count = 0;
    }

  obj_sym_filepos (abfd) = line_filepos;

  /* Figure out the largest number of symbols in an input BFD.  Take
     the opportunity to clear the output_has_begun fields of all the
     input BFD's.  */
  max_sym_count = 0;
  for (sub = info->input_bfds; sub != NULL; sub = sub->link_next)
    {
      size_t sz;

      sub->output_has_begun = FALSE;
      sz = obj_raw_syment_count (sub);
      if (sz > max_sym_count)
	max_sym_count = sz;
    }

  /* Allocate some buffers used while linking.  */
  amt = max_sym_count * sizeof (struct internal_syment);
  finfo.internal_syms = bfd_malloc (amt);
  amt = max_sym_count * sizeof (asection *);
  finfo.sec_ptrs = bfd_malloc (amt);
  amt = max_sym_count * sizeof (long);
  finfo.sym_indices = bfd_malloc (amt);
  finfo.outsyms = bfd_malloc ((max_sym_count + 1) * symesz);
  amt = max_lineno_count * bfd_coff_linesz (abfd);
  finfo.linenos = bfd_malloc (amt);
  finfo.contents = bfd_malloc (max_contents_size);
  amt = max_reloc_count * relsz;
  finfo.external_relocs = bfd_malloc (amt);
  if (! info->relocatable)
    {
      amt = max_reloc_count * sizeof (struct internal_reloc);
      finfo.internal_relocs = bfd_malloc (amt);
    }
  if ((finfo.internal_syms == NULL && max_sym_count > 0)
      || (finfo.sec_ptrs == NULL && max_sym_count > 0)
      || (finfo.sym_indices == NULL && max_sym_count > 0)
      || finfo.outsyms == NULL
      || (finfo.linenos == NULL && max_lineno_count > 0)
      || (finfo.contents == NULL && max_contents_size > 0)
      || (finfo.external_relocs == NULL && max_reloc_count > 0)
      || (! info->relocatable
	  && finfo.internal_relocs == NULL
	  && max_reloc_count > 0))
    goto error_return;

  /* We now know the position of everything in the file, except that
     we don't know the size of the symbol table and therefore we don't
     know where the string table starts.  We just build the string
     table in memory as we go along.  We process all the relocations
     for a single input file at once.  */
  obj_raw_syment_count (abfd) = 0;

  if (coff_backend_info (abfd)->_bfd_coff_start_final_link)
    {
      if (! bfd_coff_start_final_link (abfd, info))
	goto error_return;
    }

  for (o = abfd->sections; o != NULL; o = o->next)
    {
      for (p = o->link_order_head; p != NULL; p = p->next)
	{
	  if (p->type == bfd_indirect_link_order
	      && bfd_family_coff (p->u.indirect.section->owner))
	    {
	      sub = p->u.indirect.section->owner;
	      if (! bfd_coff_link_output_has_begun (sub, & finfo))
		{
		  if (! _bfd_coff_link_input_bfd (&finfo, sub))
		    goto error_return;
		  sub->output_has_begun = TRUE;
		}
	    }
	  else if (p->type == bfd_section_reloc_link_order
		   || p->type == bfd_symbol_reloc_link_order)
	    {
	      if (! _bfd_coff_reloc_link_order (abfd, &finfo, o, p))
		goto error_return;
	    }
	  else
	    {
	      if (! _bfd_default_link_order (abfd, info, o, p))
		goto error_return;
	    }
	}
    }

  if (! bfd_coff_final_link_postscript (abfd, & finfo))
    goto error_return;

  /* Free up the buffers used by _bfd_coff_link_input_bfd.  */

  coff_debug_merge_hash_table_free (&finfo.debug_merge);
  debug_merge_allocated = FALSE;

  if (finfo.internal_syms != NULL)
    {
      free (finfo.internal_syms);
      finfo.internal_syms = NULL;
    }
  if (finfo.sec_ptrs != NULL)
    {
      free (finfo.sec_ptrs);
      finfo.sec_ptrs = NULL;
    }
  if (finfo.sym_indices != NULL)
    {
      free (finfo.sym_indices);
      finfo.sym_indices = NULL;
    }
  if (finfo.linenos != NULL)
    {
      free (finfo.linenos);
      finfo.linenos = NULL;
    }
  if (finfo.contents != NULL)
    {
      free (finfo.contents);
      finfo.contents = NULL;
    }
  if (finfo.external_relocs != NULL)
    {
      free (finfo.external_relocs);
      finfo.external_relocs = NULL;
    }
  if (finfo.internal_relocs != NULL)
    {
      free (finfo.internal_relocs);
      finfo.internal_relocs = NULL;
    }

  /* The value of the last C_FILE symbol is supposed to be the symbol
     index of the first external symbol.  Write it out again if
     necessary.  */
  if (finfo.last_file_index != -1
      && (unsigned int) finfo.last_file.n_value != obj_raw_syment_count (abfd))
    {
      file_ptr pos;

      finfo.last_file.n_value = obj_raw_syment_count (abfd);
      bfd_coff_swap_sym_out (abfd, &finfo.last_file,
			     finfo.outsyms);

      pos = obj_sym_filepos (abfd) + finfo.last_file_index * symesz;
      if (bfd_seek (abfd, pos, SEEK_SET) != 0
	  || bfd_bwrite (finfo.outsyms, symesz, abfd) != symesz)
	return FALSE;
    }

  /* If doing task linking (ld --task-link) then make a pass through the
     global symbols, writing out any that are defined, and making them
     static.  */
  if (info->task_link)
    {
      finfo.failed = FALSE;
      coff_link_hash_traverse (coff_hash_table (info),
			       _bfd_coff_write_task_globals, &finfo);
      if (finfo.failed)
	goto error_return;
    }

  /* Write out the global symbols.  */
  finfo.failed = FALSE;
  coff_link_hash_traverse (coff_hash_table (info),
			   _bfd_coff_write_global_sym, &finfo);
  if (finfo.failed)
    goto error_return;

  /* The outsyms buffer is used by _bfd_coff_write_global_sym.  */
  if (finfo.outsyms != NULL)
    {
      free (finfo.outsyms);
      finfo.outsyms = NULL;
    }

  if (info->relocatable && max_output_reloc_count > 0)
    {
      /* Now that we have written out all the global symbols, we know
	 the symbol indices to use for relocs against them, and we can
	 finally write out the relocs.  */
      amt = max_output_reloc_count * relsz;
      external_relocs = bfd_malloc (amt);
      if (external_relocs == NULL)
	goto error_return;

      for (o = abfd->sections; o != NULL; o = o->next)
	{
	  struct internal_reloc *irel;
	  struct internal_reloc *irelend;
	  struct coff_link_hash_entry **rel_hash;
	  bfd_byte *erel;

	  if (o->reloc_count == 0)
	    continue;

	  irel = finfo.section_info[o->target_index].relocs;
	  irelend = irel + o->reloc_count;
	  rel_hash = finfo.section_info[o->target_index].rel_hashes;
	  erel = external_relocs;
	  for (; irel < irelend; irel++, rel_hash++, erel += relsz)
	    {
	      if (*rel_hash != NULL)
		{
		  BFD_ASSERT ((*rel_hash)->indx >= 0);
		  irel->r_symndx = (*rel_hash)->indx;
		}
	      bfd_coff_swap_reloc_out (abfd, irel, erel);
	    }

	  if (bfd_seek (abfd, o->rel_filepos, SEEK_SET) != 0)
	    goto error_return;
	  if (obj_pe (abfd) && o->reloc_count >= 0xffff)
	    {
	      /* In PE COFF, write the count of relocs as the first
		 reloc.  The header overflow bit will be set
		 elsewhere. */
	      struct internal_reloc incount;
	      bfd_byte *excount = (bfd_byte *)bfd_malloc (relsz);
	      
	      memset (&incount, 0, sizeof (incount));
	      incount.r_vaddr = o->reloc_count + 1;
	      bfd_coff_swap_reloc_out (abfd, (PTR) &incount, (PTR) excount);
	      if (bfd_bwrite (excount, relsz, abfd) != relsz)
		/* We'll leak, but it's an error anyway. */
		goto error_return;
	      free (excount);
	    }
	  if (bfd_bwrite (external_relocs,
			  (bfd_size_type) relsz * o->reloc_count, abfd)
	      != (bfd_size_type) relsz * o->reloc_count)
	    goto error_return;
	}

      free (external_relocs);
      external_relocs = NULL;
    }

  /* Free up the section information.  */
  if (finfo.section_info != NULL)
    {
      unsigned int i;

      for (i = 0; i < abfd->section_count; i++)
	{
	  if (finfo.section_info[i].relocs != NULL)
	    free (finfo.section_info[i].relocs);
	  if (finfo.section_info[i].rel_hashes != NULL)
	    free (finfo.section_info[i].rel_hashes);
	}
      free (finfo.section_info);
      finfo.section_info = NULL;
    }

  /* If we have optimized stabs strings, output them.  */
  if (coff_hash_table (info)->stab_info != NULL)
    {
      if (! _bfd_write_stab_strings (abfd, &coff_hash_table (info)->stab_info))
	return FALSE;
    }

  /* Write out the string table.  */
  if (obj_raw_syment_count (abfd) != 0 || long_section_names)
    {
      file_ptr pos;

      pos = obj_sym_filepos (abfd) + obj_raw_syment_count (abfd) * symesz;
      if (bfd_seek (abfd, pos, SEEK_SET) != 0)
	return FALSE;

#if STRING_SIZE_SIZE == 4
      H_PUT_32 (abfd,
		_bfd_stringtab_size (finfo.strtab) + STRING_SIZE_SIZE,
		strbuf);
#else
 #error Change H_PUT_32 above
#endif

      if (bfd_bwrite (strbuf, (bfd_size_type) STRING_SIZE_SIZE, abfd)
	  != STRING_SIZE_SIZE)
	return FALSE;

      if (! _bfd_stringtab_emit (abfd, finfo.strtab))
	return FALSE;

      obj_coff_strings_written (abfd) = TRUE;
    }

  _bfd_stringtab_free (finfo.strtab);

  /* Setting bfd_get_symcount to 0 will cause write_object_contents to
     not try to write out the symbols.  */
  bfd_get_symcount (abfd) = 0;

  return TRUE;

 error_return:
  if (debug_merge_allocated)
    coff_debug_merge_hash_table_free (&finfo.debug_merge);
  if (finfo.strtab != NULL)
    _bfd_stringtab_free (finfo.strtab);
  if (finfo.section_info != NULL)
    {
      unsigned int i;

      for (i = 0; i < abfd->section_count; i++)
	{
	  if (finfo.section_info[i].relocs != NULL)
	    free (finfo.section_info[i].relocs);
	  if (finfo.section_info[i].rel_hashes != NULL)
	    free (finfo.section_info[i].rel_hashes);
	}
      free (finfo.section_info);
    }
  if (finfo.internal_syms != NULL)
    free (finfo.internal_syms);
  if (finfo.sec_ptrs != NULL)
    free (finfo.sec_ptrs);
  if (finfo.sym_indices != NULL)
    free (finfo.sym_indices);
  if (finfo.outsyms != NULL)
    free (finfo.outsyms);
  if (finfo.linenos != NULL)
    free (finfo.linenos);
  if (finfo.contents != NULL)
    free (finfo.contents);
  if (finfo.external_relocs != NULL)
    free (finfo.external_relocs);
  if (finfo.internal_relocs != NULL)
    free (finfo.internal_relocs);
  if (external_relocs != NULL)
    free (external_relocs);
  return FALSE;
}

/* Parse out a -heap <reserved>,<commit> line.  */

static char *
dores_com (char *ptr, bfd *output_bfd, int heap)
{
  if (coff_data(output_bfd)->pe)
    {
      int val = strtoul (ptr, &ptr, 0);

      if (heap)
	pe_data(output_bfd)->pe_opthdr.SizeOfHeapReserve = val;
      else
	pe_data(output_bfd)->pe_opthdr.SizeOfStackReserve = val;

      if (ptr[0] == ',')
	{
	  val = strtoul (ptr+1, &ptr, 0);
	  if (heap)
	    pe_data(output_bfd)->pe_opthdr.SizeOfHeapCommit = val;
	  else
	    pe_data(output_bfd)->pe_opthdr.SizeOfStackCommit = val;
	}
    }
  return ptr;
}

static char *
get_name (char *ptr, char **dst)
{
  while (*ptr == ' ')
    ptr++;
  *dst = ptr;
  while (*ptr && *ptr != ' ')
    ptr++;
  *ptr = 0;
  return ptr+1;
}

/* Process any magic embedded commands in a section called .drectve.  */

static int
process_embedded_commands (bfd *output_bfd,
			   struct bfd_link_info *info ATTRIBUTE_UNUSED,
			   bfd *abfd)
{
  asection *sec = bfd_get_section_by_name (abfd, ".drectve");
  char *s;
  char *e;
  char *copy;

  if (!sec)
    return 1;

  copy = bfd_malloc (sec->_raw_size);
  if (!copy)
    return 0;

  if (! bfd_get_section_contents (abfd, sec, copy, (bfd_vma) 0, sec->_raw_size))
    {
      free (copy);
      return 0;
    }
  e = copy + sec->_raw_size;

  for (s = copy;  s < e ; )
    {
      if (s[0]!= '-')
	{
	  s++;
	  continue;
	}
      if (strncmp (s,"-attr", 5) == 0)
	{
	  char *name;
	  char *attribs;
	  asection *asec;
	  int loop = 1;
	  int had_write = 0;
	  int had_read = 0;
	  int had_exec= 0;
	  int had_shared= 0;

	  s += 5;
	  s = get_name (s, &name);
	  s = get_name (s, &attribs);

	  while (loop)
	    {
	      switch (*attribs++)
		{
		case 'W':
		  had_write = 1;
		  break;
		case 'R':
		  had_read = 1;
		  break;
		case 'S':
		  had_shared = 1;
		  break;
		case 'X':
		  had_exec = 1;
		  break;
		default:
		  loop = 0;
		}
	    }
	  asec = bfd_get_section_by_name (abfd, name);
	  if (asec)
	    {
	      if (had_exec)
		asec->flags |= SEC_CODE;
	      if (!had_write)
		asec->flags |= SEC_READONLY;
	    }
	}
      else if (strncmp (s,"-heap", 5) == 0)
	s = dores_com (s+5, output_bfd, 1);

      else if (strncmp (s,"-stack", 6) == 0)
	s = dores_com (s+6, output_bfd, 0);

      else
	s++;
    }
  free (copy);
  return 1;
}

/* Place a marker against all symbols which are used by relocations.
   This marker can be picked up by the 'do we skip this symbol ?'
   loop in _bfd_coff_link_input_bfd() and used to prevent skipping
   that symbol.  */

static void
mark_relocs (struct coff_final_link_info *finfo, bfd *input_bfd)
{
  asection * a;

  if ((bfd_get_file_flags (input_bfd) & HAS_SYMS) == 0)
    return;

  for (a = input_bfd->sections; a != (asection *) NULL; a = a->next)
    {
      struct internal_reloc *	internal_relocs;
      struct internal_reloc *	irel;
      struct internal_reloc *	irelend;

      if ((a->flags & SEC_RELOC) == 0 || a->reloc_count  < 1)
	continue;
      /* Don't mark relocs in excluded sections.  */
      if (a->output_section == bfd_abs_section_ptr)
	continue;

      /* Read in the relocs.  */
      internal_relocs = _bfd_coff_read_internal_relocs
	(input_bfd, a, FALSE,
	 finfo->external_relocs,
	 finfo->info->relocatable,
	 (finfo->info->relocatable
	  ? (finfo->section_info[ a->output_section->target_index ].relocs + a->output_section->reloc_count)
	  : finfo->internal_relocs)
	);

      if (internal_relocs == NULL)
	continue;

      irel     = internal_relocs;
      irelend  = irel + a->reloc_count;

      /* Place a mark in the sym_indices array (whose entries have
	 been initialised to 0) for all of the symbols that are used
	 in the relocation table.  This will then be picked up in the
	 skip/don't-skip pass.  */
      for (; irel < irelend; irel++)
	finfo->sym_indices[ irel->r_symndx ] = -1;
    }
}

/* Link an input file into the linker output file.  This function
   handles all the sections and relocations of the input file at once.  */

bfd_boolean
_bfd_coff_link_input_bfd (struct coff_final_link_info *finfo, bfd *input_bfd)
{
  unsigned int n_tmask = coff_data (input_bfd)->local_n_tmask;
  unsigned int n_btshft = coff_data (input_bfd)->local_n_btshft;
#if 0
  unsigned int n_btmask = coff_data (input_bfd)->local_n_btmask;
#endif
  bfd_boolean (*adjust_symndx)
    (bfd *, struct bfd_link_info *, bfd *, asection *,
     struct internal_reloc *, bfd_boolean *);
  bfd *output_bfd;
  const char *strings;
  bfd_size_type syment_base;
  bfd_boolean copy, hash;
  bfd_size_type isymesz;
  bfd_size_type osymesz;
  bfd_size_type linesz;
  bfd_byte *esym;
  bfd_byte *esym_end;
  struct internal_syment *isymp;
  asection **secpp;
  long *indexp;
  unsigned long output_index;
  bfd_byte *outsym;
  struct coff_link_hash_entry **sym_hash;
  asection *o;

  /* Move all the symbols to the output file.  */

  output_bfd = finfo->output_bfd;
  strings = NULL;
  syment_base = obj_raw_syment_count (output_bfd);
  isymesz = bfd_coff_symesz (input_bfd);
  osymesz = bfd_coff_symesz (output_bfd);
  linesz = bfd_coff_linesz (input_bfd);
  BFD_ASSERT (linesz == bfd_coff_linesz (output_bfd));

  copy = FALSE;
  if (! finfo->info->keep_memory)
    copy = TRUE;
  hash = TRUE;
  if ((output_bfd->flags & BFD_TRADITIONAL_FORMAT) != 0)
    hash = FALSE;

  if (! _bfd_coff_get_external_symbols (input_bfd))
    return FALSE;

  esym = (bfd_byte *) obj_coff_external_syms (input_bfd);
  esym_end = esym + obj_raw_syment_count (input_bfd) * isymesz;
  isymp = finfo->internal_syms;
  secpp = finfo->sec_ptrs;
  indexp = finfo->sym_indices;
  output_index = syment_base;
  outsym = finfo->outsyms;

  if (coff_data (output_bfd)->pe
      && ! process_embedded_commands (output_bfd, finfo->info, input_bfd))
    return FALSE;

  /* If we are going to perform relocations and also strip/discard some
     symbols then we must make sure that we do not strip/discard those
     symbols that are going to be involved in the relocations.  */
  if ((   finfo->info->strip   != strip_none
       || finfo->info->discard != discard_none)
      && finfo->info->relocatable)
    {
      /* Mark the symbol array as 'not-used'.  */
      memset (indexp, 0, obj_raw_syment_count (input_bfd) * sizeof * indexp);

      mark_relocs (finfo, input_bfd);
    }

  while (esym < esym_end)
    {
      struct internal_syment isym;
      enum coff_symbol_classification classification;
      bfd_boolean skip;
      bfd_boolean global;
      bfd_boolean dont_skip_symbol;
      int add;

      bfd_coff_swap_sym_in (input_bfd, esym, isymp);

      /* Make a copy of *isymp so that the relocate_section function
	 always sees the original values.  This is more reliable than
	 always recomputing the symbol value even if we are stripping
	 the symbol.  */
      isym = *isymp;

      classification = bfd_coff_classify_symbol (input_bfd, &isym);
      switch (classification)
	{
	default:
	  abort ();
	case COFF_SYMBOL_GLOBAL:
	case COFF_SYMBOL_PE_SECTION:
	case COFF_SYMBOL_LOCAL:
	  *secpp = coff_section_from_bfd_index (input_bfd, isym.n_scnum);
	  break;
	case COFF_SYMBOL_COMMON:
	  *secpp = bfd_com_section_ptr;
	  break;
	case COFF_SYMBOL_UNDEFINED:
	  *secpp = bfd_und_section_ptr;
	  break;
	}

      /* Extract the flag indicating if this symbol is used by a
         relocation.  */
      if ((finfo->info->strip != strip_none
	   || finfo->info->discard != discard_none)
	  && finfo->info->relocatable)
	dont_skip_symbol = *indexp;
      else
	dont_skip_symbol = FALSE;

      *indexp = -1;

      skip = FALSE;
      global = FALSE;
      add = 1 + isym.n_numaux;

      /* If we are stripping all symbols, we want to skip this one.  */
      if (finfo->info->strip == strip_all && ! dont_skip_symbol)
	skip = TRUE;

      if (! skip)
	{
	  switch (classification)
	    {
	    default:
	      abort ();
	    case COFF_SYMBOL_GLOBAL:
	    case COFF_SYMBOL_COMMON:
	    case COFF_SYMBOL_PE_SECTION:
	      /* This is a global symbol.  Global symbols come at the
		 end of the symbol table, so skip them for now.
		 Locally defined function symbols, however, are an
		 exception, and are not moved to the end.  */
	      global = TRUE;
	      if (! ISFCN (isym.n_type))
		skip = TRUE;
	      break;

	    case COFF_SYMBOL_UNDEFINED:
	      /* Undefined symbols are left for the end.  */
	      global = TRUE;
	      skip = TRUE;
	      break;

	    case COFF_SYMBOL_LOCAL:
	      /* This is a local symbol.  Skip it if we are discarding
                 local symbols.  */
	      if (finfo->info->discard == discard_all && ! dont_skip_symbol)
		skip = TRUE;
	      break;
	    }
	}

#ifndef COFF_WITH_PE
      /* Skip section symbols for sections which are not going to be
	 emitted.  */
      if (!skip
	  && dont_skip_symbol == 0
	  && isym.n_sclass == C_STAT
	  && isym.n_type == T_NULL
          && isym.n_numaux > 0
	  && (*secpp)->output_section == bfd_abs_section_ptr)
	skip = TRUE;
#endif

      /* If we stripping debugging symbols, and this is a debugging
         symbol, then skip it.  FIXME: gas sets the section to N_ABS
         for some types of debugging symbols; I don't know if this is
         a bug or not.  In any case, we handle it here.  */
      if (! skip
	  && finfo->info->strip == strip_debugger
	  && ! dont_skip_symbol
	  && (isym.n_scnum == N_DEBUG
	      || (isym.n_scnum == N_ABS
		  && (isym.n_sclass == C_AUTO
		      || isym.n_sclass == C_REG
		      || isym.n_sclass == C_MOS
		      || isym.n_sclass == C_MOE
		      || isym.n_sclass == C_MOU
		      || isym.n_sclass == C_ARG
		      || isym.n_sclass == C_REGPARM
		      || isym.n_sclass == C_FIELD
		      || isym.n_sclass == C_EOS))))
	skip = TRUE;

      /* If some symbols are stripped based on the name, work out the
	 name and decide whether to skip this symbol.  */
      if (! skip
	  && (finfo->info->strip == strip_some
	      || finfo->info->discard == discard_l))
	{
	  const char *name;
	  char buf[SYMNMLEN + 1];

	  name = _bfd_coff_internal_syment_name (input_bfd, &isym, buf);
	  if (name == NULL)
	    return FALSE;

	  if (! dont_skip_symbol
	      && ((finfo->info->strip == strip_some
		   && (bfd_hash_lookup (finfo->info->keep_hash, name, FALSE,
				    FALSE) == NULL))
		   || (! global
		       && finfo->info->discard == discard_l
		       && bfd_is_local_label_name (input_bfd, name))))
	    skip = TRUE;
	}

      /* If this is an enum, struct, or union tag, see if we have
         already output an identical type.  */
      if (! skip
	  && (finfo->output_bfd->flags & BFD_TRADITIONAL_FORMAT) == 0
	  && (isym.n_sclass == C_ENTAG
	      || isym.n_sclass == C_STRTAG
	      || isym.n_sclass == C_UNTAG)
	  && isym.n_numaux == 1)
	{
	  const char *name;
	  char buf[SYMNMLEN + 1];
	  struct coff_debug_merge_hash_entry *mh;
	  struct coff_debug_merge_type *mt;
	  union internal_auxent aux;
	  struct coff_debug_merge_element **epp;
	  bfd_byte *esl, *eslend;
	  struct internal_syment *islp;
	  bfd_size_type amt;

	  name = _bfd_coff_internal_syment_name (input_bfd, &isym, buf);
	  if (name == NULL)
	    return FALSE;

	  /* Ignore fake names invented by compiler; treat them all as
             the same name.  */
	  if (*name == '~' || *name == '.' || *name == '$'
	      || (*name == bfd_get_symbol_leading_char (input_bfd)
		  && (name[1] == '~' || name[1] == '.' || name[1] == '$')))
	    name = "";

	  mh = coff_debug_merge_hash_lookup (&finfo->debug_merge, name,
					     TRUE, TRUE);
	  if (mh == NULL)
	    return FALSE;

	  /* Allocate memory to hold type information.  If this turns
             out to be a duplicate, we pass this address to
             bfd_release.  */
	  amt = sizeof (struct coff_debug_merge_type);
	  mt = bfd_alloc (input_bfd, amt);
	  if (mt == NULL)
	    return FALSE;
	  mt->class = isym.n_sclass;

	  /* Pick up the aux entry, which points to the end of the tag
             entries.  */
	  bfd_coff_swap_aux_in (input_bfd, (esym + isymesz),
				isym.n_type, isym.n_sclass, 0, isym.n_numaux,
				&aux);

	  /* Gather the elements.  */
	  epp = &mt->elements;
	  mt->elements = NULL;
	  islp = isymp + 2;
	  esl = esym + 2 * isymesz;
	  eslend = ((bfd_byte *) obj_coff_external_syms (input_bfd)
		    + aux.x_sym.x_fcnary.x_fcn.x_endndx.l * isymesz);
	  while (esl < eslend)
	    {
	      const char *elename;
	      char elebuf[SYMNMLEN + 1];
	      char *name_copy;

	      bfd_coff_swap_sym_in (input_bfd, esl, islp);

	      amt = sizeof (struct coff_debug_merge_element);
	      *epp = bfd_alloc (input_bfd, amt);
	      if (*epp == NULL)
		return FALSE;

	      elename = _bfd_coff_internal_syment_name (input_bfd, islp,
							elebuf);
	      if (elename == NULL)
		return FALSE;

	      amt = strlen (elename) + 1;
	      name_copy = bfd_alloc (input_bfd, amt);
	      if (name_copy == NULL)
		return FALSE;
	      strcpy (name_copy, elename);

	      (*epp)->name = name_copy;
	      (*epp)->type = islp->n_type;
	      (*epp)->tagndx = 0;
	      if (islp->n_numaux >= 1
		  && islp->n_type != T_NULL
		  && islp->n_sclass != C_EOS)
		{
		  union internal_auxent eleaux;
		  long indx;

		  bfd_coff_swap_aux_in (input_bfd, (esl + isymesz),
					islp->n_type, islp->n_sclass, 0,
					islp->n_numaux, &eleaux);
		  indx = eleaux.x_sym.x_tagndx.l;

		  /* FIXME: If this tagndx entry refers to a symbol
		     defined later in this file, we just ignore it.
		     Handling this correctly would be tedious, and may
		     not be required.  */
		  if (indx > 0
		      && (indx
			  < ((esym -
			      (bfd_byte *) obj_coff_external_syms (input_bfd))
			     / (long) isymesz)))
		    {
		      (*epp)->tagndx = finfo->sym_indices[indx];
		      if ((*epp)->tagndx < 0)
			(*epp)->tagndx = 0;
		    }
		}
	      epp = &(*epp)->next;
	      *epp = NULL;

	      esl += (islp->n_numaux + 1) * isymesz;
	      islp += islp->n_numaux + 1;
	    }

	  /* See if we already have a definition which matches this
             type.  We always output the type if it has no elements,
             for simplicity.  */
	  if (mt->elements == NULL)
	    bfd_release (input_bfd, mt);
	  else
	    {
	      struct coff_debug_merge_type *mtl;

	      for (mtl = mh->types; mtl != NULL; mtl = mtl->next)
		{
		  struct coff_debug_merge_element *me, *mel;

		  if (mtl->class != mt->class)
		    continue;

		  for (me = mt->elements, mel = mtl->elements;
		       me != NULL && mel != NULL;
		       me = me->next, mel = mel->next)
		    {
		      if (strcmp (me->name, mel->name) != 0
			  || me->type != mel->type
			  || me->tagndx != mel->tagndx)
			break;
		    }

		  if (me == NULL && mel == NULL)
		    break;
		}

	      if (mtl == NULL || (bfd_size_type) mtl->indx >= syment_base)
		{
		  /* This is the first definition of this type.  */
		  mt->indx = output_index;
		  mt->next = mh->types;
		  mh->types = mt;
		}
	      else
		{
		  /* This is a redefinition which can be merged.  */
		  bfd_release (input_bfd, mt);
		  *indexp = mtl->indx;
		  add = (eslend - esym) / isymesz;
		  skip = TRUE;
		}
	    }
	}

      /* We now know whether we are to skip this symbol or not.  */
      if (! skip)
	{
	  /* Adjust the symbol in order to output it.  */

	  if (isym._n._n_n._n_zeroes == 0
	      && isym._n._n_n._n_offset != 0)
	    {
	      const char *name;
	      bfd_size_type indx;

	      /* This symbol has a long name.  Enter it in the string
		 table we are building.  Note that we do not check
		 bfd_coff_symname_in_debug.  That is only true for
		 XCOFF, and XCOFF requires different linking code
		 anyhow.  */
	      name = _bfd_coff_internal_syment_name (input_bfd, &isym, NULL);
	      if (name == NULL)
		return FALSE;
	      indx = _bfd_stringtab_add (finfo->strtab, name, hash, copy);
	      if (indx == (bfd_size_type) -1)
		return FALSE;
	      isym._n._n_n._n_offset = STRING_SIZE_SIZE + indx;
	    }

	  switch (isym.n_sclass)
	    {
	    case C_AUTO:
	    case C_MOS:
	    case C_EOS:
	    case C_MOE:
	    case C_MOU:
	    case C_UNTAG:
	    case C_STRTAG:
	    case C_ENTAG:
	    case C_TPDEF:
	    case C_ARG:
	    case C_USTATIC:
	    case C_REG:
	    case C_REGPARM:
	    case C_FIELD:
	      /* The symbol value should not be modified.  */
	      break;

	    case C_FCN:
	      if (obj_pe (input_bfd)
		  && strcmp (isym.n_name, ".bf") != 0
		  && isym.n_scnum > 0)
		{
		  /* For PE, .lf and .ef get their value left alone,
		     while .bf gets relocated.  However, they all have
		     "real" section numbers, and need to be moved into
		     the new section.  */
		  isym.n_scnum = (*secpp)->output_section->target_index;
		  break;
		}
	      /* Fall through.  */
	    default:
	    case C_LABEL:  /* Not completely sure about these 2 */
	    case C_EXTDEF:
	    case C_BLOCK:
	    case C_EFCN:
	    case C_NULL:
	    case C_EXT:
	    case C_STAT:
	    case C_SECTION:
	    case C_NT_WEAK:
	      /* Compute new symbol location.  */
	    if (isym.n_scnum > 0)
	      {
		isym.n_scnum = (*secpp)->output_section->target_index;
		isym.n_value += (*secpp)->output_offset;
		if (! obj_pe (input_bfd))
		  isym.n_value -= (*secpp)->vma;
		if (! obj_pe (finfo->output_bfd))
		  isym.n_value += (*secpp)->output_section->vma;
	      }
	    break;

	    case C_FILE:
	      /* The value of a C_FILE symbol is the symbol index of
		 the next C_FILE symbol.  The value of the last C_FILE
		 symbol is the symbol index to the first external
		 symbol (actually, coff_renumber_symbols does not get
		 this right--it just sets the value of the last C_FILE
		 symbol to zero--and nobody has ever complained about
		 it).  We try to get this right, below, just before we
		 write the symbols out, but in the general case we may
		 have to write the symbol out twice.  */
	      if (finfo->last_file_index != -1
		  && finfo->last_file.n_value != (bfd_vma) output_index)
		{
		  /* We must correct the value of the last C_FILE
                     entry.  */
		  finfo->last_file.n_value = output_index;
		  if ((bfd_size_type) finfo->last_file_index >= syment_base)
		    {
		      /* The last C_FILE symbol is in this input file.  */
		      bfd_coff_swap_sym_out (output_bfd,
					     &finfo->last_file,
					     (finfo->outsyms
					      + ((finfo->last_file_index
						  - syment_base)
						 * osymesz)));
		    }
		  else
		    {
		      file_ptr pos;

		      /* We have already written out the last C_FILE
			 symbol.  We need to write it out again.  We
			 borrow *outsym temporarily.  */
		      bfd_coff_swap_sym_out (output_bfd,
					     &finfo->last_file, outsym);
		      pos = obj_sym_filepos (output_bfd);
		      pos += finfo->last_file_index * osymesz;
		      if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
			  || bfd_bwrite (outsym, osymesz, output_bfd) != osymesz)
			return FALSE;
		    }
		}

	      finfo->last_file_index = output_index;
	      finfo->last_file = isym;
	      break;
	    }

	  /* If doing task linking, convert normal global function symbols to
	     static functions.  */
	  if (finfo->info->task_link && IS_EXTERNAL (input_bfd, isym))
	    isym.n_sclass = C_STAT;

	  /* Output the symbol.  */
	  bfd_coff_swap_sym_out (output_bfd, &isym, outsym);

	  *indexp = output_index;

	  if (global)
	    {
	      long indx;
	      struct coff_link_hash_entry *h;

	      indx = ((esym - (bfd_byte *) obj_coff_external_syms (input_bfd))
		      / isymesz);
	      h = obj_coff_sym_hashes (input_bfd)[indx];
	      if (h == NULL)
		{
		  /* This can happen if there were errors earlier in
                     the link.  */
		  bfd_set_error (bfd_error_bad_value);
		  return FALSE;
		}
	      h->indx = output_index;
	    }

	  output_index += add;
	  outsym += add * osymesz;
	}

      esym += add * isymesz;
      isymp += add;
      ++secpp;
      ++indexp;
      for (--add; add > 0; --add)
	{
	  *secpp++ = NULL;
	  *indexp++ = -1;
	}
    }

  /* Fix up the aux entries.  This must be done in a separate pass,
     because we don't know the correct symbol indices until we have
     already decided which symbols we are going to keep.  */
  esym = (bfd_byte *) obj_coff_external_syms (input_bfd);
  esym_end = esym + obj_raw_syment_count (input_bfd) * isymesz;
  isymp = finfo->internal_syms;
  indexp = finfo->sym_indices;
  sym_hash = obj_coff_sym_hashes (input_bfd);
  outsym = finfo->outsyms;

  while (esym < esym_end)
    {
      int add;

      add = 1 + isymp->n_numaux;

      if ((*indexp < 0
	   || (bfd_size_type) *indexp < syment_base)
	  && (*sym_hash == NULL
	      || (*sym_hash)->auxbfd != input_bfd))
	esym += add * isymesz;
      else
	{
	  struct coff_link_hash_entry *h;
	  int i;

	  h = NULL;
	  if (*indexp < 0)
	    {
	      h = *sym_hash;

	      /* The m68k-motorola-sysv assembler will sometimes
                 generate two symbols with the same name, but only one
                 will have aux entries.  */
	      BFD_ASSERT (isymp->n_numaux == 0
			  || h->numaux == isymp->n_numaux);
	    }

	  esym += isymesz;

	  if (h == NULL)
	    outsym += osymesz;

	  /* Handle the aux entries.  This handling is based on
	     coff_pointerize_aux.  I don't know if it always correct.  */
	  for (i = 0; i < isymp->n_numaux && esym < esym_end; i++)
	    {
	      union internal_auxent aux;
	      union internal_auxent *auxp;

	      if (h != NULL)
		auxp = h->aux + i;
	      else
		{
		  bfd_coff_swap_aux_in (input_bfd, esym, isymp->n_type,
					isymp->n_sclass, i, isymp->n_numaux, &aux);
		  auxp = &aux;
		}

	      if (isymp->n_sclass == C_FILE)
		{
		  /* If this is a long filename, we must put it in the
		     string table.  */
		  if (auxp->x_file.x_n.x_zeroes == 0
		      && auxp->x_file.x_n.x_offset != 0)
		    {
		      const char *filename;
		      bfd_size_type indx;

		      BFD_ASSERT (auxp->x_file.x_n.x_offset
				  >= STRING_SIZE_SIZE);
		      if (strings == NULL)
			{
			  strings = _bfd_coff_read_string_table (input_bfd);
			  if (strings == NULL)
			    return FALSE;
			}
		      filename = strings + auxp->x_file.x_n.x_offset;
		      indx = _bfd_stringtab_add (finfo->strtab, filename,
						 hash, copy);
		      if (indx == (bfd_size_type) -1)
			return FALSE;
		      auxp->x_file.x_n.x_offset = STRING_SIZE_SIZE + indx;
		    }
		}
	      else if (isymp->n_sclass != C_STAT || isymp->n_type != T_NULL)
		{
		  unsigned long indx;

		  if (ISFCN (isymp->n_type)
		      || ISTAG (isymp->n_sclass)
		      || isymp->n_sclass == C_BLOCK
		      || isymp->n_sclass == C_FCN)
		    {
		      indx = auxp->x_sym.x_fcnary.x_fcn.x_endndx.l;
		      if (indx > 0
			  && indx < obj_raw_syment_count (input_bfd))
			{
			  /* We look forward through the symbol for
                             the index of the next symbol we are going
                             to include.  I don't know if this is
                             entirely right.  */
			  while ((finfo->sym_indices[indx] < 0
				  || ((bfd_size_type) finfo->sym_indices[indx]
				      < syment_base))
				 && indx < obj_raw_syment_count (input_bfd))
			    ++indx;
			  if (indx >= obj_raw_syment_count (input_bfd))
			    indx = output_index;
			  else
			    indx = finfo->sym_indices[indx];
			  auxp->x_sym.x_fcnary.x_fcn.x_endndx.l = indx;
			}
		    }

		  indx = auxp->x_sym.x_tagndx.l;
		  if (indx > 0 && indx < obj_raw_syment_count (input_bfd))
		    {
		      long symindx;

		      symindx = finfo->sym_indices[indx];
		      if (symindx < 0)
			auxp->x_sym.x_tagndx.l = 0;
		      else
			auxp->x_sym.x_tagndx.l = symindx;
		    }

		  /* The .bf symbols are supposed to be linked through
		     the endndx field.  We need to carry this list
		     across object files.  */
		  if (i == 0
		      && h == NULL
		      && isymp->n_sclass == C_FCN
		      && (isymp->_n._n_n._n_zeroes != 0
			  || isymp->_n._n_n._n_offset == 0)
		      && isymp->_n._n_name[0] == '.'
		      && isymp->_n._n_name[1] == 'b'
		      && isymp->_n._n_name[2] == 'f'
		      && isymp->_n._n_name[3] == '\0')
		    {
		      if (finfo->last_bf_index != -1)
			{
			  finfo->last_bf.x_sym.x_fcnary.x_fcn.x_endndx.l =
			    *indexp;

			  if ((bfd_size_type) finfo->last_bf_index
			      >= syment_base)
			    {
			      void *auxout;

			      /* The last .bf symbol is in this input
				 file.  This will only happen if the
				 assembler did not set up the .bf
				 endndx symbols correctly.  */
			      auxout = (finfo->outsyms
					+ ((finfo->last_bf_index
					    - syment_base)
					   * osymesz));

			      bfd_coff_swap_aux_out (output_bfd,
						     &finfo->last_bf,
						     isymp->n_type,
						     isymp->n_sclass,
						     0, isymp->n_numaux,
						     auxout);
			    }
			  else
			    {
			      file_ptr pos;

			      /* We have already written out the last
                                 .bf aux entry.  We need to write it
                                 out again.  We borrow *outsym
                                 temporarily.  FIXME: This case should
                                 be made faster.  */
			      bfd_coff_swap_aux_out (output_bfd,
						     &finfo->last_bf,
						     isymp->n_type,
						     isymp->n_sclass,
						     0, isymp->n_numaux,
						     outsym);
			      pos = obj_sym_filepos (output_bfd);
			      pos += finfo->last_bf_index * osymesz;
			      if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
				  || (bfd_bwrite (outsym, osymesz, output_bfd)
				      != osymesz))
				return FALSE;
			    }
			}

		      if (auxp->x_sym.x_fcnary.x_fcn.x_endndx.l != 0)
			finfo->last_bf_index = -1;
		      else
			{
			  /* The endndx field of this aux entry must
                             be updated with the symbol number of the
                             next .bf symbol.  */
			  finfo->last_bf = *auxp;
			  finfo->last_bf_index = (((outsym - finfo->outsyms)
						   / osymesz)
						  + syment_base);
			}
		    }
		}

	      if (h == NULL)
		{
		  bfd_coff_swap_aux_out (output_bfd, auxp, isymp->n_type,
					 isymp->n_sclass, i, isymp->n_numaux,
					 outsym);
		  outsym += osymesz;
		}

	      esym += isymesz;
	    }
	}

      indexp += add;
      isymp += add;
      sym_hash += add;
    }

  /* Relocate the line numbers, unless we are stripping them.  */
  if (finfo->info->strip == strip_none
      || finfo->info->strip == strip_some)
    {
      for (o = input_bfd->sections; o != NULL; o = o->next)
	{
	  bfd_vma offset;
	  bfd_byte *eline;
	  bfd_byte *elineend;
	  bfd_byte *oeline;
	  bfd_boolean skipping;
	  file_ptr pos;
	  bfd_size_type amt;

	  /* FIXME: If SEC_HAS_CONTENTS is not for the section, then
	     build_link_order in ldwrite.c will not have created a
	     link order, which means that we will not have seen this
	     input section in _bfd_coff_final_link, which means that
	     we will not have allocated space for the line numbers of
	     this section.  I don't think line numbers can be
	     meaningful for a section which does not have
	     SEC_HAS_CONTENTS set, but, if they do, this must be
	     changed.  */
	  if (o->lineno_count == 0
	      || (o->output_section->flags & SEC_HAS_CONTENTS) == 0)
	    continue;

	  if (bfd_seek (input_bfd, o->line_filepos, SEEK_SET) != 0
	      || bfd_bread (finfo->linenos, linesz * o->lineno_count,
			   input_bfd) != linesz * o->lineno_count)
	    return FALSE;

	  offset = o->output_section->vma + o->output_offset - o->vma;
	  eline = finfo->linenos;
	  oeline = finfo->linenos;
	  elineend = eline + linesz * o->lineno_count;
	  skipping = FALSE;
	  for (; eline < elineend; eline += linesz)
	    {
	      struct internal_lineno iline;

	      bfd_coff_swap_lineno_in (input_bfd, eline, &iline);

	      if (iline.l_lnno != 0)
		iline.l_addr.l_paddr += offset;
	      else if (iline.l_addr.l_symndx >= 0
		       && ((unsigned long) iline.l_addr.l_symndx
			   < obj_raw_syment_count (input_bfd)))
		{
		  long indx;

		  indx = finfo->sym_indices[iline.l_addr.l_symndx];

		  if (indx < 0)
		    {
		      /* These line numbers are attached to a symbol
			 which we are stripping.  We must discard the
			 line numbers because reading them back with
			 no associated symbol (or associating them all
			 with symbol #0) will fail.  We can't regain
			 the space in the output file, but at least
			 they're dense.  */
		      skipping = TRUE;
		    }
		  else
		    {
		      struct internal_syment is;
		      union internal_auxent ia;

		      /* Fix up the lnnoptr field in the aux entry of
			 the symbol.  It turns out that we can't do
			 this when we modify the symbol aux entries,
			 because gas sometimes screws up the lnnoptr
			 field and makes it an offset from the start
			 of the line numbers rather than an absolute
			 file index.  */
		      bfd_coff_swap_sym_in (output_bfd,
					    (finfo->outsyms
					     + ((indx - syment_base)
						* osymesz)), &is);
		      if ((ISFCN (is.n_type)
			   || is.n_sclass == C_BLOCK)
			  && is.n_numaux >= 1)
			{
			  void *auxptr;

			  auxptr = (finfo->outsyms
				    + ((indx - syment_base + 1)
				       * osymesz));
			  bfd_coff_swap_aux_in (output_bfd, auxptr,
						is.n_type, is.n_sclass,
						0, is.n_numaux, &ia);
			  ia.x_sym.x_fcnary.x_fcn.x_lnnoptr =
			    (o->output_section->line_filepos
			     + o->output_section->lineno_count * linesz
			     + eline - finfo->linenos);
			  bfd_coff_swap_aux_out (output_bfd, &ia,
						 is.n_type, is.n_sclass, 0,
						 is.n_numaux, auxptr);
			}

		      skipping = FALSE;
		    }

		  iline.l_addr.l_symndx = indx;
		}

	      if (!skipping)
	        {
		  bfd_coff_swap_lineno_out (output_bfd, &iline, oeline);
		  oeline += linesz;
		}
	    }

	  pos = o->output_section->line_filepos;
	  pos += o->output_section->lineno_count * linesz;
	  amt = oeline - finfo->linenos;
	  if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
	      || bfd_bwrite (finfo->linenos, amt, output_bfd) != amt)
	    return FALSE;

	  o->output_section->lineno_count += amt / linesz;
	}
    }

  /* If we swapped out a C_FILE symbol, guess that the next C_FILE
     symbol will be the first symbol in the next input file.  In the
     normal case, this will save us from writing out the C_FILE symbol
     again.  */
  if (finfo->last_file_index != -1
      && (bfd_size_type) finfo->last_file_index >= syment_base)
    {
      finfo->last_file.n_value = output_index;
      bfd_coff_swap_sym_out (output_bfd, &finfo->last_file,
			     (finfo->outsyms
			      + ((finfo->last_file_index - syment_base)
				 * osymesz)));
    }

  /* Write the modified symbols to the output file.  */
  if (outsym > finfo->outsyms)
    {
      file_ptr pos;
      bfd_size_type amt;

      pos = obj_sym_filepos (output_bfd) + syment_base * osymesz;
      amt = outsym - finfo->outsyms;
      if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
	  || bfd_bwrite (finfo->outsyms, amt, output_bfd) != amt)
	return FALSE;

      BFD_ASSERT ((obj_raw_syment_count (output_bfd)
		   + (outsym - finfo->outsyms) / osymesz)
		  == output_index);

      obj_raw_syment_count (output_bfd) = output_index;
    }

  /* Relocate the contents of each section.  */
  adjust_symndx = coff_backend_info (input_bfd)->_bfd_coff_adjust_symndx;
  for (o = input_bfd->sections; o != NULL; o = o->next)
    {
      bfd_byte *contents;
      struct coff_section_tdata *secdata;

      if (! o->linker_mark)
	/* This section was omitted from the link.  */
	continue;

      if ((o->flags & SEC_HAS_CONTENTS) == 0
	  || (o->_raw_size == 0 && (o->flags & SEC_RELOC) == 0))
	{
	  if ((o->flags & SEC_RELOC) != 0
	      && o->reloc_count != 0)
	    {
	      ((*_bfd_error_handler)
	       (_("%s: relocs in section `%s', but it has no contents"),
		bfd_archive_filename (input_bfd),
		bfd_get_section_name (input_bfd, o)));
	      bfd_set_error (bfd_error_no_contents);
	      return FALSE;
	    }

	  continue;
	}

      secdata = coff_section_data (input_bfd, o);
      if (secdata != NULL && secdata->contents != NULL)
	contents = secdata->contents;
      else
	{
	  if (! bfd_get_section_contents (input_bfd, o, finfo->contents,
					  (file_ptr) 0, o->_raw_size))
	    return FALSE;
	  contents = finfo->contents;
	}

      if ((o->flags & SEC_RELOC) != 0)
	{
	  int target_index;
	  struct internal_reloc *internal_relocs;
	  struct internal_reloc *irel;

	  /* Read in the relocs.  */
	  target_index = o->output_section->target_index;
	  internal_relocs = (_bfd_coff_read_internal_relocs
			     (input_bfd, o, FALSE, finfo->external_relocs,
			      finfo->info->relocatable,
			      (finfo->info->relocatable
			       ? (finfo->section_info[target_index].relocs
				  + o->output_section->reloc_count)
			       : finfo->internal_relocs)));
	  if (internal_relocs == NULL)
	    return FALSE;

	  /* Call processor specific code to relocate the section
             contents.  */
	  if (! bfd_coff_relocate_section (output_bfd, finfo->info,
					   input_bfd, o,
					   contents,
					   internal_relocs,
					   finfo->internal_syms,
					   finfo->sec_ptrs))
	    return FALSE;

	  if (finfo->info->relocatable)
	    {
	      bfd_vma offset;
	      struct internal_reloc *irelend;
	      struct coff_link_hash_entry **rel_hash;

	      offset = o->output_section->vma + o->output_offset - o->vma;
	      irel = internal_relocs;
	      irelend = irel + o->reloc_count;
	      rel_hash = (finfo->section_info[target_index].rel_hashes
			  + o->output_section->reloc_count);
	      for (; irel < irelend; irel++, rel_hash++)
		{
		  struct coff_link_hash_entry *h;
		  bfd_boolean adjusted;

		  *rel_hash = NULL;

		  /* Adjust the reloc address and symbol index.  */
		  irel->r_vaddr += offset;

		  if (irel->r_symndx == -1)
		    continue;

		  if (adjust_symndx)
		    {
		      if (! (*adjust_symndx) (output_bfd, finfo->info,
					      input_bfd, o, irel,
					      &adjusted))
			return FALSE;
		      if (adjusted)
			continue;
		    }

		  h = obj_coff_sym_hashes (input_bfd)[irel->r_symndx];
		  if (h != NULL)
		    {
		      /* This is a global symbol.  */
		      if (h->indx >= 0)
			irel->r_symndx = h->indx;
		      else
			{
			  /* This symbol is being written at the end
			     of the file, and we do not yet know the
			     symbol index.  We save the pointer to the
			     hash table entry in the rel_hash list.
			     We set the indx field to -2 to indicate
			     that this symbol must not be stripped.  */
			  *rel_hash = h;
			  h->indx = -2;
			}
		    }
		  else
		    {
		      long indx;

		      indx = finfo->sym_indices[irel->r_symndx];
		      if (indx != -1)
			irel->r_symndx = indx;
		      else
			{
			  struct internal_syment *is;
			  const char *name;
			  char buf[SYMNMLEN + 1];

			  /* This reloc is against a symbol we are
                             stripping.  This should have been handled
			     by the 'dont_skip_symbol' code in the while
			     loop at the top of this function.  */
			  is = finfo->internal_syms + irel->r_symndx;

			  name = (_bfd_coff_internal_syment_name
				  (input_bfd, is, buf));
			  if (name == NULL)
			    return FALSE;

			  if (! ((*finfo->info->callbacks->unattached_reloc)
				 (finfo->info, name, input_bfd, o,
				  irel->r_vaddr)))
			    return FALSE;
			}
		    }
		}

	      o->output_section->reloc_count += o->reloc_count;
	    }
	}

      /* Write out the modified section contents.  */
      if (secdata == NULL || secdata->stab_info == NULL)
	{
	  file_ptr loc = o->output_offset * bfd_octets_per_byte (output_bfd);
	  bfd_size_type amt = (o->_cooked_size != 0
			       ? o->_cooked_size : o->_raw_size);
	  if (! bfd_set_section_contents (output_bfd, o->output_section,
					  contents, loc, amt))
	    return FALSE;
	}
      else
	{
	  if (! (_bfd_write_section_stabs
		 (output_bfd, &coff_hash_table (finfo->info)->stab_info,
		  o, &secdata->stab_info, contents)))
	    return FALSE;
	}
    }

  if (! finfo->info->keep_memory
      && ! _bfd_coff_free_symbols (input_bfd))
    return FALSE;

  return TRUE;
}

/* Write out a global symbol.  Called via coff_link_hash_traverse.  */

bfd_boolean
_bfd_coff_write_global_sym (struct coff_link_hash_entry *h, void *data)
{
  struct coff_final_link_info *finfo = (struct coff_final_link_info *) data;
  bfd *output_bfd;
  struct internal_syment isym;
  bfd_size_type symesz;
  unsigned int i;
  file_ptr pos;

  output_bfd = finfo->output_bfd;

  if (h->root.type == bfd_link_hash_warning)
    {
      h = (struct coff_link_hash_entry *) h->root.u.i.link;
      if (h->root.type == bfd_link_hash_new)
	return TRUE;
    }

  if (h->indx >= 0)
    return TRUE;

  if (h->indx != -2
      && (finfo->info->strip == strip_all
	  || (finfo->info->strip == strip_some
	      && (bfd_hash_lookup (finfo->info->keep_hash,
				   h->root.root.string, FALSE, FALSE)
		  == NULL))))
    return TRUE;

  switch (h->root.type)
    {
    default:
    case bfd_link_hash_new:
    case bfd_link_hash_warning:
      abort ();
      return FALSE;

    case bfd_link_hash_undefined:
    case bfd_link_hash_undefweak:
      isym.n_scnum = N_UNDEF;
      isym.n_value = 0;
      break;

    case bfd_link_hash_defined:
    case bfd_link_hash_defweak:
      {
	asection *sec;

	sec = h->root.u.def.section->output_section;
	if (bfd_is_abs_section (sec))
	  isym.n_scnum = N_ABS;
	else
	  isym.n_scnum = sec->target_index;
	isym.n_value = (h->root.u.def.value
			+ h->root.u.def.section->output_offset);
	if (! obj_pe (finfo->output_bfd))
	  isym.n_value += sec->vma;
      }
      break;

    case bfd_link_hash_common:
      isym.n_scnum = N_UNDEF;
      isym.n_value = h->root.u.c.size;
      break;

    case bfd_link_hash_indirect:
      /* Just ignore these.  They can't be handled anyhow.  */
      return TRUE;
    }

  if (strlen (h->root.root.string) <= SYMNMLEN)
    strncpy (isym._n._n_name, h->root.root.string, SYMNMLEN);
  else
    {
      bfd_boolean hash;
      bfd_size_type indx;

      hash = TRUE;
      if ((output_bfd->flags & BFD_TRADITIONAL_FORMAT) != 0)
	hash = FALSE;
      indx = _bfd_stringtab_add (finfo->strtab, h->root.root.string, hash,
				 FALSE);
      if (indx == (bfd_size_type) -1)
	{
	  finfo->failed = TRUE;
	  return FALSE;
	}
      isym._n._n_n._n_zeroes = 0;
      isym._n._n_n._n_offset = STRING_SIZE_SIZE + indx;
    }

  isym.n_sclass = h->class;
  isym.n_type = h->type;

  if (isym.n_sclass == C_NULL)
    isym.n_sclass = C_EXT;

  /* If doing task linking and this is the pass where we convert
     defined globals to statics, then do that conversion now.  If the
     symbol is not being converted, just ignore it and it will be
     output during a later pass.  */
  if (finfo->global_to_static)
    {
      if (! IS_EXTERNAL (output_bfd, isym))
	return TRUE;

      isym.n_sclass = C_STAT;
    }

  /* When a weak symbol is not overridden by a strong one,
     turn it into an external symbol when not building a
     shared or relocatable object.  */
  if (! finfo->info->shared
      && ! finfo->info->relocatable
      && IS_WEAK_EXTERNAL (finfo->output_bfd, isym))
    isym.n_sclass = C_EXT;

  isym.n_numaux = h->numaux;

  bfd_coff_swap_sym_out (output_bfd, &isym, finfo->outsyms);

  symesz = bfd_coff_symesz (output_bfd);

  pos = obj_sym_filepos (output_bfd);
  pos += obj_raw_syment_count (output_bfd) * symesz;
  if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
      || bfd_bwrite (finfo->outsyms, symesz, output_bfd) != symesz)
    {
      finfo->failed = TRUE;
      return FALSE;
    }

  h->indx = obj_raw_syment_count (output_bfd);

  ++obj_raw_syment_count (output_bfd);

  /* Write out any associated aux entries.  Most of the aux entries
     will have been modified in _bfd_coff_link_input_bfd.  We have to
     handle section aux entries here, now that we have the final
     relocation and line number counts.  */
  for (i = 0; i < isym.n_numaux; i++)
    {
      union internal_auxent *auxp;

      auxp = h->aux + i;

      /* Look for a section aux entry here using the same tests that
         coff_swap_aux_out uses.  */
      if (i == 0
	  && (isym.n_sclass == C_STAT
	      || isym.n_sclass == C_HIDDEN)
	  && isym.n_type == T_NULL
	  && (h->root.type == bfd_link_hash_defined
	      || h->root.type == bfd_link_hash_defweak))
	{
	  asection *sec;

	  sec = h->root.u.def.section->output_section;
	  if (sec != NULL)
	    {
	      auxp->x_scn.x_scnlen = (sec->_cooked_size != 0
				      ? sec->_cooked_size
				      : sec->_raw_size);

	      /* For PE, an overflow on the final link reportedly does
                 not matter.  FIXME: Why not?  */
	      if (sec->reloc_count > 0xffff
		  && (! obj_pe (output_bfd)
		      || finfo->info->relocatable))
		(*_bfd_error_handler)
		  (_("%s: %s: reloc overflow: 0x%lx > 0xffff"),
		   bfd_get_filename (output_bfd),
		   bfd_get_section_name (output_bfd, sec),
		   sec->reloc_count);

	      if (sec->lineno_count > 0xffff
		  && (! obj_pe (output_bfd)
		      || finfo->info->relocatable))
		(*_bfd_error_handler)
		  (_("%s: warning: %s: line number overflow: 0x%lx > 0xffff"),
		   bfd_get_filename (output_bfd),
		   bfd_get_section_name (output_bfd, sec),
		   sec->lineno_count);

	      auxp->x_scn.x_nreloc = sec->reloc_count;
	      auxp->x_scn.x_nlinno = sec->lineno_count;
	      auxp->x_scn.x_checksum = 0;
	      auxp->x_scn.x_associated = 0;
	      auxp->x_scn.x_comdat = 0;
	    }
	}

      bfd_coff_swap_aux_out (output_bfd, auxp, isym.n_type,
			     isym.n_sclass, (int) i, isym.n_numaux,
			     finfo->outsyms);
      if (bfd_bwrite (finfo->outsyms, symesz, output_bfd) != symesz)
	{
	  finfo->failed = TRUE;
	  return FALSE;
	}
      ++obj_raw_syment_count (output_bfd);
    }

  return TRUE;
}

/* Write out task global symbols, converting them to statics.  Called
   via coff_link_hash_traverse.  Calls bfd_coff_write_global_sym to do
   the dirty work, if the symbol we are processing needs conversion.  */

bfd_boolean
_bfd_coff_write_task_globals (struct coff_link_hash_entry *h, void *data)
{
  struct coff_final_link_info *finfo = (struct coff_final_link_info *) data;
  bfd_boolean rtnval = TRUE;
  bfd_boolean save_global_to_static;

  if (h->root.type == bfd_link_hash_warning)
    h = (struct coff_link_hash_entry *) h->root.u.i.link;

  if (h->indx < 0)
    {
      switch (h->root.type)
	{
	case bfd_link_hash_defined:
	case bfd_link_hash_defweak:
	  save_global_to_static = finfo->global_to_static;
	  finfo->global_to_static = TRUE;
	  rtnval = _bfd_coff_write_global_sym (h, data);
	  finfo->global_to_static = save_global_to_static;
	  break;
	default:
	  break;
	}
    }
  return (rtnval);
}

/* Handle a link order which is supposed to generate a reloc.  */

bfd_boolean
_bfd_coff_reloc_link_order (bfd *output_bfd,
			    struct coff_final_link_info *finfo,
			    asection *output_section,
			    struct bfd_link_order *link_order)
{
  reloc_howto_type *howto;
  struct internal_reloc *irel;
  struct coff_link_hash_entry **rel_hash_ptr;

  howto = bfd_reloc_type_lookup (output_bfd, link_order->u.reloc.p->reloc);
  if (howto == NULL)
    {
      bfd_set_error (bfd_error_bad_value);
      return FALSE;
    }

  if (link_order->u.reloc.p->addend != 0)
    {
      bfd_size_type size;
      bfd_byte *buf;
      bfd_reloc_status_type rstat;
      bfd_boolean ok;
      file_ptr loc;

      size = bfd_get_reloc_size (howto);
      buf = bfd_zmalloc (size);
      if (buf == NULL)
	return FALSE;

      rstat = _bfd_relocate_contents (howto, output_bfd,
				      (bfd_vma) link_order->u.reloc.p->addend,\
				      buf);
      switch (rstat)
	{
	case bfd_reloc_ok:
	  break;
	default:
	case bfd_reloc_outofrange:
	  abort ();
	case bfd_reloc_overflow:
	  if (! ((*finfo->info->callbacks->reloc_overflow)
		 (finfo->info,
		  (link_order->type == bfd_section_reloc_link_order
		   ? bfd_section_name (output_bfd,
				       link_order->u.reloc.p->u.section)
		   : link_order->u.reloc.p->u.name),
		  howto->name, link_order->u.reloc.p->addend,
		  (bfd *) NULL, (asection *) NULL, (bfd_vma) 0)))
	    {
	      free (buf);
	      return FALSE;
	    }
	  break;
	}
      loc = link_order->offset * bfd_octets_per_byte (output_bfd);
      ok = bfd_set_section_contents (output_bfd, output_section, buf,
                                     loc, size);
      free (buf);
      if (! ok)
	return FALSE;
    }

  /* Store the reloc information in the right place.  It will get
     swapped and written out at the end of the final_link routine.  */
  irel = (finfo->section_info[output_section->target_index].relocs
	  + output_section->reloc_count);
  rel_hash_ptr = (finfo->section_info[output_section->target_index].rel_hashes
		  + output_section->reloc_count);

  memset (irel, 0, sizeof (struct internal_reloc));
  *rel_hash_ptr = NULL;

  irel->r_vaddr = output_section->vma + link_order->offset;

  if (link_order->type == bfd_section_reloc_link_order)
    {
      /* We need to somehow locate a symbol in the right section.  The
         symbol must either have a value of zero, or we must adjust
         the addend by the value of the symbol.  FIXME: Write this
         when we need it.  The old linker couldn't handle this anyhow.  */
      abort ();
      *rel_hash_ptr = NULL;
      irel->r_symndx = 0;
    }
  else
    {
      struct coff_link_hash_entry *h;

      h = ((struct coff_link_hash_entry *)
	   bfd_wrapped_link_hash_lookup (output_bfd, finfo->info,
					 link_order->u.reloc.p->u.name,
					 FALSE, FALSE, TRUE));
      if (h != NULL)
	{
	  if (h->indx >= 0)
	    irel->r_symndx = h->indx;
	  else
	    {
	      /* Set the index to -2 to force this symbol to get
		 written out.  */
	      h->indx = -2;
	      *rel_hash_ptr = h;
	      irel->r_symndx = 0;
	    }
	}
      else
	{
	  if (! ((*finfo->info->callbacks->unattached_reloc)
		 (finfo->info, link_order->u.reloc.p->u.name, (bfd *) NULL,
		  (asection *) NULL, (bfd_vma) 0)))
	    return FALSE;
	  irel->r_symndx = 0;
	}
    }

  /* FIXME: Is this always right?  */
  irel->r_type = howto->type;

  /* r_size is only used on the RS/6000, which needs its own linker
     routines anyhow.  r_extern is only used for ECOFF.  */

  /* FIXME: What is the right value for r_offset?  Is zero OK?  */
  ++output_section->reloc_count;

  return TRUE;
}

/* A basic reloc handling routine which may be used by processors with
   simple relocs.  */

bfd_boolean
_bfd_coff_generic_relocate_section (bfd *output_bfd,
				    struct bfd_link_info *info,
				    bfd *input_bfd,
				    asection *input_section,
				    bfd_byte *contents,
				    struct internal_reloc *relocs,
				    struct internal_syment *syms,
				    asection **sections)
{
  struct internal_reloc *rel;
  struct internal_reloc *relend;

  rel = relocs;
  relend = rel + input_section->reloc_count;
  for (; rel < relend; rel++)
    {
      long symndx;
      struct coff_link_hash_entry *h;
      struct internal_syment *sym;
      bfd_vma addend;
      bfd_vma val;
      reloc_howto_type *howto;
      bfd_reloc_status_type rstat;

      symndx = rel->r_symndx;

      if (symndx == -1)
	{
	  h = NULL;
	  sym = NULL;
	}
      else if (symndx < 0
	       || (unsigned long) symndx >= obj_raw_syment_count (input_bfd))
	{
	  (*_bfd_error_handler)
	    ("%s: illegal symbol index %ld in relocs",
	     bfd_archive_filename (input_bfd), symndx);
	  return FALSE;
	}
      else
	{
	  h = obj_coff_sym_hashes (input_bfd)[symndx];
	  sym = syms + symndx;
	}

      /* COFF treats common symbols in one of two ways.  Either the
         size of the symbol is included in the section contents, or it
         is not.  We assume that the size is not included, and force
         the rtype_to_howto function to adjust the addend as needed.  */
      if (sym != NULL && sym->n_scnum != 0)
	addend = - sym->n_value;
      else
	addend = 0;

      howto = bfd_coff_rtype_to_howto (input_bfd, input_section, rel, h,
				       sym, &addend);
      if (howto == NULL)
	return FALSE;

      /* If we are doing a relocatable link, then we can just ignore
         a PC relative reloc that is pcrel_offset.  It will already
         have the correct value.  If this is not a relocatable link,
         then we should ignore the symbol value.  */
      if (howto->pc_relative && howto->pcrel_offset)
	{
	  if (info->relocatable)
	    continue;
	  if (sym != NULL && sym->n_scnum != 0)
	    addend += sym->n_value;
	}

      val = 0;

      if (h == NULL)
	{
	  asection *sec;

	  if (symndx == -1)
	    {
	      sec = bfd_abs_section_ptr;
	      val = 0;
	    }
	  else
	    {
	      sec = sections[symndx];
              val = (sec->output_section->vma
		     + sec->output_offset
		     + sym->n_value);
	      if (! obj_pe (input_bfd))
		val -= sec->vma;
	    }
	}
      else
	{
	  if (h->root.type == bfd_link_hash_defined
	      || h->root.type == bfd_link_hash_defweak)
	    {
	      asection *sec;

	      sec = h->root.u.def.section;
	      val = (h->root.u.def.value
		     + sec->output_section->vma
		     + sec->output_offset);
	      }

	  else if (h->root.type == bfd_link_hash_undefweak)
	    val = 0;

	  else if (! info->relocatable)
	    {
	      if (! ((*info->callbacks->undefined_symbol)
		     (info, h->root.root.string, input_bfd, input_section,
		      rel->r_vaddr - input_section->vma, TRUE)))
		return FALSE;
	    }
	}

      if (info->base_file)
	{
	  /* Emit a reloc if the backend thinks it needs it.  */
	  if (sym && pe_data (output_bfd)->in_reloc_p (output_bfd, howto))
	    {
	      /* Relocation to a symbol in a section which isn't
		 absolute.  We output the address here to a file.
		 This file is then read by dlltool when generating the
		 reloc section.  Note that the base file is not
		 portable between systems.  We write out a long here,
		 and dlltool reads in a long.  */
	      long addr = (rel->r_vaddr
			   - input_section->vma
			   + input_section->output_offset
			   + input_section->output_section->vma);
	      if (coff_data (output_bfd)->pe)
		addr -= pe_data(output_bfd)->pe_opthdr.ImageBase;
	      if (fwrite (&addr, 1, sizeof (long), (FILE *) info->base_file)
		  != sizeof (long))
		{
		  bfd_set_error (bfd_error_system_call);
		  return FALSE;
		}
	    }
	}

      rstat = _bfd_final_link_relocate (howto, input_bfd, input_section,
					contents,
					rel->r_vaddr - input_section->vma,
					val, addend);

      switch (rstat)
	{
	default:
	  abort ();
	case bfd_reloc_ok:
	  break;
	case bfd_reloc_outofrange:
	  (*_bfd_error_handler)
	    (_("%s: bad reloc address 0x%lx in section `%s'"),
	     bfd_archive_filename (input_bfd),
	     (unsigned long) rel->r_vaddr,
	     bfd_get_section_name (input_bfd, input_section));
	  return FALSE;
	case bfd_reloc_overflow:
	  {
	    const char *name;
	    char buf[SYMNMLEN + 1];

	    if (symndx == -1)
	      name = "*ABS*";
	    else if (h != NULL)
	      name = h->root.root.string;
	    else
	      {
		name = _bfd_coff_internal_syment_name (input_bfd, sym, buf);
		if (name == NULL)
		  return FALSE;
	      }

	    if (! ((*info->callbacks->reloc_overflow)
		   (info, name, howto->name, (bfd_vma) 0, input_bfd,
		    input_section, rel->r_vaddr - input_section->vma)))
	      return FALSE;
	  }
	}
    }
  return TRUE;
}
@


1.7
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
d6 1
a6 1
This file is part of BFD, the Binary File Descriptor library.
d8 13
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d30 1
d32 3
a34 16
static bfd_boolean coff_link_add_object_symbols
  PARAMS ((bfd *, struct bfd_link_info *));
static bfd_boolean coff_link_check_archive_element
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *));
static bfd_boolean coff_link_check_ar_symbols
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *));
static bfd_boolean coff_link_add_symbols
  PARAMS ((bfd *, struct bfd_link_info *));
static char *dores_com
  PARAMS ((char *, bfd *, int));
static char *get_name
  PARAMS ((char *, char **));
static int process_embedded_commands
  PARAMS ((bfd *, struct bfd_link_info *, bfd *));
static void mark_relocs
  PARAMS ((struct coff_final_link_info *, bfd *));
d58 3
a60 4
_bfd_coff_link_hash_newfunc (entry, table, string)
     struct bfd_hash_entry *entry;
     struct bfd_hash_table *table;
     const char *string;
d93 5
a97 6
_bfd_coff_link_hash_table_init (table, abfd, newfunc)
     struct coff_link_hash_table *table;
     bfd *abfd;
     struct bfd_hash_entry *(*newfunc) PARAMS ((struct bfd_hash_entry *,
						struct bfd_hash_table *,
						const char *));
d106 1
a106 2
_bfd_coff_link_hash_table_create (abfd)
     bfd *abfd;
d111 1
a111 1
  ret = (struct coff_link_hash_table *) bfd_malloc (amt);
d114 1
d127 3
a129 4
_bfd_coff_debug_merge_hash_newfunc (entry, table, string)
     struct bfd_hash_entry *entry;
     struct bfd_hash_table *table;
     const char *string;
d159 1
a159 3
_bfd_coff_link_add_symbols (abfd, info)
     bfd *abfd;
     struct bfd_link_info *info;
d166 2
a167 2
      return (_bfd_generic_link_add_archive_symbols
	      (abfd, info, coff_link_check_archive_element));
d177 1
a177 3
coff_link_add_object_symbols (abfd, info)
     bfd *abfd;
     struct bfd_link_info *info;
d184 2
a185 20
  if (! info->keep_memory)
    {
      if (! _bfd_coff_free_symbols (abfd))
	return FALSE;
    }
  return TRUE;
}

/* Check a single archive element to see if we need to include it in
   the link.  *PNEEDED is set according to whether this element is
   needed in the link or not.  This is called via
   _bfd_generic_link_add_archive_symbols.  */

static bfd_boolean
coff_link_check_archive_element (abfd, info, pneeded)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_boolean *pneeded;
{
  if (! _bfd_coff_get_external_symbols (abfd))
a187 15
  if (! coff_link_check_ar_symbols (abfd, info, pneeded))
    return FALSE;

  if (*pneeded)
    {
      if (! coff_link_add_symbols (abfd, info))
	return FALSE;
    }

  if (! info->keep_memory || ! *pneeded)
    {
      if (! _bfd_coff_free_symbols (abfd))
	return FALSE;
    }

d195 3
a197 4
coff_link_check_ar_symbols (abfd, info, pneeded)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_boolean *pneeded;
d213 1
a213 1
      bfd_coff_swap_sym_in (abfd, (PTR) esym, (PTR) &sym);
a224 1

d230 6
a235 10
	  /* auto import */
	  if (!h && info->pei386_auto_import)
	    {
	      if (!strncmp (name,"__imp_", 6))
		{
		  h =
                    bfd_link_hash_lookup (info->hash, name + 6, FALSE, FALSE,
                                          TRUE);
		}
	    }
d257 27
d287 2
a288 3
coff_link_add_symbols (abfd, info)
     bfd *abfd;
     struct bfd_link_info *info;
d317 1
a317 1
  sym_hash = (struct coff_link_hash_entry **) bfd_zalloc (abfd, amt);
d332 1
a332 1
      bfd_coff_swap_sym_in (abfd, (PTR) esym, (PTR) &sym);
d535 1
a535 1
			bfd_coff_swap_aux_in (abfd, (PTR) eaux, sym.n_type,
d537 1
a537 1
					      sym.n_numaux, (PTR) iaux);
a552 1

d567 1
a567 1
  /* If this is a non-traditional, non-relocateable link, try to
d569 1
a569 1
  if (! info->relocateable
d574 1
a574 1
      asection *stab, *stabstr;
d576 3
a578 2
      stab = bfd_get_section_by_name (abfd, ".stab");
      if (stab != NULL)
d580 7
a586 3
	  stabstr = bfd_get_section_by_name (abfd, ".stabstr");

	  if (stabstr != NULL)
d589 3
a591 3
	      struct coff_section_tdata *secdata;

	      secdata = coff_section_data (abfd, stab);
d595 1
a595 1
		  stab->used_by_bfd = (PTR) bfd_zalloc (abfd, amt);
d605 2
a606 1
					     &secdata->stab_info))
d624 2
a625 3
_bfd_coff_final_link (abfd, info)
     bfd *abfd;
     struct bfd_link_info *info;
d714 1
a714 1
	      if (info->relocateable)
d724 1
a724 1
	  else if (info->relocateable
d757 1
a757 1
  /* If doing a relocateable link, allocate space for the pointers we
d759 1
a759 1
  if (info->relocateable)
d767 1
a767 1
      finfo.section_info = (struct coff_link_section_info *) bfd_malloc (amt);
d805 1
a805 1
	     but only when doing a relocateable link, which is not the
d807 1
a807 1
	  BFD_ASSERT (info->relocateable);
d810 1
a810 2
	  finfo.section_info[o->target_index].relocs =
	    (struct internal_reloc *) bfd_malloc (amt);
d813 1
a813 2
	  finfo.section_info[o->target_index].rel_hashes =
	    (struct coff_link_hash_entry **) bfd_malloc (amt);
d846 1
a846 1
  finfo.internal_syms = (struct internal_syment *) bfd_malloc (amt);
d848 1
a848 1
  finfo.sec_ptrs = (asection **) bfd_malloc (amt);
d850 2
a851 2
  finfo.sym_indices = (long *) bfd_malloc (amt);
  finfo.outsyms = (bfd_byte *) bfd_malloc ((max_sym_count + 1) * symesz);
d853 2
a854 2
  finfo.linenos = (bfd_byte *) bfd_malloc (amt);
  finfo.contents = (bfd_byte *) bfd_malloc (max_contents_size);
d856 2
a857 2
  finfo.external_relocs = (bfd_byte *) bfd_malloc (amt);
  if (! info->relocateable)
d860 1
a860 1
      finfo.internal_relocs = (struct internal_reloc *) bfd_malloc (amt);
d869 1
a869 1
      || (! info->relocateable
d969 2
a970 2
      bfd_coff_swap_sym_out (abfd, (PTR) &finfo.last_file,
			     (PTR) finfo.outsyms);
d985 1
a985 2
			       _bfd_coff_write_task_globals,
			       (PTR) &finfo);
d993 1
a993 2
			   _bfd_coff_write_global_sym,
			   (PTR) &finfo);
d1004 1
a1004 1
  if (info->relocateable && max_output_reloc_count > 0)
d1010 1
a1010 1
      external_relocs = (bfd_byte *) bfd_malloc (amt);
d1035 1
a1035 1
	      bfd_coff_swap_reloc_out (abfd, (PTR) irel, (PTR) erel);
d1038 21
a1058 4
	  if (bfd_seek (abfd, o->rel_filepos, SEEK_SET) != 0
	      || (bfd_bwrite ((PTR) external_relocs,
			     (bfd_size_type) relsz * o->reloc_count, abfd)
		  != (bfd_size_type) relsz * o->reloc_count))
d1163 1
a1163 1
/* parse out a -heap <reserved>,<commit> line */
d1166 1
a1166 4
dores_com (ptr, output_bfd, heap)
     char *ptr;
     bfd *output_bfd;
     int heap;
d1171 1
d1189 2
a1190 3
static char *get_name(ptr, dst)
char *ptr;
char **dst;
d1201 1
a1201 1
/* Process any magic embedded commands in a section called .drectve */
d1204 3
a1206 4
process_embedded_commands (output_bfd, info,  abfd)
     bfd *output_bfd;
     struct bfd_link_info *info ATTRIBUTE_UNUSED;
     bfd *abfd;
d1212 1
d1219 2
a1220 1
  if (! bfd_get_section_contents(abfd, sec, copy, (bfd_vma) 0, sec->_raw_size))
d1226 1
d1229 5
a1233 4
      if (s[0]!= '-') {
	s++;
	continue;
      }
a1238 1

d1244 1
d1246 23
a1268 21
	  s = get_name(s, &name);
	  s = get_name(s, &attribs);
	  while (loop) {
	    switch (*attribs++)
	      {
	      case 'W':
		had_write = 1;
		break;
	      case 'R':
		had_read = 1;
		break;
	      case 'S':
		had_shared = 1;
		break;
	      case 'X':
		had_exec = 1;
		break;
	      default:
		loop = 0;
	      }
	  }
d1270 7
a1276 6
	  if (asec) {
	    if (had_exec)
	      asec->flags |= SEC_CODE;
	    if (!had_write)
	      asec->flags |= SEC_READONLY;
	  }
d1279 2
a1280 3
	{
	  s = dores_com (s+5, output_bfd, 1);
	}
d1282 2
a1283 3
	{
	  s = dores_com (s+6, output_bfd, 0);
	}
d1294 1
a1294 2
   that symbol.
   */
d1297 1
a1297 3
mark_relocs (finfo, input_bfd)
     struct coff_final_link_info *	finfo;
     bfd * 				input_bfd;
d1320 2
a1321 2
	 finfo->info->relocateable,
	 (finfo->info->relocateable
d1335 1
a1335 2
	 skip/don't pass */

d1337 1
a1337 3
	{
	  finfo->sym_indices[ irel->r_symndx ] = -1;
	}
d1345 1
a1345 3
_bfd_coff_link_input_bfd (finfo, input_bfd)
     struct coff_final_link_info *finfo;
     bfd *input_bfd;
d1353 2
a1354 2
    PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *,
	     struct internal_reloc *, bfd_boolean *));
d1400 3
a1402 5
  if (coff_data (output_bfd)->pe)
    {
      if (! process_embedded_commands (output_bfd, finfo->info, input_bfd))
	return FALSE;
    }
d1404 3
a1406 3
  /* If we are going to perform relocations and also strip/discard some symbols
     then we must make sure that we do not strip/discard those symbols that are
     going to be involved in the relocations */
d1409 1
a1409 1
      && finfo->info->relocateable)
d1411 1
a1411 1
      /* mark the symbol array as 'not-used' */
d1426 1
a1426 1
      bfd_coff_swap_sym_in (input_bfd, (PTR) esym, (PTR) isymp);
d1456 1
a1456 1
	  && finfo->info->relocateable)
d1508 1
d1511 3
a1513 5
          && isym.n_numaux > 0)
        {
          if ((*secpp)->output_section == bfd_abs_section_ptr)
            skip = TRUE;
        }
d1598 1
a1598 1
	  mt = (struct coff_debug_merge_type *) bfd_alloc (input_bfd, amt);
d1605 1
a1605 1
	  bfd_coff_swap_aux_in (input_bfd, (PTR) (esym + isymesz),
d1607 1
a1607 1
				(PTR) &aux);
d1622 1
a1622 1
	      bfd_coff_swap_sym_in (input_bfd, (PTR) esl, (PTR) islp);
d1625 1
a1625 2
	      *epp = ((struct coff_debug_merge_element *)
		      bfd_alloc (input_bfd, amt));
d1635 1
a1635 1
	      name_copy = (char *) bfd_alloc (input_bfd, amt);
d1650 1
a1650 1
		  bfd_coff_swap_aux_in (input_bfd, (PTR) (esl + isymesz),
d1652 1
a1652 1
					islp->n_numaux, (PTR) &eleaux);
a1658 1

d1681 1
a1681 1
	    bfd_release (input_bfd, (PTR) mt);
d1717 1
a1717 1
		  bfd_release (input_bfd, (PTR) mt);
d1741 1
a1741 2
	      name = _bfd_coff_internal_syment_name (input_bfd, &isym,
						     (char *) NULL);
a1813 1

d1824 5
a1828 5
					     (PTR) &finfo->last_file,
					     (PTR) (finfo->outsyms
						    + ((finfo->last_file_index
							- syment_base)
						       * osymesz)));
d1838 1
a1838 2
					     (PTR) &finfo->last_file,
					     (PTR) outsym);
d1858 1
a1858 2

	  bfd_coff_swap_sym_out (output_bfd, (PTR) &isym, (PTR) outsym);
a1897 1

d1904 1
d1949 2
a1950 3
		  bfd_coff_swap_aux_in (input_bfd, (PTR) esym, isymp->n_type,
					isymp->n_sclass, i, isymp->n_numaux,
					(PTR) &aux);
d2043 1
a2043 1
			      PTR auxout;
d2049 5
a2053 4
			      auxout = (PTR) (finfo->outsyms
					      + ((finfo->last_bf_index
						  - syment_base)
						 * osymesz));
d2055 1
a2055 1
						     (PTR) &finfo->last_bf,
d2071 1
a2071 1
						     (PTR) &finfo->last_bf,
d2075 1
a2075 1
						     (PTR) outsym);
d2102 1
a2102 1
		  bfd_coff_swap_aux_out (output_bfd, (PTR) auxp, isymp->n_type,
d2104 1
a2104 1
					 (PTR) outsym);
d2158 1
a2158 1
	      bfd_coff_swap_lineno_in (input_bfd, (PTR) eline, (PTR) &iline);
d2194 3
a2196 4
					    (PTR) (finfo->outsyms
						   + ((indx - syment_base)
						      * osymesz)),
					    (PTR) &is);
d2201 1
a2201 1
			  PTR auxptr;
d2203 3
a2205 3
			  auxptr = (PTR) (finfo->outsyms
					  + ((indx - syment_base + 1)
					     * osymesz));
d2208 1
a2208 1
						0, is.n_numaux, (PTR) &ia);
d2213 1
a2213 1
			  bfd_coff_swap_aux_out (output_bfd, (PTR) &ia,
d2226 1
a2226 2
		  bfd_coff_swap_lineno_out (output_bfd, (PTR) &iline,
					    (PTR) oeline);
d2250 4
a2253 4
      bfd_coff_swap_sym_out (output_bfd, (PTR) &finfo->last_file,
			     (PTR) (finfo->outsyms
 				    + ((finfo->last_file_index - syment_base)
 				       * osymesz)));
d2283 2
a2284 4
	{
	  /* This section was omitted from the link.  */
	  continue;
	}
d2324 2
a2325 2
			      finfo->info->relocateable,
			      (finfo->info->relocateable
d2342 1
a2342 1
	  if (finfo->info->relocateable)
a2360 1

a2410 1

d2449 3
a2451 5
  if (! finfo->info->keep_memory)
    {
      if (! _bfd_coff_free_symbols (input_bfd))
	return FALSE;
    }
d2459 1
a2459 3
_bfd_coff_write_global_sym (h, data)
     struct coff_link_hash_entry *h;
     PTR data;
d2568 1
a2568 1
  /* When a weak symbol is not overriden by a strong one,
d2570 1
a2570 1
     shared or relocateable object.  */
d2572 1
a2572 1
      && ! finfo->info->relocateable
d2578 1
a2578 1
  bfd_coff_swap_sym_out (output_bfd, (PTR) &isym, (PTR) finfo->outsyms);
a2624 1

d2627 1
a2627 1
		      || finfo->info->relocateable))
d2636 1
a2636 1
		      || finfo->info->relocateable))
d2651 1
a2651 1
      bfd_coff_swap_aux_out (output_bfd, (PTR) auxp, isym.n_type,
d2653 1
a2653 1
			     (PTR) finfo->outsyms);
d2670 1
a2670 3
_bfd_coff_write_task_globals (h, data)
     struct coff_link_hash_entry *h;
     PTR data;
d2700 4
a2703 5
_bfd_coff_reloc_link_order (output_bfd, finfo, output_section, link_order)
     bfd *output_bfd;
     struct coff_final_link_info *finfo;
     asection *output_section;
     struct bfd_link_order *link_order;
d2725 1
a2725 1
      buf = (bfd_byte *) bfd_zmalloc (size);
d2755 1
a2755 1
      ok = bfd_set_section_contents (output_bfd, output_section, (PTR) buf,
a2763 1

a2821 1

d2831 8
a2838 11
_bfd_coff_generic_relocate_section (output_bfd, info, input_bfd,
				    input_section, contents, relocs, syms,
				    sections)
     bfd *output_bfd;
     struct bfd_link_info *info;
     bfd *input_bfd;
     asection *input_section;
     bfd_byte *contents;
     struct internal_reloc *relocs;
     struct internal_syment *syms;
     asection **sections;
a2879 1

d2890 1
a2890 1
      /* If we are doing a relocateable link, then we can just ignore
d2892 1
a2892 1
         have the correct value.  If this is not a relocateable link,
d2896 1
a2896 1
	  if (info->relocateable)
d2939 1
a2939 1
	  else if (! info->relocateable)
@


1.6
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
d31 1
a31 1
static boolean coff_link_add_object_symbols
d33 10
a42 7
static boolean coff_link_check_archive_element
  PARAMS ((bfd *, struct bfd_link_info *, boolean *));
static boolean coff_link_check_ar_symbols
  PARAMS ((bfd *, struct bfd_link_info *, boolean *));
static boolean coff_link_add_symbols PARAMS ((bfd *, struct bfd_link_info *));
static char *dores_com PARAMS ((char *, bfd *, int));
static char *get_name PARAMS ((char *, char **));
d45 2
a46 1
static void mark_relocs PARAMS ((struct coff_final_link_info *, bfd *));
d48 1
a48 1
/* Return true if SYM is a weak, external symbol.  */
d53 1
a53 1
/* Return true if SYM is an external symbol.  */
d105 1
a105 1
boolean
d124 1
d126 1
a126 2
  ret = ((struct coff_link_hash_table *)
	 bfd_alloc (abfd, sizeof (struct coff_link_hash_table)));
d132 1
a132 1
      bfd_release (abfd, ret);
d173 1
a173 1
boolean
d187 1
a187 1
      return false;
d193 1
a193 1
static boolean
d199 1
a199 1
    return false;
d201 1
a201 1
    return false;
d206 1
a206 1
	return false;
d208 1
a208 1
  return true;
d216 1
a216 1
static boolean
d220 1
a220 1
     boolean *pneeded;
d223 1
a223 1
    return false;
d226 1
a226 1
    return false;
d231 1
a231 1
	return false;
d237 1
a237 1
	return false;
d240 1
a240 1
  return true;
d246 1
a246 1
static boolean
d250 1
a250 1
     boolean *pneeded;
d256 1
a256 1
  *pneeded = false;
d281 2
a282 2
	    return false;
	  h = bfd_link_hash_lookup (info->hash, name, false, false, true);
d284 10
d302 3
a304 3
		return false;
	      *pneeded = true;
	      return true;
d312 1
a312 1
  return true;
d317 1
a317 1
static boolean
d325 2
a326 2
  boolean keep_syms;
  boolean default_copy;
d332 1
d337 1
a337 1
  obj_coff_keep_syms (abfd) = true;
d340 1
a340 1
    default_copy = false;
d342 1
a342 1
    default_copy = true;
d348 2
a349 4
  sym_hash = ((struct coff_link_hash_entry **)
	      bfd_alloc (abfd,
			 ((size_t) symcount
			  * sizeof (struct coff_link_hash_entry *))));
a352 2
  memset (sym_hash, 0,
	  (size_t) symcount * sizeof (struct coff_link_hash_entry *));
d362 1
a362 1
      boolean copy;
d374 1
a374 1
	  boolean addit;
d387 1
a387 1
	    copy = true;
d422 1
a422 1
	  addit = true;
d430 1
a430 1
						 name, false, copy, false);
d441 1
a441 1
		  addit = false;
d447 1
a447 1
	     relying on the the linker comdat support to discard
d476 1
a476 1
						   name, false, copy, false);
d482 1
a482 1
		addit = false;
d489 1
a489 1
		      (const char *) NULL, copy, false,
d540 1
a540 1
  			   bfd_get_filename (abfd));
d568 2
a569 2
					      sym.n_sclass, i, sym.n_numaux,
					      (PTR) iaux);
d622 2
a623 3
		  stab->used_by_bfd =
		    (PTR) bfd_zalloc (abfd,
				      sizeof (struct coff_section_tdata));
d641 1
a641 1
  return true;
d645 1
a645 1
  return false;
d650 1
a650 1
boolean
d657 2
a658 2
  boolean debug_merge_allocated;
  boolean long_section_names;
d661 5
a665 5
  size_t max_sym_count;
  size_t max_lineno_count;
  size_t max_reloc_count;
  size_t max_output_reloc_count;
  size_t max_contents_size;
d673 1
d691 2
a692 2
  finfo.global_to_static = false;
  debug_merge_allocated = false;
d702 1
a702 1
  debug_merge_allocated = true;
d719 1
a719 1
  long_section_names = false;
d736 1
a736 1
	      sec->linker_mark = true;
d764 4
d777 2
a778 2
             we pass hash as false.  */
	  if (_bfd_stringtab_add (finfo.strtab, o->name, false, false)
d781 1
a781 1
	  long_section_names = true;
d793 3
a795 4
      finfo.section_info =
	((struct coff_link_section_info *)
	 bfd_malloc ((abfd->section_count + 1)
		     * sizeof (struct coff_link_section_info)));
d836 2
d839 3
a841 2
	    ((struct internal_reloc *)
	     bfd_malloc (o->reloc_count * sizeof (struct internal_reloc)));
d843 1
a843 3
	    ((struct coff_link_hash_entry **)
	     bfd_malloc (o->reloc_count
		     * sizeof (struct coff_link_hash_entry *)));
d868 1
a868 1
      sub->output_has_begun = false;
d875 9
a883 10
  finfo.internal_syms = ((struct internal_syment *)
			 bfd_malloc (max_sym_count
				     * sizeof (struct internal_syment)));
  finfo.sec_ptrs = (asection **) bfd_malloc (max_sym_count
					     * sizeof (asection *));
  finfo.sym_indices = (long *) bfd_malloc (max_sym_count * sizeof (long));
  finfo.outsyms = ((bfd_byte *)
		   bfd_malloc ((size_t) ((max_sym_count + 1) * symesz)));
  finfo.linenos = (bfd_byte *) bfd_malloc (max_lineno_count
				       * bfd_coff_linesz (abfd));
d885 2
a886 1
  finfo.external_relocs = (bfd_byte *) bfd_malloc (max_reloc_count * relsz);
d888 4
a891 3
    finfo.internal_relocs = ((struct internal_reloc *)
			     bfd_malloc (max_reloc_count
					 * sizeof (struct internal_reloc)));
d929 1
a929 1
		  sub->output_has_begun = true;
d952 1
a952 1
  debug_merge_allocated = false;
d996 2
d1001 5
a1005 6
      if (bfd_seek (abfd,
		    (obj_sym_filepos (abfd)
		     + finfo.last_file_index * symesz),
		    SEEK_SET) != 0
	  || bfd_write (finfo.outsyms, symesz, 1, abfd) != symesz)
	return false;
d1013 3
a1015 2
      finfo.failed = false;
      coff_link_hash_traverse (coff_hash_table (info), _bfd_coff_write_task_globals,
d1022 3
a1024 2
  finfo.failed = false;
  coff_link_hash_traverse (coff_hash_table (info), _bfd_coff_write_global_sym,
d1041 2
a1042 2
      external_relocs = ((bfd_byte *)
			 bfd_malloc (max_output_reloc_count * relsz));
d1071 3
a1073 2
	      || bfd_write ((PTR) external_relocs, relsz, o->reloc_count,
			    abfd) != relsz * o->reloc_count)
d1101 1
a1101 1
	return false;
d1107 5
a1111 5
      if (bfd_seek (abfd,
		    (obj_sym_filepos (abfd)
		     + obj_raw_syment_count (abfd) * symesz),
		    SEEK_SET) != 0)
	return false;
d1114 3
a1116 3
      bfd_h_put_32 (abfd,
		    _bfd_stringtab_size (finfo.strtab) + STRING_SIZE_SIZE,
		    (bfd_byte *) strbuf);
d1118 1
a1118 1
 #error Change bfd_h_put_32
d1121 3
a1123 2
      if (bfd_write (strbuf, 1, STRING_SIZE_SIZE, abfd) != STRING_SIZE_SIZE)
	return false;
d1126 1
a1126 1
	return false;
d1128 1
a1128 1
      obj_coff_strings_written (abfd) = true;
d1137 1
a1137 1
  return true;
d1175 1
a1175 1
  return false;
d1190 1
a1190 1
	pe_data(output_bfd)->pe_opthdr.SizeOfHeapReserve =val;
d1192 1
a1192 1
	pe_data(output_bfd)->pe_opthdr.SizeOfStackReserve =val;
d1196 1
a1196 1
	  int val = strtoul (ptr+1, &ptr, 0);
d1198 1
a1198 1
	    pe_data(output_bfd)->pe_opthdr.SizeOfHeapCommit =val;
d1200 1
a1200 1
	    pe_data(output_bfd)->pe_opthdr.SizeOfStackCommit =val;
d1234 1
a1234 1
  copy = bfd_malloc ((size_t) sec->_raw_size);
d1237 1
a1237 1
  if (! bfd_get_section_contents(abfd, sec, copy, 0, sec->_raw_size))
d1329 3
d1335 1
a1335 1
	(input_bfd, a, false,
d1364 1
a1364 1
boolean
d1374 3
a1376 3
  boolean (*adjust_symndx) PARAMS ((bfd *, struct bfd_link_info *, bfd *,
				    asection *, struct internal_reloc *,
				    boolean *));
d1380 1
a1380 1
  boolean copy, hash;
d1404 1
a1404 1
  copy = false;
d1406 2
a1407 2
    copy = true;
  hash = true;
d1409 1
a1409 1
    hash = false;
d1412 1
a1412 1
    return false;
d1425 1
a1425 1
	return false;
d1445 3
a1447 3
      boolean skip;
      boolean global;
      boolean dont_skip_symbol;
d1483 1
a1483 1
	dont_skip_symbol = false;
d1487 2
a1488 2
      skip = false;
      global = false;
d1493 1
a1493 1
	skip = true;
d1508 1
a1508 1
	      global = true;
d1510 1
a1510 1
		skip = true;
d1515 2
a1516 2
	      global = true;
	      skip = true;
d1523 1
a1523 1
		skip = true;
d1528 13
d1559 1
a1559 1
	skip = true;
d1572 1
a1572 1
	    return false;
d1576 2
a1577 2
		   && (bfd_hash_lookup (finfo->info->keep_hash, name, false,
				    false) == NULL))
d1581 1
a1581 1
	    skip = true;
d1601 1
d1605 1
a1605 1
	    return false;
d1615 1
a1615 1
					     true, true);
d1617 1
a1617 1
	    return false;
d1622 2
a1623 3
	  mt = ((struct coff_debug_merge_type *)
		bfd_alloc (input_bfd,
			   sizeof (struct coff_debug_merge_type)));
d1625 1
a1625 1
	    return false;
d1649 1
d1651 1
a1651 2
		      bfd_alloc (input_bfd,
				 sizeof (struct coff_debug_merge_element)));
d1653 1
a1653 1
		return false;
d1658 1
a1658 1
		return false;
d1660 2
a1661 2
	      name_copy = (char *) bfd_alloc (input_bfd,
					      strlen (elename) + 1);
d1663 1
a1663 1
		return false;
d1747 1
a1747 1
		  skip = true;
d1771 1
a1771 1
		return false;
d1774 1
a1774 1
		return false;
d1844 1
a1844 1
		  && finfo->last_file.n_value != (long) output_index)
d1861 2
d1869 5
a1873 7
		      if (bfd_seek (output_bfd,
				    (obj_sym_filepos (output_bfd)
				     + finfo->last_file_index * osymesz),
				    SEEK_SET) != 0
			  || (bfd_write (outsym, osymesz, 1, output_bfd)
			      != osymesz))
			return false;
d1906 1
a1906 1
		  return false;
d2002 1
a2002 1
			    return false;
d2008 1
a2008 1
			return false;
d2094 2
d2107 6
a2112 7
			      if (bfd_seek (output_bfd,
					    (obj_sym_filepos (output_bfd)
					     + finfo->last_bf_index * osymesz),
					    SEEK_SET) != 0
				  || bfd_write (outsym, osymesz, 1,
						output_bfd) != osymesz)
				return false;
d2158 3
a2160 1
	  boolean skipping;
d2176 1
a2176 1
	      || bfd_read (finfo->linenos, linesz, o->lineno_count,
d2178 1
a2178 1
	    return false;
d2184 1
a2184 1
	  skipping = false;
d2210 1
a2210 1
		      skipping = true;
d2250 1
a2250 1
		      skipping = false;
d2264 6
a2269 8
	  if (bfd_seek (output_bfd,
			(o->output_section->line_filepos
			 + o->output_section->lineno_count * linesz),
			SEEK_SET) != 0
	      || (bfd_write (finfo->linenos, 1, oeline - finfo->linenos,
			     output_bfd)
		  != (bfd_size_type) (oeline - finfo->linenos)))
	    return false;
d2271 1
a2271 2
	  o->output_section->lineno_count +=
	    (oeline - finfo->linenos) / linesz;
d2292 8
a2299 7
      if (bfd_seek (output_bfd,
		    obj_sym_filepos (output_bfd) + syment_base * osymesz,
		    SEEK_SET) != 0
	  || (bfd_write (finfo->outsyms, outsym - finfo->outsyms, 1,
			output_bfd)
	      != (bfd_size_type) (outsym - finfo->outsyms)))
	return false;
d2329 1
a2329 1
		bfd_get_filename (input_bfd),
d2332 1
a2332 1
	      return false;
d2345 1
a2345 1
	    return false;
d2358 1
a2358 1
			     (input_bfd, o, false, finfo->external_relocs,
d2365 1
a2365 1
	    return false;
d2375 1
a2375 1
	    return false;
d2391 1
a2391 1
		  boolean adjusted;
d2407 1
a2407 1
			return false;
d2453 1
a2453 1
			    return false;
d2458 1
a2458 1
			    return false;
d2470 3
d2474 2
a2475 8
					  contents,
                                          (file_ptr)
                                          (o->output_offset *
                                           bfd_octets_per_byte (output_bfd)),
					  (o->_cooked_size != 0
					   ? o->_cooked_size
					   : o->_raw_size)))
	    return false;
d2482 1
a2482 1
	    return false;
d2489 1
a2489 1
	return false;
d2492 1
a2492 1
  return true;
d2497 1
a2497 1
boolean
d2507 1
d2511 7
d2519 1
a2519 1
    return true;
d2525 1
a2525 1
				   h->root.root.string, false, false)
d2527 1
a2527 1
    return true;
d2533 1
d2535 1
a2535 1
      return false;
a2565 1
    case bfd_link_hash_warning:
d2567 1
a2567 1
      return true;
d2574 1
a2574 1
      boolean hash;
d2577 1
a2577 1
      hash = true;
d2579 1
a2579 1
	hash = false;
d2581 1
a2581 1
				 false);
d2584 2
a2585 2
	  finfo->failed = true;
	  return false;
d2604 1
a2604 1
	return true;
d2623 4
a2626 5
  if (bfd_seek (output_bfd,
		(obj_sym_filepos (output_bfd)
		 + obj_raw_syment_count (output_bfd) * symesz),
		SEEK_SET) != 0
      || bfd_write (finfo->outsyms, symesz, 1, output_bfd) != symesz)
d2628 2
a2629 2
      finfo->failed = true;
      return false;
d2694 1
a2694 1
			     isym.n_sclass, i, isym.n_numaux,
d2696 1
a2696 1
      if (bfd_write (finfo->outsyms, symesz, 1, output_bfd) != symesz)
d2698 2
a2699 2
	  finfo->failed = true;
	  return false;
d2704 1
a2704 1
  return true;
d2711 1
a2711 1
boolean
d2717 5
a2721 2
  boolean rtnval = true;
  boolean save_global_to_static;
d2730 1
a2730 1
	  finfo->global_to_static = true;
d2743 1
a2743 1
boolean
d2758 1
a2758 1
      return false;
d2766 2
a2767 1
      boolean ok;
d2772 1
a2772 1
	return false;
d2775 2
a2776 1
				      link_order->u.reloc.p->addend, buf);
d2795 1
a2795 1
	      return false;
d2799 1
d2801 1
a2801 3
				     (file_ptr)
                                     (link_order->offset *
                                      bfd_octets_per_byte (output_bfd)), size);
d2804 1
a2804 1
	return false;
d2837 1
a2837 1
					 false, false, true));
d2856 1
a2856 1
	    return false;
d2871 1
a2871 1
  return true;
d2877 1
a2877 1
boolean
d2917 2
a2918 2
	     bfd_get_filename (input_bfd), symndx);
	  return false;
d2939 1
a2939 1
	return false;
d2994 2
a2995 2
		      rel->r_vaddr - input_section->vma, true)))
		return false;
d3020 1
a3020 1
		  return false;
d3039 1
a3039 1
	     bfd_get_filename (input_bfd),
d3042 1
a3042 1
	  return false;
d3056 1
a3056 1
		  return false;
d3062 1
a3062 1
	      return false;
d3066 1
a3066 1
  return true;
@


1.5
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright 1994, 1995, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
d44 9
d408 1
a408 2
	  if (sym.n_sclass == C_WEAKEXT
	      || (obj_pe (abfd) && sym.n_sclass == C_NT_WEAK))
d906 1
a906 2
	      && (bfd_get_flavour (p->u.indirect.section->owner)
		  == bfd_target_coff_flavour))
d932 1
a932 1
  
d993 1
a993 1
     static. */
d1106 2
d1165 1
a1165 1
  if (coff_data(output_bfd)->pe) 
d1173 1
a1173 1
      if (ptr[0] == ',') 
d1199 1
a1199 1
			
d1210 1
a1210 1
  if (!sec) 
d1212 1
a1212 1
  
d1214 1
a1214 1
  if (!copy) 
d1216 1
a1216 1
  if (! bfd_get_section_contents(abfd, sec, copy, 0, sec->_raw_size)) 
d1222 1
a1222 1
  for (s = copy;  s < e ; ) 
d1243 1
a1243 1
	    switch (*attribs++) 
d1277 1
a1277 1
      else 
d1287 1
a1287 1
   that symbol. 
d1299 1
a1299 1
  
a1305 1
      
d1318 1
a1318 1
      
d1329 1
a1329 1
      
d1412 2
a1413 2
      memset (indexp, 0, obj_raw_syment_count (input_bfd) * sizeof * indexp); 
       
d1460 1
a1460 1
      
d1846 2
a1847 6
	     static functions. */

	  if (finfo->info->task_link
	      && (isym.n_sclass == C_EXT
		  || isym.n_sclass == C_WEAKEXT
		  || (obj_pe (input_bfd) && isym.n_sclass == C_NT_WEAK)))
d2210 1
a2210 1
			skipping = false;
d2408 2
a2409 2
			     loop at the top of this function. */
			  
d2433 3
a2435 3
					  contents, 
                                          (file_ptr) 
                                          (o->output_offset * 
d2557 1
a2557 1
     output during a later pass. */
d2560 3
a2562 6
      if (isym.n_sclass != C_EXT
	  && isym.n_sclass != C_WEAKEXT
	  && (! obj_pe (output_bfd) || isym.n_sclass != C_NT_WEAK))
	{
	  return true;
	}
d2566 8
d2575 1
a2575 1
  
d2667 1
a2667 1
   the dirty work, if the symbol we are processing needs conversion. */
d2753 1
a2753 1
				     (file_ptr) 
d2875 1
a2875 1
	{    
a2889 1

d2941 3
d2955 1
a2955 1
	  /* Emit a reloc if the backend thinks it needs it. */
d2964 3
a2966 3
	      long addr = (rel->r_vaddr 
			   - input_section->vma 
			   + input_section->output_offset 
d2978 1
a2978 1
  
a3021 1

@


1.4
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996 Free Software Foundation, Inc.
d37 15
a237 1
  boolean (*sym_is_global) PARAMS ((bfd *, struct internal_syment *));
a243 2
  sym_is_global = coff_backend_info (abfd)->_bfd_coff_sym_is_global;

d250 1
d254 3
a256 3
      if ((sym.n_sclass == C_EXT
	   || (sym_is_global && (*sym_is_global) (abfd, &sym)))
	  && (sym.n_scnum != 0 || sym.n_value != 0))
d298 3
a300 1
  boolean (*sym_is_global) PARAMS ((bfd *, struct internal_syment *));
a313 2
  sym_is_global = coff_backend_info (abfd)->_bfd_coff_sym_is_global;

d340 1
d345 2
a346 2
      if (sym.n_sclass == C_EXT
	  || (sym_is_global && (*sym_is_global) (abfd, &sym)))
d353 1
d370 1
a370 1
	  if (sym.n_scnum == 0)
d372 40
a411 1
	      if (value == 0)
d413 9
a421 7
		  flags = 0;
		  section = bfd_und_section_ptr;
		}
	      else
		{
		  flags = BSF_GLOBAL;
		  section = bfd_com_section_ptr;
d424 48
a471 5
	  else
	    {
	      flags = BSF_EXPORT | BSF_GLOBAL;
	      section = coff_section_from_bfd_index (abfd, sym.n_scnum);
	      value -= section->vma;
d474 15
a488 5
	  if (! (bfd_coff_link_add_one_symbol
		 (info, abfd, name, flags, section, value,
		  (const char *) NULL, copy, false,
		  (struct bfd_link_hash_entry **) sym_hash)))
	    goto error_return;
d492 38
a529 18
	      if (((*sym_hash)->class == C_NULL
		   && (*sym_hash)->type == T_NULL)
		  || sym.n_scnum != 0
		  || (sym.n_value != 0
		      && (*sym_hash)->root.type != bfd_link_hash_defined))
		{
		  (*sym_hash)->class = sym.n_sclass;
		  if (sym.n_type != T_NULL)
		    {
		      if ((*sym_hash)->type != T_NULL
			  && (*sym_hash)->type != sym.n_type)
			(*_bfd_error_handler)
			  ("Warning: type of symbol `%s' changed from %d to %d in %s",
			   name, (*sym_hash)->type, sym.n_type,
			   bfd_get_filename (abfd));
		      (*sym_hash)->type = sym.n_type;
		    }
		  (*sym_hash)->auxbfd = abfd;
d554 20
d671 1
d686 4
a689 1
    bfd_coff_compute_section_file_positions (abfd);
d901 1
a901 1
	      if (! sub->output_has_begun)
d922 3
d983 12
d1009 1
a1009 1
  if (info->relocateable)
d1193 1
a1193 1
     struct bfd_link_info *info;
d1274 54
d1336 5
a1340 1
  boolean (*sym_is_global) PARAMS ((bfd *, struct internal_syment *));
a1346 2
  unsigned int n_tmask;
  unsigned int n_btshft;
a1363 1
  sym_is_global = coff_backend_info (input_bfd)->_bfd_coff_sym_is_global;
a1370 7
  n_tmask = coff_data (input_bfd)->local_n_tmask;
  n_btshft = coff_data (input_bfd)->local_n_btshft;

  /* Define macros so that ISFCN, et. al., macros work correctly.  */
#define N_TMASK n_tmask
#define N_BTSHFT n_btshft

d1395 13
d1411 1
d1414 1
d1425 2
a1426 3
      if (isym.n_scnum != 0)
	*secpp = coff_section_from_bfd_index (input_bfd, isym.n_scnum);
      else
d1428 13
a1440 4
	  if (isym.n_value == 0)
	    *secpp = bfd_und_section_ptr;
	  else
	    *secpp = bfd_com_section_ptr;
d1443 9
d1459 1
a1459 1
      if (finfo->info->strip == strip_all)
d1464 1
a1464 2
	  if (isym.n_sclass == C_EXT
	      || (sym_is_global && (*sym_is_global) (input_bfd, &isym)))
d1466 5
d1473 2
a1474 2
		 Function symbols, however, are an exception, and are
		 not moved to the end.  */
d1478 9
a1486 3
	    }
	  else
	    {
d1489 1
a1489 1
	      if (finfo->info->discard == discard_all)
d1491 1
d1496 3
a1498 1
         symbol, then skip it.  */
d1501 12
a1512 1
	  && isym.n_scnum == N_DEBUG)
d1528 3
a1530 2
	  if ((finfo->info->strip == strip_some
	       && (bfd_hash_lookup (finfo->info->keep_hash, name, false,
d1532 3
a1534 4
	      || (! global
		  && finfo->info->discard == discard_l
		  && strncmp (name, finfo->info->lprefix,
			      finfo->info->lprefix_len) == 0))
d1599 1
a1599 1
	      char *copy;
d1614 3
a1616 2
	      copy = (char *) bfd_alloc (input_bfd, strlen (elename) + 1);
	      if (copy == NULL)
d1618 1
a1618 1
	      strcpy (copy, elename);
d1620 1
a1620 1
	      (*epp)->name = copy;
d1732 1
a1732 18
	  if (isym.n_scnum > 0)
	    {
	      isym.n_scnum = (*secpp)->output_section->target_index;
	      isym.n_value += ((*secpp)->output_section->vma
			       + (*secpp)->output_offset
			       - (*secpp)->vma);
	    }

	  /* The value of a C_FILE symbol is the symbol index of the
	     next C_FILE symbol.  The value of the last C_FILE symbol
	     is the symbol index to the first external symbol
	     (actually, coff_renumber_symbols does not get this
	     right--it just sets the value of the last C_FILE symbol
	     to zero--and nobody has ever complained about it).  We
	     try to get this right, below, just before we write the
	     symbols out, but in the general case we may have to write
	     the symbol out twice.  */
	  if (isym.n_sclass == C_FILE)
d1734 63
d1800 2
a1801 1
		  /* We must correct the value of the last C_FILE entry.  */
d1833 1
d1836 9
d2114 2
d2137 1
d2139 1
d2159 7
a2165 5
			 which we are stripping.  We should really
			 just discard the line numbers, but that would
			 be a pain because we have already counted
			 them.  */
		      indx = 0;
d2204 2
d2211 6
a2216 1
	      bfd_coff_swap_lineno_out (output_bfd, (PTR) &iline, (PTR) eline);
d2223 3
a2225 2
	      || bfd_write (finfo->linenos, linesz, o->lineno_count,
			    output_bfd) != linesz * o->lineno_count)
d2228 2
a2229 1
	  o->output_section->lineno_count += o->lineno_count;
d2285 1
a2285 1
	       ("%s: relocs in section `%s', but it has no contents",
d2401 4
a2404 3
                             stripping.  It would be possible to
                             handle this case, but I don't think it's
                             worth it.  */
d2428 4
a2431 1
					  contents, o->output_offset,
d2439 3
a2441 2
	  if (! _bfd_write_section_stabs (output_bfd, o, &secdata->stab_info,
					  contents))
a2504 1
			+ sec->vma
d2506 2
d2549 15
d2584 4
a2587 2
  /* Write out any associated aux entries.  There normally will be
     none.  If there are any, I have no idea how to modify them.  */
d2590 52
a2641 1
      bfd_coff_swap_aux_out (output_bfd, (PTR) (h->aux + i), isym.n_type,
d2655 31
d2743 3
a2745 1
				     (file_ptr) link_order->offset, size);
d2856 8
d2886 12
d2914 3
a2916 2
		     + sym->n_value
		     - sec->vma);
d2936 1
a2936 1
		      rel->r_vaddr - input_section->vma)))
d2944 1
a2944 1
	  if (sym && pe_data(output_bfd)->in_reloc_p(output_bfd, howto))
d2946 11
a2956 8
	      /* relocation to a symbol in a section which
		 isn't absolute - we output the address here 
		 to a file */
	      bfd_vma addr = rel->r_vaddr 
		- input_section->vma 
		+ input_section->output_offset 
		  + input_section->output_section->vma;
	      if (coff_data(output_bfd)->pe)
d2958 6
a2963 2
	      /* FIXME: Shouldn't 4 be sizeof (addr)?  */
	      fwrite (&addr, 1,4, (FILE *) info->base_file);
d2978 7
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d286 1
d294 5
d315 1
a315 1
    return false;
d344 1
a344 1
	    return false;
d379 1
a379 1
	    return false;
d390 10
a399 1
		  (*sym_hash)->type = sym.n_type;
d414 1
a414 1
			return false;
d457 1
a457 1
		    return false;
d466 1
a466 1
		return false;
d471 2
d474 4
d1529 7
a1535 1
	      BFD_ASSERT (h != NULL);
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@a384 1
		  (*sym_hash)->numaux = sym.n_numaux;
d393 1
d469 1
d525 1
d571 14
d888 1
a888 1
  if (obj_raw_syment_count (abfd) != 0)
d1557 6
a1562 1
	      BFD_ASSERT (h->numaux == isymp->n_numaux);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1994, 1995 Free Software Foundation, Inc.
a29 128
#define STRING_SIZE_SIZE (4)

/* We use a hash table to merge identical enum, struct, and union
   definitions in the linker.  */

/* Information we keep for a single element (an enum value, a
   structure or union field) in the debug merge hash table.  */

struct coff_debug_merge_element
{
  /* Next element.  */
  struct coff_debug_merge_element *next;

  /* Name.  */
  const char *name;

  /* Type.  */
  unsigned int type;

  /* Symbol index for complex type.  */
  long tagndx;
};

/* A linked list of debug merge entries for a given name.  */

struct coff_debug_merge_type
{
  /* Next type with the same name.  */
  struct coff_debug_merge_type *next;

  /* Class of type.  */
  int class;

  /* Symbol index where this type is defined.  */
  long indx;

  /* List of elements.  */
  struct coff_debug_merge_element *elements;
};

/* Information we store in the debug merge hash table.  */

struct coff_debug_merge_hash_entry
{
  struct bfd_hash_entry root;

  /* A list of types with this name.  */
  struct coff_debug_merge_type *types;
};

/* The debug merge hash table.  */

struct coff_debug_merge_hash_table
{
  struct bfd_hash_table root;
};

/* Initialize a COFF debug merge hash table.  */

#define coff_debug_merge_hash_table_init(table) \
  (bfd_hash_table_init (&(table)->root, coff_debug_merge_hash_newfunc))

/* Free a COFF debug merge hash table.  */

#define coff_debug_merge_hash_table_free(table) \
  (bfd_hash_table_free (&(table)->root))

/* Look up an entry in a COFF debug merge hash table.  */

#define coff_debug_merge_hash_lookup(table, string, create, copy) \
  ((struct coff_debug_merge_hash_entry *) \
   bfd_hash_lookup (&(table)->root, (string), (create), (copy)))

/* Information we keep for each section in the output file when doing
   a relocateable link.  */

struct coff_link_section_info
{
  /* The relocs to be output.  */
  struct internal_reloc *relocs;
  /* For each reloc against a global symbol whose index was not known
     when the reloc was handled, the global hash table entry.  */
  struct coff_link_hash_entry **rel_hashes;
};

/* Information that we pass around while doing the final link step.  */

struct coff_final_link_info
{
  /* General link information.  */
  struct bfd_link_info *info;
  /* Output BFD.  */
  bfd *output_bfd;
  /* Used to indicate failure in traversal routine.  */
  boolean failed;
  /* Hash table for long symbol names.  */
  struct bfd_strtab_hash *strtab;
  /* When doing a relocateable link, an array of information kept for
     each output section, indexed by the target_index field.  */
  struct coff_link_section_info *section_info;
  /* Symbol index of last C_FILE symbol (-1 if none).  */
  long last_file_index;
  /* Contents of last C_FILE symbol.  */
  struct internal_syment last_file;
  /* Hash table used to merge debug information.  */
  struct coff_debug_merge_hash_table debug_merge;
  /* Buffer large enough to hold swapped symbols of any input file.  */
  struct internal_syment *internal_syms;
  /* Buffer large enough to hold sections of symbols of any input file.  */
  asection **sec_ptrs;
  /* Buffer large enough to hold output indices of symbols of any
     input file.  */
  long *sym_indices;
  /* Buffer large enough to hold output symbols for any input file.  */
  bfd_byte *outsyms;
  /* Buffer large enough to hold external line numbers for any input
     section.  */
  bfd_byte *linenos;
  /* Buffer large enough to hold any input section.  */
  bfd_byte *contents;
  /* Buffer large enough to hold external relocs of any input section.  */
  bfd_byte *external_relocs;
  /* Buffer large enough to hold swapped relocs of any input section.  */
  struct internal_reloc *internal_relocs;
};

static struct bfd_hash_entry *coff_debug_merge_hash_newfunc
  PARAMS ((struct bfd_hash_entry *, struct bfd_hash_table *, const char *));
a36 7
static boolean coff_link_input_bfd
  PARAMS ((struct coff_final_link_info *, bfd *));
static boolean coff_write_global_sym
  PARAMS ((struct coff_link_hash_entry *, PTR));
static boolean coff_reloc_link_order
  PARAMS ((bfd *, struct coff_final_link_info *, asection *,
	   struct bfd_link_order *));
d54 1
a54 4
    {
      bfd_set_error (bfd_error_no_memory);
      return (struct bfd_hash_entry *) ret;
    }
d84 1
d99 1
a99 4
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }
d111 2
a112 2
static struct bfd_hash_entry *
coff_debug_merge_hash_newfunc (entry, table, string)
d127 1
a127 4
    {
      bfd_set_error (bfd_error_no_memory);
      return (struct bfd_hash_entry *) ret;
    }
d309 1
a309 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }
d369 1
a369 1
	  if (! (_bfd_generic_link_add_one_symbol
d399 1
a399 4
			{
			  bfd_set_error (bfd_error_no_memory);
			  return false;
			}
d416 40
a470 1
  size_t max_contents_size;
d475 1
d491 1
d523 1
d536 6
d579 4
a582 3
      finfo.section_info = ((struct coff_link_section_info *)
			    malloc ((abfd->section_count + 1)
				    * sizeof (struct coff_link_section_info)));
d584 1
a584 4
	{
	  bfd_set_error (bfd_error_no_memory);
	  goto error_return;
	}
d625 1
a625 1
	     malloc (o->reloc_count * sizeof (struct internal_reloc)));
d628 1
a628 1
	     malloc (o->reloc_count
d632 1
a632 4
	    {
	      bfd_set_error (bfd_error_no_memory);
	      goto error_return;
	    }
d662 5
a666 4
			 malloc (max_sym_count
				 * sizeof (struct internal_syment)));
  finfo.sec_ptrs = (asection **) malloc (max_sym_count * sizeof (asection *));
  finfo.sym_indices = (long *) malloc (max_sym_count * sizeof (long));
d668 2
a669 2
		   malloc ((size_t) ((max_sym_count + 1) * symesz)));
  finfo.linenos = (bfd_byte *) malloc (max_lineno_count
d671 2
a672 2
  finfo.contents = (bfd_byte *) malloc (max_contents_size);
  finfo.external_relocs = (bfd_byte *) malloc (max_reloc_count * relsz);
d675 2
a676 2
			     malloc (max_reloc_count
				     * sizeof (struct internal_reloc)));
d687 1
a687 4
    {
      bfd_set_error (bfd_error_no_memory);
      goto error_return;
    }
d713 1
a713 1
		  if (! coff_link_input_bfd (&finfo, sub))
d721 1
a721 1
	      if (! coff_reloc_link_order (abfd, &finfo, o, p))
d732 1
a732 1
  /* Free up the buffers used by coff_link_input_bfd.  */
d792 1
a792 1
  coff_link_hash_traverse (coff_hash_table (info), coff_write_global_sym,
d797 1
a797 1
  /* The outsyms buffer is used by coff_write_global_sym.  */
d809 2
a810 1
      external_relocs = (bfd_byte *) malloc (max_output_reloc_count * relsz);
d812 1
a812 4
	{
	  bfd_set_error (bfd_error_no_memory);
	  goto error_return;
	}
d864 7
d998 1
a998 1
  copy = malloc ((size_t) sec->_raw_size);
d1000 1
a1000 4
    {
      bfd_set_error (bfd_error_no_memory);
      return 0;
    }
d1072 2
a1073 2
static boolean
coff_link_input_bfd (finfo, input_bfd)
d1136 5
a1140 5
  if (coff_data(output_bfd)->pe)
      {
	if (!process_embedded_commands (output_bfd, finfo->info, input_bfd))
	  return false;
      }
a1245 1
	  struct coff_debug_merge_type *mtl;
d1253 1
a1253 1
	  if (*name == '~' || *name == '.'
d1255 1
a1255 1
		  && (name[1] == '~' || name[1] == '.')))
d1270 1
a1270 4
	    {
	      bfd_set_error (bfd_error_no_memory);
	      return false;
	    }
d1298 1
a1298 4
		{
		  bfd_set_error (bfd_error_no_memory);
		  return false;
		}
d1307 1
a1307 4
		{
		  bfd_set_error (bfd_error_no_memory);
		  return false;
		}
d1349 5
a1353 2
             type.  */
	  for (mtl = mh->types; mtl != NULL; mtl = mtl->next)
d1355 1
a1355 1
	      struct coff_debug_merge_element *me, *mel;
d1357 6
a1362 2
	      if (mtl->class != mt->class)
		continue;
d1364 11
a1374 7
	      for (me = mt->elements, mel = mtl->elements;
		   me != NULL && mel != NULL;
		   me = me->next, mel = mel->next)
		{
		  if (strcmp (me->name, mel->name) != 0
		      || me->type != mel->type
		      || me->tagndx != mel->tagndx)
d1378 15
a1392 18
	      if (me == NULL && mel == NULL)
		break;
	    }

	  if (mtl == NULL || (bfd_size_type) mtl->indx >= syment_base)
	    {
	      /* This is the first definition of this type.  */
	      mt->indx = output_index;
	      mt->next = mh->types;
	      mh->types = mt;
	    }
	  else
	    {
	      /* This is a redefinition which can be merged.  */
	      bfd_release (input_bfd, (PTR) mt);
	      *indexp = mtl->indx;
	      add = (eslend - esym) / isymesz;
	      skip = true;
d1598 2
a1599 1
		      || isymp->n_sclass == C_BLOCK)
d1609 3
a1611 1
			  while (finfo->sym_indices[indx] < 0
d1633 75
d1877 7
d1885 2
a1886 1
      if ((o->flags & SEC_HAS_CONTENTS) == 0)
d1902 3
a1904 3
      if (coff_section_data (input_bfd, o) != NULL
	  && coff_section_data (input_bfd, o)->contents != NULL)
	contents = coff_section_data (input_bfd, o)->contents;
d2031 15
a2045 6
      if (! bfd_set_section_contents (output_bfd, o->output_section,
				      contents, o->output_offset,
				      (o->_cooked_size != 0
				       ? o->_cooked_size
				       : o->_raw_size)))
	return false;
d2059 2
a2060 2
static boolean
coff_write_global_sym (h, data)
d2190 2
a2191 2
static boolean
coff_reloc_link_order (output_bfd, finfo, output_section, link_order)
d2218 1
a2218 4
	{
	  bfd_set_error (bfd_error_no_memory);
	  return false;
	}
d2278 4
a2281 3
      h = coff_link_hash_lookup (coff_hash_table (finfo->info),
				 link_order->u.reloc.p->u.name,
				 false, false, true);
d2434 1
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996 Free Software Foundation, Inc.
d30 128
d165 7
d189 4
a192 1
    return (struct bfd_hash_entry *) ret;
a221 1
  table->stab_info = NULL;
d236 4
a239 1
    return NULL;
d251 2
a252 2
struct bfd_hash_entry *
_bfd_coff_debug_merge_hash_newfunc (entry, table, string)
d267 4
a270 1
    return (struct bfd_hash_entry *) ret;
d452 4
a455 1
    return false;
d515 1
a515 1
	  if (! (bfd_coff_link_add_one_symbol
d545 4
a548 1
			return false;
a564 40
  /* If this is a non-traditional, non-relocateable link, try to
     optimize the handling of any .stab/.stabstr sections.  */
  if (! info->relocateable
      && ! info->traditional_format
      && info->hash->creator->flavour == bfd_get_flavour (abfd)
      && (info->strip != strip_all && info->strip != strip_debugger))
    {
      asection *stab, *stabstr;

      stab = bfd_get_section_by_name (abfd, ".stab");
      if (stab != NULL)
	{
	  stabstr = bfd_get_section_by_name (abfd, ".stabstr");

	  if (stabstr != NULL)
	    {
	      struct coff_link_hash_table *table;
	      struct coff_section_tdata *secdata;

	      secdata = coff_section_data (abfd, stab);
	      if (secdata == NULL)
		{
		  stab->used_by_bfd =
		    (PTR) bfd_zalloc (abfd,
				      sizeof (struct coff_section_tdata));
		  if (stab->used_by_bfd == NULL)
		    return false;
		  secdata = coff_section_data (abfd, stab);
		}

	      table = coff_hash_table (info);

	      if (! _bfd_link_section_stabs (abfd, &table->stab_info,
					     stab, stabstr,
					     &secdata->stab_info))
		return false;
	    }
	}
    }

d580 1
a584 1
  size_t max_contents_size;
a599 1
  finfo.last_bf_index = -1;
a630 1

a642 6
	      /* Mark all sections which are to be included in the
		 link.  This will normally be every section.  We need
		 to do this so that we can identify any sections which
		 the linker has decided to not include.  */
	      sec->linker_mark = true;

d680 3
a682 4
      finfo.section_info =
	((struct coff_link_section_info *)
	 bfd_malloc ((abfd->section_count + 1)
		     * sizeof (struct coff_link_section_info)));
d684 4
a687 1
	goto error_return;
d728 1
a728 1
	     bfd_malloc (o->reloc_count * sizeof (struct internal_reloc)));
d731 1
a731 1
	     bfd_malloc (o->reloc_count
d735 4
a738 1
	    goto error_return;
d768 4
a771 5
			 bfd_malloc (max_sym_count
				     * sizeof (struct internal_syment)));
  finfo.sec_ptrs = (asection **) bfd_malloc (max_sym_count
					     * sizeof (asection *));
  finfo.sym_indices = (long *) bfd_malloc (max_sym_count * sizeof (long));
d773 2
a774 2
		   bfd_malloc ((size_t) ((max_sym_count + 1) * symesz)));
  finfo.linenos = (bfd_byte *) bfd_malloc (max_lineno_count
d776 2
a777 2
  finfo.contents = (bfd_byte *) bfd_malloc (max_contents_size);
  finfo.external_relocs = (bfd_byte *) bfd_malloc (max_reloc_count * relsz);
d780 2
a781 2
			     bfd_malloc (max_reloc_count
					 * sizeof (struct internal_reloc)));
d792 4
a795 1
    goto error_return;
d821 1
a821 1
		  if (! _bfd_coff_link_input_bfd (&finfo, sub))
d829 1
a829 1
	      if (! _bfd_coff_reloc_link_order (abfd, &finfo, o, p))
d840 1
a840 1
  /* Free up the buffers used by _bfd_coff_link_input_bfd.  */
d900 1
a900 1
  coff_link_hash_traverse (coff_hash_table (info), _bfd_coff_write_global_sym,
d905 1
a905 1
  /* The outsyms buffer is used by _bfd_coff_write_global_sym.  */
d917 1
a917 2
      external_relocs = ((bfd_byte *)
			 bfd_malloc (max_output_reloc_count * relsz));
d919 4
a922 1
	goto error_return;
a973 7
  /* If we have optimized stabs strings, output them.  */
  if (coff_hash_table (info)->stab_info != NULL)
    {
      if (! _bfd_write_stab_strings (abfd, &coff_hash_table (info)->stab_info))
	return false;
    }

d1101 1
a1101 1
  copy = bfd_malloc ((size_t) sec->_raw_size);
d1103 4
a1106 1
    return 0;
d1178 2
a1179 2
boolean
_bfd_coff_link_input_bfd (finfo, input_bfd)
d1242 5
a1246 5
  if (coff_data (output_bfd)->pe)
    {
      if (! process_embedded_commands (output_bfd, finfo->info, input_bfd))
	return false;
    }
d1352 1
d1360 1
a1360 1
	  if (*name == '~' || *name == '.' || *name == '$'
d1362 1
a1362 1
		  && (name[1] == '~' || name[1] == '.' || name[1] == '$')))
d1377 4
a1380 1
	    return false;
d1408 4
a1411 1
		return false;
d1420 4
a1423 1
		return false;
d1465 2
a1466 5
             type.  We always output the type if it has no elements,
             for simplicity.  */
	  if (mt->elements == NULL)
	    bfd_release (input_bfd, (PTR) mt);
	  else
d1468 4
a1471 1
	      struct coff_debug_merge_type *mtl;
d1473 3
a1475 1
	      for (mtl = mh->types; mtl != NULL; mtl = mtl->next)
d1477 3
a1479 16
		  struct coff_debug_merge_element *me, *mel;

		  if (mtl->class != mt->class)
		    continue;

		  for (me = mt->elements, mel = mtl->elements;
		       me != NULL && mel != NULL;
		       me = me->next, mel = mel->next)
		    {
		      if (strcmp (me->name, mel->name) != 0
			  || me->type != mel->type
			  || me->tagndx != mel->tagndx)
			break;
		    }

		  if (me == NULL && mel == NULL)
d1483 18
a1500 15
	      if (mtl == NULL || (bfd_size_type) mtl->indx >= syment_base)
		{
		  /* This is the first definition of this type.  */
		  mt->indx = output_index;
		  mt->next = mh->types;
		  mh->types = mt;
		}
	      else
		{
		  /* This is a redefinition which can be merged.  */
		  bfd_release (input_bfd, (PTR) mt);
		  *indexp = mtl->indx;
		  add = (eslend - esym) / isymesz;
		  skip = true;
		}
d1706 1
a1706 2
		      || isymp->n_sclass == C_BLOCK
		      || isymp->n_sclass == C_FCN)
d1716 1
a1716 3
			  while ((finfo->sym_indices[indx] < 0
				  || ((bfd_size_type) finfo->sym_indices[indx]
				      < syment_base))
a1737 75

		  /* The .bf symbols are supposed to be linked through
		     the endndx field.  We need to carry this list
		     across object files.  */
		  if (i == 0
		      && h == NULL
		      && isymp->n_sclass == C_FCN
		      && (isymp->_n._n_n._n_zeroes != 0
			  || isymp->_n._n_n._n_offset == 0)
		      && isymp->_n._n_name[0] == '.'
		      && isymp->_n._n_name[1] == 'b'
		      && isymp->_n._n_name[2] == 'f'
		      && isymp->_n._n_name[3] == '\0')
		    {
		      if (finfo->last_bf_index != -1)
			{
			  finfo->last_bf.x_sym.x_fcnary.x_fcn.x_endndx.l =
			    *indexp;

			  if ((bfd_size_type) finfo->last_bf_index
			      >= syment_base)
			    {
			      PTR auxout;

			      /* The last .bf symbol is in this input
				 file.  This will only happen if the
				 assembler did not set up the .bf
				 endndx symbols correctly.  */
			      auxout = (PTR) (finfo->outsyms
					      + ((finfo->last_bf_index
						  - syment_base)
						 * osymesz));
			      bfd_coff_swap_aux_out (output_bfd,
						     (PTR) &finfo->last_bf,
						     isymp->n_type,
						     isymp->n_sclass,
						     0, isymp->n_numaux,
						     auxout);
			    }
			  else
			    {
			      /* We have already written out the last
                                 .bf aux entry.  We need to write it
                                 out again.  We borrow *outsym
                                 temporarily.  FIXME: This case should
                                 be made faster.  */
			      bfd_coff_swap_aux_out (output_bfd,
						     (PTR) &finfo->last_bf,
						     isymp->n_type,
						     isymp->n_sclass,
						     0, isymp->n_numaux,
						     (PTR) outsym);
			      if (bfd_seek (output_bfd,
					    (obj_sym_filepos (output_bfd)
					     + finfo->last_bf_index * osymesz),
					    SEEK_SET) != 0
				  || bfd_write (outsym, osymesz, 1,
						output_bfd) != osymesz)
				return false;
			    }
			}

		      if (auxp->x_sym.x_fcnary.x_fcn.x_endndx.l != 0)
			finfo->last_bf_index = -1;
		      else
			{
			  /* The endndx field of this aux entry must
                             be updated with the symbol number of the
                             next .bf symbol.  */
			  finfo->last_bf = *auxp;
			  finfo->last_bf_index = (((outsym - finfo->outsyms)
						   / osymesz)
						  + syment_base);
			}
		    }
a1906 7
      struct coff_section_tdata *secdata;

      if (! o->linker_mark)
	{
	  /* This section was omitted from the link.  */
	  continue;
	}
d1908 1
a1908 2
      if ((o->flags & SEC_HAS_CONTENTS) == 0
	  || (o->_raw_size == 0 && (o->flags & SEC_RELOC) == 0))
d1924 3
a1926 3
      secdata = coff_section_data (input_bfd, o);
      if (secdata != NULL && secdata->contents != NULL)
	contents = secdata->contents;
d2053 6
a2058 15
      if (secdata == NULL || secdata->stab_info == NULL)
	{
	  if (! bfd_set_section_contents (output_bfd, o->output_section,
					  contents, o->output_offset,
					  (o->_cooked_size != 0
					   ? o->_cooked_size
					   : o->_raw_size)))
	    return false;
	}
      else
	{
	  if (! _bfd_write_section_stabs (output_bfd, o, &secdata->stab_info,
					  contents))
	    return false;
	}
d2072 2
a2073 2
boolean
_bfd_coff_write_global_sym (h, data)
d2203 2
a2204 2
boolean
_bfd_coff_reloc_link_order (output_bfd, finfo, output_section, link_order)
d2231 4
a2234 1
	return false;
d2294 3
a2296 4
      h = ((struct coff_link_hash_entry *)
	   bfd_wrapped_link_hash_lookup (output_bfd, finfo->info,
					 link_order->u.reloc.p->u.name,
					 false, false, true));
a2448 1
	      /* FIXME: Shouldn't 4 be sizeof (addr)?  */
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d385 1
a393 1
		      (*sym_hash)->numaux = sym.n_numaux;
a468 1
  boolean long_section_names;
a523 1
  long_section_names = false;
a568 14

      if (bfd_coff_long_section_names (abfd)
	  && strlen (o->name) > SCNNMLEN)
	{
	  /* This section has a long name which must go in the string
             table.  This must correspond to the code in
             coff_write_object_contents which puts the string index
             into the s_name field of the section header.  That is why
             we pass hash as false.  */
	  if (_bfd_stringtab_add (finfo.strtab, o->name, false, false)
	      == (bfd_size_type) -1)
	    goto error_return;
	  long_section_names = true;
	}
d872 1
a872 1
  if (obj_raw_syment_count (abfd) != 0 || long_section_names)
d1541 1
a1541 6

	      /* The m68k-motorola-sysv assembler will sometimes
                 generate two symbols with the same name, but only one
                 will have aux entries.  */
	      BFD_ASSERT (isymp->n_numaux == 0
			  || h->numaux == isymp->n_numaux);
@


1.1.1.4
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a285 1
  boolean keep_syms;
a292 5
  /* Keep the symbols during this function, in case the linker needs
     to read the generic symbols in order to report an error message.  */
  keep_syms = obj_coff_keep_syms (abfd);
  obj_coff_keep_syms (abfd) = true;

d309 1
a309 1
    goto error_return;
d338 1
a338 1
	    goto error_return;
d373 1
a373 1
	    goto error_return;
d384 1
a384 10
		  if (sym.n_type != T_NULL)
		    {
		      if ((*sym_hash)->type != T_NULL
			  && (*sym_hash)->type != sym.n_type)
			(*_bfd_error_handler)
			  ("Warning: type of symbol `%s' changed from %d to %d in %s",
			   name, (*sym_hash)->type, sym.n_type,
			   bfd_get_filename (abfd));
		      (*sym_hash)->type = sym.n_type;
		    }
d399 1
a399 1
			goto error_return;
d442 1
a442 1
		    goto error_return;
d451 1
a451 1
		goto error_return;
a455 2
  obj_coff_keep_syms (abfd) = keep_syms;

a456 4

 error_return:
  obj_coff_keep_syms (abfd) = keep_syms;
  return false;
d1508 1
a1508 7
	      if (h == NULL)
		{
		  /* This can happen if there were errors earlier in
                     the link.  */
		  bfd_set_error (bfd_error_bad_value);
		  return false;
		}
@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997 Free Software Foundation, Inc.
a36 4
static char *dores_com PARAMS ((char *, bfd *, int));
static char *get_name PARAMS ((char *, char **));
static int process_embedded_commands
  PARAMS ((bfd *, struct bfd_link_info *, bfd *));
a380 7
	  if (section == bfd_com_section_ptr
	      && (*sym_hash)->root.type == bfd_link_hash_common
	      && ((*sym_hash)->root.u.c.p->alignment_power
		  > bfd_coff_default_section_alignment_power (abfd)))
	    (*sym_hash)->root.u.c.p->alignment_power
	      = bfd_coff_default_section_alignment_power (abfd);

d536 1
a536 4
    {
      if (! bfd_coff_compute_section_file_positions (abfd))
	goto error_return;
    }
d841 1
a841 1
  if (info->relocateable && max_output_reloc_count > 0)
d1261 2
a1262 1
		  && bfd_is_local_label_name (input_bfd, name)))
d2090 2
a2091 3
	  if (! (_bfd_write_section_stabs
		 (output_bfd, &coff_hash_table (finfo->info)->stab_info,
		  o, &secdata->stab_info, contents)))
a2425 12
      /* If we are doing a relocateable link, then we can just ignore
         a PC relative reloc that is pcrel_offset.  It will already
         have the correct value.  If this is not a relocateable link,
         then we should ignore the symbol value.  */
      if (howto->pc_relative && howto->pcrel_offset)
	{
	  if (info->relocateable)
	    continue;
	  if (sym != NULL && sym->n_scnum != 0)
	    addend += sym->n_value;
	}

a2497 7
	case bfd_reloc_outofrange:
	  (*_bfd_error_handler)
	    ("%s: bad reloc address 0x%lx in section `%s'",
	     bfd_get_filename (input_bfd),
	     (unsigned long) rel->r_vaddr,
	     bfd_get_section_name (input_bfd, input_section));
	  return false;
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
a40 11
static void mark_relocs PARAMS ((struct coff_final_link_info *, bfd *));

/* Define macros so that the ISFCN, et. al., macros work correctly.
   These macros are defined in include/coff/internal.h in terms of
   N_TMASK, etc.  These definitions require a user to define local
   variables with the appropriate names, and with values from the
   coff_data (abfd) structure.  */

#define N_TMASK n_tmask
#define N_BTSHFT n_btshft
#define N_BTMASK n_btmask
d227 1
d234 2
a241 1
      enum coff_symbol_classification classification;
d245 3
a247 3
      classification = bfd_coff_classify_symbol (abfd, &sym);
      if (classification == COFF_SYMBOL_GLOBAL
	  || classification == COFF_SYMBOL_COMMON)
d289 1
a289 3
  unsigned int n_tmask = coff_data (abfd)->local_n_tmask;
  unsigned int n_btshft = coff_data (abfd)->local_n_btshft;
  unsigned int n_btmask = coff_data (abfd)->local_n_btmask;
d303 2
a330 1
      enum coff_symbol_classification classification;
d335 2
a336 2
      classification = bfd_coff_classify_symbol (abfd, &sym);
      if (classification != COFF_SYMBOL_LOCAL)
a342 1
	  boolean addit;
d359 14
a372 1
	  switch (classification)
a373 4
	    default:
	      abort ();

	    case COFF_SYMBOL_GLOBAL:
d376 1
a376 18
	      if (! obj_pe (abfd))
		value -= section->vma;
	      break;

	    case COFF_SYMBOL_UNDEFINED:
	      flags = 0;
	      section = bfd_und_section_ptr;
	      break;

	    case COFF_SYMBOL_COMMON:
	      flags = BSF_GLOBAL;
	      section = bfd_com_section_ptr;
	      break;

	    case COFF_SYMBOL_PE_SECTION:
	      flags = BSF_SECTION_SYM | BSF_GLOBAL;
	      section = coff_section_from_bfd_index (abfd, sym.n_scnum);
	      break;
d379 5
a383 22
	  if (sym.n_sclass == C_WEAKEXT
	      || (obj_pe (abfd) && sym.n_sclass == C_NT_WEAK))
	    flags = BSF_WEAK;

	  addit = true;

	  /* In the PE format, section symbols actually refer to the
             start of the output section.  We handle them specially
             here.  */
	  if (obj_pe (abfd) && (flags & BSF_SECTION_SYM) != 0)
	    {
	      *sym_hash = coff_link_hash_lookup (coff_hash_table (info),
						 name, false, copy, false);
	      if (*sym_hash != NULL)
		{
		  if (((*sym_hash)->coff_link_hash_flags
		       & COFF_LINK_HASH_PE_SECTION_SYMBOL) == 0
		      && (*sym_hash)->root.type != bfd_link_hash_undefined
		      && (*sym_hash)->root.type != bfd_link_hash_undefweak)
		    (*_bfd_error_handler)
		      ("Warning: symbol `%s' is both section and non-section",
		       name);
a384 62
		  addit = false;
		}
	    }

	  /* The Microsoft Visual C compiler does string pooling by
	     hashing the constants to an internal symbol name, and
	     relying on the the linker comdat support to discard
	     duplicate names.  However, if one string is a literal and
	     one is a data initializer, one will end up in the .data
	     section and one will end up in the .rdata section.  The
	     Microsoft linker will combine them into the .data
	     section, which seems to be wrong since it might cause the
	     literal to change.

	     As long as there are no external references to the
	     symbols, which there shouldn't be, we can treat the .data
	     and .rdata instances as separate symbols.  The comdat
	     code in the linker will do the appropriate merging.  Here
	     we avoid getting a multiple definition error for one of
	     these special symbols.

	     FIXME: I don't think this will work in the case where
	     there are two object files which use the constants as a
	     literal and two object files which use it as a data
	     initializer.  One or the other of the second object files
	     is going to wind up with an inappropriate reference.  */
	  if (obj_pe (abfd)
	      && (classification == COFF_SYMBOL_GLOBAL
		  || classification == COFF_SYMBOL_PE_SECTION)
	      && section->comdat != NULL
	      && strncmp (name, "??_", 3) == 0
	      && strcmp (name, section->comdat->name) == 0)
	    {
	      if (*sym_hash == NULL)
		*sym_hash = coff_link_hash_lookup (coff_hash_table (info),
						   name, false, copy, false);
	      if (*sym_hash != NULL
		  && (*sym_hash)->root.type == bfd_link_hash_defined
		  && (*sym_hash)->root.u.def.section->comdat != NULL
		  && strcmp ((*sym_hash)->root.u.def.section->comdat->name,
			     section->comdat->name) == 0)
		addit = false;
	    }

	  if (addit)
	    {
	      if (! (bfd_coff_link_add_one_symbol
		     (info, abfd, name, flags, section, value,
		      (const char *) NULL, copy, false,
		      (struct bfd_link_hash_entry **) sym_hash)))
		goto error_return;
	    }

	  if (obj_pe (abfd) && (flags & BSF_SECTION_SYM) != 0)
	    (*sym_hash)->coff_link_hash_flags |=
	      COFF_LINK_HASH_PE_SECTION_SYMBOL;

	  /* Limit the alignment of a common symbol to the possible
             alignment of a section.  There is no point to permitting
             a higher alignment for a common symbol: we can not
             guarantee it, and it may cause us to allocate extra space
             in the common section.  */
d394 18
a411 38
	      /* If we don't have any symbol information currently in
                 the hash table, or if we are looking at a symbol
                 definition, then update the symbol class and type in
                 the hash table.  */
  	      if (((*sym_hash)->class == C_NULL
  		   && (*sym_hash)->type == T_NULL)
  		  || sym.n_scnum != 0
  		  || (sym.n_value != 0
  		      && (*sym_hash)->root.type != bfd_link_hash_defined
  		      && (*sym_hash)->root.type != bfd_link_hash_defweak))
  		{
  		  (*sym_hash)->class = sym.n_sclass;
  		  if (sym.n_type != T_NULL)
  		    {
  		      /* We want to warn if the type changed, but not
  			 if it changed from an unspecified type.
  			 Testing the whole type byte may work, but the
  			 change from (e.g.) a function of unspecified
  			 type to function of known type also wants to
  			 skip the warning.  */
  		      if ((*sym_hash)->type != T_NULL
  			  && (*sym_hash)->type != sym.n_type
  		          && !(DTYPE ((*sym_hash)->type) == DTYPE (sym.n_type)
  		               && (BTYPE ((*sym_hash)->type) == T_NULL
  		                   || BTYPE (sym.n_type) == T_NULL)))
  			(*_bfd_error_handler)
  			  (_("Warning: type of symbol `%s' changed from %d to %d in %s"),
  			   name, (*sym_hash)->type, sym.n_type,
  			   bfd_get_filename (abfd));

  		      /* We don't want to change from a meaningful
  			 base type to a null one, but if we know
  			 nothing, take what little we might now know.  */
  		      if (BTYPE (sym.n_type) != T_NULL
  			  || (*sym_hash)->type == T_NULL)
			(*sym_hash)->type = sym.n_type;
  		    }
  		  (*sym_hash)->auxbfd = abfd;
a435 20

	  if (classification == COFF_SYMBOL_PE_SECTION
	      && (*sym_hash)->numaux != 0)
	    {
	      /* Some PE sections (such as .bss) have a zero size in
                 the section header, but a non-zero size in the AUX
                 record.  Correct that here.

		 FIXME: This is not at all the right place to do this.
		 For example, it won't help objdump.  This needs to be
		 done when we swap in the section header.  */

	      BFD_ASSERT ((*sym_hash)->numaux == 1);
	      if (section->_raw_size == 0)
		section->_raw_size = (*sym_hash)->aux[0].x_scn.x_scnlen;

	      /* FIXME: We could test whether the section sizes
                 matches the size in the aux entry, but apparently
                 that sometimes fails unexpectedly.  */
	    }
a532 1
  finfo.global_to_static = false;
d762 1
a762 1
	      if (! bfd_coff_link_output_has_begun (sub, & finfo))
a782 3
  if (! bfd_coff_final_link_postscript (abfd, & finfo))
    goto error_return;
  
a840 12
  /* If doing task linking (ld --task-link) then make a pass through the
     global symbols, writing out any that are defined, and making them
     static. */
  if (info->task_link)
    {
      finfo.failed = false;
      coff_link_hash_traverse (coff_hash_table (info), _bfd_coff_write_task_globals,
			       (PTR) &finfo);
      if (finfo.failed)
	goto error_return;
    }

d1039 1
a1039 1
     struct bfd_link_info *info ATTRIBUTE_UNUSED;
a1119 54
/* Place a marker against all symbols which are used by relocations.
   This marker can be picked up by the 'do we skip this symbol ?'
   loop in _bfd_coff_link_input_bfd() and used to prevent skipping
   that symbol. 
   */

static void
mark_relocs (finfo, input_bfd)
     struct coff_final_link_info *	finfo;
     bfd * 				input_bfd;
{
  asection * a;

  if ((bfd_get_file_flags (input_bfd) & HAS_SYMS) == 0)
    return;
  
  for (a = input_bfd->sections; a != (asection *) NULL; a = a->next)
    {
      struct internal_reloc *	internal_relocs;
      struct internal_reloc *	irel;
      struct internal_reloc *	irelend;

      
      if ((a->flags & SEC_RELOC) == 0 || a->reloc_count  < 1)
	continue;

      /* Read in the relocs.  */
      internal_relocs = _bfd_coff_read_internal_relocs
	(input_bfd, a, false,
	 finfo->external_relocs,
	 finfo->info->relocateable,
	 (finfo->info->relocateable
	  ? (finfo->section_info[ a->output_section->target_index ].relocs + a->output_section->reloc_count)
	  : finfo->internal_relocs)
	);
      
      if (internal_relocs == NULL)
	continue;

      irel     = internal_relocs;
      irelend  = irel + a->reloc_count;

      /* Place a mark in the sym_indices array (whose entries have
	 been initialised to 0) for all of the symbols that are used
	 in the relocation table.  This will then be picked up in the
	 skip/don't pass */
      
      for (; irel < irelend; irel++)
	{
	  finfo->sym_indices[ irel->r_symndx ] = -1;
	}
    }
}

d1128 1
a1128 5
  unsigned int n_tmask = coff_data (input_bfd)->local_n_tmask;
  unsigned int n_btshft = coff_data (input_bfd)->local_n_btshft;
#if 0
  unsigned int n_btmask = coff_data (input_bfd)->local_n_btmask;
#endif
d1135 2
d1154 1
d1162 7
a1192 13
  /* If we are going to perform relocations and also strip/discard some symbols
     then we must make sure that we do not strip/discard those symbols that are
     going to be involved in the relocations */
  if ((   finfo->info->strip   != strip_none
       || finfo->info->discard != discard_none)
      && finfo->info->relocateable)
    {
      /* mark the symbol array as 'not-used' */
      memset (indexp, 0, obj_raw_syment_count (input_bfd) * sizeof * indexp); 
       
      mark_relocs (finfo, input_bfd);
    }

a1195 1
      enum coff_symbol_classification classification;
a1197 1
      boolean dont_skip_symbol;
d1208 3
a1210 2
      classification = bfd_coff_classify_symbol (input_bfd, &isym);
      switch (classification)
d1212 4
a1215 13
	default:
	  abort ();
	case COFF_SYMBOL_GLOBAL:
	case COFF_SYMBOL_PE_SECTION:
	case COFF_SYMBOL_LOCAL:
	  *secpp = coff_section_from_bfd_index (input_bfd, isym.n_scnum);
	  break;
	case COFF_SYMBOL_COMMON:
	  *secpp = bfd_com_section_ptr;
	  break;
	case COFF_SYMBOL_UNDEFINED:
	  *secpp = bfd_und_section_ptr;
	  break;
a1217 9
      /* Extract the flag indicating if this symbol is used by a
         relocation.  */
      if ((finfo->info->strip != strip_none
	   || finfo->info->discard != discard_none)
	  && finfo->info->relocateable)
	dont_skip_symbol = *indexp;
      else
	dont_skip_symbol = false;
      
d1225 1
a1225 1
      if (finfo->info->strip == strip_all && ! dont_skip_symbol)
d1230 2
a1231 1
	  switch (classification)
a1232 5
	    default:
	      abort ();
	    case COFF_SYMBOL_GLOBAL:
	    case COFF_SYMBOL_COMMON:
	    case COFF_SYMBOL_PE_SECTION:
d1235 2
a1236 2
		 Locally defined function symbols, however, are an
		 exception, and are not moved to the end.  */
d1240 3
a1242 9
	      break;

	    case COFF_SYMBOL_UNDEFINED:
	      /* Undefined symbols are left for the end.  */
	      global = true;
	      skip = true;
	      break;

	    case COFF_SYMBOL_LOCAL:
d1245 1
a1245 1
	      if (finfo->info->discard == discard_all && ! dont_skip_symbol)
a1246 1
	      break;
d1251 1
a1251 3
         symbol, then skip it.  FIXME: gas sets the section to N_ABS
         for some types of debugging symbols; I don't know if this is
         a bug or not.  In any case, we handle it here.  */
d1254 1
a1254 12
	  && ! dont_skip_symbol
	  && (isym.n_scnum == N_DEBUG
	      || (isym.n_scnum == N_ABS
		  && (isym.n_sclass == C_AUTO
		      || isym.n_sclass == C_REG
		      || isym.n_sclass == C_MOS
		      || isym.n_sclass == C_MOE
		      || isym.n_sclass == C_MOU
		      || isym.n_sclass == C_ARG
		      || isym.n_sclass == C_REGPARM
		      || isym.n_sclass == C_FIELD
		      || isym.n_sclass == C_EOS))))
d1270 2
a1271 3
	  if (! dont_skip_symbol
	      && ((finfo->info->strip == strip_some
		   && (bfd_hash_lookup (finfo->info->keep_hash, name, false,
d1273 3
a1275 3
		   || (! global
		       && finfo->info->discard == discard_l
		       && bfd_is_local_label_name (input_bfd, name))))
d1340 1
a1340 1
	      char *name_copy;
d1355 2
a1356 3
	      name_copy = (char *) bfd_alloc (input_bfd,
					      strlen (elename) + 1);
	      if (name_copy == NULL)
d1358 1
a1358 1
	      strcpy (name_copy, elename);
d1360 1
a1360 1
	      (*epp)->name = name_copy;
d1472 18
a1489 1
	  switch (isym.n_sclass)
a1490 63
	    case C_AUTO:
	    case C_MOS:
	    case C_EOS:
	    case C_MOE:
	    case C_MOU:
	    case C_UNTAG:
	    case C_STRTAG:
	    case C_ENTAG:
	    case C_TPDEF:
	    case C_ARG:
	    case C_USTATIC:
	    case C_REG:
	    case C_REGPARM:
	    case C_FIELD:
	      /* The symbol value should not be modified.  */
	      break;

	    case C_FCN:
	      if (obj_pe (input_bfd)
		  && strcmp (isym.n_name, ".bf") != 0
		  && isym.n_scnum > 0)
		{
		  /* For PE, .lf and .ef get their value left alone,
		     while .bf gets relocated.  However, they all have
		     "real" section numbers, and need to be moved into
		     the new section.  */
		  isym.n_scnum = (*secpp)->output_section->target_index;
		  break;
		}
	      /* Fall through.  */
	    default:
	    case C_LABEL:  /* Not completely sure about these 2 */
	    case C_EXTDEF:
	    case C_BLOCK:
	    case C_EFCN:
	    case C_NULL:
	    case C_EXT:
	    case C_STAT:
	    case C_SECTION:
	    case C_NT_WEAK:
	      /* Compute new symbol location.  */
	    if (isym.n_scnum > 0)
	      {
		isym.n_scnum = (*secpp)->output_section->target_index;
		isym.n_value += (*secpp)->output_offset;
		if (! obj_pe (input_bfd))
		  isym.n_value -= (*secpp)->vma;
		if (! obj_pe (finfo->output_bfd))
		  isym.n_value += (*secpp)->output_section->vma;
	      }
	    break;

	    case C_FILE:
	      /* The value of a C_FILE symbol is the symbol index of
		 the next C_FILE symbol.  The value of the last C_FILE
		 symbol is the symbol index to the first external
		 symbol (actually, coff_renumber_symbols does not get
		 this right--it just sets the value of the last C_FILE
		 symbol to zero--and nobody has ever complained about
		 it).  We try to get this right, below, just before we
		 write the symbols out, but in the general case we may
		 have to write the symbol out twice.  */

d1494 1
a1494 2
		  /* We must correct the value of the last C_FILE
                     entry.  */
a1525 1
	      break;
a1527 9
	  /* If doing task linking, convert normal global function symbols to
	     static functions. */

	  if (finfo->info->task_link
	      && (isym.n_sclass == C_EXT
		  || isym.n_sclass == C_WEAKEXT
		  || (obj_pe (input_bfd) && isym.n_sclass == C_NT_WEAK)))
	    isym.n_sclass = C_STAT;

a1796 2
	  bfd_byte *oeline;
	  boolean skipping;
a1817 1
	  oeline = finfo->linenos;
a1818 1
	  skipping = false;
d1838 5
a1842 7
			 which we are stripping.  We must discard the
			 line numbers because reading them back with
			 no associated symbol (or associating them all
			 with symbol #0) will fail.  We can't regain
			 the space in the output file, but at least
			 they're dense.  */
		      skipping = true;
a1880 2

			skipping = false;
d1886 1
a1886 6
	      if (!skipping)
	        {
		  bfd_coff_swap_lineno_out (output_bfd, (PTR) &iline,
					    (PTR) oeline);
		  oeline += linesz;
		}
d1893 2
a1894 3
	      || (bfd_write (finfo->linenos, 1, oeline - finfo->linenos,
			     output_bfd)
		  != (bfd_size_type) (oeline - finfo->linenos)))
d1897 1
a1897 2
	  o->output_section->lineno_count +=
	    (oeline - finfo->linenos) / linesz;
d1953 1
a1953 1
	       (_("%s: relocs in section `%s', but it has no contents"),
d2069 3
a2071 4
                             stripping.  This should have been handled
			     by the 'dont_skip_symbol' code in the while
			     loop at the top of this function. */
			  
d2095 1
a2095 4
					  contents, 
                                          (file_ptr) 
                                          (o->output_offset * 
                                           bfd_octets_per_byte (output_bfd)),
d2169 1
a2170 2
	if (! obj_pe (finfo->output_bfd))
	  isym.n_value += sec->vma;
a2211 15
  /* If doing task linking and this is the pass where we convert
     defined globals to statics, then do that conversion now.  If the
     symbol is not being converted, just ignore it and it will be
     output during a later pass. */
  if (finfo->global_to_static)
    {
      if (isym.n_sclass != C_EXT
	  && isym.n_sclass != C_WEAKEXT
	  && (! obj_pe (output_bfd) || isym.n_sclass != C_NT_WEAK))
	{
	  return true;
	}
      isym.n_sclass = C_STAT;
    }

d2232 2
a2233 4
  /* Write out any associated aux entries.  Most of the aux entries
     will have been modified in _bfd_coff_link_input_bfd.  We have to
     handle section aux entries here, now that we have the final
     relocation and line number counts.  */
d2236 1
a2236 52
      union internal_auxent *auxp;

      auxp = h->aux + i;

      /* Look for a section aux entry here using the same tests that
         coff_swap_aux_out uses.  */
      if (i == 0
	  && (isym.n_sclass == C_STAT
	      || isym.n_sclass == C_HIDDEN)
	  && isym.n_type == T_NULL
	  && (h->root.type == bfd_link_hash_defined
	      || h->root.type == bfd_link_hash_defweak))
	{
	  asection *sec;

	  sec = h->root.u.def.section->output_section;
	  if (sec != NULL)
	    {
	      auxp->x_scn.x_scnlen = (sec->_cooked_size != 0
				      ? sec->_cooked_size
				      : sec->_raw_size);

	      /* For PE, an overflow on the final link reportedly does
                 not matter.  FIXME: Why not?  */

	      if (sec->reloc_count > 0xffff
		  && (! obj_pe (output_bfd)
		      || finfo->info->relocateable))
		(*_bfd_error_handler)
		  (_("%s: %s: reloc overflow: 0x%lx > 0xffff"),
		   bfd_get_filename (output_bfd),
		   bfd_get_section_name (output_bfd, sec),
		   sec->reloc_count);

	      if (sec->lineno_count > 0xffff
		  && (! obj_pe (output_bfd)
		      || finfo->info->relocateable))
		(*_bfd_error_handler)
		  (_("%s: warning: %s: line number overflow: 0x%lx > 0xffff"),
		   bfd_get_filename (output_bfd),
		   bfd_get_section_name (output_bfd, sec),
		   sec->lineno_count);

	      auxp->x_scn.x_nreloc = sec->reloc_count;
	      auxp->x_scn.x_nlinno = sec->lineno_count;
	      auxp->x_scn.x_checksum = 0;
	      auxp->x_scn.x_associated = 0;
	      auxp->x_scn.x_comdat = 0;
	    }
	}

      bfd_coff_swap_aux_out (output_bfd, (PTR) auxp, isym.n_type,
a2249 31
/* Write out task global symbols, converting them to statics.  Called
   via coff_link_hash_traverse.  Calls bfd_coff_write_global_sym to do
   the dirty work, if the symbol we are processing needs conversion. */

boolean
_bfd_coff_write_task_globals (h, data)
     struct coff_link_hash_entry *h;
     PTR data;
{
  struct coff_final_link_info *finfo = (struct coff_final_link_info *) data;
  boolean rtnval = true;
  boolean save_global_to_static;

  if (h->indx < 0)
    {
      switch (h->root.type)
	{
	case bfd_link_hash_defined:
	case bfd_link_hash_defweak:
	  save_global_to_static = finfo->global_to_static;
	  finfo->global_to_static = true;
	  rtnval = _bfd_coff_write_global_sym (h, data);
	  finfo->global_to_static = save_global_to_static;
	  break;
	default:
	  break;
	}
    }
  return (rtnval);
}

d2307 1
a2307 3
				     (file_ptr) 
                                     (link_order->offset *
                                      bfd_octets_per_byte (output_bfd)), size);
a2417 8
      else if (symndx < 0
	       || (unsigned long) symndx >= obj_raw_syment_count (input_bfd))
	{
	  (*_bfd_error_handler)
	    ("%s: illegal symbol index %ld in relocs",
	     bfd_get_filename (input_bfd), symndx);
	  return false;
	}
d2468 2
a2469 3
		     + sym->n_value);
	      if (! obj_pe (input_bfd))
		val -= sec->vma;
d2489 1
a2489 1
		      rel->r_vaddr - input_section->vma, true)))
d2497 1
a2497 1
	  if (sym && pe_data (output_bfd)->in_reloc_p (output_bfd, howto))
d2499 8
a2506 11
	      /* Relocation to a symbol in a section which isn't
		 absolute.  We output the address here to a file.
		 This file is then read by dlltool when generating the
		 reloc section.  Note that the base file is not
		 portable between systems.  We write out a long here,
		 and dlltool reads in a long.  */
	      long addr = (rel->r_vaddr 
			   - input_section->vma 
			   + input_section->output_offset 
			   + input_section->output_section->vma);
	      if (coff_data (output_bfd)->pe)
d2508 2
a2509 6
	      if (fwrite (&addr, 1, sizeof (long), (FILE *) info->base_file)
		  != sizeof (long))
		{
		  bfd_set_error (bfd_error_system_call);
		  return false;
		}
d2526 1
a2526 1
	    (_("%s: bad reloc address 0x%lx in section `%s'"),
@


1.1.1.7
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
   Free Software Foundation, Inc.
a42 9
/* Return true if SYM is a weak, external symbol.  */
#define IS_WEAK_EXTERNAL(abfd, sym)			\
  ((sym).n_sclass == C_WEAKEXT				\
   || (obj_pe (abfd) && (sym).n_sclass == C_NT_WEAK))

/* Return true if SYM is an external symbol.  */
#define IS_EXTERNAL(abfd, sym)				\
  ((sym).n_sclass == C_EXT || IS_WEAK_EXTERNAL (abfd, sym))

d398 2
a399 1
	  if (IS_WEAK_EXTERNAL (abfd, sym))
d897 2
a898 1
	      && bfd_family_coff (p->u.indirect.section->owner))
d924 1
a924 1

d985 1
a985 1
     static.  */
a1097 2

      obj_coff_strings_written (abfd) = true;
d1155 1
a1155 1
  if (coff_data(output_bfd)->pe)
d1163 1
a1163 1
      if (ptr[0] == ',')
d1189 1
a1189 1

d1200 1
a1200 1
  if (!sec)
d1202 1
a1202 1

d1204 1
a1204 1
  if (!copy)
d1206 1
a1206 1
  if (! bfd_get_section_contents(abfd, sec, copy, 0, sec->_raw_size))
d1212 1
a1212 1
  for (s = copy;  s < e ; )
d1233 1
a1233 1
	    switch (*attribs++)
d1267 1
a1267 1
      else
d1277 1
a1277 1
   that symbol.
d1289 1
a1289 1

d1296 1
d1309 1
a1309 1

d1320 1
a1320 1

d1403 2
a1404 2
      memset (indexp, 0, obj_raw_syment_count (input_bfd) * sizeof * indexp);

d1451 1
a1451 1

d1837 6
a1842 2
	     static functions.  */
	  if (finfo->info->task_link && IS_EXTERNAL (input_bfd, isym))
d2205 1
a2205 1
		      skipping = false;
d2403 2
a2404 2
			     loop at the top of this function.  */

d2428 3
a2430 3
					  contents,
                                          (file_ptr)
                                          (o->output_offset *
d2552 1
a2552 1
     output during a later pass.  */
d2555 6
a2560 3
      if (! IS_EXTERNAL (output_bfd, isym))
	return true;

a2563 8
  /* When a weak symbol is not overriden by a strong one,
     turn it into an external symbol when not building a
     shared or relocateable object.  */
  if (! finfo->info->shared
      && ! finfo->info->relocateable
      && IS_WEAK_EXTERNAL (finfo->output_bfd, isym))
    isym.n_sclass = C_EXT;

d2565 1
a2565 1

d2657 1
a2657 1
   the dirty work, if the symbol we are processing needs conversion.  */
d2743 1
a2743 1
				     (file_ptr)
d2865 1
a2865 1
	{
d2880 1
a2931 3
	  else if (h->root.type == bfd_link_hash_undefweak)
	    val = 0;

d2943 1
a2943 1
	  /* Emit a reloc if the backend thinks it needs it.  */
d2952 3
a2954 3
	      long addr = (rel->r_vaddr
			   - input_section->vma
			   + input_section->output_offset
d2966 1
a2966 1

d3010 1
@


1.1.1.8
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
d31 1
a31 1
static bfd_boolean coff_link_add_object_symbols
d33 7
a39 10
static bfd_boolean coff_link_check_archive_element
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *));
static bfd_boolean coff_link_check_ar_symbols
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *));
static bfd_boolean coff_link_add_symbols
  PARAMS ((bfd *, struct bfd_link_info *));
static char *dores_com
  PARAMS ((char *, bfd *, int));
static char *get_name
  PARAMS ((char *, char **));
d42 1
a42 2
static void mark_relocs
  PARAMS ((struct coff_final_link_info *, bfd *));
d44 1
a44 1
/* Return TRUE if SYM is a weak, external symbol.  */
d49 1
a49 1
/* Return TRUE if SYM is an external symbol.  */
d101 1
a101 1
bfd_boolean
a119 1
  bfd_size_type amt = sizeof (struct coff_link_hash_table);
d121 2
a122 1
  ret = (struct coff_link_hash_table *) bfd_malloc (amt);
d128 1
a128 1
      free (ret);
d169 1
a169 1
bfd_boolean
d183 1
a183 1
      return FALSE;
d189 1
a189 1
static bfd_boolean
d195 1
a195 1
    return FALSE;
d197 1
a197 1
    return FALSE;
d202 1
a202 1
	return FALSE;
d204 1
a204 1
  return TRUE;
d212 1
a212 1
static bfd_boolean
d216 1
a216 1
     bfd_boolean *pneeded;
d219 1
a219 1
    return FALSE;
d222 1
a222 1
    return FALSE;
d227 1
a227 1
	return FALSE;
d233 1
a233 1
	return FALSE;
d236 1
a236 1
  return TRUE;
d242 1
a242 1
static bfd_boolean
d246 1
a246 1
     bfd_boolean *pneeded;
d252 1
a252 1
  *pneeded = FALSE;
d277 2
a278 2
	    return FALSE;
	  h = bfd_link_hash_lookup (info->hash, name, FALSE, FALSE, TRUE);
a279 10
	  /* auto import */
	  if (!h && info->pei386_auto_import)
	    {
	      if (!strncmp (name,"__imp_", 6))
		{
		  h =
                    bfd_link_hash_lookup (info->hash, name + 6, FALSE, FALSE,
                                          TRUE);
		}
	    }
d288 3
a290 3
		return FALSE;
	      *pneeded = TRUE;
	      return TRUE;
d298 1
a298 1
  return TRUE;
d303 1
a303 1
static bfd_boolean
d311 2
a312 2
  bfd_boolean keep_syms;
  bfd_boolean default_copy;
a317 1
  bfd_size_type amt;
d322 1
a322 1
  obj_coff_keep_syms (abfd) = TRUE;
d325 1
a325 1
    default_copy = FALSE;
d327 1
a327 1
    default_copy = TRUE;
d333 4
a336 2
  amt = symcount * sizeof (struct coff_link_hash_entry *);
  sym_hash = (struct coff_link_hash_entry **) bfd_zalloc (abfd, amt);
d340 2
d351 1
a351 1
      bfd_boolean copy;
d363 1
a363 1
	  bfd_boolean addit;
d376 1
a376 1
	    copy = TRUE;
d411 1
a411 1
	  addit = TRUE;
d419 1
a419 1
						 name, FALSE, copy, FALSE);
d430 1
a430 1
		  addit = FALSE;
d436 1
a436 1
	     relying on the linker comdat support to discard
d465 1
a465 1
						   name, FALSE, copy, FALSE);
d471 1
a471 1
		addit = FALSE;
d478 1
a478 1
		      (const char *) NULL, copy, FALSE,
d529 1
a529 1
  			   bfd_archive_filename (abfd));
d557 2
a558 2
					      sym.n_sclass, (int) i,
					      sym.n_numaux, (PTR) iaux);
d611 3
a613 2
		  amt = sizeof (struct coff_section_tdata);
		  stab->used_by_bfd = (PTR) bfd_zalloc (abfd, amt);
d631 1
a631 1
  return TRUE;
d635 1
a635 1
  return FALSE;
d640 1
a640 1
bfd_boolean
d647 2
a648 2
  bfd_boolean debug_merge_allocated;
  bfd_boolean long_section_names;
d651 5
a655 5
  bfd_size_type max_sym_count;
  bfd_size_type max_lineno_count;
  bfd_size_type max_reloc_count;
  bfd_size_type max_output_reloc_count;
  bfd_size_type max_contents_size;
a662 1
  bfd_size_type amt;
d680 2
a681 2
  finfo.global_to_static = FALSE;
  debug_merge_allocated = FALSE;
d691 1
a691 1
  debug_merge_allocated = TRUE;
d708 1
a708 1
  long_section_names = FALSE;
d725 1
a725 1
	      sec->linker_mark = TRUE;
a752 4
	  /* In PE COFF, if there are at least 0xffff relocations an
	     extra relocation will be written out to encode the count.  */
	  if (obj_pe (abfd) && o->reloc_count >= 0xffff)
	    rel_filepos += relsz;
d762 2
a763 2
             we pass hash as FALSE.  */
	  if (_bfd_stringtab_add (finfo.strtab, o->name, FALSE, FALSE)
d766 1
a766 1
	  long_section_names = TRUE;
d778 4
a781 3
      amt = abfd->section_count + 1;
      amt *= sizeof (struct coff_link_section_info);
      finfo.section_info = (struct coff_link_section_info *) bfd_malloc (amt);
a821 2
	  amt = o->reloc_count;
	  amt *= sizeof (struct internal_reloc);
d823 2
a824 3
	    (struct internal_reloc *) bfd_malloc (amt);
	  amt = o->reloc_count;
	  amt *= sizeof (struct coff_link_hash_entry *);
d826 3
a828 1
	    (struct coff_link_hash_entry **) bfd_malloc (amt);
d853 1
a853 1
      sub->output_has_begun = FALSE;
d860 10
a869 9
  amt = max_sym_count * sizeof (struct internal_syment);
  finfo.internal_syms = (struct internal_syment *) bfd_malloc (amt);
  amt = max_sym_count * sizeof (asection *);
  finfo.sec_ptrs = (asection **) bfd_malloc (amt);
  amt = max_sym_count * sizeof (long);
  finfo.sym_indices = (long *) bfd_malloc (amt);
  finfo.outsyms = (bfd_byte *) bfd_malloc ((max_sym_count + 1) * symesz);
  amt = max_lineno_count * bfd_coff_linesz (abfd);
  finfo.linenos = (bfd_byte *) bfd_malloc (amt);
d871 1
a871 2
  amt = max_reloc_count * relsz;
  finfo.external_relocs = (bfd_byte *) bfd_malloc (amt);
d873 3
a875 4
    {
      amt = max_reloc_count * sizeof (struct internal_reloc);
      finfo.internal_relocs = (struct internal_reloc *) bfd_malloc (amt);
    }
d913 1
a913 1
		  sub->output_has_begun = TRUE;
d936 1
a936 1
  debug_merge_allocated = FALSE;
a979 2
      file_ptr pos;

d983 6
a988 5

      pos = obj_sym_filepos (abfd) + finfo.last_file_index * symesz;
      if (bfd_seek (abfd, pos, SEEK_SET) != 0
	  || bfd_bwrite (finfo.outsyms, symesz, abfd) != symesz)
	return FALSE;
d996 2
a997 3
      finfo.failed = FALSE;
      coff_link_hash_traverse (coff_hash_table (info),
			       _bfd_coff_write_task_globals,
d1004 2
a1005 3
  finfo.failed = FALSE;
  coff_link_hash_traverse (coff_hash_table (info),
			   _bfd_coff_write_global_sym,
d1022 2
a1023 2
      amt = max_output_reloc_count * relsz;
      external_relocs = (bfd_byte *) bfd_malloc (amt);
d1052 2
a1053 3
	      || (bfd_bwrite ((PTR) external_relocs,
			     (bfd_size_type) relsz * o->reloc_count, abfd)
		  != (bfd_size_type) relsz * o->reloc_count))
d1081 1
a1081 1
	return FALSE;
d1087 5
a1091 5
      file_ptr pos;

      pos = obj_sym_filepos (abfd) + obj_raw_syment_count (abfd) * symesz;
      if (bfd_seek (abfd, pos, SEEK_SET) != 0)
	return FALSE;
d1094 3
a1096 3
      H_PUT_32 (abfd,
		_bfd_stringtab_size (finfo.strtab) + STRING_SIZE_SIZE,
		strbuf);
d1098 1
a1098 1
 #error Change H_PUT_32 above
d1101 2
a1102 3
      if (bfd_bwrite (strbuf, (bfd_size_type) STRING_SIZE_SIZE, abfd)
	  != STRING_SIZE_SIZE)
	return FALSE;
d1105 1
a1105 1
	return FALSE;
d1107 1
a1107 1
      obj_coff_strings_written (abfd) = TRUE;
d1116 1
a1116 1
  return TRUE;
d1154 1
a1154 1
  return FALSE;
d1169 1
a1169 1
	pe_data(output_bfd)->pe_opthdr.SizeOfHeapReserve = val;
d1171 1
a1171 1
	pe_data(output_bfd)->pe_opthdr.SizeOfStackReserve = val;
d1175 1
a1175 1
	  val = strtoul (ptr+1, &ptr, 0);
d1177 1
a1177 1
	    pe_data(output_bfd)->pe_opthdr.SizeOfHeapCommit = val;
d1179 1
a1179 1
	    pe_data(output_bfd)->pe_opthdr.SizeOfStackCommit = val;
d1213 1
a1213 1
  copy = bfd_malloc (sec->_raw_size);
d1216 1
a1216 1
  if (! bfd_get_section_contents(abfd, sec, copy, (bfd_vma) 0, sec->_raw_size))
a1307 3
      /* Don't mark relocs in excluded sections.  */
      if (a->output_section == bfd_abs_section_ptr)
	continue;
d1311 1
a1311 1
	(input_bfd, a, FALSE,
d1340 1
a1340 1
bfd_boolean
d1350 3
a1352 3
  bfd_boolean (*adjust_symndx)
    PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *,
	     struct internal_reloc *, bfd_boolean *));
d1356 1
a1356 1
  bfd_boolean copy, hash;
d1380 1
a1380 1
  copy = FALSE;
d1382 2
a1383 2
    copy = TRUE;
  hash = TRUE;
d1385 1
a1385 1
    hash = FALSE;
d1388 1
a1388 1
    return FALSE;
d1401 1
a1401 1
	return FALSE;
d1421 3
a1423 3
      bfd_boolean skip;
      bfd_boolean global;
      bfd_boolean dont_skip_symbol;
d1459 1
a1459 1
	dont_skip_symbol = FALSE;
d1463 2
a1464 2
      skip = FALSE;
      global = FALSE;
d1469 1
a1469 1
	skip = TRUE;
d1484 1
a1484 1
	      global = TRUE;
d1486 1
a1486 1
		skip = TRUE;
d1491 2
a1492 2
	      global = TRUE;
	      skip = TRUE;
d1499 1
a1499 1
		skip = TRUE;
a1503 13
#ifndef COFF_WITH_PE
      /* Skip section symbols for sections which are not going to be
	 emitted.  */
      if (!skip
	  && isym.n_sclass == C_STAT
	  && isym.n_type == T_NULL
          && isym.n_numaux > 0)
        {
          if ((*secpp)->output_section == bfd_abs_section_ptr)
            skip = TRUE;
        }
#endif

d1522 1
a1522 1
	skip = TRUE;
d1535 1
a1535 1
	    return FALSE;
d1539 2
a1540 2
		   && (bfd_hash_lookup (finfo->info->keep_hash, name, FALSE,
				    FALSE) == NULL))
d1544 1
a1544 1
	    skip = TRUE;
a1563 1
	  bfd_size_type amt;
d1567 1
a1567 1
	    return FALSE;
d1577 1
a1577 1
					     TRUE, TRUE);
d1579 1
a1579 1
	    return FALSE;
d1584 3
a1586 2
	  amt = sizeof (struct coff_debug_merge_type);
	  mt = (struct coff_debug_merge_type *) bfd_alloc (input_bfd, amt);
d1588 1
a1588 1
	    return FALSE;
a1611 1
	      amt = sizeof (struct coff_debug_merge_element);
d1613 2
a1614 1
		      bfd_alloc (input_bfd, amt));
d1616 1
a1616 1
		return FALSE;
d1621 1
a1621 1
		return FALSE;
d1623 2
a1624 2
	      amt = strlen (elename) + 1;
	      name_copy = (char *) bfd_alloc (input_bfd, amt);
d1626 1
a1626 1
		return FALSE;
d1710 1
a1710 1
		  skip = TRUE;
d1734 1
a1734 1
		return FALSE;
d1737 1
a1737 1
		return FALSE;
d1807 1
a1807 1
		  && finfo->last_file.n_value != (bfd_vma) output_index)
a1823 2
		      file_ptr pos;

d1830 7
a1836 5
		      pos = obj_sym_filepos (output_bfd);
		      pos += finfo->last_file_index * osymesz;
		      if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
			  || bfd_bwrite (outsym, osymesz, output_bfd) != osymesz)
			return FALSE;
d1869 1
a1869 1
		  return FALSE;
d1965 1
a1965 1
			    return FALSE;
d1971 1
a1971 1
			return FALSE;
a2056 2
			      file_ptr pos;

d2068 7
a2074 6
			      pos = obj_sym_filepos (output_bfd);
			      pos += finfo->last_bf_index * osymesz;
			      if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
				  || (bfd_bwrite (outsym, osymesz, output_bfd)
				      != osymesz))
				return FALSE;
d2120 1
a2120 3
	  bfd_boolean skipping;
	  file_ptr pos;
	  bfd_size_type amt;
d2136 1
a2136 1
	      || bfd_bread (finfo->linenos, linesz * o->lineno_count,
d2138 1
a2138 1
	    return FALSE;
d2144 1
a2144 1
	  skipping = FALSE;
d2170 1
a2170 1
		      skipping = TRUE;
d2210 1
a2210 1
		      skipping = FALSE;
d2224 8
a2231 6
	  pos = o->output_section->line_filepos;
	  pos += o->output_section->lineno_count * linesz;
	  amt = oeline - finfo->linenos;
	  if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
	      || bfd_bwrite (finfo->linenos, amt, output_bfd) != amt)
	    return FALSE;
d2233 2
a2234 1
	  o->output_section->lineno_count += amt / linesz;
d2255 7
a2261 8
      file_ptr pos;
      bfd_size_type amt;

      pos = obj_sym_filepos (output_bfd) + syment_base * osymesz;
      amt = outsym - finfo->outsyms;
      if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
	  || bfd_bwrite (finfo->outsyms, amt, output_bfd) != amt)
	return FALSE;
d2291 1
a2291 1
		bfd_archive_filename (input_bfd),
d2294 1
a2294 1
	      return FALSE;
d2307 1
a2307 1
	    return FALSE;
d2320 1
a2320 1
			     (input_bfd, o, FALSE, finfo->external_relocs,
d2327 1
a2327 1
	    return FALSE;
d2337 1
a2337 1
	    return FALSE;
d2353 1
a2353 1
		  bfd_boolean adjusted;
d2369 1
a2369 1
			return FALSE;
d2415 1
a2415 1
			    return FALSE;
d2420 1
a2420 1
			    return FALSE;
a2431 3
	  file_ptr loc = o->output_offset * bfd_octets_per_byte (output_bfd);
	  bfd_size_type amt = (o->_cooked_size != 0
			       ? o->_cooked_size : o->_raw_size);
d2433 8
a2440 2
					  contents, loc, amt))
	    return FALSE;
d2447 1
a2447 1
	    return FALSE;
d2454 1
a2454 1
	return FALSE;
d2457 1
a2457 1
  return TRUE;
d2462 1
a2462 1
bfd_boolean
a2471 1
  file_ptr pos;
a2474 7
  if (h->root.type == bfd_link_hash_warning)
    {
      h = (struct coff_link_hash_entry *) h->root.u.i.link;
      if (h->root.type == bfd_link_hash_new)
	return TRUE;
    }

d2476 1
a2476 1
    return TRUE;
d2482 1
a2482 1
				   h->root.root.string, FALSE, FALSE)
d2484 1
a2484 1
    return TRUE;
a2489 1
    case bfd_link_hash_warning:
d2491 1
a2491 1
      return FALSE;
d2522 1
d2524 1
a2524 1
      return TRUE;
d2531 1
a2531 1
      bfd_boolean hash;
d2534 1
a2534 1
      hash = TRUE;
d2536 1
a2536 1
	hash = FALSE;
d2538 1
a2538 1
				 FALSE);
d2541 2
a2542 2
	  finfo->failed = TRUE;
	  return FALSE;
d2561 1
a2561 1
	return TRUE;
d2580 5
a2584 4
  pos = obj_sym_filepos (output_bfd);
  pos += obj_raw_syment_count (output_bfd) * symesz;
  if (bfd_seek (output_bfd, pos, SEEK_SET) != 0
      || bfd_bwrite (finfo->outsyms, symesz, output_bfd) != symesz)
d2586 2
a2587 2
      finfo->failed = TRUE;
      return FALSE;
d2652 1
a2652 1
			     isym.n_sclass, (int) i, isym.n_numaux,
d2654 1
a2654 1
      if (bfd_bwrite (finfo->outsyms, symesz, output_bfd) != symesz)
d2656 2
a2657 2
	  finfo->failed = TRUE;
	  return FALSE;
d2662 1
a2662 1
  return TRUE;
d2669 1
a2669 1
bfd_boolean
d2675 2
a2676 5
  bfd_boolean rtnval = TRUE;
  bfd_boolean save_global_to_static;

  if (h->root.type == bfd_link_hash_warning)
    h = (struct coff_link_hash_entry *) h->root.u.i.link;
d2685 1
a2685 1
	  finfo->global_to_static = TRUE;
d2698 1
a2698 1
bfd_boolean
d2713 1
a2713 1
      return FALSE;
d2721 1
a2721 2
      bfd_boolean ok;
      file_ptr loc;
d2726 1
a2726 1
	return FALSE;
d2729 1
a2729 2
				      (bfd_vma) link_order->u.reloc.p->addend,\
				      buf);
d2748 1
a2748 1
	      return FALSE;
a2751 1
      loc = link_order->offset * bfd_octets_per_byte (output_bfd);
d2753 3
a2755 1
                                     loc, size);
d2758 1
a2758 1
	return FALSE;
d2791 1
a2791 1
					 FALSE, FALSE, TRUE));
d2810 1
a2810 1
	    return FALSE;
d2825 1
a2825 1
  return TRUE;
d2831 1
a2831 1
bfd_boolean
d2871 2
a2872 2
	     bfd_archive_filename (input_bfd), symndx);
	  return FALSE;
d2893 1
a2893 1
	return FALSE;
d2948 2
a2949 2
		      rel->r_vaddr - input_section->vma, TRUE)))
		return FALSE;
d2974 1
a2974 1
		  return FALSE;
d2993 1
a2993 1
	     bfd_archive_filename (input_bfd),
d2996 1
a2996 1
	  return FALSE;
d3010 1
a3010 1
		  return FALSE;
d3016 1
a3016 1
	      return FALSE;
d3020 1
a3020 1
  return TRUE;
@


1.1.1.9
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
d6 1
a6 1
   This file is part of BFD, the Binary File Descriptor library.
d8 13
a20 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a29 1
#include "safe-ctype.h"
d31 16
a46 3
static bfd_boolean coff_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info);
static bfd_boolean coff_link_check_archive_element (bfd *abfd, struct bfd_link_info *info, bfd_boolean *pneeded);
static bfd_boolean coff_link_add_symbols (bfd *abfd, struct bfd_link_info *info);
d70 4
a73 3
_bfd_coff_link_hash_newfunc (struct bfd_hash_entry *entry,
			     struct bfd_hash_table *table,
			     const char *string)
d106 6
a111 5
_bfd_coff_link_hash_table_init (struct coff_link_hash_table *table,
				bfd *abfd,
				struct bfd_hash_entry *(*newfunc) (struct bfd_hash_entry *,
								   struct bfd_hash_table *,
								   const char *))
d120 2
a121 1
_bfd_coff_link_hash_table_create (bfd *abfd)
d126 1
a126 1
  ret = bfd_malloc (amt);
a128 1

d141 4
a144 3
_bfd_coff_debug_merge_hash_newfunc (struct bfd_hash_entry *entry,
				    struct bfd_hash_table *table,
				    const char *string)
d174 3
a176 1
_bfd_coff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)
d183 2
a184 2
      return _bfd_generic_link_add_archive_symbols
	(abfd, info, coff_link_check_archive_element);
d194 3
a196 1
coff_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)
d203 20
a222 2
  if (! info->keep_memory
      && ! _bfd_coff_free_symbols (abfd))
d225 15
d247 4
a250 3
coff_link_check_ar_symbols (bfd *abfd,
			    struct bfd_link_info *info,
			    bfd_boolean *pneeded)
d266 1
a266 1
      bfd_coff_swap_sym_in (abfd, esym, &sym);
d278 1
d284 10
a293 6
	  /* Auto import.  */
	  if (!h
	      && info->pei386_auto_import
	      && !strncmp (name,"__imp_", 6))
	    h = bfd_link_hash_lookup (info->hash, name + 6, FALSE, FALSE, TRUE);

a314 27
/* Check a single archive element to see if we need to include it in
   the link.  *PNEEDED is set according to whether this element is
   needed in the link or not.  This is called via
   _bfd_generic_link_add_archive_symbols.  */

static bfd_boolean
coff_link_check_archive_element (bfd *abfd,
				 struct bfd_link_info *info,
				 bfd_boolean *pneeded)
{
  if (! _bfd_coff_get_external_symbols (abfd))
    return FALSE;

  if (! coff_link_check_ar_symbols (abfd, info, pneeded))
    return FALSE;

  if (*pneeded
      && ! coff_link_add_symbols (abfd, info))
    return FALSE;

  if ((! info->keep_memory || ! *pneeded)
      && ! _bfd_coff_free_symbols (abfd))
    return FALSE;

  return TRUE;
}

d318 3
a320 2
coff_link_add_symbols (bfd *abfd,
		       struct bfd_link_info *info)
d349 1
a349 1
  sym_hash = bfd_zalloc (abfd, amt);
d364 1
a364 1
      bfd_coff_swap_sym_in (abfd, esym, &sym);
d567 1
a567 1
			bfd_coff_swap_aux_in (abfd, eaux, sym.n_type,
d569 1
a569 1
					      sym.n_numaux, iaux);
d585 1
d600 1
a600 1
  /* If this is a non-traditional, non-relocatable link, try to
d602 1
a602 1
  if (! info->relocatable
d607 1
a607 1
      asection *stabstr;
d609 4
a612 1
      stabstr = bfd_get_section_by_name (abfd, ".stabstr");
d614 1
a614 9
      if (stabstr != NULL)
	{
	  bfd_size_type string_offset = 0;
	  asection *stab;
	  
	  for (stab = abfd->sections; stab; stab = stab->next)
	    if (strncmp (".stab", stab->name, 5) == 0
		&& (!stab->name[5]
		    || (stab->name[5] == '.' && ISDIGIT (stab->name[6]))))
d617 3
a619 3
	      struct coff_section_tdata *secdata
		= coff_section_data (abfd, stab);
	      
d623 1
a623 1
		  stab->used_by_bfd = bfd_zalloc (abfd, amt);
d633 1
a633 2
					     &secdata->stab_info,
					     &string_offset))
d651 3
a653 2
_bfd_coff_final_link (bfd *abfd,
		      struct bfd_link_info *info)
d742 1
a742 1
	      if (info->relocatable)
d752 1
a752 1
	  else if (info->relocatable
d785 1
a785 1
  /* If doing a relocatable link, allocate space for the pointers we
d787 1
a787 1
  if (info->relocatable)
d795 1
a795 1
      finfo.section_info = bfd_malloc (amt);
d833 1
a833 1
	     but only when doing a relocatable link, which is not the
d835 1
a835 1
	  BFD_ASSERT (info->relocatable);
d838 2
a839 1
	  finfo.section_info[o->target_index].relocs = bfd_malloc (amt);
d842 2
a843 1
	  finfo.section_info[o->target_index].rel_hashes = bfd_malloc (amt);
d876 1
a876 1
  finfo.internal_syms = bfd_malloc (amt);
d878 1
a878 1
  finfo.sec_ptrs = bfd_malloc (amt);
d880 2
a881 2
  finfo.sym_indices = bfd_malloc (amt);
  finfo.outsyms = bfd_malloc ((max_sym_count + 1) * symesz);
d883 2
a884 2
  finfo.linenos = bfd_malloc (amt);
  finfo.contents = bfd_malloc (max_contents_size);
d886 2
a887 2
  finfo.external_relocs = bfd_malloc (amt);
  if (! info->relocatable)
d890 1
a890 1
      finfo.internal_relocs = bfd_malloc (amt);
d899 1
a899 1
      || (! info->relocatable
d999 2
a1000 2
      bfd_coff_swap_sym_out (abfd, &finfo.last_file,
			     finfo.outsyms);
d1015 2
a1016 1
			       _bfd_coff_write_task_globals, &finfo);
d1024 2
a1025 1
			   _bfd_coff_write_global_sym, &finfo);
d1036 1
a1036 1
  if (info->relocatable && max_output_reloc_count > 0)
d1042 1
a1042 1
      external_relocs = bfd_malloc (amt);
d1067 1
a1067 1
	      bfd_coff_swap_reloc_out (abfd, irel, erel);
d1070 4
a1073 21
	  if (bfd_seek (abfd, o->rel_filepos, SEEK_SET) != 0)
	    goto error_return;
	  if (obj_pe (abfd) && o->reloc_count >= 0xffff)
	    {
	      /* In PE COFF, write the count of relocs as the first
		 reloc.  The header overflow bit will be set
		 elsewhere. */
	      struct internal_reloc incount;
	      bfd_byte *excount = (bfd_byte *)bfd_malloc (relsz);
	      
	      memset (&incount, 0, sizeof (incount));
	      incount.r_vaddr = o->reloc_count + 1;
	      bfd_coff_swap_reloc_out (abfd, (PTR) &incount, (PTR) excount);
	      if (bfd_bwrite (excount, relsz, abfd) != relsz)
		/* We'll leak, but it's an error anyway. */
		goto error_return;
	      free (excount);
	    }
	  if (bfd_bwrite (external_relocs,
			  (bfd_size_type) relsz * o->reloc_count, abfd)
	      != (bfd_size_type) relsz * o->reloc_count)
d1178 1
a1178 1
/* Parse out a -heap <reserved>,<commit> line.  */
d1181 4
a1184 1
dores_com (char *ptr, bfd *output_bfd, int heap)
a1188 1

d1206 3
a1208 2
static char *
get_name (char *ptr, char **dst)
d1219 1
a1219 1
/* Process any magic embedded commands in a section called .drectve.  */
d1222 4
a1225 3
process_embedded_commands (bfd *output_bfd,
			   struct bfd_link_info *info ATTRIBUTE_UNUSED,
			   bfd *abfd)
a1230 1

d1237 1
a1237 2

  if (! bfd_get_section_contents (abfd, sec, copy, (bfd_vma) 0, sec->_raw_size))
a1242 1

d1245 4
a1248 5
      if (s[0]!= '-')
	{
	  s++;
	  continue;
	}
d1254 1
a1259 1

d1261 21
a1281 23
	  s = get_name (s, &name);
	  s = get_name (s, &attribs);

	  while (loop)
	    {
	      switch (*attribs++)
		{
		case 'W':
		  had_write = 1;
		  break;
		case 'R':
		  had_read = 1;
		  break;
		case 'S':
		  had_shared = 1;
		  break;
		case 'X':
		  had_exec = 1;
		  break;
		default:
		  loop = 0;
		}
	    }
d1283 6
a1288 7
	  if (asec)
	    {
	      if (had_exec)
		asec->flags |= SEC_CODE;
	      if (!had_write)
		asec->flags |= SEC_READONLY;
	    }
d1291 3
a1293 2
	s = dores_com (s+5, output_bfd, 1);

d1295 3
a1297 2
	s = dores_com (s+6, output_bfd, 0);

d1308 2
a1309 1
   that symbol.  */
d1312 3
a1314 1
mark_relocs (struct coff_final_link_info *finfo, bfd *input_bfd)
d1337 2
a1338 2
	 finfo->info->relocatable,
	 (finfo->info->relocatable
d1352 2
a1353 1
	 skip/don't-skip pass.  */
d1355 3
a1357 1
	finfo->sym_indices[ irel->r_symndx ] = -1;
d1365 3
a1367 1
_bfd_coff_link_input_bfd (struct coff_final_link_info *finfo, bfd *input_bfd)
d1375 2
a1376 2
    (bfd *, struct bfd_link_info *, bfd *, asection *,
     struct internal_reloc *, bfd_boolean *);
d1422 5
a1426 3
  if (coff_data (output_bfd)->pe
      && ! process_embedded_commands (output_bfd, finfo->info, input_bfd))
    return FALSE;
d1428 3
a1430 3
  /* If we are going to perform relocations and also strip/discard some
     symbols then we must make sure that we do not strip/discard those
     symbols that are going to be involved in the relocations.  */
d1433 1
a1433 1
      && finfo->info->relocatable)
d1435 1
a1435 1
      /* Mark the symbol array as 'not-used'.  */
d1450 1
a1450 1
      bfd_coff_swap_sym_in (input_bfd, esym, isymp);
d1480 1
a1480 1
	  && finfo->info->relocatable)
a1531 1
	  && dont_skip_symbol == 0
d1534 5
a1538 3
          && isym.n_numaux > 0
	  && (*secpp)->output_section == bfd_abs_section_ptr)
	skip = TRUE;
d1623 1
a1623 1
	  mt = bfd_alloc (input_bfd, amt);
d1630 1
a1630 1
	  bfd_coff_swap_aux_in (input_bfd, (esym + isymesz),
d1632 1
a1632 1
				&aux);
d1647 1
a1647 1
	      bfd_coff_swap_sym_in (input_bfd, esl, islp);
d1650 2
a1651 1
	      *epp = bfd_alloc (input_bfd, amt);
d1661 1
a1661 1
	      name_copy = bfd_alloc (input_bfd, amt);
d1676 1
a1676 1
		  bfd_coff_swap_aux_in (input_bfd, (esl + isymesz),
d1678 1
a1678 1
					islp->n_numaux, &eleaux);
d1685 1
d1708 1
a1708 1
	    bfd_release (input_bfd, mt);
d1744 1
a1744 1
		  bfd_release (input_bfd, mt);
d1768 2
a1769 1
	      name = _bfd_coff_internal_syment_name (input_bfd, &isym, NULL);
d1842 1
d1853 5
a1857 5
					     &finfo->last_file,
					     (finfo->outsyms
					      + ((finfo->last_file_index
						  - syment_base)
						 * osymesz)));
d1867 2
a1868 1
					     &finfo->last_file, outsym);
d1888 2
a1889 1
	  bfd_coff_swap_sym_out (output_bfd, &isym, outsym);
d1929 1
a1935 1

d1980 3
a1982 2
		  bfd_coff_swap_aux_in (input_bfd, esym, isymp->n_type,
					isymp->n_sclass, i, isymp->n_numaux, &aux);
d2075 1
a2075 1
			      void *auxout;
d2081 4
a2084 5
			      auxout = (finfo->outsyms
					+ ((finfo->last_bf_index
					    - syment_base)
					   * osymesz));

d2086 1
a2086 1
						     &finfo->last_bf,
d2102 1
a2102 1
						     &finfo->last_bf,
d2106 1
a2106 1
						     outsym);
d2133 1
a2133 1
		  bfd_coff_swap_aux_out (output_bfd, auxp, isymp->n_type,
d2135 1
a2135 1
					 outsym);
d2189 1
a2189 1
	      bfd_coff_swap_lineno_in (input_bfd, eline, &iline);
d2225 4
a2228 3
					    (finfo->outsyms
					     + ((indx - syment_base)
						* osymesz)), &is);
d2233 1
a2233 1
			  void *auxptr;
d2235 3
a2237 3
			  auxptr = (finfo->outsyms
				    + ((indx - syment_base + 1)
				       * osymesz));
d2240 1
a2240 1
						0, is.n_numaux, &ia);
d2245 1
a2245 1
			  bfd_coff_swap_aux_out (output_bfd, &ia,
d2258 2
a2259 1
		  bfd_coff_swap_lineno_out (output_bfd, &iline, oeline);
d2283 4
a2286 4
      bfd_coff_swap_sym_out (output_bfd, &finfo->last_file,
			     (finfo->outsyms
			      + ((finfo->last_file_index - syment_base)
				 * osymesz)));
d2316 4
a2319 2
	/* This section was omitted from the link.  */
	continue;
d2359 2
a2360 2
			      finfo->info->relocatable,
			      (finfo->info->relocatable
d2377 1
a2377 1
	  if (finfo->info->relocatable)
d2396 1
d2447 1
d2486 5
a2490 3
  if (! finfo->info->keep_memory
      && ! _bfd_coff_free_symbols (input_bfd))
    return FALSE;
d2498 3
a2500 1
_bfd_coff_write_global_sym (struct coff_link_hash_entry *h, void *data)
d2609 1
a2609 1
  /* When a weak symbol is not overridden by a strong one,
d2611 1
a2611 1
     shared or relocatable object.  */
d2613 1
a2613 1
      && ! finfo->info->relocatable
d2619 1
a2619 1
  bfd_coff_swap_sym_out (output_bfd, &isym, finfo->outsyms);
d2666 1
d2669 1
a2669 1
		      || finfo->info->relocatable))
d2678 1
a2678 1
		      || finfo->info->relocatable))
d2693 1
a2693 1
      bfd_coff_swap_aux_out (output_bfd, auxp, isym.n_type,
d2695 1
a2695 1
			     finfo->outsyms);
d2712 3
a2714 1
_bfd_coff_write_task_globals (struct coff_link_hash_entry *h, void *data)
d2744 5
a2748 4
_bfd_coff_reloc_link_order (bfd *output_bfd,
			    struct coff_final_link_info *finfo,
			    asection *output_section,
			    struct bfd_link_order *link_order)
d2770 1
a2770 1
      buf = bfd_zmalloc (size);
d2800 1
a2800 1
      ok = bfd_set_section_contents (output_bfd, output_section, buf,
d2809 1
d2868 1
d2878 11
a2888 8
_bfd_coff_generic_relocate_section (bfd *output_bfd,
				    struct bfd_link_info *info,
				    bfd *input_bfd,
				    asection *input_section,
				    bfd_byte *contents,
				    struct internal_reloc *relocs,
				    struct internal_syment *syms,
				    asection **sections)
d2930 1
d2941 1
a2941 1
      /* If we are doing a relocatable link, then we can just ignore
d2943 1
a2943 1
         have the correct value.  If this is not a relocatable link,
d2947 1
a2947 1
	  if (info->relocatable)
d2990 1
a2990 1
	  else if (! info->relocatable)
@


