head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.48
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.46
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.42
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.44
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.36
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.40
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.38
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.3
	FSF:1.1.1
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2005.03.30.09.57.42;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.02.20.45.11;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.07.22.05.23;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.30.17.04.01;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.21.21.33.08;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.21.54.23;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.30;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.11.20;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.33.22;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.07.11.06.11;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.06.07.11.06.11;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.11.19.14.12.52;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.45.51;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.13.26.49;	author fgsch;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.19;	author drahn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.02.20.22.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Add StackGhost .wcookie section for sparc64.
@
text
@/* BFD back end for NetBSD style core files
   Copyright 1988, 1989, 1991, 1992, 1993, 1996, 1998, 1999, 2000, 2001,
   2002, 2003, 2004
   Free Software Foundation, Inc.
   Written by Paul Kranenburg, EUR

This file is part of BFD, the Binary File Descriptor library.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "libbfd.h"
#include "libaout.h"           /* BFD a.out internal data structures */

#include <sys/param.h>
#include <sys/dir.h>
#include <signal.h>
#include <sys/core.h>

/* The machine ID for OpenBSD/sparc64 and older versions of
   NetBSD/sparc64 overlaps with M_MIPS1.  */
#define M_SPARC64_OPENBSD	M_MIPS1
 
/* Offset of StackGhost cookie within `struct md_coredump' on
   OpenBSD/sparc.  */
#define SPARC_WCOOKIE_OFFSET	344

/* Offset of StackGhost cookie within `struct md_coredump' on
   OpenBSD/sparc64.  */
#define SPARC64_WCOOKIE_OFFSET	832

struct netbsd_core_struct {
	struct core core;
} *rawptr;

/* forward declarations */

static const bfd_target *netbsd_core_file_p
  PARAMS ((bfd *abfd));
static char *netbsd_core_file_failing_command
  PARAMS ((bfd *abfd));
static int netbsd_core_file_failing_signal
  PARAMS ((bfd *abfd));
static bfd_boolean netbsd_core_file_matches_executable_p
  PARAMS ((bfd *core_bfd, bfd *exec_bfd));
static void swap_abort
  PARAMS ((void));

/* Handle NetBSD-style core dump file.  */

static const bfd_target *
netbsd_core_file_p (abfd)
     bfd *abfd;

{
  int i, val;
  file_ptr offset;
  asection *asect;
  struct core core;
  struct coreseg coreseg;
  bfd_size_type amt = sizeof core;

  val = bfd_bread ((void *) &core, amt, abfd);
  if (val != sizeof core)
    {
      /* Too small to be a core file */
      bfd_set_error (bfd_error_wrong_format);
      return 0;
    }

  if (CORE_GETMAGIC (core) != COREMAGIC)
    {
      bfd_set_error (bfd_error_wrong_format);
      return 0;
    }

  amt = sizeof (struct netbsd_core_struct);
  rawptr = (struct netbsd_core_struct *) bfd_zalloc (abfd, amt);
  if (rawptr == NULL)
    return 0;

  rawptr->core = core;
  abfd->tdata.netbsd_core_data = rawptr;

  offset = core.c_hdrsize;
  for (i = 0; i < core.c_nseg; i++)
    {
      const char *sname;
      flagword flags;

      if (bfd_seek (abfd, offset, SEEK_SET) != 0)
	goto punt;

      val = bfd_bread ((void *) &coreseg, (bfd_size_type) sizeof coreseg, abfd);
      if (val != sizeof coreseg)
	{
	  bfd_set_error (bfd_error_file_truncated);
	  goto punt;
	}
      if (CORE_GETMAGIC (coreseg) != CORESEGMAGIC)
	{
	  bfd_set_error (bfd_error_wrong_format);
	  goto punt;
	}

      offset += core.c_seghdrsize;

      switch (CORE_GETFLAG (coreseg))
	{
	case CORE_CPU:
	  sname = ".reg";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	case CORE_DATA:
	  sname = ".data";
	  flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
	  break;
	case CORE_STACK:
	  sname = ".stack";
	  flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
	  break;
	default:
	  sname = ".unknown";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	}
      asect = bfd_make_section_anyway (abfd, sname);
      if (asect == NULL)
	goto punt;

      asect->flags = flags;
      asect->_raw_size = coreseg.c_size;
      asect->vma = coreseg.c_addr;
      asect->filepos = offset;
      asect->alignment_power = 2;

      if (CORE_GETFLAG (coreseg) == CORE_CPU)
	{
	  bfd_size_type wcookie_offset;

	  switch (CORE_GETMID (core))
	    {
	    case M_SPARC_NETBSD:
	      wcookie_offset = SPARC_WCOOKIE_OFFSET;
	      break;
	    case M_SPARC64_OPENBSD:
	      wcookie_offset = SPARC64_WCOOKIE_OFFSET;
	      break;
	    default:
	      wcookie_offset = 0;
	      break;
	    }

	  if (wcookie_offset > 0 && coreseg.c_size > wcookie_offset)
	    {
	      /* Truncate the .reg section.  */
	      asect->_raw_size = wcookie_offset;

	      /* And create the .wcookie section.  */
	      asect = bfd_make_section_anyway (abfd, ".wcookie");
	      if (asect == NULL)
		goto punt;

	      asect->flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	      asect->_raw_size = coreseg.c_size - wcookie_offset;
	      asect->vma = 0;
	      asect->filepos = offset + wcookie_offset;
	      asect->alignment_power = 2;
	    }
	}

      offset += coreseg.c_size;
    }

  /* Set architecture from machine ID.  */
  switch (CORE_GETMID (core))
    {
    case M_X86_64_NETBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_i386, bfd_mach_x86_64);
      break;

    case M_386_NETBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_i386, bfd_mach_i386_i386);
      break;

    case M_68K_NETBSD:
    case M_68K4K_NETBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_m68k, 0);
      break;

    case M_88K_OPENBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_m88k, 0);
      break;

    case M_HPPA_OPENBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_hppa, 0);
      break;

    case M_POWERPC_NETBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_powerpc, bfd_mach_ppc);
      break;

    case M_SPARC_NETBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_sparc, bfd_mach_sparc);
      break;

    case M_SPARC64_NETBSD:
    case M_SPARC64_OPENBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_sparc, bfd_mach_sparc_v9);
      break;

    case M_VAX_NETBSD:
    case M_VAX4K_NETBSD:
      bfd_default_set_arch_mach (abfd, bfd_arch_vax, 0);
      break;
    }

  /* OK, we believe you.  You're a core file (sure, sure).  */
  return abfd->xvec;

 punt:
  bfd_release (abfd, abfd->tdata.any);
  abfd->tdata.any = NULL;
  bfd_section_list_clear (abfd);
  return 0;
}

static char*
netbsd_core_file_failing_command (abfd)
	bfd *abfd;
{
 /*return core_command (abfd);*/
  return abfd->tdata.netbsd_core_data->core.c_name;
}

static int
netbsd_core_file_failing_signal (abfd)
	bfd *abfd;
{
  /*return core_signal (abfd);*/
  return abfd->tdata.netbsd_core_data->core.c_signo;
}

static bfd_boolean
netbsd_core_file_matches_executable_p  (core_bfd, exec_bfd)
     bfd *core_bfd ATTRIBUTE_UNUSED;
     bfd *exec_bfd ATTRIBUTE_UNUSED;
{
  return TRUE;		/* FIXME, We have no way of telling at this point */
}

/* If somebody calls any byte-swapping routines, shoot them.  */
static void
swap_abort ()
{
  abort (); /* This way doesn't require any declaration for ANSI to fuck up */
}

#define	NO_GET ((bfd_vma (*) (const void *)) swap_abort)
#define	NO_PUT ((void (*) (bfd_vma, void *)) swap_abort)
#define	NO_GETS ((bfd_signed_vma (*) (const void *)) swap_abort)
#define	NO_GET64 ((bfd_uint64_t (*) (const void *)) swap_abort)
#define	NO_PUT64 ((void (*) (bfd_uint64_t, void *)) swap_abort)
#define	NO_GETS64 ((bfd_int64_t (*) (const void *)) swap_abort)

const bfd_target netbsd_core_vec =
  {
    "netbsd-core",
    bfd_target_unknown_flavour,
    BFD_ENDIAN_UNKNOWN,		/* target byte order */
    BFD_ENDIAN_UNKNOWN,		/* target headers byte order */
    (HAS_RELOC | EXEC_P |	/* object flags */
     HAS_LINENO | HAS_DEBUG |
     HAS_SYMS | HAS_LOCALS | WP_TEXT | D_PAGED),
    (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC), /* section flags */
    0,			                                   /* symbol prefix */
    ' ',						   /* ar_pad_char */
    16,							   /* ar_max_namelen */
    NO_GET64, NO_GETS64, NO_PUT64,	/* 64 bit data.  */
    NO_GET, NO_GETS, NO_PUT,		/* 32 bit data.  */
    NO_GET, NO_GETS, NO_PUT,		/* 16 bit data.  */
    NO_GET64, NO_GETS64, NO_PUT64,	/* 64 bit hdrs.  */
    NO_GET, NO_GETS, NO_PUT,		/* 32 bit hdrs.  */
    NO_GET, NO_GETS, NO_PUT,		/* 16 bit hdrs.  */

    {				/* bfd_check_format */
      _bfd_dummy_target,		/* unknown format */
      _bfd_dummy_target,		/* object file */
      _bfd_dummy_target,		/* archive */
      netbsd_core_file_p		/* a core file */
    },
    {				/* bfd_set_format */
      bfd_false, bfd_false,
      bfd_false, bfd_false
    },
    {				/* bfd_write_contents */
      bfd_false, bfd_false,
      bfd_false, bfd_false
    },

    BFD_JUMP_TABLE_GENERIC (_bfd_generic),
    BFD_JUMP_TABLE_COPY (_bfd_generic),
    BFD_JUMP_TABLE_CORE (netbsd),
    BFD_JUMP_TABLE_ARCHIVE (_bfd_noarchive),
    BFD_JUMP_TABLE_SYMBOLS (_bfd_nosymbols),
    BFD_JUMP_TABLE_RELOCS (_bfd_norelocs),
    BFD_JUMP_TABLE_WRITE (_bfd_generic),
    BFD_JUMP_TABLE_LINK (_bfd_nolink),
    BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),

    NULL,

    (PTR) 0			/* backend_data */
  };
@


1.9
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d37 3
d42 2
a43 2
   OpenBSD/sparc.  */
#define CORE_WCOOKIE_OFFSET	344
d150 1
a150 3
      if (CORE_GETMID (core) == M_SPARC_NETBSD
	  && CORE_GETFLAG (coreseg) == CORE_CPU
	  && coreseg.c_size > CORE_WCOOKIE_OFFSET)
d152 1
a152 2
	  /* Truncate the .reg section.  */
	  asect->_raw_size = CORE_WCOOKIE_OFFSET;
d154 29
a182 10
	  /* And create the .wcookie section.  */
	  asect = bfd_make_section_anyway (abfd, ".wcookie");
	  if (asect == NULL)
	    goto punt;

	  asect->flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  asect->_raw_size = 4;
	  asect->vma = 0;
	  asect->filepos = offset + CORE_WCOOKIE_OFFSET;
	  asect->alignment_power = 2;
@


1.8
log
@Recognize hppa core files.
ok mickey@@, drahn@@, deraadt@@
@
text
@d3 1
a3 1
   2002
d35 2
a36 1
#define M_SPARC64_OPENBSD       M_MIPS1
d40 1
a40 1
#define CORE_WCOOKIE_OFFSET     344
a60 1
/* ARGSUSED */
d148 17
a164 17
          && CORE_GETFLAG (coreseg) == CORE_CPU
          && coreseg.c_size > CORE_WCOOKIE_OFFSET)
        {
          /* Truncate the .reg section.  */
          asect->_raw_size = CORE_WCOOKIE_OFFSET;

          /* And create the .wcookie section.  */
          asect = bfd_make_section_anyway (abfd, ".wcookie");
          if (asect == NULL)
            goto punt;

          asect->flags = SEC_ALLOC + SEC_HAS_CONTENTS;
          asect->_raw_size = 4;
          asect->vma = 0;
          asect->filepos = offset + CORE_WCOOKIE_OFFSET;
          asect->alignment_power = 2;
        }
a229 1
/* ARGSUSED */
a237 1
/* ARGSUSED */
d252 7
a258 4
#define	NO_GET	((bfd_vma (*) PARAMS ((   const bfd_byte *))) swap_abort )
#define	NO_PUT	((void    (*) PARAMS ((bfd_vma, bfd_byte *))) swap_abort )
#define	NO_SIGNED_GET \
  ((bfd_signed_vma (*) PARAMS ((const bfd_byte *))) swap_abort )
d273 6
a278 6
    NO_GET, NO_SIGNED_GET, NO_PUT,	/* 64 bit data */
    NO_GET, NO_SIGNED_GET, NO_PUT,	/* 32 bit data */
    NO_GET, NO_SIGNED_GET, NO_PUT,	/* 16 bit data */
    NO_GET, NO_SIGNED_GET, NO_PUT,	/* 64 bit hdrs */
    NO_GET, NO_SIGNED_GET, NO_PUT,	/* 32 bit hdrs */
    NO_GET, NO_SIGNED_GET, NO_PUT,	/* 16 bit hdrs */
d281 4
a284 4
     _bfd_dummy_target,		/* unknown format */
     _bfd_dummy_target,		/* object file */
     _bfd_dummy_target,		/* archive */
     netbsd_core_file_p		/* a core file */
d287 2
a288 2
     bfd_false, bfd_false,
     bfd_false, bfd_false
d291 2
a292 2
     bfd_false, bfd_false,
     bfd_false, bfd_false
d295 9
a303 9
       BFD_JUMP_TABLE_GENERIC (_bfd_generic),
       BFD_JUMP_TABLE_COPY (_bfd_generic),
       BFD_JUMP_TABLE_CORE (netbsd),
       BFD_JUMP_TABLE_ARCHIVE (_bfd_noarchive),
       BFD_JUMP_TABLE_SYMBOLS (_bfd_nosymbols),
       BFD_JUMP_TABLE_RELOCS (_bfd_norelocs),
       BFD_JUMP_TABLE_WRITE (_bfd_generic),
       BFD_JUMP_TABLE_LINK (_bfd_nolink),
       BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),
d308 1
a308 1
};
@


1.7
log
@Recognize m88k core files.
ok miod@@
@
text
@d189 4
@


1.6
log
@Properly recognize core dump architecture.  Add StackGhost support.
ok drahn@@
@
text
@d185 4
@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d33 7
a39 3
/*
 * FIXME: On NetBSD/sparc CORE_FPU_OFFSET should be (sizeof (struct trapframe))
 */
d68 1
a68 1
  asection *asect, *asect2;
d147 19
d167 1
d169 33
a201 17
#ifdef CORE_FPU_OFFSET
      switch (CORE_GETFLAG (coreseg))
	{
	case CORE_CPU:
	  /* Hackish...  */
	  asect->_raw_size = CORE_FPU_OFFSET;
	  asect2 = bfd_make_section_anyway (abfd, ".reg2");
	  if (asect2 == NULL)
	    goto punt;
	  asect2->_raw_size = coreseg.c_size - CORE_FPU_OFFSET;
	  asect2->vma = 0;
	  asect2->filepos = asect->filepos + CORE_FPU_OFFSET;
	  asect2->alignment_power = 2;
	  asect2->flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	}
#endif
@


1.4
log
@resolve conflicts.
@
text
@d2 2
a3 1
   Copyright 1988, 1989, 1991, 1992, 1993, 1996, 1998, 1999, 2000
d43 10
a52 6
static const bfd_target *	netbsd_core_file_p PARAMS ((bfd *abfd));
static char *		netbsd_core_file_failing_command PARAMS ((bfd *abfd));
static int 		netbsd_core_file_failing_signal PARAMS ((bfd *abfd));
static boolean		netbsd_core_file_matches_executable_p
			 PARAMS ((bfd *core_bfd, bfd *exec_bfd));
static void		swap_abort PARAMS ((void));
d62 48
a109 10
	int		i, val, offset;
	asection	*asect, *asect2;
	struct core	core;
	struct coreseg	coreseg;

	val = bfd_read ((void *)&core, 1, sizeof core, abfd);
	if (val != sizeof core) {
		/* Too small to be a core file */
		bfd_set_error(bfd_error_wrong_format);
		return 0;
d112 1
a112 4
	if (CORE_GETMAGIC(core) != COREMAGIC) {
		bfd_set_error(bfd_error_wrong_format);
		return 0;
	}
d114 18
a131 5
	rawptr = (struct netbsd_core_struct *)
		bfd_zalloc (abfd, sizeof (struct netbsd_core_struct));
	if (rawptr == NULL) {
		bfd_set_error(bfd_error_no_memory);
		return 0;
d133 9
d143 1
a143 8
	rawptr->core = core;
	abfd->tdata.netbsd_core_data = rawptr;

	offset = core.c_hdrsize;
	for (i = 0; i < core.c_nseg; i++) {

		if (bfd_seek (abfd, offset, SEEK_SET) != 0)
			goto punt;
a144 31
		val = bfd_read ((void *)&coreseg, 1, sizeof coreseg, abfd);
		if (val != sizeof coreseg) {
			bfd_set_error(bfd_error_file_truncated);
			goto punt;
		}
		if (CORE_GETMAGIC(coreseg) != CORESEGMAGIC) {
			bfd_set_error(bfd_error_wrong_format);
			goto punt;
		}

		offset += core.c_seghdrsize;

		asect = (asection *) bfd_zalloc (abfd, sizeof (asection));
		if (asect == NULL) {
			bfd_set_error(bfd_error_no_memory);
			goto punt;
		}

		asect->_raw_size = coreseg.c_size;
		asect->vma = coreseg.c_addr;
		asect->filepos = offset;
		asect->alignment_power = 2;
		asect->next = abfd->sections;
		abfd->sections = asect;
		abfd->section_count++;
		offset += coreseg.c_size;

		switch (CORE_GETFLAG(coreseg)) {
		case CORE_CPU:
			asect->name = ".reg";
			asect->flags = SEC_ALLOC + SEC_HAS_CONTENTS;
d146 15
a160 17
			/* Hackish...  */
			asect->_raw_size = CORE_FPU_OFFSET;
			asect2 = (asection *)bfd_zalloc (abfd,
							 sizeof (asection));
			if (asect2 == NULL) {
				bfd_set_error(bfd_error_no_memory);
				goto punt;
			}
			asect2->_raw_size = coreseg.c_size - CORE_FPU_OFFSET;
			asect2->vma = 0;
			asect2->filepos = asect->filepos + CORE_FPU_OFFSET;
			asect2->alignment_power = 2;
			asect2->next = abfd->sections;
			asect2->name = ".reg2";
			asect2->flags = SEC_ALLOC + SEC_HAS_CONTENTS;
			abfd->sections = asect2;
			abfd->section_count++;
d162 1
d164 2
a165 14
			break;
		case CORE_DATA:
			asect->name = ".data";
			asect->flags = SEC_ALLOC+SEC_LOAD+SEC_HAS_CONTENTS;
			break;
		case CORE_STACK:
			asect->name = ".stack";
			asect->flags = SEC_ALLOC+SEC_LOAD+SEC_HAS_CONTENTS;
			break;
		}
	}

	/* OK, we believe you.  You're a core file (sure, sure).  */
	return abfd->xvec;
d167 5
a171 12
punt:	{
		asection	*anext;
		for (asect = abfd->sections; asect; asect = anext) {
			anext = asect->next;
			free((void *)asect);
		}
	}
	free ((void *)rawptr);
	abfd->tdata.netbsd_core_data = NULL;
	abfd->sections = NULL;
	abfd->section_count = 0;
	return 0;
d192 1
a192 1
static boolean
d194 2
a195 1
     bfd *core_bfd, *exec_bfd;
d197 1
a197 1
  return true;		/* FIXME, We have no way of telling at this point */
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright 1988, 89, 91, 92, 93, 96, 1998 Free Software Foundation, Inc.
d20 1
a20 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
d33 1
a33 1
 * FIXME: On NetBSD/sparc CORE_FPU_OFFSET should be (sizeof(struct trapframe))
d102 1
a102 1
		asect = (asection *) bfd_zalloc (abfd, sizeof(asection));
d122 1
a122 1
			/* Hackish... */
d197 1
a197 1
swap_abort()
d199 1
a199 1
  abort(); /* This way doesn't require any declaration for ANSI to fuck up */
d240 1
a240 1
    
d252 1
a252 1
    
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 1
a2 1
   Copyright 1988, 1989, 1991, 1992, 1993, 1996 Free Software Foundation, Inc.
a25 2
#include <stdio.h>
#include <sys/types.h>
a29 1
#include <errno.h>
d41 4
a44 4
static const bfd_target *	netbsd_core_core_file_p PARAMS ((bfd *abfd));
static char *		netbsd_core_core_file_failing_command PARAMS ((bfd *abfd));
static int 		netbsd_core_core_file_failing_signal PARAMS ((bfd *abfd));
static boolean		netbsd_core_core_file_matches_executable_p
d52 1
a52 1
netbsd_core_core_file_p (abfd)
d104 1
d170 1
a170 1
netbsd_core_core_file_failing_command (abfd)
d179 1
a179 1
netbsd_core_core_file_failing_signal (abfd)
d188 1
a188 1
netbsd_core_core_file_matches_executable_p  (core_bfd, exec_bfd)
d191 1
a191 1
	return true;	/* FIXME, We have no way of telling at this point */
a193 57
/* No archive file support via this BFD */
#define	netbsd_openr_next_archived_file	bfd_generic_openr_next_archived_file
#define	netbsd_generic_stat_arch_elt		bfd_generic_stat_arch_elt
#define	netbsd_slurp_armap			bfd_false
#define	netbsd_slurp_extended_name_table	bfd_true
#define	netbsd_write_armap			(boolean (*) PARAMS	\
    ((bfd *arch, unsigned int elength, struct orl *map, \
      unsigned int orl_count, int stridx))) bfd_false
#define	netbsd_truncate_arname		bfd_dont_truncate_arname
#define	aout_32_openr_next_archived_file	bfd_generic_openr_next_archived_file

#define	netbsd_close_and_cleanup		bfd_generic_close_and_cleanup
#define	netbsd_set_section_contents		(boolean (*) PARAMS	\
        ((bfd *abfd, asection *section, PTR data, file_ptr offset,	\
        bfd_size_type count))) bfd_false
#define	netbsd_get_section_contents		bfd_generic_get_section_contents
#define	netbsd_new_section_hook		(boolean (*) PARAMS	\
	((bfd *, sec_ptr))) bfd_true
#define	netbsd_get_symtab_upper_bound	bfd_0u
#define	netbsd_get_symtab			(unsigned int (*) PARAMS \
        ((bfd *, struct symbol_cache_entry **))) bfd_0u
#define	netbsd_get_reloc_upper_bound		(unsigned int (*) PARAMS \
	((bfd *, sec_ptr))) bfd_0u
#define	netbsd_canonicalize_reloc		(unsigned int (*) PARAMS \
	((bfd *, sec_ptr, arelent **, struct symbol_cache_entry**))) bfd_0u
#define	netbsd_make_empty_symbol		(struct symbol_cache_entry * \
	(*) PARAMS ((bfd *))) bfd_false
#define	netbsd_print_symbol			(void (*) PARAMS	\
	((bfd *, PTR, struct symbol_cache_entry  *,			\
	bfd_print_symbol_type))) bfd_false
#define	netbsd_get_symbol_info		(void (*) PARAMS	\
	((bfd *, struct symbol_cache_entry  *,			\
	symbol_info *))) bfd_false
#define	netbsd_get_lineno			(alent * (*) PARAMS	\
	((bfd *, struct symbol_cache_entry *))) bfd_nullvoidptr
#define	netbsd_set_arch_mach			(boolean (*) PARAMS	\
	((bfd *, enum bfd_architecture, unsigned long))) bfd_false
#define	netbsd_find_nearest_line		(boolean (*) PARAMS	\
        ((bfd *abfd, struct sec  *section,				\
         struct symbol_cache_entry  **symbols,bfd_vma offset,		\
         CONST char **file, CONST char **func, unsigned int *line))) bfd_false
#define	netbsd_sizeof_headers		(int (*) PARAMS	\
	((bfd *, boolean))) bfd_0

#define netbsd_bfd_debug_info_start		bfd_void
#define netbsd_bfd_debug_info_end		bfd_void
#define netbsd_bfd_debug_info_accumulate	(void (*) PARAMS	\
	((bfd *, struct sec *))) bfd_void
#define netbsd_bfd_get_relocated_section_contents bfd_generic_get_relocated_section_contents
#define netbsd_bfd_relax_section		bfd_generic_relax_section
#define netbsd_bfd_seclet_link \
  ((boolean (*) PARAMS ((bfd *, PTR, boolean))) bfd_false)
#define netbsd_bfd_reloc_type_lookup \
  ((CONST struct reloc_howto_struct *(*) PARAMS ((bfd *, bfd_reloc_code_real_type))) bfd_nullvoidptr)
#define netbsd_bfd_make_debug_symbol \
  ((asymbol *(*) PARAMS ((bfd *, void *, unsigned long))) bfd_nullvoidptr)

d203 1
a203 1
	((bfd_signed_vma (*) PARAMS ((    const bfd_byte *))) swap_abort )
d209 2
a210 2
    true,			/* target byte order */
    true,			/* target headers byte order */
d213 1
a213 1
     HAS_SYMS | HAS_LOCALS | DYNAMIC | WP_TEXT | D_PAGED),
d229 1
a229 1
     netbsd_core_core_file_p		/* a core file */
d242 1
a242 1
       BFD_JUMP_TABLE_CORE (netbsd_core),
d250 2
@


1.1
log
@Initial revision
@
text
@d49 1
@


1.1.1.1
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@@


1.1.1.2
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a48 1
static void		swap_abort PARAMS ((void));
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1988, 89, 91, 92, 93, 96, 1998 Free Software Foundation, Inc.
d26 2
d32 1
d44 4
a47 4
static const bfd_target *	netbsd_core_file_p PARAMS ((bfd *abfd));
static char *		netbsd_core_file_failing_command PARAMS ((bfd *abfd));
static int 		netbsd_core_file_failing_signal PARAMS ((bfd *abfd));
static boolean		netbsd_core_file_matches_executable_p
d55 1
a55 1
netbsd_core_file_p (abfd)
a106 1
			goto punt;
d172 1
a172 1
netbsd_core_file_failing_command (abfd)
d181 1
a181 1
netbsd_core_file_failing_signal (abfd)
d190 1
a190 1
netbsd_core_file_matches_executable_p  (core_bfd, exec_bfd)
d193 1
a193 1
  return true;		/* FIXME, We have no way of telling at this point */
d196 57
d262 1
a262 1
  ((bfd_signed_vma (*) PARAMS ((const bfd_byte *))) swap_abort )
d268 2
a269 2
    BFD_ENDIAN_UNKNOWN,		/* target byte order */
    BFD_ENDIAN_UNKNOWN,		/* target headers byte order */
d272 1
a272 1
     HAS_SYMS | HAS_LOCALS | WP_TEXT | D_PAGED),
d288 1
a288 1
     netbsd_core_file_p		/* a core file */
d301 1
a301 1
       BFD_JUMP_TABLE_CORE (netbsd),
a308 2
    NULL,
    
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1988, 1989, 1991, 1992, 1993, 1996, 1998, 1999, 2000
   Free Software Foundation, Inc.
d19 1
a19 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d32 1
a32 1
 * FIXME: On NetBSD/sparc CORE_FPU_OFFSET should be (sizeof (struct trapframe))
d101 1
a101 1
		asect = (asection *) bfd_zalloc (abfd, sizeof (asection));
d121 1
a121 1
			/* Hackish...  */
d196 1
a196 1
swap_abort ()
d198 1
a198 1
  abort (); /* This way doesn't require any declaration for ANSI to fuck up */
d239 1
a239 1

d251 1
a251 1

@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 2
   Copyright 1988, 1989, 1991, 1992, 1993, 1996, 1998, 1999, 2000, 2001,
   2002
d42 6
a47 10
static const bfd_target *netbsd_core_file_p
  PARAMS ((bfd *abfd));
static char *netbsd_core_file_failing_command
  PARAMS ((bfd *abfd));
static int netbsd_core_file_failing_signal
  PARAMS ((bfd *abfd));
static bfd_boolean netbsd_core_file_matches_executable_p
  PARAMS ((bfd *core_bfd, bfd *exec_bfd));
static void swap_abort
  PARAMS ((void));
d57 10
a66 43
  int i, val;
  file_ptr offset;
  asection *asect, *asect2;
  struct core core;
  struct coreseg coreseg;
  bfd_size_type amt = sizeof core;

  val = bfd_bread ((void *) &core, amt, abfd);
  if (val != sizeof core)
    {
      /* Too small to be a core file */
      bfd_set_error (bfd_error_wrong_format);
      return 0;
    }

  if (CORE_GETMAGIC (core) != COREMAGIC)
    {
      bfd_set_error (bfd_error_wrong_format);
      return 0;
    }

  amt = sizeof (struct netbsd_core_struct);
  rawptr = (struct netbsd_core_struct *) bfd_zalloc (abfd, amt);
  if (rawptr == NULL)
    return 0;

  rawptr->core = core;
  abfd->tdata.netbsd_core_data = rawptr;

  offset = core.c_hdrsize;
  for (i = 0; i < core.c_nseg; i++)
    {
      const char *sname;
      flagword flags;

      if (bfd_seek (abfd, offset, SEEK_SET) != 0)
	goto punt;

      val = bfd_bread ((void *) &coreseg, (bfd_size_type) sizeof coreseg, abfd);
      if (val != sizeof coreseg)
	{
	  bfd_set_error (bfd_error_file_truncated);
	  goto punt;
d68 11
a78 4
      if (CORE_GETMAGIC (coreseg) != CORESEGMAGIC)
	{
	  bfd_set_error (bfd_error_wrong_format);
	  goto punt;
d81 2
a82 1
      offset += core.c_seghdrsize;
d84 2
a85 28
      switch (CORE_GETFLAG (coreseg))
	{
	case CORE_CPU:
	  sname = ".reg";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	case CORE_DATA:
	  sname = ".data";
	  flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
	  break;
	case CORE_STACK:
	  sname = ".stack";
	  flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
	  break;
	default:
	  sname = ".unknown";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	}
      asect = bfd_make_section_anyway (abfd, sname);
      if (asect == NULL)
	goto punt;

      asect->flags = flags;
      asect->_raw_size = coreseg.c_size;
      asect->vma = coreseg.c_addr;
      asect->filepos = offset;
      asect->alignment_power = 2;
d87 2
a88 1
      offset += coreseg.c_size;
d90 31
d122 29
a150 14
      switch (CORE_GETFLAG (coreseg))
	{
	case CORE_CPU:
	  /* Hackish...  */
	  asect->_raw_size = CORE_FPU_OFFSET;
	  asect2 = bfd_make_section_anyway (abfd, ".reg2");
	  if (asect2 == NULL)
	    goto punt;
	  asect2->_raw_size = coreseg.c_size - CORE_FPU_OFFSET;
	  asect2->vma = 0;
	  asect2->filepos = asect->filepos + CORE_FPU_OFFSET;
	  asect2->alignment_power = 2;
	  asect2->flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
a151 2
#endif
    }
d153 2
a154 2
  /* OK, we believe you.  You're a core file (sure, sure).  */
  return abfd->xvec;
d156 12
a167 5
 punt:
  bfd_release (abfd, abfd->tdata.any);
  abfd->tdata.any = NULL;
  bfd_section_list_clear (abfd);
  return 0;
d188 1
a188 1
static bfd_boolean
d190 1
a190 2
     bfd *core_bfd ATTRIBUTE_UNUSED;
     bfd *exec_bfd ATTRIBUTE_UNUSED;
d192 1
a192 1
  return TRUE;		/* FIXME, We have no way of telling at this point */
@


1.1.1.6
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d3 1
a3 1
   2002, 2003, 2004
a36 4
/* Offset of StackGhost cookie within `struct md_coredump' on
   OpenBSD/sparc.  */
#define CORE_WCOOKIE_OFFSET	344

d56 1
a142 19
      if (CORE_GETMID (core) == M_SPARC_NETBSD
	  && CORE_GETFLAG (coreseg) == CORE_CPU
	  && coreseg.c_size > CORE_WCOOKIE_OFFSET)
	{
	  /* Truncate the .reg section.  */
	  asect->_raw_size = CORE_WCOOKIE_OFFSET;

	  /* And create the .wcookie section.  */
	  asect = bfd_make_section_anyway (abfd, ".wcookie");
	  if (asect == NULL)
	    goto punt;

	  asect->flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  asect->_raw_size = 4;
	  asect->vma = 0;
	  asect->filepos = offset + CORE_WCOOKIE_OFFSET;
	  asect->alignment_power = 2;
	}

d182 1
d191 1
d206 4
a209 7

#define	NO_GET ((bfd_vma (*) (const void *)) swap_abort)
#define	NO_PUT ((void (*) (bfd_vma, void *)) swap_abort)
#define	NO_GETS ((bfd_signed_vma (*) (const void *)) swap_abort)
#define	NO_GET64 ((bfd_uint64_t (*) (const void *)) swap_abort)
#define	NO_PUT64 ((void (*) (bfd_uint64_t, void *)) swap_abort)
#define	NO_GETS64 ((bfd_int64_t (*) (const void *)) swap_abort)
d224 6
a229 6
    NO_GET64, NO_GETS64, NO_PUT64,	/* 64 bit data.  */
    NO_GET, NO_GETS, NO_PUT,		/* 32 bit data.  */
    NO_GET, NO_GETS, NO_PUT,		/* 16 bit data.  */
    NO_GET64, NO_GETS64, NO_PUT64,	/* 64 bit hdrs.  */
    NO_GET, NO_GETS, NO_PUT,		/* 32 bit hdrs.  */
    NO_GET, NO_GETS, NO_PUT,		/* 16 bit hdrs.  */
d232 4
a235 4
      _bfd_dummy_target,		/* unknown format */
      _bfd_dummy_target,		/* object file */
      _bfd_dummy_target,		/* archive */
      netbsd_core_file_p		/* a core file */
d238 2
a239 2
      bfd_false, bfd_false,
      bfd_false, bfd_false
d242 2
a243 2
      bfd_false, bfd_false,
      bfd_false, bfd_false
d246 9
a254 9
    BFD_JUMP_TABLE_GENERIC (_bfd_generic),
    BFD_JUMP_TABLE_COPY (_bfd_generic),
    BFD_JUMP_TABLE_CORE (netbsd),
    BFD_JUMP_TABLE_ARCHIVE (_bfd_noarchive),
    BFD_JUMP_TABLE_SYMBOLS (_bfd_nosymbols),
    BFD_JUMP_TABLE_RELOCS (_bfd_norelocs),
    BFD_JUMP_TABLE_WRITE (_bfd_generic),
    BFD_JUMP_TABLE_LINK (_bfd_nolink),
    BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),
d259 1
a259 1
  };
@


