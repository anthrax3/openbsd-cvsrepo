head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.4.0.54
	OPENBSD_6_2_BASE:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.52
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.48
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.44
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.46
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.38
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.42
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.40
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.36
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.34
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.32
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.30
	OPENBSD_5_0:1.1.1.4.0.28
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.26
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.24
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.20
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.22
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.18
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.16
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.14
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.12
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.10
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.8
	OPENBSD_4_0_BASE:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.6
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.4
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.2
	OPENBSD_3_7_BASE:1.1.1.4
	BINUTILS_2_15:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	BINUTILS-2_14:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.8
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.6
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.4
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.2
	OPENBSD_3_2_BASE:1.1.1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.1.1.0.8
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.6
	OPENBSD_3_0_BASE:1.1.1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	BINUTILS-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.09.12.14.45.35;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.09.12.14.45.35;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.13.13.22.29;	author fgsch;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.17.20.42.13;	author drahn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.02.20.22.19;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* DWARF 2 support.
   Copyright 1994, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.

   Adapted from gdb/dwarf2read.c by Gavin Koch of Cygnus Solutions
   (gavin@@cygnus.com).

   From the dwarf2read.c header:
   Adapted by Gary Funck (gary@@intrepid.com), Intrepid Technology,
   Inc.  with support from Florida State University (under contract
   with the Ada Joint Program Office), and Silicon Graphics, Inc.
   Initial contribution by Brent Benson, Harris Computer Systems, Inc.,
   based on Fred Fish's (Cygnus Support) implementation of DWARF 1
   support in dwarfread.c

This file is part of BFD.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "libiberty.h"
#include "libbfd.h"
#include "elf-bfd.h"
#include "elf/dwarf2.h"

/* The data in the .debug_line statement prologue looks like this.  */
struct line_head
  {
    unsigned int total_length;
    unsigned short version;
    unsigned int prologue_length;
    unsigned char minimum_instruction_length;
    unsigned char default_is_stmt;
    int line_base;
    unsigned char line_range;
    unsigned char opcode_base;
    unsigned char *standard_opcode_lengths;
  };

/* Attributes have a name and a value */
struct attribute
  {
    enum dwarf_attribute name;
    enum dwarf_form form;
    union
      {
	char *str;
	struct dwarf_block *blk;
	unsigned int unsnd;
	int snd;
	bfd_vma addr;
      }
    u;
  };

/* Get at parts of an attribute structure */

#define DW_STRING(attr)    ((attr)->u.str)
#define DW_UNSND(attr)     ((attr)->u.unsnd)
#define DW_BLOCK(attr)     ((attr)->u.blk)
#define DW_SND(attr)       ((attr)->u.snd)
#define DW_ADDR(attr)	   ((attr)->u.addr)

/* Blocks are a bunch of untyped bytes. */
struct dwarf_block
  {
    unsigned int size;
    char *data;
  };


struct dwarf2_debug {

  /* A list of all previously read comp_units. */
  struct comp_unit* all_comp_units;

  /* The next unread compilation unit within the .debug_info section.
     Zero indicates that the .debug_info section has not been loaded
     into a buffer yet.*/
  char* info_ptr;

  /* Pointer to the end of the .debug_info section memory buffer. */
  char* info_ptr_end;

  /* Pointer to the .debug_abbrev section loaded into memory. */
  char* dwarf_abbrev_buffer;

  /* Length of the loaded .debug_abbrev section. */
  unsigned long dwarf_abbrev_size;

  /* Buffer for decode_line_info.  */
  char *dwarf_line_buffer;
};

struct arange {
  struct arange *next;
  bfd_vma low;
  bfd_vma high;
};


/* A minimal decoding of DWARF2 compilation units.  We only decode
   what's needed to get to the line number information. */

struct comp_unit {

  /* Chain the previously read compilation units. */
  struct comp_unit* next_unit;

  /* Keep the bdf convenient (for memory allocation). */
  bfd* abfd;

  /* The lowest and higest addresses contained in this compilation
     unit as specified in the compilation unit header. */
  struct arange arange;

  /* The DW_AT_name attribute (for error messages). */
  char* name;

  /* The abbrev hash table. */
  struct abbrev_info** abbrevs;

  /* Note that an error was found by comp_unit_find_nearest_line. */
  int error;

  /* The DW_AT_comp_dir attribute */
  char* comp_dir;

  /* True if there is a line number table associated with this comp. unit. */
  int stmtlist;
  
  /* The offset into .debug_line of the line number table. */
  unsigned long line_offset;

  /* Pointer to the first child die for the comp unit. */
  char *first_child_die_ptr;

  /* The end of the comp unit. */
  char *end_ptr;

  /* The decoded line number, NULL if not yet decoded. */
  struct line_info_table* line_table;

  /* A list of the functions found in this comp. unit. */
  struct funcinfo* function_table; 

  /* Address size for this unit - from unit header */
  unsigned char addr_size;
};



/* VERBATIM 
   The following function up to the END VERBATIM mark are 
   copied directly from dwarf2read.c. */

/* read dwarf information from a buffer */

static unsigned int
read_1_byte (abfd, buf)
     bfd *abfd ATTRIBUTE_UNUSED;
     char *buf;
{
  return bfd_get_8 (abfd, (bfd_byte *) buf);
}

static int
read_1_signed_byte (abfd, buf)
     bfd *abfd ATTRIBUTE_UNUSED;
     char *buf;
{
  return bfd_get_signed_8 (abfd, (bfd_byte *) buf);
}

static unsigned int
read_2_bytes (abfd, buf)
     bfd *abfd;
     char *buf;
{
  return bfd_get_16 (abfd, (bfd_byte *) buf);
}

#if 0

/* This is not used.  */

static int
read_2_signed_bytes (abfd, buf)
     bfd *abfd;
     char *buf;
{
  return bfd_get_signed_16 (abfd, (bfd_byte *) buf);
}

#endif

static unsigned int
read_4_bytes (abfd, buf)
     bfd *abfd;
     char *buf;
{
  return bfd_get_32 (abfd, (bfd_byte *) buf);
}

#if 0

/* This is not used.  */

static int
read_4_signed_bytes (abfd, buf)
     bfd *abfd;
     char *buf;
{
  return bfd_get_signed_32 (abfd, (bfd_byte *) buf);
}

#endif

static unsigned int
read_8_bytes (abfd, buf)
     bfd *abfd;
     char *buf;
{
  return bfd_get_64 (abfd, (bfd_byte *) buf);
}

static char *
read_n_bytes (abfd, buf, size)
     bfd *abfd ATTRIBUTE_UNUSED;
     char *buf;
     unsigned int size ATTRIBUTE_UNUSED;
{
  /* If the size of a host char is 8 bits, we can return a pointer
     to the buffer, otherwise we have to copy the data to a buffer
     allocated on the temporary obstack.  */
  return buf;
}

static char *
read_string (abfd, buf, bytes_read_ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     char *buf;
     unsigned int *bytes_read_ptr;
{
  /* If the size of a host char is 8 bits, we can return a pointer
     to the string, otherwise we have to copy the string to a buffer
     allocated on the temporary obstack.  */
  if (*buf == '\0')
    {
      *bytes_read_ptr = 1;
      return NULL;
    }
  *bytes_read_ptr = strlen (buf) + 1;
  return buf;
}

static unsigned int
read_unsigned_leb128 (abfd, buf, bytes_read_ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     char *buf;
     unsigned int *bytes_read_ptr;
{
  unsigned int  result;
  unsigned int  num_read;
  int           shift;
  unsigned char byte;

  result   = 0;
  shift    = 0;
  num_read = 0;
  
  do
    {
      byte = bfd_get_8 (abfd, (bfd_byte *) buf);
      buf ++;
      num_read ++;
      result |= ((byte & 0x7f) << shift);
      shift += 7;
    }
  while (byte & 0x80);
  
  * bytes_read_ptr = num_read;
  
  return result;
}

static int
read_signed_leb128 (abfd, buf, bytes_read_ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     char *buf;
     unsigned int * bytes_read_ptr;
{
  int           result;
  int           shift;
  int           num_read;
  unsigned char byte;

  result = 0;
  shift = 0;
  num_read = 0;

  do
    {
      byte = bfd_get_8 (abfd, (bfd_byte *) buf);
      buf ++;
      num_read ++;
      result |= ((byte & 0x7f) << shift);
      shift += 7;
    }
  while (byte & 0x80);
  
  if ((shift < 32) && (byte & 0x40))
    result |= -(1 << shift);

  * bytes_read_ptr = num_read;
  
  return result;
}

/* END VERBATIM */

static bfd_vma
read_address (unit, buf)
     struct comp_unit* unit;
     char *buf;
{
  switch (unit->addr_size)
    {
    case 8:
      return bfd_get_64 (unit->abfd, (bfd_byte *) buf);
    case 4:
      return bfd_get_32 (unit->abfd, (bfd_byte *) buf);
    case 2:
      return bfd_get_16 (unit->abfd, (bfd_byte *) buf);
    default:
      abort ();
    }
}





/* This data structure holds the information of an abbrev. */
struct abbrev_info
  {
    unsigned int number;	/* number identifying abbrev */
    enum dwarf_tag tag;		/* dwarf tag */
    int has_children;		/* boolean */
    unsigned int num_attrs;	/* number of attributes */
    struct attr_abbrev *attrs;	/* an array of attribute descriptions */
    struct abbrev_info *next;	/* next in chain */
  };

struct attr_abbrev
  {
    enum dwarf_attribute name;
    enum dwarf_form form;
  };

#ifndef ABBREV_HASH_SIZE
#define ABBREV_HASH_SIZE 121
#endif
#ifndef ATTR_ALLOC_CHUNK
#define ATTR_ALLOC_CHUNK 4
#endif

/* Lookup an abbrev_info structure in the abbrev hash table.  */

static struct abbrev_info *
lookup_abbrev (number,abbrevs)
     unsigned int number;
     struct abbrev_info **abbrevs;
{
  unsigned int hash_number;
  struct abbrev_info *abbrev;

  hash_number = number % ABBREV_HASH_SIZE;
  abbrev = abbrevs[hash_number];

  while (abbrev)
    {
      if (abbrev->number == number)
	return abbrev;
      else
	abbrev = abbrev->next;
    }
  return NULL;
}

/* In DWARF version 2, the description of the debugging information is
   stored in a separate .debug_abbrev section.  Before we read any
   dies from a section we read in all abbreviations and install them
   in a hash table.  */

static struct abbrev_info**
read_abbrevs (abfd, offset)
     bfd * abfd;
     unsigned int offset;
{
  struct abbrev_info **abbrevs;
  char *abbrev_ptr;
  struct abbrev_info *cur_abbrev;
  unsigned int abbrev_number, bytes_read, abbrev_name;
  unsigned int abbrev_form, hash_number;
  struct dwarf2_debug *stash;

  stash = elf_tdata(abfd)->dwarf2_find_line_info;

  if (! stash->dwarf_abbrev_buffer)
    {
      asection *msec;

      msec = bfd_get_section_by_name (abfd, ".debug_abbrev");
      if (! msec)
	{
	  (*_bfd_error_handler) (_("Dwarf Error: Can't find .debug_abbrev section."));
	  bfd_set_error (bfd_error_bad_value);
	  return 0;
	}
      
      stash->dwarf_abbrev_size = msec->_raw_size;
      stash->dwarf_abbrev_buffer = (char*) bfd_alloc (abfd, stash->dwarf_abbrev_size);
      if (! stash->dwarf_abbrev_buffer)
	  return 0;
      
      if (! bfd_get_section_contents (abfd, msec, 
				      stash->dwarf_abbrev_buffer, 0,
				      stash->dwarf_abbrev_size))
	return 0;
    }

  if (offset > stash->dwarf_abbrev_size)
    {
      (*_bfd_error_handler) (_("Dwarf Error: Abbrev offset (%u) bigger than abbrev size (%u)."), 
			     offset, stash->dwarf_abbrev_size );
      bfd_set_error (bfd_error_bad_value);
      return 0;
    }

  abbrevs = (struct abbrev_info**) bfd_zalloc (abfd, sizeof(struct abbrev_info*) * ABBREV_HASH_SIZE);

  abbrev_ptr = stash->dwarf_abbrev_buffer + offset;
  abbrev_number = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);
  abbrev_ptr += bytes_read;

  /* loop until we reach an abbrev number of 0 */
  while (abbrev_number)
    {
      cur_abbrev = (struct abbrev_info*)bfd_zalloc (abfd, sizeof (struct abbrev_info));

      /* read in abbrev header */
      cur_abbrev->number = abbrev_number;
      cur_abbrev->tag = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);
      abbrev_ptr += bytes_read;
      cur_abbrev->has_children = read_1_byte (abfd, abbrev_ptr);
      abbrev_ptr += 1;

      /* now read in declarations */
      abbrev_name = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);
      abbrev_ptr += bytes_read;
      abbrev_form = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);
      abbrev_ptr += bytes_read;
      while (abbrev_name)
	{
	  if ((cur_abbrev->num_attrs % ATTR_ALLOC_CHUNK) == 0)
	    {
	      cur_abbrev->attrs = (struct attr_abbrev *)
		bfd_realloc (cur_abbrev->attrs,
			     (cur_abbrev->num_attrs + ATTR_ALLOC_CHUNK)
			     * sizeof (struct attr_abbrev));
	      if (! cur_abbrev->attrs)
		return 0;
	    }
	  cur_abbrev->attrs[cur_abbrev->num_attrs].name = abbrev_name;
	  cur_abbrev->attrs[cur_abbrev->num_attrs++].form = abbrev_form;
	  abbrev_name = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);
	  abbrev_ptr += bytes_read;
	  abbrev_form = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);
	  abbrev_ptr += bytes_read;
	}

      hash_number = abbrev_number % ABBREV_HASH_SIZE;
      cur_abbrev->next = abbrevs[hash_number];
      abbrevs[hash_number] = cur_abbrev;

      /* Get next abbreviation.
         Under Irix6 the abbreviations for a compilation unit are not
	 always properly terminated with an abbrev number of 0.
	 Exit loop if we encounter an abbreviation which we have
	 already read (which means we are about to read the abbreviations
	 for the next compile unit) or if the end of the abbreviation
	 table is reached.  */
      if ((unsigned int) (abbrev_ptr - stash->dwarf_abbrev_buffer)
	    >= stash->dwarf_abbrev_size)
	break;
      abbrev_number = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);
      abbrev_ptr += bytes_read;
      if (lookup_abbrev (abbrev_number,abbrevs) != NULL)
	break;
    }

  return abbrevs;
}

/* Read an attribute described by an abbreviated attribute.  */

static char *
read_attribute (attr, abbrev, unit, info_ptr)
     struct attribute   *attr;
     struct attr_abbrev *abbrev;
     struct comp_unit   *unit;
     char               *info_ptr;
{
  bfd *abfd = unit->abfd;
  unsigned int bytes_read;
  struct dwarf_block *blk;

  attr->name = abbrev->name;
  attr->form = abbrev->form;
  switch (abbrev->form)
    {
    case DW_FORM_addr:
    case DW_FORM_ref_addr:
      DW_ADDR (attr) = read_address (unit, info_ptr);
      info_ptr += unit->addr_size;
      break;
    case DW_FORM_block2:
      blk = (struct dwarf_block *) bfd_alloc (abfd, sizeof (struct dwarf_block));
      blk->size = read_2_bytes (abfd, info_ptr);
      info_ptr += 2;
      blk->data = read_n_bytes (abfd, info_ptr, blk->size);
      info_ptr += blk->size;
      DW_BLOCK (attr) = blk;
      break;
    case DW_FORM_block4:
      blk = (struct dwarf_block *) bfd_alloc (abfd, sizeof (struct dwarf_block));
      blk->size = read_4_bytes (abfd, info_ptr);
      info_ptr += 4;
      blk->data = read_n_bytes (abfd, info_ptr, blk->size);
      info_ptr += blk->size;
      DW_BLOCK (attr) = blk;
      break;
    case DW_FORM_data2:
      DW_UNSND (attr) = read_2_bytes (abfd, info_ptr);
      info_ptr += 2;
      break;
    case DW_FORM_data4:
      DW_UNSND (attr) = read_4_bytes (abfd, info_ptr);
      info_ptr += 4;
      break;
    case DW_FORM_data8:
      DW_UNSND (attr) = read_8_bytes (abfd, info_ptr);
      info_ptr += 8;
      break;
    case DW_FORM_string:
      DW_STRING (attr) = read_string (abfd, info_ptr, &bytes_read);
      info_ptr += bytes_read;
      break;
    case DW_FORM_block:
      blk = (struct dwarf_block *) bfd_alloc (abfd, sizeof (struct dwarf_block));
      blk->size = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);
      info_ptr += bytes_read;
      blk->data = read_n_bytes (abfd, info_ptr, blk->size);
      info_ptr += blk->size;
      DW_BLOCK (attr) = blk;
      break;
    case DW_FORM_block1:
      blk = (struct dwarf_block *) bfd_alloc (abfd, sizeof (struct dwarf_block));
      blk->size = read_1_byte (abfd, info_ptr);
      info_ptr += 1;
      blk->data = read_n_bytes (abfd, info_ptr, blk->size);
      info_ptr += blk->size;
      DW_BLOCK (attr) = blk;
      break;
    case DW_FORM_data1:
      DW_UNSND (attr) = read_1_byte (abfd, info_ptr);
      info_ptr += 1;
      break;
    case DW_FORM_flag:
      DW_UNSND (attr) = read_1_byte (abfd, info_ptr);
      info_ptr += 1;
      break;
    case DW_FORM_sdata:
      DW_SND (attr) = read_signed_leb128 (abfd, info_ptr, &bytes_read);
      info_ptr += bytes_read;
      break;
    case DW_FORM_udata:
      DW_UNSND (attr) = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);
      info_ptr += bytes_read;
      break;
    case DW_FORM_ref1:
      DW_UNSND (attr) = read_1_byte (abfd, info_ptr);
      info_ptr += 1;
      break;
    case DW_FORM_ref2:
      DW_UNSND (attr) = read_2_bytes (abfd, info_ptr);
      info_ptr += 2;
      break;
    case DW_FORM_ref4:
      DW_UNSND (attr) = read_4_bytes (abfd, info_ptr);
      info_ptr += 4;
      break;
    case DW_FORM_ref8:
      DW_UNSND (attr) = read_8_bytes (abfd, info_ptr);
      info_ptr += 8;
      break;
    case DW_FORM_ref_udata:
      DW_UNSND (attr) = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);
      info_ptr += bytes_read;
      break;
    case DW_FORM_strp:
    case DW_FORM_indirect:
    default:
      (*_bfd_error_handler) (_("Dwarf Error: Invalid or unhandled FORM value: %d."),
			     abbrev->form);
      bfd_set_error (bfd_error_bad_value);
    }
  return info_ptr;
}


/* Source line information table routines. */

#define FILE_ALLOC_CHUNK 5
#define DIR_ALLOC_CHUNK 5

struct line_info {
  struct line_info* prev_line;

  bfd_vma address;
  char* filename;
  unsigned int line;
  unsigned int column;
  int end_sequence;		/* end of (sequential) code sequence */
};

struct fileinfo {
  char *name;
  unsigned int dir;
  unsigned int time;
  unsigned int size;
};

struct line_info_table {
  bfd* abfd;

  unsigned int num_files;
  unsigned int num_dirs;

  char* comp_dir;
  char** dirs;
  struct fileinfo* files;
  struct line_info* last_line;
};

static void 
add_line_info (table, address, filename, line, column, end_sequence)
     struct line_info_table* table;
     bfd_vma address;
     char* filename;
     unsigned int line;
     unsigned int column;
     int end_sequence;
{
  struct line_info* info = (struct line_info*)
    bfd_alloc (table->abfd, sizeof (struct line_info));

  info->prev_line = table->last_line;
  table->last_line = info;

  info->address = address;
  info->filename = filename;
  info->line = line;
  info->column = column;
  info->end_sequence = end_sequence;
}

static char* 
concat_filename (table, file)
     struct line_info_table* table;
     unsigned int file;
{
  char* filename;

  if (file - 1 >= table->num_files)
    {
      (*_bfd_error_handler)
	(_("Dwarf Error: mangled line number section (bad file number)."));
      return "<unknown>";
    }

  filename = table->files[file - 1].name;
  if (*filename == '/')
    return filename;

  else
    {
      char* dirname = (table->files[file - 1].dir
		       ? table->dirs[table->files[file - 1].dir - 1]
		       : table->comp_dir);
      return (char*) concat (dirname, "/", filename, NULL);
    }
}

static void
arange_add (unit, low_pc, high_pc)
     struct comp_unit *unit;
     bfd_vma low_pc;
     bfd_vma high_pc;
{
  struct arange *arange;

  /* first see if we can cheaply extend an existing range: */
  arange = &unit->arange;
  do
    {
      if (low_pc == arange->high)
	{
	  arange->high = high_pc;
	  return;
	}
      if (high_pc == arange->low)
	{
	  arange->low = low_pc;
	  return;
	}
      arange = arange->next;
    }
  while (arange);

  if (unit->arange.high == 0)
    {
      /* this is the first address range: store it in unit->arange: */
      unit->arange.next = 0;
      unit->arange.low = low_pc;
      unit->arange.high = high_pc;
      return;
    }

  /* need to allocate a new arange and insert it into the arange list: */
  arange = bfd_zalloc (unit->abfd, sizeof (*arange));
  arange->low = low_pc;
  arange->high = high_pc;

  arange->next = unit->arange.next;
  unit->arange.next = arange;
}

/* Decode the line number information for UNIT. */

static struct line_info_table*
decode_line_info (unit)
     struct comp_unit *unit;
{
  bfd *abfd = unit->abfd;

  struct dwarf2_debug *stash;

  struct line_info_table* table;

  char *line_ptr;
  char *line_end;
  struct line_head lh;
  unsigned int i, bytes_read;
  char *cur_file, *cur_dir;
  unsigned char op_code, extended_op, adj_opcode;

  stash = elf_tdata (abfd)->dwarf2_find_line_info;

  if (! stash->dwarf_line_buffer)
    {
      asection *msec;
      unsigned long size;

      msec = bfd_get_section_by_name (abfd, ".debug_line");
      if (! msec)
	{
	  (*_bfd_error_handler) (_("Dwarf Error: Can't find .debug_line section."));
	  bfd_set_error (bfd_error_bad_value);
	  return 0;
	}
      
      size = msec->_raw_size;
      stash->dwarf_line_buffer = (char *) bfd_alloc (abfd, size);
      if (! stash->dwarf_line_buffer)
	return 0;

      if (! bfd_get_section_contents (abfd, msec, 
				      stash->dwarf_line_buffer, 0,
				      size))
	return 0;

      /* FIXME: We ought to apply the relocs against this section before
	 we process it.... */
    }

  table = (struct line_info_table*) bfd_alloc (abfd, 
					       sizeof (struct line_info_table));
  table->abfd = abfd;
  table->comp_dir = unit->comp_dir;

  table->num_files = 0;
  table->files = NULL;

  table->num_dirs = 0;
  table->dirs = NULL;

  table->files = NULL;
  table->last_line = NULL;

  line_ptr = stash->dwarf_line_buffer + unit->line_offset;

  /* read in the prologue */
  lh.total_length = read_4_bytes (abfd, line_ptr);
  line_ptr += 4;
  line_end = line_ptr + lh.total_length;
  lh.version = read_2_bytes (abfd, line_ptr);
  line_ptr += 2;
  lh.prologue_length = read_4_bytes (abfd, line_ptr);
  line_ptr += 4;
  lh.minimum_instruction_length = read_1_byte (abfd, line_ptr);
  line_ptr += 1;
  lh.default_is_stmt = read_1_byte (abfd, line_ptr);
  line_ptr += 1;
  lh.line_base = read_1_signed_byte (abfd, line_ptr);
  line_ptr += 1;
  lh.line_range = read_1_byte (abfd, line_ptr);
  line_ptr += 1;
  lh.opcode_base = read_1_byte (abfd, line_ptr);
  line_ptr += 1;
  lh.standard_opcode_lengths = (unsigned char *)
    bfd_alloc (abfd, lh.opcode_base * sizeof (unsigned char));

  lh.standard_opcode_lengths[0] = 1;
  for (i = 1; i < lh.opcode_base; ++i)
    {
      lh.standard_opcode_lengths[i] = read_1_byte (abfd, line_ptr);
      line_ptr += 1;
    }

  /* Read directory table  */
  while ((cur_dir = read_string (abfd, line_ptr, &bytes_read)) != NULL)
    {
      line_ptr += bytes_read;
      if ((table->num_dirs % DIR_ALLOC_CHUNK) == 0)
	{
	  table->dirs = (char **)
	    bfd_realloc (table->dirs,
			 (table->num_dirs + DIR_ALLOC_CHUNK) * sizeof (char *));
	  if (! table->dirs)
	    return 0;
	}
      table->dirs[table->num_dirs++] = cur_dir;
    }
  line_ptr += bytes_read;

  /* Read file name table */
  while ((cur_file = read_string (abfd, line_ptr, &bytes_read)) != NULL)
    {
      line_ptr += bytes_read;
      if ((table->num_files % FILE_ALLOC_CHUNK) == 0)
	{
	  table->files = (struct fileinfo *)
	    bfd_realloc (table->files,
			 (table->num_files + FILE_ALLOC_CHUNK)
			 * sizeof (struct fileinfo));
	  if (! table->files)
	    return 0;
	}
      table->files[table->num_files].name = cur_file;
      table->files[table->num_files].dir =
	read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
      line_ptr += bytes_read;
      table->files[table->num_files].time =
	read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
      line_ptr += bytes_read;
      table->files[table->num_files].size =
	read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
      line_ptr += bytes_read;
      table->num_files++;
    }
  line_ptr += bytes_read;

  /* Read the statement sequences until there's nothing left.  */
  while (line_ptr < line_end)
    {
      /* state machine registers  */
      bfd_vma address = 0;
      char* filename = concat_filename (table, 1);
      unsigned int line = 1;
      unsigned int column = 0;
      int is_stmt = lh.default_is_stmt;
      int basic_block = 0;
      int end_sequence = 0, need_low_pc = 1;
      bfd_vma low_pc = 0;

      /* Decode the table. */
      while (! end_sequence)
	{
	  op_code = read_1_byte (abfd, line_ptr);
	  line_ptr += 1;
	  switch (op_code)
	    {
	    case DW_LNS_extended_op:
	      line_ptr += 1;	/* ignore length */
	      extended_op = read_1_byte (abfd, line_ptr);
	      line_ptr += 1;
	      switch (extended_op)
		{
		case DW_LNE_end_sequence:
		  end_sequence = 1;
		  add_line_info (table, address, filename, line, column,
				 end_sequence);
		  if (need_low_pc)
		    {
		      need_low_pc = 0;
		      low_pc = address;
		    }
		  arange_add (unit, low_pc, address);
		  break;
		case DW_LNE_set_address:
		  address = read_address (unit, line_ptr);
		  line_ptr += unit->addr_size;
		  break;
		case DW_LNE_define_file:
		  cur_file = read_string (abfd, line_ptr, &bytes_read);
		  line_ptr += bytes_read;
		  if ((table->num_files % FILE_ALLOC_CHUNK) == 0)
		    {
		      table->files = (struct fileinfo *)
			bfd_realloc (table->files,
				     (table->num_files + FILE_ALLOC_CHUNK)
				     * sizeof (struct fileinfo));
		      if (! table->files)
			return 0;
		    }
		  table->files[table->num_files].name = cur_file;
		  table->files[table->num_files].dir =
		    read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
		  line_ptr += bytes_read;
		  table->files[table->num_files].time =
		    read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
		  line_ptr += bytes_read;
		  table->files[table->num_files].size =
		    read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
		  line_ptr += bytes_read;
		  table->num_files++;
		  break;
		default:
		  (*_bfd_error_handler) (_("Dwarf Error: mangled line number section."));
		  bfd_set_error (bfd_error_bad_value);
		  return 0;
		}
	      break;
	    case DW_LNS_copy:
	      add_line_info (table, address, filename, line, column, 0);
	      basic_block = 0;
	      if (need_low_pc)
		{
		  need_low_pc = 0;
		  low_pc = address;
		}
	      break;
	    case DW_LNS_advance_pc:
	      address += lh.minimum_instruction_length
		* read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
	      line_ptr += bytes_read;
	      break;
	    case DW_LNS_advance_line:
	      line += read_signed_leb128 (abfd, line_ptr, &bytes_read);
	      line_ptr += bytes_read;
	      break;
	    case DW_LNS_set_file:
	      {
		unsigned int file;

		/* The file and directory tables are 0 based, the references
		   are 1 based.  */
		file = read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
		line_ptr += bytes_read;
		filename = concat_filename (table, file);
		break;
	      }
	    case DW_LNS_set_column:
	      column = read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
	      line_ptr += bytes_read;
	      break;
	    case DW_LNS_negate_stmt:
	      is_stmt = (!is_stmt);
	      break;
	    case DW_LNS_set_basic_block:
	      basic_block = 1;
	      break;
	    case DW_LNS_const_add_pc:
	      address += lh.minimum_instruction_length
		      * ((255 - lh.opcode_base) / lh.line_range);
	      break;
	    case DW_LNS_fixed_advance_pc:
	      address += read_2_bytes (abfd, line_ptr);
	      line_ptr += 2;
	      break;
	    default:		/* special operand */
	      adj_opcode = op_code - lh.opcode_base;
	      address += (adj_opcode / lh.line_range)
		* lh.minimum_instruction_length;
	      line += lh.line_base + (adj_opcode % lh.line_range);
	      /* append row to matrix using current values */
	      add_line_info (table, address, filename, line, column, 0);
	      basic_block = 1;
	      if (need_low_pc)
		{
		  need_low_pc = 0;
		  low_pc = address;
		}
	    }
	}
    }

  return table;
}


/* If ADDR is within TABLE set the output parameters and return true,
   otherwise return false.  The output parameters, FILENAME_PTR and
   LINENUMBER_PTR, are pointers to the objects to be filled in. */

static boolean
lookup_address_in_line_info_table (table, 
				   addr,
				   filename_ptr, 
				   linenumber_ptr)
     struct line_info_table* table;
     bfd_vma addr;
     const char **filename_ptr;
     unsigned int *linenumber_ptr;
{
  struct line_info* next_line = table->last_line;
  struct line_info* each_line;
  
  if (!next_line)
    return false;

  each_line = next_line->prev_line;

  while (each_line && next_line)
    {
      if (!each_line->end_sequence
	  && addr >= each_line->address && addr < next_line->address)
	{
	  *filename_ptr = each_line->filename;
	  *linenumber_ptr = each_line->line;
	  return true;
	}
      next_line = each_line;
      each_line = each_line->prev_line;
    }
  
  return false;
}
  



/* Function table functions. */

struct funcinfo {
  struct funcinfo *prev_func;

  char* name;
  bfd_vma low;
  bfd_vma high;
};


/* If ADDR is within TABLE, set FUNCTIONNAME_PTR, and return true. */

static boolean
lookup_address_in_function_table (table, 
				  addr,
				  functionname_ptr)
     struct funcinfo* table;
     bfd_vma addr;
     const char **functionname_ptr;
{
  struct funcinfo* each_func;

  for (each_func = table;
       each_func;
       each_func = each_func->prev_func)
    {
      if (addr >= each_func->low && addr < each_func->high)
	{
	  *functionname_ptr = each_func->name;
	  return true;
	}
    }
  
  return false;
}




/* DWARF2 Compilation unit functions. */


/* Scan over each die in a comp. unit looking for functions to add
   to the function table. */

static boolean
scan_unit_for_functions (unit)
     struct comp_unit *unit;
{
  bfd *abfd = unit->abfd;
  char *info_ptr = unit->first_child_die_ptr;
  int nesting_level = 1;

  while (nesting_level)
    {
      unsigned int abbrev_number, bytes_read, i;
      struct abbrev_info *abbrev;
      struct attribute attr;
      struct funcinfo *func;
      char* name = 0;

      abbrev_number = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);
      info_ptr += bytes_read;

      if (! abbrev_number)
	{
	  nesting_level--;
	  continue;
	}
      
      abbrev = lookup_abbrev (abbrev_number,unit->abbrevs);
      if (! abbrev)
	{
	  (*_bfd_error_handler) (_("Dwarf Error: Could not find abbrev number %d."), 
			     abbrev_number);
	  bfd_set_error (bfd_error_bad_value);
	  return false;
	}
      
      if (abbrev->tag == DW_TAG_subprogram)
	{
	  func = (struct funcinfo*) bfd_zalloc (abfd, sizeof (struct funcinfo));
	  func->prev_func = unit->function_table;
	  unit->function_table = func;
	}
      else
	func = NULL;
  
      for (i = 0; i < abbrev->num_attrs; ++i)
	{
	  info_ptr = read_attribute (&attr, &abbrev->attrs[i], unit, info_ptr);
	  
	  if (func)
	    {
	      switch (attr.name)
		{
		case DW_AT_name:
		  
		  name = DW_STRING (&attr);

		  /* Prefer DW_AT_MIPS_linkage_name over DW_AT_name.  */
		  if (func->name == NULL)
		    func->name = DW_STRING (&attr);
		  break;
		  
		case DW_AT_MIPS_linkage_name:
		  func->name = DW_STRING (&attr);
		  break;

		case DW_AT_low_pc:
		  func->low = DW_ADDR (&attr);
		  break;

		case DW_AT_high_pc:
		  func->high = DW_ADDR (&attr);
		  break;

		default:
		  break;
		}
	    }
	  else
	    {
	      switch (attr.name)
		{
		case DW_AT_name:
		  name = DW_STRING (&attr);
		  break;
		  
		default:
		  break;
		}
	    }
	}

      if (abbrev->has_children)
	nesting_level++;
    }

  return true;
}






/* Parse a DWARF2 compilation unit starting at INFO_PTR.  This
   includes the compilation unit header that proceeds the DIE's, but
   does not include the length field that preceeds each compilation
   unit header.  END_PTR points one past the end of this comp unit.
   If ABBREV_LENGTH is 0, then the length of the abbreviation offset
   is assumed to be four bytes.  Otherwise, it it is the size given.

   This routine does not read the whole compilation unit; only enough
   to get to the line number information for the compilation unit.  */

static struct comp_unit *
parse_comp_unit (abfd, info_ptr, end_ptr, abbrev_length)
     bfd* abfd;
     char* info_ptr;
     char* end_ptr;
     unsigned int abbrev_length;
{
  struct comp_unit* unit;

  unsigned short version;
  unsigned int abbrev_offset = 0;
  unsigned char addr_size;
  struct abbrev_info** abbrevs;

  unsigned int abbrev_number, bytes_read, i;
  struct abbrev_info *abbrev;
  struct attribute attr;

  version = read_2_bytes (abfd, info_ptr);
  info_ptr += 2;
  BFD_ASSERT (abbrev_length == 0
	      || abbrev_length == 4
	      || abbrev_length == 8);
  if (abbrev_length == 0 || abbrev_length == 4)
    abbrev_offset = read_4_bytes (abfd, info_ptr);
  else if (abbrev_length == 8)
    abbrev_offset = read_8_bytes (abfd, info_ptr);
  info_ptr += abbrev_length;
  addr_size = read_1_byte (abfd, info_ptr);
  info_ptr += 1;

  if (version != 2)
    {
      (*_bfd_error_handler) (_("Dwarf Error: found dwarf version '%hu', this reader only handles version 2 information."), version );
      bfd_set_error (bfd_error_bad_value);
      return 0;
    }

  if (addr_size > sizeof (bfd_vma))
    {
      (*_bfd_error_handler) (_("Dwarf Error: found address size '%u', this reader can not handle sizes greater than '%u'."),
			 addr_size,
			 sizeof (bfd_vma));
      bfd_set_error (bfd_error_bad_value);
      return 0;
    }

  if (addr_size != 2 && addr_size != 4 && addr_size != 8)
    {
      (*_bfd_error_handler) ("Dwarf Error: found address size '%u', this reader can only handle address sizes '2', '4' and '8'.", addr_size );
      bfd_set_error (bfd_error_bad_value);
      return 0;
    }

  /* Read the abbrevs for this compilation unit into a table */
  abbrevs = read_abbrevs (abfd, abbrev_offset);
  if (! abbrevs)
      return 0;

  abbrev_number = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);
  info_ptr += bytes_read;
  if (! abbrev_number)
    {
      (*_bfd_error_handler) (_("Dwarf Error: Bad abbrev number: %d."),
			 abbrev_number);
      bfd_set_error (bfd_error_bad_value);
      return 0;
    }

  abbrev = lookup_abbrev (abbrev_number, abbrevs);
  if (! abbrev)
    {
      (*_bfd_error_handler) (_("Dwarf Error: Could not find abbrev number %d."),
			 abbrev_number);
      bfd_set_error (bfd_error_bad_value);
      return 0;
    }
  
  unit = (struct comp_unit*) bfd_zalloc (abfd, sizeof (struct comp_unit));
  unit->abfd = abfd;
  unit->addr_size = addr_size; 
  unit->abbrevs = abbrevs;
  unit->end_ptr = end_ptr;

  for (i = 0; i < abbrev->num_attrs; ++i)
    {
      info_ptr = read_attribute (&attr, &abbrev->attrs[i], unit, info_ptr);

      /* Store the data if it is of an attribute we want to keep in a
	 partial symbol table.  */
      switch (attr.name)
	{
	case DW_AT_stmt_list:
	  unit->stmtlist = 1;
	  unit->line_offset = DW_UNSND (&attr);
	  break;

	case DW_AT_name:
	  unit->name = DW_STRING (&attr);
	  break;

	case DW_AT_low_pc:
	  unit->arange.low = DW_ADDR (&attr);
	  break;

	case DW_AT_high_pc:
	  unit->arange.high = DW_ADDR (&attr);
	  break;

	case DW_AT_comp_dir:
	  {
	    char* comp_dir = DW_STRING (&attr);
	    if (comp_dir)
	      {
		/* Irix 6.2 native cc prepends <machine>.: to the compilation
		   directory, get rid of it.  */
		char *cp = (char*) strchr (comp_dir, ':');

		if (cp && cp != comp_dir && cp[-1] == '.' && cp[1] == '/')
		  comp_dir = cp + 1;
	      }
	    unit->comp_dir = comp_dir;
	    break;
	  }

	default:
	  break;
	}
    }

  unit->first_child_die_ptr = info_ptr;
  return unit;
}





/* Return true if UNIT contains the address given by ADDR. */

static boolean
comp_unit_contains_address (unit, addr)
     struct comp_unit* unit;
     bfd_vma addr;
{
  struct arange *arange;

  if (unit->error)
    return 0;

  arange = &unit->arange;
  do
    {
      if (addr >= arange->low && addr < arange->high)
	return 1;
      arange = arange->next;
    }
  while (arange);
  return 0;
}


/* If UNIT contains ADDR, set the output parameters to the values for
   the line containing ADDR.  The output parameters, FILENAME_PTR,
   FUNCTIONNAME_PTR, and LINENUMBER_PTR, are pointers to the objects
   to be filled in.  

   Return true of UNIT contains ADDR, and no errors were encountered;
   false otherwise.  */

static boolean
comp_unit_find_nearest_line (unit, addr,
			     filename_ptr, functionname_ptr, linenumber_ptr)
     struct comp_unit* unit;
     bfd_vma addr;
     const char **filename_ptr;
     const char **functionname_ptr;
     unsigned int *linenumber_ptr;
{
  boolean line_p;
  boolean func_p;
  
  if (unit->error)
    return false;

  if (! unit->line_table)
    {
      if (! unit->stmtlist)
	{
	  unit->error = 1;
	  return false;
	}
  
      unit->line_table = decode_line_info (unit);

      if (! unit->line_table)
	{
	  unit->error = 1;
	  return false;
	}
      
      if (! scan_unit_for_functions (unit))
	{
	  unit->error = 1;
	  return false;
	}
    }

  line_p = lookup_address_in_line_info_table (unit->line_table,
					      addr,
					      filename_ptr, 
					      linenumber_ptr);
  func_p = lookup_address_in_function_table (unit->function_table, 
					     addr,
					     functionname_ptr);
  return line_p || func_p;
}

/* The DWARF2 version of find_nearest line.  Return true if the line
   is found without error.  ADDR_SIZE is the number of bytes in the
   initial .debug_info length field and in the abbreviation offset.
   You may use zero to indicate that the default value should be
   used.  */

boolean
_bfd_dwarf2_find_nearest_line (abfd, section, symbols, offset,
			       filename_ptr, functionname_ptr,
			       linenumber_ptr,
			       addr_size)
     bfd *abfd;
     asection *section;
     asymbol **symbols ATTRIBUTE_UNUSED;
     bfd_vma offset;
     const char **filename_ptr;
     const char **functionname_ptr;
     unsigned int *linenumber_ptr;
     unsigned int addr_size;
{
  /* Read each compilation unit from the section .debug_info, and check
     to see if it contains the address we are searching for.  If yes,
     lookup the address, and return the line number info.  If no, go
     on to the next compilation unit.  

     We keep a list of all the previously read compilation units, and
     a pointer to the next un-read compilation unit.  Check the 
     previously read units before reading more.
     */

  struct dwarf2_debug *stash = elf_tdata (abfd)->dwarf2_find_line_info;

  /* What address are we looking for? */
  bfd_vma addr = offset + section->vma;

  struct comp_unit* each;
  
  *filename_ptr = NULL;
  *functionname_ptr = NULL;
  *linenumber_ptr = 0;

  /* The DWARF2 spec says that the initial length field, and the
     offset of the abbreviation table, should both be 4-byte values.
     However, some compilers do things differently.  */
  if (addr_size == 0)
    addr_size = 4;
  BFD_ASSERT (addr_size == 4 || addr_size == 8);
    
  if (! stash)
    {
      asection *msec;
      unsigned long size;
      
      stash = elf_tdata (abfd)->dwarf2_find_line_info =
	(struct dwarf2_debug*) bfd_zalloc (abfd, sizeof (struct dwarf2_debug));
      
      if (! stash)
	return false;
      
      msec = bfd_get_section_by_name (abfd, ".debug_info");
      if (! msec)
	{
	  /* No dwarf2 info.  Note that at this point the stash
	     has been allocated, but contains zeros, this lets
	     future calls to this function fail quicker. */
	  return false;
	}

      size = msec->_raw_size;
      if (size == 0)
	return false;
      
      stash->info_ptr = (char *) bfd_alloc (abfd, size);
      
      if (! stash->info_ptr)
	return false;

      if (! bfd_get_section_contents (abfd, msec, stash->info_ptr, 0, size))
	{
	  stash->info_ptr = 0;
	  return false;
	}

      stash->info_ptr_end = stash->info_ptr + size;

      /* FIXME: There is a problem with the contents of the
	 .debug_info section.  The 'low' and 'high' addresses of the
	 comp_units are computed by relocs against symbols in the
	 .text segment.  We need these addresses in order to determine
	 the nearest line number, and so we have to resolve the
	 relocs.  There is a similar problem when the .debug_line
	 section is processed as well (e.g., there may be relocs
	 against the operand of the DW_LNE_set_address operator).
	 
	 Unfortunately getting hold of the reloc information is hard...

	 For now, this means that disassembling object files (as
	 opposed to fully executables) does not always work as well as
	 we would like.  */
    }
  
  /* A null info_ptr indicates that there is no dwarf2 info 
     (or that an error occured while setting up the stash). */

  if (! stash->info_ptr)
    return false;

  /* Check the previously read comp. units first. */

  for (each = stash->all_comp_units; each; each = each->next_unit)
    if (comp_unit_contains_address (each, addr))
      return comp_unit_find_nearest_line (each, addr, filename_ptr, 
					  functionname_ptr, linenumber_ptr);

  /* Read each remaining comp. units checking each as they are read. */
  while (stash->info_ptr < stash->info_ptr_end)
    {
      struct comp_unit* each;
      bfd_vma length;
      boolean found;

      if (addr_size == 4)
	length = read_4_bytes (abfd, stash->info_ptr);
      else
	length = read_8_bytes (abfd, stash->info_ptr);
      stash->info_ptr += addr_size;

      if (length > 0)
        {
	  each = parse_comp_unit (abfd, stash->info_ptr, 
				  stash->info_ptr + length,
				  addr_size);
	  stash->info_ptr += length;

	  if (each)
	    {
	      each->next_unit = stash->all_comp_units;
	      stash->all_comp_units = each;

	      /* DW_AT_low_pc and DW_AT_high_pc are optional for
		 compilation units.  If we don't have them (i.e.,
		 unit->high == 0), we need to consult the line info
		 table to see if a compilation unit contains the given
		 address. */
	      if (each->arange.high > 0)
		{
		  if (comp_unit_contains_address (each, addr))
		    return comp_unit_find_nearest_line (each, addr,
						       filename_ptr,
						       functionname_ptr,
						       linenumber_ptr);
		}
	      else
		{
		  found = comp_unit_find_nearest_line (each, addr,
						       filename_ptr,
						       functionname_ptr,
						       linenumber_ptr);
		  if (found)
		    return true;
		}
	    }
	}
    }

  return false;
}

/* end of file */
@


1.1.1.1
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@@


1.1.1.2
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
   Free Software Foundation, Inc.
a38 1

d40 11
a50 13
{
  unsigned int total_length;
  unsigned short version;
  unsigned int prologue_length;
  unsigned char minimum_instruction_length;
  unsigned char default_is_stmt;
  int line_base;
  unsigned char line_range;
  unsigned char opcode_base;
  unsigned char *standard_opcode_lengths;
};

/* Attributes have a name and a value.  */
d52 1
a53 4
{
  enum dwarf_attribute name;
  enum dwarf_form form;
  union
d55 12
a66 8
    char *str;
    struct dwarf_block *blk;
    unsigned int unsnd;
    int snd;
    bfd_vma addr;
  }
  u;
};
d68 1
a68 1
/* Get at parts of an attribute structure.  */
d76 1
a76 1
/* Blocks are a bunch of untyped bytes.  */
d78 7
a84 4
{
  unsigned int size;
  char *data;
};
d86 1
a86 3
struct dwarf2_debug
{
  /* A list of all previously read comp_units.  */
d91 1
a91 1
     into a buffer yet.  */
d94 1
a94 1
  /* Pointer to the end of the .debug_info section memory buffer.  */
d97 1
a97 1
  /* Pointer to the .debug_abbrev section loaded into memory.  */
d100 1
a100 1
  /* Length of the loaded .debug_abbrev section.  */
a104 3

  /* Length of the loaded .debug_line section.  */
  unsigned long dwarf_line_size;
d107 1
a107 2
struct arange
{
d113 1
d115 3
a117 1
   what's needed to get to the line number information.  */
d119 1
a119 3
struct comp_unit
{
  /* Chain the previously read compilation units.  */
d122 1
a122 1
  /* Keep the bdf convenient (for memory allocation).  */
d126 1
a126 1
     unit as specified in the compilation unit header.  */
d129 1
a129 1
  /* The DW_AT_name attribute (for error messages).  */
d132 1
a132 1
  /* The abbrev hash table.  */
d135 1
a135 1
  /* Note that an error was found by comp_unit_find_nearest_line.  */
d138 1
a138 1
  /* The DW_AT_comp_dir attribute.  */
d141 1
a141 1
  /* True if there is a line number table associated with this comp. unit.  */
d143 2
a144 2

  /* The offset into .debug_line of the line number table.  */
d147 1
a147 1
  /* Pointer to the first child die for the comp unit.  */
d150 1
a150 1
  /* The end of the comp unit.  */
d153 1
a153 1
  /* The decoded line number, NULL if not yet decoded.  */
d156 2
a157 2
  /* A list of the functions found in this comp. unit.  */
  struct funcinfo* function_table;
d159 1
a159 1
  /* Address size for this unit - from unit header.  */
a162 3
/* VERBATIM
   The following function up to the END VERBATIM mark are
   copied directly from dwarf2read.c.  */
d164 6
a169 1
/* Read dwarf information from a buffer.  */
d195 3
a197 1
#if 0  /* This is not used.  */
d217 3
a219 1
#if 0  /* This is not used.  */
a264 1

d283 1
a283 1

d293 1
a293 1

d295 1
a295 1

d323 1
a323 1

d328 1
a328 1

d352 5
a356 1
/* This data structure holds the information of an abbrev.  */
d358 8
a365 8
{
  unsigned int number;		/* Number identifying abbrev.  */
  enum dwarf_tag tag;		/* DWARF tag.  */
  int has_children;		/* Boolean.  */
  unsigned int num_attrs;	/* Number of attributes.  */
  struct attr_abbrev *attrs;	/* An array of attribute descriptions.  */
  struct abbrev_info *next;	/* Next in chain.  */
};
d368 4
a371 4
{
  enum dwarf_attribute name;
  enum dwarf_form form;
};
a399 1

d409 1
a409 1
read_abbrevs (abfd, offset, stash)
a411 1
     struct dwarf2_debug *stash;
d418 3
d433 1
a433 1

d438 2
a439 2

      if (! bfd_get_section_contents (abfd, msec,
d445 1
a445 1
  if (offset >= stash->dwarf_abbrev_size)
d447 1
a447 1
      (*_bfd_error_handler) (_("Dwarf Error: Abbrev offset (%u) greater than or equal to abbrev size (%u)."),
d453 1
a453 1
  abbrevs = (struct abbrev_info**) bfd_zalloc (abfd, sizeof (struct abbrev_info*) * ABBREV_HASH_SIZE);
d459 1
a459 1
  /* Loop until we reach an abbrev number of 0.  */
d464 1
a464 1
      /* Read in abbrev header.  */
d471 1
a471 1
      /* Now read in declarations.  */
a475 1

a486 1

a532 1

d634 2
a635 1
/* Source line information table routines.  */
d640 1
a640 2
struct line_info
{
d642 1
d647 1
a647 1
  int end_sequence;		/* End of (sequential) code sequence.  */
d650 1
a650 2
struct fileinfo
{
d657 1
a657 2
struct line_info_table
{
d659 1
d662 1
d669 1
a669 1
static void
d691 1
a691 1
static char *
d706 1
a706 1
  if (IS_ABSOLUTE_PATH(filename))
d726 1
a726 1
  /* First see if we can cheaply extend an existing range.  */
a727 1

d746 1
a746 1
      /* This is the first address range: store it in unit->arange.  */
d753 1
a753 1
  /* Need to allocate a new arange and insert it into the arange list.  */
d762 1
a762 1
/* Decode the line number information for UNIT.  */
d765 1
a765 1
decode_line_info (unit, stash)
a766 1
     struct dwarf2_debug *stash;
d769 3
d773 1
d781 2
d786 1
d795 3
a797 3

      stash->dwarf_line_size = msec->_raw_size;
      stash->dwarf_line_buffer = (char *) bfd_alloc (abfd, stash->dwarf_line_size);
d801 1
a801 1
      if (! bfd_get_section_contents (abfd, msec,
d803 1
a803 1
				      stash->dwarf_line_size))
d807 1
a807 12
	 we process it...  */
    }

  /* Since we are using un-relocated data, it is possible to get a bad value
     for the line_offset.  Validate it here so that we won't get a segfault
     below.  */
  if (unit->line_offset >= stash->dwarf_line_size)
    {
      (*_bfd_error_handler) (_("Dwarf Error: Line offset (%u) greater than or equal to line size (%u)."),
			     unit->line_offset, stash->dwarf_line_size);
      bfd_set_error (bfd_error_bad_value);
      return 0;
d810 1
a810 1
  table = (struct line_info_table*) bfd_alloc (abfd,
d826 1
a826 1
  /* Read in the prologue.  */
a847 1

d854 1
a854 1
  /* Read directory table.  */
a857 1

a865 1

a867 1

d870 1
a870 1
  /* Read file name table.  */
a873 1

a882 1

a894 1

d900 1
a900 1
      /* State machine registers.  */
d910 1
a910 1
      /* Decode the table.  */
a914 1

d918 1
a918 1
	      line_ptr += 1;	/* Ignore length.  */
d1015 1
a1015 1
	    default:		/* Special operand.  */
d1020 1
a1020 1
	      /* Append row to matrix using current values.  */
d1035 1
d1038 1
a1038 1
   LINENUMBER_PTR, are pointers to the objects to be filled in.  */
d1041 1
a1041 1
lookup_address_in_line_info_table (table,
d1043 1
a1043 1
				   filename_ptr,
d1052 1
a1052 1

d1070 1
a1070 1

d1073 1
a1074 1
/* Function table functions.  */
d1076 4
a1079 2
struct funcinfo
{
d1081 1
d1087 2
a1088 1
/* If ADDR is within TABLE, set FUNCTIONNAME_PTR, and return true.  */
d1091 1
a1091 1
lookup_address_in_function_table (table,
d1110 1
a1110 1

d1114 5
a1118 1
/* DWARF2 Compilation unit functions.  */
d1121 1
a1121 1
   to the function table.  */
d1147 1
a1147 1

d1151 1
a1151 1
	  (*_bfd_error_handler) (_("Dwarf Error: Could not find abbrev number %d."),
d1156 1
a1156 1

d1165 1
a1165 1

d1169 1
a1169 1

d1175 1
a1175 1

d1182 1
a1182 1

d1206 1
a1206 1

d1220 5
d1236 1
a1236 1
parse_comp_unit (abfd, stash, unit_length, abbrev_length)
d1238 2
a1239 2
     struct dwarf2_debug *stash;
     bfd_vma unit_length;
a1252 3
  char *info_ptr = stash->info_ptr;
  char *end_ptr = info_ptr + unit_length;

d1289 2
a1290 2
  /* Read the abbrevs for this compilation unit into a table.  */
  abbrevs = read_abbrevs (abfd, abbrev_offset, stash);
d1312 1
a1312 1

d1315 1
a1315 1
  unit->addr_size = addr_size;
d1369 5
a1373 1
/* Return true if UNIT contains the address given by ADDR.  */
a1392 1

d1396 1
d1400 1
a1400 1
   to be filled in.
d1407 1
a1407 2
			     filename_ptr, functionname_ptr, linenumber_ptr,
			     stash)
a1412 1
     struct dwarf2_debug *stash;
d1416 1
a1416 1

d1427 2
a1428 2

      unit->line_table = decode_line_info (unit, stash);
d1435 1
a1435 1

d1445 1
a1445 1
					      filename_ptr,
d1447 1
a1447 1
  func_p = lookup_address_in_function_table (unit->function_table,
a1452 37
/* Locate a section in a BFD containing debugging info.  The search starts from the
   section after AFTER_SEC, or from the first section in the BFD if AFTER_SEC is
   NULL.  The search works by examining the names of the sections.  There are two
   permissiable names.  The first is .debug_info.  This is the standard DWARF2 name.
   The second is a prefix .gnu.linkonce.wi.  This is a variation on the .debug_info
   section which has a checksum describing the contents appended onto the name.  This
   allows the linker to identify and discard duplicate debugging sections for
   different compilation units.  */
#define DWARF2_DEBUG_INFO ".debug_info"
#define GNU_LINKONCE_INFO ".gnu.linkonce.wi."

static asection *
find_debug_info (abfd, after_sec)
     bfd * abfd;
     asection * after_sec;
{
  asection * msec;

  if (after_sec)
    msec = after_sec->next;
  else
    msec = abfd->sections;

  while (msec)
    {
      if (strcmp (msec->name, DWARF2_DEBUG_INFO) == 0)
	return msec;

      if (strncmp (msec->name, GNU_LINKONCE_INFO, strlen (GNU_LINKONCE_INFO)) == 0)
	return msec;

      msec = msec->next;
    }

  return NULL;
}

d1463 1
a1463 1
			       addr_size, pinfo)
a1471 1
     PTR *pinfo;
d1476 1
a1476 1
     on to the next compilation unit.
d1479 5
a1483 3
     a pointer to the next un-read compilation unit.  Check the
     previously read units before reading more.  */
  struct dwarf2_debug *stash = (struct dwarf2_debug *) *pinfo;
d1485 1
a1485 1
  /* What address are we looking for?  */
d1489 1
a1489 1

d1500 1
a1500 1

a1502 1
      unsigned long total_size;
d1504 3
a1506 2

      stash =
d1508 1
d1511 2
a1512 4

      *pinfo = (PTR) stash;

      msec = find_debug_info (abfd, NULL);
d1514 6
a1519 12
	/* No dwarf2 info.  Note that at this point the stash
	   has been allocated, but contains zeros, this lets
	   future calls to this function fail quicker.  */
	 return false;

      /* There can be more than one DWARF2 info section in a BFD these days.
         Read them all in and produce one large stash.  We do this in two
	 passes - in the first pass we just accumulate the section sizes.
	 In the second pass we read in the section's contents.  The allows
	 us to avoid reallocing the data as we add sections to the stash.  */
      for (total_size = 0; msec; msec = find_debug_info (abfd, msec))
	total_size += msec->_raw_size;
d1521 7
a1527 2
      stash->info_ptr = (char *) bfd_alloc (abfd, total_size);
      if (stash->info_ptr == NULL)
d1530 1
a1530 5
      stash->info_ptr_end = stash->info_ptr;

      for (msec = find_debug_info (abfd, NULL);
	   msec;
	   msec = find_debug_info (abfd, msec))
d1532 2
a1533 13
	  unsigned long size;
	  unsigned long start;

	  size = msec->_raw_size;
	  if (size == 0)
	    continue;

	  start = stash->info_ptr_end - stash->info_ptr;

	  if (! bfd_get_section_contents (abfd, msec, stash->info_ptr + start, 0, size))
	    continue;

	  stash->info_ptr_end = stash->info_ptr + start + size;
d1536 1
a1536 2
      BFD_ASSERT (stash->info_ptr_end = stash->info_ptr + total_size);
    }
d1538 18
a1555 8
  /* FIXME: There is a problem with the contents of the
     .debug_info section.  The 'low' and 'high' addresses of the
     comp_units are computed by relocs against symbols in the
     .text segment.  We need these addresses in order to determine
     the nearest line number, and so we have to resolve the
     relocs.  There is a similar problem when the .debug_line
     section is processed as well (e.g., there may be relocs
     against the operand of the DW_LNE_set_address operator).
a1556 8
     Unfortunately getting hold of the reloc information is hard...

     For now, this means that disassembling object files (as
     opposed to fully executables) does not always work as well as
     we would like.  */

  /* A null info_ptr indicates that there is no dwarf2 info
     (or that an error occured while setting up the stash).  */
d1560 2
a1561 1
  /* Check the previously read comp. units first.  */
d1564 2
a1565 3
      return comp_unit_find_nearest_line (each, addr, filename_ptr,
					  functionname_ptr, linenumber_ptr,
					  stash);
d1567 1
a1567 1
  /* Read each remaining comp. units checking each as they are read.  */
d1582 3
a1584 1
	  each = parse_comp_unit (abfd, stash, length, addr_size);
d1596 1
a1596 1
		 address.  */
d1603 1
a1603 2
						       linenumber_ptr,
						       stash);
d1610 1
a1610 2
						       linenumber_ptr,
						       stash);
d1620 2
@


1.1.1.3
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
d16 1
a16 1
   This file is part of BFD.
d18 13
a30 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or (at
   your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d43 1
a43 1
  bfd_vma total_length;
d45 1
a45 1
  bfd_vma prologue_length;
a98 8
  /* Pointer to the section and address of the beginning of the
     section.  */
  asection* sec;
  char* sec_info_ptr;

  /* Pointer to the symbol table.  */
  asymbol** syms;

a109 6

  /* Pointer to the .debug_str section loaded into memory.  */
  char* dwarf_str_buffer;

  /* Length of the loaded .debug_str section.  */
  unsigned long dwarf_str_size;
d146 1
a146 1
  /* TRUE if there is a line number table associated with this comp. unit.  */
a163 3
  /* Pointer to dwarf2_debug structure.  */
  struct dwarf2_debug *stash;

a165 20

  /* Offset size for this unit - from unit header.  */
  unsigned char offset_size;
};

/* This data structure holds the information of an abbrev.  */
struct abbrev_info
{
  unsigned int number;		/* Number identifying abbrev.  */
  enum dwarf_tag tag;		/* DWARF tag.  */
  int has_children;		/* Boolean.  */
  unsigned int num_attrs;	/* Number of attributes.  */
  struct attr_abbrev *attrs;	/* An array of attribute descriptions.  */
  struct abbrev_info *next;	/* Next in chain.  */
};

struct attr_abbrev
{
  enum dwarf_attribute name;
  enum dwarf_form form;
a167 52
#ifndef ABBREV_HASH_SIZE
#define ABBREV_HASH_SIZE 121
#endif
#ifndef ATTR_ALLOC_CHUNK
#define ATTR_ALLOC_CHUNK 4
#endif

static unsigned int read_1_byte PARAMS ((bfd *, char *));
static int read_1_signed_byte PARAMS ((bfd *, char *));
static unsigned int read_2_bytes PARAMS ((bfd *, char *));
static unsigned int read_4_bytes PARAMS ((bfd *, char *));
static bfd_vma read_8_bytes PARAMS ((bfd *, char *));
static char *read_n_bytes PARAMS ((bfd *, char *, unsigned int));
static char *read_string PARAMS ((bfd *, char *, unsigned int *));
static char *read_indirect_string PARAMS ((struct comp_unit *, char *, unsigned int *));
static unsigned int read_unsigned_leb128
  PARAMS ((bfd *, char *, unsigned int *));
static int read_signed_leb128
  PARAMS ((bfd *, char *, unsigned int *));
static bfd_vma read_address PARAMS ((struct comp_unit *, char *));
static struct abbrev_info *lookup_abbrev
  PARAMS ((unsigned int, struct abbrev_info **));
static struct abbrev_info **read_abbrevs
  PARAMS ((bfd *, bfd_vma, struct dwarf2_debug *));
static char *read_attribute
  PARAMS ((struct attribute *, struct attr_abbrev *,
	   struct comp_unit *, char *));
static char *read_attribute_value
  PARAMS ((struct attribute *, unsigned,
	   struct comp_unit *, char *));
static void add_line_info
  PARAMS ((struct line_info_table *, bfd_vma, char *,
	   unsigned int, unsigned int, int));
static char *concat_filename PARAMS ((struct line_info_table *, unsigned int));
static void arange_add PARAMS ((struct comp_unit *, bfd_vma, bfd_vma));
static struct line_info_table *decode_line_info
  PARAMS ((struct comp_unit *, struct dwarf2_debug *));
static bfd_boolean lookup_address_in_line_info_table
  PARAMS ((struct line_info_table *, bfd_vma, struct funcinfo *,
	   const char **, unsigned int *));
static bfd_boolean lookup_address_in_function_table
  PARAMS ((struct funcinfo *, bfd_vma, struct funcinfo **, const char **));
static bfd_boolean scan_unit_for_functions PARAMS ((struct comp_unit *));
static struct comp_unit *parse_comp_unit
  PARAMS ((bfd *, struct dwarf2_debug *, bfd_vma, unsigned int));
static bfd_boolean comp_unit_contains_address
  PARAMS ((struct comp_unit *, bfd_vma));
static bfd_boolean comp_unit_find_nearest_line
  PARAMS ((struct comp_unit *, bfd_vma, const char **, const char **,
	   unsigned int *, struct dwarf2_debug *));
static asection *find_debug_info PARAMS ((bfd *, asection *));

d230 1
a230 1
static bfd_vma
d256 3
a258 1
  /* Return a pointer to the embedded string.  */
a268 53
static char *
read_indirect_string (unit, buf, bytes_read_ptr)
     struct comp_unit* unit;
     char *buf;
     unsigned int *bytes_read_ptr;
{
  bfd_vma offset;
  struct dwarf2_debug *stash = unit->stash;

  if (unit->offset_size == 4)
    offset = read_4_bytes (unit->abfd, buf);
  else
    offset = read_8_bytes (unit->abfd, buf);
  *bytes_read_ptr = unit->offset_size;

  if (! stash->dwarf_str_buffer)
    {
      asection *msec;
      bfd *abfd = unit->abfd;

      msec = bfd_get_section_by_name (abfd, ".debug_str");
      if (! msec)
	{
	  (*_bfd_error_handler)
	    (_("Dwarf Error: Can't find .debug_str section."));
	  bfd_set_error (bfd_error_bad_value);
	  return NULL;
	}

      stash->dwarf_str_size = msec->_raw_size;
      stash->dwarf_str_buffer = (char*) bfd_alloc (abfd, msec->_raw_size);
      if (! stash->dwarf_abbrev_buffer)
	return NULL;

      if (! bfd_get_section_contents (abfd, msec, stash->dwarf_str_buffer,
				      (bfd_vma) 0, msec->_raw_size))
	return NULL;
    }

  if (offset >= stash->dwarf_str_size)
    {
      (*_bfd_error_handler) (_("Dwarf Error: DW_FORM_strp offset (%lu) greater than or equal to .debug_str size (%lu)."),
			     (unsigned long) offset, stash->dwarf_str_size);
      bfd_set_error (bfd_error_bad_value);
      return NULL;
    }

  buf = stash->dwarf_str_buffer + offset;
  if (*buf == '\0')
    return NULL;
  return buf;
}

d352 24
d408 1
a408 1
     bfd_vma offset;
a415 1
  bfd_size_type amt;
d430 1
a430 3
      stash->dwarf_abbrev_buffer
	= bfd_simple_get_relocated_section_contents (abfd, msec, NULL,
						     stash->syms);
d433 5
d442 2
a443 2
      (*_bfd_error_handler) (_("Dwarf Error: Abbrev offset (%lu) greater than or equal to .debug_abbrev size (%lu)."),
			     (unsigned long) offset, stash->dwarf_abbrev_size);
d448 1
a448 2
  amt = sizeof (struct abbrev_info*) * ABBREV_HASH_SIZE;
  abbrevs = (struct abbrev_info**) bfd_zalloc (abfd, amt);
d457 1
a457 2
      amt = sizeof (struct abbrev_info);
      cur_abbrev = (struct abbrev_info *) bfd_zalloc (abfd, amt);
d461 1
a461 2
      cur_abbrev->tag = (enum dwarf_tag)
	read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);
d476 4
a479 4
	      amt = cur_abbrev->num_attrs + ATTR_ALLOC_CHUNK;
	      amt *= sizeof (struct attr_abbrev);
	      cur_abbrev->attrs = ((struct attr_abbrev *)
				   bfd_realloc (cur_abbrev->attrs, amt));
d484 2
a485 4
	  cur_abbrev->attrs[cur_abbrev->num_attrs].name
	    = (enum dwarf_attribute) abbrev_name;
	  cur_abbrev->attrs[cur_abbrev->num_attrs++].form
	    = (enum dwarf_form) abbrev_form;
d497 1
a497 1
	 Under Irix6 the abbreviations for a compilation unit are not
d515 1
a515 1
/* Read an attribute value described by an attribute form.  */
d518 1
a518 1
read_attribute_value (attr, form, unit, info_ptr)
d520 1
a520 1
     unsigned form;
a526 1
  bfd_size_type amt;
d528 2
a529 1
  attr->form = (enum dwarf_form) form;
d531 1
a531 1
  switch (form)
a533 1
      /* FIXME: DWARF3 draft says DW_FORM_ref_addr is offset_size.  */
d539 1
a539 2
      amt = sizeof (struct dwarf_block);
      blk = (struct dwarf_block *) bfd_alloc (abfd, amt);
d547 1
a547 2
      amt = sizeof (struct dwarf_block);
      blk = (struct dwarf_block *) bfd_alloc (abfd, amt);
a569 4
    case DW_FORM_strp:
      DW_STRING (attr) = read_indirect_string (unit, info_ptr, &bytes_read);
      info_ptr += bytes_read;
      break;
d571 1
a571 2
      amt = sizeof (struct dwarf_block);
      blk = (struct dwarf_block *) bfd_alloc (abfd, amt);
d579 1
a579 2
      amt = sizeof (struct dwarf_block);
      blk = (struct dwarf_block *) bfd_alloc (abfd, amt);
d622 1
a623 4
      form = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);
      info_ptr += bytes_read;
      info_ptr = read_attribute_value (attr, form, unit, info_ptr);
      break;
d625 2
a626 2
      (*_bfd_error_handler) (_("Dwarf Error: Invalid or unhandled FORM value: %u."),
			     form);
a631 14
/* Read an attribute described by an abbreviated attribute.  */

static char *
read_attribute (attr, abbrev, unit, info_ptr)
     struct attribute   *attr;
     struct attr_abbrev *abbrev;
     struct comp_unit   *unit;
     char               *info_ptr;
{
  attr->name = abbrev->name;
  info_ptr = read_attribute_value (attr, abbrev->form, unit, info_ptr);
  return info_ptr;
}

d663 1
a663 10
  struct line_info* last_line;  /* largest VMA */
  struct line_info* lcl_head;   /* local head; used in 'add_line_info' */
};

struct funcinfo
{
  struct funcinfo *prev_func;
  char* name;
  bfd_vma low;
  bfd_vma high;
a665 5
/* Adds a new entry to the line_info list in the line_info_table, ensuring
   that the list is sorted.  Note that the line_info list is sorted from
   highest to lowest VMA (with possible duplicates); that is,
   line_info->prev_line always accesses an equal or smaller VMA.  */

d675 2
a676 56
  bfd_size_type amt = sizeof (struct line_info);
  struct line_info* info = (struct line_info*) bfd_alloc (table->abfd, amt);

  /* Find the correct location for 'info'.  Normally we will receive
     new line_info data 1) in order and 2) with increasing VMAs.
     However some compilers break the rules (cf. decode_line_info) and
     so we include some heuristics for quickly finding the correct
     location for 'info'. In particular, these heuristics optimize for
     the common case in which the VMA sequence that we receive is a
     list of locally sorted VMAs such as
       p...z a...j  (where a < j < p < z)

     Note: table->lcl_head is used to head an *actual* or *possible*
     sequence within the list (such as a...j) that is not directly
     headed by table->last_line

     Note: we may receive duplicate entries from 'decode_line_info'.  */

  while (1)
    if (!table->last_line
	|| address >= table->last_line->address)
      {
	/* Normal case: add 'info' to the beginning of the list */
	info->prev_line = table->last_line;
	table->last_line = info;

	/* lcl_head: initialize to head a *possible* sequence at the end.  */
	if (!table->lcl_head)
	  table->lcl_head = info;
	break;
      }
    else if (!table->lcl_head->prev_line
	     && table->lcl_head->address > address)
      {
	/* Abnormal but easy: lcl_head is 1) at the *end* of the line
	   list and 2) the head of 'info'.  */
	info->prev_line = NULL;
	table->lcl_head->prev_line = info;
	break;
      }
    else if (table->lcl_head->prev_line
	     && table->lcl_head->address > address
	     && address >= table->lcl_head->prev_line->address)
      {
	/* Abnormal but easy: lcl_head is 1) in the *middle* of the line
	   list and 2) the head of 'info'.  */
	info->prev_line = table->lcl_head->prev_line;
	table->lcl_head->prev_line = info;
	break;
      }
    else
      {
	/* Abnormal and hard: Neither 'last_line' nor 'lcl_head' are valid
	   heads for 'info'.  Reset 'lcl_head' and repeat.  */
	struct line_info* li2 = table->last_line; /* always non-NULL */
	struct line_info* li1 = li2->prev_line;
d678 2
a679 10
	while (li1)
	  {
	    if (li2->address > address && address >= li1->address)
	      break;

	    li2 = li1; /* always non-NULL */
	    li1 = li1->prev_line;
	  }
	table->lcl_head = li2;
      }
a680 1
  /* Set member data of 'info'.  */
d682 1
a685 10

  amt = strlen (filename);
  if (amt)
    {
      info->filename = bfd_alloc (table->abfd, amt + 1);
      if (info->filename)
	strcpy (info->filename, filename);
    }
  else
    info->filename = NULL;
a687 4
/* Extract a fully qualified filename from a line info table.
   The returned string has been malloc'ed and it is the caller's
   responsibility to free it.  */

d699 1
a699 1
      return strdup ("<unknown>");
d703 2
d706 1
a706 1
  if (! IS_ABSOLUTE_PATH (filename))
d711 1
a711 13

      /* Not all tools set DW_AT_comp_dir, so dirname may be unknown.
	 The best we can do is return the filename part.  */
      if (dirname != NULL)
	{
	  unsigned int len = strlen (dirname) + strlen (filename) + 2;
	  char * name;

	  name = bfd_malloc (len);
	  if (name)
	    sprintf (name, "%s/%s", dirname, filename);
	  return name;
	}
a712 2

  return strdup (filename);
d752 1
a752 2
  arange = (struct arange *)
    bfd_zalloc (unit->abfd, (bfd_size_type) sizeof (*arange));
d772 1
a772 1
  unsigned int i, bytes_read, offset_size;
a774 1
  bfd_size_type amt;
d789 1
a789 3
      stash->dwarf_line_buffer
	= bfd_simple_get_relocated_section_contents (abfd, msec, NULL,
						     stash->syms);
d792 8
d802 3
a804 2
  /* It is possible to get a bad value for the line_offset.  Validate
     it here so that we won't get a segfault below.  */
d807 1
a807 1
      (*_bfd_error_handler) (_("Dwarf Error: Line offset (%lu) greater than or equal to .debug_line size (%lu)."),
d813 2
a814 2
  amt = sizeof (struct line_info_table);
  table = (struct line_info_table*) bfd_alloc (abfd, amt);
a825 1
  table->lcl_head = NULL;
a831 14
  offset_size = 4;
  if (lh.total_length == 0xffffffff)
    {
      lh.total_length = read_8_bytes (abfd, line_ptr);
      line_ptr += 8;
      offset_size = 8;
    }
  else if (lh.total_length == 0 && unit->addr_size == 8)
    {
      /* Handle (non-standard) 64-bit DWARF2 formats.  */
      lh.total_length = read_4_bytes (abfd, line_ptr);
      line_ptr += 4;
      offset_size = 8;
    }
d835 2
a836 5
  if (offset_size == 4)
    lh.prologue_length = read_4_bytes (abfd, line_ptr);
  else
    lh.prologue_length = read_8_bytes (abfd, line_ptr);
  line_ptr += offset_size;
d847 2
a848 2
  amt = lh.opcode_base * sizeof (unsigned char);
  lh.standard_opcode_lengths = (unsigned char *) bfd_alloc (abfd, amt);
d865 3
a867 3
	  amt = table->num_dirs + DIR_ALLOC_CHUNK;
	  amt *= sizeof (char *);
	  table->dirs = (char **) bfd_realloc (table->dirs, amt);
d884 4
a887 3
	  amt = table->num_files + FILE_ALLOC_CHUNK;
	  amt *= sizeof (struct fileinfo);
	  table->files = (struct fileinfo *) bfd_realloc (table->files, amt);
d912 1
a912 1
      char * filename = concat_filename (table, 1);
d917 2
a918 8
      int end_sequence = 0;
      /* eraxxon@@alumni.rice.edu: Against the DWARF2 specs, some
	 compilers generate address sequences that are wildly out of
	 order using DW_LNE_set_address (e.g. Intel C++ 6.0 compiler
	 for ia64-Linux).  Thus, to determine the low and high
	 address, we must compare on every DW_LNS_copy, etc.  */
      bfd_vma low_pc  = 0;
      bfd_vma high_pc = 0;
d926 1
a926 16
	  if (op_code >= lh.opcode_base)
	    {
	      /* Special operand.  */
	      adj_opcode = op_code - lh.opcode_base;
	      address += (adj_opcode / lh.line_range)
		* lh.minimum_instruction_length;
	      line += lh.line_base + (adj_opcode % lh.line_range);
	      /* Append row to matrix using current values.  */
	      add_line_info (table, address, filename, line, column, 0);
	      basic_block = 1;
	      if (low_pc == 0 || address < low_pc)
		low_pc = address;
	      if (address > high_pc)
		high_pc = address;
	    }
	  else switch (op_code)
d929 1
a929 2
	      /* Ignore length.  */
	      line_ptr += 1;
a931 1

d938 6
a943 5
		  if (low_pc == 0 || address < low_pc)
		    low_pc = address;
		  if (address > high_pc)
		    high_pc = address;
		  arange_add (unit, low_pc, high_pc);
d954 4
a957 4
		      amt = table->num_files + FILE_ALLOC_CHUNK;
		      amt *= sizeof (struct fileinfo);
		      table->files =
			(struct fileinfo *) bfd_realloc (table->files, amt);
d982 5
a986 4
	      if (low_pc == 0 || address < low_pc)
		low_pc = address;
	      if (address > high_pc)
		high_pc = address;
d1001 2
a1002 2
		/* The file and directory tables are 0
		   based, the references are 1 based.  */
a1004 2
		if (filename)
		  free (filename);
d1026 13
a1038 11
	    default:
	      {
		int i;

		/* Unknown standard opcode, ignore it.  */
		for (i = 0; i < lh.standard_opcode_lengths[op_code]; i++)
		  {
		    (void) read_unsigned_leb128 (abfd, line_ptr, &bytes_read);
		    line_ptr += bytes_read;
		  }
	      }
a1040 3

      if (filename)
	free (filename);
d1046 2
a1047 2
/* If ADDR is within TABLE set the output parameters and return TRUE,
   otherwise return FALSE.  The output parameters, FILENAME_PTR and
d1050 4
a1053 2
static bfd_boolean
lookup_address_in_line_info_table (table, addr, function, filename_ptr,
a1056 1
     struct funcinfo *function;
a1059 1
  /* Note: table->last_line should be a descendingly sorted list. */
d1061 1
a1061 2
  struct line_info* each_line = NULL;
  *filename_ptr = NULL;
d1064 1
a1064 1
    return FALSE;
a1067 5
  /* Check for large addresses */
  if (addr > next_line->address)
    each_line = NULL; /* ensure we skip over the normal case */

  /* Normal case: search the list; save  */
d1070 2
a1071 5
      /* If we have an address match, save this info.  This allows us
	 to return as good as results as possible for strange debugging
	 info.  */
      bfd_boolean addr_match = FALSE;
      if (each_line->address <= addr && addr <= next_line->address)
d1073 3
a1075 18
	  addr_match = TRUE;

	  /* If this line appears to span functions, and addr is in the
	     later function, return the first line of that function instead
	     of the last line of the earlier one.  This check is for GCC
	     2.95, which emits the first line number for a function late.  */
	  if (function != NULL
	      && each_line->address < function->low
	      && next_line->address > function->low)
	    {
	      *filename_ptr = next_line->filename;
	      *linenumber_ptr = next_line->line;
	    }
	  else
	    {
	      *filename_ptr = each_line->filename;
	      *linenumber_ptr = each_line->line;
	    }
a1076 4

      if (addr_match && !each_line->end_sequence)
	return TRUE; /* we have definitely found what we want */

d1081 1
a1081 14
  /* At this point each_line is NULL but next_line is not.  If we found
     a candidate end-of-sequence point in the loop above, we can return
     that (compatibility with a bug in the Intel compiler); otherwise,
     assuming that we found the containing function for this address in
     this compilation unit, return the first line we have a number for
     (compatibility with GCC 2.95).  */
  if (*filename_ptr == NULL && function != NULL)
    {
      *filename_ptr = next_line->filename;
      *linenumber_ptr = next_line->line;
      return TRUE;
    }

  return FALSE;
d1086 9
a1094 1
/* If ADDR is within TABLE, set FUNCTIONNAME_PTR, and return TRUE.  */
d1096 3
a1098 2
static bfd_boolean
lookup_address_in_function_table (table, addr, function_ptr,
a1101 1
     struct funcinfo** function_ptr;
d1113 1
a1113 2
	  *function_ptr = each_func;
	  return TRUE;
d1117 1
a1117 1
  return FALSE;
d1125 1
a1125 1
static bfd_boolean
d1153 1
a1153 1
	  (*_bfd_error_handler) (_("Dwarf Error: Could not find abbrev number %u."),
d1156 1
a1156 1
	  return FALSE;
d1161 1
a1161 2
	  bfd_size_type amt = sizeof (struct funcinfo);
	  func = (struct funcinfo *) bfd_zalloc (abfd, amt);
d1219 1
a1219 1
  return TRUE;
d1226 2
a1227 1
   OFFSET_SIZE is the size of DWARF2 offsets (either 4 or 8 bytes).
d1233 1
a1233 1
parse_comp_unit (abfd, stash, unit_length, offset_size)
d1237 1
a1237 1
     unsigned int offset_size;
d1240 4
a1243 3
  unsigned int version;
  bfd_vma abbrev_offset = 0;
  unsigned int addr_size;
d1245 1
d1249 1
a1251 1
  bfd_size_type amt;
d1255 4
a1258 2
  BFD_ASSERT (offset_size == 4 || offset_size == 8);
  if (offset_size == 4)
d1260 1
a1260 1
  else
d1262 1
a1262 1
  info_ptr += offset_size;
d1268 1
a1268 1
      (*_bfd_error_handler) (_("Dwarf Error: found dwarf version '%u', this reader only handles version 2 information."), version);
d1277 1
a1277 1
			 (unsigned int) sizeof (bfd_vma));
d1284 1
a1284 1
      (*_bfd_error_handler) ("Dwarf Error: found address size '%u', this reader can only handle address sizes '2', '4' and '8'.", addr_size);
d1298 1
a1298 1
      (*_bfd_error_handler) (_("Dwarf Error: Bad abbrev number: %u."),
d1307 1
a1307 1
      (*_bfd_error_handler) (_("Dwarf Error: Could not find abbrev number %u."),
d1313 1
a1313 2
  amt = sizeof (struct comp_unit);
  unit = (struct comp_unit*) bfd_zalloc (abfd, amt);
a1315 1
  unit->offset_size = offset_size;
a1317 1
  unit->stash = stash;
d1369 1
a1369 1
/* Return TRUE if UNIT contains the address given by ADDR.  */
d1371 1
a1371 1
static bfd_boolean
d1379 1
a1379 1
    return FALSE;
d1385 1
a1385 1
	return TRUE;
d1390 1
a1390 1
  return FALSE;
d1398 2
a1399 2
   Return TRUE if UNIT contains ADDR, and no errors were encountered;
   FALSE otherwise.  */
d1401 4
a1404 3
static bfd_boolean
comp_unit_find_nearest_line (unit, addr, filename_ptr, functionname_ptr,
			     linenumber_ptr, stash)
d1412 2
a1413 3
  bfd_boolean line_p;
  bfd_boolean func_p;
  struct funcinfo *function;
d1416 1
a1416 1
    return FALSE;
d1423 1
a1423 1
	  return FALSE;
d1431 1
a1431 1
	  return FALSE;
d1434 1
a1434 2
      if (unit->first_child_die_ptr < unit->end_ptr
	  && ! scan_unit_for_functions (unit))
d1437 1
a1437 1
	  return FALSE;
d1441 3
a1443 5
  function = NULL;
  func_p = lookup_address_in_function_table (unit->function_table, addr,
					     &function, functionname_ptr);
  line_p = lookup_address_in_line_info_table (unit->line_table, addr,
					      function, filename_ptr,
d1445 3
d1451 8
a1458 9
/* Locate a section in a BFD containing debugging info.  The search starts
   from the section after AFTER_SEC, or from the first section in the BFD if
   AFTER_SEC is NULL.  The search works by examining the names of the
   sections.  There are two permissiable names.  The first is .debug_info.
   This is the standard DWARF2 name.  The second is a prefix .gnu.linkonce.wi.
   This is a variation on the .debug_info section which has a checksum
   describing the contents appended onto the name.  This allows the linker to
   identify and discard duplicate debugging sections for different
   compilation units.  */
d1488 1
a1488 1
/* The DWARF2 version of find_nearest line.  Return TRUE if the line
d1494 1
a1494 1
bfd_boolean
d1497 2
a1498 1
			       linenumber_ptr, addr_size, pinfo)
d1501 1
a1501 1
     asymbol **symbols;
d1537 1
a1537 1
      bfd_size_type total_size;
a1538 1
      bfd_size_type amt = sizeof (struct dwarf2_debug);
d1540 2
a1541 1
      stash = (struct dwarf2_debug*) bfd_zalloc (abfd, amt);
d1543 1
a1543 1
	return FALSE;
d1552 1
a1552 1
	 return FALSE;
d1555 1
a1555 1
	 Read them all in and produce one large stash.  We do this in two
d1564 1
a1564 1
	return FALSE;
d1572 2
a1573 2
	  bfd_size_type size;
	  bfd_size_type start;
d1581 1
a1581 2
	  if ((bfd_simple_get_relocated_section_contents
	       (abfd, msec, stash->info_ptr + start, symbols)) == NULL)
d1587 2
a1588 1
      BFD_ASSERT (stash->info_ptr_end == stash->info_ptr + total_size);
d1590 14
a1603 4
      stash->sec = find_debug_info (abfd, NULL);
      stash->sec_info_ptr = stash->info_ptr;
      stash->syms = symbols;
    }
d1608 1
a1608 1
    return FALSE;
d1620 1
d1622 1
a1622 2
      bfd_boolean found;
      unsigned int offset_size = addr_size;
d1624 2
a1625 26
      length = read_4_bytes (abfd, stash->info_ptr);
      /* A 0xffffff length is the DWARF3 way of indicating we use
	 64-bit offsets, instead of 32-bit offsets.  */
      if (length == 0xffffffff)
	{
	  offset_size = 8;
	  length = read_8_bytes (abfd, stash->info_ptr + 4);
	  stash->info_ptr += 12;
	}
      /* A zero length is the IRIX way of indicating 64-bit offsets,
	 mostly because the 64-bit length will generally fit in 32
	 bits, and the endianness helps.  */
      else if (length == 0)
	{
	  offset_size = 8;
	  length = read_4_bytes (abfd, stash->info_ptr + 4);
	  stash->info_ptr += 8;
	}
      /* In the absence of the hints above, we assume addr_size-sized
	 offsets, for backward-compatibility with pre-DWARF3 64-bit
	 platforms.  */
      else if (addr_size == 8)
	{
	  length = read_8_bytes (abfd, stash->info_ptr);
	  stash->info_ptr += 8;
	}
d1627 2
a1628 1
	stash->info_ptr += 4;
d1631 2
a1632 2
	{
	  each = parse_comp_unit (abfd, stash, length, offset_size);
a1634 7
	  if ((bfd_vma) (stash->info_ptr - stash->sec_info_ptr)
	      == stash->sec->_raw_size)
	    {
	      stash->sec = find_debug_info (abfd, stash->sec);
	      stash->sec_info_ptr = stash->info_ptr;
	    }

d1649 4
a1652 4
							filename_ptr,
							functionname_ptr,
							linenumber_ptr,
							stash);
d1662 1
a1662 1
		    return TRUE;
d1668 1
a1668 1
  return FALSE;
@


1.1.1.4
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 2
a3 2
   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
   2004 Free Software Foundation, Inc.
d64 3
a66 2
    bfd_uint64_t val;
    bfd_int64_t sval;
d71 8
d212 45
d264 3
a266 1
read_1_byte (bfd *abfd ATTRIBUTE_UNUSED, char *buf)
d268 1
a268 1
  return bfd_get_8 (abfd, buf);
d272 3
a274 1
read_1_signed_byte (bfd *abfd ATTRIBUTE_UNUSED, char *buf)
d276 1
a276 1
  return bfd_get_signed_8 (abfd, buf);
d280 3
a282 1
read_2_bytes (bfd *abfd, char *buf)
d284 1
a284 1
  return bfd_get_16 (abfd, buf);
d287 12
d300 13
a312 1
read_4_bytes (bfd *abfd, char *buf)
d314 1
a314 1
  return bfd_get_32 (abfd, buf);
d317 6
a322 2
static bfd_uint64_t
read_8_bytes (bfd *abfd, char *buf)
d324 1
a324 1
  return bfd_get_64 (abfd, buf);
d328 4
a331 3
read_n_bytes (bfd *abfd ATTRIBUTE_UNUSED,
	      char *buf,
	      unsigned int size ATTRIBUTE_UNUSED)
d340 4
a343 3
read_string (bfd *abfd ATTRIBUTE_UNUSED,
	     char *buf,
	     unsigned int *bytes_read_ptr)
d357 4
a360 3
read_indirect_string (struct comp_unit* unit,
		      char *buf,
		      unsigned int *bytes_read_ptr)
d362 1
a362 1
  bfd_uint64_t offset;
d386 1
a386 1
      stash->dwarf_str_buffer = bfd_alloc (abfd, msec->_raw_size);
d391 1
a391 1
				      0, msec->_raw_size))
d410 4
a413 3
read_unsigned_leb128 (bfd *abfd ATTRIBUTE_UNUSED,
		      char *buf,
		      unsigned int *bytes_read_ptr)
d426 1
a426 1
      byte = bfd_get_8 (abfd, buf);
d440 4
a443 3
read_signed_leb128 (bfd *abfd ATTRIBUTE_UNUSED,
		    char *buf,
		    unsigned int * bytes_read_ptr)
d456 1
a456 1
      byte = bfd_get_8 (abfd, buf);
d474 4
a477 2
static bfd_uint64_t
read_address (struct comp_unit *unit, char *buf)
d482 1
a482 1
      return bfd_get_64 (unit->abfd, buf);
d484 1
a484 1
      return bfd_get_32 (unit->abfd, buf);
d486 1
a486 1
      return bfd_get_16 (unit->abfd, buf);
d495 3
a497 1
lookup_abbrev (unsigned int number, struct abbrev_info **abbrevs)
d522 4
a525 1
read_abbrevs (bfd *abfd, bfd_uint64_t offset, struct dwarf2_debug *stash)
d563 1
a563 1
  abbrevs = bfd_zalloc (abfd, amt);
d573 1
a573 1
      cur_abbrev = bfd_zalloc (abfd, amt);
d595 2
a596 1
	      cur_abbrev->attrs = bfd_realloc (cur_abbrev->attrs, amt);
d637 5
a641 4
read_attribute_value (struct attribute *attr,
		      unsigned form,
		      struct comp_unit *unit,
		      char *info_ptr)
d655 1
a655 1
      attr->u.val = read_address (unit, info_ptr);
d660 1
a660 1
      blk = bfd_alloc (abfd, amt);
d665 1
a665 1
      attr->u.blk = blk;
d669 1
a669 1
      blk = bfd_alloc (abfd, amt);
d674 1
a674 1
      attr->u.blk = blk;
d677 1
a677 1
      attr->u.val = read_2_bytes (abfd, info_ptr);
d681 1
a681 1
      attr->u.val = read_4_bytes (abfd, info_ptr);
d685 1
a685 1
      attr->u.val = read_8_bytes (abfd, info_ptr);
d689 1
a689 1
      attr->u.str = read_string (abfd, info_ptr, &bytes_read);
d693 1
a693 1
      attr->u.str = read_indirect_string (unit, info_ptr, &bytes_read);
d698 1
a698 1
      blk = bfd_alloc (abfd, amt);
d703 1
a703 1
      attr->u.blk = blk;
d707 1
a707 1
      blk = bfd_alloc (abfd, amt);
d712 1
a712 1
      attr->u.blk = blk;
d715 1
a715 1
      attr->u.val = read_1_byte (abfd, info_ptr);
d719 1
a719 1
      attr->u.val = read_1_byte (abfd, info_ptr);
d723 1
a723 1
      attr->u.sval = read_signed_leb128 (abfd, info_ptr, &bytes_read);
d727 1
a727 1
      attr->u.val = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);
d731 1
a731 1
      attr->u.val = read_1_byte (abfd, info_ptr);
d735 1
a735 1
      attr->u.val = read_2_bytes (abfd, info_ptr);
d739 1
a739 1
      attr->u.val = read_4_bytes (abfd, info_ptr);
d743 1
a743 1
      attr->u.val = read_8_bytes (abfd, info_ptr);
d747 1
a747 1
      attr->u.val = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);
d766 5
a770 4
read_attribute (struct attribute *attr,
		struct attr_abbrev *abbrev,
		struct comp_unit *unit,
		char *info_ptr)
d826 7
a832 6
add_line_info (struct line_info_table *table,
	       bfd_vma address,
	       char *filename,
	       unsigned int line,
	       unsigned int column,
	       int end_sequence)
d835 1
a835 1
  struct line_info* info = bfd_alloc (table->abfd, amt);
d908 2
a909 1
  if (filename && filename[0])
d911 1
a911 1
      info->filename = bfd_alloc (table->abfd, strlen (filename) + 1);
d924 3
a926 1
concat_filename (struct line_info_table *table, unsigned int file)
d963 4
a966 1
arange_add (struct comp_unit *unit, bfd_vma low_pc, bfd_vma high_pc)
d999 2
a1000 1
  arange = bfd_zalloc (unit->abfd, sizeof (*arange));
d1011 3
a1013 1
decode_line_info (struct comp_unit *unit, struct dwarf2_debug *stash)
d1056 1
a1056 1
  table = bfd_alloc (abfd, amt);
d1108 1
a1108 1
  lh.standard_opcode_lengths = bfd_alloc (abfd, amt);
d1127 1
a1127 1
	  table->dirs = bfd_realloc (table->dirs, amt);
d1146 1
a1146 1
	  table->files = bfd_realloc (table->files, amt);
d1171 1
a1171 1
      char * filename = table->num_files ? concat_filename (table, 1) : NULL;
d1237 2
a1238 1
		      table->files = bfd_realloc (table->files, amt);
d1334 7
a1340 5
lookup_address_in_line_info_table (struct line_info_table *table,
				   bfd_vma addr,
				   struct funcinfo *function,
				   const char **filename_ptr,
				   unsigned int *linenumber_ptr)
d1413 6
a1418 4
lookup_address_in_function_table (struct funcinfo *table,
				  bfd_vma addr,
				  struct funcinfo **function_ptr,
				  const char **functionname_ptr)
d1443 2
a1444 1
scan_unit_for_functions (struct comp_unit *unit)
d1479 1
a1479 1
	  func = bfd_zalloc (abfd, amt);
d1496 1
a1496 1
		  name = attr.u.str;
d1500 1
a1500 1
		    func->name = attr.u.str;
d1504 1
a1504 1
		  func->name = attr.u.str;
d1508 1
a1508 1
		  func->low = attr.u.val;
d1512 1
a1512 1
		  func->high = attr.u.val;
d1524 1
a1524 1
		  name = attr.u.str;
d1542 1
a1542 1
   does not include the length field that precedes each compilation
d1550 5
a1554 4
parse_comp_unit (bfd *abfd,
		 struct dwarf2_debug *stash,
		 bfd_vma unit_length,
		 unsigned int offset_size)
d1558 1
a1558 1
  bfd_uint64_t abbrev_offset = 0;
d1627 1
a1627 1
  unit = bfd_zalloc (abfd, amt);
d1645 1
a1645 1
	  unit->line_offset = attr.u.val;
d1649 1
a1649 1
	  unit->name = attr.u.str;
d1653 1
a1653 1
	  unit->arange.low = attr.u.val;
d1657 1
a1657 1
	  unit->arange.high = attr.u.val;
d1662 1
a1662 1
	    char* comp_dir = attr.u.str;
d1667 1
a1667 1
		char *cp = strchr (comp_dir, ':');
d1688 3
a1690 1
comp_unit_contains_address (struct comp_unit *unit, bfd_vma addr)
d1718 8
a1725 6
comp_unit_find_nearest_line (struct comp_unit *unit,
			     bfd_vma addr,
			     const char **filename_ptr,
			     const char **functionname_ptr,
			     unsigned int *linenumber_ptr,
			     struct dwarf2_debug *stash)
d1780 3
a1782 1
find_debug_info (bfd *abfd, asection *after_sec)
d1812 12
a1823 9
_bfd_dwarf2_find_nearest_line (bfd *abfd,
			       asection *section,
			       asymbol **symbols,
			       bfd_vma offset,
			       const char **filename_ptr,
			       const char **functionname_ptr,
			       unsigned int *linenumber_ptr,
			       unsigned int addr_size,
			       void **pinfo)
d1833 1
a1833 1
  struct dwarf2_debug *stash = *pinfo;
d1857 1
a1857 1
      stash = bfd_zalloc (abfd, amt);
d1861 1
a1861 1
      *pinfo = stash;
d1878 1
a1878 1
      stash->info_ptr = bfd_alloc (abfd, total_size);
@


