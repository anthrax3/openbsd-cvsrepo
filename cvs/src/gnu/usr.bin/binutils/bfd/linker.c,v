head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.48
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.44
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.46
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.38
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.42
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.40
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.36
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.34
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.32
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.30
	OPENBSD_5_0:1.8.0.28
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.26
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.24
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.20
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	BINUTILS_2_15:1.1.1.9
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	BINUTILS-2_14:1.1.1.8
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	binutils-2_11_2:1.1.1.7
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	BINUTILS-2_10_1:1.1.1.6
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	new-binutils:1.4.0.14
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2004.11.02.20.45.11;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.17.21.54.23;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.13.17.07.30;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.12.19.11.19;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.03.33.20;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.19.01.23;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.46.11;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.05.00;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.05.00;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.06.06;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.38.22;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.11.19.14.12.50;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.20.06;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.45.49;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2002.05.13.13.26.45;	author fgsch;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.05.17.20.42.18;	author drahn;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.11.02.20.22.31;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* linker.c -- BFD linker routines
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
   2003, 2004 Free Software Foundation, Inc.
   Written by Steve Chamberlain and Ian Lance Taylor, Cygnus Support

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "libbfd.h"
#include "bfdlink.h"
#include "genlink.h"

/*
SECTION
	Linker Functions

@@cindex Linker
	The linker uses three special entry points in the BFD target
	vector.  It is not necessary to write special routines for
	these entry points when creating a new BFD back end, since
	generic versions are provided.  However, writing them can
	speed up linking and make it use significantly less runtime
	memory.

	The first routine creates a hash table used by the other
	routines.  The second routine adds the symbols from an object
	file to the hash table.  The third routine takes all the
	object files and links them together to create the output
	file.  These routines are designed so that the linker proper
	does not need to know anything about the symbols in the object
	files that it is linking.  The linker merely arranges the
	sections as directed by the linker script and lets BFD handle
	the details of symbols and relocs.

	The second routine and third routines are passed a pointer to
	a <<struct bfd_link_info>> structure (defined in
	<<bfdlink.h>>) which holds information relevant to the link,
	including the linker hash table (which was created by the
	first routine) and a set of callback functions to the linker
	proper.

	The generic linker routines are in <<linker.c>>, and use the
	header file <<genlink.h>>.  As of this writing, the only back
	ends which have implemented versions of these routines are
	a.out (in <<aoutx.h>>) and ECOFF (in <<ecoff.c>>).  The a.out
	routines are used as examples throughout this section.

@@menu
@@* Creating a Linker Hash Table::
@@* Adding Symbols to the Hash Table::
@@* Performing the Final Link::
@@end menu

INODE
Creating a Linker Hash Table, Adding Symbols to the Hash Table, Linker Functions, Linker Functions
SUBSECTION
	Creating a linker hash table

@@cindex _bfd_link_hash_table_create in target vector
@@cindex target vector (_bfd_link_hash_table_create)
	The linker routines must create a hash table, which must be
	derived from <<struct bfd_link_hash_table>> described in
	<<bfdlink.c>>.  @@xref{Hash Tables}, for information on how to
	create a derived hash table.  This entry point is called using
	the target vector of the linker output file.

	The <<_bfd_link_hash_table_create>> entry point must allocate
	and initialize an instance of the desired hash table.  If the
	back end does not require any additional information to be
	stored with the entries in the hash table, the entry point may
	simply create a <<struct bfd_link_hash_table>>.  Most likely,
	however, some additional information will be needed.

	For example, with each entry in the hash table the a.out
	linker keeps the index the symbol has in the final output file
	(this index number is used so that when doing a relocatable
	link the symbol index used in the output file can be quickly
	filled in when copying over a reloc).  The a.out linker code
	defines the required structures and functions for a hash table
	derived from <<struct bfd_link_hash_table>>.  The a.out linker
	hash table is created by the function
	<<NAME(aout,link_hash_table_create)>>; it simply allocates
	space for the hash table, initializes it, and returns a
	pointer to it.

	When writing the linker routines for a new back end, you will
	generally not know exactly which fields will be required until
	you have finished.  You should simply create a new hash table
	which defines no additional fields, and then simply add fields
	as they become necessary.

INODE
Adding Symbols to the Hash Table, Performing the Final Link, Creating a Linker Hash Table, Linker Functions
SUBSECTION
	Adding symbols to the hash table

@@cindex _bfd_link_add_symbols in target vector
@@cindex target vector (_bfd_link_add_symbols)
	The linker proper will call the <<_bfd_link_add_symbols>>
	entry point for each object file or archive which is to be
	linked (typically these are the files named on the command
	line, but some may also come from the linker script).  The
	entry point is responsible for examining the file.  For an
	object file, BFD must add any relevant symbol information to
	the hash table.  For an archive, BFD must determine which
	elements of the archive should be used and adding them to the
	link.

	The a.out version of this entry point is
	<<NAME(aout,link_add_symbols)>>.

@@menu
@@* Differing file formats::
@@* Adding symbols from an object file::
@@* Adding symbols from an archive::
@@end menu

INODE
Differing file formats, Adding symbols from an object file, Adding Symbols to the Hash Table, Adding Symbols to the Hash Table
SUBSUBSECTION
	Differing file formats

	Normally all the files involved in a link will be of the same
	format, but it is also possible to link together different
	format object files, and the back end must support that.  The
	<<_bfd_link_add_symbols>> entry point is called via the target
	vector of the file to be added.  This has an important
	consequence: the function may not assume that the hash table
	is the type created by the corresponding
	<<_bfd_link_hash_table_create>> vector.  All the
	<<_bfd_link_add_symbols>> function can assume about the hash
	table is that it is derived from <<struct
	bfd_link_hash_table>>.

	Sometimes the <<_bfd_link_add_symbols>> function must store
	some information in the hash table entry to be used by the
	<<_bfd_final_link>> function.  In such a case the <<creator>>
	field of the hash table must be checked to make sure that the
	hash table was created by an object file of the same format.

	The <<_bfd_final_link>> routine must be prepared to handle a
	hash entry without any extra information added by the
	<<_bfd_link_add_symbols>> function.  A hash entry without
	extra information will also occur when the linker script
	directs the linker to create a symbol.  Note that, regardless
	of how a hash table entry is added, all the fields will be
	initialized to some sort of null value by the hash table entry
	initialization function.

	See <<ecoff_link_add_externals>> for an example of how to
	check the <<creator>> field before saving information (in this
	case, the ECOFF external symbol debugging information) in a
	hash table entry.

INODE
Adding symbols from an object file, Adding symbols from an archive, Differing file formats, Adding Symbols to the Hash Table
SUBSUBSECTION
	Adding symbols from an object file

	When the <<_bfd_link_add_symbols>> routine is passed an object
	file, it must add all externally visible symbols in that
	object file to the hash table.  The actual work of adding the
	symbol to the hash table is normally handled by the function
	<<_bfd_generic_link_add_one_symbol>>.  The
	<<_bfd_link_add_symbols>> routine is responsible for reading
	all the symbols from the object file and passing the correct
	information to <<_bfd_generic_link_add_one_symbol>>.

	The <<_bfd_link_add_symbols>> routine should not use
	<<bfd_canonicalize_symtab>> to read the symbols.  The point of
	providing this routine is to avoid the overhead of converting
	the symbols into generic <<asymbol>> structures.

@@findex _bfd_generic_link_add_one_symbol
	<<_bfd_generic_link_add_one_symbol>> handles the details of
	combining common symbols, warning about multiple definitions,
	and so forth.  It takes arguments which describe the symbol to
	add, notably symbol flags, a section, and an offset.  The
	symbol flags include such things as <<BSF_WEAK>> or
	<<BSF_INDIRECT>>.  The section is a section in the object
	file, or something like <<bfd_und_section_ptr>> for an undefined
	symbol or <<bfd_com_section_ptr>> for a common symbol.

	If the <<_bfd_final_link>> routine is also going to need to
	read the symbol information, the <<_bfd_link_add_symbols>>
	routine should save it somewhere attached to the object file
	BFD.  However, the information should only be saved if the
	<<keep_memory>> field of the <<info>> argument is TRUE, so
	that the <<-no-keep-memory>> linker switch is effective.

	The a.out function which adds symbols from an object file is
	<<aout_link_add_object_symbols>>, and most of the interesting
	work is in <<aout_link_add_symbols>>.  The latter saves
	pointers to the hash tables entries created by
	<<_bfd_generic_link_add_one_symbol>> indexed by symbol number,
	so that the <<_bfd_final_link>> routine does not have to call
	the hash table lookup routine to locate the entry.

INODE
Adding symbols from an archive, , Adding symbols from an object file, Adding Symbols to the Hash Table
SUBSUBSECTION
	Adding symbols from an archive

	When the <<_bfd_link_add_symbols>> routine is passed an
	archive, it must look through the symbols defined by the
	archive and decide which elements of the archive should be
	included in the link.  For each such element it must call the
	<<add_archive_element>> linker callback, and it must add the
	symbols from the object file to the linker hash table.

@@findex _bfd_generic_link_add_archive_symbols
	In most cases the work of looking through the symbols in the
	archive should be done by the
	<<_bfd_generic_link_add_archive_symbols>> function.  This
	function builds a hash table from the archive symbol table and
	looks through the list of undefined symbols to see which
	elements should be included.
	<<_bfd_generic_link_add_archive_symbols>> is passed a function
	to call to make the final decision about adding an archive
	element to the link and to do the actual work of adding the
	symbols to the linker hash table.

	The function passed to
	<<_bfd_generic_link_add_archive_symbols>> must read the
	symbols of the archive element and decide whether the archive
	element should be included in the link.  If the element is to
	be included, the <<add_archive_element>> linker callback
	routine must be called with the element as an argument, and
	the elements symbols must be added to the linker hash table
	just as though the element had itself been passed to the
	<<_bfd_link_add_symbols>> function.

	When the a.out <<_bfd_link_add_symbols>> function receives an
	archive, it calls <<_bfd_generic_link_add_archive_symbols>>
	passing <<aout_link_check_archive_element>> as the function
	argument. <<aout_link_check_archive_element>> calls
	<<aout_link_check_ar_symbols>>.  If the latter decides to add
	the element (an element is only added if it provides a real,
	non-common, definition for a previously undefined or common
	symbol) it calls the <<add_archive_element>> callback and then
	<<aout_link_check_archive_element>> calls
	<<aout_link_add_symbols>> to actually add the symbols to the
	linker hash table.

	The ECOFF back end is unusual in that it does not normally
	call <<_bfd_generic_link_add_archive_symbols>>, because ECOFF
	archives already contain a hash table of symbols.  The ECOFF
	back end searches the archive itself to avoid the overhead of
	creating a new hash table.

INODE
Performing the Final Link, , Adding Symbols to the Hash Table, Linker Functions
SUBSECTION
	Performing the final link

@@cindex _bfd_link_final_link in target vector
@@cindex target vector (_bfd_final_link)
	When all the input files have been processed, the linker calls
	the <<_bfd_final_link>> entry point of the output BFD.  This
	routine is responsible for producing the final output file,
	which has several aspects.  It must relocate the contents of
	the input sections and copy the data into the output sections.
	It must build an output symbol table including any local
	symbols from the input files and the global symbols from the
	hash table.  When producing relocatable output, it must
	modify the input relocs and write them into the output file.
	There may also be object format dependent work to be done.

	The linker will also call the <<write_object_contents>> entry
	point when the BFD is closed.  The two entry points must work
	together in order to produce the correct output file.

	The details of how this works are inevitably dependent upon
	the specific object file format.  The a.out
	<<_bfd_final_link>> routine is <<NAME(aout,final_link)>>.

@@menu
@@* Information provided by the linker::
@@* Relocating the section contents::
@@* Writing the symbol table::
@@end menu

INODE
Information provided by the linker, Relocating the section contents, Performing the Final Link, Performing the Final Link
SUBSUBSECTION
	Information provided by the linker

	Before the linker calls the <<_bfd_final_link>> entry point,
	it sets up some data structures for the function to use.

	The <<input_bfds>> field of the <<bfd_link_info>> structure
	will point to a list of all the input files included in the
	link.  These files are linked through the <<link_next>> field
	of the <<bfd>> structure.

	Each section in the output file will have a list of
	<<link_order>> structures attached to the <<link_order_head>>
	field (the <<link_order>> structure is defined in
	<<bfdlink.h>>).  These structures describe how to create the
	contents of the output section in terms of the contents of
	various input sections, fill constants, and, eventually, other
	types of information.  They also describe relocs that must be
	created by the BFD backend, but do not correspond to any input
	file; this is used to support -Ur, which builds constructors
	while generating a relocatable object file.

INODE
Relocating the section contents, Writing the symbol table, Information provided by the linker, Performing the Final Link
SUBSUBSECTION
	Relocating the section contents

	The <<_bfd_final_link>> function should look through the
	<<link_order>> structures attached to each section of the
	output file.  Each <<link_order>> structure should either be
	handled specially, or it should be passed to the function
	<<_bfd_default_link_order>> which will do the right thing
	(<<_bfd_default_link_order>> is defined in <<linker.c>>).

	For efficiency, a <<link_order>> of type
	<<bfd_indirect_link_order>> whose associated section belongs
	to a BFD of the same format as the output BFD must be handled
	specially.  This type of <<link_order>> describes part of an
	output section in terms of a section belonging to one of the
	input files.  The <<_bfd_final_link>> function should read the
	contents of the section and any associated relocs, apply the
	relocs to the section contents, and write out the modified
	section contents.  If performing a relocatable link, the
	relocs themselves must also be modified and written out.

@@findex _bfd_relocate_contents
@@findex _bfd_final_link_relocate
	The functions <<_bfd_relocate_contents>> and
	<<_bfd_final_link_relocate>> provide some general support for
	performing the actual relocations, notably overflow checking.
	Their arguments include information about the symbol the
	relocation is against and a <<reloc_howto_type>> argument
	which describes the relocation to perform.  These functions
	are defined in <<reloc.c>>.

	The a.out function which handles reading, relocating, and
	writing section contents is <<aout_link_input_section>>.  The
	actual relocation is done in <<aout_link_input_section_std>>
	and <<aout_link_input_section_ext>>.

INODE
Writing the symbol table, , Relocating the section contents, Performing the Final Link
SUBSUBSECTION
	Writing the symbol table

	The <<_bfd_final_link>> function must gather all the symbols
	in the input files and write them out.  It must also write out
	all the symbols in the global hash table.  This must be
	controlled by the <<strip>> and <<discard>> fields of the
	<<bfd_link_info>> structure.

	The local symbols of the input files will not have been
	entered into the linker hash table.  The <<_bfd_final_link>>
	routine must consider each input file and include the symbols
	in the output file.  It may be convenient to do this when
	looking through the <<link_order>> structures, or it may be
	done by stepping through the <<input_bfds>> list.

	The <<_bfd_final_link>> routine must also traverse the global
	hash table to gather all the externally visible symbols.  It
	is possible that most of the externally visible symbols may be
	written out when considering the symbols of each input file,
	but it is still necessary to traverse the hash table since the
	linker script may have defined some symbols that are not in
	any of the input files.

	The <<strip>> field of the <<bfd_link_info>> structure
	controls which symbols are written out.  The possible values
	are listed in <<bfdlink.h>>.  If the value is <<strip_some>>,
	then the <<keep_hash>> field of the <<bfd_link_info>>
	structure is a hash table of symbols to keep; each symbol
	should be looked up in this hash table, and only symbols which
	are present should be included in the output file.

	If the <<strip>> field of the <<bfd_link_info>> structure
	permits local symbols to be written out, the <<discard>> field
	is used to further controls which local symbols are included
	in the output file.  If the value is <<discard_l>>, then all
	local symbols which begin with a certain prefix are discarded;
	this is controlled by the <<bfd_is_local_label_name>> entry point.

	The a.out backend handles symbols by calling
	<<aout_link_write_symbols>> on each input BFD and then
	traversing the global hash table with the function
	<<aout_link_write_other_symbol>>.  It builds a string table
	while writing out the symbols, which is written to the output
	file at the end of <<NAME(aout,final_link)>>.
*/

static bfd_boolean generic_link_add_object_symbols
  (bfd *, struct bfd_link_info *, bfd_boolean collect);
static bfd_boolean generic_link_add_symbols
  (bfd *, struct bfd_link_info *, bfd_boolean);
static bfd_boolean generic_link_check_archive_element_no_collect
  (bfd *, struct bfd_link_info *, bfd_boolean *);
static bfd_boolean generic_link_check_archive_element_collect
  (bfd *, struct bfd_link_info *, bfd_boolean *);
static bfd_boolean generic_link_check_archive_element
  (bfd *, struct bfd_link_info *, bfd_boolean *, bfd_boolean);
static bfd_boolean generic_link_add_symbol_list
  (bfd *, struct bfd_link_info *, bfd_size_type count, asymbol **,
   bfd_boolean);
static bfd_boolean generic_add_output_symbol
  (bfd *, size_t *psymalloc, asymbol *);
static bfd_boolean default_data_link_order
  (bfd *, struct bfd_link_info *, asection *, struct bfd_link_order *);
static bfd_boolean default_indirect_link_order
  (bfd *, struct bfd_link_info *, asection *, struct bfd_link_order *,
   bfd_boolean);

/* The link hash table structure is defined in bfdlink.h.  It provides
   a base hash table which the backend specific hash tables are built
   upon.  */

/* Routine to create an entry in the link hash table.  */

struct bfd_hash_entry *
_bfd_link_hash_newfunc (struct bfd_hash_entry *entry,
			struct bfd_hash_table *table,
			const char *string)
{
  /* Allocate the structure if it has not already been allocated by a
     subclass.  */
  if (entry == NULL)
    {
      entry = bfd_hash_allocate (table, sizeof (struct bfd_link_hash_entry));
      if (entry == NULL)
	return entry;
    }

  /* Call the allocation method of the superclass.  */
  entry = bfd_hash_newfunc (entry, table, string);
  if (entry)
    {
      struct bfd_link_hash_entry *h = (struct bfd_link_hash_entry *) entry;

      /* Initialize the local fields.  */
      h->type = bfd_link_hash_new;
      h->und_next = NULL;
    }

  return entry;
}

/* Initialize a link hash table.  The BFD argument is the one
   responsible for creating this table.  */

bfd_boolean
_bfd_link_hash_table_init
  (struct bfd_link_hash_table *table,
   bfd *abfd,
   struct bfd_hash_entry *(*newfunc) (struct bfd_hash_entry *,
				      struct bfd_hash_table *,
				      const char *))
{
  table->creator = abfd->xvec;
  table->undefs = NULL;
  table->undefs_tail = NULL;
  table->type = bfd_link_generic_hash_table;

  return bfd_hash_table_init (&table->table, newfunc);
}

/* Look up a symbol in a link hash table.  If follow is TRUE, we
   follow bfd_link_hash_indirect and bfd_link_hash_warning links to
   the real symbol.  */

struct bfd_link_hash_entry *
bfd_link_hash_lookup (struct bfd_link_hash_table *table,
		      const char *string,
		      bfd_boolean create,
		      bfd_boolean copy,
		      bfd_boolean follow)
{
  struct bfd_link_hash_entry *ret;

  ret = ((struct bfd_link_hash_entry *)
	 bfd_hash_lookup (&table->table, string, create, copy));

  if (follow && ret != NULL)
    {
      while (ret->type == bfd_link_hash_indirect
	     || ret->type == bfd_link_hash_warning)
	ret = ret->u.i.link;
    }

  return ret;
}

/* Look up a symbol in the main linker hash table if the symbol might
   be wrapped.  This should only be used for references to an
   undefined symbol, not for definitions of a symbol.  */

struct bfd_link_hash_entry *
bfd_wrapped_link_hash_lookup (bfd *abfd,
			      struct bfd_link_info *info,
			      const char *string,
			      bfd_boolean create,
			      bfd_boolean copy,
			      bfd_boolean follow)
{
  bfd_size_type amt;

  if (info->wrap_hash != NULL)
    {
      const char *l;
      char prefix = '\0';

      l = string;
      if (*l == bfd_get_symbol_leading_char (abfd) || *l == info->wrap_char)
	{
	  prefix = *l;
	  ++l;
	}

#undef WRAP
#define WRAP "__wrap_"

      if (bfd_hash_lookup (info->wrap_hash, l, FALSE, FALSE) != NULL)
	{
	  char *n;
	  struct bfd_link_hash_entry *h;

	  /* This symbol is being wrapped.  We want to replace all
             references to SYM with references to __wrap_SYM.  */

	  amt = strlen (l) + sizeof WRAP + 1;
	  n = bfd_malloc (amt);
	  if (n == NULL)
	    return NULL;

	  n[0] = prefix;
	  n[1] = '\0';
	  strcat (n, WRAP);
	  strcat (n, l);
	  h = bfd_link_hash_lookup (info->hash, n, create, TRUE, follow);
	  free (n);
	  return h;
	}

#undef WRAP

#undef REAL
#define REAL "__real_"

      if (*l == '_'
	  && strncmp (l, REAL, sizeof REAL - 1) == 0
	  && bfd_hash_lookup (info->wrap_hash, l + sizeof REAL - 1,
			      FALSE, FALSE) != NULL)
	{
	  char *n;
	  struct bfd_link_hash_entry *h;

	  /* This is a reference to __real_SYM, where SYM is being
             wrapped.  We want to replace all references to __real_SYM
             with references to SYM.  */

	  amt = strlen (l + sizeof REAL - 1) + 2;
	  n = bfd_malloc (amt);
	  if (n == NULL)
	    return NULL;

	  n[0] = prefix;
	  n[1] = '\0';
	  strcat (n, l + sizeof REAL - 1);
	  h = bfd_link_hash_lookup (info->hash, n, create, TRUE, follow);
	  free (n);
	  return h;
	}

#undef REAL
    }

  return bfd_link_hash_lookup (info->hash, string, create, copy, follow);
}

/* Traverse a generic link hash table.  The only reason this is not a
   macro is to do better type checking.  This code presumes that an
   argument passed as a struct bfd_hash_entry * may be caught as a
   struct bfd_link_hash_entry * with no explicit cast required on the
   call.  */

void
bfd_link_hash_traverse
  (struct bfd_link_hash_table *table,
   bfd_boolean (*func) (struct bfd_link_hash_entry *, void *),
   void *info)
{
  bfd_hash_traverse (&table->table,
		     (bfd_boolean (*) (struct bfd_hash_entry *, void *)) func,
		     info);
}

/* Add a symbol to the linker hash table undefs list.  */

void
bfd_link_add_undef (struct bfd_link_hash_table *table,
		    struct bfd_link_hash_entry *h)
{
  BFD_ASSERT (h->und_next == NULL);
  if (table->undefs_tail != NULL)
    table->undefs_tail->und_next = h;
  if (table->undefs == NULL)
    table->undefs = h;
  table->undefs_tail = h;
}

/* Routine to create an entry in a generic link hash table.  */

struct bfd_hash_entry *
_bfd_generic_link_hash_newfunc (struct bfd_hash_entry *entry,
				struct bfd_hash_table *table,
				const char *string)
{
  /* Allocate the structure if it has not already been allocated by a
     subclass.  */
  if (entry == NULL)
    {
      entry =
	bfd_hash_allocate (table, sizeof (struct generic_link_hash_entry));
      if (entry == NULL)
	return entry;
    }

  /* Call the allocation method of the superclass.  */
  entry = _bfd_link_hash_newfunc (entry, table, string);
  if (entry)
    {
      struct generic_link_hash_entry *ret;

      /* Set local fields.  */
      ret = (struct generic_link_hash_entry *) entry;
      ret->written = FALSE;
      ret->sym = NULL;
    }

  return entry;
}

/* Create a generic link hash table.  */

struct bfd_link_hash_table *
_bfd_generic_link_hash_table_create (bfd *abfd)
{
  struct generic_link_hash_table *ret;
  bfd_size_type amt = sizeof (struct generic_link_hash_table);

  ret = bfd_malloc (amt);
  if (ret == NULL)
    return NULL;
  if (! _bfd_link_hash_table_init (&ret->root, abfd,
				   _bfd_generic_link_hash_newfunc))
    {
      free (ret);
      return NULL;
    }
  return &ret->root;
}

void
_bfd_generic_link_hash_table_free (struct bfd_link_hash_table *hash)
{
  struct generic_link_hash_table *ret
    = (struct generic_link_hash_table *) hash;

  bfd_hash_table_free (&ret->root.table);
  free (ret);
}

/* Grab the symbols for an object file when doing a generic link.  We
   store the symbols in the outsymbols field.  We need to keep them
   around for the entire link to ensure that we only read them once.
   If we read them multiple times, we might wind up with relocs and
   the hash table pointing to different instances of the symbol
   structure.  */

static bfd_boolean
generic_link_read_symbols (bfd *abfd)
{
  if (bfd_get_outsymbols (abfd) == NULL)
    {
      long symsize;
      long symcount;

      symsize = bfd_get_symtab_upper_bound (abfd);
      if (symsize < 0)
	return FALSE;
      bfd_get_outsymbols (abfd) = bfd_alloc (abfd, symsize);
      if (bfd_get_outsymbols (abfd) == NULL && symsize != 0)
	return FALSE;
      symcount = bfd_canonicalize_symtab (abfd, bfd_get_outsymbols (abfd));
      if (symcount < 0)
	return FALSE;
      bfd_get_symcount (abfd) = symcount;
    }

  return TRUE;
}

/* Generic function to add symbols to from an object file to the
   global hash table.  This version does not automatically collect
   constructors by name.  */

bfd_boolean
_bfd_generic_link_add_symbols (bfd *abfd, struct bfd_link_info *info)
{
  return generic_link_add_symbols (abfd, info, FALSE);
}

/* Generic function to add symbols from an object file to the global
   hash table.  This version automatically collects constructors by
   name, as the collect2 program does.  It should be used for any
   target which does not provide some other mechanism for setting up
   constructors and destructors; these are approximately those targets
   for which gcc uses collect2 and do not support stabs.  */

bfd_boolean
_bfd_generic_link_add_symbols_collect (bfd *abfd, struct bfd_link_info *info)
{
  return generic_link_add_symbols (abfd, info, TRUE);
}

/* Indicate that we are only retrieving symbol values from this
   section.  We want the symbols to act as though the values in the
   file are absolute.  */

void
_bfd_generic_link_just_syms (asection *sec,
			     struct bfd_link_info *info ATTRIBUTE_UNUSED)
{
  sec->output_section = bfd_abs_section_ptr;
  sec->output_offset = sec->vma;
}

/* Add symbols from an object file to the global hash table.  */

static bfd_boolean
generic_link_add_symbols (bfd *abfd,
			  struct bfd_link_info *info,
			  bfd_boolean collect)
{
  bfd_boolean ret;

  switch (bfd_get_format (abfd))
    {
    case bfd_object:
      ret = generic_link_add_object_symbols (abfd, info, collect);
      break;
    case bfd_archive:
      ret = (_bfd_generic_link_add_archive_symbols
	     (abfd, info,
	      (collect
	       ? generic_link_check_archive_element_collect
	       : generic_link_check_archive_element_no_collect)));
      break;
    default:
      bfd_set_error (bfd_error_wrong_format);
      ret = FALSE;
    }

  return ret;
}

/* Add symbols from an object file to the global hash table.  */

static bfd_boolean
generic_link_add_object_symbols (bfd *abfd,
				 struct bfd_link_info *info,
				 bfd_boolean collect)
{
  bfd_size_type symcount;
  struct bfd_symbol **outsyms;

  if (! generic_link_read_symbols (abfd))
    return FALSE;
  symcount = _bfd_generic_link_get_symcount (abfd);
  outsyms = _bfd_generic_link_get_symbols (abfd);
  return generic_link_add_symbol_list (abfd, info, symcount, outsyms, collect);
}

/* We build a hash table of all symbols defined in an archive.  */

/* An archive symbol may be defined by multiple archive elements.
   This linked list is used to hold the elements.  */

struct archive_list
{
  struct archive_list *next;
  unsigned int indx;
};

/* An entry in an archive hash table.  */

struct archive_hash_entry
{
  struct bfd_hash_entry root;
  /* Where the symbol is defined.  */
  struct archive_list *defs;
};

/* An archive hash table itself.  */

struct archive_hash_table
{
  struct bfd_hash_table table;
};

/* Create a new entry for an archive hash table.  */

static struct bfd_hash_entry *
archive_hash_newfunc (struct bfd_hash_entry *entry,
		      struct bfd_hash_table *table,
		      const char *string)
{
  struct archive_hash_entry *ret = (struct archive_hash_entry *) entry;

  /* Allocate the structure if it has not already been allocated by a
     subclass.  */
  if (ret == NULL)
    ret = bfd_hash_allocate (table, sizeof (struct archive_hash_entry));
  if (ret == NULL)
    return NULL;

  /* Call the allocation method of the superclass.  */
  ret = ((struct archive_hash_entry *)
	 bfd_hash_newfunc ((struct bfd_hash_entry *) ret, table, string));

  if (ret)
    {
      /* Initialize the local fields.  */
      ret->defs = NULL;
    }

  return &ret->root;
}

/* Initialize an archive hash table.  */

static bfd_boolean
archive_hash_table_init
  (struct archive_hash_table *table,
   struct bfd_hash_entry *(*newfunc) (struct bfd_hash_entry *,
				      struct bfd_hash_table *,
				      const char *))
{
  return bfd_hash_table_init (&table->table, newfunc);
}

/* Look up an entry in an archive hash table.  */

#define archive_hash_lookup(t, string, create, copy) \
  ((struct archive_hash_entry *) \
   bfd_hash_lookup (&(t)->table, (string), (create), (copy)))

/* Allocate space in an archive hash table.  */

#define archive_hash_allocate(t, size) bfd_hash_allocate (&(t)->table, (size))

/* Free an archive hash table.  */

#define archive_hash_table_free(t) bfd_hash_table_free (&(t)->table)

/* Generic function to add symbols from an archive file to the global
   hash file.  This function presumes that the archive symbol table
   has already been read in (this is normally done by the
   bfd_check_format entry point).  It looks through the undefined and
   common symbols and searches the archive symbol table for them.  If
   it finds an entry, it includes the associated object file in the
   link.

   The old linker looked through the archive symbol table for
   undefined symbols.  We do it the other way around, looking through
   undefined symbols for symbols defined in the archive.  The
   advantage of the newer scheme is that we only have to look through
   the list of undefined symbols once, whereas the old method had to
   re-search the symbol table each time a new object file was added.

   The CHECKFN argument is used to see if an object file should be
   included.  CHECKFN should set *PNEEDED to TRUE if the object file
   should be included, and must also call the bfd_link_info
   add_archive_element callback function and handle adding the symbols
   to the global hash table.  CHECKFN should only return FALSE if some
   sort of error occurs.

   For some formats, such as a.out, it is possible to look through an
   object file but not actually include it in the link.  The
   archive_pass field in a BFD is used to avoid checking the symbols
   of an object files too many times.  When an object is included in
   the link, archive_pass is set to -1.  If an object is scanned but
   not included, archive_pass is set to the pass number.  The pass
   number is incremented each time a new object file is included.  The
   pass number is used because when a new object file is included it
   may create new undefined symbols which cause a previously examined
   object file to be included.  */

bfd_boolean
_bfd_generic_link_add_archive_symbols
  (bfd *abfd,
   struct bfd_link_info *info,
   bfd_boolean (*checkfn) (bfd *, struct bfd_link_info *, bfd_boolean *))
{
  carsym *arsyms;
  carsym *arsym_end;
  register carsym *arsym;
  int pass;
  struct archive_hash_table arsym_hash;
  unsigned int indx;
  struct bfd_link_hash_entry **pundef;

  if (! bfd_has_map (abfd))
    {
      /* An empty archive is a special case.  */
      if (bfd_openr_next_archived_file (abfd, NULL) == NULL)
	return TRUE;
      bfd_set_error (bfd_error_no_armap);
      return FALSE;
    }

  arsyms = bfd_ardata (abfd)->symdefs;
  arsym_end = arsyms + bfd_ardata (abfd)->symdef_count;

  /* In order to quickly determine whether an symbol is defined in
     this archive, we build a hash table of the symbols.  */
  if (! archive_hash_table_init (&arsym_hash, archive_hash_newfunc))
    return FALSE;
  for (arsym = arsyms, indx = 0; arsym < arsym_end; arsym++, indx++)
    {
      struct archive_hash_entry *arh;
      struct archive_list *l, **pp;

      arh = archive_hash_lookup (&arsym_hash, arsym->name, TRUE, FALSE);
      if (arh == NULL)
	goto error_return;
      l = ((struct archive_list *)
	   archive_hash_allocate (&arsym_hash, sizeof (struct archive_list)));
      if (l == NULL)
	goto error_return;
      l->indx = indx;
      for (pp = &arh->defs; *pp != NULL; pp = &(*pp)->next)
	;
      *pp = l;
      l->next = NULL;
    }

  /* The archive_pass field in the archive itself is used to
     initialize PASS, sine we may search the same archive multiple
     times.  */
  pass = abfd->archive_pass + 1;

  /* New undefined symbols are added to the end of the list, so we
     only need to look through it once.  */
  pundef = &info->hash->undefs;
  while (*pundef != NULL)
    {
      struct bfd_link_hash_entry *h;
      struct archive_hash_entry *arh;
      struct archive_list *l;

      h = *pundef;

      /* When a symbol is defined, it is not necessarily removed from
	 the list.  */
      if (h->type != bfd_link_hash_undefined
	  && h->type != bfd_link_hash_common)
	{
	  /* Remove this entry from the list, for general cleanliness
	     and because we are going to look through the list again
	     if we search any more libraries.  We can't remove the
	     entry if it is the tail, because that would lose any
	     entries we add to the list later on (it would also cause
	     us to lose track of whether the symbol has been
	     referenced).  */
	  if (*pundef != info->hash->undefs_tail)
	    *pundef = (*pundef)->und_next;
	  else
	    pundef = &(*pundef)->und_next;
	  continue;
	}

      /* Look for this symbol in the archive symbol map.  */
      arh = archive_hash_lookup (&arsym_hash, h->root.string, FALSE, FALSE);
      if (arh == NULL)
	{
	  /* If we haven't found the exact symbol we're looking for,
	     let's look for its import thunk */
	  if (info->pei386_auto_import)
	    {
	      bfd_size_type amt = strlen (h->root.string) + 10;
	      char *buf = bfd_malloc (amt);
	      if (buf == NULL)
		return FALSE;

	      sprintf (buf, "__imp_%s", h->root.string);
	      arh = archive_hash_lookup (&arsym_hash, buf, FALSE, FALSE);
	      free(buf);
	    }
	  if (arh == NULL)
	    {
	      pundef = &(*pundef)->und_next;
	      continue;
	    }
	}
      /* Look at all the objects which define this symbol.  */
      for (l = arh->defs; l != NULL; l = l->next)
	{
	  bfd *element;
	  bfd_boolean needed;

	  /* If the symbol has gotten defined along the way, quit.  */
	  if (h->type != bfd_link_hash_undefined
	      && h->type != bfd_link_hash_common)
	    break;

	  element = bfd_get_elt_at_index (abfd, l->indx);
	  if (element == NULL)
	    goto error_return;

	  /* If we've already included this element, or if we've
	     already checked it on this pass, continue.  */
	  if (element->archive_pass == -1
	      || element->archive_pass == pass)
	    continue;

	  /* If we can't figure this element out, just ignore it.  */
	  if (! bfd_check_format (element, bfd_object))
	    {
	      element->archive_pass = -1;
	      continue;
	    }

	  /* CHECKFN will see if this element should be included, and
	     go ahead and include it if appropriate.  */
	  if (! (*checkfn) (element, info, &needed))
	    goto error_return;

	  if (! needed)
	    element->archive_pass = pass;
	  else
	    {
	      element->archive_pass = -1;

	      /* Increment the pass count to show that we may need to
		 recheck object files which were already checked.  */
	      ++pass;
	    }
	}

      pundef = &(*pundef)->und_next;
    }

  archive_hash_table_free (&arsym_hash);

  /* Save PASS in case we are called again.  */
  abfd->archive_pass = pass;

  return TRUE;

 error_return:
  archive_hash_table_free (&arsym_hash);
  return FALSE;
}

/* See if we should include an archive element.  This version is used
   when we do not want to automatically collect constructors based on
   the symbol name, presumably because we have some other mechanism
   for finding them.  */

static bfd_boolean
generic_link_check_archive_element_no_collect (
					       bfd *abfd,
					       struct bfd_link_info *info,
					       bfd_boolean *pneeded)
{
  return generic_link_check_archive_element (abfd, info, pneeded, FALSE);
}

/* See if we should include an archive element.  This version is used
   when we want to automatically collect constructors based on the
   symbol name, as collect2 does.  */

static bfd_boolean
generic_link_check_archive_element_collect (bfd *abfd,
					    struct bfd_link_info *info,
					    bfd_boolean *pneeded)
{
  return generic_link_check_archive_element (abfd, info, pneeded, TRUE);
}

/* See if we should include an archive element.  Optionally collect
   constructors.  */

static bfd_boolean
generic_link_check_archive_element (bfd *abfd,
				    struct bfd_link_info *info,
				    bfd_boolean *pneeded,
				    bfd_boolean collect)
{
  asymbol **pp, **ppend;

  *pneeded = FALSE;

  if (! generic_link_read_symbols (abfd))
    return FALSE;

  pp = _bfd_generic_link_get_symbols (abfd);
  ppend = pp + _bfd_generic_link_get_symcount (abfd);
  for (; pp < ppend; pp++)
    {
      asymbol *p;
      struct bfd_link_hash_entry *h;

      p = *pp;

      /* We are only interested in globally visible symbols.  */
      if (! bfd_is_com_section (p->section)
	  && (p->flags & (BSF_GLOBAL | BSF_INDIRECT | BSF_WEAK)) == 0)
	continue;

      /* We are only interested if we know something about this
	 symbol, and it is undefined or common.  An undefined weak
	 symbol (type bfd_link_hash_undefweak) is not considered to be
	 a reference when pulling files out of an archive.  See the
	 SVR4 ABI, p. 4-27.  */
      h = bfd_link_hash_lookup (info->hash, bfd_asymbol_name (p), FALSE,
				FALSE, TRUE);
      if (h == NULL
	  || (h->type != bfd_link_hash_undefined
	      && h->type != bfd_link_hash_common))
	continue;

      /* P is a symbol we are looking for.  */

      if (! bfd_is_com_section (p->section))
	{
	  bfd_size_type symcount;
	  asymbol **symbols;

	  /* This object file defines this symbol, so pull it in.  */
	  if (! (*info->callbacks->add_archive_element) (info, abfd,
							 bfd_asymbol_name (p)))
	    return FALSE;
	  symcount = _bfd_generic_link_get_symcount (abfd);
	  symbols = _bfd_generic_link_get_symbols (abfd);
	  if (! generic_link_add_symbol_list (abfd, info, symcount,
					      symbols, collect))
	    return FALSE;
	  *pneeded = TRUE;
	  return TRUE;
	}

      /* P is a common symbol.  */

      if (h->type == bfd_link_hash_undefined)
	{
	  bfd *symbfd;
	  bfd_vma size;
	  unsigned int power;

	  symbfd = h->u.undef.abfd;
	  if (symbfd == NULL)
	    {
	      /* This symbol was created as undefined from outside
		 BFD.  We assume that we should link in the object
		 file.  This is for the -u option in the linker.  */
	      if (! (*info->callbacks->add_archive_element)
		  (info, abfd, bfd_asymbol_name (p)))
		return FALSE;
	      *pneeded = TRUE;
	      return TRUE;
	    }

	  /* Turn the symbol into a common symbol but do not link in
	     the object file.  This is how a.out works.  Object
	     formats that require different semantics must implement
	     this function differently.  This symbol is already on the
	     undefs list.  We add the section to a common section
	     attached to symbfd to ensure that it is in a BFD which
	     will be linked in.  */
	  h->type = bfd_link_hash_common;
	  h->u.c.p =
	    bfd_hash_allocate (&info->hash->table,
			       sizeof (struct bfd_link_hash_common_entry));
	  if (h->u.c.p == NULL)
	    return FALSE;

	  size = bfd_asymbol_value (p);
	  h->u.c.size = size;

	  power = bfd_log2 (size);
	  if (power > 4)
	    power = 4;
	  h->u.c.p->alignment_power = power;

	  if (p->section == bfd_com_section_ptr)
	    h->u.c.p->section = bfd_make_section_old_way (symbfd, "COMMON");
	  else
	    h->u.c.p->section = bfd_make_section_old_way (symbfd,
							  p->section->name);
	  h->u.c.p->section->flags = SEC_ALLOC;
	}
      else
	{
	  /* Adjust the size of the common symbol if necessary.  This
	     is how a.out works.  Object formats that require
	     different semantics must implement this function
	     differently.  */
	  if (bfd_asymbol_value (p) > h->u.c.size)
	    h->u.c.size = bfd_asymbol_value (p);
	}
    }

  /* This archive element is not needed.  */
  return TRUE;
}

/* Add the symbols from an object file to the global hash table.  ABFD
   is the object file.  INFO is the linker information.  SYMBOL_COUNT
   is the number of symbols.  SYMBOLS is the list of symbols.  COLLECT
   is TRUE if constructors should be automatically collected by name
   as is done by collect2.  */

static bfd_boolean
generic_link_add_symbol_list (bfd *abfd,
			      struct bfd_link_info *info,
			      bfd_size_type symbol_count,
			      asymbol **symbols,
			      bfd_boolean collect)
{
  asymbol **pp, **ppend;

  pp = symbols;
  ppend = symbols + symbol_count;
  for (; pp < ppend; pp++)
    {
      asymbol *p;

      p = *pp;

      if ((p->flags & (BSF_INDIRECT
		       | BSF_WARNING
		       | BSF_GLOBAL
		       | BSF_CONSTRUCTOR
		       | BSF_WEAK)) != 0
	  || bfd_is_und_section (bfd_get_section (p))
	  || bfd_is_com_section (bfd_get_section (p))
	  || bfd_is_ind_section (bfd_get_section (p)))
	{
	  const char *name;
	  const char *string;
	  struct generic_link_hash_entry *h;
	  struct bfd_link_hash_entry *bh;

	  name = bfd_asymbol_name (p);
	  if (((p->flags & BSF_INDIRECT) != 0
	       || bfd_is_ind_section (p->section))
	      && pp + 1 < ppend)
	    {
	      pp++;
	      string = bfd_asymbol_name (*pp);
	    }
	  else if ((p->flags & BSF_WARNING) != 0
		   && pp + 1 < ppend)
	    {
	      /* The name of P is actually the warning string, and the
		 next symbol is the one to warn about.  */
	      string = name;
	      pp++;
	      name = bfd_asymbol_name (*pp);
	    }
	  else
	    string = NULL;

	  bh = NULL;
	  if (! (_bfd_generic_link_add_one_symbol
		 (info, abfd, name, p->flags, bfd_get_section (p),
		  p->value, string, FALSE, collect, &bh)))
	    return FALSE;
	  h = (struct generic_link_hash_entry *) bh;

	  /* If this is a constructor symbol, and the linker didn't do
             anything with it, then we want to just pass the symbol
             through to the output file.  This will happen when
             linking with -r.  */
	  if ((p->flags & BSF_CONSTRUCTOR) != 0
	      && (h == NULL || h->root.type == bfd_link_hash_new))
	    {
	      p->udata.p = NULL;
	      continue;
	    }

	  /* Save the BFD symbol so that we don't lose any backend
	     specific information that may be attached to it.  We only
	     want this one if it gives more information than the
	     existing one; we don't want to replace a defined symbol
	     with an undefined one.  This routine may be called with a
	     hash table other than the generic hash table, so we only
	     do this if we are certain that the hash table is a
	     generic one.  */
	  if (info->hash->creator == abfd->xvec)
	    {
	      if (h->sym == NULL
		  || (! bfd_is_und_section (bfd_get_section (p))
		      && (! bfd_is_com_section (bfd_get_section (p))
			  || bfd_is_und_section (bfd_get_section (h->sym)))))
		{
		  h->sym = p;
		  /* BSF_OLD_COMMON is a hack to support COFF reloc
		     reading, and it should go away when the COFF
		     linker is switched to the new version.  */
		  if (bfd_is_com_section (bfd_get_section (p)))
		    p->flags |= BSF_OLD_COMMON;
		}
	    }

	  /* Store a back pointer from the symbol to the hash
	     table entry for the benefit of relaxation code until
	     it gets rewritten to not use asymbol structures.
	     Setting this is also used to check whether these
	     symbols were set up by the generic linker.  */
	  p->udata.p = h;
	}
    }

  return TRUE;
}

/* We use a state table to deal with adding symbols from an object
   file.  The first index into the state table describes the symbol
   from the object file.  The second index into the state table is the
   type of the symbol in the hash table.  */

/* The symbol from the object file is turned into one of these row
   values.  */

enum link_row
{
  UNDEF_ROW,		/* Undefined.  */
  UNDEFW_ROW,		/* Weak undefined.  */
  DEF_ROW,		/* Defined.  */
  DEFW_ROW,		/* Weak defined.  */
  COMMON_ROW,		/* Common.  */
  INDR_ROW,		/* Indirect.  */
  WARN_ROW,		/* Warning.  */
  SET_ROW		/* Member of set.  */
};

/* apparently needed for Hitachi 3050R(HI-UX/WE2)? */
#undef FAIL

/* The actions to take in the state table.  */

enum link_action
{
  FAIL,		/* Abort.  */
  UND,		/* Mark symbol undefined.  */
  WEAK,		/* Mark symbol weak undefined.  */
  DEF,		/* Mark symbol defined.  */
  DEFW,		/* Mark symbol weak defined.  */
  COM,		/* Mark symbol common.  */
  REF,		/* Mark defined symbol referenced.  */
  CREF,		/* Possibly warn about common reference to defined symbol.  */
  CDEF,		/* Define existing common symbol.  */
  NOACT,	/* No action.  */
  BIG,		/* Mark symbol common using largest size.  */
  MDEF,		/* Multiple definition error.  */
  MIND,		/* Multiple indirect symbols.  */
  IND,		/* Make indirect symbol.  */
  CIND,		/* Make indirect symbol from existing common symbol.  */
  SET,		/* Add value to set.  */
  MWARN,	/* Make warning symbol.  */
  WARN,		/* Issue warning.  */
  CWARN,	/* Warn if referenced, else MWARN.  */
  CYCLE,	/* Repeat with symbol pointed to.  */
  REFC,		/* Mark indirect symbol referenced and then CYCLE.  */
  WARNC		/* Issue warning and then CYCLE.  */
};

/* The state table itself.  The first index is a link_row and the
   second index is a bfd_link_hash_type.  */

static const enum link_action link_action[8][8] =
{
  /* current\prev    new    undef  undefw def    defw   com    indr   warn  */
  /* UNDEF_ROW 	*/  {UND,   NOACT, UND,   REF,   REF,   NOACT, REFC,  WARNC },
  /* UNDEFW_ROW	*/  {WEAK,  NOACT, NOACT, REF,   REF,   NOACT, REFC,  WARNC },
  /* DEF_ROW 	*/  {DEF,   DEF,   DEF,   MDEF,  DEF,   CDEF,  MDEF,  CYCLE },
  /* DEFW_ROW 	*/  {DEFW,  DEFW,  DEFW,  NOACT, NOACT, NOACT, NOACT, CYCLE },
  /* COMMON_ROW	*/  {COM,   COM,   COM,   CREF,  COM,   BIG,   REFC,  WARNC },
  /* INDR_ROW	*/  {IND,   IND,   IND,   MDEF,  IND,   CIND,  MIND,  CYCLE },
  /* WARN_ROW   */  {MWARN, WARN,  WARN,  CWARN, CWARN, WARN,  CWARN, NOACT },
  /* SET_ROW	*/  {SET,   SET,   SET,   SET,   SET,   SET,   CYCLE, CYCLE }
};

/* Most of the entries in the LINK_ACTION table are straightforward,
   but a few are somewhat subtle.

   A reference to an indirect symbol (UNDEF_ROW/indr or
   UNDEFW_ROW/indr) is counted as a reference both to the indirect
   symbol and to the symbol the indirect symbol points to.

   A reference to a warning symbol (UNDEF_ROW/warn or UNDEFW_ROW/warn)
   causes the warning to be issued.

   A common definition of an indirect symbol (COMMON_ROW/indr) is
   treated as a multiple definition error.  Likewise for an indirect
   definition of a common symbol (INDR_ROW/com).

   An indirect definition of a warning (INDR_ROW/warn) does not cause
   the warning to be issued.

   If a warning is created for an indirect symbol (WARN_ROW/indr) no
   warning is created for the symbol the indirect symbol points to.

   Adding an entry to a set does not count as a reference to a set,
   and no warning is issued (SET_ROW/warn).  */

/* Return the BFD in which a hash entry has been defined, if known.  */

static bfd *
hash_entry_bfd (struct bfd_link_hash_entry *h)
{
  while (h->type == bfd_link_hash_warning)
    h = h->u.i.link;
  switch (h->type)
    {
    default:
      return NULL;
    case bfd_link_hash_undefined:
    case bfd_link_hash_undefweak:
      return h->u.undef.abfd;
    case bfd_link_hash_defined:
    case bfd_link_hash_defweak:
      return h->u.def.section->owner;
    case bfd_link_hash_common:
      return h->u.c.p->section->owner;
    }
  /*NOTREACHED*/
}

/* Add a symbol to the global hash table.
   ABFD is the BFD the symbol comes from.
   NAME is the name of the symbol.
   FLAGS is the BSF_* bits associated with the symbol.
   SECTION is the section in which the symbol is defined; this may be
     bfd_und_section_ptr or bfd_com_section_ptr.
   VALUE is the value of the symbol, relative to the section.
   STRING is used for either an indirect symbol, in which case it is
     the name of the symbol to indirect to, or a warning symbol, in
     which case it is the warning string.
   COPY is TRUE if NAME or STRING must be copied into locally
     allocated memory if they need to be saved.
   COLLECT is TRUE if we should automatically collect gcc constructor
     or destructor names as collect2 does.
   HASHP, if not NULL, is a place to store the created hash table
     entry; if *HASHP is not NULL, the caller has already looked up
     the hash table entry, and stored it in *HASHP.  */

bfd_boolean
_bfd_generic_link_add_one_symbol (struct bfd_link_info *info,
				  bfd *abfd,
				  const char *name,
				  flagword flags,
				  asection *section,
				  bfd_vma value,
				  const char *string,
				  bfd_boolean copy,
				  bfd_boolean collect,
				  struct bfd_link_hash_entry **hashp)
{
  enum link_row row;
  struct bfd_link_hash_entry *h;
  bfd_boolean cycle;

  if (bfd_is_ind_section (section)
      || (flags & BSF_INDIRECT) != 0)
    row = INDR_ROW;
  else if ((flags & BSF_WARNING) != 0)
    row = WARN_ROW;
  else if ((flags & BSF_CONSTRUCTOR) != 0)
    row = SET_ROW;
  else if (bfd_is_und_section (section))
    {
      if ((flags & BSF_WEAK) != 0)
	row = UNDEFW_ROW;
      else
	row = UNDEF_ROW;
    }
  else if ((flags & BSF_WEAK) != 0)
    row = DEFW_ROW;
  else if (bfd_is_com_section (section))
    row = COMMON_ROW;
  else
    row = DEF_ROW;

  if (hashp != NULL && *hashp != NULL)
    h = *hashp;
  else
    {
      if (row == UNDEF_ROW || row == UNDEFW_ROW)
	h = bfd_wrapped_link_hash_lookup (abfd, info, name, TRUE, copy, FALSE);
      else
	h = bfd_link_hash_lookup (info->hash, name, TRUE, copy, FALSE);
      if (h == NULL)
	{
	  if (hashp != NULL)
	    *hashp = NULL;
	  return FALSE;
	}
    }

  if (info->notice_all
      || (info->notice_hash != NULL
	  && bfd_hash_lookup (info->notice_hash, name, FALSE, FALSE) != NULL))
    {
      if (! (*info->callbacks->notice) (info, h->root.string, abfd, section,
					value))
	return FALSE;
    }

  if (hashp != NULL)
    *hashp = h;

  do
    {
      enum link_action action;

      cycle = FALSE;
      action = link_action[(int) row][(int) h->type];
      switch (action)
	{
	case FAIL:
	  abort ();

	case NOACT:
	  /* Do nothing.  */
	  break;

	case UND:
	  /* Make a new undefined symbol.  */
	  h->type = bfd_link_hash_undefined;
	  h->u.undef.abfd = abfd;
	  bfd_link_add_undef (info->hash, h);
	  break;

	case WEAK:
	  /* Make a new weak undefined symbol.  */
	  h->type = bfd_link_hash_undefweak;
	  h->u.undef.abfd = abfd;
	  break;

	case CDEF:
	  /* We have found a definition for a symbol which was
	     previously common.  */
	  BFD_ASSERT (h->type == bfd_link_hash_common);
	  if (! ((*info->callbacks->multiple_common)
		 (info, h->root.string,
		  h->u.c.p->section->owner, bfd_link_hash_common, h->u.c.size,
		  abfd, bfd_link_hash_defined, 0)))
	    return FALSE;
	  /* Fall through.  */
	case DEF:
	case DEFW:
	  {
	    enum bfd_link_hash_type oldtype;

	    /* Define a symbol.  */
	    oldtype = h->type;
	    if (action == DEFW)
	      h->type = bfd_link_hash_defweak;
	    else
	      h->type = bfd_link_hash_defined;
	    h->u.def.section = section;
	    h->u.def.value = value;

	    /* If we have been asked to, we act like collect2 and
	       identify all functions that might be global
	       constructors and destructors and pass them up in a
	       callback.  We only do this for certain object file
	       types, since many object file types can handle this
	       automatically.  */
	    if (collect && name[0] == '_')
	      {
		const char *s;

		/* A constructor or destructor name starts like this:
		   _+GLOBAL_[_.$][ID][_.$] where the first [_.$] and
		   the second are the same character (we accept any
		   character there, in case a new object file format
		   comes along with even worse naming restrictions).  */

#define CONS_PREFIX "GLOBAL_"
#define CONS_PREFIX_LEN (sizeof CONS_PREFIX - 1)

		s = name + 1;
		while (*s == '_')
		  ++s;
		if (s[0] == 'G'
		    && strncmp (s, CONS_PREFIX, CONS_PREFIX_LEN - 1) == 0)
		  {
		    char c;

		    c = s[CONS_PREFIX_LEN + 1];
		    if ((c == 'I' || c == 'D')
			&& s[CONS_PREFIX_LEN] == s[CONS_PREFIX_LEN + 2])
		      {
			/* If this is a definition of a symbol which
                           was previously weakly defined, we are in
                           trouble.  We have already added a
                           constructor entry for the weak defined
                           symbol, and now we are trying to add one
                           for the new symbol.  Fortunately, this case
                           should never arise in practice.  */
			if (oldtype == bfd_link_hash_defweak)
			  abort ();

			if (! ((*info->callbacks->constructor)
			       (info, c == 'I',
				h->root.string, abfd, section, value)))
			  return FALSE;
		      }
		  }
	      }
	  }

	  break;

	case COM:
	  /* We have found a common definition for a symbol.  */
	  if (h->type == bfd_link_hash_new)
	    bfd_link_add_undef (info->hash, h);
	  h->type = bfd_link_hash_common;
	  h->u.c.p =
	    bfd_hash_allocate (&info->hash->table,
			       sizeof (struct bfd_link_hash_common_entry));
	  if (h->u.c.p == NULL)
	    return FALSE;

	  h->u.c.size = value;

	  /* Select a default alignment based on the size.  This may
             be overridden by the caller.  */
	  {
	    unsigned int power;

	    power = bfd_log2 (value);
	    if (power > 4)
	      power = 4;
	    h->u.c.p->alignment_power = power;
	  }

	  /* The section of a common symbol is only used if the common
             symbol is actually allocated.  It basically provides a
             hook for the linker script to decide which output section
             the common symbols should be put in.  In most cases, the
             section of a common symbol will be bfd_com_section_ptr,
             the code here will choose a common symbol section named
             "COMMON", and the linker script will contain *(COMMON) in
             the appropriate place.  A few targets use separate common
             sections for small symbols, and they require special
             handling.  */
	  if (section == bfd_com_section_ptr)
	    {
	      h->u.c.p->section = bfd_make_section_old_way (abfd, "COMMON");
	      h->u.c.p->section->flags = SEC_ALLOC;
	    }
	  else if (section->owner != abfd)
	    {
	      h->u.c.p->section = bfd_make_section_old_way (abfd,
							    section->name);
	      h->u.c.p->section->flags = SEC_ALLOC;
	    }
	  else
	    h->u.c.p->section = section;
	  break;

	case REF:
	  /* A reference to a defined symbol.  */
	  if (h->und_next == NULL && info->hash->undefs_tail != h)
	    h->und_next = h;
	  break;

	case BIG:
	  /* We have found a common definition for a symbol which
	     already had a common definition.  Use the maximum of the
	     two sizes, and use the section required by the larger symbol.  */
	  BFD_ASSERT (h->type == bfd_link_hash_common);
	  if (! ((*info->callbacks->multiple_common)
		 (info, h->root.string,
		  h->u.c.p->section->owner, bfd_link_hash_common, h->u.c.size,
		  abfd, bfd_link_hash_common, value)))
	    return FALSE;
	  if (value > h->u.c.size)
	    {
	      unsigned int power;

	      h->u.c.size = value;

	      /* Select a default alignment based on the size.  This may
		 be overridden by the caller.  */
	      power = bfd_log2 (value);
	      if (power > 4)
		power = 4;
	      h->u.c.p->alignment_power = power;

	      /* Some systems have special treatment for small commons,
		 hence we want to select the section used by the larger
		 symbol.  This makes sure the symbol does not go in a
		 small common section if it is now too large.  */
	      if (section == bfd_com_section_ptr)
		{
		  h->u.c.p->section
		    = bfd_make_section_old_way (abfd, "COMMON");
		  h->u.c.p->section->flags = SEC_ALLOC;
		}
	      else if (section->owner != abfd)
		{
		  h->u.c.p->section
		    = bfd_make_section_old_way (abfd, section->name);
		  h->u.c.p->section->flags = SEC_ALLOC;
		}
	      else
		h->u.c.p->section = section;
	    }
	  break;

	case CREF:
	  {
	    bfd *obfd;

	    /* We have found a common definition for a symbol which
	       was already defined.  FIXME: It would nice if we could
	       report the BFD which defined an indirect symbol, but we
	       don't have anywhere to store the information.  */
	    if (h->type == bfd_link_hash_defined
		|| h->type == bfd_link_hash_defweak)
	      obfd = h->u.def.section->owner;
	    else
	      obfd = NULL;
	    if (! ((*info->callbacks->multiple_common)
		   (info, h->root.string, obfd, h->type, 0,
		    abfd, bfd_link_hash_common, value)))
	      return FALSE;
	  }
	  break;

	case MIND:
	  /* Multiple indirect symbols.  This is OK if they both point
	     to the same symbol.  */
	  if (strcmp (h->u.i.link->root.string, string) == 0)
	    break;
	  /* Fall through.  */
	case MDEF:
	  /* Handle a multiple definition.  */
	  if (!info->allow_multiple_definition)
	    {
	      asection *msec = NULL;
	      bfd_vma mval = 0;

	      switch (h->type)
		{
		case bfd_link_hash_defined:
		  msec = h->u.def.section;
		  mval = h->u.def.value;
		  break;
	        case bfd_link_hash_indirect:
		  msec = bfd_ind_section_ptr;
		  mval = 0;
		  break;
		default:
		  abort ();
		}

	      /* Ignore a redefinition of an absolute symbol to the
		 same value; it's harmless.  */
	      if (h->type == bfd_link_hash_defined
		  && bfd_is_abs_section (msec)
		  && bfd_is_abs_section (section)
		  && value == mval)
		break;

	      if (! ((*info->callbacks->multiple_definition)
		     (info, h->root.string, msec->owner, msec, mval,
		      abfd, section, value)))
		return FALSE;
	    }
	  break;

	case CIND:
	  /* Create an indirect symbol from an existing common symbol.  */
	  BFD_ASSERT (h->type == bfd_link_hash_common);
	  if (! ((*info->callbacks->multiple_common)
		 (info, h->root.string,
		  h->u.c.p->section->owner, bfd_link_hash_common, h->u.c.size,
		  abfd, bfd_link_hash_indirect, 0)))
	    return FALSE;
	  /* Fall through.  */
	case IND:
	  /* Create an indirect symbol.  */
	  {
	    struct bfd_link_hash_entry *inh;

	    /* STRING is the name of the symbol we want to indirect
	       to.  */
	    inh = bfd_wrapped_link_hash_lookup (abfd, info, string, TRUE,
						copy, FALSE);
	    if (inh == NULL)
	      return FALSE;
	    if (inh->type == bfd_link_hash_indirect
		&& inh->u.i.link == h)
	      {
		(*_bfd_error_handler)
		  (_("%s: indirect symbol `%s' to `%s' is a loop"),
		   bfd_archive_filename (abfd), name, string);
		bfd_set_error (bfd_error_invalid_operation);
		return FALSE;
	      }
	    if (inh->type == bfd_link_hash_new)
	      {
		inh->type = bfd_link_hash_undefined;
		inh->u.undef.abfd = abfd;
		bfd_link_add_undef (info->hash, inh);
	      }

	    /* If the indirect symbol has been referenced, we need to
	       push the reference down to the symbol we are
	       referencing.  */
	    if (h->type != bfd_link_hash_new)
	      {
		row = UNDEF_ROW;
		cycle = TRUE;
	      }

	    h->type = bfd_link_hash_indirect;
	    h->u.i.link = inh;
	  }
	  break;

	case SET:
	  /* Add an entry to a set.  */
	  if (! (*info->callbacks->add_to_set) (info, h, BFD_RELOC_CTOR,
						abfd, section, value))
	    return FALSE;
	  break;

	case WARNC:
	  /* Issue a warning and cycle.  */
	  if (h->u.i.warning != NULL)
	    {
	      if (! (*info->callbacks->warning) (info, h->u.i.warning,
						 h->root.string, abfd,
						 NULL, 0))
		return FALSE;
	      /* Only issue a warning once.  */
	      h->u.i.warning = NULL;
	    }
	  /* Fall through.  */
	case CYCLE:
	  /* Try again with the referenced symbol.  */
	  h = h->u.i.link;
	  cycle = TRUE;
	  break;

	case REFC:
	  /* A reference to an indirect symbol.  */
	  if (h->und_next == NULL && info->hash->undefs_tail != h)
	    h->und_next = h;
	  h = h->u.i.link;
	  cycle = TRUE;
	  break;

	case WARN:
	  /* Issue a warning.  */
	  if (! (*info->callbacks->warning) (info, string, h->root.string,
					     hash_entry_bfd (h), NULL, 0))
	    return FALSE;
	  break;

	case CWARN:
	  /* Warn if this symbol has been referenced already,
	     otherwise add a warning.  A symbol has been referenced if
	     the und_next field is not NULL, or it is the tail of the
	     undefined symbol list.  The REF case above helps to
	     ensure this.  */
	  if (h->und_next != NULL || info->hash->undefs_tail == h)
	    {
	      if (! (*info->callbacks->warning) (info, string, h->root.string,
						 hash_entry_bfd (h), NULL, 0))
		return FALSE;
	      break;
	    }
	  /* Fall through.  */
	case MWARN:
	  /* Make a warning symbol.  */
	  {
	    struct bfd_link_hash_entry *sub;

	    /* STRING is the warning to give.  */
	    sub = ((struct bfd_link_hash_entry *)
		   ((*info->hash->table.newfunc)
		    (NULL, &info->hash->table, h->root.string)));
	    if (sub == NULL)
	      return FALSE;
	    *sub = *h;
	    sub->type = bfd_link_hash_warning;
	    sub->u.i.link = h;
	    if (! copy)
	      sub->u.i.warning = string;
	    else
	      {
		char *w;
		size_t len = strlen (string) + 1;

		w = bfd_hash_allocate (&info->hash->table, len);
		if (w == NULL)
		  return FALSE;
		memcpy (w, string, len);
		sub->u.i.warning = w;
	      }

	    bfd_hash_replace (&info->hash->table,
			      (struct bfd_hash_entry *) h,
			      (struct bfd_hash_entry *) sub);
	    if (hashp != NULL)
	      *hashp = sub;
	  }
	  break;
	}
    }
  while (cycle);

  return TRUE;
}

/* Generic final link routine.  */

bfd_boolean
_bfd_generic_final_link (bfd *abfd, struct bfd_link_info *info)
{
  bfd *sub;
  asection *o;
  struct bfd_link_order *p;
  size_t outsymalloc;
  struct generic_write_global_symbol_info wginfo;

  bfd_get_outsymbols (abfd) = NULL;
  bfd_get_symcount (abfd) = 0;
  outsymalloc = 0;

  /* Mark all sections which will be included in the output file.  */
  for (o = abfd->sections; o != NULL; o = o->next)
    for (p = o->link_order_head; p != NULL; p = p->next)
      if (p->type == bfd_indirect_link_order)
	p->u.indirect.section->linker_mark = TRUE;

  /* Build the output symbol table.  */
  for (sub = info->input_bfds; sub != NULL; sub = sub->link_next)
    if (! _bfd_generic_link_output_symbols (abfd, sub, info, &outsymalloc))
      return FALSE;

  /* Accumulate the global symbols.  */
  wginfo.info = info;
  wginfo.output_bfd = abfd;
  wginfo.psymalloc = &outsymalloc;
  _bfd_generic_link_hash_traverse (_bfd_generic_hash_table (info),
				   _bfd_generic_link_write_global_symbol,
				   &wginfo);

  /* Make sure we have a trailing NULL pointer on OUTSYMBOLS.  We
     shouldn't really need one, since we have SYMCOUNT, but some old
     code still expects one.  */
  if (! generic_add_output_symbol (abfd, &outsymalloc, NULL))
    return FALSE;

  if (info->relocatable)
    {
      /* Allocate space for the output relocs for each section.  */
      for (o = abfd->sections; o != NULL; o = o->next)
	{
	  o->reloc_count = 0;
	  for (p = o->link_order_head; p != NULL; p = p->next)
	    {
	      if (p->type == bfd_section_reloc_link_order
		  || p->type == bfd_symbol_reloc_link_order)
		++o->reloc_count;
	      else if (p->type == bfd_indirect_link_order)
		{
		  asection *input_section;
		  bfd *input_bfd;
		  long relsize;
		  arelent **relocs;
		  asymbol **symbols;
		  long reloc_count;

		  input_section = p->u.indirect.section;
		  input_bfd = input_section->owner;
		  relsize = bfd_get_reloc_upper_bound (input_bfd,
						       input_section);
		  if (relsize < 0)
		    return FALSE;
		  relocs = bfd_malloc (relsize);
		  if (!relocs && relsize != 0)
		    return FALSE;
		  symbols = _bfd_generic_link_get_symbols (input_bfd);
		  reloc_count = bfd_canonicalize_reloc (input_bfd,
							input_section,
							relocs,
							symbols);
		  free (relocs);
		  if (reloc_count < 0)
		    return FALSE;
		  BFD_ASSERT ((unsigned long) reloc_count
			      == input_section->reloc_count);
		  o->reloc_count += reloc_count;
		}
	    }
	  if (o->reloc_count > 0)
	    {
	      bfd_size_type amt;

	      amt = o->reloc_count;
	      amt *= sizeof (arelent *);
	      o->orelocation = bfd_alloc (abfd, amt);
	      if (!o->orelocation)
		return FALSE;
	      o->flags |= SEC_RELOC;
	      /* Reset the count so that it can be used as an index
		 when putting in the output relocs.  */
	      o->reloc_count = 0;
	    }
	}
    }

  /* Handle all the link order information for the sections.  */
  for (o = abfd->sections; o != NULL; o = o->next)
    {
      for (p = o->link_order_head; p != NULL; p = p->next)
	{
	  switch (p->type)
	    {
	    case bfd_section_reloc_link_order:
	    case bfd_symbol_reloc_link_order:
	      if (! _bfd_generic_reloc_link_order (abfd, info, o, p))
		return FALSE;
	      break;
	    case bfd_indirect_link_order:
	      if (! default_indirect_link_order (abfd, info, o, p, TRUE))
		return FALSE;
	      break;
	    default:
	      if (! _bfd_default_link_order (abfd, info, o, p))
		return FALSE;
	      break;
	    }
	}
    }

  return TRUE;
}

/* Add an output symbol to the output BFD.  */

static bfd_boolean
generic_add_output_symbol (bfd *output_bfd, size_t *psymalloc, asymbol *sym)
{
  if (bfd_get_symcount (output_bfd) >= *psymalloc)
    {
      asymbol **newsyms;
      bfd_size_type amt;

      if (*psymalloc == 0)
	*psymalloc = 124;
      else
	*psymalloc *= 2;
      amt = *psymalloc;
      amt *= sizeof (asymbol *);
      newsyms = bfd_realloc (bfd_get_outsymbols (output_bfd), amt);
      if (newsyms == NULL)
	return FALSE;
      bfd_get_outsymbols (output_bfd) = newsyms;
    }

  bfd_get_outsymbols (output_bfd) [bfd_get_symcount (output_bfd)] = sym;
  if (sym != NULL)
    ++ bfd_get_symcount (output_bfd);

  return TRUE;
}

/* Handle the symbols for an input BFD.  */

bfd_boolean
_bfd_generic_link_output_symbols (bfd *output_bfd,
				  bfd *input_bfd,
				  struct bfd_link_info *info,
				  size_t *psymalloc)
{
  asymbol **sym_ptr;
  asymbol **sym_end;

  if (! generic_link_read_symbols (input_bfd))
    return FALSE;

  /* Create a filename symbol if we are supposed to.  */
  if (info->create_object_symbols_section != NULL)
    {
      asection *sec;

      for (sec = input_bfd->sections; sec != NULL; sec = sec->next)
	{
	  if (sec->output_section == info->create_object_symbols_section)
	    {
	      asymbol *newsym;

	      newsym = bfd_make_empty_symbol (input_bfd);
	      if (!newsym)
		return FALSE;
	      newsym->name = input_bfd->filename;
	      newsym->value = 0;
	      newsym->flags = BSF_LOCAL | BSF_FILE;
	      newsym->section = sec;

	      if (! generic_add_output_symbol (output_bfd, psymalloc,
					       newsym))
		return FALSE;

	      break;
	    }
	}
    }

  /* Adjust the values of the globally visible symbols, and write out
     local symbols.  */
  sym_ptr = _bfd_generic_link_get_symbols (input_bfd);
  sym_end = sym_ptr + _bfd_generic_link_get_symcount (input_bfd);
  for (; sym_ptr < sym_end; sym_ptr++)
    {
      asymbol *sym;
      struct generic_link_hash_entry *h;
      bfd_boolean output;

      h = NULL;
      sym = *sym_ptr;
      if ((sym->flags & (BSF_INDIRECT
			 | BSF_WARNING
			 | BSF_GLOBAL
			 | BSF_CONSTRUCTOR
			 | BSF_WEAK)) != 0
	  || bfd_is_und_section (bfd_get_section (sym))
	  || bfd_is_com_section (bfd_get_section (sym))
	  || bfd_is_ind_section (bfd_get_section (sym)))
	{
	  if (sym->udata.p != NULL)
	    h = sym->udata.p;
	  else if ((sym->flags & BSF_CONSTRUCTOR) != 0)
	    {
	      /* This case normally means that the main linker code
                 deliberately ignored this constructor symbol.  We
                 should just pass it through.  This will screw up if
                 the constructor symbol is from a different,
                 non-generic, object file format, but the case will
                 only arise when linking with -r, which will probably
                 fail anyhow, since there will be no way to represent
                 the relocs in the output format being used.  */
	      h = NULL;
	    }
	  else if (bfd_is_und_section (bfd_get_section (sym)))
	    h = ((struct generic_link_hash_entry *)
		 bfd_wrapped_link_hash_lookup (output_bfd, info,
					       bfd_asymbol_name (sym),
					       FALSE, FALSE, TRUE));
	  else
	    h = _bfd_generic_link_hash_lookup (_bfd_generic_hash_table (info),
					       bfd_asymbol_name (sym),
					       FALSE, FALSE, TRUE);

	  if (h != NULL)
	    {
	      /* Force all references to this symbol to point to
		 the same area in memory.  It is possible that
		 this routine will be called with a hash table
		 other than a generic hash table, so we double
		 check that.  */
	      if (info->hash->creator == input_bfd->xvec)
		{
		  if (h->sym != NULL)
		    *sym_ptr = sym = h->sym;
		}

	      switch (h->root.type)
		{
		default:
		case bfd_link_hash_new:
		  abort ();
		case bfd_link_hash_undefined:
		  break;
		case bfd_link_hash_undefweak:
		  sym->flags |= BSF_WEAK;
		  break;
		case bfd_link_hash_indirect:
		  h = (struct generic_link_hash_entry *) h->root.u.i.link;
		  /* fall through */
		case bfd_link_hash_defined:
		  sym->flags |= BSF_GLOBAL;
		  sym->flags &=~ BSF_CONSTRUCTOR;
		  sym->value = h->root.u.def.value;
		  sym->section = h->root.u.def.section;
		  break;
		case bfd_link_hash_defweak:
		  sym->flags |= BSF_WEAK;
		  sym->flags &=~ BSF_CONSTRUCTOR;
		  sym->value = h->root.u.def.value;
		  sym->section = h->root.u.def.section;
		  break;
		case bfd_link_hash_common:
		  sym->value = h->root.u.c.size;
		  sym->flags |= BSF_GLOBAL;
		  if (! bfd_is_com_section (sym->section))
		    {
		      BFD_ASSERT (bfd_is_und_section (sym->section));
		      sym->section = bfd_com_section_ptr;
		    }
		  /* We do not set the section of the symbol to
		     h->root.u.c.p->section.  That value was saved so
		     that we would know where to allocate the symbol
		     if it was defined.  In this case the type is
		     still bfd_link_hash_common, so we did not define
		     it, so we do not want to use that section.  */
		  break;
		}
	    }
	}

      /* This switch is straight from the old code in
	 write_file_locals in ldsym.c.  */
      if (info->strip == strip_all
	  || (info->strip == strip_some
	      && bfd_hash_lookup (info->keep_hash, bfd_asymbol_name (sym),
				  FALSE, FALSE) == NULL))
	output = FALSE;
      else if ((sym->flags & (BSF_GLOBAL | BSF_WEAK)) != 0)
	{
	  /* If this symbol is marked as occurring now, rather
	     than at the end, output it now.  This is used for
	     COFF C_EXT FCN symbols.  FIXME: There must be a
	     better way.  */
	  if (bfd_asymbol_bfd (sym) == input_bfd
	      && (sym->flags & BSF_NOT_AT_END) != 0)
	    output = TRUE;
	  else
	    output = FALSE;
	}
      else if (bfd_is_ind_section (sym->section))
	output = FALSE;
      else if ((sym->flags & BSF_DEBUGGING) != 0)
	{
	  if (info->strip == strip_none)
	    output = TRUE;
	  else
	    output = FALSE;
	}
      else if (bfd_is_und_section (sym->section)
	       || bfd_is_com_section (sym->section))
	output = FALSE;
      else if ((sym->flags & BSF_LOCAL) != 0)
	{
	  if ((sym->flags & BSF_WARNING) != 0)
	    output = FALSE;
	  else
	    {
	      switch (info->discard)
		{
		default:
		case discard_all:
		  output = FALSE;
		  break;
		case discard_sec_merge:
		  output = TRUE;
		  if (info->relocatable
		      || ! (sym->section->flags & SEC_MERGE))
		    break;
		  /* FALLTHROUGH */
		case discard_l:
		  if (bfd_is_local_label (input_bfd, sym))
		    output = FALSE;
		  else
		    output = TRUE;
		  break;
		case discard_none:
		  output = TRUE;
		  break;
		}
	    }
	}
      else if ((sym->flags & BSF_CONSTRUCTOR))
	{
	  if (info->strip != strip_all)
	    output = TRUE;
	  else
	    output = FALSE;
	}
      else
	abort ();

      /* If this symbol is in a section which is not being included
	 in the output file, then we don't want to output the symbol.

	 Gross.  .bss and similar sections won't have the linker_mark
	 field set.  */
      if ((sym->section->flags & SEC_HAS_CONTENTS) != 0
	  && ! sym->section->linker_mark)
	output = FALSE;

      if (output)
	{
	  if (! generic_add_output_symbol (output_bfd, psymalloc, sym))
	    return FALSE;
	  if (h != NULL)
	    h->written = TRUE;
	}
    }

  return TRUE;
}

/* Set the section and value of a generic BFD symbol based on a linker
   hash table entry.  */

static void
set_symbol_from_hash (asymbol *sym, struct bfd_link_hash_entry *h)
{
  switch (h->type)
    {
    default:
      abort ();
      break;
    case bfd_link_hash_new:
      /* This can happen when a constructor symbol is seen but we are
         not building constructors.  */
      if (sym->section != NULL)
	{
	  BFD_ASSERT ((sym->flags & BSF_CONSTRUCTOR) != 0);
	}
      else
	{
	  sym->flags |= BSF_CONSTRUCTOR;
	  sym->section = bfd_abs_section_ptr;
	  sym->value = 0;
	}
      break;
    case bfd_link_hash_undefined:
      sym->section = bfd_und_section_ptr;
      sym->value = 0;
      break;
    case bfd_link_hash_undefweak:
      sym->section = bfd_und_section_ptr;
      sym->value = 0;
      sym->flags |= BSF_WEAK;
      break;
    case bfd_link_hash_defined:
      sym->section = h->u.def.section;
      sym->value = h->u.def.value;
      break;
    case bfd_link_hash_defweak:
      sym->flags |= BSF_WEAK;
      sym->section = h->u.def.section;
      sym->value = h->u.def.value;
      break;
    case bfd_link_hash_common:
      sym->value = h->u.c.size;
      if (sym->section == NULL)
	sym->section = bfd_com_section_ptr;
      else if (! bfd_is_com_section (sym->section))
	{
	  BFD_ASSERT (bfd_is_und_section (sym->section));
	  sym->section = bfd_com_section_ptr;
	}
      /* Do not set the section; see _bfd_generic_link_output_symbols.  */
      break;
    case bfd_link_hash_indirect:
    case bfd_link_hash_warning:
      /* FIXME: What should we do here?  */
      break;
    }
}

/* Write out a global symbol, if it hasn't already been written out.
   This is called for each symbol in the hash table.  */

bfd_boolean
_bfd_generic_link_write_global_symbol (struct generic_link_hash_entry *h,
				       void *data)
{
  struct generic_write_global_symbol_info *wginfo = data;
  asymbol *sym;

  if (h->root.type == bfd_link_hash_warning)
    h = (struct generic_link_hash_entry *) h->root.u.i.link;

  if (h->written)
    return TRUE;

  h->written = TRUE;

  if (wginfo->info->strip == strip_all
      || (wginfo->info->strip == strip_some
	  && bfd_hash_lookup (wginfo->info->keep_hash, h->root.root.string,
			      FALSE, FALSE) == NULL))
    return TRUE;

  if (h->sym != NULL)
    sym = h->sym;
  else
    {
      sym = bfd_make_empty_symbol (wginfo->output_bfd);
      if (!sym)
	return FALSE;
      sym->name = h->root.root.string;
      sym->flags = 0;
    }

  set_symbol_from_hash (sym, &h->root);

  sym->flags |= BSF_GLOBAL;

  if (! generic_add_output_symbol (wginfo->output_bfd, wginfo->psymalloc,
				   sym))
    {
      /* FIXME: No way to return failure.  */
      abort ();
    }

  return TRUE;
}

/* Create a relocation.  */

bfd_boolean
_bfd_generic_reloc_link_order (bfd *abfd,
			       struct bfd_link_info *info,
			       asection *sec,
			       struct bfd_link_order *link_order)
{
  arelent *r;

  if (! info->relocatable)
    abort ();
  if (sec->orelocation == NULL)
    abort ();

  r = bfd_alloc (abfd, sizeof (arelent));
  if (r == NULL)
    return FALSE;

  r->address = link_order->offset;
  r->howto = bfd_reloc_type_lookup (abfd, link_order->u.reloc.p->reloc);
  if (r->howto == 0)
    {
      bfd_set_error (bfd_error_bad_value);
      return FALSE;
    }

  /* Get the symbol to use for the relocation.  */
  if (link_order->type == bfd_section_reloc_link_order)
    r->sym_ptr_ptr = link_order->u.reloc.p->u.section->symbol_ptr_ptr;
  else
    {
      struct generic_link_hash_entry *h;

      h = ((struct generic_link_hash_entry *)
	   bfd_wrapped_link_hash_lookup (abfd, info,
					 link_order->u.reloc.p->u.name,
					 FALSE, FALSE, TRUE));
      if (h == NULL
	  || ! h->written)
	{
	  if (! ((*info->callbacks->unattached_reloc)
		 (info, link_order->u.reloc.p->u.name, NULL, NULL, 0)))
	    return FALSE;
	  bfd_set_error (bfd_error_bad_value);
	  return FALSE;
	}
      r->sym_ptr_ptr = &h->sym;
    }

  /* If this is an inplace reloc, write the addend to the object file.
     Otherwise, store it in the reloc addend.  */
  if (! r->howto->partial_inplace)
    r->addend = link_order->u.reloc.p->addend;
  else
    {
      bfd_size_type size;
      bfd_reloc_status_type rstat;
      bfd_byte *buf;
      bfd_boolean ok;
      file_ptr loc;

      size = bfd_get_reloc_size (r->howto);
      buf = bfd_zmalloc (size);
      if (buf == NULL)
	return FALSE;
      rstat = _bfd_relocate_contents (r->howto, abfd,
				      (bfd_vma) link_order->u.reloc.p->addend,
				      buf);
      switch (rstat)
	{
	case bfd_reloc_ok:
	  break;
	default:
	case bfd_reloc_outofrange:
	  abort ();
	case bfd_reloc_overflow:
	  if (! ((*info->callbacks->reloc_overflow)
		 (info,
		  (link_order->type == bfd_section_reloc_link_order
		   ? bfd_section_name (abfd, link_order->u.reloc.p->u.section)
		   : link_order->u.reloc.p->u.name),
		  r->howto->name, link_order->u.reloc.p->addend,
		  NULL, NULL, 0)))
	    {
	      free (buf);
	      return FALSE;
	    }
	  break;
	}
      loc = link_order->offset * bfd_octets_per_byte (abfd);
      ok = bfd_set_section_contents (abfd, sec, buf, loc, size);
      free (buf);
      if (! ok)
	return FALSE;

      r->addend = 0;
    }

  sec->orelocation[sec->reloc_count] = r;
  ++sec->reloc_count;

  return TRUE;
}

/* Allocate a new link_order for a section.  */

struct bfd_link_order *
bfd_new_link_order (bfd *abfd, asection *section)
{
  bfd_size_type amt = sizeof (struct bfd_link_order);
  struct bfd_link_order *new;

  new = bfd_zalloc (abfd, amt);
  if (!new)
    return NULL;

  new->type = bfd_undefined_link_order;

  if (section->link_order_tail != NULL)
    section->link_order_tail->next = new;
  else
    section->link_order_head = new;
  section->link_order_tail = new;

  return new;
}

/* Default link order processing routine.  Note that we can not handle
   the reloc_link_order types here, since they depend upon the details
   of how the particular backends generates relocs.  */

bfd_boolean
_bfd_default_link_order (bfd *abfd,
			 struct bfd_link_info *info,
			 asection *sec,
			 struct bfd_link_order *link_order)
{
  switch (link_order->type)
    {
    case bfd_undefined_link_order:
    case bfd_section_reloc_link_order:
    case bfd_symbol_reloc_link_order:
    default:
      abort ();
    case bfd_indirect_link_order:
      return default_indirect_link_order (abfd, info, sec, link_order,
					  FALSE);
    case bfd_data_link_order:
      return default_data_link_order (abfd, info, sec, link_order);
    }
}

/* Default routine to handle a bfd_data_link_order.  */

static bfd_boolean
default_data_link_order (bfd *abfd,
			 struct bfd_link_info *info ATTRIBUTE_UNUSED,
			 asection *sec,
			 struct bfd_link_order *link_order)
{
  bfd_size_type size;
  size_t fill_size;
  bfd_byte *fill;
  file_ptr loc;
  bfd_boolean result;

  BFD_ASSERT ((sec->flags & SEC_HAS_CONTENTS) != 0);

  size = link_order->size;
  if (size == 0)
    return TRUE;

  fill = link_order->u.data.contents;
  fill_size = link_order->u.data.size;
  if (fill_size != 0 && fill_size < size)
    {
      bfd_byte *p;
      fill = bfd_malloc (size);
      if (fill == NULL)
	return FALSE;
      p = fill;
      if (fill_size == 1)
	memset (p, (int) link_order->u.data.contents[0], (size_t) size);
      else
	{
	  do
	    {
	      memcpy (p, link_order->u.data.contents, fill_size);
	      p += fill_size;
	      size -= fill_size;
	    }
	  while (size >= fill_size);
	  if (size != 0)
	    memcpy (p, link_order->u.data.contents, (size_t) size);
	  size = link_order->size;
	}
    }

  loc = link_order->offset * bfd_octets_per_byte (abfd);
  result = bfd_set_section_contents (abfd, sec, fill, loc, size);

  if (fill != link_order->u.data.contents)
    free (fill);
  return result;
}

/* Default routine to handle a bfd_indirect_link_order.  */

static bfd_boolean
default_indirect_link_order (bfd *output_bfd,
			     struct bfd_link_info *info,
			     asection *output_section,
			     struct bfd_link_order *link_order,
			     bfd_boolean generic_linker)
{
  asection *input_section;
  bfd *input_bfd;
  bfd_byte *contents = NULL;
  bfd_byte *new_contents;
  bfd_size_type sec_size;
  file_ptr loc;

  BFD_ASSERT ((output_section->flags & SEC_HAS_CONTENTS) != 0);

  if (link_order->size == 0)
    return TRUE;

  input_section = link_order->u.indirect.section;
  input_bfd = input_section->owner;

  BFD_ASSERT (input_section->output_section == output_section);
  BFD_ASSERT (input_section->output_offset == link_order->offset);
  BFD_ASSERT (input_section->_cooked_size == link_order->size);

  if (info->relocatable
      && input_section->reloc_count > 0
      && output_section->orelocation == NULL)
    {
      /* Space has not been allocated for the output relocations.
	 This can happen when we are called by a specific backend
	 because somebody is attempting to link together different
	 types of object files.  Handling this case correctly is
	 difficult, and sometimes impossible.  */
      (*_bfd_error_handler)
	(_("Attempt to do relocatable link with %s input and %s output"),
	 bfd_get_target (input_bfd), bfd_get_target (output_bfd));
      bfd_set_error (bfd_error_wrong_format);
      return FALSE;
    }

  if (! generic_linker)
    {
      asymbol **sympp;
      asymbol **symppend;

      /* Get the canonical symbols.  The generic linker will always
	 have retrieved them by this point, but we are being called by
	 a specific linker, presumably because we are linking
	 different types of object files together.  */
      if (! generic_link_read_symbols (input_bfd))
	return FALSE;

      /* Since we have been called by a specific linker, rather than
	 the generic linker, the values of the symbols will not be
	 right.  They will be the values as seen in the input file,
	 not the values of the final link.  We need to fix them up
	 before we can relocate the section.  */
      sympp = _bfd_generic_link_get_symbols (input_bfd);
      symppend = sympp + _bfd_generic_link_get_symcount (input_bfd);
      for (; sympp < symppend; sympp++)
	{
	  asymbol *sym;
	  struct bfd_link_hash_entry *h;

	  sym = *sympp;

	  if ((sym->flags & (BSF_INDIRECT
			     | BSF_WARNING
			     | BSF_GLOBAL
			     | BSF_CONSTRUCTOR
			     | BSF_WEAK)) != 0
	      || bfd_is_und_section (bfd_get_section (sym))
	      || bfd_is_com_section (bfd_get_section (sym))
	      || bfd_is_ind_section (bfd_get_section (sym)))
	    {
	      /* sym->udata may have been set by
		 generic_link_add_symbol_list.  */
	      if (sym->udata.p != NULL)
		h = sym->udata.p;
	      else if (bfd_is_und_section (bfd_get_section (sym)))
		h = bfd_wrapped_link_hash_lookup (output_bfd, info,
						  bfd_asymbol_name (sym),
						  FALSE, FALSE, TRUE);
	      else
		h = bfd_link_hash_lookup (info->hash,
					  bfd_asymbol_name (sym),
					  FALSE, FALSE, TRUE);
	      if (h != NULL)
		set_symbol_from_hash (sym, h);
	    }
	}
    }

  /* Get and relocate the section contents.  */
  sec_size = bfd_section_size (input_bfd, input_section);
  contents = bfd_malloc (sec_size);
  if (contents == NULL && sec_size != 0)
    goto error_return;
  new_contents = (bfd_get_relocated_section_contents
		  (output_bfd, info, link_order, contents, info->relocatable,
		   _bfd_generic_link_get_symbols (input_bfd)));
  if (!new_contents)
    goto error_return;

  /* Output the section contents.  */
  loc = link_order->offset * bfd_octets_per_byte (output_bfd);
  if (! bfd_set_section_contents (output_bfd, output_section,
				  new_contents, loc, link_order->size))
    goto error_return;

  if (contents != NULL)
    free (contents);
  return TRUE;

 error_return:
  if (contents != NULL)
    free (contents);
  return FALSE;
}

/* A little routine to count the number of relocs in a link_order
   list.  */

unsigned int
_bfd_count_link_order_relocs (struct bfd_link_order *link_order)
{
  register unsigned int c;
  register struct bfd_link_order *l;

  c = 0;
  for (l = link_order; l != NULL; l = l->next)
    {
      if (l->type == bfd_section_reloc_link_order
	  || l->type == bfd_symbol_reloc_link_order)
	++c;
    }

  return c;
}

/*
FUNCTION
	bfd_link_split_section

SYNOPSIS
        bfd_boolean bfd_link_split_section (bfd *abfd, asection *sec);

DESCRIPTION
	Return nonzero if @@var{sec} should be split during a
	reloceatable or final link.

.#define bfd_link_split_section(abfd, sec) \
.       BFD_SEND (abfd, _bfd_link_split_section, (abfd, sec))
.

*/

bfd_boolean
_bfd_generic_link_split_section (bfd *abfd ATTRIBUTE_UNUSED,
				 asection *sec ATTRIBUTE_UNUSED)
{
  return FALSE;
}
@


1.7
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 2
a3 2
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
d91 1
a91 1
	(this index number is used so that when doing a relocateable
d280 1
a280 1
	hash table.  When producing relocateable output, it must
d320 1
a320 1
	while generating a relocateable object file.
d342 1
a342 1
	section contents.  If performing a relocateable link, the
d409 2
a410 2
static bfd_boolean generic_link_read_symbols
  PARAMS ((bfd *));
d412 1
a412 3
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean collect));
static bfd_boolean generic_link_add_object_symbols
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean collect));
d414 1
a414 1
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *pneeded));
d416 1
a416 1
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *pneeded));
d418 1
a418 2
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *pneeded,
	   bfd_boolean collect));
d420 2
a421 6
  PARAMS ((bfd *, struct bfd_link_info *, bfd_size_type count, asymbol **,
	   bfd_boolean collect));
static bfd *hash_entry_bfd
  PARAMS ((struct bfd_link_hash_entry *));
static void set_symbol_from_hash
  PARAMS ((asymbol *, struct bfd_link_hash_entry *));
d423 1
a423 1
  PARAMS ((bfd *, size_t *psymalloc, asymbol *));
d425 1
a425 2
  PARAMS ((bfd *, struct bfd_link_info *, asection *,
	   struct bfd_link_order *));
d427 2
a428 2
  PARAMS ((bfd *, struct bfd_link_info *, asection *,
	   struct bfd_link_order *, bfd_boolean));
d437 3
a439 4
_bfd_link_hash_newfunc (entry, table, string)
     struct bfd_hash_entry *entry;
     struct bfd_hash_table *table;
     const char *string;
d445 1
a445 2
      entry = (struct bfd_hash_entry *)
	bfd_hash_allocate (table, sizeof (struct bfd_link_hash_entry));
d458 1
a458 1
      h->next = NULL;
d468 6
a473 6
_bfd_link_hash_table_init (table, abfd, newfunc)
     struct bfd_link_hash_table *table;
     bfd *abfd;
     struct bfd_hash_entry *(*newfunc) PARAMS ((struct bfd_hash_entry *,
						struct bfd_hash_table *,
						const char *));
d488 5
a492 6
bfd_link_hash_lookup (table, string, create, copy, follow)
     struct bfd_link_hash_table *table;
     const char *string;
     bfd_boolean create;
     bfd_boolean copy;
     bfd_boolean follow;
d499 1
a499 1
  if (follow && ret != (struct bfd_link_hash_entry *) NULL)
d514 6
a519 7
bfd_wrapped_link_hash_lookup (abfd, info, string, create, copy, follow)
     bfd *abfd;
     struct bfd_link_info *info;
     const char *string;
     bfd_boolean create;
     bfd_boolean copy;
     bfd_boolean follow;
d526 1
d529 5
a533 2
      if (*l == bfd_get_symbol_leading_char (abfd))
	++l;
d547 1
a547 1
	  n = (char *) bfd_malloc (amt);
d551 1
a551 2
	  /* Note that symbol_leading_char may be '\0'.  */
	  n[0] = bfd_get_symbol_leading_char (abfd);
d578 1
a578 1
	  n = (char *) bfd_malloc (amt);
d582 1
a582 2
	  /* Note that symbol_leading_char may be '\0'.  */
	  n[0] = bfd_get_symbol_leading_char (abfd);
d603 4
a606 4
bfd_link_hash_traverse (table, func, info)
     struct bfd_link_hash_table *table;
     bfd_boolean (*func) PARAMS ((struct bfd_link_hash_entry *, PTR));
     PTR info;
d609 1
a609 2
		     ((bfd_boolean (*) PARAMS ((struct bfd_hash_entry *, PTR)))
		      func),
d615 8
a622 9
INLINE void
bfd_link_add_undef (table, h)
     struct bfd_link_hash_table *table;
     struct bfd_link_hash_entry *h;
{
  BFD_ASSERT (h->next == NULL);
  if (table->undefs_tail != (struct bfd_link_hash_entry *) NULL)
    table->undefs_tail->next = h;
  if (table->undefs == (struct bfd_link_hash_entry *) NULL)
d630 3
a632 4
_bfd_generic_link_hash_newfunc (entry, table, string)
     struct bfd_hash_entry *entry;
     struct bfd_hash_table *table;
     const char *string;
d638 1
a638 1
      entry = (struct bfd_hash_entry *)
d662 1
a662 2
_bfd_generic_link_hash_table_create (abfd)
     bfd *abfd;
d667 1
a667 1
  ret = (struct generic_link_hash_table *) bfd_malloc (amt);
d669 1
a669 1
    return (struct bfd_link_hash_table *) NULL;
d674 1
a674 1
      return (struct bfd_link_hash_table *) NULL;
d680 1
a680 2
_bfd_generic_link_hash_table_free (hash)
     struct bfd_link_hash_table *hash;
d697 1
a697 2
generic_link_read_symbols (abfd)
     bfd *abfd;
d699 1
a699 1
  if (bfd_get_outsymbols (abfd) == (asymbol **) NULL)
d707 1
a707 2
      bfd_get_outsymbols (abfd) =
	(asymbol **) bfd_alloc (abfd, (bfd_size_type) symsize);
d724 1
a724 3
_bfd_generic_link_add_symbols (abfd, info)
     bfd *abfd;
     struct bfd_link_info *info;
d737 1
a737 3
_bfd_generic_link_add_symbols_collect (abfd, info)
     bfd *abfd;
     struct bfd_link_info *info;
d747 2
a748 3
_bfd_generic_link_just_syms (sec, info)
     asection *sec;
     struct bfd_link_info *info ATTRIBUTE_UNUSED;
d757 3
a759 4
generic_link_add_symbols (abfd, info, collect)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_boolean collect;
d786 3
a788 4
generic_link_add_object_symbols (abfd, info, collect)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_boolean collect;
d791 1
a791 1
  struct symbol_cache_entry **outsyms;
a826 8
static struct bfd_hash_entry *archive_hash_newfunc
  PARAMS ((struct bfd_hash_entry *, struct bfd_hash_table *, const char *));
static bfd_boolean archive_hash_table_init
  PARAMS ((struct archive_hash_table *,
	   struct bfd_hash_entry *(*) (struct bfd_hash_entry *,
				       struct bfd_hash_table *,
				       const char *)));

d830 3
a832 4
archive_hash_newfunc (entry, table, string)
     struct bfd_hash_entry *entry;
     struct bfd_hash_table *table;
     const char *string;
d838 3
a840 4
  if (ret == (struct archive_hash_entry *) NULL)
    ret = ((struct archive_hash_entry *)
	   bfd_hash_allocate (table, sizeof (struct archive_hash_entry)));
  if (ret == (struct archive_hash_entry *) NULL)
d850 1
a850 1
      ret->defs = (struct archive_list *) NULL;
d853 1
a853 1
  return (struct bfd_hash_entry *) ret;
d859 5
a863 5
archive_hash_table_init (table, newfunc)
     struct archive_hash_table *table;
     struct bfd_hash_entry *(*newfunc) PARAMS ((struct bfd_hash_entry *,
						struct bfd_hash_table *,
						const char *));
d916 4
a919 5
_bfd_generic_link_add_archive_symbols (abfd, info, checkfn)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_boolean (*checkfn)
       PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *pneeded));
d932 1
a932 1
      if (bfd_openr_next_archived_file (abfd, (bfd *) NULL) == NULL)
d951 1
a951 1
      if (arh == (struct archive_hash_entry *) NULL)
d958 1
a958 3
      for (pp = &arh->defs;
	   *pp != (struct archive_list *) NULL;
	   pp = &(*pp)->next)
d972 1
a972 1
  while (*pundef != (struct bfd_link_hash_entry *) NULL)
d993 1
a993 1
	    *pundef = (*pundef)->next;
d995 1
a995 1
	    pundef = &(*pundef)->next;
d1001 1
a1001 1
      if (arh == (struct archive_hash_entry *) NULL)
d1008 1
a1008 1
	      char *buf = (char *) bfd_malloc (amt);
d1016 1
a1016 1
	  if (arh == (struct archive_hash_entry *) NULL)
d1018 1
a1018 1
	      pundef = &(*pundef)->next;
d1023 1
a1023 1
      for (l = arh->defs; l != (struct archive_list *) NULL; l = l->next)
d1034 1
a1034 1
	  if (element == (bfd *) NULL)
d1067 1
a1067 1
      pundef = &(*pundef)->next;
d1088 4
a1091 4
generic_link_check_archive_element_no_collect (abfd, info, pneeded)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_boolean *pneeded;
d1101 3
a1103 4
generic_link_check_archive_element_collect (abfd, info, pneeded)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_boolean *pneeded;
d1112 4
a1115 5
generic_link_check_archive_element (abfd, info, pneeded, collect)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_boolean *pneeded;
     bfd_boolean collect;
d1145 1
a1145 1
      if (h == (struct bfd_link_hash_entry *) NULL
d1179 1
a1179 1
	  if (symbfd == (bfd *) NULL)
d1200 2
a1201 3
	    ((struct bfd_link_hash_common_entry *)
	     bfd_hash_allocate (&info->hash->table,
				sizeof (struct bfd_link_hash_common_entry)));
d1242 5
a1246 6
generic_link_add_symbol_list (abfd, info, symbol_count, symbols, collect)
     bfd *abfd;
     struct bfd_link_info *info;
     bfd_size_type symbol_count;
     asymbol **symbols;
     bfd_boolean collect;
d1320 1
a1320 1
	      if (h->sym == (asymbol *) NULL
d1339 1
a1339 1
	  p->udata.p = (PTR) h;
d1439 1
a1439 2
hash_entry_bfd (h)
     struct bfd_link_hash_entry *h;
d1478 10
a1487 12
_bfd_generic_link_add_one_symbol (info, abfd, name, flags, section, value,
				  string, copy, collect, hashp)
     struct bfd_link_info *info;
     bfd *abfd;
     const char *name;
     flagword flags;
     asection *section;
     bfd_vma value;
     const char *string;
     bfd_boolean copy;
     bfd_boolean collect;
     struct bfd_link_hash_entry **hashp;
d1531 2
a1532 3
      || (info->notice_hash != (struct bfd_hash_table *) NULL
	  && (bfd_hash_lookup (info->notice_hash, name, FALSE, FALSE)
	      != (struct bfd_hash_entry *) NULL)))
d1539 1
a1539 1
  if (hashp != (struct bfd_link_hash_entry **) NULL)
d1577 1
a1577 1
		  abfd, bfd_link_hash_defined, (bfd_vma) 0)))
d1652 2
a1653 3
	    ((struct bfd_link_hash_common_entry *)
	     bfd_hash_allocate (&info->hash->table,
				sizeof (struct bfd_link_hash_common_entry)));
d1697 2
a1698 2
	  if (h->next == NULL && info->hash->undefs_tail != h)
	    h->next = h;
d1759 1
a1759 1
		   (info, h->root.string, obfd, h->type, (bfd_vma) 0,
d1813 1
a1813 1
		  abfd, bfd_link_hash_indirect, (bfd_vma) 0)))
d1825 1
a1825 1
	    if (inh == (struct bfd_link_hash_entry *) NULL)
d1870 1
a1870 2
						 (asection *) NULL,
						 (bfd_vma) 0))
d1884 2
a1885 2
	  if (h->next == NULL && info->hash->undefs_tail != h)
	    h->next = h;
d1893 1
a1893 2
					     hash_entry_bfd (h),
					     (asection *) NULL, (bfd_vma) 0))
d1900 1
a1900 1
	     the next field is not NULL, or it is the tail of the
d1903 1
a1903 1
	  if (h->next != NULL || info->hash->undefs_tail == h)
d1906 1
a1906 3
						 hash_entry_bfd (h),
						 (asection *) NULL,
						 (bfd_vma) 0))
d1919 1
a1919 2
		    ((struct bfd_hash_entry *) NULL, &info->hash->table,
		     h->root.string)));
d1956 1
a1956 3
_bfd_generic_final_link (abfd, info)
     bfd *abfd;
     struct bfd_link_info *info;
d1964 1
a1964 1
  bfd_get_outsymbols (abfd) = (asymbol **) NULL;
d1975 1
a1975 1
  for (sub = info->input_bfds; sub != (bfd *) NULL; sub = sub->link_next)
d1985 1
a1985 1
				   (PTR) &wginfo);
d1993 1
a1993 1
  if (info->relocateable)
d1996 1
a1996 3
      for (o = abfd->sections;
	   o != (asection *) NULL;
	   o = o->next)
d1999 1
a1999 3
	  for (p = o->link_order_head;
	       p != (struct bfd_link_order *) NULL;
	       p = p->next)
d2019 1
a2019 1
		  relocs = (arelent **) bfd_malloc ((bfd_size_type) relsize);
d2041 1
a2041 1
	      o->orelocation = (arelent **) bfd_alloc (abfd, amt);
d2053 3
a2055 7
  for (o = abfd->sections;
       o != (asection *) NULL;
       o = o->next)
    {
      for (p = o->link_order_head;
	   p != (struct bfd_link_order *) NULL;
	   p = p->next)
d2082 1
a2082 4
generic_add_output_symbol (output_bfd, psymalloc, sym)
     bfd *output_bfd;
     size_t *psymalloc;
     asymbol *sym;
d2095 2
a2096 2
      newsyms = (asymbol **) bfd_realloc (bfd_get_outsymbols (output_bfd), amt);
      if (newsyms == (asymbol **) NULL)
d2111 4
a2114 5
_bfd_generic_link_output_symbols (output_bfd, input_bfd, info, psymalloc)
     bfd *output_bfd;
     bfd *input_bfd;
     struct bfd_link_info *info;
     size_t *psymalloc;
d2123 1
a2123 1
  if (info->create_object_symbols_section != (asection *) NULL)
d2127 1
a2127 3
      for (sec = input_bfd->sections;
	   sec != (asection *) NULL;
	   sec = sec->next)
d2160 1
a2160 1
      h = (struct generic_link_hash_entry *) NULL;
d2172 1
a2172 1
	    h = (struct generic_link_hash_entry *) sym->udata.p;
d2195 1
a2195 1
	  if (h != (struct generic_link_hash_entry *) NULL)
d2204 1
a2204 1
		  if (h->sym != (asymbol *) NULL)
d2256 2
a2257 3
	      && (bfd_hash_lookup (info->keep_hash, bfd_asymbol_name (sym),
				   FALSE, FALSE)
		  == (struct bfd_hash_entry *) NULL)))
d2297 1
a2297 1
		  if (info->relocateable
d2336 1
a2336 1
	  if (h != (struct generic_link_hash_entry *) NULL)
d2348 1
a2348 3
set_symbol_from_hash (sym, h)
     asymbol *sym;
     struct bfd_link_hash_entry *h;
d2409 2
a2410 3
_bfd_generic_link_write_global_symbol (h, data)
     struct generic_link_hash_entry *h;
     PTR data;
d2412 1
a2412 2
  struct generic_write_global_symbol_info *wginfo =
    (struct generic_write_global_symbol_info *) data;
d2429 1
a2429 1
  if (h->sym != (asymbol *) NULL)
d2457 4
a2460 5
_bfd_generic_reloc_link_order (abfd, info, sec, link_order)
     bfd *abfd;
     struct bfd_link_info *info;
     asection *sec;
     struct bfd_link_order *link_order;
d2464 1
a2464 1
  if (! info->relocateable)
d2466 1
a2466 1
  if (sec->orelocation == (arelent **) NULL)
d2469 2
a2470 2
  r = (arelent *) bfd_alloc (abfd, (bfd_size_type) sizeof (arelent));
  if (r == (arelent *) NULL)
d2492 1
a2492 1
      if (h == (struct generic_link_hash_entry *) NULL
d2496 1
a2496 2
		 (info, link_order->u.reloc.p->u.name,
		  (bfd *) NULL, (asection *) NULL, (bfd_vma) 0)))
d2517 2
a2518 2
      buf = (bfd_byte *) bfd_zmalloc (size);
      if (buf == (bfd_byte *) NULL)
d2537 1
a2537 1
		  (bfd *) NULL, (asection *) NULL, (bfd_vma) 0)))
d2545 1
a2545 2
      ok = bfd_set_section_contents (abfd, sec, (PTR) buf, loc,
				     (bfd_size_type) size);
d2562 1
a2562 3
bfd_new_link_order (abfd, section)
     bfd *abfd;
     asection *section;
d2567 1
a2567 1
  new = (struct bfd_link_order *) bfd_zalloc (abfd, amt);
d2573 1
a2573 1
  if (section->link_order_tail != (struct bfd_link_order *) NULL)
d2587 4
a2590 5
_bfd_default_link_order (abfd, info, sec, link_order)
     bfd *abfd;
     struct bfd_link_info *info;
     asection *sec;
     struct bfd_link_order *link_order;
d2610 4
a2613 5
default_data_link_order (abfd, info, sec, link_order)
     bfd *abfd;
     struct bfd_link_info *info ATTRIBUTE_UNUSED;
     asection *sec;
     struct bfd_link_order *link_order;
d2632 1
a2632 1
      fill = (bfd_byte *) bfd_malloc (size);
d2664 5
a2668 7
default_indirect_link_order (output_bfd, info, output_section, link_order,
			     generic_linker)
     bfd *output_bfd;
     struct bfd_link_info *info;
     asection *output_section;
     struct bfd_link_order *link_order;
     bfd_boolean generic_linker;
d2689 1
a2689 1
  if (info->relocateable
d2691 1
a2691 1
      && output_section->orelocation == (arelent **) NULL)
d2699 1
a2699 1
	(_("Attempt to do relocateable link with %s input and %s output"),
d2743 1
a2743 1
		h = (struct bfd_link_hash_entry *) sym->udata.p;
d2760 1
a2760 1
  contents = ((bfd_byte *) bfd_malloc (sec_size));
d2764 1
a2764 1
		  (output_bfd, info, link_order, contents, info->relocateable,
d2772 1
a2772 1
				  (PTR) new_contents, loc, link_order->size))
d2789 1
a2789 2
_bfd_count_link_order_relocs (link_order)
     struct bfd_link_order *link_order;
d2795 1
a2795 1
  for (l = link_order; l != (struct bfd_link_order *) NULL; l = l->next)
d2810 1
a2810 1
        bfd_boolean bfd_link_split_section(bfd *abfd, asection *sec);
d2823 2
a2824 3
_bfd_generic_link_split_section (abfd, sec)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *sec ATTRIBUTE_UNUSED;
@


1.6
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
d6 1
a6 1
This file is part of BFD, the Binary File Descriptor library.
d8 13
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d203 1
a203 1
	<<keep_memory>> field of the <<info>> argument is true, so
d409 1
a409 1
static boolean generic_link_read_symbols
d411 12
a422 11
static boolean generic_link_add_symbols
  PARAMS ((bfd *, struct bfd_link_info *, boolean collect));
static boolean generic_link_add_object_symbols
  PARAMS ((bfd *, struct bfd_link_info *, boolean collect));
static boolean generic_link_check_archive_element_no_collect
  PARAMS ((bfd *, struct bfd_link_info *, boolean *pneeded));
static boolean generic_link_check_archive_element_collect
  PARAMS ((bfd *, struct bfd_link_info *, boolean *pneeded));
static boolean generic_link_check_archive_element
  PARAMS ((bfd *, struct bfd_link_info *, boolean *pneeded, boolean collect));
static boolean generic_link_add_symbol_list
d424 3
a426 2
	   boolean collect));
static bfd *hash_entry_bfd PARAMS ((struct bfd_link_hash_entry *));
d429 1
a429 1
static boolean generic_add_output_symbol
d431 1
a431 1
static boolean default_fill_link_order
d434 1
a434 1
static boolean default_indirect_link_order
d436 1
a436 1
	   struct bfd_link_order *, boolean));
a449 2
  struct bfd_link_hash_entry *ret = (struct bfd_link_hash_entry *) entry;

d452 7
a458 5
  if (ret == (struct bfd_link_hash_entry *) NULL)
    ret = ((struct bfd_link_hash_entry *)
	   bfd_hash_allocate (table, sizeof (struct bfd_link_hash_entry)));
  if (ret == (struct bfd_link_hash_entry *) NULL)
    return NULL;
d461 4
a464 2
  ret = ((struct bfd_link_hash_entry *)
	 bfd_hash_newfunc ((struct bfd_hash_entry *) ret, table, string));
a465 2
  if (ret)
    {
d467 2
a468 2
      ret->type = bfd_link_hash_new;
      ret->next = NULL;
d471 1
a471 1
  return (struct bfd_hash_entry *) ret;
d477 1
a477 1
boolean
d488 2
d493 1
a493 1
/* Look up a symbol in a link hash table.  If follow is true, we
d501 3
a503 3
     boolean create;
     boolean copy;
     boolean follow;
d529 3
a531 3
     boolean create;
     boolean copy;
     boolean follow;
d533 2
d546 1
a546 1
      if (bfd_hash_lookup (info->wrap_hash, l, false, false) != NULL)
d554 2
a555 1
	  n = (char *) bfd_malloc (strlen (l) + sizeof WRAP + 1);
d564 1
a564 1
	  h = bfd_link_hash_lookup (info->hash, n, create, true, follow);
d577 1
a577 1
			      false, false) != NULL)
d586 2
a587 1
	  n = (char *) bfd_malloc (strlen (l + sizeof REAL - 1) + 2);
d595 1
a595 1
	  h = bfd_link_hash_lookup (info->hash, n, create, true, follow);
d615 1
a615 1
     boolean (*func) PARAMS ((struct bfd_link_hash_entry *, PTR));
d619 1
a619 1
		     ((boolean (*) PARAMS ((struct bfd_hash_entry *, PTR)))
d639 1
a639 1
/* Routine to create an entry in an generic link hash table.  */
a646 3
  struct generic_link_hash_entry *ret =
    (struct generic_link_hash_entry *) entry;

d649 7
a655 5
  if (ret == (struct generic_link_hash_entry *) NULL)
    ret = ((struct generic_link_hash_entry *)
	   bfd_hash_allocate (table, sizeof (struct generic_link_hash_entry)));
  if (ret == (struct generic_link_hash_entry *) NULL)
    return NULL;
d658 4
a661 3
  ret = ((struct generic_link_hash_entry *)
	 _bfd_link_hash_newfunc ((struct bfd_hash_entry *) ret,
				 table, string));
a662 2
  if (ret)
    {
d664 2
a665 1
      ret->written = false;
d669 1
a669 1
  return (struct bfd_hash_entry *) ret;
d672 1
a672 1
/* Create an generic link hash table.  */
d679 1
d681 1
a681 2
  ret = ((struct generic_link_hash_table *)
	 bfd_alloc (abfd, sizeof (struct generic_link_hash_table)));
d693 11
d711 1
a711 1
static boolean
d722 3
a724 2
	return false;
      bfd_get_outsymbols (abfd) = (asymbol **) bfd_alloc (abfd, symsize);
d726 1
a726 1
	return false;
d729 1
a729 1
	return false;
d733 1
a733 1
  return true;
d740 1
a740 1
boolean
d745 1
a745 1
  return generic_link_add_symbols (abfd, info, false);
d755 1
a755 1
boolean
d760 14
a773 1
  return generic_link_add_symbols (abfd, info, true);
d778 1
a778 1
static boolean
d782 1
a782 1
     boolean collect;
d784 1
a784 1
  boolean ret;
d800 1
a800 1
      ret = false;
d808 1
a808 1
static boolean
d812 1
a812 1
     boolean collect;
d814 3
d818 4
a821 5
    return false;
  return generic_link_add_symbol_list (abfd, info,
				       _bfd_generic_link_get_symcount (abfd),
				       _bfd_generic_link_get_symbols (abfd),
				       collect);
d832 1
a832 1
  int indx;
d853 1
a853 1
static boolean archive_hash_table_init
d892 1
a892 1
static boolean
d932 1
a932 1
   included.  CHECKFN should set *PNEEDED to true if the object file
d935 1
a935 1
   to the global hash table.  CHECKFN should only return false if some
d949 1
a949 1
boolean
d953 2
a954 2
     boolean (*checkfn) PARAMS ((bfd *, struct bfd_link_info *,
				 boolean *pneeded));
d961 1
a961 1
  int indx;
d968 1
a968 1
	return true;
d970 1
a970 1
      return false;
d979 1
a979 1
    return false;
d985 1
a985 1
      arh = archive_hash_lookup (&arsym_hash, arsym->name, true, false);
d1037 1
a1037 1
      arh = archive_hash_lookup (&arsym_hash, h->root.string, false, false);
d1040 18
a1057 2
	  pundef = &(*pundef)->next;
	  continue;
a1058 1

d1063 1
a1063 1
	  boolean needed;
d1112 1
a1112 1
  return true;
d1116 1
a1116 1
  return false;
d1124 1
a1124 1
static boolean
d1128 1
a1128 1
     boolean *pneeded;
d1130 1
a1130 1
  return generic_link_check_archive_element (abfd, info, pneeded, false);
d1137 1
a1137 1
static boolean
d1141 1
a1141 1
     boolean *pneeded;
d1143 1
a1143 1
  return generic_link_check_archive_element (abfd, info, pneeded, true);
d1149 1
a1149 1
static boolean
d1153 2
a1154 2
     boolean *pneeded;
     boolean collect;
d1158 1
a1158 1
  *pneeded = false;
d1161 1
a1161 1
    return false;
d1182 2
a1183 2
      h = bfd_link_hash_lookup (info->hash, bfd_asymbol_name (p), false,
				false, true);
d1199 1
a1199 1
	    return false;
d1204 3
a1206 3
	    return false;
	  *pneeded = true;
	  return true;
d1225 3
a1227 3
		return false;
	      *pneeded = true;
	      return true;
d1243 1
a1243 1
	    return false;
d1272 1
a1272 1
  return true;
d1278 1
a1278 1
   is true if constructors should be automatically collected by name
d1281 1
a1281 1
static boolean
d1287 1
a1287 1
     boolean collect;
d1311 1
d1333 1
a1333 1
	  h = NULL;
d1336 3
a1338 3
		  p->value, string, false, collect,
		  (struct bfd_link_hash_entry **) &h)))
	    return false;
d1384 1
a1384 1
  return true;
d1448 1
a1448 1
  /* COMMON_ROW	*/  {COM,   COM,   COM,   CREF,  CREF,  BIG,   REFC,  WARNC },
d1450 1
a1450 1
  /* WARN_ROW   */  {MWARN, WARN,  WARN,  CWARN, CWARN, WARN,  CWARN, MWARN },
d1511 1
a1511 1
   COPY is true if NAME or STRING must be copied into locally
d1513 1
a1513 1
   COLLECT is true if we should automatically collect gcc constructor
d1519 1
a1519 1
boolean
d1529 2
a1530 2
     boolean copy;
     boolean collect;
d1535 1
a1535 1
  boolean cycle;
d1563 1
a1563 1
	h = bfd_wrapped_link_hash_lookup (abfd, info, name, true, copy, false);
d1565 1
a1565 1
	h = bfd_link_hash_lookup (info->hash, name, true, copy, false);
d1570 1
a1570 1
	  return false;
d1576 1
a1576 1
	  && (bfd_hash_lookup (info->notice_hash, name, false, false)
d1581 1
a1581 1
	return false;
d1591 1
a1591 1
      cycle = false;
d1623 1
a1623 1
	    return false;
d1681 1
a1681 2
			       (info,
				c == 'I' ? true : false,
d1683 1
a1683 1
			  return false;
d1701 1
a1701 1
	    return false;
d1750 1
a1750 1
	     two sizes.  */
d1756 1
a1756 1
	    return false;
d1769 19
d1807 1
a1807 1
	      return false;
d1819 18
a1836 3
	  {
	    asection *msec = NULL;
	    bfd_vma mval = 0;
d1838 6
a1843 9
	    switch (h->type)
	      {
	      case bfd_link_hash_defined:
		msec = h->u.def.section;
		mval = h->u.def.value;
		break;
	      case bfd_link_hash_indirect:
		msec = bfd_ind_section_ptr;
		mval = 0;
a1844 3
	      default:
		abort ();
	      }
d1846 5
a1850 13
	    /* Ignore a redefinition of an absolute symbol to the same
               value; it's harmless.  */
	    if (h->type == bfd_link_hash_defined
		&& bfd_is_abs_section (msec)
		&& bfd_is_abs_section (section)
		&& value == mval)
	      break;

	    if (! ((*info->callbacks->multiple_definition)
		   (info, h->root.string, msec->owner, msec, mval, abfd,
		    section, value)))
	      return false;
	  }
d1860 1
a1860 1
	    return false;
d1869 2
a1870 2
	    inh = bfd_wrapped_link_hash_lookup (abfd, info, string, true,
						copy, false);
d1872 1
a1872 1
	      return false;
d1877 2
a1878 2
		  (_("%s: indirect symbol `%s' to `%s' is a loop"),  
		   bfd_get_filename (abfd), name, string);
d1880 1
a1880 1
		return false;
d1895 1
a1895 1
		cycle = true;
d1907 1
a1907 1
	    return false;
d1918 1
a1918 1
		return false;
d1926 1
a1926 1
	  cycle = true;
d1934 1
a1934 1
	  cycle = true;
d1942 1
a1942 1
	    return false;
d1957 1
a1957 1
		return false;
d1972 1
a1972 1
	      return false;
d1981 1
d1983 1
a1983 2
		w = bfd_hash_allocate (&info->hash->table,
				       strlen (string) + 1);
d1985 2
a1986 2
		  return false;
		strcpy (w, string);
d2001 1
a2001 1
  return true;
d2006 1
a2006 1
boolean
d2025 1
a2025 1
	p->u.indirect.section->linker_mark = true;
d2030 1
a2030 1
      return false;
d2044 1
a2044 1
    return false;
d2075 2
a2076 2
		    return false;
		  relocs = (arelent **) bfd_malloc ((size_t) relsize);
d2078 1
a2078 1
		    return false;
d2084 1
d2086 1
a2086 1
		    return false;
a2089 1
		  free (relocs);
d2094 5
a2098 4
	      o->orelocation = ((arelent **)
				bfd_alloc (abfd,
					   (o->reloc_count
					    * sizeof (arelent *))));
d2100 1
a2100 1
		return false;
d2123 1
a2123 1
		return false;
d2126 2
a2127 2
	      if (! default_indirect_link_order (abfd, info, o, p, true))
		return false;
d2131 1
a2131 1
		return false;
d2137 1
a2137 1
  return true;
d2142 1
a2142 1
static boolean
d2151 1
d2157 3
a2159 2
      newsyms = (asymbol **) bfd_realloc (bfd_get_outsymbols (output_bfd),
					  *psymalloc * sizeof (asymbol *));
d2161 1
a2161 1
	return false;
d2169 1
a2169 1
  return true;
d2174 1
a2174 1
boolean
d2185 1
a2185 1
    return false;
d2202 1
a2202 1
		return false;
d2210 1
a2210 1
		return false;
d2225 1
a2225 1
      boolean output;
d2256 1
a2256 1
					       false, false, true));
d2260 1
a2260 1
					       false, false, true);
d2324 1
a2324 1
				   false, false)
d2326 1
a2326 1
	output = false;
d2335 1
a2335 1
	    output = true;
d2337 1
a2337 1
	    output = false;
d2340 1
a2340 1
	output = false;
d2344 1
a2344 1
	    output = true;
d2346 1
a2346 1
	    output = false;
d2350 1
a2350 1
	output = false;
d2354 1
a2354 1
	    output = false;
d2361 1
a2361 1
		  output = false;
d2363 6
d2371 1
a2371 1
		    output = false;
d2373 1
a2373 1
		    output = true;
d2376 1
a2376 1
		  output = true;
d2384 1
a2384 1
	    output = true;
d2386 1
a2386 1
	    output = false;
d2397 2
a2398 2
	  && sym->section->linker_mark == false)
	output = false;
d2403 1
a2403 1
	    return false;
d2405 1
a2405 1
	    h->written = true;
d2409 1
a2409 1
  return true;
d2478 1
a2478 1
boolean
d2487 3
d2491 1
a2491 1
    return true;
d2493 1
a2493 1
  h->written = true;
d2498 2
a2499 2
			      false, false) == NULL))
    return true;
d2507 1
a2507 1
	return false;
d2523 1
a2523 1
  return true;
d2528 1
a2528 1
boolean
d2542 1
a2542 1
  r = (arelent *) bfd_alloc (abfd, sizeof (arelent));
d2544 1
a2544 1
    return false;
d2551 1
a2551 1
      return false;
d2564 1
a2564 1
					 false, false, true));
d2571 1
a2571 1
	    return false;
d2573 1
a2573 1
	  return false;
d2587 2
a2588 1
      boolean ok;
d2593 1
a2593 1
	return false;
d2595 2
a2596 1
				      link_order->u.reloc.p->addend, buf);
d2614 1
a2614 1
	      return false;
d2618 3
a2620 4
      ok = bfd_set_section_contents (abfd, sec, (PTR) buf,
				     (file_ptr)
                                     (link_order->offset *
                                      bfd_octets_per_byte (abfd)), size);
d2623 1
a2623 1
	return false;
d2631 1
a2631 1
  return true;
d2641 1
d2644 1
a2644 2
  new = ((struct bfd_link_order *)
	 bfd_alloc (abfd, sizeof (struct bfd_link_order)));
a2648 3
  new->offset = 0;
  new->size = 0;
  new->next = (struct bfd_link_order *) NULL;
d2663 1
a2663 1
boolean
d2679 1
a2679 3
					  false);
    case bfd_fill_link_order:
      return default_fill_link_order (abfd, info, sec, link_order);
d2681 1
a2681 6
      return bfd_set_section_contents (abfd, sec,
				       (PTR) link_order->u.data.contents,
				       (file_ptr)
                                       (link_order->offset *
                                        bfd_octets_per_byte (abfd)),
				       link_order->size);
d2685 1
a2685 1
/* Default routine to handle a bfd_fill_link_order.  */
d2687 2
a2688 2
static boolean
default_fill_link_order (abfd, info, sec, link_order)
d2694 5
a2698 5
  size_t size;
  char *space;
  size_t i;
  int fill;
  boolean result;
d2702 35
a2736 16
  size = (size_t) link_order->size;
  space = (char *) bfd_malloc (size);
  if (space == NULL && size != 0)
    return false;

  fill = link_order->u.fill.value;
  for (i = 0; i < size; i += 2)
    space[i] = fill >> 8;
  for (i = 1; i < size; i += 2)
    space[i] = fill;
  result = bfd_set_section_contents (abfd, sec, space,
				     (file_ptr)
                                     (link_order->offset *
                                      bfd_octets_per_byte (abfd)),
				     link_order->size);
  free (space);
d2742 1
a2742 1
static boolean
d2749 1
a2749 1
     boolean generic_linker;
d2755 2
d2761 1
a2761 1
    return true;
d2783 1
a2783 1
      return false;
d2796 1
a2796 1
	return false;
d2828 1
a2828 1
						  false, false, true);
d2832 1
a2832 1
					  false, false, true);
d2840 3
a2842 3
  contents = ((bfd_byte *)
	      bfd_malloc (bfd_section_size (input_bfd, input_section)));
  if (contents == NULL && bfd_section_size (input_bfd, input_section) != 0)
d2851 1
d2853 1
a2853 5
				  (PTR) new_contents,
				  (file_ptr)
                                  (link_order->offset *
                                   bfd_octets_per_byte (output_bfd)),
                                  link_order->size))
d2858 1
a2858 1
  return true;
d2863 1
a2863 1
  return false;
d2892 1
a2892 1
        boolean bfd_link_split_section(bfd *abfd, asection *sec);
d2904 1
a2904 1
boolean
d2909 1
a2909 1
  return false;
@


1.5
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 1
a2 1
   Copyright (C) 1993, 94, 95, 96, 97, 98, 1999
d63 1
a63 1
@@menu	
d604 1
a604 1
void 
d1364 1
a1364 1
  FAIL,		/* Abort. */
d1467 1
a1467 1
     the hash table entry, and stored it in *HASHP. */
d1804 9
d2066 1
a2066 1
  
d2464 1
a2464 1
      
d2536 1
a2536 1
				     (file_ptr) 
d2606 1
a2606 1
				       (file_ptr) 
a2614 1
/*ARGSUSED*/
d2641 2
a2642 2
				     (file_ptr) 
                                     (link_order->offset * 
d2743 1
a2743 1
	}	  
d2761 2
a2762 2
                                  (link_order->offset * 
                                   bfd_octets_per_byte (output_bfd)), 
a2812 2


@


1.4
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 2
a3 1
   Copyright (C) 1993, 1994, 1995 Free Software Foundation, Inc.
d78 1
a78 1
	<<bfdlink.c>>.  @@xref{Hash Tables} for information on how to
d399 1
a399 2
	this prefix is described by the <<lprefix>> and
	<<lprefix_len>> fields of the <<bfd_link_info>> structure.
d697 1
a697 1
  if (abfd->outsymbols == (asymbol **) NULL)
d705 2
a706 2
      abfd->outsymbols = (asymbol **) bfd_alloc (abfd, symsize);
      if (abfd->outsymbols == NULL && symsize != 0)
d708 1
a708 1
      symcount = bfd_canonicalize_symtab (abfd, abfd->outsymbols);
d711 1
a711 1
      abfd->symcount = symcount;
d1323 1
d1325 6
a1330 7
	      /* Store a back pointer from the symbol to the hash
		 table entry for the benefit of relaxation code until
		 it gets rewritten to not use asymbol structures.
		 Setting this is also used to check whether these
		 symbols were set up by the generic linker.  */
	      p->udata.p = (PTR) h;
	    }
d1398 1
a1398 1
  /* COMMON_ROW	*/  {COM,   COM,   COM,   CREF,  CREF,  BIG,   CREF,  WARNC },
d1752 2
a1753 2
	    asection *msec;
	    bfd_vma mval;
d1939 2
a1940 2
  abfd->outsymbols = (asymbol **) NULL;
  abfd->symcount = 0;
d1962 6
d2057 1
a2057 1

d2069 1
a2069 1
  if (output_bfd->symcount >= *psymalloc)
d2077 1
a2077 1
      newsyms = (asymbol **) bfd_realloc (output_bfd->outsymbols,
d2081 1
a2081 1
      output_bfd->outsymbols = newsyms;
d2084 3
a2086 2
  output_bfd->outsymbols[output_bfd->symcount] = sym;
  ++output_bfd->symcount;
d2283 1
a2283 4
		  if (bfd_asymbol_name (sym)[0] == info->lprefix[0]
		      && (info->lprefix_len == 1
			  || strncmp (bfd_asymbol_name (sym), info->lprefix,
				      info->lprefix_len) == 0))
d2527 3
a2529 1
				     (file_ptr) link_order->offset, size);
d2553 1
a2553 1
	 bfd_alloc_by_size_t (abfd, sizeof (struct bfd_link_order)));
d2597 3
a2599 1
				       (file_ptr) link_order->offset,
d2610 1
a2610 1
     struct bfd_link_info *info;
d2633 3
a2635 1
				     (file_ptr) link_order->offset,
d2679 1
a2679 1
	("Attempt to do relocateable link with %s input and %s output",
d2752 4
a2755 1
				  link_order->offset, link_order->size))
d2810 2
a2811 2
     bfd *abfd;
     asection *sec;
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d1943 6
d2300 9
d2668 5
a2672 1
      abort ();
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d2227 5
a2231 4
      if (info->strip == strip_some
	  && (bfd_hash_lookup (info->keep_hash, bfd_asymbol_name (sym),
			       false, false)
	      == (struct bfd_hash_entry *) NULL))
@


1.1
log
@Initial revision
@
text
@a408 3
static struct bfd_hash_entry *generic_link_hash_newfunc
  PARAMS ((struct bfd_hash_entry *, struct bfd_hash_table *,
	   const char *));
d516 82
d633 2
a634 2
static struct bfd_hash_entry *
generic_link_hash_newfunc (entry, table, string)
d676 1
a676 4
    {
      bfd_set_error (bfd_error_no_memory);
      return (struct bfd_link_hash_table *) NULL;
    }
d678 1
a678 1
				   generic_link_hash_newfunc))
d707 1
a707 4
	{
	  bfd_set_error (bfd_error_no_memory);
	  return false;
	}
d1400 1
a1400 1
  /* WARN_ROW   */  {MWARN, WARN,  WARN,  CWARN, CWARN, WARN,  CWARN, CYCLE },
d1509 1
a1509 4
    {
      h = *hashp;
      BFD_ASSERT (strcmp (h->root.string, name) == 0);
    }
d1512 4
a1515 1
      h = bfd_link_hash_lookup (info->hash, name, true, copy, false);
d1524 4
a1527 3
  if (info->notice_hash != (struct bfd_hash_table *) NULL
      && (bfd_hash_lookup (info->notice_hash, name, false, false)
	  != (struct bfd_hash_entry *) NULL))
d1529 2
a1530 1
      if (! (*info->callbacks->notice) (info, name, abfd, section, value))
d1570 1
a1570 1
		 (info, name,
d1633 1
a1633 1
				name, abfd, section, value)))
d1704 1
a1704 1
		 (info, name,
d1737 1
a1737 1
		   (info, name, obfd, h->type, (bfd_vma) 0,
d1778 2
a1779 2
		   (info, name, msec->owner, msec, mval, abfd, section,
		    value)))
d1788 1
a1788 1
		 (info, name,
d1800 2
a1801 2
	    inh = bfd_link_hash_lookup (info->hash, string, true, copy,
					false);
d1836 3
a1838 2
	      if (! (*info->callbacks->warning) (info, h->u.i.warning, name,
						 abfd, (asection *) NULL,
d1861 1
a1861 1
	  if (! (*info->callbacks->warning) (info, string, name,
d1875 1
a1875 1
	      if (! (*info->callbacks->warning) (info, string, name,
d1986 1
a1986 1
		  relocs = (arelent **) malloc ((size_t) relsize);
d1988 1
a1988 4
		    {
		      bfd_set_error (bfd_error_no_memory);
		      return false;
		    }
d2009 1
a2009 4
		{
		  bfd_set_error (bfd_error_no_memory);
		  return false;
		}
d2065 2
a2066 5
      if (output_bfd->outsymbols == (asymbol **) NULL)
	newsyms = (asymbol **) malloc (*psymalloc * sizeof (asymbol *));
      else
	newsyms = (asymbol **) realloc (output_bfd->outsymbols,
					*psymalloc * sizeof (asymbol *));
d2068 1
a2068 4
	{
	  bfd_set_error (bfd_error_no_memory);
	  return false;
	}
d2158 5
d2392 1
a2392 4
    {
      sym = h->sym;
      BFD_ASSERT (strcmp (bfd_asymbol_name (sym), h->root.root.string) == 0);
    }
d2434 1
a2434 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }
d2451 2
a2452 1
      h = _bfd_generic_link_hash_lookup (_bfd_generic_hash_table (info),
d2454 1
a2454 1
					 false, false, true);
d2482 1
a2482 4
	{
	  bfd_set_error (bfd_error_no_memory);
	  return false;
	}
d2533 1
a2533 4
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }
d2599 1
a2599 1
  space = (char *) malloc (size);
d2601 1
a2601 4
    {
      bfd_set_error (bfd_error_no_memory);
      return false;
    }
d2694 4
d2710 1
a2710 1
	      malloc ((size_t) bfd_section_size (input_bfd, input_section)));
d2712 1
a2712 4
    {
      bfd_set_error (bfd_error_no_memory);
      goto error_return;
    }
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d409 3
a518 82
/* Look up a symbol in the main linker hash table if the symbol might
   be wrapped.  This should only be used for references to an
   undefined symbol, not for definitions of a symbol.  */

struct bfd_link_hash_entry *
bfd_wrapped_link_hash_lookup (abfd, info, string, create, copy, follow)
     bfd *abfd;
     struct bfd_link_info *info;
     const char *string;
     boolean create;
     boolean copy;
     boolean follow;
{
  if (info->wrap_hash != NULL)
    {
      const char *l;

      l = string;
      if (*l == bfd_get_symbol_leading_char (abfd))
	++l;

#undef WRAP
#define WRAP "__wrap_"

      if (bfd_hash_lookup (info->wrap_hash, l, false, false) != NULL)
	{
	  char *n;
	  struct bfd_link_hash_entry *h;

	  /* This symbol is being wrapped.  We want to replace all
             references to SYM with references to __wrap_SYM.  */

	  n = (char *) bfd_malloc (strlen (l) + sizeof WRAP + 1);
	  if (n == NULL)
	    return NULL;

	  /* Note that symbol_leading_char may be '\0'.  */
	  n[0] = bfd_get_symbol_leading_char (abfd);
	  n[1] = '\0';
	  strcat (n, WRAP);
	  strcat (n, l);
	  h = bfd_link_hash_lookup (info->hash, n, create, true, follow);
	  free (n);
	  return h;
	}

#undef WRAP

#undef REAL
#define REAL "__real_"

      if (*l == '_'
	  && strncmp (l, REAL, sizeof REAL - 1) == 0
	  && bfd_hash_lookup (info->wrap_hash, l + sizeof REAL - 1,
			      false, false) != NULL)
	{
	  char *n;
	  struct bfd_link_hash_entry *h;

	  /* This is a reference to __real_SYM, where SYM is being
             wrapped.  We want to replace all references to __real_SYM
             with references to SYM.  */

	  n = (char *) bfd_malloc (strlen (l + sizeof REAL - 1) + 2);
	  if (n == NULL)
	    return NULL;

	  /* Note that symbol_leading_char may be '\0'.  */
	  n[0] = bfd_get_symbol_leading_char (abfd);
	  n[1] = '\0';
	  strcat (n, l + sizeof REAL - 1);
	  h = bfd_link_hash_lookup (info->hash, n, create, true, follow);
	  free (n);
	  return h;
	}

#undef REAL
    }

  return bfd_link_hash_lookup (info->hash, string, create, copy, follow);
}

d554 2
a555 2
struct bfd_hash_entry *
_bfd_generic_link_hash_newfunc (entry, table, string)
d597 4
a600 1
    return (struct bfd_link_hash_table *) NULL;
d602 1
a602 1
				   _bfd_generic_link_hash_newfunc))
d631 4
a634 1
	return false;
d1327 1
a1327 1
  /* WARN_ROW   */  {MWARN, WARN,  WARN,  CWARN, CWARN, WARN,  CWARN, MWARN },
d1436 4
a1439 1
    h = *hashp;
d1442 1
a1442 4
      if (row == UNDEF_ROW || row == UNDEFW_ROW)
	h = bfd_wrapped_link_hash_lookup (abfd, info, name, true, copy, false);
      else
	h = bfd_link_hash_lookup (info->hash, name, true, copy, false);
d1451 3
a1453 4
  if (info->notice_all
      || (info->notice_hash != (struct bfd_hash_table *) NULL
	  && (bfd_hash_lookup (info->notice_hash, name, false, false)
	      != (struct bfd_hash_entry *) NULL)))
d1455 1
a1455 2
      if (! (*info->callbacks->notice) (info, h->root.string, abfd, section,
					value))
d1495 1
a1495 1
		 (info, h->root.string,
d1558 1
a1558 1
				h->root.string, abfd, section, value)))
d1629 1
a1629 1
		 (info, h->root.string,
d1662 1
a1662 1
		   (info, h->root.string, obfd, h->type, (bfd_vma) 0,
d1703 2
a1704 2
		   (info, h->root.string, msec->owner, msec, mval, abfd,
		    section, value)))
d1713 1
a1713 1
		 (info, h->root.string,
d1725 2
a1726 2
	    inh = bfd_wrapped_link_hash_lookup (abfd, info, string, true,
						copy, false);
d1761 2
a1762 3
	      if (! (*info->callbacks->warning) (info, h->u.i.warning,
						 h->root.string, abfd,
						 (asection *) NULL,
d1785 1
a1785 1
	  if (! (*info->callbacks->warning) (info, string, h->root.string,
d1799 1
a1799 1
	      if (! (*info->callbacks->warning) (info, string, h->root.string,
d1910 1
a1910 1
		  relocs = (arelent **) bfd_malloc ((size_t) relsize);
d1912 4
a1915 1
		    return false;
d1936 4
a1939 1
		return false;
d1995 5
a1999 2
      newsyms = (asymbol **) bfd_realloc (output_bfd->outsymbols,
					  *psymalloc * sizeof (asymbol *));
d2001 4
a2004 1
	return false;
a2093 5
	  else if (bfd_is_und_section (bfd_get_section (sym)))
	    h = ((struct generic_link_hash_entry *)
		 bfd_wrapped_link_hash_lookup (output_bfd, info,
					       bfd_asymbol_name (sym),
					       false, false, true));
d2323 4
a2326 1
    sym = h->sym;
d2368 4
a2371 1
    return false;
d2388 1
a2388 2
      h = ((struct generic_link_hash_entry *)
	   bfd_wrapped_link_hash_lookup (abfd, info,
d2390 1
a2390 1
					 false, false, true));
d2418 4
a2421 1
	return false;
d2472 4
a2475 1
    return NULL;
d2541 1
a2541 1
  space = (char *) bfd_malloc (size);
d2543 4
a2546 1
    return false;
a2638 4
	      else if (bfd_is_und_section (bfd_get_section (sym)))
		h = bfd_wrapped_link_hash_lookup (output_bfd, info,
						  bfd_asymbol_name (sym),
						  false, false, true);
d2651 1
a2651 1
	      bfd_malloc (bfd_section_size (input_bfd, input_section)));
d2653 4
a2656 1
    goto error_return;
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d2227 4
a2230 5
      if (info->strip == strip_all
	  || (info->strip == strip_some
	      && (bfd_hash_lookup (info->keep_hash, bfd_asymbol_name (sym),
				   false, false)
		  == (struct bfd_hash_entry *) NULL)))
@


1.1.1.4
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a1942 6
  /* Mark all sections which will be included in the output file.  */
  for (o = abfd->sections; o != NULL; o = o->next)
    for (p = o->link_order_head; p != NULL; p = p->next)
      if (p->type == bfd_indirect_link_order)
	p->u.indirect.section->linker_mark = true;

a2293 9
      /* If this symbol is in a section which is not being included
	 in the output file, then we don't want to output the symbol.

	 Gross.  .bss and similar sections won't have the linker_mark
	 field set.  */
      if ((sym->section->flags & SEC_HAS_CONTENTS) != 0
	  && sym->section->linker_mark == false)
	output = false;

d2653 1
a2653 5
      (*_bfd_error_handler)
	("Attempt to do relocateable link with %s input and %s output",
	 bfd_get_target (input_bfd), bfd_get_target (output_bfd));
      bfd_set_error (bfd_error_wrong_format);
      return false;
@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright (C) 1993, 94, 95, 96, 1997 Free Software Foundation, Inc.
d398 2
a399 1
	this is controlled by the <<bfd_is_local_label_name>> entry point.
d2276 4
a2279 1
		  if (bfd_is_local_label (input_bfd, sym))
d2547 1
a2547 1
	 bfd_alloc (abfd, sizeof (struct bfd_link_order)));
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright (C) 1993, 94, 95, 96, 97, 98, 1999
   Free Software Foundation, Inc.
d77 1
a77 1
	<<bfdlink.c>>.  @@xref{Hash Tables}, for information on how to
d696 1
a696 1
  if (bfd_get_outsymbols (abfd) == (asymbol **) NULL)
d704 2
a705 2
      bfd_get_outsymbols (abfd) = (asymbol **) bfd_alloc (abfd, symsize);
      if (bfd_get_outsymbols (abfd) == NULL && symsize != 0)
d707 1
a707 1
      symcount = bfd_canonicalize_symtab (abfd, bfd_get_outsymbols (abfd));
d710 1
a710 1
      bfd_get_symcount (abfd) = symcount;
d1322 7
a1329 7

	  /* Store a back pointer from the symbol to the hash
	     table entry for the benefit of relaxation code until
	     it gets rewritten to not use asymbol structures.
	     Setting this is also used to check whether these
	     symbols were set up by the generic linker.  */
	  p->udata.p = (PTR) h;
d1397 1
a1397 1
  /* COMMON_ROW	*/  {COM,   COM,   COM,   CREF,  CREF,  BIG,   REFC,  WARNC },
d1751 2
a1752 2
	    asection *msec = NULL;
	    bfd_vma mval = 0;
d1938 2
a1939 2
  bfd_get_outsymbols (abfd) = (asymbol **) NULL;
  bfd_get_symcount (abfd) = 0;
a1960 6
  /* Make sure we have a trailing NULL pointer on OUTSYMBOLS.  We
     shouldn't really need one, since we have SYMCOUNT, but some old
     code still expects one.  */
  if (! generic_add_output_symbol (abfd, &outsymalloc, NULL))
    return false;

d2050 1
a2050 1
  
d2062 1
a2062 1
  if (bfd_get_symcount (output_bfd) >= *psymalloc)
d2070 1
a2070 1
      newsyms = (asymbol **) bfd_realloc (bfd_get_outsymbols (output_bfd),
d2074 1
a2074 1
      bfd_get_outsymbols (output_bfd) = newsyms;
d2077 2
a2078 3
  bfd_get_outsymbols (output_bfd) [bfd_get_symcount (output_bfd)] = sym;
  if (sym != NULL)
    ++ bfd_get_symcount (output_bfd);
d2519 1
a2519 3
				     (file_ptr) 
                                     (link_order->offset *
                                      bfd_octets_per_byte (abfd)), size);
d2587 1
a2587 3
				       (file_ptr) 
                                       (link_order->offset *
                                        bfd_octets_per_byte (abfd)),
d2598 1
a2598 1
     struct bfd_link_info *info ATTRIBUTE_UNUSED;
d2621 1
a2621 3
				     (file_ptr) 
                                     (link_order->offset * 
                                      bfd_octets_per_byte (abfd)),
d2665 1
a2665 1
	(_("Attempt to do relocateable link with %s input and %s output"),
d2738 1
a2738 4
				  (file_ptr)
                                  (link_order->offset * 
                                   bfd_octets_per_byte (output_bfd)), 
                                  link_order->size))
d2793 2
a2794 2
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *sec ATTRIBUTE_UNUSED;
@


1.1.1.7
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
d63 1
a63 1
@@menu
d604 1
a604 1
void
d1364 1
a1364 1
  FAIL,		/* Abort.  */
d1467 1
a1467 1
     the hash table entry, and stored it in *HASHP.  */
a1803 9
	    if (inh->type == bfd_link_hash_indirect
		&& inh->u.i.link == h)
	      {
		(*_bfd_error_handler)
		  (_("%s: indirect symbol `%s' to `%s' is a loop"),  
		   bfd_get_filename (abfd), name, string);
		bfd_set_error (bfd_error_invalid_operation);
		return false;
	      }
d2057 1
a2057 1

d2455 1
a2455 1

d2527 1
a2527 1
				     (file_ptr)
d2597 1
a2597 1
				       (file_ptr)
d2606 1
d2633 2
a2634 2
				     (file_ptr)
                                     (link_order->offset *
d2735 1
a2735 1
	}
d2753 2
a2754 2
                                  (link_order->offset *
                                   bfd_octets_per_byte (output_bfd)),
d2805 2
@


1.1.1.8
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
d6 1
a6 1
   This file is part of BFD, the Binary File Descriptor library.
d8 13
a20 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d203 1
a203 1
	<<keep_memory>> field of the <<info>> argument is TRUE, so
d409 1
a409 1
static bfd_boolean generic_link_read_symbols
d411 11
a421 12
static bfd_boolean generic_link_add_symbols
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean collect));
static bfd_boolean generic_link_add_object_symbols
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean collect));
static bfd_boolean generic_link_check_archive_element_no_collect
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *pneeded));
static bfd_boolean generic_link_check_archive_element_collect
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *pneeded));
static bfd_boolean generic_link_check_archive_element
  PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *pneeded,
	   bfd_boolean collect));
static bfd_boolean generic_link_add_symbol_list
d423 2
a424 3
	   bfd_boolean collect));
static bfd *hash_entry_bfd
  PARAMS ((struct bfd_link_hash_entry *));
d427 1
a427 1
static bfd_boolean generic_add_output_symbol
d429 1
a429 1
static bfd_boolean default_data_link_order
d432 1
a432 1
static bfd_boolean default_indirect_link_order
d434 1
a434 1
	   struct bfd_link_order *, bfd_boolean));
d448 2
d452 5
a456 7
  if (entry == NULL)
    {
      entry = (struct bfd_hash_entry *)
	bfd_hash_allocate (table, sizeof (struct bfd_link_hash_entry));
      if (entry == NULL)
	return entry;
    }
d459 4
a462 2
  entry = bfd_hash_newfunc (entry, table, string);
  if (entry)
a463 2
      struct bfd_link_hash_entry *h = (struct bfd_link_hash_entry *) entry;

d465 2
a466 2
      h->type = bfd_link_hash_new;
      h->next = NULL;
d469 1
a469 1
  return entry;
d475 1
a475 1
bfd_boolean
a485 2
  table->type = bfd_link_generic_hash_table;

d489 1
a489 1
/* Look up a symbol in a link hash table.  If follow is TRUE, we
d497 3
a499 3
     bfd_boolean create;
     bfd_boolean copy;
     bfd_boolean follow;
d525 3
a527 3
     bfd_boolean create;
     bfd_boolean copy;
     bfd_boolean follow;
a528 2
  bfd_size_type amt;

d540 1
a540 1
      if (bfd_hash_lookup (info->wrap_hash, l, FALSE, FALSE) != NULL)
d548 1
a548 2
	  amt = strlen (l) + sizeof WRAP + 1;
	  n = (char *) bfd_malloc (amt);
d557 1
a557 1
	  h = bfd_link_hash_lookup (info->hash, n, create, TRUE, follow);
d570 1
a570 1
			      FALSE, FALSE) != NULL)
d579 1
a579 2
	  amt = strlen (l + sizeof REAL - 1) + 2;
	  n = (char *) bfd_malloc (amt);
d587 1
a587 1
	  h = bfd_link_hash_lookup (info->hash, n, create, TRUE, follow);
d607 1
a607 1
     bfd_boolean (*func) PARAMS ((struct bfd_link_hash_entry *, PTR));
d611 1
a611 1
		     ((bfd_boolean (*) PARAMS ((struct bfd_hash_entry *, PTR)))
d631 1
a631 1
/* Routine to create an entry in a generic link hash table.  */
d639 3
d644 5
a648 7
  if (entry == NULL)
    {
      entry = (struct bfd_hash_entry *)
	bfd_hash_allocate (table, sizeof (struct generic_link_hash_entry));
      if (entry == NULL)
	return entry;
    }
d651 5
a655 2
  entry = _bfd_link_hash_newfunc (entry, table, string);
  if (entry)
a656 2
      struct generic_link_hash_entry *ret;

d658 1
a658 2
      ret = (struct generic_link_hash_entry *) entry;
      ret->written = FALSE;
d662 1
a662 1
  return entry;
d665 1
a665 1
/* Create a generic link hash table.  */
a671 1
  bfd_size_type amt = sizeof (struct generic_link_hash_table);
d673 2
a674 1
  ret = (struct generic_link_hash_table *) bfd_malloc (amt);
a685 11
void
_bfd_generic_link_hash_table_free (hash)
     struct bfd_link_hash_table *hash;
{
  struct generic_link_hash_table *ret
    = (struct generic_link_hash_table *) hash;

  bfd_hash_table_free (&ret->root.table);
  free (ret);
}

d693 1
a693 1
static bfd_boolean
d704 2
a705 3
	return FALSE;
      bfd_get_outsymbols (abfd) =
	(asymbol **) bfd_alloc (abfd, (bfd_size_type) symsize);
d707 1
a707 1
	return FALSE;
d710 1
a710 1
	return FALSE;
d714 1
a714 1
  return TRUE;
d721 1
a721 1
bfd_boolean
d726 1
a726 1
  return generic_link_add_symbols (abfd, info, FALSE);
d736 1
a736 1
bfd_boolean
d741 1
a741 14
  return generic_link_add_symbols (abfd, info, TRUE);
}

/* Indicate that we are only retrieving symbol values from this
   section.  We want the symbols to act as though the values in the
   file are absolute.  */

void
_bfd_generic_link_just_syms (sec, info)
     asection *sec;
     struct bfd_link_info *info ATTRIBUTE_UNUSED;
{
  sec->output_section = bfd_abs_section_ptr;
  sec->output_offset = sec->vma;
d746 1
a746 1
static bfd_boolean
d750 1
a750 1
     bfd_boolean collect;
d752 1
a752 1
  bfd_boolean ret;
d768 1
a768 1
      ret = FALSE;
d776 1
a776 1
static bfd_boolean
d780 1
a780 1
     bfd_boolean collect;
a781 3
  bfd_size_type symcount;
  struct symbol_cache_entry **outsyms;

d783 5
a787 4
    return FALSE;
  symcount = _bfd_generic_link_get_symcount (abfd);
  outsyms = _bfd_generic_link_get_symbols (abfd);
  return generic_link_add_symbol_list (abfd, info, symcount, outsyms, collect);
d798 1
a798 1
  unsigned int indx;
d819 1
a819 1
static bfd_boolean archive_hash_table_init
d858 1
a858 1
static bfd_boolean
d898 1
a898 1
   included.  CHECKFN should set *PNEEDED to TRUE if the object file
d901 1
a901 1
   to the global hash table.  CHECKFN should only return FALSE if some
d915 1
a915 1
bfd_boolean
d919 2
a920 2
     bfd_boolean (*checkfn)
       PARAMS ((bfd *, struct bfd_link_info *, bfd_boolean *pneeded));
d927 1
a927 1
  unsigned int indx;
d934 1
a934 1
	return TRUE;
d936 1
a936 1
      return FALSE;
d945 1
a945 1
    return FALSE;
d951 1
a951 1
      arh = archive_hash_lookup (&arsym_hash, arsym->name, TRUE, FALSE);
d1003 1
a1003 1
      arh = archive_hash_lookup (&arsym_hash, h->root.string, FALSE, FALSE);
d1006 2
a1007 18
	  /* If we haven't found the exact symbol we're looking for,
	     let's look for its import thunk */
	  if (info->pei386_auto_import)
	    {
	      bfd_size_type amt = strlen (h->root.string) + 10;
	      char *buf = (char *) bfd_malloc (amt);
	      if (buf == NULL)
		return FALSE;

	      sprintf (buf, "__imp_%s", h->root.string);
	      arh = archive_hash_lookup (&arsym_hash, buf, FALSE, FALSE);
	      free(buf);
	    }
	  if (arh == (struct archive_hash_entry *) NULL)
	    {
	      pundef = &(*pundef)->next;
	      continue;
	    }
d1009 1
d1014 1
a1014 1
	  bfd_boolean needed;
d1063 1
a1063 1
  return TRUE;
d1067 1
a1067 1
  return FALSE;
d1075 1
a1075 1
static bfd_boolean
d1079 1
a1079 1
     bfd_boolean *pneeded;
d1081 1
a1081 1
  return generic_link_check_archive_element (abfd, info, pneeded, FALSE);
d1088 1
a1088 1
static bfd_boolean
d1092 1
a1092 1
     bfd_boolean *pneeded;
d1094 1
a1094 1
  return generic_link_check_archive_element (abfd, info, pneeded, TRUE);
d1100 1
a1100 1
static bfd_boolean
d1104 2
a1105 2
     bfd_boolean *pneeded;
     bfd_boolean collect;
d1109 1
a1109 1
  *pneeded = FALSE;
d1112 1
a1112 1
    return FALSE;
d1133 2
a1134 2
      h = bfd_link_hash_lookup (info->hash, bfd_asymbol_name (p), FALSE,
				FALSE, TRUE);
d1150 1
a1150 1
	    return FALSE;
d1155 3
a1157 3
	    return FALSE;
	  *pneeded = TRUE;
	  return TRUE;
d1176 3
a1178 3
		return FALSE;
	      *pneeded = TRUE;
	      return TRUE;
d1194 1
a1194 1
	    return FALSE;
d1223 1
a1223 1
  return TRUE;
d1229 1
a1229 1
   is TRUE if constructors should be automatically collected by name
d1232 1
a1232 1
static bfd_boolean
d1238 1
a1238 1
     bfd_boolean collect;
a1261 1
	  struct bfd_link_hash_entry *bh;
d1283 1
a1283 1
	  bh = NULL;
d1286 3
a1288 3
		  p->value, string, FALSE, collect, &bh)))
	    return FALSE;
	  h = (struct generic_link_hash_entry *) bh;
d1334 1
a1334 1
  return TRUE;
d1398 1
a1398 1
  /* COMMON_ROW	*/  {COM,   COM,   COM,   CREF,  COM,   BIG,   REFC,  WARNC },
d1400 1
a1400 1
  /* WARN_ROW   */  {MWARN, WARN,  WARN,  CWARN, CWARN, WARN,  CWARN, NOACT },
d1461 1
a1461 1
   COPY is TRUE if NAME or STRING must be copied into locally
d1463 1
a1463 1
   COLLECT is TRUE if we should automatically collect gcc constructor
d1469 1
a1469 1
bfd_boolean
d1479 2
a1480 2
     bfd_boolean copy;
     bfd_boolean collect;
d1485 1
a1485 1
  bfd_boolean cycle;
d1513 1
a1513 1
	h = bfd_wrapped_link_hash_lookup (abfd, info, name, TRUE, copy, FALSE);
d1515 1
a1515 1
	h = bfd_link_hash_lookup (info->hash, name, TRUE, copy, FALSE);
d1520 1
a1520 1
	  return FALSE;
d1526 1
a1526 1
	  && (bfd_hash_lookup (info->notice_hash, name, FALSE, FALSE)
d1531 1
a1531 1
	return FALSE;
d1541 1
a1541 1
      cycle = FALSE;
d1573 1
a1573 1
	    return FALSE;
d1631 2
a1632 1
			       (info, c == 'I',
d1634 1
a1634 1
			  return FALSE;
d1652 1
a1652 1
	    return FALSE;
d1701 1
a1701 1
	     two sizes, and use the section required by the larger symbol.  */
d1707 1
a1707 1
	    return FALSE;
a1719 19

	      /* Some systems have special treatment for small commons,
		 hence we want to select the section used by the larger
		 symbol.  This makes sure the symbol does not go in a
		 small common section if it is now too large.  */
	      if (section == bfd_com_section_ptr)
		{
		  h->u.c.p->section
		    = bfd_make_section_old_way (abfd, "COMMON");
		  h->u.c.p->section->flags = SEC_ALLOC;
		}
	      else if (section->owner != abfd)
		{
		  h->u.c.p->section
		    = bfd_make_section_old_way (abfd, section->name);
		  h->u.c.p->section->flags = SEC_ALLOC;
		}
	      else
		h->u.c.p->section = section;
d1739 1
a1739 1
	      return FALSE;
d1751 3
a1753 4
	  if (!info->allow_multiple_definition)
	    {
	      asection *msec = NULL;
	      bfd_vma mval = 0;
d1755 13
a1767 13
	      switch (h->type)
		{
		case bfd_link_hash_defined:
		  msec = h->u.def.section;
		  mval = h->u.def.value;
		  break;
	        case bfd_link_hash_indirect:
		  msec = bfd_ind_section_ptr;
		  mval = 0;
		  break;
		default:
		  abort ();
		}
d1769 7
a1775 7
	      /* Ignore a redefinition of an absolute symbol to the
		 same value; it's harmless.  */
	      if (h->type == bfd_link_hash_defined
		  && bfd_is_abs_section (msec)
		  && bfd_is_abs_section (section)
		  && value == mval)
		break;
d1777 5
a1781 5
	      if (! ((*info->callbacks->multiple_definition)
		     (info, h->root.string, msec->owner, msec, mval,
		      abfd, section, value)))
		return FALSE;
	    }
d1791 1
a1791 1
	    return FALSE;
d1800 2
a1801 2
	    inh = bfd_wrapped_link_hash_lookup (abfd, info, string, TRUE,
						copy, FALSE);
d1803 1
a1803 1
	      return FALSE;
d1808 2
a1809 2
		  (_("%s: indirect symbol `%s' to `%s' is a loop"),
		   bfd_archive_filename (abfd), name, string);
d1811 1
a1811 1
		return FALSE;
d1826 1
a1826 1
		cycle = TRUE;
d1838 1
a1838 1
	    return FALSE;
d1849 1
a1849 1
		return FALSE;
d1857 1
a1857 1
	  cycle = TRUE;
d1865 1
a1865 1
	  cycle = TRUE;
d1873 1
a1873 1
	    return FALSE;
d1888 1
a1888 1
		return FALSE;
d1903 1
a1903 1
	      return FALSE;
a1911 1
		size_t len = strlen (string) + 1;
d1913 2
a1914 1
		w = bfd_hash_allocate (&info->hash->table, len);
d1916 2
a1917 2
		  return FALSE;
		memcpy (w, string, len);
d1932 1
a1932 1
  return TRUE;
d1937 1
a1937 1
bfd_boolean
d1956 1
a1956 1
	p->u.indirect.section->linker_mark = TRUE;
d1961 1
a1961 1
      return FALSE;
d1975 1
a1975 1
    return FALSE;
d2006 2
a2007 2
		    return FALSE;
		  relocs = (arelent **) bfd_malloc ((bfd_size_type) relsize);
d2009 1
a2009 1
		    return FALSE;
a2014 1
		  free (relocs);
d2016 1
a2016 1
		    return FALSE;
d2020 1
d2025 4
a2028 5
	      bfd_size_type amt;

	      amt = o->reloc_count;
	      amt *= sizeof (arelent *);
	      o->orelocation = (arelent **) bfd_alloc (abfd, amt);
d2030 1
a2030 1
		return FALSE;
d2053 1
a2053 1
		return FALSE;
d2056 2
a2057 2
	      if (! default_indirect_link_order (abfd, info, o, p, TRUE))
		return FALSE;
d2061 1
a2061 1
		return FALSE;
d2067 1
a2067 1
  return TRUE;
d2072 1
a2072 1
static bfd_boolean
a2080 1
      bfd_size_type amt;
d2086 2
a2087 3
      amt = *psymalloc;
      amt *= sizeof (asymbol *);
      newsyms = (asymbol **) bfd_realloc (bfd_get_outsymbols (output_bfd), amt);
d2089 1
a2089 1
	return FALSE;
d2097 1
a2097 1
  return TRUE;
d2102 1
a2102 1
bfd_boolean
d2113 1
a2113 1
    return FALSE;
d2130 1
a2130 1
		return FALSE;
d2138 1
a2138 1
		return FALSE;
d2153 1
a2153 1
      bfd_boolean output;
d2184 1
a2184 1
					       FALSE, FALSE, TRUE));
d2188 1
a2188 1
					       FALSE, FALSE, TRUE);
d2252 1
a2252 1
				   FALSE, FALSE)
d2254 1
a2254 1
	output = FALSE;
d2263 1
a2263 1
	    output = TRUE;
d2265 1
a2265 1
	    output = FALSE;
d2268 1
a2268 1
	output = FALSE;
d2272 1
a2272 1
	    output = TRUE;
d2274 1
a2274 1
	    output = FALSE;
d2278 1
a2278 1
	output = FALSE;
d2282 1
a2282 1
	    output = FALSE;
d2289 1
a2289 1
		  output = FALSE;
a2290 6
		case discard_sec_merge:
		  output = TRUE;
		  if (info->relocateable
		      || ! (sym->section->flags & SEC_MERGE))
		    break;
		  /* FALLTHROUGH */
d2293 1
a2293 1
		    output = FALSE;
d2295 1
a2295 1
		    output = TRUE;
d2298 1
a2298 1
		  output = TRUE;
d2306 1
a2306 1
	    output = TRUE;
d2308 1
a2308 1
	    output = FALSE;
d2319 2
a2320 2
	  && ! sym->section->linker_mark)
	output = FALSE;
d2325 1
a2325 1
	    return FALSE;
d2327 1
a2327 1
	    h->written = TRUE;
d2331 1
a2331 1
  return TRUE;
d2400 1
a2400 1
bfd_boolean
a2408 3
  if (h->root.type == bfd_link_hash_warning)
    h = (struct generic_link_hash_entry *) h->root.u.i.link;

d2410 1
a2410 1
    return TRUE;
d2412 1
a2412 1
  h->written = TRUE;
d2417 2
a2418 2
			      FALSE, FALSE) == NULL))
    return TRUE;
d2426 1
a2426 1
	return FALSE;
d2442 1
a2442 1
  return TRUE;
d2447 1
a2447 1
bfd_boolean
d2461 1
a2461 1
  r = (arelent *) bfd_alloc (abfd, (bfd_size_type) sizeof (arelent));
d2463 1
a2463 1
    return FALSE;
d2470 1
a2470 1
      return FALSE;
d2483 1
a2483 1
					 FALSE, FALSE, TRUE));
d2490 1
a2490 1
	    return FALSE;
d2492 1
a2492 1
	  return FALSE;
d2506 1
a2506 2
      bfd_boolean ok;
      file_ptr loc;
d2511 1
a2511 1
	return FALSE;
d2513 1
a2513 2
				      (bfd_vma) link_order->u.reloc.p->addend,
				      buf);
d2531 1
a2531 1
	      return FALSE;
d2535 4
a2538 3
      loc = link_order->offset * bfd_octets_per_byte (abfd);
      ok = bfd_set_section_contents (abfd, sec, (PTR) buf, loc,
				     (bfd_size_type) size);
d2541 1
a2541 1
	return FALSE;
d2549 1
a2549 1
  return TRUE;
a2558 1
  bfd_size_type amt = sizeof (struct bfd_link_order);
d2561 2
a2562 1
  new = (struct bfd_link_order *) bfd_zalloc (abfd, amt);
d2567 3
d2584 1
a2584 1
bfd_boolean
d2600 3
a2602 1
					  FALSE);
d2604 6
a2609 1
      return default_data_link_order (abfd, info, sec, link_order);
d2613 1
a2613 1
/* Default routine to handle a bfd_data_link_order.  */
d2615 2
a2616 2
static bfd_boolean
default_data_link_order (abfd, info, sec, link_order)
d2622 5
a2626 5
  bfd_size_type size;
  size_t fill_size;
  bfd_byte *fill;
  file_ptr loc;
  bfd_boolean result;
d2630 16
a2645 35
  size = link_order->size;
  if (size == 0)
    return TRUE;

  fill = link_order->u.data.contents;
  fill_size = link_order->u.data.size;
  if (fill_size != 0 && fill_size < size)
    {
      bfd_byte *p;
      fill = (bfd_byte *) bfd_malloc (size);
      if (fill == NULL)
	return FALSE;
      p = fill;
      if (fill_size == 1)
	memset (p, (int) link_order->u.data.contents[0], (size_t) size);
      else
	{
	  do
	    {
	      memcpy (p, link_order->u.data.contents, fill_size);
	      p += fill_size;
	      size -= fill_size;
	    }
	  while (size >= fill_size);
	  if (size != 0)
	    memcpy (p, link_order->u.data.contents, (size_t) size);
	  size = link_order->size;
	}
    }

  loc = link_order->offset * bfd_octets_per_byte (abfd);
  result = bfd_set_section_contents (abfd, sec, fill, loc, size);

  if (fill != link_order->u.data.contents)
    free (fill);
d2651 1
a2651 1
static bfd_boolean
d2658 1
a2658 1
     bfd_boolean generic_linker;
a2663 2
  bfd_size_type sec_size;
  file_ptr loc;
d2668 1
a2668 1
    return TRUE;
d2690 1
a2690 1
      return FALSE;
d2703 1
a2703 1
	return FALSE;
d2735 1
a2735 1
						  FALSE, FALSE, TRUE);
d2739 1
a2739 1
					  FALSE, FALSE, TRUE);
d2747 3
a2749 3
  sec_size = bfd_section_size (input_bfd, input_section);
  contents = ((bfd_byte *) bfd_malloc (sec_size));
  if (contents == NULL && sec_size != 0)
a2757 1
  loc = link_order->offset * bfd_octets_per_byte (output_bfd);
d2759 5
a2763 1
				  (PTR) new_contents, loc, link_order->size))
d2768 1
a2768 1
  return TRUE;
d2773 1
a2773 1
  return FALSE;
d2802 1
a2802 1
        bfd_boolean bfd_link_split_section(bfd *abfd, asection *sec);
d2814 1
a2814 1
bfd_boolean
d2819 1
a2819 1
  return FALSE;
@


1.1.1.9
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 2
a3 2
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
   2003, 2004 Free Software Foundation, Inc.
d91 1
a91 1
	(this index number is used so that when doing a relocatable
d280 1
a280 1
	hash table.  When producing relocatable output, it must
d320 1
a320 1
	while generating a relocatable object file.
d342 1
a342 1
	section contents.  If performing a relocatable link, the
d409 4
d414 1
a414 3
  (bfd *, struct bfd_link_info *, bfd_boolean collect);
static bfd_boolean generic_link_add_symbols
  (bfd *, struct bfd_link_info *, bfd_boolean);
d416 1
a416 1
  (bfd *, struct bfd_link_info *, bfd_boolean *);
d418 1
a418 1
  (bfd *, struct bfd_link_info *, bfd_boolean *);
d420 2
a421 1
  (bfd *, struct bfd_link_info *, bfd_boolean *, bfd_boolean);
d423 6
a428 2
  (bfd *, struct bfd_link_info *, bfd_size_type count, asymbol **,
   bfd_boolean);
d430 1
a430 1
  (bfd *, size_t *psymalloc, asymbol *);
d432 2
a433 1
  (bfd *, struct bfd_link_info *, asection *, struct bfd_link_order *);
d435 2
a436 2
  (bfd *, struct bfd_link_info *, asection *, struct bfd_link_order *,
   bfd_boolean);
d445 4
a448 3
_bfd_link_hash_newfunc (struct bfd_hash_entry *entry,
			struct bfd_hash_table *table,
			const char *string)
d454 2
a455 1
      entry = bfd_hash_allocate (table, sizeof (struct bfd_link_hash_entry));
d468 1
a468 1
      h->und_next = NULL;
d478 6
a483 6
_bfd_link_hash_table_init
  (struct bfd_link_hash_table *table,
   bfd *abfd,
   struct bfd_hash_entry *(*newfunc) (struct bfd_hash_entry *,
				      struct bfd_hash_table *,
				      const char *))
d498 6
a503 5
bfd_link_hash_lookup (struct bfd_link_hash_table *table,
		      const char *string,
		      bfd_boolean create,
		      bfd_boolean copy,
		      bfd_boolean follow)
d510 1
a510 1
  if (follow && ret != NULL)
d525 7
a531 6
bfd_wrapped_link_hash_lookup (bfd *abfd,
			      struct bfd_link_info *info,
			      const char *string,
			      bfd_boolean create,
			      bfd_boolean copy,
			      bfd_boolean follow)
a537 1
      char prefix = '\0';
d540 2
a541 5
      if (*l == bfd_get_symbol_leading_char (abfd) || *l == info->wrap_char)
	{
	  prefix = *l;
	  ++l;
	}
d555 1
a555 1
	  n = bfd_malloc (amt);
d559 2
a560 1
	  n[0] = prefix;
d587 1
a587 1
	  n = bfd_malloc (amt);
d591 2
a592 1
	  n[0] = prefix;
d613 4
a616 4
bfd_link_hash_traverse
  (struct bfd_link_hash_table *table,
   bfd_boolean (*func) (struct bfd_link_hash_entry *, void *),
   void *info)
d619 2
a620 1
		     (bfd_boolean (*) (struct bfd_hash_entry *, void *)) func,
d626 9
a634 8
void
bfd_link_add_undef (struct bfd_link_hash_table *table,
		    struct bfd_link_hash_entry *h)
{
  BFD_ASSERT (h->und_next == NULL);
  if (table->undefs_tail != NULL)
    table->undefs_tail->und_next = h;
  if (table->undefs == NULL)
d642 4
a645 3
_bfd_generic_link_hash_newfunc (struct bfd_hash_entry *entry,
				struct bfd_hash_table *table,
				const char *string)
d651 1
a651 1
      entry =
d675 2
a676 1
_bfd_generic_link_hash_table_create (bfd *abfd)
d681 1
a681 1
  ret = bfd_malloc (amt);
d683 1
a683 1
    return NULL;
d688 1
a688 1
      return NULL;
d694 2
a695 1
_bfd_generic_link_hash_table_free (struct bfd_link_hash_table *hash)
d712 2
a713 1
generic_link_read_symbols (bfd *abfd)
d715 1
a715 1
  if (bfd_get_outsymbols (abfd) == NULL)
d723 2
a724 1
      bfd_get_outsymbols (abfd) = bfd_alloc (abfd, symsize);
d741 3
a743 1
_bfd_generic_link_add_symbols (bfd *abfd, struct bfd_link_info *info)
d756 3
a758 1
_bfd_generic_link_add_symbols_collect (bfd *abfd, struct bfd_link_info *info)
d768 3
a770 2
_bfd_generic_link_just_syms (asection *sec,
			     struct bfd_link_info *info ATTRIBUTE_UNUSED)
d779 4
a782 3
generic_link_add_symbols (bfd *abfd,
			  struct bfd_link_info *info,
			  bfd_boolean collect)
d809 4
a812 3
generic_link_add_object_symbols (bfd *abfd,
				 struct bfd_link_info *info,
				 bfd_boolean collect)
d815 1
a815 1
  struct bfd_symbol **outsyms;
d851 8
d862 4
a865 3
archive_hash_newfunc (struct bfd_hash_entry *entry,
		      struct bfd_hash_table *table,
		      const char *string)
d871 4
a874 3
  if (ret == NULL)
    ret = bfd_hash_allocate (table, sizeof (struct archive_hash_entry));
  if (ret == NULL)
d884 1
a884 1
      ret->defs = NULL;
d887 1
a887 1
  return &ret->root;
d893 5
a897 5
archive_hash_table_init
  (struct archive_hash_table *table,
   struct bfd_hash_entry *(*newfunc) (struct bfd_hash_entry *,
				      struct bfd_hash_table *,
				      const char *))
d950 5
a954 4
_bfd_generic_link_add_archive_symbols
  (bfd *abfd,
   struct bfd_link_info *info,
   bfd_boolean (*checkfn) (bfd *, struct bfd_link_info *, bfd_boolean *))
d967 1
a967 1
      if (bfd_openr_next_archived_file (abfd, NULL) == NULL)
d986 1
a986 1
      if (arh == NULL)
d993 3
a995 1
      for (pp = &arh->defs; *pp != NULL; pp = &(*pp)->next)
d1009 1
a1009 1
  while (*pundef != NULL)
d1030 1
a1030 1
	    *pundef = (*pundef)->und_next;
d1032 1
a1032 1
	    pundef = &(*pundef)->und_next;
d1038 1
a1038 1
      if (arh == NULL)
d1045 1
a1045 1
	      char *buf = bfd_malloc (amt);
d1053 1
a1053 1
	  if (arh == NULL)
d1055 1
a1055 1
	      pundef = &(*pundef)->und_next;
d1060 1
a1060 1
      for (l = arh->defs; l != NULL; l = l->next)
d1071 1
a1071 1
	  if (element == NULL)
d1104 1
a1104 1
      pundef = &(*pundef)->und_next;
d1125 4
a1128 4
generic_link_check_archive_element_no_collect (
					       bfd *abfd,
					       struct bfd_link_info *info,
					       bfd_boolean *pneeded)
d1138 4
a1141 3
generic_link_check_archive_element_collect (bfd *abfd,
					    struct bfd_link_info *info,
					    bfd_boolean *pneeded)
d1150 5
a1154 4
generic_link_check_archive_element (bfd *abfd,
				    struct bfd_link_info *info,
				    bfd_boolean *pneeded,
				    bfd_boolean collect)
d1184 1
a1184 1
      if (h == NULL
d1218 1
a1218 1
	  if (symbfd == NULL)
d1239 3
a1241 2
	    bfd_hash_allocate (&info->hash->table,
			       sizeof (struct bfd_link_hash_common_entry));
d1282 6
a1287 5
generic_link_add_symbol_list (bfd *abfd,
			      struct bfd_link_info *info,
			      bfd_size_type symbol_count,
			      asymbol **symbols,
			      bfd_boolean collect)
d1361 1
a1361 1
	      if (h->sym == NULL
d1380 1
a1380 1
	  p->udata.p = h;
d1480 2
a1481 1
hash_entry_bfd (struct bfd_link_hash_entry *h)
d1520 12
a1531 10
_bfd_generic_link_add_one_symbol (struct bfd_link_info *info,
				  bfd *abfd,
				  const char *name,
				  flagword flags,
				  asection *section,
				  bfd_vma value,
				  const char *string,
				  bfd_boolean copy,
				  bfd_boolean collect,
				  struct bfd_link_hash_entry **hashp)
d1575 3
a1577 2
      || (info->notice_hash != NULL
	  && bfd_hash_lookup (info->notice_hash, name, FALSE, FALSE) != NULL))
d1584 1
a1584 1
  if (hashp != NULL)
d1622 1
a1622 1
		  abfd, bfd_link_hash_defined, 0)))
d1697 3
a1699 2
	    bfd_hash_allocate (&info->hash->table,
			       sizeof (struct bfd_link_hash_common_entry));
d1743 2
a1744 2
	  if (h->und_next == NULL && info->hash->undefs_tail != h)
	    h->und_next = h;
d1805 1
a1805 1
		   (info, h->root.string, obfd, h->type, 0,
d1859 1
a1859 1
		  abfd, bfd_link_hash_indirect, 0)))
d1871 1
a1871 1
	    if (inh == NULL)
d1916 2
a1917 1
						 NULL, 0))
d1931 2
a1932 2
	  if (h->und_next == NULL && info->hash->undefs_tail != h)
	    h->und_next = h;
d1940 2
a1941 1
					     hash_entry_bfd (h), NULL, 0))
d1948 1
a1948 1
	     the und_next field is not NULL, or it is the tail of the
d1951 1
a1951 1
	  if (h->und_next != NULL || info->hash->undefs_tail == h)
d1954 3
a1956 1
						 hash_entry_bfd (h), NULL, 0))
d1969 2
a1970 1
		    (NULL, &info->hash->table, h->root.string)));
d2007 3
a2009 1
_bfd_generic_final_link (bfd *abfd, struct bfd_link_info *info)
d2017 1
a2017 1
  bfd_get_outsymbols (abfd) = NULL;
d2028 1
a2028 1
  for (sub = info->input_bfds; sub != NULL; sub = sub->link_next)
d2038 1
a2038 1
				   &wginfo);
d2046 1
a2046 1
  if (info->relocatable)
d2049 3
a2051 1
      for (o = abfd->sections; o != NULL; o = o->next)
d2054 3
a2056 1
	  for (p = o->link_order_head; p != NULL; p = p->next)
d2076 1
a2076 1
		  relocs = bfd_malloc (relsize);
d2098 1
a2098 1
	      o->orelocation = bfd_alloc (abfd, amt);
d2110 7
a2116 3
  for (o = abfd->sections; o != NULL; o = o->next)
    {
      for (p = o->link_order_head; p != NULL; p = p->next)
d2143 4
a2146 1
generic_add_output_symbol (bfd *output_bfd, size_t *psymalloc, asymbol *sym)
d2159 2
a2160 2
      newsyms = bfd_realloc (bfd_get_outsymbols (output_bfd), amt);
      if (newsyms == NULL)
d2175 5
a2179 4
_bfd_generic_link_output_symbols (bfd *output_bfd,
				  bfd *input_bfd,
				  struct bfd_link_info *info,
				  size_t *psymalloc)
d2188 1
a2188 1
  if (info->create_object_symbols_section != NULL)
d2192 3
a2194 1
      for (sec = input_bfd->sections; sec != NULL; sec = sec->next)
d2227 1
a2227 1
      h = NULL;
d2239 1
a2239 1
	    h = sym->udata.p;
d2262 1
a2262 1
	  if (h != NULL)
d2271 1
a2271 1
		  if (h->sym != NULL)
d2323 3
a2325 2
	      && bfd_hash_lookup (info->keep_hash, bfd_asymbol_name (sym),
				  FALSE, FALSE) == NULL))
d2365 1
a2365 1
		  if (info->relocatable
d2404 1
a2404 1
	  if (h != NULL)
d2416 3
a2418 1
set_symbol_from_hash (asymbol *sym, struct bfd_link_hash_entry *h)
d2479 3
a2481 2
_bfd_generic_link_write_global_symbol (struct generic_link_hash_entry *h,
				       void *data)
d2483 2
a2484 1
  struct generic_write_global_symbol_info *wginfo = data;
d2501 1
a2501 1
  if (h->sym != NULL)
d2529 5
a2533 4
_bfd_generic_reloc_link_order (bfd *abfd,
			       struct bfd_link_info *info,
			       asection *sec,
			       struct bfd_link_order *link_order)
d2537 1
a2537 1
  if (! info->relocatable)
d2539 1
a2539 1
  if (sec->orelocation == NULL)
d2542 2
a2543 2
  r = bfd_alloc (abfd, sizeof (arelent));
  if (r == NULL)
d2565 1
a2565 1
      if (h == NULL
d2569 2
a2570 1
		 (info, link_order->u.reloc.p->u.name, NULL, NULL, 0)))
d2591 2
a2592 2
      buf = bfd_zmalloc (size);
      if (buf == NULL)
d2611 1
a2611 1
		  NULL, NULL, 0)))
d2619 2
a2620 1
      ok = bfd_set_section_contents (abfd, sec, buf, loc, size);
d2637 3
a2639 1
bfd_new_link_order (bfd *abfd, asection *section)
d2644 1
a2644 1
  new = bfd_zalloc (abfd, amt);
d2650 1
a2650 1
  if (section->link_order_tail != NULL)
d2664 5
a2668 4
_bfd_default_link_order (bfd *abfd,
			 struct bfd_link_info *info,
			 asection *sec,
			 struct bfd_link_order *link_order)
d2688 5
a2692 4
default_data_link_order (bfd *abfd,
			 struct bfd_link_info *info ATTRIBUTE_UNUSED,
			 asection *sec,
			 struct bfd_link_order *link_order)
d2711 1
a2711 1
      fill = bfd_malloc (size);
d2743 7
a2749 5
default_indirect_link_order (bfd *output_bfd,
			     struct bfd_link_info *info,
			     asection *output_section,
			     struct bfd_link_order *link_order,
			     bfd_boolean generic_linker)
d2770 1
a2770 1
  if (info->relocatable
d2772 1
a2772 1
      && output_section->orelocation == NULL)
d2780 1
a2780 1
	(_("Attempt to do relocatable link with %s input and %s output"),
d2824 1
a2824 1
		h = sym->udata.p;
d2841 1
a2841 1
  contents = bfd_malloc (sec_size);
d2845 1
a2845 1
		  (output_bfd, info, link_order, contents, info->relocatable,
d2853 1
a2853 1
				  new_contents, loc, link_order->size))
d2870 2
a2871 1
_bfd_count_link_order_relocs (struct bfd_link_order *link_order)
d2877 1
a2877 1
  for (l = link_order; l != NULL; l = l->next)
d2892 1
a2892 1
        bfd_boolean bfd_link_split_section (bfd *abfd, asection *sec);
d2905 3
a2907 2
_bfd_generic_link_split_section (bfd *abfd ATTRIBUTE_UNUSED,
				 asection *sec ATTRIBUTE_UNUSED)
@


