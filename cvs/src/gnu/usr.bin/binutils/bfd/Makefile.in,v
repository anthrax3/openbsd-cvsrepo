head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.12
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.10
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.6
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.18.0.20
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.24
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.22
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.18
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.16
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.14
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.12
	OPENBSD_5_0:1.18.0.10
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.8
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.6
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.4
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.17.0.18
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.16
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.14
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.12
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.10
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.8
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.6
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.4
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	BINUTILS_2_15:1.1.1.9
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	BINUTILS-2_14:1.1.1.8
	OPENBSD_3_5:1.14.0.8
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.6
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	binutils-2_11_2:1.1.1.7
	OPENBSD_3_1:1.12.0.8
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.6
	OPENBSD_3_0_BASE:1.12
	BINUTILS-2_10_1:1.1.1.6
	OPENBSD_2_9:1.12.0.4
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.8.0.6
	OPENBSD_2_7_BASE:1.8
	new-binutils:1.8.0.4
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.19
date	2015.04.06.18.29.27;	author kettenis;	state Exp;
branches;
next	1.18;
commitid	DQNigUiY2QvUNxoT;

1.18
date	2009.03.09.21.07.41;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.02.20.45.01;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.20.21.33.53;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.17.21.54.19;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.13.17.07.28;	author fgsch;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.08.19.39.24;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.14.16.48.09;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.13.12.06.09;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.12.23.05.28;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.12.19.11.03;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	99.05.02.17.06.45;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.05.01.03.14.06;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.02.09.04.01.33;	author smurph;	state Exp;
branches;
next	1.5;

1.5
date	97.04.23.15.38.40;	author graichen;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.03.32.32;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.18.59.00;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.42.38;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.18;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.18;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.04.37;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.36.38;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.11.19.14.11.50;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.17.22;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.45.19;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2002.05.13.13.19.28;	author fgsch;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.05.17.20.42.09;	author drahn;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.11.02.20.22.11;	author miod;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Add support for an efi-app-x86_64 target.  Needed for UEFI bootloader work.

ok mlarkin@@
@
text
@# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SHELL = @@SHELL@@

srcdir = @@srcdir@@
top_srcdir = @@top_srcdir@@
VPATH = @@srcdir@@
prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

bindir = @@bindir@@
sbindir = @@sbindir@@
libexecdir = @@libexecdir@@
datadir = @@datadir@@
sysconfdir = @@sysconfdir@@
sharedstatedir = @@sharedstatedir@@
localstatedir = @@localstatedir@@
libdir = @@libdir@@
infodir = @@infodir@@
mandir = @@mandir@@
includedir = @@includedir@@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@@PACKAGE@@
pkglibdir = $(libdir)/@@PACKAGE@@
pkgincludedir = $(includedir)/@@PACKAGE@@

top_builddir = .

ACLOCAL = @@ACLOCAL@@
AUTOCONF = @@AUTOCONF@@
AUTOMAKE = @@AUTOMAKE@@
AUTOHEADER = @@AUTOHEADER@@

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @@INSTALL_DATA@@
INSTALL_SCRIPT = @@INSTALL_SCRIPT@@
transform = @@program_transform_name@@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = @@build_alias@@
build_triplet = @@build@@
host_alias = @@host_alias@@
host_triplet = @@host@@
target_alias = @@target_alias@@
target_triplet = @@target@@
AR = @@AR@@
AS = @@AS@@
BFD_HOST_64BIT_LONG = @@BFD_HOST_64BIT_LONG@@
BFD_HOST_64_BIT = @@BFD_HOST_64_BIT@@
BFD_HOST_64_BIT_DEFINED = @@BFD_HOST_64_BIT_DEFINED@@
BFD_HOST_LONG_LONG = @@BFD_HOST_LONG_LONG@@
BFD_HOST_U_64_BIT = @@BFD_HOST_U_64_BIT@@
CATALOGS = @@CATALOGS@@
CATOBJEXT = @@CATOBJEXT@@
CC = @@CC@@
CC_FOR_BUILD = @@CC_FOR_BUILD@@
COREFILE = @@COREFILE@@
COREFLAG = @@COREFLAG@@
CXX = @@CXX@@
CXXCPP = @@CXXCPP@@
DATADIRNAME = @@DATADIRNAME@@
DLLTOOL = @@DLLTOOL@@
EXEEXT = @@EXEEXT@@
EXEEXT_FOR_BUILD = @@EXEEXT_FOR_BUILD@@
GCJ = @@GCJ@@
GCJFLAGS = @@GCJFLAGS@@
GMOFILES = @@GMOFILES@@
GMSGFMT = @@GMSGFMT@@
GT_NO = @@GT_NO@@
GT_YES = @@GT_YES@@
HDEFINES = @@HDEFINES@@
INCLUDE_LOCALE_H = @@INCLUDE_LOCALE_H@@
INSTOBJEXT = @@INSTOBJEXT@@
INTLDEPS = @@INTLDEPS@@
INTLLIBS = @@INTLLIBS@@
INTLOBJS = @@INTLOBJS@@
LIBTOOL = @@LIBTOOL@@
LN_S = @@LN_S@@
MAINT = @@MAINT@@
MAKEINFO = @@MAKEINFO@@
MKINSTALLDIRS = @@MKINSTALLDIRS@@
MSGFMT = @@MSGFMT@@
OBJDUMP = @@OBJDUMP@@
OBJEXT = @@OBJEXT@@
PACKAGE = @@PACKAGE@@
POFILES = @@POFILES@@
POSUB = @@POSUB@@
RANLIB = @@RANLIB@@
STRIP = @@STRIP@@
TDEFINES = @@TDEFINES@@
USE_INCLUDED_LIBINTL = @@USE_INCLUDED_LIBINTL@@
USE_NLS = @@USE_NLS@@
VERSION = @@VERSION@@
WIN32LDFLAGS = @@WIN32LDFLAGS@@
WIN32LIBADD = @@WIN32LIBADD@@
all_backends = @@all_backends@@
bfd_backends = @@bfd_backends@@
bfd_default_target_size = @@bfd_default_target_size@@
bfd_file_ptr = @@bfd_file_ptr@@
bfd_libs = @@bfd_libs@@
bfd_machines = @@bfd_machines@@
bfd_ufile_ptr = @@bfd_ufile_ptr@@
bfd_version = @@bfd_version@@
bfd_version_string = @@bfd_version_string@@
l = @@l@@
tdefaults = @@tdefaults@@
wordsize = @@wordsize@@

AUTOMAKE_OPTIONS = cygnus

INCDIR = $(srcdir)/../include
CSEARCH = -I. -I$(srcdir) -I$(INCDIR)
MKDEP = gcc -MM

SUBDIRS = doc po

docdir = doc
bfdlibdir = @@bfdlibdir@@
bfdincludedir = @@bfdincludedir@@

bfdlib_LTLIBRARIES = libbfd.la

WARN_CFLAGS = @@WARN_CFLAGS@@
AM_CFLAGS = $(WARN_CFLAGS)

# bfd.h goes here, for now
BFD_H = bfd.h

# Jim Kingdon notes:
# Writing S-records should be included in all (or at least most)
# *-*-coff, *-*-aout, etc., configurations, because people will want to
# be able to use objcopy to create S-records.  (S-records are not useful
# for the debugger, so if you are downloading things as S-records you
# need two copies of the executable, one to download and one for the
# debugger).
BFD32_LIBS = \
	archive.lo archures.lo bfd.lo bfdio.lo bfdwin.lo \
	cache.lo coffgen.lo corefile.lo \
	format.lo init.lo libbfd.lo opncls.lo reloc.lo \
	section.lo syms.lo targets.lo hash.lo linker.lo \
	srec.lo binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo \
	merge.lo dwarf2.lo simple.lo


BFD64_LIBS = archive64.lo

BFD32_LIBS_CFILES = \
	archive.c archures.c bfd.c bfdio.c bfdwin.c \
	cache.c coffgen.c corefile.c \
	format.c init.c libbfd.c opncls.c reloc.c \
	section.c syms.c targets.c hash.c linker.c \
	srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c \
	merge.c dwarf2.c simple.c


BFD64_LIBS_CFILES = archive64.c

# This list is alphabetized to make it easier to keep in sync
# with the decls and initializer in archures.c.
ALL_MACHINES = \
	cpu-a29k.lo \
	cpu-alpha.lo \
	cpu-arc.lo \
	cpu-arm.lo \
	cpu-avr.lo \
	cpu-cris.lo \
	cpu-d10v.lo \
	cpu-d30v.lo \
	cpu-dlx.lo \
	cpu-fr30.lo \
	cpu-frv.lo \
	cpu-h8300.lo \
	cpu-h8500.lo \
	cpu-hppa.lo \
	cpu-ia64.lo \
	cpu-i370.lo \
	cpu-i386.lo \
	cpu-i860.lo \
	cpu-i960.lo \
	cpu-ip2k.lo \
	cpu-iq2000.lo \
	cpu-m32r.lo \
	cpu-m68hc11.lo \
	cpu-m68hc12.lo \
	cpu-m68k.lo \
	cpu-m88k.lo \
	cpu-m10200.lo \
	cpu-m10300.lo \
	cpu-mcore.lo \
	cpu-mips.lo \
	cpu-mmix.lo \
	cpu-msp430.lo \
	cpu-or32.lo \
	cpu-ns32k.lo \
	cpu-openrisc.lo \
	cpu-pdp11.lo \
	cpu-pj.lo \
	cpu-powerpc.lo \
	cpu-rs6000.lo \
	cpu-s390.lo \
	cpu-sh.lo \
	cpu-sparc.lo \
	cpu-tic30.lo \
	cpu-tic4x.lo \
	cpu-tic54x.lo \
	cpu-tic80.lo \
	cpu-v850.lo \
	cpu-vax.lo \
	cpu-we32k.lo \
	cpu-w65.lo \
	cpu-xstormy16.lo \
	cpu-xtensa.lo \
	cpu-z8k.lo


ALL_MACHINES_CFILES = \
	cpu-a29k.c \
	cpu-alpha.c \
	cpu-arc.c \
	cpu-arm.c \
	cpu-avr.c \
	cpu-cris.c \
	cpu-d10v.c \
	cpu-d30v.c \
	cpu-dlx.c \
	cpu-fr30.c \
	cpu-frv.c \
	cpu-h8300.c \
	cpu-h8500.c \
	cpu-hppa.c \
	cpu-ia64.c \
	cpu-i370.c \
	cpu-i386.c \
	cpu-i860.c \
	cpu-i960.c \
	cpu-ip2k.c \
	cpu-iq2000.c \
	cpu-m32r.c \
	cpu-m68hc11.c \
	cpu-m68hc12.c \
	cpu-m68k.c \
	cpu-m88k.c \
	cpu-m10200.c \
	cpu-m10300.c \
	cpu-mcore.c \
	cpu-mips.c \
	cpu-mmix.c \
	cpu-msp430.c \
	cpu-or32.c \
	cpu-ns32k.c \
	cpu-openrisc.c \
	cpu-pdp11.c \
	cpu-pj.c \
	cpu-powerpc.c \
	cpu-rs6000.c \
	cpu-s390.c \
	cpu-sh.c \
	cpu-sparc.c \
	cpu-tic30.c \
	cpu-tic4x.c \
	cpu-tic54x.c \
	cpu-tic80.c \
	cpu-v850.c \
	cpu-vax.c \
	cpu-we32k.c \
	cpu-w65.c \
	cpu-xstormy16.c \
	cpu-xtensa.c \
	cpu-z8k.c


# The .o files needed by all of the 32 bit vectors that are configured into
# target_vector in targets.c if configured with --enable-targets=all.
BFD32_BACKENDS = \
	aout-adobe.lo \
	aout-arm.lo \
	aout-cris.lo \
	aout-ns32k.lo \
	aout-sparcle.lo \
	aout-tic30.lo \
	aout0.lo \
	aout32.lo \
	armnetbsd.lo \
	bout.lo \
	cf-i386lynx.lo \
	cf-m68klynx.lo \
	cf-sparclynx.lo \
	coff-a29k.lo \
	coff-apollo.lo \
	coff-arm.lo \
	coff-aux.lo \
	coff-h8300.lo \
	coff-h8500.lo \
	coff-i386.lo \
	coff-go32.lo \
	coff-i860.lo \
	coff-i960.lo \
	coff-m68k.lo \
	coff-m88k.lo \
	coff-mips.lo \
	coff-or32.lo \
	coff-rs6000.lo \
	coff-sh.lo \
	coff-sparc.lo \
	coff-stgo32.lo \
	coff-svm68k.lo \
	coff-tic30.lo \
	coff-tic4x.lo \
	coff-tic54x.lo \
	coff-tic80.lo \
	coff-u68k.lo \
	coff-we32k.lo \
	coff-w65.lo \
	coff-z8k.lo \
	cofflink.lo \
	dwarf1.lo \
	ecoff.lo \
	ecofflink.lo \
	efi-app-ia32.lo \
	elf.lo \
	elf32-am33lin.lo \
	elf32-arc.lo \
	elfarm-oabi.lo \
	elfarm-nabi.lo \
	elf32-avr.lo \
	elf32-cris.lo \
	elf32-d10v.lo \
	elf32-d30v.lo \
	elf32-dlx.lo \
	elf32-fr30.lo \
	elf32-frv.lo \
	elf32-gen.lo \
	elf32-h8300.lo \
	elf32-hppa.lo \
	elf32-i370.lo \
	elf32-i386.lo \
	elf32-i860.lo \
	elf32-i960.lo \
	elf32-ia64.lo \
	elf32-ip2k.lo \
	elf32-iq2000.lo \
	elf32-m32r.lo \
	elf32-m68hc11.lo \
	elf32-m68hc12.lo \
	elf32-m68hc1x.lo \
	elf32-m68k.lo \
	elf32-m88k.lo \
	elf-m10200.lo \
	elf-m10300.lo \
	elf32-mcore.lo \
	elfxx-mips.lo \
	elf32-mips.lo \
	elf32-msp430.lo \
	elf32-openrisc.lo \
	elf32-or32.lo \
	elf32-pj.lo \
	elf32-ppc.lo \
	elf32-s390.lo \
	elf32-sh.lo \
	elf32-sh64.lo \
	elf32-sh64-com.lo \
	elf32-sparc.lo \
	elf32-v850.lo \
	elf32-vax.lo \
	elf32-xstormy16.lo \
	elf32-xtensa.lo \
	elf32.lo \
	elflink.lo \
	elf-strtab.lo \
	elf-eh-frame.lo \
	epoc-pe-arm.lo \
	epoc-pei-arm.lo \
	hp300bsd.lo \
	hp300hpux.lo \
	som.lo \
	i386aout.lo \
	i386bsd.lo \
	i386dynix.lo \
	i386freebsd.lo \
	i386linux.lo \
	i386lynx.lo \
	i386msdos.lo \
	i386netbsd.lo \
	i386mach3.lo \
	i386os9k.lo \
	ieee.lo \
	m68k4knetbsd.lo \
	m68klinux.lo \
	m68klynx.lo \
	m68knetbsd.lo \
	m88kmach3.lo \
	m88kopenbsd.lo \
	mach-o.lo \
	mipsbsd.lo \
	newsos3.lo \
	nlm.lo \
	nlm32-i386.lo \
	nlm32-sparc.lo \
	nlm32-ppc.lo \
	nlm32.lo \
	ns32knetbsd.lo \
	oasys.lo \
	pc532-mach.lo \
	pdp11.lo \
	pef.lo \
	pe-arm.lo \
	pei-arm.lo \
	pe-i386.lo \
	pei-i386.lo \
	pe-mcore.lo \
	pei-mcore.lo \
	pe-ppc.lo \
	pei-ppc.lo \
	pe-sh.lo \
	pei-sh.lo \
	pe-mips.lo \
	pei-mips.lo \
	peigen.lo \
	ppcboot.lo \
	reloc16.lo \
	riscix.lo \
	sparclinux.lo \
	sparclynx.lo \
	sparcnetbsd.lo \
	sunos.lo \
	vaxnetbsd.lo \
	vax1knetbsd.lo \
	vaxbsd.lo \
	versados.lo \
	vms.lo \
	vms-gsd.lo \
	vms-hdr.lo \
	vms-misc.lo \
	vms-tir.lo \
	xcofflink.lo \
	xsym.lo \
	xtensa-isa.lo \
	xtensa-modules.lo


BFD32_BACKENDS_CFILES = \
	aout-adobe.c \
	aout-arm.c \
	aout-cris.c \
	aout-ns32k.c \
	aout-sparcle.c \
	aout-tic30.c \
	aout0.c \
	aout32.c \
	armnetbsd.c \
	bout.c \
	cf-i386lynx.c \
	cf-m68klynx.c \
	cf-sparclynx.c \
	coff-a29k.c \
	coff-apollo.c \
	coff-arm.c \
	coff-aux.c \
	coff-h8300.c \
	coff-h8500.c \
	coff-i386.c \
	coff-i860.c \
	coff-go32.c \
	coff-i960.c \
	coff-m68k.c \
	coff-m88k.c \
	coff-mips.c \
	coff-or32.c \
	coff-rs6000.c \
	coff-sh.c \
	coff-sparc.c \
	coff-stgo32.c \
	coff-svm68k.c \
	coff-tic30.c \
	coff-tic4x.c \
	coff-tic54x.c \
	coff-tic80.c \
	coff-u68k.c \
	coff-we32k.c \
	coff-w65.c \
	coff-z8k.c \
	cofflink.c \
	dwarf1.c \
	ecoff.c \
	ecofflink.c \
	efi-app-ia32.c \
	elf.c \
	elf32-am33lin.c \
	elf32-arc.c \
	elfarm-oabi.c \
	elfarm-nabi.c \
	elf32-avr.c \
	elf32-cris.c \
	elf32-d10v.c \
	elf32-d30v.c \
	elf32-dlx.c \
	elf32-fr30.c \
	elf32-frv.c \
	elf32-gen.c \
	elf32-h8300.c \
	elf32-hppa.c \
	elf32-i370.c \
	elf32-i386.c \
	elf32-i860.c \
	elf32-i960.c \
	elf32-ip2k.c \
	elf32-iq2000.c \
	elf32-m32r.c \
	elf32-m68k.c \
	elf32-m68hc11.c \
	elf32-m68hc12.c \
	elf32-m68hc1x.c \
	elf32-m88k.c \
	elf-m10200.c \
	elf-m10300.c \
	elf32-mcore.c \
	elfxx-mips.c \
	elf32-mips.c \
	elf32-msp430.c \
	elf32-openrisc.c \
	elf32-or32.c \
	elf32-pj.c \
	elf32-ppc.c \
	elf32-sh64.c \
	elf32-sh64-com.c \
	elf32-s390.c \
	elf32-sh.c \
	elf32-sparc.c \
	elf32-v850.c \
	elf32-vax.c \
	elf32-xstormy16.c \
	elf32-xtensa.c \
	elf32.c \
	elflink.c \
	elf-strtab.c \
	elf-eh-frame.c \
	epoc-pe-arm.c \
	epoc-pei-arm.c \
	hp300bsd.c \
	hp300hpux.c \
	som.c \
	i386aout.c \
	i386bsd.c \
	i386dynix.c \
	i386freebsd.c \
	i386linux.c \
	i386lynx.c \
	i386msdos.c \
	i386netbsd.c \
	i386mach3.c \
	i386os9k.c \
	ieee.c \
	m68k4knetbsd.c \
	m68klinux.c \
	m68klynx.c \
	m68knetbsd.c \
	m88kmach3.c \
	m88kopenbsd.c \
	mach-o.c \
	mipsbsd.c \
	newsos3.c \
	nlm.c \
	nlm32-i386.c \
	nlm32-sparc.c \
	nlm32-ppc.c \
	nlm32.c \
	ns32knetbsd.c \
	oasys.c \
	pc532-mach.c \
	pdp11.c \
	pef.c \
	pe-arm.c \
	pei-arm.c \
	pe-i386.c \
	pei-i386.c \
	pe-mcore.c \
	pei-mcore.c \
	pe-ppc.c \
	pei-ppc.c \
	pe-sh.c \
	pei-sh.c \
	pe-mips.c \
	pei-mips.c \
	ppcboot.c \
	reloc16.c \
	riscix.c \
	sparclinux.c \
	sparclynx.c \
	sparcnetbsd.c \
	sunos.c \
	vaxnetbsd.c \
	vax1knetbsd.c \
	vaxbsd.c \
	versados.c \
	vms.c \
	vms-gsd.c \
	vms-hdr.c \
	vms-misc.c \
	vms-tir.c \
	xcofflink.c \
	xsym.c \
	xtensa-isa.c \
	xtensa-modules.c


# The .o files needed by all of the 64 bit vectors that are configured into
# target_vector in targets.c if configured with --enable-targets=all
# and --enable-64-bit-bfd.
BFD64_BACKENDS = \
	aix5ppc-core.lo \
	aout64.lo \
	coff-alpha.lo \
	coff64-rs6000.lo \
	demo64.lo \
	efi-app-ia64.lo \
	efi-app-x86_64.lo \
	elf64-x86-64.lo \
	elf64-alpha.lo \
	elf64-hppa.lo \
	elf64-ia64.lo \
	elf64-gen.lo \
	elfn32-mips.lo \
	elf64-mips.lo \
	elf64-mmix.lo \
	elf64-sh64.lo \
	elf64-ppc.lo \
	elf64-s390.lo \
	elf64-sparc.lo \
	elf64.lo \
	mmo.lo \
	nlm32-alpha.lo \
	nlm64.lo \
	pepigen.lo


BFD64_BACKENDS_CFILES = \
	aix5ppc-core.c \
	aout64.c \
	coff-alpha.c \
	coff64-rs6000.c \
	demo64.c \
	efi-app-ia64.c \
	efi-app-x86_64.c \
	elf64-x86-64.c \
	elf64-alpha.c \
	elf64-hppa.c \
	elf64-gen.c \
	elfn32-mips.c \
	elf64-mips.c \
	elf64-mmix.c \
	elf64-ppc.c \
	elf64-s390.c \
	elf64-sh64.c \
	elf64-sparc.c \
	elf64.c \
	mmo.c \
	nlm32-alpha.c \
	nlm64.c


OPTIONAL_BACKENDS = \
	aix386-core.lo \
	hpux-core.lo \
	irix-core.lo \
	lynx-core.lo \
	osf-core.lo \
	sco5-core.lo \
	trad-core.lo \
	cisco-core.lo


OPTIONAL_BACKENDS_CFILES = \
	aix386-core.c \
	hpux-core.c \
	irix-core.c \
	lynx-core.c \
	osf-core.c \
	sco5-core.c \
	trad-core.c \
	cisco-core.c


# These are defined by configure.in:
WORDSIZE = @@wordsize@@
ALL_BACKENDS = @@all_backends@@
BFD_BACKENDS = @@bfd_backends@@
BFD_LIBS = @@bfd_libs@@
BFD_MACHINES = @@bfd_machines@@
TDEFAULTS = @@tdefaults@@

INCLUDES = -D_GNU_SOURCE @@HDEFINES@@ @@COREFLAG@@ @@TDEFINES@@ $(CSEARCH) $(CSWITCHES) -I$(srcdir)/../intl -I../intl

# C source files that correspond to .o's.
SOURCE_CFILES = \
	$(BFD32_LIBS_CFILES) \
	$(BFD64_LIBS_CFILES) \
	$(ALL_MACHINES_CFILES) \
	$(BFD32_BACKENDS_CFILES) \
	$(BFD64_BACKENDS_CFILES) \
	$(OPTIONAL_BACKENDS_CFILES)


BUILD_CFILES = \
	elf32-ia64.c elf64-ia64.c peigen.c pepigen.c


CFILES = $(SOURCE_CFILES) $(BUILD_CFILES)

SOURCE_HFILES = \
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h ecoffswap.h \
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h \
	elf64-hppa.h elfcode.h elfcore.h \
	freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h libxcoff.h mach-o.h \
	netbsd.h nlm-target.h nlmcode.h nlmswap.h ns32k.h \
	pef.h pef-traceback.h peicode.h som.h version.h \
	vms.h xcoff-target.h xsym.h


BUILD_HFILES = \
	bfdver.h elf32-target.h elf64-target.h targmatch.h


HFILES = $(SOURCE_HFILES) $(BUILD_HFILES)

SRC_POTFILES = $(SOURCE_CFILES) $(SOURCE_HFILES)
BLD_POTFILES = $(BUILD_CFILES) $(BUILD_HFILES)

# Various kinds of .o files to put in libbfd.a:
# BFD_BACKENDS	Routines the configured targets need.
# BFD_MACHINES	Architecture-specific routines the configured targets need.
# COREFILE	Core file routines for a native configuration
OFILES = $(BFD_BACKENDS) $(BFD_MACHINES) @@COREFILE@@

libbfd_la_SOURCES = $(BFD32_LIBS_CFILES) $(BFD64_LIBS_CFILES)
libbfd_la_DEPENDENCIES = $(OFILES) ofiles
libbfd_la_LIBADD = `cat ofiles` @@WIN32LIBADD@@
libbfd_la_LDFLAGS = -release $(VERSION) @@WIN32LDFLAGS@@

# libtool will build .libs/libbfd.a.  We create libbfd.a in the build
# directory so that we don't have to convert all the programs that use
# libbfd.a simultaneously.  This is a hack which should be removed if
# everything else starts using libtool.  FIXME.

noinst_LIBRARIES = libbfd.a
libbfd_a_SOURCES = 

BFD_H_DEPS = $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h
LOCAL_H_DEPS = libbfd.h sysdep.h config.h

BFD_H_FILES = bfd-in.h init.c opncls.c libbfd.c section.c archures.c \
	reloc.c syms.c bfd.c bfdio.c bfdwin.c \
	archive.c corefile.c targets.c format.c

BFD64_H_FILES = archive64.c
LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c bfdio.c bfdwin.c \
	cache.c reloc.c archures.c elf.c

LIBCOFF_H_FILES = libcoff-in.h coffcode.h

MOSTLYCLEANFILES = ofiles stamp-ofiles

CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEPA DEP1 DEP2 libbfd.a stamp-lib \
	stmp-bin2-h stmp-lbfd-h stmp-lcoff-h


DISTCLEANFILES = $(BUILD_CFILES) $(BUILD_HFILES)
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =  bfd-in3.h bfdver.h
LIBRARIES =  $(noinst_LIBRARIES)


DEFS = @@DEFS@@ -I. -I$(srcdir) -I.
CPPFLAGS = @@CPPFLAGS@@
LDFLAGS = @@LDFLAGS@@
LIBS = @@LIBS@@
libbfd_a_LIBADD = 
libbfd_a_OBJECTS = 
LTLIBRARIES =  $(bfdlib_LTLIBRARIES)

libbfd_la_OBJECTS =  archive.lo archures.lo bfd.lo bfdio.lo bfdwin.lo \
cache.lo coffgen.lo corefile.lo format.lo init.lo libbfd.lo opncls.lo \
reloc.lo section.lo syms.lo targets.lo hash.lo linker.lo srec.lo \
binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo merge.lo dwarf2.lo \
simple.lo archive64.lo
CFLAGS = @@CFLAGS@@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@@
DIST_COMMON =  README ./stamp-h.in COPYING ChangeLog Makefile.am \
Makefile.in TODO acinclude.m4 aclocal.m4 bfd-in2.h config.in configure \
configure.in version.h


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = tar
GZIP_ENV = --best
SOURCES = $(libbfd_a_SOURCES) $(libbfd_la_SOURCES)
OBJECTS = $(libbfd_a_OBJECTS) $(libbfd_la_OBJECTS)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .obj .s
$(srcdir)/Makefile.in: @@MAINTAINER_MODE_TRUE@@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --cygnus Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@@ CONFIG_HEADERS= $(SHELL) ./config.status

$(ACLOCAL_M4): @@MAINTAINER_MODE_TRUE@@ configure.in  acinclude.m4
	cd $(srcdir) && $(ACLOCAL)
$(srcdir)/configure: @@MAINTAINER_MODE_TRUE@@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)
	cd $(srcdir) && $(AUTOCONF)

config.h: stamp-h
	@@if test ! -f $@@; then \
		rm -f stamp-h; \
		$(MAKE) stamp-h; \
	else :; fi
stamp-h: $(srcdir)/config.in $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES= CONFIG_HEADERS=config.h:config.in \
	     $(SHELL) ./config.status
	@@echo timestamp > stamp-h 2> /dev/null
$(srcdir)/config.in: @@MAINTAINER_MODE_TRUE@@$(srcdir)/stamp-h.in
	@@if test ! -f $@@; then \
		rm -f $(srcdir)/stamp-h.in; \
		$(MAKE) $(srcdir)/stamp-h.in; \
	else :; fi
$(srcdir)/stamp-h.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOHEADER)
	@@echo timestamp > $(srcdir)/stamp-h.in 2> /dev/null

mostlyclean-hdr:

clean-hdr:

distclean-hdr:
	-rm -f config.h

maintainer-clean-hdr:
bfd-in3.h: $(top_builddir)/config.status bfd-in2.h
	cd $(top_builddir) && CONFIG_FILES=$@@:bfd-in2.h CONFIG_HEADERS= $(SHELL) ./config.status
bfdver.h: $(top_builddir)/config.status version.h
	cd $(top_builddir) && CONFIG_FILES=$@@:version.h CONFIG_HEADERS= $(SHELL) ./config.status

mostlyclean-noinstLIBRARIES:

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)

distclean-noinstLIBRARIES:

maintainer-clean-noinstLIBRARIES:

.c.o:
	$(COMPILE) -c $<

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.c.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

mostlyclean-bfdlibLTLIBRARIES:

clean-bfdlibLTLIBRARIES:
	-test -z "$(bfdlib_LTLIBRARIES)" || rm -f $(bfdlib_LTLIBRARIES)

distclean-bfdlibLTLIBRARIES:

maintainer-clean-bfdlibLTLIBRARIES:

libbfd.la: $(libbfd_la_OBJECTS) $(libbfd_la_DEPENDENCIES)
	$(LINK) -rpath $(bfdlibdir) $(libbfd_la_LDFLAGS) $(libbfd_la_OBJECTS) $(libbfd_la_LIBADD) $(LIBS)

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

@@SET_MAKE@@

all-recursive install-data-recursive install-exec-recursive \
installdirs-recursive install-recursive uninstall-recursive install-info-recursive \
check-recursive installcheck-recursive info-recursive dvi-recursive:
	@@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	target=`echo $@@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	rev=''; list='$(SUBDIRS)'; for subdir in $$list; do \
	  rev="$$subdir $$rev"; \
	  test "$$subdir" != "." || dot_seen=yes; \
	  true; \
	done; \
	test "$$dot_seen" = "no" && rev=". $$rev"; \
	target=`echo $@@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS: tags-recursive $(HEADERS) $(SOURCES) config.in $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
   if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
   fi; \
	done; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)config.in$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags config.in $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	-rm -rf $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) zxf $(distdir).tar.gz
	mkdir $(distdir)/=build
	mkdir $(distdir)/=inst
	dc_install_base=`cd $(distdir)/=inst && pwd`; \
	cd $(distdir)/=build \
	  && ../configure --srcdir=.. --prefix=$$dc_install_base \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) dist
	-rm -rf $(distdir)
	@@banner="$(distdir).tar.gz is ready for distribution"; \
	dashes=`echo "$$banner" | sed s/./=/g`; \
	echo "$$dashes"; \
	echo "$$banner"; \
	echo "$$dashes"
dist: distdir
	-chmod -R a+r $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) chozf $(distdir).tar.gz $(distdir)
	-rm -rf $(distdir)
dist-all: distdir
	-chmod -R a+r $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) chozf $(distdir).tar.gz $(distdir)
	-rm -rf $(distdir)
distdir: $(DISTFILES)
	-rm -rf $(distdir)
	mkdir $(distdir)
	-chmod 777 $(distdir)
	@@for file in $(DISTFILES); do \
	  if test -f $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	for subdir in $(SUBDIRS); do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    chmod 777 $(distdir)/$$subdir; \
	    (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir=../$(distdir) distdir=../$(distdir)/$$subdir distdir) \
	      || exit 1; \
	  fi; \
	done
info-am:
info: info-recursive
dvi-am:
dvi: dvi-recursive
check-am:
check: check-recursive
installcheck-am:
installcheck: installcheck-recursive
install-info-am: 
install-info: install-info-recursive
all-recursive-am: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

install-exec-am:
install-exec: install-exec-recursive

install-data-am: install-bfdlibLTLIBRARIES
install-data: install-data-recursive

install-am: all-am
	@@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-recursive
uninstall-am: uninstall-bfdlibLTLIBRARIES
uninstall: uninstall-recursive
all-am: Makefile $(LIBRARIES) $(LTLIBRARIES) config.h
all-redirect: all-recursive-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs)  $(DESTDIR)$(bfdlibdir)


mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-hdr mostlyclean-noinstLIBRARIES \
		mostlyclean-compile mostlyclean-libtool \
		mostlyclean-bfdlibLTLIBRARIES mostlyclean-tags \
		mostlyclean-generic

mostlyclean: mostlyclean-recursive

clean-am:  clean-hdr clean-noinstLIBRARIES clean-compile clean-libtool \
		clean-bfdlibLTLIBRARIES clean-tags clean-generic \
		mostlyclean-am

clean: clean-recursive

distclean-am:  distclean-hdr distclean-noinstLIBRARIES distclean-compile \
		distclean-libtool distclean-bfdlibLTLIBRARIES \
		distclean-tags distclean-generic clean-am
	-rm -f libtool

distclean: distclean-recursive
	-rm -f config.status

maintainer-clean-am:  maintainer-clean-hdr \
		maintainer-clean-noinstLIBRARIES \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-bfdlibLTLIBRARIES \
		maintainer-clean-tags maintainer-clean-generic \
		distclean-am
	@@echo "This command is intended for maintainers to use;"
	@@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-recursive
	-rm -f config.status

.PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \
mostlyclean-noinstLIBRARIES distclean-noinstLIBRARIES \
clean-noinstLIBRARIES maintainer-clean-noinstLIBRARIES \
mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool mostlyclean-bfdlibLTLIBRARIES \
distclean-bfdlibLTLIBRARIES clean-bfdlibLTLIBRARIES \
maintainer-clean-bfdlibLTLIBRARIES uninstall-bfdlibLTLIBRARIES \
install-bfdlibLTLIBRARIES install-data-recursive \
uninstall-data-recursive install-exec-recursive \
uninstall-exec-recursive installdirs-recursive uninstalldirs-recursive \
all-recursive check-recursive installcheck-recursive info-recursive \
dvi-recursive mostlyclean-recursive distclean-recursive clean-recursive \
maintainer-clean-recursive tags tags-recursive mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-info-am \
install-info all-recursive-am install-exec-am install-exec \
install-data-am install-data install-am install uninstall-am uninstall \
all-redirect all-am all installdirs-am installdirs mostlyclean-generic \
distclean-generic clean-generic maintainer-clean-generic clean \
mostlyclean distclean maintainer-clean


po/SRC-POTFILES.in: @@MAINT@@ Makefile $(SRC_POTFILES)
	for file in $(SRC_POTFILES); do echo $$file; done \
	  | LC_COLLATE= sort > tmp.src \
	  && mv tmp.src $(srcdir)/po/SRC-POTFILES.in

po/BLD-POTFILES.in: @@MAINT@@ Makefile $(BLD_POTFILES)
	for file in $(BLD_POTFILES); do echo $$file; done \
	  | LC_COLLATE= sort > tmp.bld \
	  && mv tmp.bld $(srcdir)/po/BLD-POTFILES.in

diststuff: info

stamp-ofiles: Makefile
	rm -f tofiles
	f=""; \
	for i in $(OFILES) ; do \
	  case " $$f " in \
	    *" $$i "*) ;; \
	    *) f="$$f $$i" ;; \
	  esac ; \
	done ; \
	echo $$f > tofiles
	$(SHELL) $(srcdir)/../move-if-change tofiles ofiles
	touch stamp-ofiles

ofiles: stamp-ofiles ; @@true

stamp-lib: libbfd.la
	libtooldir=`$(LIBTOOL) --config | sed -n -e 's/^objdir=//p'`; \
	if [ -f $$libtooldir/libbfd.a ]; then \
	  cp $$libtooldir/libbfd.a libbfd.tmp; \
	  $(RANLIB) libbfd.tmp; \
	  $(SHELL) $(srcdir)/../move-if-change libbfd.tmp libbfd.a; \
	else true; fi
	touch stamp-lib

libbfd.a: stamp-lib ; @@true

# This file holds an array associating configuration triplets and
# vector names.  It is built from config.bfd.  It is not compiled by
# itself, but is included by targets.c.
targmatch.h: config.bfd targmatch.sed
	rm -f targmatch.h
	sed -f $(srcdir)/targmatch.sed < $(srcdir)/config.bfd > targmatch.new
	mv -f targmatch.new targmatch.h

# When compiling archures.c and targets.c, supply the default target
# info from configure.

targets.lo: targets.c Makefile
	$(LIBTOOL) --mode=compile $(COMPILE) -c $(TDEFAULTS) $(srcdir)/targets.c

archures.lo: archures.c Makefile
	$(LIBTOOL) --mode=compile $(COMPILE) -c $(TDEFAULTS) $(srcdir)/archures.c

elf32-target.h : elfxx-target.h
	rm -f elf32-target.h
	sed -e s/NN/32/g < $(srcdir)/elfxx-target.h > elf32-target.new
	mv -f elf32-target.new elf32-target.h

elf64-target.h : elfxx-target.h
	rm -f elf64-target.h
	sed -e s/NN/64/g < $(srcdir)/elfxx-target.h > elf64-target.new
	mv -f elf64-target.new elf64-target.h

elf32-ia64.c : elfxx-ia64.c
	rm -f elf32-ia64.c
	sed -e s/NN/32/g < $(srcdir)/elfxx-ia64.c > elf32-ia64.new
	mv -f elf32-ia64.new elf32-ia64.c

elf64-ia64.c : elfxx-ia64.c
	rm -f elf64-ia64.c
	sed -e s/NN/64/g < $(srcdir)/elfxx-ia64.c > elf64-ia64.new
	mv -f elf64-ia64.new elf64-ia64.c

peigen.c : peXXigen.c
	rm -f peigen.c
	sed -e s/XX/pe/g < $(srcdir)/peXXigen.c > peigen.new
	mv -f peigen.new peigen.c

pepigen.c : peXXigen.c
	rm -f pepigen.c
	sed -e s/XX/pep/g < $(srcdir)/peXXigen.c > pepigen.new
	mv -f pepigen.new pepigen.c
$(BFD32_LIBS) \
 $(BFD64_LIBS) \
 $(ALL_MACHINES) \
 $(BFD32_BACKENDS) \
 $(BFD64_BACKENDS) \
 $(OPTIONAL_BACKENDS) @@COREFILE@@: $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)

install-bfdlibLTLIBRARIES: @@INSTALL_LIBBFD_TRUE@@install_libbfd
	@@$(NORMAL_INSTALL)

uninstall-bfdlibLTLIBRARIES: @@INSTALL_LIBBFD_TRUE@@uninstall_libbfd
	@@$(NORMAL_UNINSTALL)

.PHONY: install_libbfd uninstall_libbfd
install_libbfd: $(bfdlib_LTLIBRARIES) $(BFD_H)
	$(mkinstalldirs) $(DESTDIR)$(bfdlibdir)
	@@list='$(bfdlib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(bfdlibdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(bfdlibdir)/$$p; \
	  else :; fi; \
	done

uninstall_libbfd:
	list='$(bfdlib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(bfdlibdir)/$$p; \
	done
	rm -f $(DESTDIR)$(bfdincludedir)/bfd.h
	rm -f $(DESTDIR)$(bfdincludedir)/ansidecl.h
	rm -f $(DESTDIR)$(bfdincludedir)/symcat.h
	rm -f $(DESTDIR)$(bfdincludedir)/bfdlink.h

Makefile: $(srcdir)/configure.in

# Have to get rid of DEP1 here so that "$?" later includes all of $(CFILES).
DEP: dep.sed $(CFILES) $(HFILES) bfd.h
	rm -f DEP1
	$(MAKE) MKDEP="$(MKDEP)" DEP1
	sed -f dep.sed < DEP1 > DEPA
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> DEPA
	if grep ' /' DEPA > /dev/null 2> /dev/null; then \
	  echo 'make DEP failed!'; exit 1; \
	else \
	  mv -f DEPA $@@; \
	fi

DEP1: $(CFILES)
	echo '# DO NOT DELETE THIS LINE -- mkdep uses it.' > DEP2
	echo '# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.' >> DEP2
	$(MKDEP) $(INCLUDES) $(CFLAGS) $? >> DEP2
	mv -f DEP2 $@@

dep.sed: dep-in.sed config.status
	sed <$(srcdir)/dep-in.sed >dep.sed	\
		-e 's!@@BFD_H@@!$(BFD_H)!'	\
		-e 's!@@SRCDIR@@!$(srcdir)!'	\
		-e 's!@@TOPDIR@@!'`echo $(srcdir) | sed -e s,/bfd$$,,`'!'

dep: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < Makefile > tmp-Makefile
	cat DEP >> tmp-Makefile
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile Makefile

dep-in: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < $(srcdir)/Makefile.in > tmp-Makefile.in
	cat DEP >> tmp-Makefile.in
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile.in $(srcdir)/Makefile.in

dep-am: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < $(srcdir)/Makefile.am > tmp-Makefile.am
	cat DEP >> tmp-Makefile.am
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile.am $(srcdir)/Makefile.am

host-aout.lo: Makefile

# The following program can be used to generate a simple config file
# which can be folded into an h-XXX file for a new host, with some editing.
aout-params.h: gen-aout
	./gen-aout host > aout-params.h
gen-aout: $(srcdir)/gen-aout.c Makefile
	$(CC) -o gen-aout $(CSEARCH) $(CFLAGS) $(LFLAGS) $(srcdir)/gen-aout.c

$(BFD_H): stmp-bfd-h ; @@true

stmp-bfd-h: bfd-in3.h
	rm -f bfd-tmp.h
	cp bfd-in3.h bfd-tmp.h
	$(SHELL) $(srcdir)/../move-if-change bfd-tmp.h $(BFD_H)
	rm -f bfd-tmp.h
	touch stmp-bfd-h

# Could really use a "copy-if-change"...
headers:
	(cd $(docdir); $(MAKE) protos $(FLAGS_TO_PASS))
	cp $(docdir)/bfd.h bfd-in2.h-new
	$(SHELL) $(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
	cp $(docdir)/libbfd.h libbfd.h-new
	$(SHELL) $(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
	cp $(docdir)/libcoff.h libcoff.h-new
	$(SHELL) $(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h

# We only rebuild the header files automatically if we have been
# configured with --enable-maintainer-mode.

$(srcdir)/bfd-in2.h: @@MAINT@@ stmp-bin2-h ; @@true
stmp-bin2-h: $(BFD_H_FILES) $(BFD64_H_FILES)
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) bfd.h)
	cp $(docdir)/bfd.h bfd-in2.h-new
	$(SHELL) $(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
	touch stmp-bin2-h

$(srcdir)/libbfd.h: @@MAINT@@ stmp-lbfd-h ; @@true
stmp-lbfd-h: $(LIBBFD_H_FILES)
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) libbfd.h)
	cp $(docdir)/libbfd.h libbfd.h-new
	$(SHELL) $(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
	touch stmp-lbfd-h

$(srcdir)/libcoff.h: @@MAINT@@ stmp-lcoff-h ; @@true
stmp-lcoff-h: $(LIBCOFF_H_FILES)
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) libcoff.h)
	cp $(docdir)/libcoff.h libcoff.h-new
	$(SHELL) $(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h
	touch stmp-lcoff-h

# We want to rerun configure if config.bfd, configure.host or version.h change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd \
		$(srcdir)/configure.host $(srcdir)/version.h
	$(SHELL) ./config.status --recheck

# What appears below is generated by a hacked mkdep using gcc -MM.

# DO NOT DELETE THIS LINE -- mkdep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.
archive.lo: archive.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/safe-ctype.h
archures.lo: archures.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
bfd.lo: bfd.c bfdver.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
bfdio.lo: bfdio.c $(INCDIR)/filenames.h
bfdwin.lo: bfdwin.c $(INCDIR)/filenames.h
cache.lo: cache.c $(INCDIR)/filenames.h
coffgen.lo: coffgen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h
corefile.lo: corefile.c $(INCDIR)/filenames.h
format.lo: format.c $(INCDIR)/filenames.h
init.lo: init.c $(INCDIR)/filenames.h
libbfd.lo: libbfd.c $(INCDIR)/filenames.h
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h \
  $(INCDIR)/libiberty.h
reloc.lo: reloc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
section.lo: section.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
targets.lo: targets.c $(INCDIR)/filenames.h $(INCDIR)/fnmatch.h \
  targmatch.h
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h
linker.lo: linker.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
binary.lo: binary.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
tekhex.lo: tekhex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
stabs.lo: stabs.c $(INCDIR)/filenames.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/safe-ctype.h
stab-syms.lo: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
merge.lo: merge.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
dwarf2.lo: dwarf2.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
simple.lo: simple.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
archive64.lo: archive64.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h
cpu-a29k.lo: cpu-a29k.c $(INCDIR)/filenames.h
cpu-alpha.lo: cpu-alpha.c $(INCDIR)/filenames.h
cpu-arc.lo: cpu-arc.c $(INCDIR)/filenames.h
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
cpu-avr.lo: cpu-avr.c $(INCDIR)/filenames.h
cpu-cris.lo: cpu-cris.c $(INCDIR)/filenames.h
cpu-d10v.lo: cpu-d10v.c $(INCDIR)/filenames.h
cpu-d30v.lo: cpu-d30v.c $(INCDIR)/filenames.h
cpu-dlx.lo: cpu-dlx.c $(INCDIR)/filenames.h
cpu-fr30.lo: cpu-fr30.c $(INCDIR)/filenames.h
cpu-frv.lo: cpu-frv.c $(INCDIR)/filenames.h
cpu-h8300.lo: cpu-h8300.c $(INCDIR)/filenames.h
cpu-h8500.lo: cpu-h8500.c $(INCDIR)/filenames.h
cpu-hppa.lo: cpu-hppa.c $(INCDIR)/filenames.h
cpu-ia64.lo: cpu-ia64.c $(INCDIR)/filenames.h cpu-ia64-opc.c \
  $(srcdir)/../opcodes/ia64-opc.h $(INCDIR)/opcode/ia64.h
cpu-i370.lo: cpu-i370.c $(INCDIR)/filenames.h
cpu-i386.lo: cpu-i386.c $(INCDIR)/filenames.h
cpu-i860.lo: cpu-i860.c $(INCDIR)/filenames.h
cpu-i960.lo: cpu-i960.c $(INCDIR)/filenames.h
cpu-ip2k.lo: cpu-ip2k.c $(INCDIR)/filenames.h
cpu-iq2000.lo: cpu-iq2000.c $(INCDIR)/filenames.h
cpu-m32r.lo: cpu-m32r.c $(INCDIR)/filenames.h
cpu-m68hc11.lo: cpu-m68hc11.c $(INCDIR)/filenames.h
cpu-m68hc12.lo: cpu-m68hc12.c $(INCDIR)/filenames.h
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/filenames.h
cpu-m88k.lo: cpu-m88k.c $(INCDIR)/filenames.h
cpu-m10200.lo: cpu-m10200.c $(INCDIR)/filenames.h
cpu-m10300.lo: cpu-m10300.c $(INCDIR)/filenames.h
cpu-mcore.lo: cpu-mcore.c $(INCDIR)/filenames.h
cpu-mips.lo: cpu-mips.c $(INCDIR)/filenames.h
cpu-mmix.lo: cpu-mmix.c $(INCDIR)/filenames.h
cpu-msp430.lo: cpu-msp430.c $(INCDIR)/filenames.h
cpu-or32.lo: cpu-or32.c $(INCDIR)/filenames.h
cpu-ns32k.lo: cpu-ns32k.c $(INCDIR)/filenames.h ns32k.h
cpu-openrisc.lo: cpu-openrisc.c $(INCDIR)/filenames.h
cpu-pdp11.lo: cpu-pdp11.c $(INCDIR)/filenames.h
cpu-pj.lo: cpu-pj.c $(INCDIR)/filenames.h
cpu-powerpc.lo: cpu-powerpc.c $(INCDIR)/filenames.h
cpu-rs6000.lo: cpu-rs6000.c $(INCDIR)/filenames.h
cpu-s390.lo: cpu-s390.c $(INCDIR)/filenames.h
cpu-sh.lo: cpu-sh.c $(INCDIR)/filenames.h
cpu-sparc.lo: cpu-sparc.c $(INCDIR)/filenames.h
cpu-tic30.lo: cpu-tic30.c $(INCDIR)/filenames.h
cpu-tic4x.lo: cpu-tic4x.c $(INCDIR)/filenames.h
cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/filenames.h
cpu-tic80.lo: cpu-tic80.c $(INCDIR)/filenames.h
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
cpu-vax.lo: cpu-vax.c $(INCDIR)/filenames.h
cpu-we32k.lo: cpu-we32k.c $(INCDIR)/filenames.h
cpu-w65.lo: cpu-w65.c $(INCDIR)/filenames.h
cpu-xstormy16.lo: cpu-xstormy16.c $(INCDIR)/filenames.h
cpu-xtensa.lo: cpu-xtensa.c $(INCDIR)/filenames.h
cpu-z8k.lo: cpu-z8k.c $(INCDIR)/filenames.h
aout-adobe.lo: aout-adobe.c $(INCDIR)/filenames.h $(INCDIR)/aout/adobe.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h \
  $(INCDIR)/bfdlink.h
aout-arm.lo: aout-arm.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aoutx.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
aout-cris.lo: aout-cris.c aout32.c aoutx.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
aout-ns32k.lo: aout-ns32k.c $(INCDIR)/aout/aout64.h \
  ns32k.h libaout.h $(INCDIR)/bfdlink.h aoutx.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
aout-sparcle.lo: aout-sparcle.c $(INCDIR)/bfdlink.h \
  libaout.h aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
aout-tic30.lo: aout-tic30.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aoutx.h \
  $(INCDIR)/safe-ctype.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
aout32.lo: aout32.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
armnetbsd.lo: armnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
bout.lo: bout.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/bout.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h
cf-i386lynx.lo: cf-i386lynx.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-a29k.lo: coff-a29k.c $(INCDIR)/filenames.h $(INCDIR)/coff/a29k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-apollo.lo: coff-apollo.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/apollo.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-arm.lo: coff-arm.c $(INCDIR)/filenames.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-aux.lo: coff-aux.c $(INCDIR)/filenames.h $(INCDIR)/coff/aux-coff.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  coff-m68k.c libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  coffswap.h
coff-h8300.lo: coff-h8300.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/coff/h8300.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/libiberty.h \
  coffcode.h coffswap.h
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/h8500.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/filenames.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i860.lo: coff-i860.c $(INCDIR)/filenames.h $(INCDIR)/coff/i860.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i960.lo: coff-i960.c $(INCDIR)/filenames.h $(INCDIR)/coff/i960.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-m68k.lo: coff-m68k.c $(INCDIR)/filenames.h $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m88k.lo: coff-m88k.c $(INCDIR)/filenames.h $(INCDIR)/coff/m88k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-mips.lo: coff-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  libcoff.h libecoff.h coffswap.h ecoffswap.h
coff-or32.lo: coff-or32.c $(INCDIR)/filenames.h $(INCDIR)/coff/or32.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/coff/rs6000.h libcoff.h libxcoff.h coffcode.h \
  coffswap.h
coff-sh.lo: coff-sh.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-sparc.lo: coff-sparc.c $(INCDIR)/filenames.h $(INCDIR)/coff/sparc.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-stgo32.lo: coff-stgo32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/go32exe.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h go32stub.h
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-tic30.lo: coff-tic30.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/tic30.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-tic4x.lo: coff-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/tic4x.h $(INCDIR)/coff/ti.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic54x.h $(INCDIR)/coff/ti.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/tic80.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-we32k.lo: coff-we32k.c $(INCDIR)/filenames.h $(INCDIR)/coff/we32k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-w65.lo: coff-w65.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/w65.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/z8k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/safe-ctype.h
dwarf1.lo: dwarf1.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf.h
ecoff.lo: ecoff.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h libcoff.h libecoff.h
ecofflink.lo: ecofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/objalloc.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h libcoff.h libecoff.h
efi-app-ia32.lo: efi-app-ia32.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
elf.lo: elf.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h
elf32-am33lin.lo: elf32-am33lin.c elf-m10300.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-arc.lo: elf32-arc.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/arc.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-arm.h elf32-target.h
elfarm-nabi.lo: elfarm-nabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-arm.h elf32-target.h
elf32-avr.lo: elf32-avr.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-cris.lo: elf32-cris.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/cris.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-d10v.lo: elf32-d10v.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/d10v.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-d30v.lo: elf32-d30v.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/d30v.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-dlx.lo: elf32-dlx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dlx.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-fr30.lo: elf32-fr30.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/fr30.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-frv.lo: elf32-frv.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/frv.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/dwarf2.h $(INCDIR)/hashtab.h elf32-target.h
elf32-gen.lo: elf32-gen.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf32-h8300.lo: elf32-h8300.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/h8.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-hppa.lo: elf32-hppa.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf32-hppa.h elf-hppa.h elf32-target.h
elf32-i370.lo: elf32-i370.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-i860.lo: elf32-i860.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/i860.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-i960.lo: elf32-i960.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/i960.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-ip2k.lo: elf32-ip2k.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/ip2k.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-iq2000.lo: elf32-iq2000.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/iq2000.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m32r.lo: elf32-m32r.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32r.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/m68k.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-m68hc11.lo: elf32-m68hc11.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
elf32-m68hc12.lo: elf32-m68hc12.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
elf32-m68hc1x.lo: elf32-m68hc1x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h
elf32-m88k.lo: elf32-m88k.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf-m10200.lo: elf-m10200.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf-m10300.lo: elf-m10300.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mcore.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h $(INCDIR)/hashtab.h
elf32-mips.lo: elf32-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfxx-mips.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h ecoffswap.h elf32-target.h
elf32-msp430.lo: elf32-msp430.c $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/msp430.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-openrisc.lo: elf32-openrisc.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/openrisc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-or32.lo: elf32-or32.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/or32.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32-pj.lo: elf32-pj.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/pj.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h \
  elf32-ppc.h elf32-target.h
elf32-sh64.lo: elf32-sh64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh64.h elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-sh64-com.lo: elf32-sh64-com.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-sh64.h $(srcdir)/../opcodes/sh64-opc.h
elf32-s390.lo: elf32-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sparc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/sparc.h \
  elf32-target.h
elf32-v850.lo: elf32-v850.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/v850.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32-vax.lo: elf32-vax.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/vax.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-xstormy16.lo: elf32-xstormy16.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/xstormy16.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/xtensa.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-config.h elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h \
  $(INCDIR)/safe-ctype.h
elflink.lo: elflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h
elf-strtab.lo: elf-strtab.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
elf-eh-frame.lo: elf-eh-frame.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
hp300bsd.lo: hp300bsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
hp300hpux.lo: hp300hpux.c $(INCDIR)/aout/hp300hpux.h \
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
som.lo: som.c $(INCDIR)/alloca-conf.h $(INCDIR)/filenames.h
i386aout.lo: i386aout.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386bsd.lo: i386bsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386dynix.lo: i386dynix.c $(INCDIR)/aout/dynix3.h aoutx.h \
  $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
i386freebsd.lo: i386freebsd.c freebsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386msdos.lo: i386msdos.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386mach3.lo: i386mach3.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/filenames.h $(INCDIR)/ieee.h \
  libieee.h $(INCDIR)/safe-ctype.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68klinux.lo: m68klinux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
m68klynx.lo: m68klynx.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68knetbsd.lo: m68knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kopenbsd.lo: m88kopenbsd.c netbsd.h $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
mach-o.lo: mach-o.c mach-o.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h mach-o-target.c
mipsbsd.lo: mipsbsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.lo: newsos3.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c $(INCDIR)/filenames.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/filenames.h $(INCDIR)/nlm/i386-ext.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/nlm/sparc32-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/nlm/ppc-ext.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm32.lo: nlm32.c nlmcode.h $(INCDIR)/filenames.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
oasys.lo: oasys.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/oasys.h liboasys.h
pc532-mach.lo: pc532-mach.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
pdp11.lo: pdp11.c $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h $(INCDIR)/safe-ctype.h
pef.lo: pef.c $(INCDIR)/safe-ctype.h pef.h pef-traceback.h \
  $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
pe-arm.lo: pe-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-arm.lo: pei-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-i386.lo: pe-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-i386.lo: pei-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-mcore.lo: pe-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-mcore.lo: pei-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-ppc.lo: pe-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-ppc.lo: pei-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-sh.lo: pe-sh.c $(INCDIR)/filenames.h coff-sh.c $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  coffcode.h peicode.h libpei.h
pei-sh.lo: pei-sh.c $(INCDIR)/filenames.h coff-sh.c \
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h coffcode.h peicode.h \
  libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/filenames.h $(INCDIR)/coff/mipspe.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-mips.lo: pei-mips.c $(INCDIR)/filenames.h pe-mips.c \
  $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
ppcboot.lo: ppcboot.c $(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h
reloc16.lo: reloc16.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/coff/internal.h libcoff.h
riscix.lo: riscix.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sparclinux.lo: sparclinux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
sparclynx.lo: sparclynx.c $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
sparcnetbsd.lo: sparcnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sunos.lo: sunos.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
  $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
vax1knetbsd.lo: vax1knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
vaxbsd.lo: vaxbsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
versados.lo: versados.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
vms.lo: vms.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-gsd.lo: vms-gsd.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-hdr.lo: vms-hdr.c bfdver.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h vms.h
vms-misc.lo: vms-misc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
xcofflink.lo: xcofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h libcoff.h \
  libxcoff.h
xsym.lo: xsym.c xsym.h $(INCDIR)/filenames.h
xtensa-isa.lo: xtensa-isa.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
aix5ppc-core.lo: aix5ppc-core.c
aout64.lo: aout64.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h coffswap.h ecoffswap.h
coff64-rs6000.lo: coff64-rs6000.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/coff/rs6k64.h libcoff.h libxcoff.h coffcode.h \
  coffswap.h
demo64.lo: demo64.c aoutf1.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
efi-app-ia64.lo: efi-app-ia64.c $(INCDIR)/filenames.h \
  coff-ia64.c $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
efi-app-x86_64.lo: efi-app-x86_64.c $(INCDIR)/filenames.h \
  coff-ia64.c $(INCDIR)/coff/x86_64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
elf64-x86-64.lo: elf64-x86-64.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/x86-64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-alpha.lo: elf64-alpha.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/alpha.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h libcoff.h \
  libecoff.h ecoffswap.h elf64-target.h
elf64-hppa.lo: elf64-hppa.c $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf64-hppa.h elf-hppa.h elf64-target.h
elf64-gen.lo: elf64-gen.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf64-target.h
elfn32-mips.lo: elfn32-mips.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  ecoffswap.h elf32-target.h
elf64-mips.lo: elf64-mips.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
  elf64-target.h
elf64-mmix.lo: elf64-mmix.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/mmix.h elf64-target.h
elf64-ppc.lo: elf64-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc64.h $(INCDIR)/elf/reloc-macros.h \
  elf64-ppc.h elf64-target.h
elf64-s390.lo: elf64-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elf64-sh64.lo: elf64-sh64.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elf64-sparc.lo: elf64-sparc.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/sparc.h \
  $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elf64.lo: elf64.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h \
  $(INCDIR)/safe-ctype.h
mmo.lo: mmo.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/mmix.h
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/filenames.h \
  $(INCDIR)/nlm/alpha-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm64.lo: nlm64.c nlmcode.h $(INCDIR)/filenames.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
aix386-core.lo: aix386-core.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h
hpux-core.lo: hpux-core.c $(INCDIR)/filenames.h
irix-core.lo: irix-core.c $(INCDIR)/filenames.h
lynx-core.lo: lynx-core.c $(INCDIR)/filenames.h
osf-core.lo: osf-core.c $(INCDIR)/filenames.h
sco5-core.lo: sco5-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c $(INCDIR)/filenames.h
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
  elf32-target.h
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
  elf64-target.h
peigen.lo: peigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h libpei.h
netbsd-core.lo: netbsd-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
# IF YOU PUT ANYTHING HERE IT WILL GO AWAY

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
@


1.18
log
@Provide more dependencies for binutils to build with make -j on a.out
platforms; ok espie@@ kettenis@@
@
text
@d636 1
d663 1
d2076 4
@


1.17
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d1274 1
a1274 1
 $(OPTIONAL_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
d2170 2
@


1.16
log
@bfd support for OpenBSD/m88k a.out binaries, glueing existing bits together.
Gives us working objcopy, objdump, etc, and the ability to process core files
to some extent.

ok and pushed upstream kettenis@@
@
text
@d71 1
d119 1
d122 1
d156 7
a162 1
BFD32_LIBS =  	archive.lo archures.lo bfd.lo bfdio.lo bfdwin.lo 	cache.lo coffgen.lo corefile.lo 	format.lo init.lo libbfd.lo opncls.lo reloc.lo 	section.lo syms.lo targets.lo hash.lo linker.lo 	srec.lo binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo 	merge.lo dwarf2.lo simple.lo
d167 7
a173 1
BFD32_LIBS_CFILES =  	archive.c archures.c bfd.c bfdio.c bfdwin.c 	cache.c coffgen.c corefile.c 	format.c init.c libbfd.c opncls.c reloc.c 	section.c syms.c targets.c hash.c linker.c 	srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c 	merge.c dwarf2.c simple.c
d180 110
a289 4
ALL_MACHINES =  	cpu-a29k.lo 	cpu-alpha.lo 	cpu-arc.lo 	cpu-arm.lo 	cpu-avr.lo 	cpu-cris.lo 	cpu-d10v.lo 	cpu-d30v.lo 	cpu-dlx.lo 	cpu-fr30.lo 	cpu-frv.lo 	cpu-h8300.lo 	cpu-h8500.lo 	cpu-hppa.lo 	cpu-ia64.lo 	cpu-i370.lo 	cpu-i386.lo 	cpu-i860.lo 	cpu-i960.lo 	cpu-ip2k.lo 	cpu-iq2000.lo 	cpu-m32r.lo 	cpu-m68hc11.lo 	cpu-m68hc12.lo 	cpu-m68k.lo 	cpu-m88k.lo 	cpu-m10200.lo 	cpu-m10300.lo 	cpu-mcore.lo 	cpu-mips.lo 	cpu-mmix.lo 	cpu-msp430.lo 	cpu-or32.lo 	cpu-ns32k.lo 	cpu-openrisc.lo 	cpu-pdp11.lo 	cpu-pj.lo 	cpu-powerpc.lo 	cpu-rs6000.lo 	cpu-s390.lo 	cpu-sh.lo 	cpu-sparc.lo 	cpu-tic30.lo 	cpu-tic4x.lo 	cpu-tic54x.lo 	cpu-tic80.lo 	cpu-v850.lo 	cpu-vax.lo 	cpu-we32k.lo 	cpu-w65.lo 	cpu-xstormy16.lo 	cpu-xtensa.lo 	cpu-z8k.lo


ALL_MACHINES_CFILES =  	cpu-a29k.c 	cpu-alpha.c 	cpu-arc.c 	cpu-arm.c 	cpu-avr.c 	cpu-cris.c 	cpu-d10v.c 	cpu-d30v.c 	cpu-dlx.c 	cpu-fr30.c 	cpu-frv.c 	cpu-h8300.c 	cpu-h8500.c 	cpu-hppa.c 	cpu-ia64.c 	cpu-i370.c 	cpu-i386.c 	cpu-i860.c 	cpu-i960.c 	cpu-ip2k.c 	cpu-iq2000.c 	cpu-m32r.c 	cpu-m68hc11.c 	cpu-m68hc12.c 	cpu-m68k.c 	cpu-m88k.c 	cpu-m10200.c 	cpu-m10300.c 	cpu-mcore.c 	cpu-mips.c 	cpu-mmix.c 	cpu-msp430.c 	cpu-or32.c 	cpu-ns32k.c 	cpu-openrisc.c 	cpu-pdp11.c 	cpu-pj.c 	cpu-powerpc.c 	cpu-rs6000.c 	cpu-s390.c 	cpu-sh.c 	cpu-sparc.c 	cpu-tic30.c 	cpu-tic4x.c 	cpu-tic54x.c 	cpu-tic80.c 	cpu-v850.c 	cpu-vax.c 	cpu-we32k.c 	cpu-w65.c 	cpu-xstormy16.c 	cpu-xtensa.c 	cpu-z8k.c
d294 330
a623 4
BFD32_BACKENDS =  	aout-adobe.lo 	aout-arm.lo 	aout-cris.lo 	aout-ns32k.lo 	aout-sparcle.lo 	aout-tic30.lo 	aout0.lo 	aout32.lo 	armnetbsd.lo 	bout.lo 	cf-i386lynx.lo 	cf-m68klynx.lo 	cf-sparclynx.lo 	coff-a29k.lo 	coff-apollo.lo 	coff-arm.lo 	coff-aux.lo 	coff-h8300.lo 	coff-h8500.lo 	coff-i386.lo 	coff-go32.lo 	coff-i860.lo 	coff-i960.lo 	coff-m68k.lo 	coff-m88k.lo 	coff-mips.lo 	coff-or32.lo 	coff-rs6000.lo 	coff-sh.lo 	coff-sparc.lo 	coff-stgo32.lo 	coff-svm68k.lo 	coff-tic30.lo 	coff-tic4x.lo 	coff-tic54x.lo 	coff-tic80.lo 	coff-u68k.lo 	coff-we32k.lo 	coff-w65.lo 	coff-z8k.lo 	cofflink.lo 	dwarf1.lo 	ecoff.lo 	ecofflink.lo 	efi-app-ia32.lo 	elf.lo 	elf32-arc.lo 	elfarm-oabi.lo 	elfarm-nabi.lo 	elf32-avr.lo 	elf32-cris.lo 	elf32-d10v.lo 	elf32-d30v.lo 	elf32-dlx.lo 	elf32-fr30.lo 	elf32-frv.lo 	elf32-gen.lo 	elf32-h8300.lo 	elf32-hppa.lo 	elf32-i370.lo 	elf32-i386.lo 	elf32-i860.lo 	elf32-i960.lo 	elf32-ia64.lo 	elf32-ip2k.lo 	elf32-iq2000.lo 	elf32-m32r.lo 	elf32-m68hc11.lo 	elf32-m68hc12.lo 	elf32-m68hc1x.lo 	elf32-m68k.lo 	elf32-m88k.lo 	elf-m10200.lo 	elf-m10300.lo 	elf32-mcore.lo 	elfxx-mips.lo 	elf32-mips.lo 	elf32-msp430.lo 	elf32-openrisc.lo 	elf32-or32.lo 	elf32-pj.lo 	elf32-ppc.lo 	elf32-s390.lo 	elf32-sh.lo 	elf32-sh64.lo 	elf32-sh64-com.lo 	elf32-sparc.lo 	elf32-v850.lo 	elf32-vax.lo 	elf32-xstormy16.lo 	elf32-xtensa.lo 	elf32.lo 	elflink.lo 	elf-strtab.lo 	elf-eh-frame.lo 	epoc-pe-arm.lo 	epoc-pei-arm.lo 	hp300bsd.lo 	hp300hpux.lo 	som.lo 	i386aout.lo 	i386bsd.lo 	i386dynix.lo 	i386freebsd.lo 	i386linux.lo 	i386lynx.lo 	i386msdos.lo 	i386netbsd.lo 	i386mach3.lo 	i386os9k.lo 	ieee.lo 	m68k4knetbsd.lo 	m68klinux.lo 	m68klynx.lo 	m68knetbsd.lo 	m88kmach3.lo 	m88kopenbsd.lo	mach-o.lo 	mipsbsd.lo 	newsos3.lo 	nlm.lo 	nlm32-i386.lo 	nlm32-sparc.lo 	nlm32-ppc.lo 	nlm32.lo 	ns32knetbsd.lo 	oasys.lo 	pc532-mach.lo 	pdp11.lo 	pef.lo 	pe-arm.lo 	pei-arm.lo 	pe-i386.lo 	pei-i386.lo 	pe-mcore.lo 	pei-mcore.lo 	pe-ppc.lo 	pei-ppc.lo 	pe-sh.lo 	pei-sh.lo 	pe-mips.lo 	pei-mips.lo 	peigen.lo 	ppcboot.lo 	reloc16.lo 	riscix.lo 	sparclinux.lo 	sparclynx.lo 	sparcnetbsd.lo 	sunos.lo 	vaxnetbsd.lo 	vax1knetbsd.lo 	vaxbsd.lo 	versados.lo 	vms.lo 	vms-gsd.lo 	vms-hdr.lo 	vms-misc.lo 	vms-tir.lo 	xcofflink.lo 	xsym.lo 	xtensa-isa.lo 	xtensa-modules.lo


BFD32_BACKENDS_CFILES =  	aout-adobe.c 	aout-arm.c 	aout-cris.c 	aout-ns32k.c 	aout-sparcle.c 	aout-tic30.c 	aout0.c 	aout32.c 	armnetbsd.c 	bout.c 	cf-i386lynx.c 	cf-m68klynx.c 	cf-sparclynx.c 	coff-a29k.c 	coff-apollo.c 	coff-arm.c 	coff-aux.c 	coff-h8300.c 	coff-h8500.c 	coff-i386.c 	coff-i860.c 	coff-go32.c 	coff-i960.c 	coff-m68k.c 	coff-m88k.c 	coff-mips.c 	coff-or32.c 	coff-rs6000.c 	coff-sh.c 	coff-sparc.c 	coff-stgo32.c 	coff-svm68k.c 	coff-tic30.c 	coff-tic4x.c 	coff-tic54x.c 	coff-tic80.c 	coff-u68k.c 	coff-we32k.c 	coff-w65.c 	coff-z8k.c 	cofflink.c 	dwarf1.c 	ecoff.c 	ecofflink.c 	efi-app-ia32.c 	elf.c 	elf32-arc.c 	elfarm-oabi.c 	elfarm-nabi.c 	elf32-avr.c 	elf32-cris.c 	elf32-d10v.c 	elf32-d30v.c 	elf32-dlx.c 	elf32-fr30.c 	elf32-frv.c 	elf32-gen.c 	elf32-h8300.c 	elf32-hppa.c 	elf32-i370.c 	elf32-i386.c 	elf32-i860.c 	elf32-i960.c 	elf32-ip2k.c 	elf32-iq2000.c 	elf32-m32r.c 	elf32-m68k.c 	elf32-m68hc11.c 	elf32-m68hc12.c 	elf32-m68hc1x.c 	elf32-m88k.c 	elf-m10200.c 	elf-m10300.c 	elf32-mcore.c 	elfxx-mips.c 	elf32-mips.c 	elf32-msp430.c 	elf32-openrisc.c 	elf32-or32.c 	elf32-pj.c 	elf32-ppc.c 	elf32-sh64.c 	elf32-sh64-com.c 	elf32-s390.c 	elf32-sh.c 	elf32-sparc.c 	elf32-v850.c 	elf32-vax.c 	elf32-xstormy16.c 	elf32-xtensa.c 	elf32.c 	elflink.c 	elf-strtab.c 	elf-eh-frame.c 	epoc-pe-arm.c 	epoc-pei-arm.c 	hp300bsd.c 	hp300hpux.c 	som.c 	i386aout.c 	i386bsd.c 	i386dynix.c 	i386freebsd.c 	i386linux.c 	i386lynx.c 	i386msdos.c 	i386netbsd.c 	i386mach3.c 	i386os9k.c 	ieee.c 	m68k4knetbsd.c 	m68klinux.c 	m68klynx.c 	m68knetbsd.c 	m88kmach3.c 	m88kopenbsd.c	mach-o.c 	mipsbsd.c 	newsos3.c 	nlm.c 	nlm32-i386.c 	nlm32-sparc.c 	nlm32-ppc.c 	nlm32.c 	ns32knetbsd.c 	oasys.c 	pc532-mach.c 	pdp11.c 	pef.c 	pe-arm.c 	pei-arm.c 	pe-i386.c 	pei-i386.c 	pe-mcore.c 	pei-mcore.c 	pe-ppc.c 	pei-ppc.c 	pe-sh.c 	pei-sh.c 	pe-mips.c 	pei-mips.c 	ppcboot.c 	reloc16.c 	riscix.c 	sparclinux.c 	sparclynx.c 	sparcnetbsd.c 	sunos.c 	vaxnetbsd.c 	vax1knetbsd.c 	vaxbsd.c 	versados.c 	vms.c 	vms-gsd.c 	vms-hdr.c 	vms-misc.c 	vms-tir.c 	xcofflink.c 	xsym.c 	xtensa-isa.c 	xtensa-modules.c
d629 70
a698 10
BFD64_BACKENDS =  	aix5ppc-core.lo 	aout64.lo 	coff-alpha.lo 	coff64-rs6000.lo 	demo64.lo 	efi-app-ia64.lo 	elf64-x86-64.lo 	elf64-alpha.lo 	elf64-hppa.lo 	elf64-ia64.lo 	elf64-gen.lo 	elfn32-mips.lo 	elf64-mips.lo 	elf64-mmix.lo 	elf64-sh64.lo 	elf64-ppc.lo 	elf64-s390.lo 	elf64-sparc.lo 	elf64.lo 	mmo.lo 	nlm32-alpha.lo 	nlm64.lo 	pepigen.lo


BFD64_BACKENDS_CFILES =  	aix5ppc-core.c 	aout64.c 	coff-alpha.c 	coff64-rs6000.c 	demo64.c 	efi-app-ia64.c 	elf64-x86-64.c 	elf64-alpha.c 	elf64-hppa.c 	elf64-gen.c 	elfn32-mips.c 	elf64-mips.c 	elf64-mmix.c 	elf64-ppc.c 	elf64-s390.c 	elf64-sh64.c 	elf64-sparc.c 	elf64.c 	mmo.c 	nlm32-alpha.c 	nlm64.c


OPTIONAL_BACKENDS =  	aix386-core.lo 	hpux-core.lo 	irix-core.lo 	lynx-core.lo 	osf-core.lo 	sco5-core.lo 	trad-core.lo 	cisco-core.lo


OPTIONAL_BACKENDS_CFILES =  	aix386-core.c 	hpux-core.c 	irix-core.c 	lynx-core.c 	osf-core.c 	sco5-core.c 	trad-core.c 	cisco-core.c
d712 7
a718 1
SOURCE_CFILES =  	$(BFD32_LIBS_CFILES) 	$(BFD64_LIBS_CFILES) 	$(ALL_MACHINES_CFILES) 	$(BFD32_BACKENDS_CFILES) 	$(BFD64_BACKENDS_CFILES) 	$(OPTIONAL_BACKENDS_CFILES)
d721 2
a722 1
BUILD_CFILES =  	elf32-ia64.c elf64-ia64.c peigen.c pepigen.c
d727 10
a736 1
SOURCE_HFILES =  	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h ecoffswap.h 	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h 	elf64-hppa.h elfcode.h elfcore.h elflink.h 	freebsd.h genlink.h go32stub.h 	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h libieee.h 	libnlm.h liboasys.h libpei.h libxcoff.h mach-o.h 	netbsd.h nlm-target.h nlmcode.h nlmswap.h ns32k.h 	pef.h pef-traceback.h peicode.h som.h version.h 	vms.h xcoff-target.h xsym.h
d739 2
a740 1
BUILD_HFILES =  	bfdver.h elf32-target.h elf64-target.h targmatch.h
d770 3
a772 1
BFD_H_FILES = bfd-in.h init.c opncls.c libbfd.c section.c archures.c 	reloc.c syms.c bfd.c bfdio.c bfdwin.c 	archive.c corefile.c targets.c format.c
d775 2
a776 1
LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c bfdio.c bfdwin.c 	cache.c reloc.c archures.c elf.c
d782 2
a783 1
CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEPA DEP1 DEP2 libbfd.a stamp-lib 	stmp-bin2-h stmp-lbfd-h stmp-lcoff-h
d1186 2
a1187 1
	for file in $(SRC_POTFILES); do echo $$file; done | sort > tmp.src \
d1191 2
a1192 1
	for file in $(BLD_POTFILES); do echo $$file; done | sort > tmp.bld \
a1194 9
# The following target is retained for upgrade purposes.
# This target used to exist in older versions of this makefile, and was
# referenced by <builddir>/po/Makefile (which is created from <srcdir>/po/Make-in)
# So old versions of <builddir>/po/Makefile will try to regenerate themselves
# when make is next run, but that dependency cannot be completed without a build
# of po/POTFILES.in.  Hence the presence of this rule.  This rule will be deleted
# once it is no longer needed - probably in the fall of 2001.
po/POTFILES.in:

d1394 3
a1396 2
# We want to rerun configure if config.bfd or configure.host change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd $(srcdir)/configure.host
d1451 1
a1451 1
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h
d1635 1
a1635 1
  $(INCDIR)/coff/internal.h libcoff.h
d1655 4
d1698 1
a1698 1
  elf32-target.h
d1744 3
a1746 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
d1748 4
a1751 4
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68hc11.h \
  elf32-target.h elf32-m68hc1x.h
d1754 3
a1756 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
d1840 5
a1844 3
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/xtensa.h $(INCDIR)/xtensa-isa.h elf32-target.h
d1848 1
a1848 1
  elflink.h
d1851 1
a1851 1
  $(INCDIR)/elf/external.h
d1921 2
a1922 2
m88kopenbsd.lo: m88kopenbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1957 2
a1958 2
pef.lo: pef.c pef.h pef-traceback.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h
d2133 1
a2133 1
  elflink.h
d2157 2
a2158 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d2162 2
a2163 1
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
@


1.15
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d173 1
a173 1
BFD32_BACKENDS =  	aout-adobe.lo 	aout-arm.lo 	aout-cris.lo 	aout-ns32k.lo 	aout-sparcle.lo 	aout-tic30.lo 	aout0.lo 	aout32.lo 	armnetbsd.lo 	bout.lo 	cf-i386lynx.lo 	cf-m68klynx.lo 	cf-sparclynx.lo 	coff-a29k.lo 	coff-apollo.lo 	coff-arm.lo 	coff-aux.lo 	coff-h8300.lo 	coff-h8500.lo 	coff-i386.lo 	coff-go32.lo 	coff-i860.lo 	coff-i960.lo 	coff-m68k.lo 	coff-m88k.lo 	coff-mips.lo 	coff-or32.lo 	coff-rs6000.lo 	coff-sh.lo 	coff-sparc.lo 	coff-stgo32.lo 	coff-svm68k.lo 	coff-tic30.lo 	coff-tic4x.lo 	coff-tic54x.lo 	coff-tic80.lo 	coff-u68k.lo 	coff-we32k.lo 	coff-w65.lo 	coff-z8k.lo 	cofflink.lo 	dwarf1.lo 	ecoff.lo 	ecofflink.lo 	efi-app-ia32.lo 	elf.lo 	elf32-arc.lo 	elfarm-oabi.lo 	elfarm-nabi.lo 	elf32-avr.lo 	elf32-cris.lo 	elf32-d10v.lo 	elf32-d30v.lo 	elf32-dlx.lo 	elf32-fr30.lo 	elf32-frv.lo 	elf32-gen.lo 	elf32-h8300.lo 	elf32-hppa.lo 	elf32-i370.lo 	elf32-i386.lo 	elf32-i860.lo 	elf32-i960.lo 	elf32-ia64.lo 	elf32-ip2k.lo 	elf32-iq2000.lo 	elf32-m32r.lo 	elf32-m68hc11.lo 	elf32-m68hc12.lo 	elf32-m68hc1x.lo 	elf32-m68k.lo 	elf32-m88k.lo 	elf-m10200.lo 	elf-m10300.lo 	elf32-mcore.lo 	elfxx-mips.lo 	elf32-mips.lo 	elf32-msp430.lo 	elf32-openrisc.lo 	elf32-or32.lo 	elf32-pj.lo 	elf32-ppc.lo 	elf32-s390.lo 	elf32-sh.lo 	elf32-sh64.lo 	elf32-sh64-com.lo 	elf32-sparc.lo 	elf32-v850.lo 	elf32-vax.lo 	elf32-xstormy16.lo 	elf32-xtensa.lo 	elf32.lo 	elflink.lo 	elf-strtab.lo 	elf-eh-frame.lo 	epoc-pe-arm.lo 	epoc-pei-arm.lo 	hp300bsd.lo 	hp300hpux.lo 	som.lo 	i386aout.lo 	i386bsd.lo 	i386dynix.lo 	i386freebsd.lo 	i386linux.lo 	i386lynx.lo 	i386msdos.lo 	i386netbsd.lo 	i386mach3.lo 	i386os9k.lo 	ieee.lo 	m68k4knetbsd.lo 	m68klinux.lo 	m68klynx.lo 	m68knetbsd.lo 	m88kmach3.lo 	mach-o.lo 	mipsbsd.lo 	newsos3.lo 	nlm.lo 	nlm32-i386.lo 	nlm32-sparc.lo 	nlm32-ppc.lo 	nlm32.lo 	ns32knetbsd.lo 	oasys.lo 	pc532-mach.lo 	pdp11.lo 	pef.lo 	pe-arm.lo 	pei-arm.lo 	pe-i386.lo 	pei-i386.lo 	pe-mcore.lo 	pei-mcore.lo 	pe-ppc.lo 	pei-ppc.lo 	pe-sh.lo 	pei-sh.lo 	pe-mips.lo 	pei-mips.lo 	peigen.lo 	ppcboot.lo 	reloc16.lo 	riscix.lo 	sparclinux.lo 	sparclynx.lo 	sparcnetbsd.lo 	sunos.lo 	vaxnetbsd.lo 	vax1knetbsd.lo 	vaxbsd.lo 	versados.lo 	vms.lo 	vms-gsd.lo 	vms-hdr.lo 	vms-misc.lo 	vms-tir.lo 	xcofflink.lo 	xsym.lo 	xtensa-isa.lo 	xtensa-modules.lo
d176 1
a176 1
BFD32_BACKENDS_CFILES =  	aout-adobe.c 	aout-arm.c 	aout-cris.c 	aout-ns32k.c 	aout-sparcle.c 	aout-tic30.c 	aout0.c 	aout32.c 	armnetbsd.c 	bout.c 	cf-i386lynx.c 	cf-m68klynx.c 	cf-sparclynx.c 	coff-a29k.c 	coff-apollo.c 	coff-arm.c 	coff-aux.c 	coff-h8300.c 	coff-h8500.c 	coff-i386.c 	coff-i860.c 	coff-go32.c 	coff-i960.c 	coff-m68k.c 	coff-m88k.c 	coff-mips.c 	coff-or32.c 	coff-rs6000.c 	coff-sh.c 	coff-sparc.c 	coff-stgo32.c 	coff-svm68k.c 	coff-tic30.c 	coff-tic4x.c 	coff-tic54x.c 	coff-tic80.c 	coff-u68k.c 	coff-we32k.c 	coff-w65.c 	coff-z8k.c 	cofflink.c 	dwarf1.c 	ecoff.c 	ecofflink.c 	efi-app-ia32.c 	elf.c 	elf32-arc.c 	elfarm-oabi.c 	elfarm-nabi.c 	elf32-avr.c 	elf32-cris.c 	elf32-d10v.c 	elf32-d30v.c 	elf32-dlx.c 	elf32-fr30.c 	elf32-frv.c 	elf32-gen.c 	elf32-h8300.c 	elf32-hppa.c 	elf32-i370.c 	elf32-i386.c 	elf32-i860.c 	elf32-i960.c 	elf32-ip2k.c 	elf32-iq2000.c 	elf32-m32r.c 	elf32-m68k.c 	elf32-m68hc11.c 	elf32-m68hc12.c 	elf32-m68hc1x.c 	elf32-m88k.c 	elf-m10200.c 	elf-m10300.c 	elf32-mcore.c 	elfxx-mips.c 	elf32-mips.c 	elf32-msp430.c 	elf32-openrisc.c 	elf32-or32.c 	elf32-pj.c 	elf32-ppc.c 	elf32-sh64.c 	elf32-sh64-com.c 	elf32-s390.c 	elf32-sh.c 	elf32-sparc.c 	elf32-v850.c 	elf32-vax.c 	elf32-xstormy16.c 	elf32-xtensa.c 	elf32.c 	elflink.c 	elf-strtab.c 	elf-eh-frame.c 	epoc-pe-arm.c 	epoc-pei-arm.c 	hp300bsd.c 	hp300hpux.c 	som.c 	i386aout.c 	i386bsd.c 	i386dynix.c 	i386freebsd.c 	i386linux.c 	i386lynx.c 	i386msdos.c 	i386netbsd.c 	i386mach3.c 	i386os9k.c 	ieee.c 	m68k4knetbsd.c 	m68klinux.c 	m68klynx.c 	m68knetbsd.c 	m88kmach3.c 	mach-o.c 	mipsbsd.c 	newsos3.c 	nlm.c 	nlm32-i386.c 	nlm32-sparc.c 	nlm32-ppc.c 	nlm32.c 	ns32knetbsd.c 	oasys.c 	pc532-mach.c 	pdp11.c 	pef.c 	pe-arm.c 	pei-arm.c 	pe-i386.c 	pei-i386.c 	pe-mcore.c 	pei-mcore.c 	pe-ppc.c 	pei-ppc.c 	pe-sh.c 	pei-sh.c 	pe-mips.c 	pei-mips.c 	ppcboot.c 	reloc16.c 	riscix.c 	sparclinux.c 	sparclynx.c 	sparcnetbsd.c 	sunos.c 	vaxnetbsd.c 	vax1knetbsd.c 	vaxbsd.c 	versados.c 	vms.c 	vms-gsd.c 	vms-hdr.c 	vms-misc.c 	vms-tir.c 	xcofflink.c 	xsym.c 	xtensa-isa.c 	xtensa-modules.c
d1390 3
@


1.14
log
@resolve conflicts.
@
text
@d1 1
a1 1
# Makefile.in generated automatically by automake 1.4 from Makefile.am
d3 1
a3 1
# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.
d117 2
d120 2
d135 2
d138 1
a138 1
lib_LTLIBRARIES = libbfd.la
d153 1
a153 6
BFD_LIBS = \
	archive.lo archures.lo bfd.lo cache.lo coffgen.lo corefile.lo \
	format.lo init.lo libbfd.lo opncls.lo reloc.lo \
	section.lo syms.lo targets.lo hash.lo linker.lo \
	srec.lo binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo \
	dwarf2.lo
d156 1
a156 6
BFD_LIBS_CFILES = \
	archive.c archures.c bfd.c cache.c coffgen.c corefile.c \
	format.c init.c libbfd.c opncls.c reloc.c \
	section.c syms.c targets.c hash.c linker.c \
	srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c \
	dwarf2.c
d158 4
d165 4
a168 84
ALL_MACHINES = \
	cpu-a29k.lo \
	cpu-alpha.lo \
	cpu-arc.lo \
	cpu-arm.lo \
	cpu-avr.lo \
	cpu-cris.lo \
	cpu-d10v.lo \
	cpu-d30v.lo \
	cpu-fr30.lo \
	cpu-h8300.lo \
	cpu-h8500.lo \
	cpu-hppa.lo \
	cpu-ia64.lo \
	cpu-i370.lo \
	cpu-i386.lo \
	cpu-i860.lo \
	cpu-i960.lo \
	cpu-m32r.lo \
	cpu-m68hc11.lo \
	cpu-m68hc12.lo \
	cpu-m68k.lo \
	cpu-m88k.lo \
	cpu-m10200.lo \
	cpu-m10300.lo \
	cpu-mcore.lo \
	cpu-mips.lo \
	cpu-ns32k.lo \
	cpu-pj.lo \
	cpu-powerpc.lo \
	cpu-rs6000.lo \
	cpu-sh.lo \
	cpu-sparc.lo \
	cpu-tic30.lo \
	cpu-tic54x.lo \
	cpu-tic80.lo \
	cpu-v850.lo \
	cpu-vax.lo \
	cpu-we32k.lo \
	cpu-w65.lo \
	cpu-z8k.lo


ALL_MACHINES_CFILES = \
	cpu-a29k.c \
	cpu-alpha.c \
	cpu-arc.c \
	cpu-arm.c \
	cpu-avr.c \
	cpu-cris.c \
	cpu-d10v.c \
	cpu-d30v.c \
	cpu-fr30.c \
	cpu-h8300.c \
	cpu-h8500.c \
	cpu-hppa.c \
	cpu-ia64.c \
	cpu-i370.c \
	cpu-i386.c \
	cpu-i860.c \
	cpu-i960.c \
	cpu-m32r.c \
	cpu-m68hc11.c \
	cpu-m68hc12.c \
	cpu-m68k.c \
	cpu-m88k.c \
	cpu-m10200.c \
	cpu-m10300.c \
	cpu-mcore.c \
	cpu-mips.c \
	cpu-ns32k.c \
	cpu-pj.c \
	cpu-powerpc.c \
	cpu-rs6000.c \
	cpu-sh.c \
	cpu-sparc.c \
	cpu-tic30.c \
	cpu-tic54x.c \
	cpu-tic80.c \
	cpu-v850.c \
	cpu-vax.c \
	cpu-we32k.c \
	cpu-w65.c \
	cpu-z8k.c
d173 4
a176 274
BFD32_BACKENDS = \
	aout-adobe.lo \
	aout-arm.lo \
	aout-cris.lo \
	aout-ns32k.lo \
	aout-sparcle.lo \
	aout-tic30.lo \
	aout0.lo \
	aout32.lo \
	armnetbsd.lo \
	bout.lo \
	cf-i386lynx.lo \
	cf-m68klynx.lo \
	cf-sparclynx.lo \
	coff-a29k.lo \
	coff-apollo.lo \
	coff-arm.lo \
	coff-aux.lo \
	coff-h8300.lo \
	coff-h8500.lo \
	coff-i386.lo \
	coff-go32.lo \
	coff-i860.lo \
	coff-i960.lo \
	coff-m68k.lo \
	coff-m88k.lo \
	coff-mips.lo \
	coff-pmac.lo \
	coff-rs6000.lo \
	coff-sh.lo \
	coff-sparc.lo \
	coff-stgo32.lo \
	coff-svm68k.lo \
	coff-tic30.lo \
	coff-tic54x.lo \
	coff-tic80.lo \
	coff-u68k.lo \
	coff-we32k.lo \
	coff-w65.lo \
	coff-z8k.lo \
	cofflink.lo \
	dwarf1.lo \
	ecoff.lo \
	ecofflink.lo \
	efi-app-ia32.lo \
	elf.lo \
	elf32-arc.lo \
	elfarm-oabi.lo \
	elfarm-nabi.lo \
	elf32-avr.lo \
	elf32-cris.lo \
	elf32-d10v.lo \
	elf32-d30v.lo \
	elf32-fr30.lo \
	elf32-gen.lo \
	elf32-hppa.lo \
	elf32-i370.lo \
	elf32-i386.lo \
	elf32-i860.lo \
	elf32-i960.lo \
	elf32-ia64.lo \
	elf32-m32r.lo \
	elf32-m68hc11.lo \
	elf32-m68hc12.lo \
	elf32-m68k.lo \
	elf32-m88k.lo \
	elf-m10200.lo \
	elf-m10300.lo \
	elf32-mcore.lo \
	elf32-mips.lo \
	elf32-pj.lo \
	elf32-ppc.lo \
	elf32-sh.lo \
	elf32-sh-lin.lo \
	elf32-sparc.lo \
	elf32-v850.lo \
	elf32.lo \
	elflink.lo \
	epoc-pe-arm.lo \
	epoc-pei-arm.lo \
	hp300bsd.lo \
	hp300hpux.lo \
	som.lo \
	i386aout.lo \
	i386bsd.lo \
	i386dynix.lo \
	i386freebsd.lo \
	i386linux.lo \
	i386lynx.lo \
	i386msdos.lo \
	i386netbsd.lo \
	i386mach3.lo \
	i386os9k.lo \
	ieee.lo \
	m68k4knetbsd.lo \
	m68klinux.lo \
	m68klynx.lo \
	m68knetbsd.lo \
	m88kmach3.lo \
	mipsbsd.lo \
	newsos3.lo \
	nlm.lo \
	nlm32-i386.lo \
	nlm32-sparc.lo \
	nlm32-ppc.lo \
	nlm32.lo \
	ns32knetbsd.lo \
	oasys.lo \
	pc532-mach.lo \
	pe-arm.lo \
	pei-arm.lo \
	pe-i386.lo \
	pei-i386.lo \
	pe-mcore.lo \
	pei-mcore.lo \
	pe-ppc.lo \
	pei-ppc.lo \
	pe-sh.lo \
	pei-sh.lo \
	pe-mips.lo \
	pei-mips.lo \
	peigen.lo \
	ppcboot.lo \
	reloc16.lo \
	riscix.lo \
	sparclinux.lo \
	sparclynx.lo \
	sparcnetbsd.lo \
	sunos.lo \
	vaxnetbsd.lo \
	versados.lo \
	vms.lo \
	vms-gsd.lo \
	vms-hdr.lo \
	vms-misc.lo \
	vms-tir.lo \
	xcofflink.lo


BFD32_BACKENDS_CFILES = \
	aout-adobe.c \
	aout-arm.c \
	aout-cris.c \
	aout-ns32k.c \
	aout-sparcle.c \
	aout-tic30.c \
	aout0.c \
	aout32.c \
	armnetbsd.c \
	bout.c \
	cf-i386lynx.c \
	cf-m68klynx.c \
	cf-sparclynx.c \
	coff-a29k.c \
	coff-apollo.c \
	coff-arm.c \
	coff-aux.c \
	coff-h8300.c \
	coff-h8500.c \
	coff-i386.c \
	coff-i860.c \
	coff-go32.c \
	coff-i960.c \
	coff-m68k.c \
	coff-m88k.c \
	coff-mips.c \
	coff-pmac.c \
	coff-rs6000.c \
	coff-sh.c \
	coff-sparc.c \
	coff-stgo32.c \
	coff-svm68k.c \
	coff-tic30.c \
	coff-tic54x.c \
	coff-tic80.c \
	coff-u68k.c \
	coff-we32k.c \
	coff-w65.c \
	coff-z8k.c \
	cofflink.c \
	dwarf1.c \
	ecoff.c \
	ecofflink.c \
	efi-app-ia32.c \
	elf.c \
	elf32-arc.c \
	elfarm-oabi.c \
	elfarm-nabi.c \
	elf32-avr.c \
	elf32-cris.c \
	elf32-d10v.c \
	elf32-d30v.c \
	elf32-fr30.c \
	elf32-gen.c \
	elf32-hppa.c \
	elf32-i370.c \
	elf32-i386.c \
	elf32-i860.c \
	elf32-i960.c \
	elf32-m32r.c \
	elf32-m68k.c \
	elf32-m68hc11.c \
	elf32-m68hc12.c \
	elf32-m88k.c \
	elf-m10200.c \
	elf-m10300.c \
	elf32-mcore.c \
	elf32-mips.c \
	elf32-pj.c \
	elf32-ppc.c \
	elf32-sh.c \
	elf32-sh-lin.c \
	elf32-sparc.c \
	elf32-v850.c \
	elf32.c \
	elflink.c \
	epoc-pe-arm.c \
	epoc-pei-arm.c \
	hp300bsd.c \
	hp300hpux.c \
	som.c \
	i386aout.c \
	i386bsd.c \
	i386dynix.c \
	i386freebsd.c \
	i386linux.c \
	i386lynx.c \
	i386msdos.c \
	i386netbsd.c \
	i386mach3.c \
	i386os9k.c \
	ieee.c \
	m68k4knetbsd.c \
	m68klinux.c \
	m68klynx.c \
	m68knetbsd.c \
	m88kmach3.c \
	mipsbsd.c \
	newsos3.c \
	nlm.c \
	nlm32-i386.c \
	nlm32-sparc.c \
	nlm32-ppc.c \
	nlm32.c \
	ns32knetbsd.c \
	oasys.c \
	pc532-mach.c \
	pe-arm.c \
	pei-arm.c \
	pe-i386.c \
	pei-i386.c \
	pe-mcore.c \
	pei-mcore.c \
	pe-ppc.c \
	pei-ppc.c \
	pe-sh.c \
	pei-sh.c \
	pe-mips.c \
	pei-mips.c \
	ppcboot.c \
	reloc16.c \
	riscix.c \
	sparclinux.c \
	sparclynx.c \
	sparcnetbsd.c \
	sunos.c \
	vaxnetbsd.c \
	versados.c \
	vms.c \
	vms-gsd.c \
	vms-hdr.c \
	vms-misc.c \
	vms-tir.c \
	xcofflink.c
d182 10
a191 56
BFD64_BACKENDS = \
	aout64.lo \
	coff-alpha.lo \
	coff64-rs6000.lo \
	demo64.lo \
	efi-app-ia64.lo \
	elf64-x86-64.lo \
	elf64-alpha.lo \
	elf64-hppa.lo \
	elf64-ia64.lo \
	elf64-gen.lo \
	elf64-mips.lo \
	elf64-sparc.lo \
	elf64.lo \
	nlm32-alpha.lo \
	nlm64.lo \
	pepigen.lo


BFD64_BACKENDS_CFILES = \
	aout64.c \
	coff-alpha.c \
	coff64-rs6000.c \
	demo64.c \
	efi-app-ia64.c \
	elf64-x86-64.c \
	elf64-alpha.c \
	elf64-hppa.c \
	elf64-gen.c \
	elf64-mips.c \
	elf64-sparc.c \
	elf64.c \
	nlm32-alpha.c \
	nlm64.c


OPTIONAL_BACKENDS = \
	aix386-core.lo \
	hpux-core.lo \
	irix-core.lo \
	lynx-core.lo \
	osf-core.lo \
	sco5-core.lo \
	trad-core.lo \
	cisco-core.lo


OPTIONAL_BACKENDS_CFILES = \
	aix386-core.c \
	hpux-core.c \
	irix-core.c \
	lynx-core.c \
	osf-core.c \
	sco5-core.c \
	trad-core.c \
	cisco-core.c
d198 1
d205 1
a205 6
SOURCE_CFILES = \
	$(BFD_LIBS_CFILES) \
	$(ALL_MACHINES_CFILES) \
	$(BFD32_BACKENDS_CFILES) \
	$(BFD64_BACKENDS_CFILES) \
	$(OPTIONAL_BACKENDS_CFILES)
d208 1
a208 2
BUILD_CFILES = \
	elf32-ia64.c elf64-ia64.c peigen.c pepigen.c
d213 1
a213 7
SOURCE_HFILES = \
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h ecoffswap.h \
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h elf64-hppa.h \
	elfcode.h elfcore.h elflink.h freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h \
	libieee.h libnlm.h liboasys.h libpei.h netbsd.h nlm-target.h \
	nlmcode.h nlmswap.h ns32k.h peicode.h som.h vms.h xcoff-target.h
d216 1
a216 2
BUILD_HFILES = \
	elf32-target.h elf64-target.h targmatch.h
d230 1
a230 1
libbfd_la_SOURCES = $(BFD_LIBS_CFILES)
d243 1
a243 1
BFD_H_DEPS = $(INCDIR)/ansidecl.h
d246 4
a249 2
BFD_H_FILES = bfd-in.h init.c opncls.c libbfd.c section.c archures.c \
	reloc.c syms.c bfd.c archive.c corefile.c targets.c format.c
a250 1
LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c cache.c reloc.c archures.c elf.c
d255 1
a255 2
CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEPA DEP1 DEP2 libbfd.a stamp-lib \
	stmp-bin2-h stmp-lbfd-h stmp-lcoff-h
d262 1
a262 1
CONFIG_CLEAN_FILES =  bfd-in3.h
d272 1
a272 1
LTLIBRARIES =  $(lib_LTLIBRARIES)
d274 5
a278 4
libbfd_la_OBJECTS =  archive.lo archures.lo bfd.lo cache.lo coffgen.lo \
corefile.lo format.lo init.lo libbfd.lo opncls.lo reloc.lo section.lo \
syms.lo targets.lo hash.lo linker.lo srec.lo binary.lo tekhex.lo \
ihex.lo stabs.lo stab-syms.lo dwarf2.lo
d286 1
a286 1
configure.in
d340 2
d396 1
a396 1
mostlyclean-libLTLIBRARIES:
d398 2
a399 2
clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
d401 1
a401 1
distclean-libLTLIBRARIES:
d403 1
a403 17
maintainer-clean-libLTLIBRARIES:

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(libdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@@$(NORMAL_UNINSTALL)
	list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p; \
	done
d406 1
a406 1
	$(LINK) -rpath $(libdir) $(libbfd_la_LDFLAGS) $(libbfd_la_OBJECTS) $(libbfd_la_LIBADD) $(LIBS)
d444 1
a444 1
	  test "$$subdir" = "." && dot_seen=yes; \
d569 1
a569 1
install-exec-am: install-libLTLIBRARIES
d572 1
a572 1
install-data-am: install-data-local
d578 1
a578 1
uninstall-am: uninstall-libLTLIBRARIES
d586 1
a586 1
	$(mkinstalldirs)  $(DESTDIR)$(libdir)
d603 1
a603 1
		mostlyclean-libLTLIBRARIES mostlyclean-tags \
d609 1
a609 1
		clean-libLTLIBRARIES clean-tags clean-generic \
d615 1
a615 1
		distclean-libtool distclean-libLTLIBRARIES \
d625 3
a627 2
		maintainer-clean-libLTLIBRARIES maintainer-clean-tags \
		maintainer-clean-generic distclean-am
d639 8
a646 8
clean-libtool maintainer-clean-libtool mostlyclean-libLTLIBRARIES \
distclean-libLTLIBRARIES clean-libLTLIBRARIES \
maintainer-clean-libLTLIBRARIES uninstall-libLTLIBRARIES \
install-libLTLIBRARIES install-data-recursive uninstall-data-recursive \
install-exec-recursive uninstall-exec-recursive installdirs-recursive \
uninstalldirs-recursive all-recursive check-recursive \
installcheck-recursive info-recursive dvi-recursive \
mostlyclean-recursive distclean-recursive clean-recursive \
d651 4
a654 4
install-data-local install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs-am \
installdirs mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean
d658 2
a659 2
	for file in $(SRC_POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/SRC-POTFILES.in
d662 2
a663 2
	for file in $(BLD_POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/BLD-POTFILES.in
d713 1
a713 1
targets.lo: targets.c config.status
d716 1
a716 1
archures.lo: archures.c config.status
d748 6
a753 4
$(BFD_LIBS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(BFD_MACHINES): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(BFD_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(OPTIONAL_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
d755 1
a755 2
# Install BFD include file, and others that it needs.
install-data-local: $(BFD_H)
d757 24
a780 4
#	$(mkinstalldirs) $(DESTDIR)$(includedir)
#	$(INSTALL_DATA) $(BFD_H) $(DESTDIR)$(includedir)/bfd.h
#	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(DESTDIR)$(includedir)/ansidecl.h
#	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(DESTDIR)$(includedir)/bfdlink.h
d803 2
a804 2
		-e 's!@@INCDIR@@!$(INCDIR)!'	\
		-e 's!@@SRCDIR@@!$(srcdir)!'
d853 1
a853 1
stmp-bin2-h: $(BFD_H_FILES)
d882 9
a890 6
  $(INCDIR)/aout/ranlib.h
archures.lo: archures.c $(INCDIR)/filenames.h
bfd.lo: bfd.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
d898 2
a899 1
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h
d902 2
a903 2
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
d909 3
a911 2
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
binary.lo: binary.c $(INCDIR)/filenames.h
d913 2
a914 1
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
d916 1
a916 1
  $(INCDIR)/aout/stab.def
d919 2
d924 2
d934 1
d936 1
d946 2
d957 3
d961 2
d966 1
d970 1
d973 1
a973 1
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h
d977 2
d985 2
a986 2
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d988 3
a990 3
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d992 3
a994 1
  ns32k.h libaout.h $(INCDIR)/bfdlink.h
d1001 2
a1002 1
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aoutx.h
d1007 3
a1009 3
aout32.lo: aout32.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1017 5
a1021 1
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
a1022 3
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1024 2
a1025 2
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1027 2
a1028 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1030 2
a1031 2
  $(INCDIR)/coff/apollo.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1033 2
a1034 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1036 3
a1038 2
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/m68k.h coff-m68k.c \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1040 5
a1044 1
  genlink.h $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h \
a1045 3
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/h8500.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d1047 2
a1048 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1050 2
a1051 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1053 2
a1054 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1059 2
a1060 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1062 7
a1070 7
coff-mips.lo: coff-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h libcoff.h \
  libecoff.h coffswap.h ecoffswap.h
coff-pmac.lo: coff-pmac.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6000.h libcoff.h $(INCDIR)/bfdlink.h \
  xcoff-target.h coffcode.h coffswap.h
d1072 6
a1077 5
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/rs6000.h libcoff.h \
  $(INCDIR)/bfdlink.h xcoff-target.h coffcode.h coffswap.h
coff-sh.lo: coff-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d1079 2
a1080 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1082 3
a1084 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h \
  go32stub.h
d1086 2
a1087 2
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1089 5
a1093 2
  $(INCDIR)/coff/tic30.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d1098 2
a1099 2
  $(INCDIR)/coff/tic80.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d1101 2
a1102 2
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1104 2
a1105 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1107 2
a1108 2
  $(INCDIR)/coff/w65.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d1110 2
a1111 2
  $(INCDIR)/coff/z8k.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d1127 3
a1129 3
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1132 1
a1132 1
  $(INCDIR)/elf/external.h
d1136 1
a1136 1
  elf32-target.h
d1161 4
d1169 4
d1176 4
d1186 2
a1187 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h elf32-target.h
d1200 8
d1217 3
a1219 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1223 6
a1228 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1243 6
d1251 8
a1258 3
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h ecoffswap.h \
d1260 9
d1276 13
a1293 4
elf32-sh-lin.lo: elf32-sh-lin.c elf32-sh.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1302 4
d1307 1
a1307 1
elf32.lo: elf32.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1309 10
a1318 1
  $(INCDIR)/elf/external.h elfcore.h elflink.h
d1322 6
d1329 3
a1331 3
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1333 3
a1335 3
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1340 4
a1343 3
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1352 3
a1354 3
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1375 1
a1375 1
  libieee.h
d1391 2
d1416 2
a1417 2
oasys.lo: oasys.c $(INCDIR)/filenames.h $(INCDIR)/oasys.h \
  liboasys.h
d1421 5
d1427 3
a1429 3
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1431 3
a1433 3
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1435 3
a1437 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1439 3
a1441 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1443 3
a1445 3
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1447 1
a1447 5
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
pe-ppc.lo: pe-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/internal.h \
d1450 4
d1455 7
a1461 6
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-sh.lo: pe-sh.c $(INCDIR)/filenames.h coff-sh.c $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h coffcode.h peicode.h libpei.h
d1463 2
a1464 1
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h \
d1468 3
a1470 2
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1472 4
a1475 4
  $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
ppcboot.lo: ppcboot.c $(INCDIR)/filenames.h
d1498 6
d1509 2
a1510 2
vms-hdr.lo: vms-hdr.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
d1516 11
a1526 4
  $(INCDIR)/coff/internal.h libcoff.h
aout64.lo: aout64.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1532 3
a1534 2
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/rs6k64.h libcoff.h \
  $(INCDIR)/bfdlink.h xcoff-target.h coffcode.h coffswap.h
d1540 3
a1542 3
  coff-ia64.c $(INCDIR)/coff/ia64.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1544 2
a1545 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/x86-64.h \
d1562 7
d1571 21
a1591 4
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  ecoffswap.h elf64-target.h
d1597 6
a1602 3
elf64.lo: elf64.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfcore.h elflink.h
d1610 2
a1611 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h
d1630 2
a1631 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
d1633 2
a1634 2
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
@


1.13
log
@includes should be installed during `make include', not later.
Fixes this for lex and binutils' bfd.

Also, do not install ansidecl.h, we don't really need it, bfd.h uses it,
and we installed it so that bfd worked, so let bfd.h include it directly.

prompted by mickey@@
@
text
@d78 2
d84 2
d103 1
d108 1
d134 3
d151 2
a152 1
	srec.lo binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo
d159 2
a160 1
	srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c
d171 1
d178 1
d184 2
d199 1
d214 1
d221 1
d227 2
d242 1
d256 1
d287 1
a294 1
	dwarf2.lo \
d297 1
d303 1
d308 1
d313 1
d315 2
d326 1
d395 1
d426 1
a433 1
	dwarf2.c \
d436 1
d442 1
d447 1
d454 2
d464 1
a511 1
	peigen.c \
d535 1
d537 2
d540 2
d547 2
a548 1
	nlm64.lo
d554 1
d556 2
d559 1
d600 1
a600 1
CFILES = \
d608 6
d615 6
a620 6
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h \
	ecoffswap.h elf32-arm.h elfcode.h elfcore.h \
	elflink.h freebsd.h genlink.h go32stub.h libaout.h \
	libbfd.h libcoff.h libecoff.h elf-bfd.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h netbsd.h nlm-target.h nlmcode.h \
	nlmswap.h ns32k.h peicode.h som.h vms.h
d623 2
a624 3
HFILES = \
	elf32-target.h elf64-target.h targmatch.h \
	$(SOURCE_HFILES)
d627 4
a630 1
POTFILES = $(CFILES) $(SOURCE_HFILES)
d660 1
a660 2
MOSTLYCLEANFILES = elf32-target.h elf64-target.h ofiles stamp-ofiles \
	targmatch.h
d662 2
a664 2
CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEP1 DEP2 libbfd.a stamp-lib \
	stmp-bin2-h stmp-lbfd-h stmp-lcoff-h
d666 1
d685 1
a685 1
ihex.lo stabs.lo stab-syms.lo
d705 1
a705 1
.SUFFIXES: .S .c .lo .o .s
d760 5
d773 1
d1019 1
d1077 16
a1092 3
po/POTFILES.in: @@MAINT@@ Makefile
	for file in $(POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/POTFILES.in
d1115 1
d1148 20
d1185 7
a1191 2
	sed -f dep.sed < DEP1 > $@@
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> $@@
a1275 8
elfarm-oabi.lo: elfarm-oabi.c elf32-arm.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h elf32-target.h

elfarm-nabi.lo: elfarm-nabi.c elf32-arm.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h elf32-target.h

d1280 29
a1308 17
archive.lo: archive.c $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h
archures.lo: archures.c
bfd.lo: bfd.c $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h libcoff.h \
  libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
cache.lo: cache.c
coffgen.lo: coffgen.c $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h
corefile.lo: corefile.c
format.lo: format.c
init.lo: init.c
libbfd.lo: libbfd.c
opncls.lo: opncls.c $(INCDIR)/objalloc.h
reloc.lo: reloc.c $(INCDIR)/bfdlink.h
section.lo: section.c $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
a1309 8
targets.lo: targets.c $(INCDIR)/fnmatch.h targmatch.h
hash.lo: hash.c $(INCDIR)/objalloc.h
linker.lo: linker.c $(INCDIR)/bfdlink.h genlink.h
srec.lo: srec.c $(INCDIR)/libiberty.h
binary.lo: binary.c
tekhex.lo: tekhex.c $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/libiberty.h
stabs.lo: stabs.c $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
d1312 45
a1356 36
cpu-a29k.lo: cpu-a29k.c
cpu-alpha.lo: cpu-alpha.c
cpu-arc.lo: cpu-arc.c
cpu-arm.lo: cpu-arm.c
cpu-avr.lo: cpu-avr.c
cpu-d10v.lo: cpu-d10v.c
cpu-d30v.lo: cpu-d30v.c
cpu-fr30.lo: cpu-fr30.c
cpu-h8300.lo: cpu-h8300.c
cpu-h8500.lo: cpu-h8500.c
cpu-hppa.lo: cpu-hppa.c
cpu-i370.lo: cpu-i370.c
cpu-i386.lo: cpu-i386.c
cpu-i860.lo: cpu-i860.c
cpu-i960.lo: cpu-i960.c
cpu-m32r.lo: cpu-m32r.c
cpu-m68k.lo: cpu-m68k.c
cpu-m88k.lo: cpu-m88k.c
cpu-m10200.lo: cpu-m10200.c
cpu-m10300.lo: cpu-m10300.c
cpu-mcore.lo: cpu-mcore.c
cpu-mips.lo: cpu-mips.c
cpu-ns32k.lo: cpu-ns32k.c ns32k.h
cpu-pj.lo: cpu-pj.c
cpu-powerpc.lo: cpu-powerpc.c
cpu-rs6000.lo: cpu-rs6000.c
cpu-sh.lo: cpu-sh.c
cpu-sparc.lo: cpu-sparc.c
cpu-tic30.lo: cpu-tic30.c
cpu-tic80.lo: cpu-tic80.c
cpu-v850.lo: cpu-v850.c
cpu-vax.lo: cpu-vax.c
cpu-we32k.lo: cpu-we32k.c
cpu-w65.lo: cpu-w65.c
cpu-z8k.lo: cpu-z8k.c
aout-adobe.lo: aout-adobe.c $(INCDIR)/aout/adobe.h \
d1359 8
a1366 3
aout-arm.lo: aout-arm.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aoutx.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
d1370 8
a1377 1
  libaout.h aoutf1.h $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h \
d1380 2
a1381 11
aout-tic30.lo: aout-tic30.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aoutx.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout32.lo: aout32.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
armnetbsd.lo: armnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1383 16
a1398 3
bout.lo: bout.c $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h
cf-i386lynx.lo: cf-i386lynx.c coff-i386.c $(INCDIR)/coff/i386.h \
d1401 4
a1404 1
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/coff/m68k.h \
d1407 10
a1416 1
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/coff/sparc.h \
d1419 1
a1419 3
coff-a29k.lo: coff-a29k.c $(INCDIR)/coff/a29k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-apollo.lo: coff-apollo.c $(INCDIR)/coff/apollo.h \
d1422 5
a1426 4
coff-arm.lo: coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-aux.lo: coff-aux.c $(INCDIR)/coff/aux-coff.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h coff-m68k.c libcoff.h $(INCDIR)/bfdlink.h \
d1428 2
a1429 2
coff-h8300.lo: coff-h8300.c $(INCDIR)/bfdlink.h genlink.h \
  $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h libcoff.h \
d1431 1
a1431 7
coff-h8500.lo: coff-h8500.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i860.lo: coff-i860.c $(INCDIR)/coff/i860.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/coff/i386.h \
d1434 5
a1438 14
coff-i960.lo: coff-i960.c $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m68k.lo: coff-m68k.c $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m88k.lo: coff-m88k.c $(INCDIR)/coff/m88k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-mips.lo: coff-mips.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/mips.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff-pmac.lo: coff-pmac.c coff-rs6000.c $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6000.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/coff/internal.h \
d1440 6
d1447 1
a1447 3
coff-sh.lo: coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-sparc.lo: coff-sparc.c $(INCDIR)/coff/sparc.h \
d1450 2
a1451 2
coff-stgo32.lo: coff-stgo32.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
d1454 5
a1458 2
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1460 2
a1461 1
coff-tic30.lo: coff-tic30.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic30.h \
d1463 7
a1469 3
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic80.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
d1472 5
a1476 2
coff-we32k.lo: coff-we32k.c $(INCDIR)/coff/we32k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1478 22
a1499 7
coff-w65.lo: coff-w65.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  libcoff.h
dwarf1.lo: dwarf1.c $(INCDIR)/libiberty.h elf-bfd.h \
d1501 4
a1504 20
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf.h
dwarf2.lo: dwarf2.c $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
ecoff.lo: ecoff.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  libcoff.h libecoff.h
ecofflink.lo: ecofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/objalloc.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  libcoff.h libecoff.h
elf.lo: elf.c $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
elf32-arc.lo: elf32-arc.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arc.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm-oabi.h \
  $(INCDIR)/elf/reloc-macros.h elf-bfd.h $(INCDIR)/elf/common.h \
d1508 1
a1508 7
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-arm.h \
  elf32-target.h
elf32-avr.lo: elf32-avr.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d10v.lo: elf32-d10v.c elf-bfd.h $(INCDIR)/elf/common.h \
d1510 4
d1515 3
a1517 2
elf32-d30v.lo: elf32-d30v.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1519 3
a1521 5
elf32-fr30.lo: elf32-fr30.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/fr30.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-gen.lo: elf32-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1523 1
a1523 1
elf32-i370.lo: elf32-i370.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1525 3
a1527 2
  $(INCDIR)/elf/i370.h elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1529 1
a1529 3
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i860.lo: elf32-i860.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1531 4
a1534 7
elf32-i960.lo: elf32-i960.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/i960.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m32r.lo: elf32-m32r.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/m32r.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1536 8
a1543 3
  $(INCDIR)/elf/m68k.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m88k.lo: elf32-m88k.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1545 3
a1547 2
elf-m10200.lo: elf-m10200.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1549 3
a1551 3
elf-m10300.lo: elf-m10300.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
d1553 1
a1553 1
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1555 1
a1555 1
  $(INCDIR)/elf/mcore.h $(INCDIR)/elf/reloc-macros.h \
d1557 9
a1565 1
elf32-mips.lo: elf32-mips.c $(INCDIR)/bfdlink.h genlink.h \
d1567 18
d1589 24
a1612 12
elf32-pj.lo: elf32-pj.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/pj.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
d1614 17
a1630 18
elf32-v850.lo: elf32-v850.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/v850.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elfcore.h elflink.h
elflink.lo: elflink.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
hp300bsd.lo: hp300bsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1632 6
a1637 9
  aoutx.h $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
som.lo: som.c
i386aout.lo: i386aout.c $(INCDIR)/aout/aout64.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386bsd.lo: i386bsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1639 3
d1643 28
a1670 1
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
d1672 11
a1682 21
  aout-target.h
i386freebsd.lo: i386freebsd.c freebsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386msdos.lo: i386msdos.c libaout.h $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386mach3.lo: i386mach3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/ieee.h libieee.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h libaout.h \
d1685 6
a1690 21
m68klinux.lo: m68klinux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
m68klynx.lo: m68klynx.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68knetbsd.lo: m68knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
mipsbsd.lo: mipsbsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.lo: newsos3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/nlm/i386-ext.h \
d1693 5
a1697 1
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/nlm/sparc32-ext.h \
d1700 40
a1739 43
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/nlm/ppc-ext.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h \
  nlmswap.h nlm-target.h
nlm32.lo: nlm32.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
oasys.lo: oasys.c $(INCDIR)/oasys.h liboasys.h
pc532-mach.lo: pc532-mach.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
pe-arm.lo: pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-arm.lo: pei-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-i386.lo: pe-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-i386.lo: pei-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-mcore.lo: pe-mcore.c coff-mcore.c $(INCDIR)/coff/mcore.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-mcore.lo: pei-mcore.c coff-mcore.c $(INCDIR)/coff/mcore.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-ppc.lo: pe-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-ppc.lo: pei-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-sh.lo: pe-sh.c coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  coffcode.h peicode.h libpei.h
pei-sh.lo: pei-sh.c coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  coffcode.h peicode.h libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/internal.h \
d1742 8
a1749 1
pei-mips.lo: pei-mips.c pe-mips.c $(INCDIR)/coff/mipspe.h \
d1752 11
a1762 9
peigen.lo: peigen.c $(INCDIR)/coff/internal.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
ppcboot.lo: ppcboot.c
reloc16.lo: reloc16.c $(INCDIR)/bfdlink.h genlink.h \
  $(INCDIR)/coff/internal.h libcoff.h
riscix.lo: riscix.c libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
sparclinux.lo: sparclinux.c $(INCDIR)/aout/aout64.h \
d1765 7
a1771 6
sparclynx.lo: sparclynx.c $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
sparcnetbsd.lo: sparcnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1773 21
a1793 4
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1795 9
a1803 9
versados.lo: versados.c $(INCDIR)/libiberty.h
vms.lo: vms.c $(INCDIR)/bfdlink.h vms.h
vms-gsd.lo: vms-gsd.c $(INCDIR)/bfdlink.h vms.h
vms-hdr.lo: vms-hdr.c $(INCDIR)/bfdlink.h vms.h
vms-misc.lo: vms-misc.c $(INCDIR)/bfdlink.h vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/bfdlink.h vms.h
xcofflink.lo: xcofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  libcoff.h
aout64.lo: aout64.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
d1805 13
a1817 2
  $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d1820 3
a1822 21
  libecoff.h coffswap.h ecoffswap.h
demo64.lo: demo64.c aoutf1.h $(INCDIR)/aout/sun4.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
elf64-alpha.lo: elf64-alpha.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/alpha.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h ecoffswap.h elf64-target.h
elf64-gen.lo: elf64-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf64-target.h
elf64-mips.lo: elf64-mips.c $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
  elf64-target.h
elf64-sparc.lo: elf64-sparc.c elf-bfd.h $(INCDIR)/elf/common.h \
d1824 14
d1840 26
a1865 1
elf64.lo: elf64.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
d1867 8
a1874 15
  elfcore.h elflink.h
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/nlm/alpha-ext.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm64.lo: nlm64.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
aix386-core.lo: aix386-core.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h
hpux-core.lo: hpux-core.c
irix-core.lo: irix-core.c
lynx-core.lo: lynx-core.c
osf-core.lo: osf-core.c
sco5-core.lo: sco5-core.c libaout.h $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c libaout.h $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c
@


1.12
log
@Some installation problems: older gnu programs don't know about DESTDIR,
but we have a mix here -> convert the old ones to heed DESTDIR.

Also, fix manpages installation in Makefile.bsd-wrapper
(INSTALL_MAN setting that got lost, bad MANDIR, don't set MANDIR if
PREFIX is the standard location)
@
text
@d1082 4
a1085 4
	$(mkinstalldirs) $(DESTDIR)$(includedir)
	$(INSTALL_DATA) $(BFD_H) $(DESTDIR)$(includedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(DESTDIR)$(includedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(DESTDIR)$(includedir)/bfdlink.h
@


1.11
log
@Allow make clean to proceed.
(This is probably a work-around for a bug in ksh)
@
text
@d1082 4
a1085 4
	$(mkinstalldirs) $(includedir)
	$(INSTALL_DATA) $(BFD_H) $(includedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(includedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(includedir)/bfdlink.h
@


1.10
log
@Allow gen-aout.c to compile on something other than #@@#!%linux
@
text
@d807 1
@


1.9
log
@Help stupid cvs fixing basic conflicts.
@
text
@d1127 1
a1127 1
	$(CC) -o gen-aout $(CFLAGS) $(LFLAGS) $(srcdir)/gen-aout.c
@


1.8
log
@Obvious typo in previous commit; niklas@@
@
text
@d1 7
a7 12
#    Makefile template for Configure for the BFD library.
#    Copyright (C) 1990, 91, 92, 93, 94, 95, 1996
#    Free Software Foundation, Inc.
#    Written by Cygnus Support.
# 
# This file is part of BFD, the Binary File Descriptor library.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
d9 6
a14 7
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
d16 2
a18 2
srcdir = @@srcdir@@

d20 1
a21 2
program_transform_name = @@program_transform_name@@
exec_prefix = @@exec_prefix@@
d23 6
d30 1
a30 2

datadir = @@datadir@@
a31 10
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = @@infodir@@
d33 9
a41 2
oldincludedir =
docdir = doc
d43 4
a46 1
SHELL = /bin/sh
d49 1
a49 1
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
d51 2
d54 12
d67 7
a73 1
AR_FLAGS = rc
d75 27
a101 2
CFLAGS = @@CFLAGS@@
MAKEINFO = makeinfo
d103 12
d116 1
a116 12
ALLLIBS = @@ALLLIBS@@

PICFLAG = @@PICFLAG@@
SHLIB = @@SHLIB@@
SHLIB_CC = @@SHLIB_CC@@
SHLIB_CFLAGS = @@SHLIB_CFLAGS@@
COMMON_SHLIB = @@COMMON_SHLIB@@
SHLINK = @@SHLINK@@

SONAME = lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`

CC_FOR_BUILD = @@CC_FOR_BUILD@@
d120 3
a122 1
DEP = mkdep
d124 1
a124 1
SUBDIRS = doc
d126 1
a126 1
TARGETLIB = libbfd.a
d131 1
a131 7
# Some of these files should be in BFD*_BACKENDS below, but some programs
# won't link without them.  So, in order for some of the minimal-bfd
# hacks to work, they're also included here for now.
#	gdb: elf.o
#	objdump: elf.o
#
# Also, Jim Kingdon notes:
d139 5
a143 4
	archive.o archures.o bfd.o cache.o coffgen.o corefile.o \
	format.o init.o libbfd.o opncls.o reloc.o \
	section.o syms.o targets.o hash.o linker.o \
	elf.o srec.o binary.o tekhex.o ihex.o stabs.o stab-syms.o
d149 2
a150 1
	elf.c srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c
d155 36
a190 23
	cpu-a29k.o \
	cpu-alpha.o \
	cpu-arm.o \
	cpu-h8300.o \
	cpu-h8500.o \
	cpu-hppa.o \
	cpu-i386.o \
	cpu-i860.o \
	cpu-i960.o \
	cpu-m68k.o \
	cpu-m88k.o \
	cpu-mips.o \
	cpu-mn10200.o \
	cpu-mn10300.o \
	cpu-ns32k.o \
	cpu-powerpc.o \
	cpu-rs6000.o \
	cpu-sh.o \
	cpu-sparc.o \
	cpu-vax.o \
	cpu-we32k.o \
	cpu-w65.o \
	cpu-z8k.o
d195 1
d197 4
d204 1
d208 1
d211 3
a214 2
	cpu-mn10200.c \
	cpu-mn10300.c \
d216 1
d221 3
d229 1
d233 129
a361 93
	aout-adobe.o \
	aout-arm.o \
	aout-ns32k.o \
	aout-sparcle.o \
	aout0.o \
	aout32.o \
	bout.o \
	cf-i386lynx.o \
	cf-m68klynx.o \
	cf-sparclynx.o \
	coff-a29k.o \
	coff-apollo.o \
	coff-arm.o \
	coff-aux.o \
	coff-h8300.o \
	coff-h8500.o \
	coff-i386.o \
	coff-go32.o \
	coff-i860.o \
	coff-i960.o \
	coff-m68k.o \
	coff-m88k.o \
	coff-mips.o \
	coff-pmac.o \
	coff-rs6000.o \
	coff-sh.o \
	coff-sparc.o \
	coff-u68k.o \
	coff-we32k.o \
	coff-w65.o \
	coff-z8k.o \
	cofflink.o \
	ecoff.o \
	ecofflink.o \
	elf32-gen.o \
	elf32-hppa.o \
	elf32-i386.o \
	elf32-i860.o \
	elf32-m68k.o \
	elf32-m88k.o \
	elf32-mips.o \
	elf32-mn10200.o \
	elf32-mn10300.o \
	elf32-ppc.o \
	elf32-sh.o \
	elf32-sparc.o \
	elf32.o \
	elflink.o \
	hp300bsd.o \
	hp300hpux.o \
	som.o \
	i386aout.o \
	i386bsd.o \
	i386dynix.o \
	i386freebsd.o \
	i386linux.o \
	i386lynx.o \
	i386msdos.o \
	i386netbsd.o \
	i386mach3.o \
	i386os9k.o \
	ieee.o \
	m68k4knetbsd.o \
	m68klinux.o \
	m68klynx.o \
	m68knetbsd.o \
	m88knetbsd.o \
	m88kmach3.o \
	mipsbsd.o \
	newsos3.o \
	nlm.o \
	nlm32-i386.o \
	nlm32-sparc.o \
	nlm32-ppc.o \
	nlm32.o \
	ns32knetbsd.o \
	oasys.o \
	pc532-mach.o \
	pe-arm.o \
	pei-arm.o \
	pe-i386.o \
	pei-i386.o \
	pe-ppc.o \
	pei-ppc.o \
	ppcboot.o \
	reloc16.o \
	riscix.o \
	sparclynx.o \
	sparcnetbsd.o \
	sunos.o \
	tekhex.o \
	versados.o \
	xcofflink.o
d368 1
d371 1
d393 4
d402 2
d406 8
d415 1
a415 1
	elf32-hppa.c \
d418 2
d422 3
d426 1
a426 2
	elf32-mn10200.c \
	elf32-mn10300.c \
d430 1
d433 2
a453 1
	m88knetbsd.c \
d468 2
d472 5
d480 1
d484 1
a484 1
	tekhex.c \
d486 5
d493 1
d498 11
a508 15
	aout64.o \
	coff-alpha.o \
	demo64.o \
	elf64-alpha.o \
	elf64-gen.o \
	elf64-mips.o \
	elf64-sparc.o \
	elf64.o \
	evax-alpha.o \
	evax-egsd.o \
	evax-etir.o \
	evax-emh.o \
	evax-misc.o \
	nlm32-alpha.o \
	nlm64.o
a518 5
	evax-alpha.c \
	evax-egsd.c \
	evax-etir.c \
	evax-emh.c \
	evax-misc.c \
d522 1
d524 9
a532 7
	aix386-core.o \
	hpux-core.o \
	irix-core.o \
	lynx-core.o \
	osf-core.o \
	trad-core.o \
	cisco-core.o
d540 1
d544 1
d552 1
a552 31
all:

FLAGS_TO_PASS = \
	"infodir=$(infodir)" \
	"bindir=$(bindir)" \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"against=$(against)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CC_FOR_BUILD=$(CC_FOR_BUILD)" \
	"CFLAGS=$(CFLAGS)" \
	"RANLIB=$(RANLIB)" \
	"MAKEINFO=$(MAKEINFO)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)"

ALL_CFLAGS=@@HDEFINES@@ @@COREFLAG@@ @@TDEFINES@@ $(CSEARCH) $(CSWITCHES) $(CFLAGS)
.c.o:
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(ALL_CFLAGS) $< -o pic/$@@; \
	else true; fi
	$(CC) -c $(ALL_CFLAGS) $<

bfd_libs_here =
all_machines_here =
bfd32_backends_here =
core_files_here =
configs_not_included_in_all_targets_option_here =
d562 10
d573 35
a607 5
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h \
	ecoffswap.h elf32-hppa.h elf32-target.h elf64-target.h \
	elfcode.h evax.h genlink.h hppa_stubs.h libaout.h libbfd.h \
	libcoff.h libecoff.h elf-bfd.h libhppa.h libieee.h libnlm.h \
	liboasys.h netbsd.h nlm-target.h nlmcode.h ns32k.h som.h \
a609 2
all: Makefile $(ALLLIBS) @@PICLIST@@
	@@$(MAKE) subdir_do DO=all "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
d611 139
a749 2
.NOEXPORT:
MAKEOVERRIDES=
d751 9
a759 3
.PHONY: check installcheck
check:
	@@echo No testsuites exist for the BFD library. Nothing to check.
d761 5
a765 2
installcheck:
	@@echo No testsuites exist for the BFD library. Nothing to check.
d767 2
a768 2
info dvi : force
	@@$(MAKE) subdir_do DO=$@@ "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
d770 219
a988 2
clean-info:
	@@$(MAKE) subdir_do DO=clean-info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
d990 29
a1018 2
install-info: force
	@@$(MAKE) subdir_do DO=install-info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
a1021 7
# Various kinds of .o files to put in libbfd.a:
# BFD_LIBS	Generic routines, always needed.
# BFD_BACKENDS	Routines the configured targets need.
# BFD_MACHINES	Architecture-specific routines the configured targets need.
# COREFILE	Core file routines for a native configuration
OFILES = $(BFD_LIBS) $(BFD_BACKENDS) $(BFD_MACHINES) @@COREFILE@@

d1032 1
a1032 1
	/bin/sh $(srcdir)/../move-if-change tofiles ofiles
d1037 5
a1041 29
$(TARGETLIB): $(OFILES) ofiles
	rm -f $(TARGETLIB)
	@@echo ofiles = `cat ofiles`
	$(AR) $(AR_FLAGS) $(TARGETLIB) `cat ofiles`
	$(RANLIB) $(TARGETLIB)

stamp-piclist: ofiles
	rm -f tpiclist
	if [ -n "$(PICFLAG)" ]; then \
	  sed -e 's,\([^ ][^ ]*\),pic/\1,g' ofiles > tpiclist; \
	else \
	  cp ofiles tpiclist; \
	fi
	/bin/sh $(srcdir)/../move-if-change tpiclist piclist
	touch stamp-piclist

piclist: stamp-piclist ; @@true

$(SHLIB): stamp-picdir $(OFILES) piclist
	rm -f $(SHLIB)
	$(SHLIB_CC) $(SHLIB_CFLAGS) -o $(SHLIB) `cat piclist`

# We make a link from libbfd.so to libbfd.so.VERSION for linking, and
# also a link from libTARGET-bfd.so.VERSION for running.
$(SHLINK): $(SHLIB)
	ts=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed -e '$(program_transform_name)'`; \
	if [ "$$ts" != "$(SHLIB)" ]; then \
	  rm -f $$ts; \
	  ln -sf $(SHLIB) $$ts; \
d1043 1
a1043 2
	rm -f $(SHLINK)
	ln -sf $(SHLIB) $(SHLINK)
d1045 1
a1045 9
# This target creates libTARGET-bfd.so.VERSION as a symlink to
# libbfd.so.VERSION.  It is used on SunOS, which does not have SONAME.
stamp-tshlink: $(SHLIB)
	tf=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	if [ "$$tf" != "$(SHLIB)" ]; then \
	  rm -f $$tf; \
	  ln -sf $(SHLIB) $$tf; \
	else true; fi
	touch stamp-tshlink
d1058 2
a1059 5
targets.o: targets.c Makefile
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/targets.c -o pic/targets.o; \
	else true; fi
	$(CC) -c $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/targets.c
d1061 2
a1062 5
archures.o: archures.c Makefile
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/archures.c -o pic/archures.o; \
	else true; fi
	$(CC) -c $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/archures.c
a1072 43

subdir_do: force
	@@for i in $(DODIRS); do \
		if [ -d ./$$i ] ; then \
			if (cd ./$$i; \
				$(MAKE) $(FLAGS_TO_PASS) $(DO)) ; then true ; \
			else exit 1 ; fi ; \
		else true ; fi ; \
	done

tags etags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(srcdir)/*.h $(srcdir)/*.c

do_mostlyclean:
	rm -f *.o *~ core *.E *.p *.ip aout-params.h gen-aout pic/*.o
do_clean: do_mostlyclean
	rm -f libbfd.a TAGS bfd.h stmp-bfd.h bfd-tmp.h ofiles stamp-ofiles \
		elf32-target.h elf64-target.h $(SHLIB) $(SHLINK) \
		piclist stamp-piclist targmatch.h
do_distclean: do_clean
	rm -f Makefile config.status config.cache config.h config.log \
		stamp-h bfd-in3.h
	rm -rf pic stamp-picdir
do_maintainer_clean: do_distclean
	rm -f $(srcdir)/bfd-in2.h $(srcdir)/libbfd.h $(srcdir)/libcoff.h

mostlyclean: do_mostlyclean
	$(MAKE) subdir_do DO=mostlyclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
clean: do_clean
	$(MAKE) subdir_do DO=clean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
distclean:
	$(MAKE) subdir_do DO=distclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
	$(MAKE) do_distclean
clobber maintainer-clean realclean:
	@@echo "This command is intended for maintainers to use;"
	@@echo "it deletes files that may require special tools to rebuild."
	$(MAKE) subdir_do DO=maintainer-clean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
	$(MAKE) do_maintainer_clean

BFD_H_DEPS= $(INCDIR)/ansidecl.h $(INCDIR)/obstack.h
LOCAL_H_DEPS= libbfd.h sysdep.h config.h
d1078 4
a1081 73
# Get around a Sun Make bug in SunOS 4.1.1 with VPATH
cpu-i386.o:cpu-i386.c
cpu-z8k.o: cpu-z8k.c
cpu-h8500.o: cpu-h8500.c
cpu-we32k.o: cpu-we32k.c

saber:
	#suppress 65 on bfd_map_over_sections 
	#suppress 66 on bfd_map_over_sections 
	#suppress 67 on bfd_map_over_sections 
	#suppress 68 on bfd_map_over_sections 
	#suppress 69 on bfd_map_over_sections 
	#suppress 70 on bfd_map_over_sections 
	#suppress 110 in bfd_map_over_sections 
	#suppress 112 in bfd_map_over_sections 
	#suppress 530 
	#suppress 590 in swap_exec_header 
	#suppress 590 in _bfd_dummy_core_file_matches_executable_p 
	#suppress 590 in bfd_dont_truncate_arname
	#suppress 590 on ignore 
	#suppress 590 on abfd 
	#setopt load_flags $(CFLAGS)
	#load $(CFILES)


#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# This target should be invoked before building a new release.
# 'VERSION' file must be present and contain a string of the form "x.y"
#
roll:
	@@V=`cat VERSION`		; \
	MAJ=`sed 's/\..*//' VERSION`	; \
	MIN=`sed 's/.*\.//' VERSION`	; \
	V=$$MAJ.`expr $$MIN + 1`	; \
	rm -f VERSION			; \
	echo $$V >VERSION		; \
	echo Version $$V

# Dummy target to force execution of dependent targets.
#
force:

install: $(ALLLIBS)
	for f in $(ALLLIBS); do \
	  if [ "$$f" = "stamp-tshlink" ]; then \
	    continue; \
	  fi; \
	  tf=lib`echo $$f | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	  rm -f $(libdir)/$$tf; \
	  if [ "$$f" = "$(SHLINK)" ]; then \
	    ts=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	    ln -sf $$ts $(libdir)/$$tf; \
	  elif [ "$$f" = "$(SHLIB)" ]; then \
	    @@INSTALL_SHLIB@@ \
	  else \
	    $(INSTALL_DATA) $$f $(libdir)/$$tf; \
	    $(RANLIB) $(libdir)/$$tf; \
	    chmod a-x $(libdir)/$$tf; \
	  fi; \
	done
# Install BFD include file, and others that it needs.  Install them
# both in GCC's include directory, and in the system include dir
# if configured as $(oldincludedir) -- which it usually isnt.
d1085 13
a1097 39
	$(INSTALL_DATA) $(INCDIR)/obstack.h $(includedir)/obstack.h
	-if test -z "$(oldincludedir)"; then true; else \
	test -d $(oldincludedir) || mkdir $(oldincludedir); \
	$(INSTALL_DATA) $(BFD_H) $(oldincludedir)/bfd.h; \
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(oldincludedir)/ansidecl.h; \
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(oldincludedir)/bfdlink.h; \
	$(INSTALL_DATA) $(INCDIR)/obstack.h $(oldincludedir)/obstack.h; \
	$(MAKE) subdir_do DO=install "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS); \
	fi

Makefile: Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS= $(SHELL) ./config.status

config.h: stamp-h ; @@true
stamp-h: config.in config.status
	CONFIG_FILES= CONFIG_HEADERS=config.h:config.in $(SHELL) ./config.status

config.status: configure configure.host config.bfd VERSION
	$(SHELL) config.status --recheck

# Have to get rid of .dep1 here so that "$?" later includes all of $(CFILES).
.dep: dep.sed $(CFILES) $(HFILES) bfd.h
	rm -f .dep1
	$(MAKE) DEP=$(DEP) .dep1
	sed -f dep.sed <.dep1 >.dep

# This rule really wants a mkdep that runs "gcc -MM".
# The NetBSD mkdep overwrites any existing file contents, and doesn't insert
# the "DO NOT DELETE" line.
# Other mkdep versions require a file that already exists, and do insert it.
# Hence the weirdness....
.dep1: $(CFILES)
	rm -f .dep2 .dep2a
	echo '# DO NOT DELETE THIS LINE -- mkdep uses it.' > .dep2
	echo > .dep2a
	$(DEP) -f .dep2a $(ALL_CFLAGS) $?
	sed -e '/DO NOT DELETE/d' -e '/^$$/d' < .dep2a >> .dep2
	rm -f .dep2a
	/bin/sh $(srcdir)/../move-if-change .dep2 .dep1
d1105 1
a1105 1
dep: .dep
d1107 2
a1108 2
	cat .dep >> tmp-Makefile
	/bin/sh $(srcdir)/../move-if-change tmp-Makefile Makefile
d1110 1
a1110 1
dep-in: .dep
d1112 7
a1118 2
	cat .dep >> tmp-Makefile.in
	/bin/sh $(srcdir)/../move-if-change tmp-Makefile.in $(srcdir)/Makefile.in
d1120 1
a1120 1
host-aout.o: Makefile
d1129 1
a1129 1
BFDIN_H= $(srcdir)/bfd-in2.h
d1131 1
a1131 3
$(BFD_H): stmp-bfd.h ; @@true

stmp-bfd.h: bfd-in3.h
d1134 1
a1134 1
	/bin/sh $(srcdir)/../move-if-change bfd-tmp.h $(BFD_H)
d1136 1
a1136 4
	touch stmp-bfd.h

bfd-in3.h: bfd-in2.h config.status
	CONFIG_FILES=bfd-in3.h:bfd-in2.h CONFIG_HEADERS= $(SHELL) ./config.status
d1142 1
a1142 1
	/bin/sh $(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
d1144 1
a1144 1
	/bin/sh $(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
d1146 4
a1149 1
	/bin/sh $(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h
d1151 3
a1153 4
# The rules for the generated header files are here so that people can
# type `make bfd-in2.h' if they remove it.  They are not run by default.
$(srcdir)/bfd-in2.h:
	(cd $(docdir); $(MAKE) bfd.h $(FLAGS_TO_PASS))
d1155 6
a1160 3
	/bin/sh $(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
$(srcdir)/libbfd.h:
	(cd $(docdir); $(MAKE) libbfd.h $(FLAGS_TO_PASS))
d1162 6
a1167 3
	/bin/sh $(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
$(srcdir)/libcoff.h:
	(cd $(docdir); $(MAKE) libcoff.h $(FLAGS_TO_PASS))
d1169 2
a1170 10
	/bin/sh $(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h

bfd.info:
	(cd $(docdir); $(MAKE) bfd.info $(FLAGS_TO_PASS))

bfd.dvi:
	(cd $(docdir); $(MAKE) bfd.dvi $(FLAGS_TO_PASS))

bfd.ps: 
	(cd $(docdir); $(MAKE) bfd.ps $(FLAGS_TO_PASS))
d1172 3
d1176 3
d1180 3
a1182 9


$(OFILES): stamp-picdir

stamp-picdir:
	if [ -n "$(PICFLAG)" ] && [ ! -d pic ]; then \
	  mkdir pic; \
	else true; fi
	touch stamp-picdir
d1188 8
a1195 8
archive.o: archive.c $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h
archures.o: archures.c
bfd.o: bfd.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
cache.o: cache.c
coffgen.o: coffgen.c $(INCDIR)/coff/internal.h libcoff.h \
d1197 8
a1204 8
corefile.o: corefile.c
format.o: format.c
init.o: init.c
libbfd.o: libbfd.c
opncls.o: opncls.c
reloc.o: reloc.c $(INCDIR)/bfdlink.h
section.o: section.c
syms.o: syms.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
d1206 9
a1214 11
targets.o: targets.c $(INCDIR)/fnmatch.h targmatch.h
hash.o: hash.c
linker.o: linker.c $(INCDIR)/bfdlink.h genlink.h
elf.o: elf.c $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
srec.o: srec.c $(INCDIR)/libiberty.h
binary.o: binary.c
tekhex.o: tekhex.c $(INCDIR)/libiberty.h
ihex.o: ihex.c $(INCDIR)/libiberty.h
stabs.o: stabs.c $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
stab-syms.o: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
d1216 39
a1254 26
cpu-a29k.o: cpu-a29k.c
cpu-alpha.o: cpu-alpha.c
cpu-arm.o: cpu-arm.c
cpu-h8300.o: cpu-h8300.c
cpu-h8500.o: cpu-h8500.c
cpu-hppa.o: cpu-hppa.c
cpu-i386.o: cpu-i386.c
cpu-i860.o: cpu-i860.c
cpu-i960.o: cpu-i960.c
cpu-m68k.o: cpu-m68k.c
cpu-m88k.o: cpu-m88k.c
cpu-mips.o: cpu-mips.c
cpu-mn10200.o: cpu-mn10200.c
cpu-mn10300.o: cpu-mn10300.c
cpu-ns32k.o: cpu-ns32k.c ns32k.h
cpu-powerpc.o: cpu-powerpc.c
cpu-rs6000.o: cpu-rs6000.c
cpu-sh.o: cpu-sh.c
cpu-sparc.o: cpu-sparc.c
cpu-vax.o: cpu-vax.c
cpu-we32k.o: cpu-we32k.c
cpu-w65.o: cpu-w65.c
cpu-z8k.o: cpu-z8k.c
aout-adobe.o: aout-adobe.c $(INCDIR)/aout/adobe.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h $(INCDIR)/bfdlink.h
aout-arm.o: aout-arm.c libaout.h $(INCDIR)/bfdlink.h \
d1257 1
a1257 1
aout-ns32k.o: aout-ns32k.c $(INCDIR)/aout/aout64.h \
d1259 1
a1259 1
aout-sparcle.o: aout-sparcle.c $(INCDIR)/bfdlink.h \
d1263 4
a1266 1
aout0.o: aout0.c aoutf1.h $(INCDIR)/aout/sun4.h libaout.h \
d1269 1
a1269 1
aout32.o: aout32.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
d1272 4
a1275 1
bout.o: bout.c $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h \
d1277 1
a1277 1
cf-i386lynx.o: cf-i386lynx.c coff-i386.c $(INCDIR)/coff/i386.h \
d1280 1
a1280 1
cf-m68klynx.o: cf-m68klynx.c coff-m68k.c $(INCDIR)/coff/m68k.h \
d1283 1
a1283 1
cf-sparclynx.o: cf-sparclynx.c coff-sparc.c $(INCDIR)/coff/sparc.h \
d1286 1
a1286 1
coff-a29k.o: coff-a29k.c $(INCDIR)/coff/a29k.h $(INCDIR)/coff/internal.h \
d1288 1
a1288 1
coff-apollo.o: coff-apollo.c $(INCDIR)/coff/apollo.h \
d1291 1
a1291 1
coff-arm.o: coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
d1293 1
a1293 1
coff-aux.o: coff-aux.c $(INCDIR)/coff/aux-coff.h $(INCDIR)/coff/internal.h \
d1296 1
a1296 1
coff-h8300.o: coff-h8300.c $(INCDIR)/bfdlink.h genlink.h \
d1299 1
a1299 1
coff-h8500.o: coff-h8500.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h \
d1301 1
a1301 1
coff-i386.o: coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
d1303 1
a1303 1
coff-i860.o: coff-i860.c $(INCDIR)/coff/i860.h $(INCDIR)/coff/internal.h \
d1305 1
a1305 1
coff-go32.o: coff-go32.c coff-i386.c $(INCDIR)/coff/i386.h \
d1308 1
a1308 1
coff-i960.o: coff-i960.c $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h \
d1310 1
a1310 1
coff-m68k.o: coff-m68k.c $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h \
d1312 1
a1312 1
coff-m88k.o: coff-m88k.c $(INCDIR)/coff/m88k.h $(INCDIR)/coff/internal.h \
d1314 1
a1314 1
coff-mips.o: coff-mips.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d1318 1
a1318 1
coff-pmac.o: coff-pmac.c coff-rs6000.c $(INCDIR)/coff/internal.h \
d1321 1
a1321 1
coff-rs6000.o: coff-rs6000.c $(INCDIR)/coff/internal.h \
d1324 15
a1338 1
coff-sh.o: coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
d1340 4
a1343 3
coff-sparc.o: coff-sparc.c $(INCDIR)/coff/sparc.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-u68k.o: coff-u68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
d1346 1
a1346 3
coff-we32k.o: coff-we32k.c $(INCDIR)/coff/we32k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-w65.o: coff-w65.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h \
d1348 1
a1348 1
coff-z8k.o: coff-z8k.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h \
d1350 1
a1350 1
cofflink.o: cofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d1352 7
a1358 1
ecoff.o: ecoff.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/ar.h \
d1363 11
a1373 4
ecofflink.o: ecofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h
elf32-gen.o: elf32-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
d1375 4
d1380 5
a1384 3
elf32-hppa.o: elf32-hppa.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elf32-hppa.h libhppa.h $(INCDIR)/elf/hppa.h hppa_stubs.h \
d1386 2
a1387 2
elf32-i386.o: elf32-i386.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1389 4
a1392 1
elf32-i860.o: elf32-i860.c elf-bfd.h $(INCDIR)/elf/common.h \
d1395 1
a1395 1
elf32-m68k.o: elf32-m68k.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1397 6
d1404 10
a1413 1
elf32-m88k.o: elf32-m88k.c elf-bfd.h $(INCDIR)/elf/common.h \
d1416 2
a1417 5
elf32-mips.o: elf32-mips.c $(INCDIR)/bfdlink.h genlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h ecoffswap.h \
d1419 1
a1419 1
elf32-mn10200.o: elf32-mn10200.c elf-bfd.h $(INCDIR)/elf/common.h \
d1421 5
d1427 5
a1431 2
elf32-mn10300.o: elf32-mn10300.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1433 1
a1433 1
elf32-ppc.o: elf32-ppc.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1435 2
a1436 2
  $(INCDIR)/elf/ppc.h elf32-target.h
elf32-sh.o: elf32-sh.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1438 7
d1446 1
a1446 1
elf32-sparc.o: elf32-sparc.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1448 2
a1449 2
  $(INCDIR)/elf/sparc.h elf32-target.h
elf32.o: elf32.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
d1452 1
a1452 1
elflink.o: elflink.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1454 8
a1461 1
hp300bsd.o: hp300bsd.c libaout.h $(INCDIR)/bfdlink.h \
d1464 1
a1464 1
hp300hpux.o: hp300hpux.c $(INCDIR)/aout/hp300hpux.h \
d1468 2
a1469 2
som.o: som.c
i386aout.o: i386aout.c $(INCDIR)/aout/aout64.h libaout.h \
d1472 1
a1472 1
i386bsd.o: i386bsd.c libaout.h $(INCDIR)/bfdlink.h \
d1475 1
a1475 1
i386dynix.o: i386dynix.c $(INCDIR)/aout/dynix3.h aoutx.h \
d1479 1
a1479 1
i386freebsd.o: i386freebsd.c freebsd.h libaout.h $(INCDIR)/bfdlink.h \
d1482 1
a1482 1
i386linux.o: i386linux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1485 1
a1485 1
i386lynx.o: i386lynx.c libaout.h $(INCDIR)/bfdlink.h \
d1488 2
a1489 2
i386msdos.o: i386msdos.c libaout.h $(INCDIR)/bfdlink.h
i386netbsd.o: i386netbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
d1492 1
a1492 1
i386mach3.o: i386mach3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1495 1
a1495 1
i386os9k.o: i386os9k.c $(INCDIR)/bfdlink.h libaout.h \
d1497 5
a1501 5
ieee.o: ieee.c $(INCDIR)/ieee.h libieee.h
m68k4knetbsd.o: m68k4knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68klinux.o: m68klinux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1504 1
a1504 1
m68klynx.o: m68klynx.c libaout.h $(INCDIR)/bfdlink.h \
d1507 1
a1507 1
m68knetbsd.o: m68knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
d1510 1
a1510 1
m88kmach3.o: m88kmach3.c libaout.h $(INCDIR)/bfdlink.h \
d1513 1
a1513 1
mipsbsd.o: mipsbsd.c libaout.h $(INCDIR)/bfdlink.h \
d1516 1
a1516 1
newsos3.o: newsos3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1519 1
a1519 1
nlm.o: nlm.c libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
d1521 1
a1521 1
nlm32-i386.o: nlm32-i386.c $(INCDIR)/nlm/i386-ext.h \
d1524 1
a1524 1
nlm32-sparc.o: nlm32-sparc.c $(INCDIR)/nlm/sparc32-ext.h \
d1527 1
a1527 1
nlm32-ppc.o: nlm32-ppc.c $(INCDIR)/nlm/ppc-ext.h libnlm.h \
d1530 1
a1530 1
nlm32.o: nlm32.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
d1532 1
a1532 1
ns32knetbsd.o: ns32knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
d1535 2
a1536 2
oasys.o: oasys.c $(INCDIR)/oasys.h liboasys.h
pc532-mach.o: pc532-mach.c libaout.h $(INCDIR)/bfdlink.h \
d1539 13
a1551 1
pe-arm.o: pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
d1553 2
a1554 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pei-arm.o: pei-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
d1556 2
a1557 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pe-i386.o: pe-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
d1559 2
a1560 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pei-i386.o: pei-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
d1562 2
a1563 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pe-ppc.o: pe-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
d1565 2
a1566 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pei-ppc.o: pei-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
d1568 11
a1578 3
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
ppcboot.o: ppcboot.c
reloc16.o: reloc16.c $(INCDIR)/bfdlink.h genlink.h \
d1580 1
a1580 1
riscix.o: riscix.c libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
d1583 4
a1586 1
sparclynx.o: sparclynx.c $(INCDIR)/aout/sun4.h libaout.h \
d1589 1
a1589 1
sparcnetbsd.o: sparcnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
d1592 1
a1592 1
sunos.o: sunos.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
d1595 10
a1604 2
versados.o: versados.c $(INCDIR)/libiberty.h
xcofflink.o: xcofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d1606 1
a1606 1
aout64.o: aout64.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
d1609 1
a1609 1
coff-alpha.o: coff-alpha.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d1613 5
a1617 4
demo64.o: demo64.c aoutf1.h $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
elf64-alpha.o: elf64-alpha.c elf-bfd.h $(INCDIR)/elf/common.h \
d1619 5
a1623 5
  $(INCDIR)/elf/alpha.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  $(INCDIR)/aout/ar.h libcoff.h libecoff.h ecoffswap.h \
  elf64-target.h
elf64-gen.o: elf64-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
d1626 1
a1626 1
elf64-mips.o: elf64-mips.c $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h \
d1628 2
a1629 2
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
d1632 1
a1632 1
elf64-sparc.o: elf64-sparc.c elf-bfd.h $(INCDIR)/elf/common.h \
d1634 3
a1636 2
  $(INCDIR)/elf/sparc.h elf64-target.h
elf64.o: elf64.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
d1639 1
a1639 6
evax-alpha.o: evax-alpha.c $(INCDIR)/bfdlink.h evax.h
evax-egsd.o: evax-egsd.c $(INCDIR)/bfdlink.h evax.h
evax-etir.o: evax-etir.c $(INCDIR)/bfdlink.h evax.h
evax-emh.o: evax-emh.c $(INCDIR)/bfdlink.h evax.h
evax-misc.o: evax-misc.c $(INCDIR)/bfdlink.h evax.h
nlm32-alpha.o: nlm32-alpha.c $(INCDIR)/nlm/alpha-ext.h \
d1642 1
a1642 1
nlm64.o: nlm64.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
d1644 1
a1644 1
aix386-core.o: aix386-core.c $(INCDIR)/coff/i386.h \
d1646 7
a1652 6
hpux-core.o: hpux-core.c
irix-core.o: irix-core.c
lynx-core.o: lynx-core.c
osf-core.o: osf-core.c
trad-core.o: trad-core.c libaout.h $(INCDIR)/bfdlink.h
cisco-core.o: cisco-core.c
d1654 4
@


1.7
log
@Let Makefiles pass infodir and bindir thru recursive invocation,
so that make install will heed DESTDIR, and so gdb.info & friends
will finally show up in distrib/sets...
@
text
@d420 1
a420 1
	"bindif=$(bindir)" \
@


1.6
log
@Adding support for Motorola mvme88k
@
text
@d419 2
@


1.5
log
@add a lot of /bin/sh before calling scripts like config.guess and so
on - this way now the whole tree builds without requiring any file
being executable (binutils was the last which required it) - now
ctm -> cvs checkout -> make build works just fine (aside from
other bugs in the source tree :-)
@
text
@d231 1
d327 1
@


1.4
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d501 1
a501 1
	$(srcdir)/../move-if-change tofiles ofiles
d519 1
a519 1
	$(srcdir)/../move-if-change tpiclist piclist
d743 1
a743 1
	$(srcdir)/../move-if-change .dep2 .dep1
d754 1
a754 1
	$(srcdir)/../move-if-change tmp-Makefile Makefile
d759 1
a759 1
	$(srcdir)/../move-if-change tmp-Makefile.in $(srcdir)/Makefile.in
d777 1
a777 1
	$(srcdir)/../move-if-change bfd-tmp.h $(BFD_H)
d788 1
a788 1
	$(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
d790 1
a790 1
	$(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
d792 1
a792 1
	$(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h
d799 1
a799 1
	$(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
d803 1
a803 1
	$(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
d807 1
a807 1
	$(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d125 2
d150 2
d166 1
d168 1
d206 2
d213 1
d218 1
d227 1
d250 1
d260 1
d262 1
d300 2
d307 1
d312 1
d321 1
d344 1
d450 1
a450 2
	$(OPTIONAL_BACKENDS_CFILES) \
	i386dynix.c hp300bsd.c
d452 7
a458 5
HFILES = aout-target.h aoutf1.h aoutx.h coffcode.h \
	 coffswap.h ecoffswap.h elf32-hppa.h elf32-target.h elf64-target.h \
	 elfcode.h evax.h hppa_stubs.h libaout.h libbfd.h \
	 libcoff.h libecoff.h elf-bfd.h libhppa.h libieee.h libnlm.h \
	 liboasys.h nlm-target.h nlmcode.h som.h genlink.h netbsd.h ns32k.h
d549 8
d597 1
a597 2
	rm -f *.o *~ core *.E *.p *.ip aout-params.h gen-aout config.log \
		pic/*.o
d601 1
a601 1
		piclist stamp-piclist
d603 2
a604 1
	rm -f Makefile config.status config.cache config.h stamp-h bfd-in3.h
d821 1
d852 1
a852 1
targets.o: targets.c
d876 2
d889 3
d894 4
a897 3
aout-sparcle.o: aout-sparcle.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
d1001 6
d1021 3
d1035 4
d1058 3
d1120 3
a1183 7
i386dynix.o: i386dynix.c $(INCDIR)/aout/dynix3.h aoutx.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
hp300bsd.o: hp300bsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d29 2
a30 2
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
d32 2
a33 2
datadir = $(prefix)/lib
mandir = $(prefix)/man
d43 2
a44 2
infodir = $(prefix)/info
includedir = $(prefix)/include
d201 1
d287 1
d339 1
d344 5
d356 1
d361 5
d435 1
a435 1
	 elfcode.h hppa_stubs.h libaout.h libbfd.h \
d571 1
a571 1
	rm -f libbfd.a TAGS bfd.h stmp-bfd.h ofiles stamp-ofiles \
d575 1
a575 1
	rm -f Makefile config.status config.cache config.h stamp-h
d663 1
a663 1
	    $(INSTALL_PROGRAM) $$f $(libdir)/$$tf; \
d745 5
a749 8
stmp-bfd.h : $(srcdir)/bfd-in2.h Makefile
	rm -f bfd.h-new
	sed -e 's/@@WORDSIZE@@/$(WORDSIZE)/' \
	    -e "s/@@VERSION@@/`cat $(srcdir)/VERSION`/" \
	    -e 's/@@BFD_HOST_64BIT_LONG@@/@@HOST_64BIT_LONG@@/' \
		< $(srcdir)/bfd-in2.h \
		> bfd.h-new
	$(srcdir)/../move-if-change bfd.h-new $(BFD_H)
d752 3
d790 2
d859 3
d968 3
d984 2
a985 2
i386aout.o: i386aout.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1090 6
d1099 2
a1100 2
elf64-mips.o: elf64-mips.c $(INCDIR)/bfdlink.h genlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
d1111 5
@


1.1
log
@Initial revision
@
text
@d2 2
a3 1
#    Copyright (C) 1990, 91, 92, 93, 94, 1995 Free Software Foundation, Inc.
d27 1
d61 11
d102 1
a102 1
	elf.o srec.o binary.o tekhex.o
d108 1
a108 1
	elf.c srec.c binary.c tekhex.c
d172 1
d208 1
d216 1
d236 1
a239 1
	stab-syms.o \
d257 1
d293 1
d301 1
d321 1
a324 1
	stab-syms.c \
d338 1
d349 1
d399 3
d423 1
a423 1
	 liboasys.h nlm-target.h nlmcode.h som.h genlink.h netbsd.h
d425 1
a425 3
STAGESTUFF = $(TARGETLIB) $(OFILES)

all: Makefile $(TARGETLIB) 
d456 2
a457 2
ofiles : Makefile
	rm -f ofiles
d465 5
a469 1
	echo $$f > ofiles
d477 37
d518 4
a521 1
	$(CC) -c $(ALL_CFLAGS) $(TDEFAULTS) $<
d524 4
a527 1
	$(CC) -c $(ALL_CFLAGS) $(TDEFAULTS) $<
d554 2
a555 1
	rm -f *.o *~ core *.E *.p *.ip aout-params.h gen-aout config.log
d557 3
a559 2
	rm -f libbfd.a TAGS bfd.h stmp-bfd.h ofiles \
		elf32-target.h elf64-target.h
d562 1
a562 6

# Should we remove $(srcdir)/libcoff.h $(srcdir)/libbfd.h $(srcdir)/bfd-in2.h?
# make-stds.texi says it depends on whether they can be regenerated using
# this makefile.  Well, they can, but only via an explicit "make headers";
# the makefile does not regenerate them as needed.  So I guess we should not
# remove them in realclean.
d564 1
d574 2
d638 18
a655 3
install:
	$(INSTALL_DATA) libbfd.a $(libdir)/libbfd.a
	$(RANLIB) $(libdir)/libbfd.a
d679 1
a679 1
config.status: configure configure.host config.bfd
d751 15
d776 8
d804 2
a805 1
syms.o: syms.c $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
d814 4
d830 1
a830 1
cpu-ns32k.o: cpu-ns32k.c
d842 1
a842 1
  libaout.h $(INCDIR)/bfdlink.h
d867 6
a872 2
coff-h8300.o: coff-h8300.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8300.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
d951 1
a951 1
  elf32-target.h
d968 3
d987 3
d1043 1
a1051 2
stab-syms.o: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
d1063 2
a1064 2
  $(INCDIR)/coff/alpha.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
d1071 6
d1079 1
a1079 1
  elf64-target.h
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d2 1
a2 2
#    Copyright (C) 1990, 91, 92, 93, 94, 95, 1996
#    Free Software Foundation, Inc.
a25 1
program_transform_name = @@program_transform_name@@
a58 11
ALLLIBS = @@ALLLIBS@@

PICFLAG = @@PICFLAG@@
SHLIB = @@SHLIB@@
SHLIB_CC = @@SHLIB_CC@@
SHLIB_CFLAGS = @@SHLIB_CFLAGS@@
COMMON_SHLIB = @@COMMON_SHLIB@@
SHLINK = @@SHLINK@@

SONAME = lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`

d89 1
a89 1
	elf.o srec.o binary.o tekhex.o ihex.o stabs.o stab-syms.o
d95 1
a95 1
	elf.c srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c
a158 1
	coff-aux.o \
a193 1
	i386freebsd.o \
a200 1
	m68klinux.o \
a219 1
	ppcboot.o \
d223 1
a240 1
	coff-aux.c \
a275 1
	i386freebsd.c \
a282 1
	m68klinux.c \
a301 1
	ppcboot.c \
d305 1
a318 1
	elf64-mips.o \
a328 1
	elf64-mips.c \
a377 3
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(ALL_CFLAGS) $< -o pic/$@@; \
	else true; fi
d399 1
a399 1
	 liboasys.h nlm-target.h nlmcode.h som.h genlink.h netbsd.h ns32k.h
d401 3
a403 1
all: Makefile $(ALLLIBS) @@PICLIST@@
d434 2
a435 2
stamp-ofiles: Makefile
	rm -f tofiles
d443 1
a443 5
	echo $$f > tofiles
	$(srcdir)/../move-if-change tofiles ofiles
	touch stamp-ofiles

ofiles: stamp-ofiles ; @@true
a450 37
stamp-piclist: ofiles
	rm -f tpiclist
	if [ -n "$(PICFLAG)" ]; then \
	  sed -e 's,\([^ ][^ ]*\),pic/\1,g' ofiles > tpiclist; \
	else \
	  cp ofiles tpiclist; \
	fi
	$(srcdir)/../move-if-change tpiclist piclist
	touch stamp-piclist

piclist: stamp-piclist ; @@true

$(SHLIB): stamp-picdir $(OFILES) piclist
	rm -f $(SHLIB)
	$(SHLIB_CC) $(SHLIB_CFLAGS) -o $(SHLIB) `cat piclist`

# We make a link from libbfd.so to libbfd.so.VERSION for linking, and
# also a link from libTARGET-bfd.so.VERSION for running.
$(SHLINK): $(SHLIB)
	ts=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed -e '$(program_transform_name)'`; \
	if [ "$$ts" != "$(SHLIB)" ]; then \
	  rm -f $$ts; \
	  ln -sf $(SHLIB) $$ts; \
	else true; fi
	rm -f $(SHLINK)
	ln -sf $(SHLIB) $(SHLINK)

# This target creates libTARGET-bfd.so.VERSION as a symlink to
# libbfd.so.VERSION.  It is used on SunOS, which does not have SONAME.
stamp-tshlink: $(SHLIB)
	tf=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	if [ "$$tf" != "$(SHLIB)" ]; then \
	  rm -f $$tf; \
	  ln -sf $(SHLIB) $$tf; \
	else true; fi
	touch stamp-tshlink

d455 1
a455 4
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/targets.c -o pic/targets.o; \
	else true; fi
	$(CC) -c $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/targets.c
d458 1
a458 4
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/archures.c -o pic/archures.o; \
	else true; fi
	$(CC) -c $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/archures.c
d485 1
a485 2
	rm -f *.o *~ core *.E *.p *.ip aout-params.h gen-aout config.log \
		pic/*.o
d487 2
a488 3
	rm -f libbfd.a TAGS bfd.h stmp-bfd.h ofiles stamp-ofiles \
		elf32-target.h elf64-target.h $(SHLIB) $(SHLINK) \
		piclist stamp-piclist
d491 6
a496 1
	rm -rf pic stamp-picdir
a497 1
	rm -f $(srcdir)/bfd-in2.h $(srcdir)/libbfd.h $(srcdir)/libcoff.h
a506 2
	@@echo "This command is intended for maintainers to use;"
	@@echo "it deletes files that may require special tools to rebuild."
d569 3
a571 18
install: $(ALLLIBS)
	for f in $(ALLLIBS); do \
	  if [ "$$f" = "stamp-tshlink" ]; then \
	    continue; \
	  fi; \
	  tf=lib`echo $$f | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	  rm -f $(libdir)/$$tf; \
	  if [ "$$f" = "$(SHLINK)" ]; then \
	    ts=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	    ln -sf $$ts $(libdir)/$$tf; \
	  elif [ "$$f" = "$(SHLIB)" ]; then \
	    $(INSTALL_PROGRAM) $$f $(libdir)/$$tf; \
	  else \
	    $(INSTALL_DATA) $$f $(libdir)/$$tf; \
	    $(RANLIB) $(libdir)/$$tf; \
	    chmod a-x $(libdir)/$$tf; \
	  fi; \
	done
d595 1
a595 1
config.status: configure configure.host config.bfd VERSION
a666 15
# The rules for the generated header files are here so that people can
# type `make bfd-in2.h' if they remove it.  They are not run by default.
$(srcdir)/bfd-in2.h:
	(cd $(docdir); $(MAKE) bfd.h $(FLAGS_TO_PASS))
	cp $(docdir)/bfd.h bfd-in2.h-new
	$(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
$(srcdir)/libbfd.h:
	(cd $(docdir); $(MAKE) libbfd.h $(FLAGS_TO_PASS))
	cp $(docdir)/libbfd.h libbfd.h-new
	$(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
$(srcdir)/libcoff.h:
	(cd $(docdir); $(MAKE) libcoff.h $(FLAGS_TO_PASS))
	cp $(docdir)/libcoff.h libcoff.h-new
	$(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h

a676 8
$(OFILES): stamp-picdir

stamp-picdir:
	if [ -n "$(PICFLAG)" ] && [ ! -d pic ]; then \
	  mkdir pic; \
	else true; fi
	touch stamp-picdir

d697 1
a697 2
syms.o: syms.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def
a705 4
ihex.o: ihex.c $(INCDIR)/libiberty.h
stabs.o: stabs.c $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
stab-syms.o: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
d718 1
a718 1
cpu-ns32k.o: cpu-ns32k.c ns32k.h
d730 1
a730 1
  ns32k.h libaout.h $(INCDIR)/bfdlink.h
d755 2
a756 6
coff-aux.o: coff-aux.c $(INCDIR)/coff/aux-coff.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h coff-m68k.c libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-h8300.o: coff-h8300.c $(INCDIR)/bfdlink.h genlink.h \
  $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d835 1
a835 1
  $(INCDIR)/elf/sparc.h elf32-target.h
a851 3
i386freebsd.o: i386freebsd.c freebsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
a867 3
m68klinux.o: m68klinux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
a920 1
ppcboot.o: ppcboot.c
d929 2
d942 2
a943 2
  $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h libcoff.h \
  libecoff.h coffswap.h ecoffswap.h
a949 6
elf64-mips.o: elf64-mips.c $(INCDIR)/bfdlink.h genlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
  elf64-target.h
d952 1
a952 1
  $(INCDIR)/elf/sparc.h elf64-target.h
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d29 2
a30 2
bindir = @@bindir@@
libdir = @@libdir@@
d32 2
a33 2
datadir = @@datadir@@
mandir = @@mandir@@
d43 2
a44 2
infodir = @@infodir@@
includedir = @@includedir@@
a200 1
	elf32-sh.o \
a285 1
	elf32-sh.c \
a336 1
	elf64-alpha.o \
a340 5
	evax-alpha.o \
	evax-egsd.o \
	evax-etir.o \
	evax-emh.o \
	evax-misc.o \
a347 1
	elf64-alpha.c \
a351 5
	evax-alpha.c \
	evax-egsd.c \
	evax-etir.c \
	evax-emh.c \
	evax-misc.c \
d421 1
a421 1
	 elfcode.h evax.h hppa_stubs.h libaout.h libbfd.h \
d557 1
a557 1
	rm -f libbfd.a TAGS bfd.h stmp-bfd.h bfd-tmp.h ofiles stamp-ofiles \
d561 1
a561 1
	rm -f Makefile config.status config.cache config.h stamp-h bfd-in3.h
d649 1
a649 1
	    @@INSTALL_SHLIB@@ \
d731 8
a738 5
stmp-bfd.h: bfd-in3.h
	rm -f bfd-tmp.h
	cp bfd-in3.h bfd-tmp.h
	$(srcdir)/../move-if-change bfd-tmp.h $(BFD_H)
	rm -f bfd-tmp.h
a740 3
bfd-in3.h: bfd-in2.h config.status
	CONFIG_FILES=bfd-in3.h:bfd-in2.h CONFIG_HEADERS= $(SHELL) ./config.status

a775 2


a842 3
aout-sparcle.o: aout-sparcle.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
a948 3
elf32-sh.o: elf32-sh.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elf32-target.h
d962 2
a963 2
i386aout.o: i386aout.c $(INCDIR)/aout/aout64.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
a1067 6
elf64-alpha.o: elf64-alpha.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/alpha.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  $(INCDIR)/aout/ar.h libcoff.h libecoff.h ecoffswap.h \
  elf64-target.h
d1071 2
a1072 2
elf64-mips.o: elf64-mips.c $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
a1082 5
evax-alpha.o: evax-alpha.c $(INCDIR)/bfdlink.h evax.h
evax-egsd.o: evax-egsd.c $(INCDIR)/bfdlink.h evax.h
evax-etir.o: evax-etir.c $(INCDIR)/bfdlink.h evax.h
evax-emh.o: evax-emh.c $(INCDIR)/bfdlink.h evax.h
evax-misc.o: evax-misc.c $(INCDIR)/bfdlink.h evax.h
@


1.1.1.4
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a124 2
	cpu-mn10200.o \
	cpu-mn10300.o \
a147 2
	cpu-mn10200.c \
	cpu-mn10300.c \
a161 1
	aout-arm.o \
a162 1
	aout-sparcle.o \
a199 2
	elf32-mn10200.o \
	elf32-mn10300.o \
a204 1
	hp300bsd.o \
a208 1
	i386dynix.o \
a216 1
	m68k4knetbsd.o \
a238 1
	riscix.o \
a247 1
	aout-arm.c \
a248 1
	aout-sparcle.c \
a285 2
	elf32-mn10200.c \
	elf32-mn10300.c \
a290 1
	hp300bsd.c \
a294 1
	i386dynix.c \
a302 1
	m68k4knetbsd.c \
a324 1
	riscix.c \
d430 2
a431 1
	$(OPTIONAL_BACKENDS_CFILES)
d433 5
a437 7
HFILES = \
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h \
	ecoffswap.h elf32-hppa.h elf32-target.h elf64-target.h \
	elfcode.h evax.h genlink.h hppa_stubs.h libaout.h libbfd.h \
	libcoff.h libecoff.h elf-bfd.h libhppa.h libieee.h libnlm.h \
	liboasys.h netbsd.h nlm-target.h nlmcode.h ns32k.h som.h \
	targmatch.h
a527 8
# This file holds an array associating configuration triplets and
# vector names.  It is built from config.bfd.  It is not compiled by
# itself, but is included by targets.c.
targmatch.h: config.bfd targmatch.sed
	rm -f targmatch.h
	sed -f $(srcdir)/targmatch.sed < $(srcdir)/config.bfd > targmatch.new
	mv -f targmatch.new targmatch.h

d568 2
a569 1
	rm -f *.o *~ core *.E *.p *.ip aout-params.h gen-aout pic/*.o
d573 1
a573 1
		piclist stamp-piclist targmatch.h
d575 1
a575 2
	rm -f Makefile config.status config.cache config.h config.log \
		stamp-h bfd-in3.h
a791 1

d822 1
a822 1
targets.o: targets.c $(INCDIR)/fnmatch.h targmatch.h
a845 2
cpu-mn10200.o: cpu-mn10200.c
cpu-mn10300.o: cpu-mn10300.c
a856 3
aout-arm.o: aout-arm.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aoutx.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
d859 3
a861 4
aout-sparcle.o: aout-sparcle.c $(INCDIR)/bfdlink.h \
  libaout.h aoutf1.h $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
a964 6
elf32-mn10200.o: elf32-mn10200.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-target.h
elf32-mn10300.o: elf32-mn10300.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-target.h
a978 3
hp300bsd.o: hp300bsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
a989 4
i386dynix.o: i386dynix.c $(INCDIR)/aout/dynix3.h aoutx.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
a1008 3
m68k4knetbsd.o: m68k4knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
a1067 3
riscix.o: riscix.c libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
d1129 7
@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
#    Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 1997
a66 1
SHLIB_LIBS = @@SHLIB_LIBS@@
a115 1
	cpu-d10v.o \
a121 1
	cpu-m32r.o \
d125 2
a126 2
	cpu-m10200.o \
	cpu-m10300.o \
a146 1
	cpu-m32r.c \
d150 2
a151 2
	cpu-m10200.c \
	cpu-m10300.c \
a191 1
	coff-svm68k.o \
a198 1
	elf32-d10v.o \
a202 1
	elf32-m32r.o \
d206 2
a207 2
	elf-m10200.o \
	elf-m10300.o \
a250 1
	sparclinux.o \
a285 1
	coff-svm68k.c \
a296 1
	elf32-m32r.c \
d300 2
a301 2
	elf-m10200.c \
	elf-m10300.c \
a344 1
	sparclinux.c \
d431 1
a431 1
ALL_CFLAGS=-D_GNU_SOURCE @@HDEFINES@@ @@COREFLAG@@ @@TDEFINES@@ $(CSEARCH) $(CSWITCHES) $(CFLAGS)
d501 1
a501 1
	$(SHELL) $(srcdir)/../move-if-change tofiles ofiles
d519 1
a519 1
	$(SHELL) $(srcdir)/../move-if-change tpiclist piclist
d526 1
a526 1
	$(SHLIB_CC) $(SHLIB_CFLAGS) -o $(SHLIB) `cat piclist` $(SHLIB_LIBS)
d534 1
a534 1
	  ln -s $(SHLIB) $$ts; \
d537 1
a537 1
	ln -s $(SHLIB) $(SHLINK)
d545 1
a545 1
	  ln -s $(SHLIB) $$tf; \
a605 5

# do_maintainer_clean really should remove bfd-in2.h, since it is a
# generated file.  However, the GNU standards say that
# maintainer-clean should not delete anything which needs to exist in
# order to run configure, and bfd-in2.h is used by configure.
d607 1
a607 1
	rm -f $(srcdir)/libbfd.h $(srcdir)/libcoff.h
d622 1
a622 1
BFD_H_DEPS= $(INCDIR)/ansidecl.h
d690 1
a690 1
	    ln -s $$ts $(libdir)/$$tf; \
d705 1
d711 2
a713 1
	$(MAKE) subdir_do DO=install "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
d743 1
a743 1
	$(SHELL) $(srcdir)/../move-if-change .dep2 .dep1
d754 1
a754 1
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile Makefile
d759 1
a759 1
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile.in $(srcdir)/Makefile.in
d777 1
a777 1
	$(SHELL) $(srcdir)/../move-if-change bfd-tmp.h $(BFD_H)
d788 1
a788 1
	$(SHELL) $(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
d790 1
a790 1
	$(SHELL) $(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
d792 1
a792 1
	$(SHELL) $(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h
d799 1
a799 1
	$(SHELL) $(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
d803 1
a803 1
	$(SHELL) $(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
d807 1
a807 1
	$(SHELL) $(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h
a818 4
elf32-d10v.o: elf32-d10v.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-target.h

d836 4
a839 4
bfd.o: bfd.c $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h libcoff.h \
  libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
d847 1
a847 1
opncls.o: opncls.c $(INCDIR)/objalloc.h
d853 1
a853 1
hash.o: hash.c $(INCDIR)/objalloc.h
a872 1
cpu-m32r.o: cpu-m32r.c
d876 2
a877 2
cpu-m10200.o: cpu-m10200.c
cpu-m10300.o: cpu-m10300.c
a956 3
coff-svm68k.o: coff-svm68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d973 3
a975 4
ecofflink.o: ecofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/objalloc.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  libcoff.h libecoff.h
a988 3
elf32-m32r.o: elf32-m32r.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/m32r.h elf32-target.h
d1001 1
a1001 1
elf-m10200.o: elf-m10200.c elf-bfd.h $(INCDIR)/elf/common.h \
d1004 1
a1004 1
elf-m10300.o: elf-m10300.c elf-bfd.h $(INCDIR)/elf/common.h \
d1018 1
a1018 1
  $(INCDIR)/fnmatch.h elfcore.h elflink.h
a1122 3
sparclinux.o: sparclinux.c $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
d1165 1
a1165 1
  $(INCDIR)/fnmatch.h elfcore.h elflink.h
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 12
a12 7
# Makefile.in generated automatically by automake 1.4 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

d14 7
a20 3
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
d22 2
d25 1
a25 1
SHELL = @@SHELL@@
d27 1
a27 4
srcdir = @@srcdir@@
top_srcdir = @@top_srcdir@@
VPATH = @@srcdir@@
prefix = @@prefix@@
d29 2
a31 3
bindir = @@bindir@@
sbindir = @@sbindir@@
libexecdir = @@libexecdir@@
d33 10
a42 4
sysconfdir = @@sysconfdir@@
sharedstatedir = @@sharedstatedir@@
localstatedir = @@localstatedir@@
libdir = @@libdir@@
a43 1
mandir = @@mandir@@
d45 2
a46 7
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@@PACKAGE@@
pkglibdir = $(libdir)/@@PACKAGE@@
pkgincludedir = $(includedir)/@@PACKAGE@@
d48 1
a48 6
top_builddir = .

ACLOCAL = @@ACLOCAL@@
AUTOCONF = @@AUTOCONF@@
AUTOMAKE = @@AUTOMAKE@@
AUTOHEADER = @@AUTOHEADER@@
d51 1
a51 1
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@ $(AM_INSTALL_PROGRAM_FLAGS)
a52 2
INSTALL_SCRIPT = @@INSTALL_SCRIPT@@
transform = @@program_transform_name@@
a53 12
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = @@build_alias@@
build_triplet = @@build@@
host_alias = @@host_alias@@
host_triplet = @@host@@
target_alias = @@target_alias@@
target_triplet = @@target@@
d55 1
a55 7
AS = @@AS@@
BFD_HOST_64BIT_LONG = @@BFD_HOST_64BIT_LONG@@
BFD_HOST_64_BIT = @@BFD_HOST_64_BIT@@
BFD_HOST_64_BIT_DEFINED = @@BFD_HOST_64_BIT_DEFINED@@
BFD_HOST_U_64_BIT = @@BFD_HOST_U_64_BIT@@
CATALOGS = @@CATALOGS@@
CATOBJEXT = @@CATOBJEXT@@
d57 2
a58 27
CC_FOR_BUILD = @@CC_FOR_BUILD@@
COREFILE = @@COREFILE@@
COREFLAG = @@COREFLAG@@
DATADIRNAME = @@DATADIRNAME@@
DLLTOOL = @@DLLTOOL@@
EXEEXT = @@EXEEXT@@
EXEEXT_FOR_BUILD = @@EXEEXT_FOR_BUILD@@
GMOFILES = @@GMOFILES@@
GMSGFMT = @@GMSGFMT@@
GT_NO = @@GT_NO@@
GT_YES = @@GT_YES@@
HDEFINES = @@HDEFINES@@
INCLUDE_LOCALE_H = @@INCLUDE_LOCALE_H@@
INSTOBJEXT = @@INSTOBJEXT@@
INTLDEPS = @@INTLDEPS@@
INTLLIBS = @@INTLLIBS@@
INTLOBJS = @@INTLOBJS@@
LIBTOOL = @@LIBTOOL@@
LN_S = @@LN_S@@
MAINT = @@MAINT@@
MAKEINFO = @@MAKEINFO@@
MKINSTALLDIRS = @@MKINSTALLDIRS@@
MSGFMT = @@MSGFMT@@
OBJDUMP = @@OBJDUMP@@
PACKAGE = @@PACKAGE@@
POFILES = @@POFILES@@
POSUB = @@POSUB@@
a59 12
TDEFINES = @@TDEFINES@@
USE_INCLUDED_LIBINTL = @@USE_INCLUDED_LIBINTL@@
USE_NLS = @@USE_NLS@@
VERSION = @@VERSION@@
WIN32LDFLAGS = @@WIN32LDFLAGS@@
WIN32LIBADD = @@WIN32LIBADD@@
all_backends = @@all_backends@@
bfd_backends = @@bfd_backends@@
bfd_machines = @@bfd_machines@@
l = @@l@@
tdefaults = @@tdefaults@@
wordsize = @@wordsize@@
d61 13
a73 1
AUTOMAKE_OPTIONS = cygnus
d77 1
a77 3
MKDEP = gcc -MM

SUBDIRS = doc po
d79 1
a79 1
docdir = doc
d81 1
a81 1
lib_LTLIBRARIES = libbfd.la
d86 7
a92 1
# Jim Kingdon notes:
d100 4
a103 5
	archive.lo archures.lo bfd.lo cache.lo coffgen.lo corefile.lo \
	format.lo init.lo libbfd.lo opncls.lo reloc.lo \
	section.lo syms.lo targets.lo hash.lo linker.lo \
	srec.lo binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo

d109 1
a109 2
	srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c

d114 25
a138 36
	cpu-a29k.lo \
	cpu-alpha.lo \
	cpu-arc.lo \
	cpu-arm.lo \
	cpu-avr.lo \
	cpu-d10v.lo \
	cpu-d30v.lo \
	cpu-fr30.lo \
	cpu-h8300.lo \
	cpu-h8500.lo \
	cpu-hppa.lo \
	cpu-i370.lo \
	cpu-i386.lo \
	cpu-i860.lo \
	cpu-i960.lo \
	cpu-m32r.lo \
	cpu-m68k.lo \
	cpu-m88k.lo \
	cpu-m10200.lo \
	cpu-m10300.lo \
	cpu-mcore.lo \
	cpu-mips.lo \
	cpu-ns32k.lo \
	cpu-pj.lo \
	cpu-powerpc.lo \
	cpu-rs6000.lo \
	cpu-sh.lo \
	cpu-sparc.lo \
	cpu-tic30.lo \
	cpu-tic80.lo \
	cpu-v850.lo \
	cpu-vax.lo \
	cpu-we32k.lo \
	cpu-w65.lo \
	cpu-z8k.lo

a142 1
	cpu-arc.c \
a143 4
	cpu-avr.c \
	cpu-d10v.c \
	cpu-d30v.c \
	cpu-fr30.c \
a146 1
	cpu-i370.c \
d153 1
a155 2
	cpu-mcore.c \
	cpu-mips.c \
a156 1
	cpu-pj.c \
a160 3
	cpu-tic30.c \
	cpu-tic80.c \
	cpu-v850.c \
a165 1

d169 96
a264 129
	aout-adobe.lo \
	aout-arm.lo \
	aout-ns32k.lo \
	aout-sparcle.lo \
	aout-tic30.lo \
	aout0.lo \
	aout32.lo \
	armnetbsd.lo \
	bout.lo \
	cf-i386lynx.lo \
	cf-m68klynx.lo \
	cf-sparclynx.lo \
	coff-a29k.lo \
	coff-apollo.lo \
	coff-arm.lo \
	coff-aux.lo \
	coff-h8300.lo \
	coff-h8500.lo \
	coff-i386.lo \
	coff-go32.lo \
	coff-i860.lo \
	coff-i960.lo \
	coff-m68k.lo \
	coff-m88k.lo \
	coff-mips.lo \
	coff-pmac.lo \
	coff-rs6000.lo \
	coff-sh.lo \
	coff-sparc.lo \
	coff-stgo32.lo \
	coff-svm68k.lo \
	coff-tic30.lo \
	coff-tic80.lo \
	coff-u68k.lo \
	coff-we32k.lo \
	coff-w65.lo \
	coff-z8k.lo \
	cofflink.lo \
	dwarf1.lo \
	dwarf2.lo \
	ecoff.lo \
	ecofflink.lo \
	elf.lo \
	elf32-arc.lo \
	elfarm-oabi.lo \
	elfarm-nabi.lo \
	elf32-avr.lo \
	elf32-d10v.lo \
	elf32-d30v.lo \
	elf32-fr30.lo \
	elf32-gen.lo \
	elf32-i370.lo \
	elf32-i386.lo \
	elf32-i860.lo \
	elf32-i960.lo \
	elf32-m32r.lo \
	elf32-m68k.lo \
	elf32-m88k.lo \
	elf-m10200.lo \
	elf-m10300.lo \
	elf32-mcore.lo \
	elf32-mips.lo \
	elf32-pj.lo \
	elf32-ppc.lo \
	elf32-sh.lo \
	elf32-sparc.lo \
	elf32-v850.lo \
	elf32.lo \
	elflink.lo \
	epoc-pe-arm.lo \
	epoc-pei-arm.lo \
	hp300bsd.lo \
	hp300hpux.lo \
	som.lo \
	i386aout.lo \
	i386bsd.lo \
	i386dynix.lo \
	i386freebsd.lo \
	i386linux.lo \
	i386lynx.lo \
	i386msdos.lo \
	i386netbsd.lo \
	i386mach3.lo \
	i386os9k.lo \
	ieee.lo \
	m68k4knetbsd.lo \
	m68klinux.lo \
	m68klynx.lo \
	m68knetbsd.lo \
	m88kmach3.lo \
	mipsbsd.lo \
	newsos3.lo \
	nlm.lo \
	nlm32-i386.lo \
	nlm32-sparc.lo \
	nlm32-ppc.lo \
	nlm32.lo \
	ns32knetbsd.lo \
	oasys.lo \
	pc532-mach.lo \
	pe-arm.lo \
	pei-arm.lo \
	pe-i386.lo \
	pei-i386.lo \
	pe-mcore.lo \
	pei-mcore.lo \
	pe-ppc.lo \
	pei-ppc.lo \
	pe-sh.lo \
	pei-sh.lo \
	pe-mips.lo \
	pei-mips.lo \
	peigen.lo \
	ppcboot.lo \
	reloc16.lo \
	riscix.lo \
	sparclinux.lo \
	sparclynx.lo \
	sparcnetbsd.lo \
	sunos.lo \
	vaxnetbsd.lo \
	versados.lo \
	vms.lo \
	vms-gsd.lo \
	vms-hdr.lo \
	vms-misc.lo \
	vms-tir.lo \
	xcofflink.lo

a270 1
	aout-tic30.c \
a272 1
	armnetbsd.c \
a293 1
	coff-stgo32.c \
a294 2
	coff-tic30.c \
	coff-tic80.c \
a299 2
	dwarf1.c \
	dwarf2.c \
a301 8
	elf.c \
	elf32-arc.c \
	elfarm-oabi.c \
	elfarm-nabi.c \
	elf32-avr.c \
	elf32-d10v.c \
	elf32-d30v.c \
	elf32-fr30.c \
d303 1
a303 1
	elf32-i370.c \
a305 1
	elf32-i960.c \
d309 1
a311 3
	elf32-mcore.c \
	elf32-mips.c \
	elf32-pj.c \
a314 1
	elf32-v850.c \
a316 2
	epoc-pe-arm.c \
	epoc-pei-arm.c \
a349 2
	pe-mcore.c \
	pei-mcore.c \
a351 5
	pe-sh.c \
	pei-sh.c \
	pe-mips.c \
	pei-mips.c \
	peigen.c \
d359 1
a359 1
	vaxnetbsd.c \
a360 5
	vms.c \
	vms-gsd.c \
	vms-hdr.c \
	vms-misc.c \
	vms-tir.c \
a362 1

d367 15
a381 11
	aout64.lo \
	coff-alpha.lo \
	demo64.lo \
	elf64-alpha.lo \
	elf64-gen.lo \
	elf64-mips.lo \
	elf64-sparc.lo \
	elf64.lo \
	nlm32-alpha.lo \
	nlm64.lo

d392 5
a399 1

d401 7
a407 9
	aix386-core.lo \
	hpux-core.lo \
	irix-core.lo \
	lynx-core.lo \
	osf-core.lo \
	sco5-core.lo \
	trad-core.lo \
	cisco-core.lo

a414 1
	sco5-core.c \
a417 1

d425 29
a453 1
INCLUDES = -D_GNU_SOURCE @@HDEFINES@@ @@COREFLAG@@ @@TDEFINES@@ $(CSEARCH) $(CSWITCHES) -I$(srcdir)/../intl -I../intl
d463 1
a463 2

SOURCE_HFILES = \
d465 4
a468 43
	ecoffswap.h elf32-arm.h elfcode.h elfcore.h \
	elflink.h freebsd.h genlink.h go32stub.h libaout.h \
	libbfd.h libcoff.h libecoff.h elf-bfd.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h netbsd.h nlm-target.h nlmcode.h \
	nlmswap.h ns32k.h peicode.h som.h vms.h


HFILES = \
	elf32-target.h elf64-target.h targmatch.h \
	$(SOURCE_HFILES)


POTFILES = $(CFILES) $(SOURCE_HFILES)

# Various kinds of .o files to put in libbfd.a:
# BFD_BACKENDS	Routines the configured targets need.
# BFD_MACHINES	Architecture-specific routines the configured targets need.
# COREFILE	Core file routines for a native configuration
OFILES = $(BFD_BACKENDS) $(BFD_MACHINES) @@COREFILE@@

libbfd_la_SOURCES = $(BFD_LIBS_CFILES)
libbfd_la_DEPENDENCIES = $(OFILES) ofiles
libbfd_la_LIBADD = `cat ofiles` @@WIN32LIBADD@@
libbfd_la_LDFLAGS = -release $(VERSION) @@WIN32LDFLAGS@@

# libtool will build .libs/libbfd.a.  We create libbfd.a in the build
# directory so that we don't have to convert all the programs that use
# libbfd.a simultaneously.  This is a hack which should be removed if
# everything else starts using libtool.  FIXME.

noinst_LIBRARIES = libbfd.a
libbfd_a_SOURCES = 

BFD_H_DEPS = $(INCDIR)/ansidecl.h
LOCAL_H_DEPS = libbfd.h sysdep.h config.h

BFD_H_FILES = bfd-in.h init.c opncls.c libbfd.c section.c archures.c \
	reloc.c syms.c bfd.c archive.c corefile.c targets.c format.c

LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c cache.c reloc.c archures.c elf.c
LIBCOFF_H_FILES = libcoff-in.h coffcode.h

MOSTLYCLEANFILES = elf32-target.h elf64-target.h ofiles stamp-ofiles \
d471 2
d474 2
a475 2
CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEP1 DEP2 libbfd.a stamp-lib \
	stmp-bin2-h stmp-lbfd-h stmp-lcoff-h
d477 3
a479 80
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =  bfd-in3.h
LIBRARIES =  $(noinst_LIBRARIES)


DEFS = @@DEFS@@ -I. -I$(srcdir) -I.
CPPFLAGS = @@CPPFLAGS@@
LDFLAGS = @@LDFLAGS@@
LIBS = @@LIBS@@
libbfd_a_LIBADD = 
libbfd_a_OBJECTS = 
LTLIBRARIES =  $(lib_LTLIBRARIES)

libbfd_la_OBJECTS =  archive.lo archures.lo bfd.lo cache.lo coffgen.lo \
corefile.lo format.lo init.lo libbfd.lo opncls.lo reloc.lo section.lo \
syms.lo targets.lo hash.lo linker.lo srec.lo binary.lo tekhex.lo \
ihex.lo stabs.lo stab-syms.lo
CFLAGS = @@CFLAGS@@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@@
DIST_COMMON =  README ./stamp-h.in COPYING ChangeLog Makefile.am \
Makefile.in TODO acinclude.m4 aclocal.m4 bfd-in2.h config.in configure \
configure.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = tar
GZIP_ENV = --best
SOURCES = $(libbfd_a_SOURCES) $(libbfd_la_SOURCES)
OBJECTS = $(libbfd_a_OBJECTS) $(libbfd_la_OBJECTS)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .s
$(srcdir)/Makefile.in: @@MAINTAINER_MODE_TRUE@@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --cygnus Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@@ CONFIG_HEADERS= $(SHELL) ./config.status

$(ACLOCAL_M4): @@MAINTAINER_MODE_TRUE@@ configure.in  acinclude.m4
	cd $(srcdir) && $(ACLOCAL)
$(srcdir)/configure: @@MAINTAINER_MODE_TRUE@@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)
	cd $(srcdir) && $(AUTOCONF)

config.h: stamp-h
	@@if test ! -f $@@; then \
		rm -f stamp-h; \
		$(MAKE) stamp-h; \
	else :; fi
stamp-h: $(srcdir)/config.in $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES= CONFIG_HEADERS=config.h:config.in \
	     $(SHELL) ./config.status
	@@echo timestamp > stamp-h 2> /dev/null
$(srcdir)/config.in: @@MAINTAINER_MODE_TRUE@@$(srcdir)/stamp-h.in
	@@if test ! -f $@@; then \
		rm -f $(srcdir)/stamp-h.in; \
		$(MAKE) $(srcdir)/stamp-h.in; \
	else :; fi
$(srcdir)/stamp-h.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOHEADER)
	@@echo timestamp > $(srcdir)/stamp-h.in 2> /dev/null

mostlyclean-hdr:

clean-hdr:

distclean-hdr:
	-rm -f config.h

maintainer-clean-hdr:
bfd-in3.h: $(top_builddir)/config.status bfd-in2.h
	cd $(top_builddir) && CONFIG_FILES=$@@:bfd-in2.h CONFIG_HEADERS= $(SHELL) ./config.status
d481 2
a482 1
mostlyclean-noinstLIBRARIES:
d484 2
a485 2
clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
d487 2
a488 1
distclean-noinstLIBRARIES:
d490 2
a491 1
maintainer-clean-noinstLIBRARIES:
d493 1
a493 2
.c.o:
	$(COMPILE) -c $<
d495 6
a500 314
.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.c.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

mostlyclean-libLTLIBRARIES:

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)

distclean-libLTLIBRARIES:

maintainer-clean-libLTLIBRARIES:

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(libdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@@$(NORMAL_UNINSTALL)
	list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p; \
	done

libbfd.la: $(libbfd_la_OBJECTS) $(libbfd_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libbfd_la_LDFLAGS) $(libbfd_la_OBJECTS) $(libbfd_la_LIBADD) $(LIBS)

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

@@SET_MAKE@@

all-recursive install-data-recursive install-exec-recursive \
installdirs-recursive install-recursive uninstall-recursive install-info-recursive \
check-recursive installcheck-recursive info-recursive dvi-recursive:
	@@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	target=`echo $@@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	rev=''; list='$(SUBDIRS)'; for subdir in $$list; do \
	  rev="$$subdir $$rev"; \
	  test "$$subdir" = "." && dot_seen=yes; \
	done; \
	test "$$dot_seen" = "no" && rev=". $$rev"; \
	target=`echo $@@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS: tags-recursive $(HEADERS) $(SOURCES) config.in $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
   if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
   fi; \
	done; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)config.in$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags config.in $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	-rm -rf $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) zxf $(distdir).tar.gz
	mkdir $(distdir)/=build
	mkdir $(distdir)/=inst
	dc_install_base=`cd $(distdir)/=inst && pwd`; \
	cd $(distdir)/=build \
	  && ../configure --srcdir=.. --prefix=$$dc_install_base \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) dist
	-rm -rf $(distdir)
	@@banner="$(distdir).tar.gz is ready for distribution"; \
	dashes=`echo "$$banner" | sed s/./=/g`; \
	echo "$$dashes"; \
	echo "$$banner"; \
	echo "$$dashes"
dist: distdir
	-chmod -R a+r $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) chozf $(distdir).tar.gz $(distdir)
	-rm -rf $(distdir)
dist-all: distdir
	-chmod -R a+r $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) chozf $(distdir).tar.gz $(distdir)
	-rm -rf $(distdir)
distdir: $(DISTFILES)
	-rm -rf $(distdir)
	mkdir $(distdir)
	-chmod 777 $(distdir)
	@@for file in $(DISTFILES); do \
	  if test -f $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	for subdir in $(SUBDIRS); do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    chmod 777 $(distdir)/$$subdir; \
	    (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir=../$(distdir) distdir=../$(distdir)/$$subdir distdir) \
	      || exit 1; \
	  fi; \
	done
info-am:
info: info-recursive
dvi-am:
dvi: dvi-recursive
check-am:
check: check-recursive
installcheck-am:
installcheck: installcheck-recursive
install-info-am: 
install-info: install-info-recursive
all-recursive-am: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

install-exec-am: install-libLTLIBRARIES
install-exec: install-exec-recursive

install-data-am: install-data-local
install-data: install-data-recursive

install-am: all-am
	@@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-recursive
uninstall-am: uninstall-libLTLIBRARIES
uninstall: uninstall-recursive
all-am: Makefile $(LIBRARIES) $(LTLIBRARIES) config.h
all-redirect: all-recursive-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs)  $(DESTDIR)$(libdir)


mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-hdr mostlyclean-noinstLIBRARIES \
		mostlyclean-compile mostlyclean-libtool \
		mostlyclean-libLTLIBRARIES mostlyclean-tags \
		mostlyclean-generic

mostlyclean: mostlyclean-recursive

clean-am:  clean-hdr clean-noinstLIBRARIES clean-compile clean-libtool \
		clean-libLTLIBRARIES clean-tags clean-generic \
		mostlyclean-am

clean: clean-recursive

distclean-am:  distclean-hdr distclean-noinstLIBRARIES distclean-compile \
		distclean-libtool distclean-libLTLIBRARIES \
		distclean-tags distclean-generic clean-am
	-rm -f libtool

distclean: distclean-recursive
	-rm -f config.status

maintainer-clean-am:  maintainer-clean-hdr \
		maintainer-clean-noinstLIBRARIES \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-libLTLIBRARIES maintainer-clean-tags \
		maintainer-clean-generic distclean-am
	@@echo "This command is intended for maintainers to use;"
	@@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-recursive
	-rm -f config.status

.PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \
mostlyclean-noinstLIBRARIES distclean-noinstLIBRARIES \
clean-noinstLIBRARIES maintainer-clean-noinstLIBRARIES \
mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool mostlyclean-libLTLIBRARIES \
distclean-libLTLIBRARIES clean-libLTLIBRARIES \
maintainer-clean-libLTLIBRARIES uninstall-libLTLIBRARIES \
install-libLTLIBRARIES install-data-recursive uninstall-data-recursive \
install-exec-recursive uninstall-exec-recursive installdirs-recursive \
uninstalldirs-recursive all-recursive check-recursive \
installcheck-recursive info-recursive dvi-recursive \
mostlyclean-recursive distclean-recursive clean-recursive \
maintainer-clean-recursive tags tags-recursive mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-info-am \
install-info all-recursive-am install-exec-am install-exec \
install-data-local install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs-am \
installdirs mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


po/POTFILES.in: @@MAINT@@ Makefile
	for file in $(POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/POTFILES.in

diststuff: info
d517 29
a545 5
stamp-lib: libbfd.la
	libtooldir=`$(LIBTOOL) --config | sed -n -e 's/^objdir=//p'`; \
	if [ -f $$libtooldir/libbfd.a ]; then \
	  cp $$libtooldir/libbfd.a libbfd.tmp; \
	  $(SHELL) $(srcdir)/../move-if-change libbfd.tmp libbfd.a; \
d547 2
a548 1
	touch stamp-lib
d550 9
a558 1
libbfd.a: stamp-lib ; @@true
d571 5
a575 2
targets.lo: targets.c config.status
	$(LIBTOOL) --mode=compile $(COMPILE) -c $(TDEFAULTS) $(srcdir)/targets.c
d577 5
a581 2
archures.lo: archures.c config.status
	$(LIBTOOL) --mode=compile $(COMPILE) -c $(TDEFAULTS) $(srcdir)/archures.c
d592 48
d645 73
a717 4
# Install BFD include file, and others that it needs.
install-data-local: $(BFD_H)
	@@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(includedir)
d721 37
a757 13

# Have to get rid of DEP1 here so that "$?" later includes all of $(CFILES).
DEP: dep.sed $(CFILES) $(HFILES) bfd.h
	rm -f DEP1
	$(MAKE) MKDEP="$(MKDEP)" DEP1
	sed -f dep.sed < DEP1 > $@@
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> $@@

DEP1: $(CFILES)
	echo '# DO NOT DELETE THIS LINE -- mkdep uses it.' > DEP2
	echo '# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.' >> DEP2
	$(MKDEP) $(INCLUDES) $(CFLAGS) $? >> DEP2
	mv -f DEP2 $@@
d765 1
a765 1
dep: DEP
d767 1
a767 1
	cat DEP >> tmp-Makefile
d770 1
a770 1
dep-in: DEP
d772 1
a772 1
	cat DEP >> tmp-Makefile.in
d775 1
a775 6
dep-am: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < $(srcdir)/Makefile.am > tmp-Makefile.am
	cat DEP >> tmp-Makefile.am
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile.am $(srcdir)/Makefile.am

host-aout.lo: Makefile
d784 1
a784 1
$(BFD_H): stmp-bfd-h ; @@true
d786 3
a788 1
stmp-bfd-h: bfd-in3.h
d793 4
a796 1
	touch stmp-bfd-h
d808 4
a811 6
# We only rebuild the header files automatically if we have been
# configured with --enable-maintainer-mode.

$(srcdir)/bfd-in2.h: @@MAINT@@ stmp-bin2-h ; @@true
stmp-bin2-h: $(BFD_H_FILES)
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) bfd.h)
d814 2
a815 5
	touch stmp-bin2-h

$(srcdir)/libbfd.h: @@MAINT@@ stmp-lbfd-h ; @@true
stmp-lbfd-h: $(LIBBFD_H_FILES)
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) libbfd.h)
d818 2
a819 5
	touch stmp-lbfd-h

$(srcdir)/libcoff.h: @@MAINT@@ stmp-lcoff-h ; @@true
stmp-lcoff-h: $(LIBCOFF_H_FILES)
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) libcoff.h)
a821 1
	touch stmp-lcoff-h
d823 2
a824 3
# We want to rerun configure if config.bfd or configure.host change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd $(srcdir)/configure.host
	$(SHELL) ./config.status --recheck
d826 8
a833 1
elfarm-oabi.lo: elfarm-oabi.c elf32-arm.h elf-bfd.h $(INCDIR)/elf/common.h \
d835 3
a837 1
  $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
d839 8
a846 3
elfarm-nabi.lo: elfarm-nabi.c elf32-arm.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
d852 3
a854 3
archive.lo: archive.c $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h
archures.lo: archures.c
bfd.lo: bfd.c $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h \
d858 2
a859 2
cache.lo: cache.c
coffgen.lo: coffgen.c $(INCDIR)/coff/internal.h libcoff.h \
d861 8
a868 8
corefile.lo: corefile.c
format.lo: format.c
init.lo: init.c
libbfd.lo: libbfd.c
opncls.lo: opncls.c $(INCDIR)/objalloc.h
reloc.lo: reloc.c $(INCDIR)/bfdlink.h
section.lo: section.c $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
d870 11
a880 9
targets.lo: targets.c $(INCDIR)/fnmatch.h targmatch.h
hash.lo: hash.c $(INCDIR)/objalloc.h
linker.lo: linker.c $(INCDIR)/bfdlink.h genlink.h
srec.lo: srec.c $(INCDIR)/libiberty.h
binary.lo: binary.c
tekhex.lo: tekhex.c $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/libiberty.h
stabs.lo: stabs.c $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
stab-syms.lo: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
d882 27
a908 39
cpu-a29k.lo: cpu-a29k.c
cpu-alpha.lo: cpu-alpha.c
cpu-arc.lo: cpu-arc.c
cpu-arm.lo: cpu-arm.c
cpu-avr.lo: cpu-avr.c
cpu-d10v.lo: cpu-d10v.c
cpu-d30v.lo: cpu-d30v.c
cpu-fr30.lo: cpu-fr30.c
cpu-h8300.lo: cpu-h8300.c
cpu-h8500.lo: cpu-h8500.c
cpu-hppa.lo: cpu-hppa.c
cpu-i370.lo: cpu-i370.c
cpu-i386.lo: cpu-i386.c
cpu-i860.lo: cpu-i860.c
cpu-i960.lo: cpu-i960.c
cpu-m32r.lo: cpu-m32r.c
cpu-m68k.lo: cpu-m68k.c
cpu-m88k.lo: cpu-m88k.c
cpu-m10200.lo: cpu-m10200.c
cpu-m10300.lo: cpu-m10300.c
cpu-mcore.lo: cpu-mcore.c
cpu-mips.lo: cpu-mips.c
cpu-ns32k.lo: cpu-ns32k.c ns32k.h
cpu-pj.lo: cpu-pj.c
cpu-powerpc.lo: cpu-powerpc.c
cpu-rs6000.lo: cpu-rs6000.c
cpu-sh.lo: cpu-sh.c
cpu-sparc.lo: cpu-sparc.c
cpu-tic30.lo: cpu-tic30.c
cpu-tic80.lo: cpu-tic80.c
cpu-v850.lo: cpu-v850.c
cpu-vax.lo: cpu-vax.c
cpu-we32k.lo: cpu-we32k.c
cpu-w65.lo: cpu-w65.c
cpu-z8k.lo: cpu-z8k.c
aout-adobe.lo: aout-adobe.c $(INCDIR)/aout/adobe.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h \
  $(INCDIR)/bfdlink.h
aout-arm.lo: aout-arm.c libaout.h $(INCDIR)/bfdlink.h \
d911 1
a911 1
aout-ns32k.lo: aout-ns32k.c $(INCDIR)/aout/aout64.h \
d913 1
a913 1
aout-sparcle.lo: aout-sparcle.c $(INCDIR)/bfdlink.h \
d917 1
a917 4
aout-tic30.lo: aout-tic30.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aoutx.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/aout/sun4.h libaout.h \
d920 1
a920 1
aout32.lo: aout32.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
d923 1
a923 4
armnetbsd.lo: armnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
bout.lo: bout.c $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h \
d925 1
a925 1
cf-i386lynx.lo: cf-i386lynx.c coff-i386.c $(INCDIR)/coff/i386.h \
d928 1
a928 1
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/coff/m68k.h \
d931 1
a931 1
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/coff/sparc.h \
d934 1
a934 1
coff-a29k.lo: coff-a29k.c $(INCDIR)/coff/a29k.h $(INCDIR)/coff/internal.h \
d936 1
a936 1
coff-apollo.lo: coff-apollo.c $(INCDIR)/coff/apollo.h \
d939 1
a939 1
coff-arm.lo: coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
d941 1
a941 1
coff-aux.lo: coff-aux.c $(INCDIR)/coff/aux-coff.h $(INCDIR)/coff/internal.h \
d944 1
a944 1
coff-h8300.lo: coff-h8300.c $(INCDIR)/bfdlink.h genlink.h \
d947 1
a947 1
coff-h8500.lo: coff-h8500.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h \
d949 1
a949 1
coff-i386.lo: coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
d951 1
a951 1
coff-i860.lo: coff-i860.c $(INCDIR)/coff/i860.h $(INCDIR)/coff/internal.h \
d953 1
a953 1
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/coff/i386.h \
d956 1
a956 1
coff-i960.lo: coff-i960.c $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h \
d958 1
a958 1
coff-m68k.lo: coff-m68k.c $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h \
d960 1
a960 1
coff-m88k.lo: coff-m88k.c $(INCDIR)/coff/m88k.h $(INCDIR)/coff/internal.h \
d962 1
a962 1
coff-mips.lo: coff-mips.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d966 1
a966 1
coff-pmac.lo: coff-pmac.c coff-rs6000.c $(INCDIR)/coff/internal.h \
d969 1
a969 1
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/coff/internal.h \
d972 1
a972 1
coff-sh.lo: coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
d974 3
a976 1
coff-sparc.lo: coff-sparc.c $(INCDIR)/coff/sparc.h \
d979 1
a979 5
coff-stgo32.lo: coff-stgo32.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h \
  go32stub.h
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
d982 3
a984 1
coff-tic30.lo: coff-tic30.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic30.h \
d986 1
a986 1
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic80.h \
d988 1
a988 11
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-we32k.lo: coff-we32k.c $(INCDIR)/coff/we32k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-w65.lo: coff-w65.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d990 1
a990 7
dwarf1.lo: dwarf1.c $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf.h
dwarf2.lo: dwarf2.c $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
ecoff.lo: ecoff.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/ar.h \
d995 1
a995 1
ecofflink.lo: ecofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/objalloc.h \
d999 1
a999 3
elf.lo: elf.c $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
elf32-arc.lo: elf32-arc.c elf-bfd.h $(INCDIR)/elf/common.h \
a1000 8
  $(INCDIR)/elf/arc.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm-oabi.h \
  $(INCDIR)/elf/reloc-macros.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-arm.h elf32-target.h
elfarm-nabi.lo: elfarm-nabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-arm.h \
d1002 6
a1007 5
elf32-avr.lo: elf32-avr.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d10v.lo: elf32-d10v.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1009 1
a1009 1
elf32-d30v.lo: elf32-d30v.c elf-bfd.h $(INCDIR)/elf/common.h \
d1012 1
a1012 4
elf32-fr30.lo: elf32-fr30.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/fr30.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-gen.lo: elf32-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
d1014 3
d1018 1
a1018 7
elf32-i370.lo: elf32-i370.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/i370.h elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i860.lo: elf32-i860.c elf-bfd.h $(INCDIR)/elf/common.h \
d1021 5
a1025 11
elf32-i960.lo: elf32-i960.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/i960.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m32r.lo: elf32-m32r.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/m32r.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/m68k.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m88k.lo: elf32-m88k.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1027 1
a1027 1
elf-m10200.lo: elf-m10200.c elf-bfd.h $(INCDIR)/elf/common.h \
d1030 1
a1030 1
elf-m10300.lo: elf-m10300.c elf-bfd.h $(INCDIR)/elf/common.h \
a1031 1
  $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
d1033 1
a1033 1
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1035 2
a1036 18
  $(INCDIR)/elf/mcore.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-mips.lo: elf32-mips.c $(INCDIR)/bfdlink.h genlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h ecoffswap.h \
  elf32-target.h
elf32-pj.lo: elf32-pj.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/pj.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/bfdlink.h elf-bfd.h \
a1037 1
  $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
d1039 1
a1039 1
elf32-v850.lo: elf32-v850.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1041 2
a1042 2
  $(INCDIR)/elf/v850.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
d1044 2
a1045 2
  elfcore.h elflink.h
elflink.lo: elflink.c $(INCDIR)/bfdlink.h elf-bfd.h \
d1047 1
a1047 8
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
hp300bsd.lo: hp300bsd.c libaout.h $(INCDIR)/bfdlink.h \
d1050 1
a1050 1
hp300hpux.lo: hp300hpux.c $(INCDIR)/aout/hp300hpux.h \
d1054 2
a1055 2
som.lo: som.c
i386aout.lo: i386aout.c $(INCDIR)/aout/aout64.h libaout.h \
d1058 1
a1058 1
i386bsd.lo: i386bsd.c libaout.h $(INCDIR)/bfdlink.h \
d1061 1
a1061 1
i386dynix.lo: i386dynix.c $(INCDIR)/aout/dynix3.h aoutx.h \
d1065 1
a1065 1
i386freebsd.lo: i386freebsd.c freebsd.h libaout.h $(INCDIR)/bfdlink.h \
d1068 1
a1068 1
i386linux.lo: i386linux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1071 1
a1071 1
i386lynx.lo: i386lynx.c libaout.h $(INCDIR)/bfdlink.h \
d1074 2
a1075 2
i386msdos.lo: i386msdos.c libaout.h $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
d1078 1
a1078 1
i386mach3.lo: i386mach3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1081 1
a1081 1
i386os9k.lo: i386os9k.c $(INCDIR)/bfdlink.h libaout.h \
d1083 5
a1087 5
ieee.lo: ieee.c $(INCDIR)/ieee.h libieee.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68klinux.lo: m68klinux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1090 1
a1090 1
m68klynx.lo: m68klynx.c libaout.h $(INCDIR)/bfdlink.h \
d1093 1
a1093 1
m68knetbsd.lo: m68knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
d1096 1
a1096 1
m88kmach3.lo: m88kmach3.c libaout.h $(INCDIR)/bfdlink.h \
d1099 1
a1099 1
mipsbsd.lo: mipsbsd.c libaout.h $(INCDIR)/bfdlink.h \
d1102 1
a1102 1
newsos3.lo: newsos3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1105 1
a1105 1
nlm.lo: nlm.c libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
d1107 1
a1107 1
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/nlm/i386-ext.h \
d1110 1
a1110 1
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/nlm/sparc32-ext.h \
d1113 1
a1113 1
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/nlm/ppc-ext.h libnlm.h \
d1116 1
a1116 1
nlm32.lo: nlm32.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
d1118 1
a1118 1
ns32knetbsd.lo: ns32knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
d1121 2
a1122 2
oasys.lo: oasys.c $(INCDIR)/oasys.h liboasys.h
pc532-mach.lo: pc532-mach.c libaout.h $(INCDIR)/bfdlink.h \
d1125 1
a1125 10
pe-arm.lo: pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-arm.lo: pei-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-i386.lo: pe-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-i386.lo: pei-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
d1127 2
a1128 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-mcore.lo: pe-mcore.c coff-mcore.c $(INCDIR)/coff/mcore.h \
d1130 2
a1131 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-mcore.lo: pei-mcore.c coff-mcore.c $(INCDIR)/coff/mcore.h \
d1133 2
a1134 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-ppc.lo: pe-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
d1136 2
a1137 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-ppc.lo: pei-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
d1139 2
a1140 2
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-sh.lo: pe-sh.c coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
d1142 3
a1144 14
  coffcode.h peicode.h libpei.h
pei-sh.lo: pei-sh.c coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  coffcode.h peicode.h libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-mips.lo: pei-mips.c pe-mips.c $(INCDIR)/coff/mipspe.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
peigen.lo: peigen.c $(INCDIR)/coff/internal.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
ppcboot.lo: ppcboot.c
reloc16.lo: reloc16.c $(INCDIR)/bfdlink.h genlink.h \
d1146 1
a1146 1
riscix.lo: riscix.c libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
d1149 1
a1149 1
sparclinux.lo: sparclinux.c $(INCDIR)/aout/aout64.h \
d1152 1
a1152 1
sparclynx.lo: sparclynx.c $(INCDIR)/aout/sun4.h libaout.h \
d1155 1
a1155 1
sparcnetbsd.lo: sparcnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
d1158 1
a1158 1
sunos.lo: sunos.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
d1161 2
a1162 10
vaxnetbsd.lo: vaxnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
versados.lo: versados.c $(INCDIR)/libiberty.h
vms.lo: vms.c $(INCDIR)/bfdlink.h vms.h
vms-gsd.lo: vms-gsd.c $(INCDIR)/bfdlink.h vms.h
vms-hdr.lo: vms-hdr.c $(INCDIR)/bfdlink.h vms.h
vms-misc.lo: vms-misc.c $(INCDIR)/bfdlink.h vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/bfdlink.h vms.h
xcofflink.lo: xcofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d1164 1
a1164 1
aout64.lo: aout64.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
d1167 1
a1167 1
coff-alpha.lo: coff-alpha.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d1171 4
a1174 5
demo64.lo: demo64.c aoutf1.h $(INCDIR)/aout/sun4.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
elf64-alpha.lo: elf64-alpha.c elf-bfd.h $(INCDIR)/elf/common.h \
d1176 5
a1180 5
  $(INCDIR)/elf/alpha.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h ecoffswap.h elf64-target.h
elf64-gen.lo: elf64-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
d1183 1
a1183 1
elf64-mips.lo: elf64-mips.c $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h \
d1185 2
a1186 2
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
d1189 1
a1189 1
elf64-sparc.lo: elf64-sparc.c elf-bfd.h $(INCDIR)/elf/common.h \
d1191 2
a1192 3
  $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elf64.lo: elf64.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
d1194 7
a1200 2
  elfcore.h elflink.h
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/nlm/alpha-ext.h \
d1203 1
a1203 1
nlm64.lo: nlm64.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
d1205 1
a1205 1
aix386-core.lo: aix386-core.c $(INCDIR)/coff/i386.h \
d1207 6
a1212 7
hpux-core.lo: hpux-core.c
irix-core.lo: irix-core.c
lynx-core.lo: lynx-core.c
osf-core.lo: osf-core.c
sco5-core.lo: sco5-core.c libaout.h $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c libaout.h $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c
a1213 4

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
@


1.1.1.7
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a77 2
CXX = @@CXX@@
CXXCPP = @@CXXCPP@@
a81 2
GCJ = @@GCJ@@
GCJFLAGS = @@GCJFLAGS@@
a98 1
OBJEXT = @@OBJEXT@@
a102 1
STRIP = @@STRIP@@
a127 3
WARN_CFLAGS = @@WARN_CFLAGS@@
AM_CFLAGS = $(WARN_CFLAGS)

d142 1
a142 2
	srec.lo binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo \
	dwarf2.lo
d149 1
a149 2
	srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c \
	dwarf2.c
a159 1
	cpu-cris.lo \
a165 1
	cpu-ia64.lo \
a170 2
	cpu-m68hc11.lo \
	cpu-m68hc12.lo \
a183 1
	cpu-tic54x.lo \
a197 1
	cpu-cris.c \
a203 1
	cpu-ia64.c \
a208 2
	cpu-m68hc11.c \
	cpu-m68hc12.c \
a221 1
	cpu-tic54x.c \
a234 1
	aout-cris.lo \
a264 1
	coff-tic54x.lo \
d272 1
a274 1
	efi-app-ia32.lo \
a279 1
	elf32-cris.lo \
a283 1
	elf32-hppa.lo \
a287 1
	elf32-ia64.lo \
a288 2
	elf32-m68hc11.lo \
	elf32-m68hc12.lo \
a297 1
	elf32-sh-lin.lo \
a365 1
	aout-cris.c \
a395 1
	coff-tic54x.c \
d403 1
a405 1
	efi-app-ia32.c \
a410 1
	elf32-cris.c \
a414 1
	elf32-hppa.c \
a420 2
	elf32-m68hc11.c \
	elf32-m68hc12.c \
a428 1
	elf32-sh-lin.c \
d476 1
a499 1
	coff64-rs6000.lo \
a500 2
	efi-app-ia64.lo \
	elf64-x86-64.lo \
a501 2
	elf64-hppa.lo \
	elf64-ia64.lo \
d507 1
a507 2
	nlm64.lo \
	pepigen.lo
a512 1
	coff64-rs6000.c \
a513 2
	efi-app-ia64.c \
	elf64-x86-64.c \
a514 1
	elf64-hppa.c \
d555 1
a555 1
SOURCE_CFILES = \
a562 6
BUILD_CFILES = \
	elf32-ia64.c elf64-ia64.c peigen.c pepigen.c


CFILES = $(SOURCE_CFILES) $(BUILD_CFILES)

d564 6
a569 6
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h ecoffswap.h \
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h elf64-hppa.h \
	elfcode.h elfcore.h elflink.h freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h \
	libieee.h libnlm.h liboasys.h libpei.h netbsd.h nlm-target.h \
	nlmcode.h nlmswap.h ns32k.h peicode.h som.h vms.h xcoff-target.h
d572 3
a574 2
BUILD_HFILES = \
	elf32-target.h elf64-target.h targmatch.h
d577 1
a577 4
HFILES = $(SOURCE_HFILES) $(BUILD_HFILES)

SRC_POTFILES = $(SOURCE_CFILES) $(SOURCE_HFILES)
BLD_POTFILES = $(BUILD_CFILES) $(BUILD_HFILES)
d607 3
a609 1
MOSTLYCLEANFILES = ofiles stamp-ofiles
d611 1
a611 1
CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEPA DEP1 DEP2 libbfd.a stamp-lib \
a613 2

DISTCLEANFILES = $(BUILD_CFILES) $(BUILD_HFILES)
d632 1
a632 1
ihex.lo stabs.lo stab-syms.lo dwarf2.lo
d652 1
a652 1
.SUFFIXES: .S .c .lo .o .obj .s
a706 5
# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

a714 1
	-rm -f *.$(OBJEXT)
a958 1
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)
d1016 3
a1018 16
po/SRC-POTFILES.in: @@MAINT@@ Makefile $(SRC_POTFILES)
	for file in $(SRC_POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/SRC-POTFILES.in

po/BLD-POTFILES.in: @@MAINT@@ Makefile $(BLD_POTFILES)
	for file in $(BLD_POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/BLD-POTFILES.in

# The following target is retained for upgrade purposes.
# This target used to exist in older versions of this makefile, and was
# referenced by <builddir>/po/Makefile (which is created from <srcdir>/po/Make-in)
# So old versions of <builddir>/po/Makefile will try to regenerate themselves
# when make is next run, but that dependency cannot be completed without a build
# of po/POTFILES.in.  Hence the presence of this rule.  This rule will be deleted
# once it is no longer needed - probably in the fall of 2001.
po/POTFILES.in:
a1040 1
	  $(RANLIB) libbfd.tmp; \
a1072 20

elf32-ia64.c : elfxx-ia64.c
	rm -f elf32-ia64.c
	sed -e s/NN/32/g < $(srcdir)/elfxx-ia64.c > elf32-ia64.new
	mv -f elf32-ia64.new elf32-ia64.c

elf64-ia64.c : elfxx-ia64.c
	rm -f elf64-ia64.c
	sed -e s/NN/64/g < $(srcdir)/elfxx-ia64.c > elf64-ia64.new
	mv -f elf64-ia64.new elf64-ia64.c

peigen.c : peXXigen.c
	rm -f peigen.c
	sed -e s/XX/pe/g < $(srcdir)/peXXigen.c > peigen.new
	mv -f peigen.new peigen.c

pepigen.c : peXXigen.c
	rm -f pepigen.c
	sed -e s/XX/pep/g < $(srcdir)/peXXigen.c > pepigen.new
	mv -f pepigen.new pepigen.c
d1081 4
a1084 4
	$(mkinstalldirs) $(DESTDIR)$(includedir)
	$(INSTALL_DATA) $(BFD_H) $(DESTDIR)$(includedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(DESTDIR)$(includedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(DESTDIR)$(includedir)/bfdlink.h
d1090 2
a1091 7
	sed -f dep.sed < DEP1 > DEPA
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> DEPA
	if grep ' /' DEPA > /dev/null 2> /dev/null; then \
	  echo 'make DEP failed!'; exit 1; \
	else \
	  mv -f DEPA $@@; \
	fi
d1176 8
d1188 17
a1204 29
archive.lo: archive.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h
archures.lo: archures.c $(INCDIR)/filenames.h
bfd.lo: bfd.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
cache.lo: cache.c $(INCDIR)/filenames.h
coffgen.lo: coffgen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h
corefile.lo: corefile.c $(INCDIR)/filenames.h
format.lo: format.c $(INCDIR)/filenames.h
init.lo: init.c $(INCDIR)/filenames.h
libbfd.lo: libbfd.c $(INCDIR)/filenames.h
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h
reloc.lo: reloc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
section.lo: section.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
targets.lo: targets.c $(INCDIR)/filenames.h $(INCDIR)/fnmatch.h \
  targmatch.h
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h
linker.lo: linker.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
binary.lo: binary.c $(INCDIR)/filenames.h
tekhex.lo: tekhex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
stabs.lo: stabs.c $(INCDIR)/filenames.h $(INCDIR)/aout/stab_gnu.h \
d1206 8
d1216 36
a1251 45
dwarf2.lo: dwarf2.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
cpu-a29k.lo: cpu-a29k.c $(INCDIR)/filenames.h
cpu-alpha.lo: cpu-alpha.c $(INCDIR)/filenames.h
cpu-arc.lo: cpu-arc.c $(INCDIR)/filenames.h
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h
cpu-avr.lo: cpu-avr.c $(INCDIR)/filenames.h
cpu-cris.lo: cpu-cris.c $(INCDIR)/filenames.h
cpu-d10v.lo: cpu-d10v.c $(INCDIR)/filenames.h
cpu-d30v.lo: cpu-d30v.c $(INCDIR)/filenames.h
cpu-fr30.lo: cpu-fr30.c $(INCDIR)/filenames.h
cpu-h8300.lo: cpu-h8300.c $(INCDIR)/filenames.h
cpu-h8500.lo: cpu-h8500.c $(INCDIR)/filenames.h
cpu-hppa.lo: cpu-hppa.c $(INCDIR)/filenames.h
cpu-ia64.lo: cpu-ia64.c $(INCDIR)/filenames.h cpu-ia64-opc.c \
  $(srcdir)/../opcodes/ia64-opc.h $(INCDIR)/opcode/ia64.h
cpu-i370.lo: cpu-i370.c $(INCDIR)/filenames.h
cpu-i386.lo: cpu-i386.c $(INCDIR)/filenames.h
cpu-i860.lo: cpu-i860.c $(INCDIR)/filenames.h
cpu-i960.lo: cpu-i960.c $(INCDIR)/filenames.h
cpu-m32r.lo: cpu-m32r.c $(INCDIR)/filenames.h
cpu-m68hc11.lo: cpu-m68hc11.c $(INCDIR)/filenames.h
cpu-m68hc12.lo: cpu-m68hc12.c $(INCDIR)/filenames.h
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/filenames.h
cpu-m88k.lo: cpu-m88k.c $(INCDIR)/filenames.h
cpu-m10200.lo: cpu-m10200.c $(INCDIR)/filenames.h
cpu-m10300.lo: cpu-m10300.c $(INCDIR)/filenames.h
cpu-mcore.lo: cpu-mcore.c $(INCDIR)/filenames.h
cpu-mips.lo: cpu-mips.c $(INCDIR)/filenames.h
cpu-ns32k.lo: cpu-ns32k.c $(INCDIR)/filenames.h ns32k.h
cpu-pj.lo: cpu-pj.c $(INCDIR)/filenames.h
cpu-powerpc.lo: cpu-powerpc.c $(INCDIR)/filenames.h
cpu-rs6000.lo: cpu-rs6000.c $(INCDIR)/filenames.h
cpu-sh.lo: cpu-sh.c $(INCDIR)/filenames.h
cpu-sparc.lo: cpu-sparc.c $(INCDIR)/filenames.h
cpu-tic30.lo: cpu-tic30.c $(INCDIR)/filenames.h
cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/filenames.h
cpu-tic80.lo: cpu-tic80.c $(INCDIR)/filenames.h
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h
cpu-vax.lo: cpu-vax.c $(INCDIR)/filenames.h
cpu-we32k.lo: cpu-we32k.c $(INCDIR)/filenames.h
cpu-w65.lo: cpu-w65.c $(INCDIR)/filenames.h
cpu-z8k.lo: cpu-z8k.c $(INCDIR)/filenames.h
aout-adobe.lo: aout-adobe.c $(INCDIR)/filenames.h $(INCDIR)/aout/adobe.h \
d1254 3
a1256 8
aout-arm.lo: aout-arm.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aoutx.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
aout-cris.lo: aout-cris.c aout32.c aoutx.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d1260 4
a1263 1
  libaout.h aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
d1265 2
a1266 2
  $(INCDIR)/aout/ar.h aout-target.h
aout-tic30.lo: aout-tic30.c $(INCDIR)/filenames.h libaout.h \
d1268 6
a1273 7
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aoutx.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
aout32.lo: aout32.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1275 6
a1280 16
armnetbsd.lo: armnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
bout.lo: bout.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/bout.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h
cf-i386lynx.lo: cf-i386lynx.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-a29k.lo: coff-a29k.c $(INCDIR)/filenames.h $(INCDIR)/coff/a29k.h \
d1283 1
a1283 4
coff-apollo.lo: coff-apollo.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/apollo.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-arm.lo: coff-arm.c $(INCDIR)/filenames.h $(INCDIR)/coff/arm.h \
d1286 1
a1286 2
coff-aux.lo: coff-aux.c $(INCDIR)/filenames.h $(INCDIR)/coff/aux-coff.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/m68k.h coff-m68k.c \
d1288 1
a1288 7
coff-h8300.lo: coff-h8300.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/h8500.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/filenames.h $(INCDIR)/coff/i386.h \
d1291 4
a1294 2
coff-i860.lo: coff-i860.c $(INCDIR)/filenames.h $(INCDIR)/coff/i860.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1296 2
a1297 5
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i960.lo: coff-i960.c $(INCDIR)/filenames.h $(INCDIR)/coff/i960.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1299 7
a1305 1
coff-m68k.lo: coff-m68k.c $(INCDIR)/filenames.h $(INCDIR)/coff/m68k.h \
d1308 12
a1319 2
coff-m88k.lo: coff-m88k.c $(INCDIR)/filenames.h $(INCDIR)/coff/m88k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1321 1
a1321 5
coff-mips.lo: coff-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h libcoff.h \
  libecoff.h coffswap.h ecoffswap.h
coff-pmac.lo: coff-pmac.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
a1322 6
  xcoff-target.h coffcode.h coffswap.h
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/rs6000.h libcoff.h \
  $(INCDIR)/bfdlink.h xcoff-target.h coffcode.h coffswap.h
coff-sh.lo: coff-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h libcoff.h \
d1324 3
a1326 1
coff-sparc.lo: coff-sparc.c $(INCDIR)/filenames.h $(INCDIR)/coff/sparc.h \
d1329 2
a1330 2
coff-stgo32.lo: coff-stgo32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
d1333 2
a1334 5
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-tic30.lo: coff-tic30.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/tic30.h $(INCDIR)/coff/internal.h libcoff.h \
d1336 1
a1336 2
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic54x.h $(INCDIR)/coff/ti.h \
d1338 4
a1341 2
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/tic80.h $(INCDIR)/coff/internal.h libcoff.h \
d1343 1
a1343 4
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-we32k.lo: coff-we32k.c $(INCDIR)/filenames.h $(INCDIR)/coff/we32k.h \
d1346 10
a1355 28
coff-w65.lo: coff-w65.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/w65.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/z8k.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h libcoff.h
dwarf1.lo: dwarf1.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf.h
ecoff.lo: ecoff.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h libcoff.h libecoff.h
ecofflink.lo: ecofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/objalloc.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h libcoff.h libecoff.h
efi-app-ia32.lo: efi-app-ia32.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
elf.lo: elf.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
elf32-arc.lo: elf32-arc.c $(INCDIR)/filenames.h elf-bfd.h \
d1357 17
a1373 4
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/arc.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
d1377 7
a1383 1
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
a1384 4
  elf32-arm.h elf32-target.h
elf32-avr.lo: elf32-avr.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h \
d1386 2
a1387 3
elf32-cris.lo: elf32-cris.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/cris.h $(INCDIR)/elf/reloc-macros.h \
d1389 5
a1393 3
elf32-d10v.lo: elf32-d10v.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/d10v.h $(INCDIR)/elf/reloc-macros.h \
d1395 1
a1395 1
elf32-d30v.lo: elf32-d30v.c $(INCDIR)/filenames.h elf-bfd.h \
d1397 2
a1398 3
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/d30v.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-fr30.lo: elf32-fr30.c $(INCDIR)/filenames.h elf-bfd.h \
d1400 3
a1402 1
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/fr30.h $(INCDIR)/elf/reloc-macros.h \
d1404 7
a1410 1
elf32-gen.lo: elf32-gen.c $(INCDIR)/filenames.h elf-bfd.h \
d1412 3
a1414 11
  $(INCDIR)/bfdlink.h elf32-target.h
elf32-hppa.lo: elf32-hppa.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf32-hppa.h elf-hppa.h elf32-target.h
elf32-i370.lo: elf32-i370.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h \
d1416 2
a1417 3
elf32-i860.lo: elf32-i860.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/i860.h $(INCDIR)/elf/reloc-macros.h \
d1419 3
a1421 3
elf32-i960.lo: elf32-i960.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/i960.h $(INCDIR)/elf/reloc-macros.h \
d1423 1
a1423 1
elf32-m32r.lo: elf32-m32r.c $(INCDIR)/filenames.h elf-bfd.h \
d1425 1
a1425 1
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32r.h $(INCDIR)/elf/reloc-macros.h \
d1427 1
a1427 1
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1429 3
a1431 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/m68k.h $(INCDIR)/elf/reloc-macros.h \
d1433 4
a1436 9
elf32-m68hc11.lo: elf32-m68hc11.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68hc12.lo: elf32-m68hc12.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m88k.lo: elf32-m88k.c $(INCDIR)/filenames.h elf-bfd.h \
d1438 2
a1439 2
  $(INCDIR)/bfdlink.h elf32-target.h
elf-m10200.lo: elf-m10200.c $(INCDIR)/filenames.h elf-bfd.h \
d1441 2
a1442 2
  $(INCDIR)/bfdlink.h elf32-target.h
elf-m10300.lo: elf-m10300.c $(INCDIR)/filenames.h elf-bfd.h \
d1444 1
a1444 1
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
d1446 18
a1463 52
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mcore.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-mips.lo: elf32-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h ecoffswap.h \
  elf32-target.h
elf32-pj.lo: elf32-pj.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/pj.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-sh-lin.lo: elf32-sh-lin.c elf32-sh.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sparc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/sparc.h \
  elf32-target.h
elf32-v850.lo: elf32-v850.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/v850.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfcore.h elflink.h
elflink.lo: elflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
hp300bsd.lo: hp300bsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1465 9
a1473 6
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
som.lo: som.c $(INCDIR)/alloca-conf.h $(INCDIR)/filenames.h
i386aout.lo: i386aout.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
a1474 3
i386bsd.lo: i386bsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1476 1
a1476 7
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
i386freebsd.lo: i386freebsd.c freebsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
d1478 21
a1498 29
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386msdos.lo: i386msdos.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386mach3.lo: i386mach3.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/filenames.h $(INCDIR)/ieee.h \
  libieee.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68klinux.lo: m68klinux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
m68klynx.lo: m68klynx.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68knetbsd.lo: m68knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c $(INCDIR)/filenames.h libaout.h \
d1501 21
a1521 9
mipsbsd.lo: mipsbsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.lo: newsos3.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c $(INCDIR)/filenames.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/filenames.h $(INCDIR)/nlm/i386-ext.h \
d1524 1
a1524 5
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/nlm/sparc32-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/nlm/ppc-ext.h \
d1527 43
a1569 40
nlm32.lo: nlm32.c nlmcode.h $(INCDIR)/filenames.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
oasys.lo: oasys.c $(INCDIR)/filenames.h $(INCDIR)/oasys.h \
  liboasys.h
pc532-mach.lo: pc532-mach.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
pe-arm.lo: pe-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
pei-arm.lo: pei-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
pe-i386.lo: pe-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
pei-i386.lo: pei-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
pe-mcore.lo: pe-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
pei-mcore.lo: pei-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
pe-ppc.lo: pe-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-ppc.lo: pei-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/internal.h \
d1572 1
a1572 8
pe-sh.lo: pe-sh.c $(INCDIR)/filenames.h coff-sh.c $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h coffcode.h peicode.h libpei.h
pei-sh.lo: pei-sh.c $(INCDIR)/filenames.h coff-sh.c \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h coffcode.h peicode.h \
  libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/filenames.h $(INCDIR)/coff/mipspe.h \
d1575 9
a1583 11
pei-mips.lo: pei-mips.c $(INCDIR)/filenames.h pe-mips.c \
  $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
ppcboot.lo: ppcboot.c $(INCDIR)/filenames.h
reloc16.lo: reloc16.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/coff/internal.h libcoff.h
riscix.lo: riscix.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sparclinux.lo: sparclinux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
d1586 28
a1613 1
sparclynx.lo: sparclynx.c $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
d1617 3
a1619 27
sparcnetbsd.lo: sparcnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sunos.lo: sunos.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
  $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
versados.lo: versados.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
vms.lo: vms.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-gsd.lo: vms-gsd.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-hdr.lo: vms-hdr.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-misc.lo: vms-misc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
xcofflink.lo: xcofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h libcoff.h
aout64.lo: aout64.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1622 11
a1632 25
  libcoff.h libecoff.h coffswap.h ecoffswap.h
coff64-rs6000.lo: coff64-rs6000.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/rs6k64.h libcoff.h \
  $(INCDIR)/bfdlink.h xcoff-target.h coffcode.h coffswap.h
demo64.lo: demo64.c aoutf1.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
efi-app-ia64.lo: efi-app-ia64.c $(INCDIR)/filenames.h \
  coff-ia64.c $(INCDIR)/coff/ia64.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
elf64-x86-64.lo: elf64-x86-64.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/x86-64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-alpha.lo: elf64-alpha.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/alpha.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h libcoff.h \
  libecoff.h ecoffswap.h elf64-target.h
elf64-hppa.lo: elf64-hppa.c $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
a1633 14
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf64-hppa.h elf-hppa.h elf64-target.h
elf64-gen.lo: elf64-gen.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf64-target.h
elf64-mips.lo: elf64-mips.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  ecoffswap.h elf64-target.h
elf64-sparc.lo: elf64-sparc.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/sparc.h \
d1636 1
a1636 22
elf64.lo: elf64.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfcore.h elflink.h
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/filenames.h \
  $(INCDIR)/nlm/alpha-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm64.lo: nlm64.c nlmcode.h $(INCDIR)/filenames.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
aix386-core.lo: aix386-core.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h
hpux-core.lo: hpux-core.c $(INCDIR)/filenames.h
irix-core.lo: irix-core.c $(INCDIR)/filenames.h
lynx-core.lo: lynx-core.c $(INCDIR)/filenames.h
osf-core.lo: osf-core.c $(INCDIR)/filenames.h
sco5-core.lo: sco5-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c $(INCDIR)/filenames.h
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
d1638 15
a1652 12
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
peigen.lo: peigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
@


1.1.1.8
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 1
a1 1
# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am
d3 1
a3 1
# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
a116 2
bfd_default_target_size = @@bfd_default_target_size@@
bfd_libs = @@bfd_libs@@
a117 2
bfd_version = @@bfd_version@@
bfd_version_string = @@bfd_version_string@@
a130 2
bfdlibdir = @@bfdlibdir@@
bfdincludedir = @@bfdincludedir@@
d132 1
a132 1
bfdlib_LTLIBRARIES = libbfd.la
d147 2
a148 3
BFD32_LIBS = \
	archive.lo archures.lo bfd.lo bfdio.lo bfdwin.lo \
	cache.lo coffgen.lo corefile.lo \
d152 1
a152 1
	merge.lo dwarf2.lo simple.lo
d155 2
a156 5
BFD64_LIBS = archive64.lo

BFD32_LIBS_CFILES = \
	archive.c archures.c bfd.c bfdio.c bfdwin.c \
	cache.c coffgen.c corefile.c \
d160 1
a160 2
	merge.c dwarf2.c simple.c

a161 1
BFD64_LIBS_CFILES = archive64.c
a173 1
	cpu-dlx.lo \
a174 1
	cpu-frv.lo \
a182 2
	cpu-ip2k.lo \
	cpu-iq2000.lo \
a191 3
	cpu-mmix.lo \
	cpu-msp430.lo \
	cpu-or32.lo \
a192 2
	cpu-openrisc.lo \
	cpu-pdp11.lo \
a195 1
	cpu-s390.lo \
a198 1
	cpu-tic4x.lo \
a204 2
	cpu-xstormy16.lo \
	cpu-xtensa.lo \
a216 1
	cpu-dlx.c \
a217 1
	cpu-frv.c \
a225 2
	cpu-ip2k.c \
	cpu-iq2000.c \
a234 3
	cpu-mmix.c \
	cpu-msp430.c \
	cpu-or32.c \
a235 2
	cpu-openrisc.c \
	cpu-pdp11.c \
a238 1
	cpu-s390.c \
a241 1
	cpu-tic4x.c \
a247 2
	cpu-xstormy16.c \
	cpu-xtensa.c \
d280 1
a280 1
	coff-or32.lo \
a286 1
	coff-tic4x.lo \
a305 1
	elf32-dlx.lo \
a306 1
	elf32-frv.lo \
a307 1
	elf32-h8300.lo \
a313 2
	elf32-ip2k.lo \
	elf32-iq2000.lo \
a316 1
	elf32-m68hc1x.lo \
a321 1
	elfxx-mips.lo \
a322 3
	elf32-msp430.lo \
	elf32-openrisc.lo \
	elf32-or32.lo \
a324 1
	elf32-s390.lo \
d326 1
a326 2
	elf32-sh64.lo \
	elf32-sh64-com.lo \
a328 3
	elf32-vax.lo \
	elf32-xstormy16.lo \
	elf32-xtensa.lo \
a330 2
	elf-strtab.lo \
	elf-eh-frame.lo \
a351 1
	mach-o.lo \
a361 2
	pdp11.lo \
	pef.lo \
a382 2
	vax1knetbsd.lo \
	vaxbsd.lo \
d389 1
a389 4
	xcofflink.lo \
	xsym.lo \
	xtensa-isa.lo \
	xtensa-modules.lo
d419 1
a419 1
	coff-or32.c \
a425 1
	coff-tic4x.c \
a444 1
	elf32-dlx.c \
a445 1
	elf32-frv.c \
a446 1
	elf32-h8300.c \
a451 2
	elf32-ip2k.c \
	elf32-iq2000.c \
a455 1
	elf32-m68hc1x.c \
a459 1
	elfxx-mips.c \
a460 3
	elf32-msp430.c \
	elf32-openrisc.c \
	elf32-or32.c \
a462 3
	elf32-sh64.c \
	elf32-sh64-com.c \
	elf32-s390.c \
d464 1
a466 3
	elf32-vax.c \
	elf32-xstormy16.c \
	elf32-xtensa.c \
a468 2
	elf-strtab.c \
	elf-eh-frame.c \
a489 1
	mach-o.c \
a499 2
	pdp11.c \
	pef.c \
a519 2
	vax1knetbsd.c \
	vaxbsd.c \
d526 1
a526 4
	xcofflink.c \
	xsym.c \
	xtensa-isa.c \
	xtensa-modules.c
a532 1
	aix5ppc-core.lo \
a542 1
	elfn32-mips.lo \
a543 4
	elf64-mmix.lo \
	elf64-sh64.lo \
	elf64-ppc.lo \
	elf64-s390.lo \
a545 1
	mmo.lo \
a551 1
	aix5ppc-core.c \
a560 1
	elfn32-mips.c \
a561 4
	elf64-mmix.c \
	elf64-ppc.c \
	elf64-s390.c \
	elf64-sh64.c \
a563 1
	mmo.c \
a593 1
BFD_LIBS = @@bfd_libs@@
d601 1
a601 2
	$(BFD32_LIBS_CFILES) \
	$(BFD64_LIBS_CFILES) \
d616 5
a620 8
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h \
	elf64-hppa.h elfcode.h elfcore.h elflink.h \
	freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h libxcoff.h mach-o.h \
	netbsd.h nlm-target.h nlmcode.h nlmswap.h ns32k.h \
	pef.h pef-traceback.h peicode.h som.h version.h \
	vms.h xcoff-target.h xsym.h
d624 1
a624 1
	bfdver.h elf32-target.h elf64-target.h targmatch.h
d638 1
a638 1
libbfd_la_SOURCES = $(BFD32_LIBS_CFILES) $(BFD64_LIBS_CFILES)
d651 1
a651 1
BFD_H_DEPS = $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h
d655 1
a655 6
	reloc.c syms.c bfd.c bfdio.c bfdwin.c \
	archive.c corefile.c targets.c format.c

BFD64_H_FILES = archive64.c
LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c bfdio.c bfdwin.c \
	cache.c reloc.c archures.c elf.c
d657 1
d670 1
a670 1
CONFIG_CLEAN_FILES =  bfd-in3.h bfdver.h
d680 1
a680 1
LTLIBRARIES =  $(bfdlib_LTLIBRARIES)
d682 4
a685 5
libbfd_la_OBJECTS =  archive.lo archures.lo bfd.lo bfdio.lo bfdwin.lo \
cache.lo coffgen.lo corefile.lo format.lo init.lo libbfd.lo opncls.lo \
reloc.lo section.lo syms.lo targets.lo hash.lo linker.lo srec.lo \
binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo merge.lo dwarf2.lo \
simple.lo archive64.lo
d693 1
a693 1
configure.in version.h
d698 1
a698 1
TAR = gtar
a746 2
bfdver.h: $(top_builddir)/config.status version.h
	cd $(top_builddir) && CONFIG_FILES=$@@:version.h CONFIG_HEADERS= $(SHELL) ./config.status
d801 1
a801 1
mostlyclean-bfdlibLTLIBRARIES:
d803 2
a804 2
clean-bfdlibLTLIBRARIES:
	-test -z "$(bfdlib_LTLIBRARIES)" || rm -f $(bfdlib_LTLIBRARIES)
d806 1
a806 1
distclean-bfdlibLTLIBRARIES:
d808 17
a824 1
maintainer-clean-bfdlibLTLIBRARIES:
d827 1
a827 1
	$(LINK) -rpath $(bfdlibdir) $(libbfd_la_LDFLAGS) $(libbfd_la_OBJECTS) $(libbfd_la_LIBADD) $(LIBS)
d865 1
a865 1
	  test "$$subdir" != "." || dot_seen=yes; \
d989 1
a989 1
install-exec-am:
d992 1
a992 1
install-data-am: install-bfdlibLTLIBRARIES
d998 1
a998 1
uninstall-am: uninstall-bfdlibLTLIBRARIES
d1006 1
a1006 1
	$(mkinstalldirs)  $(DESTDIR)$(bfdlibdir)
d1023 1
a1023 1
		mostlyclean-bfdlibLTLIBRARIES mostlyclean-tags \
d1029 1
a1029 1
		clean-bfdlibLTLIBRARIES clean-tags clean-generic \
d1035 1
a1035 1
		distclean-libtool distclean-bfdlibLTLIBRARIES \
d1045 2
a1046 3
		maintainer-clean-bfdlibLTLIBRARIES \
		maintainer-clean-tags maintainer-clean-generic \
		distclean-am
d1058 8
a1065 8
clean-libtool maintainer-clean-libtool mostlyclean-bfdlibLTLIBRARIES \
distclean-bfdlibLTLIBRARIES clean-bfdlibLTLIBRARIES \
maintainer-clean-bfdlibLTLIBRARIES uninstall-bfdlibLTLIBRARIES \
install-bfdlibLTLIBRARIES install-data-recursive \
uninstall-data-recursive install-exec-recursive \
uninstall-exec-recursive installdirs-recursive uninstalldirs-recursive \
all-recursive check-recursive installcheck-recursive info-recursive \
dvi-recursive mostlyclean-recursive distclean-recursive clean-recursive \
d1070 4
a1073 4
install-data-am install-data install-am install uninstall-am uninstall \
all-redirect all-am all installdirs-am installdirs mostlyclean-generic \
distclean-generic clean-generic maintainer-clean-generic clean \
mostlyclean distclean maintainer-clean
d1077 2
a1078 2
	for file in $(SRC_POTFILES); do echo $$file; done | sort > tmp.src \
	  && mv tmp.src $(srcdir)/po/SRC-POTFILES.in
d1081 2
a1082 2
	for file in $(BLD_POTFILES); do echo $$file; done | sort > tmp.bld \
	  && mv tmp.bld $(srcdir)/po/BLD-POTFILES.in
d1132 1
a1132 1
targets.lo: targets.c Makefile
d1135 1
a1135 1
archures.lo: archures.c Makefile
d1167 4
a1170 6
$(BFD32_LIBS) \
 $(BFD64_LIBS) \
 $(ALL_MACHINES) \
 $(BFD32_BACKENDS) \
 $(BFD64_BACKENDS) \
 $(OPTIONAL_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
d1172 2
a1173 1
install-bfdlibLTLIBRARIES: @@INSTALL_LIBBFD_TRUE@@install_libbfd
d1175 4
a1178 29

uninstall-bfdlibLTLIBRARIES: @@INSTALL_LIBBFD_TRUE@@uninstall_libbfd
	@@$(NORMAL_UNINSTALL)

.PHONY: install_libbfd uninstall_libbfd
install_libbfd: $(bfdlib_LTLIBRARIES) $(BFD_H)
	$(mkinstalldirs) $(DESTDIR)$(bfdlibdir)
	$(mkinstalldirs) $(DESTDIR)$(bfdincludedir)
	@@list='$(bfdlib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(bfdlibdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(bfdlibdir)/$$p; \
	  else :; fi; \
	done
	$(INSTALL_DATA) $(BFD_H) $(DESTDIR)$(bfdincludedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(DESTDIR)$(bfdincludedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/symcat.h $(DESTDIR)$(bfdincludedir)/symcat.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(DESTDIR)$(bfdincludedir)/bfdlink.h

uninstall_libbfd:
	list='$(bfdlib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(bfdlibdir)/$$p; \
	done
	rm -f $(DESTDIR)$(bfdincludedir)/bfd.h
	rm -f $(DESTDIR)$(bfdincludedir)/ansidecl.h
	rm -f $(DESTDIR)$(bfdincludedir)/symcat.h
	rm -f $(DESTDIR)$(bfdincludedir)/bfdlink.h

Makefile: $(srcdir)/configure.in
d1201 2
a1202 2
		-e 's!@@SRCDIR@@!$(srcdir)!'	\
		-e 's!@@TOPDIR@@!'`echo $(srcdir) | sed -e s,/bfd$$,,`'!'
d1251 1
a1251 1
stmp-bin2-h: $(BFD_H_FILES) $(BFD64_H_FILES)
d1280 6
a1285 9
  $(INCDIR)/aout/ranlib.h $(INCDIR)/safe-ctype.h
archures.lo: archures.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
bfd.lo: bfd.c bfdver.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
bfdio.lo: bfdio.c $(INCDIR)/filenames.h
bfdwin.lo: bfdwin.c $(INCDIR)/filenames.h
d1293 1
a1293 2
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h \
  $(INCDIR)/libiberty.h
d1296 2
a1297 2
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
d1303 2
a1304 3
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
binary.lo: binary.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
d1306 1
a1306 2
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
d1308 1
a1308 1
  $(INCDIR)/aout/stab.def $(INCDIR)/safe-ctype.h
a1310 2
merge.lo: merge.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
a1313 2
simple.lo: simple.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
archive64.lo: archive64.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h
a1321 1
cpu-dlx.lo: cpu-dlx.c $(INCDIR)/filenames.h
a1322 1
cpu-frv.lo: cpu-frv.c $(INCDIR)/filenames.h
a1331 2
cpu-ip2k.lo: cpu-ip2k.c $(INCDIR)/filenames.h
cpu-iq2000.lo: cpu-iq2000.c $(INCDIR)/filenames.h
a1340 3
cpu-mmix.lo: cpu-mmix.c $(INCDIR)/filenames.h
cpu-msp430.lo: cpu-msp430.c $(INCDIR)/filenames.h
cpu-or32.lo: cpu-or32.c $(INCDIR)/filenames.h
a1341 2
cpu-openrisc.lo: cpu-openrisc.c $(INCDIR)/filenames.h
cpu-pdp11.lo: cpu-pdp11.c $(INCDIR)/filenames.h
a1344 1
cpu-s390.lo: cpu-s390.c $(INCDIR)/filenames.h
a1347 1
cpu-tic4x.lo: cpu-tic4x.c $(INCDIR)/filenames.h
d1350 1
a1350 1
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
a1353 2
cpu-xstormy16.lo: cpu-xstormy16.c $(INCDIR)/filenames.h
cpu-xtensa.lo: cpu-xtensa.c $(INCDIR)/filenames.h
d1360 2
a1361 2
  $(INCDIR)/safe-ctype.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1363 3
a1365 3
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1367 1
a1367 3
  ns32k.h libaout.h $(INCDIR)/bfdlink.h aoutx.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
d1374 1
a1374 2
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aoutx.h \
  $(INCDIR)/safe-ctype.h
d1379 3
a1381 3
aout32.lo: aout32.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1389 2
a1390 3
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1392 2
a1393 2
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1395 2
a1396 2
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1398 2
a1399 2
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1401 2
a1402 2
  $(INCDIR)/coff/apollo.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1404 4
a1407 1
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
a1408 4
coff-aux.lo: coff-aux.c $(INCDIR)/filenames.h $(INCDIR)/coff/aux-coff.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  coff-m68k.c libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  coffswap.h
d1410 4
a1413 2
  genlink.h $(INCDIR)/coff/h8300.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/libiberty.h \
a1414 3
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/h8500.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1416 2
a1417 2
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1419 2
a1420 2
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1422 2
a1423 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1428 2
a1429 2
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1431 2
a1432 2
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1435 12
a1446 3
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  libcoff.h libecoff.h coffswap.h ecoffswap.h
coff-or32.lo: coff-or32.c $(INCDIR)/filenames.h $(INCDIR)/coff/or32.h \
a1448 10
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/coff/rs6000.h libcoff.h libxcoff.h coffcode.h \
  coffswap.h
coff-sh.lo: coff-sh.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-sparc.lo: coff-sparc.c $(INCDIR)/filenames.h $(INCDIR)/coff/sparc.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1450 3
a1452 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/go32exe.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h go32stub.h
d1454 2
a1455 2
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1457 2
a1458 5
  $(INCDIR)/coff/tic30.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-tic4x.lo: coff-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/tic4x.h $(INCDIR)/coff/ti.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1463 2
a1464 2
  $(INCDIR)/coff/tic80.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1466 2
a1467 2
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1469 2
a1470 2
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1472 2
a1473 2
  $(INCDIR)/coff/w65.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1475 2
a1476 2
  $(INCDIR)/coff/z8k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1492 3
a1494 3
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1497 1
a1497 1
  $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h
d1501 1
a1501 1
  $(INCDIR)/libiberty.h elf32-target.h
a1525 4
elf32-dlx.lo: elf32-dlx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dlx.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1529 4
elf32-frv.lo: elf32-frv.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/frv.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1532 4
elf32-h8300.lo: elf32-h8300.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/h8.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1539 1
a1539 2
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1551 8
elf32-ip2k.lo: elf32-ip2k.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/ip2k.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-iq2000.lo: elf32-iq2000.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/iq2000.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1561 3
a1563 3
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
d1567 1
a1567 6
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68hc11.h \
  elf32-target.h elf32-m68hc1x.h
elf32-m68hc1x.lo: elf32-m68hc1x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
a1581 6
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h $(INCDIR)/hashtab.h
d1584 3
a1586 13
  $(INCDIR)/elf/external.h elfxx-mips.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h ecoffswap.h elf32-target.h
elf32-msp430.lo: elf32-msp430.c $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/msp430.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-openrisc.lo: elf32-openrisc.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/openrisc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
a1587 4
elf32-or32.lo: elf32-or32.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/or32.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
a1594 13
  elf32-ppc.h elf32-target.h
elf32-sh64.lo: elf32-sh64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh64.h elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-sh64-com.lo: elf32-sh64-com.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-sh64.h $(srcdir)/../opcodes/sh64-opc.h
elf32-s390.lo: elf32-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
d1600 4
a1611 4
  $(INCDIR)/libiberty.h elf32-target.h
elf32-vax.lo: elf32-vax.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/vax.h $(INCDIR)/elf/reloc-macros.h \
d1613 1
a1613 1
elf32-xstormy16.lo: elf32-xstormy16.c $(INCDIR)/filenames.h \
d1615 1
a1615 10
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/xstormy16.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/xtensa.h $(INCDIR)/xtensa-isa.h elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h \
  elflink.h
a1618 6
elf-strtab.lo: elf-strtab.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
elf-eh-frame.lo: elf-eh-frame.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
d1620 3
a1622 3
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1624 3
a1626 3
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1631 3
a1633 4
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d1642 3
a1644 3
  $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
d1665 1
a1665 1
  libieee.h $(INCDIR)/safe-ctype.h
a1680 2
mach-o.lo: mach-o.c mach-o.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h mach-o-target.c
d1704 2
a1705 2
oasys.lo: oasys.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/oasys.h liboasys.h
a1708 5
pdp11.lo: pdp11.c $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h $(INCDIR)/safe-ctype.h
pef.lo: pef.c pef.h pef-traceback.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h
d1710 3
a1712 3
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1714 3
a1716 3
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1718 3
a1720 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1722 3
a1724 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1726 9
a1734 1
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1737 2
a1738 2
pei-mcore.lo: pei-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1741 3
a1743 12
pe-ppc.lo: pe-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-ppc.lo: pei-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-sh.lo: pe-sh.c $(INCDIR)/filenames.h coff-sh.c $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  coffcode.h peicode.h libpei.h
d1745 1
a1745 2
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1749 2
a1750 3
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1752 4
a1755 4
  $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
ppcboot.lo: ppcboot.c $(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h
a1777 6
vax1knetbsd.lo: vax1knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
vaxbsd.lo: vaxbsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1783 2
a1784 2
vms-hdr.lo: vms-hdr.c bfdver.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h vms.h
d1790 4
a1793 11
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h libcoff.h \
  libxcoff.h
xsym.lo: xsym.c xsym.h $(INCDIR)/filenames.h
xtensa-isa.lo: xtensa-isa.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
aix5ppc-core.lo: aix5ppc-core.c
aout64.lo: aout64.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1799 2
a1800 3
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/coff/rs6k64.h libcoff.h libxcoff.h coffcode.h \
  coffswap.h
d1806 3
a1808 3
  coff-ia64.c $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1810 2
a1811 2
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/x86-64.h \
a1827 7
elfn32-mips.lo: elfn32-mips.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  ecoffswap.h elf32-target.h
d1830 4
a1833 21
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
  elf64-target.h
elf64-mmix.lo: elf64-mmix.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/mmix.h elf64-target.h
elf64-ppc.lo: elf64-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc64.h $(INCDIR)/elf/reloc-macros.h \
  elf64-ppc.h elf64-target.h
elf64-s390.lo: elf64-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elf64-sh64.lo: elf64-sh64.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
d1839 3
a1841 6
elf64.lo: elf64.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h \
  elflink.h
mmo.lo: mmo.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/mmix.h
d1849 2
a1850 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h
d1869 2
a1870 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h libpei.h
d1872 2
a1873 2
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h libpei.h
@


1.1.1.9
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d1 1
a1 1
# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am
a70 1
BFD_HOST_LONG_LONG = @@BFD_HOST_LONG_LONG@@
a117 1
bfd_file_ptr = @@bfd_file_ptr@@
a119 1
bfd_ufile_ptr = @@bfd_ufile_ptr@@
a337 1
	elf32-am33lin.lo \
a502 1
	elf32-am33lin.c \
d723 1
a723 1
	elf64-hppa.h elfcode.h elfcore.h \
d812 1
a812 1
TAR = tar
d1178 1
a1178 2
	for file in $(SRC_POTFILES); do echo $$file; done \
	  | LC_COLLATE= sort > tmp.src \
d1182 1
a1182 2
	for file in $(BLD_POTFILES); do echo $$file; done \
	  | LC_COLLATE= sort > tmp.bld \
d1185 9
d1398 2
a1399 3
# We want to rerun configure if config.bfd, configure.host or version.h change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd \
		$(srcdir)/configure.host $(srcdir)/version.h
d1454 1
a1454 1
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
d1638 1
a1638 1
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/safe-ctype.h
a1657 4
elf32-am33lin.lo: elf32-am33lin.c elf-m10300.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1697 1
a1697 1
  $(INCDIR)/elf/dwarf2.h $(INCDIR)/hashtab.h elf32-target.h
d1743 2
a1744 3
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
d1746 4
a1749 4
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
d1752 2
a1753 3
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h
d1837 3
a1839 5
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/xtensa.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-config.h elf32-target.h
d1843 1
a1843 1
  $(INCDIR)/safe-ctype.h
d1846 1
a1846 1
  $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h
d1949 2
a1950 2
pef.lo: pef.c $(INCDIR)/safe-ctype.h pef.h pef-traceback.h \
  $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
d2125 1
a2125 1
  $(INCDIR)/safe-ctype.h
d2149 1
a2149 2
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
  elf32-target.h
d2153 1
a2153 2
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
  elf64-target.h
@


