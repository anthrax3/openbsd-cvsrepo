head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.44
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.40
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.36
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.38
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.30
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.34
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.32
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.28
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.26
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.24
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.22
	OPENBSD_5_0:1.22.0.20
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.18
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.16
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.12
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.14
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.10
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.8
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.6
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.4
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.22.0.2
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.21.0.8
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.6
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.4
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.2
	OPENBSD_3_7_BASE:1.21
	BINUTILS_2_15:1.1.1.10
	OPENBSD_3_6:1.20.0.2
	OPENBSD_3_6_BASE:1.20
	BINUTILS-2_14:1.1.1.9
	OPENBSD_3_5:1.16.0.8
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.6
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	binutils-2_11_2:1.1.1.8
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	BINUTILS-2_10_1:1.1.1.7
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.10.0.14
	OPENBSD_2_7_BASE:1.10
	new-binutils:1.10.0.12
	OPENBSD_2_6:1.10.0.10
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.8
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.6
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.22
date	2006.10.08.21.12.37;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.02.20.45.05;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2004.06.07.22.05.23;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2004.05.21.21.33.08;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2004.05.20.21.33.53;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2004.05.17.21.54.21;	author drahn;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.14.07.37.10;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.13.22.33.44;	author fgsch;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.13.17.07.29;	author fgsch;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.09.22.29.25;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.20.21.52.49;	author tomo;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.12.19.11.10;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	97.07.06.15.35.03;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.07.03.14.39.25;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	96.12.22.18.11.24;	author rahnds;	state Exp;
branches;
next	1.7;

1.7
date	96.12.12.05.16.35;	author imp;	state Exp;
branches;
next	1.6;

1.6
date	96.11.23.03.32.57;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.10.06.19.40.32;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.09.04.19.00.12;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.06.07.21.09.15;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.08.22.16.14;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.37;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.37;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.05.19;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.37.29;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.11.19.14.12.17;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.18.34;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.45.32;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2001.06.09.22.06.39;	author espie;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2002.05.13.13.22.15;	author fgsch;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.05.17.20.42.12;	author drahn;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2004.11.02.20.22.18;	author miod;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Define superH obsd-specific emulations for ld, and use it by default.
@
text
@dnl Process this file with autoconf to produce a configure script.
dnl

AC_PREREQ(2.13)
AC_INIT(libbfd.c)

AC_CANONICAL_SYSTEM
AC_ISC_POSIX

AM_INIT_AUTOMAKE(bfd, 2.15)
# Uncomment the next line to remove the date from the reported bfd version
is_release=y

changequote(,)dnl
bfd_version=`echo "${VERSION}" | sed -e 's/\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\).*/\1.00\2.00\3.00\4.00\5/' -e 's/\([^\.]*\)\..*\(..\)\..*\(..\)\..*\(..\)\..*\(..\)$/\1\2\3\4\5/'`
changequote([,])dnl

bfd_version_string="\"${VERSION}\""
if test x${is_release} = x; then
  bfd_version_date=`sed -n -e 's/.*DATE //p' < ${srcdir}/version.h`
  bfd_version_string="\"${VERSION} ${bfd_version_date}\""
fi
AC_SUBST(bfd_version)
AC_SUBST(bfd_version_string)

dnl These must be called before AM_PROG_LIBTOOL, because it may want
dnl to call AC_CHECK_PROG.
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)

dnl Default to a non shared library.  This may be overridden by the
dnl configure option --enable-shared.
AM_DISABLE_SHARED

AM_PROG_LIBTOOL

AC_ARG_ENABLE(64-bit-bfd,
[  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)],
[case "${enableval}" in
  yes)  want64=true  ;;
  no)   want64=false ;;
  *)    AC_MSG_ERROR(bad value ${enableval} for 64-bit-bfd option) ;;
esac],[want64=false])dnl
AC_ARG_ENABLE(targets,
[  --enable-targets        alternative target configurations],
[case "${enableval}" in
  yes | "") AC_ERROR(enable-targets option must specify target names or 'all')
            ;;
  no)       enable_targets= ;;
  *)        enable_targets=$enableval ;;
esac])dnl
AC_ARG_ENABLE(commonbfdlib,
[  --enable-commonbfdlib   build shared BFD/opcodes/libiberty library],
[case "${enableval}" in
  yes) commonbfdlib=true ;;
  no)  commonbfdlib=false ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for BFD commonbfdlib option]) ;;
esac])dnl
AC_ARG_WITH(mmap,
[  --with-mmap             try using mmap for BFD input files if available],
[case "${withval}" in
  yes)  want_mmap=true ;;
  no)   want_mmap=false ;;
  *)    AC_MSG_ERROR(bad value ${withval} for BFD with-mmap option) ;;
esac],[want_mmap=false])dnl

build_warnings="-W -Wall -Wstrict-prototypes -Wmissing-prototypes"
AC_ARG_ENABLE(build-warnings,
[  --enable-build-warnings Enable build-time compiler warnings if gcc is used],
[case "${enableval}" in
  yes)	;;
  no)	build_warnings="-w";;
  ,*)   t=`echo "${enableval}" | sed -e "s/,/ /g"`
        build_warnings="${build_warnings} ${t}";;
  *,)   t=`echo "${enableval}" | sed -e "s/,/ /g"`
        build_warnings="${t} ${build_warnings}";;
  *)    build_warnings=`echo "${enableval}" | sed -e "s/,/ /g"`;;
esac
if test x"$silent" != x"yes" && test x"$build_warnings" != x""; then
  echo "Setting warning flags = $build_warnings" 6>&1
fi])dnl
WARN_CFLAGS=""
if test "x${build_warnings}" != x && test "x$GCC" = xyes ; then
    WARN_CFLAGS="${build_warnings}"
fi
AC_SUBST(WARN_CFLAGS)

AM_CONFIG_HEADER(config.h:config.in)

if test -z "$target" ; then
    AC_MSG_ERROR(Unrecognized target system type; please check config.sub.)
fi

AM_MAINTAINER_MODE
AM_INSTALL_LIBBFD
AC_EXEEXT

host64=false
target64=false
bfd_default_target_size=32

# host stuff:

AC_PROG_CC

ALL_LINGUAS="fr tr ja es sv da zh_CN ro"
CY_GNU_GETTEXT

# Permit host specific settings.
. ${srcdir}/configure.host

AC_SUBST(HDEFINES)
AC_PROG_INSTALL

BFD_HOST_64BIT_LONG=0
BFD_HOST_LONG_LONG=0
BFD_HOST_64_BIT_DEFINED=0
BFD_HOST_64_BIT=
BFD_HOST_U_64_BIT=

AC_MSG_CHECKING([for long long])
AC_CACHE_VAL(bfd_cv_has_long_long,
[AC_TRY_COMPILE(,
[unsigned long long ll = 18446744073709551615ULL;],
bfd_cv_has_long_long=yes, bfd_cv_has_long_long=no)])
AC_MSG_RESULT($bfd_cv_has_long_long)
if test $bfd_cv_has_long_long = yes; then
  BFD_HOST_LONG_LONG=1
  AC_COMPILE_CHECK_SIZEOF(long long)
fi

AC_COMPILE_CHECK_SIZEOF(long)
if test "x${ac_cv_sizeof_long}" = "x8"; then
  host64=true
  BFD_HOST_64BIT_LONG=1
  test -n "${HOST_64BIT_TYPE}" || HOST_64BIT_TYPE="long"
  test -n "${HOST_U_64BIT_TYPE}" || HOST_U_64BIT_TYPE="unsigned long"
elif test "x${ac_cv_sizeof_long_long}" = "x8"; then
  test -n "${HOST_64BIT_TYPE}" || HOST_64BIT_TYPE="long long"
  test -n "${HOST_U_64BIT_TYPE}" || HOST_U_64BIT_TYPE="unsigned long long"
fi

if test -n "${HOST_64BIT_TYPE}" -a -n "${HOST_U_64BIT_TYPE}"; then
  BFD_HOST_64_BIT_DEFINED=1
  BFD_HOST_64_BIT="${HOST_64BIT_TYPE}"
  BFD_HOST_U_64_BIT="${HOST_U_64BIT_TYPE}"
fi

AC_SUBST(BFD_HOST_64BIT_LONG)
AC_SUBST(BFD_HOST_LONG_LONG)
AC_SUBST(BFD_HOST_64_BIT_DEFINED)
AC_SUBST(BFD_HOST_64_BIT)
AC_SUBST(BFD_HOST_U_64_BIT)

BFD_CC_FOR_BUILD

AC_CHECK_HEADERS(stddef.h string.h strings.h stdlib.h time.h unistd.h)
AC_CHECK_HEADERS(fcntl.h sys/file.h sys/time.h)
AC_HEADER_TIME
AC_HEADER_DIRENT
AC_CHECK_FUNCS(fcntl getpagesize setitimer sysconf fdopen getuid getgid)
AC_CHECK_FUNCS(strtoull)

BFD_BINARY_FOPEN

BFD_NEED_DECLARATION(strstr)
BFD_NEED_DECLARATION(malloc)
BFD_NEED_DECLARATION(realloc)
BFD_NEED_DECLARATION(free)
BFD_NEED_DECLARATION(getenv)

# If we are configured native, pick a core file support file.
COREFILE=
COREFLAG=
TRAD_HEADER=
if test "${target}" = "${host}"; then
  case "${host}" in
  alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu)
	COREFILE=''
	;;
  alpha*-*-linux-gnu*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/alphalinux.h"'
	;;
  alpha*-*-netbsd* | alpha*-*-openbsd*)
	COREFILE=netbsd-core.lo
	;;
  alpha*-*-*)		COREFILE=osf-core.lo ;;
  arm-*-freebsd* | arm-*-kfreebsd*-gnu)
			COREFILE='' ;;
  arm-*-netbsd* | arm-*-openbsd*)
			COREFILE=netbsd-core.lo ;;
  arm-*-riscix)		COREFILE=trad-core.lo ;;
  hppa*-*-hpux*)	COREFILE=hpux-core.lo ;;
  hppa*-*-hiux*)	COREFILE=hpux-core.lo ;;
  hppa*-*-mpeix*)	COREFILE=hpux-core.lo ;;
  hppa*-*-bsd*)		COREFILE="hpux-core.lo hppabsd-core.lo"
			COREFLAG="-DHPUX_CORE -DHPPABSD_CORE" ;;
  hppa*-*-openbsd*)	COREFILE=netbsd-core.lo ;;

  i370-*-*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i370linux.h"'
	;;

changequote(,)dnl
  i[3-7]86-sequent-bsd*)
changequote([,])dnl
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/symmetry.h"'
	;;
changequote(,)dnl
  i[3-7]86-sequent-sysv4*) ;;
  i[3-7]86-sequent-sysv*)
changequote([,])dnl
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/symmetry.h"'
	;;
changequote(,)dnl
  i[3-7]86-*-bsdi)
changequote([,])dnl
	COREFILE=
	;;
changequote(,)dnl
  i[3-7]86-*-bsd* | i[3-7]86-*-freebsd[123] | i[3-7]86-*-freebsd[123]\.* | i[3-7]86-*-freebsd4\.[01234]* | i[3-7]86-*-freebsd*aout*)
changequote([,])dnl
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i386bsd.h"'
	;;
changequote(,)dnl
  i[3-7]86-*-freebsd* | i[3-7]86-*-kfreebsd*-gnu)
changequote([,])dnl
	COREFILE=''
	TRAD_HEADER='"hosts/i386bsd.h"'
	;;
changequote(,)dnl
  i[3-7]86-*-netbsd* | i[3-7]86-*-knetbsd*-gnu | i[3-7]86-*-openbsd*)
changequote([,])dnl
	COREFILE=netbsd-core.lo
	;;
changequote(,)dnl
  i[3-7]86-esix-sysv3*)
changequote([,])dnl
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/esix.h"'
	;;
changequote(,)dnl
  i[3-7]86-*-sco3.2v5*)
changequote([,])dnl
	COREFILE=sco5-core.lo
	;;
changequote(,)dnl
  i[3-7]86-*-sco* | i[3-7]86-*-isc*)
changequote([,])dnl
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i386sco.h"'
	;;
changequote(,)dnl
  i[3-7]86-*-mach3*)
changequote([,])dnl
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i386mach3.h"'
	;;
changequote(,)dnl
  i[3-7]86-*-linux-gnu*)
changequote([,])dnl
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i386linux.h"'
	;;
changequote(,)dnl
  i[3-7]86-*-isc*)	COREFILE=trad-core.lo ;;
  i[3-7]86-*-aix*)	COREFILE=aix386-core.lo ;;
changequote([,])dnl
  i860-*-mach3* | i860-*-osf1*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i860mach3.h"'
	;;
  mips-*-netbsd* | mips*-*-openbsd*)
	COREFILE=netbsd-core.lo
	;;
  mips-dec-*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/decstation.h"'
	;;
  mips-sgi-irix4*)	COREFILE=irix-core.lo ;;
  mips-sgi-irix5*)	COREFILE=irix-core.lo ;;
  mips-sgi-irix6*)	COREFILE=irix-core.lo ;;
  mips-*-sysv4*)	;;
  mips-*-sysv* | mips-*-riscos*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/riscos.h"'
	;;
  mips-sony-bsd*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/news-mips.h"'
	;;
  m68*-bull*-sysv*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/dpx2.h"'
	;;
  m68*-hp-hpux*)	COREFILE=hpux-core.lo ;;
  m68*-hp-bsd*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/hp300bsd.h"'
	;;
  m68*-*-linux-gnu*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/m68klinux.h"'
	;;
  m68*-motorola-sysv*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/delta68.h"'
	;;
  m68*-sony-*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/news.h"'
	;;
  m68*-*-netbsd* | m68*-*-openbsd*)
	COREFILE=netbsd-core.lo
	;;
  m68*-apple-aux*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/m68kaux.h"'
	;;
  m88*-*-sysv4*)
	;;
  m88*-motorola-sysv*)
	COREFILE=ptrace-core.lo
	;;
  m88*-*-mach3*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/m88kmach3.h"'
	;;
  m88*-*-openbsd*)
	COREFILE=netbsd-core.lo
	;;
  ns32k-pc532-mach)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/pc532mach.h"'
	;;
  ns32k-*-netbsd*)
	COREFILE=netbsd-core.lo
	;;
  rs6000-*-lynx*)
  	COREFILE=lynx-core.lo
	;;
  rs6000-*-aix5.* | powerpc-*-aix5.*)
        COREFILE=rs6000-core.lo
	COREFLAG="$COREFLAG -DAIX_5_CORE -DAIX_CORE_DUMPX_CORE"
	;;
changequote(,)dnl
  rs6000-*-aix4.[3-9]* | powerpc-*-aix4.[3-9]*)
changequote([,])dnl
        COREFILE=rs6000-core.lo
	COREFLAG="$COREFLAG -DAIX_CORE_DUMPX_CORE"
	# Not all versions of AIX with -DAIX_CORE_DUMPX_CORE
	# have c_impl as a member of struct core_dumpx
	AC_MSG_CHECKING([for c_impl in struct core_dumpx])
	AC_TRY_COMPILE([#include <core.h>],
	  [struct core_dumpx c; c.c_impl = 0;],
	  [AC_DEFINE(HAVE_ST_C_IMPL, 1,
	    [Define if struct core_dumpx has member c_impl])
	  AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)])
	;;
  rs6000-*-aix4*)	COREFILE=rs6000-core.lo ;;
  rs6000-*-*)		COREFILE=rs6000-core.lo ;;
  powerpc-*-aix4*)	COREFILE=rs6000-core.lo ;;
  powerpc-*-aix*)	COREFILE=rs6000-core.lo ;;
  powerpc-*-beos*)	;;
  powerpc-*-freebsd* | powerpc-*-kfreebsd*-gnu)
		        COREFILE='' ;;
  powerpc-*-netbsd*)	COREFILE=netbsd-core.lo ;;
  powerpc-*-*bsd*)	COREFILE=netbsd-core.lo ;;
  s390*-*-*)            COREFILE=trad-core.lo ;;
  sh*-*-netbsd* | sh*-*-openbsd*)
  	COREFILE=netbsd-core.lo
	;;
  sparc-*-netbsd* | sparc*-*-openbsd*)
	COREFILE=netbsd-core.lo
	;;
  tahoe-*-*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/tahoe.h"'
	;;
  vax-*-netbsd* | vax-*-openbsd*)
  	COREFILE=netbsd-core.lo
	;;
  vax-*-ultrix2*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/vaxult2.h"'
	;;
  vax-*-ultrix*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/vaxult2.h"'
	;;
  vax-*-linux-gnu*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/vaxlinux.h"'
	;;
  vax-*-*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/vaxbsd.h"'
	;;
  x86_64-*-netbsd* | x86_64-*-openbsd*)
	COREFILE=netbsd-core.lo
	;;
  esac

  case "$COREFILE" in
  aix386-core.lo)	COREFLAG=-DAIX386_CORE ;;
  hppabsd-core.lo)	COREFLAG=-DHPPABSD_CORE ;;
  hpux-core.lo)		COREFLAG=-DHPUX_CORE ;;
  irix-core.lo)		COREFLAG=-DIRIX_CORE ;;
  lynx-core.lo)		COREFLAG=-DLYNX_CORE ;;
  netbsd-core.lo)	COREFLAG=-DNETBSD_CORE ;;
  osf-core.lo)		COREFLAG=-DOSF_CORE ;;
  ptrace-core.lo)	COREFLAG=-DPTRACE_CORE ;;
  rs6000-core.lo)	COREFLAG="$COREFLAG -DAIX_CORE" ;;
  sco5-core.lo)		COREFLAG="$COREFLAG -DSCO5_CORE" ;;
  trad-core.lo)		COREFLAG="$COREFLAG -DTRAD_CORE" ;;
  esac

  # ELF corefile support has several flavors, but all of
  # them use something called <sys/procfs.h>
  AC_CHECK_HEADERS(sys/procfs.h)
  if test "$ac_cv_header_sys_procfs_h" = yes; then
    BFD_HAVE_SYS_PROCFS_TYPE(prstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE(prstatus32_t)
    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(prstatus_t, pr_who)
    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(prstatus32_t, pr_who)
    BFD_HAVE_SYS_PROCFS_TYPE(pstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE(pxstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE(pstatus32_t)
    BFD_HAVE_SYS_PROCFS_TYPE(prpsinfo_t)
    BFD_HAVE_SYS_PROCFS_TYPE(prpsinfo32_t)
    BFD_HAVE_SYS_PROCFS_TYPE(psinfo_t)
    BFD_HAVE_SYS_PROCFS_TYPE(psinfo32_t)
    BFD_HAVE_SYS_PROCFS_TYPE(lwpstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE(lwpxstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(lwpstatus_t, pr_context)
    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(lwpstatus_t, pr_reg)
    BFD_HAVE_SYS_PROCFS_TYPE(win32_pstatus_t)
  fi
fi
AC_SUBST(COREFILE)
AC_SUBST(COREFLAG)
if test -n "$TRAD_HEADER"; then
  AC_DEFINE_UNQUOTED(TRAD_HEADER, $TRAD_HEADER,
    [Name of host specific header file to include in trad-core.c.])
fi

# Horrible hacks to build DLLs on Windows.
WIN32LDFLAGS=
WIN32LIBADD=
case "${host}" in
*-*-cygwin*)
  if test "$enable_shared" = "yes"; then
    WIN32LDFLAGS="-no-undefined"
    WIN32LIBADD="-L`pwd`/../libiberty -liberty -L`pwd`/../intl -lintl -lcygwin -lkernel32"
  fi
  ;;
*-*-linux*)
  # We borrow WIN32LIBADD so that the shared libbfd won't depend on
  # libiberty.a.
  case "${host}" in
  mips*-*-linux*)
    # Linux/MIPS uses PIC by default.
    if test "$enable_shared" = "yes"; then
      WIN32LIBADD="-L../libiberty -liberty"
    fi
    ;;
  *)
changequote(,)dnl
    x=`sed -n -e 's/^[ 	]*PICFLAG[ 	]*=[ 	]*//p' < ../libiberty/Makefile | sed -n '$p'`
changequote([,])dnl
    if test -n "$x"; then
      WIN32LIBADD="-L../libiberty/pic -liberty"
    fi
  ;;
  esac
  ;;
esac
AC_SUBST(WIN32LDFLAGS)
AC_SUBST(WIN32LIBADD)

# target stuff:

# Canonicalize the secondary target names.
if test -n "$enable_targets" ; then
    for targ in `echo $enable_targets | sed 's/,/ /g'`
    do
	result=`$ac_config_sub $targ 2>/dev/null`
	if test -n "$result" ; then
	    canon_targets="$canon_targets $result"
	else
	    # Allow targets that config.sub doesn't recognize, like "all".
	    canon_targets="$canon_targets $targ"
	fi
    done
fi

all_targets=false
defvec=
selvecs=
assocvecs=
selarchs=
TDEFINES=
for targ in $target $canon_targets
do
    if test "x$targ" = "xall"; then
        all_targets=true
	assocvecs="$assocvecs $targ_defvec $targ_selvecs"
    else
	. $srcdir/config.bfd
	if test "x$targ" = "x$target"; then
	    defvec=$targ_defvec
	fi
	selvecs="$selvecs $targ_defvec $targ_selvecs"
	selarchs="$selarchs $targ_archs"
	TDEFINES="$TDEFINES $targ_cflags"
    fi
done
AC_SUBST(TDEFINES)

# This processing still needs to be done if we're to decide properly whether
# 64-bit support needs to be compiled in.  Currently, it will be included if
# the default or any other explicitly requested target requires it; it
# will not be included on a 32-bit host if no 64-bit target is requested, and
# no "--with-64-bit-bfd" option is given, even if "--enable-targets=all" is
# used.

# uniq the default and selected vectors in all the configured targets.
f=""
for i in $selvecs ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
selvecs="$f"


# uniq the associated vectors in all the configured targets.
f=""
for i in $assocvecs ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
assocvecs="$f"


# uniq the architectures in all the configured targets.
f=""
for i in $selarchs ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
selarchs="$f"

# Target backend .o files.
tb=

elf="elf.lo elflink.lo elf-strtab.lo elf-eh-frame.lo dwarf1.lo"

for vec in $selvecs
do
    target_size=32
    case "$vec" in
    # This list is alphabetized to make it easy to compare
    # with the two vector lists in targets.c.  For the same reason,
    # use one entry per line, even though this leads to long lines.
    a29kcoff_big_vec)		tb="$tb coff-a29k.lo cofflink.lo" ;;
    a_out_adobe_vec)		tb="$tb aout-adobe.lo aout32.lo" ;;
    aix5coff64_vec)		tb="$tb coff64-rs6000.lo xcofflink.lo aix5ppc-core.lo"; target_size=64 ;;
    aout0_big_vec)		tb="$tb aout0.lo aout32.lo" ;;
    aout_arm_big_vec)		tb="$tb aout-arm.lo aout32.lo" ;;
    aout_arm_little_vec)	tb="$tb aout-arm.lo aout32.lo" ;;
    apollocoff_vec)		tb="$tb coff-apollo.lo" ;;
    arm_epoc_pe_big_vec)	tb="$tb epoc-pe-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pe_little_vec)	tb="$tb epoc-pe-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pei_big_vec)	tb="$tb epoc-pei-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pei_little_vec)	tb="$tb epoc-pei-arm.lo peigen.lo cofflink.lo " ;;
    armcoff_big_vec)		tb="$tb coff-arm.lo cofflink.lo " ;;
    armcoff_little_vec)		tb="$tb coff-arm.lo cofflink.lo " ;;
    armnetbsd_vec)		tb="$tb armnetbsd.lo aout32.lo" ;;
    armpe_big_vec)		tb="$tb pe-arm.lo peigen.lo cofflink.lo " ;;
    armpe_little_vec)		tb="$tb pe-arm.lo peigen.lo cofflink.lo " ;;
    armpei_big_vec)		tb="$tb pei-arm.lo peigen.lo cofflink.lo " ;;
    armpei_little_vec)		tb="$tb pei-arm.lo peigen.lo cofflink.lo " ;;
    b_out_vec_big_host)		tb="$tb bout.lo aout32.lo" ;;
    b_out_vec_little_host)	tb="$tb bout.lo aout32.lo" ;;
    bfd_efi_app_ia32_vec)	tb="$tb efi-app-ia32.lo peigen.lo cofflink.lo" ;;
    bfd_efi_app_ia64_vec)	tb="$tb efi-app-ia64.lo pepigen.lo cofflink.lo"; target_size=64 ;;
    bfd_elf32_am33lin_vec)	tb="$tb elf32-am33lin.lo elf32.lo $elf" ;;
    bfd_elf32_avr_vec)		tb="$tb elf32-avr.lo elf32.lo $elf" ;;
    bfd_elf32_big_generic_vec) 	tb="$tb elf32-gen.lo elf32.lo $elf" ;;
    bfd_elf32_bigarc_vec)	tb="$tb elf32-arc.lo elf32.lo $elf" ;;
    bfd_elf32_bigarm_oabi_vec)	tb="$tb elfarm-oabi.lo elf32.lo $elf" ;;
    bfd_elf32_bigarm_vec)	tb="$tb elfarm-nabi.lo elf32.lo $elf" ;;
    bfd_elf32_bigmips_vec) 	tb="$tb elf32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf32_cris_vec)		tb="$tb elf32-cris.lo elf32.lo $elf" ;;
    bfd_elf32_d10v_vec)		tb="$tb elf32-d10v.lo elf32.lo $elf" ;;
    bfd_elf32_d30v_vec)		tb="$tb elf32-d30v.lo elf32.lo $elf" ;;
    bfd_elf32_dlx_big_vec)	tb="$tb elf32-dlx.lo elf32.lo $elf" ;;
    bfd_elf32_fr30_vec)		tb="$tb elf32-fr30.lo elf32.lo $elf" ;;
    bfd_elf32_frv_vec)		tb="$tb elf32-frv.lo elf32.lo $elf" ;;
    bfd_elf32_frvfdpic_vec)	tb="$tb elf32-frv.lo elf32.lo $elf" ;;
    bfd_elf32_h8300_vec)	tb="$tb elf32-h8300.lo elf32.lo $elf" ;;
    bfd_elf32_hppa_linux_vec)	tb="$tb elf32-hppa.lo elf32.lo $elf" ;;
    bfd_elf32_hppa_vec)		tb="$tb elf32-hppa.lo elf32.lo $elf" ;;
    bfd_elf32_i370_vec)		tb="$tb elf32-i370.lo elf32.lo $elf" ;;
    bfd_elf32_i386_freebsd_vec)	tb="$tb elf32-i386.lo elf32.lo $elf" ;;
    bfd_elf32_i386_vec)		tb="$tb elf32-i386.lo elf32.lo $elf" ;;
    bfd_elf32_i860_little_vec)	tb="$tb elf32-i860.lo elf32.lo $elf" ;;
    bfd_elf32_i860_vec)		tb="$tb elf32-i860.lo elf32.lo $elf" ;;
    bfd_elf32_i960_vec)		tb="$tb elf32-i960.lo elf32.lo $elf" ;;
    bfd_elf32_ia64_big_vec)	tb="$tb elf32-ia64.lo elf32.lo $elf" ;;
    bfd_elf32_ia64_hpux_big_vec) tb="$tb elf32-ia64.lo elf32.lo $elf";;
    bfd_elf32_ip2k_vec)		tb="$tb elf32-ip2k.lo elf32.lo $elf" ;;
    bfd_elf32_iq2000_vec)       tb="$tb elf32-iq2000.lo elf32.lo $elf" ;;
    bfd_elf32_little_generic_vec) tb="$tb elf32-gen.lo elf32.lo $elf" ;;
    bfd_elf32_littlearc_vec)	tb="$tb elf32-arc.lo elf32.lo $elf" ;;
    bfd_elf32_littlearm_oabi_vec) tb="$tb elfarm-oabi.lo elf32.lo $elf" ;;
    bfd_elf32_littlearm_vec)	tb="$tb elfarm-nabi.lo elf32.lo $elf" ;;
    bfd_elf32_littlemips_vec) 	tb="$tb elf32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf32_m32r_vec)		tb="$tb elf32-m32r.lo elf32.lo $elf" ;;
    bfd_elf32_m32rle_vec)       tb="$tb elf32-m32r.lo elf32.lo $elf" ;;
    bfd_elf32_m32rlin_vec)      tb="$tb elf32-m32r.lo elf32.lo $elf" ;;
    bfd_elf32_m32rlelin_vec)    tb="$tb elf32-m32r.lo elf32.lo $elf" ;;
    bfd_elf32_m68hc11_vec)	tb="$tb elf32-m68hc11.lo elf32-m68hc1x.lo elf32.lo $elf" ;;
    bfd_elf32_m68hc12_vec)	tb="$tb elf32-m68hc12.lo elf32-m68hc1x.lo elf32.lo $elf" ;;
    bfd_elf32_m68k_vec)		tb="$tb elf32-m68k.lo elf32.lo $elf" ;;
    bfd_elf32_m88k_vec)		tb="$tb elf32-m88k.lo elf32.lo $elf" ;;
    bfd_elf32_mcore_big_vec)	tb="$tb elf32-mcore.lo elf32.lo $elf" ;;
    bfd_elf32_mcore_little_vec)	tb="$tb elf32-mcore.lo elf32.lo $elf" ;;
    bfd_elf32_mn10200_vec)	tb="$tb elf-m10200.lo elf32.lo $elf" ;;
    bfd_elf32_mn10300_vec)	tb="$tb elf-m10300.lo elf32.lo $elf" ;;
    bfd_elf32_msp430_vec)	tb="$tb elf32-msp430.lo elf32.lo $elf" ;;
    bfd_elf32_nbigmips_vec)	tb="$tb elfn32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf32_nlittlemips_vec)	tb="$tb elfn32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf32_ntradbigmips_vec)	tb="$tb elfn32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf32_ntradlittlemips_vec) tb="$tb elfn32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf32_openrisc_vec)	tb="$tb elf32-openrisc.lo elf32.lo $elf" ;;
    bfd_elf32_or32_big_vec)	tb="$tb elf32-or32.lo elf32.lo $elf" ;;
    bfd_elf32_pj_vec)           tb="$tb elf32-pj.lo elf32.lo $elf";;
    bfd_elf32_pjl_vec)          tb="$tb elf32-pj.lo elf32.lo $elf";;
    bfd_elf32_powerpc_vec)	tb="$tb elf32-ppc.lo elf32.lo $elf" ;;
    bfd_elf32_powerpcle_vec)	tb="$tb elf32-ppc.lo elf32.lo $elf" ;;
    bfd_elf32_s390_vec)		tb="$tb elf32-s390.lo elf32.lo $elf" ;;
    # FIXME: We include cofflink.lo not because it's needed for
    # bfd_elf32_sh64[l]_vec, but because we include bfd_elf32_sh[l]_vec
    # which needs it but does not list it.  Should be fixed in right place.
    bfd_elf32_sh64_vec)		tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" target_size=64 ;;
    bfd_elf32_sh64l_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" target_size=64 ;;
    bfd_elf32_sh64lin_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" target_size=64 ;;
    bfd_elf32_sh64blin_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" target_size=64 ;;
    bfd_elf32_sh64lnbsd_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" ;;
    bfd_elf32_sh64nbsd_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" ;;
    bfd_elf32_sh_vec)		tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo" ;;
    bfd_elf32_shblin_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shl_vec)		tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo" ;;
    bfd_elf32_shlin_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shlnbsd_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shlobsd_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shnbsd_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shobsd_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_sparc_vec)	tb="$tb elf32-sparc.lo elf32.lo $elf" ;;
    bfd_elf32_tradbigmips_vec)  tb="$tb elf32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf32_tradlittlemips_vec) tb="$tb elf32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf32_us_cris_vec)	tb="$tb elf32-cris.lo elf32.lo $elf" ;;
    bfd_elf32_v850_vec)		tb="$tb elf32-v850.lo elf32.lo $elf" ;;
    bfd_elf32_vax_vec)		tb="$tb elf32-vax.lo elf32.lo $elf" ;;
    bfd_elf32_xstormy16_vec)	tb="$tb elf32-xstormy16.lo elf32.lo $elf" ;;
    bfd_elf32_xtensa_le_vec)	tb="$tb xtensa-isa.lo xtensa-modules.lo elf32-xtensa.lo elf32.lo $elf" ;;
    bfd_elf32_xtensa_be_vec)	tb="$tb xtensa-isa.lo xtensa-modules.lo elf32-xtensa.lo elf32.lo $elf" ;;
    bfd_elf64_alpha_freebsd_vec) tb="$tb elf64-alpha.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_alpha_vec)	tb="$tb elf64-alpha.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_big_generic_vec) 	tb="$tb elf64-gen.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_bigmips_vec) 	tb="$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf64_hppa_linux_vec)	tb="$tb elf64-hppa.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_hppa_vec)		tb="$tb elf64-hppa.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_big_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_hpux_big_vec) tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_little_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_little_generic_vec) tb="$tb elf64-gen.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_littlemips_vec) 	tb="$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf64_mmix_vec) 	tb="$tb elf64-mmix.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_powerpc_vec)	tb="$tb elf64-ppc.lo elf64-gen.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_powerpcle_vec)	tb="$tb elf64-ppc.lo elf64-gen.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_s390_vec)		tb="$tb elf64-s390.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_sh64_vec)		tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64l_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64lin_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64blin_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64lnbsd_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64nbsd_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sparc_vec)	tb="$tb elf64-sparc.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_tradbigmips_vec)	tb="$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf64_tradlittlemips_vec) tb="$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf64_x86_64_vec)	tb="$tb elf64-x86-64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_mmo_vec)		tb="$tb mmo.lo" target_size=64 ;;
    bfd_powerpc_pe_vec)         tb="$tb pe-ppc.lo peigen.lo cofflink.lo" ;;
    bfd_powerpc_pei_vec)        tb="$tb pei-ppc.lo peigen.lo cofflink.lo" ;;
    bfd_powerpcle_pe_vec)       tb="$tb pe-ppc.lo peigen.lo cofflink.lo" ;;
    bfd_powerpcle_pei_vec)      tb="$tb pei-ppc.lo peigen.lo cofflink.lo" ;;
    cris_aout_vec)		tb="$tb aout-cris.lo" ;;
    demo_64_vec)		tb="$tb demo64.lo aout64.lo"; target_size=64 ;;
    ecoff_big_vec)		tb="$tb coff-mips.lo ecoff.lo ecofflink.lo" ;;
    ecoff_biglittle_vec)	tb="$tb coff-mips.lo ecoff.lo ecofflink.lo" ;;
    ecoff_little_vec)		tb="$tb coff-mips.lo ecoff.lo ecofflink.lo" ;;
    ecoffalpha_little_vec)	tb="$tb coff-alpha.lo ecoff.lo ecofflink.lo"; target_size=64 ;;
    go32coff_vec)		tb="$tb coff-go32.lo cofflink.lo" ;;
    go32stubbedcoff_vec)	tb="$tb coff-stgo32.lo cofflink.lo" ;;
    h8300coff_vec)		tb="$tb coff-h8300.lo reloc16.lo" ;;
    h8500coff_vec)		tb="$tb coff-h8500.lo reloc16.lo" ;;
    host_aout_vec)		tb="$tb host-aout.lo aout32.lo" ;;
    hp300bsd_vec)		tb="$tb hp300bsd.lo aout32.lo" ;;
    hp300hpux_vec)		tb="$tb hp300hpux.lo aout32.lo" ;;
    i386aout_vec)		tb="$tb i386aout.lo aout32.lo" ;;
    i386bsd_vec)		tb="$tb i386bsd.lo aout32.lo" ;;
    i386coff_vec)		tb="$tb coff-i386.lo cofflink.lo" ;;
    i386dynix_vec)		tb="$tb i386dynix.lo aout32.lo" ;;
    i386freebsd_vec)		tb="$tb i386freebsd.lo aout32.lo" ;;
    i386linux_vec)		tb="$tb i386linux.lo aout32.lo" ;;
    i386lynx_aout_vec)		tb="$tb i386lynx.lo lynx-core.lo aout32.lo" ;;
    i386lynx_coff_vec)		tb="$tb cf-i386lynx.lo cofflink.lo lynx-core.lo" ;;
    i386mach3_vec)		tb="$tb i386mach3.lo aout32.lo" ;;
    i386msdos_vec)		tb="$tb i386msdos.lo" ;;
    i386netbsd_vec)		tb="$tb i386netbsd.lo aout32.lo" ;;
    i386os9k_vec)		tb="$tb i386os9k.lo aout32.lo" ;;
    i386pe_vec)			tb="$tb pe-i386.lo peigen.lo cofflink.lo" ;;
    i386pei_vec)		tb="$tb pei-i386.lo peigen.lo cofflink.lo" ;;
    i860coff_vec)		tb="$tb coff-i860.lo cofflink.lo" ;;
    icoff_big_vec)		tb="$tb coff-i960.lo cofflink.lo" ;;
    icoff_little_vec)		tb="$tb coff-i960.lo cofflink.lo" ;;
    ieee_vec)			tb="$tb ieee.lo" ;;
    m68k4knetbsd_vec)		tb="$tb m68k4knetbsd.lo aout32.lo" ;;
    m68kaux_coff_vec)		tb="$tb coff-aux.lo coff-m68k.lo cofflink.lo" ;;
    m68kcoff_vec)		tb="$tb coff-m68k.lo cofflink.lo" ;;
    m68kcoffun_vec)		tb="$tb coff-u68k.lo coff-m68k.lo cofflink.lo" ;;
    m68klinux_vec)		tb="$tb m68klinux.lo aout32.lo" ;;
    m68klynx_aout_vec)		tb="$tb m68klynx.lo lynx-core.lo aout32.lo" ;;
    m68klynx_coff_vec)		tb="$tb cf-m68klynx.lo coff-m68k.lo cofflink.lo lynx-core.lo" ;;
    m68knetbsd_vec)		tb="$tb m68knetbsd.lo aout32.lo" ;;
    m68ksysvcoff_vec)		tb="$tb coff-svm68k.lo cofflink.lo" ;;
    m88kbcs_vec)		tb="$tb coff-m88k.lo" ;;
    m88kmach3_vec)		tb="$tb m88kmach3.lo aout32.lo" ;;
    m88kopenbsd_vec)		tb="$tb m88kopenbsd.lo aout32.lo" ;;
    mach_o_be_vec)              tb="$tb mach-o.lo" ;;
    mach_o_le_vec)              tb="$tb mach-o.lo" ;;
    mach_o_fat_vec)             tb="$tb mach-o.lo" ;;
    mcore_pe_big_vec)		tb="$tb pe-mcore.lo peigen.lo cofflink.lo" ;;
    mcore_pe_little_vec)	tb="$tb pe-mcore.lo peigen.lo cofflink.lo" ;;
    mcore_pei_big_vec)		tb="$tb pei-mcore.lo peigen.lo cofflink.lo" ;;
    mcore_pei_little_vec)	tb="$tb pei-mcore.lo peigen.lo cofflink.lo" ;;
    mipslpe_vec)		tb="$tb pe-mips.lo peigen.lo cofflink.lo" ;;
    mipslpei_vec)		tb="$tb pei-mips.lo peigen.lo cofflink.lo" ;;
    newsos3_vec)		tb="$tb newsos3.lo aout32.lo" ;;
    nlm32_alpha_vec)		tb="$tb nlm32-alpha.lo nlm32.lo nlm.lo"; target_size=64 ;;
    nlm32_i386_vec)		tb="$tb nlm32-i386.lo nlm32.lo nlm.lo" ;;
    nlm32_powerpc_vec)		tb="$tb nlm32-ppc.lo nlm32.lo nlm.lo" ;;
    nlm32_sparc_vec)		tb="$tb nlm32-sparc.lo nlm32.lo nlm.lo" ;;
    or32coff_big_vec)		tb="$tb coff-or32.lo cofflink.lo" ;;
    pc532machaout_vec)		tb="$tb pc532-mach.lo aout-ns32k.lo" ;;
    pc532netbsd_vec)		tb="$tb ns32knetbsd.lo aout-ns32k.lo" ;;
    pef_vec)                    tb="$tb pef.lo" ;;
    pef_xlib_vec)               tb="$tb pef.lo" ;;
    pdp11_aout_vec)		tb="$tb pdp11.lo" ;;
    pmac_xcoff_vec)		tb="$tb coff-rs6000.lo xcofflink.lo" ;;
    ppcboot_vec)		tb="$tb ppcboot.lo" ;;
    riscix_vec)			tb="$tb aout32.lo riscix.lo" ;;
    rs6000coff64_vec)		tb="$tb coff64-rs6000.lo xcofflink.lo aix5ppc-core.lo"; target_size=64 ;;
    rs6000coff_vec)		tb="$tb coff-rs6000.lo xcofflink.lo" ;;
    shcoff_small_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
    shcoff_vec)			tb="$tb coff-sh.lo cofflink.lo" ;;
    shlcoff_small_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
    shlcoff_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
    shlpe_vec)			tb="$tb pe-sh.lo coff-sh.lo peigen.lo cofflink.lo" ;;
    shlpei_vec)			tb="$tb pei-sh.lo coff-sh.lo peigen.lo cofflink.lo" ;;
    som_vec)			tb="$tb som.lo" ;;
    sparccoff_vec)		tb="$tb coff-sparc.lo" ;;
    sparcle_aout_vec)		tb="$tb aout-sparcle.lo aout32.lo" ;;
    sparclinux_vec)		tb="$tb sparclinux.lo aout32.lo" ;;
    sparclynx_aout_vec)		tb="$tb sparclynx.lo lynx-core.lo aout32.lo" ;;
    sparclynx_coff_vec)		tb="$tb cf-sparclynx.lo lynx-core.lo" ;;
    sparcnetbsd_vec)		tb="$tb sparcnetbsd.lo aout32.lo" ;;
    sunos_big_vec)		tb="$tb sunos.lo aout32.lo" ;;
    sym_vec)                    tb="$tb xsym.lo" ;;
    tic30_aout_vec)		tb="$tb aout-tic30.lo" ;;
    tic30_coff_vec)		tb="$tb coff-tic30.lo" ;;
    tic4x_coff0_vec)            tb="$tb coff-tic4x.lo" ;;
    tic4x_coff0_beh_vec)        tb="$tb coff-tic4x.lo" ;;
    tic4x_coff1_vec)            tb="$tb coff-tic4x.lo" ;;
    tic4x_coff1_beh_vec)        tb="$tb coff-tic4x.lo" ;;
    tic4x_coff2_vec)            tb="$tb coff-tic4x.lo" ;;
    tic4x_coff2_beh_vec)        tb="$tb coff-tic4x.lo" ;;
    tic54x_coff0_beh_vec)	tb="$tb coff-tic54x.lo" ;;
    tic54x_coff0_vec)		tb="$tb coff-tic54x.lo" ;;
    tic54x_coff1_beh_vec)	tb="$tb coff-tic54x.lo" ;;
    tic54x_coff1_vec)		tb="$tb coff-tic54x.lo" ;;
    tic54x_coff2_beh_vec)	tb="$tb coff-tic54x.lo" ;;
    tic54x_coff2_vec)		tb="$tb coff-tic54x.lo" ;;
    tic80coff_vec)		tb="$tb coff-tic80.lo cofflink.lo" ;;
    vaxnetbsd_vec)		tb="$tb vaxnetbsd.lo aout32.lo" ;;
    vax1knetbsd_vec)		tb="$tb vax1knetbsd.lo aout32.lo" ;;
    vaxbsd_vec)			tb="$tb vaxbsd.lo aout32.lo" ;;
    versados_vec)		tb="$tb versados.lo" ;;
    vms_alpha_vec)		tb="$tb vms.lo vms-hdr.lo vms-gsd.lo vms-tir.lo vms-misc.lo"; target_size=64 ;;
    vms_vax_vec)		tb="$tb vms.lo vms-hdr.lo vms-gsd.lo vms-tir.lo vms-misc.lo" ;;
    w65_vec)			tb="$tb coff-w65.lo reloc16.lo" ;;
    we32kcoff_vec)		tb="$tb coff-we32k.lo" ;;
    z8kcoff_vec)		tb="$tb coff-z8k.lo reloc16.lo" ;;

    # These appear out of order in targets.c
    srec_vec)			tb="$tb srec.lo" ;;
    symbolsrec_vec)		tb="$tb srec.lo" ;;
    tekhex_vec)			tb="$tb tekhex.lo" ;;
    cisco_core_big_vec)		tb="$tb cisco-core.lo" ;;
    cisco_core_little_vec)	tb="$tb cisco-core.lo" ;;

    "")			;;
    *) AC_MSG_ERROR(*** unknown target vector $vec) ;;
    esac

    if test ${target_size} = 64; then
	target64=true
    fi
    if test x"${vec}" = x"${defvec}"; then
	bfd_default_target_size=${target_size}
    fi
done

# Target architecture .o files.
# A couple of CPUs use shorter file names to avoid problems on DOS
# filesystems.
ta=`echo $selarchs | sed -e s/bfd_/cpu-/g -e s/_arch/.lo/g -e s/mn10200/m10200/ -e s/mn10300/m10300/`

# Weed out duplicate .o files.
f=""
for i in $tb ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
tb="$f"

f=""
for i in $ta ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
ta="$f"

bfd_backends="$tb"
bfd_machines="$ta"

if test x${all_targets} = xtrue ; then
  bfd_backends="${bfd_backends}"' $(ALL_BACKENDS)'
  bfd_machines="${bfd_machines}"' $(ALL_MACHINES)'
  selvecs=
  havevecs=
  selarchs=
  test -n "$assocvecs" &&
    assocvecs=`echo $assocvecs | sed -e 's/^/\&/' -e 's/ \(.\)/,\&\1/g'`
else	# all_targets is true
  # Only set these if they will be nonempty, for the clever echo.
  havevecs=
  assocvecs=
  test -n "$selvecs" &&
    havevecs=`echo $selvecs | sed -e 's/^/-DHAVE_/' -e 's/ \(.\)/ -DHAVE_\1/g'`
  test -n "$selvecs" &&
    selvecs=`echo $selvecs | sed -e 's/^/\&/' -e 's/ \(.\)/,\&\1/g'`
  test -n "$selarchs" &&
    selarchs=`echo $selarchs | sed -e 's/^/\&/' -e 's/ \(.\)/,\&\1/g'`
fi	# all_targets is true

case ${host64}-${target64}-${want64} in
  *true*)
    wordsize=64
    bfd_libs='$(BFD64_LIBS) $(BFD32_LIBS)'
    all_backends='$(BFD64_BACKENDS) $(BFD32_BACKENDS)'
    if test $BFD_HOST_64_BIT_DEFINED = 0; then
      AC_MSG_WARN([You have requested a 64 bit BFD configuration, but])
      AC_MSG_WARN([your compiler may not have a 64 bit integral type])
    fi
    if test -n "$GCC" ; then
       bad_64bit_gcc=no;
       AC_MSG_CHECKING([for gcc version with buggy 64-bit support])
       # Add more tests for gcc versions with non-working 64-bit support here.
       AC_EGREP_CPP([: 2 : 91 : 1 :],[:__GNUC__:__GNUC_MINOR__:__i386__:],
		    bad_64bit_gcc=yes;
		    AC_MSG_RESULT([yes: egcs-1.1.2 on ix86 spotted]),
		    AC_MSG_RESULT(no))
       if test $bad_64bit_gcc = yes ; then
	 AC_ERROR([A newer version of gcc is needed for the requested 64-bit BFD configuration])
       fi
    fi
    ;;
  false-false-false)
    wordsize=32
    bfd_libs='$(BFD32_LIBS)'
    all_backends='$(BFD32_BACKENDS)'
    ;;
esac

AC_SUBST(wordsize)
AC_SUBST(bfd_libs)
AC_SUBST(all_backends)
AC_SUBST(bfd_backends)
AC_SUBST(bfd_machines)
AC_SUBST(bfd_default_target_size)

# Determine the host dependant file_ptr a.k.a. off_t type.  In order
# prefer: off64_t - if ftello64 and fseeko64, off_t - if ftello and
# fseeko, long.  This assumes that sizeof off_t is .ge. sizeof long.
# Hopefully a reasonable assumption since fseeko et.al. should be
# upward compatible.
AC_CHECK_FUNCS(ftello ftello64 fseeko fseeko64)
if test x"$ac_cv_func_ftello" = xyes -a x"$ac_cv_func_fseeko" = xyes; then
    AC_COMPILE_CHECK_SIZEOF(off_t)
fi
AC_MSG_CHECKING([file_ptr type])
bfd_file_ptr="long"
bfd_ufile_ptr="unsigned long"
if test x"$ac_cv_func_ftello64" = xyes -a x"$ac_cv_func_fseeko64" = xyes \
	-o x"${ac_cv_sizeof_off_t}" = x8; then
    bfd_file_ptr=BFD_HOST_64_BIT
    bfd_ufile_ptr=BFD_HOST_U_64_BIT
fi
AC_MSG_RESULT($bfd_file_ptr)
AC_SUBST(bfd_file_ptr)
AC_SUBST(bfd_ufile_ptr)


tdefaults=""
test -n "${defvec}" && tdefaults="${tdefaults} -DDEFAULT_VECTOR=${defvec}"
test -n "${selvecs}" && tdefaults="${tdefaults} -DSELECT_VECS='${selvecs}'"
test -n "${assocvecs}" && tdefaults="${tdefaults} -DASSOCIATED_VECS='${assocvecs}'"
test -n "${selarchs}" && tdefaults="${tdefaults} -DSELECT_ARCHITECTURES='${selarchs}'"
test -n "${havevecs}" && tdefaults="${tdefaults} ${havevecs}"
AC_SUBST(tdefaults)

dnl AC_CHECK_HEADERS(sys/mman.h)
AC_FUNC_MMAP
AC_CHECK_FUNCS(madvise mprotect)
case ${want_mmap}+${ac_cv_func_mmap_fixed_mapped} in
  true+yes )  AC_DEFINE(USE_MMAP, 1, [Use mmap if it's available?]) ;;
esac

rm -f doc/config.status
AC_OUTPUT(Makefile doc/Makefile bfd-in3.h:bfd-in2.h bfdver.h:version.h po/Makefile.in:po/Make-in,
[sed -e '/SRC-POTFILES =/r po/SRC-POTFILES' -e '/BLD-POTFILES =/r po/BLD-POTFILES' po/Makefile.in > po/Makefile])

@


1.21
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d375 3
a377 1
  sh*-*-netbsd*)	COREFILE=netbsd-core.lo ;;
d668 1
d670 1
@


1.20
log
@Recognize hppa core files.
ok mickey@@, drahn@@, deraadt@@
@
text
@d10 1
a10 1
AM_INIT_AUTOMAKE(bfd, 2.14)
d12 1
a12 1
#is_release=y
d106 1
a106 1
ALL_LINGUAS="fr tr ja es sv da zh_CN"
d116 1
d120 15
a134 1
if test "x${HOST_64BIT_TYPE}" = "xlong"; then
d136 8
a143 1
elif test "x${HOST_64BIT_TYPE}" != "x"; then
d145 2
a146 2
  BFD_HOST_64_BIT=${HOST_64BIT_TYPE}
  BFD_HOST_U_64_BIT=${HOST_U_64BIT_TYPE}
d148 1
d150 1
d162 1
d178 1
a178 1
  alpha*-*-freebsd*)
d189 4
a192 2
  arm-*-freebsd*)	COREFILE='' ;;
  arm-*-netbsd* | arm-*-openbsd*) COREFILE=netbsd-core.lo ;;
d207 1
a207 1
  i[3456]86-sequent-bsd*)
d213 2
a214 2
  i[3456]86-sequent-sysv4*) ;;
  i[3456]86-sequent-sysv*)
d220 1
a220 1
  i[3456]86-*-bsdi)
d225 1
a225 1
  i[3456]86-*-bsd* | i[34567]86-*-freebsd[123] | i[34567]86-*-freebsd[123]\.* | i[34567]86-*-freebsd4\.[01234]* | i[34567]86-*-freebsd*aout*)
d231 1
a231 1
  i[3456]86-*-freebsd*)
d237 1
a237 1
  i[3456]86-*-netbsd* | i[3456]86-*-openbsd*)
d242 1
a242 1
  i[3456]86-esix-sysv3*)
d248 1
a248 1
  i[3456]86-*-sco3.2v5*)
d253 1
a253 1
  i[3456]86-*-sco* | i[3456]86-*-isc*)
d259 1
a259 1
  i[3456]86-*-mach3*)
d265 1
a265 1
  i[3456]86-*-linux-gnu*)
d271 2
a272 2
  i[3456]86-*-isc*)	COREFILE=trad-core.lo ;;
  i[3456]86-*-aix*)	COREFILE=aix386-core.lo ;;
a277 8
  mips-dec-bsd*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/mipsbsd.h"'
	;;
  mips-dec-mach3*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/mipsmach3.h"'
	;;
a287 4
  mips-*-mach3*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/mipsmach3.h"'
	;;
d370 2
a371 1
  powerpc-*-freebsd*)	COREFILE='' ;;
d383 3
a385 1
  vax-*-netbsd* | vax-*-openbsd*)	COREFILE=netbsd-core.lo ;;
d394 4
a579 2
    aout_mips_big_vec)		tb="$tb mipsbsd.lo aout32.lo" ;;
    aout_mips_little_vec)	tb="$tb mipsbsd.lo aout32.lo" ;;
d596 1
d609 1
d629 3
a681 2
    bfd_elf64_ia64_aix_big_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_aix_little_vec) tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
d885 1
a885 1
    if test -z "$GCC" && test "$BFD_HOST_64BIT_LONG" = "0" && test "$BFD_HOST_64_BIT_DEFINED" = "0"; then
d915 22
@


1.19
log
@Properly recognize core dump architecture.  Add StackGhost support.
ok drahn@@
@
text
@d172 2
@


1.18
log
@bfd support for OpenBSD/m88k a.out binaries, glueing existing bits together.
Gives us working objcopy, objdump, etc, and the ability to process core files
to some extent.

ok and pushed upstream kettenis@@
@
text
@d378 3
a380 1
  x86_64-*-netbsd*)	COREFILE=netbsd-core.lo ;;
@


1.17
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d317 3
d721 1
@


1.16
log
@ops, add missing vax vector.
@
text
@d10 15
a24 1
AM_INIT_AUTOMAKE(bfd, 2.11.2)
d67 1
a67 1
build_warnings="-W -Wall"
d83 1
a83 1
if test "x${build_warnings}" != x -a "x$GCC" = xyes ; then
a92 1
AC_ARG_PROGRAM
d95 1
d100 1
d106 1
a106 1
ALL_LINGUAS=
d161 2
a162 1
	COREFILE=netbsd-core.lo ;;
d165 1
d172 1
a172 1
  i370-*-*)		
d191 6
a196 1
  i[3456]86-*-bsd* | i[34567]86-*-freebsd[1234] | i[34567]86-*-freebsd[1234]\.* | i[34567]86-*-freebsd*aout*)
d308 5
a312 2
  m88*-*-sysv4*)	;;
  m88*-motorola-sysv*)	COREFILE=ptrace-core.lo ;;
d321 1
a321 1
  ns32k-*-netbsd* | ns32k-*-openbsd*)
d324 7
a330 1
  rs6000-*-lynx*)	COREFILE=lynx-core.lo ;;
d336 8
d353 2
d362 1
a362 4
  vax-*-openbsd*)
	COREFILE=netbsd-core.lo
	COREFLAG=-DNETBSD_CORE
	;;
d375 1
d431 20
d474 1
d481 1
d512 11
d536 1
a536 1
elf="elf.lo elflink.lo dwarf1.lo"
d540 1
d543 2
a544 1
    # with the two vector lists in targets.c.
d547 1
a547 11
    armcoff_little_vec)		tb="$tb coff-arm.lo cofflink.lo " ;;
    armcoff_big_vec)		tb="$tb coff-arm.lo cofflink.lo " ;;
    armnetbsd_vec)		tb="$tb armnetbsd.lo aout32.lo" ;;
    armpe_little_vec)		tb="$tb pe-arm.lo peigen.lo cofflink.lo " ;;
    armpe_big_vec)		tb="$tb pe-arm.lo peigen.lo cofflink.lo " ;;
    armpei_little_vec)		tb="$tb pei-arm.lo peigen.lo cofflink.lo " ;;
    armpei_big_vec)		tb="$tb pei-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pe_little_vec)	tb="$tb epoc-pe-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pe_big_vec)	tb="$tb epoc-pe-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pei_little_vec)	tb="$tb epoc-pei-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pei_big_vec)	tb="$tb epoc-pei-arm.lo peigen.lo cofflink.lo " ;;
d554 11
d568 1
a568 12
    bfd_efi_app_ia64_vec)	tb="$tb efi-app-ia64.lo pepigen.lo cofflink.lo"
  				target64=true ;;
    bfd_elf64_alpha_vec)	tb="$tb elf64-alpha.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf64_hppa_vec | bfd_elf64_hppa_linux_vec)
				tb="$tb elf64-hppa.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf64_ia64_little_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf64_ia64_big_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf32_ia64_big_vec)	tb="$tb elf32-ia64.lo elf32.lo $elf" ;;
d570 1
a570 3
    bfd_elf32_littlearc_vec)	tb="$tb elf32-arc.lo elf32.lo $elf" ;;
    bfd_elf32_littlearm_vec)	tb="$tb elfarm-nabi.lo elf32.lo $elf" ;;
    bfd_elf32_littlearm_oabi_vec) tb="$tb elfarm-oabi.lo elf32.lo $elf" ;;
d572 1
d574 1
a574 5
    bfd_elf32_bigarm_oabi_vec)	tb="$tb elfarm-oabi.lo elf32.lo $elf" ;;
    bfd_elf32_big_generic_vec) 	tb="$tb elf32-gen.lo elf32.lo $elf" ;;
    bfd_elf32_bigmips_vec) 	tb="$tb elf32-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf64_bigmips_vec) 	tb="$tb elf64-mips.lo elf64.lo elf32-mips.lo elf32.lo $elf ecofflink.lo"
				target64=true ;;
a575 1
    bfd_elf32_us_cris_vec)	tb="$tb elf32-cris.lo elf32.lo $elf" ;;
d578 1
d580 4
a583 2
    bfd_elf32_hppa_vec | bfd_elf32_hppa_linux_vec)
				tb="$tb elf32-hppa.lo elf32.lo $elf" ;;
d585 1
d587 1
a587 2
    bfd_elf64_x86_64_vec)	tb="$tb elf64-x86-64.lo elf64.lo $elf"
				target64=true ;;
a588 1
    bfd_elf32_i860_little_vec)	tb="$tb elf32-i860.lo elf32.lo $elf" ;;
d590 4
d595 4
a598 3
    bfd_elf32_littlemips_vec) 	tb="$tb elf32-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf64_littlemips_vec) 	tb="$tb elf64-mips.lo elf64.lo elf32-mips.lo elf32.lo $elf ecofflink.lo"
				target64=true ;;
d600 2
a601 2
    bfd_elf32_m68hc11_vec)	tb="$tb elf32-m68hc11.lo elf32.lo $elf" ;;
    bfd_elf32_m68hc12_vec)	tb="$tb elf32-m68hc12.lo elf32.lo $elf" ;;
d608 7
d619 10
d630 1
d632 3
a634 2
    bfd_elf32_shlin_vec)	tb="$tb elf32-sh-lin.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shblin_vec)	tb="$tb elf32-sh-lin.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
d636 3
a638 2
    bfd_elf32_tradbigmips_vec)  tb="$tb elf32-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf32_tradlittlemips_vec) tb="$tb elf32-mips.lo elf32.lo $elf ecofflink.lo" ;;
d640 36
a675 12
    bfd_elf64_big_generic_vec) 	tb="$tb elf64-gen.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf64_little_generic_vec) tb="$tb elf64-gen.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf64_sparc_vec)	tb="$tb elf64-sparc.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf64_tradbigmips_vec)	tb="$tb elf64-mips.lo elf64.lo $elf ecofflink.lo"
				target64=true ;;
    bfd_elf64_tradlittlemips_vec) tb="$tb elf64-mips.lo elf64.lo $elf ecofflink.lo"
				target64=true ;;
    cisco_core_big_vec)		tb="$tb cisco-core.lo" ;;
    cisco_core_little_vec)	tb="$tb cisco-core.lo" ;;
d677 1
a677 2
    demo_64_vec)		tb="$tb demo64.lo aout64.lo"
				target64=true ;;
d679 1
d681 1
a681 3
    ecoff_biglittle_vec)	tb="$tb coff-mips.lo ecoff.lo ecofflink.lo" ;;
    ecoffalpha_little_vec)	tb="$tb coff-alpha.lo ecoff.lo ecofflink.lo"
				target64=true ;;
a693 3
    i386msdos_vec)		tb="$tb i386msdos.lo" ;;
    i386pe_vec)			tb="$tb pe-i386.lo peigen.lo cofflink.lo" ;;
    i386pei_vec)		tb="$tb pei-i386.lo peigen.lo cofflink.lo" ;;
d698 1
d701 2
d707 2
a714 2
    m68k4knetbsd_vec)		tb="$tb m68k4knetbsd.lo aout32.lo" ;;
    m68kaux_coff_vec)		tb="$tb coff-aux.lo coff-m68k.lo cofflink.lo" ;;
d717 4
a720 2
    mipslpe_vec)		tb="$tb pe-mips.lo peigen.lo cofflink.lo" ;;
    mipslpei_vec)		tb="$tb pei-mips.lo peigen.lo cofflink.lo" ;;
d725 2
d728 1
d730 1
a730 2
    rs6000coff64_vec)		tb="$tb coff64-rs6000.lo xcofflink.lo"
				target64=true ;;
d732 8
a739 2
    nlm32_alpha_vec)		tb="$tb nlm32-alpha.lo nlm32.lo nlm.lo"
				target64=true ;;
d741 1
a741 4
    nlm32_powerpc_vec)		tb="$tb nlm32-ppc.lo nlm32.lo nlm.lo" ;;
    pc532netbsd_vec)		tb="$tb ns32knetbsd.lo aout-ns32k.lo" ;;
    pc532machaout_vec)		tb="$tb pc532-mach.lo aout-ns32k.lo" ;;
    pmac_xcoff_vec)		tb="$tb coff-pmac.lo xcofflink.lo" ;;
d743 1
a743 5
    bfd_powerpc_pe_vec)         tb="$tb pe-ppc.lo peigen.lo cofflink.lo" ;;  
    bfd_powerpcle_pe_vec)       tb="$tb pe-ppc.lo peigen.lo cofflink.lo" ;;  
    bfd_powerpc_pei_vec)        tb="$tb pei-ppc.lo peigen.lo cofflink.lo" ;;
    bfd_powerpcle_pei_vec)      tb="$tb pei-ppc.lo peigen.lo cofflink.lo" ;;
    ppcboot_vec)		tb="$tb ppcboot.lo" ;;
d745 1
a746 2
    shcoff_small_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
    shlcoff_small_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
d750 1
a755 2
    sparccoff_vec)		tb="$tb coff-sparc.lo" ;;
    srec_vec)			tb="$tb srec.lo" ;;
d757 1
a757 2
    symbolsrec_vec)		tb="$tb srec.lo" ;;
    tekhex_vec)			tb="$tb tekhex.lo" ;;
d760 7
d768 1
a768 1
    tic54x_coff0_beh_vec)	tb="$tb coff-tic54x.lo" ;;
d770 1
a770 1
    tic54x_coff1_beh_vec)	tb="$tb coff-tic54x.lo" ;;
a771 1
    tic54x_coff2_beh_vec)	tb="$tb coff-tic54x.lo" ;;
d773 3
d777 1
a777 2
    vms_alpha_vec)		tb="$tb vms.lo vms-hdr.lo vms-gsd.lo vms-tir.lo vms-misc.lo"
 				target64=true ;;
a780 1
    vaxnetbsd_vec)		tb="$tb vaxnetbsd.lo aout32.lo" ;;
d783 7
d793 7
d835 2
d840 1
d852 1
d858 12
d873 1
d879 1
d883 1
d888 1
d901 1
a901 1
AC_OUTPUT(Makefile doc/Makefile bfd-in3.h:bfd-in2.h po/Makefile.in:po/Make-in,
@


1.15
log
@- Sync changes between source and generated files (ie., changes existing
  only in the generated files).
- Regen.

Whenever is possible, changes should be done to the source files (.am, .in).
That way is easier to track and merge local changes when importing.
@
text
@d666 1
@


1.14
log
@resolve conflicts.
@
text
@d145 2
a146 2
  alpha*-*-netbsd*)	COREFILE=netbsd-core.lo ;;
  alpha*-*-openbsd*)	COREFILE=netbsd-core.lo ;;
d314 1
a314 1
  sparc-*-netbsd* | sparc-*-openbsd*)
d320 4
@


1.13
log
@Automatic cvs merge. Dread what I will have to fix after this excuse
of a program is done...
@
text
@d10 1
a10 1
AM_INIT_AUTOMAKE(bfd, 2.10.1)
d53 21
d138 3
a146 1
  alpha*-*-freebsd*)	;;
d148 1
d174 1
a174 1
  i[3456]86-*-bsd* | i[3456]86-*-freebsd*)
d180 6
d300 6
a307 1
  powerpc-*-*bsd*)	COREFILE=netbsd-core.lo ;;
d311 1
d313 1
d354 1
d356 1
d358 2
d361 1
d363 1
d365 1
d373 4
a376 2
AC_DEFINE_UNQUOTED(TRAD_HEADER, $TRAD_HEADER,
  [Name of host specific header file to include in trad-core.c.])
d460 1
a460 1
elf="elf.lo elflink.lo dwarf2.lo dwarf1.lo"
d488 3
d493 8
d512 2
d517 2
a518 1
    bfd_elf32_hppa_vec)		tb="$tb elf32-hppa.lo elf32.lo $elf" ;;
d521 2
d524 1
d531 2
d545 2
d548 2
d557 4
d563 1
d606 2
a607 2
    mipslpe_vec)		tb="$tb pe-mips.lo cofflink.lo" ;;
    mipslpei_vec)		tb="$tb pei-mips.lo cofflink.lo" ;;
d614 2
d634 2
a635 2
    shlpe_vec)			tb="$tb pe-sh.lo coff-sh.lo cofflink.lo" ;;
    shlpei_vec)			tb="$tb pei-sh.lo coff-sh.lo cofflink.lo" ;;
d649 6
d749 2
a750 1
[sed -e '/POTFILES =/r po/POTFILES' po/Makefile.in > po/Makefile])
@


1.12
log
@Make new binutils compile on Alpha again; ok espie@@
@
text
@d10 1
a10 1
AM_INIT_AUTOMAKE(bfd, 2.10)
@


1.11
log
@Help stupid cvs fixing basic conflicts.
@
text
@d122 1
@


1.10
log
@Define NETBSD_CORE for all Open/NetBSD targets and sync configure+configure.in
@
text
@d3 2
a4 1
AC_PREREQ(2.5)
d7 16
a37 8
AC_ARG_ENABLE(shared,
[  --enable-shared         build shared BFD library],
[case "${enableval}" in
  yes) shared=true ;;
  no)  shared=false ;;
  *bfd*) shared=true ;;
  *) shared=false ;;
esac])dnl
d53 1
a53 1
AC_CONFIG_HEADER(config.h:config.in)
a54 2
AC_CONFIG_AUX_DIR(`cd $srcdir/..;pwd`)
AC_CANONICAL_SYSTEM
d60 3
a67 17
ALLLIBS='$(TARGETLIB)'
PICFLAG=
SHLIB=unused-shlib
SHLINK=unused-shlink
if test "${shared}" = "true"; then
  PICFLAG=-fpic
  if test "${commonbfdlib}" = "true"; then
    ALLLIBS='$(TARGETLIB)'
  else
    ALLLIBS='$(TARGETLIB) $(SHLIB) $(SHLINK)'
changequote(,)dnl
    SHLIB=libbfd.so.`sed -e 's/[^0-9]*\([0-9.]*\).*/\1/' ${srcdir}/VERSION`
changequote([,])dnl
    SHLINK=libbfd.so
  fi
fi

d70 2
a71 1
AC_ISC_POSIX
a76 2
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)
a78 30
if test "${shared}" = "true"; then
  if test "${GCC}" != "yes" && test "${shared_non_gcc}" != "yes"; then
    AC_MSG_WARN([BFD --enable-shared only supported when using gcc])
    shared=false
    ALLLIBS='$(TARGETLIB)'
    PICFLAG=
    SHLIB=unused-shlib
  fi
fi

AC_SUBST(ALLLIBS)
AC_SUBST(PICFLAG)
AC_SUBST(SHLIB)
AC_SUBST(SHLIB_CC)
AC_SUBST(SHLIB_CFLAGS)
if test "${commonbfdlib}" = "true"; then
  COMMON_SHLIB=yes
  PICLIST=piclist
else
  COMMON_SHLIB=
  PICLIST=
fi
AC_SUBST(COMMON_SHLIB)
AC_SUBST(PICLIST)
AC_SUBST(SHLINK)
AC_SUBST(INSTALL_SHLIB)

VERSION=`cat ${srcdir}/VERSION`
AC_SUBST(VERSION)

d100 2
a101 1
AC_CHECK_FUNCS(fcntl getpagesize setitimer sysconf)
d114 1
d117 12
a128 9
  alpha*-*-linux*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/alphalinux.h")
	;;
  alpha*-*-*)		COREFILE=osf-core.o ;;
  arm-*-riscix)		COREFILE=trad-core.o ;;
  hppa*-*-hpux*)	COREFILE=hpux-core.o ;;
  hppa*-*-hiux*)	COREFILE=hpux-core.o ;;
  hppa*-*-bsd*)		COREFILE="hpux-core.o hppabsd-core.o"
d130 5
d138 2
a139 2
	COREFILE=trad-core.o;
	AC_DEFINE(TRAD_HEADER,"hosts/symmetry.h")
d145 2
a146 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/symmetry.h")
d151 2
a152 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386bsd.h")
d155 1
a155 1
  i[3456]86-*-netbsd*)
d157 1
a157 2
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
d160 1
a160 1
  i[3456]86-*-openbsd*)
d162 2
a163 2
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
d166 1
a166 1
  i[3456]86-esix-sysv3*)
d168 1
a168 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/esix.h")
d173 2
a174 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386sco.h")
d179 2
a180 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386mach3.h")
d183 1
a183 1
  i[3456]86-*-linux*)
d185 2
a186 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386linux.h")
d189 2
a190 2
  i[3456]86-*-isc*)	COREFILE=trad-core.o ;;
  i[3456]86-*-aix*)	COREFILE=aix386-core.o ;;
d193 2
a194 6
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i860mach3.h")
	;;
  mips*-*-openbsd*)
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
d197 2
a198 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/mipsbsd.h")
d201 2
a202 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/mipsmach3.h")
d204 2
a205 3
  mips-*-netbsd*)
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
d208 2
a209 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/decstation.h")
d211 3
a213 2
  mips-sgi-irix4*)	COREFILE=irix-core.o ;;
  mips-sgi-irix5*)	COREFILE=irix-core.o ;;
d215 2
a216 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/mipsmach3.h")
d220 2
a221 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/riscos.h")
d224 2
a225 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/news-mips.h")
d228 2
a229 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/dpx2.h")
d231 1
a231 1
  m68*-hp-hpux*)	COREFILE=hpux-core.o ;;
d233 2
a234 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/hp300bsd.h")
d236 3
a238 3
  m68*-*-linux*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/m68klinux.h")
d241 2
a242 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER, "hosts/delta68.h")
d245 2
a246 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/news.h")
d248 2
a249 7
  m68*-*-netbsd*)
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
	;;
  m68*-*-openbsd*)
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
d252 2
a253 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/m68kaux.h")
d256 1
a256 1
  m88*-motorola-sysv*)	COREFILE=ptrace-core.o ;;
d258 2
a259 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/m88kmach3.h")
d262 2
a263 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/pc532mach.h")
d265 13
a277 21
  ns32k-*-netbsd*)
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
	;;
  ns32k-*-openbsd*)
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
	;;
  rs6000-*-lynx*)	COREFILE=lynx-core.o ;;
  rs6000-*-aix4*)	COREFILE=rs6000-core.o ;;
  rs6000-*-*)		COREFILE=rs6000-core.o ;;
  powerpc-*-*bsd*)	COREFILE=netbsd-core.o;	COREFLAG=-DNETBSD_CORE;;
  powerpc-*-aix4*)	COREFILE=rs6000-core.o ;;
  powerpc-*-aix*)	COREFILE=rs6000-core.o ;;
  sparc-*-netbsd*)
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
	;;
  sparc-*-openbsd*)
	COREFILE=netbsd-core.o
	COREFLAG=-DNETBSD_CORE
d280 2
a281 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/tahoe.h")
d284 2
a285 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/vaxult2.h")
d288 2
a289 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/vaxult2.h")
d292 2
a293 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/vaxbsd.h")
d298 11
a308 9
  aix386-core.o)	COREFLAG=-DAIX386_CORE ;;
  hppabsd-core.o)	COREFLAG=-DHPPABSD_CORE ;;
  hpux-core.o)		COREFLAG=-DHPUX_CORE ;;
  irix-core.o)		COREFLAG=-DIRIX_CORE ;;
  lynx-core.o)		COREFLAG=-DLYNX_CORE ;;
  osf-core.o)		COREFLAG=-DOSF_CORE ;;
  ptrace-core.o)	COREFLAG=-DPTRACE_CORE ;;
  rs6000-core.o)	COREFLAG="$COREFLAG -DAIX_CORE" ;;
  trad-core.o)		COREFLAG="$COREFLAG -DTRAD_CORE" ;;
d311 13
a323 11
  # The ELF code uses the native <sys/procfs.h> to handle core files.
  # Define HAVE_SYS_PROCFS_H if the file exists and defines
  # prstatus_t.
  AC_MSG_CHECKING([for sys/procfs.h])
  AC_CACHE_VAL(bfd_cv_header_sys_procfs_h,
  [AC_TRY_COMPILE([#include <sys/procfs.h>],
  [prstatus_t t;],
  bfd_cv_header_sys_procfs_h=yes, bfd_cv_header_sys_procfs_h=no)])
  AC_MSG_RESULT($bfd_cv_header_sys_procfs_h)
  if test $bfd_cv_header_sys_procfs_h = yes; then
    AC_DEFINE(HAVE_SYS_PROCFS_H)
a324 1

d328 16
d386 1
a386 1
# no "--with-64-bit-bfd" option is given, even if "--with-targets=all" is
d399 1
d413 1
a413 1
elf="elf.o elflink.o"
d420 22
a441 17
    a29kcoff_big_vec)		tb="$tb coff-a29k.o cofflink.o" ;;
    a_out_adobe_vec)		tb="$tb aout-adobe.o aout32.o" ;;
    armcoff_little_vec)		tb="$tb coff-arm.o cofflink.o " ;;
    armcoff_big_vec)		tb="$tb coff-arm.o cofflink.o " ;;
    armpe_little_vec)		tb="$tb pe-arm.o cofflink.o " ;;
    armpe_big_vec)		tb="$tb pe-arm.o cofflink.o " ;;
    armpei_little_vec)		tb="$tb pei-arm.o cofflink.o " ;;
    armpei_big_vec)		tb="$tb pei-arm.o cofflink.o " ;;
    aout0_big_vec)		tb="$tb aout0.o aout32.o" ;;
    aout_arm_big_vec)		tb="$tb aout-arm.o aout32.o" ;;
    aout_arm_little_vec)	tb="$tb aout-arm.o aout32.o" ;;
    aout_mips_big_vec)		tb="$tb mipsbsd.o aout32.o" ;;
    aout_mips_little_vec)	tb="$tb mipsbsd.o aout32.o" ;;
    apollocoff_vec)		tb="$tb coff-apollo.o" ;;
    b_out_vec_big_host)		tb="$tb bout.o aout32.o" ;;
    b_out_vec_little_host)	tb="$tb bout.o aout32.o" ;;
    bfd_elf64_alpha_vec)	tb="$tb elf64-alpha.o elf64.o $elf"
d443 10
a452 3
    bfd_elf32_big_generic_vec) 	tb="$tb elf32-gen.o elf32.o $elf" ;;
    bfd_elf32_bigmips_vec) 	tb="$tb elf32-mips.o elf32.o $elf ecofflink.o" ;;
    bfd_elf64_bigmips_vec) 	tb="$tb elf64-mips.o elf64.o elf32-mips.o elf32.o $elf ecofflink.o"
d454 11
a464 6
    bfd_elf32_hppa_vec)		tb="$tb elf32-hppa.o elf32.o $elf" ;;
    bfd_elf32_i386_vec)		tb="$tb elf32-i386.o elf32.o $elf" ;;
    bfd_elf32_i860_vec)		tb="$tb elf32-i860.o elf32.o $elf" ;;
    bfd_elf32_little_generic_vec) tb="$tb elf32-gen.o elf32.o $elf" ;;
    bfd_elf32_littlemips_vec) 	tb="$tb elf32-mips.o elf32.o $elf ecofflink.o" ;;
    bfd_elf64_littlemips_vec) 	tb="$tb elf64-mips.o elf64.o elf32-mips.o elf32.o $elf ecofflink.o"
d466 16
a481 10
    bfd_elf32_m68k_vec)		tb="$tb elf32-m68k.o elf32.o $elf" ;;
    bfd_elf32_m88k_vec)		tb="$tb elf32-m88k.o elf32.o $elf" ;;
    bfd_elf32_mn10200_vec)	tb="$tb elf32-mn10200.o elf32.o $elf" ;;
    bfd_elf32_mn10300_vec)	tb="$tb elf32-mn10300.o elf32.o $elf" ;;
    bfd_elf32_powerpc_vec)	tb="$tb elf32-ppc.o elf32.o $elf" ;;
    bfd_elf32_powerpcle_vec)	tb="$tb elf32-ppc.o elf32.o $elf" ;;
    bfd_elf32_sh_vec)		tb="$tb elf32-sh.o elf32.o $elf coff-sh.o" ;;
    bfd_elf32_shl_vec)		tb="$tb elf32-sh.o elf32.o $elf coff-sh.o" ;;
    bfd_elf32_sparc_vec)	tb="$tb elf32-sparc.o elf32.o $elf" ;;
    bfd_elf64_big_generic_vec) 	tb="$tb elf64-gen.o elf64.o $elf"
d483 1
a483 1
    bfd_elf64_little_generic_vec) tb="$tb elf64-gen.o elf64.o $elf"
d485 1
a485 1
    bfd_elf64_sparc_vec)	tb="$tb elf64-sparc.o elf64.o $elf"
d487 3
a489 1
    bsd_ecoffalpha_little_vec)	tb="$tb coff-alpha.o ecoff.o ecofflink.o"
d491 4
a494 2
    cisco_core_vec)		tb="$tb cisco-core.o" ;;
    demo_64_vec)		tb="$tb demo64.o aout64.o"
d496 45
a540 3
    ecoff_big_vec)		tb="$tb coff-mips.o ecoff.o ecofflink.o" ;;
    ecoff_little_vec)		tb="$tb coff-mips.o ecoff.o ecofflink.o" ;;
    ecoffalpha_little_vec)	tb="$tb coff-alpha.o ecoff.o ecofflink.o"
d542 33
a574 1
    evax_alpha_vec)		tb="$tb evax-alpha.o evax-emh.o evax-egsd.o evax-etir.o evax-misc.o"
d576 4
a579 64
    h8300coff_vec)		tb="$tb coff-h8300.o reloc16.o" ;;
    h8500coff_vec)		tb="$tb coff-h8500.o reloc16.o" ;;
    host_aout_vec)		tb="$tb host-aout.o aout32.o" ;;
    hp300bsd_vec)		tb="$tb hp300bsd.o aout32.o" ;;
    hp300hpux_vec)		tb="$tb hp300hpux.o aout32.o" ;;
    i386aout_vec)		tb="$tb i386aout.o aout32.o" ;;
    i386bsd_vec)		tb="$tb i386bsd.o aout32.o" ;;
    i386coff_vec)		tb="$tb coff-i386.o cofflink.o" ;;
    i386dynix_vec)		tb="$tb i386dynix.o aout32.o" ;;
    i386freebsd_vec)		tb="$tb i386freebsd.o aout32.o" ;;
    i386msdos_vec)		tb="$tb i386msdos.o" ;;
    i386pe_vec)			tb="$tb pe-i386.o cofflink.o " ;;
    i386pei_vec)		tb="$tb pei-i386.o cofflink.o" ;;
    i386linux_vec)		tb="$tb i386linux.o aout32.o" ;;
    i386lynx_aout_vec)		tb="$tb i386lynx.o lynx-core.o aout32.o" ;;
    i386lynx_coff_vec)		tb="$tb cf-i386lynx.o cofflink.o lynx-core.o" ;;
    i386mach3_vec)		tb="$tb i386mach3.o aout32.o" ;;
    i386netbsd_vec)		tb="$tb i386netbsd.o aout32.o" ;;
    i386os9k_vec)		tb="$tb i386os9k.o aout32.o" ;;
    i860coff_vec)		tb="$tb coff-i860.o cofflink.o" ;;
    icoff_big_vec)		tb="$tb coff-i960.o cofflink.o" ;;
    icoff_little_vec)		tb="$tb coff-i960.o cofflink.o" ;;
    ieee_vec)			tb="$tb ieee.o" ;;
    m68kcoff_vec)		tb="$tb coff-m68k.o cofflink.o" ;;
    m68kcoffun_vec)		tb="$tb coff-u68k.o coff-m68k.o cofflink.o" ;;
    m68klinux_vec)		tb="$tb m68klinux.o aout32.o" ;;
    m68klynx_aout_vec)		tb="$tb m68klynx.o lynx-core.o aout32.o" ;;
    m68klynx_coff_vec)		tb="$tb cf-m68klynx.o coff-m68k.o cofflink.o lynx-core.o" ;;
    m68knetbsd_vec)		tb="$tb m68knetbsd.o aout32.o" ;;
    m68k4knetbsd_vec)		tb="$tb m68k4knetbsd.o aout32.o" ;;
    m68kaux_coff_vec)		tb="$tb coff-aux.o coff-m68k.o cofflink.o" ;;
    m88kbcs_vec)		tb="$tb coff-m88k.o" ;;
    newsos3_vec)		tb="$tb newsos3.o aout32.o" ;;
    nlm32_i386_vec)		tb="$tb nlm32-i386.o nlm32.o nlm.o" ;;
    nlm32_sparc_vec)		tb="$tb nlm32-sparc.o nlm32.o nlm.o" ;;
    nlm32_alpha_vec)		tb="$tb nlm32-alpha.o nlm32.o nlm.o"
				target64=true ;;
    riscix_vec)			tb="$tb aout32.o riscix.o" ;;
    nlm32_powerpc_vec)		tb="$tb nlm32-ppc.o nlm32.o nlm.o" ;;
    pc532netbsd_vec)		tb="$tb ns32knetbsd.o aout-ns32k.o" ;;
    pc532machaout_vec)		tb="$tb pc532-mach.o aout-ns32k.o" ;;
    pmac_xcoff_vec)		tb="$tb coff-pmac.o xcofflink.o" ;;
    rs6000coff_vec)		tb="$tb coff-rs6000.o xcofflink.o" ;;
    bfd_powerpc_pe_vec)         tb="$tb pe-ppc.o cofflink.o" ;;  
    bfd_powerpcle_pe_vec)       tb="$tb pe-ppc.o cofflink.o" ;;  
    bfd_powerpc_pei_vec)        tb="$tb pei-ppc.o cofflink.o" ;;
    bfd_powerpcle_pei_vec)      tb="$tb pei-ppc.o cofflink.o" ;;
    ppcboot_vec)		tb="$tb ppcboot.o" ;;
    shcoff_vec)			tb="$tb coff-sh.o cofflink.o" ;;
    shlcoff_vec)		tb="$tb coff-sh.o cofflink.o" ;;
    som_vec)			tb="$tb som.o" ;;
    sparcle_aout_vec)		tb="$tb aout-sparcle.o aout32.o" ;;
    sparclynx_aout_vec)		tb="$tb sparclynx.o lynx-core.o aout32.o" ;;
    sparclynx_coff_vec)		tb="$tb cf-sparclynx.o lynx-core.o" ;;
    sparcnetbsd_vec)		tb="$tb sparcnetbsd.o aout32.o" ;;
    sparccoff_vec)		tb="$tb coff-sparc.o" ;;
    srec_vec)			tb="$tb srec.o" ;;
    sunos_big_vec)		tb="$tb sunos.o aout32.o" ;;
    symbolsrec_vec)		tb="$tb srec.o" ;;
    tekhex_vec)			tb="$tb tekhex.o" ;;
    we32kcoff_vec)		tb="$tb coff-we32k.o" ;;
    z8kcoff_vec)		tb="$tb coff-z8k.o reloc16.o" ;;
    w65_vec)			tb="$tb coff-w65.o reloc16.o" ;;
    versados_vec)		tb="$tb versados.o" ;;
d587 3
a589 1
ta=`echo $selarchs | sed -e s/bfd_/cpu-/g -e s/_arch/.o/g`
d660 2
a661 2
case ${want_mmap}+${ac_cv_func_mmap} in
  true+yes )  AC_DEFINE(USE_MMAP) ;;
d665 2
a666 2
AC_OUTPUT(Makefile doc/Makefile bfd-in3.h:bfd-in2.h,
[case x$CONFIG_HEADERS in xconfig.h:config.in) echo > stamp-h ;; esac])
@


1.9
log
@support coredump parsing on alpha
@
text
@d186 1
d192 1
d226 1
a226 1
  mips-*-openbsd*)
d228 1
d240 1
a240 3
	;;
  mips-*-openbsd*)
	COREFILE=netbsd-core.o
d284 1
d288 1
d306 1
d310 1
d315 1
a315 1
  powerpc-*-*bsd*)	COREFILE=netbsd-core.o ;;
d320 1
@


1.8
log
@changes to binutils to support powerpc-openbsd
@
text
@d318 1
@


1.7
log
@Add OpenBSD/arc support to gdb, from pefo
@
text
@d310 1
@


1.6
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d224 3
@


1.5
log
@Alpha support based on Chris Demetriou's <cgd@@cs.cmu.edu> work
@
text
@d146 1
d467 2
d590 1
d594 3
d627 1
@


1.4
log
@Merge the Cygnus 960904 sources
@
text
@d477 2
@


1.3
log
@Resolved conflicts with latest Cygnus import and our local changes
@
text
@d3 1
a3 1
AC_PREREQ(2.3)
d77 2
d112 4
d117 4
a120 1
HOST_64BIT_LONG=0
d122 5
a126 1
  HOST_64BIT_LONG=1
d128 4
a131 1
AC_SUBST(HOST_64BIT_LONG)
d138 1
a138 1
AC_CHECK_FUNCS(fcntl getpagesize)
d142 1
d144 1
d163 1
a163 1
  i[345]86-sequent-bsd*)
d169 2
a170 2
  i[345]86-sequent-sysv4*) ;;
  i[345]86-sequent-sysv*)
d176 1
a176 1
  i[345]86-*-bsd* | i[345]86-*-freebsd*)
d182 1
a182 1
  i[345]86-*-netbsd*)
d187 1
a187 1
  i[345]86-*-openbsd*)
d192 1
a192 1
  i[345]86-esix-sysv3*)
d198 1
a198 1
  i[345]86-*-sco* | i[345]86-*-isc*)
d204 1
a204 1
  i[345]86-*-mach3*)
d210 1
a210 1
  i[345]86-*-linux*)
d216 2
a217 2
  i[345]86-*-isc*)	COREFILE=trad-core.o ;;
  i[345]86-*-aix*)	COREFILE=aix386-core.o ;;
d451 2
d468 2
d484 2
d537 1
d598 1
a598 1
    if test -z "$GCC" && test "$HOST_64BIT_LONG" = "0"; then
d628 1
a628 1
AC_OUTPUT(Makefile doc/Makefile,
@


1.2
log
@Add OpenBSD configuration, it's exactly like NetBSD.
@
text
@d21 15
d58 19
a79 2
AC_PROG_CC
AC_SUBST(CFLAGS)
d81 2
a82 2
AC_CHECK_PROG(AR, ar, ar, :)
AC_PROG_RANLIB
d85 26
d120 2
a121 1
AC_CHECK_HEADERS(fcntl.h sys/file.h)
d126 2
a127 33
AC_MSG_CHECKING([whether malloc must be declared])
AC_CACHE_VAL(bfd_cv_decl_needed_malloc,
[AC_TRY_COMPILE([
#include <stdio.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif],
[char *(*pfn) = (char *(*)) malloc],
bfd_cv_decl_needed_malloc=no, bfd_cv_decl_needed_malloc=yes)])
AC_MSG_RESULT($bfd_cv_decl_needed_malloc)
if test $bfd_cv_decl_needed_malloc = yes; then
  AC_DEFINE(NEED_DECLARATION_MALLOC)
fi

AC_MSG_CHECKING([whether free must be declared])
AC_CACHE_VAL(bfd_cv_decl_needed_free,
[AC_TRY_COMPILE([
#include <stdio.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif],
[int (*pfn) = (int (*)) free],
bfd_cv_decl_needed_free=no, bfd_cv_decl_needed_free=yes)])
AC_MSG_RESULT($bfd_cv_decl_needed_free)
if test $bfd_cv_decl_needed_free = yes; then
  AC_DEFINE(NEED_DECLARATION_FREE)
fi
d166 1
a166 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386nbsd.h")
d171 1
a171 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386nbsd.h")
d214 1
a214 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/mipsnbsd.h")
d217 1
a217 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/mipsnbsd.h")
d236 1
a236 1
	AC_DEFINE(TRAD_HEADER,"hosts/news-mips".h)
d247 4
d260 1
a260 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/m68knbsd.h")
d263 3
d267 1
a267 1
	AC_DEFINE(TRAD_HEADER,"hosts/m68knbsd.h")
d280 1
a280 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/ns32knbsd.h")
d283 1
a283 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/ns32knbsd.h")
d291 1
a291 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/sparcnbsd.h")
d294 1
a294 2
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/sparcnbsd.h")
d418 1
a418 1
    a_out_adobe_vec)		tb="$tb aout-adobe.o aout32.o stab-syms.o" ;;
d425 5
a429 5
    aout0_big_vec)		tb="$tb aout0.o aout32.o stab-syms.o" ;;
    aout_arm_big_vec)		tb="$tb aout-arm.o aout32.o stab-syms.o" ;;
    aout_arm_little_vec)	tb="$tb aout-arm.o aout32.o stab-syms.o" ;;
    aout_mips_big_vec)		tb="$tb mipsbsd.o aout32.o stab-syms.o" ;;
    aout_mips_little_vec)	tb="$tb mipsbsd.o aout32.o stab-syms.o" ;;
d431 2
a432 2
    b_out_vec_big_host)		tb="$tb bout.o aout32.o stab-syms.o" ;;
    b_out_vec_little_host)	tb="$tb bout.o aout32.o stab-syms.o" ;;
d435 2
d442 2
d456 1
a456 1
    demo_64_vec)		tb="$tb demo64.o aout64.o stab-syms.o"
d464 5
a468 6
    host_aout_vec)		tb="$tb host-aout.o aout32.o stab-syms.o" ;;
    hp300bsd_vec)		tb="$tb hp300bsd.o aout32.o stab-syms.o" ;;
    hp300hpux_vec)		tb="$tb hp300hpux.o aout32.o stab-syms.o" ;;
    i386aout_vec)		tb="$tb i386aout.o aout32.o stab-syms.o" ;;
    i386bsd_vec)		tb="$tb i386bsd.o aout32.o stab-syms.o" ;;
    i386dynix_vec)		tb="$tb i386dynix.o aout32.o stab-syms.o" ;;
d470 2
d475 6
a480 6
    i386linux_vec)		tb="$tb i386linux.o aout32.o stab-syms.o" ;;
    i386lynx_aout_vec)		tb="$tb i386lynx.o lynx-core.o aout32.o stab-syms.o" ;;
    i386lynx_coff_vec)		tb="$tb cf-i386lynx.o cofflink.o lynx-core.o stab-syms.o" ;;
    i386mach3_vec)		tb="$tb i386mach3.o aout32.o stab-syms.o" ;;
    i386netbsd_vec)		tb="$tb i386netbsd.o aout32.o stab-syms.o" ;;
    i386os9k_vec)		tb="$tb i386os9k.o aout32.o stab-syms.o" ;;
d487 6
a492 4
    m68klynx_aout_vec)		tb="$tb m68klynx.o lynx-core.o aout32.o stab-syms.o" ;;
    m68klynx_coff_vec)		tb="$tb cf-m68klynx.o coff-m68k.o cofflink.o lynx-core.o stab-syms.o" ;;
    m68knetbsd_vec)		tb="$tb m68knetbsd.o aout32.o stab-syms.o" ;;
    m68k4knetbsd_vec)		tb="$tb m68k4knetbsd.o aout32.o stab-syms.o" ;;
d494 1
a494 1
    newsos3_vec)		tb="$tb newsos3.o aout32.o stab-syms.o" ;;
d499 1
a499 1
    riscix_vec)			tb="$tb aout32.o riscix.o stab-syms.o" ;;
d501 2
a502 2
    pc532netbsd_vec)		tb="$tb ns32knetbsd.o aout-ns32k.o stab-syms.o" ;;
    pc532machaout_vec)		tb="$tb pc532-mach.o aout-ns32k.o stab-syms.o" ;;
d509 1
d513 3
a515 3
    sparclynx_aout_vec)		tb="$tb sparclynx.o lynx-core.o aout32.o stab-syms.o" ;;
    sparclynx_coff_vec)		tb="$tb cf-sparclynx.o lynx-core.o stab-syms.o" ;;
    sparcnetbsd_vec)		tb="$tb sparcnetbsd.o aout32.o stab-syms.o" ;;
d518 1
a518 1
    sunos_big_vec)		tb="$tb sunos.o aout32.o stab-syms.o" ;;
d573 4
@


1.1
log
@Initial revision
@
text
@d142 6
d191 4
d235 4
d253 4
d263 4
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@a20 15
AC_ARG_ENABLE(shared,
[  --enable-shared         build shared BFD library],
[case "${enableval}" in
  yes) shared=true ;;
  no)  shared=false ;;
  *bfd*) shared=true ;;
  *) shared=false ;;
esac])dnl
AC_ARG_ENABLE(commonbfdlib,
[  --enable-commonbfdlib   build shared BFD/opcodes/libiberty library],
[case "${enableval}" in
  yes) commonbfdlib=true ;;
  no)  commonbfdlib=false ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for BFD commonbfdlib option]) ;;
esac])dnl
a42 19
ALLLIBS='$(TARGETLIB)'
PICFLAG=
SHLIB=unused-shlib
SHLINK=unused-shlink
if test "${shared}" = "true"; then
  PICFLAG=-fpic
  if test "${commonbfdlib}" = "true"; then
    ALLLIBS='$(TARGETLIB)'
  else
    ALLLIBS='$(TARGETLIB) $(SHLIB) $(SHLINK)'
changequote(,)dnl
    SHLIB=libbfd.so.`sed -e 's/[^0-9]*\([0-9.]*\).*/\1/' ${srcdir}/VERSION`
changequote([,])dnl
    SHLINK=libbfd.so
  fi
fi

AC_PROG_CC

d46 2
d49 2
a50 2
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)
a52 26
if test "${shared}" = "true"; then
  if test "${GCC}" != "yes" && test "${shared_non_gcc}" != "yes"; then
    AC_MSG_WARN([BFD --enable-shared only supported when using gcc])
    shared=false
    ALLLIBS='$(TARGETLIB)'
    PICFLAG=
    SHLIB=unused-shlib
  fi
fi

AC_SUBST(ALLLIBS)
AC_SUBST(PICFLAG)
AC_SUBST(SHLIB)
AC_SUBST(SHLIB_CC)
AC_SUBST(SHLIB_CFLAGS)
if test "${commonbfdlib}" = "true"; then
  COMMON_SHLIB=yes
  PICLIST=piclist
else
  COMMON_SHLIB=
  PICLIST=
fi
AC_SUBST(COMMON_SHLIB)
AC_SUBST(PICLIST)
AC_SUBST(SHLINK)

d62 1
a62 2
AC_CHECK_HEADERS(fcntl.h sys/file.h sys/time.h)
AC_HEADER_TIME
d67 33
a99 2
BFD_NEED_DECLARATION(malloc)
BFD_NEED_DECLARATION(free)
d138 2
a139 1
	COREFILE=netbsd-core.o
d182 2
a183 1
	COREFILE=netbsd-core.o
d202 1
a202 1
	AC_DEFINE(TRAD_HEADER,"hosts/news-mips.h")
a212 4
  m68*-*-linux*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/m68klinux.h")
	;;
a221 3
	COREFILE=netbsd-core.o
	;;
  m68*-apple-aux*)
d223 1
a223 1
	AC_DEFINE(TRAD_HEADER,"hosts/m68kaux.h")
d236 2
a237 1
	COREFILE=netbsd-core.o
d245 2
a246 1
	COREFILE=netbsd-core.o
d370 1
a370 1
    a_out_adobe_vec)		tb="$tb aout-adobe.o aout32.o" ;;
d377 5
a381 5
    aout0_big_vec)		tb="$tb aout0.o aout32.o" ;;
    aout_arm_big_vec)		tb="$tb aout-arm.o aout32.o" ;;
    aout_arm_little_vec)	tb="$tb aout-arm.o aout32.o" ;;
    aout_mips_big_vec)		tb="$tb mipsbsd.o aout32.o" ;;
    aout_mips_little_vec)	tb="$tb mipsbsd.o aout32.o" ;;
d383 2
a384 2
    b_out_vec_big_host)		tb="$tb bout.o aout32.o" ;;
    b_out_vec_little_host)	tb="$tb bout.o aout32.o" ;;
a386 2
    bfd_elf64_bigmips_vec) 	tb="$tb elf64-mips.o elf64.o elf32-mips.o elf32.o $elf ecofflink.o"
				target64=true ;;
a391 2
    bfd_elf64_littlemips_vec) 	tb="$tb elf64-mips.o elf64.o elf32-mips.o elf32.o $elf ecofflink.o"
				target64=true ;;
d404 1
a404 1
    demo_64_vec)		tb="$tb demo64.o aout64.o"
d412 6
a417 5
    host_aout_vec)		tb="$tb host-aout.o aout32.o" ;;
    hp300bsd_vec)		tb="$tb hp300bsd.o aout32.o" ;;
    hp300hpux_vec)		tb="$tb hp300hpux.o aout32.o" ;;
    i386aout_vec)		tb="$tb i386aout.o aout32.o" ;;
    i386bsd_vec)		tb="$tb i386bsd.o aout32.o" ;;
a418 2
    i386dynix_vec)		tb="$tb i386dynix.o aout32.o" ;;
    i386freebsd_vec)		tb="$tb i386freebsd.o aout32.o" ;;
d422 6
a427 6
    i386linux_vec)		tb="$tb i386linux.o aout32.o" ;;
    i386lynx_aout_vec)		tb="$tb i386lynx.o lynx-core.o aout32.o" ;;
    i386lynx_coff_vec)		tb="$tb cf-i386lynx.o cofflink.o lynx-core.o" ;;
    i386mach3_vec)		tb="$tb i386mach3.o aout32.o" ;;
    i386netbsd_vec)		tb="$tb i386netbsd.o aout32.o" ;;
    i386os9k_vec)		tb="$tb i386os9k.o aout32.o" ;;
d434 4
a437 6
    m68klinux_vec)		tb="$tb m68klinux.o aout32.o" ;;
    m68klynx_aout_vec)		tb="$tb m68klynx.o lynx-core.o aout32.o" ;;
    m68klynx_coff_vec)		tb="$tb cf-m68klynx.o coff-m68k.o cofflink.o lynx-core.o" ;;
    m68knetbsd_vec)		tb="$tb m68knetbsd.o aout32.o" ;;
    m68k4knetbsd_vec)		tb="$tb m68k4knetbsd.o aout32.o" ;;
    m68kaux_coff_vec)		tb="$tb coff-aux.o coff-m68k.o cofflink.o" ;;
d439 1
a439 1
    newsos3_vec)		tb="$tb newsos3.o aout32.o" ;;
d444 1
a444 1
    riscix_vec)			tb="$tb aout32.o riscix.o" ;;
d446 2
a447 2
    pc532netbsd_vec)		tb="$tb ns32knetbsd.o aout-ns32k.o" ;;
    pc532machaout_vec)		tb="$tb pc532-mach.o aout-ns32k.o" ;;
a453 1
    ppcboot_vec)		tb="$tb ppcboot.o" ;;
d457 3
a459 3
    sparclynx_aout_vec)		tb="$tb sparclynx.o lynx-core.o aout32.o" ;;
    sparclynx_coff_vec)		tb="$tb cf-sparclynx.o lynx-core.o" ;;
    sparcnetbsd_vec)		tb="$tb sparcnetbsd.o aout32.o" ;;
d462 1
a462 1
    sunos_big_vec)		tb="$tb sunos.o aout32.o" ;;
a516 4
    if test -z "$GCC" && test "$HOST_64BIT_LONG" = "0"; then
      AC_MSG_WARN([You have requested a 64 bit BFD configuration, but])
      AC_MSG_WARN([your compiler may not have a 64 bit integral type])
    fi
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d3 1
a3 1
AC_PREREQ(2.5)
a76 2
AC_ISC_POSIX

a109 4
AC_SUBST(INSTALL_SHLIB)

VERSION=`cat ${srcdir}/VERSION`
AC_SUBST(VERSION)
d111 1
a111 4
BFD_HOST_64BIT_LONG=0
BFD_HOST_64_BIT_DEFINED=0
BFD_HOST_64_BIT=
BFD_HOST_U_64_BIT=
d113 1
a113 5
  BFD_HOST_64BIT_LONG=1
elif test "x${HOST_64BIT_TYPE}" != "x"; then
  BFD_HOST_64_BIT_DEFINED=1
  BFD_HOST_64_BIT=${HOST_64BIT_TYPE}
  BFD_HOST_U_64_BIT=${HOST_U_64BIT_TYPE}
d115 1
a115 4
AC_SUBST(BFD_HOST_64BIT_LONG)
AC_SUBST(BFD_HOST_64_BIT_DEFINED)
AC_SUBST(BFD_HOST_64_BIT)
AC_SUBST(BFD_HOST_U_64_BIT)
d122 1
a122 1
AC_CHECK_FUNCS(fcntl getpagesize setitimer sysconf)
a125 1
BFD_NEED_DECLARATION(strstr)
a126 1
BFD_NEED_DECLARATION(realloc)
d145 1
a145 1
  i[3456]86-sequent-bsd*)
d151 2
a152 2
  i[3456]86-sequent-sysv4*) ;;
  i[3456]86-sequent-sysv*)
d158 1
a158 1
  i[3456]86-*-bsd* | i[3456]86-*-freebsd*)
d164 1
a164 1
  i[3456]86-*-netbsd*)
d169 1
a169 1
  i[3456]86-esix-sysv3*)
d175 1
a175 1
  i[3456]86-*-sco* | i[3456]86-*-isc*)
d181 1
a181 1
  i[3456]86-*-mach3*)
d187 1
a187 1
  i[3456]86-*-linux*)
d193 2
a194 2
  i[3456]86-*-isc*)	COREFILE=trad-core.o ;;
  i[3456]86-*-aix*)	COREFILE=aix386-core.o ;;
a415 2
    bfd_elf64_alpha_vec)	tb="$tb elf64-alpha.o elf64.o $elf"
				target64=true ;;
a430 2
    bfd_elf32_sh_vec)		tb="$tb elf32-sh.o elf32.o $elf coff-sh.o" ;;
    bfd_elf32_shl_vec)		tb="$tb elf32-sh.o elf32.o $elf coff-sh.o" ;;
a444 2
    evax_alpha_vec)		tb="$tb evax-alpha.o evax-emh.o evax-egsd.o evax-etir.o evax-misc.o"
 				target64=true ;;
a495 1
    sparcle_aout_vec)		tb="$tb aout-sparcle.o aout32.o" ;;
d556 1
a556 1
    if test -z "$GCC" && test "$BFD_HOST_64BIT_LONG" = "0" && test "$BFD_HOST_64_BIT_DEFINED" = "0"; then
d586 1
a586 1
AC_OUTPUT(Makefile doc/Makefile bfd-in3.h:bfd-in2.h,
@


1.1.1.4
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a145 1
BFD_NEED_DECLARATION(getenv)
a448 2
    bfd_elf32_mn10200_vec)	tb="$tb elf32-mn10200.o elf32.o $elf" ;;
    bfd_elf32_mn10300_vec)	tb="$tb elf32-mn10300.o elf32.o $elf" ;;
a567 1
  havevecs=
a570 3
  havevecs=
  test -n "$selvecs" &&
    havevecs=`echo $selvecs | sed -e 's/^/-DHAVE_/' -e 's/ \(.\)/ -DHAVE_\1/g'`
a600 1
test -n "${havevecs}" && tdefaults="${tdefaults} ${havevecs}"
@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@a101 1
AC_SUBST(SHLIB_LIBS)
d183 1
a183 1
  i[3456]86-*-netbsd* | i[3456]86-*-openbsd*)
d227 1
a227 1
  mips-*-netbsd* | mips*-*-openbsd*)
a235 1
  mips-sgi-irix6*)	COREFILE=irix-core.o ;;
d270 1
a270 1
  m68*-*-netbsd* | m68*-*-openbsd*)
d287 1
a287 1
  ns32k-*-netbsd* | ns32k-*-openbsd*)
a292 1
  powerpc-*-*bsd*)	COREFILE=netbsd-core.o ;;
d295 1
a295 2
  powerpc-*-beos*)	;;
  sparc-*-netbsd* | sparc-*-openbsd*)
d351 1
a351 1
	result=`${CONFIG_SHELL-/bin/sh} $ac_config_sub $targ 2>/dev/null`
a440 1
    bfd_elf32_d10v_vec)		tb="$tb elf32-d10v.o elf32.o $elf" ;;
a447 1
    bfd_elf32_m32r_vec)		tb="$tb elf32-m32r.o elf32.o $elf" ;;
d450 2
a451 2
    bfd_elf32_mn10200_vec)	tb="$tb elf-m10200.o elf32.o $elf" ;;
    bfd_elf32_mn10300_vec)	tb="$tb elf-m10300.o elf32.o $elf" ;;
a467 1
    ecoff_biglittle_vec)	tb="$tb coff-mips.o ecoff.o ecofflink.o" ;;
a502 1
    m68ksysvcoff_vec)		tb="$tb coff-svm68k.o cofflink.o" ;;
a523 1
    sparclinux_vec)		tb="$tb sparclinux.o aout32.o stab-syms.o" ;;
d543 1
a543 3
# A couple of CPUs use shorter file names to avoid problems on DOS
# filesystems.
ta=`echo $selarchs | sed -e s/bfd_/cpu-/g -e s/_arch/.o/g -e s/mn10200/m10200/ -e s/mn10300/m10300/`
d614 1
a614 1
case ${want_mmap}+${ac_cv_func_mmap_fixed_mapped} in
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d3 1
a3 2

AC_PREREQ(2.13)
a5 16
AC_CANONICAL_SYSTEM
AC_ISC_POSIX

AM_INIT_AUTOMAKE(bfd, 2.10)

dnl These must be called before AM_PROG_LIBTOOL, because it may want
dnl to call AC_CHECK_PROG.
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)

dnl Default to a non shared library.  This may be overridden by the
dnl configure option --enable-shared.
AM_DISABLE_SHARED

AM_PROG_LIBTOOL

d21 8
d44 1
a44 1
AM_CONFIG_HEADER(config.h:config.in)
d46 2
a52 3
AM_MAINTAINER_MODE
AC_EXEEXT

d58 17
d77 1
a77 2
ALL_LINGUAS=
CY_GNU_GETTEXT
d83 2
d87 31
d139 1
a139 2
AC_HEADER_DIRENT
AC_CHECK_FUNCS(fcntl getpagesize setitimer sysconf fdopen getuid getgid)
a151 1
TRAD_HEADER=
d154 9
a162 12
  alpha*-*-linux-gnu*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/alphalinux.h"'
	;;
  alpha*-*-netbsd*)	COREFILE=netbsd-core.lo ;;
  alpha*-*-freebsd*)	;;
  alpha*-*-*)		COREFILE=osf-core.lo ;;
  arm-*-riscix)		COREFILE=trad-core.lo ;;
  hppa*-*-hpux*)	COREFILE=hpux-core.lo ;;
  hppa*-*-hiux*)	COREFILE=hpux-core.lo ;;
  hppa*-*-mpeix*)	COREFILE=hpux-core.lo ;;
  hppa*-*-bsd*)		COREFILE="hpux-core.lo hppabsd-core.lo"
a163 5
  i370-*-*)		
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i370linux.h"'
	;;

d167 2
a168 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/symmetry.h"'
d174 2
a175 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/symmetry.h"'
d180 2
a181 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i386bsd.h"'
d186 1
a186 1
	COREFILE=netbsd-core.lo
d191 2
a192 7
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/esix.h"'
	;;
changequote(,)dnl
  i[3456]86-*-sco3.2v5*)
changequote([,])dnl
	COREFILE=sco5-core.lo
d197 2
a198 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i386sco.h"'
d203 2
a204 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i386mach3.h"'
d207 1
a207 1
  i[3456]86-*-linux-gnu*)
d209 2
a210 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i386linux.h"'
d213 2
a214 2
  i[3456]86-*-isc*)	COREFILE=trad-core.lo ;;
  i[3456]86-*-aix*)	COREFILE=aix386-core.lo ;;
d217 2
a218 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/i860mach3.h"'
d221 2
a222 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/mipsbsd.h"'
d225 2
a226 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/mipsmach3.h"'
d229 1
a229 1
	COREFILE=netbsd-core.lo
d232 2
a233 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/decstation.h"'
d235 3
a237 3
  mips-sgi-irix4*)	COREFILE=irix-core.lo ;;
  mips-sgi-irix5*)	COREFILE=irix-core.lo ;;
  mips-sgi-irix6*)	COREFILE=irix-core.lo ;;
d239 2
a240 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/mipsmach3.h"'
d244 2
a245 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/riscos.h"'
d248 2
a249 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/news-mips.h"'
d252 2
a253 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/dpx2.h"'
d255 1
a255 1
  m68*-hp-hpux*)	COREFILE=hpux-core.lo ;;
d257 2
a258 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/hp300bsd.h"'
d260 3
a262 3
  m68*-*-linux-gnu*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/m68klinux.h"'
d265 2
a266 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/delta68.h"'
d269 2
a270 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/news.h"'
d273 1
a273 1
	COREFILE=netbsd-core.lo
d276 2
a277 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/m68kaux.h"'
d280 1
a280 1
  m88*-motorola-sysv*)	COREFILE=ptrace-core.lo ;;
d282 2
a283 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/m88kmach3.h"'
d286 2
a287 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/pc532mach.h"'
d290 1
a290 1
	COREFILE=netbsd-core.lo
d292 6
a297 6
  rs6000-*-lynx*)	COREFILE=lynx-core.lo ;;
  rs6000-*-aix4*)	COREFILE=rs6000-core.lo ;;
  rs6000-*-*)		COREFILE=rs6000-core.lo ;;
  powerpc-*-*bsd*)	COREFILE=netbsd-core.lo ;;
  powerpc-*-aix4*)	COREFILE=rs6000-core.lo ;;
  powerpc-*-aix*)	COREFILE=rs6000-core.lo ;;
a298 1
  powerpc-*-netbsd*)	COREFILE=netbsd-core.lo ;;
d300 1
a300 1
	COREFILE=netbsd-core.lo
d303 2
a304 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/tahoe.h"'
d307 2
a308 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/vaxult2.h"'
d311 2
a312 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/vaxult2.h"'
d315 2
a316 2
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/vaxbsd.h"'
d321 9
a329 11
  aix386-core.lo)	COREFLAG=-DAIX386_CORE ;;
  hppabsd-core.lo)	COREFLAG=-DHPPABSD_CORE ;;
  hpux-core.lo)		COREFLAG=-DHPUX_CORE ;;
  irix-core.lo)		COREFLAG=-DIRIX_CORE ;;
  lynx-core.lo)		COREFLAG=-DLYNX_CORE ;;
  netbsd-core.lo)	COREFLAG=-DNETBSD_CORE ;;
  osf-core.lo)		COREFLAG=-DOSF_CORE ;;
  ptrace-core.lo)	COREFLAG=-DPTRACE_CORE ;;
  rs6000-core.lo)	COREFLAG="$COREFLAG -DAIX_CORE" ;;
  sco5-core.lo)		COREFLAG="$COREFLAG -DSCO5_CORE" ;;
  trad-core.lo)		COREFLAG="$COREFLAG -DTRAD_CORE" ;;
d332 11
a342 13
  # ELF corefile support has several flavors, but all of
  # them use something called <sys/procfs.h>
  AC_CHECK_HEADERS(sys/procfs.h)
  if test "$ac_cv_header_sys_procfs_h" = yes; then
    BFD_HAVE_SYS_PROCFS_TYPE(prstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(prstatus_t, pr_who)
    BFD_HAVE_SYS_PROCFS_TYPE(pstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE(prpsinfo_t)
    BFD_HAVE_SYS_PROCFS_TYPE(psinfo_t)
    BFD_HAVE_SYS_PROCFS_TYPE(lwpstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(lwpstatus_t, pr_context)
    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(lwpstatus_t, pr_reg)
    BFD_HAVE_SYS_PROCFS_TYPE(win32_pstatus_t)
d344 1
a347 16
AC_DEFINE_UNQUOTED(TRAD_HEADER, $TRAD_HEADER,
  [Name of host specific header file to include in trad-core.c.])

# Horrible hacks to build DLLs on Windows.
WIN32LDFLAGS=
WIN32LIBADD=
case "${host}" in
*-*-cygwin*)
  if test "$enable_shared" = "yes"; then
    WIN32LDFLAGS="-no-undefined"
    WIN32LIBADD="-L`pwd`/../libiberty -liberty -L`pwd`/../intl -lintl -lcygwin -lkernel32"
  fi
  ;;
esac
AC_SUBST(WIN32LDFLAGS)
AC_SUBST(WIN32LIBADD)
d355 1
a355 1
	result=`$ac_config_sub $targ 2>/dev/null`
d390 1
a390 1
# no "--with-64-bit-bfd" option is given, even if "--enable-targets=all" is
a402 1

d416 1
a416 1
elf="elf.lo elflink.lo dwarf2.lo dwarf1.lo"
d423 17
a439 22
    a29kcoff_big_vec)		tb="$tb coff-a29k.lo cofflink.lo" ;;
    a_out_adobe_vec)		tb="$tb aout-adobe.lo aout32.lo" ;;
    armcoff_little_vec)		tb="$tb coff-arm.lo cofflink.lo " ;;
    armcoff_big_vec)		tb="$tb coff-arm.lo cofflink.lo " ;;
    armnetbsd_vec)		tb="$tb armnetbsd.lo aout32.lo" ;;
    armpe_little_vec)		tb="$tb pe-arm.lo peigen.lo cofflink.lo " ;;
    armpe_big_vec)		tb="$tb pe-arm.lo peigen.lo cofflink.lo " ;;
    armpei_little_vec)		tb="$tb pei-arm.lo peigen.lo cofflink.lo " ;;
    armpei_big_vec)		tb="$tb pei-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pe_little_vec)	tb="$tb epoc-pe-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pe_big_vec)	tb="$tb epoc-pe-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pei_little_vec)	tb="$tb epoc-pei-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pei_big_vec)	tb="$tb epoc-pei-arm.lo peigen.lo cofflink.lo " ;;
    aout0_big_vec)		tb="$tb aout0.lo aout32.lo" ;;
    aout_arm_big_vec)		tb="$tb aout-arm.lo aout32.lo" ;;
    aout_arm_little_vec)	tb="$tb aout-arm.lo aout32.lo" ;;
    aout_mips_big_vec)		tb="$tb mipsbsd.lo aout32.lo" ;;
    aout_mips_little_vec)	tb="$tb mipsbsd.lo aout32.lo" ;;
    apollocoff_vec)		tb="$tb coff-apollo.lo" ;;
    b_out_vec_big_host)		tb="$tb bout.lo aout32.lo" ;;
    b_out_vec_little_host)	tb="$tb bout.lo aout32.lo" ;;
    bfd_elf64_alpha_vec)	tb="$tb elf64-alpha.lo elf64.lo $elf"
d441 3
a443 10
    bfd_elf32_avr_vec)		tb="$tb elf32-avr.lo elf32.lo $elf" ;;
    bfd_elf32_littlearc_vec)	tb="$tb elf32-arc.lo elf32.lo $elf" ;;
    bfd_elf32_littlearm_vec)	tb="$tb elfarm-nabi.lo elf32.lo $elf" ;;
    bfd_elf32_littlearm_oabi_vec) tb="$tb elfarm-oabi.lo elf32.lo $elf" ;;
    bfd_elf32_bigarc_vec)	tb="$tb elf32-arc.lo elf32.lo $elf" ;;
    bfd_elf32_bigarm_vec)	tb="$tb elfarm-nabi.lo elf32.lo $elf" ;;
    bfd_elf32_bigarm_oabi_vec)	tb="$tb elfarm-oabi.lo elf32.lo $elf" ;;
    bfd_elf32_big_generic_vec) 	tb="$tb elf32-gen.lo elf32.lo $elf" ;;
    bfd_elf32_bigmips_vec) 	tb="$tb elf32-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf64_bigmips_vec) 	tb="$tb elf64-mips.lo elf64.lo elf32-mips.lo elf32.lo $elf ecofflink.lo"
d445 7
a451 11
    bfd_elf32_d10v_vec)		tb="$tb elf32-d10v.lo elf32.lo $elf" ;;
    bfd_elf32_d30v_vec)		tb="$tb elf32-d30v.lo elf32.lo $elf" ;;
    bfd_elf32_fr30_vec)		tb="$tb elf32-fr30.lo elf32.lo $elf" ;;
    bfd_elf32_hppa_vec)		tb="$tb elf32-hppa.lo elf32.lo $elf" ;;
    bfd_elf32_i370_vec)		tb="$tb elf32-i370.lo elf32.lo $elf" ;;
    bfd_elf32_i386_vec)		tb="$tb elf32-i386.lo elf32.lo $elf" ;;
    bfd_elf32_i860_vec)		tb="$tb elf32-i860.lo elf32.lo $elf" ;;
    bfd_elf32_i960_vec)		tb="$tb elf32-i960.lo elf32.lo $elf" ;;
    bfd_elf32_little_generic_vec) tb="$tb elf32-gen.lo elf32.lo $elf" ;;
    bfd_elf32_littlemips_vec) 	tb="$tb elf32-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf64_littlemips_vec) 	tb="$tb elf64-mips.lo elf64.lo elf32-mips.lo elf32.lo $elf ecofflink.lo"
d453 11
a463 16
    bfd_elf32_m32r_vec)		tb="$tb elf32-m32r.lo elf32.lo $elf" ;;
    bfd_elf32_m68k_vec)		tb="$tb elf32-m68k.lo elf32.lo $elf" ;;
    bfd_elf32_m88k_vec)		tb="$tb elf32-m88k.lo elf32.lo $elf" ;;
    bfd_elf32_mcore_big_vec)	tb="$tb elf32-mcore.lo elf32.lo $elf" ;;
    bfd_elf32_mcore_little_vec)	tb="$tb elf32-mcore.lo elf32.lo $elf" ;;
    bfd_elf32_mn10200_vec)	tb="$tb elf-m10200.lo elf32.lo $elf" ;;
    bfd_elf32_mn10300_vec)	tb="$tb elf-m10300.lo elf32.lo $elf" ;;
    bfd_elf32_pj_vec)           tb="$tb elf32-pj.lo elf32.lo $elf";;
    bfd_elf32_pjl_vec)          tb="$tb elf32-pj.lo elf32.lo $elf";;
    bfd_elf32_powerpc_vec)	tb="$tb elf32-ppc.lo elf32.lo $elf" ;;
    bfd_elf32_powerpcle_vec)	tb="$tb elf32-ppc.lo elf32.lo $elf" ;;
    bfd_elf32_sh_vec)		tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo" ;;
    bfd_elf32_shl_vec)		tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo" ;;
    bfd_elf32_sparc_vec)	tb="$tb elf32-sparc.lo elf32.lo $elf" ;;
    bfd_elf32_v850_vec)		tb="$tb elf32-v850.lo elf32.lo $elf" ;;
    bfd_elf64_big_generic_vec) 	tb="$tb elf64-gen.lo elf64.lo $elf"
d465 1
a465 1
    bfd_elf64_little_generic_vec) tb="$tb elf64-gen.lo elf64.lo $elf"
d467 1
a467 1
    bfd_elf64_sparc_vec)	tb="$tb elf64-sparc.lo elf64.lo $elf"
d469 2
a470 3
    cisco_core_big_vec)		tb="$tb cisco-core.lo" ;;
    cisco_core_little_vec)	tb="$tb cisco-core.lo" ;;
    demo_64_vec)		tb="$tb demo64.lo aout64.lo"
d472 4
a475 4
    ecoff_big_vec)		tb="$tb coff-mips.lo ecoff.lo ecofflink.lo" ;;
    ecoff_little_vec)		tb="$tb coff-mips.lo ecoff.lo ecofflink.lo" ;;
    ecoff_biglittle_vec)	tb="$tb coff-mips.lo ecoff.lo ecofflink.lo" ;;
    ecoffalpha_little_vec)	tb="$tb coff-alpha.lo ecoff.lo ecofflink.lo"
d477 39
a515 45
    go32coff_vec)		tb="$tb coff-go32.lo cofflink.lo" ;;
    go32stubbedcoff_vec)	tb="$tb coff-stgo32.lo cofflink.lo" ;;
    h8300coff_vec)		tb="$tb coff-h8300.lo reloc16.lo" ;;
    h8500coff_vec)		tb="$tb coff-h8500.lo reloc16.lo" ;;
    host_aout_vec)		tb="$tb host-aout.lo aout32.lo" ;;
    hp300bsd_vec)		tb="$tb hp300bsd.lo aout32.lo" ;;
    hp300hpux_vec)		tb="$tb hp300hpux.lo aout32.lo" ;;
    i386aout_vec)		tb="$tb i386aout.lo aout32.lo" ;;
    i386bsd_vec)		tb="$tb i386bsd.lo aout32.lo" ;;
    i386coff_vec)		tb="$tb coff-i386.lo cofflink.lo" ;;
    i386dynix_vec)		tb="$tb i386dynix.lo aout32.lo" ;;
    i386freebsd_vec)		tb="$tb i386freebsd.lo aout32.lo" ;;
    i386msdos_vec)		tb="$tb i386msdos.lo" ;;
    i386pe_vec)			tb="$tb pe-i386.lo peigen.lo cofflink.lo" ;;
    i386pei_vec)		tb="$tb pei-i386.lo peigen.lo cofflink.lo" ;;
    i386linux_vec)		tb="$tb i386linux.lo aout32.lo" ;;
    i386lynx_aout_vec)		tb="$tb i386lynx.lo lynx-core.lo aout32.lo" ;;
    i386lynx_coff_vec)		tb="$tb cf-i386lynx.lo cofflink.lo lynx-core.lo" ;;
    i386mach3_vec)		tb="$tb i386mach3.lo aout32.lo" ;;
    i386netbsd_vec)		tb="$tb i386netbsd.lo aout32.lo" ;;
    i386os9k_vec)		tb="$tb i386os9k.lo aout32.lo" ;;
    i860coff_vec)		tb="$tb coff-i860.lo cofflink.lo" ;;
    icoff_big_vec)		tb="$tb coff-i960.lo cofflink.lo" ;;
    icoff_little_vec)		tb="$tb coff-i960.lo cofflink.lo" ;;
    ieee_vec)			tb="$tb ieee.lo" ;;
    m68kcoff_vec)		tb="$tb coff-m68k.lo cofflink.lo" ;;
    m68kcoffun_vec)		tb="$tb coff-u68k.lo coff-m68k.lo cofflink.lo" ;;
    m68klinux_vec)		tb="$tb m68klinux.lo aout32.lo" ;;
    m68klynx_aout_vec)		tb="$tb m68klynx.lo lynx-core.lo aout32.lo" ;;
    m68klynx_coff_vec)		tb="$tb cf-m68klynx.lo coff-m68k.lo cofflink.lo lynx-core.lo" ;;
    m68knetbsd_vec)		tb="$tb m68knetbsd.lo aout32.lo" ;;
    m68k4knetbsd_vec)		tb="$tb m68k4knetbsd.lo aout32.lo" ;;
    m68kaux_coff_vec)		tb="$tb coff-aux.lo coff-m68k.lo cofflink.lo" ;;
    m68ksysvcoff_vec)		tb="$tb coff-svm68k.lo cofflink.lo" ;;
    m88kbcs_vec)		tb="$tb coff-m88k.lo" ;;
    mipslpe_vec)		tb="$tb pe-mips.lo cofflink.lo" ;;
    mipslpei_vec)		tb="$tb pei-mips.lo cofflink.lo" ;;
    mcore_pe_big_vec)		tb="$tb pe-mcore.lo peigen.lo cofflink.lo" ;;
    mcore_pe_little_vec)	tb="$tb pe-mcore.lo peigen.lo cofflink.lo" ;;
    mcore_pei_big_vec)		tb="$tb pei-mcore.lo peigen.lo cofflink.lo" ;;
    mcore_pei_little_vec)	tb="$tb pei-mcore.lo peigen.lo cofflink.lo" ;;
    newsos3_vec)		tb="$tb newsos3.lo aout32.lo" ;;
    nlm32_i386_vec)		tb="$tb nlm32-i386.lo nlm32.lo nlm.lo" ;;
    nlm32_sparc_vec)		tb="$tb nlm32-sparc.lo nlm32.lo nlm.lo" ;;
    nlm32_alpha_vec)		tb="$tb nlm32-alpha.lo nlm32.lo nlm.lo"
d517 28
a544 38
    riscix_vec)			tb="$tb aout32.lo riscix.lo" ;;
    nlm32_powerpc_vec)		tb="$tb nlm32-ppc.lo nlm32.lo nlm.lo" ;;
    pc532netbsd_vec)		tb="$tb ns32knetbsd.lo aout-ns32k.lo" ;;
    pc532machaout_vec)		tb="$tb pc532-mach.lo aout-ns32k.lo" ;;
    pmac_xcoff_vec)		tb="$tb coff-pmac.lo xcofflink.lo" ;;
    rs6000coff_vec)		tb="$tb coff-rs6000.lo xcofflink.lo" ;;
    bfd_powerpc_pe_vec)         tb="$tb pe-ppc.lo peigen.lo cofflink.lo" ;;  
    bfd_powerpcle_pe_vec)       tb="$tb pe-ppc.lo peigen.lo cofflink.lo" ;;  
    bfd_powerpc_pei_vec)        tb="$tb pei-ppc.lo peigen.lo cofflink.lo" ;;
    bfd_powerpcle_pei_vec)      tb="$tb pei-ppc.lo peigen.lo cofflink.lo" ;;
    ppcboot_vec)		tb="$tb ppcboot.lo" ;;
    shcoff_vec)			tb="$tb coff-sh.lo cofflink.lo" ;;
    shlcoff_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
    shcoff_small_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
    shlcoff_small_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
    shlpe_vec)			tb="$tb pe-sh.lo coff-sh.lo cofflink.lo" ;;
    shlpei_vec)			tb="$tb pei-sh.lo coff-sh.lo cofflink.lo" ;;
    som_vec)			tb="$tb som.lo" ;;
    sparcle_aout_vec)		tb="$tb aout-sparcle.lo aout32.lo" ;;
    sparclinux_vec)		tb="$tb sparclinux.lo aout32.lo" ;;
    sparclynx_aout_vec)		tb="$tb sparclynx.lo lynx-core.lo aout32.lo" ;;
    sparclynx_coff_vec)		tb="$tb cf-sparclynx.lo lynx-core.lo" ;;
    sparcnetbsd_vec)		tb="$tb sparcnetbsd.lo aout32.lo" ;;
    sparccoff_vec)		tb="$tb coff-sparc.lo" ;;
    srec_vec)			tb="$tb srec.lo" ;;
    sunos_big_vec)		tb="$tb sunos.lo aout32.lo" ;;
    symbolsrec_vec)		tb="$tb srec.lo" ;;
    tekhex_vec)			tb="$tb tekhex.lo" ;;
    tic30_aout_vec)		tb="$tb aout-tic30.lo" ;;
    tic30_coff_vec)		tb="$tb coff-tic30.lo" ;;
    tic80coff_vec)		tb="$tb coff-tic80.lo cofflink.lo" ;;
    versados_vec)		tb="$tb versados.lo" ;;
    vms_alpha_vec)		tb="$tb vms.lo vms-hdr.lo vms-gsd.lo vms-tir.lo vms-misc.lo"
 				target64=true ;;
    vms_vax_vec)		tb="$tb vms.lo vms-hdr.lo vms-gsd.lo vms-tir.lo vms-misc.lo" ;;
    w65_vec)			tb="$tb coff-w65.lo reloc16.lo" ;;
    we32kcoff_vec)		tb="$tb coff-we32k.lo" ;;
    z8kcoff_vec)		tb="$tb coff-z8k.lo reloc16.lo" ;;
d554 1
a554 1
ta=`echo $selarchs | sed -e s/bfd_/cpu-/g -e s/_arch/.lo/g -e s/mn10200/m10200/ -e s/mn10300/m10300/`
d626 1
a626 1
  true+yes )  AC_DEFINE(USE_MMAP, 1, [Use mmap if it's available?]) ;;
d630 2
a631 2
AC_OUTPUT(Makefile doc/Makefile bfd-in3.h:bfd-in2.h po/Makefile.in:po/Make-in,
[sed -e '/POTFILES =/r po/POTFILES' po/Makefile.in > po/Makefile])
@


1.1.1.7
log
@Long delayed import of binutils-2.10.1. Turns out art@@ needs some alpha
bug-fixes...
@
text
@d10 1
a10 1
AM_INIT_AUTOMAKE(bfd, 2.10.1)
@


1.1.1.8
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d10 1
a10 1
AM_INIT_AUTOMAKE(bfd, 2.11.2)
a52 21
build_warnings="-W -Wall"
AC_ARG_ENABLE(build-warnings,
[  --enable-build-warnings Enable build-time compiler warnings if gcc is used],
[case "${enableval}" in
  yes)	;;
  no)	build_warnings="-w";;
  ,*)   t=`echo "${enableval}" | sed -e "s/,/ /g"`
        build_warnings="${build_warnings} ${t}";;
  *,)   t=`echo "${enableval}" | sed -e "s/,/ /g"`
        build_warnings="${t} ${build_warnings}";;
  *)    build_warnings=`echo "${enableval}" | sed -e "s/,/ /g"`;;
esac
if test x"$silent" != x"yes" && test x"$build_warnings" != x""; then
  echo "Setting warning flags = $build_warnings" 6>&1
fi])dnl
WARN_CFLAGS=""
if test "x${build_warnings}" != x -a "x$GCC" = xyes ; then
    WARN_CFLAGS="${build_warnings}"
fi
AC_SUBST(WARN_CFLAGS)

a116 3
  alpha*-*-freebsd*)
	COREFILE=''
	;;
d122 1
a123 1
  arm-*-freebsd*)	COREFILE='' ;;
d149 1
a149 1
  i[3456]86-*-bsd* | i[34567]86-*-freebsd[1234] | i[34567]86-*-freebsd[1234]\.* | i[34567]86-*-freebsd*aout*)
a154 6
  i[3456]86-*-freebsd*)
changequote([,])dnl
	COREFILE=''
	TRAD_HEADER='"hosts/i386bsd.h"'
	;;
changequote(,)dnl
a268 6
changequote(,)dnl
  rs6000-*-aix4.[3-9]* | powerpc-*-aix4.[3-9]*)
changequote([,])dnl
        COREFILE=rs6000-core.lo
	COREFLAG="$COREFLAG -DAIX_CORE_DUMPX_CORE"
	;;
d271 1
a274 1
  powerpc-*-freebsd*)	COREFILE='' ;;
a275 1
  powerpc-*-*bsd*)	COREFILE=netbsd-core.lo ;;
a315 1
    BFD_HAVE_SYS_PROCFS_TYPE(prstatus32_t)
a316 1
    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(prstatus32_t, pr_who)
a317 2
    BFD_HAVE_SYS_PROCFS_TYPE(pxstatus_t)
    BFD_HAVE_SYS_PROCFS_TYPE(pstatus32_t)
a318 1
    BFD_HAVE_SYS_PROCFS_TYPE(prpsinfo32_t)
a319 1
    BFD_HAVE_SYS_PROCFS_TYPE(psinfo32_t)
a320 1
    BFD_HAVE_SYS_PROCFS_TYPE(lwpxstatus_t)
d328 2
a329 4
if test -n "$TRAD_HEADER"; then
  AC_DEFINE_UNQUOTED(TRAD_HEADER, $TRAD_HEADER,
    [Name of host specific header file to include in trad-core.c.])
fi
d413 1
a413 1
elf="elf.lo elflink.lo dwarf1.lo"
a440 3
    bfd_efi_app_ia32_vec)	tb="$tb efi-app-ia32.lo peigen.lo cofflink.lo" ;;
    bfd_efi_app_ia64_vec)	tb="$tb efi-app-ia64.lo pepigen.lo cofflink.lo"
  				target64=true ;;
a442 8
    bfd_elf64_hppa_vec | bfd_elf64_hppa_linux_vec)
				tb="$tb elf64-hppa.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf64_ia64_little_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf64_ia64_big_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"
				target64=true ;;
    bfd_elf32_ia64_big_vec)	tb="$tb elf32-ia64.lo elf32.lo $elf" ;;
a453 2
    bfd_elf32_cris_vec)		tb="$tb elf32-cris.lo elf32.lo $elf" ;;
    bfd_elf32_us_cris_vec)	tb="$tb elf32-cris.lo elf32.lo $elf" ;;
d457 1
a457 2
    bfd_elf32_hppa_vec | bfd_elf32_hppa_linux_vec)
				tb="$tb elf32-hppa.lo elf32.lo $elf" ;;
a459 2
    bfd_elf64_x86_64_vec)	tb="$tb elf64-x86-64.lo elf64.lo $elf"
				target64=true ;;
a460 1
    bfd_elf32_i860_little_vec)	tb="$tb elf32-i860.lo elf32.lo $elf" ;;
a466 2
    bfd_elf32_m68hc11_vec)	tb="$tb elf32-m68hc11.lo elf32.lo $elf" ;;
    bfd_elf32_m68hc12_vec)	tb="$tb elf32-m68hc12.lo elf32.lo $elf" ;;
a478 2
    bfd_elf32_shlin_vec)	tb="$tb elf32-sh-lin.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shblin_vec)	tb="$tb elf32-sh-lin.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
a479 2
    bfd_elf32_tradbigmips_vec)  tb="$tb elf32-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf32_tradlittlemips_vec) tb="$tb elf32-mips.lo elf32.lo $elf ecofflink.lo" ;;
a486 4
    bfd_elf64_tradbigmips_vec)	tb="$tb elf64-mips.lo elf64.lo $elf ecofflink.lo"
				target64=true ;;
    bfd_elf64_tradlittlemips_vec) tb="$tb elf64-mips.lo elf64.lo $elf ecofflink.lo"
				target64=true ;;
a488 1
    cris_aout_vec)		tb="$tb aout-cris.lo" ;;
d531 2
a532 2
    mipslpe_vec)		tb="$tb pe-mips.lo peigen.lo cofflink.lo" ;;
    mipslpei_vec)		tb="$tb pei-mips.lo peigen.lo cofflink.lo" ;;
a538 2
    rs6000coff64_vec)		tb="$tb coff64-rs6000.lo xcofflink.lo"
				target64=true ;;
d557 2
a558 2
    shlpe_vec)			tb="$tb pe-sh.lo coff-sh.lo peigen.lo cofflink.lo" ;;
    shlpei_vec)			tb="$tb pei-sh.lo coff-sh.lo peigen.lo cofflink.lo" ;;
a571 6
    tic54x_coff0_vec)		tb="$tb coff-tic54x.lo" ;;
    tic54x_coff0_beh_vec)	tb="$tb coff-tic54x.lo" ;;
    tic54x_coff1_vec)		tb="$tb coff-tic54x.lo" ;;
    tic54x_coff1_beh_vec)	tb="$tb coff-tic54x.lo" ;;
    tic54x_coff2_vec)		tb="$tb coff-tic54x.lo" ;;
    tic54x_coff2_beh_vec)	tb="$tb coff-tic54x.lo" ;;
d666 1
a666 2
[sed -e '/SRC-POTFILES =/r po/SRC-POTFILES' -e '/BLD-POTFILES =/r po/BLD-POTFILES' po/Makefile.in > po/Makefile])

@


1.1.1.9
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d10 1
a10 15
AM_INIT_AUTOMAKE(bfd, 2.14)
# Uncomment the next line to remove the date from the reported bfd version
#is_release=y

changequote(,)dnl
bfd_version=`echo "${VERSION}" | sed -e 's/\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\).*/\1.00\2.00\3.00\4.00\5/' -e 's/\([^\.]*\)\..*\(..\)\..*\(..\)\..*\(..\)\..*\(..\)$/\1\2\3\4\5/'`
changequote([,])dnl

bfd_version_string="\"${VERSION}\""
if test x${is_release} = x; then
  bfd_version_date=`sed -n -e 's/.*DATE //p' < ${srcdir}/version.h`
  bfd_version_string="\"${VERSION} ${bfd_version_date}\""
fi
AC_SUBST(bfd_version)
AC_SUBST(bfd_version_string)
d53 1
a53 1
build_warnings="-W -Wall -Wstrict-prototypes -Wmissing-prototypes"
d69 1
a69 1
if test "x${build_warnings}" != x && test "x$GCC" = xyes ; then
d79 1
a81 1
AM_INSTALL_LIBBFD
a85 1
bfd_default_target_size=32
d91 1
a91 1
ALL_LINGUAS="fr tr ja es sv da zh_CN"
d145 1
a145 3
  alpha*-*-netbsd* | alpha*-*-openbsd*)
	COREFILE=netbsd-core.lo
	;;
a147 1
  arm-*-netbsd*)	COREFILE=netbsd-core.lo ;;
d154 1
a154 1
  i370-*-*)
d173 1
a173 6
  i[3456]86-*-bsdi)
changequote([,])dnl
	COREFILE=
	;;
changequote(,)dnl
  i[3456]86-*-bsd* | i[34567]86-*-freebsd[123] | i[34567]86-*-freebsd[123]\.* | i[34567]86-*-freebsd4\.[01234]* | i[34567]86-*-freebsd*aout*)
d285 2
a286 5
  m88*-*-sysv4*)
	;;
  m88*-motorola-sysv*)
	COREFILE=ptrace-core.lo
	;;
d298 1
a298 7
  rs6000-*-lynx*)
  	COREFILE=lynx-core.lo
	;;
  rs6000-*-aix5.* | powerpc-*-aix5.*)
        COREFILE=rs6000-core.lo
	COREFLAG="$COREFLAG -DAIX_5_CORE -DAIX_CORE_DUMPX_CORE"
	;;
a303 8
	# Not all versions of AIX with -DAIX_CORE_DUMPX_CORE
	# have c_impl as a member of struct core_dumpx
	AC_MSG_CHECKING([for c_impl in struct core_dumpx])
	AC_TRY_COMPILE([#include <core.h>],
	  [struct core_dumpx c; c.c_impl = 0;],
	  [AC_DEFINE(HAVE_ST_C_IMPL, 1,
	    [Define if struct core_dumpx has member c_impl])
	  AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)])
d313 1
a313 3
  s390*-*-*)            COREFILE=trad-core.lo ;;
  sh*-*-netbsd*)	COREFILE=netbsd-core.lo ;;
  sparc-*-netbsd* | sparc*-*-openbsd*)
a319 1
  vax-*-netbsd*)	COREFILE=netbsd-core.lo ;;
a331 1
  x86_64-*-netbsd*)	COREFILE=netbsd-core.lo ;;
a386 20
*-*-linux*)
  # We borrow WIN32LIBADD so that the shared libbfd won't depend on
  # libiberty.a.
  case "${host}" in
  mips*-*-linux*)
    # Linux/MIPS uses PIC by default.
    if test "$enable_shared" = "yes"; then
      WIN32LIBADD="-L../libiberty -liberty"
    fi
    ;;
  *)
changequote(,)dnl
    x=`sed -n -e 's/^[ 	]*PICFLAG[ 	]*=[ 	]*//p' < ../libiberty/Makefile | sed -n '$p'`
changequote([,])dnl
    if test -n "$x"; then
      WIN32LIBADD="-L../libiberty/pic -liberty"
    fi
  ;;
  esac
  ;;
a409 1
assocvecs=
a415 1
	assocvecs="$assocvecs $targ_defvec $targ_selvecs"
a445 11
# uniq the associated vectors in all the configured targets.
f=""
for i in $assocvecs ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
assocvecs="$f"


d459 1
a459 1
elf="elf.lo elflink.lo elf-strtab.lo elf-eh-frame.lo dwarf1.lo"
a462 1
    target_size=32
d465 1
a465 2
    # with the two vector lists in targets.c.  For the same reason,
    # use one entry per line, even though this leads to long lines.
d468 11
a478 1
    aix5coff64_vec)		tb="$tb coff64-rs6000.lo xcofflink.lo aix5ppc-core.lo"; target_size=64 ;;
a484 11
    arm_epoc_pe_big_vec)	tb="$tb epoc-pe-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pe_little_vec)	tb="$tb epoc-pe-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pei_big_vec)	tb="$tb epoc-pei-arm.lo peigen.lo cofflink.lo " ;;
    arm_epoc_pei_little_vec)	tb="$tb epoc-pei-arm.lo peigen.lo cofflink.lo " ;;
    armcoff_big_vec)		tb="$tb coff-arm.lo cofflink.lo " ;;
    armcoff_little_vec)		tb="$tb coff-arm.lo cofflink.lo " ;;
    armnetbsd_vec)		tb="$tb armnetbsd.lo aout32.lo" ;;
    armpe_big_vec)		tb="$tb pe-arm.lo peigen.lo cofflink.lo " ;;
    armpe_little_vec)		tb="$tb pe-arm.lo peigen.lo cofflink.lo " ;;
    armpei_big_vec)		tb="$tb pei-arm.lo peigen.lo cofflink.lo " ;;
    armpei_little_vec)		tb="$tb pei-arm.lo peigen.lo cofflink.lo " ;;
d488 12
a499 1
    bfd_efi_app_ia64_vec)	tb="$tb efi-app-ia64.lo pepigen.lo cofflink.lo"; target_size=64 ;;
d501 3
a503 1
    bfd_elf32_big_generic_vec) 	tb="$tb elf32-gen.lo elf32.lo $elf" ;;
d505 1
d507 4
a510 2
    bfd_elf32_bigarm_vec)	tb="$tb elfarm-nabi.lo elf32.lo $elf" ;;
    bfd_elf32_bigmips_vec) 	tb="$tb elf32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo" ;;
d512 1
a514 1
    bfd_elf32_dlx_big_vec)	tb="$tb elf32-dlx.lo elf32.lo $elf" ;;
d516 2
a517 4
    bfd_elf32_frv_vec)		tb="$tb elf32-frv.lo elf32.lo $elf" ;;
    bfd_elf32_h8300_vec)	tb="$tb elf32-h8300.lo elf32.lo $elf" ;;
    bfd_elf32_hppa_linux_vec)	tb="$tb elf32-hppa.lo elf32.lo $elf" ;;
    bfd_elf32_hppa_vec)		tb="$tb elf32-hppa.lo elf32.lo $elf" ;;
a518 1
    bfd_elf32_i386_freebsd_vec)	tb="$tb elf32-i386.lo elf32.lo $elf" ;;
d520 3
a523 1
    bfd_elf32_i860_vec)		tb="$tb elf32-i860.lo elf32.lo $elf" ;;
a524 4
    bfd_elf32_ia64_big_vec)	tb="$tb elf32-ia64.lo elf32.lo $elf" ;;
    bfd_elf32_ia64_hpux_big_vec) tb="$tb elf32-ia64.lo elf32.lo $elf";;
    bfd_elf32_ip2k_vec)		tb="$tb elf32-ip2k.lo elf32.lo $elf" ;;
    bfd_elf32_iq2000_vec)       tb="$tb elf32-iq2000.lo elf32.lo $elf" ;;
d526 3
a528 4
    bfd_elf32_littlearc_vec)	tb="$tb elf32-arc.lo elf32.lo $elf" ;;
    bfd_elf32_littlearm_oabi_vec) tb="$tb elfarm-oabi.lo elf32.lo $elf" ;;
    bfd_elf32_littlearm_vec)	tb="$tb elfarm-nabi.lo elf32.lo $elf" ;;
    bfd_elf32_littlemips_vec) 	tb="$tb elf32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo" ;;
d530 2
a531 2
    bfd_elf32_m68hc11_vec)	tb="$tb elf32-m68hc11.lo elf32-m68hc1x.lo elf32.lo $elf" ;;
    bfd_elf32_m68hc12_vec)	tb="$tb elf32-m68hc12.lo elf32-m68hc1x.lo elf32.lo $elf" ;;
a537 7
    bfd_elf32_msp430_vec)	tb="$tb elf32-msp430.lo elf32.lo $elf" ;;
    bfd_elf32_nbigmips_vec)	tb="$tb elfn32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf32_nlittlemips_vec)	tb="$tb elfn32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf32_ntradbigmips_vec)	tb="$tb elfn32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf32_ntradlittlemips_vec) tb="$tb elfn32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf32_openrisc_vec)	tb="$tb elf32-openrisc.lo elf32.lo $elf" ;;
    bfd_elf32_or32_big_vec)	tb="$tb elf32-or32.lo elf32.lo $elf" ;;
a541 10
    bfd_elf32_s390_vec)		tb="$tb elf32-s390.lo elf32.lo $elf" ;;
    # FIXME: We include cofflink.lo not because it's needed for
    # bfd_elf32_sh64[l]_vec, but because we include bfd_elf32_sh[l]_vec
    # which needs it but does not list it.  Should be fixed in right place.
    bfd_elf32_sh64_vec)		tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" target_size=64 ;;
    bfd_elf32_sh64l_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" target_size=64 ;;
    bfd_elf32_sh64lin_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" target_size=64 ;;
    bfd_elf32_sh64blin_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" target_size=64 ;;
    bfd_elf32_sh64lnbsd_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" ;;
    bfd_elf32_sh64nbsd_vec)	tb="$tb elf32-sh64.lo elf32-sh64-com.lo elf32.lo $elf cofflink.lo" ;;
a542 1
    bfd_elf32_shblin_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
d544 2
a545 3
    bfd_elf32_shlin_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shlnbsd_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
    bfd_elf32_shnbsd_vec)	tb="$tb elf32-sh.lo elf32.lo $elf coff-sh.lo cofflink.lo" ;;
d547 2
a548 3
    bfd_elf32_tradbigmips_vec)  tb="$tb elf32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf32_tradlittlemips_vec) tb="$tb elf32-mips.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo" ;;
    bfd_elf32_us_cris_vec)	tb="$tb elf32-cris.lo elf32.lo $elf" ;;
d550 12
a561 36
    bfd_elf32_vax_vec)		tb="$tb elf32-vax.lo elf32.lo $elf" ;;
    bfd_elf32_xstormy16_vec)	tb="$tb elf32-xstormy16.lo elf32.lo $elf" ;;
    bfd_elf32_xtensa_le_vec)	tb="$tb xtensa-isa.lo xtensa-modules.lo elf32-xtensa.lo elf32.lo $elf" ;;
    bfd_elf32_xtensa_be_vec)	tb="$tb xtensa-isa.lo xtensa-modules.lo elf32-xtensa.lo elf32.lo $elf" ;;
    bfd_elf64_alpha_freebsd_vec) tb="$tb elf64-alpha.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_alpha_vec)	tb="$tb elf64-alpha.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_big_generic_vec) 	tb="$tb elf64-gen.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_bigmips_vec) 	tb="$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf64_hppa_linux_vec)	tb="$tb elf64-hppa.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_hppa_vec)		tb="$tb elf64-hppa.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_aix_big_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_aix_little_vec) tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_big_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_hpux_big_vec) tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_ia64_little_vec)	tb="$tb elf64-ia64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_little_generic_vec) tb="$tb elf64-gen.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_littlemips_vec) 	tb="$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf64_mmix_vec) 	tb="$tb elf64-mmix.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_powerpc_vec)	tb="$tb elf64-ppc.lo elf64-gen.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_powerpcle_vec)	tb="$tb elf64-ppc.lo elf64-gen.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_s390_vec)		tb="$tb elf64-s390.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_sh64_vec)		tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64l_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64lin_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64blin_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64lnbsd_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sh64nbsd_vec)	tb="$tb elf64-sh64.lo elf64.lo $elf" target_size=64 ;;
    bfd_elf64_sparc_vec)	tb="$tb elf64-sparc.lo elf64.lo $elf"; target_size=64 ;;
    bfd_elf64_tradbigmips_vec)	tb="$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf64_tradlittlemips_vec) tb="$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf32.lo $elf ecofflink.lo"; target_size=64 ;;
    bfd_elf64_x86_64_vec)	tb="$tb elf64-x86-64.lo elf64.lo $elf"; target_size=64 ;;
    bfd_mmo_vec)		tb="$tb mmo.lo" target_size=64 ;;
    bfd_powerpc_pe_vec)         tb="$tb pe-ppc.lo peigen.lo cofflink.lo" ;;
    bfd_powerpc_pei_vec)        tb="$tb pei-ppc.lo peigen.lo cofflink.lo" ;;
    bfd_powerpcle_pe_vec)       tb="$tb pe-ppc.lo peigen.lo cofflink.lo" ;;
    bfd_powerpcle_pei_vec)      tb="$tb pei-ppc.lo peigen.lo cofflink.lo" ;;
d563 2
a564 1
    demo_64_vec)		tb="$tb demo64.lo aout64.lo"; target_size=64 ;;
d566 1
d568 2
a569 2
    ecoff_little_vec)		tb="$tb coff-mips.lo ecoff.lo ecofflink.lo" ;;
    ecoffalpha_little_vec)	tb="$tb coff-alpha.lo ecoff.lo ecofflink.lo"; target_size=64 ;;
d582 3
a588 1
    i386msdos_vec)		tb="$tb i386msdos.lo" ;;
a590 2
    i386pe_vec)			tb="$tb pe-i386.lo peigen.lo cofflink.lo" ;;
    i386pei_vec)		tb="$tb pei-i386.lo peigen.lo cofflink.lo" ;;
a594 2
    m68k4knetbsd_vec)		tb="$tb m68k4knetbsd.lo aout32.lo" ;;
    m68kaux_coff_vec)		tb="$tb coff-aux.lo coff-m68k.lo cofflink.lo" ;;
d601 2
d605 2
a606 4
    m88kmach3_vec)		tb="$tb m88kmach3.lo aout32.lo" ;;
    mach_o_be_vec)              tb="$tb mach-o.lo" ;;
    mach_o_le_vec)              tb="$tb mach-o.lo" ;;
    mach_o_fat_vec)             tb="$tb mach-o.lo" ;;
a610 2
    mipslpe_vec)		tb="$tb pe-mips.lo peigen.lo cofflink.lo" ;;
    mipslpei_vec)		tb="$tb pei-mips.lo peigen.lo cofflink.lo" ;;
a611 1
    nlm32_alpha_vec)		tb="$tb nlm32-alpha.lo nlm32.lo nlm.lo"; target_size=64 ;;
d613 6
d620 1
a620 2
    nlm32_sparc_vec)		tb="$tb nlm32-sparc.lo nlm32.lo nlm.lo" ;;
    or32coff_big_vec)		tb="$tb coff-or32.lo cofflink.lo" ;;
d622 6
a627 5
    pc532netbsd_vec)		tb="$tb ns32knetbsd.lo aout-ns32k.lo" ;;
    pef_vec)                    tb="$tb pef.lo" ;;
    pef_xlib_vec)               tb="$tb pef.lo" ;;
    pdp11_aout_vec)		tb="$tb pdp11.lo" ;;
    pmac_xcoff_vec)		tb="$tb coff-rs6000.lo xcofflink.lo" ;;
d629 2
a630 3
    riscix_vec)			tb="$tb aout32.lo riscix.lo" ;;
    rs6000coff64_vec)		tb="$tb coff64-rs6000.lo xcofflink.lo aix5ppc-core.lo"; target_size=64 ;;
    rs6000coff_vec)		tb="$tb coff-rs6000.lo xcofflink.lo" ;;
a631 1
    shcoff_vec)			tb="$tb coff-sh.lo cofflink.lo" ;;
a632 1
    shlcoff_vec)		tb="$tb coff-sh.lo cofflink.lo" ;;
a635 1
    sparccoff_vec)		tb="$tb coff-sparc.lo" ;;
d641 2
d644 2
a645 1
    sym_vec)                    tb="$tb xsym.lo" ;;
d648 1
a648 6
    tic4x_coff0_vec)            tb="$tb coff-tic4x.lo" ;;
    tic4x_coff0_beh_vec)        tb="$tb coff-tic4x.lo" ;;
    tic4x_coff1_vec)            tb="$tb coff-tic4x.lo" ;;
    tic4x_coff1_beh_vec)        tb="$tb coff-tic4x.lo" ;;
    tic4x_coff2_vec)            tb="$tb coff-tic4x.lo" ;;
    tic4x_coff2_beh_vec)        tb="$tb coff-tic4x.lo" ;;
d650 1
a650 1
    tic54x_coff0_vec)		tb="$tb coff-tic54x.lo" ;;
d652 1
a652 1
    tic54x_coff1_vec)		tb="$tb coff-tic54x.lo" ;;
a653 1
    tic54x_coff2_vec)		tb="$tb coff-tic54x.lo" ;;
a654 3
    vaxnetbsd_vec)		tb="$tb vaxnetbsd.lo aout32.lo" ;;
    vax1knetbsd_vec)		tb="$tb vax1knetbsd.lo aout32.lo" ;;
    vaxbsd_vec)			tb="$tb vaxbsd.lo aout32.lo" ;;
d656 2
a657 1
    vms_alpha_vec)		tb="$tb vms.lo vms-hdr.lo vms-gsd.lo vms-tir.lo vms-misc.lo"; target_size=64 ;;
a662 7
    # These appear out of order in targets.c
    srec_vec)			tb="$tb srec.lo" ;;
    symbolsrec_vec)		tb="$tb srec.lo" ;;
    tekhex_vec)			tb="$tb tekhex.lo" ;;
    cisco_core_big_vec)		tb="$tb cisco-core.lo" ;;
    cisco_core_little_vec)	tb="$tb cisco-core.lo" ;;

a665 7

    if test ${target_size} = 64; then
	target64=true
    fi
    if test x"${vec}" = x"${defvec}"; then
	bfd_default_target_size=${target_size}
    fi
a700 2
  test -n "$assocvecs" &&
    assocvecs=`echo $assocvecs | sed -e 's/^/\&/' -e 's/ \(.\)/,\&\1/g'`
a703 1
  assocvecs=
a714 1
    bfd_libs='$(BFD64_LIBS) $(BFD32_LIBS)'
a719 12
    if test -n "$GCC" ; then
       bad_64bit_gcc=no;
       AC_MSG_CHECKING([for gcc version with buggy 64-bit support])
       # Add more tests for gcc versions with non-working 64-bit support here.
       AC_EGREP_CPP([: 2 : 91 : 1 :],[:__GNUC__:__GNUC_MINOR__:__i386__:],
		    bad_64bit_gcc=yes;
		    AC_MSG_RESULT([yes: egcs-1.1.2 on ix86 spotted]),
		    AC_MSG_RESULT(no))
       if test $bad_64bit_gcc = yes ; then
	 AC_ERROR([A newer version of gcc is needed for the requested 64-bit BFD configuration])
       fi
    fi
a722 1
    bfd_libs='$(BFD32_LIBS)'
a727 1
AC_SUBST(bfd_libs)
a730 1
AC_SUBST(bfd_default_target_size)
a734 1
test -n "${assocvecs}" && tdefaults="${tdefaults} -DASSOCIATED_VECS='${assocvecs}'"
d747 1
a747 1
AC_OUTPUT(Makefile doc/Makefile bfd-in3.h:bfd-in2.h bfdver.h:version.h po/Makefile.in:po/Make-in,
@


1.1.1.10
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d10 1
a10 1
AM_INIT_AUTOMAKE(bfd, 2.15)
d12 1
a12 1
is_release=y
d106 1
a106 1
ALL_LINGUAS="fr tr ja es sv da zh_CN ro"
a115 1
BFD_HOST_LONG_LONG=0
d119 1
a119 15

AC_MSG_CHECKING([for long long])
AC_CACHE_VAL(bfd_cv_has_long_long,
[AC_TRY_COMPILE(,
[unsigned long long ll = 18446744073709551615ULL;],
bfd_cv_has_long_long=yes, bfd_cv_has_long_long=no)])
AC_MSG_RESULT($bfd_cv_has_long_long)
if test $bfd_cv_has_long_long = yes; then
  BFD_HOST_LONG_LONG=1
  AC_COMPILE_CHECK_SIZEOF(long long)
fi

AC_COMPILE_CHECK_SIZEOF(long)
if test "x${ac_cv_sizeof_long}" = "x8"; then
  host64=true
d121 1
a121 8
  test -n "${HOST_64BIT_TYPE}" || HOST_64BIT_TYPE="long"
  test -n "${HOST_U_64BIT_TYPE}" || HOST_U_64BIT_TYPE="unsigned long"
elif test "x${ac_cv_sizeof_long_long}" = "x8"; then
  test -n "${HOST_64BIT_TYPE}" || HOST_64BIT_TYPE="long long"
  test -n "${HOST_U_64BIT_TYPE}" || HOST_U_64BIT_TYPE="unsigned long long"
fi

if test -n "${HOST_64BIT_TYPE}" -a -n "${HOST_U_64BIT_TYPE}"; then
d123 2
a124 2
  BFD_HOST_64_BIT="${HOST_64BIT_TYPE}"
  BFD_HOST_U_64_BIT="${HOST_U_64BIT_TYPE}"
a125 1

a126 1
AC_SUBST(BFD_HOST_LONG_LONG)
a137 1
AC_CHECK_FUNCS(strtoull)
d153 1
a153 1
  alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu)
d164 1
a164 2
  arm-*-freebsd* | arm-*-kfreebsd*-gnu)
			COREFILE='' ;;
d178 1
a178 1
  i[3-7]86-sequent-bsd*)
d184 2
a185 2
  i[3-7]86-sequent-sysv4*) ;;
  i[3-7]86-sequent-sysv*)
d191 1
a191 1
  i[3-7]86-*-bsdi)
d196 1
a196 1
  i[3-7]86-*-bsd* | i[3-7]86-*-freebsd[123] | i[3-7]86-*-freebsd[123]\.* | i[3-7]86-*-freebsd4\.[01234]* | i[3-7]86-*-freebsd*aout*)
d202 1
a202 1
  i[3-7]86-*-freebsd* | i[3-7]86-*-kfreebsd*-gnu)
d208 1
a208 1
  i[3-7]86-*-netbsd* | i[3-7]86-*-knetbsd*-gnu | i[3-7]86-*-openbsd*)
d213 1
a213 1
  i[3-7]86-esix-sysv3*)
d219 1
a219 1
  i[3-7]86-*-sco3.2v5*)
d224 1
a224 1
  i[3-7]86-*-sco* | i[3-7]86-*-isc*)
d230 1
a230 1
  i[3-7]86-*-mach3*)
d236 1
a236 1
  i[3-7]86-*-linux-gnu*)
d242 2
a243 2
  i[3-7]86-*-isc*)	COREFILE=trad-core.lo ;;
  i[3-7]86-*-aix*)	COREFILE=aix386-core.lo ;;
d249 8
d267 4
d350 1
a350 2
  powerpc-*-freebsd* | powerpc-*-kfreebsd*-gnu)
		        COREFILE='' ;;
d362 1
a362 3
  vax-*-netbsd* | vax-*-openbsd*)
  	COREFILE=netbsd-core.lo
	;;
a370 4
  vax-*-linux-gnu*)
	COREFILE=trad-core.lo
	TRAD_HEADER='"hosts/vaxlinux.h"'
	;;
d375 1
a375 3
  x86_64-*-netbsd* | x86_64-*-openbsd*)
	COREFILE=netbsd-core.lo
	;;
d551 2
a568 1
    bfd_elf32_am33lin_vec)	tb="$tb elf32-am33lin.lo elf32.lo $elf" ;;
a580 1
    bfd_elf32_frvfdpic_vec)	tb="$tb elf32-frv.lo elf32.lo $elf" ;;
a599 3
    bfd_elf32_m32rle_vec)       tb="$tb elf32-m32r.lo elf32.lo $elf" ;;
    bfd_elf32_m32rlin_vec)      tb="$tb elf32-m32r.lo elf32.lo $elf" ;;
    bfd_elf32_m32rlelin_vec)    tb="$tb elf32-m32r.lo elf32.lo $elf" ;;
d650 2
d854 1
a854 1
    if test $BFD_HOST_64_BIT_DEFINED = 0; then
a883 22

# Determine the host dependant file_ptr a.k.a. off_t type.  In order
# prefer: off64_t - if ftello64 and fseeko64, off_t - if ftello and
# fseeko, long.  This assumes that sizeof off_t is .ge. sizeof long.
# Hopefully a reasonable assumption since fseeko et.al. should be
# upward compatible.
AC_CHECK_FUNCS(ftello ftello64 fseeko fseeko64)
if test x"$ac_cv_func_ftello" = xyes -a x"$ac_cv_func_fseeko" = xyes; then
    AC_COMPILE_CHECK_SIZEOF(off_t)
fi
AC_MSG_CHECKING([file_ptr type])
bfd_file_ptr="long"
bfd_ufile_ptr="unsigned long"
if test x"$ac_cv_func_ftello64" = xyes -a x"$ac_cv_func_fseeko64" = xyes \
	-o x"${ac_cv_sizeof_off_t}" = x8; then
    bfd_file_ptr=BFD_HOST_64_BIT
    bfd_ufile_ptr=BFD_HOST_U_64_BIT
fi
AC_MSG_RESULT($bfd_file_ptr)
AC_SUBST(bfd_file_ptr)
AC_SUBST(bfd_ufile_ptr)

@


