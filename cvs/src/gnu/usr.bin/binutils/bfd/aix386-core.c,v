head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.50
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.52
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.48
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.44
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.46
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.38
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.42
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.40
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.36
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.34
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.32
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	OPENBSD_5_0:1.7.0.28
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	BINUTILS_2_15:1.1.1.8
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.7
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.6
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.5
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.5
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	new-binutils:1.3.0.14
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	BINUTILS-2_8_1:1.1.1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	CYGNUS-961112:1.1.1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.11.02.20.45.02;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.17.21.54.19;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.28;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.19.11.04;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.03.32.35;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.42.44;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.20;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.20;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.04.40;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.11.19.14.11.53;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.05.29.09.17.28;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2000.09.12.14.45.20;	author espie;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2002.05.13.13.19.31;	author fgsch;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.05.17.20.42.09;	author drahn;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.11.02.20.22.11;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* BFD back-end for AIX on PS/2 core files.
   This was based on trad-core.c, which was written by John Gilmore of
        Cygnus Support.
   Copyright 1988, 1989, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2000,
   2001, 2002, 2004
   Free Software Foundation, Inc.
   Written by Minh Tran-Le <TRANLE@@INTELLICORP.COM>.
   Converted to back end form by Ian Lance Taylor <ian@@cygnus.com>.

This file is part of BFD, the Binary File Descriptor library.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "libbfd.h"
#include "coff/i386.h"
#include "coff/internal.h"
#include "libcoff.h"

#include <signal.h>

#if defined (_AIX) && defined (_I386)
#define NOCHECKS		/* This is for coredump.h.  */
#define _h_USER			/* Avoid including user.h from coredump.h.  */
#include <uinfo.h>
#include <sys/i386/coredump.h>
#endif /* _AIX && _I386 */

/* Maybe this could work on some other i386 but I have not tried it
 * mtranle@@paris - Tue Sep 24 12:49:35 1991
 */

#ifndef COR_MAGIC
# define COR_MAGIC "core"
#endif

/* Need this cast because ptr is really void *.  */
#define core_hdr(bfd) \
    (((bfd->tdata.trad_core_data))->hdr)
#define core_section(bfd,n) \
    (((bfd)->tdata.trad_core_data)->sections[n])
#define core_regsec(bfd) \
    (((bfd)->tdata.trad_core_data)->reg_section)
#define core_reg2sec(bfd) \
    (((bfd)->tdata.trad_core_data)->reg2_section)

/* These are stored in the bfd's tdata.  */
struct trad_core_struct {
  struct corehdr *hdr;		/* core file header */
  asection *reg_section;
  asection *reg2_section;
  asection *sections[MAX_CORE_SEGS];
};

static void swap_abort PARAMS ((void));

static const bfd_target *
aix386_core_file_p (abfd)
     bfd *abfd;
{
  int i, n;
  unsigned char longbuf[4];	/* Raw bytes of various header fields */
  bfd_size_type core_size = sizeof (struct corehdr);
  bfd_size_type amt;
  struct corehdr *core;
  struct mergem {
    struct trad_core_struct coredata;
    struct corehdr internal_core;
  } *mergem;

  amt = sizeof (longbuf);
  if (bfd_bread ((PTR) longbuf, amt, abfd) != amt)
    {
      if (bfd_get_error () != bfd_error_system_call)
	bfd_set_error (bfd_error_wrong_format);
      return 0;
    }

  if (strncmp (longbuf, COR_MAGIC, 4))
    return 0;

  if (bfd_seek (abfd, (file_ptr) 0, 0) != 0)
    return 0;

  amt = sizeof (struct mergem);
  mergem = (struct mergem *) bfd_zalloc (abfd, amt);
  if (mergem == NULL)
    return 0;

  core = &mergem->internal_core;

  if ((bfd_bread ((PTR) core, core_size, abfd)) != core_size)
    {
      if (bfd_get_error () != bfd_error_system_call)
	bfd_set_error (bfd_error_wrong_format);
    loser:
      bfd_release (abfd, (char *) mergem);
      abfd->tdata.any = NULL;
      bfd_section_list_clear (abfd);
      return 0;
    }

  set_tdata (abfd, &mergem->coredata);
  core_hdr (abfd) = core;

  /* Create the sections.  */
  core_regsec (abfd) = bfd_make_section_anyway (abfd, ".reg");
  if (core_regsec (abfd) == NULL)
    goto loser;

  core_regsec (abfd)->flags = SEC_HAS_CONTENTS;
  core_regsec (abfd)->_raw_size = sizeof (core->cd_regs);
  core_regsec (abfd)->vma = (bfd_vma) -1;

  /* We'll access the regs afresh in the core file, like any section.  */
  core_regsec (abfd)->filepos =
    (file_ptr) offsetof (struct corehdr, cd_regs[0]);

  core_reg2sec (abfd) = bfd_make_section_anyway (abfd, ".reg2");
  if (core_reg2sec (abfd) == NULL)
    /* bfd_release frees everything allocated after it's arg.  */
    goto loser;

  core_reg2sec (abfd)->flags = SEC_HAS_CONTENTS;
  core_reg2sec (abfd)->_raw_size = sizeof (core->cd_fpregs);
  core_reg2sec (abfd)->vma = (bfd_vma) -1;
  core_reg2sec (abfd)->filepos =
    (file_ptr) offsetof (struct corehdr, cd_fpregs);

  for (i = 0, n = 0; (i < MAX_CORE_SEGS) && (core->cd_segs[i].cs_type); i++)
    {
      const char *sname;
      flagword flags;

      if (core->cd_segs[i].cs_offset == 0)
	continue;

      switch (core->cd_segs[i].cs_type)
	{
	case COR_TYPE_DATA:
	  sname = ".data";
	  flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
	  break;
	case COR_TYPE_STACK:
	  sname = ".stack";
	  flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
	  break;
	case COR_TYPE_LIBDATA:
	  sname = ".libdata";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	case COR_TYPE_WRITE:
	  sname = ".writeable";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	case COR_TYPE_MSC:
	  sname = ".misc";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	default:
	  sname = ".unknown";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
	  break;
	}
      core_section (abfd, n) = bfd_make_section_anyway (abfd, sname);
      if (core_section (abfd, n) == NULL)
	goto loser;

      core_section (abfd, n)->flags = flags;
      core_section (abfd, n)->_raw_size = core->cd_segs[i].cs_len;
      core_section (abfd, n)->vma       = core->cd_segs[i].cs_address;
      core_section (abfd, n)->filepos   = core->cd_segs[i].cs_offset;
      core_section (abfd, n)->alignment_power = 2;
      n++;
    }

  return abfd->xvec;
}

static char *
aix386_core_file_failing_command (abfd)
     bfd *abfd;
{
  return core_hdr (abfd)->cd_comm;
}

static int
aix386_core_file_failing_signal (abfd)
     bfd *abfd;
{
  return core_hdr (abfd)->cd_cursig;
}

static bfd_boolean
aix386_core_file_matches_executable_p (core_bfd, exec_bfd)
     bfd *core_bfd;
     bfd *exec_bfd;
{
  /* FIXME: We have no way of telling at this point.  */
  return TRUE;
}

/* If somebody calls any byte-swapping routines, shoot them.  */

static void
swap_abort ()
{
  /* This way doesn't require any declaration for ANSI to fuck up.  */
  abort ();
}

#define	NO_GET ((bfd_vma (*) (const void *)) swap_abort)
#define	NO_PUT ((void (*) (bfd_vma, void *)) swap_abort)
#define	NO_GETS ((bfd_signed_vma (*) (const void *)) swap_abort)
#define	NO_GET64 ((bfd_uint64_t (*) (const void *)) swap_abort)
#define	NO_PUT64 ((void (*) (bfd_uint64_t, void *)) swap_abort)
#define	NO_GETS64 ((bfd_int64_t (*) (const void *)) swap_abort)

const bfd_target aix386_core_vec = {
  "aix386-core",
  bfd_target_unknown_flavour,
  BFD_ENDIAN_BIG,		/* target byte order */
  BFD_ENDIAN_BIG,		/* target headers byte order */
  (HAS_RELOC | EXEC_P |		/* object flags */
   HAS_LINENO | HAS_DEBUG |
   HAS_SYMS | HAS_LOCALS | WP_TEXT),

  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC), /* section flags */
  0,				/* leading underscore */
  ' ',				/* ar_pad_char */
  16,				/* ar_max_namelen */
  NO_GET64, NO_GETS64, NO_PUT64,
  NO_GET, NO_GETS, NO_PUT,
  NO_GET, NO_GETS, NO_PUT,	/* data */
  NO_GET64, NO_GETS64, NO_PUT64,
  NO_GET, NO_GETS, NO_PUT,
  NO_GET, NO_GETS, NO_PUT,	/* hdrs */

  {_bfd_dummy_target, _bfd_dummy_target,
   _bfd_dummy_target, aix386_core_file_p},
  {bfd_false, bfd_false,	/* bfd_create_object */
   bfd_false, bfd_false},
  {bfd_false, bfd_false,	/* bfd_write_contents */
   bfd_false, bfd_false},

  BFD_JUMP_TABLE_GENERIC (_bfd_generic),
  BFD_JUMP_TABLE_COPY (_bfd_generic),
  BFD_JUMP_TABLE_CORE (aix386),
  BFD_JUMP_TABLE_ARCHIVE (_bfd_noarchive),
  BFD_JUMP_TABLE_SYMBOLS (_bfd_nosymbols),
  BFD_JUMP_TABLE_RELOCS (_bfd_norelocs),
  BFD_JUMP_TABLE_WRITE (_bfd_generic),
  BFD_JUMP_TABLE_LINK (_bfd_nolink),
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),

  NULL,

  (PTR) 0
};
@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d5 1
a5 1
   2001, 2002
d225 6
a230 3
#define	NO_GET	((bfd_vma (*) PARAMS ((const bfd_byte *))) swap_abort)
#define NO_GETS ((bfd_signed_vma (*) PARAMS ((const bfd_byte *))) swap_abort)
#define	NO_PUT	((void (*) PARAMS ((bfd_vma, bfd_byte *))) swap_abort)
d245 1
a245 1
  NO_GET, NO_GETS, NO_PUT,
d248 1
a248 1
  NO_GET, NO_GETS, NO_PUT,
@


1.5
log
@resolve conflicts.
@
text
@d4 2
a5 1
   Copyright 1988, 1989, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2000
d76 2
a77 1
  int core_size = sizeof (struct corehdr);
d84 2
a85 1
  if (bfd_read ((PTR) longbuf, 1, sizeof (longbuf), abfd) != sizeof (longbuf))
d95 1
a95 1
  if (bfd_seek (abfd, 0L, false) < 0)
d98 2
a99 1
  mergem = (struct mergem *) bfd_zalloc (abfd, sizeof (struct mergem));
d105 1
a105 1
  if ((bfd_read ((PTR) core, 1, core_size, abfd)) != core_size)
d109 1
d111 2
d119 2
a120 3
  /* Create the sections.  This is raunchy, but bfd_close wants to
     reclaim them.  */
  core_regsec (abfd) = (asection *) bfd_zalloc (abfd, sizeof (asection));
d122 11
a132 6
    {
    loser:
      bfd_release (abfd, (char *) mergem);
      return 0;
    }
  core_reg2sec (abfd) = (asection *) bfd_zalloc (abfd, sizeof (asection));
d134 8
a141 5
    {
    loser1:
      bfd_release (abfd, core_regsec (abfd));
      goto loser;
    }
d145 3
a149 13
      core_section (abfd, n) =
	(asection *) bfd_zalloc (abfd, sizeof (asection));
      if (core_section (abfd, n) == NULL)
	{
	  int j;
	  if (n > 0)
	    {
	      for (j = 0; j < n; j++)
		bfd_release (abfd, core_section (abfd, j));
	    }
	  bfd_release (abfd, (char *) mergem);
	  goto loser1;
	}
d154 2
a155 3
	  core_section (abfd, n)->name = ".data";
	  core_section (abfd, n)->flags = (SEC_ALLOC + SEC_LOAD +
					   SEC_HAS_CONTENTS);
d158 2
a159 3
	  core_section (abfd, n)->name = ".stack";
	  core_section (abfd, n)->flags = (SEC_ALLOC + SEC_LOAD +
					   SEC_HAS_CONTENTS);
d162 2
a163 2
	  core_section (abfd, n)->name = ".libdata";
	  core_section (abfd, n)->flags = (SEC_ALLOC + SEC_HAS_CONTENTS);
d166 2
a167 2
	  core_section (abfd, n)->name = ".writeable";
	  core_section (abfd, n)->flags = (SEC_ALLOC + SEC_HAS_CONTENTS);
d170 2
a171 2
	  core_section (abfd, n)->name = ".misc";
	  core_section (abfd, n)->flags = (SEC_ALLOC + SEC_HAS_CONTENTS);
d174 2
a175 2
	  core_section (abfd, n)->name = ".unknown";
	  core_section (abfd, n)->flags = (SEC_ALLOC + SEC_HAS_CONTENTS);
d178 5
d187 1
a187 5
      core_section (abfd, n)->next      = NULL;
      if (n > 0)
	core_section (abfd, (n - 1))->next = core_section (abfd, n);

      abfd->section_count = ++n;
a189 24
  core_regsec (abfd)->name = ".reg";
  core_reg2sec (abfd)->name = ".reg2";

  core_regsec (abfd)->flags = SEC_HAS_CONTENTS;
  core_reg2sec (abfd)->flags = SEC_HAS_CONTENTS;

  core_regsec (abfd)->_raw_size = sizeof (core->cd_regs);
  core_reg2sec (abfd)->_raw_size = sizeof (core->cd_fpregs);

  core_regsec (abfd)->vma = -1;
  core_reg2sec (abfd)->vma = -1;

  /* We'll access the regs afresh in the core file, like any section.  */
  core_regsec (abfd)->filepos =
    (file_ptr) offsetof (struct corehdr, cd_regs[0]);
  core_reg2sec (abfd)->filepos =
    (file_ptr) offsetof (struct corehdr, cd_fpregs);

  /* Add the 2 reg fake sections to abfd.  */
  abfd->section_count += 2;
  abfd->sections = core_regsec (abfd);
  core_regsec (abfd)->next = core_reg2sec (abfd);
  core_reg2sec (abfd)->next = core_section (abfd, 0);

d207 1
a207 1
static boolean
d213 1
a213 1
  return true;
d225 3
a227 3
#define	NO_GET	((PROTO(bfd_vma, (*), (       const bfd_byte *))) swap_abort )
#define NO_GETS ((PROTO(bfd_signed_vma, (*), (const bfd_byte *))) swap_abort )
#define	NO_PUT	((PROTO(void,        (*), (bfd_vma, bfd_byte *))) swap_abort )
d233 1
a233 1
  BFD_ENDIANG_BIG,		/* target headers byte order */
@


1.4
log
@Help stupid cvs fixing basic conflicts.
@
text
@d4 1
a4 1
   Copyright 1988, 89, 91, 92, 93, 94, 95, 96, 97, 1998
d35 2
a36 2
#define NOCHECKS		/* this is for coredump.h */
#define _h_USER			/* avoid including user.h from coredump.h */
d41 1
a41 1
/* maybe this could work on some other i386 but I have not tried it
d49 1
a49 1
/* need this cast because ptr is really void * */
d59 1
a59 1
/* These are stored in the bfd's tdata */
d73 1
a73 1
  int i,n;
d82 1
a82 1
  if (bfd_read ((PTR)longbuf, 1, sizeof (longbuf), abfd) != sizeof (longbuf))
d89 2
a90 1
  if (strncmp(longbuf,COR_MAGIC,4)) return 0;
d92 2
a93 1
  if (bfd_seek (abfd, 0L, false) < 0) return 0;
d95 1
a95 1
  mergem = (struct mergem *)bfd_zalloc (abfd, sizeof (struct mergem));
d105 1
a105 1
      bfd_release (abfd, (char *)mergem);
d112 2
a113 2
  /* create the sections.  This is raunchy, but bfd_close wants to reclaim
     them */
d118 1
a118 1
      bfd_release (abfd, (char *)mergem);
d125 1
a125 1
     bfd_release (abfd, core_regsec (abfd));
d129 1
a129 1
  for (i=0, n=0 ; (i < MAX_CORE_SEGS) && (core->cd_segs[i].cs_type) ; i++)
d133 1
a133 1
      core_section (abfd,n) =
d135 1
a135 1
      if (core_section (abfd,n) == NULL)
d140 2
a141 2
	      for (j=0; j < n; j++)
		bfd_release (abfd, core_section(abfd, j));
d143 1
a143 1
	  bfd_release (abfd, (char *)mergem);
d182 1
a182 1
	core_section (abfd, (n-1))->next = core_section (abfd, n);
d193 2
a194 2
  core_regsec (abfd)->_raw_size = sizeof(core->cd_regs);
  core_reg2sec (abfd)->_raw_size = sizeof(core->cd_fpregs);
d199 5
a203 4
  /* We'll access the regs afresh in the core file, like any section: */
  core_regsec (abfd)->filepos = (file_ptr)offsetof(struct corehdr,cd_regs[0]);
  core_reg2sec (abfd)->filepos = (file_ptr)offsetof(struct corehdr,
						    cd_fpregs);
d205 1
a205 1
  /* add the 2 reg fake sections to abfd */
d233 2
a234 2
  return true;			/* FIXME, We have no way of telling at this
				   point */
d238 1
d240 1
a240 1
swap_abort()
d242 2
a243 1
  abort(); /* This way doesn't require any declaration for ANSI to fuck up */
d245 1
d250 5
a254 6
const bfd_target aix386_core_vec =
  {
    "aix386-core",
    bfd_target_unknown_flavour,
    BFD_ENDIAN_BIG,		/* target byte order */
    BFD_ENDIANG_BIG,		/* target headers byte order */
d260 30
a289 30
    0,						/* leading underscore */
    ' ',					/* ar_pad_char */
    16,						/* ar_max_namelen */
    NO_GET, NO_GETS, NO_PUT,
    NO_GET, NO_GETS, NO_PUT,
    NO_GET, NO_GETS, NO_PUT, /* data */
    NO_GET, NO_GETS, NO_PUT,
    NO_GET, NO_GETS, NO_PUT,
    NO_GET, NO_GETS, NO_PUT, /* hdrs */

    {_bfd_dummy_target, _bfd_dummy_target,
     _bfd_dummy_target, aix386_core_file_p},
    {bfd_false, bfd_false,	/* bfd_create_object */
     bfd_false, bfd_false},
    {bfd_false, bfd_false,	/* bfd_write_contents */
     bfd_false, bfd_false},

     BFD_JUMP_TABLE_GENERIC (_bfd_generic),
     BFD_JUMP_TABLE_COPY (_bfd_generic),
     BFD_JUMP_TABLE_CORE (aix386),
     BFD_JUMP_TABLE_ARCHIVE (_bfd_noarchive),
     BFD_JUMP_TABLE_SYMBOLS (_bfd_nosymbols),
     BFD_JUMP_TABLE_RELOCS (_bfd_norelocs),
     BFD_JUMP_TABLE_WRITE (_bfd_generic),
     BFD_JUMP_TABLE_LINK (_bfd_nolink),
     BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),

    NULL,
    
    (PTR) 0
@


1.3
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d4 2
a5 1
   Copyright 1988, 1989, 1991, 1992, 1993, 1994 Free Software Foundation, Inc.
a27 1
#include "obstack.h"
a31 2
#include <stdio.h>
#include <stddef.h>
a33 2
#include <errno.h>

d282 2
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d71 2
d239 1
a239 1
void
@


1.1
log
@Initial revision
@
text
@d97 1
a97 4
    {
      bfd_set_error (bfd_error_no_memory);
      return 0;
    }
a117 1
      bfd_set_error (bfd_error_no_memory);
d250 2
a251 2
    true,			/* target byte order */
    true,			/* target headers byte order */
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d97 4
a100 1
    return 0;
d121 1
d254 2
a255 2
    BFD_ENDIAN_BIG,		/* target byte order */
    BFD_ENDIANG_BIG,		/* target headers byte order */
@


1.1.1.3
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a70 2
static void swap_abort PARAMS ((void));

d237 1
a237 1
static void
@


1.1.1.4
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d4 1
a4 2
   Copyright 1988, 89, 91, 92, 93, 94, 95, 96, 1997
   Free Software Foundation, Inc.
d27 1
@


1.1.1.5
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 1
   Copyright 1988, 89, 91, 92, 93, 94, 95, 96, 97, 1998
d32 2
d36 2
a285 2
    NULL,
    
@


1.1.1.6
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 1
   Copyright 1988, 1989, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2000
d35 2
a36 2
#define NOCHECKS		/* This is for coredump.h.  */
#define _h_USER			/* Avoid including user.h from coredump.h.  */
d41 1
a41 1
/* Maybe this could work on some other i386 but I have not tried it
d49 1
a49 1
/* Need this cast because ptr is really void *.  */
d59 1
a59 1
/* These are stored in the bfd's tdata.  */
d73 1
a73 1
  int i, n;
d82 1
a82 1
  if (bfd_read ((PTR) longbuf, 1, sizeof (longbuf), abfd) != sizeof (longbuf))
d89 1
a89 2
  if (strncmp (longbuf, COR_MAGIC, 4))
    return 0;
d91 1
a91 2
  if (bfd_seek (abfd, 0L, false) < 0)
    return 0;
d93 1
a93 1
  mergem = (struct mergem *) bfd_zalloc (abfd, sizeof (struct mergem));
d103 1
a103 1
      bfd_release (abfd, (char *) mergem);
d110 2
a111 2
  /* Create the sections.  This is raunchy, but bfd_close wants to
     reclaim them.  */
d116 1
a116 1
      bfd_release (abfd, (char *) mergem);
d123 1
a123 1
      bfd_release (abfd, core_regsec (abfd));
d127 1
a127 1
  for (i = 0, n = 0; (i < MAX_CORE_SEGS) && (core->cd_segs[i].cs_type); i++)
d131 1
a131 1
      core_section (abfd, n) =
d133 1
a133 1
      if (core_section (abfd, n) == NULL)
d138 2
a139 2
	      for (j = 0; j < n; j++)
		bfd_release (abfd, core_section (abfd, j));
d141 1
a141 1
	  bfd_release (abfd, (char *) mergem);
d180 1
a180 1
	core_section (abfd, (n - 1))->next = core_section (abfd, n);
d191 2
a192 2
  core_regsec (abfd)->_raw_size = sizeof (core->cd_regs);
  core_reg2sec (abfd)->_raw_size = sizeof (core->cd_fpregs);
d197 4
a200 5
  /* We'll access the regs afresh in the core file, like any section.  */
  core_regsec (abfd)->filepos =
    (file_ptr) offsetof (struct corehdr, cd_regs[0]);
  core_reg2sec (abfd)->filepos =
    (file_ptr) offsetof (struct corehdr, cd_fpregs);
d202 1
a202 1
  /* Add the 2 reg fake sections to abfd.  */
d230 2
a231 2
  /* FIXME: We have no way of telling at this point.  */
  return true;
a234 1

d236 1
a236 1
swap_abort ()
d238 1
a238 2
  /* This way doesn't require any declaration for ANSI to fuck up.  */
  abort ();
a239 1

d244 6
a249 5
const bfd_target aix386_core_vec = {
  "aix386-core",
  bfd_target_unknown_flavour,
  BFD_ENDIAN_BIG,		/* target byte order */
  BFD_ENDIANG_BIG,		/* target headers byte order */
d255 30
a284 30
  0,				/* leading underscore */
  ' ',				/* ar_pad_char */
  16,				/* ar_max_namelen */
  NO_GET, NO_GETS, NO_PUT,
  NO_GET, NO_GETS, NO_PUT,
  NO_GET, NO_GETS, NO_PUT,	/* data */
  NO_GET, NO_GETS, NO_PUT,
  NO_GET, NO_GETS, NO_PUT,
  NO_GET, NO_GETS, NO_PUT,	/* hdrs */

  {_bfd_dummy_target, _bfd_dummy_target,
   _bfd_dummy_target, aix386_core_file_p},
  {bfd_false, bfd_false,	/* bfd_create_object */
   bfd_false, bfd_false},
  {bfd_false, bfd_false,	/* bfd_write_contents */
   bfd_false, bfd_false},

  BFD_JUMP_TABLE_GENERIC (_bfd_generic),
  BFD_JUMP_TABLE_COPY (_bfd_generic),
  BFD_JUMP_TABLE_CORE (aix386),
  BFD_JUMP_TABLE_ARCHIVE (_bfd_noarchive),
  BFD_JUMP_TABLE_SYMBOLS (_bfd_nosymbols),
  BFD_JUMP_TABLE_RELOCS (_bfd_norelocs),
  BFD_JUMP_TABLE_WRITE (_bfd_generic),
  BFD_JUMP_TABLE_LINK (_bfd_nolink),
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),

  NULL,

  (PTR) 0
@


1.1.1.7
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d4 1
a4 2
   Copyright 1988, 1989, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2000,
   2001, 2002
d75 1
a75 2
  bfd_size_type core_size = sizeof (struct corehdr);
  bfd_size_type amt;
d82 1
a82 2
  amt = sizeof (longbuf);
  if (bfd_bread ((PTR) longbuf, amt, abfd) != amt)
d92 1
a92 1
  if (bfd_seek (abfd, (file_ptr) 0, 0) != 0)
d95 1
a95 2
  amt = sizeof (struct mergem);
  mergem = (struct mergem *) bfd_zalloc (abfd, amt);
d101 1
a101 1
  if ((bfd_bread ((PTR) core, core_size, abfd)) != core_size)
a104 1
    loser:
a105 2
      abfd->tdata.any = NULL;
      bfd_section_list_clear (abfd);
d112 3
a114 2
  /* Create the sections.  */
  core_regsec (abfd) = bfd_make_section_anyway (abfd, ".reg");
d116 6
a121 11
    goto loser;

  core_regsec (abfd)->flags = SEC_HAS_CONTENTS;
  core_regsec (abfd)->_raw_size = sizeof (core->cd_regs);
  core_regsec (abfd)->vma = (bfd_vma) -1;

  /* We'll access the regs afresh in the core file, like any section.  */
  core_regsec (abfd)->filepos =
    (file_ptr) offsetof (struct corehdr, cd_regs[0]);

  core_reg2sec (abfd) = bfd_make_section_anyway (abfd, ".reg2");
d123 5
a127 8
    /* bfd_release frees everything allocated after it's arg.  */
    goto loser;

  core_reg2sec (abfd)->flags = SEC_HAS_CONTENTS;
  core_reg2sec (abfd)->_raw_size = sizeof (core->cd_fpregs);
  core_reg2sec (abfd)->vma = (bfd_vma) -1;
  core_reg2sec (abfd)->filepos =
    (file_ptr) offsetof (struct corehdr, cd_fpregs);
a130 3
      const char *sname;
      flagword flags;

d133 13
d150 3
a152 2
	  sname = ".data";
	  flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
d155 3
a157 2
	  sname = ".stack";
	  flags = SEC_ALLOC + SEC_LOAD + SEC_HAS_CONTENTS;
d160 2
a161 2
	  sname = ".libdata";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
d164 2
a165 2
	  sname = ".writeable";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
d168 2
a169 2
	  sname = ".misc";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
d172 2
a173 2
	  sname = ".unknown";
	  flags = SEC_ALLOC + SEC_HAS_CONTENTS;
a175 5
      core_section (abfd, n) = bfd_make_section_anyway (abfd, sname);
      if (core_section (abfd, n) == NULL)
	goto loser;

      core_section (abfd, n)->flags = flags;
d180 5
a184 1
      n++;
d187 24
d228 1
a228 1
static bfd_boolean
d234 1
a234 1
  return TRUE;
d246 3
a248 3
#define	NO_GET	((bfd_vma (*) PARAMS ((const bfd_byte *))) swap_abort)
#define NO_GETS ((bfd_signed_vma (*) PARAMS ((const bfd_byte *))) swap_abort)
#define	NO_PUT	((void (*) PARAMS ((bfd_vma, bfd_byte *))) swap_abort)
d254 1
a254 1
  BFD_ENDIAN_BIG,		/* target headers byte order */
@


1.1.1.8
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d5 1
a5 1
   2001, 2002, 2004
d225 3
a227 6
#define	NO_GET ((bfd_vma (*) (const void *)) swap_abort)
#define	NO_PUT ((void (*) (bfd_vma, void *)) swap_abort)
#define	NO_GETS ((bfd_signed_vma (*) (const void *)) swap_abort)
#define	NO_GET64 ((bfd_uint64_t (*) (const void *)) swap_abort)
#define	NO_PUT64 ((void (*) (bfd_uint64_t, void *)) swap_abort)
#define	NO_GETS64 ((bfd_int64_t (*) (const void *)) swap_abort)
d242 1
a242 1
  NO_GET64, NO_GETS64, NO_PUT64,
d245 1
a245 1
  NO_GET64, NO_GETS64, NO_PUT64,
@


