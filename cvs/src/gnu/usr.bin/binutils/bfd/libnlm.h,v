head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.48
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.44
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.46
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.38
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.42
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.40
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.36
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.34
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.32
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.30
	OPENBSD_5_0:1.4.0.28
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.26
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.24
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.20
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.22
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.18
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.16
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.14
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	BINUTILS_2_15:1.1.1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	BINUTILS-2_14:1.1.1.3
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.0.26
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	BINUTILS-2_10:1.1.1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.11.02.20.45.10;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.17.21.54.23;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.13.17.07.30;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.59;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.59;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.13.13.26.37;	author fgsch;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.17.20.42.18;	author drahn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.02.20.22.30;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* BFD back-end data structures for NLM (NetWare Loadable Modules) files.
   Copyright 1993, 1994, 2001, 2002, 2003 Free Software Foundation, Inc.
   Written by Cygnus Support.

This file is part of BFD, the Binary File Descriptor library.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#ifndef _LIBNLM_H_
#define _LIBNLM_H_ 1

#ifdef ARCH_SIZE
#  define NLM_ARCH_SIZE ARCH_SIZE
#endif
#include "nlm/common.h"
#include "nlm/internal.h"
#include "nlm/external.h"

/* A reloc for an imported NLM symbol.  Normal relocs are associated
   with sections, and include a symbol.  These relocs are associated
   with (undefined) symbols, and include a section.  */

struct nlm_relent
{
  /* Section of reloc.  */
  asection *section;
  /* Reloc info (sym_ptr_ptr field set only when canonicalized).  */
  arelent reloc;
};

/* Information we keep for an NLM symbol.  */

typedef struct
{
  /* BFD symbol.  */
  asymbol symbol;
  /* Number of reloc entries for imported symbol.  */
  bfd_size_type rcnt;
  /* Array of reloc information for imported symbol.  */
  struct nlm_relent *relocs;
} nlmNAME(symbol_type);

extern bfd_boolean nlm_mkobject
  PARAMS ((bfd *));
extern bfd_boolean nlm_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));

extern void nlmNAME(get_symbol_info)
  PARAMS ((bfd *, asymbol *, symbol_info *));
extern long nlmNAME(get_symtab_upper_bound)
  PARAMS ((bfd *));
extern long nlmNAME(canonicalize_symtab)
  PARAMS ((bfd *, asymbol **));
extern asymbol *nlmNAME(make_empty_symbol)
  PARAMS ((bfd *));
extern void nlmNAME(print_symbol)
  PARAMS ((bfd *, PTR, asymbol *, bfd_print_symbol_type));
extern long nlmNAME(get_reloc_upper_bound)
  PARAMS ((bfd *, asection *));
extern long nlmNAME(canonicalize_reloc)
  PARAMS ((bfd *, asection *, arelent **, asymbol **));
extern const bfd_target *nlmNAME(object_p)
  PARAMS ((bfd *));
extern bfd_boolean nlmNAME(set_arch_mach)
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
extern bfd_boolean nlmNAME(set_section_contents)
  PARAMS ((bfd *, asection *, const PTR, file_ptr, bfd_size_type));
extern bfd_boolean nlmNAME(write_object_contents)
  PARAMS ((bfd *));

/* Some private data is stashed away for future use using the tdata pointer
   in the bfd structure.  */

struct nlm_obj_tdata
{
  /* Actual data, but ref like ptr */
  Nlm_Internal_Fixed_Header	nlm_fixed_hdr[1];
  Nlm_Internal_Variable_Header	nlm_variable_hdr[1];
  Nlm_Internal_Version_Header	nlm_version_hdr[1];
  Nlm_Internal_Copyright_Header	nlm_copyright_hdr[1];
  Nlm_Internal_Extended_Header	nlm_extended_hdr[1];
  Nlm_Internal_Custom_Header	nlm_custom_hdr[1];
  Nlm_Internal_Cygnus_Ext_Header nlm_cygnus_ext_hdr[1];
  /* BFD NLM symbols.  */
  nlmNAME(symbol_type)		*nlm_symbols;
  /* Lowest text and data VMA values.  */
  bfd_vma			nlm_text_low;
  bfd_vma			nlm_data_low;
  /* Caches for data read from object file.  */
  arelent *			nlm_reloc_fixups;
  asection **			nlm_reloc_fixup_secs;
  /* Backend specific information.  This should probably be a pointer,
     but that would require yet another entry point to initialize the
     structure.  */
  union
    {
      struct	/* Alpha backend information.  */
	{
	  bfd_vma gp;			/* GP value.  */
	  bfd_vma lita_address;		/* .lita section address.  */
	  bfd_size_type lita_size;	/* .lita section size.  */
	}
      alpha_backend_data;
    }
  backend_data;
};

#define nlm_tdata(bfd)			((bfd) -> tdata.nlm_obj_data)
#define nlm_fixed_header(bfd)		(nlm_tdata(bfd) -> nlm_fixed_hdr)
#define nlm_variable_header(bfd)	(nlm_tdata(bfd) -> nlm_variable_hdr)
#define nlm_version_header(bfd)		(nlm_tdata(bfd) -> nlm_version_hdr)
#define nlm_copyright_header(bfd)	(nlm_tdata(bfd) -> nlm_copyright_hdr)
#define nlm_extended_header(bfd)	(nlm_tdata(bfd) -> nlm_extended_hdr)
#define nlm_custom_header(bfd)		(nlm_tdata(bfd) -> nlm_custom_hdr)
#define nlm_cygnus_ext_header(bfd)	(nlm_tdata(bfd) -> nlm_cygnus_ext_hdr)
#define nlm_get_symbols(bfd)		(nlm_tdata(bfd) -> nlm_symbols)
#define nlm_set_symbols(bfd, p)		(nlm_tdata(bfd) -> nlm_symbols = (p))
#define nlm_set_text_low(bfd, i)	(nlm_tdata(bfd) -> nlm_text_low = (i))
#define nlm_get_text_low(bfd)		(nlm_tdata(bfd) -> nlm_text_low)
#define nlm_set_data_low(bfd, i)	(nlm_tdata(bfd) -> nlm_data_low = (i))
#define nlm_get_data_low(bfd)		(nlm_tdata(bfd) -> nlm_data_low)
#define nlm_relocation_fixups(bfd)	(nlm_tdata(bfd) -> nlm_reloc_fixups)
#define nlm_relocation_fixup_secs(bfd)	(nlm_tdata(bfd)->nlm_reloc_fixup_secs)

#define nlm_alpha_backend_data(bfd) \
  (&nlm_tdata (bfd)->backend_data.alpha_backend_data)

/* This is used when writing out the external relocs. */

struct reloc_and_sec
{
  arelent *rel;
  asection *sec;
};

/* We store some function pointer in the backend structure.  This lets
   different NLM targets share most of the same code, while providing
   slightly different code where necessary.  */

struct nlm_backend_data
{
  /* Signature for this backend.  */
  char signature[NLM_SIGNATURE_SIZE];
  /* Size of the fixed header.  */
  bfd_size_type fixed_header_size;
  /* Size of optional prefix for this backend.  Some backend may
     require this to be a function, but so far a constant is OK.  This
     is for a prefix which precedes the standard NLM fixed header.  */
  bfd_size_type optional_prefix_size;
  /* Architecture.  */
  enum bfd_architecture arch;
  /* Machine.  */
  unsigned int mach;
  /* Some NLM formats do not use the uninitialized data section, so
     all uninitialized data must be put into the regular data section
     instead.  */
  bfd_boolean no_uninitialized_data;
  /* Some NLM formats have a prefix on the file.  If this function is
     not NULL, it will be called by nlm_object_p.  It should return
     TRUE if this file could match this format, and it should leave
     the BFD such that a bfd_bread will pick up the fixed header.  */
  bfd_boolean (*nlm_backend_object_p) PARAMS ((bfd *));
  /* Write out the prefix.  This function may be NULL.  This must
     write out the same number of bytes as is in the field
     optional_prefix_size.  */
  bfd_boolean (*nlm_write_prefix) PARAMS ((bfd *));
  /* Read a relocation fixup from abfd.  The reloc information is
     machine specific.  The second argument is the symbol if this is
     an import, or NULL if this is a reloc fixup.  This function
     should set the third argument to the section which the reloc
     belongs in, and the fourth argument to the reloc itself; it does
     not need to fill in the sym_ptr_ptr field for a reloc against an
     import symbol.  */
  bfd_boolean (*nlm_read_reloc)
    PARAMS ((bfd *, nlmNAME(symbol_type) *, asection **, arelent *));
  /* To make objcopy to an i386 NLM work, the i386 backend needs a
     chance to work over the relocs.  This is a bit icky.  */
  bfd_boolean (*nlm_mangle_relocs)
    PARAMS ((bfd *, asection *, const PTR data, bfd_vma offset,
	     bfd_size_type count));
  /* Read an import record from abfd.  It would be nice if this
     were in a machine-dependent format, but it doesn't seem to be. */
  bfd_boolean (*nlm_read_import) PARAMS ((bfd *, nlmNAME(symbol_type) *));
  /* Write an import record to abfd. */
  bfd_boolean (*nlm_write_import) PARAMS ((bfd *, asection *, arelent *));
  /* Set the section for a public symbol.  This may be NULL, in which
     case a default method will be used.  */
  bfd_boolean (*nlm_set_public_section)
    PARAMS ((bfd *, nlmNAME(symbol_type) *));
  /* Get the offset to write out for a public symbol.  This may be
     NULL, in which case a default method will be used.  */
  bfd_vma (*nlm_get_public_offset) PARAMS ((bfd *, asymbol *));
  /* Swap the fixed header in and out */
  void (*nlm_swap_fhdr_in)
    PARAMS ((bfd *, PTR, Nlm_Internal_Fixed_Header *));
  void (*nlm_swap_fhdr_out)
    PARAMS ((bfd *, struct nlm_internal_fixed_header *, PTR));
  /* Write out an external reference.  */
  bfd_boolean (*nlm_write_external)
    PARAMS ((bfd *, bfd_size_type, asymbol *, struct reloc_and_sec *));
  bfd_boolean (*nlm_write_export) PARAMS ((bfd *, asymbol *, bfd_vma));
};

#define nlm_backend(bfd) \
  ((struct nlm_backend_data *)((bfd) -> xvec -> backend_data))
#define nlm_signature(bfd) \
  (nlm_backend(bfd) -> signature)
#define nlm_fixed_header_size(bfd) \
  (nlm_backend(bfd) -> fixed_header_size)
#define nlm_optional_prefix_size(bfd) \
  (nlm_backend(bfd) -> optional_prefix_size)
#define nlm_architecture(bfd) \
  (nlm_backend(bfd) -> arch)
#define nlm_machine(bfd) \
  (nlm_backend(bfd) -> mach)
#define nlm_no_uninitialized_data(bfd) \
  (nlm_backend(bfd) -> no_uninitialized_data)
#define nlm_backend_object_p_func(bfd) \
  (nlm_backend(bfd) -> nlm_backend_object_p)
#define nlm_write_prefix_func(bfd) \
  (nlm_backend(bfd) -> nlm_write_prefix)
#define nlm_read_reloc_func(bfd) \
  (nlm_backend(bfd) -> nlm_read_reloc)
#define nlm_mangle_relocs_func(bfd) \
  (nlm_backend(bfd) -> nlm_mangle_relocs)
#define nlm_read_import_func(bfd) \
  (nlm_backend(bfd) -> nlm_read_import)
#define nlm_write_import_func(bfd) \
  (nlm_backend(bfd) -> nlm_write_import)
#define nlm_set_public_section_func(bfd) \
  (nlm_backend(bfd) -> nlm_set_public_section)
#define nlm_get_public_offset_func(bfd) \
  (nlm_backend(bfd) -> nlm_get_public_offset)
#define nlm_swap_fixed_header_in_func(bfd) \
  (nlm_backend(bfd) -> nlm_swap_fhdr_in)
#define nlm_swap_fixed_header_out_func(bfd) \
  (nlm_backend(bfd) -> nlm_swap_fhdr_out)
#define nlm_write_external_func(bfd) \
  (nlm_backend(bfd) -> nlm_write_external)
#define nlm_write_export_func(bfd) \
  (nlm_backend(bfd) -> nlm_write_export)

/* The NLM code, data, and uninitialized sections have no names defined
   in the NLM, but bfd wants to give them names, so use the traditional
   UNIX names.  */

#define NLM_CODE_NAME			".text"
#define NLM_INITIALIZED_DATA_NAME	".data"
#define NLM_UNINITIALIZED_DATA_NAME	".bss"

#endif /* _LIBNLM_H_ */
@


1.3
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001, 2002 Free Software Foundation, Inc.
d64 1
a64 1
extern long nlmNAME(get_symtab)
d79 1
a79 1
  PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
d191 2
a192 1
    PARAMS ((bfd *, asection *, PTR data, bfd_vma offset, bfd_size_type count));
@


1.2
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1993, 1994 Free Software Foundation, Inc.
d55 4
a58 3
extern boolean nlm_mkobject PARAMS ((bfd *));
extern boolean nlm_set_arch_mach PARAMS ((bfd *, enum bfd_architecture,
					  unsigned long));
d61 1
a61 1
     PARAMS ((bfd *, asymbol *, symbol_info *));
d63 1
a63 1
     PARAMS ((bfd *));
d65 1
a65 1
     PARAMS ((bfd *, asymbol **));
d67 1
a67 1
     PARAMS ((bfd *));
d69 1
a69 1
     PARAMS ((bfd *, PTR, asymbol *, bfd_print_symbol_type));
d71 1
a71 1
     PARAMS ((bfd *, asection *));
d73 1
a73 1
     PARAMS ((bfd *, asection *, arelent **, asymbol **));
d75 7
a81 7
     PARAMS ((bfd *));
extern boolean nlmNAME(set_arch_mach)
     PARAMS ((bfd *, enum bfd_architecture, unsigned long));
extern boolean nlmNAME(set_section_contents)
     PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
extern boolean nlmNAME(write_object_contents)
     PARAMS ((bfd *));
d165 1
a165 1
  long mach;
d169 1
a169 1
  boolean no_uninitialized_data;
d172 3
a174 3
     true if this file could match this format, and it should leave
     the BFD such that a bfd_read will pick up the fixed header.  */
  boolean (*nlm_backend_object_p) PARAMS ((bfd *));
d178 1
a178 1
  boolean (*nlm_write_prefix) PARAMS ((bfd *));
d186 2
a187 2
  boolean (*nlm_read_reloc) PARAMS ((bfd *, nlmNAME(symbol_type) *,
				     asection **, arelent *));
d190 2
a191 3
  boolean (*nlm_mangle_relocs) PARAMS ((bfd *, asection *, PTR data,
					bfd_vma offset,
					bfd_size_type count));
d194 1
a194 1
  boolean (*nlm_read_import) PARAMS ((bfd *, nlmNAME(symbol_type) *));
d196 1
a196 1
  boolean (*nlm_write_import) PARAMS ((bfd *, asection *, arelent *));
d199 2
a200 1
  boolean (*nlm_set_public_section) PARAMS ((bfd *, nlmNAME(symbol_type) *));
d205 4
a208 6
  void (*nlm_swap_fhdr_in) PARAMS ((bfd *,
				    PTR,
				    Nlm_Internal_Fixed_Header *));
  void (*nlm_swap_fhdr_out) PARAMS ((bfd *,
				     struct nlm_internal_fixed_header *,
				     PTR));
d210 3
a212 4
  boolean (*nlm_write_external) PARAMS ((bfd *, bfd_size_type,
					 asymbol *,
					 struct reloc_and_sec *));
  boolean (*nlm_write_export) PARAMS ((bfd *, asymbol *, bfd_vma));
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1993 Free Software Foundation, Inc.
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1993, 1994 Free Software Foundation, Inc.
@


1.1.1.3
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001, 2002 Free Software Foundation, Inc.
d55 3
a57 4
extern bfd_boolean nlm_mkobject
  PARAMS ((bfd *));
extern bfd_boolean nlm_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
d60 1
a60 1
  PARAMS ((bfd *, asymbol *, symbol_info *));
d62 1
a62 1
  PARAMS ((bfd *));
d64 1
a64 1
  PARAMS ((bfd *, asymbol **));
d66 1
a66 1
  PARAMS ((bfd *));
d68 1
a68 1
  PARAMS ((bfd *, PTR, asymbol *, bfd_print_symbol_type));
d70 1
a70 1
  PARAMS ((bfd *, asection *));
d72 1
a72 1
  PARAMS ((bfd *, asection *, arelent **, asymbol **));
d74 7
a80 7
  PARAMS ((bfd *));
extern bfd_boolean nlmNAME(set_arch_mach)
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
extern bfd_boolean nlmNAME(set_section_contents)
  PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
extern bfd_boolean nlmNAME(write_object_contents)
  PARAMS ((bfd *));
d164 1
a164 1
  unsigned int mach;
d168 1
a168 1
  bfd_boolean no_uninitialized_data;
d171 3
a173 3
     TRUE if this file could match this format, and it should leave
     the BFD such that a bfd_bread will pick up the fixed header.  */
  bfd_boolean (*nlm_backend_object_p) PARAMS ((bfd *));
d177 1
a177 1
  bfd_boolean (*nlm_write_prefix) PARAMS ((bfd *));
d185 2
a186 2
  bfd_boolean (*nlm_read_reloc)
    PARAMS ((bfd *, nlmNAME(symbol_type) *, asection **, arelent *));
d189 3
a191 2
  bfd_boolean (*nlm_mangle_relocs)
    PARAMS ((bfd *, asection *, PTR data, bfd_vma offset, bfd_size_type count));
d194 1
a194 1
  bfd_boolean (*nlm_read_import) PARAMS ((bfd *, nlmNAME(symbol_type) *));
d196 1
a196 1
  bfd_boolean (*nlm_write_import) PARAMS ((bfd *, asection *, arelent *));
d199 1
a199 2
  bfd_boolean (*nlm_set_public_section)
    PARAMS ((bfd *, nlmNAME(symbol_type) *));
d204 6
a209 4
  void (*nlm_swap_fhdr_in)
    PARAMS ((bfd *, PTR, Nlm_Internal_Fixed_Header *));
  void (*nlm_swap_fhdr_out)
    PARAMS ((bfd *, struct nlm_internal_fixed_header *, PTR));
d211 4
a214 3
  bfd_boolean (*nlm_write_external)
    PARAMS ((bfd *, bfd_size_type, asymbol *, struct reloc_and_sec *));
  bfd_boolean (*nlm_write_export) PARAMS ((bfd *, asymbol *, bfd_vma));
@


1.1.1.4
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001, 2002, 2003 Free Software Foundation, Inc.
d64 1
a64 1
extern long nlmNAME(canonicalize_symtab)
d79 1
a79 1
  PARAMS ((bfd *, asection *, const PTR, file_ptr, bfd_size_type));
d191 1
a191 2
    PARAMS ((bfd *, asection *, const PTR data, bfd_vma offset,
	     bfd_size_type count));
@


