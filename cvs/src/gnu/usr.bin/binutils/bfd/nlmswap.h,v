head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	BINUTILS_2_15:1.1.1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	BINUTILS-2_14:1.1.1.3
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.0.26
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	BINUTILS-2_10:1.1.1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.05.17.21.54.23;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.13.17.07.30;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.05.06;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.05.06;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.13.13.27.02;	author fgsch;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.17.20.42.19;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@/* NLM (NetWare Loadable Module) swapping routines for BFD.
   Copyright 1993, 2000, 2001 Free Software Foundation, Inc.

   Written by Fred Fish @@ Cygnus Support, using ELF support as the
   template.

This file is part of BFD, the Binary File Descriptor library.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* Although this is a header file, it defines functions.  It is
   included by NLM backends to define swapping functions that vary
   from one NLM to another.  The backend code must arrange for
   Nlm_External_xxxx to be defined appropriately, and can then include
   this file to get the swapping routines.

   At the moment this is only needed for one structure, the fixed NLM
   file header.  */

static void nlm_swap_fixed_header_in PARAMS ((bfd *, PTR,
					      Nlm_Internal_Fixed_Header *));
static void nlm_swap_fixed_header_out PARAMS ((bfd *,
					       Nlm_Internal_Fixed_Header *,
					       PTR));

/* Translate an NLM fixed length file header in external format into an NLM
   file header in internal format.  */

static void
nlm_swap_fixed_header_in (abfd, realsrc, dst)
     bfd *abfd;
     PTR realsrc;
     Nlm_Internal_Fixed_Header *dst;
{
  Nlm_External_Fixed_Header *src = (Nlm_External_Fixed_Header *) realsrc;
  memcpy (dst->signature, src->signature, NLM_SIGNATURE_SIZE);
  memcpy (dst->moduleName, src->moduleName, NLM_MODULE_NAME_SIZE);
  dst->version =
    H_GET_32 (abfd, src->version);
  dst->codeImageOffset =
    H_GET_32 (abfd, src->codeImageOffset);
  dst->codeImageSize =
    H_GET_32 (abfd, src->codeImageSize);
  dst->dataImageOffset =
    H_GET_32 (abfd, src->dataImageOffset);
  dst->dataImageSize =
    H_GET_32 (abfd, src->dataImageSize);
  dst->uninitializedDataSize =
    H_GET_32 (abfd, src->uninitializedDataSize);
  dst->customDataOffset =
    H_GET_32 (abfd, src->customDataOffset);
  dst->customDataSize =
    H_GET_32 (abfd, src->customDataSize);
  dst->moduleDependencyOffset =
    H_GET_32 (abfd, src->moduleDependencyOffset);
  dst->numberOfModuleDependencies =
    H_GET_32 (abfd, src->numberOfModuleDependencies);
  dst->relocationFixupOffset =
    H_GET_32 (abfd, src->relocationFixupOffset);
  dst->numberOfRelocationFixups =
    H_GET_32 (abfd, src->numberOfRelocationFixups);
  dst->externalReferencesOffset =
    H_GET_32 (abfd, src->externalReferencesOffset);
  dst->numberOfExternalReferences =
    H_GET_32 (abfd, src->numberOfExternalReferences);
  dst->publicsOffset =
    H_GET_32 (abfd, src->publicsOffset);
  dst->numberOfPublics =
    H_GET_32 (abfd, src->numberOfPublics);
  dst->debugInfoOffset =
    H_GET_32 (abfd, src->debugInfoOffset);
  dst->numberOfDebugRecords =
    H_GET_32 (abfd, src->numberOfDebugRecords);
  dst->codeStartOffset =
    H_GET_32 (abfd, src->codeStartOffset);
  dst->exitProcedureOffset =
    H_GET_32 (abfd, src->exitProcedureOffset);
  dst->checkUnloadProcedureOffset =
    H_GET_32 (abfd, src->checkUnloadProcedureOffset);
  dst->moduleType =
    H_GET_32 (abfd, src->moduleType);
  dst->flags =
    H_GET_32 (abfd, src->flags);
}

/* Translate an NLM fixed length file header in internal format into
   an NLM file header in external format.  */

static void
nlm_swap_fixed_header_out (abfd, src, realdst)
     bfd *abfd;
     Nlm_Internal_Fixed_Header *src;
     PTR realdst;
{
  Nlm_External_Fixed_Header *dst = (Nlm_External_Fixed_Header *) realdst;
  memset (dst, 0, sizeof *dst);
  memcpy (dst->signature, src->signature, NLM_SIGNATURE_SIZE);
  memcpy (dst->moduleName, src->moduleName, NLM_MODULE_NAME_SIZE);
  H_PUT_32 (abfd, src->version,
	    dst->version);
  H_PUT_32 (abfd, src->codeImageOffset,
	    dst->codeImageOffset);
  H_PUT_32 (abfd, src->codeImageSize,
	    dst->codeImageSize);
  H_PUT_32 (abfd, src->dataImageOffset,
	    dst->dataImageOffset);
  H_PUT_32 (abfd, src->dataImageSize,
	    dst->dataImageSize);
  H_PUT_32 (abfd, src->uninitializedDataSize,
	    dst->uninitializedDataSize);
  H_PUT_32 (abfd, src->customDataOffset,
	    dst->customDataOffset);
  H_PUT_32 (abfd, src->customDataSize,
	    dst->customDataSize);
  H_PUT_32 (abfd, src->moduleDependencyOffset,
	    dst->moduleDependencyOffset);
  H_PUT_32 (abfd, src->numberOfModuleDependencies,
	    dst->numberOfModuleDependencies);
  H_PUT_32 (abfd, src->relocationFixupOffset,
	    dst->relocationFixupOffset);
  H_PUT_32 (abfd, src->numberOfRelocationFixups,
	    dst->numberOfRelocationFixups);
  H_PUT_32 (abfd, src->externalReferencesOffset,
	    dst->externalReferencesOffset);
  H_PUT_32 (abfd, src->numberOfExternalReferences,
	    dst->numberOfExternalReferences);
  H_PUT_32 (abfd, src->publicsOffset,
	    dst->publicsOffset);
  H_PUT_32 (abfd, src->numberOfPublics,
	    dst->numberOfPublics);
  H_PUT_32 (abfd, src->debugInfoOffset,
	    dst->debugInfoOffset);
  H_PUT_32 (abfd, src->numberOfDebugRecords,
	    dst->numberOfDebugRecords);
  H_PUT_32 (abfd, src->codeStartOffset,
	    dst->codeStartOffset);
  H_PUT_32 (abfd, src->exitProcedureOffset,
	    dst->exitProcedureOffset);
  H_PUT_32 (abfd, src->checkUnloadProcedureOffset,
	    dst->checkUnloadProcedureOffset);
  H_PUT_32 (abfd, src->moduleType,
	    dst->moduleType);
  H_PUT_32 (abfd, src->flags,
	    dst->flags);
}
@


1.2
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1993, 2000 Free Software Foundation, Inc.
d51 1
a51 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->version);
d53 1
a53 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->codeImageOffset);
d55 1
a55 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->codeImageSize);
d57 1
a57 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->dataImageOffset);
d59 1
a59 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->dataImageSize);
d61 1
a61 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->uninitializedDataSize);
d63 1
a63 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->customDataOffset);
d65 1
a65 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->customDataSize);
d67 1
a67 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->moduleDependencyOffset);
d69 1
a69 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->numberOfModuleDependencies);
d71 1
a71 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->relocationFixupOffset);
d73 1
a73 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->numberOfRelocationFixups);
d75 1
a75 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->externalReferencesOffset);
d77 1
a77 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->numberOfExternalReferences);
d79 1
a79 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->publicsOffset);
d81 1
a81 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->numberOfPublics);
d83 1
a83 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->debugInfoOffset);
d85 1
a85 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->numberOfDebugRecords);
d87 1
a87 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->codeStartOffset);
d89 1
a89 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->exitProcedureOffset);
d91 1
a91 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->checkUnloadProcedureOffset);
d93 1
a93 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->moduleType);
d95 1
a95 1
    bfd_h_get_32 (abfd, (bfd_byte *) src->flags);
d111 46
a156 46
  bfd_h_put_32 (abfd, (bfd_vma) src->version,
		(bfd_byte *) dst->version);
  bfd_h_put_32 (abfd, (bfd_vma) src->codeImageOffset,
		(bfd_byte *) dst->codeImageOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->codeImageSize,
		(bfd_byte *) dst->codeImageSize);
  bfd_h_put_32 (abfd, (bfd_vma) src->dataImageOffset,
		(bfd_byte *) dst->dataImageOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->dataImageSize,
		(bfd_byte *) dst->dataImageSize);
  bfd_h_put_32 (abfd, (bfd_vma) src->uninitializedDataSize,
		(bfd_byte *) dst->uninitializedDataSize);
  bfd_h_put_32 (abfd, (bfd_vma) src->customDataOffset,
		(bfd_byte *) dst->customDataOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->customDataSize,
		(bfd_byte *) dst->customDataSize);
  bfd_h_put_32 (abfd, (bfd_vma) src->moduleDependencyOffset,
		(bfd_byte *) dst->moduleDependencyOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->numberOfModuleDependencies,
		(bfd_byte *) dst->numberOfModuleDependencies);
  bfd_h_put_32 (abfd, (bfd_vma) src->relocationFixupOffset,
		(bfd_byte *) dst->relocationFixupOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->numberOfRelocationFixups,
		(bfd_byte *) dst->numberOfRelocationFixups);
  bfd_h_put_32 (abfd, (bfd_vma) src->externalReferencesOffset,
		(bfd_byte *) dst->externalReferencesOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->numberOfExternalReferences,
		(bfd_byte *) dst->numberOfExternalReferences);
  bfd_h_put_32 (abfd, (bfd_vma) src->publicsOffset,
		(bfd_byte *) dst->publicsOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->numberOfPublics,
		(bfd_byte *) dst->numberOfPublics);
  bfd_h_put_32 (abfd, (bfd_vma) src->debugInfoOffset,
		(bfd_byte *) dst->debugInfoOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->numberOfDebugRecords,
		(bfd_byte *) dst->numberOfDebugRecords);
  bfd_h_put_32 (abfd, (bfd_vma) src->codeStartOffset,
		(bfd_byte *) dst->codeStartOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->exitProcedureOffset,
		(bfd_byte *) dst->exitProcedureOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->checkUnloadProcedureOffset,
		(bfd_byte *) dst->checkUnloadProcedureOffset);
  bfd_h_put_32 (abfd, (bfd_vma) src->moduleType,
		(bfd_byte *) dst->moduleType);
  bfd_h_put_32 (abfd, (bfd_vma) src->flags,
		(bfd_byte *) dst->flags);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1993 Free Software Foundation, Inc.
d39 1
a39 1
   file header in internal format. */
d99 1
a99 1
   an NLM file header in external format. */
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1993, 2000 Free Software Foundation, Inc.
d39 1
a39 1
   file header in internal format.  */
d99 1
a99 1
   an NLM file header in external format.  */
@


1.1.1.3
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1993, 2000, 2001 Free Software Foundation, Inc.
d51 1
a51 1
    H_GET_32 (abfd, src->version);
d53 1
a53 1
    H_GET_32 (abfd, src->codeImageOffset);
d55 1
a55 1
    H_GET_32 (abfd, src->codeImageSize);
d57 1
a57 1
    H_GET_32 (abfd, src->dataImageOffset);
d59 1
a59 1
    H_GET_32 (abfd, src->dataImageSize);
d61 1
a61 1
    H_GET_32 (abfd, src->uninitializedDataSize);
d63 1
a63 1
    H_GET_32 (abfd, src->customDataOffset);
d65 1
a65 1
    H_GET_32 (abfd, src->customDataSize);
d67 1
a67 1
    H_GET_32 (abfd, src->moduleDependencyOffset);
d69 1
a69 1
    H_GET_32 (abfd, src->numberOfModuleDependencies);
d71 1
a71 1
    H_GET_32 (abfd, src->relocationFixupOffset);
d73 1
a73 1
    H_GET_32 (abfd, src->numberOfRelocationFixups);
d75 1
a75 1
    H_GET_32 (abfd, src->externalReferencesOffset);
d77 1
a77 1
    H_GET_32 (abfd, src->numberOfExternalReferences);
d79 1
a79 1
    H_GET_32 (abfd, src->publicsOffset);
d81 1
a81 1
    H_GET_32 (abfd, src->numberOfPublics);
d83 1
a83 1
    H_GET_32 (abfd, src->debugInfoOffset);
d85 1
a85 1
    H_GET_32 (abfd, src->numberOfDebugRecords);
d87 1
a87 1
    H_GET_32 (abfd, src->codeStartOffset);
d89 1
a89 1
    H_GET_32 (abfd, src->exitProcedureOffset);
d91 1
a91 1
    H_GET_32 (abfd, src->checkUnloadProcedureOffset);
d93 1
a93 1
    H_GET_32 (abfd, src->moduleType);
d95 1
a95 1
    H_GET_32 (abfd, src->flags);
d111 46
a156 46
  H_PUT_32 (abfd, src->version,
	    dst->version);
  H_PUT_32 (abfd, src->codeImageOffset,
	    dst->codeImageOffset);
  H_PUT_32 (abfd, src->codeImageSize,
	    dst->codeImageSize);
  H_PUT_32 (abfd, src->dataImageOffset,
	    dst->dataImageOffset);
  H_PUT_32 (abfd, src->dataImageSize,
	    dst->dataImageSize);
  H_PUT_32 (abfd, src->uninitializedDataSize,
	    dst->uninitializedDataSize);
  H_PUT_32 (abfd, src->customDataOffset,
	    dst->customDataOffset);
  H_PUT_32 (abfd, src->customDataSize,
	    dst->customDataSize);
  H_PUT_32 (abfd, src->moduleDependencyOffset,
	    dst->moduleDependencyOffset);
  H_PUT_32 (abfd, src->numberOfModuleDependencies,
	    dst->numberOfModuleDependencies);
  H_PUT_32 (abfd, src->relocationFixupOffset,
	    dst->relocationFixupOffset);
  H_PUT_32 (abfd, src->numberOfRelocationFixups,
	    dst->numberOfRelocationFixups);
  H_PUT_32 (abfd, src->externalReferencesOffset,
	    dst->externalReferencesOffset);
  H_PUT_32 (abfd, src->numberOfExternalReferences,
	    dst->numberOfExternalReferences);
  H_PUT_32 (abfd, src->publicsOffset,
	    dst->publicsOffset);
  H_PUT_32 (abfd, src->numberOfPublics,
	    dst->numberOfPublics);
  H_PUT_32 (abfd, src->debugInfoOffset,
	    dst->debugInfoOffset);
  H_PUT_32 (abfd, src->numberOfDebugRecords,
	    dst->numberOfDebugRecords);
  H_PUT_32 (abfd, src->codeStartOffset,
	    dst->codeStartOffset);
  H_PUT_32 (abfd, src->exitProcedureOffset,
	    dst->exitProcedureOffset);
  H_PUT_32 (abfd, src->checkUnloadProcedureOffset,
	    dst->checkUnloadProcedureOffset);
  H_PUT_32 (abfd, src->moduleType,
	    dst->moduleType);
  H_PUT_32 (abfd, src->flags,
	    dst->flags);
@


