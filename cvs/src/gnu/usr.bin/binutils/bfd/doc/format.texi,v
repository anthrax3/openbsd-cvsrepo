head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.5.0.52
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.48
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.44
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.46
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.38
	OPENBSD_5_7_BASE:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.42
	OPENBSD_5_6_BASE:1.1.1.5
	OPENBSD_5_5:1.1.1.5.0.40
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.36
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.34
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.32
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.30
	OPENBSD_5_0:1.1.1.5.0.28
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.26
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.24
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.20
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.22
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.18
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.16
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.14
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.12
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.10
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.8
	OPENBSD_4_0_BASE:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.1.1.3.0.8
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.6
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.4
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.2
	OPENBSD_3_2_BASE:1.1.1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	BINUTILS-2_10:1.1.1.2
	FSF:1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	new-binutils:1.1.1.1.0.12
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.05.29.09.21.02;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.29.09.21.02;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.46.01;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.29.01;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.21;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.22.37;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are: 

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.
@@*
@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
boolean bfd_check_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{true} on success, otherwise @@code{false}
with one of the following error codes:  

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize
@@*
@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
boolean bfd_check_format_matches(bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns false with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.
@@*
@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
boolean bfd_set_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.
@@*
@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
CONST char *bfd_format_string(bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.
@@*
@


1.1.1.1
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d25 1
a25 1

d68 1
a68 1

d85 1
a85 1

d97 1
a97 1

d108 1
a108 1

@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d3 1
a3 1
formats supported by BFD are:
d46 1
a46 1
with one of the following error codes:
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d30 1
a30 1
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
d45 1
a45 1
The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
d73 1
a73 2
bfd_boolean bfd_check_format_matches (bfd *abfd, bfd_format format,
    char ***matching);
d76 1
a76 1
Like @@code{bfd_check_format}, except when it returns FALSE with
d90 1
a90 1
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
d102 1
a102 1
const char *bfd_format_string (bfd_format format);
@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d73 2
a74 2
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@


