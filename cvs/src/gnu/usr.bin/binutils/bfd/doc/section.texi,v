head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.5.0.50
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.48
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.44
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.46
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.38
	OPENBSD_5_7_BASE:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.42
	OPENBSD_5_6_BASE:1.1.1.5
	OPENBSD_5_5:1.1.1.5.0.40
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.36
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.34
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.32
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.30
	OPENBSD_5_0:1.1.1.5.0.28
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.26
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.24
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.20
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.22
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.18
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.16
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.14
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.12
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.10
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.8
	OPENBSD_4_0_BASE:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.1.1.3.0.8
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.6
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.4
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.2
	OPENBSD_3_2_BASE:1.1.1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	BINUTILS-2_10:1.1.1.2
	FSF:1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	new-binutils:1.1.1.1.0.12
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.05.29.09.21.03;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.29.09.21.03;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.46.02;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.29.09;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.22;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.22.37;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@@@section Sections
The raw data contained within a BFD is maintained through the
section abstraction.  A single BFD may have any number of
sections.  It keeps hold of them by pointing to the first;
each one points to the next in the list.

Sections are supported in BFD in @@code{section.c}.

@@menu
* Section Input::
* Section Output::
* typedef asection::
* section prototypes::
@@end menu
@@*
@@node Section Input, Section Output, Sections, Sections
@@subsection Section input
When a BFD is opened for reading, the section structures are
created and attached to the BFD.

Each section has a name which describes the section in the
outside world---for example, @@code{a.out} would contain at least
three sections, called @@code{.text}, @@code{.data} and @@code{.bss}.

Names need not be unique; for example a COFF file may have several
sections named @@code{.data}.

Sometimes a BFD will contain more than the ``natural'' number of
sections. A back end may attach other sections containing
constructor data, or an application may add a section (using
@@code{bfd_make_section}) to the sections attached to an already open
BFD. For example, the linker creates an extra section
@@code{COMMON} for each input file's BFD to hold information about
common storage.

The raw data is not necessarily read in when
the section descriptor is created. Some targets may leave the
data in place until a @@code{bfd_get_section_contents} call is
made. Other back ends may read in all the data at once.  For
example, an S-record file has to be read once to determine the
size of the data. An IEEE-695 file doesn't contain raw data in
sections, but data and relocation expressions intermixed, so
the data area has to be parsed to get out the data and
relocations.
@@*
@@node Section Output, typedef asection, Section Input, Sections
@@subsection Section output
To write a new object style BFD, the various sections to be
written have to be created. They are attached to the BFD in
the same way as input sections; data is written to the
sections using @@code{bfd_set_section_contents}.

Any program that creates or combines sections (e.g., the assembler
and linker) must use the @@code{asection} fields @@code{output_section} and
@@code{output_offset} to indicate the file sections to which each
section must be written.  (If the section is being created from
scratch, @@code{output_section} should probably point to the section
itself and @@code{output_offset} should probably be zero.)

The data to be written comes from input sections attached
(via @@code{output_section} pointers) to
the output sections.  The output section structure can be
considered a filter for the input section: the output section
determines the vma of the output data and the name, but the
input section determines the offset into the output section of
the data to be written.

E.g., to create a section "O", starting at 0x100, 0x123 long,
containing two subsections, "A" at offset 0x0 (i.e., at vma
0x100) and "B" at offset 0x20 (i.e., at vma 0x120) the @@code{asection}
structures would look like:

@@example
   section name          "A"
     output_offset   0x00
     size            0x20
     output_section ----------->  section name    "O"
                             |    vma             0x100
   section name          "B" |    size            0x123
     output_offset   0x20    |
     size            0x103   |
     output_section  --------|
@@end example
@@*
@@subsection Link orders
The data within a section is stored in a @@dfn{link_order}.
These are much like the fixups in @@code{gas}.  The link_order
abstraction allows a section to grow and shrink within itself.

A link_order knows how big it is, and which is the next
link_order and where the raw data for it is; it also points to
a list of relocations which apply to it.

The link_order is used by the linker to perform relaxing on
final code.  The compiler creates code which is as big as
necessary to make it work without relaxing, and the user can
select whether to relax.  Sometimes relaxing takes a lot of
time.  The linker runs around the relocations to see if any
are attached to data which can be shrunk, if so it does it on
a link_order by link_order basis.
@@*

@@node typedef asection, section prototypes, Section Output, Sections
@@subsection typedef asection
Here is the section structure:
@@*
.
@@example
typedef struct sec
@@{
        /* The name of the section; the name isn't a copy, the pointer is
        the same as that passed to bfd_make_section. */

    CONST char *name;

        /* Which section is it; 0..nth.      */

   int index;

        /* The next section in the list belonging to the BFD, or NULL. */

    struct sec *next;

        /* The field flags contains attributes of the section. Some
           flags are read in from the object file, and some are
           synthesized from other information.  */

    flagword flags;

#define SEC_NO_FLAGS   0x000

        /* Tells the OS to allocate space for this section when loading.
           This is clear for a section containing debug information
           only. */
#define SEC_ALLOC      0x001

        /* Tells the OS to load the section from the file when loading.
           This is clear for a .bss section. */
#define SEC_LOAD       0x002

        /* The section contains data still to be relocated, so there is
           some relocation information too. */
#define SEC_RELOC      0x004

#if 0   /* Obsolete ? */
#define SEC_BALIGN     0x008
#endif

        /* A signal to the OS that the section contains read only
          data. */
#define SEC_READONLY   0x010

        /* The section contains code only. */
#define SEC_CODE       0x020

        /* The section contains data only. */
#define SEC_DATA       0x040

        /* The section will reside in ROM. */
#define SEC_ROM        0x080

        /* The section contains constructor information. This section
           type is used by the linker to create lists of constructors and
           destructors used by @@code{g++}. When a back end sees a symbol
           which should be used in a constructor list, it creates a new
           section for the type of name (e.g., @@code{__CTOR_LIST__}), attaches
           the symbol to it, and builds a relocation. To build the lists
           of constructors, all the linker has to do is catenate all the
           sections called @@code{__CTOR_LIST__} and relocate the data
           contained within - exactly the operations it would peform on
           standard data. */
#define SEC_CONSTRUCTOR 0x100

        /* The section is a constuctor, and should be placed at the
          end of the text, data, or bss section(?). */
#define SEC_CONSTRUCTOR_TEXT 0x1100
#define SEC_CONSTRUCTOR_DATA 0x2100
#define SEC_CONSTRUCTOR_BSS  0x3100

        /* The section has contents - a data section could be
           @@code{SEC_ALLOC} | @@code{SEC_HAS_CONTENTS}; a debug section could be
           @@code{SEC_HAS_CONTENTS} */
#define SEC_HAS_CONTENTS 0x200

        /* An instruction to the linker to not output the section
           even if it has information which would normally be written. */
#define SEC_NEVER_LOAD 0x400

        /* The section is a COFF shared library section.  This flag is
           only for the linker.  If this type of section appears in
           the input file, the linker must copy it to the output file
           without changing the vma or size.  FIXME: Although this
           was originally intended to be general, it really is COFF
           specific (and the flag was renamed to indicate this).  It
           might be cleaner to have some more general mechanism to
           allow the back end to control what the linker does with
           sections. */
#define SEC_COFF_SHARED_LIBRARY 0x800

        /* The section contains common symbols (symbols may be defined
           multiple times, the value of a symbol is the amount of
           space it requires, and the largest symbol value is the one
           used).  Most targets have exactly one of these (which we
	    translate to bfd_com_section_ptr), but ECOFF has two. */
#define SEC_IS_COMMON 0x8000

        /* The section contains only debugging information.  For
           example, this is set for ELF .debug and .stab sections.
           strip tests this flag to see if a section can be
           discarded. */
#define SEC_DEBUGGING 0x10000

        /* The contents of this section are held in memory pointed to
           by the contents field.  This is checked by
           bfd_get_section_contents, and the data is retrieved from
           memory if appropriate.  */
#define SEC_IN_MEMORY 0x20000

        /* The contents of this section are to be excluded by the
	    linker for executable and shared objects unless those
	    objects are to be further relocated.  */
#define SEC_EXCLUDE 0x40000

	/* The contents of this section are to be sorted by the
	   based on the address specified in the associated symbol
	   table.  */
#define SEC_SORT_ENTRIES 0x80000

	/* When linking, duplicate sections of the same name should be
	   discarded, rather than being combined into a single section as
	   is usually done.  This is similar to how common symbols are
	   handled.  See SEC_LINK_DUPLICATES below.  */
#define SEC_LINK_ONCE 0x100000

	/* If SEC_LINK_ONCE is set, this bitfield describes how the linker
	   should handle duplicate sections.  */
#define SEC_LINK_DUPLICATES 0x600000

	/* This value for SEC_LINK_DUPLICATES means that duplicate
	   sections with the same name should simply be discarded. */
#define SEC_LINK_DUPLICATES_DISCARD 0x0

	/* This value for SEC_LINK_DUPLICATES means that the linker
	   should warn if there are any duplicate sections, although
	   it should still only link one copy.  */
#define SEC_LINK_DUPLICATES_ONE_ONLY 0x200000

	/* This value for SEC_LINK_DUPLICATES means that the linker
	   should warn if any duplicate sections are a different size.  */
#define SEC_LINK_DUPLICATES_SAME_SIZE 0x400000

	/* This value for SEC_LINK_DUPLICATES means that the linker
	   should warn if any duplicate sections contain different
	   contents.  */
#define SEC_LINK_DUPLICATES_SAME_CONTENTS 0x600000

	/* This section was created by the linker as part of dynamic
	   relocation or other arcane processing.  It is skipped when
	   going through the first-pass output, trusting that someone
	   else up the line will take care of it later.  */
#define SEC_LINKER_CREATED 0x800000

	/*  End of section flags.  */

	/* Some internal packed boolean fields.  */

	/* See the vma field.  */
	unsigned int user_set_vma : 1;

	/* Whether relocations have been processed.  */
	unsigned int reloc_done : 1;

	/* A mark flag used by some of the linker backends.  */
	unsigned int linker_mark : 1;

	/* End of internal packed boolean fields.  */

       /*  The virtual memory address of the section - where it will be
           at run time.  The symbols are relocated against this.  The
	    user_set_vma flag is maintained by bfd; if it's not set, the
	    backend can assign addresses (for example, in @@code{a.out}, where
	    the default address for @@code{.data} is dependent on the specific
	    target and various flags).  */

   bfd_vma vma;

       /*  The load address of the section - where it would be in a
           rom image; really only used for writing section header
	    information. */

   bfd_vma lma;

        /* The size of the section in bytes, as it will be output.
           contains a value even if the section has no contents (e.g., the
           size of @@code{.bss}). This will be filled in after relocation */

   bfd_size_type _cooked_size;

        /* The original size on disk of the section, in bytes.  Normally this
	    value is the same as the size, but if some relaxing has
	    been done, then this value will be bigger.  */

   bfd_size_type _raw_size;

        /* If this section is going to be output, then this value is the
           offset into the output section of the first byte in the input
           section. E.g., if this was going to start at the 100th byte in
           the output section, this value would be 100. */

   bfd_vma output_offset;

        /* The output section through which to map on output. */

   struct sec *output_section;

        /* The alignment requirement of the section, as an exponent of 2 -
           e.g., 3 aligns to 2^3 (or 8). */

   unsigned int alignment_power;

        /* If an input section, a pointer to a vector of relocation
           records for the data in this section. */

   struct reloc_cache_entry *relocation;

        /* If an output section, a pointer to a vector of pointers to
           relocation records for the data in this section. */

   struct reloc_cache_entry **orelocation;

        /* The number of relocation records in one of the above  */

   unsigned reloc_count;

        /* Information below is back end specific - and not always used
           or updated.  */

        /* File position of section data    */

   file_ptr filepos;

        /* File position of relocation info */

   file_ptr rel_filepos;

        /* File position of line data       */

   file_ptr line_filepos;

        /* Pointer to data for applications */

   PTR userdata;

        /* If the SEC_IN_MEMORY flag is set, this points to the actual
           contents.  */
   unsigned char *contents;

        /* Attached line number information */

   alent *lineno;

        /* Number of line number records   */

   unsigned int lineno_count;

        /* When a section is being output, this value changes as more
           linenumbers are written out */

   file_ptr moving_line_filepos;

        /* What the section number is in the target world  */

   int target_index;

   PTR used_by_bfd;

        /* If this is a constructor section then here is a list of the
           relocations created to relocate items within it. */

   struct relent_chain *constructor_chain;

        /* The BFD which owns the section. */

   bfd *owner;

	 /* A symbol which points at this section only */
   struct symbol_cache_entry *symbol;
   struct symbol_cache_entry **symbol_ptr_ptr;

   struct bfd_link_order *link_order_head;
   struct bfd_link_order *link_order_tail;
@@} asection ;

    /* These sections are global, and are managed by BFD.  The application
       and target back end are not permitted to change the values in
	these sections.  New code should use the section_ptr macros rather
       than referring directly to the const sections.  The const sections
       may eventually vanish.  */
#define BFD_ABS_SECTION_NAME "*ABS*"
#define BFD_UND_SECTION_NAME "*UND*"
#define BFD_COM_SECTION_NAME "*COM*"
#define BFD_IND_SECTION_NAME "*IND*"

    /* the absolute section */
extern const asection bfd_abs_section;
#define bfd_abs_section_ptr ((asection *) &bfd_abs_section)
#define bfd_is_abs_section(sec) ((sec) == bfd_abs_section_ptr)
    /* Pointer to the undefined section */
extern const asection bfd_und_section;
#define bfd_und_section_ptr ((asection *) &bfd_und_section)
#define bfd_is_und_section(sec) ((sec) == bfd_und_section_ptr)
    /* Pointer to the common section */
extern const asection bfd_com_section;
#define bfd_com_section_ptr ((asection *) &bfd_com_section)
    /* Pointer to the indirect section */
extern const asection bfd_ind_section;
#define bfd_ind_section_ptr ((asection *) &bfd_ind_section)
#define bfd_is_ind_section(sec) ((sec) == bfd_ind_section_ptr)

extern const struct symbol_cache_entry * const bfd_abs_symbol;
extern const struct symbol_cache_entry * const bfd_com_symbol;
extern const struct symbol_cache_entry * const bfd_und_symbol;
extern const struct symbol_cache_entry * const bfd_ind_symbol;
#define bfd_get_section_size_before_reloc(section) \
     (section->reloc_done ? (abort(),1): (section)->_raw_size)
#define bfd_get_section_size_after_reloc(section) \
     ((section->reloc_done) ? (section)->_cooked_size: (abort(),1))
@@end example

@@node section prototypes,  , typedef asection, Sections
@@subsection Section prototypes
These are the functions exported by the section handling part of BFD.
@@*
@@findex bfd_get_section_by_name
@@subsubsection @@code{bfd_get_section_by_name}
@@strong{Synopsis}
@@example
asection *bfd_get_section_by_name(bfd *abfd, CONST char *name);
@@end example
@@strong{Description}@@*
Run through @@var{abfd} and return the one of the
@@code{asection}s whose name matches @@var{name}, otherwise @@code{NULL}.
@@xref{Sections}, for more information.

This should only be used in special cases; the normal way to process
all sections of a given name is to use @@code{bfd_map_over_sections} and
@@code{strcmp} on the name (or better yet, base it on the section flags
or something else) for each section.
@@*
@@findex bfd_make_section_old_way
@@subsubsection @@code{bfd_make_section_old_way}
@@strong{Synopsis}
@@example
asection *bfd_make_section_old_way(bfd *abfd, CONST char *name);
@@end example
@@strong{Description}@@*
Create a new empty section called @@var{name}
and attach it to the end of the chain of sections for the
BFD @@var{abfd}. An attempt to create a section with a name which
is already in use returns its pointer without changing the
section chain.

It has the funny name since this is the way it used to be
before it was rewritten....

Possible errors are:
@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
If output has already started for this BFD.
@@item
@@code{bfd_error_no_memory} -
If memory allocation fails.
@@end itemize
@@*
@@findex bfd_make_section_anyway
@@subsubsection @@code{bfd_make_section_anyway}
@@strong{Synopsis}
@@example
asection *bfd_make_section_anyway(bfd *abfd, CONST char *name);
@@end example
@@strong{Description}@@*
Create a new empty section called @@var{name} and attach it to the end of
the chain of sections for @@var{abfd}.  Create a new section even if there
is already a section with that name.

Return @@code{NULL} and set @@code{bfd_error} on error; possible errors are:
@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} - If output has already started for @@var{abfd}.
@@item
@@code{bfd_error_no_memory} - If memory allocation fails.
@@end itemize
@@*
@@findex bfd_make_section
@@subsubsection @@code{bfd_make_section}
@@strong{Synopsis}
@@example
asection *bfd_make_section(bfd *, CONST char *name);
@@end example
@@strong{Description}@@*
Like @@code{bfd_make_section_anyway}, but return @@code{NULL} (without calling
bfd_set_error ()) without changing the section chain if there is already a
section named @@var{name}.  If there is an error, return @@code{NULL} and set
@@code{bfd_error}.
@@*
@@findex bfd_set_section_flags
@@subsubsection @@code{bfd_set_section_flags}
@@strong{Synopsis}
@@example
boolean bfd_set_section_flags(bfd *abfd, asection *sec, flagword flags);
@@end example
@@strong{Description}@@*
Set the attributes of the section @@var{sec} in the BFD
@@var{abfd} to the value @@var{flags}. Return @@code{true} on success,
@@code{false} on error. Possible error returns are:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
The section cannot have one or more of the attributes
requested. For example, a .bss section in @@code{a.out} may not
have the @@code{SEC_HAS_CONTENTS} field set.
@@end itemize
@@*
@@findex bfd_map_over_sections
@@subsubsection @@code{bfd_map_over_sections}
@@strong{Synopsis}
@@example
void bfd_map_over_sections(bfd *abfd,
    void (*func)(bfd *abfd,
    asection *sect,
    PTR obj),
    PTR obj);
@@end example
@@strong{Description}@@*
Call the provided function @@var{func} for each section
attached to the BFD @@var{abfd}, passing @@var{obj} as an
argument. The function will be called as if by

@@example
	func(abfd, the_section, obj);
@@end example

This is the prefered method for iterating over sections; an
alternative would be to use a loop:

@@example
	   section *p;
	   for (p = abfd->sections; p != NULL; p = p->next)
	      func(abfd, p, ...)
@@end example
@@*
@@findex bfd_set_section_size
@@subsubsection @@code{bfd_set_section_size}
@@strong{Synopsis}
@@example
boolean bfd_set_section_size(bfd *abfd, asection *sec, bfd_size_type val);
@@end example
@@strong{Description}@@*
Set @@var{sec} to the size @@var{val}. If the operation is
ok, then @@code{true} is returned, else @@code{false}.

Possible error returns:
@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
Writing has started to the BFD, so setting the size is invalid.
@@end itemize
@@*
@@findex bfd_set_section_contents
@@subsubsection @@code{bfd_set_section_contents}
@@strong{Synopsis}
@@example
boolean bfd_set_section_contents
   (bfd *abfd,
    asection *section,
    PTR data,
    file_ptr offset,
    bfd_size_type count);
@@end example
@@strong{Description}@@*
Sets the contents of the section @@var{section} in BFD
@@var{abfd} to the data starting in memory at @@var{data}. The
data is written to the output section starting at offset
@@var{offset} for @@var{count} bytes.

Normally @@code{true} is returned, else @@code{false}. Possible error
returns are:
@@itemize @@bullet

@@item
@@code{bfd_error_no_contents} -
The output section does not have the @@code{SEC_HAS_CONTENTS}
attribute, so nothing can be written to it.
@@item
and some more too
@@end itemize
This routine is front end to the back end function
@@code{_bfd_set_section_contents}.
@@*
@@findex bfd_get_section_contents
@@subsubsection @@code{bfd_get_section_contents}
@@strong{Synopsis}
@@example
boolean bfd_get_section_contents
   (bfd *abfd, asection *section, PTR location,
    file_ptr offset, bfd_size_type count);
@@end example
@@strong{Description}@@*
Read data from @@var{section} in BFD @@var{abfd}
into memory starting at @@var{location}. The data is read at an
offset of @@var{offset} from the start of the input section,
and is read for @@var{count} bytes.

If the contents of a constructor with the @@code{SEC_CONSTRUCTOR}
flag set are requested or if the section does not have the
@@code{SEC_HAS_CONTENTS} flag set, then the @@var{location} is filled
with zeroes. If no errors occur, @@code{true} is returned, else
@@code{false}.
@@*
@@findex bfd_copy_private_section_data
@@subsubsection @@code{bfd_copy_private_section_data}
@@strong{Synopsis}
@@example
boolean bfd_copy_private_section_data(bfd *ibfd, asection *isec, bfd *obfd, asection *osec);
@@end example
@@strong{Description}@@*
Copy private section information from @@var{isec} in the BFD
@@var{ibfd} to the section @@var{osec} in the BFD @@var{obfd}.
Return @@code{true} on success, @@code{false} on error.  Possible error
returns are:

@@itemize @@bullet

@@item
@@code{bfd_error_no_memory} -
Not enough memory exists to create private data for @@var{osec}.
@@end itemize
@@example
#define bfd_copy_private_section_data(ibfd, isection, obfd, osection) \
     BFD_SEND (obfd, _bfd_copy_private_section_data, \
		(ibfd, isection, obfd, osection))
@@end example
@@*
@


1.1.1.1
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d15 1
a15 1

d45 1
a45 1

d84 1
a84 1

d101 1
a101 1

d106 2
a107 2


a108 22

 /* This structure is used for a comdat section, as in PE.  A comdat
    section is associated with a particular symbol.  When the linker
    sees a comdat section, it keeps only one of the sections with a
    given name and associated with a given symbol. */

struct bfd_comdat_info
@@{
  /* The name of the symbol associated with a comdat section.  */
  const char *name;

  /* The local symbol table index of the symbol associated with a
     comdat section.  This is only meaningful to the object file format
     specific code; it is not an index into the list returned by
     bfd_canonicalize_symtab.  */
  long symbol;

  /* If this section is being discarded, the linker uses this field
     to point to the input section which is being kept.  */
  struct sec *sec;
@@};

d174 1
a174 1
        /* The section is a constructor, and should be placed at the
d204 1
a204 1
           translate to bfd_com_section_ptr), but ECOFF has two. */
d220 2
a221 2
           linker for executable and shared objects unless those
           objects are to be further relocated.  */
d224 3
a226 3
       /* The contents of this section are to be sorted by the
          based on the address specified in the associated symbol
          table.  */
d229 4
a232 4
       /* When linking, duplicate sections of the same name should be
          discarded, rather than being combined into a single section as
          is usually done.  This is similar to how common symbols are
          handled.  See SEC_LINK_DUPLICATES below.  */
d235 2
a236 2
       /* If SEC_LINK_ONCE is set, this bitfield describes how the linker
          should handle duplicate sections.  */
d239 2
a240 2
       /* This value for SEC_LINK_DUPLICATES means that duplicate
          sections with the same name should simply be discarded. */
d243 3
a245 3
       /* This value for SEC_LINK_DUPLICATES means that the linker
          should warn if there are any duplicate sections, although
          it should still only link one copy.  */
d248 2
a249 2
       /* This value for SEC_LINK_DUPLICATES means that the linker
          should warn if any duplicate sections are a different size.  */
d252 3
a254 3
       /* This value for SEC_LINK_DUPLICATES means that the linker
          should warn if any duplicate sections contain different
          contents.  */
d257 4
a260 4
       /* This section was created by the linker as part of dynamic
          relocation or other arcane processing.  It is skipped when
          going through the first-pass output, trusting that someone
          else up the line will take care of it later.  */
d263 1
a263 10
       /* This section should not be subject to garbage collection.  */
#define SEC_KEEP 0x1000000

       /* This section contains "short" data, and should be placed
          "near" the GP.  */
#define SEC_SMALL_DATA 0x2000000

       /* This section contains data which may be shared with other
          executables or shared objects.  */
#define SEC_SHARED 0x4000000
d265 1
a265 1
       /*  End of section flags.  */
d267 2
a268 1
       /* Some internal packed boolean fields.  */
d270 2
a271 2
       /* See the vma field.  */
       unsigned int user_set_vma : 1;
d273 2
a274 2
       /* Whether relocations have been processed.  */
       unsigned int reloc_done : 1;
d276 1
a276 7
       /* A mark flag used by some of the linker backends.  */
       unsigned int linker_mark : 1;

       /* A mark flag used by some linker backends for garbage collection.  */
       unsigned int gc_mark : 1;

       /* End of internal packed boolean fields.  */
d280 4
a283 4
           user_set_vma flag is maintained by bfd; if it's not set, the
           backend can assign addresses (for example, in @@code{a.out}, where
           the default address for @@code{.data} is dependent on the specific
           target and various flags).  */
d289 1
a289 1
           information. */
d293 3
a295 3
        /* The size of the section in octets, as it will be output.
           Contains a value even if the section has no contents (e.g., the
           size of @@code{.bss}).  This will be filled in after relocation.  */
d299 3
a301 3
        /* The original size on disk of the section, in octets.  Normally this
           value is the same as the size, but if some relaxing has
           been done, then this value will be bigger.  */
d306 3
a308 6
           offset in *bytes* into the output section of the first byte in the
           input section (byte ==> smallest addressable unit on the
           target).  In most cases, if this was going to start at the
           100th octet (8-bit quantity) in the output section, this value
           would be 100.  However, if the target byte size is 16 bits
           (bfd_octets_per_byte is "2"), this value would be 50. */
a365 4
        /* Optional information about a COMDAT entry; NULL if not COMDAT */

   struct bfd_comdat_info *comdat;

d386 1
a386 1
        /* A symbol which points at this section only */
d396 1
a396 1
       these sections.  New code should use the section_ptr macros rather
d425 1
a425 2
     ((section)->reloc_done ? (abort (), (bfd_size_type) 1) \
                            : (section)->_raw_size)
d427 1
a427 2
     ((section)->reloc_done ? (section)->_cooked_size \
                            : (abort (), (bfd_size_type) 1))
d433 1
a433 1

d449 1
a449 1

d476 1
a476 1

d496 1
a496 1

d508 1
a508 1

d528 1
a528 1

d545 1
a545 1
       func(abfd, the_section, obj);
d552 3
a554 3
          section *p;
          for (p = abfd->sections; p != NULL; p = p->next)
             func(abfd, p, ...)
d556 1
a556 1

d574 1
a574 1

d590 1
a590 1
@@var{offset} for @@var{count} octets.
d605 1
a605 1

d625 1
a625 1

d647 1
a647 9
               (ibfd, isection, obfd, osection))
@@end example

@@findex _bfd_strip_section_from_output
@@subsubsection @@code{_bfd_strip_section_from_output}
@@strong{Synopsis}
@@example
void _bfd_strip_section_from_output
   (struct bfd_link_info *info, asection *section);
d649 1
a649 6
@@strong{Description}@@*
Remove @@var{section} from the output.  If the output section
becomes empty, remove it from the output bfd.  @@var{info} may
be NULL; if it is not, it is used to decide whether the output
section is empty.

@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d110 4
a113 4
/* This structure is used for a comdat section, as in PE.  A comdat
   section is associated with a particular symbol.  When the linker
   sees a comdat section, it keeps only one of the sections with a
   given name and associated with a given symbol.  */
d125 4
d133 2
a134 6
  /* The name of the section; the name isn't a copy, the pointer is
     the same as that passed to bfd_make_section.  */

  const char *name;

  /* A unique sequence number.  */
d136 1
a136 1
  int id;
d138 1
a138 1
  /* Which section is it; 0..nth.  */
d140 1
a140 1
  int index;
d142 1
a142 1
  /* The next section in the list belonging to the BFD, or NULL.  */
d144 1
a144 1
  struct sec *next;
d146 3
a148 3
  /* The field flags contains attributes of the section. Some
     flags are read in from the object file, and some are
     synthesized from other information.  */
d150 1
a150 1
  flagword flags;
d154 3
a156 2
  /* Tells the OS to allocate space for this section when loading.
     This is clear for a section containing debug information only.  */
d159 2
a160 2
  /* Tells the OS to load the section from the file when loading.
     This is clear for a .bss section.  */
d163 2
a164 2
  /* The section contains data still to be relocated, so there is
     some relocation information too.  */
d171 2
a172 1
  /* A signal to the OS that the section contains read only data.  */
d175 1
a175 1
  /* The section contains code only.  */
d178 1
a178 1
  /* The section contains data only.  */
d181 1
a181 1
  /* The section will reside in ROM.  */
d184 10
a193 10
  /* The section contains constructor information. This section
     type is used by the linker to create lists of constructors and
     destructors used by @@code{g++}. When a back end sees a symbol
     which should be used in a constructor list, it creates a new
     section for the type of name (e.g., @@code{__CTOR_LIST__}), attaches
     the symbol to it, and builds a relocation. To build the lists
     of constructors, all the linker has to do is catenate all the
     sections called @@code{__CTOR_LIST__} and relocate the data
     contained within - exactly the operations it would peform on
     standard data.  */
d196 2
a197 2
  /* The section is a constructor, and should be placed at the
     end of the text, data, or bss section(?).  */
d202 3
a204 3
  /* The section has contents - a data section could be
     @@code{SEC_ALLOC} | @@code{SEC_HAS_CONTENTS}; a debug section could be
     @@code{SEC_HAS_CONTENTS}  */
d207 2
a208 2
  /* An instruction to the linker to not output the section
     even if it has information which would normally be written.  */
d211 9
a219 9
  /* The section is a COFF shared library section.  This flag is
     only for the linker.  If this type of section appears in
     the input file, the linker must copy it to the output file
     without changing the vma or size.  FIXME: Although this
     was originally intended to be general, it really is COFF
     specific (and the flag was renamed to indicate this).  It
     might be cleaner to have some more general mechanism to
     allow the back end to control what the linker does with
     sections.  */
d222 5
a226 13
  /* The section has GOT references.  This flag is only for the
     linker, and is currently only used by the elf32-hppa back end.
     It will be set if global offset table references were detected
     in this section, which indicate to the linker that the section
     contains PIC code, and must be handled specially when doing a
     static link.  */
#define SEC_HAS_GOT_REF 0x4000

  /* The section contains common symbols (symbols may be defined
     multiple times, the value of a symbol is the amount of
     space it requires, and the largest symbol value is the one
     used).  Most targets have exactly one of these (which we
     translate to bfd_com_section_ptr), but ECOFF has two.  */
d229 4
a232 4
  /* The section contains only debugging information.  For
     example, this is set for ELF .debug and .stab sections.
     strip tests this flag to see if a section can be
     discarded.  */
d235 4
a238 3
  /* The contents of this section are held in memory pointed to
     by the contents field.  This is checked by bfd_get_section_contents,
     and the data is retrieved from memory if appropriate.  */
d241 3
a243 3
  /* The contents of this section are to be excluded by the
     linker for executable and shared objects unless those
     objects are to be further relocated.  */
d246 3
a248 3
  /* The contents of this section are to be sorted by the
     based on the address specified in the associated symbol
     table.  */
d251 4
a254 4
  /* When linking, duplicate sections of the same name should be
     discarded, rather than being combined into a single section as
     is usually done.  This is similar to how common symbols are
     handled.  See SEC_LINK_DUPLICATES below.  */
d257 2
a258 2
  /* If SEC_LINK_ONCE is set, this bitfield describes how the linker
     should handle duplicate sections.  */
d261 2
a262 2
  /* This value for SEC_LINK_DUPLICATES means that duplicate
     sections with the same name should simply be discarded.  */
d265 3
a267 3
  /* This value for SEC_LINK_DUPLICATES means that the linker
     should warn if there are any duplicate sections, although
     it should still only link one copy.  */
d270 2
a271 2
  /* This value for SEC_LINK_DUPLICATES means that the linker
     should warn if any duplicate sections are a different size.  */
d274 3
a276 3
  /* This value for SEC_LINK_DUPLICATES means that the linker
     should warn if any duplicate sections contain different
     contents.  */
d279 4
a282 4
  /* This section was created by the linker as part of dynamic
     relocation or other arcane processing.  It is skipped when
     going through the first-pass output, trusting that someone
     else up the line will take care of it later.  */
d285 1
a285 1
  /* This section should not be subject to garbage collection.  */
d288 2
a289 2
  /* This section contains "short" data, and should be placed
     "near" the GP.  */
d292 2
a293 2
  /* This section contains data which may be shared with other
     executables or shared objects.  */
d296 1
a296 13
  /* When a section with this flag is being linked, then if the size of
     the input section is less than a page, it should not cross a page
     boundary.  If the size of the input section is one page or more, it
     should be aligned on a page boundary.  */
#define SEC_BLOCK 0x8000000

  /* Conditionally link this section; do not link if there are no
     references found to any symbol in the section.  */
#define SEC_CLINK 0x10000000

  /*  End of section flags.  */

  /* Some internal packed boolean fields.  */
d298 1
a298 2
  /* See the vma field.  */
  unsigned int user_set_vma : 1;
d300 2
a301 2
  /* Whether relocations have been processed.  */
  unsigned int reloc_done : 1;
d303 2
a304 2
  /* A mark flag used by some of the linker backends.  */
  unsigned int linker_mark : 1;
d306 2
a307 3
  /* Another mark flag used by some of the linker backends.  Set for
     output sections that have a input section.  */
  unsigned int linker_has_input : 1;
d309 2
a310 2
  /* A mark flag used by some linker backends for garbage collection.  */
  unsigned int gc_mark : 1;
d312 1
a312 2
  /* Used by the ELF code to mark sections which have been allocated to segments.  */
  unsigned int segment_mark : 1;
d314 6
a319 1
  /* End of internal packed boolean fields.  */
d321 1
a321 6
  /*  The virtual memory address of the section - where it will be
      at run time.  The symbols are relocated against this.  The
      user_set_vma flag is maintained by bfd; if it's not set, the
      backend can assign addresses (for example, in @@code{a.out}, where
      the default address for @@code{.data} is dependent on the specific
      target and various flags).  */
d323 3
a325 1
  bfd_vma vma;
d327 1
a327 3
  /*  The load address of the section - where it would be in a
      rom image; really only used for writing section header
      information. */
d329 3
a331 1
  bfd_vma lma;
d333 1
a333 3
  /* The size of the section in octets, as it will be output.
     Contains a value even if the section has no contents (e.g., the
     size of @@code{.bss}).  This will be filled in after relocation.  */
d335 3
a337 1
  bfd_size_type _cooked_size;
d339 1
a339 3
  /* The original size on disk of the section, in octets.  Normally this
     value is the same as the size, but if some relaxing has
     been done, then this value will be bigger.  */
d341 7
a347 1
  bfd_size_type _raw_size;
d349 1
a349 7
  /* If this section is going to be output, then this value is the
     offset in *bytes* into the output section of the first byte in the
     input section (byte ==> smallest addressable unit on the
     target).  In most cases, if this was going to start at the
     100th octet (8-bit quantity) in the output section, this value
     would be 100.  However, if the target byte size is 16 bits
     (bfd_octets_per_byte is "2"), this value would be 50.  */
d351 1
a351 1
  bfd_vma output_offset;
d353 1
a353 1
  /* The output section through which to map on output.  */
d355 2
a356 1
  struct sec *output_section;
d358 1
a358 2
  /* The alignment requirement of the section, as an exponent of 2 -
     e.g., 3 aligns to 2^3 (or 8).  */
d360 2
a361 1
  unsigned int alignment_power;
d363 1
a363 2
  /* If an input section, a pointer to a vector of relocation
     records for the data in this section.  */
d365 2
a366 1
  struct reloc_cache_entry *relocation;
d368 1
a368 2
  /* If an output section, a pointer to a vector of pointers to
     relocation records for the data in this section.  */
d370 1
a370 1
  struct reloc_cache_entry **orelocation;
d372 1
a372 1
  /* The number of relocation records in one of the above  */
d374 2
a375 1
  unsigned reloc_count;
d377 1
a377 2
  /* Information below is back end specific - and not always used
     or updated.  */
d379 1
a379 1
  /* File position of section data.  */
d381 1
a381 1
  file_ptr filepos;
d383 1
a383 1
  /* File position of relocation info.  */
d385 1
a385 1
  file_ptr rel_filepos;
d387 1
a387 1
  /* File position of line data.  */
d389 1
a389 1
  file_ptr line_filepos;
d391 1
a391 1
  /* Pointer to data for applications.  */
d393 3
a395 1
  PTR userdata;
d397 1
a397 3
  /* If the SEC_IN_MEMORY flag is set, this points to the actual
     contents.  */
  unsigned char *contents;
d399 1
a399 1
  /* Attached line number information.  */
d401 1
a401 1
  alent *lineno;
d403 1
a403 1
  /* Number of line number records.  */
d405 1
a405 1
  unsigned int lineno_count;
d407 1
a407 1
  /* Optional information about a COMDAT entry; NULL if not COMDAT.  */
d409 2
a410 1
  struct bfd_comdat_info *comdat;
d412 1
a412 3
  /* Points to the kept section if this section is a link-once section,
     and is discarded.  */
  struct sec *kept_section;
d414 1
a414 2
  /* When a section is being output, this value changes as more
     linenumbers are written out.  */
d416 1
a416 1
  file_ptr moving_line_filepos;
d418 1
a418 1
  /* What the section number is in the target world.  */
d420 2
a421 1
  int target_index;
d423 1
a423 1
  PTR used_by_bfd;
d425 1
a425 2
  /* If this is a constructor section then here is a list of the
     relocations created to relocate items within it.  */
d427 1
a427 1
  struct relent_chain *constructor_chain;
d429 3
a431 1
  /* The BFD which owns the section.  */
d433 2
a434 8
  bfd *owner;

  /* A symbol which points at this section only */
  struct symbol_cache_entry *symbol;
  struct symbol_cache_entry **symbol_ptr_ptr;

  struct bfd_link_order *link_order_head;
  struct bfd_link_order *link_order_tail;
d437 5
a441 5
/* These sections are global, and are managed by BFD.  The application
   and target back end are not permitted to change the values in
   these sections.  New code should use the section_ptr macros rather
   than referring directly to the const sections.  The const sections
   may eventually vanish.  */
d447 1
a447 1
/* the absolute section */
d451 1
a451 1
/* Pointer to the undefined section */
d455 1
a455 1
/* Pointer to the common section */
d458 1
a458 1
/* Pointer to the indirect section */
d483 1
a483 1
asection *bfd_get_section_by_name(bfd *abfd, const char *name);
a494 15
@@findex bfd_get_unique_section_name
@@subsubsection @@code{bfd_get_unique_section_name}
@@strong{Synopsis}
@@example
char *bfd_get_unique_section_name(bfd *abfd,
    const char *templat,
    int *count);
@@end example
@@strong{Description}@@*
Invent a section name that is unique in @@var{abfd} by tacking
a dot and a digit suffix onto the original @@var{templat}.  If
@@var{count} is non-NULL, then it specifies the first number
tried as a suffix to generate a unique name.  The value
pointed to by @@var{count} will be incremented in this case.

d499 1
a499 1
asection *bfd_make_section_old_way(bfd *abfd, const char *name);
d526 1
a526 1
asection *bfd_make_section_anyway(bfd *abfd, const char *name);
d546 1
a546 1
asection *bfd_make_section(bfd *, const char *name);
d579 1
a579 1
    void (*func) (bfd *abfd,
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d131 1
d135 1
d138 2
a139 1
  /* Which section in the bfd; 0..n-1 as sections are created in a bfd.  */
d143 1
d149 1
d166 3
a168 5
  /* ELF reserves 4 processor specific bits and 8 operating system
     specific bits in sh_flags; at present we can get away with just
     one in communicating between the assembler and BFD, but this
     isn't a good long-term solution.  */
#define SEC_ARCH_BIT_0 0x008
d194 6
a219 3
  /* The section contains thread local data.  */
#define SEC_THREAD_LOCAL 0x1000

d251 3
a253 4
  /* The contents of this section are to be sorted based on the sum of
     the symbol and addend values specified by the associated relocation
     entries.  Entries without associated relocation entries will be
     appended to the end of the section in an unspecified order.  */
a310 12
  /* Attempt to merge identical entities in the section.
     Entity size is given in the entsize field.  */
#define SEC_MERGE 0x20000000

  /* If given with SEC_MERGE, entities to merge are zero terminated
     strings where entsize specifies character size instead of fixed
     size entries.  */
#define SEC_STRINGS 0x40000000

  /* This section contains data about section groups.  */
#define SEC_GROUP 0x80000000

d325 1
a325 1
     output sections that have an input section.  */
d331 1
a331 3
  /* The following flags are used by the ELF linker. */

  /* Mark sections which have been allocated to segments.  */
a333 26
  /* Type of sec_info information.  */
  unsigned int sec_info_type:3;
#define ELF_INFO_TYPE_NONE      0
#define ELF_INFO_TYPE_STABS     1
#define ELF_INFO_TYPE_MERGE     2
#define ELF_INFO_TYPE_EH_FRAME  3
#define ELF_INFO_TYPE_JUST_SYMS 4

  /* Nonzero if this section uses RELA relocations, rather than REL.  */
  unsigned int use_rela_p:1;

  /* Bits used by various backends.  */
  unsigned int has_tls_reloc:1;

  /* Nonzero if this section needs the relax finalize pass.  */
  unsigned int need_finalize_relax:1;

  /* Usused bits.  */
  unsigned int flag12:1;
  unsigned int flag13:1;
  unsigned int flag14:1;
  unsigned int flag15:1;
  unsigned int flag16:4;
  unsigned int flag20:4;
  unsigned int flag24:8;

d342 1
d347 2
a348 1
      information.  */
d354 1
d360 1
d370 1
d374 1
d379 1
d384 1
d389 1
d392 2
a393 1
  /* The number of relocation records in one of the above.  */
d400 1
d404 1
d408 1
d412 1
d420 1
d424 1
d427 1
a427 2
  /* Entity size for merging purposes.  */
  unsigned int entsize;
a428 1
  /* Optional information about a COMDAT entry; NULL if not COMDAT.  */
d431 4
d437 1
d441 1
d448 1
d452 1
d455 1
a455 1
  /* A symbol which points at this section only.  */
d461 1
a461 1
@@} asection;
d473 1
a473 1
/* The absolute section.  */
d477 1
a477 1
/* Pointer to the undefined section.  */
d481 1
a481 1
/* Pointer to the common section.  */
d484 1
a484 1
/* Pointer to the indirect section.  */
a488 6
#define bfd_is_const_section(SEC)              \
 (   ((SEC) == bfd_abs_section_ptr)            \
  || ((SEC) == bfd_und_section_ptr)            \
  || ((SEC) == bfd_com_section_ptr)            \
  || ((SEC) == bfd_ind_section_ptr))

a498 26

/* Macros to handle insertion and deletion of a bfd's sections.  These
   only handle the list pointers, ie. do not adjust section_count,
   target_index etc.  */
#define bfd_section_list_remove(ABFD, PS) \
  do                                                   \
    @@{                                                  \
      asection **_ps = PS;                             \
      asection *_s = *_ps;                             \
      *_ps = _s->next;                                 \
      if (_s->next == NULL)                            \
        (ABFD)->section_tail = _ps;                    \
    @@}                                                  \
  while (0)
#define bfd_section_list_insert(ABFD, PS, S) \
  do                                                   \
    @@{                                                  \
      asection **_ps = PS;                             \
      asection *_s = S;                                \
      _s->next = *_ps;                                 \
      *_ps = _s;                                       \
      if (_s->next == NULL)                            \
        (ABFD)->section_tail = &_s->next;              \
    @@}                                                  \
  while (0)

a504 10
@@findex bfd_section_list_clear
@@subsubsection @@code{bfd_section_list_clear}
@@strong{Synopsis}
@@example
void bfd_section_list_clear (bfd *);
@@end example
@@strong{Description}@@*
Clears the section list, and also resets the section count and
hash table entries.

d599 1
a599 1
bfd_boolean bfd_set_section_flags (bfd *abfd, asection *sec, flagword flags);
d603 2
a604 2
@@var{abfd} to the value @@var{flags}. Return @@code{TRUE} on success,
@@code{FALSE} on error. Possible error returns are:
d647 1
a647 1
bfd_boolean bfd_set_section_size (bfd *abfd, asection *sec, bfd_size_type val);
d651 1
a651 1
ok, then @@code{TRUE} is returned, else @@code{FALSE}.
d665 5
a669 2
bfd_boolean bfd_set_section_contents (bfd *abfd, asection *section,
    PTR data, file_ptr offset,
d678 1
a678 1
Normally @@code{TRUE} is returned, else @@code{FALSE}. Possible error
d696 3
a698 3
bfd_boolean bfd_get_section_contents (bfd *abfd, asection *section,
    PTR location, file_ptr offset,
    bfd_size_type count);
d709 2
a710 2
with zeroes. If no errors occur, @@code{TRUE} is returned, else
@@code{FALSE}.
d716 1
a716 2
bfd_boolean bfd_copy_private_section_data (bfd *ibfd, asection *isec,
    bfd *obfd, asection *osec);
d721 1
a721 1
Return @@code{TRUE} on success, @@code{FALSE} on error.  Possible error
d745 3
a747 14
becomes empty, remove it from the output bfd.

This function won't actually do anything except twiddle flags
if called too late in the linking process, when it's not safe
to remove sections.

@@findex bfd_generic_discard_group
@@subsubsection @@code{bfd_generic_discard_group}
@@strong{Synopsis}
@@example
bfd_boolean bfd_generic_discard_group (bfd *abfd, asection *group);
@@end example
@@strong{Description}@@*
Remove all members of @@var{group} from the output.
@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d127 1
a127 1
typedef struct bfd_section
d140 1
a140 1
  struct bfd_section *next;
d360 2
a361 4
  /* Nonzero if this section has a gp reloc.  */
  unsigned int has_gp_reloc:1;

  /* Unused bits.  */
d404 1
a404 1
  struct bfd_section *output_section;
d434 1
a434 1
  void *userdata;
a451 4
  /* Points to the kept section if this section is a link-once section,
     and is discarded.  */
  struct bfd_section *kept_section;

d459 1
a459 1
  void *used_by_bfd;
d469 2
a470 2
  struct bfd_symbol *symbol;
  struct bfd_symbol **symbol_ptr_ptr;
d487 1
a487 1
extern asection bfd_abs_section;
d491 1
a491 1
extern asection bfd_und_section;
d495 1
a495 1
extern asection bfd_com_section;
d498 1
a498 1
extern asection bfd_ind_section;
d508 4
a511 4
extern const struct bfd_symbol * const bfd_abs_symbol;
extern const struct bfd_symbol * const bfd_com_symbol;
extern const struct bfd_symbol * const bfd_und_symbol;
extern const struct bfd_symbol * const bfd_ind_symbol;
d513 2
a514 1
     ((section)->_raw_size)
d564 1
a564 1
asection *bfd_get_section_by_name (bfd *abfd, const char *name);
d580 3
a582 2
char *bfd_get_unique_section_name
   (bfd *abfd, const char *templat, int *count);
d595 1
a595 1
asection *bfd_make_section_old_way (bfd *abfd, const char *name);
d622 1
a622 1
asection *bfd_make_section_anyway (bfd *abfd, const char *name);
d642 1
a642 1
asection *bfd_make_section (bfd *, const char *name);
d654 1
a654 2
bfd_boolean bfd_set_section_flags
   (bfd *abfd, asection *sec, flagword flags);
d674 5
a678 4
void bfd_map_over_sections
   (bfd *abfd,
    void (*func) (bfd *abfd, asection *sect, void *obj),
    void *obj);
d686 1
a686 1
       func (abfd, the_section, obj);
d689 1
a689 1
This is the preferred method for iterating over sections; an
d695 1
a695 1
             func (abfd, p, ...)
d702 1
a702 2
bfd_boolean bfd_set_section_size
   (bfd *abfd, asection *sec, bfd_size_type val);
d720 3
a722 3
bfd_boolean bfd_set_section_contents
   (bfd *abfd, asection *section, const void *data,
    file_ptr offset, bfd_size_type count);
d748 2
a749 2
bfd_boolean bfd_get_section_contents
   (bfd *abfd, asection *section, void *location, file_ptr offset,
d768 2
a769 2
bfd_boolean bfd_copy_private_section_data
   (bfd *ibfd, asection *isec, bfd *obfd, asection *osec);
@


