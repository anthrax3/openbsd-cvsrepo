head	1.2;
access;
symbols
	BINUTILS-2_10_1:1.1.1.2
	FSF:1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	new-binutils:1.1.1.1.0.12
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.09.12.22.24.35;	author espie;	state dead;
branches;
next	1.1;

1.1
date	97.05.29.09.20.59;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.29.09.20.59;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.09.22.07.01;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve other problems that dumb cvs can't find out by itself.

(trivial part done, `interesting' patches remain)
@
text
@This is Info file bfd.info, produced by Makeinfo-1.64 from the input
file ./bfd.texinfo.

START-INFO-DIR-ENTRY
* Bfd: (bfd).                   The Binary File Descriptor library.
END-INFO-DIR-ENTRY

   This file documents the BFD library.

   Copyright (C) 1991 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, subject to the
terms of the GNU General Public License, which includes the provision
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: bfd.info,  Node: coff,  Next: elf,  Prev: aout,  Up: BFD back ends

coff backends
=============

BFD supports a number of different flavours of coff format.  The major
differences between formats are the sizes and alignments of fields in
structures on disk, and the occasional extra field.

   Coff in all its varieties is implemented with a few common files and
a number of implementation specific files. For example, The 88k bcs
coff format is implemented in the file `coff-m88k.c'. This file
`#include's `coff/m88k.h' which defines the external structure of the
coff format for the 88k, and `coff/internal.h' which defines the
internal structure. `coff-m88k.c' also defines the relocations used by
the 88k format *Note Relocations::.

   The Intel i960 processor version of coff is implemented in
`coff-i960.c'. This file has the same structure as `coff-m88k.c',
except that it includes `coff/i960.h' rather than `coff-m88k.h'.
Porting to a new version of coff
--------------------------------

The recommended method is to select from the existing implementations
the version of coff which is most like the one you want to use.  For
example, we'll say that i386 coff is the one you select, and that your
coff flavour is called foo.  Copy `i386coff.c' to `foocoff.c', copy
`../include/coff/i386.h' to `../include/coff/foo.h', and add the lines
to `targets.c' and `Makefile.in' so that your new back end is used.
Alter the shapes of the structures in `../include/coff/foo.h' so that
they match what you need. You will probably also have to add `#ifdef's
to the code in `coff/internal.h' and `coffcode.h' if your version of
coff is too wild.

   You can verify that your new BFD backend works quite simply by
building `objdump' from the `binutils' directory, and making sure that
its version of what's going on and your host system's idea (assuming it
has the pretty standard coff dump utility, usually called `att-dump' or
just `dump') are the same.  Then clean up your code, and send what
you've done to Cygnus. Then your stuff will be in the next release, and
you won't have to keep integrating it.
How the coff backend works
--------------------------

File layout
...........

The Coff backend is split into generic routines that are applicable to
any Coff target and routines that are specific to a particular target.
The target-specific routines are further split into ones which are
basically the same for all Coff targets except that they use the
external symbol format or use different values for certain constants.

   The generic routines are in `coffgen.c'.  These routines work for
any Coff target.  They use some hooks into the target specific code;
the hooks are in a `bfd_coff_backend_data' structure, one of which
exists for each target.

   The essentially similar target-specific routines are in
`coffcode.h'.  This header file includes executable C code.  The
various Coff targets first include the appropriate Coff header file,
make any special defines that are needed, and then include `coffcode.h'.

   Some of the Coff targets then also have additional routines in the
target source file itself.

   For example, `coff-i960.c' includes `coff/internal.h' and
`coff/i960.h'.  It then defines a few constants, such as `I960', and
includes `coffcode.h'.  Since the i960 has complex relocation types,
`coff-i960.c' also includes some code to manipulate the i960 relocs.
This code is not in `coffcode.h' because it would not be used by any
other target.
Bit twiddling
.............

Each flavour of coff supported in BFD has its own header file
describing the external layout of the structures. There is also an
internal description of the coff layout, in `coff/internal.h'. A major
function of the coff backend is swapping the bytes and twiddling the
bits to translate the external form of the structures into the normal
internal form. This is all performed in the `bfd_swap'_thing_direction
routines. Some elements are different sizes between different versions
of coff; it is the duty of the coff version specific include file to
override the definitions of various packing routines in `coffcode.h'.
E.g., the size of line number entry in coff is sometimes 16 bits, and
sometimes 32 bits. `#define'ing `PUT_LNSZ_LNNO' and `GET_LNSZ_LNNO'
will select the correct one. No doubt, some day someone will find a
version of coff which has a varying field size not catered to at the
moment. To port BFD, that person will have to add more `#defines'.
Three of the bit twiddling routines are exported to `gdb';
`coff_swap_aux_in', `coff_swap_sym_in' and `coff_swap_linno_in'. `GDB'
reads the symbol table on its own, but uses BFD to fix things up.  More
of the bit twiddlers are exported for `gas'; `coff_swap_aux_out',
`coff_swap_sym_out', `coff_swap_lineno_out', `coff_swap_reloc_out',
`coff_swap_filehdr_out', `coff_swap_aouthdr_out',
`coff_swap_scnhdr_out'. `Gas' currently keeps track of all the symbol
table and reloc drudgery itself, thereby saving the internal BFD
overhead, but uses BFD to swap things on the way out, making cross
ports much safer.  Doing so also allows BFD (and thus the linker) to
use the same header files as `gas', which makes one avenue to disaster
disappear.
Symbol reading
..............

The simple canonical form for symbols used by BFD is not rich enough to
keep all the information available in a coff symbol table. The back end
gets around this problem by keeping the original symbol table around,
"behind the scenes".

   When a symbol table is requested (through a call to
`bfd_canonicalize_symtab'), a request gets through to
`coff_get_normalized_symtab'. This reads the symbol table from the coff
file and swaps all the structures inside into the internal form. It
also fixes up all the pointers in the table (represented in the file by
offsets from the first symbol in the table) into physical pointers to
elements in the new internal table. This involves some work since the
meanings of fields change depending upon context: a field that is a
pointer to another structure in the symbol table at one moment may be
the size in bytes of a structure at the next.  Another pass is made
over the table. All symbols which mark file names (`C_FILE' symbols)
are modified so that the internal string points to the value in the
auxent (the real filename) rather than the normal text associated with
the symbol (`".file"').

   At this time the symbol names are moved around. Coff stores all
symbols less than nine characters long physically within the symbol
table; longer strings are kept at the end of the file in the string
table. This pass moves all strings into memory and replaces them with
pointers to the strings.

   The symbol table is massaged once again, this time to create the
canonical table used by the BFD application. Each symbol is inspected
in turn, and a decision made (using the `sclass' field) about the
various flags to set in the `asymbol'.  *Note Symbols::. The generated
canonical table shares strings with the hidden internal symbol table.

   Any linenumbers are read from the coff file too, and attached to the
symbols which own the functions the linenumbers belong to.
Symbol writing
..............

Writing a symbol to a coff file which didn't come from a coff file will
lose any debugging information. The `asymbol' structure remembers the
BFD from which the symbol was taken, and on output the back end makes
sure that the same destination target as source target is present.

   When the symbols have come from a coff file then all the debugging
information is preserved.

   Symbol tables are provided for writing to the back end in a vector
of pointers to pointers. This allows applications like the linker to
accumulate and output large symbol tables without having to do too much
byte copying.

   This function runs through the provided symbol table and patches
each symbol marked as a file place holder (`C_FILE') to point to the
next file place holder in the list. It also marks each `offset' field
in the list with the offset from the first symbol of the current symbol.

   Another function of this procedure is to turn the canonical value
form of BFD into the form used by coff. Internally, BFD expects symbol
values to be offsets from a section base; so a symbol physically at
0x120, but in a section starting at 0x100, would have the value 0x20.
Coff expects symbols to contain their final value, so symbols have
their values changed at this point to reflect their sum with their
owning section.  This transformation uses the `output_section' field of
the `asymbol''s `asection' *Note Sections::.

   * `coff_mangle_symbols' This routine runs though the provided symbol
table and uses the offsets generated by the previous pass and the
pointers generated when the symbol table was read in to create the
structured hierachy required by coff. It changes each pointer to a
symbol into the index into the symbol table of the asymbol.

   * `coff_write_symbols' This routine runs through the symbol table
and patches up the symbols from their internal form into the coff way,
calls the bit twiddlers, and writes out the table to the file.
`coff_symbol_type'
..................

*Description*
The hidden information for an `asymbol' is described in a
`combined_entry_type':
.
     typedef struct coff_ptr_struct
     {
     
            /* Remembers the offset from the first symbol in the file for
               this symbol. Generated by coff_renumber_symbols. */
     unsigned int offset;
     
            /* Should the value of this symbol be renumbered.  Used for
               XCOFF C_BSTAT symbols.  Set by coff_slurp_symbol_table.  */
     unsigned int fix_value : 1;
     
            /* Should the tag field of this symbol be renumbered.
               Created by coff_pointerize_aux. */
     unsigned int fix_tag : 1;
     
            /* Should the endidx field of this symbol be renumbered.
               Created by coff_pointerize_aux. */
     unsigned int fix_end : 1;
     
            /* Should the x_csect.x_scnlen field be renumbered.
               Created by coff_pointerize_aux. */
     unsigned int fix_scnlen : 1;
     
            /* Fix up an XCOFF C_BINCL/C_EINCL symbol.  The value is the
               index into the line number entries.  Set by
               coff_slurp_symbol_table.  */
     unsigned int fix_line : 1;
     
            /* The container for the symbol structure as read and translated
                from the file. */
     
     union {
        union internal_auxent auxent;
        struct internal_syment syment;
      } u;
     } combined_entry_type;
     
     
     /* Each canonical asymbol really looks like this: */
     
     typedef struct coff_symbol_struct
     {
        /* The actual symbol which the rest of BFD works with */
     asymbol symbol;
     
        /* A pointer to the hidden information for this symbol */
     combined_entry_type *native;
     
        /* A pointer to the linenumber information for this symbol */
     struct lineno_cache_entry *lineno;
     
        /* Have the line numbers been relocated yet ? */
     boolean done_lineno;
     } coff_symbol_type;

`bfd_coff_backend_data'
.......................

   Special entry points for gdb to swap in coff symbol table parts:
     typedef struct
     {
       void (*_bfd_coff_swap_aux_in) PARAMS ((
            bfd            *abfd,
            PTR             ext,
            int             type,
            int             class,
            int             indaux,
            int             numaux,
            PTR             in));
     
       void (*_bfd_coff_swap_sym_in) PARAMS ((
            bfd            *abfd ,
            PTR             ext,
            PTR             in));
     
       void (*_bfd_coff_swap_lineno_in) PARAMS ((
            bfd            *abfd,
            PTR            ext,
            PTR             in));
   Special entry points for gas to swap out coff parts:
      unsigned int (*_bfd_coff_swap_aux_out) PARAMS ((
            bfd   	*abfd,
            PTR	in,
            int    	type,
            int    	class,
            int     indaux,
            int     numaux,
            PTR    	ext));
     
      unsigned int (*_bfd_coff_swap_sym_out) PARAMS ((
           bfd      *abfd,
           PTR	in,
           PTR	ext));
     
      unsigned int (*_bfd_coff_swap_lineno_out) PARAMS ((
           	bfd   	*abfd,
           	PTR	in,
     	PTR	ext));
     
      unsigned int (*_bfd_coff_swap_reloc_out) PARAMS ((
           	bfd     *abfd,
          	PTR	src,
     	PTR	dst));
     
      unsigned int (*_bfd_coff_swap_filehdr_out) PARAMS ((
           	bfd  	*abfd,
     	PTR 	in,
     	PTR 	out));
     
      unsigned int (*_bfd_coff_swap_aouthdr_out) PARAMS ((
           	bfd 	*abfd,
     	PTR 	in,
     	PTR	out));
     
      unsigned int (*_bfd_coff_swap_scnhdr_out) PARAMS ((
           	bfd  	*abfd,
           	PTR	in,
     	PTR	out));
   Special entry points for generic COFF routines to call target
dependent COFF routines:
      unsigned int _bfd_filhsz;
      unsigned int _bfd_aoutsz;
      unsigned int _bfd_scnhsz;
      unsigned int _bfd_symesz;
      unsigned int _bfd_auxesz;
      unsigned int _bfd_relsz;
      unsigned int _bfd_linesz;
      boolean _bfd_coff_long_filenames;
      boolean _bfd_coff_long_section_names;
      unsigned int _bfd_coff_default_section_alignment_power;
      void (*_bfd_coff_swap_filehdr_in) PARAMS ((
            bfd     *abfd,
            PTR     ext,
            PTR     in));
      void (*_bfd_coff_swap_aouthdr_in) PARAMS ((
            bfd     *abfd,
            PTR     ext,
            PTR     in));
      void (*_bfd_coff_swap_scnhdr_in) PARAMS ((
            bfd     *abfd,
            PTR     ext,
            PTR     in));
      void (*_bfd_coff_swap_reloc_in) PARAMS ((
            bfd     *abfd,
            PTR     ext,
            PTR     in));
      boolean (*_bfd_coff_bad_format_hook) PARAMS ((
            bfd     *abfd,
            PTR     internal_filehdr));
      boolean (*_bfd_coff_set_arch_mach_hook) PARAMS ((
            bfd     *abfd,
            PTR     internal_filehdr));
      PTR (*_bfd_coff_mkobject_hook) PARAMS ((
            bfd     *abfd,
            PTR     internal_filehdr,
            PTR     internal_aouthdr));
      flagword (*_bfd_styp_to_sec_flags_hook) PARAMS ((
            bfd     *abfd,
            PTR     internal_scnhdr,
            const char *name));
      void (*_bfd_set_alignment_hook) PARAMS ((
            bfd     *abfd,
            asection *sec,
            PTR     internal_scnhdr));
      boolean (*_bfd_coff_slurp_symbol_table) PARAMS ((
            bfd     *abfd));
      boolean (*_bfd_coff_symname_in_debug) PARAMS ((
            bfd     *abfd,
            struct internal_syment *sym));
      boolean (*_bfd_coff_pointerize_aux_hook) PARAMS ((
            bfd *abfd,
            combined_entry_type *table_base,
            combined_entry_type *symbol,
            unsigned int indaux,
            combined_entry_type *aux));
      boolean (*_bfd_coff_print_aux) PARAMS ((
            bfd *abfd,
            FILE *file,
            combined_entry_type *table_base,
            combined_entry_type *symbol,
            combined_entry_type *aux,
            unsigned int indaux));
      void (*_bfd_coff_reloc16_extra_cases) PARAMS ((
            bfd     *abfd,
            struct bfd_link_info *link_info,
            struct bfd_link_order *link_order,
            arelent *reloc,
            bfd_byte *data,
            unsigned int *src_ptr,
            unsigned int *dst_ptr));
      int (*_bfd_coff_reloc16_estimate) PARAMS ((
            bfd *abfd,
            asection *input_section,
            arelent *r,
            unsigned int shrink,
            struct bfd_link_info *link_info));
      boolean (*_bfd_coff_sym_is_global) PARAMS ((
            bfd *abfd,
            struct internal_syment *));
      boolean (*_bfd_coff_compute_section_file_positions) PARAMS ((
            bfd *abfd));
      boolean (*_bfd_coff_start_final_link) PARAMS ((
            bfd *output_bfd,
            struct bfd_link_info *info));
      boolean (*_bfd_coff_relocate_section) PARAMS ((
            bfd *output_bfd,
            struct bfd_link_info *info,
            bfd *input_bfd,
            asection *input_section,
            bfd_byte *contents,
            struct internal_reloc *relocs,
            struct internal_syment *syms,
            asection **sections));
      reloc_howto_type *(*_bfd_coff_rtype_to_howto) PARAMS ((
            bfd *abfd,
            asection *sec,
            struct internal_reloc *rel,
            struct coff_link_hash_entry *h,
            struct internal_syment *sym,
            bfd_vma *addendp));
      boolean (*_bfd_coff_adjust_symndx) PARAMS ((
            bfd *obfd,
            struct bfd_link_info *info,
            bfd *ibfd,
            asection *sec,
            struct internal_reloc *reloc,
            boolean *adjustedp));
      boolean (*_bfd_coff_link_add_one_symbol) PARAMS ((
            struct bfd_link_info *info,
            bfd *abfd,
            const char *name,
            flagword flags,
            asection *section,
            bfd_vma value,
            const char *string,
            boolean copy,
            boolean collect,
            struct bfd_link_hash_entry **hashp));
     
     } bfd_coff_backend_data;
     
     #define coff_backend_info(abfd) ((bfd_coff_backend_data *) (abfd)->xvec->backend_data)
     
     #define bfd_coff_swap_aux_in(a,e,t,c,ind,num,i) \
             ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,ind,num,i))
     
     #define bfd_coff_swap_sym_in(a,e,i) \
             ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))
     
     #define bfd_coff_swap_lineno_in(a,e,i) \
             ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))
     
     #define bfd_coff_swap_reloc_out(abfd, i, o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))
     
     #define bfd_coff_swap_lineno_out(abfd, i, o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))
     
     #define bfd_coff_swap_aux_out(a,i,t,c,ind,num,o) \
             ((coff_backend_info (a)->_bfd_coff_swap_aux_out) (a,i,t,c,ind,num,o))
     
     #define bfd_coff_swap_sym_out(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))
     
     #define bfd_coff_swap_scnhdr_out(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))
     
     #define bfd_coff_swap_filehdr_out(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))
     
     #define bfd_coff_swap_aouthdr_out(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))
     
     #define bfd_coff_filhsz(abfd) (coff_backend_info (abfd)->_bfd_filhsz)
     #define bfd_coff_aoutsz(abfd) (coff_backend_info (abfd)->_bfd_aoutsz)
     #define bfd_coff_scnhsz(abfd) (coff_backend_info (abfd)->_bfd_scnhsz)
     #define bfd_coff_symesz(abfd) (coff_backend_info (abfd)->_bfd_symesz)
     #define bfd_coff_auxesz(abfd) (coff_backend_info (abfd)->_bfd_auxesz)
     #define bfd_coff_relsz(abfd)  (coff_backend_info (abfd)->_bfd_relsz)
     #define bfd_coff_linesz(abfd) (coff_backend_info (abfd)->_bfd_linesz)
     #define bfd_coff_long_filenames(abfd) (coff_backend_info (abfd)->_bfd_coff_long_filenames)
     #define bfd_coff_long_section_names(abfd) \
             (coff_backend_info (abfd)->_bfd_coff_long_section_names)
     #define bfd_coff_default_section_alignment_power(abfd) \
     	 (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
     #define bfd_coff_swap_filehdr_in(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))
     
     #define bfd_coff_swap_aouthdr_in(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))
     
     #define bfd_coff_swap_scnhdr_in(abfd, i,o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))
     
     #define bfd_coff_swap_reloc_in(abfd, i, o) \
             ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_in) (abfd, i, o))
     
     #define bfd_coff_bad_format_hook(abfd, filehdr) \
             ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))
     
     #define bfd_coff_set_arch_mach_hook(abfd, filehdr)\
             ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
     #define bfd_coff_mkobject_hook(abfd, filehdr, aouthdr)\
             ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook) (abfd, filehdr, aouthdr))
     
     #define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name)\
             ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook) (abfd, scnhdr, name))
     
     #define bfd_coff_set_alignment_hook(abfd, sec, scnhdr)\
             ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))
     
     #define bfd_coff_slurp_symbol_table(abfd)\
             ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))
     
     #define bfd_coff_symname_in_debug(abfd, sym)\
             ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))
     
     #define bfd_coff_print_aux(abfd, file, base, symbol, aux, indaux)\
             ((coff_backend_info (abfd)->_bfd_coff_print_aux)\
              (abfd, file, base, symbol, aux, indaux))
     
     #define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr)\
             ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
              (abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr))
     
     #define bfd_coff_reloc16_estimate(abfd, section, reloc, shrink, link_info)\
             ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
              (abfd, section, reloc, shrink, link_info))
     
     #define bfd_coff_sym_is_global(abfd, sym)\
             ((coff_backend_info (abfd)->_bfd_coff_sym_is_global)\
              (abfd, sym))
     
     #define bfd_coff_compute_section_file_positions(abfd)\
             ((coff_backend_info (abfd)->_bfd_coff_compute_section_file_positions)\
              (abfd))
     
     #define bfd_coff_start_final_link(obfd, info)\
             ((coff_backend_info (obfd)->_bfd_coff_start_final_link)\
              (obfd, info))
     #define bfd_coff_relocate_section(obfd,info,ibfd,o,con,rel,isyms,secs)\
             ((coff_backend_info (ibfd)->_bfd_coff_relocate_section)\
              (obfd, info, ibfd, o, con, rel, isyms, secs))
     #define bfd_coff_rtype_to_howto(abfd, sec, rel, h, sym, addendp)\
             ((coff_backend_info (abfd)->_bfd_coff_rtype_to_howto)\
              (abfd, sec, rel, h, sym, addendp))
     #define bfd_coff_adjust_symndx(obfd, info, ibfd, sec, rel, adjustedp)\
             ((coff_backend_info (abfd)->_bfd_coff_adjust_symndx)\
              (obfd, info, ibfd, sec, rel, adjustedp))
     #define bfd_coff_link_add_one_symbol(info,abfd,name,flags,section,value,string,cp,coll,hashp)\
             ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
              (info, abfd, name, flags, section, value, string, cp, coll, hashp))

Writing relocations
...................

   To write relocations, the back end steps though the canonical
relocation table and create an `internal_reloc'. The symbol index to
use is removed from the `offset' field in the symbol table supplied.
The address comes directly from the sum of the section base address and
the relocation offset; the type is dug directly from the howto field.
Then the `internal_reloc' is swapped into the shape of an
`external_reloc' and written out to disk.
Reading linenumbers
...................

Creating the linenumber table is done by reading in the entire coff
linenumber table, and creating another table for internal use.

   A coff linenumber table is structured so that each function is
marked as having a line number of 0. Each line within the function is
an offset from the first line in the function. The base of the line
number information for the table is stored in the symbol associated
with the function.

   The information is copied from the external to the internal table,
and each symbol which marks a function is marked by pointing its...

   How does this work ?
Reading relocations
...................

Coff relocations are easily transformed into the internal BFD form
(`arelent').

   Reading a coff relocation table is done in the following stages:

   * Read the entire coff relocation table into memory.

   * Process each relocation in turn; first swap it from the external
     to the internal form.

   * Turn the symbol referenced in the relocation's symbol index into a
     pointer into the canonical symbol table.  This table is the same
     as the one returned by a call to `bfd_canonicalize_symtab'. The
     back end will call that routine and save the result if a
     canonicalization hasn't been done.

   * The reloc index is turned into a pointer to a howto structure, in
     a back end specific way. For instance, the 386 and 960 use the
     `r_type' to directly produce an index into a howto table vector;
     the 88k subtracts a number from the `r_type' field and creates an
     addend field.

File: bfd.info,  Node: elf,  Prev: coff,  Up: BFD back ends

ELF backends
============

BFD support for ELF formats is being worked on.  Currently, the best
supported back ends are for sparc and i386 (running svr4 or Solaris 2).

   Documentation of the internals of the support code still needs to be
written.  The code is changing quickly enough that we haven't bothered
yet.
`bfd_elf_find_section'
......................

*Synopsis*
     struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
   *Description*
Helper functions for GDB to locate the string tables.  Since BFD hides
string tables from callers, GDB needs to use an internal hook to find
them.  Sun's .stabstr, in particular, isn't even pointed to by the
.stab section, so ordinary mechanisms wouldn't work to find it, even if
we had some.

File: bfd.info,  Node: Index,  Prev: BFD back ends,  Up: Top

Index
*****

* Menu:

* _bfd_final_link_relocate:             Relocating the section contents.
* _bfd_generic_link_add_archive_symbols: Adding symbols from an archive.
* _bfd_generic_link_add_one_symbol:     Adding symbols from an object file.
* _bfd_link_add_symbols in target vector: Adding Symbols to the Hash Table.
* _bfd_link_final_link in target vector: Performing the Final Link.
* _bfd_link_hash_table_create in target vector: Creating a Linker Hash Table.
* _bfd_relocate_contents:               Relocating the section contents.
* aout_SIZE_machine_type:               aout.
* aout_SIZE_mkobject:                   aout.
* aout_SIZE_new_section_hook:           aout.
* aout_SIZE_set_arch_mach:              aout.
* aout_SIZE_some_aout_object_p:         aout.
* aout_SIZE_swap_exec_header_in:        aout.
* aout_SIZE_swap_exec_header_out:       aout.
* arelent_chain:                        typedef arelent.
* BFD:                                  Overview.
* BFD canonical format:                 Canonical format.
* bfd_alloc:                            Opening and Closing.
* bfd_arch_bits_per_address:            Architectures.
* bfd_arch_bits_per_byte:               Architectures.
* bfd_arch_get_compatible:              Architectures.
* bfd_cache_close:                      File Caching.
* bfd_cache_init:                       File Caching.
* bfd_cache_lookup:                     File Caching.
* bfd_cache_lookup_worker:              File Caching.
* BFD_CACHE_MAX_OPEN macro:             File Caching.
* bfd_canonicalize_reloc:               BFD front end.
* bfd_canonicalize_symtab:              symbol handling functions.
* bfd_check_format:                     Formats.
* bfd_check_format_matches:             Formats.
* bfd_close:                            Opening and Closing.
* bfd_close_all_done:                   Opening and Closing.
* bfd_coff_backend_data:                coff.
* bfd_copy_private_bfd_data:            BFD front end.
* bfd_copy_private_section_data:        section prototypes.
* bfd_copy_private_symbol_data:         symbol handling functions.
* bfd_core_file_failing_command:        Core Files.
* bfd_core_file_failing_signal:         Core Files.
* bfd_create:                           Opening and Closing.
* bfd_decode_symclass:                  symbol handling functions.
* bfd_default_arch_struct:              Architectures.
* bfd_default_compatible:               Architectures.
* bfd_default_reloc_type_lookup:        howto manager.
* bfd_default_scan:                     Architectures.
* bfd_default_set_arch_mach:            Architectures.
* bfd_elf_find_section:                 elf.
* bfd_errmsg:                           BFD front end.
* bfd_fdopenr:                          Opening and Closing.
* bfd_find_target:                      bfd_target.
* bfd_format_string:                    Formats.
* bfd_generic_get_relocated_section_contents: howto manager.
* bfd_generic_relax_section:            howto manager.
* bfd_get_arch:                         Architectures.
* bfd_get_arch_info:                    Architectures.
* bfd_get_error:                        BFD front end.
* bfd_get_gp_size:                      BFD front end.
* bfd_get_mach:                         Architectures.
* bfd_get_mtime:                        BFD front end.
* bfd_get_next_mapent:                  Archives.
* bfd_get_reloc_code_name:              howto manager.
* bfd_get_reloc_size:                   typedef arelent.
* bfd_get_reloc_upper_bound:            BFD front end.
* bfd_get_section_by_name:              section prototypes.
* bfd_get_section_contents:             section prototypes.
* bfd_get_size <1>:                     Internal.
* bfd_get_size:                         BFD front end.
* bfd_get_symtab_upper_bound:           symbol handling functions.
* bfd_h_put_size:                       Internal.
* bfd_hash_allocate:                    Creating and Freeing a Hash Table.
* bfd_hash_lookup:                      Looking Up or Entering a String.
* bfd_hash_newfunc:                     Creating and Freeing a Hash Table.
* bfd_hash_table_free:                  Creating and Freeing a Hash Table.
* bfd_hash_table_init:                  Creating and Freeing a Hash Table.
* bfd_hash_table_init_n:                Creating and Freeing a Hash Table.
* bfd_hash_traverse:                    Traversing a Hash Table.
* bfd_init:                             Initialization.
* bfd_install_relocation:               typedef arelent.
* bfd_is_local_label:                   symbol handling functions.
* bfd_is_local_label_name:              symbol handling functions.
* bfd_last_cache:                       File Caching.
* bfd_link_split_section:               Writing the symbol table.
* bfd_log2:                             Internal.
* bfd_lookup_arch:                      Architectures.
* bfd_make_debug_symbol:                symbol handling functions.
* bfd_make_empty_symbol:                symbol handling functions.
* bfd_make_section:                     section prototypes.
* bfd_make_section_anyway:              section prototypes.
* bfd_make_section_old_way:             section prototypes.
* bfd_map_over_sections:                section prototypes.
* bfd_merge_private_bfd_data:           BFD front end.
* bfd_open_file:                        File Caching.
* bfd_openr:                            Opening and Closing.
* bfd_openr_next_archived_file:         Archives.
* bfd_openstreamr:                      Opening and Closing.
* bfd_openw:                            Opening and Closing.
* bfd_perform_relocation:               typedef arelent.
* bfd_perror:                           BFD front end.
* bfd_print_symbol_vandf:               symbol handling functions.
* bfd_printable_arch_mach:              Architectures.
* bfd_printable_name:                   Architectures.
* bfd_put_size:                         Internal.
* BFD_RELOC_12_PCREL:                   howto manager.
* BFD_RELOC_14:                         howto manager.
* BFD_RELOC_16:                         howto manager.
* BFD_RELOC_16_BASEREL:                 howto manager.
* BFD_RELOC_16_GOT_PCREL:               howto manager.
* BFD_RELOC_16_GOTOFF:                  howto manager.
* BFD_RELOC_16_PCREL:                   howto manager.
* BFD_RELOC_16_PCREL_S2:                howto manager.
* BFD_RELOC_16_PLT_PCREL:               howto manager.
* BFD_RELOC_16_PLTOFF:                  howto manager.
* BFD_RELOC_23_PCREL_S2:                howto manager.
* BFD_RELOC_24:                         howto manager.
* BFD_RELOC_24_PCREL:                   howto manager.
* BFD_RELOC_24_PLT_PCREL:               howto manager.
* BFD_RELOC_26:                         howto manager.
* BFD_RELOC_32:                         howto manager.
* BFD_RELOC_32_BASEREL:                 howto manager.
* BFD_RELOC_32_GOT_PCREL:               howto manager.
* BFD_RELOC_32_GOTOFF:                  howto manager.
* BFD_RELOC_32_PCREL:                   howto manager.
* BFD_RELOC_32_PCREL_S2:                howto manager.
* BFD_RELOC_32_PLT_PCREL:               howto manager.
* BFD_RELOC_32_PLTOFF:                  howto manager.
* BFD_RELOC_386_COPY:                   howto manager.
* BFD_RELOC_386_GLOB_DAT:               howto manager.
* BFD_RELOC_386_GOT32:                  howto manager.
* BFD_RELOC_386_GOTOFF:                 howto manager.
* BFD_RELOC_386_GOTPC:                  howto manager.
* BFD_RELOC_386_JUMP_SLOT:              howto manager.
* BFD_RELOC_386_PLT32:                  howto manager.
* BFD_RELOC_386_RELATIVE:               howto manager.
* BFD_RELOC_64:                         howto manager.
* BFD_RELOC_64_PCREL:                   howto manager.
* BFD_RELOC_68K_GLOB_DAT:               howto manager.
* BFD_RELOC_68K_JMP_SLOT:               howto manager.
* BFD_RELOC_68K_RELATIVE:               howto manager.
* BFD_RELOC_8:                          howto manager.
* BFD_RELOC_8_BASEREL:                  howto manager.
* BFD_RELOC_8_FFnn:                     howto manager.
* BFD_RELOC_8_GOT_PCREL:                howto manager.
* BFD_RELOC_8_GOTOFF:                   howto manager.
* BFD_RELOC_8_PCREL:                    howto manager.
* BFD_RELOC_8_PLT_PCREL:                howto manager.
* BFD_RELOC_8_PLTOFF:                   howto manager.
* BFD_RELOC_ALPHA_CODEADDR:             howto manager.
* BFD_RELOC_ALPHA_ELF_LITERAL:          howto manager.
* BFD_RELOC_ALPHA_GPDISP:               howto manager.
* BFD_RELOC_ALPHA_GPDISP_HI16:          howto manager.
* BFD_RELOC_ALPHA_GPDISP_LO16:          howto manager.
* BFD_RELOC_ALPHA_HINT:                 howto manager.
* BFD_RELOC_ALPHA_LINKAGE:              howto manager.
* BFD_RELOC_ALPHA_LITERAL:              howto manager.
* BFD_RELOC_ALPHA_LITUSE:               howto manager.
* BFD_RELOC_ARM_ADR_IMM:                howto manager.
* BFD_RELOC_ARM_CP_OFF_IMM:             howto manager.
* BFD_RELOC_ARM_HWLITERAL:              howto manager.
* BFD_RELOC_ARM_IMMEDIATE:              howto manager.
* BFD_RELOC_ARM_IN_POOL:                howto manager.
* BFD_RELOC_ARM_LDR_IMM:                howto manager.
* BFD_RELOC_ARM_LITERAL:                howto manager.
* BFD_RELOC_ARM_MULTI:                  howto manager.
* BFD_RELOC_ARM_OFFSET_IMM:             howto manager.
* BFD_RELOC_ARM_OFFSET_IMM8:            howto manager.
* BFD_RELOC_ARM_PCREL_BRANCH:           howto manager.
* BFD_RELOC_ARM_SHIFT_IMM:              howto manager.
* BFD_RELOC_ARM_SWI:                    howto manager.
* BFD_RELOC_ARM_THUMB_ADD:              howto manager.
* BFD_RELOC_ARM_THUMB_IMM:              howto manager.
* BFD_RELOC_ARM_THUMB_OFFSET:           howto manager.
* BFD_RELOC_ARM_THUMB_SHIFT:            howto manager.
* bfd_reloc_code_type:                  howto manager.
* BFD_RELOC_CTOR:                       howto manager.
* BFD_RELOC_D10V_10_PCREL_L:            howto manager.
* BFD_RELOC_D10V_10_PCREL_R:            howto manager.
* BFD_RELOC_D10V_18:                    howto manager.
* BFD_RELOC_D10V_18_PCREL:              howto manager.
* BFD_RELOC_GPREL16:                    howto manager.
* BFD_RELOC_GPREL32:                    howto manager.
* BFD_RELOC_HI16:                       howto manager.
* BFD_RELOC_HI16_BASEREL:               howto manager.
* BFD_RELOC_HI16_GOTOFF:                howto manager.
* BFD_RELOC_HI16_PLTOFF:                howto manager.
* BFD_RELOC_HI16_S:                     howto manager.
* BFD_RELOC_HI16_S_BASEREL:             howto manager.
* BFD_RELOC_HI16_S_GOTOFF:              howto manager.
* BFD_RELOC_HI16_S_PLTOFF:              howto manager.
* BFD_RELOC_HI22:                       howto manager.
* BFD_RELOC_I960_CALLJ:                 howto manager.
* BFD_RELOC_LO10:                       howto manager.
* BFD_RELOC_LO16:                       howto manager.
* BFD_RELOC_LO16_BASEREL:               howto manager.
* BFD_RELOC_LO16_GOTOFF:                howto manager.
* BFD_RELOC_LO16_PLTOFF:                howto manager.
* BFD_RELOC_M32R_10_PCREL:              howto manager.
* BFD_RELOC_M32R_18_PCREL:              howto manager.
* BFD_RELOC_M32R_24:                    howto manager.
* BFD_RELOC_M32R_26_PCREL:              howto manager.
* BFD_RELOC_M32R_HI16_SLO:              howto manager.
* BFD_RELOC_M32R_HI16_ULO:              howto manager.
* BFD_RELOC_M32R_LO16:                  howto manager.
* BFD_RELOC_M32R_SDA16:                 howto manager.
* BFD_RELOC_MIPS16_GPREL:               howto manager.
* BFD_RELOC_MIPS16_JMP:                 howto manager.
* BFD_RELOC_MIPS_CALL16:                howto manager.
* BFD_RELOC_MIPS_CALL_HI16:             howto manager.
* BFD_RELOC_MIPS_CALL_LO16:             howto manager.
* BFD_RELOC_MIPS_GOT16:                 howto manager.
* BFD_RELOC_MIPS_GOT_HI16:              howto manager.
* BFD_RELOC_MIPS_GOT_LO16:              howto manager.
* BFD_RELOC_MIPS_GPREL:                 howto manager.
* BFD_RELOC_MIPS_GPREL32:               howto manager.
* BFD_RELOC_MIPS_JMP:                   howto manager.
* BFD_RELOC_MIPS_LITERAL:               howto manager.
* BFD_RELOC_MN10300_16_PCREL:           howto manager.
* BFD_RELOC_MN10300_32_PCREL:           howto manager.
* BFD_RELOC_NONE:                       howto manager.
* BFD_RELOC_NS32K_DISP_16:              howto manager.
* BFD_RELOC_NS32K_DISP_16_PCREL:        howto manager.
* BFD_RELOC_NS32K_DISP_32:              howto manager.
* BFD_RELOC_NS32K_DISP_32_PCREL:        howto manager.
* BFD_RELOC_NS32K_DISP_8:               howto manager.
* BFD_RELOC_NS32K_DISP_8_PCREL:         howto manager.
* BFD_RELOC_NS32K_IMM_16:               howto manager.
* BFD_RELOC_NS32K_IMM_16_PCREL:         howto manager.
* BFD_RELOC_NS32K_IMM_32:               howto manager.
* BFD_RELOC_NS32K_IMM_32_PCREL:         howto manager.
* BFD_RELOC_NS32K_IMM_8:                howto manager.
* BFD_RELOC_NS32K_IMM_8_PCREL:          howto manager.
* BFD_RELOC_PCREL_HI16_S:               howto manager.
* BFD_RELOC_PCREL_LO16:                 howto manager.
* BFD_RELOC_PPC_B16:                    howto manager.
* BFD_RELOC_PPC_B16_BRNTAKEN:           howto manager.
* BFD_RELOC_PPC_B16_BRTAKEN:            howto manager.
* BFD_RELOC_PPC_B26:                    howto manager.
* BFD_RELOC_PPC_BA16:                   howto manager.
* BFD_RELOC_PPC_BA16_BRNTAKEN:          howto manager.
* BFD_RELOC_PPC_BA16_BRTAKEN:           howto manager.
* BFD_RELOC_PPC_BA26:                   howto manager.
* BFD_RELOC_PPC_COPY:                   howto manager.
* BFD_RELOC_PPC_EMB_BIT_FLD:            howto manager.
* BFD_RELOC_PPC_EMB_MRKREF:             howto manager.
* BFD_RELOC_PPC_EMB_NADDR16:            howto manager.
* BFD_RELOC_PPC_EMB_NADDR16_HA:         howto manager.
* BFD_RELOC_PPC_EMB_NADDR16_HI:         howto manager.
* BFD_RELOC_PPC_EMB_NADDR16_LO:         howto manager.
* BFD_RELOC_PPC_EMB_NADDR32:            howto manager.
* BFD_RELOC_PPC_EMB_RELSDA:             howto manager.
* BFD_RELOC_PPC_EMB_RELSEC16:           howto manager.
* BFD_RELOC_PPC_EMB_RELST_HA:           howto manager.
* BFD_RELOC_PPC_EMB_RELST_HI:           howto manager.
* BFD_RELOC_PPC_EMB_RELST_LO:           howto manager.
* BFD_RELOC_PPC_EMB_SDA21:              howto manager.
* BFD_RELOC_PPC_EMB_SDA2I16:            howto manager.
* BFD_RELOC_PPC_EMB_SDA2REL:            howto manager.
* BFD_RELOC_PPC_EMB_SDAI16:             howto manager.
* BFD_RELOC_PPC_GLOB_DAT:               howto manager.
* BFD_RELOC_PPC_JMP_SLOT:               howto manager.
* BFD_RELOC_PPC_LOCAL24PC:              howto manager.
* BFD_RELOC_PPC_RELATIVE:               howto manager.
* BFD_RELOC_PPC_TOC16:                  howto manager.
* BFD_RELOC_RVA:                        howto manager.
* BFD_RELOC_SH_ALIGN:                   howto manager.
* BFD_RELOC_SH_CODE:                    howto manager.
* BFD_RELOC_SH_COUNT:                   howto manager.
* BFD_RELOC_SH_DATA:                    howto manager.
* BFD_RELOC_SH_IMM4:                    howto manager.
* BFD_RELOC_SH_IMM4BY2:                 howto manager.
* BFD_RELOC_SH_IMM4BY4:                 howto manager.
* BFD_RELOC_SH_IMM8:                    howto manager.
* BFD_RELOC_SH_IMM8BY2:                 howto manager.
* BFD_RELOC_SH_IMM8BY4:                 howto manager.
* BFD_RELOC_SH_LABEL:                   howto manager.
* BFD_RELOC_SH_PCDISP12BY2:             howto manager.
* BFD_RELOC_SH_PCDISP8BY2:              howto manager.
* BFD_RELOC_SH_PCRELIMM8BY2:            howto manager.
* BFD_RELOC_SH_PCRELIMM8BY4:            howto manager.
* BFD_RELOC_SH_SWITCH16:                howto manager.
* BFD_RELOC_SH_SWITCH32:                howto manager.
* BFD_RELOC_SH_USES:                    howto manager.
* BFD_RELOC_SPARC13:                    howto manager.
* BFD_RELOC_SPARC22:                    howto manager.
* BFD_RELOC_SPARC_10:                   howto manager.
* BFD_RELOC_SPARC_11:                   howto manager.
* BFD_RELOC_SPARC_5:                    howto manager.
* BFD_RELOC_SPARC_6:                    howto manager.
* BFD_RELOC_SPARC_64:                   howto manager.
* BFD_RELOC_SPARC_7:                    howto manager.
* BFD_RELOC_SPARC_BASE13:               howto manager.
* BFD_RELOC_SPARC_BASE22:               howto manager.
* BFD_RELOC_SPARC_COPY:                 howto manager.
* BFD_RELOC_SPARC_GLOB_DAT:             howto manager.
* BFD_RELOC_SPARC_GLOB_JMP:             howto manager.
* BFD_RELOC_SPARC_GOT10:                howto manager.
* BFD_RELOC_SPARC_GOT13:                howto manager.
* BFD_RELOC_SPARC_GOT22:                howto manager.
* BFD_RELOC_SPARC_HH22:                 howto manager.
* BFD_RELOC_SPARC_HM10:                 howto manager.
* BFD_RELOC_SPARC_JMP_SLOT:             howto manager.
* BFD_RELOC_SPARC_LM22:                 howto manager.
* BFD_RELOC_SPARC_OLO10:                howto manager.
* BFD_RELOC_SPARC_PC10:                 howto manager.
* BFD_RELOC_SPARC_PC22:                 howto manager.
* BFD_RELOC_SPARC_PC_HH22:              howto manager.
* BFD_RELOC_SPARC_PC_HM10:              howto manager.
* BFD_RELOC_SPARC_PC_LM22:              howto manager.
* BFD_RELOC_SPARC_RELATIVE:             howto manager.
* BFD_RELOC_SPARC_UA32:                 howto manager.
* BFD_RELOC_SPARC_WDISP16:              howto manager.
* BFD_RELOC_SPARC_WDISP19:              howto manager.
* BFD_RELOC_SPARC_WDISP22:              howto manager.
* BFD_RELOC_SPARC_WPLT30:               howto manager.
* bfd_reloc_type_lookup:                howto manager.
* bfd_scan_arch:                        Architectures.
* bfd_scan_vma:                         BFD front end.
* bfd_set_arch_info:                    Architectures.
* bfd_set_archive_head:                 Archives.
* bfd_set_default_target:               bfd_target.
* bfd_set_error:                        BFD front end.
* bfd_set_error_handler:                BFD front end.
* bfd_set_error_program_name:           BFD front end.
* bfd_set_file_flags:                   BFD front end.
* bfd_set_format:                       Formats.
* bfd_set_gp_size:                      BFD front end.
* bfd_set_private_flags:                BFD front end.
* bfd_set_reloc:                        BFD front end.
* bfd_set_section_contents:             section prototypes.
* bfd_set_section_flags:                section prototypes.
* bfd_set_section_size:                 section prototypes.
* bfd_set_start_address:                BFD front end.
* bfd_set_symtab:                       symbol handling functions.
* bfd_symbol_info:                      symbol handling functions.
* bfd_target_list:                      bfd_target.
* bfd_write_bigendian_4byte_int:        Internal.
* coff_symbol_type:                     coff.
* core_file_matches_executable_p:       Core Files.
* Hash tables:                          Hash Tables.
* internal object-file format:          Canonical format.
* Linker:                               Linker Functions.
* stuff:                                BFD front end.
* target vector (_bfd_final_link):      Performing the Final Link.
* target vector (_bfd_link_add_symbols): Adding Symbols to the Hash Table.
* target vector (_bfd_link_hash_table_create): Creating a Linker Hash Table.
* The HOWTO Macro:                      typedef arelent.
* what is it?:                          Overview.


@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@@


1.1.1.2
log
@Long delayed import of binutils-2.10.1. Turns out art@@ needs some alpha
bug-fixes...
@
text
@d1 2
a2 1
This is bfd.info, produced by makeinfo version 4.0 from bfd.texinfo.
d27 1
a27 1
File: bfd.info,  Node: Differing file formats,  Next: Adding symbols from an object file,  Prev: Adding Symbols to the Hash Table,  Up: Adding Symbols to the Hash Table
d29 2
a30 2
Differing file formats
......................
d32 233
a264 408
   Normally all the files involved in a link will be of the same
format, but it is also possible to link together different format
object files, and the back end must support that.  The
`_bfd_link_add_symbols' entry point is called via the target vector of
the file to be added.  This has an important consequence: the function
may not assume that the hash table is the type created by the
corresponding `_bfd_link_hash_table_create' vector.  All the
`_bfd_link_add_symbols' function can assume about the hash table is
that it is derived from `struct bfd_link_hash_table'.

   Sometimes the `_bfd_link_add_symbols' function must store some
information in the hash table entry to be used by the `_bfd_final_link'
function.  In such a case the `creator' field of the hash table must be
checked to make sure that the hash table was created by an object file
of the same format.

   The `_bfd_final_link' routine must be prepared to handle a hash
entry without any extra information added by the
`_bfd_link_add_symbols' function.  A hash entry without extra
information will also occur when the linker script directs the linker
to create a symbol.  Note that, regardless of how a hash table entry is
added, all the fields will be initialized to some sort of null value by
the hash table entry initialization function.

   See `ecoff_link_add_externals' for an example of how to check the
`creator' field before saving information (in this case, the ECOFF
external symbol debugging information) in a hash table entry.


File: bfd.info,  Node: Adding symbols from an object file,  Next: Adding symbols from an archive,  Prev: Differing file formats,  Up: Adding Symbols to the Hash Table

Adding symbols from an object file
..................................

   When the `_bfd_link_add_symbols' routine is passed an object file,
it must add all externally visible symbols in that object file to the
hash table.  The actual work of adding the symbol to the hash table is
normally handled by the function `_bfd_generic_link_add_one_symbol'.
The `_bfd_link_add_symbols' routine is responsible for reading all the
symbols from the object file and passing the correct information to
`_bfd_generic_link_add_one_symbol'.

   The `_bfd_link_add_symbols' routine should not use
`bfd_canonicalize_symtab' to read the symbols.  The point of providing
this routine is to avoid the overhead of converting the symbols into
generic `asymbol' structures.

   `_bfd_generic_link_add_one_symbol' handles the details of combining
common symbols, warning about multiple definitions, and so forth.  It
takes arguments which describe the symbol to add, notably symbol flags,
a section, and an offset.  The symbol flags include such things as
`BSF_WEAK' or `BSF_INDIRECT'.  The section is a section in the object
file, or something like `bfd_und_section_ptr' for an undefined symbol
or `bfd_com_section_ptr' for a common symbol.

   If the `_bfd_final_link' routine is also going to need to read the
symbol information, the `_bfd_link_add_symbols' routine should save it
somewhere attached to the object file BFD.  However, the information
should only be saved if the `keep_memory' field of the `info' argument
is true, so that the `-no-keep-memory' linker switch is effective.

   The a.out function which adds symbols from an object file is
`aout_link_add_object_symbols', and most of the interesting work is in
`aout_link_add_symbols'.  The latter saves pointers to the hash tables
entries created by `_bfd_generic_link_add_one_symbol' indexed by symbol
number, so that the `_bfd_final_link' routine does not have to call the
hash table lookup routine to locate the entry.


File: bfd.info,  Node: Adding symbols from an archive,  Prev: Adding symbols from an object file,  Up: Adding Symbols to the Hash Table

Adding symbols from an archive
..............................

   When the `_bfd_link_add_symbols' routine is passed an archive, it
must look through the symbols defined by the archive and decide which
elements of the archive should be included in the link.  For each such
element it must call the `add_archive_element' linker callback, and it
must add the symbols from the object file to the linker hash table.

   In most cases the work of looking through the symbols in the archive
should be done by the `_bfd_generic_link_add_archive_symbols' function.
This function builds a hash table from the archive symbol table and
looks through the list of undefined symbols to see which elements
should be included.  `_bfd_generic_link_add_archive_symbols' is passed
a function to call to make the final decision about adding an archive
element to the link and to do the actual work of adding the symbols to
the linker hash table.

   The function passed to `_bfd_generic_link_add_archive_symbols' must
read the symbols of the archive element and decide whether the archive
element should be included in the link.  If the element is to be
included, the `add_archive_element' linker callback routine must be
called with the element as an argument, and the elements symbols must
be added to the linker hash table just as though the element had itself
been passed to the `_bfd_link_add_symbols' function.

   When the a.out `_bfd_link_add_symbols' function receives an archive,
it calls `_bfd_generic_link_add_archive_symbols' passing
`aout_link_check_archive_element' as the function argument.
`aout_link_check_archive_element' calls `aout_link_check_ar_symbols'.
If the latter decides to add the element (an element is only added if
it provides a real, non-common, definition for a previously undefined
or common symbol) it calls the `add_archive_element' callback and then
`aout_link_check_archive_element' calls `aout_link_add_symbols' to
actually add the symbols to the linker hash table.

   The ECOFF back end is unusual in that it does not normally call
`_bfd_generic_link_add_archive_symbols', because ECOFF archives already
contain a hash table of symbols.  The ECOFF back end searches the
archive itself to avoid the overhead of creating a new hash table.


File: bfd.info,  Node: Performing the Final Link,  Prev: Adding Symbols to the Hash Table,  Up: Linker Functions

Performing the final link
-------------------------

   When all the input files have been processed, the linker calls the
`_bfd_final_link' entry point of the output BFD.  This routine is
responsible for producing the final output file, which has several
aspects.  It must relocate the contents of the input sections and copy
the data into the output sections.  It must build an output symbol
table including any local symbols from the input files and the global
symbols from the hash table.  When producing relocateable output, it
must modify the input relocs and write them into the output file.
There may also be object format dependent work to be done.

   The linker will also call the `write_object_contents' entry point
when the BFD is closed.  The two entry points must work together in
order to produce the correct output file.

   The details of how this works are inevitably dependent upon the
specific object file format.  The a.out `_bfd_final_link' routine is
`NAME(aout,final_link)'.

* Menu:

* Information provided by the linker::
* Relocating the section contents::
* Writing the symbol table::


File: bfd.info,  Node: Information provided by the linker,  Next: Relocating the section contents,  Prev: Performing the Final Link,  Up: Performing the Final Link

Information provided by the linker
..................................

   Before the linker calls the `_bfd_final_link' entry point, it sets
up some data structures for the function to use.

   The `input_bfds' field of the `bfd_link_info' structure will point
to a list of all the input files included in the link.  These files are
linked through the `link_next' field of the `bfd' structure.

   Each section in the output file will have a list of `link_order'
structures attached to the `link_order_head' field (the `link_order'
structure is defined in `bfdlink.h').  These structures describe how to
create the contents of the output section in terms of the contents of
various input sections, fill constants, and, eventually, other types of
information.  They also describe relocs that must be created by the BFD
backend, but do not correspond to any input file; this is used to
support -Ur, which builds constructors while generating a relocateable
object file.


File: bfd.info,  Node: Relocating the section contents,  Next: Writing the symbol table,  Prev: Information provided by the linker,  Up: Performing the Final Link

Relocating the section contents
...............................

   The `_bfd_final_link' function should look through the `link_order'
structures attached to each section of the output file.  Each
`link_order' structure should either be handled specially, or it should
be passed to the function `_bfd_default_link_order' which will do the
right thing (`_bfd_default_link_order' is defined in `linker.c').

   For efficiency, a `link_order' of type `bfd_indirect_link_order'
whose associated section belongs to a BFD of the same format as the
output BFD must be handled specially.  This type of `link_order'
describes part of an output section in terms of a section belonging to
one of the input files.  The `_bfd_final_link' function should read the
contents of the section and any associated relocs, apply the relocs to
the section contents, and write out the modified section contents.  If
performing a relocateable link, the relocs themselves must also be
modified and written out.

   The functions `_bfd_relocate_contents' and
`_bfd_final_link_relocate' provide some general support for performing
the actual relocations, notably overflow checking.  Their arguments
include information about the symbol the relocation is against and a
`reloc_howto_type' argument which describes the relocation to perform.
These functions are defined in `reloc.c'.

   The a.out function which handles reading, relocating, and writing
section contents is `aout_link_input_section'.  The actual relocation
is done in `aout_link_input_section_std' and
`aout_link_input_section_ext'.


File: bfd.info,  Node: Writing the symbol table,  Prev: Relocating the section contents,  Up: Performing the Final Link

Writing the symbol table
........................

   The `_bfd_final_link' function must gather all the symbols in the
input files and write them out.  It must also write out all the symbols
in the global hash table.  This must be controlled by the `strip' and
`discard' fields of the `bfd_link_info' structure.

   The local symbols of the input files will not have been entered into
the linker hash table.  The `_bfd_final_link' routine must consider
each input file and include the symbols in the output file.  It may be
convenient to do this when looking through the `link_order' structures,
or it may be done by stepping through the `input_bfds' list.

   The `_bfd_final_link' routine must also traverse the global hash
table to gather all the externally visible symbols.  It is possible
that most of the externally visible symbols may be written out when
considering the symbols of each input file, but it is still necessary
to traverse the hash table since the linker script may have defined
some symbols that are not in any of the input files.

   The `strip' field of the `bfd_link_info' structure controls which
symbols are written out.  The possible values are listed in
`bfdlink.h'.  If the value is `strip_some', then the `keep_hash' field
of the `bfd_link_info' structure is a hash table of symbols to keep;
each symbol should be looked up in this hash table, and only symbols
which are present should be included in the output file.

   If the `strip' field of the `bfd_link_info' structure permits local
symbols to be written out, the `discard' field is used to further
controls which local symbols are included in the output file.  If the
value is `discard_l', then all local symbols which begin with a certain
prefix are discarded; this is controlled by the
`bfd_is_local_label_name' entry point.

   The a.out backend handles symbols by calling
`aout_link_write_symbols' on each input BFD and then traversing the
global hash table with the function `aout_link_write_other_symbol'.  It
builds a string table while writing out the symbols, which is written
to the output file at the end of `NAME(aout,final_link)'.

`bfd_link_split_section'
........................

   *Synopsis*
     boolean bfd_link_split_section(bfd *abfd, asection *sec);
   *Description*
Return nonzero if SEC should be split during a reloceatable or final
link.
     #define bfd_link_split_section(abfd, sec) \
            BFD_SEND (abfd, _bfd_link_split_section, (abfd, sec))


File: bfd.info,  Node: Hash Tables,  Prev: Linker Functions,  Up: BFD front end

Hash Tables
===========

   BFD provides a simple set of hash table functions.  Routines are
provided to initialize a hash table, to free a hash table, to look up a
string in a hash table and optionally create an entry for it, and to
traverse a hash table.  There is currently no routine to delete an
string from a hash table.

   The basic hash table does not permit any data to be stored with a
string.  However, a hash table is designed to present a base class from
which other types of hash tables may be derived.  These derived types
may store additional information with the string.  Hash tables were
implemented in this way, rather than simply providing a data pointer in
a hash table entry, because they were designed for use by the linker
back ends.  The linker may create thousands of hash table entries, and
the overhead of allocating private data and storing and following
pointers becomes noticeable.

   The basic hash table code is in `hash.c'.

* Menu:

* Creating and Freeing a Hash Table::
* Looking Up or Entering a String::
* Traversing a Hash Table::
* Deriving a New Hash Table Type::


File: bfd.info,  Node: Creating and Freeing a Hash Table,  Next: Looking Up or Entering a String,  Prev: Hash Tables,  Up: Hash Tables

Creating and freeing a hash table
---------------------------------

   To create a hash table, create an instance of a `struct
bfd_hash_table' (defined in `bfd.h') and call `bfd_hash_table_init' (if
you know approximately how many entries you will need, the function
`bfd_hash_table_init_n', which takes a SIZE argument, may be used).
`bfd_hash_table_init' returns `false' if some sort of error occurs.

   The function `bfd_hash_table_init' take as an argument a function to
use to create new entries.  For a basic hash table, use the function
`bfd_hash_newfunc'.  *Note Deriving a New Hash Table Type::, for why
you would want to use a different value for this argument.

   `bfd_hash_table_init' will create an objalloc which will be used to
allocate new entries.  You may allocate memory on this objalloc using
`bfd_hash_allocate'.

   Use `bfd_hash_table_free' to free up all the memory that has been
allocated for a hash table.  This will not free up the `struct
bfd_hash_table' itself, which you must provide.


File: bfd.info,  Node: Looking Up or Entering a String,  Next: Traversing a Hash Table,  Prev: Creating and Freeing a Hash Table,  Up: Hash Tables

Looking up or entering a string
-------------------------------

   The function `bfd_hash_lookup' is used both to look up a string in
the hash table and to create a new entry.

   If the CREATE argument is `false', `bfd_hash_lookup' will look up a
string.  If the string is found, it will returns a pointer to a `struct
bfd_hash_entry'.  If the string is not found in the table
`bfd_hash_lookup' will return `NULL'.  You should not modify any of the
fields in the returns `struct bfd_hash_entry'.

   If the CREATE argument is `true', the string will be entered into
the hash table if it is not already there.  Either way a pointer to a
`struct bfd_hash_entry' will be returned, either to the existing
structure or to a newly created one.  In this case, a `NULL' return
means that an error occurred.

   If the CREATE argument is `true', and a new entry is created, the
COPY argument is used to decide whether to copy the string onto the
hash table objalloc or not.  If COPY is passed as `false', you must be
careful not to deallocate or modify the string as long as the hash table
exists.


File: bfd.info,  Node: Traversing a Hash Table,  Next: Deriving a New Hash Table Type,  Prev: Looking Up or Entering a String,  Up: Hash Tables

Traversing a hash table
-----------------------

   The function `bfd_hash_traverse' may be used to traverse a hash
table, calling a function on each element.  The traversal is done in a
random order.

   `bfd_hash_traverse' takes as arguments a function and a generic
`void *' pointer.  The function is called with a hash table entry (a
`struct bfd_hash_entry *') and the generic pointer passed to
`bfd_hash_traverse'.  The function must return a `boolean' value, which
indicates whether to continue traversing the hash table.  If the
function returns `false', `bfd_hash_traverse' will stop the traversal
and return immediately.


File: bfd.info,  Node: Deriving a New Hash Table Type,  Prev: Traversing a Hash Table,  Up: Hash Tables

Deriving a new hash table type
------------------------------

   Many uses of hash tables want to store additional information which
each entry in the hash table.  Some also find it convenient to store
additional information with the hash table itself.  This may be done
using a derived hash table.

   Since C is not an object oriented language, creating a derived hash
table requires sticking together some boilerplate routines with a few
differences specific to the type of hash table you want to create.

   An example of a derived hash table is the linker hash table.  The
structures for this are defined in `bfdlink.h'.  The functions are in
`linker.c'.

   You may also derive a hash table from an already derived hash table.
For example, the a.out linker backend code uses a hash table derived
from the linker hash table.

* Menu:

* Define the Derived Structures::
* Write the Derived Creation Routine::
* Write Other Derived Routines::


File: bfd.info,  Node: Define the Derived Structures,  Next: Write the Derived Creation Routine,  Prev: Deriving a New Hash Table Type,  Up: Deriving a New Hash Table Type

Define the derived structures
.............................

   You must define a structure for an entry in the hash table, and a
structure for the hash table itself.

   The first field in the structure for an entry in the hash table must
be of the type used for an entry in the hash table you are deriving
from.  If you are deriving from a basic hash table this is `struct
bfd_hash_entry', which is defined in `bfd.h'.  The first field in the
structure for the hash table itself must be of the type of the hash
table you are deriving from itself.  If you are deriving from a basic
hash table, this is `struct bfd_hash_table'.

   For example, the linker hash table defines `struct
bfd_link_hash_entry' (in `bfdlink.h').  The first field, `root', is of
type `struct bfd_hash_entry'.  Similarly, the first field in `struct
bfd_link_hash_table', `table', is of type `struct bfd_hash_table'.


File: bfd.info,  Node: Write the Derived Creation Routine,  Next: Write Other Derived Routines,  Prev: Define the Derived Structures,  Up: Deriving a New Hash Table Type
d266 2
a267 2
Write the derived creation routine
..................................
d269 2
a270 30
   You must write a routine which will create and initialize an entry
in the hash table.  This routine is passed as the function argument to
`bfd_hash_table_init'.

   In order to permit other hash tables to be derived from the hash
table you are creating, this routine must be written in a standard way.

   The first argument to the creation routine is a pointer to a hash
table entry.  This may be `NULL', in which case the routine should
allocate the right amount of space.  Otherwise the space has already
been allocated by a hash table type derived from this one.

   After allocating space, the creation routine must call the creation
routine of the hash table type it is derived from, passing in a pointer
to the space it just allocated.  This will initialize any fields used
by the base hash table.

   Finally the creation routine must initialize any local fields for
the new hash table type.

   Here is a boilerplate example of a creation routine.  FUNCTION_NAME
is the name of the routine.  ENTRY_TYPE is the type of an entry in the
hash table you are creating.  BASE_NEWFUNC is the name of the creation
routine of the hash table type your hash table is derived from.

     struct bfd_hash_entry *
     FUNCTION_NAME (entry, table, string)
          struct bfd_hash_entry *entry;
          struct bfd_hash_table *table;
          const char *string;
d272 267
a538 1
       struct ENTRY_TYPE *ret = (ENTRY_TYPE *) entry;
d540 3
a542 13
      /* Allocate the structure if it has not already been allocated by a
         derived class.  */
       if (ret == (ENTRY_TYPE *) NULL)
         {
           ret = ((ENTRY_TYPE *)
                  bfd_hash_allocate (table, sizeof (ENTRY_TYPE)));
           if (ret == (ENTRY_TYPE *) NULL)
             return NULL;
         }
     
      /* Call the allocation method of the base class.  */
       ret = ((ENTRY_TYPE *)
             BASE_NEWFUNC ((struct bfd_hash_entry *) ret, table, string));
d544 3
a546 1
      /* Initialize the local fields here.  */
d548 83
a630 2
       return (struct bfd_hash_entry *) ret;
     }
d632 5
a636 39
The creation routine for the linker hash table, which is in `linker.c',
looks just like this example.  FUNCTION_NAME is
`_bfd_link_hash_newfunc'.  ENTRY_TYPE is `struct bfd_link_hash_entry'.
BASE_NEWFUNC is `bfd_hash_newfunc', the creation routine for a basic
hash table.

   `_bfd_link_hash_newfunc' also initializes the local fields in a
linker hash table entry: `type', `written' and `next'.


File: bfd.info,  Node: Write Other Derived Routines,  Prev: Write the Derived Creation Routine,  Up: Deriving a New Hash Table Type

Write other derived routines
............................

   You will want to write other routines for your new hash table, as
well.

   You will want an initialization routine which calls the
initialization routine of the hash table you are deriving from and
initializes any other local fields.  For the linker hash table, this is
`_bfd_link_hash_table_init' in `linker.c'.

   You will want a lookup routine which calls the lookup routine of the
hash table you are deriving from and casts the result.  The linker hash
table uses `bfd_link_hash_lookup' in `linker.c' (this actually takes an
additional argument which it uses to decide how to return the looked up
value).

   You may want a traversal routine.  This should just call the
traversal routine of the hash table you are deriving from with
appropriate casts.  The linker hash table uses `bfd_link_hash_traverse'
in `linker.c'.

   These routines may simply be defined as macros.  For example, the
a.out backend linker hash table, which is derived from the linker hash
table, uses macros for the lookup and traversal routines.  These are
`aout_link_hash_lookup' and `aout_link_hash_traverse' in aoutx.h.

d638 1
a638 1
File: bfd.info,  Node: BFD back ends,  Next: Index,  Prev: BFD front end,  Up: Top
d640 2
a641 2
BFD back ends
*************
d645 345
a989 137
* What to Put Where::
* aout ::	a.out backends
* coff ::	coff backends
* elf  ::	elf backends


File: bfd.info,  Node: What to Put Where,  Next: aout,  Prev: BFD back ends,  Up: BFD back ends

   All of BFD lives in one directory.


File: bfd.info,  Node: aout,  Next: coff,  Prev: What to Put Where,  Up: BFD back ends

a.out backends
==============

   *Description*
BFD supports a number of different flavours of a.out format, though the
major differences are only the sizes of the structures on disk, and the
shape of the relocation information.

   The support is split into a basic support file `aoutx.h' and other
files which derive functions from the base. One derivation file is
`aoutf1.h' (for a.out flavour 1), and adds to the basic a.out functions
support for sun3, sun4, 386 and 29k a.out files, to create a target
jump vector for a specific target.

   This information is further split out into more specific files for
each machine, including `sunos.c' for sun3 and sun4, `newsos3.c' for
the Sony NEWS, and `demo64.c' for a demonstration of a 64 bit a.out
format.

   The base file `aoutx.h' defines general mechanisms for reading and
writing records to and from disk and various other methods which BFD
requires. It is included by `aout32.c' and `aout64.c' to form the names
`aout_32_swap_exec_header_in', `aout_64_swap_exec_header_in', etc.

   As an example, this is what goes on to make the back end for a sun4,
from `aout32.c':

            #define ARCH_SIZE 32
            #include "aoutx.h"

   Which exports names:

            ...
            aout_32_canonicalize_reloc
            aout_32_find_nearest_line
            aout_32_get_lineno
            aout_32_get_reloc_upper_bound
            ...

   from `sunos.c':

            #define TARGET_NAME "a.out-sunos-big"
            #define VECNAME    sunos_big_vec
            #include "aoutf1.h"

   requires all the names from `aout32.c', and produces the jump vector

            sunos_big_vec

   The file `host-aout.c' is a special case.  It is for a large set of
hosts that use "more or less standard" a.out files, and for which
cross-debugging is not interesting.  It uses the standard 32-bit a.out
support routines, but determines the file offsets and addresses of the
text, data, and BSS sections, the machine architecture and machine
type, and the entry point address, in a host-dependent manner.  Once
these values have been determined, generic code is used to handle the
object file.

   When porting it to run on a new system, you must supply:

             HOST_PAGE_SIZE
             HOST_SEGMENT_SIZE
             HOST_MACHINE_ARCH       (optional)
             HOST_MACHINE_MACHINE    (optional)
             HOST_TEXT_START_ADDR
             HOST_STACK_END_ADDR

   in the file `../include/sys/h-XXX.h' (for your host).  These values,
plus the structures and macros defined in `a.out.h' on your host
system, will produce a BFD target that will access ordinary a.out files
on your host. To configure a new machine to use `host-aout.c', specify:

            TDEFAULTS = -DDEFAULT_VECTOR=host_aout_big_vec
            TDEPFILES= host-aout.o trad-core.o

   in the `config/XXX.mt' file, and modify `configure.in' to use the
`XXX.mt' file (by setting "`bfd_target=XXX'") when your configuration
is selected.

Relocations
-----------

   *Description*
The file `aoutx.h' provides for both the _standard_ and _extended_
forms of a.out relocation records.

   The standard records contain only an address, a symbol index, and a
type field. The extended records (used on 29ks and sparcs) also have a
full integer for an addend.

Internal entry points
---------------------

   *Description*
`aoutx.h' exports several routines for accessing the contents of an
a.out file, which are gathered and exported in turn by various format
specific files (eg sunos.c).

`aout_SIZE_swap_exec_header_in'
...............................

   *Synopsis*
     void aout_SIZE_swap_exec_header_in,
        (bfd *abfd,
         struct external_exec *raw_bytes,
         struct internal_exec *execp);
   *Description*
Swap the information in an executable header RAW_BYTES taken from a raw
byte stream memory image into the internal exec header structure EXECP.

`aout_SIZE_swap_exec_header_out'
................................

   *Synopsis*
     void aout_SIZE_swap_exec_header_out
        (bfd *abfd,
         struct internal_exec *execp,
         struct external_exec *raw_bytes);
   *Description*
Swap the information in an internal exec header structure EXECP into
the buffer RAW_BYTES ready for writing to disk.

`aout_SIZE_some_aout_object_p'
..............................
a990 56
   *Synopsis*
     const bfd_target *aout_SIZE_some_aout_object_p
        (bfd *abfd,
         const bfd_target *(*callback_to_real_object_p)());
   *Description*
Some a.out variant thinks that the file open in ABFD checking is an
a.out file.  Do some more checking, and set up for access if it really
is.  Call back to the calling environment's "finish up" function just
before returning, to handle any last-minute setup.

`aout_SIZE_mkobject'
....................

   *Synopsis*
     boolean aout_SIZE_mkobject, (bfd *abfd);
   *Description*
Initialize BFD ABFD for use with a.out files.

`aout_SIZE_machine_type'
........................

   *Synopsis*
     enum machine_type  aout_SIZE_machine_type
        (enum bfd_architecture arch,
         unsigned long machine));
   *Description*
Keep track of machine architecture and machine type for a.out's. Return
the `machine_type' for a particular architecture and machine, or
`M_UNKNOWN' if that exact architecture and machine can't be represented
in a.out format.

   If the architecture is understood, machine type 0 (default) is
always understood.

`aout_SIZE_set_arch_mach'
.........................

   *Synopsis*
     boolean aout_SIZE_set_arch_mach,
        (bfd *,
         enum bfd_architecture arch,
         unsigned long machine));
   *Description*
Set the architecture and the machine of the BFD ABFD to the values ARCH
and MACHINE.  Verify that ABFD's format can support the architecture
required.

`aout_SIZE_new_section_hook'
............................

   *Synopsis*
     boolean aout_SIZE_new_section_hook,
        (bfd *abfd,
         asection *newsect));
   *Description*
Called by the BFD in response to a `bfd_make_section' request.
@

