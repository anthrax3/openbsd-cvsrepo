head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.4.0.56
	OPENBSD_6_2_BASE:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.54
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.50
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.46
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.48
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.40
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.44
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.42
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.38
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.36
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.34
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.32
	OPENBSD_5_0:1.1.1.4.0.30
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.28
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.26
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.22
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.24
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.20
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.18
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.16
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.14
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.12
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.10
	OPENBSD_4_0_BASE:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.8
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.6
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.4
	OPENBSD_3_7_BASE:1.1.1.4
	BINUTILS_2_15:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.1.1.3.0.8
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.6
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.4
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.2
	OPENBSD_3_2_BASE:1.1.1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	BINUTILS-2_10:1.1.1.2
	FSF:1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	new-binutils:1.1.1.1.0.12
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@# @;


1.1
date	97.05.29.09.21.02;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.29.09.21.02;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.46.01;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.29.02;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.22;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@@@section Hash Tables
@@cindex Hash tables
BFD provides a simple set of hash table functions.  Routines
are provided to initialize a hash table, to free a hash table,
to look up a string in a hash table and optionally create an
entry for it, and to traverse a hash table.  There is
currently no routine to delete an string from a hash table.

The basic hash table does not permit any data to be stored
with a string.  However, a hash table is designed to present a
base class from which other types of hash tables may be
derived.  These derived types may store additional information
with the string.  Hash tables were implemented in this way,
rather than simply providing a data pointer in a hash table
entry, because they were designed for use by the linker back
ends.  The linker may create thousands of hash table entries,
and the overhead of allocating private data and storing and
following pointers becomes noticeable.

The basic hash table code is in @@code{hash.c}.

@@menu
* Creating and Freeing a Hash Table::
* Looking Up or Entering a String::
* Traversing a Hash Table::
* Deriving a New Hash Table Type::
@@end menu
@@*
@@node Creating and Freeing a Hash Table, Looking Up or Entering a String, Hash Tables, Hash Tables
@@subsection Creating and freeing a hash table
@@findex bfd_hash_table_init
@@findex bfd_hash_table_init_n
To create a hash table, create an instance of a @@code{struct
bfd_hash_table} (defined in @@code{bfd.h}) and call
@@code{bfd_hash_table_init} (if you know approximately how many
entries you will need, the function @@code{bfd_hash_table_init_n},
which takes a @@var{size} argument, may be used).
@@code{bfd_hash_table_init} returns @@code{false} if some sort of
error occurs.

@@findex bfd_hash_newfunc
The function @@code{bfd_hash_table_init} take as an argument a
function to use to create new entries.  For a basic hash
table, use the function @@code{bfd_hash_newfunc}.  @@xref{Deriving
a New Hash Table Type} for why you would want to use a
different value for this argument.

@@findex bfd_hash_allocate
@@code{bfd_hash_table_init} will create an objalloc which will be
used to allocate new entries.  You may allocate memory on this
objalloc using @@code{bfd_hash_allocate}.

@@findex bfd_hash_table_free
Use @@code{bfd_hash_table_free} to free up all the memory that has
been allocated for a hash table.  This will not free up the
@@code{struct bfd_hash_table} itself, which you must provide.
@@*
@@node Looking Up or Entering a String, Traversing a Hash Table, Creating and Freeing a Hash Table, Hash Tables
@@subsection Looking up or entering a string
@@findex bfd_hash_lookup
The function @@code{bfd_hash_lookup} is used both to look up a
string in the hash table and to create a new entry.

If the @@var{create} argument is @@code{false}, @@code{bfd_hash_lookup}
will look up a string.  If the string is found, it will
returns a pointer to a @@code{struct bfd_hash_entry}.  If the
string is not found in the table @@code{bfd_hash_lookup} will
return @@code{NULL}.  You should not modify any of the fields in
the returns @@code{struct bfd_hash_entry}.

If the @@var{create} argument is @@code{true}, the string will be
entered into the hash table if it is not already there.
Either way a pointer to a @@code{struct bfd_hash_entry} will be
returned, either to the existing structure or to a newly
created one.  In this case, a @@code{NULL} return means that an
error occurred.

If the @@var{create} argument is @@code{true}, and a new entry is
created, the @@var{copy} argument is used to decide whether to
copy the string onto the hash table objalloc or not.  If
@@var{copy} is passed as @@code{false}, you must be careful not to
deallocate or modify the string as long as the hash table
exists.
@@*
@@node Traversing a Hash Table, Deriving a New Hash Table Type, Looking Up or Entering a String, Hash Tables
@@subsection Traversing a hash table
@@findex bfd_hash_traverse
The function @@code{bfd_hash_traverse} may be used to traverse a
hash table, calling a function on each element.  The traversal
is done in a random order.

@@code{bfd_hash_traverse} takes as arguments a function and a
generic @@code{void *} pointer.  The function is called with a
hash table entry (a @@code{struct bfd_hash_entry *}) and the
generic pointer passed to @@code{bfd_hash_traverse}.  The function
must return a @@code{boolean} value, which indicates whether to
continue traversing the hash table.  If the function returns
@@code{false}, @@code{bfd_hash_traverse} will stop the traversal and
return immediately.
@@*
@@node Deriving a New Hash Table Type, , Traversing a Hash Table, Hash Tables
@@subsection Deriving a new hash table type
Many uses of hash tables want to store additional information
which each entry in the hash table.  Some also find it
convenient to store additional information with the hash table
itself.  This may be done using a derived hash table.

Since C is not an object oriented language, creating a derived
hash table requires sticking together some boilerplate
routines with a few differences specific to the type of hash
table you want to create.

An example of a derived hash table is the linker hash table.
The structures for this are defined in @@code{bfdlink.h}.  The
functions are in @@code{linker.c}.

You may also derive a hash table from an already derived hash
table.  For example, the a.out linker backend code uses a hash
table derived from the linker hash table.

@@menu
* Define the Derived Structures::
* Write the Derived Creation Routine::
* Write Other Derived Routines::
@@end menu
@@*
@@node Define the Derived Structures, Write the Derived Creation Routine, Deriving a New Hash Table Type, Deriving a New Hash Table Type
@@subsubsection Define the derived structures
You must define a structure for an entry in the hash table,
and a structure for the hash table itself.

The first field in the structure for an entry in the hash
table must be of the type used for an entry in the hash table
you are deriving from.  If you are deriving from a basic hash
table this is @@code{struct bfd_hash_entry}, which is defined in
@@code{bfd.h}.  The first field in the structure for the hash
table itself must be of the type of the hash table you are
deriving from itself.  If you are deriving from a basic hash
table, this is @@code{struct bfd_hash_table}.

For example, the linker hash table defines @@code{struct
bfd_link_hash_entry} (in @@code{bfdlink.h}).  The first field,
@@code{root}, is of type @@code{struct bfd_hash_entry}.  Similarly,
the first field in @@code{struct bfd_link_hash_table}, @@code{table},
is of type @@code{struct bfd_hash_table}.
@@*
@@node Write the Derived Creation Routine, Write Other Derived Routines, Define the Derived Structures, Deriving a New Hash Table Type
@@subsubsection Write the derived creation routine
You must write a routine which will create and initialize an
entry in the hash table.  This routine is passed as the
function argument to @@code{bfd_hash_table_init}.

In order to permit other hash tables to be derived from the
hash table you are creating, this routine must be written in a
standard way.

The first argument to the creation routine is a pointer to a
hash table entry.  This may be @@code{NULL}, in which case the
routine should allocate the right amount of space.  Otherwise
the space has already been allocated by a hash table type
derived from this one.

After allocating space, the creation routine must call the
creation routine of the hash table type it is derived from,
passing in a pointer to the space it just allocated.  This
will initialize any fields used by the base hash table.

Finally the creation routine must initialize any local fields
for the new hash table type.

Here is a boilerplate example of a creation routine.
@@var{function_name} is the name of the routine.
@@var{entry_type} is the type of an entry in the hash table you
are creating.  @@var{base_newfunc} is the name of the creation
routine of the hash table type your hash table is derived
from.
@@*
.struct bfd_hash_entry *
@@example
@@var{function_name} (entry, table, string)
     struct bfd_hash_entry *entry;
     struct bfd_hash_table *table;
     const char *string;
@@{
  struct @@var{entry_type} *ret = (@@var{entry_type} *) entry;

 /* Allocate the structure if it has not already been allocated by a
    derived class.  */
  if (ret == (@@var{entry_type} *) NULL)
    @@{
      ret = ((@@var{entry_type} *)
	      bfd_hash_allocate (table, sizeof (@@var{entry_type})));
      if (ret == (@@var{entry_type} *) NULL)
        return NULL;
    @@}

 /* Call the allocation method of the base class.  */
  ret = ((@@var{entry_type} *)
	 @@var{base_newfunc} ((struct bfd_hash_entry *) ret, table, string));

 /* Initialize the local fields here.  */

  return (struct bfd_hash_entry *) ret;
@@}
@@end example
@@strong{Description}@@*
The creation routine for the linker hash table, which is in
@@code{linker.c}, looks just like this example.
@@var{function_name} is @@code{_bfd_link_hash_newfunc}.
@@var{entry_type} is @@code{struct bfd_link_hash_entry}.
@@var{base_newfunc} is @@code{bfd_hash_newfunc}, the creation
routine for a basic hash table.

@@code{_bfd_link_hash_newfunc} also initializes the local fields
in a linker hash table entry: @@code{type}, @@code{written} and
@@code{next}.
@@*
@@node Write Other Derived Routines, , Write the Derived Creation Routine, Deriving a New Hash Table Type
@@subsubsection Write other derived routines
You will want to write other routines for your new hash table,
as well.  

You will want an initialization routine which calls the
initialization routine of the hash table you are deriving from
and initializes any other local fields.  For the linker hash
table, this is @@code{_bfd_link_hash_table_init} in @@code{linker.c}.

You will want a lookup routine which calls the lookup routine
of the hash table you are deriving from and casts the result.
The linker hash table uses @@code{bfd_link_hash_lookup} in
@@code{linker.c} (this actually takes an additional argument which
it uses to decide how to return the looked up value).

You may want a traversal routine.  This should just call the
traversal routine of the hash table you are deriving from with
appropriate casts.  The linker hash table uses
@@code{bfd_link_hash_traverse} in @@code{linker.c}.

These routines may simply be defined as macros.  For example,
the a.out backend linker hash table, which is derived from the
linker hash table, uses macros for the lookup and traversal
routines.  These are @@code{aout_link_hash_lookup} and
@@code{aout_link_hash_traverse} in aoutx.h.
@@*
@


1.1.1.1
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d28 1
a28 1

d45 1
a45 1
a New Hash Table Type}, for why you would want to use a
d57 1
a57 1

d84 1
a84 1

d100 1
a100 1

d126 1
a126 1

d146 1
a146 1

d177 2
a178 2


a179 1
struct bfd_hash_entry *
d192 1
a192 1
             bfd_hash_allocate (table, sizeof (@@var{entry_type})));
d199 1
a199 1
        @@var{base_newfunc} ((struct bfd_hash_entry *) ret, table, string));
d217 1
a217 1

d244 1
a244 1

@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d222 1
a222 1
as well.
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d38 1
a38 1
@@code{bfd_hash_table_init} returns @@code{FALSE} if some sort of
d64 1
a64 1
If the @@var{create} argument is @@code{FALSE}, @@code{bfd_hash_lookup}
d71 1
a71 1
If the @@var{create} argument is @@code{TRUE}, the string will be
d78 1
a78 1
If the @@var{create} argument is @@code{TRUE}, and a new entry is
d81 1
a81 1
@@var{copy} is passed as @@code{FALSE}, you must be careful not to
d98 1
a98 1
@@code{FALSE}, @@code{bfd_hash_traverse} will stop the traversal and
@


