head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.14
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.12
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.42
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.7
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	BINUTILS-2_14:1.1.1.6
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.11.20.22.11.33;	author millert;	state Exp;
branches;
next	1.6;
commitid	FfGmIqMQLPsMXOuN;

1.6
date	2004.11.02.20.45.24;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.21.54.28;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.34;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.11.42;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.50.31;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.05.39;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.05.39;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.39.37;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.21.56;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.46.12;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.13.31.57;	author fgsch;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.17.20.42.26;	author drahn;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.11.02.20.22.43;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@partial_where points into the buffer that begins with buffer_start
so we need to use memmove() to handle the overlap.  Sourceware PR 11456
OK deraadt@@
@
text
@/* input_scrub.c - Break up input buffers into whole numbers of lines.
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
   2000
   Free Software Foundation, Inc.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#include <errno.h>		/* Need this to make errno declaration right */
#include "as.h"
#include "input-file.h"
#include "sb.h"
#include "listing.h"

/*
 * O/S independent module to supply buffers of sanitised source code
 * to rest of assembler.  We get sanitised input data of arbitrary length.
 * We break these buffers on line boundaries, recombine pieces that
 * were broken across buffers, and return a buffer of full lines to
 * the caller.
 * The last partial line begins the next buffer we build and return to caller.
 * The buffer returned to caller is preceded by BEFORE_STRING and followed
 * by AFTER_STRING, as sentinels. The last character before AFTER_STRING
 * is a newline.
 * Also looks after line numbers, for e.g. error messages.
 */

/*
 * We don't care how filthy our buffers are, but our callers assume
 * that the following sanitation has already been done.
 *
 * No comments, reduce a comment to a space.
 * Reduce a tab to a space unless it is 1st char of line.
 * All multiple tabs and spaces collapsed into 1 char. Tab only
 *   legal if 1st char of line.
 * # line file statements converted to .line x;.file y; statements.
 * Escaped newlines at end of line: remove them but add as many newlines
 *   to end of statement as you removed in the middle, to synch line numbers.
 */

#define BEFORE_STRING ("\n")
#define AFTER_STRING ("\0")	/* memcpy of 0 chars might choke.  */
#define BEFORE_SIZE (1)
#define AFTER_SIZE  (1)

static char *buffer_start;	/*->1st char of full buffer area.  */
static char *partial_where;	/*->after last full line in buffer.  */
static int partial_size;	/* >=0. Number of chars in partial line in buffer.  */

/* Because we need AFTER_STRING just after last full line, it clobbers
   1st part of partial line. So we preserve 1st part of partial line
   here.  */
static char save_source[AFTER_SIZE];

/* What is the largest size buffer that input_file_give_next_buffer()
   could return to us?  */
static unsigned int buffer_length;

/* The index into an sb structure we are reading from.  -1 if none.  */
static int sb_index = -1;

/* If we are reading from an sb structure, this is it.  */
static sb from_sb;

/* Should we do a conditional check on from_sb? */
static int from_sb_is_expansion = 1;

/* The number of nested sb structures we have included.  */
int macro_nest;

/* We can have more than one source file open at once, though the info for all
   but the latest one are saved off in a struct input_save.  These files remain
   open, so we are limited by the number of open files allowed by the
   underlying OS. We may also sequentially read more than one source file in an
   assembly.  */

/* We must track the physical file and line number for error messages. We also
   track a "logical" file and line number corresponding to (C?)  compiler
   source line numbers.  Whenever we open a file we must fill in
   physical_input_file. So if it is NULL we have not opened any files yet.  */

static char *physical_input_file;
static char *logical_input_file;

typedef unsigned int line_numberT;	/* 1-origin line number in a source file.  */
/* A line ends in '\n' or eof.  */

static line_numberT physical_input_line;
static int logical_input_line;

/* Struct used to save the state of the input handler during include files */
struct input_save {
  char *              buffer_start;
  char *              partial_where;
  int                 partial_size;
  char                save_source[AFTER_SIZE];
  unsigned int        buffer_length;
  char *              physical_input_file;
  char *              logical_input_file;
  line_numberT        physical_input_line;
  int                 logical_input_line;
  int                 sb_index;
  sb                  from_sb;
  int                 from_sb_is_expansion; /* Should we do a conditional check?  */
  struct input_save * next_saved_file;	/* Chain of input_saves.  */
  char *              input_file_save;	/* Saved state of input routines.  */
  char *              saved_position;	/* Caller's saved position in buf.  */
};

static struct input_save *input_scrub_push (char *saved_position);
static char *input_scrub_pop (struct input_save *arg);
static void as_1_char (unsigned int c, FILE * stream);

/* Saved information about the file that .include'd this one.  When we hit EOF,
   we automatically pop to that file.  */

static struct input_save *next_saved_file;

/* Push the state of input reading and scrubbing so that we can #include.
   The return value is a 'void *' (fudged for old compilers) to a save
   area, which can be restored by passing it to input_scrub_pop().  */

static struct input_save *
input_scrub_push (char *saved_position)
{
  register struct input_save *saved;

  saved = (struct input_save *) xmalloc (sizeof *saved);

  saved->saved_position = saved_position;
  saved->buffer_start = buffer_start;
  saved->partial_where = partial_where;
  saved->partial_size = partial_size;
  saved->buffer_length = buffer_length;
  saved->physical_input_file = physical_input_file;
  saved->logical_input_file = logical_input_file;
  saved->physical_input_line = physical_input_line;
  saved->logical_input_line = logical_input_line;
  saved->sb_index = sb_index;
  saved->from_sb = from_sb;
  saved->from_sb_is_expansion = from_sb_is_expansion;
  memcpy (saved->save_source, save_source, sizeof (save_source));
  saved->next_saved_file = next_saved_file;
  saved->input_file_save = input_file_push ();

  input_file_begin ();		/* Reinitialize! */
  logical_input_line = -1;
  logical_input_file = (char *) NULL;
  buffer_length = input_file_buffer_size ();
  sb_index = -1;

  buffer_start = xmalloc ((BEFORE_SIZE + buffer_length + buffer_length + AFTER_SIZE));
  memcpy (buffer_start, BEFORE_STRING, (int) BEFORE_SIZE);

  return saved;
}

static char *
input_scrub_pop (struct input_save *saved)
{
  char *saved_position;

  input_scrub_end ();		/* Finish off old buffer */

  input_file_pop (saved->input_file_save);
  saved_position = saved->saved_position;
  buffer_start = saved->buffer_start;
  buffer_length = saved->buffer_length;
  physical_input_file = saved->physical_input_file;
  logical_input_file = saved->logical_input_file;
  physical_input_line = saved->physical_input_line;
  logical_input_line = saved->logical_input_line;
  sb_index = saved->sb_index;
  from_sb = saved->from_sb;
  from_sb_is_expansion = saved->from_sb_is_expansion;
  partial_where = saved->partial_where;
  partial_size = saved->partial_size;
  next_saved_file = saved->next_saved_file;
  memcpy (save_source, saved->save_source, sizeof (save_source));

  free (saved);
  return saved_position;
}

void
input_scrub_begin (void)
{
  know (strlen (BEFORE_STRING) == BEFORE_SIZE);
  know (strlen (AFTER_STRING) == AFTER_SIZE
	|| (AFTER_STRING[0] == '\0' && AFTER_SIZE == 1));

  input_file_begin ();

  buffer_length = input_file_buffer_size ();

  buffer_start = xmalloc ((BEFORE_SIZE + buffer_length + buffer_length + AFTER_SIZE));
  memcpy (buffer_start, BEFORE_STRING, (int) BEFORE_SIZE);

  /* Line number things.  */
  logical_input_line = -1;
  logical_input_file = (char *) NULL;
  physical_input_file = NULL;	/* No file read yet.  */
  next_saved_file = NULL;	/* At EOF, don't pop to any other file */
  do_scrub_begin (flag_m68k_mri);
}

void
input_scrub_end (void)
{
  if (buffer_start)
    {
      free (buffer_start);
      buffer_start = 0;
      input_file_end ();
    }
}

/* Start reading input from a new file.
   Return start of caller's part of buffer.  */

char *
input_scrub_new_file (char *filename)
{
  input_file_open (filename, !flag_no_comments);
  physical_input_file = filename[0] ? filename : _("{standard input}");
  physical_input_line = 0;

  partial_size = 0;
  return (buffer_start + BEFORE_SIZE);
}

/* Include a file from the current file.  Save our state, cause it to
   be restored on EOF, and begin handling a new file.  Same result as
   input_scrub_new_file.  */

char *
input_scrub_include_file (char *filename, char *position)
{
  next_saved_file = input_scrub_push (position);
  return input_scrub_new_file (filename);
}

/* Start getting input from an sb structure.  This is used when
   expanding a macro.  */

void
input_scrub_include_sb (sb *from, char *position, int is_expansion)
{
  if (macro_nest > max_macro_nest)
    as_fatal (_("macros nested too deeply"));
  ++macro_nest;

#ifdef md_macro_start
  if (is_expansion)
    {
      md_macro_start ();
    }
#endif

  next_saved_file = input_scrub_push (position);

  sb_new (&from_sb);
  from_sb_is_expansion = is_expansion;
  if (from->len >= 1 && from->ptr[0] != '\n')
    {
      /* Add the sentinel required by read.c.  */
      sb_add_char (&from_sb, '\n');
    }
  sb_add_sb (&from_sb, from);
  sb_index = 1;

  /* These variables are reset by input_scrub_push.  Restore them
     since we are, after all, still at the same point in the file.  */
  logical_input_line = next_saved_file->logical_input_line;
  logical_input_file = next_saved_file->logical_input_file;
}

void
input_scrub_close (void)
{
  input_file_close ();
}

char *
input_scrub_next_buffer (char **bufp)
{
  register char *limit;		/*->just after last char of buffer.  */

  if (sb_index >= 0)
    {
      if (sb_index >= from_sb.len)
	{
	  sb_kill (&from_sb);
	  if (from_sb_is_expansion
	      )
	    {
	      cond_finish_check (macro_nest);
#ifdef md_macro_end
	      /* Allow the target to clean up per-macro expansion
	         data.  */
	      md_macro_end ();
#endif
	    }
	  --macro_nest;
	  partial_where = NULL;
	  if (next_saved_file != NULL)
	    *bufp = input_scrub_pop (next_saved_file);
	  return partial_where;
	}

      partial_where = from_sb.ptr + from_sb.len;
      partial_size = 0;
      *bufp = from_sb.ptr + sb_index;
      sb_index = from_sb.len;
      return partial_where;
    }

  *bufp = buffer_start + BEFORE_SIZE;

  if (partial_size)
    {
      memmove (buffer_start + BEFORE_SIZE, partial_where,
	      (unsigned int) partial_size);
      memcpy (buffer_start + BEFORE_SIZE, save_source, AFTER_SIZE);
    }
  limit = input_file_give_next_buffer (buffer_start
				       + BEFORE_SIZE
				       + partial_size);
  if (limit)
    {
      register char *p;		/* Find last newline.  */

      for (p = limit - 1; *p != '\n'; --p)
	;
      ++p;

      while (p <= buffer_start + BEFORE_SIZE)
	{
	  int limoff;

	  limoff = limit - buffer_start;
	  buffer_length += input_file_buffer_size ();
	  buffer_start = xrealloc (buffer_start,
				   (BEFORE_SIZE
				    + 2 * buffer_length
				    + AFTER_SIZE));
	  *bufp = buffer_start + BEFORE_SIZE;
	  limit = input_file_give_next_buffer (buffer_start + limoff);

	  if (limit == NULL)
	    {
	      as_warn (_("partial line at end of file ignored"));
	      partial_where = NULL;
	      if (next_saved_file)
		*bufp = input_scrub_pop (next_saved_file);
	      return NULL;
	    }

	  for (p = limit - 1; *p != '\n'; --p)
	    ;
	  ++p;
	}

      partial_where = p;
      partial_size = limit - p;
      memcpy (save_source, partial_where, (int) AFTER_SIZE);
      memcpy (partial_where, AFTER_STRING, (int) AFTER_SIZE);
    }
  else
    {
      partial_where = 0;
      if (partial_size > 0)
	{
	  as_warn (_("partial line at end of file ignored"));
	}

      /* Tell the listing we've finished the file.  */
      LISTING_EOF ();

      /* If we should pop to another file at EOF, do it.  */
      if (next_saved_file)
	{
	  *bufp = input_scrub_pop (next_saved_file);	/* Pop state */
	  /* partial_where is now correct to return, since we popped it.  */
	}
    }
  return (partial_where);
}

/* The remaining part of this file deals with line numbers, error
   messages and so on.  Return TRUE if we opened any file.  */

int
seen_at_least_1_file (void)
{
  return (physical_input_file != NULL);
}

void
bump_line_counters (void)
{
  if (sb_index < 0)
    {
      ++physical_input_line;
      if (logical_input_line >= 0)
	++logical_input_line;
    }
}

/* Tells us what the new logical line number and file are.
   If the line_number is -1, we don't change the current logical line
   number.  If it is -2, we decrement the logical line number (this is
   to support the .appfile pseudo-op inserted into the stream by
   do_scrub_chars).
   If the fname is NULL, we don't change the current logical file name.
   Returns nonzero if the filename actually changes.  */

int
new_logical_line (char *fname, /* DON'T destroy it!  We point to it!  */
		  int line_number)
{
  if (line_number >= 0)
    logical_input_line = line_number;
  else if (line_number == -2 && logical_input_line > 0)
    --logical_input_line;

  if (fname
      && (logical_input_file == NULL
	  || strcmp (logical_input_file, fname)))
    {
      logical_input_file = fname;
      return 1;
    }
  else
    return 0;
}

/* Return the current file name and line number.
   namep should be char * const *, but there are compilers which screw
   up declarations like that, and it's easier to avoid it.  */

void
as_where (char **namep, unsigned int *linep)
{
  if (logical_input_file != NULL
      && (linep == NULL || logical_input_line >= 0))
    {
      *namep = logical_input_file;
      if (linep != NULL)
	*linep = logical_input_line;
    }
  else if (physical_input_file != NULL)
    {
      *namep = physical_input_file;
      if (linep != NULL)
	*linep = physical_input_line;
    }
  else
    {
      *namep = 0;
      if (linep != NULL)
	*linep = 0;
    }
}

/* Output to given stream how much of line we have scanned so far.
   Assumes we have scanned up to and including input_line_pointer.
   No free '\n' at end of line.  */

void
as_howmuch (FILE *stream /* Opened for write please.  */)
{
  register char *p;		/* Scan input line.  */

  for (p = input_line_pointer - 1; *p != '\n'; --p)
    {
    }
  ++p;				/* p->1st char of line.  */
  for (; p <= input_line_pointer; p++)
    {
      /* Assume ASCII. EBCDIC & other micro-computer char sets ignored.  */
      as_1_char ((unsigned char) *p, stream);
    }
}

static void
as_1_char (unsigned int c, FILE *stream)
{
  if (c > 127)
    {
      (void) putc ('%', stream);
      c -= 128;
    }
  if (c < 32)
    {
      (void) putc ('^', stream);
      c += '@@';
    }
  (void) putc (c, stream);
}
@


1.6
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d336 1
a336 1
      memcpy (buffer_start + BEFORE_SIZE, partial_where,
@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d36 1
a36 1
 * The buffer returned to caller is preceeded by BEFORE_STRING and followed
d124 3
a126 3
static struct input_save *input_scrub_push PARAMS ((char *saved_position));
static char *input_scrub_pop PARAMS ((struct input_save *arg));
static void as_1_char PARAMS ((unsigned int c, FILE * stream));
d138 1
a138 2
input_scrub_push (saved_position)
     char *saved_position;
d173 1
a173 2
input_scrub_pop (saved)
     struct input_save *saved;
d200 1
a200 1
input_scrub_begin ()
d222 1
a222 1
input_scrub_end ()
d236 1
a236 2
input_scrub_new_file (filename)
     char *filename;
d251 1
a251 3
input_scrub_include_file (filename, position)
     char *filename;
     char *position;
d261 1
a261 4
input_scrub_include_sb (from, position, is_expansion)
     sb *from;
     char *position;
     int is_expansion;
d293 1
a293 1
input_scrub_close ()
d299 1
a299 2
input_scrub_next_buffer (bufp)
     char **bufp;
d408 1
a408 1
seen_at_least_1_file ()
d414 1
a414 1
bump_line_counters ()
d433 2
a434 3
new_logical_line (fname, line_number)
     char *fname;		/* DON'T destroy it!  We point to it!  */
     int line_number;
d457 1
a457 3
as_where (namep, linep)
     char **namep;
     unsigned int *linep;
d485 1
a485 2
as_howmuch (stream)
     FILE *stream;		/* Opened for write please.  */
d501 1
a501 3
as_1_char (c, stream)
     unsigned int c;
     FILE *stream;
@


1.4
log
@resolve conflicts.
@
text
@d397 1
a397 1
	  as_warn (_("Partial line at end of file ignored"));
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright (C) 1987, 90, 91, 92, 93, 94, 95, 96, 1997
d21 1
a21 1
   02111-1307, USA. */
d56 1
a56 1
#define AFTER_STRING ("\0")	/* memcpy of 0 chars might choke. */
d60 7
a66 3
static char *buffer_start;	/*->1st char of full buffer area. */
static char *partial_where;	/*->after last full line in buffer. */
static int partial_size;	/* >=0. Number of chars in partial line in buffer. */
d68 4
a71 7
/* Because we need AFTER_STRING just after last */
/* full line, it clobbers 1st part of partial */
/* line. So we preserve 1st part of partial */
/* line here. */
static unsigned int buffer_length;	/* What is the largest size buffer that */
/* input_file_give_next_buffer() could */
/* return to us? */
d89 1
a89 1
   assembly. */
d94 1
a94 1
   physical_input_file. So if it is NULL we have not opened any files yet. */
d99 2
a100 2
typedef unsigned int line_numberT;	/* 1-origin line number in a source file. */
/* A line ends in '\n' or eof. */
d106 17
a122 18
struct input_save
  {
    char *buffer_start;
    char *partial_where;
    int partial_size;
    char save_source[AFTER_SIZE];
    unsigned int buffer_length;
    char *physical_input_file;
    char *logical_input_file;
    line_numberT physical_input_line;
    int logical_input_line;
    int sb_index;
    sb from_sb;
    int from_sb_is_expansion;       /* Should we do a conditional check? */
    struct input_save *next_saved_file;	/* Chain of input_saves */
    char *input_file_save;	/* Saved state of input routines */
    char *saved_position;	/* Caller's saved position in buf */
  };
d129 1
a129 1
   we automatically pop to that file. */
d135 2
a136 1
   area, which can be restored by passing it to input_scrub_pop(). */
d171 1
a171 1
}				/* input_scrub_push() */
a200 1

d205 2
a206 1
  know (strlen (AFTER_STRING) == AFTER_SIZE || (AFTER_STRING[0] == '\0' && AFTER_SIZE == 1));
d215 1
a215 1
  /* Line number things. */
d218 1
a218 1
  physical_input_file = NULL;	/* No file read yet. */
d234 2
a235 1
/* Start reading input from a new file. */
d237 1
a237 1
char *				/* Return start of caller's part of buffer. */
a248 1

d251 1
a251 1
   input_scrub_new_file. */
d272 1
a272 1
    as_fatal (_("buffers nested too deeply"));
d310 1
a310 1
  register char *limit;		/*->just after last char of buffer. */
d317 4
a320 3
          if (from_sb_is_expansion)
            {
              cond_finish_check (macro_nest);
d322 3
a324 2
              /* allow the target to clean up per-macro expansion data */
              md_macro_end ();
d326 2
a327 2
            }
          --macro_nest;
d354 1
a354 1
      register char *p;		/* Find last newline. */
d403 1
a403 1
      /* If we should pop to another file at EOF, do it. */
d407 1
a407 1
	  /* partial_where is now correct to return, since we popped it. */
d411 1
a411 1
}				/* input_scrub_next_buffer() */
d413 2
a414 5
/*
 * The remaining part of this file deals with line numbers, error
 * messages and so on.
 */

d417 1
a417 1
seen_at_least_1_file ()		/* TRUE if we opened any file. */
d433 8
a440 11
/*
 *			new_logical_line()
 *
 * Tells us what the new logical line number and file are.
 * If the line_number is -1, we don't change the current logical line
 * number.  If it is -2, we decrement the logical line number (this is
 * to support the .appfile pseudo-op inserted into the stream by
 * do_scrub_chars).
 * If the fname is NULL, we don't change the current logical file name.
 * Returns nonzero if the filename actually changes.
 */
d443 1
a443 1
     char *fname;		/* DON'T destroy it! We point to it! */
d460 1
a460 1
}				/* new_logical_line() */
d462 5
a466 8
/*
 *			a s _ w h e r e ()
 *
 * Return the current file name and line number.
 * namep should be char * const *, but there are compilers which screw
 * up declarations like that, and it's easier to avoid it.
 */
void 
d490 1
a490 1
}				/* as_where() */
d492 3
a495 9


/*
 *			a s _ h o w m u c h ()
 *
 * Output to given stream how much of line we have scanned so far.
 * Assumes we have scanned up to and including input_line_pointer.
 * No free '\n' at end of line.
 */
d498 1
a498 1
     FILE *stream;		/* Opened for write please. */
d500 1
a500 2
  register char *p;		/* Scan input line. */
  /* register char c; JF unused */
d505 1
a505 1
  ++p;				/* p->1st char of line. */
d508 1
a508 1
      /* Assume ASCII. EBCDIC & other micro-computer char sets ignored. */
d513 1
a513 1
static void 
a529 2

/* end of input_scrub.c */
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d2 2
a3 1
   Copyright (C) 1987, 1990, 1991, 1992 Free Software Foundation, Inc.
d18 3
a20 2
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
d26 1
d77 3
d81 1
a81 1
static int macro_nest;
d117 1
d154 1
d189 1
d239 1
a239 1
  physical_input_file = filename[0] ? filename : "{standard input}";
d264 1
a264 1
input_scrub_include_sb (from, position)
d267 1
d270 1
a270 1
    as_fatal ("macros nested too deeply");
d273 7
d283 6
a288 2
  /* Add the sentinel required by read.c.  */
  sb_add_char (&from_sb, '\n');
d315 9
a323 1
	  --macro_nest;
d352 2
a353 1
      for (p = limit; *--p != '\n';);;
d355 2
a356 1
      if (p <= buffer_start + BEFORE_SIZE)
d358 23
a380 1
	  as_fatal ("Source line too long. Please change file %s then rebuild assembler.", __FILE__);
d382 1
d393 1
a393 1
	  as_warn ("Partial line at end of file ignored");
d395 4
d441 1
d443 1
a443 1
void 
a447 5
  if (fname)
    {
      logical_input_file = fname;
    }				/* if we have a file name */

d452 10
@


1.1
log
@Initial revision
@
text
@d209 1
a209 1
  do_scrub_begin ();
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d209 1
a209 1
  do_scrub_begin (flag_m68k_mri);
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 2
   Copyright (C) 1987, 90, 91, 92, 93, 94, 95, 96, 1997
   Free Software Foundation, Inc.
d17 2
a18 3
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA. */
d75 1
a75 1
int macro_nest;
a293 1
	  cond_finish_check (macro_nest);
d323 1
a323 2
      for (p = limit - 1; *p != '\n'; --p)
	;
d325 1
a325 2

      while (p <= buffer_start + BEFORE_SIZE)
d327 1
a327 23
	  int limoff;

	  limoff = limit - buffer_start;
	  buffer_length += input_file_buffer_size ();
	  buffer_start = xrealloc (buffer_start,
				   (BEFORE_SIZE
				    + 2 * buffer_length
				    + AFTER_SIZE));
	  *bufp = buffer_start + BEFORE_SIZE;
	  limit = input_file_give_next_buffer (buffer_start + limoff);

	  if (limit == NULL)
	    {
	      as_warn ("partial line at end of file ignored");
	      partial_where = NULL;
	      if (next_saved_file)
		*bufp = input_scrub_pop (next_saved_file);
	      return NULL;
	    }

	  for (p = limit - 1; *p != '\n'; --p)
	    ;
	  ++p;
a328 1

@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a25 1
#include "listing.h"
a75 3
/* Should we do a conditional check on from_sb? */
static int from_sb_is_expansion = 1;

a112 1
    int from_sb_is_expansion;       /* Should we do a conditional check? */
a148 1
  saved->from_sb_is_expansion = from_sb_is_expansion;
a182 1
  from_sb_is_expansion = saved->from_sb_is_expansion;
d232 1
a232 1
  physical_input_file = filename[0] ? filename : _("{standard input}");
d257 1
a257 1
input_scrub_include_sb (from, position, is_expansion)
a259 1
     int is_expansion;
d262 1
a262 1
    as_fatal (_("buffers nested too deeply"));
a264 7
#ifdef md_macro_start
  if (is_expansion)
    {
      md_macro_start ();
    }
#endif

d268 2
a269 6
  from_sb_is_expansion = is_expansion;
  if (from->len >= 1 && from->ptr[0] != '\n')
    {
      /* Add the sentinel required by read.c.  */
      sb_add_char (&from_sb, '\n');
    }
d296 2
a297 9
          if (from_sb_is_expansion)
            {
              cond_finish_check (macro_nest);
#ifdef md_macro_end
              /* allow the target to clean up per-macro expansion data */
              md_macro_end ();
#endif
            }
          --macro_nest;
d345 1
a345 1
	      as_warn (_("partial line at end of file ignored"));
d367 1
a367 1
	  as_warn (_("Partial line at end of file ignored"));
a368 4

      /* Tell the listing we've finished the file.  */
      LISTING_EOF ();

a410 1
 * Returns nonzero if the filename actually changes.
d412 1
a412 1
int
d417 5
a425 10

  if (fname
      && (logical_input_file == NULL
	  || strcmp (logical_input_file, fname)))
    {
      logical_input_file = fname;
      return 1;
    }
  else
    return 0;
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
   2000
d20 1
a20 1
   02111-1307, USA.  */
d55 1
a55 1
#define AFTER_STRING ("\0")	/* memcpy of 0 chars might choke.  */
d59 3
a61 7
static char *buffer_start;	/*->1st char of full buffer area.  */
static char *partial_where;	/*->after last full line in buffer.  */
static int partial_size;	/* >=0. Number of chars in partial line in buffer.  */

/* Because we need AFTER_STRING just after last full line, it clobbers
   1st part of partial line. So we preserve 1st part of partial line
   here.  */
d63 7
a69 4

/* What is the largest size buffer that input_file_give_next_buffer()
   could return to us?  */
static unsigned int buffer_length;
d87 1
a87 1
   assembly.  */
d92 1
a92 1
   physical_input_file. So if it is NULL we have not opened any files yet.  */
d97 2
a98 2
typedef unsigned int line_numberT;	/* 1-origin line number in a source file.  */
/* A line ends in '\n' or eof.  */
d104 18
a121 17
struct input_save {
  char *              buffer_start;
  char *              partial_where;
  int                 partial_size;
  char                save_source[AFTER_SIZE];
  unsigned int        buffer_length;
  char *              physical_input_file;
  char *              logical_input_file;
  line_numberT        physical_input_line;
  int                 logical_input_line;
  int                 sb_index;
  sb                  from_sb;
  int                 from_sb_is_expansion; /* Should we do a conditional check?  */
  struct input_save * next_saved_file;	/* Chain of input_saves.  */
  char *              input_file_save;	/* Saved state of input routines.  */
  char *              saved_position;	/* Caller's saved position in buf.  */
};
d128 1
a128 1
   we automatically pop to that file.  */
d134 1
a134 2
   area, which can be restored by passing it to input_scrub_pop().  */

d169 1
a169 1
}
d199 1
d204 1
a204 2
  know (strlen (AFTER_STRING) == AFTER_SIZE
	|| (AFTER_STRING[0] == '\0' && AFTER_SIZE == 1));
d213 1
a213 1
  /* Line number things.  */
d216 1
a216 1
  physical_input_file = NULL;	/* No file read yet.  */
d232 1
a232 2
/* Start reading input from a new file.
   Return start of caller's part of buffer.  */
d234 1
a234 1
char *
d246 1
d249 1
a249 1
   input_scrub_new_file.  */
d270 1
a270 1
    as_fatal (_("macros nested too deeply"));
d308 1
a308 1
  register char *limit;		/*->just after last char of buffer.  */
d315 3
a317 4
	  if (from_sb_is_expansion
	      )
	    {
	      cond_finish_check (macro_nest);
d319 2
a320 3
	      /* Allow the target to clean up per-macro expansion
	         data.  */
	      md_macro_end ();
d322 2
a323 2
	    }
	  --macro_nest;
d350 1
a350 1
      register char *p;		/* Find last newline.  */
d399 1
a399 1
      /* If we should pop to another file at EOF, do it.  */
d403 1
a403 1
	  /* partial_where is now correct to return, since we popped it.  */
d407 1
a407 1
}
d409 5
a413 2
/* The remaining part of this file deals with line numbers, error
   messages and so on.  Return TRUE if we opened any file.  */
d416 1
a416 1
seen_at_least_1_file ()
d432 11
a442 8
/* Tells us what the new logical line number and file are.
   If the line_number is -1, we don't change the current logical line
   number.  If it is -2, we decrement the logical line number (this is
   to support the .appfile pseudo-op inserted into the stream by
   do_scrub_chars).
   If the fname is NULL, we don't change the current logical file name.
   Returns nonzero if the filename actually changes.  */

d445 1
a445 1
     char *fname;		/* DON'T destroy it!  We point to it!  */
d462 1
a462 1
}
d464 8
a471 5
/* Return the current file name and line number.
   namep should be char * const *, but there are compilers which screw
   up declarations like that, and it's easier to avoid it.  */

void
d495 1
a495 1
}
a496 3
/* Output to given stream how much of line we have scanned so far.
   Assumes we have scanned up to and including input_line_pointer.
   No free '\n' at end of line.  */
d498 9
d509 1
a509 1
     FILE *stream;		/* Opened for write please.  */
d511 2
a512 1
  register char *p;		/* Scan input line.  */
d517 1
a517 1
  ++p;				/* p->1st char of line.  */
d520 1
a520 1
      /* Assume ASCII. EBCDIC & other micro-computer char sets ignored.  */
d525 1
a525 1
static void
d542 2
@


1.1.1.6
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d397 1
a397 1
	  as_warn (_("partial line at end of file ignored"));
@


1.1.1.7
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d36 1
a36 1
 * The buffer returned to caller is preceded by BEFORE_STRING and followed
d124 3
a126 3
static struct input_save *input_scrub_push (char *saved_position);
static char *input_scrub_pop (struct input_save *arg);
static void as_1_char (unsigned int c, FILE * stream);
d138 2
a139 1
input_scrub_push (char *saved_position)
d174 2
a175 1
input_scrub_pop (struct input_save *saved)
d202 1
a202 1
input_scrub_begin (void)
d224 1
a224 1
input_scrub_end (void)
d238 2
a239 1
input_scrub_new_file (char *filename)
d254 3
a256 1
input_scrub_include_file (char *filename, char *position)
d266 4
a269 1
input_scrub_include_sb (sb *from, char *position, int is_expansion)
d301 1
a301 1
input_scrub_close (void)
d307 2
a308 1
input_scrub_next_buffer (char **bufp)
d417 1
a417 1
seen_at_least_1_file (void)
d423 1
a423 1
bump_line_counters (void)
d442 3
a444 2
new_logical_line (char *fname, /* DON'T destroy it!  We point to it!  */
		  int line_number)
d467 3
a469 1
as_where (char **namep, unsigned int *linep)
d497 2
a498 1
as_howmuch (FILE *stream /* Opened for write please.  */)
d514 3
a516 1
as_1_char (unsigned int c, FILE *stream)
@


