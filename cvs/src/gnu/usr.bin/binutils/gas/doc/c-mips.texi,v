head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.32
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.28
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.24
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.26
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.18
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.22
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	BINUTILS-2_10:1.1.1.3
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.2
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2010.02.03.21.44.20;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.02.20.45.32;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.17.21.54.32;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.13.17.07.37;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.12.19.11.56;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.06.26;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.06.26;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.23.49;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.46.36;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.13.38.18;	author fgsch;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.35;	author drahn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.02.20.22.59;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Add a new option to the mips64 gas, -mfix-loongson2f-btb. This option
is intended to be used when compiling kernel code which will run on a
Loongson 2E or 2F processor, and inserts an explicit BTB clear operation
before every jump through a register (jr or jalr instructions), unless
that register is k0 or k1, or we are in .set noat.

This is a reliable, although aggressive, workaround for the misbehaviour
of the branch prediction engine of many Loongson 2F processors with regard
to the Branch Translation Buffer, for which an official errata has yet
to be published, and for which the Loongson suggested workaround apparently
only works due to pipeline side effects, but requires all the executable
kernel code to be located in CKSEG0/CKSEG1.

These changes are inspired by a backport of the Loongson binutils 2.19 patch
to binutils 2.18; the idea of doing an aggressive BTB clear is mine.

This causes no functional change to code compiled without the
-mfix-loongson2f-btb option.

``looks reasonable'' kettenis@@
@
text
@@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001,
@@c 2002, 2003, 2004
@@c Free Software Foundation, Inc.
@@c This is part of the GAS manual.
@@c For copying conditions, see the file as.texinfo.
@@ifset GENERIC
@@page
@@node MIPS-Dependent
@@chapter MIPS Dependent Features
@@end ifset
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter MIPS Dependent Features
@@end ifclear

@@cindex MIPS processor
@@sc{gnu} @@code{@@value{AS}} for @@sc{mips} architectures supports several
different @@sc{mips} processors, and MIPS ISA levels I through V, MIPS32,
and MIPS64.  For information about the @@sc{mips} instruction set, see
@@cite{MIPS RISC Architecture}, by Kane and Heindrich (Prentice-Hall).
For an overview of @@sc{mips} assembly conventions, see ``Appendix D:
Assembly Language Programming'' in the same work.

@@menu
* MIPS Opts::   	Assembler options
* MIPS Object:: 	ECOFF object code
* MIPS Stabs::  	Directives for debugging information
* MIPS ISA::    	Directives to override the ISA level
* MIPS autoextend::	Directives for extending MIPS 16 bit instructions
* MIPS insn::		Directive to mark data as an instruction
* MIPS option stack::	Directives to save and restore options
* MIPS ASE instruction generation overrides:: Directives to control
  			generation of MIPS ASE instructions
@@end menu

@@node MIPS Opts
@@section Assembler options

The @@sc{mips} configurations of @@sc{gnu} @@code{@@value{AS}} support these
special options:

@@table @@code
@@cindex @@code{-G} option (MIPS)
@@item -G @@var{num}
This option sets the largest size of an object that can be referenced
implicitly with the @@code{gp} register.  It is only accepted for targets
that use @@sc{ecoff} format.  The default value is 8.

@@cindex @@code{-EB} option (MIPS)
@@cindex @@code{-EL} option (MIPS)
@@cindex MIPS big-endian output
@@cindex MIPS little-endian output
@@cindex big-endian output, MIPS
@@cindex little-endian output, MIPS
@@item -EB
@@itemx -EL
Any @@sc{mips} configuration of @@code{@@value{AS}} can select big-endian or
little-endian output at run time (unlike the other @@sc{gnu} development
tools, which must be configured for one or the other).  Use @@samp{-EB}
to select big-endian output, and @@samp{-EL} for little-endian.

@@cindex MIPS architecture options
@@item -mips1
@@itemx -mips2
@@itemx -mips3
@@itemx -mips4
@@itemx -mips5
@@itemx -mips32
@@itemx -mips32r2
@@itemx -mips64
@@itemx -mips64r2
Generate code for a particular MIPS Instruction Set Architecture level.
@@samp{-mips1} corresponds to the @@sc{r2000} and @@sc{r3000} processors,
@@samp{-mips2} to the @@sc{r6000} processor, @@samp{-mips3} to the
@@sc{r4000} processor, and @@samp{-mips4} to the @@sc{r8000} and
@@sc{r10000} processors.  @@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2},
@@samp{-mips64}, and @@samp{-mips64r2}
correspond to generic
@@sc{MIPS V}, @@sc{MIPS32}, @@sc{MIPS32 Release 2}, @@sc{MIPS64},
and @@sc{MIPS64 Release 2}
ISA processors, respectively.  You can also switch
instruction sets during the assembly; see @@ref{MIPS ISA, Directives to
override the ISA level}.

@@item -mgp32
@@itemx -mfp32
Some macros have different expansions for 32-bit and 64-bit registers.
The register sizes are normally inferred from the ISA and ABI, but these
flags force a certain group of registers to be treated as 32 bits wide at
all times.  @@samp{-mgp32} controls the size of general-purpose registers
and @@samp{-mfp32} controls the size of floating-point registers.

On some MIPS variants there is a 32-bit mode flag; when this flag is
set, 64-bit instructions generate a trap.  Also, some 32-bit OSes only
save the 32-bit registers on a context switch, so it is essential never
to use the 64-bit registers.

@@item -mgp64
Assume that 64-bit general purpose registers are available.  This is
provided in the interests of symmetry with -gp32.

@@item -mips16
@@itemx -no-mips16
Generate code for the MIPS 16 processor.  This is equivalent to putting
@@samp{.set mips16} at the start of the assembly file.  @@samp{-no-mips16}
turns off this option.

@@item -mips3d
@@itemx -no-mips3d
Generate code for the MIPS-3D Application Specific Extension.
This tells the assembler to accept MIPS-3D instructions.
@@samp{-no-mips3d} turns off this option.

@@item -mdmx
@@itemx -no-mdmx
Generate code for the MDMX Application Specific Extension.
This tells the assembler to accept MDMX instructions.
@@samp{-no-mdmx} turns off this option.

@@item -mfix7000
@@itemx -mno-fix7000
Cause nops to be inserted if the read of the destination register
of an mfhi or mflo instruction occurs in the following two instructions.

@@item -mfix-vr4120
@@itemx -no-mfix-vr4120
Insert nops to work around certain VR4120 errata.  This option is
intended to be used on GCC-generated code: it is not designed to catch
all problems in hand-written assembler code.

@@item -mfix-loongson2f-btb
@@itemx -mno-fix-loongson2f-btb
Clear the Branch Target Buffer before any jump through a register.  This
option is intended to be used on kernel code for the Loongson 2F processor
only; userland code compiled with this option will fault, and kernel code
compiled with this option run on another processor than Loongson 2F will
yield unpredictable results.

@@item -m4010
@@itemx -no-m4010
Generate code for the LSI @@sc{r4010} chip.  This tells the assembler to
accept the @@sc{r4010} specific instructions (@@samp{addciu}, @@samp{ffc},
etc.), and to not schedule @@samp{nop} instructions around accesses to
the @@samp{HI} and @@samp{LO} registers.  @@samp{-no-m4010} turns off this
option.

@@item -m4650
@@itemx -no-m4650
Generate code for the MIPS @@sc{r4650} chip.  This tells the assembler to accept
the @@samp{mad} and @@samp{madu} instruction, and to not schedule @@samp{nop}
instructions around accesses to the @@samp{HI} and @@samp{LO} registers.
@@samp{-no-m4650} turns off this option.

@@itemx -m3900
@@itemx -no-m3900
@@itemx -m4100
@@itemx -no-m4100
For each option @@samp{-m@@var{nnnn}}, generate code for the MIPS
@@sc{r@@var{nnnn}} chip.  This tells the assembler to accept instructions
specific to that chip, and to schedule for that chip's hazards.

@@item -march=@@var{cpu}
Generate code for a particular MIPS cpu.  It is exactly equivalent to
@@samp{-m@@var{cpu}}, except that there are more value of @@var{cpu}
understood.  Valid @@var{cpu} value are:

@@quotation
2000,
3000,
3900,
4000,
4010,
4100,
4111,
vr4120,
vr4130,
vr4181,
4300,
4400,
4600,
4650,
5000,
rm5200,
rm5230,
rm5231,
rm5261,
rm5721,
vr5400,
vr5500,
6000,
rm7000,
8000,
rm9000,
10000,
12000,
mips32-4k,
sb1
@@end quotation

@@item -mtune=@@var{cpu}
Schedule and tune for a particular MIPS cpu.  Valid @@var{cpu} values are
identical to @@samp{-march=@@var{cpu}}.

@@item -mabi=@@var{abi}
Record which ABI the source code uses.  The recognized arguments
are: @@samp{32}, @@samp{n32}, @@samp{o64}, @@samp{64} and @@samp{eabi}.

@@cindex @@code{-nocpp} ignored (MIPS)
@@item -nocpp
This option is ignored.  It is accepted for command-line compatibility with
other assemblers, which use it to turn off C style preprocessing.  With
@@sc{gnu} @@code{@@value{AS}}, there is no need for @@samp{-nocpp}, because the
@@sc{gnu} assembler itself never runs the C preprocessor.

@@item --construct-floats
@@itemx --no-construct-floats
@@cindex --construct-floats
@@cindex --no-construct-floats
The @@code{--no-construct-floats} option disables the construction of
double width floating point constants by loading the two halves of the
value into the two single width floating point registers that make up
the double width register.  This feature is useful if the processor
support the FR bit in its status  register, and this bit is known (by
the programmer) to be set.  This bit prevents the aliasing of the double
width register by the single width registers.

By default @@code{--construct-floats} is selected, allowing construction
of these floating point constants.

@@item --trap
@@itemx --no-break
@@c FIXME!  (1) reflect these options (next item too) in option summaries;
@@c         (2) stop teasing, say _which_ instructions expanded _how_.
@@code{@@value{AS}} automatically macro expands certain division and
multiplication instructions to check for overflow and division by zero.  This
option causes @@code{@@value{AS}} to generate code to take a trap exception
rather than a break exception when an error is detected.  The trap instructions
are only supported at Instruction Set Architecture level 2 and higher.

@@item --break
@@itemx --no-trap
Generate code to take a break exception rather than a trap exception when an
error is detected.  This is the default.

@@item -mpdr
@@itemx -mno-pdr
Control generation of @@code{.pdr} sections.  Off by default on IRIX, on
elsewhere.
@@end table

@@node MIPS Object
@@section MIPS ECOFF object code

@@cindex ECOFF sections
@@cindex MIPS ECOFF sections
Assembling for a @@sc{mips} @@sc{ecoff} target supports some additional sections
besides the usual @@code{.text}, @@code{.data} and @@code{.bss}.  The
additional sections are @@code{.rdata}, used for read-only data,
@@code{.sdata}, used for small data, and @@code{.sbss}, used for small
common objects.

@@cindex small objects, MIPS ECOFF
@@cindex @@code{gp} register, MIPS
When assembling for @@sc{ecoff}, the assembler uses the @@code{$gp} (@@code{$28})
register to form the address of a ``small object''.  Any object in the
@@code{.sdata} or @@code{.sbss} sections is considered ``small'' in this sense.
For external objects, or for objects in the @@code{.bss} section, you can use
the @@code{@@value{GCC}} @@samp{-G} option to control the size of objects addressed via
@@code{$gp}; the default value is 8, meaning that a reference to any object
eight bytes or smaller uses @@code{$gp}.  Passing @@samp{-G 0} to
@@code{@@value{AS}} prevents it from using the @@code{$gp} register on the basis
of object size (but the assembler uses @@code{$gp} for objects in @@code{.sdata}
or @@code{sbss} in any case).  The size of an object in the @@code{.bss} section
is set by the @@code{.comm} or @@code{.lcomm} directive that defines it.  The
size of an external object may be set with the @@code{.extern} directive.  For
example, @@samp{.extern sym,4} declares that the object at @@code{sym} is 4 bytes
in length, whie leaving @@code{sym} otherwise undefined.

Using small @@sc{ecoff} objects requires linker support, and assumes that the
@@code{$gp} register is correctly initialized (normally done automatically by
the startup code).  @@sc{mips} @@sc{ecoff} assembly code must not modify the
@@code{$gp} register.

@@node MIPS Stabs
@@section Directives for debugging information

@@cindex MIPS debugging directives
@@sc{mips} @@sc{ecoff} @@code{@@value{AS}} supports several directives used for
generating debugging information which are not support by traditional @@sc{mips}
assemblers.  These are @@code{.def}, @@code{.endef}, @@code{.dim}, @@code{.file},
@@code{.scl}, @@code{.size}, @@code{.tag}, @@code{.type}, @@code{.val},
@@code{.stabd}, @@code{.stabn}, and @@code{.stabs}.  The debugging information
generated by the three @@code{.stab} directives can only be read by @@sc{gdb},
not by traditional @@sc{mips} debuggers (this enhancement is required to fully
support C++ debugging).  These directives are primarily used by compilers, not
assembly language programmers!

@@node MIPS ISA
@@section Directives to override the ISA level

@@cindex MIPS ISA override
@@kindex @@code{.set mips@@var{n}}
@@sc{gnu} @@code{@@value{AS}} supports an additional directive to change
the @@sc{mips} Instruction Set Architecture level on the fly: @@code{.set
mips@@var{n}}.  @@var{n} should be a number from 0 to 5, or 32, 32r2, 64
or 64r2.
The values other than 0 make the assembler accept instructions
for the corresponding @@sc{isa} level, from that point on in the
assembly.  @@code{.set mips@@var{n}} affects not only which instructions
are permitted, but also how certain macros are expanded.  @@code{.set
mips0} restores the @@sc{isa} level to its original level: either the
level you selected with command line options, or the default for your
configuration.  You can use this feature to permit specific @@sc{r4000}
instructions while assembling in 32 bit mode.  Use this directive with
care!

The directive @@samp{.set mips16} puts the assembler into MIPS 16 mode,
in which it will assemble instructions for the MIPS 16 processor.  Use
@@samp{.set nomips16} to return to normal 32 bit mode.

Traditional @@sc{mips} assemblers do not support this directive.

@@node MIPS autoextend
@@section Directives for extending MIPS 16 bit instructions

@@kindex @@code{.set autoextend}
@@kindex @@code{.set noautoextend}
By default, MIPS 16 instructions are automatically extended to 32 bits
when necessary.  The directive @@samp{.set noautoextend} will turn this
off.  When @@samp{.set noautoextend} is in effect, any 32 bit instruction
must be explicitly extended with the @@samp{.e} modifier (e.g.,
@@samp{li.e $4,1000}).  The directive @@samp{.set autoextend} may be used
to once again automatically extend instructions when necessary.

This directive is only meaningful when in MIPS 16 mode.  Traditional
@@sc{mips} assemblers do not support this directive.

@@node MIPS insn
@@section Directive to mark data as an instruction

@@kindex @@code{.insn}
The @@code{.insn} directive tells @@code{@@value{AS}} that the following
data is actually instructions.  This makes a difference in MIPS 16 mode:
when loading the address of a label which precedes instructions,
@@code{@@value{AS}} automatically adds 1 to the value, so that jumping to
the loaded address will do the right thing.

@@node MIPS option stack
@@section Directives to save and restore options

@@cindex MIPS option stack
@@kindex @@code{.set push}
@@kindex @@code{.set pop}
The directives @@code{.set push} and @@code{.set pop} may be used to save
and restore the current settings for all the options which are
controlled by @@code{.set}.  The @@code{.set push} directive saves the
current settings on a stack.  The @@code{.set pop} directive pops the
stack and restores the settings.

These directives can be useful inside an macro which must change an
option such as the ISA level or instruction reordering but does not want
to change the state of the code which invoked the macro.

Traditional @@sc{mips} assemblers do not support these directives.

@@node MIPS ASE instruction generation overrides
@@section Directives to control generation of MIPS ASE instructions

@@cindex MIPS MIPS-3D instruction generation override
@@kindex @@code{.set mips3d}
@@kindex @@code{.set nomips3d}
The directive @@code{.set mips3d} makes the assembler accept instructions
from the MIPS-3D Application Specific Extension from that point on
in the assembly.  The @@code{.set nomips3d} directive prevents MIPS-3D
instructions from being accepted.

@@cindex MIPS MDMX instruction generation override
@@kindex @@code{.set mdmx}
@@kindex @@code{.set nomdmx}
The directive @@code{.set mdmx} makes the assembler accept instructions
from the MDMX Application Specific Extension from that point on
in the assembly.  The @@code{.set nomdmx} directive prevents MDMX
instructions from being accepted.

Traditional @@sc{mips} assemblers do not support these directives.
@


1.5
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d131 8
@


1.4
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d1 2
a2 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 1999, 2000
d71 1
d76 6
a81 4
@@sc{r10000} processors.  @@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2}, and
@@samp{-mips64} correspond to generic @@sc{MIPS V}, @@sc{MIPS32},
@@sc{MIPS32 Release 2}, and
@@sc{MIPS64} ISA processors, respectively.  You can also switch
d125 5
a129 5
@@item -mfix-vr4122-bugs
@@itemx -no-mfix-vr4122-bugs
Insert @@samp{nop} instructions to avoid errors in certain versions of
the vr4122 core.  This option is intended to be used on GCC-generated
code: it is not designed to catch errors in hand-written assembler code.
d185 1
d237 4
a240 3
@@item -n
When this option is used, @@code{@@value{AS}} will issue a warning every
time it generates a nop instruction from a macro.
d297 2
a298 1
mips@@var{n}}.  @@var{n} should be a number from 0 to 5, or 32, 32r2, or 64.
@


1.3
log
@resolve conflicts.
@
text
@d31 2
d68 1
d74 3
a76 2
@@sc{r10000} processors.  @@samp{-mips5}, @@samp{-mips32}, and
@@samp{-mips64} correspond to generic @@sc{MIPS V}, @@sc{MIPS32}, and
d79 1
a79 1
override the ISA level}. 
d82 11
a92 7
Assume that 32-bit general purpose registers are available.  This
affects synthetic instructions such as @@code{move}, which will assemble
to a 32-bit or a 64-bit instruction depending on this flag.  On some
MIPS variants there is a 32-bit mode flag; when this flag is set,
64-bit instructions generate a trap.  Also, some 32-bit OSes only save
the 32-bit registers on a context switch, so it is essential never to
use the 64-bit registers.
d104 12
d117 1
a117 1
@@itemx -no-mfix7000
d121 6
d150 1
a150 1
@@item -mcpu=@@var{cpu}
d163 3
d176 2
d182 1
d187 7
d231 4
d291 2
a292 2
mips@@var{n}}.  @@var{n} should be a number from 0 to 5, or 32 or 64.
The values 1 to 5, 32, and 64 make the assembler accept instructions
d300 1
a300 1
care! 
d306 1
a306 1
Traditional @@sc{mips} assemblers do not support this directive.  
d348 21
@


1.2
log
@Help stupid cvs fixing basic conflicts.
@
text
@d1 2
a2 1
@@c Copyright (C) 1991, 92, 93, 94, 95, 1997 Free Software Foundation, Inc.
d17 5
a21 5
different @@sc{mips} processors, and MIPS ISA levels I through IV.  For
information about the @@sc{mips} instruction set, see @@cite{MIPS RISC
Architecture}, by Kane and Heindrich (Prentice-Hall).  For an overview
of @@sc{mips} assembly conventions, see ``Appendix D: Assembly Language
Programming'' in the same work.
d64 3
d71 5
a75 2
@@sc{r10000} processors.  You can also switch instruction sets during the
assembly; see @@ref{MIPS ISA,, Directives to override the ISA level}.
d142 5
d148 1
d150 3
a152 1
10000
d163 15
d248 10
a257 9
mips@@var{n}}.  @@var{n} should be a number from 0 to 4.  A value from 1
to 4 makes the assembler accept instructions for the corresponding
@@sc{isa} level, from that point on in the assembly.  @@code{.set
mips@@var{n}} affects not only which instructions are permitted, but also
how certain macros are expanded.  @@code{.set mips0} restores the
@@sc{isa} level to its original level: either the level you selected with
command line options, or the default for your configuration.  You can
use this feature to permit specific @@sc{r4000} instructions while
assembling in 32 bit mode.  Use this directive with care!
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@c Copyright (C) 1991, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.
d14 7
a20 10
@@cindex MIPS R2000
@@cindex MIPS R3000
@@cindex MIPS R4000
@@cindex MIPS R6000
@@sc{gnu} @@code{@@value{AS}} for @@sc{mips} architectures supports the @@sc{mips}
@@sc{r2000}, @@sc{r3000}, @@sc{r4000} and @@sc{r6000} processors.  For information
about the @@sc{mips} instruction set, see @@cite{MIPS RISC Architecture}, by Kane
and Heindrich (Prentice-Hall).  For an overview of @@sc{mips} assembly
conventions, see ``Appendix D: Assembly Language Programming'' in the same
work.
d23 7
a29 4
* MIPS Opts::   Assembler options
* MIPS Object:: ECOFF object code
* MIPS Stabs::  Directives for debugging information
* MIPS ISA::    Directives to override the ISA level
d62 1
d65 36
a100 3
@@samp{-mips2} to the @@sc{r6000} processor, and @@samp{-mips3} to the @@sc{r4000}
processor.  You can also switch instruction sets during the assembly; see
@@ref{MIPS ISA,, Directives to override the ISA level}.
d103 1
a103 1
@@item -no-m4650
d109 30
a138 7
@@item -m4010
@@item -no-m4010
Generate code for the LSI @@sc{r4010} chip.  This tells the assembler to
accept the @@sc{r4010} specific instructions (@@samp{addciu}, @@samp{ffc},
etc.), and to not schedule @@samp{nop} instructions around accesses to
the @@samp{HI} and @@samp{LO} registers.  @@samp{-no-m4010} turns off this
option.
a139 3
@@item -mcpu=@@var{CPU}
Generate code for a particular MIPS cpu.  This has little effect on the
assembler, but it is passed by @@code{@@value{GCC}}.
d216 15
a230 10
@@sc{gnu} @@code{@@value{AS}} supports an additional directive to change the
@@sc{mips} Instruction Set Architecture level on the fly: @@code{.set
mips@@var{n}}.  @@var{n} should be a number from 0 to 3.  A value from 1 to 3
makes the assembler accept instructions for the corresponding @@sc{isa} level,
from that point on in the assembly.  @@code{.set mips@@var{n}} affects not only
which instructions are permitted, but also how certain macros are expanded.
@@code{.set mips0} restores the @@sc{isa} level to its original level: either the
level you selected with command line options, or the default for your
configuration.  You can use this feature to permit specific @@sc{r4000}
instructions while assembling in 32 bit mode.  Use this directive with care!
d233 43
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d1 1
a1 1
@@c Copyright (C) 1991, 92, 93, 94, 95, 1997 Free Software Foundation, Inc.
d14 10
a23 7
@@cindex MIPS processor
@@sc{gnu} @@code{@@value{AS}} for @@sc{mips} architectures supports several
different @@sc{mips} processors, and MIPS ISA levels I through IV.  For
information about the @@sc{mips} instruction set, see @@cite{MIPS RISC
Architecture}, by Kane and Heindrich (Prentice-Hall).  For an overview
of @@sc{mips} assembly conventions, see ``Appendix D: Assembly Language
Programming'' in the same work.
d26 4
a29 6
* MIPS Opts::   	Assembler options
* MIPS Object:: 	ECOFF object code
* MIPS Stabs::  	Directives for debugging information
* MIPS ISA::    	Directives to override the ISA level
* MIPS insn::		Directive to mark data as an instruction
* MIPS option stack::	Directives to save and restore options
a61 1
@@itemx -mips4
d64 3
a66 10
@@samp{-mips2} to the @@sc{r6000} processor, @@samp{-mips3} to the
@@sc{r4000} processor, and @@samp{-mips4} to the @@sc{r8000} and
@@sc{r10000} processors.  You can also switch instruction sets during the
assembly; see @@ref{MIPS ISA,, Directives to override the ISA level}.

@@item -mips16
@@itemx -no-mips16
Generate code for the MIPS 16 processor.  This is equivalent to putting
@@samp{.set mips16} at the start of the assembly file.  @@samp{-no-mips16}
turns off this option.
d69 1
a69 1
@@itemx -no-m4650
d76 1
a76 1
@@itemx -no-m4010
d162 10
a171 15
@@sc{gnu} @@code{@@value{AS}} supports an additional directive to change
the @@sc{mips} Instruction Set Architecture level on the fly: @@code{.set
mips@@var{n}}.  @@var{n} should be a number from 0 to 4.  A value from 1
to 4 makes the assembler accept instructions for the corresponding
@@sc{isa} level, from that point on in the assembly.  @@code{.set
mips@@var{n}} affects not only which instructions are permitted, but also
how certain macros are expanded.  @@code{.set mips0} restores the
@@sc{isa} level to its original level: either the level you selected with
command line options, or the default for your configuration.  You can
use this feature to permit specific @@sc{r4000} instructions while
assembling in 32 bit mode.  Use this directive with care!

The directive @@samp{.set mips16} puts the assembler into MIPS 16 mode,
in which it will assemble instructions for the MIPS 16 processor.  Use
@@samp{.set nomips16} to return to normal 32 bit mode.
a173 28

@@node MIPS insn
@@section Directive to mark data as an instruction

@@kindex @@code{.insn}
The @@code{.insn} directive tells @@code{@@value{AS}} that the following
data is actually instructions.  This makes a difference in MIPS 16 mode:
when loading the address of a label which precedes instructions,
@@code{@@value{AS}} automatically adds 1 to the value, so that jumping to
the loaded address will do the right thing.

@@node MIPS option stack
@@section Directives to save and restore options

@@cindex MIPS option stack
@@kindex @@code{.set push}
@@kindex @@code{.set pop}
The directives @@code{.set push} and @@code{.set pop} may be used to save
and restore the current settings for all the options which are
controlled by @@code{.set}.  The @@code{.set push} directive saves the
current settings on a stack.  The @@code{.set pop} directive pops the
stack and restores the settings.

These directives can be useful inside an macro which must change an
option such as the ISA level or instruction reordering but does not want
to change the state of the code which invoked the macro.

Traditional @@sc{mips} assemblers do not support these directives.
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a26 1
* MIPS autoextend::	Directives for extending MIPS 16 bit instructions
a68 13
@@item -mgp32
Assume that 32-bit general purpose registers are available.  This
affects synthetic instructions such as @@code{move}, which will assemble
to a 32-bit or a 64-bit instruction depending on this flag.  On some
MIPS variants there is a 32-bit mode flag; when this flag is set,
64-bit instructions generate a trap.  Also, some 32-bit OSes only save
the 32-bit registers on a context switch, so it is essential never to
use the 64-bit registers.

@@item -mgp64
Assume that 64-bit general purpose registers are available.  This is
provided in the interests of symmetry with -gp32.

d75 6
a80 4
@@item -mfix7000
@@itemx -no-mfix7000
Cause nops to be inserted if the read of the destination register
of an mfhi or mflo instruction occurs in the following two instructions.
d90 3
a92 38
@@item -m4650
@@itemx -no-m4650
Generate code for the MIPS @@sc{r4650} chip.  This tells the assembler to accept
the @@samp{mad} and @@samp{madu} instruction, and to not schedule @@samp{nop}
instructions around accesses to the @@samp{HI} and @@samp{LO} registers.
@@samp{-no-m4650} turns off this option.

@@itemx -m3900
@@itemx -no-m3900
@@itemx -m4100
@@itemx -no-m4100
For each option @@samp{-m@@var{nnnn}}, generate code for the MIPS
@@sc{r@@var{nnnn}} chip.  This tells the assembler to accept instructions
specific to that chip, and to schedule for that chip's hazards.

@@item -mcpu=@@var{cpu}
Generate code for a particular MIPS cpu.  It is exactly equivalent to
@@samp{-m@@var{cpu}}, except that there are more value of @@var{cpu}
understood.  Valid @@var{cpu} value are:

@@quotation
2000,
3000,
3900,
4000,
4010,
4100,
4111,
4300,
4400,
4600,
4650,
5000,
6000,
8000,
10000
@@end quotation

a185 15

@@node MIPS autoextend
@@section Directives for extending MIPS 16 bit instructions

@@kindex @@code{.set autoextend}
@@kindex @@code{.set noautoextend}
By default, MIPS 16 instructions are automatically extended to 32 bits
when necessary.  The directive @@samp{.set noautoextend} will turn this
off.  When @@samp{.set noautoextend} is in effect, any 32 bit instruction
must be explicitly extended with the @@samp{.e} modifier (e.g.,
@@samp{li.e $4,1000}).  The directive @@samp{.set autoextend} may be used
to once again automatically extend instructions when necessary.

This directive is only meaningful when in MIPS 16 mode.  Traditional
@@sc{mips} assemblers do not support this directive.
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 1
a1 2
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 1999, 2000
@@c Free Software Foundation, Inc.
d16 5
a20 5
different @@sc{mips} processors, and MIPS ISA levels I through V, MIPS32,
and MIPS64.  For information about the @@sc{mips} instruction set, see
@@cite{MIPS RISC Architecture}, by Kane and Heindrich (Prentice-Hall).
For an overview of @@sc{mips} assembly conventions, see ``Appendix D:
Assembly Language Programming'' in the same work.
a62 3
@@itemx -mips5
@@itemx -mips32
@@itemx -mips64
d67 2
a68 5
@@sc{r10000} processors.  @@samp{-mips5}, @@samp{-mips32}, and
@@samp{-mips64} correspond to generic @@sc{MIPS V}, @@sc{MIPS32}, and
@@sc{MIPS64} ISA processors, respectively.  You can also switch
instruction sets during the assembly; see @@ref{MIPS ISA, Directives to
override the ISA level}. 
a134 5
rm5200,
rm5230,
rm5231,
rm5261,
rm5721,
a135 1
rm7000,
d137 1
a137 3
10000,
mips32-4k,
sb1
a147 15
@@item --construct-floats
@@itemx --no-construct-floats
@@cindex --construct-floats
@@cindex --no-construct-floats
The @@code{--no-construct-floats} option disables the construction of
double width floating point constants by loading the two halves of the
value into the two single width floating point registers that make up
the double width register.  This feature is useful if the processor
support the FR bit in its status  register, and this bit is known (by
the programmer) to be set.  This bit prevents the aliasing of the double
width register by the single width registers.

By default @@code{--construct-floats} is selected, allowing construction
of these floating point constants.

d218 9
a226 10
mips@@var{n}}.  @@var{n} should be a number from 0 to 5, or 32 or 64.
The values 1 to 5, 32, and 64 make the assembler accept instructions
for the corresponding @@sc{isa} level, from that point on in the
assembly.  @@code{.set mips@@var{n}} affects not only which instructions
are permitted, but also how certain macros are expanded.  @@code{.set
mips0} restores the @@sc{isa} level to its original level: either the
level you selected with command line options, or the default for your
configuration.  You can use this feature to permit specific @@sc{r4000}
instructions while assembling in 32 bit mode.  Use this directive with
care! 
@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@a30 2
* MIPS ASE instruction generation overrides:: Directives to control
  			generation of MIPS ASE instructions
a65 1
@@itemx -mips32r2
d71 2
a72 3
@@sc{r10000} processors.  @@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2}, and
@@samp{-mips64} correspond to generic @@sc{MIPS V}, @@sc{MIPS32},
@@sc{MIPS32 Release 2}, and
d75 1
a75 1
override the ISA level}.
d78 7
a84 11
@@itemx -mfp32
Some macros have different expansions for 32-bit and 64-bit registers.
The register sizes are normally inferred from the ISA and ABI, but these
flags force a certain group of registers to be treated as 32 bits wide at
all times.  @@samp{-mgp32} controls the size of general-purpose registers
and @@samp{-mfp32} controls the size of floating-point registers.

On some MIPS variants there is a 32-bit mode flag; when this flag is
set, 64-bit instructions generate a trap.  Also, some 32-bit OSes only
save the 32-bit registers on a context switch, so it is essential never
to use the 64-bit registers.
a95 12
@@item -mips3d
@@itemx -no-mips3d
Generate code for the MIPS-3D Application Specific Extension.
This tells the assembler to accept MIPS-3D instructions.
@@samp{-no-mips3d} turns off this option.

@@item -mdmx
@@itemx -no-mdmx
Generate code for the MDMX Application Specific Extension.
This tells the assembler to accept MDMX instructions.
@@samp{-no-mdmx} turns off this option.

d97 1
a97 1
@@itemx -mno-fix7000
a100 6
@@item -mfix-vr4122-bugs
@@itemx -no-mfix-vr4122-bugs
Insert @@samp{nop} instructions to avoid errors in certain versions of
the vr4122 core.  This option is intended to be used on GCC-generated
code: it is not designed to catch errors in hand-written assembler code.

d124 1
a124 1
@@item -march=@@var{cpu}
a136 3
vr4120,
vr4130,
vr4181,
a146 2
vr5400,
vr5500,
a150 1
12000,
a154 7
@@item -mtune=@@var{cpu}
Schedule and tune for a particular MIPS cpu.  Valid @@var{cpu} values are
identical to @@samp{-march=@@var{cpu}}.

@@item -mabi=@@var{abi}
Record which ABI the source code uses.  The recognized arguments
are: @@samp{32}, @@samp{n32}, @@samp{o64}, @@samp{64} and @@samp{eabi}.
a191 4

@@item -n
When this option is used, @@code{@@value{AS}} will issue a warning every
time it generates a nop instruction from a macro.
d248 2
a249 2
mips@@var{n}}.  @@var{n} should be a number from 0 to 5, or 32, 32r2, or 64.
The values other than 0 make the assembler accept instructions
d257 1
a257 1
care!
d263 1
a263 1
Traditional @@sc{mips} assemblers do not support this directive.
a304 21

Traditional @@sc{mips} assemblers do not support these directives.

@@node MIPS ASE instruction generation overrides
@@section Directives to control generation of MIPS ASE instructions

@@cindex MIPS MIPS-3D instruction generation override
@@kindex @@code{.set mips3d}
@@kindex @@code{.set nomips3d}
The directive @@code{.set mips3d} makes the assembler accept instructions
from the MIPS-3D Application Specific Extension from that point on
in the assembly.  The @@code{.set nomips3d} directive prevents MIPS-3D
instructions from being accepted.

@@cindex MIPS MDMX instruction generation override
@@kindex @@code{.set mdmx}
@@kindex @@code{.set nomdmx}
The directive @@code{.set mdmx} makes the assembler accept instructions
from the MDMX Application Specific Extension from that point on
in the assembly.  The @@code{.set nomdmx} directive prevents MDMX
instructions from being accepted.
@


1.1.1.6
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d1 1
a1 2
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001,
@@c 2002, 2003, 2004
a69 1
@@itemx -mips64r2
d74 4
a77 6
@@sc{r10000} processors.  @@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2},
@@samp{-mips64}, and @@samp{-mips64r2}
correspond to generic
@@sc{MIPS V}, @@sc{MIPS32}, @@sc{MIPS32 Release 2}, @@sc{MIPS64},
and @@sc{MIPS64 Release 2}
ISA processors, respectively.  You can also switch
d121 5
a125 5
@@item -mfix-vr4120
@@itemx -no-mfix-vr4120
Insert nops to work around certain VR4120 errata.  This option is
intended to be used on GCC-generated code: it is not designed to catch
all problems in hand-written assembler code.
a180 1
rm9000,
d232 3
a234 4
@@item -mpdr
@@itemx -mno-pdr
Control generation of @@code{.pdr} sections.  Off by default on IRIX, on
elsewhere.
d291 1
a291 2
mips@@var{n}}.  @@var{n} should be a number from 0 to 5, or 32, 32r2, 64
or 64r2.
@


