head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.54
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.50
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.46
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.48
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.40
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.44
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.42
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.38
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.36
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.34
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.32
	OPENBSD_5_0:1.6.0.30
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.28
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.26
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.22
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.24
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.20
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.6
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2004.05.17.21.54.32;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.37;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.22.25.06;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.11.56;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.51.59;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.06.26;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.06.26;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.39.59;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.23.50;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.46.37;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.13.38.19;	author fgsch;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.17.20.42.35;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 1999
@@c Free Software Foundation, Inc.
@@c This is part of the GAS manual.
@@c For copying conditions, see the file as.texinfo.
@@ifset GENERIC
@@page
@@node Sparc-Dependent
@@chapter SPARC Dependent Features
@@end ifset
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter SPARC Dependent Features
@@end ifclear

@@cindex SPARC support
@@menu
* Sparc-Opts::                  Options
* Sparc-Aligned-Data::		Option to enforce aligned data
* Sparc-Float::                 Floating Point
* Sparc-Directives::            Sparc Machine Directives
@@end menu

@@node Sparc-Opts
@@section Options

@@cindex options for SPARC
@@cindex SPARC options
@@cindex architectures, SPARC
@@cindex SPARC architectures
The SPARC chip family includes several successive levels, using the same
core instruction set, but including a few additional instructions at
each level.  There are exceptions to this however.  For details on what
instructions each variant supports, please see the chip's architecture
reference manual.

By default, @@code{@@value{AS}} assumes the core instruction set (SPARC
v6), but ``bumps'' the architecture level as needed: it switches to
successively higher architectures as it encounters instructions that
only exist in the higher levels.

If not configured for SPARC v9 (@@code{sparc64-*-*}) GAS will not bump
passed sparclite by default, an option must be passed to enable the
v9 instructions.

GAS treats sparclite as being compatible with v8, unless an architecture
is explicitly requested.  SPARC v9 is always incompatible with sparclite.

@@c The order here is the same as the order of enum sparc_opcode_arch_val
@@c to give the user a sense of the order of the "bumping".

@@table @@code
@@kindex -Av6
@@kindex Av7
@@kindex -Av8
@@kindex -Asparclet
@@kindex -Asparclite
@@kindex -Av9
@@kindex -Av9a
@@item -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite
@@itemx -Av8plus | -Av8plusa | -Av9 | -Av9a
Use one of the @@samp{-A} options to select one of the SPARC
architectures explicitly.  If you select an architecture explicitly,
@@code{@@value{AS}} reports a fatal error if it encounters an instruction
or feature requiring an incompatible or higher level.

@@samp{-Av8plus} and @@samp{-Av8plusa} select a 32 bit environment.

@@samp{-Av9} and @@samp{-Av9a} select a 64 bit environment and are not
available unless GAS is explicitly configured with 64 bit environment
support.

@@samp{-Av8plusa} and @@samp{-Av9a} enable the SPARC V9 instruction set with
UltraSPARC extensions.

@@item -xarch=v8plus | -xarch=v8plusa
For compatibility with the Solaris v9 assembler.  These options are
equivalent to -Av8plus and -Av8plusa, respectively.

@@item -bump
Warn whenever it is necessary to switch to another level.
If an architecture level is explicitly requested, GAS will not issue
warnings until that level is reached, and will then bump the level
as required (except between incompatible levels).

@@item -32 | -64
Select the word size, either 32 bits or 64 bits.
These options are only available with the ELF object file format,
and require that the necessary BFD support has been included.
@@end table

@@node Sparc-Aligned-Data
@@section Enforcing aligned data

@@cindex data alignment on SPARC
@@cindex SPARC data alignment
SPARC GAS normally permits data to be misaligned.  For example, it
permits the @@code{.long} pseudo-op to be used on a byte boundary.
However, the native SunOS and Solaris assemblers issue an error when
they see misaligned data.

@@kindex --enforce-aligned-data
You can use the @@code{--enforce-aligned-data} option to make SPARC GAS
also issue an error about misaligned data, just as the SunOS and Solaris
assemblers do.

The @@code{--enforce-aligned-data} option is not the default because gcc
issues misaligned data pseudo-ops when it initializes certain packed
data structures (structures defined using the @@code{packed} attribute).
You may have to assemble with GAS in order to initialize packed data
structures in your own code.

@@ignore
@@c FIXME: (sparc) Fill in "syntax" section!
@@c subsection syntax
I don't know anything about Sparc syntax.  Someone who does
will have to write this section.
@@end ignore

@@node Sparc-Float
@@section Floating Point

@@cindex floating point, SPARC (@@sc{ieee})
@@cindex SPARC floating point (@@sc{ieee})
The Sparc uses @@sc{ieee} floating-point numbers.

@@node Sparc-Directives
@@section Sparc Machine Directives

@@cindex SPARC machine directives
@@cindex machine directives, SPARC
The Sparc version of @@code{@@value{AS}} supports the following additional
machine directives:

@@table @@code
@@cindex @@code{align} directive, SPARC
@@item .align
This must be followed by the desired alignment in bytes.

@@cindex @@code{common} directive, SPARC
@@item .common
This must be followed by a symbol name, a positive number, and
@@code{"bss"}.  This behaves somewhat like @@code{.comm}, but the
syntax is different.

@@cindex @@code{half} directive, SPARC
@@item .half
This is functionally identical to @@code{.short}.

@@cindex @@code{nword} directive, SPARC
@@item .nword
On the Sparc, the @@code{.nword} directive produces native word sized value,
ie. if assembling with -32 it is equivalent to @@code{.word}, if assembling
with -64 it is equivalent to @@code{.xword}.

@@cindex @@code{proc} directive, SPARC
@@item .proc
This directive is ignored.  Any text following it on the same
line is also ignored.

@@cindex @@code{register} directive, SPARC
@@item .register
This directive declares use of a global application or system register.
It must be followed by a register name %g2, %g3, %g6 or %g7, comma and
the symbol name for that register.  If symbol name is @@code{#scratch},
it is a scratch register, if it is @@code{#ignore}, it just suppresses any
errors about using undeclared global register, but does not emit any
information about it into the object file.  This can be useful e.g. if you
save the register before use and restore it after.

@@cindex @@code{reserve} directive, SPARC
@@item .reserve
This must be followed by a symbol name, a positive number, and
@@code{"bss"}.  This behaves somewhat like @@code{.lcomm}, but the
syntax is different.

@@cindex @@code{seg} directive, SPARC
@@item .seg
This must be followed by @@code{"text"}, @@code{"data"}, or
@@code{"data1"}.  It behaves like @@code{.text}, @@code{.data}, or
@@code{.data 1}.

@@cindex @@code{skip} directive, SPARC
@@item .skip
This is functionally identical to the @@code{.space} directive.

@@cindex @@code{word} directive, SPARC
@@item .word
On the Sparc, the @@code{.word} directive produces 32 bit values,
instead of the 16 bit values it produces on many other machines.

@@cindex @@code{xword} directive, SPARC
@@item .xword
On the Sparc V9 processor, the @@code{.xword} directive produces
64 bit values.
@@end table
@


1.5
log
@resolve conflicts.
@
text
@d165 1
a165 1
it is a scratch register, if it is @@code{#ignore}, it just surpresses any
@


1.4
log
@Resolve other problems that dumb cvs can't find out by itself.

(trivial part done, `interesting' patches remain)
@
text
@d1 2
a2 1
@@c Copyright (C) 1991, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d17 1
d89 21
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d57 2
a58 1
@@item -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite | -Av9 | -Av9a
d62 1
a62 1
or feature requiring a higher level.
d64 8
a71 2
@@c Leave this commented out until all UltraSPARC insns are supported.
@@c @@samp{-Av9a} enables the SPARC v9 instruction set with UltraSPARC extensions.
d75 1
a75 1
equivalent to -Av9 and -Av9a, respectively.
d82 5
d126 6
d137 10
a172 1

@


1.1
log
@Initial revision
@
text
@d28 5
a32 3
The SPARC chip family includes several successive levels (or other
variants) of chip, using the same core instruction set, but including
a few additional instructions at each level.
d39 10
d53 2
d56 2
a57 2
@@kindex -Asparclite
@@item -Av6 | -Av7 | -Av8 | -Av9 | -Asparclite
d63 7
d71 4
a74 2
Permit the assembler to ``bump'' the architecture level as required, but
warn whenever it is necessary to switch to another level.
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d28 3
a30 5
The SPARC chip family includes several successive levels, using the same
core instruction set, but including a few additional instructions at
each level.  There are exceptions to this however.  For details on what
instructions each variant supports, please see the chip's architecture
reference manual.
a36 10
If not configured for SPARC v9 (@@code{sparc64-*-*}) GAS will not bump
passed sparclite by default, an option must be passed to enable the
v9 instructions.

GAS treats sparclite as being compatible with v8, unless an architecture
is explicitly requested.  SPARC v9 is always incompatible with sparclite.

@@c The order here is the same as the order of enum sparc_opcode_arch_val
@@c to give the user a sense of the order of the "bumping".

d41 1
a41 1
@@kindex -Asparclet
d43 1
a43 3
@@kindex -Av9
@@kindex -Av9a
@@item -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite | -Av9 | -Av9a
a48 7
@@c Leave this commented out until all UltraSPARC insns are supported.
@@c @@samp{-Av9a} enables the SPARC v9 instruction set with UltraSPARC extensions.

@@item -xarch=v8plus | -xarch=v8plusa
For compatibility with the Solaris v9 assembler.  These options are
equivalent to -Av9 and -Av9a, respectively.

d50 2
a51 4
Warn whenever it is necessary to switch to another level.
If an architecture level is explicitly requested, GAS will not issue
warnings until that level is reached, and will then bump the level
as required (except between incompatible levels).
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@a16 1
* Sparc-Aligned-Data::		Option to enforce aligned data
a75 21

@@node Sparc-Aligned-Data
@@section Enforcing aligned data

@@cindex data alignment on SPARC
@@cindex SPARC data alignment
SPARC GAS normally permits data to be misaligned.  For example, it
permits the @@code{.long} pseudo-op to be used on a byte boundary.
However, the native SunOS and Solaris assemblers issue an error when
they see misaligned data.

@@kindex --enforce-aligned-data
You can use the @@code{--enforce-aligned-data} option to make SPARC GAS
also issue an error about misaligned data, just as the SunOS and Solaris
assemblers do.

The @@code{--enforce-aligned-data} option is not the default because gcc
issues misaligned data pseudo-ops when it initializes certain packed
data structures (structures defined using the @@code{packed} attribute).
You may have to assemble with GAS in order to initialize packed data
structures in your own code.
@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d58 1
a58 2
@@item -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite
@@itemx -Av8plus | -Av8plusa | -Av9 | -Av9a
d62 1
a62 1
or feature requiring an incompatible or higher level.
d64 2
a65 8
@@samp{-Av8plus} and @@samp{-Av8plusa} select a 32 bit environment.

@@samp{-Av9} and @@samp{-Av9a} select a 64 bit environment and are not
available unless GAS is explicitly configured with 64 bit environment
support.

@@samp{-Av8plusa} and @@samp{-Av9a} enable the SPARC V9 instruction set with
UltraSPARC extensions.
d69 1
a69 1
equivalent to -Av8plus and -Av8plusa, respectively.
a75 5

@@item -32 | -64
Select the word size, either 32 bits or 64 bits.
These options are only available with the ELF object file format,
and require that the necessary BFD support has been included.
a135 6
@@cindex @@code{nword} directive, SPARC
@@item .nword
On the Sparc, the @@code{.nword} directive produces native word sized value,
ie. if assembling with -32 it is equivalent to @@code{.word}, if assembling
with -64 it is equivalent to @@code{.xword}.

a140 10
@@cindex @@code{register} directive, SPARC
@@item .register
This directive declares use of a global application or system register.
It must be followed by a register name %g2, %g3, %g6 or %g7, comma and
the symbol name for that register.  If symbol name is @@code{#scratch},
it is a scratch register, if it is @@code{#ignore}, it just surpresses any
errors about using undeclared global register, but does not emit any
information about it into the object file.  This can be useful e.g. if you
save the register before use and restore it after.

d167 1
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 1
a1 2
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 1999
@@c Free Software Foundation, Inc.
@


1.1.1.6
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d165 1
a165 1
it is a scratch register, if it is @@code{#ignore}, it just suppresses any
@


