head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.14
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.6
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.10
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.32
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.30
	OPENBSD_5_0:1.8.0.28
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.26
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.24
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.20
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	BINUTILS_2_15:1.1.1.9
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	BINUTILS-2_14:1.1.1.8
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	binutils-2_11_2:1.1.1.7
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	BINUTILS-2_10_1:1.1.1.6
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	new-binutils:1.4.0.14
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2016.06.28.19.45.53;	author jca;	state Exp;
branches;
next	1.10;
commitid	Kf75Lx3HJho0IY0E;

1.10
date	2015.11.26.11.13.57;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	z4OO72MoztCZpjzt;

1.9
date	2013.02.13.03.46.46;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.02.20.45.32;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.17.21.54.32;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.13.17.07.37;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.12.19.11.55;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.03.34.56;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.19.06.36;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.51.56;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.06.22;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.06.22;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.39.54;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.45.36;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.11.19.14.14.39;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.23.45;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.46.35;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2002.05.13.13.38.06;	author fgsch;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.05.17.20.42.34;	author drahn;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.11.02.20.22.58;	author miod;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Add missing words to help the reader.

ok mikeb@@
@
text
@\input texinfo @@c                               -*-Texinfo-*-
@@c  Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
@@c  2001, 2002, 2003, 2004
@@c  Free Software Foundation, Inc.
@@c UPDATE!!  On future updates--
@@c   (1)   check for new machine-dep cmdline options in
@@c         md_parse_option definitions in config/tc-*.c
@@c   (2)   for platform-specific directives, examine md_pseudo_op
@@c         in config/tc-*.c
@@c   (3)   for object-format specific directives, examine obj_pseudo_op
@@c         in config/obj-*.c       
@@c   (4)   portable directives in potable[] in read.c
@@c %**start of header
@@setfilename as.info
@@c ---config---
@@macro gcctabopt{body}
@@code{\body\}
@@end macro
@@c defaults, config file may override:
@@set have-stabs
@@c ---
@@c man begin NAME
@@c ---
@@include asconfig.texi
@@include gasver.texi
@@c ---
@@c man end
@@c ---
@@c common OR combinations of conditions
@@ifset COFF
@@set COFF-ELF
@@end ifset
@@ifset ELF
@@set COFF-ELF
@@end ifset
@@ifset AOUT
@@set aout-bout
@@end ifset
@@ifset ARM/Thumb
@@set ARM
@@end ifset
@@ifset BOUT
@@set aout-bout
@@end ifset
@@ifset H8/300
@@set H8
@@end ifset
@@ifset H8/500
@@set H8
@@end ifset
@@ifset SH
@@set H8
@@end ifset
@@ifset HPPA
@@set abnormal-separator
@@end ifset
@@c ------------
@@ifset GENERIC
@@settitle Using @@value{AS}
@@end ifset
@@ifclear GENERIC
@@settitle Using @@value{AS} (@@value{TARGET})
@@end ifclear
@@setchapternewpage odd
@@c %**end of header

@@c @@smallbook
@@c @@set SMALL
@@c WARE! Some of the machine-dependent sections contain tables of machine
@@c instructions.  Except in multi-column format, these tables look silly.
@@c Unfortunately, Texinfo doesn't have a general-purpose multi-col format, so
@@c the multi-col format is faked within @@example sections.
@@c 
@@c Again unfortunately, the natural size that fits on a page, for these tables,
@@c is different depending on whether or not smallbook is turned on.
@@c This matters, because of order: text flow switches columns at each page
@@c break.
@@c 
@@c The format faked in this source works reasonably well for smallbook,
@@c not well for the default large-page format.  This manual expects that if you
@@c turn on @@smallbook, you will also uncomment the "@@set SMALL" to enable the
@@c tables in question.  You can turn on one without the other at your
@@c discretion, of course. 
@@ifinfo
@@set SMALL
@@c the insn tables look just as silly in info files regardless of smallbook,
@@c might as well show 'em anyways.
@@end ifinfo

@@ifinfo
@@format
START-INFO-DIR-ENTRY
* As: (as).                     The GNU assembler.
* Gas: (as).                    The GNU assembler.
END-INFO-DIR-ENTRY
@@end format
@@end ifinfo

@@finalout
@@syncodeindex ky cp

@@ifinfo
This file documents the GNU Assembler "@@value{AS}".

@@c man begin COPYRIGHT
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@@c man end

@@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@@end ignore
@@end ifinfo

@@titlepage
@@title Using @@value{AS}
@@subtitle The @@sc{gnu} Assembler
@@ifclear GENERIC
@@subtitle for the @@value{TARGET} family
@@end ifclear
@@sp 1
@@subtitle Version @@value{VERSION}
@@sp 1
@@sp 13
The Free Software Foundation Inc.  thanks The Nice Computer
Company of Australia for loaning Dean Elsner to write the
first (Vax) version of @@command{as} for Project @@sc{gnu}.
The proprietors, management and staff of TNCCA thank FSF for
distracting the boss while they got some work
done.
@@sp 3
@@author Dean Elsner, Jay Fenlason & friends
@@page
@@tex
{\parskip=0pt
\hfill {\it Using {\tt @@value{AS}}}\par
\hfill Edited by Cygnus Support\par
}
%"boxit" macro for figures:
%Modified from Knuth's ``boxit'' macro from TeXbook (answer to exercise 21.3)
\gdef\boxit#1#2{\vbox{\hrule\hbox{\vrule\kern3pt
     \vbox{\parindent=0pt\parskip=0pt\hsize=#1\kern3pt\strut\hfil
#2\hfil\strut\kern3pt}\kern3pt\vrule}\hrule}}%box with visible outline
\gdef\ibox#1#2{\hbox to #1{#2\hfil}\kern8pt}% invisible box
@@end tex

@@vskip 0pt plus 1filll
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002 Free Software Foundation, Inc.

      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled ``GNU Free Documentation License''.

@@end titlepage

@@ifnottex
@@node Top
@@top Using @@value{AS}

This file is a user guide to the @@sc{gnu} assembler @@command{@@value{AS}} version
@@value{VERSION}.
@@ifclear GENERIC
This version of the file describes @@command{@@value{AS}} configured to generate
code for @@value{TARGET} architectures.
@@end ifclear

This document is distributed under the terms of the GNU Free
Documentation License.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@@menu
* Overview::                    Overview
* Invoking::                    Command-Line Options
* Syntax::                      Syntax
* Sections::                    Sections and Relocation
* Symbols::                     Symbols
* Expressions::                 Expressions
* Pseudo Ops::                  Assembler Directives
* Machine Dependencies::        Machine Dependent Features
* Reporting Bugs::              Reporting Bugs
* Acknowledgements::            Who Did What
* GNU Free Documentation License::  GNU Free Documentation License
* Index::                       Index
@@end menu
@@end ifnottex

@@node Overview
@@chapter Overview
@@iftex
This manual is a user guide to the @@sc{gnu} assembler @@command{@@value{AS}}.
@@ifclear GENERIC
This version of the manual describes @@command{@@value{AS}} configured to generate
code for @@value{TARGET} architectures.
@@end ifclear
@@end iftex

@@cindex invocation summary
@@cindex option summary
@@cindex summary of options
Here is a brief summary of how to invoke @@command{@@value{AS}}.  For details,
@@pxref{Invoking,,Command-Line Options}.

@@set as
@@c man title as the portable GNU assembler

@@ignore
@@c man begin SEEALSO
gcc(1), ld(1), and the Info entries for @@file{binutils} and @@file{ld}.
@@c man end
@@end ignore

@@c We don't use deffn and friends for the following because they seem
@@c to be limited to one line for the header.
@@smallexample
@@c man begin SYNOPSIS
@@value{AS} [@@b{-a}[@@b{cdhlns}][=@@var{file}]] [@@b{-D}] [@@b{--defsym} @@var{sym}=@@var{val}]
 [@@b{-f}] [@@b{--gstabs}] [@@b{--gstabs+}] [@@b{--gdwarf2}] [@@b{--help}]
 [@@b{-I} @@var{dir}] [@@b{-J}] [@@b{-K}] [@@b{-L}]
 [@@b{--listing-lhs-width}=@@var{NUM}] [@@b{--listing-lhs-width2}=@@var{NUM}]
 [@@b{--listing-rhs-width}=@@var{NUM}] [@@b{--listing-cont-lines}=@@var{NUM}]
 [@@b{--keep-locals}] [@@b{-o} @@var{objfile}] [@@b{-R}] [@@b{--statistics}] [@@b{-v}]
 [@@b{-version}] [@@b{--version}] [@@b{-W}] [@@b{--warn}] [@@b{--fatal-warnings}] 
 [@@b{-w}] [@@b{-x}] [@@b{-Z}] [@@b{--target-help}] [@@var{target-options}] 
 [@@b{--}|@@var{files} @@dots{}]
@@c
@@c Target dependent options are listed below.  Keep the list sorted.
@@c Add an empty line for separation. 
@@ifset A29K
@@c am29k has no machine-dependent assembler options
@@end ifset
@@ifset ALPHA

@@emph{Target Alpha options:}
   [@@b{-m@@var{cpu}}]
   [@@b{-mdebug} | @@b{-no-mdebug}]
   [@@b{-relax}] [@@b{-g}] [@@b{-G@@var{size}}]
   [@@b{-F}] [@@b{-32addr}]
@@end ifset
@@ifset ARC

@@emph{Target ARC options:}
   [@@b{-marc[5|6|7|8]}]
   [@@b{-EB}|@@b{-EL}]
@@end ifset
@@ifset ARM

@@emph{Target ARM options:}
@@c Don't document the deprecated options
   [@@b{-mcpu}=@@var{processor}[+@@var{extension}@@dots{}]]
   [@@b{-march}=@@var{architecture}[+@@var{extension}@@dots{}]]
   [@@b{-mfpu}=@@var{floating-point-format}]
   [@@b{-mfloat-abi}=@@var{abi}]
   [@@b{-mthumb}]
   [@@b{-EB}|@@b{-EL}]
   [@@b{-mapcs-32}|@@b{-mapcs-26}|@@b{-mapcs-float}|
    @@b{-mapcs-reentrant}]
   [@@b{-mthumb-interwork}] [@@b{-moabi}] [@@b{-k}]
@@end ifset
@@ifset CRIS

@@emph{Target CRIS options:}
   [@@b{--underscore} | @@b{--no-underscore}]
   [@@b{--pic}] [@@b{-N}]
   [@@b{--emulation=criself} | @@b{--emulation=crisaout}]
@@c Deprecated -- deliberately not documented.
@@c [@@b{-h}] [@@b{-H}]
@@end ifset
@@ifset D10V

@@emph{Target D10V options:}
   [@@b{-O}]
@@end ifset
@@ifset D30V

@@emph{Target D30V options:}
   [@@b{-O}|@@b{-n}|@@b{-N}]
@@end ifset
@@ifset H8
@@c Renesas family chips have no machine-dependent assembler options
@@end ifset
@@ifset HPPA
@@c HPPA has no machine-dependent assembler options (yet).
@@end ifset
@@ifset I80386

@@emph{Target i386 options:}
   [@@b{--32}|@@b{--64}] [@@b{-n}]
@@end ifset
@@ifset I960

@@emph{Target i960 options:}
@@c see md_parse_option in tc-i960.c
   [@@b{-ACA}|@@b{-ACA_A}|@@b{-ACB}|@@b{-ACC}|@@b{-AKA}|@@b{-AKB}|
    @@b{-AKC}|@@b{-AMC}]
   [@@b{-b}] [@@b{-no-relax}]
@@end ifset
@@ifset IA64

@@emph{Target IA-64 options:}
   [@@b{-mconstant-gp}|@@b{-mauto-pic}]
   [@@b{-milp32}|@@b{-milp64}|@@b{-mlp64}|@@b{-mp64}]
   [@@b{-mle}|@@b{mbe}]
   [@@b{-x}|@@b{-xexplicit}] [@@b{-xauto}] [@@b{-xdebug}]
@@end ifset
@@ifset IP2K

@@emph{Target IP2K options:}
   [@@b{-mip2022}|@@b{-mip2022ext}]
@@end ifset
@@ifset M32R

@@emph{Target M32R options:}
   [@@b{--m32rx}|@@b{--[no-]warn-explicit-parallel-conflicts}|
   @@b{--W[n]p}]
@@end ifset
@@ifset M680X0

@@emph{Target M680X0 options:}
   [@@b{-l}] [@@b{-m68000}|@@b{-m68010}|@@b{-m68020}|@@dots{}]
@@end ifset
@@ifset M68HC11

@@emph{Target M68HC11 options:}
   [@@b{-m68hc11}|@@b{-m68hc12}|@@b{-m68hcs12}]
   [@@b{-mshort}|@@b{-mlong}]
   [@@b{-mshort-double}|@@b{-mlong-double}]
   [@@b{--force-long-branchs}] [@@b{--short-branchs}]
   [@@b{--strict-direct-mode}] [@@b{--print-insn-syntax}]
   [@@b{--print-opcodes}] [@@b{--generate-example}]
@@end ifset
@@ifset MCORE

@@emph{Target MCORE options:}
   [@@b{-jsri2bsr}] [@@b{-sifilter}] [@@b{-relax}]
   [@@b{-mcpu=[210|340]}]
@@end ifset
@@ifset MIPS

@@emph{Target MIPS options:}
   [@@b{-nocpp}] [@@b{-EL}] [@@b{-EB}] [@@b{-O}[@@var{optimization level}]]
   [@@b{-g}[@@var{debug level}]] [@@b{-G} @@var{num}] [@@b{-KPIC}] [@@b{-call_shared}]
   [@@b{-non_shared}] [@@b{-xgot}] [@@b{--membedded-pic}]
   [@@b{-mabi}=@@var{ABI}] [@@b{-32}] [@@b{-n32}] [@@b{-64}] [@@b{-mfp32}] [@@b{-mgp32}]
   [@@b{-march}=@@var{CPU}] [@@b{-mtune}=@@var{CPU}] [@@b{-mips1}] [@@b{-mips2}]
   [@@b{-mips3}] [@@b{-mips4}] [@@b{-mips5}] [@@b{-mips32}] [@@b{-mips32r2}]
   [@@b{-mips64}] [@@b{-mips64r2}]
   [@@b{-construct-floats}] [@@b{-no-construct-floats}]
   [@@b{-trap}] [@@b{-no-break}] [@@b{-break}] [@@b{-no-trap}]
   [@@b{-mfix7000}] [@@b{-mno-fix7000}]
   [@@b{-mips16}] [@@b{-no-mips16}]
   [@@b{-mips3d}] [@@b{-no-mips3d}]
   [@@b{-mdmx}] [@@b{-no-mdmx}]
   [@@b{-mdebug}] [@@b{-no-mdebug}]
   [@@b{-mpdr}] [@@b{-mno-pdr}]
@@end ifset
@@ifset MMIX

@@emph{Target MMIX options:}
   [@@b{--fixed-special-register-names}] [@@b{--globalize-symbols}]
   [@@b{--gnu-syntax}] [@@b{--relax}] [@@b{--no-predefined-symbols}]
   [@@b{--no-expand}] [@@b{--no-merge-gregs}] [@@b{-x}]
   [@@b{--linker-allocated-gregs}]
@@end ifset
@@ifset PDP11

@@emph{Target PDP11 options:}
   [@@b{-mpic}|@@b{-mno-pic}] [@@b{-mall}] [@@b{-mno-extensions}]
   [@@b{-m}@@var{extension}|@@b{-mno-}@@var{extension}]
   [@@b{-m}@@var{cpu}] [@@b{-m}@@var{machine}]  
@@end ifset
@@ifset PJ

@@emph{Target picoJava options:}
   [@@b{-mb}|@@b{-me}]
@@end ifset
@@ifset PPC

@@emph{Target PowerPC options:}
   [@@b{-mpwrx}|@@b{-mpwr2}|@@b{-mpwr}|@@b{-m601}|@@b{-mppc}|@@b{-mppc32}|@@b{-m603}|@@b{-m604}|
    @@b{-m403}|@@b{-m405}|@@b{-mppc64}|@@b{-m620}|@@b{-mppc64bridge}|@@b{-mbooke}|
    @@b{-mbooke32}|@@b{-mbooke64}]
   [@@b{-mcom}|@@b{-many}|@@b{-maltivec}] [@@b{-memb}]
   [@@b{-mregnames}|@@b{-mno-regnames}]
   [@@b{-mrelocatable}|@@b{-mrelocatable-lib}]
   [@@b{-mlittle}|@@b{-mlittle-endian}|@@b{-mbig}|@@b{-mbig-endian}]
   [@@b{-msolaris}|@@b{-mno-solaris}]
@@end ifset
@@ifset SPARC

@@emph{Target SPARC options:}
@@c The order here is important.  See c-sparc.texi.
   [@@b{-Av6}|@@b{-Av7}|@@b{-Av8}|@@b{-Asparclet}|@@b{-Asparclite}
    @@b{-Av8plus}|@@b{-Av8plusa}|@@b{-Av9}|@@b{-Av9a}]
   [@@b{-xarch=v8plus}|@@b{-xarch=v8plusa}] [@@b{-bump}]
   [@@b{-32}|@@b{-64}]
@@end ifset
@@ifset TIC54X

@@emph{Target TIC54X options:}
 [@@b{-mcpu=54[123589]}|@@b{-mcpu=54[56]lp}] [@@b{-mfar-mode}|@@b{-mf}] 
 [@@b{-merrors-to-file} @@var{<filename>}|@@b{-me} @@var{<filename>}]
@@end ifset
@@ifset Z8000
@@c Z8000 has no machine-dependent assembler options
@@end ifset
@@ifset XTENSA

@@emph{Target Xtensa options:}
 [@@b{--[no-]density}] [@@b{--[no-]relax}] [@@b{--[no-]generics}]
 [@@b{--[no-]text-section-literals}]
 [@@b{--[no-]target-align}] [@@b{--[no-]longcalls}]
@@end ifset
@@c man end
@@end smallexample

@@c man begin OPTIONS

@@table @@gcctabopt
@@item -a[cdhlmns]
Turn on listings, in any of a variety of ways:

@@table @@gcctabopt
@@item -ac
omit false conditionals

@@item -ad
omit debugging directives

@@item -ah
include high-level source

@@item -al
include assembly

@@item -am
include macro expansions

@@item -an
omit forms processing

@@item -as
include symbols

@@item =file
set the name of the listing file
@@end table

You may combine these options; for example, use @@samp{-aln} for assembly
listing without forms processing.  The @@samp{=file} option, if used, must be
the last one.  By itself, @@samp{-a} defaults to @@samp{-ahls}.

@@item -D
Ignored.  This option is accepted for script compatibility with calls to
other assemblers.

@@item --defsym @@var{sym}=@@var{value}
Define the symbol @@var{sym} to be @@var{value} before assembling the input file.
@@var{value} must be an integer constant.  As in C, a leading @@samp{0x}
indicates a hexadecimal value, and a leading @@samp{0} indicates an octal value.

@@item -f
``fast''---skip whitespace and comment preprocessing (assume source is
compiler output).

@@item --gstabs
Generate stabs debugging information for each assembler line.  This
may help debugging assembler code, if the debugger can handle it.

@@item --gstabs+
Generate stabs debugging information for each assembler line, with GNU
extensions that probably only gdb can handle, and that could make other
debuggers crash or refuse to read your program.  This
may help debugging assembler code.  Currently the only GNU extension is
the location of the current working directory at assembling time.

@@item --gdwarf2
Generate DWARF2 debugging information for each assembler line.  This
may help debugging assembler code, if the debugger can handle it.  Note---this
option is only supported by some targets, not all of them.

@@item --help
Print a summary of the command line options and exit.

@@item --target-help
Print a summary of all target specific options and exit.

@@item -I @@var{dir}
Add directory @@var{dir} to the search list for @@code{.include} directives.

@@item -J
Don't warn about signed overflow.

@@item -K
@@ifclear DIFF-TBL-KLUGE
This option is accepted but has no effect on the @@value{TARGET} family.
@@end ifclear
@@ifset DIFF-TBL-KLUGE
Issue warnings when difference tables altered for long displacements.
@@end ifset

@@item -L
@@itemx --keep-locals
Keep (in the symbol table) local symbols.  On traditional a.out systems
these start with @@samp{L}, but different systems have different local
label prefixes.

@@item --listing-lhs-width=@@var{number}
Set the maximum width, in words, of the output data column for an assembler
listing to @@var{number}.

@@item --listing-lhs-width2=@@var{number}
Set the maximum width, in words, of the output data column for continuation
lines in an assembler listing to @@var{number}.

@@item --listing-rhs-width=@@var{number}
Set the maximum width of an input source line, as displayed in a listing, to
@@var{number} bytes.

@@item --listing-cont-lines=@@var{number}
Set the maximum number of lines printed in a listing for a single line of input
to @@var{number} + 1.

@@item -o @@var{objfile}
Name the object-file output from @@command{@@value{AS}} @@var{objfile}.

@@item -R
Fold the data section into the text section.

@@item --statistics
Print the maximum space (in bytes) and total time (in seconds) used by
assembly.

@@item --strip-local-absolute
Remove local absolute symbols from the outgoing symbol table.

@@item -v
@@itemx -version
Print the @@command{as} version.

@@item --version
Print the @@command{as} version and exit.

@@item -W
@@itemx --no-warn
Suppress warning messages.

@@item --fatal-warnings
Treat warnings as errors.

@@item --warn
Don't suppress warning messages or treat them as errors.

@@item -w
Ignored.

@@item -x
Ignored.

@@item -Z
Generate an object file even after errors.

@@item -- | @@var{files} @@dots{}
Standard input, or source files to assemble.

@@end table

@@ifset ARC
The following options are available when @@value{AS} is configured for
an ARC processor.

@@table @@gcctabopt
@@item -marc[5|6|7|8]
This option selects the core processor variant.
@@item -EB | -EL
Select either big-endian (-EB) or little-endian (-EL) output.
@@end table
@@end ifset

@@ifset ARM
The following options are available when @@value{AS} is configured for the ARM
processor family.

@@table @@gcctabopt
@@item -mcpu=@@var{processor}[+@@var{extension}@@dots{}]
Specify which ARM processor variant is the target.
@@item -march=@@var{architecture}[+@@var{extension}@@dots{}]
Specify which ARM architecture variant is used by the target.
@@item -mfpu=@@var{floating-point-format}
Select which Floating Point architecture is the target.
@@item -mfloat-abi=@@var{abi}
Select which floating point ABI is in use.
@@item -mthumb
Enable Thumb only instruction decoding.
@@item -mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant | -moabi
Select which procedure calling convention is in use.
@@item -EB | -EL
Select either big-endian (-EB) or little-endian (-EL) output.
@@item -mthumb-interwork
Specify that the code has been generated with interworking between Thumb and
ARM code in mind.
@@item -k
Specify that PIC code has been generated.
@@end table
@@end ifset

@@ifset CRIS
See the info pages for documentation of the CRIS-specific options.
@@end ifset

@@ifset D10V
The following options are available when @@value{AS} is configured for
a D10V processor.
@@table @@gcctabopt
@@cindex D10V optimization
@@cindex optimization, D10V
@@item -O
Optimize output by parallelizing instructions.
@@end table
@@end ifset

@@ifset D30V
The following options are available when @@value{AS} is configured for a D30V
processor.
@@table @@gcctabopt
@@cindex D30V optimization
@@cindex optimization, D30V
@@item -O
Optimize output by parallelizing instructions.

@@cindex D30V nops
@@item -n
Warn when nops are generated.

@@cindex D30V nops after 32-bit multiply
@@item -N
Warn when a nop after a 32-bit multiply instruction is generated.
@@end table
@@end ifset

@@ifset I960
The following options are available when @@value{AS} is configured for the
Intel 80960 processor.

@@table @@gcctabopt
@@item -ACA | -ACA_A | -ACB | -ACC | -AKA | -AKB | -AKC | -AMC
Specify which variant of the 960 architecture is the target.

@@item -b
Add code to collect statistics about branches taken.

@@item -no-relax
Do not alter compare-and-branch instructions for long displacements;
error if necessary.

@@end table
@@end ifset

@@ifset IP2K
The following options are available when @@value{AS} is configured for the
Ubicom IP2K series.

@@table @@gcctabopt

@@item -mip2022ext
Specifies that the extended IP2022 instructions are allowed.

@@item -mip2022
Restores the default behaviour, which restricts the permitted instructions to
just the basic IP2022 ones.

@@end table
@@end ifset

@@ifset M32R
The following options are available when @@value{AS} is configured for the
Renesas M32R (formerly Mitsubishi M32R) series.

@@table @@gcctabopt

@@item --m32rx
Specify which processor in the M32R family is the target.  The default
is normally the M32R, but this option changes it to the M32RX.

@@item --warn-explicit-parallel-conflicts or --Wp
Produce warning messages when questionable parallel constructs are
encountered. 

@@item --no-warn-explicit-parallel-conflicts or --Wnp
Do not produce warning messages when questionable parallel constructs are 
encountered. 

@@end table
@@end ifset

@@ifset M680X0
The following options are available when @@value{AS} is configured for the
Motorola 68000 series.

@@table @@gcctabopt

@@item -l
Shorten references to undefined symbols, to one word instead of two.

@@item -m68000 | -m68008 | -m68010 | -m68020 | -m68030
@@itemx | -m68040 | -m68060 | -m68302 | -m68331 | -m68332
@@itemx | -m68333 | -m68340 | -mcpu32 | -m5200
Specify what processor in the 68000 family is the target.  The default
is normally the 68020, but this can be changed at configuration time.

@@item -m68881 | -m68882 | -mno-68881 | -mno-68882
The target machine does (or does not) have a floating-point coprocessor.
The default is to assume a coprocessor for 68020, 68030, and cpu32.  Although
the basic 68000 is not compatible with the 68881, a combination of the
two can be specified, since it's possible to do emulation of the
coprocessor instructions with the main processor.

@@item -m68851 | -mno-68851
The target machine does (or does not) have a memory-management
unit coprocessor.  The default is to assume an MMU for 68020 and up.

@@end table
@@end ifset

@@ifset PDP11

For details about the PDP-11 machine dependent features options,
see @@ref{PDP-11-Options}.

@@table @@gcctabopt
@@item -mpic | -mno-pic
Generate position-independent (or position-dependent) code.  The
default is @@option{-mpic}.

@@item -mall
@@itemx -mall-extensions
Enable all instruction set extensions.  This is the default.

@@item -mno-extensions
Disable all instruction set extensions.

@@item -m@@var{extension} | -mno-@@var{extension}
Enable (or disable) a particular instruction set extension.

@@item -m@@var{cpu}
Enable the instruction set extensions supported by a particular CPU, and
disable all other extensions.

@@item -m@@var{machine}
Enable the instruction set extensions supported by a particular machine
model, and disable all other extensions.
@@end table

@@end ifset

@@ifset PJ
The following options are available when @@value{AS} is configured for
a picoJava processor.

@@table @@gcctabopt

@@cindex PJ endianness
@@cindex endianness, PJ
@@cindex big endian output, PJ
@@item -mb
Generate ``big endian'' format output.

@@cindex little endian output, PJ
@@item -ml
Generate ``little endian'' format output.

@@end table
@@end ifset

@@ifset M68HC11
The following options are available when @@value{AS} is configured for the
Motorola 68HC11 or 68HC12 series.

@@table @@gcctabopt

@@item -m68hc11 | -m68hc12 | -m68hcs12
Specify what processor is the target.  The default is
defined by the configuration option when building the assembler.

@@item -mshort
Specify to use the 16-bit integer ABI.

@@item -mlong
Specify to use the 32-bit integer ABI.  

@@item -mshort-double
Specify to use the 32-bit double ABI.  

@@item -mlong-double
Specify to use the 64-bit double ABI.  

@@item --force-long-branchs
Relative branches are turned into absolute ones. This concerns
conditional branches, unconditional branches and branches to a
sub routine.

@@item -S | --short-branchs
Do not turn relative branchs into absolute ones
when the offset is out of range.

@@item --strict-direct-mode
Do not turn the direct addressing mode into extended addressing mode
when the instruction does not support direct addressing mode.

@@item --print-insn-syntax
Print the syntax of instruction in case of error.

@@item --print-opcodes
print the list of instructions with syntax and then exit.

@@item --generate-example
print an example of instruction for each possible instruction and then exit.
This option is only useful for testing @@command{@@value{AS}}.

@@end table
@@end ifset

@@ifset SPARC
The following options are available when @@command{@@value{AS}} is configured
for the SPARC architecture:

@@table @@gcctabopt
@@item -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite
@@itemx -Av8plus | -Av8plusa | -Av9 | -Av9a
Explicitly select a variant of the SPARC architecture.

@@samp{-Av8plus} and @@samp{-Av8plusa} select a 32 bit environment.
@@samp{-Av9} and @@samp{-Av9a} select a 64 bit environment.

@@samp{-Av8plusa} and @@samp{-Av9a} enable the SPARC V9 instruction set with
UltraSPARC extensions.

@@item -xarch=v8plus | -xarch=v8plusa
For compatibility with the Solaris v9 assembler.  These options are
equivalent to -Av8plus and -Av8plusa, respectively.

@@item -bump
Warn when the assembler switches to another architecture.
@@end table
@@end ifset

@@ifset TIC54X
The following options are available when @@value{AS} is configured for the 'c54x
architecture. 

@@table @@gcctabopt
@@item -mfar-mode
Enable extended addressing mode.  All addresses and relocations will assume
extended addressing (usually 23 bits).
@@item -mcpu=@@var{CPU_VERSION}
Sets the CPU version being compiled for.
@@item -merrors-to-file @@var{FILENAME}
Redirect error output to a file, for broken systems which don't support such
behaviour in the shell.
@@end table
@@end ifset

@@ifset MIPS
The following options are available when @@value{AS} is configured for
a @@sc{mips} processor.

@@table @@gcctabopt
@@item -G @@var{num}
This option sets the largest size of an object that can be referenced
implicitly with the @@code{gp} register.  It is only accepted for targets that
use ECOFF format, such as a DECstation running Ultrix.  The default value is 8.

@@cindex MIPS endianness
@@cindex endianness, MIPS
@@cindex big endian output, MIPS
@@item -EB
Generate ``big endian'' format output.

@@cindex little endian output, MIPS
@@item -EL
Generate ``little endian'' format output.

@@cindex MIPS ISA
@@item -mips1
@@itemx -mips2
@@itemx -mips3
@@itemx -mips4
@@itemx -mips5
@@itemx -mips32
@@itemx -mips32r2
@@itemx -mips64
@@itemx -mips64r2
Generate code for a particular @@sc{mips} Instruction Set Architecture level.
@@samp{-mips1} is an alias for @@samp{-march=r3000}, @@samp{-mips2} is an
alias for @@samp{-march=r6000}, @@samp{-mips3} is an alias for
@@samp{-march=r4000} and @@samp{-mips4} is an alias for @@samp{-march=r8000}.
@@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2}, @@samp{-mips64}, and
@@samp{-mips64r2}
correspond to generic
@@samp{MIPS V}, @@samp{MIPS32}, @@samp{MIPS32 Release 2}, @@samp{MIPS64},
and @@samp{MIPS64 Release 2}
ISA processors, respectively.

@@item -march=@@var{CPU}
Generate code for a particular @@sc{mips} cpu.

@@item -mtune=@@var{cpu}
Schedule and tune for a particular @@sc{mips} cpu.

@@item -mfix7000
@@itemx -mno-fix7000
Cause nops to be inserted if the read of the destination register
of an mfhi or mflo instruction occurs in the following two instructions.

@@item -mdebug
@@itemx -no-mdebug
Cause stabs-style debugging output to go into an ECOFF-style .mdebug
section instead of the standard ELF .stabs sections.

@@item -mpdr
@@itemx -mno-pdr
Control generation of @@code{.pdr} sections.

@@item -mgp32
@@itemx -mfp32
The register sizes are normally inferred from the ISA and ABI, but these
flags force a certain group of registers to be treated as 32 bits wide at
all times.  @@samp{-mgp32} controls the size of general-purpose registers
and @@samp{-mfp32} controls the size of floating-point registers.

@@item -mips16
@@itemx -no-mips16
Generate code for the MIPS 16 processor.  This is equivalent to putting
@@code{.set mips16} at the start of the assembly file.  @@samp{-no-mips16}
turns off this option.

@@item -mips3d
@@itemx -no-mips3d
Generate code for the MIPS-3D Application Specific Extension.
This tells the assembler to accept MIPS-3D instructions.
@@samp{-no-mips3d} turns off this option.

@@item -mdmx
@@itemx -no-mdmx
Generate code for the MDMX Application Specific Extension.
This tells the assembler to accept MDMX instructions.
@@samp{-no-mdmx} turns off this option.

@@item --construct-floats
@@itemx --no-construct-floats
The @@samp{--no-construct-floats} option disables the construction of
double width floating point constants by loading the two halves of the
value into the two single width floating point registers that make up
the double width register.  By default @@samp{--construct-floats} is
selected, allowing construction of these floating point constants.

@@cindex emulation
@@item --emulation=@@var{name}
This option causes @@command{@@value{AS}} to emulate @@command{@@value{AS}} configured
for some other target, in all respects, including output format (choosing
between ELF and ECOFF only), handling of pseudo-opcodes which may generate
debugging information or store symbol table information, and default
endianness.  The available configuration names are: @@samp{mipsecoff},
@@samp{mipself}, @@samp{mipslecoff}, @@samp{mipsbecoff}, @@samp{mipslelf},
@@samp{mipsbelf}.  The first two do not alter the default endianness from that
of the primary target for which the assembler was configured; the others change
the default to little- or big-endian as indicated by the @@samp{b} or @@samp{l}
in the name.  Using @@samp{-EB} or @@samp{-EL} will override the endianness
selection in any case.

This option is currently supported only when the primary target
@@command{@@value{AS}} is configured for is a @@sc{mips} ELF or ECOFF target.
Furthermore, the primary target or others specified with
@@samp{--enable-targets=@@dots{}} at configuration time must include support for
the other format, if both are to be available.  For example, the Irix 5
configuration includes support for both.

Eventually, this option will support more configurations, with more
fine-grained control over the assembler's behavior, and will be supported for
more processors.

@@item -nocpp
@@command{@@value{AS}} ignores this option.  It is accepted for compatibility with
the native tools.

@@item --trap
@@itemx --no-trap
@@itemx --break
@@itemx --no-break
Control how to deal with multiplication overflow and division by zero.
@@samp{--trap} or @@samp{--no-break} (which are synonyms) take a trap exception
(and only work for Instruction Set Architecture level 2 and higher);
@@samp{--break} or @@samp{--no-trap} (also synonyms, and the default) take a
break exception.

@@item -n
When this option is used, @@command{@@value{AS}} will issue a warning every
time it generates a nop instruction from a macro.
@@end table
@@end ifset

@@ifset MCORE
The following options are available when @@value{AS} is configured for
an MCore processor.

@@table @@gcctabopt
@@item -jsri2bsr
@@itemx -nojsri2bsr
Enable or disable the JSRI to BSR transformation.  By default this is enabled.
The command line option @@samp{-nojsri2bsr} can be used to disable it.

@@item -sifilter
@@itemx -nosifilter
Enable or disable the silicon filter behaviour.  By default this is disabled.
The default can be overridden by the @@samp{-sifilter} command line option.

@@item -relax
Alter jump instructions for long displacements.

@@item -mcpu=[210|340]
Select the cpu type on the target hardware.  This controls which instructions
can be assembled.

@@item -EB
Assemble for a big endian target.

@@item -EL
Assemble for a little endian target.

@@end table
@@end ifset

@@ifset MMIX
See the info pages for documentation of the MMIX-specific options.
@@end ifset

@@ifset XTENSA
The following options are available when @@value{AS} is configured for
an Xtensa processor.

@@table @@gcctabopt
@@item --density | --no-density
Enable or disable use of instructions from the Xtensa code density
option.  This is enabled by default when the Xtensa processor supports
the code density option.

@@item --relax | --no-relax
Enable or disable instruction relaxation.  This is enabled by default.
Note: In the current implementation, these options also control whether
assembler optimizations are performed, making these options equivalent
to @@option{--generics} and @@option{--no-generics}.

@@item --generics | --no-generics
Enable or disable all assembler transformations of Xtensa instructions.
The default is @@option{--generics};
@@option{--no-generics} should be used only in the rare cases when the
instructions must be exactly as specified in the assembly source.

@@item --text-section-literals | --no-text-section-literals
With @@option{--text-@@-section-@@-literals}, literal pools are interspersed
in the text section.  The default is
@@option{--no-@@-text-@@-section-@@-literals}, which places literals in a
separate section in the output file.

@@item --target-align | --no-target-align
Enable or disable automatic alignment to reduce branch penalties at the
expense of some code density.  The default is @@option{--target-@@-align}.

@@item --longcalls | --no-longcalls
Enable or disable transformation of call instructions to allow calls
across a greater range of addresses.  The default is
@@option{--no-@@-longcalls}.
@@end table
@@end ifset

@@c man end

@@menu
* Manual::                      Structure of this Manual
* GNU Assembler::               The GNU Assembler
* Object Formats::              Object File Formats
* Command Line::                Command Line
* Input Files::                 Input Files
* Object::                      Output (Object) File
* Errors::                      Error and Warning Messages
@@end menu

@@node Manual
@@section Structure of this Manual

@@cindex manual, structure and purpose
This manual is intended to describe what you need to know to use
@@sc{gnu} @@command{@@value{AS}}.  We cover the syntax expected in source files, including
notation for symbols, constants, and expressions; the directives that
@@command{@@value{AS}} understands; and of course how to invoke @@command{@@value{AS}}.

@@ifclear GENERIC
We also cover special features in the @@value{TARGET}
configuration of @@command{@@value{AS}}, including assembler directives.
@@end ifclear
@@ifset GENERIC
This manual also describes some of the machine-dependent features of
various flavors of the assembler.
@@end ifset

@@cindex machine instructions (not covered)
On the other hand, this manual is @@emph{not} intended as an introduction
to programming in assembly language---let alone programming in general!
In a similar vein, we make no attempt to introduce the machine
architecture; we do @@emph{not} describe the instruction set, standard
mnemonics, registers or addressing modes that are standard to a
particular architecture.
@@ifset GENERIC
You may want to consult the manufacturer's
machine architecture manual for this information.
@@end ifset
@@ifclear GENERIC
@@ifset H8/300
For information on the H8/300 machine instruction set, see @@cite{H8/300
Series Programming Manual}.  For the H8/300H, see @@cite{H8/300H Series
Programming Manual} (Renesas).
@@end ifset
@@ifset H8/500
For information on the H8/500 machine instruction set, see @@cite{H8/500
Series Programming Manual} (Renesas M21T001).
@@end ifset
@@ifset SH
For information on the Renesas (formerly Hitachi) / SuperH SH machine instruction set,
see @@cite{SH-Microcomputer User's Manual} (Renesas) or
@@cite{SH-4 32-bit CPU Core Architecture} (SuperH) and
@@cite{SuperH (SH) 64-Bit RISC Series} (SuperH).
@@end ifset
@@ifset Z8000
For information on the Z8000 machine instruction set, see @@cite{Z8000 CPU Technical Manual}
@@end ifset
@@end ifclear

@@c I think this is premature---doc@@cygnus.com, 17jan1991
@@ignore
Throughout this manual, we assume that you are running @@dfn{GNU},
the portable operating system from the @@dfn{Free Software
Foundation, Inc.}.  This restricts our attention to certain kinds of
computer (in particular, the kinds of computers that @@sc{gnu} can run on);
once this assumption is granted examples and definitions need less
qualification.

@@command{@@value{AS}} is part of a team of programs that turn a high-level
human-readable series of instructions into a low-level
computer-readable series of instructions.  Different versions of
@@command{@@value{AS}} are used for different kinds of computer.
@@end ignore

@@c There used to be a section "Terminology" here, which defined
@@c "contents", "byte", "word", and "long".  Defining "word" to any
@@c particular size is confusing when the .word directive may generate 16
@@c bits on one machine and 32 bits on another; in general, for the user
@@c version of this manual, none of these terms seem essential to define.
@@c They were used very little even in the former draft of the manual;
@@c this draft makes an effort to avoid them (except in names of
@@c directives).

@@node GNU Assembler
@@section The GNU Assembler

@@c man begin DESCRIPTION

@@sc{gnu} @@command{as} is really a family of assemblers.
@@ifclear GENERIC
This manual describes @@command{@@value{AS}}, a member of that family which is
configured for the @@value{TARGET} architectures.
@@end ifclear
If you use (or have used) the @@sc{gnu} assembler on one architecture, you
should find a fairly similar environment when you use it on another
architecture.  Each version has much in common with the others,
including object file formats, most assembler directives (often called
@@dfn{pseudo-ops}) and assembler syntax.@@refill

@@cindex purpose of @@sc{gnu} assembler
@@command{@@value{AS}} is primarily intended to assemble the output of the
@@sc{gnu} C compiler @@code{@@value{GCC}} for use by the linker
@@code{@@value{LD}}.  Nevertheless, we've tried to make @@command{@@value{AS}}
assemble correctly everything that other assemblers for the same
machine would assemble.
@@ifset VAX
Any exceptions are documented explicitly (@@pxref{Machine Dependencies}).
@@end ifset
@@ifset M680X0
@@c This remark should appear in generic version of manual; assumption
@@c here is that generic version sets M680x0.
This doesn't mean @@command{@@value{AS}} always uses the same syntax as another
assembler for the same architecture; for example, we know of several
incompatible versions of 680x0 assembly language syntax.
@@end ifset

@@c man end

Unlike older assemblers, @@command{@@value{AS}} is designed to assemble a source
program in one pass of the source file.  This has a subtle impact on the
@@kbd{.org} directive (@@pxref{Org,,@@code{.org}}).

@@node Object Formats
@@section Object File Formats

@@cindex object file format
The @@sc{gnu} assembler can be configured to produce several alternative
object file formats.  For the most part, this does not affect how you
write assembly language programs; but directives for debugging symbols
are typically different in different file formats.  @@xref{Symbol
Attributes,,Symbol Attributes}.
@@ifclear GENERIC
@@ifclear MULTI-OBJ
For the @@value{TARGET} target, @@command{@@value{AS}} is configured to produce
@@value{OBJ-NAME} format object files.
@@end ifclear
@@c The following should exhaust all configs that set MULTI-OBJ, ideally
@@ifset A29K
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
@@code{a.out} or COFF format object files.
@@end ifset
@@ifset I960
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
@@code{b.out} or COFF format object files.
@@end ifset
@@ifset HPPA
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
SOM or ELF format object files.
@@end ifset
@@end ifclear

@@node Command Line
@@section Command Line

@@cindex command line conventions

After the program name @@command{@@value{AS}}, the command line may contain
options and file names.  Options may appear in any order, and may be
before, after, or between file names.  The order of file names is
significant.

@@cindex standard input, as input file
@@kindex --
@@file{--} (two hyphens) by itself names the standard input file
explicitly, as one of the files for @@command{@@value{AS}} to assemble.

@@cindex options, command line
Except for @@samp{--} any command line argument that begins with a
hyphen (@@samp{-}) is an option.  Each option changes the behavior of
@@command{@@value{AS}}.  No option changes the way another option works.  An
option is a @@samp{-} followed by one or more letters; the case of
the letter is important.   All options are optional.

Some options expect exactly one file name to follow them.  The file
name may either immediately follow the option's letter (compatible
with older assemblers) or it may be the next command argument (@@sc{gnu}
standard).  These two command lines are equivalent:

@@smallexample
@@value{AS} -o my-object-file.o mumble.s
@@value{AS} -omy-object-file.o mumble.s
@@end smallexample

@@node Input Files
@@section Input Files

@@cindex input
@@cindex source program
@@cindex files, input
We use the phrase @@dfn{source program}, abbreviated @@dfn{source}, to
describe the program input to one run of @@command{@@value{AS}}.  The program may
be in one or more files; how the source is partitioned into files
doesn't change the meaning of the source.

@@c I added "con" prefix to "catenation" just to prove I can overcome my
@@c APL training...   doc@@cygnus.com
The source program is a concatenation of the text in all the files, in the
order specified.

@@c man begin DESCRIPTION
Each time you run @@command{@@value{AS}} it assembles exactly one source
program.  The source program is made up of one or more files.
(The standard input is also a file.)

You give @@command{@@value{AS}} a command line that has zero or more input file
names.  The input files are read (from left file name to right).  A
command line argument (in any position) that has no special meaning
is taken to be an input file name.

If you give @@command{@@value{AS}} no file names it attempts to read one input file
from the @@command{@@value{AS}} standard input, which is normally your terminal.  You
may have to type @@key{ctl-D} to tell @@command{@@value{AS}} there is no more program
to assemble.

Use @@samp{--} if you need to explicitly name the standard input file
in your command line.

If the source is empty, @@command{@@value{AS}} produces a small, empty object
file.

@@c man end

@@subheading Filenames and Line-numbers

@@cindex input file linenumbers
@@cindex line numbers, in input files
There are two ways of locating a line in the input file (or files) and
either may be used in reporting error messages.  One way refers to a line
number in a physical file; the other refers to a line number in a
``logical'' file.  @@xref{Errors, ,Error and Warning Messages}.

@@dfn{Physical files} are those files named in the command line given
to @@command{@@value{AS}}.

@@dfn{Logical files} are simply names declared explicitly by assembler
directives; they bear no relation to physical files.  Logical file names help
error messages reflect the original source file, when @@command{@@value{AS}} source
is itself synthesized from other files.  @@command{@@value{AS}} understands the
@@samp{#} directives emitted by the @@code{@@value{GCC}} preprocessor.  See also
@@ref{File,,@@code{.file}}.

@@node Object
@@section Output (Object) File

@@cindex object file
@@cindex output file
@@kindex a.out
@@kindex .o
Every time you run @@command{@@value{AS}} it produces an output file, which is
your assembly language program translated into numbers.  This file
is the object file.  Its default name is
@@ifclear BOUT
@@code{a.out}.
@@end ifclear
@@ifset BOUT
@@ifset GENERIC
@@code{a.out}, or 
@@end ifset
@@code{b.out} when @@command{@@value{AS}} is configured for the Intel 80960.
@@end ifset
You can give it another name by using the @@option{-o} option.  Conventionally,
object file names end with @@file{.o}.  The default name is used for historical
reasons: older assemblers were capable of assembling self-contained programs
directly into a runnable program.  (For some formats, this isn't currently
possible, but it can be done for the @@code{a.out} format.)

@@cindex linker
@@kindex ld
The object file is meant for input to the linker @@code{@@value{LD}}.  It contains
assembled program code, information to help @@code{@@value{LD}} integrate
the assembled program into a runnable file, and (optionally) symbolic
information for the debugger.

@@c link above to some info file(s) like the description of a.out.
@@c don't forget to describe @@sc{gnu} info as well as Unix lossage.

@@node Errors
@@section Error and Warning Messages

@@c man begin DESCRIPTION

@@cindex error messages
@@cindex warning messages
@@cindex messages from assembler
@@command{@@value{AS}} may write warnings and error messages to the standard error
file (usually your terminal).  This should not happen when  a compiler
runs @@command{@@value{AS}} automatically.  Warnings report an assumption made so
that @@command{@@value{AS}} could keep assembling a flawed program; errors report a
grave problem that stops the assembly.

@@c man end

@@cindex format of warning messages
Warning messages have the format

@@smallexample
file_name:@@b{NNN}:Warning Message Text
@@end smallexample

@@noindent
@@cindex line numbers, in warnings/errors
(where @@b{NNN} is a line number).  If a logical file name has been given
(@@pxref{File,,@@code{.file}}) it is used for the filename, otherwise the name of
the current input file is used.  If a logical line number was given
@@ifset GENERIC
(@@pxref{Line,,@@code{.line}})
@@end ifset
@@ifclear GENERIC
@@ifclear A29K
(@@pxref{Line,,@@code{.line}})
@@end ifclear
@@ifset A29K
(@@pxref{Ln,,@@code{.ln}})
@@end ifset
@@end ifclear
then it is used to calculate the number printed,
otherwise the actual line in the current source file is printed.  The
message text is intended to be self explanatory (in the grand Unix
tradition).

@@cindex format of error messages
Error messages have the format
@@smallexample
file_name:@@b{NNN}:FATAL:Error Message Text
@@end smallexample
The file name and line number are derived as for warning
messages.  The actual message text may be rather less explanatory
because many of them aren't supposed to happen.

@@node Invoking
@@chapter Command-Line Options

@@cindex options, all versions of assembler
This chapter describes command-line options available in @@emph{all}
versions of the @@sc{gnu} assembler; @@pxref{Machine Dependencies}, for options specific
@@ifclear GENERIC
to the @@value{TARGET} target.
@@end ifclear
@@ifset GENERIC
to particular machine architectures.
@@end ifset

@@c man begin DESCRIPTION

If you are invoking @@command{@@value{AS}} via the @@sc{gnu} C compiler,
you can use the @@samp{-Wa} option to pass arguments through to the assembler.
The assembler arguments must be separated from each other (and the @@samp{-Wa})
by commas.  For example:

@@smallexample
gcc -c -g -O -Wa,-alh,-L file.c
@@end smallexample

@@noindent
This passes two options to the assembler: @@samp{-alh} (emit a listing to
standard output with high-level and assembly source) and @@samp{-L} (retain
local symbols in the symbol table).

Usually you do not need to use this @@samp{-Wa} mechanism, since many compiler
command-line options are automatically passed to the assembler by the compiler.
(You can call the @@sc{gnu} compiler driver with the @@samp{-v} option to see
precisely what options it passes to each compilation pass, including the
assembler.)

@@c man end

@@menu
* a::             -a[cdhlns] enable listings
* D::             -D for compatibility
* f::             -f to work faster
* I::             -I for .include search path
@@ifclear DIFF-TBL-KLUGE
* K::             -K for compatibility
@@end ifclear
@@ifset DIFF-TBL-KLUGE
* K::             -K for difference tables
@@end ifset

* L::             -L to retain local labels
* listing::       --listing-XXX to configure listing output
* M::		  -M or --mri to assemble in MRI compatibility mode
* MD::            --MD for dependency tracking
* o::             -o to name the object file
* R::             -R to join data and text sections
* statistics::    --statistics to see statistics about assembly
* traditional-format:: --traditional-format for compatible output
* v::             -v to announce version
* W::             -W, --no-warn, --warn, --fatal-warnings to control warnings
* Z::             -Z to make object file even after errors
@@end menu

@@node a
@@section Enable Listings: @@option{-a[cdhlns]}

@@kindex -a
@@kindex -ac
@@kindex -ad
@@kindex -ah
@@kindex -al
@@kindex -an
@@kindex -as
@@cindex listings, enabling
@@cindex assembly listings, enabling

These options enable listing output from the assembler.  By itself,
@@samp{-a} requests high-level, assembly, and symbols listing.
You can use other letters to select specific options for the list:
@@samp{-ah} requests a high-level language listing,
@@samp{-al} requests an output-program assembly listing, and
@@samp{-as} requests a symbol table listing.
High-level listings require that a compiler debugging option like
@@samp{-g} be used, and that assembly listings (@@samp{-al}) be requested
also.

Use the @@samp{-ac} option to omit false conditionals from a listing.  Any lines
which are not assembled because of a false @@code{.if} (or @@code{.ifdef}, or any
other conditional), or a true @@code{.if} followed by an @@code{.else}, will be
omitted from the listing.

Use the @@samp{-ad} option to omit debugging directives from the
listing.

Once you have specified one of these options, you can further control
listing output and its appearance using the directives @@code{.list},
@@code{.nolist}, @@code{.psize}, @@code{.eject}, @@code{.title}, and
@@code{.sbttl}.
The @@samp{-an} option turns off all forms processing.
If you do not request listing output with one of the @@samp{-a} options, the
listing-control directives have no effect.

The letters after @@samp{-a} may be combined into one option,
@@emph{e.g.}, @@samp{-aln}.

Note if the assembler source is coming from the standard input (eg because it
is being created by @@code{@@value{GCC}} and the @@samp{-pipe} command line switch
is being used) then the listing will not contain any comments or preprocessor
directives.  This is because the listing code buffers input source lines from
stdin only after they have been preprocessed by the assembler.  This reduces
memory usage and makes the code more efficient.

@@node D
@@section @@option{-D}

@@kindex -D
This option has no effect whatsoever, but it is accepted to make it more
likely that scripts written for other assemblers also work with
@@command{@@value{AS}}.

@@node f
@@section Work Faster: @@option{-f}

@@kindex -f
@@cindex trusted compiler
@@cindex faster processing (@@option{-f})
@@samp{-f} should only be used when assembling programs written by a
(trusted) compiler.  @@samp{-f} stops the assembler from doing whitespace
and comment preprocessing on
the input file(s) before assembling them.  @@xref{Preprocessing,
,Preprocessing}.

@@quotation
@@emph{Warning:} if you use @@samp{-f} when the files actually need to be
preprocessed (if they contain comments, for example), @@command{@@value{AS}} does
not work correctly.
@@end quotation

@@node I
@@section @@code{.include} Search Path: @@option{-I} @@var{path}

@@kindex -I @@var{path}
@@cindex paths for @@code{.include}
@@cindex search path for @@code{.include}
@@cindex @@code{include} directive search path
Use this option to add a @@var{path} to the list of directories
@@command{@@value{AS}} searches for files specified in @@code{.include}
directives (@@pxref{Include,,@@code{.include}}).  You may use @@option{-I} as
many times as necessary to include a variety of paths.  The current
working directory is always searched first; after that, @@command{@@value{AS}}
searches any @@samp{-I} directories in the same order as they were
specified (left to right) on the command line.

@@node K
@@section Difference Tables: @@option{-K}

@@kindex -K
@@ifclear DIFF-TBL-KLUGE
On the @@value{TARGET} family, this option is allowed, but has no effect.  It is
permitted for compatibility with the @@sc{gnu} assembler on other platforms,
where it can be used to warn when the assembler alters the machine code
generated for @@samp{.word} directives in difference tables.  The @@value{TARGET}
family does not have the addressing limitations that sometimes lead to this
alteration on other platforms.
@@end ifclear

@@ifset DIFF-TBL-KLUGE
@@cindex difference tables, warning
@@cindex warning for altered difference tables
@@command{@@value{AS}} sometimes alters the code emitted for directives of the form
@@samp{.word @@var{sym1}-@@var{sym2}}; @@pxref{Word,,@@code{.word}}.
You can use the @@samp{-K} option if you want a warning issued when this
is done.
@@end ifset

@@node L
@@section Include Local Labels: @@option{-L}

@@kindex -L
@@cindex local labels, retaining in output
Labels beginning with @@samp{L} (upper case only) are called @@dfn{local
labels}. @@xref{Symbol Names}.  Normally you do not see such labels when
debugging, because they are intended for the use of programs (like
compilers) that compose assembler programs, not for your notice.
Normally both @@command{@@value{AS}} and @@code{@@value{LD}} discard such labels, so you do not
normally debug with them.

This option tells @@command{@@value{AS}} to retain those @@samp{L@@dots{}} symbols
in the object file.  Usually if you do this you also tell the linker
@@code{@@value{LD}} to preserve symbols whose names begin with @@samp{L}.

By default, a local label is any label beginning with @@samp{L}, but each
target is allowed to redefine the local label prefix.
@@ifset HPPA
On the HPPA local labels begin with @@samp{L$}.
@@end ifset

@@node listing
@@section Configuring listing output: @@option{--listing}

The listing feature of the assembler can be enabled via the command line switch
@@samp{-a} (@@pxref{a}).  This feature combines the input source file(s) with a
hex dump of the corresponding locations in the output object file, and displays
them as a listing file.  The format of this listing can be controlled by pseudo
ops inside the assembler source (@@pxref{List} @@pxref{Title} @@pxref{Sbttl}
@@pxref{Psize} @@pxref{Eject}) and also by the following switches:

@@table @@gcctabopt
@@item --listing-lhs-width=@@samp{number}
@@kindex --listing-lhs-width
@@cindex Width of first line disassembly output
Sets the maximum width, in words, of the first line of the hex byte dump.  This
dump appears on the left hand side of the listing output.

@@item --listing-lhs-width2=@@samp{number}
@@kindex --listing-lhs-width2
@@cindex Width of continuation lines of disassembly output
Sets the maximum width, in words, of any further lines of the hex byte dump for
a given input source line.  If this value is not specified, it defaults to being
the same as the value specified for @@samp{--listing-lhs-width}.  If neither
switch is used the default is to one.

@@item --listing-rhs-width=@@samp{number}
@@kindex --listing-rhs-width
@@cindex Width of source line output
Sets the maximum width, in characters, of the source line that is displayed
alongside the hex dump.  The default value for this parameter is 100.  The
source line is displayed on the right hand side of the listing output.

@@item --listing-cont-lines=@@samp{number}
@@kindex --listing-cont-lines
@@cindex Maximum number of continuation lines
Sets the maximum number of continuation lines of hex dump that will be
displayed for a given single line of source input.  The default value is 4.
@@end table

@@node M
@@section Assemble in MRI Compatibility Mode: @@option{-M}

@@kindex -M
@@cindex MRI compatibility mode
The @@option{-M} or @@option{--mri} option selects MRI compatibility mode.  This
changes the syntax and pseudo-op handling of @@command{@@value{AS}} to make it
compatible with the @@code{ASM68K} or the @@code{ASM960} (depending upon the
configured target) assembler from Microtec Research.  The exact nature of the
MRI syntax will not be documented here; see the MRI manuals for more
information.  Note in particular that the handling of macros and macro
arguments is somewhat different.  The purpose of this option is to permit
assembling existing MRI assembler code using @@command{@@value{AS}}.

The MRI compatibility is not complete.  Certain operations of the MRI assembler
depend upon its object file format, and can not be supported using other object
file formats.  Supporting these would require enhancing each object file format
individually.  These are:

@@itemize @@bullet
@@item global symbols in common section

The m68k MRI assembler supports common sections which are merged by the linker.
Other object file formats do not support this.  @@command{@@value{AS}} handles
common sections by treating them as a single common symbol.  It permits local
symbols to be defined within a common section, but it can not support global
symbols, since it has no way to describe them.

@@item complex relocations

The MRI assemblers support relocations against a negated section address, and
relocations which combine the start addresses of two or more sections.  These
are not support by other object file formats.

@@item @@code{END} pseudo-op specifying start address

The MRI @@code{END} pseudo-op permits the specification of a start address.
This is not supported by other object file formats.  The start address may
instead be specified using the @@option{-e} option to the linker, or in a linker
script.

@@item @@code{IDNT}, @@code{.ident} and @@code{NAME} pseudo-ops

The MRI @@code{IDNT}, @@code{.ident} and @@code{NAME} pseudo-ops assign a module
name to the output file.  This is not supported by other object file formats.

@@item @@code{ORG} pseudo-op

The m68k MRI @@code{ORG} pseudo-op begins an absolute section at a given
address.  This differs from the usual @@command{@@value{AS}} @@code{.org} pseudo-op,
which changes the location within the current section.  Absolute sections are
not supported by other object file formats.  The address of a section may be
assigned within a linker script.
@@end itemize

There are some other features of the MRI assembler which are not supported by
@@command{@@value{AS}}, typically either because they are difficult or because they
seem of little consequence.  Some of these may be supported in future releases.

@@itemize @@bullet

@@item EBCDIC strings

EBCDIC strings are not supported.

@@item packed binary coded decimal

Packed binary coded decimal is not supported.  This means that the @@code{DC.P}
and @@code{DCB.P} pseudo-ops are not supported.

@@item @@code{FEQU} pseudo-op

The m68k @@code{FEQU} pseudo-op is not supported.

@@item @@code{NOOBJ} pseudo-op

The m68k @@code{NOOBJ} pseudo-op is not supported.

@@item @@code{OPT} branch control options

The m68k @@code{OPT} branch control options---@@code{B}, @@code{BRS}, @@code{BRB},
@@code{BRL}, and @@code{BRW}---are ignored.  @@command{@@value{AS}} automatically
relaxes all branches, whether forward or backward, to an appropriate size, so
these options serve no purpose.

@@item @@code{OPT} list control options

The following m68k @@code{OPT} list control options are ignored: @@code{C},
@@code{CEX}, @@code{CL}, @@code{CRE}, @@code{E}, @@code{G}, @@code{I}, @@code{M},
@@code{MEX}, @@code{MC}, @@code{MD}, @@code{X}.

@@item other @@code{OPT} options

The following m68k @@code{OPT} options are ignored: @@code{NEST}, @@code{O},
@@code{OLD}, @@code{OP}, @@code{P}, @@code{PCO}, @@code{PCR}, @@code{PCS}, @@code{R}.

@@item @@code{OPT} @@code{D} option is default

The m68k @@code{OPT} @@code{D} option is the default, unlike the MRI assembler.
@@code{OPT NOD} may be used to turn it off.

@@item @@code{XREF} pseudo-op.

The m68k @@code{XREF} pseudo-op is ignored.

@@item @@code{.debug} pseudo-op

The i960 @@code{.debug} pseudo-op is not supported.

@@item @@code{.extended} pseudo-op

The i960 @@code{.extended} pseudo-op is not supported.

@@item @@code{.list} pseudo-op.

The various options of the i960 @@code{.list} pseudo-op are not supported.

@@item @@code{.optimize} pseudo-op

The i960 @@code{.optimize} pseudo-op is not supported.

@@item @@code{.output} pseudo-op

The i960 @@code{.output} pseudo-op is not supported.

@@item @@code{.setreal} pseudo-op

The i960 @@code{.setreal} pseudo-op is not supported.

@@end itemize

@@node MD
@@section Dependency Tracking: @@option{--MD}

@@kindex --MD
@@cindex dependency tracking
@@cindex make rules

@@command{@@value{AS}} can generate a dependency file for the file it creates.  This
file consists of a single rule suitable for @@code{make} describing the
dependencies of the main source file.

The rule is written to the file named in its argument.

This feature is used in the automatic updating of makefiles.

@@node o
@@section Name the Object File: @@option{-o}

@@kindex -o
@@cindex naming object file
@@cindex object file name
There is always one object file output when you run @@command{@@value{AS}}.  By
default it has the name
@@ifset GENERIC
@@ifset I960
@@file{a.out} (or @@file{b.out}, for Intel 960 targets only).
@@end ifset
@@ifclear I960
@@file{a.out}.
@@end ifclear
@@end ifset
@@ifclear GENERIC
@@ifset I960
@@file{b.out}.
@@end ifset
@@ifclear I960
@@file{a.out}.
@@end ifclear
@@end ifclear
You use this option (which takes exactly one filename) to give the
object file a different name.

Whatever the object file is called, @@command{@@value{AS}} overwrites any
existing file of the same name.

@@node R
@@section Join Data and Text Sections: @@option{-R}

@@kindex -R
@@cindex data and text sections, joining
@@cindex text and data sections, joining
@@cindex joining text and data sections
@@cindex merging text and data sections
@@option{-R} tells @@command{@@value{AS}} to write the object file as if all
data-section data lives in the text section.  This is only done at
the very last moment:  your binary data are the same, but data
section parts are relocated differently.  The data section part of
your object file is zero bytes long because all its bytes are
appended to the text section.  (@@xref{Sections,,Sections and Relocation}.)

When you specify @@option{-R} it would be possible to generate shorter
address displacements (because we do not have to cross between text and
data section).  We refrain from doing this simply for compatibility with
older versions of @@command{@@value{AS}}.  In future, @@option{-R} may work this way.

@@ifset COFF-ELF
When @@command{@@value{AS}} is configured for COFF or ELF output,
this option is only useful if you use sections named @@samp{.text} and
@@samp{.data}.
@@end ifset

@@ifset HPPA
@@option{-R} is not supported for any of the HPPA targets.  Using
@@option{-R} generates a warning from @@command{@@value{AS}}.
@@end ifset

@@node statistics
@@section Display Assembly Statistics: @@option{--statistics}

@@kindex --statistics
@@cindex statistics, about assembly
@@cindex time, total for assembly
@@cindex space used, maximum for assembly
Use @@samp{--statistics} to display two statistics about the resources used by
@@command{@@value{AS}}: the maximum amount of space allocated during the assembly
(in bytes), and the total execution time taken for the assembly (in @@sc{cpu}
seconds).

@@node traditional-format
@@section Compatible Output: @@option{--traditional-format}

@@kindex --traditional-format
For some targets, the output of @@command{@@value{AS}} is different in some ways
from the output of some existing assembler.  This switch requests
@@command{@@value{AS}} to use the traditional format instead.

For example, it disables the exception frame optimizations which
@@command{@@value{AS}} normally does by default on @@code{@@value{GCC}} output.

@@node v
@@section Announce Version: @@option{-v}

@@kindex -v
@@kindex -version
@@cindex assembler version
@@cindex version of assembler
You can find out what version of as is running by including the
option @@samp{-v} (which you can also spell as @@samp{-version}) on the
command line.

@@node W
@@section Control Warnings: @@option{-W}, @@option{--warn}, @@option{--no-warn}, @@option{--fatal-warnings}

@@command{@@value{AS}} should never give a warning or error message when
assembling compiler output.  But programs written by people often
cause @@command{@@value{AS}} to give a warning that a particular assumption was
made.  All such warnings are directed to the standard error file.

@@kindex -W
@@kindex --no-warn
@@cindex suppressing warnings
@@cindex warnings, suppressing
If you use the @@option{-W} and @@option{--no-warn} options, no warnings are issued.
This only affects the warning messages: it does not change any particular of
how @@command{@@value{AS}} assembles your file.  Errors, which stop the assembly,
are still reported.

@@kindex --fatal-warnings
@@cindex errors, caused by warnings
@@cindex warnings, causing error
If you use the @@option{--fatal-warnings} option, @@command{@@value{AS}} considers
files that generate warnings to be in error.

@@kindex --warn
@@cindex warnings, switching on
You can switch these options off again by specifying @@option{--warn}, which
causes warnings to be output as usual.

@@node Z
@@section Generate Object File in Spite of Errors: @@option{-Z}
@@cindex object file, after errors
@@cindex errors, continuing after
After an error message, @@command{@@value{AS}} normally produces no output.  If for
some reason you are interested in object file output even after
@@command{@@value{AS}} gives an error message on your program, use the @@samp{-Z}
option.  If there are any errors, @@command{@@value{AS}} continues anyways, and
writes an object file after a final warning message of the form @@samp{@@var{n}
errors, @@var{m} warnings, generating bad object file.}

@@node Syntax
@@chapter Syntax

@@cindex machine-independent syntax
@@cindex syntax, machine-independent
This chapter describes the machine-independent syntax allowed in a
source file.  @@command{@@value{AS}} syntax is similar to what many other
assemblers use; it is inspired by the BSD 4.2
@@ifclear VAX
assembler.
@@end ifclear
@@ifset VAX
assembler, except that @@command{@@value{AS}} does not assemble Vax bit-fields.
@@end ifset

@@menu
* Preprocessing::              Preprocessing
* Whitespace::                  Whitespace
* Comments::                    Comments
* Symbol Intro::                Symbols
* Statements::                  Statements
* Constants::                   Constants
@@end menu

@@node Preprocessing
@@section Preprocessing

@@cindex preprocessing
The @@command{@@value{AS}} internal preprocessor:
@@itemize @@bullet
@@cindex whitespace, removed by preprocessor
@@item
adjusts and removes extra whitespace.  It leaves one space or tab before
the keywords on a line, and turns any other whitespace on the line into
a single space.

@@cindex comments, removed by preprocessor
@@item
removes all comments, replacing them with a single space, or an
appropriate number of newlines.

@@cindex constants, converted by preprocessor
@@item
converts character constants into the appropriate numeric values.
@@end itemize

It does not do macro processing, include file handling, or
anything else you may get from your C compiler's preprocessor.  You can
do include file processing with the @@code{.include} directive
(@@pxref{Include,,@@code{.include}}).  You can use the @@sc{gnu} C compiler driver
to get other ``CPP'' style preprocessing by giving the input file a
@@samp{.S} suffix.  @@xref{Overall Options,, Options Controlling the Kind of
Output, gcc.info, Using GNU CC}.

Excess whitespace, comments, and character constants
cannot be used in the portions of the input text that are not
preprocessed.

@@cindex turning preprocessing on and off
@@cindex preprocessing, turning on and off
@@kindex #NO_APP
@@kindex #APP
If the first line of an input file is @@code{#NO_APP} or if you use the
@@samp{-f} option, whitespace and comments are not removed from the input file.
Within an input file, you can ask for whitespace and comment removal in
specific portions of the file by putting a line that says @@code{#APP} before
the text that may contain whitespace or comments, and putting a line that says
@@code{#NO_APP} after this text.  This feature is mainly intend to support
@@code{asm} statements in compilers whose output is otherwise free of comments
and whitespace.

@@node Whitespace
@@section Whitespace

@@cindex whitespace
@@dfn{Whitespace} is one or more blanks or tabs, in any order.
Whitespace is used to separate symbols, and to make programs neater for
people to read.  Unless within character constants
(@@pxref{Characters,,Character Constants}), any whitespace means the same
as exactly one space.

@@node Comments
@@section Comments

@@cindex comments
There are two ways of rendering comments to @@command{@@value{AS}}.  In both
cases the comment is equivalent to one space.

Anything from @@samp{/*} through the next @@samp{*/} is a comment.
This means you may not nest these comments.

@@smallexample
/*
  The only way to include a newline ('\n') in a comment
  is to use this sort of comment.
*/

/* This sort of comment does not nest. */
@@end smallexample

@@cindex line comment character
Anything from the @@dfn{line comment} character to the next newline
is considered a comment and is ignored.  The line comment character is
@@ifset A29K
@@samp{;} for the AMD 29K family;
@@end ifset
@@ifset ARC
@@samp{;} on the ARC;
@@end ifset
@@ifset ARM
@@samp{@@@@} on the ARM;
@@end ifset
@@ifset H8/300
@@samp{;} for the H8/300 family;
@@end ifset
@@ifset H8/500
@@samp{!} for the H8/500 family;
@@end ifset
@@ifset HPPA
@@samp{;} for the HPPA;
@@end ifset
@@ifset I80386
@@samp{#} on the i386 and x86-64;
@@end ifset
@@ifset I960
@@samp{#} on the i960;
@@end ifset
@@ifset PDP11
@@samp{;} for the PDP-11;
@@end ifset
@@ifset PJ
@@samp{;} for picoJava;
@@end ifset
@@ifset PPC
@@samp{#} for Motorola PowerPC;
@@end ifset
@@ifset SH
@@samp{!} for the Renesas / SuperH SH;
@@end ifset
@@ifset SPARC
@@samp{!} on the SPARC;
@@end ifset
@@ifset IP2K
@@samp{#} on the ip2k;
@@end ifset
@@ifset M32R
@@samp{#} on the m32r;
@@end ifset
@@ifset M680X0
@@samp{|} on the 680x0;
@@end ifset
@@ifset M68HC11
@@samp{#} on the 68HC11 and 68HC12;
@@end ifset
@@ifset M880X0
@@samp{;} on the M880x0;
@@end ifset
@@ifset VAX
@@samp{#} on the Vax;
@@end ifset
@@ifset Z8000
@@samp{!} for the Z8000;
@@end ifset
@@ifset V850
@@samp{#} on the V850;
@@end ifset
@@ifset XTENSA
@@samp{#} for Xtensa systems;
@@end ifset
see @@ref{Machine Dependencies}.  @@refill
@@c FIXME What about i860?

@@ifset GENERIC
On some machines there are two different line comment characters.  One
character only begins a comment if it is the first non-whitespace character on
a line, while the other always begins a comment.
@@end ifset

@@ifset V850
The V850 assembler also supports a double dash as starting a comment that
extends to the end of the line.

@@samp{--};
@@end ifset

@@kindex #
@@cindex lines starting with @@code{#}
@@cindex logical line numbers
To be compatible with past assemblers, lines that begin with @@samp{#} have a
special interpretation.  Following the @@samp{#} should be an absolute
expression (@@pxref{Expressions}): the logical line number of the @@emph{next}
line.  Then a string (@@pxref{Strings,, Strings}) is allowed: if present it is a
new logical file name.  The rest of the line, if any, should be whitespace.

If the first non-whitespace characters on the line are not numeric,
the line is ignored.  (Just like a comment.)

@@smallexample
                          # This is an ordinary comment.
# 42-6 "new_file_name"    # New logical file name
                          # This is logical line # 36.
@@end smallexample
This feature is deprecated, and may disappear from future versions
of @@command{@@value{AS}}.

@@node Symbol Intro
@@section Symbols

@@cindex characters used in symbols
@@ifclear SPECIAL-SYMS
A @@dfn{symbol} is one or more characters chosen from the set of all
letters (both upper and lower case), digits and the three characters
@@samp{_.$}.
@@end ifclear
@@ifset SPECIAL-SYMS
@@ifclear GENERIC
@@ifset H8
A @@dfn{symbol} is one or more characters chosen from the set of all
letters (both upper and lower case), digits and the three characters
@@samp{._$}.  (Save that, on the H8/300 only, you may not use @@samp{$} in
symbol names.)
@@end ifset
@@end ifclear
@@end ifset
@@ifset GENERIC
On most machines, you can also use @@code{$} in symbol names; exceptions
are noted in @@ref{Machine Dependencies}.
@@end ifset
No symbol may begin with a digit.  Case is significant.
There is no length limit: all characters are significant.  Symbols are
delimited by characters not in that set, or by the beginning of a file
(since the source program must end with a newline, the end of a file is
not a possible symbol delimiter).  @@xref{Symbols}.
@@cindex length of symbols

@@node Statements
@@section Statements

@@cindex statements, structure of
@@cindex line separator character
@@cindex statement separator character
@@ifclear GENERIC
@@ifclear abnormal-separator
A @@dfn{statement} ends at a newline character (@@samp{\n}) or at a
semicolon (@@samp{;}).  The newline or semicolon is considered part of
the preceding statement.  Newlines and semicolons within character
constants are an exception: they do not end statements.
@@end ifclear
@@ifset abnormal-separator
@@ifset A29K
A @@dfn{statement} ends at a newline character (@@samp{\n}) or an ``at''
sign (@@samp{@@@@}).  The newline or at sign is considered part of the
preceding statement.  Newlines and at signs within character constants
are an exception: they do not end statements.
@@end ifset
@@ifset HPPA
A @@dfn{statement} ends at a newline character (@@samp{\n}) or an exclamation 
point (@@samp{!}).  The newline or exclamation point is considered part of the
preceding statement.  Newlines and exclamation points within character
constants are an exception: they do not end statements.
@@end ifset
@@ifset H8
A @@dfn{statement} ends at a newline character (@@samp{\n}); or (for the
H8/300) a dollar sign (@@samp{$}); or (for the
Renesas-SH or the
H8/500) a semicolon
(@@samp{;}).  The newline or separator character is considered part of
the preceding statement.  Newlines and separators within character
constants are an exception: they do not end statements.
@@end ifset
@@end ifset
@@end ifclear
@@ifset GENERIC
A @@dfn{statement} ends at a newline character (@@samp{\n}) or line
separator character.  (The line separator is usually @@samp{;}, unless
this conflicts with the comment character; @@pxref{Machine Dependencies}.)  The
newline or separator character is considered part of the preceding
statement.  Newlines and separators within character constants are an
exception: they do not end statements.
@@end ifset

@@cindex newline, required at file end
@@cindex EOF, newline must precede
It is an error to end any statement with end-of-file:  the last
character of any input file should be a newline.@@refill

An empty statement is allowed, and may include whitespace.  It is ignored.

@@cindex instructions and directives
@@cindex directives and instructions
@@c "key symbol" is not used elsewhere in the document; seems pedantic to
@@c @@defn{} it in that case, as was done previously...  doc@@cygnus.com,
@@c 13feb91.
A statement begins with zero or more labels, optionally followed by a
key symbol which determines what kind of statement it is.  The key
symbol determines the syntax of the rest of the statement.  If the
symbol begins with a dot @@samp{.} then the statement is an assembler
directive: typically valid for any computer.  If the symbol begins with
a letter the statement is an assembly language @@dfn{instruction}: it
assembles into a machine language instruction.
@@ifset GENERIC
Different versions of @@command{@@value{AS}} for different computers
recognize different instructions.  In fact, the same symbol may
represent a different instruction in a different computer's assembly
language.@@refill
@@end ifset

@@cindex @@code{:} (label)
@@cindex label (@@code{:})
A label is a symbol immediately followed by a colon (@@code{:}).
Whitespace before a label or after a colon is permitted, but you may not
have whitespace between a label's symbol and its colon. @@xref{Labels}.

@@ifset HPPA
For HPPA targets, labels need not be immediately followed by a colon, but 
the definition of a label must begin in column zero.  This also implies that
only one label may be defined on each line.
@@end ifset

@@smallexample
label:     .directive    followed by something
another_label:           # This is an empty statement.
           instruction   operand_1, operand_2, @@dots{}
@@end smallexample

@@node Constants
@@section Constants

@@cindex constants
A constant is a number, written so that its value is known by
inspection, without knowing any context.  Like this:
@@smallexample
@@group
.byte  74, 0112, 092, 0x4A, 0X4a, 'J, '\J # All the same value.
.ascii "Ring the bell\7"                  # A string constant.
.octa  0x123456789abcdef0123456789ABCDEF0 # A bignum.
.float 0f-314159265358979323846264338327\
95028841971.693993751E-40                 # - pi, a flonum.
@@end group
@@end smallexample

@@menu
* Characters::                  Character Constants
* Numbers::                     Number Constants
@@end menu

@@node Characters
@@subsection Character Constants

@@cindex character constants
@@cindex constants, character
There are two kinds of character constants.  A @@dfn{character} stands
for one character in one byte and its value may be used in
numeric expressions.  String constants (properly called string
@@emph{literals}) are potentially many bytes and their values may not be
used in arithmetic expressions.

@@menu
* Strings::                     Strings
* Chars::                       Characters
@@end menu

@@node Strings
@@subsubsection Strings

@@cindex string constants
@@cindex constants, string
A @@dfn{string} is written between double-quotes.  It may contain
double-quotes or null characters.  The way to get special characters
into a string is to @@dfn{escape} these characters: precede them with
a backslash @@samp{\} character.  For example @@samp{\\} represents
one backslash:  the first @@code{\} is an escape which tells
@@command{@@value{AS}} to interpret the second character literally as a backslash
(which prevents @@command{@@value{AS}} from recognizing the second @@code{\} as an
escape character).  The complete list of escapes follows.

@@cindex escape codes, character
@@cindex character escape codes
@@table @@kbd
@@c      @@item \a
@@c      Mnemonic for ACKnowledge; for ASCII this is octal code 007.
@@c
@@cindex @@code{\b} (backspace character)
@@cindex backspace (@@code{\b})
@@item \b
Mnemonic for backspace; for ASCII this is octal code 010.

@@c      @@item \e
@@c      Mnemonic for EOText; for ASCII this is octal code 004.
@@c
@@cindex @@code{\f} (formfeed character)
@@cindex formfeed (@@code{\f})
@@item \f
Mnemonic for FormFeed; for ASCII this is octal code 014.

@@cindex @@code{\n} (newline character)
@@cindex newline (@@code{\n})
@@item \n
Mnemonic for newline; for ASCII this is octal code 012.

@@c      @@item \p
@@c      Mnemonic for prefix; for ASCII this is octal code 033, usually known as @@code{escape}.
@@c
@@cindex @@code{\r} (carriage return character)
@@cindex carriage return (@@code{\r})
@@item \r
Mnemonic for carriage-Return; for ASCII this is octal code 015.

@@c      @@item \s
@@c      Mnemonic for space; for ASCII this is octal code 040.  Included for compliance with
@@c      other assemblers.
@@c
@@cindex @@code{\t} (tab)
@@cindex tab (@@code{\t})
@@item \t
Mnemonic for horizontal Tab; for ASCII this is octal code 011.

@@c      @@item \v
@@c      Mnemonic for Vertical tab; for ASCII this is octal code 013.
@@c      @@item \x @@var{digit} @@var{digit} @@var{digit}
@@c      A hexadecimal character code.  The numeric code is 3 hexadecimal digits.
@@c
@@cindex @@code{\@@var{ddd}} (octal character code)
@@cindex octal character code (@@code{\@@var{ddd}})
@@item \ @@var{digit} @@var{digit} @@var{digit}
An octal character code.  The numeric code is 3 octal digits.
For compatibility with other Unix systems, 8 and 9 are accepted as digits:
for example, @@code{\008} has the value 010, and @@code{\009} the value 011.

@@cindex @@code{\@@var{xd...}} (hex character code)
@@cindex hex character code (@@code{\@@var{xd...}})
@@item \@@code{x} @@var{hex-digits...}
A hex character code.  All trailing hex digits are combined.  Either upper or
lower case @@code{x} works.

@@cindex @@code{\\} (@@samp{\} character)
@@cindex backslash (@@code{\\})
@@item \\
Represents one @@samp{\} character.

@@c      @@item \'
@@c      Represents one @@samp{'} (accent acute) character.
@@c      This is needed in single character literals
@@c      (@@xref{Characters,,Character Constants}.) to represent
@@c      a @@samp{'}.
@@c
@@cindex @@code{\"} (doublequote character)
@@cindex doublequote (@@code{\"})
@@item \"
Represents one @@samp{"} character.  Needed in strings to represent
this character, because an unescaped @@samp{"} would end the string.

@@item \ @@var{anything-else}
Any other character when escaped by @@kbd{\} gives a warning, but
assembles as if the @@samp{\} was not present.  The idea is that if
you used an escape sequence you clearly didn't want the literal
interpretation of the following character.  However @@command{@@value{AS}} has no
other interpretation, so @@command{@@value{AS}} knows it is giving you the wrong
code and warns you of the fact.
@@end table

Which characters are escapable, and what those escapes represent,
varies widely among assemblers.  The current set is what we think
the BSD 4.2 assembler recognizes, and is a subset of what most C
compilers recognize.  If you are in doubt, do not use an escape
sequence.

@@node Chars
@@subsubsection Characters

@@cindex single character constant
@@cindex character, single
@@cindex constant, single character
A single character may be written as a single quote immediately
followed by that character.  The same escapes apply to characters as
to strings.  So if you want to write the character backslash, you
must write @@kbd{'\\} where the first @@code{\} escapes the second
@@code{\}.  As you can see, the quote is an acute accent, not a
grave accent.  A newline
@@ifclear GENERIC
@@ifclear abnormal-separator
(or semicolon @@samp{;})
@@end ifclear
@@ifset abnormal-separator
@@ifset A29K
(or at sign @@samp{@@@@})
@@end ifset
@@ifset H8
(or dollar sign @@samp{$}, for the H8/300; or semicolon @@samp{;} for the
Renesas SH or H8/500)
@@end ifset
@@end ifset
@@end ifclear
immediately following an acute accent is taken as a literal character
and does not count as the end of a statement.  The value of a character
constant in a numeric expression is the machine's byte-wide code for
that character.  @@command{@@value{AS}} assumes your character code is ASCII:
@@kbd{'A} means 65, @@kbd{'B} means 66, and so on. @@refill

@@node Numbers
@@subsection Number Constants

@@cindex constants, number
@@cindex number constants
@@command{@@value{AS}} distinguishes three kinds of numbers according to how they
are stored in the target machine.  @@emph{Integers} are numbers that
would fit into an @@code{int} in the C language.  @@emph{Bignums} are
integers, but they are stored in more than 32 bits.  @@emph{Flonums}
are floating point numbers, described below.

@@menu
* Integers::                    Integers
* Bignums::                     Bignums
* Flonums::                     Flonums
@@ifclear GENERIC
@@ifset I960
* Bit Fields::                  Bit Fields
@@end ifset
@@end ifclear
@@end menu

@@node Integers
@@subsubsection Integers
@@cindex integers
@@cindex constants, integer

@@cindex binary integers
@@cindex integers, binary
A binary integer is @@samp{0b} or @@samp{0B} followed by zero or more of
the binary digits @@samp{01}.

@@cindex octal integers
@@cindex integers, octal
An octal integer is @@samp{0} followed by zero or more of the octal
digits (@@samp{01234567}).

@@cindex decimal integers
@@cindex integers, decimal
A decimal integer starts with a non-zero digit followed by zero or
more digits (@@samp{0123456789}).

@@cindex hexadecimal integers
@@cindex integers, hexadecimal
A hexadecimal integer is @@samp{0x} or @@samp{0X} followed by one or
more hexadecimal digits chosen from @@samp{0123456789abcdefABCDEF}.

Integers have the usual values.  To denote a negative integer, use
the prefix operator @@samp{-} discussed under expressions
(@@pxref{Prefix Ops,,Prefix Operators}).

@@node Bignums
@@subsubsection Bignums

@@cindex bignums
@@cindex constants, bignum
A @@dfn{bignum} has the same syntax and semantics as an integer
except that the number (or its negative) takes more than 32 bits to
represent in binary.  The distinction is made because in some places
integers are permitted while bignums are not.

@@node Flonums
@@subsubsection Flonums
@@cindex flonums
@@cindex floating point numbers
@@cindex constants, floating point

@@cindex precision, floating point
A @@dfn{flonum} represents a floating point number.  The translation is
indirect: a decimal floating point number from the text is converted by
@@command{@@value{AS}} to a generic binary floating point number of more than
sufficient precision.  This generic floating point number is converted
to a particular computer's floating point format (or formats) by a
portion of @@command{@@value{AS}} specialized to that computer.

A flonum is written by writing (in order)
@@itemize @@bullet
@@item
The digit @@samp{0}.
@@ifset HPPA
(@@samp{0} is optional on the HPPA.)
@@end ifset

@@item
A letter, to tell @@command{@@value{AS}} the rest of the number is a flonum.
@@ifset GENERIC
@@kbd{e} is recommended.  Case is not important.
@@ignore
@@c FIXME: verify if flonum syntax really this vague for most cases
(Any otherwise illegal letter works here, but that might be changed.  Vax BSD
4.2 assembler seems to allow any of @@samp{defghDEFGH}.)
@@end ignore

On the H8/300, H8/500,
Renesas / SuperH SH,
and AMD 29K architectures, the letter must be
one of the letters @@samp{DFPRSX} (in upper or lower case).

On the ARC, the letter must be one of the letters @@samp{DFRS}
(in upper or lower case).

On the Intel 960 architecture, the letter must be
one of the letters @@samp{DFT} (in upper or lower case).

On the HPPA architecture, the letter must be @@samp{E} (upper case only).
@@end ifset
@@ifclear GENERIC
@@ifset A29K
One of the letters @@samp{DFPRSX} (in upper or lower case).
@@end ifset
@@ifset ARC
One of the letters @@samp{DFRS} (in upper or lower case).
@@end ifset
@@ifset H8
One of the letters @@samp{DFPRSX} (in upper or lower case).
@@end ifset
@@ifset HPPA
The letter @@samp{E} (upper case only).
@@end ifset
@@ifset I960
One of the letters @@samp{DFT} (in upper or lower case).
@@end ifset
@@end ifclear

@@item
An optional sign: either @@samp{+} or @@samp{-}.

@@item
An optional @@dfn{integer part}: zero or more decimal digits.

@@item
An optional @@dfn{fractional part}: @@samp{.} followed by zero
or more decimal digits.

@@item
An optional exponent, consisting of:

@@itemize @@bullet
@@item
An @@samp{E} or @@samp{e}.
@@c I can't find a config where "EXP_CHARS" is other than 'eE', but in
@@c principle this can perfectly well be different on different targets.
@@item
Optional sign: either @@samp{+} or @@samp{-}.
@@item
One or more decimal digits.
@@end itemize

@@end itemize

At least one of the integer part or the fractional part must be
present.  The floating point number has the usual base-10 value.

@@command{@@value{AS}} does all processing using integers.  Flonums are computed
independently of any floating point hardware in the computer running
@@command{@@value{AS}}.

@@ifclear GENERIC
@@ifset I960
@@c Bit fields are written as a general facility but are also controlled
@@c by a conditional-compilation flag---which is as of now (21mar91)
@@c turned on only by the i960 config of GAS.
@@node Bit Fields
@@subsubsection Bit Fields

@@cindex bit fields
@@cindex constants, bit field
You can also define numeric constants as @@dfn{bit fields}.
specify two numbers separated by a colon---
@@example
@@var{mask}:@@var{value}
@@end example
@@noindent
@@command{@@value{AS}} applies a bitwise @@sc{and} between @@var{mask} and
@@var{value}.

The resulting number is then packed
@@ifset GENERIC
@@c this conditional paren in case bit fields turned on elsewhere than 960
(in host-dependent byte order)
@@end ifset
into a field whose width depends on which assembler directive has the
bit-field as its argument.  Overflow (a result from the bitwise and
requiring more binary digits to represent) is not an error; instead,
more constants are generated, of the specified width, beginning with the
least significant digits.@@refill

The directives @@code{.byte}, @@code{.hword}, @@code{.int}, @@code{.long},
@@code{.short}, and @@code{.word} accept bit-field arguments.
@@end ifset
@@end ifclear

@@node Sections
@@chapter Sections and Relocation
@@cindex sections
@@cindex relocation

@@menu
* Secs Background::             Background
* Ld Sections::                 Linker Sections
* As Sections::                 Assembler Internal Sections
* Sub-Sections::                Sub-Sections
* bss::                         bss Section
@@end menu

@@node Secs Background
@@section Background

Roughly, a section is a range of addresses, with no gaps; all data
``in'' those addresses is treated the same for some particular purpose.
For example there may be a ``read only'' section.

@@cindex linker, and assembler
@@cindex assembler, and linker
The linker @@code{@@value{LD}} reads many object files (partial programs) and
combines their contents to form a runnable program.  When @@command{@@value{AS}}
emits an object file, the partial program is assumed to start at address 0.
@@code{@@value{LD}} assigns the final addresses for the partial program, so that
different partial programs do not overlap.  This is actually an
oversimplification, but it suffices to explain how @@command{@@value{AS}} uses
sections.

@@code{@@value{LD}} moves blocks of bytes of your program to their run-time
addresses.  These blocks slide to their run-time addresses as rigid
units; their length does not change and neither does the order of bytes
within them.  Such a rigid unit is called a @@emph{section}.  Assigning
run-time addresses to sections is called @@dfn{relocation}.  It includes
the task of adjusting mentions of object-file addresses so they refer to
the proper run-time addresses.
@@ifset H8
For the H8/300 and H8/500,
and for the Renesas / SuperH SH,
@@command{@@value{AS}} pads sections if needed to
ensure they end on a word (sixteen bit) boundary.
@@end ifset

@@cindex standard assembler sections
An object file written by @@command{@@value{AS}} has at least three sections, any
of which may be empty.  These are named @@dfn{text}, @@dfn{data} and
@@dfn{bss} sections.

@@ifset COFF-ELF
@@ifset GENERIC
When it generates COFF or ELF output,
@@end ifset
@@command{@@value{AS}} can also generate whatever other named sections you specify
using the @@samp{.section} directive (@@pxref{Section,,@@code{.section}}).
If you do not use any directives that place output in the @@samp{.text}
or @@samp{.data} sections, these sections still exist, but are empty.
@@end ifset

@@ifset HPPA
@@ifset GENERIC
When @@command{@@value{AS}} generates SOM or ELF output for the HPPA,
@@end ifset
@@command{@@value{AS}} can also generate whatever other named sections you
specify using the @@samp{.space} and @@samp{.subspace} directives.  See
@@cite{HP9000 Series 800 Assembly Language Reference Manual}
(HP 92432-90001) for details on the @@samp{.space} and @@samp{.subspace}
assembler directives.

@@ifset SOM
Additionally, @@command{@@value{AS}} uses different names for the standard
text, data, and bss sections when generating SOM output.  Program text
is placed into the @@samp{$CODE$} section, data into @@samp{$DATA$}, and
BSS into @@samp{$BSS$}.
@@end ifset
@@end ifset

Within the object file, the text section starts at address @@code{0}, the
data section follows, and the bss section follows the data section.

@@ifset HPPA
When generating either SOM or ELF output files on the HPPA, the text
section starts at address @@code{0}, the data section at address
@@code{0x4000000}, and the bss section follows the data section.
@@end ifset

To let @@code{@@value{LD}} know which data changes when the sections are
relocated, and how to change that data, @@command{@@value{AS}} also writes to the
object file details of the relocation needed.  To perform relocation
@@code{@@value{LD}} must know, each time an address in the object
file is mentioned:
@@itemize @@bullet
@@item
Where in the object file is the beginning of this reference to
an address?
@@item
How long (in bytes) is this reference?
@@item
Which section does the address refer to?  What is the numeric value of
@@display
(@@var{address}) @@minus{} (@@var{start-address of section})?
@@end display
@@item
Is the reference to an address ``Program-Counter relative''?
@@end itemize

@@cindex addresses, format of
@@cindex section-relative addressing
In fact, every address @@command{@@value{AS}} ever uses is expressed as
@@display
(@@var{section}) + (@@var{offset into section})
@@end display
@@noindent
Further, most expressions @@command{@@value{AS}} computes have this section-relative
nature.
@@ifset SOM
(For some object formats, such as SOM for the HPPA, some expressions are
symbol-relative instead.)
@@end ifset

In this manual we use the notation @@{@@var{secname} @@var{N}@@} to mean ``offset
@@var{N} into section @@var{secname}.''

Apart from text, data and bss sections you need to know about the
@@dfn{absolute} section.  When @@code{@@value{LD}} mixes partial programs,
addresses in the absolute section remain unchanged.  For example, address
@@code{@@{absolute 0@@}} is ``relocated'' to run-time address 0 by
@@code{@@value{LD}}.  Although the linker never arranges two partial programs'
data sections with overlapping addresses after linking, @@emph{by definition}
their absolute sections must overlap.  Address @@code{@@{absolute@@ 239@@}} in one
part of a program is always the same address when the program is running as
address @@code{@@{absolute@@ 239@@}} in any other part of the program.

The idea of sections is extended to the @@dfn{undefined} section.  Any
address whose section is unknown at assembly time is by definition
rendered @@{undefined @@var{U}@@}---where @@var{U} is filled in later.
Since numbers are always defined, the only way to generate an undefined
address is to mention an undefined symbol.  A reference to a named
common block would be such a symbol: its value is unknown at assembly
time so it has section @@emph{undefined}.

By analogy the word @@emph{section} is used to describe groups of sections in
the linked program.  @@code{@@value{LD}} puts all partial programs' text
sections in contiguous addresses in the linked program.  It is
customary to refer to the @@emph{text section} of a program, meaning all
the addresses of all partial programs' text sections.  Likewise for
data and bss sections.

Some sections are manipulated by @@code{@@value{LD}}; others are invented for
use of @@command{@@value{AS}} and have no meaning except during assembly.

@@node Ld Sections
@@section Linker Sections
@@code{@@value{LD}} deals with just four kinds of sections, summarized below.

@@table @@strong

@@ifset COFF-ELF
@@cindex named sections
@@cindex sections, named
@@item named sections
@@end ifset
@@ifset aout-bout
@@cindex text section
@@cindex data section
@@itemx text section
@@itemx data section
@@end ifset
These sections hold your program.  @@command{@@value{AS}} and @@code{@@value{LD}} treat them as
separate but equal sections.  Anything you can say of one section is
true of another.
@@c @@ifset aout-bout
When the program is running, however, it is
customary for the text section to be unalterable.  The
text section is often shared among processes: it contains
instructions, constants and the like.  The data section of a running
program is usually alterable: for example, C variables would be stored
in the data section.
@@c @@end ifset

@@cindex bss section
@@item bss section
This section contains zeroed bytes when your program begins running.  It
is used to hold uninitialized variables or common storage.  The length of
each partial program's bss section is important, but because it starts
out containing zeroed bytes there is no need to store explicit zero
bytes in the object file.  The bss section was invented to eliminate
those explicit zeros from object files.

@@cindex absolute section
@@item absolute section
Address 0 of this section is always ``relocated'' to runtime address 0.
This is useful if you want to refer to an address that @@code{@@value{LD}} must
not change when relocating.  In this sense we speak of absolute
addresses being ``unrelocatable'': they do not change during relocation.

@@cindex undefined section
@@item undefined section
This ``section'' is a catch-all for address references to objects not in
the preceding sections.
@@c FIXME: ref to some other doc on obj-file formats could go here.
@@end table

@@cindex relocation example
An idealized example of three relocatable sections follows.
@@ifset COFF-ELF
The example uses the traditional section names @@samp{.text} and @@samp{.data}.
@@end ifset
Memory addresses are on the horizontal axis.

@@c TEXI2ROFF-KILL
@@ifnottex
@@c END TEXI2ROFF-KILL
@@smallexample
                      +-----+----+--+
partial program # 1:  |ttttt|dddd|00|
                      +-----+----+--+

                      text   data bss
                      seg.   seg. seg.

                      +---+---+---+
partial program # 2:  |TTT|DDD|000|
                      +---+---+---+

                      +--+---+-----+--+----+---+-----+~~
linked program:       |  |TTT|ttttt|  |dddd|DDD|00000|
                      +--+---+-----+--+----+---+-----+~~

    addresses:        0 @@dots{}
@@end smallexample
@@c TEXI2ROFF-KILL
@@end ifnottex
@@need 5000
@@tex
\bigskip
\line{\it Partial program \#1: \hfil}
\line{\ibox{2.5cm}{\tt text}\ibox{2cm}{\tt data}\ibox{1cm}{\tt bss}\hfil}
\line{\boxit{2.5cm}{\tt ttttt}\boxit{2cm}{\tt dddd}\boxit{1cm}{\tt 00}\hfil}

\line{\it Partial program \#2: \hfil}
\line{\ibox{1cm}{\tt text}\ibox{1.5cm}{\tt data}\ibox{1cm}{\tt bss}\hfil}
\line{\boxit{1cm}{\tt TTT}\boxit{1.5cm}{\tt DDDD}\boxit{1cm}{\tt 000}\hfil}

\line{\it linked program: \hfil}
\line{\ibox{.5cm}{}\ibox{1cm}{\tt text}\ibox{2.5cm}{}\ibox{.75cm}{}\ibox{2cm}{\tt data}\ibox{1.5cm}{}\ibox{2cm}{\tt bss}\hfil}
\line{\boxit{.5cm}{}\boxit{1cm}{\tt TTT}\boxit{2.5cm}{\tt
ttttt}\boxit{.75cm}{}\boxit{2cm}{\tt dddd}\boxit{1.5cm}{\tt
DDDD}\boxit{2cm}{\tt 00000}\ \dots\hfil}

\line{\it addresses: \hfil}
\line{0\dots\hfil}

@@end tex
@@c END TEXI2ROFF-KILL

@@node As Sections
@@section Assembler Internal Sections

@@cindex internal assembler sections
@@cindex sections in messages, internal
These sections are meant only for the internal use of @@command{@@value{AS}}.  They
have no meaning at run-time.  You do not really need to know about these
sections for most purposes; but they can be mentioned in @@command{@@value{AS}}
warning messages, so it might be helpful to have an idea of their
meanings to @@command{@@value{AS}}.  These sections are used to permit the
value of every expression in your assembly language program to be a
section-relative address.

@@table @@b
@@cindex assembler internal logic error
@@item ASSEMBLER-INTERNAL-LOGIC-ERROR!
An internal assembler logic error has been found.  This means there is a
bug in the assembler.

@@cindex expr (internal section)
@@item expr section
The assembler stores complex expression internally as combinations of
symbols.  When it needs to represent an expression as a symbol, it puts
it in the expr section.
@@c FIXME item debug
@@c FIXME item transfer[t] vector preload
@@c FIXME item transfer[t] vector postload
@@c FIXME item register
@@end table

@@node Sub-Sections
@@section Sub-Sections

@@cindex numbered subsections
@@cindex grouping data
@@ifset aout-bout
Assembled bytes
@@ifset COFF-ELF
conventionally
@@end ifset
fall into two sections: text and data.
@@end ifset
You may have separate groups of
@@ifset GENERIC
data in named sections
@@end ifset
@@ifclear GENERIC
@@ifclear aout-bout
data in named sections
@@end ifclear
@@ifset aout-bout
text or data
@@end ifset
@@end ifclear
that you want to end up near to each other in the object file, even though they
are not contiguous in the assembler source.  @@command{@@value{AS}} allows you to
use @@dfn{subsections} for this purpose.  Within each section, there can be
numbered subsections with values from 0 to 8192.  Objects assembled into the
same subsection go into the object file together with other objects in the same
subsection.  For example, a compiler might want to store constants in the text
section, but might not want to have them interspersed with the program being
assembled.  In this case, the compiler could issue a @@samp{.text 0} before each
section of code being output, and a @@samp{.text 1} before each group of
constants being output.

Subsections are optional.  If you do not use subsections, everything
goes in subsection number zero.

@@ifset GENERIC
Each subsection is zero-padded up to a multiple of four bytes.
(Subsections may be padded a different amount on different flavors
of @@command{@@value{AS}}.)
@@end ifset
@@ifclear GENERIC
@@ifset H8
On the H8/300 and H8/500 platforms, each subsection is zero-padded to a word
boundary (two bytes).
The same is true on the Renesas SH.
@@end ifset
@@ifset I960
@@c FIXME section padding (alignment)?
@@c Rich Pixley says padding here depends on target obj code format; that
@@c doesn't seem particularly useful to say without further elaboration,
@@c so for now I say nothing about it.  If this is a generic BFD issue,
@@c these paragraphs might need to vanish from this manual, and be
@@c discussed in BFD chapter of binutils (or some such).
@@end ifset
@@ifset A29K
On the AMD 29K family, no particular padding is added to section or
subsection sizes; @@value{AS} forces no alignment on this platform.
@@end ifset
@@end ifclear

Subsections appear in your object file in numeric order, lowest numbered
to highest.  (All this to be compatible with other people's assemblers.)
The object file contains no representation of subsections; @@code{@@value{LD}} and
other programs that manipulate object files see no trace of them.
They just see all your text subsections as a text section, and all your
data subsections as a data section.

To specify which subsection you want subsequent statements assembled
into, use a numeric argument to specify it, in a @@samp{.text
@@var{expression}} or a @@samp{.data @@var{expression}} statement.
@@ifset COFF-ELF
@@ifset GENERIC
When generating COFF or ELF output, you
@@end ifset
@@ifclear GENERIC
You
@@end ifclear
can also use an extra subsection
argument with arbitrary named sections: @@samp{.section @@var{name},
@@var{expression}}.
@@end ifset
@@var{Expression} should be an absolute expression.
(@@xref{Expressions}.)  If you just say @@samp{.text} then @@samp{.text 0}
is assumed.  Likewise @@samp{.data} means @@samp{.data 0}.  Assembly
begins in @@code{text 0}.  For instance:
@@smallexample
.text 0     # The default subsection is text 0 anyway.
.ascii "This lives in the first text subsection. *"
.text 1
.ascii "But this lives in the second text subsection."
.data 0
.ascii "This lives in the data section,"
.ascii "in the first data subsection."
.text 0
.ascii "This lives in the first text section,"
.ascii "immediately following the asterisk (*)."
@@end smallexample

Each section has a @@dfn{location counter} incremented by one for every byte
assembled into that section.  Because subsections are merely a convenience
restricted to @@command{@@value{AS}} there is no concept of a subsection location
counter.  There is no way to directly manipulate a location counter---but the
@@code{.align} directive changes it, and any label definition captures its
current value.  The location counter of the section where statements are being
assembled is said to be the @@dfn{active} location counter.

@@node bss
@@section bss Section

@@cindex bss section
@@cindex common variable storage
The bss section is used for local common variable storage.
You may allocate address space in the bss section, but you may
not dictate data to load into it before your program executes.  When
your program starts running, all the contents of the bss
section are zeroed bytes.

The @@code{.lcomm} pseudo-op defines a symbol in the bss section; see
@@ref{Lcomm,,@@code{.lcomm}}.

The @@code{.comm} pseudo-op may be used to declare a common symbol, which is
another form of uninitialized symbol; see @@xref{Comm,,@@code{.comm}}.

@@ifset GENERIC
When assembling for a target which supports multiple sections, such as ELF or
COFF, you may switch into the @@code{.bss} section and define symbols as usual;
see @@ref{Section,,@@code{.section}}.  You may only assemble zero values into the
section.  Typically the section will only contain symbol definitions and
@@code{.skip} directives (@@pxref{Skip,,@@code{.skip}}).
@@end ifset

@@node Symbols
@@chapter Symbols

@@cindex symbols
Symbols are a central concept: the programmer uses symbols to name
things, the linker uses symbols to link, and the debugger uses symbols
to debug.

@@quotation
@@cindex debuggers, and symbol order
@@emph{Warning:} @@command{@@value{AS}} does not place symbols in the object file in
the same order they were declared.  This may break some debuggers.
@@end quotation

@@menu
* Labels::                      Labels
* Setting Symbols::             Giving Symbols Other Values
* Symbol Names::                Symbol Names
* Dot::                         The Special Dot Symbol
* Symbol Attributes::           Symbol Attributes
@@end menu

@@node Labels
@@section Labels

@@cindex labels
A @@dfn{label} is written as a symbol immediately followed by a colon
@@samp{:}.  The symbol then represents the current value of the
active location counter, and is, for example, a suitable instruction
operand.  You are warned if you use the same symbol to represent two
different locations: the first definition overrides any other
definitions.

@@ifset HPPA
On the HPPA, the usual form for a label need not be immediately followed by a
colon, but instead must start in column zero.  Only one label may be defined on
a single line.  To work around this, the HPPA version of @@command{@@value{AS}} also
provides a special directive @@code{.label} for defining labels more flexibly.
@@end ifset

@@node Setting Symbols
@@section Giving Symbols Other Values

@@cindex assigning values to symbols
@@cindex symbol values, assigning
A symbol can be given an arbitrary value by writing a symbol, followed
by an equals sign @@samp{=}, followed by an expression
(@@pxref{Expressions}).  This is equivalent to using the @@code{.set}
directive.  @@xref{Set,,@@code{.set}}.

@@node Symbol Names
@@section Symbol Names

@@cindex symbol names
@@cindex names, symbol
@@ifclear SPECIAL-SYMS
Symbol names begin with a letter or with one of @@samp{._}.  On most
machines, you can also use @@code{$} in symbol names; exceptions are
noted in @@ref{Machine Dependencies}.  That character may be followed by any
string of digits, letters, dollar signs (unless otherwise noted in
@@ref{Machine Dependencies}), and underscores.
@@end ifclear
@@ifset A29K
For the AMD 29K family, @@samp{?} is also allowed in the
body of a symbol name, though not at its beginning.
@@end ifset

@@ifset SPECIAL-SYMS
@@ifset H8
Symbol names begin with a letter or with one of @@samp{._}.  On the
Renesas SH or the H8/500, you can also use @@code{$} in symbol names.  That
character may be followed by any string of digits, letters, dollar signs (save
on the H8/300), and underscores.
@@end ifset
@@end ifset

Case of letters is significant: @@code{foo} is a different symbol name
than @@code{Foo}.

Each symbol has exactly one name.  Each name in an assembly language program
refers to exactly one symbol.  You may use that symbol name any number of times
in a program.

@@subheading Local Symbol Names

@@cindex local symbol names
@@cindex symbol names, local
@@cindex temporary symbol names
@@cindex symbol names, temporary
Local symbols help compilers and programmers use names temporarily.
They create symbols which are guaranteed to be unique over the entire scope of
the input source code and which can be referred to by a simple notation.
To define a local symbol, write a label of the form @@samp{@@b{N}:} (where @@b{N}
represents any positive integer).  To refer to the most recent previous
definition of that symbol write @@samp{@@b{N}b}, using the same number as when
you defined the label.  To refer to the next definition of a local label, write
@@samp{@@b{N}f}--- The @@samp{b} stands for``backwards'' and the @@samp{f} stands
for ``forwards''.

There is no restriction on how you can use these labels, and you can reuse them
too.  So that it is possible to repeatedly define the same local label (using
the same number @@samp{@@b{N}}), although you can only refer to the most recently
defined local label of that number (for a backwards reference) or the next
definition of a specific local label for a forward reference.  It is also worth
noting that the first 10 local labels (@@samp{@@b{0:}}@@dots{}@@samp{@@b{9:}}) are
implemented in a slightly more efficient manner than the others.

Here is an example:

@@smallexample
1:        branch 1f
2:        branch 1b
1:        branch 2f
2:        branch 1b
@@end smallexample

Which is the equivalent of:

@@smallexample
label_1:  branch label_3
label_2:  branch label_1
label_3:  branch label_4
label_4:  branch label_3
@@end smallexample

Local symbol names are only a notational device.  They are immediately
transformed into more conventional symbol names before the assembler uses them.
The symbol names stored in the symbol table, appearing in error messages and
optionally emitted to the object file.  The names are constructed using these
parts:

@@table @@code
@@item L
All local labels begin with @@samp{L}. Normally both @@command{@@value{AS}} and
@@code{@@value{LD}} forget symbols that start with @@samp{L}. These labels are
used for symbols you are never intended to see.  If you use the
@@samp{-L} option then @@command{@@value{AS}} retains these symbols in the
object file. If you also instruct @@code{@@value{LD}} to retain these symbols,
you may use them in debugging.

@@item @@var{number}
This is the number that was used in the local label definition.  So if the
label is written @@samp{55:} then the number is @@samp{55}. 

@@item @@kbd{C-B}
This unusual character is included so you do not accidentally invent a symbol
of the same name.  The character has ASCII value of @@samp{\002} (control-B).

@@item @@emph{ordinal number}
This is a serial number to keep the labels distinct.  The first definition of
@@samp{0:} gets the number @@samp{1}.  The 15th definition of @@samp{0:} gets the 
number @@samp{15}, and so on.  Likewise the first definition of @@samp{1:} gets
the number @@samp{1} and its 15th defintion gets @@samp{15} as well.
@@end table

So for example, the first @@code{1:} is named @@code{L1@@kbd{C-B}1}, the 44th
@@code{3:} is named @@code{L3@@kbd{C-B}44}.

@@subheading Dollar Local Labels
@@cindex dollar local symbols

@@code{@@value{AS}} also supports an even more local form of local labels called
dollar labels.  These labels go out of scope (ie they become undefined) as soon
as a non-local label is defined.  Thus they remain valid for only a small
region of the input source code.  Normal local labels, by contrast, remain in
scope for the entire file, or until they are redefined by another occurrence of
the same local label.

Dollar labels are defined in exactly the same way as ordinary local labels,
except that instead of being terminated by a colon, they are terminated by a
dollar sign.  eg @@samp{@@b{55$}}.

They can also be distinguished from ordinary local labels by their transformed
name which uses ASCII character @@samp{\001} (control-A) as the magic character
to distinguish them from ordinary labels.  Thus the 5th defintion of @@samp{6$}
is named @@samp{L6@@kbd{C-A}5}.

@@node Dot
@@section The Special Dot Symbol

@@cindex dot (symbol)
@@cindex @@code{.} (symbol)
@@cindex current address
@@cindex location counter
The special symbol @@samp{.} refers to the current address that
@@command{@@value{AS}} is assembling into.  Thus, the expression @@samp{melvin:
.long .} defines @@code{melvin} to contain its own address.
Assigning a value to @@code{.} is treated the same as a @@code{.org}
directive.  Thus, the expression @@samp{.=.+4} is the same as saying
@@ifclear no-space-dir
@@samp{.space 4}.
@@end ifclear
@@ifset no-space-dir
@@ifset A29K
@@samp{.block 4}.
@@end ifset
@@end ifset

@@node Symbol Attributes
@@section Symbol Attributes

@@cindex symbol attributes
@@cindex attributes, symbol
Every symbol has, as well as its name, the attributes ``Value'' and
``Type''.  Depending on output format, symbols can also have auxiliary
attributes.
@@ifset INTERNALS
The detailed definitions are in @@file{a.out.h}.
@@end ifset

If you use a symbol without defining it, @@command{@@value{AS}} assumes zero for
all these attributes, and probably won't warn you.  This makes the
symbol an externally defined symbol, which is generally what you
would want.

@@menu
* Symbol Value::                Value
* Symbol Type::                 Type
@@ifset aout-bout
@@ifset GENERIC
* a.out Symbols::               Symbol Attributes: @@code{a.out}
@@end ifset
@@ifclear GENERIC
@@ifclear BOUT
* a.out Symbols::               Symbol Attributes: @@code{a.out}
@@end ifclear
@@ifset BOUT
* a.out Symbols::               Symbol Attributes: @@code{a.out}, @@code{b.out}
@@end ifset
@@end ifclear
@@end ifset
@@ifset COFF
* COFF Symbols::                Symbol Attributes for COFF
@@end ifset
@@ifset SOM
* SOM Symbols::                Symbol Attributes for SOM
@@end ifset
@@end menu

@@node Symbol Value
@@subsection Value

@@cindex value of a symbol
@@cindex symbol value
The value of a symbol is (usually) 32 bits.  For a symbol which labels a
location in the text, data, bss or absolute sections the value is the
number of addresses from the start of that section to the label.
Naturally for text, data and bss sections the value of a symbol changes
as @@code{@@value{LD}} changes section base addresses during linking.  Absolute
symbols' values do not change during linking: that is why they are
called absolute.

The value of an undefined symbol is treated in a special way.  If it is
0 then the symbol is not defined in this assembler source file, and
@@code{@@value{LD}} tries to determine its value from other files linked into the
same program.  You make this kind of symbol simply by mentioning a symbol
name without defining it.  A non-zero value represents a @@code{.comm}
common declaration.  The value is how much common storage to reserve, in
bytes (addresses).  The symbol refers to the first address of the
allocated storage.

@@node Symbol Type
@@subsection Type

@@cindex type of a symbol
@@cindex symbol type
The type attribute of a symbol contains relocation (section)
information, any flag settings indicating that a symbol is external, and
(optionally), other information for linkers and debuggers.  The exact
format depends on the object-code output format in use.

@@ifset aout-bout
@@ifclear GENERIC
@@ifset BOUT
@@c The following avoids a "widow" subsection title.  @@group would be
@@c better if it were available outside examples.
@@need 1000
@@node a.out Symbols
@@subsection Symbol Attributes: @@code{a.out}, @@code{b.out}

@@cindex @@code{b.out} symbol attributes
@@cindex symbol attributes, @@code{b.out}
These symbol attributes appear only when @@command{@@value{AS}} is configured for
one of the Berkeley-descended object output formats---@@code{a.out} or
@@code{b.out}.

@@end ifset
@@ifclear BOUT
@@node a.out Symbols
@@subsection Symbol Attributes: @@code{a.out}

@@cindex @@code{a.out} symbol attributes
@@cindex symbol attributes, @@code{a.out}

@@end ifclear
@@end ifclear
@@ifset GENERIC
@@node a.out Symbols
@@subsection Symbol Attributes: @@code{a.out}

@@cindex @@code{a.out} symbol attributes
@@cindex symbol attributes, @@code{a.out}

@@end ifset
@@menu
* Symbol Desc::                 Descriptor
* Symbol Other::                Other
@@end menu

@@node Symbol Desc
@@subsubsection Descriptor

@@cindex descriptor, of @@code{a.out} symbol
This is an arbitrary 16-bit value.  You may establish a symbol's
descriptor value by using a @@code{.desc} statement
(@@pxref{Desc,,@@code{.desc}}).  A descriptor value means nothing to
@@command{@@value{AS}}.

@@node Symbol Other
@@subsubsection Other

@@cindex other attribute, of @@code{a.out} symbol
This is an arbitrary 8-bit value.  It means nothing to @@command{@@value{AS}}.
@@end ifset

@@ifset COFF
@@node COFF Symbols
@@subsection Symbol Attributes for COFF

@@cindex COFF symbol attributes
@@cindex symbol attributes, COFF

The COFF format supports a multitude of auxiliary symbol attributes;
like the primary symbol attributes, they are set between @@code{.def} and
@@code{.endef} directives.

@@subsubsection Primary Attributes

@@cindex primary attributes, COFF symbols
The symbol name is set with @@code{.def}; the value and type,
respectively, with @@code{.val} and @@code{.type}.

@@subsubsection Auxiliary Attributes

@@cindex auxiliary attributes, COFF symbols
The @@command{@@value{AS}} directives @@code{.dim}, @@code{.line}, @@code{.scl},
@@code{.size}, and @@code{.tag} can generate auxiliary symbol table
information for COFF.
@@end ifset

@@ifset SOM
@@node SOM Symbols
@@subsection Symbol Attributes for SOM

@@cindex SOM symbol attributes
@@cindex symbol attributes, SOM

The SOM format for the HPPA supports a multitude of symbol attributes set with
the @@code{.EXPORT} and @@code{.IMPORT} directives.

The attributes are described in @@cite{HP9000 Series 800 Assembly 
Language Reference Manual} (HP 92432-90001) under the @@code{IMPORT} and
@@code{EXPORT} assembler directive documentation.
@@end ifset

@@node Expressions
@@chapter Expressions

@@cindex expressions
@@cindex addresses
@@cindex numeric values
An @@dfn{expression} specifies an address or numeric value.
Whitespace may precede and/or follow an expression.

The result of an expression must be an absolute number, or else an offset into
a particular section.  If an expression is not absolute, and there is not
enough information when @@command{@@value{AS}} sees the expression to know its
section, a second pass over the source program might be necessary to interpret
the expression---but the second pass is currently not implemented.
@@command{@@value{AS}} aborts with an error message in this situation.

@@menu
* Empty Exprs::                 Empty Expressions
* Integer Exprs::               Integer Expressions
@@end menu

@@node Empty Exprs
@@section Empty Expressions

@@cindex empty expressions
@@cindex expressions, empty
An empty expression has no value: it is just whitespace or null.
Wherever an absolute expression is required, you may omit the
expression, and @@command{@@value{AS}} assumes a value of (absolute) 0.  This
is compatible with other assemblers.

@@node Integer Exprs
@@section Integer Expressions

@@cindex integer expressions
@@cindex expressions, integer
An @@dfn{integer expression} is one or more @@emph{arguments} delimited
by @@emph{operators}.

@@menu
* Arguments::                   Arguments
* Operators::                   Operators
* Prefix Ops::                  Prefix Operators
* Infix Ops::                   Infix Operators
@@end menu

@@node Arguments
@@subsection Arguments

@@cindex expression arguments
@@cindex arguments in expressions
@@cindex operands in expressions
@@cindex arithmetic operands
@@dfn{Arguments} are symbols, numbers or subexpressions.  In other
contexts arguments are sometimes called ``arithmetic operands''.  In
this manual, to avoid confusing them with the ``instruction operands'' of
the machine language, we use the term ``argument'' to refer to parts of
expressions only, reserving the word ``operand'' to refer only to machine
instruction operands.

Symbols are evaluated to yield @@{@@var{section} @@var{NNN}@@} where
@@var{section} is one of text, data, bss, absolute,
or undefined.  @@var{NNN} is a signed, 2's complement 32 bit
integer.

Numbers are usually integers.

A number can be a flonum or bignum.  In this case, you are warned
that only the low order 32 bits are used, and @@command{@@value{AS}} pretends
these 32 bits are an integer.  You may write integer-manipulating
instructions that act on exotic constants, compatible with other
assemblers.

@@cindex subexpressions
Subexpressions are a left parenthesis @@samp{(} followed by an integer
expression, followed by a right parenthesis @@samp{)}; or a prefix
operator followed by an argument.

@@node Operators
@@subsection Operators

@@cindex operators, in expressions
@@cindex arithmetic functions
@@cindex functions, in expressions
@@dfn{Operators} are arithmetic functions, like @@code{+} or @@code{%}.  Prefix
operators are followed by an argument.  Infix operators appear
between their arguments.  Operators may be preceded and/or followed by
whitespace.

@@node Prefix Ops
@@subsection Prefix Operator

@@cindex prefix operators
@@command{@@value{AS}} has the following @@dfn{prefix operators}.  They each take
one argument, which must be absolute.

@@c the tex/end tex stuff surrounding this small table is meant to make
@@c it align, on the printed page, with the similar table in the next
@@c section (which is inside an enumerate).
@@tex
\global\advance\leftskip by \itemindent
@@end tex

@@table @@code
@@item -
@@dfn{Negation}.  Two's complement negation.
@@item ~
@@dfn{Complementation}.  Bitwise not.
@@end table

@@tex
\global\advance\leftskip by -\itemindent
@@end tex

@@node Infix Ops
@@subsection Infix Operators

@@cindex infix operators
@@cindex operators, permitted arguments
@@dfn{Infix operators} take two arguments, one on either side.  Operators
have precedence, but operations with equal precedence are performed left
to right.  Apart from @@code{+} or @@option{-}, both arguments must be
absolute, and the result is absolute.

@@enumerate
@@cindex operator precedence
@@cindex precedence of operators

@@item
Highest Precedence

@@table @@code
@@item *
@@dfn{Multiplication}.

@@item /
@@dfn{Division}.  Truncation is the same as the C operator @@samp{/}

@@item %
@@dfn{Remainder}.

@@item <
@@itemx <<
@@dfn{Shift Left}.  Same as the C operator @@samp{<<}.

@@item >
@@itemx >>
@@dfn{Shift Right}.  Same as the C operator @@samp{>>}.
@@end table

@@item
Intermediate precedence

@@table @@code
@@item |

@@dfn{Bitwise Inclusive Or}.

@@item &
@@dfn{Bitwise And}.

@@item ^
@@dfn{Bitwise Exclusive Or}.

@@item !
@@dfn{Bitwise Or Not}.
@@end table

@@item
Low Precedence

@@table @@code
@@cindex addition, permitted arguments
@@cindex plus, permitted arguments
@@cindex arguments for addition
@@item +
@@dfn{Addition}.  If either argument is absolute, the result has the section of
the other argument.  You may not add together arguments from different
sections.

@@cindex subtraction, permitted arguments
@@cindex minus, permitted arguments
@@cindex arguments for subtraction
@@item -
@@dfn{Subtraction}.  If the right argument is absolute, the
result has the section of the left argument.
If both arguments are in the same section, the result is absolute.
You may not subtract arguments from different sections.
@@c FIXME is there still something useful to say about undefined - undefined ?

@@cindex comparison expressions
@@cindex expressions, comparison
@@item  ==
@@dfn{Is Equal To}
@@item <>
@@dfn{Is Not Equal To}
@@item <
@@dfn{Is Less Than}
@@itemx >
@@dfn{Is Greater Than}
@@itemx >=
@@dfn{Is Greater Than Or Equal To}
@@itemx <=
@@dfn{Is Less Than Or Equal To}

The comparison operators can be used as infix operators.  A true results has a
value of -1 whereas a false result has a value of 0.   Note, these operators
perform signed comparisons.
@@end table

@@item Lowest Precedence

@@table @@code
@@item &&
@@dfn{Logical And}.

@@item ||
@@dfn{Logical Or}.

These two logical operations can be used to combine the results of sub
expressions.  Note, unlike the comparison operators a true result returns a
value of 1 but a false results does still return 0.  Also note that the logical
or operator has a slightly lower precedence than logical and.

@@end table
@@end enumerate

In short, it's only meaningful to add or subtract the @@emph{offsets} in an
address; you can only have a defined section in one of the two arguments.

@@node Pseudo Ops
@@chapter Assembler Directives

@@cindex directives, machine independent
@@cindex pseudo-ops, machine independent
@@cindex machine independent directives
All assembler directives have names that begin with a period (@@samp{.}).
The rest of the name is letters, usually in lower case.

This chapter discusses directives that are available regardless of the
target machine configuration for the @@sc{gnu} assembler.
@@ifset GENERIC
Some machine configurations provide additional directives.
@@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset machine-directives
@@xref{Machine Dependencies} for additional directives.
@@end ifset
@@end ifclear

@@menu
* Abort::                       @@code{.abort}
@@ifset COFF
* ABORT::                       @@code{.ABORT}
@@end ifset

* Align::                       @@code{.align @@var{abs-expr} , @@var{abs-expr}}
* Ascii::                       @@code{.ascii "@@var{string}"}@@dots{}
* Asciz::                       @@code{.asciz "@@var{string}"}@@dots{}
* Balign::                      @@code{.balign @@var{abs-expr} , @@var{abs-expr}}
* Byte::                        @@code{.byte @@var{expressions}}
* Comm::                        @@code{.comm @@var{symbol} , @@var{length} }

* CFI directives::		@@code{.cfi_startproc}, @@code{.cfi_endproc}, etc.

* Data::                        @@code{.data @@var{subsection}}
@@ifset COFF
* Def::                         @@code{.def @@var{name}}
@@end ifset
@@ifset aout-bout
* Desc::                        @@code{.desc @@var{symbol}, @@var{abs-expression}}
@@end ifset
@@ifset COFF
* Dim::                         @@code{.dim}
@@end ifset

* Double::                      @@code{.double @@var{flonums}}
* Eject::                       @@code{.eject}
* Else::                        @@code{.else}
* Elseif::                      @@code{.elseif}
* End::				@@code{.end}
@@ifset COFF
* Endef::                       @@code{.endef}
@@end ifset

* Endfunc::                     @@code{.endfunc}
* Endif::                       @@code{.endif}
* Equ::                         @@code{.equ @@var{symbol}, @@var{expression}}
* Equiv::                       @@code{.equiv @@var{symbol}, @@var{expression}}
* Err::				@@code{.err}
* Exitm::			@@code{.exitm}
* Extern::                      @@code{.extern}
* Fail::			@@code{.fail}
@@ifclear no-file-dir
* File::                        @@code{.file @@var{string}}
@@end ifclear

* Fill::                        @@code{.fill @@var{repeat} , @@var{size} , @@var{value}}
* Float::                       @@code{.float @@var{flonums}}
* Func::                        @@code{.func}  
* Global::                      @@code{.global @@var{symbol}}, @@code{.globl @@var{symbol}}
@@ifset ELF
* Hidden::                      @@code{.hidden @@var{names}}
@@end ifset

* hword::                       @@code{.hword @@var{expressions}}
* Ident::                       @@code{.ident}
* If::                          @@code{.if @@var{absolute expression}}
* Incbin::                      @@code{.incbin "@@var{file}"[,@@var{skip}[,@@var{count}]]}
* Include::                     @@code{.include "@@var{file}"}
* Int::                         @@code{.int @@var{expressions}}
@@ifset ELF
* Internal::                    @@code{.internal @@var{names}}
@@end ifset

* Irp::				@@code{.irp @@var{symbol},@@var{values}}@@dots{}
* Irpc::			@@code{.irpc @@var{symbol},@@var{values}}@@dots{}
* Lcomm::                       @@code{.lcomm @@var{symbol} , @@var{length}}
* Lflags::                      @@code{.lflags}
@@ifclear no-line-dir
* Line::                        @@code{.line @@var{line-number}}
@@end ifclear

* Linkonce::			@@code{.linkonce [@@var{type}]}
* List::                        @@code{.list}
* Ln::                          @@code{.ln @@var{line-number}}

* LNS directives::              @@code{.file}, @@code{.loc}, etc.

* Long::                        @@code{.long @@var{expressions}}
@@ignore
* Lsym::                        @@code{.lsym @@var{symbol}, @@var{expression}}
@@end ignore

* Macro::			@@code{.macro @@var{name} @@var{args}}@@dots{}
* MRI::				@@code{.mri @@var{val}}
* Nolist::                      @@code{.nolist}
* Octa::                        @@code{.octa @@var{bignums}}
* Org::                         @@code{.org @@var{new-lc} , @@var{fill}}
* P2align::                     @@code{.p2align @@var{abs-expr} , @@var{abs-expr}}
@@ifset ELF
* PopSection::                  @@code{.popsection}
* Previous::                    @@code{.previous}
@@end ifset

* Print::			@@code{.print @@var{string}}
@@ifset ELF
* Protected::                   @@code{.protected @@var{names}}
@@end ifset

* Psize::                       @@code{.psize @@var{lines}, @@var{columns}}
* Purgem::			@@code{.purgem @@var{name}}
@@ifset ELF
* PushSection::                 @@code{.pushsection @@var{name}}
@@end ifset

* Quad::                        @@code{.quad @@var{bignums}}
* Rept::			@@code{.rept @@var{count}}
* Sbttl::                       @@code{.sbttl "@@var{subheading}"}
@@ifset COFF
* Scl::                         @@code{.scl @@var{class}}
@@end ifset
@@ifset COFF-ELF
* Section::                     @@code{.section @@var{name}}
@@end ifset

* Set::                         @@code{.set @@var{symbol}, @@var{expression}}
* Short::                       @@code{.short @@var{expressions}}
* Single::                      @@code{.single @@var{flonums}}
@@ifset COFF-ELF
* Size::                        @@code{.size [@@var{name} , @@var{expression}]}
@@end ifset

* Skip::                        @@code{.skip @@var{size} , @@var{fill}}
* Sleb128::			@@code{.sleb128 @@var{expressions}}
* Space::                       @@code{.space @@var{size} , @@var{fill}}
@@ifset have-stabs
* Stab::                        @@code{.stabd, .stabn, .stabs}
@@end ifset

* String::                      @@code{.string "@@var{str}"}
* Struct::			@@code{.struct @@var{expression}}
@@ifset ELF
* SubSection::                  @@code{.subsection}
* Symver::                      @@code{.symver @@var{name},@@var{name2@@@@nodename}}
@@end ifset

@@ifset COFF
* Tag::                         @@code{.tag @@var{structname}}
@@end ifset

* Text::                        @@code{.text @@var{subsection}}
* Title::                       @@code{.title "@@var{heading}"}
@@ifset COFF-ELF
* Type::                        @@code{.type <@@var{int} | @@var{name} , @@var{type description}>}
@@end ifset

* Uleb128::                     @@code{.uleb128 @@var{expressions}}
@@ifset COFF
* Val::                         @@code{.val @@var{addr}}
@@end ifset

@@ifset ELF
* Version::                     @@code{.version "@@var{string}"}
* VTableEntry::                 @@code{.vtable_entry @@var{table}, @@var{offset}}
* VTableInherit::               @@code{.vtable_inherit @@var{child}, @@var{parent}}
* Weak::                        @@code{.weak @@var{names}}
@@end ifset

* Word::                        @@code{.word @@var{expressions}}
* Deprecated::                  Deprecated Directives
@@end menu

@@node Abort
@@section @@code{.abort}

@@cindex @@code{abort} directive
@@cindex stopping the assembly
This directive stops the assembly immediately.  It is for
compatibility with other assemblers.  The original idea was that the
assembly language source would be piped into the assembler.  If the sender
of the source quit, it could use this directive tells @@command{@@value{AS}} to
quit also.  One day @@code{.abort} will not be supported.

@@ifset COFF
@@node ABORT
@@section @@code{.ABORT}

@@cindex @@code{ABORT} directive
When producing COFF output, @@command{@@value{AS}} accepts this directive as a
synonym for @@samp{.abort}.

@@ifset BOUT
When producing @@code{b.out} output, @@command{@@value{AS}} accepts this directive,
but ignores it.
@@end ifset
@@end ifset

@@node Align
@@section @@code{.align @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}

@@cindex padding the location counter
@@cindex @@code{align} directive
Pad the location counter (in the current subsection) to a particular storage
boundary.  The first expression (which must be absolute) is the alignment
required, as described below.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

The way the required alignment is specified varies from system to system.
For the a29k, arc, hppa, i386 using ELF, i860, iq2000, m68k, m88k, or32,
s390, sparc, tic4x, tic80 and xtensa, the first expression is the
alignment request in bytes.  For example @@samp{.align 8} advances
the location counter until it is a multiple of 8.  If the location counter
is already a multiple of 8, no change is needed.  For the tic54x, the
first expression is the alignment request in words.

For other systems, including the i386 using a.out format, and the arm and
strongarm, it is the
number of low-order zero bits the location counter must have after
advancement.  For example @@samp{.align 3} advances the location
counter until it a multiple of 8.  If the location counter is already a
multiple of 8, no change is needed.

This inconsistency is due to the different behaviors of the various
native assemblers for these systems which GAS must emulate.
GAS also provides @@code{.balign} and @@code{.p2align} directives,
described later, which have a consistent behavior across all
architectures (but are specific to GAS).

@@node Ascii
@@section @@code{.ascii "@@var{string}"}@@dots{}

@@cindex @@code{ascii} directive
@@cindex string literals
@@code{.ascii} expects zero or more string literals (@@pxref{Strings})
separated by commas.  It assembles each string (with no automatic
trailing zero byte) into consecutive addresses.

@@node Asciz
@@section @@code{.asciz "@@var{string}"}@@dots{}

@@cindex @@code{asciz} directive
@@cindex zero-terminated strings
@@cindex null-terminated strings
@@code{.asciz} is just like @@code{.ascii}, but each string is followed by
a zero byte.  The ``z'' in @@samp{.asciz} stands for ``zero''.

@@node Balign
@@section @@code{.balign[wl] @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}

@@cindex padding the location counter given number of bytes
@@cindex @@code{balign} directive
Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
alignment request in bytes.  For example @@samp{.balign 8} advances
the location counter until it is a multiple of 8.  If the location counter
is already a multiple of 8, no change is needed.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

@@cindex @@code{balignw} directive
@@cindex @@code{balignl} directive
The @@code{.balignw} and @@code{.balignl} directives are variants of the
@@code{.balign} directive.  The @@code{.balignw} directive treats the fill
pattern as a two byte word value.  The @@code{.balignl} directives treats the
fill pattern as a four byte longword value.  For example, @@code{.balignw
4,0x368d} will align to a multiple of 4.  If it skips two bytes, they will be
filled in with the value 0x368d (the exact placement of the bytes depends upon
the endianness of the processor).  If it skips 1 or 3 bytes, the fill value is
undefined.

@@node Byte
@@section @@code{.byte @@var{expressions}}

@@cindex @@code{byte} directive
@@cindex integers, one byte
@@code{.byte} expects zero or more expressions, separated by commas.
Each expression is assembled into the next byte.

@@node Comm
@@section @@code{.comm @@var{symbol} , @@var{length} }

@@cindex @@code{comm} directive
@@cindex symbol, common
@@code{.comm} declares a common symbol named @@var{symbol}.  When linking, a
common symbol in one object file may be merged with a defined or common symbol
of the same name in another object file.  If @@code{@@value{LD}} does not see a
definition for the symbol--just one or more common symbols--then it will
allocate @@var{length} bytes of uninitialized memory.  @@var{length} must be an
absolute expression.  If @@code{@@value{LD}} sees multiple common symbols with
the same name, and they do not all have the same size, it will allocate space
using the largest size.

@@ifset ELF
When using ELF, the @@code{.comm} directive takes an optional third argument.
This is the desired alignment of the symbol, specified as a byte boundary (for
example, an alignment of 16 means that the least significant 4 bits of the
address should be zero).  The alignment must be an absolute expression, and it
must be a power of two.  If @@code{@@value{LD}} allocates uninitialized memory
for the common symbol, it will use the alignment when placing the symbol.  If
no alignment is specified, @@command{@@value{AS}} will set the alignment to the
largest power of two less than or equal to the size of the symbol, up to a
maximum of 16.
@@end ifset

@@ifset HPPA
The syntax for @@code{.comm} differs slightly on the HPPA.  The syntax is
@@samp{@@var{symbol} .comm, @@var{length}}; @@var{symbol} is optional.
@@end ifset

@@node CFI directives
@@section @@code{.cfi_startproc}
@@cindex @@code{cfi_startproc} directive
@@code{.cfi_startproc} is used at the beginning of each function that
should have an entry in @@code{.eh_frame}. It initializes some internal
data structures and emits architecture dependent initial CFI instructions.
Don't forget to close the function by 
@@code{.cfi_endproc}.

@@section @@code{.cfi_endproc}
@@cindex @@code{cfi_endproc} directive
@@code{.cfi_endproc} is used at the end of a function where it closes its
unwind entry previously opened by
@@code{.cfi_startproc}. and emits it to @@code{.eh_frame}.

@@section @@code{.cfi_def_cfa @@var{register}, @@var{offset}}
@@code{.cfi_def_cfa} defines a rule for computing CFA as: @@i{take 
address from @@var{register} and add @@var{offset} to it}.

@@section @@code{.cfi_def_cfa_register @@var{register}}
@@code{.cfi_def_cfa_register} modifies a rule for computing CFA. From
now on @@var{register} will be used instead of the old one. Offset
remains the same.

@@section @@code{.cfi_def_cfa_offset @@var{offset}}
@@code{.cfi_def_cfa_offset} modifies a rule for computing CFA. Register
remains the same, but @@var{offset} is new. Note that it is the
absolute offset that will be added to a defined register to compute
CFA address.

@@section @@code{.cfi_adjust_cfa_offset @@var{offset}}
Same as @@code{.cfi_def_cfa_offset} but @@var{offset} is a relative
value that is added/substracted from the previous offset.

@@section @@code{.cfi_offset @@var{register}, @@var{offset}}
Previous value of @@var{register} is saved at offset @@var{offset} from
CFA. 

@@section @@code{.cfi_rel_offset @@var{register}, @@var{offset}}
Previous value of @@var{register} is saved at offset @@var{offset} from
the current CFA register.  This is transformed to @@code{.cfi_offset}
using the known displacement of the CFA register from the CFA.
This is often easier to use, because the number will match the
code it's annotating.

@@section @@code{.cfi_window_save}
SPARC register window has been saved.

@@section @@code{.cfi_escape} @@var{expression}[, @@dots{}]
Allows the user to add arbitrary bytes to the unwind info.  One
might use this to add OS-specific CFI opcodes, or generic CFI
opcodes that GAS does not yet support.

@@node LNS directives
@@section @@code{.file @@var{fileno} @@var{filename}}
@@cindex @@code{file} directive
When emitting dwarf2 line number information @@code{.file} assigns filenames
to the @@code{.debug_line} file name table.  The @@var{fileno} operand should
be a unique positive integer to use as the index of the entry in the table.
The @@var{filename} operand is a C string literal.

The detail of filename indicies is exposed to the user because the filename
table is shared with the @@code{.debug_info} section of the dwarf2 debugging
information, and thus the user must know the exact indicies that table
entries will have.

@@section @@code{.loc @@var{fileno} @@var{lineno} [@@var{column}] [@@var{options}]}
@@cindex @@code{loc} directive
The @@code{.loc} directive will add row to the @@code{.debug_line} line
number matrix corresponding to the immediately following assembly
instruction.  The @@var{fileno}, @@var{lineno}, and optional @@var{column}
arguments will be applied to the @@code{.debug_line} state machine before
the row is added.

The @@var{options} are a sequence of the following tokens in any order:

@@table @@code
@@item basic_block
This option will set the @@code{basic_block} register in the
@@code{.debug_line} state machine to @@code{true}.

@@item prologue_end
This option will set the @@code{prologue_end} register in the
@@code{.debug_line} state machine to @@code{true}.

@@item epilogue_begin
This option will set the @@code{epilogue_begin} register in the
@@code{.debug_line} state machine to @@code{true}.

@@item is_stmt @@var{value}
This option will set the @@code{is_stmt} register in the
@@code{.debug_line} state machine to @@code{value}, which must be 
either 0 or 1.

@@item isa @@var{value}
This directive will set the @@code{isa} register in the @@code{.debug_line}
state machine to @@var{value}, which must be an unsigned integer.
@@end table

@@node Data
@@section @@code{.data @@var{subsection}}

@@cindex @@code{data} directive
@@code{.data} tells @@command{@@value{AS}} to assemble the following statements onto the
end of the data subsection numbered @@var{subsection} (which is an
absolute expression).  If @@var{subsection} is omitted, it defaults
to zero.

@@ifset COFF
@@node Def
@@section @@code{.def @@var{name}}

@@cindex @@code{def} directive
@@cindex COFF symbols, debugging
@@cindex debugging COFF symbols
Begin defining debugging information for a symbol @@var{name}; the
definition extends until the @@code{.endef} directive is encountered.
@@ifset BOUT

This directive is only observed when @@command{@@value{AS}} is configured for COFF
format output; when producing @@code{b.out}, @@samp{.def} is recognized,
but ignored.
@@end ifset
@@end ifset

@@ifset aout-bout
@@node Desc
@@section @@code{.desc @@var{symbol}, @@var{abs-expression}}

@@cindex @@code{desc} directive
@@cindex COFF symbol descriptor
@@cindex symbol descriptor, COFF
This directive sets the descriptor of the symbol (@@pxref{Symbol Attributes})
to the low 16 bits of an absolute expression.

@@ifset COFF
The @@samp{.desc} directive is not available when @@command{@@value{AS}} is
configured for COFF output; it is only for @@code{a.out} or @@code{b.out}
object format.  For the sake of compatibility, @@command{@@value{AS}} accepts
it, but produces no output, when configured for COFF.
@@end ifset
@@end ifset

@@ifset COFF
@@node Dim
@@section @@code{.dim}

@@cindex @@code{dim} directive
@@cindex COFF auxiliary symbol information
@@cindex auxiliary symbol information, COFF
This directive is generated by compilers to include auxiliary debugging
information in the symbol table.  It is only permitted inside
@@code{.def}/@@code{.endef} pairs.
@@ifset BOUT

@@samp{.dim} is only meaningful when generating COFF format output; when
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
ignores it.
@@end ifset
@@end ifset

@@node Double
@@section @@code{.double @@var{flonums}}

@@cindex @@code{double} directive
@@cindex floating point numbers (double)
@@code{.double} expects zero or more flonums, separated by commas.  It
assembles floating point numbers.
@@ifset GENERIC
The exact kind of floating point numbers emitted depends on how
@@command{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset IEEEFLOAT
On the @@value{TARGET} family @@samp{.double} emits 64-bit floating-point numbers
in @@sc{ieee} format.
@@end ifset
@@end ifclear

@@node Eject
@@section @@code{.eject}

@@cindex @@code{eject} directive
@@cindex new page, in listings
@@cindex page, in listings
@@cindex listing control: new page
Force a page break at this point, when generating assembly listings.

@@node Else
@@section @@code{.else}

@@cindex @@code{else} directive
@@code{.else} is part of the @@command{@@value{AS}} support for conditional
assembly; @@pxref{If,,@@code{.if}}.  It marks the beginning of a section
of code to be assembled if the condition for the preceding @@code{.if}
was false.

@@node Elseif
@@section @@code{.elseif}

@@cindex @@code{elseif} directive
@@code{.elseif} is part of the @@command{@@value{AS}} support for conditional
assembly; @@pxref{If,,@@code{.if}}.  It is shorthand for beginning a new
@@code{.if} block that would otherwise fill the entire @@code{.else} section.

@@node End
@@section @@code{.end}

@@cindex @@code{end} directive
@@code{.end} marks the end of the assembly file.  @@command{@@value{AS}} does not
process anything in the file past the @@code{.end} directive.

@@ifset COFF
@@node Endef
@@section @@code{.endef}

@@cindex @@code{endef} directive
This directive flags the end of a symbol definition begun with
@@code{.def}.
@@ifset BOUT

@@samp{.endef} is only meaningful when generating COFF format output; if
@@command{@@value{AS}} is configured to generate @@code{b.out}, it accepts this
directive but ignores it.
@@end ifset
@@end ifset

@@node Endfunc
@@section @@code{.endfunc}
@@cindex @@code{endfunc} directive
@@code{.endfunc} marks the end of a function specified with @@code{.func}.

@@node Endif
@@section @@code{.endif}

@@cindex @@code{endif} directive
@@code{.endif} is part of the @@command{@@value{AS}} support for conditional assembly;
it marks the end of a block of code that is only assembled
conditionally.  @@xref{If,,@@code{.if}}.

@@node Equ
@@section @@code{.equ @@var{symbol}, @@var{expression}}

@@cindex @@code{equ} directive
@@cindex assigning values to symbols
@@cindex symbols, assigning values to
This directive sets the value of @@var{symbol} to @@var{expression}.
It is synonymous with @@samp{.set}; @@pxref{Set,,@@code{.set}}.

@@ifset HPPA
The syntax for @@code{equ} on the HPPA is 
@@samp{@@var{symbol} .equ @@var{expression}}.
@@end ifset

@@node Equiv
@@section @@code{.equiv @@var{symbol}, @@var{expression}}
@@cindex @@code{equiv} directive
The @@code{.equiv} directive is like @@code{.equ} and @@code{.set}, except that
the assembler will signal an error if @@var{symbol} is already defined.  Note a
symbol which has been referenced but not actually defined is considered to be
undefined.

Except for the contents of the error message, this is roughly equivalent to 
@@smallexample
.ifdef SYM
.err
.endif
.equ SYM,VAL
@@end smallexample

@@node Err
@@section @@code{.err}
@@cindex @@code{err} directive
If @@command{@@value{AS}} assembles a @@code{.err} directive, it will print an error
message and, unless the @@option{-Z} option was used, it will not generate an
object file.  This can be used to signal error an conditionally compiled code.

@@node Exitm
@@section @@code{.exitm}
Exit early from the current macro definition.  @@xref{Macro}.

@@node Extern
@@section @@code{.extern}

@@cindex @@code{extern} directive
@@code{.extern} is accepted in the source program---for compatibility
with other assemblers---but it is ignored.  @@command{@@value{AS}} treats
all undefined symbols as external.

@@node Fail
@@section @@code{.fail @@var{expression}}

@@cindex @@code{fail} directive
Generates an error or a warning.  If the value of the @@var{expression} is 500
or more, @@command{@@value{AS}} will print a warning message.  If the value is less
than 500, @@command{@@value{AS}} will print an error message.  The message will
include the value of @@var{expression}.  This can occasionally be useful inside
complex nested macros or conditional assembly.

@@ifclear no-file-dir
@@node File
@@section @@code{.file @@var{string}}

@@cindex @@code{file} directive
@@cindex logical file name
@@cindex file name, logical
@@code{.file} tells @@command{@@value{AS}} that we are about to start a new logical
file.  @@var{string} is the new file name.  In general, the filename is
recognized whether or not it is surrounded by quotes @@samp{"}; but if you wish
to specify an empty file name, you must give the quotes--@@code{""}.  This
statement may go away in future: it is only recognized to be compatible with
old @@command{@@value{AS}} programs.
@@ifset A29K
In some configurations of @@command{@@value{AS}}, @@code{.file} has already been
removed to avoid conflicts with other assemblers.  @@xref{Machine Dependencies}.
@@end ifset
@@end ifclear

@@node Fill
@@section @@code{.fill @@var{repeat} , @@var{size} , @@var{value}}

@@cindex @@code{fill} directive
@@cindex writing patterns in memory
@@cindex patterns, writing in memory
@@var{repeat}, @@var{size} and @@var{value} are absolute expressions.
This emits @@var{repeat} copies of @@var{size} bytes.  @@var{Repeat}
may be zero or more.  @@var{Size} may be zero or more, but if it is
more than 8, then it is deemed to have the value 8, compatible with
other people's assemblers.  The contents of each @@var{repeat} bytes
is taken from an 8-byte number.  The highest order 4 bytes are
zero.  The lowest order 4 bytes are @@var{value} rendered in the
byte-order of an integer on the computer @@command{@@value{AS}} is assembling for.
Each @@var{size} bytes in a repetition is taken from the lowest order
@@var{size} bytes of this number.  Again, this bizarre behavior is
compatible with other people's assemblers.

@@var{size} and @@var{value} are optional.
If the second comma and @@var{value} are absent, @@var{value} is
assumed zero.  If the first comma and following tokens are absent,
@@var{size} is assumed to be 1.

@@node Float
@@section @@code{.float @@var{flonums}}

@@cindex floating point numbers (single)
@@cindex @@code{float} directive
This directive assembles zero or more flonums, separated by commas.  It
has the same effect as @@code{.single}.
@@ifset GENERIC
The exact kind of floating point numbers emitted depends on how
@@command{@@value{AS}} is configured.
@@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset IEEEFLOAT
On the @@value{TARGET} family, @@code{.float} emits 32-bit floating point numbers
in @@sc{ieee} format.
@@end ifset
@@end ifclear

@@node Func
@@section @@code{.func @@var{name}[,@@var{label}]}
@@cindex @@code{func} directive
@@code{.func} emits debugging information to denote function @@var{name}, and
is ignored unless the file is assembled with debugging enabled.
Only @@samp{--gstabs[+]} is currently supported.
@@var{label} is the entry point of the function and if omitted @@var{name}
prepended with the @@samp{leading char} is used.
@@samp{leading char} is usually @@code{_} or nothing, depending on the target.
All functions are currently defined to have @@code{void} return type.
The function must be terminated with @@code{.endfunc}.

@@node Global
@@section @@code{.global @@var{symbol}}, @@code{.globl @@var{symbol}}

@@cindex @@code{global} directive
@@cindex symbol, making visible to linker
@@code{.global} makes the symbol visible to @@code{@@value{LD}}.  If you define
@@var{symbol} in your partial program, its value is made available to
other partial programs that are linked with it.  Otherwise,
@@var{symbol} takes its attributes from a symbol of the same name
from another file linked into the same program.

Both spellings (@@samp{.globl} and @@samp{.global}) are accepted, for
compatibility with other assemblers.

@@ifset HPPA
On the HPPA, @@code{.global} is not always enough to make it accessible to other
partial programs.  You may need the HPPA-only @@code{.EXPORT} directive as well.
@@xref{HPPA Directives,, HPPA Assembler Directives}.
@@end ifset

@@ifset ELF
@@node Hidden
@@section @@code{.hidden @@var{names}}

@@cindex @@code{hidden} directive
@@cindex visibility
This one of the ELF visibility directives.  The other two are
@@code{.internal} (@@pxref{Internal,,@@code{.internal}}) and 
@@code{.protected} (@@pxref{Protected,,@@code{.protected}}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{hidden} which means that the symbols are not visible to other components.
Such symbols are always considered to be @@code{protected} as well. 
@@end ifset

@@node hword
@@section @@code{.hword @@var{expressions}}

@@cindex @@code{hword} directive
@@cindex integers, 16-bit
@@cindex numbers, 16-bit
@@cindex sixteen bit integers
This expects zero or more @@var{expressions}, and emits
a 16 bit number for each.

@@ifset GENERIC
This directive is a synonym for @@samp{.short}; depending on the target
architecture, it may also be a synonym for @@samp{.word}.
@@end ifset
@@ifclear GENERIC
@@ifset W32
This directive is a synonym for @@samp{.short}.
@@end ifset
@@ifset W16
This directive is a synonym for both @@samp{.short} and @@samp{.word}.
@@end ifset
@@end ifclear

@@node Ident
@@section @@code{.ident}

@@cindex @@code{ident} directive
This directive is used by some assemblers to place tags in object files.
@@command{@@value{AS}} simply accepts the directive for source-file
compatibility with such assemblers, but does not actually emit anything
for it.

@@node If
@@section @@code{.if @@var{absolute expression}}

@@cindex conditional assembly
@@cindex @@code{if} directive
@@code{.if} marks the beginning of a section of code which is only
considered part of the source program being assembled if the argument
(which must be an @@var{absolute expression}) is non-zero.  The end of
the conditional section of code must be marked by @@code{.endif}
(@@pxref{Endif,,@@code{.endif}}); optionally, you may include code for the
alternative condition, flagged by @@code{.else} (@@pxref{Else,,@@code{.else}}).
If you have several conditions to check, @@code{.elseif} may be used to avoid
nesting blocks if/else within each subsequent @@code{.else} block.

The following variants of @@code{.if} are also supported:
@@table @@code
@@cindex @@code{ifdef} directive
@@item .ifdef @@var{symbol}
Assembles the following section of code if the specified @@var{symbol}
has been defined.  Note a symbol which has been referenced but not yet defined
is considered to be undefined.

@@cindex @@code{ifc} directive
@@item .ifc @@var{string1},@@var{string2}
Assembles the following section of code if the two strings are the same.  The
strings may be optionally quoted with single quotes.  If they are not quoted,
the first string stops at the first comma, and the second string stops at the
end of the line.  Strings which contain whitespace should be quoted.  The
string comparison is case sensitive.

@@cindex @@code{ifeq} directive
@@item .ifeq @@var{absolute expression}
Assembles the following section of code if the argument is zero.

@@cindex @@code{ifeqs} directive
@@item .ifeqs @@var{string1},@@var{string2}
Another form of @@code{.ifc}.  The strings must be quoted using double quotes.

@@cindex @@code{ifge} directive
@@item .ifge @@var{absolute expression}
Assembles the following section of code if the argument is greater than or
equal to zero.

@@cindex @@code{ifgt} directive
@@item .ifgt @@var{absolute expression}
Assembles the following section of code if the argument is greater than zero.

@@cindex @@code{ifle} directive
@@item .ifle @@var{absolute expression}
Assembles the following section of code if the argument is less than or equal
to zero.

@@cindex @@code{iflt} directive
@@item .iflt @@var{absolute expression}
Assembles the following section of code if the argument is less than zero.

@@cindex @@code{ifnc} directive
@@item .ifnc @@var{string1},@@var{string2}.
Like @@code{.ifc}, but the sense of the test is reversed: this assembles the
following section of code if the two strings are not the same.

@@cindex @@code{ifndef} directive
@@cindex @@code{ifnotdef} directive
@@item .ifndef @@var{symbol}
@@itemx .ifnotdef @@var{symbol}
Assembles the following section of code if the specified @@var{symbol}
has not been defined.  Both spelling variants are equivalent.  Note a symbol
which has been referenced but not yet defined is considered to be undefined.

@@cindex @@code{ifne} directive
@@item .ifne @@var{absolute expression}
Assembles the following section of code if the argument is not equal to zero
(in other words, this is equivalent to @@code{.if}).

@@cindex @@code{ifnes} directive
@@item .ifnes @@var{string1},@@var{string2}
Like @@code{.ifeqs}, but the sense of the test is reversed: this assembles the
following section of code if the two strings are not the same.
@@end table

@@node Incbin
@@section @@code{.incbin "@@var{file}"[,@@var{skip}[,@@var{count}]]}

@@cindex @@code{incbin} directive
@@cindex binary files, including
The @@code{incbin} directive includes @@var{file} verbatim at the current
location. You can control the search paths used with the @@samp{-I} command-line
option (@@pxref{Invoking,,Command-Line Options}).  Quotation marks are required
around @@var{file}.

The @@var{skip} argument skips a number of bytes from the start of the
@@var{file}.  The @@var{count} argument indicates the maximum number of bytes to
read.  Note that the data is not aligned in any way, so it is the user's
responsibility to make sure that proper alignment is provided both before and
after the @@code{incbin} directive.

@@node Include
@@section @@code{.include "@@var{file}"}

@@cindex @@code{include} directive
@@cindex supporting files, including
@@cindex files, including
This directive provides a way to include supporting files at specified
points in your source program.  The code from @@var{file} is assembled as
if it followed the point of the @@code{.include}; when the end of the
included file is reached, assembly of the original file continues.  You
can control the search paths used with the @@samp{-I} command-line option
(@@pxref{Invoking,,Command-Line Options}).  Quotation marks are required
around @@var{file}.

@@node Int
@@section @@code{.int @@var{expressions}}

@@cindex @@code{int} directive
@@cindex integers, 32-bit
Expect zero or more @@var{expressions}, of any section, separated by commas.
For each expression, emit a number that, at run time, is the value of that
expression.  The byte order and bit size of the number depends on what kind
of target the assembly is for.

@@ifclear GENERIC
@@ifset H8
On the H8/500 and most forms of the H8/300, @@code{.int} emits 16-bit
integers.  On the H8/300H and the Renesas SH, however, @@code{.int} emits
32-bit integers.
@@end ifset
@@end ifclear

@@ifset ELF
@@node Internal
@@section @@code{.internal @@var{names}}

@@cindex @@code{internal} directive
@@cindex visibility
This one of the ELF visibility directives.  The other two are
@@code{.hidden} (@@pxref{Hidden,,@@code{.hidden}}) and 
@@code{.protected} (@@pxref{Protected,,@@code{.protected}}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{internal} which means that the symbols are considered to be @@code{hidden}
(i.e., not visible to other components), and that some extra, processor specific
processing must also be performed upon the  symbols as well.
@@end ifset

@@node Irp
@@section @@code{.irp @@var{symbol},@@var{values}}@@dots{}

@@cindex @@code{irp} directive
Evaluate a sequence of statements assigning different values to @@var{symbol}.
The sequence of statements starts at the @@code{.irp} directive, and is
terminated by an @@code{.endr} directive.  For each @@var{value}, @@var{symbol} is
set to @@var{value}, and the sequence of statements is assembled.  If no
@@var{value} is listed, the sequence of statements is assembled once, with
@@var{symbol} set to the null string.  To refer to @@var{symbol} within the
sequence of statements, use @@var{\symbol}.

For example, assembling

@@example
        .irp    param,1,2,3
        move    d\param,sp@@@@-
        .endr
@@end example

is equivalent to assembling

@@example
        move    d1,sp@@@@-
        move    d2,sp@@@@-
        move    d3,sp@@@@-
@@end example

@@node Irpc
@@section @@code{.irpc @@var{symbol},@@var{values}}@@dots{}

@@cindex @@code{irpc} directive
Evaluate a sequence of statements assigning different values to @@var{symbol}.
The sequence of statements starts at the @@code{.irpc} directive, and is
terminated by an @@code{.endr} directive.  For each character in @@var{value},
@@var{symbol} is set to the character, and the sequence of statements is
assembled.  If no @@var{value} is listed, the sequence of statements is
assembled once, with @@var{symbol} set to the null string.  To refer to
@@var{symbol} within the sequence of statements, use @@var{\symbol}.

For example, assembling

@@example
        .irpc    param,123
        move    d\param,sp@@@@-
        .endr
@@end example

is equivalent to assembling

@@example
        move    d1,sp@@@@-
        move    d2,sp@@@@-
        move    d3,sp@@@@-
@@end example

@@node Lcomm
@@section @@code{.lcomm @@var{symbol} , @@var{length}}

@@cindex @@code{lcomm} directive
@@cindex local common symbols
@@cindex symbols, local common
Reserve @@var{length} (an absolute expression) bytes for a local common
denoted by @@var{symbol}.  The section and value of @@var{symbol} are
those of the new local common.  The addresses are allocated in the bss
section, so that at run-time the bytes start off zeroed.  @@var{Symbol}
is not declared global (@@pxref{Global,,@@code{.global}}), so is normally
not visible to @@code{@@value{LD}}.

@@ifset GENERIC
Some targets permit a third argument to be used with @@code{.lcomm}.  This
argument specifies the desired alignment of the symbol in the bss section.
@@end ifset

@@ifset HPPA
The syntax for @@code{.lcomm} differs slightly on the HPPA.  The syntax is
@@samp{@@var{symbol} .lcomm, @@var{length}}; @@var{symbol} is optional.
@@end ifset

@@node Lflags
@@section @@code{.lflags}

@@cindex @@code{lflags} directive (ignored)
@@command{@@value{AS}} accepts this directive, for compatibility with other
assemblers, but ignores it.

@@ifclear no-line-dir
@@node Line
@@section @@code{.line @@var{line-number}}

@@cindex @@code{line} directive
@@end ifclear
@@ifset no-line-dir
@@node Ln
@@section @@code{.ln @@var{line-number}}

@@cindex @@code{ln} directive
@@end ifset
@@cindex logical line number
@@ifset aout-bout
Change the logical line number.  @@var{line-number} must be an absolute
expression.  The next line has that logical line number.  Therefore any other
statements on the current line (after a statement separator character) are
reported as on logical line number @@var{line-number} @@minus{} 1.  One day
@@command{@@value{AS}} will no longer support this directive: it is recognized only
for compatibility with existing assembler programs.

@@ifset GENERIC
@@ifset A29K
@@emph{Warning:} In the AMD29K configuration of @@value{AS}, this command is
not available; use the synonym @@code{.ln} in that context.
@@end ifset
@@end ifset
@@end ifset

@@ifclear no-line-dir
Even though this is a directive associated with the @@code{a.out} or
@@code{b.out} object-code formats, @@command{@@value{AS}} still recognizes it
when producing COFF output, and treats @@samp{.line} as though it
were the COFF @@samp{.ln} @@emph{if} it is found outside a
@@code{.def}/@@code{.endef} pair.

Inside a @@code{.def}, @@samp{.line} is, instead, one of the directives
used by compilers to generate auxiliary symbol information for
debugging.
@@end ifclear

@@node Linkonce
@@section @@code{.linkonce [@@var{type}]}
@@cindex COMDAT
@@cindex @@code{linkonce} directive
@@cindex common sections
Mark the current section so that the linker only includes a single copy of it.
This may be used to include the same section in several different object files,
but ensure that the linker will only include it once in the final output file.
The @@code{.linkonce} pseudo-op must be used for each instance of the section.
Duplicate sections are detected based on the section name, so it should be
unique.

This directive is only supported by a few object file formats; as of this
writing, the only object file format which supports it is the Portable
Executable format used on Windows NT.

The @@var{type} argument is optional.  If specified, it must be one of the
following strings.  For example:
@@smallexample
.linkonce same_size
@@end smallexample
Not all types may be supported on all object file formats.

@@table @@code
@@item discard
Silently discard duplicate sections.  This is the default.

@@item one_only
Warn if there are duplicate sections, but still keep only one copy.

@@item same_size
Warn if any of the duplicates have different sizes.

@@item same_contents
Warn if any of the duplicates do not have exactly the same contents.
@@end table

@@node Ln
@@section @@code{.ln @@var{line-number}}

@@cindex @@code{ln} directive
@@ifclear no-line-dir
@@samp{.ln} is a synonym for @@samp{.line}.
@@end ifclear
@@ifset no-line-dir
Tell @@command{@@value{AS}} to change the logical line number.  @@var{line-number}
must be an absolute expression.  The next line has that logical
line number, so any other statements on the current line (after a
statement separator character @@code{;}) are reported as on logical
line number @@var{line-number} @@minus{} 1.
@@ifset BOUT

This directive is accepted, but ignored, when @@command{@@value{AS}} is
configured for @@code{b.out}; its effect is only associated with COFF
output format.
@@end ifset
@@end ifset

@@node MRI
@@section @@code{.mri @@var{val}}

@@cindex @@code{mri} directive
@@cindex MRI mode, temporarily
If @@var{val} is non-zero, this tells @@command{@@value{AS}} to enter MRI mode.  If
@@var{val} is zero, this tells @@command{@@value{AS}} to exit MRI mode.  This change
affects code assembled until the next @@code{.mri} directive, or until the end
of the file.  @@xref{M, MRI mode, MRI mode}.

@@node List
@@section @@code{.list}

@@cindex @@code{list} directive
@@cindex listing control, turning on
Control (in conjunction with the @@code{.nolist} directive) whether or
not assembly listings are generated.  These two directives maintain an
internal counter (which is zero initially).   @@code{.list} increments the
counter, and @@code{.nolist} decrements it.  Assembly listings are
generated whenever the counter is greater than zero.

By default, listings are disabled.  When you enable them (with the
@@samp{-a} command line option; @@pxref{Invoking,,Command-Line Options}),
the initial value of the listing counter is one.

@@node Long
@@section @@code{.long @@var{expressions}}

@@cindex @@code{long} directive
@@code{.long} is the same as @@samp{.int}, @@pxref{Int,,@@code{.int}}.

@@ignore
@@c no one seems to know what this is for or whether this description is
@@c what it really ought to do
@@node Lsym
@@section @@code{.lsym @@var{symbol}, @@var{expression}}

@@cindex @@code{lsym} directive
@@cindex symbol, not referenced in assembly
@@code{.lsym} creates a new symbol named @@var{symbol}, but does not put it in
the hash table, ensuring it cannot be referenced by name during the
rest of the assembly.  This sets the attributes of the symbol to be
the same as the expression value:
@@smallexample
@@var{other} = @@var{descriptor} = 0
@@var{type} = @@r{(section of @@var{expression})}
@@var{value} = @@var{expression}
@@end smallexample
@@noindent
The new symbol is not flagged as external.
@@end ignore

@@node Macro
@@section @@code{.macro}

@@cindex macros
The commands @@code{.macro} and @@code{.endm} allow you to define macros that
generate assembly output.  For example, this definition specifies a macro
@@code{sum} that puts a sequence of numbers into memory:

@@example
        .macro  sum from=0, to=5
        .long   \from
        .if     \to-\from
        sum     "(\from+1)",\to
        .endif
        .endm
@@end example

@@noindent
With that definition, @@samp{SUM 0,5} is equivalent to this assembly input:

@@example
        .long   0
        .long   1
        .long   2
        .long   3
        .long   4
        .long   5
@@end example

@@ftable @@code
@@item .macro @@var{macname}
@@itemx .macro @@var{macname} @@var{macargs} @@dots{}
@@cindex @@code{macro} directive
Begin the definition of a macro called @@var{macname}.  If your macro
definition requires arguments, specify their names after the macro name,
separated by commas or spaces.  You can supply a default value for any
macro argument by following the name with @@samp{=@@var{deflt}}.  For
example, these are all valid @@code{.macro} statements:

@@table @@code
@@item .macro comm
Begin the definition of a macro called @@code{comm}, which takes no
arguments.

@@item .macro plus1 p, p1
@@itemx .macro plus1 p p1
Either statement begins the definition of a macro called @@code{plus1},
which takes two arguments; within the macro definition, write
@@samp{\p} or @@samp{\p1} to evaluate the arguments.

@@item .macro reserve_str p1=0 p2
Begin the definition of a macro called @@code{reserve_str}, with two
arguments.  The first argument has a default value, but not the second.
After the definition is complete, you can call the macro either as
@@samp{reserve_str @@var{a},@@var{b}} (with @@samp{\p1} evaluating to
@@var{a} and @@samp{\p2} evaluating to @@var{b}), or as @@samp{reserve_str
,@@var{b}} (with @@samp{\p1} evaluating as the default, in this case
@@samp{0}, and @@samp{\p2} evaluating to @@var{b}).
@@end table

When you call a macro, you can specify the argument values either by
position, or by keyword.  For example, @@samp{sum 9,17} is equivalent to
@@samp{sum to=17, from=9}.

@@item .endm
@@cindex @@code{endm} directive
Mark the end of a macro definition.

@@item .exitm
@@cindex @@code{exitm} directive
Exit early from the current macro definition.

@@cindex number of macros executed
@@cindex macros, count executed
@@item \@@@@
@@command{@@value{AS}} maintains a counter of how many macros it has
executed in this pseudo-variable; you can copy that number to your
output with @@samp{\@@@@}, but @@emph{only within a macro definition}.

@@ignore
@@item LOCAL @@var{name} [ , @@dots{} ]
@@emph{Warning: @@code{LOCAL} is only available if you select ``alternate
macro syntax'' with @@samp{-a} or @@samp{--alternate}.}  @@xref{Alternate,,
Alternate macro syntax}.

Generate a string replacement for each of the @@var{name} arguments, and
replace any instances of @@var{name} in each macro expansion.  The
replacement string is unique in the assembly, and different for each
separate macro expansion.  @@code{LOCAL} allows you to write macros that
define symbols, without fear of conflict between separate macro expansions.
@@end ignore
@@end ftable

@@node Nolist
@@section @@code{.nolist}

@@cindex @@code{nolist} directive
@@cindex listing control, turning off
Control (in conjunction with the @@code{.list} directive) whether or
not assembly listings are generated.  These two directives maintain an
internal counter (which is zero initially).   @@code{.list} increments the
counter, and @@code{.nolist} decrements it.  Assembly listings are
generated whenever the counter is greater than zero.

@@node Octa
@@section @@code{.octa @@var{bignums}}

@@c FIXME: double size emitted for "octa" on i960, others?  Or warn?
@@cindex @@code{octa} directive
@@cindex integer, 16-byte
@@cindex sixteen byte integer
This directive expects zero or more bignums, separated by commas.  For each
bignum, it emits a 16-byte integer.

The term ``octa'' comes from contexts in which a ``word'' is two bytes;
hence @@emph{octa}-word for 16 bytes.

@@node Org
@@section @@code{.org @@var{new-lc} , @@var{fill}}

@@cindex @@code{org} directive
@@cindex location counter, advancing
@@cindex advancing location counter
@@cindex current address, advancing
Advance the location counter of the current section to
@@var{new-lc}.  @@var{new-lc} is either an absolute expression or an
expression with the same section as the current subsection.  That is,
you can't use @@code{.org} to cross sections: if @@var{new-lc} has the
wrong section, the @@code{.org} directive is ignored.  To be compatible
with former assemblers, if the section of @@var{new-lc} is absolute,
@@command{@@value{AS}} issues a warning, then pretends the section of @@var{new-lc}
is the same as the current subsection.

@@code{.org} may only increase the location counter, or leave it
unchanged; you cannot use @@code{.org} to move the location counter
backwards.

@@c double negative used below "not undefined" because this is a specific
@@c reference to "undefined" (as SEG_UNKNOWN is called in this manual)
@@c section. doc@@cygnus.com 18feb91
Because @@command{@@value{AS}} tries to assemble programs in one pass, @@var{new-lc}
may not be undefined.  If you really detest this restriction we eagerly await
a chance to share your improved assembler.

Beware that the origin is relative to the start of the section, not
to the start of the subsection.  This is compatible with other
people's assemblers.

When the location counter (of the current subsection) is advanced, the
intervening bytes are filled with @@var{fill} which should be an
absolute expression.  If the comma and @@var{fill} are omitted,
@@var{fill} defaults to zero.

@@node P2align
@@section @@code{.p2align[wl] @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}

@@cindex padding the location counter given a power of two
@@cindex @@code{p2align} directive
Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
number of low-order zero bits the location counter must have after
advancement.  For example @@samp{.p2align 3} advances the location
counter until it a multiple of 8.  If the location counter is already a
multiple of 8, no change is needed.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

@@cindex @@code{p2alignw} directive
@@cindex @@code{p2alignl} directive
The @@code{.p2alignw} and @@code{.p2alignl} directives are variants of the
@@code{.p2align} directive.  The @@code{.p2alignw} directive treats the fill
pattern as a two byte word value.  The @@code{.p2alignl} directives treats the
fill pattern as a four byte longword value.  For example, @@code{.p2alignw
2,0x368d} will align to a multiple of 4.  If it skips two bytes, they will be
filled in with the value 0x368d (the exact placement of the bytes depends upon
the endianness of the processor).  If it skips 1 or 3 bytes, the fill value is
undefined.

@@ifset ELF
@@node Previous
@@section @@code{.previous}

@@cindex @@code{previous} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}),
@@code{.pushsection} (@@pxref{PushSection}), and @@code{.popsection}
(@@pxref{PopSection}).

This directive swaps the current section (and subsection) with most recently
referenced section (and subsection) prior to this one.  Multiple
@@code{.previous} directives in a row will flip between two sections (and their
subsections).

In terms of the section stack, this directive swaps the current section with
the top section on the section stack.
@@end ifset

@@ifset ELF
@@node PopSection
@@section @@code{.popsection}

@@cindex @@code{popsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}), 
@@code{.pushsection} (@@pxref{PushSection}), and @@code{.previous} 
(@@pxref{Previous}).

This directive replaces the current section (and subsection) with the top
section (and subsection) on the section stack.  This section is popped off the
stack. 
@@end ifset

@@node Print
@@section @@code{.print @@var{string}}

@@cindex @@code{print} directive
@@command{@@value{AS}} will print @@var{string} on the standard output during
assembly.  You must put @@var{string} in double quotes.

@@ifset ELF
@@node Protected
@@section @@code{.protected @@var{names}}

@@cindex @@code{protected} directive
@@cindex visibility
This one of the ELF visibility directives.  The other two are
@@code{.hidden} (@@pxref{Hidden}) and @@code{.internal} (@@pxref{Internal}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{protected} which means that any references to the symbols from within the
components that defines them must be resolved to the definition in that
component, even if a definition in another component would normally preempt
this. 
@@end ifset

@@node Psize
@@section @@code{.psize @@var{lines} , @@var{columns}}

@@cindex @@code{psize} directive
@@cindex listing control: paper size
@@cindex paper size, for listings
Use this directive to declare the number of lines---and, optionally, the
number of columns---to use for each page, when generating listings.

If you do not use @@code{.psize}, listings use a default line-count
of 60.  You may omit the comma and @@var{columns} specification; the
default width is 200 columns.

@@command{@@value{AS}} generates formfeeds whenever the specified number of
lines is exceeded (or whenever you explicitly request one, using
@@code{.eject}).

If you specify @@var{lines} as @@code{0}, no formfeeds are generated save
those explicitly specified with @@code{.eject}.

@@node Purgem
@@section @@code{.purgem @@var{name}}

@@cindex @@code{purgem} directive
Undefine the macro @@var{name}, so that later uses of the string will not be
expanded.  @@xref{Macro}.

@@ifset ELF
@@node PushSection
@@section @@code{.pushsection @@var{name} , @@var{subsection}}

@@cindex @@code{pushsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}), 
@@code{.popsection} (@@pxref{PopSection}), and @@code{.previous} 
(@@pxref{Previous}).

This directive is a synonym for @@code{.section}.  It pushes the current section
(and subsection) onto the top of the section stack, and then replaces the
current section and subsection with @@code{name} and @@code{subsection}.
@@end ifset

@@node Quad
@@section @@code{.quad @@var{bignums}}

@@cindex @@code{quad} directive
@@code{.quad} expects zero or more bignums, separated by commas.  For
each bignum, it emits
@@ifclear bignum-16
an 8-byte integer.  If the bignum won't fit in 8 bytes, it prints a
warning message; and just takes the lowest order 8 bytes of the bignum.
@@cindex eight-byte integer
@@cindex integer, 8-byte

The term ``quad'' comes from contexts in which a ``word'' is two bytes;
hence @@emph{quad}-word for 8 bytes.
@@end ifclear
@@ifset bignum-16
a 16-byte integer.  If the bignum won't fit in 16 bytes, it prints a
warning message; and just takes the lowest order 16 bytes of the bignum.
@@cindex sixteen-byte integer
@@cindex integer, 16-byte
@@end ifset

@@node Rept
@@section @@code{.rept @@var{count}}

@@cindex @@code{rept} directive
Repeat the sequence of lines between the @@code{.rept} directive and the next
@@code{.endr} directive @@var{count} times.

For example, assembling

@@example
        .rept   3
        .long   0
        .endr
@@end example

is equivalent to assembling

@@example
        .long   0
        .long   0
        .long   0
@@end example

@@node Sbttl
@@section @@code{.sbttl "@@var{subheading}"}

@@cindex @@code{sbttl} directive
@@cindex subtitles for listings
@@cindex listing control: subtitle
Use @@var{subheading} as the title (third line, immediately after the
title line) when generating assembly listings.

This directive affects subsequent pages, as well as the current page if
it appears within ten lines of the top of a page.

@@ifset COFF
@@node Scl
@@section @@code{.scl @@var{class}}

@@cindex @@code{scl} directive
@@cindex symbol storage class (COFF)
@@cindex COFF symbol storage class
Set the storage-class value for a symbol.  This directive may only be
used inside a @@code{.def}/@@code{.endef} pair.  Storage class may flag
whether a symbol is static or external, or it may record further
symbolic debugging information.
@@ifset BOUT

The @@samp{.scl} directive is primarily associated with COFF output; when
configured to generate @@code{b.out} output format, @@command{@@value{AS}}
accepts this directive but ignores it.
@@end ifset
@@end ifset

@@ifset COFF-ELF
@@node Section
@@section @@code{.section @@var{name}}

@@cindex named section
Use the @@code{.section} directive to assemble the following code into a section
named @@var{name}.

This directive is only supported for targets that actually support arbitrarily
named sections; on @@code{a.out} targets, for example, it is not accepted, even
with a standard @@code{a.out} section name.

@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset

@@cindex @@code{section} directive (COFF version)
For COFF targets, the @@code{.section} directive is used in one of the following
ways:

@@smallexample
.section @@var{name}[, "@@var{flags}"]
.section @@var{name}[, @@var{subsegment}]
@@end smallexample

If the optional argument is quoted, it is taken as flags to use for the
section.  Each flag is a single character.  The following flags are recognized:
@@table @@code
@@item b
bss section (uninitialized data)
@@item n
section is not loaded
@@item w
writable section
@@item d
data section
@@item r
read-only section
@@item x
executable section
@@item s
shared section (meaningful for PE targets)
@@item a
ignored.  (For compatibility with the ELF version)
@@end table

If no flags are specified, the default flags depend upon the section name.  If
the section name is not recognized, the default will be for the section to be
loaded and writable.  Note the @@code{n} and @@code{w} flags remove attributes
from the section, rather than adding them, so if they are used on their own it
will be as if no flags had been specified at all.

If the optional argument to the @@code{.section} directive is not quoted, it is
taken as a subsegment number (@@pxref{Sub-Sections}).
@@end ifset

@@ifset ELF
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset

@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.subsection} (@@pxref{SubSection}), @@code{.pushsection} 
(@@pxref{PushSection}), @@code{.popsection} (@@pxref{PopSection}), and
@@code{.previous} (@@pxref{Previous}).

@@cindex @@code{section} directive (ELF version)
For ELF targets, the @@code{.section} directive is used like this:

@@smallexample
.section @@var{name} [, "@@var{flags}"[, @@@@@@var{type}[, @@@@@@var{entsize}]]]
@@end smallexample

The optional @@var{flags} argument is a quoted string which may contain any
combination of the following characters:
@@table @@code
@@item a
section is allocatable
@@item w
section is writable
@@item x
section is executable
@@item M
section is mergeable
@@item S
section contains zero terminated strings
@@end table

The optional @@var{type} argument may contain one of the following constants:
@@table @@code
@@item @@@@progbits
section contains data
@@item @@@@nobits
section does not contain data (i.e., section only occupies space)
@@end table

Note on targets where the @@code{@@@@} character is the start of a comment (eg
ARM) then another character is used instead.  For example the ARM port uses the
@@code{%} character.

If @@var{flags} contains @@code{M} flag, @@var{type} argument must be specified
as well as @@var{entsize} argument. Sections with @@code{M} flag but not
@@code{S} flag must contain fixed size constants, each @@var{entsize} octets
long. Sections with both @@code{M} and @@code{S} must contain zero terminated
strings where each character is @@var{entsize} bytes long. The linker may remove
duplicates within sections with the same name, same entity size and same flags. 

If no flags are specified, the default flags depend upon the section name.  If
the section name is not recognized, the default will be for the section to have
none of the above flags: it will not be allocated in memory, nor writable, nor
executable.  The section will contain data.

For ELF targets, the assembler supports another type of @@code{.section}
directive for compatibility with the Solaris assembler:

@@smallexample
.section "@@var{name}"[, @@var{flags}...]
@@end smallexample

Note that the section name is quoted.  There may be a sequence of comma
separated flags:
@@table @@code
@@item #alloc
section is allocatable
@@item #write
section is writable
@@item #execinstr
section is executable
@@end table

This directive replaces the current section and subsection.  The replaced
section and subsection are pushed onto the section stack.  See the contents of
the gas testsuite directory @@code{gas/testsuite/gas/elf} for some examples of
how this directive and the other section stack directives work.
@@end ifset
@@end ifset

@@node Set
@@section @@code{.set @@var{symbol}, @@var{expression}}

@@cindex @@code{set} directive
@@cindex symbol value, setting
Set the value of @@var{symbol} to @@var{expression}.  This
changes @@var{symbol}'s value and type to conform to
@@var{expression}.  If @@var{symbol} was flagged as external, it remains
flagged (@@pxref{Symbol Attributes}).

You may @@code{.set} a symbol many times in the same assembly.

If you @@code{.set} a global symbol, the value stored in the object
file is the last value stored into it.

@@ifset HPPA
The syntax for @@code{set} on the HPPA is
@@samp{@@var{symbol} .set @@var{expression}}.
@@end ifset

@@node Short
@@section @@code{.short @@var{expressions}}

@@cindex @@code{short} directive
@@ifset GENERIC
@@code{.short} is normally the same as @@samp{.word}.
@@xref{Word,,@@code{.word}}.

In some configurations, however, @@code{.short} and @@code{.word} generate
numbers of different lengths; @@pxref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset W16
@@code{.short} is the same as @@samp{.word}.  @@xref{Word,,@@code{.word}}.
@@end ifset
@@ifset W32
This expects zero or more @@var{expressions}, and emits
a 16 bit number for each.
@@end ifset
@@end ifclear

@@node Single
@@section @@code{.single @@var{flonums}}

@@cindex @@code{single} directive
@@cindex floating point numbers (single)
This directive assembles zero or more flonums, separated by commas.  It
has the same effect as @@code{.float}.
@@ifset GENERIC
The exact kind of floating point numbers emitted depends on how
@@command{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
@@end ifset
@@ifclear GENERIC
@@ifset IEEEFLOAT
On the @@value{TARGET} family, @@code{.single} emits 32-bit floating point
numbers in @@sc{ieee} format.
@@end ifset
@@end ifclear

@@ifset COFF-ELF
@@node Size
@@section @@code{.size}

This directive is used to set the size associated with a symbol.

@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset

@@cindex @@code{size} directive (COFF version)
For COFF targets, the @@code{.size} directive is only permitted inside
@@code{.def}/@@code{.endef} pairs.  It is used like this:

@@smallexample
.size @@var{expression}
@@end smallexample

@@ifset BOUT
@@samp{.size} is only meaningful when generating COFF format output; when
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
ignores it.
@@end ifset
@@end ifset

@@ifset ELF
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset

@@cindex @@code{size} directive (ELF version)
For ELF targets, the @@code{.size} directive is used like this:

@@smallexample
.size @@var{name} , @@var{expression}
@@end smallexample

This directive sets the size associated with a symbol @@var{name}.
The size in bytes is computed from @@var{expression} which can make use of label
arithmetic.  This directive is typically used to set the size of function
symbols.
@@end ifset
@@end ifset

@@node Sleb128
@@section @@code{.sleb128 @@var{expressions}}

@@cindex @@code{sleb128} directive
@@var{sleb128} stands for ``signed little endian base 128.''  This is a 
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Uleb128,@@code{.uleb128}}.

@@ifclear no-space-dir
@@node Skip
@@section @@code{.skip @@var{size} , @@var{fill}}

@@cindex @@code{skip} directive
@@cindex filling memory
This directive emits @@var{size} bytes, each of value @@var{fill}.  Both
@@var{size} and @@var{fill} are absolute expressions.  If the comma and
@@var{fill} are omitted, @@var{fill} is assumed to be zero.  This is the same as
@@samp{.space}.

@@node Space
@@section @@code{.space @@var{size} , @@var{fill}}

@@cindex @@code{space} directive
@@cindex filling memory
This directive emits @@var{size} bytes, each of value @@var{fill}.  Both
@@var{size} and @@var{fill} are absolute expressions.  If the comma
and @@var{fill} are omitted, @@var{fill} is assumed to be zero.  This is the same
as @@samp{.skip}.

@@ifset HPPA
@@quotation
@@emph{Warning:} @@code{.space} has a completely different meaning for HPPA
targets; use @@code{.block} as a substitute.  See @@cite{HP9000 Series 800
Assembly Language Reference Manual} (HP 92432-90001) for the meaning of the
@@code{.space} directive.  @@xref{HPPA Directives,,HPPA Assembler Directives},
for a summary.
@@end quotation
@@end ifset
@@end ifclear

@@ifset A29K
@@ifclear GENERIC
@@node Space
@@section @@code{.space}
@@cindex @@code{space} directive
@@end ifclear
On the AMD 29K, this directive is ignored; it is accepted for
compatibility with other AMD 29K assemblers.

@@quotation
@@emph{Warning:} In most versions of the @@sc{gnu} assembler, the directive
@@code{.space} has the effect of @@code{.block}  @@xref{Machine Dependencies}.
@@end quotation
@@end ifset

@@ifset have-stabs
@@node Stab
@@section @@code{.stabd, .stabn, .stabs}

@@cindex symbolic debuggers, information for
@@cindex @@code{stab@@var{x}} directives
There are three directives that begin @@samp{.stab}.
All emit symbols (@@pxref{Symbols}), for use by symbolic debuggers.
The symbols are not entered in the @@command{@@value{AS}} hash table: they
cannot be referenced elsewhere in the source file.
Up to five fields are required:

@@table @@var
@@item string
This is the symbol's name.  It may contain any character except
@@samp{\000}, so is more general than ordinary symbol names.  Some
debuggers used to code arbitrarily complex structures into symbol names
using this field.

@@item type
An absolute expression.  The symbol's type is set to the low 8 bits of
this expression.  Any bit pattern is permitted, but @@code{@@value{LD}}
and debuggers choke on silly bit patterns.

@@item other
An absolute expression.  The symbol's ``other'' attribute is set to the
low 8 bits of this expression.

@@item desc
An absolute expression.  The symbol's descriptor is set to the low 16
bits of this expression.

@@item value
An absolute expression which becomes the symbol's value.
@@end table

If a warning is detected while reading a @@code{.stabd}, @@code{.stabn},
or @@code{.stabs} statement, the symbol has probably already been created;
you get a half-formed symbol in your object file.  This is
compatible with earlier assemblers!

@@table @@code
@@cindex @@code{stabd} directive
@@item .stabd @@var{type} , @@var{other} , @@var{desc}

The ``name'' of the symbol generated is not even an empty string.
It is a null pointer, for compatibility.  Older assemblers used a
null pointer so they didn't waste space in object files with empty
strings.

The symbol's value is set to the location counter,
relocatably.  When your program is linked, the value of this symbol
is the address of the location counter when the @@code{.stabd} was
assembled.

@@cindex @@code{stabn} directive
@@item .stabn @@var{type} , @@var{other} , @@var{desc} , @@var{value}
The name of the symbol is set to the empty string @@code{""}.

@@cindex @@code{stabs} directive
@@item .stabs @@var{string} ,  @@var{type} , @@var{other} , @@var{desc} , @@var{value}
All five fields are specified.
@@end table
@@end ifset
@@c end     have-stabs

@@node String
@@section @@code{.string} "@@var{str}"

@@cindex string, copying to object file
@@cindex @@code{string} directive

Copy the characters in @@var{str} to the object file.  You may specify more than
one string to copy, separated by commas.  Unless otherwise specified for a
particular machine, the assembler marks the end of each string with a 0 byte.
You can use any of the escape sequences described in @@ref{Strings,,Strings}.

@@node Struct
@@section @@code{.struct @@var{expression}}

@@cindex @@code{struct} directive
Switch to the absolute section, and set the section offset to @@var{expression},
which must be an absolute expression.  You might use this as follows:
@@smallexample
        .struct 0
field1:
        .struct field1 + 4
field2:
        .struct field2 + 4
field3:
@@end smallexample
This would define the symbol @@code{field1} to have the value 0, the symbol
@@code{field2} to have the value 4, and the symbol @@code{field3} to have the
value 8.  Assembly would be left in the absolute section, and you would need to
use a @@code{.section} directive of some sort to change to some other section
before further assembly.

@@ifset ELF
@@node SubSection
@@section @@code{.subsection @@var{name}}

@@cindex @@code{subsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.pushsection} (@@pxref{PushSection}), 
@@code{.popsection} (@@pxref{PopSection}), and @@code{.previous} 
(@@pxref{Previous}).

This directive replaces the current subsection with @@code{name}.  The current
section is not changed.  The replaced subsection is put onto the section stack
in place of the then current top of stack subsection.
@@end ifset

@@ifset ELF
@@node Symver
@@section @@code{.symver}
@@cindex @@code{symver} directive
@@cindex symbol versioning
@@cindex versions of symbols
Use the @@code{.symver} directive to bind symbols to specific version nodes
within a source file.  This is only supported on ELF platforms, and is
typically used when assembling files to be linked into a shared library.
There are cases where it may make sense to use this in objects to be bound
into an application itself so as to override a versioned symbol from a
shared library.

For ELF targets, the @@code{.symver} directive can be used like this:
@@smallexample
.symver @@var{name}, @@var{name2@@@@nodename}
@@end smallexample
If the symbol @@var{name} is defined within the file
being assembled, the @@code{.symver} directive effectively creates a symbol
alias with the name @@var{name2@@@@nodename}, and in fact the main reason that we
just don't try and create a regular alias is that the @@var{@@@@} character isn't
permitted in symbol names.  The @@var{name2} part of the name is the actual name
of the symbol by which it will be externally referenced.  The name @@var{name}
itself is merely a name of convenience that is used so that it is possible to
have definitions for multiple versions of a function within a single source
file, and so that the compiler can unambiguously know which version of a
function is being mentioned.  The @@var{nodename} portion of the alias should be
the name of a node specified in the version script supplied to the linker when
building a shared library.  If you are attempting to override a versioned
symbol from a shared library, then @@var{nodename} should correspond to the
nodename of the symbol you are trying to override.

If the symbol @@var{name} is not defined within the file being assembled, all
references to @@var{name} will be changed to @@var{name2@@@@nodename}.  If no
reference to @@var{name} is made, @@var{name2@@@@nodename} will be removed from the
symbol table.

Another usage of the @@code{.symver} directive is:
@@smallexample
.symver @@var{name}, @@var{name2@@@@@@@@nodename}
@@end smallexample
In this case, the symbol @@var{name} must exist and be defined within
the file being assembled. It is similar to @@var{name2@@@@nodename}. The
difference is @@var{name2@@@@@@@@nodename} will also be used to resolve
references to @@var{name2} by the linker.

The third usage of the @@code{.symver} directive is:
@@smallexample
.symver @@var{name}, @@var{name2@@@@@@@@@@@@nodename}
@@end smallexample
When @@var{name} is not defined within the
file being assembled, it is treated as @@var{name2@@@@nodename}. When
@@var{name} is defined within the file being assembled, the symbol
name, @@var{name}, will be changed to @@var{name2@@@@@@@@nodename}.
@@end ifset

@@ifset COFF
@@node Tag
@@section @@code{.tag @@var{structname}}

@@cindex COFF structure debugging
@@cindex structure debugging, COFF
@@cindex @@code{tag} directive
This directive is generated by compilers to include auxiliary debugging
information in the symbol table.  It is only permitted inside
@@code{.def}/@@code{.endef} pairs.  Tags are used to link structure
definitions in the symbol table with instances of those structures.
@@ifset BOUT

@@samp{.tag} is only used when generating COFF format output; when
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
ignores it.
@@end ifset
@@end ifset

@@node Text
@@section @@code{.text @@var{subsection}}

@@cindex @@code{text} directive
Tells @@command{@@value{AS}} to assemble the following statements onto the end of
the text subsection numbered @@var{subsection}, which is an absolute
expression.  If @@var{subsection} is omitted, subsection number zero
is used.

@@node Title
@@section @@code{.title "@@var{heading}"}

@@cindex @@code{title} directive
@@cindex listing control: title line
Use @@var{heading} as the title (second line, immediately after the
source file name and pagenumber) when generating assembly listings.

This directive affects subsequent pages, as well as the current page if
it appears within ten lines of the top of a page.

@@ifset COFF-ELF
@@node Type
@@section @@code{.type}

This directive is used to set the type of a symbol.

@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset

@@cindex COFF symbol type
@@cindex symbol type, COFF
@@cindex @@code{type} directive (COFF version)
For COFF targets, this directive is permitted only within
@@code{.def}/@@code{.endef} pairs.  It is used like this:

@@smallexample
.type @@var{int}
@@end smallexample

This records the integer @@var{int} as the type attribute of a symbol table
entry.

@@ifset BOUT
@@samp{.type} is associated only with COFF format output; when
@@command{@@value{AS}} is configured for @@code{b.out} output, it accepts this
directive but ignores it.
@@end ifset
@@end ifset

@@ifset ELF
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset

@@cindex ELF symbol type
@@cindex symbol type, ELF
@@cindex @@code{type} directive (ELF version)
For ELF targets, the @@code{.type} directive is used like this:

@@smallexample
.type @@var{name} , @@var{type description}
@@end smallexample

This sets the type of symbol @@var{name} to be either a
function symbol or an object symbol.  There are five different syntaxes
supported for the @@var{type description} field, in order to provide
compatibility with various other assemblers.  The syntaxes supported are:

@@smallexample
  .type <name>,#function
  .type <name>,#object

  .type <name>,@@@@function
  .type <name>,@@@@object

  .type <name>,%function
  .type <name>,%object
  
  .type <name>,"function"
  .type <name>,"object"
  
  .type <name> STT_FUNCTION
  .type <name> STT_OBJECT
@@end smallexample
@@end ifset
@@end ifset

@@node Uleb128
@@section @@code{.uleb128 @@var{expressions}}

@@cindex @@code{uleb128} directive
@@var{uleb128} stands for ``unsigned little endian base 128.''  This is a 
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Sleb128,@@code{.sleb128}}.

@@ifset COFF
@@node Val
@@section @@code{.val @@var{addr}}

@@cindex @@code{val} directive
@@cindex COFF value attribute
@@cindex value attribute, COFF
This directive, permitted only within @@code{.def}/@@code{.endef} pairs,
records the address @@var{addr} as the value attribute of a symbol table
entry.
@@ifset BOUT

@@samp{.val} is used only for COFF output; when @@command{@@value{AS}} is
configured for @@code{b.out}, it accepts this directive but ignores it.
@@end ifset
@@end ifset

@@ifset ELF
@@node Version
@@section @@code{.version "@@var{string}"}

@@cindex @@code{version} directive
This directive creates a @@code{.note} section and places into it an ELF
formatted note of type NT_VERSION.  The note's name is set to @@code{string}.
@@end ifset

@@ifset ELF
@@node VTableEntry
@@section @@code{.vtable_entry @@var{table}, @@var{offset}}

@@cindex @@code{vtable_entry}
This directive finds or creates a symbol @@code{table} and creates a
@@code{VTABLE_ENTRY} relocation for it with an addend of @@code{offset}.

@@node VTableInherit
@@section @@code{.vtable_inherit @@var{child}, @@var{parent}}

@@cindex @@code{vtable_inherit}
This directive finds the symbol @@code{child} and finds or creates the symbol
@@code{parent} and then creates a @@code{VTABLE_INHERIT} relocation for the
parent whose addend is the value of the child symbol.  As a special case the
parent name of @@code{0} is treated as refering the @@code{*ABS*} section.
@@end ifset

@@ifset ELF
@@node Weak
@@section @@code{.weak @@var{names}}

@@cindex @@code{weak} directive
This directive sets the weak attribute on the comma separated list of symbol
@@code{names}.  If the symbols do not already exist, they will be created.
@@end ifset

@@node Word
@@section @@code{.word @@var{expressions}}

@@cindex @@code{word} directive
This directive expects zero or more @@var{expressions}, of any section,
separated by commas.
@@ifclear GENERIC
@@ifset W32
For each expression, @@command{@@value{AS}} emits a 32-bit number.
@@end ifset
@@ifset W16
For each expression, @@command{@@value{AS}} emits a 16-bit number.
@@end ifset
@@end ifclear
@@ifset GENERIC

The size of the number emitted, and its byte order,
depend on what target computer the assembly is for.
@@end ifset

@@c on amd29k, i960, sparc the "special treatment to support compilers" doesn't
@@c happen---32-bit addressability, period; no long/short jumps.
@@ifset DIFF-TBL-KLUGE
@@cindex difference tables altered
@@cindex altered difference tables
@@quotation
@@emph{Warning: Special Treatment to support Compilers}
@@end quotation

@@ifset GENERIC
Machines with a 32-bit address space, but that do less than 32-bit
addressing, require the following special treatment.  If the machine of
interest to you does 32-bit addressing (or doesn't require it;
@@pxref{Machine Dependencies}), you can ignore this issue.

@@end ifset
In order to assemble compiler output into something that works,
@@command{@@value{AS}} occasionally does strange things to @@samp{.word} directives.
Directives of the form @@samp{.word sym1-sym2} are often emitted by
compilers as part of jump tables.  Therefore, when @@command{@@value{AS}} assembles a
directive of the form @@samp{.word sym1-sym2}, and the difference between
@@code{sym1} and @@code{sym2} does not fit in 16 bits, @@command{@@value{AS}}
creates a @@dfn{secondary jump table}, immediately before the next label.
This secondary jump table is preceded by a short-jump to the
first byte after the secondary table.  This short-jump prevents the flow
of control from accidentally falling into the new table.  Inside the
table is a long-jump to @@code{sym2}.  The original @@samp{.word}
contains @@code{sym1} minus the address of the long-jump to
@@code{sym2}.

If there were several occurrences of @@samp{.word sym1-sym2} before the
secondary jump table, all of them are adjusted.  If there was a
@@samp{.word sym3-sym4}, that also did not fit in sixteen bits, a
long-jump to @@code{sym4} is included in the secondary jump table,
and the @@code{.word} directives are adjusted to contain @@code{sym3}
minus the address of the long-jump to @@code{sym4}; and so on, for as many
entries in the original jump table as necessary.

@@ifset INTERNALS
@@emph{This feature may be disabled by compiling @@command{@@value{AS}} with the
@@samp{-DWORKING_DOT_WORD} option.} This feature is likely to confuse
assembly language programmers.
@@end ifset
@@end ifset
@@c end     DIFF-TBL-KLUGE

@@node Deprecated
@@section Deprecated Directives

@@cindex deprecated directives
@@cindex obsolescent directives
One day these directives won't work.
They are included for compatibility with older assemblers.
@@table @@t
@@item .abort
@@item .line
@@end table

@@ifset GENERIC
@@node Machine Dependencies
@@chapter Machine Dependent Features

@@cindex machine dependencies
The machine instruction sets are (almost by definition) different on
each machine where @@command{@@value{AS}} runs.  Floating point representations
vary as well, and @@command{@@value{AS}} often supports a few additional
directives or command-line options for compatibility with other
assemblers on a particular platform.  Finally, some versions of
@@command{@@value{AS}} support special pseudo-instructions for branch
optimization.

This chapter discusses most of these differences, though it does not
include details on any machine's instruction set.  For details on that
subject, see the hardware manufacturer's manual.

@@menu
@@ifset A29K
* AMD29K-Dependent::            AMD 29K Dependent Features
@@end ifset
@@ifset ALPHA
* Alpha-Dependent::		Alpha Dependent Features
@@end ifset
@@ifset ARC
* ARC-Dependent::               ARC Dependent Features
@@end ifset
@@ifset ARM
* ARM-Dependent::               ARM Dependent Features
@@end ifset
@@ifset CRIS
* CRIS-Dependent::              CRIS Dependent Features
@@end ifset
@@ifset D10V
* D10V-Dependent::              D10V Dependent Features
@@end ifset
@@ifset D30V
* D30V-Dependent::              D30V Dependent Features
@@end ifset
@@ifset H8/300
* H8/300-Dependent::            Renesas H8/300 Dependent Features
@@end ifset
@@ifset H8/500
* H8/500-Dependent::            Renesas H8/500 Dependent Features
@@end ifset
@@ifset HPPA
* HPPA-Dependent::              HPPA Dependent Features
@@end ifset
@@ifset I370
* ESA/390-Dependent::           IBM ESA/390 Dependent Features
@@end ifset
@@ifset I80386
* i386-Dependent::              Intel 80386 and AMD x86-64 Dependent Features
@@end ifset
@@ifset I860
* i860-Dependent::              Intel 80860 Dependent Features
@@end ifset
@@ifset I960
* i960-Dependent::              Intel 80960 Dependent Features
@@end ifset
@@ifset IP2K
* IP2K-Dependent::              IP2K Dependent Features
@@end ifset
@@ifset M32R
* M32R-Dependent::              M32R Dependent Features
@@end ifset
@@ifset M680X0
* M68K-Dependent::              M680x0 Dependent Features
@@end ifset
@@ifset M68HC11
* M68HC11-Dependent::           M68HC11 and 68HC12 Dependent Features
@@end ifset
@@ifset M880X0
* M88K-Dependent::		M880x0 Dependent Features
@@end ifset
@@ifset MIPS
* MIPS-Dependent::              MIPS Dependent Features
@@end ifset
@@ifset MMIX
* MMIX-Dependent::              MMIX Dependent Features
@@end ifset
@@ifset MSP430
* MSP430-Dependent::		MSP430 Dependent Features
@@end ifset
@@ifset SH
* SH-Dependent::                Renesas / SuperH SH Dependent Features
* SH64-Dependent::              SuperH SH64 Dependent Features
@@end ifset
@@ifset PDP11
* PDP-11-Dependent::            PDP-11 Dependent Features
@@end ifset
@@ifset PJ
* PJ-Dependent::                picoJava Dependent Features
@@end ifset
@@ifset PPC
* PPC-Dependent::               PowerPC Dependent Features
@@end ifset
@@ifset SPARC
* Sparc-Dependent::             SPARC Dependent Features
@@end ifset
@@ifset TIC54X
* TIC54X-Dependent::            TI TMS320C54x Dependent Features
@@end ifset
@@ifset V850
* V850-Dependent::              V850 Dependent Features
@@end ifset
@@ifset XTENSA
* Xtensa-Dependent::            Xtensa Dependent Features
@@end ifset
@@ifset Z8000
* Z8000-Dependent::             Z8000 Dependent Features
@@end ifset
@@ifset VAX
* Vax-Dependent::               VAX Dependent Features
@@end ifset
@@end menu

@@lowersections
@@end ifset

@@c The following major nodes are *sections* in the GENERIC version, *chapters*
@@c in single-cpu versions.  This is mainly achieved by @@lowersections.  There is a
@@c peculiarity: to preserve cross-references, there must be a node called
@@c "Machine Dependencies".  Hence the conditional nodenames in each
@@c major node below.  Node defaulting in makeinfo requires adjacency of
@@c node and sectioning commands; hence the repetition of @@chapter BLAH
@@c in both conditional blocks.

@@ifset A29K
@@include c-a29k.texi
@@end ifset

@@ifset ALPHA
@@include c-alpha.texi
@@end ifset

@@ifset ARC
@@include c-arc.texi
@@end ifset

@@ifset ARM
@@include c-arm.texi
@@end ifset

@@ifset CRIS
@@include c-cris.texi
@@end ifset

@@ifset Renesas-all
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter Machine Dependent Features

The machine instruction sets are different on each Renesas chip family,
and there are also some syntax differences among the families.  This
chapter describes the specific @@command{@@value{AS}} features for each
family.

@@menu
* H8/300-Dependent::            Renesas H8/300 Dependent Features
* H8/500-Dependent::            Renesas H8/500 Dependent Features
* SH-Dependent::                Renesas SH Dependent Features
@@end menu
@@lowersections
@@end ifclear
@@end ifset

@@ifset D10V
@@include c-d10v.texi
@@end ifset

@@ifset D30V
@@include c-d30v.texi
@@end ifset

@@ifset H8/300
@@include c-h8300.texi
@@end ifset

@@ifset H8/500
@@include c-h8500.texi
@@end ifset

@@ifset HPPA
@@include c-hppa.texi
@@end ifset

@@ifset I370
@@include c-i370.texi
@@end ifset

@@ifset I80386
@@include c-i386.texi
@@end ifset

@@ifset I860
@@include c-i860.texi
@@end ifset

@@ifset I960
@@include c-i960.texi
@@end ifset

@@ifset IA64
@@include c-ia64.texi
@@end ifset

@@ifset IP2K
@@include c-ip2k.texi
@@end ifset

@@ifset M32R
@@include c-m32r.texi
@@end ifset

@@ifset M680X0
@@include c-m68k.texi
@@end ifset

@@ifset M68HC11
@@include c-m68hc11.texi
@@end ifset

@@ifset M880X0
@@include c-m88k.texi
@@end ifset

@@ifset MIPS
@@include c-mips.texi
@@end ifset

@@ifset MMIX
@@include c-mmix.texi
@@end ifset

@@ifset MSP430
@@include c-msp430.texi
@@end ifset

@@ifset NS32K
@@include c-ns32k.texi
@@end ifset

@@ifset PDP11
@@include c-pdp11.texi
@@end ifset

@@ifset PJ
@@include c-pj.texi
@@end ifset

@@ifset PPC
@@include c-ppc.texi
@@end ifset

@@ifset SH
@@include c-sh.texi
@@include c-sh64.texi
@@end ifset

@@ifset SPARC
@@include c-sparc.texi
@@end ifset

@@ifset TIC54X
@@include c-tic54x.texi
@@end ifset

@@ifset Z8000
@@include c-z8k.texi
@@end ifset

@@ifset VAX
@@include c-vax.texi
@@end ifset

@@ifset V850
@@include c-v850.texi
@@end ifset

@@ifset XTENSA
@@include c-xtensa.texi
@@end ifset

@@ifset GENERIC
@@c reverse effect of @@down at top of generic Machine-Dep chapter
@@raisesections
@@end ifset

@@node Reporting Bugs
@@chapter Reporting Bugs
@@cindex bugs in assembler
@@cindex reporting bugs in assembler

Your bug reports play an essential role in making @@command{@@value{AS}} reliable.

Reporting a bug may help you by bringing a solution to your problem, or it may
not.  But in any case the principal function of a bug report is to help the
entire community by making the next version of @@command{@@value{AS}} work better.
Bug reports are your contribution to the maintenance of @@command{@@value{AS}}.

In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

@@menu
* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs
@@end menu

@@node Bug Criteria
@@section Have You Found a Bug?
@@cindex bug criteria

If you are not sure whether you have found a bug, here are some guidelines:

@@itemize @@bullet
@@cindex fatal signal
@@cindex assembler crash
@@cindex crash of assembler
@@item
If the assembler gets a fatal signal, for any input whatever, that is a
@@command{@@value{AS}} bug.  Reliable assemblers never crash.

@@cindex error on valid input
@@item
If @@command{@@value{AS}} produces an error message for valid input, that is a bug.

@@cindex invalid input
@@item
If @@command{@@value{AS}} does not produce an error message for invalid input, that
is a bug.  However, you should note that your idea of ``invalid input'' might
be our idea of ``an extension'' or ``support for traditional practice''.

@@item
If you are an experienced user of assemblers, your suggestions for improvement
of @@command{@@value{AS}} are welcome in any case.
@@end itemize

@@node Bug Reporting
@@section How to Report Bugs
@@cindex bug reports
@@cindex assembler bugs, reporting

A number of companies and individuals offer support for @@sc{gnu} products.  If
you obtained @@command{@@value{AS}} from a support organization, we recommend you
contact that organization first.

You can find contact information for many support companies and
individuals in the file @@file{etc/SERVICE} in the @@sc{gnu} Emacs
distribution.

In any event, we also recommend that you send bug reports for @@command{@@value{AS}}
to @@samp{bug-binutils@@@@gnu.org}.

The fundamental principle of reporting bugs usefully is this:
@@strong{report all the facts}.  If you are not sure whether to state a
fact or leave it out, state it!

Often people omit facts because they think they know what causes the problem
and assume that some details do not matter.  Thus, you might assume that the
name of a symbol you use in an example does not matter.  Well, probably it does
not, but one cannot be sure.  Perhaps the bug is a stray memory reference which
happens to fetch from the location where that name is stored in memory;
perhaps, if the name were different, the contents of that location would fool
the assembler into doing the right thing despite the bug.  Play it safe and
give a specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

Keep in mind that the purpose of a bug report is to enable us to fix the bug if
it is new to us.  Therefore, always write your bug reports on the assumption
that the bug has not been reported previously.

Sometimes people give a few sketchy facts and ask, ``Does this ring a
bell?''  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.
You might as well expedite matters by sending them to begin with.

To enable us to fix the bug, you should include all these things:

@@itemize @@bullet
@@item
The version of @@command{@@value{AS}}.  @@command{@@value{AS}} announces it if you start
it with the @@samp{--version} argument.

Without this, we will not know whether there is any point in looking for
the bug in the current version of @@command{@@value{AS}}.

@@item
Any patches you may have applied to the @@command{@@value{AS}} source.

@@item
The type of machine you are using, and the operating system name and
version number.

@@item
What compiler (and its version) was used to compile @@command{@@value{AS}}---e.g.
``@@code{gcc-2.7}''.

@@item
The command arguments you gave the assembler to assemble your example and
observe the bug.  To guarantee you will not omit something important, list them
all.  A copy of the Makefile (or the output from make) is sufficient.

If we were to try to guess the arguments, we would probably guess wrong
and then we might not encounter the bug.

@@item
A complete input file that will reproduce the bug.  If the bug is observed when
the assembler is invoked via a compiler, send the assembler source, not the
high level language source.  Most compilers will produce the assembler source
when run with the @@samp{-S} option.  If you are using @@code{@@value{GCC}}, use
the options @@samp{-v --save-temps}; this will save the assembler source in a
file with an extension of @@file{.s}, and also show you exactly how
@@command{@@value{AS}} is being run.

@@item
A description of what behavior you observe that you believe is
incorrect.  For example, ``It gets a fatal signal.''

Of course, if the bug is that @@command{@@value{AS}} gets a fatal signal, then we
will certainly notice it.  But if the bug is incorrect output, we might not
notice unless it is glaringly wrong.  You might as well not give us a chance to
make a mistake.

Even if the problem you experience is a fatal signal, you should still say so
explicitly.  Suppose something strange is going on, such as, your copy of
@@command{@@value{AS}} is out of synch, or you have encountered a bug in the C
library on your system.  (This has happened!)  Your copy might crash and ours
would not.  If you told us to expect a crash, then when ours fails to crash, we
would know that the bug was not happening for us.  If you had not told us to
expect a crash, then we would not be able to draw any conclusion from our
observations.

@@item
If you wish to suggest changes to the @@command{@@value{AS}} source, send us context
diffs, as generated by @@code{diff} with the @@samp{-u}, @@samp{-c}, or @@samp{-p}
option.  Always send diffs from the old file to the new file.  If you even
discuss something in the @@command{@@value{AS}} source, refer to it by context, not
by line number.

The line numbers in our development sources will not match those in your
sources.  Your line numbers would convey no useful information to us.
@@end itemize

Here are some things that are not necessary:

@@itemize @@bullet
@@item
A description of the envelope of the bug.

Often people who encounter a bug spend a lot of time investigating
which changes to the input file will make the bug go away and which
changes will not affect it.

This is often time consuming and not very useful, because the way we
will find the bug is by running a single example under the debugger
with breakpoints, not by pure deduction from a series of examples.
We recommend that you save your time for something else.

Of course, if you can find a simpler example to report @@emph{instead}
of the original one, that is a convenience for us.  Errors in the
output will be easier to spot, running under the debugger will take
less time, and so on.

However, simplification is not vital; if you do not want to do this,
report the bug anyway and send us the entire test case you used.

@@item
A patch for the bug.

A patch for the bug does help us if it is a good one.  But do not omit
the necessary information, such as the test case, on the assumption that
a patch is all we need.  We might see problems with your patch and decide
to fix the problem another way, or we might not understand it at all.

Sometimes with a program as complicated as @@command{@@value{AS}} it is very hard to
construct an example that will make the program follow a certain path through
the code.  If you do not send us the example, we will not be able to construct
one, so we will not be able to verify that the bug is fixed.

And if we cannot understand what bug you are trying to fix, or why your
patch should be an improvement, we will not install it.  A test case will
help us to understand.

@@item
A guess about what the bug is or what it depends on.

Such guesses are usually wrong.  Even we cannot guess right about such
things without first using the debugger to find the facts.
@@end itemize

@@node Acknowledgements
@@chapter Acknowledgements

If you have contributed to @@command{@@value{AS}} and your name isn't listed here,
it is not meant as a slight.  We just don't know about it.  Send mail to the
maintainer, and we'll correct the situation.  Currently 
@@c (January 1994), 
the maintainer is Ken Raeburn (email address @@code{raeburn@@@@cygnus.com}).

Dean Elsner wrote the original @@sc{gnu} assembler for the VAX.@@footnote{Any
more details?}

Jay Fenlason maintained GAS for a while, adding support for GDB-specific debug
information and the 68k series machines, most of the preprocessing pass, and
extensive changes in @@file{messages.c}, @@file{input-file.c}, @@file{write.c}.

K. Richard Pixley maintained GAS for a while, adding various enhancements and
many bug fixes, including merging support for several processors, breaking GAS
up to handle multiple object file format back ends (including heavy rewrite,
testing, an integration of the coff and b.out back ends), adding configuration
including heavy testing and verification of cross assemblers and file splits
and renaming, converted GAS to strictly ANSI C including full prototypes, added
support for m680[34]0 and cpu32, did considerable work on i960 including a COFF
port (including considerable amounts of reverse engineering), a SPARC opcode
file rewrite, DECstation, rs6000, and hp300hpux host ports, updated ``know''
assertions and made them work, much other reorganization, cleanup, and lint.

Ken Raeburn wrote the high-level BFD interface code to replace most of the code
in format-specific I/O modules.

The original VMS support was contributed by David L. Kashtan.  Eric Youngdale
has done much work with it since.

The Intel 80386 machine description was written by Eliot Dresselhaus.

Minh Tran-Le at IntelliCorp contributed some AIX 386 support.

The Motorola 88k machine description was contributed by Devon Bowen of Buffalo
University and Torbjorn Granlund of the Swedish Institute of Computer Science.

Keith Knowles at the Open Software Foundation wrote the original MIPS back end
(@@file{tc-mips.c}, @@file{tc-mips.h}), and contributed Rose format support
(which hasn't been merged in yet).  Ralph Campbell worked with the MIPS code to
support a.out format.

Support for the Zilog Z8k and Renesas H8/300 and H8/500 processors (tc-z8k,
tc-h8300, tc-h8500), and IEEE 695 object file format (obj-ieee), was written by
Steve Chamberlain of Cygnus Support.  Steve also modified the COFF back end to
use BFD for some low-level operations, for use with the H8/300 and AMD 29k
targets.

John Gilmore built the AMD 29000 support, added @@code{.include} support, and
simplified the configuration of which versions accept which directives.  He
updated the 68k machine description so that Motorola's opcodes always produced
fixed-size instructions (e.g., @@code{jsr}), while synthetic instructions
remained shrinkable (@@code{jbsr}).  John fixed many bugs, including true tested
cross-compilation support, and one bug in relaxation that took a week and
required the proverbial one-bit fix.

Ian Lance Taylor of Cygnus Support merged the Motorola and MIT syntax for the
68k, completed support for some COFF targets (68k, i386 SVR3, and SCO Unix),
added support for MIPS ECOFF and ELF targets, wrote the initial RS/6000 and
PowerPC assembler, and made a few other minor patches.

Steve Chamberlain made @@command{@@value{AS}} able to generate listings.

Hewlett-Packard contributed support for the HP9000/300.

Jeff Law wrote GAS and BFD support for the native HPPA object format (SOM)
along with a fairly extensive HPPA testsuite (for both SOM and ELF object
formats).  This work was supported by both the Center for Software Science at
the University of Utah and Cygnus Support.

Support for ELF format files has been worked on by Mark Eichin of Cygnus
Support (original, incomplete implementation for SPARC), Pete Hoogenboom and
Jeff Law at the University of Utah (HPPA mainly), Michael Meissner of the Open
Software Foundation (i386 mainly), and Ken Raeburn of Cygnus Support (sparc,
and some initial 64-bit support).

Linas Vepstas added GAS support for the ESA/390 ``IBM 370'' architecture.

Richard Henderson rewrote the Alpha assembler. Klaus Kaempf wrote GAS and BFD
support for openVMS/Alpha.

Timothy Wall, Michael Hayes, and Greg Smart contributed to the various tic*
flavors.

David Heine, Sterling Augustine, Bob Wilson and John Ruttenberg from Tensilica,
Inc. added support for Xtensa processors.

Several engineers at Cygnus Support have also provided many small bug fixes and
configuration enhancements.

Many others have contributed large or small bugfixes and enhancements.  If
you have contributed significant work and are not mentioned on this list, and
want to be, let us know.  Some of the history has been lost; we are not
intentionally leaving anyone out.

@@include fdl.texi

@@node Index
@@unnumbered Index

@@printindex cp

@@contents
@@bye
@@c Local Variables:
@@c fill-column: 79
@@c End:
@


1.10
log
@change the name "as" in the NAME section of the as(1) manuals to lowercase;
requested by and OK jmc@@
@
text
@d2001 2
a2002 2
specific portions of the by putting a line that says @@code{#APP} before the
text that may contain whitespace or comments, and putting a line that says
@


1.9
log
@Add support for .loc directive options basic_block, prologue_end, and epilogue_begin.

Backported from binutils 2.17.

ok miod@@
@
text
@d217 2
a218 1
@@c man title AS the portable GNU assembler.
@


1.8
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@a3734 1
* Ln::                          @@code{.ln @@var{line-number}}
d3737 4
d4039 46
@


1.7
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d3 1
a3 1
@@c  2001, 2002
d22 2
a26 39
@@c man begin NAME
@@ifset man
@@c Configure for the generation of man pages
@@set AS as
@@set TARGET TARGET
@@set GENERIC
@@set A29K
@@set ALPHA
@@set ARC
@@set ARM
@@set CRIS
@@set D10V
@@set D30V
@@set H8/300
@@set H8/500
@@set HPPA
@@set I370
@@set I80386
@@set I860
@@set I960
@@set IA-64
@@set IP2K
@@set M32R
@@set M68HC11
@@set M680X0
@@set M880X0
@@set MCORE
@@set MIPS
@@set MMIX
@@set PDP11
@@set PJ
@@set PPC
@@set SH
@@set SPARC
@@set TIC54X
@@set V850
@@set VAX
@@set XTENSA
@@end ifset
d28 1
d230 2
a231 2
 [@@b{-f}] [@@b{--gstabs}] [@@b{--gdwarf2}] [@@b{--help}] [@@b{-I} @@var{dir}] 
 [@@b{-J}] [@@b{-K}] [@@b{-L}]
d264 2
a265 1
   [@@b{-mfpu}=@@var{floating-point-fromat}]
d300 1
a300 1
   [@@b{--32}|@@b{--64}]
d353 1
a353 1
   [@@b{-nocpp}] [@@b{-EL}] [@@b{-EB}] [@@b{-n}] [@@b{-O}[@@var{optimization level}]]
d359 1
a359 1
   [@@b{-mips64}]
d367 1
d482 7
d603 2
d904 1
d909 2
a910 1
@@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2}, and @@samp{-mips64}
d912 3
a914 3
@@samp{MIPS V}, @@samp{MIPS32}, @@samp{MIPS32 Release 2}, and
@@samp{MIPS64} ISA processors,
respectively.
d932 4
d2069 1
a2069 1
@@samp{;} for Motorola PowerPC;
d3674 3
d3871 2
a3872 3
For the a29k, hppa, m68k, m88k, w65, sparc, Xtensa, and Renesas / SuperH SH,
and i386 using ELF format,
the first expression is the
d3875 2
a3876 1
is already a multiple of 8, no change is needed.
d3984 53
d4303 1
a4303 1
Only @@samp{--gstabs} is currently supported.
@


1.6
log
@resolve conflicts.
@
text
@d3 1
a3 1
@@c  2001
d16 3
d25 40
d66 6
d130 1
d141 9
a149 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
d151 1
a151 6
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
d174 1
a174 1
first (Vax) version of @@code{as} for Project @@sc{gnu}.
d195 1
a195 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
d202 1
a202 1
      section entitled "GNU Free Documentation License".
d206 1
a206 1
@@ifinfo
d210 1
a210 1
This file is a user guide to the @@sc{gnu} assembler @@code{@@value{AS}} version
d213 1
a213 1
This version of the file describes @@code{@@value{AS}} configured to generate
d219 1
a219 1
section entitled "GNU Free Documentation License".
d235 1
a235 1
@@end ifinfo
d240 1
a240 1
This manual is a user guide to the @@sc{gnu} assembler @@code{@@value{AS}}.
d242 1
a242 1
This version of the manual describes @@code{@@value{AS}} configured to generate
d250 10
a259 2
Here is a brief summary of how to invoke @@code{@@value{AS}}.  For details,
@@pxref{Invoking,,Comand-Line Options}.
d264 13
a276 5
@@value{AS} [ -a[cdhlns][=file] ] [ -D ]  [ --defsym @@var{sym}=@@var{val} ]
 [ -f ] [ --gstabs ] [ --gdwarf2 ] [ --help ] [ -I @@var{dir} ] [ -J ] [ -K ] [ -L ]
 [ --keep-locals ] [ -o @@var{objfile} ] [ -R ] [ --statistics ] [ -v ]
 [ -version ] [ --version ] [ -W ] [ --warn ] [ --fatal-warnings ] 
 [ -w ] [ -x ] [ -Z ] [ --target-help ]
d280 8
d289 4
a292 2
 [ -marc[5|6|7|8] ]
 [ -EB | -EL ]
d295 20
a314 14
 [ -m[arm]1 | -m[arm]2 | -m[arm]250 | -m[arm]3 | -m[arm]6 | -m[arm]60 |
   -m[arm]600 | -m[arm]610 | -m[arm]620 | -m[arm]7[t][[d]m[i]][fe] | -m[arm]70 |
   -m[arm]700 | -m[arm]710[c] | -m[arm]7100 | -m[arm]7500 | -m[arm]8 |
   -m[arm]810 | -m[arm]9 | -m[arm]920 | -m[arm]920t | -m[arm]9tdmi |
   -mstrongarm | -mstrongarm110 | -mstrongarm1100 ]
 [ -m[arm]v2 | -m[arm]v2a | -m[arm]v3 | -m[arm]v3m | -m[arm]v4 | -m[arm]v4t |
   -m[arm]v5 | -[arm]v5t | -[arm]v5te ]
 [ -mthumb | -mall ]
 [ -mfpa10 | -mfpa11 | -mfpe-old | -mno-fpu ]
 [ -EB | -EL ]
 [ -mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant ]
 [ -mthumb-interwork ]
 [ -moabi ]
 [ -k ]
d317 3
a319 1
 [ -O ]
d322 3
a324 1
 [ -O | -n | -N ]
d327 1
a327 1
@@c Hitachi family chips have no machine-dependent assembler options
d332 4
a335 15
@@ifset PJ
 [ -mb | -me ]
@@end ifset
@@ifset SPARC
@@c The order here is important.  See c-sparc.texi.
 [ -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite
   -Av8plus | -Av8plusa | -Av9 | -Av9a ]
 [ -xarch=v8plus | -xarch=v8plusa ] [ -bump ] [ -32 | -64 ]
@@end ifset
@@ifset TIC54X
 [ -mcpu=54[123589] | -mcpu=54[56]lp ] [ -mfar-mode | -mf ] 
 [ -merrors-to-file <filename> | -me <filename> ]
@@end ifset
@@ifset Z8000
@@c Z8000 has no machine-dependent assembler options
d338 2
d341 16
a356 2
 [ -ACA | -ACA_A | -ACB | -ACC | -AKA | -AKB | -AKC | -AMC ]
 [ -b ] [ -no-relax ]
d359 4
a362 1
 [ --m32rx | --[no-]warn-explicit-parallel-conflicts | --W[n]p ]
d365 13
a377 1
 [ -l ] [ -m68000 | -m68010 | -m68020 | ... ]
d380 42
a421 2
 [ -jsri2bsr ] [ -sifilter ] [ -relax ]
 [ -mcpu=[210|340] ]
d423 29
a451 4
@@ifset M68HC11
 [ -m68hc11 | -m68hc12 ]
 [ --force-long-branchs ] [ --short-branchs ] [ --strict-direct-mode ]
 [ --print-insn-syntax ] [ --print-opcodes ] [ --generate-example ]
d453 6
a458 7
@@ifset MIPS
 [ -nocpp ] [ -EL ] [ -EB ] [ -G @@var{num} ] [ -mcpu=@@var{CPU} ]
 [ -mips1 ] [ -mips2 ] [ -mips3 ] [ -mips4 ] [ -mips5 ]
 [ -mips32 ] [ -mips64 ]
 [ -m4650 ] [ -no-m4650 ]
 [ --trap ] [ --break ]
 [ --emulation=@@var{name} ]
d460 1
a460 1
 [ -- | @@var{files} @@dots{} ]
d463 3
a465 1
@@table @@code
d469 1
a469 1
@@table @@code
d518 1
a518 1
may help debugging assembler code, if the debugger can handle it.  Note - this
d547 16
d564 1
a564 1
Name the object-file output from @@code{@@value{AS}} @@var{objfile}.
d578 1
a578 1
Print the @@code{as} version.
d581 1
a581 1
Print the @@code{as} version and exit.
d611 1
a611 1
@@table @@code
d623 2
a624 2
@@table @@code
@@item -m[arm][1|2|3|6|7|8|9][...] 
d626 1
a626 1
@@item -m[arm]v[2|2a|3|3m|4|4t|5|5t]
d628 1
a628 3
@@item -mthumb | -mall
Enable or disable Thumb only instruction decoding.
@@item -mfpa10 | -mfpa11 | -mfpe-old | -mno-fpu
d630 2
d644 4
d651 1
a651 1
@@table @@code
d662 1
a662 1
@@table @@code
d682 1
a682 1
@@table @@code
d696 16
d714 1
a714 1
Mitsubishi M32R series.
d716 1
a716 1
@@table @@code
d737 1
a737 1
@@table @@code
d742 3
a744 2
@@item -m68000 | -m68008 | -m68010 | -m68020 | -m68030 | -m68040 | -m68060
@@itemx | -m68302 | -m68331 | -m68332 | -m68333 | -m68340 | -mcpu32 | -m5200
d762 31
d797 1
a797 1
@@table @@code
d816 1
a816 1
@@table @@code
d818 1
a818 1
@@item -m68hc11 | -m68hc12
d822 12
d855 1
a855 1
This option is only useful for testing @@code{@@value{AS}}.
d861 1
a861 1
The following options are available when @@code{@@value{AS}} is configured
d864 1
a864 1
@@table @@code
d888 1
a888 1
@@table @@code
d902 1
a902 1
a MIPS processor.
d904 1
a904 1
@@table @@code
d925 1
d927 60
a986 19
Generate code for a particular MIPS Instruction Set Architecture level.
@@samp{-mips1} corresponds to the @@sc{r2000} and @@sc{r3000} processors,
@@samp{-mips2} to the @@sc{r6000} processor, and @@samp{-mips3} to the @@sc{r4000}
processor.
@@samp{-mips5}, @@samp{-mips32}, and @@samp{-mips64} correspond
to generic @@sc{MIPS V}, @@sc{MIPS32}, and @@sc{MIPS64} ISA
processors, respectively.

@@item -m4650
@@itemx -no-m4650
Generate code for the MIPS @@sc{r4650} chip.  This tells the assembler to accept
the @@samp{mad} and @@samp{madu} instruction, and to not schedule @@samp{nop}
instructions around accesses to the @@samp{HI} and @@samp{LO} registers.
@@samp{-no-m4650} turns off this option.

@@item -mcpu=@@var{CPU}
Generate code for a particular MIPS cpu.  It is exactly equivalent to
@@samp{-m@@var{cpu}}, except that there are more value of @@var{cpu}
understood.
d990 1
a990 1
This option causes @@code{@@value{AS}} to emulate @@code{@@value{AS}} configured
d1003 1
a1003 1
@@code{@@value{AS}} is configured for is a MIPS ELF or ECOFF target.
d1014 1
a1014 1
@@code{@@value{AS}} ignores this option.  It is accepted for compatibility with
a1016 1
@@need 900
d1026 4
d1037 1
a1037 1
@@table @@code
d1064 45
d1124 1
a1124 1
@@sc{gnu} @@code{@@value{AS}}.  We cover the syntax expected in source files, including
d1126 1
a1126 1
@@code{@@value{AS}} understands; and of course how to invoke @@code{@@value{AS}}.
d1130 1
a1130 1
configuration of @@code{@@value{AS}}, including assembler directives.
d1151 2
a1152 2
Series Programming Manual} (Hitachi ADE--602--025).  For the H8/300H,
see @@cite{H8/300H Series Programming Manual} (Hitachi).
d1156 1
a1156 1
Series Programming Manual} (Hitachi M21T001).
d1159 4
a1162 2
For information on the Hitachi SH machine instruction set, see
@@cite{SH-Microcomputer User's Manual} (Hitachi Micro Systems, Inc.).
d1178 1
a1178 1
@@code{@@value{AS}} is part of a team of programs that turn a high-level
d1181 1
a1181 1
@@code{@@value{AS}} are used for different kinds of computer.
d1196 3
a1198 1
@@sc{gnu} @@code{as} is really a family of assemblers.
d1200 1
a1200 1
This manual describes @@code{@@value{AS}}, a member of that family which is
d1210 1
a1210 1
@@code{@@value{AS}} is primarily intended to assemble the output of the
d1212 1
a1212 1
@@code{@@value{LD}}.  Nevertheless, we've tried to make @@code{@@value{AS}}
d1221 1
a1221 1
This doesn't mean @@code{@@value{AS}} always uses the same syntax as another
d1226 3
a1228 1
Unlike older assemblers, @@code{@@value{AS}} is designed to assemble a source
d1243 1
a1243 1
On the @@value{TARGET}, @@code{@@value{AS}} is configured to produce
d1248 1
a1248 1
On the @@value{TARGET}, @@code{@@value{AS}} can be configured to produce either
d1252 1
a1252 1
On the @@value{TARGET}, @@code{@@value{AS}} can be configured to produce either
d1256 1
a1256 1
On the @@value{TARGET}, @@code{@@value{AS}} can be configured to produce either
d1265 2
a1266 1
After the program name @@code{@@value{AS}}, the command line may contain
d1274 1
a1274 1
explicitly, as one of the files for @@code{@@value{AS}} to assemble.
d1279 1
a1279 1
@@code{@@value{AS}}.  No option changes the way another option works.  An
d1300 1
a1300 1
describe the program input to one run of @@code{@@value{AS}}.  The program may
d1309 2
a1310 1
Each time you run @@code{@@value{AS}} it assembles exactly one source
d1314 1
a1314 1
You give @@code{@@value{AS}} a command line that has zero or more input file
d1319 3
a1321 3
If you give @@code{@@value{AS}} no file names it attempts to read one input file
from the @@code{@@value{AS}} standard input, which is normally your terminal.  You
may have to type @@key{ctl-D} to tell @@code{@@value{AS}} there is no more program
d1327 1
a1327 1
If the source is empty, @@code{@@value{AS}} produces a small, empty object
d1330 2
d1342 1
a1342 1
to @@code{@@value{AS}}.
d1346 2
a1347 2
error messages reflect the original source file, when @@code{@@value{AS}} source
is itself synthesized from other files.  @@code{@@value{AS}} understands the
d1358 1
a1358 1
Every time you run @@code{@@value{AS}} it produces an output file, which is
d1368 1
a1368 1
@@code{b.out} when @@code{@@value{AS}} is configured for the Intel 80960.
d1370 1
a1370 1
You can give it another name by using the @@code{-o} option.  Conventionally,
d1389 2
d1394 1
a1394 1
@@code{@@value{AS}} may write warnings and error messages to the standard error
d1396 2
a1397 2
runs @@code{@@value{AS}} automatically.  Warnings report an assumption made so
that @@code{@@value{AS}} could keep assembling a flawed program; errors report a
d1400 2
d1446 1
a1446 1
to the @@value{TARGET}.
d1452 3
a1454 1
If you are invoking @@code{@@value{AS}} via the @@sc{gnu} C compiler (version 2),
d1465 1
a1465 1
standard output with with high-level and assembly source) and @@samp{-L} (retain
d1474 2
d1489 1
d1502 1
a1502 1
@@section Enable Listings: @@code{-a[cdhlns]}
d1543 7
d1551 1
a1551 1
@@section @@code{-D}
d1556 1
a1556 1
@@code{@@value{AS}}.
d1559 1
a1559 1
@@section Work Faster: @@code{-f}
d1563 1
a1563 1
@@cindex faster processing (@@code{-f})
d1572 1
a1572 1
preprocessed (if they contain comments, for example), @@code{@@value{AS}} does
d1577 1
a1577 1
@@section @@code{.include} search path: @@code{-I} @@var{path}
d1584 2
a1585 2
@@code{@@value{AS}} searches for files specified in @@code{.include}
directives (@@pxref{Include,,@@code{.include}}).  You may use @@code{-I} as
d1587 1
a1587 1
working directory is always searched first; after that, @@code{@@value{AS}}
d1592 1
a1592 1
@@section Difference Tables: @@code{-K}
d1607 1
a1607 1
@@code{@@value{AS}} sometimes alters the code emitted for directives of the form
d1614 1
a1614 1
@@section Include Local Labels: @@code{-L}
d1622 1
a1622 1
Normally both @@code{@@value{AS}} and @@code{@@value{LD}} discard such labels, so you do not
d1625 1
a1625 1
This option tells @@code{@@value{AS}} to retain those @@samp{L@@dots{}} symbols
d1635 39
d1675 1
a1675 1
@@section Assemble in MRI Compatibility Mode: @@code{-M}
d1679 2
a1680 2
The @@code{-M} or @@code{--mri} option selects MRI compatibility mode.  This
changes the syntax and pseudo-op handling of @@code{@@value{AS}} to make it
d1686 1
a1686 1
assembling existing MRI assembler code using @@code{@@value{AS}}.
d1697 1
a1697 1
Other object file formats do not support this.  @@code{@@value{AS}} handles
d1712 1
a1712 1
instead be specified using the @@code{-e} option to the linker, or in a linker
d1723 1
a1723 1
address.  This differs from the usual @@code{@@value{AS}} @@code{.org} pseudo-op,
d1730 1
a1730 1
@@code{@@value{AS}}, typically either because they are difficult or because they
d1755 1
a1755 1
@@code{BRL}, and @@code{BRW}---are ignored.  @@code{@@value{AS}} automatically
d1806 1
a1806 1
@@section Dependency tracking: @@code{--MD}
d1812 1
a1812 1
@@code{@@value{AS}} can generate a dependency file for the file it creates.  This
d1821 1
a1821 1
@@section Name the Object File: @@code{-o}
d1826 1
a1826 1
There is always one object file output when you run @@code{@@value{AS}}.  By
d1847 1
a1847 1
Whatever the object file is called, @@code{@@value{AS}} overwrites any
d1851 1
a1851 1
@@section Join Data and Text Sections: @@code{-R}
d1858 1
a1858 1
@@code{-R} tells @@code{@@value{AS}} to write the object file as if all
d1865 1
a1865 1
When you specify @@code{-R} it would be possible to generate shorter
d1868 1
a1868 1
older versions of @@code{@@value{AS}}.  In future, @@code{-R} may work this way.
d1870 2
a1871 2
@@ifset COFF
When @@code{@@value{AS}} is configured for COFF output,
d1877 2
a1878 2
@@code{-R} is not supported for any of the HPPA targets.  Using
@@code{-R} generates a warning from @@code{@@value{AS}}.
d1882 1
a1882 1
@@section Display Assembly Statistics: @@code{--statistics}
d1889 1
a1889 1
@@code{@@value{AS}}: the maximum amount of space allocated during the assembly
d1894 1
a1894 1
@@section Compatible output: @@code{--traditional-format}
d1897 1
a1897 1
For some targets, the output of @@code{@@value{AS}} is different in some ways
d1899 1
a1899 1
@@code{@@value{AS}} to use the traditional format instead.
d1902 1
a1902 1
@@code{@@value{AS}} normally does by default on @@code{@@value{GCC}} output.
d1905 1
a1905 1
@@section Announce Version: @@code{-v}
d1916 1
a1916 1
@@section Control Warnings: @@code{-W}, @@code{--warn}, @@code{--no-warn}, @@code{--fatal-warnings}
d1918 1
a1918 1
@@code{@@value{AS}} should never give a warning or error message when
d1920 1
a1920 1
cause @@code{@@value{AS}} to give a warning that a particular assumption was
d1923 2
a1924 2
@@kindex @@samp{-W}
@@kindex @@samp{--no-warn}
d1927 1
a1927 1
If you use the @@code{-W} and @@code{--no-warn} options, no warnings are issued.
d1929 1
a1929 1
how @@code{@@value{AS}} assembles your file.  Errors, which stop the assembly,
d1932 1
a1932 1
@@kindex @@samp{--fatal-warnings}
d1935 1
a1935 1
If you use the @@code{--fatal-warnings} option, @@code{@@value{AS}} considers
d1938 1
a1938 1
@@kindex @@samp{--warn}
d1940 1
a1940 1
You can switch these options off again by specifying @@code{--warn}, which
d1944 1
a1944 1
@@section Generate Object File in Spite of Errors: @@code{-Z}
d1947 1
a1947 1
After an error message, @@code{@@value{AS}} normally produces no output.  If for
d1949 2
a1950 2
@@code{@@value{AS}} gives an error message on your program, use the @@samp{-Z}
option.  If there are any errors, @@code{@@value{AS}} continues anyways, and
d1960 1
a1960 1
source file.  @@code{@@value{AS}} syntax is similar to what many other
d1966 1
a1966 1
assembler, except that @@code{@@value{AS}} does not assemble Vax bit-fields.
d1982 1
a1982 1
The @@code{@@value{AS}} internal preprocessor:
d2004 1
a2004 1
to get other ``CPP'' style preprocessing, by giving the input file a
d2039 1
a2039 1
There are two ways of rendering comments to @@code{@@value{AS}}.  In both
d2081 3
d2087 3
d2091 1
a2091 1
@@samp{!} for the Hitachi SH;
d2096 3
d2108 3
d2120 3
d2124 1
a2124 1
@@c FIXME What about m88k, i860?
d2157 1
a2157 1
of @@code{@@value{AS}}.
d2218 1
a2218 1
Hitachi-SH or the
d2255 1
a2255 1
Different versions of @@code{@@value{AS}} for different computers
d2326 2
a2327 2
@@code{@@value{AS}} to interpret the second character literally as a backslash
(which prevents @@code{@@value{AS}} from recognizing the second @@code{\} as an
d2410 2
a2411 2
interpretation of the following character.  However @@code{@@value{AS}} has no
other interpretation, so @@code{@@value{AS}} knows it is giving you the wrong
d2443 1
a2443 2
Hitachi SH or
H8/500)
d2450 1
a2450 1
that character.  @@code{@@value{AS}} assumes your character code is ASCII:
d2458 1
a2458 1
@@code{@@value{AS}} distinguishes three kinds of numbers according to how they
d2523 1
a2523 1
@@code{@@value{AS}} to a generic binary floating point number of more than
d2526 1
a2526 1
portion of @@code{@@value{AS}} specialized to that computer.
d2537 1
a2537 1
A letter, to tell @@code{@@value{AS}} the rest of the number is a flonum.
d2547 1
a2547 1
Hitachi SH,
d2606 1
a2606 1
@@code{@@value{AS}} does all processing using integers.  Flonums are computed
d2608 1
a2608 1
@@code{@@value{AS}}.
d2626 1
a2626 1
@@code{@@value{AS}} applies a bitwise @@sc{and} between @@var{mask} and
d2668 1
a2668 1
combines their contents to form a runnable program.  When @@code{@@value{AS}}
d2672 1
a2672 1
oversimplification, but it suffices to explain how @@code{@@value{AS}} uses
d2684 2
a2685 2
and for the Hitachi SH,
@@code{@@value{AS}} pads sections if needed to
d2690 1
a2690 1
An object file written by @@code{@@value{AS}} has at least three sections, any
d2694 1
a2694 1
@@ifset COFF
d2696 1
a2696 1
When it generates COFF output,
d2698 1
a2698 1
@@code{@@value{AS}} can also generate whatever other named sections you specify
d2706 1
a2706 1
When @@code{@@value{AS}} generates SOM or ELF output for the HPPA,
d2708 1
a2708 1
@@code{@@value{AS}} can also generate whatever other named sections you
d2715 1
a2715 1
Additionally, @@code{@@value{AS}} uses different names for the standard
d2732 1
a2732 1
relocated, and how to change that data, @@code{@@value{AS}} also writes to the
d2753 1
a2753 1
In fact, every address @@code{@@value{AS}} ever uses is expressed as
d2758 1
a2758 1
Further, most expressions @@code{@@value{AS}} computes have this section-relative
d2794 1
a2794 1
use of @@code{@@value{AS}} and have no meaning except during assembly.
d2802 1
a2802 1
@@ifset COFF
d2813 1
a2813 1
These sections hold your program.  @@code{@@value{AS}} and @@code{@@value{LD}} treat them as
d2815 2
a2816 2
true another.
@@ifset aout-bout
d2823 1
a2823 1
@@end ifset
d2850 1
a2850 1
@@ifset COFF
d2856 1
a2856 1
@@ifinfo
d2877 1
a2877 1
@@end ifinfo
d2880 1
a2880 1

d2906 1
a2906 1
These sections are meant only for the internal use of @@code{@@value{AS}}.  They
d2908 1
a2908 1
sections for most purposes; but they can be mentioned in @@code{@@value{AS}}
d2910 1
a2910 1
meanings to @@code{@@value{AS}}.  These sections are used to permit the
d2938 1
a2938 1
@@ifset COFF
d2956 1
a2956 1
are not contiguous in the assembler source.  @@code{@@value{AS}} allows you to
d2972 1
a2972 1
of @@code{@@value{AS}}.)
d2978 1
a2978 1
The same is true on the Hitachi SH.
d3004 1
a3004 1
@@ifset COFF
d3006 1
a3006 1
When generating COFF output, you
d3034 1
a3034 1
restricted to @@code{@@value{AS}} there is no concept of a subsection location
d3075 1
a3075 1
@@emph{Warning:} @@code{@@value{AS}} does not place symbols in the object file in
d3101 1
a3101 1
a single line.  To work around this, the HPPA version of @@code{@@value{AS}} also
d3135 3
a3137 4
Hitachi SH or the
H8/500, you can also use @@code{$} in symbol names.  That character may
be followed by any string of digits, letters, dollar signs (save on the
H8/300), and underscores.
d3155 39
a3193 20
There are ten local symbol names, which are re-used throughout the
program.  You may refer to them using the names @@samp{0} @@samp{1}
@@dots{} @@samp{9}.  To define a local symbol, write a label of the form
@@samp{@@b{N}:} (where @@b{N} represents any digit).  To refer to the most
recent previous definition of that symbol write @@samp{@@b{N}b}, using the
same digit as when you defined the label.  To refer to the next
definition of a local label, write @@samp{@@b{N}f}---where @@b{N} gives you
a choice of 10 forward references.  The @@samp{b} stands for
``backwards'' and the @@samp{f} stands for ``forwards''.

Local symbols are not emitted by the current @@sc{gnu} C compiler.

There is no restriction on how you can use these labels, but
remember that at any point in the assembly you can refer to at most
10 prior local labels and to at most 10 forward local labels.

Local symbol names are only a notation device.  They are immediately
transformed into more conventional symbol names before the assembler
uses them.  The symbol names stored in the symbol table, appearing in
error messages and optionally emitted to the object file have these
d3198 1
a3198 1
All local labels begin with @@samp{L}. Normally both @@code{@@value{AS}} and
d3201 1
a3201 1
@@samp{-L} option then @@code{@@value{AS}} retains these symbols in the
d3205 7
a3211 9
@@item @@var{digit}
If the label is written @@samp{0:} then the digit is @@samp{0}.
If the label is written @@samp{1:} then the digit is @@samp{1}.
And so on up through @@samp{9:}.

@@item @@kbd{C-A}
This unusual character is included so you do not accidentally invent
a symbol of the same name.  The character has ASCII value
@@samp{\001}.
d3214 4
a3217 4
This is a serial number to keep the labels distinct.  The first
@@samp{0:} gets the number @@samp{1}; The 15th @@samp{0:} gets the
number @@samp{15}; @@emph{etc.}.  Likewise for the other labels @@samp{1:}
through @@samp{9:}.
d3220 21
a3240 2
For instance, the first @@code{1:} is named @@code{L1@@kbd{C-A}1}, the 44th
@@code{3:} is named @@code{L3@@kbd{C-A}44}.
d3250 1
a3250 1
@@code{@@value{AS}} is assembling into.  Thus, the expression @@samp{melvin:
d3275 1
a3275 1
If you use a symbol without defining it, @@code{@@value{AS}} assumes zero for
d3347 1
a3347 1
These symbol attributes appear only when @@code{@@value{AS}} is configured for
d3381 1
a3381 1
@@code{@@value{AS}}.
d3387 1
a3387 1
This is an arbitrary 8-bit value.  It means nothing to @@code{@@value{AS}}.
d3410 1
a3410 1
The @@code{@@value{AS}} directives @@code{.dim}, @@code{.line}, @@code{.scl},
d3441 1
a3441 1
enough information when @@code{@@value{AS}} sees the expression to know its
d3444 1
a3444 1
@@code{@@value{AS}} aborts with an error message in this situation.
d3458 1
a3458 1
expression, and @@code{@@value{AS}} assumes a value of (absolute) 0.  This
d3498 1
a3498 1
that only the low order 32 bits are used, and @@code{@@value{AS}} pretends
d3523 1
a3523 1
@@code{@@value{AS}} has the following @@dfn{prefix operators}.  They each take
d3551 1
a3551 1
to right.  Apart from @@code{+} or @@code{-}, both arguments must be
d3736 1
d3786 3
a3788 1
* Section::                     @@code{.section @@var{name}, @@var{subsection}}
d3794 1
d3796 2
d3818 1
d3820 2
d3846 1
a3846 1
of the source quit, it could use this directive tells @@code{@@value{AS}} to
d3854 1
a3854 1
When producing COFF output, @@code{@@value{AS}} accepts this directive as a
d3858 1
a3858 1
When producing @@code{b.out} output, @@code{@@value{AS}} accepts this directive,
d3887 2
a3888 2
For the a29k, hppa, m68k, m88k, w65, sparc, and Hitachi SH, and i386 using ELF
format,
d3990 1
a3990 1
no alignment is specified, @@code{@@value{AS}} will set the alignment to the
d4004 1
a4004 1
@@code{.data} tells @@code{@@value{AS}} to assemble the following statements onto the
d4020 1
a4020 1
This directive is only observed when @@code{@@value{AS}} is configured for COFF
d4037 1
a4037 1
The @@samp{.desc} directive is not available when @@code{@@value{AS}} is
d4039 1
a4039 1
object format.  For the sake of compatibility, @@code{@@value{AS}} accepts
d4057 1
a4057 1
@@code{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
d4071 1
a4071 1
@@code{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
d4093 1
a4093 1
@@code{.else} is part of the @@code{@@value{AS}} support for conditional
d4102 1
a4102 1
@@code{.elseif} is part of the @@code{@@value{AS}} support for conditional
d4110 1
a4110 1
@@code{.end} marks the end of the assembly file.  @@code{@@value{AS}} does not
d4123 1
a4123 1
@@code{@@value{AS}} is configured to generate @@code{b.out}, it accepts this
d4137 1
a4137 1
@@code{.endif} is part of the @@code{@@value{AS}} support for conditional assembly;
d4159 3
a4161 1
the assembler will signal an error if @@var{symbol} is already defined.
d4174 2
a4175 2
If @@code{@@value{AS}} assembles a @@code{.err} directive, it will print an error
message and, unless the @@code{-Z} option was used, it will not generate an
d4187 1
a4187 1
with other assemblers---but it is ignored.  @@code{@@value{AS}} treats
d4195 2
a4196 2
or more, @@code{@@value{AS}} will print a warning message.  If the value is less
than 500, @@code{@@value{AS}} will print an error message.  The message will
d4207 1
a4207 1
@@code{.file} tells @@code{@@value{AS}} that we are about to start a new logical
d4212 1
a4212 1
old @@code{@@value{AS}} programs.
d4214 1
a4214 1
In some configurations of @@code{@@value{AS}}, @@code{.file} has already been
d4225 1
a4225 1
@@var{result}, @@var{size} and @@var{value} are absolute expressions.
d4232 1
a4232 1
byte-order of an integer on the computer @@code{@@value{AS}} is assembling for.
d4251 1
a4251 1
@@code{@@value{AS}} is configured.
d4297 2
a4298 2
@@cindex @@code{.hidden} directive
@@cindex Visibility
d4337 1
a4337 1
@@code{@@value{AS}} simply accepts the directive for source-file
d4360 2
a4361 1
has been defined.
d4407 2
a4408 1
has not been defined.  Both spelling variants are equivalent.
d4421 16
d4464 1
a4464 1
integers.  On the H8/300H and the Hitachi SH, however, @@code{.int} emits
d4473 2
a4474 2
@@cindex @@code{.internal} directive
@@cindex Visibility
d4482 1
a4482 1
(ie not visible to other components), and that some extra, processor specific
d4569 1
a4569 1
@@code{@@value{AS}} accepts this directive, for compatibility with other
d4590 1
a4590 1
@@code{@@value{AS}} will no longer support this directive: it is recognized only
d4603 1
a4603 1
@@code{b.out} object-code formats, @@code{@@value{AS}} still recognizes it
d4658 1
a4658 1
Tell @@code{@@value{AS}} to change the logical line number.  @@var{line-number}
d4665 1
a4665 1
This directive is accepted, but ignored, when @@code{@@value{AS}} is
d4676 2
a4677 2
If @@var{val} is non-zero, this tells @@code{@@value{AS}} to enter MRI mode.  If
@@var{val} is zero, this tells @@code{@@value{AS}} to exit MRI mode.  This change
d4798 1
a4798 1
@@code{@@value{AS}} maintains a counter of how many macros it has
d4853 1
a4853 1
@@code{@@value{AS}} issues a warning, then pretends the section of @@var{new-lc}
d4863 1
a4863 1
Because @@code{@@value{AS}} tries to assemble programs in one pass, @@var{new-lc}
d4917 1
a4917 1
@@cindex @@code{.previous} directive
d4937 1
a4937 1
@@cindex @@code{.popsection} directive
d4953 1
a4953 1
@@code{@@value{AS}} will print @@var{string} on the standard output during
d4960 2
a4961 2
@@cindex @@code{.protected} directive
@@cindex Visibility
d4986 1
a4986 1
@@code{@@value{AS}} generates formfeeds whenever the specified number of
d5004 1
a5004 1
@@cindex @@code{.pushsection} directive
d5087 1
a5087 1
configured to generate @@code{b.out} output format, @@code{@@value{AS}}
d5092 1
d5094 1
a5094 1
@@section @@code{.section @@var{name}} (COFF version)
a5095 1
@@cindex @@code{section} directive
d5104 7
d5136 2
d5142 3
a5144 1
loaded and writable.
d5148 1
d5150 5
a5155 5
@@section @@code{.section @@var{name}} (ELF version)

@@cindex @@code{section} directive
@@cindex named section
@@ifset ELF
a5160 1
@@end ifset
d5162 1
d5166 1
a5166 1
.section @@var{name} [, "@@var{flags}"[, @@@@@@var{type}]]
d5178 4
d5192 11
d5230 2
d5283 1
a5283 1
@@code{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
d5292 1
d5294 1
a5294 1
@@section @@code{.size} (COFF version)
d5296 15
a5310 4
@@cindex @@code{size} directive
This directive is generated by compilers to include auxiliary debugging
information in the symbol table.  It is only permitted inside
@@code{.def}/@@code{.endef} pairs.
d5314 1
a5314 1
@@code{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
d5317 7
d5325 6
a5330 2
@@section @@code{.size @@var{name} , @@var{expression}} (ELF version)
@@cindex @@code{size} directive
d5332 1
a5332 1
This directive is used to set the size associated with a symbol @@var{name}.
d5336 2
d5402 1
a5402 1
The symbols are not entered in the @@code{@@value{AS}} hash table: they
d5495 1
a5495 1
@@cindex @@code{.subsection} directive
d5577 1
a5577 1
@@code{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
d5586 1
a5586 1
Tells @@code{@@value{AS}} to assemble the following statements onto the end of
d5602 1
d5604 9
a5612 1
@@section @@code{.type @@var{int}} (COFF version)
d5616 10
a5625 3
@@cindex @@code{type} directive
This directive, permitted only within @@code{.def}/@@code{.endef} pairs,
records the integer @@var{int} as the type attribute of a symbol table entry.
d5629 1
a5629 1
@@code{@@value{AS}} is configured for @@code{b.out} output, it accepts this
d5632 1
d5634 5
a5638 1
@@section @@code{.type @@var{name} , @@var{type description}} (ELF version)
d5642 8
a5649 2
@@cindex @@code{type} directive
This directive is used to set the type of symbol @@var{name} to be either a
d5670 2
d5693 1
a5693 1
@@samp{.val} is used only for COFF output; when @@code{@@value{AS}} is
d5702 1
a5702 1
@@cindex @@code{.version}
d5711 1
a5711 1
@@cindex @@code{.vtable_entry}
d5718 1
a5718 1
@@cindex @@code{.vtable_inherit}
d5729 1
a5729 1
@@cindex @@code{.weak}
d5742 1
a5742 1
For each expression, @@code{@@value{AS}} emits a 32-bit number.
d5745 1
a5745 1
For each expression, @@code{@@value{AS}} emits a 16-bit number.
d5771 1
a5771 1
@@code{@@value{AS}} occasionally does strange things to @@samp{.word} directives.
d5773 1
a5773 1
compilers as part of jump tables.  Therefore, when @@code{@@value{AS}} assembles a
d5775 1
a5775 1
@@code{sym1} and @@code{sym2} does not fit in 16 bits, @@code{@@value{AS}}
d5793 1
a5793 1
@@emph{This feature may be disabled by compiling @@code{@@value{AS}} with the
d5818 2
a5819 2
each machine where @@code{@@value{AS}} runs.  Floating point representations
vary as well, and @@code{@@value{AS}} often supports a few additional
d5822 1
a5822 1
@@code{@@value{AS}} support special pseudo-instructions for branch
d5833 3
d5842 3
d5852 1
a5852 1
* H8/300-Dependent::            Hitachi H8/300 Dependent Features
d5855 1
a5855 1
* H8/500-Dependent::            Hitachi H8/500 Dependent Features
d5872 3
d5884 3
d5890 6
d5897 5
a5901 1
* SH-Dependent::                Hitachi SH Dependent Features
d5906 3
d5918 3
d5940 8
d5952 2
a5953 2
@@ifset A29K
@@include c-a29k.texi
d5956 2
a5957 2
@@ifset ARM
@@include c-arm.texi
d5960 1
a5960 1
@@ifset Hitachi-all
d5965 1
a5965 1
The machine instruction sets are different on each Hitachi chip family,
d5967 1
a5967 1
chapter describes the specific @@code{@@value{AS}} features for each
d5971 3
a5973 3
* H8/300-Dependent::            Hitachi H8/300 Dependent Features
* H8/500-Dependent::            Hitachi H8/500 Dependent Features
* SH-Dependent::                Hitachi SH Dependent Features
d6015 8
d6035 4
d6043 8
d6055 4
d6063 4
d6069 1
d6092 4
d6106 1
a6106 1
Your bug reports play an essential role in making @@code{@@value{AS}} reliable.
d6110 2
a6111 2
entire community by making the next version of @@code{@@value{AS}} work better.
Bug reports are your contribution to the maintenance of @@code{@@value{AS}}.
d6122 1
a6122 1
@@section Have you found a bug?
d6133 1
a6133 1
@@code{@@value{AS}} bug.  Reliable assemblers never crash.
d6137 1
a6137 1
If @@code{@@value{AS}} produces an error message for valid input, that is a bug.
d6141 1
a6141 1
If @@code{@@value{AS}} does not produce an error message for invalid input, that
d6147 1
a6147 1
of @@code{@@value{AS}} are welcome in any case.
d6151 1
a6151 1
@@section How to report bugs
d6156 1
a6156 1
you obtained @@code{@@value{AS}} from a support organization, we recommend you
d6163 1
a6163 1
In any event, we also recommend that you send bug reports for @@code{@@value{AS}}
d6185 3
a6187 3
bell?''  Those bug reports are useless, and we urge everyone to
@@emph{refuse to respond to them} except to chide the sender to report
bugs properly.
d6193 1
a6193 1
The version of @@code{@@value{AS}}.  @@code{@@value{AS}} announces it if you start
d6197 1
a6197 1
the bug in the current version of @@code{@@value{AS}}.
d6200 1
a6200 1
Any patches you may have applied to the @@code{@@value{AS}} source.
d6207 1
a6207 1
What compiler (and its version) was used to compile @@code{@@value{AS}}---e.g.
d6225 1
a6225 1
@@code{@@value{AS}} is being run.
d6231 1
a6231 1
Of course, if the bug is that @@code{@@value{AS}} gets a fatal signal, then we
d6238 1
a6238 1
@@code{@@value{AS}} is out of synch, or you have encountered a bug in the C
d6246 1
a6246 1
If you wish to suggest changes to the @@code{@@value{AS}} source, send us context
d6249 1
a6249 1
discuss something in the @@code{@@value{AS}} source, refer to it by context, not
d6287 1
a6287 1
Sometimes with a program as complicated as @@code{@@value{AS}} it is very hard to
d6306 1
a6306 1
If you have contributed to @@code{@@value{AS}} and your name isn't listed here,
d6348 1
a6348 1
Support for the Zilog Z8k and Hitachi H8/300 and H8/500 processors (tc-z8k,
d6357 1
a6357 1
fixed-size instructions (e.g. @@code{jsr}), while synthetic instructions
d6367 1
a6367 1
Steve Chamberlain made @@code{@@value{AS}} able to generate listings.
d6382 1
a6382 1
Linas Vepstas added GAS support for the ESA/390 "IBM 370" architecture.
d6390 3
d6401 1
a6401 362
@@node GNU Free Documentation License
@@chapter GNU Free Documentation License

                GNU Free Documentation License
                
                   Version 1.1, March 2000

 Copyright (C) 2000  Free Software Foundation, Inc.
  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML designed for human modification.  Opaque formats include
PostScript, PDF, proprietary formats that can be read and edited only
by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML produced by some word processors for output
purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.


2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has less than five).
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section entitled "History", and its title, and add to
   it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. In any section entitled "Acknowledgements" or "Dedications",
   preserve the section's title, and preserve in the section all the
   substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section as "Endorsements"
   or to conflict in title with any Invariant Section.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@@smallexample
    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.1
    or any later version published by the Free Software Foundation;
    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".
@@end smallexample

If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write "no Front-Cover Texts" instead of
"Front-Cover Texts being LIST"; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
@


1.5
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
@@c  Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 2000
d91 1
a91 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d93 6
a98 3
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
a106 7
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided that the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
d142 1
a142 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d144 6
a149 8
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided that the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.
a150 2
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
d163 5
d179 1
d207 1
a207 1
 [ -w ] [ -x ] [ -Z ]
d212 2
a213 1
 [ -mbig-endian | -mlittle-endian ]
d222 1
a222 1
   -m[arm]v5 | -[arm]v5t ]
d252 4
d264 3
d272 6
d281 3
a283 1
 [ -mips1 ] [ -mips2 ] [ -mips3 ] [ -m4650 ] [ -no-m4650 ]
d343 2
a344 1
may help debugging assembler code, if the debugger can handle it.
d349 3
d421 4
a424 11

@@cindex ARC endianness
@@cindex endianness, ARC
@@cindex big endian output, ARC
@@item -mbig-endian
Generate ``big endian'' format output.

@@cindex little endian output, ARC
@@item -mlittle-endian
Generate ``little endian'' format output.

d440 1
a440 1
Select which Floating Point architcture is the target.
d501 20
d569 35
d629 16
d669 2
d675 3
d687 3
a689 2
Generate code for a particular MIPS cpu.  This has little effect on the
assembler, but it is passed by @@code{@@value{GCC}}.
d746 1
a746 1
The default can be overidden by the @@samp{-sifilter} command line option.
d751 9
d1034 1
a1034 1
@@cindex error messsages
d1665 3
d1686 3
d1699 1
a1699 1
@@c FIXME What about i386, m88k, i860?
d2404 1
a2404 1
is used to hold unitialized variables or common storage.  The length of
d3140 1
a3140 1
Lowest Precedence
d3160 35
d3270 4
d3279 4
a3300 1

d3305 5
d3311 4
d3317 4
d3332 1
a3332 4
@@ifset COFF
* Size::                        @@code{.size}
@@end ifset

d3343 1
d3346 1
d3353 2
a3355 1
* Type::                        @@code{.type @@var{int}}
d3358 1
d3360 4
a3363 1
* Visibility::                  @@code{.internal @@var{name}, .hidden @@var{name}, .protected @@var{name}}
a3365 1
* Uleb128::                     @@code{.uleb128 @@var{expressions}}
d3823 16
d3981 17
d4425 36
d4468 17
d4512 16
d4605 1
a4605 1
@@section @@code{.section @@var{name}}
a4615 1
@@ifset COFF
d4618 1
d4649 12
a4662 1
@@ifset ELF
d4664 1
d4666 1
a4666 1
.section @@var{name}[, "@@var{flags}"[, @@@@@@var{type}]]
d4668 1
d4670 1
a4670 1
combintion of the following characters:
d4695 1
d4699 1
d4710 5
a4714 1
@@end ifset
a4774 1
@@ifset COFF
d4776 1
a4776 1
@@section @@code{.size}
d4782 1
a4783 1

d4788 8
a4795 1
@@end ifset
d4950 16
d4978 1
a4978 1
For ELF targets, the @@code{.symver} directive is used like this:
d4982 2
a4983 2
In this case, the symbol @@var{name} must exist and be defined within the file
being assembled.  The @@code{.versym} directive effectively creates a symbol
d4996 23
a5059 1
@@ifset COFF
d5061 1
a5061 1
@@section @@code{.type @@var{int}}
d5068 1
a5069 1

d5074 35
a5108 1
@@end ifset
d5127 3
a5129 2
@@node Uleb128
@@section @@code{.uleb128 @@var{expressions}}
d5131 4
a5134 4
@@cindex @@code{uleb128} directive
@@var{uleb128} stands for ``unsigned little endian base 128.''  This is a 
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Sleb128,@@code{.sleb128}}.
d5137 2
a5138 22
@@node Visibility
@@section @@code{.internal}, @@code{.hidden}, @@code{.protected}
@@cindex @@code{internal} directive
@@cindex @@code{hidden} directive
@@cindex @@code{protected} directive
@@cindex symbol visibility

These directives can be used to set the visibility of a specified symbol.  By
default a symbol's visibility is set by its binding (local, global or weak),
but these directives can be used to override that.

A visibility of @@code{protected} means that any references to the symbol from
within the component that defines the symbol must be resolved to the definition
in that component, even if a definition in another component would normally
preempt this.

A visibility of @@code{hidden} means that the symbol is not visible to other 
components.  Such a symbol is always considered to be protected as well.

A visibility of @@code{internal} is the same as a visibility of @@code{hidden},
except that some extra, processor specific processing must also be performed
upon the symbol. 
d5140 13
a5152 1
For ELF targets, the directives are used like this:
d5154 3
a5156 5
@@smallexample
.internal @@var{name}
.hidden @@var{name}
.protected @@var{name}
@@end smallexample
d5158 3
d5200 1
a5200 1
@@code{@@value{AS}} occasionlly does strange things to @@samp{.word} directives.
d5287 4
a5290 1
* i386-Dependent::              Intel 80386 Dependent Features
d5295 3
d5301 3
d5316 3
d5342 1
a5342 74
@@ifset GENERIC
@@page
@@node ARC-Dependent
@@chapter ARC Dependent Features
@@end ifset
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter ARC Dependent Features
@@end ifclear

@@cindex ARC support
@@menu
* ARC-Opts::                    Options
* ARC-Float::                   Floating Point
* ARC-Directives::              Sparc Machine Directives
@@end menu

@@node ARC-Opts
@@section Options

@@cindex options for ARC
@@cindex ARC options
@@cindex architectures, ARC
@@cindex ARC architectures
The ARC chip family includes several successive levels (or other
variants) of chip, using the same core instruction set, but including
a few additional instructions at each level.

By default, @@code{@@value{AS}} assumes the core instruction set (ARC
base).  The @@code{.cpu} pseudo-op is intended to be used to select
the variant.

@@table @@code
@@cindex @@code{-mbig-endian} option (ARC)
@@cindex @@code{-mlittle-endian} option (ARC)
@@cindex ARC big-endian output
@@cindex ARC little-endian output
@@cindex big-endian output, ARC
@@cindex little-endian output, ARC
@@item -mbig-endian
@@itemx -mlittle-endian
Any @@sc{arc} configuration of @@code{@@value{AS}} can select big-endian or
little-endian output at run time (unlike most other @@sc{gnu} development
tools, which must be configured for one or the other).  Use
@@samp{-mbig-endian} to select big-endian output, and @@samp{-mlittle-endian}
for little-endian.
@@end table

@@node ARC-Float
@@section Floating Point

@@cindex floating point, ARC (@@sc{ieee})
@@cindex ARC floating point (@@sc{ieee})
The ARC cpu family currently does not have hardware floating point
support.  Software floating point support is provided by @@code{GCC}
and uses @@sc{ieee} floating-point numbers.

@@node ARC-Directives
@@section ARC Machine Directives

@@cindex ARC machine directives
@@cindex machine directives, ARC
The ARC version of @@code{@@value{AS}} supports the following additional
machine directives:

@@table @@code
@@item .cpu
@@cindex @@code{cpu} directive, SPARC
This must be followed by the desired cpu.
The ARC is intended to be customizable, @@code{.cpu} is used to
select the desired variant [though currently there are none].

@@end table

d5400 4
d5408 3
d5416 4
d5440 4
d5524 1
a5524 1
to @@samp{bug-gnu-utils@@@@gnu.org}.
d5747 3
d5757 363
@


1.4
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 2
a3 1
@@c  Copyright (c) 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d19 1
d25 3
d90 1
a90 1
Copyright (C) 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d119 1
a119 1
@@subtitle January 1994
d145 1
a145 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d164 2
a165 1
This file is a user guide to the @@sc{gnu} assembler @@code{@@value{AS}}.
d204 5
a208 4
@@value{AS} [ -a[dhlns][=file] ] [ -D ]  [ --defsym @@var{sym}=@@var{val} ]
 [ -f ] [ --help ] [ -I @@var{dir} ] [ -J ] [ -k ] [ -K ] [ -L ]
 [ -o @@var{objfile} ] [ -R ] [ --statistics ] [ -v ] [ -version ]
 [ --version ] [ -W ] [ -w ] [ -x ] [ -Z ]
d212 25
a236 1

d243 3
d248 3
a250 2
 [ -Av6 | -Av7 | -Av8 | -Asparclite | -Av9 | -Av9a ]
 [ -xarch=v8plus | -xarch=v8plusa ] [ -bump ]
d263 3
d276 1
a276 1
@@item -a[dhlns]
d280 3
d292 3
d307 1
a307 2
the last one.  By itself, @@samp{-a} defaults to @@samp{-ahls}---that is, all
listings turned on.
d322 8
a338 5
@@item -k
Handle position independent code generated by @@samp{gcc -fpic}.  This
option only actually has an effect in the Net- & OpenBSD environment,
otherwise it's a no-op.

d348 4
a351 1
Keep (in the symbol table) local symbols, starting with @@samp{L}.
d363 3
d374 1
d377 6
d416 54
d489 1
d518 20
d543 2
a544 1
@@item -Av6 | -Av7 | -Av8 | -Asparclite | -Av9 | -Av9a
d547 6
d555 1
a555 1
equivalent to -Av9 and -Av9a, respectively.
d592 1
a592 1
@@item -no-m4650
d604 1
a604 1
This option causes @@code{@@value{AS}} to emulated @@code{@@value{AS}} configured
d644 22
d668 1
a668 1
* GNU Assembler::               @@value{AS}, the GNU Assembler
d749 1
a749 1
@@section @@value{AS}, the GNU Assembler
d762 1
a762 1
@@cindex purpose of @@sc{gnu} @@code{@@value{AS}}
d892 5
a896 4
directives; they bear no relation to physical files.  Logical file names
help error messages reflect the original source file, when @@code{@@value{AS}}
source is itself synthesized from other files.
@@xref{App-File,,@@code{.app-file}}.
d938 1
a938 1
@@cindex messages from @@code{@@value{AS}}
d955 2
a956 3
(@@pxref{App-File,,@@code{.app-file}}) it is used for the filename,
otherwise the name of the current input file is used.  If a logical line
number was given
d985 1
a985 1
@@cindex options, all versions of @@code{@@value{AS}}
d995 4
a998 4
If you are invoking @@code{@@value{AS}} via the @@sc{gnu} C compiler (version 2), you
can use the @@samp{-Wa} option to pass arguments through to the
assembler.  The assembler arguments must be separated from each other
(and the @@samp{-Wa}) by commas.  For example:
d1005 3
a1007 2
emits a listing to standard output with high-level
and assembly source.
d1016 1
a1016 1
* a::             -a[dhlns] enable listings
d1029 1
d1033 1
d1035 1
a1035 1
* W::             -W to suppress warnings
d1040 1
a1040 1
@@section Enable Listings: @@code{-a[dhlns]}
d1043 1
d1062 5
d1176 3
a1178 2
information.  The purpose of this option is to permit assembling existing MRI
assembler code using @@code{@@value{AS}}.
d1297 15
d1385 11
d1401 2
a1402 2
@@cindex @@code{@@value{AS}} version
@@cindex version of @@code{@@value{AS}}
d1408 1
a1408 1
@@section Suppress Warnings: @@code{-W}
a1409 3
@@kindex -W
@@cindex suppressing warnings
@@cindex warnings, suppressing
d1414 20
a1433 4
If you use this option, no warnings are issued.  This option only
affects the warning messages: it does not change any particular of how
@@code{@@value{AS}} assembles your file.  Errors, which stop the assembly, are
still reported.
d1552 6
d1570 3
d1579 3
d1591 3
d1603 7
a1710 10
@@cindex continuing statements
@@cindex multi-line statements
@@cindex statement on multiple lines
You may write a statement on more than one line if you put a
backslash (@@kbd{\}) immediately in front of any newlines within the
statement.  When @@code{@@value{AS}} reads a backslashed newline both
characters are ignored.  You can even put backslashed newlines in
the middle of symbol names without changing the meaning of your
source program.

d2023 2
d2035 3
d2124 2
a2125 2
* Ld Sections::                 @@value{LD} Sections
* As Sections::                 @@value{AS} Internal Sections
d2161 1
a2161 1
@@cindex standard @@code{@@value{AS}} sections
d2269 1
a2269 1
@@section @@value{LD} Sections
d2374 1
a2374 1
@@section @@value{AS} Internal Sections
d2376 1
a2376 1
@@cindex internal @@code{@@value{AS}} sections
d2523 13
a2535 4
Addresses in the bss section are allocated with special directives; you
may not assemble anything directly into the bss section.  Hence there
are no bss subsections. @@xref{Comm,,@@code{.comm}},
@@pxref{Lcomm,,@@code{.lcomm}}.
d2664 1
a2664 1
@@item @@ctrl{A}
d2676 2
a2677 2
For instance, the first @@code{1:} is named @@code{L1@@ctrl{A}1}, the 44th
@@code{3:} is named @@code{L3@@ctrl{A}44}.
a3089 1
* App-File::                    @@code{.app-file @@var{string}}
d3109 2
d3115 1
d3118 3
d3122 1
d3129 1
d3159 1
d3161 1
a3166 2
@@end ifset
@@ifset COFF
d3178 1
d3185 4
d3199 3
d3203 1
d3234 1
a3234 1
@@section @@code{.align @@var{abs-expr} , @@var{abs-expr}}
d3238 17
a3254 8
Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
alignment required, as described below.
The second expression (also absolute) gives the value to be stored in
the padding bytes.  It (and the comma) may be omitted.  If it is
omitted, the padding bytes are zero.  
For the alpha, if the section is marked as containing code and the
padding expression is omitted, then the space is filled with no-ops.
d3264 2
a3265 1
For other systems, including the i386 using a.out format, it is the
a3276 18
@@node App-File
@@section @@code{.app-file @@var{string}}

@@cindex logical file name
@@cindex file name, logical
@@cindex @@code{app-file} directive
@@code{.app-file}
@@ifclear no-file-dir
(which may also be spelled @@samp{.file})
@@end ifclear
tells @@code{@@value{AS}} that we are about to start a new
logical file.  @@var{string} is the new file name.  In general, the
filename is recognized whether or not it is surrounded by quotes @@samp{"};
but if you wish to specify an empty file name is permitted,
you must give the quotes--@@code{""}.  This statement may go away in
future: it is only recognized to be compatible with old @@code{@@value{AS}}
programs.@@refill

d3296 1
a3296 1
@@section @@code{.balign[wl] @@var{abs-expr} , @@var{abs-expr}}
d3306 13
a3318 3
The second expression (also absolute) gives the value to be stored in
the padding bytes.  It (and the comma) may be omitted.  If it is
omitted, the padding bytes are zero.
d3344 20
a3363 7
@@code{.comm} declares a named common area in the bss section.  Normally
@@code{@@value{LD}} reserves memory addresses for it during linking, so no partial
program defines the location of the symbol.  Use @@code{.comm} to tell
@@code{@@value{LD}} that it must be at least @@var{length} bytes long.  @@code{@@value{LD}}
allocates space for each @@code{.comm} symbol that is at least as
long as the longest @@code{.comm} request in any of the partial programs
linked.  @@var{length} is an absolute expression.
d3468 9
a3476 2
@@ignore
@@node End, Endef, Else, Pseudo Ops
d3480 2
a3481 4
This doesn't do anything---but isn't an s_ignore, so I suspect it's
meant to do something eventually (which is why it isn't documented here
as "for compatibility with blah").
@@end ignore
d3498 5
d3525 25
d3558 10
d3575 6
a3580 7
@@code{.file} (which may also be spelled @@samp{.app-file}) tells
@@code{@@value{AS}} that we are about to start a new logical file.
@@var{string} is the new file name.  In general, the filename is
recognized whether or not it is surrounded by quotes @@samp{"}; but if
you wish to specify an empty file name, you must give the
quotes--@@code{""}.  This statement may go away in future: it is only
recognized to be compatible with old @@code{@@value{AS}} programs.
d3629 12
d3704 2
d3714 12
a3725 1
@@ignore
d3727 25
a3751 3
@@item .ifeqs
Not yet implemented.
@@end ignore
d3760 9
a3768 4
@@ignore
@@item ifnes
Not yet implemented.
@@end ignore
d3872 5
d4194 1
a4194 1
@@section @@code{.p2align[wl] @@var{abs-expr} , @@var{abs-expr}}
d4205 13
a4217 3
The second expression (also absolute) gives the value to be stored in
the padding bytes.  It (and the comma) may be omitted.  If it is
omitted, the padding bytes are zero.
d4230 7
d4257 7
a4339 1
@@ifset COFF
d4341 1
a4341 1
@@section @@code{.section @@var{name}, @@var{subsection}}
d4344 4
a4347 8
@@cindex named section (COFF)
@@cindex COFF named section
Assemble the following code into end of subsection numbered
@@var{subsection} in the COFF named section @@var{name}.  If you omit
@@var{subsection}, @@code{@@value{AS}} uses subsection number zero.
@@samp{.section .text} is equivalent to the @@code{.text} directive;
@@samp{.section .data} is equivalent to the @@code{.data} directive.
@@ifset GENERIC
d4350 35
a4384 1
with a standard @@code{a.out} section name as its parameter.
d4386 45
d4441 1
a4441 1
flagged. (@@xref{Symbol Attributes}.)
d4508 8
d4640 53
d4766 42
a4882 1
@@item .app-file
d4907 12
d4928 3
d4946 3
d4952 3
d4974 76
d5055 4
d5078 7
d5098 4
d5110 1
d5123 4
d5143 4
d5154 2
a5155 2
@@cindex bugs in @@code{@@value{AS}}
@@cindex reporting bugs in @@code{@@value{AS}}
d5204 1
a5204 1
@@cindex @@code{@@value{AS}} bugs, reporting
d5215 1
a5215 1
to @@samp{bug-gnu-utils@@@@prep.ai.mit.edu}.
d5433 4
a5436 1
Richard Henderson rewrote the Alpha assembler.
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d173 1
d199 1
a199 1
 [ -f ] [ --help ] [ -I @@var{dir} ] [ -J ] [ -K ] [ -L ]
d288 5
d4460 202
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d204 1
d351 1
d379 2
a380 2
@@item -m68000 | -m68008 | -m68010 | -m68020 | -m68030 | -m68040
@@itemx | -m68302 | -m68331 | -m68332 | -m68333 | -m68340 | -mcpu32
a1330 12
@@ifset VAX
@@samp{#} on the Vax;
@@end ifset
@@ifset I960
@@samp{#} on the i960;
@@end ifset
@@ifset SPARC
@@samp{!} on the SPARC;
@@end ifset
@@ifset M680X0
@@samp{|} on the 680x0;
@@end ifset
d1343 3
d1349 9
d1624 5
a1628 7
@@ifset HPPA
@@cindex @@code{\@@var{xdd}} (hex character code)
@@cindex hex character code (@@code{\@@var{xdd}})
@@item \@@code{x} @@var{hex-digit} @@var{hex-digit}
A hex character code.  The numeric code is 2 hexadecimal digits.  Either
upper or lower case @@code{x} works.
@@end ifset
d1806 3
a1811 3
@@ifset HPPA
The letter @@samp{E} (upper case only).
@@end ifset
d2983 3
a2985 1
omitted, the padding bytes are zero.
a4327 3
@@ifset VAX
* Vax-Dependent::               VAX Dependent Features
@@end ifset
d4340 2
a4341 2
@@ifset SH
* SH-Dependent::                Hitachi SH Dependent Features
d4349 6
d4361 2
a4362 5
@@ifset MIPS
* MIPS-Dependent::              MIPS Dependent Features
@@end ifset
@@ifset I80386
* i386-Dependent::              80386 Dependent Features
a4377 4
@@ifset VAX
@@include c-vax.texi
@@end ifset

d4401 1
d4414 2
a4415 2
@@ifset SH
@@include c-sh.texi
d4426 4
d4434 4
a4441 4
@@ifset I80386
@@include c-i386.texi
@@end ifset

d4446 2
a4447 2
@@ifset MIPS
@@include c-mips.texi
d4516 2
a4517 2
added support for MIPS ECOFF and ELF targets, and made a few other minor
patches.
d4533 2
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
@@c  Copyright (c) 1991, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.
d85 1
a85 1
Copyright (C) 1991, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.
d140 1
a140 1
Copyright @@copyright{} 1991, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.
d211 3
a213 1
 [ -Av6 | -Av7 | -Av8 | -Av9 | -Asparclite | -bump ]
d401 1
a401 1
@@item -Av6 | -Av7 | -Av8 | -Av9 | -Asparclite
d404 4
d2894 1
d2902 1
d2926 1
d2986 1
a2986 1
For the a29k, hppa, m86k, m88k, w65, sparc, and Hitachi SH, and i386 using ELF
d3042 1
a3042 1
@@section @@code{.balign @@var{abs-expr} , @@var{abs-expr}}
d3056 11
d3370 1
a3370 1
alternative condition, flagged by @@code{.else} (@@pxref{Else,,@@code{.else}}.
d3388 1
a3388 1
@@itemx ifnotdef @@var{symbol}
d3552 37
d3610 10
d3816 1
a3816 1
@@section @@code{.p2align @@var{abs-expr} , @@var{abs-expr}}
d3831 11
d4033 10
d4050 2
a4051 1
and @@var{fill} are omitted, @@var{fill} is assumed to be zero.
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d2 1
a2 1
@@c  Copyright (c) 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d85 1
a85 1
Copyright (C) 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d140 1
a140 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d211 1
a211 3
@@c The order here is important.  See c-sparc.texi.
 [ -Av6 | -Av7 | -Av8 | -Asparclite | -Av9 | -Av9a ]
 [ -xarch=v8plus | -xarch=v8plusa ] [ -bump ]
d399 1
a399 1
@@item -Av6 | -Av7 | -Av8 | -Asparclite | -Av9 | -Av9a
a401 4
@@item -xarch=v8plus | -xarch=v8plusa
For compatibility with the Solaris v9 assembler.  These options are
equivalent to -Av9 and -Av9a, respectively.

a2887 1
* Linkonce::			@@code{.linkonce [@@var{type}]}
a2894 1
* MRI::				@@code{.mri @@var{val}}
a2917 1
* Skip::                        @@code{.skip @@var{size} , @@var{fill}}
d2977 1
a2977 1
For the a29k, hppa, m68k, m88k, w65, sparc, and Hitachi SH, and i386 using ELF
d3033 1
a3033 1
@@section @@code{.balign[wl] @@var{abs-expr} , @@var{abs-expr}}
a3046 11
@@cindex @@code{balignw} directive
@@cindex @@code{balignl} directive
The @@code{.balignw} and @@code{.balignl} directives are variants of the
@@code{.balign} directive.  The @@code{.balignw} directive treats the fill
pattern as a two byte word value.  The @@code{.balignl} directives treats the
fill pattern as a four byte longword value.  For example, @@code{.balignw
4,0x368d} will align to a multiple of 4.  If it skips two bytes, they will be
filled in with the value 0x368d (the exact placement of the bytes depends upon
the endianness of the processor).  If it skips 1 or 3 bytes, the fill value is
undefined.

d3350 1
a3350 1
alternative condition, flagged by @@code{.else} (@@pxref{Else,,@@code{.else}}).
d3368 1
a3368 1
@@itemx .ifnotdef @@var{symbol}
a3531 37
@@node Linkonce
@@section @@code{.linkonce [@@var{type}]}
@@cindex COMDAT
@@cindex @@code{linkonce} directive
@@cindex common sections
Mark the current section so that the linker only includes a single copy of it.
This may be used to include the same section in several different object files,
but ensure that the linker will only include it once in the final output file.
The @@code{.linkonce} pseudo-op must be used for each instance of the section.
Duplicate sections are detected based on the section name, so it should be
unique.

This directive is only supported by a few object file formats; as of this
writing, the only object file format which supports it is the Portable
Executable format used on Windows NT.

The @@var{type} argument is optional.  If specified, it must be one of the
following strings.  For example:
@@smallexample
.linkonce same_size
@@end smallexample
Not all types may be supported on all object file formats.

@@table @@code
@@item discard
Silently discard duplicate sections.  This is the default.

@@item one_only
Warn if there are duplicate sections, but still keep only one copy.

@@item same_size
Warn if any of the duplicates have different sizes.

@@item same_contents
Warn if any of the duplicates do not have exactly the same contents.
@@end table

a3552 10
@@node MRI
@@section @@code{.mri @@var{val}}

@@cindex @@code{mri} directive
@@cindex MRI mode, temporarily
If @@var{val} is non-zero, this tells @@code{@@value{AS}} to enter MRI mode.  If
@@var{val} is zero, this tells @@code{@@value{AS}} to exit MRI mode.  This change
affects code assembled until the next @@code{.mri} directive, or until the end
of the file.  @@xref{M, MRI mode, MRI mode}.

d3749 1
a3749 1
@@section @@code{.p2align[wl] @@var{abs-expr} , @@var{abs-expr}}
a3763 11
@@cindex @@code{p2alignw} directive
@@cindex @@code{p2alignl} directive
The @@code{.p2alignw} and @@code{.p2alignl} directives are variants of the
@@code{.p2align} directive.  The @@code{.p2alignw} directive treats the fill
pattern as a two byte word value.  The @@code{.p2alignl} directives treats the
fill pattern as a four byte longword value.  For example, @@code{.p2alignw
2,0x368d} will align to a multiple of 4.  If it skips two bytes, they will be
filled in with the value 0x368d (the exact placement of the bytes depends upon
the endianness of the processor).  If it skips 1 or 3 bytes, the fill value is
undefined.

a3954 10
@@node Skip
@@section @@code{.skip @@var{size} , @@var{fill}}

@@cindex @@code{skip} directive
@@cindex filling memory
This directive emits @@var{size} bytes, each of value @@var{fill}.  Both
@@var{size} and @@var{fill} are absolute expressions.  If the comma and
@@var{fill} are omitted, @@var{fill} is assumed to be zero.  This is the same as
@@samp{.space}.

d3962 1
a3962 2
and @@var{fill} are omitted, @@var{fill} is assumed to be zero.  This is the same
as @@samp{.skip}.
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@a203 1

a349 1

d377 2
a378 2
@@item -m68000 | -m68008 | -m68010 | -m68020 | -m68030 | -m68040 | -m68060
@@itemx | -m68302 | -m68331 | -m68332 | -m68333 | -m68340 | -mcpu32 | -m5200
d1329 12
a1352 3
@@ifset I960
@@samp{#} on the i960;
@@end ifset
a1355 9
@@ifset SPARC
@@samp{!} on the SPARC;
@@end ifset
@@ifset M680X0
@@samp{|} on the 680x0;
@@end ifset
@@ifset VAX
@@samp{#} on the Vax;
@@end ifset
d1622 7
a1628 5
@@cindex @@code{\@@var{xd...}} (hex character code)
@@cindex hex character code (@@code{\@@var{xd...}})
@@item \@@code{x} @@var{hex-digits...}
A hex character code.  All trailing hex digits are combined.  Either upper or
lower case @@code{x} works.
d1806 3
a1811 3
@@ifset I960
One of the letters @@samp{DFT} (in upper or lower case).
@@end ifset
d2983 1
a2983 3
omitted, the padding bytes are zero.  
For the alpha, if the section is marked as containing code and the
padding expression is omitted, then the space is filled with no-ops.
d4326 3
d4341 2
a4342 2
@@ifset I80386
* i386-Dependent::              Intel 80386 Dependent Features
a4349 6
@@ifset MIPS
* MIPS-Dependent::              MIPS Dependent Features
@@end ifset
@@ifset SH
* SH-Dependent::                Hitachi SH Dependent Features
@@end ifset
d4356 5
a4360 2
@@ifset VAX
* Vax-Dependent::               VAX Dependent Features
d4376 4
a4402 1

d4415 2
a4416 2
@@ifset I80386
@@include c-i386.texi
a4426 4
@@ifset MIPS
@@include c-mips.texi
@@end ifset

d4431 2
a4432 2
@@ifset SH
@@include c-sh.texi
d4435 2
a4436 2
@@ifset SPARC
@@include c-sparc.texi
d4443 2
a4444 2
@@ifset VAX
@@include c-vax.texi
d4513 2
a4514 2
added support for MIPS ECOFF and ELF targets, wrote the initial RS/6000 and
PowerPC assembler, and made a few other minor patches.
a4529 2

Richard Henderson rewrote the Alpha assembler.
@


1.1.1.4
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a172 1
* Reporting Bugs::              Reporting Bugs
a4453 202

@@node Reporting Bugs
@@chapter Reporting Bugs
@@cindex bugs in @@code{@@value{AS}}
@@cindex reporting bugs in @@code{@@value{AS}}

Your bug reports play an essential role in making @@code{@@value{AS}} reliable.

Reporting a bug may help you by bringing a solution to your problem, or it may
not.  But in any case the principal function of a bug report is to help the
entire community by making the next version of @@code{@@value{AS}} work better.
Bug reports are your contribution to the maintenance of @@code{@@value{AS}}.

In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

@@menu
* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs
@@end menu

@@node Bug Criteria
@@section Have you found a bug?
@@cindex bug criteria

If you are not sure whether you have found a bug, here are some guidelines:

@@itemize @@bullet
@@cindex fatal signal
@@cindex assembler crash
@@cindex crash of assembler
@@item
If the assembler gets a fatal signal, for any input whatever, that is a
@@code{@@value{AS}} bug.  Reliable assemblers never crash.

@@cindex error on valid input
@@item
If @@code{@@value{AS}} produces an error message for valid input, that is a bug.

@@cindex invalid input
@@item
If @@code{@@value{AS}} does not produce an error message for invalid input, that
is a bug.  However, you should note that your idea of ``invalid input'' might
be our idea of ``an extension'' or ``support for traditional practice''.

@@item
If you are an experienced user of assemblers, your suggestions for improvement
of @@code{@@value{AS}} are welcome in any case.
@@end itemize

@@node Bug Reporting
@@section How to report bugs
@@cindex bug reports
@@cindex @@code{@@value{AS}} bugs, reporting

A number of companies and individuals offer support for @@sc{gnu} products.  If
you obtained @@code{@@value{AS}} from a support organization, we recommend you
contact that organization first.

You can find contact information for many support companies and
individuals in the file @@file{etc/SERVICE} in the @@sc{gnu} Emacs
distribution.

In any event, we also recommend that you send bug reports for @@code{@@value{AS}}
to @@samp{bug-gnu-utils@@@@prep.ai.mit.edu}.

The fundamental principle of reporting bugs usefully is this:
@@strong{report all the facts}.  If you are not sure whether to state a
fact or leave it out, state it!

Often people omit facts because they think they know what causes the problem
and assume that some details do not matter.  Thus, you might assume that the
name of a symbol you use in an example does not matter.  Well, probably it does
not, but one cannot be sure.  Perhaps the bug is a stray memory reference which
happens to fetch from the location where that name is stored in memory;
perhaps, if the name were different, the contents of that location would fool
the assembler into doing the right thing despite the bug.  Play it safe and
give a specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

Keep in mind that the purpose of a bug report is to enable us to fix the bug if
it is new to us.  Therefore, always write your bug reports on the assumption
that the bug has not been reported previously.

Sometimes people give a few sketchy facts and ask, ``Does this ring a
bell?''  Those bug reports are useless, and we urge everyone to
@@emph{refuse to respond to them} except to chide the sender to report
bugs properly.

To enable us to fix the bug, you should include all these things:

@@itemize @@bullet
@@item
The version of @@code{@@value{AS}}.  @@code{@@value{AS}} announces it if you start
it with the @@samp{--version} argument.

Without this, we will not know whether there is any point in looking for
the bug in the current version of @@code{@@value{AS}}.

@@item
Any patches you may have applied to the @@code{@@value{AS}} source.

@@item
The type of machine you are using, and the operating system name and
version number.

@@item
What compiler (and its version) was used to compile @@code{@@value{AS}}---e.g.
``@@code{gcc-2.7}''.

@@item
The command arguments you gave the assembler to assemble your example and
observe the bug.  To guarantee you will not omit something important, list them
all.  A copy of the Makefile (or the output from make) is sufficient.

If we were to try to guess the arguments, we would probably guess wrong
and then we might not encounter the bug.

@@item
A complete input file that will reproduce the bug.  If the bug is observed when
the assembler is invoked via a compiler, send the assembler source, not the
high level language source.  Most compilers will produce the assembler source
when run with the @@samp{-S} option.  If you are using @@code{@@value{GCC}}, use
the options @@samp{-v --save-temps}; this will save the assembler source in a
file with an extension of @@file{.s}, and also show you exactly how
@@code{@@value{AS}} is being run.

@@item
A description of what behavior you observe that you believe is
incorrect.  For example, ``It gets a fatal signal.''

Of course, if the bug is that @@code{@@value{AS}} gets a fatal signal, then we
will certainly notice it.  But if the bug is incorrect output, we might not
notice unless it is glaringly wrong.  You might as well not give us a chance to
make a mistake.

Even if the problem you experience is a fatal signal, you should still say so
explicitly.  Suppose something strange is going on, such as, your copy of
@@code{@@value{AS}} is out of synch, or you have encountered a bug in the C
library on your system.  (This has happened!)  Your copy might crash and ours
would not.  If you told us to expect a crash, then when ours fails to crash, we
would know that the bug was not happening for us.  If you had not told us to
expect a crash, then we would not be able to draw any conclusion from our
observations.

@@item
If you wish to suggest changes to the @@code{@@value{AS}} source, send us context
diffs, as generated by @@code{diff} with the @@samp{-u}, @@samp{-c}, or @@samp{-p}
option.  Always send diffs from the old file to the new file.  If you even
discuss something in the @@code{@@value{AS}} source, refer to it by context, not
by line number.

The line numbers in our development sources will not match those in your
sources.  Your line numbers would convey no useful information to us.
@@end itemize

Here are some things that are not necessary:

@@itemize @@bullet
@@item
A description of the envelope of the bug.

Often people who encounter a bug spend a lot of time investigating
which changes to the input file will make the bug go away and which
changes will not affect it.

This is often time consuming and not very useful, because the way we
will find the bug is by running a single example under the debugger
with breakpoints, not by pure deduction from a series of examples.
We recommend that you save your time for something else.

Of course, if you can find a simpler example to report @@emph{instead}
of the original one, that is a convenience for us.  Errors in the
output will be easier to spot, running under the debugger will take
less time, and so on.

However, simplification is not vital; if you do not want to do this,
report the bug anyway and send us the entire test case you used.

@@item
A patch for the bug.

A patch for the bug does help us if it is a good one.  But do not omit
the necessary information, such as the test case, on the assumption that
a patch is all we need.  We might see problems with your patch and decide
to fix the problem another way, or we might not understand it at all.

Sometimes with a program as complicated as @@code{@@value{AS}} it is very hard to
construct an example that will make the program follow a certain path through
the code.  If you do not send us the example, we will not be able to construct
one, so we will not be able to verify that the bug is fixed.

And if we cannot understand what bug you are trying to fix, or why your
patch should be an improvement, we will not install it.  A test case will
help us to understand.

@@item
A guess about what the bug is or what it depends on.

Such guesses are usually wrong.  Even we cannot guess right about such
things without first using the debugger to find the facts.
@@end itemize
@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
@@c  Copyright (c) 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
d85 1
a85 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
d140 1
a140 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
d198 1
a198 1
@@value{AS} [ -a[cdhlns][=file] ] [ -D ]  [ --defsym @@var{sym}=@@var{val} ]
a204 3
@@ifset D10V
 [ -O ]
@@end ifset
d214 1
a214 1
 [ -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite | -Av9 | -Av9a ]
a351 10
@@ifset D10V
The following options are available when @@value{AS} is configured for
a D10V processor.
@@table @@code
@@cindex D10V optimization
@@cindex optimization, D10V
@@item -O
Optimize output by parallelizing instructions.
@@end table
@@end ifset
d404 1
a404 1
@@item -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite | -Av9 | -Av9a
d500 1
a500 1
* GNU Assembler::               The GNU Assembler
d581 1
a581 1
@@section The GNU Assembler
d594 1
a594 1
@@cindex purpose of @@sc{gnu} assembler
d769 1
a769 1
@@cindex messages from assembler
d817 1
a817 1
@@cindex options, all versions of assembler
d847 1
a847 1
* a::             -a[cdhlns] enable listings
d869 1
a869 1
@@section Enable Listings: @@code{-a[cdhlns]}
a871 1
@@kindex -ac
a889 5
Use the @@samp{-ac} option to omit false conditionals from a listing.  Any lines
which are not assembled because of a false @@code{.if} (or @@code{.ifdef}, or any
other conditional), or a true @@code{.if} followed by an @@code{.else}, will be
omitted from the listing.

d999 2
a1000 3
information.  Note in particular that the handling of macros and macro
arguments is somewhat different.  The purpose of this option is to permit
assembling existing MRI assembler code using @@code{@@value{AS}}.
d1197 2
a1198 2
@@cindex assembler version
@@cindex version of assembler
d1890 2
a1891 2
* Ld Sections::                 Linker Sections
* As Sections::                 Assembler Internal Sections
d1927 1
a1927 1
@@cindex standard assembler sections
d2035 1
a2035 1
@@section Linker Sections
d2140 1
a2140 1
@@section Assembler Internal Sections
d2142 1
a2142 1
@@cindex internal assembler sections
d2289 4
a2292 13
The @@code{.lcomm} pseudo-op defines a symbol in the bss section; see
@@ref{Lcomm,,@@code{.lcomm}}.

The @@code{.comm} pseudo-op may be used to declare a common symbol, which is
another form of uninitialized symbol; see @@xref{Comm,,@@code{.comm}}.

@@ifset GENERIC
When assembling for a target which supports multiple sections, such as ELF or
COFF, you may switch into the @@code{.bss} section and define symbols as usual;
see @@ref{Section,,@@code{.section}}.  You may only assemble zero values into the
section.  Typically the section will only contain symbol definitions and
@@code{.skip} directives (@@pxref{Skip,,@@code{.skip}}).
@@end ifset
d2421 1
a2421 1
@@item @@kbd{C-A}
d2433 2
a2434 2
For instance, the first @@code{1:} is named @@code{L1@@kbd{C-A}1}, the 44th
@@code{3:} is named @@code{L3@@kbd{C-A}44}.
a2872 2
* Equiv::                       @@code{.equiv @@var{symbol}, @@var{expression}}
* Err::				@@code{.err}
a2933 3
@@ifset ELF
* Symver::                      @@code{.symver @@var{name},@@var{name2@@@@nodename}}
@@end ifset
d2975 1
a2975 1
@@section @@code{.align @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}
d2979 8
a2986 17
Pad the location counter (in the current subsection) to a particular storage
boundary.  The first expression (which must be absolute) is the alignment
required, as described below.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.
d3045 1
a3045 1
@@section @@code{.balign[wl] @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}
d3055 3
a3057 13
The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.
d3083 7
a3089 20
@@code{.comm} declares a common symbol named @@var{symbol}.  When linking, a
common symbol in one object file may be merged with a defined or common symbol
of the same name in another object file.  If @@code{@@value{LD}} does not see a
definition for the symbol--just one or more common symbols--then it will
allocate @@var{length} bytes of uninitialized memory.  @@var{length} must be an
absolute expression.  If @@code{@@value{LD}} sees multiple common symbols with
the same name, and they do not all have the same size, it will allocate space
using the largest size.

@@ifset ELF
When using ELF, the @@code{.comm} directive takes an optional third argument.
This is the desired alignment of the symbol, specified as a byte boundary (for
example, an alignment of 16 means that the least significant 4 bits of the
address should be zero).  The alignment must be an absolute expression, and it
must be a power of two.  If @@code{@@value{LD}} allocates uninitialized memory
for the common symbol, it will use the alignment when placing the symbol.  If
no alignment is specified, @@code{@@value{AS}} will set the alignment to the
largest power of two less than or equal to the size of the symbol, up to a
maximum of 16.
@@end ifset
a3240 21
@@node Equiv
@@section @@code{.equiv @@var{symbol}, @@var{expression}}
@@cindex @@code{equiv} directive
The @@code{.equiv} directive is like @@code{.equ} and @@code{.set}, except that
the assembler will signal an error if @@var{symbol} is already defined.

Except for the contents of the error message, this is roughly equivalent to 
@@smallexample
.ifdef SYM
.err
.endif
.equ SYM,VAL
@@end smallexample

@@node Err
@@section @@code{.err}
@@cindex @@code{err} directive
If @@code{@@value{AS}} assembles a @@code{.err} directive, it will print an error
message and, unless the @@code{-Z} option was used, it will not generate an
object file.  This can be used to signal error an conditionally compiled code.

a3501 5
@@ifset GENERIC
Some targets permit a third argument to be used with @@code{.lcomm}.  This
argument specifies the desired alignment of the symbol in the bss section.
@@end ifset

d3819 1
a3819 1
@@section @@code{.p2align[wl] @@var{abs-expr}, @@var{abs-expr}, @@var{abs-expr}}
d3830 3
a3832 13
The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.
d3941 1
d3943 1
a3943 1
@@section @@code{.section @@var{name}}
d3946 8
a3953 4
@@cindex named section
Use the @@code{.section} directive to assemble the following code into a section
named @@var{name}.

d3956 1
a3956 33
with a standard @@code{a.out} section name.

@@ifset COFF
For COFF targets, the @@code{.section} directive is used in one of the following
ways:
@@smallexample
.section @@var{name}[, "@@var{flags}"]
.section @@var{name}[, @@var{subsegment}]
@@end smallexample

If the optional argument is quoted, it is taken as flags to use for the
section.  Each flag is a single character.  The following flags are recognized:
@@table @@code
@@item b
bss section (uninitialized data)
@@item n
section is not loaded
@@item w
writable section
@@item d
data section
@@item r
read-only section
@@item x
executable section
@@end table

If no flags are specified, the default flags depend upon the section name.  If
the section name is not recognized, the default will be for the section to be
loaded and writable.

If the optional argument to the @@code{.section} directive is not quoted, it is
taken as a subsegment number (@@pxref{Sub-Sections}).
a3957 45

@@ifset ELF
For ELF targets, the @@code{.section} directive is used like this:
@@smallexample
.section @@var{name}[, "@@var{flags}"[, @@@@@@var{type}]]
@@end smallexample
The optional @@var{flags} argument is a quoted string which may contain any
combintion of the following characters:
@@table @@code
@@item a
section is allocatable
@@item w
section is writable
@@item x
section is executable
@@end table

The optional @@var{type} argument may contain one of the following constants:
@@table @@code
@@item @@@@progbits
section contains data
@@item @@@@nobits
section does not contain data (i.e., section only occupies space)
@@end table

If no flags are specified, the default flags depend upon the section name.  If
the section name is not recognized, the default will be for the section to have
none of the above flags: it will not be allocated in memory, nor writable, nor
executable.  The section will contain data.

For ELF targets, the assembler supports another type of @@code{.section}
directive for compatibility with the Solaris assembler:
@@smallexample
.section "@@var{name}"[, @@var{flags}...]
@@end smallexample
Note that the section name is quoted.  There may be a sequence of comma
separated flags:
@@table @@code
@@item #alloc
section is allocatable
@@item #write
section is writable
@@item #execinstr
section is executable
@@end table
d3968 1
a3968 1
flagged (@@pxref{Symbol Attributes}).
a4158 33
@@ifset ELF
@@node Symver
@@section @@code{.symver}
@@cindex @@code{symver} directive
@@cindex symbol versioning
@@cindex versions of symbols
Use the @@code{.symver} directive to bind symbols to specific version nodes
within a source file.  This is only supported on ELF platforms, and is
typically used when assembling files to be linked into a shared library.
There are cases where it may make sense to use this in objects to be bound
into an application itself so as to override a versioned symbol from a
shared library.

For ELF targets, the @@code{.symver} directive is used like this:
@@smallexample
.symver @@var{name}, @@var{name2@@@@nodename}
@@end smallexample
In this case, the symbol @@var{name} must exist and be defined within the file
being assembled.  The @@code{.versym} directive effectively creates a symbol
alias with the name @@var{name2@@@@nodename}, and in fact the main reason that we
just don't try and create a regular alias is that the @@var{@@@@} character isn't
permitted in symbol names.  The @@var{name2} part of the name is the actual name
of the symbol by which it will be externally referenced.  The name @@var{name}
itself is merely a name of convenience that is used so that it is possible to
have definitions for multiple versions of a function within a single source
file, and so that the compiler can unambiguously know which version of a
function is being mentioned.  The @@var{nodename} portion of the alias should be
the name of a node specified in the version script supplied to the linker when
building a shared library.  If you are attempting to override a versioned
symbol from a shared library, then @@var{nodename} should correspond to the
nodename of the symbol you are trying to override.
@@end ifset

a4331 3
@@ifset D10V
* D10V-Dependent::              D10V Dependent Features
@@end ifset
a4401 3
@@ifset D10V
@@include c-d10v.texi
@@end ifset
d4458 2
a4459 2
@@cindex bugs in assembler
@@cindex reporting bugs in assembler
d4508 1
a4508 1
@@cindex assembler bugs, reporting
d4737 1
a4737 2
Richard Henderson rewrote the Alpha assembler. Klaus Kaempf wrote GAS and BFD
support for openVMS/Alpha.
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
@@c  Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 2000
@@c  Free Software Foundation, Inc.
a17 1
@@include gasver.texi
a22 3
@@ifset ARM/Thumb
@@set ARM
@@end ifset
d85 1
a85 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d114 1
a114 1
@@subtitle Version @@value{VERSION}
d140 1
a140 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d159 1
a159 2
This file is a user guide to the @@sc{gnu} assembler @@code{@@value{AS}} version
@@value{VERSION}.
d199 3
a201 4
 [ -f ] [ --gstabs ] [ --gdwarf2 ] [ --help ] [ -I @@var{dir} ] [ -J ] [ -K ] [ -L ]
 [ --keep-locals ] [ -o @@var{objfile} ] [ -R ] [ --statistics ] [ -v ]
 [ -version ] [ --version ] [ -W ] [ --warn ] [ --fatal-warnings ] 
 [ -w ] [ -x ] [ -Z ]
a204 19
@@ifset ARC
 [ -mbig-endian | -mlittle-endian ]
@@end ifset
@@ifset ARM
 [ -m[arm]1 | -m[arm]2 | -m[arm]250 | -m[arm]3 | -m[arm]6 | -m[arm]60 |
   -m[arm]600 | -m[arm]610 | -m[arm]620 | -m[arm]7[t][[d]m[i]][fe] | -m[arm]70 |
   -m[arm]700 | -m[arm]710[c] | -m[arm]7100 | -m[arm]7500 | -m[arm]8 |
   -m[arm]810 | -m[arm]9 | -m[arm]920 | -m[arm]920t | -m[arm]9tdmi |
   -mstrongarm | -mstrongarm110 | -mstrongarm1100 ]
 [ -m[arm]v2 | -m[arm]v2a | -m[arm]v3 | -m[arm]v3m | -m[arm]v4 | -m[arm]v4t |
   -m[arm]v5 | -[arm]v5t ]
 [ -mthumb | -mall ]
 [ -mfpa10 | -mfpa11 | -mfpe-old | -mno-fpu ]
 [ -EB | -EL ]
 [ -mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant ]
 [ -mthumb-interwork ]
 [ -moabi ]
 [ -k ]
@@end ifset
d208 1
a208 3
@@ifset D30V
 [ -O | -n | -N ]
@@end ifset
a214 3
@@ifset PJ
 [ -mb | -me ]
@@end ifset
d217 2
a218 3
 [ -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite
   -Av8plus | -Av8plusa | -Av9 | -Av9a ]
 [ -xarch=v8plus | -xarch=v8plusa ] [ -bump ] [ -32 | -64 ]
a230 3
@@ifset MCORE
 [ -jsri2bsr ] [ -sifilter ] [ -relax ]
@@end ifset
d241 1
a241 1
@@item -a[cdhlmns]
a244 3
@@item -ac
omit false conditionals

a253 3
@@item -am
include macro expansions

d266 2
a267 1
the last one.  By itself, @@samp{-a} defaults to @@samp{-ahls}.
a281 8
@@item --gstabs
Generate stabs debugging information for each assembler line.  This
may help debugging assembler code, if the debugger can handle it.

@@item --gdwarf2
Generate DWARF2 debugging information for each assembler line.  This
may help debugging assembler code, if the debugger can handle it.

d300 1
a300 4
@@itemx --keep-locals
Keep (in the symbol table) local symbols.  On traditional a.out systems
these start with @@samp{L}, but different systems have different local
label prefixes.
a311 3
@@item --strip-local-absolute
Remove local absolute symbols from the outgoing symbol table.

a319 1
@@itemx --no-warn
a321 6
@@item --fatal-warnings
Treat warnings as errors.

@@item --warn
Don't suppress warning messages or treat them as errors.

a354 25
@@ifset ARM
The following options are available when @@value{AS} is configured for the ARM
processor family.

@@table @@code
@@item -m[arm][1|2|3|6|7|8|9][...] 
Specify which ARM processor variant is the target.
@@item -m[arm]v[2|2a|3|3m|4|4t|5|5t]
Specify which ARM architecture variant is used by the target.
@@item -mthumb | -mall
Enable or disable Thumb only instruction decoding.
@@item -mfpa10 | -mfpa11 | -mfpe-old | -mno-fpu
Select which Floating Point architcture is the target.
@@item -mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant | -moabi
Select which procedure calling convention is in use.
@@item -EB | -EL
Select either big-endian (-EB) or little-endian (-EL) output.
@@item -mthumb-interwork
Specify that the code has been generated with interworking between Thumb and
ARM code in mind.
@@item -k
Specify that PIC code has been generated.
@@end table
@@end ifset

a365 19
@@ifset D30V
The following options are available when @@value{AS} is configured for a D30V
processor.
@@table @@code
@@cindex D30V optimization
@@cindex optimization, D30V
@@item -O
Optimize output by parallelizing instructions.

@@cindex D30V nops
@@item -n
Warn when nops are generated.

@@cindex D30V nops after 32-bit multiply
@@item -N
Warn when a nop after a 32-bit multiply instruction is generated.
@@end table
@@end ifset

a383 1

a411 20
@@ifset PJ
The following options are available when @@value{AS} is configured for
a picoJava processor.

@@table @@code

@@cindex PJ endianness
@@cindex endianness, PJ
@@cindex big endian output, PJ
@@item -mb
Generate ``big endian'' format output.

@@cindex little endian output, PJ
@@item -ml
Generate ``little endian'' format output.

@@end table
@@end ifset


d417 1
a417 2
@@item -Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite
@@itemx -Av8plus | -Av8plusa | -Av9 | -Av9a
a419 6
@@samp{-Av8plus} and @@samp{-Av8plusa} select a 32 bit environment.
@@samp{-Av9} and @@samp{-Av9a} select a 64 bit environment.

@@samp{-Av8plusa} and @@samp{-Av9a} enable the SPARC V9 instruction set with
UltraSPARC extensions.

d422 1
a422 1
equivalent to -Av8plus and -Av8plusa, respectively.
d459 1
a459 1
@@itemx -no-m4650
d471 1
a471 1
This option causes @@code{@@value{AS}} to emulate @@code{@@value{AS}} configured
a510 22
@@ifset MCORE
The following options are available when @@value{AS} is configured for
an MCore processor.

@@table @@code
@@item -jsri2bsr
@@itemx -nojsri2bsr
Enable or disable the JSRI to BSR transformation.  By default this is enabled.
The command line option @@samp{-nojsri2bsr} can be used to disable it.

@@item -sifilter
@@itemx -nosifilter
Enable or disable the silicon filter behaviour.  By default this is disabled.
The default can be overidden by the @@samp{-sifilter} command line option.

@@item -relax
Alter jump instructions for long displacements.


@@end table
@@end ifset

d737 4
a740 5
directives; they bear no relation to physical files.  Logical file names help
error messages reflect the original source file, when @@code{@@value{AS}} source
is itself synthesized from other files.  @@code{@@value{AS}} understands the
@@samp{#} directives emitted by the @@code{@@value{GCC}} preprocessor.  See also
@@ref{File,,@@code{.file}}.
d799 3
a801 2
(@@pxref{File,,@@code{.file}}) it is used for the filename, otherwise the name of
the current input file is used.  If a logical line number was given
d840 4
a843 4
If you are invoking @@code{@@value{AS}} via the @@sc{gnu} C compiler (version 2),
you can use the @@samp{-Wa} option to pass arguments through to the assembler.
The assembler arguments must be separated from each other (and the @@samp{-Wa})
by commas.  For example:
d850 2
a851 3
This passes two options to the assembler: @@samp{-alh} (emit a listing to
standard output with with high-level and assembly source) and @@samp{-L} (retain
local symbols in the symbol table).
a872 1
* MD::            --MD for dependency tracking
a875 1
* traditional-format:: --traditional-format for compatible output
d877 1
a877 1
* W::             -W, --no-warn, --warn, --fatal-warnings to control warnings
a1138 15
@@node MD
@@section Dependency tracking: @@code{--MD}

@@kindex --MD
@@cindex dependency tracking
@@cindex make rules

@@code{@@value{AS}} can generate a dependency file for the file it creates.  This
file consists of a single rule suitable for @@code{make} describing the
dependencies of the main source file.

The rule is written to the file named in its argument.

This feature is used in the automatic updating of makefiles.

a1211 11
@@node traditional-format
@@section Compatible output: @@code{--traditional-format}

@@kindex --traditional-format
For some targets, the output of @@code{@@value{AS}} is different in some ways
from the output of some existing assembler.  This switch requests
@@code{@@value{AS}} to use the traditional format instead.

For example, it disables the exception frame optimizations which
@@code{@@value{AS}} normally does by default on @@code{@@value{GCC}} output.

d1224 1
a1224 1
@@section Control Warnings: @@code{-W}, @@code{--warn}, @@code{--no-warn}, @@code{--fatal-warnings}
d1226 3
d1233 4
a1236 20

@@kindex @@samp{-W}
@@kindex @@samp{--no-warn}
@@cindex suppressing warnings
@@cindex warnings, suppressing
If you use the @@code{-W} and @@code{--no-warn} options, no warnings are issued.
This only affects the warning messages: it does not change any particular of
how @@code{@@value{AS}} assembles your file.  Errors, which stop the assembly,
are still reported.

@@kindex @@samp{--fatal-warnings}
@@cindex errors, caused by warnings
@@cindex warnings, causing error
If you use the @@code{--fatal-warnings} option, @@code{@@value{AS}} considers
files that generate warnings to be in error.

@@kindex @@samp{--warn}
@@cindex warnings, switching on
You can switch these options off again by specifying @@code{--warn}, which
causes warnings to be output as usual.
a1354 6
@@ifset ARC
@@samp{;} on the ARC;
@@end ifset
@@ifset ARM
@@samp{@@@@} on the ARM;
@@end ifset
a1366 3
@@ifset PJ
@@samp{;} for picoJava;
@@end ifset
a1372 3
@@ifset M32R
@@samp{#} on the m32r;
@@end ifset
a1381 3
@@ifset V850
@@samp{#} on the V850;
@@end ifset
a1390 7
@@ifset V850
The V850 assembler also supports a double dash as starting a comment that
extends to the end of the line.

@@samp{--};
@@end ifset

d1492 10
a1813 2
On the ARC, the letter must be one of the letters @@samp{DFRS}
(in upper or lower case).
a1823 3
@@ifset ARC
One of the letters @@samp{DFRS} (in upper or lower case).
@@end ifset
d2876 1
a2895 2
* Elseif::                      @@code{.elseif}
* End::				@@code{.end}
a2899 1
* Endfunc::                     @@code{.endfunc}
a2903 1
* Exitm::			@@code{.exitm}
a2904 1
* Fail::			@@code{.fail}
a2910 1
* Func::                        @@code{.func}  
a2939 1
* Print::			@@code{.print @@var{string}}
a2940 1
* Purgem::			@@code{.purgem @@var{name}}
d2946 2
a2958 1
* Sleb128::			@@code{.sleb128 @@var{expressions}}
a2964 1
* Struct::			@@code{.struct @@var{expression}}
a2977 3
@@ifset ELF
* Visibility::                  @@code{.internal @@var{name}, .hidden @@var{name}, .protected @@var{name}}
@@end ifset
a2978 1
* Uleb128::                     @@code{.uleb128 @@var{expressions}}
d3039 1
a3039 2
For other systems, including the i386 using a.out format, and the arm and
strongarm, it is the
d3051 18
d3260 2
a3261 9
@@node Elseif
@@section @@code{.elseif}

@@cindex @@code{elseif} directive
@@code{.elseif} is part of the @@code{@@value{AS}} support for conditional
assembly; @@pxref{If,,@@code{.if}}.  It is shorthand for beginning a new
@@code{.if} block that would otherwise fill the entire @@code{.else} section.

@@node End
d3265 4
a3268 2
@@code{.end} marks the end of the assembly file.  @@code{@@value{AS}} does not
process anything in the file past the @@code{.end} directive.
a3284 5
@@node Endfunc
@@section @@code{.endfunc}
@@cindex @@code{endfunc} directive
@@code{.endfunc} marks the end of a function specified with @@code{.func}.

a3327 4
@@node Exitm
@@section @@code{.exitm}
Exit early from the current macro definition.  @@xref{Macro}.

a3335 10
@@node Fail
@@section @@code{.fail @@var{expression}}

@@cindex @@code{fail} directive
Generates an error or a warning.  If the value of the @@var{expression} is 500
or more, @@code{@@value{AS}} will print a warning message.  If the value is less
than 500, @@code{@@value{AS}} will print an error message.  The message will
include the value of @@var{expression}.  This can occasionally be useful inside
complex nested macros or conditional assembly.

d3343 7
a3349 6
@@code{.file} tells @@code{@@value{AS}} that we are about to start a new logical
file.  @@var{string} is the new file name.  In general, the filename is
recognized whether or not it is surrounded by quotes @@samp{"}; but if you wish
to specify an empty file name, you must give the quotes--@@code{""}.  This
statement may go away in future: it is only recognized to be compatible with
old @@code{@@value{AS}} programs.
a3397 12
@@node Func
@@section @@code{.func @@var{name}[,@@var{label}]}
@@cindex @@code{func} directive
@@code{.func} emits debugging information to denote function @@var{name}, and
is ignored unless the file is assembled with debugging enabled.
Only @@samp{--gstabs} is currently supported.
@@var{label} is the entry point of the function and if omitted @@var{name}
prepended with the @@samp{leading char} is used.
@@samp{leading char} is usually @@code{_} or nothing, depending on the target.
All functions are currently defined to have @@code{void} return type.
The function must be terminated with @@code{.endfunc}.

a3460 2
If you have several conditions to check, @@code{.elseif} may be used to avoid
nesting blocks if/else within each subsequent @@code{.else} block.
d3469 1
a3469 12
@@cindex @@code{ifc} directive
@@item .ifc @@var{string1},@@var{string2}
Assembles the following section of code if the two strings are the same.  The
strings may be optionally quoted with single quotes.  If they are not quoted,
the first string stops at the first comma, and the second string stops at the
end of the line.  Strings which contain whitespace should be quoted.  The
string comparison is case sensitive.

@@cindex @@code{ifeq} directive
@@item .ifeq @@var{absolute expression}
Assembles the following section of code if the argument is zero.

d3471 3
a3473 25
@@item .ifeqs @@var{string1},@@var{string2}
Another form of @@code{.ifc}.  The strings must be quoted using double quotes.

@@cindex @@code{ifge} directive
@@item .ifge @@var{absolute expression}
Assembles the following section of code if the argument is greater than or
equal to zero.

@@cindex @@code{ifgt} directive
@@item .ifgt @@var{absolute expression}
Assembles the following section of code if the argument is greater than zero.

@@cindex @@code{ifle} directive
@@item .ifle @@var{absolute expression}
Assembles the following section of code if the argument is less than or equal
to zero.

@@cindex @@code{iflt} directive
@@item .iflt @@var{absolute expression}
Assembles the following section of code if the argument is less than zero.

@@cindex @@code{ifnc} directive
@@item .ifnc @@var{string1},@@var{string2}.
Like @@code{.ifc}, but the sense of the test is reversed: this assembles the
following section of code if the two strings are not the same.
d3482 4
a3485 9
@@cindex @@code{ifne} directive
@@item .ifne @@var{absolute expression}
Assembles the following section of code if the argument is not equal to zero
(in other words, this is equivalent to @@code{.if}).

@@cindex @@code{ifnes} directive
@@item .ifnes @@var{string1},@@var{string2}
Like @@code{.ifeqs}, but the sense of the test is reversed: this assembles the
following section of code if the two strings are not the same.
a3946 7
@@node Print
@@section @@code{.print @@var{string}}

@@cindex @@code{print} directive
@@code{@@value{AS}} will print @@var{string} on the standard output during
assembly.  You must put @@var{string} in double quotes.

a3966 7
@@node Purgem
@@section @@code{.purgem @@var{name}}

@@cindex @@code{purgem} directive
Undefine the macro @@var{name}, so that later uses of the string will not be
expanded.  @@xref{Macro}.

a4077 2
@@item s
shared section (meaningful for PE targets)
a4208 8
@@node Sleb128
@@section @@code{.sleb128 @@var{expressions}}

@@cindex @@code{sleb128} directive
@@var{sleb128} stands for ``signed little endian base 128.''  This is a 
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Uleb128,@@code{.uleb128}}.

a4332 20
@@node Struct
@@section @@code{.struct @@var{expression}}

@@cindex @@code{struct} directive
Switch to the absolute section, and set the section offset to @@var{expression},
which must be an absolute expression.  You might use this as follows:
@@smallexample
        .struct 0
field1:
        .struct field1 + 4
field2:
        .struct field2 + 4
field3:
@@end smallexample
This would define the symbol @@code{field1} to have the value 0, the symbol
@@code{field2} to have the value 4, and the symbol @@code{field3} to have the
value 8.  Assembly would be left in the absolute section, and you would need to
use a @@code{.section} directive of some sort to change to some other section
before further assembly.

a4438 42
@@node Uleb128
@@section @@code{.uleb128 @@var{expressions}}

@@cindex @@code{uleb128} directive
@@var{uleb128} stands for ``unsigned little endian base 128.''  This is a 
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Sleb128,@@code{.sleb128}}.

@@ifset ELF
@@node Visibility
@@section @@code{.internal}, @@code{.hidden}, @@code{.protected}
@@cindex @@code{internal} directive
@@cindex @@code{hidden} directive
@@cindex @@code{protected} directive
@@cindex symbol visibility

These directives can be used to set the visibility of a specified symbol.  By
default a symbol's visibility is set by its binding (local, global or weak),
but these directives can be used to override that.

A visibility of @@code{protected} means that any references to the symbol from
within the component that defines the symbol must be resolved to the definition
in that component, even if a definition in another component would normally
preempt this.

A visibility of @@code{hidden} means that the symbol is not visible to other 
components.  Such a symbol is always considered to be protected as well.

A visibility of @@code{internal} is the same as a visibility of @@code{hidden},
except that some extra, processor specific processing must also be performed
upon the symbol. 

For ELF targets, the directives are used like this:

@@smallexample
.internal @@var{name}
.hidden @@var{name}
.protected @@var{name}
@@end smallexample

@@end ifset

d4514 1
a4538 6
@@ifset ARC
* ARC-Dependent::               ARC Dependent Features
@@end ifset
@@ifset ARM
* ARM-Dependent::               ARM Dependent Features
@@end ifset
a4541 3
@@ifset D30V
* D30V-Dependent::              D30V Dependent Features
@@end ifset
a4550 3
@@ifset I370
* ESA/390-Dependent::           IBM ESA/390 Dependent Features
@@end ifset
a4565 3
@@ifset PJ
* PJ-Dependent::                picoJava Dependent Features
@@end ifset
a4568 3
@@ifset V850
* V850-Dependent::              V850 Dependent Features
@@end ifset
a4587 76
@@ifset ARC
@@ifset GENERIC
@@page
@@node ARC-Dependent
@@chapter ARC Dependent Features
@@end ifset
@@ifclear GENERIC
@@node Machine Dependencies
@@chapter ARC Dependent Features
@@end ifclear

@@cindex ARC support
@@menu
* ARC-Opts::                    Options
* ARC-Float::                   Floating Point
* ARC-Directives::              Sparc Machine Directives
@@end menu

@@node ARC-Opts
@@section Options

@@cindex options for ARC
@@cindex ARC options
@@cindex architectures, ARC
@@cindex ARC architectures
The ARC chip family includes several successive levels (or other
variants) of chip, using the same core instruction set, but including
a few additional instructions at each level.

By default, @@code{@@value{AS}} assumes the core instruction set (ARC
base).  The @@code{.cpu} pseudo-op is intended to be used to select
the variant.

@@table @@code
@@cindex @@code{-mbig-endian} option (ARC)
@@cindex @@code{-mlittle-endian} option (ARC)
@@cindex ARC big-endian output
@@cindex ARC little-endian output
@@cindex big-endian output, ARC
@@cindex little-endian output, ARC
@@item -mbig-endian
@@itemx -mlittle-endian
Any @@sc{arc} configuration of @@code{@@value{AS}} can select big-endian or
little-endian output at run time (unlike most other @@sc{gnu} development
tools, which must be configured for one or the other).  Use
@@samp{-mbig-endian} to select big-endian output, and @@samp{-mlittle-endian}
for little-endian.
@@end table

@@node ARC-Float
@@section Floating Point

@@cindex floating point, ARC (@@sc{ieee})
@@cindex ARC floating point (@@sc{ieee})
The ARC cpu family currently does not have hardware floating point
support.  Software floating point support is provided by @@code{GCC}
and uses @@sc{ieee} floating-point numbers.

@@node ARC-Directives
@@section ARC Machine Directives

@@cindex ARC machine directives
@@cindex machine directives, ARC
The ARC version of @@code{@@value{AS}} supports the following additional
machine directives:

@@table @@code
@@item .cpu
@@cindex @@code{cpu} directive, SPARC
This must be followed by the desired cpu.
The ARC is intended to be customizable, @@code{.cpu} is used to
select the desired variant [though currently there are none].

@@end table

@@end ifset
a4592 4
@@ifset ARM
@@include c-arm.texi
@@end ifset

a4615 4
@@ifset D30V
@@include c-d30v.texi
@@end ifset

a4627 4
@@ifset I370
@@include c-i370.texi
@@end ifset

a4635 1

a4647 4
@@ifset PJ
@@include c-pj.texi
@@end ifset

a4663 4
@@ifset V850
@@include c-v850.texi
@@end ifset

d4732 1
a4732 1
to @@samp{bug-gnu-utils@@@@gnu.org}.
a4948 2

Linas Vepstas added GAS support for the ESA/390 "IBM 370" architecture.
@


1.1.1.7
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
@@c  Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
@@c  2001
d90 1
a90 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
d92 3
a94 6
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
d103 7
d145 1
a145 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
d147 8
a154 6
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
d156 2
a169 5

This document is distributed under the terms of the GNU Free
Documentation License.  A copy of the license is included in the
section entitled "GNU Free Documentation License".

a180 1
* GNU Free Documentation License::  GNU Free Documentation License
d208 1
a208 1
 [ -w ] [ -x ] [ -Z ] [ --target-help ]
d213 1
a213 2
 [ -marc[5|6|7|8] ]
 [ -EB | -EL ]
d222 1
a222 1
   -m[arm]v5 | -[arm]v5t | -[arm]v5te ]
a251 4
@@ifset TIC54X
 [ -mcpu=54[123589] | -mcpu=54[56]lp ] [ -mfar-mode | -mf ] 
 [ -merrors-to-file <filename> | -me <filename> ]
@@end ifset
a259 3
@@ifset M32R
 [ --m32rx | --[no-]warn-explicit-parallel-conflicts | --W[n]p ]
@@end ifset
a264 6
 [ -mcpu=[210|340] ]
@@end ifset
@@ifset M68HC11
 [ -m68hc11 | -m68hc12 ]
 [ --force-long-branchs ] [ --short-branchs ] [ --strict-direct-mode ]
 [ --print-insn-syntax ] [ --print-opcodes ] [ --generate-example ]
d268 1
a268 3
 [ -mips1 ] [ -mips2 ] [ -mips3 ] [ -mips4 ] [ -mips5 ]
 [ -mips32 ] [ -mips64 ]
 [ -m4650 ] [ -no-m4650 ]
d328 1
a328 2
may help debugging assembler code, if the debugger can handle it.  Note - this
option is only supported by some targets, not all of them.
a332 3
@@item --target-help
Print a summary of all target specific options and exit.

d402 11
a412 4
@@item -marc[5|6|7|8]
This option selects the core processor variant.
@@item -EB | -EL
Select either big-endian (-EB) or little-endian (-EL) output.
d428 1
a428 1
Select which Floating Point architecture is the target.
a488 20
@@ifset M32R
The following options are available when @@value{AS} is configured for the
Mitsubishi M32R series.

@@table @@code

@@item --m32rx
Specify which processor in the M32R family is the target.  The default
is normally the M32R, but this option changes it to the M32RX.

@@item --warn-explicit-parallel-conflicts or --Wp
Produce warning messages when questionable parallel constructs are
encountered. 

@@item --no-warn-explicit-parallel-conflicts or --Wnp
Do not produce warning messages when questionable parallel constructs are 
encountered. 

@@end table
@@end ifset
a536 35
@@ifset M68HC11
The following options are available when @@value{AS} is configured for the
Motorola 68HC11 or 68HC12 series.

@@table @@code

@@item -m68hc11 | -m68hc12
Specify what processor is the target.  The default is
defined by the configuration option when building the assembler.

@@item --force-long-branchs
Relative branches are turned into absolute ones. This concerns
conditional branches, unconditional branches and branches to a
sub routine.

@@item -S | --short-branchs
Do not turn relative branchs into absolute ones
when the offset is out of range.

@@item --strict-direct-mode
Do not turn the direct addressing mode into extended addressing mode
when the instruction does not support direct addressing mode.

@@item --print-insn-syntax
Print the syntax of instruction in case of error.

@@item --print-opcodes
print the list of instructions with syntax and then exit.

@@item --generate-example
print an example of instruction for each possible instruction and then exit.
This option is only useful for testing @@code{@@value{AS}}.

@@end table
@@end ifset
a561 16
@@ifset TIC54X
The following options are available when @@value{AS} is configured for the 'c54x
architecture. 

@@table @@code
@@item -mfar-mode
Enable extended addressing mode.  All addresses and relocations will assume
extended addressing (usually 23 bits).
@@item -mcpu=@@var{CPU_VERSION}
Sets the CPU version being compiled for.
@@item -merrors-to-file @@var{FILENAME}
Redirect error output to a file, for broken systems which don't support such
behaviour in the shell.
@@end table
@@end ifset

a585 2
@@itemx -mips4
@@itemx -mips32
a589 3
@@samp{-mips5}, @@samp{-mips32}, and @@samp{-mips64} correspond
to generic @@sc{MIPS V}, @@sc{MIPS32}, and @@sc{MIPS64} ISA
processors, respectively.
d599 2
a600 3
Generate code for a particular MIPS cpu.  It is exactly equivalent to
@@samp{-m@@var{cpu}}, except that there are more value of @@var{cpu}
understood.
d657 1
a657 1
The default can be overridden by the @@samp{-sifilter} command line option.
a661 9
@@item -mcpu=[210|340]
Select the cpu type on the target hardware.  This controls which instructions
can be assembled.

@@item -EB
Assemble for a big endian target.

@@item -EL
Assemble for a little endian target.
d936 1
a936 1
@@cindex error messages
a1566 3
@@ifset I80386
@@samp{#} on the i386 and x86-64;
@@end ifset
a1584 3
@@ifset M68HC11
@@samp{#} on the 68HC11 and 68HC12;
@@end ifset
d1595 1
a1595 1
@@c FIXME What about m88k, i860?
d2300 1
a2300 1
is used to hold uninitialized variables or common storage.  The length of
d3036 1
a3036 1
Low Precedence
a3055 35

@@cindex comparison expressions
@@cindex expressions, comparison
@@item  ==
@@dfn{Is Equal To}
@@item <>
@@dfn{Is Not Equal To}
@@item <
@@dfn{Is Less Than}
@@itemx >
@@dfn{Is Greater Than}
@@itemx >=
@@dfn{Is Greater Than Or Equal To}
@@itemx <=
@@dfn{Is Less Than Or Equal To}

The comparison operators can be used as infix operators.  A true results has a
value of -1 whereas a false result has a value of 0.   Note, these operators
perform signed comparisons.
@@end table

@@item Lowest Precedence

@@table @@code
@@item &&
@@dfn{Logical And}.

@@item ||
@@dfn{Logical Or}.

These two logical operations can be used to combine the results of sub
expressions.  Note, unlike the comparison operators a true result returns a
value of 1 but a false results does still return 0.  Also note that the logical
or operator has a slightly lower precedence than logical and.

a3130 4
@@ifset ELF
* Hidden::                      @@code{.hidden @@var{names}}
@@end ifset

a3135 4
@@ifset ELF
* Internal::                    @@code{.internal @@var{names}}
@@end ifset

d3154 1
a3158 5
@@ifset ELF
* PopSection::                  @@code{.popsection}
* Previous::                    @@code{.previous}
@@end ifset

a3159 4
@@ifset ELF
* Protected::                   @@code{.protected @@var{names}}
@@end ifset

a3161 4
@@ifset ELF
* PushSection::                 @@code{.pushsection @@var{name}}
@@end ifset

d3173 4
a3176 1
* Size::                        @@code{.size [@@var{name} , @@var{expression}]}
a3186 1
* SubSection::                  @@code{.subsection}
a3188 1

a3194 2
* Type::                        @@code{.type <@@var{int} | @@var{name} , @@var{type description}>}
* Uleb128::                     @@code{.uleb128 @@var{expressions}}
d3196 1
a3198 1

d3200 1
a3200 4
* Version::                     @@code{.version "@@var{string}"}
* VTableEntry::                 @@code{.vtable_entry @@var{table}, @@var{offset}}
* VTableInherit::               @@code{.vtable_inherit @@var{child}, @@var{parent}}
* Weak::                        @@code{.weak @@var{names}}
d3203 1
a3660 16
@@ifset ELF
@@node Hidden
@@section @@code{.hidden @@var{names}}

@@cindex @@code{.hidden} directive
@@cindex Visibility
This one of the ELF visibility directives.  The other two are
@@code{.internal} (@@pxref{Internal,,@@code{.internal}}) and 
@@code{.protected} (@@pxref{Protected,,@@code{.protected}}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{hidden} which means that the symbols are not visible to other components.
Such symbols are always considered to be @@code{protected} as well. 
@@end ifset

a3802 17
@@ifset ELF
@@node Internal
@@section @@code{.internal @@var{names}}

@@cindex @@code{.internal} directive
@@cindex Visibility
This one of the ELF visibility directives.  The other two are
@@code{.hidden} (@@pxref{Hidden,,@@code{.hidden}}) and 
@@code{.protected} (@@pxref{Protected,,@@code{.protected}}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{internal} which means that the symbols are considered to be @@code{hidden}
(ie not visible to other components), and that some extra, processor specific
processing must also be performed upon the  symbols as well.
@@end ifset

a4229 36
@@ifset ELF
@@node Previous
@@section @@code{.previous}

@@cindex @@code{.previous} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}),
@@code{.pushsection} (@@pxref{PushSection}), and @@code{.popsection}
(@@pxref{PopSection}).

This directive swaps the current section (and subsection) with most recently
referenced section (and subsection) prior to this one.  Multiple
@@code{.previous} directives in a row will flip between two sections (and their
subsections).

In terms of the section stack, this directive swaps the current section with
the top section on the section stack.
@@end ifset

@@ifset ELF
@@node PopSection
@@section @@code{.popsection}

@@cindex @@code{.popsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}), 
@@code{.pushsection} (@@pxref{PushSection}), and @@code{.previous} 
(@@pxref{Previous}).

This directive replaces the current section (and subsection) with the top
section (and subsection) on the section stack.  This section is popped off the
stack. 
@@end ifset

a4236 17
@@ifset ELF
@@node Protected
@@section @@code{.protected @@var{names}}

@@cindex @@code{.protected} directive
@@cindex Visibility
This one of the ELF visibility directives.  The other two are
@@code{.hidden} (@@pxref{Hidden}) and @@code{.internal} (@@pxref{Internal}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@@code{protected} which means that any references to the symbols from within the
components that defines them must be resolved to the definition in that
component, even if a definition in another component would normally preempt
this. 
@@end ifset

a4263 16
@@ifset ELF
@@node PushSection
@@section @@code{.pushsection @@var{name} , @@var{subsection}}

@@cindex @@code{.pushsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.subsection} (@@pxref{SubSection}), 
@@code{.popsection} (@@pxref{PopSection}), and @@code{.previous} 
(@@pxref{Previous}).

This directive is a synonym for @@code{.section}.  It pushes the current section
(and subsection) onto the top of the section stack, and then replaces the
current section and subsection with @@code{name} and @@code{subsection}.
@@end ifset

d4341 1
a4341 1
@@section @@code{.section @@var{name}} (COFF version)
d4352 1
a4354 1

d4385 1
a4386 5

@@section @@code{.section @@var{name}} (ELF version)

@@cindex @@code{section} directive
@@cindex named section
a4387 7
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.subsection} (@@pxref{SubSection}), @@code{.pushsection} 
(@@pxref{PushSection}), @@code{.popsection} (@@pxref{PopSection}), and
@@code{.previous} (@@pxref{Previous}).
@@end ifset

a4388 1

d4390 1
a4390 1
.section @@var{name} [, "@@var{flags}"[, @@@@@@var{type}]]
a4391 1

d4393 1
a4393 1
combination of the following characters:
a4417 1

a4420 1

d4431 1
a4431 5

This directive replaces the current section and subsection.  The replaced
section and subsection are pushed onto the section stack.  See the contents of
the gas testsuite directory @@code{gas/testsuite/gas/elf} for some examples of
how this directive and the other section stack directives work.
d4492 1
d4494 1
a4494 1
@@section @@code{.size} (COFF version)
d4500 1
a4501 1
@@ifset BOUT
d4506 1
a4506 8

@@section @@code{.size @@var{name} , @@var{expression}} (ELF version)
@@cindex @@code{size} directive

This directive is used to set the size associated with a symbol @@var{name}.
The size in bytes is computed from @@var{expression} which can make use of label
arithmetic.  This directive is typically used to set the size of function
symbols.
a4660 16
@@node SubSection
@@section @@code{.subsection @@var{name}}

@@cindex @@code{.subsection} directive
@@cindex Section Stack
This is one of the ELF section stack manipulation directives.  The others are
@@code{.section} (@@pxref{Section}), @@code{.pushsection} (@@pxref{PushSection}), 
@@code{.popsection} (@@pxref{PopSection}), and @@code{.previous} 
(@@pxref{Previous}).

This directive replaces the current subsection with @@code{name}.  The current
section is not changed.  The replaced subsection is put onto the section stack
in place of the then current top of stack subsection.
@@end ifset

@@ifset ELF
d4673 1
a4673 1
For ELF targets, the @@code{.symver} directive can be used like this:
d4677 2
a4678 2
If the symbol @@var{name} is defined within the file
being assembled, the @@code{.symver} directive effectively creates a symbol
a4690 23

If the symbol @@var{name} is not defined within the file being assembled, all
references to @@var{name} will be changed to @@var{name2@@@@nodename}.  If no
reference to @@var{name} is made, @@var{name2@@@@nodename} will be removed from the
symbol table.

Another usage of the @@code{.symver} directive is:
@@smallexample
.symver @@var{name}, @@var{name2@@@@@@@@nodename}
@@end smallexample
In this case, the symbol @@var{name} must exist and be defined within
the file being assembled. It is similar to @@var{name2@@@@nodename}. The
difference is @@var{name2@@@@@@@@nodename} will also be used to resolve
references to @@var{name2} by the linker.

The third usage of the @@code{.symver} directive is:
@@smallexample
.symver @@var{name}, @@var{name2@@@@@@@@@@@@nodename}
@@end smallexample
When @@var{name} is not defined within the
file being assembled, it is treated as @@var{name2@@@@nodename}. When
@@var{name} is defined within the file being assembled, the symbol
name, @@var{name}, will be changed to @@var{name2@@@@@@@@nodename}.
d4732 1
d4734 1
a4734 1
@@section @@code{.type @@var{int}} (COFF version)
d4741 1
a4742 1
@@ifset BOUT
d4747 1
a4747 35

@@section @@code{.type @@var{name} , @@var{type description}} (ELF version)

@@cindex ELF symbol type
@@cindex symbol type, ELF
@@cindex @@code{type} directive
This directive is used to set the type of symbol @@var{name} to be either a
function symbol or an object symbol.  There are five different syntaxes
supported for the @@var{type description} field, in order to provide
compatibility with various other assemblers.  The syntaxes supported are:

@@smallexample
  .type <name>,#function
  .type <name>,#object

  .type <name>,@@@@function
  .type <name>,@@@@object

  .type <name>,%function
  .type <name>,%object
  
  .type <name>,"function"
  .type <name>,"object"
  
  .type <name> STT_FUNCTION
  .type <name> STT_OBJECT
@@end smallexample

@@node Uleb128
@@section @@code{.uleb128 @@var{expressions}}

@@cindex @@code{uleb128} directive
@@var{uleb128} stands for ``unsigned little endian base 128.''  This is a 
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @@xref{Sleb128,@@code{.sleb128}}.
d4766 2
a4767 3
@@ifset ELF
@@node Version
@@section @@code{.version "@@var{string}"}
d4769 4
a4772 4
@@cindex @@code{.version}
This directive creates a @@code{.note} section and places into it an ELF
formatted note of type NT_VERSION.  The note's name is set to @@code{string}.
@@end ifset
d4775 22
a4796 2
@@node VTableEntry
@@section @@code{.vtable_entry @@var{table}, @@var{offset}}
d4798 1
a4798 13
@@cindex @@code{.vtable_entry}
This directive finds or creates a symbol @@code{table} and creates a
@@code{VTABLE_ENTRY} relocation for it with an addend of @@code{offset}.

@@node VTableInherit
@@section @@code{.vtable_inherit @@var{child}, @@var{parent}}

@@cindex @@code{.vtable_inherit}
This directive finds the symbol @@code{child} and finds or creates the symbol
@@code{parent} and then creates a @@code{VTABLE_INHERIT} relocation for the
parent whose addend is the value of the child symbol.  As a special case the
parent name of @@code{0} is treated as refering the @@code{*ABS*} section.
@@end ifset
d4800 5
a4804 3
@@ifset ELF
@@node Weak
@@section @@code{.weak @@var{names}}
a4805 3
@@cindex @@code{.weak}
This directive sets the weak attribute on the comma separated list of symbol
@@code{names}.  If the symbols do not already exist, they will be created.
d4845 1
a4845 1
@@code{@@value{AS}} occasionally does strange things to @@samp{.word} directives.
d4932 1
a4932 4
* i386-Dependent::              Intel 80386 and AMD x86-64 Dependent Features
@@end ifset
@@ifset I860
* i860-Dependent::              Intel 80860 Dependent Features
a4936 3
@@ifset M32R
* M32R-Dependent::              M32R Dependent Features
@@end ifset
a4939 3
@@ifset M68HC11
* M68HC11-Dependent::           M68HC11 and 68HC12 Dependent Features
@@end ifset
a4951 3
@@ifset TIC54X
* TIC54X-Dependent::            TI TMS320C54x Dependent Features
@@end ifset
d4975 74
a5048 1
@@include c-arc.texi
a5105 4
@@ifset I860
@@include c-i860.texi
@@end ifset

a5109 3
@@ifset M32R
@@include c-m32r.texi
@@end ifset
a5114 4
@@ifset M68HC11
@@include c-m68hc11.texi
@@end ifset

a5134 4
@@ifset TIC54X
@@include c-tic54x.texi
@@end ifset

d5215 1
a5215 1
to @@samp{bug-binutils@@@@gnu.org}.
a5437 3
Timothy Wall, Michael Hayes, and Greg Smart contributed to the various tic*
flavors.

a5444 363

@@node GNU Free Documentation License
@@chapter GNU Free Documentation License

                GNU Free Documentation License
                
                   Version 1.1, March 2000

 Copyright (C) 2000  Free Software Foundation, Inc.
  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML designed for human modification.  Opaque formats include
PostScript, PDF, proprietary formats that can be read and edited only
by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML produced by some word processors for output
purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.


2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has less than five).
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section entitled "History", and its title, and add to
   it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. In any section entitled "Acknowledgements" or "Dedications",
   preserve the section's title, and preserve in the section all the
   substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section as "Endorsements"
   or to conflict in title with any Invariant Section.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@@smallexample
    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.1
    or any later version published by the Free Software Foundation;
    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".
@@end smallexample

If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write "no Front-Cover Texts" instead of
"Front-Cover Texts being LIST"; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
@


1.1.1.8
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d3 1
a3 1
@@c  2001, 2002
a15 3
@@macro gcctabopt{body}
@@code{\body\}
@@end macro
a21 40
@@c man begin NAME
@@ifset man
@@c Configure for the generation of man pages
@@set AS as
@@set TARGET TARGET
@@set GENERIC
@@set A29K
@@set ALPHA
@@set ARC
@@set ARM
@@set CRIS
@@set D10V
@@set D30V
@@set H8/300
@@set H8/500
@@set HPPA
@@set I370
@@set I80386
@@set I860
@@set I960
@@set IA-64
@@set IP2K
@@set M32R
@@set M68HC11
@@set M680X0
@@set M880X0
@@set MCORE
@@set MIPS
@@set MMIX
@@set PDP11
@@set PJ
@@set PPC
@@set SH
@@set SPARC
@@set TIC54X
@@set V850
@@set VAX
@@set XTENSA
@@end ifset
@@c man end
a22 6
@@ifset COFF
@@set COFF-ELF
@@end ifset
@@ifset ELF
@@set COFF-ELF
@@end ifset
a80 1
* Gas: (as).                    The GNU assembler.
d91 1
a91 2
@@c man begin COPYRIGHT
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002 Free Software Foundation, Inc.
d93 6
a98 8
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@@c man end
d121 1
a121 1
first (Vax) version of @@command{as} for Project @@sc{gnu}.
d142 1
a142 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002 Free Software Foundation, Inc.
d149 1
a149 1
      section entitled ``GNU Free Documentation License''.
d153 1
a153 1
@@ifnottex
d157 1
a157 1
This file is a user guide to the @@sc{gnu} assembler @@command{@@value{AS}} version
d160 1
a160 1
This version of the file describes @@command{@@value{AS}} configured to generate
d166 1
a166 1
section entitled ``GNU Free Documentation License''.
d182 1
a182 1
@@end ifnottex
d187 1
a187 1
This manual is a user guide to the @@sc{gnu} assembler @@command{@@value{AS}}.
d189 1
a189 1
This version of the manual describes @@command{@@value{AS}} configured to generate
d197 2
a198 10
Here is a brief summary of how to invoke @@command{@@value{AS}}.  For details,
@@pxref{Invoking,,Command-Line Options}.

@@c man title AS the portable GNU assembler.

@@ignore
@@c man begin SEEALSO
gcc(1), ld(1), and the Info entries for @@file{binutils} and @@file{ld}.
@@c man end
@@end ignore
d203 5
a207 13
@@c man begin SYNOPSIS
@@value{AS} [@@b{-a}[@@b{cdhlns}][=@@var{file}]] [@@b{-D}] [@@b{--defsym} @@var{sym}=@@var{val}]
 [@@b{-f}] [@@b{--gstabs}] [@@b{--gdwarf2}] [@@b{--help}] [@@b{-I} @@var{dir}] 
 [@@b{-J}] [@@b{-K}] [@@b{-L}]
 [@@b{--listing-lhs-width}=@@var{NUM}] [@@b{--listing-lhs-width2}=@@var{NUM}]
 [@@b{--listing-rhs-width}=@@var{NUM}] [@@b{--listing-cont-lines}=@@var{NUM}]
 [@@b{--keep-locals}] [@@b{-o} @@var{objfile}] [@@b{-R}] [@@b{--statistics}] [@@b{-v}]
 [@@b{-version}] [@@b{--version}] [@@b{-W}] [@@b{--warn}] [@@b{--fatal-warnings}] 
 [@@b{-w}] [@@b{-x}] [@@b{-Z}] [@@b{--target-help}] [@@var{target-options}] 
 [@@b{--}|@@var{files} @@dots{}]
@@c
@@c Target dependent options are listed below.  Keep the list sorted.
@@c Add an empty line for separation. 
a210 8
@@ifset ALPHA

@@emph{Target Alpha options:}
   [@@b{-m@@var{cpu}}]
   [@@b{-mdebug} | @@b{-no-mdebug}]
   [@@b{-relax}] [@@b{-g}] [@@b{-G@@var{size}}]
   [@@b{-F}] [@@b{-32addr}]
@@end ifset
d212 2
a213 4

@@emph{Target ARC options:}
   [@@b{-marc[5|6|7|8]}]
   [@@b{-EB}|@@b{-EL}]
d216 14
a229 20

@@emph{Target ARM options:}
@@c Don't document the deprecated options
   [@@b{-mcpu}=@@var{processor}[+@@var{extension}@@dots{}]]
   [@@b{-march}=@@var{architecture}[+@@var{extension}@@dots{}]]
   [@@b{-mfpu}=@@var{floating-point-fromat}]
   [@@b{-mthumb}]
   [@@b{-EB}|@@b{-EL}]
   [@@b{-mapcs-32}|@@b{-mapcs-26}|@@b{-mapcs-float}|
    @@b{-mapcs-reentrant}]
   [@@b{-mthumb-interwork}] [@@b{-moabi}] [@@b{-k}]
@@end ifset
@@ifset CRIS

@@emph{Target CRIS options:}
   [@@b{--underscore} | @@b{--no-underscore}]
   [@@b{--pic}] [@@b{-N}]
   [@@b{--emulation=criself} | @@b{--emulation=crisaout}]
@@c Deprecated -- deliberately not documented.
@@c [@@b{-h}] [@@b{-H}]
d232 1
a232 3

@@emph{Target D10V options:}
   [@@b{-O}]
d235 1
a235 3

@@emph{Target D30V options:}
   [@@b{-O}|@@b{-n}|@@b{-N}]
d238 1
a238 1
@@c Renesas family chips have no machine-dependent assembler options
d243 15
a257 4
@@ifset I80386

@@emph{Target i386 options:}
   [@@b{--32}|@@b{--64}]
a259 2

@@emph{Target i960 options:}
d261 2
a262 16
   [@@b{-ACA}|@@b{-ACA_A}|@@b{-ACB}|@@b{-ACC}|@@b{-AKA}|@@b{-AKB}|
    @@b{-AKC}|@@b{-AMC}]
   [@@b{-b}] [@@b{-no-relax}]
@@end ifset
@@ifset IA64

@@emph{Target IA-64 options:}
   [@@b{-mconstant-gp}|@@b{-mauto-pic}]
   [@@b{-milp32}|@@b{-milp64}|@@b{-mlp64}|@@b{-mp64}]
   [@@b{-mle}|@@b{mbe}]
   [@@b{-x}|@@b{-xexplicit}] [@@b{-xauto}] [@@b{-xdebug}]
@@end ifset
@@ifset IP2K

@@emph{Target IP2K options:}
   [@@b{-mip2022}|@@b{-mip2022ext}]
d265 1
a265 4

@@emph{Target M32R options:}
   [@@b{--m32rx}|@@b{--[no-]warn-explicit-parallel-conflicts}|
   @@b{--W[n]p}]
d268 5
a272 3

@@emph{Target M680X0 options:}
   [@@b{-l}] [@@b{-m68000}|@@b{-m68010}|@@b{-m68020}|@@dots{}]
d275 3
a277 14

@@emph{Target M68HC11 options:}
   [@@b{-m68hc11}|@@b{-m68hc12}|@@b{-m68hcs12}]
   [@@b{-mshort}|@@b{-mlong}]
   [@@b{-mshort-double}|@@b{-mlong-double}]
   [@@b{--force-long-branchs}] [@@b{--short-branchs}]
   [@@b{--strict-direct-mode}] [@@b{--print-insn-syntax}]
   [@@b{--print-opcodes}] [@@b{--generate-example}]
@@end ifset
@@ifset MCORE

@@emph{Target MCORE options:}
   [@@b{-jsri2bsr}] [@@b{-sifilter}] [@@b{-relax}]
   [@@b{-mcpu=[210|340]}]
d280 6
a285 36

@@emph{Target MIPS options:}
   [@@b{-nocpp}] [@@b{-EL}] [@@b{-EB}] [@@b{-n}] [@@b{-O}[@@var{optimization level}]]
   [@@b{-g}[@@var{debug level}]] [@@b{-G} @@var{num}] [@@b{-KPIC}] [@@b{-call_shared}]
   [@@b{-non_shared}] [@@b{-xgot}] [@@b{--membedded-pic}]
   [@@b{-mabi}=@@var{ABI}] [@@b{-32}] [@@b{-n32}] [@@b{-64}] [@@b{-mfp32}] [@@b{-mgp32}]
   [@@b{-march}=@@var{CPU}] [@@b{-mtune}=@@var{CPU}] [@@b{-mips1}] [@@b{-mips2}]
   [@@b{-mips3}] [@@b{-mips4}] [@@b{-mips5}] [@@b{-mips32}] [@@b{-mips32r2}]
   [@@b{-mips64}]
   [@@b{-construct-floats}] [@@b{-no-construct-floats}]
   [@@b{-trap}] [@@b{-no-break}] [@@b{-break}] [@@b{-no-trap}]
   [@@b{-mfix7000}] [@@b{-mno-fix7000}]
   [@@b{-mips16}] [@@b{-no-mips16}]
   [@@b{-mips3d}] [@@b{-no-mips3d}]
   [@@b{-mdmx}] [@@b{-no-mdmx}]
   [@@b{-mdebug}] [@@b{-no-mdebug}]
@@end ifset
@@ifset MMIX

@@emph{Target MMIX options:}
   [@@b{--fixed-special-register-names}] [@@b{--globalize-symbols}]
   [@@b{--gnu-syntax}] [@@b{--relax}] [@@b{--no-predefined-symbols}]
   [@@b{--no-expand}] [@@b{--no-merge-gregs}] [@@b{-x}]
   [@@b{--linker-allocated-gregs}]
@@end ifset
@@ifset PDP11

@@emph{Target PDP11 options:}
   [@@b{-mpic}|@@b{-mno-pic}] [@@b{-mall}] [@@b{-mno-extensions}]
   [@@b{-m}@@var{extension}|@@b{-mno-}@@var{extension}]
   [@@b{-m}@@var{cpu}] [@@b{-m}@@var{machine}]  
@@end ifset
@@ifset PJ

@@emph{Target picoJava options:}
   [@@b{-mb}|@@b{-me}]
d287 1
a287 38
@@ifset PPC

@@emph{Target PowerPC options:}
   [@@b{-mpwrx}|@@b{-mpwr2}|@@b{-mpwr}|@@b{-m601}|@@b{-mppc}|@@b{-mppc32}|@@b{-m603}|@@b{-m604}|
    @@b{-m403}|@@b{-m405}|@@b{-mppc64}|@@b{-m620}|@@b{-mppc64bridge}|@@b{-mbooke}|
    @@b{-mbooke32}|@@b{-mbooke64}]
   [@@b{-mcom}|@@b{-many}|@@b{-maltivec}] [@@b{-memb}]
   [@@b{-mregnames}|@@b{-mno-regnames}]
   [@@b{-mrelocatable}|@@b{-mrelocatable-lib}]
   [@@b{-mlittle}|@@b{-mlittle-endian}|@@b{-mbig}|@@b{-mbig-endian}]
   [@@b{-msolaris}|@@b{-mno-solaris}]
@@end ifset
@@ifset SPARC

@@emph{Target SPARC options:}
@@c The order here is important.  See c-sparc.texi.
   [@@b{-Av6}|@@b{-Av7}|@@b{-Av8}|@@b{-Asparclet}|@@b{-Asparclite}
    @@b{-Av8plus}|@@b{-Av8plusa}|@@b{-Av9}|@@b{-Av9a}]
   [@@b{-xarch=v8plus}|@@b{-xarch=v8plusa}] [@@b{-bump}]
   [@@b{-32}|@@b{-64}]
@@end ifset
@@ifset TIC54X

@@emph{Target TIC54X options:}
 [@@b{-mcpu=54[123589]}|@@b{-mcpu=54[56]lp}] [@@b{-mfar-mode}|@@b{-mf}] 
 [@@b{-merrors-to-file} @@var{<filename>}|@@b{-me} @@var{<filename>}]
@@end ifset
@@ifset Z8000
@@c Z8000 has no machine-dependent assembler options
@@end ifset
@@ifset XTENSA

@@emph{Target Xtensa options:}
 [@@b{--[no-]density}] [@@b{--[no-]relax}] [@@b{--[no-]generics}]
 [@@b{--[no-]text-section-literals}]
 [@@b{--[no-]target-align}] [@@b{--[no-]longcalls}]
@@end ifset
@@c man end
d290 1
a290 3
@@c man begin OPTIONS

@@table @@gcctabopt
d294 1
a294 1
@@table @@gcctabopt
d343 1
a343 1
may help debugging assembler code, if the debugger can handle it.  Note---this
a371 16
@@item --listing-lhs-width=@@var{number}
Set the maximum width, in words, of the output data column for an assembler
listing to @@var{number}.

@@item --listing-lhs-width2=@@var{number}
Set the maximum width, in words, of the output data column for continuation
lines in an assembler listing to @@var{number}.

@@item --listing-rhs-width=@@var{number}
Set the maximum width of an input source line, as displayed in a listing, to
@@var{number} bytes.

@@item --listing-cont-lines=@@var{number}
Set the maximum number of lines printed in a listing for a single line of input
to @@var{number} + 1.

d373 1
a373 1
Name the object-file output from @@command{@@value{AS}} @@var{objfile}.
d387 1
a387 1
Print the @@command{as} version.
d390 1
a390 1
Print the @@command{as} version and exit.
d420 1
a420 1
@@table @@gcctabopt
d432 2
a433 2
@@table @@gcctabopt
@@item -mcpu=@@var{processor}[+@@var{extension}@@dots{}]
d435 1
a435 1
@@item -march=@@var{architecture}[+@@var{extension}@@dots{}]
d437 3
a439 1
@@item -mfpu=@@var{floating-point-format}
a440 2
@@item -mthumb
Enable Thumb only instruction decoding.
a452 4
@@ifset CRIS
See the info pages for documentation of the CRIS-specific options.
@@end ifset

d456 1
a456 1
@@table @@gcctabopt
d467 1
a467 1
@@table @@gcctabopt
d487 1
a487 1
@@table @@gcctabopt
a500 16
@@ifset IP2K
The following options are available when @@value{AS} is configured for the
Ubicom IP2K series.

@@table @@gcctabopt

@@item -mip2022ext
Specifies that the extended IP2022 instructions are allowed.

@@item -mip2022
Restores the default behaviour, which restricts the permitted instructions to
just the basic IP2022 ones.

@@end table
@@end ifset

d503 1
a503 1
Renesas M32R (formerly Mitsubishi M32R) series.
d505 1
a505 1
@@table @@gcctabopt
d526 1
a526 1
@@table @@gcctabopt
d531 2
a532 3
@@item -m68000 | -m68008 | -m68010 | -m68020 | -m68030
@@itemx | -m68040 | -m68060 | -m68302 | -m68331 | -m68332
@@itemx | -m68333 | -m68340 | -mcpu32 | -m5200
a549 31
@@ifset PDP11

For details about the PDP-11 machine dependent features options,
see @@ref{PDP-11-Options}.

@@table @@gcctabopt
@@item -mpic | -mno-pic
Generate position-independent (or position-dependent) code.  The
default is @@option{-mpic}.

@@item -mall
@@itemx -mall-extensions
Enable all instruction set extensions.  This is the default.

@@item -mno-extensions
Disable all instruction set extensions.

@@item -m@@var{extension} | -mno-@@var{extension}
Enable (or disable) a particular instruction set extension.

@@item -m@@var{cpu}
Enable the instruction set extensions supported by a particular CPU, and
disable all other extensions.

@@item -m@@var{machine}
Enable the instruction set extensions supported by a particular machine
model, and disable all other extensions.
@@end table

@@end ifset

d554 1
a554 1
@@table @@gcctabopt
d573 1
a573 1
@@table @@gcctabopt
d575 1
a575 1
@@item -m68hc11 | -m68hc12 | -m68hcs12
a578 12
@@item -mshort
Specify to use the 16-bit integer ABI.

@@item -mlong
Specify to use the 32-bit integer ABI.  

@@item -mshort-double
Specify to use the 32-bit double ABI.  

@@item -mlong-double
Specify to use the 64-bit double ABI.  

d600 1
a600 1
This option is only useful for testing @@command{@@value{AS}}.
d606 1
a606 1
The following options are available when @@command{@@value{AS}} is configured
d609 1
a609 1
@@table @@gcctabopt
d633 1
a633 1
@@table @@gcctabopt
d647 1
a647 1
a @@sc{mips} processor.
d649 1
a649 1
@@table @@gcctabopt
a669 1
@@itemx -mips5
d671 19
a689 60
@@itemx -mips32r2
@@itemx -mips64
Generate code for a particular @@sc{mips} Instruction Set Architecture level.
@@samp{-mips1} is an alias for @@samp{-march=r3000}, @@samp{-mips2} is an
alias for @@samp{-march=r6000}, @@samp{-mips3} is an alias for
@@samp{-march=r4000} and @@samp{-mips4} is an alias for @@samp{-march=r8000}.
@@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2}, and @@samp{-mips64}
correspond to generic
@@samp{MIPS V}, @@samp{MIPS32}, @@samp{MIPS32 Release 2}, and
@@samp{MIPS64} ISA processors,
respectively.

@@item -march=@@var{CPU}
Generate code for a particular @@sc{mips} cpu.

@@item -mtune=@@var{cpu}
Schedule and tune for a particular @@sc{mips} cpu.

@@item -mfix7000
@@itemx -mno-fix7000
Cause nops to be inserted if the read of the destination register
of an mfhi or mflo instruction occurs in the following two instructions.

@@item -mdebug
@@itemx -no-mdebug
Cause stabs-style debugging output to go into an ECOFF-style .mdebug
section instead of the standard ELF .stabs sections.

@@item -mgp32
@@itemx -mfp32
The register sizes are normally inferred from the ISA and ABI, but these
flags force a certain group of registers to be treated as 32 bits wide at
all times.  @@samp{-mgp32} controls the size of general-purpose registers
and @@samp{-mfp32} controls the size of floating-point registers.

@@item -mips16
@@itemx -no-mips16
Generate code for the MIPS 16 processor.  This is equivalent to putting
@@code{.set mips16} at the start of the assembly file.  @@samp{-no-mips16}
turns off this option.

@@item -mips3d
@@itemx -no-mips3d
Generate code for the MIPS-3D Application Specific Extension.
This tells the assembler to accept MIPS-3D instructions.
@@samp{-no-mips3d} turns off this option.

@@item -mdmx
@@itemx -no-mdmx
Generate code for the MDMX Application Specific Extension.
This tells the assembler to accept MDMX instructions.
@@samp{-no-mdmx} turns off this option.

@@item --construct-floats
@@itemx --no-construct-floats
The @@samp{--no-construct-floats} option disables the construction of
double width floating point constants by loading the two halves of the
value into the two single width floating point registers that make up
the double width register.  By default @@samp{--construct-floats} is
selected, allowing construction of these floating point constants.
d693 1
a693 1
This option causes @@command{@@value{AS}} to emulate @@command{@@value{AS}} configured
d706 1
a706 1
@@command{@@value{AS}} is configured for is a @@sc{mips} ELF or ECOFF target.
d717 1
a717 1
@@command{@@value{AS}} ignores this option.  It is accepted for compatibility with
d720 1
a729 4

@@item -n
When this option is used, @@command{@@value{AS}} will issue a warning every
time it generates a nop instruction from a macro.
d737 1
a737 1
@@table @@gcctabopt
a763 45
@@ifset MMIX
See the info pages for documentation of the MMIX-specific options.
@@end ifset

@@ifset XTENSA
The following options are available when @@value{AS} is configured for
an Xtensa processor.

@@table @@gcctabopt
@@item --density | --no-density
Enable or disable use of instructions from the Xtensa code density
option.  This is enabled by default when the Xtensa processor supports
the code density option.

@@item --relax | --no-relax
Enable or disable instruction relaxation.  This is enabled by default.
Note: In the current implementation, these options also control whether
assembler optimizations are performed, making these options equivalent
to @@option{--generics} and @@option{--no-generics}.

@@item --generics | --no-generics
Enable or disable all assembler transformations of Xtensa instructions.
The default is @@option{--generics};
@@option{--no-generics} should be used only in the rare cases when the
instructions must be exactly as specified in the assembly source.

@@item --text-section-literals | --no-text-section-literals
With @@option{--text-@@-section-@@-literals}, literal pools are interspersed
in the text section.  The default is
@@option{--no-@@-text-@@-section-@@-literals}, which places literals in a
separate section in the output file.

@@item --target-align | --no-target-align
Enable or disable automatic alignment to reduce branch penalties at the
expense of some code density.  The default is @@option{--target-@@-align}.

@@item --longcalls | --no-longcalls
Enable or disable transformation of call instructions to allow calls
across a greater range of addresses.  The default is
@@option{--no-@@-longcalls}.
@@end table
@@end ifset

@@c man end

d779 1
a779 1
@@sc{gnu} @@command{@@value{AS}}.  We cover the syntax expected in source files, including
d781 1
a781 1
@@command{@@value{AS}} understands; and of course how to invoke @@command{@@value{AS}}.
d785 1
a785 1
configuration of @@command{@@value{AS}}, including assembler directives.
d806 2
a807 2
Series Programming Manual}.  For the H8/300H, see @@cite{H8/300H Series
Programming Manual} (Renesas).
d811 1
a811 1
Series Programming Manual} (Renesas M21T001).
d814 2
a815 4
For information on the Renesas (formerly Hitachi) / SuperH SH machine instruction set,
see @@cite{SH-Microcomputer User's Manual} (Renesas) or
@@cite{SH-4 32-bit CPU Core Architecture} (SuperH) and
@@cite{SuperH (SH) 64-Bit RISC Series} (SuperH).
d831 1
a831 1
@@command{@@value{AS}} is part of a team of programs that turn a high-level
d834 1
a834 1
@@command{@@value{AS}} are used for different kinds of computer.
d849 1
a849 3
@@c man begin DESCRIPTION

@@sc{gnu} @@command{as} is really a family of assemblers.
d851 1
a851 1
This manual describes @@command{@@value{AS}}, a member of that family which is
d861 1
a861 1
@@command{@@value{AS}} is primarily intended to assemble the output of the
d863 1
a863 1
@@code{@@value{LD}}.  Nevertheless, we've tried to make @@command{@@value{AS}}
d872 1
a872 1
This doesn't mean @@command{@@value{AS}} always uses the same syntax as another
d877 1
a877 3
@@c man end

Unlike older assemblers, @@command{@@value{AS}} is designed to assemble a source
d892 1
a892 1
For the @@value{TARGET} target, @@command{@@value{AS}} is configured to produce
d897 1
a897 1
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
d901 1
a901 1
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
d905 1
a905 1
On the @@value{TARGET}, @@command{@@value{AS}} can be configured to produce either
d914 1
a914 2

After the program name @@command{@@value{AS}}, the command line may contain
d922 1
a922 1
explicitly, as one of the files for @@command{@@value{AS}} to assemble.
d927 1
a927 1
@@command{@@value{AS}}.  No option changes the way another option works.  An
d948 1
a948 1
describe the program input to one run of @@command{@@value{AS}}.  The program may
d957 1
a957 2
@@c man begin DESCRIPTION
Each time you run @@command{@@value{AS}} it assembles exactly one source
d961 1
a961 1
You give @@command{@@value{AS}} a command line that has zero or more input file
d966 3
a968 3
If you give @@command{@@value{AS}} no file names it attempts to read one input file
from the @@command{@@value{AS}} standard input, which is normally your terminal.  You
may have to type @@key{ctl-D} to tell @@command{@@value{AS}} there is no more program
d974 1
a974 1
If the source is empty, @@command{@@value{AS}} produces a small, empty object
a976 2
@@c man end

d987 1
a987 1
to @@command{@@value{AS}}.
d991 2
a992 2
error messages reflect the original source file, when @@command{@@value{AS}} source
is itself synthesized from other files.  @@command{@@value{AS}} understands the
d1003 1
a1003 1
Every time you run @@command{@@value{AS}} it produces an output file, which is
d1013 1
a1013 1
@@code{b.out} when @@command{@@value{AS}} is configured for the Intel 80960.
d1015 1
a1015 1
You can give it another name by using the @@option{-o} option.  Conventionally,
a1033 2
@@c man begin DESCRIPTION

d1037 1
a1037 1
@@command{@@value{AS}} may write warnings and error messages to the standard error
d1039 2
a1040 2
runs @@command{@@value{AS}} automatically.  Warnings report an assumption made so
that @@command{@@value{AS}} could keep assembling a flawed program; errors report a
a1042 2
@@c man end

d1087 1
a1087 1
to the @@value{TARGET} target.
d1093 1
a1093 3
@@c man begin DESCRIPTION

If you are invoking @@command{@@value{AS}} via the @@sc{gnu} C compiler,
d1104 1
a1104 1
standard output with high-level and assembly source) and @@samp{-L} (retain
a1112 2
@@c man end

a1125 1
* listing::       --listing-XXX to configure listing output
d1138 1
a1138 1
@@section Enable Listings: @@option{-a[cdhlns]}
a1178 7
Note if the assembler source is coming from the standard input (eg because it
is being created by @@code{@@value{GCC}} and the @@samp{-pipe} command line switch
is being used) then the listing will not contain any comments or preprocessor
directives.  This is because the listing code buffers input source lines from
stdin only after they have been preprocessed by the assembler.  This reduces
memory usage and makes the code more efficient.

d1180 1
a1180 1
@@section @@option{-D}
d1185 1
a1185 1
@@command{@@value{AS}}.
d1188 1
a1188 1
@@section Work Faster: @@option{-f}
d1192 1
a1192 1
@@cindex faster processing (@@option{-f})
d1201 1
a1201 1
preprocessed (if they contain comments, for example), @@command{@@value{AS}} does
d1206 1
a1206 1
@@section @@code{.include} Search Path: @@option{-I} @@var{path}
d1213 2
a1214 2
@@command{@@value{AS}} searches for files specified in @@code{.include}
directives (@@pxref{Include,,@@code{.include}}).  You may use @@option{-I} as
d1216 1
a1216 1
working directory is always searched first; after that, @@command{@@value{AS}}
d1221 1
a1221 1
@@section Difference Tables: @@option{-K}
d1236 1
a1236 1
@@command{@@value{AS}} sometimes alters the code emitted for directives of the form
d1243 1
a1243 1
@@section Include Local Labels: @@option{-L}
d1251 1
a1251 1
Normally both @@command{@@value{AS}} and @@code{@@value{LD}} discard such labels, so you do not
d1254 1
a1254 1
This option tells @@command{@@value{AS}} to retain those @@samp{L@@dots{}} symbols
a1263 39
@@node listing
@@section Configuring listing output: @@option{--listing}

The listing feature of the assembler can be enabled via the command line switch
@@samp{-a} (@@pxref{a}).  This feature combines the input source file(s) with a
hex dump of the corresponding locations in the output object file, and displays
them as a listing file.  The format of this listing can be controlled by pseudo
ops inside the assembler source (@@pxref{List} @@pxref{Title} @@pxref{Sbttl}
@@pxref{Psize} @@pxref{Eject}) and also by the following switches:

@@table @@gcctabopt
@@item --listing-lhs-width=@@samp{number}
@@kindex --listing-lhs-width
@@cindex Width of first line disassembly output
Sets the maximum width, in words, of the first line of the hex byte dump.  This
dump appears on the left hand side of the listing output.

@@item --listing-lhs-width2=@@samp{number}
@@kindex --listing-lhs-width2
@@cindex Width of continuation lines of disassembly output
Sets the maximum width, in words, of any further lines of the hex byte dump for
a given input source line.  If this value is not specified, it defaults to being
the same as the value specified for @@samp{--listing-lhs-width}.  If neither
switch is used the default is to one.

@@item --listing-rhs-width=@@samp{number}
@@kindex --listing-rhs-width
@@cindex Width of source line output
Sets the maximum width, in characters, of the source line that is displayed
alongside the hex dump.  The default value for this parameter is 100.  The
source line is displayed on the right hand side of the listing output.

@@item --listing-cont-lines=@@samp{number}
@@kindex --listing-cont-lines
@@cindex Maximum number of continuation lines
Sets the maximum number of continuation lines of hex dump that will be
displayed for a given single line of source input.  The default value is 4.
@@end table

d1265 1
a1265 1
@@section Assemble in MRI Compatibility Mode: @@option{-M}
d1269 2
a1270 2
The @@option{-M} or @@option{--mri} option selects MRI compatibility mode.  This
changes the syntax and pseudo-op handling of @@command{@@value{AS}} to make it
d1276 1
a1276 1
assembling existing MRI assembler code using @@command{@@value{AS}}.
d1287 1
a1287 1
Other object file formats do not support this.  @@command{@@value{AS}} handles
d1302 1
a1302 1
instead be specified using the @@option{-e} option to the linker, or in a linker
d1313 1
a1313 1
address.  This differs from the usual @@command{@@value{AS}} @@code{.org} pseudo-op,
d1320 1
a1320 1
@@command{@@value{AS}}, typically either because they are difficult or because they
d1345 1
a1345 1
@@code{BRL}, and @@code{BRW}---are ignored.  @@command{@@value{AS}} automatically
d1396 1
a1396 1
@@section Dependency Tracking: @@option{--MD}
d1402 1
a1402 1
@@command{@@value{AS}} can generate a dependency file for the file it creates.  This
d1411 1
a1411 1
@@section Name the Object File: @@option{-o}
d1416 1
a1416 1
There is always one object file output when you run @@command{@@value{AS}}.  By
d1437 1
a1437 1
Whatever the object file is called, @@command{@@value{AS}} overwrites any
d1441 1
a1441 1
@@section Join Data and Text Sections: @@option{-R}
d1448 1
a1448 1
@@option{-R} tells @@command{@@value{AS}} to write the object file as if all
d1455 1
a1455 1
When you specify @@option{-R} it would be possible to generate shorter
d1458 1
a1458 1
older versions of @@command{@@value{AS}}.  In future, @@option{-R} may work this way.
d1460 2
a1461 2
@@ifset COFF-ELF
When @@command{@@value{AS}} is configured for COFF or ELF output,
d1467 2
a1468 2
@@option{-R} is not supported for any of the HPPA targets.  Using
@@option{-R} generates a warning from @@command{@@value{AS}}.
d1472 1
a1472 1
@@section Display Assembly Statistics: @@option{--statistics}
d1479 1
a1479 1
@@command{@@value{AS}}: the maximum amount of space allocated during the assembly
d1484 1
a1484 1
@@section Compatible Output: @@option{--traditional-format}
d1487 1
a1487 1
For some targets, the output of @@command{@@value{AS}} is different in some ways
d1489 1
a1489 1
@@command{@@value{AS}} to use the traditional format instead.
d1492 1
a1492 1
@@command{@@value{AS}} normally does by default on @@code{@@value{GCC}} output.
d1495 1
a1495 1
@@section Announce Version: @@option{-v}
d1506 1
a1506 1
@@section Control Warnings: @@option{-W}, @@option{--warn}, @@option{--no-warn}, @@option{--fatal-warnings}
d1508 1
a1508 1
@@command{@@value{AS}} should never give a warning or error message when
d1510 1
a1510 1
cause @@command{@@value{AS}} to give a warning that a particular assumption was
d1513 2
a1514 2
@@kindex -W
@@kindex --no-warn
d1517 1
a1517 1
If you use the @@option{-W} and @@option{--no-warn} options, no warnings are issued.
d1519 1
a1519 1
how @@command{@@value{AS}} assembles your file.  Errors, which stop the assembly,
d1522 1
a1522 1
@@kindex --fatal-warnings
d1525 1
a1525 1
If you use the @@option{--fatal-warnings} option, @@command{@@value{AS}} considers
d1528 1
a1528 1
@@kindex --warn
d1530 1
a1530 1
You can switch these options off again by specifying @@option{--warn}, which
d1534 1
a1534 1
@@section Generate Object File in Spite of Errors: @@option{-Z}
d1537 1
a1537 1
After an error message, @@command{@@value{AS}} normally produces no output.  If for
d1539 2
a1540 2
@@command{@@value{AS}} gives an error message on your program, use the @@samp{-Z}
option.  If there are any errors, @@command{@@value{AS}} continues anyways, and
d1550 1
a1550 1
source file.  @@command{@@value{AS}} syntax is similar to what many other
d1556 1
a1556 1
assembler, except that @@command{@@value{AS}} does not assemble Vax bit-fields.
d1572 1
a1572 1
The @@command{@@value{AS}} internal preprocessor:
d1594 1
a1594 1
to get other ``CPP'' style preprocessing by giving the input file a
d1629 1
a1629 1
There are two ways of rendering comments to @@command{@@value{AS}}.  In both
a1670 3
@@ifset PDP11
@@samp{;} for the PDP-11;
@@end ifset
a1673 3
@@ifset PPC
@@samp{;} for Motorola PowerPC;
@@end ifset
d1675 1
a1675 1
@@samp{!} for the Renesas / SuperH SH;
a1679 3
@@ifset IP2K
@@samp{#} on the ip2k;
@@end ifset
a1688 3
@@ifset M880X0
@@samp{;} on the M880x0;
@@end ifset
a1697 3
@@ifset XTENSA
@@samp{#} for Xtensa systems;
@@end ifset
d1699 1
a1699 1
@@c FIXME What about i860?
d1732 1
a1732 1
of @@command{@@value{AS}}.
d1793 1
a1793 1
Renesas-SH or the
d1830 1
a1830 1
Different versions of @@command{@@value{AS}} for different computers
d1901 2
a1902 2
@@command{@@value{AS}} to interpret the second character literally as a backslash
(which prevents @@command{@@value{AS}} from recognizing the second @@code{\} as an
d1985 2
a1986 2
interpretation of the following character.  However @@command{@@value{AS}} has no
other interpretation, so @@command{@@value{AS}} knows it is giving you the wrong
d2018 2
a2019 1
Renesas SH or H8/500)
d2026 1
a2026 1
that character.  @@command{@@value{AS}} assumes your character code is ASCII:
d2034 1
a2034 1
@@command{@@value{AS}} distinguishes three kinds of numbers according to how they
d2099 1
a2099 1
@@command{@@value{AS}} to a generic binary floating point number of more than
d2102 1
a2102 1
portion of @@command{@@value{AS}} specialized to that computer.
d2113 1
a2113 1
A letter, to tell @@command{@@value{AS}} the rest of the number is a flonum.
d2123 1
a2123 1
Renesas / SuperH SH,
d2182 1
a2182 1
@@command{@@value{AS}} does all processing using integers.  Flonums are computed
d2184 1
a2184 1
@@command{@@value{AS}}.
d2202 1
a2202 1
@@command{@@value{AS}} applies a bitwise @@sc{and} between @@var{mask} and
d2244 1
a2244 1
combines their contents to form a runnable program.  When @@command{@@value{AS}}
d2248 1
a2248 1
oversimplification, but it suffices to explain how @@command{@@value{AS}} uses
d2260 2
a2261 2
and for the Renesas / SuperH SH,
@@command{@@value{AS}} pads sections if needed to
d2266 1
a2266 1
An object file written by @@command{@@value{AS}} has at least three sections, any
d2270 1
a2270 1
@@ifset COFF-ELF
d2272 1
a2272 1
When it generates COFF or ELF output,
d2274 1
a2274 1
@@command{@@value{AS}} can also generate whatever other named sections you specify
d2282 1
a2282 1
When @@command{@@value{AS}} generates SOM or ELF output for the HPPA,
d2284 1
a2284 1
@@command{@@value{AS}} can also generate whatever other named sections you
d2291 1
a2291 1
Additionally, @@command{@@value{AS}} uses different names for the standard
d2308 1
a2308 1
relocated, and how to change that data, @@command{@@value{AS}} also writes to the
d2329 1
a2329 1
In fact, every address @@command{@@value{AS}} ever uses is expressed as
d2334 1
a2334 1
Further, most expressions @@command{@@value{AS}} computes have this section-relative
d2370 1
a2370 1
use of @@command{@@value{AS}} and have no meaning except during assembly.
d2378 1
a2378 1
@@ifset COFF-ELF
d2389 1
a2389 1
These sections hold your program.  @@command{@@value{AS}} and @@code{@@value{LD}} treat them as
d2391 2
a2392 2
true of another.
@@c @@ifset aout-bout
d2399 1
a2399 1
@@c @@end ifset
d2426 1
a2426 1
@@ifset COFF-ELF
d2432 1
a2432 1
@@ifnottex
d2453 1
a2453 1
@@end ifnottex
d2456 1
a2456 1
\bigskip
d2482 1
a2482 1
These sections are meant only for the internal use of @@command{@@value{AS}}.  They
d2484 1
a2484 1
sections for most purposes; but they can be mentioned in @@command{@@value{AS}}
d2486 1
a2486 1
meanings to @@command{@@value{AS}}.  These sections are used to permit the
d2514 1
a2514 1
@@ifset COFF-ELF
d2532 1
a2532 1
are not contiguous in the assembler source.  @@command{@@value{AS}} allows you to
d2548 1
a2548 1
of @@command{@@value{AS}}.)
d2554 1
a2554 1
The same is true on the Renesas SH.
d2580 1
a2580 1
@@ifset COFF-ELF
d2582 1
a2582 1
When generating COFF or ELF output, you
d2610 1
a2610 1
restricted to @@command{@@value{AS}} there is no concept of a subsection location
d2651 1
a2651 1
@@emph{Warning:} @@command{@@value{AS}} does not place symbols in the object file in
d2677 1
a2677 1
a single line.  To work around this, the HPPA version of @@command{@@value{AS}} also
d2711 4
a2714 3
Renesas SH or the H8/500, you can also use @@code{$} in symbol names.  That
character may be followed by any string of digits, letters, dollar signs (save
on the H8/300), and underscores.
d2732 20
a2751 39
They create symbols which are guaranteed to be unique over the entire scope of
the input source code and which can be referred to by a simple notation.
To define a local symbol, write a label of the form @@samp{@@b{N}:} (where @@b{N}
represents any positive integer).  To refer to the most recent previous
definition of that symbol write @@samp{@@b{N}b}, using the same number as when
you defined the label.  To refer to the next definition of a local label, write
@@samp{@@b{N}f}--- The @@samp{b} stands for``backwards'' and the @@samp{f} stands
for ``forwards''.

There is no restriction on how you can use these labels, and you can reuse them
too.  So that it is possible to repeatedly define the same local label (using
the same number @@samp{@@b{N}}), although you can only refer to the most recently
defined local label of that number (for a backwards reference) or the next
definition of a specific local label for a forward reference.  It is also worth
noting that the first 10 local labels (@@samp{@@b{0:}}@@dots{}@@samp{@@b{9:}}) are
implemented in a slightly more efficient manner than the others.

Here is an example:

@@smallexample
1:        branch 1f
2:        branch 1b
1:        branch 2f
2:        branch 1b
@@end smallexample

Which is the equivalent of:

@@smallexample
label_1:  branch label_3
label_2:  branch label_1
label_3:  branch label_4
label_4:  branch label_3
@@end smallexample

Local symbol names are only a notational device.  They are immediately
transformed into more conventional symbol names before the assembler uses them.
The symbol names stored in the symbol table, appearing in error messages and
optionally emitted to the object file.  The names are constructed using these
d2756 1
a2756 1
All local labels begin with @@samp{L}. Normally both @@command{@@value{AS}} and
d2759 1
a2759 1
@@samp{-L} option then @@command{@@value{AS}} retains these symbols in the
d2763 9
a2771 7
@@item @@var{number}
This is the number that was used in the local label definition.  So if the
label is written @@samp{55:} then the number is @@samp{55}. 

@@item @@kbd{C-B}
This unusual character is included so you do not accidentally invent a symbol
of the same name.  The character has ASCII value of @@samp{\002} (control-B).
d2774 4
a2777 4
This is a serial number to keep the labels distinct.  The first definition of
@@samp{0:} gets the number @@samp{1}.  The 15th definition of @@samp{0:} gets the 
number @@samp{15}, and so on.  Likewise the first definition of @@samp{1:} gets
the number @@samp{1} and its 15th defintion gets @@samp{15} as well.
d2780 2
a2781 21
So for example, the first @@code{1:} is named @@code{L1@@kbd{C-B}1}, the 44th
@@code{3:} is named @@code{L3@@kbd{C-B}44}.

@@subheading Dollar Local Labels
@@cindex dollar local symbols

@@code{@@value{AS}} also supports an even more local form of local labels called
dollar labels.  These labels go out of scope (ie they become undefined) as soon
as a non-local label is defined.  Thus they remain valid for only a small
region of the input source code.  Normal local labels, by contrast, remain in
scope for the entire file, or until they are redefined by another occurrence of
the same local label.

Dollar labels are defined in exactly the same way as ordinary local labels,
except that instead of being terminated by a colon, they are terminated by a
dollar sign.  eg @@samp{@@b{55$}}.

They can also be distinguished from ordinary local labels by their transformed
name which uses ASCII character @@samp{\001} (control-A) as the magic character
to distinguish them from ordinary labels.  Thus the 5th defintion of @@samp{6$}
is named @@samp{L6@@kbd{C-A}5}.
d2791 1
a2791 1
@@command{@@value{AS}} is assembling into.  Thus, the expression @@samp{melvin:
d2816 1
a2816 1
If you use a symbol without defining it, @@command{@@value{AS}} assumes zero for
d2888 1
a2888 1
These symbol attributes appear only when @@command{@@value{AS}} is configured for
d2922 1
a2922 1
@@command{@@value{AS}}.
d2928 1
a2928 1
This is an arbitrary 8-bit value.  It means nothing to @@command{@@value{AS}}.
d2951 1
a2951 1
The @@command{@@value{AS}} directives @@code{.dim}, @@code{.line}, @@code{.scl},
d2982 1
a2982 1
enough information when @@command{@@value{AS}} sees the expression to know its
d2985 1
a2985 1
@@command{@@value{AS}} aborts with an error message in this situation.
d2999 1
a2999 1
expression, and @@command{@@value{AS}} assumes a value of (absolute) 0.  This
d3039 1
a3039 1
that only the low order 32 bits are used, and @@command{@@value{AS}} pretends
d3064 1
a3064 1
@@command{@@value{AS}} has the following @@dfn{prefix operators}.  They each take
d3092 1
a3092 1
to right.  Apart from @@code{+} or @@option{-}, both arguments must be
a3276 1
* Incbin::                      @@code{.incbin "@@var{file}"[,@@var{skip}[,@@var{count}]]}
d3326 1
a3326 3
@@end ifset
@@ifset COFF-ELF
* Section::                     @@code{.section @@var{name}}
a3331 1
@@ifset COFF-ELF
a3332 2
@@end ifset

a3352 1
@@ifset COFF-ELF
a3353 2
@@end ifset

d3378 1
a3378 1
of the source quit, it could use this directive tells @@command{@@value{AS}} to
d3386 1
a3386 1
When producing COFF output, @@command{@@value{AS}} accepts this directive as a
d3390 1
a3390 1
When producing @@code{b.out} output, @@command{@@value{AS}} accepts this directive,
d3419 2
a3420 2
For the a29k, hppa, m68k, m88k, w65, sparc, Xtensa, and Renesas / SuperH SH,
and i386 using ELF format,
d3522 1
a3522 1
no alignment is specified, @@command{@@value{AS}} will set the alignment to the
d3536 1
a3536 1
@@code{.data} tells @@command{@@value{AS}} to assemble the following statements onto the
d3552 1
a3552 1
This directive is only observed when @@command{@@value{AS}} is configured for COFF
d3569 1
a3569 1
The @@samp{.desc} directive is not available when @@command{@@value{AS}} is
d3571 1
a3571 1
object format.  For the sake of compatibility, @@command{@@value{AS}} accepts
d3589 1
a3589 1
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
d3603 1
a3603 1
@@command{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
d3625 1
a3625 1
@@code{.else} is part of the @@command{@@value{AS}} support for conditional
d3634 1
a3634 1
@@code{.elseif} is part of the @@command{@@value{AS}} support for conditional
d3642 1
a3642 1
@@code{.end} marks the end of the assembly file.  @@command{@@value{AS}} does not
d3655 1
a3655 1
@@command{@@value{AS}} is configured to generate @@code{b.out}, it accepts this
d3669 1
a3669 1
@@code{.endif} is part of the @@command{@@value{AS}} support for conditional assembly;
d3691 1
a3691 3
the assembler will signal an error if @@var{symbol} is already defined.  Note a
symbol which has been referenced but not actually defined is considered to be
undefined.
d3704 2
a3705 2
If @@command{@@value{AS}} assembles a @@code{.err} directive, it will print an error
message and, unless the @@option{-Z} option was used, it will not generate an
d3717 1
a3717 1
with other assemblers---but it is ignored.  @@command{@@value{AS}} treats
d3725 2
a3726 2
or more, @@command{@@value{AS}} will print a warning message.  If the value is less
than 500, @@command{@@value{AS}} will print an error message.  The message will
d3737 1
a3737 1
@@code{.file} tells @@command{@@value{AS}} that we are about to start a new logical
d3742 1
a3742 1
old @@command{@@value{AS}} programs.
d3744 1
a3744 1
In some configurations of @@command{@@value{AS}}, @@code{.file} has already been
d3755 1
a3755 1
@@var{repeat}, @@var{size} and @@var{value} are absolute expressions.
d3762 1
a3762 1
byte-order of an integer on the computer @@command{@@value{AS}} is assembling for.
d3781 1
a3781 1
@@command{@@value{AS}} is configured.
d3827 2
a3828 2
@@cindex @@code{hidden} directive
@@cindex visibility
d3867 1
a3867 1
@@command{@@value{AS}} simply accepts the directive for source-file
d3890 1
a3890 2
has been defined.  Note a symbol which has been referenced but not yet defined
is considered to be undefined.
d3936 1
a3936 2
has not been defined.  Both spelling variants are equivalent.  Note a symbol
which has been referenced but not yet defined is considered to be undefined.
a3948 16
@@node Incbin
@@section @@code{.incbin "@@var{file}"[,@@var{skip}[,@@var{count}]]}

@@cindex @@code{incbin} directive
@@cindex binary files, including
The @@code{incbin} directive includes @@var{file} verbatim at the current
location. You can control the search paths used with the @@samp{-I} command-line
option (@@pxref{Invoking,,Command-Line Options}).  Quotation marks are required
around @@var{file}.

The @@var{skip} argument skips a number of bytes from the start of the
@@var{file}.  The @@var{count} argument indicates the maximum number of bytes to
read.  Note that the data is not aligned in any way, so it is the user's
responsibility to make sure that proper alignment is provided both before and
after the @@code{incbin} directive.

d3976 1
a3976 1
integers.  On the H8/300H and the Renesas SH, however, @@code{.int} emits
d3985 2
a3986 2
@@cindex @@code{internal} directive
@@cindex visibility
d3994 1
a3994 1
(i.e., not visible to other components), and that some extra, processor specific
d4081 1
a4081 1
@@command{@@value{AS}} accepts this directive, for compatibility with other
d4102 1
a4102 1
@@command{@@value{AS}} will no longer support this directive: it is recognized only
d4115 1
a4115 1
@@code{b.out} object-code formats, @@command{@@value{AS}} still recognizes it
d4170 1
a4170 1
Tell @@command{@@value{AS}} to change the logical line number.  @@var{line-number}
d4177 1
a4177 1
This directive is accepted, but ignored, when @@command{@@value{AS}} is
d4188 2
a4189 2
If @@var{val} is non-zero, this tells @@command{@@value{AS}} to enter MRI mode.  If
@@var{val} is zero, this tells @@command{@@value{AS}} to exit MRI mode.  This change
d4310 1
a4310 1
@@command{@@value{AS}} maintains a counter of how many macros it has
d4365 1
a4365 1
@@command{@@value{AS}} issues a warning, then pretends the section of @@var{new-lc}
d4375 1
a4375 1
Because @@command{@@value{AS}} tries to assemble programs in one pass, @@var{new-lc}
d4429 1
a4429 1
@@cindex @@code{previous} directive
d4449 1
a4449 1
@@cindex @@code{popsection} directive
d4465 1
a4465 1
@@command{@@value{AS}} will print @@var{string} on the standard output during
d4472 2
a4473 2
@@cindex @@code{protected} directive
@@cindex visibility
d4498 1
a4498 1
@@command{@@value{AS}} generates formfeeds whenever the specified number of
d4516 1
a4516 1
@@cindex @@code{pushsection} directive
d4599 1
a4599 1
configured to generate @@code{b.out} output format, @@command{@@value{AS}}
a4603 1
@@ifset COFF-ELF
d4605 1
a4605 1
@@section @@code{.section @@var{name}}
d4607 1
a4615 7
@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset

@@cindex @@code{section} directive (COFF version)
a4640 2
@@item a
ignored.  (For compatibility with the ELF version)
d4645 1
a4645 3
loaded and writable.  Note the @@code{n} and @@code{w} flags remove attributes
from the section, rather than adding them, so if they are used on their own it
will be as if no flags had been specified at all.
a4648 1
@@end ifset
d4650 5
a4655 5
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset

d4661 1
a4662 1
@@cindex @@code{section} directive (ELF version)
d4666 1
a4666 1
.section @@var{name} [, "@@var{flags}"[, @@@@@@var{type}[, @@@@@@var{entsize}]]]
a4677 4
@@item M
section is mergeable
@@item S
section contains zero terminated strings
a4687 11
Note on targets where the @@code{@@@@} character is the start of a comment (eg
ARM) then another character is used instead.  For example the ARM port uses the
@@code{%} character.

If @@var{flags} contains @@code{M} flag, @@var{type} argument must be specified
as well as @@var{entsize} argument. Sections with @@code{M} flag but not
@@code{S} flag must contain fixed size constants, each @@var{entsize} octets
long. Sections with both @@code{M} and @@code{S} must contain zero terminated
strings where each character is @@var{entsize} bytes long. The linker may remove
duplicates within sections with the same name, same entity size and same flags. 

a4714 2
@@end ifset
@@end ifset
d4766 1
a4766 1
@@command{@@value{AS}} is configured.  @@xref{Machine Dependencies}.
a4774 1
@@ifset COFF-ELF
d4776 1
a4776 1
@@section @@code{.size}
d4778 4
a4781 15
This directive is used to set the size associated with a symbol.

@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset

@@cindex @@code{size} directive (COFF version)
For COFF targets, the @@code{.size} directive is only permitted inside
@@code{.def}/@@code{.endef} pairs.  It is used like this:

@@smallexample
.size @@var{expression}
@@end smallexample
d4785 1
a4785 1
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
a4787 7
@@end ifset

@@ifset ELF
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset
d4789 2
a4790 6
@@cindex @@code{size} directive (ELF version)
For ELF targets, the @@code{.size} directive is used like this:

@@smallexample
.size @@var{name} , @@var{expression}
@@end smallexample
d4792 1
a4792 1
This directive sets the size associated with a symbol @@var{name}.
a4795 2
@@end ifset
@@end ifset
d4860 1
a4860 1
The symbols are not entered in the @@command{@@value{AS}} hash table: they
d4953 1
a4953 1
@@cindex @@code{subsection} directive
d5035 1
a5035 1
@@command{@@value{AS}} is generating @@code{b.out}, it accepts this directive but
d5044 1
a5044 1
Tells @@command{@@value{AS}} to assemble the following statements onto the end of
a5059 1
@@ifset COFF-ELF
d5061 1
a5061 9
@@section @@code{.type}

This directive is used to set the type of a symbol.

@@ifset COFF
@@ifset ELF
@@c only print the extra heading if both COFF and ELF are set
@@subheading COFF Version
@@end ifset
d5065 3
a5067 10
@@cindex @@code{type} directive (COFF version)
For COFF targets, this directive is permitted only within
@@code{.def}/@@code{.endef} pairs.  It is used like this:

@@smallexample
.type @@var{int}
@@end smallexample

This records the integer @@var{int} as the type attribute of a symbol table
entry.
d5071 1
a5071 1
@@command{@@value{AS}} is configured for @@code{b.out} output, it accepts this
a5073 1
@@end ifset
d5075 1
a5075 5
@@ifset ELF
@@ifset COFF
@@c only print the extra heading if both COFF and ELF are set
@@subheading ELF Version
@@end ifset
d5079 2
a5080 8
@@cindex @@code{type} directive (ELF version)
For ELF targets, the @@code{.type} directive is used like this:

@@smallexample
.type @@var{name} , @@var{type description}
@@end smallexample

This sets the type of symbol @@var{name} to be either a
a5100 2
@@end ifset
@@end ifset
d5122 1
a5122 1
@@samp{.val} is used only for COFF output; when @@command{@@value{AS}} is
d5131 1
a5131 1
@@cindex @@code{version} directive
d5140 1
a5140 1
@@cindex @@code{vtable_entry}
d5147 1
a5147 1
@@cindex @@code{vtable_inherit}
d5158 1
a5158 1
@@cindex @@code{weak} directive
d5171 1
a5171 1
For each expression, @@command{@@value{AS}} emits a 32-bit number.
d5174 1
a5174 1
For each expression, @@command{@@value{AS}} emits a 16-bit number.
d5200 1
a5200 1
@@command{@@value{AS}} occasionally does strange things to @@samp{.word} directives.
d5202 1
a5202 1
compilers as part of jump tables.  Therefore, when @@command{@@value{AS}} assembles a
d5204 1
a5204 1
@@code{sym1} and @@code{sym2} does not fit in 16 bits, @@command{@@value{AS}}
d5222 1
a5222 1
@@emph{This feature may be disabled by compiling @@command{@@value{AS}} with the
d5247 2
a5248 2
each machine where @@command{@@value{AS}} runs.  Floating point representations
vary as well, and @@command{@@value{AS}} often supports a few additional
d5251 1
a5251 1
@@command{@@value{AS}} support special pseudo-instructions for branch
a5261 3
@@ifset ALPHA
* Alpha-Dependent::		Alpha Dependent Features
@@end ifset
a5267 3
@@ifset CRIS
* CRIS-Dependent::              CRIS Dependent Features
@@end ifset
d5275 1
a5275 1
* H8/300-Dependent::            Renesas H8/300 Dependent Features
d5278 1
a5278 1
* H8/500-Dependent::            Renesas H8/500 Dependent Features
a5294 3
@@ifset IP2K
* IP2K-Dependent::              IP2K Dependent Features
@@end ifset
a5303 3
@@ifset M880X0
* M88K-Dependent::		M880x0 Dependent Features
@@end ifset
a5306 6
@@ifset MMIX
* MMIX-Dependent::              MMIX Dependent Features
@@end ifset
@@ifset MSP430
* MSP430-Dependent::		MSP430 Dependent Features
@@end ifset
d5308 1
a5308 5
* SH-Dependent::                Renesas / SuperH SH Dependent Features
* SH64-Dependent::              SuperH SH64 Dependent Features
@@end ifset
@@ifset PDP11
* PDP-11-Dependent::            PDP-11 Dependent Features
a5312 3
@@ifset PPC
* PPC-Dependent::               PowerPC Dependent Features
@@end ifset
a5321 3
@@ifset XTENSA
* Xtensa-Dependent::            Xtensa Dependent Features
@@end ifset
d5341 4
a5348 8
@@ifset ALPHA
@@include c-alpha.texi
@@end ifset

@@ifset ARC
@@include c-arc.texi
@@end ifset

d5353 1
a5353 5
@@ifset CRIS
@@include c-cris.texi
@@end ifset

@@ifset Renesas-all
d5358 1
a5358 1
The machine instruction sets are different on each Renesas chip family,
d5360 1
a5360 1
chapter describes the specific @@command{@@value{AS}} features for each
d5364 3
a5366 3
* H8/300-Dependent::            Renesas H8/300 Dependent Features
* H8/500-Dependent::            Renesas H8/500 Dependent Features
* SH-Dependent::                Renesas SH Dependent Features
a5407 8
@@ifset IA64
@@include c-ia64.texi
@@end ifset

@@ifset IP2K
@@include c-ip2k.texi
@@end ifset

a5419 4
@@ifset M880X0
@@include c-m88k.texi
@@end ifset

a5423 8
@@ifset MMIX
@@include c-mmix.texi
@@end ifset

@@ifset MSP430
@@include c-msp430.texi
@@end ifset

a5427 4
@@ifset PDP11
@@include c-pdp11.texi
@@end ifset

a5431 4
@@ifset PPC
@@include c-ppc.texi
@@end ifset

a5433 1
@@include c-sh64.texi
a5455 4
@@ifset XTENSA
@@include c-xtensa.texi
@@end ifset

d5466 1
a5466 1
Your bug reports play an essential role in making @@command{@@value{AS}} reliable.
d5470 2
a5471 2
entire community by making the next version of @@command{@@value{AS}} work better.
Bug reports are your contribution to the maintenance of @@command{@@value{AS}}.
d5482 1
a5482 1
@@section Have You Found a Bug?
d5493 1
a5493 1
@@command{@@value{AS}} bug.  Reliable assemblers never crash.
d5497 1
a5497 1
If @@command{@@value{AS}} produces an error message for valid input, that is a bug.
d5501 1
a5501 1
If @@command{@@value{AS}} does not produce an error message for invalid input, that
d5507 1
a5507 1
of @@command{@@value{AS}} are welcome in any case.
d5511 1
a5511 1
@@section How to Report Bugs
d5516 1
a5516 1
you obtained @@command{@@value{AS}} from a support organization, we recommend you
d5523 1
a5523 1
In any event, we also recommend that you send bug reports for @@command{@@value{AS}}
d5545 3
a5547 3
bell?''  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.
You might as well expedite matters by sending them to begin with.
d5553 1
a5553 1
The version of @@command{@@value{AS}}.  @@command{@@value{AS}} announces it if you start
d5557 1
a5557 1
the bug in the current version of @@command{@@value{AS}}.
d5560 1
a5560 1
Any patches you may have applied to the @@command{@@value{AS}} source.
d5567 1
a5567 1
What compiler (and its version) was used to compile @@command{@@value{AS}}---e.g.
d5585 1
a5585 1
@@command{@@value{AS}} is being run.
d5591 1
a5591 1
Of course, if the bug is that @@command{@@value{AS}} gets a fatal signal, then we
d5598 1
a5598 1
@@command{@@value{AS}} is out of synch, or you have encountered a bug in the C
d5606 1
a5606 1
If you wish to suggest changes to the @@command{@@value{AS}} source, send us context
d5609 1
a5609 1
discuss something in the @@command{@@value{AS}} source, refer to it by context, not
d5647 1
a5647 1
Sometimes with a program as complicated as @@command{@@value{AS}} it is very hard to
d5666 1
a5666 1
If you have contributed to @@command{@@value{AS}} and your name isn't listed here,
d5708 1
a5708 1
Support for the Zilog Z8k and Renesas H8/300 and H8/500 processors (tc-z8k,
d5717 1
a5717 1
fixed-size instructions (e.g., @@code{jsr}), while synthetic instructions
d5727 1
a5727 1
Steve Chamberlain made @@command{@@value{AS}} able to generate listings.
d5742 1
a5742 1
Linas Vepstas added GAS support for the ESA/390 ``IBM 370'' architecture.
a5749 3
David Heine, Sterling Augustine, Bob Wilson and John Ruttenberg from Tensilica,
Inc. added support for Xtensa processors.

d5758 362
a6119 1
@@include fdl.texi
@


1.1.1.9
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d3 1
a3 1
@@c  2001, 2002, 2003, 2004
a21 2
@@c man begin NAME
@@c ---
d25 39
a64 1
@@c ---
d266 2
a267 2
 [@@b{-f}] [@@b{--gstabs}] [@@b{--gstabs+}] [@@b{--gdwarf2}] [@@b{--help}]
 [@@b{-I} @@var{dir}] [@@b{-J}] [@@b{-K}] [@@b{-L}]
d300 1
a300 2
   [@@b{-mfpu}=@@var{floating-point-format}]
   [@@b{-mfloat-abi}=@@var{abi}]
d335 1
a335 1
   [@@b{--32}|@@b{--64}] [@@b{-n}]
d388 1
a388 1
   [@@b{-nocpp}] [@@b{-EL}] [@@b{-EB}] [@@b{-O}[@@var{optimization level}]]
d394 1
a394 1
   [@@b{-mips64}] [@@b{-mips64r2}]
a401 1
   [@@b{-mpdr}] [@@b{-mno-pdr}]
a515 7
@@item --gstabs+
Generate stabs debugging information for each assembler line, with GNU
extensions that probably only gdb can handle, and that could make other
debuggers crash or refuse to read your program.  This
may help debugging assembler code.  Currently the only GNU extension is
the location of the current working directory at assembling time.

a629 2
@@item -mfloat-abi=@@var{abi}
Select which floating point ABI is in use.
a928 1
@@itemx -mips64r2
d933 1
a933 2
@@samp{-mips5}, @@samp{-mips32}, @@samp{-mips32r2}, @@samp{-mips64}, and
@@samp{-mips64r2}
d935 3
a937 3
@@samp{MIPS V}, @@samp{MIPS32}, @@samp{MIPS32 Release 2}, @@samp{MIPS64},
and @@samp{MIPS64 Release 2}
ISA processors, respectively.
a954 4
@@item -mpdr
@@itemx -mno-pdr
Control generation of @@code{.pdr} sections.

d2088 1
a2088 1
@@samp{#} for Motorola PowerPC;
a3692 3

* CFI directives::		@@code{.cfi_startproc}, @@code{.cfi_endproc}, etc.

d3887 3
a3889 2
For the a29k, arc, hppa, i386 using ELF, i860, iq2000, m68k, m88k, or32,
s390, sparc, tic4x, tic80 and xtensa, the first expression is the
d3892 1
a3892 2
is already a multiple of 8, no change is needed.  For the tic54x, the
first expression is the alignment request in words.
a3999 53
@@node CFI directives
@@section @@code{.cfi_startproc}
@@cindex @@code{cfi_startproc} directive
@@code{.cfi_startproc} is used at the beginning of each function that
should have an entry in @@code{.eh_frame}. It initializes some internal
data structures and emits architecture dependent initial CFI instructions.
Don't forget to close the function by 
@@code{.cfi_endproc}.

@@section @@code{.cfi_endproc}
@@cindex @@code{cfi_endproc} directive
@@code{.cfi_endproc} is used at the end of a function where it closes its
unwind entry previously opened by
@@code{.cfi_startproc}. and emits it to @@code{.eh_frame}.

@@section @@code{.cfi_def_cfa @@var{register}, @@var{offset}}
@@code{.cfi_def_cfa} defines a rule for computing CFA as: @@i{take 
address from @@var{register} and add @@var{offset} to it}.

@@section @@code{.cfi_def_cfa_register @@var{register}}
@@code{.cfi_def_cfa_register} modifies a rule for computing CFA. From
now on @@var{register} will be used instead of the old one. Offset
remains the same.

@@section @@code{.cfi_def_cfa_offset @@var{offset}}
@@code{.cfi_def_cfa_offset} modifies a rule for computing CFA. Register
remains the same, but @@var{offset} is new. Note that it is the
absolute offset that will be added to a defined register to compute
CFA address.

@@section @@code{.cfi_adjust_cfa_offset @@var{offset}}
Same as @@code{.cfi_def_cfa_offset} but @@var{offset} is a relative
value that is added/substracted from the previous offset.

@@section @@code{.cfi_offset @@var{register}, @@var{offset}}
Previous value of @@var{register} is saved at offset @@var{offset} from
CFA. 

@@section @@code{.cfi_rel_offset @@var{register}, @@var{offset}}
Previous value of @@var{register} is saved at offset @@var{offset} from
the current CFA register.  This is transformed to @@code{.cfi_offset}
using the known displacement of the CFA register from the CFA.
This is often easier to use, because the number will match the
code it's annotating.

@@section @@code{.cfi_window_save}
SPARC register window has been saved.

@@section @@code{.cfi_escape} @@var{expression}[, @@dots{}]
Allows the user to add arbitrary bytes to the unwind info.  One
might use this to add OS-specific CFI opcodes, or generic CFI
opcodes that GAS does not yet support.

d4266 1
a4266 1
Only @@samp{--gstabs[+]} is currently supported.
@


