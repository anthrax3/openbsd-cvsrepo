head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.50
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.52
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.48
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.44
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.46
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.38
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.42
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.40
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.36
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.34
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.32
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.30
	OPENBSD_5_0:1.5.0.28
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.26
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.24
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.20
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.22
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	BINUTILS-2_10:1.1.1.2
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.11.02.20.45.32;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.17.21.54.32;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.13.17.07.37;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.12.19.11.56;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.06.26;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.06.26;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.46.37;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.38.19;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.35;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.22.59;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 2001, 2004
@@c Free Software Foundation, Inc.
@@c This is part of the GAS manual.
@@c For copying conditions, see the file as.texinfo.
@@page
@@node SH-Dependent
@@chapter Renesas / SuperH SH Dependent Features

@@cindex SH support
@@menu
* SH Options::              Options
* SH Syntax::               Syntax
* SH Floating Point::       Floating Point
* SH Directives::           SH Machine Directives
* SH Opcodes::              Opcodes
@@end menu

@@node SH Options
@@section Options

@@cindex SH options
@@cindex options, SH
@@code{@@value{AS}} has following command-line options for the Renesas
(formerly Hitachi) / SuperH SH family.

@@table @@code
@@kindex -little
@@kindex -big
@@kindex -relax
@@kindex -small
@@kindex -dsp
@@kindex -renesas

@@item -little
Generate little endian code.

@@item -big
Generate big endian code.

@@item -relax
Alter jump instructions for long displacements.

@@item -small
Align sections to 4 byte boundaries, not 16.

@@item -dsp
Enable sh-dsp insns, and disable sh3e / sh4 insns.

@@item -renesas
Disable optimization with section symbol for compatibility with
Renesas assembler.

@@item -isa=sh4 | sh4a
Specify the sh4 or sh4a instruction set.
@@item -isa=dsp
Enable sh-dsp insns, and disable sh3e / sh4 insns.
@@item -isa=fp
Enable sh2e, sh3e, sh4, and sh4a insn sets.
@@item -isa=all
Enable sh1, sh2, sh2e, sh3, sh3e, sh4, sh4a, and sh-dsp insn sets.

@@end table

@@node SH Syntax
@@section Syntax

@@menu
* SH-Chars::                Special Characters
* SH-Regs::                 Register Names
* SH-Addressing::           Addressing Modes
@@end menu

@@node SH-Chars
@@subsection Special Characters

@@cindex line comment character, SH
@@cindex SH line comment character
@@samp{!} is the line comment character.

@@cindex line separator, SH
@@cindex statement separator, SH
@@cindex SH line separator
You can use @@samp{;} instead of a newline to separate statements.

@@cindex symbol names, @@samp{$} in
@@cindex @@code{$} in symbol names
Since @@samp{$} has no special meaning, you may use it in symbol names.

@@node SH-Regs
@@subsection Register Names

@@cindex SH registers
@@cindex registers, SH
You can use the predefined symbols @@samp{r0}, @@samp{r1}, @@samp{r2},
@@samp{r3}, @@samp{r4}, @@samp{r5}, @@samp{r6}, @@samp{r7}, @@samp{r8},
@@samp{r9}, @@samp{r10}, @@samp{r11}, @@samp{r12}, @@samp{r13}, @@samp{r14},
and @@samp{r15} to refer to the SH registers.

The SH also has these control registers:

@@table @@code
@@item pr
procedure register (holds return address)

@@item pc
program counter

@@item mach
@@itemx macl
high and low multiply accumulator registers

@@item sr
status register

@@item gbr
global base register

@@item vbr
vector base register (for interrupt vectors)
@@end table

@@node SH-Addressing
@@subsection Addressing Modes

@@cindex addressing modes, SH
@@cindex SH addressing modes
@@code{@@value{AS}} understands the following addressing modes for the SH.
@@code{R@@var{n}} in the following refers to any of the numbered
registers, but @@emph{not} the control registers.

@@table @@code
@@item R@@var{n}
Register direct

@@item @@@@R@@var{n}
Register indirect

@@item @@@@-R@@var{n}
Register indirect with pre-decrement

@@item @@@@R@@var{n}+
Register indirect with post-increment

@@item @@@@(@@var{disp}, R@@var{n})
Register indirect with displacement

@@item @@@@(R0, R@@var{n})
Register indexed

@@item @@@@(@@var{disp}, GBR)
@@code{GBR} offset

@@item @@@@(R0, GBR)
GBR indexed

@@item @@var{addr}
@@itemx @@@@(@@var{disp}, PC)
PC relative address (for branch or for addressing memory).  The
@@code{@@value{AS}} implementation allows you to use the simpler form
@@var{addr} anywhere a PC relative address is called for; the alternate
form is supported for compatibility with other assemblers.

@@item #@@var{imm}
Immediate data
@@end table

@@node SH Floating Point
@@section Floating Point

@@cindex floating point, SH (@@sc{ieee})
@@cindex SH floating point (@@sc{ieee})
SH2E, SH3E and SH4 groups have on-chip floating-point unit (FPU). Other
SH groups can use @@code{.float} directive to generate @@sc{ieee} 
floating-point numbers. 

SH2E and SH3E support single-precision floating point calculations as 
well as entirely PCAPI compatible emulation of double-precision 
floating point calculations. SH2E and SH3E instructions are a subset of
the floating point calculations conforming to the IEEE754 standard.

In addition to single-precision and double-precision floating-point 
operation capability, the on-chip FPU of SH4 has a 128-bit graphic 
engine that enables 32-bit floating-point data to be processed 128 
bits at a time. It also supports 4 * 4 array operations and inner 
product operations. Also, a superscalar architecture is employed that 
enables simultaneous execution of two instructions (including FPU 
instructions), providing performance of up to twice that of 
conventional architectures at the same frequency.

@@node SH Directives
@@section SH Machine Directives

@@cindex SH machine directives
@@cindex machine directives, SH
@@cindex @@code{uaword} directive, SH
@@cindex @@code{ualong} directive, SH

@@table @@code
@@item uaword
@@itemx ualong
@@code{@@value{AS}} will issue a warning when a misaligned @@code{.word} or
@@code{.long} directive is used.  You may use @@code{.uaword} or
@@code{.ualong} to indicate that the value is intentionally misaligned.
@@end table

@@node SH Opcodes
@@section Opcodes

@@cindex SH opcode summary
@@cindex opcode summary, SH
@@cindex mnemonics, SH
@@cindex instruction summary, SH
For detailed information on the SH machine instruction set, see
@@cite{SH-Microcomputer User's Manual} (Renesas) or
@@cite{SH-4 32-bit CPU Core Architecture} (SuperH) and
@@cite{SuperH (SH) 64-Bit RISC Series} (SuperH).

@@code{@@value{AS}} implements all the standard SH opcodes.  No additional
pseudo-instructions are needed on this family.  Note, however, that
because @@code{@@value{AS}} supports a simpler form of PC-relative
addressing, you may simply write (for example)

@@example
mov.l  bar,r0
@@end example

@@noindent
where other assemblers might require an explicit displacement to
@@code{bar} from the program counter:

@@example
mov.l  @@@@(@@var{disp}, PC)
@@end example

@@ifset SMALL
@@c this table, due to the multi-col faking and hardcoded order, looks silly
@@c except in smallbook.  See comments below "@@set SMALL" near top of this file.

Here is a summary of SH opcodes:

@@page
@@smallexample
@@i{Legend:}
Rn        @@r{a numbered register}
Rm        @@r{another numbered register}
#imm      @@r{immediate data}
disp      @@r{displacement}
disp8     @@r{8-bit displacement}
disp12    @@r{12-bit displacement}

add #imm,Rn                    lds.l @@@@Rn+,PR              
add Rm,Rn                      mac.w @@@@Rm+,@@@@Rn+           
addc Rm,Rn                     mov #imm,Rn                 
addv Rm,Rn                     mov Rm,Rn                   
and #imm,R0                    mov.b Rm,@@@@(R0,Rn)          
and Rm,Rn                      mov.b Rm,@@@@-Rn              
and.b #imm,@@@@(R0,GBR)           mov.b Rm,@@@@Rn               
bf disp8                       mov.b @@@@(disp,Rm),R0        
bra disp12                     mov.b @@@@(disp,GBR),R0       
bsr disp12                     mov.b @@@@(R0,Rm),Rn          
bt disp8                       mov.b @@@@Rm+,Rn              
clrmac                         mov.b @@@@Rm,Rn               
clrt                           mov.b R0,@@@@(disp,Rm)        
cmp/eq #imm,R0                 mov.b R0,@@@@(disp,GBR)       
cmp/eq Rm,Rn                   mov.l Rm,@@@@(disp,Rn)        
cmp/ge Rm,Rn                   mov.l Rm,@@@@(R0,Rn)          
cmp/gt Rm,Rn                   mov.l Rm,@@@@-Rn              
cmp/hi Rm,Rn                   mov.l Rm,@@@@Rn               
cmp/hs Rm,Rn                   mov.l @@@@(disp,Rn),Rm        
cmp/pl Rn                      mov.l @@@@(disp,GBR),R0       
cmp/pz Rn                      mov.l @@@@(disp,PC),Rn        
cmp/str Rm,Rn                  mov.l @@@@(R0,Rm),Rn          
div0s Rm,Rn                    mov.l @@@@Rm+,Rn              
div0u                          mov.l @@@@Rm,Rn               
div1 Rm,Rn                     mov.l R0,@@@@(disp,GBR)       
exts.b Rm,Rn                   mov.w Rm,@@@@(R0,Rn)          
exts.w Rm,Rn                   mov.w Rm,@@@@-Rn              
extu.b Rm,Rn                   mov.w Rm,@@@@Rn               
extu.w Rm,Rn                   mov.w @@@@(disp,Rm),R0        
jmp @@@@Rn                        mov.w @@@@(disp,GBR),R0       
jsr @@@@Rn                        mov.w @@@@(disp,PC),Rn        
ldc Rn,GBR                     mov.w @@@@(R0,Rm),Rn          
ldc Rn,SR                      mov.w @@@@Rm+,Rn              
ldc Rn,VBR                     mov.w @@@@Rm,Rn               
ldc.l @@@@Rn+,GBR                 mov.w R0,@@@@(disp,Rm)        
ldc.l @@@@Rn+,SR                  mov.w R0,@@@@(disp,GBR)       
ldc.l @@@@Rn+,VBR                 mova @@@@(disp,PC),R0         
lds Rn,MACH                    movt Rn                     
lds Rn,MACL                    muls Rm,Rn                  
lds Rn,PR                      mulu Rm,Rn                  
lds.l @@@@Rn+,MACH                neg Rm,Rn                   
lds.l @@@@Rn+,MACL                negc Rm,Rn                  
@@page
nop                            stc VBR,Rn                
not Rm,Rn                      stc.l GBR,@@@@-Rn           
or #imm,R0                     stc.l SR,@@@@-Rn            
or Rm,Rn                       stc.l VBR,@@@@-Rn           
or.b #imm,@@@@(R0,GBR)            sts MACH,Rn               
rotcl Rn                       sts MACL,Rn               
rotcr Rn                       sts PR,Rn                 
rotl Rn                        sts.l MACH,@@@@-Rn          
rotr Rn                        sts.l MACL,@@@@-Rn          
rte                            sts.l PR,@@@@-Rn            
rts                            sub Rm,Rn                 
sett                           subc Rm,Rn                
shal Rn                        subv Rm,Rn                
shar Rn                        swap.b Rm,Rn              
shll Rn                        swap.w Rm,Rn              
shll16 Rn                      tas.b @@@@Rn                
shll2 Rn                       trapa #imm                
shll8 Rn                       tst #imm,R0               
shlr Rn                        tst Rm,Rn                 
shlr16 Rn                      tst.b #imm,@@@@(R0,GBR)     
shlr2 Rn                       xor #imm,R0               
shlr8 Rn                       xor Rm,Rn                 
sleep                          xor.b #imm,@@@@(R0,GBR)     
stc GBR,Rn                     xtrct Rm,Rn               
stc SR,Rn
@@end smallexample
@@end ifset

@@ifset Renesas-all
@@ifclear GENERIC
@@raisesections
@@end ifclear
@@end ifset

@


1.4
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d1 1
a1 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 2001
d32 1
d49 13
d172 17
a188 3
The SH family has no hardware floating point, but the @@code{.float}
directive generates @@sc{ieee} floating-point numbers for compatibility
with other development tools.
@


1.3
log
@resolve conflicts.
@
text
@d1 1
a1 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997
d7 1
a7 1
@@chapter Hitachi SH Dependent Features
d21 28
a48 4
@@cindex SH options (none)
@@cindex options, SH (none)
@@code{@@value{AS}} has no additional command-line options for the Hitachi
SH family.
d186 3
a188 1
@@cite{SH-Microcomputer User's Manual} (Hitachi Micro Systems, Inc.).
d294 1
a294 1
@@ifset Hitachi-all
@


1.2
log
@Help stupid cvs fixing basic conflicts.
@
text
@d1 2
a2 1
@@c Copyright (C) 1991, 92, 93, 94, 95, 1997 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@c Copyright (C) 1991, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.
d140 12
a151 5
@@cindex SH machine directives (none)
@@cindex machine directives, SH (none)
@@cindex @@code{word} directive, SH
@@cindex @@code{int} directive, SH
@@code{@@value{AS}} has no machine-dependent directives for the SH.
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 1
a1 1
@@c Copyright (C) 1991, 92, 93, 94, 95, 1997 Free Software Foundation, Inc.
d140 5
a144 12
@@cindex SH machine directives
@@cindex machine directives, SH
@@cindex @@code{uaword} directive, SH
@@cindex @@code{ualong} directive, SH

@@table @@code
@@item uaword
@@itemx ualong
@@code{@@value{AS}} will issue a warning when a misaligned @@code{.word} or
@@code{.long} directive is used.  You may use @@code{.uaword} or
@@code{.ualong} to indicate that the value is intentionally misaligned.
@@end table
@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 1
a1 2
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997
@@c Free Software Foundation, Inc.
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 1
a1 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 2001
d7 1
a7 1
@@chapter Renesas / SuperH SH Dependent Features
d21 4
a24 28
@@cindex SH options
@@cindex options, SH
@@code{@@value{AS}} has following command-line options for the Renesas
(formerly Hitachi) / SuperH SH family.

@@table @@code
@@kindex -little
@@kindex -big
@@kindex -relax
@@kindex -small
@@kindex -dsp

@@item -little
Generate little endian code.

@@item -big
Generate big endian code.

@@item -relax
Alter jump instructions for long displacements.

@@item -small
Align sections to 4 byte boundaries, not 16.

@@item -dsp
Enable sh-dsp insns, and disable sh3e / sh4 insns.

@@end table
d162 1
a162 3
@@cite{SH-Microcomputer User's Manual} (Renesas) or
@@cite{SH-4 32-bit CPU Core Architecture} (SuperH) and
@@cite{SuperH (SH) 64-Bit RISC Series} (SuperH).
d268 1
a268 1
@@ifset Renesas-all
@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d1 1
a1 1
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 2001, 2004
a31 1
@@kindex -renesas
a47 13
@@item -renesas
Disable optimization with section symbol for compatibility with
Renesas assembler.

@@item -isa=sh4 | sh4a
Specify the sh4 or sh4a instruction set.
@@item -isa=dsp
Enable sh-dsp insns, and disable sh3e / sh4 insns.
@@item -isa=fp
Enable sh2e, sh3e, sh4, and sh4a insn sets.
@@item -isa=all
Enable sh1, sh2, sh2e, sh3, sh3e, sh4, sh4a, and sh-dsp insn sets.

d158 3
a160 17
SH2E, SH3E and SH4 groups have on-chip floating-point unit (FPU). Other
SH groups can use @@code{.float} directive to generate @@sc{ieee} 
floating-point numbers. 

SH2E and SH3E support single-precision floating point calculations as 
well as entirely PCAPI compatible emulation of double-precision 
floating point calculations. SH2E and SH3E instructions are a subset of
the floating point calculations conforming to the IEEE754 standard.

In addition to single-precision and double-precision floating-point 
operation capability, the on-chip FPU of SH4 has a 128-bit graphic 
engine that enables 32-bit floating-point data to be processed 128 
bits at a time. It also supports 4 * 4 array operations and inner 
product operations. Also, a superscalar architecture is employed that 
enables simultaneous execution of two instructions (including FPU 
instructions), providing performance of up to twice that of 
conventional architectures at the same frequency.
@


