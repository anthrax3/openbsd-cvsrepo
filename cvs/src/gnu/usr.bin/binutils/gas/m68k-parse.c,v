head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.50
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.52
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.48
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.44
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.46
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.38
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.42
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.3
	BINUTILS-2_8_1:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.11.02.20.45.24;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.21.54.28;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.34;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.22.24.58;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.50.33;	author niklas;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.05.47;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.05.47;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.22.01;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.46.13;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.13.32.12;	author fgsch;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.27;	author drahn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.02.20.22.45;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* A Bison parser, made from m68k-parse.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	DR	257
# define	AR	258
# define	FPR	259
# define	FPCR	260
# define	LPC	261
# define	ZAR	262
# define	ZDR	263
# define	LZPC	264
# define	CREG	265
# define	INDEXREG	266
# define	EXPR	267

#line 27 "m68k-parse.y"


#include "as.h"
#include "tc-m68k.h"
#include "m68k-parse.h"
#include "safe-ctype.h"

/* Remap normal yacc parser interface names (yyparse, yylex, yyerror,
   etc), as well as gratuitously global symbol names If other parser
   generators (bison, byacc, etc) produce additional global names that
   conflict at link time, then those parser generators need to be
   fixed instead of adding those names to this list. */

#define	yymaxdepth m68k_maxdepth
#define	yyparse	m68k_parse
#define	yylex	m68k_lex
#define	yyerror	m68k_error
#define	yylval	m68k_lval
#define	yychar	m68k_char
#define	yydebug	m68k_debug
#define	yypact	m68k_pact	
#define	yyr1	m68k_r1			
#define	yyr2	m68k_r2			
#define	yydef	m68k_def		
#define	yychk	m68k_chk		
#define	yypgo	m68k_pgo		
#define	yyact	m68k_act		
#define	yyexca	m68k_exca
#define yyerrflag m68k_errflag
#define yynerrs	m68k_nerrs
#define	yyps	m68k_ps
#define	yypv	m68k_pv
#define	yys	m68k_s
#define	yy_yys	m68k_yys
#define	yystate	m68k_state
#define	yytmp	m68k_tmp
#define	yyv	m68k_v
#define	yy_yyv	m68k_yyv
#define	yyval	m68k_val
#define	yylloc	m68k_lloc
#define yyreds	m68k_reds		/* With YYDEBUG defined */
#define yytoks	m68k_toks		/* With YYDEBUG defined */
#define yylhs	m68k_yylhs
#define yylen	m68k_yylen
#define yydefred m68k_yydefred
#define yydgoto	m68k_yydgoto
#define yysindex m68k_yysindex
#define yyrindex m68k_yyrindex
#define yygindex m68k_yygindex
#define yytable	 m68k_yytable
#define yycheck	 m68k_yycheck

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

/* Internal functions.  */

static enum m68k_register m68k_reg_parse PARAMS ((char **));
static int yylex PARAMS ((void));
static void yyerror PARAMS ((const char *));

/* The parser sets fields pointed to by this global variable.  */
static struct m68k_op *op;


#line 94 "m68k-parse.y"
#ifndef YYSTYPE
typedef union
{
  struct m68k_indexreg indexreg;
  enum m68k_register reg;
  struct m68k_exp exp;
  unsigned long mask;
  int onereg;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		173
#define	YYFLAG		-32768
#define	YYNTBASE	25

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 267 ? yytranslate[x] : 44)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,    14,     2,     2,    15,     2,
      16,    17,     2,    18,    20,    19,     2,    24,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    23,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    21,     2,    22,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     6,     8,    10,    12,    14,    16,
      18,    21,    24,    26,    30,    35,    40,    46,    52,    57,
      61,    65,    69,    77,    85,    92,    98,   105,   111,   118,
     124,   130,   135,   145,   153,   162,   169,   180,   189,   200,
     209,   218,   221,   225,   229,   235,   242,   253,   263,   274,
     276,   278,   280,   282,   284,   286,   288,   290,   292,   294,
     296,   298,   300,   302,   303,   305,   307,   309,   310,   313,
     314,   317,   318,   321,   323,   327,   331,   333,   335,   339,
     343,   347,   349,   351,   353
};
static const short yyrhs[] =
{
      26,     0,    27,     0,    28,     0,     3,     0,     4,     0,
       5,     0,     6,     0,    11,     0,    13,     0,    14,    13,
       0,    15,    13,     0,    40,     0,    16,     4,    17,     0,
      16,     4,    17,    18,     0,    19,    16,     4,    17,     0,
      16,    13,    20,    34,    17,     0,    16,    34,    20,    13,
      17,     0,    13,    16,    34,    17,     0,    16,     7,    17,
       0,    16,     8,    17,     0,    16,    10,    17,     0,    16,
      13,    20,    34,    20,    29,    17,     0,    16,    13,    20,
      34,    20,    36,    17,     0,    16,    13,    20,    30,    37,
      17,     0,    16,    30,    20,    13,    17,     0,    13,    16,
      34,    20,    29,    17,     0,    16,    34,    20,    29,    17,
       0,    13,    16,    34,    20,    36,    17,     0,    16,    34,
      20,    36,    17,     0,    13,    16,    30,    37,    17,     0,
      16,    30,    37,    17,     0,    16,    21,    13,    37,    22,
      20,    29,    38,    17,     0,    16,    21,    13,    37,    22,
      38,    17,     0,    16,    21,    34,    22,    20,    29,    38,
      17,     0,    16,    21,    34,    22,    38,    17,     0,    16,
      21,    13,    20,    34,    20,    29,    22,    38,    17,     0,
      16,    21,    34,    20,    29,    22,    38,    17,     0,    16,
      21,    13,    20,    34,    20,    36,    22,    38,    17,     0,
      16,    21,    34,    20,    36,    22,    38,    17,     0,    16,
      21,    39,    30,    37,    22,    38,    17,     0,    35,    23,
       0,    35,    23,    18,     0,    35,    23,    19,     0,    35,
      23,    16,    13,    17,     0,    35,    23,    16,    39,    29,
      17,     0,    35,    23,    16,    13,    17,    23,    16,    39,
      29,    17,     0,    35,    23,    16,    13,    17,    23,    16,
      13,    17,     0,    35,    23,    16,    39,    29,    17,    23,
      16,    13,    17,     0,    12,     0,    31,     0,    12,     0,
      32,     0,    32,     0,     4,     0,     8,     0,     3,     0,
       9,     0,     4,     0,     7,     0,    33,     0,    10,     0,
       8,     0,     0,    34,     0,     7,     0,    10,     0,     0,
      20,    34,     0,     0,    20,    13,     0,     0,    13,    20,
       0,    42,     0,    42,    24,    41,     0,    43,    24,    41,
       0,    43,     0,    42,     0,    42,    24,    41,     0,    43,
      24,    41,     0,    43,    19,    43,     0,     3,     0,     4,
       0,     5,     0,     6,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   117,   119,   120,   125,   131,   136,   141,   146,   151,
     156,   161,   166,   178,   184,   189,   194,   204,   214,   224,
     229,   234,   239,   246,   257,   264,   270,   277,   283,   294,
     304,   311,   317,   325,   332,   339,   345,   353,   360,   372,
     383,   395,   404,   412,   420,   430,   437,   445,   452,   465,
     467,   479,   481,   492,   494,   495,   500,   502,   507,   509,
     515,   517,   518,   523,   528,   533,   535,   540,   545,   553,
     559,   567,   573,   581,   583,   587,   598,   603,   604,   608,
     614,   624,   629,   633,   637
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "DR", "AR", "FPR", "FPCR", "LPC", "ZAR", 
  "ZDR", "LZPC", "CREG", "INDEXREG", "EXPR", "'#'", "'&'", "'('", "')'", 
  "'+'", "'-'", "','", "'['", "']'", "'@@'", "'/'", "operand", 
  "generic_operand", "motorola_operand", "mit_operand", "zireg", "zdireg", 
  "zadr", "zdr", "apc", "zapc", "optzapc", "zpc", "optczapc", "optcexpr", 
  "optexprc", "reglist", "ireglist", "reglistpair", "reglistreg", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    25,    25,    25,    26,    26,    26,    26,    26,    26,
      26,    26,    26,    27,    27,    27,    27,    27,    27,    27,
      27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
      27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
      27,    28,    28,    28,    28,    28,    28,    28,    28,    29,
      29,    30,    30,    31,    31,    31,    32,    32,    33,    33,
      34,    34,    34,    35,    35,    36,    36,    37,    37,    38,
      38,    39,    39,    40,    40,    40,    41,    41,    41,    41,
      42,    43,    43,    43,    43
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     3,     4,     4,     5,     5,     4,     3,
       3,     3,     7,     7,     6,     5,     6,     5,     6,     5,
       5,     4,     9,     7,     8,     6,    10,     8,    10,     8,
       8,     2,     3,     3,     5,     6,    10,     9,    10,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     1,     0,     2,     0,
       2,     0,     2,     1,     3,     3,     1,     1,     3,     3,
       3,     1,     1,     1,     1
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
      63,    81,    82,    83,    84,    59,    62,    61,     8,     9,
       0,     0,     0,     0,     1,     2,     3,    60,    64,     0,
      12,    73,     0,     0,    10,    11,    56,    58,    59,    62,
      57,    61,    51,     0,    71,    67,    52,     0,     0,    41,
       0,     0,     0,    58,    67,     0,    13,    19,    20,    21,
       0,    67,     0,     0,     0,     0,     0,     0,    71,    42,
      43,    81,    82,    83,    84,    74,    77,    76,    80,    75,
       0,     0,    18,     0,    14,    67,     0,    72,     0,     0,
      69,    67,     0,    68,    31,    54,    65,    55,    66,    49,
       0,     0,    50,    53,     0,    15,     0,     0,     0,     0,
      30,     0,     0,     0,    16,     0,    68,    69,     0,     0,
       0,     0,     0,    25,    17,    27,    29,    44,    72,     0,
      78,    79,    26,    28,    24,     0,     0,     0,     0,     0,
      69,    69,    70,    69,    35,    69,     0,    45,    22,    23,
       0,     0,    69,    33,     0,     0,     0,     0,     0,    71,
       0,    69,    69,     0,    37,    39,    34,    40,     0,     0,
       0,     0,     0,    32,    47,     0,     0,    36,    38,    46,
      48,     0,     0,     0
};

static const short yydefgoto[] =
{
     171,    14,    15,    16,    91,    35,    92,    93,    17,    83,
      19,    94,    55,   111,    53,    20,    65,    66,    67
};

static const short yypact[] =
{
      89,    10,    11,    19,    23,-32768,-32768,-32768,-32768,    13,
      -4,    22,    57,    36,-32768,-32768,-32768,-32768,-32768,    18,
  -32768,    33,    -2,   114,-32768,-32768,-32768,    46,    62,    66,
  -32768,    67,-32768,    68,   131,    69,-32768,    70,   105,   147,
     156,   156,   156,-32768,    94,    25,   101,-32768,-32768,-32768,
     114,   100,    53,     9,   138,   108,   103,   112,   117,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   119,    12,-32768,-32768,
      64,   130,-32768,   124,-32768,    94,    81,    64,   135,   124,
     132,    94,   150,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     151,   152,-32768,-32768,   153,-32768,   120,   146,   156,   156,
  -32768,   154,   155,   157,-32768,   124,   144,   158,   159,   160,
      73,   162,   161,-32768,-32768,-32768,-32768,   163,-32768,   167,
  -32768,-32768,-32768,-32768,-32768,   168,   170,   124,    73,   171,
     169,   169,-32768,   169,-32768,   169,   164,   172,-32768,-32768,
     174,   175,   169,-32768,   177,   176,   181,   182,   183,   178,
     185,   169,   169,   186,-32768,-32768,-32768,-32768,   136,   146,
     179,   187,   188,-32768,-32768,   189,   190,-32768,-32768,-32768,
  -32768,   173,   194,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,   -72,     1,-32768,    -7,-32768,     3,
  -32768,   -65,   -31,  -103,   -58,-32768,   -40,   202,     6
};


#define	YYLAST		207


static const short yytable[] =
{
      97,   101,    69,    18,   129,    36,    22,   108,   102,    24,
      -4,    -5,    26,    71,   109,    37,    36,    41,    30,    -6,
      78,    32,    42,    -7,    44,   119,    45,   145,   146,    23,
     147,    41,   148,   125,   -58,    25,    99,    52,   133,   153,
     126,    39,    72,    36,   103,    73,    36,    68,   161,   162,
     112,    75,    38,    76,    81,   140,   142,    40,   120,   121,
      26,    27,   141,    46,    28,    29,    30,    31,    43,    32,
      33,     5,     6,    79,     7,    80,    26,    85,    34,    47,
     106,    87,    30,    48,    49,    89,   132,   165,    50,    54,
      56,   159,     1,     2,     3,     4,     5,     6,   104,     7,
       8,   105,     9,    10,    11,    12,    26,    85,    13,    57,
      86,    87,    30,    88,    70,    89,    90,    26,    43,    74,
      77,     5,     6,    30,     7,    84,    32,    26,    85,    95,
      96,    86,    87,    30,    88,    43,    89,   117,     5,     6,
     118,     7,    43,    98,    51,     5,     6,   100,     7,    26,
      85,    82,   110,   164,    87,    30,   118,   107,    89,    61,
      62,    63,    64,    58,   127,    59,    60,   113,   114,   115,
     116,   122,   123,   172,   124,     0,     0,     0,   128,   134,
     149,   130,   131,   135,   137,   138,   136,   139,   143,   144,
     132,   158,   166,   154,   173,   150,   151,   152,   155,   156,
     157,   160,    21,   163,   167,   168,   169,   170
};

static const short yycheck[] =
{
      58,    73,    42,     0,   107,    12,     0,    79,    73,    13,
       0,     0,     3,    44,    79,    12,    23,    19,     9,     0,
      51,    12,    24,     0,    23,    97,    23,   130,   131,    16,
     133,    19,   135,   105,    23,    13,    24,    34,   110,   142,
     105,    23,    17,    50,    75,    20,    53,    41,   151,   152,
      81,    50,    16,    50,    53,   127,   128,    24,    98,    99,
       3,     4,   127,    17,     7,     8,     9,    10,     4,    12,
      13,     7,     8,    20,    10,    22,     3,     4,    21,    17,
      77,     8,     9,    17,    17,    12,    13,   159,    20,    20,
      20,   149,     3,     4,     5,     6,     7,     8,    17,    10,
      11,    20,    13,    14,    15,    16,     3,     4,    19,     4,
       7,     8,     9,    10,    20,    12,    13,     3,     4,    18,
      20,     7,     8,     9,    10,    17,    12,     3,     4,    17,
      13,     7,     8,     9,    10,     4,    12,    17,     7,     8,
      20,    10,     4,    24,    13,     7,     8,    17,    10,     3,
       4,    13,    20,    17,     8,     9,    20,    22,    12,     3,
       4,     5,     6,    16,    20,    18,    19,    17,    17,    17,
      17,    17,    17,     0,    17,    -1,    -1,    -1,    20,    17,
      16,    22,    22,    22,    17,    17,    23,    17,    17,    20,
      13,    13,    13,    17,     0,    23,    22,    22,    17,    17,
      17,    16,     0,    17,    17,    17,    17,    17
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison-1.35/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison-1.35/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 4:
#line 127 "m68k-parse.y"
{
		  op->mode = DREG;
		  op->reg = yyvsp[0].reg;
		}
    break;
case 5:
#line 132 "m68k-parse.y"
{
		  op->mode = AREG;
		  op->reg = yyvsp[0].reg;
		}
    break;
case 6:
#line 137 "m68k-parse.y"
{
		  op->mode = FPREG;
		  op->reg = yyvsp[0].reg;
		}
    break;
case 7:
#line 142 "m68k-parse.y"
{
		  op->mode = CONTROL;
		  op->reg = yyvsp[0].reg;
		}
    break;
case 8:
#line 147 "m68k-parse.y"
{
		  op->mode = CONTROL;
		  op->reg = yyvsp[0].reg;
		}
    break;
case 9:
#line 152 "m68k-parse.y"
{
		  op->mode = ABSL;
		  op->disp = yyvsp[0].exp;
		}
    break;
case 10:
#line 157 "m68k-parse.y"
{
		  op->mode = IMMED;
		  op->disp = yyvsp[0].exp;
		}
    break;
case 11:
#line 162 "m68k-parse.y"
{
		  op->mode = IMMED;
		  op->disp = yyvsp[0].exp;
		}
    break;
case 12:
#line 167 "m68k-parse.y"
{
		  op->mode = REGLST;
		  op->mask = yyvsp[0].mask;
		}
    break;
case 13:
#line 180 "m68k-parse.y"
{
		  op->mode = AINDR;
		  op->reg = yyvsp[-1].reg;
		}
    break;
case 14:
#line 185 "m68k-parse.y"
{
		  op->mode = AINC;
		  op->reg = yyvsp[-2].reg;
		}
    break;
case 15:
#line 190 "m68k-parse.y"
{
		  op->mode = ADEC;
		  op->reg = yyvsp[-1].reg;
		}
    break;
case 16:
#line 195 "m68k-parse.y"
{
		  op->reg = yyvsp[-1].reg;
		  op->disp = yyvsp[-3].exp;
		  if ((yyvsp[-1].reg >= ZADDR0 && yyvsp[-1].reg <= ZADDR7)
		      || yyvsp[-1].reg == ZPC)
		    op->mode = BASE;
		  else
		    op->mode = DISP;
		}
    break;
case 17:
#line 205 "m68k-parse.y"
{
		  op->reg = yyvsp[-3].reg;
		  op->disp = yyvsp[-1].exp;
		  if ((yyvsp[-3].reg >= ZADDR0 && yyvsp[-3].reg <= ZADDR7)
		      || yyvsp[-3].reg == ZPC)
		    op->mode = BASE;
		  else
		    op->mode = DISP;
		}
    break;
case 18:
#line 215 "m68k-parse.y"
{
		  op->reg = yyvsp[-1].reg;
		  op->disp = yyvsp[-3].exp;
		  if ((yyvsp[-1].reg >= ZADDR0 && yyvsp[-1].reg <= ZADDR7)
		      || yyvsp[-1].reg == ZPC)
		    op->mode = BASE;
		  else
		    op->mode = DISP;
		}
    break;
case 19:
#line 225 "m68k-parse.y"
{
		  op->mode = DISP;
		  op->reg = yyvsp[-1].reg;
		}
    break;
case 20:
#line 230 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-1].reg;
		}
    break;
case 21:
#line 235 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-1].reg;
		}
    break;
case 22:
#line 240 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-3].reg;
		  op->disp = yyvsp[-5].exp;
		  op->index = yyvsp[-1].indexreg;
		}
    break;
case 23:
#line 247 "m68k-parse.y"
{
		  if (yyvsp[-3].reg == PC || yyvsp[-3].reg == ZPC)
		    yyerror (_("syntax error"));
		  op->mode = BASE;
		  op->reg = yyvsp[-1].reg;
		  op->disp = yyvsp[-5].exp;
		  op->index.reg = yyvsp[-3].reg;
		  op->index.size = SIZE_UNSPEC;
		  op->index.scale = 1;
		}
    break;
case 24:
#line 258 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-1].reg;
		  op->disp = yyvsp[-4].exp;
		  op->index = yyvsp[-2].indexreg;
		}
    break;
case 25:
#line 265 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->disp = yyvsp[-1].exp;
		  op->index = yyvsp[-3].indexreg;
		}
    break;
case 26:
#line 271 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-3].reg;
		  op->disp = yyvsp[-5].exp;
		  op->index = yyvsp[-1].indexreg;
		}
    break;
case 27:
#line 278 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-3].reg;
		  op->index = yyvsp[-1].indexreg;
		}
    break;
case 28:
#line 284 "m68k-parse.y"
{
		  if (yyvsp[-3].reg == PC || yyvsp[-3].reg == ZPC)
		    yyerror (_("syntax error"));
		  op->mode = BASE;
		  op->reg = yyvsp[-1].reg;
		  op->disp = yyvsp[-5].exp;
		  op->index.reg = yyvsp[-3].reg;
		  op->index.size = SIZE_UNSPEC;
		  op->index.scale = 1;
		}
    break;
case 29:
#line 295 "m68k-parse.y"
{
		  if (yyvsp[-3].reg == PC || yyvsp[-3].reg == ZPC)
		    yyerror (_("syntax error"));
		  op->mode = BASE;
		  op->reg = yyvsp[-1].reg;
		  op->index.reg = yyvsp[-3].reg;
		  op->index.size = SIZE_UNSPEC;
		  op->index.scale = 1;
		}
    break;
case 30:
#line 305 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-1].reg;
		  op->disp = yyvsp[-4].exp;
		  op->index = yyvsp[-2].indexreg;
		}
    break;
case 31:
#line 312 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-1].reg;
		  op->index = yyvsp[-2].indexreg;
		}
    break;
case 32:
#line 318 "m68k-parse.y"
{
		  op->mode = POST;
		  op->reg = yyvsp[-5].reg;
		  op->disp = yyvsp[-6].exp;
		  op->index = yyvsp[-2].indexreg;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 33:
#line 326 "m68k-parse.y"
{
		  op->mode = POST;
		  op->reg = yyvsp[-3].reg;
		  op->disp = yyvsp[-4].exp;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 34:
#line 333 "m68k-parse.y"
{
		  op->mode = POST;
		  op->reg = yyvsp[-5].reg;
		  op->index = yyvsp[-2].indexreg;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 35:
#line 340 "m68k-parse.y"
{
		  op->mode = POST;
		  op->reg = yyvsp[-3].reg;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 36:
#line 346 "m68k-parse.y"
{
		  op->mode = PRE;
		  op->reg = yyvsp[-5].reg;
		  op->disp = yyvsp[-7].exp;
		  op->index = yyvsp[-3].indexreg;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 37:
#line 354 "m68k-parse.y"
{
		  op->mode = PRE;
		  op->reg = yyvsp[-5].reg;
		  op->index = yyvsp[-3].indexreg;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 38:
#line 361 "m68k-parse.y"
{
		  if (yyvsp[-5].reg == PC || yyvsp[-5].reg == ZPC)
		    yyerror (_("syntax error"));
		  op->mode = PRE;
		  op->reg = yyvsp[-3].reg;
		  op->disp = yyvsp[-7].exp;
		  op->index.reg = yyvsp[-5].reg;
		  op->index.size = SIZE_UNSPEC;
		  op->index.scale = 1;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 39:
#line 373 "m68k-parse.y"
{
		  if (yyvsp[-5].reg == PC || yyvsp[-5].reg == ZPC)
		    yyerror (_("syntax error"));
		  op->mode = PRE;
		  op->reg = yyvsp[-3].reg;
		  op->index.reg = yyvsp[-5].reg;
		  op->index.size = SIZE_UNSPEC;
		  op->index.scale = 1;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 40:
#line 384 "m68k-parse.y"
{
		  op->mode = PRE;
		  op->reg = yyvsp[-3].reg;
		  op->disp = yyvsp[-5].exp;
		  op->index = yyvsp[-4].indexreg;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 41:
#line 397 "m68k-parse.y"
{
		  /* We use optzapc to avoid a shift/reduce conflict.  */
		  if (yyvsp[-1].reg < ADDR0 || yyvsp[-1].reg > ADDR7)
		    yyerror (_("syntax error"));
		  op->mode = AINDR;
		  op->reg = yyvsp[-1].reg;
		}
    break;
case 42:
#line 405 "m68k-parse.y"
{
		  /* We use optzapc to avoid a shift/reduce conflict.  */
		  if (yyvsp[-2].reg < ADDR0 || yyvsp[-2].reg > ADDR7)
		    yyerror (_("syntax error"));
		  op->mode = AINC;
		  op->reg = yyvsp[-2].reg;
		}
    break;
case 43:
#line 413 "m68k-parse.y"
{
		  /* We use optzapc to avoid a shift/reduce conflict.  */
		  if (yyvsp[-2].reg < ADDR0 || yyvsp[-2].reg > ADDR7)
		    yyerror (_("syntax error"));
		  op->mode = ADEC;
		  op->reg = yyvsp[-2].reg;
		}
    break;
case 44:
#line 421 "m68k-parse.y"
{
		  op->reg = yyvsp[-4].reg;
		  op->disp = yyvsp[-1].exp;
		  if ((yyvsp[-4].reg >= ZADDR0 && yyvsp[-4].reg <= ZADDR7)
		      || yyvsp[-4].reg == ZPC)
		    op->mode = BASE;
		  else
		    op->mode = DISP;
		}
    break;
case 45:
#line 431 "m68k-parse.y"
{
		  op->mode = BASE;
		  op->reg = yyvsp[-5].reg;
		  op->disp = yyvsp[-2].exp;
		  op->index = yyvsp[-1].indexreg;
		}
    break;
case 46:
#line 438 "m68k-parse.y"
{
		  op->mode = POST;
		  op->reg = yyvsp[-9].reg;
		  op->disp = yyvsp[-6].exp;
		  op->index = yyvsp[-1].indexreg;
		  op->odisp = yyvsp[-2].exp;
		}
    break;
case 47:
#line 446 "m68k-parse.y"
{
		  op->mode = POST;
		  op->reg = yyvsp[-8].reg;
		  op->disp = yyvsp[-5].exp;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 48:
#line 453 "m68k-parse.y"
{
		  op->mode = PRE;
		  op->reg = yyvsp[-9].reg;
		  op->disp = yyvsp[-6].exp;
		  op->index = yyvsp[-5].indexreg;
		  op->odisp = yyvsp[-1].exp;
		}
    break;
case 50:
#line 468 "m68k-parse.y"
{
		  yyval.indexreg.reg = yyvsp[0].reg;
		  yyval.indexreg.size = SIZE_UNSPEC;
		  yyval.indexreg.scale = 1;
		}
    break;
case 52:
#line 482 "m68k-parse.y"
{
		  yyval.indexreg.reg = yyvsp[0].reg;
		  yyval.indexreg.size = SIZE_UNSPEC;
		  yyval.indexreg.scale = 1;
		}
    break;
case 63:
#line 525 "m68k-parse.y"
{
		  yyval.reg = ZADDR0;
		}
    break;
case 67:
#line 542 "m68k-parse.y"
{
		  yyval.reg = ZADDR0;
		}
    break;
case 68:
#line 546 "m68k-parse.y"
{
		  yyval.reg = yyvsp[0].reg;
		}
    break;
case 69:
#line 555 "m68k-parse.y"
{
		  yyval.exp.exp.X_op = O_absent;
		  yyval.exp.size = SIZE_UNSPEC;
		}
    break;
case 70:
#line 560 "m68k-parse.y"
{
		  yyval.exp = yyvsp[0].exp;
		}
    break;
case 71:
#line 569 "m68k-parse.y"
{
		  yyval.exp.exp.X_op = O_absent;
		  yyval.exp.size = SIZE_UNSPEC;
		}
    break;
case 72:
#line 574 "m68k-parse.y"
{
		  yyval.exp = yyvsp[-1].exp;
		}
    break;
case 74:
#line 584 "m68k-parse.y"
{
		  yyval.mask = yyvsp[-2].mask | yyvsp[0].mask;
		}
    break;
case 75:
#line 588 "m68k-parse.y"
{
		  yyval.mask = (1 << yyvsp[-2].onereg) | yyvsp[0].mask;
		}
    break;
case 76:
#line 600 "m68k-parse.y"
{
		  yyval.mask = 1 << yyvsp[0].onereg;
		}
    break;
case 78:
#line 605 "m68k-parse.y"
{
		  yyval.mask = yyvsp[-2].mask | yyvsp[0].mask;
		}
    break;
case 79:
#line 609 "m68k-parse.y"
{
		  yyval.mask = (1 << yyvsp[-2].onereg) | yyvsp[0].mask;
		}
    break;
case 80:
#line 616 "m68k-parse.y"
{
		  if (yyvsp[-2].onereg <= yyvsp[0].onereg)
		    yyval.mask = (1 << (yyvsp[0].onereg + 1)) - 1 - ((1 << yyvsp[-2].onereg) - 1);
		  else
		    yyval.mask = (1 << (yyvsp[-2].onereg + 1)) - 1 - ((1 << yyvsp[0].onereg) - 1);
		}
    break;
case 81:
#line 626 "m68k-parse.y"
{
		  yyval.onereg = yyvsp[0].reg - DATA0;
		}
    break;
case 82:
#line 630 "m68k-parse.y"
{
		  yyval.onereg = yyvsp[0].reg - ADDR0 + 8;
		}
    break;
case 83:
#line 634 "m68k-parse.y"
{
		  yyval.onereg = yyvsp[0].reg - FP0 + 16;
		}
    break;
case 84:
#line 638 "m68k-parse.y"
{
		  if (yyvsp[0].reg == FPI)
		    yyval.onereg = 24;
		  else if (yyvsp[0].reg == FPS)
		    yyval.onereg = 25;
		  else
		    yyval.onereg = 26;
		}
    break;
}

#line 705 "/usr/share/bison-1.35/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 648 "m68k-parse.y"


/* The string to parse is stored here, and modified by yylex.  */

static char *str;

/* The original string pointer.  */

static char *strorig;

/* If *CCP could be a register, return the register number and advance
   *CCP.  Otherwise don't change *CCP, and return 0.  */

static enum m68k_register
m68k_reg_parse (ccp)
     register char **ccp;
{
  char *start = *ccp;
  char c;
  char *p;
  symbolS *symbolp;

  if (flag_reg_prefix_optional)
    {
      if (*start == REGISTER_PREFIX)
	start++;
      p = start;
    }
  else
    {
      if (*start != REGISTER_PREFIX)
	return 0;
      p = start + 1;
    }

  if (! is_name_beginner (*p))
    return 0;

  p++;
  while (is_part_of_name (*p) && *p != '.' && *p != ':' && *p != '*')
    p++;

  c = *p;
  *p = 0;
  symbolp = symbol_find (start);
  *p = c;

  if (symbolp != NULL && S_GET_SEGMENT (symbolp) == reg_section)
    {
      *ccp = p;
      return S_GET_VALUE (symbolp);
    }

  /* In MRI mode, something like foo.bar can be equated to a register
     name.  */
  while (flag_mri && c == '.')
    {
      ++p;
      while (is_part_of_name (*p) && *p != '.' && *p != ':' && *p != '*')
	p++;
      c = *p;
      *p = '\0';
      symbolp = symbol_find (start);
      *p = c;
      if (symbolp != NULL && S_GET_SEGMENT (symbolp) == reg_section)
	{
	  *ccp = p;
	  return S_GET_VALUE (symbolp);
	}
    }

  return 0;
}

/* The lexer.  */

static int
yylex ()
{
  enum m68k_register reg;
  char *s;
  int parens;
  int c = 0;
  int tail = 0;
  char *hold;

  if (*str == ' ')
    ++str;

  if (*str == '\0')
    return 0;

  /* Various special characters are just returned directly.  */
  switch (*str)
    {
    case '@@':
      /* In MRI mode, this can be the start of an octal number.  */
      if (flag_mri)
	{
	  if (ISDIGIT (str[1])
	      || ((str[1] == '+' || str[1] == '-')
		  && ISDIGIT (str[2])))
	    break;
	}
      /* Fall through.  */
    case '#':
    case '&':
    case ',':
    case ')':
    case '/':
    case '[':
    case ']':
      return *str++;
    case '+':
      /* It so happens that a '+' can only appear at the end of an
         operand.  If it appears anywhere else, it must be a unary
         plus on an expression.  */
      if (str[1] == '\0')
	return *str++;
      break;
    case '-':
      /* A '-' can only appear in -(ar), rn-rn, or ar@@-.  If it
         appears anywhere else, it must be a unary minus on an
         expression.  */
      if (str[1] == '\0')
	return *str++;
      s = str + 1;
      if (*s == '(')
	++s;
      if (m68k_reg_parse (&s) != 0)
	return *str++;
      break;
    case '(':
      /* A '(' can only appear in `(reg)', `(expr,...', `([', `@@(', or
         `)('.  If it appears anywhere else, it must be starting an
         expression.  */
      if (str[1] == '['
	  || (str > strorig
	      && (str[-1] == '@@'
		  || str[-1] == ')')))
	return *str++;
      s = str + 1;
      if (m68k_reg_parse (&s) != 0)
	return *str++;
      /* Check for the case of '(expr,...' by scanning ahead.  If we
         find a comma outside of balanced parentheses, we return '('.
         If we find an unbalanced right parenthesis, then presumably
         the '(' really starts an expression.  */
      parens = 0;
      for (s = str + 1; *s != '\0'; s++)
	{
	  if (*s == '(')
	    ++parens;
	  else if (*s == ')')
	    {
	      if (parens == 0)
		break;
	      --parens;
	    }
	  else if (*s == ',' && parens == 0)
	    {
	      /* A comma can not normally appear in an expression, so
		 this is a case of '(expr,...'.  */
	      return *str++;
	    }
	}
    }

  /* See if it's a register.  */

  reg = m68k_reg_parse (&str);
  if (reg != 0)
    {
      int ret;

      yylval.reg = reg;

      if (reg >= DATA0 && reg <= DATA7)
	ret = DR;
      else if (reg >= ADDR0 && reg <= ADDR7)
	ret = AR;
      else if (reg >= FP0 && reg <= FP7)
	return FPR;
      else if (reg == FPI
	       || reg == FPS
	       || reg == FPC)
	return FPCR;
      else if (reg == PC)
	return LPC;
      else if (reg >= ZDATA0 && reg <= ZDATA7)
	ret = ZDR;
      else if (reg >= ZADDR0 && reg <= ZADDR7)
	ret = ZAR;
      else if (reg == ZPC)
	return LZPC;
      else
	return CREG;

      /* If we get here, we have a data or address register.  We
	 must check for a size or scale; if we find one, we must
	 return INDEXREG.  */

      s = str;

      if (*s != '.' && *s != ':' && *s != '*')
	return ret;

      yylval.indexreg.reg = reg;

      if (*s != '.' && *s != ':')
	yylval.indexreg.size = SIZE_UNSPEC;
      else
	{
	  ++s;
	  switch (*s)
	    {
	    case 'w':
	    case 'W':
	      yylval.indexreg.size = SIZE_WORD;
	      ++s;
	      break;
	    case 'l':
	    case 'L':
	      yylval.indexreg.size = SIZE_LONG;
	      ++s;
	      break;
	    default:
	      yyerror (_("illegal size specification"));
	      yylval.indexreg.size = SIZE_UNSPEC;
	      break;
	    }
	}

      yylval.indexreg.scale = 1;

      if (*s == '*' || *s == ':')
	{
	  expressionS scale;

	  ++s;

	  hold = input_line_pointer;
	  input_line_pointer = s;
	  expression (&scale);
	  s = input_line_pointer;
	  input_line_pointer = hold;

	  if (scale.X_op != O_constant)
	    yyerror (_("scale specification must resolve to a number"));
	  else
	    {
	      switch (scale.X_add_number)
		{
		case 1:
		case 2:
		case 4:
		case 8:
		  yylval.indexreg.scale = scale.X_add_number;
		  break;
		default:
		  yyerror (_("invalid scale value"));
		  break;
		}
	    }
	}

      str = s;

      return INDEXREG;
    }

  /* It must be an expression.  Before we call expression, we need to
     look ahead to see if there is a size specification.  We must do
     that first, because otherwise foo.l will be treated as the symbol
     foo.l, rather than as the symbol foo with a long size
     specification.  The grammar requires that all expressions end at
     the end of the operand, or with ',', '(', ']', ')'.  */

  parens = 0;
  for (s = str; *s != '\0'; s++)
    {
      if (*s == '(')
	{
	  if (parens == 0
	      && s > str
	      && (s[-1] == ')' || ISALNUM (s[-1])))
	    break;
	  ++parens;
	}
      else if (*s == ')')
	{
	  if (parens == 0)
	    break;
	  --parens;
	}
      else if (parens == 0
	       && (*s == ',' || *s == ']'))
	break;
    }

  yylval.exp.size = SIZE_UNSPEC;
  if (s <= str + 2
      || (s[-2] != '.' && s[-2] != ':'))
    tail = 0;
  else
    {
      switch (s[-1])
	{
	case 's':
	case 'S':
	case 'b':
	case 'B':
	  yylval.exp.size = SIZE_BYTE;
	  break;
	case 'w':
	case 'W':
	  yylval.exp.size = SIZE_WORD;
	  break;
	case 'l':
	case 'L':
	  yylval.exp.size = SIZE_LONG;
	  break;
	default:
	  break;
	}
      if (yylval.exp.size != SIZE_UNSPEC)
	tail = 2;
    }

#ifdef OBJ_ELF
  {
    /* Look for @@PLTPC, etc.  */
    char *cp;

    yylval.exp.pic_reloc = pic_none;
    cp = s - tail;
    if (cp - 6 > str && cp[-6] == '@@')
      {
	if (strncmp (cp - 6, "@@PLTPC", 6) == 0)
	  {
	    yylval.exp.pic_reloc = pic_plt_pcrel;
	    tail += 6;
	  }
	else if (strncmp (cp - 6, "@@GOTPC", 6) == 0)
	  {
	    yylval.exp.pic_reloc = pic_got_pcrel;
	    tail += 6;
	  }
      }
    else if (cp - 4 > str && cp[-4] == '@@')
      {
	if (strncmp (cp - 4, "@@PLT", 4) == 0)
	  {
	    yylval.exp.pic_reloc = pic_plt_off;
	    tail += 4;
	  }
	else if (strncmp (cp - 4, "@@GOT", 4) == 0)
	  {
	    yylval.exp.pic_reloc = pic_got_off;
	    tail += 4;
	  }
      }
  }
#endif

  if (tail != 0)
    {
      c = s[-tail];
      s[-tail] = 0;
    }

  hold = input_line_pointer;
  input_line_pointer = str;
  expression (&yylval.exp.exp);
  str = input_line_pointer;
  input_line_pointer = hold;

  if (tail != 0)
    {
      s[-tail] = c;
      str = s;
    }

  return EXPR;
}

/* Parse an m68k operand.  This is the only function which is called
   from outside this file.  */

int
m68k_ip_op (s, oparg)
     char *s;
     struct m68k_op *oparg;
{
  memset (oparg, 0, sizeof *oparg);
  oparg->error = NULL;
  oparg->index.reg = ZDATA0;
  oparg->index.scale = 1;
  oparg->disp.exp.X_op = O_absent;
  oparg->odisp.exp.X_op = O_absent;

  str = strorig = s;
  op = oparg;

  return yyparse ();
}

/* The error handler.  */

static void
yyerror (s)
     const char *s;
{
  op->error = s;
}
@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d27 1
a27 1
   etc), as well as gratuitiously global symbol names If other parser
@


1.4
log
@resolve conflicts.
@
text
@d1 2
a2 3

/*  A Bison parser, made from m68k-parse.y
    by GNU Bison version 1.28  */
d6 11
a16 11
#define	DR	257
#define	AR	258
#define	FPR	259
#define	FPCR	260
#define	LPC	261
#define	ZAR	262
#define	ZDR	263
#define	LZPC	264
#define	CREG	265
#define	INDEXREG	266
#define	EXPR	267
d24 1
d85 2
a86 1
#line 93 "m68k-parse.y"
d94 3
a96 6
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
d98 2
d108 1
d111 30
a140 28
static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    14,     2,     2,    15,     2,    16,
    17,     2,    18,    20,    19,     2,    24,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    23,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    21,     2,    22,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13
d143 12
a154 11
#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    21,    24,    26,    30,    35,    40,    46,    52,    57,    61,
    65,    69,    77,    85,    92,    98,   105,   111,   118,   124,
   130,   135,   145,   153,   162,   169,   180,   189,   200,   209,
   218,   221,   225,   229,   235,   242,   253,   263,   274,   276,
   278,   280,   282,   284,   286,   288,   290,   292,   294,   296,
   298,   300,   302,   303,   305,   307,   309,   310,   313,   314,
   317,   318,   321,   323,   327,   331,   333,   335,   339,   343,
   347,   349,   351,   353
d156 38
a193 38

static const short yyrhs[] = {    26,
     0,    27,     0,    28,     0,     3,     0,     4,     0,     5,
     0,     6,     0,    11,     0,    13,     0,    14,    13,     0,
    15,    13,     0,    40,     0,    16,     4,    17,     0,    16,
     4,    17,    18,     0,    19,    16,     4,    17,     0,    16,
    13,    20,    34,    17,     0,    16,    34,    20,    13,    17,
     0,    13,    16,    34,    17,     0,    16,     7,    17,     0,
    16,     8,    17,     0,    16,    10,    17,     0,    16,    13,
    20,    34,    20,    29,    17,     0,    16,    13,    20,    34,
    20,    36,    17,     0,    16,    13,    20,    30,    37,    17,
     0,    16,    30,    20,    13,    17,     0,    13,    16,    34,
    20,    29,    17,     0,    16,    34,    20,    29,    17,     0,
    13,    16,    34,    20,    36,    17,     0,    16,    34,    20,
    36,    17,     0,    13,    16,    30,    37,    17,     0,    16,
    30,    37,    17,     0,    16,    21,    13,    37,    22,    20,
    29,    38,    17,     0,    16,    21,    13,    37,    22,    38,
    17,     0,    16,    21,    34,    22,    20,    29,    38,    17,
     0,    16,    21,    34,    22,    38,    17,     0,    16,    21,
    13,    20,    34,    20,    29,    22,    38,    17,     0,    16,
    21,    34,    20,    29,    22,    38,    17,     0,    16,    21,
    13,    20,    34,    20,    36,    22,    38,    17,     0,    16,
    21,    34,    20,    36,    22,    38,    17,     0,    16,    21,
    39,    30,    37,    22,    38,    17,     0,    35,    23,     0,
    35,    23,    18,     0,    35,    23,    19,     0,    35,    23,
    16,    13,    17,     0,    35,    23,    16,    39,    29,    17,
     0,    35,    23,    16,    13,    17,    23,    16,    39,    29,
    17,     0,    35,    23,    16,    13,    17,    23,    16,    13,
    17,     0,    35,    23,    16,    39,    29,    17,    23,    16,
    13,    17,     0,    12,     0,    31,     0,    12,     0,    32,
     0,    32,     0,     4,     0,     8,     0,     3,     0,     9,
     0,     4,     0,     7,     0,    33,     0,    10,     0,     8,
     0,     0,    34,     0,     7,     0,    10,     0,     0,    20,
    34,     0,     0,    20,    13,     0,     0,    13,    20,     0,
    42,     0,    42,    24,    41,     0,    43,    24,    41,     0,
    43,     0,    42,     0,    42,    24,    41,     0,    43,    24,
    41,     0,    43,    19,    43,     0,     3,     0,     4,     0,
     5,     0,     6,     0
d198 13
a210 11
#if YYDEBUG != 0
static const short yyrline[] = { 0,
   116,   118,   119,   124,   130,   135,   140,   145,   150,   155,
   160,   165,   177,   183,   188,   193,   203,   213,   223,   228,
   233,   238,   245,   256,   263,   269,   276,   282,   293,   303,
   310,   316,   324,   331,   338,   344,   352,   359,   371,   382,
   394,   403,   411,   419,   429,   436,   444,   451,   464,   466,
   478,   480,   491,   493,   494,   499,   501,   506,   508,   514,
   516,   517,   522,   527,   532,   534,   539,   544,   552,   558,
   566,   572,   580,   582,   586,   597,   602,   603,   607,   613,
   623,   628,   632,   636
d215 1
a215 1
#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
d217 9
a225 6
static const char * const yytname[] = {   "$","error","$undefined.","DR","AR",
"FPR","FPCR","LPC","ZAR","ZDR","LZPC","CREG","INDEXREG","EXPR","'#'","'&'","'('",
"')'","'+'","'-'","','","'['","']'","'@@'","'/'","operand","generic_operand",
"motorola_operand","mit_operand","zireg","zdireg","zadr","zdr","apc","zapc",
"optzapc","zpc","optczapc","optcexpr","optexprc","reglist","ireglist","reglistpair",
"reglistreg", NULL
d229 12
a240 10
static const short yyr1[] = {     0,
    25,    25,    25,    26,    26,    26,    26,    26,    26,    26,
    26,    26,    27,    27,    27,    27,    27,    27,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    28,    28,    28,    28,    28,    28,    28,    28,    29,    29,
    30,    30,    31,    31,    31,    32,    32,    33,    33,    34,
    34,    34,    35,    35,    36,    36,    37,    37,    38,    38,
    39,    39,    40,    40,    40,    41,    41,    41,    41,    42,
    43,    43,    43,    43
d243 12
a254 10
static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     2,     1,     3,     4,     4,     5,     5,     4,     3,     3,
     3,     7,     7,     6,     5,     6,     5,     6,     5,     5,
     4,     9,     7,     8,     6,    10,     8,    10,     8,     8,
     2,     3,     3,     5,     6,    10,     9,    10,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     1,     1,     1,     0,     2,     0,     2,
     0,     2,     1,     3,     3,     1,     1,     3,     3,     3,
     1,     1,     1,     1
d257 23
a279 19
static const short yydefact[] = {    63,
    81,    82,    83,    84,    59,    62,    61,     8,     9,     0,
     0,     0,     0,     1,     2,     3,    60,    64,     0,    12,
    73,     0,     0,    10,    11,    56,    58,    59,    62,    57,
    61,    51,     0,    71,    67,    52,     0,     0,    41,     0,
     0,     0,    58,    67,     0,    13,    19,    20,    21,     0,
    67,     0,     0,     0,     0,     0,     0,    71,    42,    43,
    81,    82,    83,    84,    74,    77,    76,    80,    75,     0,
     0,    18,     0,    14,    67,     0,    72,     0,     0,    69,
    67,     0,    68,    31,    54,    65,    55,    66,    49,     0,
     0,    50,    53,     0,    15,     0,     0,     0,     0,    30,
     0,     0,     0,    16,     0,    68,    69,     0,     0,     0,
     0,     0,    25,    17,    27,    29,    44,    72,     0,    78,
    79,    26,    28,    24,     0,     0,     0,     0,     0,    69,
    69,    70,    69,    35,    69,     0,    45,    22,    23,     0,
     0,    69,    33,     0,     0,     0,     0,     0,    71,     0,
    69,    69,     0,    37,    39,    34,    40,     0,     0,     0,
     0,     0,    32,    47,     0,     0,    36,    38,    46,    48,
     0,     0,     0
d282 4
a285 3
static const short yydefgoto[] = {   171,
    14,    15,    16,    91,    35,    92,    93,    17,    83,    19,
    94,    55,   111,    53,    20,    65,    66,    67
d288 20
a307 19
static const short yypact[] = {    89,
    10,    11,    19,    23,-32768,-32768,-32768,-32768,    13,    -4,
    22,    57,    36,-32768,-32768,-32768,-32768,-32768,    18,-32768,
    33,    -2,   114,-32768,-32768,-32768,    46,    62,    66,-32768,
    67,-32768,    68,   131,    69,-32768,    70,   105,   147,   156,
   156,   156,-32768,    94,    25,   101,-32768,-32768,-32768,   114,
   100,    53,     9,   138,   108,   103,   112,   117,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   119,    12,-32768,-32768,    64,
   130,-32768,   124,-32768,    94,    81,    64,   135,   124,   132,
    94,   150,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   151,
   152,-32768,-32768,   153,-32768,   120,   146,   156,   156,-32768,
   154,   155,   157,-32768,   124,   144,   158,   159,   160,    73,
   162,   161,-32768,-32768,-32768,-32768,   163,-32768,   167,-32768,
-32768,-32768,-32768,-32768,   168,   170,   124,    73,   171,   169,
   169,-32768,   169,-32768,   169,   164,   172,-32768,-32768,   174,
   175,   169,-32768,   177,   176,   181,   182,   183,   178,   185,
   169,   169,   186,-32768,-32768,-32768,-32768,   136,   146,   179,
   187,   188,-32768,-32768,   189,   190,-32768,-32768,-32768,-32768,
   173,   194,-32768
d310 4
a313 3
static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   -72,     1,-32768,    -7,-32768,     3,-32768,
   -65,   -31,  -103,   -58,-32768,   -40,   202,     6
d320 23
a342 22
static const short yytable[] = {    97,
   101,    69,    18,   129,    36,    22,   108,   102,    24,    -4,
    -5,    26,    71,   109,    37,    36,    41,    30,    -6,    78,
    32,    42,    -7,    44,   119,    45,   145,   146,    23,   147,
    41,   148,   125,   -58,    25,    99,    52,   133,   153,   126,
    39,    72,    36,   103,    73,    36,    68,   161,   162,   112,
    75,    38,    76,    81,   140,   142,    40,   120,   121,    26,
    27,   141,    46,    28,    29,    30,    31,    43,    32,    33,
     5,     6,    79,     7,    80,    26,    85,    34,    47,   106,
    87,    30,    48,    49,    89,   132,   165,    50,    54,    56,
   159,     1,     2,     3,     4,     5,     6,   104,     7,     8,
   105,     9,    10,    11,    12,    26,    85,    13,    57,    86,
    87,    30,    88,    70,    89,    90,    26,    43,    74,    77,
     5,     6,    30,     7,    84,    32,    26,    85,    95,    96,
    86,    87,    30,    88,    43,    89,   117,     5,     6,   118,
     7,    43,    98,    51,     5,     6,   100,     7,    26,    85,
    82,   110,   164,    87,    30,   118,   107,    89,    61,    62,
    63,    64,    58,   127,    59,    60,   113,   114,   115,   116,
   122,   123,   172,   124,     0,     0,     0,   128,   134,   149,
   130,   131,   135,   137,   138,   136,   139,   143,   144,   132,
   158,   166,   154,   173,   150,   151,   152,   155,   156,   157,
   160,    21,   163,   167,   168,   169,   170
d345 23
a367 22
static const short yycheck[] = {    58,
    73,    42,     0,   107,    12,     0,    79,    73,    13,     0,
     0,     3,    44,    79,    12,    23,    19,     9,     0,    51,
    12,    24,     0,    23,    97,    23,   130,   131,    16,   133,
    19,   135,   105,    23,    13,    24,    34,   110,   142,   105,
    23,    17,    50,    75,    20,    53,    41,   151,   152,    81,
    50,    16,    50,    53,   127,   128,    24,    98,    99,     3,
     4,   127,    17,     7,     8,     9,    10,     4,    12,    13,
     7,     8,    20,    10,    22,     3,     4,    21,    17,    77,
     8,     9,    17,    17,    12,    13,   159,    20,    20,    20,
   149,     3,     4,     5,     6,     7,     8,    17,    10,    11,
    20,    13,    14,    15,    16,     3,     4,    19,     4,     7,
     8,     9,    10,    20,    12,    13,     3,     4,    18,    20,
     7,     8,     9,    10,    17,    12,     3,     4,    17,    13,
     7,     8,     9,    10,     4,    12,    17,     7,     8,    20,
    10,     4,    24,    13,     7,     8,    17,    10,     3,     4,
    13,    20,    17,     8,     9,    20,    22,    12,     3,     4,
     5,     6,    16,    20,    18,    19,    17,    17,    17,    17,
    17,    17,     0,    17,    -1,    -1,    -1,    20,    17,    16,
    22,    22,    22,    17,    17,    23,    17,    17,    20,    13,
    13,    13,    17,     0,    23,    22,    22,    17,    17,    17,
    16,     0,    17,    17,    17,    17,    17
d370 1
a370 2
#line 3 "/usr/share/bison/bison.simple"
/* This file comes from bison-1.28.  */
d373 3
a375 1
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
d397 60
a456 46
/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */
d458 63
a520 4
#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
a522 4
/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

d530 2
a531 3
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
d535 1
a535 1
#define YYBACKUP(token, value) \
d538 3
a540 1
    { yychar = (token), yylval = (value);			\
d546 4
a549 1
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
a554 23
#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE
d556 2
a557 3
int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/
d559 8
a566 3
#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
a568 2
int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */
d570 40
a609 7
#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
d611 1
d613 1
a613 1
#define YYINITDEPTH 200
d616 6
a621 2
/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */
d624 1
a624 1
#undef YYMAXDEPTH
d628 1
a628 1
#define YYMAXDEPTH 10000
d631 16
a646 21
/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;
d648 4
a651 2
  while (i-- > 0)
    *t++ = *f++;
d653 2
d656 17
a672 1
#else /* __cplusplus */
d674 2
a675 8
/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;
d677 1
a677 2
  while (i-- > 0)
    *t++ = *f++;
d679 2
a680 2

#endif
d683 2
a684 1
#line 217 "/usr/share/bison/bison.simple"
d693 11
a703 11
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */
d707 1
a707 1
#ifdef YYPARSE_PARAM
d709 1
a709 1
#else
d711 1
d713 23
d738 7
d746 1
a746 1
yyparse(YYPARSE_PARAM_ARG)
d749 5
d756 17
d774 4
a778 8
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
d780 3
a782 2
#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
d785 1
d787 2
a788 1
#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
d790 1
a790 1
#define YYPOPSTACK   (yyvsp--, yyssp--)
d793 2
a794 2
  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;
d796 5
a800 7
#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
d803 2
a804 4
  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

d807 1
a807 4
#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif
d819 1
a819 1
  yyssp = yyss - 1;
d821 1
a821 1
#ifdef YYLSP_NEEDED
d824 1
d826 8
a833 4
/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:
d835 2
a836 1
  *++yyssp = yystate;
a839 8
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

d841 1
a841 1
      int size = yyssp - yyss + 1;
d844 28
a871 21
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
d873 3
d878 1
a878 12
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
d882 17
a898 14
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
d901 4
a904 4
      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
d907 2
a908 4
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif
d914 1
a914 4
#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif
d917 6
a922 1
 yybackup:
d941 1
a941 4
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
d952 1
a952 4
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
d956 1
a956 1
      yychar1 = YYTRANSLATE(yychar);
d958 3
a960 1
#if YYDEBUG != 0
d963 5
a967 4
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
d969 2
a970 2
#endif
	  fprintf (stderr, ")\n");
d1002 2
a1003 5

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif
d1010 1
a1010 1
#ifdef YYLSP_NEEDED
d1014 4
a1017 2
  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;
d1022 4
a1025 1
/* Do the default action for the current state.  */
a1026 1

d1030 2
d1033 3
a1035 1
/* Do a reduction.  yyn is the number of a rule to reduce with.  */
d1037 1
a1038 2
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */
d1040 20
a1059 1
#if YYDEBUG != 0
d1062 1
a1062 1
      int i;
d1064 2
a1065 2
      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);
d1068 3
a1070 3
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
a1073 1

d1077 1
a1077 1
#line 126 "m68k-parse.y"
d1081 2
a1082 2
		;
    break;}
d1084 1
a1084 1
#line 131 "m68k-parse.y"
d1088 2
a1089 2
		;
    break;}
d1091 1
a1091 1
#line 136 "m68k-parse.y"
d1095 2
a1096 2
		;
    break;}
d1098 1
a1098 1
#line 141 "m68k-parse.y"
d1102 2
a1103 2
		;
    break;}
d1105 1
a1105 1
#line 146 "m68k-parse.y"
d1109 2
a1110 2
		;
    break;}
d1112 1
a1112 1
#line 151 "m68k-parse.y"
d1116 2
a1117 2
		;
    break;}
d1119 1
a1119 1
#line 156 "m68k-parse.y"
d1123 2
a1124 2
		;
    break;}
d1126 1
a1126 1
#line 161 "m68k-parse.y"
d1130 2
a1131 2
		;
    break;}
d1133 1
a1133 1
#line 166 "m68k-parse.y"
d1137 2
a1138 2
		;
    break;}
d1140 1
a1140 1
#line 179 "m68k-parse.y"
d1144 2
a1145 2
		;
    break;}
d1147 1
a1147 1
#line 184 "m68k-parse.y"
d1151 2
a1152 2
		;
    break;}
d1154 1
a1154 1
#line 189 "m68k-parse.y"
d1158 2
a1159 2
		;
    break;}
d1161 1
a1161 1
#line 194 "m68k-parse.y"
d1170 2
a1171 2
		;
    break;}
d1173 1
a1173 1
#line 204 "m68k-parse.y"
d1182 2
a1183 2
		;
    break;}
d1185 1
a1185 1
#line 214 "m68k-parse.y"
d1194 2
a1195 2
		;
    break;}
d1197 1
a1197 1
#line 224 "m68k-parse.y"
d1201 2
a1202 2
		;
    break;}
d1204 1
a1204 1
#line 229 "m68k-parse.y"
d1208 2
a1209 2
		;
    break;}
d1211 1
a1211 1
#line 234 "m68k-parse.y"
d1215 2
a1216 2
		;
    break;}
d1218 1
a1218 1
#line 239 "m68k-parse.y"
d1224 2
a1225 2
		;
    break;}
d1227 1
a1227 1
#line 246 "m68k-parse.y"
d1237 2
a1238 2
		;
    break;}
d1240 1
a1240 1
#line 257 "m68k-parse.y"
d1246 2
a1247 2
		;
    break;}
d1249 1
a1249 1
#line 264 "m68k-parse.y"
d1254 2
a1255 2
		;
    break;}
d1257 1
a1257 1
#line 270 "m68k-parse.y"
d1263 2
a1264 2
		;
    break;}
d1266 1
a1266 1
#line 277 "m68k-parse.y"
d1271 2
a1272 2
		;
    break;}
d1274 1
a1274 1
#line 283 "m68k-parse.y"
d1284 2
a1285 2
		;
    break;}
d1287 1
a1287 1
#line 294 "m68k-parse.y"
d1296 2
a1297 2
		;
    break;}
d1299 1
a1299 1
#line 304 "m68k-parse.y"
d1305 2
a1306 2
		;
    break;}
d1308 1
a1308 1
#line 311 "m68k-parse.y"
d1313 2
a1314 2
		;
    break;}
d1316 1
a1316 1
#line 317 "m68k-parse.y"
d1323 2
a1324 2
		;
    break;}
d1326 1
a1326 1
#line 325 "m68k-parse.y"
d1332 2
a1333 2
		;
    break;}
d1335 1
a1335 1
#line 332 "m68k-parse.y"
d1341 2
a1342 2
		;
    break;}
d1344 1
a1344 1
#line 339 "m68k-parse.y"
d1349 2
a1350 2
		;
    break;}
d1352 1
a1352 1
#line 345 "m68k-parse.y"
d1359 2
a1360 2
		;
    break;}
d1362 1
a1362 1
#line 353 "m68k-parse.y"
d1368 2
a1369 2
		;
    break;}
d1371 1
a1371 1
#line 360 "m68k-parse.y"
d1382 2
a1383 2
		;
    break;}
d1385 1
a1385 1
#line 372 "m68k-parse.y"
d1395 2
a1396 2
		;
    break;}
d1398 1
a1398 1
#line 383 "m68k-parse.y"
d1405 2
a1406 2
		;
    break;}
d1408 1
a1408 1
#line 396 "m68k-parse.y"
d1415 2
a1416 2
		;
    break;}
d1418 1
a1418 1
#line 404 "m68k-parse.y"
d1425 2
a1426 2
		;
    break;}
d1428 1
a1428 1
#line 412 "m68k-parse.y"
d1435 2
a1436 2
		;
    break;}
d1438 1
a1438 1
#line 420 "m68k-parse.y"
d1447 2
a1448 2
		;
    break;}
d1450 1
a1450 1
#line 430 "m68k-parse.y"
d1456 2
a1457 2
		;
    break;}
d1459 1
a1459 1
#line 437 "m68k-parse.y"
d1466 2
a1467 2
		;
    break;}
d1469 1
a1469 1
#line 445 "m68k-parse.y"
d1475 2
a1476 2
		;
    break;}
d1478 1
a1478 1
#line 452 "m68k-parse.y"
d1485 2
a1486 2
		;
    break;}
d1488 1
a1488 1
#line 467 "m68k-parse.y"
d1493 2
a1494 2
		;
    break;}
d1496 1
a1496 1
#line 481 "m68k-parse.y"
d1501 2
a1502 2
		;
    break;}
d1504 1
a1504 1
#line 524 "m68k-parse.y"
d1507 2
a1508 2
		;
    break;}
d1510 1
a1510 1
#line 541 "m68k-parse.y"
d1513 2
a1514 2
		;
    break;}
d1516 1
a1516 1
#line 545 "m68k-parse.y"
d1519 2
a1520 2
		;
    break;}
d1522 1
a1522 1
#line 554 "m68k-parse.y"
d1526 2
a1527 2
		;
    break;}
d1529 1
a1529 1
#line 559 "m68k-parse.y"
d1532 2
a1533 2
		;
    break;}
d1535 1
a1535 1
#line 568 "m68k-parse.y"
d1539 2
a1540 2
		;
    break;}
d1542 1
a1542 1
#line 573 "m68k-parse.y"
d1545 2
a1546 2
		;
    break;}
d1548 1
a1548 1
#line 583 "m68k-parse.y"
d1551 2
a1552 2
		;
    break;}
d1554 1
a1554 1
#line 587 "m68k-parse.y"
d1557 2
a1558 2
		;
    break;}
d1560 1
a1560 1
#line 599 "m68k-parse.y"
d1563 2
a1564 2
		;
    break;}
d1566 1
a1566 1
#line 604 "m68k-parse.y"
d1569 2
a1570 2
		;
    break;}
d1572 1
a1572 1
#line 608 "m68k-parse.y"
d1575 2
a1576 2
		;
    break;}
d1578 1
a1578 1
#line 615 "m68k-parse.y"
d1584 2
a1585 2
		;
    break;}
d1587 1
a1587 1
#line 625 "m68k-parse.y"
d1590 2
a1591 2
		;
    break;}
d1593 1
a1593 1
#line 629 "m68k-parse.y"
d1596 2
a1597 2
		;
    break;}
d1599 1
a1599 1
#line 633 "m68k-parse.y"
d1602 2
a1603 2
		;
    break;}
d1605 1
a1605 1
#line 637 "m68k-parse.y"
d1613 2
a1614 2
		;
    break;}
d1616 3
a1618 2
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison/bison.simple"
d1622 1
a1622 1
#ifdef YYLSP_NEEDED
d1626 1
a1626 1
#if YYDEBUG != 0
d1629 5
a1633 5
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
d1638 2
a1639 16

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
d1642 3
a1644 4
  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */
a1655 1
yyerrlab:   /* here on detecting error */
d1657 6
a1662 2
  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
d1671 15
a1685 12
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
d1687 2
a1688 1
	      strcpy(msg, "parse error");
d1690 1
a1690 1
	      if (count < 5)
d1692 5
a1696 4
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
d1698 4
a1701 4
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
d1704 2
a1705 2
	      yyerror(msg);
	      free(msg);
d1708 1
a1708 1
	    yyerror ("parse error; also virtual memory exceeded");
d1711 2
a1712 2
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
d1714 1
a1715 2
  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */
d1717 4
d1723 2
a1724 1
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
d1729 2
a1730 6

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

d1734 2
a1735 2
  /* Else will try to reuse lookahead token
     after shifting the error token.  */
a1740 1
yyerrdefault:  /* current state does not do anything special for the error token. */
d1742 5
d1750 5
a1754 2
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
a1756 1
yyerrpop:   /* pop the current state because it cannot handle the error token */
d1758 7
a1764 1
  if (yyssp == yyss) YYABORT;
d1767 1
a1767 1
#ifdef YYLSP_NEEDED
d1771 1
a1771 1
#if YYDEBUG != 0
d1774 5
a1778 5
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
d1782 3
a1785 1

d1808 1
a1808 4
#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif
d1811 1
a1811 1
#ifdef YYLSP_NEEDED
a1817 11
 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;
d1819 26
a1844 8
 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
d1846 1
a1846 2
    }
  return 1;
d1848 1
a1848 1
#line 647 "m68k-parse.y"
d1948 1
a1948 1
	  if (isdigit (str[1])
d1950 1
a1950 1
		  && isdigit (str[2])))
d2134 1
a2134 1
	      && (s[-1] == ')' || isalnum ((unsigned char) s[-1])))
@


1.3
log
@Resolve other problems that dumb cvs can't find out by itself.

(trivial part done, `interesting' patches remain)
@
text
@d348 1
a348 1
#line 3 "/usr/share/misc/bison.simple"
d562 1
a562 1
#line 217 "/usr/share/misc/bison.simple"
d1431 1
a1431 1
#line 543 "/usr/share/misc/bison.simple"
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d2 2
a3 2
/*  A Bison parser, made from ./config/m68k-parse.y with Bison version GNU Bison version 1.24
  */
d7 11
a17 11
#define	DR	258
#define	AR	259
#define	FPR	260
#define	FPCR	261
#define	LPC	262
#define	ZAR	263
#define	ZDR	264
#define	LZPC	265
#define	CREG	266
#define	INDEXREG	267
#define	EXPR	268
d19 1
a19 1
#line 27 "./config/m68k-parse.y"
d78 1
a78 1
static int yylex PARAMS (());
d85 1
a85 1
#line 93 "./config/m68k-parse.y"
a93 17

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

d104 1
a104 1
#define	YYFINAL		168
d108 1
a108 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 268 ? yytranslate[x] : 44)
d136 2
a137 2
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13
d143 8
a150 8
    21,    24,    26,    30,    35,    40,    46,    51,    55,    59,
    63,    71,    79,    86,    93,    99,   106,   112,   118,   123,
   133,   141,   150,   157,   168,   177,   188,   197,   206,   209,
   213,   217,   223,   230,   241,   251,   262,   264,   266,   268,
   270,   272,   274,   276,   278,   280,   282,   284,   286,   288,
   290,   291,   293,   295,   297,   298,   301,   302,   305,   306,
   309,   311,   315,   319,   321,   323,   327,   331,   335,   337,
   339,   341
d158 28
a185 28
    13,    20,    34,    17,     0,    13,    16,    34,    17,     0,
    16,     7,    17,     0,    16,     8,    17,     0,    16,    10,
    17,     0,    16,    13,    20,    34,    20,    29,    17,     0,
    16,    13,    20,    34,    20,    36,    17,     0,    16,    13,
    20,    30,    37,    17,     0,    13,    16,    34,    20,    29,
    17,     0,    16,    34,    20,    29,    17,     0,    13,    16,
    34,    20,    36,    17,     0,    16,    34,    20,    36,    17,
     0,    13,    16,    30,    37,    17,     0,    16,    30,    37,
    17,     0,    16,    21,    13,    37,    22,    20,    29,    38,
    17,     0,    16,    21,    13,    37,    22,    38,    17,     0,
    16,    21,    34,    22,    20,    29,    38,    17,     0,    16,
    21,    34,    22,    38,    17,     0,    16,    21,    13,    20,
    34,    20,    29,    22,    38,    17,     0,    16,    21,    34,
    20,    29,    22,    38,    17,     0,    16,    21,    13,    20,
    34,    20,    36,    22,    38,    17,     0,    16,    21,    34,
    20,    36,    22,    38,    17,     0,    16,    21,    39,    30,
    37,    22,    38,    17,     0,    35,    23,     0,    35,    23,
    18,     0,    35,    23,    19,     0,    35,    23,    16,    13,
    17,     0,    35,    23,    16,    39,    29,    17,     0,    35,
    23,    16,    13,    17,    23,    16,    39,    29,    17,     0,
    35,    23,    16,    13,    17,    23,    16,    13,    17,     0,
    35,    23,    16,    39,    29,    17,    23,    16,    13,    17,
     0,    12,     0,    31,     0,    12,     0,    32,     0,    32,
     0,     4,     0,     8,     0,     3,     0,     9,     0,     4,
     0,     7,     0,    33,     0,    10,     0,     8,     0,     0,
    34,     0,     7,     0,    10,     0,     0,    20,    34,     0,
     0,    20,    13,     0,     0,    13,    20,     0,    42,     0,
    42,    24,    41,     0,    43,    24,    41,     0,    43,     0,
d187 3
a189 2
    43,    19,    43,     0,     3,     0,     4,     0,     5,     0,
     6,     0
d197 8
a204 8
   160,   165,   177,   183,   188,   193,   203,   213,   218,   223,
   228,   235,   246,   253,   260,   266,   277,   287,   294,   300,
   308,   315,   322,   328,   336,   343,   355,   366,   378,   387,
   395,   403,   413,   420,   428,   435,   448,   450,   462,   464,
   475,   477,   478,   483,   485,   490,   492,   498,   500,   501,
   506,   511,   516,   518,   523,   528,   536,   542,   550,   556,
   564,   566,   570,   581,   586,   587,   591,   597,   604,   609,
   613,   617
d206 4
d216 1
a216 1
"reglistreg",""
d224 6
a229 6
    27,    27,    27,    27,    27,    27,    27,    27,    28,    28,
    28,    28,    28,    28,    28,    28,    29,    29,    30,    30,
    31,    31,    31,    32,    32,    33,    33,    34,    34,    34,
    35,    35,    36,    36,    37,    37,    38,    38,    39,    39,
    40,    40,    40,    41,    41,    41,    41,    42,    43,    43,
    43,    43
d234 4
a237 4
     2,     1,     3,     4,     4,     5,     4,     3,     3,     3,
     7,     7,     6,     6,     5,     6,     5,     5,     4,     9,
     7,     8,     6,    10,     8,    10,     8,     8,     2,     3,
     3,     5,     6,    10,     9,    10,     1,     1,     1,     1,
d239 3
a241 3
     0,     1,     1,     1,     0,     2,     0,     2,     0,     2,
     1,     3,     3,     1,     1,     3,     3,     3,     1,     1,
     1,     1
d244 19
a262 18
static const short yydefact[] = {    61,
    79,    80,    81,    82,    57,    60,    59,     8,     9,     0,
     0,     0,     0,     1,     2,     3,    58,    62,     0,    12,
    71,     0,     0,    10,    11,    54,    56,    57,    60,    55,
    59,    49,     0,    69,    65,    50,     0,     0,    39,     0,
     0,     0,    56,    65,     0,    13,    18,    19,    20,     0,
    65,     0,     0,     0,     0,     0,     0,    69,    40,    41,
    79,    80,    81,    82,    72,    75,    74,    78,    73,     0,
    17,     0,    14,    65,     0,    70,     0,     0,    67,    65,
    66,    29,    52,    63,    53,    64,    47,     0,    48,    51,
     0,    15,     0,     0,     0,     0,    28,     0,     0,     0,
    16,     0,    66,    67,     0,     0,     0,     0,     0,    25,
    27,    42,    70,     0,    76,    77,    24,    26,    23,     0,
     0,     0,     0,     0,    67,    67,    68,    67,    33,    67,
     0,    43,    21,    22,     0,     0,    67,    31,     0,     0,
     0,     0,     0,    69,     0,    67,    67,     0,    35,    37,
    32,    38,     0,     0,     0,     0,     0,    30,    45,     0,
     0,    34,    36,    44,    46,     0,     0,     0
d265 3
a267 3
static const short yydefgoto[] = {   166,
    14,    15,    16,    88,    35,    89,    90,    17,    18,    19,
    91,    55,   108,    53,    20,    65,    66,    67
d270 19
a288 18
static const short yypact[] = {    74,
    19,    14,    33,    53,-32768,-32768,-32768,-32768,    45,    57,
    81,    55,    79,-32768,-32768,-32768,-32768,-32768,    83,-32768,
    86,    -2,    95,-32768,-32768,-32768,    94,   104,   119,-32768,
   121,-32768,   113,   112,   120,-32768,   122,   137,   116,   125,
   125,   125,-32768,   120,    -5,   126,-32768,-32768,-32768,    95,
   123,   117,   115,    65,   128,   105,   129,   134,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   124,    36,-32768,-32768,   132,
-32768,   105,-32768,   120,    25,    65,   130,   105,   131,   120,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   133,-32768,-32768,
   136,-32768,    54,    17,   125,   125,-32768,   138,   139,   140,
-32768,   105,   141,   142,   143,   144,    88,   146,   145,-32768,
-32768,   135,-32768,   147,-32768,-32768,-32768,-32768,-32768,   151,
   152,   105,    88,   153,   154,   154,-32768,   154,-32768,   154,
   155,   149,-32768,-32768,   156,   157,   154,-32768,   160,   158,
   159,   163,   164,   169,   161,   154,   154,   166,-32768,-32768,
-32768,-32768,   106,    17,   171,   168,   170,-32768,-32768,   172,
   173,-32768,-32768,-32768,-32768,   186,   188,-32768
d292 2
a293 2
-32768,-32768,-32768,   -71,   -15,-32768,    -7,-32768,   -10,-32768,
   -68,   -33,   -98,   -58,-32768,   -39,   191,     9
d297 1
a297 1
#define	YYLAST		191
d300 22
a321 21
static const short yytable[] = {    94,
    98,    37,    69,    99,    36,   124,   105,    44,    22,   106,
    70,    71,    45,    -5,    72,    36,    41,    77,    -4,    26,
    83,    42,   114,    52,    85,    30,   140,   141,    87,   142,
   120,   143,    -6,   121,    74,   128,   -56,    80,   148,    75,
   100,   101,    36,    81,   102,    36,   109,   156,   157,    68,
   135,   137,    -7,   136,    41,   115,   116,    26,    27,    96,
    23,    28,    29,    30,    31,   103,    32,    33,    43,    24,
   112,     5,     6,   113,     7,    34,     1,     2,     3,     4,
     5,     6,   160,     7,     8,   154,     9,    10,    11,    12,
    26,    83,    13,    25,    38,    85,    30,    26,    43,    87,
   127,     5,     6,    30,     7,    39,    32,    26,    83,    40,
    46,    84,    85,    30,    86,    43,    87,    26,     5,     6,
    47,     7,   159,    30,    51,   113,    32,    61,    62,    63,
    64,    58,    50,    59,    60,    48,    78,    49,    79,    54,
    57,    56,    76,    73,    82,    92,    93,    95,    97,   110,
   107,   104,   111,     0,   117,   118,   119,   131,     0,     0,
   122,   123,   129,   132,   125,   126,   130,   133,   134,   138,
   144,   145,   127,   139,   149,   150,   155,   146,   147,   151,
   152,   153,   158,   161,   162,   167,   163,   168,   164,   165,
    21
d325 21
a345 20
    72,    12,    42,    72,    12,   104,    78,    23,     0,    78,
    44,    17,    23,     0,    20,    23,    19,    51,     0,     3,
     4,    24,    94,    34,     8,     9,   125,   126,    12,   128,
   102,   130,     0,   102,    50,   107,    23,    53,   137,    50,
    74,    17,    50,    54,    20,    53,    80,   146,   147,    41,
   122,   123,     0,   122,    19,    95,    96,     3,     4,    24,
    16,     7,     8,     9,    10,    76,    12,    13,     4,    13,
    17,     7,     8,    20,    10,    21,     3,     4,     5,     6,
     7,     8,   154,    10,    11,   144,    13,    14,    15,    16,
     3,     4,    19,    13,    16,     8,     9,     3,     4,    12,
    13,     7,     8,     9,    10,    23,    12,     3,     4,    24,
    17,     7,     8,     9,    10,     4,    12,     3,     7,     8,
    17,    10,    17,     9,    13,    20,    12,     3,     4,     5,
     6,    16,    20,    18,    19,    17,    20,    17,    22,    20,
     4,    20,    20,    18,    17,    17,    13,    24,    17,    17,
    20,    22,    17,    -1,    17,    17,    17,    23,    -1,    -1,
    20,    20,    17,    17,    22,    22,    22,    17,    17,    17,
    16,    23,    13,    20,    17,    17,    16,    22,    22,    17,
    17,    13,    17,    13,    17,     0,    17,     0,    17,    17,
     0
d348 2
a349 1
#line 3 "/usr/unsupported/share/bison.simple"
d366 2
a367 1
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
d374 9
a382 1
#ifndef alloca
d384 1
d387 2
a388 1
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
d391 6
a396 1
#if defined (MSDOS) && !defined (__TURBOC__)
d398 1
d401 3
a403 1
#include <malloc.h>
d405 7
a411 9
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
d413 1
d416 4
a419 3
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */
d421 5
a425 4
/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */
d435 2
a436 2
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
d517 5
a522 5
/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

d524 1
a524 1
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
d531 2
a532 1
__yy_memcpy (from, to, count)
d534 1
a534 2
     char *to;
     int count;
d549 1
a549 1
__yy_memcpy (char *from, char *to, int count)
d551 1
a552 1
  register char *t = to;
d562 1
a562 1
#line 192 "/usr/unsupported/share/bison.simple"
d571 5
d577 10
d588 2
a589 2
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
d593 1
a593 1
yyparse(YYPARSE_PARAM)
d620 1
d705 8
d718 9
a726 4
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
d728 3
a730 2
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
d891 1
a891 1
#line 126 "./config/m68k-parse.y"
d898 1
a898 1
#line 131 "./config/m68k-parse.y"
d905 1
a905 1
#line 136 "./config/m68k-parse.y"
d912 1
a912 1
#line 141 "./config/m68k-parse.y"
d919 1
a919 1
#line 146 "./config/m68k-parse.y"
d926 1
a926 1
#line 151 "./config/m68k-parse.y"
d933 1
a933 1
#line 156 "./config/m68k-parse.y"
d940 1
a940 1
#line 161 "./config/m68k-parse.y"
d947 1
a947 1
#line 166 "./config/m68k-parse.y"
d954 1
a954 1
#line 179 "./config/m68k-parse.y"
d961 1
a961 1
#line 184 "./config/m68k-parse.y"
d968 1
a968 1
#line 189 "./config/m68k-parse.y"
d975 1
a975 1
#line 194 "./config/m68k-parse.y"
d987 13
a999 1
#line 204 "./config/m68k-parse.y"
d1010 2
a1011 2
case 18:
#line 214 "./config/m68k-parse.y"
d1017 2
a1018 2
case 19:
#line 219 "./config/m68k-parse.y"
d1024 2
a1025 2
case 20:
#line 224 "./config/m68k-parse.y"
d1031 2
a1032 2
case 21:
#line 229 "./config/m68k-parse.y"
d1040 2
a1041 2
case 22:
#line 236 "./config/m68k-parse.y"
d1044 1
a1044 1
		    yyerror ("syntax error");
d1053 2
a1054 2
case 23:
#line 247 "./config/m68k-parse.y"
d1062 10
a1071 2
case 24:
#line 254 "./config/m68k-parse.y"
d1079 2
a1080 2
case 25:
#line 261 "./config/m68k-parse.y"
d1087 2
a1088 2
case 26:
#line 267 "./config/m68k-parse.y"
d1091 1
a1091 1
		    yyerror ("syntax error");
d1100 2
a1101 2
case 27:
#line 278 "./config/m68k-parse.y"
d1104 1
a1104 1
		    yyerror ("syntax error");
d1112 2
a1113 2
case 28:
#line 288 "./config/m68k-parse.y"
d1121 2
a1122 2
case 29:
#line 295 "./config/m68k-parse.y"
d1129 2
a1130 2
case 30:
#line 301 "./config/m68k-parse.y"
d1139 2
a1140 2
case 31:
#line 309 "./config/m68k-parse.y"
d1148 2
a1149 2
case 32:
#line 316 "./config/m68k-parse.y"
d1157 2
a1158 2
case 33:
#line 323 "./config/m68k-parse.y"
d1165 2
a1166 2
case 34:
#line 329 "./config/m68k-parse.y"
d1175 2
a1176 2
case 35:
#line 337 "./config/m68k-parse.y"
d1184 2
a1185 2
case 36:
#line 344 "./config/m68k-parse.y"
d1188 1
a1188 1
		    yyerror ("syntax error");
d1198 2
a1199 2
case 37:
#line 356 "./config/m68k-parse.y"
d1202 1
a1202 1
		    yyerror ("syntax error");
d1211 2
a1212 2
case 38:
#line 367 "./config/m68k-parse.y"
d1221 2
a1222 2
case 39:
#line 380 "./config/m68k-parse.y"
d1226 1
a1226 1
		    yyerror ("syntax error");
d1231 2
a1232 2
case 40:
#line 388 "./config/m68k-parse.y"
d1236 1
a1236 1
		    yyerror ("syntax error");
d1241 2
a1242 2
case 41:
#line 396 "./config/m68k-parse.y"
d1246 1
a1246 1
		    yyerror ("syntax error");
d1251 2
a1252 2
case 42:
#line 404 "./config/m68k-parse.y"
d1263 2
a1264 2
case 43:
#line 414 "./config/m68k-parse.y"
d1272 2
a1273 2
case 44:
#line 421 "./config/m68k-parse.y"
d1282 2
a1283 2
case 45:
#line 429 "./config/m68k-parse.y"
d1291 2
a1292 2
case 46:
#line 436 "./config/m68k-parse.y"
d1301 2
a1302 2
case 48:
#line 451 "./config/m68k-parse.y"
d1309 2
a1310 2
case 50:
#line 465 "./config/m68k-parse.y"
d1317 2
a1318 2
case 61:
#line 508 "./config/m68k-parse.y"
d1323 2
a1324 2
case 65:
#line 525 "./config/m68k-parse.y"
d1329 2
a1330 2
case 66:
#line 529 "./config/m68k-parse.y"
d1335 2
a1336 2
case 67:
#line 538 "./config/m68k-parse.y"
d1342 2
a1343 2
case 68:
#line 543 "./config/m68k-parse.y"
d1348 2
a1349 2
case 69:
#line 552 "./config/m68k-parse.y"
d1355 2
a1356 2
case 70:
#line 557 "./config/m68k-parse.y"
d1361 2
a1362 2
case 72:
#line 567 "./config/m68k-parse.y"
d1367 2
a1368 2
case 73:
#line 571 "./config/m68k-parse.y"
d1373 2
a1374 2
case 74:
#line 583 "./config/m68k-parse.y"
d1379 2
a1380 2
case 76:
#line 588 "./config/m68k-parse.y"
d1385 2
a1386 2
case 77:
#line 592 "./config/m68k-parse.y"
d1391 2
a1392 2
case 78:
#line 599 "./config/m68k-parse.y"
d1394 4
a1397 1
		  yyval.mask = (1 << (yyvsp[0].onereg + 1)) - 1 - ((1 << yyvsp[-2].onereg) - 1);
d1400 2
a1401 2
case 79:
#line 606 "./config/m68k-parse.y"
d1406 2
a1407 2
case 80:
#line 610 "./config/m68k-parse.y"
d1412 2
a1413 2
case 81:
#line 614 "./config/m68k-parse.y"
d1418 2
a1419 2
case 82:
#line 618 "./config/m68k-parse.y"
d1431 1
a1431 1
#line 487 "/usr/unsupported/share/bison.simple"
d1626 24
d1651 1
a1651 1
#line 628 "./config/m68k-parse.y"
d1735 1
d1747 10
a1761 1
    case '@@':
d1879 1
a1879 1
	      yyerror ("illegal size specification");
d1885 3
a1887 3
      if (*s != '*' && *s != ':')
	yylval.indexreg.scale = 1;
      else
d1889 2
d1892 10
a1901 1
	  switch (*s)
d1903 12
a1914 11
	    case '1':
	    case '2':
	    case '4':
	    case '8':
	      yylval.indexreg.scale = *s - '0';
	      ++s;
	      break;
	    default:
	      yyerror ("illegal scale specification");
	      yylval.indexreg.scale = 1;
	      break;
d1955 1
a1955 1
    s = NULL;
a1974 1
	  s = NULL;
d1978 43
a2020 4
	{
	  c = s[-2];
	  s[-2] = '\0';
	}
d2029 1
a2029 1
  if (s != NULL)
d2031 1
a2031 1
      s[-2] = c;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d78 1
a78 1
static int yylex PARAMS ((void));
d121 1
a121 1
#define	YYFINAL		173
d160 8
a167 8
    21,    24,    26,    30,    35,    40,    46,    52,    57,    61,
    65,    69,    77,    85,    92,    98,   105,   111,   118,   124,
   130,   135,   145,   153,   162,   169,   180,   189,   200,   209,
   218,   221,   225,   229,   235,   242,   253,   263,   274,   276,
   278,   280,   282,   284,   286,   288,   290,   292,   294,   296,
   298,   300,   302,   303,   305,   307,   309,   310,   313,   314,
   317,   318,   321,   323,   327,   331,   333,   335,   339,   343,
   347,   349,   351,   353
d175 28
a202 28
    13,    20,    34,    17,     0,    16,    34,    20,    13,    17,
     0,    13,    16,    34,    17,     0,    16,     7,    17,     0,
    16,     8,    17,     0,    16,    10,    17,     0,    16,    13,
    20,    34,    20,    29,    17,     0,    16,    13,    20,    34,
    20,    36,    17,     0,    16,    13,    20,    30,    37,    17,
     0,    16,    30,    20,    13,    17,     0,    13,    16,    34,
    20,    29,    17,     0,    16,    34,    20,    29,    17,     0,
    13,    16,    34,    20,    36,    17,     0,    16,    34,    20,
    36,    17,     0,    13,    16,    30,    37,    17,     0,    16,
    30,    37,    17,     0,    16,    21,    13,    37,    22,    20,
    29,    38,    17,     0,    16,    21,    13,    37,    22,    38,
    17,     0,    16,    21,    34,    22,    20,    29,    38,    17,
     0,    16,    21,    34,    22,    38,    17,     0,    16,    21,
    13,    20,    34,    20,    29,    22,    38,    17,     0,    16,
    21,    34,    20,    29,    22,    38,    17,     0,    16,    21,
    13,    20,    34,    20,    36,    22,    38,    17,     0,    16,
    21,    34,    20,    36,    22,    38,    17,     0,    16,    21,
    39,    30,    37,    22,    38,    17,     0,    35,    23,     0,
    35,    23,    18,     0,    35,    23,    19,     0,    35,    23,
    16,    13,    17,     0,    35,    23,    16,    39,    29,    17,
     0,    35,    23,    16,    13,    17,    23,    16,    39,    29,
    17,     0,    35,    23,    16,    13,    17,    23,    16,    13,
    17,     0,    35,    23,    16,    39,    29,    17,    23,    16,
    13,    17,     0,    12,     0,    31,     0,    12,     0,    32,
     0,    32,     0,     4,     0,     8,     0,     3,     0,     9,
     0,     4,     0,     7,     0,    33,     0,    10,     0,     8,
     0,     0,    34,     0,     7,     0,    10,     0,     0,    20,
    34,     0,     0,    20,    13,     0,     0,    13,    20,     0,
d204 2
a205 3
    43,     0,    42,     0,    42,    24,    41,     0,    43,    24,
    41,     0,    43,    19,    43,     0,     3,     0,     4,     0,
     5,     0,     6,     0
d213 8
a220 8
   160,   165,   177,   183,   188,   193,   203,   213,   223,   228,
   233,   238,   245,   256,   263,   269,   276,   282,   293,   303,
   310,   316,   324,   331,   338,   344,   352,   359,   371,   382,
   394,   403,   411,   419,   429,   436,   444,   451,   464,   466,
   478,   480,   491,   493,   494,   499,   501,   506,   508,   514,
   516,   517,   522,   527,   532,   534,   539,   544,   552,   558,
   566,   572,   580,   582,   586,   597,   602,   603,   607,   613,
   620,   625,   629,   633
d236 6
a241 6
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    28,    28,    28,    28,    28,    28,    28,    28,    29,    29,
    30,    30,    31,    31,    31,    32,    32,    33,    33,    34,
    34,    34,    35,    35,    36,    36,    37,    37,    38,    38,
    39,    39,    40,    40,    40,    41,    41,    41,    41,    42,
    43,    43,    43,    43
d246 4
a249 4
     2,     1,     3,     4,     4,     5,     5,     4,     3,     3,
     3,     7,     7,     6,     5,     6,     5,     6,     5,     5,
     4,     9,     7,     8,     6,    10,     8,    10,     8,     8,
     2,     3,     3,     5,     6,    10,     9,    10,     1,     1,
d251 3
a253 3
     1,     1,     0,     1,     1,     1,     0,     2,     0,     2,
     0,     2,     1,     3,     3,     1,     1,     3,     3,     3,
     1,     1,     1,     1
d256 18
a273 19
static const short yydefact[] = {    63,
    81,    82,    83,    84,    59,    62,    61,     8,     9,     0,
     0,     0,     0,     1,     2,     3,    60,    64,     0,    12,
    73,     0,     0,    10,    11,    56,    58,    59,    62,    57,
    61,    51,     0,    71,    67,    52,     0,     0,    41,     0,
     0,     0,    58,    67,     0,    13,    19,    20,    21,     0,
    67,     0,     0,     0,     0,     0,     0,    71,    42,    43,
    81,    82,    83,    84,    74,    77,    76,    80,    75,     0,
     0,    18,     0,    14,    67,     0,    72,     0,     0,    69,
    67,     0,    68,    31,    54,    65,    55,    66,    49,     0,
     0,    50,    53,     0,    15,     0,     0,     0,     0,    30,
     0,     0,     0,    16,     0,    68,    69,     0,     0,     0,
     0,     0,    25,    17,    27,    29,    44,    72,     0,    78,
    79,    26,    28,    24,     0,     0,     0,     0,     0,    69,
    69,    70,    69,    35,    69,     0,    45,    22,    23,     0,
     0,    69,    33,     0,     0,     0,     0,     0,    71,     0,
    69,    69,     0,    37,    39,    34,    40,     0,     0,     0,
     0,     0,    32,    47,     0,     0,    36,    38,    46,    48,
     0,     0,     0
d276 3
a278 3
static const short yydefgoto[] = {   171,
    14,    15,    16,    91,    35,    92,    93,    17,    83,    19,
    94,    55,   111,    53,    20,    65,    66,    67
d281 18
a298 19
static const short yypact[] = {    89,
    10,    11,    19,    23,-32768,-32768,-32768,-32768,    13,    -4,
    22,    57,    36,-32768,-32768,-32768,-32768,-32768,    18,-32768,
    33,    -2,   114,-32768,-32768,-32768,    46,    62,    66,-32768,
    67,-32768,    68,   131,    69,-32768,    70,   105,   147,   156,
   156,   156,-32768,    94,    25,   101,-32768,-32768,-32768,   114,
   100,    53,     9,   138,   108,   103,   112,   117,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   119,    12,-32768,-32768,    64,
   130,-32768,   124,-32768,    94,    81,    64,   135,   124,   132,
    94,   150,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   151,
   152,-32768,-32768,   153,-32768,   120,   146,   156,   156,-32768,
   154,   155,   157,-32768,   124,   144,   158,   159,   160,    73,
   162,   161,-32768,-32768,-32768,-32768,   163,-32768,   167,-32768,
-32768,-32768,-32768,-32768,   168,   170,   124,    73,   171,   169,
   169,-32768,   169,-32768,   169,   164,   172,-32768,-32768,   174,
   175,   169,-32768,   177,   176,   181,   182,   183,   178,   185,
   169,   169,   186,-32768,-32768,-32768,-32768,   136,   146,   179,
   187,   188,-32768,-32768,   189,   190,-32768,-32768,-32768,-32768,
   173,   194,-32768
d302 2
a303 2
-32768,-32768,-32768,   -72,     1,-32768,    -7,-32768,     3,-32768,
   -65,   -31,  -103,   -58,-32768,   -40,   202,     6
d307 1
a307 1
#define	YYLAST		207
d310 21
a330 22
static const short yytable[] = {    97,
   101,    69,    18,   129,    36,    22,   108,   102,    24,    -4,
    -5,    26,    71,   109,    37,    36,    41,    30,    -6,    78,
    32,    42,    -7,    44,   119,    45,   145,   146,    23,   147,
    41,   148,   125,   -58,    25,    99,    52,   133,   153,   126,
    39,    72,    36,   103,    73,    36,    68,   161,   162,   112,
    75,    38,    76,    81,   140,   142,    40,   120,   121,    26,
    27,   141,    46,    28,    29,    30,    31,    43,    32,    33,
     5,     6,    79,     7,    80,    26,    85,    34,    47,   106,
    87,    30,    48,    49,    89,   132,   165,    50,    54,    56,
   159,     1,     2,     3,     4,     5,     6,   104,     7,     8,
   105,     9,    10,    11,    12,    26,    85,    13,    57,    86,
    87,    30,    88,    70,    89,    90,    26,    43,    74,    77,
     5,     6,    30,     7,    84,    32,    26,    85,    95,    96,
    86,    87,    30,    88,    43,    89,   117,     5,     6,   118,
     7,    43,    98,    51,     5,     6,   100,     7,    26,    85,
    82,   110,   164,    87,    30,   118,   107,    89,    61,    62,
    63,    64,    58,   127,    59,    60,   113,   114,   115,   116,
   122,   123,   172,   124,     0,     0,     0,   128,   134,   149,
   130,   131,   135,   137,   138,   136,   139,   143,   144,   132,
   158,   166,   154,   173,   150,   151,   152,   155,   156,   157,
   160,    21,   163,   167,   168,   169,   170
d334 20
a353 21
    73,    42,     0,   107,    12,     0,    79,    73,    13,     0,
     0,     3,    44,    79,    12,    23,    19,     9,     0,    51,
    12,    24,     0,    23,    97,    23,   130,   131,    16,   133,
    19,   135,   105,    23,    13,    24,    34,   110,   142,   105,
    23,    17,    50,    75,    20,    53,    41,   151,   152,    81,
    50,    16,    50,    53,   127,   128,    24,    98,    99,     3,
     4,   127,    17,     7,     8,     9,    10,     4,    12,    13,
     7,     8,    20,    10,    22,     3,     4,    21,    17,    77,
     8,     9,    17,    17,    12,    13,   159,    20,    20,    20,
   149,     3,     4,     5,     6,     7,     8,    17,    10,    11,
    20,    13,    14,    15,    16,     3,     4,    19,     4,     7,
     8,     9,    10,    20,    12,    13,     3,     4,    18,    20,
     7,     8,     9,    10,    17,    12,     3,     4,    17,    13,
     7,     8,     9,    10,     4,    12,    17,     7,     8,    20,
    10,     4,    24,    13,     7,     8,    17,    10,     3,     4,
    13,    20,    17,     8,     9,    20,    22,    12,     3,     4,
     5,     6,    16,    20,    18,    19,    17,    17,    17,    17,
    17,    17,     0,    17,    -1,    -1,    -1,    20,    17,    16,
    22,    22,    22,    17,    17,    23,    17,    17,    20,    13,
    13,    13,    17,     0,    23,    22,    22,    17,    17,    17,
    16,     0,    17,    17,    17,    17,    17
a945 12
		  op->reg = yyvsp[-3].reg;
		  op->disp = yyvsp[-1].exp;
		  if ((yyvsp[-3].reg >= ZADDR0 && yyvsp[-3].reg <= ZADDR7)
		      || yyvsp[-3].reg == ZPC)
		    op->mode = BASE;
		  else
		    op->mode = DISP;
		;
    break;}
case 18:
#line 214 "./config/m68k-parse.y"
{
d955 2
a956 2
case 19:
#line 224 "./config/m68k-parse.y"
d962 2
a963 2
case 20:
#line 229 "./config/m68k-parse.y"
d969 2
a970 2
case 21:
#line 234 "./config/m68k-parse.y"
d976 2
a977 2
case 22:
#line 239 "./config/m68k-parse.y"
d985 2
a986 2
case 23:
#line 246 "./config/m68k-parse.y"
d998 2
a999 2
case 24:
#line 257 "./config/m68k-parse.y"
d1007 2
a1008 10
case 25:
#line 264 "./config/m68k-parse.y"
{
		  op->mode = BASE;
		  op->disp = yyvsp[-1].exp;
		  op->index = yyvsp[-3].indexreg;
		;
    break;}
case 26:
#line 270 "./config/m68k-parse.y"
d1016 2
a1017 2
case 27:
#line 277 "./config/m68k-parse.y"
d1024 2
a1025 2
case 28:
#line 283 "./config/m68k-parse.y"
d1037 2
a1038 2
case 29:
#line 294 "./config/m68k-parse.y"
d1049 2
a1050 2
case 30:
#line 304 "./config/m68k-parse.y"
d1058 2
a1059 2
case 31:
#line 311 "./config/m68k-parse.y"
d1066 2
a1067 2
case 32:
#line 317 "./config/m68k-parse.y"
d1076 2
a1077 2
case 33:
#line 325 "./config/m68k-parse.y"
d1085 2
a1086 2
case 34:
#line 332 "./config/m68k-parse.y"
d1094 2
a1095 2
case 35:
#line 339 "./config/m68k-parse.y"
d1102 2
a1103 2
case 36:
#line 345 "./config/m68k-parse.y"
d1112 2
a1113 2
case 37:
#line 353 "./config/m68k-parse.y"
d1121 2
a1122 2
case 38:
#line 360 "./config/m68k-parse.y"
d1135 2
a1136 2
case 39:
#line 372 "./config/m68k-parse.y"
d1148 2
a1149 2
case 40:
#line 383 "./config/m68k-parse.y"
d1158 2
a1159 2
case 41:
#line 396 "./config/m68k-parse.y"
d1168 2
a1169 2
case 42:
#line 404 "./config/m68k-parse.y"
d1178 2
a1179 2
case 43:
#line 412 "./config/m68k-parse.y"
d1188 2
a1189 2
case 44:
#line 420 "./config/m68k-parse.y"
d1200 2
a1201 2
case 45:
#line 430 "./config/m68k-parse.y"
d1209 2
a1210 2
case 46:
#line 437 "./config/m68k-parse.y"
d1219 2
a1220 2
case 47:
#line 445 "./config/m68k-parse.y"
d1228 2
a1229 2
case 48:
#line 452 "./config/m68k-parse.y"
d1238 2
a1239 2
case 50:
#line 467 "./config/m68k-parse.y"
d1246 2
a1247 2
case 52:
#line 481 "./config/m68k-parse.y"
d1254 2
a1255 2
case 63:
#line 524 "./config/m68k-parse.y"
d1260 2
a1261 2
case 67:
#line 541 "./config/m68k-parse.y"
d1266 2
a1267 2
case 68:
#line 545 "./config/m68k-parse.y"
d1272 2
a1273 2
case 69:
#line 554 "./config/m68k-parse.y"
d1279 2
a1280 2
case 70:
#line 559 "./config/m68k-parse.y"
d1285 2
a1286 2
case 71:
#line 568 "./config/m68k-parse.y"
d1292 2
a1293 2
case 72:
#line 573 "./config/m68k-parse.y"
d1298 2
a1299 2
case 74:
#line 583 "./config/m68k-parse.y"
d1304 2
a1305 2
case 75:
#line 587 "./config/m68k-parse.y"
d1310 2
a1311 2
case 76:
#line 599 "./config/m68k-parse.y"
d1316 2
a1317 2
case 78:
#line 604 "./config/m68k-parse.y"
d1322 2
a1323 2
case 79:
#line 608 "./config/m68k-parse.y"
d1328 2
a1329 2
case 80:
#line 615 "./config/m68k-parse.y"
d1334 2
a1335 2
case 81:
#line 622 "./config/m68k-parse.y"
d1340 2
a1341 2
case 82:
#line 626 "./config/m68k-parse.y"
d1346 2
a1347 2
case 83:
#line 630 "./config/m68k-parse.y"
d1352 2
a1353 2
case 84:
#line 634 "./config/m68k-parse.y"
d1561 1
a1561 1
#line 644 "./config/m68k-parse.y"
a1644 1
  int tail = 0;
a1655 10
    case '@@':
      /* In MRI mode, this can be the start of an octal number.  */
      if (flag_mri)
	{
	  if (isdigit (str[1])
	      || ((str[1] == '+' || str[1] == '-')
		  && isdigit (str[2])))
	    break;
	}
      /* Fall through.  */
d1661 1
d1843 1
a1843 1
    tail = 0;
d1863 1
d1867 4
a1870 43
	tail = 2;
    }

#ifdef OBJ_ELF
  {
    /* Look for @@PLTPC, etc.  */
    char *cp;

    yylval.exp.pic_reloc = pic_none;
    cp = s - tail;
    if (cp - 6 > str && cp[-6] == '@@')
      {
	if (strncmp (cp - 6, "@@PLTPC", 6) == 0)
	  {
	    yylval.exp.pic_reloc = pic_plt_pcrel;
	    tail += 6;
	  }
	else if (strncmp (cp - 6, "@@GOTPC", 6) == 0)
	  {
	    yylval.exp.pic_reloc = pic_got_pcrel;
	    tail += 6;
	  }
      }
    else if (cp - 4 > str && cp[-4] == '@@')
      {
	if (strncmp (cp - 4, "@@PLT", 4) == 0)
	  {
	    yylval.exp.pic_reloc = pic_plt_off;
	    tail += 4;
	  }
	else if (strncmp (cp - 4, "@@GOT", 4) == 0)
	  {
	    yylval.exp.pic_reloc = pic_got_off;
	    tail += 4;
	  }
      }
  }
#endif

  if (tail != 0)
    {
      c = s[-tail];
      s[-tail] = 0;
d1879 1
a1879 1
  if (tail != 0)
d1881 1
a1881 1
      s[-tail] = c;
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 2
a3 2
/*  A Bison parser, made from m68k-parse.y
    by GNU Bison version 1.28  */
d7 11
a17 11
#define	DR	257
#define	AR	258
#define	FPR	259
#define	FPCR	260
#define	LPC	261
#define	ZAR	262
#define	ZDR	263
#define	LZPC	264
#define	CREG	265
#define	INDEXREG	266
#define	EXPR	267
d19 1
a19 1
#line 27 "m68k-parse.y"
d85 1
a85 1
#line 93 "m68k-parse.y"
d94 17
d125 1
a125 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 267 ? yytranslate[x] : 44)
d153 2
a154 2
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13
d221 1
a221 1
   623,   628,   632,   636
a222 4
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
d229 1
a229 1
"reglistreg", NULL
d361 1
a361 2
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */
d378 1
a378 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d385 1
a385 9
/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
a386 1
#define YYSTACK_USE_ALLOCA
d389 1
a389 2
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
d392 1
a392 6
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
a393 1
#endif
d396 1
a396 3
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
d398 9
a406 7
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
a407 1
#endif
d410 3
a412 4
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */
d414 4
a417 5
#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif
d427 2
a428 2
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
d509 5
a514 5
/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

d516 1
a516 1
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
d523 2
a524 1
__yy_memcpy (to, from, count)
d526 1
a526 2
     char *from;
     unsigned int count;
d541 1
a541 1
__yy_memcpy (char *to, char *from, unsigned int count)
d543 1
a544 1
  register char *f = from;
d554 1
a554 1
#line 217 "/usr/share/misc/bison.simple"
a562 5
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
d564 2
a565 3
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
a566 9
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
d570 1
a570 1
yyparse(YYPARSE_PARAM_ARG)
a596 1
  int yyfree_stacks = 0;
a680 8
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
d686 4
a689 9
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
d691 2
a692 3
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
d853 1
a853 1
#line 126 "m68k-parse.y"
d860 1
a860 1
#line 131 "m68k-parse.y"
d867 1
a867 1
#line 136 "m68k-parse.y"
d874 1
a874 1
#line 141 "m68k-parse.y"
d881 1
a881 1
#line 146 "m68k-parse.y"
d888 1
a888 1
#line 151 "m68k-parse.y"
d895 1
a895 1
#line 156 "m68k-parse.y"
d902 1
a902 1
#line 161 "m68k-parse.y"
d909 1
a909 1
#line 166 "m68k-parse.y"
d916 1
a916 1
#line 179 "m68k-parse.y"
d923 1
a923 1
#line 184 "m68k-parse.y"
d930 1
a930 1
#line 189 "m68k-parse.y"
d937 1
a937 1
#line 194 "m68k-parse.y"
d949 1
a949 1
#line 204 "m68k-parse.y"
d961 1
a961 1
#line 214 "m68k-parse.y"
d973 1
a973 1
#line 224 "m68k-parse.y"
d980 1
a980 1
#line 229 "m68k-parse.y"
d987 1
a987 1
#line 234 "m68k-parse.y"
d994 1
a994 1
#line 239 "m68k-parse.y"
d1003 1
a1003 1
#line 246 "m68k-parse.y"
d1006 1
a1006 1
		    yyerror (_("syntax error"));
d1016 1
a1016 1
#line 257 "m68k-parse.y"
d1025 1
a1025 1
#line 264 "m68k-parse.y"
d1033 1
a1033 1
#line 270 "m68k-parse.y"
d1042 1
a1042 1
#line 277 "m68k-parse.y"
d1050 1
a1050 1
#line 283 "m68k-parse.y"
d1053 1
a1053 1
		    yyerror (_("syntax error"));
d1063 1
a1063 1
#line 294 "m68k-parse.y"
d1066 1
a1066 1
		    yyerror (_("syntax error"));
d1075 1
a1075 1
#line 304 "m68k-parse.y"
d1084 1
a1084 1
#line 311 "m68k-parse.y"
d1092 1
a1092 1
#line 317 "m68k-parse.y"
d1102 1
a1102 1
#line 325 "m68k-parse.y"
d1111 1
a1111 1
#line 332 "m68k-parse.y"
d1120 1
a1120 1
#line 339 "m68k-parse.y"
d1128 1
a1128 1
#line 345 "m68k-parse.y"
d1138 1
a1138 1
#line 353 "m68k-parse.y"
d1147 1
a1147 1
#line 360 "m68k-parse.y"
d1150 1
a1150 1
		    yyerror (_("syntax error"));
d1161 1
a1161 1
#line 372 "m68k-parse.y"
d1164 1
a1164 1
		    yyerror (_("syntax error"));
d1174 1
a1174 1
#line 383 "m68k-parse.y"
d1184 1
a1184 1
#line 396 "m68k-parse.y"
d1188 1
a1188 1
		    yyerror (_("syntax error"));
d1194 1
a1194 1
#line 404 "m68k-parse.y"
d1198 1
a1198 1
		    yyerror (_("syntax error"));
d1204 1
a1204 1
#line 412 "m68k-parse.y"
d1208 1
a1208 1
		    yyerror (_("syntax error"));
d1214 1
a1214 1
#line 420 "m68k-parse.y"
d1226 1
a1226 1
#line 430 "m68k-parse.y"
d1235 1
a1235 1
#line 437 "m68k-parse.y"
d1245 1
a1245 1
#line 445 "m68k-parse.y"
d1254 1
a1254 1
#line 452 "m68k-parse.y"
d1264 1
a1264 1
#line 467 "m68k-parse.y"
d1272 1
a1272 1
#line 481 "m68k-parse.y"
d1280 1
a1280 1
#line 524 "m68k-parse.y"
d1286 1
a1286 1
#line 541 "m68k-parse.y"
d1292 1
a1292 1
#line 545 "m68k-parse.y"
d1298 1
a1298 1
#line 554 "m68k-parse.y"
d1305 1
a1305 1
#line 559 "m68k-parse.y"
d1311 1
a1311 1
#line 568 "m68k-parse.y"
d1318 1
a1318 1
#line 573 "m68k-parse.y"
d1324 1
a1324 1
#line 583 "m68k-parse.y"
d1330 1
a1330 1
#line 587 "m68k-parse.y"
d1336 1
a1336 1
#line 599 "m68k-parse.y"
d1342 1
a1342 1
#line 604 "m68k-parse.y"
d1348 1
a1348 1
#line 608 "m68k-parse.y"
d1354 1
a1354 1
#line 615 "m68k-parse.y"
d1356 1
a1356 4
		  if (yyvsp[-2].onereg <= yyvsp[0].onereg)
		    yyval.mask = (1 << (yyvsp[0].onereg + 1)) - 1 - ((1 << yyvsp[-2].onereg) - 1);
		  else
		    yyval.mask = (1 << (yyvsp[-2].onereg + 1)) - 1 - ((1 << yyvsp[0].onereg) - 1);
d1360 1
a1360 1
#line 625 "m68k-parse.y"
d1366 1
a1366 1
#line 629 "m68k-parse.y"
d1372 1
a1372 1
#line 633 "m68k-parse.y"
d1378 1
a1378 1
#line 637 "m68k-parse.y"
d1390 1
a1390 1
#line 543 "/usr/share/misc/bison.simple"
a1584 24

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
d1586 1
a1586 1
#line 647 "m68k-parse.y"
d1814 1
a1814 1
	      yyerror (_("illegal size specification"));
d1820 3
a1822 3
      yylval.indexreg.scale = 1;

      if (*s == '*' || *s == ':')
a1823 2
	  expressionS scale;

d1825 1
a1825 10

	  hold = input_line_pointer;
	  input_line_pointer = s;
	  expression (&scale);
	  s = input_line_pointer;
	  input_line_pointer = hold;

	  if (scale.X_op != O_constant)
	    yyerror (_("scale specification must resolve to a number"));
	  else
d1827 11
a1837 12
	      switch (scale.X_add_number)
		{
		case 1:
		case 2:
		case 4:
		case 8:
		  yylval.indexreg.scale = scale.X_add_number;
		  break;
		default:
		  yyerror (_("invalid scale value"));
		  break;
		}
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d348 1
a348 1
#line 3 "/usr/share/bison/bison.simple"
d562 1
a562 1
#line 217 "/usr/share/bison/bison.simple"
d1431 1
a1431 1
#line 543 "/usr/share/bison/bison.simple"
@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 3
a3 2
/* A Bison parser, made from m68k-parse.y
   by GNU bison 1.35.  */
d7 11
a17 11
# define	DR	257
# define	AR	258
# define	FPR	259
# define	FPCR	260
# define	LPC	261
# define	ZAR	262
# define	ZDR	263
# define	LZPC	264
# define	CREG	265
# define	INDEXREG	266
# define	EXPR	267
a24 1
#include "safe-ctype.h"
d85 1
a85 2
#line 94 "m68k-parse.y"
#ifndef YYSTYPE
d93 6
a98 3
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
a99 2
#ifndef YYDEBUG
# define YYDEBUG 0
a107 1
/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
d110 28
a137 30
/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,    14,     2,     2,    15,     2,
      16,    17,     2,    18,    20,    19,     2,    24,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    23,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    21,     2,    22,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13
d140 11
a150 12
#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     6,     8,    10,    12,    14,    16,
      18,    21,    24,    26,    30,    35,    40,    46,    52,    57,
      61,    65,    69,    77,    85,    92,    98,   105,   111,   118,
     124,   130,   135,   145,   153,   162,   169,   180,   189,   200,
     209,   218,   221,   225,   229,   235,   242,   253,   263,   274,
     276,   278,   280,   282,   284,   286,   288,   290,   292,   294,
     296,   298,   300,   302,   303,   305,   307,   309,   310,   313,
     314,   317,   318,   321,   323,   327,   331,   333,   335,   339,
     343,   347,   349,   351,   353
d152 38
a189 38
static const short yyrhs[] =
{
      26,     0,    27,     0,    28,     0,     3,     0,     4,     0,
       5,     0,     6,     0,    11,     0,    13,     0,    14,    13,
       0,    15,    13,     0,    40,     0,    16,     4,    17,     0,
      16,     4,    17,    18,     0,    19,    16,     4,    17,     0,
      16,    13,    20,    34,    17,     0,    16,    34,    20,    13,
      17,     0,    13,    16,    34,    17,     0,    16,     7,    17,
       0,    16,     8,    17,     0,    16,    10,    17,     0,    16,
      13,    20,    34,    20,    29,    17,     0,    16,    13,    20,
      34,    20,    36,    17,     0,    16,    13,    20,    30,    37,
      17,     0,    16,    30,    20,    13,    17,     0,    13,    16,
      34,    20,    29,    17,     0,    16,    34,    20,    29,    17,
       0,    13,    16,    34,    20,    36,    17,     0,    16,    34,
      20,    36,    17,     0,    13,    16,    30,    37,    17,     0,
      16,    30,    37,    17,     0,    16,    21,    13,    37,    22,
      20,    29,    38,    17,     0,    16,    21,    13,    37,    22,
      38,    17,     0,    16,    21,    34,    22,    20,    29,    38,
      17,     0,    16,    21,    34,    22,    38,    17,     0,    16,
      21,    13,    20,    34,    20,    29,    22,    38,    17,     0,
      16,    21,    34,    20,    29,    22,    38,    17,     0,    16,
      21,    13,    20,    34,    20,    36,    22,    38,    17,     0,
      16,    21,    34,    20,    36,    22,    38,    17,     0,    16,
      21,    39,    30,    37,    22,    38,    17,     0,    35,    23,
       0,    35,    23,    18,     0,    35,    23,    19,     0,    35,
      23,    16,    13,    17,     0,    35,    23,    16,    39,    29,
      17,     0,    35,    23,    16,    13,    17,    23,    16,    39,
      29,    17,     0,    35,    23,    16,    13,    17,    23,    16,
      13,    17,     0,    35,    23,    16,    39,    29,    17,    23,
      16,    13,    17,     0,    12,     0,    31,     0,    12,     0,
      32,     0,    32,     0,     4,     0,     8,     0,     3,     0,
       9,     0,     4,     0,     7,     0,    33,     0,    10,     0,
       8,     0,     0,    34,     0,     7,     0,    10,     0,     0,
      20,    34,     0,     0,    20,    13,     0,     0,    13,    20,
       0,    42,     0,    42,    24,    41,     0,    43,    24,    41,
       0,    43,     0,    42,     0,    42,    24,    41,     0,    43,
      24,    41,     0,    43,    19,    43,     0,     3,     0,     4,
       0,     5,     0,     6,     0
d194 11
a204 13
#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   117,   119,   120,   125,   131,   136,   141,   146,   151,
     156,   161,   166,   178,   184,   189,   194,   204,   214,   224,
     229,   234,   239,   246,   257,   264,   270,   277,   283,   294,
     304,   311,   317,   325,   332,   339,   345,   353,   360,   372,
     383,   395,   404,   412,   420,   430,   437,   445,   452,   465,
     467,   479,   481,   492,   494,   495,   500,   502,   507,   509,
     515,   517,   518,   523,   528,   533,   535,   540,   545,   553,
     559,   567,   573,   581,   583,   587,   598,   603,   604,   608,
     614,   624,   629,   633,   637
d209 1
a209 1
#if (YYDEBUG) || defined YYERROR_VERBOSE
d211 6
a216 9
/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "DR", "AR", "FPR", "FPCR", "LPC", "ZAR", 
  "ZDR", "LZPC", "CREG", "INDEXREG", "EXPR", "'#'", "'&'", "'('", "')'", 
  "'+'", "'-'", "','", "'['", "']'", "'@@'", "'/'", "operand", 
  "generic_operand", "motorola_operand", "mit_operand", "zireg", "zdireg", 
  "zadr", "zdr", "apc", "zapc", "optzapc", "zpc", "optczapc", "optcexpr", 
  "optexprc", "reglist", "ireglist", "reglistpair", "reglistreg", 0
d220 10
a229 12
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    25,    25,    25,    26,    26,    26,    26,    26,    26,
      26,    26,    26,    27,    27,    27,    27,    27,    27,    27,
      27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
      27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
      27,    28,    28,    28,    28,    28,    28,    28,    28,    29,
      29,    30,    30,    31,    31,    31,    32,    32,    33,    33,
      34,    34,    34,    35,    35,    36,    36,    37,    37,    38,
      38,    39,    39,    40,    40,    40,    41,    41,    41,    41,
      42,    43,    43,    43,    43
d232 10
a241 12
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     3,     4,     4,     5,     5,     4,     3,
       3,     3,     7,     7,     6,     5,     6,     5,     6,     5,
       5,     4,     9,     7,     8,     6,    10,     8,    10,     8,
       8,     2,     3,     3,     5,     6,    10,     9,    10,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     1,     0,     2,     0,
       2,     0,     2,     1,     3,     3,     1,     1,     3,     3,
       3,     1,     1,     1,     1
d244 19
a262 23
/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
      63,    81,    82,    83,    84,    59,    62,    61,     8,     9,
       0,     0,     0,     0,     1,     2,     3,    60,    64,     0,
      12,    73,     0,     0,    10,    11,    56,    58,    59,    62,
      57,    61,    51,     0,    71,    67,    52,     0,     0,    41,
       0,     0,     0,    58,    67,     0,    13,    19,    20,    21,
       0,    67,     0,     0,     0,     0,     0,     0,    71,    42,
      43,    81,    82,    83,    84,    74,    77,    76,    80,    75,
       0,     0,    18,     0,    14,    67,     0,    72,     0,     0,
      69,    67,     0,    68,    31,    54,    65,    55,    66,    49,
       0,     0,    50,    53,     0,    15,     0,     0,     0,     0,
      30,     0,     0,     0,    16,     0,    68,    69,     0,     0,
       0,     0,     0,    25,    17,    27,    29,    44,    72,     0,
      78,    79,    26,    28,    24,     0,     0,     0,     0,     0,
      69,    69,    70,    69,    35,    69,     0,    45,    22,    23,
       0,     0,    69,    33,     0,     0,     0,     0,     0,    71,
       0,    69,    69,     0,    37,    39,    34,    40,     0,     0,
       0,     0,     0,    32,    47,     0,     0,    36,    38,    46,
      48,     0,     0,     0
d265 3
a267 4
static const short yydefgoto[] =
{
     171,    14,    15,    16,    91,    35,    92,    93,    17,    83,
      19,    94,    55,   111,    53,    20,    65,    66,    67
d270 19
a288 20
static const short yypact[] =
{
      89,    10,    11,    19,    23,-32768,-32768,-32768,-32768,    13,
      -4,    22,    57,    36,-32768,-32768,-32768,-32768,-32768,    18,
  -32768,    33,    -2,   114,-32768,-32768,-32768,    46,    62,    66,
  -32768,    67,-32768,    68,   131,    69,-32768,    70,   105,   147,
     156,   156,   156,-32768,    94,    25,   101,-32768,-32768,-32768,
     114,   100,    53,     9,   138,   108,   103,   112,   117,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   119,    12,-32768,-32768,
      64,   130,-32768,   124,-32768,    94,    81,    64,   135,   124,
     132,    94,   150,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     151,   152,-32768,-32768,   153,-32768,   120,   146,   156,   156,
  -32768,   154,   155,   157,-32768,   124,   144,   158,   159,   160,
      73,   162,   161,-32768,-32768,-32768,-32768,   163,-32768,   167,
  -32768,-32768,-32768,-32768,-32768,   168,   170,   124,    73,   171,
     169,   169,-32768,   169,-32768,   169,   164,   172,-32768,-32768,
     174,   175,   169,-32768,   177,   176,   181,   182,   183,   178,
     185,   169,   169,   186,-32768,-32768,-32768,-32768,   136,   146,
     179,   187,   188,-32768,-32768,   189,   190,-32768,-32768,-32768,
  -32768,   173,   194,-32768
d291 3
a293 4
static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,   -72,     1,-32768,    -7,-32768,     3,
  -32768,   -65,   -31,  -103,   -58,-32768,   -40,   202,     6
d300 22
a321 23
static const short yytable[] =
{
      97,   101,    69,    18,   129,    36,    22,   108,   102,    24,
      -4,    -5,    26,    71,   109,    37,    36,    41,    30,    -6,
      78,    32,    42,    -7,    44,   119,    45,   145,   146,    23,
     147,    41,   148,   125,   -58,    25,    99,    52,   133,   153,
     126,    39,    72,    36,   103,    73,    36,    68,   161,   162,
     112,    75,    38,    76,    81,   140,   142,    40,   120,   121,
      26,    27,   141,    46,    28,    29,    30,    31,    43,    32,
      33,     5,     6,    79,     7,    80,    26,    85,    34,    47,
     106,    87,    30,    48,    49,    89,   132,   165,    50,    54,
      56,   159,     1,     2,     3,     4,     5,     6,   104,     7,
       8,   105,     9,    10,    11,    12,    26,    85,    13,    57,
      86,    87,    30,    88,    70,    89,    90,    26,    43,    74,
      77,     5,     6,    30,     7,    84,    32,    26,    85,    95,
      96,    86,    87,    30,    88,    43,    89,   117,     5,     6,
     118,     7,    43,    98,    51,     5,     6,   100,     7,    26,
      85,    82,   110,   164,    87,    30,   118,   107,    89,    61,
      62,    63,    64,    58,   127,    59,    60,   113,   114,   115,
     116,   122,   123,   172,   124,     0,     0,     0,   128,   134,
     149,   130,   131,   135,   137,   138,   136,   139,   143,   144,
     132,   158,   166,   154,   173,   150,   151,   152,   155,   156,
     157,   160,    21,   163,   167,   168,   169,   170
d324 22
a345 23
static const short yycheck[] =
{
      58,    73,    42,     0,   107,    12,     0,    79,    73,    13,
       0,     0,     3,    44,    79,    12,    23,    19,     9,     0,
      51,    12,    24,     0,    23,    97,    23,   130,   131,    16,
     133,    19,   135,   105,    23,    13,    24,    34,   110,   142,
     105,    23,    17,    50,    75,    20,    53,    41,   151,   152,
      81,    50,    16,    50,    53,   127,   128,    24,    98,    99,
       3,     4,   127,    17,     7,     8,     9,    10,     4,    12,
      13,     7,     8,    20,    10,    22,     3,     4,    21,    17,
      77,     8,     9,    17,    17,    12,    13,   159,    20,    20,
      20,   149,     3,     4,     5,     6,     7,     8,    17,    10,
      11,    20,    13,    14,    15,    16,     3,     4,    19,     4,
       7,     8,     9,    10,    20,    12,    13,     3,     4,    18,
      20,     7,     8,     9,    10,    17,    12,     3,     4,    17,
      13,     7,     8,     9,    10,     4,    12,    17,     7,     8,
      20,    10,     4,    24,    13,     7,     8,    17,    10,     3,
       4,    13,    20,    17,     8,     9,    20,    22,    12,     3,
       4,     5,     6,    16,    20,    18,    19,    17,    17,    17,
      17,    17,    17,     0,    17,    -1,    -1,    -1,    20,    17,
      16,    22,    22,    22,    17,    17,    23,    17,    17,    20,
      13,    13,    13,    17,     0,    23,    22,    22,    17,    17,
      17,    16,     0,    17,    17,    17,    17,    17
d348 2
a349 1
#line 3 "/usr/share/bison-1.35/bison.simple"
d352 1
a352 3

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.
d374 46
a419 57
/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};
d421 5
a425 2
/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
d427 3
a429 64
/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif
d438 3
a440 2
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
d444 1
a444 1
#define YYBACKUP(Token, Value)					\
d447 1
a447 3
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
d453 1
a453 4
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
d459 23
d483 3
a485 2
/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).
d487 3
a489 8
   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
d492 2
d495 7
a501 40
/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */
a502 1
/* YYINITDEPTH -- initial size of the parser's stacks.  */
d504 1
a504 1
# define YYINITDEPTH 200
d507 2
a508 6
/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */
d511 1
a511 1
# undef YYMAXDEPTH
d515 1
a515 1
# define YYMAXDEPTH 10000
d518 21
a538 16
#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;
d540 2
a541 4
  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
a542 2
#  endif
# endif
d544 1
a544 17
# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;
d546 8
a553 2
  while ((*yyd++ = *yys++) != '\0')
    continue;
d555 2
a556 1
  return yyd - 1;
d558 2
a559 2
#  endif
# endif
d562 1
a562 2
#line 315 "/usr/share/bison-1.35/bison.simple"

d571 11
a581 11
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */
d585 1
a585 1
# ifdef YYPARSE_PARAM
d587 1
a587 1
# else
a588 1
# endif
a589 23

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
a591 7

/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

d593 1
a593 1
yyparse (YYPARSE_PARAM_ARG)
a595 5
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

a597 17
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
d599 6
d606 2
a607 4
  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;
d609 2
a610 3
#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
a612 1
#endif
d614 1
a614 2
#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
d616 1
a616 1
# define YYPOPSTACK   (yyvsp--, yyssp--)
d619 2
a620 1
  YYSIZE_T yystacksize = YYINITDEPTH;
d622 8
d631 3
a633 6
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif
a634 2
  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
d637 4
a640 1
  YYDPRINTF ((stderr, "Starting parse\n"));
d652 1
a652 1
  yyssp = yyss;
d654 1
a654 1
#if YYLSP_NEEDED
a656 1
  goto yysetstate;
d658 4
a661 8
/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;
d663 1
a663 2
 yysetstate:
  *yyssp = yystate;
d667 8
d676 1
a676 1
      YYSIZE_T yysize = yyssp - yyss + 1;
d679 21
a699 28
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
a700 3
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
d703 12
a714 1
	goto yyoverflowlab;
d718 14
a731 17

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
d734 4
a737 4
      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
d740 4
a743 2
      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));
d749 4
a752 1
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
d755 1
a755 6


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
d774 4
a777 1
      YYDPRINTF ((stderr, "Reading a token: "));
d788 4
a791 1
      YYDPRINTF ((stderr, "Now at end of input.\n"));
d795 1
a795 1
      yychar1 = YYTRANSLATE (yychar);
d797 1
a797 3
#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
d800 4
a803 5
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
d805 2
a806 2
# endif
	  YYFPRINTF (stderr, ")\n");
d838 5
a842 2
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));
d849 1
a849 1
#if YYLSP_NEEDED
d853 2
a854 4
  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;
d859 2
a861 4
/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
a864 2
  goto yyreduce;

d866 1
a866 3
/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
a867 1
  /* yyn is the number of a rule to reduce with.  */
d869 2
d872 1
a872 20
  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
d875 1
a875 1
      int yyi;
d877 2
a878 2
      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);
d881 3
a883 3
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
d887 1
d891 1
a891 1
#line 127 "m68k-parse.y"
d895 2
a896 2
		}
    break;
d898 1
a898 1
#line 132 "m68k-parse.y"
d902 2
a903 2
		}
    break;
d905 1
a905 1
#line 137 "m68k-parse.y"
d909 2
a910 2
		}
    break;
d912 1
a912 1
#line 142 "m68k-parse.y"
d916 2
a917 2
		}
    break;
d919 1
a919 1
#line 147 "m68k-parse.y"
d923 2
a924 2
		}
    break;
d926 1
a926 1
#line 152 "m68k-parse.y"
d930 2
a931 2
		}
    break;
d933 1
a933 1
#line 157 "m68k-parse.y"
d937 2
a938 2
		}
    break;
d940 1
a940 1
#line 162 "m68k-parse.y"
d944 2
a945 2
		}
    break;
d947 1
a947 1
#line 167 "m68k-parse.y"
d951 2
a952 2
		}
    break;
d954 1
a954 1
#line 180 "m68k-parse.y"
d958 2
a959 2
		}
    break;
d961 1
a961 1
#line 185 "m68k-parse.y"
d965 2
a966 2
		}
    break;
d968 1
a968 1
#line 190 "m68k-parse.y"
d972 2
a973 2
		}
    break;
d975 1
a975 1
#line 195 "m68k-parse.y"
d984 2
a985 2
		}
    break;
d987 1
a987 1
#line 205 "m68k-parse.y"
d996 2
a997 2
		}
    break;
d999 1
a999 1
#line 215 "m68k-parse.y"
d1008 2
a1009 2
		}
    break;
d1011 1
a1011 1
#line 225 "m68k-parse.y"
d1015 2
a1016 2
		}
    break;
d1018 1
a1018 1
#line 230 "m68k-parse.y"
d1022 2
a1023 2
		}
    break;
d1025 1
a1025 1
#line 235 "m68k-parse.y"
d1029 2
a1030 2
		}
    break;
d1032 1
a1032 1
#line 240 "m68k-parse.y"
d1038 2
a1039 2
		}
    break;
d1041 1
a1041 1
#line 247 "m68k-parse.y"
d1051 2
a1052 2
		}
    break;
d1054 1
a1054 1
#line 258 "m68k-parse.y"
d1060 2
a1061 2
		}
    break;
d1063 1
a1063 1
#line 265 "m68k-parse.y"
d1068 2
a1069 2
		}
    break;
d1071 1
a1071 1
#line 271 "m68k-parse.y"
d1077 2
a1078 2
		}
    break;
d1080 1
a1080 1
#line 278 "m68k-parse.y"
d1085 2
a1086 2
		}
    break;
d1088 1
a1088 1
#line 284 "m68k-parse.y"
d1098 2
a1099 2
		}
    break;
d1101 1
a1101 1
#line 295 "m68k-parse.y"
d1110 2
a1111 2
		}
    break;
d1113 1
a1113 1
#line 305 "m68k-parse.y"
d1119 2
a1120 2
		}
    break;
d1122 1
a1122 1
#line 312 "m68k-parse.y"
d1127 2
a1128 2
		}
    break;
d1130 1
a1130 1
#line 318 "m68k-parse.y"
d1137 2
a1138 2
		}
    break;
d1140 1
a1140 1
#line 326 "m68k-parse.y"
d1146 2
a1147 2
		}
    break;
d1149 1
a1149 1
#line 333 "m68k-parse.y"
d1155 2
a1156 2
		}
    break;
d1158 1
a1158 1
#line 340 "m68k-parse.y"
d1163 2
a1164 2
		}
    break;
d1166 1
a1166 1
#line 346 "m68k-parse.y"
d1173 2
a1174 2
		}
    break;
d1176 1
a1176 1
#line 354 "m68k-parse.y"
d1182 2
a1183 2
		}
    break;
d1185 1
a1185 1
#line 361 "m68k-parse.y"
d1196 2
a1197 2
		}
    break;
d1199 1
a1199 1
#line 373 "m68k-parse.y"
d1209 2
a1210 2
		}
    break;
d1212 1
a1212 1
#line 384 "m68k-parse.y"
d1219 2
a1220 2
		}
    break;
d1222 1
a1222 1
#line 397 "m68k-parse.y"
d1229 2
a1230 2
		}
    break;
d1232 1
a1232 1
#line 405 "m68k-parse.y"
d1239 2
a1240 2
		}
    break;
d1242 1
a1242 1
#line 413 "m68k-parse.y"
d1249 2
a1250 2
		}
    break;
d1252 1
a1252 1
#line 421 "m68k-parse.y"
d1261 2
a1262 2
		}
    break;
d1264 1
a1264 1
#line 431 "m68k-parse.y"
d1270 2
a1271 2
		}
    break;
d1273 1
a1273 1
#line 438 "m68k-parse.y"
d1280 2
a1281 2
		}
    break;
d1283 1
a1283 1
#line 446 "m68k-parse.y"
d1289 2
a1290 2
		}
    break;
d1292 1
a1292 1
#line 453 "m68k-parse.y"
d1299 2
a1300 2
		}
    break;
d1302 1
a1302 1
#line 468 "m68k-parse.y"
d1307 2
a1308 2
		}
    break;
d1310 1
a1310 1
#line 482 "m68k-parse.y"
d1315 2
a1316 2
		}
    break;
d1318 1
a1318 1
#line 525 "m68k-parse.y"
d1321 2
a1322 2
		}
    break;
d1324 1
a1324 1
#line 542 "m68k-parse.y"
d1327 2
a1328 2
		}
    break;
d1330 1
a1330 1
#line 546 "m68k-parse.y"
d1333 2
a1334 2
		}
    break;
d1336 1
a1336 1
#line 555 "m68k-parse.y"
d1340 2
a1341 2
		}
    break;
d1343 1
a1343 1
#line 560 "m68k-parse.y"
d1346 2
a1347 2
		}
    break;
d1349 1
a1349 1
#line 569 "m68k-parse.y"
d1353 2
a1354 2
		}
    break;
d1356 1
a1356 1
#line 574 "m68k-parse.y"
d1359 2
a1360 2
		}
    break;
d1362 1
a1362 1
#line 584 "m68k-parse.y"
d1365 2
a1366 2
		}
    break;
d1368 1
a1368 1
#line 588 "m68k-parse.y"
d1371 2
a1372 2
		}
    break;
d1374 1
a1374 1
#line 600 "m68k-parse.y"
d1377 2
a1378 2
		}
    break;
d1380 1
a1380 1
#line 605 "m68k-parse.y"
d1383 2
a1384 2
		}
    break;
d1386 1
a1386 1
#line 609 "m68k-parse.y"
d1389 2
a1390 2
		}
    break;
d1392 1
a1392 1
#line 616 "m68k-parse.y"
d1398 2
a1399 2
		}
    break;
d1401 1
a1401 1
#line 626 "m68k-parse.y"
d1404 2
a1405 2
		}
    break;
d1407 1
a1407 1
#line 630 "m68k-parse.y"
d1410 2
a1411 2
		}
    break;
d1413 1
a1413 1
#line 634 "m68k-parse.y"
d1416 2
a1417 2
		}
    break;
d1419 1
a1419 1
#line 638 "m68k-parse.y"
d1427 2
a1428 2
		}
    break;
d1430 2
a1431 3

#line 705 "/usr/share/bison-1.35/bison.simple"

d1435 1
a1435 1
#if YYLSP_NEEDED
d1439 1
a1439 1
#if YYDEBUG
d1442 5
a1446 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
d1451 16
a1466 2
#if YYLSP_NEEDED
  *++yylsp = yyloc;
d1469 4
a1472 3
  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
d1484 1
d1486 2
a1487 6
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
d1496 12
a1507 15
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
d1509 1
a1509 2
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
d1511 1
a1511 1
	      if (yycount < 5)
d1513 4
a1516 5
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
d1518 4
a1521 4
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
d1524 2
a1525 2
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
d1528 1
a1528 1
	    yyerror ("parse error; also virtual memory exhausted");
d1531 2
a1532 2
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
d1534 1
d1536 1
a1537 5

/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
d1540 1
a1540 2
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */
d1545 6
a1550 2
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
d1554 2
a1555 2
  /* Else will try to reuse lookahead token after shifting the error
     token.  */
d1561 1
a1562 5
/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
d1566 2
a1567 5

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
d1570 1
d1572 1
a1572 7
/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
d1575 1
a1575 1
#if YYLSP_NEEDED
d1579 1
a1579 1
#if YYDEBUG
d1582 5
a1586 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
a1589 3
/*--------------.
| yyerrhandle.  |
`--------------*/
d1591 1
d1614 4
a1617 1
  YYDPRINTF ((stderr, "Shifting error token, "));
d1620 1
a1620 1
#if YYLSP_NEEDED
d1627 11
d1639 8
a1646 26
/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
d1648 2
a1649 1
  return yyresult;
d1651 1
a1651 1
#line 648 "m68k-parse.y"
d1751 1
a1751 1
	  if (ISDIGIT (str[1])
d1753 1
a1753 1
		  && ISDIGIT (str[2])))
d1937 1
a1937 1
	      && (s[-1] == ')' || ISALNUM (s[-1])))
@


1.1.1.6
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d27 1
a27 1
   etc), as well as gratuitously global symbol names If other parser
@


